
typedef struct DXVA2_ExtendedFormat
{
    //union
    //{
    //    struct
    //    {
    //        UINT SampleFormat : 8;
    //        UINT VideoChromaSubsampling : 4;
    //        UINT NominalRange : 3;
    //        UINT VideoTransferMatrix : 3;
    //        UINT VideoLighting : 4;
    //        UINT VideoPrimaries : 5;
    //        UINT VideoTransferFunction : 5;
    //    };
        UINT value;
    //};
} 	DXVA2_ExtendedFormat;

 
typedef
enum DXVA2_SampleFormat
{
    DXVA2_SampleFormatMask = 0xff,
    DXVA2_SampleUnknown = 0,
    DXVA2_SampleProgressiveFrame = 2,
    DXVA2_SampleFieldInterleavedEvenFirst = 3,
    DXVA2_SampleFieldInterleavedOddFirst = 4,
    DXVA2_SampleFieldSingleEven = 5,
    DXVA2_SampleFieldSingleOdd = 6,
    DXVA2_SampleSubStream = 7
} 	DXVA2_SampleFormat;

typedef
enum DXVA2_VideoChromaSubSampling
{
    DXVA2_VideoChromaSubsamplingMask = 0xf,
    DXVA2_VideoChromaSubsampling_Unknown = 0,
    DXVA2_VideoChromaSubsampling_ProgressiveChroma = 0x8,
    DXVA2_VideoChromaSubsampling_Horizontally_Cosited = 0x4,
    DXVA2_VideoChromaSubsampling_Vertically_Cosited = 0x2,
    DXVA2_VideoChromaSubsampling_Vertically_AlignedChromaPlanes = 0x1,
    DXVA2_VideoChromaSubsampling_MPEG2 = 5, //(DXVA2_VideoChromaSubsampling_Horizontally_Cosited | DXVA2_VideoChromaSubsampling_Vertically_AlignedChromaPlanes),
    DXVA2_VideoChromaSubsampling_MPEG1 = 1, //DXVA2_VideoChromaSubsampling_Vertically_AlignedChromaPlanes,
    DXVA2_VideoChromaSubsampling_DV_PAL = 6, //(DXVA2_VideoChromaSubsampling_Horizontally_Cosited | DXVA2_VideoChromaSubsampling_Vertically_Cosited),
    DXVA2_VideoChromaSubsampling_Cosited = 7 //((DXVA2_VideoChromaSubsampling_Horizontally_Cosited | DXVA2_VideoChromaSubsampling_Vertically_Cosited) | DXVA2_VideoChromaSubsampling_Vertically_AlignedChromaPlanes)
} 	DXVA2_VideoChromaSubSampling;

typedef
enum DXVA2_NominalRange
{
    DXVA2_NominalRangeMask = 0x7,
    DXVA2_NominalRange_Unknown = 0,
    DXVA2_NominalRange_Normal = 1,
    DXVA2_NominalRange_Wide = 2,
    DXVA2_NominalRange_0_255 = 1,
    DXVA2_NominalRange_16_235 = 2,
    DXVA2_NominalRange_48_208 = 3
} 	DXVA2_NominalRange;

typedef
enum DXVA2_VideoTransferMatrix
{
    DXVA2_VideoTransferMatrixMask = 0x7,
    DXVA2_VideoTransferMatrix_Unknown = 0,
    DXVA2_VideoTransferMatrix_BT709 = 1,
    DXVA2_VideoTransferMatrix_BT601 = 2,
    DXVA2_VideoTransferMatrix_SMPTE240M = 3
} 	DXVA2_VideoTransferMatrix;

typedef
enum DXVA2_VideoLighting
{
    DXVA2_VideoLightingMask = 0xf,
    DXVA2_VideoLighting_Unknown = 0,
    DXVA2_VideoLighting_bright = 1,
    DXVA2_VideoLighting_office = 2,
    DXVA2_VideoLighting_dim = 3,
    DXVA2_VideoLighting_dark = 4
} 	DXVA2_VideoLighting;

typedef
enum DXVA2_VideoPrimaries
{
    DXVA2_VideoPrimariesMask = 0x1f,
    DXVA2_VideoPrimaries_Unknown = 0,
    DXVA2_VideoPrimaries_reserved = 1,
    DXVA2_VideoPrimaries_BT709 = 2,
    DXVA2_VideoPrimaries_BT470_2_SysM = 3,
    DXVA2_VideoPrimaries_BT470_2_SysBG = 4,
    DXVA2_VideoPrimaries_SMPTE170M = 5,
    DXVA2_VideoPrimaries_SMPTE240M = 6,
    DXVA2_VideoPrimaries_EBU3213 = 7,
    DXVA2_VideoPrimaries_SMPTE_C = 8
} 	DXVA2_VideoPrimaries;

typedef
enum DXVA2_VideoTransferFunction
{
    DXVA2_VideoTransFuncMask = 0x1f,
    DXVA2_VideoTransFunc_Unknown = 0,
    DXVA2_VideoTransFunc_10 = 1,
    DXVA2_VideoTransFunc_18 = 2,
    DXVA2_VideoTransFunc_20 = 3,
    DXVA2_VideoTransFunc_22 = 4,
    DXVA2_VideoTransFunc_709 = 5,
    DXVA2_VideoTransFunc_240M = 6,
    DXVA2_VideoTransFunc_sRGB = 7,
    DXVA2_VideoTransFunc_28 = 8,

//
// Deprecated labels - please use the ones in the DXVA2_VideoTransferFunction enum.
//
     DXVA2_VideoTransFunc_22_709 = 5, //DXVA2_VideoTransFunc_709     
     DXVA2_VideoTransFunc_22_240M = 6, //       DXVA2_VideoTransFunc_240M    
     DXVA2_VideoTransFunc_22_8bit_sRGB = 7 //  DXVA2_VideoTransFunc_sRGB    
} 	DXVA2_VideoTransferFunction;
typedef struct DXVA2_Frequency
{
    UINT Numerator;
    UINT Denominator;
} 	DXVA2_Frequency;

typedef struct DXVA2_VideoDesc
{
    UINT SampleWidth;
    UINT SampleHeight;
    DXVA2_ExtendedFormat SampleFormat;
    D3DFORMAT Format;
    DXVA2_Frequency InputSampleFreq;
    DXVA2_Frequency OutputFrameFreq;
    UINT UABProtectionLevel;
    UINT Reserved;
} 	DXVA2_VideoDesc;


typedef enum DXVA2_DeinterlaceTech
{
    DXVA2_DeinterlaceTech_Unknown = 0,
    DXVA2_DeinterlaceTech_BOBLineReplicate = 0x1,
    DXVA2_DeinterlaceTech_BOBVerticalStretch = 0x2,
    DXVA2_DeinterlaceTech_BOBVerticalStretch4Tap = 0x4,
    DXVA2_DeinterlaceTech_MedianFiltering = 0x8,
    DXVA2_DeinterlaceTech_EdgeFiltering = 0x10,
    DXVA2_DeinterlaceTech_FieldAdaptive = 0x20,
    DXVA2_DeinterlaceTech_PixelAdaptive = 0x40,
    DXVA2_DeinterlaceTech_MotionVectorSteered = 0x80,
    DXVA2_DeinterlaceTech_InverseTelecine = 0x100,
    DXVA2_DeinterlaceTech_Mask = 0x1ff
} DXVA2_DeinterlaceTech;

typedef enum DXVA2_NoiseFilter
{
    DXVA2_NoiseFilterLumaLevel = 1,
    DXVA2_NoiseFilterLumaThreshold = 2,
    DXVA2_NoiseFilterLumaRadius = 3,
    DXVA2_NoiseFilterChromaLevel = 4,
    DXVA2_NoiseFilterChromaThreshold = 5,
    DXVA2_NoiseFilterChromaRadius = 6,
    DXVA2_DetailFilterLumaLevel = 7,
    DXVA2_DetailFilterLumaThreshold = 8,
    DXVA2_DetailFilterLumaRadius = 9,
    DXVA2_DetailFilterChromaLevel = 10,
    DXVA2_DetailFilterChromaThreshold = 11,
    DXVA2_DetailFilterChromaRadius = 12
} DXVA2_NoiseFilter;

typedef enum DXVA2_NoiseFilterTech
{
    DXVA2_NoiseFilterTech_Unsupported = 0,
    DXVA2_NoiseFilterTech_Unknown = 0x1,
    DXVA2_NoiseFilterTech_Median = 0x2,
    DXVA2_NoiseFilterTech_Temporal = 0x4,
    DXVA2_NoiseFilterTech_BlockNoise = 0x8,
    DXVA2_NoiseFilterTech_MosquitoNoise = 0x10,
    DXVA2_NoiseFilterTech_Mask = 0x1f
} DXVA2_NoiseFilterTech;

typedef enum DXVA2_DetailFilterTech
{
    DXVA2_DetailFilterTech_Unsupported = 0,
    DXVA2_DetailFilterTech_Unknown = 0x1,
    DXVA2_DetailFilterTech_Edge = 0x2,
    DXVA2_DetailFilterTech_Sharpening = 0x4,
    DXVA2_DetailFilterTech_Mask = 0x7
} DXVA2_DetailFilterTech;

typedef enum DXVA2_ProcAmp
{
    DXVA2_ProcAmp_None = 0,
    DXVA2_ProcAmp_Brightness = 0x1,
    DXVA2_ProcAmp_Contrast = 0x2,
    DXVA2_ProcAmp_Hue = 0x4,
    DXVA2_ProcAmp_Saturation = 0x8,
    DXVA2_ProcAmp_Mask = 0xf
} DXVA2_ProcAmp;

typedef enum DXVA2_VideoProcess
{
    DXVA2_VideoProcess_None = 0,
    DXVA2_VideoProcess_YUV2RGB = 0x1,
    DXVA2_VideoProcess_StretchX = 0x2,
    DXVA2_VideoProcess_StretchY = 0x4,
    DXVA2_VideoProcess_AlphaBlend = 0x8,
    DXVA2_VideoProcess_SubRects = 0x10,
    DXVA2_VideoProcess_SubStreams = 0x20,
    DXVA2_VideoProcess_SubStreamsExtended = 0x40,
    DXVA2_VideoProcess_YUV2RGBExtended = 0x80,
    DXVA2_VideoProcess_AlphaBlendExtended = 0x100,
    DXVA2_VideoProcess_Constriction = 0x200,
    DXVA2_VideoProcess_NoiseFilter = 0x400,
    DXVA2_VideoProcess_DetailFilter = 0x800,
    DXVA2_VideoProcess_PlanarAlpha = 0x1000,
    DXVA2_VideoProcess_LinearScaling = 0x2000,
    DXVA2_VideoProcess_GammaCompensated = 0x4000,
    DXVA2_VideoProcess_MaintainsOriginalFieldData = 0x8000,
    DXVA2_VideoProcess_Mask = 0xffff
} DXVA2_VideoProcess;

typedef enum DXVA2_VPDev
{
    DXVA2_VPDev_HardwareDevice = 0x1,
    DXVA2_VPDev_EmulatedDXVA1 = 0x2,
    DXVA2_VPDev_SoftwareDevice = 0x4,
    DXVA2_VPDev_Mask = 0x7
} DXVA2_VPDev;

typedef enum DXVA2_SampleData
{
    DXVA2_SampleData_RFF = 0x1,
    DXVA2_SampleData_TFF = 0x2,
    DXVA2_SampleData_RFF_TFF_Present = 0x4,
    DXVA2_SampleData_Mask = 0xffff
} DXVA2_SampleData;

typedef enum DXVA2_DestData
{
    DXVA2_DestData_RFF = 0x1,
    DXVA2_DestData_TFF = 0x2,
    DXVA2_DestData_RFF_TFF_Present = 0x4,
    DXVA2_DestData_Mask = 0xffff
} DXVA2_DestData;
typedef struct DXVA2_VideoProcessorCaps
{
    UINT DeviceCaps;
    D3DPOOL InputPool;
    UINT NumForwardRefSamples;
    UINT NumBackwardRefSamples;
    UINT Reserved;
    UINT DeinterlaceTechnology;
    UINT ProcAmpControlCaps;
    UINT VideoProcessorOperations;
    UINT NoiseFilterTechnology;
    UINT DetailFilterTechnology;
} 	DXVA2_VideoProcessorCaps;

//#ifdef __midl
typedef LONG DXVA2_Fixed32;

//#else
//#pragma warning( push )
//#pragma warning( disable : 4201 ) // nonstandard extension used : nameless struct/union
//typedef struct DXVA2_Fixed32
//{
//    union {
//        struct {
//            USHORT  Fraction;
//            SHORT   Value;
//        };
//        LONG ll;
//    };
//} DXVA2_Fixed32;
//#pragma warning( pop )
//#endif
typedef struct DXVA2_AYUVSample8
{
    UCHAR Cr;
    UCHAR Cb;
    UCHAR Y;
    UCHAR Alpha;
} 	DXVA2_AYUVSample8;

typedef struct DXVA2_AYUVSample16
{
    USHORT Cr;
    USHORT Cb;
    USHORT Y;
    USHORT Alpha;
} 	DXVA2_AYUVSample16;

//#if defined(_D3D9_H_) || defined(_d3d9P_H_)
typedef struct DXVA2_VideoSample
{
    REFERENCE_TIME Start;
    REFERENCE_TIME End;
    DXVA2_ExtendedFormat SampleFormat;
    IDirect3DSurface9* SrcSurface;
    RECT SrcRect;
    RECT DstRect;
    DXVA2_AYUVSample8 Pal[16];
    DXVA2_Fixed32 PlanarAlpha;
    DWORD SampleData;
} 	DXVA2_VideoSample;

//#endif  // _D3D9_H_
typedef struct DXVA2_ValueRange
{
    DXVA2_Fixed32 MinValue;
    DXVA2_Fixed32 MaxValue;
    DXVA2_Fixed32 DefaultValue;
    DXVA2_Fixed32 StepSize;
} 	DXVA2_ValueRange;

typedef struct DXVA2_ProcAmpValues
{
    DXVA2_Fixed32 Brightness;
    DXVA2_Fixed32 Contrast;
    DXVA2_Fixed32 Hue;
    DXVA2_Fixed32 Saturation;
} 	DXVA2_ProcAmpValues;

typedef struct DXVA2_FilterValues
{
    DXVA2_Fixed32 Level;
    DXVA2_Fixed32 Threshold;
    DXVA2_Fixed32 Radius;
} 	DXVA2_FilterValues;

typedef struct DXVA2_VideoProcessBltParams
{
    REFERENCE_TIME TargetFrame;
    RECT TargetRect;
    SIZE ConstrictionSize;
    UINT StreamingFlags;
    DXVA2_AYUVSample16 BackgroundColor;
    DXVA2_ExtendedFormat DestFormat;
    DXVA2_ProcAmpValues ProcAmpValues;
    DXVA2_Fixed32 Alpha;
    DXVA2_FilterValues NoiseFilterLuma;
    DXVA2_FilterValues NoiseFilterChroma;
    DXVA2_FilterValues DetailFilterLuma;
    DXVA2_FilterValues DetailFilterChroma;
    DWORD DestData;
} 	DXVA2_VideoProcessBltParams;


typedef enum DXVA2BufferTypes
{
    DXVA2_PictureParametersBufferType = 0,
    DXVA2_MacroBlockControlBufferType = 1,
    DXVA2_ResidualDifferenceBufferType = 2,
    DXVA2_DeblockingControlBufferType = 3,
    DXVA2_InverseQuantizationMatrixBufferType = 4,
    DXVA2_SliceControlBufferType = 5,
    DXVA2_BitStreamDateBufferType = 6,
    DXVA2_MotionVectorBuffer = 7,
    DXVA2_FilmGrainBuffer = 8
} DXVA2BufferTypes;

typedef enum DXVA2RenderTargets
{
    DXVA2_VideoDecoderRenderTarget = 0,
    DXVA2_VideoProcessorRenderTarget = 1,
    DXVA2_VideoSoftwareRenderTarget = 2
} DXVA2RenderTargets;
typedef struct DXVA2_ConfigPictureDecode
{
    UUID guidConfigBitstreamEncryption;
    UUID guidConfigMBcontrolEncryption;
    UUID guidConfigResidDiffEncryption;
    UINT ConfigBitstreamRaw;
    UINT ConfigMBcontrolRasterOrder;
    UINT ConfigResidDiffHost;
    UINT ConfigSpatialResid8;
    UINT ConfigResid8Subtraction;
    UINT ConfigSpatialHost8or9Clipping;
    UINT ConfigSpatialResidInterleaved;
    UINT ConfigIntraResidUnsigned;
    UINT ConfigResidDiffAccelerator;
    UINT ConfigHostInverseScan;
    UINT ConfigSpecificIDCT;
    UINT Config4GroupedCoefs;
    USHORT ConfigMinRenderTargetBuffCount;
    USHORT ConfigDecoderSpecific;
} 	DXVA2_ConfigPictureDecode;

typedef struct DXVA2_DecodeBufferDesc
{
    DWORD CompressedBufferType;
    UINT BufferIndex;
    UINT DataOffset;
    UINT DataSize;
    UINT FirstMBaddress;
    UINT NumMBsInBuffer;
    UINT Width;
    UINT Height;
    UINT Stride;
    UINT ReservedBits;
    LongPtr pvPVPState;
} 	DXVA2_DecodeBufferDesc;

// The value in pvPVPState depends on the type of crypo used.  For 
// D3DCRYPTOTYPE_AES128_CTR, pvPState points to the following structure:

typedef struct DXVA2_AES_CTR_IV
{
    UINT64 IV;
    UINT64 Count;
} 	DXVA2_AES_CTR_IV;

typedef struct DXVA2_DecodeExtensionData
{
    UINT Function;
    LongPtr pPrivateInputData;
    UINT PrivateInputDataSize;
    LongPtr pPrivateOutputData;
    UINT PrivateOutputDataSize;
} 	DXVA2_DecodeExtensionData;

// DXVA2_DECODE_GET_DRIVER_HANDLE is an extension function that allows the 
// driver to return a handle for the DXVA2 decode device that can be used to
// associate it with a IDirect3DCryptoSession9 interface.  When this function
// is used:
//     pPrivateInputData = NULL
//     pPrivateInputDataSize = 0
//     pPrivateOutputData = HANDLE*
//     pPrivateOutputDataSize = sizeof(HANDLE)
typedef enum DXVA2DecodeFlags
{
     DXVA2_DECODE_GET_DRIVER_HANDLE = 0x725,

// DXVA2_DECODE_SPECIFY_ENCRYPTED_BLOCKS is an extension function that that allows 
// the decoder to specify which portions of the compressed buffers are encrypted. 
// If this fucntion is not used to specify this information, it is assumed that 
// the entire buffer is encrypted. 
//     pPrivateInputData = D3DENCRYPTED_BLOCK_INFO*; 
//     PrivateInputDataSize = sizeof(D3DENCRYPTED_BLOCK_INFO); 
//     pPrivateOutputData = NULL; 
//     PrivateOutputDataSize = 0; 
     DXVA2_DECODE_SPECIFY_ENCRYPTED_BLOCKS =	0x724 
} DXVA2DecodeFlags;
typedef struct DXVA2_DecodeExecuteParams
{
    UINT NumCompBuffers;
    LongPtr pCompressedBuffers;
    LongPtr pExtensionData;
} 	DXVA2_DecodeExecuteParams;


[
    odl,
    uuid(a0cade0f-06d5-4cf4-a1c7-f3cdd725aa75)
]
interface IDirect3DDeviceManager9 : stdole.IUnknown
{
//public:
    HRESULT ResetDevice(
        /* [annotation][in] */
        [in]  IDirect3DDevice9 * pDevice,
        /* [annotation][in] */
        [in]  UINT resetToken);

    HRESULT OpenDeviceHandle(
        /* [annotation][out] */
        [out] LongPtr* phDevice);

    HRESULT CloseDeviceHandle(
        /* [annotation][in] */
        [in]  LongPtr hDevice);

    HRESULT TestDevice(
        /* [annotation][in] */
        [in]  LongPtr hDevice);

    HRESULT LockDevice(
        /* [annotation][in] */
        [in]  LongPtr hDevice,
        /* [annotation][out] */
        [out]  IDirect3DDevice9** ppDevice,
        /* [annotation][in] */
        [in]  BOOL fBlock);

    HRESULT UnlockDevice(
        /* [annotation][in] */
        [in]  LongPtr hDevice,
        /* [annotation][in] */
        [in]  BOOL fSaveState);

    HRESULT GetVideoService(
        /* [annotation][in] */
        [in]  LongPtr hDevice,
        /* [annotation][in] */
        [in]  REFIID riid,
        /* [annotation][out] */
        [out]  LPVOID ppService);

};

[
    odl,
    uuid(fc51a550-d5e7-11d9-af55-00054e43ff02)
]
interface IDirectXVideoAccelerationService : stdole.IUnknown
{
//public:
    HRESULT CreateSurface(
        /* [annotation][in] */
        [in]  UINT Width,
        /* [annotation][in] */
        [in]  UINT Height,
        /* [annotation][in] */
        [in]  UINT BackBuffers,
        /* [annotation][in] */
        [in]  D3DFORMAT Format,
        /* [annotation][in] */
        [in]  D3DPOOL Pool,
        /* [annotation][in] */
        [in]  DWORD Usage,
        /* [annotation][in] */
        [in]  DWORD DxvaType,
        /* [annotation][size_is][out] */
        [out]  IDirect3DSurface9** ppSurface,
        /* [annotation][out][in] */
        [in] LongPtr pSharedHandle);

};

interface IDirectXVideoDecoder;
interface IDirectXVideoProcessor;

[
    odl,
    uuid(fc51a551-d5e7-11d9-af55-00054e43ff02)
]
interface IDirectXVideoDecoderService : IDirectXVideoAccelerationService
{
//public:
    HRESULT GetDecoderDeviceGuids(
        /* [annotation][out] */
        [out] UINT * pCount,
        /* [annotation][size_is][unique][out] */
        [out] LongPtr *pGuids);

    HRESULT GetDecoderRenderTargets(
        /* [annotation][in] */
        [in]  REFGUID Guid,
        /* [annotation][out] */
        [out] UINT* pCount,
        /* [annotation][size_is][unique][out] */
        [out] LongPtr* pFormats);

    HRESULT GetDecoderConfigurations(
        /* [annotation][in] */
        [in]  REFGUID Guid,
        /* [annotation][in] */
        [in]    DXVA2_VideoDesc* pVideoDesc,
        /* [annotation][in] */
        [in] LongPtr pReserved,
        /* [annotation][out] */
        [out] UINT* pCount,
        /* [annotation][size_is][unique][out] */
        [out] LongPtr* ppConfigs);

    HRESULT CreateVideoDecoder(
        /* [annotation][in] */
        [in]  REFGUID Guid,
        /* [annotation][in] */
        [in] DXVA2_VideoDesc* pVideoDesc,
        /* [annotation][in] */
        [in] DXVA2_ConfigPictureDecode* pConfig,
        /* [annotation][size_is][in] */
        [in]  IDirect3DSurface9** ppDecoderRenderTargets,
        /* [annotation][in] */
        [in]  UINT NumRenderTargets,
        /* [annotation][out] */
        [out]  IDirectXVideoDecoder** ppDecode);

};


[
    odl,
    uuid(fc51a552-d5e7-11d9-af55-00054e43ff02)
]
interface IDirectXVideoProcessorService : IDirectXVideoAccelerationService
{
    HRESULT RegisterVideoProcessorSoftwareDevice(
        /* [annotation][in] */
        [in]  LongPtr pCallbacks);

    HRESULT GetVideoProcessorDeviceGuids(
        /* [annotation][in] */
        [in] DXVA2_VideoDesc* pVideoDesc,
        /* [annotation][out] */
        [out] UINT* pCount,
        /* [annotation][size_is][unique][out] */
        [out] LongPtr* pGuids);

    HRESULT GetVideoProcessorRenderTargets(
        /* [annotation][in] */
        [in]  REFGUID VideoProcDeviceGuid,
        /* [annotation][in] */
        [in] DXVA2_VideoDesc* pVideoDesc,
        /* [annotation][out] */
        [out] UINT* pCount,
        /* [annotation][size_is][unique][out] */
        [out] LongPtr* pFormats);

    HRESULT GetVideoProcessorSubStreamFormats(
        /* [annotation][in] */
        [in]  REFGUID VideoProcDeviceGuid,
        /* [annotation][in] */
        [in] DXVA2_VideoDesc* pVideoDesc,
        /* [annotation][in] */
        [in]  D3DFORMAT RenderTargetFormat,
        /* [annotation][out] */
        [out] UINT* pCount,
        /* [annotation][size_is][unique][out] */
        [out] LongPtr* pFormats);

    HRESULT GetVideoProcessorCaps(
        /* [annotation][in] */
        [in]  REFGUID VideoProcDeviceGuid,
        /* [annotation][in] */
        [in] DXVA2_VideoDesc* pVideoDesc,
        /* [annotation][in] */
        [in]  D3DFORMAT RenderTargetFormat,
        /* [annotation][out] */
        [out] DXVA2_VideoProcessorCaps* pCaps);

    HRESULT GetProcAmpRange(
        /* [annotation][in] */
        [in]  REFGUID VideoProcDeviceGuid,
        /* [annotation][in] */
        [in] DXVA2_VideoDesc* pVideoDesc,
        /* [annotation][in] */
        [in]  D3DFORMAT RenderTargetFormat,
        /* [annotation][in] */
        [in]  UINT ProcAmpCap,
        /* [annotation][out] */
        [out] DXVA2_ValueRange* pRange);

    HRESULT GetFilterPropertyRange(
        /* [annotation][in] */
        [in]  REFGUID VideoProcDeviceGuid,
        /* [annotation][in] */
        [in] DXVA2_VideoDesc* pVideoDesc,
        /* [annotation][in] */
        [in]  D3DFORMAT RenderTargetFormat,
        /* [annotation][in] */
        [in]  UINT FilterSetting,
        /* [annotation][out] */
        [out] DXVA2_ValueRange* pRange);

    HRESULT CreateVideoProcessor(
        /* [annotation][in] */
        [in]  REFGUID VideoProcDeviceGuid,
        /* [annotation][in] */
        [in] DXVA2_VideoDesc* pVideoDesc,
        /* [annotation][in] */
        [in]  D3DFORMAT RenderTargetFormat,
        /* [annotation][in] */
        [in]  UINT MaxNumSubStreams,
        /* [annotation][out] */
        [out]  IDirectXVideoProcessor** ppVidProcess);

};

[
    odl,
    uuid(f2b0810a-fd00-43c9-918c-df94e2d8ef7d)
]
interface IDirectXVideoDecoder : stdole.IUnknown
{
    HRESULT GetVideoDecoderService(
        /* [annotation][out] */
        [out]  IDirectXVideoDecoderService * *ppService);

    HRESULT GetCreationParameters(
        /* [annotation][out] */
        [in, out] void* pDeviceGuid,
        /* [annotation][out] */
        [in, out] void* pVideoDesc,
        /* [annotation][out] */
        [in, out] void* pConfig,
        /* [annotation][size_is][unique][out] */
        [in, out] LongPtr* pDecoderRenderTargets,
        /* [annotation][out] */
        [in, out] UINT* pNumSurfaces);

    HRESULT GetBuffer(
        /* [annotation][in] */
        [in]  UINT BufferType,
        /* [annotation][out] */
        [out] LongPtr* ppBuffer,
        /* [annotation][out] */
        [out] UINT* pBufferSize);

    HRESULT ReleaseBuffer(
        /* [annotation][in] */
        [in]  UINT BufferType);

    HRESULT BeginFrame(
        /* [annotation][in] */
        [in]  IDirect3DSurface9* pRenderTarget,
        /* [annotation][in] */
        [in]  void* pvPVPData);

    HRESULT EndFrame(
        /* [annotation][out] */
        [in, out] LongPtr* pHandleComplete);

    HRESULT Execute(
        /* [annotation][in] */
        [in] DXVA2_DecodeExecuteParams* pExecuteParams);

};

[
    odl,
    uuid(8c3a39f0-916e-4690-804f-4c8001355d25)
]
interface IDirectXVideoProcessor : stdole.IUnknown
{
    HRESULT GetVideoProcessorService(
        /* [annotation][out] */
        [out]  IDirectXVideoProcessorService * *ppService);

    HRESULT GetCreationParameters(
        /* [annotation][out] */
        [in, out] void* pDeviceGuid,
        /* [annotation][out] */
        [in, out] void* pVideoDesc,
        /* [annotation][out] */
        [in, out]  D3DFORMAT* pRenderTargetFormat,
        /* [annotation][out] */
        [in, out]  UINT* pMaxNumSubStreams);

    HRESULT GetVideoProcessorCaps(
        /* [annotation][out] */
        [out] DXVA2_VideoProcessorCaps* pCaps);

    HRESULT GetProcAmpRange(
        /* [annotation][in] */
        [in]  UINT ProcAmpCap,
        /* [annotation][out] */
        [out] DXVA2_ValueRange* pRange);

    HRESULT GetFilterPropertyRange(
        /* [annotation][in] */
        [in]  UINT FilterSetting,
        /* [annotation][out] */
        [out] DXVA2_ValueRange* pRange);

    HRESULT VideoProcessBlt(
        /* [annotation][in] */
        [in]  IDirect3DSurface9* pRenderTarget,
        /* [annotation][in] */
        [in] DXVA2_VideoProcessBltParams* pBltParams,
        /* [annotation][size_is][in] */
        [in] DXVA2_VideoSample* pSamples,
        /* [annotation][in] */
        [in]  UINT NumSamples,
        /* [annotation][out] */
        [in, out]  LongPtr* pHandleComplete);

};


typedef /* [public][public][public] */
enum DXVA2_SurfaceType
{
    DXVA2_SurfaceType_DecoderRenderTarget = 0,
    DXVA2_SurfaceType_ProcessorRenderTarget = 1,
    DXVA2_SurfaceType_D3DRenderTargetTexture = 2
} 	DXVA2_SurfaceType;



//extern RPC_IF_HANDLE __MIDL_itf_dxva2api_0000_0006_v0_0_c_ifspec;
//extern RPC_IF_HANDLE __MIDL_itf_dxva2api_0000_0006_v0_0_s_ifspec;
//
//#ifndef __IDirectXVideoMemoryConfiguration_INTERFACE_DEFINED__
//#define __IDirectXVideoMemoryConfiguration_INTERFACE_DEFINED__
//
///* interface IDirectXVideoMemoryConfiguration */
///* [local][helpstring][uuid][object] */
//
//
//EXTERN_C const IID IID_IDirectXVideoMemoryConfiguration;
//
//#if defined(__cplusplus) && !defined(CINTERFACE)

[
    odl,
    uuid(b7f916dd-db3b-49c1-84d7-e45ef99ec726)
]
interface IDirectXVideoMemoryConfiguration : stdole.IUnknown
{
 
    HRESULT GetAvailableSurfaceTypeByIndex(
        /* [annotation][in] */
        [in]  DWORD dwTypeIndex,
        /* [annotation][out] */
        [out] DXVA2_SurfaceType * pdwType);

    HRESULT SetSurfaceType(
        /* [annotation][in] */
        [in]  DXVA2_SurfaceType dwType);

};















///////////////////////////////////////////////////////////////////////////////
//
// DXVA-HD IDL
//
// Contains interface definitions for DirectX Video Acceleration for HD API.
//
// Copyright (C) Microsoft Corporation
//
///////////////////////////////////////////////////////////////////////////////

//cpp_quote("#include <winapifamily.h>")
//
//#pragma region Desktop Family
//cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
//
//import "unknwn.idl";
//
//
////
//// TEMPORARY DECLARATIONS FOR MIDL COMPILER
////
//
//cpp_quote("#if 0")
//
//typedef DWORD IDirect3DDevice9Ex;
//typedef DWORD IDirect3DSurface9;
//typedef DWORD D3DCOLOR;
//typedef DWORD D3DFORMAT;
//typedef DWORD D3DPOOL;
//
//cpp_quote("#endif // 0")


//
// DXVA-HD COM INTERFACE ID
//

//cpp_quote("#if defined(_WIN32) && !defined(_NO_COM)")
//
//cpp_quote("")
//cpp_quote("")
//cpp_quote("DEFINE_GUID(IID_IDXVAHD_Device,         0x95f12dfd,0xd77e,0x49be,0x81,0x5f,0x57,0xd5,0x79,0x63,0x4d,0x6d);")
//cpp_quote("DEFINE_GUID(IID_IDXVAHD_VideoProcessor, 0x95f4edf4,0x6e03,0x4cd7,0xbe,0x1b,0x30,0x75,0xd6,0x65,0xaa,0x52);")
//cpp_quote("")
//cpp_quote("")
//
//cpp_quote("#endif")


//
// FORWARD DECLARATIONS
//

interface IDXVAHD_Device;
interface IDXVAHD_VideoProcessor;


//
// DXVA-HD API ENUMERATIONS
//

typedef enum DXVAHD_FRAME_FORMAT
{
    DXVAHD_FRAME_FORMAT_PROGRESSIVE = 0,
    DXVAHD_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST = 1,
    DXVAHD_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST = 2
} DXVAHD_FRAME_FORMAT;

typedef enum DXVAHD_DEVICE_USAGE
{
    DXVAHD_DEVICE_USAGE_PLAYBACK_NORMAL = 0,
    DXVAHD_DEVICE_USAGE_OPTIMAL_SPEED = 1,
    DXVAHD_DEVICE_USAGE_OPTIMAL_QUALITY = 2
} DXVAHD_DEVICE_USAGE;

typedef enum DXVAHD_SURFACE_TYPE
{
    DXVAHD_SURFACE_TYPE_VIDEO_INPUT = 0,
    DXVAHD_SURFACE_TYPE_VIDEO_INPUT_PRIVATE = 1,
    DXVAHD_SURFACE_TYPE_VIDEO_OUTPUT = 2
} DXVAHD_SURFACE_TYPE;

typedef enum DXVAHD_DEVICE_TYPE
{
    DXVAHD_DEVICE_TYPE_HARDWARE = 0,
    DXVAHD_DEVICE_TYPE_SOFTWARE = 1,
    DXVAHD_DEVICE_TYPE_REFERENCE = 2,
    DXVAHD_DEVICE_TYPE_OTHER = 3
} DXVAHD_DEVICE_TYPE;

typedef enum DXVAHD_DEVICE_CAPS
{
    DXVAHD_DEVICE_CAPS_LINEAR_SPACE = 0x1,
    DXVAHD_DEVICE_CAPS_xvYCC = 0x2,
    DXVAHD_DEVICE_CAPS_RGB_RANGE_CONVERSION = 0x4,
    DXVAHD_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION = 0x8
} DXVAHD_DEVICE_CAPS;

typedef enum DXVAHD_FEATURE_CAPS
{
    DXVAHD_FEATURE_CAPS_ALPHA_FILL = 0x1,
    DXVAHD_FEATURE_CAPS_CONSTRICTION = 0x2,
    DXVAHD_FEATURE_CAPS_LUMA_KEY = 0x4,
    DXVAHD_FEATURE_CAPS_ALPHA_PALETTE = 0x8
} DXVAHD_FEATURE_CAPS;

typedef enum DXVAHD_FILTER_CAPS
{
    DXVAHD_FILTER_CAPS_BRIGHTNESS = 0x1,
    DXVAHD_FILTER_CAPS_CONTRAST = 0x2,
    DXVAHD_FILTER_CAPS_HUE = 0x4,
    DXVAHD_FILTER_CAPS_SATURATION = 0x8,
    DXVAHD_FILTER_CAPS_NOISE_REDUCTION = 0x10,
    DXVAHD_FILTER_CAPS_EDGE_ENHANCEMENT = 0x20,
    DXVAHD_FILTER_CAPS_ANAMORPHIC_SCALING = 0x40
} DXVAHD_FILTER_CAPS;

typedef enum DXVAHD_INPUT_FORMAT_CAPS
{
    DXVAHD_INPUT_FORMAT_CAPS_RGB_INTERLACED = 0x1,
    DXVAHD_INPUT_FORMAT_CAPS_RGB_PROCAMP = 0x2,
    DXVAHD_INPUT_FORMAT_CAPS_RGB_LUMA_KEY = 0x4,
    DXVAHD_INPUT_FORMAT_CAPS_PALETTE_INTERLACED = 0x8
} DXVAHD_INPUT_FORMAT_CAPS;

typedef enum DXVAHD_PROCESSOR_CAPS
{
    DXVAHD_PROCESSOR_CAPS_DEINTERLACE_BLEND = 0x1,
    DXVAHD_PROCESSOR_CAPS_DEINTERLACE_BOB = 0x2,
    DXVAHD_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE = 0x4,
    DXVAHD_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION = 0x8,
    DXVAHD_PROCESSOR_CAPS_INVERSE_TELECINE = 0x10,
    DXVAHD_PROCESSOR_CAPS_FRAME_RATE_CONVERSION = 0x20
} DXVAHD_PROCESSOR_CAPS;

typedef enum DXVAHD_ITELECINE_CAPS
{
    DXVAHD_ITELECINE_CAPS_32 = 0x1,
    DXVAHD_ITELECINE_CAPS_22 = 0x2,
    DXVAHD_ITELECINE_CAPS_2224 = 0x4,
    DXVAHD_ITELECINE_CAPS_2332 = 0x8,
    DXVAHD_ITELECINE_CAPS_32322 = 0x10,
    DXVAHD_ITELECINE_CAPS_55 = 0x20,
    DXVAHD_ITELECINE_CAPS_64 = 0x40,
    DXVAHD_ITELECINE_CAPS_87 = 0x80,
    DXVAHD_ITELECINE_CAPS_222222222223 = 0x100,
    DXVAHD_ITELECINE_CAPS_OTHER = 0x80000000
} DXVAHD_ITELECINE_CAPS;

typedef enum DXVAHD_FILTER
{
    DXVAHD_FILTER_BRIGHTNESS = 0,
    DXVAHD_FILTER_CONTRAST = 1,
    DXVAHD_FILTER_HUE = 2,
    DXVAHD_FILTER_SATURATION = 3,
    DXVAHD_FILTER_NOISE_REDUCTION = 4,
    DXVAHD_FILTER_EDGE_ENHANCEMENT = 5,
    DXVAHD_FILTER_ANAMORPHIC_SCALING = 6
} DXVAHD_FILTER;

typedef enum DXVAHD_BLT_STATE
{
    DXVAHD_BLT_STATE_TARGET_RECT = 0,
    DXVAHD_BLT_STATE_BACKGROUND_COLOR = 1,
    DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE = 2,
    DXVAHD_BLT_STATE_ALPHA_FILL = 3,
    DXVAHD_BLT_STATE_CONSTRICTION = 4,
    DXVAHD_BLT_STATE_PRIVATE = 1000
} DXVAHD_BLT_STATE;

typedef enum DXVAHD_ALPHA_FILL_MODE
{
    DXVAHD_ALPHA_FILL_MODE_OPAQUE = 0,
    DXVAHD_ALPHA_FILL_MODE_BACKGROUND = 1,
    DXVAHD_ALPHA_FILL_MODE_DESTINATION = 2,
    DXVAHD_ALPHA_FILL_MODE_SOURCE_STREAM = 3
} DXVAHD_ALPHA_FILL_MODE;

typedef enum DXVAHD_STREAM_STATE
{
    DXVAHD_STREAM_STATE_D3DFORMAT = 0,
    DXVAHD_STREAM_STATE_FRAME_FORMAT = 1,
    DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE = 2,
    DXVAHD_STREAM_STATE_OUTPUT_RATE = 3,
    DXVAHD_STREAM_STATE_SOURCE_RECT = 4,
    DXVAHD_STREAM_STATE_DESTINATION_RECT = 5,
    DXVAHD_STREAM_STATE_ALPHA = 6,
    DXVAHD_STREAM_STATE_PALETTE = 7,
    DXVAHD_STREAM_STATE_LUMA_KEY = 8,
    DXVAHD_STREAM_STATE_ASPECT_RATIO = 9,
    DXVAHD_STREAM_STATE_FILTER_BRIGHTNESS = 100,
    DXVAHD_STREAM_STATE_FILTER_CONTRAST = 101,
    DXVAHD_STREAM_STATE_FILTER_HUE = 102,
    DXVAHD_STREAM_STATE_FILTER_SATURATION = 103,
    DXVAHD_STREAM_STATE_FILTER_NOISE_REDUCTION = 104,
    DXVAHD_STREAM_STATE_FILTER_EDGE_ENHANCEMENT = 105,
    DXVAHD_STREAM_STATE_FILTER_ANAMORPHIC_SCALING = 106,
    DXVAHD_STREAM_STATE_PRIVATE = 1000
} DXVAHD_STREAM_STATE;

typedef enum DXVAHD_OUTPUT_RATE
{
    DXVAHD_OUTPUT_RATE_NORMAL = 0,
    DXVAHD_OUTPUT_RATE_HALF = 1,
    DXVAHD_OUTPUT_RATE_CUSTOM = 2
} DXVAHD_OUTPUT_RATE;


//
// DXVA-HD API STRUCTURES
//

typedef struct DXVAHD_RATIONAL
{
    UINT Numerator;
    UINT Denominator;
} DXVAHD_RATIONAL;

typedef struct DXVAHD_COLOR_RGBA
{
    FLOAT R;
    FLOAT G;
    FLOAT B;
    FLOAT A;
} DXVAHD_COLOR_RGBA;

typedef struct DXVAHD_COLOR_YCbCrA
{
    FLOAT Y;
    FLOAT Cb;
    FLOAT Cr;
    FLOAT A;
} DXVAHD_COLOR_YCbCrA;

typedef struct DXVAHD_COLOR
{
    FLOAT RorY;
    FLOAT GorCb;
    FLOAT BorCr;
    FLOAT A;
} DXVAHD_COLOR;

typedef struct DXVAHD_CONTENT_DESC
{
    DXVAHD_FRAME_FORMAT InputFrameFormat;
    DXVAHD_RATIONAL     InputFrameRate;
    UINT                InputWidth;
    UINT                InputHeight;
    DXVAHD_RATIONAL     OutputFrameRate;
    UINT                OutputWidth;
    UINT                OutputHeight;
} DXVAHD_CONTENT_DESC;

typedef struct DXVAHD_VPDEVCAPS
{
    DXVAHD_DEVICE_TYPE DeviceType;
    UINT               DeviceCaps;          // DXVAHD_DEVICE_CAPS
    UINT               FeatureCaps;         // DXVAHD_FEATURE_CAPS
    UINT               FilterCaps;          // DXVAHD_FILTER_CAPS
    UINT               InputFormatCaps;     // DXVAHD_INPUT_FORMAT_CAPS
    D3DPOOL            InputPool;
    UINT               OutputFormatCount;
    UINT               InputFormatCount;
    UINT               VideoProcessorCount;
    UINT               MaxInputStreams;
    UINT               MaxStreamStates;
} DXVAHD_VPDEVCAPS;

typedef struct DXVAHD_VPCAPS
{
    UUID VPGuid;
    UINT PastFrames;
    UINT FutureFrames;
    UINT ProcessorCaps;   // DXVAHD_PROCESSOR_CAPS
    UINT ITelecineCaps;   // DXVAHD_ITELECINE_CAPS
    UINT CustomRateCount;
} DXVAHD_VPCAPS;

typedef struct DXVAHD_CUSTOM_RATE_DATA
{
    DXVAHD_RATIONAL CustomRate;
    UINT            OutputFrames;
    BOOL            InputInterlaced;
    UINT            InputFramesOrFields;
} DXVAHD_CUSTOM_RATE_DATA;

typedef struct DXVAHD_FILTER_RANGE_DATA
{
    INT   Minimum;
    INT   Maximum;
    INT   Default;
    FLOAT Multiplier;
} DXVAHD_FILTER_RANGE_DATA;

typedef struct DXVAHD_BLT_STATE_TARGET_RECT_DATA
{
    BOOL Enable;
    RECT TargetRect;
} DXVAHD_BLT_STATE_TARGET_RECT_DATA;

typedef struct DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA
{
    BOOL         YCbCr;
    DXVAHD_COLOR BackgroundColor;
} DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA;

typedef struct DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA
{
    //union
    //{
    //    struct
    //    {
    //        UINT Usage : 1; // 0:Playback,     1:Processing
    //        UINT RGB_Range : 1; // 0:Full(0-255),  1:Limited(16-235)
    //        UINT YCbCr_Matrix : 1; // 0:BT.601(SDTV), 1:BT.709(HDTV)
    //        UINT YCbCr_xvYCC : 1; // 0:Conventional, 1:Extended(xvYCC)
    //        UINT Reserved : 28;
    //    };

        UINT Value;
   // };
} DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA;

typedef struct DXVAHD_BLT_STATE_ALPHA_FILL_DATA
{
    DXVAHD_ALPHA_FILL_MODE Mode;
    UINT                   StreamNumber;
} DXVAHD_BLT_STATE_ALPHA_FILL_DATA;

typedef struct DXVAHD_BLT_STATE_CONSTRICTION_DATA
{
    BOOL Enable;
    SIZE Size;
} DXVAHD_BLT_STATE_CONSTRICTION_DATA;

typedef struct DXVAHD_BLT_STATE_PRIVATE_DATA
{
    UUID  Guid;
    UINT  DataSize;
    LongPtr pData;
} DXVAHD_BLT_STATE_PRIVATE_DATA;

typedef struct DXVAHD_STREAM_STATE_D3DFORMAT_DATA
{
    D3DFORMAT Format;
} DXVAHD_STREAM_STATE_D3DFORMAT_DATA;

typedef struct DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA
{
    DXVAHD_FRAME_FORMAT FrameFormat;
} DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA;

typedef struct DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA
{
    //union
    //{
    //    struct
    //    {
    //        UINT Type : 1; // 0:Video,        1:Graphics
    //        UINT RGB_Range : 1; // 0:Full(0-255),  1:Limited(16-235)
    //        UINT YCbCr_Matrix : 1; // 0:BT.601(SDTV), 1:BT.709(HDTV)
    //        UINT YCbCr_xvYCC : 1; // 0:Conventional, 1:Extended(xvYCC)
    //        UINT Reserved : 28;
    //    };

        UINT Value;
    //};
} DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA;

typedef struct DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA
{
    BOOL               RepeatFrame;
    DXVAHD_OUTPUT_RATE OutputRate;
    DXVAHD_RATIONAL    CustomRate;
} DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA;

typedef struct DXVAHD_STREAM_STATE_SOURCE_RECT_DATA
{
    BOOL Enable;
    RECT SourceRect;
} DXVAHD_STREAM_STATE_SOURCE_RECT_DATA;

typedef struct DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA
{
    BOOL Enable;
    RECT DestinationRect;
} DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA;

typedef struct DXVAHD_STREAM_STATE_ALPHA_DATA
{
    BOOL  Enable;
    FLOAT Alpha;
} DXVAHD_STREAM_STATE_ALPHA_DATA;

typedef struct DXVAHD_STREAM_STATE_PALETTE_DATA
{
    UINT      Count;
    LongPtr pEntries; //D3DCOLOR*
} DXVAHD_STREAM_STATE_PALETTE_DATA;

typedef struct DXVAHD_STREAM_STATE_LUMA_KEY_DATA
{
    BOOL  Enable;
    FLOAT Lower;
    FLOAT Upper;
} DXVAHD_STREAM_STATE_LUMA_KEY_DATA;

typedef struct DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA
{
    BOOL            Enable;
    DXVAHD_RATIONAL SourceAspectRatio;
    DXVAHD_RATIONAL DestinationAspectRatio;
} DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA;

typedef struct DXVAHD_STREAM_STATE_FILTER_DATA
{
    BOOL Enable;
    INT  Level;
} DXVAHD_STREAM_STATE_FILTER_DATA;

typedef struct DXVAHD_STREAM_STATE_PRIVATE_DATA
{
    UUID  Guid;
    UINT  DataSize;
    LongPtr pData;
} DXVAHD_STREAM_STATE_PRIVATE_DATA;

typedef struct DXVAHD_STREAM_DATA
{
    BOOL                Enable;
    UINT                OutputIndex;
    UINT                InputFrameOrField;
    UINT                PastFrames;
    UINT                FutureFrames;
    LongPtr ppPastSurfaces; //IDirect3DSurface9**
    IDirect3DSurface9* pInputSurface;
    LongPtr ppFutureSurfaces; //IDirect3DSurface9**
} DXVAHD_STREAM_DATA;


//
// PRIVATE STATES
//

//cpp_quote("")
//cpp_quote("")
//cpp_quote("DEFINE_GUID(DXVAHD_STREAM_STATE_PRIVATE_IVTC, 0x9c601e3c,0x0f33,0x414c,0xa7,0x39,0x99,0x54,0x0e,0xe4,0x2d,0xa5);")
//cpp_quote("")
//cpp_quote("")

typedef struct DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA
{
    BOOL Enable;
    UINT ITelecineFlags; // DXVAHD_ITELECINE_CAPS
    UINT Frames;
    UINT InputField;
} DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA;


//
// IDXVAHD_Device INTERFACE
//

[
    odl,
        uuid(95f12dfd-d77e-49be-815f-57d579634d6d),
        helpstring("DXVA-HD Device Interface")
]
interface IDXVAHD_Device : stdole.IUnknown
{
    HRESULT
        CreateVideoSurface(
            [in] UINT Width,
            [in] UINT Height,
            [in] D3DFORMAT Format,
            [in] D3DPOOL Pool,
            [in] DWORD Usage,
            [in] DXVAHD_SURFACE_TYPE Type,
            [in] UINT NumSurfaces,
            [out] IDirect3DSurface9** ppSurfaces,
            [in, out] LongPtr* pSharedHandle
        );

    HRESULT
        GetVideoProcessorDeviceCaps(
            [out] DXVAHD_VPDEVCAPS* pCaps
        );

    HRESULT
        GetVideoProcessorOutputFormats(
            [in] UINT Count,
            [out] D3DFORMAT* pFormats
        );

    HRESULT
        GetVideoProcessorInputFormats(
            [in] UINT Count,
            [out] D3DFORMAT* pFormats
        );

    HRESULT
        GetVideoProcessorCaps(
            [in] UINT Count,
            [out] DXVAHD_VPCAPS* pCaps
        );

    HRESULT
        GetVideoProcessorCustomRates(
            [in] UUID* pVPGuid,
            [in] UINT Count,
            [out] DXVAHD_CUSTOM_RATE_DATA* pRates
        );

    HRESULT
        GetVideoProcessorFilterRange(
            [in] DXVAHD_FILTER Filter,
            [out] DXVAHD_FILTER_RANGE_DATA* pRange
        );

    HRESULT
        CreateVideoProcessor(
            [in] UUID* pVPGuid,
            [out] IDXVAHD_VideoProcessor** ppVideoProcessor
        );
};


//
// IDXVAHD_VideoProcessor INTERFACE
//

[
    odl,
        uuid(95f4edf4-6e03-4cd7-be1b-3075d665aa52),
        helpstring("DXVA-HD Video Processor Interface")
]
interface IDXVAHD_VideoProcessor : stdole.IUnknown
{
    HRESULT
        SetVideoProcessBltState(
            [in] DXVAHD_BLT_STATE State,
            [in] UINT DataSize,
            [in]   void* pData
        );

    HRESULT
        GetVideoProcessBltState(
            [in] DXVAHD_BLT_STATE State,
            [in] UINT DataSize,
            [out] void* pData
        );

    HRESULT
        SetVideoProcessStreamState(
            [in] UINT StreamNumber,
            [in] DXVAHD_STREAM_STATE State,
            [in] UINT DataSize,
            [in] void* pData
        );

    HRESULT
        GetVideoProcessStreamState(
            [in] UINT StreamNumber,
            [in] DXVAHD_STREAM_STATE State,
            [in] UINT DataSize,
            [out] void* pData
        );

    HRESULT
        VideoProcessBltHD(
            [in] IDirect3DSurface9* pOutputSurface,
            [in] UINT OutputFrame,
            [in] UINT StreamCount,
            [in] DXVAHD_STREAM_DATA* pStreams
        );
};


//
// DXVA-HD SOFTWARE PLUGIN
//

//cpp_quote("")
//cpp_quote("")
//cpp_quote("typedef HRESULT (CALLBACK* PDXVAHDSW_CreateDevice)(")
//cpp_quote("    [in] IDirect3DDevice9Ex* pD3DDevice,")
//cpp_quote("    [out]HANDLE* phDevice")
//cpp_quote("    );")
//cpp_quote("")
//cpp_quote("typedef HRESULT (CALLBACK* PDXVAHDSW_ProposeVideoPrivateFormat)(")
//cpp_quote("    [in] HANDLE hDevice,")
//cpp_quote("    _Inout_ D3DFORMAT* pFormat")
//cpp_quote("    );")
//cpp_quote("")
//cpp_quote("typedef HRESULT (CALLBACK* PDXVAHDSW_GetVideoProcessorDeviceCaps)(")
//cpp_quote("    [in] HANDLE hDevice,")
//cpp_quote("    [in] const DXVAHD_CONTENT_DESC* pContentDesc,")
//cpp_quote("    [in] DXVAHD_DEVICE_USAGE Usage,")
//cpp_quote("    [out]DXVAHD_VPDEVCAPS* pCaps")
//cpp_quote("    );")
//cpp_quote("")
//cpp_quote("typedef HRESULT (CALLBACK* PDXVAHDSW_GetVideoProcessorOutputFormats)(")
//cpp_quote("    [in] HANDLE hDevice,")
//cpp_quote("    [in] const DXVAHD_CONTENT_DESC* pContentDesc,")
//cpp_quote("    [in] DXVAHD_DEVICE_USAGE Usage,")
//cpp_quote("    [in] UINT Count,")
//cpp_quote("    _Out_writes_(Count) D3DFORMAT* pFormats")
//cpp_quote("    );")
//cpp_quote("")
//cpp_quote("typedef HRESULT (CALLBACK* PDXVAHDSW_GetVideoProcessorInputFormats)(")
//cpp_quote("    [in] HANDLE hDevice,")
//cpp_quote("    [in] const DXVAHD_CONTENT_DESC* pContentDesc,")
//cpp_quote("    [in] DXVAHD_DEVICE_USAGE Usage,")
//cpp_quote("    [in] UINT Count,")
//cpp_quote("    _Out_writes_(Count) D3DFORMAT* pFormats")
//cpp_quote("    );")
//cpp_quote("")
//cpp_quote("typedef HRESULT (CALLBACK* PDXVAHDSW_GetVideoProcessorCaps)(")
//cpp_quote("    [in] HANDLE hDevice,")
//cpp_quote("    [in] const DXVAHD_CONTENT_DESC* pContentDesc,")
//cpp_quote("    [in] DXVAHD_DEVICE_USAGE Usage,")
//cpp_quote("    [in] UINT Count,")
//cpp_quote("    _Out_writes_(Count) DXVAHD_VPCAPS* pCaps")
//cpp_quote("    );")
//cpp_quote("")
//cpp_quote("typedef HRESULT (CALLBACK* PDXVAHDSW_GetVideoProcessorCustomRates)(")
//cpp_quote("    [in] HANDLE hDevice,")
//cpp_quote("    [in] UUID* pVPGuid,")
//cpp_quote("    [in] UINT Count,")
//cpp_quote("    _Out_writes_(Count) DXVAHD_CUSTOM_RATE_DATA* pRates")
//cpp_quote("    );")
//cpp_quote("")
//cpp_quote("typedef HRESULT (CALLBACK* PDXVAHDSW_GetVideoProcessorFilterRange)(")
//cpp_quote("    [in] HANDLE hDevice,")
//cpp_quote("    [in] DXVAHD_FILTER Filter,")
//cpp_quote("    [out]DXVAHD_FILTER_RANGE_DATA* pRange")
//cpp_quote("    );")
//cpp_quote("")
//cpp_quote("typedef HRESULT (CALLBACK* PDXVAHDSW_DestroyDevice)(")
//cpp_quote("    [in] HANDLE hDevice")
//cpp_quote("    );")
//cpp_quote("")
//cpp_quote("typedef HRESULT (CALLBACK* PDXVAHDSW_CreateVideoProcessor)(")
//cpp_quote("    [in] HANDLE hDevice,")
//cpp_quote("    [in] UUID* pVPGuid,")
//cpp_quote("    [out]HANDLE* phVideoProcessor")
//cpp_quote("    );")
//cpp_quote("")
//cpp_quote("typedef HRESULT (CALLBACK* PDXVAHDSW_SetVideoProcessBltState)(")
//cpp_quote("    [in] HANDLE hVideoProcessor,")
//cpp_quote("    [in] DXVAHD_BLT_STATE State,")
//cpp_quote("    [in] UINT DataSize,")
//cpp_quote("    _In_reads_bytes_(DataSize) const void* pData")
//cpp_quote("    );")
//cpp_quote("")
//cpp_quote("typedef HRESULT (CALLBACK* PDXVAHDSW_GetVideoProcessBltStatePrivate)(")
//cpp_quote("    [in] HANDLE hVideoProcessor,")
//cpp_quote("    _Inout_ DXVAHD_BLT_STATE_PRIVATE_DATA* pData")
//cpp_quote("    );")
//cpp_quote("")
//cpp_quote("typedef HRESULT (CALLBACK* PDXVAHDSW_SetVideoProcessStreamState)(")
//cpp_quote("    [in] HANDLE hVideoProcessor,")
//cpp_quote("    [in] UINT StreamNumber,")
//cpp_quote("    [in] DXVAHD_STREAM_STATE State,")
//cpp_quote("    [in] UINT DataSize,")
//cpp_quote("    _In_reads_bytes_(DataSize) const void* pData")
//cpp_quote("    );")
//cpp_quote("")
//cpp_quote("typedef HRESULT (CALLBACK* PDXVAHDSW_GetVideoProcessStreamStatePrivate)(")
//cpp_quote("    [in] HANDLE hVideoProcessor,")
//cpp_quote("    [in] UINT StreamNumber,")
//cpp_quote("    _Inout_ DXVAHD_STREAM_STATE_PRIVATE_DATA* pData")
//cpp_quote("    );")
//cpp_quote("")
//cpp_quote("typedef HRESULT (CALLBACK* PDXVAHDSW_VideoProcessBltHD)(")
//cpp_quote("    [in] HANDLE hVideoProcessor,")
//cpp_quote("    [in] IDirect3DSurface9* pOutputSurface,")
//cpp_quote("    [in] UINT OutputFrame,")
//cpp_quote("    [in] UINT StreamCount,")
//cpp_quote("    _In_reads_(StreamCount) const DXVAHD_STREAM_DATA* pStreams")
//cpp_quote("    );")
//cpp_quote("")
//cpp_quote("typedef HRESULT (CALLBACK* PDXVAHDSW_DestroyVideoProcessor)(")
//cpp_quote("    [in] HANDLE hVideoProcessor")
//cpp_quote("    );")
//cpp_quote("")
//cpp_quote("typedef struct DXVAHDSW_CALLBACKS")
//cpp_quote("{")
//cpp_quote("    PDXVAHDSW_CreateDevice                      CreateDevice;")
//cpp_quote("    PDXVAHDSW_ProposeVideoPrivateFormat         ProposeVideoPrivateFormat;")
//cpp_quote("    PDXVAHDSW_GetVideoProcessorDeviceCaps       GetVideoProcessorDeviceCaps;")
//cpp_quote("    PDXVAHDSW_GetVideoProcessorOutputFormats    GetVideoProcessorOutputFormats;")
//cpp_quote("    PDXVAHDSW_GetVideoProcessorInputFormats     GetVideoProcessorInputFormats;")
//cpp_quote("    PDXVAHDSW_GetVideoProcessorCaps             GetVideoProcessorCaps;")
//cpp_quote("    PDXVAHDSW_GetVideoProcessorCustomRates      GetVideoProcessorCustomRates;")
//cpp_quote("    PDXVAHDSW_GetVideoProcessorFilterRange      GetVideoProcessorFilterRange;")
//cpp_quote("    PDXVAHDSW_DestroyDevice                     DestroyDevice;")
//cpp_quote("    PDXVAHDSW_CreateVideoProcessor              CreateVideoProcessor;")
//cpp_quote("    PDXVAHDSW_SetVideoProcessBltState           SetVideoProcessBltState;")
//cpp_quote("    PDXVAHDSW_GetVideoProcessBltStatePrivate    GetVideoProcessBltStatePrivate;")
//cpp_quote("    PDXVAHDSW_SetVideoProcessStreamState        SetVideoProcessStreamState;")
//cpp_quote("    PDXVAHDSW_GetVideoProcessStreamStatePrivate GetVideoProcessStreamStatePrivate;")
//cpp_quote("    PDXVAHDSW_VideoProcessBltHD                 VideoProcessBltHD;")
//cpp_quote("    PDXVAHDSW_DestroyVideoProcessor             DestroyVideoProcessor;")
//cpp_quote("} DXVAHDSW_CALLBACKS;")
//cpp_quote("")
//cpp_quote("typedef HRESULT (CALLBACK* PDXVAHDSW_Plugin)(")
//cpp_quote("    [in] UINT Size,")
//cpp_quote("    _Out_writes_bytes_(Size) void* pCallbacks")
//cpp_quote("    );")
//cpp_quote("")
//cpp_quote("")


//
// DXVA-HD API ETW
//

//cpp_quote("")
//cpp_quote("")
//cpp_quote("DEFINE_GUID(DXVAHDControlGuid, 0xa0386e75,0xf70c,0x464c,0xa9,0xce,0x33,0xc4,0x4e,0x09,0x16,0x23); // DXVA2Trace_Control")
//cpp_quote("")
//cpp_quote("DEFINE_GUID(DXVAHDETWGUID_CREATEVIDEOPROCESSOR,     0x681e3d1e,0x5674,0x4fb3,0xa5,0x03,0x2f,0x20,0x55,0xe9,0x1f,0x60);")
//cpp_quote("DEFINE_GUID(DXVAHDETWGUID_VIDEOPROCESSBLTSTATE,     0x76c94b5a,0x193f,0x4692,0x94,0x84,0xa4,0xd9,0x99,0xda,0x81,0xa8);")
//cpp_quote("DEFINE_GUID(DXVAHDETWGUID_VIDEOPROCESSSTREAMSTATE,  0x262c0b02,0x209d,0x47ed,0x94,0xd8,0x82,0xae,0x02,0xb8,0x4a,0xa7);")
//cpp_quote("DEFINE_GUID(DXVAHDETWGUID_VIDEOPROCESSBLTHD,        0xbef3d435,0x78c7,0x4de3,0x97,0x07,0xcd,0x1b,0x08,0x3b,0x16,0x0a);")
//cpp_quote("DEFINE_GUID(DXVAHDETWGUID_VIDEOPROCESSBLTHD_STREAM, 0x27ae473e,0xa5fc,0x4be5,0xb4,0xe3,0xf2,0x49,0x94,0xd3,0xc4,0x95);")
//cpp_quote("DEFINE_GUID(DXVAHDETWGUID_DESTROYVIDEOPROCESSOR,    0xf943f0a0,0x3f16,0x43e0,0x80,0x93,0x10,0x5a,0x98,0x6a,0xa5,0xf1);")
//cpp_quote("")
//cpp_quote("")

typedef struct DXVAHDETW_CREATEVIDEOPROCESSOR
{
    ULONGLONG pObject;
    ULONGLONG pD3D9Ex;
    UUID      VPGuid;
} DXVAHDETW_CREATEVIDEOPROCESSOR;

typedef struct DXVAHDETW_VIDEOPROCESSBLTSTATE
{
    ULONGLONG        pObject;
    DXVAHD_BLT_STATE State;
    UINT             DataSize;
    BOOL             SetState;
} DXVAHDETW_VIDEOPROCESSBLTSTATE;

typedef struct DXVAHDETW_VIDEOPROCESSSTREAMSTATE
{
    ULONGLONG           pObject;
    UINT                StreamNumber;
    DXVAHD_STREAM_STATE State;
    UINT                DataSize;
    BOOL                SetState;
} DXVAHDETW_VIDEOPROCESSSTREAMSTATE;

typedef struct DXVAHDETW_VIDEOPROCESSBLTHD
{
    ULONGLONG pObject;
    ULONGLONG pOutputSurface;
    RECT      TargetRect;
    D3DFORMAT OutputFormat;
    UINT      ColorSpace;
    UINT      OutputFrame;
    UINT      StreamCount;
    BOOL      Enter;
} DXVAHDETW_VIDEOPROCESSBLTHD;

typedef struct DXVAHDETW_VIDEOPROCESSBLTHD_STREAM
{
    ULONGLONG           pObject;
    ULONGLONG           pInputSurface;
    RECT                SourceRect;
    RECT                DestinationRect;
    D3DFORMAT           InputFormat;
    DXVAHD_FRAME_FORMAT FrameFormat;
    UINT                ColorSpace;
    UINT                StreamNumber;
    UINT                OutputIndex;
    UINT                InputFrameOrField;
    UINT                PastFrames;
    UINT                FutureFrames;
} DXVAHDETW_VIDEOPROCESSBLTHD_STREAM;

typedef struct DXVAHDETW_DESTROYVIDEOPROCESSOR
{
    ULONGLONG pObject;
} DXVAHDETW_DESTROYVIDEOPROCESSOR;



//
// evr9.h
//
[
    odl,
    uuid(d0cfe38b-93e7-4772-8957-0400c49a4485)
]
interface IEVRVideoStreamControl : stdole.IUnknown
{
 
   HRESULT SetStreamActiveState(
         [in]  BOOL fActive);

   HRESULT GetStreamActiveState(
        /* [annotation][out] */
       [out]  BOOL* lpfActive);

};

[
    odl,
    uuid(6AB0000C-FECE-4d1f-A2AC-A9573530656E)
]
interface IMFVideoProcessor : stdole.IUnknown
{
   HRESULT GetAvailableVideoProcessorModes(
        [in, out] UINT * lpdwNumProcessingModes,
        [in, out] LongPtr *ppVideoProcessingModes);

   HRESULT GetVideoProcessorCaps(
        [in] LPGUID lpVideoProcessorMode,
        [out] DXVA2_VideoProcessorCaps* lpVideoProcessorCaps);

   HRESULT GetVideoProcessorMode(
        [out] LPGUID lpMode);

   HRESULT SetVideoProcessorMode(
        [in] LPGUID lpMode);

   HRESULT GetProcAmpRange(
       [in] DWORD dwProperty,
        [out] DXVA2_ValueRange* pPropRange);

   HRESULT GetProcAmpValues(
       [in] DWORD dwFlags,
        [out] DXVA2_ProcAmpValues* Values);

   HRESULT SetProcAmpValues(
       [in] DWORD dwFlags,
        [in] DXVA2_ProcAmpValues* pValues);

   HRESULT GetFilteringRange(
       [in] DWORD dwProperty,
        [out] DXVA2_ValueRange* pPropRange);

   HRESULT GetFilteringValue(
       [in] DWORD dwProperty,
        [out] DXVA2_Fixed32* pValue);

   HRESULT SetFilteringValue(
       [in] DWORD dwProperty,
        [in] DXVA2_Fixed32* pValue);

   HRESULT GetBackgroundColor(
        [out] COLORREF* lpClrBkg);

   HRESULT SetBackgroundColor(
       [in] COLORREF ClrBkg);

};

typedef struct MFVideoAlphaBitmapParams
{
    DWORD dwFlags;
    COLORREF clrSrcKey;
    RECT rcSrc;
    MFVideoNormalizedRect nrcDest;
    FLOAT fAlpha;
    DWORD dwFilterMode;
} 	MFVideoAlphaBitmapParams;

typedef struct MFVideoAlphaBitmap
{
    BOOL GetBitmapFromDC;
    //union
    //{
    //    HDC hdc;
    //    IDirect3DSurface9* pDDS;
    //} 	bitmap;
    LongPtr bitmap;
    MFVideoAlphaBitmapParams params;
} 	MFVideoAlphaBitmap;

typedef /* [public] */
enum MFVideoAlphaBitmapFlags
{
    MFVideoAlphaBitmap_EntireDDS = 0x1,
    MFVideoAlphaBitmap_SrcColorKey = 0x2,
    MFVideoAlphaBitmap_SrcRect = 0x4,
    MFVideoAlphaBitmap_DestRect = 0x8,
    MFVideoAlphaBitmap_FilterMode = 0x10,
    MFVideoAlphaBitmap_Alpha = 0x20,
    MFVideoAlphaBitmap_BitMask = 0x3f
} 	MFVideoAlphaBitmapFlags;


[
    odl,
    uuid(814C7B20-0FDB-4eec-AF8F-F957C8F69EDC)
]
interface IMFVideoMixerBitmap : stdole.IUnknown
{
   HRESULT SetAlphaBitmap(
       [in] MFVideoAlphaBitmap * pBmpParms);

   HRESULT ClearAlphaBitmap(void);

   HRESULT UpdateAlphaBitmapParameters(
        [in] MFVideoAlphaBitmapParams* pBmpParms);

   HRESULT GetAlphaBitmapParameters(
        /* [annotation][out] */
        [out]  MFVideoAlphaBitmapParams* pBmpParms);

};




//
// DXVA-HD API FUNCTIONS
//

[
    dllname("dxva2.dll")
]
module dxva
{
[entry("DXVAHD_CreateDevice")]
HRESULT DXVAHD_CreateDevice( 
     [in] IDirect3DDevice9Ex* pD3DDevice, 
     [in] DXVAHD_CONTENT_DESC* pContentDesc, 
     [in] DXVAHD_DEVICE_USAGE Usage, 
     [in] void* pPlugin, 
     [out] IDXVAHD_Device** ppDevice 
     ); 
  
// typedef HRESULT (WINAPI* PDXVAHD_CreateDevice)( 
//     [in] IDirect3DDevice9Ex* pD3DDevice, 
//     [in] const DXVAHD_CONTENT_DESC* pContentDesc, 
//     [in] DXVAHD_DEVICE_USAGE Usage, 
//     _In_opt_ PDXVAHDSW_Plugin pPlugin, 
//     [out] IDXVAHD_Device** ppDevice 
//     ); 
//  
//  
//
//
//cpp_quote("#endif /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) */")
//#pragma endregion

}