//tbShellLib - 100% complete

//OLEEXP Windows Imaging Component Interfaces
//Minus a couple callback interfaces,
//I do not believe there is any circumstances where any of these would
//be used with Implements, therefore everything is declared as a function
//in order to get the HRESULT values
/*

wincodec.idl Definitions

*/
/*=========================================================================*\
Interface forward declarations :
\*=========================================================================*/
interface ID2D1Device;
interface ID2D1Image;
typedef enum D2D1_ALPHA_MODE
{

	/// <summary>
	/// Alpha mode should be determined implicitly. Some target surfaces do not supply
	/// or imply this information in which case alpha must be specified.
	/// </summary>
	D2D1_ALPHA_MODE_UNKNOWN = 0,

	/// <summary>
	/// Treat the alpha as premultipled.
	/// </summary>
	D2D1_ALPHA_MODE_PREMULTIPLIED = 1,

	/// <summary>
	/// Opacity is in the 'A' component only.
	/// </summary>
	D2D1_ALPHA_MODE_STRAIGHT = 2,

	/// <summary>
	/// Ignore any alpha channel information.
	/// </summary>
	D2D1_ALPHA_MODE_IGNORE = 3,

	D2D1_ALPHA_MODE_FORCE_DWORD = 0xffffffff

} D2D1_ALPHA_MODE;
typedef enum DXGI_FORMAT {
	DXGI_FORMAT_UNKNOWN,
	DXGI_FORMAT_R32G32B32A32_TYPELESS,
	DXGI_FORMAT_R32G32B32A32_FLOAT,
	DXGI_FORMAT_R32G32B32A32_UINT,
	DXGI_FORMAT_R32G32B32A32_SINT,
	DXGI_FORMAT_R32G32B32_TYPELESS,
	DXGI_FORMAT_R32G32B32_FLOAT,
	DXGI_FORMAT_R32G32B32_UINT,
	DXGI_FORMAT_R32G32B32_SINT,
	DXGI_FORMAT_R16G16B16A16_TYPELESS,
	DXGI_FORMAT_R16G16B16A16_FLOAT,
	DXGI_FORMAT_R16G16B16A16_UNORM,
	DXGI_FORMAT_R16G16B16A16_UINT,
	DXGI_FORMAT_R16G16B16A16_SNORM,
	DXGI_FORMAT_R16G16B16A16_SINT,
	DXGI_FORMAT_R32G32_TYPELESS,
	DXGI_FORMAT_R32G32_FLOAT,
	DXGI_FORMAT_R32G32_UINT,
	DXGI_FORMAT_R32G32_SINT,
	DXGI_FORMAT_R32G8X24_TYPELESS,
	DXGI_FORMAT_D32_FLOAT_S8X24_UINT,
	DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS,
	DXGI_FORMAT_X32_TYPELESS_G8X24_UINT,
	DXGI_FORMAT_R10G10B10A2_TYPELESS,
	DXGI_FORMAT_R10G10B10A2_UNORM,
	DXGI_FORMAT_R10G10B10A2_UINT,
	DXGI_FORMAT_R11G11B10_FLOAT,
	DXGI_FORMAT_R8G8B8A8_TYPELESS,
	DXGI_FORMAT_R8G8B8A8_UNORM,
	DXGI_FORMAT_R8G8B8A8_UNORM_SRGB,
	DXGI_FORMAT_R8G8B8A8_UINT,
	DXGI_FORMAT_R8G8B8A8_SNORM,
	DXGI_FORMAT_R8G8B8A8_SINT,
	DXGI_FORMAT_R16G16_TYPELESS,
	DXGI_FORMAT_R16G16_FLOAT,
	DXGI_FORMAT_R16G16_UNORM,
	DXGI_FORMAT_R16G16_UINT,
	DXGI_FORMAT_R16G16_SNORM,
	DXGI_FORMAT_R16G16_SINT,
	DXGI_FORMAT_R32_TYPELESS,
	DXGI_FORMAT_D32_FLOAT,
	DXGI_FORMAT_R32_FLOAT,
	DXGI_FORMAT_R32_UINT,
	DXGI_FORMAT_R32_SINT,
	DXGI_FORMAT_R24G8_TYPELESS,
	DXGI_FORMAT_D24_UNORM_S8_UINT,
	DXGI_FORMAT_R24_UNORM_X8_TYPELESS,
	DXGI_FORMAT_X24_TYPELESS_G8_UINT,
	DXGI_FORMAT_R8G8_TYPELESS,
	DXGI_FORMAT_R8G8_UNORM,
	DXGI_FORMAT_R8G8_UINT,
	DXGI_FORMAT_R8G8_SNORM,
	DXGI_FORMAT_R8G8_SINT,
	DXGI_FORMAT_R16_TYPELESS,
	DXGI_FORMAT_R16_FLOAT,
	DXGI_FORMAT_D16_UNORM,
	DXGI_FORMAT_R16_UNORM,
	DXGI_FORMAT_R16_UINT,
	DXGI_FORMAT_R16_SNORM,
	DXGI_FORMAT_R16_SINT,
	DXGI_FORMAT_R8_TYPELESS,
	DXGI_FORMAT_R8_UNORM,
	DXGI_FORMAT_R8_UINT,
	DXGI_FORMAT_R8_SNORM,
	DXGI_FORMAT_R8_SINT,
	DXGI_FORMAT_A8_UNORM,
	DXGI_FORMAT_R1_UNORM,
	DXGI_FORMAT_R9G9B9E5_SHAREDEXP,
	DXGI_FORMAT_R8G8_B8G8_UNORM,
	DXGI_FORMAT_G8R8_G8B8_UNORM,
	DXGI_FORMAT_BC1_TYPELESS,
	DXGI_FORMAT_BC1_UNORM,
	DXGI_FORMAT_BC1_UNORM_SRGB,
	DXGI_FORMAT_BC2_TYPELESS,
	DXGI_FORMAT_BC2_UNORM,
	DXGI_FORMAT_BC2_UNORM_SRGB,
	DXGI_FORMAT_BC3_TYPELESS,
	DXGI_FORMAT_BC3_UNORM,
	DXGI_FORMAT_BC3_UNORM_SRGB,
	DXGI_FORMAT_BC4_TYPELESS,
	DXGI_FORMAT_BC4_UNORM,
	DXGI_FORMAT_BC4_SNORM,
	DXGI_FORMAT_BC5_TYPELESS,
	DXGI_FORMAT_BC5_UNORM,
	DXGI_FORMAT_BC5_SNORM,
	DXGI_FORMAT_B5G6R5_UNORM,
	DXGI_FORMAT_B5G5R5A1_UNORM,
	DXGI_FORMAT_B8G8R8A8_UNORM,
	DXGI_FORMAT_B8G8R8X8_UNORM,
	DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM,
	DXGI_FORMAT_B8G8R8A8_TYPELESS,
	DXGI_FORMAT_B8G8R8A8_UNORM_SRGB,
	DXGI_FORMAT_B8G8R8X8_TYPELESS,
	DXGI_FORMAT_B8G8R8X8_UNORM_SRGB,
	DXGI_FORMAT_BC6H_TYPELESS,
	DXGI_FORMAT_BC6H_UF16,
	DXGI_FORMAT_BC6H_SF16,
	DXGI_FORMAT_BC7_TYPELESS,
	DXGI_FORMAT_BC7_UNORM,
	DXGI_FORMAT_BC7_UNORM_SRGB,
	DXGI_FORMAT_AYUV,
	DXGI_FORMAT_Y410,
	DXGI_FORMAT_Y416,
	DXGI_FORMAT_NV12,
	DXGI_FORMAT_P010,
	DXGI_FORMAT_P016,
	DXGI_FORMAT_420_OPAQUE,
	DXGI_FORMAT_YUY2,
	DXGI_FORMAT_Y210,
	DXGI_FORMAT_Y216,
	DXGI_FORMAT_NV11,
	DXGI_FORMAT_AI44,
	DXGI_FORMAT_IA44,
	DXGI_FORMAT_P8,
	DXGI_FORMAT_A8P8,
	DXGI_FORMAT_B4G4R4A4_UNORM,
	DXGI_FORMAT_P208,
	DXGI_FORMAT_V208,
	DXGI_FORMAT_V408,
	DXGI_FORMAT_FORCE_UINT
} DXGI_FORMAT;
/// <summary>
/// Description of a pixel format.
/// </summary>
typedef struct D2D1_PIXEL_FORMAT
{
	DXGI_FORMAT format;
	D2D1_ALPHA_MODE alphaMode;

} D2D1_PIXEL_FORMAT;

interface IWICImagingFactory;
interface IWICImagingFactory2;
interface IWICPalette;
interface IWICBitmap;
interface IWICBitmapLock;
interface IWICBitmapSource;
interface IWICFastMetadataEncoder;
interface IWICBitmapCodecInfo;
interface IWICBitmapDecoderInfo;
interface IWICBitmapEncoderInfo;
interface IWICBitmapDecoder;
interface IWICBitmapEncoder;
//cpp_quote("#if (_WIN32_WINNT >= _WIN32_WINNT_WIN8) || defined(_WIN7_PLATFORM_UPDATE)")
interface IWICImageEncoder;
//cpp_quote("#endif")
interface IWICBitmapFrameDecode;
interface IWICBitmapFrameEncode;
interface IWICPlanarBitmapFrameEncode;
interface IWICBitmapSourceTransform;
interface IWICPlanarBitmapSourceTransform;
interface IWICBitmapScaler;
interface IWICBitmapClipper;
interface IWICBitmapFlipRotator;
interface IWICFormatConverter;
interface IWICPlanarFormatConverter;
interface IWICComponentInfo;
interface IWICStream;
interface IWICEnumMetadataItem;
interface IWICMetadataQueryReader;
interface IWICMetadataQueryWriter;

typedef long WICColor;
typedef struct WICRect
{
	INT X;
	INT Y;
	INT Width;
	INT Height;
} WICRect;

typedef void *WICInProcPointer;

typedef enum WICColorContextType
{
	WICColorContextUninitialized = 0x00000000,
	WICColorContextProfile = 0x00000001,
	WICColorContextExifColorSpace = 0x00000002,
} WICColorContextType;

#define CODEC_FORCE_DWORD 0x7FFFFFFF

typedef enum WIC_JPEG_CONSTS
{
	WIC_JPEG_MAX_COMPONENT_COUNT = 4,
	WIC_JPEG_MAX_TABLE_INDEX = 3,
	WIC_JPEG_SAMPLE_FACTORS_ONE = 0x00000011,
	WIC_JPEG_SAMPLE_FACTORS_THREE_420 = 0x00111122,
	WIC_JPEG_SAMPLE_FACTORS_THREE_422 = 0x00111121,
	WIC_JPEG_SAMPLE_FACTORS_THREE_440 = 0x00111112,
	WIC_JPEG_SAMPLE_FACTORS_THREE_444 = 0x00111111,
	WIC_JPEG_QUANTIZATION_BASELINE_ONE = 0x00000000,
	WIC_JPEG_QUANTIZATION_BASELINE_THREE = 0x00010100,
	WIC_JPEG_HUFFMAN_BASELINE_ONE = 0x00000000,
	WIC_JPEG_HUFFMAN_BASELINE_THREE = 0x00111100,

} WIC_JPEG_CONSTS;

typedef UUID* REFWICPixelFormatGUID;
typedef UUID WICPixelFormatGUID;

/*=========================================================================*\
WICBitmapCreateCacheOptions
\*=========================================================================*/

typedef enum WICBitmapCreateCacheOption
{
	WICBitmapNoCache = 0x00000000,
	WICBitmapCacheOnDemand = 0x00000001,
	WICBitmapCacheOnLoad = 0x00000002,
	WICBITMAPCREATECACHEOPTION_FORCE_DWORD = CODEC_FORCE_DWORD
} WICBitmapCreateCacheOption;


/*=========================================================================*\
WICDecodeOptions
\*=========================================================================*/

typedef enum WICDecodeOptions
{
	WICDecodeMetadataCacheOnDemand = 0x00000000,
	WICDecodeMetadataCacheOnLoad = 0x00000001,
	WICMETADATACACHEOPTION_FORCE_DWORD = CODEC_FORCE_DWORD
} WICDecodeOptions;


/*=========================================================================*\
WICBitmapEncoderCacheOption
\*=========================================================================*/

typedef enum WICBitmapEncoderCacheOption
{
	WICBitmapEncoderCacheInMemory = 0x00000000,
	WICBitmapEncoderCacheTempFile = 0x00000001,
	WICBitmapEncoderNoCache = 0x00000002,
	WICBITMAPENCODERCACHEOPTION_FORCE_DWORD = CODEC_FORCE_DWORD
} WICBitmapEncoderCacheOption;


/*=========================================================================*\
WICComponentType
\*=========================================================================*/

typedef enum WICComponentType
{
	WICDecoder = 0x00000001,
	WICEncoder = 0x00000002,
	WICPixelFormatConverter = 0x00000004,
	WICMetadataReader = 0x00000008,
	WICMetadataWriter = 0x00000010,
	WICPixelFormat = 0x00000020,
	WICAllComponents = 0x0000003F,
	WICCOMPONENTTYPE_FORCE_DWORD = CODEC_FORCE_DWORD
} WICComponentType;


/*=========================================================================*\
WICComponentEnumerateOptions
\*=========================================================================*/

typedef enum WICComponentEnumerateOptions
{
	WICComponentEnumerateDefault = 0x00000000,
	WICComponentEnumerateRefresh = 0x00000001,
	WICComponentEnumerateDisabled = 0x80000000,
	WICComponentEnumerateUnsigned = 0x40000000,
	WICComponentEnumerateBuiltInOnly = 0x20000000,
	WICCOMPONENTENUMERATEOPTIONS_FORCE_DWORD = CODEC_FORCE_DWORD
} WICComponentEnumerateOptions;


/*=========================================================================*\
WICBitmapPattern
\*=========================================================================*/

typedef struct WICBitmapPattern
{
	LARGE_INTEGER Position;
	ULONG Length;
	LONG Pattern; //[size_is(Length)] BYTE *Pattern;
	LONG Mask; //[size_is(Length)] BYTE *Mask;
	BOOL  EndOfStream;

}   WICBitmapPattern;


/*=========================================================================*\
WICBitmapInterpolationMode
\*=========================================================================*/

typedef enum WICBitmapInterpolationMode
{
	// Nearest Neighbor filtering. Also known as nearest pixel or nearest point
	// sampling.

	WICBitmapInterpolationModeNearestNeighbor = 0x00000000,

	// Linear filtering.

	WICBitmapInterpolationModeLinear = 0x00000001,

	// Cubic filtering. May include linear pre-filtering or decimation.

	WICBitmapInterpolationModeCubic = 0x00000002,

	// Fant filtering.

	WICBitmapInterpolationModeFant = 0x00000003,

	// High Quality Cubic filtering. This uses the Polyphase scaler which has
	// a much higher density of sampling points than normal Cubic.
	WICBitmapInterpolationModeHighQualityCubic = 0x00000004,

	WICBITMAPINTERPOLATIONMODE_FORCE_DWORD = CODEC_FORCE_DWORD
} WICBitmapInterpolationMode;


/*=========================================================================*\
WICBitmapPaletteType
\*=========================================================================*/

typedef enum WICBitmapPaletteType
{
	// Arbitrary custom palette provided by caller.

	WICBitmapPaletteTypeCustom = 0x00000000,

	// Optimal palette generated using a median-cut algorithm.

	WICBitmapPaletteTypeMedianCut = 0x00000001,

	// Black and white palette.

	WICBitmapPaletteTypeFixedBW = 0x00000002,

	// Symmetric halftone palettes.
	// Each of these halftone palettes will be a superset of the system palette.
	// E.g. Halftone8 will have it's 8-color on-off primaries and the 16 system
	// colors added. With duplicates removed, that leaves 16 colors.

	WICBitmapPaletteTypeFixedHalftone8 = 0x00000003, // 8-color, on-off primaries
	WICBitmapPaletteTypeFixedHalftone27 = 0x00000004, // 3 intensity levels of each color
	WICBitmapPaletteTypeFixedHalftone64 = 0x00000005, // 4 intensity levels of each color
	WICBitmapPaletteTypeFixedHalftone125 = 0x00000006, // 5 intensity levels of each color
	WICBitmapPaletteTypeFixedHalftone216 = 0x00000007, // 6 intensity levels of each color

	// Convenient web palette, same as WICBitmapPaletteTypeFixedHalftone216

	WICBitmapPaletteTypeFixedWebPalette = 0x00000007, //WICBitmapPaletteTypeFixedHalftone216,

	// Assymetric halftone palettes.
	// These are somewhat less useful than the symmetric ones, but are
	// included for completeness. These do not include all of the system
	// colors.

	WICBitmapPaletteTypeFixedHalftone252 = 0x00000008, // 6-red, 7-green, 6-blue intensities
	WICBitmapPaletteTypeFixedHalftone256 = 0x00000009, // 8-red, 8-green, 4-blue intensities

	WICBitmapPaletteTypeFixedGray4 = 0x0000000A, //   4 shades of gray
	WICBitmapPaletteTypeFixedGray16 = 0x0000000B, //  16 shades of gray
	WICBitmapPaletteTypeFixedGray256 = 0x0000000C, // 256 shades of gray

	WICBITMAPPALETTETYPE_FORCE_DWORD = CODEC_FORCE_DWORD
} WICBitmapPaletteType;


/*=========================================================================*\
WICBitmapDitherType
\*=========================================================================*/

typedef enum WICBitmapDitherType
{
	// Solid color - picks the nearest matching color with no attempt to
	// halftone or dither. May be used on an arbitrary palette.

	WICBitmapDitherTypeNone = 0x00000000,
	WICBitmapDitherTypeSolid = 0x00000000,

	// Ordered dithers and spiral dithers must be used with a fixed palette or
	// a fixed palette translation.

	// NOTE: DitherOrdered4x4 is unique in that it may apply to 16bpp
	// conversions also.

	WICBitmapDitherTypeOrdered4x4 = 0x00000001,

	WICBitmapDitherTypeOrdered8x8 = 0x00000002,
	WICBitmapDitherTypeOrdered16x16 = 0x00000003,
	WICBitmapDitherTypeSpiral4x4 = 0x00000004,
	WICBitmapDitherTypeSpiral8x8 = 0x00000005,
	WICBitmapDitherTypeDualSpiral4x4 = 0x00000006,
	WICBitmapDitherTypeDualSpiral8x8 = 0x00000007,

	// Error diffusion. May be used with any palette.

	WICBitmapDitherTypeErrorDiffusion = 0x00000008,

	WICBITMAPDITHERTYPE_FORCE_DWORD = CODEC_FORCE_DWORD
} WICBitmapDitherType;


/*=========================================================================*\
WICBitmapAlphaChannelOption
\*=========================================================================*/

typedef enum WICBitmapAlphaChannelOption
{
	WICBitmapUseAlpha = 0x00000000,
	WICBitmapUsePremultipliedAlpha = 0x00000001,
	WICBitmapIgnoreAlpha = 0x00000002,
	WICBITMAPALPHACHANNELOPTIONS_FORCE_DWORD = CODEC_FORCE_DWORD
} WICBitmapAlphaChannelOption;


/*=========================================================================*\
WICBitmapTransformOptions
\*=========================================================================*/

typedef enum WICBitmapTransformOptions
{
	WICBitmapTransformRotate0 = 0x00000000,
	WICBitmapTransformRotate90 = 0x00000001,
	WICBitmapTransformRotate180 = 0x00000002,
	WICBitmapTransformRotate270 = 0x00000003,
	WICBitmapTransformFlipHorizontal = 0x00000008,
	WICBitmapTransformFlipVertical = 0x00000010,
	WICBITMAPTRANSFORMOPTIONS_FORCE_DWORD = CODEC_FORCE_DWORD
} WICBitmapTransformOptions;


/*=========================================================================*\
WICBitmapLockFlags
\*=========================================================================*/

typedef enum WICBitmapLockFlags
{
	WICBitmapLockRead = 0x00000001,
	WICBitmapLockWrite = 0x00000002,
	WICBITMAPLOCKFLAGS_FORCE_DWORD = CODEC_FORCE_DWORD
} WICBitmapLockFlags;


/*=========================================================================*\
WICBitmapDecoderCapabilities
\*=========================================================================*/

typedef enum WICBitmapDecoderCapabilities
{
	WICBitmapDecoderCapabilitySameEncoder = 0x00000001,
	WICBitmapDecoderCapabilityCanDecodeAllImages = 0x00000002,
	WICBitmapDecoderCapabilityCanDecodeSomeImages = 0x00000004,
	WICBitmapDecoderCapabilityCanEnumerateMetadata = 0x00000008,
	WICBitmapDecoderCapabilityCanDecodeThumbnail = 0x00000010,
	WICBITMAPDECODERCAPABILITIES_FORCE_DWORD = CODEC_FORCE_DWORD
} WICBitmapDecoderCapabilities;


/*=========================================================================*\
WICProgressOperation
\*=========================================================================*/

typedef enum WICProgressOperation
{
	WICProgressOperationCopyPixels = 0x00000001,
	WICProgressOperationWritePixels = 0x00000002,
	WICProgressOperationAll = 0x0000FFFF,
	WICPROGRESSOPERATION_FORCE_DWORD = CODEC_FORCE_DWORD
} WICProgressOperation;


/*=========================================================================*\
WICProgressNotification
\*=========================================================================*/

typedef enum WICProgressNotification
{
	WICProgressNotificationBegin = 0x00010000,
	WICProgressNotificationEnd = 0x00020000,
	WICProgressNotificationFrequent = 0x00040000,
	WICProgressNotificationAll = 0xFFFF0000,
	WICPROGRESSNOTIFICATION_FORCE_DWORD = CODEC_FORCE_DWORD
} WICProgressNotification;


/*=========================================================================*\
WICComponentSigning
\*=========================================================================*/

typedef enum WICComponentSigning
{
	WICComponentSigned = 0x00000001,
	WICComponentUnsigned = 0x00000002,
	WICComponentSafe = 0x00000004,
	WICComponentDisabled = 0x80000000,
	WICCOMPONENTSIGNING_FORCE_DWORD = CODEC_FORCE_DWORD
} WICComponentSigning;


/*=========================================================================*\
WICGifLogicalScreenDescriptorProperties
\*=========================================================================*/

typedef enum WICGifLogicalScreenDescriptorProperties
{
	// This part is for Logical Screen Descriptor
	WICGifLogicalScreenSignature = 0x00000001,
	WICGifLogicalScreenDescriptorWidth = 0x00000002,
	WICGifLogicalScreenDescriptorHeight = 0x00000003,
	WICGifLogicalScreenDescriptorGlobalColorTableFlag = 0x00000004,
	WICGifLogicalScreenDescriptorColorResolution = 0x00000005,
	WICGifLogicalScreenDescriptorSortFlag = 0x00000006,
	WICGifLogicalScreenDescriptorGlobalColorTableSize = 0x00000007,
	WICGifLogicalScreenDescriptorBackgroundColorIndex = 0x00000008,
	WICGifLogicalScreenDescriptorPixelAspectRatio = 0x00000009,
	WICGifLogicalScreenDescriptorProperties_FORCE_DWORD = CODEC_FORCE_DWORD

} WICGifLogicalScreenDescriptorProperties;


/*=========================================================================*\
WICGifImageDescriptorProperties
\*=========================================================================*/

typedef enum WICGifImageDescriptorProperties
{
	// This part is for Image Descriptor
	WICGifImageDescriptorLeft = 0x00000001,
	WICGifImageDescriptorTop = 0x00000002,
	WICGifImageDescriptorWidth = 0x00000003,
	WICGifImageDescriptorHeight = 0x00000004,
	WICGifImageDescriptorLocalColorTableFlag = 0x00000005,
	WICGifImageDescriptorInterlaceFlag = 0x00000006,
	WICGifImageDescriptorSortFlag = 0x00000007,
	WICGifImageDescriptorLocalColorTableSize = 0x00000008,
	WICGifImageDescriptorProperties_FORCE_DWORD = CODEC_FORCE_DWORD
} WICGifImageDescriptorProperties;


/*=========================================================================*\
WICGifGraphicControlExtensionProperties
\*=========================================================================*/

typedef enum WICGifGraphicControlExtensionProperties
{
	// This part is for Graphic Control Extension
	WICGifGraphicControlExtensionDisposal = 0x00000001,
	WICGifGraphicControlExtensionUserInputFlag = 0x00000002,
	WICGifGraphicControlExtensionTransparencyFlag = 0x00000003,
	WICGifGraphicControlExtensionDelay = 0x00000004,
	WICGifGraphicControlExtensionTransparentColorIndex = 0x00000005,
	WICGifGraphicControlExtensionProperties_FORCE_DWORD = CODEC_FORCE_DWORD
} WICGifGraphicControlExtensionProperties;


/*=========================================================================*\
WICGifApplicationExtensionProperties
\*=========================================================================*/

typedef enum WICGifApplicationExtensionProperties
{
	// This part is for Application Extension	 
	WICGifApplicationExtensionApplication = 0x00000001,
	WICGifApplicationExtensionData = 0x00000002,
	WICGifApplicationExtensionProperties_FORCE_DWORD = CODEC_FORCE_DWORD
} WICGifApplicationExtensionProperties;


/*=========================================================================*\
WICGifCommentExtensionProperties
\*=========================================================================*/

typedef enum WICGifCommentExtensionProperties
{
	WICGifCommentExtensionText = 0x00000001,
	WICGifCommentExtensionProperties_FORCE_DWORD = CODEC_FORCE_DWORD
} WICGifCommentExtensionProperties;

/*=========================================================================*\
WICJpegCommentProperties
\*=========================================================================*/

typedef enum WICJpegCommentProperties
{
	WICJpegCommentText = 0x00000001,
	WICJpegCommentProperties_FORCE_DWORD = CODEC_FORCE_DWORD
} WICJpegCommentProperties;

/*=========================================================================*\
WICJpegLuminanceProperties
\*=========================================================================*/

typedef enum WICJpegLuminanceProperties
{
	WICJpegLuminanceTable = 0x00000001,
	WICJpegLuminanceProperties_FORCE_DWORD = CODEC_FORCE_DWORD
} WICJpegLuminanceProperties;

/*=========================================================================*\
WICJpegChrominanceProperties
\*=========================================================================*/

typedef enum WICJpegChrominanceProperties
{
	WICJpegChrominanceTable = 0x00000001,
	WICJpegChrominanceProperties_FORCE_DWORD = CODEC_FORCE_DWORD
} WICJpegChrominanceProperties;

/*=========================================================================*\
WIC8BIMIptcProperties
\*=========================================================================*/

typedef enum WIC8BIMIptcProperties
{
	WIC8BIMIptcPString = 0x00000000,
	WIC8BIMIptcEmbeddedIPTC = 0x00000001,
	WIC8BIMIptcProperties_FORCE_DWORD = CODEC_FORCE_DWORD
} WIC8BIMIptcProperties;

/*=========================================================================*\
WIC8BIMResolutionInfoProperties
\*=========================================================================*/

typedef enum WIC8BIMResolutionInfoProperties
{
	WIC8BIMResolutionInfoPString = 0x00000001,
	WIC8BIMResolutionInfoHResolution = 0x00000002,
	WIC8BIMResolutionInfoHResolutionUnit = 0x00000003,
	WIC8BIMResolutionInfoWidthUnit = 0x00000004,
	WIC8BIMResolutionInfoVResolution = 0x00000005,
	WIC8BIMResolutionInfoVResolutionUnit = 0x00000006,
	WIC8BIMResolutionInfoHeightUnit = 0x00000007,
	WIC8BIMResolutionInfoProperties_FORCE_DWORD = CODEC_FORCE_DWORD
} WIC8BIMResolutionInfoProperties;

/*=========================================================================*\
WIC8BIMIptcDigestProperties
\*=========================================================================*/

typedef enum WIC8BIMIptcDigestProperties
{
	WIC8BIMIptcDigestPString = 0x00000001,
	WIC8BIMIptcDigestIptcDigest = 0x00000002,
	WIC8BIMIptcDigestProperties_FORCE_DWORD = CODEC_FORCE_DWORD
} WIC8BIMIptcDigestProperties;

/*=========================================================================*\
WICPngGamaProperties
\*=========================================================================*/

typedef enum WICPngGamaProperties
{
	WICPngGamaGamma = 0x00000001,
	WICPngGamaProperties_FORCE_DWORD = CODEC_FORCE_DWORD
} WICPngGamaProperties;


/*=========================================================================*\
WICPngBkgdProperties
\*=========================================================================*/

typedef enum WICPngBkgdProperties
{
	WICPngBkgdBackgroundColor = 0x00000001,
	WICPngBkgdProperties_FORCE_DWORD = CODEC_FORCE_DWORD
} WICPngBkgdProperties;


/*=========================================================================*\
WICPngItxtProperties
\*=========================================================================*/

typedef enum WICPngItxtProperties
{
	WICPngItxtKeyword = 0x00000001,
	WICPngItxtCompressionFlag = 0x00000002,
	WICPngItxtLanguageTag = 0x00000003,
	WICPngItxtTranslatedKeyword = 0x00000004,
	WICPngItxtText = 0x00000005,
	WICPngItxtProperties_FORCE_DWORD = CODEC_FORCE_DWORD
} WICPngItxtProperties;


/*=========================================================================*\
WICPngChrmProperties
\*=========================================================================*/

typedef enum WICPngChrmProperties
{
	WICPngChrmWhitePointX = 0x00000001,
	WICPngChrmWhitePointY = 0x00000002,
	WICPngChrmRedX = 0x00000003,
	WICPngChrmRedY = 0x00000004,
	WICPngChrmGreenX = 0x00000005,
	WICPngChrmGreenY = 0x00000006,
	WICPngChrmBlueX = 0x00000007,
	WICPngChrmBlueY = 0x0000008,
	WICPngChrmProperties_FORCE_DWORD = CODEC_FORCE_DWORD
} WICPngChrmProperties;


/*=========================================================================*\
WICPngHistProperties
\*=========================================================================*/

typedef enum WICPngHistProperties
{
	WICPngHistFrequencies = 0x00000001,
	WICPngHistProperties_FORCE_DWORD = CODEC_FORCE_DWORD
} WICPngHistProperties;


/*=========================================================================*\
WICPngIccpProperties
\*=========================================================================*/

typedef enum WICPngIccpProperties
{
	WICPngIccpProfileName = 0x00000001,
	WICPngIccpProfileData = 0x00000002,
	WICPngIccpProperties_FORCE_DWORD = CODEC_FORCE_DWORD
} WICPngIccpProperties;


/*=========================================================================*\
WICPngSrgbProperties
\*=========================================================================*/

typedef enum WICPngSrgbProperties
{
	WICPngSrgbRenderingIntent = 0x00000001,
	WICPngSrgbProperties_FORCE_DWORD = CODEC_FORCE_DWORD
} WICPngSrgbProperties;


/*=========================================================================*\
WICPngTimeProperties
\*=========================================================================*/

typedef enum WICPngTimeProperties
{
	WICPngTimeYear = 0x00000001,
	WICPngTimeMonth = 0x00000002,
	WICPngTimeDay = 0x00000003,
	WICPngTimeHour = 0x00000004,
	WICPngTimeMinute = 0x00000005,
	WICPngTimeSecond = 0x00000006,
	WICPngTimeProperties_FORCE_DWORD = CODEC_FORCE_DWORD
} WICPngTimeProperties;

typedef /* [public] */
enum WICJpegXLAnimProperties
{
	WICJpegXLAnimLoopCount = 0x1,
	WICJpegXLAnimFrameTicksPerSecondNumerator = 0x2,
	WICJpegXLAnimFrameTicksPerSecondDenominator = 0x3,
	WICJpegXLAnimProperties_FORCE_DWORD = 0x7fffffff
} 	WICJpegXLAnimProperties;

typedef /* [public] */
enum WICJpegXLAnimFrameProperties
{
	WICJpegXLAnimFrameDurationInTicks = 0x1,
	WICJpegXLAnimFrameName = 0x2,
	WICJpegXLAnimFrameProperties_FORCE_DWORD = 0x7fffffff
} 	WICJpegXLAnimFrameProperties;

typedef enum WICHeifCompressionOption
{
	WICHeifCompressionDontCare = 0,
	WICHeifCompressionNone = 0x1,
	WICHeifCompressionHEVC = 0x2,
	WICHeifCompressionAV1 = 0x3,
	WICHEIFCOMPRESSIONOPTION_FORCE_DWORD = 0x7fffffff
} 	WICHeifCompressionOption;


/*=========================================================================*\
WICSectionAccessLevel
\*=========================================================================*/

typedef enum WICSectionAccessLevel
{
	WICSectionAccessLevelRead = 0x00000001,
	WICSectionAccessLevelReadWrite = 0x00000003,
	WICSectionAccessLevel_FORCE_DWORD = CODEC_FORCE_DWORD
} WICSectionAccessLevel;


/*=========================================================================*\
WICPixelFormatNumericRepresentation
\*=========================================================================*/

typedef enum WICPixelFormatNumericRepresentation
{
	WICPixelFormatNumericRepresentationUnspecified = 0x00000000,
	WICPixelFormatNumericRepresentationIndexed = 0x00000001,
	WICPixelFormatNumericRepresentationUnsignedInteger = 0x00000002,
	WICPixelFormatNumericRepresentationSignedInteger = 0x00000003,
	WICPixelFormatNumericRepresentationFixed = 0x00000004,
	WICPixelFormatNumericRepresentationFloat = 0x00000005,
	WICPixelFormatNumericRepresentation_FORCE_DWORD = CODEC_FORCE_DWORD
} WICPixelFormatNumericRepresentation;

/*=========================================================================*\
WICPlanarOptions
\*=========================================================================*/

typedef enum WICPlanarOptions
{
	WICPlanarOptionsDefault = 0x00000000,
	WICPlanarOptionsPreserveSubsampling = 0x00000001,
	WICPLANAROPTIONS_FORCE_DWORD = CODEC_FORCE_DWORD
} WICPlanarOptions;

/*=========================================================================*\
WICJpegIndexingOptions
\*=========================================================================*/

typedef enum WICJpegIndexingOptions
{
	WICJpegIndexingOptionsGenerateOnDemand = 0x00000000,
	WICJpegIndexingOptionsGenerateOnLoad = 0x00000001,
	WICJpegIndexingOptions_FORCE_DWORD = CODEC_FORCE_DWORD
} WICJpegIndexingOptions;

/*=========================================================================*\
WICJpegTransferMatrix
\*=========================================================================*/

typedef enum WICJpegTransferMatrix
{
	WICJpegTransferMatrixIdentity = 0x00000000,
	WICJpegTransferMatrixBT601 = 0x00000001,
	WICJpegTransferMatrix_FORCE_DWORD = CODEC_FORCE_DWORD
} WICJpegTransferMatrix;

/*=========================================================================*\
WICJpegScanType
\*=========================================================================*/

typedef enum WICJpegScanType
{
	WICJpegScanTypeInterleaved = 0x00000000,
	WICJpegScanTypePlanarComponents = 0x00000001,
	WICJpegScanTypeProgressive = 0x00000002,
	WICJpegScanType_FORCE_DWORD = CODEC_FORCE_DWORD
} WICJpegScanType;

//typedef DWORD *D2D1_PIXEL_FORMAT;
//What?
typedef struct WICImageParameters
{
	D2D1_PIXEL_FORMAT PixelFormat;  
	FLOAT DpiX;
	FLOAT DpiY;
	FLOAT Top;
	FLOAT Left;
	UINT32 PixelWidth;
	UINT32 PixelHeight;
} WICImageParameters;

typedef struct WICBitmapPlaneDescription
{
	WICPixelFormatGUID Format;
	UINT Width;
	UINT Height;
} WICBitmapPlaneDescription;

/*=========================================================================*\
WICBitmapPlane
\*=========================================================================*/
typedef struct WICBitmapPlane
{
	WICPixelFormatGUID Format;
	LONG pbBuffer;
	UINT cbStride;
	UINT cbBufferSize;
} WICBitmapPlane;

/*=========================================================================*\
WICJpegFrameHeader
\*=========================================================================*/
typedef struct WICJpegFrameHeader
{
	UINT                                            Width;
	UINT                                            Height;
	WICJpegTransferMatrix                           TransferMatrix;
	WICJpegScanType                                 ScanType;
	UINT											cComponents;
	DWORD                                           ComponentIdentifiers;
	DWORD                                           SampleFactors;
	DWORD                                           QuantizationTableIndices;
} WICJpegFrameHeader;

/*=========================================================================*\
WICJpegScanHeader
\*=========================================================================*/
typedef struct WICJpegScanHeader
{
	UINT											cComponents;
	UINT                                            RestartInterval;
	DWORD                                           ComponentSelectors;
	DWORD                                           HuffmanTableIndices;
	BYTE                                            StartSpectralSelection;
	BYTE                                            EndSpectralSelection;
	BYTE                                            SuccessiveApproximationHigh;
	BYTE                                            SuccessiveApproximationLow;
} WICJpegScanHeader;


/*=========================================================================*\
IWICPalette -  Palette
\*=========================================================================*/

[
	odl,
	uuid(00000040-a8f2-4877-ba0a-fd2b6645fb94)
]
interface IWICPalette : stdole.IUnknown
{
	// Initialize the palette to one of the pre-defined palette types in
	// the PaletteType enumeration. A transparent color can be included
	// if desired. If the pre-defined palette has fewer than 256 entries,
	// one entry is appended for the transparent color - otherwise index
	// 255 is replaced with the transparent color.

	long InitializePredefined(
		[in] WICBitmapPaletteType ePaletteType,
		[in] BOOL fAddTransparentColor
		);

	// Build a custom palette. If a transparent color is required it should be
	// included in the array of input colors.

	long InitializeCustom(
		[in] WICColor *pColors,
		[in] UINT cCount
		);

	// Compute an optimal palette from a given surface. The number of colors to
	// generate is controlled by cColors. If a transparent color is desired,
	// one of the cColors entries will be a transparent color - i.e. the count
	// will not be increased beyond cColors.

	long InitializeFromBitmap(
		[in] IWICBitmapSource *pISurface,
		[in] UINT cCount,
		[in] BOOL fAddTransparentColor
		);

	// Initialize the palette to be a copy of an existing palette.

	long InitializeFromPalette(
		[in] IWICPalette *pIPalette
		);

	long GetType(
		[out] WICBitmapPaletteType *pePaletteType
		);

	long GetColorCount(
		[out] UINT *pcCount
		);

	long GetColors(
		[in] UINT cCount,
		[out] WICColor *pColors,
		[out] UINT *pcActualColors
		);

	long IsBlackWhite(
		[out] BOOL *pfIsBlackWhite
		);

	long IsGrayscale(
		[out] BOOL *pfIsGrayscale
		);

	long HasAlpha(
		[out] BOOL *pfHasAlpha
		);
};


/*=========================================================================*\
IWICBitmapSource -  Source bitmap/imaging functionality
\*=========================================================================*/

[
	odl,
	uuid(00000120-a8f2-4877-ba0a-fd2b6645fb94)
]
interface IWICBitmapSource : stdole.IUnknown
{
	long GetSize(
		[out] UINT *puiWidth,
		[out] UINT *puiHeight
		);

	long GetPixelFormat(
		[out] WICPixelFormatGUID *pPixelFormat
		);

	long GetResolution(
		[out] double *pDpiX,
		[out] double *pDpiY
		);

	long CopyPalette(
		[in] IWICPalette *pIPalette
		);

	long CopyPixels(
		[in] LONG prc, //WICRect *prc,
		[in] UINT cbStride,
		[in] UINT cbBufferSize,
		[in] LONG pbBuffer //VarPtr to byte array no?
		//[out] BYTE *pbBuffer
		);
};


/*=========================================================================*\
IWICFormatConverter
\*=========================================================================*/

[
	odl,
	uuid(00000301-a8f2-4877-ba0a-fd2b6645fb94)
]
interface IWICFormatConverter : IWICBitmapSource
{
	long Initialize(
		[in] IWICBitmapSource *pISource,
		[in] REFWICPixelFormatGUID dstFormat,
		[in] WICBitmapDitherType dither,
		[in] IWICPalette *pIPalette,
		[in] double alphaThresholdPercent,
		[in] WICBitmapPaletteType paletteTranslate
		);

	long CanConvert(
		[in] REFWICPixelFormatGUID srcPixelFormat,
		[in] REFWICPixelFormatGUID dstPixelFormat,
		[out] BOOL *pfCanConvert);

};

/*=========================================================================*\
IWICPlanarFormatConverter
\*=========================================================================*/

[
	odl,
	uuid(BEBEE9CB-83B0-4DCC-8132-B0AAA55EAC96)
]
interface IWICPlanarFormatConverter : IWICBitmapSource
{
	long Initialize(
		[in] IWICBitmapSource **ppPlanes,
		[in] UINT cPlanes,
		[in] REFWICPixelFormatGUID dstFormat,
		[in] WICBitmapDitherType dither,
		[in] IWICPalette *pIPalette,
		[in] double alphaThresholdPercent,
		[in] WICBitmapPaletteType paletteTranslate
		);

	long CanConvert(
		[in] WICPixelFormatGUID *pSrcPixelFormats,
		[in] UINT cSrcPlanes,
		[in] REFWICPixelFormatGUID dstPixelFormat,
		[out] BOOL *pfCanConvert
		);
};

/*=========================================================================*\
IWICBitmapScaler
\*=========================================================================*/

[
	odl,
	uuid(00000302-a8f2-4877-ba0a-fd2b6645fb94)
]
interface IWICBitmapScaler : IWICBitmapSource
{
	long Initialize(
		[in] IWICBitmapSource *pISource,
		[in] UINT uiWidth,
		[in] UINT uiHeight,
		[in] WICBitmapInterpolationMode mode
		);
};


/*=========================================================================*\
IWICBitmapClipper
\*=========================================================================*/

[
	odl,
	uuid(E4FBCF03-223D-4e81-9333-D635556DD1B5)
]
interface IWICBitmapClipper : IWICBitmapSource
{
	long Initialize(
		[in] IWICBitmapSource *pISource,
		[in] LONG prc //WICRect *prc,
		);
};


/*=========================================================================*\
IWICBitmapFlipRotator
\*=========================================================================*/

[
	odl,
	uuid(5009834F-2D6A-41ce-9E1B-17C5AFF7A782)
]
interface IWICBitmapFlipRotator : IWICBitmapSource
{
	long Initialize(
		[in] IWICBitmapSource *pISource,
		[in] WICBitmapTransformOptions options
		);
};


/*=========================================================================*\
IWICBitmapLock - WIC Lock object for bitmaps.
\*=========================================================================*/

[
	odl,
	uuid(00000123-a8f2-4877-ba0a-fd2b6645fb94)
]
interface IWICBitmapLock : stdole.IUnknown
{
	long GetSize(
		[out] UINT *puiWidth,
		[out] UINT *puiHeight
		);

	long GetStride(
		[out] UINT *pcbStride
		);

	long GetDataPointer(
		[out] UINT *pcbBufferSize,
		[out] WICInProcPointer ppbData
		);

	long GetPixelFormat(
		[out] WICPixelFormatGUID *pPixelFormat
		);
};


/*=========================================================================*\
IWICBitmap - WIC Bitmap cache interface
\*=========================================================================*/

[
	odl,
	uuid(00000121-a8f2-4877-ba0a-fd2b6645fb94)
]
interface IWICBitmap : IWICBitmapSource
{
	long Lock(
		[in] LONG prcLock, //WICRect *prcLock,
		[in] DWORD flags,
		[out] IWICBitmapLock **ppILock
		);

	long SetPalette(
		[in] IWICPalette *pIPalette
		);

	long SetResolution(
		[in] double dpiX,
		[in] double dpiY
		);
};


/*=========================================================================*\
IWICColorContext - WIC color context
\*=========================================================================*/

[
	odl,
	uuid(3C613A02-34B2-44ea-9A7C-45AEA9C6FD6D)
]
interface IWICColorContext : stdole.IUnknown
{
	long InitializeFromFilename(
		[in] LONG wzFilename
		);

long InitializeFromMemory(
	    [in] BYTE *pbBuffer,
		[in] UINT cbBufferSize
		);

	long InitializeFromExifColorSpace(
		[in] UINT value
		);

	long GetType(
		[out] WICColorContextType *pType
		);

	long GetProfileBytes(
		[in] UINT cbBuffer,
		[in] BYTE *pbBuffer,
		[out] UINT *pcbActual
		);

	long GetExifColorSpace(
		[out] UINT *pValue
		);

};


/*=========================================================================*\
IWICColorTransform - WIC color transform
\*=========================================================================*/

[
	odl,
	uuid(B66F034F-D0E2-40ab-B436-6DE39E321A94)
]
interface IWICColorTransform : IWICBitmapSource
{
	long Initialize(
		[in] IWICBitmapSource *pIBitmapSource,
		[in] IWICColorContext *pIContextSource,
		[in] IWICColorContext *pIContextDest,
		[in] REFWICPixelFormatGUID pixelFmtDest
		);
};


/*=========================================================================*\
IWICFastMetadataEncoder
\*=========================================================================*/

[
	odl,
	uuid(B84E2C09-78C9-4AC4-8BD3-524AE1663A2F)
]
interface IWICFastMetadataEncoder : stdole.IUnknown
{
	long Commit(
		);

	long GetMetadataQueryWriter(
		[out] IWICMetadataQueryWriter **ppIMetadataQueryWriter
		);
};


/*=========================================================================*\
IWICStream - WIC Bitmap Stream
\*=========================================================================*/

[
	odl,
	uuid(135FF860-22B7-4ddf-B0F6-218F4F299A43)
]
interface IWICStream : IStream
{
	long InitializeFromIStream(
		[in] IStream *pIStream
		);

	long InitializeFromFilename(
		[in] LONG wzFileName,
		[in] DWORD dwDesiredAccess
		);

	long InitializeFromMemory(
		[in] WICInProcPointer pbBuffer,
		[in] DWORD cbBufferSize
		);

	long InitializeFromIStreamRegion(
		[in] IStream *pIStream,
		[in] LARGE_INTEGER ulOffset,
		[in] LARGE_INTEGER ulMaxSize
		);
};


/*=========================================================================*\
IWICEnumMetadataItem
\*=========================================================================*/

[
	odl,
	uuid(DC2BB46D-3F07-481E-8625-220C4AEDBB33)
]
interface IWICEnumMetadataItem : stdole.IUnknown
{
	long Next(
		[in] ULONG celt,
		[in] VARIANT *rgeltSchema,
		[in] VARIANT *rgeltId,
		[in, out] VARIANT *rgeltValue,
		[out] ULONG *pceltFetched
		);

	long Skip(
		[in] ULONG celt
		);

	long Reset();

	long Clone(
		[out] IWICEnumMetadataItem **ppIEnumMetadataItem
		);
}


/*=========================================================================*\
IWICMetadataQueryReader - Metadata Query Reader
\*=========================================================================*/

[
	odl,
	uuid(30989668-E1C9-4597-B395-458EEDB808DF)
]
interface IWICMetadataQueryReader : stdole.IUnknown
{
	long GetContainerFormat(
		[out] UUID *pguidContainerFormat
		);

	long GetLocation(
		[in] UINT cchMaxLength,
		[in, out] LONG *wzNamespace, //WCHAR*
		[out] UINT *pcchActualLength
		);

	long GetMetadataByName(
		[in] LONG wzName,
		[in, out] VARIANT *pvarValue
		);

	long GetEnumerator(
		[out] IEnumString **ppIEnumString
		);
}


/*=========================================================================*\
IWICMetadataQueryWriter - Metadata Query Writer
\*=========================================================================*/

[
	odl,
	uuid(A721791A-0DEF-4d06-BD91-2118BF1DB10B)
]
interface IWICMetadataQueryWriter : IWICMetadataQueryReader
{
	long SetMetadataByName(
		[in] LONG wzName,
		[in] VARIANT *pvarValue
		);

	long RemoveMetadataByName(
		[in] LONG wzName
		);
}


/*=========================================================================*\
IWICBitmapEncoder -  Bitmap Encoder
\*=========================================================================*/

[
	odl,
	uuid(00000103-a8f2-4877-ba0a-fd2b6645fb94)
]
interface IWICBitmapEncoder : stdole.IUnknown
{
	long Initialize(
		[in] IStream *pIStream,
		[in] WICBitmapEncoderCacheOption cacheOption
		);

	long GetContainerFormat(
		[out] UUID *pguidContainerFormat
		);

	long GetEncoderInfo(
		[out] IWICBitmapEncoderInfo **ppIEncoderInfo
		);

	long SetColorContexts(
		[in] UINT cCount,
		[in,] IWICColorContext **ppIColorContext
		);

	long SetPalette(
		[in] IWICPalette *pIPalette
		);

	long SetThumbnail(
		[in] IWICBitmapSource *pIThumbnail
		);

	long SetPreview(
		[in] IWICBitmapSource *pIPreview
		);

	long CreateNewFrame(
		[out] IWICBitmapFrameEncode **ppIFrameEncode,
		[in, out] IPropertyBag2 **ppIEncoderOptions
		);

	long Commit(
		);

	long GetMetadataQueryWriter(
		[out] IWICMetadataQueryWriter **ppIMetadataQueryWriter
		);
};


/*=========================================================================*\
IWICBitmapFrameEncode -  Bitmap Frame Encoder
\*=========================================================================*/

[
	odl,
	uuid(00000105-a8f2-4877-ba0a-fd2b6645fb94)
]
interface IWICBitmapFrameEncode : stdole.IUnknown
{
	long Initialize(
		[in] IPropertyBag2 *pIEncoderOptions
		);

	long SetSize(
		[in] UINT uiWidth,
		[in] UINT uiHeight
		);

	long SetResolution(
		[in] double dpiX,
		[in] double dpiY
		);

	long SetPixelFormat(
		[in, out] WICPixelFormatGUID *pPixelFormat
		);

	long SetColorContexts(
		[in] UINT cCount,
		[in] IWICColorContext **ppIColorContext
		);

	long SetPalette(
		[in] IWICPalette *pIPalette
		);

	long SetThumbnail(
		[in] IWICBitmapSource *pIThumbnail
		);

	long WritePixels(
		[in] UINT lineCount,
		[in] UINT cbStride,
		[in] UINT cbBufferSize,
		[in] LONG pbPixels //BYTE *
		);

	long WriteSource(
		[in] IWICBitmapSource *pIBitmapSource,
		[in] LONG prc //WICRect *prc
		);

	long Commit(
		);

	long GetMetadataQueryWriter(
		[out] IWICMetadataQueryWriter **ppIMetadataQueryWriter
		);
};

/*=========================================================================*\
IWICPlanarBitmapFrameEncode
\*=========================================================================*/

[
	odl,
	uuid(F928B7B8-2221-40C1-B72E-7E82F1974D1A)
]
interface IWICPlanarBitmapFrameEncode : stdole.IUnknown
{
	long WritePixels(
		[in] UINT lineCount,
		[in] WICBitmapPlane *pPlanes,
		[in] UINT cPlanes
		);

	long WriteSource(
		[in] IWICBitmapSource **ppPlanes,
		[in] UINT cPlanes,
		[in] LONG prcSource //WICRect *prcSource
		);
};

/*=========================================================================*\
IWICImageEncoder -  ID2D1Image Encoder
\*=========================================================================*/
[
	odl,
	uuid(04C75BF8-3CE1-473B-ACC5-3CC4F5E94999)
]
interface IWICImageEncoder : stdole.IUnknown
{
	long WriteFrame(
		[in] ID2D1Image* pImage,//ID2D1Image *  Use ObjPtr
		[in] WICImageParameters *pImageParameters
		);

	long WriteFrameThumbnail(
		[in] ID2D1Image* pImage,//ID2D1Image *  Use ObjPtr
		[in] IWICBitmapFrameEncode *pFrameEncode,
		[in] WICImageParameters *pImageParameters
		);

	long WriteThumbnail(
		[in] ID2D1Image* pImage,//ID2D1Image *  Use ObjPtr
		[in] IWICBitmapEncoder *pEncoder,
		[in] WICImageParameters *pImageParameters
		);
};

/*=========================================================================*\
IWICBitmapDecoder -  Bitmap Decoder
\*=========================================================================*/

[
	odl,
	uuid(9EDDE9E7-8DEE-47ea-99DF-E6FAF2ED44BF)
]
interface IWICBitmapDecoder : stdole.IUnknown
{
	long QueryCapability(
		[in] IStream *pIStream,
		[out] DWORD *pdwCapability
		);

	long Initialize(
		[in] IStream *pIStream,
		[in] WICDecodeOptions cacheOptions
		);

	long GetContainerFormat(
		[out] UUID *pguidContainerFormat
		);

	long GetDecoderInfo(
		[out] IWICBitmapDecoderInfo **ppIDecoderInfo
		);

	long CopyPalette(
		[in] IWICPalette *pIPalette
		);

	long GetMetadataQueryReader(
		[out] IWICMetadataQueryReader **ppIMetadataQueryReader
		);

	long GetPreview(
		[out] IWICBitmapSource **ppIBitmapSource
		);

	long GetColorContexts(
		[in] UINT cCount,
		[in, out]  IWICColorContext **ppIColorContexts,
		[out] UINT *pcActualCount);


	long GetThumbnail(
		[out] IWICBitmapSource **ppIThumbnail
		);

	long GetFrameCount(
		[out] UINT *pCount
		);

	HRESULT GetFrame(
		[in] UINT index,
		[out, retval] IWICBitmapFrameDecode **ppIBitmapFrame
		);
};


/*=========================================================================*\
IWICBitmapSourceTransform
\*=========================================================================*/

[
	odl,
	uuid(3B16811B-6A43-4ec9-B713-3D5A0C13B940)
]
interface IWICBitmapSourceTransform : stdole.IUnknown
{
	long CopyPixels(
		[in] LONG prc, //WICRect *prc,
		[in] UINT uiWidth,
		[in] UINT uiHeight,
		[in] WICPixelFormatGUID *pguidDstFormat,
		[in] WICBitmapTransformOptions dstTransform,
		[in] UINT nStride,
		[in] UINT cbBufferSize,
		[in] LONG pbBuffer //[out] BYTE *
		);

	long GetClosestSize(
		[in, out] UINT *puiWidth,
		[in, out] UINT *puiHeight
		);

	long GetClosestPixelFormat(
		[in, out] WICPixelFormatGUID *pguidDstFormat
		);

	long DoesSupportTransform(
		[in] WICBitmapTransformOptions dstTransform,
		[out] BOOL *pfIsSupported
		);
};

[
	odl,
		uuid(c3373fdf-6d39-4e5f-8e79-bf40c0b7ed77)
]
interface IWICBitmapSourceTransform2 : IWICBitmapSourceTransform
{
	HRESULT GetColorContextsForPixelFormat(
		[in] WICPixelFormatGUID* pPixelFormat,
		[in] UINT cCount,
		[in] IWICColorContext** ppIColorContexts,
		[out] UINT* pcActualCount
	);
};

[
	odl,
		uuid(de9d91d2-70b4-4f41-836c-25fcd39626d3)
]
interface IWICDisplayAdaptationControl : stdole.IUnknown
{
	HRESULT DoesSupportChangingMaxLuminance(
		[in] WICPixelFormatGUID* pguidDstFormat,
		[out] BOOL* pfIsSupported
	);

	HRESULT SetDisplayMaxLuminance(
		[in] FLOAT fLuminanceInNits
	);

	HRESULT GetDisplayMaxLuminance(
		[out, retval] FLOAT* pfLuminanceInNits
	);
}
/*=========================================================================*\
IWICPlanarBitmapSourceTransform
\*=========================================================================*/

[
	odl,
	uuid(3AFF9CCE-BE95-4303-B927-E7D16FF4A613)
]
interface IWICPlanarBitmapSourceTransform : stdole.IUnknown
{
	long DoesSupportTransform(
		[in, out] UINT *puiWidth,
		[in, out] UINT *puiHeight,
		[in] WICBitmapTransformOptions dstTransform,
		[in] WICPlanarOptions dstPlanarOptions,
		[in] WICPixelFormatGUID *pguidDstFormats,
		[out] WICBitmapPlaneDescription *pPlaneDescriptions,
		[in] UINT cPlanes,
		[out] BOOL *pfIsSupported
		);

	long CopyPixels(
		[in] LONG prcSource, //WICRect *prc,WICRect *prcSource,
		[in] UINT uiWidth,
		[in] UINT uiHeight,
		[in] WICBitmapTransformOptions dstTransform,
		[in] WICPlanarOptions dstPlanarOptions,
		[in] WICBitmapPlane *pDstPlanes,
		[in] UINT cPlanes
		);
};

/*=========================================================================*\
IWICBitmapFrameDecode -  Bitmap Decoder
\*=========================================================================*/

[
	odl,
	uuid(3B16811B-6A43-4ec9-A813-3D930C13B940)
]
interface IWICBitmapFrameDecode : IWICBitmapSource
{
	long GetMetadataQueryReader(
		[out] IWICMetadataQueryReader **ppIMetadataQueryReader
		);

	long GetColorContexts(
		[in] UINT cCount,
		[in, out]  IWICColorContext **ppIColorContexts,
		[out] UINT *pcActualCount);

	long GetThumbnail(
		[out] IWICBitmapSource **ppIThumbnail
		);
};


/*=========================================================================*\
IWICProgressiveLevelControl -  Progressive Decoding
\*=========================================================================*/

[
	odl,
	uuid(DAAC296F-7AA5-4dbf-8D15-225C5976F891)
]
interface IWICProgressiveLevelControl : stdole.IUnknown
{
	HRESULT GetLevelCount(
		[out, retval] UINT * pcLevels
		);

	HRESULT GetCurrentLevel(
		[out, retval] UINT * pnLevel
		);

	long SetCurrentLevel(
		[in] UINT nLevel
		);
}


/*=========================================================================*\
IWICProgressCallback - Cross apartment callback interface
\*=========================================================================*/

[
	odl,
	uuid(4776F9CD-9517-45FA-BF24-E89C5EC5C60C)
]
interface IWICProgressCallback : stdole.IUnknown
{
	HRESULT Notify(
		[in] ULONG uFrameNum,
		[in] WICProgressOperation operation,
		[in] double dblProgress
		);
}


/*=========================================================================*\
IWICBitmapCodecProgressNotification - Register Progress Notifications
\*=========================================================================*/

[
	odl,
	uuid(64C1024E-C3CF-4462-8078-88C2B11C46D9)
]
interface IWICBitmapCodecProgressNotification : stdole.IUnknown
{
	//typedef[unique] long __stdcall (*PFNProgressNotification)(
	//	LPVOID pvData,
	//	ULONG uFrameNum,
	//	WICProgressOperation operation,
	//	double dblProgress
	//	);

	long RegisterProgressNotification(
		[in] LONG pfnProgressNotification,
		[in] LPVOID pvData,
		[in] DWORD dwProgressFlags /* WICProgressOperation | WICProgressNotification */
		);
};


/*=========================================================================*\
IWICComponentInfo
\*=========================================================================*/

[
	odl,
	uuid(23BC3F0A-698B-4357-886B-F24D50671334)
]
interface IWICComponentInfo : stdole.IUnknown
{
	long GetComponentType(
		[out] WICComponentType *pType
		);

	long GetCLSID(
		[out] UUID *pclsid
		);

	long GetSigningStatus(
		[out] DWORD * pStatus   // WICComponentSigning flags
		);

	long GetAuthor(
		[in] UINT cchAuthor,
		[in] LONG wzAuthhor, //WCHAR *wzAuthor,
		[out] UINT *pcchActual
		);

	long GetVendorGUID(
		[out] UUID *pguidVendor
		);

	long GetVersion(
		[in] UINT cchVersion,
		[in] LONG wzVersion, //WCHAR *wzVersion,
		[out]  UINT *pcchActual
		);

	long GetSpecVersion(
		[in] UINT cchSpecVersion,
		[in] LONG wzSpecVersion, //WCHAR *wzSpecVersion,
		[out] UINT *pcchActual
		);

	long GetFriendlyName(
		[in] UINT cchFriendlyName,
		[in] LONG wzFriendlyName, //WCHAR *wzFriendlyName,
		[out] UINT *pcchActual
		);
};


/*=========================================================================*\
IWICFormatConverterInfo
\*=========================================================================*/

[
	odl,
	uuid(9F34FB65-13F4-4f15-BC57-3726B5E53D9F)
]
interface IWICFormatConverterInfo : IWICComponentInfo
{
	long GetPixelFormats(
		[in] UINT cFormats,
		[in, out] WICPixelFormatGUID * pPixelFormatGUIDs,
		[out] UINT *pcActual);

	long CreateInstance(
		[out] IWICFormatConverter **ppIConverter);
}


/*=========================================================================*\
IWICBitmapCodecInfo
\*=========================================================================*/

[
	odl,
	uuid(E87A44C4-B76E-4c47-8B09-298EB12A2714)
]
interface IWICBitmapCodecInfo : IWICComponentInfo
{
	long GetContainerFormat(
		[out] UUID *pguidContainerFormat
		);

	long GetPixelFormats(
		[in] UINT cFormats,
		[in, out] UUID *pguidPixelFormats,
		[out] UINT *pcActual);

	long GetColorManagementVersion(
		[in] UINT cchColorManagementVersion,
		[in] LONG wzColorManagementVersion, //WCHAR *
		[out] UINT *pcchActual
		);

	long GetDeviceManufacturer(
		[in] UINT cchDeviceManufacturer,
		[in] LONG wzDeviceManufacturer, //WCHAR *
		[out] UINT *pcchActual
		);

	long GetDeviceModels(
		[in] UINT cchDeviceModels,
		[in] LONG wzDeviceModels, //WCHAR *
		[out] UINT *pcchActual
		);

	long GetMimeTypes(
		[in] UINT cchMimeTypes,
		[in] LONG wzMimeTypes, //WCHAR *
		[out] UINT *pcchActual
		);

	long GetFileExtensions(
		[in] UINT cchFileExtensions,
		[in] LONG wzFileExtensions, //WCHAR *
		[out] UINT *pcchActual
		);

	long DoesSupportAnimation(
		[out] BOOL *pfSupportAnimation
		);

	long DoesSupportChromakey(
		[out] BOOL *pfSupportChromakey
		);

	long DoesSupportLossless(
		[out] BOOL *pfSupportLossless
		);

	long DoesSupportMultiframe(
		[out] BOOL *pfSupportMultiframe
		);

	long MatchesMimeType(
		[in] LONG wzMimeType,
		[out] BOOL *pfMatches
		);
};


/*=========================================================================*\
IWICBitmapEncoderInfo
\*=========================================================================*/

[
	odl,
	uuid(94C9B4EE-A09F-4f92-8A1E-4A9BCE7E76FB)
]
interface IWICBitmapEncoderInfo : IWICBitmapCodecInfo
{
	long CreateInstance(
		[out] IWICBitmapEncoder **ppIBitmapEncoder
		);
};


/*=========================================================================*\
IWICBitmapDecoderInfo
\*=========================================================================*/

[
	odl,
	uuid(D8CD007F-D08F-4191-9BFC-236EA7F0E4B5)
]
interface IWICBitmapDecoderInfo : IWICBitmapCodecInfo
{

	long GetPatterns(
		[in] UINT cbSizePatterns,
		[out] WICBitmapPattern *pPatterns,
		[out] UINT *pcPatterns,
		[out] UINT *pcbPatternsActual
		);

	//[call_as(GetPatterns)]
	//long Remote_GetPatterns(
	//	[out, size_is(, *pcPatterns)] WICBitmapPattern **ppPatterns,
	//	[out] UINT *pcPatterns
	//	);

	long MatchesPattern(
		[in] IStream *pIStream,
		[out] BOOL *pfMatches
		);

	long CreateInstance(
		[out] IWICBitmapDecoder **ppIBitmapDecoder
		);
};


/*=========================================================================*\
IWICPixelFormatInfo
\*=========================================================================*/

[
	odl,
	uuid(E8EDA601-3D48-431a-AB44-69059BE88BBE)
]
interface IWICPixelFormatInfo : IWICComponentInfo
{
	long GetFormatGUID(
		[in, out] UUID* pFormat //[out]
		);

	long GetColorContext(
		[out] IWICColorContext **ppIColorContext
		);

	long GetBitsPerPixel(
		[out] UINT *puiBitsPerPixel
		);

	long GetChannelCount(
		[out] UINT *puiChannelCount
		);

	long GetChannelMask(
		[in] UINT uiChannelIndex,
		[in] UINT cbMaskBuffer,
		[in] LONG* pbMaskBuffer, //BYTE *
		[out] UINT *pcbActual
		);
}


/*=========================================================================*\
IWICPixelFormatInfo2
\*=========================================================================*/

[
	odl,
	uuid(A9DB33A2-AF5F-43C7-B679-74F5984B5AA4)
]
interface IWICPixelFormatInfo2 : IWICPixelFormatInfo
{
	long SupportsTransparency(
		[out] BOOL *pfSupportsTransparency
		);

	long GetNumericRepresentation(
		[out] WICPixelFormatNumericRepresentation *pNumericRepresentation
		);
}


/*=========================================================================*\
IWICImagingFactory
\*=========================================================================*/

[
	odl,
	uuid(ec5ec8a9-c395-4314-9c77-54d7a935ff70)
]
interface IWICImagingFactory : stdole.IUnknown
{
	HRESULT CreateDecoderFromFilename(
		[in] LONG wzFilename,
		[in] UUID *pguidVendor,
		[in]  DWORD dwDesiredAccess,
		[in] WICDecodeOptions metadataOptions,
		[out, retval] IWICBitmapDecoder **ppIDecoder
		);

	HRESULT CreateDecoderFromStream(
		[in] IStream *pIStream,
		[in] UUID *pguidVendor,
		[in] WICDecodeOptions metadataOptions,
		[out, retval] IWICBitmapDecoder **ppIDecoder
		);

	HRESULT CreateDecoderFromFileHandle(
		[in] ULONG_PTR hFile,
		[in] UUID *pguidVendor,
		[in] WICDecodeOptions metadataOptions,
		[out, retval] IWICBitmapDecoder **ppIDecoder
		);

	long CreateComponentInfo(
		[in] UUID* clsidComponent,
		[out] IWICComponentInfo **ppIInfo
		);

	HRESULT CreateDecoder(
		[in] UUID* guidContainerFormat,
		[in] UUID *pguidVendor,
		[out, retval] IWICBitmapDecoder **ppIDecoder
		);

	HRESULT CreateEncoder(
		[in] UUID* guidContainerFormat,
		[in] UUID *pguidVendor,
		[out, retval] IWICBitmapEncoder **ppIEncoder
		);

	long CreatePalette(
		[out] IWICPalette **ppIPalette
		);

	HRESULT CreateFormatConverter(
		[out, retval] IWICFormatConverter **ppIFormatConverter
		);

	long CreateBitmapScaler(
		[out] IWICBitmapScaler **ppIBitmapScaler
		);

	long CreateBitmapClipper(
		[out] IWICBitmapClipper **ppIBitmapClipper
		);

	long CreateBitmapFlipRotator(
		[out] IWICBitmapFlipRotator **ppIBitmapFlipRotator
		);

	long CreateStream(
		[out] IWICStream **ppIWICStream
		);

	long CreateColorContext(
		[out] IWICColorContext **ppIWICColorContext
		);

	long CreateColorTransformer(
		[out] IWICColorTransform **ppIWICColorTransform
		);

	/* Bitmap creation */

	long CreateBitmap(
		[in] UINT uiWidth,
		[in] UINT uiHeight,
		[in] REFWICPixelFormatGUID pixelFormat,
		[in] WICBitmapCreateCacheOption option,
		[out] IWICBitmap **ppIBitmap
		);

	long CreateBitmapFromSource(
		[in] IWICBitmapSource *pIBitmapSource,
		[in] WICBitmapCreateCacheOption option,
		[out] IWICBitmap **ppIBitmap
		);

	long CreateBitmapFromSourceRect(
		[in] IWICBitmapSource *pIBitmapSource,
		[in] UINT x,
		[in] UINT y,
		[in] UINT width,
		[in] UINT height,
		[out] IWICBitmap **ppIBitmap
		);

	long CreateBitmapFromMemory(
		[in] UINT uiWidth,
		[in] UINT uiHeight,
		[in] REFWICPixelFormatGUID pixelFormat,
		[in] UINT cbStride,
		[in] UINT cbBufferSize,
		[in] LONG pbBuffer, //BYTE *
		[out] IWICBitmap **ppIBitmap
		);

	long CreateBitmapFromHBITMAP(
		[in] HBITMAP hBitmap,
		[in] HPALETTE hPalette,
		[in] WICBitmapAlphaChannelOption options,
		[out] IWICBitmap **ppIBitmap
		);

	long CreateBitmapFromHICON(
		[in] HICON hIcon,
		[out] IWICBitmap **ppIBitmap
		);

	long CreateComponentEnumerator(
		[in] DWORD componentTypes,           /* WICComponentType */
		[in] DWORD options,                  /* WICComponentEnumerateOptions */
		[out] IEnumUnknown **ppIEnumUnknown
		);

	long CreateFastMetadataEncoderFromDecoder(
		[in] IWICBitmapDecoder *pIDecoder,
		[out] IWICFastMetadataEncoder **ppIFastEncoder
		);

	long CreateFastMetadataEncoderFromFrameDecode(
		[in] IWICBitmapFrameDecode *pIFrameDecoder,
		[out] IWICFastMetadataEncoder **ppIFastEncoder
		);

	long CreateQueryWriter(
		[in] UUID* guidMetadataFormat,
		[in] UUID *pguidVendor,
		[out] IWICMetadataQueryWriter **ppIQueryWriter
		);

	long CreateQueryWriterFromReader(
		[in] IWICMetadataQueryReader *pIQueryReader,
		[in] UUID *pguidVendor,
		[out] IWICMetadataQueryWriter **ppIQueryWriter
		);
};

[
	odl,
	uuid(7B816B45-1996-4476-B132-DE9E247C8AF0)
]
interface IWICImagingFactory2 : IWICImagingFactory
{
	long CreateImageEncoder(
		[in] ID2D1Device* pD2DDevice,  
		[out] IWICImageEncoder **ppWICImageEncoder
		);
};



/*=========================================================================*\
WICTiffCompressionOption
\*=========================================================================*/

typedef enum WICTiffCompressionOption
{
	WICTiffCompressionDontCare = 0x00000000,
	WICTiffCompressionNone = 0x00000001,
	WICTiffCompressionCCITT3 = 0x00000002,
	WICTiffCompressionCCITT4 = 0x00000003,
	WICTiffCompressionLZW = 0x00000004,
	WICTiffCompressionRLE = 0x00000005,
	WICTiffCompressionZIP = 0x00000006,
	WICTiffCompressionLZWHDifferencing = 0x00000007,
	WICTIFFCOMPRESSIONOPTION_FORCE_DWORD = CODEC_FORCE_DWORD
} WICTiffCompressionOption;

/*=========================================================================*\
WICJpegYCrCbSubsamplingOption
\*=========================================================================*/

typedef enum WICJpegYCrCbSubsamplingOption
{
	WICJpegYCrCbSubsamplingDefault = 0x00000000,
	WICJpegYCrCbSubsampling420 = 0x00000001,
	WICJpegYCrCbSubsampling422 = 0x00000002,
	WICJpegYCrCbSubsampling444 = 0x00000003,
	WICJpegYCrCbSubsampling440 = 0x00000004,
	WICJPEGYCRCBSUBSAMPLING_FORCE_DWORD = CODEC_FORCE_DWORD
} WICJpegYCrCbSubsamplingOption;


/*=========================================================================*\
WICPngFilterOption
\*=========================================================================*/

typedef enum WICPngFilterOption
{
	WICPngFilterUnspecified = 0x00000000,
	WICPngFilterNone = 0x00000001,
	WICPngFilterSub = 0x00000002,
	WICPngFilterUp = 0x00000003,
	WICPngFilterAverage = 0x00000004,
	WICPngFilterPaeth = 0x00000005,
	WICPngFilterAdaptive = 0x00000006,
	WICPNGFILTEROPTION_FORCE_DWORD = CODEC_FORCE_DWORD
} WICPngFilterOption;


/*=========================================================================*\
Raw Structures and Interfaces
\*=========================================================================*/


/*=========================================================================*\
WICNamedWhitePoint
\*=========================================================================*/

typedef enum WICNamedWhitePoint
{
	WICWhitePointDefault = 0x00000001,
	WICWhitePointDaylight = 0x00000002,
	WICWhitePointCloudy = 0x00000004,
	WICWhitePointShade = 0x00000008,
	WICWhitePointTungsten = 0x00000010,
	WICWhitePointFluorescent = 0x00000020,
	WICWhitePointFlash = 0x00000040,
	WICWhitePointUnderwater = 0x00000080,
	WICWhitePointCustom = 0x00000100,   // when using a picture (grey-card) as white-balance
	WICWhitePointAutoWhiteBalance = 0x00000200,
	WICWhitePointAsShot = 0x00000001,  //WICWhitePointDefault,
	WICNAMEDWHITEPOINT_FORCE_DWORD = CODEC_FORCE_DWORD
} WICNamedWhitePoint;


/*=========================================================================*\
WICRawCapabilities
\*=========================================================================*/

typedef enum WICRawCapabilities
{
	WICRawCapabilityNotSupported = 0x00000000,
	WICRawCapabilityGetSupported = 0x00000001,
	WICRawCapabilityFullySupported = 0x00000002,    // Get & Set supported
	WICRAWCAPABILITIES_FORCE_DWORD = CODEC_FORCE_DWORD
} WICRawCapabilities;


/*=========================================================================*\
WICRawRotationCapabilities
\*=========================================================================*/

typedef enum WICRawRotationCapabilities
{
	WICRawRotationCapabilityNotSupported = 0x00000000,
	WICRawRotationCapabilityGetSupported = 0x00000001,
	WICRawRotationCapabilityNinetyDegreesSupported = 0x00000002,    // Get & Set supported.  Only multiple of 90 degree angles supported.
	WICRawRotationCapabilityFullySupported = 0x00000003,    // Get & Set supported.  Any rotation angle supported.
	WICRAWROTATIONCAPABILITIES_FORCE_DWORD = CODEC_FORCE_DWORD
} WICRawRotationCapabilities;


/*=========================================================================*\
WICRawCapabilitesInfo
\*=========================================================================*/

typedef struct WICRawCapabilitiesInfo
{
	UINT                        cbSize;
	UINT                        CodecMajorVersion;
	UINT                        CodecMinorVersion;
	WICRawCapabilities          ExposureCompensationSupport;
	WICRawCapabilities          ContrastSupport;
	WICRawCapabilities          RGBWhitePointSupport;
	WICRawCapabilities          NamedWhitePointSupport;
	UINT                        NamedWhitePointSupportMask;
	WICRawCapabilities          KelvinWhitePointSupport;
	WICRawCapabilities          GammaSupport;
	WICRawCapabilities          TintSupport;
	WICRawCapabilities          SaturationSupport;
	WICRawCapabilities          SharpnessSupport;
	WICRawCapabilities          NoiseReductionSupport;
	WICRawCapabilities          DestinationColorProfileSupport;
	WICRawCapabilities          ToneCurveSupport;
	WICRawRotationCapabilities  RotationSupport;
	WICRawCapabilities          RenderModeSupport;
} WICRawCapabilitiesInfo;


/*=========================================================================*\
WICRawParameterSet
\*=========================================================================*/

typedef enum WICRawParameterSet
{
	WICAsShotParameterSet = 0x00000001,
	WICUserAdjustedParameterSet = 0x00000002,
	WICAutoAdjustedParameterSet = 0x00000003,
	WICRAWPARAMETERSET_FORCE_DWORD = CODEC_FORCE_DWORD
} WICRawParameterSet;


/*=========================================================================*\
WICRawRenderMode
\*=========================================================================*/

typedef enum WICRawRenderMode
{
	WICRawRenderModeDraft = 0x00000001,   // Favor speed over quality
	WICRawRenderModeNormal = 0x00000002,   // Balance speed with quality
	WICRawRenderModeBestQuality = 0x00000003,   // Favor quality over speed
	WICRAWRENDERMODE_FORCE_DWORD = CODEC_FORCE_DWORD
} WICRawRenderMode;


/*=========================================================================*\
WICRawToneCurvePoint
\*=========================================================================*/

typedef struct WICRawToneCurvePoint
{
	double  Input;
	double  Output;
} WICRawToneCurvePoint;


/*=========================================================================*\
WICRawToneCurve
\*=========================================================================*/

typedef struct WICRawToneCurve
{
	UINT                    cPoints;
	WICRawToneCurvePoint    aPoints[1];
} WICRawToneCurve;


/*=========================================================================*\
IWICDevelopRawNotificationCallback
\*=========================================================================*/

typedef enum WICRawChangeNotification 
{
	WICRawChangeNotification_ExposureCompensation       = 0x00000001,
	WICRawChangeNotification_NamedWhitePoint            = 0x00000002,
	WICRawChangeNotification_KelvinWhitePoint           = 0x00000004,
	WICRawChangeNotification_RGBWhitePoint              = 0x00000008,
	WICRawChangeNotification_Contrast                   = 0x00000010,
	WICRawChangeNotification_Gamma                      = 0x00000020,
	WICRawChangeNotification_Sharpness                  = 0x00000040,
	WICRawChangeNotification_Saturation                 = 0x00000080,
	WICRawChangeNotification_Tint                       = 0x00000100,
	WICRawChangeNotification_NoiseReduction             = 0x00000200,
	WICRawChangeNotification_DestinationColorContext    = 0x00000400,
	WICRawChangeNotification_ToneCurve                  = 0x00000800,
	WICRawChangeNotification_Rotation                   = 0x00001000,
	WICRawChangeNotification_RenderMode                 = 0x00002000
} WICRawChangeNotification;
[
	odl,
	uuid(95c75a6e-3e8c-4ec2-85a8-aebcc551e59b)
]
interface IWICDevelopRawNotificationCallback : stdole.IUnknown
{
	// Called when one of the parameters in IWICDevelopRaw gets changed or updated.
	// Notification mask is a bitmask constructed from the WICRawChangeNotification_*
	// values to specify which parameter(s) changed.  Return S_OK if the notification
	// is handled, or a descriptive error if not.

	HRESULT Notify([in] UINT NotificationMask);
}


/*=========================================================================*\
IWICDevelopRaw -  Raw Develop
\*=========================================================================*/

[
	odl,
	uuid(fbec5e44-f7be-4b65-b7f8-c0c81fef026d)
]
interface IWICDevelopRaw : IWICBitmapFrameDecode
{
	// Return the set of supported capabilities for this raw file

	long QueryRawCapabilitiesInfo(
		[in, out] WICRawCapabilitiesInfo *pInfo
		);

	//[call_as(QueryRawCapabilitiesInfo)]
	//long Remote_QueryRawCapabilitiesInfo(
	//	[in, out] WICRawCapabilitiesInfo *pInfo
	//	);


	// Load the desired parameter set as the current
	// working parameter set

	long LoadParameterSet(
		[in] WICRawParameterSet ParameterSet
		);

	// Get an IPropertyBag2 that contains the current
	// parameters to hand off to the encoder for saving

	long GetCurrentParameterSet(
		[out] IPropertyBag2 **ppCurrentParameterSet
		);

	// Set/Get the exposure compensation desired for final output
	// Valid range for ev is -5.0 to +5.0 (stops)

	long SetExposureCompensation(
		[in] double ev
		);

	long GetExposureCompensation(
		[out] double *pEV
		);

	// Get/Set the white point as an RGB value.

	long SetWhitePointRGB(
		[in] UINT Red,
		[in] UINT Green,
		[in] UINT Blue
		);

	long GetWhitePointRGB(
		[out] UINT *pRed,
		[out] UINT *pGreen,
		[out] UINT *pBlue
		);

	// Set/Get white point as a preset named value

	long SetNamedWhitePoint(
		[in] WICNamedWhitePoint WhitePoint
		);

	long GetNamedWhitePoint(
		[out] WICNamedWhitePoint *pWhitePoint
		);

	// Set the white point in kelvin
	// Defined max range is 1,500 - 30,000

	long SetWhitePointKelvin(
		[in] UINT WhitePointKelvin
		);

	long GetWhitePointKelvin(
		[out] UINT *pWhitePointKelvin
		);

	long GetKelvinRangeInfo(
		[out] UINT *pMinKelvinTemp,
		[out] UINT *pMaxKelvinTemp,
		[out] UINT *pKelvinTempStepValue
		);

	// Set/Get the amount of contrast to apply to the final output
	// Valid range for Contrast is -1.0 to 1.0.

	long SetContrast(
		[in] double Contrast
		);

	long GetContrast(
		[out] double *pContrast
		);

	// Set/Get the gamma to use for output pixels
	// Valid range for Gamma is 0.0 to 5.0, with 1.0 being
	// the default.

	long SetGamma(
		[in] double Gamma
		);

	long GetGamma(
		[out] double *pGamma
		);

	// Set/Get the sharpness of the final output.
	// Valid range is 0.0 to 1.0.  0.0 is no sharpening
	// applied to the image at all, 1.0 is full/most allowed sharpening

	long SetSharpness(
		[in] double Sharpness
		);

	long GetSharpness(
		[out] double *pSharpness
		);

	// Set/Get saturation of the final output
	// Valid range is -1.0 to 1.0.  -1.0 is full
	// de-saturation, 1.0 is full saturation.

	long SetSaturation(
		[in] double Saturation
		);

	long GetSaturation(
		[out] double *pSaturation
		);

	// Set/Get the tint of the final output
	// Valid range is -1.0 to +1.0.  Scale is defined as orthogonal to color
	// temperature.  (Green/Magenta bias)

	long SetTint(
		[in] double Tint
		);

	long GetTint(
		[out] double *pTint
		);

	// Set/Get noise reduction of the final output
	// Valid range is 0.0 to 1.0.  0.0 is no noise
	// reduction applied.  1.0 is full/most allowed noise
	// reduction applied.

	long SetNoiseReduction(
		[in] double NoiseReduction
		);

	long GetNoiseReduction(
		[out] double *pNoiseReduction
		);

	// Set desired color profile of final output.  You can
	// get the color context via IWICBitmapFrameDecode::GetColorContext()

	long SetDestinationColorContext(
		[in] IWICColorContext *pColorContext
		);

	// Set/Get the tone curve to use for final output.
	// Assume linear interpolation between points.

	long SetToneCurve(
		[in] UINT cbToneCurveSize,
		[in] WICRawToneCurve *pToneCurve
		);

	//[call_as(SetToneCurve)]
	//long Remote_SetToneCurve(
	//	[in] UINT cPoints,
	//	[in, size_is(cPoints)] const WICRawToneCurvePoint *aPoints
	//	);

	// Get the tone curve currently in use.  To get the required
	// size of the buffer, pass in NULL for the pToneCurve parameter
	// and *pcbActualToneCurveBufferSize will contain the required size upon
	// exit.

	long GetToneCurve(
		[in] UINT cbToneCurveBufferSize,
		[out] WICRawToneCurve *pToneCurve,
		[out] UINT *pcbActualToneCurveBufferSize
		);

	//[call_as(GetToneCurve)]
	//long Remote_GetToneCurve(
	//	[out] UINT * pcPoints,
	//	[out, size_is(, *pcPoints)] WICRawToneCurvePoint **paPoints
	//	);

	// Set the desired rotation angle of the output of CopyPixels.
	// The parameter pRotation is in units of degrees and the sign is positive
	// clockwise. So a rotation of 90.0 would be a rotation of 90 degrees
	// clockwise (data along the left side of the sensor would be rendered on
	// the top rows of the output image.

	long SetRotation([in] double Rotation);

	// Gets the current rotation angle used for CopyPixels.

	long GetRotation([out] double *pRotation);

	// Set the desired render mode for CopyPixels

	long SetRenderMode([in] WICRawRenderMode RenderMode);

	// Get the current render mode used for CopyPixels

	long GetRenderMode([out] WICRawRenderMode *pRenderMode);

	// Set the callback function to call when parameters change

	long SetNotificationCallback([in] IWICDevelopRawNotificationCallback *pCallback);
};

/*=========================================================================*\
WICDdsDimension - used in WICDdsParameters.
\*=========================================================================*/

typedef enum WICDdsDimension
{
	WICDdsTexture1D = 0x00000000,
	WICDdsTexture2D = 0x00000001,
	WICDdsTexture3D = 0x00000002,
	WICDdsTextureCube = 0x00000003,
	WICDDSTEXTURE_FORCE_DWORD = CODEC_FORCE_DWORD
} WICDdsDimension;

/*=========================================================================*\
WICDdsAlphaMode - used in WICDdsParameters.
Subset matches enum DDS_ALPHA_MODE.
\*=========================================================================*/

typedef enum WICDdsAlphaMode
{
	WICDdsAlphaModeUnknown = 0x00000000,
	WICDdsAlphaModeStraight = 0x00000001,
	WICDdsAlphaModePremultiplied = 0x00000002,
	WICDdsAlphaModeOpaque = 0x00000003,
	WICDdsAlphaModeCustom = 0x00000004,
	WICDDSALPHAMODE_FORCE_DWORD = CODEC_FORCE_DWORD
} WICDdsAlphaMode;

/*=========================================================================*\
WICDdsParameters - used in IWICDdsDecoder
\*=========================================================================*/


typedef struct WICDdsParameters
{
	UINT Width;
	UINT Height;
	UINT Depth;
	UINT MipLevels;
	UINT ArraySize;
	DXGI_FORMAT DxgiFormat;
	WICDdsDimension Dimension;
	WICDdsAlphaMode AlphaMode;
} WICDdsParameters;

/*=========================================================================*\
IWICDdsDecoder
\*=========================================================================*/

[
	odl,
	uuid(409cd537-8532-40cb-9774-e2feb2df4e9c)
]
interface IWICDdsDecoder : stdole.IUnknown
{
	long GetParameters(
		[out] WICDdsParameters * pParameters
		);

	HRESULT GetFrame(
		[in] UINT arrayIndex,
		[in] UINT mipLevel,
		[in] UINT sliceIndex,
		[out, retval] IWICBitmapFrameDecode **ppIBitmapFrame
		);
};

/*=========================================================================*\
IWICDdsEncoder
\*=========================================================================*/

[
	odl,
	uuid(5cacdb4c-407e-41b3-b936-d0f010cd6732)
]
interface IWICDdsEncoder : stdole.IUnknown
{
	long SetParameters(
		[in] WICDdsParameters * pParameters
		);

	long GetParameters(
		[out] WICDdsParameters * pParameters
		);

	long CreateNewFrame(
		[out] IWICBitmapFrameEncode **ppIFrameEncode,
		[out] UINT * pArrayIndex,
		[out] UINT * pMipLevel,
		[out] UINT * pSliceIndex
		);
};

/*=========================================================================*\
WICDdsFormatInfo - used in IWICDdsFrameDecode
\*=========================================================================*/


typedef struct WICDdsFormatInfo
{
	DXGI_FORMAT DxgiFormat;
	UINT BytesPerBlock;
	UINT BlockWidth;
	UINT BlockHeight;
} WICDdsFormatInfo;

/*=========================================================================*\
IWICDdsFrameDecode - raw DDS data access
\*=========================================================================*/

[
	odl,
	uuid(3d4c0c61-18a4-41e4-bd80-481a4fc9f464)
]
interface IWICDdsFrameDecode : stdole.IUnknown
{
	long GetSizeInBlocks(
		[out] UINT *pWidthInBlocks,
		[out] UINT *pHeightInBlocks
		);

	long GetFormatInfo(
		[out] WICDdsFormatInfo *pFormatInfo
		);

	long CopyBlocks(
		[in] LONG prcBoundsInBlocks, //WICRect *prcBoundsInBlocks,
		[in] UINT cbStride,
		[in] UINT cbBufferSize,
		[in] LONG pbBuffer //[out] BYTE *
		);
};

/*=========================================================================*\
IWICJpegFrameDecode
\*=========================================================================*/
typedef struct DXGI_JPEG_AC_HUFFMAN_TABLE {
	BYTE CodeCounts[16];
	BYTE CodeValues[162];
} DXGI_JPEG_AC_HUFFMAN_TABLE;

typedef struct DXGI_JPEG_DC_HUFFMAN_TABLE {
	BYTE CodeCounts[12];
	BYTE CodeValues[12];
} DXGI_JPEG_DC_HUFFMAN_TABLE;

typedef struct DXGI_JPEG_QUANTIZATION_TABLE {
	BYTE Elements[64];
} DXGI_JPEG_QUANTIZATION_TABLE;

[
	odl,
	uuid(8939F66E-C46A-4c21-A9D1-98B327CE1679)
]
interface IWICJpegFrameDecode : stdole.IUnknown
{
	long DoesSupportIndexing(
		[out] BOOL *pfIndexingSupported
		);

	long SetIndexing(
		[in] WICJpegIndexingOptions options,
		[in] UINT horizontalIntervalSize
		);

	long ClearIndexing();

	long GetAcHuffmanTable(
		[in] UINT scanIndex,
		[in] UINT tableIndex,
		[out] DXGI_JPEG_AC_HUFFMAN_TABLE* pAcHuffmanTable
		);

	long GetDcHuffmanTable(
		[in] UINT scanIndex,
		[in] UINT tableIndex,
		[out] DXGI_JPEG_DC_HUFFMAN_TABLE* pDcHuffmanTable
		);

	long GetQuantizationTable(
		[in] UINT scanIndex,
		[in] UINT tableIndex,
		[out] DXGI_JPEG_QUANTIZATION_TABLE *pQuantizationTable
		);

	long GetFrameHeader(
		[out] WICJpegFrameHeader *pFrameHeader
		);

	long GetScanHeader(
		[in] UINT scanIndex,
		[out] WICJpegScanHeader *pScanHeader
		);

	long CopyScan(
		[in] UINT scanIndex,
		[in] UINT scanOffset,
		[in] UINT cbScanData,
		[in] LONG pbScanData, //[out] BYTE *pbScanData,
		[out] UINT *pcbScanDataActual
		);

	long CopyMinimalStream(
		[in] UINT streamOffset,
		[in] UINT cbStreamData,
		[in] LONG pbStreamData, //[out] BYTE *pbStreamData,
		[out] UINT *pcbStreamDataActual
		);
};

/*=========================================================================*\
IWICJpegFrameEncode
\*=========================================================================*/

[
	odl,
	uuid(2F0C601F-D2C6-468C-ABFA-49495D983ED1)
]
interface IWICJpegFrameEncode : stdole.IUnknown
{
	long GetAcHuffmanTable(
		[in] UINT scanIndex,
		[in]  UINT tableIndex,
		[out] DXGI_JPEG_AC_HUFFMAN_TABLE* pAcHuffmanTable
		);

	long GetDcHuffmanTable(
		[in] UINT scanIndex,
		[in] UINT tableIndex,
		[out] DXGI_JPEG_DC_HUFFMAN_TABLE* pDcHuffmanTable
		);

	long GetQuantizationTable(
		[in] UINT scanIndex,
		[in] UINT tableIndex,
		[out] DXGI_JPEG_QUANTIZATION_TABLE *pQuantizationTable
		);

	long WriteScan(
		[in] UINT cbScanData,
		[in] LONG pbScanData //BYTE *
		);
};

/*

wincodecsdk.idl Definitions

*/

interface IWICEnumMetadataItem;
interface IWICMetadataBlockReader;
interface IWICMetadataBlockWriter;
interface IWICMetadataReader;
interface IWICMetadataWriter;
interface IWICPersistStream;
interface IWICMetadataHandlerInfo;
interface IWICComponentFactory;
interface IWICStreamProvider;


/*=========================================================================*\
WICMetadataCreationOptions
\*=========================================================================*/

typedef enum WICMetadataCreationOptions
{
	WICMetadataCreationDefault = 0x00000000,
	WICMetadataCreationAllowUnknown = 0x00000000, //WICMetadataCreationDefault,
	WICMetadataCreationFailUnknown = 0x00010000,
	WICMetadataCreationMask = 0xFFFF0000
} WICMetadataCreationOptions;


/*=========================================================================*\
WICPersistOptions
\*=========================================================================*/

typedef enum WICPersistOptions
{
	WICPersistOptionDefault = 0x00000000,
	WICPersistOptionLittleEndian = 0x00000000,
	WICPersistOptionBigEndian = 0x00000001,
	WICPersistOptionStrictFormat = 0x00000002,
	WICPersistOptionNoCacheStream = 0x00000004,
	WICPersistOptionPreferUTF8 = 0x00000008,
	WICPersistOptionMask = 0x0000FFFF
} WICPersistOptions;


/*=========================================================================*\
IWICMetadataBlockReader
\*=========================================================================*/

[
	odl,
	uuid(FEAA2A8D-B3F3-43E4-B25C-D1DE990A1AE1)
]
interface IWICMetadataBlockReader : stdole.IUnknown
{
	long GetContainerFormat(
		[out] UUID *pguidContainerFormat
		);

	long GetCount(
		[out] UINT *pcCount
		);

	long GetReaderByIndex(
		[in] UINT nIndex,
		[out] IWICMetadataReader **ppIMetadataReader
		);

	long GetEnumerator(
		[out] IEnumUnknown **ppIEnumMetadata
		);
};


/*=========================================================================*\
IWICMetadataBlockWriter
\*=========================================================================*/

[
	odl,
	uuid(08FB9676-B444-41E8-8DBE-6A53A542BFF1)
]
interface IWICMetadataBlockWriter : IWICMetadataBlockReader
{
	long InitializeFromBlockReader(
		[in] IWICMetadataBlockReader *pIMDBlockReader
		);

	long GetWriterByIndex(
		[in] UINT nIndex,
		[out] IWICMetadataWriter **ppIMetadataWriter
		);

	long AddWriter(
		[in] IWICMetadataWriter *pIMetadataWriter
		);

	long SetWriterByIndex(
		[in] UINT nIndex,
		[in] IWICMetadataWriter *pIMetadataWriter
		);

	long RemoveWriterByIndex(
		[in] UINT nIndex);
};


/*=========================================================================*\
IWICMetadataReader
\*=========================================================================*/

[
	odl,
	uuid(9204FE99-D8FC-4FD5-A001-9536B067A899)
]
interface IWICMetadataReader : stdole.IUnknown
{
	long GetMetadataFormat(
		[out] UUID *pguidMetadataFormat
		);

	long GetMetadataHandlerInfo(
		[out] IWICMetadataHandlerInfo **ppIHandler
		);

	long GetCount(
		[out] UINT *pcCount
		);

	long GetValueByIndex(
		[in] UINT nIndex,
		[in, out] VARIANT *pvarSchema,
		[in, out] VARIANT *pvarId,
		[in, out] VARIANT *pvarValue
		);

	long GetValue(
		[in] VARIANT *pvarSchema,
		[in] VARIANT *pvarId,
		[in, out] VARIANT *pvarValue
		);

	long GetEnumerator(
		[out] IWICEnumMetadataItem **ppIEnumMetadata
		);
};


/*=========================================================================*\
IWICMetadataWriter
\*=========================================================================*/

[
	odl,
	uuid(F7836E16-3BE0-470B-86BB-160D0AECD7DE)
]
interface IWICMetadataWriter : IWICMetadataReader
{
	long SetValue(
		[in] VARIANT *pvarSchema,
		[in] VARIANT *pvarId,
		[in] VARIANT *pvarValue
		);

	long SetValueByIndex(
		[in] UINT nIndex,
		[in] VARIANT *pvarSchema,
		[in] VARIANT *pvarId,
		[in] VARIANT *pvarValue
		);

	long RemoveValue(
		[in] VARIANT *pvarSchema,
		[in] VARIANT *pvarId
		);

	long RemoveValueByIndex(
		[in] UINT nIndex
		);
};


/*=========================================================================*\
IWICStreamProvider
\*=========================================================================*/

[
	odl,
	uuid(449494BC-B468-4927-96D7-BA90D31AB505)
]
interface IWICStreamProvider : stdole.IUnknown
{
	long GetStream(
		[out] IStream **ppIStream
		);

	long GetPersistOptions(
		[out] DWORD *pdwPersistOptions
		);

	long GetPreferredVendorGUID(
		[out] UUID *pguidPreferredVendor
		);

	long RefreshStream(
		);
};


/*=========================================================================*\
IWICPersistStream
\*=========================================================================*/

[
	odl,
	uuid(00675040-6908-45F8-86A3-49C7DFD6D9AD)
]
interface IWICPersistStream : IPersistStream
{
	long LoadEx(
		[in] IStream *pIStream,
		[in] UUID *pguidPreferredVendor,
		[in] DWORD dwPersistOptions
		);

	long SaveEx(
		[in] IStream *pIStream,
		[in] DWORD dwPersistOptions,
		[in] BOOL fClearDirty
		);
};


/*=========================================================================*\
IWICMetadataHandlerInfo
\*=========================================================================*/

[
	odl,
	uuid(ABA958BF-C672-44D1-8D61-CE6DF2E682C2)
]
interface IWICMetadataHandlerInfo : IWICComponentInfo
{
	long GetMetadataFormat(
		[out] UUID *pguidMetadataFormat
		);

	long GetContainerFormats(
		[in] UINT cContainerFormats,
		[in, out] UUID *pguidContainerFormats,
		[out] UINT *pcchActual
		);

	long GetDeviceManufacturer(
		[in] UINT cchDeviceManufacturer,
		[in] LONG wzDeviceManufacturer, //WCHAR *
		[out] UINT *pcchActual
		);

	long GetDeviceModels(
		[in] UINT cchDeviceModels,
		[in] LONG wzDeviceModels, //WCHAR *
		[out] UINT *pcchActual
		);

	long DoesRequireFullStream(
		[out] BOOL *pfRequiresFullStream
		);

	long DoesSupportPadding(
		[out] BOOL *pfSupportsPadding
		);

	long DoesRequireFixedSize(
		[out] BOOL *pfFixedSize
		);
}


/*=========================================================================*\
WICMetadataPattern
\*=========================================================================*/

typedef struct WICMetadataPattern
{
	LARGE_INTEGER Position;
	ULONG Length;
	LONG Pattern; //[size_is(Length)] BYTE *Pattern;
	LONG  Mask; //[size_is(Length)] BYTE *Mask;
	LARGE_INTEGER DataOffset;
} WICMetadataPattern;


/*=========================================================================*\
IWICMetadataReaderInfo
\*=========================================================================*/

[
	odl,
	uuid(EEBF1F5B-07C1-4447-A3AB-22ACAF78A804)
]
interface IWICMetadataReaderInfo : IWICMetadataHandlerInfo
{
	long GetPatterns(
		[in] UUID* guidContainerFormat,
		[in] UINT cbSize,
		[out] WICMetadataPattern *pPattern,
		[out] UINT *pcCount,
		[out] UINT *pcbActual
		);

	//[call_as(GetPatterns)]
	//long Remote_GetPatterns(
	//	[in] REFGUID guidContainerFormat,
	//	[out, size_is(, *pcPatterns)] WICMetadataPattern **ppPatterns,
	//	[out] UINT *pcPatterns
	//	);

	long MatchesPattern(
		[in] UUID* guidContainerFormat,
		[in] IStream *pIStream,
		[out] BOOL *pfMatches
		);

	long CreateInstance(
		[out] IWICMetadataReader **ppIReader);
};


/*=========================================================================*\
WICMetadataHeader
\*=========================================================================*/

typedef struct WICMetadataHeader
{
	LARGE_INTEGER Position;
	LONG Length;
	LONG Header; //[size_is(Length)] BYTE *Header;
	LARGE_INTEGER DataOffset;
} WICMetadataHeader;


/*=========================================================================*\
IWICMetadataWriterInfo
\*=========================================================================*/

[
	odl,
	uuid(B22E3FBA-3925-4323-B5C1-9EBFC430F236)
]
interface IWICMetadataWriterInfo : IWICMetadataHandlerInfo
{
	long GetHeader(
		[in] UUID* guidContainerFormat,
		[in] UINT cbSize,
		[in, out] WICMetadataHeader *pHeader,
		[in, out] UINT *pcbActual);

	//[call_as(GetHeader)]
	//long Remote_GetHeader(
	//	[in] REFGUID guidContainerFormat,
	//	[out] WICMetadataHeader *pHeader
	//	);

	long CreateInstance(
		[out] IWICMetadataWriter **ppIWriter);
};

/*=========================================================================*\
IWICComponentFactory
\*=========================================================================*/

[
	odl,
	uuid(412D0C3A-9650-44FA-AF5B-DD2A06C8E8FB)
]
interface IWICComponentFactory : IWICImagingFactory
{
	long CreateMetadataReader(
		[in] UUID* guidMetadataFormat,
		[in] UUID *pguidVendor, //const GUID
		[in] DWORD dwOptions,  /* WICPersistOptions | WICMetadataCreationOptions */
		[in] IStream *pIStream,
		[out] IWICMetadataReader **ppIReader
		);

	long CreateMetadataReaderFromContainer(
		[in] UUID* guidContainerFormat, //REFGUID
		[in] UUID *pguidVendor, //const GUID
		[in] DWORD dwOptions,   /* WICPersistOptions | WICMetadataCreationOptions */
		[in] IStream *pIStream,
		[out] IWICMetadataReader **ppIReader
		);

	long CreateMetadataWriter(
		[in] UUID* guidMetadataFormat, //REFGUID
		[in] UUID *pguidVendor,
		[in] DWORD dwMetadataOptions,   /* WICMetadataCreationOptions */
		[out] IWICMetadataWriter **ppIWriter
		);

	long CreateMetadataWriterFromReader(
		[in] IWICMetadataReader *pIReader,
		[in] UUID *pguidVendor,
		[out] IWICMetadataWriter **ppIWriter
		);

	long CreateQueryReaderFromBlockReader(
		[in] IWICMetadataBlockReader *pIBlockReader,
		[out] IWICMetadataQueryReader **ppIQueryReader
		);

	long CreateQueryWriterFromBlockWriter(
		[in] IWICMetadataBlockWriter *pIBlockWriter,
		[out] IWICMetadataQueryWriter **ppIQueryWriter
		);

	long CreateEncoderPropertyBag(
		[in] PROPBAG2 *ppropOptions,
		[in] UINT cCount,
		[out] IPropertyBag2 **ppIPropertyBag
		);
};



//[
//	uuid(00000301-a8f2-4877-ba0a-fd2b6645fb94)  /* IWICFormatConverter */
//]
//coclass PSFactoryBuffer { interface IFactoryBuffer; }

[
	helpstring("WIC Imaging Factory"),
	uuid(cacaf262-9370-4615-a13b-9f5539da4c0a)
]
coclass WICImagingFactory { interface IWICImagingFactory; }

[
	helpstring("WIC Imaging Factory 2"),
	uuid(317d06e8-5f24-433d-bdf7-79ce68d8abc2)
]
coclass WICImagingFactory2 { interface IWICImagingFactory2; }

[
	helpstring("WIC BMP Decoder"),
	uuid(6b462062-7cbf-400d-9fdb-813dd10f2778)
]
coclass WICBmpDecoder { interface IWICBitmapDecoder; }

[
	helpstring("WIC PNG Decoder"),
	uuid(389ea17b-5078-4cde-b6ef-25c15175c751)
]
coclass WICPngDecoder { interface IWICBitmapDecoder; }

[
	helpstring("WIC PNG Encoder"),
	uuid(27949969-876a-41d7-9447-568f6a35a4dc)
]
coclass WICPngEncoder { interface IWICBitmapEncoder; }

[
	helpstring("WIC BMP Encoder"),
	uuid(69be8bb4-d66d-47c8-865a-ed1589433782)
]
coclass WICBmpEncoder { interface IWICBitmapEncoder; }

[
	helpstring("WIC GIF Decoder"),
	uuid(381dda3c-9ce9-4834-a23e-1f98f8fc52be)
]
coclass WICGifDecoder { interface IWICBitmapDecoder; }

[
	helpstring("WIC ICO Decoder"),
	uuid(c61bfcdf-2e0f-4aad-a8d7-e06bafebcdfe)
]
coclass WICIcoDecoder { interface IWICBitmapDecoder; }

[
	helpstring("WIC JPEG Decoder"),
	uuid(9456a480-e88b-43ea-9e73-0b2d9b71b1ca)
]
coclass WICJpegDecoder { interface IWICBitmapDecoder; }

[
	helpstring("WIC JPEG Encoder"),
	uuid(1a34f5c1-4a5a-46dc-b644-1f4567e7a676)
]
coclass WICJpegEncoder { interface IWICBitmapEncoder; }

[
	helpstring("WIC TIFF Decoder"),
	uuid(b54e85d9-fe23-499f-8b88-6acea713752b)
]
coclass WICTiffDecoder { interface IWICBitmapDecoder; }

[
	helpstring("WIC TIFF Encoder"),
	uuid(0131be10-2001-4c5f-a9b0-cc88fab64ce8)
]
coclass WICTiffEncoder { interface IWICBitmapEncoder; }

[
	helpstring("WIC ICNS Encoder"),
	uuid(312fb6f1-b767-409d-8a6d-0fc154d4f05c)
]
coclass WICIcnsEncoder { interface IWICBitmapEncoder; }

[
	helpstring("WIC Default Format Converter"),
	uuid(1a3f11dc-b514-4b17-8c5f-2154513852f1)
]
coclass WICDefaultFormatConverter { interface IWICFormatConverter; }

[
	helpstring("WIC TGA Decoder"),
	uuid(b11fc79a-67cc-43e6-a9ce-e3d54945d304)
]
coclass WineTgaDecoder { interface IWICBitmapDecoder; }

[
	helpstring("WIC Unknown Metadata Reader"),
	uuid(699745c2-5066-4b82-a8e3-d40478dbec8c)
]
coclass WICUnknownMetadataReader { interface IWICMetadataReader; }

//This interface does not seem to exist according to the SDK and Google
//[
//	helpstring("WIC Ifd Metadata Reader"),
//	uuid(8f914656-9d0a-4eb2-9019-0bf96d8a9ee6)
//]
//coclass WICIfdMetadataReader { interface IWICIfdMetadataReader; }

[
	helpstring("WIC Png cHRM Metadata Reader"),
	uuid(f90b5f36-367b-402a-9dd1-bc0fd59d8f62)
]
coclass WICPngChrmMetadataReader { interface IWICMetadataReader; }

[
	helpstring("WIC Png gAMA Metadata Reader"),
	uuid(3692ca39-e082-4350-9e1f-3704cb083cd5)
]
coclass WICPngGamaMetadataReader { interface IWICMetadataReader; }

[
	helpstring("WIC Png tEXt Metadata Reader"),
	uuid(4b59afcc-b8c3-408a-b670-89e5fab6fda7)
]
coclass WICPngTextMetadataReader { interface IWICMetadataReader; }

[
	helpstring("WIC LSD Metadata Reader"),
	uuid(41070793-59e4-479a-a1f7-954adc2ef5fc)
]
coclass WICLSDMetadataReader { interface IWICMetadataReader; }

[
	helpstring("WIC IMD Metadata Reader"),
	uuid(7447a267-0015-42c8-a8f1-fb3b94c68361)
]
coclass WICIMDMetadataReader { interface IWICMetadataReader; }

[
	helpstring("WIC GCE Metadata Reader"),
	uuid(b92e345d-f52d-41f3-b562-081bc772e3b9)
]
coclass WICGCEMetadataReader { interface IWICMetadataReader; }

[
	helpstring("WIC Application Extension Reader"),
	uuid(1767b93a-b021-44ea-920f-863c11f4f768)
]
coclass WICAPEMetadataReader { interface IWICMetadataReader; }

[
	helpstring("WIC Comment Extension Reader"),
	uuid(32557d3b-69dc-4f95-836e-f5972b2f6159)
]
coclass WICGifCommentMetadataReader { interface IWICMetadataReader; }

[
	dllname("Windowscodecs.dll")
]
module Windowscodecs{

	const long WINCODEC_ERR_GENERIC_ERROR    = 0x80004005; //E_FAIL
	const long WINCODEC_ERR_INVALIDPARAMETER = 0x80070057; //E_INVALIDARG
	const long WINCODEC_ERR_OUTOFMEMORY      = 0x8007000E; //E_OUTOFMEMORY
	const long WINCODEC_ERR_NOTIMPLEMENTED   = 0x80004001; //E_NOTIMPL
	const long WINCODEC_ERR_ABORTED          = 0x80004004; //E_ABORT
	const long WINCODEC_ERR_ACCESSDENIED     = 0x80070005; //E_ACCESSDENIED
	const long WINCODEC_ERR_VALUEOVERFLOW    = 0x80070216; //INTSAFE_E_ARITHMETIC_OVERFLOW


	[entry("WICMatchMetadataContent")]
LONG WICMatchMetadataContent(
	[in] UUID* guidContainerFormat,
	[in] UUID*pguidVendor,
	[in]  IStream *pIStream,
	[out] UUID *pguidMetadataFormat);

[entry("WICSerializeMetadataContent")]
LONG WICSerializeMetadataContent(
	[in] UUID* guidContainerFormat,
	[in] IWICMetadataWriter *pIWriter,
	[in] DWORD dwPersistOptions,
	[in] IStream *pIStream);


[entry("WICGetMetadataContentSize")]
LONG WICGetMetadataContentSize(
	[in] UUID* guidContainerFormat,
	[in] IWICMetadataWriter *pIWriter,
	[out] LARGE_INTEGER *pcbSize);


[entry("WICConvertBitmapSource")]
LONG WICConvertBitmapSource(
	[in] REFWICPixelFormatGUID dstFormat, // Destination pixel format
	[in] IWICBitmapSource  *pISrc,    // Source bitmap
	[out] IWICBitmapSource **ppIDst);   // Destination bitmap, a copy or addrefed source

[entry("WICCreateBitmapFromSection")]
LONG WICCreateBitmapFromSection(
	[in] UINT width,
	[in] UINT height,
	[in] REFWICPixelFormatGUID pixelFormat,
	[in] HANDLE hSection,
	[in] UINT stride,
	[in] UINT offset,
	[out] IWICBitmap **ppIBitmap);

[entry("WICCreateBitmapFromSectionEx")]
LONG WICCreateBitmapFromSectionEx(
	[in] UINT width,
	[in] UINT height,
	[in] REFWICPixelFormatGUID pixelFormat,
	[in] HANDLE hSection,
	[in] UINT stride,
	[in] UINT offset,
	[in] WICSectionAccessLevel desiredAccessLevel,
	[out] IWICBitmap **ppIBitmap);

[entry("WICMapGuidToShortName")]
LONG WICMapGuidToShortName(
	[in] UUID* guid,
	[in] UINT cchName,
	[in, out] LONG* wzName, // WCHAR *wzName,
	[out]  UINT *pcchActual);

[entry("WICMapShortNameToGuid")]
LONG WICMapShortNameToGuid(
	[in] LONG wzName,
	[out]  UUID *pguid);

[entry("WICMapSchemaToName]")]
LONG WICMapSchemaToName(
	[in] UUID* guidMetadataFormat,
	[in] LONG pwzSchema,
	[in] UINT cchName,
	[in, out] LONG* wzName, // WCHAR *wzName,
	[out]  UINT *pcchActual);

};
