//tbShellLib - 100% implemented

typedef struct SHQUERYRBINFO {
	LONG cbSize;
	LARGE_INTEGER i64Size;
	LARGE_INTEGER i64NumItems;
} SHQUERYRBINFO;

typedef enum SHERB_Flags {
	SHERB_NOCONFIRMATION   = 0x00000001,
	SHERB_NOPROGRESSUI     = 0x00000002,
	SHERB_NOSOUND          = 0x00000004,
} SHERB_Flags;

typedef enum QUERY_USER_NOTIFICATION_STATE
{
    QUNS_NOT_PRESENT               = 1,    // The user is not present.  Heuristic check for modes like: screen saver, locked machine, non-active FUS session
    QUNS_BUSY                      = 2,    // The user is busy.  Heuristic check for modes like: full-screen app
    QUNS_RUNNING_D3D_FULL_SCREEN   = 3,    // full-screen (exlusive-mode) D3D app
    QUNS_PRESENTATION_MODE         = 4,    // Windows presentation mode (laptop feature) is turned on
    QUNS_ACCEPTS_NOTIFICATIONS     = 5,    // notifications can be freely sent
//#if (NTDDI_WIN7)
    QUNS_QUIET_TIME                = 6,    // We are in OOBE quiet period
//#endif
//#if (NTDDI_WIN8)
    QUNS_APP                       = 7,    // App-mode application
//#endif
} QUERY_USER_NOTIFICATION_STATE;

typedef enum NI_FLAGS {
	NIF_MESSAGE    = 0x00000001,
	NIF_ICON       = 0x00000002,
	NIF_TIP        = 0x00000004,
	NIF_STATE      = 0x00000008,
	NIF_INFO       = 0x00000010,
	NIF_GUID       = 0x00000020,
	NIF_REALTIME   = 0x00000040,
	NIF_SHOWTIP    = 0x00000080,
} NI_FLAGS;
typedef enum NI_State {
	NIS_HIDDEN             = 0x00000001,
	NIS_SHAREDICON         = 0x00000002,
} NI_State;
typedef enum NII_FLAGS {
	NIIF_NONE      = 0x00000000,
	// icon flags are mutually exclusive
	// and take only the lowest 2 bits
	NIIF_INFO      = 0x00000001,
	NIIF_WARNING   = 0x00000002,
	NIIF_ERROR     = 0x00000003,
	NIIF_USER      = 0x00000004,
	NIIF_ICON_MASK = 0x0000000F,
	NIIF_NOSOUND   = 0x00000010,
	NIIF_LARGE_ICON = 0x00000020,
	NIIF_RESPECT_QUIET_TIME = 0x00000080, //Win7+
} NII_FLAGS;


typedef struct NOTIFYICONDATAW {
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    NI_FLAGS uFlags;
    UINT uCallbackMessage;
    HICON hIcon;
    WCHAR  szTip[128];
    NI_State dwState;
    NI_State dwStateMask;
    WCHAR  szInfo[256];
    UINT  uTimeoutAndVersion;  // used with NIM_SETVERSION, values 0, 3 and 4
    WCHAR  szInfoTitle[64];
    NII_FLAGS dwInfoFlags;
    UUID guidItem;
    HICON hBalloonIcon;
} NOTIFYICONDATAW;

typedef enum NI_NOTIFY {
	NIN_SELECT         = (0x400 + 0),
	NINF_KEY           = 0x1,
	NIN_KEYSELECT      = 0x401, //(NIN_SELECT | NINF_KEY),

	NIN_BALLOONSHOW        = (0x400 + 2),
	NIN_BALLOONHIDE        = (0x400 + 3),
	NIN_BALLOONTIMEOUT     = (0x400 + 4),
	NIN_BALLOONUSERCLICK   = (0x400 + 5),
	NIN_POPUPOPEN          = (0x400 + 6),
	NIN_POPUPCLOSE         = (0x400 + 7),
} NI_NOTIFY;
typedef enum NI_MESSAGES {
	NIM_ADD        = 0x00000000,
	NIM_MODIFY     = 0x00000001,
	NIM_DELETE     = 0x00000002,
	NIM_SETFOCUS   = 0x00000003,
	NIM_SETVERSION = 0x00000004,
} NI_MESSAGES;

typedef struct NOTIFYICONIDENTIFIER {
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    UUID guidItem;
} NOTIFYICONIDENTIFIER;

typedef struct SHChangeNotifyEntry
{
	DWORD  pidl;
	BOOL   fRecursive;
} SHChangeNotifyEntry;

typedef enum SHCNRF
{
	SHCNRF_InterruptLevel     = 0x0001,
	SHCNRF_ShellLevel         = 0x0002,
	SHCNRF_RecursiveInterrupt = 0x1000,
	SHCNRF_NewDelivery        = 0x8000,
} SHCNRF;

typedef enum SHCN_Events
{
	SHCNE_RENAMEITEM          = 0x00000001,
	SHCNE_CREATE              = 0x00000002,
	SHCNE_DELETE              = 0x00000004,
	SHCNE_MKDIR               = 0x00000008,
	SHCNE_RMDIR               = 0x00000010,
	SHCNE_MEDIAINSERTED       = 0x00000020,
	SHCNE_MEDIAREMOVED        = 0x00000040,
	SHCNE_DRIVEREMOVED        = 0x00000080,
	SHCNE_DRIVEADD            = 0x00000100,
	SHCNE_NETSHARE            = 0x00000200,
	SHCNE_NETUNSHARE          = 0x00000400,
	SHCNE_ATTRIBUTES          = 0x00000800,
	SHCNE_UPDATEDIR           = 0x00001000,
	SHCNE_UPDATEITEM          = 0x00002000,
	SHCNE_SERVERDISCONNECT    = 0x00004000,
	SHCNE_UPDATEIMAGE         = 0x00008000,
	SHCNE_DRIVEADDGUI         = 0x00010000,
	SHCNE_RENAMEFOLDER        = 0x00020000,
	SHCNE_FREESPACE           = 0x00040000,
	SHCNE_EXTENDED_EVENT      = 0x04000000,

	SHCNE_ASSOCCHANGED        = 0x08000000,

	SHCNE_DISKEVENTS          = 0x0002381F,
	SHCNE_GLOBALEVENTS        = 0x0C0581E0, // Events that dont match pidls first
	SHCNE_ALLEVENTS           = 0x7FFFFFFF,
	SHCNE_INTERRUPT           = 0x80000000, // The presence of this flag indicates
										 // that the event was generated by an
										 // interrupt.  It is stripped out before
										 // the clients of SHCNNotify_ see it.

} SHCN_Events;

typedef enum SHCN_ExtendedEvents
{
	SHCNEE_ORDERCHANGED            = 2,  // pidl2 is the changed folder
	SHCNEE_WININETCHANGED          = 3,  // dwItem2 contains CACHE_NOTIFY_* bits
	SHCNEE_MSI_CHANGE              = 4,  // pidl2 is a SHChangeProductKeyAsIDList
	SHCNEE_MSI_UNINSTALL           = 5,  // pidl2 is a SHChangeProductKeyAsIDList
	SHCNEE_PROMOTEDITEM            = 6,  // pidl2 is the pidl of the Promoted item
	SHCNEE_DEMOTEDITEM             = 7,  // pidl2 is the pidl of the demoted item
	SHCNEE_ALIASINUSE              = 8,  // some alias style folder is now being used
    SHCNEE_SHORTCUTINVOKE          = 9,  // an app has been launched via a shortcut
                                         // pidl1 = SHShortcutInvokeAsIDList, pidl2=unused
	SHCNEE_PINLISTCHANGED          = 10,  // a change was made to the pin list
                                          // pidl1 = SHChangeDWORDAsIDList, pidl2=unused
	SHCNEE_USERINFOCHANGED         = 11,  // A user picture was updated. pidl1 = SHChangeDWORDAsIDList, pidl2=unused
	SHCNEE_UPDATEFOLDERLOCATION    = 12,  // a special folder changed pidl1 = {SHChangeDWORDAsIDList, csidlFolder}, pidl2=unused
} SHCN_ExtendedEvents;

typedef enum SHCN_Flags
{
	SHCNF_IDLIST      = 0x0000,        // LPITEMIDLIST
	SHCNF_PATHA       = 0x0001,        // path name
	SHCNF_PRINTERA    = 0x0002,        // printer friendly name
	SHCNF_DWORD       = 0x0003,        // DWORD
	SHCNF_PRINTJOBA   = 0x0004,        // dwItem1: printer name 
                                       // dwItem2: SHCNF_PRINTJOB_DATA  
	SHCNF_PATHW       = 0x0005,        // path name
	SHCNF_PRINTERW    = 0x0006,        // printer friendly name
	SHCNF_PRINTJOBW   = 0x0007,        // dwItem1: printer name        ;Internal
                                       // dwItem2: SHCNF_PRINTJOB_DATA ;Internal
	SHCNF_INSTRUMENT  = 0x0080,        // dwItem1: LPSHCNF_INSTRUMENT  ;Internal
	SHCNF_TYPE        = 0x00FF,
	SHCNF_FLUSH       = 0x1000,
	SHCNF_FLUSHNOWAIT = 0x3000,        // includes SHCNF_FLUSH

	SHCNF_NOTIFYRECURSIVE      = 0x10000, // Notify clients registered for any child

	SHCNF_PATH        = 0x0005,  //= SHCNF_PATHW,
	SHCNF_PRINTER     = 0x0006, // = SHCNF_PRINTERW,

} SHCN_Flags;

typedef struct SHCNF_PRINTJOB_DATA {  
    DWORD JobId; 
    DWORD Status; 
    DWORD TotalPages; 
    DWORD Size; 
    DWORD PagesPrinted; 
} SHCNF_PRINTJOB_DATA;

typedef struct SHNOTIFYSTRUCT
{
	LONG dwItem1;
	LONG dwItem2;
} SHNOTIFYSTRUCT;

//typedef struct SHChangeNotifyEntry
//{
//	LONG pidl;
//	BOOL fRecursive;
//} SHChangeNotifyEntry;

typedef enum
{
	SCNRT_ENABLE = 0,
	SCNRT_DISABLE = 1,
} SCNRT_STATUS;

typedef enum SHGDFIL_Format
{
	SHGDFIL_FINDDATA       = 0x1, //Format used for file system objects.The pv parameter is the address of a WIN32_FIND_DATA structure.
	SHGDFIL_NETRESOURCE    = 0x2, //Format used for network resources.The pv parameter is the address of a NETRESOURCE structure.
	SHGDFIL_DESCRIPTIONID  = 0x3, //Version 4.71.Format used for network resources.The pv parameter is the address of an SHDESCRIPTIONID structure.
} SHGDFIL_Format;






[
    dllname("SHELL32.DLL")
]
module shell32 {
	//begin oleexp additions
	#define DISPID_SELECTIONCHANGED      200    // The Selected Items Changed
	#define DISPID_FILELISTENUMDONE      201    // Done enumerating the shell folder
	#define DISPID_VERBINVOKED           202    // A verb (either from the main or context menu) was invoked in the folder view
	#define DISPID_DEFAULTVERBINVOKED    203    // default verb (either from the main or context menu) was invoked in the folder view
	#define DISPID_BEGINDRAG             204    // user clicked on an item
	#define DISPID_VIEWMODECHANGED       205    // The ListViewMode Changed
	#define DISPID_NOITEMSTATE_CHANGED   206    // We went from 0->some or some->0 items in the view
	#define DISPID_CONTENTSCHANGED       207    // contents of the view have changed somehow
	#define DISPID_FOCUSCHANGED          208    // The Focused Item Changed
	#define DISPID_CHECKSTATECHANGED     209    // Checkbox state changed.
	#define DISPID_ORDERCHANGED          210    // The order of items changed
	#define DISPID_VIEWPAINTDONE         211    // The enumerated items have been inserted into the view and painted
	#define DISPID_COLUMNSCHANGED        212    // The set of visible details columns changed
	#define DISPID_CTRLMOUSEWHEEL        213    // The mousewheel has been moved while the CTRL key was down
	#define DISPID_SORTDONE              214    // Done sorting the shell folder
	#define DISPID_ICONSIZECHANGED       215    // The icon size changed in the view

	#define DISPID_FOLDERCHANGED         217    // The state of the folder has changed
	#define DISPID_FILTERINVOKED         218    // Some filter changed
	#define DISPID_WORDWHEELEDITED       219    // Text in WordWheel changed
	#define DISPID_SELECTEDITEMCHANGED   220    // One of the selected items has changed (not the same as a selection change)
	#define DISPID_EXPLORERWINDOWREADY   221    // Explorer window is open, been painted and is ready
	#define DISPID_UPDATEIMAGE           222    // A SHCNE_UPDATEIMAGE notification was received
	#define DISPID_INITIALENUMERATIONDONE 223   // Used internally by specialized views like the start menu. Not fired when the data source finishes enumeration. To detect when the data source is done enumerating, use DISPID_FILELISTENUMDONE.
	#define DISPID_ENTERPRISEIDCHANGED   224    // Fired when enterprise id is changed in Common File Dialog during save as

	// define the events for the ComboBoxEx control
	#define DISPID_ENTERPRESSED         200     // The user hit Enter or Return


	// Define Events for search object
	#define DISPID_SEARCHCOMMAND_START      1
	#define DISPID_SEARCHCOMMAND_COMPLETE   2
	#define DISPID_SEARCHCOMMAND_ABORT      3
	#define DISPID_SEARCHCOMMAND_UPDATE     4
	#define DISPID_SEARCHCOMMAND_PROGRESSTEXT 5
	#define DISPID_SEARCHCOMMAND_ERROR      6
	#define DISPID_SEARCHCOMMAND_RESTORE    7


	// Shell Add/Remove Programs events
	#define DISPID_IADCCTL_DIRTY            0x100
	#define DISPID_IADCCTL_PUBCAT           0x101
	#define DISPID_IADCCTL_SORT             0x102
	#define DISPID_IADCCTL_FORCEX86         0x103
	#define DISPID_IADCCTL_SHOWPOSTSETUP    0x104
	#define DISPID_IADCCTL_ONDOMAIN         0x105
	#define DISPID_IADCCTL_DEFAULTCAT       0x106



	#define DISPID_BEFORENAVIGATE     100   // this is sent before navigation to give a chance to abort
#define DISPID_NAVIGATECOMPLETE   101   // in async, this is sent when we have enough to show
#define DISPID_STATUSTEXTCHANGE   102
#define DISPID_QUIT               103
#define DISPID_DOWNLOADCOMPLETE   104
#define DISPID_COMMANDSTATECHANGE 105
#define DISPID_DOWNLOADBEGIN      106
#define DISPID_NEWWINDOW          107   // sent when a new window should be created
#define DISPID_PROGRESSCHANGE     108   // sent when download progress is updated
#define DISPID_WINDOWMOVE         109   // sent when main window has been moved
#define DISPID_WINDOWRESIZE       110   // sent when main window has been sized
#define DISPID_WINDOWACTIVATE     111   // sent when main window has been activated
#define DISPID_PROPERTYCHANGE     112   // sent when the PutProperty method is called
#define DISPID_TITLECHANGE        113   // sent when the document title changes
#define DISPID_TITLEICONCHANGE    114   // sent when the top level window icon may have changed.

#define DISPID_FRAMEBEFORENAVIGATE    200
#define DISPID_FRAMENAVIGATECOMPLETE  201
#define DISPID_FRAMENEWWINDOW         204

#define DISPID_BEFORENAVIGATE2              250           // hyperlink clicked on
#define DISPID_NEWWINDOW2                   251
#define DISPID_NAVIGATECOMPLETE2            252           // UIActivate new document
#define DISPID_ONQUIT                       253
#define DISPID_ONVISIBLE                    254           // sent when the window goes visible/hidden
#define DISPID_ONTOOLBAR                    255           // sent when the toolbar should be shown/hidden
#define DISPID_ONMENUBAR                    256           // sent when the menubar should be shown/hidden
#define DISPID_ONSTATUSBAR                  257           // sent when the statusbar should be shown/hidden
#define DISPID_ONFULLSCREEN                 258           // sent when kiosk mode should be on/off
#define DISPID_DOCUMENTCOMPLETE             259           // new document goes ReadyState_Complete
#define DISPID_ONTHEATERMODE                260           // sent when theater mode should be on/off
#define DISPID_ONADDRESSBAR                 261           // sent when the address bar should be shown/hidden
#define DISPID_WINDOWSETRESIZABLE           262           // sent to set the style of the host window frame
#define DISPID_WINDOWCLOSING                263           // sent before script window.close closes the window 
#define DISPID_WINDOWSETLEFT                264           // sent when the put_left method is called on the WebOC
#define DISPID_WINDOWSETTOP                 265           // sent when the put_top method is called on the WebOC
#define DISPID_WINDOWSETWIDTH               266           // sent when the put_width method is called on the WebOC
#define DISPID_WINDOWSETHEIGHT              267           // sent when the put_height method is called on the WebOC 
#define DISPID_CLIENTTOHOSTWINDOW           268           // sent during window.open to request conversion of dimensions
#define DISPID_SETSECURELOCKICON            269           // sent to suggest the appropriate security icon to show
#define DISPID_FILEDOWNLOAD                 270           // Fired to indicate the File Download dialog is opening
#define DISPID_NAVIGATEERROR                271           // Fired to indicate the a binding error has occured
#define DISPID_PRIVACYIMPACTEDSTATECHANGE   272           // Fired when the user's browsing experience is impacted
#define DISPID_NEWWINDOW3                   273
#define DISPID_VIEWUPDATE                   281           // Fired when the contents of a shell browser window change
#define DISPID_SETPHISHINGFILTERSTATUS      282           // Fired by the Phishing Filter API to signal what state the analysis is in
#define DISPID_WINDOWSTATECHANGED           283           // Fired to indicate that the browser window's visibility or enabled state has changed
#define DISPID_NEWPROCESS                   284           // Fired when a navigation must be redirected due to Protected Mode
#define DISPID_THIRDPARTYURLBLOCKED         285           // Fired when a third-party url is blocked due to Privacy Advisor   
#define DISPID_REDIRECTXDOMAINBLOCKED       286           // Fired when a x-domain redirect is blocked due to browser nav constant   
#define DISPID_WEBWORKERSTARTED             288
#define DISPID_WEBWORKERFINISHED            289
#define DISPID_BEFORESCRIPTEXECUTE          290           // Fired prior to any of a page's script is executed

// Printing events
#define DISPID_PRINTTEMPLATEINSTANTIATION   225           // Fired to indicate that a print template is instantiated
#define DISPID_PRINTTEMPLATETEARDOWN        226           // Fired to indicate that a print templete is completely gone 
#define DISPID_UPDATEPAGESTATUS             227           // Fired to indicate that the spooling status has changed

// define the events for the shell window list
#define DISPID_WINDOWREGISTERED             200           // Window registered
#define DISPID_WINDOWREVOKED                201           // Window Revoked

#define DISPID_RESETFIRSTBOOTMODE       1
#define DISPID_RESETSAFEMODE            2
#define DISPID_REFRESHOFFLINEDESKTOP    3
#define DISPID_ADDFAVORITE              4
#define DISPID_ADDCHANNEL               5
#define DISPID_ADDDESKTOPCOMPONENT      6
#define DISPID_ISSUBSCRIBED             7
#define DISPID_NAVIGATEANDFIND          8
#define DISPID_IMPORTEXPORTFAVORITES    9
#define DISPID_AUTOCOMPLETESAVEFORM     10
#define DISPID_AUTOSCAN                 11
#define DISPID_AUTOCOMPLETEATTACH       12
#define DISPID_SHOWBROWSERUI            13
#define DISPID_ADDSEARCHPROVIDER        14
#define DISPID_RUNONCESHOWN             15
#define DISPID_SKIPRUNONCE              16
#define DISPID_CUSTOMIZESETTINGS        17
#define DISPID_SQMENABLED               18
#define DISPID_PHISHINGENABLED          19
#define DISPID_BRANDIMAGEURI            20
#define DISPID_SKIPTABSWELCOME          21
#define DISPID_DIAGNOSECONNECTION       22
#define DISPID_CUSTOMIZECLEARTYPE       23
#define DISPID_ISSEARCHPROVIDERINSTALLED 24
#define DISPID_ISSEARCHMIGRATED         25
#define DISPID_DEFAULTSEARCHPROVIDER    26
#define DISPID_RUNONCEREQUIREDSETTINGSCOMPLETE 27
#define DISPID_RUNONCEHASSHOWN          28
#define DISPID_SEARCHGUIDEURL           29
#define DISPID_ADDSERVICE               30
#define DISPID_ISSERVICEINSTALLED       31
#define DISPID_ADDTOFAVORITESBAR        32
#define DISPID_BUILDNEWTABPAGE          33
#define DISPID_SETRECENTLYCLOSEDVISIBLE 34
#define DISPID_SETACTIVITIESVISIBLE     35
#define DISPID_CONTENTDISCOVERYRESET    36
#define DISPID_INPRIVATEFILTERINGENABLED    37
#define DISPID_SUGGESTEDSITESENABLED    38
#define DISPID_ENABLESUGGESTEDSITES     39
#define DISPID_NAVIGATETOSUGGESTEDSITES 40
#define DISPID_SHOWTABSHELP             41
#define DISPID_SHOWINPRIVATEHELP        42
#define DISPID_ISSITEMODE               43
#define DISPID_SETSITEMODEICONOVERLAY   44
#define DISPID_CLEARSITEMODEICONOVERLAY 45
#define DISPID_UPDATETHUMBNAILBUTTON    46
#define DISPID_SETTHUMBNAILBUTTONS      47 
#define DISPID_ADDTHUMBNAILBUTTONS      48
#define DISPID_ADDSITEMODE              49
#define DISPID_SETSITEMODEPROPERTIES    50
#define DISPID_SITEMODECREATEJUMPLIST   51
#define DISPID_SITEMODEADDJUMPLISTITEM  52
#define DISPID_SITEMODECLEARJUMPLIST    53
#define DISPID_SITEMODEADDBUTTONSTYLE   54 
#define DISPID_SITEMODESHOWBUTTONSTYLE  55
#define DISPID_SITEMODESHOWJUMPLIST     56
#define DISPID_ADDTRACKINGPROTECTIONLIST    57
#define DISPID_SITEMODEACTIVATE         58
#define DISPID_ISSITEMODEFIRSTRUN       59
#define DISPID_TRACKINGPROTECTIONENABLED 60
#define DISPID_ACTIVEXFILTERINGENABLED  61
#define DISPID_PROVISIONNETWORKS        62
#define DISPID_REPORTSAFEURL            63
#define DISPID_SITEMODEREFRESHBADGE     64
#define DISPID_SITEMODECLEARBADGE       65
#define DISPID_DIAGNOSECONNECTIONUILESS 66
#define DISPID_LAUNCHNETWORKCLIENTHELP  67
#define DISPID_CHANGEDEFAULTBROWSER     68
#define DISPID_STOPPERIODICUPDATE       69
#define DISPID_STARTPERIODICUPDATE      70
#define DISPID_CLEARNOTIFICATION        71
#define DISPID_ENABLENOTIFICATIONQUEUE  72
#define DISPID_PINNEDSITESTATE          73
#define DISPID_LAUNCHINTERNETOPTIONS   74
#define DISPID_STARTPERIODICUPDATEBATCH 75
#define DISPID_ENABLENOTIFICATIONQUEUESQUARE   76
#define DISPID_ENABLENOTIFICATIONQUEUEWIDE     77
#define DISPID_ENABLENOTIFICATIONQUEUELARGE    78
#define DISPID_SCHEDULEDTILENOTIFICATION       79
#define DISPID_REMOVESCHEDULEDTILENOTIFICATION 80
#define DISPID_STARTBADGEUPDATE         81
#define DISPID_STOPBADGEUPDATE          82
#define DISPID_ISMETAREFERRERAVAILABLE  83
#define DISPID_SETEXPERIMENTALFLAG      84
#define DISPID_GETEXPERIMENTALFLAG      85
#define DISPID_SETEXPERIMENTALVALUE     86
#define DISPID_GETEXPERIMENTALVALUE     87
#define DISPID_HASNEEDIEAUTOLAUNCHFLAG  88
#define DISPID_GETNEEDIEAUTOLAUNCHFLAG  89
#define DISPID_SETNEEDIEAUTOLAUNCHFLAG  90
#define DISPID_LAUNCHIE                 91
#define DISPID_RESETEXPERIMENTALFLAGS   92
#define DISPID_GETCVLISTDATA            93
#define DISPID_GETCVLISTLOCALDATA       94
#define DISPID_GETEMIELISTDATA          95
#define DISPID_GETEMIELISTLOCALDATA     96
#define DISPID_OPENFAVORITESPANE        97
#define DISPID_OPENFAVORITESSETTINGS    98
#define DISPID_LAUNCHINHVSI             99
#define DISPID_GETNEEDHVSIAUTOLAUNCHFLAG 100
#define DISPID_SETNEEDHVSIAUTOLAUNCHFLAG 101
#define DISPID_HASNEEDHVSIAUTOLAUNCHFLAG 102
#define DISPID_GETOSSKU                  103
#define DISPID_SETMSDEFAULTS             104
#define DISPID_SHELLUIHELPERLAST         105

#define DISPID_ADVANCEERROR             10
#define DISPID_RETREATERROR             11
#define DISPID_CANADVANCEERROR          12
#define DISPID_CANRETREATERROR          13
#define DISPID_GETERRORLINE             14
#define DISPID_GETERRORCHAR             15
#define DISPID_GETERRORCODE             16
#define DISPID_GETERRORMSG              17
#define DISPID_GETERRORURL              18
#define DISPID_GETDETAILSSTATE          19
#define DISPID_SETDETAILSSTATE          20
#define DISPID_GETPERERRSTATE           21
#define DISPID_SETPERERRSTATE           22
#define DISPID_GETALWAYSSHOWLOCKSTATE   23

// Dispatch IDS for ShellFavoritesNameSpace Dispatch Events.
//
#define DISPID_FAVSELECTIONCHANGE       1
#define DISPID_SELECTIONCHANGE          2
#define DISPID_DOUBLECLICK              3
#define DISPID_INITIALIZED              4

#define DISPID_MOVESELECTIONUP          1
#define DISPID_MOVESELECTIONDOWN        2
#define DISPID_RESETSORT                3
#define DISPID_NEWFOLDER                4
#define DISPID_SYNCHRONIZE              5
#define DISPID_IMPORT                   6
#define DISPID_EXPORT                   7
#define DISPID_INVOKECONTEXTMENU        8
#define DISPID_MOVESELECTIONTO          9
#define DISPID_SUBSCRIPTIONSENABLED     10
#define DISPID_CREATESUBSCRIPTION       11
#define DISPID_DELETESUBSCRIPTION       12
#define DISPID_SETROOT                  13
#define DISPID_ENUMOPTIONS              14
#define DISPID_SELECTEDITEM             15
#define DISPID_ROOT                     16
#define DISPID_DEPTH                    17
#define DISPID_MODE                     18
#define DISPID_FLAGS                    19
#define DISPID_TVFLAGS                  20
#define DISPID_NSCOLUMNS                21
#define DISPID_COUNTVIEWTYPES           22
#define DISPID_SETVIEWTYPE              23
#define DISPID_SELECTEDITEMS            24
#define DISPID_EXPAND                   25
#define DISPID_UNSELECTALL              26

	[entry("SHGetDataFromIDList")]
	int SHGetDataFromIDListW(
		[in] IShellFolder *psf,
		[in] LONG pidl,
		[in] SHGDFIL_Format nFormat,
		[out] LPVOID pv,
		[in] LONG cb);

	[entry("SHChangeNotify")]
	int SHChangeNotify(
		[in] SHCN_Events wEventId,
		[in] SHCN_Flags uFlags,
		[in] LONG dwItem1,
		[in] LONG dwItem2);

	[entry("SHChangeNotification_Lock")]
	int SHChangeNotification_Lock(
		[in] LONG hChange,
		[in] DWORD dwProcId,
		[out] LONG *pppidl,
		[out] SHCN_Events *plEvent);

	[entry("SHChangeNotification_Unlock")]
	int SHChangeNotification_Unlock(
		[in] LONG hLock);

	[entry("SHChangeNotifyRegister")]
	int SHChangeNotifyRegister(
		[in] HWND hwnd,
		[in] SHCNRF uFlags,
		[in] SHCN_Events fEvents,
		[in] LONG wMsg,
		[in] LONG cEntries,
		[in] SHChangeNotifyEntry *lpps);

	[entry("SHChangeNotifyDeregister")]
	int SHChangeNotifyDeregister(
		[in] LONG ulID);

	[entry("SHChangeNotifyRegisterThread")]
	int SHChangeNotifyRegisterThread(
		[in] SCNRT_STATUS status);






	[entry("SHGetSetSettings")]
	void SHGetSetSettings(
		[in, out] SHELLSTATE *lpss,
		[in] SFS_MASK dwMask,
		[in] BOOL bSet);

	[entry("Shell_NotifyIconW")]
	BOOL Shell_NotifyIcon(
		[in] DWORD dwMessage,
		[in] NOTIFYICONDATAW *lpData);
		
	[entry("Shell_NotifyIconGetRect")]
	int Shell_NotifyIconGetRect(
		[in] NOTIFYICONIDENTIFIER* identifier,
		[out] RECT *iconLocation);
		
	[entry("SHQueryUserNotificationState")]
	int SHQueryUserNotificationState(
		[out] QUERY_USER_NOTIFICATION_STATE *pquns);
	
	[entry("SHQueryRecycleBinW")]
	int SHQueryRecycleBin(
		[in] LONG pszRootPath,
		[in,out] SHQUERYRBINFO *pSHQueryRBInfo);
		
	[entry("SHEmptyRecycleBinW")]
	int SHEmptyRecycleBin(
		[in] LONG hWnd,
		[in] LONG pszRootPath,
		[in] SHERB_Flags dwFlags);


	[entry("SHCreateItemFromIDList")]
	int SHCreateItemFromIDList(
		[in] LONG pidl,
		[in] UUID *riid,
		[out] LPVOID ppv);
	
	[entry("ILCreateFromPathW")]
	int ILCreateFromPathW(
		[in] LONG pszPath);
	
	[entry("ILCombine")]
	int ILCombine(
		[in] LONG pidl1,
		[in] LONG pidl2);
		
	[entry("ILFindLastID")]
	int ILFindLastID(
		[in] LONG pidl);
		
	[entry("ILGetNext")]
	int ILGetNext(
		[in] LONG pidl);
		
	[entry("ILGetSize")]
	int ILGetSize(
		[in] LONG pidl);
		
	[entry("ILIsEqual")]
	int ILIsEqual(
		[in] LONG pidl1,
		[in] LONG pidl2);
		
	[entry("ILRemoveLastID")]
	int ILRemoveLastID(
		[in, out] LONG *pidl);
	
	[entry("SHAssocEnumHandlers")]
	int SHAssocEnumHandlers(
		[in] LONG pszExtra,
		[in] ASSOC_FILTER afFilter,
		[out] IEnumAssocHandlers **ppEnumHandler);
		
	[entry("SHAssocEnumHandlersForProtocolByApplication")]
	int SHAssocEnumHandlersForProtocolByApplication(
		[in] LONG pszProtocol,
		[in] UUID *riid,
		[out] LPVOID ppv);
		
	[entry("SHBindToFolderIDListParent")]
	int SHBindToFolderIDListParent(
		[in] IShellFolder *psfRoot,
		[in] LONG pidl,
		[in] UUID *riid,
		[out] LPVOID ppv,
		[out] LONG *ppidl);
		
	[entry("SHBindToFolderIDListParentEx")]
	int SHBindToFolderIDListParentEx(
		[in] IShellFolder *psfRoot,
		[in] LONG pidl,
		[in] IBindCtx *ppbc,
		[in] UUID *riid,
		[out] LPVOID ppv,
		[out] LONG *ppidl);
		
	[entry("SHBindToObject")]
	int SHBindToObject(
		[in] IShellFolder *psf,
		[in] LONG pidl,
		[in] IBindCtx *pbc,
		[in] UUID *riid,
		[out] LPVOID ppv);
		
	[entry("SHBindToParent")]
	int SHBindToParent(
		[in] LONG pidl,
		[in] UUID *riid,
		[out] LPVOID ppv,
		[out] LONG *ppidlLast);
	
	[entry("SHCreateDataObject")]
	int SHCreateDataObject(
		[in] LONG pidlFolder,
		[in] LONG cidl,
		[in] LONG apidl,
		[in] IDataObject *pdtInner,
		[in] UUID *riid,
		[out] LPVOID ppv);
		
	[entry("#740")]
	int SHCreateFileDataObject(
		[in] LONG pidlFolder,
		[in] LONG cidl,
		[in] LONG apidl,
		[in] IDataObject *pdtInner,
		[in] IDataObject **ppDataObj);
		
	[entry("SHCreateItemFromParsingName")]
	int SHCreateItemFromParsingName(
		[in] LONG pszPath,
		[in] IBindCtx *pbc,
		[in] UUID *riid,
		[out] LPVOID ppv);
		
	[entry("SHCreateItemWithParent")]
	int SHCreateItemWithParent(
		[in] LONG pidlParent,
		[in] IShellFolder *psfParent,
		[in] LONG pidl,
		[in] UUID *riid,
		[out] LPVOID ppvItem);
		
	[entry("SHCreateShellItemArray")]
	int SHCreateShellItemArray(
		[in] LONG pidlParent,
		[in] IShellFolder *psf,
		[in] LONG cidl,
		[in] LONG ppidl,
		[out] IShellItemArray **ppsiItemArray);
		
	[entry("SHCreateShellItemArrayFromDataObject")]
	int SHCreateShellItemArrayFromDataObject(
		[in] IDataObject *pdo,
		[in] UUID *riid,
		[out] LPVOID ppv);
		
	[entry("SHCreateShellItemArrayFromIDLists")]
	int SHCreateShellItemArrayFromIDLists(
		[in] LONG cidl,
		[in] LONG rgpidl,
		[out] IShellItemArray **ppsiItemArray);
		
	[entry("SHCreateShellItemArrayFromShellItem")]
	int SHCreateShellItemArrayFromShellItem(
		[in] IShellItem *psi,
		[in] UUID *riid,
		[out] LPVOID ppv);
		
	[entry("SHDoDragDrop")]
	int SHDoDragDrop(
		[in] LONG hwnd,
		[in] IDataObject *pdtobj,
		[in] IDropSource *pdsrc,
		[in] DROPEFFECTS dwEffect,
		[out] DROPEFFECTS *pdwEffect);	
				
	[entry("SHGetIconOverlayIndexW")]
	int SHGetIconOverlayIndexW(
		[in] LONG pszIconPath,
		[in] LONG iIconIndex);
		
	[entry("SHGetIDListFromObject")]
	int SHGetIDListFromObject(
		[in] stdole.IUnknown *punk,
		[out] LONG *ppidl);
	
	[entry("SHGetImageList")]
	int SHGetImageList(
		[in] SHIL iImageList,
		[in] UUID *riid,
		[out] LPVOID ppv);
		
	[entry("SHGetItemFromDataObject")]
	int SHGetItemFromDataObject(
		[in] IDataObject *pdtobj,
		[in] DATAOBJ_GET_ITEM_FLAGS dwFlags,
		[in] UUID *riid,
		[out] LPVOID ppv);
		
	[entry("SHGetItemFromObject")]
	int SHGetItemFromObject(
		[in] stdole.IUnknown *punk,
		[in] UUID *riid,
		[out] LPVOID ppv);
		
	[entry("SHGetKnownFolderIDList")]
	int SHGetKnownFolderIDList(
		[in] UUID *rfid,
		[in] KNOWN_FOLDER_FLAG dwFlags,
		[in] LONG hToken,
		[out] LONG *ppidl);
		
	[entry("SHGetKnownFolderItem")]
	int SHGetKnownFolderItem(
		[in] UUID *rfid,
		[in] KNOWN_FOLDER_FLAG dwFlags,
		[in] LONG hToken,
		[in] UUID *riid,
		[out] LPVOID ppv);
		
	[entry("SHGetKnownFolderPath")]
	int SHGetKnownFolderPath(
		[in] UUID *rfid,
		[in] KNOWN_FOLDER_FLAG dwFlags,
		[in] LONG hToken,
		[out] LONG *ppszPath);
		
	[entry("SHGetNameFromIDList")]
	int SHGetNameFromIDList(
		[in] LONG pidl,
		[in] SIGDN sigdnName,
		[out] LONG *ppszName);
		
	[entry("SHGetNameFromPropertyKey")]
	int SHGetNameFromPropertyKey(
		[in] PROPERTYKEY *propkey,
		[out] LONG *ppszCanonicalName);
		
	[entry("SHParseDisplayName")]
	int SHParseDisplayName(
		[in] LONG pszName,
		[in] IBindCtx *pbc,
		[out] LONG *ppidl,
		[in] SFGAO_Flags sfgaoIn,
		[out] SFGAO_Flags *psfgaoOut);
		
	[entry("ShellExecuteExW")]
	int ShellExecuteEx([in,out] SHELLEXECUTEINFO *pExecInfo);
	
	
		
	//End oleexp additions


    [entry("DragQueryFileA")]
    int DragQueryFile(
        [in] LONG hDrop,
        [in] LONG iFile,
        [in] LPSTR lpszFile,
        [in] LONG cch);

    [entry("DragQueryFileW")]
    int DragQueryFileW(
        [in] LONG hDrop,
        [in] LONG iFile,
        [in] LPWSTR lpszFile,
        [in] LONG cch);

    [entry("DragQueryPoint")]
    BOOL DragQueryPoint(
        [in] LONG hDrop,
        [in, out] POINT *lppt);

    [entry("SHGetDesktopFolder")]
    HRESULT SHGetDesktopFolder(
        [out, retval] IShellFolder **ppshf);

    [entry("SHGetMalloc")]
    HRESULT SHGetMalloc(
        [out, retval] IMalloc ** ppMalloc);

    [entry("SHGetPathFromIDListA")]
    BOOL SHGetPathFromIDList(
        [in] LONG pidl,
        [in] LPSTR pszPath);

    [entry("SHGetPathFromIDListW")]
    BOOL SHGetPathFromIDListW(
        [in] LONG pidl,
        [in] LPWSTR pszPath);

    [entry("SHGetSpecialFolderLocation")]
    HRESULT SHGetSpecialFolderLocation(
        [in] LONG hwndOwner,
        [in] LONG nFolder,
        [out, retval] LONG *ppidl);

    [entry("SHGetSpecialFolderPathA")]
    BOOL SHGetSpecialFolderPath(
        [in] LONG hwndOwner,
        [in, out] LPSTR lpszPath,
        [in] LONG nFolder,
        [in] BOOL fCreate);

    [entry("SHGetSpecialFolderPathW")]
    BOOL SHGetSpecialFolderPathW(
        [in] LONG hwndOwner,
        [in, out] LPWSTR lpszPath,
        [in] LONG nFolder,
        [in] BOOL fCreate);

    [entry("SHGetInstanceExplorer")]
    HRESULT SHGetInstanceExplorer(
        [out, retval] stdole.IUnknown **ppunk);

}
