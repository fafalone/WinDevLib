//DirectML - directml.h

//  Copyright (c) Microsoft Corporation.  All rights reserved.

//#ifndef DIRECTML_H
//#define DIRECTML_H
//#pragma once
//
//#ifdef _GAMING_XBOX_SCARLETT
//#include "d3d12_xs.h"
//#elif _GAMING_XBOX_XBOXONE
//#include "d3d12_x.h"
//#else
//#include "d3d12.h"
//#endif
//
//#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_GAMES)
//
//#ifndef DML_DECLARE_INTERFACE
//#define DML_DECLARE_INTERFACE(iid) DECLSPEC_UUID(iid) DECLSPEC_NOVTABLE
//#endif
//
//#ifndef DML_TARGET_VERSION
//
//#if !defined(NTDDI_VERSION) || defined(DML_TARGET_VERSION_USE_LATEST) // Use the latest if using redist or no Windows target set.
//#define DML_TARGET_VERSION 0x5200
//#elif defined(NTDDI_WIN10_NI) && NTDDI_VERSION >= NTDDI_WIN10_NI
//#define DML_TARGET_VERSION 0x5000
//#elif defined(NTDDI_WIN10_CO) && NTDDI_VERSION >= NTDDI_WIN10_CO
//#define DML_TARGET_VERSION 0x4000
//#elif defined(NTDDI_WIN10_FE) && NTDDI_VERSION >= NTDDI_WIN10_FE
//#define DML_TARGET_VERSION 0x3000
//#elif defined(NTDDI_WIN10_VB) && NTDDI_VERSION >= NTDDI_WIN10_VB // Windows 10 2004 Update
//#define DML_TARGET_VERSION 0x2000
//#else // defined(NTDDI_WIN10_19H1) && NTDDI_VERSION >= NTDDI_WIN10_19H1 // Windows 10 1903 Update
//#define DML_TARGET_VERSION 0x1000
//#endif
//
//#endif // !defined(DML_TARGET_VERSION)
//

//

// ===================================================================================================================
//   Interface declarations
// ===================================================================================================================

interface IDMLObject;
interface IDMLDevice;
interface IDMLDeviceChild;
interface IDMLPageable;
interface IDMLDispatchable;
interface IDMLOperator;
interface IDMLCompiledOperator;
interface IDMLOperatorInitializer;
interface IDMLBindingTable;
interface IDMLCommandRecorder;


// ===================================================================================================================
//   Tensor descriptions
// ===================================================================================================================

typedef enum DML_TENSOR_DATA_TYPE
{
    DML_TENSOR_DATA_TYPE_UNKNOWN,
    DML_TENSOR_DATA_TYPE_FLOAT32,
    DML_TENSOR_DATA_TYPE_FLOAT16,
    DML_TENSOR_DATA_TYPE_UINT32,
    DML_TENSOR_DATA_TYPE_UINT16,
    DML_TENSOR_DATA_TYPE_UINT8,
    DML_TENSOR_DATA_TYPE_INT32,
    DML_TENSOR_DATA_TYPE_INT16,
    DML_TENSOR_DATA_TYPE_INT8,
    DML_TENSOR_DATA_TYPE_FLOAT64,
    DML_TENSOR_DATA_TYPE_UINT64,
    DML_TENSOR_DATA_TYPE_INT64,
} DML_TENSOR_DATA_TYPE;

typedef enum DML_TENSOR_TYPE
{
    DML_TENSOR_TYPE_INVALID,

    DML_TENSOR_TYPE_BUFFER,
} DML_TENSOR_TYPE;

typedef enum DML_TENSOR_FLAGS
{
    DML_TENSOR_FLAG_NONE = 0x0,
    DML_TENSOR_FLAG_OWNED_BY_DML = 0x1,
} DML_TENSOR_FLAGS;

//DEFINE_ENUM_FLAG_OPERATORS(DML_TENSOR_FLAGS);

typedef struct DML_BUFFER_TENSOR_DESC
{
    DML_TENSOR_DATA_TYPE DataType;
    DML_TENSOR_FLAGS Flags;
    UINT DimensionCount;
    //_Field_size_(DimensionCount) const UINT* Sizes;
    LongPtr Sizes;
    //_Field_size_opt_(DimensionCount) const UINT* Strides;
    LongPtr Strides;
    int pad1VBOnly;
    UINT64 TotalTensorSizeInBytes;
    UINT GuaranteedBaseOffsetAlignment;
    int pad2VBOnly;
} DML_BUFFER_TENSOR_DESC;

typedef struct DML_TENSOR_DESC
{
    DML_TENSOR_TYPE Type;
    //_Field_size_(_Inexpressible_("Dependent on tensor type")) const void* Desc;
    LongPtr Desc;
} DML_TENSOR_DESC;


// ===================================================================================================================
//   Operator types
// ===================================================================================================================
//tB ADDED
typedef enum DML_OPERATOR_TYPE
{
    DML_OPERATOR_INVALID,

    DML_OPERATOR_ELEMENT_WISE_IDENTITY,
    DML_OPERATOR_ELEMENT_WISE_ABS,
    DML_OPERATOR_ELEMENT_WISE_ACOS,
    DML_OPERATOR_ELEMENT_WISE_ADD,
    DML_OPERATOR_ELEMENT_WISE_ASIN,
    DML_OPERATOR_ELEMENT_WISE_ATAN,
    DML_OPERATOR_ELEMENT_WISE_CEIL,
    DML_OPERATOR_ELEMENT_WISE_CLIP,
    DML_OPERATOR_ELEMENT_WISE_COS,
    DML_OPERATOR_ELEMENT_WISE_DIVIDE,
    DML_OPERATOR_ELEMENT_WISE_EXP,
    DML_OPERATOR_ELEMENT_WISE_FLOOR,
    DML_OPERATOR_ELEMENT_WISE_LOG,
    DML_OPERATOR_ELEMENT_WISE_LOGICAL_AND,
    DML_OPERATOR_ELEMENT_WISE_LOGICAL_EQUALS,
    DML_OPERATOR_ELEMENT_WISE_LOGICAL_GREATER_THAN,
    DML_OPERATOR_ELEMENT_WISE_LOGICAL_LESS_THAN,
    DML_OPERATOR_ELEMENT_WISE_LOGICAL_NOT,
    DML_OPERATOR_ELEMENT_WISE_LOGICAL_OR,
    DML_OPERATOR_ELEMENT_WISE_LOGICAL_XOR,
    DML_OPERATOR_ELEMENT_WISE_MAX,
    DML_OPERATOR_ELEMENT_WISE_MEAN,
    DML_OPERATOR_ELEMENT_WISE_MIN,
    DML_OPERATOR_ELEMENT_WISE_MULTIPLY,
    DML_OPERATOR_ELEMENT_WISE_POW,
    DML_OPERATOR_ELEMENT_WISE_CONSTANT_POW,
    DML_OPERATOR_ELEMENT_WISE_RECIP,
    DML_OPERATOR_ELEMENT_WISE_SIN,
    DML_OPERATOR_ELEMENT_WISE_SQRT,
    DML_OPERATOR_ELEMENT_WISE_SUBTRACT,
    DML_OPERATOR_ELEMENT_WISE_TAN,
    DML_OPERATOR_ELEMENT_WISE_THRESHOLD,
    DML_OPERATOR_ELEMENT_WISE_QUANTIZE_LINEAR,
    DML_OPERATOR_ELEMENT_WISE_DEQUANTIZE_LINEAR,
    DML_OPERATOR_ACTIVATION_ELU,
    DML_OPERATOR_ACTIVATION_HARDMAX,
    DML_OPERATOR_ACTIVATION_HARD_SIGMOID,
    DML_OPERATOR_ACTIVATION_IDENTITY,
    DML_OPERATOR_ACTIVATION_LEAKY_RELU,
    DML_OPERATOR_ACTIVATION_LINEAR,
    DML_OPERATOR_ACTIVATION_LOG_SOFTMAX,
    DML_OPERATOR_ACTIVATION_PARAMETERIZED_RELU,
    DML_OPERATOR_ACTIVATION_PARAMETRIC_SOFTPLUS,
    DML_OPERATOR_ACTIVATION_RELU,
    DML_OPERATOR_ACTIVATION_SCALED_ELU,
    DML_OPERATOR_ACTIVATION_SCALED_TANH,
    DML_OPERATOR_ACTIVATION_SIGMOID,
    DML_OPERATOR_ACTIVATION_SOFTMAX,
    DML_OPERATOR_ACTIVATION_SOFTPLUS,
    DML_OPERATOR_ACTIVATION_SOFTSIGN,
    DML_OPERATOR_ACTIVATION_TANH,
    DML_OPERATOR_ACTIVATION_THRESHOLDED_RELU,
    DML_OPERATOR_CONVOLUTION,
    DML_OPERATOR_GEMM,
    DML_OPERATOR_REDUCE,
    DML_OPERATOR_AVERAGE_POOLING,
    DML_OPERATOR_LP_POOLING,
    DML_OPERATOR_MAX_POOLING,
    DML_OPERATOR_ROI_POOLING,
    DML_OPERATOR_SLICE,
    DML_OPERATOR_CAST,
    DML_OPERATOR_SPLIT,
    DML_OPERATOR_JOIN,
    DML_OPERATOR_PADDING,
    DML_OPERATOR_VALUE_SCALE_2D,
    DML_OPERATOR_UPSAMPLE_2D,
    DML_OPERATOR_GATHER,
    DML_OPERATOR_SPACE_TO_DEPTH,
    DML_OPERATOR_DEPTH_TO_SPACE,
    DML_OPERATOR_TILE,
    DML_OPERATOR_TOP_K,
    DML_OPERATOR_BATCH_NORMALIZATION,
    DML_OPERATOR_MEAN_VARIANCE_NORMALIZATION,
    DML_OPERATOR_LOCAL_RESPONSE_NORMALIZATION,
    DML_OPERATOR_LP_NORMALIZATION,
    DML_OPERATOR_RNN,
    DML_OPERATOR_LSTM,
    DML_OPERATOR_GRU,

//#if DML_TARGET_VERSION >= 0x2000
    DML_OPERATOR_ELEMENT_WISE_SIGN,
    DML_OPERATOR_ELEMENT_WISE_IS_NAN,
    DML_OPERATOR_ELEMENT_WISE_ERF,
    DML_OPERATOR_ELEMENT_WISE_SINH,
    DML_OPERATOR_ELEMENT_WISE_COSH,
    DML_OPERATOR_ELEMENT_WISE_TANH,
    DML_OPERATOR_ELEMENT_WISE_ASINH,
    DML_OPERATOR_ELEMENT_WISE_ACOSH,
    DML_OPERATOR_ELEMENT_WISE_ATANH,
    DML_OPERATOR_ELEMENT_WISE_IF,
    DML_OPERATOR_ELEMENT_WISE_ADD1,
    DML_OPERATOR_ACTIVATION_SHRINK,
    DML_OPERATOR_MAX_POOLING1,
    DML_OPERATOR_MAX_UNPOOLING,
    DML_OPERATOR_DIAGONAL_MATRIX,
    DML_OPERATOR_SCATTER_ELEMENTS,
    DML_OPERATOR_SCATTER = 94, // DML_OPERATOR_SCATTER_ELEMENTS, // Alias name for backwards compatibility.
    DML_OPERATOR_ONE_HOT,
    DML_OPERATOR_RESAMPLE,
//#endif // DML_TARGET_VERSION >= 0x2000
//
//#if DML_TARGET_VERSION >= 0x2100
    DML_OPERATOR_ELEMENT_WISE_BIT_SHIFT_LEFT,
    DML_OPERATOR_ELEMENT_WISE_BIT_SHIFT_RIGHT,
    DML_OPERATOR_ELEMENT_WISE_ROUND,
    DML_OPERATOR_ELEMENT_WISE_IS_INFINITY,
    DML_OPERATOR_ELEMENT_WISE_MODULUS_TRUNCATE,
    DML_OPERATOR_ELEMENT_WISE_MODULUS_FLOOR,
    DML_OPERATOR_FILL_VALUE_CONSTANT,
    DML_OPERATOR_FILL_VALUE_SEQUENCE,
    DML_OPERATOR_CUMULATIVE_SUMMATION,
    DML_OPERATOR_REVERSE_SUBSEQUENCES,
    DML_OPERATOR_GATHER_ELEMENTS,
    DML_OPERATOR_GATHER_ND,
    DML_OPERATOR_SCATTER_ND,
    DML_OPERATOR_MAX_POOLING2,
    DML_OPERATOR_SLICE1,
    DML_OPERATOR_TOP_K1,
    DML_OPERATOR_DEPTH_TO_SPACE1,
    DML_OPERATOR_SPACE_TO_DEPTH1,
    DML_OPERATOR_MEAN_VARIANCE_NORMALIZATION1,
    DML_OPERATOR_RESAMPLE1,
    DML_OPERATOR_MATRIX_MULTIPLY_INTEGER,
    DML_OPERATOR_QUANTIZED_LINEAR_MATRIX_MULTIPLY,
    DML_OPERATOR_CONVOLUTION_INTEGER,
    DML_OPERATOR_QUANTIZED_LINEAR_CONVOLUTION,
//#endif // DML_TARGET_VERSION >= 0x2100
//
//#if DML_TARGET_VERSION >= 0x3000
    DML_OPERATOR_ELEMENT_WISE_BIT_AND,
    DML_OPERATOR_ELEMENT_WISE_BIT_OR,
    DML_OPERATOR_ELEMENT_WISE_BIT_XOR,
    DML_OPERATOR_ELEMENT_WISE_BIT_NOT,
    DML_OPERATOR_ELEMENT_WISE_BIT_COUNT,
    DML_OPERATOR_ELEMENT_WISE_LOGICAL_GREATER_THAN_OR_EQUAL,
    DML_OPERATOR_ELEMENT_WISE_LOGICAL_LESS_THAN_OR_EQUAL,
    DML_OPERATOR_ACTIVATION_CELU,
    DML_OPERATOR_ACTIVATION_RELU_GRAD,
    DML_OPERATOR_AVERAGE_POOLING_GRAD,
    DML_OPERATOR_MAX_POOLING_GRAD,
    DML_OPERATOR_RANDOM_GENERATOR,
    DML_OPERATOR_NONZERO_COORDINATES,
    DML_OPERATOR_RESAMPLE_GRAD,
    DML_OPERATOR_SLICE_GRAD,
    DML_OPERATOR_ADAM_OPTIMIZER,
    DML_OPERATOR_ARGMIN,
    DML_OPERATOR_ARGMAX,
    DML_OPERATOR_ROI_ALIGN,
    DML_OPERATOR_GATHER_ND1,
//#endif // DML_TARGET_VERSION >= 0x3000
//
//#if DML_TARGET_VERSION >= 0x3100
    DML_OPERATOR_ELEMENT_WISE_ATAN_YX,
    DML_OPERATOR_ELEMENT_WISE_CLIP_GRAD,
    DML_OPERATOR_ELEMENT_WISE_DIFFERENCE_SQUARE,
    DML_OPERATOR_LOCAL_RESPONSE_NORMALIZATION_GRAD,
    DML_OPERATOR_CUMULATIVE_PRODUCT,
    DML_OPERATOR_BATCH_NORMALIZATION_GRAD,
//#endif // DML_TARGET_VERSION >= 0x3100
//
//#if DML_TARGET_VERSION >= 0x4000
    DML_OPERATOR_ELEMENT_WISE_QUANTIZED_LINEAR_ADD,
    DML_OPERATOR_DYNAMIC_QUANTIZE_LINEAR,
    DML_OPERATOR_ROI_ALIGN1,
//#endif // DML_TARGET_VERSION >= 0x4000
//
//#if DML_TARGET_VERSION >= 0x4100
    DML_OPERATOR_ROI_ALIGN_GRAD,
    DML_OPERATOR_BATCH_NORMALIZATION_TRAINING,
    DML_OPERATOR_BATCH_NORMALIZATION_TRAINING_GRAD,
//#endif // DML_TARGET_VERSION >= 0x4100
//
//#if DML_TARGET_VERSION >= 0x5000
    DML_OPERATOR_ELEMENT_WISE_CLIP1,
    DML_OPERATOR_ELEMENT_WISE_CLIP_GRAD1,
    DML_OPERATOR_PADDING1,
    DML_OPERATOR_ELEMENT_WISE_NEGATE,
//#endif // DML_TARGET_VERSION >= 0x5000
//
//#if DML_TARGET_VERSION >= 0x5100
    DML_OPERATOR_ACTIVATION_GELU,
    DML_OPERATOR_ACTIVATION_SOFTMAX1,
    DML_OPERATOR_ACTIVATION_LOG_SOFTMAX1,
    DML_OPERATOR_ACTIVATION_HARDMAX1,
    DML_OPERATOR_RESAMPLE2,
    DML_OPERATOR_RESAMPLE_GRAD1,
    DML_OPERATOR_DIAGONAL_MATRIX1,
//#endif // DML_TARGET_VERSION >= 0x5100
} DML_OPERATOR_TYPE;

// ===================================================================================================================
//   Operator enumerations and structures
// ===================================================================================================================

typedef enum DML_REDUCE_FUNCTION
{
    DML_REDUCE_FUNCTION_ARGMAX,
    DML_REDUCE_FUNCTION_ARGMIN,
    DML_REDUCE_FUNCTION_AVERAGE,
    DML_REDUCE_FUNCTION_L1,
    DML_REDUCE_FUNCTION_L2,
    DML_REDUCE_FUNCTION_LOG_SUM,
    DML_REDUCE_FUNCTION_LOG_SUM_EXP,
    DML_REDUCE_FUNCTION_MAX,
    DML_REDUCE_FUNCTION_MIN,
    DML_REDUCE_FUNCTION_MULTIPLY,
    DML_REDUCE_FUNCTION_SUM,
    DML_REDUCE_FUNCTION_SUM_SQUARE,
} DML_REDUCE_FUNCTION;

typedef enum DML_MATRIX_TRANSFORM
{
    DML_MATRIX_TRANSFORM_NONE,
    DML_MATRIX_TRANSFORM_TRANSPOSE,
} DML_MATRIX_TRANSFORM;

typedef enum DML_CONVOLUTION_MODE
{
    DML_CONVOLUTION_MODE_CONVOLUTION,
    DML_CONVOLUTION_MODE_CROSS_CORRELATION,
} DML_CONVOLUTION_MODE;

typedef enum DML_CONVOLUTION_DIRECTION
{
    DML_CONVOLUTION_DIRECTION_FORWARD,
    DML_CONVOLUTION_DIRECTION_BACKWARD,
} DML_CONVOLUTION_DIRECTION;

typedef enum DML_PADDING_MODE
{
    DML_PADDING_MODE_CONSTANT,
    DML_PADDING_MODE_EDGE,
    DML_PADDING_MODE_REFLECTION,

//#if DML_TARGET_VERSION >= 0x3000
    DML_PADDING_MODE_SYMMETRIC,
//#endif
} DML_PADDING_MODE;

typedef enum DML_INTERPOLATION_MODE
{
    DML_INTERPOLATION_MODE_NEAREST_NEIGHBOR,
    DML_INTERPOLATION_MODE_LINEAR,
} DML_INTERPOLATION_MODE;

typedef struct DML_SCALE_BIAS
{
    FLOAT Scale;
    FLOAT Bias;
} DML_SCALE_BIAS;

typedef struct DML_SIZE_2D
{
    UINT Width;
    UINT Height;
} DML_SIZE_2D;

typedef enum DML_RECURRENT_NETWORK_DIRECTION
{
    DML_RECURRENT_NETWORK_DIRECTION_FORWARD,
    DML_RECURRENT_NETWORK_DIRECTION_BACKWARD,
    DML_RECURRENT_NETWORK_DIRECTION_BIDIRECTIONAL,
} DML_RECURRENT_NETWORK_DIRECTION;

//#if DML_TARGET_VERSION >= 0x2100

typedef enum DML_ROUNDING_MODE
{
    DML_ROUNDING_MODE_HALVES_TO_NEAREST_EVEN,
    DML_ROUNDING_MODE_TOWARD_ZERO,
    DML_ROUNDING_MODE_TOWARD_INFINITY,
} DML_ROUNDING_MODE;

typedef enum DML_IS_INFINITY_MODE
{
    DML_IS_INFINITY_MODE_EITHER = 0,
    DML_IS_INFINITY_MODE_POSITIVE = 1,
    DML_IS_INFINITY_MODE_NEGATIVE = 2,
} DML_IS_INFINITY_MODE;

typedef enum DML_AXIS_DIRECTION
{
    DML_AXIS_DIRECTION_INCREASING = 0,
    DML_AXIS_DIRECTION_DECREASING = 1,
} DML_AXIS_DIRECTION;

typedef enum DML_DEPTH_SPACE_ORDER
{
    DML_DEPTH_SPACE_ORDER_DEPTH_COLUMN_ROW,
    DML_DEPTH_SPACE_ORDER_COLUMN_ROW_DEPTH,
} DML_DEPTH_SPACE_ORDER;

typedef struct DML_SCALAR_UNION
{
    //BYTE   Bytes[8];
    //INT8   Int8;
    //UINT8  UInt8;
    //INT16  Int16;
    //UINT16 UInt16;
    //INT32  Int32;
    //UINT32 UInt32;
    //INT64  Int64;
    UINT64 UInt64;
    //FLOAT  Float32;
    //DOUBLE Float64;
} DML_SCALAR_UNION;

//#endif // DML_TARGET_VERSION >= 0x2100

//#if DML_TARGET_VERSION >= 0x3000

typedef enum DML_RANDOM_GENERATOR_TYPE
{
    DML_RANDOM_GENERATOR_TYPE_PHILOX_4X32_10
} DML_RANDOM_GENERATOR_TYPE;

//#endif // DML_TARGET_VERSION >= 0x3000

// ===================================================================================================================
//   Operator descriptions
// ===================================================================================================================

typedef struct DML_OPERATOR_DESC
{
    DML_OPERATOR_TYPE Type;
    //_Field_size_(_Inexpressible_("Dependent on operator type")) const void* Desc;
    LongPtr Desc;
} DML_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_IDENTITY_OPERATOR_DESC
{
    //LongPtr InputTensor; //DML_TENSOR_DESC*
    //LongPtr OutputTensor; //DML_TENSOR_DESC*
    //LongPtr ScaleBias; //DDML_SCALE_BIAS*
    LongPtr InputTensor;
    LongPtr OutputTensor;
    LongPtr ScaleBias;
} DML_ELEMENT_WISE_IDENTITY_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_ABS_OPERATOR_DESC
{
    //LongPtr InputTensor; //DML_TENSOR_DESC*
    //LongPtr OutputTensor; //DML_TENSOR_DESC*
    //LongPtr ScaleBias; //DDML_SCALE_BIAS*
    LongPtr InputTensor;
    LongPtr OutputTensor;
    LongPtr ScaleBias;
} DML_ELEMENT_WISE_ABS_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_ACOS_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleBias; //DDML_SCALE_BIAS*
} DML_ELEMENT_WISE_ACOS_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_ADD_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_ADD_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_ADD1_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr FusedActivation; //DML_OPERATOR_DESC* 
} DML_ELEMENT_WISE_ADD1_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_ASIN_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleBias; //DDML_SCALE_BIAS*
} DML_ELEMENT_WISE_ASIN_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_ATAN_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleBias; //DDML_SCALE_BIAS*
} DML_ELEMENT_WISE_ATAN_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_CEIL_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleBias; //DDML_SCALE_BIAS*
} DML_ELEMENT_WISE_CEIL_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_CLIP_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleBias; //DDML_SCALE_BIAS*
    FLOAT Min;
    FLOAT Max;
} DML_ELEMENT_WISE_CLIP_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_COS_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleBias; //DDML_SCALE_BIAS*
} DML_ELEMENT_WISE_COS_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_DIVIDE_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_DIVIDE_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_EXP_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleBias; //DDML_SCALE_BIAS*
} DML_ELEMENT_WISE_EXP_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_FLOOR_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleBias; //DDML_SCALE_BIAS*
} DML_ELEMENT_WISE_FLOOR_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_LOG_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleBias; //DDML_SCALE_BIAS*
} DML_ELEMENT_WISE_LOG_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_LOGICAL_AND_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_LOGICAL_AND_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_LOGICAL_EQUALS_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_LOGICAL_EQUALS_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_LOGICAL_GREATER_THAN_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_LOGICAL_GREATER_THAN_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_LOGICAL_LESS_THAN_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_LOGICAL_LESS_THAN_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_LOGICAL_NOT_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_LOGICAL_NOT_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_LOGICAL_OR_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_LOGICAL_OR_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_LOGICAL_XOR_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_LOGICAL_XOR_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_MAX_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_MAX_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_MEAN_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_MEAN_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_MIN_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_MIN_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_MULTIPLY_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_MULTIPLY_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_POW_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr ExponentTensor; //DML_TENSOR_DESC* 
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleBias; //DDML_SCALE_BIAS*
} DML_ELEMENT_WISE_POW_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_CONSTANT_POW_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleBias; //DDML_SCALE_BIAS*
    FLOAT Exponent;
} DML_ELEMENT_WISE_CONSTANT_POW_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_RECIP_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleBias; //DDML_SCALE_BIAS*
} DML_ELEMENT_WISE_RECIP_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_SIN_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleBias; //DDML_SCALE_BIAS*
} DML_ELEMENT_WISE_SIN_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_SQRT_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleBias; //DDML_SCALE_BIAS*
} DML_ELEMENT_WISE_SQRT_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_SUBTRACT_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_SUBTRACT_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_TAN_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleBias; //DDML_SCALE_BIAS*
} DML_ELEMENT_WISE_TAN_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_THRESHOLD_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleBias; //DDML_SCALE_BIAS*
    FLOAT Min;
} DML_ELEMENT_WISE_THRESHOLD_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_QUANTIZE_LINEAR_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleTensor; //DM_TENSOR_DESC*
    LongPtr ZeroPointTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_QUANTIZE_LINEAR_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_DEQUANTIZE_LINEAR_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleTensor; //DML_TENSOR_DESC*
    LongPtr ZeroPointTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_DEQUANTIZE_LINEAR_OPERATOR_DESC;

typedef struct DML_ACTIVATION_ELU_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    FLOAT Alpha;
} DML_ACTIVATION_ELU_OPERATOR_DESC;

typedef struct DML_ACTIVATION_HARDMAX_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ACTIVATION_HARDMAX_OPERATOR_DESC;

typedef struct DML_ACTIVATION_HARD_SIGMOID_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    FLOAT Alpha;
    FLOAT Beta;
} DML_ACTIVATION_HARD_SIGMOID_OPERATOR_DESC;

typedef struct DML_ACTIVATION_IDENTITY_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ACTIVATION_IDENTITY_OPERATOR_DESC;

typedef struct DML_ACTIVATION_LEAKY_RELU_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    FLOAT Alpha;
} DML_ACTIVATION_LEAKY_RELU_OPERATOR_DESC;

typedef struct DML_ACTIVATION_LINEAR_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    FLOAT Alpha;
    FLOAT Beta;
} DML_ACTIVATION_LINEAR_OPERATOR_DESC;

typedef struct DML_ACTIVATION_LOG_SOFTMAX_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ACTIVATION_LOG_SOFTMAX_OPERATOR_DESC;

typedef struct DML_ACTIVATION_PARAMETERIZED_RELU_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr SlopeTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ACTIVATION_PARAMETERIZED_RELU_OPERATOR_DESC;

typedef struct DML_ACTIVATION_PARAMETRIC_SOFTPLUS_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    FLOAT Alpha;
    FLOAT Beta;
} DML_ACTIVATION_PARAMETRIC_SOFTPLUS_OPERATOR_DESC;

typedef struct DML_ACTIVATION_RELU_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ACTIVATION_RELU_OPERATOR_DESC;

typedef struct DML_ACTIVATION_SCALED_ELU_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    FLOAT Alpha;
    FLOAT Gamma;
} DML_ACTIVATION_SCALED_ELU_OPERATOR_DESC;

typedef struct DML_ACTIVATION_SCALED_TANH_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    FLOAT Alpha;
    FLOAT Beta;
} DML_ACTIVATION_SCALED_TANH_OPERATOR_DESC;

typedef struct DML_ACTIVATION_SIGMOID_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ACTIVATION_SIGMOID_OPERATOR_DESC;

typedef struct DML_ACTIVATION_SOFTMAX_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ACTIVATION_SOFTMAX_OPERATOR_DESC;

typedef struct DML_ACTIVATION_SOFTPLUS_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    FLOAT Steepness;
} DML_ACTIVATION_SOFTPLUS_OPERATOR_DESC;

typedef struct DML_ACTIVATION_SOFTSIGN_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ACTIVATION_SOFTSIGN_OPERATOR_DESC;

typedef struct DML_ACTIVATION_TANH_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ACTIVATION_TANH_OPERATOR_DESC;

typedef struct DML_ACTIVATION_THRESHOLDED_RELU_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    FLOAT Alpha;
} DML_ACTIVATION_THRESHOLDED_RELU_OPERATOR_DESC;

typedef struct DML_CONVOLUTION_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr FilterTensor; //DML_TENSOR_DESC*
    LongPtr BiasTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    DML_CONVOLUTION_MODE Mode;
    DML_CONVOLUTION_DIRECTION Direction;
    UINT DimensionCount;
    LongPtr Strides; //_Field_size_(DimensionCount) const UINT* 
    LongPtr Dilations; //_Field_size_(DimensionCount) const UINT* 
    LongPtr StartPadding; //_Field_size_(DimensionCount) const UINT* 
    LongPtr EndPadding; //_Field_size_(DimensionCount) const UINT* 
    LongPtr OutputPadding; //_Field_size_(DimensionCount) const UINT* 
    UINT GroupCount;
    LongPtr FusedActivation; //DML_OPERATOR_DESC* 
} DML_CONVOLUTION_OPERATOR_DESC;

typedef struct DML_GEMM_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr CTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    DML_MATRIX_TRANSFORM TransA;
    DML_MATRIX_TRANSFORM TransB;
    FLOAT Alpha;
    FLOAT Beta;
    LongPtr FusedActivation; //DML_OPERATOR_DESC* 
} DML_GEMM_OPERATOR_DESC;

typedef struct DML_REDUCE_OPERATOR_DESC
{
    DML_REDUCE_FUNCTION Function;
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT AxisCount;
    //LongPtr Axes; //_Field_size_(AxisCount) const UINT* 
    LongPtr Axes;
} DML_REDUCE_OPERATOR_DESC;

typedef struct DML_AVERAGE_POOLING_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT DimensionCount;
    LongPtr Strides; //_Field_size_(DimensionCount) const UINT* 
    LongPtr WindowSize; //_Field_size_(DimensionCount) const UINT* 
    LongPtr StartPadding; //_Field_size_(DimensionCount) const UINT* 
    LongPtr EndPadding; //_Field_size_(DimensionCount) const UINT* 
    BOOL IncludePadding;
} DML_AVERAGE_POOLING_OPERATOR_DESC;

typedef struct DML_LP_POOLING_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT DimensionCount;
    LongPtr Strides; //_Field_size_(DimensionCount) const UINT* 
    LongPtr WindowSize; //_Field_size_(DimensionCount) const UINT* 
    LongPtr StartPadding; //_Field_size_(DimensionCount) const UINT* 
    LongPtr EndPadding; //_Field_size_(DimensionCount) const UINT* 
    UINT P;
} DML_LP_POOLING_OPERATOR_DESC;

typedef struct DML_MAX_POOLING_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT DimensionCount;
    LongPtr Strides; //_Field_size_(DimensionCount) const UINT* 
    LongPtr WindowSize; //_Field_size_(DimensionCount) const UINT* 
    LongPtr StartPadding; //_Field_size_(DimensionCount) const UINT* 
    LongPtr EndPadding; //_Field_size_(DimensionCount) const UINT* 
} DML_MAX_POOLING_OPERATOR_DESC;

typedef struct DML_ROI_POOLING_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr ROITensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    FLOAT SpatialScale;
    DML_SIZE_2D PooledSize;
} DML_ROI_POOLING_OPERATOR_DESC;

typedef struct DML_SLICE_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT DimensionCount;
    LongPtr Offsets; //_Field_size_(DimensionCount) const UINT* 
    LongPtr Sizes; //_Field_size_(DimensionCount) const UINT* 
    LongPtr Strides; //_Field_size_(DimensionCount) const UINT* 
} DML_SLICE_OPERATOR_DESC;

typedef struct DML_CAST_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_CAST_OPERATOR_DESC;

typedef struct DML_SPLIT_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    UINT OutputCount;
    LongPtr OutputTensors; //DML_TENSOR_DESC*
    UINT Axis;
} DML_SPLIT_OPERATOR_DESC;

typedef struct DML_JOIN_OPERATOR_DESC
{
    UINT InputCount;
    LongPtr InputTensors; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT Axis;
} DML_JOIN_OPERATOR_DESC;

typedef struct DML_PADDING_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    DML_PADDING_MODE PaddingMode;
    FLOAT PaddingValue;
    UINT DimensionCount;
    LongPtr StartPadding; //_Field_size_(DimensionCount) const UINT* 
    LongPtr EndPadding; //_Field_size_(DimensionCount) const UINT* 
} DML_PADDING_OPERATOR_DESC;

typedef struct DML_VALUE_SCALE_2D_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    FLOAT Scale;
    UINT ChannelCount;
    LongPtr Bias; //_Field_size_(ChannelCount) const FLOAT*
} DML_VALUE_SCALE_2D_OPERATOR_DESC;

typedef struct DML_UPSAMPLE_2D_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    DML_SIZE_2D ScaleSize;
    DML_INTERPOLATION_MODE InterpolationMode;
} DML_UPSAMPLE_2D_OPERATOR_DESC;

typedef struct DML_GATHER_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr IndicesTensor; //DM_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT Axis;
    UINT IndexDimensions;
} DML_GATHER_OPERATOR_DESC;

typedef struct DML_SPACE_TO_DEPTH_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT BlockSize;
} DML_SPACE_TO_DEPTH_OPERATOR_DESC;

typedef struct DML_DEPTH_TO_SPACE_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT BlockSize;
} DML_DEPTH_TO_SPACE_OPERATOR_DESC;

typedef struct DML_TILE_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT RepeatsCount;
    LongPtr Repeats; //_Field_size_(RepeatsCount) const UINT* 
} DML_TILE_OPERATOR_DESC;

typedef struct DML_TOP_K_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputValueTensor; //DML_TENSOR_DESC*
    LongPtr OutputIndexTensor; //DML_TENSOR_DESC*
    UINT Axis;
    UINT K;
} DML_TOP_K_OPERATOR_DESC;

typedef struct DML_BATCH_NORMALIZATION_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr MeanTensor; //DM_TENSOR_DESC*
    LongPtr VarianceTensor; //DM_TENSOR_DESC*
    LongPtr ScaleTensor; //DM_TENSOR_DESC*
    LongPtr BiasTensor; //DM_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    BOOL Spatial;
    FLOAT Epsilon;
    LongPtr FusedActivation; //DML_OPERATOR_DESC*
} DML_BATCH_NORMALIZATION_OPERATOR_DESC;

typedef struct DML_MEAN_VARIANCE_NORMALIZATION_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleTensor; //DM_TENSOR_DESC*
    LongPtr BiasTensor; //DM_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    BOOL CrossChannel;
    BOOL NormalizeVariance;
    FLOAT Epsilon;
    LongPtr FusedActivation; //DML_OPERATOR_DESC*
} DML_MEAN_VARIANCE_NORMALIZATION_OPERATOR_DESC;

typedef struct DML_LOCAL_RESPONSE_NORMALIZATION_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    BOOL CrossChannel;
    UINT LocalSize;
    FLOAT Alpha;
    FLOAT Beta;
    FLOAT Bias;
} DML_LOCAL_RESPONSE_NORMALIZATION_OPERATOR_DESC;

typedef struct DML_LP_NORMALIZATION_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT Axis;
    FLOAT Epsilon;
    UINT P;
} DML_LP_NORMALIZATION_OPERATOR_DESC;

typedef struct DML_RNN_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr WeightTensor; //DM_TENSOR_DESC*
    LongPtr ReurrenceTensor; //DM_TENSOR_DESC*
    LongPtr BiasTensor; //DM_TENSOR_DESC*
    LongPtr HiddenInitTensor; //DM_TENSOR_DESC*
    LongPtr SequenceLengthsTensor; //DM_TENSOR_DESC*
    LongPtr OutputSequenceTensor; //DM_TENSOR_DESC*
    LongPtr OutputSingleTensor; //DM_TENSOR_DESC*
    UINT ActivationDescCount;
    LongPtr ActivationDescs; //DML_OPERATOR_DESC*
    DML_RECURRENT_NETWORK_DIRECTION Direction;
} DML_RNN_OPERATOR_DESC;

typedef struct DML_LSTM_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr WeightTensor; //DM_TENSOR_DESC*
    LongPtr ReurrenceTensor; //DM_TENSOR_DESC*
    LongPtr BiasTensor; //DM_TENSOR_DESC*
    LongPtr HiddenInitTensor; //DM_TENSOR_DESC*
    LongPtr CellMemInitTensor; //DM_TENSOR_DESC*
    LongPtr SequenceLengthsTensor; //DM_TENSOR_DESC*
    LongPtr PeepholeTensor;
    LongPtr OutputSequenceTensor; //DM_TENSOR_DESC*
    LongPtr OutputSingleTensor; //DM_TENSOR_DESC*
    LongPtr OutputCellSingleTensor; //DM_TENSOR_DESC*
    UINT ActivationDescCount;
    LongPtr ActivationDescs; //DML_OPERATOR_DESC*
    DML_RECURRENT_NETWORK_DIRECTION Direction;
    float ClipThreshold;
    BOOL UseClipThreshold;
    BOOL CoupleInputForget;
} DML_LSTM_OPERATOR_DESC;

typedef struct DML_GRU_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr WeightTensor; //DM_TENSOR_DESC*
    LongPtr ReurrenceTensor; //DM_TENSOR_DESC*
    LongPtr BiasTensor; //DM_TENSOR_DESC*
    LongPtr HiddenInitTensor; //DM_TENSOR_DESC*
    LongPtr SequenceLengthsTensor; //DM_TENSOR_DESC*
    LongPtr OutputSequenceTensor; //DM_TENSOR_DESC*
    LongPtr OutputSingleTensor; //DM_TENSOR_DESC*
    UINT ActivationDescCount;
    LongPtr ActivationDescs; //DML_OPERATOR_DESC*
    DML_RECURRENT_NETWORK_DIRECTION Direction;
    BOOL LinearBeforeReset;
} DML_GRU_OPERATOR_DESC;

//#if DML_TARGET_VERSION >= 0x2000

typedef struct DML_ELEMENT_WISE_SIGN_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_SIGN_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_IS_NAN_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_IS_NAN_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_ERF_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleBias; //DDML_SCALE_BIAS*
} DML_ELEMENT_WISE_ERF_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_SINH_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleBias; //DDML_SCALE_BIAS*
} DML_ELEMENT_WISE_SINH_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_COSH_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleBias; //DDML_SCALE_BIAS*
} DML_ELEMENT_WISE_COSH_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_TANH_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleBias; //DDML_SCALE_BIAS*
} DML_ELEMENT_WISE_TANH_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_ASINH_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleBias; //DDML_SCALE_BIAS*
} DML_ELEMENT_WISE_ASINH_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_ACOSH_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleBias; //DDML_SCALE_BIAS*
} DML_ELEMENT_WISE_ACOSH_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_ATANH_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleBias; //DDML_SCALE_BIAS*
} DML_ELEMENT_WISE_ATANH_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_IF_OPERATOR_DESC
{
    LongPtr ConditionTensor; //DML_TENSOR_DESC*
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_IF_OPERATOR_DESC;

typedef struct DML_ACTIVATION_SHRINK_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    FLOAT Bias;
    FLOAT Threshold;
} DML_ACTIVATION_SHRINK_OPERATOR_DESC;

typedef struct DML_MAX_POOLING1_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr OutputIndicesTensor; //DML_TENSOR_DESC*
    UINT DimensionCount;
    LongPtr Strides; //_Field_size_(DimensionCount) const UINT* 
    LongPtr WindowSize; //_Field_size_(DimensionCount) const UINT* 
    LongPtr StartPadding; //_Field_size_(DimensionCount) const UINT* 
    LongPtr EndPadding; //_Field_size_(DimensionCount) const UINT* 
} DML_MAX_POOLING1_OPERATOR_DESC;

typedef struct DML_MAX_UNPOOLING_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr IndicesTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_MAX_UNPOOLING_OPERATOR_DESC;

typedef struct DML_DIAGONAL_MATRIX_OPERATOR_DESC
{
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    INT Offset;
    FLOAT Value;
} DML_DIAGONAL_MATRIX_OPERATOR_DESC;

typedef struct DML_SCATTER_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr IndicesTensor; //DM_TENSOR_DESC*
    LongPtr UpdatesTensor; //DM_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT Axis;
} DML_SCATTER_OPERATOR_DESC;

typedef struct DML_ONE_HOT_OPERATOR_DESC
{
    LongPtr IndicesTensor; //DM_TENSOR_DESC*
    LongPtr ValuesTensor; //DM_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT Axis;
} DML_ONE_HOT_OPERATOR_DESC;

typedef struct DML_RESAMPLE_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    DML_INTERPOLATION_MODE InterpolationMode;
    UINT ScaleCount;
    LongPtr Scales; //_Field_size_(ScaleCount) const FLOAT* 
} DML_RESAMPLE_OPERATOR_DESC;

//#endif // DML_TARGET_VERSION >= 0x2000
//
//#if DML_TARGET_VERSION >= 0x2100

typedef struct DML_ELEMENT_WISE_BIT_SHIFT_LEFT_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_BIT_SHIFT_LEFT_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_BIT_SHIFT_RIGHT_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_BIT_SHIFT_RIGHT_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_ROUND_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    DML_ROUNDING_MODE RoundingMode;
} DML_ELEMENT_WISE_ROUND_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_IS_INFINITY_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    DML_IS_INFINITY_MODE InfinityMode;
} DML_ELEMENT_WISE_IS_INFINITY_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_MODULUS_TRUNCATE_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_MODULUS_TRUNCATE_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_MODULUS_FLOOR_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_MODULUS_FLOOR_OPERATOR_DESC;

typedef struct DML_FILL_VALUE_CONSTANT_OPERATOR_DESC
{
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    DML_TENSOR_DATA_TYPE ValueDataType;
    DML_SCALAR_UNION Value;
} DML_FILL_VALUE_CONSTANT_OPERATOR_DESC;

typedef struct DML_FILL_VALUE_SEQUENCE_OPERATOR_DESC
{
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    DML_TENSOR_DATA_TYPE ValueDataType;
    DML_SCALAR_UNION ValueStart;
    DML_SCALAR_UNION ValueDelta;
} DML_FILL_VALUE_SEQUENCE_OPERATOR_DESC;

typedef struct DML_CUMULATIVE_SUMMATION_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT Axis;
    DML_AXIS_DIRECTION AxisDirection;
    BOOL HasExclusiveSum;
} DML_CUMULATIVE_SUMMATION_OPERATOR_DESC;

typedef struct DML_REVERSE_SUBSEQUENCES_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr SequenceLengthsTensor; //DM_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT Axis;
} DML_REVERSE_SUBSEQUENCES_OPERATOR_DESC;

typedef struct DML_GATHER_ELEMENTS_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr IndicesTensor; //DM_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT Axis;
} DML_GATHER_ELEMENTS_OPERATOR_DESC;

// Alias existing operator, symmetric with DML_GATHER_ELEMENTS_OPERATOR_DESC.
//using DML_SCATTER_ELEMENTS_OPERATOR_DESC = DML_SCATTER_OPERATOR_DESC;
typedef DML_SCATTER_OPERATOR_DESC DML_SCATTER_ELEMENTS_OPERATOR_DESC;

typedef struct DML_GATHER_ND_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr IndicesTensor; //DM_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT InputDimensionCount;
    UINT IndicesDimensionCount;
} DML_GATHER_ND_OPERATOR_DESC;

typedef struct DML_SCATTER_ND_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr IndicesTensor; //DM_TENSOR_DESC*
    LongPtr UpdatesTensor; //DM_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT InputDimensionCount;
    UINT IndicesDimensionCount;
} DML_SCATTER_ND_OPERATOR_DESC;

typedef struct DML_MAX_POOLING2_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr OutputIndicesTensor; //DML_TENSOR_DESC*
    UINT DimensionCount;
    LongPtr Strides; //_Field_size_(DimensionCount) const UINT* 
    LongPtr WindowSize; //_Field_size_(DimensionCount) const UINT* 
    LongPtr StartPadding; //_Field_size_(DimensionCount) const UINT* 
    LongPtr EndPadding; //_Field_size_(DimensionCount) const UINT* 
    LongPtr Dilations; //_Field_size_(DimensionCount) const UINT* 
} DML_MAX_POOLING2_OPERATOR_DESC;

typedef struct DML_SLICE1_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT DimensionCount;
    LongPtr InputWindowOffsets; //_Field_size_(DimensionCount) const UINT* InputWindowOffsets;
    LongPtr InputWindowSizes; //_Field_size_(DimensionCount) const UINT* InputWindowSizes;
    LongPtr InputWindowStrides; //_Field_size_(DimensionCount) const INT* 
} DML_SLICE1_OPERATOR_DESC;

typedef struct DML_TOP_K1_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputValueTensor; //DML_TENSOR_DESC*
    LongPtr OutputIndexTensor; //DML_TENSOR_DESC*
    UINT Axis;
    UINT K;
    DML_AXIS_DIRECTION AxisDirection;
} DML_TOP_K1_OPERATOR_DESC;

typedef struct DML_DEPTH_TO_SPACE1_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT BlockSize;
    DML_DEPTH_SPACE_ORDER Order;
} DML_DEPTH_TO_SPACE1_OPERATOR_DESC;

typedef struct DML_SPACE_TO_DEPTH1_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT BlockSize;
    DML_DEPTH_SPACE_ORDER Order;
} DML_SPACE_TO_DEPTH1_OPERATOR_DESC;

typedef struct DML_MEAN_VARIANCE_NORMALIZATION1_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleTensor; //DM_TENSOR_DESC*
    LongPtr BiasTensor; //DM_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT AxisCount;
    LongPtr Axes; //_Field_size_(AxisCount) const UINT* 
    BOOL NormalizeVariance;
    FLOAT Epsilon;
    LongPtr FusedActivation; //DML_OPERATOR_DESC*
} DML_MEAN_VARIANCE_NORMALIZATION1_OPERATOR_DESC;

typedef struct DML_RESAMPLE1_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    DML_INTERPOLATION_MODE InterpolationMode;
    UINT DimensionCount;
    LongPtr Scales;  //_Field_size_(DimensionCount) const FLOAT* 
    LongPtr InputPixelOffsets;  //_Field_size_(DimensionCount) const FLOAT* 
    LongPtr OutputPixelOffsets;  //_Field_size_(DimensionCount) const FLOAT* 
} DML_RESAMPLE1_OPERATOR_DESC;

typedef struct DML_MATRIX_MULTIPLY_INTEGER_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr AZeroPointTensor; //DM_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr BZeroPointTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_MATRIX_MULTIPLY_INTEGER_OPERATOR_DESC;

typedef struct DML_QUANTIZED_LINEAR_MATRIX_MULTIPLY_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr AScaleTensor; //DM_TENSOR_DESC*
    LongPtr AZeroPointTensor; //DM_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr BScaleTensor; //DML_TENSOR_DESC*
    LongPtr BZeroPointTensor; //DML_TENSOR_DESC*
    LongPtr OutputScaleTensor; //DM_TENSOR_DESC*
    LongPtr OutputZeroPointTensor; //DM_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_QUANTIZED_LINEAR_MATRIX_MULTIPLY_OPERATOR_DESC;

typedef struct DML_CONVOLUTION_INTEGER_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr InputZeroPointTensor; //DML_TENSOR_DESC*
    LongPtr FilterTensor; //DML_TENSOR_DESC*
    LongPtr FilterZeroPointTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT DimensionCount;
    LongPtr Strides; //_Field_size_(DimensionCount) const UINT* 
    LongPtr Dilations; //_Field_size_(DimensionCount) const UINT* 
    LongPtr StartPadding; //_Field_size_(DimensionCount) const UINT* 
    LongPtr EndPadding; //_Field_size_(DimensionCount) const UINT*
    UINT GroupCount;
} DML_CONVOLUTION_INTEGER_OPERATOR_DESC;

typedef struct DML_QUANTIZED_LINEAR_CONVOLUTION_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr InputScaleTensor; //DML_TENSOR_DESC*
    LongPtr InputZeroPointTensor; //DML_TENSOR_DESC*
    LongPtr FilterTensor; //DML_TENSOR_DESC*
    LongPtr FilterScaleTensor; //DML_TENSOR_DESC*
    LongPtr FilterZeroPointTensor; //DML_TENSOR_DESC*
    LongPtr BiasTensor; //DM_TENSOR_DESC*
    LongPtr OutputScaleTensor; //DM_TENSOR_DESC*
    LongPtr OutputZeroPointTensor; //DM_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT DimensionCount;
    LongPtr Strides; //_Field_size_(DimensionCount) const UINT* 
    LongPtr Dilations; //_Field_size_(DimensionCount) const UINT* 
    LongPtr StartPadding; //_Field_size_(DimensionCount) const UINT* 
    LongPtr EndPadding; //_Field_size_(DimensionCount) const UINT* 
    UINT GroupCount;
} DML_QUANTIZED_LINEAR_CONVOLUTION_OPERATOR_DESC;

//#endif // DML_TARGET_VERSION >= 0x2100
//
//#if DML_TARGET_VERSION >= 0x3000

typedef struct DML_ELEMENT_WISE_BIT_AND_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_BIT_AND_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_BIT_OR_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_BIT_OR_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_BIT_XOR_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_BIT_XOR_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_BIT_NOT_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_BIT_NOT_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_BIT_COUNT_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_BIT_COUNT_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_LOGICAL_GREATER_THAN_OR_EQUAL_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_LOGICAL_GREATER_THAN_OR_EQUAL_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_LOGICAL_LESS_THAN_OR_EQUAL_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_LOGICAL_LESS_THAN_OR_EQUAL_OPERATOR_DESC;

typedef struct DML_ACTIVATION_CELU_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    FLOAT Alpha;
} DML_ACTIVATION_CELU_OPERATOR_DESC;

typedef struct DML_ACTIVATION_RELU_GRAD_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr InputGradientTensor; //DML_TENSOR_DESC*
    LongPtr OutputGradientTensor; //DML_TENSOR_DESC*
} DML_ACTIVATION_RELU_GRAD_OPERATOR_DESC;

typedef struct DML_AVERAGE_POOLING_GRAD_OPERATOR_DESC
{
    LongPtr InputGradientTensor; //DML_TENSOR_DESC*
    LongPtr OutputGradientTensor; //DML_TENSOR_DESC*
    UINT DimensionCount;
    LongPtr Strides; //_Field_size_(DimensionCount) const UINT* 
    LongPtr WindowSize; //_Field_size_(DimensionCount) const UINT* 
    LongPtr StartPadding; //_Field_size_(DimensionCount) const UINT* 
    LongPtr EndPadding; //_Field_size_(DimensionCount) const UINT* 
    BOOL IncludePadding;
} DML_AVERAGE_POOLING_GRAD_OPERATOR_DESC;

typedef struct DML_MAX_POOLING_GRAD_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr InputGradientTensor; //DML_TENSOR_DESC*
    LongPtr OutputGradientTensor; //DML_TENSOR_DESC*
    UINT DimensionCount;
    LongPtr Strides; //_Field_size_(DimensionCount) const UINT* 
    LongPtr WindowSize; //_Field_size_(DimensionCount) const UINT* 
    LongPtr StartPadding; //_Field_size_(DimensionCount) const UINT* 
    LongPtr EndPadding; //_Field_size_(DimensionCount) const UINT* 
    LongPtr Dilations; //_Field_size_(DimensionCount) const UINT* 
} DML_MAX_POOLING_GRAD_OPERATOR_DESC;

typedef struct DML_RANDOM_GENERATOR_OPERATOR_DESC
{
    LongPtr InputStateTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr OutputStateTensor; //DML_TENSOR_DESC*
    DML_RANDOM_GENERATOR_TYPE Type;
} DML_RANDOM_GENERATOR_OPERATOR_DESC;

typedef struct DML_NONZERO_COORDINATES_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputCountTensor; //DML_TENSOR_DESC*
    LongPtr OutputCoordinatesTensor; //DML_TENSOR_DESC*
} DML_NONZERO_COORDINATES_OPERATOR_DESC;

typedef struct DML_RESAMPLE_GRAD_OPERATOR_DESC
{
    LongPtr InputGradientTensor; //DML_TENSOR_DESC*
    LongPtr OutputGradientTensor; //DML_TENSOR_DESC*
    DML_INTERPOLATION_MODE InterpolationMode;
    UINT DimensionCount;
    LongPtr Scales;  //_Field_size_(DimensionCount) const FLOAT* 
    LongPtr InputPixelOffsets;  //_Field_size_(DimensionCount) const FLOAT* 
    LongPtr OutputPixelOffsets;  //_Field_size_(DimensionCount) const FLOAT* 
} DML_RESAMPLE_GRAD_OPERATOR_DESC;

typedef struct DML_SLICE_GRAD_OPERATOR_DESC
{
    LongPtr InputGradientTensor; //DML_TENSOR_DESC*
    LongPtr OutputGradientTensor; //DML_TENSOR_DESC*
    UINT DimensionCount;
    LongPtr InputWindowOffsets; //_Field_size_(DimensionCount) const UINT* 
    LongPtr InputWindowSizes; //_Field_size_(DimensionCount) const UINT* 
    LongPtr InputWindowStrides; //_Field_size_(DimensionCount) const INT* 
} DML_SLICE_GRAD_OPERATOR_DESC;

typedef struct DML_ADAM_OPTIMIZER_OPERATOR_DESC
{
    LongPtr InputParametersTensor; //DML_TENSOR_DESC*
    LongPtr InputFirstMomentTensor; //DML_TENSOR_DESC*
    LongPtr InputSecondMomentTensor; //DML_TENSOR_DESC*
    LongPtr GradientTensor; //DML_TENSOR_DESC*
    LongPtr TrainingStepTensor; //DML_TENSOR_DESC*
    LongPtr OutputParametersTensor; //DML_TENSOR_DESC*
    LongPtr OutputFirstMomentTensor; //DML_TENSOR_DESC*
    LongPtr OutputSecondMomentTensor; //DML_TENSOR_DESC*
    FLOAT LearningRate;
    FLOAT Beta1;
    FLOAT Beta2;
    FLOAT Epsilon;
} DML_ADAM_OPTIMIZER_OPERATOR_DESC;

typedef struct DML_ARGMIN_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT AxisCount;
    LongPtr Axes; //_Field_size_(AxisCount) const UINT* 
    DML_AXIS_DIRECTION AxisDirection;
} DML_ARGMIN_OPERATOR_DESC;

typedef struct DML_ARGMAX_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT AxisCount;
    LongPtr Axes; //_Field_size_(AxisCount) const UINT* 
    DML_AXIS_DIRECTION AxisDirection;
} DML_ARGMAX_OPERATOR_DESC;

typedef struct DML_ROI_ALIGN_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr ROITensor; //DML_TENSOR_DESC*
    LongPtr BatchIndicesTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    DML_REDUCE_FUNCTION ReductionFunction;
    DML_INTERPOLATION_MODE InterpolationMode;
    FLOAT SpatialScaleX;
    FLOAT SpatialScaleY;
    FLOAT OutOfBoundsInputValue;
    UINT MinimumSamplesPerOutput;
    UINT MaximumSamplesPerOutput;
} DML_ROI_ALIGN_OPERATOR_DESC;

typedef struct DML_GATHER_ND1_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr IndicesTensor; //DM_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT InputDimensionCount;
    UINT IndicesDimensionCount;
    UINT BatchDimensionCount;
} DML_GATHER_ND1_OPERATOR_DESC;

//#endif // DML_TARGET_VERSION >= 0x3000
//
//#if DML_TARGET_VERSION >= 0x3100

typedef struct DML_ELEMENT_WISE_ATAN_YX_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_ATAN_YX_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_CLIP_GRAD_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr InputGradientTensor; //DML_TENSOR_DESC*
    LongPtr OutputGradientTensor; //DML_TENSOR_DESC*
    FLOAT Min;
    FLOAT Max;
} DML_ELEMENT_WISE_CLIP_GRAD_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_DIFFERENCE_SQUARE_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_DIFFERENCE_SQUARE_OPERATOR_DESC;

typedef struct DML_LOCAL_RESPONSE_NORMALIZATION_GRAD_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr InputGradientTensor; //DML_TENSOR_DESC*
    LongPtr OutputGradientTensor; //DML_TENSOR_DESC*
    BOOL CrossChannel;
    UINT LocalSize;
    FLOAT Alpha;
    FLOAT Beta;
    FLOAT Bias;
} DML_LOCAL_RESPONSE_NORMALIZATION_GRAD_OPERATOR_DESC;

typedef struct DML_CUMULATIVE_PRODUCT_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT Axis;
    DML_AXIS_DIRECTION AxisDirection;
    BOOL HasExclusiveProduct;
} DML_CUMULATIVE_PRODUCT_OPERATOR_DESC;

typedef struct DML_BATCH_NORMALIZATION_GRAD_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr InputGradientTensor; //DML_TENSOR_DESC*
    LongPtr MeanTensor; //DM_TENSOR_DESC*
    LongPtr VarianceTensor; //DM_TENSOR_DESC*
    LongPtr ScaleTensor; //DM_TENSOR_DESC*

    LongPtr OutputGradientTensor; //DML_TENSOR_DESC*
    LongPtr OutputScaleGradientTensor; //DML_TENSOR_DESC*
    LongPtr OutputBiasGradientTensor; //DML_TENSOR_DESC*

    FLOAT Epsilon;
} DML_BATCH_NORMALIZATION_GRAD_OPERATOR_DESC;

//#endif // DML_TARGET_VERSION >= 0x3100
//
//#if DML_TARGET_VERSION >= 0x4000
typedef struct DML_ELEMENT_WISE_QUANTIZED_LINEAR_ADD_OPERATOR_DESC
{
    LongPtr ATensor; //DML_TENSOR_DESC*
    LongPtr AScaleTensor; //DM_TENSOR_DESC*
    LongPtr AZeroPointTensor; //DM_TENSOR_DESC*
    LongPtr BTensor; //DML_TENSOR_DESC*
    LongPtr BScaleTensor; //DML_TENSOR_DESC*
    LongPtr BZeroPointTensor; //DML_TENSOR_DESC*
    LongPtr OutputScaleTensor; //DM_TENSOR_DESC*                   // This is an input tensor
    LongPtr OutputZeroPointTensor; //DM_TENSOR_DESC*   // This is an input tensor
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_QUANTIZED_LINEAR_ADD_OPERATOR_DESC;

typedef struct DML_DYNAMIC_QUANTIZE_LINEAR_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr OutputScaleTensor; //DM_TENSOR_DESC*                   // This is an output tensor
    LongPtr OutputZeroPointTensor; //DM_TENSOR_DESC*               // This is an output tensor
} DML_DYNAMIC_QUANTIZE_LINEAR_OPERATOR_DESC;

typedef struct DML_ROI_ALIGN1_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr ROITensor; //DML_TENSOR_DESC*
    LongPtr BatchIndicesTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    DML_REDUCE_FUNCTION ReductionFunction;
    DML_INTERPOLATION_MODE InterpolationMode;
    FLOAT SpatialScaleX;
    FLOAT SpatialScaleY;
    FLOAT InputPixelOffset;
    FLOAT OutputPixelOffset;
    FLOAT OutOfBoundsInputValue;
    UINT MinimumSamplesPerOutput;
    UINT MaximumSamplesPerOutput;
    BOOL AlignRegionsToCorners;
} DML_ROI_ALIGN1_OPERATOR_DESC;

//#endif // DML_TARGET_VERSION >= 0x4000
//
//#if DML_TARGET_VERSION >= 0x4100

typedef struct DML_ROI_ALIGN_GRAD_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr InputGradientTensor; //DML_TENSOR_DESC*
    LongPtr ROITensor; //DML_TENSOR_DESC*
    LongPtr BatchIndicesTensor; //DML_TENSOR_DESC*
    LongPtr OutputGradientTensor; //DML_TENSOR_DESC*
    LongPtr OutputROIGradientTensor; //DML_TENSOR_DESC*
    DML_REDUCE_FUNCTION ReductionFunction; //DML_TENSOR_DESC*
    DML_INTERPOLATION_MODE InterpolationMode; //DML_TENSOR_DESC*
    FLOAT SpatialScaleX;
    FLOAT SpatialScaleY;
    FLOAT InputPixelOffset;
    FLOAT OutputPixelOffset;
    UINT MinimumSamplesPerOutput;
    UINT MaximumSamplesPerOutput;
    BOOL AlignRegionsToCorners;
} DML_ROI_ALIGN_GRAD_OPERATOR_DESC;

typedef struct DML_BATCH_NORMALIZATION_TRAINING_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleTensor; //DM_TENSOR_DESC*
    LongPtr BiasTensor; //DM_TENSOR_DESC*
    LongPtr FusedAddTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr OutputMeanTensor; //DML_TENSOR_DESC*
    LongPtr OutputVarianceTensor; //DML_TENSOR_DESC*
    FLOAT Epsilon;
    LongPtr FusedActivation; //DML_OPERATOR_DESC*
} DML_BATCH_NORMALIZATION_TRAINING_OPERATOR_DESC;

typedef struct DML_BATCH_NORMALIZATION_TRAINING_GRAD_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr InputGradientTensor; //DML_TENSOR_DESC*
    LongPtr MeanTensor; //DM_TENSOR_DESC*
    LongPtr VarianceTensor; //DM_TENSOR_DESC*
    LongPtr ScaleTensor; //DM_TENSOR_DESC*
    LongPtr OutputGradientTensor; //DML_TENSOR_DESC*
    LongPtr OutputScaleGradientTensor; //DML_TENSOR_DESC*
    LongPtr OutputBiasGradientTensor; //DML_TENSOR_DESC*
    FLOAT Epsilon;
} DML_BATCH_NORMALIZATION_TRAINING_GRAD_OPERATOR_DESC;

//#endif // DML_TARGET_VERSION >= 0x4100
//
//#if DML_TARGET_VERSION >= 0x5000

typedef struct DML_ELEMENT_WISE_CLIP1_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    LongPtr ScaleBias; //DDML_SCALE_BIAS*
    DML_TENSOR_DATA_TYPE MinMaxDataType;
    DML_SCALAR_UNION Min;
    DML_SCALAR_UNION Max;
} DML_ELEMENT_WISE_CLIP1_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_CLIP_GRAD1_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr InputGradientTensor; //DML_TENSOR_DESC*
    LongPtr OutputGradientTensor; //DML_TENSOR_DESC*
    DML_TENSOR_DATA_TYPE MinMaxDataType;
    DML_SCALAR_UNION Min;
    DML_SCALAR_UNION Max;
} DML_ELEMENT_WISE_CLIP_GRAD1_OPERATOR_DESC;

typedef struct DML_PADDING1_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    DML_PADDING_MODE PaddingMode;
    DML_TENSOR_DATA_TYPE PaddingValueDataType;
    DML_SCALAR_UNION PaddingValue;
    UINT DimensionCount;
    LongPtr StartPadding; //_Field_size_(DimensionCount) const UINT* 
    LongPtr EndPadding; //_Field_size_(DimensionCount) const UINT* 
} DML_PADDING1_OPERATOR_DESC;

typedef struct DML_ELEMENT_WISE_NEGATE_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ELEMENT_WISE_NEGATE_OPERATOR_DESC;

//#endif // DML_TARGET_VERSION >= 0x5000
//
//#if DML_TARGET_VERSION >= 0x5100

typedef struct DML_ACTIVATION_GELU_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
} DML_ACTIVATION_GELU_OPERATOR_DESC;

typedef struct DML_ACTIVATION_SOFTMAX1_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT AxisCount;
    LongPtr Axes; //_Field_size_(AxisCount) const UINT* 
} DML_ACTIVATION_SOFTMAX1_OPERATOR_DESC;

typedef struct DML_ACTIVATION_LOG_SOFTMAX1_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT AxisCount;
    LongPtr Axes; //_Field_size_(AxisCount) const UINT* 
} DML_ACTIVATION_LOG_SOFTMAX1_OPERATOR_DESC;

typedef struct DML_ACTIVATION_HARDMAX1_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    UINT AxisCount;
    LongPtr Axes; //_Field_size_(AxisCount) const UINT* 
} DML_ACTIVATION_HARDMAX1_OPERATOR_DESC;

typedef struct DML_RESAMPLE2_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    DML_INTERPOLATION_MODE InterpolationMode;
    DML_AXIS_DIRECTION RoundingDirection;
    UINT DimensionCount;
    LongPtr Scales; //_Field_size_(DimensionCount) const FLOAT* 
    LongPtr InputPixelOffsets; //_Field_size_(DimensionCount) const FLOAT* 
    LongPtr OutputPixelOffsets; //_Field_size_(DimensionCount) const FLOAT* 
} DML_RESAMPLE2_OPERATOR_DESC;

typedef struct DML_RESAMPLE_GRAD1_OPERATOR_DESC
{
    LongPtr InputGradientTensor; //DML_TENSOR_DESC*
    LongPtr OutputGradientTensor; //DML_TENSOR_DESC*
    DML_INTERPOLATION_MODE InterpolationMode;
    DML_AXIS_DIRECTION RoundingDirection;
    UINT DimensionCount;
    LongPtr Scales; //_Field_size_(DimensionCount) const FLOAT* 
    LongPtr InputPixelOffsets; //_Field_size_(DimensionCount) const FLOAT* 
    LongPtr OutputPixelOffsets; //_Field_size_(DimensionCount) const FLOAT* 
} DML_RESAMPLE_GRAD1_OPERATOR_DESC;

typedef struct DML_DIAGONAL_MATRIX1_OPERATOR_DESC
{
    LongPtr InputTensor; //DML_TENSOR_DESC*
    LongPtr OutputTensor; //DML_TENSOR_DESC*
    DML_TENSOR_DATA_TYPE ValueDataType;
    int padVBOnly;
    DML_SCALAR_UNION Value;
    INT DiagonalFillBegin;
    INT DiagonalFillEnd;
} DML_DIAGONAL_MATRIX1_OPERATOR_DESC;

//#endif // DML_TARGET_VERSION >= 0x5100
//
//// ===================================================================================================================
////   DML feature support queries
//// ===================================================================================================================
//
//#if DML_TARGET_VERSION >= 0x2000

typedef enum DML_FEATURE_LEVEL
{
    DML_FEATURE_LEVEL_1_0 = 0x1000,
    DML_FEATURE_LEVEL_2_0 = 0x2000,
    DML_FEATURE_LEVEL_2_1 = 0x2100,
    DML_FEATURE_LEVEL_3_0 = 0x3000,
    DML_FEATURE_LEVEL_3_1 = 0x3100,
    DML_FEATURE_LEVEL_4_0 = 0x4000,
    DML_FEATURE_LEVEL_4_1 = 0x4100,
    DML_FEATURE_LEVEL_5_0 = 0x5000,
    DML_FEATURE_LEVEL_5_1 = 0x5100,
    DML_FEATURE_LEVEL_5_2 = 0x5200,
    DML_FEATURE_LEVEL_5_3 = 0x5300,
} DML_FEATURE_LEVEL;

//#endif // DML_TARGET_VERSION >= 0x2000

typedef enum DML_FEATURE
{
    DML_FEATURE_TENSOR_DATA_TYPE_SUPPORT,

//#if DML_TARGET_VERSION >= 0x2000
    DML_FEATURE_FEATURE_LEVELS,
//#endif // DML_TARGET_VERSION >= 0x2000
} DML_FEATURE;

typedef struct DML_FEATURE_QUERY_TENSOR_DATA_TYPE_SUPPORT
{
    DML_TENSOR_DATA_TYPE DataType;
} DML_FEATURE_QUERY_TENSOR_DATA_TYPE_SUPPORT;

typedef struct DML_FEATURE_DATA_TENSOR_DATA_TYPE_SUPPORT
{
    BOOL IsSupported;
} DML_FEATURE_DATA_TENSOR_DATA_TYPE_SUPPORT;

//#if DML_TARGET_VERSION >= 0x2000

typedef struct DML_FEATURE_QUERY_FEATURE_LEVELS
{
    UINT RequestedFeatureLevelCount;
    LongPtr RequestedFeatureLevels; //_Field_size_(RequestedFeatureLevelCount) DML_FEATURE_LEVEL* 
} DML_FEATURE_QUERY_FEATURE_LEVELS;

typedef struct DML_FEATURE_DATA_FEATURE_LEVELS
{
    DML_FEATURE_LEVEL MaxSupportedFeatureLevel;
} DML_FEATURE_DATA_FEATURE_LEVELS;

//#endif // DML_TARGET_VERSION >= 0x2000

// ===================================================================================================================
//   DML device functions, enumerations, and structures
// ===================================================================================================================

typedef struct DML_BINDING_TABLE_DESC
{
    IDMLDispatchable* Dispatchable;
    D3D12_CPU_DESCRIPTOR_HANDLE CPUDescriptorHandle;
    D3D12_GPU_DESCRIPTOR_HANDLE GPUDescriptorHandle;
    UINT SizeInDescriptors;
} DML_BINDING_TABLE_DESC;

typedef enum DML_EXECUTION_FLAGS
{
    DML_EXECUTION_FLAG_NONE = 0,
    DML_EXECUTION_FLAG_ALLOW_HALF_PRECISION_COMPUTATION = 0x1,
    DML_EXECUTION_FLAG_DISABLE_META_COMMANDS = 0x2,
    DML_EXECUTION_FLAG_DESCRIPTORS_VOLATILE = 0x4,
} DML_EXECUTION_FLAGS;

//DEFINE_ENUM_FLAG_OPERATORS(DML_EXECUTION_FLAGS);

typedef enum DML_CREATE_DEVICE_FLAGS
{
    DML_CREATE_DEVICE_FLAG_NONE = 0,
    DML_CREATE_DEVICE_FLAG_DEBUG = 0x1,
} DML_CREATE_DEVICE_FLAGS;

//DEFINE_ENUM_FLAG_OPERATORS(DML_CREATE_DEVICE_FLAGS);

//// ===================================================================================================================
////   DirectML constants
//// ===================================================================================================================
[
    dllname ("DirectML.dll")
]
module DirectML{
const UINT DML_TENSOR_DIMENSION_COUNT_MAX = 5;
//#if DML_TARGET_VERSION >= 0x3000
//static const UINT DML_TENSOR_DIMENSION_COUNT_MAX1 = 8;
//#endif
//
const UINT DML_TEMPORARY_BUFFER_ALIGNMENT = 256;
const UINT DML_PERSISTENT_BUFFER_ALIGNMENT = 256;
//
const UINT DML_MINIMUM_BUFFER_TENSOR_ALIGNMENT = 16;

[entry("DMLCreateDevice")]
HRESULT DMLCreateDevice(
    [in] ID3D12Device* d3d12Device,
    [in] DML_CREATE_DEVICE_FLAGS flags,
    [in] REFIID riid, // Expected: IDMLDevice
    [out] LPVOID ppv
);

//#if DML_TARGET_VERSION >= 0x2000

[entry("DMLCreateDevice1")]
HRESULT DMLCreateDevice1(
    [in] ID3D12Device* d3d12Device,
    [in] DML_CREATE_DEVICE_FLAGS flags,
    [in] DML_FEATURE_LEVEL minimumFeatureLevel,
    [in] REFIID riid, // Expected: IDMLDevice
    [out] LPVOID ppv
);

}

//#endif // DML_TARGET_VERSION >= 0x2000

// ===================================================================================================================
//   DML object
// ===================================================================================================================
[
    odl,
    uuid(c8263aac-9e0c-4a2d-9b8e-007521a3317c) 
]
interface IDMLObject : stdole.IUnknown
{
    HRESULT GetPrivateData(
        [in] REFGUID guid,
        [in, out] UINT * dataSize,
        [in, out] void* data
        );

    HRESULT SetPrivateData(
        [in] REFGUID guid,
        [in] UINT dataSize,
        [in] void* data
        );

    HRESULT SetPrivateDataInterface(
        [in] REFGUID guid,
        [in]  IUnknown * data
        );

    HRESULT SetName(
        [in] LongPtr name
        );
};

// ===================================================================================================================
//   DML device
// ===================================================================================================================
[
    odl,
    uuid(6dbd6437-96fd-423f-a98c-ae5e7c2a573f) 
]
interface IDMLDevice : IDMLObject
{
    HRESULT CheckFeatureSupport(
        [in] DML_FEATURE feature,
        [in] UINT featureQueryDataSize,
        [in] void* featureQueryData,
        [in] UINT featureSupportDataSize,
        [in, out] void* featureSupportData
        );

    HRESULT CreateOperator(
        [in] DML_OPERATOR_DESC * desc,
        [in] REFIID riid, // expected: IDMLOperator
        [in, out] LPVOID ppv
        );

    HRESULT CompileOperator(
        [in] IDMLOperator * op,
        [in] DML_EXECUTION_FLAGS flags,
        [in] REFIID riid, // expected: IDMLCompiledOperator
        [in, out] LPVOID ppv
        );

    HRESULT CreateOperatorInitializer(
        [in] UINT operatorCount,
        [in] IDMLCompiledOperator** operators,
        [in] REFIID riid, // expected: IDMLOperatorInitializer
        [in, out] LPVOID ppv
        );

    HRESULT CreateCommandRecorder(
        [in] REFIID riid, // expected: IDMLCommandRecorder
        [in, out] LPVOID ppv
        );

    HRESULT CreateBindingTable(
        //_In_opt_ DML_BINDING_TABLE_DESC * desc,
        [in] void* desc,
        [in] REFIID riid, // expected: IDMLBindingTable
        [in, out] LPVOID ppv
        );

    HRESULT Evict(
        [in] UINT count,
        [in] IDMLPageable** ppObjects
        );

    HRESULT MakeResident(
        [in] UINT count,
        [in] IDMLPageable** ppObjects
        );

    HRESULT GetDeviceRemovedReason(
        );

    HRESULT GetParentDevice(
        [in] REFIID riid,
        [in, out] LPVOID ppv
        );
};


// ===================================================================================================================
//   DML device children
// ===================================================================================================================
[
    odl,
    uuid(27e83142-8165-49e3-974e-2fd66e4cb69d) 
]
interface IDMLDeviceChild : IDMLObject
{
    HRESULT GetDevice(
        [in] REFIID riid, // expected: IDMLDevice
        [in, out] LPVOID ppv
        );
};

[
    odl,
    uuid(b1ab0825-4542-4a4b-8617-6dde6e8f6201) 
]
interface IDMLPageable : IDMLDeviceChild
{
};


// ===================================================================================================================
//   DML operator
// ===================================================================================================================
[
    odl,
    uuid(26caae7a-3081-4633-9581-226fbe57695d) 
]
interface IDMLOperator : IDMLDeviceChild
{
};


// ===================================================================================================================
//   DML dispatchable
// ===================================================================================================================

typedef struct DML_BINDING_PROPERTIES
{
    UINT RequiredDescriptorCount;
    int pad1VBOnly;
    UINT64 TemporaryResourceSize;
    UINT64 PersistentResourceSize;
} DML_BINDING_PROPERTIES;

[
    odl,
    uuid(dcb821a8-1039-441e-9f1c-b1759c2f3cec) 
]
interface IDMLDispatchable : IDMLPageable
{
    DML_BINDING_PROPERTIES GetBindingProperties();
};


// ===================================================================================================================
//   DML compiled operator
// ===================================================================================================================
[
    odl,
    uuid(6b15e56a-bf5c-4902-92d8-da3a650afea4) 
]
interface IDMLCompiledOperator : IDMLDispatchable
{
};


// ===================================================================================================================
//   DML operator initializer
// ===================================================================================================================
[
    odl,
    uuid(427c1113-435c-469c-8676-4d5dd072f813) 
]
interface IDMLOperatorInitializer : IDMLDispatchable
{
    HRESULT Reset(
        [in] UINT operatorCount,
        [in] IDMLCompiledOperator** operators
        );
};

// ===================================================================================================================
//   DML binding table
// ===================================================================================================================

typedef enum DML_BINDING_TYPE
{
    DML_BINDING_TYPE_NONE,
    DML_BINDING_TYPE_BUFFER,
    DML_BINDING_TYPE_BUFFER_ARRAY,
} DML_BINDING_TYPE;

typedef struct DML_BINDING_DESC
{
    DML_BINDING_TYPE Type;
    LongPtr Desc; //const void* 
} DML_BINDING_DESC;

typedef struct DML_BUFFER_BINDING
{
    ID3D12Resource* Buffer;
    int pad1VBOnly;
    UINT64 Offset;
    UINT64 SizeInBytes;
} DML_BUFFER_BINDING;

typedef struct DML_BUFFER_ARRAY_BINDING
{
    UINT BindingCount;
    LongPtr Bindings; //DML_BUFFER_BINDING* 
} DML_BUFFER_ARRAY_BINDING;

[
    odl,
    uuid(29c687dc-de74-4e3b-ab00-1168f2fc3cfc) 
]
interface IDMLBindingTable : IDMLDeviceChild
{
    void BindInputs(
        [in] UINT bindingCount,
        [in] DML_BINDING_DESC * bindings
        );

    void BindOutputs(
        [in] UINT bindingCount,
        [in] DML_BINDING_DESC * bindings
        );

    void BindTemporaryResource(
        [in] DML_BINDING_DESC * binding
        );

    void BindPersistentResource(
        [in] DML_BINDING_DESC * binding
        );

    HRESULT Reset(
        [in] DML_BINDING_TABLE_DESC * desc
        );
};


// ===================================================================================================================
//   DML command recorder
// ===================================================================================================================
[
    odl,
    uuid(e6857a76-2e3e-4fdd-bff4-5d2ba10fb453)
]
interface IDMLCommandRecorder : IDMLDeviceChild
{
     void RecordDispatch(
         [in] ID3D12CommandList * commandList,
         [in] IDMLDispatchable * dispatchable,
         [in] IDMLBindingTable * bindings
        );
};


// ===================================================================================================================
//   DML debug
// ===================================================================================================================
[
    odl,
    uuid(7d6f3ac9-394a-4ac3-92a7-390cc57a8217) 
]
interface IDMLDebugDevice : stdole.IUnknown
{
    void SetMuteDebugOutput(
        [in] BOOL mute
        );
};


// =================================================================================================================== 
// DML graph 
// =================================================================================================================== 

//#if DML_TARGET_VERSION >= 0x2100

typedef enum DML_GRAPH_EDGE_TYPE
{
    DML_GRAPH_EDGE_TYPE_INVALID,
    DML_GRAPH_EDGE_TYPE_INPUT,
    DML_GRAPH_EDGE_TYPE_OUTPUT,
    DML_GRAPH_EDGE_TYPE_INTERMEDIATE,
} DML_GRAPH_EDGE_TYPE;

typedef struct DML_GRAPH_EDGE_DESC
{
    DML_GRAPH_EDGE_TYPE Type;
    LongPtr Desc; // const void*
} DML_GRAPH_EDGE_DESC;

typedef struct DML_INPUT_GRAPH_EDGE_DESC
{
    UINT GraphInputIndex;
    UINT ToNodeIndex;
    UINT ToNodeInputIndex;
    LongPtr Name;
} DML_INPUT_GRAPH_EDGE_DESC;

typedef struct DML_OUTPUT_GRAPH_EDGE_DESC
{
    UINT FromNodeIndex;
    UINT FromNodeOutputIndex;
    UINT GraphOutputIndex;
    LongPtr Name;
} DML_OUTPUT_GRAPH_EDGE_DESC;

typedef struct DML_INTERMEDIATE_GRAPH_EDGE_DESC
{
    UINT FromNodeIndex;
    UINT FromNodeOutputIndex;
    UINT ToNodeIndex;
    UINT ToNodeInputIndex;
    LongPtr Name;
} DML_INTERMEDIATE_GRAPH_EDGE_DESC;
 
typedef enum DML_GRAPH_NODE_TYPE
{
    DML_GRAPH_NODE_TYPE_INVALID,
    DML_GRAPH_NODE_TYPE_OPERATOR,
} DML_GRAPH_NODE_TYPE;

typedef struct DML_GRAPH_NODE_DESC
{
    DML_GRAPH_NODE_TYPE Type;
    LongPtr Desc; // const void*
} DML_GRAPH_NODE_DESC;

typedef struct DML_OPERATOR_GRAPH_NODE_DESC
{
    IDMLOperator* Operator;
    LongPtr Name;
} DML_OPERATOR_GRAPH_NODE_DESC;

typedef struct DML_GRAPH_DESC
{
    UINT InputCount;
    UINT OutputCount;

    UINT NodeCount;
    LongPtr Nodes; //_Field_size_(NodeCount) DML_GRAPH_NODE_DESC* 

    UINT InputEdgeCount;
    LongPtr InputEdges; //_Field_size_opt_(InputEdgeCount) DML_GRAPH_EDGE_DESC* 

    UINT OutputEdgeCount;
    LongPtr OutputEdges; //_Field_size_(OutputEdgeCount) DML_GRAPH_EDGE_DESC* 

    UINT IntermediateEdgeCount;
    LongPtr IntermediateEdges; //_Field_size_opt_(IntermediateEdgeCount) DML_GRAPH_EDGE_DESC* 
} DML_GRAPH_DESC;

[
    odl,
    uuid(a0884f9a-d2be-4355-aa5d-5901281ad1d2) 
]
interface IDMLDevice1 : IDMLDevice
{
    HRESULT CompileGraph(
        [in] DML_GRAPH_DESC * desc,
        [in] DML_EXECUTION_FLAGS flags,
        [in] REFIID riid, // expected: IDMLCompiledOperator 
        [in, out] LPVOID ppv
        );
};

//#endif // DML_TARGET_VERSION >= 0x2100
//
//#endif // WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_GAMES)
//#endif // DIRECTML_H
