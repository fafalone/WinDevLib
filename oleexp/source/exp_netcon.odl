////tbShellLib - 100% implemented
//
interface IEnumNetConnection;
interface INetConnection;
interface INetConnectionManager;
interface INetConnectionConnectUi;
interface INetConnectionCommonUi;

interface IEnumNetSharingPortMapping;
interface INetSharingPortMapping;
interface IEnumNetSharingPublicConnection;
interface IEnumNetSharingPrivateConnection;
interface IEnumNetSharingEveryConnection;
interface INetSharingConfiguration;
interface INetSharingManager;

[
	odl,
	uuid(C08956A0-1CD3-11D1-B1C5-00805FC1270E)
]
interface IEnumNetConnection : stdole.IUnknown
{
	long Next(
		[in] LONG celt,
		[out] INetConnection** rgelt,
		[out] LONG* pceltFetched);

	HRESULT Skip(
		[in] LONG celt);

	HRESULT Reset();

	HRESULT Clone(
		[out] IEnumNetConnection** ppenum);
};
typedef enum NETCON_CHARACTERISTIC_FLAGS
{
	NCCF_NONE = 0x0000,   // No special characteristics
	NCCF_ALL_USERS = 0x0001,   // Connection is available to all users
	NCCF_ALLOW_DUPLICATION = 0x0002,   // Connection is duplicable
	NCCF_ALLOW_REMOVAL = 0x0004,   // Connection is removable
	NCCF_ALLOW_RENAME = 0x0008,   // Connection can be renamed
	NCCF_INCOMING_ONLY = 0x0020,   // Direction is "incoming" only
	NCCF_OUTGOING_ONLY = 0x0040,   // Direction is "outgoing" only
	NCCF_BRANDED = 0x0080,   // Icons are branded
	NCCF_SHARED = 0x0100,   // Connection is shared
	NCCF_BRIDGED = 0x0200,   // Connection is bridged
	NCCF_FIREWALLED = 0x0400,   // Connection is firewalled
	NCCF_DEFAULT = 0x0800,   // This is the default connection
	NCCF_HOMENET_CAPABLE = 0x1000,   // The device supports home networking
	NCCF_SHARED_PRIVATE = 0x2000,   // The connection is private (part of ICS)
	NCCF_QUARANTINED = 0x4000,   // Connection is quarantined
	NCCF_RESERVED = 0x8000,   // Unused
	NCCF_HOSTED_NETWORK = 0x00010000,  // Connection is used as Hosted Network
	NCCF_VIRTUAL_STATION = 0x00020000,  // Connection is used as Virtual WiFi Station
	NCCF_WIFI_DIRECT = 0x00040000,  // Connection is a Wi-Fi Direct network
	NCCF_BLUETOOTH_MASK = 0x000F0000, // Bluetooth Characteristics
	NCCF_LAN_MASK = 0x00F00000  // LAN Characteristics
} NETCON_CHARACTERISTIC_FLAGS;

typedef enum NETCON_STATUS
{
	NCS_DISCONNECTED,
	NCS_CONNECTING,
	NCS_CONNECTED,
	NCS_DISCONNECTING,
	NCS_HARDWARE_NOT_PRESENT,
	NCS_HARDWARE_DISABLED,
	NCS_HARDWARE_MALFUNCTION,
	NCS_MEDIA_DISCONNECTED,
	NCS_AUTHENTICATING,
	NCS_AUTHENTICATION_SUCCEEDED,
	NCS_AUTHENTICATION_FAILED,
	NCS_INVALID_ADDRESS,
	NCS_CREDENTIALS_REQUIRED,
	NCS_ACTION_REQUIRED,
	NCS_ACTION_REQUIRED_RETRY,
	NCS_CONNECT_FAILED
} NETCON_STATUS;

typedef enum NETCON_TYPE
{
	NCT_DIRECT_CONNECT, //deprecated and will be removed
	NCT_INBOUND = 1,
	NCT_INTERNET,
	NCT_LAN,
	NCT_PHONE,
	NCT_TUNNEL,
	NCT_BRIDGE,
} NETCON_TYPE;

typedef enum NETCON_MEDIATYPE
{
	NCM_NONE,
	NCM_DIRECT, // deprecated and will be removed
	NCM_ISDN = 2,
	NCM_LAN,
	NCM_PHONE,
	NCM_TUNNEL,
	NCM_PPPOE,
	NCM_BRIDGE,
	NCM_SHAREDACCESSHOST_LAN,
	NCM_SHAREDACCESSHOST_RAS,
} NETCON_MEDIATYPE;

typedef struct NETCON_PROPERTIES
{
	UUID               guidId;
	LONG               pszwName; //[string] LPWSTR
	LONG               pszwDeviceName; //[string] LPWSTR
	NETCON_STATUS      Status;
	NETCON_MEDIATYPE   MediaType;
	DWORD              dwCharacter;
	UUID               clsidThisObject;
	UUID              clsidUiObject;
} NETCON_PROPERTIES;


[
	odl,
	uuid(C08956A1-1CD3-11D1-B1C5-00805FC1270E)
]
interface INetConnection : stdole.IUnknown
{


	long Connect();


		// Disconnect can return S_OBJECT_NO_LONGER_VALID which indicates
		// success, but that the object is no longer valid.  Clients, when
		// getting this error message, should simply release the interface.
		//
	long Disconnect();

	long Delete();

	long Duplicate(
		[in] LONG    pszwDuplicateName,
		[out] INetConnection**  ppCon);

	long GetProperties(
		[out] LONG* ppProps); //NETCON_PROPERTIES

	long GetUiObjectClassId(
		[out] UUID* pclsid);

	long Rename(
		[in] LONG pszwNewName);
}
//
typedef enum NETCONMGR_ENUM_FLAGS
{
	NCME_DEFAULT = 0x0,
	NCME_HIDDEN = 0x1,
} NETCONMGR_ENUM_FLAGS;

[
	odl,
	uuid(C08956A2-1CD3-11D1-B1C5-00805FC1270E)
]
interface INetConnectionManager : stdole.IUnknown
{

	// Return an IEnumNetConnection interface used to enumerate all of
	// the contained connection objects.
	//
	HRESULT EnumConnections(
		[in] NETCONMGR_ENUM_FLAGS   Flags,
		[out] IEnumNetConnection**  ppEnum);
}
//
typedef enum NETCONUI_CONNECT_FLAGS
{
	NCUC_DEFAULT = 0x0000,
	NCUC_NO_UI = 0x0001,
	NCUC_ENABLE_DISABLE = 0x0002
} NETCONUI_CONNECT_FLAGS;

[
	odl,
	uuid(C08956A3-1CD3-11D1-B1C5-00805FC1270E)
]
interface INetConnectionConnectUi : stdole.IUnknown
{


	HRESULT SetConnection(
		[in] INetConnection* pCon);

	long Connect(
		[in] HWND hwndParent,
		[in] DWORD dwFlags);

	long Disconnect(
		[in] HWND hwndParent,
		[in] DWORD dwFlags);
}

[
	odl,
	uuid(C08956B0-1CD3-11D1-B1C5-00805FC1270E)
]
interface IEnumNetSharingPortMapping : stdole.IUnknown
{
	long Next(
		[in] LONG celt,
		[out] VARIANT * rgVar,
		[out] LONG* pceltFetched);

	HRESULT Skip(
		[in] LONG celt);

	HRESULT Reset();

	HRESULT Clone(
		[out] IEnumNetSharingPortMapping** ppenum);
}


[
	odl,
	uuid(24B7E9B5-E38F-4685-851B-00892CF5F940),
	oleautomation, dual, nonextensible
]
interface INetSharingPortMappingProps : IDispatch
{
	[propget, id(1), helpstring("property Name")]            HRESULT Name([out, retval] BSTR  * pbstrName);
	[propget, id(2), helpstring("property IPProtocol")]      HRESULT IPProtocol([out, retval] CHAR * pucIPProt);
	[propget, id(3), helpstring("property ExternalPort")]    HRESULT ExternalPort([out, retval] long  * pusPort);
	[propget, id(4), helpstring("property InternalPort")]    HRESULT InternalPort([out, retval] long  * pusPort);
	[propget, id(5), helpstring("property Options")]         HRESULT Options([out, retval] long  * pdwOptions);
	[propget, id(6), helpstring("property TargetName")]      HRESULT TargetName([out, retval] BSTR  * pbstrTargetName);
	[propget, id(7), helpstring("property TargetIPAddress")] HRESULT TargetIPAddress([out, retval] BSTR  * pbstrTargetIPAddress);
	[propget, id(8), helpstring("property Enabled")]         HRESULT Enabled([out, retval] boolean * pbool);
}

[
	odl,
	uuid(C08956B1-1CD3-11D1-B1C5-00805FC1270E),
	oleautomation, dual, nonextensible
]
interface INetSharingPortMapping : IDispatch
{
	[id(1), helpstring("method Disable")]
	HRESULT Disable();

	[id(2), helpstring("method Enable")]
	HRESULT Enable();

	[propget, id(3), helpstring("property Properties")]
	HRESULT Properties(
		[out, retval] INetSharingPortMappingProps ** ppNSPMP);

	[id(4), helpstring("method Delete")]
	HRESULT Delete();
}


[
	odl,
	uuid(C08956B8-1CD3-11D1-B1C5-00805FC1270E)
]
interface IEnumNetSharingEveryConnection : stdole.IUnknown
{
	long Next(
		[in] LONG celt,
		[out] VARIANT * rgVar,
		[out] LONG* pceltFetched);

	HRESULT Skip(
		[in] LONG celt);

	HRESULT Reset();

	HRESULT Clone(
		[out] IEnumNetSharingEveryConnection** ppenum);
}


//+---------------------------------------------------------------------------
// IEnumNetSharingPublicConnection - An enumerator for INetConnection interface pointers
//                         that represent connections configured as publicly shared.
//
[
	odl,
	uuid(C08956B4-1CD3-11D1-B1C5-00805FC1270E)
]
interface IEnumNetSharingPublicConnection : stdole.IUnknown
{
	long Next(
		[in] LONG celt,
		[out] VARIANT * rgVar,
		[out] LONG* pceltFetched);

	HRESULT Skip(
		[in] LONG celt);

	HRESULT Reset();

	HRESULT Clone(
		[out] IEnumNetSharingPublicConnection** ppenum);
}


//+---------------------------------------------------------------------------
// IEnumNetSharingPrivateConnection - An enumerator for INetConnection interface pointers
//                         that represent connections configured as privately shared.
//
[
	odl,
	uuid(C08956B5-1CD3-11D1-B1C5-00805FC1270E)
]
interface IEnumNetSharingPrivateConnection : stdole.IUnknown
{
	long Next(
		[in] LONG celt,
		[out] VARIANT * rgVar,
		[out] LONG * pCeltFetched);

	HRESULT Skip(
		[in] ULONG celt);

	HRESULT Reset();

	HRESULT Clone(
		[out] IEnumNetSharingPrivateConnection** ppenum);
}

// Collection needed for INetSharingConfiguration::EnumPortMappings() below
[
	odl,
	uuid(02E4A2DE-DA20-4E34-89C8-AC22275A010B),
	oleautomation, dual, nonextensible,
	helpstring("INetSharingPortMappingCollection Interface")
]
interface INetSharingPortMappingCollection : IDispatch
{
	[propget, id(0), restricted, helpstring("property _NewEnum:  gets item enumerator")] HRESULT _NewEnum([out, retval] IUnknown* *pVal);
	[propget, id(1), helpstring("property Count")] HRESULT Count([out, retval] long *pVal);
}

[
	odl,
	uuid(F4277C95-CE5B-463D-8167-5662D9BCAA72),
	oleautomation, dual, nonextensible,
	helpstring("INetConnectionProps Interface")
]
interface INetConnectionProps : IDispatch
{
	[propget, id(1), helpstring("property Guid")]
	HRESULT Guid([out, retval] BSTR * pbstrGuid);

	[propget, id(2), helpstring("property Name")]
	HRESULT Name([out, retval] BSTR * pbstrName);

	[propget, id(3), helpstring("property DeviceName")]
	HRESULT DeviceName([out, retval] BSTR * pbstrDeviceName);

	[propget, id(4), helpstring("property Status")]
	HRESULT Status([out, retval] NETCON_STATUS * pStatus);

	[propget, id(5), helpstring("property MediaType")]
	HRESULT MediaType([out, retval] NETCON_MEDIATYPE * pMediaType);

	[propget, id(6), helpstring("property Characteristics")]
	HRESULT Characteristics([out, retval] DWORD * pdwFlags);
}

//+---------------------------------------------------------------------------
// INetSharingConfiguration - the connection level object that
//
// It provides methods to:
//     - Enable/Disable Internet Connection Sharing
//     - Enable/Disable Internet Connection Protection
//     - Enumerate Port Mappings
//     - Add Port Mappings
//
typedef enum SHARINGCONNECTIONTYPE
{
	ICSSHARINGTYPE_PUBLIC = 0x0,
	ICSSHARINGTYPE_PRIVATE
} SHARINGCONNECTIONTYPE;

typedef enum SHARINGCONNECTION_ENUM_FLAGS
{
	ICSSC_DEFAULT = 0x0,
	ICSSC_ENABLED
} SHARINGCONNECTION_ENUM_FLAGS;

typedef enum ICS_TARGETTYPE
{
	ICSTT_NAME = 0x0,
	ICSTT_IPADDRESS
} ICS_TARGETTYPE;

[
	odl,
	uuid(C08956B6-1CD3-11D1-B1C5-00805FC1270E),
	oleautomation, dual, nonextensible
]
interface INetSharingConfiguration : IDispatch
{


	[propget, id(1), helpstring("property SharingEnabled")]
	HRESULT SharingEnabled([out, retval] boolean* pbEnabled);

	[propget, id(2), helpstring("property SharingConnectionType")]
	HRESULT SharingConnectionType([out, retval] SHARINGCONNECTIONTYPE* pType);

	[id(3), helpstring("method DisableSharing")]
	HRESULT DisableSharing();

	[id(4), helpstring("method EnableSharing")]
	HRESULT EnableSharing([in]  SHARINGCONNECTIONTYPE  Type);

	[propget, id(5), helpstring("property InternetFirewallEnabled")]
	HRESULT InternetFirewallEnabled([out, retval] boolean *pbEnabled);

	[id(6), helpstring("method DisableInternetFirewall")]
	HRESULT DisableInternetFirewall();

	[id(7), helpstring("method EnableInternetFirewall")]
	HRESULT EnableInternetFirewall();

	// Return an IEnumNetSharingPortMapping interface used to enumerate all of
	// the contained INetSharingPortMapping objects.
	//
	[propget, id(8), helpstring("EnumPortMappings")]
	HRESULT EnumPortMappings(
		[in]  SHARINGCONNECTION_ENUM_FLAGS Flags,
		[out, retval] INetSharingPortMappingCollection** ppColl);

	[id(9), helpstring("method AddPortMapping")]
	HRESULT AddPortMapping(
		[in]  BSTR     bstrName,
		[in]  CHAR    ucIPProtocol,
		[in]  SHORT   usExternalPort,
		[in]  SHORT   usInternalPort,
		[in]  DWORD    dwOptions,
		[in]  BSTR     bstrTargetNameOrIPAddress,
		[in]  ICS_TARGETTYPE eTargetType,
		[out, retval] INetSharingPortMapping** ppMapping);

	[id(10), helpstring("method RemovePortMapping")]
	HRESULT RemovePortMapping([in]  INetSharingPortMapping*  pMapping);
}

// ICollection interfaces
[
	odl,
	uuid(33C4643C-7811-46FA-A89A-768597BD7223),
	oleautomation, dual, nonextensible,
	helpstring("INetSharingEveryConnectionCollection Interface")
]
interface INetSharingEveryConnectionCollection : IDispatch
{
	[propget, id(0), restricted, helpstring("property _NewEnum:  gets item enumerator")] HRESULT _NewEnum([out, retval] IUnknown* *pVal);
	[propget, id(1), helpstring("property Count")] HRESULT Count([out, retval] long *pVal);
}

[
	odl,
	uuid(7D7A6355-F372-4971-A149-BFC927BE762A),
	oleautomation, dual, nonextensible,
	helpstring("INetSharingPublicConnectionCollection Interface")
]
interface INetSharingPublicConnectionCollection : IDispatch
{
	[propget, id(0), restricted, helpstring("property _NewEnum:  gets item enumerator")] HRESULT _NewEnum([out, retval] IUnknown* *pVal);
	[propget, id(1), helpstring("property Count")] HRESULT Count([out, retval] long *pVal);
}

[
	odl,
	uuid(38AE69E0-4409-402A-A2CB-E965C727F840),
	oleautomation, dual, nonextensible,
	helpstring("INetSharingPrivateConnectionCollection Interface")
]
interface INetSharingPrivateConnectionCollection : IDispatch
{
	[propget, id(0), restricted, helpstring("property _NewEnum:  gets item enumerator")] HRESULT _NewEnum([out, retval] IUnknown* *pVal);
	[propget, id(1), helpstring("property Count")] HRESULT Count([out, retval] long *pVal);
}

//+---------------------------------------------------------------------------
// INetSharingManager - the top level object that
//
// It provides methods to:
//     - Determine whether Internet Connection Sharing is installed
//     - Enumerate Public Connections
//     - Enumerate Private Connections
//
[
	odl,
	uuid(C08956B7-1CD3-11D1-B1C5-00805FC1270E),
	oleautomation, dual, nonextensible
]
interface INetSharingManager : IDispatch
{
	[propget, id(1), helpstring("property SharingInstalled")]
	HRESULT SharingInstalled([out, retval] BOOLEAN *pbInstalled); //VARIANT

	// Return an IEnumNetSharingPublicConnection interface used to enumerate all of
	// the contained INetConnections configured as a public adapter
	//
	[propget, id(2), helpstring("EnumPublicConnections")]
	HRESULT EnumPublicConnections(
		[in]  SHARINGCONNECTION_ENUM_FLAGS Flags,
		[out, retval] INetSharingPublicConnectionCollection ** ppColl);

	// Return an IEnumNetSharingPrivateConnection interface used to enumerate all of
	// the contained INetConnections configured as a private adapter
	//
	[propget, id(3), helpstring("EnumPrivateConnections")]
	HRESULT EnumPrivateConnections(
		[in]  SHARINGCONNECTION_ENUM_FLAGS Flags,
		[out, retval] INetSharingPrivateConnectionCollection ** ppColl);

	[propget, id(6), helpstring("INetSharingConfigurationForINetConnection")]
	HRESULT INetSharingConfigurationForINetConnection(
		[in] LONG pNetConnection, //INetConnection: got 'not compat with oleautomation' error. Try passing ObjPtr()
		[out, retval] INetSharingConfiguration **ppNetSharingConfiguration
		);

	// Return an IEnumNetSharingEveryConnection interface used to enumerate all of
	// the contained INetConnections configured as a public adapter
	//
	[propget, id(7), helpstring("EnumEveryConnection")]
	HRESULT EnumEveryConnection([out, retval] INetSharingEveryConnectionCollection ** ppColl);

	// get properties interface for any INetConnection
	[propget, id(8), helpstring("NetConnectionProps")]
	HRESULT NetConnectionProps(
		[in] LONG pNetConnection, //INetConnection: got 'not compat with oleautomation' error. Try passing ObjPtr()
		[out, retval] INetConnectionProps ** ppProps);
}


[ uuid(5C63C1AD-3956-4FF8-8486-40034758315B) ]
coclass NetSharingManager
{
	[default] interface INetSharingManager;
}

[ uuid(BA126AD1-2166-11D1-B1D0-00805FC1270E) ]
coclass ConnectionManager
{
	[default] interface INetConnectionManager;
}




// Network List Manager


interface INetworkListManager;
interface INetworkListManagerEvents;

interface INetwork;
interface INetwork2;
interface IEnumNetworks;
interface INetworkEvents;

interface INetworkConnection;
interface INetworkConnection2;
interface IEnumNetworkConnections;
interface INetworkConnectionEvents;

interface INetworkCostManager;
interface INetworkCostManagerEvents;

interface INetworkConnectionCost;
interface INetworkConnectionCostEvents;


        /*cpp_quote("#define NA_DomainAuthenticationFailed  L\"NA_DomainAuthenticationFailed\"")
        cpp_quote("#define NA_NetworkClass  L\"NA_NetworkClass\"")
        cpp_quote("#define NA_NameSetByPolicy  L\"NA_NameSetByPolicy\"")
        cpp_quote("#define NA_IconSetByPolicy  L\"NA_IconSetByPolicy\"")
        cpp_quote("#define NA_DescriptionSetByPolicy  L\"NA_DescriptionSetByPolicy\"")
        cpp_quote("#define NA_CategorySetByPolicy  L\"NA_CategorySetByPolicy\"")
        cpp_quote("#define NA_NameReadOnly  L\"NA_NameReadOnly\"")
        cpp_quote("#define NA_IconReadOnly  L\"NA_IconReadOnly\"")
        cpp_quote("#define NA_DescriptionReadOnly  L\"NA_DescriptionReadOnly\"")
        cpp_quote("#define NA_CategoryReadOnly  L\"NA_CategoryReadOnly\"")
        cpp_quote("#define NA_AllowMerge  L\"NA_AllowMerge\"")
        cpp_quote("#define NA_InternetConnectivityV4 L\"NA_InternetConnectivityV4\"")
        cpp_quote("#define NA_InternetConnectivityV6 L\"NA_InternetConnectivityV6\"")*/

// maximum allowed length of a list of destination addresses to receive notifications
//const UINT NLM_MAX_ADDRESS_LIST_SIZE = 10;
// default value for unavailable field in data plan status structure
//const UINT32 NLM_UNKNOWN_DATAPLAN_STATUS = 0xFFFFFFFF;

// NLM Supported Connection Cost Level and Cost Flags
typedef enum NLM_CONNECTION_COST
{
    //cost level
    NLM_CONNECTION_COST_UNKNOWN = 0x0,
    NLM_CONNECTION_COST_UNRESTRICTED = 0x1,
    NLM_CONNECTION_COST_FIXED = 0x2,
    NLM_CONNECTION_COST_VARIABLE = 0x4,
    //cost flags
    NLM_CONNECTION_COST_OVERDATALIMIT = 0x10000,
    NLM_CONNECTION_COST_CONGESTED = 0x20000,
    NLM_CONNECTION_COST_ROAMING = 0x40000,
    NLM_CONNECTION_COST_APPROACHINGDATALIMIT = 0x80000
} NLM_CONNECTION_COST;

//
//---------------------------------------------------
//

typedef struct NLM_USAGE_DATA
{
    DWORD UsageInMegabytes;
    FILETIME LastSyncTime;
} NLM_USAGE_DATA;

typedef struct NLM_DATAPLAN_STATUS
{
    UUID InterfaceGuid;
    NLM_USAGE_DATA UsageData;
    DWORD DataLimitInMegabytes;
    DWORD InboundBandwidthInKbps;
    DWORD OutboundBandwidthInKbps;
    FILETIME NextBillingCycle;
    DWORD MaxTransferSizeInMegabytes;
    DWORD Reserved;
} NLM_DATAPLAN_STATUS;

typedef struct NLM_SOCKADDR
{
    BYTE data[128];       // Big enough storage to store SOCKADDR_STORAGE
} NLM_SOCKADDR;

//
//---------------------------------------------------
//
typedef enum NLM_NETWORK_CLASS
{
    NLM_NETWORK_IDENTIFYING = 0x01,
    NLM_NETWORK_IDENTIFIED = 0x02,
    NLM_NETWORK_UNIDENTIFIED = 0x03,
} NLM_NETWORK_CLASS;

//#define MAX_PROFILENAME_LENGTH 256

// NetworkInformation Simulator Data structure
typedef struct NLM_SIMULATED_PROFILE_INFO
{
    WCHAR ProfileName[256];
    NLM_CONNECTION_COST cost;
    DWORD UsageInMegabytes;
    DWORD DataLimitInMegabytes;
} NLM_SIMULATED_PROFILE_INFO;

typedef enum NLM_INTERNET_CONNECTIVITY
{
    // This interface/family is unable to access the Internet due to HTTP hijacking
    NLM_INTERNET_CONNECTIVITY_WEBHIJACK = 0x01,
    // This interface/family is using a web proxy to communicated with the Internet
    NLM_INTERNET_CONNECTIVITY_PROXIED = 0x02,
    // This interface/family has corporate network access
    NLM_INTERNET_CONNECTIVITY_CORPORATE = 0x04,
} NLM_INTERNET_CONNECTIVITY;

//
//---------------------------------------------------
//
typedef enum NLM_CONNECTIVITY
{
    NLM_CONNECTIVITY_DISCONNECTED = 0x0000,
    NLM_CONNECTIVITY_IPV4_NOTRAFFIC = 0x0001,
    NLM_CONNECTIVITY_IPV6_NOTRAFFIC = 0x0002,
    NLM_CONNECTIVITY_IPV4_SUBNET = 0x0010,
    NLM_CONNECTIVITY_IPV4_LOCALNETWORK = 0x0020,
    NLM_CONNECTIVITY_IPV4_INTERNET = 0x0040,
    NLM_CONNECTIVITY_IPV6_SUBNET = 0x0100,
    NLM_CONNECTIVITY_IPV6_LOCALNETWORK = 0x0200,
    NLM_CONNECTIVITY_IPV6_INTERNET = 0x0400
} NLM_CONNECTIVITY;

typedef enum NLM_DOMAIN_TYPE
{
    NLM_DOMAIN_TYPE_NON_DOMAIN_NETWORK = 0x0,
    NLM_DOMAIN_TYPE_DOMAIN_NETWORK = 0x01,
    NLM_DOMAIN_TYPE_DOMAIN_AUTHENTICATED = 0x02,
} NLM_DOMAIN_TYPE;

typedef enum NLM_DOMAIN_AUTHENTICATION_KIND
{
    NLM_DOMAIN_AUTHENTICATION_KIND_NONE = 0x0,
    NLM_DOMAIN_AUTHENTICATION_KIND_LDAP = 0x01,
    NLM_DOMAIN_AUTHENTICATION_KIND_TLS = 0x02,
} NLM_DOMAIN_AUTHENTICATION_KIND;

//
//---------------------------------------------------
//
    typedef enum NLM_ENUM_NETWORK
    {
        NLM_ENUM_NETWORK_CONNECTED = 0x01,
        NLM_ENUM_NETWORK_DISCONNECTED = 0x02,
        NLM_ENUM_NETWORK_ALL = 0x03
    } NLM_ENUM_NETWORK;
[
    odl,
    uuid(DCB00000-570F-4A9B-8D69-199FDBA5723B),
    oleautomation,
    dual
]
interface INetworkListManager : IDispatch
{


    // Enumerate the list of networks in your compartment.
    [id(1)]
    HRESULT GetNetworks([in] NLM_ENUM_NETWORK Flags,
        [out, retval] IEnumNetworks** ppEnumNetwork);

    // Get a network given a Network ID.
    //HRESULT GetNetwork([in] GUID gdNetworkId, [out, retval] INetwork** ppNetwork);
    [id(2)]
    HRESULT GetNetwork([in] int gdNetworkId1, [in] int gdNetworkId2, [in] int gdNetworkId3, [in] int gdNetworkId4, [out, retval] INetwork** ppNetwork);

    // Enumerate the complete list of all connections in your compartment.
    [id(3)]
    HRESULT GetNetworkConnections([out, retval] IEnumNetworkConnections** ppEnum);

    // Get a network connection by a Network Connection ID.
    //HRESULT GetNetworkConnection([in] GUID gdNetworkConnectionId, [out, retval] INetworkConnection** ppNetworkConnection);
    [id(4)]
    HRESULT GetNetworkConnection([in] int gdNetworkConnectionId1, [in] int gdNetworkConnectionId2, [in] int gdNetworkConnectionId3, [in] int gdNetworkConnectionId4, [out, retval] INetworkConnection** ppNetworkConnection);

    // Returns whether this machine has Internet connectivity.
    [propget, id(5)]
    HRESULT IsConnectedToInternet([out, retval] VARIANT_BOOL* pbIsConnected);

    // Returns whether this machine has any network connectivity.
    [propget, id(6)]
    HRESULT IsConnected([out, retval] VARIANT_BOOL* pbIsConnected);

    // Returns the aggregated connectivity state of all networks on this machine.
    [id(7)]
    HRESULT GetConnectivity([out, retval] NLM_CONNECTIVITY* pConnectivity);

    // Sets simulated connection profile information.
    [id(8)]
    HRESULT SetSimulatedProfileInfo([in] NLM_SIMULATED_PROFILE_INFO* pSimulatedInfo);

    // Clear simulated cost data, if it has been set.
    [id(9)]
    HRESULT ClearSimulatedProfileInfo();
}

[
    odl,
    uuid(DCB00001-570F-4A9B-8D69-199FDBA5723B)
    //oleautomation
    // Event interface - do not make dual
]
interface INetworkListManagerEvents : stdole.IUnknown
{
    HRESULT ConnectivityChanged([in] NLM_CONNECTIVITY newConnectivity);
}

//
//---------------------------------------------------
//
    typedef enum NLM_NETWORK_CATEGORY
    {
        NLM_NETWORK_CATEGORY_PUBLIC = 0x00,
        NLM_NETWORK_CATEGORY_PRIVATE = 0x01,
        NLM_NETWORK_CATEGORY_DOMAIN_AUTHENTICATED = 0x02
    } NLM_NETWORK_CATEGORY;
[
    odl,
    uuid(DCB00002-570F-4A9B-8D69-199FDBA5723B),
    oleautomation,
    dual
]
interface INetwork : IDispatch
{


    // Get the name of this network.
    [id(1)]
    HRESULT GetName([out, retval] BSTR* pszNetworkName);

    // Rename this network. This change takes effect immediately.
    [id(2)]
    HRESULT SetName([in] BSTR szNetworkNewName);

    // Get the network description.
    [id(3)]
    HRESULT GetDescription([out, retval] BSTR* pszDescription);

    // Set the network description. This change takes effect immediately.
    [id(4)]
    HRESULT SetDescription([in] BSTR szDescription);

    // Get the network ID.
    [id(5)]
    HRESULT GetNetworkId([out, retval] GUID* pgdGuidNetworkId);

    // Get the domain type.
    [id(6)]
    HRESULT GetDomainType([out, retval] NLM_DOMAIN_TYPE* pNetworkType);

    // Get the list of network connections for this network.
    [id(7)]
    HRESULT GetNetworkConnections([out, retval] IEnumNetworkConnections** ppEnumNetworkConnection);

    // Get the time and date this network was created.
    [id(8)]
    HRESULT GetTimeCreatedAndConnected([out] DWORD* pdwLowDateTimeCreated,
        [out] DWORD* pdwHighDateTimeCreated,
        [out] DWORD* pdwLowDateTimeConnected,
        [out] DWORD* pdwHighDateTimeConnected);

    // Returns whether this network has Internet connectivity.
    [propget, id(9)]
    HRESULT IsConnectedToInternet([out, retval] VARIANT_BOOL* pbIsConnected);

    // Returns whether this network has any network connectivy.
    [propget, id(10)]
    HRESULT IsConnected([out, retval] VARIANT_BOOL* pbIsConnected);

    // Returns the connectivity state of this network.
    [id(11)]
    HRESULT GetConnectivity([out, retval] NLM_CONNECTIVITY* pConnectivity);

    // Returns the category of this network.
    [id(12)]
    HRESULT GetCategory([out, retval] NLM_NETWORK_CATEGORY* pCategory);

    // Sets the category of this network. This change takes effect immediately.
    [id(13)]
    HRESULT SetCategory([in] NLM_NETWORK_CATEGORY NewCategory);
}

[
    odl,
    uuid(B5550ABB-3391-4310-804F-25DCC325ED81),
    oleautomation,
    dual
]
interface INetwork2 : INetwork
{
    // Returns a boolean value indicating whether the network is domain authenticated by the particular kind.
    [id(14)]
    HRESULT IsDomainAuthenticatedBy([in] NLM_DOMAIN_AUTHENTICATION_KIND domainAuthenticationKind, [out, retval] BOOL* pValue);
}
//
////
////---------------------------------------------------
////
[
    odl,
    uuid(DCB00003-570F-4A9B-8D69-199FDBA5723B),
    dual
    //oleautomation,
]
interface IEnumNetworks : IDispatch
{
    [id(-4), hidden, restricted]
    HRESULT _NewEnum([out, retval] long* ppEnumVar); /*IEnumVARIANT***/

    // Get the next network in this enumeration.
    [id(1)]
    HRESULT Next([in] ULONG celt,
        [out] INetwork** rgelt,
        [in, out] ULONG* pceltFetched);

    // Skip over a network.
    [id(2)]
    HRESULT Skip([in] ULONG celt);

    // Restart this enumeration.
    [id(3)]
    HRESULT Reset();

    // Clone this enumeration.
    [id(4)]
    HRESULT Clone([out, retval] IEnumNetworks** ppEnumNetwork);
}

//
//---------------------------------------------------
//
    typedef enum NLM_NETWORK_PROPERTY_CHANGE
    {
        NLM_NETWORK_PROPERTY_CHANGE_CONNECTION = 0x01,
        NLM_NETWORK_PROPERTY_CHANGE_DESCRIPTION = 0x02,
        NLM_NETWORK_PROPERTY_CHANGE_NAME = 0x04,
        NLM_NETWORK_PROPERTY_CHANGE_ICON = 0x08,
        NLM_NETWORK_PROPERTY_CHANGE_CATEGORY_VALUE = 0x10
    } NLM_NETWORK_PROPERTY_CHANGE;
[
    odl,
    uuid(DCB00004-570F-4A9B-8D69-199FDBA5723B)
    //oleautomation
    // Event interface - do not make dual
]
interface INetworkEvents : stdole.IUnknown
{


    //HRESULT NetworkAdded([in] GUID networkId);
    //HRESULT NetworkDeleted([in] GUID networkId);
    //HRESULT NetworkConnectivityChanged([in] GUID networkId, [in] NLM_CONNECTIVITY newConnectivity);
    //HRESULT NetworkPropertyChanged([in] GUID networkId, [in] NLM_NETWORK_PROPERTY_CHANGE flags);
    HRESULT NetworkAdded([in] int networkId1, [in] int networkId2, [in] int networkId3, [in] int networkId4);
    HRESULT NetworkDeleted([in] int networkId1, [in] int networkId2, [in] int networkId3, [in] int networkId4);
    HRESULT NetworkConnectivityChanged([in] int networkId1, [in] int networkId2, [in] int networkId3, [in] int networkId4, [in] NLM_CONNECTIVITY newConnectivity);
    HRESULT NetworkPropertyChanged([in] int networkId1, [in] int networkId2, [in] int networkId3, [in] int networkId4, [in] NLM_NETWORK_PROPERTY_CHANGE flags);
}




































//
//---------------------------------------------------
//
[
    odl,
    uuid(DCB00005-570F-4A9B-8D69-199FDBA5723B),
    oleautomation,
    dual
]
interface INetworkConnection : IDispatch
{
    // Returns the associated network of this connection.
    [id(1)]
    HRESULT GetNetwork([out, retval] INetwork** ppNetwork);

    // Returns whether this network connection has Internet connectivity.
    [propget, id(2)]
    HRESULT IsConnectedToInternet([out, retval] VARIANT_BOOL* pbIsConnected);

    // Returns whether this network connection has any network connectivity.
    [propget, id(3)]
    HRESULT IsConnected([out, retval] VARIANT_BOOL* pbIsConnected);

    // Returns the connectivity state of this network connection.
    [id(4)]
    HRESULT GetConnectivity([out, retval] NLM_CONNECTIVITY* pConnectivity);

    // Returns a unique identifer for this connection.
    [id(5)]
    HRESULT GetConnectionId([out, retval] GUID* pgdConnectionId);

    // Returns the network adapter used by this connection. There might be multiple connections using the same AdapterId.
    [id(6)]
    HRESULT GetAdapterId([out, retval] GUID* pgdAdapterId);

    // Returns the domain type of this network connection.
    [id(7)]
    HRESULT GetDomainType([out, retval] NLM_DOMAIN_TYPE* pDomainType);
}

[
    odl,
    uuid(00E676ED-5A35-4738-92EB-8581738D0F0A),
    oleautomation,
    dual
]
interface INetworkConnection2 : INetworkConnection
{
    // Returns a boolean value indicating whether the network connection is domain authenticated by the particular kind.
    [id(8)]
    HRESULT IsDomainAuthenticatedBy([in] NLM_DOMAIN_AUTHENTICATION_KIND domainAuthenticationKind, [out, retval] BOOL* pValue);
}

//
//---------------------------------------------------
//
[
    odl,
    uuid(DCB00006-570F-4A9B-8D69-199FDBA5723B),
    oleautomation,
    dual
]
interface IEnumNetworkConnections : IDispatch
{
    [id(-4), hidden, restricted]
    HRESULT _NewEnum([out, retval] long* ppEnumVar); /* IEnumVARIANT** */

    // Get the next network connection in this enumeration.
    [id(1)]
    HRESULT Next([in] ULONG celt,
        [out] INetworkConnection** rgelt,
        [in, out] ULONG* pceltFetched);

    // Skip over a network connection.
    [id(2)]
    HRESULT Skip([in] ULONG celt);

    // Restart this enumeration.
    [id(3)]
    HRESULT Reset();

    // Clone this enumeration.
    [id(4)]
    HRESULT Clone([out, retval] IEnumNetworkConnections** ppEnumNetwork);
}

//
//---------------------------------------------------
//
[
    odl,
    uuid(DCB00007-570F-4A9B-8D69-199FDBA5723B)
    //oleautomation
    // Event interface - do not make dual
]
interface INetworkConnectionEvents : stdole.IUnknown
{
    typedef enum NLM_CONNECTION_PROPERTY_CHANGE
    {
        NLM_CONNECTION_PROPERTY_CHANGE_AUTHENTICATION = 0x01
    } NLM_CONNECTION_PROPERTY_CHANGE;

    //HRESULT NetworkConnectionConnectivityChanged([in] GUID connectionId, [in] NLM_CONNECTIVITY newConnectivity);
    HRESULT NetworkConnectionConnectivityChanged([in] int connectionId1, [in] int connectionId2, [in] int connectionId3, [in] int connectionId4, [in] NLM_CONNECTIVITY newConnectivity);
    //HRESULT NetworkConnectionPropertyChanged([in] GUID connectionId, [in] NLM_CONNECTION_PROPERTY_CHANGE flags);
    HRESULT NetworkConnectionPropertyChanged([in] int connectionId1, [in] int connectionId2, [in] int connectionId3, [in] int connectionId4, [in] NLM_CONNECTION_PROPERTY_CHANGE flags);
}

//
//---------------------------------------------------
//
[
    odl,
    uuid(DCB00008-570F-4A9B-8D69-199FDBA5723B)
]
interface INetworkCostManager : stdole.IUnknown
{
    // Returns the cost of routing to a destination.
    [id(1)]
    HRESULT GetCost([out] DWORD* pCost, [in] NLM_SOCKADDR* pDestIPAddr);

    // Returns the data plan status of a connection used to route to a destination.
    [id(2)]
    HRESULT GetDataPlanStatus([out] NLM_DATAPLAN_STATUS* pDataPlanStatus,
        [in] NLM_SOCKADDR* pDestIPAddr
    );

    // Set a list of destination addresses to receive notifications.
    [id(3)]
    HRESULT SetDestinationAddresses([in] UINT32 length,
        [in] NLM_SOCKADDR* pDestIPAddrList,
        [in] VARIANT_BOOL bAppend);
}

//
//---------------------------------------------------
//
[
    odl,
    uuid(DCB00009-570F-4A9B-8D69-199FDBA5723B)
    // Event interface - do not make dual
]
interface INetworkCostManagerEvents : stdole.IUnknown
{
    HRESULT CostChanged([in] DWORD newCost, [in] NLM_SOCKADDR* pDestAddr);

    HRESULT DataPlanStatusChanged([in] NLM_SOCKADDR* pDestAddr);
}

//
//---------------------------------------------------
//
[
    odl,
    uuid(DCB0000a-570F-4A9B-8D69-199FDBA5723B)
]
interface INetworkConnectionCost : stdole.IUnknown
{
    // Returns the cost of this network connection.
    [id(1)]
    HRESULT GetCost([out] DWORD* pCost);

    // Returns the data plan status of this network connection.
    [id(2)]
    HRESULT GetDataPlanStatus([out] NLM_DATAPLAN_STATUS* pDataPlanStatus);
}

//
//---------------------------------------------------
//
[
    odl,
    uuid(DCB0000b-570F-4A9B-8D69-199FDBA5723B)
    // Event interface - do not make dual
]
interface INetworkConnectionCostEvents : stdole.IUnknown
{
    //HRESULT ConnectionCostChanged([in] GUID connectionId, [in] DWORD newCost);
    HRESULT ConnectionCostChanged([in] int connectionId1, [in] int connectionId2, [in] int connectionId3, [in] int connectionId4, [in] DWORD newCost);

    //HRESULT ConnectionDataPlanStatusChanged([in] GUID connectionId);
    HRESULT ConnectionDataPlanStatusChanged([in] int connectionId1, [in] int connectionId2, [in] int connectionId3, [in] int connectionId4);
}







//
//---------------------------------------------------
//
//[
//    uuid(DCB00D01-570F-4A9B-8D69-199FDBA5723B),
//    version(1.0)
//]
//library NETWORKLIST
//{
//    enum NLM_CONNECTION_COST;
//    interface INetworkConnectionCost;

    [
        uuid(DCB00C01-570F-4A9B-8D69-199FDBA5723B)
    ]
coclass NetworkListManager
{
    [default] interface INetworkListManager;
    interface INetworkCostManager;
    [default, source] interface INetworkEvents;
    [source] interface INetworkConnectionEvents;
    [source] interface INetworkListManagerEvents;
    [source] interface INetworkCostManagerEvents;
    [source] interface INetworkConnectionCostEvents;
    interface IPropertyBag;
    interface INetwork;
    interface INetwork2;
    interface IEnumNetworks;
    interface INetworkConnection;
    interface INetworkConnection2;
    interface IEnumNetworkConnections;
};
////}
