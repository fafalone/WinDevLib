

interface IDCompositionDevice;
interface IDCompositionDevice;
interface IDCompositionTarget;
interface IDCompositionVisual;
interface IDCompositionTransform;
interface IDCompositionTransform3D;
interface IDCompositionTranslateTransform;
interface IDCompositionTranslateTransform3D;
interface IDCompositionScaleTransform;
interface IDCompositionScaleTransform3D;
interface IDCompositionRotateTransform;
interface IDCompositionRotateTransform3D;
interface IDCompositionSkewTransform;
interface IDCompositionMatrixTransform;
interface IDCompositionMatrixTransform3D;
interface IDCompositionEffect;
interface IDCompositionEffectGroup;
interface IDCompositionClip;
interface IDCompositionRectangleClip;
interface IDCompositionAnimation;
interface IDCompositionSurface;
interface IDCompositionVirtualSurface;
interface IDCompositionFilterEffect;
interface IDCompositionGaussianBlurEffect;
interface IDCompositionBrightnessEffect;
interface IDCompositionColorMatrixEffect;
interface IDCompositionShadowEffect;
interface IDCompositionHueRotationEffect;
interface IDCompositionSaturationEffect;
interface IDCompositionTurbulenceEffect;
interface IDCompositionLinearTransferEffect;
interface IDCompositionTableTransferEffect;
interface IDCompositionCompositeEffect;
interface IDCompositionBlendEffect;
interface IDCompositionArithmeticCompositeEffect;
interface IDCompositionAffineTransform2DEffect;


//
// DirectComposition types
//

typedef enum DCOMPOSITION_BITMAP_INTERPOLATION_MODE
{
    DCOMPOSITION_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0,
    DCOMPOSITION_BITMAP_INTERPOLATION_MODE_LINEAR = 1,

    DCOMPOSITION_BITMAP_INTERPOLATION_MODE_INHERIT = 0xffffffff
} DCOMPOSITION_BITMAP_INTERPOLATION_MODE;

typedef enum DCOMPOSITION_BORDER_MODE
{
    DCOMPOSITION_BORDER_MODE_SOFT = 0,
    DCOMPOSITION_BORDER_MODE_HARD = 1,

    DCOMPOSITION_BORDER_MODE_INHERIT = 0xffffffff
} DCOMPOSITION_BORDER_MODE;

typedef enum DCOMPOSITION_COMPOSITE_MODE
{
    DCOMPOSITION_COMPOSITE_MODE_SOURCE_OVER = 0,
    DCOMPOSITION_COMPOSITE_MODE_DESTINATION_INVERT = 1,
//#if (_WIN32_WINNT >= _WIN32_WINNT_WINBLUE)
    DCOMPOSITION_COMPOSITE_MODE_MIN_BLEND = 2,
//#endif  // (_WIN32_WINNT >= _WIN32_WINNT_WINBLUE)

    DCOMPOSITION_COMPOSITE_MODE_INHERIT = 0xffffffff
} DCOMPOSITION_COMPOSITE_MODE;

//#if (_WIN32_WINNT >= _WIN32_WINNT_WINBLUE)
typedef enum DCOMPOSITION_BACKFACE_VISIBILITY
{
    DCOMPOSITION_BACKFACE_VISIBILITY_VISIBLE = 0,
    DCOMPOSITION_BACKFACE_VISIBILITY_HIDDEN = 1,

    DCOMPOSITION_BACKFACE_VISIBILITY_INHERIT = 0xffffffff
} DCOMPOSITION_BACKFACE_VISIBILITY;

typedef enum DCOMPOSITION_OPACITY_MODE
{
    DCOMPOSITION_OPACITY_MODE_LAYER = 0,
    DCOMPOSITION_OPACITY_MODE_MULTIPLY = 1,

    DCOMPOSITION_OPACITY_MODE_INHERIT = 0xffffffff
} DCOMPOSITION_OPACITY_MODE;
//#endif  // (_WIN32_WINNT >= _WIN32_WINNT_WINBLUE)

//#if (_WIN32_WINNT >= _WIN32_WINNT_WINTHRESHOLD)
typedef enum DCOMPOSITION_DEPTH_MODE
{
    DCOMPOSITION_DEPTH_MODE_TREE = 0,
    DCOMPOSITION_DEPTH_MODE_SPATIAL = 1,
    DCOMPOSITION_DEPTH_MODE_SORTED = 3,

    DCOMPOSITION_DEPTH_MODE_INHERIT = 0xffffffff
} DCOMPOSITION_DEPTH_MODE;
//#endif  // (_WIN32_WINNT >= _WIN32_WINNT_WINTHRESHOLD)

typedef struct DCOMPOSITION_FRAME_STATISTICS
{
    LARGE_INTEGER lastFrameTime;
    DXGI_RATIONAL currentCompositionRate;
    LARGE_INTEGER currentTime;
    LARGE_INTEGER timeFrequency;
    LARGE_INTEGER nextEstimatedFrameTime;
} DCOMPOSITION_FRAME_STATISTICS;





[
	dllname("dcomp.dll")
]
module DirectCompAPI
{

    //
    // Composition object specific access flags
    //

    const int COMPOSITIONOBJECT_READ = 0x0001;
const int COMPOSITIONOBJECT_WRITE = 0x0002;

const int COMPOSITIONOBJECT_ALL_ACCESS = 3; // (COMPOSITIONOBJECT_READ | COMPOSITIONOBJECT_WRITE);

[entry("DCompositionCreateDevice")]
long DCompositionCreateDevice(
    [in] IDXGIDevice * dxgiDevice,
    [in] REFIID iid,
    [in, out] void* dcompositionDevice
    );

[entry("DCompositionCreateDevice2")]
long DCompositionCreateDevice2(
    [in] IUnknown* renderingDevice,
    [in] REFIID iid,
    [in, out] void* dcompositionDevice
);

[entry("DCompositionCreateDevice3")]
long DCompositionCreateDevice3(
    [in] IUnknown* renderingDevice,
    [in] REFIID iid,
    [in, out] void* dcompositionDevice
);

[entry("DCompositionCreateSurfaceHandle")]
long DCompositionCreateSurfaceHandle(
    [in] DWORD desiredAccess,
    [in]  SECURITY_ATTRIBUTES* securityAttributes,
    [in, out] HANDLE* surfaceHandle
);

//+-----------------------------------------------------------------------------
//
//  Function:
//      DCompositionAttachMouseWheelToHwnd
//
//  Synopsis:
//      Creates an Interaction/InputSink to route mouse wheel messages to the
//      given HWND. After calling this API, the device owning the visual must
//      be committed.
//
//------------------------------------------------------------------------------
[entry("DCompositionAttachMouseWheelToHwnd")]
long DCompositionAttachMouseWheelToHwnd(
    [in] IDCompositionVisual* visual,
    [in] HWND hwnd,
    [in] BOOL enable
);

//+-----------------------------------------------------------------------------
//
//  Function:
//      DCompositionAttachMouseDragToHwnd
//
//  Synopsis:
//      Creates an Interaction/InputSink to route mouse button down and any
//      subsequent move and up events to the given HWND. There is no move
//      thresholding; when enabled, all events including and following the down
//      are unconditionally redirected to the specified window. After calling this
//      API, the device owning the visual must be committed.
//
//------------------------------------------------------------------------------
[entry("DCompositionAttachMouseDragToHwnd")]
long DCompositionAttachMouseDragToHwnd(
    [in] IDCompositionVisual* visual,
    [in] HWND hwnd,
    [in] BOOL enable
);

[entry("CreatePresentationFactory")]
long CreatePresentationFactory([in] IUnknown* d3dDevice, [in] REFIID riid, [out] LPVOID presentationFactory);

};




//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionDevice
//
//  Synopsis:
//      Serves as the root factory for all other DirectComposition objects and
//      controls transactional composition.
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionDevice
[
    odl,
    uuid(C37EA93A-E7AA-450D-B16F-9746CB0407F3)
]
interface IDCompositionDevice : stdole.IUnknown

{
    // Commits all DirectComposition commands pending on this device.
    HRESULT Commit(void
        );

    // Waits for the last Commit to be processed by the composition engine
    HRESULT WaitForCommitCompletion(void
        );

    // Gets timing information about the composition engine.
    HRESULT GetFrameStatistics(
        [in, out] DCOMPOSITION_FRAME_STATISTICS* statistics
        );

    // Creates a composition target bound to a window represented by an HWND.
    HRESULT CreateTargetForHwnd(
        [in] HWND hwnd,
        [in] BOOL topmost,
        [in, out] IDCompositionTarget** target
        );

    // Creates a new visual object.
    HRESULT CreateVisual(
        [in, out] IDCompositionVisual** visual
        );

    // Creates a DirectComposition surface object
    HRESULT CreateSurface(
        [in] UINT width,
        [in] UINT height,
        [in] DXGI_FORMAT pixelFormat,
        [in] DXGI_ALPHA_MODE alphaMode,
        [in, out] IDCompositionSurface** surface
        );

    // Creates a DirectComposition virtual surface object
    HRESULT CreateVirtualSurface(
        [in] UINT initialWidth,
        [in] UINT initialHeight,
        [in] DXGI_FORMAT pixelFormat,
        [in] DXGI_ALPHA_MODE alphaMode,
        [in, out] IDCompositionVirtualSurface** virtualSurface
        );

    // Creates a surface wrapper around a pre-existing surface that can be associated with one or more visuals for composition.
    HRESULT CreateSurfaceFromHandle(
        [in] HANDLE handle,
        [in, out] IUnknown** surface
        );

    // Creates a wrapper object that represents the rasterization of a layered window and which can be associated with a visual for composition.
    HRESULT CreateSurfaceFromHwnd(
        [in] HWND hwnd,
        [in, out] IUnknown** surface
        );

    // Creates a 2D translation transform object.
    HRESULT CreateTranslateTransform(
        [in, out] IDCompositionTranslateTransform** translateTransform
        );

    // Creates a 2D scale transform object.
    HRESULT CreateScaleTransform(
        [in, out] IDCompositionScaleTransform** scaleTransform
        );

    // Creates a 2D rotation transform object.
    HRESULT CreateRotateTransform(
        [in, out] IDCompositionRotateTransform** rotateTransform
        );

    // Creates a 2D skew transform object.
    HRESULT CreateSkewTransform(
        [in, out] IDCompositionSkewTransform** skewTransform
        );

    // Creates a 2D 3x2 matrix transform object.
    HRESULT CreateMatrixTransform(
        [in, out] IDCompositionMatrixTransform** matrixTransform
        );

    // Creates a 2D transform object that holds an array of 2D transform objects.
    HRESULT CreateTransformGroup(
        [in] long transforms,
        [in] UINT elements,
        [in, out] IDCompositionTransform** transformGroup
        );

    // Creates a 3D translation transform object.
    HRESULT CreateTranslateTransform3D(
        [in, out] IDCompositionTranslateTransform3D** translateTransform3D
        );

    // Creates a 3D scale transform object.
    HRESULT CreateScaleTransform3D(
        [in, out] IDCompositionScaleTransform3D** scaleTransform3D
        );

    // Creates a 3D rotation transform object.
    HRESULT CreateRotateTransform3D(
        [in, out] IDCompositionRotateTransform3D** rotateTransform3D
        );

    // Creates a 3D 4x4 matrix transform object.
    HRESULT CreateMatrixTransform3D(
        [in, out] IDCompositionMatrixTransform3D** matrixTransform3D
        );

    // Creates a 3D transform object that holds an array of 3D transform objects.
    HRESULT CreateTransform3DGroup(
        [in] long transforms3D,
        [in] UINT elements,
        [in, out] IDCompositionTransform3D** transform3DGroup
        );

    // Creates an effect group
    HRESULT CreateEffectGroup(
        [in, out] IDCompositionEffectGroup** effectGroup
        );

    // Creates a clip object that can be used to clip the contents of a visual subtree.
    HRESULT CreateRectangleClip(
        [in, out] IDCompositionRectangleClip** clip
        );

    // Creates an animation object
    HRESULT CreateAnimation(
        [in, out] IDCompositionAnimation** animation
        );

    // Returns the states of the app's DX device and DWM's dx devices
    HRESULT CheckDeviceState(
        [in, out] BOOL* pfValid
        );
};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionTarget
//
//  Synopsis:
//      An IDCompositionTarget interface represents a binding between a
//      DirectComposition visual tree and a destination on top of which the
//      visual tree should be composed.
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionTarget
[
    odl,
    uuid(eacdd04c-117e-4e17-88f4-d1b12b0e3d89)
]
interface IDCompositionTarget : stdole.IUnknown

{
    // Sets the root visual
    HRESULT SetRoot(
        [in]  IDCompositionVisual* visual
        );
};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionVisual
//
//  Synopsis:
//      An IDCompositionVisual interface represents a visual that participates in
//      a visual tree.
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionVisual
[
    odl,
    uuid(4d93059d-097b-4651-9a60-f0f25116e2f3)
]
interface IDCompositionVisual : stdole.IUnknown

{
    // Animates the value of the OffsetX property.
    HRESULT SetOffsetX_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of OffsetX property
    HRESULT SetOffsetX(
        [in] float offsetX
        );


    // Animates the value of the OffsetY property.
    HRESULT SetOffsetY_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of OffsetY property
    HRESULT SetOffsetY(
        [in] float offsetY
        );


    // Sets the transformation object that modifies the coordinate system of this visual.
    HRESULT SetTransform_T(
        [in]  IDCompositionTransform* transform
        );
    // Sets the matrix that modifies the coordinate system of this visual.
    HRESULT SetTransform(
        [in] D2D_MATRIX_3X2_F* matrix
        );


    // Sets the visual that should act as this visual's parent for the
    // purpose of establishing a base coordinate system.
    HRESULT SetTransformParent(
        [in]  IDCompositionVisual* visual
        );

    // Sets the effect object that is applied during the rendering of this visual
    HRESULT SetEffect(
        [in]  IDCompositionEffect* effect
        );

    // Sets the mode to use when interpolating pixels from bitmaps drawn not
    // exactly at scale and axis-aligned.
    HRESULT SetBitmapInterpolationMode(
        [in] DCOMPOSITION_BITMAP_INTERPOLATION_MODE interpolationMode
        );

    // Sets the mode to use when drawing the edge of bitmaps that are not
    // exactly axis-aligned and at precise pixel boundaries.
    HRESULT SetBorderMode(
        [in] DCOMPOSITION_BORDER_MODE borderMode
        );

    // Sets the clip object that restricts the rendering of this visual to a rectangle.
    HRESULT SetClip(
        [in]  IDCompositionClip* clip
        );
    // Sets the clip object that restricts the rendering of this visual to a D2D rectangle.
    HRESULT SetClipR(
        [in] D2D_RECT_F* rect
        );


    // Associates a bitmap with a visual
    HRESULT SetContent(
        [in]  IUnknown* content
        );

    // Adds a visual to the children list of another visual.
    HRESULT AddVisual(
        [in] IDCompositionVisual* visual,
        [in] BOOL insertAbove,
        [in]  IDCompositionVisual* referenceVisual
        );

    // Removes a visual from the children list of another visual.
    HRESULT RemoveVisual(
        [in] IDCompositionVisual* visual
        );

    // Removes all visuals from the children list of another visual.
    HRESULT RemoveAllVisuals(void);

    // Sets the mode to use when composing the bitmap against the render target.
    HRESULT SetCompositeMode(
        [in] DCOMPOSITION_COMPOSITE_MODE compositeMode
        );
};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionEffect
//
//  Synopsis:
//      An IDCompositionEffect interface represents an effect
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionEffect
[
    odl,
    uuid(EC81B08F-BFCB-4e8d-B193-A915587999E8)
]
interface IDCompositionEffect : stdole.IUnknown

{
};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionTransform3D
//
//  Synopsis:
//      An IDCompositionTransform3D interface represents a 3D transformation.
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionTransform3D
[
    odl,
    uuid(71185722-246B-41f2-AAD1-0443F7F4BFC2)
]
interface IDCompositionTransform3D : IDCompositionEffect

{
};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionTransform
//
//  Synopsis:
//      An IDCompositionTransform interface represents a 2D transformation that
//      can be used to modify the coordinate space of a visual subtree.
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionTransform
[
    odl,
    uuid(FD55FAA7-37E0-4c20-95D2-9BE45BC33F55)
]
interface IDCompositionTransform : IDCompositionTransform3D

{
};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionTranslateTransform
//
//  Synopsis:
//      An IDCompositionTranslateTransform interface represents a 2D transformation
//      that affects only the offset of a visual along the x and y axes.
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionTranslateTransform
[
    odl,
    uuid(06791122-C6F0-417d-8323-269E987F5954)
]
interface IDCompositionTranslateTransform : IDCompositionTransform

{
    // Animates the value of the OffsetX property.
    HRESULT SetOffsetX_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the OffsetX property.
    HRESULT SetOffsetX(
        [in] float offsetX
        );

    // Animates the value of the OffsetY property.
    HRESULT SetOffsetY_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the OffsetY property.
    HRESULT SetOffsetY(
        [in] float offsetY
        );


};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionScaleTransform
//
//  Synopsis:
//      An IDCompositionScaleTransform interface represents a 2D transformation that
//      affects the scale of a visual along the x and y axes. The coordinate system
//      is scaled from the specified center point.
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionScaleTransform
[
    odl,
    uuid(71FDE914-40EF-45ef-BD51-68B037C339F9)
]
interface IDCompositionScaleTransform : IDCompositionTransform

{
    // Animates the value of the ScaleX property.
    HRESULT SetScaleX_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the ScaleX property.
    HRESULT SetScaleX(
        [in] float scaleX
        );

    // Animates the value of the ScaleY property.
    HRESULT SetScaleY_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the ScaleY property.
    HRESULT SetScaleY(
        [in] float scaleY
        );


    // Animates the value of the CenterX property.
    HRESULT SetCenterX_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the CenterX property.
    HRESULT SetCenterX(
        [in] float centerX
        );



    // Animates the value of the CenterY property.
    HRESULT SetCenterY_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the CenterY property.
    HRESULT SetCenterY(
        [in] float centerY
        );


};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionRotateTransform
//
//  Synopsis:
//      An IDCompositionRotateTransform interface represents a 2D transformation
//      that affects the rotation of a visual along the z axis. The coordinate system
//      is rotated around the specified center point.
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionRotateTransform
[
    odl,
    uuid(641ED83C-AE96-46c5-90DC-32774CC5C6D5)
]
interface IDCompositionRotateTransform : IDCompositionTransform

{
    // Animates the value of the Angle property.
    HRESULT SetAngle_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the Angle property.
    HRESULT SetAngle(
        [in] float angle
        );

    // Animates the value of the CenterX property.
    HRESULT SetCenterX_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the CenterX property.
    HRESULT SetCenterX(
        [in] float centerX
        );


    // Animates the value of the CenterY property.
    HRESULT SetCenterY_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the CenterY property.
    HRESULT SetCenterY(
        [in] float centerY
        );


};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionSkewTransform
//
//  Synopsis:
//      An IDCompositionSkewTransform interface represents a 2D transformation that
//      affects the skew of a visual along the x and y axes. The coordinate system
//      is skewed around the specified center point.
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionSkewTransform
[
    odl,
    uuid(E57AA735-DCDB-4c72-9C61-0591F58889EE)
]
interface IDCompositionSkewTransform : IDCompositionTransform

{
    // Animates the value of the AngleX property.
    HRESULT SetAngleX_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the AngleX property.
    HRESULT SetAngleX(
        [in] float angleX
        );


    // Animates the value of the AngleY property.
    HRESULT SetAngleY_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the AngleY property.
    HRESULT SetAngleY(
        [in] float angleY
        );


    // Animates the value of the CenterX property.
    HRESULT SetCenterX_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the CenterX property.
    HRESULT SetCenterX(
        [in] float centerX
        );


    // Animates the value of the CenterY property.
    HRESULT SetCenterY_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the CenterY property.
    HRESULT SetCenterY(
        [in] float centerY
        );


};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionMatrixTransform
//
//  Synopsis:
//      An IDCompositionMatrixTransform interface represents an arbitrary affine
//      2D transformation defined by a 3x2 matrix.
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionMatrixTransform
[
    odl,
    uuid(16CDFF07-C503-419c-83F2-0965C7AF1FA6)
]
interface IDCompositionMatrixTransform : IDCompositionTransform

{
    // Changes all values of the matrix of this transform.
    HRESULT SetMatrix(
        [in]  D2D_MATRIX_3X2_F* matrix
        );

    // Animates a single element of the matrix of this transform.
    HRESULT SetMatrixElement_A(
        [in] int row,
        [in] int column,
        [in] IDCompositionAnimation* animation
        );
    // Changes a single element of the matrix of this transform.
    HRESULT SetMatrixElement(
        [in] int row,
        [in] int column,
        [in] float value
        );


};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionEffectGroup
//
//  Synopsis:
//      An IDCompositionEffectGroup holds effects, inluding 3D transforms that can
//      be applied to a visual.
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionEffectGroup
[
    odl,
    uuid(A7929A74-E6B2-4bd6-8B95-4040119CA34D)
]
interface IDCompositionEffectGroup : IDCompositionEffect

{
    // Animates the opacity property
    HRESULT SetOpacity_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the opacity property.
    HRESULT SetOpacity(
        [in] float opacity
        );


    // Sets the 3D transform
    HRESULT SetTransform3D(
        [in]  IDCompositionTransform3D* transform3D
        );
};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionTranslateTransform3D
//
//  Synopsis:
//      An IDCompositionTranslateTransform3D interface represents a 3D transformation
//      that affects the offset of a visual along the x,y and z axes.
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionTranslateTransform3D
[
    odl,
    uuid(91636D4B-9BA1-4532-AAF7-E3344994D788)
]
interface IDCompositionTranslateTransform3D : IDCompositionTransform3D

{
    // Animates the value of the OffsetX property.
    HRESULT SetOffsetX_A(
        [in] IDCompositionAnimation* animation
        );
   // Changes the value of the OffsetX property.
    HRESULT SetOffsetX(
        [in] float offsetX
        );

 
    // Animates the value of the OffsetY property.
    HRESULT SetOffsetY_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the OffsetY property.
    HRESULT SetOffsetY(
        [in] float offsetY
        );

    // Animates the value of the OffsetZ property.
    HRESULT SetOffsetZ_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the OffsetZ property.
    HRESULT SetOffsetZ(
        [in] float offsetZ
        );


};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionScaleTransform3D
//
//  Synopsis:
//      An IDCompositionScaleTransform3D interface represents a 3D transformation that
//      affects the scale of a visual along the x, y and z axes. The coordinate system
//      is scaled from the specified center point.
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionScaleTransform3D
[
    odl,
    uuid(2A9E9EAD-364B-4b15-A7C4-A1997F78B389)
]
interface IDCompositionScaleTransform3D : IDCompositionTransform3D

{
    // Animates the value of the ScaleX property.
    HRESULT SetScaleX_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the ScaleX property.
    HRESULT SetScaleX(
        [in] float scaleX
        );

    // Animates the value of the ScaleY property.
    HRESULT SetScaleY_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the ScaleY property.
    HRESULT SetScaleY(
        [in] float scaleY
        );


    // Animates the value of the ScaleZ property.
    HRESULT SetScaleZ_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the ScaleZ property.
    HRESULT SetScaleZ(
        [in] float scaleZ
        );


    // Animates the value of the CenterX property.
    HRESULT SetCenterX_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the CenterX property.
    HRESULT SetCenterX(
        [in] float centerX
        );


    // Animates the value of the CenterY property.
    HRESULT SetCenterY_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the CenterY property.
    HRESULT SetCenterY(
        [in] float centerY
        );


    // Animates the value of the CenterZ property.
    HRESULT SetCenterZ_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the CenterZ property.
    HRESULT SetCenterZ(
        [in] float centerZ
        );


};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionRotateTransform3D
//
//  Synopsis:
//      An IDCompositionRotateTransform3D interface represents a 3D transformation
//      that affects the rotation of a visual along the specified axis at the
//      specified center point.
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionRotateTransform3D
[
    odl,
    uuid(D8F5B23F-D429-4a91-B55A-D2F45FD75B18)
]
interface IDCompositionRotateTransform3D : IDCompositionTransform3D

{
    //Overloaded methods are technically illegal in COM, and this resultsin the
    // compiler playing undocumented games, like requiring non-C++ callers to 
    // somehow know the orders are reversed.
    // Animates the value of the Angle property.
    HRESULT SetAngle_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the Angle property.
    HRESULT SetAngle(
        [in] float angle
        );

    // Animates the value of the AxisX property.
     // Changes the value of the AxisX property.
    HRESULT SetAxisX(
        [in] float axisX
        );
   HRESULT SetAxisX_A(
        [in] IDCompositionAnimation* animation
        );


    // Changes the value of the AxisY property.

    // Animates the value of the AxisY property.
    HRESULT SetAxisY_A(
        [in] IDCompositionAnimation* animation
        );
    HRESULT SetAxisY(
        [in] float axisY
        );


    // Changes the value of the AxisZ property.
    // Animates the value of the AxisZ property.
    HRESULT SetAxisZ_A(
        [in] IDCompositionAnimation* animation
        );
    HRESULT SetAxisZ(
        [in] float axisZ
        );



    // Animates the value of the CenterX property.
    HRESULT SetCenterX_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the CenterX property.
    HRESULT SetCenterX(
        [in] float centerX
        );


    // Animates the value of the CenterY property.
    HRESULT SetCenterY_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the CenterY property.
    HRESULT SetCenterY(
        [in] float centerY
        );


    // Animates the value of the CenterZ property.
    HRESULT SetCenterZ_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the CenterZ property.
    HRESULT SetCenterZ(
        [in] float centerZ
        );


};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionMatrixTransform3D
//
//  Synopsis:
//      An IDCompositionMatrixTransform3D interface represents an arbitrary
//      3D transformation defined by a 4x4 matrix.
//
////------------------------------------------------------------------------------
//#pragma warning(push)
//#pragma warning(disable : 4995)    // D3DMATRIX': name was marked as #pragma deprecated
//#undef INTERFACE
//#define INTERFACE IDCompositionMatrixTransform3D
typedef struct D3DMATRIX {    
    //union {
    //    struct {
    float m_11; float m_12; float m_13; float m_14;
    float m_21; float m_22; float m_23; float m_24;
    float m_31; float m_32; float m_33; float m_34;
    float m_41; float m_42; float m_43; float m_44;
     //   float m[4][4];
    //    };    //};
} D3DMATRIX;

[
    odl,
    uuid(4B3363F0-643B-41b7-B6E0-CCF22D34467C)
]
interface IDCompositionMatrixTransform3D : IDCompositionTransform3D

{
    // Changes all values of the matrix of this transform.
    HRESULT SetMatrix(
        [in] D3DMATRIX* matrix
        );

    // Animates a single element of the matrix of this transform.
    HRESULT SetMatrixElement_A(
        [in] int row,
        [in] int column,
        [in] IDCompositionAnimation* animation
        );
    // Changes a single element of the matrix of this transform.
    HRESULT SetMatrixElement(
        [in] int row,
        [in] int column,
        [in] float value
        );

};
#pragma warning(pop)

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionClip
//
//  Synopsis:
//      An IDCompositionClip interface represents a rectangle that restricts the
//      rasterization of a visual subtree.
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionClip
[
    odl,
    uuid(64AC3703-9D3F-45ec-A109-7CAC0E7A13A7)
]
interface IDCompositionClip : stdole.IUnknown

{
};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionRectangleClip
//
//  Synopsis:
//      An IDCompositionRectangleClip interface represents a rectangle that restricts
//      the rasterization of a visual subtree.
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionRectangleClip
[
    odl,
    uuid(9842AD7D-D9CF-4908-AED7-48B51DA5E7C2)
]
interface IDCompositionRectangleClip : IDCompositionClip

{

    // Animates the value of the Left property.
    HRESULT SetLeft_A(
        [in] IDCompositionAnimation* animation
        ); 
    // Changes the value of the Left property.
    HRESULT SetLeft(
        [in] float left
        );


    // Animates the value of the Top property.
    HRESULT SetTop_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the Top property.
    HRESULT SetTop(
        [in] float top
        );



    // Animates the value of the Right property.
    HRESULT SetRight_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the Right property.
    HRESULT SetRight(
        [in] float right
        );




    // Animates the value of the Bottom property.
    HRESULT SetBottom_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the Bottom property.
    HRESULT SetBottom(
        [in] float bottom
        );


    // Animates the value of the x radius of the ellipse that rounds the
    // top-left corner of the clip.
    HRESULT SetTopLeftRadiusX_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the x radius of the ellipse that rounds the
    // top-left corner of the clip.
    HRESULT SetTopLeftRadiusX(
        [in] float radius
        );

    // Animates the value of the y radius of the ellipse that rounds the
    // top-left corner of the clip.
    HRESULT SetTopLeftRadiusY_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the y radius of the ellipse that rounds the
    // top-left corner of the clip.
    HRESULT SetTopLeftRadiusY(
        [in] float radius
        );



    // Animates the value of the x radius of the ellipse that rounds the
    // top-right corner of the clip.
    HRESULT SetTopRightRadiusX_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the x radius of the ellipse that rounds the
    // top-right corner of the clip.
    HRESULT SetTopRightRadiusX(
        [in] float radius
        );



    // Animates the value of the y radius of the ellipse that rounds the
    // top-right corner of the clip.
    HRESULT SetTopRightRadiusY_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the y radius of the ellipse that rounds the
    // top-right corner of the clip.
    HRESULT SetTopRightRadiusY(
        [in] float radius
        );



    // Animates the value of the x radius of the ellipse that rounds the
    // bottom-left corner of the clip.
    HRESULT SetBottomLeftRadiusX_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the x radius of the ellipse that rounds the
    // bottom-left corner of the clip.
    HRESULT SetBottomLeftRadiusX(
        [in] float radius
        );


    // Animates the value of the y radius of the ellipse that rounds the
    // bottom-left corner of the clip.
    HRESULT SetBottomLeftRadiusY_A(
        [in] IDCompositionAnimation* animation
       );     
    // Changes the value of the y radius of the ellipse that rounds the
    // bottom-left corner of the clip.
    HRESULT SetBottomLeftRadiusY(
        [in] float radius
        );


    // Animates the value of the x radius of the ellipse that rounds the
    // bottom-right corner of the clip.
    HRESULT SetBottomRightRadiusX_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the x radius of the ellipse that rounds the
    // bottom-right corner of the clip.
    HRESULT SetBottomRightRadiusX(
        [in] float radius
        );


    // Animates the value of the y radius of the ellipse that rounds the
    // bottom-right corner of the clip.
    HRESULT SetBottomRightRadiusY_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the y radius of the ellipse that rounds the
    // bottom-right corner of the clip.
    HRESULT SetBottomRightRadiusY(
        [in] float radius
        );


};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionSurface
//
//  Synopsis:
//      An IDCompositionSurface interface represents a wrapper around a DirectX
//      object, or a sub-rectangle of one of those objects.
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionSurface
[
    odl,
    uuid(BB8A4953-2C99-4F5A-96F5-4819027FA3AC)
]
interface IDCompositionSurface : stdole.IUnknown

{
    HRESULT BeginDraw(
        [in] RECT* updateRect,
        [in] REFIID iid,
        [in, out] LPVOID updateObject,
        [in, out] POINT* updateOffset
        );

    HRESULT EndDraw(void
        );

    HRESULT SuspendDraw(void
        );

    HRESULT ResumeDraw(void
        );

    HRESULT Scroll(
        [in] RECT* scrollRect,
        [in] RECT* clipRect,
        [in] int offsetX,
        [in] int offsetY
        );
};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionVirtualSurface
//
//  Synopsis:
//      An IDCompositionVirtualSurface interface represents a sparsely
//      allocated surface.
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionVirtualSurface
[
    odl,
    uuid(AE471C51-5F53-4A24-8D3E-D0C39C30B3F0)
]
interface IDCompositionVirtualSurface : IDCompositionSurface

{
    HRESULT Resize(
        [in] UINT width,
        [in] UINT height
        );

    HRESULT Trim(
        [in] RECT* rectangles,
        [in] UINT count
        );
};


interface               IDCompositionDevice2;
interface           IDCompositionDeviceDebug;
interface         IDCompositionDesktopDevice;
interface               IDCompositionVisual2;
interface           IDCompositionVisualDebug;
interface        IDCompositionSurfaceFactory;


//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionDevice2
//
//  Synopsis:
//      Serves as the root factory for all other DirectComposition2 objects and
//      controls transactional composition.
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionDevice2
[
    odl,
    uuid(75F6468D-1B8E-447C-9BC6-75FEA80B5B25)
]
interface IDCompositionDevice2 : stdole.IUnknown

{
    // Commits all DirectComposition commands pending on this device.
    HRESULT Commit(void
        );

    // Waits for the last Commit to be processed by the composition engine
    HRESULT WaitForCommitCompletion(void
        );

    // Gets timing information about the composition engine.
    HRESULT GetFrameStatistics(
        [in, out] DCOMPOSITION_FRAME_STATISTICS* statistics
        );

    // Creates a new visual object.
    HRESULT CreateVisual(
        [in, out] IDCompositionVisual2** visual
        );

    // Creates a factory for surface objects
    HRESULT CreateSurfaceFactory(
        [in] IUnknown* renderingDevice,
        [in, out] IDCompositionSurfaceFactory** surfaceFactory
        );

    // Creates a DirectComposition surface object
    HRESULT CreateSurface(
        [in] UINT width,
        [in] UINT height,
        [in] DXGI_FORMAT pixelFormat,
        [in] DXGI_ALPHA_MODE alphaMode,
        [in, out] IDCompositionSurface** surface
        );

    // Creates a DirectComposition virtual surface object
    HRESULT CreateVirtualSurface(
        [in] UINT initialWidth,
        [in] UINT initialHeight,
        [in] DXGI_FORMAT pixelFormat,
        [in] DXGI_ALPHA_MODE alphaMode,
        [in, out] IDCompositionVirtualSurface** virtualSurface
        );

    // Creates a 2D translation transform object.
    HRESULT CreateTranslateTransform(
        [in, out] IDCompositionTranslateTransform** translateTransform
        );

    // Creates a 2D scale transform object.
    HRESULT CreateScaleTransform(
        [in, out] IDCompositionScaleTransform** scaleTransform
        );

    // Creates a 2D rotation transform object.
    HRESULT CreateRotateTransform(
        [in, out] IDCompositionRotateTransform** rotateTransform
        );

    // Creates a 2D skew transform object.
    HRESULT CreateSkewTransform(
        [in, out] IDCompositionSkewTransform** skewTransform
        );

    // Creates a 2D 3x2 matrix transform object.
    HRESULT CreateMatrixTransform(
        [in, out] IDCompositionMatrixTransform** matrixTransform
        );

    // Creates a 2D transform object that holds an array of 2D transform objects.
    HRESULT CreateTransformGroup(
        [in] long transforms,
        [in] UINT elements,
        [in, out] IDCompositionTransform** transformGroup
        );

    // Creates a 3D translation transform object.
    HRESULT CreateTranslateTransform3D(
        [in, out] IDCompositionTranslateTransform3D** translateTransform3D
        );

    // Creates a 3D scale transform object.
    HRESULT CreateScaleTransform3D(
        [in, out] IDCompositionScaleTransform3D** scaleTransform3D
        );

    // Creates a 3D rotation transform object.
    HRESULT CreateRotateTransform3D(
        [in, out] IDCompositionRotateTransform3D** rotateTransform3D
        );

    // Creates a 3D 4x4 matrix transform object.
    HRESULT CreateMatrixTransform3D(
        [in, out] IDCompositionMatrixTransform3D** matrixTransform3D
        );

    // Creates a 3D transform object that holds an array of 3D transform objects.
    HRESULT CreateTransform3DGroup(
        [in] long transforms3D,
        [in] UINT elements,
        [in, out] IDCompositionTransform3D** transform3DGroup
        );

    // Creates an effect group
    HRESULT CreateEffectGroup(
        [in, out] IDCompositionEffectGroup** effectGroup
        );

    // Creates a clip object that can be used to clip the contents of a visual subtree.
    HRESULT CreateRectangleClip(
        [in, out] IDCompositionRectangleClip** clip
        );

    // Creates an animation object
    HRESULT CreateAnimation(
        [in, out] IDCompositionAnimation** animation
        );
};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionDesktopDevice
//
//  Synopsis:
//      Serves as the root factory for all other desktop DirectComposition
//      objects.
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionDesktopDevice
[
    odl,
    uuid(5F4633FE-1E08-4CB8-8C75-CE24333F5602)
]
interface IDCompositionDesktopDevice : IDCompositionDevice2

{
    HRESULT CreateTargetForHwnd(
        [in] HWND hwnd,
        [in] BOOL topmost,
        [in, out] IDCompositionTarget** target
        );

    // Creates a surface wrapper around a pre-existing surface that can be associated with one or more visuals for composition.
    HRESULT CreateSurfaceFromHandle(
        [in] HANDLE handle,
        [in, out] IUnknown** surface
        );

    // Creates a wrapper object that represents the rasterization of a layered window and which can be associated with a visual for composition.
    HRESULT CreateSurfaceFromHwnd(
        [in] HWND hwnd,
        [in, out] IUnknown** surface
        );
};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionDeviceDebug
//
//  Synopsis:
//      IDCompositionDeviceDebug serves as a debug interface
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionDeviceDebug
[
    odl,
    uuid(A1A3C64A-224F-4A81-9773-4F03A89D3C6C)
]
interface IDCompositionDeviceDebug : stdole.IUnknown

{
    // Enables debug counters
    HRESULT EnableDebugCounters(void);

    // Enables debug counters
    HRESULT DisableDebugCounters(void);
};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionSurfaceFactory
//
//  Synopsis:
//      An IDCompositionSurfaceFactory interface represents an object that can
//      create surfaces suitable for composition.
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionSurfaceFactory
[
    odl,
    uuid(E334BC12-3937-4E02-85EB-FCF4EB30D2C8)
]
interface IDCompositionSurfaceFactory : stdole.IUnknown

{
    // Creates a DirectComposition surface object
    HRESULT CreateSurface(
        [in] UINT width,
        [in] UINT height,
        [in] DXGI_FORMAT pixelFormat,
        [in] DXGI_ALPHA_MODE alphaMode,
        [in, out] IDCompositionSurface** surface
        );

    // Creates a DirectComposition virtual surface object
    HRESULT CreateVirtualSurface(
        [in] UINT initialWidth,
        [in] UINT initialHeight,
        [in] DXGI_FORMAT pixelFormat,
        [in] DXGI_ALPHA_MODE alphaMode,
        [in, out] IDCompositionVirtualSurface** virtualSurface
        );
};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionVisual2
//
//  Synopsis:
//      An IDCompositionVisual2 interface represents a visual that participates in
//      a visual tree.
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionVisual2
[
    odl,
    uuid(E8DE1639-4331-4B26-BC5F-6A321D347A85)
]
interface IDCompositionVisual2 : IDCompositionVisual

{
    // Changes the interpretation of the opacity property of an effect group
    // associated with this visual
    HRESULT SetOpacityMode(
        [in] DCOMPOSITION_OPACITY_MODE mode
        );

    // Sets back face visibility
    HRESULT SetBackFaceVisibility(
        [in] DCOMPOSITION_BACKFACE_VISIBILITY visibility
        );
};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionVisualDebug
//
//  Synopsis:
//      An IDCompositionVisualDebug interface represents a debug visual
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionVisualDebug
[
    odl,
    uuid(FED2B808-5EB4-43A0-AEA3-35F65280F91B)
]
interface IDCompositionVisualDebug : IDCompositionVisual2

{
    // Enable heat map
    HRESULT EnableHeatMap(
        [in] D2D1_COLOR_F* color
        );

    // Disable heat map
    HRESULT DisableHeatMap(void);

    // Enable redraw regions
    HRESULT EnableRedrawRegions(void);

    // Disable redraw regions
    HRESULT DisableRedrawRegions(void);
};
//#endif  // (_WIN32_WINNT >= _WIN32_WINNT_WINBLUE)

//#if (_WIN32_WINNT >= _WIN32_WINNT_WINTHRESHOLD)
interface IDCompositionDevice3;
interface IDCompositionVisual3;

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionVisual3
//
//  Synopsis:
//      An IDCompositionVisual3 interface represents a visual that participates in
//      a visual tree.
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionVisual3

[
    odl,
    uuid(2775F462-B6C1-4015-B0BE-B3E7D6A4976D)
]
interface IDCompositionVisual3 : IDCompositionVisualDebug

{
    // Sets depth mode property associated with this visual
    HRESULT SetDepthMode(
        [in] DCOMPOSITION_DEPTH_MODE mode
        );

    // Animates the value of the OffsetZ property.
    HRESULT SetOffsetZ_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of OffsetZ property.
    HRESULT SetOffsetZ(
        [in] float offsetZ
        );



    // Animates the value of the Opacity property.
    HRESULT SetOpacity_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the value of the Opacity property.
    HRESULT SetOpacity(
        [in] float opacity
        );


    // Sets the transformation object that modifies the coordinate system of this visual.
    HRESULT SetTransform_T(
        [in]  IDCompositionTransform3D* transform
        );
    // Sets the matrix that modifies the coordinate system of this visual.
    HRESULT SetTransform(
        [in] D2D_MATRIX_4X4_F* matrix
        );


    // Changes the value of the Visible property
    HRESULT SetVisible(
        [in] BOOL visible
        );
};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionDevice3
//
//  Synopsis:
//      Serves as the root factory for all other DirectComposition3 objects and
//      controls transactional composition.
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionDevice3
[
    odl,
    uuid(0987CB06-F916-48BF-8D35-CE7641781BD9)
]
interface IDCompositionDevice3 : IDCompositionDevice2

{
    // Effect creation calls, each creates an interface around a D2D1Effect
    HRESULT CreateGaussianBlurEffect(
        [in, out] IDCompositionGaussianBlurEffect** gaussianBlurEffect
        );

    HRESULT CreateBrightnessEffect(
        [in, out] IDCompositionBrightnessEffect** brightnessEffect
        );

    HRESULT CreateColorMatrixEffect(
        [in, out] IDCompositionColorMatrixEffect** colorMatrixEffect
        );

    HRESULT CreateShadowEffect(
        [in, out] IDCompositionShadowEffect** shadowEffect
        );

    HRESULT CreateHueRotationEffect(
        [in, out] IDCompositionHueRotationEffect** hueRotationEffect
        );

    HRESULT CreateSaturationEffect(
        [in, out] IDCompositionSaturationEffect** saturationEffect
        );

    HRESULT CreateTurbulenceEffect(
        [in, out] IDCompositionTurbulenceEffect** turbulenceEffect
        );

    HRESULT CreateLinearTransferEffect(
        [in, out] IDCompositionLinearTransferEffect** linearTransferEffect
        );

    HRESULT CreateTableTransferEffect(
        [in, out] IDCompositionTableTransferEffect** tableTransferEffect
        );

    HRESULT CreateCompositeEffect(
        [in, out] IDCompositionCompositeEffect** compositeEffect
        );

    HRESULT CreateBlendEffect(
        [in, out] IDCompositionBlendEffect** blendEffect
        );

    HRESULT CreateArithmeticCompositeEffect(
        [in, out] IDCompositionArithmeticCompositeEffect** arithmeticCompositeEffect
        );

    HRESULT CreateAffineTransform2DEffect(
        [in, out] IDCompositionAffineTransform2DEffect** affineTransform2dEffect
        );
};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionFilterEffect
//
//  Synopsis:
//      An IDCompositionFilterEffect interface represents a filter effect
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionFilterEffect
[
    odl,
    uuid(30C421D5-8CB2-4E9F-B133-37BE270D4AC2)
]
interface IDCompositionFilterEffect : IDCompositionEffect

{
    // Sets the input at the given index to the filterEffect (NULL will use source visual, unless flagged otherwise)
    HRESULT SetInput(
        [in] UINT index,
        [in]  IUnknown* input,
        [in] UINT flags
        );
};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionGaussianBlurEffect
//
//  Synopsis:
//      An IDCompositionGaussianBlurEffect interface represents a gaussian blur filter effect
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionGaussianBlurEffect
[
    odl,
    uuid(45D4D0B7-1BD4-454E-8894-2BFA68443033)
]
interface IDCompositionGaussianBlurEffect : IDCompositionFilterEffect

{

    HRESULT SetStandardDeviation_A(
        [in] IDCompositionAnimation* animation
        );
    // Changes the amount of blur to be applied.
    HRESULT SetStandardDeviation(
        [in] float amount
        );


    // Changes border mode (see D2D1_GAUSSIANBLUR)
    HRESULT SetBorderMode(
        [in] D2D1_BORDER_MODE mode
        );
};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionBrightnessEffect
//
//  Synopsis:
//      An IDCompositionBrightnessEffect interface represents a brightness filter effect
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionBrightnessEffect
[
    odl,
    uuid(6027496E-CB3A-49AB-934F-D798DA4F7DA6)
]
interface IDCompositionBrightnessEffect : IDCompositionFilterEffect

{
    // Changes the value of white point property.
    HRESULT SetWhitePoint(
        [in] D2D1_VECTOR_2F* whitePoint
        );

    // Changes the value of black point property
    HRESULT SetBlackPoint(
        [in] D2D1_VECTOR_2F* blackPoint
        );

    // Changes the X value of the white point property.
     HRESULT SetWhitePointX_A(
        [in] IDCompositionAnimation* animation
        );
   HRESULT SetWhitePointX(
        [in] float whitePointX
        );


    // Changes the Y value of the white point property.
    HRESULT SetWhitePointY_A(
        [in] IDCompositionAnimation* animation
        );
    HRESULT SetWhitePointY(
        [in] float whitePointY
        );


    // Changes the X value of the black point property.
    HRESULT SetBlackPointX_A(
        [in] IDCompositionAnimation* animation
        );
    HRESULT SetBlackPointX(
        [in] float blackPointX
        );


    // Changes the Y value of the black point property.
    HRESULT SetBlackPointY_A(
        [in] IDCompositionAnimation* animation
        );
    HRESULT SetBlackPointY(
        [in] float blackPointY
        );


};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionColorMatrixEffect
//
//  Synopsis:
//      An IDCompositionColorMatrixEffect interface represents a color matrix filter effect
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionColorMatrixEffect
[
    odl,
    uuid(C1170A22-3CE2-4966-90D4-55408BFC84C4)
]
interface IDCompositionColorMatrixEffect : IDCompositionFilterEffect

{
    // Changes all values of the matrix for a color transform
    HRESULT SetMatrix(
        [in] D2D1_MATRIX_5X4_F* matrix
        );

    // Animates a single element of the matrix of this color transform.
    HRESULT SetMatrixElement_A(
        [in] int row,
        [in] int column,
        [in] IDCompositionAnimation* animation
        );

    // Changes a single element of the matrix of this color transform.
    HRESULT SetMatrixElement(
        [in] int row,
        [in] int column,
        [in] float value
        );

    // Changes the alpha mode
    HRESULT SetAlphaMode(
        [in] D2D1_COLORMATRIX_ALPHA_MODE mode
        );

    // Sets the clamp output property
    HRESULT SetClampOutput(
        [in] BOOL clamp
        );
};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionShadowEffect
//
//  Synopsis:
//      An IDCompositionShadowEffect interface represents a shadow filter effect
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionShadowEffect
[
    odl,
    uuid(4AD18AC0-CFD2-4C2F-BB62-96E54FDB6879)
]
interface IDCompositionShadowEffect : IDCompositionFilterEffect

{
    // Changes the amount of blur to be applied.
    HRESULT SetStandardDeviation_A(
        [in] IDCompositionAnimation* animation
        );
    HRESULT SetStandardDeviation(
        [in] float amount
        );


    // Changes shadow color
    HRESULT SetColor(
        [in] D2D1_VECTOR_4F* color
        );

    HRESULT SetRed_A(
        [in] IDCompositionAnimation* animation
        );
    HRESULT SetRed(
        [in] float amount
        );


     HRESULT SetGreen_A(
        [in] IDCompositionAnimation* animation
        );
   HRESULT SetGreen(
        [in] float amount
        );

    HRESULT SetBlue_A(
        [in] IDCompositionAnimation* animation
        );

    HRESULT SetBlue(
        [in] float amount
        );

    HRESULT SetAlpha_A(
        [in] IDCompositionAnimation* animation
        );
    HRESULT SetAlpha(
        [in] float amount
        );


};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionHueRotationEffect
//
//  Synopsis:
//      An IDCompositionHueRotationEffect interface represents a hue rotation filter effect
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionHueRotationEffect
[
    odl,
    uuid(6DB9F920-0770-4781-B0C6-381912F9D167)
]
interface IDCompositionHueRotationEffect : IDCompositionFilterEffect

{
    // Changes the angle of rotation
    HRESULT SetAngle_A(
        [in] IDCompositionAnimation* animation
        );
    HRESULT SetAngle(
        [in] float amountDegrees
        );
};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionSaturationEffect
//
//  Synopsis:
//      An IDCompositionSaturationEffect interface represents a saturation filter effect
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionSaturationEffect
[
    odl,
    uuid(A08DEBDA-3258-4FA4-9F16-9174D3FE93B1)
]
interface IDCompositionSaturationEffect : IDCompositionFilterEffect

{
    // Changes the amount of saturation to be applied.

    HRESULT SetSaturation_A(
        [in] IDCompositionAnimation* animation
        );
    HRESULT SetSaturation(
        [in] float ratio
        );

};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionTurbulenceEffect
//
//  Synopsis:
//      An IDCompositionTurbulenceEffect interface represents a turbulence filter effect
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionTurbulenceEffect
[
    odl,
    uuid(A6A55BDA-C09C-49F3-9193-A41922C89715)
]
interface IDCompositionTurbulenceEffect : IDCompositionFilterEffect

{
    // Changes the starting offset of the turbulence
    HRESULT SetOffset(
        [in] D2D1_VECTOR_2F* offset
        );

    // Changes the base frequency of the turbulence
    HRESULT SetBaseFrequency(
        [in] D2D1_VECTOR_2F* frequency
        );

    // Changes the output size of the turbulence
    HRESULT SetSize(
        [in] D2D1_VECTOR_2F* size
        );

    // Sets the number of octaves
    HRESULT SetNumOctaves(
        [in] UINT numOctaves
        );

    // Set the random number seed
    HRESULT SetSeed(
        [in] UINT seed
        );

    // Set the noise mode
    HRESULT SetNoise(
        [in] D2D1_TURBULENCE_NOISE noise
        );

    // Set stitchable
    HRESULT SetStitchable(
        [in] BOOL stitchable
        );
};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionLinearTransferEffect
//
//  Synopsis:
//      An IDCompositionLinearTransferEffect interface represents a linear transfer filter effect
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionLinearTransferEffect
[
    odl,
    uuid(4305EE5B-C4A0-4C88-9385-67124E017683)
]
interface IDCompositionLinearTransferEffect : IDCompositionFilterEffect
{
    HRESULT SetRedYIntercept_A(
        [in] IDCompositionAnimation* animation
        );

    HRESULT SetRedYIntercept(
        [in] float redYIntercept
        );

    HRESULT SetRedSlope_A(
        [in] IDCompositionAnimation* animation
        );
    HRESULT SetRedSlope(
        [in] float redSlope
        );



    HRESULT SetRedDisable(
        [in] BOOL redDisable
        );

    HRESULT SetGreenYIntercept_A(
        [in] IDCompositionAnimation* animation
        );
    HRESULT SetGreenYIntercept(
        [in] float greenYIntercept
        );


    HRESULT SetGreenSlope_A(
        [in] IDCompositionAnimation* animation
        );
    HRESULT SetGreenSlope(
        [in] float greenSlope
        );



    HRESULT SetGreenDisable(
        [in] BOOL greenDisable
        );

    HRESULT SetBlueYIntercept_A(
        [in] IDCompositionAnimation* animation
        );
    HRESULT SetBlueYIntercept(
        [in] float blueYIntercept
        );


    HRESULT SetBlueSlope_A(
        [in] IDCompositionAnimation* animation
        );
    HRESULT SetBlueSlope(
        [in] float blueSlope
        );


    HRESULT SetBlueDisable(
        [in] BOOL blueDisable
        );

    HRESULT SetAlphaYIntercept_A(
        [in] IDCompositionAnimation* animation
        );
    HRESULT SetAlphaYIntercept(
        [in] float alphaYIntercept
        );

    HRESULT SetAlphaSlope_A(
        [in] IDCompositionAnimation* animation
        );

    HRESULT SetAlphaSlope(
        [in] float alphaSlope
        );


    HRESULT SetAlphaDisable(
        [in] BOOL alphaDisable
        );

    HRESULT SetClampOutput(
        [in] BOOL clampOutput
        );
};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionTableTransferEffect
//
//  Synopsis:
//      An IDCompositionTableTransferEffect interface represents a Table transfer filter effect
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionTableTransferEffect
[
    odl,
    uuid(9B7E82E2-69C5-4EB4-A5F5-A7033F5132CD)
]
interface IDCompositionTableTransferEffect : IDCompositionFilterEffect

{
    HRESULT SetRedTable(
        [in] float* tableValues,
        [in] UINT count
        );

    HRESULT SetGreenTable(
        [in] float* tableValues,
        [in] UINT count
        );

    HRESULT SetBlueTable(
        [in]  float* tableValues,
        [in] UINT count
        );

    HRESULT SetAlphaTable(
        [in]  float* tableValues,
        [in] UINT count
        );

    HRESULT SetRedDisable(
        [in] BOOL redDisable
        );

    HRESULT SetGreenDisable(
        [in] BOOL greenDisable
        );

    HRESULT SetBlueDisable(
        [in] BOOL blueDisable
        );

    HRESULT SetAlphaDisable(
        [in] BOOL alphaDisable
        );

    HRESULT SetClampOutput(
        [in] BOOL clampOutput
        );

    // Note:  To set individual values, the table must have already been initialized
    //        with a buffer of values of the appropriate size, or these calls will fail
     HRESULT SetRedTableValue_A(
        [in] UINT index,
        [in] IDCompositionAnimation* animation
        );
   HRESULT SetRedTableValue(
        [in] UINT index,
        [in] float value
        );

    HRESULT SetGreenTableValue_A(
        [in] UINT index,
        [in] IDCompositionAnimation* animation
        );
    HRESULT SetGreenTableValue(
        [in] UINT index,
        [in] float value
        );


    HRESULT SetBlueTableValue_A(
        [in] UINT index,
        [in] IDCompositionAnimation* animation
        );

    HRESULT SetBlueTableValue(
        [in] UINT index,
        [in] float value
        );

    HRESULT SetAlphaTableValue_A(
        [in] UINT index,
        [in] IDCompositionAnimation* animation
        );
    HRESULT SetAlphaTableValue(
        [in] UINT index,
        [in] float value
        );


};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionCompositeEffect
//
//  Synopsis:
//      An IDCompositionCompositeEffect interface represents a composite filter effect
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionCompositeEffect
[
    odl,
    uuid(576616C0-A231-494D-A38D-00FD5EC4DB46)
]
interface IDCompositionCompositeEffect : IDCompositionFilterEffect

{
    // Changes the composite mode.
    HRESULT SetMode(
        [in] D2D1_COMPOSITE_MODE mode
        );
};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionBlendEffect
//
//  Synopsis:
//      An IDCompositionBlendEffect interface represents a blend filter effect
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionBlendEffect
[
    odl,
    uuid(33ECDC0A-578A-4A11-9C14-0CB90517F9C5)
]
interface IDCompositionBlendEffect : IDCompositionFilterEffect

{
    HRESULT SetMode(
        [in] D2D1_BLEND_MODE mode
        );
};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionArithmeticCompositeEffect
//
//  Synopsis:
//      An IDCompositionArithmeticCompositeEffect interface represents an arithmetic composite filter effect
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionArithmeticCompositeEffect
[
    odl,
    uuid(3B67DFA8-E3DD-4E61-B640-46C2F3D739DC)
]
interface IDCompositionArithmeticCompositeEffect : IDCompositionFilterEffect

{
    HRESULT SetCoefficients(
        [in] D2D1_VECTOR_4F* coefficients
        );

    HRESULT SetClampOutput(
        [in] BOOL clampoutput
        );

    HRESULT SetCoefficient1_A(
        [in] IDCompositionAnimation* animation
        );
    HRESULT SetCoefficient1(
        [in] float Coeffcient1
        );


    HRESULT SetCoefficient2_A(
        [in] IDCompositionAnimation* animation
        );
    HRESULT SetCoefficient2(
        [in] float Coefficient2
        );


    HRESULT SetCoefficient3_A(
        [in] IDCompositionAnimation* animation
        );
    HRESULT SetCoefficient3(
        [in] float Coefficient3
        );

    HRESULT SetCoefficient4_A(
        [in] IDCompositionAnimation* animation
        );
    HRESULT SetCoefficient4(
        [in] float Coefficient4
        );


};

//+-----------------------------------------------------------------------------
//
//  Interface:
//      IDCompositionAffineTransform2DEffect
//
//  Synopsis:
//      An IDCompositionAffineTransform2DEffect interface represents a affine transform 2D filter effect
//
//------------------------------------------------------------------------------
//#undef INTERFACE
//#define INTERFACE IDCompositionAffineTransform2DEffect
[
    odl,
    uuid(0B74B9E8-CDD6-492F-BBBC-5ED32157026D)
]
interface IDCompositionAffineTransform2DEffect : IDCompositionFilterEffect

{
    HRESULT SetInterpolationMode(
        [in] D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE interpolationMode
        );

    HRESULT SetBorderMode(
        [in] D2D1_BORDER_MODE borderMode
        );

    HRESULT SetTransformMatrix(
        [in] D2D1_MATRIX_3X2_F* transformMatrix
        );

    HRESULT SetTransformMatrixElement_A(
        [in] int row,
        [in] int column,
        [in] IDCompositionAnimation* animation
        );
    HRESULT SetTransformMatrixElement(
        [in] int row,
        [in] int column,
        [in] float value
        );

    HRESULT SetSharpness_A(
        [in] IDCompositionAnimation* animation
        );
    HRESULT SetSharpness(
        [in] float sharpness
        );


};


[
    odl,
    uuid(CBFD91D9-51B2-45e4-B3DE-D19CCFB863C5),
    helpstring("IDCompositionAnimation Interface")
]
interface IDCompositionAnimation : stdole.IUnknown
{
    // Resets the animation function so that it contains no segments as when it was first created.
    HRESULT
        Reset
        (void);

    // Sets the absolute time at which the animation curve starts.
    HRESULT
        SetAbsoluteBeginTime
        (
            [in] CURRENCY beginTime
        );

    // Adds a cubic polynomial segment to the animation function.
    HRESULT
        AddCubic
        (
            [in] double beginOffset,
            [in] float constantCoefficient,
            [in] float linearCoefficient,
            [in] float quadraticCoefficient,
            [in] float cubicCoefficient
        );

    // Adds a sinusoidal segment to the animation function.
    HRESULT
        AddSinusoidal
        (
            [in] double beginOffset,
            [in] float bias,
            [in] float amplitude,
            [in] float frequency,
            [in] float phase
        );

    // Repeats the animation.
    HRESULT
        AddRepeat
        (
            [in] double beginOffset,
            [in] double durationToRepeat
        );

    // Terminates an animation curve.
    HRESULT
        End
        (
            [in] double endOffset,
            [in] float endValue
        );

}

[
    odl,
    uuid(2AF16BA9-2DE5-4B75-82D9-01372AFBFFB4)
]
interface IInputPaneAnimationCoordinator : stdole.IUnknown
{
    // Adds a direct composition animation to coordinate with on the specified IDCompositionDevice device.
    // We use IUnknown here since IDCompositionDevice is not available in an IDL definition.
    HRESULT AddAnimation([in] IDCompositionDevice* device,
        [in] IDCompositionAnimation* animation);
}


    [
        uuid(1F046ABF-3202-4DC1-8CB5-3C67617CE1FA)
    ]
    coclass ShowInputPaneAnimationCoordinator
    {
        [default] interface IInputPaneAnimationCoordinator;
    }
    [
        uuid(384742B1-2A77-4CB3-8CF8-1136F5E17E59)
    ]
    coclass HideInputPaneAnimationCoordinator
    {
        [default] interface IInputPaneAnimationCoordinator;
    };



