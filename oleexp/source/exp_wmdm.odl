typedef enum WMDM_TAG_DATATYPE
{
    WMDM_TYPE_DWORD = 0,
    WMDM_TYPE_STRING = 1,
    WMDM_TYPE_BINARY = 2,
    WMDM_TYPE_BOOL = 3,
    WMDM_TYPE_QWORD = 4,
    WMDM_TYPE_WORD = 5,
    WMDM_TYPE_GUID = 6,
    WMDM_TYPE_DATE = 7
} 	WMDM_TAG_DATATYPE;

typedef enum WMDM_SESSION_TYPE
{
    WMDM_SESSION_NONE = 0,
    WMDM_SESSION_TRANSFER_TO_DEVICE = 0x1,
    WMDM_SESSION_TRANSFER_FROM_DEVICE = 0x10,
    WMDM_SESSION_DELETE = 0x100,
    WMDM_SESSION_CUSTOM = 0x1000
} 	WMDM_SESSION_TYPE;

//typedef struct _tWAVEFORMATEX
//{
//    WORD wFormatTag;
//    WORD nChannels;
//    DWORD nSamplesPerSec;
//    DWORD nAvgBytesPerSec;
//    WORD nBlockAlign;
//    WORD wBitsPerSample;
//    WORD cbSize;
//} 	_WAVEFORMATEX;

//typedef struct _tagBITMAPINFOHEADER
//{
//    DWORD biSize;
//    LONG biWidth;
//    LONG biHeight;
//    WORD biPlanes;
//    WORD biBitCount;
//    DWORD biCompression;
//    DWORD biSizeImage;
//    LONG biXPelsPerMeter;
//    LONG biYPelsPerMeter;
//    DWORD biClrUsed;
//    DWORD biClrImportant;
//} 	_BITMAPINFOHEADER;


typedef struct VIDEOINFOHEADER
{
    RECT rcSource;
    RECT rcTarget;
    DWORD dwBitRate;
    DWORD dwBitErrorRate;
    LONGLONG AvgTimePerFrame;
    BITMAPINFOHEADER bmiHeader;
} VIDEOINFOHEADER;

typedef struct WMFILECAPABILITIES
{
    LongPtr pwszMimeType;
    DWORD dwReserved;
} WMFILECAPABILITIES;

typedef struct OPAQUECOMMAND
{
    UUID guidCommand;
    DWORD dwDataLen;
    LongPtr pData; //BYTE*
    BYTE abMAC[20];
} 	OPAQUECOMMAND;

//#define	WMDMID_LENGTH	( 128 )

typedef struct WMDMID
{
    UINT cbSize;
    DWORD dwVendorID;
    BYTE pID[128];
    UINT SerialNumberLength;
} 	WMDMID;

typedef WMDMID* PWMDMID;

typedef struct WMDMDATETIME
{
    WORD wYear;
    WORD wMonth;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
} 	WMDMDATETIME;

typedef WMDMDATETIME* PWMDMDATETIME;

typedef struct WMDMRIGHTS
{
    UINT cbSize;
    DWORD dwContentType;
    DWORD fuFlags;
    DWORD fuRights;
    DWORD dwAppSec;
    DWORD dwPlaybackCount;
    WMDMDATETIME ExpirationDate;
} 	WMDMRIGHTS;

typedef WMDMRIGHTS* PWMDMRIGHTS;

typedef struct WMDMMetadataView
{
    /* [string] */ LongPtr pwszViewName;
    UINT nDepth;
    /* [size_is][string] */ LongPtr ppwszTags;
} 	WMDMMetadataView;

typedef enum WMDM_STORAGE_ENUM_MODE
{
    ENUM_MODE_RAW = 0,
    ENUM_MODE_USE_DEVICE_PREF = 1, //(ENUM_MODE_RAW + 1),
    ENUM_MODE_METADATA_VIEWS = 2, //(ENUM_MODE_USE_DEVICE_PREF + 1)
} 	WMDM_STORAGE_ENUM_MODE;

typedef enum WMDM_FORMATCODE
{
    WMDM_FORMATCODE_NOTUSED = 0,
    WMDM_FORMATCODE_ALLIMAGES = 0xffffffff,
    WMDM_FORMATCODE_UNDEFINED = 0x3000,
    WMDM_FORMATCODE_ASSOCIATION = 0x3001,
    WMDM_FORMATCODE_SCRIPT = 0x3002,
    WMDM_FORMATCODE_EXECUTABLE = 0x3003,
    WMDM_FORMATCODE_TEXT = 0x3004,
    WMDM_FORMATCODE_HTML = 0x3005,
    WMDM_FORMATCODE_DPOF = 0x3006,
    WMDM_FORMATCODE_AIFF = 0x3007,
    WMDM_FORMATCODE_WAVE = 0x3008,
    WMDM_FORMATCODE_MP3 = 0x3009,
    WMDM_FORMATCODE_AVI = 0x300a,
    WMDM_FORMATCODE_MPEG = 0x300b,
    WMDM_FORMATCODE_ASF = 0x300c,
    WMDM_FORMATCODE_RESERVED_FIRST = 0x300d,
    WMDM_FORMATCODE_RESERVED_LAST = 0x37ff,
    WMDM_FORMATCODE_IMAGE_UNDEFINED = 0x3800,
    WMDM_FORMATCODE_IMAGE_EXIF = 0x3801,
    WMDM_FORMATCODE_IMAGE_TIFFEP = 0x3802,
    WMDM_FORMATCODE_IMAGE_FLASHPIX = 0x3803,
    WMDM_FORMATCODE_IMAGE_BMP = 0x3804,
    WMDM_FORMATCODE_IMAGE_CIFF = 0x3805,
    WMDM_FORMATCODE_IMAGE_GIF = 0x3807,
    WMDM_FORMATCODE_IMAGE_JFIF = 0x3808,
    WMDM_FORMATCODE_IMAGE_PCD = 0x3809,
    WMDM_FORMATCODE_IMAGE_PICT = 0x380a,
    WMDM_FORMATCODE_IMAGE_PNG = 0x380b,
    WMDM_FORMATCODE_IMAGE_TIFF = 0x380d,
    WMDM_FORMATCODE_IMAGE_TIFFIT = 0x380e,
    WMDM_FORMATCODE_IMAGE_JP2 = 0x380f,
    WMDM_FORMATCODE_IMAGE_JPX = 0x3810,
    WMDM_FORMATCODE_IMAGE_RESERVED_FIRST = 0x3811,
    WMDM_FORMATCODE_IMAGE_RESERVED_LAST = 0x3fff,
    WMDM_FORMATCODE_UNDEFINEDFIRMWARE = 0xb802,
    WMDM_FORMATCODE_WBMP = 0xb803,
    WMDM_FORMATCODE_JPEGXR = 0xb804,
    WMDM_FORMATCODE_WINDOWSIMAGEFORMAT = 0xb881,
    WMDM_FORMATCODE_UNDEFINEDAUDIO = 0xb900,
    WMDM_FORMATCODE_WMA = 0xb901,
    WMDM_FORMATCODE_OGG = 0xb902,
    WMDM_FORMATCODE_AAC = 0xb903,
    WMDM_FORMATCODE_AUDIBLE = 0xb904,
    WMDM_FORMATCODE_FLAC = 0xb906,
    WMDM_FORMATCODE_QCELP = 0xb907,
    WMDM_FORMATCODE_AMR = 0xb908,
    WMDM_FORMATCODE_UNDEFINEDVIDEO = 0xb980,
    WMDM_FORMATCODE_WMV = 0xb981,
    WMDM_FORMATCODE_MP4 = 0xb982,
    WMDM_FORMATCODE_MP2 = 0xb983,
    WMDM_FORMATCODE_3GP = 0xb984,
    WMDM_FORMATCODE_3G2 = 0xb985,
    WMDM_FORMATCODE_AVCHD = 0xb986,
    WMDM_FORMATCODE_ATSCTS = 0xb987,
    WMDM_FORMATCODE_DVBTS = 0xb988,
    WMDM_FORMATCODE_MKV = 0xb989,
    WMDM_FORMATCODE_MKA = 0xb98a,
    WMDM_FORMATCODE_MK3D = 0xb98b,
    WMDM_FORMATCODE_UNDEFINEDCOLLECTION = 0xba00,
    WMDM_FORMATCODE_ABSTRACTMULTIMEDIAALBUM = 0xba01,
    WMDM_FORMATCODE_ABSTRACTIMAGEALBUM = 0xba02,
    WMDM_FORMATCODE_ABSTRACTAUDIOALBUM = 0xba03,
    WMDM_FORMATCODE_ABSTRACTVIDEOALBUM = 0xba04,
    WMDM_FORMATCODE_ABSTRACTAUDIOVIDEOPLAYLIST = 0xba05,
    WMDM_FORMATCODE_ABSTRACTCONTACTGROUP = 0xba06,
    WMDM_FORMATCODE_ABSTRACTMESSAGEFOLDER = 0xba07,
    WMDM_FORMATCODE_ABSTRACTCHAPTEREDPRODUCTION = 0xba08,
    WMDM_FORMATCODE_MEDIA_CAST = 0xba0b,
    WMDM_FORMATCODE_WPLPLAYLIST = 0xba10,
    WMDM_FORMATCODE_M3UPLAYLIST = 0xba11,
    WMDM_FORMATCODE_MPLPLAYLIST = 0xba12,
    WMDM_FORMATCODE_ASXPLAYLIST = 0xba13,
    WMDM_FORMATCODE_PLSPLAYLIST = 0xba14,
    WMDM_FORMATCODE_UNDEFINEDDOCUMENT = 0xba80,
    WMDM_FORMATCODE_ABSTRACTDOCUMENT = 0xba81,
    WMDM_FORMATCODE_XMLDOCUMENT = 0xba82,
    WMDM_FORMATCODE_MICROSOFTWORDDOCUMENT = 0xba83,
    WMDM_FORMATCODE_MHTCOMPILEDHTMLDOCUMENT = 0xba84,
    WMDM_FORMATCODE_MICROSOFTEXCELSPREADSHEET = 0xba85,
    WMDM_FORMATCODE_MICROSOFTPOWERPOINTDOCUMENT = 0xba86,
    WMDM_FORMATCODE_UNDEFINEDMESSAGE = 0xbb00,
    WMDM_FORMATCODE_ABSTRACTMESSAGE = 0xbb01,
    WMDM_FORMATCODE_UNDEFINEDCONTACT = 0xbb80,
    WMDM_FORMATCODE_ABSTRACTCONTACT = 0xbb81,
    WMDM_FORMATCODE_VCARD2 = 0xbb82,
    WMDM_FORMATCODE_VCARD3 = 0xbb83,
    WMDM_FORMATCODE_UNDEFINEDCALENDARITEM = 0xbe00,
    WMDM_FORMATCODE_ABSTRACTCALENDARITEM = 0xbe01,
    WMDM_FORMATCODE_VCALENDAR1 = 0xbe02,
    WMDM_FORMATCODE_VCALENDAR2 = 0xbe03,
    WMDM_FORMATCODE_UNDEFINEDWINDOWSEXECUTABLE = 0xbe80,
    WMDM_FORMATCODE_M4A = 0x4d503441,
    WMDM_FORMATCODE_3GPA = 0x33475041,
    WMDM_FORMATCODE_3G2A = 0x33473241,
    WMDM_FORMATCODE_SECTION = 0xbe82
} 	WMDM_FORMATCODE;

typedef enum WMDM_ENUM_PROP_VALID_VALUES_FORM
{
    WMDM_ENUM_PROP_VALID_VALUES_ANY = 0,
    WMDM_ENUM_PROP_VALID_VALUES_RANGE = 1, //(WMDM_ENUM_PROP_VALID_VALUES_ANY + 1),
    WMDM_ENUM_PROP_VALID_VALUES_ENUM = 2, // (WMDM_ENUM_PROP_VALID_VALUES_RANGE + 1)
} 	WMDM_ENUM_PROP_VALID_VALUES_FORM;

typedef struct WMDM_PROP_VALUES_RANGE
{
    VARIANT rangeMin;
    VARIANT rangeMax;
    VARIANT rangeStep;
} 	WMDM_PROP_VALUES_RANGE;

typedef struct WMDM_PROP_VALUES_ENUM
{
    UINT cEnumValues;
    LongPtr pValues; //PROPVARIANT*
} 	WMDM_PROP_VALUES_ENUM;

typedef struct WMDM_PROP_DESC
{
    LongPtr pwszPropName;
    WMDM_ENUM_PROP_VALID_VALUES_FORM ValidValuesForm;
    ///* [switch_is][switch_type] */ union
    //{
    //    /* [case()] */  /* Empty union arm */
    //    /* [case()] */ WMDM_PROP_VALUES_RANGE ValidValuesRange;
    //    /* [case()] */ WMDM_PROP_VALUES_ENUM EnumeratedValidValues;
    //} 	ValidValues;
    BYTE ValidValues[48]; //DIFFERENT FOR x64!!
} 	WMDM_PROP_DESC;

typedef struct WMDM_PROP_CONFIG
{
    UINT nPreference;
    UINT nPropDesc;
    LongPtr pPropDesc; //WMDM_PROP_DESC*
} 	WMDM_PROP_CONFIG;

typedef struct WMDM_FORMAT_CAPABILITY
{
    UINT nPropConfig;
    LongPtr pConfigs; // WMDM_PROP_CONFIG*
} 	WMDM_FORMAT_CAPABILITY;

//#define	WMDM_MAC_LENGTH	( 8 )

typedef enum tagWMDM_FIND_SCOPE
{
    WMDM_FIND_SCOPE_GLOBAL = 0,
    WMDM_FIND_SCOPE_IMMEDIATE_CHILDREN = 1, //(WMDM_FIND_SCOPE_GLOBAL + 1)
} 	WMDM_FIND_SCOPE;

// WMDM HRESULTS
//
//Success codes
//

// Revocation Flags
typedef enum WMDMRevocationFlags {
    WMDM_WMDM_REVOKED                       = 0x00000001,
    WMDM_APP_REVOKED                        = 0x00000002,
    WMDM_SP_REVOKED                         = 0x00000004,
    WMDM_SCP_REVOKED                        = 0x00000008
} WMDMRevocationFlags;

// GetFormatSupport2 Flags
typedef enum WMDMGetFmtSupport2Flags {
    WMDM_GET_FORMAT_SUPPORT_AUDIO           = 0x00000001,
    WMDM_GET_FORMAT_SUPPORT_VIDEO           = 0x00000002,
    WMDM_GET_FORMAT_SUPPORT_FILE            = 0x00000004
} WMDMGetFmtSupport2Flags;

// MDMRIGHTS Flags
typedef enum WMDMRightsFlags
{
    WMDM_RIGHTS_PLAYBACKCOUNT               = 0x00000001,
    WMDM_RIGHTS_EXPIRATIONDATE              = 0x00000002,
    WMDM_RIGHTS_GROUPID                     = 0x00000004,
    WMDM_RIGHTS_FREESERIALIDS               = 0x00000008,
    WMDM_RIGHTS_NAMEDSERIALIDS              = 0x00000010
} WMDMRightsFlags;

// Device Type Flags
typedef enum WMDMDeviceTypeFlags {
    WMDM_DEVICE_TYPE_PLAYBACK               = 0x00000001,
    WMDM_DEVICE_TYPE_RECORD                 = 0x00000002,
    WMDM_DEVICE_TYPE_DECODE                 = 0x00000004,
    WMDM_DEVICE_TYPE_ENCODE                 = 0x00000008,
    WMDM_DEVICE_TYPE_STORAGE                = 0x00000010,
    WMDM_DEVICE_TYPE_VIRTUAL                = 0x00000020,
    WMDM_DEVICE_TYPE_SDMI                   = 0x00000040,
    WMDM_DEVICE_TYPE_NONSDMI                = 0x00000080,
    WMDM_DEVICE_TYPE_NONREENTRANT           = 0x00000100,
    WMDM_DEVICE_TYPE_FILELISTRESYNC         = 0x00000200,
    WMDM_DEVICE_TYPE_VIEW_PREF_METADATAVIEW = 0x00000400
} WMDMDeviceTypeFlags;

// Device Power Source Flags
typedef enum WMDMDevicePowerFlags {
    WMDM_POWER_CAP_BATTERY                  = 0x00000001,
    WMDM_POWER_CAP_EXTERNAL                 = 0x00000002,
    WMDM_POWER_IS_BATTERY                   = 0x00000004,
    WMDM_POWER_IS_EXTERNAL                  = 0x00000008,
    WMDM_POWER_PERCENT_AVAILABLE            = 0x00000010
} WMDMDevicePowerFlags;

// Device Status Flags
typedef enum WMDMDeviceStatusFlags {
    WMDM_STATUS_READY                       = 0x00000001,
    WMDM_STATUS_BUSY                        = 0x00000002,
    WMDM_STATUS_DEVICE_NOTPRESENT           = 0x00000004,
    WMDM_STATUS_DEVICECONTROL_PLAYING       = 0x00000008,
    WMDM_STATUS_DEVICECONTROL_RECORDING     = 0x00000010,
    WMDM_STATUS_DEVICECONTROL_PAUSED        = 0x00000020,
    WMDM_STATUS_DEVICECONTROL_REMOTE        = 0x00000040,
    WMDM_STATUS_DEVICECONTROL_STREAM        = 0x00000080,
    WMDM_STATUS_STORAGE_NOTPRESENT          = 0x00000100,
    WMDM_STATUS_STORAGE_INITIALIZING        = 0x00000200,
    WMDM_STATUS_STORAGE_BROKEN              = 0x00000400,
    WMDM_STATUS_STORAGE_NOTSUPPORTED        = 0x00000800,
    WMDM_STATUS_STORAGE_UNFORMATTED         = 0x00001000,
    WMDM_STATUS_STORAGECONTROL_INSERTING    = 0x00002000,
    WMDM_STATUS_STORAGECONTROL_DELETING     = 0x00004000,
    WMDM_STATUS_STORAGECONTROL_APPENDING    = 0x00008000,
    WMDM_STATUS_STORAGECONTROL_MOVING       = 0x00010000,
    WMDM_STATUS_STORAGECONTROL_READING      = 0x00020000
} WMDMDeviceStatusFlags;

// Device Capabilities Flags
typedef enum WMDMDeviceCapFlags {
    WMDM_DEVICECAP_CANPLAY                  = 0x00000001,
    WMDM_DEVICECAP_CANSTREAMPLAY            = 0x00000002,
    WMDM_DEVICECAP_CANRECORD                = 0x00000004,
    WMDM_DEVICECAP_CANSTREAMRECORD          = 0x00000008,
    WMDM_DEVICECAP_CANPAUSE                 = 0x00000010,
    WMDM_DEVICECAP_CANRESUME                = 0x00000020,
    WMDM_DEVICECAP_CANSTOP                  = 0x00000040,
    WMDM_DEVICECAP_CANSEEK                  = 0x00000080,
    WMDM_DEVICECAP_HASSECURECLOCK           = 0x00000100
} WMDMDeviceCapFlags;

// WMDM Seek Flags
typedef enum WMDMSeekFlags {
    WMDM_SEEK_REMOTECONTROL                 = 0x00000001,
    WMDM_SEEK_STREAMINGAUDIO                = 0x00000002
} WMDMSeekFlags;

// Storage Attributes Flags
typedef enum WMDMStgAttributes {
    WMDM_STORAGE_ATTR_FILESYSTEM            = 0x00000001,
    WMDM_STORAGE_ATTR_REMOVABLE             = 0x00000002,
    WMDM_STORAGE_ATTR_NONREMOVABLE          = 0x00000004,
    WMDM_FILE_ATTR_FOLDER                   = 0x00000008,
    WMDM_FILE_ATTR_LINK                     = 0x00000010,
    WMDM_FILE_ATTR_FILE                     = 0x00000020,
    WMDM_FILE_ATTR_VIDEO                    = 0x00000040,
    WMDM_STORAGE_ATTR_CANEDITMETADATA       = 0x00000080,
    WMDM_STORAGE_ATTR_FOLDERS               = 0x00000100,
    WMDM_FILE_ATTR_AUDIO                    = 0x00001000,
    WMDM_FILE_ATTR_DATA                     = 0x00002000,
    WMDM_FILE_ATTR_CANPLAY                  = 0x00004000,
    WMDM_FILE_ATTR_CANDELETE                = 0x00008000,
    WMDM_FILE_ATTR_CANMOVE                  = 0x00010000,
    WMDM_FILE_ATTR_CANRENAME                = 0x00020000,
    WMDM_FILE_ATTR_CANREAD                  = 0x00040000,
    WMDM_FILE_ATTR_MUSIC                    = 0x00080000,
    WMDM_FILE_CREATE_OVERWRITE              = 0x00100000,
    WMDM_FILE_ATTR_AUDIOBOOK                = 0x00200000,
    WMDM_FILE_ATTR_HIDDEN                   = 0x00400000,
    WMDM_FILE_ATTR_SYSTEM                   = 0x00800000,
    WMDM_FILE_ATTR_READONLY                 = 0x01000000,
    WMDM_STORAGE_ATTR_HAS_FOLDERS           = 0x02000000,
    WMDM_STORAGE_ATTR_HAS_FILES             = 0x04000000,
    WMDM_STORAGE_IS_DEFAULT                 = 0x08000000,
    WMDM_STORAGE_CONTAINS_DEFAULT           = 0x10000000,
    WMDM_STORAGE_ATTR_VIRTUAL               = 0x20000000
} WMDMStgAttributes;

// Storage Capabilities Flags
typedef enum WMDMStgCaps {
    WMDM_STORAGECAP_FOLDERSINROOT           = 0x00000001,
    WMDM_STORAGECAP_FILESINROOT             = 0x00000002,
    WMDM_STORAGECAP_FOLDERSINFOLDERS        = 0x00000004,
    WMDM_STORAGECAP_FILESINFOLDERS          = 0x00000008,
    WMDM_STORAGECAP_FOLDERLIMITEXISTS       = 0x00000010,
    WMDM_STORAGECAP_FILELIMITEXISTS         = 0x00000020,
    WMDM_STORAGECAP_NOT_INITIALIZABLE       = 0x00000040
} WMDMStgCaps;

// WMDM Mode Flags
typedef enum WMDMModes {
    WMDM_MODE_BLOCK                         = 0x00000001,
    WMDM_MODE_THREAD                        = 0x00000002,
    WMDM_CONTENT_FILE                       = 0x00000004,
    WMDM_CONTENT_FOLDER                     = 0x00000008,
    WMDM_CONTENT_OPERATIONINTERFACE         = 0x00000010,
    WMDM_MODE_QUERY                         = 0x00000020,
    WMDM_MODE_PROGRESS                      = 0x00000040,
    WMDM_MODE_TRANSFER_PROTECTED            = 0x00000080,
    WMDM_MODE_TRANSFER_UNPROTECTED          = 0x00000100,
    WMDM_STORAGECONTROL_INSERTBEFORE        = 0x00000200,
    WMDM_STORAGECONTROL_INSERTAFTER         = 0x00000400,
    WMDM_STORAGECONTROL_INSERTINTO          = 0x00000800,
    WMDM_MODE_RECURSIVE                     = 0x00001000
} WMDMModes;

// WMDM Rights Flags
// NON_SDMI = !SDMI_PROTECTED
// SDMI = SDMI_VALIDATED
typedef enum WMDMRightsFlags2 {
    WMDM_RIGHTS_PLAY_ON_PC                  = 0x00000001,
    WMDM_RIGHTS_COPY_TO_NON_SDMI_DEVICE     = 0x00000002,
    WMDM_RIGHTS_COPY_TO_CD                  = 0x00000008,
    WMDM_RIGHTS_COPY_TO_SDMI_DEVICE         = 0x00000010
} WMDMRightsFlags2;

// WMDM Seek Flags
typedef enum WMDMSeek {
    WMDM_SEEK_BEGIN                         = 0x00000001,
    WMDM_SEEK_CURRENT                       = 0x00000002,
    WMDM_SEEK_END                           = 0x00000008
} WMDMSeek;

// WMDM Device Enumeration Flags
typedef enum WMDMDeviceEnumFlags {
    DO_NOT_VIRTUALIZE_STORAGES_AS_DEVICES   = 0x00000001,
    ALLOW_OUTOFBAND_NOTIFICATION            = 0x00000002
} WMDMDeviceEnumFlags;


typedef enum WMDMMessage
{
    WMDM_MSG_DEVICE_ARRIVAL = 0,
    WMDM_MSG_DEVICE_REMOVAL = 1, //(WMDM_MSG_DEVICE_ARRIVAL + 1),
    WMDM_MSG_MEDIA_ARRIVAL = 2, //(WMDM_MSG_DEVICE_REMOVAL + 1),
    WMDM_MSG_MEDIA_REMOVAL = 3, //(WMDM_MSG_MEDIA_ARRIVAL + 1)
} WMDMMessage;

[
    odl,
    uuid(EC3B0663-0951-460a-9A80-0DCEED3C043C)
]
interface IWMDMMetaData : stdole.IUnknown
{
//public:
    HRESULT AddItem(
        [in] WMDM_TAG_DATATYPE Type,
        [in] LongPtr pwszTagName,
        [in] void* pValue,
        [in] UINT iLength);

    HRESULT QueryByName(
        [in] LongPtr pwszTagName,
        [in, out] WMDM_TAG_DATATYPE* pType,
        ///* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pcbLength) BYTE** pValue,
        [in, out] LongPtr *pValue,
        [in, out] UINT* pcbLength);

    HRESULT QueryByIndex(
        [in] UINT iIndex,
        [in, out] LongPtr* ppwszName,
        [in, out] WMDM_TAG_DATATYPE* pType,
        ///* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pcbLength) BYTE** ppValue,
        [in, out] LongPtr* pValue,
        [in, out] UINT* pcbLength);

    HRESULT GetItemCount(
        [in, out] UINT* iCount);

};

interface IWMDMEnumDevice;

[
    odl,
    uuid(1DCB3A00-33ED-11d3-8470-00C04F79DBC0)
]
interface IWMDeviceManager : stdole.IUnknown
{
//public:
    HRESULT GetRevision(
        [in, out] DWORD * pdwRevision);

    HRESULT GetDeviceCount(
        [in, out] DWORD* pdwCount);

    HRESULT EnumDevices(
        [in, out] IWMDMEnumDevice** ppEnumDevice);

};

interface IWMDMDevice;

[
    odl,
    uuid(923E5249-8731-4c5b-9B1C-B8B60B6E46AF)
]
interface IWMDeviceManager2 : IWMDeviceManager
{
//public:
    HRESULT GetDeviceFromCanonicalName(
        [in] LongPtr pwszCanonicalName,
        [in, out] IWMDMDevice * *ppDevice);

    HRESULT EnumDevices2(
        [in, out] IWMDMEnumDevice** ppEnumDevice);

    HRESULT Reinitialize(void);

};


[
    odl,
   uuid(af185c41-100d-46ed-be2e-9ce8c44594ef)
]
interface IWMDeviceManager3 : IWMDeviceManager2
{
//public:
    HRESULT SetDeviceEnumPreference(
        [in] DWORD dwEnumPref);

};

interface IWMDMProgress;

[
    odl,
    uuid(1DCB3A07-33ED-11d3-8470-00C04F79DBC0)
]
interface IWMDMStorageGlobals : stdole.IUnknown
{
//public:
    HRESULT GetCapabilities(
        [in, out] DWORD * pdwCapabilities);

    HRESULT GetSerialNumber(
        [in, out] PWMDMID pSerialNum,
        /* [out][in]  __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[8]*/
        [in] CURRENCY abMac);

    HRESULT GetTotalSize(
        [in, out] DWORD* pdwTotalSizeLow,
        [in, out] DWORD* pdwTotalSizeHigh);

    HRESULT GetTotalFree(
        [in, out] DWORD* pdwFreeLow,
        [in, out] DWORD* pdwFreeHigh);

    HRESULT GetTotalBad(
        [in, out] DWORD* pdwBadLow,
        [in, out] DWORD* pdwBadHigh);

    HRESULT GetStatus(
        [in, out] DWORD* pdwStatus);

    HRESULT Initialize(
        [in] UINT fuMode,
        [in] IWMDMProgress* pProgress);

};

interface IWMDMEnumStorage;

[
    odl,
    uuid(1DCB3A06-33ED-11d3-8470-00C04F79DBC0)
]
interface IWMDMStorage : stdole.IUnknown
{
//public:
    HRESULT SetAttributes(
        [in] DWORD dwAttributes,
        /* [unique][in]  __RPC__in_opt _WAVEFORMATEX * pFormat*/
        [in] void* pFormat);

    HRESULT GetStorageGlobals(
        [in, out] IWMDMStorageGlobals** ppStorageGlobals);

    HRESULT GetAttributes(
        [in, out] DWORD* pdwAttributes,
        /* [unique][out][in]  __RPC__inout_opt _WAVEFORMATEX* pFormat*/
        [in, out] void* pFormat);

    HRESULT GetName(
        [in] LongPtr pwszName,
        [in] UINT nMaxChars);

    HRESULT GetDate(
        [in, out] PWMDMDATETIME pDateTimeUTC);

    HRESULT GetSize(
        [in, out] DWORD* pdwSizeLow,
        [in, out] DWORD* pdwSizeHigh);

    HRESULT GetRights(
        [in, out] LongPtr* ppRights,
        [in, out] UINT* pnRightsCount,
        /* [out][in]  __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[8]*/
        [in] CURRENCY abMac);

    HRESULT EnumStorage(
        [in, out] IWMDMEnumStorage** pEnumStorage);

    HRESULT SendOpaqueCommand(
        [in, out] OPAQUECOMMAND* pCommand);

};

[
    odl,
    uuid(1ED5A144-5CD5-4683-9EFF-72CBDB2D9533)
]
interface IWMDMStorage2 : IWMDMStorage
{
//public:
    HRESULT GetStorage(
        [in] LongPtr pszStorageName,
        [in, out] IWMDMStorage * *ppStorage);

    HRESULT SetAttributes2(
        [in] DWORD dwAttributes,
        [in] DWORD dwAttributesEx,
        ///* [unique][in] */ __RPC__in_opt _WAVEFORMATEX* pFormat,
        ///* [unique][in] */ __RPC__in_opt _VIDEOINFOHEADER* pVideoFormat
        [in] void* pFormat, [in] void* pVideoFormat);

    HRESULT GetAttributes2(
        [in, out] DWORD* pdwAttributes,
        [in, out] DWORD* pdwAttributesEx,
        ///* [unique][in] */ __RPC__in_opt _WAVEFORMATEX* pAudioFormat,
        ///* [unique][in] */ __RPC__in_opt _VIDEOINFOHEADER* pVideoFormat
        [in] void* pFormat, [in] void* pVideoFormat);

};


[
    odl,
    uuid(97717EEA-926A-464e-96A4-247B0216026E)
]
interface IWMDMStorage3 : IWMDMStorage2
{
//public:
    HRESULT GetMetadata(
        [in, out] IWMDMMetaData * *ppMetadata);

    HRESULT SetMetadata(
        [in] IWMDMMetaData* pMetadata);

    HRESULT CreateEmptyMetadataObject(
        [in, out] IWMDMMetaData** ppMetadata);

    HRESULT SetEnumPreference(
        [in, out] WMDM_STORAGE_ENUM_MODE* pMode,
        [in] DWORD nViews,
        [in] WMDMMetadataView* pViews);

};

interface IWMDMProgress2;
interface IWMDMProgress3;

[
    odl,
    uuid(c225bac5-a03a-40b8-9a23-91cf478c64a6)
]
interface IWMDMStorage4 : IWMDMStorage3
{
//public:
    HRESULT SetReferences(
        [in] DWORD dwRefs,
        [in] IWMDMStorage * *ppIWMDMStorage);

    HRESULT GetReferences(
        [in, out] DWORD* pdwRefs,
        ///* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pdwRefs) IWMDMStorage*** pppIWMDMStorage
        [in, out] LongPtr *pppIWDMDStorage);

    HRESULT GetRightsWithProgress(
        [in] IWMDMProgress3* pIProgressCallback,
        ///* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnRightsCount) PWMDMRIGHTS* ppRights,
        [in, out] LongPtr * ppRights,
        [in, out] UINT* pnRightsCount);

    HRESULT GetSpecifiedMetadata(
        [in] DWORD cProperties,
        [in, out] LongPtr* ppwszPropNames,
        [in, out] IWMDMMetaData** ppMetadata);

    HRESULT FindStorage(
        [in] WMDM_FIND_SCOPE findScope,
        [in] LongPtr pwszUniqueID,
        [in, out] IWMDMStorage** ppStorage);

    HRESULT GetParent(
        [in, out] IWMDMStorage** ppStorage);

};

[
    odl,
    uuid(1DCB3A0B-33ED-11d3-8470-00C04F79DBC0)
]
interface IWMDMOperation : stdole.IUnknown
{
//public:
    HRESULT BeginRead(void);

    HRESULT BeginWrite(void);

    HRESULT GetObjectName(
        [in] LongPtr pwszName,
        [in] UINT nMaxChars);

    HRESULT SetObjectName(
        [in] LongPtr pwszName,
        [in] UINT nMaxChars);

    HRESULT GetObjectAttributes(
        [in, out] DWORD* pdwAttributes,
        ///* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX* pFormat
        [in] LongPtr pFormat);

    HRESULT SetObjectAttributes(
        [in] DWORD dwAttributes,
        ///* [unique][in] */ __RPC__in_opt _WAVEFORMATEX* pFormat
        [in] LongPtr pFormat);

    HRESULT GetObjectTotalSize(
        [in, out] DWORD* pdwSize,
        [in, out] DWORD* pdwSizeHigh);

    HRESULT SetObjectTotalSize(
        [in] DWORD dwSize,
        [in] DWORD dwSizeHigh);

    HRESULT TransferObjectData(
        [in] LongPtr pData,
        [in, out] DWORD* pdwSize,
        ///* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[8]
        [in] CURRENCY abMac);

    HRESULT End(
        [in] HRESULT* phCompletionCode,
        [in] IUnknown* pNewObject);

};

[
    odl,
    uuid(33445B48-7DF7-425c-AD8F-0FC6D82F9F75)
]
interface IWMDMOperation2 : stdole.IUnknown
{
//public:

    //IWMDMOperation methods
    HRESULT BeginRead(void);

    HRESULT BeginWrite(void);

    HRESULT GetObjectName(
        [in] LongPtr pwszName,
        [in] UINT nMaxChars);

    HRESULT SetObjectName(
        [in] LongPtr pwszName,
        [in] UINT nMaxChars);

    HRESULT GetObjectAttributes(
        [in, out] DWORD* pdwAttributes,
        ///* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX* pFormat
        [in] LongPtr pFormat);

    HRESULT SetObjectAttributes(
        [in] DWORD dwAttributes,
        ///* [unique][in] */ __RPC__in_opt _WAVEFORMATEX* pFormat
        [in] LongPtr pFormat);

    HRESULT GetObjectTotalSize(
        [in, out] DWORD* pdwSize,
        [in, out] DWORD* pdwSizeHigh);

    HRESULT SetObjectTotalSize(
        [in] DWORD dwSize,
        [in] DWORD dwSizeHigh);

    HRESULT TransferObjectData(
        [in] LongPtr pData,
        [in, out] DWORD* pdwSize,
        ///* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[8]
        [in] CURRENCY abMac);

    HRESULT End(
        [in] HRESULT* phCompletionCode,
        [in] IUnknown* pNewObject);


    //IWMDMOperation2 methods
    HRESULT SetObjectAttributes2(
        [in] DWORD dwAttributes,
        [in] DWORD dwAttributesEx,
        ///* [unique][in] */ __RPC__in_opt _WAVEFORMATEX * pFormat,
        [in] LongPtr pFormat,
        ///* [unique][in] */ __RPC__in_opt _VIDEOINFOHEADER * pVideoFormat
        [in] LongPtr pVideoFormat);

    HRESULT GetObjectAttributes2(
        [in, out] DWORD* pdwAttributes,
        [in, out] DWORD* pdwAttributesEx,
        ///* [unique][in] */ __RPC__in_opt _WAVEFORMATEX * pAudioFormat,
        [in] LongPtr pFormat,
        ///* [unique][in] */ __RPC__in_opt _VIDEOINFOHEADER * pVideoFormat
        [in] LongPtr pVideoFormat);

};

[
    odl,
    uuid(d1f9b46a-9ca8-46d8-9d0f-1ec9bae54919)
]
interface IWMDMOperation3 : stdole.IUnknown
{
//public:

        //IWMDMOperation methods
    HRESULT BeginRead(void);

    HRESULT BeginWrite(void);

    HRESULT GetObjectName(
        [in] LongPtr pwszName,
        [in] UINT nMaxChars);

    HRESULT SetObjectName(
        [in] LongPtr pwszName,
        [in] UINT nMaxChars);

    HRESULT GetObjectAttributes(
        [in, out] DWORD* pdwAttributes,
        ///* [unique][out][in] */ __RPC__inout_opt _WAVEFORMATEX* pFormat
        [in] LongPtr pFormat);

    HRESULT SetObjectAttributes(
        [in] DWORD dwAttributes,
        ///* [unique][in] */ __RPC__in_opt _WAVEFORMATEX* pFormat
        [in] LongPtr pFormat);

    HRESULT GetObjectTotalSize(
        [in, out] DWORD* pdwSize,
        [in, out] DWORD* pdwSizeHigh);

    HRESULT SetObjectTotalSize(
        [in] DWORD dwSize,
        [in] DWORD dwSizeHigh);

    HRESULT TransferObjectData(
        [in] LongPtr pData,
        [in, out] DWORD* pdwSize,
        ///* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[8]
        [in] CURRENCY abMac);

    HRESULT End(
        [in] HRESULT* phCompletionCode,
        [in] IUnknown* pNewObject);


    //IWMDMOperation3 methods
    HRESULT TransferObjectDataOnClearChannel(
        [in, out] void* pData,
        [in, out] DWORD * pdwSize);

};

[
    odl,
    uuid(1DCB3A0C-33ED-11d3-8470-00C04F79DBC0)
]
interface IWMDMProgress : stdole.IUnknown
{
//public:
    HRESULT Begin(
        [in] DWORD dwEstimatedTicks);

    HRESULT Progress(
        [in] DWORD dwTranspiredTicks);

    HRESULT End(void);

};


[
    odl,
    uuid(3A43F550-B383-4e92-B04A-E6BBC660FEFC)
]
interface IWMDMProgress2 : stdole.IUnknown
{
//public:
    HRESULT Begin(
        [in] DWORD dwEstimatedTicks);

    HRESULT Progress(
        [in] DWORD dwTranspiredTicks);

    HRESULT End(void);




    HRESULT End2(
        [in] HRESULT hrCompletionCode);

};

[
    odl,
    uuid(21DE01CB-3BB4-4929-B21A-17AF3F80F658)
]
interface IWMDMProgress3 : stdole.IUnknown
{
//public:
    HRESULT Begin(
        [in] DWORD dwEstimatedTicks);

    HRESULT Progress(
        [in] DWORD dwTranspiredTicks);

    HRESULT End(void);




    HRESULT End2(
        [in] HRESULT hrCompletionCode);



    HRESULT Begin3(
        //[in] UUID EventId,
        [in] int EventId1, [in] int EventId2, [in] int EventId3, [in] int EventId4,
        [in] DWORD dwEstimatedTicks,
        [in, out] OPAQUECOMMAND * pContext);

    HRESULT Progress3(
        //[in] UUID EventId,
        [in] int EventId1, [in] int EventId2, [in] int EventId3, [in] int EventId4,
        [in] DWORD dwTranspiredTicks,
        [in, out] OPAQUECOMMAND* pContext);

    HRESULT End3(
        //[in] UUID EventId,
        [in] int EventId1, [in] int EventId2, [in] int EventId3, [in] int EventId4,
        [in] HRESULT hrCompletionCode,
        [in, out] OPAQUECOMMAND* pContext);

};

[
    odl,
    uuid(1DCB3A02-33ED-11d3-8470-00C04F79DBC0)
]
interface IWMDMDevice : stdole.IUnknown
{
//public:
    HRESULT GetName(
        [in] LongPtr pwszName,
        [in] UINT nMaxChars);

    HRESULT GetManufacturer(
        [in] LongPtr pwszName,
        [in] UINT nMaxChars);

    HRESULT GetVersion(
        [in, out] DWORD* pdwVersion);

    HRESULT GetType(
        [in, out] DWORD* pdwType);

    HRESULT GetSerialNumber(
        [in, out] PWMDMID pSerialNumber,
        ///* [out][in] */ __RPC__inout_ecount_full(WMDM_MAC_LENGTH) BYTE abMac[8]
        [in] CURRENCY abMac);

    HRESULT GetPowerSource(
        [in, out] DWORD* pdwPowerSource,
        [in, out] DWORD* pdwPercentRemaining);

    HRESULT GetStatus(
        [in, out] DWORD* pdwStatus);

    HRESULT GetDeviceIcon(
        [in, out] ULONG* hIcon);

    HRESULT EnumStorage(
        [in, out] IWMDMEnumStorage** ppEnumStorage);

    HRESULT GetFormatSupport(
        ///* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnFormatCount) _WAVEFORMATEX** ppFormatEx,
        [in, out] LongPtr *ppFormatEx,
        [in, out] UINT* pnFormatCount,
        [in, out] LongPtr* pppwszMimeType,
        [in, out] UINT* pnMimeTypeCount);

    HRESULT SendOpaqueCommand(
        [in, out] OPAQUECOMMAND* pCommand);

};

[
    odl,
    uuid(E34F3D37-9D67-4fc1-9252-62D28B2F8B55)
]
interface IWMDMDevice2 : IWMDMDevice
{
//public:
    HRESULT GetStorage(
        [in] LongPtr pszStorageName,
        [in, out] IWMDMStorage * *ppStorage);

    HRESULT GetFormatSupport2(
        [in] DWORD dwFlags,
        ///* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnAudioFormatCount) _WAVEFORMATEX** ppAudioFormatEx,
        [in, out] void *ppAudioFormatEx,
        [in, out] UINT* pnAudioFormatCount,
        ///* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnVideoFormatCount) _VIDEOINFOHEADER** ppVideoFormatEx,
        [in, out] void* ppVideoFormatEx,
        [in, out] UINT* pnVideoFormatCount,
        ///* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pnFileTypeCount) WMFILECAPABILITIES** ppFileType,
        [in, out] void* ppFileType,
        [in, out] UINT* pnFileTypeCount);

    HRESULT GetSpecifyPropertyPages(
        [in, out] ISpecifyPropertyPages** ppSpecifyPropPages,
        [in, out] LongPtr* pppUnknowns,
        [in, out] ULONG* pcUnks);

    HRESULT GetCanonicalName(
        [in] LongPtr pwszPnPName,
        [in] UINT nMaxChars);

};

[
    odl,
    uuid(6c03e4fe-05db-4dda-9e3c-06233a6d5d65)
]
interface IWMDMDevice3 : IWMDMDevice2
{
//public:
    HRESULT GetProperty(
        [in] LongPtr  pwszPropName,
        [in, out] VARIANT * pValue);

    HRESULT SetProperty(
        [in] LongPtr  pwszPropName,
        [in] VARIANT* pValue);

    HRESULT GetFormatCapability(
        [in] WMDM_FORMATCODE format,
        [in, out] WMDM_FORMAT_CAPABILITY* pFormatSupport);

    HRESULT DeviceIoControl(
        [in] DWORD dwIoControlCode,
        [in] void* lpInBuffer,
        [in] DWORD nInBufferSize,
        [in, out] void* lpOutBuffer,
        [in, out] DWORD* pnOutBufferSize);

    HRESULT FindStorage(
        [in] WMDM_FIND_SCOPE findScope,
        [in] LongPtr  pwszUniqueID,
        [in, out] IWMDMStorage** ppStorage);

};

[
    odl,
    uuid(82af0a65-9d96-412c-83e5-3c43e4b06cc7)
]
interface IWMDMDeviceSession : stdole.IUnknown
{
//public:
    HRESULT BeginSession(
        [in] WMDM_SESSION_TYPE type,
        [in] void* pCtx,
        [in] DWORD dwSizeCtx);

    HRESULT EndSession(
        [in] WMDM_SESSION_TYPE type,
        [in] void* pCtx,
        [in] DWORD dwSizeCtx);

};

[
    odl,
    uuid(1DCB3A01-33ED-11d3-8470-00C04F79DBC0)
]
interface IWMDMEnumDevice : stdole.IUnknown
{
//public:
    long Next(
        [in] ULONG celt,
        [out] IWMDMDevice** ppDevice,
        [in, out] ULONG * pceltFetched);

    HRESULT Skip(
        [in] ULONG celt,
        [in, out] ULONG* pceltFetched);

    HRESULT Reset(void);

    HRESULT Clone(
        [in, out] IWMDMEnumDevice** ppEnumDevice);

};

[
    odl,
    uuid(1DCB3A04-33ED-11d3-8470-00C04F79DBC0)
]
interface IWMDMDeviceControl : stdole.IUnknown
{
//public:
    HRESULT GetStatus(
        [in, out] DWORD * pdwStatus);

    HRESULT GetCapabilities(
        [in, out] DWORD* pdwCapabilitiesMask);

    HRESULT Play(void);

    HRESULT Record(
        [in] WAVEFORMATEX* pFormat);

    HRESULT Pause(void);

    HRESULT Resume(void);

    HRESULT Stop(void);

    HRESULT Seek(
        [in] UINT fuMode,
        [in] int nOffset);

};

[
    odl,
    uuid(1DCB3A05-33ED-11d3-8470-00C04F79DBC0)
]
interface IWMDMEnumStorage : stdole.IUnknown
{
//public:
    long Next(
        [in] ULONG celt,
        [out] IWMDMStorage * *ppStorage,
        [in, out] ULONG * pceltFetched);

    HRESULT Skip(
        [in] ULONG celt,
        [in, out] ULONG* pceltFetched);

    HRESULT Reset(void);

    HRESULT Clone(
        [in, out] IWMDMEnumStorage** ppEnumStorage);

};

[
    odl,
    uuid(1DCB3A08-33ED-11d3-8470-00C04F79DBC0)
]
interface IWMDMStorageControl : stdole.IUnknown
{
//public:
    HRESULT Insert(
        [in] WMDMModes fuMode,
        [in] LongPtr pwszFile,
        [in] IWMDMOperation * pOperation,
        [in] IWMDMProgress * pProgress,
        [in, out] IWMDMStorage * *ppNewObject);

    HRESULT Delete(
        [in] WMDMModes fuMode,
        [in] IWMDMProgress* pProgress);

    HRESULT Rename(
        [in] WMDMModes fuMode,
        [in] LongPtr pwszNewName,
        [in] IWMDMProgress* pProgress);

    HRESULT Read(
        [in] WMDMModes fuMode,
        [in] LongPtr pwszFile,
        [in] IWMDMProgress* pProgress,
        [in] IWMDMOperation* pOperation);

    HRESULT Move(
        [in] WMDMModes fuMode,
        [in] IWMDMStorage* pTargetObject,
        [in] IWMDMProgress* pProgress);

};

[
    odl,
    uuid(972C2E88-BD6C-4125-8E09-84F837E637B6)
]
interface IWMDMStorageControl2 : IWMDMStorageControl
{
//public:
    HRESULT Insert2(
        [in] WMDMModes fuMode,
        [in] LongPtr pwszFileSource,
        [in] LongPtr pwszFileDest,
        [in] IWMDMOperation * pOperation,
        [in] IWMDMProgress * pProgress,
        [in] IUnknown * pUnknown,
        [in, out] IWMDMStorage * *ppNewObject);

};

[
    odl,
    uuid(B3266365-D4F3-4696-8D53-BD27EC60993A)
]
interface IWMDMStorageControl3 : IWMDMStorageControl2
{
//public:
    HRESULT Insert3(
        [in] WMDMModes fuMode,
        [in] WMDMStgAttributes fuType,
        [in] LongPtr pwszFileSource,
        [in] LongPtr pwszFileDest,
        [in] IWMDMOperation * pOperation,
        [in] IWMDMProgress * pProgress,
        [in] IWMDMMetaData * pMetaData,
        [in] IUnknown * pUnknown,
        [in, out] IWMDMStorage * *ppNewObject);

};

[
    odl,
    uuid(1DCB3A09-33ED-11d3-8470-00C04F79DBC0)
]
interface IWMDMObjectInfo : stdole.IUnknown
{
//public:
    HRESULT GetPlayLength(
        [in, out] DWORD * pdwLength);

    HRESULT SetPlayLength(
        [in] DWORD dwLength);

    HRESULT GetPlayOffset(
        [in, out] DWORD* pdwOffset);

    HRESULT SetPlayOffset(
        [in] DWORD dwOffset);

    HRESULT GetTotalLength(
        [in, out] DWORD* pdwLength);

    HRESULT GetLastPlayPosition(
        [in, out] DWORD* pdwLastPos);

    HRESULT GetLongestPlayPosition(
        [in, out] DWORD* pdwLongestPos);

};

[
    odl,
    uuid(EBECCEDB-88EE-4e55-B6A4-8D9F07D696AA)
]
interface IWMDMRevoked : stdole.IUnknown
{
//public:
    HRESULT GetRevocationURL(
        [in, out] LongPtr* ppwszRevocationURL,
        [in, out] DWORD * pdwBufferLen,
        [in, out] DWORD * pdwRevokedBitFlag);

};

[
    odl,
    uuid(3F5E95C0-0F43-4ed4-93D2-C89A45D59B81)
]
interface IWMDMNotification : stdole.IUnknown
{
//public:
    HRESULT WMDMMessage(
        [in] DWORD dwMessageType,
        [in] LongPtr pwszCanonicalName);

};


typedef enum WMDMIOOps {
    MDSP_READ                              = 0x00000001,
    MDSP_WRITE                             = 0x00000002
} WMDMNavOps;

// Seek Flags
typedef enum WMDMSeekOps
{
    MDSP_SEEK_BOF = 0x00000001,
    MDSP_SEEK_CUR = 0x00000002,
    MDSP_SEEK_EOF = 0x00000004
} WMDMSeekOps;






//CLSID_MediaDevMgrClassFactory;
[
    uuid(50040C1D-BDBF-4924-B873-F14D6C5BFD66),
        helpstring("MediaDevMgrClassFactory Class"),
        hidden
]
coclass MediaDevMgrClassFactory {
    [default] interface IClassFactory;
};

//CLSID_MediaDevMgr;
[
    uuid(25BAAD81-3560-11D3-8471-00C04F79DBC0),
        helpstring("MediaDevMgr Class")
]
coclass MediaDevMgr {
    [default] interface IWMDeviceManager;
    interface IConnectionPointContainer;
    interface IConnectionPoint;
};

//CLSID_WMDMDevice;
[
    uuid(807B3CDF-357A-11D3-8471-00C04F79DBC0),
        helpstring("WMDMDevice Class"),
        noncreatable
]
coclass WMDMDevice {
    [default] interface IWMDMDevice;
};


//CLSID_WMDMStorage;
[
    uuid(807B3CE0-357A-11D3-8471-00C04F79DBC0),
        helpstring("WMDMStorage Class"),
        noncreatable
]
coclass WMDMStorage {
    [default] interface IWMDMStorage;
    interface IWMDMRevoked;
};


//CLSID_WMDMStorageGlobal;
[
    uuid(807B3CE1-357A-11D3-8471-00C04F79DBC0),
        helpstring("WMDMStorageGlobal Class"),
        noncreatable
]
coclass WMDMStorageGlobal {
    [default] interface IWMDMStorageGlobals;
};


//CLSID_WMDMDeviceEnum;
[
    uuid(430E35AF-3971-11D3-8474-00C04F79DBC0),
        helpstring("WMDMDeviceEnum Class"),
        noncreatable
]
coclass WMDMDeviceEnum {
    [default] interface IWMDMEnumDevice;
};


//CLSID_WMDMStorageEnum;
[
    uuid(EB401A3B-3AF7-11D3-8474-00C04F79DBC0),
        helpstring("WMDMStorageEnum Class"),
        noncreatable
]
coclass WMDMStorageEnum {
    [default] interface IWMDMEnumStorage;
};



// ************************************************
// TODO :: Service Provider interfaces
// **********************************************





// ***********************************************

//  WMDRM *missing from SDK*

typedef enum WMDRMStatusFlags {
    WMDRM_DEVICE_ISWMDRM                = 0x00000001,
    WMDRM_DEVICE_NEEDCLOCK = 0x00000002,
    WMDRM_DEVICE_REVOKED = 0x00000004,
    WMDRM_CLIENT_NEEDINDIV = 0x00000008,
    WMDRM_DEVICE_REFRESHCLOCK = 0x00000010,
} WMDRMStatusFlags;

typedef enum WMDRMDeviceQueryFlags {
    WMDRM_QUERY_DEVICE_ISWMDRM = 0x00000001,
    WMDRM_QUERY_DEVICE_CLOCKSTATUS = 0x00000002,
    WMDRM_QUERY_DEVICE_ISREVOKED = 0x00000004,
    WMDRM_QUERY_CLIENT_INDIVSTATUS = 0x00000008,
} WMDRMDeviceQueryFlags;

typedef enum WMDRMProcessMeterResponse {
    WMDRM_METER_RESPONSE_ALL = 0x00000000,
    WMDRM_METER_RESPONSE_PARTIAL = 0x00000001,
} WMDRMProcessMeterResponse;

// IWMDRMDeviceApp
[
    odl,
        uuid(93AFDB44-B1E1-411d-B89B-75AD4F97882B) 
]
interface IWMDRMDeviceApp : stdole.IUnknown
{
    HRESULT GenerateMeterChallenge(
        [in]  IWMDMDevice* pDevice,      // NULL == PC 
        [in]  BSTR            bstrMeterCert,
        [out] BSTR* pbstrMeterURL,
        [out] BSTR* pbstrMeterData);
    HRESULT ProcessMeterResponse(
        [in]  IWMDMDevice* pDevice,      // NULL == PC 
        [in]  void* pbResponse,
        [in]  DWORD           cbResponse,
        [out] DWORD* pdwFlags);    // flags defined above

    // check if the specified device is indiv'ed 
    HRESULT QueryDeviceStatus(
        [in]  IWMDMDevice* pDevice,
        [out] DWORD* pdwStatus);   // logical 'OR' of WMDRM status Flags defined above

    // acquire devcert and/or secureclock for device
    HRESULT AcquireDeviceData(
        [in]  IWMDMDevice* pDevice,
        [in]  IWMDMProgress3* pProgressCallback,
        [in]  DWORD           dwFlags,      // logical 'OR' of WMDRM status Flags defined above
        [out] DWORD* pdwStatus);   // status returned by device.

    HRESULT SynchronizeLicenses(
        [in]  IWMDMDevice* pDevice,
        [in]  IWMDMProgress3* pProgressCallback,
        [in]  DWORD           cMinCountThreshold,
        [in]  DWORD           cMinHoursThreshold);
};


// IWMDRMDeviceApp2
[
    odl,
        uuid(600D6E55-DEA5-4e4c-9C3A-6BD642A45B9D)
]
interface IWMDRMDeviceApp2 : IWMDRMDeviceApp
{
    // check if the specified device is indiv'ed 
    HRESULT QueryDeviceStatus2(
        [in]  IWMDMDevice* pDevice,
        [in]  DWORD           dwFlags,      // logical 'OR' of WMDRM Query Flags defined above
        [out] DWORD* pdwStatus);   // logical 'OR' of WMDRM status Flags defined above
};


//#ifndef WMDRMDEVICEAPP_INTERFACE_DEFINED

//[
//    uuid(50BB7AB2-0498-450D-A2C3-81CC17FD154D),
//        version(1.0),
//        helpstring("WMDRMDeviceApp 1.0 Type Library")
//]
//
//library WMDRMDeviceAppLib
//{
//    importlib("stdole32.tlb");
//    importlib("stdole2.tlb");

    [
        uuid(5C140836-43DE-11d3-847D-00C04F79DBC0),
            helpstring("WMDRMDeviceApp Class")
    ]
        coclass WMDRMDeviceApp
    {
        [default] interface IWMDRMDeviceApp2;
        interface IWMDRMDeviceApp;
    };

    //
// WMDMOperationHelper.idl : IDL source
//

//
// This file will be processed by the MIDL tool to
// produce the type library (WMDMOperationHelper.tlb) and marshalling code.
//


    [
        odl,
            uuid(4A382551-1E84-40ae-B0B0-23FA221B4C6B)
    ]
        interface IWMDMOperationHelper : stdole.IUnknown
    {
        // Sets the file to read from using the IWMDMOperation interface
        //
        HRESULT SetFileName([in, string] LPWSTR pszFileName);

        // Sets the CSecureChannelClient to be used for authentication
        //
        HRESULT SetSAC([in] void* pSACClient);
    };



//}/