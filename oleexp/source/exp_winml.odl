//winml.h

 
typedef
enum WINML_TENSOR_DATA_TYPE
{
    WINML_TENSOR_UNDEFINED = 0,
    WINML_TENSOR_FLOAT, //WINML_TENSOR_UNDEFINED + 1),
    WINML_TENSOR_UINT8, //WINML_TENSOR_FLOAT + 1),
    WINML_TENSOR_INT8, //WINML_TENSOR_UINT8 + 1),
    WINML_TENSOR_UINT16, //WINML_TENSOR_INT8 + 1),
    WINML_TENSOR_INT16, //WINML_TENSOR_UINT16 + 1),
    WINML_TENSOR_INT32, //WINML_TENSOR_INT16 + 1),
    WINML_TENSOR_INT64, //WINML_TENSOR_INT32 + 1),
    WINML_TENSOR_STRING, //WINML_TENSOR_INT64 + 1),
    WINML_TENSOR_BOOLEAN, //WINML_TENSOR_STRING + 1),
    WINML_TENSOR_FLOAT16, //WINML_TENSOR_BOOLEAN + 1),
    WINML_TENSOR_DOUBLE, //WINML_TENSOR_FLOAT16 + 1),
    WINML_TENSOR_UINT32, //WINML_TENSOR_DOUBLE + 1),
    WINML_TENSOR_UINT64, //WINML_TENSOR_UINT32 + 1),
    WINML_TENSOR_COMPLEX64, //WINML_TENSOR_UINT64 + 1),
    WINML_TENSOR_COMPLEX128, //WINML_TENSOR_COMPLEX64 + 1)
} 	WINML_TENSOR_DATA_TYPE;

typedef
enum WINML_FEATURE_TYPE
{
    WINML_FEATURE_UNDEFINED = 0,
    WINML_FEATURE_TENSOR, //WINML_FEATURE_UNDEFINED + 1),
    WINML_FEATURE_SEQUENCE, //WINML_FEATURE_TENSOR + 1),
    WINML_FEATURE_MAP, //WINML_FEATURE_SEQUENCE + 1),
    WINML_FEATURE_IMAGE, //WINML_FEATURE_MAP + 1)
} 	WINML_FEATURE_TYPE;

typedef
enum WINML_BINDING_TYPE
{
    WINML_BINDING_UNDEFINED = 0,
    WINML_BINDING_TENSOR, //WINML_BINDING_UNDEFINED + 1),
    WINML_BINDING_SEQUENCE, //WINML_BINDING_TENSOR + 1),
    WINML_BINDING_MAP, //WINML_BINDING_SEQUENCE + 1),
    WINML_BINDING_IMAGE, //WINML_BINDING_MAP + 1),
    WINML_BINDING_RESOURCE, //WINML_BINDING_IMAGE + 1)
} 	WINML_BINDING_TYPE;

typedef struct WINML_TENSOR_BINDING_DESC
{
    WINML_TENSOR_DATA_TYPE DataType;
    /* [annotation]_In_range_(1, WINML_TENSOR_DIMENSION_COUNT_MAX)   */
    UINT NumDimensions;
    /* [annotation] _Field_size_full_(NumDimensions) INT64* */
    LongPtr pShape;
    UINT DataSize;
    /* [annotation] _Field_size_bytes_full_(DataSize)  void**/
    LongPtr pData;
} 	WINML_TENSOR_BINDING_DESC;

typedef struct WINML_SEQUENCE_BINDING_DESC
{
    UINT ElementCount;
    WINML_TENSOR_DATA_TYPE ElementType;
    //union
    //{
    //    /* [annotation] */
    //    _Field_size_full_(ElementCount)  LPWSTR* pStrings;
    //    /* [annotation] */
    //    _Field_size_full_(ElementCount)  INT64* pInts;
    //    /* [annotation] */
    //    _Field_size_full_(ElementCount)  FLOAT* pFloats;
    //    /* [annotation] */
    //    _Field_size_full_(ElementCount)  DOUBLE* pDoubles;
    //};
    LongPtr pElement;
} 	WINML_SEQUENCE_BINDING_DESC;

typedef struct WINML_MAP_BINDING_DESC
{
    UINT ElementCount;
    WINML_TENSOR_DATA_TYPE KeyType;
    //union
    //{
    //    /* [annotation] */
    //    _Field_size_full_(ElementCount)  LPWSTR* pStringKeys;
    //    /* [annotation] */
    //    _Field_size_full_(ElementCount)  INT64* pIntKeys;
    //};
    LongPtr pStringOrIntKeys;
    WINML_TENSOR_DATA_TYPE Fields;
    //union
    //{
    //    /* [annotation] */
    //    _Field_size_full_(ElementCount)  LPWSTR* pStringFields;
    //    /* [annotation] */
    //    _Field_size_full_(ElementCount)  INT64* pIntFields;
    //    /* [annotation] */
    //    _Field_size_full_(ElementCount)  FLOAT* pFloatFields;
    //    /* [annotation] */
    //    _Field_size_full_(ElementCount)  DOUBLE* pDoubleFields;
    //};
    LongPtr pFields;
} 	WINML_MAP_BINDING_DESC;

typedef struct WINML_IMAGE_BINDING_DESC
{
    WINML_TENSOR_DATA_TYPE ElementType;
    /* [annotation] _In_range_(1, WINML_TENSOR_DIMENSION_COUNT_MAX)  */
    UINT NumDimensions;
    /* [annotation]_Field_size_full_(NumDimensions)  INT64* */
    LongPtr pShape;
    UINT DataSize;
    /* [annotation]_Field_size_bytes_full_(DataSize)  void*  */
    LongPtr pData;
} 	WINML_IMAGE_BINDING_DESC;

typedef struct WINML_RESOURCE_BINDING_DESC
{
    WINML_TENSOR_DATA_TYPE ElementType;
    /* [annotation]_In_range_(1, WINML_TENSOR_DIMENSION_COUNT_MAX)   */
    UINT NumDimensions;
    /* [annotation] _Field_size_full_(NumDimensions)  INT64*  */
    LongPtr pShape;
    /* [annotation] [in]  */
    ID3D12Resource* pResource;
} 	WINML_RESOURCE_BINDING_DESC;

 

typedef struct WINML_BINDING_DESC
{
    LPCWSTR Name;
    WINML_BINDING_TYPE BindType;
    //union
    //{
    //    WINML_TENSOR_BINDING_DESC Tensor;
    //    WINML_SEQUENCE_BINDING_DESC Sequence;
    //    WINML_MAP_BINDING_DESC Map;
    //    WINML_IMAGE_BINDING_DESC Image;
    //    WINML_RESOURCE_BINDING_DESC Resource;
    //};
    BYTE u[15];
} 	WINML_BINDING_DESC;

typedef struct WINML_TENSOR_VARIABLE_DESC
{
    WINML_TENSOR_DATA_TYPE ElementType;
    /* [annotation]_In_range_(1, WINML_TENSOR_DIMENSION_COUNT_MAX)   */
    UINT NumDimensions;
    /* [annotation]_Field_size_full_(NumDimensions)  INT64*  */
    LongPtr pShape;
} 	WINML_TENSOR_VARIABLE_DESC;

typedef struct WINML_SEQUENCE_VARIABLE_DESC
{
    WINML_TENSOR_DATA_TYPE ElementType;
} 	WINML_SEQUENCE_VARIABLE_DESC;

typedef struct WINML_MAP_VARIABLE_DESC
{
    WINML_TENSOR_DATA_TYPE KeyType;
    WINML_TENSOR_DATA_TYPE Fields;
} 	WINML_MAP_VARIABLE_DESC;

typedef struct WINML_IMAGE_VARIABLE_DESC
{
    WINML_TENSOR_DATA_TYPE ElementType;
    UINT NumDimensions;
    /* [annotation]_Field_size_full_(NumDimensions)  INT64*  */
    LongPtr pShape;
} 	WINML_IMAGE_VARIABLE_DESC;

typedef struct WINML_VARIABLE_DESC
{
    LongPtr Name;
    LongPtr Description;
    WINML_FEATURE_TYPE FeatureType;
    BOOL Required;
    //union
    //{
    //    WINML_TENSOR_VARIABLE_DESC Tensor;
    //    WINML_SEQUENCE_VARIABLE_DESC Sequence;
    //    WINML_MAP_VARIABLE_DESC Map;
    //    WINML_IMAGE_VARIABLE_DESC Image;
    //};
    BYTE u[12];
} 	WINML_VARIABLE_DESC;

typedef struct WINML_MODEL_DESC
{
    LongPtr Author;
    LongPtr Name;
    LongPtr Domain;
    LongPtr Description;
    LongPtr Version;
} 	WINML_MODEL_DESC;


/* interface IWinMLModel */
/* [local][object][uuid] */


[
    odl,
    uuid(e2eeb6a9-f31f-4055-a521-e30b5b33664a)
]
interface IWinMLModel : stdole.IUnknown
{
 
    HRESULT GetDescription(
        /* [annotation] _Out_  WINML_MODEL_DESC * */
        [in, out] LongPtr *ppDescription);

    HRESULT EnumerateMetadata(
        /* [annotation] */
        [in]  UINT Index,
        /* [annotation] */
        [in, out] LongPtr* pKey,
        /* [annotation] */
        [in, out] LongPtr* pValue);

    HRESULT EnumerateModelInputs(
        /* [annotation] */
        [in]  UINT Index,
        /* [annotation]_Out_  WINML_VARIABLE_DESC**  */
        [in, out] LongPtr* ppInputDescriptor);

    HRESULT EnumerateModelOutputs(
        /* [annotation] */
        [in]  UINT Index,
        /* [annotation]_Out_  WINML_VARIABLE_DESC**  */
        [in, out] LongPtr* ppOutputDescriptor);

};

[
    odl,
    uuid(95848f9e-583d-4054-af12-916387cd8426)
]
interface IWinMLEvaluationContext : stdole.IUnknown
{
 
    HRESULT BindValue(
        /* [annotation] */
        [in]  WINML_BINDING_DESC * pDescriptor);

    HRESULT GetValueByName(
        /* [annotation] */
        [in] LongPtr Name,
        /* [annotation]_Out_  WINML_BINDING_DESC**  */
        [in, out] LongPtr *pDescriptor);

    HRESULT Clear(void);

};

[
    odl,
        uuid(a0425329-40ae-48d9-bce3-829ef7b8a41a)
]
interface IWinMLRuntime : stdole.IUnknown
{
 
    HRESULT LoadModel(
        /* [annotation] */
        [in] LongPtr Path,
        /* [annotation][out] */
        [in, out] IWinMLModel * *ppModel);

    HRESULT CreateEvaluationContext(
        /* [annotation] */
        [in] ID3D12Device* device,
        /* [annotation][out] */
        [in, out]  IWinMLEvaluationContext** ppContext);

    HRESULT EvaluateModel(
        /* [annotation] */
        [in]  IWinMLEvaluationContext* pContext);

};

typedef /* [public] */
enum WINML_RUNTIME_TYPE
{
    WINML_RUNTIME_CNTK = 0
} 	WINML_RUNTIME_TYPE;


[
    odl,
        uuid(a807b84d-4ae5-4bc0-a76a-941aa246bd41)
]
interface IWinMLRuntimeFactory : stdole.IUnknown
{
 
    HRESULT CreateRuntime(
        /* [annotation] */
        [in]  WINML_RUNTIME_TYPE RuntimeType,
        /* [annotation][out] */
        [out]  IWinMLRuntime * *ppRuntime);

};

[
    dllname("winml.dll")
]
module WinML
{
    const int WINML_TENSOR_DIMENSION_COUNT_MAX = (4);

[entry("WinMLCreateRuntime")]
int _stdcall WinMLCreateRuntime(
    [out] IWinMLRuntime** runtime);
}