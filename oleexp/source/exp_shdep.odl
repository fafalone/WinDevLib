//shdeprecated.h

typedef enum TravelLogNavConsts {
    TLOG_BACK      = -1,
    TLOG_CURRENT   =  0,
    TLOG_FORE      =  1
} TravelLogNavConsts;
typedef enum TravelLogMenuFlags {
    TLMENUF_INCLUDECURRENT = 0x00000001, 
    TLMENUF_CHECKCURRENT = 3, //(TLMENUF_INCLUDECURRENT | 0x00000002)
    TLMENUF_BACK = 0x00000010,  // Default
    TLMENUF_FORE = 0x00000020,
    TLMENUF_BACKANDFORTH = 31, // (TLMENUF_BACK | TLMENUF_FORE | TLMENUF_INCLUDECURRENT)
} TravelLogMenuFlags;

[
    odl,
    uuid(F46EDB3B-BC2F-11d0-9412-00AA00A3EBD3)
]
interface ITravelEntry : stdole.IUnknown
{
////public:
    /* virtual [helpcontext][helpstring] */ HRESULT Invoke(
        [in]   IUnknown * punk);

    /* virtual [helpcontext][helpstring] */ HRESULT Update(
        [in]   IUnknown* punk,
        [in] BOOL fIsLocalAnchor);

    /* virtual [helpcontext][helpstring] */ HRESULT GetPidl(
        [in, out]   PIDLIST_ABSOLUTE* ppidl);

};


[
    odl,
    uuid(66A9CB08-4802-11d2-A561-00A0C92DBFE8)
]
interface ITravelLog : stdole.IUnknown
{
//public:
   /* virtual  [helpcontext][helpstring] */ HRESULT AddEntry(
        [in]   IUnknown * punk,
        [in] BOOL fIsLocalAnchor);

  /*  virtual  [helpcontext][helpstring] */ HRESULT UpdateEntry(
        [in]   IUnknown* punk,
        [in] BOOL fIsLocalAnchor);

    /* virtual [helpcontext][helpstring] */ HRESULT UpdateExternal(
        [in]   IUnknown* punk,
        [in]   IUnknown* punkHLBrowseContext);

    /* virtual [helpcontext][helpstring] */ HRESULT Travel(
        [in]   IUnknown* punk,
        [in] int iOffset);

  /*  virtual  [local][helpcontext][helpstring] */ HRESULT GetTravelEntry(
        /* [annotation][in] */
        [in]  IUnknown* punk,
        /* [annotation][in] */
        [in]  int iOffset,
        /* [annotation][out] */
        [in, out]  ITravelEntry** ppte);

   /* virtual  [helpcontext][helpstring] */ HRESULT FindTravelEntry(
        [in]   IUnknown* punk,
        [in]   PCIDLIST_ABSOLUTE pidl,
        [in, out]   ITravelEntry** ppte);

   /*  virtual [helpcontext][helpstring] */ HRESULT GetToolTipText(
        [in]   IUnknown* punk,
        [in] int iOffset,
        [in] int idsTemplate,
        [in, out] LPWSTR pwzText,
        [in] DWORD cchText);

   /*  virtual [helpcontext][helpstring] */ HRESULT InsertMenuEntries(
        [in]   IUnknown* punk,
        [in]   HMENU hmenu,
        [in] int nPos,
        [in] int idFirst,
        [in] int idLast,
        [in] DWORD dwFlags);

   /* virtual  [helpcontext][helpstring] */ HRESULT Clone(
        [in, out]   ITravelLog** pptl);

   /* virtual  [local][helpcontext][helpstring] */ DWORD CountEntries(
        [in] IUnknown* punk);

    /*virtual  [helpcontext][helpstring] */ HRESULT Revert(void);

};

[
    odl,
        uuid(2f0dd58c-f789-4f14-99fb-9293b3c9c212)
]
interface IExpDispSupportXP : stdole.IUnknown
{
//public:
    HRESULT FindCIE4ConnectionPoint(
        /* [annotation][in] */
        [in]  REFIID riid,
        /* [annotation][out] */
        [in, out]  void *ppccp);

    HRESULT OnTranslateAccelerator(
        /* [annotation][in] */
        [in]  MSG* pMsg,
        /* [annotation][in] */
        [in]  DWORD grfModifiers);

    HRESULT OnInvoke(
        /* [annotation][in] */
        [in]  DISPID dispidMember,
        /* [annotation][in] */
        [in]  REFIID iid,
        /* [annotation][in] */
        [in]  LCID lcid,
        /* [annotation][in] */
        [in]  WORD wFlags,
        /* [annotation][in] */
        [in]  DISPPARAMS* pdispparams,
        /* [annotation][out] */
        [in, out]  VARIANT* pVarResult,
        /* [annotation][out] */
        [in, out]  EXCEPINFO* pexcepinfo,
        /* [annotation][out] */
        [in, out]  UINT* puArgErr);

};

[
    odl,
    uuid(0D7D1D00-6FC0-11D0-A974-00C04FD705A2)
]
interface IExpDispSupport : stdole.IUnknown
{
//public:
    HRESULT FindConnectionPoint(
        /* [annotation][in] */
        [in]  REFIID riid,
        /* [annotation][out] */
        [in, out]  IConnectionPoint * *ppccp);

    HRESULT OnTranslateAccelerator(
        /* [annotation][in] */
        [in]  MSG* pMsg,
        /* [annotation][in] */
        [in]  DWORD grfModifiers);

    HRESULT OnInvoke(
        /* [annotation][in] */
        [in]  DISPID dispidMember,
        /* [annotation][in] */
        [in]  REFIID iid,
        /* [annotation][in] */
        [in]  LCID lcid,
        /* [annotation][in] */
        [in]  WORD wFlags,
        /* [annotation][in] */
        [in]  DISPPARAMS* pdispparams,
        /* [annotation][out] */
        [in, out]  VARIANT* pVarResult,
        /* [annotation][out] */
        [in, out]  EXCEPINFO* pexcepinfo,
        /* [annotation][out] */
        [in, out]  UINT* puArgErr);

};

typedef /* [v1_enum] */
enum tagBNSTATE
{
    BNS_NORMAL = 0,
    BNS_BEGIN_NAVIGATE = 1,
    BNS_NAVIGATE = 2
} 	BNSTATE;


typedef enum SHELLBROWSERSHOWCONTROL
{
    SBSC_HIDE = 0,
    SBSC_SHOW = 1,
    SBSC_TOGGLE = 2,
    SBSC_QUERY = 3
} SHELLBROWSERSHOWCONTROL;
//  values for IBrowserService::Get/SetFlags()
typedef enum BrowserServiceFlags {
     BSF_REGISTERASDROPTARGET  = 0x00000001,
     BSF_THEATERMODE           = 0x00000002,
     BSF_NOLOCALFILEWARNING    = 0x00000010,
     BSF_UISETBYAUTOMATION     = 0x00000100,
     BSF_RESIZABLE             = 0x00000200,
     BSF_CANMAXIMIZE           = 0x00000400,
     BSF_TOPBROWSER            = 0x00000800,
     BSF_NAVNOHISTORY          = 0x00001000,
     BSF_HTMLNAVCANCELED       = 0x00002000,
     BSF_DONTSHOWNAVCANCELPAGE = 0x00004000,
     BSF_SETNAVIGATABLECODEPAGE= 0x00008000,
     BSF_DELEGATEDNAVIGATION   = 0x00010000,
     BSF_TRUSTEDFORACTIVEX     = 0x00020000,
     BSF_MERGEDMENUS           = 0x00040000,
     BSF_FEEDNAVIGATION        = 0x00080000,
     BSF_FEEDSUBSCRIBED        = 0x00100000,
     HLNF_CALLERUNTRUSTED           = 0x00200000,  // The navigate was possibly initiated by a web page by scripting code already on the system
     HLNF_TRUSTEDFORACTIVEX         = 0x00400000,  // The navigate should allow ActiveX prompts.
     HLNF_DISABLEWINDOWRESTRICTIONS = 0x00800000,  // New window is created by url in zone that has the window restrictions security mitigation disabled
     HLNF_TRUSTFIRSTDOWNLOAD        = 0x01000000,  // New window is result of user initiated action.  Trust it if it immediatly trys to download.
     HLNF_UNTRUSTEDFORDOWNLOAD      = 0x02000000,  // Trident is navigating to an untrusted non-html file.  If we try to download it, do not.
     SHHLNF_NOAUTOSELECT            = 0x04000000,  // This navigate should not automatically select History ShellFolder
     SHHLNF_WRITENOHISTORY          = 0x08000000,  // This navigate should not go in the History ShellFolder
     HLNF_EXTERNALNAVIGATE          = 0x10000000,
     HLNF_ALLOW_AUTONAVIGATE        = 0x20000000,
     HLNF_NEWWINDOWSMANAGED         = 0x80000000  // If this navigate results in a new window, it should be subject to popup manager.
} BrowserServiceFlags;
//#ifndef INTERNET_MAX_URL_LENGTH
//#define INTERNET_MAX_PATH_LENGTH        2048
//#define INTERNET_MAX_SCHEME_LENGTH      32          // longest protocol name length
//#define INTERNET_MAX_URL_LENGTH         (INTERNET_MAX_SCHEME_LENGTH \
//+ sizeof("://") \
//+ INTERNET_MAX_PATH_LENGTH)
//#endif
//
//
//extern RPC_IF_HANDLE __MIDL_itf_shdeprecated_0000_0004_v0_0_c_ifspec;
//extern RPC_IF_HANDLE __MIDL_itf_shdeprecated_0000_0004_v0_0_s_ifspec;
//
//#ifndef __IBrowserService_INTERFACE_DEFINED__
//#define __IBrowserService_INTERFACE_DEFINED__
//
///* interface IBrowserService */
///* [object][uuid] */
//
//
//EXTERN_C const IID IID_IBrowserService;
//
//#if defined(__cplusplus) && !defined(CINTERFACE)

[
    odl,
    uuid(02ba3b52-0547-11d1-b833-00c04fc9b31f)
]
interface IBrowserService : stdole.IUnknown
{
//public:
   /* virtual  [local] */ HRESULT GetParentSite(
        /* [annotation][out] */
        [in, out]  IOleInPlaceSite * *ppipsite);

  /*  virtual  [local] */ HRESULT SetTitle(
        /* [annotation][in] */
        [in]  IShellView* psv,
        /* [annotation][in] */
        [in]  LPCWSTR pszName);

   /* virtual  [local] */ HRESULT GetTitle(
        /* [annotation][in] */
        [in]  IShellView* psv,
        [in, out]  LPWSTR pszName,
       [in] DWORD cchName);

  /*  virtual  [local] */ HRESULT GetOleObject(
        /* [annotation][out] */
        [in, out]  IOleObject** ppobjv);

    HRESULT GetTravelLog(
        [in, out] ITravelLog** pptl);

   /* virtual  [local] */ HRESULT ShowControlWindow(
        [in]  UINT id,
        [in] BOOL fShow);

    /* virtual [local] */ HRESULT IsControlWindowShown(
        [in] UINT id,
        /* [annotation][out] */
        [in, out]  BOOL* pfShown);

   /* virtual  [local] */ HRESULT IEGetDisplayName(
        /* [annotation][in] */
        [in]  PCIDLIST_ABSOLUTE pidl,
        /* [annotation][out] */
        [in, out]   LPWSTR pwszName,
        [in] UINT uFlags);

   /*  virtual [local] */ HRESULT IEParseDisplayName(
        [in] UINT uiCP,
        /* [annotation][in] */
        [in]  LPCWSTR pwszPath,
        /* [annotation][out] */
        [in, out]  PIDLIST_ABSOLUTE* ppidlOut);

   /* virtual  [local] */ HRESULT DisplayParseError(
        [in] HRESULT hres,
        /* [annotation][in] */
        [in]  LPCWSTR pwszPath);

    /*virtual  [local] */ HRESULT NavigateToPidl(
        /* [annotation][in] */
        [in]  PCIDLIST_ABSOLUTE pidl,
        [in] DWORD grfHLNF);

  /*  virtual  [local] */ HRESULT SetNavigateState(
      [in] BNSTATE bnstate);

    /* virtual [local] */ HRESULT GetNavigateState(
        /* [annotation][out] */
        [in, out]  BNSTATE* pbnstate);

   /*  virtual  [local] */ HRESULT NotifyRedirect(
       /* [annotation][in] */
        [in]  IShellView* psv,
        /* [annotation][in] */
        [in]  PCIDLIST_ABSOLUTE pidl,
        /* [annotation][out] */
        [in, out]  BOOL* pfDidBrowse);

    /* virtual [local] */ HRESULT UpdateWindowList(void);

    HRESULT UpdateBackForwardState(void);

   /* virtual  [local] */ HRESULT SetFlags(
        [in]  DWORD dwFlags,
        [in] DWORD dwFlagMask);

    /* virtual [local] */ HRESULT GetFlags(
        /* [annotation][out] */
        [in, out]  DWORD* pdwFlags);

    /* virtual [local] */ HRESULT CanNavigateNow(void);

    /* virtual [local] */ HRESULT GetPidl(
        /* [annotation][out] */
        [in, out]  PIDLIST_ABSOLUTE* ppidl);

    /*  virtual[local] */ HRESULT SetReferrer(
        /* [annotation][in] */
        [in]  PCIDLIST_ABSOLUTE pidl);

    /* virtual [local] */ DWORD GetBrowserIndex(void);

   /* virtual  [local] */ HRESULT GetBrowserByIndex(
        [in] DWORD dwID,
        /* [annotation][out] */
        [in, out]  IUnknown** ppunk);

   /* virtual  [local] */ HRESULT GetHistoryObject(
        /* [annotation][out] */
        [in, out]  IOleObject** ppole,
        /* [annotation][out] */
        [in, out]  IStream** pstm,
        /* [annotation][out] */
        [in, out]  IBindCtx** ppbc);

   /* virtual  [local] */ HRESULT SetHistoryObject(
        /* [annotation][in] */
        [in]  IOleObject* pole,
        [in] BOOL fIsLocalAnchor);

   /*  virtual  [local] */ HRESULT CacheOLEServer(
       /* [annotation][in] */
        [in]  IOleObject* pole);

    /* virtual [local] */ HRESULT GetSetCodePage(
        /* [annotation][in] */
        [in]  VARIANT* pvarIn,
        /* [annotation][out] */
        [in, out]  VARIANT* pvarOut);

   /* virtual  [local] */ HRESULT OnHttpEquiv(
        /* [annotation][in] */
        [in]  IShellView* psv,
        [in] BOOL fDone,
        /* [annotation][in] */
        [in]  VARIANT* pvarargIn,
        /* [annotation][out] */
        [in, out]  VARIANT* pvarargOut);

   /* virtual  [local] */ HRESULT GetPalette(
        /* [annotation][out] */
        [in, out]  HPALETTE* hpal);

    /*virtual  [local] */ HRESULT RegisterWindow(
        [in] BOOL fForceRegister,
        [in] int swc);

};

[
    odl,
    uuid(5836FB00-8187-11CF-A12B-00AA004AE837)
]
interface IShellService : stdole.IUnknown
{
//public:
    HRESULT SetOwner(
        /* [annotation][unique][in] */
        [in]  IUnknown * punkOwner);

};

    typedef enum SECURELOCKCODE
    {
        SECURELOCK_NOCHANGE = -1,
        SECURELOCK_SET_UNSECURE = 0,
        SECURELOCK_SET_MIXED = 1, //  (SECURELOCK_SET_UNSECURE + 1),
        SECURELOCK_SET_SECUREUNKNOWNBIT = 2, //  (SECURELOCK_SET_MIXED + 1),
        SECURELOCK_SET_SECURE40BIT = 3, // (SECURELOCK_SET_SECUREUNKNOWNBIT + 1),
        SECURELOCK_SET_SECURE56BIT = 4, // (SECURELOCK_SET_SECURE40BIT + 1),
        SECURELOCK_SET_FORTEZZA = 5, // (SECURELOCK_SET_SECURE56BIT + 1),
        SECURELOCK_SET_SECURE128BIT = 6, // (SECURELOCK_SET_FORTEZZA + 1),
        SECURELOCK_FIRSTSUGGEST = 7, // (SECURELOCK_SET_SECURE128BIT + 1),
        SECURELOCK_SUGGEST_UNSECURE = 7, // SECURELOCK_FIRSTSUGGEST,
        SECURELOCK_SUGGEST_MIXED = 8, // (SECURELOCK_SUGGEST_UNSECURE + 1),
        SECURELOCK_SUGGEST_SECUREUNKNOWNBIT = 9, // (SECURELOCK_SUGGEST_MIXED + 1),
        SECURELOCK_SUGGEST_SECURE40BIT = 10, // (SECURELOCK_SUGGEST_SECUREUNKNOWNBIT + 1),
        SECURELOCK_SUGGEST_SECURE56BIT = 11, // (SECURELOCK_SUGGEST_SECURE40BIT + 1),
        SECURELOCK_SUGGEST_FORTEZZA = 12, // (SECURELOCK_SUGGEST_SECURE56BIT + 1),
        SECURELOCK_SUGGEST_SECURE128BIT = 13// (SECURELOCK_SUGGEST_FORTEZZA + 1)
    } SECURELOCKCODE;
// #include <pshpack8.h>
typedef struct BASEBROWSERDATAXP
{
    HWND hwnd;
    ITravelLog* ptl;
    IHlinkFrame* phlf;
    IWebBrowser2* pautoWB2;
    IExpDispSupportXP* pautoEDS;
    IShellService* pautoSS;
    int eSecureLockIcon;
    UINT fCreatingViewWindow; // : 1;
    UINT uActivateState;
    PCIDLIST_ABSOLUTE pidlViewState;
    IOleCommandTarget* pctView;
    PIDLIST_ABSOLUTE pidlCur;
    IShellView* psv;
    IShellFolder* psf;
    HWND hwndView;
    LongPtr pszTitleCur;
    PIDLIST_ABSOLUTE pidlPending;
    IShellView* psvPending;
    IShellFolder* psfPending;
    HWND hwndViewPending;
    LongPtr pszTitlePending;
    BOOL fIsViewMSHTML;
    BOOL fPrivacyImpacted;
    CLSID clsidView;
    CLSID clsidViewPending;
    HWND hwndFrame;
} 	BASEBROWSERDATAXP;

//typedef struct BASEBROWSERDATAXP* LPBASEBROWSERDATAXP;

typedef struct BASEBROWSERDATALH
{
    HWND hwnd;
    ITravelLog* ptl;
    IHlinkFrame* phlf;
    IWebBrowser2* pautoWB2;
    IExpDispSupport* pautoEDS;
    IShellService* pautoSS;
    int eSecureLockIcon;
    UINT fCreatingViewWindow; // : 1;
    UINT uActivateState;
    PCIDLIST_ABSOLUTE pidlViewState;
    IOleCommandTarget* pctView;
    PIDLIST_ABSOLUTE pidlCur;
    IShellView* psv;
    IShellFolder* psf;
    HWND hwndView;
    LongPtr pszTitleCur;
    PIDLIST_ABSOLUTE pidlPending;
    IShellView* psvPending;
    IShellFolder* psfPending;
    HWND hwndViewPending;
    LongPtr pszTitlePending;
    BOOL fIsViewMSHTML;
    BOOL fPrivacyImpacted;
    CLSID clsidView;
    CLSID clsidViewPending;
    HWND hwndFrame;
    LONG lPhishingFilterStatus;
} 	BASEBROWSERDATALH;

//typedef struct BASEBROWSERDATALH* LPBASEBROWSERDATALH;
//
//#if 0
//typedef BASEBROWSERDATALH BASEBROWSERDATA;
//
//#endif
//#if (NTDDI_VERSION >= NTDDI_VISTA) || (_WIN32_IE >= _WIN32_IE_IE70)
//typedef BASEBROWSERDATALH BASEBROWSERDATA;
//#else
//typedef BASEBROWSERDATAXP BASEBROWSERDATA;
//#endif // (NTDDI_VERSION >= NTDDI_VISTA) || (_WIN32_IE >= _WIN32_IE_IE70)
//typedef const BASEBROWSERDATA* LPCBASEBROWSERDATA;
//
//typedef BASEBROWSERDATA* LPBASEBROWSERDATA;

typedef enum FolderSetViewPriorityFlags {
    VIEW_PRIORITY_RESTRICTED = 0x00000070,  // a shell restriction is in place that forces this view to be the one we use
     VIEW_PRIORITY_CACHEHIT = 0x00000050,  // we have registry info for the view, so the user has been there before
     VIEW_PRIORITY_STALECACHEHIT = 0x00000045,  // we have stale registry info for the view, so we fall back to the 'all folders like this' default
     VIEW_PRIORITY_USEASDEFAULT = 0x00000043,  // 'Use As Default' is more important than shellext, but less than a stale cache
     VIEW_PRIORITY_SHELLEXT = 0x00000040,  // next we let the shell extension have its say
     VIEW_PRIORITY_CACHEMISS = 0x00000030,  // if we have a cache miss, then we fall back to the 'all folders like this' default
     VIEW_PRIORITY_INHERIT = 0x00000020,  // then try to inherit the view from the previous window
     VIEW_PRIORITY_SHELLEXT_ASBACKUP = 0x0015,  // If classic view state is enabled we want the shell to default to an inheritted view
     VIEW_PRIORITY_DESPERATE = 0x00000010,  // just pick the last view that the window supports
     VIEW_PRIORITY_NONE = 0x00000000  // dont have a view yet
} FolderSetViewPriorityFlags;

typedef struct FOLDERSETDATA
{
    FOLDERSETTINGS fs;
    SHELLVIEWID vidRestore;
    DWORD dwViewPriority;
} 	FOLDERSETDATA;

//typedef struct tagFolderSetData* LPFOLDERSETDATA;
//
//#if !defined(HMONITOR_DECLARED) && !defined(HMONITOR) && (WINVER < 0x0500)
//#define HMONITOR_DECLARED
//DECLARE_HANDLE(HMONITOR);
//#endif
//#if 0
//typedef void* LPCREATESTRUCT;
//
//typedef void NMHDR;
//
//#endif
typedef RECT BORDERWIDTHS;
typedef struct TOOLBARITEM
{
    IDockingWindow* ptbar;
    BORDERWIDTHS rcBorderTool;
    LongPtr pwszItem;
    BOOL fShow;
    HMONITOR hMon;
} 	TOOLBARITEM;

//typedef struct SToolbarItem* LPTOOLBARITEM;
//
//#define ITB_VIEW        ((UINT)-1)      // view
//#include <poppack.h>
//
//
//extern RPC_IF_HANDLE __MIDL_itf_shdeprecated_0000_0006_v0_0_c_ifspec;
//extern RPC_IF_HANDLE __MIDL_itf_shdeprecated_0000_0006_v0_0_s_ifspec;
//
//#ifndef __IBrowserService2_INTERFACE_DEFINED__
//#define __IBrowserService2_INTERFACE_DEFINED__

/* interface IBrowserService2 */
/* [local][object][uuid] */

//
//EXTERN_C const IID IID_IBrowserService2;
//
//#if defined(__cplusplus) && !defined(CINTERFACE)

[
    odl,
    uuid(68BD21CC-438B-11d2-A560-00A0C92DBFE8)
]
interface IBrowserService2 : IBrowserService
{
//public:
    LRESULT WndProcBS(
        /* [annotation][in] */
        [in]  HWND hwnd,
        /* [annotation][in] */
        [in]  UINT uMsg,
        /* [annotation][in] */
        [in]  WPARAM wParam,
        /* [annotation][in] */
        [in]  LPARAM lParam);

    HRESULT SetAsDefFolderSettings(void);

    HRESULT GetViewRect(
        /* [annotation][out] */
        [in, out]  RECT* prc);

    HRESULT OnSize(
        /* [annotation][in] */
        [in]  WPARAM wParam);

    HRESULT OnCreate(
        /* [annotation][in] */
        [in] void* pcs);

    LRESULT OnCommand(
        /* [annotation][in] */
        [in]  WPARAM wParam,
        /* [annotation][in] */
        [in]  LPARAM lParam);

    HRESULT OnDestroy(void);

    LRESULT OnNotify(
        /* [annotation][in] */
        [in] NMHDR* pnm);

    HRESULT OnSetFocus(void);

    HRESULT OnFrameWindowActivateBS(
        /* [annotation][in] */
        [in]  BOOL fActive);

    HRESULT ReleaseShellView(void);

    HRESULT ActivatePendingView(void);

    HRESULT CreateViewWindow(
        /* [annotation][in] */
        [in]  IShellView* psvNew,
        /* [annotation][in] */
        [in]  IShellView* psvOld,
        /* [annotation][in] */
        [in]  RECT* prcView,
        /* [annotation][out] */
        [in, out]  HWND* phwnd);

    HRESULT CreateBrowserPropSheetExt(
        /* [annotation][in] */
        [in]  REFIID riid,
        /* [annotation][iid_is][out] */
        [in, out]  void** ppv);

    HRESULT GetViewWindow(
        /* [annotation][out] */
        [in, out]  HWND* phwndView);

    HRESULT GetBaseBrowserData(
        /* [annotation][out] */
        [in, out]  LongPtr* pbbd);

    LongPtr PutBaseBrowserData(void);

    HRESULT InitializeTravelLog(
        /* [annotation][in] */
        [in]  ITravelLog* ptl,
        /* [annotation][in] */
        [in]  DWORD dw);

    HRESULT SetTopBrowser(void);

    HRESULT Offline(
        /* [annotation][in] */
        [in]  int iCmd);

    HRESULT AllowViewResize(
        /* [annotation][in] */
        [in]  BOOL f);

    HRESULT SetActivateState(
        /* [annotation][in] */
        [in]  UINT u);

    HRESULT UpdateSecureLockIcon(
        /* [annotation][in] */
        [in]  int eSecureLock);

    HRESULT InitializeDownloadManager(void);

    HRESULT InitializeTransitionSite(void);

    HRESULT Initialize(
        /* [annotation][in] */
        [in]  HWND hwnd,
        /* [annotation][in] */
        [in]  IUnknown* pauto);

    HRESULT CancelPendingNavigationAsync(void);

    HRESULT CancelPendingView(void);

    HRESULT MaySaveChanges(void);

    HRESULT PauseOrResumeView(
        [in] BOOL fPaused);

    HRESULT DisableModeless(void);

    HRESULT NavigateToPidl(
        /* [annotation][in] */
        [in]  PCIDLIST_ABSOLUTE pidl,
        /* [annotation][in] */
        [in]  DWORD grfHLNF,
        /* [annotation][in] */
        [in]  DWORD dwFlags);

    HRESULT TryShell2Rename(
        /* [annotation][in] */
        [in]  IShellView* psv,
        /* [annotation][in] */
        [in]  PCIDLIST_ABSOLUTE pidlNew);

    HRESULT SwitchActivationNow(void);

    HRESULT ExecChildren(
        /* [annotation][in] */
        [in]  IUnknown* punkBar,
        /* [annotation][in] */
        [in]  BOOL fBroadcast,
        /* [annotation][unique][in] */
        [in] void* pguidCmdGroup,
        /* [annotation][in] */
        [in]  DWORD nCmdID,
        /* [annotation][in] */
        [in]  DWORD nCmdexecopt,
        /* [annotation][unique][in] */
        [in] VARIANTARG* pvarargIn,
        /* [annotation][unique][out][in] */
        [in, out] VARIANTARG* pvarargOut);

    HRESULT SendChildren(
        /* [annotation][in] */
        [in]  HWND hwndBar,
        /* [annotation][in] */
        [in]  BOOL fBroadcast,
        /* [annotation][in] */
        [in]  UINT uMsg,
        /* [annotation][in] */
        [in]  WPARAM wParam,
        /* [annotation][in] */
        [in]  LPARAM lParam);

    HRESULT GetFolderSetData(
        [in, out] FOLDERSETDATA* pfsd);

    HRESULT OnFocusChange(
        /* [annotation][in] */
        [in]  UINT itb);

    HRESULT v_ShowHideChildWindows(
        /* [annotation][in] */
        [in]  BOOL fChildOnly);

     UINT get_itbLastFocus(void);

    HRESULT put_itbLastFocus(
        /* [annotation][in] */
        [in]  UINT itbLastFocus);

    HRESULT UIActivateView(
        /* [annotation][in] */
        [in]  UINT uState);

    HRESULT GetViewBorderRect(
        [in, out] RECT* prc);

    HRESULT UpdateViewRectSize(void);

    HRESULT ResizeNextBorder(
        /* [annotation][in] */
        [in]  UINT itb);

    HRESULT ResizeView(void);

    HRESULT GetEffectiveClientArea(
        /* [annotation][out] */
        [in, out] RECT* lprectBorder,
        /* [annotation][in] */
        [in]  HMONITOR hmon);

    IStream* v_GetViewStream(
        [in] PCIDLIST_ABSOLUTE pidl,
        /* [annotation][in] */
        [in]  DWORD grfMode,
        /* [annotation][in] */
        [in]  LPCWSTR pwszName);

     int ForwardViewMsg(
        /* [annotation][in] */
        [in]  UINT uMsg,
        /* [annotation][in] */
        [in]  WPARAM wParam,
        /* [annotation][in] */
        [in]  LPARAM lParam);

    HRESULT SetAcceleratorMenu(
        /* [annotation][in] */
        [in]  HACCEL hacc);

    int GetToolbarCount(void);

    LongPtr GetToolbarItem(
        /* [annotation][in] */
        [in]  int itb);

    HRESULT SaveToolbars(
        [in] IStream* pstm);

    HRESULT LoadToolbars(
        /* [annotation][in] */
        [in]  IStream* pstm);

    HRESULT CloseAndReleaseToolbars(
        [in] BOOL fClose);

    HRESULT v_MayGetNextToolbarFocus(
        /* [annotation][in] */
        [in]  MSG* lpMsg,
        /* [annotation][in] */
        [in]  UINT itbNext,
        /* [annotation][in] */
        [in]  int citb,
        /* [annotation][out] */
        [in, out]  LongPtr* pptbi,
        /* [annotation][out] */
        [in, out]  HWND* phwnd);

    HRESULT ResizeNextBorderHelper(
        [in] UINT itb,
        [in] BOOL bUseHmonitor);

    UINT FindTBar(
        /* [annotation][in] */
        [in]  IUnknown* punkSrc);

    HRESULT SetFocus(
        /* [annotation][in] */
        [in]  TOOLBARITEM *ptbi,
        /* [annotation][in] */
        [in]  HWND hwnd,
        /* [annotation][in] */
        [in]  MSG* lpMsg);

    HRESULT v_MayTranslateAccelerator(
        [in] MSG* pmsg);

    HRESULT GetBorderDWHelper(
        /* [annotation][in] */
        [in]  IUnknown* punkSrc,
        /* [annotation][out] */
        [in, out]  RECT* lprectBorder,
        /* [annotation][in] */
        [in]  BOOL bUseHmonitor);

    HRESULT v_CheckZoneCrossing(
        /* [annotation][in] */
        [in]  PCIDLIST_ABSOLUTE pidl);

};


typedef
enum IEPDNFLAGS
{
    IEPDN_BINDINGUI = 0x1
} 	IEPDNFLAGS;


//EXTERN_C const IID IID_IBrowserService3;
//
//#if defined(__cplusplus) && !defined(CINTERFACE)

[
    odl,
        uuid(27D7CE21-762D-48F3-86F3-40E2FD3749C4)
]
interface IBrowserService3 : IBrowserService2
{
//public:
    HRESULT PositionViewWindow(
        /* [annotation][in] */
        [in]  HWND hwnd,
        /* [annotation][in] */
        [in] RECT* prc);

    HRESULT IEParseDisplayNameEx(
        /* [annotation][in] */
        [in]  UINT uiCP,
        /* [annotation][in] */
        [in]  LPCWSTR pwszPath,
        /* [annotation][in] */
        [in]  DWORD dwFlags,
        /* [annotation][out] */
        [in, out]  PIDLIST_ABSOLUTE* ppidlOut);

};

[
    odl,
        uuid(639f1bff-e135-4096-abd8-e0f504d649a4)
]
interface IBrowserService4 : IBrowserService3
{
//public:
    HRESULT ActivateView(
        [in] BOOL fPendingView);

    HRESULT SaveViewState(void);

    HRESULT ResizeAllBorders(void);

};


//[
//    odl,
//    uuid(8278F932-2A3E-11d2-838F-00C04FD918D0)
//]
//interface ITrackShellMenu : IShellMenu
//{
////public:
//    HRESULT SetObscured(
//        [in] HWND hwndTB,
//        [in] IUnknown * punkBand,
//        [in] DWORD dwSMSetFlags);
//
//    HRESULT Popup(
//        [in] HWND hwnd,
//        [in] POINTL* ppt,
//        [in] RECTL* prcExclude,
//        [in] MP_POPUPFLAGS dwFlags);
//
//};

//EXTERN_C const CLSID CLSID_TrackShellMenu;
//
//#ifdef __cplusplus
//
//[uuid(8278F931-2A3E-11d2-838F-00C04FD918D0)] coclass TrackShellMenu { [default] interface ITrackShellMenu; };
//#endif
//#endif /* __ShellDeprecatedObjects_LIBRARY_DEFINED__ */






