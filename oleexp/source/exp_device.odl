typedef enum WPD_STREAM_UNITS
    {
        WPD_STREAM_UNITS_BYTES	= 0,
        WPD_STREAM_UNITS_FRAMES	= 0x1,
        WPD_STREAM_UNITS_ROWS	= 0x2,
        WPD_STREAM_UNITS_MILLISECONDS	= 0x4,
        WPD_STREAM_UNITS_MICROSECONDS	= 0x8
    } 	WPD_STREAM_UNITS;

    interface IPortableDevice;
    interface IPortableDeviceValues;
    interface IPortableDevicePropVariantCollection;
    interface IPortableDeviceKeyCollection;
    interface IPortableDeviceValuesCollection;
    interface IPortableDeviceContent;
    interface IEnumPortableDeviceObjectIDs;
    interface IPortableDeviceProperties;
    interface IPortableDeviceResources;
    interface IPortableDeviceCapabilities;
    interface IPortableDeviceEventCallback;
    interface IPortableDeviceManager;
    interface IPortableDeviceService;
    interface IPortableDeviceServiceCapabilities;
    interface IPortableDeviceContent2;
    interface IPortableDeviceServiceMethods;
    interface IPortableDeviceServiceMethodCallback;
    interface IPortableDeviceDispatchFactory;
	interface IPortableDevicePropertiesBulkCallback;
	interface IPortableDeviceServiceOpenCallback;

	typedef struct WPD_COMMAND_ACCESS_LOOKUP_ENTRY
	{
		PROPERTYKEY Command;
		DWORD       AccessType;
		PROPERTYKEY AccessProperty;
	} WPD_COMMAND_ACCESS_LOOKUP_ENTRY;

typedef enum DELETE_OBJECT_OPTIONS
{
	PORTABLE_DEVICE_DELETE_NO_RECURSION = 0,
	PORTABLE_DEVICE_DELETE_WITH_RECURSION = 1
} DELETE_OBJECT_OPTIONS;

typedef enum WPD_DEVICE_TYPES
{
	WPD_DEVICE_TYPE_GENERIC = 0,
	WPD_DEVICE_TYPE_CAMERA = 1,
	WPD_DEVICE_TYPE_MEDIA_PLAYER = 2,
	WPD_DEVICE_TYPE_PHONE = 3,
	WPD_DEVICE_TYPE_VIDEO = 4,
	WPD_DEVICE_TYPE_PERSONAL_INFORMATION_MANAGER = 5,
	WPD_DEVICE_TYPE_AUDIO_RECORDER = 6
} WPD_DEVICE_TYPES;

typedef enum WpdAttributeForm
{
	WPD_PROPERTY_ATTRIBUTE_FORM_UNSPECIFIED = 0,
	WPD_PROPERTY_ATTRIBUTE_FORM_RANGE = 1,
	WPD_PROPERTY_ATTRIBUTE_FORM_ENUMERATION = 2,
	WPD_PROPERTY_ATTRIBUTE_FORM_REGULAR_EXPRESSION = 3,
	WPD_PROPERTY_ATTRIBUTE_FORM_OBJECT_IDENTIFIER = 4
} WpdAttributeForm;

typedef enum WpdParameterAttributeForm
{
	WPD_PARAMETER_ATTRIBUTE_FORM_UNSPECIFIED = 0,
	WPD_PARAMETER_ATTRIBUTE_FORM_RANGE = 1,
	WPD_PARAMETER_ATTRIBUTE_FORM_ENUMERATION = 2,
	WPD_PARAMETER_ATTRIBUTE_FORM_REGULAR_EXPRESSION = 3,
	WPD_PARAMETER_ATTRIBUTE_FORM_OBJECT_IDENTIFIER = 4
} WpdParameterAttributeForm;

typedef enum WPD_DEVICE_TRANSPORTS
{
	WPD_DEVICE_TRANSPORT_UNSPECIFIED = 0,
	WPD_DEVICE_TRANSPORT_USB = 1,
	WPD_DEVICE_TRANSPORT_IP = 2,
	WPD_DEVICE_TRANSPORT_BLUETOOTH = 3
} WPD_DEVICE_TRANSPORTS;

typedef enum WPD_STORAGE_TYPE_VALUES
{
	WPD_STORAGE_TYPE_UNDEFINED = 0,
	WPD_STORAGE_TYPE_FIXED_ROM = 1,
	WPD_STORAGE_TYPE_REMOVABLE_ROM = 2,
	WPD_STORAGE_TYPE_FIXED_RAM = 3,
	WPD_STORAGE_TYPE_REMOVABLE_RAM = 4
} WPD_STORAGE_TYPE_VALUES;

typedef enum WPD_STORAGE_ACCESS_CAPABILITY_VALUES
{
	WPD_STORAGE_ACCESS_CAPABILITY_READWRITE = 0,
	WPD_STORAGE_ACCESS_CAPABILITY_READ_ONLY_WITHOUT_OBJECT_DELETION = 1,
	WPD_STORAGE_ACCESS_CAPABILITY_READ_ONLY_WITH_OBJECT_DELETION = 2
} WPD_STORAGE_ACCESS_CAPABILITY_VALUES;

typedef enum WPD_SMS_ENCODING_TYPES
{
	SMS_ENCODING_7_BIT = 0,
	SMS_ENCODING_8_BIT = 1,
	SMS_ENCODING_UTF_16 = 2
} WPD_SMS_ENCODING_TYPES;

typedef enum SMS_MESSAGE_TYPES
{
	SMS_TEXT_MESSAGE = 0,
	SMS_BINARY_MESSAGE = 1
} SMS_MESSAGE_TYPES;

typedef enum WPD_POWER_SOURCES
{
	WPD_POWER_SOURCE_BATTERY = 0,
	WPD_POWER_SOURCE_EXTERNAL = 1
} WPD_POWER_SOURCES;

typedef enum WPD_WHITE_BALANCE_SETTINGS
{
	WPD_WHITE_BALANCE_UNDEFINED = 0,
	WPD_WHITE_BALANCE_MANUAL = 1,
	WPD_WHITE_BALANCE_AUTOMATIC = 2,
	WPD_WHITE_BALANCE_ONE_PUSH_AUTOMATIC = 3,
	WPD_WHITE_BALANCE_DAYLIGHT = 4,
	WPD_WHITE_BALANCE_FLORESCENT = 5,
	WPD_WHITE_BALANCE_TUNGSTEN = 6,
	WPD_WHITE_BALANCE_FLASH = 7
} WPD_WHITE_BALANCE_SETTINGS;

typedef enum WPD_FOCUS_MODES
{
	WPD_FOCUS_UNDEFINED = 0,
	WPD_FOCUS_MANUAL = 1,
	WPD_FOCUS_AUTOMATIC = 2,
	WPD_FOCUS_AUTOMATIC_MACRO = 3
} WPD_FOCUS_MODES;

typedef enum WPD_EXPOSURE_METERING_MODES
{
	WPD_EXPOSURE_METERING_MODE_UNDEFINED = 0,
	WPD_EXPOSURE_METERING_MODE_AVERAGE = 1,
	WPD_EXPOSURE_METERING_MODE_CENTER_WEIGHTED_AVERAGE = 2,
	WPD_EXPOSURE_METERING_MODE_MULTI_SPOT = 3,
	WPD_EXPOSURE_METERING_MODE_CENTER_SPOT = 4
} WPD_EXPOSURE_METERING_MODES;

typedef enum WPD_FLASH_MODES
{
	WPD_FLASH_MODE_UNDEFINED = 0,
	WPD_FLASH_MODE_AUTO = 1,
	WPD_FLASH_MODE_OFF = 2,
	WPD_FLASH_MODE_FILL = 3,
	WPD_FLASH_MODE_RED_EYE_AUTO = 4,
	WPD_FLASH_MODE_RED_EYE_FILL = 5,
	WPD_FLASH_MODE_EXTERNAL_SYNC = 6
} WPD_FLASH_MODES;

typedef enum WPD_EXPOSURE_PROGRAM_MODES
{
	WPD_EXPOSURE_PROGRAM_MODE_UNDEFINED = 0,
	WPD_EXPOSURE_PROGRAM_MODE_MANUAL = 1,
	WPD_EXPOSURE_PROGRAM_MODE_AUTO = 2,
	WPD_EXPOSURE_PROGRAM_MODE_APERTURE_PRIORITY = 3,
	WPD_EXPOSURE_PROGRAM_MODE_SHUTTER_PRIORITY = 4,
	WPD_EXPOSURE_PROGRAM_MODE_CREATIVE = 5,
	WPD_EXPOSURE_PROGRAM_MODE_ACTION = 6,
	WPD_EXPOSURE_PROGRAM_MODE_PORTRAIT = 7
} WPD_EXPOSURE_PROGRAM_MODES;

typedef enum WPD_CAPTURE_MODES
{
	WPD_CAPTURE_MODE_UNDEFINED = 0,
	WPD_CAPTURE_MODE_NORMAL = 1,
	WPD_CAPTURE_MODE_BURST = 2,
	WPD_CAPTURE_MODE_TIMELAPSE = 3
} WPD_CAPTURE_MODES;

typedef enum WPD_EFFECT_MODES
{
	WPD_EFFECT_MODE_UNDEFINED = 0,
	WPD_EFFECT_MODE_COLOR = 1,
	WPD_EFFECT_MODE_BLACK_AND_WHITE = 2,
	WPD_EFFECT_MODE_SEPIA = 3
} WPD_EFFECT_MODES;

typedef enum WPD_FOCUS_METERING_MODES
{
	WPD_FOCUS_METERING_MODE_UNDEFINED = 0,
	WPD_FOCUS_METERING_MODE_CENTER_SPOT = 1,
	WPD_FOCUS_METERING_MODE_MULTI_SPOT = 2
} WPD_FOCUS_METERING_MODES;

typedef enum WPD_BITRATE_TYPES
{
	WPD_BITRATE_TYPE_UNUSED = 0,
	WPD_BITRATE_TYPE_DISCRETE = 1,
	WPD_BITRATE_TYPE_VARIABLE = 2,
	WPD_BITRATE_TYPE_FREE = 3
} WPD_BITRATE_TYPES;

typedef enum WPD_META_GENRES
{
	WPD_META_GENRE_UNUSED = 0x0,
	WPD_META_GENRE_GENERIC_MUSIC_AUDIO_FILE = 0x1,
	WPD_META_GENRE_GENERIC_NON_MUSIC_AUDIO_FILE = 0x11,
	WPD_META_GENRE_SPOKEN_WORD_AUDIO_BOOK_FILES = 0x12,
	WPD_META_GENRE_SPOKEN_WORD_FILES_NON_AUDIO_BOOK = 0x13,
	WPD_META_GENRE_SPOKEN_WORD_NEWS = 0x14,
	WPD_META_GENRE_SPOKEN_WORD_TALK_SHOWS = 0x15,
	WPD_META_GENRE_GENERIC_VIDEO_FILE = 0x21,
	WPD_META_GENRE_NEWS_VIDEO_FILE = 0x22,
	WPD_META_GENRE_MUSIC_VIDEO_FILE = 0x23,
	WPD_META_GENRE_HOME_VIDEO_FILE = 0x24,
	WPD_META_GENRE_FEATURE_FILM_VIDEO_FILE = 0x25,
	WPD_META_GENRE_TELEVISION_VIDEO_FILE = 0x26,
	WPD_META_GENRE_TRAINING_EDUCATIONAL_VIDEO_FILE = 0x27,
	WPD_META_GENRE_PHOTO_MONTAGE_VIDEO_FILE = 0x28,
	WPD_META_GENRE_GENERIC_NON_AUDIO_NON_VIDEO = 0x30,
	WPD_META_GENRE_AUDIO_PODCAST = 0x40,
	WPD_META_GENRE_VIDEO_PODCAST = 0x41,
	WPD_META_GENRE_MIXED_PODCAST = 0x42
} WPD_META_GENRES;

typedef enum WPD_CROPPED_STATUS_VALUES
{
	WPD_CROPPED_STATUS_NOT_CROPPED = 0,
	WPD_CROPPED_STATUS_CROPPED = 1,
	WPD_CROPPED_STATUS_SHOULD_NOT_BE_CROPPED = 2
} WPD_CROPPED_STATUS_VALUES;

typedef enum WPD_COLOR_CORRECTED_STATUS_VALUES
{
	WPD_COLOR_CORRECTED_STATUS_NOT_CORRECTED = 0,
	WPD_COLOR_CORRECTED_STATUS_CORRECTED = 1,
	WPD_COLOR_CORRECTED_STATUS_SHOULD_NOT_BE_CORRECTED = 2
} WPD_COLOR_CORRECTED_STATUS_VALUES;

typedef enum WPD_VIDEO_SCAN_TYPES
{
	WPD_VIDEO_SCAN_TYPE_UNUSED = 0,
	WPD_VIDEO_SCAN_TYPE_PROGRESSIVE = 1,
	WPD_VIDEO_SCAN_TYPE_FIELD_INTERLEAVED_UPPER_FIRST = 2,
	WPD_VIDEO_SCAN_TYPE_FIELD_INTERLEAVED_LOWER_FIRST = 3,
	WPD_VIDEO_SCAN_TYPE_FIELD_SINGLE_UPPER_FIRST = 4,
	WPD_VIDEO_SCAN_TYPE_FIELD_SINGLE_LOWER_FIRST = 5,
	WPD_VIDEO_SCAN_TYPE_MIXED_INTERLACE = 6,
	WPD_VIDEO_SCAN_TYPE_MIXED_INTERLACE_AND_PROGRESSIVE = 7
} WPD_VIDEO_SCAN_TYPES;

typedef enum WPD_OPERATION_STATES
{
	WPD_OPERATION_STATE_UNSPECIFIED = 0,
	WPD_OPERATION_STATE_STARTED = 1,
	WPD_OPERATION_STATE_RUNNING = 2,
	WPD_OPERATION_STATE_PAUSED = 3,
	WPD_OPERATION_STATE_CANCELLED = 4,
	WPD_OPERATION_STATE_FINISHED = 5,
	WPD_OPERATION_STATE_ABORTED = 6
} WPD_OPERATION_STATES;

typedef enum WPD_SECTION_DATA_UNITS_VALUES
{
	WPD_SECTION_DATA_UNITS_BYTES = 0,
	WPD_SECTION_DATA_UNITS_MILLISECONDS = 1
} WPD_SECTION_DATA_UNITS_VALUES;

typedef enum WPD_RENDERING_INFORMATION_PROFILE_ENTRY_TYPES
{
	WPD_RENDERING_INFORMATION_PROFILE_ENTRY_TYPE_OBJECT = 0,
	WPD_RENDERING_INFORMATION_PROFILE_ENTRY_TYPE_RESOURCE = 1
} WPD_RENDERING_INFORMATION_PROFILE_ENTRY_TYPES;

typedef enum WPD_COMMAND_ACCESS_TYPES
{
	WPD_COMMAND_ACCESS_READ = 1,
	WPD_COMMAND_ACCESS_READWRITE = 3,
	WPD_COMMAND_ACCESS_FROM_PROPERTY_WITH_STGM_ACCESS = 4,
	WPD_COMMAND_ACCESS_FROM_PROPERTY_WITH_FILE_ACCESS = 8,
	WPD_COMMAND_ACCESS_FROM_ATTRIBUTE_WITH_METHOD_ACCESS = 16
} WPD_COMMAND_ACCESS_TYPES;

typedef enum WPD_SERVICE_INHERITANCE_TYPES
{
	WPD_SERVICE_INHERITANCE_IMPLEMENTATION = 0
} WPD_SERVICE_INHERITANCE_TYPES;

typedef enum WPD_PARAMETER_USAGE_TYPES
{
	WPD_PARAMETER_USAGE_RETURN = 0,
	WPD_PARAMETER_USAGE_IN = 1,
	WPD_PARAMETER_USAGE_OUT = 2,
	WPD_PARAMETER_USAGE_INOUT = 3
} WPD_PARAMETER_USAGE_TYPES;


[
  odl,
  uuid(A1567595-4C2F-4574-A6FA-ECEF917B9A40),
  helpstring("IPortableDeviceManager Interface")
]
interface IPortableDeviceManager : stdole.IUnknown {
    long GetDevices(
                    [in] long pPnPDeviceIDs, 
                    [in] long *pcPnPDeviceIDs);

    long RefreshDeviceList();

		long GetDeviceFriendlyName(
			[in] LPWSTR pszPnPDeviceID,
			[in] long   pDeviceFriendlyName,
			[in] long*  pcchDeviceFriendlyName);

		long GetDeviceDescription(
			[in] LPWSTR pszPnPDeviceID,
			[in] long   pDeviceDescription,
			[in] long*  pcchDeviceDescription);

		long GetDeviceManufacturer(
			[in] LPWSTR pszPnPDeviceID,
			[in] long   pDeviceManufacturer,
			[in] long*  pcchDeviceManufacturer);

		long GetDeviceProperty(
			[in] LPWSTR pszPnPDeviceID,
			[in] LPWSTR pszDevicePropertyName,
			[in] long /* BYTE* */ pData,
			[in] long*  pcbData,
			[in] long*  pdwType);

		long GetPrivateDevices(
			[in] long   pPnPDeviceIDs,
			[in] long*  pcPnPDeviceIDs);
};
[
  odl,
  uuid(6E3F2D79-4E07-48C4-8208-D8C2E5AF4A99),
  helpstring("IPortableDeviceValuesCollection Interface")
]
interface IPortableDeviceValuesCollection : stdole.IUnknown {
    long GetCount([in] long* pcElems);
    long GetAt(
                    [in] long dwIndex, 
                    [out] IPortableDeviceValues** ppValues);
    long Add([in] IPortableDeviceValues* pValues);
    long Clear();
    long RemoveAt([in] long dwIndex);
};

[
  odl,
  uuid(89B2E422-4F1B-4316-BCEF-A44AFEA83EB3),
  helpstring("IPortableDevicePropVariantCollection Interface")
]
interface IPortableDevicePropVariantCollection : stdole.IUnknown {
    long GetCount([in] long* pcElems);
    long GetAt(
                    [in] long dwIndex, 
                    [in] VARIANT* pValue);
    long Add([in] VARIANT* pValue);
    long GetType([out] short* pvt);
    long ChangeType([in] short vt);
    long Clear();
    long RemoveAt([in] long dwIndex);
};


[
  odl,
  uuid(DADA2357-E0AD-492E-98DB-DD61C53BA353),
  helpstring("IPortableDeviceKeyCollection Interface")
]
interface IPortableDeviceKeyCollection : stdole.IUnknown {
    long GetCount([in] long* pcElems);
    long GetAt(
                    [in] long dwIndex, 
                    [in] PROPERTYKEY* pKey);
    long Add([in] PROPERTYKEY* key);
    long Clear();
    long RemoveAt([in] long dwIndex);
};


[
  odl,
  uuid(6848F6F2-3155-4F86-B6F5-263EEEAB3143),
  helpstring("IPortableDeviceValues Interface")
]
interface IPortableDeviceValues : stdole.IUnknown {
    long GetCount([in] long* pcelt);
    long GetAt(
                    [in] long index, 
                    [in, out] PROPERTYKEY* pKey, 
                    [in, out] VARIANT* pValue);
    long SetValue(
                    [in] PROPERTYKEY* key, 
                    [in] VARIANT* pValue);
    long GetValue(
                    [in] PROPERTYKEY* key, 
                    [out] VARIANT* pValue);
    long SetStringValue(
                    [in] PROPERTYKEY* key, 
                    [in] LONG Value);
    long GetStringValue(
                    [in] PROPERTYKEY* key, 
                    [out] LONG* pValue);
    long SetUnsignedIntegerValue(
                    [in] PROPERTYKEY* key, 
                    [in] LONG Value);
    long GetUnsignedIntegerValue(
                    [in] PROPERTYKEY* key, 
                    [out] LONG* pValue);
    long SetSignedIntegerValue(
                    [in] PROPERTYKEY* key, 
                    [in] long Value);
    long GetSignedIntegerValue(
                    [in] PROPERTYKEY* key, 
                    [out] long* pValue);
    long SetUnsignedLargeIntegerValue(
                    [in] PROPERTYKEY* key, 
                    [in] CURRENCY Value);
    long GetUnsignedLargeIntegerValue(
                    [in] PROPERTYKEY* key, 
                    [out] CURRENCY* pValue);
    long SetSignedLargeIntegerValue(
                    [in] PROPERTYKEY* key, 
                    [in] CURRENCY Value);
    long GetSignedLargeIntegerValue(
                    [in] PROPERTYKEY* key, 
                    [out] CURRENCY* pValue);
    long SetFloatValue(
                    [in] PROPERTYKEY* key, 
                    [in] float Value);
    long GetFloatValue(
                    [in] PROPERTYKEY* key, 
                    [out] float* pValue);
    long SetErrorValue(
                    [in] PROPERTYKEY* key, 
                    [in] LONG Value);
    long GetErrorValue(
                    [in] PROPERTYKEY* key, 
                    [out] LONG* pValue);
    long SetKeyValue(
                    [in] PROPERTYKEY* key, 
                    [in] PROPERTYKEY* Value);
    long GetKeyValue(
                    [in] PROPERTYKEY* key, 
                    [out] PROPERTYKEY* pValue);
    long SetBoolValue(
                    [in] PROPERTYKEY* key, 
                    [in] long Value);
    long GetBoolValue(
                    [in] PROPERTYKEY* key, 
                    [out] long* pValue);
    long SetIUnknownValue(
                    [in] PROPERTYKEY* key, 
                    [in] IUnknown* pValue);
    long GetIUnknownValue(
                    [in] PROPERTYKEY* key, 
                    [out] IUnknown** ppValue);
    long SetGuidValue(
                    [in] PROPERTYKEY* key, 
                    [in] UUID* Value);
    long GetGuidValue(
                    [in] PROPERTYKEY* key, 
                    [out] UUID* pValue);
    long SetBufferValue(
                    [in] PROPERTYKEY* key, 
                    [in] LONG pValue, //VarPtr(bytArr(0)) 
                    [in] LONG cbValue);
    long GetBufferValue(
                    [in] PROPERTYKEY* key, 
                    [out] LONG* ppValue, //VarPtr(bytArr(0)) 
                    [out] LONG* pcbValue);
    long SetIPortableDeviceValuesValue(
                    [in] PROPERTYKEY* key, 
                    [in] IPortableDeviceValues* pValue);
    long GetIPortableDeviceValuesValue(
                    [in] PROPERTYKEY* key, 
                    [out] IPortableDeviceValues** ppValue);
    long SetIPortableDevicePropVariantCollectionValue(
                    [in] PROPERTYKEY* key, 
                    [in] IPortableDevicePropVariantCollection* pValue);
    long GetIPortableDevicePropVariantCollectionValue(
                    [in] PROPERTYKEY* key, 
                    [out] IPortableDevicePropVariantCollection** ppValue);
    long SetIPortableDeviceKeyCollectionValue(
                    [in] PROPERTYKEY* key, 
                    [in] IPortableDeviceKeyCollection* pValue);
    long GetIPortableDeviceKeyCollectionValue(
                    [in] PROPERTYKEY* key, 
                    [out] IPortableDeviceKeyCollection** ppValue);
    long SetIPortableDeviceValuesCollectionValue(
                    [in] PROPERTYKEY* key, 
                    [in] IPortableDeviceValuesCollection* pValue);
    long GetIPortableDeviceValuesCollectionValue(
                    [in] PROPERTYKEY* key, 
                    [out] IPortableDeviceValuesCollection** ppValue);
    long RemoveValue([in] PROPERTYKEY* key);
    long CopyValuesFromPropertyStore([in] IPropertyStore* pStore);
    long CopyValuesToPropertyStore([in] IPropertyStore* pStore);
    long Clear();
};

[
  odl,
  uuid(625E2DF8-6392-4CF0-9AD1-3CFA5F17775C),
  helpstring("IPortableDevice Interface")
]
interface IPortableDevice : stdole.IUnknown {
    long Open(
                    [in] LONG pszPnPDeviceID, 
                    [in] IPortableDeviceValues* pClientInfo);
    long SendCommand(
                    [in] LONG dwFlags, 
                    [in] IPortableDeviceValues* pParameters, 
                    [out] IPortableDeviceValues** ppResults);
    long Content([out] IPortableDeviceContent** ppContent);
    long Capabilities([out] IPortableDeviceCapabilities** ppCapabilities);
    long Cancel();
    long Close();
    long Advise(
                    [in] LONG dwFlags, 
                    [in] IPortableDeviceEventCallback* pCallback, 
                    [in] IPortableDeviceValues* pParameters, 
                    [out] LONG* ppszCookie);
    long Unadvise([in] LONG pszCookie);
    long GetPnPDeviceID([out] LONG* ppszPnPDeviceID);
}

[
  odl,
  uuid(6A96ED84-7C73-4480-9938-BF5AF477D426),
  helpstring("IPortableDeviceContent Interface")
]
interface IPortableDeviceContent : stdole.IUnknown {
    long EnumObjects(
                    [in] long dwFlags, 
                    [in] long pszParentObjectID, 
                    [in] IPortableDeviceValues* pFilter, 
                    [out] IEnumPortableDeviceObjectIDs** ppenum);
    long Properties([out] IPortableDeviceProperties** ppProperties);
    long Transfer([out] IPortableDeviceResources** ppResources);
    long CreateObjectWithPropertiesOnly(
                    [in] IPortableDeviceValues* pValues, 
                    [in, out] long* ppszObjectID);
    long CreateObjectWithPropertiesAndData(
                    [in] IPortableDeviceValues* pValues, 
                    [out] IStream** ppData, 
                    [in, out] long* pdwOptimalWriteBufferSize, 
                    [in, out] long* ppszCookie);
    long Delete(
                    [in] long dwOptions, 
                    [in] IPortableDevicePropVariantCollection* pObjectIDs, 
                    [in, out] IPortableDevicePropVariantCollection** ppResults);
    long GetObjectIDsFromPersistentUniqueIDs(
                    [in] IPortableDevicePropVariantCollection* pPersistentUniqueIDs, 
                    [out] IPortableDevicePropVariantCollection** ppObjectIDs);
    long Cancel();
    long Move(
                    [in] IPortableDevicePropVariantCollection* pObjectIDs, 
                    [in] long pszDestinationFolderObjectID, 
                    [in, out] IPortableDevicePropVariantCollection** ppResults);
    long Copy(
                    [in] IPortableDevicePropVariantCollection* pObjectIDs, 
                    [in] long pszDestinationFolderObjectID, 
                    [in, out] IPortableDevicePropVariantCollection** ppResults);
};
[
  odl,
  uuid(10ECE955-CF41-4728-BFA0-41EEDF1BBF19),
  helpstring("IEnumPortableDeviceObjectIDs Interface")
]
interface IEnumPortableDeviceObjectIDs : stdole.IUnknown {
    long Next(
                    [in] long cObjects, 
                    [out] long* pObjIDs, 
                    [in, out] long* pcFetched);
    long Skip([in] long cObjects);
    long Reset();
    long Clone([out] IEnumPortableDeviceObjectIDs** ppenum);
    long Cancel();
};
[
  odl,
  uuid(7F6D695C-03DF-4439-A809-59266BEEE3A6),
  helpstring("IPortableDeviceProperties Interface")
]
interface IPortableDeviceProperties : stdole.IUnknown {
    long GetSupportedProperties(
                    [in] long pszObjectID, 
                    [out] IPortableDeviceKeyCollection** ppKeys);
    long GetPropertyAttributes(
                    [in] long pszObjectID, 
                    [in] PROPERTYKEY* key, 
                    [out] IPortableDeviceValues** ppAttributes);
    long GetValues(
                    [in] long pszObjectID, 
                    [in] IPortableDeviceKeyCollection* pKeys, 
                    [out] IPortableDeviceValues** ppValues);
    long SetValues(
                    [in] long pszObjectID, 
                    [in] IPortableDeviceValues* pValues, 
                    [out] IPortableDeviceValues** ppResults);
    long Delete(
                    [in] long pszObjectID, 
                    [in] IPortableDeviceKeyCollection* pKeys);
    long Cancel();
};
[
  odl,
  uuid(FD8878AC-D841-4D17-891C-E6829CDB6934),
  helpstring("IPortableDeviceResources Interface")
]
interface IPortableDeviceResources : stdole.IUnknown {
    long GetSupportedResources(
                    [in] long pszObjectID, 
                    [out] IPortableDeviceKeyCollection** ppKeys);
    long GetResourceAttributes(
                    [in] long pszObjectID, 
                    [in] PROPERTYKEY* key, 
                    [out] IPortableDeviceValues** ppResourceAttributes);
    long GetStream(
                    [in] long pszObjectID, 
                    [in] PROPERTYKEY* key, 
                    [in] long dwMode, 
                    [in, out] long* pdwOptimalBufferSize, 
                    [out] IStream** ppStream);
    long Delete(
                    [in] long pszObjectID, 
                    [in] IPortableDeviceKeyCollection* pKeys);
    long Cancel();
    long CreateResource(
                    [in] IPortableDeviceValues* pResourceAttributes, 
                    [out] IStream** ppData, 
                    [in, out] long* pdwOptimalWriteBufferSize, 
                    [in, out] long* ppszCookie);
};
[
  odl,
  uuid(2C8C6DBF-E3DC-4061-BECC-8542E810D126),
  helpstring("IPortableDeviceCapabilities Interface")
]
interface IPortableDeviceCapabilities : stdole.IUnknown {
    long GetSupportedCommands([out] IPortableDeviceKeyCollection** ppCommands);
    long GetCommandOptions(
                    [in] PROPERTYKEY* Command, 
                    [out] IPortableDeviceValues** ppOptions);
    long GetFunctionalCategories([out] IPortableDevicePropVariantCollection** ppCategories);
    long GetFunctionalObjects(
                    [in] UUID* Category, 
                    [out] IPortableDevicePropVariantCollection** ppObjectIDs);
    long GetSupportedContentTypes(
                    [in] UUID* Category, 
                    [out] IPortableDevicePropVariantCollection** ppContentTypes);
    long GetSupportedFormats(
                    [in] UUID* ContentType, 
                    [out] IPortableDevicePropVariantCollection** ppFormats);
    long GetSupportedFormatProperties(
                    [in] UUID* Format, 
                    [out] IPortableDeviceKeyCollection** ppKeys);
    long GetFixedPropertyAttributes(
                    [in] UUID* Format, 
                    [in] PROPERTYKEY* key, 
                    [out] IPortableDeviceValues** ppAttributes);
    long Cancel();
    long GetSupportedEvents([out] IPortableDevicePropVariantCollection** ppEvents);
    long GetEventOptions(
                    [in] UUID* Event, 
                    [out] IPortableDeviceValues** ppOptions);
};
[
  odl,
  uuid(D3BD3A44-D7B5-40A9-98B7-2FA4D01DEC08),
  helpstring("IPortableDeviceService Interface")
]
interface IPortableDeviceService : stdole.IUnknown {
    long Open(
                    [in] LONG pszPnPServiceID, 
                    [in] IPortableDeviceValues* pClientInfo);
    long Capabilities([out] IPortableDeviceServiceCapabilities** ppCapabilities);
    long Content([out] IPortableDeviceContent2** ppContent);
    long Methods([out] IPortableDeviceServiceMethods** ppMethods);
    long Cancel();
    long Close();
    long GetServiceObjectID([out] LONG* ppszServiceObjectID);
    long GetPnPServiceID([out] LONG* ppszPnPServiceID);
    long Advise(
                    [in] long dwFlags, 
                    [in] IPortableDeviceEventCallback* pCallback, 
                    [in] IPortableDeviceValues* pParameters, 
                    [out] LONG* ppszCookie);
    long Unadvise([in] LONG pszCookie);
    long SendCommand(
                    [in] long dwFlags, 
                    [in] IPortableDeviceValues* pParameters, 
                    [out] IPortableDeviceValues** ppResults);
};
[
  odl,
  uuid(24DBD89D-413E-43E0-BD5B-197F3C56C886),
  helpstring("IPortableDeviceServiceCapabilities Interface")
]
interface IPortableDeviceServiceCapabilities : stdole.IUnknown {
    long GetSupportedMethods([out] IPortableDevicePropVariantCollection** ppMethods);
    long GetSupportedMethodsByFormat(
                    [in] UUID* Format, 
                    [out] IPortableDevicePropVariantCollection** ppMethods);
    long GetMethodAttributes(
                    [in] UUID* Method, 
                    [out] IPortableDeviceValues** ppAttributes);
    long GetMethodParameterAttributes(
                    [in] UUID* Method, 
                    [in] PROPERTYKEY* Parameter, 
                    [out] IPortableDeviceValues** ppAttributes);
    long GetSupportedFormats([out] IPortableDevicePropVariantCollection** ppFormats);
    long GetFormatAttributes(
                    [in] UUID* Format, 
                    [out] IPortableDeviceValues** ppAttributes);
    long GetSupportedFormatProperties(
                    [in] UUID* Format, 
                    [out] IPortableDeviceKeyCollection** ppKeys);
    long GetFormatPropertyAttributes(
                    [in] UUID* Format, 
                    [in] PROPERTYKEY* Property, 
                    [out] IPortableDeviceValues** ppAttributes);
    long GetSupportedEvents([out] IPortableDevicePropVariantCollection** ppEvents);
    long GetEventAttributes(
                    [in] UUID* Event, 
                    [out] IPortableDeviceValues** ppAttributes);
    long GetEventParameterAttributes(
                    [in] UUID* Event, 
                    [in] PROPERTYKEY* Parameter, 
                    [out] IPortableDeviceValues** ppAttributes);
    long GetInheritedServices(
                    [in] long dwInheritanceType, 
                    [out] IPortableDevicePropVariantCollection** ppServices);
    long GetFormatRenderingProfiles(
                    [in] UUID* Format, 
                    [out] IPortableDeviceValuesCollection** ppRenderingProfiles);
    long GetSupportedCommands([out] IPortableDeviceKeyCollection** ppCommands);
    long GetCommandOptions(
                    [in] PROPERTYKEY* Command, 
                    [out] IPortableDeviceValues** ppOptions);
    long Cancel();
};
[
  odl,
  uuid(9B4ADD96-F6BF-4034-8708-ECA72BF10554),
  helpstring("IPortableDeviceContent2 Interface")
]
interface IPortableDeviceContent2 : IPortableDeviceContent {
    long UpdateObjectWithPropertiesAndData(
                    [in] LONG pszObjectID, 
                    [in] IPortableDeviceValues* pProperties, 
                    [out] IStream** ppData, 
                    [in, out] long* pdwOptimalWriteBufferSize);
};
[
  odl,
  uuid(E20333C9-FD34-412D-A381-CC6F2D820DF7),
  helpstring("IPortableDeviceServiceMethods Interface")
]
interface IPortableDeviceServiceMethods : stdole.IUnknown {
    long Invoke(
                    [in] UUID* Method, 
                    [in] IPortableDeviceValues* pParameters, 
                    [in, out] IPortableDeviceValues** ppResults);
    long InvokeAsync(
                    [in] UUID* Method, 
                    [in] IPortableDeviceValues* pParameters, 
                    [in] IPortableDeviceServiceMethodCallback* pCallback);
    long Cancel([in] IPortableDeviceServiceMethodCallback* pCallback);
};
[
  odl,
  uuid(5E1EAFC3-E3D7-4132-96FA-759C0F9D1E0F)
]
interface IPortableDeviceDispatchFactory : stdole.IUnknown {
    long GetDeviceDispatch(
                    [in] LONG pszPnPDeviceID, 
                    [out] IDispatch** ppDeviceDispatch);
};


[
  odl,
  uuid(B32F4002-BB27-45FF-AF4F-06631C1E8DAD),
  helpstring("IWpdSerializer Interface")
]
interface IWpdSerializer : stdole.IUnknown {
    long GetIPortableDeviceValuesFromBuffer(
                    [in] LONG pBuffer, 
                    [in] long dwInputBufferLength, 
                    [out] IPortableDeviceValues** ppParams);
    long WriteIPortableDeviceValuesToBuffer(
                    [in] long dwOutputBufferLength, 
                    [in] IPortableDeviceValues* pResults, 
                    [out] LONG* pBuffer, 
                    [out] long* pdwBytesWritten);
    long GetBufferFromIPortableDeviceValues(
                    [in] IPortableDeviceValues* pSource, 
                    [out] LONG* ppBuffer, 
                    [out] long* pdwBufferSize);
    long GetSerializedSize(
                    [in] IPortableDeviceValues* pSource, 
                    [out] long* pdwSize);
};


[
    odl,
    uuid(88e04db3-1012-4d64-9996-f703a950d3f4),
    helpstring("IPortableDeviceDataStream Interface")
]
interface IPortableDeviceDataStream : IStream
{
    long GetObjectID(
        [out] LONG* ppszObjectID);

    long Cancel();
};
[
    odl,
    uuid(5e98025f-bfc4-47a2-9a5f-bc900a507c67),
    helpstring("IPortableDeviceUnitsStream Interface")
]
interface IPortableDeviceUnitsStream : stdole.IUnknown
{
    long SeekInUnits(
        [in] LARGE_INTEGER* dlibMove,
        [in] WPD_STREAM_UNITS units,
        [in] DWORD dwOrigin,
        [out] LARGE_INTEGER *plibNewPosition);
    long Cancel();
};
[
    odl,
    uuid(482b05c0-4056-44ed-9e0f-5e23b009da93),
    helpstring("IPortableDevicePropertiesBulk Interface")
]
interface IPortableDevicePropertiesBulk : stdole.IUnknown
{
    long QueueGetValuesByObjectList(
        [in]    IPortableDevicePropVariantCollection*  pObjectIDs,
        [in]    IPortableDeviceKeyCollection*          pKeys,
        [in]    IPortableDevicePropertiesBulkCallback* pCallback,
        [out]   UUID*                                  pContext);

    long QueueGetValuesByObjectFormat(
        [in]    UUID*                                  pguidObjectFormat,
        [in]    LONG                                   pszParentObjectID,
        [in]    DWORD                                  dwDepth,
        [in]    IPortableDeviceKeyCollection*          pKeys,
        [in]    IPortableDevicePropertiesBulkCallback* pCallback,
        [out]   UUID*                                  pContext);

    long QueueSetValuesByObjectList(
        [in]    IPortableDeviceValuesCollection*       pObjectValues,
        [in]    IPortableDevicePropertiesBulkCallback* pCallback,
        [out]   UUID*                                  pContext);

    long Start([in]  UUID* pContext);

    long Cancel([in] UUID* pContext);
};
[
    odl,
    uuid(e56b0534-d9b9-425c-9b99-75f97cb3d7c8),
    helpstring("IPortableDeviceServiceActivation Interface")
]
interface IPortableDeviceServiceActivation : stdole.IUnknown
{
    long OpenAsync(
        [in] LONG                             pszPnPServiceID,
        [in] IPortableDeviceValues*              pClientInfo,
        [in] IPortableDeviceServiceOpenCallback* pCallback);

    long CancelOpenAsync();
};
[
    odl,
    uuid(94fc7953-5ca1-483a-8aee-df52e7747d00)
]
interface IPortableDeviceWebControl : stdole.IDispatch
{
    [id(1), helpstring("method GetDeviceFromId")] 
    HRESULT GetDeviceFromId(
       [in]                  BSTR           deviceId,
       [out, retval] IDispatch**    ppDevice);

    [id(2), helpstring("method GetDeviceFromIdAsync")] 
    HRESULT GetDeviceFromIdAsync(
       [in]  BSTR           deviceId,
       [in]  IDispatch*     pCompletionHandler,
       [in]  IDispatch*     pErrorHandler);
};
//CALLBACKS
[
  odl,
  uuid(C424233C-AFCE-4828-A756-7ED7A2350083),
  helpstring("IPortableDeviceServiceMethodCallback Interface")
]
interface IPortableDeviceServiceMethodCallback : stdole.IUnknown {
    HRESULT OnComplete(
                    [in] LONG hrStatus, 
                    [in] IPortableDeviceValues* pResults);
};
[
    odl,
    uuid(bced49c8-8efe-41ed-960b-61313abd47a9),
    helpstring("IPortableDeviceServiceOpenCallback Interface"),
]
interface IPortableDeviceServiceOpenCallback : stdole.IUnknown
{
    HRESULT OnComplete(
       [in] LONG hrStatus);
};
[
  odl,
  uuid(A8792A31-F385-493C-A893-40F64EB45F6E),
  helpstring("IPortableDeviceEventCallback Interface")
]
interface IPortableDeviceEventCallback : stdole.IUnknown {
    HRESULT OnEvent([in] IPortableDeviceValues* pEventParameters);
};
[
  odl,
  uuid(272C9AE0-7161-4AE0-91BD-9F448EE9C427),
  helpstring("IConnectionRequestCallback Interface")
]
interface IConnectionRequestCallback : stdole.IUnknown {
    HRESULT OnComplete([in] LONG hrStatus);
};
[
    odl,
    uuid(9deacb80-11e8-40e3-a9f3-f557986a7845),
    helpstring("IPortableDevicePropertiesBulkCallback Interface"),
]
interface IPortableDevicePropertiesBulkCallback : stdole.IUnknown
{
    HRESULT OnStart(
        [in]    UUID* pContext);

    HRESULT OnProgress(
        [in]    UUID*                             pContext,
        [in]    IPortableDeviceValuesCollection*    pResults);

    HRESULT OnEnd(
        [in]    UUID* pContext,
        [in]    LONG hrStatus);
};


[
	dllname("devdummy")
]
module PortableDeviceConst
{
const LPSTR WPD_DEVICE_OBJECT_ID = "DEVICE";
const LPSTR PORTABLE_DEVICE_TYPE = "PortableDeviceType";
const LPSTR PORTABLE_DEVICE_ICON = "Icons";
const LPSTR PORTABLE_DEVICE_NAMESPACE_TIMEOUT = "PortableDeviceNameSpaceTimeout";
const LPSTR PORTABLE_DEVICE_NAMESPACE_EXCLUDE_FROM_SHELL = "PortableDeviceNameSpaceExcludeFromShell";
const LPSTR PORTABLE_DEVICE_NAMESPACE_THUMBNAIL_CONTENT_TYPES = "PortableDeviceNameSpaceThumbnailContentTypes";
const LPSTR PORTABLE_DEVICE_IS_MASS_STORAGE = "PortableDeviceIsMassStorage";
const LPSTR PORTABLE_DEVICE_DRM_SCHEME_WMDRM10_PD = "WMDRM10-PD";
const LPSTR PORTABLE_DEVICE_DRM_SCHEME_PDDRM = "PDDRM";

const long WMDRMDEVICEAPP_USE_WPD_DEVICE_PTR = (-1);

const long E_WPD_DEVICE_ALREADY_OPENED = 0x802A0001;
const long E_WPD_DEVICE_NOT_OPEN = 0x802A0002;
const long E_WPD_OBJECT_ALREADY_ATTACHED_TO_DEVICE = 0x802A0003;
const long E_WPD_OBJECT_NOT_ATTACHED_TO_DEVICE = 0x802A0004;
const long E_WPD_OBJECT_NOT_COMMITED = 0x802A0005;
const long E_WPD_DEVICE_IS_HUNG = 0x802A0006;
const long E_WPD_SMS_INVALID_RECIPIENT = 0x802A0064;
const long E_WPD_SMS_INVALID_MESSAGE_BODY = 0x802A0065;
const long E_WPD_SMS_SERVICE_UNAVAILABLE = 0x802A0066;
const long E_WPD_SERVICE_ALREADY_OPENED = 0x802A00C8;
const long E_WPD_SERVICE_NOT_OPEN = 0x802A00C9;
const long E_WPD_OBJECT_ALREADY_ATTACHED_TO_SERVICE = 0x802A00CA;
const long E_WPD_OBJECT_NOT_ATTACHED_TO_SERVICE = 0x802A00CB;
const long E_WPD_SERVICE_BAD_PARAMETER_ORDER = 0x802A00CC;
};


//COCLASSES
[ uuid(0AF10CEC-2ECD-4B92-9581-34F6AE0637F3) ]
coclass PortableDeviceManager {
	interface IPortableDeviceManager;
}
[ uuid(0B91A74B-AD7C-4A9D-B563-29EEF9167172) ]
coclass WpdSerializer {
    [default] interface IWpdSerializer;
};
[ uuid(728A21C5-3D9E-48D7-9810-864848F0F404) ]
coclass PortableDevice {
    [default] interface IPortableDevice;
};
[ uuid(EF5DB4C2-9312-422C-9152-411CD9C4DD84) ]
coclass PortableDeviceService {
    [default] interface IPortableDeviceService;
};
[ uuid(43232233-8338-4658-AE01-0B4AE830B6B0) ]
coclass PortableDeviceDispatchFactory {
    [default] interface IPortableDeviceDispatchFactory;
};
[ uuid(F7C0039A-4762-488A-B4B3-760EF9A1BA9B) ]
coclass PortableDeviceFTM {
    [default] interface IPortableDevice;
};
[ uuid(1649B154-C794-497A-9B03-F3F0121302F3) ]
coclass PortableDeviceServiceFTM {
    [default] interface IPortableDeviceService;
};
[ uuid(186dd02c-2dec-41b5-a7d4-b59056fade51) ]
coclass PortableDeviceWebControl
{
    [default] interface IPortableDeviceWebControl;
};

//NEW IN 6.4.2+
[
	uuid(0c15d503-d017-47ce-9016-7b3f978721cc),
	helpstring("Portable Device Values Class")
]
coclass PortableDeviceValues
{
	[default] interface IPortableDeviceValues;
};
[
	uuid(08a99e2f-6d6d-4b80-af5a-baf2bcbe4cb9),
	helpstring("Portable Device PROPVARIANT collection")
]
coclass PortableDevicePropVariantCollection
{
	[default] interface IPortableDevicePropVariantCollection;
};

[
	uuid(de2d022d-2480-43be-97f0-d1fa2cf98f4f),
	helpstring("Portable Device PROPERTYKEY collection")
]
coclass PortableDeviceKeyCollection
{
	[default] interface IPortableDeviceKeyCollection;
};

[
    uuid(3882134d-14cf-4220-9cb4-435f86d83f60),
        helpstring("Portable Device Values collection")
]
coclass PortableDeviceValuesCollection
{
    [default] interface IPortableDeviceValuesCollection;
};


[
    odl,
    uuid(bc08386a-9952-40cd-ba50-9541d64a4b4e)
]
interface IPortableDeviceClassExtension : stdole.IUnknown
{ 
      HRESULT   Initialize(
        [in] IUnknown* pWdfDeviceUnknown,
        [in]  IPortableDeviceValues * pOptions);

      HRESULT   Uninitialize(void);

      HRESULT   ProcessLibraryMessage(
        [in]  IPortableDeviceValues* pParams,
        [in]  IPortableDeviceValues* pResults);

};
