//credentialprovider.h

typedef enum CREDENTIAL_PROVIDER_USAGE_SCENARIO
{
    CPUS_INVALID = 0,
    CPUS_LOGON,
    CPUS_UNLOCK_WORKSTATION,
    CPUS_CHANGE_PASSWORD,
    CPUS_CREDUI,
    CPUS_PLAP,
} CREDENTIAL_PROVIDER_USAGE_SCENARIO;

typedef enum CREDENTIAL_PROVIDER_FIELD_TYPE
{
    CPFT_INVALID = 0,
    CPFT_LARGE_TEXT,
    CPFT_SMALL_TEXT,
    CPFT_COMMAND_LINK,
    CPFT_EDIT_TEXT,
    CPFT_PASSWORD_TEXT,
    CPFT_TILE_IMAGE,
    CPFT_CHECKBOX,
    CPFT_COMBOBOX,
    CPFT_SUBMIT_BUTTON,
} CREDENTIAL_PROVIDER_FIELD_TYPE;

typedef enum CREDENTIAL_PROVIDER_FIELD_STATE
{
    CPFS_HIDDEN = 0,
    CPFS_DISPLAY_IN_SELECTED_TILE,
    CPFS_DISPLAY_IN_DESELECTED_TILE,
    CPFS_DISPLAY_IN_BOTH,
} CREDENTIAL_PROVIDER_FIELD_STATE;

typedef enum CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE
{
    CPFIS_NONE = 0,
    CPFIS_READONLY,
    CPFIS_DISABLED,
    CPFIS_FOCUSED,
} CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE;

//
// Note: values for guidFieldType used by Microsoft implementations of ICredentialProvider
//       can be found in shlguid.h.
//
typedef struct CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR
{
    DWORD dwFieldID;
    CREDENTIAL_PROVIDER_FIELD_TYPE cpft;
    LongPtr pszLabel;
    UUID guidFieldType;
} CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR;

typedef enum _CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE
{
    CPGSR_NO_CREDENTIAL_NOT_FINISHED,
    CPGSR_NO_CREDENTIAL_FINISHED,
    CPGSR_RETURN_CREDENTIAL_FINISHED,
    CPGSR_RETURN_NO_CREDENTIAL_FINISHED,
} CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE;

typedef enum _CREDENTIAL_PROVIDER_STATUS_ICON
{
    CPSI_NONE = 0,
    CPSI_ERROR,
    CPSI_WARNING,
    CPSI_SUCCESS,
} CREDENTIAL_PROVIDER_STATUS_ICON;

typedef struct CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION
{
    ULONG   ulAuthenticationPackage;
    UUID    clsidCredentialProvider;
    ULONG   cbSerialization;
    LongPtr rgbSerialization;
} CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION;

//cpp_quote("#if (NTDDI_VERSION >= NTDDI_WIN8)")
typedef enum CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS
{
    CPAO_NONE = 0x00000000,  // Default
    CPAO_EMPTY_LOCAL = 0x00000001,  // Need to enumerate the local empty tile
    CPAO_EMPTY_CONNECTED = 0x00000002,  // Need to enumerate the connected empty tile
} CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS;
//cpp_quote("DEFINE_ENUM_FLAG_OPERATORS(CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS)")

typedef enum CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS
{
    CPCFO_NONE = 0x00000000,  // Default
    CPCFO_ENABLE_PASSWORD_REVEAL = 0x00000001,  // Enable the "password reveal" button in the modern control
    CPCFO_IS_EMAIL_ADDRESS = 0x00000002,  // This is a email address, so set the keyboard input scope appropriately
    CPCFO_ENABLE_TOUCH_KEYBOARD_AUTO_INVOKE = 0x00000004,  // Touch keyboard will be invoked automatically on the provider. This should be only set on the CPFG_CREDENTIAL_PROVIDER_LOGO field
    CPCFO_NUMBERS_ONLY = 0x00000008,  // The edit field will show numbers only. This should be only set on the CPFT_PASSWORD_TEXT field
    CPCFO_SHOW_ENGLISH_KEYBOARD = 0x00000010,  // The edit field will show English keyboard.
} CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS;
//cpp_quote("DEFINE_ENUM_FLAG_OPERATORS(CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS)")
//cpp_quote("#endif // (NTDDI_VERSION >= NTDDI_WIN8)")

typedef enum CREDENTIAL_USAGE_SCENARIO {
    CREDUIWIN_GENERIC                   = 0x00000001,  // Plain text username/password is being requested
    CREDUIWIN_CHECKBOX                  = 0x00000002,  // Show the Save Credential checkbox
    CREDUIWIN_AUTHPACKAGE_ONLY          = 0x00000010,  // Only Cred Providers that support the input auth package should enumerate
    CREDUIWIN_IN_CRED_ONLY              = 0x00000020,  // Only the incoming cred for the specific auth package should be enumerated
    CREDUIWIN_ENUMERATE_ADMINS          = 0x00000100,  // Cred Providers should enumerate administrators only
    CREDUIWIN_ENUMERATE_CURRENT_USER    = 0x00000200,  // Only the incoming cred for the specific auth package should be enumerated
    CREDUIWIN_SECURE_PROMPT             = 0x00001000,  // The Credui prompt should be displayed on the secure desktop
    CREDUIWIN_PREPROMPTING              = 0x00002000,  // CredUI is invoked by SspiPromptForCredentials and the client is prompting before a prior handshake
    CREDUIWIN_PACK_32_WOW               = 0x10000000,  // Tell the credential provider it should be packing its Auth Blob 32 bit even though it is running 64 native
//#if (NTDDI_VERSION >= NTDDI_WIN10_RS1)
    CREDUIWIN_IGNORE_CLOUDAUTHORITY_NAME            = 0x00040000,  // Tell the credential provider it should not pack AAD authority name
//#endif
//#if (NTDDI_VERSION >= NTDDI_WIN10_RS5)
    CREDUIWIN_DOWNLEVEL_HELLO_AS_SMART_CARD         = 0x80000000  // Force collected Hello credentials to be packed in a smart card auth buffer.
//#endif
} CREDENTIAL_USAGE_SCENARIO;



//
// No idl files contain NTSTATUS.  Therefore we mirror its definition in ntdef.h.
//
//cpp_quote("#ifdef __midl")
//typedef LONG NTSTATUS;
//cpp_quote("#else // __midl")
//cpp_quote("#ifndef NTSTATUS")
//cpp_quote("typedef _Return_type_success_(return >= 0) LONG NTSTATUS;")
//cpp_quote("#endif // NTSTATUS")
//cpp_quote("#endif // __midl")
//
//cpp_quote("#define CREDENTIAL_PROVIDER_NO_DEFAULT       ((DWORD)-1)")

interface ICredentialProviderCredentialEvents; // forward

[
    odl,
    uuid(63913a93-40c1-481a-818d-4072ff8c70cc),
]
interface ICredentialProviderCredential : stdole.IUnknown
{
    HRESULT Advise([in] ICredentialProviderCredentialEvents* pcpce);
    HRESULT UnAdvise();

    HRESULT SetSelected([in, out] BOOL* pbAutoLogon);
    HRESULT SetDeselected();

    HRESULT GetFieldState([in] DWORD dwFieldID,
        [in, out] CREDENTIAL_PROVIDER_FIELD_STATE* pcpfs,
        [in, out] CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE* pcpfis);

    HRESULT GetStringValue([in] DWORD dwFieldID, [in, out] LongPtr* ppsz);
    HRESULT GetBitmapValue([in] DWORD dwFieldID, [in, out] LongPtr* phbmp);
    HRESULT GetCheckboxValue([in] DWORD dwFieldID, [in, out] BOOL* pbChecked, [in, out] LongPtr* ppszLabel);
    HRESULT GetSubmitButtonValue([in] DWORD dwFieldID, [in, out] DWORD* pdwAdjacentTo);

    HRESULT GetComboBoxValueCount([in] DWORD dwFieldID, [in, out] DWORD* pcItems, [in, out] DWORD* pdwSelectedItem);
    HRESULT GetComboBoxValueAt([in] DWORD dwFieldID, [in] DWORD dwItem, [in, out] LongPtr* ppszItem);

    HRESULT SetStringValue([in] DWORD dwFieldID, [in] LongPtr psz);
    HRESULT SetCheckboxValue([in] DWORD dwFieldID, [in] BOOL bChecked);
    HRESULT SetComboBoxSelectedValue([in] DWORD dwFieldID, [in] DWORD dwSelectedItem);
    HRESULT CommandLinkClicked([in] DWORD dwFieldID);

    HRESULT GetSerialization([in, out] CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE* pcpgsr,
        [in, out] CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION* pcpcs,
        [in, out] LongPtr* ppszOptionalStatusText,
        [in, out] CREDENTIAL_PROVIDER_STATUS_ICON* pcpsiOptionalStatusIcon);
    HRESULT ReportResult([in] NTSTATUS ntsStatus,
        [in] NTSTATUS ntsSubstatus,
        [in, out] LongPtr* ppszOptionalStatusText,
        [in, out] CREDENTIAL_PROVIDER_STATUS_ICON* pcpsiOptionalStatusIcon);
};

[
    odl,
    uuid(9090be5b-502b-41fb-bccc-0049a6c7254b),
]
interface IQueryContinueWithStatus : IQueryContinue
{
    HRESULT SetStatusMessage([in] LongPtr psz);
};

[
    odl,
    uuid(9387928b-ac75-4bf9-8ab2-2b93c4a55290)
]
interface IConnectableCredentialProviderCredential : ICredentialProviderCredential
{
    HRESULT Connect([in] IQueryContinueWithStatus* pqcws);
    HRESULT Disconnect();
};

[
    odl,
    uuid(fa6fa76b-66b7-4b11-95f1-86171118e816),
]
interface ICredentialProviderCredentialEvents : stdole.IUnknown
{
    // ICredentialProviderCredential *pcpc parameters on all methods are deprecated, should pass nullptr.
    HRESULT SetFieldState([in] ICredentialProviderCredential* pcpc,
        [in] DWORD dwFieldID,
        [in] CREDENTIAL_PROVIDER_FIELD_STATE cpfs);
    HRESULT SetFieldInteractiveState([in] ICredentialProviderCredential* pcpc,
        [in] DWORD dwFieldID,
        [in] CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE cpfis);

    HRESULT SetFieldString([in] ICredentialProviderCredential* pcpc,
        [in] DWORD dwFieldID,
        [in] LongPtr psz);
    HRESULT SetFieldCheckbox([in] ICredentialProviderCredential* pcpc,
        [in] DWORD dwFieldID,
        [in] BOOL bChecked,
        [in] LongPtr pszLabel);
    HRESULT SetFieldBitmap([in] ICredentialProviderCredential* pcpc,
        [in] DWORD dwFieldID,
        [in] HBITMAP hbmp);

    HRESULT SetFieldComboBoxSelectedItem([in] ICredentialProviderCredential* pcpc,
        [in] DWORD dwFieldID,
        [in] DWORD dwSelectedItem);
    HRESULT DeleteFieldComboBoxItem([in] ICredentialProviderCredential* pcpc,
        [in] DWORD dwFieldID,
        [in] DWORD dwItem);
    HRESULT AppendFieldComboBoxItem([in] ICredentialProviderCredential* pcpc,
        [in] DWORD dwFieldID,
        [in] LongPtr pszItem);

    HRESULT SetFieldSubmitButton([in] ICredentialProviderCredential* pcpc,
        [in] DWORD dwFieldID,
        [in] DWORD dwAdjacentTo);
    HRESULT OnCreatingWindow([out] LongPtr* phwndOwner);
};

interface ICredentialProviderEvents; // forward

[
    odl,
    uuid(d27c3481-5a1c-45b2-8aaa-c20ebbe8229e),
]
interface ICredentialProvider : stdole.IUnknown
{
    HRESULT SetUsageScenario([in] CREDENTIAL_PROVIDER_USAGE_SCENARIO cpus,
        [in] CREDENTIAL_USAGE_SCENARIO dwFlags);
    HRESULT SetSerialization([in] CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION* pcpcs);

    HRESULT Advise([in] ICredentialProviderEvents* pcpe, [in] LongPtr upAdviseContext);
    HRESULT UnAdvise();

    HRESULT GetFieldDescriptorCount([in, out] DWORD* pdwCount);
    HRESULT GetFieldDescriptorAt([in] DWORD dwIndex,
        [in, out] CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR** ppcpfd);

    HRESULT GetCredentialCount([in, out] DWORD* pdwCount,
        [in, out] DWORD* pdwDefault,
        [in, out] BOOL* pbAutoLogonWithDefault);
    HRESULT GetCredentialAt([in] DWORD dwIndex,
        [in, out] ICredentialProviderCredential** ppcpc);
};

[
    odl,
    uuid(34201e5a-a787-41a3-a5a4-bd6dcf2a854e),
]
interface ICredentialProviderEvents : stdole.IUnknown
{
    HRESULT CredentialsChanged([in] UINT_PTR upAdviseContext);
};

[
    odl,
    uuid(a5da53f9-d475-4080-a120-910c4a739880),
]
interface ICredentialProviderFilter : stdole.IUnknown
{
    HRESULT Filter([in] CREDENTIAL_PROVIDER_USAGE_SCENARIO cpus,
        [in] CREDENTIAL_USAGE_SCENARIO dwFlags,
        [in] UUID* rgclsidProviders,
        [in, out] BOOL* rgbAllow,
        [in] DWORD cProviders);
    HRESULT UpdateRemoteCredential([in] CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION* pcpcsIn,
        [in, out] CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION* pcpcsOut);
};

//cpp_quote("#if (NTDDI_VERSION >= NTDDI_WIN8)")
[
    odl,
    uuid(fd672c54-40ea-4d6e-9b49-cfb1a7507bd7),
]
interface ICredentialProviderCredential2 : ICredentialProviderCredential
{
    HRESULT GetUserSid([in, out] LongPtr* sid);
};

[
    odl,
    uuid(DBC6FB30-C843-49E3-A645-573E6F39446A),
]
interface ICredentialProviderCredentialWithFieldOptions : stdole.IUnknown
{
    HRESULT GetFieldOptions([in]  DWORD fieldID,
        [in, out] CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS* options);
};

[
    odl,
    uuid(B53C00B6-9922-4B78-B1F4-DDFE774DC39B),
]
interface ICredentialProviderCredentialEvents2 : ICredentialProviderCredentialEvents
{
    HRESULT BeginFieldUpdates();
    HRESULT EndFieldUpdates();
    HRESULT SetFieldOptions([in] ICredentialProviderCredential* credential,
        [in] DWORD fieldID,
        [in] CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS options);
};

[
    odl,
    uuid(13793285-3ea6-40fd-b420-15f47da41fbb)
]
interface ICredentialProviderUser : stdole.IUnknown
{
    HRESULT GetSid([in, out] LongPtr* sid);
    HRESULT GetProviderID([in, out] UUID* providerID);
    HRESULT GetStringValue([in] REFPROPERTYKEY key, [in, out] LongPtr* stringValue);
    HRESULT GetValue([in] REFPROPERTYKEY key, [in, out] VARIANT* value);
};

// Identity_LocalUserProvider: {A198529B-730F-4089-B646-A12557F5665E}
// Define the provider GUID to pass as guidProivderToFilterTo in ICredentialProviderUserArray::SetProviderFilter() to populate local users.
//cpp_quote("DEFINE_GUID(Identity_LocalUserProvider, 0xA198529B, 0x730F, 0x4089, 0xB6, 0x46, 0xA1, 0x25, 0x57, 0xF5, 0x66, 0x5E);")

[
    odl,
    uuid(90C119AE-0F18-4520-A1F1-114366A40FE8)
]
interface ICredentialProviderUserArray : stdole.IUnknown
{
    HRESULT SetProviderFilter([in] UUID* guidProviderToFilterTo);
    HRESULT GetAccountOptions([in, out] CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS* credentialProviderAccountOptions);
    HRESULT GetCount([in, out] DWORD* userCount);
    HRESULT GetAt([in] DWORD userIndex, [in, out] ICredentialProviderUser** user);
};

[
    odl,
    uuid(095c1484-1c0c-4388-9c6d-500e61bf84bd)
]
interface ICredentialProviderSetUserArray : stdole.IUnknown
{
    HRESULT SetUserArray([in] ICredentialProviderUserArray* users);
};

//cpp_quote("#endif // (NTDDI_VERSION >= NTDDI_WIN8)")

//
// This typelib contains the CLSIDs of Microsoft's ICredentialProvider implementations.
//
//[
//    uuid(d545db01-e522-4a63-af83-d8ddf954004f), // LIBID_CredentialProviders
//]
//library CredentialProviders
//{
    // CLSID_PasswordCredentialProvider
    [uuid(60b78e88-ead8-445c-9cfd-0b87f74ea6cd)] coclass PasswordCredentialProvider { interface ICredentialProvider; }

    // CLSID_V1PasswordCredentialProvider
    [uuid(6f45dc1e-5384-457a-bc13-2cd81b0d28ed)] coclass V1PasswordCredentialProvider { interface ICredentialProvider; }

    // CLSID_PINLogonCredentialProvider
    [uuid(cb82ea12-9f71-446d-89e1-8d0924e1256e)] coclass PINLogonCredentialProvider { interface ICredentialProvider; }

    // CLSID_NPCredentialProvider
    [uuid(3dd6bec0-8193-4ffe-ae25-e08e39ea4063)] coclass NPCredentialProvider { interface ICredentialProvider; }

    // CLSID_SmartcardCredentialProvider
    [uuid(8FD7E19C-3BF7-489B-A72C-846AB3678C96)] coclass SmartcardCredentialProvider { interface ICredentialProvider; }

    // CLSID_V1SmartcardCredentialProvider
    [uuid(8bf9a910-a8ff-457f-999f-a5ca10b4a885)] coclass V1SmartcardCredentialProvider { interface ICredentialProvider; }

    // CLSID_SmartcardPinProvider
    [uuid(94596c7e-3744-41ce-893e-bbf09122f76a)] coclass SmartcardPinProvider { interface ICredentialProvider; }

    // CLSID_SmartcardReaderSelectionProvider
    [uuid(1b283861-754f-4022-ad47-a5eaaa618894)] coclass SmartcardReaderSelectionProvider { interface ICredentialProvider; }

    // CLSID_SmartcardWinRTProvider
    [uuid(1ee7337f-85ac-45e2-a23c-37c753209769)] coclass SmartcardWinRTProvider { interface ICredentialProvider; }

    // CLSID_GenericCredentialProvider
    [uuid(25CBB996-92ED-457e-B28C-4774084BD562)] coclass GenericCredentialProvider { interface ICredentialProvider; }

    // CLSID_RASProvider
    [uuid(5537E283-B1E7-4EF8-9C6E-7AB0AFE5056D)] coclass RASProvider { interface ICredentialProvider; }

    // CLSID_OnexCredentialProvider
    [uuid(07AA0886-CC8D-4e19-A410-1C75AF686E62)] coclass OnexCredentialProvider { interface ICredentialProvider; }

    // CLSID_OnexPlapSmartcardCredentialProvider
    [uuid(33c86cd6-705f-4ba1-9adb-67070b837775)] coclass OnexPlapSmartcardCredentialProvider { interface ICredentialProvider; }

    // CLSID_VaultProvider
    [uuid(503739d0-4c5e-4cfd-b3ba-d881334f0df2)] coclass VaultProvider { interface ICredentialProvider; }

    // CLSID_WinBioCredentialProvider
    [uuid(BEC09223-B018-416D-A0AC-523971B639F5)] coclass WinBioCredentialProvider { interface ICredentialProvider; }

    // CLSID_V1WinBioCredentialProvider
    [uuid(AC3AC249-E820-4343-A65B-377AC634DC09)] coclass V1WinBioCredentialProvider { interface ICredentialProvider; }
//};

