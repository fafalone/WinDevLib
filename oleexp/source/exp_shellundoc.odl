typedef enum SFV_Messages
{
	SFVM_MERGEMENU = 1,   // -                  LPQCMINFO
	SFVM_INVOKECOMMAND = 2,   // idCmd              -
	SFVM_GETHELPTEXT = 3,   // idCmd,cchMax       pszText
	SFVM_GETTOOLTIPTEXT = 4,   // idCmd,cchMax       pszText
	SFVM_GETBUTTONINFO = 5,  // -                  LPTBINFO
	SFVM_GETBUTTONS = 6,   // idCmdFirst,cbtnMax LPTBBUTTON
	SFVM_INITMENUPOPUP = 7,   // idCmdFirst,nIndex  hmenu
							  //BEGIN UNDOCUMENTED
	SFVM_SELCHANGE = 8,   // idCmdFirst,nItem   SFVM_SELCHANGE_DATA*
	SFVM_DRAWITEM = 9,   // idCmdFirst         DRAWITEMSTRUCT*
	SFVM_MEASUREITEM = 10,   // idCmdFirst         MEASUREITEMSTRUCT*
	SFVM_EXITMENULOOP = 11,   // -                  -
	SFVM_PRERELEASE = 12,   // -                  -
	SFVM_GETCCHMAX = 13,   // LPCITEMIDLIST      pcchMax
						   //END UNDOCUMENTED
	SFVM_FSNOTIFY = 14,   // LPCITEMIDLIST*     lEvent
	SFVM_WINDOWCREATED = 15,   // hwnd               -
							   //BEGIN UNDOCUMENTED
	SFVM_WINDOWDESTROY = 16,   // hwnd               -
	SFVM_REFRESH = 17,   // BOOL fPreOrPost    -                         NB: this may be called multiple times in a row
	SFVM_SETFOCUS = 18,   // -                  -
	SFVM_QUERYCOPYHOOK = 20,   // -                  -
	SFVM_NOTIFYCOPYHOOK = 21,   // -                  COPYHOOKINFO*
								//END UNDOCUMENTED
	SFVM_GETDETAILSOF = 23,   // iColumn            DETAILSINFO*
	SFVM_COLUMNCLICK = 24,   // iColumn            -
	SFVM_QUERYFSNOTIFY = 25,   // -                  SHChangeNotifyEntry *
	SFVM_DEFITEMCOUNT = 26,   // -                  UINT*
	SFVM_DEFVIEWMODE = 27,   // -                  FOLDERVIEWMODE*
	SFVM_UNMERGEMENU = 28, // -                  hmenu
						   //BEGIN UNDOCUMENTED
	SFVM_INSERTITEM = 29,   // pidl               -
	SFVM_DELETEITEM = 30,   // pidl               -
							//END UNDOCUMENTED
	SFVM_UPDATESTATUSBAR = 31,   // fInitialize        -
	SFVM_BACKGROUNDENUM = 32,   // -                  -
								//BEGIN UNDOCUMENTED
	SFVM_GETWORKINGDIR = 33,   // uMax               pszDir
	SFVM_GETCOLSAVESTREAM = 34,   // flags              IStream **
	SFVM_SELECTALL = 35,   // -                  -
						   //END UNDOCUMENTED
	SFVM_DIDDRAGDROP = 36,   // dwEffect           IDataObject *
							 //UNDOCUMENTED
	SFVM_SUPPORTSIDENTITY = 37,   // -                  -                         // NOT USED: must support IShellFolder2
	SFVM_FOLDERISPARENT = 38,   // -                  pidlChild
								//END
	SFVM_SETISFV = 39,   // -                  IShellFolderView*
						 //UNDOCUMENTED
	SFVM_GETVIEWS = 40,   // SHELLVIEWID*       IEnumSFVViews **
						  //END
	SFVM_THISIDLIST = 41,   // -                  LPITMIDLIST*
							//UNDOCUMENTED
	SFVM_GETITEMIDLIST = 42,   // iItem              LPITMIDLIST*
	SFVM_SETITEMIDLIST = 43,   // iItem              LPITEMIDLIST
	SFVM_INDEXOFITEMIDLIST = 44,   // *iItem             LPITEMIDLIST
	SFVM_ODFINDITEM = 45,  // *iItem             NM_FINDITEM*
	SFVM_HWNDMAIN = 46,   //                    hwndMain
						  //END
	SFVM_ADDPROPERTYPAGES = 47,   // -                  SFVM_PROPPAGE_DATA *
	SFVM_BACKGROUNDENUMDONE = 48,   // -                  -
	SFVM_GETNOTIFY = 49,   // LPITEMIDLIST*      LONG*
						   //UNDOCUMENTED
	SFVM_ARRANGE = 50,   // -                  lParamSort
	SFVM_QUERYSTANDARDVIEWS = 51,   // -                  BOOL *                    // NOT USED: must use SFVM_GETVIEWDATA instead
	SFVM_QUERYREUSEEXTVIEW = 52,   // -                  BOOL *                    // NOT USED
								   //END
	SFVM_GETSORTDEFAULTS = 53,   // iDirection         iParamSort
								 //UNDOCUMENTED
	SFVM_GETEMPTYTEXT = 54,   // cchMax             pszText
	SFVM_GETITEMICONINDEX = 55,   // iItem              int *piIcon
	SFVM_DONTCUSTOMIZE = 56,   // -                  BOOL *pbDontCustomize     // NOT USED
							   //END
	SFVM_SIZE = 57,   // -                  -
	SFVM_GETZONE = 58,   // -                  DWORD*
	SFVM_GETPANE = 59,   // Pane ID            DWORD*
						 //UNDOCUMENTED
	SFVM_ISOWNERDATA = 60,   // ISOWNERDATA        BOOL *
	SFVM_GETODRANGEOBJECT = 61,   // iWhich             ILVRange **
	SFVM_ODCACHEHINT = 62,   // -                  NMLVCACHEHINT *
							 //END
	SFVM_GETHELPTOPIC = 63,   // -                  SFVM_HELPTOPIC_DATA *
							  //UNDOCUMENTED
	SFVM_OVERRIDEITEMCOUNT = 64,   // -                  UINT*                     // NOT USED: allowed override of actual item count for sizing calculations
	SFVM_GETHELPTEXTW = 65,   // idCmd,cchMax       pszText - unicode
	SFVM_GETTOOLTIPTEXTW = 66,   // idCmd,cchMax       pszText - unicode
	SFVM_GETIPERSISTHISTORY = 67,  //                    IPersistHistory **
								   //END
	SFVM_GETANIMATION = 68,   // HINSTANCE *        WCHAR *
							  //UNDOCUMENTED
	SFVM_GETHELPTEXTA = 69,   // idCmd,cchMax       pszText - ansi
	SFVM_GETTOOLTIPTEXTA = 70,   // idCmd,cchMax       pszText - ansi
								 // The below two messages are only used in ownder data case, i.e. when SFVM_ISOWNERDATA returns TRUE
	SFVM_GETICONOVERLAY = 71,   // iItem              int iOverlayIndex
	SFVM_SETICONOVERLAY = 72,   // iItem              int * piOverlayIndex
	SFVM_ALTERDROPEFFECT = 73,  // DWORD*             IDataObject*
	SFVM_DELAYWINDOWCREATE = 74,  // HWND               - posted version of SFVM_WINDOWCREATED, no params
	SFVM_FORCEWEBVIEW = 75,  // BOOL*              -
	SFVM_GETVIEWINFO = 76,   // fvm.uViewMode      SFVM_VIEWINFO_DATA*          // NOT USED: shipped in Whistler Beta 1 only, remove soon
	SFVM_GETCUSTOMVIEWINFO = 77,   // -                  SFVM_CUSTOMVIEWINFO_DATA*
	SFVM_FOLDERSETTINGSFLAGS = 78,   // -                  DWORD * (FWF_ flags)
	SFVM_ENUMERATEDITEMS = 79,   // UINT celt          LPCITEMIDLIST* rgpidl      // fired once at view creation, before first SFVM_GETVIEWDATA SFVM_GETDEFERREDVIEWSETTINGS
	SFVM_GETVIEWDATA = 80,   // fvm.uViewMode      SFVM_VIEW_DATA*
	SFVM_GETWEBVIEW_TEMPLATE = 81,   // fvm.uViewMode      SFVM_WEBVIEW_TEMPLATE_DATA*  // NOTE: going away soon
	SFVM_GETWEBVIEWLAYOUT = 82,   // fvm.uViewMode      SFVM_WEBVIEW_LAYOUT_DATA*
	SFVM_GETWEBVIEWCONTENT = 83,   // -                  SFVM_WEBVIEW_CONTENT_DATA*
	SFVM_GETWEBVIEWTASKS = 84,   // -                  SFVM_WEBVIEW_TASKSECTION_DATA*
	SFVM_GETWEBVIEWTHEME = 86,   // -                  SFVM_WEBVIEW_THEME_DATA* // HACK for Whistler, will remove when DirectUI goes DLL
	SFVM_SORTLISTDATA = 87,   // PFNLVCOMPARE       lParamSort
	SFVM_GETWEBVIEWBARRICADE = 88,   // -                  Element* // HACK for Whistler, will remove when DirectUI goes DLL
	SFVM_ENUMWEBVIEWTASKS = 90,   // -                  SFVM_WEBVIEW_ENUMTASKSECTION_DATA*
	SFVM_SETEMPTYTEXT = 91,   // -                  pszText
	SFVM_GETDEFERREDVIEWSETTINGS = 92 // -                  SFVM_DEFERRED_VIEW_SETTINGS* // set the default view settings
} SFV_Messages;



typedef struct SHELLREMINDER
{
	DWORD  cbSize;
	long pszName;
	long pszTitle;
	long pszText;
	long pszTooltip;
	long pszIconResource;
	long pszShellExecute;
	UUID*  pclsid;
	DWORD  dwShowTime;
	DWORD  dwRetryInterval;
	DWORD  dwRetryCount;
	DWORD  dwTypeFlags;
} SHELLREMINDER;

[
	odl,
	uuid(6c6d9735-2d86-40e1-b348-08706b9908c0)     // IID_IEnumShellReminder
]
interface IEnumShellReminder : stdole.IUnknown
{
	HRESULT Next(
		[in] ULONG celt,
		[in, out] SHELLREMINDER** rgelt,
		[in, out] ULONG *pceltFetched);

	HRESULT Skip([in] ULONG celt);
	HRESULT Reset();
	HRESULT Clone([in, out] IEnumShellReminder **ppesr);
};

[
	odl,
	uuid(968edb91-8a70-4930-8332-5f15838a64f9)     // IID_IShellReminderManager
]
interface IShellReminderManager : stdole.IUnknown
{
	HRESULT Add([in] SHELLREMINDER* psr);
	HRESULT Delete([in] long pszName);
	HRESULT Enum([out] IEnumShellReminder** ppesr);
};

[
	odl,
	helpstring("interface to initialize MRU in auto complete"),
	uuid(F729FC5E-8769-4f3e-BDB2-D7B50FD2275B)
]
interface IACLCustomMRU : stdole.IUnknown
{
	HRESULT Initialize([in] long pwszMRURegKey, [in] DWORD dwMax);
	HRESULT AddMRUString([in] long pwszEntry);
};

typedef struct FLAGGED_BYTE_BLOB
{
	ULONG fFlags;
	ULONG clSize;
	long abData; ///* [size_is] */ byte abData[1];
} 	FLAGGED_BYTE_BLOB;

typedef enum ASSOCQUERY
{
	//  each ASSOCQUERY identifier is composed of 
	//  HIWORD:  the type and capabilities (AQF bits)
	//  LOWORD:  the ordinal relative to its type
	AQ_NOTHING = 0,

	//  simple queries where pszCue is unused (AQF type 0x000)
	AQS_FRIENDLYTYPENAME = 0x00170000, //  friendly name of the document type
	AQS_DEFAULTICON = 0x00070001, //  Default icon resource string call PathParseIconLocation() to use
	AQS_CONTENTTYPE = 0x80070002, //  MIME Content type
	AQS_CLSID = 0x00070003, //  CLSID associated with class
	AQS_PROGID = 0x00070004, //  ProgID associated with class

							 //  simple queries where pszCue identifies the value (AQF type 0x010)
	AQN_NAMED_VALUE = 0x010f0000, //  querys directly for value named by pszCue
	AQNS_NAMED_MUI_STRING = 0x01170001, //  as ASSOCQUERY_NAMED_VALUE and loads it using MUI semantics SHLoadIndirectString()
	AQNS_SHELLEX_HANDLER = 0x81070002, //  ..\Shellex\%pszCue% returns a CLSID string for the value.

									   //  queries that require delegation to the static verb element for completion, pszCue is the verb (AQF type 0x020)
	AQVS_COMMAND = 0x02070000, //  ...\shell\verb\command, template for CreateProcess()
	AQVS_DDECOMMAND = 0x02070001, //  ...\shell\verb\ddeexec, template for DDE conversation
	AQVS_DDEIFEXEC = 0x02070002, //  ...\shell\verb\ddeexec\ifexec, replaces DDECOMMAND after calling CreateProcess(AQVS_COMMAND)
	AQVS_DDEAPPLICATION = 0x02070003, //  ...\shell\verb\ddeexec\application, Application name in DDE broadcast
	AQVS_DDETOPIC = 0x02070004, //  ...\shell\verb\ddeexec\topic, Topic Name in DDE broadcast
	AQV_NOACTIVATEHANDLER = 0x02060005, //  ...\shell\verb\ddeexec!NoActivateHandler restrict attempts to activate window
	AQVD_MSIDESCRIPTOR = 0x02060006, //  Component Descriptor to pass to MSI APIs
	AQVS_APPLICATION_PATH = 0x02010007, //  path to executable
	AQVS_APPLICATION_FRIENDLYNAME = 0x02170008, //  friendly name of associated application

												//  delegate objects retrievable through QueryObject (AQF type 0x022)
	AQVO_SHELLVERB_DELEGATE = 0x02200000, //  CAssocShellVerbElement init'd with ...\shell\verb
	AQVO_APPLICATION_DELEGATE = 0x02200001, //  CAssocApplicationElement init'd with AQVS_APPLICATION_PATH

											//  flags that hint to the implementation the purpose of the ASSOCQUERY
	AQF_STRING = 0x00010000,   // supports QueryString()
	AQF_EXISTS = 0x00020000,   // supports QueryExists()
	AQF_DIRECT = 0x00040000,   // supports QueryDirect()
	AQF_DWORD = 0x00080000,   // supports QueryDword()
	AQF_MUISTRING = 0x00100000,   // supports QueryString(), but also does a SHLoadIndirectString()
	AQF_OBJECT = 0x00200000,   // supports QueryObject()
	AQF_CUEIS_UNUSED = 0x00000000,   // pszCue is unused, in IAssociation* Query methods
	AQF_CUEIS_NAME = 0x01000000,   // pszCue is the name of the value being queried for, in IAssociation* Query methods
	AQF_CUEIS_SHELLVERB = 0x02000000,   // pszCue is the Shell\Verb, in IAssociation* Query methods
	AQF_QUERY_INITCLASS
} ASSOCQUERY;

typedef enum ASSOCELEM
{
	ASSOCELEM_DATA = 0x00000001, //  InsertElements(ASSOCELEM_DATA)
	ASSOCELEM_USER = 0x00000002, //  APPLICATION or progid
	ASSOCELEM_DEFAULT = 0x00000004, //  ClsId or progid
	ASSOCELEM_SYSTEM_EXT = 0x00000010, //  HKCR\SFA\.ext
	ASSOCELEM_SYSTEM_PERCEIVED = 0x00000020, //  HKCR\SFA\PerceivedType
	ASSOCELEM_SYSTEM = 0x00000030, //  use SystemFileAssociations
	ASSOCELEM_BASEIS_FOLDER = 0x00000100, //  HKCR\Folder
	ASSOCELEM_BASEIS_STAR = 0x00000200, //  HKCR\*
	ASSOCELEM_BASE = 0x00000300, //  FOLDER | STAR
	ASSOCELEM_EXTRA = 0x00010000, //  InsertElements(ASSOCELEM_EXTRA)

	ASSOCELEMF_INCLUDE_SLOW = 0x80000000, //  include elements that maybe slow

	ASSOCELEM_MASK_QUERYNORMAL = 0x0000FFFF,
	ASSOCELEM_MASK_ENUMCONTEXTMENU = -1,      //  context menus usually try everything
	ASSOCELEM_MASK_ALL = -1,

	//Undocumented:
	ASSOCELEM_GETBITS = 0x00000036, // (ASSOCELEM_USER | ASSOCELEM_DEFAULT | ASSOCELEM_SYSTEM),
} ASSOCELEM;
//
//  0--| IAssociationElement - indirect wrapper for HKEY and subkeys/values
//
//      IAssociationElement wraps the logic used to access values
//  under an HKEY.  The methods are essentially identical, just changing
//  for the return type.
//      * ASSOCQUERY    - enum names the query for the association.  the 
//          query's bits define what methods and return values are valid.
//          NOTE - Not all ASSOCQUERY's are supported by all elements.
//      * pszCue        - string that is used with some queries.
//          if (query & AQF_CUEIS_SHELLVERB) then pszCue is the static verb
//          if (query & AQF_CUEIS_NAME) then pszCue is name for the value or subkey
//

[
	odl,
	uuid(e58b1abf-9596-4dba-8997-89dcdef46992)
]
interface IAssociationElement : stdole.IUnknown
{
	HRESULT QueryString(
		[in] ASSOCQUERY query,
		[in] LPCWSTR pszCue,
		[in, out] LPWSTR *ppsz);

	HRESULT QueryDword(
		[in] ASSOCQUERY query,
		[in] LPCWSTR pszCue,
		[in, out] DWORD *pdw);

	HRESULT QueryExists(
		[in] ASSOCQUERY query,
		[in] LPCWSTR pszCue);

	HRESULT QueryDirect(
		[in] ASSOCQUERY query,
		[in] LPCWSTR pszCue,
		[in, out] FLAGGED_BYTE_BLOB **ppblob);

	HRESULT QueryObject(
		[in] ASSOCQUERY query,
		[in] LPCWSTR pszCue,
		[in] REFIID riid,
		[in, out] LPVOID ppv);
};

[
	odl,
	uuid(a6b0fb57-7523-4439-9425-ebe99823b828)
]
interface IEnumAssociationElements : stdole.IUnknown
{
	HRESULT Next(
		[in] ULONG celt,
		[in, out] IAssociationElement ** rgelt,
		[in, out] ULONG *pceltFetched);

	HRESULT Skip([in] ULONG celt);
	HRESULT Reset();
	HRESULT Clone([in, out] IEnumAssociationElements **ppenum);
};

//typedef DWORD ASSOCELEM_MASK;

[
	odl,
	uuid(ee9165bf-a4d9-474b-8236-6735cb7e28b6)
]
interface IAssociationArrayInitialize : stdole.IUnknown
{
	HRESULT InitClassElements(
		[in] ASSOCELEM maskBase,   //  FOLDER || STAR
		[in] LPCWSTR pszClass);

	HRESULT InsertElements(
		[in] ASSOCELEM mask,
		[in] IEnumAssociationElements *peae);

	HRESULT FilterElements([in] ASSOCELEM maskInclude);
};

//
//  0--| IAssociationArray - manages querying an array of IAssociationElement's
//      IAssociationArray wraps an array of objects implementing IAssociationElement.
//  It calls the elements in priority order, starting with the most specific 
//  (ASSOCELEM_DATA) to the least specific (ASSOCELEM_EXTRA).  IAssociationArray
//  combined with IAssociationArrayInitialize is a superset of IQueryAssociations.
//
//  Which elements are in the array and how they are initialized depends on
//  how IAssociationArrayInitialize::InitClassElements() was called.
//       _________________________________
//      |       CLSID_QueryAssociations   |
//   0--| IAssociationArrayInitialize     |
//   0--| IAssociationArray               |
//   0--| IQueryAssociations              |
//      |_________________________________|
//            | |       ________________________________
//            | |      |    CLSID_AssocShellElement     |
//            | +--<0--|IPersistString2 - initializer   |
//            +----<0--|IAssociationElement             |
//                  0--|IObjectWithQuerySource          |
//                     |________________________________|
//                            |      ________________________
//                            |     | IQuerySource on HKEY   |
//                            +-<0--|IQuerySource            |
//                               0--|IObjectWithRegistryKey  |
//                                  |________________________|
[
	odl,
	uuid(3b877e3c-67de-4f9a-b29b-17d0a1521c6a)
]
interface IAssociationArray : stdole.IUnknown
{
	long EnumElements(
		[in] ASSOCELEM mask,
		[in, out] IEnumAssociationElements **ppeae);

	long QueryString(
		[in] ASSOCELEM mask,
		[in] ASSOCQUERY query,
		[in] long pszCue,
		[in, out] LPWSTR *ppsz);

	long QueryDword(
		[in] ASSOCELEM mask,
		[in] ASSOCQUERY query,
		[in] long pszCue,
		[in, out] DWORD *pdw);

	long QueryExists(
		[in] ASSOCELEM mask,
		[in] ASSOCQUERY query,
		[in] long pszCue);

	long QueryDirect(
		[in] ASSOCELEM mask,
		[in] ASSOCQUERY query,
		[in] long pszCue,
		[in, out] FLAGGED_BYTE_BLOB **ppblob);

	long QueryObject(
		[in] ASSOCELEM mask,
		[in] ASSOCQUERY query,
		[in] long pszCue,
		[in] REFIID riid,
		[in, out] LPVOID ppv);
};

[
	odl,
	uuid(fadb55b4-d382-4fc4-81d7-abb325c7f12a),
	helpstring("fades a rectangle on the screen")
]
interface IFadeTask : stdole.IUnknown
{
	HRESULT FadeRect([in] RECT *prc);
};

// CLSID_FadeTask
[uuid(7eb5fbe4-2100-49e6-8593-17e130122f91)] coclass FadeTask { interface IFadeTask; }

// CLSID_PostBootReminder
[uuid(7849596a-48ea-486e-8937-a2a3009f31a9)] coclass PostBootReminder { interface IShellReminderManager; }

[uuid(c461837f-ea59-494a-b7c6-cd040e37185e)] coclass AssocShellElement { interface IAssociationElement; }
[uuid(9016d0dd-7c41-46cc-a664-bf22f7cb186a)] coclass AssocProgidElement { interface IAssociationElement; }
[uuid(57aea081-5ee9-4c27-b218-c4b702964c54)] coclass AssocClsidElement { interface IAssociationElement; }
[uuid(a6c4baad-4af5-4191-8685-c2c8953a148c)] coclass AssocSystemElement { interface IAssociationElement; }
[uuid(0dc5fb21-b93d-4e3d-bb2f-ce4e36a70601)] coclass AssocPerceivedElement { interface IAssociationElement; }
[uuid(0c2bf91b-8746-4fb1-b4d7-7c03f890b168)] coclass AssocApplicationElement { interface IAssociationElement; }
[uuid(7566df7a-42cc-475d-a025-1205ddf4911f)] coclass AssocFolderElement { interface IAssociationElement; }
[uuid(0633b720-6926-404c-b6b3-923b1a501743)] coclass AssocStarElement { interface IAssociationElement; }
[uuid(3c81e7fa-1f3b-464a-a350-114a25beb2a2)] coclass AssocClientElement { interface IAssociationElement; }


//[
//	uuid(157193AA-D8B2-435f-A79C-B8F332357C6B),     // LIBID_SHAPPMGRP
//	helpstring("shappmgrp 1.0 Type Library"),
//	lcid(0x0000),
//	version(1.0)
//]
//library SHAPPMGRPLib
//{
//	importlib("stdole32.tlb");
//	importlib("stdole2.tlb");

	//
	// IADCCtl interface
	//
	[
		uuid(3964D99F-AC96-11D1-9851-00C04FD91972),     // IID_IADCCtl
		helpstring("Application Data Control Interface"),
		pointer_default(unique),
		oleautomation,
		object,
		dual
	]
	interface IADCCtl : IDispatch
	{
		// Properties

		[propput, id(DISPID_IADCCTL_DIRTY)]
		HRESULT Dirty([in] VARIANT_BOOL bDirty);
		[propget, id(DISPID_IADCCTL_DIRTY)]
		HRESULT Dirty([out, retval] VARIANT_BOOL* pbDirty);

		[propput, id(DISPID_IADCCTL_PUBCAT)]
		HRESULT Category([in] BSTR bstrCategory);
		[propget, id(DISPID_IADCCTL_PUBCAT)]
		HRESULT Category([out, retval] BSTR* pbstrCategory);

		[propput, id(DISPID_IADCCTL_SORT)]
		HRESULT Sort([in] BSTR bstrSortExpr);
		[propget, id(DISPID_IADCCTL_SORT)]
		HRESULT Sort([out, retval] BSTR* pbstrSortExpr);

		[propput, id(DISPID_IADCCTL_FORCEX86)]
		HRESULT Forcex86([in] VARIANT_BOOL bForce);
		[propget, id(DISPID_IADCCTL_FORCEX86)]
		HRESULT Forcex86([out, retval] VARIANT_BOOL* pbForce);

		[propget, id(DISPID_IADCCTL_SHOWPOSTSETUP)]
		HRESULT ShowPostSetup([out, retval] VARIANT_BOOL* pbShow);

		[propput, id(DISPID_IADCCTL_ONDOMAIN)]
		HRESULT OnDomain([in] VARIANT_BOOL bOnDomain);
		[propget, id(DISPID_IADCCTL_ONDOMAIN)]
		HRESULT OnDomain([out, retval] VARIANT_BOOL* pbOnDomain);

		[propget, id(DISPID_IADCCTL_DEFAULTCAT)]
		HRESULT DefaultCategory([out, retval] BSTR* pbstrCategory);

		[restricted, id(-3900)]
		HRESULT msDataSourceObject([in] BSTR qualifier,
			[out, retval] IUnknown** ppUnk);

		[restricted, id(-3901)]
		HRESULT addDataSourceListener([in] IUnknown* pEvent);

		// Methods
		//

		HRESULT Reset(BSTR bstrQualifier);

		HRESULT IsRestricted([in] BSTR bstrPolicy, [out, retval] VARIANT_BOOL* pbRestricted);

		// Valid Exec command strings:
		//
		//  "install"       - install app at nRecord
		//  "uninstall"     - uninstall app
		//  "modify"        - modify app
		//  "repair"        - repair app
		//  "upgrade"       - upgrade app
		//  "generic install" - invoke the 'install from floppy or CD' wizard
		//  "ntoptions"     - add/remove NT options
		//  "winupdate"     - update windows
		HRESULT Exec(BSTR bstrQualifier, [in] BSTR bstrCmd, [in] LONG nRecord);
	};

	[
		uuid(3964D9A0-AC96-11D1-9851-00C04FD91972),     // CLSID_ADCCtl
		helpstring("ADCCtl Class")
	]
	coclass ADCCtl
	{
		[default] interface IADCCtl;
	};

	//
	// IInstalledApp interface
	//
	[
		uuid(1BC752DF-9046-11D1-B8B3-006008059382),     // IID_IInstalledApp
		helpstring("Shell Installed Application Interface"),
		object
	]
	interface IInstalledApp : IShellApp
	{
		HRESULT Uninstall(HWND hwnd); // Same as Add/Remove maybe we should call it AddRemove.
		HRESULT Modify(HWND hwndParent);
		HRESULT Repair([in] BOOL bReinstall);
		HRESULT Upgrade(void);
	};


	//
	// IEnumInstalledApps interface
	//
	[
		uuid(1BC752E1-9046-11D1-B8B3-006008059382),     // IID_IEnumInstalledApps
		helpstring("Shell Installed Apps Enumeration Interface"),
		object,
	]

	interface IEnumInstalledApps : IUnknown
	{
		HRESULT Next([out] IInstalledApp** pia);
		HRESULT Reset(void);
	};

	[
		uuid(0B124F8F-91F0-11D1-B8B5-006008059382),     // CLSID_EnumInstalledApps
		helpstring("Shell Installed Applications Enumeration Object"),
	]
	coclass EnumInstalledApps
	{
		[default] interface IEnumInstalledApps;
	};


	//
	// IShellAppManager interface
	//
	[
		uuid(352EC2B8-8B9A-11D1-B8AE-006008059382),     // IID_IShellAppManager
		helpstring("Application Manager"),
		object,
	]

	interface IShellAppManager : IUnknown
	{
		// NOTE: These structures are very similar to CategoryInfo* in NT5
		typedef struct _ShellAppCategory {
			LPWSTR pszCategory;  // category description
			UINT  idCategory;   // category id for ShellAppManager
		} SHELLAPPCATEGORY, * PSHELLAPPCATEGORY;

		typedef struct _ShellAppCategoryList {
			UINT  cCategories;
			SHELLAPPCATEGORY* pCategory;
		} SHELLAPPCATEGORYLIST, * PSHELLAPPCATEGORYLIST;

		HRESULT GetNumberofInstalledApps(DWORD* pdwResult);
		HRESULT EnumInstalledApps(IEnumInstalledApps** peia);
		HRESULT GetPublishedAppCategories(PSHELLAPPCATEGORYLIST pCategoryList);
		HRESULT EnumPublishedApps(LPCWSTR pszCategory, IEnumPublishedApps** ppepa);
		HRESULT InstallFromFloppyOrCDROM(HWND hwndParent);
	}

	[
		uuid(352EC2B7-8B9A-11D1-B8AE-006008059382),     // CLSID_ShellAppManager
		helpstring("Shell Application Manager"),
	]

	coclass ShellAppManager
	{
		[default] interface IShellAppManager;
	};

//};
