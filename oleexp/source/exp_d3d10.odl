////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// D3D10 IDL
//
// Contains interface definitions for the D3D10 API.
//
// Copyright (C) Microsoft Corporation
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//import "oaidl.idl";
//import "ocidl.idl";
//import "dxgi.idl";
//import "d3dcommon.idl";
// Forward declarations:
interface ID3D10Device;

//
//    Copyright (C) Microsoft.  All rights reserved.
//
// NOTE: The following constants are generated from the d3d10 hardware spec.  Do not edit these values directly.
//cpp_quote("#ifndef _D3D10_CONSTANTS")
//cpp_quote("#define _D3D10_CONSTANTS")

//cpp_quote("#endif")
//cpp_quote("#include <winapifamily.h>")
//
//#pragma region Desktop Family
//cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
//
//
//cpp_quote("#if !defined( __d3d10_1_h__ ) && !(D3D10_HEADER_MINOR_VERSION >= 1)") //
//cpp_quote("#define D3D10_1_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT D3D10_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT")
//cpp_quote("#define D3D10_1_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT D3D10_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT")
//cpp_quote("#endif")
//
//const UINT _FACD3D10 = 0x879;
//const UINT _FACD3D10DEBUG = _FACD3D10 + 1;
//
//cpp_quote("#define MAKE_D3D10_HRESULT( code )  MAKE_HRESULT( 1, _FACD3D10, code )")
//cpp_quote("#define MAKE_D3D10_STATUS( code )    MAKE_HRESULT( 0, _FACD3D10, code )")
//cpp_quote("/* Direct3D errors are now found in winerror.h */")

typedef enum D3D10_INPUT_CLASSIFICATION
{
    D3D10_INPUT_PER_VERTEX_DATA = 0,
    D3D10_INPUT_PER_INSTANCE_DATA = 1
} D3D10_INPUT_CLASSIFICATION;


typedef struct D3D10_INPUT_ELEMENT_DESC
{
    LongPtr SemanticName;
    UINT SemanticIndex;
    DXGI_FORMAT Format;
    UINT InputSlot;
    UINT AlignedByteOffset;
    D3D10_INPUT_CLASSIFICATION InputSlotClass;
    UINT InstanceDataStepRate;
} D3D10_INPUT_ELEMENT_DESC;

// Keep FILL_MODE values in sync with earlier DX versions (HW consumes values directly).
typedef enum D3D10_FILL_MODE
{
    // 1 was POINT in D3D, unused in D3D10
    D3D10_FILL_WIREFRAME = 2,
    D3D10_FILL_SOLID = 3
} D3D10_FILL_MODE;

typedef [public] D3D_PRIMITIVE_TOPOLOGY D3D10_PRIMITIVE_TOPOLOGY;

typedef [public] D3D_PRIMITIVE D3D10_PRIMITIVE;

// Keep CULL_MODE values in sync with earlier DX versions (HW consumes values directly).
typedef enum D3D10_CULL_MODE
{
    D3D10_CULL_NONE = 1,
    D3D10_CULL_FRONT = 2,
    D3D10_CULL_BACK = 3
} D3D10_CULL_MODE;

typedef struct D3D10_SO_DECLARATION_ENTRY
{
    LongPtr SemanticName;
    UINT SemanticIndex;
    BYTE StartComponent;
    BYTE ComponentCount;
    BYTE OutputSlot;
} D3D10_SO_DECLARATION_ENTRY;

typedef struct D3D10_VIEWPORT
{
    INT   TopLeftX;
    INT   TopLeftY;
    UINT  Width;
    UINT  Height;
    FLOAT MinDepth;
    FLOAT MaxDepth;
} D3D10_VIEWPORT;

typedef enum D3D10_RESOURCE_DIMENSION
{
    D3D10_RESOURCE_DIMENSION_UNKNOWN = 0,
    D3D10_RESOURCE_DIMENSION_BUFFER = 1,
    D3D10_RESOURCE_DIMENSION_TEXTURE1D = 2,
    D3D10_RESOURCE_DIMENSION_TEXTURE2D = 3,
    D3D10_RESOURCE_DIMENSION_TEXTURE3D = 4,
} D3D10_RESOURCE_DIMENSION;

typedef D3D_SRV_DIMENSION D3D10_SRV_DIMENSION;

typedef enum D3D10_DSV_DIMENSION
{
    D3D10_DSV_DIMENSION_UNKNOWN = 0,
    D3D10_DSV_DIMENSION_TEXTURE1D = 1,
    D3D10_DSV_DIMENSION_TEXTURE1DARRAY = 2,
    D3D10_DSV_DIMENSION_TEXTURE2D = 3,
    D3D10_DSV_DIMENSION_TEXTURE2DARRAY = 4,
    D3D10_DSV_DIMENSION_TEXTURE2DMS = 5,
    D3D10_DSV_DIMENSION_TEXTURE2DMSARRAY = 6,
} D3D10_DSV_DIMENSION;

typedef enum D3D10_RTV_DIMENSION
{
    D3D10_RTV_DIMENSION_UNKNOWN = 0,
    D3D10_RTV_DIMENSION_BUFFER = 1,
    D3D10_RTV_DIMENSION_TEXTURE1D = 2,
    D3D10_RTV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D10_RTV_DIMENSION_TEXTURE2D = 4,
    D3D10_RTV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D10_RTV_DIMENSION_TEXTURE2DMS = 6,
    D3D10_RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
    D3D10_RTV_DIMENSION_TEXTURE3D = 8,
} D3D10_RTV_DIMENSION;

typedef enum D3D10_USAGE
{
    D3D10_USAGE_DEFAULT = 0,
    D3D10_USAGE_IMMUTABLE = 1,
    D3D10_USAGE_DYNAMIC = 2,
    D3D10_USAGE_STAGING = 3,
} D3D10_USAGE;

typedef enum D3D10_BIND_FLAG
{
    D3D10_BIND_VERTEX_BUFFER = 0x00000001,
    D3D10_BIND_INDEX_BUFFER = 0x00000002,
    D3D10_BIND_CONSTANT_BUFFER = 0x00000004,
    D3D10_BIND_SHADER_RESOURCE = 0x00000008,
    D3D10_BIND_STREAM_OUTPUT = 0x00000010,
    D3D10_BIND_RENDER_TARGET = 0x00000020,
    D3D10_BIND_DEPTH_STENCIL = 0x00000040,
} D3D10_BIND_FLAG;

typedef enum D3D10_CPU_ACCESS_FLAG
{
    D3D10_CPU_ACCESS_WRITE = 0x00010000,
    D3D10_CPU_ACCESS_READ = 0x00020000,
} D3D10_CPU_ACCESS_FLAG;

typedef enum D3D10_RESOURCE_MISC_FLAG
{
    D3D10_RESOURCE_MISC_GENERATE_MIPS = 0x00000001,
    D3D10_RESOURCE_MISC_SHARED = 0x00000002,
    D3D10_RESOURCE_MISC_TEXTURECUBE = 0x00000004,
    D3D10_RESOURCE_MISC_SHARED_KEYEDMUTEX = 0x00000010,
    D3D10_RESOURCE_MISC_GDI_COMPATIBLE = 0x00000020,
} D3D10_RESOURCE_MISC_FLAG;

typedef enum D3D10_MAP // for calling ID3D10Resource::Map()
{
    D3D10_MAP_READ = 1,
    D3D10_MAP_WRITE = 2,
    D3D10_MAP_READ_WRITE = 3,
    D3D10_MAP_WRITE_DISCARD = 4,
    D3D10_MAP_WRITE_NO_OVERWRITE = 5,
} D3D10_MAP;

typedef enum D3D10_MAP_FLAG
{
    D3D10_MAP_FLAG_DO_NOT_WAIT = 0x00100000,
} D3D10_MAP_FLAG;

typedef enum D3D10_RAISE_FLAG
{
    D3D10_RAISE_FLAG_DRIVER_INTERNAL_ERROR = 0x1,
} D3D10_RAISE_FLAG;

// Flags for ClearDepthStencil
typedef enum D3D10_CLEAR_FLAG
{
    D3D10_CLEAR_DEPTH = 0x01,
    D3D10_CLEAR_STENCIL = 0x02,
} D3D10_CLEAR_FLAG;

typedef RECT D3D10_RECT;

typedef struct D3D10_BOX
{
    UINT left;
    UINT top;
    UINT front;
    UINT right;
    UINT bottom;
    UINT back;
} D3D10_BOX;


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// DeviceChild
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

[uuid(9B7E4C00-342C-4106-A19F-4F2704F689F0), odl]
interface ID3D10DeviceChild
    : stdole.IUnknown
{
    void GetDevice([out] ID3D10Device** ppDevice);
    HRESULT GetPrivateData(
        [in] REFGUID guid,
        [in, out] UINT* pDataSize,
        [in, out] void* pData);
    HRESULT SetPrivateData(
        [in] REFGUID guid,
        [in] UINT DataSize,
        [in] void* pData);
    HRESULT SetPrivateDataInterface(
        [in] REFGUID guid,
        [in] IUnknown* pData);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Depth-Stencil State
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Keep COMPARISON_FUNC values in sync with earlier DX versions (HW consumes values directly).
typedef enum D3D10_COMPARISON_FUNC
{
    D3D10_COMPARISON_NEVER = 1,
    D3D10_COMPARISON_LESS = 2,
    D3D10_COMPARISON_EQUAL = 3,
    D3D10_COMPARISON_LESS_EQUAL = 4,
    D3D10_COMPARISON_GREATER = 5,
    D3D10_COMPARISON_NOT_EQUAL = 6,
    D3D10_COMPARISON_GREATER_EQUAL = 7,
    D3D10_COMPARISON_ALWAYS = 8
} D3D10_COMPARISON_FUNC;

typedef enum D3D10_DEPTH_WRITE_MASK
{
    D3D10_DEPTH_WRITE_MASK_ZERO = 0,
    D3D10_DEPTH_WRITE_MASK_ALL = 1
} D3D10_DEPTH_WRITE_MASK;

// Keep STENCILOP values in sync with earlier DX versions (HW consumes values directly).
typedef enum D3D10_STENCIL_OP
{
    D3D10_STENCIL_OP_KEEP = 1,
    D3D10_STENCIL_OP_ZERO = 2,
    D3D10_STENCIL_OP_REPLACE = 3,
    D3D10_STENCIL_OP_INCR_SAT = 4,
    D3D10_STENCIL_OP_DECR_SAT = 5,
    D3D10_STENCIL_OP_INVERT = 6,
    D3D10_STENCIL_OP_INCR = 7,
    D3D10_STENCIL_OP_DECR = 8
} D3D10_STENCIL_OP;

typedef struct D3D10_DEPTH_STENCILOP_DESC
{
    D3D10_STENCIL_OP StencilFailOp;
    D3D10_STENCIL_OP StencilDepthFailOp;
    D3D10_STENCIL_OP StencilPassOp;
    D3D10_COMPARISON_FUNC StencilFunc;
} D3D10_DEPTH_STENCILOP_DESC;

typedef struct D3D10_DEPTH_STENCIL_DESC
{
    BOOL DepthEnable;
    D3D10_DEPTH_WRITE_MASK DepthWriteMask;
    D3D10_COMPARISON_FUNC DepthFunc;
    BOOL StencilEnable;
    UINT8 StencilReadMask;
    UINT8 StencilWriteMask;
    D3D10_DEPTH_STENCILOP_DESC FrontFace;
    D3D10_DEPTH_STENCILOP_DESC BackFace;
} D3D10_DEPTH_STENCIL_DESC;

[uuid(2B4B1CC8-A4AD-41f8-8322-CA86FC3EC675), odl]
interface ID3D10DepthStencilState
    : ID3D10DeviceChild
{
    void GetDesc([out] D3D10_DEPTH_STENCIL_DESC* pDesc);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Blend State
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Keep BLEND values in sync with earlier DX versions (HW consumes values directly).
typedef enum D3D10_BLEND
{
    D3D10_BLEND_ZERO = 1,
    D3D10_BLEND_ONE = 2,
    D3D10_BLEND_SRC_COLOR = 3, // PS output oN.rgb (N is current RT being blended)
    D3D10_BLEND_INV_SRC_COLOR = 4, // 1.0f - PS output oN.rgb
    D3D10_BLEND_SRC_ALPHA = 5, // PS output oN.a
    D3D10_BLEND_INV_SRC_ALPHA = 6, // 1.0f - PS output oN.a
    D3D10_BLEND_DEST_ALPHA = 7, // RT(N).a (N is current RT being blended)
    D3D10_BLEND_INV_DEST_ALPHA = 8, // 1.0f - RT(N).a
    D3D10_BLEND_DEST_COLOR = 9, // RT(N).rgb
    D3D10_BLEND_INV_DEST_COLOR = 10,// 1.0f - RT(N).rgb
    D3D10_BLEND_SRC_ALPHA_SAT = 11,// (f,f,f,1), f = min(1 - RT(N).a, oN.a)
    // 12 reserved (was BOTHSRCALPHA)
    // 13 reserved (was BOTHSRCALPHA)
    D3D10_BLEND_BLEND_FACTOR = 14,
    D3D10_BLEND_INV_BLEND_FACTOR = 15,
    D3D10_BLEND_SRC1_COLOR = 16, // PS output o1.rgb
    D3D10_BLEND_INV_SRC1_COLOR = 17, // 1.0f - PS output o1.rgb
    D3D10_BLEND_SRC1_ALPHA = 18, // PS output o1.a
    D3D10_BLEND_INV_SRC1_ALPHA = 19, // 1.0f - PS output o1.a
} D3D10_BLEND;

// Keep BLENDOP values in sync with earlier DX versions (HW consumes values directly).
typedef enum D3D10_BLEND_OP
{
    D3D10_BLEND_OP_ADD = 1,
    D3D10_BLEND_OP_SUBTRACT = 2,
    D3D10_BLEND_OP_REV_SUBTRACT = 3,
    D3D10_BLEND_OP_MIN = 4, // min semantics are like min shader instruction
    D3D10_BLEND_OP_MAX = 5, // max semantics are like max shader instruction
} D3D10_BLEND_OP;

typedef enum D3D10_COLOR_WRITE_ENABLE
{
    D3D10_COLOR_WRITE_ENABLE_RED = 1,
    D3D10_COLOR_WRITE_ENABLE_GREEN = 2,
    D3D10_COLOR_WRITE_ENABLE_BLUE = 4,
    D3D10_COLOR_WRITE_ENABLE_ALPHA = 8,
    D3D10_COLOR_WRITE_ENABLE_ALL = 0xF, //(D3D10_COLOR_WRITE_ENABLE_RED | D3D10_COLOR_WRITE_ENABLE_GREEN |
    //D3D10_COLOR_WRITE_ENABLE_BLUE | D3D10_COLOR_WRITE_ENABLE_ALPHA),
} D3D10_COLOR_WRITE_ENABLE;

typedef struct D3D10_BLEND_DESC
{
    BOOL AlphaToCoverageEnable; // relevant to multisample antialiasing only
    BOOL BlendEnable[8];
    D3D10_BLEND SrcBlend; // same for all RenderTargets
    D3D10_BLEND DestBlend; // same for all RenderTargets
    D3D10_BLEND_OP BlendOp; // same for all RenderTargets
    D3D10_BLEND SrcBlendAlpha; // same for all RenderTargets
    D3D10_BLEND DestBlendAlpha; // same for all RenderTargets
    D3D10_BLEND_OP BlendOpAlpha; // same for all RenderTargets
    UINT8 RenderTargetWriteMask[8];
} D3D10_BLEND_DESC;

[uuid(EDAD8D19-8A35-4d6d-8566-2EA276CDE161), odl]
interface ID3D10BlendState
    : ID3D10DeviceChild
{
    void GetDesc([out] D3D10_BLEND_DESC* pDesc);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Rasterizer State
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct D3D10_RASTERIZER_DESC
{
    D3D10_FILL_MODE FillMode;
    D3D10_CULL_MODE CullMode;
    BOOL FrontCounterClockwise;
    INT DepthBias;
    FLOAT DepthBiasClamp;
    FLOAT SlopeScaledDepthBias;
    BOOL DepthClipEnable;
    BOOL ScissorEnable;
    BOOL MultisampleEnable;
    BOOL AntialiasedLineEnable;
} D3D10_RASTERIZER_DESC;

[uuid(A2A07292-89AF-4345-BE2E-C53D9FBB6E9F), odl]
interface ID3D10RasterizerState
    : ID3D10DeviceChild
{
    void GetDesc([out] D3D10_RASTERIZER_DESC* pDesc);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Resource
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//cpp_quote("#if !defined( D3D10_NO_HELPERS ) && defined( __cplusplus )")
//cpp_quote("inline UINT D3D10CalcSubresource( UINT MipSlice, UINT ArraySlice, UINT MipLevels )")
//cpp_quote("{ return MipSlice + ArraySlice * MipLevels; }")
//cpp_quote("#endif")

typedef struct D3D10_SUBRESOURCE_DATA
{
    LongPtr pSysMem;
    UINT SysMemPitch;
    UINT SysMemSlicePitch;
} D3D10_SUBRESOURCE_DATA;

[uuid(9B7E4C01-342C-4106-A19F-4F2704F689F0), odl]
interface ID3D10Resource
    : ID3D10DeviceChild
{
    void GetType([out] D3D10_RESOURCE_DIMENSION* rType);
    void SetEvictionPriority([in] UINT EvictionPriority);
    UINT GetEvictionPriority();
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Buffer
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct D3D10_BUFFER_DESC
{
    UINT ByteWidth;
    D3D10_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
} D3D10_BUFFER_DESC;

//cpp_quote("#if !defined( D3D10_NO_HELPERS ) && defined( __cplusplus )")
//cpp_quote("struct CD3D10_BUFFER_DESC : public D3D10_BUFFER_DESC")
//cpp_quote("{")
//cpp_quote("    CD3D10_BUFFER_DESC() = default;")
//cpp_quote("    explicit CD3D10_BUFFER_DESC( const D3D10_BUFFER_DESC& o ) :")
//cpp_quote("        D3D10_BUFFER_DESC( o )")
//cpp_quote("    {}")
//cpp_quote("    explicit CD3D10_BUFFER_DESC(")
//cpp_quote("        UINT byteWidth,")
//cpp_quote("        UINT bindFlags,")
//cpp_quote("        D3D10_USAGE usage = D3D10_USAGE_DEFAULT,")
//cpp_quote("        UINT cpuaccessFlags = 0,")
//cpp_quote("        UINT miscFlags = 0 )")
//cpp_quote("    {")
//cpp_quote("        ByteWidth = byteWidth;")
//cpp_quote("        Usage = usage;")
//cpp_quote("        BindFlags = bindFlags;")
//cpp_quote("        CPUAccessFlags = cpuaccessFlags ;")
//cpp_quote("        MiscFlags = miscFlags;")
//cpp_quote("    }")
//cpp_quote("    ~CD3D10_BUFFER_DESC() {}")
//cpp_quote("};")
//cpp_quote("#endif")

[uuid(9B7E4C02-342C-4106-A19F-4F2704F689F0), odl]
interface ID3D10Buffer
    : ID3D10Resource
{
    HRESULT Map(
        [in] D3D10_MAP MapType,
        [in] UINT MapFlags,
        [out] void** ppData);
    void Unmap();
    void GetDesc([out] D3D10_BUFFER_DESC* pDesc);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Texture1D
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct D3D10_TEXTURE1D_DESC
{
    UINT Width;
    UINT MipLevels;
    UINT ArraySize;
    DXGI_FORMAT Format;
    D3D10_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
} D3D10_TEXTURE1D_DESC;

//cpp_quote("#if !defined( D3D10_NO_HELPERS ) && defined( __cplusplus )")
//cpp_quote("struct CD3D10_TEXTURE1D_DESC : public D3D10_TEXTURE1D_DESC")
//cpp_quote("{")
//cpp_quote("    CD3D10_TEXTURE1D_DESC() = default;")
//cpp_quote("    explicit CD3D10_TEXTURE1D_DESC( const D3D10_TEXTURE1D_DESC& o ) :")
//cpp_quote("        D3D10_TEXTURE1D_DESC( o )")
//cpp_quote("    {}")
//cpp_quote("    explicit CD3D10_TEXTURE1D_DESC(")
//cpp_quote("        DXGI_FORMAT format,")
//cpp_quote("        UINT width,")
//cpp_quote("        UINT arraySize = 1,")
//cpp_quote("        UINT mipLevels = 0,")
//cpp_quote("        UINT bindFlags = D3D10_BIND_SHADER_RESOURCE,")
//cpp_quote("        D3D10_USAGE usage = D3D10_USAGE_DEFAULT,")
//cpp_quote("        UINT cpuaccessFlags= 0,")
//cpp_quote("        UINT miscFlags = 0 )")
//cpp_quote("    {")
//cpp_quote("        Width = width;")
//cpp_quote("        MipLevels = mipLevels;")
//cpp_quote("        ArraySize = arraySize;")
//cpp_quote("        Format = format;")
//cpp_quote("        Usage = usage;")
//cpp_quote("        BindFlags = bindFlags;")
//cpp_quote("        CPUAccessFlags = cpuaccessFlags;")
//cpp_quote("        MiscFlags = miscFlags;")
//cpp_quote("    }")
//cpp_quote("    ~CD3D10_TEXTURE1D_DESC() {}")
//cpp_quote("};")
//cpp_quote("#endif")

[uuid(9B7E4C03-342C-4106-A19F-4F2704F689F0), odl]
interface ID3D10Texture1D
    : ID3D10Resource
{
    HRESULT Map(
        [in] UINT Subresource,
        [in] D3D10_MAP MapType,
        [in] UINT MapFlags,
        [out] void** ppData);
    void Unmap([in] UINT Subresource);
    void GetDesc([out] D3D10_TEXTURE1D_DESC* pDesc);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Texture2D
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct D3D10_TEXTURE2D_DESC
{
    UINT Width;
    UINT Height;
    UINT MipLevels;
    UINT ArraySize;
    DXGI_FORMAT Format;
    DXGI_SAMPLE_DESC SampleDesc;
    D3D10_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
} D3D10_TEXTURE2D_DESC;

//cpp_quote("#if !defined( D3D10_NO_HELPERS ) && defined( __cplusplus )")
//cpp_quote("struct CD3D10_TEXTURE2D_DESC : public D3D10_TEXTURE2D_DESC")
//cpp_quote("{")
//cpp_quote("    CD3D10_TEXTURE2D_DESC() = default;")
//cpp_quote("    explicit CD3D10_TEXTURE2D_DESC( const D3D10_TEXTURE2D_DESC& o ) :")
//cpp_quote("        D3D10_TEXTURE2D_DESC( o )")
//cpp_quote("    {}")
//cpp_quote("    explicit CD3D10_TEXTURE2D_DESC(")
//cpp_quote("        DXGI_FORMAT format,")
//cpp_quote("        UINT width,")
//cpp_quote("        UINT height,")
//cpp_quote("        UINT arraySize = 1,")
//cpp_quote("        UINT mipLevels = 0,")
//cpp_quote("        UINT bindFlags = D3D10_BIND_SHADER_RESOURCE,")
//cpp_quote("        D3D10_USAGE usage = D3D10_USAGE_DEFAULT,")
//cpp_quote("        UINT cpuaccessFlags = 0,")
//cpp_quote("        UINT sampleCount = 1,")
//cpp_quote("        UINT sampleQuality = 0,")
//cpp_quote("        UINT miscFlags = 0 )")
//cpp_quote("    {")
//cpp_quote("        Width = width;")
//cpp_quote("        Height = height;")
//cpp_quote("        MipLevels = mipLevels;")
//cpp_quote("        ArraySize = arraySize;")
//cpp_quote("        Format = format;")
//cpp_quote("        SampleDesc.Count = sampleCount;")
//cpp_quote("        SampleDesc.Quality = sampleQuality;")
//cpp_quote("        Usage = usage;")
//cpp_quote("        BindFlags = bindFlags;")
//cpp_quote("        CPUAccessFlags = cpuaccessFlags;")
//cpp_quote("        MiscFlags = miscFlags;")
//cpp_quote("    }")
//cpp_quote("    ~CD3D10_TEXTURE2D_DESC() {}")
//cpp_quote("};")
//cpp_quote("#endif")

typedef struct D3D10_MAPPED_TEXTURE2D
{
    LongPtr pData;
    UINT RowPitch;
} D3D10_MAPPED_TEXTURE2D;

[uuid(9B7E4C04-342C-4106-A19F-4F2704F689F0), odl]
interface ID3D10Texture2D
    : ID3D10Resource
{
    HRESULT Map(
        [in] UINT Subresource,
        [in] D3D10_MAP MapType,
        [in] UINT MapFlags,
        [out] D3D10_MAPPED_TEXTURE2D* pMappedTex2D);
    void Unmap([in] UINT Subresource);
    void GetDesc([out] D3D10_TEXTURE2D_DESC* pDesc);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Texture3D
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct D3D10_TEXTURE3D_DESC
{
    UINT Width;
    UINT Height;
    UINT Depth;
    UINT MipLevels;
    DXGI_FORMAT Format;
    D3D10_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
} D3D10_TEXTURE3D_DESC;

//cpp_quote("#if !defined( D3D10_NO_HELPERS ) && defined( __cplusplus )")
//cpp_quote("struct CD3D10_TEXTURE3D_DESC : public D3D10_TEXTURE3D_DESC")
//cpp_quote("{")
//cpp_quote("    CD3D10_TEXTURE3D_DESC() = default;")
//cpp_quote("    explicit CD3D10_TEXTURE3D_DESC( const D3D10_TEXTURE3D_DESC& o ) :")
//cpp_quote("        D3D10_TEXTURE3D_DESC( o )")
//cpp_quote("    {}")
//cpp_quote("    explicit CD3D10_TEXTURE3D_DESC(")
//cpp_quote("        DXGI_FORMAT format,")
//cpp_quote("        UINT width,")
//cpp_quote("        UINT height,")
//cpp_quote("        UINT depth,")
//cpp_quote("        UINT mipLevels = 0,")
//cpp_quote("        UINT bindFlags = D3D10_BIND_SHADER_RESOURCE,")
//cpp_quote("        D3D10_USAGE usage = D3D10_USAGE_DEFAULT,")
//cpp_quote("        UINT cpuaccessFlags = 0,")
//cpp_quote("        UINT miscFlags = 0 )")
//cpp_quote("    {")
//cpp_quote("        Width = width;")
//cpp_quote("        Height = height;")
//cpp_quote("        Depth = depth;")
//cpp_quote("        MipLevels = mipLevels;")
//cpp_quote("        Format = format;")
//cpp_quote("        Usage = usage;")
//cpp_quote("        BindFlags = bindFlags;")
//cpp_quote("        CPUAccessFlags = cpuaccessFlags;")
//cpp_quote("        MiscFlags = miscFlags;")
//cpp_quote("    }")
//cpp_quote("    ~CD3D10_TEXTURE3D_DESC() {}")
//cpp_quote("};")
//cpp_quote("#endif")

typedef struct D3D10_MAPPED_TEXTURE3D
{
    LongPtr pData;
    UINT RowPitch;
    UINT DepthPitch;
} D3D10_MAPPED_TEXTURE3D;

[uuid(9B7E4C05-342C-4106-A19F-4F2704F689F0), odl]
interface ID3D10Texture3D
    : ID3D10Resource
{
    HRESULT Map(
        [in] UINT Subresource,
        [in] D3D10_MAP MapType,
        [in] UINT MapFlags,
        [out] D3D10_MAPPED_TEXTURE3D* pMappedTex3D);
    void Unmap([in] UINT Subresource);
    void GetDesc([out] D3D10_TEXTURE3D_DESC* pDesc);
};

/* TextureCube Face identifiers */
typedef enum D3D10_TEXTURECUBE_FACE
{
    D3D10_TEXTURECUBE_FACE_POSITIVE_X = 0,
    D3D10_TEXTURECUBE_FACE_NEGATIVE_X = 1,
    D3D10_TEXTURECUBE_FACE_POSITIVE_Y = 2,
    D3D10_TEXTURECUBE_FACE_NEGATIVE_Y = 3,
    D3D10_TEXTURECUBE_FACE_POSITIVE_Z = 4,
    D3D10_TEXTURECUBE_FACE_NEGATIVE_Z = 5
} D3D10_TEXTURECUBE_FACE;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// View
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
[uuid(C902B03F-60A7-49BA-9936-2A3AB37A7E33), odl]
interface ID3D10View
    : ID3D10DeviceChild
{
    void GetResource([out] ID3D10Resource** ppResource);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ShaderResourceView
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct D3D10_BUFFER_SRV
{
    //union
    //{
    //    UINT FirstElement;
    //    UINT ElementOffset;
    //};
    //union
    //{
    //    UINT NumElements;
    //    UINT ElementWidth;
    //};
    UINT FirstOrNumElements;
    UINT ElementOffsetOrWidth;
} D3D10_BUFFER_SRV;

typedef struct D3D10_TEX1D_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
} D3D10_TEX1D_SRV;

typedef struct D3D10_TEX1D_ARRAY_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT FirstArraySlice;
    UINT ArraySize;
} D3D10_TEX1D_ARRAY_SRV;

typedef struct D3D10_TEX2D_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
} D3D10_TEX2D_SRV;

typedef struct D3D10_TEX2D_ARRAY_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT FirstArraySlice;
    UINT ArraySize;
} D3D10_TEX2D_ARRAY_SRV;

typedef struct D3D10_TEX3D_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
} D3D10_TEX3D_SRV;

typedef struct D3D10_TEXCUBE_SRV
{
    UINT MostDetailedMip;
    UINT MipLevels;
} D3D10_TEXCUBE_SRV;

typedef struct D3D10_TEX2DMS_SRV
{
    // don't need to define anything specific for this view dimension
    UINT UnusedField_NothingToDefine;
} D3D10_TEX2DMS_SRV;

typedef struct D3D10_TEX2DMS_ARRAY_SRV
{
    UINT FirstArraySlice;
    UINT ArraySize;
} D3D10_TEX2DMS_ARRAY_SRV;

typedef struct D3D10_SHADER_RESOURCE_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D10_SRV_DIMENSION ViewDimension;

    //union
    //{
    //    D3D10_BUFFER_SRV Buffer;
    //    D3D10_TEX1D_SRV Texture1D;
    //    D3D10_TEX1D_ARRAY_SRV Texture1DArray;
    //    D3D10_TEX2D_SRV Texture2D;
    //    D3D10_TEX2D_ARRAY_SRV Texture2DArray;
    //    D3D10_TEX2DMS_SRV Texture2DMS;
    //    D3D10_TEX2DMS_ARRAY_SRV Texture2DMSArray;
    //    D3D10_TEX3D_SRV Texture3D;
    //    D3D10_TEXCUBE_SRV TextureCube;
    //};
    BYTE u[16];
} D3D10_SHADER_RESOURCE_VIEW_DESC;

[uuid(9B7E4C07-342C-4106-A19F-4F2704F689F0), odl]
interface ID3D10ShaderResourceView
    : ID3D10View
{
    void GetDesc([out] D3D10_SHADER_RESOURCE_VIEW_DESC* pDesc);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// RenderTargetView
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct D3D10_BUFFER_RTV
{
/*    union
    {
        UINT FirstElement;
        UINT ElementOffset;
    };
    union
    {
        UINT NumElements;
        UINT ElementWidth;
    };*/
    UINT FirstOrNumElements;
    UINT ElementOffsetOrWidth;
} D3D10_BUFFER_RTV;

typedef struct D3D10_TEX1D_RTV
{
    UINT MipSlice;
} D3D10_TEX1D_RTV;

typedef struct D3D10_TEX1D_ARRAY_RTV
{
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
} D3D10_TEX1D_ARRAY_RTV;

typedef struct D3D10_TEX2D_RTV
{
    UINT MipSlice;
} D3D10_TEX2D_RTV;

typedef struct D3D10_TEX2DMS_RTV
{
    UINT UnusedField_NothingToDefine;
} D3D10_TEX2DMS_RTV;

typedef struct D3D10_TEX2D_ARRAY_RTV
{
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
} D3D10_TEX2D_ARRAY_RTV;

typedef struct D3D10_TEX2DMS_ARRAY_RTV
{
    UINT FirstArraySlice;
    UINT ArraySize;
} D3D10_TEX2DMS_ARRAY_RTV;

typedef struct D3D10_TEX3D_RTV
{
    UINT MipSlice;
    UINT FirstWSlice;
    UINT WSize;
} D3D10_TEX3D_RTV;

typedef struct D3D10_RENDER_TARGET_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D10_RTV_DIMENSION ViewDimension;

    //union
    //{
    //    D3D10_BUFFER_RTV Buffer;
    //    D3D10_TEX1D_RTV Texture1D;
    //    D3D10_TEX1D_ARRAY_RTV Texture1DArray;
    //    D3D10_TEX2D_RTV Texture2D;
    //    D3D10_TEX2D_ARRAY_RTV Texture2DArray;
    //    D3D10_TEX2DMS_RTV Texture2DMS;
    //    D3D10_TEX2DMS_ARRAY_RTV Texture2DMSArray;
    //    D3D10_TEX3D_RTV Texture3D;
    //};
    BYTE u[12];
} D3D10_RENDER_TARGET_VIEW_DESC;

[uuid(9B7E4C08-342C-4106-A19F-4F2704F689F0), odl]
interface ID3D10RenderTargetView
    : ID3D10View
{
    void GetDesc([out] D3D10_RENDER_TARGET_VIEW_DESC* pDesc);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// DepthStencilView
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct D3D10_TEX1D_DSV
{
    UINT MipSlice;
} D3D10_TEX1D_DSV;

typedef struct D3D10_TEX1D_ARRAY_DSV
{
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
} D3D10_TEX1D_ARRAY_DSV;

typedef struct D3D10_TEX2D_DSV
{
    UINT MipSlice;
} D3D10_TEX2D_DSV;

typedef struct D3D10_TEX2D_ARRAY_DSV
{
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
} D3D10_TEX2D_ARRAY_DSV;

typedef struct D3D10_TEX2DMS_DSV
{
    UINT UnusedField_NothingToDefine;
} D3D10_TEX2DMS_DSV;

typedef struct D3D10_TEX2DMS_ARRAY_DSV
{
    UINT FirstArraySlice;
    UINT ArraySize;
} D3D10_TEX2DMS_ARRAY_DSV;

typedef struct D3D10_DEPTH_STENCIL_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D10_DSV_DIMENSION ViewDimension;

    //union
    //{
    //    D3D10_TEX1D_DSV Texture1D;
    //    D3D10_TEX1D_ARRAY_DSV Texture1DArray;
    //    D3D10_TEX2D_DSV Texture2D;
    //    D3D10_TEX2D_ARRAY_DSV Texture2DArray;
    //    D3D10_TEX2DMS_DSV Texture2DMS;
    //    D3D10_TEX2DMS_ARRAY_DSV Texture2DMSArray;
    //};
    BYTE u[12];
} D3D10_DEPTH_STENCIL_VIEW_DESC;

[uuid(9B7E4C09-342C-4106-A19F-4F2704F689F0), odl]
interface ID3D10DepthStencilView
    : ID3D10View
{
    void GetDesc([out] D3D10_DEPTH_STENCIL_VIEW_DESC* pDesc);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Vertex Shader
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
[uuid(9B7E4C0A-342C-4106-A19F-4F2704F689F0), odl]
interface ID3D10VertexShader
    : ID3D10DeviceChild
{
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Geometry Shader
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
[uuid(6316BE88-54CD-4040-AB44-20461BC81F68), odl]
interface ID3D10GeometryShader
    : ID3D10DeviceChild
{
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Pixel Shader
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
[uuid(4968B601-9D00-4cde-8346-8E7F675819B6), odl]
interface ID3D10PixelShader
    : ID3D10DeviceChild
{
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// InputLayout
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
[uuid(9B7E4C0B-342C-4106-A19F-4F2704F689F0), odl]
interface ID3D10InputLayout
    : ID3D10DeviceChild
{
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Sampler
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef enum D3D10_FILTER
{
    // Bits used in defining enumeration of valid filters:
    // bits [1:0] - mip: 0 == point, 1 == linear, 2,3 unused
    // bits [3:2] - mag: 0 == point, 1 == linear, 2,3 unused
    // bits [5:4] - min: 0 == point, 1 == linear, 2,3 unused
    // bit  [6]   - aniso
    // bit  [7]   - comparison
    // bit  [31]  - mono 1-bit (narrow-purpose filter)

    D3D10_FILTER_MIN_MAG_MIP_POINT = 0x00000000,
    D3D10_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x00000001,
    D3D10_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x00000004,
    D3D10_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x00000005,
    D3D10_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x00000010,
    D3D10_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x00000011,
    D3D10_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x00000014,
    D3D10_FILTER_MIN_MAG_MIP_LINEAR = 0x00000015,
    D3D10_FILTER_ANISOTROPIC = 0x00000055,
    D3D10_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x00000080,
    D3D10_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x00000081,
    D3D10_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x00000084,
    D3D10_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x00000085,
    D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x00000090,
    D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x00000091,
    D3D10_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x00000094,
    D3D10_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x00000095,
    D3D10_FILTER_COMPARISON_ANISOTROPIC = 0x000000d5,

    D3D10_FILTER_TEXT_1BIT = 0x80000000 // Only filter for R1_UNORM format

} D3D10_FILTER;

typedef enum D3D10_FILTER_TYPE
{
    D3D10_FILTER_TYPE_POINT = 0,
    D3D10_FILTER_TYPE_LINEAR = 1,
} D3D10_FILTER_TYPE;

//// encode enum entry for most filters except anisotropic filtering
//cpp_quote("#define D3D10_ENCODE_BASIC_FILTER( min, mag, mip, bComparison )                                           \\")
//cpp_quote("                                   ( ( D3D10_FILTER ) (                                                   \\")
//cpp_quote("                                   ( ( bComparison ) ? D3D10_COMPARISON_FILTERING_BIT : 0 ) |             \\")
//cpp_quote("                                   ( ( ( min ) & D3D10_FILTER_TYPE_MASK ) << D3D10_MIN_FILTER_SHIFT ) |   \\")
//cpp_quote("                                   ( ( ( mag ) & D3D10_FILTER_TYPE_MASK ) << D3D10_MAG_FILTER_SHIFT ) |   \\")
//cpp_quote("                                   ( ( ( mip ) & D3D10_FILTER_TYPE_MASK ) << D3D10_MIP_FILTER_SHIFT ) ) )   ")
//
//// encode enum entry for anisotropic filtering (with or without comparison filtering)
//cpp_quote("#define D3D10_ENCODE_ANISOTROPIC_FILTER( bComparison )                                                \\")
//cpp_quote("                                         ( ( D3D10_FILTER ) (                                         \\")
//cpp_quote("                                         D3D10_ANISOTROPIC_FILTERING_BIT |                            \\")
//cpp_quote("                                         D3D10_ENCODE_BASIC_FILTER( D3D10_FILTER_TYPE_LINEAR,         \\")
//cpp_quote("                                                                    D3D10_FILTER_TYPE_LINEAR,         \\")
//cpp_quote("                                                                    D3D10_FILTER_TYPE_LINEAR,         \\")
//cpp_quote("                                                                    bComparison ) ) )                   ")
//
//cpp_quote("#define D3D10_DECODE_MIN_FILTER( d3d10Filter )                                                              \\")
//cpp_quote("                                 ( ( D3D10_FILTER_TYPE )                                                    \\")
//cpp_quote("                                 ( ( ( d3d10Filter ) >> D3D10_MIN_FILTER_SHIFT ) & D3D10_FILTER_TYPE_MASK ) ) ")
//
//cpp_quote("#define D3D10_DECODE_MAG_FILTER( d3d10Filter )                                                              \\")
//cpp_quote("                                 ( ( D3D10_FILTER_TYPE )                                                    \\")
//cpp_quote("                                 ( ( ( d3d10Filter ) >> D3D10_MAG_FILTER_SHIFT ) & D3D10_FILTER_TYPE_MASK ) ) ")
//
//cpp_quote("#define D3D10_DECODE_MIP_FILTER( d3d10Filter )                                                              \\")
//cpp_quote("                                 ( ( D3D10_FILTER_TYPE )                                                    \\")
//cpp_quote("                                 ( ( ( d3d10Filter ) >> D3D10_MIP_FILTER_SHIFT ) & D3D10_FILTER_TYPE_MASK ) ) ")
//
//cpp_quote("#define D3D10_DECODE_IS_COMPARISON_FILTER( d3d10Filter )                                                    \\")
//cpp_quote("                                 ( ( d3d10Filter ) & D3D10_COMPARISON_FILTERING_BIT )                         ")
//
//cpp_quote("#define D3D10_DECODE_IS_ANISOTROPIC_FILTER( d3d10Filter )                                               \\")
//cpp_quote("                            ( ( ( d3d10Filter ) & D3D10_ANISOTROPIC_FILTERING_BIT ) &&                  \\")
//cpp_quote("                            ( D3D10_FILTER_TYPE_LINEAR == D3D10_DECODE_MIN_FILTER( d3d10Filter ) ) &&   \\")
//cpp_quote("                            ( D3D10_FILTER_TYPE_LINEAR == D3D10_DECODE_MAG_FILTER( d3d10Filter ) ) &&   \\")
//cpp_quote("                            ( D3D10_FILTER_TYPE_LINEAR == D3D10_DECODE_MIP_FILTER( d3d10Filter ) ) )      ")
//
//cpp_quote("#define D3D10_DECODE_IS_TEXT_1BIT_FILTER( d3d10Filter )                                             \\")
//cpp_quote("                                 ( ( d3d10Filter ) == D3D10_TEXT_1BIT_BIT )                           ")

typedef enum D3D10_TEXTURE_ADDRESS_MODE
{
    D3D10_TEXTURE_ADDRESS_WRAP = 1,
    D3D10_TEXTURE_ADDRESS_MIRROR = 2,
    D3D10_TEXTURE_ADDRESS_CLAMP = 3,
    D3D10_TEXTURE_ADDRESS_BORDER = 4,
    D3D10_TEXTURE_ADDRESS_MIRROR_ONCE = 5
} D3D10_TEXTURE_ADDRESS_MODE;

typedef struct D3D10_SAMPLER_DESC
{
    D3D10_FILTER Filter;
    D3D10_TEXTURE_ADDRESS_MODE AddressU;
    D3D10_TEXTURE_ADDRESS_MODE AddressV;
    D3D10_TEXTURE_ADDRESS_MODE AddressW;
    FLOAT MipLODBias;
    UINT MaxAnisotropy;
    D3D10_COMPARISON_FUNC ComparisonFunc;
    FLOAT BorderColor[4]; // RGBA
    FLOAT MinLOD;
    FLOAT MaxLOD;
} D3D10_SAMPLER_DESC;

[uuid(9B7E4C0C-342C-4106-A19F-4F2704F689F0), odl]
interface ID3D10SamplerState
    : ID3D10DeviceChild
{
    void GetDesc([out] D3D10_SAMPLER_DESC* pDesc);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Format Support Flags for CheckFormatSupport API
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef enum D3D10_FORMAT_SUPPORT
{
    D3D10_FORMAT_SUPPORT_BUFFER = 0x00000001,
    D3D10_FORMAT_SUPPORT_IA_VERTEX_BUFFER = 0x00000002,
    D3D10_FORMAT_SUPPORT_IA_INDEX_BUFFER = 0x00000004,
    D3D10_FORMAT_SUPPORT_SO_BUFFER = 0x00000008,
    D3D10_FORMAT_SUPPORT_TEXTURE1D = 0x00000010,
    D3D10_FORMAT_SUPPORT_TEXTURE2D = 0x00000020,
    D3D10_FORMAT_SUPPORT_TEXTURE3D = 0x00000040,
    D3D10_FORMAT_SUPPORT_TEXTURECUBE = 0x00000080,
    D3D10_FORMAT_SUPPORT_SHADER_LOAD = 0x00000100,
    D3D10_FORMAT_SUPPORT_SHADER_SAMPLE = 0x00000200,
    D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON = 0x00000400,
    D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT = 0x00000800,
    D3D10_FORMAT_SUPPORT_MIP = 0x00001000,
    D3D10_FORMAT_SUPPORT_MIP_AUTOGEN = 0x00002000,
    D3D10_FORMAT_SUPPORT_RENDER_TARGET = 0x00004000,
    D3D10_FORMAT_SUPPORT_BLENDABLE = 0x00008000,
    D3D10_FORMAT_SUPPORT_DEPTH_STENCIL = 0x00010000,
    D3D10_FORMAT_SUPPORT_CPU_LOCKABLE = 0x00020000,
    D3D10_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE = 0x00040000,
    D3D10_FORMAT_SUPPORT_DISPLAY = 0x00080000,
    D3D10_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT = 0x00100000,
    D3D10_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET = 0x00200000,
    D3D10_FORMAT_SUPPORT_MULTISAMPLE_LOAD = 0x00400000,
    D3D10_FORMAT_SUPPORT_SHADER_GATHER = 0x00800000,
    D3D10_FORMAT_SUPPORT_BACK_BUFFER_CAST = 0x01000000,
} D3D10_FORMAT_SUPPORT;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Query
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
[uuid(9B7E4C0D-342C-4106-A19F-4F2704F689F0), odl]
interface ID3D10Asynchronous
    : ID3D10DeviceChild
{
    void Begin();
    void End();
    HRESULT GetData(
        [in, out] void* pData,
        [in] UINT DataSize,
        [in] UINT GetDataFlags);
    UINT GetDataSize();
};

typedef enum D3D10_ASYNC_GETDATA_FLAG
{
    D3D10_ASYNC_GETDATA_DONOTFLUSH = 0x1,
} D3D10_ASYNC_GETDATA_FLAG;


typedef enum D3D10_QUERY
{
    D3D10_QUERY_EVENT = 0,
    D3D10_QUERY_OCCLUSION,
    D3D10_QUERY_TIMESTAMP,
    D3D10_QUERY_TIMESTAMP_DISJOINT,
    D3D10_QUERY_PIPELINE_STATISTICS,
    D3D10_QUERY_OCCLUSION_PREDICATE,
    D3D10_QUERY_SO_STATISTICS,
    D3D10_QUERY_SO_OVERFLOW_PREDICATE,
} D3D10_QUERY;

typedef enum D3D10_QUERY_MISC_FLAG
{
    D3D10_QUERY_MISC_PREDICATEHINT = 0x1,
} D3D10_QUERY_MISC_FLAG;

typedef struct D3D10_QUERY_DESC
{
    D3D10_QUERY Query;
    UINT MiscFlags;
} D3D10_QUERY_DESC;

[uuid(9B7E4C0E-342C-4106-A19F-4F2704F689F0), odl]
interface ID3D10Query
    : ID3D10Asynchronous
{
    void GetDesc([out] D3D10_QUERY_DESC* pDesc);
};

[uuid(9B7E4C10-342C-4106-A19F-4F2704F689F0), odl]
interface ID3D10Predicate
    : ID3D10Query
{
};

typedef struct D3D10_QUERY_DATA_TIMESTAMP_DISJOINT
{
    UINT64 Frequency;
    BOOL Disjoint;
} D3D10_QUERY_DATA_TIMESTAMP_DISJOINT;

typedef struct D3D10_QUERY_DATA_PIPELINE_STATISTICS
{
    UINT64 IAVertices;
    UINT64 IAPrimitives;
    UINT64 VSInvocations;
    UINT64 GSInvocations;
    UINT64 GSPrimitives;
    UINT64 CInvocations;
    UINT64 CPrimitives;
    UINT64 PSInvocations;
} D3D10_QUERY_DATA_PIPELINE_STATISTICS;

typedef struct D3D10_QUERY_DATA_SO_STATISTICS
{
    UINT64 NumPrimitivesWritten;
    UINT64 PrimitivesStorageNeeded;
} D3D10_QUERY_DATA_SO_STATISTICS;

typedef enum D3D10_COUNTER
{
    D3D10_COUNTER_GPU_IDLE = 0,
    D3D10_COUNTER_VERTEX_PROCESSING,
    D3D10_COUNTER_GEOMETRY_PROCESSING,
    D3D10_COUNTER_PIXEL_PROCESSING,
    D3D10_COUNTER_OTHER_GPU_PROCESSING,
    D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION,
    D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION,
    D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION,
    D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION,
    D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION,
    D3D10_COUNTER_VS_MEMORY_LIMITED,
    D3D10_COUNTER_VS_COMPUTATION_LIMITED,
    D3D10_COUNTER_GS_MEMORY_LIMITED,
    D3D10_COUNTER_GS_COMPUTATION_LIMITED,
    D3D10_COUNTER_PS_MEMORY_LIMITED,
    D3D10_COUNTER_PS_COMPUTATION_LIMITED,
    D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE,
    D3D10_COUNTER_TEXTURE_CACHE_HIT_RATE,

    D3D10_COUNTER_DEVICE_DEPENDENT_0 = 0x40000000, // DO NOT define any more D3D10_COUNTER values after this.
} D3D10_COUNTER;

typedef enum D3D10_COUNTER_TYPE
{
    D3D10_COUNTER_TYPE_FLOAT32,
    D3D10_COUNTER_TYPE_UINT16,
    D3D10_COUNTER_TYPE_UINT32,
    D3D10_COUNTER_TYPE_UINT64,
} D3D10_COUNTER_TYPE;

typedef struct D3D10_COUNTER_DESC
{
    D3D10_COUNTER Counter;
    UINT MiscFlags;
} D3D10_COUNTER_DESC;


typedef struct D3D10_COUNTER_INFO
{
    D3D10_COUNTER LastDeviceDependentCounter;
    UINT NumSimultaneousCounters;
    UINT8 NumDetectableParallelUnits;
} D3D10_COUNTER_INFO;

[uuid(9B7E4C11-342C-4106-A19F-4F2704F689F0), odl]
interface ID3D10Counter
    : ID3D10Asynchronous
{
    void GetDesc([out] D3D10_COUNTER_DESC* pDesc);
};


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Device
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

[uuid(9B7E4C0F-342C-4106-A19F-4F2704F689F0), odl]
interface ID3D10Device
    : stdole.IUnknown
{
    // !!! Order of functions is in decreasing order of priority ( as far as performance is concerned ) !!!
    // !!! BEGIN HIGH-FREQUENCY !!!
    void VSSetConstantBuffers(
        [in] UINT StartSlot,
        [in] UINT NumBuffers,
        [in] ID3D10Buffer* * ppConstantBuffers);
    void PSSetShaderResources(
        [in] UINT StartSlot,
        [in] UINT NumViews,
        [in] ID3D10ShaderResourceView* * ppShaderResourceViews);
    void PSSetShader([in] ID3D10PixelShader* pPixelShader);
    void PSSetSamplers(
        [in] UINT StartSlot,
        [in] UINT NumSamplers,
        [in] ID3D10SamplerState* * ppSamplers);
    void VSSetShader([in] ID3D10VertexShader* pVertexShader);
    void DrawIndexed(
        [in] UINT IndexCount,
        [in] UINT StartIndexLocation,
        [in] INT BaseVertexLocation);
    void Draw(
        [in] UINT VertexCount,
        [in] UINT StartVertexLocation);
    /* CB Lock/ Dynamic Lock & Unlock */
    void PSSetConstantBuffers(
        [in] UINT StartSlot,
        [in] UINT NumBuffers,
        [in] ID3D10Buffer* * ppConstantBuffers);
    void IASetInputLayout([in] ID3D10InputLayout* pInputLayout);
    void IASetVertexBuffers(
        [in] UINT StartSlot,
        [in] UINT NumBuffers,
        [in] ID3D10Buffer* * ppVertexBuffers,
        [in] UINT* pStrides,
        [in] UINT* pOffsets);
    void IASetIndexBuffer(
        [in] ID3D10Buffer* pIndexBuffer,
        [in] DXGI_FORMAT  Format,
        [in] UINT Offset);
    // !!! END HIGH-FREQUENCY !!!

    // !!! Order of functions is in decreasing order of priority ( as far as performance is concerned ) !!!
    // !!! BEGIN MIDDLE-FREQUENCY !!!
    void DrawIndexedInstanced(
        [in] UINT IndexCountPerInstance,
        [in] UINT InstanceCount,
        [in] UINT StartIndexLocation,
        [in] INT BaseVertexLocation,
        [in] UINT StartInstanceLocation);
    void DrawInstanced(
        [in] UINT VertexCountPerInstance,
        [in] UINT InstanceCount,
        [in] UINT StartVertexLocation,
        [in] UINT StartInstanceLocation);
    void GSSetConstantBuffers(
        [in] UINT StartSlot,
        [in] UINT NumBuffers,
        [in] ID3D10Buffer* * ppConstantBuffers);
    void GSSetShader([in] ID3D10GeometryShader* pShader);
    void IASetPrimitiveTopology([in] D3D10_PRIMITIVE_TOPOLOGY Topology);
    void VSSetShaderResources(
        [in] UINT StartSlot,
        [in] UINT NumViews,
        [in] ID3D10ShaderResourceView* * ppShaderResourceViews);
    void VSSetSamplers(
        [in] UINT StartSlot,
        [in] UINT NumSamplers,
        [in] ID3D10SamplerState* * ppSamplers);
    void SetPredication(
        [in] ID3D10Predicate* pPredicate,
        [in] BOOL PredicateValue);
    void GSSetShaderResources(
        [in] UINT StartSlot,
        [in] UINT NumViews,
        [in] ID3D10ShaderResourceView* * ppShaderResourceViews);
    void GSSetSamplers(
        [in] UINT StartSlot,
        [in] UINT NumSamplers,
        [in] ID3D10SamplerState* * ppSamplers);
    void OMSetRenderTargets(
        [in] UINT NumViews,
        [in] ID3D10RenderTargetView** ppRenderTargetViews,
        [in] ID3D10DepthStencilView* pDepthStencilView);
    void OMSetBlendState(
        [in] ID3D10BlendState* pBlendState,
        [in]  FLOAT *BlendFactor,
        [in] UINT SampleMask);
    void OMSetDepthStencilState(
        [in] ID3D10DepthStencilState* pDepthStencilState,
        [in] UINT StencilRef);
    void SOSetTargets(
        [in] UINT NumBuffers,
        [in] ID3D10Buffer** ppSOTargets,
        [in] UINT* pOffsets);
    void DrawAuto();
    void RSSetState([in] ID3D10RasterizerState* pRasterizerState);
    void RSSetViewports(
        [in] UINT NumViewports,
        [in] void* pViewports);
    void RSSetScissorRects(
        [in] UINT NumRects,
        [in] void* pRects);
    void CopySubresourceRegion(
        [in] ID3D10Resource* pDstResource,
        [in] UINT DstSubresource,
        [in] UINT DstX,
        [in] UINT DstY,
        [in] UINT DstZ,
        [in] ID3D10Resource* pSrcResource,
        [in] UINT SrcSubresource,
        [in] void* pSrcBox);
    void CopyResource(
        [in] ID3D10Resource* pDstResource,
        [in] ID3D10Resource* pSrcResource);
    void UpdateSubresource(
        [in] ID3D10Resource* pDstResource,
        [in] UINT DstSubresource,
        [in] void* pDstBox,
        [in]   void* pSrcData,
        [in] UINT SrcRowPitch,
        [in] UINT SrcDepthPitch);
    void ClearRenderTargetView(
        [in] ID3D10RenderTargetView* pRenderTargetView,
        [in]   FLOAT *ColorRGBA);
    void ClearDepthStencilView(
        [in] ID3D10DepthStencilView* pDepthStencilView,
        [in] UINT ClearFlags,
        [in] FLOAT Depth,
        [in] UINT8 Stencil);
    void GenerateMips([in] ID3D10ShaderResourceView* pShaderResourceView);
    void ResolveSubresource(
        [in] ID3D10Resource* pDstResource,
        [in] UINT DstSubresource,
        [in] ID3D10Resource* pSrcResource,
        [in] UINT SrcSubresource,
        [in] DXGI_FORMAT Format);

    // GET functions
    void VSGetConstantBuffers(
        [in] UINT StartSlot,
        [in] UINT NumBuffers,
        [out] ID3D10Buffer** ppConstantBuffers);
    void PSGetShaderResources(
        [in] UINT StartSlot,
        [in] UINT NumViews,
        [out] ID3D10ShaderResourceView** ppShaderResourceViews);
    void PSGetShader([out] ID3D10PixelShader** ppPixelShader);
    void PSGetSamplers(
        [in] UINT StartSlot,
        [in] UINT NumSamplers,
        [out] ID3D10SamplerState** ppSamplers);
    void VSGetShader([out] ID3D10VertexShader** ppVertexShader);
    void PSGetConstantBuffers(
        [in] UINT StartSlot,
        [in] UINT NumBuffers,
        [out] ID3D10Buffer** ppConstantBuffers);
    void IAGetInputLayout([out] ID3D10InputLayout** ppInputLayout);
    void IAGetVertexBuffers(
        [in] UINT StartSlot,
        [in] UINT NumBuffers,
        [out] ID3D10Buffer** ppVertexBuffers,
        [out] UINT* pStrides,
        [out] UINT* pOffsets);
    void IAGetIndexBuffer(
        [out] ID3D10Buffer** pIndexBuffer,
        [out] DXGI_FORMAT* Format,
        [out] UINT* Offset);
    void GSGetConstantBuffers(
        [in] UINT StartSlot,
        [in] UINT NumBuffers,
        [out] ID3D10Buffer** ppConstantBuffers);
    void GSGetShader([out] ID3D10GeometryShader** ppGeometryShader);
    void IAGetPrimitiveTopology([out] D3D10_PRIMITIVE_TOPOLOGY* pTopology);
    void VSGetShaderResources(
        [in] UINT StartSlot,
        [in] UINT NumViews,
        [out] ID3D10ShaderResourceView** ppShaderResourceViews);
    void VSGetSamplers(
        [in] UINT StartSlot,
        [in] UINT NumSamplers,
        [out] ID3D10SamplerState** ppSamplers);
    void GetPredication(
        [out] ID3D10Predicate** ppPredicate,
        [out] BOOL* pPredicateValue);
    void GSGetShaderResources(
        [in] UINT StartSlot,
        [in] UINT NumViews,
        [out] ID3D10ShaderResourceView** ppShaderResourceViews);
    void GSGetSamplers(
        [in] UINT StartSlot,
        [in] UINT NumSamplers,
        [out] ID3D10SamplerState** ppSamplers);
    void OMGetRenderTargets(
        [in] UINT NumViews,
        [out] ID3D10RenderTargetView** ppRenderTargetViews,
        [out] ID3D10DepthStencilView** ppDepthStencilView);
    void OMGetBlendState(
        [out] ID3D10BlendState** ppBlendState,
        [out] FLOAT* BlendFactor, //4
        [out] UINT* pSampleMask);
    void OMGetDepthStencilState(
        [out] ID3D10DepthStencilState** ppDepthStencilState,
        [out] UINT* pStencilRef);
    void SOGetTargets(
        [in] UINT NumBuffers,
        [out] ID3D10Buffer** ppSOTargets,
        [out] UINT* pOffsets);
    void RSGetState([out] ID3D10RasterizerState** ppRasterizerState);
    void RSGetViewports(
        [in, out] UINT* NumViewports,
        [out] void* pViewports);
    void RSGetScissorRects(
        [in, out] UINT* NumRects,
        [out] void* pRects);
    // /GET functions

    HRESULT GetDeviceRemovedReason();
    HRESULT SetExceptionMode([in] UINT RaiseFlags);
    UINT GetExceptionMode();
    HRESULT GetPrivateData(
        [in] REFGUID guid,
        [in, out] UINT* pDataSize,
        [out] void* pData);
    HRESULT SetPrivateData(
        [in] REFGUID guid,
        [in] UINT DataSize,
        [out]  void* pData);
    HRESULT SetPrivateDataInterface(
        [in] REFGUID guid,
        [in] IUnknown* pData);
    void ClearState();
    void Flush();
    // !!! END MIDDLE-FREQUENCY !!!

    // !!! Order of functions is in decreasing order of priority ( as far as performance is concerned ) !!!
    // !!! BEGIN LOW-FREQUENCY !!!
    HRESULT CreateBuffer(
        [in]   D3D10_BUFFER_DESC* pDesc,
        [in] void* pInitialData,
        [out] ID3D10Buffer** ppBuffer);
    HRESULT CreateTexture1D(
        [in]   D3D10_TEXTURE1D_DESC* pDesc,
        [in] void* pInitialData,
        [out] ID3D10Texture1D** ppTexture1D);
    HRESULT CreateTexture2D(
        [in]   D3D10_TEXTURE2D_DESC* pDesc,
        [in] void* pInitialData,
        [out] ID3D10Texture2D** ppTexture2D);
    HRESULT CreateTexture3D(
        [in]   D3D10_TEXTURE3D_DESC* pDesc,
        [in] void* pInitialData,
        [out] ID3D10Texture3D** ppTexture3D);
    HRESULT CreateShaderResourceView(
        [in] ID3D10Resource* pResource,
        [in] void* pDesc,
        [out] ID3D10ShaderResourceView** ppSRView);
    HRESULT CreateRenderTargetView(
        [in] ID3D10Resource* pResource,
        [in] void* pDesc,
        [out] ID3D10RenderTargetView** ppRTView);
    HRESULT CreateDepthStencilView(
        [in] ID3D10Resource* pResource,
        [in] void* pDesc,
        [out] ID3D10DepthStencilView** ppDepthStencilView);
    HRESULT CreateInputLayout(
        [in] D3D10_INPUT_ELEMENT_DESC* pInputElementDescs,
        [in] UINT NumElements,
        [in] void* pShaderBytecodeWithInputSignature,
        [in] SIZE_T BytecodeLength,
        [out] ID3D10InputLayout** ppInputLayout);
    HRESULT CreateVertexShader(
        [in] void* pShaderBytecode,
        [in] SIZE_T BytecodeLength,
        [out] ID3D10VertexShader** ppVertexShader);
    HRESULT CreateGeometryShader(
        [in] void* pShaderBytecode,
        [in] SIZE_T BytecodeLength,
        [out] ID3D10GeometryShader** ppGeometryShader);
    HRESULT CreateGeometryShaderWithStreamOutput(
        [in] void* pShaderBytecode,
        [in] SIZE_T BytecodeLength,
        [in] void* pSODeclaration,
        [in] UINT NumEntries,
        [in] UINT OutputStreamStride,
        [out] ID3D10GeometryShader** ppGeometryShader);
    HRESULT CreatePixelShader(
        [in] void* pShaderBytecode,
        [in] SIZE_T BytecodeLength,
        [out] ID3D10PixelShader** ppPixelShader);
    HRESULT CreateBlendState(
        [in]   D3D10_BLEND_DESC* pBlendStateDesc,
        [out] ID3D10BlendState** ppBlendState);
    HRESULT CreateDepthStencilState(
        [in]   D3D10_DEPTH_STENCIL_DESC* pDepthStencilDesc,
        [out] ID3D10DepthStencilState** ppDepthStencilState);
    HRESULT CreateRasterizerState(
        [in]   D3D10_RASTERIZER_DESC* pRasterizerDesc,
        [out] ID3D10RasterizerState** ppRasterizerState);
    HRESULT CreateSamplerState(
        [in]   D3D10_SAMPLER_DESC* pSamplerDesc,
        [out] ID3D10SamplerState** ppSamplerState);
    HRESULT CreateQuery(
        [in]   D3D10_QUERY_DESC* pQueryDesc,
        [out] ID3D10Query** ppQuery);
    HRESULT CreatePredicate(
        [in]   D3D10_QUERY_DESC* pPredicateDesc,
        [out] ID3D10Predicate** ppPredicate);
    HRESULT CreateCounter(
        [in]   D3D10_COUNTER_DESC* pCounterDesc,
        [out] ID3D10Counter** ppCounter);

    HRESULT CheckFormatSupport(
        [in] DXGI_FORMAT Format,
        [out] UINT* pFormatSupport);
    HRESULT CheckMultisampleQualityLevels(
        [in] DXGI_FORMAT Format,
        [in] UINT        SampleCount,
        [out] UINT* pNumQualityLevels);
    void CheckCounterInfo([out] D3D10_COUNTER_INFO* pCounterInfo);
    HRESULT CheckCounter(
        [in]   D3D10_COUNTER_DESC* pDesc,
        [out] D3D10_COUNTER_TYPE* pType,
        [out] UINT* pActiveCounters,
        [in, out] LPSTR szName,
        [in, out]  UINT* pNameLength,
        [in, out] LPSTR szUnits,
        [in, out]  UINT* pUnitsLength,
        [in, out] LPSTR szDescription,
        [in, out]  UINT* pDescriptionLength);
    UINT GetCreationFlags();
    HRESULT OpenSharedResource(
        [in] HANDLE hResource,
        [in] REFIID ReturnedInterface,
        [out] LongPtr* ppResource);
    void SetTextFilterSize(
        [in] UINT Width,
        [in] UINT Height);
    void GetTextFilterSize(
        [out] UINT* pWidth,
        [out] UINT* pHeight);
    // !!! END LOW-FREQUENCY !!!
};


//cpp_quote("#endif /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) */")
//cpp_quote("#pragma endregion")
//
//#pragma region Application Family
//cpp_quote("#pragma region Application Family")
//cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")

//==================================================================================================================================
//
// Multithread Layer
//
//==================================================================================================================================
//[uuid(9B7E4E00-342C-4106-A19F-4F2704F689F0), odl]
//interface ID3D10Multithread
//    : stdole.IUnknown
//{
//    void Enter();
//    void Leave();
//    BOOL SetMultithreadProtected([in] BOOL bMTProtect);
//    BOOL GetMultithreadProtected();
//};

//cpp_quote("#endif /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP) */")
//cpp_quote("#pragma endregion")
//#pragma endregion
//
//#pragma region Desktop Family
//cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")

typedef enum D3D10_CREATE_DEVICE_FLAG
{
    D3D10_CREATE_DEVICE_SINGLETHREADED = 0x1,
    D3D10_CREATE_DEVICE_DEBUG = 0x2,
    D3D10_CREATE_DEVICE_SWITCH_TO_REF = 0x4,
    D3D10_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 0x8,
    D3D10_CREATE_DEVICE_ALLOW_NULL_FROM_MAP = 0x10,
    D3D10_CREATE_DEVICE_BGRA_SUPPORT = 0x20,
    D3D10_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = 0x0080,
    D3D10_CREATE_DEVICE_STRICT_VALIDATION = 0x0200,
    D3D10_CREATE_DEVICE_DEBUGGABLE = 0x0400,

} D3D10_CREATE_DEVICE_FLAG;

//cpp_quote("")

//
//cpp_quote("#if !defined( D3D10_IGNORE_SDK_LAYERS ) ")
//cpp_quote("#include \"d3d10sdklayers.h\" ")
//cpp_quote("#endif ")
//cpp_quote("#include \"d3d10misc.h\" ")
//cpp_quote("#include \"d3d10shader.h\" ")
//cpp_quote("#include \"d3d10effect.h\" ")
//
//cpp_quote("#endif /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) */")
//#pragma endregion
//
//
//cpp_quote("DEFINE_GUID(IID_ID3D10DeviceChild,0x9B7E4C00,0x342C,0x4106,0xA1,0x9F,0x4F,0x27,0x04,0xF6,0x89,0xF0);")
//cpp_quote("DEFINE_GUID(IID_ID3D10DepthStencilState,0x2B4B1CC8,0xA4AD,0x41f8,0x83,0x22,0xCA,0x86,0xFC,0x3E,0xC6,0x75);")
//cpp_quote("DEFINE_GUID(IID_ID3D10BlendState,0xEDAD8D19,0x8A35,0x4d6d,0x85,0x66,0x2E,0xA2,0x76,0xCD,0xE1,0x61);")
//cpp_quote("DEFINE_GUID(IID_ID3D10RasterizerState,0xA2A07292,0x89AF,0x4345,0xBE,0x2E,0xC5,0x3D,0x9F,0xBB,0x6E,0x9F);")
//cpp_quote("DEFINE_GUID(IID_ID3D10Resource,0x9B7E4C01,0x342C,0x4106,0xA1,0x9F,0x4F,0x27,0x04,0xF6,0x89,0xF0);")
//cpp_quote("DEFINE_GUID(IID_ID3D10Buffer,0x9B7E4C02,0x342C,0x4106,0xA1,0x9F,0x4F,0x27,0x04,0xF6,0x89,0xF0);")
//cpp_quote("DEFINE_GUID(IID_ID3D10Texture1D,0x9B7E4C03,0x342C,0x4106,0xA1,0x9F,0x4F,0x27,0x04,0xF6,0x89,0xF0);")
//cpp_quote("DEFINE_GUID(IID_ID3D10Texture2D,0x9B7E4C04,0x342C,0x4106,0xA1,0x9F,0x4F,0x27,0x04,0xF6,0x89,0xF0);")
//cpp_quote("DEFINE_GUID(IID_ID3D10Texture3D,0x9B7E4C05,0x342C,0x4106,0xA1,0x9F,0x4F,0x27,0x04,0xF6,0x89,0xF0);")
//cpp_quote("DEFINE_GUID(IID_ID3D10View,0xC902B03F,0x60A7,0x49BA,0x99,0x36,0x2A,0x3A,0xB3,0x7A,0x7E,0x33);")
//cpp_quote("DEFINE_GUID(IID_ID3D10ShaderResourceView,0x9B7E4C07,0x342C,0x4106,0xA1,0x9F,0x4F,0x27,0x04,0xF6,0x89,0xF0);")
//cpp_quote("DEFINE_GUID(IID_ID3D10RenderTargetView,0x9B7E4C08,0x342C,0x4106,0xA1,0x9F,0x4F,0x27,0x04,0xF6,0x89,0xF0);")
//cpp_quote("DEFINE_GUID(IID_ID3D10DepthStencilView,0x9B7E4C09,0x342C,0x4106,0xA1,0x9F,0x4F,0x27,0x04,0xF6,0x89,0xF0);")
//cpp_quote("DEFINE_GUID(IID_ID3D10VertexShader,0x9B7E4C0A,0x342C,0x4106,0xA1,0x9F,0x4F,0x27,0x04,0xF6,0x89,0xF0);")
//cpp_quote("DEFINE_GUID(IID_ID3D10GeometryShader,0x6316BE88,0x54CD,0x4040,0xAB,0x44,0x20,0x46,0x1B,0xC8,0x1F,0x68);")
//cpp_quote("DEFINE_GUID(IID_ID3D10PixelShader,0x4968B601,0x9D00,0x4cde,0x83,0x46,0x8E,0x7F,0x67,0x58,0x19,0xB6);")
//cpp_quote("DEFINE_GUID(IID_ID3D10InputLayout,0x9B7E4C0B,0x342C,0x4106,0xA1,0x9F,0x4F,0x27,0x04,0xF6,0x89,0xF0);")
//cpp_quote("DEFINE_GUID(IID_ID3D10SamplerState,0x9B7E4C0C,0x342C,0x4106,0xA1,0x9F,0x4F,0x27,0x04,0xF6,0x89,0xF0);")
//cpp_quote("DEFINE_GUID(IID_ID3D10Asynchronous,0x9B7E4C0D,0x342C,0x4106,0xA1,0x9F,0x4F,0x27,0x04,0xF6,0x89,0xF0);")
//cpp_quote("DEFINE_GUID(IID_ID3D10Query,0x9B7E4C0E,0x342C,0x4106,0xA1,0x9F,0x4F,0x27,0x04,0xF6,0x89,0xF0);")
//cpp_quote("DEFINE_GUID(IID_ID3D10Predicate,0x9B7E4C10,0x342C,0x4106,0xA1,0x9F,0x4F,0x27,0x04,0xF6,0x89,0xF0);")
//cpp_quote("DEFINE_GUID(IID_ID3D10Counter,0x9B7E4C11,0x342C,0x4106,0xA1,0x9F,0x4F,0x27,0x04,0xF6,0x89,0xF0);")
//cpp_quote("DEFINE_GUID(IID_ID3D10Device,0x9B7E4C0F,0x342C,0x4106,0xA1,0x9F,0x4F,0x27,0x04,0xF6,0x89,0xF0);")
//cpp_quote("DEFINE_GUID(IID_ID3D10Multithread,0x9B7E4E00,0x342C,0x4106,0xA1,0x9F,0x4F,0x27,0x04,0xF6,0x89,0xF0);")

typedef enum D3D10_DRIVER_TYPE
{
    D3D10_DRIVER_TYPE_HARDWARE = 0,
    D3D10_DRIVER_TYPE_REFERENCE = 1,
    D3D10_DRIVER_TYPE_NULL = 2,
    D3D10_DRIVER_TYPE_SOFTWARE = 3,
    D3D10_DRIVER_TYPE_WARP = 5,
} D3D10_DRIVER_TYPE;

typedef enum D3D10_DEVICE_STATE_TYPES
{

    D3D10_DST_SO_BUFFERS = 1,             // Single-value state (atomical gets/sets)
    D3D10_DST_OM_RENDER_TARGETS,        // Single-value state (atomical gets/sets)
    D3D10_DST_OM_DEPTH_STENCIL_STATE,   // Single-value state
    D3D10_DST_OM_BLEND_STATE,           // Single-value state

    D3D10_DST_VS,                       // Single-value state
    D3D10_DST_VS_SAMPLERS,              // Count: D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT
    D3D10_DST_VS_SHADER_RESOURCES,      // Count: D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT
    D3D10_DST_VS_CONSTANT_BUFFERS,      // Count:			

    D3D10_DST_GS,                       // Single-value state
    D3D10_DST_GS_SAMPLERS,              // Count: D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT
    D3D10_DST_GS_SHADER_RESOURCES,      // Count: D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT
    D3D10_DST_GS_CONSTANT_BUFFERS,      // Count: D3D10_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT

    D3D10_DST_PS,                       // Single-value state
    D3D10_DST_PS_SAMPLERS,              // Count: D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT
    D3D10_DST_PS_SHADER_RESOURCES,      // Count: D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT
    D3D10_DST_PS_CONSTANT_BUFFERS,      // Count: D3D10_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT

    D3D10_DST_IA_VERTEX_BUFFERS,        // Count: D3D10_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT
    D3D10_DST_IA_INDEX_BUFFER,          // Single-value state
    D3D10_DST_IA_INPUT_LAYOUT,          // Single-value state
    D3D10_DST_IA_PRIMITIVE_TOPOLOGY,    // Single-value state

    D3D10_DST_RS_VIEWPORTS,             // Single-value state (atomical gets/sets)
    D3D10_DST_RS_SCISSOR_RECTS,         // Single-value state (atomical gets/sets)
    D3D10_DST_RS_RASTERIZER_STATE,      // Single-value state

    D3D10_DST_PREDICATION,              // Single-value state
} D3D10_DEVICE_STATE_TYPES;

typedef struct D3D10_STATE_BLOCK_MASK
{
    BYTE VS;
    BYTE VSSamplers[2];
    BYTE VSShaderResources[16];
    BYTE VSConstantBuffers[2];

    BYTE GS;
    BYTE GSSamplers[2];
    BYTE GSShaderResources[16];
    BYTE GSConstantBuffers[2];

    BYTE PS;
    BYTE PSSamplers[2];
    BYTE PSShaderResources[16];
    BYTE PSConstantBuffers[2];

    BYTE IAVertexBuffers[2];
    BYTE IAIndexBuffer;
    BYTE IAInputLayout;
    BYTE IAPrimitiveTopology;

    BYTE OMRenderTargets;
    BYTE OMDepthStencilState;
    BYTE OMBlendState;

    BYTE RSViewports;
    BYTE RSScissorRects;
    BYTE RSRasterizerState;

    BYTE SOBuffers;

    BYTE Predication;
} D3D10_STATE_BLOCK_MASK;





[
    uuid(0803425A-57F5-4dd6-9465-A87570834A08),   
        odl 
]
interface ID3D10StateBlock : stdole.IUnknown
{ 
    HRESULT Capture();

    HRESULT Apply();

    HRESULT ReleaseAllDeviceObjects();

    HRESULT GetDevice(
        [out] ID3D10Device** ppDevice);
}

typedef enum D3D10EffectFlags
{
    D3D10_EFFECT_COMPILE_CHILD_EFFECT = 1,
    D3D10_EFFECT_COMPILE_ALLOW_SLOW_OPS = 2,
    D3D10_EFFECT_SINGLE_THREADED = 4
} D3D10EffectFlags;

typedef enum D3D10EffectVariabeFlags
{
    D3D10_EFFECT_VARIABLE_POOLED = 1,
    D3D10_EFFECT_VARIABLE_ANNOTATION = 2,
    D3D10_EFFECT_VARIABLE_EXPLICIT_BIND_POINT = 4
} D3D10EffectVariabeFlags;

typedef D3D_SHADER_VARIABLE_CLASS D3D10_SHADER_VARIABLE_CLASS;
 
typedef D3D_SHADER_VARIABLE_FLAGS D3D10_SHADER_VARIABLE_FLAGS;
 
typedef D3D_SHADER_VARIABLE_TYPE D3D10_SHADER_VARIABLE_TYPE;

typedef struct D3D10_EFFECT_TYPE_DESC
{
    LongPtr  TypeName;               // Name of the type 
    // (e.g. "float4" or "MyStruct")

    D3D10_SHADER_VARIABLE_CLASS    Class;  // (e.g. scalar, vector, object, etc.)
    D3D10_SHADER_VARIABLE_TYPE     Type;   // (e.g. float, texture, vertexshader, etc.)

    UINT    Elements;               // Number of elements in this type
    // (0 if not an array) 
    UINT    Members;                // Number of members
    // (0 if not a structure)
    UINT    Rows;                   // Number of rows in this type
    // (0 if not a numeric primitive)
    UINT    Columns;                // Number of columns in this type
    // (0 if not a numeric primitive)

    UINT    PackedSize;             // Number of bytes required to represent
    // this data type, when tightly packed
    UINT    UnpackedSize;           // Number of bytes occupied by this data
    // type, when laid out in a constant buffer
    UINT    Stride;                 // Number of bytes to seek between elements,
    // when laid out in a constant buffer
} D3D10_EFFECT_TYPE_DESC;

//interface ID3D10EffectType;
//
//[
//    uuid(4E9E1DDC-CD9D-4772-A837-00180B9B88FD),  
//        odl 
//]
//interface ID3D10EffectType  
//{ 
//        BOOL IsValid();
//
//    HRESULT GetDesc(
//        [out] D3D10_EFFECT_TYPE_DESC* pDesc);
//
// 
//        ID3D10EffectType* GetMemberTypeByIndex(
//            [in] UINT Index);
//
//        ID3D10EffectType* GetMemberTypeByName(
//            [in] LongPtr Name);
// 
//        ID3D10EffectType* GetMemberTypeBySemantic(
//            [in] LongPtr Semantic);
// 
//        LongPtr GetMemberName(
//            [in] UINT Index);
// 
//        LongPtr GetMemberSemantic(
//            [in] UINT Index);
//}

typedef struct D3D10_EFFECT_VARIABLE_DESC
{
    LongPtr  Name;                   // Name of this variable, annotation, 
    // or structure member
    LongPtr  Semantic;               // Semantic string of this variable
    // or structure member (NULL for 
    // annotations or if not present)

    D3D10EffectVariabeFlags    Flags;                  // D3D10_EFFECT_VARIABLE_* flags
    UINT    Annotations;            // Number of annotations on this variable
    // (always 0 for annotations)

    UINT    BufferOffset;           // Offset into containing cbuffer or tbuffer
    // (always 0 for annotations or variables
    // not in constant buffers)

    UINT    ExplicitBindPoint;      // Used if the variable has been explicitly bound
    // using the register keyword. Check Flags for
    // D3D10_EFFECT_VARIABLE_EXPLICIT_BIND_POINT;
} D3D10_EFFECT_VARIABLE_DESC;


//interface ID3D10EffectScalarVariable;
//interface ID3D10EffectVectorVariable;
//interface ID3D10EffectMatrixVariable;
//interface ID3D10EffectStringVariable;
//interface ID3D10EffectShaderResourceVariable;
//interface ID3D10EffectRenderTargetViewVariable;
//interface ID3D10EffectDepthStencilViewVariable;
//interface ID3D10EffectConstantBuffer;
//interface ID3D10EffectShaderVariable;
//interface ID3D10EffectBlendVariable;
//interface ID3D10EffectDepthStencilVariable;
//interface ID3D10EffectRasterizerVariable;
//interface ID3D10EffectSamplerVariable;
//
//
//[
//    uuid(AE897105-00E6-45bf-BB8E-281DD6DB8E1B),  
//        odl 
//]
//interface ID3D10EffectVariable
//{
//    BOOL IsValid();
//
//    ID3D10EffectType* GetType();
//
//    HRESULT GetDesc(
//        [out] D3D10_EFFECT_VARIABLE_DESC* pDesc);
//
//    ID3D10EffectVariable* GetAnnotationByIndex(
//        [in] UINT Index);
//
//    ID3D10EffectVariable* GetAnnotationByName(
//        [in] LPCSTR Name);
//
//    ID3D10EffectVariable* GetMemberByIndex(
//        [in] UINT Index);
//
//    ID3D10EffectVariable* GetMemberByName(
//        [in] LPCSTR Name);
//
//    ID3D10EffectVariable* GetMemberBySemantic(
//        [in] LPCSTR Semantic);
//
//    ID3D10EffectVariable* GetElement(
//        [in] UINT Index);
//
//    ID3D10EffectConstantBuffer* GetParentConstantBuffer();
//
//    ID3D10EffectScalarVariable* AsScalar();
//    ID3D10EffectVectorVariable* AsVector();
//    ID3D10EffectMatrixVariable* AsMatrix();
//    ID3D10EffectStringVariable* AsString();
//    ID3D10EffectShaderResourceVariable* AsShaderResource();
//    ID3D10EffectRenderTargetViewVariable* AsRenderTargetView();
//    ID3D10EffectDepthStencilViewVariable* AsDepthStencilView();
//    ID3D10EffectConstantBuffer* AsConstantBuffer();
//    ID3D10EffectShaderVariable* AsShader();
//    ID3D10EffectBlendVariable* AsBlend();
//    ID3D10EffectDepthStencilVariable* AsDepthStencil();
//    ID3D10EffectRasterizerVariable* AsRasterizer();
//    ID3D10EffectSamplerVariable* AsSampler();
//
//
//    HRESULT SetRawValue(
//        [in] void* pData,
//        [in] UINT Offset,
//        [in] UINT ByteCount);
//
//    HRESULT GetRawValue(
//        [out] void* pData,
//        [in] UINT Offset,
//        [in] UINT ByteCount);
//}



typedef struct D3D10_EFFECT_SHADER_DESC
{
    LongPtr pInputSignature;    // Passed into CreateInputLayout,
    // valid on VS and GS only

    BOOL IsInline;                  // Is this an anonymous shader variable
    // resulting from an inline shader assignment?


// -- The following fields are not valid after Optimize() --
    LongPtr pBytecode;          // Shader bytecode
    UINT BytecodeLength;

    LongPtr SODecl;                  // Stream out declaration string (for GS with SO)

    UINT NumInputSignatureEntries;  // Number of entries in the input signature
    UINT NumOutputSignatureEntries; // Number of entries in the output signature
} D3D10_EFFECT_SHADER_DESC;


typedef struct D3D10_PASS_DESC
{
    LongPtr Name;                    // Name of this pass (NULL if not anonymous)    
    UINT Annotations;               // Number of annotations on this pass

    LongPtr pIAInputSignature;        // Signature from VS or GS (if there is no VS)
    // or NULL if neither exists
    SIZE_T IAInputSignatureSize;    // Singature size in bytes                                

    UINT StencilRef;                // Specified in SetDepthStencilState()
    UINT SampleMask;                // Specified in SetBlendState()
    FLOAT BlendFactor[4];           // Specified in SetBlendState()
} D3D10_PASS_DESC;





typedef struct _D3D10_TECHNIQUE_DESC
{
    LongPtr  Name;                   // Name of this technique (NULL if not anonymous)
    UINT    Passes;                 // Number of passes contained within
    UINT    Annotations;            // Number of annotations on this technique
} D3D10_TECHNIQUE_DESC;


typedef struct D3D10_EFFECT_DESC
{

    BOOL    IsChildEffect;          // TRUE if this is a child effect, 
    // FALSE if this is standalone or an effect pool.

    UINT    ConstantBuffers;        // Number of constant buffers in this effect,
    // excluding the effect pool.
    UINT    SharedConstantBuffers;  // Number of constant buffers shared in this
    // effect's pool.

    UINT    GlobalVariables;        // Number of global variables in this effect,
    // excluding the effect pool.
    UINT    SharedGlobalVariables;  // Number of global variables shared in this
    // effect's pool.

    UINT    Techniques;             // Number of techniques in this effect,
    // excluding the effect pool.
} D3D10_EFFECT_DESC;


//[
//    uuid(51B0CA8B-EC0B-4519-870D-8EE1CB5017C7),  
//        odl 
//]
//interface ID3D10Effect : stdole.IUnknown
//{ 
//    // ID3D10Effect methods
//    BOOL IsValid();
//
//    BOOL IsPool();
//
//    HRESULT GetDevice(
//        [out] ID3D10Device** ppDevice);
//
//    HRESULT GetDesc(
//        [out] D3D10_EFFECT_DESC* pDesc);
//
//    ID3D10EffectConstantBuffer* GetConstantBufferByIndex(
//        [in] UINT Index);
//
//    ID3D10EffectConstantBuffer* GetConstantBufferByName(
//        [in] LPCSTR Name);
//
//    ID3D10EffectVariable* GetVariableByIndex(
//        [in] UINT Index);
//
//    ID3D10EffectVariable* GetVariableByName(
//        [in] LPCSTR Name);
//
//    ID3D10EffectVariable* GetVariableBySemantic(
//        [in] LPCSTR Semantic);
//
//    ID3D10EffectTechnique* GetTechniqueByIndex(
//        [in] UINT Index);
//
//    ID3D10EffectTechnique* GetTechniqueByName(
//        [in] LPCSTR Name);
//
//    HRESULT Optimize();
//
//    BOOL IsOptimized();
//}



[
    uuid(51B0CA8B-EC0B-4519-870D-8EE1CB5017C7),  
        odl 
]
interface ID3D10Effect : stdole.IUnknown
{
 

    // ID3D10Effect methods
    BOOL IsValid();

    BOOL IsPool();

    HRESULT GetDevice(
        [out] ID3D10Device** ppDevice);

    HRESULT GetDesc(
        [out] D3D10_EFFECT_DESC* pDesc);

    LongPtr GetConstantBufferByIndex(
        [in] UINT Index);

    LongPtr GetConstantBufferByName(
        [in] LPSTR Name);

    LongPtr GetVariableByIndex(
        [in] UINT Index);

    LongPtr GetVariableByName(
        [in] LPSTR Name);

    LongPtr GetVariableBySemantic(
        [in] LPSTR Semantic);

    LongPtr GetTechniqueByIndex(
        [in] UINT Index);

    LongPtr GetTechniqueByName(
        [in] LPSTR Name);

    HRESULT Optimize();

    BOOL IsOptimized();
}


[
    odl,
        uuid(9537AB04-3250-412e-8213-FCD2F8677933)
]
interface ID3D10EffectPool : stdole.IUnknown
{
    LongPtr AsEffect();
}


[
    dllname("d3d10.dll")
]
module D3D10
{
const UINT D3D10_16BIT_INDEX_STRIP_CUT_VALUE = 0xffff;
const UINT D3D10_32BIT_INDEX_STRIP_CUT_VALUE = 0xffffffff;
const UINT D3D10_8BIT_INDEX_STRIP_CUT_VALUE = 0xff;
const UINT D3D10_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9;
const UINT D3D10_CLIP_OR_CULL_DISTANCE_COUNT = 8;
const UINT D3D10_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2;
const UINT D3D10_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14;
const UINT D3D10_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4;
const UINT D3D10_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32;
const UINT D3D10_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15;
const UINT D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
const UINT D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15;
const UINT D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
const UINT D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
const UINT D3D10_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64;
const UINT D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
const UINT D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1;
const UINT D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
const UINT D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
const UINT D3D10_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32;
const UINT D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1;
const UINT D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128;
const UINT D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1;
const UINT D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1;
const UINT D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128;
const UINT D3D10_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1;
const UINT D3D10_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16;
const UINT D3D10_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1;
const UINT D3D10_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1;
const UINT D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT = 16;
const UINT D3D10_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32;
const UINT D3D10_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4;
const UINT D3D10_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32;
const UINT D3D10_COMMONSHADER_TEMP_REGISTER_COUNT = 4096;
const UINT D3D10_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3;
const UINT D3D10_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3;
const UINT D3D10_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10;
const INT D3D10_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = -10;
const INT D3D10_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = -8;
const UINT D3D10_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7;
const FLOAT D3D10_DEFAULT_BLEND_FACTOR_ALPHA = 0x3F19999A;
const FLOAT D3D10_DEFAULT_BLEND_FACTOR_BLUE = 0x3F800000;
const FLOAT D3D10_DEFAULT_BLEND_FACTOR_GREEN = 0x3F800000;
const FLOAT D3D10_DEFAULT_BLEND_FACTOR_RED = 0x3F800000;
const FLOAT D3D10_DEFAULT_BORDER_COLOR_COMPONENT = 0;
const UINT D3D10_DEFAULT_DEPTH_BIAS = 0;
const FLOAT D3D10_DEFAULT_DEPTH_BIAS_CLAMP = 0;
//const FLOAT D3D10_DEFAULT_MAX_ANISOTROPY = (16.0f);
const FLOAT D3D10_DEFAULT_MIP_LOD_BIAS = 0;
const UINT D3D10_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0;
const UINT D3D10_DEFAULT_SAMPLE_MASK = 0xffffffff;
const UINT D3D10_DEFAULT_SCISSOR_ENDX = 0;
const UINT D3D10_DEFAULT_SCISSOR_ENDY = 0;
const UINT D3D10_DEFAULT_SCISSOR_STARTX = 0;
const UINT D3D10_DEFAULT_SCISSOR_STARTY = 0;
const FLOAT D3D10_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = 0;
const UINT D3D10_DEFAULT_STENCIL_READ_MASK = 0xff;
const UINT D3D10_DEFAULT_STENCIL_REFERENCE = 0;
const UINT D3D10_DEFAULT_STENCIL_WRITE_MASK = 0xff;
const UINT D3D10_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = 0;
const UINT D3D10_DEFAULT_VIEWPORT_HEIGHT = 0;
const FLOAT D3D10_DEFAULT_VIEWPORT_MAX_DEPTH = 0;
const FLOAT D3D10_DEFAULT_VIEWPORT_MIN_DEPTH = 0;
const UINT D3D10_DEFAULT_VIEWPORT_TOPLEFTX = 0;
const UINT D3D10_DEFAULT_VIEWPORT_TOPLEFTY = 0;
const UINT D3D10_DEFAULT_VIEWPORT_WIDTH = 0;
const FLOAT D3D10_FLOAT16_FUSED_TOLERANCE_IN_ULP = 0x3F19999A;
//const FLOAT D3D10_FLOAT32_MAX = (3.402823466e + 38f);
const FLOAT D3D10_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = 0x3F19999A;
//const FLOAT D3D10_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = (2.4f);
const FLOAT D3D10_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = 0x3F800000;
//const FLOAT D3D10_FLOAT_TO_SRGB_OFFSET = (0.055f);
//const FLOAT D3D10_FLOAT_TO_SRGB_SCALE_1 = (12.92f);
//const FLOAT D3D10_FLOAT_TO_SRGB_SCALE_2 = (1.055f);
//const FLOAT D3D10_FLOAT_TO_SRGB_THRESHOLD = (0.0031308f);
//const FLOAT D3D10_FTOI_INSTRUCTION_MAX_INPUT = (2147483647.999f);
//const FLOAT D3D10_FTOI_INSTRUCTION_MIN_INPUT = (-2147483648.999f);
//const FLOAT D3D10_FTOU_INSTRUCTION_MAX_INPUT = (4294967295.999f);
const FLOAT D3D10_FTOU_INSTRUCTION_MIN_INPUT = 0;
const UINT D3D10_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = 1;
const UINT D3D10_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = 32;
const UINT D3D10_GS_INPUT_PRIM_CONST_REGISTER_COUNT = 1;
const UINT D3D10_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = 2;
const UINT D3D10_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = 1;
const UINT D3D10_GS_INPUT_REGISTER_COMPONENTS = 4;
const UINT D3D10_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
const UINT D3D10_GS_INPUT_REGISTER_COUNT = 16;
const UINT D3D10_GS_INPUT_REGISTER_READS_PER_INST = 2;
const UINT D3D10_GS_INPUT_REGISTER_READ_PORTS = 1;
const UINT D3D10_GS_INPUT_REGISTER_VERTICES = 6;
const UINT D3D10_GS_OUTPUT_ELEMENTS = 32;
const UINT D3D10_GS_OUTPUT_REGISTER_COMPONENTS = 4;
const UINT D3D10_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
const UINT D3D10_GS_OUTPUT_REGISTER_COUNT = 32;
const UINT D3D10_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = 0;
const UINT D3D10_IA_DEFAULT_PRIMITIVE_TOPOLOGY = 0;
const UINT D3D10_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = 0;
const UINT D3D10_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = 1;
const UINT D3D10_IA_INSTANCE_ID_BIT_COUNT = 32;
const UINT D3D10_IA_INTEGER_ARITHMETIC_BIT_COUNT = 32;
const UINT D3D10_IA_PRIMITIVE_ID_BIT_COUNT = 32;
const UINT D3D10_IA_VERTEX_ID_BIT_COUNT = 32;
const UINT D3D10_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 16;
const UINT D3D10_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 64;
const UINT D3D10_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 16;
const UINT D3D10_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = 0xffffffff;
const UINT D3D10_INTEGER_DIVIDE_BY_ZERO_REMAINDER = 0xffffffff;
const FLOAT D3D10_LINEAR_GAMMA = 0x3F800000;
const FLOAT D3D10_MAX_BORDER_COLOR_COMPONENT = 0x3F800000;
const FLOAT D3D10_MAX_DEPTH = 0x3F800000;
const UINT D3D10_MAX_MAXANISOTROPY = 16;
const UINT D3D10_MAX_MULTISAMPLE_SAMPLE_COUNT = 32;
//const FLOAT D3D10_MAX_POSITION_VALUE = (3.402823466e + 34f);
const UINT D3D10_MAX_TEXTURE_DIMENSION_2_TO_EXP = 17;
const FLOAT D3D10_MIN_BORDER_COLOR_COMPONENT = 0;
const FLOAT D3D10_MIN_DEPTH = 0;
const UINT D3D10_MIN_MAXANISOTROPY = 0;
//const FLOAT D3D10_MIP_LOD_BIAS_MAX = (15.99f);
//const FLOAT D3D10_MIP_LOD_BIAS_MIN = (-16.0f);
const UINT D3D10_MIP_LOD_FRACTIONAL_BIT_COUNT = 6;
const UINT D3D10_MIP_LOD_RANGE_BIT_COUNT = 8;
//const FLOAT D3D10_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = (1.4f);
const UINT D3D10_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = 0;
const UINT D3D10_PIXEL_ADDRESS_RANGE_BIT_COUNT = 13;
const UINT D3D10_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15;
const UINT D3D10_PS_FRONTFACING_DEFAULT_VALUE = 0xFFFFFFFF;
const UINT D3D10_PS_FRONTFACING_FALSE_VALUE = 0x00000000;
const UINT D3D10_PS_FRONTFACING_TRUE_VALUE = 0xFFFFFFFF;
const UINT D3D10_PS_INPUT_REGISTER_COMPONENTS = 4;
const UINT D3D10_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
const UINT D3D10_PS_INPUT_REGISTER_COUNT = 32;
const UINT D3D10_PS_INPUT_REGISTER_READS_PER_INST = 2;
const UINT D3D10_PS_INPUT_REGISTER_READ_PORTS = 1;
const FLOAT D3D10_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0;
const UINT D3D10_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1;
const UINT D3D10_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32;
const UINT D3D10_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1;
const UINT D3D10_PS_OUTPUT_REGISTER_COMPONENTS = 4;
const UINT D3D10_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
const UINT D3D10_PS_OUTPUT_REGISTER_COUNT = 8;
const FLOAT D3D10_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0x3F000000;
const UINT D3D10_REQ_BLEND_OBJECT_COUNT_PER_CONTEXT = 4096;
const UINT D3D10_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27;
const UINT D3D10_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
const UINT D3D10_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_CONTEXT = 4096;
const UINT D3D10_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32;
const UINT D3D10_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32;
const UINT D3D10_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 8192;
const UINT D3D10_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024;
const UINT D3D10_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
const UINT D3D10_REQ_MAXANISOTROPY = 16;
const UINT D3D10_REQ_MIP_LEVELS = 14;
const UINT D3D10_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048;
const UINT D3D10_REQ_RASTERIZER_OBJECT_COUNT_PER_CONTEXT = 4096;
const UINT D3D10_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 8192;
const UINT D3D10_REQ_RESOURCE_SIZE_IN_MEGABYTES = 128;
const UINT D3D10_REQ_RESOURCE_VIEW_COUNT_PER_CONTEXT_2_TO_EXP = 20;
const UINT D3D10_REQ_SAMPLER_OBJECT_COUNT_PER_CONTEXT = 4096;
const UINT D3D10_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 512;
const UINT D3D10_REQ_TEXTURE1D_U_DIMENSION = 8192;
const UINT D3D10_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 512;
const UINT D3D10_REQ_TEXTURE2D_U_OR_V_DIMENSION = 8192;
const UINT D3D10_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048;
const UINT D3D10_REQ_TEXTURECUBE_DIMENSION = 8192;
const UINT D3D10_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0;
const UINT D3D10_SHADER_MAJOR_VERSION = 4;
const UINT D3D10_SHADER_MINOR_VERSION = 0;
const UINT D3D10_SHIFT_INSTRUCTION_PAD_VALUE = 0;
const UINT D3D10_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5;
const UINT D3D10_SIMULTANEOUS_RENDER_TARGET_COUNT = 8;
const UINT D3D10_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048;
const UINT D3D10_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 256;
const UINT D3D10_SO_BUFFER_SLOT_COUNT = 4;
const UINT D3D10_SO_DDI_REGISTER_INDEX_DENOTING_GAP = 0xffffffff;
const UINT D3D10_SO_MULTIPLE_BUFFER_ELEMENTS_PER_BUFFER = 1;
const UINT D3D10_SO_SINGLE_BUFFER_COMPONENT_LIMIT = 64;
//const FLOAT D3D10_SRGB_GAMMA = (2.2f);
//const FLOAT D3D10_SRGB_TO_FLOAT_DENOMINATOR_1 = (12.92f);
//const FLOAT D3D10_SRGB_TO_FLOAT_DENOMINATOR_2 = (1.055f);
//const FLOAT D3D10_SRGB_TO_FLOAT_EXPONENT = (2.4f);
//const FLOAT D3D10_SRGB_TO_FLOAT_OFFSET = (0.055f);
//const FLOAT D3D10_SRGB_TO_FLOAT_THRESHOLD = (0.04045f);
const FLOAT D3D10_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = 0x3F000000;
const UINT D3D10_STANDARD_COMPONENT_BIT_COUNT = 32;
const UINT D3D10_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64;
const UINT D3D10_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4;
const UINT D3D10_STANDARD_PIXEL_COMPONENT_COUNT = 128;
const UINT D3D10_STANDARD_PIXEL_ELEMENT_COUNT = 32;
const UINT D3D10_STANDARD_VECTOR_SIZE = 4;
const UINT D3D10_STANDARD_VERTEX_ELEMENT_COUNT = 16;
const UINT D3D10_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64;
const UINT D3D10_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8;
const UINT D3D10_SUBTEXEL_FRACTIONAL_BIT_COUNT = 6;
const UINT D3D10_TEXEL_ADDRESS_RANGE_BIT_COUNT = 18;
const UINT D3D10_UNBOUND_MEMORY_ACCESS_RESULT = 0;
const UINT D3D10_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15;
const UINT D3D10_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16;
const UINT D3D10_VIEWPORT_BOUNDS_MAX = 16383;
const INT D3D10_VIEWPORT_BOUNDS_MIN = -16384;
const UINT D3D10_VS_INPUT_REGISTER_COMPONENTS = 4;
const UINT D3D10_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
const UINT D3D10_VS_INPUT_REGISTER_COUNT = 16;
const UINT D3D10_VS_INPUT_REGISTER_READS_PER_INST = 2;
const UINT D3D10_VS_INPUT_REGISTER_READ_PORTS = 1;
const UINT D3D10_VS_OUTPUT_REGISTER_COMPONENTS = 4;
const UINT D3D10_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
const UINT D3D10_VS_OUTPUT_REGISTER_COUNT = 16;
const UINT D3D10_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = 10;
const UINT D3D10_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 25;
const UINT D3D10_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = 25;
const UINT D3D_MAJOR_VERSION = 10;
const UINT D3D_MINOR_VERSION = 0;
const UINT D3D_SPEC_DATE_DAY = 8;
const UINT D3D_SPEC_DATE_MONTH = 8;
const UINT D3D_SPEC_DATE_YEAR = 2006;
const FLOAT D3D_SPEC_VERSION = 0x3F866690;
const UINT D3D10_APPEND_ALIGNED_ELEMENT = 0xffffffff;

const UINT D3D10_FILTER_TYPE_MASK = 0x00000003;
const UINT D3D10_MIN_FILTER_SHIFT = 4;
const UINT D3D10_MAG_FILTER_SHIFT = 2;
const UINT D3D10_MIP_FILTER_SHIFT = 0;
const UINT D3D10_COMPARISON_FILTERING_BIT = 0x00000080;
const UINT D3D10_ANISOTROPIC_FILTERING_BIT = 0x00000040;
const UINT D3D10_TEXT_1BIT_BIT = 0x80000000;

const UINT D3D10_SDK_VERSION = 29;
[entry("D3D10CreateDevice")]
HRESULT D3D10CreateDevice(
    [in]  IDXGIAdapter* pAdapter,
    [in] D3D10_DRIVER_TYPE DriverType,
    [in] HMODULE Software,
    [in] UINT Flags,
    [in] UINT SDKVersion,
    [out] ID3D10Device** ppDevice);

[entry("D3D10CreateDeviceAndSwapChain")]
HRESULT D3D10CreateDeviceAndSwapChain(
    [in]  IDXGIAdapter* pAdapter,
    [in] D3D10_DRIVER_TYPE DriverType,
    [in] HMODULE Software,
    [in] UINT Flags,
    [in] UINT SDKVersion,
    [in] void* pSwapChainDesc,
    [out] IDXGISwapChain** ppSwapChain,
    [out] ID3D10Device** ppDevice);

[entry("D3D10CreateBlob")]
HRESULT D3D10CreateBlob([in] SIZE_T NumBytes,[out] ID3D10Blob* ppBuffer);

[entry("D3D10StateBlockMaskUnion")]
HRESULT D3D10StateBlockMaskUnion([in] D3D10_STATE_BLOCK_MASK* pA,[in] D3D10_STATE_BLOCK_MASK* pB,[out] D3D10_STATE_BLOCK_MASK* pResult);
[entry("D3D10StateBlockMaskIntersect")]
HRESULT D3D10StateBlockMaskIntersect([in] D3D10_STATE_BLOCK_MASK* pA,[in] D3D10_STATE_BLOCK_MASK* pB,[out] D3D10_STATE_BLOCK_MASK* pResult);
[entry("D3D10StateBlockMaskDifference")]
HRESULT D3D10StateBlockMaskDifference([in] D3D10_STATE_BLOCK_MASK* pA,[in] D3D10_STATE_BLOCK_MASK* pB,[out] D3D10_STATE_BLOCK_MASK* pResult);
[entry("D3D10StateBlockMaskEnableCapture")]
HRESULT D3D10StateBlockMaskEnableCapture([in, out] D3D10_STATE_BLOCK_MASK* pMask, [in] D3D10_DEVICE_STATE_TYPES StateType,[in] UINT RangeStart,[in]  UINT RangeLength);
[entry("D3D10StateBlockMaskDisableCapture")]
HRESULT D3D10StateBlockMaskDisableCapture([in, out] D3D10_STATE_BLOCK_MASK* pMask,[in] D3D10_DEVICE_STATE_TYPES StateType,[in] UINT RangeStart,[in] UINT RangeLength);
[entry("D3D10StateBlockMaskEnableAll")]
HRESULT D3D10StateBlockMaskEnableAll([out] D3D10_STATE_BLOCK_MASK* pMask);
[entry("D3D10StateBlockMaskDisableAll")]
HRESULT D3D10StateBlockMaskDisableAll([out] D3D10_STATE_BLOCK_MASK* pMask);
[entry("D3D10StateBlockMaskGetSetting")]
BOOL D3D10StateBlockMaskGetSetting([in] D3D10_STATE_BLOCK_MASK* pMask,[in] D3D10_DEVICE_STATE_TYPES StateType,[in] UINT Entry);

[entry("D3D10CreateStateBlock")]
HRESULT D3D10CreateStateBlock([in] ID3D10Device* pDevice,[in] D3D10_STATE_BLOCK_MASK* pStateBlockMask,[out] ID3D10StateBlock** ppStateBlock);

[entry("D3D10CompileEffectFromMemory")]
HRESULT D3D10CompileEffectFromMemory([in] void* pData,[in] SIZE_T DataLength,[in] LPCSTR pSrcFileName,[in] void* pDefines,
    [in] void* pInclude,[in]UINT HLSLFlags,[in] UINT FXFlags,
    [out] ID3D10Blob** ppCompiledEffect,[out] ID3D10Blob** ppErrors);

[entry("D3D10CreateEffectFromMemory")]
HRESULT D3D10CreateEffectFromMemory([in] void* pData,[in] SIZE_T DataLength,[in] UINT FXFlags,[in] ID3D10Device* pDevice,
    [in] ID3D10EffectPool* pEffectPool,[out] ID3D10Effect** ppEffect);

[entry("D3D10CreateEffectPoolFromMemory")]
HRESULT D3D10CreateEffectPoolFromMemory([in] void* pData,[in] SIZE_T DataLength,[in] UINT FXFlags,[in] ID3D10Device* pDevice,
    [out] ID3D10EffectPool** ppEffectPool);

[entry("D3D10DisassembleEffect")]
HRESULT D3D10DisassembleEffect([in] ID3D10Effect* pEffect,[in] BOOL EnableColorCode,[out] ID3D10Blob** ppDisassembly);

}