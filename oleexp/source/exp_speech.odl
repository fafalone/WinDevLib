//Speech API 5.4

/****************************************************************************
*   sapiaut.idl
*
*   This is the interface definition file for the Microsoft Speech API
*   Version 5.4.
*
*   It contains definitions for the Automation layer.
*
*   Copyright (c) Microsoft Corporation. All rights reserved.
*****************************************************************************/

//  Includes                
//cpp_quote("#include <winapifamily.h>")

//#pragma region Desktop Family
//cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")

// Token object declarations
interface ISpeechDataKey;
interface ISpeechObjectToken;                 // Token object
interface ISpeechObjectTokens;                // Collection of Token Objects
interface ISpeechObjectTokenCategory;

// Audio object declarations
interface ISpeechAudioBufferInfo;
interface ISpeechAudioStatus;
interface ISpeechAudioFormat;
interface ISpeechWaveFormatEx;
interface ISpeechBaseStream;
interface ISpeechFileStream;
interface ISpeechMemoryStream;
interface ISpeechCustomStream;
interface ISpeechAudio;
interface ISpeechMMSysAudio;

// Voice object declarations
interface ISpeechVoice;
interface ISpeechVoiceStatus;
dispinterface ISpeechVoiceEvents;

// Recognizer object declarations
interface ISpeechRecognizer;
interface ISpeechRecognizerStatus;
interface ISpeechRecoContext;
interface ISpeechRecoGrammar;
dispinterface ISpeechRecoContextEvents;

// Grammar object declarations
interface ISpeechGrammarRule;
interface ISpeechGrammarRules;
interface ISpeechGrammarRuleState;
interface ISpeechGrammarRuleStateTransition;
interface ISpeechGrammarRuleStateTransitions;
interface ISpeechTextSelectionInformation;

// RecoResult and phrase object declarations
interface ISpeechRecoResult;
//#if _SAPI_BUILD_VER >= 0x053
interface ISpeechRecoResult2;
//#endif // _SAPI_BUILD_VER >= 0x053
interface ISpeechRecoResultTimes;
interface ISpeechPhraseAlternate;
interface ISpeechPhraseAlternates;
interface ISpeechPhraseInfo;
interface ISpeechPhraseElement;
interface ISpeechPhraseElements;
interface ISpeechPhraseReplacement;
interface ISpeechPhraseReplacements;
interface ISpeechPhraseProperty;
interface ISpeechPhraseProperties;
interface ISpeechPhraseRule;
interface ISpeechPhraseRules;

// Lexicon declarations
interface ISpeechLexicon;
interface ISpeechLexiconWords;
interface ISpeechLexiconWord;
interface ISpeechLexiconPronunciations;
interface ISpeechLexiconPronunciation;

typedef long SpeechLanguageId;


////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  String constants 
//
//
//
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Line below (#define) is to work around getting these strings just defined in the typelib (Ignore our definition in the .H file)
// Strings will fail to be defined properly in .H unless they have four backslashes ("\\\\") but for being in the typelib
// can't do this and have the strings defined propertly.  So for VC just use the existing SAPI defines in SAPI.IDL.
//cpp_quote("#define __SpeechStringConstants_MODULE_DEFINED__")
/*
[
    uuid(E58442E4-0C80-402c-9559-867337A39765)
]
module SpeechStringConstants
{
    //--- Root of registry entries for speech use
    const BSTR  SpeechRegistryUserRoot = L"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Speech";
    const BSTR  SpeechRegistryLocalMachineRoot = L"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Speech";

    //--- Object Token Categories for speech resource management
    const BSTR  SpeechCategoryAudioOut = L"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Speech\\AudioOutput";
    const BSTR  SpeechCategoryAudioIn = L"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Speech\\AudioInput";
    const BSTR  SpeechCategoryVoices = L"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Speech\\Voices";
    const BSTR  SpeechCategoryRecognizers = L"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Speech\\Recognizers";
    const BSTR  SpeechCategoryAppLexicons = L"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Speech\\AppLexicons";
    const BSTR  SpeechCategoryPhoneConverters = L"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Speech\\PhoneConverters";
    const BSTR  SpeechCategoryRecoProfiles = L"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Speech\\RecoProfiles";

    //--- User Lexicon Token Id
    const BSTR  SpeechTokenIdUserLexicon = L"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Speech\\CurrentUserLexicon";

    //--- Standard token values
    const BSTR  SpeechTokenValueCLSID = L"CLSID";
    const BSTR  SpeechTokenKeyFiles = L"Files";
    const BSTR  SpeechTokenKeyUI = L"UI";
    const BSTR  SpeechTokenKeyAttributes = L"Attributes";

    //--- Standard voice category values
    const BSTR  SpeechVoiceCategoryTTSRate = L"DefaultTTSRate";

    //--- Standard SR Engine properties
    const BSTR  SpeechPropertyResourceUsage = L"ResourceUsage";
    const BSTR  SpeechPropertyHighConfidenceThreshold = L"HighConfidenceThreshold";
    const BSTR  SpeechPropertyNormalConfidenceThreshold = L"NormalConfidenceThreshold";
    const BSTR  SpeechPropertyLowConfidenceThreshold = L"LowConfidenceThreshold";
    const BSTR  SpeechPropertyResponseSpeed = L"ResponseSpeed";
    const BSTR  SpeechPropertyComplexResponseSpeed = L"ComplexResponseSpeed";
    const BSTR  SpeechPropertyAdaptationOn = L"AdaptationOn";

    //--- Standard SAPI Recognition Topics
    const BSTR  SpeechDictationTopicSpelling = L"Spelling";

    //--- Special Tags used in SR grammars
    const BSTR  SpeechGrammarTagWildcard = L"...";
    const BSTR  SpeechGrammarTagDictation = L"*";
    const BSTR  SpeechGrammarTagUnlimitedDictation = L"*+";

    //--- TokenUI constants
    const BSTR  SpeechEngineProperties = L"EngineProperties";
    const BSTR  SpeechAddRemoveWord = L"AddRemoveWord";
    const BSTR  SpeechUserTraining = L"UserTraining";
    const BSTR  SpeechMicTraining = L"MicTraining";
    const BSTR  SpeechRecoProfileProperties = L"RecoProfileProperties";
    const BSTR  SpeechAudioProperties = L"AudioProperties";
    const BSTR  SpeechAudioVolume = L"AudioVolume";

    //--- ISpeechVoice::Skip constant
    const BSTR  SpeechVoiceSkipTypeSentence = L"Sentence";

    // The SpeechAudioFormat object includes a guid that can be used to set the format to 
    //  a custom value.
    const BSTR  SpeechAudioFormatGUIDWave = L"{C31ADBAE-527F-4ff5-A230-F62BB61FF70C}";
    const BSTR  SpeechAudioFormatGUIDText = L"{7CEEF9F9-3D13-11d2-9EE7-00C04F797396}";

};*/



////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechDataKey               
//  SAPI C++ Only Interface Equivalent: ISpDataKey Interface
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechDataKey
{
    DISPID_SDKSetBinaryValue = 1,
    DISPID_SDKGetBinaryValue,
    DISPID_SDKSetStringValue,
    DISPID_SDKGetStringValue,
    DISPID_SDKSetLongValue,
    DISPID_SDKGetlongValue,
    DISPID_SDKOpenKey,
    DISPID_SDKCreateKey,
    DISPID_SDKDeleteKey,
    DISPID_SDKDeleteValue,
    DISPID_SDKEnumKeys,
    DISPID_SDKEnumValues
} DISPID_SpeechDataKey;

[
    odl,
    uuid(CE17C09B-4EFA-44d5-A4C9-59D9585AB0CD),
    dual,
    helpstring("ISpeechDataKey Interface")
]
interface ISpeechDataKey : IDispatch
{
    // Methods

    // SetBinaryValue
    //  SAPI C++ Only Interface Equivalent: SetData
    //
    [helpstring("SetBinaryValue"), id(1)]
    HRESULT SetBinaryValue([in] BSTR ValueName,
        [in]VARIANT Value);

    // GetBinaryValue
    //  SAPI C++ Only Interface Equivalent: GetData
    //
    [helpstring("GetBinaryValue"), id(2)]
    HRESULT GetBinaryValue([in] BSTR ValueName,
        [out, retval]VARIANT* Value);

    // SetStringValue
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("SetStringValue"), id(3)]
    HRESULT SetStringValue([in] BSTR ValueName,
        [in] BSTR Value);

    // GetStringValue
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("GetStringValue"), id(4)]
    HRESULT GetStringValue([in] BSTR ValueName,
        [out, retval]BSTR* Value);

    // SetLongValue
    //  SAPI C++ Only Interface Equivalent: SetDWORD
    //
    [helpstring("SetLongValue"), id(5)]
    HRESULT SetLongValue([in] BSTR ValueName,
        [in]long Value);

    // GetLongValue
    //  SAPI C++ Only Interface Equivalent: GetDWORD
    //
    [helpstring("GetlongValue"), id(6)]
    HRESULT GetLongValue([in] BSTR ValueName,
        [out, retval]long* Value);

    // OpenKey
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("OpenKey"), id(7)]
    HRESULT OpenKey([in] BSTR SubKeyName, [out, retval]ISpeechDataKey** SubKey);

    // CreateKey
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("CreateKey"), id(8)]
    HRESULT CreateKey([in] BSTR SubKeyName, [out, retval]ISpeechDataKey** SubKey);

    // DeleteKey
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("DeleteKey"), id(9)]
    HRESULT DeleteKey([in] BSTR SubKeyName);

    // DeleteValue
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("DeleteValue"), id(10)]
    HRESULT DeleteValue([in] BSTR ValueName);

    // EnumKeys
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("EnumKeys"), id(11)]
    HRESULT EnumKeys([in]long Index, [out, retval]BSTR* SubKeyName);

    // EnumValues
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("EnumValues"), id(12)]
    HRESULT EnumValues([in]long Index, [out, retval]BSTR* ValueName);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechObjectToken               
//  SAPI C++ Only Interface Equivalent: ISpObjectToken
//  Default Property: Id
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechObjectToken
{
    DISPID_SOTId = 1,
    DISPID_SOTDataKey,
    DISPID_SOTCategory,
    DISPID_SOTGetDescription,
    DISPID_SOTSetId,
    DISPID_SOTGetAttribute,
    DISPID_SOTCreateInstance,
    DISPID_SOTRemove,
    DISPID_SOTGetStorageFileName,
    DISPID_SOTRemoveStorageFileName,
    DISPID_SOTIsUISupported,
    DISPID_SOTDisplayUI,
    DISPID_SOTMatchesAttributes
} DISPID_SpeechObjectToken;

//////////////////////////////////
//
// SpeechDataKeyLocation Enum
//  SAPI C++ Only Interface Equivalent: SPDATAKEYLOCATION
//
//////////////////////////////////

typedef enum SpeechDataKeyLocation
{
    SDKLDefaultLocation = 0, //SPDKL_DefaultLocation,
    SDKLCurrentUser = 1, // SPDKL_CurrentUser,
    SDKLLocalMachine = 2, //SPDKL_LocalMachine,
    SDKLCurrentConfig = 5, //SPDKL_CurrentConfig
} SpeechDataKeyLocation;

//#define CLSCTXALL (CLSCTX_INPROC_SERVER | CLSCTX_INPROC_HANDLER | CLSCTX_LOCAL_SERVER | CLSCTX_REMOTE_SERVER)

//////////////////////////////////
//
// SpeechTokenContext Enum
//  SAPI C++ Only Interface Equivalent: N/A
//
//////////////////////////////////

typedef enum SpeechTokenContext
{
    STCInprocServer = 0x01, // CLSCTX_INPROC_SERVER,
    STCInprocHandler = 0x02, // CLSCTX_INPROC_HANDLER,
    STCLocalServer = 0x04, //CLSCTX_LOCAL_SERVER,
    STCRemoteServer = 0x10, // CLSCTX_REMOTE_SERVER,
    STCAll = 0x17, // CLSCTXALL
} SpeechTokenContext;

//////////////////////////////////
//
// SpeechTokenShellFolder Enum
//  SAPI C++ Only Interface Equivalent: N/A
//
//////////////////////////////////

// CSIDL_* symbols are from SHLOBJ.H
typedef enum SpeechTokenShellFolder
{
    STSF_AppData = 0x001a, // CSIDL_APPDATA,
    STSF_LocalAppData = 0x001c, // CSIDL_LOCAL_APPDATA
    STSF_CommonAppData = 0x0023, // CSIDL_COMMON_APPDATA
    STSF_FlagCreate = 0x8000  // CSIDL_FLAG_CREATE 
} SpeechTokenShellFolder;

[
    odl,
    uuid(C74A3ADC-B727-4500-A84A-B526721C8B8C),
    dual,
    helpstring("ISpeechObjectToken Interface")
]
interface ISpeechObjectToken : IDispatch
{
    //  Properties

    // Id
    //  SAPI C++ Only Interface Equivalent: GetId
    //  Default: N/A
    //
    [propget, helpstring("Id"), id(1)]
    HRESULT Id([out, retval]BSTR* ObjectId);

    // DataKey
    //  SAPI C++ Only Interface Equivalent: Inherited from ISpDataKey
    //  Default: N/A
    //
    [propget, helpstring("DataKey"), id(2), hidden]
    HRESULT DataKey([out, retval]ISpeechDataKey** DataKey);

    // Category
    //  SAPI C++ Only Interface Equivalent: GetCategory
    //  Default: N/A
    //
    [propget, helpstring("Category"), id(3)]
    HRESULT Category([out, retval]ISpeechObjectTokenCategory** Category);

    //  Methods

    // GetDescription
    //  SAPI C++ Only Interface Equivalent: New
    //
    [helpstring("GetDescription"), id(4)]
    HRESULT GetDescription([in]long Locale,
        [out, retval]BSTR* Description);

    // SetId
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("SetId"), id(5)]
    HRESULT SetId([in] BSTR Id,
        [in] BSTR CategoryID,
        [in]VARIANT_BOOL CreateIfNotExist);

    // GetAttribute
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("GetAttribute"), id(6)]
    HRESULT GetAttribute([in] BSTR AttributeName,
        [out, retval]BSTR* AttributeValue);

    // CreateInstance
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("CreateInstance"), id(7)]
    HRESULT CreateInstance([in] IUnknown* pUnkOuter,
        [in] SpeechTokenContext ClsContext,
        [out, retval] IUnknown** Object);

    // Remove
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("Remove"), id(8)]
    HRESULT Remove([in]BSTR ObjectStorageCLSID);

    // GetStorageFileName
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("GetStorageFileName"), id(9)]
    HRESULT GetStorageFileName([in]BSTR ObjectStorageCLSID,
        [in]BSTR KeyName,
        [in]BSTR FileName,
        [in]SpeechTokenShellFolder Folder,
        [out, retval]BSTR* FilePath);

    // Remove
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("RemoveStorageFileName"), id(10)]
    HRESULT RemoveStorageFileName([in]BSTR ObjectStorageCLSID,
        [in]BSTR KeyName,
        [in]VARIANT_BOOL DeleteFile);

    // IsUISupported
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("IsUISupported"), id(11)]
    HRESULT IsUISupported([in] BSTR TypeOfUI,
        [in] VARIANT* ExtraData,
        [in] IUnknown* Object,
        [out, retval] VARIANT_BOOL* Supported);

    // DisplayUI
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("DisplayUI"), id(12)]
    HRESULT DisplayUI([in]long hWnd,
        [in] BSTR Title,
        [in] BSTR TypeOfUI,
        [in] VARIANT* ExtraData,
        [in] IUnknown* Object);

    // MatchesAttributes
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("MatchesAttributes"), id(13)]
    HRESULT MatchesAttributes([in]BSTR Attributes,
        [out, retval] VARIANT_BOOL* Matches);
};


////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechObjectTokens               
//  SAPI C++ Only Interface Equivalent: IEnumObjectTokens
//  Default Property: Item
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechObjectTokens
{
    DISPID_SOTsCount = 1,
    DISPID_SOTsItem = 0,
    DISPID_SOTs_NewEnum = -4
} DISPID_SpeechObjectTokens;

[
    odl,
    uuid(9285B776-2E7B-4bc0-B53E-580EB6FA967F),
    dual,
    helpstring("ISpeechObjectTokens Interface")
]
interface ISpeechObjectTokens : IDispatch
{
    // Property

    // Count
    //  SAPI C++ Only Interface Equivalent: GetCount
    //
    [propget, helpstring("Count"), id(1)]
    HRESULT Count([out, retval] long* Count);

    // Methods

    // Item
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("Item"), id(0)]
    HRESULT Item([in] long Index, [out, retval]ISpeechObjectToken** Token);

    // _NewEnum
    //  SAPI C++ Only Interface Equivalent: N/A
    //
    [propget, helpstring("Enumerates the tokens"), id(-4)]
    HRESULT _NewEnum([out, retval] IUnknown** ppEnumVARIANT);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechObjectTokenCategory               
//
//  SAPI C++ Only Interface Equivalent: ISpObjectTokenCategory
//  Default Property: Id
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechObjectTokenCategory
{
    DISPID_SOTCId = 1,
    DISPID_SOTCDefault,
    DISPID_SOTCSetId,
    DISPID_SOTCGetDataKey,
    DISPID_SOTCEnumerateTokens,
} DISPID_SpeechObjectTokenCategory;

[
    odl,
    uuid(CA7EAC50-2D01-4145-86D4-5AE7D70F4469),
    dual,
    helpstring("ISpeechObjectTokenCategory Interface")
]
interface ISpeechObjectTokenCategory : IDispatch
{
    // Properties

    // Id
    //  SAPI C++ Only Interface Equivalent: GetId
    //
    [propget, helpstring("Id"), id(1)]
    HRESULT Id([out, retval] BSTR* Id);

    // Default
    //  SAPI C++ Only Interface Equivalent: Set/GetDefaultTokenId
    //
    [propput, helpstring("Default"), id(2)]
    HRESULT Default([in] BSTR TokenId);
    [propget, helpstring("Default"), id(2)]
    HRESULT Default([out, retval] BSTR* TokenId);

    // Methods

    // SetId
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("SetId"), id(3)]
    HRESULT SetId([in] BSTR Id, [in]VARIANT_BOOL CreateIfNotExist);

    // GetDataKey
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("GetDataKey"), id(4)]
    HRESULT GetDataKey([in]SpeechDataKeyLocation Location,
        [out, retval]ISpeechDataKey** DataKey);

    // EnumerateTokens
    //  SAPI C++ Only Interface Equivalent: EnumTokens
    //
    [helpstring("EnumerateTokens"), id(5)]
    HRESULT EnumerateTokens([in]BSTR RequiredAttributes,
        [in]BSTR OptionalAttributes,
        [out, retval]ISpeechObjectTokens** Tokens);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechAudioFormat               
//  SAPI C++ Only Interface Equivalent: ISpStreamFormat
//  Default Property: N/A
//  
////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////
//
// SpeechAudioFormatType
//  SAPI C++ Only Interface Equivalent: SPSTREAMFORMAT
//
//////////////////////////////////

typedef enum SpeechAudioFormatType {
    [hidden] SAFTDefault = -1,
    [hidden] SAFTNoAssignedFormat = 0,
    [hidden] SAFTText,
    [hidden] SAFTNonStandardFormat,     // Non-SAPI standard format with no WAVEFORMATEX description
    [hidden] SAFTExtendedAudioFormat,   // Non-SAPI standard format but has WAVEFORMATEX description
    // Standard PCM wave formats
    SAFT8kHz8BitMono,
    SAFT8kHz8BitStereo,
    SAFT8kHz16BitMono,
    SAFT8kHz16BitStereo,
    SAFT11kHz8BitMono,
    SAFT11kHz8BitStereo,
    SAFT11kHz16BitMono,
    SAFT11kHz16BitStereo,
    SAFT12kHz8BitMono,
    SAFT12kHz8BitStereo,
    SAFT12kHz16BitMono,
    SAFT12kHz16BitStereo,
    SAFT16kHz8BitMono,
    SAFT16kHz8BitStereo,
    SAFT16kHz16BitMono,
    SAFT16kHz16BitStereo,
    SAFT22kHz8BitMono,
    SAFT22kHz8BitStereo,
    SAFT22kHz16BitMono,
    SAFT22kHz16BitStereo,
    SAFT24kHz8BitMono,
    SAFT24kHz8BitStereo,
    SAFT24kHz16BitMono,
    SAFT24kHz16BitStereo,
    SAFT32kHz8BitMono,
    SAFT32kHz8BitStereo,
    SAFT32kHz16BitMono,
    SAFT32kHz16BitStereo,
    SAFT44kHz8BitMono,
    SAFT44kHz8BitStereo,
    SAFT44kHz16BitMono,
    SAFT44kHz16BitStereo,
    SAFT48kHz8BitMono,
    SAFT48kHz8BitStereo,
    SAFT48kHz16BitMono,
    SAFT48kHz16BitStereo,
    // TrueSpeech format
    SAFTTrueSpeech_8kHz1BitMono,
    // A-Law formats
    SAFTCCITT_ALaw_8kHzMono,
    SAFTCCITT_ALaw_8kHzStereo,
    SAFTCCITT_ALaw_11kHzMono,
    SAFTCCITT_ALaw_11kHzStereo,
    SAFTCCITT_ALaw_22kHzMono,
    SAFTCCITT_ALaw_22kHzStereo,
    SAFTCCITT_ALaw_44kHzMono,
    SAFTCCITT_ALaw_44kHzStereo,
    // u-Law formats
    SAFTCCITT_uLaw_8kHzMono,
    SAFTCCITT_uLaw_8kHzStereo,
    SAFTCCITT_uLaw_11kHzMono,
    SAFTCCITT_uLaw_11kHzStereo,
    SAFTCCITT_uLaw_22kHzMono,
    SAFTCCITT_uLaw_22kHzStereo,
    SAFTCCITT_uLaw_44kHzMono,
    SAFTCCITT_uLaw_44kHzStereo,
    // ADPCM formats
    SAFTADPCM_8kHzMono,
    SAFTADPCM_8kHzStereo,
    SAFTADPCM_11kHzMono,
    SAFTADPCM_11kHzStereo,
    SAFTADPCM_22kHzMono,
    SAFTADPCM_22kHzStereo,
    SAFTADPCM_44kHzMono,
    SAFTADPCM_44kHzStereo,
    // GSM 6.10 formats
    SAFTGSM610_8kHzMono,
    SAFTGSM610_11kHzMono,
    SAFTGSM610_22kHzMono,
    SAFTGSM610_44kHzMono,
} SpeechAudioFormatType;

typedef [hidden] enum DISPID_SpeechAudioFormat
{
    DISPID_SAFType = 1,
    DISPID_SAFGuid,
    DISPID_SAFGetWaveFormatEx,
    DISPID_SAFSetWaveFormatEx
} DISPID_SpeechAudioFormat;

[
    odl,
    uuid(E6E9C590-3E18-40e3-8299-061F98BDE7C7),
    dual,
    helpstring("ISpeechAudioFormat Interface")
]
interface ISpeechAudioFormat : IDispatch {
    // Properties

    // Type  
    //  SAPI C++ Only Interface Equivalent:
    //  Default: GetFormat
    //
    [propget, helpstring("Type"), id(1)]
    HRESULT Type([out, retval]SpeechAudioFormatType* AudioFormat);
    [propput, helpstring("Type"), id(1)]
    HRESULT Type([in]SpeechAudioFormatType AudioFormat);

    // Guid  
    //  SAPI C++ Only Interface Equivalent:
    //  Default: N/A (used to be parameter of GetFormat)
    //
    [propget, hidden, helpstring("Guid"), id(2)]
    HRESULT Guid([out, retval]BSTR* Guid);
    [propput, hidden, helpstring("Guid"), id(2)]
    HRESULT Guid([in]BSTR Guid);

    // Methods

    // GetWaveFormatEx  
    //  SAPI C++ Only Interface Equivalent: (used to be parameter of GetFormat)
    //
    [hidden, helpstring("GetWaveFormatEx"), id(3)]
    HRESULT GetWaveFormatEx([out, retval]ISpeechWaveFormatEx** SpeechWaveFormatEx);

    // GetWaveFormatEx  
    //  SAPI C++ Only Interface Equivalent: (used to be parameter of GetFormat)
    //
    [hidden, helpstring("SetWaveFormatEx"), id(4)]
    HRESULT SetWaveFormatEx([in]ISpeechWaveFormatEx* SpeechWaveFormatEx);
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechBaseStream                
//  SAPI C++ Only Interface Equivalent: ISpStreamFormat and IStream
//  Default Property: Format
//  
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechBaseStream
{
    DISPID_SBSFormat = 1,
    DISPID_SBSRead,
    DISPID_SBSWrite,
    DISPID_SBSSeek
} DISPID_SpeechBaseStream;

//////////////////////////////////
//
// SpeechStreamSeekPositionType
//  SAPI C++ Only Interface Equivalent: N/A
//
//////////////////////////////////

typedef enum SpeechStreamSeekPositionType
{
    SSSPTRelativeToStart = 0,
    SSSPTRelativeToCurrentPosition = 1,
    SSSPTRelativeToEnd = 2
} SpeechStreamSeekPositionType;

[
    odl,
    uuid(6450336F-7D49-4ced-8097-49D6DEE37294),
    dual,
    helpstring("ISpeechBaseStream Interface")
]
interface ISpeechBaseStream : IDispatch
{
    // Properties

    // Format
    //  SAPI C++ Only Interface Equivalent: N/A
    //  Default: N/A
    //
    [propget, helpstring("Format"), id(1)]
    HRESULT Format([out, retval]ISpeechAudioFormat** AudioFormat);
    [propputref, helpstring("Format"), id(1)]
    HRESULT Format([in]ISpeechAudioFormat* AudioFormat);

    // Methods


    // Read
    //  SAPI C++ Only Interface Equivalent: N/A
    //
    [helpstring("Read"), id(2)]
    HRESULT Read([out]VARIANT* Buffer, [in]long NumberOfBytes, [out, retval]long* BytesRead);

    // Write
    //  SAPI C++ Only Interface Equivalent: N/A
    //
    [helpstring("Write"), id(3)]
    HRESULT Write([in]VARIANT Buffer, [out, retval]long* BytesWritten);

    // Seek
    //  SAPI C++ Only Interface Equivalent: N/A
    //
    [helpstring("Seek"), id(4)]
    HRESULT Seek([in]VARIANT Position, [in]SpeechStreamSeekPositionType Origin, [out, retval]VARIANT* NewPosition);
};


////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechAudio               
//  SAPI C++ Only Interface Equivalent: ISpAudio
//  Default Property: Volume
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechAudio
{
    DISPID_SAStatus = 200,
    DISPID_SABufferInfo,
    DISPID_SADefaultFormat,
    DISPID_SAVolume,
    DISPID_SABufferNotifySize,
    DISPID_SAEventHandle,
    DISPID_SASetState
} DISPID_SpeechAudio;

//////////////////////////////////
//
// SpeechAudioState
//  SAPI C++ Only Interface Equivalent: _SPAUDIOSTATE
//
//////////////////////////////////

typedef enum SpeechAudioState
{
    SASClosed,
    SASStop,
    SASPause,
    SASRun
} SpeechAudioState;

[
    odl,
    uuid(CFF8E175-019E-11d3-A08E-00C04F8EF9B5),
    dual,
    helpstring("ISpeechAudio Interface")
]
interface ISpeechAudio : ISpeechBaseStream
{
    // Properties

    // Status
    //  SAPI C++ Only Interface Equivalent: GetStatus
    //  Default: N/A
    //
    [propget, helpstring("Status"), id(200)]
    HRESULT Status([out, retval]ISpeechAudioStatus** Status);

    // BufferInfo
    //  SAPI C++ Only Interface Equivalent: GetBufferInfo
    //  Default: N/A
    //
    [propget, helpstring("BufferInfo"), id(201)]
    HRESULT BufferInfo([out, retval]ISpeechAudioBufferInfo** BufferInfo);

    // DefaultFormat
    //  SAPI C++ Only Interface Equivalent: GetDefaultFormat
    //  Default: N/A
    //
    [propget, helpstring("DefaultFormat"), id(202)]
    HRESULT DefaultFormat([out, retval]ISpeechAudioFormat** StreamFormat);

    // Volume
    //  SAPI C++ Only Interface Equivalent: GetVolumeLevel 
    //  Default: N/A
    //
    [propget, helpstring("Volume"), id(203)]
    HRESULT Volume([out, retval]long* Volume);
    [propput, helpstring("Volume"), id(203)]
    HRESULT Volume([in]long Volume);

    // BufferNotifySize
    //  SAPI C++ Only Interface Equivalent: GetBufferNotifySize 
    //  Default: N/A
    //
    [propget, helpstring("BufferNotifySize"), id(204)]
    HRESULT BufferNotifySize([out, retval]long* BufferNotifySize);
    [propput, helpstring("BufferNotifySize"), id(204)]
    HRESULT BufferNotifySize([in]long BufferNotifySize);

    // EventHandle
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: N/A
    //
    [propget, hidden, helpstring("EventHandle"), id(205)]
    HRESULT EventHandle([out, retval]long* EventHandle);

    // Methods 

    // SetState
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("SetState"), id(206), hidden]
    HRESULT SetState([in] SpeechAudioState State);

};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechMMSysAudio               
//  SAPI C++ Only Interface Equivalent: ISpMMSysAudio
//  Default Property: N/A
//  
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechMMSysAudio
{
    DISPID_SMSADeviceId = 300,
    DISPID_SMSALineId,
    DISPID_SMSAMMHandle
} DISPID_SpeechMMSysAudio;

[
    odl,
    uuid(3C76AF6D-1FD7-4831-81D1-3B71D5A13C44),
    dual,
    helpstring("ISpeechMMSysAudio Interface")
]
interface ISpeechMMSysAudio : ISpeechAudio
{
    // Properties

    // DeviceId
    //  SAPI C++ Only Interface Equivalent: Get/SetDeviceId 
    //  Default: N/A
    //
    [propget, helpstring("DeviceId"), id(300)]
    HRESULT DeviceId([out, retval] long* DeviceId);
    [propput, helpstring("DeviceId"), id(300)]
    HRESULT DeviceId([in] long DeviceId);

    // LineId
    //  SAPI C++ Only Interface Equivalent: Get/SetLineId 
    //  Default: N/A
    //
    [propget, helpstring("LineId"), id(301)]
    HRESULT LineId([out, retval] long* LineId);
    [propput, helpstring("LineId"), id(301)]
    HRESULT LineId([in] long LineId);

    // MMHandle
    //  SAPI C++ Only Interface Equivalent: GetMMHandle 
    //  Default: N/A
    //
    [propget, hidden, helpstring("MMHandle"), id(302)]
    HRESULT MMHandle([out, retval] long* Handle);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechFileStream
//  SAPI C++ Only Interface Equivalent: ISpStream
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechFileStream
{
    DISPID_SFSOpen = 100,
    DISPID_SFSClose
} DISPID_SpeechFileStream;

//////////////////////////////////
//
// SpeechStreamFileMode Enum
//  SAPI C++ Only Interface Equivalent: 
//
//////////////////////////////////

typedef enum SpeechStreamFileMode
{
    SSFMOpenForRead, // = SPFM_OPEN_READONLY,      // Open existing file, read-only. 
    [hidden] SSFMOpenReadWrite, // = SPFM_OPEN_READWRITE,    // (Not supported for wav files) Open existing file, read-write. 
    [hidden] SSFMCreate, // = SPFM_CREATE,                   // (Not supported for wav files) Open file if exists, else create if does not exist (opens read-write) 
    SSFMCreateForWrite, // = SPFM_CREATE_ALWAYS,      // Create file even if file exists.  Destroys old file.
} SpeechStreamFileMode;

[
    odl,
    uuid(AF67F125-AB39-4e93-B4A2-CC2E66E182A7),
    dual,
    helpstring("ISpeechFileStream Interface")
]
interface ISpeechFileStream : ISpeechBaseStream
{
    // Properties

    // Methods

    // Open
    //  SAPI C++ Only Interface Equivalent: BindToFile 
    //  Default: N/A
    //
    [helpstring("Open"), id(100)]
    HRESULT Open([in] BSTR FileName,
        [in] SpeechStreamFileMode FileMode,
        [in]VARIANT_BOOL DoEvents);

    // Close
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: N/A
    //
    [helpstring("Close"), id(101)]
    HRESULT Close(void);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechCustomStream
//  SAPI C++ Only Interface Equivalent: ISpStream
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechCustomStream
{
    DISPID_SCSBaseStream = 100
} DISPID_SpeechCustomStream;


[
    odl,
    uuid(1A9E9F4F-104F-4db8-A115-EFD7FD0C97AE),
    dual,
    helpstring("ISpeechCustomStream Interface")
]
interface ISpeechCustomStream : ISpeechBaseStream
{
    // Properties

    // BaseStream
    //  SAPI C++ Only Interface Equivalent: ISpStream::Get/SetBaseStream
    //  Default: N/A
    //
    [propget, helpstring("BaseStream"), id(100)]
    HRESULT BaseStream([out, retval] IUnknown** ppUnkStream);
    [propputref, helpstring("BaseStream"), id(100)]
    HRESULT BaseStream([in] IUnknown* pUnkStream);

    // Methods
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechMemoryStream
//  SAPI C++ Only Interface Equivalent: ISpStream
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechMemoryStream
{
    DISPID_SMSSetData = 100,
    DISPID_SMSGetData
} DISPID_SpeechMemoryStream;

[
    odl,
    uuid(EEB14B68-808B-4abe-A5EA-B51DA7588008),
    dual,
    helpstring("ISpeechMemoryStream Interface")
]
interface ISpeechMemoryStream : ISpeechBaseStream
{
    // Properties

    // Methods

    // SetData
    //  SAPI C++ Only Interface Equivalent: N/A
    //
    [helpstring("SetData"), id(100)]
    HRESULT SetData([in] VARIANT Data);

    // GetData
    //  SAPI C++ Only Interface Equivalent: N/A
    //
    [helpstring("GetData"), id(101)]
    HRESULT GetData([out, retval] VARIANT* pData);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechAudioStatus                 
//  SAPI C++ Only Interface Equivalent: SPAUDIOSTATUS Struct
//  Default Property: N/A
//  
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechAudioStatus
{
    DISPID_SASFreeBufferSpace = 1,
    DISPID_SASNonBlockingIO,
    DISPID_SASState,
    DISPID_SASCurrentSeekPosition,
    DISPID_SASCurrentDevicePosition
} DISPID_SpeechAudioStatus;

[
    odl,
    uuid(C62D9C91-7458-47f6-862D-1EF86FB0B278),
    dual,
    helpstring("ISpeechAudioStatus Interface")
]
interface ISpeechAudioStatus : IDispatch
{
    // Properties

    // FreeBufferSpace
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: N/A
    //
    [propget, helpstring("FreeBufferSpace"), id(1)]
    HRESULT FreeBufferSpace([out, retval]long* FreeBufferSpace);

    // NonBlockingIO
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: N/A
    //
    [propget, helpstring("NonBlockingIO"), id(2)]
    HRESULT NonBlockingIO([out, retval]long* NonBlockingIO);

    // State
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: N/A
    //
    [propget, helpstring("State"), id(3)]
    HRESULT State([out, retval] SpeechAudioState* State);

    // CurrentSeekPosition
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: N/A
    //
    [propget, helpstring("CurrentSeekPosition"), id(4)]
    HRESULT CurrentSeekPosition([out, retval]VARIANT* CurrentSeekPosition);

    // CurrentDevicePosition
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: N/A
    //
    [propget, helpstring("CurrentDevicePosition"), id(5)]
    HRESULT CurrentDevicePosition([out, retval]VARIANT* CurrentDevicePosition);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  ISpeechAudioBufferInfo               
//  P3. We're not sure what this is for. Should be hidden?
//  SAPI C++ Only Interface Equivalent: SPAUDIOBUFFERINFO Struct
//  Default Property: N/A
//  
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechAudioBufferInfo
{
    DISPID_SABIMinNotification = 1,
    DISPID_SABIBufferSize,
    DISPID_SABIEventBias
} DISPID_SpeechAudioBufferInfo;

[
    odl,
    uuid(11B103D8-1142-4edf-A093-82FB3915F8CC),
    dual,
    helpstring("ISpeechAudioBufferInfo Interface")
]
interface ISpeechAudioBufferInfo : IDispatch
{
    // Properties

    // MinNotification
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: N/A
    //
    [propget, helpstring("MinNotification"), id(1)]
    HRESULT  MinNotification([out, retval]long* MinNotification);
    [propput, helpstring("MinNotification"), id(1)]
    HRESULT  MinNotification([in]long MinNotification);

    // BufferSize
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: N/A
    //
    [propget, helpstring("BufferSize"), id(2)]
    HRESULT  BufferSize([out, retval]long* BufferSize);
    [propput, helpstring("BufferSize"), id(2)]
    HRESULT  BufferSize([in]long BufferSize);

    // EventBias
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: N/A
    //
    [propget, helpstring("EventBias"), id(3)]
    HRESULT  EventBias([out, retval]long* EventBias);
    [propput, helpstring("EventBias"), id(3)]
    HRESULT  EventBias([in]long EventBias);
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechWaveFormatEx
//  SAPI C++ Only Interface Equivalent:  WAVEFORMATEX Struct
//  Default Property: N/A
//  
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechWaveFormatEx
{
    DISPID_SWFEFormatTag = 1,
    DISPID_SWFEChannels,
    DISPID_SWFESamplesPerSec,
    DISPID_SWFEAvgBytesPerSec,
    DISPID_SWFEBlockAlign,
    DISPID_SWFEBitsPerSample,
    DISPID_SWFEExtraData
} DISPID_SpeechWaveFormatEx;

[
    odl,
    uuid(7A1EF0D5-1581-4741-88E4-209A49F11A10),
    dual,
    helpstring("ISpeechWaveFormatEx Interface")
]
interface ISpeechWaveFormatEx : IDispatch
{
    // Properties

    // FormatTag
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: N/A
    //
    [propget, helpstring("FormatTag"), id(1)]
    HRESULT FormatTag([out, retval]short* FormatTag);
    [propput, helpstring("FormatTag"), id(1)]
    HRESULT FormatTag([in]short FormatTag);

    // Channels
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: N/A
    //
    [propget, helpstring("Channels"), id(2)]
    HRESULT Channels([out, retval]short* Channels);
    [propput, helpstring("Channels"), id(2)]
    HRESULT Channels([in]short Channels);

    // SamplesPerSec
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: N/A
    //
    [propget, helpstring("SamplesPerSec"), id(3)]
    HRESULT SamplesPerSec([out, retval]long* SamplesPerSec);
    [propput, helpstring("SamplesPerSec"), id(3)]
    HRESULT SamplesPerSec([in]long SamplesPerSec);

    // AvgBytesPerSec
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: N/A
    //
    [propget, helpstring("AvgBytesPerSec"), id(4)]
    HRESULT AvgBytesPerSec([out, retval]long* AvgBytesPerSec);
    [propput, helpstring("AvgBytesPerSec"), id(4)]
    HRESULT AvgBytesPerSec([in]long AvgBytesPerSec);

    // BlockAlign
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: N/A
    //
    [propget, helpstring("BlockAlign"), id(5)]
    HRESULT BlockAlign([out, retval]short* BlockAlign);
    [propput, helpstring("BlockAlign"), id(5)]
    HRESULT BlockAlign([in]short BlockAlign);

    // BitsPerSample
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: N/A
    //
    [propget, helpstring("BitsPerSample"), id(6)]
    HRESULT BitsPerSample([out, retval]short* BitsPerSample);
    [propput, helpstring("BitsPerSample"), id(6)]
    HRESULT BitsPerSample([in]short BitsPerSample);

    // ExtraData
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: N/A
    //
    [propget, helpstring("ExtraData"), id(7)]
    HRESULT ExtraData([out, retval]VARIANT* ExtraData);
    [propput, helpstring("ExtraData"), id(7)]
    HRESULT ExtraData([in]VARIANT ExtraData);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechVoice               
//  SAPI C++ Only Interface Equivalent: ISpVoice
//  Default Property: Speak
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechVoice
{
    DISPID_SVStatus = 1,
    DISPID_SVVoice,
    DISPID_SVAudioOutput,
    DISPID_SVAudioOutputStream,
    DISPID_SVRate,
    DISPID_SVVolume,
    DISPID_SVAllowAudioOuputFormatChangesOnNextSet,
    DISPID_SVEventInterests,
    DISPID_SVPriority,
    DISPID_SVAlertBoundary,
    DISPID_SVSyncronousSpeakTimeout,
    DISPID_SVSpeak,
    DISPID_SVSpeakStream,
    DISPID_SVPause,
    DISPID_SVResume,
    DISPID_SVSkip,
    DISPID_SVGetVoices,
    DISPID_SVGetAudioOutputs,
    DISPID_SVWaitUntilDone,
    DISPID_SVSpeakCompleteEvent,
    DISPID_SVIsUISupported,
    DISPID_SVDisplayUI
} DISPID_SpeechVoice;

//////////////////////////////////
//
//  SpeechVoicePriority Enum
//  SAPI C++ Only Interface Equivalent: SPVPRIORITY
//
//////////////////////////////////

typedef enum SpeechVoicePriority
{
    SVPNormal = 0, //SPVPRI_NORMAL,
    SVPAlert = 1, //SPVPRI_ALERT,
    SVPOver = 2 //SPVPRI_OVER
} SpeechVoicePriority;

//////////////////////////////////
//
//  SpeechVoiceSpeakFlags Enum
//  SAPI C++ Only Interface Equivalent: SPEAKFLAGS
//
//////////////////////////////////

typedef enum SpeechVoiceSpeakFlags
{
//    //--- SpeechVoice flags
//    SVSFDefault = SPF_DEFAULT,
//    SVSFlagsAsync = SPF_ASYNC,
//    SVSFPurgeBeforeSpeak = SPF_PURGEBEFORESPEAK,
//    SVSFIsFilename = SPF_IS_FILENAME,
//    SVSFIsXML = SPF_IS_XML,
//    SVSFIsNotXML = SPF_IS_NOT_XML,
//    SVSFPersistXML = SPF_PERSIST_XML,
//
//    //--- Normalizer flags
//    SVSFNLPSpeakPunc = SPF_NLP_SPEAK_PUNC,
//
////#if _SAPI_BUILD_VER >= 0x053
//    //--- TTS Format 
//    SVSFParseSapi = SPF_PARSE_SAPI,
//    SVSFParseSsml = SPF_PARSE_SSML,
//    SVSFParseAutodetect = SPF_PARSE_AUTODETECT,
////#endif // _SAPI_BUILD_VER >= 0x053
//
//    //--- Masks
//    SVSFNLPMask = SPF_NLP_MASK,
////#if _SAPI_BUILD_VER >= 0x053
//    SVSFParseMask = SPF_PARSE_MASK,
////#endif // _SAPI_BUILD_VER >= 0x053
//    SVSFVoiceMask = SPF_VOICE_MASK,
//    SVSFUnusedFlags = SPF_UNUSED_FLAGS,
    SVSFDefault = 0,
    SVSFlagsAsync = 1,
    SVSFPurgeBeforeSpeak = 2,
    SVSFIsFilename = 4,
    SVSFIsXML = 8,
    SVSFIsNotXML = 16,
    SVSFPersistXML = 32,
    SVSFNLPSpeakPunc = 64,
    SVSFParseSapi = 128,
    SVSFParseSsml = 256,
    SVSFParseAutodetect = 0,
    SVSFNLPMask = 64,
    SVSFParseMask = 384,
    SVSFVoiceMask = 511,
    SVSFUnusedFlags = -512,
} SpeechVoiceSpeakFlags;

//////////////////////////////////
//
//  SpeechVoiceEvents Enum
//  SAPI C++ Only Interface Equivalent: N/A 
//
//////////////////////////////////

typedef enum SpeechVoiceEvents
{
    SVEStartInputStream = 2, // (1L << 1),
    SVEEndInputStream = 4, // (1L << 2),
    SVEVoiceChange = 8, //(1L << 3),
    SVEBookmark = 16, //(1L << 4),
    SVEWordBoundary = 32, //(1L << 5),
    SVEPhoneme = 64, //(1L << 6),
    SVESentenceBoundary = 128, //(1L << 7),
    SVEViseme = 256, //(1L << 8),
    SVEAudioLevel = 512, //(1L << 9),
    SVEPrivate = 1024, //(1L << 15),
    SVEAllEvents = 0x083FE      // All TTS events on.
} SpeechVoiceEvents;

[
    odl,
    uuid(269316D8-57BD-11D2-9EEE-00C04F797396),
    dual,
    helpstring("ISpeechVoice Interface")
]
interface ISpeechVoice : IDispatch
{
    // Status
    //  SAPI C++ Only Interface Equivalent: GetStatus
    //  Default: 
    //
    [propget, helpstring("Status"), id(1)]
    HRESULT Status([out, retval] ISpeechVoiceStatus** Status);

    // Voice
    //  SAPI C++ Only Interface Equivalent: Get/SetVoice
    //  Default: 
    //
    [propget, helpstring("Voice"), id(2)]
    HRESULT Voice([out, retval] ISpeechObjectToken** Voice);
    [propputref, helpstring("Voice"), id(2)]
    HRESULT Voice([in]ISpeechObjectToken* Voice);

    // AudioOutput
    //  SAPI C++ Only Interface Equivalent: GetOutputObjectTokens/SetOutput
    //  Default: 
    //
    [propget, helpstring("Gets the audio output object"), id(3)]
    HRESULT AudioOutput([out, retval]ISpeechObjectToken** AudioOutput);
    [propputref, helpstring("Sets the audio output object"), id(3)]
    HRESULT AudioOutput([in]ISpeechObjectToken* AudioOutput);

    // AudioOutputStream
    //  SAPI C++ Only Interface Equivalent: GetOutputStream/SetOutput
    //  Default: 
    //
    [propget, helpstring("Gets the audio output stream"), id(4)]
    HRESULT AudioOutputStream([out, retval]ISpeechBaseStream** AudioOutputStream);
    [propputref, helpstring("Sets the audio output stream"), id(4)]
    HRESULT AudioOutputStream([in]ISpeechBaseStream* AudioOutputStream);

    // Rate
    //  SAPI C++ Only Interface Equivalent: Get/SetRate
    //  Default: 
    //
    [propget, helpstring("Rate"), id(5)]
    HRESULT Rate([out, retval] long* Rate);
    [propput, helpstring("Rate"), id(5)]
    HRESULT Rate([in] long Rate);

    // Volume
    //  SAPI C++ Only Interface Equivalent: Get/SetVolume
    //  Default: 
    //
    [propget, helpstring("Volume"), id(6)]
    HRESULT Volume([out, retval] long* Volume);
    [propput, helpstring("Volume"), id(6)]
    HRESULT Volume([in] long Volume);

    // AllowAudioOutputFormatChangesOnNextSet
    //  SAPI C++ Only Interface Equivalent: N/A (used to be parameter of SetOutput)
    //  Default: 
    //
    [propput, hidden, helpstring("AllowAudioOutputFormatChangesOnNextSet"), id(7)]
    HRESULT AllowAudioOutputFormatChangesOnNextSet([in] VARIANT_BOOL Allow);
    [propget, hidden, helpstring("AllowAudioOutputFormatChangesOnNextSet"), id(7)]
    HRESULT AllowAudioOutputFormatChangesOnNextSet([out, retval] VARIANT_BOOL* Allow);

    // EventInterests
    //  SAPI C++ Only Interface Equivalent: ISpEventSink::GetEventInterests
    //  Default: 
    //
    [propget, helpstring("EventInterests"), id(8)]
    HRESULT EventInterests([out, retval] SpeechVoiceEvents* EventInterestFlags);
    [propput, helpstring("EventInterests"), id(8)]
    HRESULT EventInterests([in] SpeechVoiceEvents EventInterestFlags);

    // Priority
    //  SAPI C++ Only Interface Equivalent: Get/SetPriority
    //  Default: 
    //
    [propput, helpstring("Priority"), id(9)]
    HRESULT Priority([in] SpeechVoicePriority Priority);
    [propget, helpstring("Priority"), id(9)]
    HRESULT Priority([out, retval] SpeechVoicePriority* Priority);

    // AlertBoundary
    //  SAPI C++ Only Interface Equivalent: Get/SetAlertBoundary
    //  Default: 
    //
    [propput, helpstring("AlertBoundary"), id(10)]
    HRESULT AlertBoundary([in] SpeechVoiceEvents Boundary);
    [propget, helpstring("AlertBoundary"), id(10)]
    HRESULT AlertBoundary([out, retval] SpeechVoiceEvents* Boundary);

    // SyncSpeakTimeout
    //  SAPI C++ Only Interface Equivalent: Get/SetSyncSpeakTimeout
    //  Default: 
    //
    [propput, helpstring("SyncSpeakTimeout"), id(11)]
    HRESULT SynchronousSpeakTimeout([in] long msTimeout);
    [propget, helpstring("SyncSpeakTimeout"), id(11)]
    HRESULT SynchronousSpeakTimeout([out, retval] long* msTimeout);

    //  Methods

    // Speak
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("Speak"), id(12)]
    HRESULT Speak([in] BSTR Text,
        [in] SpeechVoiceSpeakFlags Flags,
        [out, retval]long* StreamNumber);

    // SpeakStream
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("SpeakStream"), id(13)]
    HRESULT SpeakStream([in] ISpeechBaseStream* Stream,
        [in] SpeechVoiceSpeakFlags Flags,
        [out, retval]long* StreamNumber);

    // Pause
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("Pauses the voices rendering."), id(14)]
    HRESULT Pause(void);

    // Resume
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("Resumes the voices rendering."), id(15)]
    HRESULT Resume(void);

    // Skip
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("Skips rendering the specified number of items."), id(16)]
    HRESULT Skip([in] BSTR Type, [in]long NumItems, [out, retval]long* NumSkipped);

    // GetVoices
    //  SAPI C++ Only Interface Equivalent: IEnumSpObjectTokens
    //
    [helpstring("GetVoices"), id(17)]
    HRESULT GetVoices([in]BSTR RequiredAttributes,
        [in]BSTR OptionalAttributes,
        [out, retval]ISpeechObjectTokens** ObjectTokens);

    // GetAudioOutputs
    //  SAPI C++ Only Interface Equivalent: IEnumSpObjectTokens
    //
    [helpstring("GetAudioOutputs"), id(18)]
    HRESULT GetAudioOutputs([in]BSTR RequiredAttributes,
        [in]BSTR OptionalAttributes,
        [out, retval]ISpeechObjectTokens** ObjectTokens);

    // WaitUntilDone
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("WaitUntilDone"), id(19)]
    HRESULT WaitUntilDone([in]long msTimeout, [out, retval]VARIANT_BOOL* Done);

    // SpeakCompleteEvent
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("SpeakCompleteEvent"), id(20)]
    HRESULT SpeakCompleteEvent([out, retval]long* Handle);

    // IsUISupported
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("IsUISupported"), id(21)]
    HRESULT IsUISupported([in] BSTR TypeOfUI,
        [in] VARIANT* ExtraData,
        [out, retval] VARIANT_BOOL* Supported);

    // DisplayUI
    //  SAPI C++ Only Interface Equivalent: Same
    //
    [helpstring("DisplayUI"), id(22)]
    HRESULT DisplayUI([in]long hWndParent,
        [in]BSTR Title,
        [in] BSTR TypeOfUI,
        [in] VARIANT* ExtraData);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  ISpeechVoiceStatus              
//  SAPI C++ Only Interface Equivalent: SPVOICESTATUS Struct
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechVoiceStatus
{
    DISPID_SVSCurrentStreamNumber = 1,
    DISPID_SVSLastStreamNumberQueued,
    DISPID_SVSLastResult,
    DISPID_SVSRunningState,
    DISPID_SVSInputWordPosition,
    DISPID_SVSInputWordLength,
    DISPID_SVSInputSentencePosition,
    DISPID_SVSInputSentenceLength,
    DISPID_SVSLastBookmark,
    DISPID_SVSLastBookmarkId,
    DISPID_SVSPhonemeId,
    DISPID_SVSVisemeId
} DISPID_SpeechVoiceStatus;

//////////////////////////////////
//
//  SpeechRunState Enum
//  SAPI C++ Only Interface Equivalent: SPRUNSTATE 
//
//////////////////////////////////

typedef enum SpeechRunState
{
    SRSEDone = 1, //SPRS_DONE,        // The voice is done rendering all queued phrases
    SRSEIsSpeaking = 2 // SPRS_IS_SPEAKING  // The SpVoice currently has the audio queue claimed
} SpeechRunState;

[
    odl,
    uuid(8BE47B07-57F6-11d2-9EEE-00C04F797396),
    dual,
    helpstring("ISpeechVoiceStatus Interface")
]
interface ISpeechVoiceStatus : IDispatch
{
    // CurrentStream
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: 
    //
    [propget, helpstring("CurrentStreamNumber"), id(1)]
    HRESULT CurrentStreamNumber([out, retval] long* StreamNumber);

    // LastStreamNumberQueued
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: 
    //
    [propget, helpstring("LastStreamNumberQueued"), id(2)]
    HRESULT LastStreamNumberQueued([out, retval] long* StreamNumber);

    // LastHResult
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: 
    //
    [propget, helpstring("LastHResult"), id(3)]
    HRESULT LastHResult([out, retval]long* HResult);

    // RunningState
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: 
    //
    [propget, helpstring("RunningState"), id(4)]
    HRESULT RunningState([out, retval] SpeechRunState* State);

    // InputWordPosition
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: 
    //
    [propget, helpstring("InputWordPosition"), id(5)]
    HRESULT InputWordPosition([out, retval] long* Position);

    // InputWordLength
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: 
    //
    [propget, helpstring("InputWordLength"), id(6)]
    HRESULT InputWordLength([out, retval] long* Length);

    // InputSentencePosition
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: 
    //
    [propget, helpstring("InputSentencePosition"), id(7)]
    HRESULT InputSentencePosition([out, retval] long* Position);

    // InputSentenceLength
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: 
    //
    [propget, helpstring("InputSentenceLength"), id(8)]
    HRESULT InputSentenceLength([out, retval] long* Length);

    // LastBookmark
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: 
    //
    [propget, helpstring("LastBookmark"), id(9)]
    HRESULT LastBookmark([out, retval] BSTR* Bookmark);

    // LastBookmarkId
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: 
    //
    [propget, helpstring("LastBookmarkId"), id(10), hidden]
    HRESULT LastBookmarkId([out, retval] long* BookmarkId);

    // PhonemeId
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: 
    //
    [propget, helpstring("PhonemeId"), id(11)]
    HRESULT PhonemeId([out, retval] short* PhoneId);

    // VisemeId
    //  SAPI C++ Only Interface Equivalent: Same
    //  Default: 
    //
    [propget, helpstring("VisemeId"), id(12)]
    HRESULT VisemeId([out, retval] short* VisemeId);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// _ISpeechVoiceEvents               
//  SAPI C++ Only Interface Equivalent: 
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////
//
// SpeechVisemeType Enum
//  SAPI C++ Only Interface Equivalent: SPVISEMES
//
//////////////////////////////////

typedef enum SpeechVisemeType
{
    // English example
    SVP_0 = 0,    // silence
    SVP_1,        // ae, ax, ah
    SVP_2,        // aa
    SVP_3,        // ao
    SVP_4,        // ey, eh, uh
    SVP_5,        // er
    SVP_6,        // y, iy, ih, ix
    SVP_7,        // w, uw
    SVP_8,        // ow
    SVP_9,        // aw
    SVP_10,       // oy
    SVP_11,       // ay
    SVP_12,       // h
    SVP_13,       // r
    SVP_14,       // l
    SVP_15,       // s, z
    SVP_16,       // sh, ch, jh, zh
    SVP_17,       // th, dh
    SVP_18,       // f, v
    SVP_19,       // d, t, n
    SVP_20,       // k, g, ng
    SVP_21,       // p, b, m 
} SpeechVisemeType;

//////////////////////////////////
//
// SpeechVisemeFeature Enum
//  SAPI C++ Only Interface Equivalent: 
//
//////////////////////////////////

typedef enum SpeechVisemeFeature
{
    SVF_None = 0,
    SVF_Stressed = 1, //SPVFEATURE_STRESSED,
    SVF_Emphasis = 2 // SPVFEATURE_EMPHASIS
} SpeechVisemeFeature;

typedef [hidden] enum DISPID_SpeechVoiceEvent
{
    DISPID_SVEStreamStart = 1,
    DISPID_SVEStreamEnd,
    DISPID_SVEVoiceChange,
    DISPID_SVEBookmark,
    DISPID_SVEWord,
    DISPID_SVEPhoneme,
    DISPID_SVESentenceBoundary,
    DISPID_SVEViseme,
    DISPID_SVEAudioLevel,
    DISPID_SVEEnginePrivate
} DISPID_SpeechVoiceEvent;

[
    uuid(A372ACD1-3BEF-4bbd-8FFB-CB3E2B416AF8)
]
dispinterface _ISpeechVoiceEvents
{
    properties:
    methods:

        // StartStream
        //  SAPI C++ Only Interface Equivalent:
        //
        [helpstring("StartStream"), id(1)]
            void StartStream([in]long StreamNumber,[in]VARIANT StreamPosition);

            // EndStream
            //  SAPI C++ Only Interface Equivalent:
            //
            [helpstring("EndStream"), id(2)]
                void EndStream([in]long StreamNumber,[in]VARIANT StreamPosition);

                // VoiceChange
                //  SAPI C++ Only Interface Equivalent:
                //
                [helpstring("VoiceChange"), id(3)]
                    void VoiceChange([in]long StreamNumber,
                                      [in]VARIANT StreamPosition,
                                      [in]ISpeechObjectToken* VoiceObjectToken);

                    // Bookmark
                    //  SAPI C++ Only Interface Equivalent:
                    //
                    [helpstring("Bookmark"), id(4)]
                        void Bookmark([in]long StreamNumber,
                                          [in]VARIANT StreamPosition,
                                          [in]BSTR Bookmark,
                                          [in]long BookmarkId);

                        // Word
                        //  SAPI C++ Only Interface Equivalent:
                        //
                        [helpstring("Word"), id(5)]
                            void Word([in]long StreamNumber,
                                              [in]VARIANT StreamPosition,
                                              [in]long CharacterPosition,
                                              [in]long Length);

                            // Sentence
                            //  SAPI C++ Only Interface Equivalent:
                            //
                            [helpstring("Sentence"), id(6)]
                                void Sentence([in]long StreamNumber,
                                                  [in]VARIANT StreamPosition,
                                                  [in]long CharacterPosition,
                                                  [in]long Length);

                                // Phoneme
                                //  SAPI C++ Only Interface Equivalent:
                                //
                                [helpstring("Phoneme"), id(7)]
                                    void Phoneme([in]long StreamNumber,
                                                      [in]VARIANT StreamPosition,
                                                      [in]long Duration, // In milliseconds 
                                                      [in]short NextPhoneId,
                                                      [in]SpeechVisemeFeature Feature,
                                                      [in]short CurrentPhoneId);

                                    // Viseme
                                    //  SAPI C++ Only Interface Equivalent:
                                    //
                                    [helpstring("Viseme"), id(8)]
                                        void Viseme([in]long StreamNumber,
                                                          [in]VARIANT StreamPosition,
                                                          [in]long Duration, // In milliseconds 
                                                          [in]SpeechVisemeType NextVisemeId,
                                                          [in]SpeechVisemeFeature Feature,
                                                          [in]SpeechVisemeType CurrentVisemeId);

                                        // AudioLevel
                                        //  SAPI C++ Only Interface Equivalent:
                                        //
                                        [helpstring("AudioLevel"), id(9)]
                                            void AudioLevel([in]long StreamNumber,
                                                              [in]VARIANT StreamPosition,
                                                              [in]long AudioLevel);

                                            // EnginePrivate
                                            //  SAPI C++ Only Interface Equivalent:
                                            //
                                            [helpstring("EnginePrivate"), id(10)]
                                                void EnginePrivate([in]long StreamNumber,
                                                                  [in]long StreamPosition,
                                                                  [in]VARIANT EngineData);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechRecognizer             
//  SAPI C++ Only Interface Equivalent: 
//  Default Property: N/A  
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechRecognizer
{
    DISPID_SRRecognizer = 1,
    DISPID_SRAllowAudioInputFormatChangesOnNextSet,
    DISPID_SRAudioInput,
    DISPID_SRAudioInputStream,
    DISPID_SRIsShared,
    DISPID_SRState,
    DISPID_SRStatus,
    DISPID_SRProfile,
    DISPID_SREmulateRecognition,
    DISPID_SRCreateRecoContext,
    DISPID_SRGetFormat,
    DISPID_SRSetPropertyNumber,
    DISPID_SRGetPropertyNumber,
    DISPID_SRSetPropertyString,
    DISPID_SRGetPropertyString,
    DISPID_SRIsUISupported,
    DISPID_SRDisplayUI,
    DISPID_SRGetRecognizers,
    DISPID_SVGetAudioInputs,
    DISPID_SVGetProfiles
} DISPID_SpeechRecognizer;

/////////////////////////////////////////////////
//
// SpeechLexiconType Enum
//  SAPI C++ Only Interface Equivalent: 
//
/////////////////////////////////////////////////

typedef enum SpeechRecognizerState
{
    SRSInactive, // = SPRST_INACTIVE,
    SRSActive, // = SPRST_ACTIVE,
    SRSActiveAlways, // = SPRST_ACTIVE_ALWAYS,
    SRSInactiveWithPurge //= SPRST_INACTIVE_WITH_PURGE,
} SpeechRecognizerState;

/////////////////////////////////////////////////
//
// SpeechDisplayAttributes Enum
//  SAPI C++ Only Interface Equivalent: 
//
/////////////////////////////////////////////////

typedef enum SpeechDisplayAttributes
{
    SDA_No_Trailing_Space = 0,
    SDA_One_Trailing_Space = 2, //SPAF_ONE_TRAILING_SPACE,
    SDA_Two_Trailing_Spaces = 4, //SPAF_TWO_TRAILING_SPACES,
    SDA_Consume_Leading_Spaces = 8 //SPAF_CONSUME_LEADING_SPACES
} SpeechDisplayAttributes;

/////////////////////////////////////////////////
//
// SpeechFormatType Enum
//  SAPI C++ Only Interface Equivalent: 
//
/////////////////////////////////////////////////
typedef enum SpeechFormatType
{
    SFTInput, // = SPWF_INPUT,
    SFTSREngine //= SPWF_SRENGINE
} SpeechFormatType;

//#if _SAPI_BUILD_VER >= 0x053
/////////////////////////////////////////////////
//
// SpeechEmulationCompareFlags Enum
//  SAPI C++ Only Interface Equivalent: 
//
/////////////////////////////////////////////////
typedef enum SpeechEmulationCompareFlags
{
    SECFIgnoreCase = 0x00000001,       // NORM_IGNORECASE
    SECFIgnoreKanaType = 0x00010000,       // NORM_IGNOREKANATYPE
    SECFIgnoreWidth = 0x00020000,       // NORM_IGNOREWIDTH
    SECFNoSpecialChars = 0x20000000,       // Indicates not to handle /D/L/P; form of words
    SECFEmulateResult = 0x40000000,       // SP_EMULATE_RESULT
    SECFDefault = 0x00030001 // SECFIgnoreCase | SECFIgnoreKanaType | SECFIgnoreWidth
} SpeechEmulationCompareFlags;
//#endif // _SAPI_BUILD_VER >= 0x053

[
    odl,
    uuid(2D5F1C0C-BD75-4b08-9478-3B11FEA2586C),
    dual,
    helpstring("ISpeechRecognizer Interface")
]
interface ISpeechRecognizer : IDispatch
{
    //  Properties

    // Recognizer 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propputref, helpstring("Recognizer"), id(1)]
    HRESULT Recognizer([in]ISpeechObjectToken* Recognizer);
    [propget, helpstring("Recognizer"), id(1)]
    HRESULT Recognizer([out, retval]ISpeechObjectToken** Recognizer);

    // AllowAudioInputFormatChangesOnNextSet
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propput, hidden, helpstring("AllowAudioInputFormatChangesOnNextSet"), id(2)]
    HRESULT AllowAudioInputFormatChangesOnNextSet([in] VARIANT_BOOL Allow);
    [propget, hidden, helpstring("AllowAudioInputFormatChangesOnNextSet"), id(2)]
    HRESULT AllowAudioInputFormatChangesOnNextSet([out, retval] VARIANT_BOOL* Allow);

    // AudioInput 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propputref, helpstring("AudioInput"), id(3)]
    HRESULT AudioInput([in]ISpeechObjectToken* AudioInput);
    [propget, helpstring("AudioInput"), id(3)]
    HRESULT AudioInput([out, retval]ISpeechObjectToken** AudioInput);

    // AudioInputStream 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propputref, helpstring("AudioInputStream"), id(4)]
    HRESULT AudioInputStream([in]ISpeechBaseStream* AudioInputStream);
    [propget, helpstring("AudioInputStream"), id(4)]
    HRESULT AudioInputStream([out, retval]ISpeechBaseStream** AudioInputStream);

    // IsShared 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propget, helpstring("IsShared"), id(5)]
    HRESULT IsShared([out, retval]VARIANT_BOOL* Shared);

    // State 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propput, helpstring("State"), id(6)]
    HRESULT State([in] SpeechRecognizerState State);
    [propget, helpstring("State"), id(6)]
    HRESULT State([out, retval] SpeechRecognizerState* State);

    // Status 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propget, helpstring("Status"), id(7)]
    HRESULT Status([out, retval]ISpeechRecognizerStatus** Status);

    // Profile 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propputref, helpstring("Profile"), id(8)]
    HRESULT Profile([in]ISpeechObjectToken* Profile);
    [propget, helpstring("Profile"), id(8)]
    HRESULT Profile([out, retval]ISpeechObjectToken** Profile);

    //  Methods

    // EmulateRecognition 
    //  SAPI C++ Only Interface Equivalent: 
    //
    // Notes:
    //  TextElements param:
    //      * This parameter specifies the elements of the phrase to EmulateRecognition with.
    //      * If it is a BSTR string then its assumed that the elements in TextElements are assumed to be 
    //      space delimited and you cannot use the DisplayAttributes parameter (it is ignored).
    //      * If it is an array of BSTR words then you are specifying each element in the phrase and
    //      you can optionally specify the ElementDisplayAttributes as appropriate.
    //      * You can specify additional information for each element by using the following syntax on
    //      each TextElement: "/display_text/lexical_form/pronounciation;".  This syntax can be used in both the
    //      BSTR and the array of BSTRs case.
    //  ElementDisplayAttributes param:
    //      * This parameter specifies the SpeechDisplayAttribute to use for each Word element.
    //      * If it is a NULL pointer, VT_NULL, or VT_EMPTY then SDA_No_Trailing_Space is assumed (default).
    //      * If it is a BSTR then it can be "" (empty string), " " (space), or "  " (double space) 
    //      and we'll pick the appropriate SpeechDispalyAttribute that matches and use this for all text elements.
    //      * If it is a integer value (VT_I1 to VT_I4) then this value is a SpeechDisplayAttribute value and
    //      it is used for each element in the Words array for the DisplayAttribute setting.
    //      and we'll pick the appropriate SpeechDispalyAttribute that matches and use this for all text elements.
    //      * If it is an array of integer values (VT_I1 to VT_I4) we'll use those values for the SpeechDisplayAttribute
    //      of each corresponding element in the TextElements array.
    //      * This parameter is only valid if you are using an array of BSTRs for the TextElements parameter (ignored
    //      if you pass in BSTR for Words).
    //      
    [helpstring("EmulateRecognition"), id(9)]
    HRESULT EmulateRecognition([in]VARIANT TextElements, [in]VARIANT* ElementDisplayAttributes, [in]long LanguageId);

    // CreateRecoContext 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("CreateRecoContext"), id(10)]
    HRESULT CreateRecoContext([out, retval]ISpeechRecoContext** NewContext);

    // GetFormat 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("GetFormat"), id(11)]
    HRESULT GetFormat([in] SpeechFormatType Type, [out, retval]ISpeechAudioFormat** Format);

    // SetPropertyNumber 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("SetPropertyNumber"), id(12)]
    HRESULT SetPropertyNumber([in] BSTR Name, [in]long Value, [out, retval]VARIANT_BOOL* Supported);

    // GetPropertyNumber 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("GetPropertyNumber"), id(13)]
    HRESULT GetPropertyNumber([in] BSTR Name, [in, out]long* Value, [out, retval]VARIANT_BOOL* Supported);

    // SetPropertyString 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("SetPropertyString"), id(14)]
    HRESULT SetPropertyString([in] BSTR Name, [in] BSTR Value, [out, retval]VARIANT_BOOL* Supported);

    // GetPropertyString 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("GetPropertyString"), id(15)]
    HRESULT GetPropertyString([in] BSTR Name, [in, out]BSTR* Value, [out, retval]VARIANT_BOOL* Supported);

    // IsUISupported 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("IsUISupported"), id(16)]
    HRESULT IsUISupported([in] BSTR TypeOfUI,
        [in] VARIANT* ExtraData,
        [out, retval] VARIANT_BOOL* Supported);

    // DisplayUI 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("DisplayUI"), id(17)]
    HRESULT DisplayUI([in]long hWndParent,
        [in]BSTR Title,
        [in] BSTR TypeOfUI,
        [in] VARIANT* ExtraData);

    // GetRecognizers 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("GetRecognizers"), id(18)]
    HRESULT GetRecognizers([in]BSTR RequiredAttributes,
        [in]BSTR OptionalAttributes,
        [out, retval]ISpeechObjectTokens** ObjectTokens);

    // GetAudioOutputs
    //  SAPI C++ Only Interface Equivalent: IEnumSpObjectTokens
    //
    [helpstring("GetAudioInputs"), id(19)]
    HRESULT GetAudioInputs([in]BSTR RequiredAttributes,
        [in]BSTR OptionalAttributes,
        [out, retval]ISpeechObjectTokens** ObjectTokens);

    // GetProfiles
    //  SAPI C++ Only Interface Equivalent: IEnumSpObjectTokens
    //
    [helpstring("GetProfiles"), id(20)]
    HRESULT GetProfiles([in]BSTR RequiredAttributes,
        [in]BSTR OptionalAttributes,
        [out, retval]ISpeechObjectTokens** ObjectTokens);

};


////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechRecognizerStatus             
//  SAPI C++ Only Interface Equivalent: 
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechRecognizerStatus
{
    DISPID_SRSAudioStatus = 1,
    DISPID_SRSCurrentStreamPosition,
    DISPID_SRSCurrentStreamNumber,
    DISPID_SRSNumberOfActiveRules,
    DISPID_SRSClsidEngine,
    DISPID_SRSSupportedLanguages
} DISPID_SpeechRecognizerStatus;

[
    odl,
    uuid(BFF9E781-53EC-484e-BB8A-0E1B5551E35C),
    dual,
    helpstring("ISpeechRecognizerStatus Interface")
]
interface ISpeechRecognizerStatus : IDispatch
{
    //  Properties

    // AudioStatus 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propget, helpstring("AudioStatus"), id(1)]
    HRESULT AudioStatus([out, retval]ISpeechAudioStatus** AudioStatus);

    // CurrentStreamPosition 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propget, helpstring("CurrentStreamPosition"), id(2)]
    HRESULT CurrentStreamPosition([out, retval]VARIANT* pCurrentStreamPos);

    // CurrentStreamNumber 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propget, helpstring("CurrentStreamNumber"), id(3)]
    HRESULT CurrentStreamNumber([out, retval]long* StreamNumber);

    // NumberOfActiveRules 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propget, helpstring("NumberOfActiveRules"), id(4)]
    HRESULT NumberOfActiveRules([out, retval]long* NumberOfActiveRules);

    // ClsidEngine 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propget, helpstring("ClsidEngine"), id(5)]
    HRESULT ClsidEngine([out, retval]BSTR* ClsidEngine);

    // SupportedLanguages 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propget, helpstring("SupportedLanguages"), id(6)]
    HRESULT SupportedLanguages([out, retval]VARIANT* SupportedLanguages);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechRecoContext             
//  SAPI C++ Only Interface Equivalent: 
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechRecoContext
{
    DISPID_SRCRecognizer = 1,
    DISPID_SRCAudioInInterferenceStatus,
    DISPID_SRCRequestedUIType,
    DISPID_SRCVoice,
    DISPID_SRAllowVoiceFormatMatchingOnNextSet,
    DISPID_SRCVoicePurgeEvent,
    DISPID_SRCEventInterests,
    DISPID_SRCCmdMaxAlternates,
    DISPID_SRCState,
    DISPID_SRCRetainedAudio,
    DISPID_SRCRetainedAudioFormat,
    DISPID_SRCPause,
    DISPID_SRCResume,
    DISPID_SRCCreateGrammar,
    DISPID_SRCCreateResultFromMemory,
    DISPID_SRCBookmark,
    DISPID_SRCSetAdaptationData
} DISPID_SpeechRecoContext;


/////////////////////////////////////////////////
//
// SpeechRetainedAudioOptions Enum
//  SAPI C++ Only Interface Equivalent: 
//
/////////////////////////////////////////////////

typedef enum SpeechRetainedAudioOptions
{
    SRAONone = 0, //SPAO_NONE,
    SRAORetainAudio// = SPAO_RETAIN_AUDIO
} SpeechRetainedAudioOptions;

/////////////////////////////////////////////////
//
// SpeechBookmarkOptions Enum
//  SAPI C++ Only Interface Equivalent: 
//
/////////////////////////////////////////////////

typedef enum SpeechBookmarkOptions
{
    SBONone, // = SPBO_NONE,
    SBOPause// = SPBO_PAUSE
} SpeechBookmarkOptions;

/////////////////////////////////////////////////
//
// SpeechInterference Enum
//  SAPI C++ Only Interface Equivalent: 
//
/////////////////////////////////////////////////

typedef enum SpeechInterference
{
    SINone, //= SPINTERFERENCE_NONE,
    SINoise, //= SPINTERFERENCE_NOISE,
    SINoSignal, //= SPINTERFERENCE_NOSIGNAL,
    SITooLoud, //= SPINTERFERENCE_TOOLOUD,
    SITooQuiet, //= SPINTERFERENCE_TOOQUIET,
    SITooFast, //= SPINTERFERENCE_TOOFAST,
    SITooSlow //= SPINTERFERENCE_TOOSLOW
} SpeechInterference;

/////////////////////////////////////////////////
//
// SpeechRecoEvents Enum
//  SAPI C++ Only Interface Equivalent: 
//
/////////////////////////////////////////////////

typedef enum SpeechRecoEvents
{
    SREStreamEnd = 1, // (1L << 0),  // SR engine has reached the end of an input stream 
    SRESoundStart = 2, //(1L << 1),  // SR engine has detected the start of non-trivial audio data
    SRESoundEnd = 4, //(1L << 2),  // SR engine has detected the end of non-trivial audio data
    SREPhraseStart = 8, //(1L << 3),  // SR engine has detected the start of a recognizable phrase
    SRERecognition = 16, // (1L << 4),  // SR engine's best hypothesis for the audio data
    SREHypothesis = 32, //(1L << 5),  // SR engine's interim hypothesis for the result of the audio data
    SREBookmark = 64, //(1L << 6),  // SR engine has reached the specified point in the audio stream 
    SREPropertyNumChange = 128, //(1L << 7),  // LPARAM points to a string, WPARAM is the attrib value
    SREPropertyStringChange = 256, //(1L << 8),  // LPARAM pointer to buffer.  Two concatinated null terminated strings.
    SREFalseRecognition = 512, //(1L << 9),  // apparent speech with no valid recognition
    SREInterference = 1024, // (1L << 10),  // LPARAM is any combination of SPINTERFERENCE flags
    SRERequestUI = 2048, //(1L << 11),  // LPARAM is string.  
    SREStateChange = 4096, //(1L << 12),  // wParam contains new reco state
    SREAdaptation = 8192, //(1L << 13),  // the adaptation buffer is now ready to be accepted
    SREStreamStart = 16384, //(1L << 14),  // SR engine has reached the start of an input stream
    SRERecoOtherContext = 32768, //(1L << 15),  // Phrase finished and recognized, but for other context
    SREAudioLevel = 65536, //(1L << 16),  // input audio volume level  
    SREPrivate = 262144, //(1L << 18),  // private engine specific event 
    SREAllEvents = 0x5FFFF      // All Reco events on.
} SpeechRecoEvents;

/////////////////////////////////////////////////
//
// SpeechRecoContextState Enum
//  SAPI C++ Only Interface Equivalent: 
//
/////////////////////////////////////////////////

typedef enum SpeechRecoContextState
{
    SRCS_Disabled,// = SPCS_DISABLED,
    SRCS_Enabled //= SPCS_ENABLED
} SpeechRecoContextState;


[
    odl,
    uuid(580AA49D-7E1E-4809-B8E2-57DA806104B8),
    dual,
    helpstring("ISpeechRecoContext Interface")
]
interface ISpeechRecoContext : IDispatch
{
    //  Properties

    // Recognizer 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propget, helpstring("Recognizer"), id(1)]
    HRESULT Recognizer([out, retval]ISpeechRecognizer** Recognizer);

    // AudioInInterferenceStatus 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propget, helpstring("AudioInInterferenceStatus"), id(2)]
    HRESULT AudioInputInterferenceStatus([out, retval]SpeechInterference* Interference);

    // RequestedUIType 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propget, helpstring("RequestedUIType"), id(3)]
    HRESULT RequestedUIType([out, retval]BSTR* UIType);

    // Voice 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propputref, helpstring("Voice"), id(4)]
    HRESULT Voice([in]ISpeechVoice* Voice);
    [propget, helpstring("Voice"), id(4)]
    HRESULT Voice([out, retval]ISpeechVoice** Voice);

    // AllowVoiceFormatMatchingOnNextSet
    //
    [propput, hidden, helpstring("AllowVoiceFormatMatchingOnNextSet"), id(5)]
    HRESULT AllowVoiceFormatMatchingOnNextSet([in] VARIANT_BOOL Allow);
    [propget, hidden, helpstring("AllowAudioInputFormatChangesOnNextSet"), id(5)]
    HRESULT AllowVoiceFormatMatchingOnNextSet([out, retval] VARIANT_BOOL* pAllow);

    // VoicePurgeEvent 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propput, helpstring("VoicePurgeEvent"), id(6)]
    HRESULT VoicePurgeEvent([in]SpeechRecoEvents EventInterest);
    [propget, helpstring("VoicePurgeEvent"), id(6)]
    HRESULT VoicePurgeEvent([out, retval]SpeechRecoEvents* EventInterest);

    // EventInterests 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propput, helpstring("EventInterests"), id(7)]
    HRESULT EventInterests([in]SpeechRecoEvents EventInterest);
    [propget, helpstring("EventInterests"), id(7)]
    HRESULT EventInterests([out, retval]SpeechRecoEvents* EventInterest);

    // CmdMaxAlternates 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propput, helpstring("CmdMaxAlternates"), id(8)]
    HRESULT CmdMaxAlternates([in] long MaxAlternates);
    [propget, helpstring("CmdMaxAlternates"), id(8)]
    HRESULT CmdMaxAlternates([out, retval] long* MaxAlternates);

    // State 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propput, helpstring("State"), id(9)]
    HRESULT State([in] SpeechRecoContextState State);
    [propget, helpstring("State"), id(9)]
    HRESULT State([out, retval] SpeechRecoContextState* State);

    // RetainedAudio 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propput, helpstring("RetainedAudio"), id(10)]
    HRESULT RetainedAudio([in]SpeechRetainedAudioOptions Option);
    [propget, helpstring("RetainedAudio"), id(10)]
    HRESULT RetainedAudio([out, retval]SpeechRetainedAudioOptions* Option);

    // RetainedAudioFormat 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propputref, helpstring("RetainedAudioFormat"), id(11)]
    HRESULT RetainedAudioFormat([in] ISpeechAudioFormat* Format);
    [propget, helpstring("RetainedAudioFormat"), id(11)]
    HRESULT RetainedAudioFormat([out, retval] ISpeechAudioFormat** Format);

    //  Methods

    // Pause 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("Pause"), id(12)]
    HRESULT Pause(void);

    // Resume 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("Resume"), id(13)]
    HRESULT Resume(void);

    // CreateGrammar 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("CreateGrammar"), id(14)]
    HRESULT CreateGrammar([in]VARIANT GrammarId, [out, retval]ISpeechRecoGrammar** Grammar);

    // CreateResultFromMemory 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("CreateResultFromMemory"), id(15)]
    HRESULT CreateResultFromMemory([in]VARIANT* ResultBlock, [out, retval]ISpeechRecoResult** Result);

    // Bookmark 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("Bookmark"), id(16)]
    HRESULT Bookmark([in]SpeechBookmarkOptions Options, [in]VARIANT StreamPos, [in]VARIANT BookmarkId);

    // SetAdaptationData 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("SetAdaptationData"), id(17)]
    HRESULT SetAdaptationData([in]BSTR AdaptationString);

};



////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechRecoGrammar              
//  SAPI C++ Only Interface Equivalent: 
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPIDSPRG
{
    DISPID_SRGId = 1,
    DISPID_SRGRecoContext,
    DISPID_SRGState,
    DISPID_SRGRules,
    DISPID_SRGReset,
    DISPID_SRGCommit,
    DISPID_SRGCmdLoadFromFile,
    DISPID_SRGCmdLoadFromObject,
    DISPID_SRGCmdLoadFromResource,
    DISPID_SRGCmdLoadFromMemory,
    DISPID_SRGCmdLoadFromProprietaryGrammar,
    DISPID_SRGCmdSetRuleState,
    DISPID_SRGCmdSetRuleIdState,
    DISPID_SRGDictationLoad,
    DISPID_SRGDictationUnload,
    DISPID_SRGDictationSetState,
    DISPID_SRGSetWordSequenceData,
    DISPID_SRGSetTextSelection,
    DISPID_SRGIsPronounceable
} DISPIDSPRG;

/////////////////////////////////////////////////
//
// SpeechLoadOption Enum
//  SAPI C++ Only Interface Equivalent: 
//
/////////////////////////////////////////////////

typedef enum SpeechLoadOption
{
    SLOStatic, // = SPLO_STATIC,
    SLODynamic //= SPLO_DYNAMIC
} SpeechLoadOption;

/////////////////////////////////////////////////
//
// SpeechWordPronounceable Enum
//  SAPI C++ Only Interface Equivalent: 
//
/////////////////////////////////////////////////

typedef enum SpeechWordPronounceable
{
    SWPUnknownWordUnpronounceable,// = SPWP_UNKNOWN_WORD_UNPRONOUNCEABLE,
    SWPUnknownWordPronounceable,// = SPWP_UNKNOWN_WORD_PRONOUNCEABLE,
    SWPKnownWordPronounceable// = SPWP_KNOWN_WORD_PRONOUNCEABLE
} SpeechWordPronounceable;

/////////////////////////////////////////////////
//
// SpeechGrammarState Enum
//  SAPI C++ Only Interface Equivalent: 
//
/////////////////////////////////////////////////

typedef enum SpeechGrammarState
{
    SGSEnabled = 0, //SPGS_ENABLED,
    SGSDisabled = 1, //SPGS_DISABLED,
    SGSExclusive = 3// SPGS_EXCLUSIVE,
} SpeechGrammarState;

/////////////////////////////////////////////////
//
// SpeechRuleState Enum
//  SAPI C++ Only Interface Equivalent: 
//
/////////////////////////////////////////////////

typedef enum SpeechRuleState
{
    SGDSInactive = 0, //SPRS_INACTIVE,
    SGDSActive = 1, //SPRS_ACTIVE,
    SGDSActiveWithAutoPause = 3, // SPRS_ACTIVE_WITH_AUTO_PAUSE,
//#if _SAPI_BUILD_VER >= 0x053
    SGDSActiveUserDelimited = 4//SPRS_ACTIVE_USER_DELIMITED
//#endif // _SAPI_BUILD_VER >= 0x053
} SpeechRuleState;

/////////////////////////////////////////////////
//
// SpeechRuleAttributes Enum
//  SAPI C++ Only Interface Equivalent: 
//
/////////////////////////////////////////////////

typedef enum SpeechRuleAttributes
{
    SRATopLevel = 1, //SPRAF_TopLevel,
    SRADefaultToActive = 2, //SPRAF_Active,
    SRAExport = 4, // SPRAF_Export,
    SRAImport = 8, //SPRAF_Import,
    SRAInterpreter = 16, //SPRAF_Interpreter,
    SRADynamic = 32, //SPRAF_Dynamic,
//#if _SAPI_BUILD_VER >= 0x053
    SRARoot = 64 //SPRAF_Root
//#endif // _SAPI_BUILD_VER >= 0x053
} SpeechRuleAttributes;

/////////////////////////////////////////////////
//
// SpeechGrammarWordType Enum
//  SAPI C++ Only Interface Equivalent: 
//
/////////////////////////////////////////////////

typedef enum SpeechGrammarWordType
{
    SGDisplay, // = SPWT_DISPLAY,       // Not implemented
    SGLexical, // = SPWT_LEXICAL,
    SGPronounciation, // = SPWT_PRONUNCIATION, // Not implemented
//#if _SAPI_BUILD_VER >= 0x053
    SGLexicalNoSpecialChars //= SPWT_LEXICAL_NO_SPECIAL_CHARS
//#endif // _SAPI_BUILD_VER >= 0x053
} SpeechGrammarWordType;

[
    odl,
    uuid(B6D6F79F-2158-4e50-B5BC-9A9CCD852A09),
    dual,
    helpstring("ISpeechRecoGrammar Interface")
]
interface ISpeechRecoGrammar : IDispatch
{
    //  Properties

    // Id 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propget, helpstring("Id"), id(1)]
    HRESULT Id([out, retval]VARIANT* Id);

    // RecoContext 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propget, helpstring("RecoContext"), id(2)]
    HRESULT RecoContext([out, retval] ISpeechRecoContext** RecoContext);

    // State 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propput, helpstring("State"), id(3)]
    HRESULT State([in]SpeechGrammarState State);
    [propget, helpstring("State"), id(3)]
    HRESULT State([out, retval]SpeechGrammarState* State);

    // Rules 
    //  SAPI C++ Only Interface Equivalent: 
    //  Default: 
    //
    [propget, helpstring("Rules"), id(4)]
    HRESULT Rules([out, retval]ISpeechGrammarRules** Rules);

    //  Methods

    // Reset
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("Reset"), id(5)]
    HRESULT Reset([in]SpeechLanguageId NewLanguage);

    // CmdLoadFromFile 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("CmdLoadFromFile"), id(6)]
    HRESULT CmdLoadFromFile([in] BSTR FileName, [in]SpeechLoadOption LoadOption);

    // CmdLoadFromObject 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("CmdLoadFromObject"), id(7)]
    HRESULT CmdLoadFromObject([in] BSTR ClassId,
        [in] BSTR GrammarName,
        [in]SpeechLoadOption LoadOption);

    // CmdLoadFromResource 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("CmdLoadFromResource"), id(8)]
    HRESULT CmdLoadFromResource([in]long hModule,
        [in]VARIANT ResourceName,
        [in]VARIANT ResourceType,
        [in]SpeechLanguageId LanguageId,
        [in]SpeechLoadOption LoadOption);

    // CmdLoadFromMemory 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("CmdLoadFromMemory"), id(9)]
    HRESULT CmdLoadFromMemory([in] VARIANT GrammarData, [in]SpeechLoadOption LoadOption);

    // CmdLoadFromProprietaryGrammar 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("CmdLoadFromProprietaryGrammar"), id(10)]
    HRESULT CmdLoadFromProprietaryGrammar([in] BSTR ProprietaryGuid,
        [in] BSTR ProprietaryString,
        [in]VARIANT ProprietaryData,
        [in]SpeechLoadOption LoadOption);

    // CmdSetRuleState 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("CmdSetRuleState"), id(11)]
    HRESULT CmdSetRuleState([in] BSTR Name, [in]SpeechRuleState State);

    // CmdSetRuleIdState 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("CmdSetRuleIdState"), id(12)]
    HRESULT CmdSetRuleIdState([in]long RuleId, [in]SpeechRuleState State);

    // DictationLoad 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("DictationLoad"), id(13)]
    HRESULT DictationLoad([in] BSTR TopicName, [in]SpeechLoadOption LoadOption);

    // DictationUnload 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("DictationUnload"), id(14)]
    HRESULT DictationUnload(void);

    // DictationSetState 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("DictationSetState"), id(15)]
    HRESULT DictationSetState([in]SpeechRuleState State);

    // SetWordSequenceData 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("SetWordSequenceData"), id(16)]
    HRESULT SetWordSequenceData([in] BSTR Text, [in]long TextLength, [in]ISpeechTextSelectionInformation* Info);

    // SetTextSelection 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("SetTextSelection"), id(17)]
    HRESULT SetTextSelection([in]ISpeechTextSelectionInformation* Info);

    // IsPronounceable 
    //  SAPI C++ Only Interface Equivalent: 
    //
    [helpstring("IsPronounceable"), id(18)]
    HRESULT IsPronounceable([in] BSTR Word, [out, retval]SpeechWordPronounceable* WordPronounceable);
};


////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// _ISpeechRecoContextEvents               
//  SAPI C++ Only Interface Equivalent: 
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechRecoContextEvents
{
    DISPID_SRCEStartStream = 1,
    DISPID_SRCEEndStream,
    DISPID_SRCEBookmark,
    DISPID_SRCESoundStart,
    DISPID_SRCESoundEnd,
    DISPID_SRCEPhraseStart,
    DISPID_SRCERecognition,
    DISPID_SRCEHypothesis,
    DISPID_SRCEPropertyNumberChange,
    DISPID_SRCEPropertyStringChange,
    DISPID_SRCEFalseRecognition,
    DISPID_SRCEInterference,
    DISPID_SRCERequestUI,
    DISPID_SRCERecognizerStateChange,
    DISPID_SRCEAdaptation,
    DISPID_SRCERecognitionForOtherContext,
    DISPID_SRCEAudioLevel,
    DISPID_SRCEEnginePrivate
} DISPID_SpeechRecoContextEvents;

/////////////////////////////////////////////////
//
// SpeechRecognitionType Enum
//  SAPI C++ Only Interface Equivalent: 
//
/////////////////////////////////////////////////

typedef enum SpeechRecognitionType
{
    SRTStandard = 0,
    SRTAutopause = 1, //SPREF_AutoPause,
    SRTEmulated = 2, //SPREF_Emulated
//#if _SAPI_BUILD_VER >= 0x053
    
    SRTSMLTimeout = 4, //SPREF_SMLTimeout,
    SRTExtendableParse = 8, //SPREF_ExtendableParse,
    SRTReSent = 16 // SPREF_ReSent
//#endif // _SAPI_BUILD_VER >= 0x053
} SpeechRecognitionType;

[
    uuid(7B8FCB42-0E9D-4f00-A048-7B04D6179D3D)
]
dispinterface _ISpeechRecoContextEvents
{
    properties:
    methods:

        // Methods

        // StartStream
        //  SAPI C++ Only Interface Equivalent: 
        //
        [helpstring("StartStream"), id(1)]
            void StartStream([in]long StreamNumber,[in]VARIANT StreamPosition);

            // EndStream
            //  SAPI C++ Only Interface Equivalent: 
            //
            [helpstring("EndStream"), id(2)]
                void EndStream([in]long StreamNumber,[in]VARIANT StreamPosition,[in]VARIANT_BOOL StreamReleased);

                // Bookmark
                //  SAPI C++ Only Interface Equivalent: 
                //
                [helpstring("Bookmark"), id(3)]
                    void Bookmark([in]long StreamNumber,[in]VARIANT StreamPosition,[in]VARIANT BookmarkId,[in]SpeechBookmarkOptions Options);

                    // SoundStart
                    //  SAPI C++ Only Interface Equivalent: 
                    //
                    [helpstring("SoundStart"), id(4)]
                        void SoundStart([in]long StreamNumber,[in]VARIANT StreamPosition);

                        // SoundEnd
                        //  SAPI C++ Only Interface Equivalent: 
                        //
                        [helpstring("SoundEnd"), id(5)]
                            void SoundEnd([in]long StreamNumber,[in]VARIANT StreamPosition);

                            // PhraseStart
                            //  SAPI C++ Only Interface Equivalent: 
                            //
                            [helpstring("PhraseStart"), id(6)]
                                void PhraseStart([in]long StreamNumber,[in]VARIANT StreamPosition);

                                // Recognition
                                //  SAPI C++ Only Interface Equivalent: 
                                //
                                [helpstring("Recognition"), id(7)]
                                    void Recognition([in]long StreamNumber,[in]VARIANT StreamPosition,[in]SpeechRecognitionType RecognitionType,[in]ISpeechRecoResult* Result);

                                    // Hypothesis
                                    //  SAPI C++ Only Interface Equivalent: 
                                    //
                                    [helpstring("Hypothesis"), id(8)]
                                        void Hypothesis([in]long StreamNumber,[in]VARIANT StreamPosition,[in]ISpeechRecoResult* Result);

                                        // PropertyNumberChange
                                        //  SAPI C++ Only Interface Equivalent: 
                                        //
                                        [helpstring("PropertyNumberChange"), id(9)]
                                            void PropertyNumberChange([in]long StreamNumber,[in]VARIANT StreamPosition,[in]BSTR PropertyName,[in]long NewNumberValue);

                                            // PropertyStringChange
                                            //  SAPI C++ Only Interface Equivalent: 
                                            //
                                            [helpstring("PropertyStringChange"), id(10)]
                                                void PropertyStringChange([in]long StreamNumber,[in]VARIANT StreamPosition,[in]BSTR PropertyName,[in]BSTR NewStringValue);

                                                // FalseRecognition
                                                //  SAPI C++ Only Interface Equivalent: 
                                                //
                                                [helpstring("FalseRecognition"), id(11)]
                                                    void FalseRecognition([in]long StreamNumber,[in]VARIANT StreamPosition,[in]ISpeechRecoResult* Result);

                                                    // Interference
                                                    //  SAPI C++ Only Interface Equivalent: 
                                                    //
                                                    [helpstring("Interference"), id(12)]
                                                        void Interference([in]long StreamNumber,[in]VARIANT StreamPosition,[in]SpeechInterference Interference);

                                                        // RequestUI
                                                        //  SAPI C++ Only Interface Equivalent: 
                                                        //
                                                        [helpstring("RequestUI"), id(13)]
                                                            void RequestUI([in]long StreamNumber,[in]VARIANT StreamPosition,[in]BSTR UIType);

                                                            // RecognizerStateChange
                                                            //  SAPI C++ Only Interface Equivalent: 
                                                            //
                                                            [helpstring("RecognizerStateChange"), id(14)]
                                                                void RecognizerStateChange([in]long StreamNumber,[in]VARIANT StreamPosition,[in]SpeechRecognizerState NewState);

                                                                // Adaption
                                                                //  SAPI C++ Only Interface Equivalent: 
                                                                //
                                                                [helpstring("Adaptation"), id(15)]
                                                                    void Adaptation([in]long StreamNumber,[in]VARIANT StreamPosition);

                                                                    // RecognitionForOtherContext
                                                                    //  SAPI C++ Only Interface Equivalent: 
                                                                    //
                                                                    [helpstring("RecognitionForOtherContext"), id(16)]
                                                                        void RecognitionForOtherContext([in]long StreamNumber,[in]VARIANT StreamPosition);

                                                                        // AudioLevel
                                                                        //  SAPI C++ Only Interface Equivalent: 
                                                                        //
                                                                        [helpstring("AudioLevel"), id(17)]
                                                                            void AudioLevel([in]long StreamNumber,[in]VARIANT StreamPosition,[in]long AudioLevel);

                                                                            // EnginePrivate
                                                                            //  SAPI C++ Only Interface Equivalent: 
                                                                            //
                                                                            [helpstring("EnginePrivate"), id(18)]
                                                                                void EnginePrivate([in]long StreamNumber,[in]VARIANT StreamPosition,[in]VARIANT EngineData);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechGrammarRule             
//  SAPI C++ Only Interface Equivalent: 
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechGrammarRule
{
    DISPID_SGRAttributes = 1,
    DISPID_SGRInitialState,
    DISPID_SGRName,
    DISPID_SGRId,
    DISPID_SGRClear,
    DISPID_SGRAddResource,
    DISPID_SGRAddState
} DISPID_SpeechGrammarRule;

[
    odl,
    uuid(AFE719CF-5DD1-44f2-999C-7A399F1CFCCC),
    dual,
    helpstring("ISpeechGrammarRule Interface")
]
interface ISpeechGrammarRule : IDispatch
{
    // Properties

    // RuleAttributes
    //  SAPI C++ Only Interface Equivalent:
    //  Default: 
    //
    [propget, helpstring("RuleAttributes"), id(1)]
    HRESULT Attributes([out, retval] SpeechRuleAttributes* Attributes);

    // InitialState
    //  SAPI C++ Only Interface Equivalent:
    //  Default: 
    //
    [propget, helpstring("InitialState"), id(2)]
    HRESULT InitialState([out, retval] ISpeechGrammarRuleState** State);

    // Name
    //  SAPI C++ Only Interface Equivalent:
    //  Default: 
    //
    [propget, helpstring("Name"), id(3)]
    HRESULT Name([out, retval] BSTR* Name);

    // Id
    //  SAPI C++ Only Interface Equivalent:
    //  Default: 
    //
    [propget, helpstring("Id"), id(4)]
    HRESULT Id([out, retval] long* Id);

    // Methods

    // Clear
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("Clear"), id(5)]
    HRESULT Clear();

    // AddResource
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("AddResource"), id(6)]
    HRESULT AddResource([in] BSTR ResourceName, [in] BSTR ResourceValue);

    // AddState
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("AddState"), id(7)]
    HRESULT AddState([out, retval] ISpeechGrammarRuleState** State);
};



////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechGrammarRules             
//  SAPI C++ Only Interface Equivalent:
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechGrammarRules
{
    DISPID_SGRsCount = 1,
    DISPID_SGRsDynamic,
    DISPID_SGRsAdd,
    DISPID_SGRsCommit,
    DISPID_SGRsCommitAndSave,
    DISPID_SGRsFindRule,
    DISPID_SGRsItem = 0,
    DISPID_SGRs_NewEnum = -4
} DISPID_SpeechGrammarRules;

[
    odl,
    uuid(6FFA3B44-FC2D-40d1-8AFC-32911C7F1AD1),
    dual,
    helpstring("ISpeechGrammarRules Interface")
]
interface ISpeechGrammarRules : IDispatch
{
    // Properties

    // RuleAttributes
    //  SAPI C++ Only Interface Equivalent:
    //  Default: 
    //
    [propget, helpstring("Count"), id(1)]
    HRESULT Count([out, retval] long* Count);

    // FindRule
    //  SAPI C++ Only Interface Equivalent:
    // NOTE: This returns S_OK with NULL Rule if rule is not found.
    [helpstring("FindRule"), id(2)]
    HRESULT FindRule([in]VARIANT RuleNameOrId, [out, retval]ISpeechGrammarRule** Rule);

    // Item
    //  SAPI C++ Only Interface Equivalent:
    //  Default: 
    //
    [id(3), helpstring("Item")]
    HRESULT Item([in] long Index, [out, retval]ISpeechGrammarRule** Rule);

    // _NewEnum
    //  SAPI C++ Only Interface Equivalent:
    //  Default: 
    //
    [id(4), propget, helpstring("Enumerates the alternates")]
    HRESULT _NewEnum([out, retval] IUnknown** EnumVARIANT);

    // Dynamic
    //  SAPI C++ Only Interface Equivalent:
    //  Default: 
    //
    [propget, helpstring("Dynamic"), id(5)]
    HRESULT Dynamic([out, retval] VARIANT_BOOL* Dynamic);

    // Methods

    // Add
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("Add"), id(6)]
    HRESULT Add([in] BSTR RuleName,
        [in] SpeechRuleAttributes Attributes,
        [in] long RuleId,
        [out, retval] ISpeechGrammarRule** Rule);

    // Commit
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("Commit"), id(7)]
    HRESULT Commit(void);

    // CommitAndSave
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("CommitAndSave"), id(8)]
    HRESULT CommitAndSave([out] BSTR* ErrorText, [out, retval] VARIANT* SaveStream);
};






////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechGrammarRuleState             
//  SAPI C++ Only Interface Equivalent:
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechGrammarRuleState
{
    DISPID_SGRSRule = 1,
    DISPID_SGRSTransitions,
    DISPID_SGRSAddWordTransition,
    DISPID_SGRSAddRuleTransition,
    DISPID_SGRSAddSpecialTransition
} DISPID_SpeechGrammarRuleState;

typedef enum SpeechSpecialTransitionType
{
    SSTTWildcard = 1,
    SSTTDictation,
    SSTTTextBuffer
} SpeechSpecialTransitionType;

[
    odl,
    uuid(D4286F2C-EE67-45ae-B928-28D695362EDA),
    dual,
    helpstring("ISpeechGrammarRuleState Interface")
]
interface ISpeechGrammarRuleState : IDispatch
{
    // Properties

    // Rule
    //  SAPI C++ Only Interface Equivalent:
    //  Default: 
    //
    [propget, helpstring("Rule"), id(1)]
    HRESULT Rule([out, retval] ISpeechGrammarRule** Rule);

    // Transitions
    //  SAPI C++ Only Interface Equivalent:
    //  Default: 
    //
    [propget, helpstring("Transitions"), id(2)]
    HRESULT Transitions([out, retval] ISpeechGrammarRuleStateTransitions** Transitions);

    // Methods

    // AddWordTransition
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("AddWordTransition"), id(3)]
    HRESULT AddWordTransition([in]ISpeechGrammarRuleState* DestState,
        [in] BSTR Words,
        [in] BSTR Separators,
        [in]SpeechGrammarWordType Type,
        [in] BSTR PropertyName,
        [in]long PropertyId,
        [in]VARIANT* PropertyValue,
        [in]float Weight);

    // AddRuleTransition
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("AddRuleTransition"), id(4)]
    HRESULT AddRuleTransition([in]ISpeechGrammarRuleState* DestinationState,
        [in]ISpeechGrammarRule* Rule,
        [in] BSTR PropertyName,
        [in]long PropertyId,
        [in]VARIANT* PropertyValue,
        [in]float Weight);

    // AddSpecialTransition
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("AddSpecialTransition"), id(5)]
    HRESULT AddSpecialTransition([in]ISpeechGrammarRuleState* DestinationState,
        [in]SpeechSpecialTransitionType Type,
        [in] BSTR PropertyName,
        [in]long PropertyId,
        [in]VARIANT* PropertyValue,
        [in]float Weight);

};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechGrammarStateTransitions             
//  SAPI C++ Only Interface Equivalent:
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechGrammarRuleStateTransitions
{
    DISPID_SGRSTsCount = 1,
    DISPID_SGRSTsItem = 0,
    DISPID_SGRSTs_NewEnum = -4
} DISPID_SpeechGrammarRuleStateTransitions;

[
    odl,
    uuid(EABCE657-75BC-44a2-AA7F-C56476742963),
    dual,
    helpstring("ISpeechGrammarRuleStateTransitions Interface")
]
interface ISpeechGrammarRuleStateTransitions : IDispatch
{
    // Properties

    // Count
    //  SAPI C++ Only Interface Equivalent:
    //  Default: 
    //
    [propget, helpstring("Count"), id(1)]
    HRESULT Count([out, retval] long* Count);

    // Methods

    // Item
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("Item"), id(0)]
    HRESULT Item([in] long Index, [out, retval]ISpeechGrammarRuleStateTransition** Transition);

    // _NewEnum
    //  SAPI C++ Only Interface Equivalent:
    //
    [propget, helpstring("Enumerates the transitions"), id(-4)]
    HRESULT _NewEnum([out, retval] IUnknown** EnumVARIANT);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechGrammarStateTransition             
//  SAPI C++ Only Interface Equivalent: 
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechGrammarRuleStateTransition
{
    DISPID_SGRSTType = 1,
    DISPID_SGRSTText,
    DISPID_SGRSTRule,
    DISPID_SGRSTWeight,
    DISPID_SGRSTPropertyName,
    DISPID_SGRSTPropertyId,
    DISPID_SGRSTPropertyValue,
    DISPID_SGRSTNextState
} DISPID_SpeechGrammarRuleStateTransition;

//////////////////////////////////
//
// SpeechGrammarRuleStateTransitionType Enum
//  SAPI C++ Only Interface Equivalent: 
//
//////////////////////////////////

typedef enum SpeechGrammarRuleStateTransitionType
{
    SGRSTTEpsilon = 0,
    SGRSTTWord,
    SGRSTTRule,
    SGRSTTDictation,
    SGRSTTWildcard,
    SGRSTTTextBuffer
} SpeechGrammarRuleStateTransitionType;

[
    odl,
    uuid(CAFD1DB1-41D1-4a06-9863-E2E81DA17A9A),
    dual,
    helpstring("ISpeechGrammarRuleStateTransition Interface")
]
interface ISpeechGrammarRuleStateTransition : IDispatch
{
    // Properties

    // Type
    //  SAPI C++ Only Interface Equivalent:
    //  Default: 
    //
    [propget, helpstring("Type"), id(1)]
    HRESULT Type([out, retval] SpeechGrammarRuleStateTransitionType* Type);

    // Text
    //  SAPI C++ Only Interface Equivalent:
    //  Default: 
    //
    [propget, helpstring("Text"), id(2)]
    HRESULT Text([out, retval] BSTR* Text);

    // Rule
    //  SAPI C++ Only Interface Equivalent:
    //  Default: 
    //
    [propget, helpstring("Rule"), id(3)]
    HRESULT Rule([out, retval] ISpeechGrammarRule** Rule);

    // Weight
    //  SAPI C++ Only Interface Equivalent:
    //  Default: 
    //
    [propget, helpstring("Weight"), id(4)]
    HRESULT Weight([out, retval] VARIANT* Weight);

    // PropertyName
    //  SAPI C++ Only Interface Equivalent:
    //  Default: 
    //
    [propget, helpstring("PropertyName"), id(5)]
    HRESULT PropertyName([out, retval] BSTR* PropertyName);

    // PropertyId
    //  SAPI C++ Only Interface Equivalent:
    //  Default: 
    //
    [propget, helpstring("PropertyId"), id(6)]
    HRESULT PropertyId([out, retval] long* PropertyId);

    // PropertyValue
    //  SAPI C++ Only Interface Equivalent:
    //  Default: 
    //
    [propget, helpstring("PropertyValue"), id(7)]
    HRESULT PropertyValue([out, retval] VARIANT* PropertyValue);

    // NextState
    //  SAPI C++ Only Interface Equivalent:
    //  Default: 
    //
    [propget, helpstring("NextState"), id(8)]
    HRESULT NextState([out, retval] ISpeechGrammarRuleState** NextState);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechTextSelectionInformation             
//  SAPI C++ Only Interface Equivalent:
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPIDSPTSI
{
    DISPIDSPTSI_ActiveOffset = 1,
    DISPIDSPTSI_ActiveLength,
    DISPIDSPTSI_SelectionOffset,
    DISPIDSPTSI_SelectionLength
} DISPIDSPTSI;

[
    odl,
    uuid(3B9C7E7A-6EEE-4DED-9092-11657279ADBE),
    dual,
    helpstring("ISpeechTextSelectionInformation Interface")
]
interface ISpeechTextSelectionInformation : IDispatch
{
    // Properties

    // ActiveOffset
    //  SAPI C++ Only Interface Equivalent:
    //  Default: 
    //
    [propput, helpstring("ActiveOffset"), id(1)]
    HRESULT ActiveOffset([in]long ActiveOffset);
    [propget, helpstring("ActiveOffset"), id(1)]
    HRESULT ActiveOffset([out, retval]long* ActiveOffset);

    // ActiveLength
    //  SAPI C++ Only Interface Equivalent:
    //  Default: 
    //
    [propput, helpstring("ActiveLength"), id(2)]
    HRESULT ActiveLength([in]long ActiveLength);
    [propget, helpstring("ActiveLength"), id(2)]
    HRESULT ActiveLength([out, retval]long* ActiveLength);

    // SelectionOffset
    //  SAPI C++ Only Interface Equivalent:
    //  Default: 
    //
    [propput, helpstring("SelectionOffset"), id(3)]
    HRESULT SelectionOffset([in]long SelectionOffset);
    [propget, helpstring("SelectionOffset"), id(3)]
    HRESULT SelectionOffset([out, retval]long* SelectionOffset);

    // SelectionLength
    //  SAPI C++ Only Interface Equivalent:
    //  Default: 
    //
    [propput, helpstring("SelectionLength"), id(4)]
    HRESULT SelectionLength([in]long SelectionLength);
    [propget, helpstring("SelectionLength"), id(4)]
    HRESULT SelectionLength([out, retval]long* SelectionLength);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechRecoResult               
//  SAPI C++ Only Interface Equivalent: 
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechRecoResult
{
    DISPID_SRRRecoContext = 1,
    DISPID_SRRTimes,
    DISPID_SRRAudioFormat,
    DISPID_SRRPhraseInfo,
    DISPID_SRRAlternates,
    DISPID_SRRAudio,
    DISPID_SRRSpeakAudio,
    DISPID_SRRSaveToMemory,
    DISPID_SRRDiscardResultInfo
} DISPID_SpeechRecoResult;

/////////////////////////////////////////////////
//
// SpeechDiscardType Enum
//  SAPI C++ Only Interface Equivalent: 
//
/////////////////////////////////////////////////

typedef enum SpeechDiscardType
{
    SDTProperty = 0x01, //SPDF_PROPERTY,
    SDTReplacement = 0x02, //SPDF_REPLACEMENT,
    SDTRule = 0x04, //SPDF_RULE,
    SDTDisplayText = 0x08, //SPDF_DISPLAYTEXT,
    SDTLexicalForm = 0x10, //SPDF_LEXICALFORM,
    SDTPronunciation = 0x20, //SPDF_PRONUNCIATION,
    SDTAudio = 0x40, //SPDF_AUDIO,
    SDTAlternates = 0x80, //SPDF_ALTERNATES,
    SDTAll = 0xFF //SPDF_ALL
} SpeechDiscardType;

typedef enum SPXMLRESULTOPTIONS
{
    SPXRO_SML = 0,          // default
    SPXRO_Alternates_SML = 1
} SPXMLRESULTOPTIONS;

[
    odl,
    uuid(ED2879CF-CED9-4ee6-A534-DE0191D5468D),
    dual,
    helpstring("ISpeechRecoResult Interface")
]
interface ISpeechRecoResult : IDispatch
{
    //  Properties

    // RecoContext
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("RecoContext"), id(1)]
    HRESULT RecoContext([out, retval]ISpeechRecoContext** RecoContext);

    // Times
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("Times"), id(2)]
    HRESULT Times([out, retval]ISpeechRecoResultTimes** Times);

    // AudioFormat
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propputref, helpstring("AudioFormat"), id(3)]
    HRESULT AudioFormat([in]ISpeechAudioFormat* Format);
    [propget, helpstring("AudioFormat"), id(3)]
    HRESULT AudioFormat([out, retval]ISpeechAudioFormat** Format);

    // PhraseInfo
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("PhraseInfo"), id(4)]
    HRESULT PhraseInfo([out, retval]ISpeechPhraseInfo** PhraseInfo);


    //  Methods

    // Alternates
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("Alternates"), id(5)]
    HRESULT Alternates([in] long RequestCount,
        [in] long StartElement,
        [in] long Elements,
        [out, retval] ISpeechPhraseAlternates** Alternates);

    // Audio
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("Audio"), id(6)]
    HRESULT Audio([in] long StartElement,
        [in] long Elements,
        [out, retval] ISpeechMemoryStream** Stream);

    // SpeakAudio
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("SpeakAudio"), id(7)]
    HRESULT SpeakAudio([in] long StartElement,
        [in] long Elements,
        [in] SpeechVoiceSpeakFlags Flags,
        [out, retval]long* StreamNumber);

    // SaveToMemory
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("SaveToMemory"), id(8)]
    HRESULT SaveToMemory([out, retval] VARIANT* ResultBlock);

    // DiscardResultInfo
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("DiscardResultInfo"), id(9)]
    HRESULT DiscardResultInfo([in]SpeechDiscardType ValueTypes);
};

//#if _SAPI_BUILD_VER >= 0x053
// Add a new interface that inherits from ISpeechRecoResult to allow V-Table access to XML results

typedef [hidden] enum DISPID_SpeechXMLRecoResult
{
    DISPID_SRRGetXMLResult = 10, // DISPID_SRRDiscardResultInfo + 1,
    DISPID_SRRGetXMLErrorInfo = 11, // DISPID_SRRGetXMLResult + 1
} DISPID_SpeechXMLRecoResult;

[
    odl,
    uuid(AAEC54AF-8F85-4924-944D-B79D39D72E19),
    dual,
    helpstring("ISpeechXMLRecoResult Interface")
]
interface ISpeechXMLRecoResult : ISpeechRecoResult
{
    [helpstring("GetXMLResult"), id(10)]
    HRESULT GetXMLResult([in] SPXMLRESULTOPTIONS Options, [out, retval] BSTR* pResult);
    [helpstring("GetXMLErrorInfo"), id(11)]
    HRESULT GetXMLErrorInfo([out] long* LineNumber, [out]BSTR* ScriptLine, [out]BSTR* Source, [out]BSTR* Description, [out]long* ResultCode, [out, retval]VARIANT_BOOL* IsError);
};

// An interface that extends ISpeechRecoResult

typedef [hidden] enum DISPID_SpeechRecoResult2
{
    DISPID_SRRSetTextFeedback = 12, //DISPID_SRRGetXMLErrorInfo + 1
} DISPID_SpeechRecoResult2;

[
    odl,
    uuid(8E0A246D-D3C8-45de-8657-04290C458C3C),
    dual,
    helpstring("ISpeechRecoResult2 Interface")
]
interface ISpeechRecoResult2 : ISpeechRecoResult
{
    [helpstring("DiscardResultInfo"), id(12)]
    HRESULT SetTextFeedback([in]BSTR Feedback, [in]VARIANT_BOOL WasSuccessful);
}


// Add a new interface that cannot be QI'd for but allows IDispatch access to both ISpeechRecoResult and ISpeechXMLRecoResult
[
    odl,
    uuid(6D60EB64-ACED-40a6-BBF3-4E557F71DEE2),
    dual,
    helpstring("ISpeechRecoResultDispatch Interface")
]
interface ISpeechRecoResultDispatch : IDispatch
{
    [propget, helpstring("RecoContext"), id(1)]
    HRESULT RecoContext([out, retval]ISpeechRecoContext** RecoContext);
    [propget, helpstring("Times"), id(2)]
    HRESULT Times([out, retval]ISpeechRecoResultTimes** Times);
    [propput, helpstring("AudioFormat"), id(3)]
    HRESULT AudioFormat([in]ISpeechAudioFormat* Format);
    [propget, helpstring("AudioFormat"), id(3)]
    HRESULT AudioFormat([out, retval]ISpeechAudioFormat** Format);
    [propget, helpstring("PhraseInfo"), id(4)]
    HRESULT PhraseInfo([out, retval]ISpeechPhraseInfo** PhraseInfo);
    [helpstring("Alternates"), id(5)]
    HRESULT Alternates([in] long RequestCount,
        [in] long StartElement,
        [in] long Elements,
        [out, retval] ISpeechPhraseAlternates** Alternates);
    [helpstring("Audio"), id(6)]
    HRESULT Audio([in] long StartElement,
        [in] long Elements,
        [out, retval] ISpeechMemoryStream** Stream);
    [helpstring("SpeakAudio"), id(7)]
    HRESULT SpeakAudio([in] long StartElement,
        [in] long Elements,
        [in] SpeechVoiceSpeakFlags Flags,
        [out, retval]long* StreamNumber);
    [helpstring("SaveToMemory"), id(8)]
    HRESULT SaveToMemory([out, retval] VARIANT* ResultBlock);
    [helpstring("DiscardResultInfo"), id(9)]
    HRESULT DiscardResultInfo([in]SpeechDiscardType ValueTypes);
    [helpstring("GetXMLResult"), id(10)]
    HRESULT GetXMLResult([in] SPXMLRESULTOPTIONS Options, [out, retval] BSTR* pResult);
    [helpstring("GetXMLErrorInfo"), id(11)]
    HRESULT GetXMLErrorInfo([out] long* LineNumber, [out]BSTR* ScriptLine, [out]BSTR* Source, [out]BSTR* Description, [out]long* ResultCode, [out, retval]VARIANT_BOOL* IsError);
    [helpstring("SetTextFeedback"), id(12)]
    HRESULT SetTextFeedback([in] BSTR Feedback, [in] VARIANT_BOOL WasSuccessful);
};

//#endif // _SAPI_BUILD_VER >= 0x053

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechPhraseInfoBuilder             
//  SAPI C++ Only Interface Equivalent:
//  This interface corresponds to the ISpPhraseBuilder
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechPhraseBuilder
{
    DISPID_SPPBRestorePhraseFromMemory = 1
} DISPID_SpeechPhraseBuilder;

[
    odl,
    uuid(3B151836-DF3A-4E0A-846C-D2ADC9334333),
    dual,
    helpstring("ISpeechPhraseInfoBuilder Interface")
]
interface ISpeechPhraseInfoBuilder : IDispatch
{
    // Methods

    // RestorePhraseFromMemory
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("RestorePhraseFromMemory"), id(1)]
    HRESULT RestorePhraseFromMemory([in] VARIANT* PhraseInMemory,
        [out, retval] ISpeechPhraseInfo** PhraseInfo);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechRecoResultTimes             
//  SAPI C++ Only Interface Equivalent:
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechRecoResultTimes
{
    DISPID_SRRTStreamTime = 1,
    DISPID_SRRTLength,
    DISPID_SRRTTickCount,
    DISPID_SRRTOffsetFromStart
} DISPID_SpeechRecoResultTimes;

[
    odl,
    uuid(62B3B8FB-F6E7-41be-BDCB-056B1C29EFC0),
    dual,
    helpstring("ISpeechRecoResultTimes Interface")
]
interface ISpeechRecoResultTimes : IDispatch
{
    // Properties

    // StreamTime
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("StreamTime"), id(1)]
    HRESULT StreamTime([out, retval]VARIANT* Time);

    // Length
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("Length"), id(2)]
    HRESULT Length([out, retval]VARIANT* Length);

    // TickCount
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("TickCount"), id(3)]
    HRESULT TickCount([out, retval]long* TickCount);

    // Start
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("Start"), id(4)]
    HRESULT OffsetFromStart([out, retval]VARIANT* OffsetFromStart);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechPhraseAlternate               
//  SAPI C++ Only Interface Equivalent:
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechPhraseAlternate
{
    DISPID_SPARecoResult = 1,
    DISPID_SPAStartElementInResult,
    DISPID_SPANumberOfElementsInResult,
    DISPID_SPAPhraseInfo,
    DISPID_SPACommit
} DISPID_SpeechPhraseAlternate;

[
    odl,
    uuid(27864A2A-2B9F-4cb8-92D3-0D2722FD1E73),
    dual,
    helpstring("ISpeechPhraseAlternate Interface")
]
interface ISpeechPhraseAlternate : IDispatch
{
    // Properties

    // RecoResult
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("RecoResult"), id(1)]
    HRESULT RecoResult([out, retval]ISpeechRecoResult** RecoResult);  // Was ISpPhrase, is this right?

// StartElementInResult
//  SAPI C++ Only Interface Equivalent:
//  Default:
//
    [propget, helpstring("StartElementInResult"), id(2)]
    HRESULT StartElementInResult([out, retval]long* StartElement);

    // NumberOfElementsInResult
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("NumberOfElementsInResult"), id(3)]
    HRESULT NumberOfElementsInResult([out, retval]long* NumberOfElements);

    // PhraseInfo
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("Phrase"), id(4)]
    HRESULT PhraseInfo([out, retval]ISpeechPhraseInfo** PhraseInfo);

    // Methods

    // Commit
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("Commit"), id(5)]
    HRESULT Commit(void);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechPhraseAlternates               
//  SAPI C++ Only Interface Equivalent:
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechPhraseAlternates
{
    DISPID_SPAsCount = 1,
    DISPID_SPAsItem = 0,
    DISPID_SPAs_NewEnum = -4
} DISPID_SpeechPhraseAlternates;

[
    odl,
    uuid(B238B6D5-F276-4c3d-A6C1-2974801C3CC2),
    dual,
    helpstring("ISpeechPhraseAlternates Interface")
]
interface ISpeechPhraseAlternates : IDispatch
{
    // Properties

    // Count
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("Count"), id(1)]
    HRESULT Count([out, retval] long* Count);

    // Methods

    // Item
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("Item"), id(0)]
    HRESULT Item([in] long Index, [out, retval]ISpeechPhraseAlternate** PhraseAlternate);

    // _NewEnum
    //  SAPI C++ Only Interface Equivalent:
    //
    [propget, helpstring("Enumerates the alternates"), id(-4)]
    HRESULT _NewEnum([out, retval] IUnknown** EnumVARIANT);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechPhraseInfo               
//  SAPI C++ Only Interface Equivalent:
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechPhraseInfo
{
    DISPID_SPILanguageId = 1,
    DISPID_SPIGrammarId,
    DISPID_SPIStartTime,
    DISPID_SPIAudioStreamPosition,
    DISPID_SPIAudioSizeBytes,
    DISPID_SPIRetainedSizeBytes,
    DISPID_SPIAudioSizeTime,
    DISPID_SPIRule,
    DISPID_SPIProperties,
    DISPID_SPIElements,
    DISPID_SPIReplacements,
    DISPID_SPIEngineId,
    DISPID_SPIEnginePrivateData,
    DISPID_SPISaveToMemory,
    DISPID_SPIGetText,
    DISPID_SPIGetDisplayAttributes
} DISPID_SpeechPhraseInfo;

[
    odl,
    uuid(961559CF-4E67-4662-8BF0-D93F1FCD61B3),
    dual,
    helpstring("ISpeechPhraseInfo Interface")
]
interface ISpeechPhraseInfo : IDispatch
{
    // Properties

    // LanguageId
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("LanguageId"), id(1)]
    HRESULT LanguageId([out, retval]long* LanguageId);

    // GrammarId
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("GrammarId"), id(2)]
    HRESULT GrammarId([out, retval]VARIANT* GrammarId);

    // StartTime
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("StartTime"), id(3)]
    HRESULT StartTime([out, retval]VARIANT* StartTime);

    // AudioStreamPosition
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("AudioStreamPosition"), id(4)]
    HRESULT AudioStreamPosition([out, retval]VARIANT* AudioStreamPosition);

    // AudioSizeBytes
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("AudioSizeBytes"), id(5)]
    HRESULT AudioSizeBytes([out, retval]long* pAudioSizeBytes);

    // RetainedSizeBytes
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("RetainedSizeBytes"), id(6)]
    HRESULT RetainedSizeBytes([out, retval]long* RetainedSizeBytes);

    // AudioSizeTime
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("AudioSizeTime"), id(7)]
    HRESULT AudioSizeTime([out, retval]long* AudioSizeTime);

    // Rule
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("Rule"), id(8)]
    HRESULT Rule([out, retval]ISpeechPhraseRule** Rule);

    // Properties
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("Properties"), id(9)]
    HRESULT Properties([out, retval]ISpeechPhraseProperties** Properties);

    // Elements
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("Elements"), id(10)]
    HRESULT Elements([out, retval]ISpeechPhraseElements** Elements);

    // Replacements
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("Replacements"), id(11)]
    HRESULT Replacements([out, retval]ISpeechPhraseReplacements** Replacements);

    // EngineId
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("EngineId"), id(12)]
    HRESULT EngineId([out, retval]BSTR* EngineIdGuid);

    // EnginePrivateData
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("EnginePrivateData"), id(13)]
    HRESULT EnginePrivateData([out, retval]VARIANT* PrivateData);

    // Methods

    // SaveToMemory
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("SaveToMemory"), id(14)]
    HRESULT SaveToMemory([out, retval]VARIANT* PhraseBlock);

    // GetText
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("GetText"), id(15)]
    HRESULT GetText([in] long StartElement,
        [in] long Elements,
        [in] VARIANT_BOOL UseReplacements,
        [out, retval]BSTR* Text);

    // DisplayAttributes
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("DisplayAttributes"), id(16)]
    HRESULT GetDisplayAttributes([in] long StartElement,
        [in] long Elements,
        [in] VARIANT_BOOL UseReplacements,
        [out, retval]SpeechDisplayAttributes* DisplayAttributes);

};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechPhraseElement              
//  SAPI C++ Only Interface Equivalent:
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechPhraseElement
{
    DISPID_SPEAudioTimeOffset = 1,
    DISPID_SPEAudioSizeTime,
    DISPID_SPEAudioStreamOffset,
    DISPID_SPEAudioSizeBytes,
    DISPID_SPERetainedStreamOffset,
    DISPID_SPERetainedSizeBytes,
    DISPID_SPEDisplayText,
    DISPID_SPELexicalForm,
    DISPID_SPEPronunciation,
    DISPID_SPEDisplayAttributes,
    DISPID_SPERequiredConfidence,
    DISPID_SPEActualConfidence,
    DISPID_SPEEngineConfidence
} DISPID_SpeechPhraseElement;

/////////////////////////////////////////////////
//
// SpeechEngineConfidence Enum
//  SAPI C++ Only Interface Equivalent: 
//
/////////////////////////////////////////////////

typedef enum SpeechEngineConfidence
{
    SECLowConfidence = -1,
    SECNormalConfidence = 0,
    SECHighConfidence = 1
} SpeechEngineConfidence;

[
    odl,
    uuid(E6176F96-E373-4801-B223-3B62C068C0B4),
    dual,
    helpstring("ISpeechPhraseElement Interface")
]
interface ISpeechPhraseElement : IDispatch
{
    // Properties

    // AudioTimeOffset
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("AudioTimeOffset"), id(1)]
    HRESULT AudioTimeOffset([out, retval]long* AudioTimeOffset);

    // AudioSizeTime
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("AudioSizeTime"), id(2)]
    HRESULT AudioSizeTime([out, retval]long* AudioSizeTime);

    // AudioStreamOffset
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("AudioStreamOffset"), id(3)]
    HRESULT AudioStreamOffset([out, retval]long* AudioStreamOffset);

    // AudioSizeBytes
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("AudioSizeBytes"), id(4)]
    HRESULT AudioSizeBytes([out, retval]long* AudioSizeBytes);

    // RetainedStreamOffset
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("RetainedStreamOffset"), id(5)]
    HRESULT RetainedStreamOffset([out, retval]long* RetainedStreamOffset);

    // RetainedSizeBytes
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("RetainedSizeBytes"), id(6)]
    HRESULT RetainedSizeBytes([out, retval]long* RetainedSizeBytes);

    // DisplayText
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("DisplayText"), id(7)]
    HRESULT DisplayText([out, retval]BSTR* DisplayText);

    // LexicalForm
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("LexicalForm"), id(8)]
    HRESULT LexicalForm([out, retval]BSTR* LexicalForm);

    // Pronunciation
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("Pronunciation"), id(9)]
    HRESULT Pronunciation([out, retval]VARIANT* Pronunciation);

    // DisplayAttributes
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("DisplayAttributes"), id(10)]
    HRESULT DisplayAttributes([out, retval]SpeechDisplayAttributes* DisplayAttributes);

    // RequiredConfidence
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("RequiredConfidence"), id(11)]
    HRESULT RequiredConfidence([out, retval]SpeechEngineConfidence* RequiredConfidence);

    // ActualConfidence
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("ActualConfidence"), id(12)]
    HRESULT ActualConfidence([out, retval]SpeechEngineConfidence* ActualConfidence);

    // EngineConfidence
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("EngineConfidence"), id(13)]
    HRESULT EngineConfidence([out, retval]float* EngineConfidence);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechPhraseElements            
//  SAPI C++ Only Interface Equivalent:
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechPhraseElements
{
    DISPID_SPEsCount = 1,
    DISPID_SPEsItem = 0,
    DISPID_SPEs_NewEnum = -4
} DISPID_SpeechPhraseElements;

[
    odl,
    uuid(0626B328-3478-467d-A0B3-D0853B93DDA3),
    dual,
    helpstring("ISpeechPhraseElements Interface")
]
interface ISpeechPhraseElements : IDispatch
{
    // Properties

    // Count
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("Count"), id(1)]
    HRESULT Count([out, retval] long* Count);

    // Methods

    // Item
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("Item"), id(0)]
    HRESULT Item([in] long Index, [out, retval]ISpeechPhraseElement** Element);

    // _NewEnum
    //  SAPI C++ Only Interface Equivalent:
    //
    [propget, helpstring("Enumerates the tokens"), id(-4)]
    HRESULT _NewEnum([out, retval] IUnknown** EnumVARIANT);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechPhraseReplacement             
//  SAPI C++ Only Interface Equivalent:
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechPhraseReplacement
{
    DISPID_SPRDisplayAttributes = 1,
    DISPID_SPRText,
    DISPID_SPRFirstElement,
    DISPID_SPRNumberOfElements
} DISPID_SpeechPhraseReplacement;

[
    odl,
    uuid(2890A410-53A7-4fb5-94EC-06D4998E3D02),
    dual,
    helpstring("ISpeechPhraseReplacement Interface")
]
interface ISpeechPhraseReplacement : IDispatch
{
    // Proerties

    // DisplayAttributes
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("DisplayAttributes"), id(1)]
    HRESULT DisplayAttributes([out, retval]SpeechDisplayAttributes* DisplayAttributes);

    // Text
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("Text"), id(2)]
    HRESULT Text([out, retval]BSTR* Text);

    // FirstElement
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("FirstElement"), id(3)]
    HRESULT FirstElement([out, retval]long* FirstElement);

    // NumberOfElements
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("NumElements"), id(4)]
    HRESULT NumberOfElements([out, retval]long* NumberOfElements);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechPhraseReplacements           
//  SAPI C++ Only Interface Equivalent:
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechPhraseReplacements
{
    DISPID_SPRsCount = 1,
    DISPID_SPRsItem = 0,
    DISPID_SPRs_NewEnum = -4
} DISPID_SpeechPhraseReplacements;

[
    odl,
    uuid(38BC662F-2257-4525-959E-2069D2596C05),
    dual,
    helpstring("ISpeechPhraseReplacements Interface")
]
interface ISpeechPhraseReplacements : IDispatch
{
    // Properties

    // Count
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("Count"), id(1)]
    HRESULT Count([out, retval] long* Count);

    // Methods

    // Item
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("Item"), id(0)]
    HRESULT Item([in] long Index, [out, retval]ISpeechPhraseReplacement** Reps);

    // _NewEnum
    //  SAPI C++ Only Interface Equivalent:
    //
    [propget, helpstring("Enumerates the tokens"), id(-4)]
    HRESULT _NewEnum([out, retval] IUnknown** EnumVARIANT);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechPhraseProperty              
//  SAPI C++ Only Interface Equivalent:
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechPhraseProperty
{
    DISPID_SPPName = 1,
    DISPID_SPPId,
    DISPID_SPPValue,
    DISPID_SPPFirstElement,
    DISPID_SPPNumberOfElements,
    DISPID_SPPEngineConfidence,
    DISPID_SPPConfidence,
    DISPID_SPPParent,
    DISPID_SPPChildren
} DISPID_SpeechPhraseProperty;

[
    odl,
    uuid(CE563D48-961E-4732-A2E1-378A42B430BE),
    dual,
    helpstring("ISpeechPhraseProperty Interface")
]
interface ISpeechPhraseProperty : IDispatch
{
    // Properties

    // Name
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("Name"), id(1)]
    HRESULT Name([out, retval]BSTR* Name);

    // Id
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("Id"), id(2)]
    HRESULT Id([out, retval]long* Id);

    // Value
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("Value"), id(3)]
    HRESULT Value([out, retval]VARIANT* Value);

    // FirstElement
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("FirstElement"), id(4)]
    HRESULT FirstElement([out, retval]long* FirstElement);

    // NumberOfElements
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("NumberOfElements"), id(5)]
    HRESULT NumberOfElements([out, retval]long* NumberOfElements);

    // EngineConfidence
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("EngineConfidence"), id(6)]
    HRESULT EngineConfidence([out, retval]float* Confidence);

    // Confidence
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("Confidence"), id(7)]
    HRESULT Confidence([out, retval]SpeechEngineConfidence* Confidence);

    // Parent
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("Parent"), id(8)]
    HRESULT Parent([out, retval]ISpeechPhraseProperty** ParentProperty);

    // Children
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("Children"), id(9)]
    HRESULT Children([out, retval]ISpeechPhraseProperties** Children);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechPhraseProperties               
//  SAPI C++ Only Interface Equivalent:
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechPhraseProperties
{
    DISPID_SPPsCount = 1,
    DISPID_SPPsItem = 0,
    DISPID_SPPs_NewEnum = -4
} DISPID_SpeechPhraseProperties;

[
    odl,
    uuid(08166B47-102E-4b23-A599-BDB98DBFD1F4),
    dual,
    helpstring("ISpeechPhraseProperties Interface")
]
interface ISpeechPhraseProperties : IDispatch
{
    // Properties

    // Count
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("Count"), id(1)]
    HRESULT Count([out, retval] long* Count);

    // Methods

    // Item
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("Item"), id(0)]
    HRESULT Item([in] long Index, [out, retval]ISpeechPhraseProperty** Property);

    // _NewEnum
    //  SAPI C++ Only Interface Equivalent:
    //
    [propget, helpstring("Enumerates the alternates"), id(-4)]
    HRESULT _NewEnum([out, retval] IUnknown** EnumVARIANT);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechPhraseRule               
//  SAPI C++ Only Interface Equivalent:
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechPhraseRule
{
    DISPID_SPRuleName = 1,
    DISPID_SPRuleId,
    DISPID_SPRuleFirstElement,
    DISPID_SPRuleNumberOfElements,
    DISPID_SPRuleParent,
    DISPID_SPRuleChildren,
    DISPID_SPRuleConfidence,
    DISPID_SPRuleEngineConfidence
} DISPID_SpeechPhraseRule;

[
    odl,
    uuid(A7BFE112-A4A0-48d9-B602-C313843F6964),
    dual,
    helpstring("ISpeechPhraseRule Interface")
]
interface ISpeechPhraseRule : IDispatch
{
    // Properties

    // Name
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("Name"), id(1)]
    HRESULT Name([out, retval]BSTR* Name);

    // Id
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("Id"), id(2)]
    HRESULT Id([out, retval]long* Id);

    // FirstElement
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("FirstElement"), id(3)]
    HRESULT FirstElement([out, retval]long* FirstElement);

    // NumElements
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("NumElements"), id(4)]
    HRESULT NumberOfElements([out, retval]long* NumberOfElements);

    // Parent
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("Parent"), id(5)]
    HRESULT Parent([out, retval]ISpeechPhraseRule** Parent);

    // Children
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("Children"), id(6)]
    HRESULT Children([out, retval]ISpeechPhraseRules** Children);

    // Confidence
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("Confidence"), id(7)]
    HRESULT Confidence([out, retval]SpeechEngineConfidence* ActualConfidence);

    // EngineConfidence
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("EngineConfidence"), id(8)]
    HRESULT EngineConfidence([out, retval]float* EngineConfidence);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechPhraseRules               
//  SAPI C++ Only Interface Equivalent:
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechPhraseRules
{
    DISPID_SPRulesCount = 1,
    DISPID_SPRulesItem = 0,
    DISPID_SPRules_NewEnum = -4
} DISPID_SpeechPhraseRules;

[
    odl,
    uuid(9047D593-01DD-4b72-81A3-E4A0CA69F407),
    dual,
    helpstring("ISpeechPhraseRules Interface")
]
interface ISpeechPhraseRules : IDispatch
{
    // Properties

    // Count
    //  SAPI C++ Only Interface Equivalent:
    //  Default:
    //
    [propget, helpstring("Count"), id(1)]
    HRESULT Count([out, retval] long* Count);

    // Methods

    // Item
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("Item"), id(0)]
    HRESULT Item([in] long Index, [out, retval]ISpeechPhraseRule** Rule);

    // _NewEnum
    //  SAPI C++ Only Interface Equivalent:
    //
    [propget, helpstring("Enumerates the Rules"), id(-4)]
    HRESULT _NewEnum([out, retval] IUnknown** EnumVARIANT);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechLexicon               
//  SAPI C++ Only Interface Equivalent:
//  Default Property: N/A
//  
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechLexicon
{
    DISPID_SLGenerationId = 1,
    DISPID_SLGetWords,
    DISPID_SLAddPronunciation,
    DISPID_SLAddPronunciationByPhoneIds,
    DISPID_SLRemovePronunciation,
    DISPID_SLRemovePronunciationByPhoneIds,
    DISPID_SLGetPronunciations,
    DISPID_SLGetGenerationChange
} DISPID_SpeechLexicon;

/////////////////////////////////////////////////
//
// SpeechLexiconType Enum
//  SAPI C++ Only Interface Equivalent: 
//
/////////////////////////////////////////////////

typedef enum SpeechLexiconType {
    SLTUser = 1, //eLEXTYPE_USER,
    SLTApp = 2 //eLEXTYPE_APP
} SpeechLexiconType;

/////////////////////////////////////////////////
//
// SpeechPartOfSpeech Enum
//  SAPI C++ Only Interface Equivalent: 
//
/////////////////////////////////////////////////

typedef enum SpeechPartOfSpeech {
    SPSNotOverriden = -1, //SPPS_NotOverriden,
    SPSUnknown = 0, //SPPS_Unknown,
    SPSNoun = 0x1000, // SPPS_Noun,
    SPSVerb = 0x2000, //SPPS_Verb,
    SPSModifier = 0x3000, //SPPS_Modifier,
    SPSFunction = 0x4000, //SPPS_Function,
    SPSInterjection = 0x5000, //SPPS_Interjection,
//#if _SAPI_BUILD_VER >= 0x053
    SPSLMA = 0x7000, //SPPS_LMA,
    SPSSuppressWord = 0xF000 //SPPS_SuppressWord
//#endif // _SAPI_BUILD_VER >= 0x053
} SpeechPartOfSpeech;

[
    odl,
    uuid(3DA7627A-C7AE-4b23-8708-638C50362C25),
    dual,
    helpstring("ISpeechLexicon Interface")
]
interface ISpeechLexicon : IDispatch
{
    // Properties

    // GenerationId
    //  SAPI C++ Only Interface Equivalent:
    //
    //
    [propget, helpstring("GenerationId"), id(1), hidden]
    HRESULT GenerationId([out, retval]long* GenerationId);

    //  Methods

    // GetWords
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("GetWords"), id(2)]
    HRESULT GetWords([in]SpeechLexiconType Flags,
        [out]long* GenerationID,
        [out, retval]ISpeechLexiconWords** Words);


    // AddPronunciation
    //  SAPI C++ Only Interface Equivalent:
    // 
    [helpstring("AddPronunciation"), id(3)]
    HRESULT AddPronunciation([in]BSTR bstrWord,
        [in]SpeechLanguageId LangId,
        [in]SpeechPartOfSpeech PartOfSpeech,
        [in]BSTR bstrPronunciation);


    // AddPronunciationByPhoneIds
    //  SAPI C++ Only Interface Equivalent:
    // 
    [helpstring("AddPronunciationByPhoneIds"), id(4)]
    HRESULT AddPronunciationByPhoneIds([in]BSTR bstrWord,
        [in]SpeechLanguageId LangId,
        [in]SpeechPartOfSpeech PartOfSpeech,
        [in]VARIANT* PhoneIds);


    // RemovePronunciation
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("RemovePronunciation"), id(5)]
    HRESULT RemovePronunciation([in]BSTR bstrWord,
        [in]SpeechLanguageId LangId,
        [in]SpeechPartOfSpeech PartOfSpeech,
        [in]BSTR bstrPronunciation);

    // RemovePronunciationByPhoneIds
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("RemovePronunciationByPhoneIds"), id(6)]
    HRESULT RemovePronunciationByPhoneIds([in]BSTR bstrWord,
        [in]SpeechLanguageId LangId,
        [in]SpeechPartOfSpeech PartOfSpeech,
        [in]VARIANT* PhoneIds);

    // GetPronunciations
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("GetPronunciations"), id(7)]
    HRESULT GetPronunciations([in]BSTR bstrWord,
        [in]SpeechLanguageId LangId,
        [in]SpeechLexiconType TypeFlags,
        [out, retval]ISpeechLexiconPronunciations** ppPronunciations);

    // GetGenerationChange
    //  SAPI C++ Only Interface Equivalent:
    //
    [helpstring("GetGenerationChange"), id(8), hidden]
    HRESULT GetGenerationChange([in, out]long* GenerationID,
        [out, retval]ISpeechLexiconWords** ppWords);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechLexiconWords               
//  SAPI C++ Only Interface Equivalent:
//  Default Property: N/A
//  
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechLexiconWords
{
    DISPID_SLWsCount = 1,
    DISPID_SLWsItem = 0,
    DISPID_SLWs_NewEnum = -4
} DISPID_SpeechLexiconWords;

[
    odl,
    uuid(8D199862-415E-47d5-AC4F-FAA608B424E6),
    dual,
    helpstring("ISpeechLexiconWords Interface")
]
interface ISpeechLexiconWords : IDispatch
{
    // Properties

    // Count
    //  SAPI C++ Only Interface Equivalent:
    //  Default: N/A
    //
    [id(1), propget, helpstring("Count")]
    HRESULT Count([out, retval] long* Count);

    // Methods

    // Item
    //  SAPI C++ Only Interface Equivalent:
    //
    [id(0), helpstring("Item")]
    HRESULT Item([in] long Index, [out, retval]ISpeechLexiconWord** Word);

    // _NewEnum
    //  SAPI C++ Only Interface Equivalent:
    //
    [id(-4), propget, helpstring("Enumerates the tokens")]
    HRESULT _NewEnum([out, retval] IUnknown** EnumVARIANT);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechLexiconWord               
//  SAPI C++ Only Interface Equivalent:
//  Default Property: N/A
//  
////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////
//
// SpeechWordType Enum
//  SAPI C++ Only Interface Equivalent: 
//
/////////////////////////////////////////////////

typedef enum SpeechWordType
{
    SWTAdded = 1, //eWORDTYPE_ADDED,
    SWTDeleted = 2 //eWORDTYPE_DELETED
} SpeechWordType;


typedef [hidden] enum DISPID_SpeechLexiconWord
{
    DISPID_SLWLangId = 1,
    DISPID_SLWType,
    DISPID_SLWWord,
    DISPID_SLWPronunciations
} DISPID_SpeechLexiconWord;

[
    odl,
    uuid(4E5B933C-C9BE-48ed-8842-1EE51BB1D4FF),
    dual,
    helpstring("ISpeechLexiconWord Interface")
]
interface ISpeechLexiconWord : IDispatch
{
    // Properties

    // LangID
    //  SAPI C++ Only Interface Equivalent: 
    //
    //
    [id(1), propget]
    HRESULT LangId([out, retval]SpeechLanguageId* LangId);

    // Type
    //  SAPI C++ Only Interface Equivalent: 
    //
    //
    [id(2), propget]
    HRESULT Type([out, retval]SpeechWordType* WordType);

    // Word
    //  SAPI C++ Only Interface Equivalent: 
    //
    //
    [id(3), propget]
    HRESULT Word([out, retval]BSTR* Word);

    // Pronounciations
    //  SAPI C++ Only Interface Equivalent: 
    //
    //
    [id(4), propget]
    HRESULT Pronunciations([out, retval]ISpeechLexiconPronunciations** Pronunciations);
};


////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechLexiconPronunciations               
//  SAPI C++ Only Interface Equivalent:
//  Default Property: N/A
//  
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechLexiconProns
{
    DISPID_SLPsCount = 1,
    DISPID_SLPsItem = 0,
    DISPID_SLPs_NewEnum = -4
} DISPID_SpeechLexiconProns;

[
    odl,
    uuid(72829128-5682-4704-A0D4-3E2BB6F2EAD3),
    dual,
    helpstring("ISpeechLexiconPronunciations Interface")
]
interface ISpeechLexiconPronunciations : IDispatch
{
    // Count
    //  SAPI C++ Only Interface Equivalent: 
    //
    //
    [id(1), propget, helpstring("Count")]
    HRESULT Count([out, retval] long* Count);

    // Item
    //  SAPI C++ Only Interface Equivalent: 
    //
    [id(0), helpstring("Item")]
    HRESULT Item([in] long Index, [out, retval]ISpeechLexiconPronunciation** Pronunciation);

    // _NewEnum
    //
    //
    [id(-4), propget, helpstring("Enumerates the tokens")]
    HRESULT _NewEnum([out, retval] IUnknown** EnumVARIANT);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechLexiconPronunciation               
//  SAPI C++ Only Interface Equivalent:
//  Default Property: N/A
//  
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechLexiconPronunciation
{
    DISPID_SLPType = 1,
    DISPID_SLPLangId,
    DISPID_SLPPartOfSpeech,
    DISPID_SLPPhoneIds,
    DISPID_SLPSymbolic,
} DISPID_SpeechLexiconPronunciation;

[
    odl,
    uuid(95252C5D-9E43-4f4a-9899-48EE73352F9F),
    dual,
    helpstring("ISpeechLexiconPronunciation Interface")
]
interface ISpeechLexiconPronunciation : IDispatch
{
    // Type
    //  SAPI C++ Only Interface Equivalent: 
    //
    //
    [id(1), propget, helpstring("Type")]
    HRESULT Type([out, retval]SpeechLexiconType* LexiconType);

    // LangID
    //  SAPI C++ Only Interface Equivalent: 
    //
    //
    [id(2), propget, helpstring("LangId")]
    HRESULT LangId([out, retval]SpeechLanguageId* LangId);

    // PartOfSpeech
    //  SAPI C++ Only Interface Equivalent: 
    //
    //
    [id(3), propget, helpstring("PartOfSpeech")]
    HRESULT PartOfSpeech([out, retval]SpeechPartOfSpeech* PartOfSpeech);

    // PhoneIds
    //  SAPI C++ Only Interface Equivalent: 
    //  Zero terminated string of phoneids
    //
    [id(4), propget, helpstring("PhoneIds")]
    HRESULT PhoneIds([out, retval]VARIANT* PhoneIds);

    // Symbolic   
    //  SAPI C++ Only Interface Equivalent: 
    //  Zero terminated string of phones
    //
    [id(5), propget, helpstring("Symbolic")]
    HRESULT Symbolic([out, retval]BSTR* Symbolic);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ISpeechPhoneConverter              
//  SAPI C++ Only Interface Equivalent: 
//  Default Property: N/A
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef [hidden] enum DISPID_SpeechPhoneConverter
{
    DISPID_SPCLangId = 1,
    DISPID_SPCPhoneToId,
    DISPID_SPCIdToPhone
} DISPID_SpeechPhoneConverter;

[
    odl,
    uuid(C3E4F353-433F-43d6-89A1-6A62A7054C3D),
    dual,
    helpstring("ISpeechPhoneConverter Interface")
]
interface ISpeechPhoneConverter : IDispatch
{
    // Methods

    // LanguageId
    //  SAPI C++ Only Interface Equivalent: 
    // This can only be set once, if tried it fails
    //   
    [propget, helpstring("LanguageId"), id(1)]
    HRESULT LanguageId([out, retval]SpeechLanguageId* LanguageId);
    [propput, helpstring("LanguageId"), id(1)]
    HRESULT LanguageId([in]SpeechLanguageId LanguageId);

    // PhoneToId
    //  SAPI C++ Only Interface Equivalent: 
    //
    [id(2), helpstring("PhoneToId")]
    HRESULT PhoneToId([in] BSTR Phonemes,
        [out, retval]VARIANT* IdArray);

    // IdToPhone
    //  SAPI C++ Only Interface Equivalent: 
    //
    [id(3), helpstring("IdToPhone")]
    HRESULT IdToPhone([in] VARIANT IdArray,
        [out, retval]BSTR* Phonemes);
}




















/****************************************************************************
*   sapi.idl
*
*   This is the interface definition file for the Microsoft Speech API
*   Version 5.4.
*
*   Copyright (c) Microsoft Corporation. All rights reserved.
*****************************************************************************/

//--- Link with sapi.lib
//cpp_quote("//#pragma comment(lib, \"sapi.lib\")")

//--- Forward and External Declarations -------------------------------------

//cpp_quote("#if 0")  // Ignore our definition in the .H file
//typedef struct WAVEFORMATEX
//{
//    WORD    wFormatTag;        /* format type */
//    WORD    nChannels;         /* number of channels (i.e. mono, stereo...) */
//    DWORD   nSamplesPerSec;    /* sample rate */
//    DWORD   nAvgBytesPerSec;   /* for buffer estimation */
//    WORD    nBlockAlign;       /* block size of data */
//    WORD    wBitsPerSample;    /* Number of bits per sample of mono data */
//    WORD    cbSize;            /* The count in bytes of the size of
//                                    extra information (after cbSize) */
//
//} WAVEFORMATEX;
//cpp_quote("#else")
//cpp_quote("#include <mmsystem.h>")
//cpp_quote("#endif")


//--- Notifications
interface ISpNotifySource;
interface ISpNotifySink;
interface ISpNotifyTranslator;

//--- Object tokens
interface ISpDataKey;
interface ISpObjectTokenCategory;
interface ISpObjectToken;
interface IEnumSpObjectTokens;
interface ISpObjectWithToken;

//--- Resource management
interface ISpResourceManager;

//--- Speech specific events
interface ISpEventSource;
interface ISpEventSink;

//--- Audio streams
interface ISpStreamFormat;
interface ISpStream;
interface ISpStreamFormatConverter;
interface ISpAudio;
interface ISpMMSysAudio;
interface ISpTranscript;


//--- TTS interface
interface ISpVoice;

//--- SR interfaces
interface ISpRecoResult;
interface ISpRecoContext;
interface ISpRecognizer;
//#if _SAPI_BUILD_VER >= 0x053
interface ISpRecoContext2;
interface ISpRecognizer2;
//#if _SAPI_BUILD_VER >= 0x054
interface ISpRecognizer3;
//#endif // _SAPI_BUILD_VER >= 0x054
//#endif // _SAPI_BUILD_VER >= 0x053
interface ISpProperties;

//--- Lexicon interfaces
interface ISpLexicon;

//#if _SAPI_BUILD_VER >= 0x053
//--- Shortcut interfaces
interface ISpShortcut;
//#endif // _SAPI_BUILD_VER >= 0x053

//--- Phoneme conversion interfaces
interface ISpPhoneConverter;
//#if _SAPI_BUILD_VER >= 0x053
interface ISpPhoneticAlphabetConverter;
interface ISpPhoneticAlphabetSelection;
//#endif // _SAPI_BUILD_VER >= 0x053

//--- Phrase interface
interface ISpPhrase;

//#if _SAPI_BUILD_VER >= 0x053
interface ISpRecoGrammar2;
interface ISpeechResourceLoader;
//#endif // _SAPI_BUILD_VER >= 0x053

//
//--- Constants -------------------------------------------------------------
//

//--- DataKey locations
typedef enum SPDATAKEYLOCATION
{
    SPDKL_DefaultLocation = 0,
    SPDKL_CurrentUser = 1,
    SPDKL_LocalMachine = 2,
    SPDKL_CurrentConfig = 5
} SPDATAKEYLOCATION;

//--- TokenUI constants
//cpp_quote("#define SPDUI_EngineProperties   L\"EngineProperties\"")
//cpp_quote("#define SPDUI_AddRemoveWord      L\"AddRemoveWord\"")
//cpp_quote("#define SPDUI_UserTraining       L\"UserTraining\"")
//cpp_quote("#define SPDUI_MicTraining        L\"MicTraining\"")
//cpp_quote("#define SPDUI_RecoProfileProperties L\"RecoProfileProperties\"")
//cpp_quote("#define SPDUI_AudioProperties    L\"AudioProperties\"")
//cpp_quote("#define SPDUI_AudioVolume        L\"AudioVolume\"")
//cpp_quote("#define SPDUI_UserEnrollment     L\"UserEnrollment\"")
//cpp_quote("#define SPDUI_ShareData          L\"ShareData\"")

// new for Vista.  Nothing prevents use downlevel if an engine exposes them
//cpp_quote("#define SPDUI_Tutorial           L\"Tutorial\"")

//--- Data formats - these are used by the CSpStreamFormat class in sphelper.h
typedef enum SPSTREAMFORMAT
{
    SPSF_Default = -1,
    SPSF_NoAssignedFormat = 0,  // Similar to GUID_NULL
    SPSF_Text,
    SPSF_NonStandardFormat,     // Non-SAPI standard format with no WAVEFORMATEX description
    SPSF_ExtendedAudioFormat,   // Non-SAPI standard format but has WAVEFORMATEX description
    // Standard PCM wave formats
    SPSF_8kHz8BitMono,
    SPSF_8kHz8BitStereo,
    SPSF_8kHz16BitMono,
    SPSF_8kHz16BitStereo,
    SPSF_11kHz8BitMono,
    SPSF_11kHz8BitStereo,
    SPSF_11kHz16BitMono,
    SPSF_11kHz16BitStereo,
    SPSF_12kHz8BitMono,
    SPSF_12kHz8BitStereo,
    SPSF_12kHz16BitMono,
    SPSF_12kHz16BitStereo,
    SPSF_16kHz8BitMono,
    SPSF_16kHz8BitStereo,
    SPSF_16kHz16BitMono,
    SPSF_16kHz16BitStereo,
    SPSF_22kHz8BitMono,
    SPSF_22kHz8BitStereo,
    SPSF_22kHz16BitMono,
    SPSF_22kHz16BitStereo,
    SPSF_24kHz8BitMono,
    SPSF_24kHz8BitStereo,
    SPSF_24kHz16BitMono,
    SPSF_24kHz16BitStereo,
    SPSF_32kHz8BitMono,
    SPSF_32kHz8BitStereo,
    SPSF_32kHz16BitMono,
    SPSF_32kHz16BitStereo,
    SPSF_44kHz8BitMono,
    SPSF_44kHz8BitStereo,
    SPSF_44kHz16BitMono,
    SPSF_44kHz16BitStereo,
    SPSF_48kHz8BitMono,
    SPSF_48kHz8BitStereo,
    SPSF_48kHz16BitMono,
    SPSF_48kHz16BitStereo,
    // TrueSpeech format
    SPSF_TrueSpeech_8kHz1BitMono,
    // A-Law formats
    SPSF_CCITT_ALaw_8kHzMono,
    SPSF_CCITT_ALaw_8kHzStereo,
    SPSF_CCITT_ALaw_11kHzMono,
    SPSF_CCITT_ALaw_11kHzStereo,
    SPSF_CCITT_ALaw_22kHzMono,
    SPSF_CCITT_ALaw_22kHzStereo,
    SPSF_CCITT_ALaw_44kHzMono,
    SPSF_CCITT_ALaw_44kHzStereo,
    // u-Law formats
    SPSF_CCITT_uLaw_8kHzMono,
    SPSF_CCITT_uLaw_8kHzStereo,
    SPSF_CCITT_uLaw_11kHzMono,
    SPSF_CCITT_uLaw_11kHzStereo,
    SPSF_CCITT_uLaw_22kHzMono,
    SPSF_CCITT_uLaw_22kHzStereo,
    SPSF_CCITT_uLaw_44kHzMono,
    SPSF_CCITT_uLaw_44kHzStereo,
    // ADPCM formats
    SPSF_ADPCM_8kHzMono,
    SPSF_ADPCM_8kHzStereo,
    SPSF_ADPCM_11kHzMono,
    SPSF_ADPCM_11kHzStereo,
    SPSF_ADPCM_22kHzMono,
    SPSF_ADPCM_22kHzStereo,
    SPSF_ADPCM_44kHzMono,
    SPSF_ADPCM_44kHzStereo,
    // GSM 6.10 formats
    SPSF_GSM610_8kHzMono,
    SPSF_GSM610_11kHzMono,
    SPSF_GSM610_22kHzMono,
    SPSF_GSM610_44kHzMono,
    SPSF_NUM_FORMATS
} SPSTREAMFORMAT;

//cpp_quote("EXTERN_C const GUID SPDFID_Text;")
//cpp_quote("EXTERN_C const GUID SPDFID_WaveFormatEx;")

//--- Root of registry entries for speech use
//cpp_quote("#define SPREG_USER_ROOT          L\"HKEY_CURRENT_USER\\\\SOFTWARE\\\\Microsoft\\\\Speech\"")
//cpp_quote("#define SPREG_LOCAL_MACHINE_ROOT L\"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Speech\"")

//--- Categories for speech resource management
//cpp_quote("#define SPCAT_AUDIOOUT         L\"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Speech\\\\AudioOutput\"")
//cpp_quote("#define SPCAT_AUDIOIN          L\"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Speech\\\\AudioInput\"")
//cpp_quote("#define SPCAT_VOICES           L\"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Speech\\\\Voices\"")
//cpp_quote("#define SPCAT_RECOGNIZERS      L\"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Speech\\\\Recognizers\"")
//cpp_quote("#define SPCAT_APPLEXICONS      L\"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Speech\\\\AppLexicons\"")
//cpp_quote("#define SPCAT_PHONECONVERTERS  L\"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Speech\\\\PhoneConverters\"")
//cpp_quote("#define SPCAT_TEXTNORMALIZERS  L\"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Speech\\\\TextNormalizers\"")
//cpp_quote("#define SPCAT_RECOPROFILES     L\"HKEY_CURRENT_USER\\\\SOFTWARE\\\\Microsoft\\\\Speech\\\\RecoProfiles\"")

//--- Specific token ids of interest
//cpp_quote("#define SPMMSYS_AUDIO_IN_TOKEN_ID        L\"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Speech\\\\AudioInput\\\\TokenEnums\\\\MMAudioIn\\\\\"")
//cpp_quote("#define SPMMSYS_AUDIO_OUT_TOKEN_ID       L\"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Speech\\\\AudioOutput\\\\TokenEnums\\\\MMAudioOut\\\\\"")
//cpp_quote("#define SPCURRENT_USER_LEXICON_TOKEN_ID  L\"HKEY_CURRENT_USER\\\\SOFTWARE\\\\Microsoft\\\\Speech\\\\CurrentUserLexicon\"")
//#if _SAPI_BUILD_VER >= 0x053
// Shortcuts only supported on Vista and above
//cpp_quote("#define SPCURRENT_USER_SHORTCUT_TOKEN_ID  L\"HKEY_CURRENT_USER\\\\SOFTWARE\\\\Microsoft\\\\Speech\\\\CurrentUserShortcut\"")
//#endif // _SAPI_BUILD_VER >= 0x053

//--- Standard token values
//cpp_quote("#define SPTOKENVALUE_CLSID L\"CLSID\"")
//cpp_quote("#define SPTOKENKEY_FILES L\"Files\"")
//cpp_quote("#define SPTOKENKEY_UI L\"UI\"")
//cpp_quote("#define SPTOKENKEY_ATTRIBUTES L\"Attributes\"")
//#if _SAPI_BUILD_VER >= 0x053
//cpp_quote("#define SPTOKENKEY_RETAINEDAUDIO L\"SecondsPerRetainedAudioEvent\"")
//cpp_quote("#define SPTOKENKEY_AUDIO_LATENCY_WARNING L\"LatencyWarningThreshold\"")
//cpp_quote("#define SPTOKENKEY_AUDIO_LATENCY_TRUNCATE L\"LatencyTruncateThreshold\"")
//cpp_quote("#define SPTOKENKEY_AUDIO_LATENCY_UPDATE_INTERVAL L\"LatencyUpdateInterval\"")
//#endif // _SAPI_BUILD_VER >= 0x053

//--- Standard voice category values
//cpp_quote("#define SPVOICECATEGORY_TTSRATE L\"DefaultTTSRate\"")

//--- Standard SR Engine properties
//cpp_quote("#define SPPROP_RESOURCE_USAGE              L\"ResourceUsage\"")
//cpp_quote("#define SPPROP_HIGH_CONFIDENCE_THRESHOLD   L\"HighConfidenceThreshold\"")
//cpp_quote("#define SPPROP_NORMAL_CONFIDENCE_THRESHOLD L\"NormalConfidenceThreshold\"")
//cpp_quote("#define SPPROP_LOW_CONFIDENCE_THRESHOLD    L\"LowConfidenceThreshold\"")
//cpp_quote("#define SPPROP_RESPONSE_SPEED              L\"ResponseSpeed\"")
//cpp_quote("#define SPPROP_COMPLEX_RESPONSE_SPEED      L\"ComplexResponseSpeed\"")
//cpp_quote("#define SPPROP_ADAPTATION_ON               L\"AdaptationOn\"")

// new for Vista, but nothing prevents engines that run downlevel from supporting these
//cpp_quote("#define SPPROP_PERSISTED_BACKGROUND_ADAPTATION L\"PersistedBackgroundAdaptation\"")
//cpp_quote("#define SPPROP_PERSISTED_LANGUAGE_MODEL_ADAPTATION L\"PersistedLanguageModelAdaptation\"")
//cpp_quote("#define SPPROP_UX_IS_LISTENING             L\"UXIsListening\"")

//--- Standard SAPI Recognition Topics
//cpp_quote("#define SPTOPIC_SPELLING L\"Spelling\"")

// CFG Wildcard token
//cpp_quote("#define SPWILDCARD L\"...\"")

// CFG Dication token
//cpp_quote("#define SPDICTATION    L\"*\"")
//cpp_quote("#define SPINFDICTATION L\"*+\"")

//#if _SAPI_BUILD_VER >= 0x053
// Registry key that stores a list of object token CLSIDs marked as safe to instantiate from HKCU
//cpp_quote("#define SPREG_SAFE_USER_TOKENS       L\"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Speech\\\\UserTokens\"")
//#endif // _SAPI_BUILD_VER >= 0x053

// CFG confidence scores
//const signed char SP_LOW_CONFIDENCE = -1;
//const signed char SP_NORMAL_CONFIDENCE = 0;
//const signed char SP_HIGH_CONFIDENCE = +1;
//
//// CFG default weight
//// MIDL does not support floating point in the RHS.  
//// Thus, using 1.0 instead of 1 resulted in unexpected behavior in the resulting type library.
//const float DEFAULT_WEIGHT = 1;
//
//// Lexicon word and pronunciation limits
//const ULONG SP_MAX_WORD_LENGTH = 128;
//const ULONG SP_MAX_PRON_LENGTH = 384;
//
////#if _SAPI_BUILD_VER >= 0x053
//// Flag used in EmulateRecognitionEx to indicate re-sending an existing result
//const ULONG SP_EMULATE_RESULT = 0x40000000;
//#endif // _SAPI_BUILD_VER >= 0x053


//
//--- Interface definitions -------------------------------------------------
//

//--- ISpNotifyCallback -----------------------------------------------------

//cpp_quote("#if defined(__cplusplus)")
//cpp_quote("interface ISpNotifyCallback")
//cpp_quote("{")
//cpp_quote("virtual HRESULT NotifyCallback(")
//cpp_quote("                                     WPARAM wParam,")
//cpp_quote("                                     LPARAM lParam) = 0;")
//cpp_quote("};")
//cpp_quote("#else")
typedef void* ISpNotifyCallback;
//cpp_quote("#endif")

//cpp_quote("#if 0")
typedef long SPNOTIFYCALLBACK;
//cpp_quote("#else")
//cpp_quote("typedef void __stdcall SPNOTIFYCALLBACK(WPARAM wParam, LPARAM lParam);")
//cpp_quote("#endif")

//--- ISpNotifySource -------------------------------------------------------
[
    odl,
    uuid(5EFF4AEF-8487-11D2-961C-00C04F8EE628),
    helpstring("ISpNotifySource Interface")
]
interface ISpNotifySource : stdole.IUnknown
{
    HRESULT SetNotifySink(
        [in] ISpNotifySink* pNotifySink);
    HRESULT SetNotifyWindowMessage(
        [in] HWND hWnd,
        [in] UINT Msg,
        [in] WPARAM wParam,
        [in] LPARAM lParam);
    HRESULT SetNotifyCallbackFunction(
        [in] SPNOTIFYCALLBACK* pfnCallback,
        [in] WPARAM wParam,
        [in] LPARAM lParam);
    HRESULT SetNotifyCallbackInterface(
        [in] ISpNotifyCallback* pSpCallback,
        [in] WPARAM wParam,
        [in] LPARAM lParam);
    HRESULT SetNotifyWin32Event(void);
    HRESULT WaitForNotifyEvent(
        [in] DWORD dwMilliseconds);
    HANDLE  GetNotifyEventHandle();
}

//--- ISpNotifySink ---------------------------------------------------------
[
    odl,
    uuid(259684DC-37C3-11D2-9603-00C04F8EE628),
    helpstring("ISpNotifySink Interface")
]
interface ISpNotifySink : stdole.IUnknown
{
    HRESULT Notify(void);
}


//--- ISpNotifyTranslator ---------------------------------------------------
[
    odl,
    uuid(ACA16614-5D3D-11D2-960E-00C04F8EE628),
    helpstring("ISpNotifyTranslator Interface")
]
interface ISpNotifyTranslator : ISpNotifySink
{
    HRESULT InitWindowMessage(
        [in] HWND hWnd,
        [in] UINT Msg,
        [in] WPARAM wParam,
        [in] LPARAM lParam);
    HRESULT InitCallback(
        [in] SPNOTIFYCALLBACK* pfnCallback,
        [in] WPARAM wParam,
        [in] LPARAM lParam);
    HRESULT InitSpNotifyCallback(
        [in] ISpNotifyCallback* pSpCallback,
        [in] WPARAM wParam,
        [in] LPARAM lParam);

    HRESULT InitWin32Event(
        [in] HANDLE hEvent,
        [in] BOOL fCloseHandleOnRelease);
    HRESULT Wait(
        [in] DWORD dwMilliseconds);
    HANDLE  GetEventHandle();
}


//--- ISpDataKey ------------------------------------------------------------
[
    odl,
    uuid(14056581-E16C-11D2-BB90-00C04F8EE6C0),
    helpstring("ISpDataKey Interface")
]
interface ISpDataKey : stdole.IUnknown
{
    HRESULT SetData(
        [in] long pszValueName,
        [in] ULONG cbData,
        [in] BYTE* pData);
    HRESULT GetData(
        [in] long pszValueName,
        [in] ULONG* pcbData,
        [out] BYTE* pData);
    HRESULT SetStringValue(
        [in] long pszValueName,
        [in] long pszValue);
    HRESULT GetStringValue(
        [in] long pszValueName,
       [out] long* ppszValue);
    HRESULT SetDWORD(
        [in] long pszValueName,
        [in] DWORD dwValue);
    HRESULT GetDWORD(
        [in] long pszValueName,
        [out] DWORD* pdwValue);
    HRESULT OpenKey(
        [in] long pszSubKeyName,
       [out] ISpDataKey** ppSubKey);
    HRESULT CreateKey(
        [in] long pszSubKey,
       [out] ISpDataKey** ppSubKey);
    HRESULT DeleteKey(
        [in] long pszSubKey);
    HRESULT DeleteValue(
        [in] long pszValueName);
    HRESULT EnumKeys(
        [in] ULONG Index,
       [out] long* ppszSubKeyName);
    HRESULT EnumValues(
        [in] ULONG Index,
       [out] long* ppszValueName);
};

//--- ISpRegDataKey ---------------------------------------------------------
[
    odl,
    uuid(92A66E2B-C830-4149-83DF-6FC2BA1E7A5B),
    helpstring("ISpRegDataKey")
]
interface ISpRegDataKey : ISpDataKey
{
    HRESULT SetKey(
        [in] HKEY hkey,
        [in] BOOL fReadOnly);
}

//--- ISpObjectTokenCategory ------------------------------------------------
[
    odl,
    uuid(2D3D3845-39AF-4850-BBF9-40B49780011D),
    helpstring("ISpObjectTokenCategory")
]
interface ISpObjectTokenCategory : ISpDataKey
{
    HRESULT SetId(
        [in] long pszCategoryId,
        [in] BOOL fCreateIfNotExist);
    HRESULT GetId(
       [out] long* ppszCoMemCategoryId);
    HRESULT GetDataKey(
        [in] SPDATAKEYLOCATION spdkl,
       [out] ISpDataKey** ppDataKey);
    HRESULT EnumTokens(
        [in] long pzsReqAttribs,
        [in] long pszOptAttribs,
        [out] IEnumSpObjectTokens** ppEnum);
    HRESULT SetDefaultTokenId(
        [in] long pszTokenId);
    HRESULT GetDefaultTokenId(
       [out] long* ppszCoMemTokenId);
};

//--- ISpObjectToken --------------------------------------------------------
[
    odl,
    uuid(14056589-E16C-11D2-BB90-00C04F8EE6C0),
    helpstring("ISpObjectToken Interface")
]
interface ISpObjectToken : ISpDataKey
{
    HRESULT SetId(
        [in] long pszCategoryId,
        [in] long pszTokenId,
        [in] BOOL fCreateIfNotExist);
    HRESULT GetId(
       [out] long* ppszCoMemTokenId);
    HRESULT GetCategory(
       [out] ISpObjectTokenCategory** ppTokenCategory);
    HRESULT CreateInstance(
        [in] stdole.IUnknown* pUnkOuter,
        [in] DWORD dwClsContext,
        [in] REFIID riid,
        [out] LPVOID ppvObject);
    HRESULT GetStorageFileName(
        [in] REFCLSID clsidCaller,
        [in] long pszValueName,
        [in] long pszFileNameSpecifier,
        [in] ULONG nFolder,       // Same as SHGetFolderPath -- If non-zero, must set CSIDL_FLAG_CREATE
       [out] long* ppszFilePath);
    HRESULT RemoveStorageFileName(
        [in] REFCLSID clsidCaller,
        [in] long pszKeyName,
        [in] BOOL fDeleteFile);
    HRESULT Remove(
        [in] CLSID* pclsidCaller);
    HRESULT IsUISupported(
        [in] long pszTypeOfUI,
        [in] void* pvExtraData,
        [in] ULONG cbExtraData,
        [in] stdole.IUnknown* punkObject,
        [out] BOOL* pfSupported);
    HRESULT DisplayUI(
        [in] HWND hwndParent,
        [in] long pszTitle,
        [in] long pszTypeOfUI,
        [in] void* pvExtraData,
        [in] ULONG cbExtraData,
        [in] stdole.IUnknown* punkObject);
    HRESULT MatchesAttributes(
        [in] long pszAttributes,
        [out] BOOL* pfMatches);
};

[
    odl,
    uuid(B8AAB0CF-346F-49D8-9499-C8B03F161D51),
    helpstring("ISpObjectTokenInit Interface")
]
interface ISpObjectTokenInit : ISpObjectToken
{
    HRESULT InitFromDataKey(
        [in] long pszCategoryId,
        [in] long pszTokenId,
        [in] ISpDataKey* pDataKey);
};

//--- IEnumSpObjectTokens ---------------------------------------------------
// This interface is used to enumerate speech object tokens

[
    odl,
    uuid(06B64F9E-7FDA-11D2-B4F2-00C04F797396),
    helpstring("IEnumSpObjectTokens Interface")
]
interface IEnumSpObjectTokens : stdole.IUnknown
{
    HRESULT Next(
        [in] ULONG celt,
        [out] ISpObjectToken** pelt,
        [out] ULONG* pceltFetched);
    HRESULT Skip(
        [in] ULONG celt);
    HRESULT Reset(void);
    HRESULT Clone(
        [out] IEnumSpObjectTokens** ppEnum);
    HRESULT Item(
        [in] ULONG Index,
        [out] ISpObjectToken** ppToken);
    HRESULT GetCount(
        [out] ULONG* pCount);
};

//--- ISpObjectWithToken ----------------------------------------------------
[
    odl,
    uuid(5B559F40-E952-11D2-BB91-00C04F8EE6C0),
    helpstring("ISpObjectWithToken Interface")
]
interface ISpObjectWithToken : stdole.IUnknown
{
    HRESULT SetObjectToken(
        [in] ISpObjectToken* pToken);
    HRESULT GetObjectToken(
        [out] ISpObjectToken** ppToken);
};

//--- ISpResourceManager ----------------------------------------------------
[
    odl,
    uuid(93384E18-5014-43D5-ADBB-A78E055926BD),
    helpstring("ISpResourceManager Interface")
]
interface ISpResourceManager : IServiceProvider
{
    HRESULT SetObject(
        [in] REFGUID guidServiceId,
        [in] stdole.IUnknown* pUnkObject);
    HRESULT GetObject(
        [in] REFGUID guidServiceId,
        [in] REFCLSID ObjectCLSID,
        [in] REFIID ObjectIID,
        [in] BOOL fReleaseWhenLastExternalRefReleased,
        [out] LPVOID ppObject);
};

//--- ISpEventSource --------------------------------------------------------
typedef enum SPEVENTLPARAMTYPE
{
    SPET_LPARAM_IS_UNDEFINED = 0,
    SPET_LPARAM_IS_TOKEN,
    SPET_LPARAM_IS_OBJECT,
    SPET_LPARAM_IS_POINTER,
    SPET_LPARAM_IS_STRING,
} SPEVENTLPARAMTYPE;

typedef enum SPEVENTENUM
{
    SPEI_UNDEFINED = 0,

    //--- TTS engine
    SPEI_START_INPUT_STREAM = 1,
    SPEI_END_INPUT_STREAM = 2,
    SPEI_VOICE_CHANGE = 3,   // LPARAM_IS_TOKEN
    SPEI_TTS_BOOKMARK = 4,   // LPARAM_IS_STRING
    SPEI_WORD_BOUNDARY = 5,
    SPEI_PHONEME = 6,
    SPEI_SENTENCE_BOUNDARY = 7,
    SPEI_VISEME = 8,
    SPEI_TTS_AUDIO_LEVEL = 9,   // wParam contains current output audio level

    SPEI_TTS_PRIVATE = 15, //--- Engine vendors use this reserved value.

    SPEI_MIN_TTS = 1,
    SPEI_MAX_TTS = 15,

    //--- Speech Recognition
    SPEI_END_SR_STREAM = 34,      // LPARAM contains HRESULT, WPARAM contains flags (SPESF_xxx)
    SPEI_SOUND_START = 35,
    SPEI_SOUND_END = 36,
    SPEI_PHRASE_START = 37,
    SPEI_RECOGNITION = 38,
    SPEI_HYPOTHESIS = 39,
    SPEI_SR_BOOKMARK = 40,
    SPEI_PROPERTY_NUM_CHANGE = 41,  // LPARAM points to a string, WPARAM is the attrib value
    SPEI_PROPERTY_STRING_CHANGE = 42,  // LPARAM pointer to buffer.  Two concatinated null terminated strings.
    SPEI_FALSE_RECOGNITION = 43,  // apparent speech with no valid recognition
    SPEI_INTERFERENCE = 44,  // LPARAM is any combination of SPINTERFERENCE flags
    SPEI_REQUEST_UI = 45,  // LPARAM is string.  
    SPEI_RECO_STATE_CHANGE = 46,  // wParam contains new reco state
    SPEI_ADAPTATION = 47,  // we are now ready to accept the adaptation buffer
    SPEI_START_SR_STREAM = 48,
    SPEI_RECO_OTHER_CONTEXT = 49,  // Phrase finished and recognized, but for other context
    SPEI_SR_AUDIO_LEVEL = 50,  // wParam contains current input audio level
//#if _SAPI_BUILD_VER >= 0x053
    SPEI_SR_RETAINEDAUDIO = 51,
//#endif // _SAPI_BUILD_VER >= 0x053
    SPEI_SR_PRIVATE = 52, // Engine vendors use this reserved value.
//#if _SAPI_BUILD_VER >= 0x053
//#if _SAPI_BUILD_VER >= 0x054
    SPEI_ACTIVE_CATEGORY_CHANGED = 53, // WPARAM and LPARAM are null.
//#else // _SAPI_BUILD_VER >= 0x054
//    SPEI_RESERVED4 = 53, // Reserved for system use.
//#endif // _SAPI_BUILD_VER >= 0x054
    SPEI_RESERVED5 = 54, // Reserved for system use.
    SPEI_RESERVED6 = 55, // Reserved for system use.
//#endif // _SAPI_BUILD_VER >= 0x053

    SPEI_MIN_SR = 34,
//#if _SAPI_BUILD_VER >= 0x053
    SPEI_MAX_SR = 55,  // Value in SAPI 5.3
//#else 
//    SPEI_MAX_SR = 52,  // Value in SAPI 5.1
//#endif // _SAPI_BUILD_VER >= 0x053

    SPEI_RESERVED1 = 30,  // do not use
    SPEI_RESERVED2 = 33,  // do not use
    SPEI_RESERVED3 = 63   // do not use
} SPEVENTENUM;

//cpp_quote("#define SPFEI_FLAGCHECK ( (1ui64 << SPEI_RESERVED1) | (1ui64 << SPEI_RESERVED2) )")

//cpp_quote("#define SPFEI_ALL_TTS_EVENTS (0x000000000000FFFEui64 | SPFEI_FLAGCHECK)")
//cpp_quote("#define SPFEI_ALL_SR_EVENTS  (0x003FFFFC00000000ui64 | SPFEI_FLAGCHECK)")
//cpp_quote("#define SPFEI_ALL_EVENTS      0xEFFFFFFFFFFFFFFFui64")

// The SPFEI macro converts an SPEVENTENUM event value into a 64-bit value.
// Multiple values can then be OR-ed together and passed to SetInterest.
//cpp_quote("#define SPFEI(SPEI_ord) ((1ui64 << SPEI_ord) | SPFEI_FLAGCHECK)")

// SPEVENT is defined 2 ways, because the current version of MIDL does not allow enumerations
// to be used as bit fields.  So we define eEventId and elParamType as int bitfields for MIDL
// and redefine them as their appropriate enumerations for C++
//cpp_quote("#if 0")
typedef struct SPEVENT
{
    WORD        eEventId;      //SPEVENTENUM
    WORD        elParamType;   //SPEVENTLPARAMTYPE
    ULONG       ulStreamNum;        // Input stream number this event is associated with
    ULONGLONG   ullAudioStreamOffset;
    WPARAM      wParam;
    LPARAM      lParam;
} SPEVENT;

typedef struct SPSERIALIZEDEVENT
{
    WORD        eEventId;           //SPEVENTENUM
    WORD        elParamType;        //SPEVENTLPARAMTYPE
    ULONG       ulStreamNum;        // Input stream number this event is associated with
    ULONGLONG   ullAudioStreamOffset;
    ULONG       SerializedwParam;
    LONG        SerializedlParam;
} SPSERIALIZEDEVENT;

typedef struct SPSERIALIZEDEVENT64
{
    WORD        eEventId;           //SPEVENTENUM
    WORD        elParamType;        //SPEVENTLPARAMTYPE
    ULONG       ulStreamNum;        // Input stream number this event is associated with
    ULONGLONG   ullAudioStreamOffset;
    ULONGLONG   SerializedwParam;
    LONGLONG    SerializedlParam;
    // ULONGLONG   ullAudioStreamOffset; // This parameter is included after any other serialized data.
} SPSERIALIZEDEVENT64;

//cpp_quote("#else")
//cpp_quote("typedef struct SPEVENT")
//cpp_quote("{")
//cpp_quote("    SPEVENTENUM        eEventId : 16;")
//cpp_quote("    SPEVENTLPARAMTYPE  elParamType : 16;")
//cpp_quote("    ULONG       ulStreamNum;")
//cpp_quote("    ULONGLONG   ullAudioStreamOffset;")
//cpp_quote("    WPARAM      wParam;")
//cpp_quote("    LPARAM      lParam;")
//cpp_quote("} SPEVENT;")
//cpp_quote("typedef struct SPSERIALIZEDEVENT")
//cpp_quote("{")
//cpp_quote("    SPEVENTENUM        eEventId : 16;")
//cpp_quote("    SPEVENTLPARAMTYPE  elParamType : 16;")
//cpp_quote("    ULONG       ulStreamNum;")
//cpp_quote("    ULONGLONG   ullAudioStreamOffset;")
//cpp_quote("    ULONG       SerializedwParam;")
//cpp_quote("    LONG        SerializedlParam;")
//cpp_quote("} SPSERIALIZEDEVENT;")
//cpp_quote("typedef struct SPSERIALIZEDEVENT64")
//cpp_quote("{")
//cpp_quote("    SPEVENTENUM        eEventId : 16;")
//cpp_quote("    SPEVENTLPARAMTYPE  elParamType : 16;")
//cpp_quote("    ULONG       ulStreamNum;")
//cpp_quote("    ULONGLONG   ullAudioStreamOffset;")
//cpp_quote("    ULONGLONG   SerializedwParam;")
//cpp_quote("    LONGLONG    SerializedlParam;")
//cpp_quote("} SPSERIALIZEDEVENT64;")
//cpp_quote("#endif")


//#if _SAPI_BUILD_VER >= 0x053
//cpp_quote("#if 0")
typedef struct SPEVENTEX
{
    WORD        eEventId;      //SPEVENTENUM
    WORD        elParamType;   //SPEVENTLPARAMTYPE
    ULONG       ulStreamNum;        // Input stream number this event is associated with
    ULONGLONG   ullAudioStreamOffset;
    WPARAM      wParam;
    LPARAM      lParam;
    ULONGLONG   ullAudioTimeOffset;
} SPEVENTEX;

//cpp_quote("#else")
//cpp_quote("typedef struct SPEVENTEX")
//cpp_quote("{")
//cpp_quote("    SPEVENTENUM        eEventId : 16;")
//cpp_quote("    SPEVENTLPARAMTYPE  elParamType : 16;")
//cpp_quote("    ULONG       ulStreamNum;")
//cpp_quote("    ULONGLONG   ullAudioStreamOffset;")
//cpp_quote("    WPARAM      wParam;")
//cpp_quote("    LPARAM      lParam;")
//cpp_quote("    ULONGLONG   ullAudioTimeOffset;")
//cpp_quote("} SPEVENTEX;")
//cpp_quote("#endif")
//#endif // _SAPI_BUILD_VER >= 0x053


//--- Types of interference
typedef enum SPINTERFERENCE
{
    SPINTERFERENCE_NONE = 0,
    SPINTERFERENCE_NOISE,
    SPINTERFERENCE_NOSIGNAL,
    SPINTERFERENCE_TOOLOUD,
    SPINTERFERENCE_TOOQUIET,
    SPINTERFERENCE_TOOFAST,
    SPINTERFERENCE_TOOSLOW,
    SPINTERFERENCE_LATENCY_WARNING,
    SPINTERFERENCE_LATENCY_TRUNCATE_BEGIN,
    SPINTERFERENCE_LATENCY_TRUNCATE_END
} SPINTERFERENCE;

//--- Flags for END_SR_STREAM event (in WPARAM)
typedef enum SPENDSRSTREAMFLAGS
{
    SPESF_NONE = 0,
    SPESF_STREAM_RELEASED = 1, //(1 << 0)
//#if _SAPI_BUILD_VER >= 0x053
    SPESF_EMULATED = 2, //(1 << 1)
//#endif // _SAPI_BUILD_VER >= 0x053
} SPENDSRSTREAMFLAGS;

//--- Viseme features
typedef enum SPVFEATURE
{
    SPVFEATURE_STRESSED = 1, // (1L << 0),
    SPVFEATURE_EMPHASIS = 2, //(1L << 1)
} SPVFEATURE;


//--- Viseme event groups
typedef enum SPVISEMES
{
    // English examples
    //------------------
    SP_VISEME_0 = 0,    // Silence
    SP_VISEME_1,        // AE, AX, AH
    SP_VISEME_2,        // AA
    SP_VISEME_3,        // AO
    SP_VISEME_4,        // EY, EH, UH
    SP_VISEME_5,        // ER
    SP_VISEME_6,        // y, IY, IH, IX
    SP_VISEME_7,        // w, UW
    SP_VISEME_8,        // OW
    SP_VISEME_9,        // AW
    SP_VISEME_10,       // OY
    SP_VISEME_11,       // AY
    SP_VISEME_12,       // h
    SP_VISEME_13,       // r
    SP_VISEME_14,       // l
    SP_VISEME_15,       // s, z
    SP_VISEME_16,       // SH, CH, JH, ZH
    SP_VISEME_17,       // TH, DH
    SP_VISEME_18,       // f, v
    SP_VISEME_19,       // d, t, n
    SP_VISEME_20,       // k, g, NG
    SP_VISEME_21,       // p, b, m
} SPVISEMES;

typedef struct SPEVENTSOURCEINFO
{
    ULONGLONG   ullEventInterest;
    ULONGLONG   ullQueuedInterest;
    ULONG       ulCount;
} SPEVENTSOURCEINFO;

[
    odl,
    uuid(BE7A9CCE-5F9E-11D2-960F-00C04F8EE628),
    helpstring("ISpEventSource Interface")
]
interface ISpEventSource : ISpNotifySource
{
    // It is neccessary to use the SPFEI macro to convert the
    // SPEVENTENUM values into ULONGULONG values.
    HRESULT SetInterest(
        [in] ULONGLONG ullEventInterest,
        [in] ULONGLONG ullQueuedInterest);
    HRESULT GetEvents(
        [in] ULONG ulCount,
        [out] SPEVENT* pEventArray,
        [out] ULONG* pulFetched);
    HRESULT GetInfo(
        [out] SPEVENTSOURCEINFO* pInfo);
};

//#if _SAPI_BUILD_VER >= 0x053
[
    odl,
    uuid(2373A435-6A4B-429e-A6AC-D4231A61975B),
    helpstring("ISpEventSource2 Interface")
]
interface ISpEventSource2 : ISpEventSource
{
    HRESULT GetEventsEx(
        [in] ULONG ulCount,
        [out] SPEVENTEX* pEventArray,
        [out] ULONG* pulFetched);
};
//#endif // _SAPI_BUILD_VER >= 0x053


//--- ISpEventSink ---------------------------------------------------------
[
    odl,
    uuid(BE7A9CC9-5F9E-11D2-960F-00C04F8EE628),
    helpstring("ISpEventSink Interface")
]
interface ISpEventSink : stdole.IUnknown
{
    HRESULT AddEvents(
        [in] SPEVENT* pEventArray,
        [in] ULONG ulCount);
    HRESULT GetEventInterest(
        [out] ULONGLONG* pullEventInterest);
};


//--- ISpStreamFormat -------------------------------------------------------
[
    odl,
    uuid(BED530BE-2606-4F4D-A1C0-54C5CDA5566F),
    helpstring("ISpStreamFormat Interface")
]
interface ISpStreamFormat : IStream
{
    HRESULT GetFormat(
        [in] GUID* pguidFormatId,
        [out] WAVEFORMATEX** ppCoMemWaveFormatEx);
}

typedef enum SPFILEMODE
{
    SPFM_OPEN_READONLY,     // Open existing file, read-only
    SPFM_OPEN_READWRITE,    // (Not supported for wav files) Open existing file, read-write
    SPFM_CREATE,            // (Not supported for wav files) Open file if exists, else create if does not exist (opens read-write)    
    SPFM_CREATE_ALWAYS,     // Create file even if file exists.  Destroys old file.
    SPFM_NUM_MODES          // Used for limit checking
} SPFILEMODE;

//--- ISpStream -------------------------------------------------------------

[
    odl,
    uuid(12E3CCA9-7518-44C5-A5E7-BA5A79CB929E),
    helpstring("ISpStream Interface")
]
interface ISpStream : ISpStreamFormat
{
    HRESULT SetBaseStream(
        [in] IStream* pStream,
        [in] REFGUID rguidFormat,
        [in] WAVEFORMATEX* pWaveFormatEx);
    HRESULT GetBaseStream(
       [out] IStream** ppStream);
    HRESULT BindToFile(
        [in] long pszFileName,
        [in] SPFILEMODE eMode,
        [in] GUID* pFormatId,
        [in] WAVEFORMATEX* pWaveFormatEx,
        [in] ULONGLONG ullEventInterest);
    HRESULT Close();
}

//--- ISpStreamFormatConverter ----------------------------------------------
[
    odl,
    uuid(678A932C-EA71-4446-9B41-78FDA6280A29),
    helpstring("ISpStreamFormatConverter Interface")
]
interface ISpStreamFormatConverter : ISpStreamFormat
{
    HRESULT SetBaseStream(
        [in] ISpStreamFormat* pStream,
        [in] BOOL fSetFormatToBaseStreamFormat,  // If true, then format of format converter stream
        [in] BOOL fWriteToBaseStream);          // will be set to same format as bass stream
                                                 // (set up as a pass-through).  If pStream == NULL
                                                 // and this is set to TRUE, then format of stream is reset
    HRESULT GetBaseStream(
        [out] ISpStreamFormat** ppStream);
    HRESULT SetFormat(
        [in] REFGUID rguidFormatIdOfConvertedStream,
        [in] WAVEFORMATEX* pWaveFormatExOfConvertedStream);
    // Note:  GetFormat method of ISpStreamFormat returns the format of the converted stream.
    HRESULT ResetSeekPosition();
    HRESULT ScaleConvertedToBaseOffset(
        [in] ULONGLONG ullOffsetConvertedStream,
        [out] ULONGLONG* pullOffsetBaseStream);
    HRESULT ScaleBaseToConvertedOffset(
        [in] ULONGLONG ullOffsetBaseStream,
        [out] ULONGLONG* pullOffsetConvertedStream);
};

//--- ISpAudio --------------------------------------------------------------

typedef enum SPAUDIOSTATE
{
    SPAS_CLOSED,
    SPAS_STOP,
    SPAS_PAUSE,
    SPAS_RUN
} SPAUDIOSTATE;

typedef struct SPAUDIOSTATUS
{
    long            cbFreeBuffSpace;
    ULONG           cbNonBlockingIO;
    SPAUDIOSTATE    State;
    ULONGLONG       CurSeekPos;
    ULONGLONG       CurDevicePos;
    DWORD           dwAudioLevel;
    DWORD           dwReserved2;
} SPAUDIOSTATUS;

typedef struct SPAUDIOBUFFERINFO
{
    ULONG           ulMsMinNotification;
    ULONG           ulMsBufferSize;
    ULONG           ulMsEventBias;
} SPAUDIOBUFFERINFO;

[
    odl,
    uuid(C05C768F-FAE8-4EC2-8E07-338321C12452),
    helpstring("ISpAudio Interface")
]
interface ISpAudio : ISpStreamFormat
{
    HRESULT SetState(
        [in] SPAUDIOSTATE NewState,
        [in] ULONGLONG ullReserved);
    HRESULT SetFormat(
        [in] REFGUID rguidFmtId,
        [in] WAVEFORMATEX* pWaveFormatEx);
    HRESULT GetStatus(
        [out] SPAUDIOSTATUS* pStatus);
    HRESULT SetBufferInfo(
        [in] SPAUDIOBUFFERINFO* pBuffInfo);
    HRESULT GetBufferInfo(
        [out] SPAUDIOBUFFERINFO* pBuffInfo);
    HRESULT GetDefaultFormat(
        [out] GUID* pFormatId,
        [out] WAVEFORMATEX** ppCoMemWaveFormatEx);
    HANDLE  EventHandle();
    HRESULT GetVolumeLevel(
        [out] ULONG* pLevel);
    HRESULT SetVolumeLevel(
        [in] ULONG Level);
    HRESULT GetBufferNotifySize(
        [out] ULONG* pcbSize);
    HRESULT SetBufferNotifySize(
        [in] ULONG cbSize);
};

//--- ISpMMSysAudio ---------------------------------------------------------
[
    odl,
    uuid(15806F6E-1D70-4B48-98E6-3B1A007509AB),
    helpstring("ISpMMSysAudio Interface")
]
interface ISpMMSysAudio : ISpAudio
{
    HRESULT GetDeviceId(
        [out] UINT* puDeviceId);
    HRESULT SetDeviceId(
        [in] UINT uDeviceId);
    HRESULT GetMMHandle(
        [out] LPVOID pHandle);
    HRESULT GetLineId(
        [out] UINT* puLineId);
    HRESULT SetLineId(
        [in] UINT uLineId);
};

//--- ISpTranscript ---------------------------------------------------------
[
    odl,
    uuid(10F63BCE-201A-11D3-AC70-00C04F8EE6C0),
    helpstring("ISpTranscript Interface")
]
interface ISpTranscript : stdole.IUnknown
{
    HRESULT GetTranscript(
        [out] long* ppszTranscript);
    HRESULT AppendTranscript(
        [in] long pszTranscript);
};

//--- Structures used by ISpPhrase interface --------------------------------

typedef enum SPDISPLYATTRIBUTES
{
    SPAF_ONE_TRAILING_SPACE = 0x02,
    SPAF_TWO_TRAILING_SPACES = 0x04,
    SPAF_CONSUME_LEADING_SPACES = 0x08,
//#if _SAPI_BUILD_VER >= 0x053
    SPAF_BUFFER_POSITION = 0x10,
    SPAF_ALL = 0x1F,
    SPAF_USER_SPECIFIED = 0x80
//#else
//    SPAF_ALL = 0x0F
//#endif // _SAPI_BUILD_VER >= 0x053
} SPDISPLAYATTRIBUTES;

typedef WCHAR SPPHONEID;
typedef long PSPPHONEID;      // Use this with NULL-terminated SPPHONEID strings.  This gives the proper SAL annotation.
typedef long PCSPPHONEID;    // Use this with const NULL-terminated SPPHONEID strings.  This gives the proper SAL annotation.

typedef struct SPPHRASEELEMENT
{
    ULONG                   ulAudioTimeOffset;
    ULONG                   ulAudioSizeTime;    // In 100ns units
    ULONG                   ulAudioStreamOffset;
    ULONG                   ulAudioSizeBytes;
    ULONG                   ulRetainedStreamOffset;
    ULONG                   ulRetainedSizeBytes;
    long                 pszDisplayText;
    long                 pszLexicalForm;
    long pszPronunciation;
    BYTE                    bDisplayAttributes;
    BYTE             RequiredConfidence;
    BYTE             ActualConfidence;
    BYTE                    Reserved;
    float                   SREngineConfidence;
} SPPHRASEELEMENT;

typedef struct SPPHRASERULE
{
    long                 pszName;
    ULONG                   ulId;
    ULONG                   ulFirstElement;
    ULONG                   ulCountOfElements;
    long pNextSibling;
    long pFirstChild;
    float                   SREngineConfidence;
    BYTE             Confidence;
} SPPHRASERULE;

// For SRGS grammars, this enum indicates what the union is used for
typedef enum SPPHRASEPROPERTYUNIONTYPE
{
    SPPPUT_UNUSED = 0,
    SPPPUT_ARRAY_INDEX                      // the union contains usArrayIndex
} SPPHRASEPROPERTYUNIONTYPE;

typedef struct SPPHRASEPROPERTY
{
    long                 pszName;
    BYTE                 idOrTypeUnion[4];
    /* union
    {
        ULONG               ulId;           // for SAPI grammars, indicates the property ID, if specified
        struct
        {
            byte            bType;          // SPPHRASEPROPERTYUNIONTYPE indicating what the union is used for
            byte            bReserved;
            unsigned short  usArrayIndex;   // for W3C grammars, indicates the array index, if this is an array element
                                            // array elements have the name "item".
        };
    };*/
    long                 pszValue;
    VARIANT                 vValue;     // Will be VT_BOOL, VT_I4, VT_R4, VT_R8, or VT_BYREF (only for dynamic grammars)
    ULONG                   ulFirstElement;
    ULONG                   ulCountOfElements;
    long pNextSibling;
    long pFirstChild;
    float                   SREngineConfidence;
    BYTE             Confidence;
} SPPHRASEPROPERTY;

typedef struct SPPHRASEREPLACEMENT
{
    BYTE                    bDisplayAttributes;
    long                 pszReplacementText;
    ULONG                   ulFirstElement;
    ULONG                   ulCountOfElements;
} SPPHRASEREPLACEMENT;

//#if _SAPI_BUILD_VER >= 0x053
// Structure used to SML generation error info
typedef struct SPSEMANTICERRORINFO
{
    ULONG ulLineNumber;
    long pszScriptLine;
    long pszSource;
    long pszDescription;
    HRESULT hrResultCode;
} SPSEMANTICERRORINFO;
//#endif

//#if _SAPI_BUILD_VER >= 0x053
typedef enum SPSEMANTICFORMAT
{
    SPSMF_SAPI_PROPERTIES = 0,
    SPSMF_SRGS_SEMANTICINTERPRETATION_MS = 1,
    SPSMF_SRGS_SAPIPROPERTIES = 2,
    SPSMF_UPS = 4,
    SPSMF_SRGS_SEMANTICINTERPRETATION_W3C = 8
} SPSEMANTICFORMAT;
//#endif

//#if _SAPI_BUILD_VER >= 0x053
typedef struct SPPHRASE_50
//#else
//typedef struct SPPHRASE
//#endif
{
    ULONG                       cbSize;     // Size of structure
    WORD                        LangID;
    WORD                        wHomophoneGroupId;
    ULONGLONG                   ullGrammarID;
    ULONGLONG                   ftStartTime;
    ULONGLONG                   ullAudioStreamPosition;
    ULONG                       ulAudioSizeBytes;
    ULONG                       ulRetainedSizeBytes;
    ULONG                       ulAudioSizeTime;  // In 100ns units
    SPPHRASERULE                Rule;
    long pProperties;
    long pElements;
    ULONG                       cReplacements;
    long pReplacements;
    UUID                        SREngineID;
    ULONG                       ulSREnginePrivateDataSize;
    long pSREnginePrivateData;
}
//#if _SAPI_BUILD_VER >= 0x053
SPPHRASE_50;
//#else
//SPPHRASE;
//#endif

////#if _SAPI_BUILD_VER >= 0x053
////cpp_quote("#define SP_SPPHRASESIZE_500 sizeof(SPPHRASE_50)")
//
////cpp_quote("#ifdef __cplusplus")
////This typedef is used for C++ to include the header
//#if _SAPI_BUILD_VER > 0x053
////cpp_quote("typedef struct SPPHRASE_53 : public SPPHRASE_50")
//#else
////cpp_quote("typedef struct SPPHRASE : public SPPHRASE_50")
//#endif
////cpp_quote("{")
////cpp_quote("long pSML;")
////cpp_quote("SPSEMANTICERRORINFO* pSemanticErrorInfo;")
//#if _SAPI_BUILD_VER > 0x053
////cpp_quote("} SPPHRASE_53;")
//#else
////cpp_quote("} SPPHRASE;")
//#endif
////cpp_quote("#else")
//#if _SAPI_BUILD_VER > 0x053
typedef struct SPPHRASE_53
//#else
//typedef struct SPPHRASE
//#endif
{
    ULONG                       cbSize;     // Size of structure
    LANGID                      LangID;
    WORD                        wHomophoneGroupId;
    ULONGLONG                   ullGrammarID;
    ULONGLONG                   ftStartTime;
    ULONGLONG                   ullAudioStreamPosition;
    ULONG                       ulAudioSizeBytes;
    ULONG                       ulRetainedSizeBytes;
    ULONG                       ulAudioSizeTime;  // In 100ns units
    SPPHRASERULE                Rule;
    long pProperties;
    long pElements;
    ULONG                       cReplacements;
    long pReplacements;
    UUID                        SREngineID;
    ULONG                       ulSREnginePrivateDataSize;
    long pSREnginePrivateData;
    long                      pSML;
    long pSemanticErrorInfo;
}
//#if _SAPI_BUILD_VER > 0x053
SPPHRASE_53;
//#else
//SPPHRASE;
//#endif
//cpp_quote("#endif // __cplusplus")
//#endif // _SAPI_BUILD_VER >= 0x053

//#if _SAPI_BUILD_VER >= 0x054
//cpp_quote("#define SP_SPPHRASESIZE_530 sizeof(SPPHRASE_53)")

//cpp_quote("#ifdef __cplusplus")
//This typedef is used for C++ to include the header
//cpp_quote("typedef struct SPPHRASE : public SPPHRASE_53")
//cpp_quote("{")
//cpp_quote("SPSEMANTICFORMAT SemanticTagFormat;")
//cpp_quote("} SPPHRASE;")
//cpp_quote("#else")
typedef struct SPPHRASE
{
    ULONG                       cbSize;     // Size of structure
    LANGID                      LangID;
    WORD                        wHomophoneGroupId;
    ULONGLONG                   ullGrammarID;
    ULONGLONG                   ftStartTime;
    ULONGLONG                   ullAudioStreamPosition;
    ULONG                       ulAudioSizeBytes;
    ULONG                       ulRetainedSizeBytes;
    ULONG                       ulAudioSizeTime;  // In 100ns units
    SPPHRASERULE                Rule;
    long pProperties;
    long pElements;
    ULONG                       cReplacements;
    long pReplacements;
    UUID                        SREngineID;
    ULONG                       ulSREnginePrivateDataSize;
    long pSREnginePrivateData;
    long                      pSML;
    long pSemanticErrorInfo;
    SPSEMANTICFORMAT        SemanticTagFormat;
} SPPHRASE;
//cpp_quote("#endif // __cplusplus")
//#endif // _SAPI_BUILD_VER >= 0x054

//--- Serialized phrase

typedef struct SPSERIALIZEDPHRASE
{
    ULONG                   ulSerializedSize;       // Size of structure in bytes
} SPSERIALIZEDPHRASE;

//#if _SAPI_BUILD_VER >= 0x053
typedef struct SPRULE
{
    long                 pszRuleName;
    ULONG                   ulRuleId;
    DWORD                   dwAttributes;
} SPRULE;
//#endif // _SAPI_BUILD_VER >= 0x053

typedef enum SPVALUETYPE
{
    SPDF_PROPERTY = 0x00000001,
    SPDF_REPLACEMENT = 0x00000002,
    SPDF_RULE = 0x00000004,
    SPDF_DISPLAYTEXT = 0x00000008,
    SPDF_LEXICALFORM = 0x00000010,
    SPDF_PRONUNCIATION = 0x00000020,
    SPDF_AUDIO = 0x00000040,
    SPDF_ALTERNATES = 0x00000080,
    SPDF_ALL = 0x000000FF
} SPVALUETYPE;


// Binary grammar public declaration

typedef struct SPBINARYGRAMMAR
{
    ULONG       ulTotalSerializedSize;
} SPBINARYGRAMMAR;

// Possible arguments for methods that take phrase element start and count

typedef enum SPPHRASERNG
{
    SPPR_ALL_ELEMENTS = -1
} SPPHRASERNG;
//cpp_quote("#define SP_GETWHOLEPHRASE SPPR_ALL_ELEMENTS")
//cpp_quote("#define SPRR_ALL_ELEMENTS SPPR_ALL_ELEMENTS")

//cpp_quote("#if 0")
typedef long SPSTATEHANDLE;
//cpp_quote("#else")
//cpp_quote("DECLARE_HANDLE(SPSTATEHANDLE);")
//cpp_quote("#endif")




typedef enum SPRECOEVENTFLAGS
{
    SPREF_AutoPause = 1, //(1 << 0),
    SPREF_Emulated = 2, //(1 << 1)
//#if _SAPI_BUILD_VER >= 0x053
    
    SPREF_SMLTimeout = 4, //(1 << 2),
    SPREF_ExtendableParse = 8, // (1 << 3),
    SPREF_ReSent =16, // (1 << 4),
    SPREF_Hypothesis = 32 ,//(1 << 5),
    SPREF_FalseRecognition = 64 //(1 << 6)
//#endif // _SAPI_BUILD_VER >= 0x053
} SPRECOEVENTFLAGS;



//--- ISpLexicon ------------------------------------------------------------
typedef enum SPPARTOFSPEECH
{
    //--- SAPI5 public POS category values (bits 28-31)
    SPPS_NotOverriden = -1,
    SPPS_Unknown = 0,
    SPPS_Noun = 0x1000,
    SPPS_Verb = 0x2000,
    SPPS_Modifier = 0x3000,
    SPPS_Function = 0x4000,
    SPPS_Interjection = 0x5000
//#if _SAPI_BUILD_VER >= 0x053
    ,
    SPPS_Noncontent = 0x6000,
    SPPS_LMA = 0x7000,    // Words learned through LMA
    SPPS_SuppressWord = 0xF000,    // Special flag to indicate this word should not be recognized
//#endif // _SAPI_BUILD_VER >= 0x053
} SPPARTOFSPEECH;

typedef enum SPLEXICONTYPE
{
    eLEXTYPE_USER = 1, //(1L << 0),
    eLEXTYPE_APP = 2, //(1L << 1),
    eLEXTYPE_VENDORLEXICON = 4, //(1L << 2),
    eLEXTYPE_LETTERTOSOUND = 8, //(1L << 3),
    eLEXTYPE_MORPHOLOGY = 16, //(1L << 4),
    eLEXTYPE_RESERVED4 = 32, //(1L << 5),
    eLEXTYPE_USER_SHORTCUT = 64, //(1L << 6),
    eLEXTYPE_RESERVED6 = 128, //(1L << 7),
    eLEXTYPE_RESERVED7 = 256, //(1L << 8),
    eLEXTYPE_RESERVED8 = 512, //(1L << 9),
    eLEXTYPE_RESERVED9 = 1024, //(1L << 10),
    eLEXTYPE_RESERVED10 = 2048, //(1L << 11),
    eLEXTYPE_PRIVATE1 = 4096, //(1L << 12),
    eLEXTYPE_PRIVATE2 = 8192, //(1L << 13),
    eLEXTYPE_PRIVATE3 = 16384, //(1L << 14),
    eLEXTYPE_PRIVATE4 = 32768, //(1L << 15),
    eLEXTYPE_PRIVATE5 = 65536, //(1L << 16),
    eLEXTYPE_PRIVATE6 = 131072, //(1L << 17),
    eLEXTYPE_PRIVATE7 = 0x00040000, //(1L << 18),
    eLEXTYPE_PRIVATE8 = 0x00080000, //(1L << 19),
    eLEXTYPE_PRIVATE9 = 0x00100000, //(1L << 20),
    eLEXTYPE_PRIVATE10 = 0x00200000, //(1L << 21),
    eLEXTYPE_PRIVATE11 = 0x00400000, //(1L << 22),
    eLEXTYPE_PRIVATE12 = 0x00800000, //(1L << 23),
    eLEXTYPE_PRIVATE13 = 0x01000000, //(1L << 24),
    eLEXTYPE_PRIVATE14 = 0x02000000, //(1L << 25),
    eLEXTYPE_PRIVATE15 = 0x04000000, //(1L << 26),
    eLEXTYPE_PRIVATE16 = 0x08000000, //(1L << 27),
    eLEXTYPE_PRIVATE17 = 0x10000000, //(1L << 28),
    eLEXTYPE_PRIVATE18 = 0x20000000, //(1L << 29),
    eLEXTYPE_PRIVATE19 = 0x40000000, //(1L << 30),
    eLEXTYPE_PRIVATE20 = 0x80000000, //(1L << 31),
} SPLEXICONTYPE;

typedef enum SPWORDTYPE
{
    eWORDTYPE_ADDED = 1, // (1L << 0),
    eWORDTYPE_DELETED //= (1L << 1)
} SPWORDTYPE;

//#if _SAPI_BUILD_VER >= 0x053
typedef enum SPPRONUNCIATIONFLAGS
{
    ePRONFLAG_USED = 1 //(1 << 0)
} SPPRONUNCIATIONFLAGS;
//#endif // _SAPI_BUILD_VER >= 0x053

typedef struct SPWORDPRONUNCIATION
{
    long pNextWordPronunciation;
    SPLEXICONTYPE                   eLexiconType;
    LANGID                          LangID;
    WORD                            wPronunciationFlags; // SPPRONUNCIATIONFLAGS
    SPPARTOFSPEECH                  ePartOfSpeech;
    SPPHONEID                       szPronunciation[1];
} SPWORDPRONUNCIATION;

typedef struct SPWORDPRONUNCIATIONLIST
{
    ULONG                   ulSize;
    long pvBuffer;
    long pFirstWordPronunciation;
} SPWORDPRONUNCIATIONLIST;

typedef struct SPWORD
{
    long pNextWord;
    LANGID                  LangID;
    WORD                    wReserved;
    SPWORDTYPE              eWordType;
    long                  pszWord;
    long pFirstWordPronunciation;
} SPWORD;

typedef struct SPWORDLIST
{
    ULONG                  ulSize;
    long pvBuffer;
    long pFirstWord;
} SPWORDLIST;

[
    odl,
    uuid(DA41A7C2-5383-4DB2-916B-6C1719E3DB58),
    helpstring("ISpLexicon Interface")
]
interface ISpLexicon : stdole.IUnknown
{
    HRESULT GetPronunciations(
        [in] long pszWord,
        [in] LANGID LangID,
        [in] DWORD dwFlags,
        [in, out] SPWORDPRONUNCIATIONLIST* pWordPronunciationList);
    HRESULT AddPronunciation(
        [in] long pszWord,
        [in] LANGID LangID,
        [in] SPPARTOFSPEECH ePartOfSpeech,
        [in] PCSPPHONEID pszPronunciation);
    HRESULT RemovePronunciation(
        [in] long pszWord,
        [in] LANGID LangID,
        [in] SPPARTOFSPEECH ePartOfSpeech,
        [in] PCSPPHONEID pszPronunciation);
    HRESULT GetGeneration(
        [out] DWORD* pdwGeneration);
    HRESULT GetGenerationChange(
        [in] DWORD dwFlags,
        [in, out] DWORD* pdwGeneration,
        [in, out] SPWORDLIST* pWordList);
    HRESULT GetWords(
        [in] DWORD dwFlags,
        [in, out] DWORD* pdwGeneration,
        [in, out] DWORD* pdwCookie,
        [in, out] SPWORDLIST* pWordList);
};

[
    odl,
    uuid(8565572F-C094-41CC-B56E-10BD9C3FF044),
    helpstring("ISpContainerLexicon Interface")
]
interface ISpContainerLexicon : ISpLexicon
{
    HRESULT AddLexicon(
        [in] ISpLexicon* pAddLexicon,
        [in] DWORD dwFlags);
};

//#if _SAPI_BUILD_VER >= 0x053
//--- ISpShortcut-----------------------------------------------------
typedef enum SPSHORTCUTTYPE
{
    SPSHT_NotOverriden = -1,
    SPSHT_Unknown = 0,
    SPSHT_EMAIL = 0x1000,
    SPSHT_OTHER = 0x2000,
    SPPS_RESERVED1 = 0x3000,
    SPPS_RESERVED2 = 0x4000,
    SPPS_RESERVED3 = 0x5000,
    SPPS_RESERVED4 = 0xF000
} SPSHORTCUTTYPE;

typedef struct SPSHORTCUTPAIR
{
    long pNextSHORTCUTPAIR;
    LANGID                  LangID;
    SPSHORTCUTTYPE          shType;
    long                  pszDisplay;
    long                  pszSpoken;
} SPSHORTCUTPAIR;

typedef struct SPSHORTCUTPAIRLIST
{
    ULONG                   ulSize;
    long pvBuffer;
    long pFirstShortcutPair;
} SPSHORTCUTPAIRLIST;

[
    odl,
    uuid(3DF681E2-EA56-11D9-8BDE-F66BAD1E3F3A),
    helpstring("ISpShortcut Interface")
]
interface ISpShortcut : stdole.IUnknown
{
    HRESULT AddShortcut(
        [in] long pszDisplay,
        [in] LANGID LangID,
        [in] long pszSpoken,
        [in] SPSHORTCUTTYPE shType);
    HRESULT RemoveShortcut(
        [in] long pszDisplay,
        [in] LANGID LangID,
        [in] long pszSpoken,
        [in] SPSHORTCUTTYPE shType);
    HRESULT GetShortcuts(
        [in] LANGID LangID,
        [in, out] SPSHORTCUTPAIRLIST* pShortcutpairList);
    HRESULT GetGeneration(
        [out] DWORD* pdwGeneration);
    HRESULT GetWordsFromGenerationChange(
        [in, out] DWORD* pdwGeneration,
        [in, out] SPWORDLIST* pWordList);
    HRESULT GetWords(
        [in, out] DWORD* pdwGeneration,
        [in, out] DWORD* pdwCookie,
        [in, out] SPWORDLIST* pWordList);
    HRESULT GetShortcutsForGeneration(
        [in, out] DWORD* pdwGeneration,
        [in, out] DWORD* pdwCookie,
        [in, out] SPSHORTCUTPAIRLIST* pShortcutpairList);
    HRESULT GetGenerationChange(
        [in, out] DWORD* pdwGeneration,
        [in, out] SPSHORTCUTPAIRLIST* pShortcutpairList);
};
//#endif // _SAPI_BUILD_VER >= 0x053

//--- ISpPhoneConverter -----------------------------------------------------
[
    odl,
    uuid(8445C581-0CAC-4A38-ABFE-9B2CE2826455),
    helpstring("ISpPhoneConverter Interface")
]
interface ISpPhoneConverter : ISpObjectWithToken
{
    HRESULT PhoneToId(
        [in] long pszPhone,
        [out] SPPHONEID* pId);
    HRESULT IdToPhone(
        [in] PCSPPHONEID pId,
        [out] WCHAR* pszPhone);
};


//#if _SAPI_BUILD_VER >= 0x053
//--- ISpPhoneticAlphabetConverter -----------------------------------------------------
[
    odl,
    uuid(133ADCD4-19B4-4020-9FDC-842E78253B17),
    helpstring("ISpPhoneticAlphabetConverter Interface")
]
interface ISpPhoneticAlphabetConverter : stdole.IUnknown
{
    HRESULT GetLangId(
        [out] LANGID* pLangID);
    HRESULT SetLangId(
        [in] LANGID LangID);
    HRESULT SAPI2UPS(
        [in] SPPHONEID* pszSAPIId,
        [out] SPPHONEID* pszUPSId,
        [in] DWORD cMaxLength);
    HRESULT UPS2SAPI(
        [in] SPPHONEID* pszUPSId,
        [out] SPPHONEID* pszSAPIId,
        [in] DWORD cMaxLength);
    HRESULT GetMaxConvertLength(
        [in] DWORD cSrcLength,
        [in] BOOL bSAPI2UPS,
        [out] DWORD* pcMaxDestLength);
};

//--- ISpPhoneticAlphabetSelection -----------------------------------------------------
[
    odl,
    uuid(B2745EFD-42CE-48ca-81F1-A96E02538A90),
    helpstring("ISpPhoneticAlphabetSelection Interface")
]
interface ISpPhoneticAlphabetSelection : stdole.IUnknown
{
    HRESULT IsAlphabetUPS(
        [out] BOOL* pfIsUPS);
    HRESULT SetAlphabetToUPS(
        [in] BOOL fForceUPS);
};
//#endif // _SAPI_BUILD_VER >= 0x053

//--- ISpVoice --------------------------------------------------------------
//  These structures maintain the absolute state of the voice relative to
//  the voice's baseline XML state.
typedef struct SPVPITCH
{
    long MiddleAdj;
    long RangeAdj;
} SPVPITCH;

typedef enum SPVACTIONS
{
    SPVA_Speak = 0,
    SPVA_Silence,
    SPVA_Pronounce,
    SPVA_Bookmark,
    SPVA_SpellOut,
    SPVA_Section,
    SPVA_ParseUnknownTag
} SPVACTIONS;

typedef struct SPVCONTEXT
{
    long pCategory;
    long pBefore;
    long pAfter;
} SPVCONTEXT;

typedef struct SPVSTATE
{
    //--- Action
    SPVACTIONS  eAction;

    //--- Running state values
    LANGID          LangID;
    WORD            wReserved;
    long            EmphAdj;
    long            RateAdj;
    ULONG           Volume;
    SPVPITCH        PitchAdj;
    ULONG           SilenceMSecs;
    long pPhoneIds;              // NULL terminated array of phone ids
    SPPARTOFSPEECH  ePartOfSpeech;
    SPVCONTEXT      Context;
} SPVSTATE;

typedef enum SPRUNSTATE
{
    SPRS_DONE = 1, // (1L << 0),           // The voice is done rendering all queued phrases
    SPRS_IS_SPEAKING = 2 //(1L << 1)            // The SpVoice currently has the audio queue claimed
} SPRUNSTATE;

typedef enum SPVLIMITS
{
    SPMIN_VOLUME = 0,
    SPMAX_VOLUME = 100,
    SPMIN_RATE = -10,
    SPMAX_RATE = 10
} SPVLIMITS;

typedef enum SPVPRIORITY
{
    SPVPRI_NORMAL = 0,
    SPVPRI_ALERT, // = (1L << 0),
    SPVPRI_OVER// = (1L << 1)
} SPVPRIORITY;

typedef struct SPVOICESTATUS
{
    ULONG       ulCurrentStream;        // Current stream being rendered
    ULONG       ulLastStreamQueued;     // Number of the last stream queued
    HRESULT     hrLastResult;           // Result of last speak
    DWORD       dwRunningState;         // SPRUNSTATE
    ULONG       ulInputWordPos;         // Input position of current word being rendered
    ULONG       ulInputWordLen;         // Length of current word being rendered
    ULONG       ulInputSentPos;         // Input position of current sentence being rendered
    ULONG       ulInputSentLen;         // Length of current sentence being rendered
    LONG        lBookmarkId;            // Current bookmark converted to a long integer
    SPPHONEID   PhonemeId;              // Current phoneme id
    SPVISEMES   VisemeId;               // Current viseme
    DWORD       dwReserved1;            // Reserved for future expansion
    DWORD       dwReserved2;            // Reserved for future expansion
} SPVOICESTATUS;

typedef enum SPEAKFLAGS
{
//    //--- SpVoice flags
    SPF_DEFAULT = 0,             // Synchronous, no purge, xml auto detect
    SPF_ASYNC = 1, //(1L << 0),     // Asynchronous call
    SPF_PURGEBEFORESPEAK = 2, // (1L << 1),     // Purge current data prior to speaking this
    SPF_IS_FILENAME = 4, //(1L << 2),     // The string passed to Speak() is a file name
    SPF_IS_XML = 8, //(1L << 3),     // The input text will be parsed for XML markup
    SPF_IS_NOT_XML = 16, //(1L << 4),     // The input text will not be parsed for XML markup
    SPF_PERSIST_XML = 32, //(1L << 5),     // Persists XML global state changes

    //--- Normalizer flags
    SPF_NLP_SPEAK_PUNC = 64, //(1L << 6),     // The normalization processor should speak the punctuation

//#if _SAPI_BUILD_VER >= 0x053
    //--- TTS Format 
    SPF_PARSE_SAPI = 128, //(1L << 7),     // Force XML parsing as MS SAPI
    SPF_PARSE_SSML = 256, //(1L << 8),     // Force XML parsing as W3C SSML
    SPF_PARSE_AUTODETECT = 0,             // No set flag in bits 7 or 8 results in autodetection
//#endif // _SAPI_BUILD_VER >= 0x053

    //--- Masks
    SPF_NLP_MASK = (64),
//#if _SAPI_BUILD_VER >= 0x053
//    SPF_PARSE_MASK = (SPF_PARSE_SAPI | SPF_PARSE_SSML),
//    SPF_VOICE_MASK = (SPF_ASYNC | SPF_PURGEBEFORESPEAK | SPF_IS_FILENAME | SPF_IS_XML | SPF_IS_NOT_XML | SPF_NLP_MASK | SPF_PERSIST_XML | SPF_PARSE_MASK),
//#else
//    SPF_VOICE_MASK = (SPF_ASYNC | SPF_PURGEBEFORESPEAK | SPF_IS_FILENAME | SPF_IS_XML | SPF_IS_NOT_XML | SPF_NLP_MASK | SPF_PERSIST_XML),
////#endif // _SAPI_BUILD_VER >= 0x053
//    SPF_UNUSED_FLAGS = ~(SPF_VOICE_MASK)
} SPEAKFLAGS;

[
    odl,
    uuid(6C44DF74-72B9-4992-A1EC-EF996E0422D4),
    helpstring("ISpVoice Interface")
]
interface ISpVoice : ISpEventSource
{
    HRESULT SetOutput(
        [in] stdole.IUnknown* pUnkOutput,
        [in] BOOL fAllowFormatChanges);
    HRESULT GetOutputObjectToken(
       [out] ISpObjectToken** ppObjectToken);
    HRESULT GetOutputStream(
        [out] ISpStreamFormat** ppStream);
    HRESULT Pause(void);
    HRESULT Resume(void);
    HRESULT SetVoice(
        [in] ISpObjectToken* pToken);
    HRESULT GetVoice(
       [out] ISpObjectToken** ppToken);
    HRESULT Speak(
        [in] long pwcs,
        [in] SPEAKFLAGS dwFlags,
        [out] ULONG* pulStreamNumber);
    HRESULT SpeakStream(
        [in] IStream* pStream,  // If not ISpStreamFormat supported then SPDFID_Text assumed
        [in] SPEAKFLAGS dwFlags,
        [out] ULONG* pulStreamNumber);
    HRESULT GetStatus(
        [out] SPVOICESTATUS* pStatus,
       [out] long* ppszLastBookmark);
    HRESULT Skip(
        [in] long pItemType,
        [in] long lNumItems,
        [out] ULONG* pulNumSkipped);
    HRESULT SetPriority(
        [in] SPVPRIORITY ePriority);
    HRESULT GetPriority(
        [out] SPVPRIORITY* pePriority);
    HRESULT SetAlertBoundary(
        [in] SPEVENTENUM eBoundary);
    HRESULT GetAlertBoundary(
        [out] SPEVENTENUM* peBoundary);
    HRESULT SetRate(
        [in] long RateAdjust);
    HRESULT GetRate(
        [out] long* pRateAdjust);
    HRESULT SetVolume(
        [in] USHORT usVolume);
    HRESULT GetVolume(
        [out] USHORT* pusVolume);
    HRESULT WaitUntilDone(
        [in] ULONG msTimeout);
    HRESULT SetSyncSpeakTimeout(
        [in] ULONG msTimeout);
    HRESULT GetSyncSpeakTimeout(
        [out] ULONG* pmsTimeout);
    HANDLE SpeakCompleteEvent();
    HRESULT IsUISupported(
        [in] long pszTypeOfUI,
        [in] void* pvExtraData,
        [in] ULONG cbExtraData,
        [out] BOOL* pfSupported);
    HRESULT DisplayUI(
        [in] HWND hwndParent,
        [in] long pszTitle,
        [in] long pszTypeOfUI,
        [in] void* pvExtraData,
        [in] ULONG cbExtraData);
};


//--- ISpPhrase interface ---------------------------------------------------
[
    odl,
    uuid(1A5C0354-B621-4b5a-8791-D306ED379E53),
    helpstring("ISpPhrase Interface")
]
interface ISpPhrase : stdole.IUnknown
{
    HRESULT GetPhrase(
       [out] SPPHRASE** ppCoMemPhrase);
    HRESULT GetSerializedPhrase(
       [out] SPSERIALIZEDPHRASE** ppCoMemPhrase);
    HRESULT GetText(
        [in] ULONG ulStart,
        [in] ULONG ulCount,
        [in] BOOL fUseTextReplacements,
       [out] long* ppszCoMemText,
        [out] BYTE* pbDisplayAttributes);
    HRESULT Discard(
        [in] DWORD dwValueTypes);
};

[
    odl,
    uuid(8FCEBC98-4E49-4067-9C6C-D86A0E092E3D),
    helpstring("ISpPhraseAlt Interface")
]
interface ISpPhraseAlt : ISpPhrase
{
    HRESULT GetAltInfo(
        [out] ISpPhrase** ppParent,
        [out] ULONG* pulStartElementInParent,
        [out] ULONG* pcElementsInParent,
        [out] ULONG* pcElementsInAlt);
    HRESULT Commit();
};

//#if _SAPI_BUILD_VER >= 0x053


[
    odl,
    uuid(F264DA52-E457-4696-B856-A737B717AF79),
    helpstring("ISpPhrase2 Interface")
]
interface ISpPhrase2 : ISpPhrase
{
    HRESULT GetXMLResult(
       [out] long* ppszCoMemXMLResult,
        [in] SPXMLRESULTOPTIONS Options);
    HRESULT GetXMLErrorInfo(
        [out] SPSEMANTICERRORINFO* pSemanticErrorInfo);
    HRESULT GetAudio(
        [in] ULONG ulStartElement,
        [in] ULONG cElements,
       [out] ISpStreamFormat** ppStream);
};
//#endif // _SAPI_BUILD_VER >= 0x053



//--- ISpRecoResult ---------------------------------------------------------
typedef struct SPRECORESULTTIMES
{
    FILETIME        ftStreamTime;           // GetSystemTimeAsFileTime() at start of result
                                            //   UTC time as number of 100-nanosecond intervals
                                            //   since January 1, 1601
    ULONGLONG       ullLength;              // length in 100ns units
    DWORD           dwTickCount;            // GetTickCount() at start of result
                                            //   milliseconds that have elapsed since the
                                            //   system was started.
    ULONGLONG       ullStart;               // 100ns units since start of stream
} SPRECORESULTTIMES;


typedef struct SPSERIALIZEDRESULT
{
    ULONG           ulSerializedSize;       // Count in bytes (including this ULONG) of the entire phrase
} SPSERIALIZEDRESULT;


[
    odl,
    uuid(20B053BE-E235-43cd-9A2A-8D17A48B7842),
    helpstring("ISpRecoResult Interface")
]
interface ISpRecoResult : ISpPhrase
{
    HRESULT GetResultTimes([out] SPRECORESULTTIMES* pTimes);

    HRESULT GetAlternates(
        [in] ULONG ulStartElement,
        [in] ULONG cElements,
        [in] ULONG ulRequestCount,
        [out] ISpPhraseAlt** ppPhrases,
        [out] ULONG* pcPhrasesReturned);

    HRESULT GetAudio(
        [in] ULONG ulStartElement,
        [in] ULONG cElements,
        [out] ISpStreamFormat** ppStream);
    HRESULT SpeakAudio(
        [in] ULONG ulStartElement,
        [in] ULONG cElements,
        [in] DWORD dwFlags,
        [out] ULONG* pulStreamNumber);
    HRESULT Serialize(
        [out] SPSERIALIZEDRESULT** ppCoMemSerializedResult);
    HRESULT ScaleAudio(
        [in] GUID* pAudioFormatId,
        [in] WAVEFORMATEX* pWaveFormatEx);
    HRESULT GetRecoContext(
        [out] ISpRecoContext** ppRecoContext);
};

//#if _SAPI_BUILD_VER >= 0x053
//--- Flags for CommitText
typedef enum SPCOMMITFLAGS
{
    SPCF_NONE = 0,
    SPCF_ADD_TO_USER_LEXICON = 1, //(1 << 0),
    SPCF_DEFINITE_CORRECTION = 2 //(1 << 1)
} SPCOMMITFLAGS;

[
    odl,
    uuid(27CAC6C4-88F2-41f2-8817-0C95E59F1E6E),
    helpstring("ISpRecoResult2 Interface")
]
interface ISpRecoResult2 : ISpRecoResult
{
    // Does a basic Commit without updating the reco result
    HRESULT CommitAlternate(
        [in] ISpPhraseAlt* pPhraseAlt,
        [out] ISpRecoResult** ppNewResult);

    // Commits some new text for recognizer learning
    HRESULT CommitText(
        [in] ULONG ulStartElement,
        [in] ULONG cElements,
        [in] long pszCorrectedData,
        [in] SPCOMMITFLAGS eCommitFlags); // SPCOMMITFLAGS

    HRESULT SetTextFeedback(
        [in] long pszFeedback,
        [in] BOOL fSuccessful);
}


[
    odl,
    uuid(AE39362B-45A8-4074-9B9E-CCF49AA2D0B6),
    helpstring("ISpXMLRecoResult Interface")
]
interface ISpXMLRecoResult : ISpRecoResult
{
    HRESULT GetXMLResult(
       [out] long* ppszCoMemXMLResult,
        [in] SPXMLRESULTOPTIONS Options);
    HRESULT GetXMLErrorInfo(
        [out] SPSEMANTICERRORINFO* pSemanticErrorInfo);
};
//#endif // _SAPI_BUILD_VER >= 0x053



typedef struct tagSPTEXTSELECTIONINFO
{
    ULONG       ulStartActiveOffset;
    ULONG       cchActiveChars;
    ULONG       ulStartSelection;
    ULONG       cchSelection;
} SPTEXTSELECTIONINFO;


typedef enum SPWORDPRONOUNCEABLE
{
    SPWP_UNKNOWN_WORD_UNPRONOUNCEABLE = 0,
    SPWP_UNKNOWN_WORD_PRONOUNCEABLE = 1,
    SPWP_KNOWN_WORD_PRONOUNCEABLE = 2
} SPWORDPRONOUNCEABLE;


typedef enum SPGRAMMARSTATE
{
    SPGS_DISABLED = 0,
    SPGS_ENABLED = 1,
    SPGS_EXCLUSIVE = 3
} SPGRAMMARSTATE;


typedef enum SPCONTEXTSTATE
{
    SPCS_DISABLED = 0,
    SPCS_ENABLED = 1,
} SPCONTEXTSTATE;


typedef enum SPRULESTATE
{
    SPRS_INACTIVE = 0,
    SPRS_ACTIVE = 1,
    SPRS_ACTIVE_WITH_AUTO_PAUSE = 3
//#if _SAPI_BUILD_VER >= 0x053
    ,
    SPRS_ACTIVE_USER_DELIMITED = 4
//#endif // _SAPI_BUILD_VER >= 0x053
} SPRULESTATE;

//const ULONGLONG SP_STREAMPOS_ASAP = 0;
//const ULONGLONG SP_STREAMPOS_REALTIME = -1;


//--- ISpGrammarBuilder -------------------------------------------------------

// Special transition types used only by AddRuleTransition

//cpp_quote("#define SPRULETRANS_TEXTBUFFER (SPSTATEHANDLE)(-1)")
//cpp_quote("#define SPRULETRANS_WILDCARD   (SPSTATEHANDLE)(-2)")
//cpp_quote("#define SPRULETRANS_DICTATION  (SPSTATEHANDLE)(-3)")


typedef enum SPGRAMMARWORDTYPE
{
    SPWT_DISPLAY,
    SPWT_LEXICAL,
    SPWT_PRONUNCIATION
//#if _SAPI_BUILD_VER >= 0x053
    ,
    SPWT_LEXICAL_NO_SPECIAL_CHARS
//#endif // _SAPI_BUILD_VER >= 0x053
} SPGRAMMARWORDTYPE;

typedef struct tagSPPROPERTYINFO
{
    long                 pszName;
    ULONG                   ulId;
    long                 pszValue;
    VARIANT                 vValue;     // Must be VT_BOOL, VT_I4, VT_R4, VT_R8, or VT_BYREF (only for dynamic grammars)
} SPPROPERTYINFO;

typedef enum SPCFGRULEATTRIBUTES
{
    SPRAF_TopLevel = 1, // (1 << 0),
    SPRAF_Active = 2, //(1 << 1),
    SPRAF_Export = 4, //(1 << 2),
    SPRAF_Import = 8, //(1 << 3),
    SPRAF_Interpreter = 16, //(1 << 4),
    SPRAF_Dynamic = 32, //(1 << 5),
//#if _SAPI_BUILD_VER >= 0x053
    SPRAF_Root = 64, // (1 << 6),
//#endif // _SAPI_BUILD_VER >= 0x053

    // The following flags are only valid at run-time as part of a rule state and
    // are not valid to pass as part of a rule definition.
    SPRAF_AutoPause = 0x10000, //(1 << 16)
//#if _SAPI_BUILD_VER >= 0x053
    
    SPRAF_UserDelimited = 0x20000 // (1 << 17)
//#endif // _SAPI_BUILD_VER >= 0x053
} SPCFGRULEATTRIBUTES;

[
    odl,
    uuid(8137828F-591A-4A42-BE58-49EA7EBAAC68),
    helpstring("ISpGrammarBuilder Interface")
]
interface ISpGrammarBuilder : stdole.IUnknown
{
    HRESULT ResetGrammar(
        [in] LANGID NewLanguage);
    HRESULT GetRule(
        [in] long pszRuleName,
        [in] DWORD dwRuleId,
        [in] DWORD dwAttributes,
        [in] BOOL fCreateIfNotExist,
        [out] SPSTATEHANDLE* phInitialState);
    HRESULT ClearRule(
        [in] SPSTATEHANDLE hState);
    HRESULT CreateNewState(
        [in] SPSTATEHANDLE hState,
        [out] SPSTATEHANDLE* phState);
    HRESULT AddWordTransition(
        [in] SPSTATEHANDLE hFromState,
        [in] SPSTATEHANDLE hToState,
        [in] long psz, // If NULL then epsilon
        [in] long pszSeparators, // If NULL then psz points to a single word, else specifies valid separator characters
        [in] SPGRAMMARWORDTYPE eWordType,
        [in] float Weight,
        [in] SPPROPERTYINFO* pPropInfo);
    HRESULT AddRuleTransition(
        [in] SPSTATEHANDLE hFromState,
        [in] SPSTATEHANDLE hToState,
        [in] SPSTATEHANDLE hRule, // Must be the initial state of the rule
        [in] float Weight,
        [in] SPPROPERTYINFO* pPropInfo);
    HRESULT AddResource(
        [in] SPSTATEHANDLE hRuleState,  // Any state handle in a rule is OK
        [in] long pszResourceName,
        [in] long pszResourceValue);
    HRESULT Commit(
        [in] DWORD dwReserved);
};

// --- Options for Load methods on ISpRecoGrammar
typedef enum SPLOADOPTIONS
{
    SPLO_STATIC = 0,
    SPLO_DYNAMIC = 1
} SPLOADOPTIONS;



//--- ISpRecoGrammar -------------------------------------------------------
[
    odl,
    uuid(2177DB29-7F45-47D0-8554-067E91C80502),
    helpstring("ISpRecoGrammar Interface")
]
interface ISpRecoGrammar : ISpGrammarBuilder
{
    HRESULT GetGrammarId(
        [out] ULONGLONG* pullGrammarId);
    HRESULT GetRecoContext(
       [out] ISpRecoContext** ppRecoCtxt);

    // Command and control interfaces
    HRESULT LoadCmdFromFile(
        [in] long pszFileName,
        [in] SPLOADOPTIONS Options);
    HRESULT LoadCmdFromObject(
        [in] REFCLSID rcid,
        [in] long pszGrammarName,
        [in] SPLOADOPTIONS Options);
    HRESULT LoadCmdFromResource(
        [in] HMODULE hModule,
        [in] long pszResourceName,
        [in] long pszResourceType,
        [in] WORD wLanguage,
        [in] SPLOADOPTIONS Options);
    HRESULT LoadCmdFromMemory(
        [in] SPBINARYGRAMMAR* pGrammar,
        [in] SPLOADOPTIONS Options);
    HRESULT LoadCmdFromProprietaryGrammar(
        [in] REFGUID rguidParam,
        [in] long pszStringParam,
        [in] void* pvDataPrarm,
        [in] ULONG cbDataSize,
        [in] SPLOADOPTIONS Options);
    HRESULT SetRuleState(
        [in] long pszName,
        [in] void* pReserved,
        [in] SPRULESTATE NewState);
    HRESULT SetRuleIdState(
        [in] ULONG ulRuleId,
        [in] SPRULESTATE NewState);

    // Dictation / statistical language model
    HRESULT LoadDictation(
        [in] long pszTopicName,
        [in] SPLOADOPTIONS Options);
    HRESULT UnloadDictation();
    HRESULT SetDictationState(
        [in] SPRULESTATE NewState);

    // Word sequence buffer
    HRESULT SetWordSequenceData(
        [in] WCHAR* pText,
        [in] ULONG cchText,
        [in] SPTEXTSELECTIONINFO* pInfo);
    HRESULT SetTextSelection(
        [in] SPTEXTSELECTIONINFO* pInfo);
    HRESULT IsPronounceable(
        [in] long pszWord,
        [out] SPWORDPRONOUNCEABLE* pWordPronounceable);
    HRESULT SetGrammarState(
        [in] SPGRAMMARSTATE eGrammarState);
    HRESULT SaveCmd(
        [in] IStream* pStream,
        [out] long* ppszCoMemErrorText);
    HRESULT GetGrammarState(
        [out] SPGRAMMARSTATE* peGrammarState);
};



//#if _SAPI_BUILD_VER >= 0x053
//--- ISpGrammarBuilder2 -------------------------------------------------------

// Text Subset enumeration
typedef enum SPMATCHINGMODE
{
    AllWords = 0,
    Subsequence = 1,
    OrderedSubset = 3,
    SubsequenceContentRequired = 5,
    OrderedSubsetContentRequired = 7
} SPMATCHINGMODE;

// Phonetic alphabet supported
typedef enum PHONETICALPHABET
{
    PA_Ipa = 0,
    PA_Ups = 1,
    PA_Sapi = 2,
}  PHONETICALPHABET;

[
    odl,
    uuid(8AB10026-20CC-4b20-8C22-A49C9BA78F60),
    helpstring("ISpGrammarBuilder2 Interface")
]
interface ISpGrammarBuilder2 : stdole.IUnknown
{
    HRESULT AddTextSubset(
        [in] SPSTATEHANDLE hFromState,
        [in] SPSTATEHANDLE hToState,
        [in] long psz,
        [in] SPMATCHINGMODE eMatchMode);
    HRESULT SetPhoneticAlphabet(
        [in] PHONETICALPHABET phoneticALphabet);
}

//--- ISpRecoGrammar2 -------------------------------------------------------
//cpp_quote("#define SPRP_NORMAL 0")

[
    odl,
    uuid(4B37BC9E-9ED6-44a3-93D3-18F022B79EC3),
    helpstring("ISpRecoGrammar2 Interface")
]
interface ISpRecoGrammar2 : stdole.IUnknown
{
    HRESULT GetRules(
        [out] SPRULE** ppCoMemRules,
        [out] UINT* puNumRules);
    HRESULT LoadCmdFromFile2(
        [in] long pszFileName,
        [in] SPLOADOPTIONS Options,
        [in] long pszSharingUri,
        [in] long pszBaseUri);
    HRESULT LoadCmdFromMemory2(
        [in] SPBINARYGRAMMAR* pGrammar,
        [in] SPLOADOPTIONS Options,
        [in] long pszSharingUri,
        [in] long pszBaseUri);
    HRESULT SetRulePriority(
        [in] long pszRuleName,
        [in] ULONG ulRuleId,
        [in] int nRulePriority);
    HRESULT SetRuleWeight(
        [in] long pszRuleName,
        [in] ULONG ulRuleId,
        [in] float flWeight);
    HRESULT SetDictationWeight(
        [in] float flWeight);
    HRESULT SetGrammarLoader(
        [in] ISpeechResourceLoader* pLoader);
    HRESULT SetSMLSecurityManager(
        [in] IInternetSecurityManager* pSMLSecurityManager);
}

//--- ISpeechResourceLoader -------------------------------------------------------
[
    odl,
    uuid(B9AC5783-FCD0-4b21-B119-B4F8DA8FD2C3),
    helpstring("ISpeechResourceLoader Interface")
]
interface ISpeechResourceLoader : IDispatch
{
    [id(1)]
    HRESULT LoadResource(
        [in] BSTR bstrResourceUri,
        [in] VARIANT_BOOL fAlwaysReload,
        [out] stdole.IUnknown** pStream,
        [out] BSTR* pbstrMIMEType,
        [out] VARIANT_BOOL* pfModified,
        [out] BSTR* pbstrRedirectUrl);
    [id(2)]
    HRESULT GetLocalCopy(
        [in] BSTR bstrResourceUri,
        [out] BSTR* pbstrLocalPath,
        [out] BSTR* pbstrMIMEType,
        [out] BSTR* pbstrRedirectUrl);
    [id(3)]
    HRESULT ReleaseLocalCopy(
        [in] BSTR pbstrLocalPath);
}

//#endif // _SAPI_BUILD_VER >= 0x053


//--- ISpRecoContext --------------------------------------------------------
typedef struct SPRECOCONTEXTSTATUS
{
    SPINTERFERENCE  eInterference;
    WCHAR           szRequestTypeOfUI[255]; // If first byte null, there is no UI request
    DWORD           dwReserved1;
    DWORD           dwReserved2;
} SPRECOCONTEXTSTATUS;

typedef enum SPBOOKMARKOPTIONS
{
    SPBO_NONE = 0,
    SPBO_PAUSE = 1, //(1 << 0)
//#if _SAPI_BUILD_VER >= 0x053
    
    SPBO_AHEAD = 2, //(1 << 1),
    SPBO_TIME_UNITS = 4 //(1 << 2)
//#endif // _SAPI_BUILD_VER >= 0x053
} SPBOOKMARKOPTIONS;


typedef enum SPAUDIOOPTIONS
{
    SPAO_NONE = 0,
    SPAO_RETAIN_AUDIO = 1 //(1 << 0)
} SPAUDIOOPTIONS;

[
    odl,
    uuid(F740A62F-7C15-489E-8234-940A33D9272D),
    helpstring("ISpRecoContext Interface")
]
interface ISpRecoContext : ISpEventSource
{
    HRESULT GetRecognizer(
        [out] ISpRecognizer** ppRecognizer);
    HRESULT CreateGrammar(
        [in] ULONGLONG ullGrammarId,
        [out] ISpRecoGrammar** ppGrammar);
    HRESULT GetStatus(
        [out] SPRECOCONTEXTSTATUS* pStatus);
    HRESULT GetMaxAlternates(
        [in] ULONG* pcAlternates);
    HRESULT SetMaxAlternates(
        [in] ULONG cAlternates);
    HRESULT SetAudioOptions(
        [in] SPAUDIOOPTIONS Options,
        [in] GUID* pAudioFormatId,
        [in] WAVEFORMATEX* pWaveFormatEx);
    HRESULT GetAudioOptions(
        [in] SPAUDIOOPTIONS* pOptions,
        [out] GUID* pAudioFormatId,
        [out] WAVEFORMATEX** ppCoMemWFEX);
    HRESULT DeserializeResult(
        [in] SPSERIALIZEDRESULT* pSerializedResult,
        [out] ISpRecoResult** ppResult);
    HRESULT Bookmark(
        [in] SPBOOKMARKOPTIONS Options,
        [in] ULONGLONG ullStreamPosition,
        [in] LPARAM lparamEvent);
    HRESULT SetAdaptationData(
        [in] long pAdaptationData,
        [in] ULONG cch);
    HRESULT Pause(
        [in] DWORD dwReserved);
    HRESULT Resume(
        [in] DWORD dwReserved);
    HRESULT SetVoice(
        [in] ISpVoice* pVoice,
        [in] BOOL fAllowFormatChanges);
    HRESULT GetVoice(
        [out] ISpVoice** ppVoice);
    HRESULT SetVoicePurgeEvent(
        [in] ULONGLONG ullEventInterest);
    HRESULT GetVoicePurgeEvent(
        [out] ULONGLONG* pullEventInterest);
    HRESULT SetContextState(
        [in] SPCONTEXTSTATE eContextState);
    HRESULT GetContextState(
        [out] SPCONTEXTSTATE* peContextState);
};

//#if _SAPI_BUILD_VER >= 0x053
//--- ISpRecoContext2 -------------------------------------------------------
typedef enum SPGRAMMAROPTIONS
{
    SPGO_SAPI = 0x0001,           // Enable SAPI grammar support.
    SPGO_SRGS = 0x0002,           // Enable W3C grammar support.
    SPGO_UPS = 0x0004,           // IPA phonemes for pronuncation if set.
    SPGO_SRGS_MS_SCRIPT = 0x0008,           // format="semantic-ms/1.0"
    SPGO_SRGS_W3C_SCRIPT = 0x0100,           // W3C format="semantic/1.0"
    SPGO_SRGS_STG_SCRIPT = 0x0200,           // Strongly typed grammars
    SPGO_SRGS_SCRIPT = 0x030A, //SPGO_SRGS | SPGO_SRGS_MS_SCRIPT | SPGO_SRGS_W3C_SCRIPT | SPGO_SRGS_STG_SCRIPT, // Enable scripting support for SRGS grammar.

    // Additional options to control the location where we load grammars.
    SPGO_FILE = 0x0010,           // Local file / UNC file downloading only
    SPGO_HTTP = 0x0020,           // Http / Https downloading only
    SPGO_RES = 0x0040,           // Resource file loading (this affects importing only, not LoadCmdFromResource)
    SPGO_OBJECT = 0x0080,           // Loading from COM objet (this affects importing only, not LoadCmdFromObject)

    SPGO_DEFAULT = 0x03FB,           // Default = SPGO_SAPI | SPGO_SRGS | SPGO_SRGS_SCRIPT | SPGO_FILE | SPGO_HTTP | SPGO_RES | SPGO_OBJECT    
    SPGO_ALL = 0x03FF            // All options
} SPGRAMMAROPTIONS;

typedef enum SPADAPTATIONSETTINGS
{
    SPADS_Default = 0x0000,
    SPADS_CurrentRecognizer = 0x0001,
    SPADS_RecoProfile = 0x0002,
    SPADS_Immediate = 0x0004,
    SPADS_Reset = 0x0008,
    SPADS_HighVolumeDataSource = 0x0010
} SPADAPTATIONSETTINGS;


typedef enum SPADAPTATIONRELEVANCE
{
    SPAR_Unknown = 0,
    SPAR_Low = 1,
    SPAR_Medium = 2,
    SPAR_High = 3
} SPADAPTATIONRELEVANCE;


[
    odl,
    uuid(BEAD311C-52FF-437f-9464-6B21054CA73D),
    helpstring("ISpRecoContext2 Interface")
]
interface ISpRecoContext2 : stdole.IUnknown
{
    HRESULT SetGrammarOptions(
        [in] DWORD eGrammarOptions); // SPGRAMMAROPTIONS
    HRESULT GetGrammarOptions(
        [out] DWORD* peGrammarOptions); // SPGRAMMAROPTIONS
    HRESULT SetAdaptationData2(
        [in] long pAdaptationData,
        [in] ULONG cch,
        [in] long pTopicName,
        [in] DWORD eAdaptationSettings, // SPADAPTATIONSETTINGS
        [in] SPADAPTATIONRELEVANCE eRelevance);
}
//#endif // _SAPI_BUILD_VER >= 0x053

//--- ISpProperties ------------------------------------------------------------
[
    odl,
    uuid(5B4FB971-B115-4DE1-AD97-E482E3BF6EE4),
    helpstring("ISpProperties Interface")
]
interface ISpProperties : stdole.IUnknown
{
    HRESULT SetPropertyNum(
        [in] long pName,
        [in] LONG lValue);
    HRESULT GetPropertyNum(
        [in] long pName,
        [out] LONG* plValue);
    HRESULT SetPropertyString(
        [in] long pName,
        [in] long pValue);
    HRESULT GetPropertyString(
        [in] long pName,
        [out] long* ppCoMemValue);
};



//--- ISpRecognizer ---------------------------------------------------------
typedef struct SPRECOGNIZERSTATUS
{
    SPAUDIOSTATUS   AudioStatus;
    ULONGLONG       ullRecognitionStreamPos;
    ULONG           ulStreamNumber;
    ULONG           ulNumActive;
    CLSID           clsidEngine;
    ULONG           cLangIDs;
    LANGID          aLangID[20];
    ULONGLONG       ullRecognitionStreamTime;
} SPRECOGNIZERSTATUS;

typedef enum SPWAVEFORMATTYPE
{
    SPWF_INPUT,        // WAVEFORMATEX of audio input source
    SPWF_SRENGINE      // WAVEFORMATEX of the audio received by the SR engine
} SPSTREAMFORMATTYPE;

typedef enum SPRECOSTATE
{
    SPRST_INACTIVE,             // Audio deactivated
    SPRST_ACTIVE,               // Audio running only if one or more rules are active
    SPRST_ACTIVE_ALWAYS,        // Audio running regardless of rule state
    SPRST_INACTIVE_WITH_PURGE,  // State will be set to inactive, but all active audio purged
    SPRST_NUM_STATES
} SPRECOSTATE;




[
    odl,
    uuid(C2B5F241-DAA0-4507-9E16-5A1EAA2B7A5C),
    helpstring("ISpRecognizer Interface")
]
interface ISpRecognizer : ISpProperties
{
    HRESULT SetRecognizer(
        [in] ISpObjectToken* pRecognizer);
    HRESULT GetRecognizer(
        [out] ISpObjectToken** ppRecognizer);
    HRESULT SetInput(
        [in] stdole.IUnknown* pUnkInput,
        [in] BOOL fAllowFormatChanges);
    HRESULT GetInputObjectToken(
       [out] ISpObjectToken** ppToken);
    HRESULT GetInputStream(
       [out] ISpStreamFormat** ppStream);
    HRESULT CreateRecoContext(
       [out] ISpRecoContext** ppNewCtxt);
    HRESULT GetRecoProfile(
       [out] ISpObjectToken** ppToken);
    HRESULT SetRecoProfile(
        [in] ISpObjectToken* pToken);
    HRESULT IsSharedInstance(void);
    HRESULT GetRecoState(
        [out] SPRECOSTATE* pState);
    HRESULT SetRecoState(
        [in] SPRECOSTATE NewState);
    HRESULT GetStatus(
        [out] SPRECOGNIZERSTATUS* pStatus);
    HRESULT GetFormat(
        [in] SPSTREAMFORMATTYPE WaveFormatType,
        [out] GUID* pFormatId,
       [out] WAVEFORMATEX** ppCoMemWFEX);
    HRESULT IsUISupported(
        [in] long pszTypeOfUI,
        [in] void* pvExtraData,
        [in] ULONG cbExtraData,
        [out] BOOL* pfSupported);
    HRESULT DisplayUI(
        [in] HWND hwndParent,
        [in] long pszTitle,
        [in] long pszTypeOfUI,
        [in] void* pvExtraData,
        [in] ULONG cbExtraData);
    HRESULT EmulateRecognition(
        [in] ISpPhrase* pPhrase);
};


//#if _SAPI_BUILD_VER >= 0x053
[
    odl,
    uuid(21B501A0-0EC7-46c9-92C3-A2BC784C54B9),
    helpstring("ISpSerializeState Interface")
]
interface ISpSerializeState : stdole.IUnknown
{
    HRESULT GetSerializedState(
        [out] long* ppbData,
        [out] ULONG* pulSize,
        [in] DWORD dwReserved);
    HRESULT SetSerializedState(
        [in] BYTE* pbData,
        [in] ULONG ulSize,
        [in] DWORD dwReserved);
};


//--- ISpRecognizer2 -------------------------------------------------------
[
    odl,
    uuid(8FC6D974-C81E-4098-93C5-0147F61ED4D3),
    helpstring("ISpRecognizer2 Interface")
]
interface ISpRecognizer2 : stdole.IUnknown
{
    HRESULT EmulateRecognitionEx(
        [in] ISpPhrase* pPhrase,
        [in] DWORD dwCompareFlags);
    HRESULT SetTrainingState(
        [in] BOOL fDoingTraining,
        [in] BOOL fAdaptFromTrainingData);
    HRESULT ResetAcousticModelAdaptation();
}

//#if _SAPI_BUILD_VER >= 0x054
typedef enum SPCATEGORYTYPE
{
    SPCT_COMMAND,       // Command category
    SPCT_DICTATION,     // Dictation category
    SPCT_SLEEP,         // Sleep category
    SPCT_SUB_COMMAND,   // Command sub-category
    SPCT_SUB_DICTATION  // Dictation sub-category
} SPCATEGORYTYPE;

//--- ISpRecoCategory ---------------------------------------------------
[
    odl,
    uuid(DA0CD0F9-14A2-4f09-8C2A-85CC48979345),
    helpstring("ISpRecoCategory Interface")
]
interface ISpRecoCategory : stdole.IUnknown
{
    HRESULT GetType(
        [out] SPCATEGORYTYPE* peCategoryType);
}

//--- ISpRecognizer3 ---------------------------------------------------
[
    odl,
    uuid(DF1B943C-5838-4AA2-8706-D7CD5B333499),
    helpstring("ISpRecognizer3 Interface")
]
interface ISpRecognizer3 : stdole.IUnknown
{
    HRESULT GetCategory(
        [in] SPCATEGORYTYPE categoryType,
       [out] ISpRecoCategory** ppCategory);
    HRESULT SetActiveCategory(
        [in] ISpRecoCategory* pCategory);
    HRESULT GetActiveCategory(
       [out] ISpRecoCategory** ppCategory);
}
//#endif // _SAPI_BUILD_VER >= 0x054

//--- ISpEnginePronunciation -------------------------------------------------------


typedef struct SPNORMALIZATIONLIST
{
    ULONG ulSize;
    long ppszzNormalizedList;
} SPNORMALIZATIONLIST;

[
    odl,
    uuid(C360CE4B-76D1-4214-AD68-52657D5083DA),
    helpstring("ISpEnginePronunciation Interface")
]
interface ISpEnginePronunciation : stdole.IUnknown
{
    HRESULT Normalize(
        [in] long pszWord,
        [in] long pszLeftContext,
        [in] long pszRightContext,
        [in] LANGID LangID,
        [out] SPNORMALIZATIONLIST* pNormalizationList);
    HRESULT GetPronunciations([in] long pszWord,
        [in] long pszLeftContext,
        [in] long pszRightContext,
        [in] LANGID LangID,
        [in, out] SPWORDPRONUNCIATIONLIST* pEnginePronunciationList);
}

//--- ISpDisplayAlternates ---------------------------------------------------------

typedef struct SPDISPLAYTOKEN
{
    long pszLexical;
    long pszDisplay;
    BYTE            bDisplayAttributes;
} SPDISPLAYTOKEN;

typedef struct SPDISPLAYPHRASE
{
    ULONG            ulNumTokens;
    LongPtr pTokens;
} SPDISPLAYPHRASE;

[
    odl,
    uuid(C8D7C7E2-0DDE-44b7-AFE3-B0C991FBEB5E),
    helpstring("ISpDisplayAlternates Interface")
]
interface ISpDisplayAlternates : stdole.IUnknown
{
    HRESULT GetDisplayAlternates(
        [in] SPDISPLAYPHRASE* pPhrase,
        [in] ULONG cRequestCount,
        [out] LongPtr* ppCoMemPhrases,
        [out] ULONG* pcPhrasesReturned);
    HRESULT SetFullStopTrailSpace(
        [in] ULONG ulTrailSpace);
}

//#endif // _SAPI_BUILD_VER >= 0x053


//
//=== CoClass definitions =====================================================
//

    //--- SpNotifyTranslator ------------------------------------------------
    [
        uuid(E2AE5372-5D40-11D2-960E-00C04F8EE628),
        helpstring("SpNotify")
    ]
    coclass SpNotifyTranslator
    {
        interface ISpNotifyTranslator;
    }

    //--- SpObjectTokenCategory ---------------------------------------------
    [
        uuid(A910187F-0C7A-45AC-92CC-59EDAFB77B53),
        helpstring("SpObjectTokenCategory Class"),
    ]
    coclass SpObjectTokenCategory
    {
//#ifdef SAPI_AUTOMATION
        [default] interface ISpeechObjectTokenCategory;
//#endif
        interface ISpObjectTokenCategory;
    }
    //--- SpObjectToken ---------------------------------------------
    [
        uuid(EF411752-3736-4CB4-9C8C-8EF4CCB58EFE),
        helpstring("SpObjectToken Class")
    ]
    coclass SpObjectToken
    {
//#ifdef SAPI_AUTOMATION
        [default] interface ISpeechObjectToken;
//#endif
        interface ISpObjectToken;
    }

    //--- SpResourceManager -------------------------------------------------
    [
        uuid(96749373-3391-11D2-9EE3-00C04F797396),
        helpstring("SpResourceManger")
    ]
    coclass SpResourceManager
    {
        [default] interface ISpResourceManager;
    };

    //--- SpStreamFormatConverter -------------------------------------------
    [
        uuid(7013943A-E2EC-11D2-A086-00C04F8EF9B5),
        helpstring("FormatConverter Class")
    ]
    coclass SpStreamFormatConverter
    {
        [default] interface ISpStreamFormatConverter;
    };

    //--- SpMMAudioEnum -----------------------------------------------------
    [
        uuid(AB1890A0-E91F-11D2-BB91-00C04F8EE6C0),
        helpstring("SpMMAudioEnum Class")
    ]
    coclass SpMMAudioEnum
    {
        interface IEnumSpObjectTokens;
    };

    //--- SpMMAudioIn -------------------------------------------------------
    [
        uuid(CF3D2E50-53F2-11D2-960C-00C04F8EE628),
        helpstring("SpMMAudioIn Class")
    ]
    coclass SpMMAudioIn
    {
//#ifdef SAPI_AUTOMATION
        [default] interface ISpeechMMSysAudio;
//#endif
        interface ISpEventSource;
        interface ISpEventSink;
        interface ISpObjectWithToken;
        interface ISpMMSysAudio;
    };

    //--- SpMMAudioOut ------------------------------------------------------
    [
        uuid(A8C680EB-3D32-11D2-9EE7-00C04F797396),
        helpstring("SpMMAudioOut Class")
    ]
    coclass SpMMAudioOut
    {
///#ifdef SAPI_AUTOMATION
        [default] interface ISpeechMMSysAudio;
//#endif
        interface ISpEventSource;
        interface ISpEventSink;
        interface ISpObjectWithToken;
        interface ISpMMSysAudio;
    };

    //--- SpStream ----------------------------------------------------------
    [
        uuid(715D9C59-4442-11D2-9605-00C04F8EE628),
        helpstring("SpStream Class")
    ]
    coclass SpStream
    {
        interface ISpStream;
    };

    //--- SpVoice -----------------------------------------------------------
    [
        uuid(96749377-3391-11D2-9EE3-00C04F797396),
        helpstring("SpVoice Class")
    ]
    coclass SpVoice
    {
//#ifdef SAPI_AUTOMATION
        [default] interface ISpeechVoice;
//#endif
        interface ISpVoice;
//#if _SAPI_BUILD_VER >= 0x053
        interface ISpPhoneticAlphabetSelection;
//#endif // _SAPI_BUILD_VER >= 0x053

//#ifdef SAPI_AUTOMATION
        [default, source] dispinterface _ISpeechVoiceEvents;
//#endif
    };

    //--- SpSharedRecoContext -----------------------------------------------
    [
        uuid(47206204-5ECA-11D2-960F-00C04F8EE628),
        helpstring("SpSharedRecoContext Class")
    ]
    coclass SpSharedRecoContext
    {
//#ifdef SAPI_AUTOMATION
        [default] interface ISpeechRecoContext;
//#endif
        interface ISpRecoContext;
//#if _SAPI_BUILD_VER >= 0x053
        interface ISpRecoContext2;
        interface ISpPhoneticAlphabetSelection;
//#endif // _SAPI_BUILD_VER >= 0x053

//#ifdef SAPI_AUTOMATION
        [default, source] dispinterface _ISpeechRecoContextEvents;
//#endif
    };

    //--- SpInprocRecognizer ------------------------------------------------
    [
        uuid(41B89B6B-9399-11D2-9623-00C04F8EE628),
        helpstring("SpInprocRecognizer Class")
    ]
    coclass SpInprocRecognizer
    {
//#ifdef SAPI_AUTOMATION
        [default] interface ISpeechRecognizer;
//#endif
        interface ISpRecognizer;
//#if _SAPI_BUILD_VER >= 0x053
        interface ISpRecognizer2;
//#if _SAPI_BUILD_VER >= 0x054
        interface ISpRecognizer3;
//#endif // _SAPI_BUILD_VER >= 0x054
        interface ISpSerializeState;
//#endif // _SAPI_BUILD_VER >= 0x053
    };

    //--- SpSharedRecognizer ----------------------------------------------
    [
        uuid(3BEE4890-4FE9-4A37-8C1E-5E7E12791C1F),
        helpstring("SpSharedRecognizer Class")
    ]
    coclass SpSharedRecognizer
    {
//#ifdef SAPI_AUTOMATION
        [default] interface ISpeechRecognizer;
//#endif
        interface ISpRecognizer;
//#if _SAPI_BUILD_VER >= 0x053
        interface ISpRecognizer2;
//#if _SAPI_BUILD_VER >= 0x054
        interface ISpRecognizer3;
//#endif // _SAPI_BUILD_VER >= 0x054
        interface ISpSerializeState;
//#endif // _SAPI_BUILD_VER >= 0x053
    };

    //--- SpLexicon ----------------------------------------------------------
    [
        uuid(0655E396-25D0-11D3-9C26-00C04F8EF87C),
        helpstring("SpLexicon Class")
    ]
    coclass SpLexicon
    {
//#ifdef SAPI_AUTOMATION
        [default] interface ISpeechLexicon;
//#endif
        interface ISpLexicon;
//#if _SAPI_BUILD_VER >= 0x053
        interface ISpPhoneticAlphabetSelection;
//#endif // _SAPI_BUILD_VER >= 0x053
    };

    //--- SpUnCompressedLexicon ---------------------------------------------------
    [
        uuid(C9E37C15-DF92-4727-85D6-72E5EEB6995A),
        helpstring("SpUnCompressedLexicon Class")
    ]
    coclass SpUnCompressedLexicon
    {
//#ifdef SAPI_AUTOMATION
        [default] interface ISpeechLexicon;
//#endif
        interface ISpLexicon;
        interface ISpObjectWithToken;
//#if _SAPI_BUILD_VER >= 0x053
        interface ISpPhoneticAlphabetSelection;
//#endif // _SAPI_BUILD_VER >= 0x053
    };

    //--- SpCompressedLexicon ---------------------------------------------------
    [
        uuid(90903716-2F42-11D3-9C26-00C04F8EF87C),
        helpstring("SpCompressedLexicon Class")
    ]
    coclass SpCompressedLexicon
    {
        [default] interface ISpLexicon;
        interface ISpObjectWithToken;
    };

//#if _SAPI_BUILD_VER >= 0x053
    //--- SpShortcut ---------------------------------------------------
    [
        uuid(0D722F1A-9FCF-4E62-96D8-6DF8F01A26AA),
        helpstring("SpShortcut Class")
    ]
    coclass SpShortcut
    {
        interface ISpShortcut;
        interface ISpObjectWithToken;
    };
//#endif // _SAPI_BUILD_VER >= 0x053

    //--- SpPhoneConverter ------------------------------------------------
    [
        uuid(9185F743-1143-4C28-86B5-BFF14F20E5C8),
        helpstring("SpPhoneConverter Class")
    ]
    coclass SpPhoneConverter
    {
//#ifdef SAPI_AUTOMATION
        [default] interface ISpeechPhoneConverter;
//#endif

        interface ISpPhoneConverter;
//#if _SAPI_BUILD_VER >= 0x053
        interface ISpPhoneticAlphabetSelection;
//#endif // _SAPI_BUILD_VER >= 0x053
    };

//#if _SAPI_BUILD_VER >= 0x053
    //--- SpPhoneticAlphabetConverter ------------------------------------------------
    [
        uuid(4F414126-DFE3-4629-99EE-797978317EAD),
        helpstring("SpPhoneticAlphabetConverter Class")
    ]
    coclass SpPhoneticAlphabetConverter
    {
        interface ISpPhoneticAlphabetConverter;
    };
//#endif // _SAPI_BUILD_VER >= 0x053

    //--- SpNullPhoneConverter ------------------------------------------------
    [
        uuid(455F24E9-7396-4A16-9715-7C0FDBE3EFE3),
        helpstring("SpNullPhoneConverter Class")
    ]
    coclass SpNullPhoneConverter
    {
        [default] interface ISpPhoneConverter;
    };

//#ifdef SAPI_AUTOMATION

    //--- SpTextSelectionInformation ------------------------------------------------
    [
        uuid(0F92030A-CBFD-4AB8-A164-FF5985547FF6),
        helpstring("SpTextSelectionInformation Class"),
    ]
    coclass SpTextSelectionInformation
    {
        [default] interface ISpeechTextSelectionInformation;
    };

    //--- SpPhraseInfoBuilder ------------------------------------------------
    [
        uuid(C23FC28D-C55F-4720-8B32-91F73C2BD5D1),
        helpstring("SpPhraseInfoBuilder Class"),
    ]
    coclass SpPhraseInfoBuilder
    {
        [default] interface ISpeechPhraseInfoBuilder;
    };

    //--- SpAudioFormat ------------------------------------------------
    [
        uuid(9EF96870-E160-4792-820D-48CF0649E4EC),
        helpstring("SpAudioFormat Class"),
    ]
    coclass SpAudioFormat
    {
        [default] interface ISpeechAudioFormat;
    };

    //--- SpWaveFormatEx ------------------------------------------------
    [
        uuid(C79A574C-63BE-44b9-801F-283F87F898BE),
        helpstring("SpWaveFormatEx Class"),
    ]
    coclass SpWaveFormatEx
    {
        [default] interface ISpeechWaveFormatEx;
    };

    //--- SpInProcRecoContext -----------------------------------------------
    [
        uuid(73AD6842-ACE0-45E8-A4DD-8795881A2C2A),
        helpstring("SpInProcRecoContext Class")
    ]
    coclass SpInProcRecoContext
    {
        [default] interface ISpeechRecoContext;
        interface ISpRecoContext;
//#if _SAPI_BUILD_VER >= 0x053
        interface ISpRecoContext2;
        interface ISpPhoneticAlphabetSelection;
//#endif // _SAPI_BUILD_VER >= 0x053

        [default, source] dispinterface _ISpeechRecoContextEvents;
    };

    //--- SpCustomStream ------------------------------------------------
    [
        uuid(8DBEF13F-1948-4aa8-8CF0-048EEBED95D8),
        helpstring("SpCustomStream Class"),
    ]
    coclass SpCustomStream
    {
        [default] interface ISpeechCustomStream;
        interface ISpStream;
    };

    //--- SpFileStream ------------------------------------------------
    [
        uuid(947812B3-2AE1-4644-BA86-9E90DED7EC91),
        helpstring("SpFileStream Class"),
    ]
    coclass SpFileStream
    {
        [default] interface ISpeechFileStream;
        interface ISpStream;
    };

    //--- SpMemoryStream ------------------------------------------------
    [
        uuid(5FB7EF7D-DFF4-468a-B6B7-2FCBD188F994),
        helpstring("SpMemoryStream Class"),
    ]
    coclass SpMemoryStream
    {
        [default] interface ISpeechMemoryStream;
        interface ISpStream;
    };
//
////#if _SAPI_BUILD_VER >= 0x053
//    interface ISpXMLRecoResult;
//    interface ISpRecoGrammar2;
//    interface ISpeechResourceLoader;
////#endif // _SAPI_BUILD_VER >= 0x053
//
//#endif // SAPI_AUTOMATION
//}


