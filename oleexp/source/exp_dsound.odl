
//annot. mossSOFT: I removed any helpstrings!

//[
//	uuid(93E767C8-1E6B-46CC-B452-3531146574EA),
//	version(1.0),
//	//helpstring("DirectSound8 for Visual Basic 6.0 type library by The trick v1.00"), 
//	helpstring("DirectSound8 for VB6 type library by The trick/mossSOFT v1.1"),
//]
//library DSVBLib {
//
//	importlib("stdole2.tlb");


	// Forward declare all types
	interface IDirectSound;
	interface IDirectSoundBuffer;
	interface IDirectSound8;
	interface IDirectSoundBuffer8;
	interface IDirectSound3DBuffer;
	interface IDirectSound3DListener;
	interface IDirectSoundCapture;
	interface IDirectSoundCaptureBuffer;
	interface IDirectSoundCaptureBuffer8;
	interface IDirectSoundNotify;
	//added by mossSOFT:
	interface IDirectSoundFXGargle;
	interface IDirectSoundFXChorus;
	interface IDirectSoundFXFlanger;
	interface IDirectSoundFXEcho;
	interface IDirectSoundFXDistortion;
	interface IDirectSoundFXCompressor;
	interface IDirectSoundFXParamEq;
	interface IDirectSoundFXWavesReverb;
	interface IDirectSoundFXI3DL2Reverb;


	// Enums ---------
	typedef enum DSBCAPS_CONST {
		DSBCAPS_PRIMARYBUFFER = 0x1,
		DSBCAPS_STATIC = 0x2,
		DSBCAPS_LOCHARDWARE = 0x4,
		DSBCAPS_LOCSOFTWARE = 0x8,
		DSBCAPS_CTRL3D = 0x10,
		DSBCAPS_CTRLFREQUENCY = 0x20,
		DSBCAPS_CTRLPAN = 0x40,
		DSBCAPS_CTRLVOLUME = 0x80,
		DSBCAPS_CTRLPOSITIONNOTIFY = 0x100,
		DSBCAPS_CTRLFX = 0x200,
		DSBCAPS_STICKYFOCUS = 0x4000,
		DSBCAPS_GLOBALFOCUS = 0x8000,
		DSBCAPS_GETCURRENTPOSITION2 = 0x10000,
		DSBCAPS_MUTE3DATMAXDISTANCE = 0x20000,
		DSBCAPS_LOCDEFER = 0x40000,
		DSBCAPS_TRUEPLAYPOSITION = 0x80000,
	} DSBCAPS_CONST;

	typedef enum DSBSTATUS_CONST {
		DSBSTATUS_PLAYING = 0x1,
		DSBSTATUS_BUFFERLOST = 0x2,
		DSBSTATUS_LOOPING = 0x4,
		DSBSTATUS_LOCHARDWARE = 0x8,
		DSBSTATUS_LOCSOFTWARE = 0x10,
		DSBSTATUS_TERMINATED = 0x20,
	} DSBSTATUS_CONST;


	typedef enum DSBLOCK_CONST {
		DSBLOCK_FROMWRITECURSOR = 0x1,
		DSBLOCK_ENTIREBUFFER = 0x2,
	} DSBLOCK_CONST;

	typedef enum DSBPLAY_CONST {
		DSBPLAY_LOOPING = 0x1,
		DSBPLAY_LOCHARDWARE = 0x2,
		DSBPLAY_LOCSOFTWARE = 0x4,
		DSBPLAY_TERMINATEBY_TIME = 0x8,
		DSBPLAY_TERMINATEBY_DISTANCE = 0x10,
		DSBPLAY_TERMINATEBY_PRIORITY = 0x20,
	} DSBPLAY_CONST;

	typedef enum DSCAPS_CONST {
		DSCAPS_PRIMARYMONO = 0x1,
		DSCAPS_PRIMARYSTEREO = 0x2,
		DSCAPS_PRIMARY8BIT = 0x4,
		DSCAPS_PRIMARY16BIT = 0x8,
		DSCAPS_CONTINUOUSRATE = 0x10,
		DSCAPS_EMULDRIVER = 0x20,
		DSCAPS_CERTIFIED = 0x40,
		DSCAPS_SECONDARYMONO = 0x100,
		DSCAPS_SECONDARYSTEREO = 0x200,
		DSCAPS_SECONDARY8BIT = 0x400,
		DSCAPS_SECONDARY16BIT = 0x800,
	} DSCAPS_CONST;

	typedef enum DSSCL_CONST {
		DSSCL_NORMAL = 0x1,
		DSSCL_PRIORITY = 0x2,
		DSSCL_EXCLUSIVE = 0x3,
		DSSCL_WRITEPRIMARY = 0x4,
	} DSSCL_CONST;

	typedef enum DSSPEAKER_CONST {
		DSSPEAKER_DIRECTOUT = 0x0,
		DSSPEAKER_HEADPHONE = 0x1,
		DSSPEAKER_MONO = 0x2,
		DSSPEAKER_QUAD = 0x3,
		DSSPEAKER_STEREO = 0x4,
		DSSPEAKER_SURROUND = 0x5,
		DSSPEAKER_5POINT1 = 0x6,
		DSSPEAKER_7POINT1 = 0x7,
		DSSPEAKER_7POINT1_SURROUND = 0x8,
		DSSPEAKER_5POINT1_SURROUND = 0x9,
		DSSPEAKER_7POINT1_WIDE = 0x7,
		DSSPEAKER_5POINT1_BACK = 0x6,
		DSSPEAKER_GEOMETRY_MIN = 0x5,
		DSSPEAKER_GEOMETRY_NARROW = 0xA,
		DSSPEAKER_GEOMETRY_WIDE = 0x14,
		DSSPEAKER_GEOMETRY_MAX = 0xB4,
	} DSSPEAKER_CONST;


	typedef enum DSCERTIFICATION_CONST {
		DS_CERTIFIED = 0x0,
		DS_UNCERTIFIED = 0x1,
	} DSCERTIFICATION_CONST;

	typedef enum DS3DMODE_CONST {
		DS3DMODE_NORMAL = 0x0,
		DS3DMODE_HEADRELATIVE = 0x1,
		DS3DMODE_DISABLE = 0x2,
	} DS3DMODE_CONST;

	typedef enum DS3DAPPLY_CONST {
		DS3D_IMMEDIATE = 0x0,
		DS3D_DEFERRE = 0x1,
	} DS3DAPPLY_CONST;

	typedef enum DSCFXR_CONST {
		DSCFXR_LOCHARDWARE = 0x10,
		DSCFXR_LOCSOFTWARE = 0x20,
	} DSCFXR_CONST;

	typedef enum DSCBCAPS_CONST {
		DSCBCAPS_CTRLFX = 0x200,
		DSCBCAPS_WAVEMAPPED = 0x80000000,
	} DSCBCAPS_CONST;

	typedef enum DSCCAPS_CONST {
		DSCCAPS_EMULDRIVER = 0x20,
		DSCCAPS_CERTIFIED = 0x40,
		DSCCAPS_MULTIPLECAPTURE = 0x1,
	} DSCCAPS_CONST;

	typedef enum tag__MIDL___MIDL_itf_dsvb_0097_0015 {
		WAVE_INVALIDFORMAT = 0x0,
		WAVE_FORMAT_1M08 = 0x1,
		WAVE_FORMAT_1S08 = 0x2,
		WAVE_FORMAT_1M16 = 0x4,
		WAVE_FORMAT_1S16 = 0x8,
		WAVE_FORMAT_2M08 = 0x10,
		WAVE_FORMAT_2S08 = 0x20,
		WAVE_FORMAT_2M16 = 0x40,
		WAVE_FORMAT_2S16 = 0x80,
		WAVE_FORMAT_4M08 = 0x100,
		WAVE_FORMAT_4S08 = 0x200,
		WAVE_FORMAT_4M16 = 0x400,
		WAVE_FORMAT_4S16 = 0x800,
		WAVE_FORMAT_96M08 = 0x10000,
		WAVE_FORMAT_96S08 = 0x20000,
		WAVE_FORMAT_96M16 = 0x40000,
		WAVE_FORMAT_96S16 = 0x80000,
	} WAVE_FORMAT_CONST;

	typedef enum DSCBSTATUS_CONST {
		DSCBSTATUS_CAPTURING = 0x1,
		DSCBSTATUS_LOOPING = 0x2,
	} DSCBSTATUS_CONST;

	typedef enum DSCBLOCK_CONST {
		DSCBLOCK_ENTIREBUFFER = 0x1,
	} DSCBLOCK_CONST;

	typedef enum DSCBSTART_CONST {
		DSCBSTART_LOOPING = 0x1,
	} DSCBSTART_CONST;


	typedef enum DSFX_CONST {
		DSFX_LOCHARDWARE = 0x1,
		DSFX_LOCSOFTWARE = 0x2,
	} DSFX_CONST;

	typedef enum DSFXR_CONST {
		DSFXR_PRESENT = 0x0,
		DSFXR_LOCHARDWARE = 0x1,
		DSFXR_LOCSOFTWARE = 0x2,
		DSFXR_UNALLOCATED = 0x3,
		DSFXR_FAILED = 0x4,
		DSFXR_UNKNOWN = 0x5,
		DSFXR_SENDLOOP = 0x6,
	} DSFXR_CONST;

	typedef enum DSCFX_CONST {
		DSCFX_LOCHARDWARE = 0x1,
		DSCFX_LOCSOFTWARE = 0x2,
	} DSCFX_CONST;

	typedef enum tagGARGLE_WAVE {
		DSFXGARGLE_WAVE_TRIANGLE = 0x0,
		DSFXGARGLE_WAVE_SQUARE = 0x1,
	} eGARGLE_WAVE;

	typedef enum tagCHORUS_WAVE {
		DSFXCHORUS_WAVE_TRIANGLE = 0x0,
		DSFXCHORUS_WAVE_SIN = 0x1,
	} eCHORUS_WAVE;

	typedef enum tagFLANGER_WAVE {
		DSFXFLANGER_WAVE_TRIANGLE = 0x0,
		DSFXFLANGER_WAVE_SIN = 0x1,
	} eFLANGER_WAVE;


	typedef enum tagGARGLE_FREQ {
		DSFXGARGLE_RATEHZ_MIN = 1,
		DSFXGARGLE_RATEHZ_MAX = 1000,
	} eGARGLE_FREQ;

	typedef enum tagCHORUS_PHASE {
		DSFXCHORUS_PHASE_NEG_180 = 0x0,
		DSFXCHORUS_PHASE_NEG_90 = 0x1,
		DSFXCHORUS_PHASE_ZERO = 0x2,
		DSFXCHORUS_PHASE_90 = 0x3,
		DSFXCHORUS_PHASE_180 = 0x4,
	} eCHORUS_PHASE;

	typedef enum tagFLANGER_PHASE {
		DSFXFLANGER_PHASE_NEG_180 = 0x0,
		DSFXFLANGER_PHASE_NEG_90 = 0x1,
		DSFXFLANGER_PHASE_ZERO = 0x2,
		DSFXFLANGER_PHASE_90 = 0x3,
		DSFXFLANGER_PHASE_180 = 0x4,
	} eFLANGER_PHASE;

	typedef enum tagDSFX_I3DL2_MATERIAL {
		DSFX_I3DL2_MATERIAL_PRESET_SINGLEWINDOW = 0,
		DSFX_I3DL2_MATERIAL_PRESET_DOUBLEWINDOW = 1,
		DSFX_I3DL2_MATERIAL_PRESET_THINDOOR = 2,
		DSFX_I3DL2_MATERIAL_PRESET_THICKDOOR = 3,
		DSFX_I3DL2_MATERIAL_PRESET_WOODWALL = 4,
		DSFX_I3DL2_MATERIAL_PRESET_BRICKWALL = 5,
		DSFX_I3DL2_MATERIAL_PRESET_STONEWALL = 6,
		DSFX_I3DL2_MATERIAL_PRESET_CURTAIN = 7,
	} eDSFX_I3DL2_MATERIAL;

	typedef enum tagDSFX_I3DL2_ROOM {
		DSFX_I3DL2_ENVIRONMENT_PRESET_DEFAULT = 0,
		DSFX_I3DL2_ENVIRONMENT_PRESET_GENERIC = 1,
		DSFX_I3DL2_ENVIRONMENT_PRESET_PADDEDCELL = 2,
		DSFX_I3DL2_ENVIRONMENT_PRESET_ROOM = 3,
		DSFX_I3DL2_ENVIRONMENT_PRESET_BATHROOM = 4,
		DSFX_I3DL2_ENVIRONMENT_PRESET_LIVINGROOM = 5,
		DSFX_I3DL2_ENVIRONMENT_PRESET_STONEROOM = 6,
		DSFX_I3DL2_ENVIRONMENT_PRESET_AUDITORIUM = 7,
		DSFX_I3DL2_ENVIRONMENT_PRESET_CONCERTHALL = 8,
		DSFX_I3DL2_ENVIRONMENT_PRESET_CAVE = 9,
		DSFX_I3DL2_ENVIRONMENT_PRESET_ARENA = 10,
		DSFX_I3DL2_ENVIRONMENT_PRESET_HANGAR = 11,
		DSFX_I3DL2_ENVIRONMENT_PRESET_CARPETEDHALLWAY = 12,
		DSFX_I3DL2_ENVIRONMENT_PRESET_HALLWAY = 13,
		DSFX_I3DL2_ENVIRONMENT_PRESET_STONECORRIDOR = 14,
		DSFX_I3DL2_ENVIRONMENT_PRESET_ALLEY = 15,
		DSFX_I3DL2_ENVIRONMENT_PRESET_FOREST = 16,
		DSFX_I3DL2_ENVIRONMENT_PRESET_CITY = 17,
		DSFX_I3DL2_ENVIRONMENT_PRESET_MOUNTAINS = 18,
		DSFX_I3DL2_ENVIRONMENT_PRESET_QUARRY = 19,
		DSFX_I3DL2_ENVIRONMENT_PRESET_PLAIN = 20,
		DSFX_I3DL2_ENVIRONMENT_PRESET_PARKINGLOT = 21,
		DSFX_I3DL2_ENVIRONMENT_PRESET_SEWERPIPE = 22,
		DSFX_I3DL2_ENVIRONMENT_PRESET_UNDERWATER = 23,
		DSFX_I3DL2_ENVIRONMENT_PRESET_SMALLROOM = 24,
		DSFX_I3DL2_ENVIRONMENT_PRESET_MEDIUMROOM = 25,
		DSFX_I3DL2_ENVIRONMENT_PRESET_LARGEROOM = 26,
		DSFX_I3DL2_ENVIRONMENT_PRESET_MEDIUMHALL = 27,
		DSFX_I3DL2_ENVIRONMENT_PRESET_LARGEHALL = 28,
		DSFX_I3DL2_ENVIRONMENT_PRESET_PLATE = 29,
	} eDSFX_I3DL2_ROOM;

	//DirectSound Errors ------------
	typedef enum tagDS_ERR {
		DS_OK = 0x0,
		DSERR_OUTOFMEMORY = 0x7,
		DSERR_NOINTERFACE = 0x1AE,
		DS_NO_VIRTUALIZATION = 0x0878000A,
		DS_INCOMPLETE = 0x08780014,
		DSERR_UNSUPPORTED = 0x80004001,
		DSERR_GENERIC = 0x80004005,
		DSERR_ACCESSDENIED = 0x80070005,
		DSERR_INVALIDPARAM = 0x80070057,
		DSERR_ALLOCATED = 0x8878000A,
		DSERR_CONTROLUNAVAIL = 0x8878001E,
		DSERR_INVALIDCALL = 0x88780032,
		DSERR_PRIOLEVELNEEDED = 0x88780046,
		DSERR_BADFORMAT = 0x88780064,
		DSERR_NODRIVER = 0x88780078,
		DSERR_ALREADYINITIALIZED = 0x88780082,
		DSERR_BUFFERLOST = 0x88780096,
		DSERR_OTHERAPPHASPRIO = 0x887800A0,
		DSERR_UNINITIALIZED = 0x887800AA,
		DSERR_BUFFERTOOSMALL = 0x887810B4,
		DSERR_DS8_REQUIRED = 0x887810BE,
		DSERR_SENDLOOP = 0x887810C8,
		DSERR_BADSENDBUFFERGUID = 0x887810D2,
		DSERR_FXUNAVAILABLE = 0x887810DC,
		DSERR_OBJECTNOTFOUND = 0x88781161,
	} eDS_ERR;

	// <- Enums ----------

	// Typedefs ----------


	typedef struct tagDSBUFFERDESC {
		long dwSize;
		DSBCAPS_CONST dwFlags;
		long dwBufferBytes;
		long dwReserved;
		long lpwfxFormat;
		UUID guid3DAlgorithm;
	} DSBUFFERDESC;


	typedef struct tagtagDSBCAPS {
		long dwSize;
		DSBCAPS_CONST dwFlags;
		long dwBufferBytes;
		long dwUnlockTransferRate;
		long dwPlayCpuOverhead;
	} DSBCAPS;

	//typedef struct tagWAVEFORMATEX {
	//	short wFormatTag;
	//	short nChannels;
	//	long nSamplesPerSec;
	//	long nAvgBytesPerSec;
	//	short nBlockAlign;
	//	short wBitsPerSample;
	//	short cbSize;
	//} WAVEFORMATEX;

	typedef struct tag_DSCAPS {
		long dwSize;
		DSCAPS_CONST dwFlags;
		long dwMinSecondarySampleRate;
		long dwMaxSecondarySampleRate;
		long dwPrimaryBuffers;
		long dwMaxHwMixingAllBuffers;
		long dwMaxHwMixingStaticBuffers;
		long dwMaxHwMixingStreamingBuffers;
		long dwFreeHwMixingAllBuffers;
		long dwFreeHwMixingStaticBuffers;
		long dwFreeHwMixingStreamingBuffers;
		long dwMaxHw3DAllBuffers;
		long dwMaxHw3DStaticBuffers;
		long dwMaxHw3DStreamingBuffers;
		long dwFreeHw3DAllBuffers;
		long dwFreeHw3DStaticBuffers;
		long dwFreeHw3DStreamingBuffers;
		long dwTotalHwMemBytes;
		long dwFreeHwMemBytes;
		long dwMaxContigFreeHwMemBytes;
		long dwUnlockTransferRateHwBuffers;
		long dwPlayCpuOverheadSwBuffers;
		long dwReserved1;
		long dwReserved2;
	} DSCAPS;


	typedef struct tagD3DVECTOR {
		float x;
		float y;
		float z;
	} D3DVECTOR;

	typedef struct tagDS3DBUFFER {
		long dwSize;
		D3DVECTOR vPosition;
		D3DVECTOR vVelocity;
		long dwInsideConeAngle;
		long dwOutsideConeAngle;
		D3DVECTOR vConeOrientation;
		long lConeOutsideVolume;
		float flMinDistance;
		float flMaxDistance;
		DS3DMODE_CONST dwMode;
	} DS3DBUFFER;


	typedef struct tagDS3DLISTENER {
		long dwSize;
		D3DVECTOR vPosition;
		D3DVECTOR vVelocity;
		D3DVECTOR vOrientFront;
		D3DVECTOR vOrientTop;
		float flDistanceFactor;
		float flRolloffFactor;
		float flDopplerFactor;
	} DS3DLISTENER;

	typedef struct tagDSCBUFFERDESC {
		long dwSize;
		DSCBCAPS_CONST dwFlags;
		long dwBufferBytes;
		long dwReserved;
		long lpwfxFormat;
		long dwFXCount;
		long lpDSCFXDesc;
	} DSCBUFFERDESC;

	typedef struct tagDSCCAPS {
		long dwSize;
		DSCCAPS_CONST dwFlags;
		WAVE_FORMAT_CONST dwFormats;
		long dwChannels;
	} DSCCAPS;

	typedef struct tagDSBPOSITIONNOTIFY {
		long dwOffset;
		long hEventNotify;
	} DSBPOSITIONNOTIFY;

		//typedef struct tagWAVEFORMATEXTENSIBLE {
		//	WAVEFORMATEX Format;
		//	short wValidBitsPerSample;
		//	short wSamplesPerBlock;
		//	short wReserved;
		//	long dwChannelMask;
		//	long SubFormat;
		//} WAVEFORMATEXTENSIBLE;

	typedef struct tagDSEFFECTDESC {
		long dwSize;
		DSFX_CONST dwFlags;
		UUID guidDSFXClass;
		long dwReserved1;
		long dwReserved2;
	} DSEFFECTDESC;

	typedef struct tagDSCEFFECTDESC {
		long dwSize;
		DSCFX_CONST dwFlags;
		UUID guidDSCFXClass;
		UUID guidDSCFXInstance;
		long dwReserved1;
		long dwReserved2;
	} DSCEFFECTDESC;

	typedef struct _DSFXGargle {
		eGARGLE_FREQ dwRateHz;
		eGARGLE_WAVE WaveShape;
	} DSFXGargle;

	typedef struct _DSFXChorus {
		FLOAT fWetDryMix;
		FLOAT fDepth;
		FLOAT fFeedback;
		FLOAT fFrequency;
		eCHORUS_WAVE Waveform;
		FLOAT fDelay;
		eCHORUS_PHASE Phase;
	} DSFXChorus;

	typedef struct _DSFXFlanger {
		FLOAT fWetDryMix;
		FLOAT fDepth;
		FLOAT fFeedback;
		FLOAT fFrequency;
		eFLANGER_WAVE Waveform;
		FLOAT fDelay;
		eFLANGER_PHASE Phase;
	} DSFXFlanger;

	typedef struct _DSFXEcho {
		FLOAT fWetDryMix;
		FLOAT fFeedback;
		FLOAT fLeftDelay;
		FLOAT fRightDelay;
		LONG lPanDelay;
	} DSFXEcho;

	typedef struct _DSFXDistortion {
		FLOAT fGain;
		FLOAT fEdge;
		FLOAT fPostEQCenterFrequency;
		FLOAT fPostEQBandwidth;
		FLOAT fPreLowpassCutoff;
	} DSFXDistortion;

	typedef struct _DSFXCompressor {
		FLOAT fGain;
		FLOAT fAttack;
		FLOAT fRelease;
		FLOAT fThreshold;
		FLOAT fRatio;
		FLOAT fPredelay;
	} DSFXCompressor;

	typedef struct _DSFXParamEq {
		FLOAT fCenter;
		FLOAT fBandwidth;
		FLOAT fGain;
	} DSFXParamEq;


	typedef struct _DSFXI3DL2Reverb {
		LONG lRoom; // [-10000, 0] default: -1000 mB
		LONG lRoomHF; // [-10000, 0] default: 0 mB
		FLOAT flRoomRolloffFactor; // [0.0, 10.0] default: 0.0
		FLOAT flDecayTime; // [0.1, 20.0] default: 1.49s
		FLOAT flDecayHFRatio; // [0.1, 2.0] default: 0.83
		LONG lReflections; // [-10000, 1000] default: -2602 mB
		FLOAT flReflectionsDelay; // [0.0, 0.3] default: 0.007 s
		LONG lReverb; // [-10000, 2000] default: 200 mB
		FLOAT flReverbDelay; // [0.0, 0.1] default: 0.011 s
		FLOAT flDiffusion; // [0.0, 100.0] default: 100.0 %
		FLOAT flDensity; // [0.0, 100.0] default: 100.0 %
		FLOAT flHFReference; // [20.0, 20000.0] default: 5000.0 Hz
	} DSFXI3DL2Reverb;


	typedef struct _DSFXWavesReverb {
		FLOAT fInGain; // [-96.0,0.0] default: 0.0 dB
		FLOAT fReverbMix; // [-96.0,0.0] default: 0.0 db
		FLOAT fReverbTime; // [0.001,3000.0] default: 1000.0 ms
		FLOAT fHighFreqRTRatio; // [0.001,0.999] default: 0.001
	} DSFXWavesReverb;

	// Interfaces -----------------

	// Effects --------------------
	[
		odl,
		uuid(D616F352-D622-11CE-AAC5-0020AF0B99A3)
	]
	interface IDirectSoundFXGargle : stdole.IUnknown{
	 HRESULT SetAllParameters([in] DSFXGargle * pDsGargle);
	 HRESULT GetAllParameters([out] DSFXGargle* pDsGargle);
	};

	[
		odl,
		uuid(C03CA9FE-FE90-4204-8078-82334CD177DA)
	]
	interface IDirectSoundFXParamEq : stdole.IUnknown{
	 HRESULT SetAllParameters([in] DSFXParamEq * pDsParamEq);
	 HRESULT GetAllParameters([out] DSFXParamEq* pDsParamEq);
	};

	[
		odl,
		uuid(4B166A6A-0D66-43F3-80E3-EE6280DEE1A4)
	]
	interface IDirectSoundFXI3DL2Reverb : stdole.IUnknown{
	 HRESULT SetAllParameters([in] DSFXI3DL2Reverb * pDsI3DL2Reverb);
	 HRESULT GetAllParameters([out] DSFXI3DL2Reverb* pDsI3DL2Reverb);
	 HRESULT SetPreset([in] eDSFX_I3DL2_ROOM Preset);
	 HRESULT GetPreset([out,retval] eDSFX_I3DL2_ROOM* Preset);
	 HRESULT SetQuality([in] long lQuality);
	 HRESULT GetQuality([out,retval] long* lQuality);
	};

	[
		odl,
		uuid(46858C3A-0DC6-45E3-B760-D4EEF16CB325)
	]
	interface IDirectSoundFXWavesReverb : stdole.IUnknown{
	 HRESULT SetAllParameters([in] DSFXWavesReverb * pDsWavesReverb);
	 HRESULT GetAllParameters([out] DSFXWavesReverb* pDsWavesReverb);
	};

	[
		odl,
		uuid(4BBD1154-62F6-4E2C-A15C-D3B6C417F7A0)
	]
	interface IDirectSoundFXCompressor : stdole.IUnknown{
	 HRESULT SetAllParameters([in] DSFXCompressor * pDsCompressor);
	 HRESULT GetAllParameters([out] DSFXCompressor* pDsCompressor);
	};

	[
		odl,
		uuid(8ECF4326-455F-4D8B-BDA9-8D5D3E9E3E0B)
	]
	interface IDirectSoundFXDistortion : stdole.IUnknown{
	 HRESULT SetAllParameters([in] DSFXDistortion * pDsDistortion);
	 HRESULT GetAllParameters([out] DSFXDistortion* pDsDistortion);
	};

	[
		odl,
		uuid(8BD28EDF-50DB-4E92-A2BD-445488D1ED42)
	]
	interface IDirectSoundFXEcho : stdole.IUnknown{
	 HRESULT SetAllParameters([in] DSFXEcho * pDsEcho);
	 HRESULT GetAllParameters([out] DSFXEcho* pDsEcho);
	};

	[
		odl,
		uuid(903E9878-2C92-4072-9B2C-EA68F5396783)
	]
	interface IDirectSoundFXFlanger : stdole.IUnknown{
	 HRESULT SetAllParameters([in] DSFXFlanger * pDsFlanger);
	 HRESULT GetAllParameters([out] DSFXFlanger* pDsFlanger);
	};

	[
		odl,
		uuid(880842E3-145F-43E6-A934-A71806E50547)
	]
	interface IDirectSoundFXChorus : stdole.IUnknown{
	 HRESULT SetAllParameters([in] DSFXChorus * pFxChorus);
	 HRESULT GetAllParameters([out] DSFXChorus* pFxChorus);
	};

	// General -------------------

	[
		odl,
		uuid(279AFA83-4981-11CE-A521-0020AF0BE560)
	]
	interface IDirectSound : stdole.IUnknown{
	 HRESULT CreateSoundBuffer([in] DSBUFFERDESC * lpcDSBufferDesc,[out] IDirectSoundBuffer * *lplpDirectSoundBuffer,[out] void* pUnkOuter);
	 HRESULT GetCaps([in,out] DSCAPS* pDSCaps);
	 HRESULT DuplicateSoundBuffer([in] IDirectSoundBuffer* pDSBufferOriginal,[out,retval] IDirectSoundBuffer** ppDSBufferDuplicate);
	 HRESULT SetCooperativeLevel([in] long hwnd,[in] DSSCL_CONST dwLevel);
	 HRESULT Compact(void);
	 HRESULT GetSpeakerConfig([out] DSSPEAKER_CONST* pdwSpeakerConfig);
	 HRESULT SetSpeakerConfig([in] DSSPEAKER_CONST dwSpeakerConfig);
	 HRESULT Initialize([in] void* pcGuidDevice);
	};

	[
		odl,
		helpstring("Applications use the methods of the IDirectSoundBuffer interface to create DirectSoundBuffer objects and set up the environment."),
		uuid(279AFA85-4981-11CE-A521-0020AF0BE560)
	]
	interface IDirectSoundBuffer : stdole.IUnknown{
	 HRESULT GetCaps([out] DSBCAPS * pDSBufferCaps);
	 HRESULT GetCurrentPosition([out] long* pdwCurrentPlayCursor,[out] long* pdwCurrentWriteCursor);
	 HRESULT GetFormat([out] void* pwfxFormat,[in] long dwSizeAllocated,[out] long* pdwSizeWritten);
	 HRESULT GetVolume([out, retval] long* plVolume);
	 HRESULT GetPan([out, retval] long* plPan);
	 HRESULT GetFrequency([out, retval] long* pdwFrequency);
	 HRESULT GetStatus([out,retval] DSBSTATUS_CONST* pdwStatus);
	 HRESULT Initialize([in] IDirectSound* directSound,[in, out] DSBUFFERDESC* bufferDesc);
	 HRESULT Lock(
	 [in] long dwOffset,
	 [in] long dwBytes,
	 [out] void* ppvAudioPtr1,
	 [out] long* pdwAudioBytes1,
	 [out] void* ppvAudioPtr2,
	 [out] long* pdwAudioBytes2,
	 [in] DSBLOCK_CONST dwFlags);
	 HRESULT Play([in] long dwReserved1,[in] long dwPriority,[in] DSBPLAY_CONST dwFlags);
	 HRESULT SetCurrentPosition([in] long dwNewPosition);
	 HRESULT SetFormat([in] WAVEFORMATEX* pcfxFormat);
	 HRESULT SetVolume([in] long lVolume);
	 HRESULT SetPan([in] long lPan);
	 HRESULT SetFrequency([in] long dwFrequency);
	 HRESULT Stop(void);
	 HRESULT Unlock(
	 [in] long pvAudioPtr1,
	 [in] long dwAudioBytes1,
	 [in] long pvAudioPtr2,
	 [in] long dwAudioBytes2);
	 HRESULT Restore(void);
	};

	[
		odl,
		uuid(C50A7E93-F395-4834-9EF6-7FA99DE50966)
	]
	interface IDirectSound8 : IDirectSound {
		HRESULT VerifyCertification([out] DSCERTIFICATION_CONST* pdwCertified);
	};

	[
		odl,
		uuid(6825A449-7524-4D82-920F-50E36AB3AB1E)
	]
	interface IDirectSoundBuffer8 : IDirectSoundBuffer {
		HRESULT SetFX([in] long dwEffectsCount, [in, out] void* pDSFXDesc, [out] void* pdwResultCodes);
		HRESULT AcquireResources([in] DSBPLAY_CONST dwFlags, [in] long dwEffectsCount, [out] void* pdwResultCodes);
		HRESULT GetObjectInPath([in] UUID* rguidObject, [in] long dwIndex, [in] UUID* rguidInterface, [out, retval] IUnknown** ppObject);

	};

	[
		odl,
		uuid(279AFA86-4981-11CE-A521-0020AF0BE560)
	]
	interface IDirectSound3DBuffer : stdole.IUnknown{
	 HRESULT GetAllParameters([out] DS3DBUFFER * pDs3dBuffer);
	 HRESULT GetConeAngles([out] long* pdwInsideConeAngle,[out] long* pdwOutsideConeAngle);
	 HRESULT GetConeOrientation([out] D3DVECTOR* pvOrientation);
	 HRESULT GetConeOutsideVolume([out, retval] long* plConeOutsideVolume);
	 HRESULT GetMaxDistance([out, retval] float* pflMaxDistance);
	 HRESULT GetMinDistance([out, retval] float* pflMinDistance);
	 HRESULT GetMode([out, retval] DS3DMODE_CONST* pdwInsideConeAngle);
	 HRESULT GetPosition([out] D3DVECTOR* pvPosition);
	 HRESULT GetVelocity([out] D3DVECTOR* pvVelocity);
	 HRESULT SetAllParameters([in] DS3DBUFFER* pcDs3dBuffer,[in] DS3DAPPLY_CONST dwApply);
	 HRESULT SetConeAngles([in] long pdwInsideConeAngle,[in] long pdwOutsideConeAngle,[in] DS3DAPPLY_CONST dwApply);
	 HRESULT SetConeOrientation([in] float x,[in] float y,[in] float z,[in] DS3DAPPLY_CONST dwApply);
	 HRESULT SetConeOutsideVolume([in] long lConeOutsideVolume,[in] DS3DAPPLY_CONST dwApply);
	 HRESULT SetMaxDistance([in] float flMaxDistance,[in] DS3DAPPLY_CONST dwApply);
	 HRESULT SetMinDistance([in] float flMinDistance,[in] DS3DAPPLY_CONST dwApply);
	 HRESULT SetMode([in] DS3DMODE_CONST dwMode,[in] DS3DAPPLY_CONST dwApply);
	 HRESULT SetPosition([in] float x,[in] float y,[in] float z,[in] DS3DAPPLY_CONST dwApply);
	 HRESULT SetVelocity([in] float x,[in] float y,[in] float z,[in] DS3DAPPLY_CONST dwApply);
	};

	[
		odl,
		uuid(279AFA84-4981-11CE-A521-0020AF0BE560)
	]
	interface IDirectSound3DListener : stdole.IUnknown{
	 HRESULT GetAllParameters([out] DS3DLISTENER * pListener);
	 HRESULT GetDistanceFactor([out, retval] float* pflDistanceFactor);
	 HRESULT GetDopplerFactor([out, retval] float* pvOrientation);
	 HRESULT GetOrientation([out] D3DVECTOR* pvOrientFront,[out] D3DVECTOR* pvOrientTop);
	 HRESULT GetPosition([out] D3DVECTOR* pvPosition);
	 HRESULT GetRolloffFactor([out] D3DVECTOR* pflRolloffFactor);
	 HRESULT GetVelocity([out] D3DVECTOR* pflRolloffFactor);
	 HRESULT SetAllParameters([in] DS3DLISTENER* pcDs3dBuffer,[in] DS3DAPPLY_CONST dwApply);
	 HRESULT SetDistanceFactor([in] float flDistanceFactor,[in] DS3DAPPLY_CONST dwApply);
	 HRESULT SetDopplerFactor([in] float flDopplerFactor,[in] DS3DAPPLY_CONST dwApply);
	 HRESULT SetOrientation(
	 [in] float xFront,
	 [in] float yFront,
	 [in] float zFront,
	 [in] float xTop,
	 [in] float yTop,
	 [in] float zTop,
	 [in] DS3DAPPLY_CONST dwApply);
	 HRESULT SetPosition([in] float x,[in] float y,[in] float z,[in] DS3DAPPLY_CONST dwApply);
	 HRESULT SetRolloffFactor([in] float flRolloffFactor,[in] DS3DAPPLY_CONST dwApply);
	 HRESULT SetVelocity([in] float x,[in] float y,[in] float z,[in] DS3DAPPLY_CONST dwApply);
	 HRESULT CommitDeferredSettings(void);
	};

	[
		odl,
		uuid(B0210781-89CD-11D0-AF08-00A0C925CD16)
	]
	interface IDirectSoundCapture : stdole.IUnknown{
	 HRESULT CreateCaptureBuffer([in] DSCBUFFERDESC * pcDSCBufferDesc,[in, out] IDirectSoundCaptureBuffer * *ppDSCBuffer,[in] IUnknown * pUnkOuter);
	 HRESULT GetCaps([out] DSCCAPS* pDSCCaps);
	 HRESULT Initialize([in] void* pcGuidDevice);
	};


	[
		odl,
		uuid(B0210782-89CD-11D0-AF08-00A0C925CD16)
	]
	interface IDirectSoundCaptureBuffer : stdole.IUnknown{
	 HRESULT GetCaps([in, out] DSCCAPS * pDSCBCaps);
	 HRESULT GetCurrentPosition([in, out] void* pdwCapturePosition,[in, out] long* pdwReadPosition);
	 HRESULT GetFormat([in, out] void* pwfxFormat,[in] long dwSizeAllocated,[out] long* pdwSizeWritten);
	 HRESULT GetStatus([out, retval] DSCBSTATUS_CONST* pdwStatus);
	 HRESULT Initialize([in] IDirectSoundCapture* pDirectSoundCapture,[in] DSCBUFFERDESC* pcDSCBufferDesc);
	 HRESULT Lock(
	 [in] long dwOffset,
	 [in] long dwBytes,
	 [out] long* ppvAudioPtr1,
	 [out] long* pdwAudioBytes1,
	 [out] long* ppvAudioPtr2,
	 [out] long* pdwAudioBytes2,
	 [in] DSCBLOCK_CONST dwFlags);
	 HRESULT Start([in] DSCBSTART_CONST dwOffset);
	 HRESULT Stop(void);
	 HRESULT Unlock([in] long ppvAudioPtr1,[in] long pdwAudioBytes1,[in] long ppvAudioPtr2,[in] long pdwAudioBytes2);
	};


	[
		odl,
		uuid(00990DF4-0DBB-4872-833E-6D303E80AEB6)
	]
	interface IDirectSoundCaptureBuffer8 : IDirectSoundCaptureBuffer {
		HRESULT GetObjectInPath([in] UUID* rguidObject, [in] long dwIndex, [in] UUID* rguidInterface, [out, retval] stdole.IUnknown** ppObject);
		HRESULT GetFXStatus([in] long dwFXCount, [in, out] DSCFXR_CONST* pdwFXStatus);
	};

	[
		odl,
		uuid(B0210783-89CD-11D0-AF08-00A0C925CD16)
	]
	interface IDirectSoundNotify : stdole.IUnknown{
	 HRESULT SetNotificationPositions([in] long dwPositionNotifies,[in] DSBPOSITIONNOTIFY * pcPositionNotifies);
	};


	// Modules -----------------
	[
		dllname("nodll")
	]
	module DS_GUID_CONST{
	 const LPSTR DS3DALG_DEFAULT = "{00000000-0000-0000-0000-000000000000}";
	 const LPSTR DS3DALG_NO_VIRTUALIZATION = "{C241333F-1C1B-11d2-94F5-00C04FC28ACA}";
	 const LPSTR DS3DALG_HRTF_FULL = "{C2413340-1C1B-11d2-94F5-00C04FC28ACA}";
	 const LPSTR DS3DALG_HRTF_LIGHT = "{C2413342-1C1B-11d2-94F5-00C04FC28ACA}";
	 const LPSTR GUID_DSCFX_CLASS_AEC = "{BF963D80-C559-11D0-8A2B-00A0C9255AC1}";
	 const LPSTR GUID_DSCFX_MS_AEC = "{CDEBB919-379A-488a-8765-F53CFD36DE40}";
	 const LPSTR GUID_DSCFX_SYSTEM_AEC = "{1C22C56D-9879-4f5b-A389-27996DDC2810}";
	 const LPSTR GUID_DSCFX_CLASS_NS = "{E07F903F-62FD-4e60-8CDD-DEA7236665B5}";
	 const LPSTR GUID_DSCFX_MS_NS = "{11C5C73B-66E9-4ba1-A0BA-E814C6EED92D}";
	 const LPSTR GUID_DSCFX_SYSTEM_NS = "{5AB0882E-7274-4516-877D-4EEE99BA4FD0}";
	};

	[
		dllname("nodll")
	]
	module DSFX_GUID_CONST{
	 const LPSTR CLSID_DSFX_STANDARD_GARGLE = "{DAFD8210-5711-4B91-9FE3-F75B7AE279BF}";
	 const LPSTR CLSID_DSFX_STANDARD_CHORUS = "{EFE6629C-81F7-4281-BD91-C9D604A95AF6}";
	 const LPSTR CLSID_DSFX_STANDARD_FLANGER = "{EFCA3D92-DFD8-4672-A603-7420894BAD98}";
	 const LPSTR CLSID_DSFX_STANDARD_ECHO = "{EF3E932C-D40B-4F51-8CCF-3F98F1B29D5D}";
	 const LPSTR CLSID_DSFX_STANDARD_DISTORTION = "{EF114C90-CD1D-484E-96E5-09CFAF912A21}";
	 const LPSTR CLSID_DSFX_STANDARD_COMPRESSOR = "{EF011F79-4000-406D-87AF-BFFB3FC39D57}";
	 const LPSTR CLSID_DSFX_STANDARD_PARAMEQ = "{120CED89-3BF4-4173-A132-3CB406CF3231}";
	 const LPSTR CLSID_DSFX_STANDARD_I3DL2REVERB = "{EF985E71-D5C7-42D4-BA4D-2D073E2E96F4}";
	 const LPSTR CLSID_DSFX_WAVES_REVERB = "{87FC0268-9A55-4360-95AA-004A1D9DE26C}";
	 const LPSTR IID_All_Objects = "{AA114DE5-C262-4169-A1C8-23D698CC73B5}";
	 const LPSTR IID_IDirectSoundFXGargle = "{D616F352-D622-11CE-AAC5-0020AF0B99A3}";
	 const LPSTR IID_IDirectSoundFXChorus = "{880842E3-145F-43E6-A934-A71806E50547}";
	 const LPSTR IID_IDirectSoundFXFlanger = "{903E9878-2C92-4072-9B2C-EA68F5396783}";
	 const LPSTR IID_IDirectSoundFXEcho = "{8BD28EDF-50DB-4E92-A2BD-445488D1ED42}";
	 const LPSTR IID_IDirectSoundFXDistortion = "{8ECF4326-455F-4D8B-BDA9-8D5D3E9E3E0B}";
	 const LPSTR IID_IDirectSoundFXCompressor = "{4BBD1154-62F6-4E2C-A15C-D3B6C417F7A0}";
	 const LPSTR IID_IDirectSoundFXParamEq = "{C03CA9FE-FE90-4204-8078-82334CD177DA}";
	 const LPSTR IID_IDirectSoundFXWavesReverb = "{46858C3A-0DC6-45E3-B760-D4EEF16CB325}";
	 const LPSTR IID_IDirectSoundFXI3DL2Reverb = "{4B166A6A-0D66-43F3-80E3-EE6280DEE1A4}";
	};

	// I3DL2 Reverberation Presets Values:
	[
		dllname("nodll")
	]
	// Related to struct DSFXI3DL2Reverb! (see above)
	// -> Just comma-split the strings to get the values for DSFXI3DL2Reverb.
	module I3DL2_PRESETS{
	 const LPSTR STR_PRESET_DEFAULT = "-1000,-100,0.0,1.49,0.83,-2602,0.007,200,0.011,100.0,100.0,5000.0";
	 const LPSTR STR_PRESET_GENERIC = "-1000,-100,0.0,1.49,0.83,-2602,0.007,200,0.011,100.0,100.0,5000.0";
	 const LPSTR STR_PRESET_PADDEDCELL = "-1000,-6000,0.0,0.17,0.10,-1204,0.001,207,0.002,100.0,100.0,5000.0";
	 const LPSTR STR_PRESET_ROOM = "-1000,-454,0.0,0.40,0.83,-1646,0.002,53,0.003,100.0,100.0,5000.0";
	 const LPSTR STR_PRESET_BATHROOM = "-1000,-1200,0.0,1.49,0.54,-370,0.007,1030,0.011,100.0,60.0,5000.0";
	 const LPSTR STR_PRESET_LIVINGROOM = "-1000,-6000,0.0,0.50,0.10,-1376,0.003,-1104,0.004,100.0,100.0,5000.0";
	 const LPSTR STR_PRESET_STONEROOM = "-1000,-300,0.0,2.31,0.64,-711,0.012,83,0.017,100.0,100.0,5000.0";
	 const LPSTR STR_PRESET_AUDITORIUM = "-1000,-476,0.0,4.32,0.59,-789,0.020,-289,0.030,100.0,100.0,5000.0";
	 const LPSTR STR_PRESET_CONCERTHALL = "-1000,-500,0.0,3.92,0.70,-1230,0.020,-2,0.029,100.0,100.0,5000.0";
	 const LPSTR STR_PRESET_CAVE = "-1000,0,0.0,2.91,1.30,-602,0.015,-302,0.022,100.0,100.0,5000.0";
	 const LPSTR STR_PRESET_ARENA = "-1000,-698,0.0,7.24,0.33,-1166,0.020,16,0.030,100.0,100.0,5000.0";
	 const LPSTR STR_PRESET_HANGAR = "-1000,-1000,0.0,10.05,0.23,-602,0.020,198,0.030,100.0,100.0,5000.0";
	 const LPSTR STR_PRESET_CARPETEDHALLWAY = "-1000,-4000,0.0,0.30,0.10,-1831,0.002,-1630,0.030,100.0,100.0,5000.0";
	 const LPSTR STR_PRESET_HALLWAY = "-1000,-300,0.0,1.49,0.59,-1219,0.007,441,0.011,100.0,100.0,5000.0";
	 const LPSTR STR_PRESET_STONECORRIDOR = "-1000,-237,0.0,2.70,0.79,-1214,0.013,395,0.020,100.0,100.0,5000.0";
	 const LPSTR STR_PRESET_ALLEY = "-1000,-270,0.0,1.49,0.86,-1204,0.007,-4,0.011,100.0,100.0,5000.0";
	 const LPSTR STR_PRESET_FOREST = "-1000,-3300,0.0,1.49,0.54,-2560,0.162,-613,0.088,79.0,100.0,5000.0";
	 const LPSTR STR_PRESET_CITY = "-1000,-800,0.0,1.49,0.67,-2273,0.007,-2217,0.011,50.0,100.0,5000.0";
	 const LPSTR STR_PRESET_MOUNTAINS = "-1000,-2500,0.0,1.49,0.21,-2780,0.300,-2014,0.100,27.0,100.0,5000.0";
	 const LPSTR STR_PRESET_QUARRY = "-1000,-1000,0.0,1.49,0.83,-10000,0.061,500,0.025,100.0,100.0,5000.0";
	 const LPSTR STR_PRESET_PLAIN = "-1000,-2000,0.0,1.49,0.50,-2466,0.179,-2514,0.100,21.0,100.0,5000.0";
	 const LPSTR STR_PRESET_PARKINGLOT = "-1000,0,0.0,1.65,1.50,-1363,0.008,-1153,0.012,100.0,100.0,5000.0";
	 const LPSTR STR_PRESET_SEWERPIPE = "-1000,-1000,0.0,2.81,0.14,429,0.014,648,0.021,80.0,60.0,5000.0";
	 const LPSTR STR_PRESET_UNDERWATER = "-1000,-4000,0.0,1.49,0.10,-449,0.007,1700,0.011,100.0,100.0,5000.0";
	 const LPSTR STR_PRESET_SMALLROOM = "-1000,-600,0.0,1.10,0.83,-400,0.005,500,0.010,100.0,100.0,5000.0";
	 const LPSTR STR_PRESET_MEDIUMROOM = "-1000,-600,0.0,1.30,0.83,-1000,0.010,-200,0.020,100.0,100.0,5000.0";
	 const LPSTR STR_PRESET_LARGEROOM = "-1000,-600,0.0,1.50,0.83,-1600,0.020,-1000,0.040,100.0,100.0,5000.0";
	 const LPSTR STR_PRESET_MEDIUMHALL = "-1000,-600,0.0,1.80,0.70,-1300,0.015,-800,0.030,100.0,100.0,5000.0";
	 const LPSTR STR_PRESET_LARGEHALL = "-1000,-600,0.0,1.80,0.70,-2000,0.030,-1400,0.060,100.0,100.0,5000.0";
	 const LPSTR STR_PRESET_PLATE = "-1000,-200,0.0,1.30,0.90,0,0.002,0,0.010,100.0,75.0,5000.0";
	};

	[
		dllname("nodll")
	]
	module DSFX_PARAMETERS{
	 const long  DSFXCHORUS_WETDRYMIX_MIN = 0;
	 const long  DSFXCHORUS_WETDRYMIX_MAX = 100;
	 const long  DSFXCHORUS_DEPTH_MIN = 0;
	 const long  DSFXCHORUS_DEPTH_MAX = 100;
	 const long  DSFXCHORUS_FEEDBACK_MIN = -99;
	 const long  DSFXCHORUS_FEEDBACK_MAX = 99;
	 const long  DSFXCHORUS_FREQUENCY_MIN = 0;
	 const long  DSFXCHORUS_FREQUENCY_MAX = 10;
	 const long  DSFXCHORUS_DELAY_MIN = 0;
	 const long  DSFXCHORUS_DELAY_MAX = 20;
	 const long  DSFXCHORUS_PHASE_MIN = 0;
	 const long  DSFXCHORUS_PHASE_MAX = 4;

	 const long  DSFXFLANGER_WETDRYMIX_MIN = 0;
	 const long  DSFXFLANGER_WETDRYMIX_MAX = 100;
	 const long  DSFXFLANGER_FREQUENCY_MIN = 0;
	 const long  DSFXFLANGER_FREQUENCY_MAX = 10;
	 const long  DSFXFLANGER_DEPTH_MIN = 0;
	 const long  DSFXFLANGER_DEPTH_MAX = 100;
	 const long  DSFXFLANGER_PHASE_MIN = 0;
	 const long  DSFXFLANGER_PHASE_MAX = 4;
	 const long  DSFXFLANGER_FEEDBACK_MIN = -99;
	 const long  DSFXFLANGER_FEEDBACK_MAX = 99;
	 const long  DSFXFLANGER_DELAY_MIN = 0;
	 const long  DSFXFLANGER_DELAY_MAX = 4;

	 const long  DSFXECHO_WETDRYMIX_MIN = 0;
	 const long  DSFXECHO_WETDRYMIX_MAX = 100;
	 const long  DSFXECHO_FEEDBACK_MIN = 0;
	 const long  DSFXECHO_FEEDBACK_MAX = 100;
	 const long  DSFXECHO_LEFTDELAY_MIN = 1;
	 const long  DSFXECHO_LEFTDELAY_MAX = 2000;
	 const long  DSFXECHO_RIGHTDELAY_MIN = 1;
	 const long  DSFXECHO_RIGHTDELAY_MAX = 2000;
	 const long  DSFXECHO_PANDELAY_MIN = 0;
	 const long  DSFXECHO_PANDELAY_MAX = 1;

	 const long  DSFXDISTORTION_GAIN_MIN = -60;
	 const long  DSFXDISTORTION_GAIN_MAX = 0;
	 const long  DSFXDISTORTION_EDGE_MIN = 0;
	 const long  DSFXDISTORTION_EDGE_MAX = 100;
	 const long  DSFXDISTORTION_POSTEQCENTERFREQUENCY_MIN = 100;
	 const long  DSFXDISTORTION_POSTEQCENTERFREQUENCY_MAX = 8000;
	 const long  DSFXDISTORTION_POSTEQBANDWIDTH_MIN = 100;
	 const long  DSFXDISTORTION_POSTEQBANDWIDTH_MAX = 8000;
	 const long  DSFXDISTORTION_PRELOWPASSCUTOFF_MIN = 100;
	 const long  DSFXDISTORTION_PRELOWPASSCUTOFF_MAX = 8000;

	 const long  DSFXCOMPRESSOR_GAIN_MIN = -60;
	 const long  DSFXCOMPRESSOR_GAIN_MAX = 60;
	 const long  DSFXCOMPRESSOR_ATTACK_MIN = 1;
	 const long  DSFXCOMPRESSOR_ATTACK_MAX = 500;
	 const long  DSFXCOMPRESSOR_RELEASE_MIN = 50;
	 const long  DSFXCOMPRESSOR_RELEASE_MAX = 3000;
	 const long  DSFXCOMPRESSOR_THRESHOLD_MIN = -60;
	 const long  DSFXCOMPRESSOR_THRESHOLD_MAX = 0;
	 const long  DSFXCOMPRESSOR_RATIO_MIN = 1;
	 const long  DSFXCOMPRESSOR_RATIO_MAX = 100;
	 const long  DSFXCOMPRESSOR_PREDELAY_MIN = 0;
	 const long  DSFXCOMPRESSOR_PREDELAY_MAX = 4;

	 const long  DSFXPARAMEQ_CENTER_MIN = 80;
	 const long  DSFXPARAMEQ_CENTER_MAX = 16000;
	 const long  DSFXPARAMEQ_BANDWIDTH_MIN = 1;
	 const long  DSFXPARAMEQ_BANDWIDTH_MAX = 36;
	 const long  DSFXPARAMEQ_GAIN_MIN = -15;
	 const long  DSFXPARAMEQ_GAIN_MAX = 15;

	 const long DSFX_I3DL2REVERB_ROOM_MIN = -10000;
	 const long DSFX_I3DL2REVERB_ROOM_MAX = 0;
	 const long DSFX_I3DL2REVERB_ROOM_DEFAULT = (-1000);
	 const long DSFX_I3DL2REVERB_ROOMHF_MIN = (-10000);
	 const long DSFX_I3DL2REVERB_ROOMHF_MAX = 0;
	 const long DSFX_I3DL2REVERB_ROOMHF_DEFAULT = (-100);
	 const long DSFX_I3DL2REVERB_REFLECTIONS_MIN = (-10000);
	 const long DSFX_I3DL2REVERB_REFLECTIONS_MAX = 1000;
	 const long DSFX_I3DL2REVERB_REFLECTIONS_DEFAULT = (-2602);
	 const long DSFX_I3DL2REVERB_REVERB_MIN = (-10000);
	 const long DSFX_I3DL2REVERB_REVERB_MAX = 2000;
	 const long DSFX_I3DL2REVERB_REVERB_DEFAULT = (200);
	 const long DSFX_I3DL2REVERB_QUALITY_MIN = 0;
	 const long DSFX_I3DL2REVERB_QUALITY_MAX = 3;
	 const long DSFX_I3DL2REVERB_QUALITY_DEFAULT = 2;

	 const long  DSFX_I3DL2REVERB_ROOMROLLOFFFACTOR_MIN = 0;
	 const long  DSFX_I3DL2REVERB_ROOMROLLOFFFACTOR_MAX = 10;
	 const long  DSFX_I3DL2REVERB_ROOMROLLOFFFACTOR_DEFAULT = 0;
	 const long  DSFX_I3DL2REVERB_DECAYTIME_MIN = 1;
	 const long  DSFX_I3DL2REVERB_DECAYTIME_MAX = 20;
	 const long  DSFX_I3DL2REVERB_DECAYTIME_DEFAULT = 2;
	 const long  DSFX_I3DL2REVERB_DECAYHFRATIO_MIN = 1;
	 const long  DSFX_I3DL2REVERB_DECAYHFRATIO_MAX = 2;
	 const long  DSFX_I3DL2REVERB_DECAYHFRATIO_DEFAULT = 1;
	 const long  DSFX_I3DL2REVERB_REFLECTIONSDELAY_MIN = 0;
	 const long  DSFX_I3DL2REVERB_REFLECTIONSDELAY_MAX = 0;
	 const long  DSFX_I3DL2REVERB_REFLECTIONSDELAY_DEFAULT = 0;
	 const long  DSFX_I3DL2REVERB_REVERBDELAY_MIN = 0;
	 const long  DSFX_I3DL2REVERB_REVERBDELAY_MAX = 0;
	 const long  DSFX_I3DL2REVERB_REVERBDELAY_DEFAULT = 0;
	 const long  DSFX_I3DL2REVERB_DIFFUSION_MIN = 0;
	 const long  DSFX_I3DL2REVERB_DIFFUSION_MAX = 100;
	 const long  DSFX_I3DL2REVERB_DIFFUSION_DEFAULT = 100;
	 const long  DSFX_I3DL2REVERB_DENSITY_MIN = 0;
	 const long  DSFX_I3DL2REVERB_DENSITY_MAX = 100;
	 const long  DSFX_I3DL2REVERB_DENSITY_DEFAULT = 100;
	 const long  DSFX_I3DL2REVERB_HFREFERENCE_MIN = 20;
	 const long  DSFX_I3DL2REVERB_HFREFERENCE_MAX = 20000;
	 const long  DSFX_I3DL2REVERB_HFREFERENCE_DEFAULT = 5000;

	 const long  DSFX_WAVESREVERB_INGAIN_MIN = -96;
	 const long  DSFX_WAVESREVERB_INGAIN_MAX = 0;
	 const long  DSFX_WAVESREVERB_INGAIN_DEFAULT = 0;
	 const long  DSFX_WAVESREVERB_REVERBMIX_MIN = -96;
	 const long  DSFX_WAVESREVERB_REVERBMIX_MAX = 0;
	 const long  DSFX_WAVESREVERB_REVERBMIX_DEFAULT = 0;
	 const long  DSFX_WAVESREVERB_REVERBTIME_MIN = 0;
	 const long  DSFX_WAVESREVERB_REVERBTIME_MAX = 3000;
	 const long  DSFX_WAVESREVERB_REVERBTIME_DEFAULT = 1000;
	 const long  DSFX_WAVESREVERB_HIGHFREQRTRATIO_MIN = 0;
	 const long  DSFX_WAVESREVERB_HIGHFREQRTRATIO_MAX = 1;
	 const long  DSFX_WAVESREVERB_HIGHFREQRTRATIO_DEFAULT = 0;

	};


	// Coclasses -------------------

	[
		uuid(47D4D946-62E8-11CF-93BC-444553540000)
	]
	coclass DirectSound { [default] interface IDirectSound; };

	[
		uuid(3901CC3F-84B5-4FA4-BA35-AA8172B8A09B)
	]
	coclass DirectSound8 { [default] interface IDirectSound8; };

	[
		uuid(B0210780-89CD-11D0-AF08-00A0C925CD16)
	]
	coclass DirectSoundCapture { [default] interface IDirectSoundCapture; };

	[
		uuid(E4BCAC13-7F99-4908-9A8E-74E3BF24B6E1)
	]
	coclass DirectSoundCapture8 { [default] interface IDirectSoundCapture; };