// Copyright (C) Microsoft Corporation. All rights reserved.

//cpp_quote("//")
//cpp_quote("// Copyright (C) Microsoft Corporation. All rights reserved.")
//cpp_quote("//")
//
//cpp_quote("#include <winapifamily.h>")
//
//cpp_quote("#if (NTDDI_VERSION >= NTDDI_WIN8)")
//
//import "oaidl.idl";
//import "wtypes.idl";
//
//#pragma region Desktop Family
//cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")

interface IMediaRadioManager;
interface IRadioInstanceCollection;
interface IRadioInstance;
interface IMediaRadioManagerNotifySink;

typedef enum DEVICE_RADIO_STATE
{
    DRS_RADIO_ON = 0,
    DRS_SW_RADIO_OFF = 1,
    DRS_HW_RADIO_OFF = 2,
    DRS_SW_HW_RADIO_OFF = 3,
    DRS_HW_RADIO_ON_UNCONTROLLABLE = 4,
    DRS_RADIO_INVALID = 5,
    DRS_HW_RADIO_OFF_UNCONTROLLABLE = 6,
    DRS_RADIO_MAX = 6 //DRS_HW_RADIO_OFF_UNCONTROLLABLE
} DEVICE_RADIO_STATE;

typedef enum SYSTEM_RADIO_STATE
{
    SRS_RADIO_ENABLED = 0,
    SRS_RADIO_DISABLED = 1,
} SYSTEM_RADIO_STATE;

//+--------------------------------------------------------------------------------
// IMediaRadioManager -- Represents high level radio operations on each radio type.
// The object implementing this interface will implement a Connection point (IConnectionPoint)
// for IMediaRadioManagerNotifySink.
// Each IMediaRadioManager object controls several or no IRadioInstance objects.
[
    odl,
    uuid(6CFDCAB5-FC47-42A5-9241-074B58830E73)
]
interface IMediaRadioManager : stdole.IUnknown
{
    HRESULT GetRadioInstances(
        [out] IRadioInstanceCollection** ppCollection
    );

    HRESULT OnSystemRadioStateChange(
        [in] SYSTEM_RADIO_STATE sysRadioState,
        [in] UINT32 uTimeoutSec
    );

};

//+---------------------------------------------------------------------------
// IRadioInstanceCollection -- a flat list of radio instances
//
[
    odl,
    uuid(E5791FAE-5665-4E0C-95BE-5FDE31644185)
]
interface IRadioInstanceCollection : stdole.IUnknown
{
    HRESULT GetCount(
        [out] UINT32* pcInstance
    );

    HRESULT GetAt(
        [in] UINT32 uIndex,
        [out] IRadioInstance** ppRadioInstance
    );
};

//+---------------------------------------------------------------------------
// IRadioInstance -- Interface to control specific radio instance
//
[
    odl,
    uuid(70AA1C9E-F2B4-4C61-86D3-6B9FB75FD1A2)
]
interface IRadioInstance : stdole.IUnknown
{
    HRESULT GetRadioManagerSignature(
        [out] UUID* pguidSignature
    );

    HRESULT GetInstanceSignature(
        [out] BSTR* pbstrId
    );

    HRESULT GetFriendlyName(
        [in] LCID lcid,
        [out] BSTR* pbstrName
    );

    HRESULT GetRadioState(
        [out] DEVICE_RADIO_STATE* pRadioState
    );

    HRESULT SetRadioState(
        [in] DEVICE_RADIO_STATE radioState,
        [in] UINT32 uTimeoutSec
    );

    BOOL IsMultiComm();

    BOOL IsAssociatingDevice();
}

//+---------------------------------------------------------------------------
// IMediaRadioManagerNotifySink -- notify instance add/remove and radio state change event
//
[
    odl,
    uuid(89D81F5F-C147-49ED-A11C-77B20C31E7C9)
]
interface IMediaRadioManagerNotifySink : stdole.IUnknown
{
    HRESULT OnInstanceAdd(
        [in] IRadioInstance* pRadioInstance
    );

    HRESULT OnInstanceRemove(
        [in] BSTR bstrRadioInstanceId
    );

    HRESULT OnInstanceRadioChange(
        [in] BSTR bstrRadioInstanceId,
        [in] DEVICE_RADIO_STATE radioState
    );
};

//cpp_quote("#endif /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) */")
//#pragma endregion
//
//cpp_quote("#endif // (NTDDI >= NTDDI_WIN8)")

typedef [public] DWORD RADIO_CHANGE_REASON;

[
    odl,
        uuid(db3afbfb-08e6-46c6-aa70-bf9a34c30ab7)
]
interface IRadioManager : stdole.IUnknown
{
    HRESULT IsRMSupported([in, out] DWORD * pdwState);
    HRESULT GetUIRadioInstances([out] IUnknown** ppInstances); //IUIRadioInstanceCollection
    HRESULT GetSystemRadioState([out] BOOL* pbEnabled, [out] int* param2, [out] RADIO_CHANGE_REASON* param3);
    HRESULT SetSystemRadioState([in] BOOL bEnabled);
    HRESULT Refresh(void);
    HRESULT OnHardwareSliderChange([in] int unknown1, [in] int unknown2);
}

//WwanRadioManager
[uuid(1910E202-236A-43E6-9469-FE0B3149F3D9)] coclass WwanRadioManager { interface IMediaRadioManager; }

//XboxGIPRadioManager
[uuid(3F9FF9AB-AC3E-40BB-BBC9-27B648AD1FB2)] coclass XboxGIPRadioManager { interface IMediaRadioManager; }

//WlanRadioManager
[uuid(833A69FB-5E17-4893-85A5-1EF469217372)] coclass WlanRadioManager { interface IMediaRadioManager; }

//BluetoothRadioManager
[uuid(afd198ac-5f30-4e89-a789-5ddf60a69366)] coclass BluetoothRadioManager { interface IMediaRadioManager; }

//CLSID_RadioManagementAPI
[uuid(581333f6-28db-41be-bc7a-ff201f12f3f6)] coclass RadioManagementAPI { interface IRadioManager; }