
'*****************************************************************************************
'This file is a part of WinDevLibImpl - Windows Development Library for twinBASIC (Implements)
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************


[ InterfaceId ("00000101-0000-0000-C000-000000000046") ]
Interface IEnumString Extends stdole.IUnknown
    Sub Next(ByVal celt As Long, rgelt As LongPtr, pceltFetched As Long)
    Sub Skip(ByVal celt As Long)
    Sub Reset()
    Sub Clone(ppEnum As IEnumString)
End Interface

[ InterfaceId ("00000103-0000-0000-C000-000000000046") ]
Interface IEnumFormatETC Extends stdole.IUnknown
    Sub Next(ByVal celt As Long, rgelt As FORMATETC, Optional ByRef pceltFetched As Long)
    Sub Skip(ByVal celt As Long)
    Sub Reset()
    Sub Clone(ppEnum As IEnumFormatETC)
End Interface

[ InterfaceId ("000214F2-0000-0000-C000-000000000046") ]
Interface IEnumIDList Extends stdole.IUnknown
    Sub Next(ByVal celt As Long, rgelt As LongPtr, pceltFetched As Long)
    Sub Skip(ByVal celt As Long)
    Sub Reset()
    Sub Clone(ppEnum As IEnumIDList)
End Interface

[ InterfaceId ("70629033-e363-4a28-a567-0db78006e6d7") ]
Interface IEnumShellItems Extends stdole.IUnknown
    Sub Next(ByVal celt As Long, rgelt As IShellItem, pceltFetched As Long)
    Sub Skip(ByVal celt As Long)
    Sub Reset()
    Sub Clone(ppEnum As IEnumShellItems)
End Interface

[ InterfaceId ("0c733a30-2a1c-11ce-ade5-00aa0044773d") ]
Interface ISequentialStream Extends stdole.IUnknown
    Sub Read(pv As any, ByVal cb As Long, pcbRead As Long)
    Sub Write(pv As any, ByVal cb As Long, pcbWritten As Long)
End Interface
[ InterfaceId ("0000000c-0000-0000-C000-000000000046") ]
Interface IStream Extends ISequentialStream
    Sub Seek(ByVal dlibMove As LongLong, ByVal dwOrigin As STREAM_SEEK, plibNewPosition As LongLong)
    Sub SetSize(ByVal libNewSize As LongLong)
    Sub CopyTo(ByVal pStm As IStream, ByVal cb As LongLong, pcbRead As LongLong, pcbWritten As LongLong)
    Sub Commit(ByVal grfCommitFlags As STGC)
    Sub Revert()
    Sub LockRegion(ByVal libOffset As LongLong, ByVal cb As LongLong, ByVal dwLockType As LOCKTYPE)
    Sub UnlockRegion(ByVal libOffset As LongLong, ByVal cb As LongLong, ByVal dwLockType As LOCKTYPE)
    Sub Stat(pstatstg As STATSTG, ByVal grfStatFlag As STATFLAG)
    Sub Clone(ppStrm As IStream)
End Interface

[ InterfaceId ("0000010B-0000-0000-C000-000000000046") ]
Interface IPersistFile Extends stdole.IUnknown
    Sub GetClassID(ByRef pClassID As UUID)
    Sub IsDirty()
    Sub Load(ByVal pszFileName As LongPtr, ByVal dwMode As STGM)
    Sub Save(ByVal pszFileName As LongPtr, ByVal fRemember As Long)
    Sub SaveCompleted(ByVal pszFileName As LongPtr)
    Sub GetCurFile(ByRef ppszFileName As LongPtr)
End Interface

[ InterfaceId ("00000109-0000-0000-C000-000000000046") ]
Interface IPersistStream Extends stdole.IUnknown
    Sub GetClassID(ByRef pClassID As UUID)
    Sub IsDirty()
    Sub Load(ByVal pstm As WinDevLibImpl.IStream)
    Sub Save(ByVal pstm As WinDevLibImpl.IStream, ByVal fClearDirty As LongPtr)
    Function GetSizeMax() As Currency
End Interface
    
[ InterfaceId ("6d5140c1-7436-11ce-8034-00aa006009fa") ]
Interface IServiceProvider Extends stdole.IUnknown
Sub QueryService(guidService As UUID, riid As UUID, ppvObject As LongPtr)
End Interface

[ InterfaceId ("3C374A41-BAE4-11CF-BF7D-00AA006946EE") ]
Interface IUrlHistoryStg Extends stdole.IUnknown
    [ Description ("Adds a new history entry") ]
    Sub AddURL(ByVal pocsUrl As String, ByVal pocsTitle As String, ByVal dwFlags As STATURLFLAGS)
    [ Description ("Deletes an entry by its URL") ]
    Sub DeleteUrl(ByVal pocsUrl As String, ByVal dwFlags As Long)
    [ Description ("Returns a STATURL for a given URL") ]
    Sub QueryUrl(ByVal pocsUrl As String, ByVal dwFlags As Long, ByRef lpSTATURL As STATURL)
    [ Description ("Binds to an object") ]
    Sub BindToObject(ByVal pocsUrl As String, ByRef riid As UUID, ByRef ppvOut As LongPtr)
    [ Description ("Returns an enumerator for URLs") ]
    Function EnumUrls() As IEnumSTATURL
End Interface
    
    
[ InterfaceId ("0000010E-0000-0000-C000-000000000046") ]
Interface IDataObject Extends stdole.IUnknown
    Sub GetData(pFormatEtcIn As FORMATETC, pMedium As STGMEDIUM)
    Sub GetDataHere(pFormatEtc As FORMATETC, pMedium As STGMEDIUM)
    Sub QueryGetData(pFormatEtc As FORMATETC)
    Sub GetCanonicalFormatEtc(pFormatEtcIn As FORMATETC, pFormatEtcOut As FORMATETC)
    Sub SetData(pFormatEtc As FORMATETC, pMedium As STGMEDIUM, ByVal fRelease As Long)
    Function EnumFormatEtc(ByVal dwDirection As DATADIR) As IEnumFormatETC
    Sub DAdvise(pFormatEtc As FORMATETC, ByVal advf As ADVF, pAdvSink As IAdviseSink)
    Sub DUnadvise(ByVal dwConnection As Long)
    Function EnumDAdvise() As IEnumSTATDATA
End Interface

[ InterfaceId ("79EAC9E4-BAF9-11CE-8C82-00AA004BA90B") ]
Interface IInternetProtocol Extends stdole.IUnknown
    Sub Start(ByVal szURL As LongPtr, ByVal pOIProtSink As IInternetProtocolSink, ByVal pOIBindInfo As IInternetBindInfo, ByVal grfPI As PI_FLAGS, ByRef dwReserved As PROTOCOLFILTERDATA)
    Sub Continue(ByRef pProtocolData As PROTOCOLDATA)
    Sub Abort(ByVal hrReason As Long, ByVal dwOptions As Long)
    Sub Terminate(ByVal dwOptions As Long)
    Sub Suspend()
    Sub Resume()
    Sub Read(ByVal pv As LongPtr, ByVal cb As Long, ByRef pcbRead As Long)
    Sub Seek(ByVal dlibMove As LongLong, ByVal dwOrigin As Long, ByRef plibNewPosition As LongLong)
    Sub LockRequest(ByVal dwOptions As Long)
    Sub UnlockRequest()
End Interface

[ InterfaceId ("79EAC9E5-BAF9-11CE-8C82-00AA004BA90B") ]
Interface IInternetProtocolSink Extends stdole.IUnknown
    Sub Switch(ByRef pProtocolData As PROTOCOLDATA)
    Sub ReportProgress(ByVal ulStatusCode As BINDSTATUS, ByVal szStatusText As String)
    Sub ReportData(ByVal grfBSCF As BSCF, ByVal ulProgress As Long, ByVal ulProgressMax As Long)
    Sub ReportResult(ByVal hrResult As Long, ByVal dwError As Long, ByVal szResult As String)
End Interface
    
[ InterfaceId ("000214E3-0000-0000-C000-000000000046") ]
Interface IShellView Extends IOleWindow
    Sub TranslateAcceleratorSB(lpMsg As MSG)
    Sub EnableModelessSV(ByVal fEnable As Long)
    Sub UIActivate(ByVal uState As SVUIA_STATUS)
    Sub Refresh()
    Sub CreateViewWindow(ByVal lpPrevView As IShellView, lpfs As FOLDERSETTINGS, ByVal psb As IShellBrowser, prcView As RECT, phwnd As LongPtr)
    Sub DestroyViewWindow()
    Sub GetCurrentInfo(lpfs As FOLDERSETTINGS)
    Sub AddPropertySheetPages(ByVal dwReserved As Long, ByVal lpfn As LongPtr, ByVal lParam As LongPtr)
    Sub SaveViewState()
    Sub SelectItem(ByVal pidlItem As LongPtr, ByVal uFlags As SVSI_Flags)
    Function GetItemObject(ByVal uItem As SVGIO_Flags, riid As UUID) As LongPtr
End Interface
[ InterfaceId ("88E39E80-3578-11CF-AE69-08002B2E1262") ]
Interface IShellView2 Extends IShellView
    Sub GetView(pvid As UUID, ByVal uView As SV2GV_Flags)
    Sub CreateViewWindow2(lpParams As SV2CVW2_PARAMS)
    Sub HandleRename(ByVal pidlNew As LongPtr)
    Sub SelectItemAndPosition(ByVal pidlItem As LongPtr, ByVal uFlags As SVSI_Flags, pt As POINT)
End Interface
[ InterfaceId ("ec39fa88-f8af-41c5-8421-38bed28f4673") ]
Interface IShellView3 Extends IShellView2
    Sub CreateViewWindow3(ByVal psbOwner As IShellBrowser, ByVal psvPrev As IShellView, ByVal dwViewFlags As SV3CVW3_FLAGS, ByVal dwMask As FOLDERFLAGS, ByVal dwFlags As FOLDERFLAGS, pvid As UUID, prcView As RECT, phwndView As LongPtr)
End Interface

    
[ InterfaceId ("000214E2-0000-0000-C000-000000000046") ]
Interface IShellBrowser Extends IOleWindow
    Sub InsertMenuSB(ByVal hMenuShared As LongPtr, lpMenuWidth As OLEMENUGROUPWIDTHS)
    Sub SetMenuSB(ByVal hMenuShared As LongPtr, ByVal holemenuReserved As LongPtr, ByVal hwndActiveObject As LongPtr)
    Sub RemoveWindowSB(ByVal hMenuShared As LongPtr)
    Sub SetStatusTextSB(ByVal lpszStatusText As String)
    Sub EnableModelessSB(ByVal fEnable As Long)
    Sub TranslateAcceleratorSB(lpMsg As MSG, ByVal wID As Integer)
    Sub BrowseObject(ByVal pidl As LongPtr, ByVal wFlags As BO_Flags)
    Sub GetViewStateStream(ByVal grfMode As Long, ppStrm As IStream)
    Sub GetControlWindow(ByVal id As GCW_IDs, lpHwnd As LongPtr)
    Sub SendControlMsg(ByVal id As GCW_IDs, ByVal uMsg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr, pret As LongPtr)
    Sub QueryActiveShellView(ppshv As IShellView)
    Sub OnViewWindowActive(ByVal ppshv As IShellView)
    Sub SetToolbarItems(ByVal lpButtons As LongPtr, ByVal nButtons As Long, ByVal uFlags As STI_Flags)
End Interface
    
    
[ InterfaceId ("000214E6-0000-0000-C000-000000000046") ]
Interface IShellFolder Extends stdole.IUnknown
    Sub ParseDisplayName(ByVal hwndOwner As LongPtr, ByVal pbc As LongPtr, ByVal lpszDisplayName As LongPtr, pchEaten As Long, ppidl As LongPtr, pdwAttributes As Long)
    Sub EnumObjects(ByVal hwndOwner As LongPtr, ByVal grfFlags As SHCONTF, ppEnumIdList As IEnumIDList)
    Sub BindToObject(ByVal pidl As LongPtr, ByVal pbc As LongPtr, riid As UUID, ppvOut As LongPtr)
    Sub BindToStorage(ByVal pidl As LongPtr, ByVal pbc As LongPtr, riid As UUID, ppvOut As LongPtr)
    Sub CompareIDs(ByVal lParam As LongPtr, ByVal pidl1 As LongPtr, ByVal pidl2 As LongPtr)
    Sub CreateViewObject(ByVal hwndOwner As LongPtr, riid As UUID, ppvOut As LongPtr)
    Sub GetAttributesOf(ByVal cidl As Long, apidl As LongPtr, rgfInOut As SFGAO_Flags)
    Sub GetUIObjectOf(ByVal hwndOwner As LongPtr, ByVal cidl As Long, apidl As LongPtr, riid As UUID, rgfReserved As Long, ppvOut As LongPtr)
    Sub GetDisplayNameOf(ByVal pidl As LongPtr, ByVal uFlags As SHGNO_Flags, lpName As STRRET)
    Sub SetNameOf(ByVal hwndOwner As LongPtr, ByVal pidl As LongPtr, ByVal lpszName As LongPtr, ByVal uFlags As SHGNO_Flags, ppidlOut As LongPtr)
End Interface
[ InterfaceId ("93F2F68C-1D1B-11d3-A30E-00C04F79ABD1") ]
Interface IShellFolder2 Extends IShellFolder
    Sub GetDefaultSearchGUID(pguid As UUID)
    Sub EnumSearches(ppEnum As IEnumExtraSearch)
    Sub GetDefaultColumn(ByVal dwRes As Long, pSort As Long, pDisplay As Long)
    Sub GetDefaultCOlumnState(ByVal iColumn As Long, pcsFlags As SHCOLSTATEF)
    Sub GetDetailsEx(ByVal pidl As LongPtr, pscid As SHCOLUMNID, pv As Variant)
    Sub GetDetailsOf(ByVal pidl As LongPtr, ByVal iColumn As Long, psd As SHELLDETAILS)
    Sub MapColumnToSCID(ByVal iColumn As Long, pscid As SHCOLUMNID)
End Interface
    
[ InterfaceId ("886d8eeb-8cf2-4446-8d02-cdba1dbdcf99") ]
Interface IPropertyStore Extends stdole.IUnknown
    Sub GetCount(cProps As Long)
    Sub GetAt(ByVal iProp As Long, pkey As PROPERTYKEY)
    Sub GetValue(key As PROPERTYKEY, pv As Variant)
    Sub SetValue(key As PROPERTYKEY, propvar As Variant)
    Sub Commit()
End Interface

[ InterfaceId ("c8e2d566-186e-4d49-bf41-6909ead56acc") ]
Interface IPropertyStoreCapabilities Extends stdole.IUnknown
    Sub IsPropertyWritable(ByVal pkey As LongPtr)
End Interface
    
[ InterfaceId ("cde725b0-ccc9-4519-917e-325d72fab4ce") ]
Interface IFolderView Extends stdole.IUnknown
    Sub GetCurrentViewMode(pViewMode As FOLDERVIEWMODE)
    Sub SetCurrentViewMode(ByVal ViewMode As FOLDERVIEWMODE)
    Sub GetFolder(riid As UUID, ppv As LongPtr)
    Sub Item(ByVal iItemIndex As Long, ppidl As LongPtr)
    Sub ItemCount(ByVal uFlags As SVGIO_Flags, pcItems As Long)
    Sub Items(ByVal uFlags As SVGIO_Flags, riid As UUID, ppv As LongPtr)
    Sub GetSelectionMarkedItem(piItem As Long)
    Sub GetFocusedItem(piItem As Long)
    Sub GetItemPosition(ByVal pidl As LongPtr, ppt As POINT)
    Sub GetSpacing(ppt As POINT)
    Sub GetDefaultSpacing(ppt As POINT)
    Sub GetAutoArrange()
    Sub SelectItem(ByVal iItem As Long, ByVal dwFlags As SVSI_Flags)
    Sub SelectAndPositionItems(ByVal cidl As Long, apidl As LongPtr, apt As POINT, ByVal dwFlags As SVSI_Flags)
End Interface
[ InterfaceId ("1af3a467-214f-4298-908e-06b03e0b39f9") ]
Interface IFolderView2 Extends IFolderView
    Sub SetGroupBy(key As PROPERTYKEY, ByVal fAscending As Long)
    Sub GetGroupBy(key As PROPERTYKEY, pfAscending As Long)
    Sub SetViewProperty(ByVal pidl As LongPtr, propkey As PROPERTYKEY, propvar As Variant)
    Sub GetViewProperty(ByVal pidl As LongPtr, propkey As PROPERTYKEY, ppropvar As Variant)
    Sub SetTileViewProperties(ByVal pidl As LongPtr, ByVal pszPropList As LongPtr)
    Sub SetExtendedTileViewProperties(ByVal pidl As LongPtr, ByVal pszPropList As LongPtr)
    Sub SetText(ByVal iType As FVTEXTTYPE, ByVal pwszText As LongPtr)
    Sub SetCurrentFolderFlags(ByVal dwMask As FOLDERFLAGS, ByVal dwFlags As FOLDERFLAGS)
    Sub GetCurrentFolderFlags(pdwFlags As FOLDERFLAGS)
    Sub GetSortColumnCount(pcColumns As Long)
    Sub SetSortColumns(ByVal rgSortColumns As LongPtr, ByVal cColumns As Long)
    Sub GetSortColumns(ByVal rgSortColumns As LongPtr, ByVal cColumns As Long)
    Sub GetItem(ByVal iItem As Long, riid As UUID, ppv As LongPtr)
    Sub GetVisibleItem(ByVal iStart As Long, ByVal fPrevious As Long, piItem As Long)
    Sub GetSelectedItem(ByVal iStart As Long, piItem As Long)
    Sub GetSelection(ByVal fNoneImpliesFolder As Long, ppsia As IShellItemArray)
    Sub GetSelectionState(ByVal pidl As LongPtr, pdwFlags As SVSI_Flags)
    Sub InvokeVerbOnSelection(ByVal pszVerb As LongPtr)
    Sub SetViewModeAndIconSize(ByVal uViewMode As FOLDERVIEWMODE, ByVal iImageSize As Long)
    Sub GetViewModeAndIconSize(puViewMode As FOLDERVIEWMODE, piImageSize As Long)
    Sub SetGroupSubsetCount(ByVal cVisibleRows As Long)
    Sub GetGroupSubsetCount(pcVisibleRows As Long)
    Sub SetRedraw(ByVal fRedrawOn As Long)
    Sub IsMoveInSameFolder()
    Sub DoRename()
End Interface
    
[ InterfaceId ("FC4801A3-2BA9-11CF-A229-00AA003D7352") ]
Interface IObjectWithSite Extends stdole.IUnknown
    Sub SetSite(ByVal pUnkSite As stdole.IUnknown)
    Sub GetSite(riid As UUID, ppvSite As LongPtr)
End Interface
    
[ InterfaceId ("b7d14566-0509-4cce-a71f-0a554233bd9b") ]
Interface IInitializeWithFile Extends stdole.IUnknown
    Sub Initialize(ByVal pszFilePath As LongPtr, ByVal grfMode As Long)
End Interface

[ InterfaceId ("b824b49d-22ac-4161-ac8a-9916e8fa3f7f") ]
Interface IInitializeWithStream Extends stdole.IUnknown
    Sub Initialize(ByVal pstream As IStream, ByVal grfMode As Long)
End Interface

[ InterfaceId ("7f73be3f-fb79-493c-a6c7-7ee14e245841") ]
Interface IInitializeWithItem Extends stdole.IUnknown
    Sub Initialize(ByVal psi As IShellItem, ByVal grfMode As Long)
End Interface

[ InterfaceId ("3E68D4BD-7135-4D10-8018-9FB6D9F33FA1") ]
Interface IInitializeWithWindow Extends stdole.IUnknown
    Sub Initialize(ByVal hwnd As LongPtr)
End Interface

[ InterfaceId ("71C0D2BC-726D-45CC-A6C0-2E31C1DB2159") ]
Interface IInitializeWithBindCtx Extends stdole.IUnknown
    Sub Initialize(ByVal pbc As IBindCtx)
End Interface

[ InterfaceId ("C3E12EB5-7D8D-44F8-B6DD-0E77B34D6DE4") ]
[ Description ("Initialize With IPropertyStore") ]
Interface IInitializeWithPropertyStore Extends stdole.IUnknown
    Sub Initialize(ByVal pps As IPropertyStore)
End Interface

[ InterfaceId ("8895b1c6-b41f-4c1c-a562-0d564250836f") ]
Interface IPreviewHandler Extends stdole.IUnknown
    Sub SetWindow(ByVal hwnd As LongPtr, prc As RECT)
    Sub SetRect(prc As RECT)
    Sub DoPreview()
    Sub Unload()
    Sub SetFocus()
    Sub QueryFocus(phwnd As LongPtr)
    Sub TranslateAccelerator(pMsg As MSG)
End Interface
    
[ InterfaceId ("196bf9a5-b346-4ef0-aa1e-5dcdb76768b1") ]
Interface IPreviewHandlerVisuals Extends stdole.IUnknown
    Sub SetBackgroundColor(ByVal color As Long)
    Sub SetFont(ByVal plf As LongPtr)
    Sub SetTextColor(ByVal color As Long)
End Interface

[ InterfaceId ("fec87aaf-35f9-447a-adb7-20234491401a") ]
Interface IPreviewHandlerFrame Extends stdole.IUnknown
    Sub GetWindowContext(pInfo As PREVIEWHANDLERFRAMEINFO)
    Sub TranslateAccelerator(pMsg As MSG)
End Interface


[ InterfaceId ("9af64809-5864-4c26-a720-c1f78c086ee3") ]
Interface ICategoryProvider Extends stdole.IUnknown
    Sub CanCategorizeOnSCID(pscid As SHCOLUMNID)
    Sub GetDefaultCategory(pguid As UUID, pscid As SHCOLUMNID)
    Sub GetCategoryForSCID(pscid As SHCOLUMNID, pguid As UUID)
    Function EnumCategories() As IEnumGUID
    Sub GetCategoryName(pguid As UUID, pszName As LongPtr, ByVal cch As Long)
    Sub CreateCategory(pguid As UUID, riid As UUID, ppv As LongPtr)
End Interface

[ InterfaceId ("00000016-0000-0000-C000-000000000046") ]
[ OleAutomation (False) ]
Interface IMessageFilter Extends stdole.IUnknown
    Sub HandleInComingCall(ByVal dwCallType As CALLTYPE, ByVal htaskCaller As LongPtr, ByVal dwTickCount As Long, ByRef lpInterfaceInfo As INTERFACEINFO)
    Sub RetryRejectedCall(ByVal htaskCallee As LongPtr, ByVal dwTickCount As Long, ByVal dwRejectType As SERVERCALL)
    Sub MessagePending(ByVal htaskCallee As LongPtr, ByVal dwTickCount As Long, ByVal dwPendingType As PENDINGTYPE)
End Interface
    
    
    
    
Module modShell

	' add your procedures here

End Module