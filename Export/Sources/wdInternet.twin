'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

'wdInternet :: WinDevLib Internet-related interfaces/defs
'
#Region "NetInterfaces"
[InterfaceId("79eac9ed-baf9-11ce-8c82-00aa004ba90b")]
[OleAutomation(False)]
Interface IInternetSecurityMgrSite Extends stdole.IUnknown
    Function GetWindow() As LongPtr
    Sub EnableModeless(ByVal fEnable As BOOL)
End Interface

[InterfaceId("79eac9ee-baf9-11ce-8c82-00aa004ba90b")]
[OleAutomation(False)]
Interface IInternetSecurityManager Extends stdole.IUnknown
    Sub SetSecuritySite(ByVal pSite As IInternetSecurityMgrSite)
    Function GetSecuritySite() As IInternetSecurityMgrSite
    Sub MapUrlToZone(ByVal pszUrl As LongPtr, pdwZone As URLZONE, ByVal dwFlags As MUTZ_FLAGS)
    Sub GetSecurityId(ByVal pwszUrl As LongPtr, pbSecurityId As Any, pcbSecurityId As Long, ByVal dwReserved As LongPtr)
    Sub ProcessUrlAction(ByVal pwszUrl As LongPtr, ByVal dwAction As URLACTIONS, pPolicy As Any, ByVal cbPolicy As Long, pContext As Any, ByVal cbContext As Long, ByVal dwFlags As PUAF, ByVal dwReserved As Long)
    Sub QueryCustomPolicy(ByVal pwszUrl As LongPtr, guidKey As UUID, ppPolicy As Any, pcbPolicy As Long, pContext As Any, ByVal cbContext As Long, ByVal dwReserved As Long)
    Sub SetZoneMapping(ByVal dwZone As URLZONE, ByVal lpszPattern As LongPtr, ByVal dwFlags As SZM_FLAGS)
    Sub GetZoneMappings(ByVal dwZone As URLZONE, ppenumString As IEnumString, ByVal dwFlags As Long)
End Interface

[InterfaceId("F164EDF1-CC7C-4F0D-9A94-34222625C393")]
[Description("IInternetSecurityManagerEx Interface")]
[OleAutomation(False)]
Interface IInternetSecurityManagerEx Extends IInternetSecurityManager
    Sub ProcessUrlActionEx(ByVal pwszUrl As String, ByVal dwAction As Long, ByVal pPolicy As LongPtr, ByVal cbPolicy As Long, ByRef pContext As Byte, ByVal cbContext As Long, ByVal dwFlags As Long, ByVal dwReserved As Long, ByRef pdwOutFlags As Long)
End Interface

[InterfaceId("F1E50292-A795-4117-8E09-2B560A72AC60")]
[Description("IInternetSecurityManagerEx2 Interface")]
[OleAutomation(False)]
Interface IInternetSecurityManagerEx2 Extends IInternetSecurityManagerEx
    Sub MapUrlToZoneEx2(ByVal pUri As IUri, ByRef pdwZone As URLZONE, ByVal dwFlags As MUTZ_FLAGS, ByRef ppwszMappedUrl As LongPtr, ByRef pdwOutFlags As MUTZ_FLAGS)
    Sub ProcessUrlActionEx2(ByVal pUri As IUri, ByVal dwAction As URLACTIONS, ByVal pPolicy As LongPtr, ByVal cbPolicy As Long, ByRef pContext As Byte, ByVal cbContext As Long, ByVal dwFlags As PUAF, ByVal dwReserved As Long, ByRef pdwOutFlags As PUAFOUT)
    Sub GetSecurityIdEx2(ByVal pUri As IUri, ByVal pbSecurityId As LongPtr, ByRef pcbSecurityId As Long, ByVal dwReserved As LongPtr)
    Sub QueryCustomPolicyEx2(ByVal pUri As IUri, ByRef guidKey As UUID, ByRef ppPolicy As LongPtr, ByRef pcbPolicy As Long, ByRef pContext As Byte, ByVal cbContext As Long, ByVal dwReserved As Long)
End Interface

[InterfaceId("3AF280B6-CB3F-11D0-891E-00C04FB6BFC4")]
[OleAutomation(False)]
Interface IInternetHostSecurityManager Extends stdole.IUnknown
    Sub GetSecurityId(ByRef pbSecurityId As Byte, ByRef pcbSecurityId As Long, Optional ByVal dwReserved As Long = 0)
    Sub ProcessUrlAction(ByVal dwAction As URLACTIONS, ByRef pPolicy As Byte, ByVal cbPolicy As Long, ByRef pContext As Byte, ByVal cbContext As Long, ByVal dwFlags As PUAF, Optional ByVal dwReserved As Long = 0)
    Sub QueryCustomPolicy(ByRef guidKey As UUID, ByRef ppPolicy As LongPtr, ByRef pcbPolicy As Long, ByRef pContext As Byte, ByVal cbContext As Long, Optional ByVal dwReserved As Long = 0)
End Interface

[InterfaceId("cd45f185-1b21-48e2-967b-ead743a8914e")]
[OleAutomation(False)]
Interface IZoneIdentifier Extends stdole.IUnknown
    [PreserveSig] Function GetId(pdwZone As URLZONE) As Long
    [PreserveSig] Function SetId(ByVal dwZone As URLZONE) As Long
    [PreserveSig] Function Remove() As Long
End Interface
[InterfaceId("EB5E760C-09EF-45C0-B510-70830CE31E6A")]
[OleAutomation(False)]
Interface IZoneIdentifier2 Extends IZoneIdentifier
    [PreserveSig] Function GetLastWriterPackageFamilyName(packageFamilyName As LongPtr) As Long
    [PreserveSig] Function SetLastWriterPackageFamilyName(ByVal packageFamilyName As LongPtr) As Long
    [PreserveSig] Function RemoveLastWriterPackageFamilyName() As Long
    [PreserveSig] Function GetAppZoneId(zone As URLZONE) As Long
    [PreserveSig] Function SetAppZoneId(ByVal zone As URLZONE) As Long
    [PreserveSig] Function RemoveAppZoneId() As Long
End Interface

[InterfaceId("79EAC9EF-BAF9-11CE-8C82-00AA004BA90B")]
[OleAutomation(False)]
Interface IInternetZoneManager Extends stdole.IUnknown
    Sub GetZoneAttributes(ByVal dwZone As URLZONE, ByRef pZoneAttributes As ZONEATTRIBUTES)
    Sub SetZoneAttributes(ByVal dwZone As URLZONE, ByRef pZoneAttributes As ZONEATTRIBUTES)
    Sub GetZoneCustomPolicy(ByVal dwZone As URLZONE, ByRef guidKey As UUID, ByRef ppPolicy As Any, ByRef pcbPolicy As Long, ByVal URLZONEREG As URLZONEREG)
    Sub SetZoneCustomPolicy(ByVal dwZone As URLZONE, ByRef guidKey As UUID, ByRef pPolicy As Any, ByVal cbPolicy As Long, ByVal URLZONEREG As URLZONEREG)
    Sub GetZoneActionPolicy(ByVal dwZone As URLZONE, ByVal dwAction As URLACTIONS, ByRef pPolicy As Any, ByVal cbPolicy As Long, ByVal URLZONEREG As URLZONEREG)
    Sub SetZoneActionPolicy(ByVal dwZone As URLZONE, ByVal dwAction As URLACTIONS, ByRef pPolicy As Any, ByVal cbPolicy As Long, ByVal URLZONEREG As URLZONEREG)
    Sub PromptAction(ByVal dwAction As URLACTIONS, ByVal hwndParent As LongPtr, ByVal pwszUrl As String, ByVal pwszText As String, Optional ByVal dwPromptFlags As Long = 0)
    Sub LogAction(ByVal dwAction As URLACTIONS, ByVal pwszUrl As String, ByVal pwszText As String, Optional ByVal dwLogFlags As Long = 0)
    Sub CreateZoneEnumerator(ByRef pdwEnumHandle As Long, ByRef pdwCount As Long, Optional ByVal dwFlags As Long = 0)
    Function GetZoneAt(ByVal dwEnumHandle As Long, ByVal dwIndex As Long) As URLZONE
    Sub DestroyZoneEnumerator(ByVal dwEnumHandle As Long)
    Sub CopyTemplatePoliciesToZone(ByVal dwTemplate As URLTEMPLATE, ByVal dwZone As URLZONE, Optional ByVal dwReserved As Long = 0)
End Interface

[InterfaceId("A4C23339-8E06-431E-9BF4-7E711C085648")]
[Description("IInternetZoneManagerEx Interface")]
[OleAutomation(False)]
Interface IInternetZoneManagerEx Extends IInternetZoneManager
    Sub GetZoneActionPolicyEx(ByVal dwZone As URLZONE, ByVal dwAction As URLACTIONS, ByRef pPolicy As LongPtr, ByVal cbPolicy As Long, ByVal URLZONEREG As URLZONEREG, ByVal dwFlags As ZAFLAGS)
    Sub SetZoneActionPolicyEx(ByVal dwZone As URLZONE, ByVal dwAction As URLACTIONS, ByVal pPolicy As LongPtr, ByVal cbPolicy As Long, ByVal URLZONEREG As URLZONEREG, ByVal dwFlags As ZAFLAGS)
End Interface

[InterfaceId("EDC17559-DD5D-4846-8EEF-8BECBA5A4ABF")]
[Description("IInternetZoneManagerEx2 Interface")]
[OleAutomation(False)]
Interface IInternetZoneManagerEx2 Extends IInternetZoneManagerEx
    Sub GetZoneAttributesEx(ByVal dwZone As URLZONE, ByRef pZoneAttributes As ZONEATTRIBUTES, ByVal dwFlags As ZAFLAGS)
    Sub GetZoneSecurityState(ByVal dwZoneIndex As Long, ByVal fRespectPolicy As BOOL, ByRef pdwState As IZM_SEC_STATE, pfPolicyEncountered As BOOL)
    Sub GetIESecurityState(ByVal fRespectPolicy As BOOL, ByRef pdwState As IZM_SEC_STATE, ByVal pfPolicyEncountered As Long, ByVal fNoCache As BOOL)
    Sub FixUnsecureSettings()
End Interface


[InterfaceId("A39EE748-6A27-4817-A6F2-13914BEF5890")]
[OleAutomation(False)]
Interface IUri Extends stdole.IUnknown
    [Description("pbstrProperty is set to a new BSTR representing the string property specified by uriProp if it exists. Caller must call SysFreeString to free the new BSTR on success.")]
        Sub GetPropertyBSTR(ByVal uriProp As Uri_PROPERTY, ByRef pbstrProperty As String, ByVal dwFlags As UriPropertyFlags)
    [Description("pcchProperty is set to the length of the string property, excluding the terminating NULL character. Call this function if you only need the property length. ")]
        Sub GetPropertyLength(ByVal uriProp As Uri_PROPERTY, ByRef pcchProperty As Long, ByVal dwFlags As UriPropertyFlags)
    [Description("pdwProperty is set to the DWORD value of the specified property ")]
        Sub GetPropertyDWORD(ByVal uriProp As Uri_PROPERTY, ByRef pdwProperty As Long, ByVal dwFlags As Long)
    [Description("pfHasProperty is set TRUE if the specified property exists in the URI.")]
        Sub HasProperty(ByVal uriProp As Uri_PROPERTY, ByRef pfHasProperty As BOOL)
    [Description("This function is for convenience and is the same as calling GetPropertyBSTR with the respective property.")]
        Sub GetAbsoluteUri(ByRef pbstrAbsoluteUri As String)
    [Description("This function is for convenience and is the same as calling GetPropertyBSTR with the respective property.")]
        Sub GetAuthority(ByRef pbstrAuthority As String)
    [Description("This function is for convenience and is the same as calling GetPropertyBSTR with the respective property.")]
        Sub GetDisplayUri(ByRef pbstrDisplayString As String)
    [Description("This function is for convenience and is the same as calling GetPropertyBSTR with the respective property.")]
        Sub GetDomain(ByRef pbstrDomain As String)
    [Description("This function is for convenience and is the same as calling GetPropertyBSTR with the respective property.")]
        Sub GetExtension(ByRef pbstrExtension As String)
    [Description("This function is for convenience and is the same as calling GetPropertyBSTR with the respective property.")]
        Sub GetFragment(ByRef pbstrFragment As String)
    [Description("This function is for convenience and is the same as calling GetPropertyBSTR with the respective property.")]
        Sub GetHost(ByRef pbstrHost As String)
    [Description("This function is for convenience and is the same as calling GetPropertyBSTR with the respective property.")]
        Sub GetPassword(ByRef pbstrPassword As String)
    [Description("This function is for convenience and is the same as calling GetPropertyBSTR with the respective property.")]
        Sub GetPath(ByRef pbstrPath As String)
    [Description("This function is for convenience and is the same as calling GetPropertyBSTR with the respective property.")]
        Sub GetPathAndQuery(ByRef pbstrPathAndQuery As String)
    [Description("This function is for convenience and is the same as calling GetPropertyBSTR with the respective property.")]
        Sub GetQuery(ByRef pbstrQuery As String)
    [Description("This function is for convenience and is the same as calling GetPropertyBSTR with the respective property.")]
        Sub GetRawUri(ByRef pbstrRawUri As String)
    [Description("This function is for convenience and is the same as calling GetPropertyBSTR with the respective property.")]
        Sub GetSchemeName(ByRef pbstrSchemeName As String)
    [Description("This function is for convenience and is the same as calling GetPropertyBSTR with the respective property.")]
        Sub GetUserInfo(ByRef pbstrUserInfo As String)
    [Description("This function is for convenience and is the same as calling GetPropertyBSTR with the respective property.")]
        Sub GetUserName(ByRef pbstrUserName As String)
    [Description("This function is for convenience and is the same as calling GetPropertyDWORD with the respective property.")]
        Sub GetHostType(ByRef pdwHostType As Long)
    [Description("This function is for convenience and is the same as calling GetPropertyDWORD with the respective property.")]
        Sub GetPort(ByRef pdwPort As Long)
    [Description("This function is for convenience and is the same as calling GetPropertyDWORD with the respective property.")]
        Sub GetScheme(ByRef pdwScheme As Long)
    [Description("This function is for convenience and is the same as calling GetPropertyDWORD with the respective property.")]
        Sub GetZone(ByRef pdwZone As Long)
    [Description("This function sets pdwFlags to a bitmap using the values Uri_HAS_PROPERTY.")]
        Sub GetProperties(ByRef pdwFlags As UriGetPropertyFlags)
    [Description("pfEqual is set TRUE if the logical content of the URIs are the same")]
        Sub IsEqual(ByVal pUri As IUri, ByRef pfEqual As BOOL)
End Interface

    [InterfaceId("a5ca5f7f-1847-4d87-9c5b-918509f7511d")]
    [OleAutomation(False)]
    Interface IMonikerProp Extends IUnknown
    	Sub PutProperty(ByVal mkp As MONIKERPROPERTY, ByVal val As LongPtr)
    End Interface


    [InterfaceId("79EAC9C0-BAF9-11CE-8C82-00AA004BA90B")]
    [OleAutomation(False)]
    Interface IBinding Extends stdole.IUnknown
        Sub Abort()
        Sub Suspend()
        Sub Resume()
        Sub SetPriority(ByVal nPriority As Long)
        Sub GetPriority(ByRef pnPriority As Long)
        Sub GetBindResult(ByRef pclsidProtocol As UUID, ByRef pdwResult As Long, ByRef pszResult As LongPtr, ByRef pdwReserved As Long)
    End Interface
    
    [InterfaceId("79EAC9C1-BAF9-11CE-8C82-00AA004BA90B")]
    [OleAutomation(False)]
    Interface IBindStatusCallback Extends stdole.IUnknown
            Sub OnStartBinding(ByVal dwReserved As Long, ByVal pib As IBinding)
            Function GetPriority() As Long
            Sub OnLowResource(ByVal reserved As Long)
            Sub OnProgress(ByVal ulProgress As Long, ByVal ulProgressMax As Long, ByVal ulStatusCode As BINDSTATUS, ByVal szStatusText As LongPtr)
            Sub OnStopBinding(ByVal hresult As Long, ByVal szError As LongPtr)
            Sub GetBindInfo(ByRef grfBINDF As BINDF, ByRef pbindinfo As BINDINFO)
            Sub OnDataAvailable(ByVal grfBSCF As BSCF, ByVal dwSize As Long, ByRef pformatetc As FORMATETC, ByRef pStgmed As STGMEDIUM)
            Sub OnObjectAvailable(ByRef riid As UUID, ByVal pUnk As stdole.IUnknown)
    End Interface
    [InterfaceId("aaa74ef9-8ee7-4659-88d9-f8c504da73cc")]
    [OleAutomation(False)]
    Interface IBindStatusCallbackEx Extends IBindStatusCallback
        Sub GetBindInfoEx(ByRef grfBINDF As BINDF, ByRef pbindinfo As BINDINFO, grdBIND2 As BINDF2, pdwReserved As Long)
    End Interface

    [InterfaceId("79EAC9D0-BAF9-11CE-8C82-00AA004BA90B")]
    [OleAutomation(False)]
    Interface IAuthenticate Extends stdole.IUnknown
        Sub Authenticate(ByRef phwnd As LongPtr, ByRef pszUsername As LongPtr, ByRef pszPassword As LongPtr)
    End Interface
    [InterfaceId("2ad1edaf-d83d-48b5-9adf-03dbe19f53bd")]
    [OleAutomation(False)]
    Interface IAuthenticateEx Extends IAuthenticate
        Sub AuthenticateEx(ByRef phwnd As LongPtr, ByRef pszUsername As LongPtr, ByRef pszPassword As LongPtr, pauthinfo As AUTHENTICATEINFO)
    End Interface

    [InterfaceId("79EAC9EC-BAF9-11CE-8C82-00AA004BA90B")]
    [OleAutomation(False)]
    Interface IInternetProtocolInfo Extends stdole.IUnknown
        Sub ParseUrl(ByVal pwzUrl As LongPtr, ByVal PARSEACTION As PARSEACTION, ByVal dwParseFlags As Long, ByVal pwzResult As LongPtr, ByVal cchResult As Long, ByRef pcchResult As Long, ByVal dwReserved As Long)
        Sub CombineUrl(ByVal pwzBaseUrl As LongPtr, ByVal pwzRelativeUrl As LongPtr, ByVal dwCombineFlags As Long, ByVal pwzResult As LongPtr, ByVal cchResult As Long, ByRef pcchResult As Long, ByVal dwReserved As Long)
        Sub CompareUrl(ByVal pwzUrl1 As LongPtr, ByVal pwzUrl2 As LongPtr, ByVal dwCompareFlags As Long)
        Sub QueryInfo(ByVal pwzUrl As LongPtr, ByVal OueryOption As QUERYOPTION, ByVal dwQueryFlags As Long, ByVal pBuffer As LongPtr, ByVal cbBuffer As Long, ByRef pcbBuf As Long, ByVal dwReserved As Long)
    End Interface

    [InterfaceId("79eac9f0-baf9-11ce-8c82-00aa004ba90b")]
    [OleAutomation(False)]
    Interface IInternetProtocolSinkStackable Extends IUnknown
    	Sub SwitchSink(ByVal pOIProtSink As IInternetProtocolSink)
        Sub CommitSwitch()
        Sub RollbackSwitch()
    End Interface


    [InterfaceId("79eac9e8-baf9-11ce-8c82-00aa004ba90b")]
    [OleAutomation(False)]
    Interface IInternetThreadSwitch Extends IUnknown
    	Sub Prepare()
        Sub Continue()
    End Interface

    [InterfaceId("79EAC9EB-BAF9-11CE-8C82-00AA004BA90B")]
    [OleAutomation(False)]
    Interface IInternetPriority Extends stdole.IUnknown
        Sub SetPriority(ByVal nPriority As Long)
        Sub GetPriority(ByRef pnPriority As Long)
    End Interface
    
    [InterfaceId("79EAC9E7-BAF9-11CE-8C82-00AA004BA90B")]
    [OleAutomation(False)]
    Interface IInternetSession Extends stdole.IUnknown
        Sub RegisterNameSpace(ByVal pCF As IClassFactory, ByRef rclsid As UUID, ByVal pwzProtocol As String, ByVal cPatterns As Long, ByRef ppwzPatterns As LongPtr, ByVal dwReserved As Long)
        Sub UnregisterNameSpace(ByVal pCF As IClassFactory, ByVal pszProtocol As LongPtr)
        Sub RegisterMimeFilter(ByVal pCF As IClassFactory, ByRef rclsid As UUID, ByVal pwzType As LongPtr)
        Sub UnregisterMimeFilter(ByVal pCF As IClassFactory, ByVal pwzType As LongPtr)
        Sub CreateBinding(ByVal pbc As IBindCtx, ByVal szURL As String, ByVal pUnkOuter As stdole.IUnknown, ByRef ppunk As stdole.IUnknown, ByRef ppOInetProt As IInternetProtocol, ByVal dwOption As Long)
        Sub SetSessionOption(ByVal dwOption As Long, ByRef pBuffer As Any, ByVal dwBufferLength As Long, Optional ByVal dwReserved As Long = 0)
        Sub GetSessionOption(ByVal dwOption As Long, ByRef pBuffer As Any, ByRef pdwBufferLength As Long, Optional ByVal dwReserved As Long = 0)
    End Interface

    [InterfaceId("79EAC9E3-BAF9-11CE-8C82-00AA004BA90B")]
    [OleAutomation(False)]
    Interface IInternetProtocolRoot Extends stdole.IUnknown
        Sub Start(ByVal szURL As LongPtr, ByVal pOIProtSink As IInternetProtocolSink, ByVal pOIBindInfo As IInternetBindInfo, ByVal grfPI As PI_FLAGS, ByRef dwReserved As PROTOCOLFILTERDATA)
        Sub Continue(ByRef pProtocolData As PROTOCOLDATA)
        Sub Abort(ByVal hrReason As Long, ByVal dwOptions As Long)
        Sub Terminate(ByVal dwOptions As Long)
        Sub Suspend()
        Sub Resume()
    End Interface

    [InterfaceId("79EAC9E4-BAF9-11CE-8C82-00AA004BA90B")]
    [OleAutomation(False)]
    Interface IInternetProtocol Extends IInternetProtocolRoot
        [PreserveSig]
        Function Read(ByVal pv As LongPtr, ByVal cb As Long, ByRef pcbRead As Long) As Long
        Sub Seek(ByVal dlibMove As LongLong, ByVal dwOrigin As Long, ByRef plibNewPosition As LongLong)
        Sub LockRequest(ByVal dwOptions As Long)
        Sub UnlockRequest()
    End Interface
    [InterfaceId("C7A98E66-1010-492c-A1C8-C809E1F75905")]
    Interface IInternetProtocolEx Extends IInternetProtocol
    	Sub StartEx(ByVal pUri As IUri, ByVal pOIProtSink As IInternetProtocolSink, ByVal pOIBindInfo As IInternetBindInfo, ByVal grfPI As PI_FLAGS, ByVal dwReserved As LongPtr)
    End Interface

    [InterfaceId("79EAC9E5-BAF9-11CE-8C82-00AA004BA90B")]
    [OleAutomation(False)]
    Interface IInternetProtocolSink Extends stdole.IUnknown
        Sub Switch(ByRef pProtocolData As PROTOCOLDATA)
        Sub ReportProgress(ByVal ulStatusCode As BINDSTATUS, ByVal szStatusText As String)
        Sub ReportData(ByVal grfBSCF As BSCF, ByVal ulProgress As Long, ByVal ulProgressMax As Long)
        Sub ReportResult(ByVal hrResult As Long, ByVal dwError As Long, ByVal szResult As String)
    End Interface
    
    [InterfaceId("79EAC9E1-BAF9-11CE-8C82-00AA004BA90B")]
    [OleAutomation(False)]
    Interface IInternetBindInfo Extends stdole.IUnknown
        Sub GetBindInfo(ByRef grfBINDF As Long, ByRef pbindinfo As BINDINFO)
        Sub GetBindString(ByVal ulStringType As Long, ByRef ppwzStr As LongPtr, ByVal cEl As Long, ByRef pcElFetched As Long)
    End Interface

    [InterfaceId("79EAC9CD-BAF9-11CE-8C82-00AA004BA90B")]
    [OleAutomation(False)]
    Interface IBindProtocol Extends stdole.IUnknown
        Function CreateBinding(ByVal szURL As LongPtr, ByVal pbc As IBindCtx) As IBinding
    End Interface

    [InterfaceId("79EAC9D2-BAF9-11CE-8C82-00AA004BA90B")]
    [OleAutomation(False)]
    Interface IHttpNegotiate Extends stdole.IUnknown
        Sub BeginningTransaction(ByVal szURL As LongPtr, ByVal szHeaders As LongPtr, ByVal dwReserved As Long, ByRef pszAdditionalHeaders As LongPtr)
        Sub OnResponse(ByVal dwResponseCode As Long, ByVal szResponseHeaders As LongPtr, ByVal szRequestHeaders As LongPtr, ByRef pszAdditionalRequestHeaders As LongPtr)
    End Interface
    [InterfaceId("4F9F9FCB-E0F4-48EB-B7AB-FA2EA9365CB4")]
    [OleAutomation(False)]
    Interface IHttpNegotiate2 Extends IHttpNegotiate
        Sub GetRootSecurityId(ByRef pbSecurityId As Byte, ByRef pcbSecurityId As Long, ByVal dwReserved As LongPtr)
    End Interface
    [InterfaceId("57b6c80a-34c2-4602-bc26-66a02fc57153")]
    Interface IHttpNegotiate3 Extends IHttpNegotiate2
        Sub GetSerializedClientCertContext(ppbCert As LongPtr, pcbCert As Long)
    End Interface
    
    
    
    [InterfaceId("79EAC9D5-BAFA-11CE-8C82-00AA004BA90B")]
    [OleAutomation(False)]
    Interface IWindowForBindingUI Extends stdole.IUnknown
        Function GetWindow(ByRef rguidReason As UUID) As LongPtr
    End Interface
    
    [InterfaceId("79eac9d1-baf9-11ce-8c82-00aa004ba90b")]
    Interface ICodeInstall Extends IWindowForBindingUI
    	Sub OnCodeInstallProblem(ByVal ulStatusCode As CIP_STATUS, ByVal szDestination As LongPtr, ByVal szSource As LongPtr, ByVal dwReserved As Long)
    End Interface


    [InterfaceId("F134C4B7-B1F8-4e75-B886-74B90943BECB")]
    Interface IWinInetFileStream Extends IUnknown
    	Sub SetHandleForUnlock(ByVal SetHandleForUnlock As LongPtr, ByVal dwReserved As LongPtr)
        Sub SetDeleteFile(ByVal dwReserved As LongPtr)
    End Interface


    [InterfaceId("79EAC9D6-BAFA-11CE-8C82-00AA004BA90B")]
    [OleAutomation(False)]
    Interface IWinInetInfo Extends stdole.IUnknown
        [PreserveSig]
        Function QueryOption(ByVal dwOption As QUERYOPTION, ByRef pBuffer As Any, ByRef pcbBuf As Long) As Long
    End Interface

    [InterfaceId("79EAC9D8-BAFA-11CE-8C82-00AA004BA90B")]
    [OleAutomation(False)]
    Interface IWinInetHttpInfo Extends IWinInetInfo
        [PreserveSig]
        Function QueryInfo(ByVal dwOption As HTTP_QUERY, ByRef pBuffer As Any, ByRef pcbBuf As Long, ByRef pdwFlags As Long, ByRef pdwReserved As Long) As Long
    End Interface

    [InterfaceId("FC4801A1-2BA9-11CF-A229-00AA003D7352")]
    [OleAutomation(False)]
    Interface IBindHost Extends stdole.IUnknown
        Sub CreateMoniker(ByVal szName As LongPtr, ByVal pbc As IBindCtx, ByRef ppmk As IMoniker, ByVal dwReserved As Long)
        Sub MonikerBindToStorage(ByVal pmk As IMoniker, ByVal pbc As IBindCtx, ByVal pbsc As IBindStatusCallback, ByRef riid As UUID, ByRef ppvObj As LongPtr)
        Sub MonikerBindToObject(ByVal pmk As IMoniker, ByVal pbc As IBindCtx, ByVal pbsc As IBindStatusCallback, ByRef riid As UUID, ByRef ppvObj As LongPtr)
    End Interface


    [InterfaceId("79EAC9D7-BAFA-11CE-8C82-00AA004BA90B")]
    [OleAutomation(False)]
    Interface IHttpSecurity Extends stdole.IUnknown
        Sub GetWindow(ByRef rguidReason As UUID, ByRef phwnd As LongPtr)
        Sub OnSecurityProblem(ByVal dwProblem As Long)
    End Interface
        
    [InterfaceId("FBF23B80-E3F0-101B-8488-00AA003E56F8")]
    [Description("IuniformResourceLocator - ANSI version")]
    [OleAutomation(False)]
    Interface IUniformResourceLocatorA Extends stdole.IUnknown
        [Description("Sets an object's URL")]
        Sub SetUrl(ByVal pcszURL As String, ByVal dwInFlags As IURL_SETURL_FLAGS)
        [Description("Gets an object's URL")]
        Function GetUrl() As LongPtr
        [Description("Invokes a command on an object's URL.")]
        Sub InvokeCommand(ByRef purlici As URLINVOKECOMMANDINFO)
    End Interface

    [InterfaceId("CABB0DA0-DA57-11CF-9974-0020AFD79762")]
    [Description("IUniformResourceLocator - Unicode version")]
    [OleAutomation(False)]
    Interface IUniformResourceLocatorW Extends stdole.IUnknown
        [Description("Sets an object's URL")]
        Sub SetUrl(ByVal pcszURL As String, ByVal dwInFlags As IURL_SETURL_FLAGS)
        [Description("Gets an object's URL")]
        Function GetUrl() As LongPtr
        [Description("Invokes a command on an object's URL.")]
        Sub InvokeCommand(ByRef purlici As URLINVOKECOMMANDINFO)
    End Interface

    [InterfaceId("3C374A42-BAE4-11CF-BF7D-00AA006946EE")]
    [Description("Enumerates the cached URLs")]
    [OleAutomation(False)]
    Interface IEnumSTATURL Extends stdole.IUnknown
        [PreserveSig]
        [Description("Returns the next celt URLS from the cache")]
        Function Next(ByVal celt As Long, ByRef rgelt As STATURL, Optional ByRef pceltFetched As Long = 0) As Long
        [Description("Skips the next celt URLS from the cache")]
        Sub Skip(ByVal celt As Long)
        [Description("Resets the enumeration")]
        Sub Reset()
        [Description("Clones this object")]
        Function Clone() As IEnumSTATURL
        [Description("Sets the enumeration filter")]
        Sub SetFilter(ByVal poszFilter As String, ByVal dwFlags As STATURL_QUERYFLAGS)
    End Interface

    [InterfaceId("3C374A41-BAE4-11CF-BF7D-00AA006946EE")]
    [OleAutomation(False)]
    Interface IUrlHistoryStg Extends stdole.IUnknown
        [Description("Adds a new history entry")]
        Sub AddURL(ByVal pocsUrl As String, ByVal pocsTitle As String, ByVal dwFlags As STATURLFLAGS)
        [Description("Deletes an entry by its URL")]
        Sub DeleteUrl(ByVal pocsUrl As String, ByVal dwFlags As Long)
        [Description("Returns a STATURL for a given URL")]
        Sub QueryUrl(ByVal pocsUrl As String, ByVal dwFlags As Long, ByRef lpSTATURL As STATURL)
        [Description("Binds to an object")]
        Sub BindToObject(ByVal pocsUrl As String, ByRef riid As UUID, ByRef ppvOut As Any)
        [Description("Returns an enumerator for URLs")]
        Function EnumUrls() As IEnumSTATURL
    End Interface

    [InterfaceId("AFA0DC11-C313-11D0-831A-00C04FD5AE38")]
    [OleAutomation(False)]
    Interface IUrlHistoryStg2 Extends IUrlHistoryStg
        [Description("Adds an URLS IOleCommandTarget *poctNotify IShellFolder *punkISFolder")]
        Sub AddUrlAndNotify(ByVal pocsUrl As String, ByVal pocsTitle As String, ByVal dwFlags As Long, ByVal fWriteHistory As Long, ByVal poctNotify As stdole.IUnknown, ByVal punkISFolder As stdole.IUnknown)
        [Description("Removes all history items")]
        Sub ClearHistory()
    End Interface
    
    [InterfaceId("AC60F6A0-0FD9-11D0-99CB-00C04FD64497")]
    [OleAutomation(False)]
    Interface IURLSearchHook Extends stdole.IUnknown
        Sub Translate(ByVal lpwszSearchURL As LongPtr, ByVal cchBufferSize As Long)
    End Interface

    [InterfaceId("09F656A2-41AF-480C-88F7-16CC0D164615")]
    [OleAutomation(False)]
    Interface ISearchContext Extends stdole.IUnknown
        Sub GetSearchUrl(ByRef pbstrSearchUrl As String)
        Sub GetSearchText(ByRef pbstrSearchText As String)
        Sub GetSearchStyle(ByRef pdwSearchStyle As Long)
    End Interface

    [InterfaceId("5EE44DA4-6D32-46E3-86BC-07540DEDD0E0")]
    [OleAutomation(False)]
    Interface IURLSearchHook2 Extends stdole.IUnknown
        Sub Translate(ByVal lpwszSearchURL As LongPtr, ByVal cchBufferSize As Long)
        Sub TranslateWithSearchContext(ByVal lpwszSearchURL As LongPtr, ByVal cchBufferSize As Long, ByVal pSearchContext As ISearchContext)
    End Interface
    
    [InterfaceId("79EAC9C3-BAF9-11CE-8C82-00AA004BA90B")]
    [OleAutomation(False)]
    Interface IHlink Extends stdole.IUnknown
        Sub SetHlinkSite(ByVal pihlSite As IHlinkSite, ByVal dwSiteData As Long)
        Sub GetHlinkSite(ByRef ppihlSite As IHlinkSite, ByRef pdwSiteData As Long)
        Sub SetMonikerReference(ByVal grfHLSETF As HLINKSETF, ByVal pimkTarget As IMoniker, ByVal pwzLocation As String)
        Sub GetMonikerReference(ByVal dwWhichRef As HLINKGETREF, ByRef ppimkTarget As IMoniker, ByRef ppwzLocation As LongPtr)
        Sub SetStringReference(ByVal grfHLSETF As HLINKSETF, ByVal pwzTarget As String, ByVal pwzLocation As String)
        Sub GetStringReference(ByVal dwWhichRef As HLINKGETREF, ByRef ppwzTarget As LongPtr, ByRef ppwzLocation As LongPtr)
        Sub SetFriendlyName(ByVal pwzFriendlyName As String)
        Function GetFriendlyName(ByVal grfHLFNAMEF As HLFNAMEF) As LongPtr
        Sub SetTargetFrameName(ByVal pwzTargetFrameName As String)
        Function GetTargetFrameName() As LongPtr
        Function GetMiscStatus() As HLINKMISC
        Sub Navigate(ByVal grfHLNF As HLNF, ByVal pibc As IBindCtx, ByVal pibsc As IBindStatusCallback, ByVal pihlbc As IHlinkBrowseContext)
        Sub SetAdditionalParams(ByVal pwzAdditionalParams As String)
        Function GetAdditionalParams() As LongPtr
    End Interface

    [InterfaceId("79EAC9C2-BAF9-11CE-8C82-00AA004BA90B")]
    [OleAutomation(False)]
    Interface IHlinkSite Extends stdole.IUnknown
        Sub QueryService(ByVal dwSiteData As Long, ByRef guidService As UUID, ByRef riid As UUID, ByRef ppiunk As Any)
        Function GetMoniker(ByVal dwSiteData As Long, ByVal dwAssign As OLEGETMONIKER, ByVal dwWhich As OLEWHICHMK) As IMoniker
        Sub ReadyToNavigate(ByVal dwSiteData As Long, ByVal dwReserved As Long)
        Sub OnNavigationComplete(ByVal dwSiteData As Long, ByVal dwReserved As Long, ByVal hrError As Long, ByVal pwzError As LongPtr)
    End Interface

    [InterfaceId("79EAC9C4-BAF9-11CE-8C82-00AA004BA90B")]
    [OleAutomation(False)]
    Interface IHlinkTarget Extends stdole.IUnknown
        Sub SetBrowseContext(ByVal pihlbc As IHlinkBrowseContext)
        Function GetBrowseContext() As IHlinkBrowseContext
        Sub Navigate(ByVal grfHLNF As HLNF, ByVal pwzJumpLocation As String)
        Function GetMoniker(ByVal pwzLocation As String, ByVal dwAssign As OLEGETMONIKER) As IMoniker
        Function GetFriendlyName(ByVal pwzLocation As String) As LongPtr
    End Interface

    [InterfaceId("79EAC9C5-BAF9-11CE-8C82-00AA004BA90B")]
    [OleAutomation(False)]
    Interface IHlinkFrame Extends stdole.IUnknown
        Sub SetBrowseContext(ByVal pihlbc As IHlinkBrowseContext)
        Function GetBrowseContext() As IHlinkBrowseContext
        Sub Navigate(ByVal grfHLNF As HLNF, ByVal pbc As IBindCtx, ByVal pibsc As IBindStatusCallback, ByVal pihlNavigate As IHlink)
        Sub OnNavigate(ByVal grfHLNF As HLNF, ByVal pimkTarget As IMoniker, ByVal pwzLocation As String, ByVal pwzFriendlyName As String, ByVal dwReserved As Long)
        Sub UpdateHlink(ByVal uHLID As Long, ByVal pimkTarget As IMoniker, ByVal pwzLocation As String, ByVal pwzFriendlyName As String)
    End Interface

    [InterfaceId("79EAC9C6-BAF9-11CE-8C82-00AA004BA90B")]
    [OleAutomation(False)]
    Interface IEnumHLITEM Extends stdole.IUnknown
        [PreserveSig]
        Function Next(ByVal celt As Long, ByRef rgelt As HLITEM, ByRef pceltFetched As Long) As Long
        Sub Skip(ByVal celt As Long)
        Sub Reset()
        Function Clone() As IEnumHLITEM
    End Interface
    
    [InterfaceId("79EAC9C7-BAF9-11CE-8C82-00AA004BA90B")]
    [OleAutomation(False)]
    Interface IHlinkBrowseContext Extends stdole.IUnknown
        Sub Register(ByVal reserved As Long, ByVal piunk As stdole.IUnknown, ByVal pimk As IMoniker, ByRef pdwRegister As Long)
        Sub GetObject(ByVal pimk As IMoniker, ByVal fBindIfRootRegistered As Long, ByRef ppiunk As stdole.IUnknown)
        Sub Revoke(ByVal dwRegister As Long)
        Sub SetBrowseWindowInfo(ByRef phlbwi As HLBWINFO)
        Sub GetBrowseWindowInfo(ByRef phlbwi As HLBWINFO)
        Sub SetInitialHlink(ByVal pimkTarget As IMoniker, ByVal pwzLocation As LongPtr, ByVal pwzFriendlyName As LongPtr)
        Function OnNavigateHlink(ByVal grfHLNF As HLNF, ByVal pimkTarget As IMoniker, ByVal pwzLocation As LongPtr, ByVal pwzFriendlyName As LongPtr) As HLID
        Sub UpdateHlink(ByVal uHLID As HLID, ByVal pimkTarget As IMoniker, ByVal pwzLocation As LongPtr, ByVal pwzFriendlyName As LongPtr)
        Sub EnumNavigationStack(ByVal dwReserved As Long, ByVal grfHLFNAMEF As HLFNAMEF, ByRef ppienumhlitem As IEnumHLITEM)
        Sub QueryHlink(ByVal grfHLQF As HLQF, ByVal uHLID As HLID)
        Sub GetHlink(ByVal uHLID As HLID, ByRef ppihl As IHlink)
        Sub SetCurrentHlink(ByVal uHLID As HLID)
        Sub Clone(ByVal piunkOuter As stdole.IUnknown, ByRef riid As UUID, ByRef ppiunkObj As Long)
        Sub Close(ByVal reserved As Long)
    End Interface
    
        
'CLSID_InternetZoneManager 
[CoClassId("7b8a2d95-0ac9-11d1-896c-00c04Fb6bfc4")]
CoClass InternetZoneManager
	 [Default] Interface IInternetZoneManager
End CoClass

'CLSID_InternetSecurityManager 
[CoClassId("7b8a2d94-0ac9-11d1-896c-00c04fb6bfc4")]
CoClass InternetSecurityManager
	 [Default] Interface IInternetSecurityManager
End CoClass

'CLSID_PersistentZoneIdentifier 
[CoClassId("0968E258-16C7-4DBA-AA86-462DD61E31A3")]
CoClass PersistentZoneIdentifier
	 [Default] Interface IZoneIdentifier
End CoClass

'CLSID_UrlHistory 
[CoClassId("3C374A40-BAE4-11CF-BF7D-00AA006946EE")]
CoClass UrlHistory
	 [Default] Interface IUrlHistoryStg2
     Interface IUrlHistoryStg
End CoClass
'CLSID_CUrlHistory 
[CoClassId("3C374A40-BAE4-11CF-BF7D-00AA006946EE")]
CoClass CUrlHistory
     [Default] Interface IUrlHistoryStg2
     Interface IUrlHistoryStg
End CoClass
'CLSID_InternetShortcut
[CoClassId("FBF23B40-E3F0-101B-8488-00AA003E56F8")]
CoClass InternetShortcut
    [Default] Interface IUniformResourceLocatorW
    Interface IUniformResourceLocatorA
    Interface IPersistFile
    Interface IPersistStream
    Interface IDataObject
    Interface IOleCommandTarget
    Interface IPropertySetStorage
    Interface IObjectWithSite
    Interface IContextMenu2
    Interface IExtractIconW
    Interface IExtractIconA
    Interface INewShortcutHookA
    Interface INewShortcutHookW
    Interface IShellExtInit
    #If WINDEVLIB_LITE = 0 Then
    Interface IShellPropSheetExt
    #End If
    Interface IQueryInfo
End CoClass


'Network List Manager

[InterfaceId("DCB00002-570F-4A9B-8D69-199FDBA5723B")]
[OleAutomation(True)]
'[ Dual ]
Interface INetwork Extends IDispatch
    [DispId(1)] Function GetName() As String
    [DispId(2)] Sub SetName(ByVal szNetworkNewName As String)
    [DispId(3)] Function GetDescription() As String
    [DispId(4)] Sub SetDescription(ByVal szDescription As String)
    [DispId(5)] Function GetNetworkId() As UUID
    [DispId(6)] Function GetDomainType() As NLM_DOMAIN_TYPE
    [DispId(7)] Function GetNetworkConnections() As IEnumNetworkConnections
    [DispId(8)] Sub GetTimeCreatedAndConnected(pdwLowDateTimeCreated As Long, pdwHighDateTimeCreated As Long, pdwLowDateTimeConnected As Long, pdwHighDateTimeConnected As Long)
    [DispId(0)] Function IsConnectedToInternet() As Boolean
    [DispId(10)] Function IsConnected() As Boolean
    [DispId(11)] Function GetConnectivity() As NLM_CONNECTIVITY
    [DispId(12)] Function GetCategory() As NLM_NETWORK_CATEGORY
    [DispId(13)] Sub	SetCategory(ByVal NewCategory As NLM_NETWORK_CATEGORY)
End Interface
[InterfaceId("B5550ABB-3391-4310-804F-25DCC325ED81")]
[OleAutomation(True)]
'[ Dual ]
Interface INetwork2 Extends INetwork
	[DispId(14)] Function IsDomainAuthenticatedBy(ByVal domainAuthenticationKind As NLM_DOMAIN_AUTHENTICATION_KIND) As BOOL
End Interface

[InterfaceId("DCB00003-570F-4A9B-8D69-199FDBA5723B")]
[OleAutomation(True)]
'[ Dual ]
Interface IEnumNetworks Extends IDispatch
    [DispId(-4), Hidden, Restricted] Function _NewEnum() As IEnumVARIANT
    [DispId(1), PreserveSig] Function Next(ByVal celt As Long, rgelt As INetwork, pceltFetched As Long) As Long
    [DispId(2)] Sub Skip(ByVal celt As Long)
    [DispId(3)] Sub Reset()
    [DispId(4)] Function Clone() As IEnumNetworks
End Interface

[InterfaceId("DCB00004-570F-4A9B-8D69-199FDBA5723B")]
[OleAutomation(True)]
[Description("📝**NOTE:** With 32bit code, this takes a ByVal GUID that must be split into 4 Longs until tB supports it properly.")]
Interface INetworkEvents Extends stdole.IUnknown
    #If Win64 Then
    Sub NetworkAdded(networkId As UUID)
    Sub NetworkDeleed(networkId As UUID)
    Sub NetworkConnectivityChanged(networkId As UUID, ByVal newConnectivity As NLM_CONNECTIVITY)
    Sub NetworkPropertyChanged(networkId As UUID, ByVal newConnectivity As NLM_CONNECTIVITY, ByVal Flags As NLM_NETWORK_PROPERTY_CHANGE)
    #Else
    Sub NetworkAdded(ByVal networkId1 As Long, ByVal networkId2 As Long, ByVal networkId3 As Long, ByVal networkId4 As Long)
    Sub NetworkDeleted(ByVal networkId1 As Long, ByVal networkId2 As Long, ByVal networkId3 As Long, ByVal networkId4 As Long)
    Sub NetworkConnectivityChanged(ByVal networkId1 As Long, ByVal networkId2 As Long, ByVal networkId3 As Long, ByVal networkId4 As Long, ByVal newConnectivity As NLM_CONNECTIVITY)
    Sub NetworkPropertyChanged(ByVal networkId1 As Long, ByVal networkId2 As Long, ByVal networkId3 As Long, ByVal networkId4 As Long, ByVal newConnectivity As NLM_CONNECTIVITY, ByVal Flags As NLM_NETWORK_PROPERTY_CHANGE)
    #End If
End Interface

[InterfaceId("DCB00005-570F-4A9B-8D69-199FDBA5723B")]
[OleAutomation(True)]
'[ Dual ]
Interface INetworkConnection Extends IDispatch
    [DispId(1)] Function GetNetwork() As INetwork
    [DispId(2)] Property Get IsConnectedToInternet() As Boolean
    [DispId(3)] Property Get IsConnected() As Boolean
    [DispId(4)] Function GetConnectivity() As NLM_CONNECTIVITY
    [DispId(5)] Function GetConnectionId() As UUID
    [DispId(6)] Function GetAdapterId() As UUID
    [DispId(7)] Function GetDomainType() As NLM_DOMAIN_TYPE
End Interface
[InterfaceId("00E676ED-5A35-4738-92EB-8581738D0F0A")]
[OleAutomation(True)]
'[ Dual ]
Interface INetworkConnection2 Extends INetworkConnection
    [DispId(8)] Function IsDomainAuthenticatedBy(ByVal domainAuthenticationKind As NLM_DOMAIN_AUTHENTICATION_KIND) As BOOL
End Interface

[InterfaceId("DCB00006-570F-4A9B-8D69-199FDBA5723B")]
[OleAutomation(True)]
'[ Dual ]
[Description("📝**NOTE:** With 32bit code, this takes a ByVal GUID that must be split into 4 Longs until tB supports it properly.")]
Interface IEnumNetworkConnections Extends IDispatch
    [DispId(-4), Hidden, Restricted] Function _NewEnum() As IEnumVARIANT
    [DispId(1), PreserveSig] Function Next(ByVal celt As Long, rgelt As INetworkConnection, pceltFetched As Long) As Long
    [DispId(2)] Sub Skip(ByVal celt As Long)
    [DispId(3)] Sub Reset()
    [DispId(4)] Function Clone() As IEnumNetworkConnections
End Interface

[InterfaceId("DCB00007-570F-4A9B-8D69-199FDBA5723B")]
[OleAutomation(True)]
Interface INetworkConnectionEvents Extends stdole.IUnknown
    #If Win64 Then
    Sub NetworkConnectivityChanged(connectionId As UUID, ByVal newConnectivity As NLM_CONNECTIVITY)
    Sub NetworkPropertyChanged(connectionId As UUID, ByVal Flags As NLM_CONNECTION_PROPERTY_CHANGE)
    #Else
    Sub NetworkConnectionConnectivityChanged(ByVal connectionId1 As Long, ByVal connectionId2 As Long, ByVal connectionId3 As Long, ByVal connectionId4 As Long, ByVal newConnectivity As NLM_CONNECTIVITY)
    Sub NetworkConnectionPropertyChanged(ByVal connectionId1 As Long, ByVal connectionId2 As Long, ByVal connectionId3 As Long, ByVal connectionId4 As Long, ByVal Flags As NLM_CONNECTION_PROPERTY_CHANGE)
    #End If
End Interface

[InterfaceId("DCB00008-570F-4A9B-8D69-199FDBA5723B")]
[OleAutomation(False)]
Interface INetworkCostManager Extends stdole.IUnknown
    [DispId(1)] Sub GetCost(pCost As Long, pDestIPAddr As NLM_SOCKADDR)
    [DispId(2)] Sub GetDataPlanStatus(pDataPlanStatus As NLM_DATAPLAN_STATUS, pDestIPAddr As NLM_SOCKADDR)
    [DispId(3)] Sub SetDestinationAddresses(ByVal Length As Long, pDestIPAddrList As NLM_SOCKADDR, ByVal bAppend As Boolean)
End Interface

[InterfaceId("DCB00009-570F-4A9B-8D69-199FDBA5723B")]
[OleAutomation(False)]
Interface INetworkCostManagerEvents Extends stdole.IUnknown
    Sub CostChanged(ByVal newCost As Long, pDestAddr As NLM_SOCKADDR)
    Sub DataPlanStatusChanged(pDestAddr As NLM_SOCKADDR)
End Interface

[InterfaceId("DCB0000a-570F-4A9B-8D69-199FDBA5723B")]
[OleAutomation(False)]
Interface INetworkConnectionCost Extends stdole.IUnknown
    [DispId(1)] Sub GetCost(pCost As Long)
    [DispId(2)] Sub GetDataPlanStatus(pDataPlanStatus As NLM_DATAPLAN_STATUS)
End Interface

[InterfaceId("DCB0000b-570F-4A9B-8D69-199FDBA5723B")]
[OleAutomation(False)]
Interface INetworkConnectionCostEvents Extends stdole.IUnknown
    #If Win64 Then
    Sub ConnectionCostChanged(connectionId As UUID, ByVal newCost As Long)
    Sub ConnectionDataPlanStatusChanged(connectionId As UUID)
    #Else
    Sub ConnectionCostChanged(ByVal connectionId1 As Long, ByVal connectionId2 As Long, ByVal connectionId3 As Long, ByVal connectionId4 As Long, ByVal newCost As Long)
    Sub ConnectionDataPlanStatusChanged(ByVal connectionId1 As Long, ByVal connectionId2 As Long, ByVal connectionId3 As Long, ByVal connectionId4 As Long)
    #End If
End Interface


[InterfaceId("DCB00000-570F-4A9B-8D69-199FDBA5723B")]
[OleAutomation(True)]
'[ Dual ]
[Description("📝**NOTE:** With 32bit code, this takes a ByVal GUID that must be split into 4 Longs until tB supports it properly.")]
Interface INetworkListManager Extends IDispatch
	[DispId(1)]
    Function GetNetworks(ByVal Flags As NLM_ENUM_NETWORK) As IEnumNetworks
    [DispId(2)]
    #If Win64 Then
    Function GetNetwork(gdNetworkId As UUID) As INetwork
    #Else
    Function GetNetwork(ByVal gdNetworkId1 As Long, ByVal gdNetworkId2 As Long, ByVal gdNetworkId3 As Long, ByVal gdNetworkId4 As Long) As INetwork
    #End If
    [DispId(3)]
    Function GetNetworkConnections() As IEnumNetworkConnections
    [DispId(4)]
    #If Win64 Then
    Function GetNetworkConnection(gdNetworkConnectionId As UUID) As INetwork
    #Else
    Function GetNetworkConnection(ByVal gdNetworkConnectionId1 As Long, ByVal gdNetworkConnectionId2 As Long, ByVal gdNetworkConnectionId3 As Long, ByVal gdNetworkConnectionId4 As Long) As INetworkConnection
    #End If
    [DispId(5)]
    Property Get IsConnectedToInternet() As Boolean
    [DispId(6)]
    Property Get IsConnected() As Boolean
    [DispId(7)]
    Function GetConnectivity() As NLM_CONNECTIVITY
    [DispId(8)]
    Sub SetSimulatedProfileInfo(pSimulatedInfo As NLM_SIMULATED_PROFILE_INFO)
    [DispId(9)]
    Sub ClearSimulatedProfileInfo()
End Interface

[InterfaceId("DCB00001-570F-4A9B-8D69-199FDBA5723B")]
[OleAutomation(True)]
Interface INetworkListManagerEvents Extends IUnknown
	Sub ConnectivityChanged(ByVal newConnectivity As NLM_CONNECTIVITY)
End Interface

'CLSID_NetworkListManager
[CoClassId("DCB00C01-570F-4A9B-8D69-199FDBA5723B")]
CoClass NetworkListManager
    [Default] Interface INetworkListManager
    Interface INetworkCostManager
    [Default, Source] Interface INetworkEvents
    [Source] Interface INetworkConnectionEvents
    [Source] Interface INetworkListManagerEvents
    [Source] Interface INetworkCostManagerEvents
    [Source] Interface INetworkConnectionCostEvents
    Interface IPropertyBag
    Interface INetwork
    Interface INetwork2
    Interface IEnumNetworks
    Interface INetworkConnection
    Interface INetworkConnection2
    Interface IEnumNetworkConnections
End CoClass

#End Region

Module wdInternet

Public Const MAX_PROFILENAME_LENGTH = 256
Public Const NLM_MAX_ADDRESS_LIST_SIZE = 10
' default value for unavailable field in data plan status structure
Public Const NLM_UNKNOWN_DATAPLAN_STATUS = &HFFFFFFFF

Public Const NA_DomainAuthenticationFailed  = "NA_DomainAuthenticationFailed"
Public Const NA_NetworkClass  = "NA_NetworkClass"
Public Const NA_NameSetByPolicy  = "NA_NameSetByPolicy"
Public Const NA_IconSetByPolicy  = "NA_IconSetByPolicy"
Public Const NA_DescriptionSetByPolicy  = "NA_DescriptionSetByPolicy"
Public Const NA_CategorySetByPolicy  = "NA_CategorySetByPolicy"
Public Const NA_NameReadOnly  = "NA_NameReadOnly"
Public Const NA_IconReadOnly  = "NA_IconReadOnly"
Public Const NA_DescriptionReadOnly  = "NA_DescriptionReadOnly"
Public Const NA_CategoryReadOnly  = "NA_CategoryReadOnly"
Public Const NA_AllowMerge  = "NA_AllowMerge"
Public Const NA_InternetConnectivityV4 = "NA_InternetConnectivityV4"
Public Const NA_InternetConnectivityV6 = "NA_InternetConnectivityV6"

Public Enum UriGetPropertyFlags
    Uri_HAS_ABSOLUTE_URI = (1 << Uri_PROPERTY_ABSOLUTE_URI)
    Uri_HAS_AUTHORITY = (1 << Uri_PROPERTY_AUTHORITY)
    Uri_HAS_DISPLAY_URI = (1 << Uri_PROPERTY_DISPLAY_URI)
    Uri_HAS_DOMAIN = (1 << Uri_PROPERTY_DOMAIN)
    Uri_HAS_EXTENSION = (1 << Uri_PROPERTY_EXTENSION)
    Uri_HAS_FRAGMENT = (1 << Uri_PROPERTY_FRAGMENT)
    Uri_HAS_HOST = (1 << Uri_PROPERTY_HOST)
    Uri_HAS_PASSWORD = (1 << Uri_PROPERTY_PASSWORD)
    Uri_HAS_PATH = (1 << Uri_PROPERTY_PATH)
    Uri_HAS_QUERY = (1 << Uri_PROPERTY_QUERY)
    Uri_HAS_RAW_URI = (1 << Uri_PROPERTY_RAW_URI)
    Uri_HAS_SCHEME_NAME = (1 << Uri_PROPERTY_SCHEME_NAME)
    Uri_HAS_USER_NAME = (1 << Uri_PROPERTY_USER_NAME)
    Uri_HAS_PATH_AND_QUERY = (1 << Uri_PROPERTY_PATH_AND_QUERY)
    Uri_HAS_USER_INFO = (1 << Uri_PROPERTY_USER_INFO)
    Uri_HAS_HOST_TYPE = (1 << Uri_PROPERTY_HOST_TYPE)
    Uri_HAS_PORT = (1 << Uri_PROPERTY_PORT)
    Uri_HAS_SCHEME = (1 << Uri_PROPERTY_SCHEME)
    Uri_HAS_ZONE = (1 << Uri_PROPERTY_ZONE)
End Enum

Public Enum UriPropertyFlags
    Uri_DISPLAY_NO_FRAGMENT = &H00000001  ' Exclude fragment from the DisplayUri, if one exists
    Uri_PUNYCODE_IDN_HOST = &H00000002  ' Show the hostname encoded as punycode inside the Host, Domain, or AbsoluteUri properties, if the Uri is IDN
    Uri_DISPLAY_IDN_HOST = &H00000004  ' Show the hostname encoded as punycode or Unicode as it would appear in the DisplayUri property. This applies to the Host, Domain, and AbsoluteUri properties.
    Uri_DISPLAY_NO_PUNYCODE = &H00000008  ' Show the hostname encoded as Unicode from the DisplayUri, if the Uri is IDN
End Enum

Public Enum NLM_CONNECTION_COST
    ' cost level
    NLM_CONNECTION_COST_UNKNOWN = &H0
    NLM_CONNECTION_COST_UNRESTRICTED = &H1
    NLM_CONNECTION_COST_FIXED = &H2
    NLM_CONNECTION_COST_VARIABLE = &H4
    ' cost flags
    NLM_CONNECTION_COST_OVERDATALIMIT = &H10000
    NLM_CONNECTION_COST_CONGESTED = &H20000
    NLM_CONNECTION_COST_ROAMING = &H40000
    NLM_CONNECTION_COST_APPROACHINGDATALIMIT = &H80000
End Enum

Public Type NLM_USAGE_DATA
    UsageInMegabytes As Long
    LastSyncTime As FILETIME
End Type

Public Type NLM_DATAPLAN_STATUS
    InterfaceGuid As UUID
    UsageData As NLM_USAGE_DATA
    DataLimitInMegabytes As Long
    InboundBandwidthInKbps As Long
    OutboundBandwidthInKbps As Long
    NextBillingCycle As FILETIME
    MaxTransferSizeInMegabytes As Long
    Reserved As Long
End Type

Public Type NLM_SOCKADDR
    data(0 To 127) As Byte ' Big enough storage to store SOCKADDR_STORAGE
End Type

Public Enum NLM_NETWORK_CLASS
    NLM_NETWORK_IDENTIFYING = &H01
    NLM_NETWORK_IDENTIFIED = &H02
    NLM_NETWORK_UNIDENTIFIED = &H03
End Enum

Public Type NLM_SIMULATED_PROFILE_INFO
    ProfileName(0 To 255) As Integer
    cost As NLM_CONNECTION_COST
    UsageInMegabytes As Long
    DataLimitInMegabytes As Long
End Type

Public Enum NLM_INTERNET_CONNECTIVITY
    '  This interface/family is unable to access the Internet due to HTTP hijacking
    NLM_INTERNET_CONNECTIVITY_WEBHIJACK = &H01
    '  This interface/family is using a web proxy to communicated with the Internet
    NLM_INTERNET_CONNECTIVITY_PROXIED = &H02
    '  This interface/family has corporate network access
    NLM_INTERNET_CONNECTIVITY_CORPORATE = &H04
End Enum

Public Enum NLM_CONNECTIVITY
    NLM_CONNECTIVITY_DISCONNECTED = &H0000
    NLM_CONNECTIVITY_IPV4_NOTRAFFIC = &H0001
    NLM_CONNECTIVITY_IPV6_NOTRAFFIC = &H0002
    NLM_CONNECTIVITY_IPV4_SUBNET = &H0010
    NLM_CONNECTIVITY_IPV4_LOCALNETWORK = &H0020
    NLM_CONNECTIVITY_IPV4_INTERNET = &H0040
    NLM_CONNECTIVITY_IPV6_SUBNET = &H0100
    NLM_CONNECTIVITY_IPV6_LOCALNETWORK = &H0200
    NLM_CONNECTIVITY_IPV6_INTERNET = &H0400
End Enum

Public Enum NLM_DOMAIN_TYPE
    NLM_DOMAIN_TYPE_NON_DOMAIN_NETWORK = &H0
    NLM_DOMAIN_TYPE_DOMAIN_NETWORK = &H01
    NLM_DOMAIN_TYPE_DOMAIN_AUTHENTICATED = &H02
End Enum

Public Enum NLM_DOMAIN_AUTHENTICATION_KIND
    NLM_DOMAIN_AUTHENTICATION_KIND_NONE = &H0
    NLM_DOMAIN_AUTHENTICATION_KIND_LDAP = &H01
    NLM_DOMAIN_AUTHENTICATION_KIND_TLS = &H02
End Enum

Public Enum NLM_ENUM_NETWORK
    NLM_ENUM_NETWORK_CONNECTED = &H01
    NLM_ENUM_NETWORK_DISCONNECTED = &H02
    NLM_ENUM_NETWORK_ALL = &H03
End Enum

Public Enum NLM_NETWORK_CATEGORY
    NLM_NETWORK_CATEGORY_PUBLIC = &H00
    NLM_NETWORK_CATEGORY_PRIVATE = &H01
    NLM_NETWORK_CATEGORY_DOMAIN_AUTHENTICATED = &H02
End Enum

Public Enum NLM_NETWORK_PROPERTY_CHANGE
    NLM_NETWORK_PROPERTY_CHANGE_CONNECTION = &H01
    NLM_NETWORK_PROPERTY_CHANGE_DESCRIPTION = &H02
    NLM_NETWORK_PROPERTY_CHANGE_NAME = &H04
    NLM_NETWORK_PROPERTY_CHANGE_ICON = &H08
    NLM_NETWORK_PROPERTY_CHANGE_CATEGORY_VALUE = &H10
End Enum

Public Enum NLM_CONNECTION_PROPERTY_CHANGE
    NLM_CONNECTION_PROPERTY_CHANGE_AUTHENTICATION = &H01
End Enum




Public Enum BINDSTATUS
    BINDSTATUS_FINDINGRESOURCE = 1
    BINDSTATUS_CONNECTING
    BINDSTATUS_REDIRECTING
    BINDSTATUS_BEGINDOWNLOADDATA
    BINDSTATUS_DOWNLOADINGDATA
    BINDSTATUS_ENDDOWNLOADDATA
    BINDSTATUS_BEGINDOWNLOADCOMPONENTS
    BINDSTATUS_INSTALLINGCOMPONENTS
    BINDSTATUS_ENDDOWNLOADCOMPONENTS
    BINDSTATUS_USINGCACHEDCOPY
    BINDSTATUS_SENDINGREQUEST
    BINDSTATUS_CLASSIDAVAILABLE
    BINDSTATUS_MIMETYPEAVAILABLE
    BINDSTATUS_CACHEFILENAMEAVAILABLE
    BINDSTATUS_BEGINSYNCOPERATION
    BINDSTATUS_ENDSYNCOPERATION
    BINDSTATUS_BEGINUPLOADDATA
    BINDSTATUS_UPLOADINGDATA
    BINDSTATUS_ENDUPLOADDATA
    BINDSTATUS_PROTOCOLCLASSID
    BINDSTATUS_ENCODING ' retiredIE9: no urlmon compression/decompression
    BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE
    BINDSTATUS_CLASSINSTALLLOCATION
    BINDSTATUS_DECODING
    BINDSTATUS_LOADINGMIMEHANDLER
    BINDSTATUS_CONTENTDISPOSITIONATTACH
    BINDSTATUS_FILTERREPORTMIMETYPE
    BINDSTATUS_CLSIDCANINSTANTIATE
    BINDSTATUS_IUNKNOWNAVAILABLE
    BINDSTATUS_DIRECTBIND
    BINDSTATUS_RAWMIMETYPE
    BINDSTATUS_PROXYDETECTING
    BINDSTATUS_ACCEPTRANGES
    BINDSTATUS_COOKIE_SENT
    BINDSTATUS_COMPACT_POLICY_RECEIVED
    BINDSTATUS_COOKIE_SUPPRESSED
    BINDSTATUS_COOKIE_STATE_UNKNOWN
    BINDSTATUS_COOKIE_STATE_ACCEPT
    BINDSTATUS_COOKIE_STATE_REJECT
    BINDSTATUS_COOKIE_STATE_PROMPT
    BINDSTATUS_COOKIE_STATE_LEASH
    BINDSTATUS_COOKIE_STATE_DOWNGRADE
    BINDSTATUS_POLICY_HREF
    BINDSTATUS_P3P_HEADER
    BINDSTATUS_SESSION_COOKIE_RECEIVED
    BINDSTATUS_PERSISTENT_COOKIE_RECEIVED
    BINDSTATUS_SESSION_COOKIES_ALLOWED
    BINDSTATUS_CACHECONTROL
    BINDSTATUS_CONTENTDISPOSITIONFILENAME
    BINDSTATUS_MIMETEXTPLAINMISMATCH
    BINDSTATUS_PUBLISHERAVAILABLE
    BINDSTATUS_DISPLAYNAMEAVAILABLE
    BINDSTATUS_SSLUX_NAVBLOCKED
    BINDSTATUS_SERVER_MIMETYPEAVAILABLE
    BINDSTATUS_SNIFFED_CLASSIDAVAILABLE
    BINDSTATUS_64BIT_PROGRESS
    BINDSTATUS_LAST = BINDSTATUS_64BIT_PROGRESS ' Not a functional flag, used to calc public enum length
    BINDSTATUS_RESERVED_0
    BINDSTATUS_RESERVED_1
    BINDSTATUS_RESERVED_2
    BINDSTATUS_RESERVED_3
    BINDSTATUS_RESERVED_4
    BINDSTATUS_RESERVED_5
    BINDSTATUS_RESERVED_6
    BINDSTATUS_RESERVED_7
    BINDSTATUS_RESERVED_8
    BINDSTATUS_RESERVED_9
    BINDSTATUS_RESERVED_A
    BINDSTATUS_RESERVED_B
    BINDSTATUS_RESERVED_C
    BINDSTATUS_RESERVED_D
    BINDSTATUS_RESERVED_E
    BINDSTATUS_RESERVED_F
    BINDSTATUS_RESERVED_10
    BINDSTATUS_RESERVED_11
    BINDSTATUS_RESERVED_12
    BINDSTATUS_RESERVED_13
    BINDSTATUS_RESERVED_14
    BINDSTATUS_LAST_PRIVATE = BINDSTATUS_RESERVED_14
End Enum

Public Enum BSCF
	BSCF_FIRSTDATANOTIFICATION = &H00000001
	BSCF_INTERMEDIATEDATANOTIFICATION = &H00000002
	BSCF_LASTDATANOTIFICATION = &H00000004
	BSCF_DATAFULLYAVAILABLE = &H00000008
	BSCF_AVAILABLEDATASIZEUNKNOWN = &H00000010
	BSCF_SKIPDRAINDATAFORFILEURLS = &H00000020
	BSCF_64BITLENGTHDOWNLOAD = &H00000040
End Enum

Public Enum BINDINFO_OPTIONS
	BINDINFO_OPTIONS_WININETFLAG = &H00010000
	BINDINFO_OPTIONS_ENABLE_UTF8 = &H00020000
	BINDINFO_OPTIONS_DISABLE_UTF8 = &H00040000
	BINDINFO_OPTIONS_USE_IE_ENCODING = &H00080000
	BINDINFO_OPTIONS_BINDTOOBJECT = &H00100000
	BINDINFO_OPTIONS_SECURITYOPTOUT = &H00200000
	BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = &H00400000
	BINDINFO_OPTIONS_USEBINDSTRINGCREDS = &H00800000
	BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = &H01000000
	BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE = &H02000000
	BINDINFO_WPC_DOWNLOADBLOCKED = &H08000000
	BINDINFO_WPC_LOGGING_ENABLED = &H10000000
	BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS = &H40000000
	BINDINFO_OPTIONS_SHDOCVW_NAVIGATE = &H80000000
	BINDINFO_OPTIONS_ALLOWCONNECTDATA = &H20000000
End Enum

Public Enum CIP_STATUS
    CIP_DISK_FULL = 0
    CIP_ACCESS_DENIED = (CIP_DISK_FULL + 1)
    CIP_NEWER_VERSION_EXISTS = (CIP_ACCESS_DENIED + 1)
    CIP_OLDER_VERSION_EXISTS = (CIP_NEWER_VERSION_EXISTS + 1)
    CIP_NAME_CONFLICT = (CIP_OLDER_VERSION_EXISTS + 1)
    CIP_TRUST_VERIFICATION_COMPONENT_MISSING = (CIP_NAME_CONFLICT + 1)
    CIP_EXE_SELF_REGISTERATION_TIMEOUT = (CIP_TRUST_VERIFICATION_COMPONENT_MISSING + 1)
    CIP_UNSAFE_TO_ABORT = (CIP_EXE_SELF_REGISTERATION_TIMEOUT + 1)
    CIP_NEED_REBOOT = (CIP_UNSAFE_TO_ABORT + 1)
    CIP_NEED_REBOOT_UI_PERMISSION = (CIP_NEED_REBOOT + 1)
End Enum


Public Enum CodePageDefaults
	CP_ACP = 0  ' default to ANSI code page
	CP_OEMCP = 1  ' default to OEM  code page
	CP_MACCP = 2  ' default to MAC  code page
	CP_THREAD_ACP = 3  ' current thread's ANSI code page
    CP_037 = 37
	CP_SYMBOL = 42  ' SYMBOL translations
    CP_SHIFTJIS = 932
    CP_GB2312 = 936
    CP_BIG5 = 950
    CP_WINANSI = 100 /* default codepage for windows & old DDE convs. */
    CP_LATIN1 = 1250
    CP_UNICODE = 1200
    CP_WINUNICODE = 1200
    CP_WINNEUTRAL = CP_WINUNICODE
    CP_UTF16 = 1200
    CP_UTF16LE = 1200
    CP_UTF16BE = 1201
    CP_UTF32LE = 12000
    CP_UTF32BE = 12001
    CP_UTF16_LE = 1200  ' UTF16 - little endian.
    CP_UTF16_BE = 1201  ' UTF16 - big endian.
    CP_ASCII = 20127
	CP_UTF7 = 65000  ' UTF-7 translation
	CP_UTF8 = 65001  ' UTF-8 translation
End Enum

Public Type BINDINFO
	cbSize As Long
	szExtraInfo As LongPtr ' e.g. string added to the URL string [range byte]
	stgmedData As STGMEDIUM ' e.g. put or post data
	grfBindInfoF As Long ' e.g. how meddata should be treaded
	dwBindVerb As Long ' e.g. put, post, ...
	szCustomVerb As LongPtr ' e.g. custom verb
	cbstgmedData As Long ' size of data in stgmedData
	dwOptions As BINDINFO_OPTIONS ' additional option
	dwOptionsFlags As Long ' options flags
	dwCodePage As CodePageDefaults ' the code used to convert the url
	securityAttributes As SECURITY_ATTRIBUTES
	iid As UUID ' iid of pUnk
	pUnk As stdole.IUnknown
	dwReserved As Long ' should be null
End Type
Public Enum BINDF
	BINDF_ASYNCHRONOUS = &H00000001
	BINDF_ASYNCSTORAGE = &H00000002
	BINDF_NOPROGRESSIVERENDERING = &H00000004
	BINDF_OFFLINEOPERATION = &H00000008
	BINDF_GETNEWESTVERSION = &H00000010
	BINDF_NOWRITECACHE = &H00000020
	BINDF_NEEDFILE = &H00000040
	BINDF_PULLDATA = &H00000080
	BINDF_IGNORESECURITYPROBLEM = &H00000100
	BINDF_RESYNCHRONIZE = &H00000200
	BINDF_HYPERLINK = &H00000400
	BINDF_NO_UI = &H00000800
	BINDF_SILENTOPERATION = &H00001000
	BINDF_PRAGMA_NO_CACHE = &H00002000
	BINDF_GETCLASSOBJECT = &H00004000
	BINDF_RESERVED_1 = &H00008000&
	BINDF_FREE_THREADED = &H00010000
	BINDF_DIRECT_READ = &H00020000
	BINDF_FORMS_SUBMIT = &H00040000
	BINDF_GETFROMCACHE_IF_NET_FAIL = &H00080000
	BINDF_FROMURLMON = &H00100000
	BINDF_FWD_BACK = &H00200000
	BINDF_PREFERDEFAULTHANDLER = &H00400000
	BINDF_ENFORCERESTRICTED = &H00800000
    BINDF_RESERVED_2 = &H80000000 ' BINDF_IGNOREMIMECLSID
    BINDF_RESERVED_3 = &H01000000 ' BINDF_COMPLETEDOWNLOAD
    BINDF_RESERVED_4 = &H02000000 ' BINDF_XDOMAINREQUEST
    BINDF_RESERVED_5 = &H04000000 ' BINDF_NO_COOKIES
    BINDF_RESERVED_6 = &H08000000 ' BINDF_BLOCK_REDIRECTS
    BINDF_RESERVED_7 = &H40000000 ' BINDF_DO_REDIRECT_CORS_CHECK
    BINDF_RESERVED_8 = &H20000000 ' BINDF_ALLOW_STATUS_NO_CONTENT
    BINDF_IGNOREMIMECLSID = &H80000000 ' BINDF_RESERVED_2
    BINDF_COMPLETEDOWNLOAD = &H01000000 ' BINDF_RESERVED_3
    BINDF_XDOMAINREQUEST = &H02000000 ' BINDF_RESERVED_4
    BINDF_NO_COOKIES = &H04000000 ' BINDF_RESERVED_5
    BINDF_BLOCK_REDIRECTS = &H08000000 ' BINDF_RESERVED_6
    BINDF_DO_REDIRECT_CORS_CHECK = &H40000000 ' BINDF_RESERVED_7
    BINDF_ALLOW_STATUS_NO_CONTENT = &H20000000 ' BINDF_RESERVED_8
End Enum
Public Enum BINDF2
    BINDF2_DISABLEBASICOVERHTTP = &H1
    BINDF2_DISABLEAUTOCOOKIEHANDLING = &H2
    BINDF2_READ_DATA_GREATER_THAN_4GB = &H4
    BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = &H8
    BINDF2_SETDOWNLOADMODE = &H20
    BINDF2_DISABLE_HTTP_REDIRECT_CACHING = &H40
    BINDF2_KEEP_CALLBACK_MODULE_LOADED = &H80
    BINDF2_ALLOW_PROXY_CRED_PROMPT = &H100
    BINDF2_RESERVED_17 = &H200
    BINDF2_RESERVED_16 = &H400
    BINDF2_RESERVED_15 = &H800
    BINDF2_RESERVED_14 = &H1000
    BINDF2_RESERVED_13 = &H2000
    BINDF2_RESERVED_12 = &H4000
    BINDF2_RESERVED_11 = &H8000&
    BINDF2_RESERVED_10 = &H10000
    BINDF2_RESERVED_F = &H20000
    BINDF2_RESERVED_E = &H40000
    BINDF2_RESERVED_D = &H80000
    BINDF2_RESERVED_C = &H100000
    BINDF2_RESERVED_B = &H200000
    BINDF2_RESERVED_A = &H400000
    BINDF2_RESERVED_9 = &H800000
    BINDF2_RESERVED_8 = &H1000000
    BINDF2_RESERVED_7 = &H2000000
    BINDF2_RESERVED_6 = &H4000000
    BINDF2_RESERVED_5 = &H8000000
    BINDF2_RESERVED_4 = &H10000000
    BINDF2_RESERVED_3 = &H20000000
    BINDF2_RESERVED_2 = &H40000000
    BINDF2_RESERVED_1 = &H80000000
End Enum

Public Enum MONIKERPROPERTY
    MIMETYPEPROP = 0
    USE_SRC_URL = &H1
    CLASSIDPROP = &H2
    TRUSTEDDOWNLOADPROP = &H3
    POPUPLEVELPROP = &H4
End Enum


Public Enum IZM_SEC_STATE
    SECURITY_IE_STATE_GREEN
    SECURITY_IE_STATE_RED
End Enum
    
Public Enum STATURL_QUERYFLAGS
    STATURL_QUERYFLAG_ISCACHED = 65536
    STATURL_QUERYFLAG_NOURL = 131072
    STATURL_QUERYFLAG_NOTITLE = 262144
    STATURL_QUERYFLAG_TOPLEVEL = 524288
End Enum

Public Enum STATURLFLAGS
    STATURLFLAG_ISCACHED = 1
    STATURLFLAG_ISTOPLEVEL = 2
End Enum

Public Type STATURL
    cbSize As Long
    pwcsUrl As LongPtr
    pwcsTitle As LongPtr
    ftLastVisited As FILETIME
    ftLastUpdated As FILETIME
    ftExpires As FILETIME
    dwFlags As STATURLFLAGS
End Type
    
    
Public Enum IURL_SETURL_FLAGS
	IURL_SETURL_FL_GUESS_PROTOCOL = &H0001
	IURL_SETURL_FL_USE_DEFAULT_PROTOCOL = &H0002
End Enum

Public Enum IURL_INVOKECOMMAND_FLAGS
	IURL_INVOKECOMMAND_FL_ALLOW_UI = &H0001
	IURL_INVOKECOMMAND_FL_USE_DEFAULT_VERB = &H0002
	IURL_INVOKECOMMAND_FL_DDEWAIT = &H0004
End Enum

Public Type URLINVOKECOMMANDINFO
	dwcbSize As Long
	dwFlags As IURL_INVOKECOMMAND_FLAGS
	hwndParent As LongPtr
	pcszVerb As LongPtr
End Type

Public Enum URLZONE
    URLZONE_INVALID = -1
    URLZONE_PREDEFINED_MIN = 0
    URLZONE_LOCAL_MACHINE = 0
    URLZONE_INTRANET
    URLZONE_TRUSTED
    URLZONE_INTERNET
    URLZONE_UNTRUSTED
    URLZONE_PREDEFINED_MAX = 999
    URLZONE_USER_MIN = 1000
    URLZONE_USER_MAX = 10000
End Enum

Public Enum URLACTIONS
	URLACTION_DOWNLOAD_MIN = &H00001000
	URLACTION_DOWNLOAD_SIGNED_ACTIVEX = &H00001001
	URLACTION_DOWNLOAD_UNSIGNED_ACTIVEX = &H00001004
	URLACTION_DOWNLOAD_CURR_MAX = &H00001004
	URLACTION_DOWNLOAD_MAX = &H000011FF
	URLACTION_ACTIVEX_MIN = &H00001200
	URLACTION_ACTIVEX_RUN = &H00001200
	URLACTION_ACTIVEX_OVERRIDE_OBJECT_SAFETY = &H00001201
	URLACTION_ACTIVEX_OVERRIDE_DATA_SAFETY = &H00001202
	URLACTION_ACTIVEX_OVERRIDE_SCRIPT_SAFETY = &H00001203
	URLACTION_SCRIPT_OVERRIDE_SAFETY = &H00001401
	URLACTION_ACTIVEX_CONFIRM_NOOBJECTSAFETY = &H00001204
	URLACTION_ACTIVEX_TREATASUNTRUSTED = &H00001205
	URLACTION_ACTIVEX_NO_WEBOC_SCRIPT = &H00001206
	URLACTION_ACTIVEX_OVERRIDE_REPURPOSEDETECTION = &H00001207
	URLACTION_ACTIVEX_OVERRIDE_OPTIN = &H00001208
	URLACTION_ACTIVEX_SCRIPTLET_RUN = &H00001209
	URLACTION_ACTIVEX_DYNSRC_VIDEO_AND_ANIMATION = &H0000120A
	URLACTION_ACTIVEX_OVERRIDE_DOMAINLIST = &H0000120B
	URLACTION_ACTIVEX_CURR_MAX = &H0000120B
	URLACTION_ACTIVEX_MAX = &H000013ff
	URLACTION_SCRIPT_MIN = &H00001400
	URLACTION_SCRIPT_RUN = &H00001400
	URLACTION_SCRIPT_JAVA_USE = &H00001402
	URLACTION_SCRIPT_SAFE_ACTIVEX = &H00001405
	URLACTION_CROSS_DOMAIN_DATA = &H00001406
	URLACTION_SCRIPT_PASTE = &H00001407
	URLACTION_ALLOW_XDOMAIN_SUBFRAME_RESIZE = &H00001408
	URLACTION_SCRIPT_XSSFILTER = &H00001409
	URLACTION_SCRIPT_NAVIGATE = &H0000140A
	URLACTION_PLUGGABLE_PROTOCOL_XHR = &H0000140B
	URLACTION_SCRIPT_CURR_MAX = &H0000140B
	URLACTION_SCRIPT_MAX = &H000015ff
	URLACTION_HTML_MIN = &H00001600
	URLACTION_HTML_SUBMIT_FORMS = &H00001601
	URLACTION_HTML_SUBMIT_FORMS_FROM = &H00001602
	URLACTION_HTML_SUBMIT_FORMS_TO = &H00001603
	URLACTION_HTML_FONT_DOWNLOAD = &H00001604
	URLACTION_HTML_JAVA_RUN = &H00001605
	URLACTION_HTML_USERDATA_SAVE = &H00001606
	URLACTION_HTML_SUBFRAME_NAVIGATE = &H00001607
	URLACTION_HTML_META_REFRESH = &H00001608
	URLACTION_HTML_MIXED_CONTENT = &H00001609
	URLACTION_HTML_INCLUDE_FILE_PATH = &H0000160A
	URLACTION_HTML_ALLOW_INJECTED_DYNAMIC_HTML = &H0000160B
	URLACTION_HTML_REQUIRE_UTF8_DOCUMENT_CODEPAGE = &H0000160C
	URLACTION_HTML_ALLOW_CROSS_DOMAIN_CANVAS = &H0000160D
	URLACTION_HTML_ALLOW_WINDOW_CLOSE = &H0000160E
	URLACTION_HTML_ALLOW_CROSS_DOMAIN_WEBWORKER = &H0000160F
	URLACTION_HTML_ALLOW_CROSS_DOMAIN_TEXTTRACK = &H00001610
	URLACTION_HTML_ALLOW_INDEXEDDB = &H00001611
	URLACTION_HTML_MAX = &H000017ff
	URLACTION_SHELL_MIN = &H00001800
	URLACTION_SHELL_INSTALL_DTITEMS = &H00001800
	URLACTION_SHELL_MOVE_OR_COPY = &H00001802
	URLACTION_SHELL_FILE_DOWNLOAD = &H00001803
	URLACTION_SHELL_VERB = &H00001804
	URLACTION_SHELL_WEBVIEW_VERB = &H00001805
	URLACTION_SHELL_SHELLEXECUTE = &H00001806
	URLACTION_SHELL_EXECUTE_HIGHRISK = &H00001806
	URLACTION_SHELL_EXECUTE_MODRISK = &H00001807
	URLACTION_SHELL_EXECUTE_LOWRISK = &H00001808
	URLACTION_SHELL_POPUPMGR = &H00001809
	URLACTION_SHELL_RTF_OBJECTS_LOAD = &H0000180A
	URLACTION_SHELL_ENHANCED_DRAGDROP_SECURITY = &H0000180B
	URLACTION_SHELL_EXTENSIONSECURITY = &H0000180C
	URLACTION_SHELL_SECURE_DRAGSOURCE = &H0000180D
	URLACTION_SHELL_REMOTEQUERY = &H0000180E
	URLACTION_SHELL_PREVIEW = &H0000180F
	URLACTION_SHELL_SHARE = &H00001810
	URLACTION_SHELL_ALLOW_CROSS_SITE_SHARE = &H00001811
	URLACTION_SHELL_TOCTOU_RISK = &H00001812
	URLACTION_SHELL_CURR_MAX = &H00001812
	URLACTION_SHELL_MAX = &H000019ff
	URLACTION_NETWORK_MIN = &H00001A00
	URLACTION_CREDENTIALS_USE = &H00001A00
	URLACTION_AUTHENTICATE_CLIENT = &H00001A01
	URLACTION_COOKIES = &H00001A02
	URLACTION_COOKIES_SESSION = &H00001A03
	URLACTION_CLIENT_CERT_PROMPT = &H00001A04
	URLACTION_COOKIES_THIRD_PARTY = &H00001A05
	URLACTION_COOKIES_SESSION_THIRD_PARTY = &H00001A06
	URLACTION_COOKIES_ENABLED = &H00001A10
	URLACTION_NETWORK_CURR_MAX = &H00001A04
	URLACTION_NETWORK_MAX = &H00001Bff
	URLACTION_JAVA_MIN = &H00001C00
	URLACTION_JAVA_PERMISSIONS = &H00001C00
	URLACTION_JAVA_CURR_MAX = &H00001C00
	URLACTION_JAVA_MAX = &H00001Cff
	URLACTION_INFODELIVERY_MIN = &H00001D00
	URLACTION_INFODELIVERY_NO_ADDING_CHANNELS = &H00001D00
	URLACTION_INFODELIVERY_NO_EDITING_CHANNELS = &H00001D01
	URLACTION_INFODELIVERY_NO_REMOVING_CHANNELS = &H00001D02
	URLACTION_INFODELIVERY_NO_ADDING_SUBSCRIPTIONS = &H00001D03
	URLACTION_INFODELIVERY_NO_EDITING_SUBSCRIPTIONS = &H00001D04
	URLACTION_INFODELIVERY_NO_REMOVING_SUBSCRIPTIONS = &H00001D05
	URLACTION_INFODELIVERY_NO_CHANNEL_LOGGING = &H00001D06
	URLACTION_INFODELIVERY_CURR_MAX = &H00001D06
	URLACTION_INFODELIVERY_MAX = &H00001Dff
	URLACTION_CHANNEL_SOFTDIST_MIN = &H00001E00
	URLACTION_CHANNEL_SOFTDIST_PERMISSIONS = &H00001E05
	URLACTION_CHANNEL_SOFTDIST_MAX = &H00001Eff
	URLACTION_DOTNET_USERCONTROLS = &H00002005
	URLACTION_BEHAVIOR_MIN = &H00002000
	URLACTION_BEHAVIOR_RUN = &H00002000
	URLPOLICY_BEHAVIOR_CHECK_LIST = &H00010000
	URLACTION_FEATURE_MIN = &H00002100
	URLACTION_FEATURE_MIME_SNIFFING = &H00002100
	URLACTION_FEATURE_ZONE_ELEVATION = &H00002101
	URLACTION_FEATURE_WINDOW_RESTRICTIONS = &H00002102
	URLACTION_FEATURE_SCRIPT_STATUS_BAR = &H00002103
	URLACTION_FEATURE_FORCE_ADDR_AND_STATUS = &H00002104
	URLACTION_FEATURE_BLOCK_INPUT_PROMPTS = &H00002105
	URLACTION_FEATURE_DATA_BINDING = &H00002106
	URLACTION_FEATURE_CROSSDOMAIN_FOCUS_CHANGE = &H00002107
	URLACTION_AUTOMATIC_DOWNLOAD_UI_MIN = &H00002200
	URLACTION_AUTOMATIC_DOWNLOAD_UI = &H00002200
	URLACTION_AUTOMATIC_ACTIVEX_UI = &H00002201
	URLACTION_ALLOW_RESTRICTEDPROTOCOLS = &H00002300
	URLACTION_ALLOW_APEVALUATION = &H00002301
	URLACTION_ALLOW_XHR_EVALUATION = &H00002302
	URLACTION_WINDOWS_BROWSER_APPLICATIONS = &H00002400
	URLACTION_XPS_DOCUMENTS = &H00002401
	URLACTION_LOOSE_XAML = &H00002402
	URLACTION_LOWRIGHTS = &H00002500
	URLACTION_WINFX_SETUP = &H00002600
	URLACTION_INPRIVATE_BLOCKING = &H00002700
	URLACTION_ALLOW_AUDIO_VIDEO = &H00002701
	URLACTION_ALLOW_ACTIVEX_FILTERING = &H00002702
	URLACTION_ALLOW_STRUCTURED_STORAGE_SNIFFING = &H00002703
	URLACTION_ALLOW_AUDIO_VIDEO_PLUGINS = &H00002704
	URLACTION_ALLOW_ZONE_ELEVATION_VIA_OPT_OUT = &H00002705
	URLACTION_ALLOW_ZONE_ELEVATION_OPT_OUT_ADDITION = &H00002706
	URLACTION_ALLOW_CROSSDOMAIN_DROP_WITHIN_WINDOW = &H00002708
	URLACTION_ALLOW_CROSSDOMAIN_DROP_ACROSS_WINDOWS = &H00002709
	URLACTION_ALLOW_CROSSDOMAIN_APPCACHE_MANIFEST = &H0000270A
	URLACTION_ALLOW_RENDER_LEGACY_DXTFILTERS = &H0000270B
	URLACTION_ALLOW_ANTIMALWARE_SCANNING_OF_ACTIVEX = &H0000270C
	URLACTION_ALLOW_CSS_EXPRESSIONS = &H0000270D
End Enum

Public Enum URLPOLICIES
	URLPOLICY_ACTIVEX_CHECK_LIST = &H00010000
	URLPOLICY_CREDENTIALS_SILENT_LOGON_OK = &H00000000
	URLPOLICY_CREDENTIALS_MUST_PROMPT_USER = &H00010000
	URLPOLICY_CREDENTIALS_CONDITIONAL_PROMPT = &H00020000
	URLPOLICY_CREDENTIALS_ANONYMOUS_ONLY = &H00030000
	URLPOLICY_AUTHENTICATE_CLEARTEXT_OK = &H00000000
	URLPOLICY_AUTHENTICATE_CHALLENGE_RESPONSE = &H00010000
	URLPOLICY_AUTHENTICATE_MUTUAL_ONLY = &H00030000
	URLPOLICY_JAVA_PROHIBIT = &H00000000
	URLPOLICY_JAVA_HIGH = &H00010000
	URLPOLICY_JAVA_MEDIUM = &H00020000
	URLPOLICY_JAVA_LOW = &H00030000
	URLPOLICY_JAVA_CUSTOM = &H00800000
	URLPOLICY_CHANNEL_SOFTDIST_PROHIBIT = &H00010000
	URLPOLICY_CHANNEL_SOFTDIST_PRECACHE = &H00020000
	URLPOLICY_CHANNEL_SOFTDIST_AUTOINSTALL = &H00030000
	URLPOLICY_ALLOW = &H00
	URLPOLICY_QUERY = &H01
	URLPOLICY_DISALLOW = &H03
	URLPOLICY_NOTIFY_ON_ALLOW = &H10
	URLPOLICY_NOTIFY_ON_DISALLOW = &H20
	URLPOLICY_LOG_ON_ALLOW = &H40
	URLPOLICY_LOG_ON_DISALLOW = &H80
	URLPOLICY_MASK_PERMISSIONS = &H0f
	URLPOLICY_DONTCHECKDLGBOX = &H100
End Enum

Public Enum MUTZ_FLAGS
	MUTZ_NOSAVEDFILECHECK = &H00000001 ' don't check file: for saved file comment")
	MUTZ_ISFILE = &H00000002 ' Assume URL if File, url does not need file://")
	MUTZ_ACCEPT_WILDCARD_SCHEME = &H00000080 ' Accept a wildcard scheme")
	MUTZ_ENFORCERESTRICTED = &H00000100 ' enforce restricted zone independent of URL")
	MUTZ_RESERVED = &H00000200 ' This is same as PUAF_NOSAVEDFILECHECK. However we already have MUTZ_NOSAVEDFILECHECK for this.")
	MUTZ_REQUIRESAVEDFILECHECK = &H00000400 ' always check the file for MOTW (overriding FEATURE_UNC_SAVEDFILECHECK)")
	MUTZ_DONT_UNESCAPE = &H00000800 ' Do not unescape the url")
	MUTZ_DONT_USE_CACHE = &H00001000 ' Do not check the cache")
	MUTZ_FORCE_INTRANET_FLAGS = &H00002000 ' Force the intranet flags to be active")
	MUTZ_IGNORE_ZONE_MAPPINGS = &H00004000 ' Don't look up the Zone Mappings
    MUTZ_FREEMARKEDURL = &H80000000
End Enum

Public Enum PUAF
	PUAF_DEFAULT = &H00000000
	PUAF_NOUI = &H00000001
	PUAF_ISFILE = &H00000002 ' Assume URL if File, url does not need file://
	PUAF_WARN_IF_DENIED = &H00000004
	PUAF_FORCEUI_FOREGROUND = &H00000008
	PUAF_CHECK_TIFS = &H00000010
	PUAF_DONTCHECKBOXINDIALOG = &H00000020
	PUAF_TRUSTED = &H00000040
	PUAF_ACCEPT_WILDCARD_SCHEME = &H00000080
	PUAF_ENFORCERESTRICTED = &H00000100
	PUAF_NOSAVEDFILECHECK = &H00000200
	PUAF_REQUIRESAVEDFILECHECK = &H00000400
	PUAF_DONT_USE_CACHE = &H00001000
	PUAF_RESERVED1 = &H00002000
	PUAF_RESERVED2 = &H00004000
	PUAF_LMZ_UNLOCKED = &H00010000
	PUAF_LMZ_LOCKED = &H00020000
	PUAF_DEFAULTZONEPOL = &H00040000
	PUAF_NPL_USE_LOCKED_IF_RESTRICTED = &H00080000
	PUAF_NOUIIFLOCKED = &H00100000
	PUAF_DRAGPROTOCOLCHECK = &H00200000
End Enum

Public Enum PUAFOUT
    PUAFOUT_DEFAULT = 0
    PUAFOUT_ISLOCKZONEPOLICY = &H1
End Enum

Public Enum SZM_FLAGS
	SZM_CREATE = &H00000000 ' create new mapping, error's if mapping already exists.
	SZM_DELETE = &H00000001 ' delete the mapping
End Enum

Public Enum URLTEMPLATE
    URLTEMPLATE_CUSTOM = &H00000000&
    URLTEMPLATE_PREDEFINED_MIN = &H00010000&
    URLTEMPLATE_LOW = &H00010000&
    URLTEMPLATE_MEDLOW = &H00010500&
    URLTEMPLATE_MEDIUM = &H00011000&
    URLTEMPLATE_MEDHIGH = &H00011500&
    URLTEMPLATE_HIGH = &H00012000&
    URLTEMPLATE_PREDEFINED_MAX = &H00020000&
End Enum

Public Enum ZAFLAGS
    ZAFLAGS_CUSTOM_EDIT = &H00000001&
    ZAFLAGS_ADD_SITES = &H00000002&
    ZAFLAGS_REQUIRE_VERIFICATION = &H00000004&
    ZAFLAGS_INCLUDE_PROXY_OVERRIDE = &H00000008&
    ZAFLAGS_INCLUDE_INTRANET_SITES = &H00000010&
    ZAFLAGS_NO_UI = &H00000020&
    ZAFLAGS_SUPPORTS_VERIFICATION = &H00000040&
    ZAFLAGS_UNC_AS_INTRANET = &H00000080&
    ZAFLAGS_DETECT_INTRANET = &H00000100&
    ZAFLAGS_USE_LOCKED_ZONES = &H00010000&
    ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = &H00020000&
    ZAFLAGS_NO_CACHE = &H00040000&
End Enum

Public Type ZONEATTRIBUTES
	cbSize As Long
	szDisplayName(0 To 519) As Byte
	szDescription(0 To 399) As Byte
	szIconPath(0 To 519) As Byte
	dwTemplateMinLevel As URLTEMPLATE
	dwTemplateRecommended As URLTEMPLATE
	dwTemplateCurrentLevel As URLTEMPLATE
	dwFlags As ZAFLAGS
End Type

Public Enum URLZONEREG
	URLZONEREG_DEFAULT = 0
	URLZONEREG_HKLM
	URLZONEREG_HKCU
End Enum

Public Enum Uri_PROPERTY
	Uri_PROPERTY_ABSOLUTE_URI = 0
	Uri_PROPERTY_STRING_START = 0 ' Uri_PROPERTY_ABSOLUTE_URI,
	Uri_PROPERTY_AUTHORITY = 1
	Uri_PROPERTY_DISPLAY_URI = 2
	Uri_PROPERTY_DOMAIN = 3
	Uri_PROPERTY_EXTENSION = 4
	Uri_PROPERTY_FRAGMENT = 5
	Uri_PROPERTY_HOST = 6
	Uri_PROPERTY_PASSWORD = 7
	Uri_PROPERTY_PATH = 8
	Uri_PROPERTY_PATH_AND_QUERY = 9
	Uri_PROPERTY_QUERY = 10
	Uri_PROPERTY_RAW_URI = 11
	Uri_PROPERTY_SCHEME_NAME = 12
	Uri_PROPERTY_USER_INFO = 13
	Uri_PROPERTY_USER_NAME = 14
	Uri_PROPERTY_STRING_LAST = 14 'Uri_PROPERTY_USER_NAME,
	Uri_PROPERTY_HOST_TYPE = 15
	Uri_PROPERTY_DWORD_START = 15 'Uri_PROPERTY_HOST_TYPE,
	Uri_PROPERTY_PORT = 16
	Uri_PROPERTY_SCHEME = 17
	Uri_PROPERTY_ZONE = 18
	Uri_PROPERTY_DWORD_LAST = 18 'Uri_PROPERTY_ZONE,
End Enum

Public Enum Uri_HOST_TYPE
	Uri_HOST_UNKNOWN = 0
	Uri_HOST_DNS = 1
	Uri_HOST_IPV4 = 2
	Uri_HOST_IPV6 = 3
	Uri_HOST_IDN = 4
End Enum

Public Type PROTOCOLFILTERDATA
	cbSize As Long
	pProtocolSink As IInternetProtocolSink ' out parameter
	pProtocol As IInternetProtocol ' in parameter
	pUnk As IUnknown
	dwFilterFlags As Long
End Type

Public Enum OIBDG_FLAGS
	'  default is free threaded
	OIBDG_APARTMENTTHREADED = &H00000100
	OIBDG_DATAONLY = &H00001000
End Enum

Public Enum AUTHENTICATEF
    AUTHENTICATEF_PROXY = &H1
    AUTHENTICATEF_BASIC = &H2
    AUTHENTICATEF_HTTP = &H4
End Enum
Public Type AUTHENTICATEINFO
    dwFlags As AUTHENTICATEF
    dwReserved As Long
End Type

Public Enum PI_FLAGS
	PI_PARSE_URL = &H00000001
	PI_FILTER_MODE = &H00000002
	PI_FORCE_ASYNC = &H00000004
	PI_USE_WORKERTHREAD = &H00000008
	PI_MIMEVERIFICATION = &H00000010
	PI_CLSIDLOOKUP = &H00000020
	PI_DATAPROGRESS = &H00000040
	PI_SYNCHRONOUS = &H00000080
	PI_APARTMENTTHREADED = &H00000100
	PI_CLASSINSTALL = &H00000200
	PI_PASSONBINDCTX = &H00002000
	PI_NOMIMEHANDLER = &H00008000&
	PI_LOADAPPDIRECT = &H00004000
	PD_FORCE_SWITCH = &H00010000
	PI_PREFERDEFAULTHANDLER = &H00020000
End Enum

Public Type PROTOCOLDATA
	grfFlags As Long
	dwState As Long
	pData As LongPtr
	cbData As Long
End Type

Public Type StartParam
	iid As UUID
	pIBindCtx As IBindCtx
	pItf As stdole.IUnknown
End Type

Public Enum BINDSTRING
	BINDSTRING_HEADERS = 1
	BINDSTRING_ACCEPT_MIMES = 2
	BINDSTRING_EXTRA_URL = 3
	BINDSTRING_LANGUAGE = 4
	BINDSTRING_USERNAME = 5
	BINDSTRING_PASSWORD = 6
	BINDSTRING_UA_PIXELS = 7
	BINDSTRING_UA_COLOR = 8
	BINDSTRING_OS = 9
	BINDSTRING_USER_AGENT = 10
	BINDSTRING_ACCEPT_ENCODINGS = 11
	BINDSTRING_POST_COOKIE = 12
	BINDSTRING_POST_DATA_MIME = 13
	BINDSTRING_URL = 14
	BINDSTRING_IID = 15
	BINDSTRING_FLAG_BIND_TO_OBJECT = 16
	BINDSTRING_PTR_BIND_CONTEXT = 17
	BINDSTRING_XDR_ORIGIN = 18
	BINDSTRING_DOWNLOADPATH = 19
	BINDSTRING_ROOTDOC_URL = 20
End Enum

Public Enum HTTP_QUERY
    HTTP_QUERY_MIME_VERSION = 0
    HTTP_QUERY_CONTENT_TYPE = 1
    HTTP_QUERY_CONTENT_TRANSFER_ENCODING = 2
    HTTP_QUERY_CONTENT_ID = 3
    HTTP_QUERY_CONTENT_DESCRIPTION = 4
    HTTP_QUERY_CONTENT_LENGTH = 5
    HTTP_QUERY_CONTENT_LANGUAGE = 6
    HTTP_QUERY_ALLOW = 7
    HTTP_QUERY_PUBLIC = 8
    HTTP_QUERY_DATE = 9
    HTTP_QUERY_EXPIRES = 10
    HTTP_QUERY_LAST_MODIFIED = 11
    HTTP_QUERY_MESSAGE_ID = 12
    HTTP_QUERY_URI = 13
    HTTP_QUERY_DERIVED_FROM = 14
    HTTP_QUERY_COST = 15
    HTTP_QUERY_LINK = 16
    HTTP_QUERY_PRAGMA = 17
    HTTP_QUERY_VERSION = 18  ' special: part of status line
    HTTP_QUERY_STATUS_CODE = 19  ' special: part of status line
    HTTP_QUERY_STATUS_TEXT = 20  ' special: part of status line
    HTTP_QUERY_RAW_HEADERS = 21  ' special: all headers as ASCIIZ
    HTTP_QUERY_RAW_HEADERS_CRLF = 22  ' special: all headers
    HTTP_QUERY_CONNECTION = 23
    HTTP_QUERY_ACCEPT = 24
    HTTP_QUERY_ACCEPT_CHARSET = 25
    HTTP_QUERY_ACCEPT_ENCODING = 26
    HTTP_QUERY_ACCEPT_LANGUAGE = 27
    HTTP_QUERY_AUTHORIZATION = 28
    HTTP_QUERY_CONTENT_ENCODING = 29
    HTTP_QUERY_FORWARDED = 30
    HTTP_QUERY_FROM = 31
    HTTP_QUERY_IF_MODIFIED_SINCE = 32
    HTTP_QUERY_LOCATION = 33
    HTTP_QUERY_ORIG_URI = 34
    HTTP_QUERY_REFERER = 35
    HTTP_QUERY_RETRY_AFTER = 36
    HTTP_QUERY_SERVER = 37
    HTTP_QUERY_TITLE = 38
    HTTP_QUERY_USER_AGENT = 39
    HTTP_QUERY_WWW_AUTHENTICATE = 40
    HTTP_QUERY_PROXY_AUTHENTICATE = 41
    HTTP_QUERY_ACCEPT_RANGES = 42
    HTTP_QUERY_SET_COOKIE = 43
    HTTP_QUERY_COOKIE = 44
    HTTP_QUERY_REQUEST_METHOD = 45  ' special: GET/POST etc.
    HTTP_QUERY_REFRESH = 46
    HTTP_QUERY_CONTENT_DISPOSITION = 47
    '  HTTP 1.1 defined headers
    HTTP_QUERY_AGE = 48
    HTTP_QUERY_CACHE_CONTROL = 49
    HTTP_QUERY_CONTENT_BASE = 50
    HTTP_QUERY_CONTENT_LOCATION = 51
    HTTP_QUERY_CONTENT_MD5 = 52
    HTTP_QUERY_CONTENT_RANGE = 53
    HTTP_QUERY_ETAG = 54
    HTTP_QUERY_HOST = 55
    HTTP_QUERY_IF_MATCH = 56
    HTTP_QUERY_IF_NONE_MATCH = 57
    HTTP_QUERY_IF_RANGE = 58
    HTTP_QUERY_IF_UNMODIFIED_SINCE = 59
    HTTP_QUERY_MAX_FORWARDS = 60
    HTTP_QUERY_PROXY_AUTHORIZATION = 61
    HTTP_QUERY_RANGE = 62
    HTTP_QUERY_TRANSFER_ENCODING = 63
    HTTP_QUERY_UPGRADE = 64
    HTTP_QUERY_VARY = 65
    HTTP_QUERY_VIA = 66
    HTTP_QUERY_WARNING = 67
    HTTP_QUERY_EXPECT = 68
    HTTP_QUERY_PROXY_CONNECTION = 69
    HTTP_QUERY_UNLESS_MODIFIED_SINCE = 70
    HTTP_QUERY_ECHO_REQUEST = 71
    HTTP_QUERY_ECHO_REPLY = 72
'  These are the set of headers that should be added back to a request when
'  re-doing a request after a RETRY_WITH response.
    HTTP_QUERY_ECHO_HEADERS = 73
    HTTP_QUERY_ECHO_HEADERS_CRLF = 74
    HTTP_QUERY_PROXY_SUPPORT = 75
    HTTP_QUERY_AUTHENTICATION_INFO = 76
    HTTP_QUERY_PASSPORT_URLS = 77
    HTTP_QUERY_PASSPORT_CONFIG = 78
    HTTP_QUERY_X_CONTENT_TYPE_OPTIONS = 79
    HTTP_QUERY_P3P = 80
    HTTP_QUERY_X_P2P_PEERDIST = 81
    HTTP_QUERY_TRANSLATE = 82
    HTTP_QUERY_X_UA_COMPATIBLE = 83
    HTTP_QUERY_DEFAULT_STYLE = 84
    HTTP_QUERY_X_FRAME_OPTIONS = 85
    HTTP_QUERY_X_XSS_PROTECTION = 86
    HTTP_QUERY_SET_COOKIE2 = 87
    HTTP_QUERY_DO_NOT_TRACK = 88
    HTTP_QUERY_KEEP_ALIVE = 89
    HTTP_QUERY_HTTP2_SETTINGS = 90
    HTTP_QUERY_STRICT_TRANSPORT_SECURITY = 91
    HTTP_QUERY_TOKEN_BINDING = 92
    HTTP_QUERY_INCLUDE_REFERRED_TOKEN_BINDING_ID = 93
    HTTP_QUERY_INCLUDE_REFERER_TOKEN_BINDING_ID = HTTP_QUERY_INCLUDE_REFERRED_TOKEN_BINDING_ID
    HTTP_QUERY_PUBLIC_KEY_PINS = 94
    HTTP_QUERY_PUBLIC_KEY_PINS_REPORT_ONLY = 95
    HTTP_QUERY_MAX = 95
'  HTTP_QUERY_CUSTOM - if this special value is supplied as the dwInfoLevel
'  parameter of HttpQueryInfo() then the lpBuffer parameter contains the name
'  of the header we are to query
    HTTP_QUERY_CUSTOM = 65535
    HTTP_QUERY_FLAG_REQUEST_HEADERS = &H80000000
'  HTTP_QUERY_FLAG_SYSTEMTIME - if this bit is set in the dwInfoLevel parameter
'  of HttpQueryInfo() AND the header being queried contains date information,
'  e.g. the "Expires:" header then lpBuffer will contain a SYSTEMTIME structure
'  containing the date and time information converted from the header string
    HTTP_QUERY_FLAG_SYSTEMTIME = &H40000000
'  HTTP_QUERY_FLAG_NUMBER - if this bit is set in the dwInfoLevel parameter of
'  HttpQueryInfo(), then the value of the header will be converted to a 32bit
'  number before being returned to the caller, if applicable
    HTTP_QUERY_FLAG_NUMBER = &H20000000
'  HTTP_QUERY_FLAG_COALESCE - combine the values from several headers of the
'  same name into the output buffer
    HTTP_QUERY_FLAG_COALESCE = &H10000000
'  HTTP_QUERY_FLAG_NUMBER64 - if this bit is set in the dwInfoLevel parameter of
'  HttpQueryInfo(), then the value of the header will be converted to a 64bit
'  number before being returned to the caller, if applicable
    HTTP_QUERY_FLAG_NUMBER64 = &H08000000
'  HTTP_QUERY_FLAG_COALESCE_WITH_COMMA - if this bit is set in the dwInfoLevel
'  parameter of HttpQueryInfo(), then the values from several headers of the
'  same name will be combined using comma as the delimiter
    HTTP_QUERY_FLAG_COALESCE_WITH_COMMA = &H04000000
    HTTP_QUERY_MODIFIER_FLAGS_MASK = (HTTP_QUERY_FLAG_REQUEST_HEADERS Or HTTP_QUERY_FLAG_SYSTEMTIME Or HTTP_QUERY_FLAG_NUMBER Or HTTP_QUERY_FLAG_COALESCE Or HTTP_QUERY_FLAG_NUMBER64 Or HTTP_QUERY_FLAG_COALESCE_WITH_COMMA)
    HTTP_QUERY_HEADER_MASK = (Not HTTP_QUERY_MODIFIER_FLAGS_MASK)
End Enum



Public Enum PARSEACTION
    PARSE_CANONICALIZE = 1
    PARSE_FRIENDLY = 2
    PARSE_SECURITY_URL = 3
    PARSE_ROOTDOCUMENT = 4
    PARSE_DOCUMENT = 5
    PARSE_ANCHOR = 6
    PARSE_ENCODE = 7
    PARSE_DECODE = 8
    PARSE_PATH_FROM_URL = 9
    PARSE_URL_FROM_PATH = 10
    PARSE_MIME = 11
    PARSE_SERVER = 12
    PARSE_SCHEMA = 13
    PARSE_SITE = 14
    PARSE_DOMAIN = 15
    PARSE_LOCATION = 16
    PARSE_SECURITY_DOMAIN = 17
    PARSE_ESCAPE = 18
    PARSE_UNESCAPE = 19
End Enum

Public Enum QUERYOPTION
    QUERY_EXPIRATION_DATE = 1
    QUERY_TIME_OF_LAST_CHANGE = 2
    QUERY_CONTENT_ENCODING = 3
    QUERY_CONTENT_TYPE = 4
    QUERY_REFRESH = 5
    QUERY_RECOMBINE = 6
    QUERY_CAN_NAVIGATE = 7
    QUERY_USES_NETWORK = 8
    QUERY_IS_CACHED = 9
    QUERY_IS_INSTALLEDENTRY = 10
    QUERY_IS_CACHED_OR_MAPPED = 11
    QUERY_USES_CACHE = 12
    QUERY_IS_SECURE = 13
    QUERY_IS_SAFE = 14
End Enum
    
    
Public Const FMFD_DEFAULT = &H00000000
Public Const FMFD_URLASFILENAME = &H00000001
Public Const URLMON_OPTION_USERAGENT = &H10000001
Public Const URLMON_OPTION_USERAGENT_REFRESH = &H10000002
Public Const URLMON_OPTION_URL_ENCODING = &H10000004


Public Const sCLSID_InternetZoneManager = "new: {7b8a2d95-0ac9-11d1-896c-00c04Fb6bfc4}"
Public Const sCLSID_InternetSecurityManager = "new: {7b8a2d94-0ac9-11d1-896c-00c04fb6bfc4}"
Public Const sCLSID_PersistentZoneIdentifier = "new: {0968E258-16C7-4DBA-AA86-462DD61E31A3}"
Public Const sCLSID_UrlHistory = "new: {3C374A40-BAE4-11CF-BF7D-00AA006946EE}"
Public Const sCLSID_InternetShortcut = "new: {FBF23B40-E3F0-101B-8488-00AA003E56F8}"

Public Type CSPLATFORM
    dwPlatformId As Long
    dwVersionHi As Long
    dwVersionLo As Long
    dwProcessorArch As Long
End Type

Public Type QUERYCONTEXT
    dwContext As Long
    Platform As CSPLATFORM
    Locale As Long
    dwVersionHi As Long
    dwVersionLo As Long
End Type

Public Enum TYSPEC
    TYSPEC_CLSID = 0
    TYSPEC_FILEEXT = 1
    TYSPEC_MIMETYPE = 2
    TYSPEC_FILENAME = 3
    TYSPEC_PROGID = 4
    TYSPEC_PACKAGENAME = 5
    TYSPEC_OBJECTID = 6
End Enum

Public Type uCLSSPEC
    TYSPEC As TYSPEC
    data(0 To 31) As Byte
End Type

Public Enum FIEF
    FIEF_FLAG_FORCE_JITUI = 1
    FIEF_FLAG_PEEK = 2
    FIEF_FLAG_SKIP_INSTALLED_VERSION_CHECK = 4
End Enum

Public Enum PSUACTION
    PSU_DEFAULT = 1
    PSU_SECURITY_URL_ONLY = 2
End Enum
    
Public Enum HLSR
	HLSR_HOME = 0
	HLSR_SEARCHPAGE = 1
	HLSR_HISTORYFOLDER = 2
End Enum

Public Enum HLSHORTCUTF
	HLSHORTCUTF_DEFAULT = &H00000000
	HLSHORTCUTF_DONTACTUALLYCREATE = &H00000001
	HLSHORTCUTF_USEFILENAMEFROMFRIENDLYNAME = &H00000002
	HLSHORTCUTF_USEUNIQUEFILENAME = &H00000004
	HLSHORTCUTF_MAYUSEEXISTINGSHORTCUT = &H00000008
End Enum

Public Enum HLTRANSLATEF
	HLTRANSLATEF_DEFAULT = &H00000000
	HLTRANSLATEF_DONTAPPLYDEFAULTPREFIX = &H00000001
End Enum

Public Enum HLNF
	HLNF_INTERNALJUMP = &H00000001
	HLNF_OPENINNEWWINDOW = &H00000002
	HLNF_NAVIGATINGBACK = &H00000004
	HLNF_NAVIGATINGFORWARD = &H00000008
	HLNF_NAVIGATINGTOSTACKITEM = &H00000010
	HLNF_CREATENOHISTORY = &H00000020
End Enum

Public Enum HLINKGETREF
	HLINKGETREF_DEFAULT = 0
	HLINKGETREF_ABSOLUTE = 1
	HLINKGETREF_RELATIVE = 2
End Enum

Public Enum HLFNAMEF
	HLFNAMEF_DEFAULT = &H00000000
	HLFNAMEF_TRYCACHE = &H00000001
	HLFNAMEF_TRYPRETTYTARGET = &H00000002
	HLFNAMEF_TRYFULLTARGET = &H00000004
	HLFNAMEF_TRYWIN95SHORTCUT = &H00000008
End Enum

Public Enum HLINKMISC
	HLINKMISC_RELATIVE = &H00000001
End Enum

Public Enum HLINKSETF
	HLINKSETF_TARGET = &H00000001
	HLINKSETF_LOCATION = &H00000002
End Enum

Public Enum HLINKWHICHMK
	HLINKWHICHMK_CONTAINER = 1
	HLINKWHICHMK_BASE = 2
End Enum

Public Type HLITEM
	uHLID As Long
	pwzFriendlyName As LongPtr
End Type

Public Enum HLTB
	HLTB_DOCKEDLEFT = 0
	HLTB_DOCKEDTOP = 1
	HLTB_DOCKEDRIGHT = 2
	HLTB_DOCKEDBOTTOM = 3
	HLTB_FLOATING = 4
End Enum

Public Type HLTBINFO
	uDockType As HLTB
	rcTbPos As RECT
End Type

Public Enum HLBWIF
	HLBWIF_HASFRAMEWNDINFO = &H00000001
	HLBWIF_HASDOCWNDINFO = &H00000002
	HLBWIF_FRAMEWNDMAXIMIZED = &H00000004
	HLBWIF_DOCWNDMAXIMIZED = &H00000008
	HLBWIF_HASWEBTOOLBARINFO = &H00000010
	HLBWIF_WEBTOOLBARHIDDEN = &H00000020
End Enum

Public Type HLBWINFO
	cbSize As Long
	grfHLBWIF As HLBWIF
	rcFramePos As RECT
	rcDocPos As RECT
	hltbinfo As HLTBINFO
End Type

Public Enum HLID
	HLID_INVALID = &H0
	HLID_PREVIOUS = &HFFFFFFFF
	HLID_NEXT = &HFFFFFFFE
	HLID_CURRENT = &HFFFFFFFD
	HLID_STACKBOTTOM = &HFFFFFFFC
	HLID_STACKTOP = &HFFFFFFFB
End Enum

Public Enum HLQF
	HLQF_ISVALID = &H00000001
	HLQF_ISCURRENT = &H00000002
End Enum

Public Enum InternetGetFeatureFlags
    GET_FEATURE_FROM_THREAD = &H00000001
    GET_FEATURE_FROM_PROCESS = &H00000002
    GET_FEATURE_FROM_REGISTRY = &H00000004
    GET_FEATURE_FROM_THREAD_LOCALMACHINE = &H00000008
    GET_FEATURE_FROM_THREAD_INTRANET = &H00000010
    GET_FEATURE_FROM_THREAD_TRUSTED = &H00000020
    GET_FEATURE_FROM_THREAD_INTERNET = &H00000040
    GET_FEATURE_FROM_THREAD_RESTRICTED = &H00000080
End Enum
Public Enum InternetSetFeatureFlags
    SET_FEATURE_ON_THREAD = &H00000001
    SET_FEATURE_ON_PROCESS = &H00000002
    SET_FEATURE_IN_REGISTRY = &H00000004
    SET_FEATURE_ON_THREAD_LOCALMACHINE = &H00000008
    SET_FEATURE_ON_THREAD_INTRANET = &H00000010
    SET_FEATURE_ON_THREAD_TRUSTED = &H00000020
    SET_FEATURE_ON_THREAD_INTERNET = &H00000040
    SET_FEATURE_ON_THREAD_RESTRICTED = &H00000080
End Enum
Public Enum INTERNETFEATURELIST
    FEATURE_OBJECT_CACHING = 0
    FEATURE_ZONE_ELEVATION = 1
    FEATURE_MIME_HANDLING = 2
    FEATURE_MIME_SNIFFING = 3
    FEATURE_WINDOW_RESTRICTIONS = 4
    FEATURE_WEBOC_POPUPMANAGEMENT = 5
    FEATURE_BEHAVIORS = 6
    FEATURE_DISABLE_MK_PROTOCOL = 7
    FEATURE_LOCALMACHINE_LOCKDOWN = 8
    FEATURE_SECURITYBAND = 9
    FEATURE_RESTRICT_ACTIVEXINSTALL = 10
    FEATURE_VALIDATE_NAVIGATE_URL = 11
    FEATURE_RESTRICT_FILEDOWNLOAD = 12
    FEATURE_ADDON_MANAGEMENT = 13
    FEATURE_PROTOCOL_LOCKDOWN = 14
    FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = 15
    FEATURE_SAFE_BINDTOOBJECT = 16
    FEATURE_UNC_SAVEDFILECHECK = 17
    FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = 18
    FEATURE_TABBED_BROWSING = 19
    FEATURE_SSLUX = 20
    FEATURE_DISABLE_NAVIGATION_SOUNDS = 21
    FEATURE_DISABLE_LEGACY_COMPRESSION = 22 ' retiredIE9
    FEATURE_FORCE_ADDR_AND_STATUS = 23
    FEATURE_XMLHTTP = 24
    FEATURE_DISABLE_TELNET_PROTOCOL = 25
    FEATURE_FEEDS = 26
    FEATURE_BLOCK_INPUT_PROMPTS = 27
    FEATURE_ENTRY_COUNT = 28 ' This should be the last item
End Enum

Public Enum UrlMonikerFlags
    URL_MK_LEGACY = 0
    URL_MK_UNIFORM = 1
    URL_MK_NO_CANONICALIZE = 2
End Enum

'These APIs are here instead of the API module below because they were part of the original olelib/oleexp.
Public DeclareWide PtrSafe Function CreateURLMoniker Lib "urlmon" (ByVal pMkCtx As IMoniker, ByVal szURL As String, ppmk As IMoniker) As Long
[PreserveSig(False)]
Public DeclareWide PtrSafe Function CreateURLMoniker Lib "urlmon" (ByVal pMkCtx As IMoniker, ByVal szURL As String) As IMoniker
Public DeclareWide PtrSafe Function CreateURLMonikerEx Lib "urlmon" (ByVal pMkCtx As IMoniker, ByVal szURL As String, ByRef ppmk As IMoniker, ByVal dwFlags As UrlMonikerFlags) As Long
Public DeclareWide PtrSafe Function GetClassURL Lib "urlmon" (ByVal szURL As String, ByRef pclsid As UUID) As Long
Public Declare PtrSafe Function CreateAsyncBindCtx Lib "urlmon" (ByVal reserved As Long, ByVal pBSCb As IBindStatusCallback, ByVal pEFetc As IEnumFormatETC, ppbc As IBindCtx) As Long
[PreserveSig(False)]
Public Declare PtrSafe Function CreateAsyncBindCtx Lib "urlmon" (ByVal reserved As Long, ByVal pBSCb As IBindStatusCallback, ByVal pEFetc As IEnumFormatETC) As IBindCtx
Public Declare PtrSafe Function CreateAsyncBindCtxEx Lib "urlmon" (ByVal pbc As IBindCtx, ByVal dwOptions As Long, ByVal pBSCb As IBindStatusCallback, ByVal pEnum As IEnumFormatETC, ByRef ppBC As IBindCtx, ByVal reserved As Long) As Long
Public DeclareWide PtrSafe Function MkParseDisplayNameEx Lib "urlmon" (ByVal pbc As IBindCtx, ByVal szDisplayName As String, pchEaten As Long, ppmk As IMoniker) As Long
[PreserveSig(False)]
Public DeclareWide PtrSafe Function MkParseDisplayNameEx Lib "urlmon" (ByVal pbc As IBindCtx, ByVal szDisplayName As String, pchEaten As Long) As IMoniker
Public Declare PtrSafe Function RegisterBindStatusCallback Lib "urlmon" (ByVal pbc As IBindCtx, ByVal pBSCb As IBindStatusCallback, ByRef ppBSCBPrev As IBindStatusCallback, ByVal dwReserved As Long) As Long
Public Declare PtrSafe Function RevokeBindStatusCallback Lib "urlmon" (ByVal pbc As IBindCtx, ByVal pBSCb As IBindStatusCallback) As Long
Public DeclareWide PtrSafe Function GetClassFileOrMime Lib "urlmon" (ByVal pbc As IBindCtx, ByVal szFileName As String, ByRef pBuffer As Any, ByVal cbSize As Long, ByVal szMime As String, ByVal dwReserved As Long, ByRef pclsid As UUID) As Long
Public DeclareWide PtrSafe Function IsValidURL Lib "urlmon" (ByVal pbc As IBindCtx, ByVal szURL As String, ByVal dwReserved As Long) As Long
Public DeclareWide PtrSafe Function CoGetClassObjectFromURL Lib "urlmon" (ByRef rCLASSID As UUID, ByVal szCODE As String, ByVal dwFileVersionMS As Long, ByVal dwFileVersionLS As Long, ByVal szTYPE As String, ByVal pBindCtx As IBindCtx, ByVal dwClsContext As Long, ByRef pvReserved As Any, ByRef riid As UUID, ByRef ppv As Any) As Long
Public Declare PtrSafe Function FaultInIEFeature Lib "urlmon" (ByVal hwnd As LongPtr, ByRef pClassSpec As uCLSSPEC, ByRef pQuery As QUERYCONTEXT, ByVal dwFlags As FIEF) As Long
Public Declare PtrSafe Function GetComponentIDFromCLSSPEC Lib "urlmon" (ByRef pClassSpec As uCLSSPEC) As Long
Public Declare PtrSafe Function IsAsyncMoniker Lib "urlmon" (ByVal pmk As IMoniker) As Long
Public DeclareWide PtrSafe Function CreateURLBinding Lib "urlmon" (ByVal lpszUrl As String, ByVal pbc As IBindCtx, ppBdg As IBinding) As Long
[PreserveSig(False)]
Public DeclareWide PtrSafe Function CreateURLBinding Lib "urlmon" (ByVal lpszUrl As String, ByVal pbc As IBindCtx) As IBinding
Public Declare PtrSafe Function RegisterMediaTypes Lib "urlmon" (ByVal ctypes As Long, ByVal rgszTypes As String, ByRef rgcfTypes As Integer) As Long
Public Declare PtrSafe Function FindMediaType Lib "urlmon" (ByVal rgszTypes As String, rgcfTypes As Integer) As Long
Public Declare PtrSafe Function CreateFormatEnumerator Lib "urlmon" (ByVal cfmtetc As Long, ByRef rgfmtetc As FORMATETC, ppenumfmtetc As IEnumFormatETC) As Long
[PreserveSig(False)]
Public Declare PtrSafe Function CreateFormatEnumerator Lib "urlmon" (ByVal cfmtetc As Long, ByRef rgfmtetc As FORMATETC) As IEnumFormatETC
Public Declare PtrSafe Function RegisterFormatEnumerator Lib "urlmon" (ByVal pbc As IBindCtx, ByVal pEFetc As IEnumFormatETC, ByVal reserved As Long) As Long
Public Declare PtrSafe Function RevokeFormatEnumerator Lib "urlmon" (ByVal pbc As IBindCtx, ByVal pEFetc As IEnumFormatETC) As Long
Public Declare PtrSafe Function RegisterMediaTypeClass Lib "urlmon" (ByVal pbc As IBindCtx, ByVal ctypes As Long, ByVal rgszTypes As String, ByRef rgclsID As UUID, ByVal reserved As Long) As Long
Public Declare PtrSafe Function FindMediaTypeClass Lib "urlmon" (ByVal pbc As IBindCtx, ByVal szTYPE As String, ByRef pclsid As UUID, ByVal reserved As Long) As Long
Public Declare PtrSafe Function UrlMkSetSessionOption Lib "urlmon" (ByVal dwOption As Long, ByRef pBuffer As Any, ByVal dwBufferLength As Long, ByVal dwReserved As Long) As Long
Public Declare PtrSafe Function UrlMkGetSessionOption Lib "urlmon" (ByVal dwOption As Long, ByRef pBuffer As Any, ByVal dwBufferLength As Long, ByRef pdwBufferLength As Long, ByVal dwReserved As Long) As Long
Public DeclareWide PtrSafe Function FindMimeFromData Lib "urlmon" (ByVal pbc As IBindCtx, ByVal pwzUrl As String, ByRef pBuffer As Any, ByVal cbSize As Long, ByVal pwzMimeProposed As String, ByVal dwMimeFlags As Long, ByRef ppwzMimeOut As LongPtr, ByVal dwReserved As Long) As Long
Public Declare PtrSafe Function ObtainUserAgentString Lib "urlmon" (ByVal dwOption As Long, ByVal pszUAOut As String, ByRef cbSize As Long) As Long
Public DeclareWide PtrSafe Function HlinkSimpleNavigateToString Lib "urlmon" (ByVal szTarget As String, ByVal szLocation As String, ByVal szTargetFrameName As String, ByVal pUnk As stdole.IUnknown, ByVal pbc As IBindCtx, ByVal pbsc As IBindStatusCallback, ByVal grfHLNF As Long, ByVal dwReserved As Long) As Long
Public DeclareWide PtrSafe Function HlinkSimpleNavigateToMoniker Lib "urlmon" (ByVal pmkTarget As IMoniker, ByVal szLocation As String, ByVal szTargetFrameName As String, ByVal pUnk As stdole.IUnknown, ByVal pbc As IBindCtx, ByVal pbsc As IBindStatusCallback, ByVal grfHLNF As Long, ByVal dwReserved As Long) As Long
Public Declare PtrSafe Function URLOpenStreamA Lib "urlmon" (ByVal pCaller As stdole.IUnknown, ByVal szURL As String, ByVal dw As Long, ByVal pCallback As IBindStatusCallback) As Long
Public Declare PtrSafe Function URLOpenStreamW Lib "urlmon" (ByVal pCaller As stdole.IUnknown, ByVal szURL As LongPtr, ByVal dw As Long, ByVal pCallback As IBindStatusCallback) As Long
Public DeclareWide PtrSafe Function URLOpenStream Lib "urlmon" Alias "URLOpenStreamW" (ByVal pCaller As stdole.IUnknown, ByVal szURL As String, ByVal dw As Long, ByVal pCallback As IBindStatusCallback) As Long
Public Declare PtrSafe Function URLOpenPullStreamA Lib "urlmon" (ByVal pCaller As stdole.IUnknown, ByVal szURL As String, ByVal dwReserved As Long, ByVal pCallback As IBindStatusCallback) As Long
Public Declare PtrSafe Function URLOpenPullStreamW Lib "urlmon" (ByVal pCaller As stdole.IUnknown, ByVal szURL As LongPtr, ByVal dwReserved As Long, ByVal pCallback As IBindStatusCallback) As Long
Public DeclareWide PtrSafe Function URLOpenPullStream Lib "urlmon" Alias "URLOpenPullStreamW" (ByVal pCaller As stdole.IUnknown, ByVal szURL As String, ByVal dwReserved As Long, ByVal pCallback As IBindStatusCallback) As Long
Public Declare PtrSafe Function URLDownloadToCacheFileA Lib "urlmon" (ByVal lpUnkcaller As stdole.IUnknown, ByVal szURL As String, ByVal szFileName As String, ByVal dwBufLength As Long, ByVal dwReserved As Long, ByVal pbsc As IBindStatusCallback) As Long
Public Declare PtrSafe Function URLDownloadToCacheFileW Lib "urlmon" (ByVal lpUnkcaller As stdole.IUnknown, ByVal szURL As LongPtr, ByVal szFileName As LongPtr, ByVal dwBufLength As Long, ByVal dwReserved As Long, ByVal pbsc As IBindStatusCallback) As Long
Public DeclareWide PtrSafe Function URLDownloadToCacheFile Lib "urlmon" Alias "URLDownloadToCacheFileW" (ByVal lpUnkcaller As stdole.IUnknown, ByVal szURL As String, ByVal szFileName As String, ByVal dwBufLength As Long, ByVal dwReserved As Long, ByVal pbsc As IBindStatusCallback) As Long
Public Declare PtrSafe Function URLOpenBlockingStreamA Lib "urlmon" (ByVal pCaller As stdole.IUnknown, ByVal szURL As String, ByRef Strm As IStream, ByVal dwReserved As Long, ByVal lpfnCB As IBindStatusCallback) As Long
Public Declare PtrSafe Function URLOpenBlockingStreamW Lib "urlmon" (ByVal pCaller As stdole.IUnknown, ByVal szURL As LongPtr, ByRef Strm As IStream, ByVal dwReserved As Long, ByVal lpfnCB As IBindStatusCallback) As Long
Public DeclareWide PtrSafe Function URLOpenBlockingStream Lib "urlmon" Alias "URLOpenBlockingStreamW" (ByVal pCaller As stdole.IUnknown, ByVal szURL As String, ByRef Strm As IStream, ByVal dwReserved As Long, ByVal lpfnCB As IBindStatusCallback) As Long
Public Declare PtrSafe Function URLDownloadToFileA Lib "urlmon" (ByVal pCaller As stdole.IUnknown, ByVal szURL As String, ByVal szFile As String, ByVal dwReserved As Long, ByVal lpfnCB As IBindStatusCallback) As Long
Public Declare PtrSafe Function URLDownloadToFileW Lib "urlmon" (ByVal pCaller As stdole.IUnknown, ByVal szURL As LongPtr, ByVal szFile As LongPtr, ByVal dwReserved As Long, ByVal lpfnCB As IBindStatusCallback) As Long
Public DeclareWide PtrSafe Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileW" (ByVal pCaller As stdole.IUnknown, ByVal szURL As String, ByVal szFile As String, ByVal dwReserved As Long, ByVal lpfnCB As IBindStatusCallback) As Long
Public Declare PtrSafe Function HlinkGoBack Lib "urlmon" (ByVal pUnk As stdole.IUnknown) As Long
Public Declare PtrSafe Function HlinkGoForward Lib "urlmon" (ByVal pUnk As stdole.IUnknown) As Long
Public DeclareWide PtrSafe Function HlinkNavigateString Lib "urlmon" (ByVal pUnk As stdole.IUnknown, ByVal szTarget As String) As Long
Public Declare PtrSafe Function HlinkNavigateMoniker Lib "urlmon" (ByVal pUnk As stdole.IUnknown, ByVal pmkTarget As IMoniker) As Long
Public DeclareWide PtrSafe Function CoInternetParseUrl Lib "urlmon" (ByVal pwzUrl As String, ByVal PARSEACTION As PARSEACTION, ByVal dwFlags As Long, ByVal pszResult As String, ByVal cchResult As Long, ByRef pcchResult As Long, ByVal dwReserved As Long) As Long
Public DeclareWide PtrSafe Function CoInternetCombineUrl Lib "urlmon" (ByVal pwzBaseUrl As String, ByVal pwzRelativeUrl As String, ByVal dwCombineFlags As Long, ByVal pszResult As String, ByVal cchResult As Long, ByRef pcchResult As Long, ByVal dwReserved As Long) As Long
Public DeclareWide PtrSafe Function CoInternetCompareUrl Lib "urlmon" (ByVal pwzUrl1 As String, ByVal pwzUrl2 As String, ByVal dwFlags As Long) As Long
Public DeclareWide PtrSafe Function CoInternetGetProtocolFlags Lib "urlmon" (ByVal pwzUrl As String, ByRef pdwFlags As Long, ByVal dwReserved As Long) As Long
Public DeclareWide PtrSafe Function CoInternetQueryInfo Lib "urlmon" (ByVal pwzUrl As String, ByVal QueryOptions As QUERYOPTION, ByVal dwQueryFlags As Long, ByRef pvBuffer As Any, ByVal cbBuffer As Long, ByRef pcbBuffer As Long, ByVal dwReserved As Long) As Long
Public Declare PtrSafe Function CoInternetGetSession Lib "urlmon" (ByVal dwSessionMode As Long, ByRef ppIInternetSession As IInternetSession, ByVal dwReserved As Long) As Long
Public DeclareWide PtrSafe Function CoInternetGetSecurityUrl Lib "urlmon" (ByVal pwzUrl As String, ByRef ppwzSecUrl As Long, ByVal PSUACTION As PSUACTION, ByVal dwReserved As Long) As Long
Public Declare PtrSafe Function CoInternetGetSecurityUrlEx Lib "urlmon" (ByVal pIUri As IUri, ByRef ppSecUrl As IUri, ByVal PSUACTION As PSUACTION, ByVal dwReserved As Long) As Long
Public Declare PtrSafe Function CopyStgMedium Lib "urlmon" (ByRef pcstgmedSrc As STGMEDIUM, ByRef pstgmedDest As STGMEDIUM) As Long
Public Declare PtrSafe Function CopyBindInfo Lib "urlmon" (ByRef pcbiSrc As BINDINFO, ByRef pbiDest As BINDINFO) As Long
Public Declare PtrSafe Sub ReleaseBindInfo Lib "urlmon" (ByRef pbindinfo As BINDINFO)
Public Declare PtrSafe Function CoInternetCreateSecurityManager Lib "urlmon" (ByVal pSP As IServiceProvider, ByRef ppSM As IInternetSecurityManager, ByVal dwReserved As Long) As Long
Public Declare PtrSafe Function CoInternetCreateZoneManager Lib "urlmon" (ByVal pSP As IServiceProvider, ByRef ppZM As IInternetZoneManager, ByVal dwReserved As Long) As Long
Public DeclareWide PtrSafe Function CoInternetIsFeatureZoneElevationEnabled Lib "urlmon" (ByVal szFromURL As String, ByVal szToURL As String, ByVal pSecMgr As IInternetSecurityManager, ByVal dwFlags As InternetGetFeatureFlags) As Long
Public Declare PtrSafe Function CoInternetSetFeatureEnabled Lib "urlmon" (ByVal FeatureEntry As INTERNETFEATURELIST, ByVal dwFlags As InternetSetFeatureFlags, ByVal fEnable As BOOL) As Long
Public Declare PtrSafe Function CoInternetIsFeatureEnabled Lib "urlmon" (ByVal FeatureEntry As INTERNETFEATURELIST, ByVal dwFlags As InternetGetFeatureFlags) As BOOL
Public DeclareWide PtrSafe Function CoInternetIsFeatureEnabledForUrl Lib "urlmon" (ByVal FeatureEntry As INTERNETFEATURELIST, ByVal dwFlags As InternetGetFeatureFlags, ByVal szURL As String, ByVal pSecMgr As IInternetSecurityManager) As BOOL
Public Declare PtrSafe Function CoInternetIsFeatureEnabledForIUri Lib "urlmon" (ByVal FeatureEntry As INTERNETFEATURELIST, ByVal dwFlags As InternetGetFeatureFlags, ByVal pIUri As IUri, ByVal pSecMgr As IInternetSecurityManagerEx2) As BOOL



Public DeclareWide PtrSafe Function HlinkCreateFromMoniker Lib "hlink" (ByVal pimkTrgt As IMoniker, ByVal pwzLocation As String, ByVal pwzFriendlyName As String, ByVal pihlSite As IHlinkSite, ByVal dwSiteData As Long, ByVal piunkOuter As IUnknown, ByRef riid As UUID, ByRef ppvObj As Any) As Long
Public DeclareWide PtrSafe Function HlinkCreateFromString Lib "hlink" (ByVal pwzTarget As String, ByVal pwzLocation As String, ByVal pwzFriendlyName As String, ByVal pihlSite As IHlinkSite, ByVal dwSiteData As Long, ByVal piunkOuter As IUnknown, ByRef riid As UUID, ByRef ppvObj As Any) As Long
Public Declare PtrSafe Function HlinkCreateFromData Lib "hlink" (ByVal piDataObj As IDataObject, ByVal pihlSite As IHlinkSite, ByVal dwSiteData As Long, ByVal piunkOuter As IUnknown, ByRef riid As UUID, ByRef ppvObj As Any) As Long
Public Declare PtrSafe Function HlinkQueryCreateFromData Lib "hlink" (ByVal piDataObj As IDataObject) As Long
Public Declare PtrSafe Function HlinkClone Lib "hlink" (ByVal pihl As IHlink, ByRef riid As UUID, ByVal pihlsiteForClone As IHlinkSite, ByVal dwSiteData As Long, ByRef ppvObj As Any) As Long
Public Declare PtrSafe Function HlinkCreateBrowseContext Lib "hlink" (ByVal piunkOuter As IUnknown, ByRef riid As UUID, ByRef ppvObj As Any) As Long
Public DeclareWide PtrSafe Function HlinkNavigateToStringReference Lib "hlink" (ByVal pwzTarget As String, ByVal pwzLocation As String, ByVal pihlSite As IHlinkSite, ByVal dwSiteData As Long, ByVal pihlframe As IHlinkFrame, ByVal grfHLNF As HLNF, ByVal pibc As IBindCtx, ByVal pibsc As IBindStatusCallback, ByVal pihlbc As IHlinkBrowseContext) As Long
Public Declare PtrSafe Function HlinkNavigate Lib "hlink" (ByVal pihl As IHlink, ByVal pihlframe As IHlinkFrame, ByVal grfHLNF As HLNF, ByVal pbc As IBindCtx, ByVal pibsc As IBindStatusCallback, ByVal pihlbc As IHlinkBrowseContext) As Long
Public DeclareWide PtrSafe Function HlinkOnNavigate Lib "hlink" (ByVal pihlframe As IHlinkFrame, ByVal pihlbc As IHlinkBrowseContext, ByVal grfHLNF As HLNF, ByVal pimkTarget As IMoniker, ByVal pwzLocation As String, ByVal pwzFriendlyName As String, puHLID As HLID) As Long
[PreserveSig(False)]
Public DeclareWide PtrSafe Function HlinkOnNavigate Lib "hlink" (ByVal pihlframe As IHlinkFrame, ByVal pihlbc As IHlinkBrowseContext, ByVal grfHLNF As HLNF, ByVal pimkTarget As IMoniker, ByVal pwzLocation As String, ByVal pwzFriendlyName As String) As HLID
Public DeclareWide PtrSafe Function HlinkUpdateStackItem Lib "hlink" (ByVal pihlframe As IHlinkFrame, ByVal pihlbc As IHlinkBrowseContext, ByVal uHLID As HLID, ByVal pimkTrgt As IMoniker, ByVal pwzLocation As String, ByVal pwzFriendlyName As String) As Long
Public Declare PtrSafe Function HlinkOnRenameDocument Lib "hlink" (ByVal dwReserved As Long, ByVal pihlbc As IHlinkBrowseContext, ByVal pimkOld As IMoniker, ByVal pimkNew As IMoniker) As Long
Public Declare PtrSafe Function HlinkResolveMonikerForData Lib "hlink" (ByVal pimkReference As IMoniker, ByVal reserved As Long, ByVal pibc As IBindCtx, ByVal cfmtetc As Long, ByRef rgfmtetc As FORMATETC, ByVal pibsc As IBindStatusCallback, ByVal pimkBase As IMoniker) As Long
Public DeclareWide PtrSafe Function HlinkResolveStringForData Lib "hlink" (ByVal pwzReference As String, ByVal reserved As Long, ByVal pibc As IBindCtx, ByVal cfmtetc As Long, ByRef rgfmtetc As FORMATETC, ByVal pibsc As IBindStatusCallback, ByVal pimkBase As IMoniker) As Long
Public DeclareWide PtrSafe Function HlinkParseDisplayName Lib "hlink" (ByVal pibc As IBindCtx, ByVal pwzDisplayName As String, ByVal fNoForceAbs As Long, ByRef pcchEaten As Long, ppmk As IMoniker) As Long
Public DeclareWide PtrSafe Function HlinkCreateExtensionServices Lib "hlink" (ByVal pwzAdditionalHeaders As String, ByVal phwnd As LongPtr, ByVal pszUsername As String, ByVal pszPassword As String, ByVal piunkOuter As IUnknown, ByRef riid As UUID, ByRef ppvObj As Any) As Long
Public Declare PtrSafe Function HlinkPreprocessMoniker Lib "hlink" (ByVal pibc As IBindCtx, ByVal pimkIn As IMoniker, ppmk As IMoniker) As Long
Public Declare PtrSafe Function OleSaveToStreamEx Lib "hlink" (ByVal piunk As IUnknown, ByVal pistm As IStream, ByVal fClearDirty As Long) As Long
Public DeclareWide PtrSafe Function HlinkSetSpecialReference Lib "hlink" (ByVal uReference As HLSR, ByVal pwzReference As String) As Long
Public Declare PtrSafe Function HlinkGetSpecialReference Lib "hlink" (ByVal uReference As HLSR, ppwzReference As LongPtr) As Long
Public DeclareWide PtrSafe Function HlinkCreateShortcut Lib "hlink" (ByVal grfHLSHORTCUTF As HLSHORTCUTF, ByVal pihl As IHlink, ByVal pwzDir As String, ByVal pwzFileName As String, ByRef ppwzShortcutFile As String, ByVal dwReserved As Long) As Long
Public DeclareWide PtrSafe Function HlinkCreateShortcutFromMoniker Lib "hlink" (ByVal grfHLSHORTCUTF As HLSHORTCUTF, ByVal pimkTarget As IMoniker, ByVal pwzLocation As String, ByVal pwzDir As String, ByVal pwzFileName As String, ByRef ppwzShortcutFile As LongPtr, ByVal dwReserved As Long) As Long
Public DeclareWide PtrSafe Function HlinkCreateShortcutFromString Lib "hlink" (ByVal grfHLSHORTCUTF As HLSHORTCUTF, ByVal pwzTarget As String, ByVal pwzLocation As String, ByVal pwzDir As String, ByVal pwzFileName As String, ByRef ppwzShortcutFile As LongPtr, ByVal dwReserved As Long) As Long
Public DeclareWide PtrSafe Function HlinkResolveShortcut Lib "hlink" (ByVal pwzShortcutFileName As String, ByVal pihlSite As IHlinkSite, ByVal dwSiteData As Long, ByVal piunkOuter As IUnknown, ByRef riid As UUID, ByRef ppvObj As Any) As Long
Public DeclareWide PtrSafe Function HlinkResolveShortcutToMoniker Lib "hlink" (ByVal pwzShortcutFileName As String, ByRef ppimkTarget As IMoniker, ByRef ppwzLocation As LongPtr) As Long
Public DeclareWide PtrSafe Function HlinkResolveShortcutToString Lib "hlink" (ByVal pwzShortcutFileName As String, ByRef ppwzTarget As Long, ByRef ppwzLocation As LongPtr) As Long
Public DeclareWide PtrSafe Function HlinkIsShortcut Lib "hlink" (ByVal pwzFileName As String) As Long
Public DeclareWide PtrSafe Function HlinkGetValueFromParams Lib "hlink" (ByVal pwzParams As String, ByVal pwzName As String, ByRef ppwzValue As LongPtr) As Long
Public DeclareWide PtrSafe Function HlinkTranslateURL Lib "hlink" (ByVal pwzUrl As String, ByVal grfFlags As HLTRANSLATEF, ppwzTranslatedURL As LongPtr) As Long

End Module

#If WINDEVLIB_LITE = 0 Then
Module wdAPIInternet

    #Region "winhttp"

    'winhttp.h
    
    Public Enum WINHTTP_OPEN_FLAGS
        WINHTTP_FLAG_ASYNC = &H10000000  ' this session is asynchronous (where supported)
        WINHTTP_FLAG_SECURE_DEFAULTS = &H30000000  ' note that this flag also forces async
    End Enum
    Public Enum WINHTTP_ACCESS_TYPES
        WINHTTP_ACCESS_TYPE_DEFAULT_PROXY = 0
        WINHTTP_ACCESS_TYPE_NO_PROXY = 1
        WINHTTP_ACCESS_TYPE_NAMED_PROXY = 3
        WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY = 4
    End Enum
    Public Enum WINHTTP_OPEN_REQ_FLAGS
        WINHTTP_FLAG_SECURE = &H00800000  ' use SSL if applicable (HTTPS)
        WINHTTP_FLAG_ESCAPE_PERCENT = &H00000004  ' if escaping enabled, escape percent as well
        WINHTTP_FLAG_NULL_CODEPAGE = &H00000008  ' assume all symbols are ASCII, use fast convertion
        WINHTTP_FLAG_ESCAPE_DISABLE = &H00000040  ' disable escaping
        WINHTTP_FLAG_ESCAPE_DISABLE_QUERY = &H00000080  ' if escaping enabled escape path part, but do not escape query
        WINHTTP_FLAG_BYPASS_PROXY_CACHE = &H00000100  ' add "pragma: no-cache" request header
        WINHTTP_FLAG_REFRESH = WINHTTP_FLAG_BYPASS_PROXY_CACHE
        WINHTTP_FLAG_AUTOMATIC_CHUNKING = &H00000200  ' Send request without content-length header or chunked TE
    End Enum
    Public Enum WINHTTP_SECURITY
        'SECURITY_FLAG_IGNORE_UNKNOWN_CA  = &H00000100
        SECURITY_FLAG_IGNORE_CERT_WRONG_USAGE = &H00000200
        ' SECURITY_FLAG_IGNORE_CERT_CN_INVALID  = &H00001000  ' bad common name in X509 Cert.
        ' SECURITY_FLAG_IGNORE_CERT_DATE_INVALID  = &H00002000  ' expired X509 Cert.
        SECURITY_FLAG_IGNORE_ALL_CERT_ERRORS = (SECURITY_FLAG_IGNORE_UNKNOWN_CA Or SECURITY_FLAG_IGNORE_CERT_WRONG_USAGE Or SECURITY_FLAG_IGNORE_CERT_CN_INVALID Or SECURITY_FLAG_IGNORE_CERT_DATE_INVALID)
    End Enum

    Public Type WINHTTP_ASYNC_RESULT
        dwResult As LongPtr ' indicates which async API has encountered an error
        dwError As Long ' the error code if the API failed
    End Type

    Public Type WINHTTP_PROXY_INFO
        dwAccessType As Long ' see WINHTTP_ACCESS_* types below
        lpszProxy As LongPtr ' proxy server list
        lpszProxyBypass As LongPtr ' proxy bypass list
    End Type

    Public Enum WINHTTP_AUTOPROXY_FLAGS
        WINHTTP_AUTOPROXY_AUTO_DETECT = &H00000001
        WINHTTP_AUTOPROXY_CONFIG_URL = &H00000002
        WINHTTP_AUTOPROXY_HOST_KEEPCASE = &H00000004
        WINHTTP_AUTOPROXY_HOST_LOWERCASE = &H00000008
        WINHTTP_AUTOPROXY_ALLOW_AUTOCONFIG = &H00000100
        WINHTTP_AUTOPROXY_ALLOW_STATIC = &H00000200
        WINHTTP_AUTOPROXY_ALLOW_CM = &H00000400
        WINHTTP_AUTOPROXY_USE_INTERFACE_CONFIG = &H00000800
        WINHTTP_AUTOPROXY_RUN_INPROCESS = &H00010000
        WINHTTP_AUTOPROXY_RUN_OUTPROCESS_ONLY = &H00020000
        WINHTTP_AUTOPROXY_NO_DIRECTACCESS = &H00040000
        WINHTTP_AUTOPROXY_NO_CACHE_CLIENT = &H00080000
        WINHTTP_AUTOPROXY_NO_CACHE_SVC = &H00100000
        WINHTTP_AUTOPROXY_SORT_RESULTS = &H00400000
    End Enum
    Public Enum WINHTTP_AUTOPROXY_AUTODETECT_FLAGS
        WINHTTP_AUTO_DETECT_TYPE_DHCP = &H00000001
        WINHTTP_AUTO_DETECT_TYPE_DNS_A = &H00000002
    End Enum
    Public Type WINHTTP_AUTOPROXY_OPTIONS
        dwFlags As WINHTTP_AUTOPROXY_FLAGS
        dwAutoDetectFlags As WINHTTP_AUTOPROXY_AUTODETECT_FLAGS
        lpszAutoConfigUrl As LongPtr
        lpvReserved As LongPtr
        dwReserved As Long
        fAutoLogonIfChallenged As BOOL
    End Type
    Public Type WINHTTP_PROXY_RESULT_ENTRY
        fProxy As BOOL ' Is this a proxy or DIRECT?
        fBypass As BOOL ' If DIRECT, is it bypassing a proxy (intranet) or is all traffic DIRECT (internet)
        ProxyScheme As INTERNET_SCHEME ' The scheme of the proxy, SOCKS, HTTP (CERN Proxy), HTTPS (SSL through Proxy)
        pwszProxy As LongPtr ' Hostname of the proxy.
        ProxyPort As Integer 'INTERNET_PORT ' Port of the proxy.
    End Type

    Public Type WINHTTP_PROXY_RESULT
        cEntries As Long
        pEntries As LongPtr 'WINHTTP_PROXY_RESULT_ENTRY
    End Type
    Public Type WINHTTP_PROXY_RESULT_EX
        cEntries As Long
        pEntries As LongPtr 'WINHTTP_PROXY_RESULT_ENTRY
        hProxyDetectionHandle As LongPtr
        dwProxyInterfaceAffinity As Long
    End Type

    Public Const NETWORKING_KEY_BUFSIZE = 128

    Public Type WINHTTP_PROXY_NETWORKING_KEY
        pbBuffer(0 To (NETWORKING_KEY_BUFSIZE - 1)) As Byte
    End Type

    Public Enum WINHTTP_PROXY_TYPES
        WINHTTP_PROXY_TYPE_DIRECT = &H00000001  ' Direct to net
        WINHTTP_PROXY_TYPE_PROXY = &H00000002  ' Via named proxy
        WINHTTP_PROXY_TYPE_AUTO_PROXY_URL = &H00000004  ' Autoproxy URL
        WINHTTP_PROXY_TYPE_AUTO_DETECT = &H00000008  ' Use autoproxy detection
    End Enum
    Public Type WINHTTP_PROXY_SETTINGS
        dwStructSize As Long
        dwFlags As Long
        dwCurrentSettingsVersion As Long
        pwszConnectionName As LongPtr
        pwszProxy As LongPtr
        pwszProxyBypass As LongPtr
        pwszAutoconfigUrl As LongPtr
        pwszAutoconfigSecondaryUrl As LongPtr
        dwAutoDiscoveryFlags As Long
        pwszLastKnownGoodAutoConfigUrl As LongPtr
        dwAutoconfigReloadDelayMins As Long
        ftLastKnownDetectTime As FILETIME
        dwDetectedInterfaceIpCount As Long
        pdwDetectedInterfaceIp As LongPtr
        cNetworkKeys As Long
        pNetworkKeys As LongPtr 'PWINHTTP_PROXY_NETWORKING_KEY
    End Type

    Public Type WINHTTP_CERTIFICATE_INFO
        ' ftExpiry - date the certificate expires.
        ftExpiry As FILETIME
        ' ftStart - date the certificate becomes valid.
        ftStart As FILETIME
        ' lpszSubjectInfo - the name of organization, site, and server
        '   the cert. was issued for.
        lpszSubjectInfo As LongPtr
        ' lpszIssuerInfo - the name of organization, site, and server
        '   the cert was issues by.
        lpszIssuerInfo As LongPtr
        ' lpszProtocolName - the name of the protocol used to provide the secure
        '   connection.
        lpszProtocolName As LongPtr
        ' lpszSignatureAlgName - the name of the algorithm used for signing
        '  the certificate.
        lpszSignatureAlgName As LongPtr
        ' lpszEncryptionAlgName - the name of the algorithm used for
        '  doing encryption over the secure channel (SSL) connection.
        lpszEncryptionAlgName As LongPtr
        ' dwKeySize - size of the key.
        dwKeySize As Long
    End Type

    Public Type SOCKADDR_STORAGE
        /* [ TypeHint(ADDRESS_FAMILIES) ] */ ss_family As Integer
        __ss_pad1(5) As Byte
        __ss_align As LongLong
        __ss_pad2(111) As Byte
    End Type

    Public Type WINHTTP_CONNECTION_INFO
        cbSize As Long
        LocalAddress As SOCKADDR_STORAGE ' local ip, local port
        RemoteAddress As SOCKADDR_STORAGE ' remote ip, remote port
    End Type

    Public Enum WINHTTP_REQUEST_TIME_ENTRY
        WinHttpProxyDetectionStart = 0
        WinHttpProxyDetectionEnd

        WinHttpConnectionAcquireStart
        WinHttpConnectionAcquireWaitEnd
        WinHttpConnectionAcquireEnd

        WinHttpNameResolutionStart
        WinHttpNameResolutionEnd

        WinHttpConnectionEstablishmentStart
        WinHttpConnectionEstablishmentEnd

        WinHttpTlsHandshakeClientLeg1Start
        WinHttpTlsHandshakeClientLeg1End
        WinHttpTlsHandshakeClientLeg2Start
        WinHttpTlsHandshakeClientLeg2End
        WinHttpTlsHandshakeClientLeg3Start
        WinHttpTlsHandshakeClientLeg3End

        WinHttpStreamWaitStart
        WinHttpStreamWaitEnd

        WinHttpSendRequestStart
        WinHttpSendRequestHeadersCompressionStart
        WinHttpSendRequestHeadersCompressionEnd
        WinHttpSendRequestHeadersEnd
        WinHttpSendRequestEnd

        WinHttpReceiveResponseStart
        WinHttpReceiveResponseHeadersDecompressionStart
        WinHttpReceiveResponseHeadersDecompressionEnd
        WinHttpReceiveResponseHeadersEnd
        WinHttpReceiveResponseBodyDecompressionDelta
        WinHttpReceiveResponseEnd

        WinHttpProxyTunnelStart
        WinHttpProxyTunnelEnd

        WinHttpProxyTlsHandshakeClientLeg1Start
        WinHttpProxyTlsHandshakeClientLeg1End
        WinHttpProxyTlsHandshakeClientLeg2Start
        WinHttpProxyTlsHandshakeClientLeg2End
        WinHttpProxyTlsHandshakeClientLeg3Start
        WinHttpProxyTlsHandshakeClientLeg3End

        WinHttpRequestTimeLast
        WinHttpRequestTimeMax = 64
    End Enum
    Public Type WINHTTP_REQUEST_TIMES
        cTimes As Long
        rgullTimes(0 To (WinHttpRequestTimeMax - 1)) As LongLong
    End Type

    Public Enum WINHTTP_REQUEST_STAT_ENTRY
        WinHttpConnectFailureCount = 0
        WinHttpProxyFailureCount

        WinHttpTlsHandshakeClientLeg1Size
        WinHttpTlsHandshakeServerLeg1Size
        WinHttpTlsHandshakeClientLeg2Size
        WinHttpTlsHandshakeServerLeg2Size

        WinHttpRequestHeadersSize
        WinHttpRequestHeadersCompressedSize

        WinHttpResponseHeadersSize
        WinHttpResponseHeadersCompressedSize
        WinHttpResponseBodySize
        WinHttpResponseBodyCompressedSize

        WinHttpProxyTlsHandshakeClientLeg1Size
        WinHttpProxyTlsHandshakeServerLeg1Size
        WinHttpProxyTlsHandshakeClientLeg2Size
        WinHttpProxyTlsHandshakeServerLeg2Size

        WinHttpRequestStatLast
        WinHttpRequestStatMax = 32
    End Enum

    Public Enum WINHTTP_REQUEST_STAT_FLAGS
        WINHTTP_REQUEST_STAT_FLAG_TCP_FAST_OPEN = &H00000001
        WINHTTP_REQUEST_STAT_FLAG_TLS_SESSION_RESUMPTION = &H00000002
        WINHTTP_REQUEST_STAT_FLAG_TLS_FALSE_START = &H00000004
        WINHTTP_REQUEST_STAT_FLAG_PROXY_TLS_SESSION_RESUMPTION = &H00000008
        WINHTTP_REQUEST_STAT_FLAG_PROXY_TLS_FALSE_START = &H00000010
        WINHTTP_REQUEST_STAT_FLAG_FIRST_REQUEST = &H00000020
    End Enum
    Public Type WINHTTP_REQUEST_STATS
        /* [ TypeHint(WINHTTP_REQUEST_STAT_FLAGS) ] */ ullFlags As LongLong
        ulIndex As Long
        cStats As Long
        rgullStats(0 To (WinHttpRequestStatMax - 1)) As LongLong
    End Type

    Public Enum WINHTTP_MATCH_CON_GUID_FLAGS
        WINHTTP_MATCH_CONNECTION_GUID_FLAG_REQUIRE_MARKED_CONNECTION = &H00000001
        WINHTTP_MATCH_CONNECTION_GUID_FLAGS_MASK = WINHTTP_MATCH_CONNECTION_GUID_FLAG_REQUIRE_MARKED_CONNECTION
    End Enum
    Public Type WINHTTP_MATCH_CONNECTION_GUID
        ConnectionGuid As UUID
        /* [ TypeHint(WINHTTP_MATCH_CON_GUID_FLAGS) ] */ ullFlags As LongLong
    End Type

    Public Type WINHTTP_EXTENDED_HEADER
        'union
        '    {
        pwszName As LongPtr
        '        PCSTR  pszName;
        '   };
        '    union
        '    {
        pwszValue As LongPtr
        '        PCSTR  pszValue;
        '    };
    End Type

    ' typedef union _WINHTTP_HEADER_NAME
    ' {
        ' PCWSTR pwszName;
        ' PCSTR  pszName;
    ' } WINHTTP_HEADER_NAME, 
    Public Type WINHTTP_HEADER_NAME
        pwszName As LongPtr
    End Type

    Public Enum WinHttpResolverCacheCfgFlags
        WINHTTP_RESOLVER_CACHE_CONFIG_FLAG_SOFT_LIMIT = &H00000001
        WINHTTP_RESOLVER_CACHE_CONFIG_FLAG_BYPASS_CACHE = &H00000002
        WINHTTP_RESOLVER_CACHE_CONFIG_FLAG_USE_DNS_TTL = &H00000004
        WINHTTP_RESOLVER_CACHE_CONFIG_FLAG_CONN_USE_TTL = &H00000008
    End Enum

    Public Enum WINHTTP_SECURE_DNS_SETTING
        WinHttpSecureDnsSettingDefault = 0
        WinHttpSecureDnsSettingForcePlaintext = 1
        WinHttpSecureDnsSettingRequireEncryption = 2
        WinHttpSecureDnsSettingTryEncryptionWithFallback = 3
        WinHttpSecureDnsSettingMax = 4
    End Enum

    Public Type WINHTTP_RESOLVER_CACHE_CONFIG
        ulMaxResolverCacheEntries As Long
        ' ulMaxCacheEntryAge is the maximum allowed age of a cache entry specified in minutes.
        ulMaxCacheEntryAge As Long
        ' ulMinCacheEntryTtl the minimum TTL of a cache entry specified in seconds.
        ulMinCacheEntryTtl As Long
        SecureDnsSetting As WINHTTP_SECURE_DNS_SETTING
        ' If WINHTTP_RESOLVER_CACHE_CONFIG_FLAG_CONN_USE_TTL is set, then ullCOnnResolutionWaitTime
        ' can be used to control how frequently a re-resolution attempt is made for any connection.
        ' It is specified in 100 nanosecond units, and the default is 600000000 (one minute).
        ullConnResolutionWaitTime As LongLong
        /* [ TypeHint(WinHttpResolverCacheCfgFlags) ] */ ullFlags As LongLong
    End Type

    Public Type WINHTTP_CONNECTION_GROUP
        cConnections As Long
        guidGroup As UUID
    End Type

    Public Type WINHTTP_HOST_CONNECTION_GROUP
        pwszHost As LongPtr
        cConnectionGroups As Long
        pConnectionGroups As LongPtr 'PWINHTTP_CONNECTION_GROUP
    End Type
    Public Type WINHTTP_QUERY_CONNECTION_GROUP_RESULT
        cHosts As Long
        pHostConnectionGroups As LongPtr 'PWINHTTP_HOST_CONNECTION_GROUP
    End Type

    Public Type WINHTTP_HTTP2_RECEIVE_WINDOW
        ulStreamWindow As Long
        ulStreamWindowUpdateDelta As Long
    End Type

    Public Const WINHTTP_TIME_FORMAT_BUFSIZE = 62




    Public Enum WINHTTP_OPTIONS
        WINHTTP_FIRST_OPTION = WINHTTP_OPTION_CALLBACK
        WINHTTP_OPTION_CALLBACK = 1
        WINHTTP_OPTION_RESOLVE_TIMEOUT = 2
        WINHTTP_OPTION_CONNECT_TIMEOUT = 3
        WINHTTP_OPTION_CONNECT_RETRIES = 4
        WINHTTP_OPTION_SEND_TIMEOUT = 5
        WINHTTP_OPTION_RECEIVE_TIMEOUT = 6
        WINHTTP_OPTION_RECEIVE_RESPONSE_TIMEOUT = 7
        WINHTTP_OPTION_HANDLE_TYPE = 9
        WINHTTP_OPTION_READ_BUFFER_SIZE = 12
        WINHTTP_OPTION_WRITE_BUFFER_SIZE = 13
        WINHTTP_OPTION_PARENT_HANDLE = 21
        WINHTTP_OPTION_EXTENDED_ERROR = 24
        WINHTTP_OPTION_SECURITY_FLAGS = 31
        WINHTTP_OPTION_SECURITY_CERTIFICATE_STRUCT = 32
        WINHTTP_OPTION_URL = 34
        WINHTTP_OPTION_SECURITY_KEY_BITNESS = 36
        WINHTTP_OPTION_PROXY = 38
        WINHTTP_OPTION_PROXY_RESULT_ENTRY = 39
        WINHTTP_OPTION_USER_AGENT = 41
        WINHTTP_OPTION_CONTEXT_VALUE = 45
        WINHTTP_OPTION_CLIENT_CERT_CONTEXT = 47
        WINHTTP_OPTION_REQUEST_PRIORITY = 58
        WINHTTP_OPTION_HTTP_VERSION = 59
        WINHTTP_OPTION_DISABLE_FEATURE = 63
        WINHTTP_OPTION_CODEPAGE = 68
        WINHTTP_OPTION_MAX_CONNS_PER_SERVER = 73
        WINHTTP_OPTION_MAX_CONNS_PER_1_0_SERVER = 74
        WINHTTP_OPTION_AUTOLOGON_POLICY = 77
        WINHTTP_OPTION_SERVER_CERT_CONTEXT = 78
        WINHTTP_OPTION_ENABLE_FEATURE = 79
        WINHTTP_OPTION_WORKER_THREAD_COUNT = 80
        WINHTTP_OPTION_PASSPORT_COBRANDING_TEXT = 81
        WINHTTP_OPTION_PASSPORT_COBRANDING_URL = 82
        WINHTTP_OPTION_CONFIGURE_PASSPORT_AUTH = 83
        WINHTTP_OPTION_SECURE_PROTOCOLS = 84
        WINHTTP_OPTION_ENABLETRACING = 85
        WINHTTP_OPTION_PASSPORT_SIGN_OUT = 86
        WINHTTP_OPTION_PASSPORT_RETURN_URL = 87
        WINHTTP_OPTION_REDIRECT_POLICY = 88
        WINHTTP_OPTION_MAX_HTTP_AUTOMATIC_REDIRECTS = 89
        WINHTTP_OPTION_MAX_HTTP_STATUS_CONTINUE = 90
        WINHTTP_OPTION_MAX_RESPONSE_HEADER_SIZE = 91
        WINHTTP_OPTION_MAX_RESPONSE_DRAIN_SIZE = 92
        WINHTTP_OPTION_CONNECTION_INFO = 93
        WINHTTP_OPTION_CLIENT_CERT_ISSUER_LIST = 94
        WINHTTP_OPTION_SPN = 96
        WINHTTP_OPTION_GLOBAL_PROXY_CREDS = 97
        WINHTTP_OPTION_GLOBAL_SERVER_CREDS = 98
        WINHTTP_OPTION_UNLOAD_NOTIFY_EVENT = 99
        WINHTTP_OPTION_REJECT_USERPWD_IN_URL = 100
        WINHTTP_OPTION_USE_GLOBAL_SERVER_CREDENTIALS = 101
        WINHTTP_OPTION_RECEIVE_PROXY_CONNECT_RESPONSE = 103
        WINHTTP_OPTION_IS_PROXY_CONNECT_RESPONSE = 104
        WINHTTP_OPTION_NETWORK_INTERFACE_AFFINITY = 105
        WINHTTP_OPTION_SERVER_SPN_USED = 106
        WINHTTP_OPTION_PROXY_SPN_USED = 107
        WINHTTP_OPTION_SERVER_CBT = 108
        WINHTTP_OPTION_UNSAFE_HEADER_PARSING = 110
        WINHTTP_OPTION_ASSURED_NON_BLOCKING_CALLBACKS = 111
        WINHTTP_OPTION_UPGRADE_TO_WEB_SOCKET = 114
        WINHTTP_OPTION_WEB_SOCKET_CLOSE_TIMEOUT = 115
        WINHTTP_OPTION_WEB_SOCKET_KEEPALIVE_INTERVAL = 116
        WINHTTP_OPTION_DECOMPRESSION = 118
        WINHTTP_OPTION_WEB_SOCKET_RECEIVE_BUFFER_SIZE = 122
        WINHTTP_OPTION_WEB_SOCKET_SEND_BUFFER_SIZE = 123
        WINHTTP_OPTION_TCP_PRIORITY_HINT = 128
        WINHTTP_OPTION_CONNECTION_FILTER = 131
        WINHTTP_OPTION_ENABLE_HTTP_PROTOCOL = 133
        WINHTTP_OPTION_HTTP_PROTOCOL_USED = 134
        WINHTTP_OPTION_KDC_PROXY_SETTINGS = 136
        WINHTTP_OPTION_PROXY_DISABLE_SERVICE_CALLS = 137
        WINHTTP_OPTION_ENCODE_EXTRA = 138
        WINHTTP_OPTION_DISABLE_STREAM_QUEUE = 139
        WINHTTP_OPTION_IPV6_FAST_FALLBACK = 140
        WINHTTP_OPTION_CONNECTION_STATS_V0 = 141
        WINHTTP_OPTION_REQUEST_TIMES = 142
        WINHTTP_OPTION_EXPIRE_CONNECTION = 143
        WINHTTP_OPTION_DISABLE_SECURE_PROTOCOL_FALLBACK = 144
        WINHTTP_OPTION_HTTP_PROTOCOL_REQUIRED = 145
        WINHTTP_OPTION_REQUEST_STATS = 146
        WINHTTP_OPTION_SERVER_CERT_CHAIN_CONTEXT = 147
        WINHTTP_OPTION_CONNECTION_STATS_V1 = 150
        WINHTTP_OPTION_SECURITY_INFO = 151
        WINHTTP_OPTION_TCP_KEEPALIVE = 152
        WINHTTP_OPTION_TCP_FAST_OPEN = 153
        WINHTTP_OPTION_TLS_FALSE_START = 154
        WINHTTP_OPTION_IGNORE_CERT_REVOCATION_OFFLINE = 155
        WINHTTP_OPTION_TLS_PROTOCOL_INSECURE_FALLBACK = 158
        WINHTTP_OPTION_STREAM_ERROR_CODE = 159
        WINHTTP_OPTION_REQUIRE_STREAM_END = 160
        WINHTTP_OPTION_ENABLE_HTTP2_PLUS_CLIENT_CERT = 161
        WINHTTP_OPTION_FAILED_CONNECTION_RETRIES = 162
        WINHTTP_OPTION_HTTP2_KEEPALIVE = 164
        WINHTTP_OPTION_RESOLUTION_HOSTNAME = 165
        WINHTTP_OPTION_SET_TOKEN_BINDING = 166
        WINHTTP_OPTION_TOKEN_BINDING_PUBLIC_KEY = 167
        WINHTTP_OPTION_REFERER_TOKEN_BINDING_HOSTNAME = 168
        WINHTTP_OPTION_HTTP2_PLUS_TRANSFER_ENCODING = 169
        WINHTTP_OPTION_RESOLVER_CACHE_CONFIG = 170
        WINHTTP_OPTION_DISABLE_CERT_CHAIN_BUILDING = 171
        WINHTTP_OPTION_BACKGROUND_CONNECTIONS = 172
        WINHTTP_OPTION_FIRST_AVAILABLE_CONNECTION = 173
        WINHTTP_OPTION_TCP_PRIORITY_STATUS = 177
        WINHTTP_OPTION_CONNECTION_GUID = 178
        WINHTTP_OPTION_MATCH_CONNECTION_GUID = 179
        WINHTTP_OPTION_HTTP2_RECEIVE_WINDOW = 183
        WINHTTP_OPTION_FEATURE_SUPPORTED = 184
        WINHTTP_OPTION_QUIC_STATS = 185
        WINHTTP_OPTION_HTTP3_KEEPALIVE = 188
        WINHTTP_OPTION_HTTP3_HANDSHAKE_TIMEOUT = 189
        WINHTTP_OPTION_HTTP3_INITIAL_RTT = 190
        WINHTTP_OPTION_HTTP3_STREAM_ERROR_CODE = 191
        WINHTTP_OPTION_REQUEST_ANNOTATION = 192
        WINHTTP_OPTION_DISABLE_PROXY_AUTH_SCHEMES = 193
        WINHTTP_OPTION_REVERT_IMPERSONATION_SERVER_CERT = 194
        WINHTTP_OPTION_DISABLE_GLOBAL_POOLING = 195
        WINHTTP_OPTION_USE_SESSION_SCH_CRED = 196
        WINHTTP_OPTION_QUIC_STATS_V2 = 200
        WINHTTP_OPTION_QUIC_STREAM_STATS = 202
        WINHTTP_OPTION_USE_LOOKASIDE = 203
        WINHTTP_OPTION_ERROR_LOG_GUID = 204
        WINHTTP_LAST_OPTION = WINHTTP_OPTION_ERROR_LOG_GUID
        WINHTTP_OPTION_USERNAME = &H1000
        WINHTTP_OPTION_PASSWORD = &H1001
        WINHTTP_OPTION_PROXY_USERNAME = &H1002
        WINHTTP_OPTION_PROXY_PASSWORD = &H1003
    End Enum

    Public Const WINHTTP_CONNS_PER_SERVER_UNLIMITED As Long = -1

    Public Enum WinHttpConRetryConditions
        WINHTTP_CONNECTION_RETRY_CONDITION_408 = &H1
        WINHTTP_CONNECTION_RETRY_CONDITION_SSL_HANDSHAKE = &H2
        WINHTTP_CONNECTION_RETRY_CONDITION_STALE_CONNECTION = &H4
        WINHTTP_CONNECTION_RETRY_CONDITION_MASK = (WINHTTP_CONNECTION_RETRY_CONDITION_408 Or WINHTTP_CONNECTION_RETRY_CONDITION_SSL_HANDSHAKE Or WINHTTP_CONNECTION_RETRY_CONDITION_STALE_CONNECTION)
    End Enum
    Public Type WINHTTP_FAILED_CONNECTION_RETRIES
        dwMaxRetries As Long
        dwAllowedRetryConditions As WinHttpConRetryConditions
    End Type

    Public Enum WinHttpDecompFlags
        WINHTTP_DECOMPRESSION_FLAG_GZIP = &H00000001
        WINHTTP_DECOMPRESSION_FLAG_DEFLATE = &H00000002
        WINHTTP_DECOMPRESSION_FLAG_ALL = (WINHTTP_DECOMPRESSION_FLAG_GZIP Or WINHTTP_DECOMPRESSION_FLAG_DEFLATE)
    End Enum

    Public Enum WinHttpHttpProtocolFlags
        WINHTTP_PROTOCOL_FLAG_HTTP2 = &H1
        WINHTTP_PROTOCOL_FLAG_HTTP3 = &H2
        WINHTTP_PROTOCOL_MASK = (WINHTTP_PROTOCOL_FLAG_HTTP2 Or WINHTTP_PROTOCOL_FLAG_HTTP3)
    End Enum

    Public Const WINHTTP_OPTION_REQUEST_ANNOTATION_MAX_LENGTH = &HFA00

    Public Enum WinHttpAutoLogonSecurity
        WINHTTP_AUTOLOGON_SECURITY_LEVEL_MEDIUM = 0
        WINHTTP_AUTOLOGON_SECURITY_LEVEL_LOW = 1
        WINHTTP_AUTOLOGON_SECURITY_LEVEL_HIGH = 2
        WINHTTP_AUTOLOGON_SECURITY_LEVEL_PROXY_ONLY = 3
        WINHTTP_AUTOLOGON_SECURITY_LEVEL_DEFAULT = WINHTTP_AUTOLOGON_SECURITY_LEVEL_MEDIUM
        WINHTTP_AUTOLOGON_SECURITY_LEVEL_MAX = WINHTTP_AUTOLOGON_SECURITY_LEVEL_PROXY_ONLY
    End Enum

    Public Enum WinHttpRedirectFlags
        WINHTTP_OPTION_REDIRECT_POLICY_NEVER = 0
        WINHTTP_OPTION_REDIRECT_POLICY_DISALLOW_HTTPS_TO_HTTP = 1
        WINHTTP_OPTION_REDIRECT_POLICY_ALWAYS = 2
        WINHTTP_OPTION_REDIRECT_POLICY_LAST = WINHTTP_OPTION_REDIRECT_POLICY_ALWAYS
        WINHTTP_OPTION_REDIRECT_POLICY_DEFAULT = WINHTTP_OPTION_REDIRECT_POLICY_DISALLOW_HTTPS_TO_HTTP
        WINHTTP_DISABLE_PASSPORT_AUTH = &H00000000
        WINHTTP_ENABLE_PASSPORT_AUTH = &H10000000
        WINHTTP_DISABLE_PASSPORT_KEYRING = &H20000000
        WINHTTP_ENABLE_PASSPORT_KEYRING = &H40000000
    End Enum

    Public Enum WinHttpProxyDisableFlags
        WINHTTP_PROXY_DISABLE_SCHEME_BASIC = &H00000001
        WINHTTP_PROXY_DISABLE_SCHEME_DIGEST = &H00000002
        WINHTTP_PROXY_DISABLE_SCHEME_NTLM = &H00000004
        WINHTTP_PROXY_DISABLE_SCHEME_KERBEROS = &H00000008
        WINHTTP_PROXY_DISABLE_SCHEME_NEGOTIATE = &H00000010
        WINHTTP_PROXY_DISABLE_AUTH_LOCAL_SERVICE = &H00000100
    End Enum

    Public Enum WinHttpFeatureDisableFlags
        WINHTTP_DISABLE_COOKIES = &H00000001
        WINHTTP_DISABLE_REDIRECTS = &H00000002
        WINHTTP_DISABLE_AUTHENTICATION = &H00000004
        WINHTTP_DISABLE_KEEP_ALIVE = &H00000008
    End Enum

    Public Enum WinHttpFeatureEnableFlags
        WINHTTP_ENABLE_SSL_REVOCATION = &H00000001
        WINHTTP_ENABLE_SSL_REVERT_IMPERSONATION = &H00000002
    End Enum

    Public Enum WinHttpSPNFlags
        WINHTTP_DISABLE_SPN_SERVER_PORT = &H00000000
        WINHTTP_ENABLE_SPN_SERVER_PORT = &H00000001
        WINHTTP_OPTION_SPN_MASK = WINHTTP_ENABLE_SPN_SERVER_PORT
    End Enum

    Public Enum WinHttpHandleTypes
        WINHTTP_HANDLE_TYPE_SESSION = 1
        WINHTTP_HANDLE_TYPE_CONNECT = 2
        WINHTTP_HANDLE_TYPE_REQUEST = 3
        WINHTTP_HANDLE_TYPE_PROXY_RESOLVER = 4
        WINHTTP_HANDLE_TYPE_WEBSOCKET = 5
    End Enum

    Public Enum WinHttpAuthSchemes
        WINHTTP_AUTH_SCHEME_BASIC = &H00000001
        WINHTTP_AUTH_SCHEME_NTLM = &H00000002
        WINHTTP_AUTH_SCHEME_PASSPORT = &H00000004
        WINHTTP_AUTH_SCHEME_DIGEST = &H00000008
        WINHTTP_AUTH_SCHEME_NEGOTIATE = &H00000010
    End Enum

    Public Type WINHTTP_CREDS
        lpszUserName As String
        lpszPassword As String
        lpszRealm As String
        dwAuthScheme As WinHttpAuthSchemes
        lpszHostName As String
        dwPort As Long
    End Type
    Public Type WINHTTP_CREDS_EX
        lpszUserName As String
        lpszPassword As String
        lpszRealm As String
        dwAuthScheme As Long
        lpszHostName As String
        dwPort As Long
        lpszUrl As String
    End Type

    Public Enum WinHttpAuthTargets
        WINHTTP_AUTH_TARGET_SERVER = &H00000000
        WINHTTP_AUTH_TARGET_PROXY = &H00000001
    End Enum

    Public Enum WinHttpCallbackStatusFlags
        WINHTTP_CALLBACK_STATUS_FLAG_CERT_REV_FAILED = &H00000001
        WINHTTP_CALLBACK_STATUS_FLAG_INVALID_CERT = &H00000002
        WINHTTP_CALLBACK_STATUS_FLAG_CERT_REVOKED = &H00000004
        WINHTTP_CALLBACK_STATUS_FLAG_INVALID_CA = &H00000008
        WINHTTP_CALLBACK_STATUS_FLAG_CERT_CN_INVALID = &H00000010
        WINHTTP_CALLBACK_STATUS_FLAG_CERT_DATE_INVALID = &H00000020
        WINHTTP_CALLBACK_STATUS_FLAG_CERT_WRONG_USAGE = &H00000040
        WINHTTP_CALLBACK_STATUS_FLAG_SECURITY_CHANNEL_ERROR = &H80000000
    End Enum

    Public Enum WinHttpSecureProtocolFlags
        WINHTTP_FLAG_SECURE_PROTOCOL_SSL2 = &H00000008
        WINHTTP_FLAG_SECURE_PROTOCOL_SSL3 = &H00000020
        WINHTTP_FLAG_SECURE_PROTOCOL_TLS1 = &H00000080
        WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_1 = &H00000200
        WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_2 = &H00000800
        WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_3 = &H00002000
        WINHTTP_FLAG_SECURE_PROTOCOL_ALL = (WINHTTP_FLAG_SECURE_PROTOCOL_SSL2 Or WINHTTP_FLAG_SECURE_PROTOCOL_SSL3 Or WINHTTP_FLAG_SECURE_PROTOCOL_TLS1)
    End Enum

    Public Enum WinHttpCBReqErr
        API_RECEIVE_RESPONSE = (1)
        API_QUERY_DATA_AVAILABLE = (2)
        API_READ_DATA = (3)
        API_WRITE_DATA = (4)
        API_SEND_REQUEST = (5)
        API_GET_PROXY_FOR_URL = (6)
        API_GET_PROXY_SETTINGS = (7)
    End Enum

    Public Const WINHTTP_INVALID_STATUS_CALLBACK = (-1)



    Public Enum WINHTTP_QUERY_HEADER
        WINHTTP_QUERY_MIME_VERSION = 0
        WINHTTP_QUERY_CONTENT_TYPE = 1
        WINHTTP_QUERY_CONTENT_TRANSFER_ENCODING = 2
        WINHTTP_QUERY_CONTENT_ID = 3
        WINHTTP_QUERY_CONTENT_DESCRIPTION = 4
        WINHTTP_QUERY_CONTENT_LENGTH = 5
        WINHTTP_QUERY_CONTENT_LANGUAGE = 6
        WINHTTP_QUERY_ALLOW = 7
        WINHTTP_QUERY_PUBLIC = 8
        WINHTTP_QUERY_DATE = 9
        WINHTTP_QUERY_EXPIRES = 10
        WINHTTP_QUERY_LAST_MODIFIED = 11
        WINHTTP_QUERY_MESSAGE_ID = 12
        WINHTTP_QUERY_URI = 13
        WINHTTP_QUERY_DERIVED_FROM = 14
        WINHTTP_QUERY_COST = 15
        WINHTTP_QUERY_LINK = 16
        WINHTTP_QUERY_PRAGMA = 17
        WINHTTP_QUERY_VERSION = 18  ' special: part of status line
        WINHTTP_QUERY_STATUS_CODE = 19  ' special: part of status line
        WINHTTP_QUERY_STATUS_TEXT = 20  ' special: part of status line
        WINHTTP_QUERY_RAW_HEADERS = 21  ' special: all headers as ASCIIZ
        WINHTTP_QUERY_RAW_HEADERS_CRLF = 22  ' special: all headers
        WINHTTP_QUERY_CONNECTION = 23
        WINHTTP_QUERY_ACCEPT = 24
        WINHTTP_QUERY_ACCEPT_CHARSET = 25
        WINHTTP_QUERY_ACCEPT_ENCODING = 26
        WINHTTP_QUERY_ACCEPT_LANGUAGE = 27
        WINHTTP_QUERY_AUTHORIZATION = 28
        WINHTTP_QUERY_CONTENT_ENCODING = 29
        WINHTTP_QUERY_FORWARDED = 30
        WINHTTP_QUERY_FROM = 31
        WINHTTP_QUERY_IF_MODIFIED_SINCE = 32
        WINHTTP_QUERY_LOCATION = 33
        WINHTTP_QUERY_ORIG_URI = 34
        WINHTTP_QUERY_REFERER = 35
        WINHTTP_QUERY_RETRY_AFTER = 36
        WINHTTP_QUERY_SERVER = 37
        WINHTTP_QUERY_TITLE = 38
        WINHTTP_QUERY_USER_AGENT = 39
        WINHTTP_QUERY_WWW_AUTHENTICATE = 40
        WINHTTP_QUERY_PROXY_AUTHENTICATE = 41
        WINHTTP_QUERY_ACCEPT_RANGES = 42
        WINHTTP_QUERY_SET_COOKIE = 43
        WINHTTP_QUERY_COOKIE = 44
        WINHTTP_QUERY_REQUEST_METHOD = 45  ' special: GET/POST etc.
        WINHTTP_QUERY_REFRESH = 46
        WINHTTP_QUERY_CONTENT_DISPOSITION = 47
    '  HTTP 1.1 defined headers
        WINHTTP_QUERY_AGE = 48
        WINHTTP_QUERY_CACHE_CONTROL = 49
        WINHTTP_QUERY_CONTENT_BASE = 50
        WINHTTP_QUERY_CONTENT_LOCATION = 51
        WINHTTP_QUERY_CONTENT_MD5 = 52
        WINHTTP_QUERY_CONTENT_RANGE = 53
        WINHTTP_QUERY_ETAG = 54
        WINHTTP_QUERY_HOST = 55
        WINHTTP_QUERY_IF_MATCH = 56
        WINHTTP_QUERY_IF_NONE_MATCH = 57
        WINHTTP_QUERY_IF_RANGE = 58
        WINHTTP_QUERY_IF_UNMODIFIED_SINCE = 59
        WINHTTP_QUERY_MAX_FORWARDS = 60
        WINHTTP_QUERY_PROXY_AUTHORIZATION = 61
        WINHTTP_QUERY_RANGE = 62
        WINHTTP_QUERY_TRANSFER_ENCODING = 63
        WINHTTP_QUERY_UPGRADE = 64
        WINHTTP_QUERY_VARY = 65
        WINHTTP_QUERY_VIA = 66
        WINHTTP_QUERY_WARNING = 67
        WINHTTP_QUERY_EXPECT = 68
        WINHTTP_QUERY_PROXY_CONNECTION = 69
        WINHTTP_QUERY_UNLESS_MODIFIED_SINCE = 70
        WINHTTP_QUERY_PROXY_SUPPORT = 75
        WINHTTP_QUERY_AUTHENTICATION_INFO = 76
        WINHTTP_QUERY_PASSPORT_URLS = 77
        WINHTTP_QUERY_PASSPORT_CONFIG = 78
        WINHTTP_QUERY_MAX = 78
        WINHTTP_QUERY_EX_ALL_HEADERS = WINHTTP_QUERY_RAW_HEADERS
    '  WINHTTP_QUERY_CUSTOM - if this special value is supplied as the dwInfoLevel
    '  parameter of WinHttpQueryHeaders() then the lpBuffer parameter contains the name
    '  of the header we are to query
        WINHTTP_QUERY_CUSTOM = 65535
    End Enum

    Public Enum WINHTTP_QUERY_HEADER_FLAGS
        WINHTTP_QUERY_FLAG_REQUEST_HEADERS = &H80000000
    '  WINHTTP_QUERY_FLAG_SYSTEMTIME - if this bit is set in the dwInfoLevel parameter
    '  of WinHttpQueryHeaders() AND the header being queried contains date information,
    '  e.g. the "Expires:" header then lpBuffer will contain a SYSTEMTIME structure
    '  containing the date and time information converted from the header string
        WINHTTP_QUERY_FLAG_SYSTEMTIME = &H40000000
    '  WINHTTP_QUERY_FLAG_NUMBER - if this bit is set in the dwInfoLevel parameter of
    '  HttpQueryHeader(), then the value of the header will be converted to a number
    '  before being returned to the caller, if applicable
        WINHTTP_QUERY_FLAG_NUMBER = &H20000000
    '  HTTP_QUERY_FLAG_NUMBER64 - if this bit is set in the dwInfoLevel parameter of
    '  HttpQueryInfo(), then the value of the header will be converted to a 64bit
    '  number before being returned to the caller, if applicable
        WINHTTP_QUERY_FLAG_NUMBER64 = &H08000000
    '  HTTP_QUERY_FLAG_TRAILERS - if this bit is set in the dwInfoLevel parameter of
    '  WinHttpQueryHeaders(), then the response trailers will be queried, if they exist
        WINHTTP_QUERY_FLAG_TRAILERS = &H02000000
    '  WINHTTP_QUERY_FLAG_WIRE_ENCODING - if this bit is set in the dwInfoLevel parameter
    '  of WinHttpQueryHeaders(), then the value of the header will be returned
    '  with as it gets encoded when sent over the wire.
        WINHTTP_QUERY_FLAG_WIRE_ENCODING = &H01000000
    End Enum

    Public Enum WINHTTP_CALLBACK_STATUS_VALUES
        WINHTTP_CALLBACK_STATUS_RESOLVING_NAME = &H00000001
        WINHTTP_CALLBACK_STATUS_NAME_RESOLVED = &H00000002
        WINHTTP_CALLBACK_STATUS_CONNECTING_TO_SERVER = &H00000004
        WINHTTP_CALLBACK_STATUS_CONNECTED_TO_SERVER = &H00000008
        WINHTTP_CALLBACK_STATUS_SENDING_REQUEST = &H00000010
        WINHTTP_CALLBACK_STATUS_REQUEST_SENT = &H00000020
        WINHTTP_CALLBACK_STATUS_RECEIVING_RESPONSE = &H00000040
        WINHTTP_CALLBACK_STATUS_RESPONSE_RECEIVED = &H00000080
        WINHTTP_CALLBACK_STATUS_CLOSING_CONNECTION = &H00000100
        WINHTTP_CALLBACK_STATUS_CONNECTION_CLOSED = &H00000200
        WINHTTP_CALLBACK_STATUS_HANDLE_CREATED = &H00000400
        WINHTTP_CALLBACK_STATUS_HANDLE_CLOSING = &H00000800
        WINHTTP_CALLBACK_STATUS_DETECTING_PROXY = &H00001000
        WINHTTP_CALLBACK_STATUS_REDIRECT = &H00004000
        WINHTTP_CALLBACK_STATUS_INTERMEDIATE_RESPONSE = &H00008000&
        WINHTTP_CALLBACK_STATUS_SECURE_FAILURE = &H00010000
        WINHTTP_CALLBACK_STATUS_HEADERS_AVAILABLE = &H00020000
        WINHTTP_CALLBACK_STATUS_DATA_AVAILABLE = &H00040000
        WINHTTP_CALLBACK_STATUS_READ_COMPLETE = &H00080000
        WINHTTP_CALLBACK_STATUS_WRITE_COMPLETE = &H00100000
        WINHTTP_CALLBACK_STATUS_REQUEST_ERROR = &H00200000
        WINHTTP_CALLBACK_STATUS_SENDREQUEST_COMPLETE = &H00400000
        WINHTTP_CALLBACK_STATUS_GETPROXYFORURL_COMPLETE = &H01000000
        WINHTTP_CALLBACK_STATUS_CLOSE_COMPLETE = &H02000000
        WINHTTP_CALLBACK_STATUS_SHUTDOWN_COMPLETE = &H04000000
        WINHTTP_CALLBACK_STATUS_GETPROXYSETTINGS_COMPLETE = &H08000000
        WINHTTP_CALLBACK_STATUS_SETTINGS_WRITE_COMPLETE = &H10000000
        WINHTTP_CALLBACK_STATUS_SETTINGS_READ_COMPLETE = &H20000000
    End Enum

    Public Enum WINHTTP_CALLBACK_STATUS_FLAGS
        WINHTTP_CALLBACK_FLAG_RESOLVE_NAME = (WINHTTP_CALLBACK_STATUS_RESOLVING_NAME Or WINHTTP_CALLBACK_STATUS_NAME_RESOLVED)
        WINHTTP_CALLBACK_FLAG_CONNECT_TO_SERVER = (WINHTTP_CALLBACK_STATUS_CONNECTING_TO_SERVER Or WINHTTP_CALLBACK_STATUS_CONNECTED_TO_SERVER)
        WINHTTP_CALLBACK_FLAG_SEND_REQUEST = (WINHTTP_CALLBACK_STATUS_SENDING_REQUEST Or WINHTTP_CALLBACK_STATUS_REQUEST_SENT)
        WINHTTP_CALLBACK_FLAG_RECEIVE_RESPONSE = (WINHTTP_CALLBACK_STATUS_RECEIVING_RESPONSE Or WINHTTP_CALLBACK_STATUS_RESPONSE_RECEIVED)
        WINHTTP_CALLBACK_FLAG_CLOSE_CONNECTION = (WINHTTP_CALLBACK_STATUS_CLOSING_CONNECTION Or WINHTTP_CALLBACK_STATUS_CONNECTION_CLOSED)
        WINHTTP_CALLBACK_FLAG_HANDLES = (WINHTTP_CALLBACK_STATUS_HANDLE_CREATED Or WINHTTP_CALLBACK_STATUS_HANDLE_CLOSING)
        WINHTTP_CALLBACK_FLAG_DETECTING_PROXY = WINHTTP_CALLBACK_STATUS_DETECTING_PROXY
        WINHTTP_CALLBACK_FLAG_REDIRECT = WINHTTP_CALLBACK_STATUS_REDIRECT
        WINHTTP_CALLBACK_FLAG_INTERMEDIATE_RESPONSE = WINHTTP_CALLBACK_STATUS_INTERMEDIATE_RESPONSE
        WINHTTP_CALLBACK_FLAG_SECURE_FAILURE = WINHTTP_CALLBACK_STATUS_SECURE_FAILURE
        WINHTTP_CALLBACK_FLAG_SENDREQUEST_COMPLETE = WINHTTP_CALLBACK_STATUS_SENDREQUEST_COMPLETE
        WINHTTP_CALLBACK_FLAG_HEADERS_AVAILABLE = WINHTTP_CALLBACK_STATUS_HEADERS_AVAILABLE
        WINHTTP_CALLBACK_FLAG_DATA_AVAILABLE = WINHTTP_CALLBACK_STATUS_DATA_AVAILABLE
        WINHTTP_CALLBACK_FLAG_READ_COMPLETE = WINHTTP_CALLBACK_STATUS_READ_COMPLETE
        WINHTTP_CALLBACK_FLAG_WRITE_COMPLETE = WINHTTP_CALLBACK_STATUS_WRITE_COMPLETE
        WINHTTP_CALLBACK_FLAG_REQUEST_ERROR = WINHTTP_CALLBACK_STATUS_REQUEST_ERROR
        WINHTTP_CALLBACK_FLAG_GETPROXYFORURL_COMPLETE = WINHTTP_CALLBACK_STATUS_GETPROXYFORURL_COMPLETE
        WINHTTP_CALLBACK_FLAG_GETPROXYSETTINGS_COMPLETE = WINHTTP_CALLBACK_STATUS_GETPROXYSETTINGS_COMPLETE
        WINHTTP_CALLBACK_FLAG_ALL_COMPLETIONS = (WINHTTP_CALLBACK_STATUS_SENDREQUEST_COMPLETE Or WINHTTP_CALLBACK_STATUS_HEADERS_AVAILABLE Or WINHTTP_CALLBACK_STATUS_DATA_AVAILABLE Or WINHTTP_CALLBACK_STATUS_READ_COMPLETE Or WINHTTP_CALLBACK_STATUS_WRITE_COMPLETE Or WINHTTP_CALLBACK_STATUS_REQUEST_ERROR Or WINHTTP_CALLBACK_STATUS_GETPROXYFORURL_COMPLETE Or WINHTTP_CALLBACK_STATUS_GETPROXYSETTINGS_COMPLETE)
        WINHTTP_CALLBACK_FLAG_ALL_NOTIFICATIONS = &Hffffffff
    End Enum


    Public Enum INTERNET_SCHEME_WINHTTP
        INTERNET_SCHEME_HTTP_WINHTTP = (1)
        INTERNET_SCHEME_HTTPS_WINHTTP = (2)
        INTERNET_SCHEME_FTP_WINHTTP = (3)
        INTERNET_SCHEME_SOCKS_WINHTTP = (4)
    End Enum

    Public Const WINHTTP_NO_PROXY_NAME As LongPtr = vbNullPtr
    Public Const WINHTTP_NO_PROXY_BYPASS As LongPtr = vbNullPtr
    Public Const WINHTTP_NO_CLIENT_CERT_CONTEXT  As LongPtr = vbNullPtr
    '  WinHttpOpenRequest prettifers for optional parameters
    Public Const WINHTTP_NO_REFERER  As LongPtr = vbNullPtr
    Public Const WINHTTP_DEFAULT_ACCEPT_TYPES As LongPtr = vbNullPtr

    Public Enum WinHttpAddHeaderFlags
        WINHTTP_ADDREQ_INDEX_MASK = &H0000FFFF&
        WINHTTP_ADDREQ_FLAGS_MASK = &HFFFF0000
    '  WINHTTP_ADDREQ_FLAG_ADD_IF_NEW - the header will only be added if it doesn't
    '  already exist
        WINHTTP_ADDREQ_FLAG_ADD_IF_NEW = &H10000000
    '  WINHTTP_ADDREQ_FLAG_ADD - if WINHTTP_ADDREQ_FLAG_REPLACE is set but the header is
    '  not found then if this flag is set, the header is added anyway, so long as
    '  there is a valid header-value
        WINHTTP_ADDREQ_FLAG_ADD = &H20000000
    '  WINHTTP_ADDREQ_FLAG_COALESCE - coalesce headers with same name. e.g.
    '  "Accept: text/*" and "Accept: audio/*" with this flag results in a single
    '  header: "Accept: text/*, audio/*"
        WINHTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA = &H40000000
        WINHTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON = &H01000000
        WINHTTP_ADDREQ_FLAG_COALESCE = WINHTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA
    '  WINHTTP_ADDREQ_FLAG_REPLACE - replaces the specified header. Only one header can
    '  be supplied in the buffer. If the header to be replaced is not the first
    '  in a list of headers with the same name, then the relative index should be
    '  supplied in the low 8 bits of the dwModifiers parameter. If the header-value
    '  part is missing, then the header is removed
        WINHTTP_ADDREQ_FLAG_REPLACE = &H80000000
    '  values for ullFlags member of WINHTTP_EXTENDED_HEADER
    '  WINHTTP_EXTENDED_HEADER_FLAG_UNICODE - indicates the value of the request header
    '  is unicode.
    End Enum
    Public Enum WinHttpExHeaderFlags
        WINHTTP_EXTENDED_HEADER_FLAG_UNICODE = &H00000001
    End Enum

    Public Const WINHTTP_IGNORE_REQUEST_TOTAL_LENGTH  = 0
    '  WinHttpSendRequest prettifiers for optional parameters.
    Public Const WINHTTP_NO_ADDITIONAL_HEADERS  As LongPtr = vbNullPtr
    Public Const WINHTTP_NO_REQUEST_DATA  As LongPtr = vbNullPtr
    '  WinHttpQueryHeaders prettifiers for optional parameters.
    Public Const WINHTTP_HEADER_NAME_BY_INDEX  As LongPtr = vbNullPtr
    Public Const WINHTTP_NO_OUTPUT_BUFFER  As LongPtr = vbNullPtr
    Public Const WINHTTP_NO_HEADER_INDEX  As LongPtr = vbNullPtr

    Public Type WINHTTP_CURRENT_USER_IE_PROXY_CONFIG
        fAutoDetect As BOOL
        lpszAutoConfigUrl As LongPtr
        lpszProxy As LongPtr
        lpszProxyBypass As LongPtr
    End Type

    Public Enum WinHttpErrors
        WINHTTP_ERROR_BASE = 12000
        ERROR_WINHTTP_OUT_OF_HANDLES = (WINHTTP_ERROR_BASE + 1)
        ERROR_WINHTTP_TIMEOUT = (WINHTTP_ERROR_BASE + 2)
        ERROR_WINHTTP_INTERNAL_ERROR = (WINHTTP_ERROR_BASE + 4)
        ERROR_WINHTTP_INVALID_URL = (WINHTTP_ERROR_BASE + 5)
        ERROR_WINHTTP_UNRECOGNIZED_SCHEME = (WINHTTP_ERROR_BASE + 6)
        ERROR_WINHTTP_NAME_NOT_RESOLVED = (WINHTTP_ERROR_BASE + 7)
        ERROR_WINHTTP_INVALID_OPTION = (WINHTTP_ERROR_BASE + 9)
        ERROR_WINHTTP_OPTION_NOT_SETTABLE = (WINHTTP_ERROR_BASE + 11)
        ERROR_WINHTTP_SHUTDOWN = (WINHTTP_ERROR_BASE + 12)
        ERROR_WINHTTP_LOGIN_FAILURE = (WINHTTP_ERROR_BASE + 15)
        ERROR_WINHTTP_OPERATION_CANCELLED = (WINHTTP_ERROR_BASE + 17)
        ERROR_WINHTTP_INCORRECT_HANDLE_TYPE = (WINHTTP_ERROR_BASE + 18)
        ERROR_WINHTTP_INCORRECT_HANDLE_STATE = (WINHTTP_ERROR_BASE + 19)
        ERROR_WINHTTP_CANNOT_CONNECT = (WINHTTP_ERROR_BASE + 29)
        ERROR_WINHTTP_CONNECTION_ERROR = (WINHTTP_ERROR_BASE + 30)
        ERROR_WINHTTP_RESEND_REQUEST = (WINHTTP_ERROR_BASE + 32)
        ERROR_WINHTTP_CLIENT_AUTH_CERT_NEEDED = (WINHTTP_ERROR_BASE + 44)
    '  WinHttpRequest Component errors
        ERROR_WINHTTP_CANNOT_CALL_BEFORE_OPEN = (WINHTTP_ERROR_BASE + 100)
        ERROR_WINHTTP_CANNOT_CALL_BEFORE_SEND = (WINHTTP_ERROR_BASE + 101)
        ERROR_WINHTTP_CANNOT_CALL_AFTER_SEND = (WINHTTP_ERROR_BASE + 102)
        ERROR_WINHTTP_CANNOT_CALL_AFTER_OPEN = (WINHTTP_ERROR_BASE + 103)
    '  HTTP API errors
        ERROR_WINHTTP_HEADER_NOT_FOUND = (WINHTTP_ERROR_BASE + 150)
        ERROR_WINHTTP_INVALID_SERVER_RESPONSE = (WINHTTP_ERROR_BASE + 152)
        ERROR_WINHTTP_INVALID_HEADER = (WINHTTP_ERROR_BASE + 153)
        ERROR_WINHTTP_INVALID_QUERY_REQUEST = (WINHTTP_ERROR_BASE + 154)
        ERROR_WINHTTP_HEADER_ALREADY_EXISTS = (WINHTTP_ERROR_BASE + 155)
        ERROR_WINHTTP_REDIRECT_FAILED = (WINHTTP_ERROR_BASE + 156)
    '  additional WinHttp API error codes
    '  additional WinHttp API error codes
        ERROR_WINHTTP_AUTO_PROXY_SERVICE_ERROR = (WINHTTP_ERROR_BASE + 178)
        ERROR_WINHTTP_BAD_AUTO_PROXY_SCRIPT = (WINHTTP_ERROR_BASE + 166)
        ERROR_WINHTTP_UNABLE_TO_DOWNLOAD_SCRIPT = (WINHTTP_ERROR_BASE + 167)
        ERROR_WINHTTP_UNHANDLED_SCRIPT_TYPE = (WINHTTP_ERROR_BASE + 176)
        ERROR_WINHTTP_SCRIPT_EXECUTION_ERROR = (WINHTTP_ERROR_BASE + 177)
        ERROR_WINHTTP_NOT_INITIALIZED = (WINHTTP_ERROR_BASE + 172)
        ERROR_WINHTTP_SECURE_FAILURE = (WINHTTP_ERROR_BASE + 175)
    '  Certificate security errors. These are raised only by the WinHttpRequest
    '  component. The WinHTTP Win32 API will return ERROR_WINHTTP_SECURE_FAILE and
    '  provide additional information via the WINHTTP_CALLBACK_STATUS_SECURE_FAILURE
    '  callback notification.
        ERROR_WINHTTP_SECURE_CERT_DATE_INVALID = (WINHTTP_ERROR_BASE + 37)
        ERROR_WINHTTP_SECURE_CERT_CN_INVALID = (WINHTTP_ERROR_BASE + 38)
        ERROR_WINHTTP_SECURE_INVALID_CA = (WINHTTP_ERROR_BASE + 45)
        ERROR_WINHTTP_SECURE_CERT_REV_FAILED = (WINHTTP_ERROR_BASE + 57)
        ERROR_WINHTTP_SECURE_CHANNEL_ERROR = (WINHTTP_ERROR_BASE + 157)
        ERROR_WINHTTP_SECURE_INVALID_CERT = (WINHTTP_ERROR_BASE + 169)
        ERROR_WINHTTP_SECURE_CERT_REVOKED = (WINHTTP_ERROR_BASE + 170)
        ERROR_WINHTTP_SECURE_CERT_WRONG_USAGE = (WINHTTP_ERROR_BASE + 179)
        ERROR_WINHTTP_AUTODETECTION_FAILED = (WINHTTP_ERROR_BASE + 180)
        ERROR_WINHTTP_HEADER_COUNT_EXCEEDED = (WINHTTP_ERROR_BASE + 181)
        ERROR_WINHTTP_HEADER_SIZE_OVERFLOW = (WINHTTP_ERROR_BASE + 182)
        ERROR_WINHTTP_CHUNKED_ENCODING_HEADER_SIZE_OVERFLOW = (WINHTTP_ERROR_BASE + 183)
        ERROR_WINHTTP_RESPONSE_DRAIN_OVERFLOW = (WINHTTP_ERROR_BASE + 184)
        ERROR_WINHTTP_CLIENT_CERT_NO_PRIVATE_KEY = (WINHTTP_ERROR_BASE + 185)
        ERROR_WINHTTP_CLIENT_CERT_NO_ACCESS_PRIVATE_KEY = (WINHTTP_ERROR_BASE + 186)
        ERROR_WINHTTP_CLIENT_AUTH_CERT_NEEDED_PROXY = (WINHTTP_ERROR_BASE + 187)
        ERROR_WINHTTP_SECURE_FAILURE_PROXY = (WINHTTP_ERROR_BASE + 188)
        ERROR_WINHTTP_RESERVED_189 = (WINHTTP_ERROR_BASE + 189)
        ERROR_WINHTTP_HTTP_PROTOCOL_MISMATCH = (WINHTTP_ERROR_BASE + 190)
        ERROR_WINHTTP_GLOBAL_CALLBACK_FAILED = (WINHTTP_ERROR_BASE + 191)
        ERROR_WINHTTP_FEATURE_DISABLED = (WINHTTP_ERROR_BASE + 192)
        WINHTTP_ERROR_LAST = ERROR_WINHTTP_FEATURE_DISABLED
    End Enum

    Public Enum WinHttpReadDataExFlags
        WINHTTP_READ_DATA_EX_FLAG_FILL_BUFFER = &h1
    End Enum

    Public Enum WinHttpQueryConGroupFlags
        WINHTTP_QUERY_CONNECTION_GROUP_FLAG_INSECURE = &H1
    End Enum

    Public Enum WinHttpResetFlags
        WINHTTP_RESET_STATE = &H00000001
        WINHTTP_RESET_SWPAD_CURRENT_NETWORK = &H00000002
        WINHTTP_RESET_SWPAD_ALL = &H00000004
        WINHTTP_RESET_SCRIPT_CACHE = &H00000008
        WINHTTP_RESET_ALL = &H0000FFFF&
        WINHTTP_RESET_NOTIFY_NETWORK_CHANGED = &H00010000
        WINHTTP_RESET_OUT_OF_PROC = &H00020000
        WINHTTP_RESET_DISCARD_RESOLVERS = &H00040000
    End Enum

    Public Delegate Sub WINHTTP_STATUS_CALLBACK (ByVal hInternet As LongPtr, ByVal dwContext As LongPtr, ByVal dwInternetStatus As WINHTTP_CALLBACK_STATUS_VALUES, ByVal lpvStatusInformation As LongPtr, ByVal dwStatusInformationLength As Long)
    ' #If WDL_NO_DELEGATES Then
    Public Declare PtrSafe Function WinHttpSetStatusCallback Lib "winhttp" (ByVal hInternet As LongPtr, ByVal lpfnInternetCallback As LongPtr, ByVal dwNotificationFlags As WINHTTP_CALLBACK_STATUS_FLAGS, ByVal dwReserved As LongPtr) As LongPtr
    ' #Else
    ' Public Declare PtrSafe Function WinHttpSetStatusCallback Lib "winhttp" (ByVal hInternet As LongPtr, ByVal lpfnInternetCallback As WINHTTP_STATUS_CALLBACK, ByVal dwNotificationFlags As WINHTTP_CALLBACK_STATUS_FLAGS, ByVal dwReserved As LongPtr) As LongPtr
    ' #End If
    [Description("Set buffer to WINHTTP_TIME_FORMAT_BUFSIZE")]
    Public DeclareWide PtrSafe Function WinHttpTimeFromSystemTime Lib "winhttp" (pst As SYSTEMTIME, ByVal pwszTime As String) As BOOL
    Public DeclareWide PtrSafe Function WinHttpTimeToSystemTime Lib "winhttp" (ByVal pwszTime As String, pst As SYSTEMTIME) As BOOL
    Public Declare PtrSafe Function WinHttpCrackUrl Lib "winhttp" (ByVal pwszUrl As LongPtr, ByVal dwUrlLength As Long, ByVal dwFlags As INET_ICU_FLAGS, lpUrlComponents As URL_COMPONENTS) As BOOL
    Public Declare PtrSafe Function WinHttpCreateUrl Lib "winhttp" (lpUrlComponents As URL_COMPONENTS, ByVal dwFlags As INET_ICU_FLAGS, ByVal pwszUrl As LongPtr, pdwUrlLength As Long) As BOOL
    Public Declare PtrSafe Function WinHttpCheckPlatform Lib "winhttp" () As BOOL
    Public Declare PtrSafe Function WinHttpGetDefaultProxyConfiguration Lib "winhttp" (pProxyInfo As WINHTTP_PROXY_INFO) As BOOL
    Public Declare PtrSafe Function WinHttpSetDefaultProxyConfiguration Lib "winhttp" (pProxyInfo As WINHTTP_PROXY_INFO) As BOOL
    Public Declare PtrSafe Function WinHttpOpen Lib "winhttp" (ByVal pszAgentW As LongPtr, ByVal dwAccessType As WINHTTP_ACCESS_TYPES, ByVal pszProxyW As LongPtr, ByVal pszProxyBypassW As LongPtr, ByVal dwFlags As WINHTTP_OPEN_FLAGS) As LongPtr
    Public Declare PtrSafe Function WinHttpCloseHandle Lib "winhttp" (ByVal hInternet As LongPtr) As BOOL
    Public Declare PtrSafe Function WinHttpConnect Lib "winhttp" (ByVal hSession As LongPtr, ByVal pswzServerName As LongPtr, ByVal nServerPort As Long, ByVal dwReserved As Long) As LongPtr
    Public Declare PtrSafe Function WinHttpReadData Lib "winhttp" (ByVal hRequest As LongPtr, lpBuffer As Any, ByVal dwNumberOfBytesToRead As Long, lpdwNumberOfBytesRead As Long) As BOOL
    Public Declare PtrSafe Function WinHttpReadDataEx Lib "winhttp" (ByVal hRequest As LongPtr, lpBuffer As Any, ByVal dwNumberOfBytesToRead As Long, lpdwNumberOfBytesRead As Long, [TypeHint(WinHttpReadDataExFlags)] ByVal ullFlags As LongLong, ByVal cbProperty As Long, pvProperty As Any) As BOOL
    Public Declare PtrSafe Function WinHttpWriteData Lib "winhttp" (ByVal hRequest As LongPtr, lpBuffer As Any, ByVal dwNumberOfBytesToWrite As Long, lpdwNumberOfBytesWritten As Long) As BOOL
    Public Declare PtrSafe Function WinHttpQueryDataAvailable Lib "winhttp" (ByVal hRequest As LongPtr, lpdwNumberOfBytesAvailable As Long) As BOOL
    Public Declare PtrSafe Function WinHttpQueryOption Lib "winhttp" (ByVal hInternet As LongPtr, ByVal dwOption As WINHTTP_OPTIONS, lpBuffer As Any, lpdwBufferLength As Long) As BOOL
    Public Declare PtrSafe Function WinHttpSetOption Lib "winhttp" (ByVal hInternet As LongPtr, ByVal dwOption As WINHTTP_OPTIONS, lpBuffer As Any, ByVal dwBufferLength As Long) As BOOL
    Public Declare PtrSafe Function WinHttpSetTimeouts Lib "winhttp" (ByVal hInternet As LongPtr, ByVal nResolveTimeout As Long, ByVal nConnectTimeout As Long, ByVal nSendTimeout As Long, ByVal nReceiveTimeout As Long) As BOOL
    Public DeclareWide PtrSafe Function WinHttpIsHostInProxyBypassList Lib "winhttp" (pProxyInfo As WINHTTP_PROXY_INFO, ByVal pwszHost As String, ByVal tScheme As INTERNET_SCHEME_WINHTTP, [TypeHint(INET_DEF_PORTS)] ByVal nPort As Integer, pfIsInBypassList As BOOL) As Long
    Public Declare PtrSafe Function WinHttpOpenRequest Lib "winhttp" (ByVal hConnect As LongPtr, ByVal pwszVerb As LongPtr, ByVal pwszObjectName As LongPtr, ByVal pwszVersion As LongPtr, ByVal pwszReferrer As LongPtr, ppwszAcceptTypes As LongPtr, ByVal dwFlags As WINHTTP_OPEN_REQ_FLAGS) As LongPtr
    Public Declare PtrSafe Function WinHttpAddRequestHeaders Lib "winhttp" (ByVal hRequest As LongPtr, ByVal lpszHeaders As LongPtr, ByVal dwHeadersLength As Long, ByVal dwModifiers As WinHttpAddHeaderFlags) As BOOL
    Public Declare PtrSafe Function WinHttpAddRequestHeadersEx Lib "winhttp" (ByVal hRequest As LongPtr, ByVal dwModifiers As WinHttpAddHeaderFlags, [TypeHint(WinHttpExHeaderFlags)] ByVal ullFlags As LongLong, ByVal ullExtra As LongLong, ByVal cHeaders As Long, pHeaders As WINHTTP_EXTENDED_HEADER) As Long
    Public Declare PtrSafe Function WinHttpSendRequest Lib "winhttp" (ByVal hRequest As LongPtr, ByVal lpszHeaders As LongPtr, ByVal dwHeadersLength As Long, lpOptional As Any, ByVal dwOptionalLength As Long, ByVal dwTotalLength As Long, ByVal dwContext As LongPtr) As BOOL
    Public Declare PtrSafe Function WinHttpSetCredentials Lib "winhttp" (ByVal hRequest As LongPtr, ByVal AuthTargets As WinHttpAuthTargets, ByVal AuthScheme As WinHttpAuthSchemes, ByVal pwszUserName As LongPtr, ByVal pwszPassword As LongPtr, pAuthParams As Any) As BOOL
    Public Declare PtrSafe Function WinHttpQueryAuthSchemes Lib "winhttp" (ByVal hRequest As LongPtr, lpdwSupportedSchemes As WinHttpAuthSchemes, lpdwFirstScheme As WinHttpAuthSchemes, pdwAuthTarget As WinHttpAuthTargets) As BOOL
    Public Declare PtrSafe Function WinHttpQueryAuthParams Lib "winhttp" (ByVal hRequest As LongPtr, ByVal AuthScheme As WinHttpAuthSchemes, pAuthParams As LongPtr) As BOOL
    Public Declare PtrSafe Function WinHttpReceiveResponse Lib "winhttp" (ByVal hRequest As LongPtr, ByVal lpReserved As LongPtr) As BOOL
    Public Declare PtrSafe Function WinHttpQueryHeaders Lib "winhttp" (ByVal hRequest As LongPtr, ByVal dwInfoLevel As WINHTTP_QUERY_HEADER, ByVal pwszName As LongPtr, ByRef lpBuffer As Any, ByRef lpdwBufferLength As Long, ByRef lpdwIndex As Long) As BOOL
    Public Declare PtrSafe Function WinHttpQueryHeadersEx Lib "winhttp" (ByVal hRequest As LongPtr, ByVal dwInfoLevel As WINHTTP_QUERY_HEADER, ByVal ullFlags As LongLong, [TypeHint(CodePageDefaults)] ByVal uiCodePage As Long, ByRef pdwIndex As Long, pHeaderName As WINHTTP_HEADER_NAME, ByRef pBuffer As Any, ByRef pdwBufferLength As Long, ppHeaders As LongPtr, pdwHeadersCount As Long) As Long
    Public Declare PtrSafe Function WinHttpQueryConnectionGroup Lib "winhttp" (ByVal hInternet As LongPtr, pGuidConnection As UUID, [TypeHint(WinHttpQueryConGroupFlags)] ByVal ullFlags As LongLong, ppResult As LongPtr) As Long
    Public Declare PtrSafe Sub WinHttpFreeQueryConnectionGroupResult Lib "winhttp" (pResult As WINHTTP_QUERY_CONNECTION_GROUP_RESULT)
    Public Declare PtrSafe Function WinHttpDetectAutoProxyConfigUrl Lib "winhttp" (ByVal dwAutoDetectFlags As WINHTTP_AUTOPROXY_AUTODETECT_FLAGS, ppwstrAutoConfigUrl As LongPtr) As BOOL
    Public Declare PtrSafe Function WinHttpGetProxyForUrl Lib "winhttp" (ByVal hSession As LongPtr, ByVal lpcwszUrl As LongPtr, pAutoProxyOptions As WINHTTP_AUTOPROXY_OPTIONS, pProxyInfo As WINHTTP_PROXY_INFO) As BOOL
    Public Declare PtrSafe Function WinHttpCreateProxyResolver Lib "winhttp" (ByVal hSession As LongPtr, phResolver As LongPtr) As Long
    Public Declare PtrSafe Function WinHttpGetProxyForUrlEx Lib "winhttp" (ByVal hResolver As LongPtr, ByVal pcwszUrl As LongPtr, pAutoProxyOptions As WINHTTP_AUTOPROXY_OPTIONS, ByVal pContext As LongPtr) As Long
    Public Declare PtrSafe Function WinHttpGetProxyForUrlEx2 Lib "winhttp" (ByVal hResolver As LongPtr, ByVal pcwszUrl As LongPtr, pAutoProxyOptions As WINHTTP_AUTOPROXY_OPTIONS, ByVal cbInterfaceSelectionContext As Long, pInterfaceSelectionContext As Any, ByVal pContext As LongPtr) As Long
    Public Declare PtrSafe Function WinHttpGetProxyResult Lib "winhttp" (ByVal hResolver As LongPtr, pProxyResult As WINHTTP_PROXY_RESULT) As Long
    Public Declare PtrSafe Function WinHttpGetProxyResultEx Lib "winhttp" (ByVal hResolver As LongPtr, pProxyResultEx As WINHTTP_PROXY_RESULT_EX) As Long
    Public Declare PtrSafe Sub WinHttpFreeProxyResult Lib "winhttp" (pProxyResult As WINHTTP_PROXY_RESULT)
    Public Declare PtrSafe Sub WinHttpFreeProxyResultEx Lib "winhttp" (pProxyResultEx As WINHTTP_PROXY_RESULT_EX)
    Public Declare PtrSafe Function WinHttpResetAutoProxy Lib "winhttp" (ByVal hSession As LongPtr, ByVal dwFlags As WinHttpResetFlags) As BOOL
    Public Declare PtrSafe Function WinHttpGetIEProxyConfigForCurrentUser Lib "winhttp" (pProxyConfig As WINHTTP_CURRENT_USER_IE_PROXY_CONFIG) As BOOL
    Public Declare PtrSafe Function WinHttpWriteProxySettings Lib "winhttp" (ByVal hSession As LongPtr, ByVal fForceUpdate As BOOL, pWinHttpProxySettings As WINHTTP_PROXY_SETTINGS) As Long
    Public Declare PtrSafe Function WinHttpReadProxySettings Lib "winhttp" (ByVal hSession As LongPtr, ByVal pcwszConnectionName As LongPtr, ByVal fFallBackToDefaultSettings As BOOL, ByVal fSetAutoDiscoverForDefaultSettings As BOOL, pdwSettingsVersion As Long, pfDefaultSettingsAreReturned As BOOL, pWinHttpProxySettings As WINHTTP_PROXY_SETTINGS) As Long
    Public Declare PtrSafe Sub WinHttpFreeProxySettings Lib "winhttp" (pWinHttpProxySettings As WINHTTP_PROXY_SETTINGS)
    Public Declare PtrSafe Function WinHttpGetProxySettingsVersion Lib "winhttp" (ByVal hSession As LongPtr, pdwProxySettingsVersion As Long) As Long
    Public Declare PtrSafe Function WinHttpSetProxySettingsPerUser Lib "winhttp" (ByVal fProxySettingsPerUser As BOOL) As Long

    Public Enum WINHTTP_WEB_SOCKET_OPERATION
        WINHTTP_WEB_SOCKET_SEND_OPERATION = 0
        WINHTTP_WEB_SOCKET_RECEIVE_OPERATION = 1
        WINHTTP_WEB_SOCKET_CLOSE_OPERATION = 2
        WINHTTP_WEB_SOCKET_SHUTDOWN_OPERATION = 3
    End Enum

    Public Enum WINHTTP_WEB_SOCKET_BUFFER_TYPE
        WINHTTP_WEB_SOCKET_BINARY_MESSAGE_BUFFER_TYPE = 0
        WINHTTP_WEB_SOCKET_BINARY_FRAGMENT_BUFFER_TYPE = 1
        WINHTTP_WEB_SOCKET_UTF8_MESSAGE_BUFFER_TYPE = 2
        WINHTTP_WEB_SOCKET_UTF8_FRAGMENT_BUFFER_TYPE = 3
        WINHTTP_WEB_SOCKET_CLOSE_BUFFER_TYPE = 4
    End Enum
    Public Enum WINHTTP_WEB_SOCKET_CLOSE_STATUS
        WINHTTP_WEB_SOCKET_SUCCESS_CLOSE_STATUS = 1000
        WINHTTP_WEB_SOCKET_ENDPOINT_TERMINATED_CLOSE_STATUS = 1001
        WINHTTP_WEB_SOCKET_PROTOCOL_ERROR_CLOSE_STATUS = 1002
        WINHTTP_WEB_SOCKET_INVALID_DATA_TYPE_CLOSE_STATUS = 1003
        WINHTTP_WEB_SOCKET_EMPTY_CLOSE_STATUS = 1005
        WINHTTP_WEB_SOCKET_ABORTED_CLOSE_STATUS = 1006
        WINHTTP_WEB_SOCKET_INVALID_PAYLOAD_CLOSE_STATUS = 1007
        WINHTTP_WEB_SOCKET_POLICY_VIOLATION_CLOSE_STATUS = 1008
        WINHTTP_WEB_SOCKET_MESSAGE_TOO_BIG_CLOSE_STATUS = 1009
        WINHTTP_WEB_SOCKET_UNSUPPORTED_EXTENSIONS_CLOSE_STATUS = 1010
        WINHTTP_WEB_SOCKET_SERVER_ERROR_CLOSE_STATUS = 1011
        WINHTTP_WEB_SOCKET_SECURE_HANDSHAKE_ERROR_CLOSE_STATUS = 1015
    End Enum

    Public Type WINHTTP_WEB_SOCKET_ASYNC_RESULT
        AsyncResult As WINHTTP_ASYNC_RESULT
        Operation As WINHTTP_WEB_SOCKET_OPERATION
    End Type

    Public Type WINHTTP_WEB_SOCKET_STATUS
        dwBytesTransferred As Long
        eBufferType As WINHTTP_WEB_SOCKET_BUFFER_TYPE
    End Type

    Public Const WINHTTP_WEB_SOCKET_MAX_CLOSE_REASON_LENGTH  = 123
    Public Const WINHTTP_WEB_SOCKET_MIN_KEEPALIVE_VALUE  = 15000

    Public Enum WinHttpProxyNotifyFlags
        WINHTTP_PROXY_NOTIFY_CHANGE = &H1
    End Enum

    Public Declare PtrSafe Function WinHttpWebSocketCompleteUpgrade Lib "winhttp" (ByVal hRequest As LongPtr, ByVal pContext As LongPtr) As LongPtr
    Public Declare PtrSafe Function WinHttpWebSocketSend Lib "winhttp" (ByVal hWebSocket As LongPtr, ByVal eEBufferType As WINHTTP_WEB_SOCKET_BUFFER_TYPE, pvBuffer As Any, ByVal dwBufferLength As Long) As Long
    Public Declare PtrSafe Function WinHttpWebSocketReceive Lib "winhttp" (ByVal hWebSocket As LongPtr, ByRef pvBuffer As Any, ByVal dwBufferLength As Long, ByRef pdwBytesRead As Long, ByRef peEBufferType As WINHTTP_WEB_SOCKET_BUFFER_TYPE) As Long
    Public Declare PtrSafe Function WinHttpWebSocketShutdown Lib "winhttp" (ByVal hWebSocket As LongPtr, [TypeHint(WINHTTP_WEB_SOCKET_CLOSE_STATUS)] ByVal usStatus As Integer, pvReason As Any, ByVal dwReasonLength As Long) As Long
    Public Declare PtrSafe Function WinHttpWebSocketClose Lib "winhttp" (ByVal hWebSocket As LongPtr, [TypeHint(WINHTTP_WEB_SOCKET_CLOSE_STATUS)] ByVal usStatus As Integer, ByVal pvReason As LongPtr, ByVal dwReasonLength As Long) As Long
    Public Declare PtrSafe Function WinHttpWebSocketQueryCloseStatus Lib "winhttp" (ByVal hWebSocket As LongPtr, [TypeHint(WINHTTP_WEB_SOCKET_CLOSE_STATUS)] ByRef usStatus As Integer, ByRef pvReason As Any, ByVal dwReasonLength As Long, ByRef pdwReasonLengthConsumed As Long) As Long
    Public Declare PtrSafe Function WinHttpRegisterProxyChangeNotificatione Lib "winhttp" ([TypeHint(WinHttpProxyNotifyFlags)] ByVal ullFlags As LongLong, ByVal pfnCallback As LongPtr, ByVal pvContext As LongPtr, hRegistration As LongPtr) As Long
    Public Declare PtrSafe Function WinHttpUnregisterProxyChangeNotification Lib "winhttp" (ByVal hRegistration As LongPtr) As Long

    Public Enum WINHTTP_PROXY_SETTINGS_TYPE
        WinHttpProxySettingsTypeUnknown
        WinHttpProxySettingsTypeWsl
        WinHttpProxySettingsTypeWsa
    End Enum

    #If Win64 = 0 Then
    [PackingAlignment(4)]
    #End If
    Public Type WINHTTP_PROXY_SETTINGS_EX
        ullGenerationId As LongLong
        /* [ TypeHint(WINHTTP_PROXY_TYPES) ] */ ullFlags As LongLong
        pcwszAutoconfigUrl As LongPtr 'PCWSTR
        pcwszProxy As LongPtr 'PCWSTR
        pcwszSecureProxy As LongPtr 'PCWSTR
        cProxyBypasses As Long
        rgpcwszProxyBypasses As LongPtr 'PCWSTR
        dwInterfaceIndex As Long
        pcwszConnectionName As LongPtr 'PCWSTR
    End Type

    Public Type WINHTTP_PROXY_SETTINGS_PARAM
        ullFlags As LongLong
        pcwszConnectionName As LongPtr 'PCWSTR
        pcwszProbeHost As LongPtr 'PCWSTR
    End Type

    Public Declare PtrSafe Function WinHttpGetProxySettingsEx Lib "winhttp" (ByVal hResolver As LongPtr, ByVal ProxySettingsType As WINHTTP_PROXY_SETTINGS_TYPE, pProxySettingsParam As WINHTTP_PROXY_SETTINGS_PARAM, Optional ByVal pContext As LongPtr) As Long
    Public Declare PtrSafe Function WinHttpGetProxySettingsResultEx Lib "winhttp" (ByVal hResolver As LongPtr, pProxySettingsEx As Any) As Long
    Public Declare PtrSafe Function WinHttpFreeProxySettingsEx Lib "winhttp" (ByVal ProxySettingsType As WINHTTP_PROXY_SETTINGS_TYPE, pProxySettingsEx As Any) As Long

    Public Enum WinHttpFeatures
        WINHTTP_FEATURE_DISABLE_STREAM_QUEUE = 1
        WINHTTP_FEATURE_IPV6_FAST_FALLBACK = 2
        WINHTTP_FEATURE_CONNECTION_STATS_V0 = 3
        WINHTTP_FEATURE_REQUEST_TIMES = 4
        WINHTTP_FEATURE_EXPIRE_CONNECTION = 5
        WINHTTP_FEATURE_DISABLE_SECURE_PROTOCOL_FALLBACK = 6
        WINHTTP_FEATURE_HTTP_PROTOCOL_REQUIRED = 7
        WINHTTP_FEATURE_REQUEST_STATS = 8
        WINHTTP_FEATURE_SERVER_CERT_CHAIN_CONTEXT = 9
        WINHTTP_FEATURE_CONNECTION_STATS_V1 = 12
        WINHTTP_FEATURE_SECURITY_INFO = 13
        WINHTTP_FEATURE_TCP_KEEPALIVE = 14
        WINHTTP_FEATURE_TCP_FAST_OPEN = 15
        WINHTTP_FEATURE_TLS_FALSE_START = 16
        WINHTTP_FEATURE_IGNORE_CERT_REVOCATION_OFFLINE = 17
        WINHTTP_FEATURE_TLS_PROTOCOL_INSECURE_FALLBACK = 20
        WINHTTP_FEATURE_STREAM_ERROR_CODE = 21
        WINHTTP_FEATURE_REQUIRE_STREAM_END = 22
        WINHTTP_FEATURE_ENABLE_HTTP2_PLUS_CLIENT_CERT = 23
        WINHTTP_FEATURE_FAILED_CONNECTION_RETRIES = 24
        WINHTTP_FEATURE_HTTP2_KEEPALIVE = 26
        WINHTTP_FEATURE_RESOLUTION_HOSTNAME = 27
        WINHTTP_FEATURE_SET_TOKEN_BINDING = 28
        WINHTTP_FEATURE_TOKEN_BINDING_PUBLIC_KEY = 29
        WINHTTP_FEATURE_REFERER_TOKEN_BINDING_HOSTNAME = 30
        WINHTTP_FEATURE_HTTP2_PLUS_TRANSFER_ENCODING = 31
        WINHTTP_FEATURE_RESOLVER_CACHE_CONFIG = 32
        WINHTTP_FEATURE_DISABLE_CERT_CHAIN_BUILDING = 33
        WINHTTP_FEATURE_BACKGROUND_CONNECTIONS = 34
        WINHTTP_FEATURE_FIRST_AVAILABLE_CONNECTION = 35
        WINHTTP_FEATURE_TCP_PRIORITY_STATUS = 37
        WINHTTP_FEATURE_CONNECTION_GUID = 38
        WINHTTP_FEATURE_MATCH_CONNECTION_GUID = 39
        WINHTTP_FEATURE_HTTP2_RECEIVE_WINDOW = 43
        WINHTTP_FEATURE_IS_FEATURE_SUPPORTED = 44
        WINHTTP_FEATURE_ADD_REQUEST_HEADERS_EX = 46
        WINHTTP_FEATURE_SET_PROXY_SETINGS_PER_USER = 47
        WINHTTP_FEATURE_READ_DATA_EX = 48
        WINHTTP_FEATURE_QUERY_HEADERS_EX = 49
        WINHTTP_FEATURE_QUERY_CONNECTION_GROUP = 50
        WINHTTP_FEATURE_FREE_QUERY_CONNECTION_GROUP_RESULT = 51
        WINHTTP_FEATURE_SECURITY_FLAG_IGNORE_ALL_CERT_ERRORS = 52
        WINHTTP_FEATURE_FLAG_SECURE_DEFAULTS = 53
        WINHTTP_FEATURE_EXTENDED_HEADER_FLAG_UNICODE = 54
        WINHTTP_FEATURE_QUERY_FLAG_TRAILERS = 55
        WINHTTP_FEATURE_QUERY_FLAG_WIRE_ENCODING = 56
        WINHTTP_FEATURE_RESOLVER_CACHE_CONFIG_FLAG_SOFT_LIMIT = 57
        WINHTTP_FEATURE_RESOLVER_CACHE_CONFIG_FLAG_BYPASS_CACHE = 58
        WINHTTP_FEATURE_FLAG_AUTOMATIC_CHUNKING = 59
        WINHTTP_FEATURE_QUERY_CONNECTION_GROUP_FLAG_INSECURE = 60
        WINHTTP_FEATURE_MATCH_CONNECTION_GUID_FLAG_REQUIRE_MARKED_CONNECTION = 61
        WINHTTP_FEATURE_QUERY_EX_ALL_HEADERS = 62
        WINHTTP_FEATURE_READ_DATA_EX_FLAG_FILL_BUFFER = 63
        WINHTTP_FEATURE_RESOLVER_CACHE_CONFIG_FLAG_USE_DNS_TTL = 64
        WINHTTP_FEATURE_RESOLVER_CACHE_CONFIG_FLAG_CONN_USE_TTL = 65
        WINHTTP_FEATURE_QUIC_STATS = 66
        WINHTTP_FEATURE_HTTP3_KEEPALIVE = 69
        WINHTTP_FEATURE_HTTP3_HANDSHAKE_TIMEOUT = 70
        WINHTTP_FEATURE_HTTP3_INITIAL_RTT = 71
        WINHTTP_FEATURE_HTTP3_STREAM_ERROR_CODE = 72
        WINHTTP_FEATURE_REQUEST_ANNOTATION = 73
        WINHTTP_FEATURE_DISABLE_PROXY_AUTH_SCHEMES = 74
        WINHTTP_FEATURE_REVERT_IMPERSONATION_SERVER_CERT = 75
    End Enum

    #End Region

    #Region "websocket"
    'websocket.h, 100% coverage

    Public Const WEB_SOCKET_MAX_CLOSE_REASON_LENGTH = 123

    Public Enum WEB_SOCKET_CLOSE_STATUS
        WEB_SOCKET_SUCCESS_CLOSE_STATUS = 1000
        WEB_SOCKET_ENDPOINT_UNAVAILABLE_CLOSE_STATUS = 1001
        WEB_SOCKET_PROTOCOL_ERROR_CLOSE_STATUS = 1002
        WEB_SOCKET_INVALID_DATA_TYPE_CLOSE_STATUS = 1003
        WEB_SOCKET_EMPTY_CLOSE_STATUS = 1005
        WEB_SOCKET_ABORTED_CLOSE_STATUS = 1006
        WEB_SOCKET_INVALID_PAYLOAD_CLOSE_STATUS = 1007
        WEB_SOCKET_POLICY_VIOLATION_CLOSE_STATUS = 1008
        WEB_SOCKET_MESSAGE_TOO_BIG_CLOSE_STATUS = 1009
        WEB_SOCKET_UNSUPPORTED_EXTENSIONS_CLOSE_STATUS = 1010
        WEB_SOCKET_SERVER_ERROR_CLOSE_STATUS = 1011
        WEB_SOCKET_SECURE_HANDSHAKE_ERROR_CLOSE_STATUS = 1015
    End Enum

    Public Enum WEB_SOCKET_PROPERTY_TYPE
        WEB_SOCKET_RECEIVE_BUFFER_SIZE_PROPERTY_TYPE = 0
        WEB_SOCKET_SEND_BUFFER_SIZE_PROPERTY_TYPE = 1
        WEB_SOCKET_DISABLE_MASKING_PROPERTY_TYPE = 2
        WEB_SOCKET_ALLOCATED_BUFFER_PROPERTY_TYPE = 3
        WEB_SOCKET_DISABLE_UTF8_VERIFICATION_PROPERTY_TYPE = 4
        WEB_SOCKET_KEEPALIVE_INTERVAL_PROPERTY_TYPE = 5
        WEB_SOCKET_SUPPORTED_VERSIONS_PROPERTY_TYPE = 6
    End Enum

    Public Enum WEB_SOCKET_ACTION_QUEUE
        WEB_SOCKET_SEND_ACTION_QUEUE = &H1
        WEB_SOCKET_RECEIVE_ACTION_QUEUE = &H2
        WEB_SOCKET_ALL_ACTION_QUEUE
    End Enum

    Public Enum WEB_SOCKET_BUFFER_TYPE
        WEB_SOCKET_UTF8_MESSAGE_BUFFER_TYPE = &H80000000
        WEB_SOCKET_UTF8_FRAGMENT_BUFFER_TYPE = &H80000001
        WEB_SOCKET_BINARY_MESSAGE_BUFFER_TYPE = &H80000002
        WEB_SOCKET_BINARY_FRAGMENT_BUFFER_TYPE = &H80000003
        WEB_SOCKET_CLOSE_BUFFER_TYPE = &H80000004
        WEB_SOCKET_PING_PONG_BUFFER_TYPE = &H80000005
        WEB_SOCKET_UNSOLICITED_PONG_BUFFER_TYPE = &H80000006
    End Enum

    Public Enum WEB_SOCKET_ACTION
        WEB_SOCKET_NO_ACTION = 0
        WEB_SOCKET_SEND_TO_NETWORK_ACTION = 1
        WEB_SOCKET_INDICATE_SEND_COMPLETE_ACTION = 2
        WEB_SOCKET_RECEIVE_FROM_NETWORK_ACTION = 3
        WEB_SOCKET_INDICATE_RECEIVE_COMPLETE_ACTION = 4
    End Enum

    Public Type WEB_SOCKET_PROPERTY
        Type As WEB_SOCKET_PROPERTY_TYPE
        pvValue As LongPtr
        ulValueSize As Long
    End Type

    Public Type WEB_SOCKET_HTTP_HEADER
        pcName As LongPtr
        ulNameLength As Long
        pcValue As LongPtr
        ulValueLength As Long
    End Type


    Public Type WEB_SOCKET_BUFFER_DATA
        pbBuffer As LongPtr
        ulBufferLength As Long
        Reserved As Integer
    End Type

    Public Type WEB_SOCKET_BUFFER_CLOSESTATUS
        pbReason As LongPtr
        ulReasonLength As Long
        /* TypeHint(WEB_SOCKET_CLOSE_STATUS) ] */ usStatus As Integer
    End Type

    [Description("Single versions of the union options are available via `WEB_SOCKET_BUFFER_DATA` and `WEB_SOCKET_BUFFER_CLOSESTATUS`.")]
    Public Type WEB_SOCKET_BUFFER
    ' typedef union _WEB_SOCKET_BUFFER
    ' {
        ' struct
        ' {
            ' _Field_size_bytes_(ulBufferLength) PBYTE pbBuffer;
            ' ULONG ulBufferLength;
        ' } Data;

        ' struct
        ' {
            ' _Field_size_bytes_(ulReasonLength) PBYTE pbReason;
            ' _Field_range_(0, WEB_SOCKET_MAX_CLOSE_REASON_LENGTH) ULONG ulReasonLength;
            ' USHORT usStatus;
        ' } CloseStatus;
    ' } WEB_SOCKET_BUFFER, 
        BufferOrReason As LongPtr
        BufferOrReasonLength As Long
        usStatus As Integer
    End Type


    Public Declare PtrSafe Function WebSocketCreateClientHandle Lib "websocket" (pProperties As WEB_SOCKET_PROPERTY, ByVal ulPropertyCount As Long, phWebSocket As LongPtr) As Long
    Public Declare PtrSafe Function WebSocketBeginClientHandshake Lib "websocket" (ByVal hWebSocket As LongPtr, pszSubprotocols As String, ByVal ulSubprotocolCount As Long, pszExtentions As String, ByVal ulExtensionCount As Long, pInitialHeaders As WEB_SOCKET_HTTP_HEADER, ByVal ulInitialHeaderCount As Long, pAdditionalHeaders As LongPtr, pulAdditionalHeaderCount As Long) As Long
    Public Declare PtrSafe Function WebSocketEndClientHandshake Lib "websocket" (ByVal hWebSocket As LongPtr, pResponseHeaders As WEB_SOCKET_HTTP_HEADER, ByVal ulReponseHeaderCount As Long, Optional pulSelectedExtensions As Long, Optional pulSelectedExtensionCount As Long, Optional pulSelectedSubprotocol As Long) As Long
    Public Declare PtrSafe Function WebSocketCreateServerHandle Lib "websocket" (pProperties As WEB_SOCKET_PROPERTY, ByVal ulPropertyCount As Long, phWebSocket As LongPtr) As Long
    Public Declare PtrSafe Function WebSocketBeginServerHandshake Lib "websocket" (ByVal hWebSocket As LongPtr, ByVal pszSubprotocolSelected As String, pszExtensionsSelected As String, ByVal ulExtensionSelectedCount As Long, pRequestHeaders As WEB_SOCKET_HTTP_HEADER, ByVal ulRequestHeaderCount As Long, pResponseHeaders As LongPtr, pulResponseHeaderCount As Long) As Long
    Public Declare PtrSafe Function WebSocketEndServerHandshake Lib "websocket" (ByVal hWebSocket As LongPtr) As Long
    Public Declare PtrSafe Function WebSocketSend Lib "websocket" (ByVal hWebSocket As LongPtr, ByVal BufferType As WEB_SOCKET_BUFFER_TYPE, pBuffer As WEB_SOCKET_BUFFER, Optional ByVal pvContext As LongPtr) As Long
    Public Declare PtrSafe Function WebSocketReceive Lib "websocket" (ByVal hWebSocket As LongPtr, pBuffer As WEB_SOCKET_BUFFER, Optional ByVal pvContext As LongPtr) As Long
    Public Declare PtrSafe Function WebSocketGetAction Lib "websocket" (ByVal hWebSocket As LongPtr, ByVal eActionQueue As WEB_SOCKET_ACTION_QUEUE, pDataBuffers As Any, ByRef pulDataBufferCount As Long, ByRef pAction As WEB_SOCKET_ACTION, ByRef pBufferType As WEB_SOCKET_BUFFER_TYPE, ByRef pvApplicationContext As LongPtr, ByRef pvActionContext As LongPtr) As Long
    Public Declare PtrSafe Sub WebSocketCompleteAction Lib "websocket" (ByVal hWebSocket As LongPtr, ByVal pvActionContext As LongPtr, ByVal ulBytesTransferred As Long)
    Public Declare PtrSafe Sub WebSocketAbortHandle Lib "websocket" (ByVal hWebSocket As LongPtr)
    Public Declare PtrSafe Sub WebSocketDeleteHandle Lib "websocket" (ByVal hWebSocket As LongPtr)
    Public Declare PtrSafe Function WebSocketGetGlobalProperty Lib "websocket" (ByVal hWebSocket As LongPtr, ByVal eType As WEB_SOCKET_PROPERTY_TYPE, pvValue As Any, ulSize As Long) As Long

    #End Region



    #Region "wininet"
    'wininet.h

    Public Enum INET_DEF_PORTS
        INTERNET_INVALID_PORT_NUMBER = 0  ' use the protocol-specific default
        INTERNET_DEFAULT_FTP_PORT = 21  ' default for FTP servers
        INTERNET_DEFAULT_GOPHER_PORT = 70  '    "     "  gopher "
        INTERNET_DEFAULT_HTTP_PORT = 80  '    "     "  HTTP   "
        INTERNET_DEFAULT_HTTPS_PORT = 443  '    "     "  HTTPS  "
        INTERNET_DEFAULT_SOCKS_PORT = 1080  ' default for SOCKS firewall servers.
    End Enum

    Public Const INTERNET_MAX_HOST_NAME_LENGTH  = 256
    Public Const INTERNET_MAX_USER_NAME_LENGTH  = 128
    Public Const INTERNET_MAX_PASSWORD_LENGTH  = 128
    Public Const INTERNET_MAX_PORT_NUMBER_LENGTH  = 5  ' INTERNET_PORT is unsigned short
    Public Const INTERNET_MAX_PORT_NUMBER_VALUE  = 65535  ' maximum unsigned short value
    Public Const INTERNET_MAX_PATH_LENGTH  = 2048
    Public Const INTERNET_MAX_SCHEME_LENGTH  = 32  ' longest protocol name length
    Public Const INTERNET_MAX_URL_LENGTH  = (INTERNET_MAX_SCHEME_LENGTH + 4 /* sizeof("://") */ + INTERNET_MAX_PATH_LENGTH)

    Public Enum INET_KEEP_ALIVE
        INTERNET_KEEP_ALIVE_UNKNOWN = (-1)
        INTERNET_KEEP_ALIVE_ENABLED = 1
        INTERNET_KEEP_ALIVE_DISABLED = 0
    End Enum

    Public Enum INET_REQFLAGS
        INTERNET_REQFLAG_FROM_CACHE = &H00000001  ' response came from cache
        INTERNET_REQFLAG_ASYNC = &H00000002  ' request was made asynchronously
        INTERNET_REQFLAG_VIA_PROXY = &H00000004  ' request was made via a proxy
        INTERNET_REQFLAG_NO_HEADERS = &H00000008  ' orginal response contained no headers
        INTERNET_REQFLAG_PASSIVE = &H00000010  ' FTP: passive-mode connection
        INTERNET_REQFLAG_CACHE_WRITE_DISABLED = &H00000040  ' HTTPS: this request not cacheable
        INTERNET_REQFLAG_NET_TIMEOUT = &H00000080  ' w/ _FROM_CACHE: net request timed out
    End Enum

    Public Enum INET_IDNFLAGS
        INTERNET_FLAG_IDN_DIRECT = &H00000001  ' IDN enabled for direct connections
        INTERNET_FLAG_IDN_PROXY = &H00000002  ' IDN enabled for proxy
    End Enum

    Public Enum INET_SECURITY_FLAGS
        SECURITY_FLAG_SECURE = &H00000001  ' can query only
        SECURITY_FLAG_STRENGTH_WEAK = &H10000000
        SECURITY_FLAG_STRENGTH_MEDIUM = &H40000000
        SECURITY_FLAG_STRENGTH_STRONG = &H20000000
        SECURITY_FLAG_UNKNOWNBIT = &H80000000
        SECURITY_FLAG_FORTEZZA = &H08000000
        SECURITY_FLAG_NORMALBITNESS = SECURITY_FLAG_STRENGTH_WEAK
    '  The following are unused
        SECURITY_FLAG_SSL = &H00000002
        SECURITY_FLAG_SSL3 = &H00000004
        SECURITY_FLAG_PCT = &H00000008
        SECURITY_FLAG_PCT4 = &H00000010
        SECURITY_FLAG_IETFSSL4 = &H00000020
    '  The following are for backwards compatability only.
        SECURITY_FLAG_40BIT = SECURITY_FLAG_STRENGTH_WEAK
        SECURITY_FLAG_128BIT = SECURITY_FLAG_STRENGTH_STRONG
        SECURITY_FLAG_56BIT = SECURITY_FLAG_STRENGTH_MEDIUM
    '  settable flags
        SECURITY_FLAG_IGNORE_REVOCATION = &H00000080
        SECURITY_FLAG_IGNORE_UNKNOWN_CA = &H00000100
        SECURITY_FLAG_IGNORE_WRONG_USAGE = &H00000200
        SECURITY_FLAG_IGNORE_CERT_CN_INVALID = &H00001000  'INTERNET_FLAG_IGNORE_CERT_CN_INVALID
        SECURITY_FLAG_IGNORE_CERT_DATE_INVALID = &H00002000  'INTERNET_FLAG_IGNORE_CERT_DATE_INVALID
        SECURITY_FLAG_IGNORE_REDIRECT_TO_HTTPS = &H00004000  'INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS
        SECURITY_FLAG_IGNORE_REDIRECT_TO_HTTP = &H00008000&  'INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP
        SECURITY_FLAG_IGNORE_WEAK_SIGNATURE = &H00010000
        SECURITY_SET_MASK = (SECURITY_FLAG_IGNORE_REVOCATION Or SECURITY_FLAG_IGNORE_UNKNOWN_CA Or SECURITY_FLAG_IGNORE_WRONG_USAGE Or SECURITY_FLAG_IGNORE_CERT_CN_INVALID Or SECURITY_FLAG_IGNORE_CERT_DATE_INVALID Or SECURITY_FLAG_IGNORE_WEAK_SIGNATURE)
        SECURITY_FLAG_OPT_IN_WEAK_SIGNATURE = &H00020000
    End Enum

    Public Enum INET_FLAGS
        INTERNET_FLAG_RELOAD = &H80000000  ' retrieve the original item
    '  flags for InternetOpenUrl():
        INTERNET_FLAG_RAW_DATA = &H40000000  ' FTP/gopher find: receive the item as raw (structured) data
        INTERNET_FLAG_EXISTING_CONNECT = &H20000000  ' FTP: use existing InternetConnect handle for server if possible
    '  flags for InternetOpen():
        INTERNET_FLAG_ASYNC = &H10000000  ' this request is asynchronous (where supported)
    '  protocol-specific flags:
        INTERNET_FLAG_PASSIVE = &H08000000  ' used for FTP connections
    '  additional cache flags
        INTERNET_FLAG_NO_CACHE_WRITE = &H04000000  ' don't write this item to the cache
        INTERNET_FLAG_DONT_CACHE = INTERNET_FLAG_NO_CACHE_WRITE
        INTERNET_FLAG_MAKE_PERSISTENT = &H02000000  ' make this item persistent in cache
        INTERNET_FLAG_FROM_CACHE = &H01000000  ' use offline semantics
        INTERNET_FLAG_OFFLINE = INTERNET_FLAG_FROM_CACHE
    '  additional flags
        INTERNET_FLAG_SECURE = &H00800000  ' use PCT/SSL if applicable (HTTP)
        INTERNET_FLAG_KEEP_CONNECTION = &H00400000  ' use keep-alive semantics
        INTERNET_FLAG_NO_AUTO_REDIRECT = &H00200000  ' don't handle redirections automatically
        INTERNET_FLAG_READ_PREFETCH = &H00100000  ' do background read prefetch
        INTERNET_FLAG_NO_COOKIES = &H00080000  ' no automatic cookie handling
        INTERNET_FLAG_NO_AUTH = &H00040000  ' no automatic authentication handling
        INTERNET_FLAG_RESTRICTED_ZONE = &H00020000  ' apply restricted zone policies for cookies, auth
        INTERNET_FLAG_CACHE_IF_NET_FAIL = &H00010000  ' return cache file if net request fails
    '  Security Ignore Flags, Allow HttpOpenRequest to overide
    '   Secure Channel (SSL/PCT) failures of the following types.
        INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP = &H00008000&  ' ex: https:// to http://
        INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS = &H00004000  ' ex: http:// to https://
        INTERNET_FLAG_IGNORE_CERT_DATE_INVALID = &H00002000  ' expired X509 Cert.
        INTERNET_FLAG_IGNORE_CERT_CN_INVALID = &H00001000  ' bad common name in X509 Cert.
    '  more caching flags
        INTERNET_FLAG_RESYNCHRONIZE = &H00000800  ' asking wininet to update an item if it is newer
        INTERNET_FLAG_HYPERLINK = &H00000400  ' asking wininet to do hyperlinking semantic which works right for scripts
        INTERNET_FLAG_NO_UI = &H00000200  ' no cookie popup
        INTERNET_FLAG_PRAGMA_NOCACHE = &H00000100  ' asking wininet to add "pragma: no-cache"
        INTERNET_FLAG_CACHE_ASYNC = &H00000080  ' ok to perform lazy cache-write
        INTERNET_FLAG_FORMS_SUBMIT = &H00000040  ' this is a forms submit
        INTERNET_FLAG_FWD_BACK = &H00000020  ' fwd-back button op
        INTERNET_FLAG_NEED_FILE = &H00000010  ' need a file for this request
        INTERNET_FLAG_BGUPDATE = &H00000008
        INTERNET_FLAG_FTP_FOLDER_VIEW = &H00000004
        INTERNET_FLAG_MUST_CACHE_REQUEST = INTERNET_FLAG_NEED_FILE
    '  flags for FTP
        INTERNET_FLAG_TRANSFER_ASCII = FTP_TRANSFER_TYPE_ASCII  ' 0x00000001
        INTERNET_FLAG_TRANSFER_BINARY = FTP_TRANSFER_TYPE_BINARY  ' 0x00000002
    
        SECURITY_INTERNET_MASK = (INTERNET_FLAG_IGNORE_CERT_CN_INVALID Or INTERNET_FLAG_IGNORE_CERT_DATE_INVALID Or INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS Or INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP)
        SECURITY_IGNORE_ERROR_MASK = (INTERNET_FLAG_IGNORE_CERT_CN_INVALID Or INTERNET_FLAG_IGNORE_CERT_DATE_INVALID Or SECURITY_FLAG_IGNORE_UNKNOWN_CA Or SECURITY_FLAG_IGNORE_REVOCATION Or SECURITY_FLAG_IGNORE_WEAK_SIGNATURE)
        INTERNET_FLAGS_MASK = (INTERNET_FLAG_RELOAD Or INTERNET_FLAG_RAW_DATA Or INTERNET_FLAG_EXISTING_CONNECT Or INTERNET_FLAG_ASYNC Or INTERNET_FLAG_PASSIVE Or INTERNET_FLAG_NO_CACHE_WRITE Or INTERNET_FLAG_MAKE_PERSISTENT Or INTERNET_FLAG_FROM_CACHE Or INTERNET_FLAG_SECURE Or INTERNET_FLAG_KEEP_CONNECTION Or INTERNET_FLAG_NO_AUTO_REDIRECT Or INTERNET_FLAG_READ_PREFETCH Or INTERNET_FLAG_NO_COOKIES Or INTERNET_FLAG_NO_AUTH Or INTERNET_FLAG_CACHE_IF_NET_FAIL Or SECURITY_INTERNET_MASK Or INTERNET_FLAG_RESYNCHRONIZE Or INTERNET_FLAG_HYPERLINK Or INTERNET_FLAG_NO_UI Or INTERNET_FLAG_PRAGMA_NOCACHE Or INTERNET_FLAG_CACHE_ASYNC Or INTERNET_FLAG_FORMS_SUBMIT Or INTERNET_FLAG_NEED_FILE Or INTERNET_FLAG_RESTRICTED_ZONE Or INTERNET_FLAG_TRANSFER_BINARY Or INTERNET_FLAG_TRANSFER_ASCII Or INTERNET_FLAG_FWD_BACK Or INTERNET_FLAG_BGUPDATE)
    End Enum

    Public Enum INET_FTPTRANSFER_TYPE
        FTP_TRANSFER_TYPE_UNKNOWN = &H00000000
        FTP_TRANSFER_TYPE_ASCII = &H00000001
        FTP_TRANSFER_TYPE_BINARY = &H00000002
        FTP_TRANSFER_TYPE_MASK = (FTP_TRANSFER_TYPE_ASCII Or FTP_TRANSFER_TYPE_BINARY)
    End Enum

    Public Const INTERNET_ERROR_MASK_INSERT_CDROM  = &H1
    Public Const INTERNET_ERROR_MASK_COMBINED_SEC_CERT  = &H2
    Public Const INTERNET_ERROR_MASK_NEED_MSN_SSPI_PKG  = &H4
    Public Const INTERNET_ERROR_MASK_LOGIN_FAILURE_DISPLAY_ENTITY_BODY  = &H8

    Public Enum INET_API_FLAGS
        WININET_API_FLAG_ASYNC = &H00000001  ' force async operation
        WININET_API_FLAG_SYNC = &H00000004  ' force sync operation
        WININET_API_FLAG_USE_CONTEXT = &H00000008  ' use value supplied in dwContext (even if 0)
    End Enum

    Public Const INTERNET_NO_CALLBACK            = 0

    Public Enum INTERNET_SCHEME
        INTERNET_SCHEME_PARTIAL = -2
        INTERNET_SCHEME_UNKNOWN = -1
        INTERNET_SCHEME_DEFAULT = 0
        INTERNET_SCHEME_FTP
        INTERNET_SCHEME_GOPHER
        INTERNET_SCHEME_HTTP
        INTERNET_SCHEME_HTTPS
        INTERNET_SCHEME_FILE
        INTERNET_SCHEME_NEWS
        INTERNET_SCHEME_MAILTO
        INTERNET_SCHEME_SOCKS
        INTERNET_SCHEME_JAVASCRIPT
        INTERNET_SCHEME_VBSCRIPT
        INTERNET_SCHEME_RES
        INTERNET_SCHEME_FIRST = INTERNET_SCHEME_FTP
        INTERNET_SCHEME_LAST = INTERNET_SCHEME_RES
    End Enum

    Public Type INTERNET_ASYNC_RESULT
        ' dwResult - the HINTERNET, DWORD or BOOL return code from an async API
        dwResult As LongPtr
        ' dwError - the error code if the API failed
        dwError As Long
    End Type

    Public Enum INET_DIAG_SOCK_FLAGS
        IDSI_FLAG_KEEP_ALIVE = &H00000001  ' set if from keep-alive pool
        IDSI_FLAG_SECURE = &H00000002  ' set if secure connection
        IDSI_FLAG_PROXY = &H00000004  ' set if using proxy
        IDSI_FLAG_TUNNEL = &H00000008  ' set if tunnelling through proxy
    End Enum
    Public Type INTERNET_DIAGNOSTIC_SOCKET_INFO
        Socket As LongPtr
        SourcePort As Long
        DestPort As Long
        Flags As INET_DIAG_SOCK_FLAGS
    End Type

    Public Enum INET_OPEN_ACCESS_TYPES
        INTERNET_OPEN_TYPE_PRECONFIG = 0  ' use registry configuration
        INTERNET_OPEN_TYPE_DIRECT = 1  ' direct to net
        INTERNET_OPEN_TYPE_PROXY = 3  ' via named proxy
        INTERNET_OPEN_TYPE_PRECONFIG_WITH_NO_AUTOPROXY = 4  ' prevent using java/script/INS
    End Enum
    Public Type INTERNET_PROXY_INFO
        ' dwAccessType - INTERNET_OPEN_TYPE_DIRECT, INTERNET_OPEN_TYPE_PROXY, or
        ' INTERNET_OPEN_TYPE_PRECONFIG (set only)
        dwAccessType As INET_OPEN_ACCESS_TYPES
        ' lpszProxy - proxy server list
        lpszProxy As LongPtr
        ' lpszProxyBypass - proxy bypass list
        lpszProxyBypass As LongPtr
    End Type

    Public Enum INET_PERCONN_OPTIONS
        INTERNET_PER_CONN_FLAGS = 1
        INTERNET_PER_CONN_PROXY_SERVER = 2
        INTERNET_PER_CONN_PROXY_BYPASS = 3
        INTERNET_PER_CONN_AUTOCONFIG_URL = 4
        INTERNET_PER_CONN_AUTODISCOVERY_FLAGS = 5
        INTERNET_PER_CONN_AUTOCONFIG_SECONDARY_URL = 6
        INTERNET_PER_CONN_AUTOCONFIG_RELOAD_DELAY_MINS = 7
        INTERNET_PER_CONN_AUTOCONFIG_LAST_DETECT_TIME = 8
        INTERNET_PER_CONN_AUTOCONFIG_LAST_DETECT_URL = 9
        INTERNET_PER_CONN_FLAGS_UI = 10
    End Enum
    Public Type INTERNET_PER_CONN_OPTIONA
        dwOption As INET_PERCONN_OPTIONS ' option to be queried or set
        /* Union
        dwValue As Long ' dword value for the option
        pszValue As String ' pointer to string value for the option
        ftValue As FILETIME ' file-time value for the option
        End Union */
        Value As LongLong
    End Type
    Public Type INTERNET_PER_CONN_OPTIONW
        dwOption As INET_PERCONN_OPTIONS ' option to be queried or set
        /* Union
        dwValue As Long ' dword value for the option
        pszValue As LongPtr ' pointer to string value for the option
        ftValue As FILETIME ' file-time value for the option
        End Union */
        Value As LongLong
    End Type
    'Alias INTERNET_PER_CONN_OPTION As INTERNET_PER_CONN_OPTIONW
    Public Type INTERNET_PER_CONN_OPTION
        dwOption As INET_PERCONN_OPTIONS ' option to be queried or set
        /* Union
        dwValue As Long ' dword value for the option
        pszValue As LongPtr ' pointer to string value for the option
        ftValue As FILETIME ' file-time value for the option
        End Union */
        Value As LongLong
    End Type
    Public Type INTERNET_PER_CONN_OPTION_LISTA
        dwSize As Long ' size of the INTERNET_PER_CONN_OPTION_LIST struct
        pszConnection As LongPtr ' connection name to set/query options
        dwOptionCount As Long ' number of options to set/query
        dwOptionError As Long ' on error, which option failed
        pOptions As LongPtr 'PINTERNET_PER_CONN_OPTIONA
        ' array of options to set/query
    End Type
    Public Type INTERNET_PER_CONN_OPTION_LISTW
        dwSize As Long ' size of the INTERNET_PER_CONN_OPTION_LIST struct
        pszConnection As LongPtr ' connection name to set/query options
        dwOptionCount As Long ' number of options to set/query
        dwOptionError As Long ' on error, which option failed
        pOptions As LongPtr 'PINTERNET_PER_CONN_OPTIONW
        ' array of options to set/query
    End Type
    'Alias INTERNET_PER_CONN_OPTION_LIST As INTERNET_PER_CONN_OPTION_LISTW
    Public Type INTERNET_PER_CONN_OPTION_LIST
        dwSize As Long ' size of the INTERNET_PER_CONN_OPTION_LIST struct
        pszConnection As LongPtr ' connection name to set/query options
        dwOptionCount As Long ' number of options to set/query
        dwOptionError As Long ' on error, which option failed
        pOptions As LongPtr 'PINTERNET_PER_CONN_OPTIONW
        ' array of options to set/query
    End Type

    Public Enum INET_PERCONN_PROXY_TYPE
        PROXY_TYPE_DIRECT = &H00000001  ' direct to net
        PROXY_TYPE_PROXY = &H00000002  ' via named proxy
        PROXY_TYPE_AUTO_PROXY_URL = &H00000004  ' autoproxy URL
        PROXY_TYPE_AUTO_DETECT = &H00000008  ' use autoproxy detection
    End Enum
    Public Enum INET_PERCONN_AUTODISC_FLAGS
        AUTO_PROXY_FLAG_USER_SET = &H00000001  ' user changed this setting
        AUTO_PROXY_FLAG_ALWAYS_DETECT = &H00000002  ' force detection even when its not needed
        AUTO_PROXY_FLAG_DETECTION_RUN = &H00000004  ' detection has been run
        AUTO_PROXY_FLAG_MIGRATED = &H00000008  ' migration has just been done
        AUTO_PROXY_FLAG_DONT_CACHE_PROXY_RESULT = &H00000010  ' don't cache result of host=proxy name
        AUTO_PROXY_FLAG_CACHE_INIT_RUN = &H00000020  ' don't initalize and run unless URL expired
        AUTO_PROXY_FLAG_DETECTION_SUSPECT = &H00000040  ' results of detection are suspect
    End Enum

    Public Type INTERNET_VERSION_INFO
        dwMajorVersion As Long
        dwMinorVersion As Long
    End Type
    Public Type HTTP_VERSION_INFO
        dwMajorVersion As Long
        dwMinorVersion As Long
    End Type

    Public Enum INET_CONNECTED_STATE
        INTERNET_STATE_CONNECTED = &H00000001  ' connected state (mutually exclusive with disconnected)
        INTERNET_STATE_DISCONNECTED = &H00000002  ' disconnected from network
        INTERNET_STATE_DISCONNECTED_BY_USER = &H00000010  ' disconnected by user request
        INTERNET_STATE_IDLE = &H00000100  ' no network requests being made (by Wininet)
        INTERNET_STATE_BUSY = &H00000200  ' network requests being made (by Wininet)
    End Enum
    Public Enum INET_CONNECTED_FLAGS
        ISO_FORCE_DISCONNECTED = &H00000001
    End Enum

    Public Type INTERNET_CONNECTED_INFO
        ' dwConnectedState - new connected/disconnected state.
        ' See INTERNET_STATE_CONNECTED, etc.
        dwConnectedState As INET_CONNECTED_STATE
        ' dwFlags - flags controlling connected->disconnected (or disconnected->
        ' connected) transition. See below
        dwFlags As INET_CONNECTED_FLAGS
    End Type

    Public Type URL_COMPONENTSA
        dwStructSize As Long ' size of this structure. Used in version check
        lpszScheme As String ' pointer to scheme name
        dwSchemeLength As Long ' length of scheme name
        nScheme As INTERNET_SCHEME ' enumerated scheme type (if known)
        lpszHostName As String ' pointer to host name
        dwHostNameLength As Long ' length of host name
        /* [ TypeHint(INET_DEF_PORTS) ] */ nPort As Integer 'INTERNET_PORT ' converted port number
        lpszUserName As String ' pointer to user name
        dwUserNameLength As Long ' length of user name
        lpszPassword As String ' pointer to password
        dwPasswordLength As Long ' length of password
        lpszUrlPath As String ' pointer to URL-path
        dwUrlPathLength As Long ' length of URL-path
        lpszExtraInfo As String ' pointer to extra information (e.g. ?foo or #foo)
        dwExtraInfoLength As Long ' length of extra information
    End Type
    Public Type URL_COMPONENTSW
        dwStructSize As Long ' size of this structure. Used in version check
        lpszScheme As LongPtr ' pointer to scheme name
        dwSchemeLength As Long ' length of scheme name
        nScheme As INTERNET_SCHEME ' enumerated scheme type (if known)
        lpszHostName As LongPtr ' pointer to host name
        dwHostNameLength As Long ' length of host name
        /* [ TypeHint(INET_DEF_PORTS) ] */ nPort As Integer 'INTERNET_PORT ' converted port number
        lpszUserName As LongPtr ' pointer to user name
        dwUserNameLength As Long ' length of user name
        lpszPassword As LongPtr ' pointer to password
        dwPasswordLength As Long ' length of password
        lpszUrlPath As LongPtr ' pointer to URL-path
        dwUrlPathLength As Long ' length of URL-path
        lpszExtraInfo As LongPtr ' pointer to extra information (e.g. ?foo or #foo)
        dwExtraInfoLength As Long ' length of extra information
    End Type
    'Alias URL_COMPONENTS As URL_COMPONENTSW
    Public Type URL_COMPONENTS
        dwStructSize As Long ' size of this structure. Used in version check
        lpszScheme As LongPtr ' pointer to scheme name
        dwSchemeLength As Long ' length of scheme name
        nScheme As INTERNET_SCHEME ' enumerated scheme type (if known)
        lpszHostName As LongPtr ' pointer to host name
        dwHostNameLength As Long ' length of host name
        /* [ TypeHint(INET_DEF_PORTS) ] */ nPort As Integer 'INTERNET_PORT ' converted port number
        lpszUserName As LongPtr ' pointer to user name
        dwUserNameLength As Long ' length of user name
        lpszPassword As LongPtr ' pointer to password
        dwPasswordLength As Long ' length of password
        lpszUrlPath As LongPtr ' pointer to URL-path
        dwUrlPathLength As Long ' length of URL-path
        lpszExtraInfo As LongPtr ' pointer to extra information (e.g. ?foo or #foo)
        dwExtraInfoLength As Long ' length of extra information
    End Type

    Public Type INTERNET_CERTIFICATE_INFO
        ' ftExpiry - date the certificate expires.
        ftExpiry As FILETIME
        ' ftStart - date the certificate becomes valid.
        ftStart As FILETIME
        ' lpszSubjectInfo - the name of organization, site, and server
        '   the cert. was issued for.
        lpszSubjectInfo As LongPtr
        ' lpszIssuerInfo - the name of orgainzation, site, and server
        '   the cert was issues by.
        lpszIssuerInfo As LongPtr
        ' lpszProtocolName - the name of the protocol used to provide the secure
        '   connection.
        lpszProtocolName As LongPtr
        ' lpszSignatureAlgName - the name of the algorithm used for signing
        '  the certificate.
        lpszSignatureAlgName As LongPtr
        ' lpszEncryptionAlgName - the name of the algorithm used for
        '  doing encryption over the secure channel (SSL/PCT) connection.
        lpszEncryptionAlgName As LongPtr
        ' dwKeySize - size of the key.
        dwKeySize As Long
    End Type

    Public Type INTERNET_BUFFERSA
        [Description("used for API versioning. Set to sizeof(INTERNET_BUFFERS)")] dwStructSize As Long
        [Description("struct _INTERNET_BUFFERSW  ' chain of buffers")] Next As LongPtr
        [Description("pointer to headers (may be NULL)")] lpcszHeader As String
        [Description("length of headers if not NULL")] dwHeadersLength As Long
        [Description("size of headers if not enough buffer")] dwHeadersTotal As Long
        [Description("pointer to data buffer (may be NULL)")] lpvBuffer As LongPtr
        [Description("length of data buffer if not NULL")] dwBufferLength As Long
        [Description("total size of chunk, or content-length if not chunked")] dwBufferTotal As Long
        [Description("used for read-ranges (only used in HttpSendRequest2)")] dwOffsetLow As Long
        dwOffsetHigh As Long
    End Type
    Public Type INTERNET_BUFFERSW
        [Description("used for API versioning. Set to sizeof(INTERNET_BUFFERS)")] dwStructSize As Long
        [Description("struct _INTERNET_BUFFERSW  ' chain of buffers")] Next As LongPtr
        [Description("pointer to headers (may be NULL)")] lpcszHeader As LongPtr
        [Description("length of headers if not NULL")] dwHeadersLength As Long
        [Description("size of headers if not enough buffer")] dwHeadersTotal As Long
        [Description("pointer to data buffer (may be NULL)")] lpvBuffer As LongPtr
        [Description("length of data buffer if not NULL")] dwBufferLength As Long
        [Description("total size of chunk, or content-length if not chunked")] dwBufferTotal As Long
        [Description("used for read-ranges (only used in HttpSendRequest2)")] dwOffsetLow As Long
        dwOffsetHigh As Long
    End Type
    'Alias INTERNET_BUFFERS As INTERNET_BUFFERSW
    Public Type INTERNET_BUFFERS
        [Description("used for API versioning. Set to sizeof(INTERNET_BUFFERS)")] dwStructSize As Long
        [Description("struct _INTERNET_BUFFERSW  ' chain of buffers")] Next As LongPtr
        [Description("pointer to headers (may be NULL)")] lpcszHeader As LongPtr
        [Description("length of headers if not NULL")] dwHeadersLength As Long
        [Description("size of headers if not enough buffer")] dwHeadersTotal As Long
        [Description("pointer to data buffer (may be NULL)")] lpvBuffer As LongPtr
        [Description("length of data buffer if not NULL")] dwBufferLength As Long
        [Description("total size of chunk, or content-length if not chunked")] dwBufferTotal As Long
        [Description("used for read-ranges (only used in HttpSendRequest2)")] dwOffsetLow As Long
        dwOffsetHigh As Long
    End Type

    Public Enum INET_SYSTIME_RFCS
        INTERNET_RFC1123_FORMAT = 0
    End Enum

    Public Const INTERNET_RFC1123_BUFSIZE = 30

    Public Enum INET_ICU_FLAGS
        ICU_ESCAPE = &H80000000  ' (un)escape URL characters
        ICU_USERNAME = &H40000000  ' use internal username & password
        ICU_NO_ENCODE = &H20000000  ' Don't convert unsafe characters to escape sequence
        ICU_DECODE = &H10000000  ' Convert %XX escape sequences to characters
        ICU_NO_META = &H08000000  ' Don't convert .. etc. meta path sequences
        ICU_ENCODE_SPACES_ONLY = &H04000000  ' Encode spaces only
        ICU_BROWSER_MODE = &H02000000  ' Special encode/decode rules for browser
        ICU_ENCODE_PERCENT = &H00001000  ' Encode any percent (ASCII25)
        ICU_ESCAPE_AUTHORITY = &H00002000 ' Escape chars in authority components (user, pwd, host)
        ICU_REJECT_USERPWD = &H000040000  ' Rejects URLs whick have username/pwd sections
        ICU_INCLUDE_DEFAULT_PORT = &H00008000& ' Include default port numbers in URLs
    
    End Enum

    Public Const PRE_CONFIG_INTERNET_ACCESS  = INTERNET_OPEN_TYPE_PRECONFIG
    Public Const LOCAL_INTERNET_ACCESS  = INTERNET_OPEN_TYPE_DIRECT
    Public Const CERN_PROXY_INTERNET_ACCESS  = INTERNET_OPEN_TYPE_PROXY

    Public Enum INET_CONNECT_SERVICES
        INTERNET_SERVICE_FTP = 1
        INTERNET_SERVICE_GOPHER = 2
        INTERNET_SERVICE_HTTP = 3
    End Enum

    Public Enum INET_READFILE_FLAGS
        IRF_ASYNC = WININET_API_FLAG_ASYNC
        IRF_SYNC = WININET_API_FLAG_SYNC
        IRF_USE_CONTEXT = WININET_API_FLAG_USE_CONTEXT
        IRF_NO_WAIT = &H00000008
    End Enum

    Public Enum INET_OPTIONS
        INTERNET_OPTION_CALLBACK = 1
        INTERNET_OPTION_CONNECT_TIMEOUT = 2
        INTERNET_OPTION_CONNECT_RETRIES = 3
        INTERNET_OPTION_CONNECT_BACKOFF = 4
        INTERNET_OPTION_SEND_TIMEOUT = 5
        INTERNET_OPTION_CONTROL_SEND_TIMEOUT = INTERNET_OPTION_SEND_TIMEOUT
        INTERNET_OPTION_RECEIVE_TIMEOUT = 6
        INTERNET_OPTION_CONTROL_RECEIVE_TIMEOUT = INTERNET_OPTION_RECEIVE_TIMEOUT
        INTERNET_OPTION_DATA_SEND_TIMEOUT = 7
        INTERNET_OPTION_DATA_RECEIVE_TIMEOUT = 8
        INTERNET_OPTION_HANDLE_TYPE = 9
        INTERNET_OPTION_LISTEN_TIMEOUT = 11
        INTERNET_OPTION_READ_BUFFER_SIZE = 12
        INTERNET_OPTION_WRITE_BUFFER_SIZE = 13
        INTERNET_OPTION_ASYNC_ID = 15
        INTERNET_OPTION_ASYNC_PRIORITY = 16
        INTERNET_OPTION_PARENT_HANDLE = 21
        INTERNET_OPTION_KEEP_CONNECTION = 22
        INTERNET_OPTION_REQUEST_FLAGS = 23
        INTERNET_OPTION_EXTENDED_ERROR = 24
        INTERNET_OPTION_OFFLINE_MODE = 26
        INTERNET_OPTION_CACHE_STREAM_HANDLE = 27
        INTERNET_OPTION_USERNAME = 28
        INTERNET_OPTION_PASSWORD = 29
        INTERNET_OPTION_ASYNC = 30
        INTERNET_OPTION_SECURITY_FLAGS = 31
        INTERNET_OPTION_SECURITY_CERTIFICATE_STRUCT = 32
        INTERNET_OPTION_DATAFILE_NAME = 33
        INTERNET_OPTION_URL = 34
        INTERNET_OPTION_SECURITY_CERTIFICATE = 35
        INTERNET_OPTION_SECURITY_KEY_BITNESS = 36
        INTERNET_OPTION_REFRESH = 37
        INTERNET_OPTION_PROXY = 38
        INTERNET_OPTION_SETTINGS_CHANGED = 39
        INTERNET_OPTION_VERSION = 40
        INTERNET_OPTION_USER_AGENT = 41
        INTERNET_OPTION_END_BROWSER_SESSION = 42
        INTERNET_OPTION_PROXY_USERNAME = 43
        INTERNET_OPTION_PROXY_PASSWORD = 44
        INTERNET_OPTION_CONTEXT_VALUE = 45
        INTERNET_OPTION_CONNECT_LIMIT = 46
        INTERNET_OPTION_SECURITY_SELECT_CLIENT_CERT = 47
        INTERNET_OPTION_POLICY = 48
        INTERNET_OPTION_DISCONNECTED_TIMEOUT = 49
        INTERNET_OPTION_CONNECTED_STATE = 50
        INTERNET_OPTION_IDLE_STATE = 51
        INTERNET_OPTION_OFFLINE_SEMANTICS = 52
        INTERNET_OPTION_SECONDARY_CACHE_KEY = 53
        INTERNET_OPTION_CALLBACK_FILTER = 54
        INTERNET_OPTION_CONNECT_TIME = 55
        INTERNET_OPTION_SEND_THROUGHPUT = 56
        INTERNET_OPTION_RECEIVE_THROUGHPUT = 57
        INTERNET_OPTION_REQUEST_PRIORITY = 58
        INTERNET_OPTION_HTTP_VERSION = 59
        INTERNET_OPTION_RESET_URLCACHE_SESSION = 60
        INTERNET_OPTION_ERROR_MASK = 62
        INTERNET_OPTION_FROM_CACHE_TIMEOUT = 63
        INTERNET_OPTION_BYPASS_EDITED_ENTRY = 64
        INTERNET_OPTION_HTTP_DECODING = 65
        INTERNET_OPTION_DIAGNOSTIC_SOCKET_INFO = 67
        INTERNET_OPTION_CODEPAGE = 68
        INTERNET_OPTION_CACHE_TIMESTAMPS = 69
        INTERNET_OPTION_DISABLE_AUTODIAL = 70
        INTERNET_OPTION_MAX_CONNS_PER_SERVER = 73
        INTERNET_OPTION_MAX_CONNS_PER_1_0_SERVER = 74
        INTERNET_OPTION_PER_CONNECTION_OPTION = 75
        INTERNET_OPTION_DIGEST_AUTH_UNLOAD = 76
        INTERNET_OPTION_IGNORE_OFFLINE = 77
        INTERNET_OPTION_IDENTITY = 78
        INTERNET_OPTION_REMOVE_IDENTITY = 79
        INTERNET_OPTION_ALTER_IDENTITY = 80
        INTERNET_OPTION_SUPPRESS_BEHAVIOR = 81
        INTERNET_OPTION_AUTODIAL_MODE = 82
        INTERNET_OPTION_AUTODIAL_CONNECTION = 83
        INTERNET_OPTION_CLIENT_CERT_CONTEXT = 84
        INTERNET_OPTION_AUTH_FLAGS = 85
        INTERNET_OPTION_COOKIES_3RD_PARTY = 86
        INTERNET_OPTION_DISABLE_PASSPORT_AUTH = 87
        INTERNET_OPTION_SEND_UTF8_SERVERNAME_TO_PROXY = 88
        INTERNET_OPTION_EXEMPT_CONNECTION_LIMIT = 89
        INTERNET_OPTION_ENABLE_PASSPORT_AUTH = 90
        INTERNET_OPTION_HIBERNATE_INACTIVE_WORKER_THREADS = 91
        INTERNET_OPTION_ACTIVATE_WORKER_THREADS = 92
        INTERNET_OPTION_RESTORE_WORKER_THREAD_DEFAULTS = 93
        INTERNET_OPTION_SOCKET_SEND_BUFFER_LENGTH = 94
        INTERNET_OPTION_PROXY_SETTINGS_CHANGED = 95
        INTERNET_OPTION_DATAFILE_EXT = 96
        INTERNET_OPTION_CODEPAGE_PATH = 100
        INTERNET_OPTION_CODEPAGE_EXTRA = 101
        INTERNET_OPTION_IDN = 102
        INTERNET_OPTION_MAX_CONNS_PER_PROXY = 103
        INTERNET_OPTION_SUPPRESS_SERVER_AUTH = 104
        INTERNET_OPTION_SERVER_CERT_CHAIN_CONTEXT = 105
        INTERNET_OPTION_ENABLE_REDIRECT_CACHE_READ = 122
        INTERNET_OPTION_COMPRESSED_CONTENT_LENGTH = 147
        INTERNET_OPTION_ENABLE_HTTP_PROTOCOL = 148
        INTERNET_OPTION_HTTP_PROTOCOL_USED = 149
        INTERNET_OPTION_ENCODE_EXTRA = 155
        INTERNET_OPTION_HSTS = 157
        INTERNET_OPTION_ENTERPRISE_CONTEXT = 159
        INTERNET_OPTION_CONNECTION_FILTER = 162
        INTERNET_OPTION_REFERER_TOKEN_BINDING_HOSTNAME = 163
        INTERNET_OPTION_TOKEN_BINDING_PUBLIC_KEY = 181
        INTERNET_OPTION_COOKIES_SAME_SITE_LEVEL = 187
        INTERNET_OPTION_REQUEST_ANNOTATION = 193
        INTERNET_FIRST_OPTION = INTERNET_OPTION_CALLBACK
        INTERNET_LAST_OPTION = INTERNET_OPTION_REQUEST_ANNOTATION
    End Enum
    Public Enum INET_OPTIONSEX_FLAGS
        ISO_GLOBAL = &H00000001  ' modify option globally
        ISO_REGISTRY = &H00000002  ' write option to registry (where applicable)
        ISO_VALID_FLAGS = (ISO_GLOBAL Or ISO_REGISTRY)
    End Enum

    Public Const INTERNET_PRIORITY_FOREGROUND  = 1000

    Public Enum INET_COOKIES_SS_FLAGS
        HTTP_COOKIES_SAME_SITE_LEVEL_UNKNOWN = &H0
        HTTP_COOKIES_SAME_SITE_LEVEL_SAME_SITE = &H1
        HTTP_COOKIES_SAME_SITE_LEVEL_CROSS_SITE_LAX = &H2
        HTTP_COOKIES_SAME_SITE_LEVEL_CROSS_SITE = &H3
        HTTP_COOKIES_SAME_SITE_LEVEL_MAX = HTTP_COOKIES_SAME_SITE_LEVEL_CROSS_SITE
    End Enum

    Public Const HTTP_PROTOCOL_FLAG_HTTP2  = &H2
    Public Const HTTP_PROTOCOL_MASK  = (HTTP_PROTOCOL_FLAG_HTTP2)
    Public Const INTERNET_OPTION_REQUEST_ANNOTATION_MAX_LENGTH  = &HFA00

    Public Enum INET_HANDLE_TYPES
        INTERNET_HANDLE_TYPE_INTERNET = 1
        INTERNET_HANDLE_TYPE_CONNECT_FTP = 2
        INTERNET_HANDLE_TYPE_CONNECT_GOPHER = 3
        INTERNET_HANDLE_TYPE_CONNECT_HTTP = 4
        INTERNET_HANDLE_TYPE_FTP_FIND = 5
        INTERNET_HANDLE_TYPE_FTP_FIND_HTML = 6
        INTERNET_HANDLE_TYPE_FTP_FILE = 7
        INTERNET_HANDLE_TYPE_FTP_FILE_HTML = 8
        INTERNET_HANDLE_TYPE_GOPHER_FIND = 9
        INTERNET_HANDLE_TYPE_GOPHER_FIND_HTML = 10
        INTERNET_HANDLE_TYPE_GOPHER_FILE = 11
        INTERNET_HANDLE_TYPE_GOPHER_FILE_HTML = 12
        INTERNET_HANDLE_TYPE_HTTP_REQUEST = 13
        INTERNET_HANDLE_TYPE_FILE_REQUEST = 14
    End Enum

    Public Enum INET_AUTH_FLAGS
        AUTH_FLAG_DISABLE_NEGOTIATE = &H00000001
        AUTH_FLAG_ENABLE_NEGOTIATE = &H00000002
        AUTH_FLAG_DISABLE_BASIC_CLEARCHANNEL = &H00000004
        AUTH_FLAG_DISABLE_SERVER_AUTH = &H00000008
    End Enum

    Public Enum INET_AUTODIAL
        AUTODIAL_MODE_NEVER = 1
        AUTODIAL_MODE_ALWAYS = 2
        AUTODIAL_MODE_NO_NETWORK_PRESENT = 4
    End Enum

    Public Enum INET_STATUS_VALUES
        INTERNET_STATUS_RESOLVING_NAME = 10
        INTERNET_STATUS_NAME_RESOLVED = 11
        INTERNET_STATUS_CONNECTING_TO_SERVER = 20
        INTERNET_STATUS_CONNECTED_TO_SERVER = 21
        INTERNET_STATUS_SENDING_REQUEST = 30
        INTERNET_STATUS_REQUEST_SENT = 31
        INTERNET_STATUS_RECEIVING_RESPONSE = 40
        INTERNET_STATUS_RESPONSE_RECEIVED = 41
        INTERNET_STATUS_CTL_RESPONSE_RECEIVED = 42
        INTERNET_STATUS_PREFETCH = 43
        INTERNET_STATUS_CLOSING_CONNECTION = 50
        INTERNET_STATUS_CONNECTION_CLOSED = 51
        INTERNET_STATUS_HANDLE_CREATED = 60
        INTERNET_STATUS_HANDLE_CLOSING = 70
        INTERNET_STATUS_DETECTING_PROXY = 80
        INTERNET_STATUS_REQUEST_COMPLETE = 100
        INTERNET_STATUS_REDIRECT = 110
        INTERNET_STATUS_INTERMEDIATE_RESPONSE = 120
        INTERNET_STATUS_USER_INPUT_REQUIRED = 140
        INTERNET_STATUS_STATE_CHANGE = 200
        INTERNET_STATUS_COOKIE_SENT = 320
        INTERNET_STATUS_COOKIE_RECEIVED = 321
        INTERNET_STATUS_PRIVACY_IMPACTED = 324
        INTERNET_STATUS_P3P_HEADER = 325
        INTERNET_STATUS_P3P_POLICYREF = 326
        INTERNET_STATUS_COOKIE_HISTORY = 327
    End Enum

    Public Enum InternetCookieState
        COOKIE_STATE_UNKNOWN = &H0
        COOKIE_STATE_ACCEPT = &H1
        COOKIE_STATE_PROMPT = &H2
        COOKIE_STATE_LEASH = &H3
        COOKIE_STATE_DOWNGRADE = &H4
        COOKIE_STATE_REJECT = &H5
        COOKIE_STATE_MAX = COOKIE_STATE_REJECT
    End Enum

    Public Type IncomingCookieState
        cSession As Long ' Session cookies received
        cPersistent As Long ' Persistent cookies received
        cAccepted As Long ' Number of cookies accepted
        cLeashed As Long '               ... leashed
        cDowngraded As Long '               ... converted to session-cookies
        cBlocked As Long '               ... rejected
        pszLocation As LongPtr ' Optional: URL associated with reported cookie events
        ' This can be used to override request URL
    End Type
    Public Type OutgoingCookieState
        cSent As Long
        cSuppressed As Long
        pszLocation As LongPtr 'const char ' Optional: URL associated with reported cookie events
        ' This can be used to override request URL
    End Type
    Public Type InternetCookieHistory
        fAccepted As BOOL
        fLeashed As BOOL
        fDowngraded As BOOL
        fRejected As BOOL
    End Type
    Public Type CookieDecision
        dwCookieState As InternetCookieState
        fAllowSession As BOOL
    End Type

    Public Const INTERNET_INVALID_STATUS_CALLBACK = (-1)

    Public Const MAX_GOPHER_DISPLAY_TEXT  = 128
    Public Const MAX_GOPHER_SELECTOR_TEXT  = 256
    Public Const MAX_GOPHER_HOST_NAME  = INTERNET_MAX_HOST_NAME_LENGTH
    Public Const MAX_GOPHER_LOCATOR_LENGTH  = (1 + MAX_GOPHER_DISPLAY_TEXT + 1 + MAX_GOPHER_SELECTOR_TEXT + 1 + MAX_GOPHER_HOST_NAME + 1 + INTERNET_MAX_PORT_NUMBER_LENGTH + 1 + 1 + 2)

    Public Enum INET_GOPHER_TYPES
        GOPHER_TYPE_TEXT_FILE = &H00000001
        GOPHER_TYPE_DIRECTORY = &H00000002
        GOPHER_TYPE_CSO = &H00000004
        GOPHER_TYPE_ERROR = &H00000008
        GOPHER_TYPE_MAC_BINHEX = &H00000010
        GOPHER_TYPE_DOS_ARCHIVE = &H00000020
        GOPHER_TYPE_UNIX_UUENCODED = &H00000040
        GOPHER_TYPE_INDEX_SERVER = &H00000080
        GOPHER_TYPE_TELNET = &H00000100
        GOPHER_TYPE_BINARY = &H00000200
        GOPHER_TYPE_REDUNDANT = &H00000400
        GOPHER_TYPE_TN3270 = &H00000800
        GOPHER_TYPE_GIF = &H00001000
        GOPHER_TYPE_IMAGE = &H00002000
        GOPHER_TYPE_BITMAP = &H00004000
        GOPHER_TYPE_MOVIE = &H00008000&
        GOPHER_TYPE_SOUND = &H00010000
        GOPHER_TYPE_HTML = &H00020000
        GOPHER_TYPE_PDF = &H00040000
        GOPHER_TYPE_CALENDAR = &H00080000
        GOPHER_TYPE_INLINE = &H00100000
        GOPHER_TYPE_UNKNOWN = &H20000000
        GOPHER_TYPE_ASK = &H40000000
        GOPHER_TYPE_GOPHER_PLUS = &H80000000
        GOPHER_TYPE_FILE_MASK = (GOPHER_TYPE_TEXT_FILE Or GOPHER_TYPE_MAC_BINHEX Or GOPHER_TYPE_DOS_ARCHIVE Or GOPHER_TYPE_UNIX_UUENCODED Or _
                                GOPHER_TYPE_BINARY Or GOPHER_TYPE_GIF Or GOPHER_TYPE_IMAGE Or GOPHER_TYPE_BITMAP Or GOPHER_TYPE_MOVIE Or _
                                GOPHER_TYPE_SOUND Or GOPHER_TYPE_HTML Or GOPHER_TYPE_PDF Or GOPHER_TYPE_CALENDAR Or GOPHER_TYPE_INLINE)
    End Enum

    Public Type GOPHER_FIND_DATAA
       DisplayString(MAX_GOPHER_DISPLAY_TEXT) As Byte
       GopherType As INET_GOPHER_TYPES ' GOPHER_TYPE_, if known
       SizeLow As Long
       SizeHigh As Long
       LastModificationTime As FILETIME
       Locator(MAX_GOPHER_LOCATOR_LENGTH) As Byte
    End Type
    Public Type GOPHER_FIND_DATAW
       DisplayString(MAX_GOPHER_DISPLAY_TEXT) As Integer
       GopherType As INET_GOPHER_TYPES ' GOPHER_TYPE_, if known
       SizeLow As Long
       SizeHigh As Long
       LastModificationTime As FILETIME
       Locator(MAX_GOPHER_LOCATOR_LENGTH) As Integer
    End Type
    'Alias GOPHER_FIND_DATA As GOPHER_FIND_DATAW
    Public Type GOPHER_FIND_DATA
       DisplayString(MAX_GOPHER_DISPLAY_TEXT) As Integer
       GopherType As INET_GOPHER_TYPES ' GOPHER_TYPE_, if known
       SizeLow As Long
       SizeHigh As Long
       LastModificationTime As FILETIME
       Locator(MAX_GOPHER_LOCATOR_LENGTH) As Integer
    End Type

    Public Type GOPHER_ADMIN_ATTRIBUTE_TYPE
        Comment As LongPtr
        EmailAddress As LongPtr
    End Type
    Public Type GOPHER_MOD_DATE_ATTRIBUTE_TYPE
        DateAndTime As FILETIME
    End Type
    Public Type GOPHER_TTL_ATTRIBUTE_TYPE
        Ttl As Long
    End Type
    Public Type GOPHER_SCORE_ATTRIBUTE_TYPE
        Score As Long
    End Type
    Public Type GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE
        LowerBound As Long
        UpperBound As Long
    End Type
    Public Type GOPHER_SITE_ATTRIBUTE_TYPE
        Site As LongPtr
    End Type
    Public Type GOPHER_ORGANIZATION_ATTRIBUTE_TYPE
        Organization As LongPtr
    End Type
    Public Type GOPHER_LOCATION_ATTRIBUTE_TYPE
        Location As LongPtr
    End Type
    Public Type GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE
        DegreesNorth As Long
        MinutesNorth As Long
        SecondsNorth As Long
        DegreesEast As Long
        MinutesEast As Long
        SecondsEast As Long
    End Type
    Public Type GOPHER_TIMEZONE_ATTRIBUTE_TYPE
        Zone As Long
    End Type
    Public Type GOPHER_PROVIDER_ATTRIBUTE_TYPE
        Provider As LongPtr
    End Type
    Public Type GOPHER_VERSION_ATTRIBUTE_TYPE
        Version As LongPtr
    End Type
    Public Type GOPHER_ABSTRACT_ATTRIBUTE_TYPE
        ShortAbstract As LongPtr
        AbstractFile As LongPtr
    End Type
    Public Type GOPHER_VIEW_ATTRIBUTE_TYPE
        ContentType As LongPtr
        Language As LongPtr
        Size As Long
    End Type
    Public Type GOPHER_VERONICA_ATTRIBUTE_TYPE
        TreeWalk As BOOL
    End Type
    Public Type GOPHER_ASK_ATTRIBUTE_TYPE
        QuestionType As LongPtr
        QuestionText As LongPtr
    End Type
    Public Type GOPHER_UNKNOWN_ATTRIBUTE_TYPE
        Text As LongPtr
    End Type

    Public Const MAX_GOPHER_CATEGORY_NAME  = 128  ' arbitrary
    Public Const MAX_GOPHER_ATTRIBUTE_NAME  = 128  '     "
    Public Const MIN_GOPHER_ATTRIBUTE_LENGTH  = 256  '     "

    Public Const GOPHER_ADMIN_ATTRIBUTE  = "Admin"
    Public Const GOPHER_MOD_DATE_ATTRIBUTE  = "Mod-Date"
    Public Const GOPHER_TTL_ATTRIBUTE  = "TTL"
    Public Const GOPHER_SCORE_ATTRIBUTE  = "Score"
    Public Const GOPHER_RANGE_ATTRIBUTE  = "Score-range"
    Public Const GOPHER_SITE_ATTRIBUTE  = "Site"
    Public Const GOPHER_ORG_ATTRIBUTE  = "Org"
    Public Const GOPHER_LOCATION_ATTRIBUTE  = "Loc"
    Public Const GOPHER_GEOG_ATTRIBUTE  = "Geog"
    Public Const GOPHER_TIMEZONE_ATTRIBUTE  = "TZ"
    Public Const GOPHER_PROVIDER_ATTRIBUTE  = "Provider"
    Public Const GOPHER_VERSION_ATTRIBUTE  = "Version"
    Public Const GOPHER_ABSTRACT_ATTRIBUTE  = "Abstract"
    Public Const GOPHER_VIEW_ATTRIBUTE  = "View"
    Public Const GOPHER_TREEWALK_ATTRIBUTE  = "treewalk"

    Public Const GOPHER_ATTRIBUTE_ID_BASE = &Habcccc00

    Public Enum INET_GOPHER_CATEGORY_IDS
        GOPHER_CATEGORY_ID_ALL = (GOPHER_ATTRIBUTE_ID_BASE + 1)
        GOPHER_CATEGORY_ID_INFO = (GOPHER_ATTRIBUTE_ID_BASE + 2)
        GOPHER_CATEGORY_ID_ADMIN = (GOPHER_ATTRIBUTE_ID_BASE + 3)
        GOPHER_CATEGORY_ID_VIEWS = (GOPHER_ATTRIBUTE_ID_BASE + 4)
        GOPHER_CATEGORY_ID_ABSTRACT = (GOPHER_ATTRIBUTE_ID_BASE + 5)
        GOPHER_CATEGORY_ID_VERONICA = (GOPHER_ATTRIBUTE_ID_BASE + 6)
        GOPHER_CATEGORY_ID_ASK = (GOPHER_ATTRIBUTE_ID_BASE + 7)
        GOPHER_CATEGORY_ID_UNKNOWN = (GOPHER_ATTRIBUTE_ID_BASE + 8)
    End Enum
    Public Enum INET_GOPHER_ATTRIBUTE_IDS
        GOPHER_ATTRIBUTE_ID_ALL = (GOPHER_ATTRIBUTE_ID_BASE + 9)
        GOPHER_ATTRIBUTE_ID_ADMIN = (GOPHER_ATTRIBUTE_ID_BASE + 10)
        GOPHER_ATTRIBUTE_ID_MOD_DATE = (GOPHER_ATTRIBUTE_ID_BASE + 11)
        GOPHER_ATTRIBUTE_ID_TTL = (GOPHER_ATTRIBUTE_ID_BASE + 12)
        GOPHER_ATTRIBUTE_ID_SCORE = (GOPHER_ATTRIBUTE_ID_BASE + 13)
        GOPHER_ATTRIBUTE_ID_RANGE = (GOPHER_ATTRIBUTE_ID_BASE + 14)
        GOPHER_ATTRIBUTE_ID_SITE = (GOPHER_ATTRIBUTE_ID_BASE + 15)
        GOPHER_ATTRIBUTE_ID_ORG = (GOPHER_ATTRIBUTE_ID_BASE + 16)
        GOPHER_ATTRIBUTE_ID_LOCATION = (GOPHER_ATTRIBUTE_ID_BASE + 17)
        GOPHER_ATTRIBUTE_ID_GEOG = (GOPHER_ATTRIBUTE_ID_BASE + 18)
        GOPHER_ATTRIBUTE_ID_TIMEZONE = (GOPHER_ATTRIBUTE_ID_BASE + 19)
        GOPHER_ATTRIBUTE_ID_PROVIDER = (GOPHER_ATTRIBUTE_ID_BASE + 20)
        GOPHER_ATTRIBUTE_ID_VERSION = (GOPHER_ATTRIBUTE_ID_BASE + 21)
        GOPHER_ATTRIBUTE_ID_ABSTRACT = (GOPHER_ATTRIBUTE_ID_BASE + 22)
        GOPHER_ATTRIBUTE_ID_VIEW = (GOPHER_ATTRIBUTE_ID_BASE + 23)
        GOPHER_ATTRIBUTE_ID_TREEWALK = (GOPHER_ATTRIBUTE_ID_BASE + 24)
        GOPHER_ATTRIBUTE_ID_UNKNOWN = (GOPHER_ATTRIBUTE_ID_BASE + 25)
    End Enum
    Public Type GOPHER_ATTRIBUTE_TYPE
        CategoryId As INET_GOPHER_CATEGORY_IDS ' e.g. GOPHER_CATEGORY_ID_ADMIN
        AttributeId As INET_GOPHER_ATTRIBUTE_IDS ' e.g. GOPHER_ATTRIBUTE_ID_ADMIN
        /* Union
        Admin As GOPHER_ADMIN_ATTRIBUTE_TYPE
        ModDate As GOPHER_MOD_DATE_ATTRIBUTE_TYPE
        Ttl As GOPHER_TTL_ATTRIBUTE_TYPE
        Score As GOPHER_SCORE_ATTRIBUTE_TYPE
        ScoreRange As GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE
        Site As GOPHER_SITE_ATTRIBUTE_TYPE
        Organization As GOPHER_ORGANIZATION_ATTRIBUTE_TYPE
        Location As GOPHER_LOCATION_ATTRIBUTE_TYPE
        GeographicalLocation As GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE
        TimeZone As GOPHER_TIMEZONE_ATTRIBUTE_TYPE
        Provider As GOPHER_PROVIDER_ATTRIBUTE_TYPE
        Version As GOPHER_VERSION_ATTRIBUTE_TYPE
        Abstract As GOPHER_AStringACT_ATTRIBUTE_TYPE
        View As GOPHER_VIEW_ATTRIBUTE_TYPE
        Veronica As GOPHER_VERONICA_ATTRIBUTE_TYPE
        Ask As GOPHER_ASK_ATTRIBUTE_TYPE
        Unknown As GOPHER_UNKNOWN_ATTRIBUTE_TYPE
        End Union */
        attrib(23) As Byte
    End Type

    Public Const HTTP_MAJOR_VERSION  = 1
    Public Const HTTP_MINOR_VERSION  = 0
    Public Const HTTP_VERSION  = "HTTP/1.0"



    [Description("Includes unofficial additions that are in protocol standards or major infrastructure like Cloudflare, but not SDK header")]
    Public Enum INET_HTTP_STATUS_CODES
        HTTP_STATUS_CONTINUE = 100  ' OK to continue with request
        HTTP_STATUS_SWITCH_PROTOCOLS = 101  ' server has switched protocols in upgrade header
        HTTP_STATUS_OK = 200  ' request completed
        HTTP_STATUS_CREATED = 201  ' object created, reason = new URI
        HTTP_STATUS_ACCEPTED = 202  ' async completion (TBS)
        HTTP_STATUS_PARTIAL = 203  ' partial completion
        HTTP_STATUS_NO_CONTENT = 204  ' no info to return
        HTTP_STATUS_RESET_CONTENT = 205  ' request completed, but clear form
        HTTP_STATUS_PARTIAL_CONTENT = 206  ' partial GET furfilled
        HTTP_STATUS_MULTI_STATUS = 207
        HTTP_STATUS_ALREADY_REPORTED = 208
        HTTP_STATUS_IM_USED = 211
        HTTP_STATUS_FINE = 218 'This is fine.
        HTTP_STATUS_AMBIGUOUS = 300  ' server couldn't decide what to return
        HTTP_STATUS_MOVED = 301  ' object permanently moved
        HTTP_STATUS_REDIRECT = 302  ' object temporarily moved
        HTTP_STATUS_REDIRECT_METHOD = 303  ' redirection w/ new access method
        HTTP_STATUS_NOT_MODIFIED = 304  ' if-modified-since was not modified
        HTTP_STATUS_USE_PROXY = 305  ' redirection to proxy, location header specifies proxy to use
        HTTP_STATUS_REDIRECT_KEEP_VERB = 307  ' HTTP/1.1: keep same verb
        HTTP_STATUS_PERMANENT_REDIRECT = 308  ' Object permanently moved keep verb
        HTTP_STATUS_BAD_REQUEST = 400  ' invalid syntax
        HTTP_STATUS_DENIED = 401  ' access denied
        HTTP_STATUS_PAYMENT_REQ = 402  ' payment required
        HTTP_STATUS_FORBIDDEN = 403  ' request forbidden
        HTTP_STATUS_NOT_FOUND = 404  ' object not found
        HTTP_STATUS_BAD_METHOD = 405  ' method is not allowed
        HTTP_STATUS_NONE_ACCEPTABLE = 406  ' no response acceptable to client found
        HTTP_STATUS_PROXY_AUTH_REQ = 407  ' proxy authentication required
        HTTP_STATUS_REQUEST_TIMEOUT = 408  ' server timed out waiting for request
        HTTP_STATUS_CONFLICT = 409  ' user should resubmit with more info
        HTTP_STATUS_GONE = 410  ' the resource is no longer available
        HTTP_STATUS_LENGTH_REQUIRED = 411  ' the server refused to accept request w/o a length
        HTTP_STATUS_PRECOND_FAILED = 412  ' precondition given in request failed
        HTTP_STATUS_REQUEST_TOO_LARGE = 413  ' request entity was too large
        HTTP_STATUS_URI_TOO_LONG = 414  ' request URI too long
        HTTP_STATUS_UNSUPPORTED_MEDIA = 415  ' unsupported media type
        HTTP_STATUS_RANGE_NOT_SATISFIABLE = 416 'The client has asked for a portion of the file (byte serving), but the server cannot supply that portion. 
        HTTP_STATUS_EXPECTATION_FAILED = 417 'The server cannot meet the requirements of the Expect request-header field
        HTTP_STATUS_TEAPOT = 418 ' I'm a teapot
        HTTP_STATUS_MISDIRECTED_REQUEST = 421  ' misdirected request
        HTTP_STATUS_UNPROCESSABLE_ENTITY = 422 'The request was well-formed but was unable to be followed due to semantic errors.
        HTTP_STATUS_LOCKED = 423 'The resource that is being accessed is locked.
        HTTP_STATUS_FAILED_DEPENDENCY = 424
        HTTP_STATUS_TOO_EARLY = 425
        HTTP_STATUS_UPGRADE_REQUIRED = 426
        HTTP_STATUS_PRECONDITION_REQUIRED = 428
        HTTP_STATUS_TOO_MANY_REQUESTS = 429
        HTTP_STATUS_REQUEST_HEADER_FIELDS_TOO_LARGE_UNOFFICIAL = 430
        HTTP_STATUS_REQUEST_HEADER_FIELDS_TOO_LARGE = 431
        HTTP_STATUS_LOGIN_TIMEOUT = 440
        HTTP_STATUS_NO_RESPONSE = 444
        HTTP_STATUS_RETRY_WITH = 449  ' retry after doing the appropriate action.
        HTTP_STATUS_BLOCKED_BY_PARENTAL_CONTROL = 450
        HTTP_STATUS_UNAVAILABLE_FOR_LEGAL_REASONS = 451
        HTTP_STATUS_EXCHANGE_REDIRECT = 451
        HTTP_STATUS_CLIENT_CLOSED_LOAD_BALANCED_REQUEST = 460
        HTTP_STATUS_INVALID_X_FORWARDED_FOR = 463
        HTTP_STATUS_REQUEST_HEADER_TOO_LARGE = 494
        HTTP_STATUS_SSL_CERTIFICATE_ERROR = 495
        HTTP_STATUS_SSL_CERTIFICATE_REQUIRED = 496
        HTTP_STATUS_HTTP_REQUEST_SENT_TO_HTTPS_PORT = 497
        HTTP_STATUS_INVALID_TOKEN = 498
        HTTP_STATUS_CLIENT_CLOSED_REQUEST = 499
        HTTP_STATUS_SERVER_ERROR = 500  ' internal server error
        HTTP_STATUS_NOT_SUPPORTED = 501  ' required not supported
        HTTP_STATUS_BAD_GATEWAY = 502  ' error response received from gateway
        HTTP_STATUS_SERVICE_UNAVAIL = 503  ' temporarily overloaded
        HTTP_STATUS_GATEWAY_TIMEOUT = 504  ' timed out waiting for gateway
        HTTP_STATUS_VERSION_NOT_SUP = 505  ' HTTP version not supported
        HTTP_STATUS_VARIANT_ALSO_NEGOTIATES = 506
        HTTP_STATUS_INSUFFICIENT_STORAGE = 507
        HTTP_STATUS_LOOP_DETECTED = 508
        HTTP_STATUS_BANDWIDTH_LIMIT_EXCEEDED = 509
        HTTP_STATUS_NOT_EXTENDED = 510
        HTTP_STATUS_NETWORK_AUTHENTICATION_REQUIRED = 511
        HTTP_STATUS_WEB_SERVER_UNKNOWN_ERROR = 520
        HTTP_STATUS_WEB_SERVER_IS_DOWN = 521
        HTTP_STATUS_CONNECTION_TIMEOUT = 522
        HTTP_STATUS_ORIGIN_IS_UNREACHABLE = 523
        HTTP_STATUS_TIMEOUT_OCCURED = 524
        HTTP_STATUS_SSL_HANDSHAKE_FAILED = 525
        HTTP_STATUS_INVALID_SSL_CERTIFICATE = 526
        HTTP_STATUS_RAILGUN_ERROR = 527
        HTTP_STATUS_SITE_IS_OVERLOADED = 529
        HTTP_STATUS_SITE_IS_FROZEN = 530
        HTTP_STATUS_IDENTITY_PROVIDER_AUTHENTICATION_ERROR = 561
        HTTP_STATUS_NETWORK_READ_TIMEOUT = 598
        HTTP_STATUS_NETWORK_CONNECT_TIMEOUT = 599
        HTTP_STATUS_FIRST = HTTP_STATUS_CONTINUE
        HTTP_STATUS_LAST = HTTP_STATUS_VERSION_NOT_SUP 'Above this are not in SDK header, but part of official protocol or widely used
    End Enum

    Public Enum INET_HTTP_ADDREQ_FLAGS
        HTTP_ADDREQ_INDEX_MASK = &H0000FFFF&
        HTTP_ADDREQ_FLAGS_MASK = &HFFFF0000
    '  HTTP_ADDREQ_FLAG_ADD_IF_NEW - the header will only be added if it doesn't
    '  already exist
        HTTP_ADDREQ_FLAG_ADD_IF_NEW = &H10000000
    '  HTTP_ADDREQ_FLAG_ADD - if HTTP_ADDREQ_FLAG_REPLACE is set but the header is
    '  not found then if this flag is set, the header is added anyway, so long as
    '  there is a valid header-value
        HTTP_ADDREQ_FLAG_ADD = &H20000000
    '  HTTP_ADDREQ_FLAG_COALESCE - coalesce headers with same name. e.g.
    '  "Accept: text/*" and "Accept: audio/*" with this flag results in a single
    '  header: "Accept: text/*, audio/*"
        HTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA = &H40000000
        HTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON = &H01000000
        HTTP_ADDREQ_FLAG_COALESCE = HTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA
    '  HTTP_ADDREQ_FLAG_REPLACE - replaces the specified header. Only one header can
    '  be supplied in the buffer. If the header to be replaced is not the first
    '  in a list of headers with the same name, then the relative index should be
    '  supplied in the low 8 bits of the dwModifiers parameter. If the header-value
    '  part is missing, then the header is removed
        HTTP_ADDREQ_FLAG_REPLACE = &H80000000
    End Enum

    Public Enum INET_HTTPSENDEX_FLAGS
        HSR_ASYNC = WININET_API_FLAG_ASYNC  ' force async
        HSR_SYNC = WININET_API_FLAG_SYNC  ' force sync
        HSR_USE_CONTEXT = WININET_API_FLAG_USE_CONTEXT  ' use dwContext value
        HSR_INITIATE = &H00000008  ' iterative operation (completed by HttpEndRequest)
        HSR_DOWNLOAD = &H00000010  ' download to file
        HSR_CHUNKED = &H00000020  ' operation is send of chunked data
    End Enum

    Public Enum INET_COOKIE_FLAGS
        INTERNET_COOKIE_IS_SECURE = &H00000001
        INTERNET_COOKIE_IS_SESSION = &H00000002
        INTERNET_COOKIE_THIRD_PARTY = &H00000010
        INTERNET_COOKIE_PROMPT_REQUIRED = &H00000020
        INTERNET_COOKIE_EVALUATE_P3P = &H00000040
        INTERNET_COOKIE_APPLY_P3P = &H00000080
        INTERNET_COOKIE_P3P_ENABLED = &H00000100
        INTERNET_COOKIE_IS_RESTRICTED = &H00000200
        INTERNET_COOKIE_IE6 = &H00000400
        INTERNET_COOKIE_IS_LEGACY = &H00000800
        INTERNET_COOKIE_NON_SCRIPT = &H00001000
        INTERNET_COOKIE_HTTPONLY = &H00002000
        INTERNET_COOKIE_HOST_ONLY = &H00004000
        INTERNET_COOKIE_APPLY_HOST_ONLY = &H00008000&
        INTERNET_COOKIE_HOST_ONLY_APPLIED = &H00080000
        INTERNET_COOKIE_SAME_SITE_STRICT = &H00100000
        INTERNET_COOKIE_SAME_SITE_LAX = &H00200000
        INTERNET_COOKIE_SAME_SITE_LEVEL_CROSS_SITE = &H00400000
    End Enum
    Public Type INTERNET_COOKIE2
        pwszName As LongPtr
        pwszValue As LongPtr
        pwszDomain As LongPtr
        pwszPath As LongPtr
        dwFlags As INET_COOKIE_FLAGS
        ftExpires As FILETIME
        fExpiresSet As BOOL
    End Type

    Public Enum INET_ICC_FLAGS
        FLAG_ICC_FORCE_CONNECTION = &H00000001
    End Enum

    Public Enum INET_ERRDLG_FLAGS
        FLAGS_ERROR_UI_FILTER_FOR_ERRORS = &H01
        FLAGS_ERROR_UI_FLAGS_CHANGE_OPTIONS = &H02
        FLAGS_ERROR_UI_FLAGS_GENERATE_DATA = &H04
        FLAGS_ERROR_UI_FLAGS_NO_UI = &H08
        FLAGS_ERROR_UI_SERIALIZE_DIALOGS = &H10
    End Enum

    Public Type INTERNET_AUTH_NOTIFY_DATA
        cbStruct As Long ' size of this structure
        dwOptions As Long ' reserved: must set to 0
        pfnNotify As LongPtr 'PFN_AUTH_NOTIFY ' notification callback to retry InternetErrorDlg
        dwContext As LongPtr ' context to pass to to notification function
    End Type

    Public Enum INET_ERROR_VALUES
        INTERNET_ERROR_BASE = 12000
        ERROR_INTERNET_OUT_OF_HANDLES = (INTERNET_ERROR_BASE + 1)
        ERROR_INTERNET_TIMEOUT = (INTERNET_ERROR_BASE + 2)
        ERROR_INTERNET_EXTENDED_ERROR = (INTERNET_ERROR_BASE + 3)
        ERROR_INTERNET_INTERNAL_ERROR = (INTERNET_ERROR_BASE + 4)
        ERROR_INTERNET_INVALID_URL = (INTERNET_ERROR_BASE + 5)
        ERROR_INTERNET_UNRECOGNIZED_SCHEME = (INTERNET_ERROR_BASE + 6)
        ERROR_INTERNET_NAME_NOT_RESOLVED = (INTERNET_ERROR_BASE + 7)
        ERROR_INTERNET_PROTOCOL_NOT_FOUND = (INTERNET_ERROR_BASE + 8)
        ERROR_INTERNET_INVALID_OPTION = (INTERNET_ERROR_BASE + 9)
        ERROR_INTERNET_BAD_OPTION_LENGTH = (INTERNET_ERROR_BASE + 10)
        ERROR_INTERNET_OPTION_NOT_SETTABLE = (INTERNET_ERROR_BASE + 11)
        ERROR_INTERNET_SHUTDOWN = (INTERNET_ERROR_BASE + 12)
        ERROR_INTERNET_INCORRECT_USER_NAME = (INTERNET_ERROR_BASE + 13)
        ERROR_INTERNET_INCORRECT_PASSWORD = (INTERNET_ERROR_BASE + 14)
        ERROR_INTERNET_LOGIN_FAILURE = (INTERNET_ERROR_BASE + 15)
        ERROR_INTERNET_INVALID_OPERATION = (INTERNET_ERROR_BASE + 16)
        ERROR_INTERNET_OPERATION_CANCELLED = (INTERNET_ERROR_BASE + 17)
        ERROR_INTERNET_INCORRECT_HANDLE_TYPE = (INTERNET_ERROR_BASE + 18)
        ERROR_INTERNET_INCORRECT_HANDLE_STATE = (INTERNET_ERROR_BASE + 19)
        ERROR_INTERNET_NOT_PROXY_REQUEST = (INTERNET_ERROR_BASE + 20)
        ERROR_INTERNET_REGISTRY_VALUE_NOT_FOUND = (INTERNET_ERROR_BASE + 21)
        ERROR_INTERNET_BAD_REGISTRY_PARAMETER = (INTERNET_ERROR_BASE + 22)
        ERROR_INTERNET_NO_DIRECT_ACCESS = (INTERNET_ERROR_BASE + 23)
        ERROR_INTERNET_NO_CONTEXT = (INTERNET_ERROR_BASE + 24)
        ERROR_INTERNET_NO_CALLBACK = (INTERNET_ERROR_BASE + 25)
        ERROR_INTERNET_REQUEST_PENDING = (INTERNET_ERROR_BASE + 26)
        ERROR_INTERNET_INCORRECT_FORMAT = (INTERNET_ERROR_BASE + 27)
        ERROR_INTERNET_ITEM_NOT_FOUND = (INTERNET_ERROR_BASE + 28)
        ERROR_INTERNET_CANNOT_CONNECT = (INTERNET_ERROR_BASE + 29)
        ERROR_INTERNET_CONNECTION_ABORTED = (INTERNET_ERROR_BASE + 30)
        ERROR_INTERNET_CONNECTION_RESET = (INTERNET_ERROR_BASE + 31)
        ERROR_INTERNET_FORCE_RETRY = (INTERNET_ERROR_BASE + 32)
        ERROR_INTERNET_INVALID_PROXY_REQUEST = (INTERNET_ERROR_BASE + 33)
        ERROR_INTERNET_NEED_UI = (INTERNET_ERROR_BASE + 34)
        ERROR_INTERNET_HANDLE_EXISTS = (INTERNET_ERROR_BASE + 36)
        ERROR_INTERNET_SEC_CERT_DATE_INVALID = (INTERNET_ERROR_BASE + 37)
        ERROR_INTERNET_SEC_CERT_CN_INVALID = (INTERNET_ERROR_BASE + 38)
        ERROR_INTERNET_HTTP_TO_HTTPS_ON_REDIR = (INTERNET_ERROR_BASE + 39)
        ERROR_INTERNET_HTTPS_TO_HTTP_ON_REDIR = (INTERNET_ERROR_BASE + 40)
        ERROR_INTERNET_MIXED_SECURITY = (INTERNET_ERROR_BASE + 41)
        ERROR_INTERNET_CHG_POST_IS_NON_SECURE = (INTERNET_ERROR_BASE + 42)
        ERROR_INTERNET_POST_IS_NON_SECURE = (INTERNET_ERROR_BASE + 43)
        ERROR_INTERNET_CLIENT_AUTH_CERT_NEEDED = (INTERNET_ERROR_BASE + 44)
        ERROR_INTERNET_INVALID_CA = (INTERNET_ERROR_BASE + 45)
        ERROR_INTERNET_CLIENT_AUTH_NOT_SETUP = (INTERNET_ERROR_BASE + 46)
        ERROR_INTERNET_ASYNC_THREAD_FAILED = (INTERNET_ERROR_BASE + 47)
        ERROR_INTERNET_REDIRECT_SCHEME_CHANGE = (INTERNET_ERROR_BASE + 48)
        ERROR_INTERNET_DIALOG_PENDING = (INTERNET_ERROR_BASE + 49)
        ERROR_INTERNET_RETRY_DIALOG = (INTERNET_ERROR_BASE + 50)
        ERROR_INTERNET_HTTPS_HTTP_SUBMIT_REDIR = (INTERNET_ERROR_BASE + 52)
        ERROR_INTERNET_INSERT_CDROM = (INTERNET_ERROR_BASE + 53)
        ERROR_INTERNET_FORTEZZA_LOGIN_NEEDED = (INTERNET_ERROR_BASE + 54)
        ERROR_INTERNET_SEC_CERT_ERRORS = (INTERNET_ERROR_BASE + 55)
        ERROR_INTERNET_SEC_CERT_NO_REV = (INTERNET_ERROR_BASE + 56)
        ERROR_INTERNET_SEC_CERT_REV_FAILED = (INTERNET_ERROR_BASE + 57)
        ERROR_HTTP_HSTS_REDIRECT_REQUIRED = (INTERNET_ERROR_BASE + 60)
        ERROR_INTERNET_SEC_CERT_WEAK_SIGNATURE = (INTERNET_ERROR_BASE + 62)
    '  FTP API errors
        ERROR_FTP_TRANSFER_IN_PROGRESS = (INTERNET_ERROR_BASE + 110)
        ERROR_FTP_DROPPED = (INTERNET_ERROR_BASE + 111)
        ERROR_FTP_NO_PASSIVE_MODE = (INTERNET_ERROR_BASE + 112)
    '  gopher API errors
        ERROR_GOPHER_PROTOCOL_ERROR = (INTERNET_ERROR_BASE + 130)
        ERROR_GOPHER_NOT_FILE = (INTERNET_ERROR_BASE + 131)
        ERROR_GOPHER_DATA_ERROR = (INTERNET_ERROR_BASE + 132)
        ERROR_GOPHER_END_OF_DATA = (INTERNET_ERROR_BASE + 133)
        ERROR_GOPHER_INVALID_LOCATOR = (INTERNET_ERROR_BASE + 134)
        ERROR_GOPHER_INCORRECT_LOCATOR_TYPE = (INTERNET_ERROR_BASE + 135)
        ERROR_GOPHER_NOT_GOPHER_PLUS = (INTERNET_ERROR_BASE + 136)
        ERROR_GOPHER_ATTRIBUTE_NOT_FOUND = (INTERNET_ERROR_BASE + 137)
        ERROR_GOPHER_UNKNOWN_LOCATOR = (INTERNET_ERROR_BASE + 138)
    '  HTTP API errors
        ERROR_HTTP_HEADER_NOT_FOUND = (INTERNET_ERROR_BASE + 150)
        ERROR_HTTP_DOWNLEVEL_SERVER = (INTERNET_ERROR_BASE + 151)
        ERROR_HTTP_INVALID_SERVER_RESPONSE = (INTERNET_ERROR_BASE + 152)
        ERROR_HTTP_INVALID_HEADER = (INTERNET_ERROR_BASE + 153)
        ERROR_HTTP_INVALID_QUERY_REQUEST = (INTERNET_ERROR_BASE + 154)
        ERROR_HTTP_HEADER_ALREADY_EXISTS = (INTERNET_ERROR_BASE + 155)
        ERROR_HTTP_REDIRECT_FAILED = (INTERNET_ERROR_BASE + 156)
        ERROR_HTTP_NOT_REDIRECTED = (INTERNET_ERROR_BASE + 160)
        ERROR_HTTP_COOKIE_NEEDS_CONFIRMATION = (INTERNET_ERROR_BASE + 161)
        ERROR_HTTP_COOKIE_DECLINED = (INTERNET_ERROR_BASE + 162)
        ERROR_HTTP_REDIRECT_NEEDS_CONFIRMATION = (INTERNET_ERROR_BASE + 168)
    '  additional Internet API error codes
        ERROR_INTERNET_SECURITY_CHANNEL_ERROR = (INTERNET_ERROR_BASE + 157)
        ERROR_INTERNET_UNABLE_TO_CACHE_FILE = (INTERNET_ERROR_BASE + 158)
        ERROR_INTERNET_TCPIP_NOT_INSTALLED = (INTERNET_ERROR_BASE + 159)
        ERROR_INTERNET_DISCONNECTED = (INTERNET_ERROR_BASE + 163)
        ERROR_INTERNET_SERVER_UNREACHABLE = (INTERNET_ERROR_BASE + 164)
        ERROR_INTERNET_PROXY_SERVER_UNREACHABLE = (INTERNET_ERROR_BASE + 165)
        ERROR_INTERNET_BAD_AUTO_PROXY_SCRIPT = (INTERNET_ERROR_BASE + 166)
        ERROR_INTERNET_UNABLE_TO_DOWNLOAD_SCRIPT = (INTERNET_ERROR_BASE + 167)
        ERROR_INTERNET_SEC_INVALID_CERT = (INTERNET_ERROR_BASE + 169)
        ERROR_INTERNET_SEC_CERT_REVOKED = (INTERNET_ERROR_BASE + 170)
    '  InternetAutodial specific errors
        ERROR_INTERNET_FAILED_DUETOSECURITYCHECK = (INTERNET_ERROR_BASE + 171)
        ERROR_INTERNET_NOT_INITIALIZED = (INTERNET_ERROR_BASE + 172)
        ERROR_INTERNET_NEED_MSN_SSPI_PKG = (INTERNET_ERROR_BASE + 173)
        ERROR_INTERNET_LOGIN_FAILURE_DISPLAY_ENTITY_BODY = (INTERNET_ERROR_BASE + 174)
    '  Decoding/Decompression specific errors
        ERROR_INTERNET_DECODING_FAILED = (INTERNET_ERROR_BASE + 175)
        ERROR_INTERNET_CLIENT_AUTH_CERT_NEEDED_PROXY = (INTERNET_ERROR_BASE + 187)
        ERROR_INTERNET_SECURE_FAILURE_PROXY = (INTERNET_ERROR_BASE + 188)
        ERROR_INTERNET_HTTP_PROTOCOL_MISMATCH = (INTERNET_ERROR_BASE + 190)
        ERROR_INTERNET_GLOBAL_CALLBACK_FAILED = (INTERNET_ERROR_BASE + 191)
        ERROR_INTERNET_FEATURE_DISABLED = (INTERNET_ERROR_BASE + 192)
        INTERNET_ERROR_LAST = (INTERNET_ERROR_BASE + 192)
    End Enum

    Public Enum INET_CACHE_ENTRIES
        NORMAL_CACHE_ENTRY = &H00000001
        STICKY_CACHE_ENTRY = &H00000004
        EDITED_CACHE_ENTRY = &H00000008
        TRACK_OFFLINE_CACHE_ENTRY = &H00000010
        TRACK_ONLINE_CACHE_ENTRY = &H00000020
        SPARSE_CACHE_ENTRY = &H00010000
        COOKIE_CACHE_ENTRY = &H00100000
        URLHISTORY_CACHE_ENTRY = &H00200000
        URLCACHE_FIND_DEFAULT_FILTER = NORMAL_CACHE_ENTRY Or COOKIE_CACHE_ENTRY Or URLHISTORY_CACHE_ENTRY Or TRACK_OFFLINE_CACHE_ENTRY Or TRACK_ONLINE_CACHE_ENTRY Or STICKY_CACHE_ENTRY
    End Enum
    Public Type INTERNET_CACHE_ENTRY_INFOA
        dwStructSize As Long ' version of cache system.
        lpszSourceUrlName As String ' embedded pointer to the URL name string.
        lpszLocalFileName As String ' embedded pointer to the local file name.
        CacheEntryType As INET_CACHE_ENTRIES ' cache type bit mask.
        dwUseCount As Long ' current users count of the cache entry.
        dwHitRate As Long ' num of times the cache entry was retrieved.
        dwSizeLow As Long ' low DWORD of the file size.
        dwSizeHigh As Long ' high DWORD of the file size.
        LastModifiedTime As FILETIME ' last modified time of the file in GMT format.
        ExpireTime As FILETIME ' expire time of the file in GMT format
        LastAccessTime As FILETIME ' last accessed time in GMT format
        LastSyncTime As FILETIME ' last time the URL was synchronized
        ' with the source
        lpHeaderInfo As String ' embedded pointer to the header info.
        dwHeaderInfoSize As Long ' size of the above header.
        lpszFileExtension As String ' File extension used to retrive the urldata as a file.
        'union {                     // Exemption delta from last access time.
        '       DWORD dwReserved;
        dwExemptDelta As Long
        '};                          // Exemption delta from last access
    End Type
    Public Type INTERNET_CACHE_ENTRY_INFOW
        dwStructSize As Long ' version of cache system.
        lpszSourceUrlName As LongPtr ' embedded pointer to the URL name string.
        lpszLocalFileName As LongPtr ' embedded pointer to the local file name.
        CacheEntryType As INET_CACHE_ENTRIES ' cache type bit mask.
        dwUseCount As Long ' current users count of the cache entry.
        dwHitRate As Long ' num of times the cache entry was retrieved.
        dwSizeLow As Long ' low DWORD of the file size.
        dwSizeHigh As Long ' high DWORD of the file size.
        LastModifiedTime As FILETIME ' last modified time of the file in GMT format.
        ExpireTime As FILETIME ' expire time of the file in GMT format
        LastAccessTime As FILETIME ' last accessed time in GMT format
        LastSyncTime As FILETIME ' last time the URL was synchronized
        ' with the source
        lpHeaderInfo As LongPtr ' embedded pointer to the header info.
        dwHeaderInfoSize As Long ' size of the above header.
        lpszFileExtension As LongPtr ' File extension used to retrive the urldata as a file.
        'union {                     // Exemption delta from last access time.
        '       DWORD dwReserved;
        dwExemptDelta As Long
        '};                          // Exemption delta from last access
    End Type
    'Alias INTERNET_CACHE_ENTRY_INFO As INTERNET_CACHE_ENTRY_INFOW
    Public Type INTERNET_CACHE_ENTRY_INFO
        dwStructSize As Long ' version of cache system.
        lpszSourceUrlName As LongPtr ' embedded pointer to the URL name string.
        lpszLocalFileName As LongPtr ' embedded pointer to the local file name.
        CacheEntryType As INET_CACHE_ENTRIES ' cache type bit mask.
        dwUseCount As Long ' current users count of the cache entry.
        dwHitRate As Long ' num of times the cache entry was retrieved.
        dwSizeLow As Long ' low DWORD of the file size.
        dwSizeHigh As Long ' high DWORD of the file size.
        LastModifiedTime As FILETIME ' last modified time of the file in GMT format.
        ExpireTime As FILETIME ' expire time of the file in GMT format
        LastAccessTime As FILETIME ' last accessed time in GMT format
        LastSyncTime As FILETIME ' last time the URL was synchronized
        ' with the source
        lpHeaderInfo As LongPtr ' embedded pointer to the header info.
        dwHeaderInfoSize As Long ' size of the above header.
        lpszFileExtension As LongPtr ' File extension used to retrive the urldata as a file.
        'union {                     // Exemption delta from last access time.
        '       DWORD dwReserved;
        dwExemptDelta As Long
        '};                          // Exemption delta from last access
    End Type

    Public Type INTERNET_CACHE_TIMESTAMPS
        ftExpires As FILETIME
        ftLastModified As FILETIME
    End Type

    Public Enum INET_CACHEGROUP_ATTRIBUTES
        CACHEGROUP_ATTRIBUTE_GET_ALL = &Hffffffff
        CACHEGROUP_ATTRIBUTE_BASIC = &H00000001
        CACHEGROUP_ATTRIBUTE_FLAG = &H00000002
        CACHEGROUP_ATTRIBUTE_TYPE = &H00000004
        CACHEGROUP_ATTRIBUTE_QUOTA = &H00000008
        CACHEGROUP_ATTRIBUTE_GROUPNAME = &H00000010
        CACHEGROUP_ATTRIBUTE_STORAGE = &H00000020
    '  updatable cache group fields
        CACHEGROUP_READWRITE_MASK = CACHEGROUP_ATTRIBUTE_TYPE Or CACHEGROUP_ATTRIBUTE_QUOTA Or CACHEGROUP_ATTRIBUTE_GROUPNAME Or CACHEGROUP_ATTRIBUTE_STORAGE
    End Enum
    Public Enum INET_CACHEGROUP_FLAGS
        CACHEGROUP_FLAG_NONPURGEABLE = &H00000001
        CACHEGROUP_FLAG_GIDONLY = &H00000004
        CACHEGROUP_FLAG_FLUSHURL_ONDELETE = &H00000002
    End Enum
    Public Enum INET_CACHEGROUP_TYPES
        CACHEGROUP_TYPE_INVALID = &H00000001
    End Enum
    Public Enum INET_CACHEGROUP_SEARCH
        CACHEGROUP_SEARCH_ALL = &H00000000
        CACHEGROUP_SEARCH_BYURL = &H00000001
    End Enum

    Public Const GROUPNAME_MAX_LENGTH  = 120
    Public Const GROUP_OWNER_STORAGE_SIZE  = 4

    Public Type INTERNET_CACHE_GROUP_INFOA
        dwGroupSize As Long
        dwGroupFlags As INET_CACHEGROUP_FLAGS
        dwGroupType As INET_CACHEGROUP_TYPES
        dwDiskUsage As Long ' in KB
        dwDiskQuota As Long ' in KB
        dwOwnerStorage(0 To (GROUP_OWNER_STORAGE_SIZE - 1)) As Long
        szGroupName(0 To (GROUPNAME_MAX_LENGTH - 1)) As Byte
    End Type
    Public Type INTERNET_CACHE_GROUP_INFOW
        dwGroupSize As Long
        dwGroupFlags As INET_CACHEGROUP_FLAGS
        dwGroupType As INET_CACHEGROUP_TYPES
        dwDiskUsage As Long ' in KB
        dwDiskQuota As Long ' in KB
        dwOwnerStorage(0 To (GROUP_OWNER_STORAGE_SIZE - 1)) As Long
        szGroupName(0 To (GROUPNAME_MAX_LENGTH - 1)) As Integer
    End Type
    'Alias INTERNET_CACHE_GROUP_INFO As INTERNET_CACHE_GROUP_INFOW
    Public Type INTERNET_CACHE_GROUP_INFO
        dwGroupSize As Long
        dwGroupFlags As INET_CACHEGROUP_FLAGS
        dwGroupType As INET_CACHEGROUP_TYPES
        dwDiskUsage As Long ' in KB
        dwDiskQuota As Long ' in KB
        dwOwnerStorage(0 To (GROUP_OWNER_STORAGE_SIZE - 1)) As Long
        szGroupName(0 To (GROUPNAME_MAX_LENGTH - 1)) As Integer
    End Type

    Public Enum INET_CACHEENTRY_FIELDCONTROL
        CACHE_ENTRY_ATTRIBUTE_FC = &H00000004
        CACHE_ENTRY_HITRATE_FC = &H00000010
        CACHE_ENTRY_MODTIME_FC = &H00000040
        CACHE_ENTRY_EXPTIME_FC = &H00000080
        CACHE_ENTRY_ACCTIME_FC = &H00000100
        CACHE_ENTRY_SYNCTIME_FC = &H00000200
        CACHE_ENTRY_HEADERINFO_FC = &H00000400
        CACHE_ENTRY_EXEMPT_DELTA_FC = &H00000800
    End Enum

    Public Enum INET_CACHE_GROUP_SET
        INTERNET_CACHE_GROUP_ADD = 0
        INTERNET_CACHE_GROUP_REMOVE = 1
    End Enum

    Public Enum INET_DIAL_FLAGS
        INTERNET_AUTODIAL_FORCE_ONLINE = 1
        INTERNET_AUTODIAL_FORCE_UNATTENDED = 2
        INTERNET_AUTODIAL_FAILIFSECURITYCHECK = 4
        INTERNET_AUTODIAL_OVERRIDE_NET_PRESENT = 8
        INTERNET_AUTODIAL_FLAGS_MASK = (INTERNET_AUTODIAL_FORCE_ONLINE Or INTERNET_AUTODIAL_FORCE_UNATTENDED Or INTERNET_AUTODIAL_FAILIFSECURITYCHECK Or INTERNET_AUTODIAL_OVERRIDE_NET_PRESENT)
        INTERNET_DIAL_FORCE_PROMPT = &H2000
        INTERNET_DIAL_SHOW_OFFLINE = &H4000
        INTERNET_DIAL_UNATTENDED = &H8000&
    End Enum

    Public Enum INET_GOONLINE_FLAGS
        INTERENT_GOONLINE_REFRESH = &H00000001
        INTERENT_GOONLINE_NOPROMPT = &H00000002
        INTERENT_GOONLINE_MASK = &H00000003
    End Enum

    Public Enum INET_CONSTATE_FLAGS
        INTERNET_CONNECTION_MODEM = &H01
        INTERNET_CONNECTION_LAN = &H02
        INTERNET_CONNECTION_PROXY = &H04
        INTERNET_CONNECTION_MODEM_BUSY = &H08 /* no longer used */
        INTERNET_RAS_INSTALLED = &H10
        INTERNET_CONNECTION_OFFLINE = &H20
        INTERNET_CONNECTION_CONFIGURED = &H40
    End Enum

    Public Enum INET_COUSTOMDIAL_FLAGS
        INTERNET_CUSTOMDIAL_CONNECT = 0
        INTERNET_CUSTOMDIAL_UNATTENDED = 1
        INTERNET_CUSTOMDIAL_DISCONNECT = 2
        INTERNET_CUSTOMDIAL_SHOWOFFLINE = 4
    End Enum

    Public Enum INET_COUSTOMDIAL_FUNC
        INTERNET_CUSTOMDIAL_SAFE_FOR_UNATTENDED = 1
        INTERNET_CUSTOMDIAL_WILL_SUPPLY_STATE = 2
        INTERNET_CUSTOMDIAL_CAN_HANGUP = 4
    End Enum

    Public Enum WPAD_CACHE_DELETE
        WPAD_CACHE_DELETE_CURRENT = &H0
        WPAD_CACHE_DELETE_ALL = &H1
    End Enum

    Public Enum INET_SETDIALSTATE_FLAGS
        INTERNET_DIALSTATE_DISCONNECTED = 1
    End Enum

    Public Enum INET_IDENTITY_FLAGS
        INTERNET_IDENTITY_FLAG_PRIVATE_CACHE = &H01
        INTERNET_IDENTITY_FLAG_SHARED_CACHE = &H02
        INTERNET_IDENTITY_FLAG_CLEAR_DATA = &H04
        INTERNET_IDENTITY_FLAG_CLEAR_COOKIES = &H08
        INTERNET_IDENTITY_FLAG_CLEAR_HISTORY = &H10
        INTERNET_IDENTITY_FLAG_CLEAR_CONTENT = &H20
    End Enum

    Public Enum INET_SUPPRESS_COOKIE
        INTERNET_SUPPRESS_RESET_ALL = &H00
        INTERNET_SUPPRESS_COOKIE_POLICY = &H01
        INTERNET_SUPPRESS_COOKIE_POLICY_RESET = &H02
    End Enum

    Public Enum INET_PRIVACY_TEMPLATES
        PRIVACY_TEMPLATE_NO_COOKIES = 0
        PRIVACY_TEMPLATE_HIGH = 1
        PRIVACY_TEMPLATE_MEDIUM_HIGH = 2
        PRIVACY_TEMPLATE_MEDIUM = 3
        PRIVACY_TEMPLATE_MEDIUM_LOW = 4
        PRIVACY_TEMPLATE_LOW = 5
        PRIVACY_TEMPLATE_CUSTOM = 100
        PRIVACY_TEMPLATE_ADVANCED = 101
        PRIVACY_TEMPLATE_MAX = PRIVACY_TEMPLATE_LOW
    End Enum

    Public Enum PrivacyType
        PRIVACY_TYPE_FIRST_PARTY = 0
        PRIVACY_TYPE_THIRD_PARTY = 1
    End Enum

    Public Enum WinInetProxAutodetectTypes
        PROXY_AUTO_DETECT_TYPE_DHCP = 1
        PROXY_AUTO_DETECT_TYPE_DNS_A = 2
    End Enum

    Public Type AUTO_PROXY_SCRIPT_BUFFER
        dwStructSize As Long ' Size of struct
        lpszScriptBuffer As String ' Buffer to Pass
        dwScriptBufferSize As Long ' Size of buffer above
    End Type


    Public Declare PtrSafe Function InternetTimeFromSystemTimeA Lib "wininet" (pst As SYSTEMTIME, ByVal dwRFC As INET_SYSTIME_RFCS, ByVal lpszTime As String, ByVal cbTime As Long) As BOOL
    Public Declare PtrSafe Function InternetTimeFromSystemTimeW Lib "wininet" (pst As SYSTEMTIME, ByVal dwRFC As INET_SYSTIME_RFCS, ByVal lpszTime As LongPtr, ByVal cbTime As Long) As BOOL
    Public DeclareWide PtrSafe Function InternetTimeFromSystemTime Lib "wininet" Alias "InternetTimeFromSystemTimeW" (pst As SYSTEMTIME, ByVal dwRFC As INET_SYSTIME_RFCS, ByVal lpszTime As String, ByVal cbTime As Long) As BOOL
    Public Declare PtrSafe Function InternetTimeToSystemTimeA Lib "wininet" (ByVal lpszTime As String, pst As SYSTEMTIME, ByVal dwReserved As Long) As BOOL
    Public Declare PtrSafe Function InternetTimeToSystemTimeW Lib "wininet" (ByVal lpszTime As LongPtr, pst As SYSTEMTIME, ByVal dwReserved As Long) As BOOL
    Public DeclareWide PtrSafe Function InternetTimeToSystemTime Lib "wininet" Alias "InternetTimeToSystemTimeW" (ByVal lpszTime As String, pst As SYSTEMTIME, ByVal dwReserved As Long) As BOOL
    Public Declare PtrSafe Function InternetCrackUrlA Lib "wininet" (ByVal lpszUrl As String, ByVal dwUrlLength As Long, ByVal dwFlags As INET_ICU_FLAGS, lpUrlComponents As URL_COMPONENTSA) As BOOL
    Public Declare PtrSafe Function InternetCrackUrlW Lib "wininet" (ByVal lpszUrl As LongPtr, ByVal dwUrlLength As Long, ByVal dwFlags As INET_ICU_FLAGS, lpUrlComponents As URL_COMPONENTSW) As BOOL
    Public DeclareWide PtrSafe Function InternetCrackUrl Lib "wininet" Alias "InternetCrackUrlW" (ByVal lpszUrl As String, ByVal dwUrlLength As Long, ByVal dwFlags As INET_ICU_FLAGS, lpUrlComponents As URL_COMPONENTS) As BOOL
    Public Declare PtrSafe Function InternetCreateUrlA Lib "wininet" (lpUrlComponents As URL_COMPONENTSA, ByVal dwFlags As INET_ICU_FLAGS, ByVal lpszUrl As String, pdwUrlLength As Long) As BOOL
    Public Declare PtrSafe Function InternetCreateUrlW Lib "wininet" (lpUrlComponents As URL_COMPONENTSW, ByVal dwFlags As INET_ICU_FLAGS, ByVal lpszUrl As LongPtr, pdwUrlLength As Long) As BOOL
    Public DeclareWide PtrSafe Function InternetCreateUrl Lib "wininet" Alias "InternetCreateUrlW" (lpUrlComponents As URL_COMPONENTS, ByVal dwFlags As INET_ICU_FLAGS, ByVal lpszUrl As String, pdwUrlLength As Long) As BOOL
    Public Declare PtrSafe Function InternetCanonicalizeUrlA Lib "wininet" (ByVal lpszUrl As String, ByVal lpszBuffer As String, lpdwBufferLength As Long, ByVal dwFlags As INET_ICU_FLAGS) As BOOL
    Public Declare PtrSafe Function InternetCanonicalizeUrlW Lib "wininet" (ByVal lpszUrl As LongPtr, ByVal lpszBuffer As LongPtr, lpdwBufferLength As Long, ByVal dwFlags As INET_ICU_FLAGS) As BOOL
    Public DeclareWide PtrSafe Function InternetCanonicalizeUrl Lib "wininet" Alias "InternetCanonicalizeUrlW" (ByVal lpszUrl As String, ByVal lpszBuffer As String, lpdwBufferLength As Long, ByVal dwFlags As INET_ICU_FLAGS) As BOOL
    Public Declare PtrSafe Function InternetCombineUrlA Lib "wininet" (ByVal lpszBaseUrl As String, ByVal lpszRelativeUrl As String, ByVal lpszBuffer As String, lpdwBufferLength As Long, ByVal dwFlags As INET_ICU_FLAGS) As BOOL
    Public Declare PtrSafe Function InternetCombineUrlW Lib "wininet" (ByVal lpszBaseUrl As LongPtr, ByVal lpszRelativeUrl As LongPtr, ByVal lpszBuffer As LongPtr, lpdwBufferLength As Long, ByVal dwFlags As INET_ICU_FLAGS) As BOOL
    Public DeclareWide PtrSafe Function InternetCombineUrl Lib "wininet" Alias "InternetCombineUrlW" (ByVal lpszBaseUrl As String, ByVal lpszRelativeUrl As String, ByVal lpszBuffer As String, lpdwBufferLength As Long, ByVal dwFlags As INET_ICU_FLAGS) As BOOL
    Public Declare PtrSafe Function InternetOpenA Lib "wininet" (ByVal lpszAgent As String, ByVal dwAccessType As INET_OPEN_ACCESS_TYPES, ByVal lpszProxy As String, ByVal lpszProxyBypass As String, ByVal dwFlags As INET_FLAGS) As LongPtr
    Public Declare PtrSafe Function InternetOpenW Lib "wininet" (ByVal lpszAgent As LongPtr, ByVal dwAccessType As INET_OPEN_ACCESS_TYPES, ByVal lpszProxy As LongPtr, ByVal lpszProxyBypass As LongPtr, ByVal dwFlags As INET_FLAGS) As LongPtr
    Public DeclareWide PtrSafe Function InternetOpen Lib "wininet" Alias "InternetOpenW" (ByVal lpszAgent As String, ByVal dwAccessType As INET_OPEN_ACCESS_TYPES, ByVal lpszProxy As String, ByVal lpszProxyBypass As String, ByVal dwFlags As INET_FLAGS) As LongPtr
    Public Declare PtrSafe Function InternetCloseHandle Lib "wininet" (ByVal hInternet As LongPtr) As BOOL
    Public Declare PtrSafe Function InternetConnectA Lib "wininet" (ByVal hInternet As LongPtr, ByVal lpszServerName As String, [TypeHint(INET_DEF_PORTS)] ByVal nServerPort As Integer, ByVal lpszUserName As String, ByVal lpszPassword As String, ByVal dwService As INET_CONNECT_SERVICES, ByVal dwFlags As INET_FLAGS, Optional ByVal dwContext As LongPtr) As LongPtr
    Public Declare PtrSafe Function InternetConnectW Lib "wininet" (ByVal hInternet As LongPtr, ByVal lpszServerName As LongPtr, [TypeHint(INET_DEF_PORTS)] ByVal nServerPort As Integer, ByVal lpszUserName As LongPtr, ByVal lpszPassword As LongPtr, ByVal dwService As INET_CONNECT_SERVICES, ByVal dwFlags As INET_FLAGS, Optional ByVal dwContext As LongPtr) As LongPtr
    Public DeclareWide PtrSafe Function InternetConnect Lib "wininet" Alias "InternetConnectW" (ByVal hInternet As LongPtr, ByVal lpszServerName As String, [TypeHint(INET_DEF_PORTS)] ByVal nServerPort As Integer, ByVal lpszUserName As String, ByVal lpszPassword As String, ByVal dwService As INET_CONNECT_SERVICES, ByVal dwFlags As INET_FLAGS, Optional ByVal dwContext As LongPtr) As LongPtr
    Public Declare PtrSafe Function InternetOpenUrlA Lib "wininet" (ByVal hInternet As LongPtr, ByVal lpszUrl As String, ByVal lpszHeaders As String, ByVal dwHeadersLength As Long, ByVal dwFlags As INET_FLAGS, Optional ByVal dwContext As LongPtr) As LongPtr
    Public Declare PtrSafe Function InternetOpenUrlW Lib "wininet" (ByVal hInternet As LongPtr, ByVal lpszUrl As LongPtr, ByVal lpszHeaders As LongPtr, ByVal dwHeadersLength As Long, ByVal dwFlags As INET_FLAGS, Optional ByVal dwContext As LongPtr) As LongPtr
    Public DeclareWide PtrSafe Function InternetOpenUrl Lib "wininet" Alias "InternetOpenUrlW" (ByVal hInternet As LongPtr, ByVal lpszUrl As String, ByVal lpszHeaders As String, ByVal dwHeadersLength As Long, ByVal dwFlags As INET_FLAGS, Optional ByVal dwContext As LongPtr) As LongPtr
    Public DeclareWide PtrSafe Function InternetReadFile Lib "wininet" (ByVal hFile As LongPtr, lpBuffer As Any, ByVal dwNumberOfBytesToRead As Long, lpdwNumberOfBytesRead As Long) As BOOL
    Public Declare PtrSafe Function InternetReadFileExA Lib "wininet" (ByVal hFile As LongPtr, lpBuffersOut As INTERNET_BUFFERSA, ByVal dwFlags As INET_READFILE_FLAGS, Optional ByVal dwContext As LongPtr) As BOOL
    Public Declare PtrSafe Function InternetReadFileExW Lib "wininet" (ByVal hFile As LongPtr, lpBuffersOut As INTERNET_BUFFERSW, ByVal dwFlags As INET_READFILE_FLAGS, Optional ByVal dwContext As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function InternetReadFileEx Lib "wininet" Alias "InternetReadFileExW" (ByVal hFile As LongPtr, lpBuffersOut As INTERNET_BUFFERS, ByVal dwFlags As INET_READFILE_FLAGS, Optional ByVal dwContext As LongPtr) As BOOL
    Public Declare PtrSafe Function InternetSetFilePointer Lib "wininet" (ByVal hFile As LongPtr, ByVal lDistanceToMove As Long, lpDistanceToMoveHigh As Long, ByVal dwMoveMethod As FileMoveMethods, ByVal dwContext As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function InternetWriteFile Lib "wininet" (ByVal hFile As LongPtr, lpBuffer As Any, ByVal dwNumberOfBytesToWrite As Long, lpdwNumberOfBytesWritten As Long) As BOOL
    Public Declare PtrSafe Function InternetQueryDataAvailable Lib "wininet" (ByVal hFile As LongPtr, lpdwNumberOfBytesAvailable As Long, ByVal dwFlags As Long, ByVal dwContext As LongPtr) As BOOL
    Public Declare PtrSafe Function InternetFindNextFileA Lib "wininet" (ByVal hFind As LongPtr, lpvFindData As Any) As BOOL
    Public DeclareWide PtrSafe Function InternetFindNextFileW Lib "wininet" (ByVal hFind As LongPtr, lpvFindData As Any) As BOOL
    Public DeclareWide PtrSafe Function InternetFindNextFile Lib "wininet" Alias "InternetFindNextFileW" (ByVal hFind As LongPtr, lpvFindData As Any) As BOOL
    Public Declare PtrSafe Function InternetQueryOptionA Lib "wininet" (ByVal hInternet As LongPtr, ByVal dwOption As INET_OPTIONS, lpBuffer As Any, lpdwBufferLength As Long) As BOOL
    Public DeclareWide PtrSafe Function InternetQueryOptionW Lib "wininet" (ByVal hInternet As LongPtr, ByVal dwOption As INET_OPTIONS, lpBuffer As Any, lpdwBufferLength As Long) As BOOL
    Public DeclareWide PtrSafe Function InternetQueryOption Lib "wininet" Alias "InternetQueryOptionW" (ByVal hInternet As LongPtr, ByVal dwOption As INET_OPTIONS, lpBuffer As Any, lpdwBufferLength As Long) As BOOL
    Public Declare PtrSafe Function InternetSetOptionA Lib "wininet" (ByVal hInternet As LongPtr, ByVal dwOption As INET_OPTIONS, lpBuffer As Any, ByVal dwBufferLength As Long) As BOOL
    Public DeclareWide PtrSafe Function InternetSetOptionW Lib "wininet" (ByVal hInternet As LongPtr, ByVal dwOption As INET_OPTIONS, lpBuffer As Any, ByVal dwBufferLength As Long) As BOOL
    Public DeclareWide PtrSafe Function InternetSetOption Lib "wininet" Alias "InternetSetOptionW" (ByVal hInternet As LongPtr, ByVal dwOption As INET_OPTIONS, lpBuffer As Any, ByVal dwBufferLength As Long) As BOOL
    Public Declare PtrSafe Function InternetSetOptionExA Lib "wininet" (ByVal hInternet As LongPtr, ByVal dwOption As INET_OPTIONS, lpBuffer As Any, ByVal dwBufferLength As Long, ByVal dwFlags As INET_OPTIONSEX_FLAGS) As BOOL
    Public DeclareWide PtrSafe Function InternetSetOptionExW Lib "wininet" (ByVal hInternet As LongPtr, ByVal dwOption As INET_OPTIONS, lpBuffer As Any, ByVal dwBufferLength As Long, ByVal dwFlags As INET_OPTIONSEX_FLAGS) As BOOL
    Public DeclareWide PtrSafe Function InternetSetOptionEx Lib "wininet" Alias "InternetSetOptionExW" (ByVal hInternet As LongPtr, ByVal dwOption As INET_OPTIONS, lpBuffer As Any, ByVal dwBufferLength As Long, ByVal dwFlags As INET_OPTIONSEX_FLAGS) As BOOL
    Public Declare PtrSafe Function InternetLockRequestFile Lib "wininet" (ByVal hInternet As LongPtr, lphLockRequestInfo As LongPtr) As BOOL
    Public Declare PtrSafe Function InternetUnlockRequestFile Lib "wininet" (ByVal hInternet As LongPtr, ByVal hLockRequestInfo As LongPtr) As BOOL
    Public Declare PtrSafe Function InternetGetLastResponseInfoA Lib "wininet" (lpdwError As Long, ByVal lpszBuffer As String, lpdwBufferLength As Long) As BOOL
    Public Declare PtrSafe Function InternetGetLastResponseInfoW Lib "wininet" (lpdwError As Long, ByVal lpszBuffer As LongPtr, lpdwBufferLength As Long) As BOOL
    Public DeclareWide PtrSafe Function InternetGetLastResponseInfo Lib "wininet" Alias "InternetGetLastResponseInfoW" (lpdwError As Long, ByVal lpszBuffer As String, lpdwBufferLength As Long) As BOOL
    Public Declare PtrSafe Function FtpFindFirstFileA Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszSearchFile As String, lpFindFileData As WIN32_FIND_DATAA, ByVal dwFlags As INET_FLAGS, Optional ByVal dwContext As LongPtr) As LongPtr
    Public Declare PtrSafe Function FtpFindFirstFileW Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszSearchFile As LongPtr, lpFindFileData As WIN32_FIND_DATAW, ByVal dwFlags As INET_FLAGS, Optional ByVal dwContext As LongPtr) As LongPtr
    Public DeclareWide PtrSafe Function FtpFindFirstFile Lib "wininet" Alias "FtpFindFirstFileW" (ByVal hConnect As LongPtr, ByVal lpszSearchFile As String, lpFindFileData As WIN32_FIND_DATA, ByVal dwFlags As INET_FLAGS, Optional ByVal dwContext As LongPtr) As LongPtr
    Public Declare PtrSafe Function FtpGetFileA Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszRemoteFile As String, ByVal lpszNewFile As String, ByVal fFailIfExists As BOOL, ByVal dwFlagsAndAttributes As FILE_ATTRIBUTES, [TypeHint(INET_FTPTRANSFER_TYPE, INET_FLAGS)] ByVal dwFlags As Long, Optional ByVal dwContext As LongPtr) As BOOL
    Public Declare PtrSafe Function FtpGetFileW Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszRemoteFile As LongPtr, ByVal lpszNewFile As LongPtr, ByVal fFailIfExists As BOOL, ByVal dwFlagsAndAttributes As FILE_ATTRIBUTES, [TypeHint(INET_FTPTRANSFER_TYPE, INET_FLAGS)] ByVal dwFlags As Long, Optional ByVal dwContext As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function FtpGetFile Lib "wininet" Alias "FtpGetFileW" (ByVal hConnect As LongPtr, ByVal lpszRemoteFile As String, ByVal lpszNewFile As String, ByVal fFailIfExists As BOOL, ByVal dwFlagsAndAttributes As FILE_ATTRIBUTES, [TypeHint(INET_FTPTRANSFER_TYPE, INET_FLAGS)] ByVal dwFlags As Long, Optional ByVal dwContext As LongPtr) As BOOL
    Public Declare PtrSafe Function FtpPutFileA Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszLocalFile As String, ByVal lpszNewRemoteFile As String, [TypeHint(INET_FTPTRANSFER_TYPE, INET_FLAGS)] ByVal dwFlags As Long, Optional ByVal dwContext As LongPtr) As BOOL
    Public Declare PtrSafe Function FtpPutFileW Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszLocalFile As LongPtr, ByVal lpszNewRemoteFile As LongPtr, [TypeHint(INET_FTPTRANSFER_TYPE, INET_FLAGS)] ByVal dwFlags As Long, Optional ByVal dwContext As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function FtpPutFile Lib "wininet" Alias "FtpPutFileW" (ByVal hConnect As LongPtr, ByVal lpszLocalFile As String, ByVal lpszNewRemoteFile As String, [TypeHint(INET_FTPTRANSFER_TYPE, INET_FLAGS)] ByVal dwFlags As Long, Optional ByVal dwContext As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function FtpGetFileEx Lib "wininet" (ByVal hFtpSession As LongPtr, ByVal lpszRemoteFile As String, ByVal lpszNewFile As String, ByVal fFailIfExists As BOOL, ByVal dwFlagsAndAttributes As FILE_ATTRIBUTES, [TypeHint(INET_FTPTRANSFER_TYPE, INET_FLAGS)] ByVal dwFlags As Long, Optional ByVal dwContext As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function FtpPutFileEx Lib "wininet" (ByVal hFtpSession As LongPtr, ByVal lpszLocalFile As String, ByVal lpszNewRemoteFile As String, [TypeHint(INET_FTPTRANSFER_TYPE, INET_FLAGS)] ByVal dwFlags As Long, Optional ByVal dwContext As LongPtr) As BOOL
    Public Declare PtrSafe Function FtpDeleteFileA Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszFileName As String) As BOOL
    Public Declare PtrSafe Function FtpDeleteFileW Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszFileName As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function FtpDeleteFile Lib "wininet" Alias "FtpDeleteFileW" (ByVal hConnect As LongPtr, ByVal lpszFileName As String) As BOOL
    Public Declare PtrSafe Function FtpRenameFileA Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszExisting As String, ByVal lpszNew As String) As BOOL
    Public Declare PtrSafe Function FtpRenameFileW Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszExisting As LongPtr, ByVal lpszNew As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function FtpRenameFile Lib "wininet" Alias "FtpRenameFileW" (ByVal hConnect As LongPtr, ByVal lpszExisting As String, ByVal lpszNew As String) As BOOL
    Public Declare PtrSafe Function FtpOpenFileA Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszFileName As String, ByVal dwAccess As GenericRights, [TypeHint(INET_FTPTRANSFER_TYPE, INET_FLAGS)] ByVal dwFlags As Long, Optional ByVal dwContext As LongPtr) As LongPtr
    Public Declare PtrSafe Function FtpOpenFileW Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszFileName As LongPtr, ByVal dwAccess As GenericRights, [TypeHint(INET_FTPTRANSFER_TYPE, INET_FLAGS)] ByVal dwFlags As Long, Optional ByVal dwContext As LongPtr) As LongPtr
    Public DeclareWide PtrSafe Function FtpOpenFile Lib "wininet" Alias "FtpOpenFileW" (ByVal hConnect As LongPtr, ByVal lpszFileName As String, ByVal dwAccess As GenericRights, [TypeHint(INET_FTPTRANSFER_TYPE, INET_FLAGS)] ByVal dwFlags As Long, Optional ByVal dwContext As LongPtr) As LongPtr
    Public Declare PtrSafe Function FtpCreateDirectoryA Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszDirectory As String) As BOOL
    Public Declare PtrSafe Function FtpCreateDirectoryW Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszDirectory As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function FtpCreateDirectory Lib "wininet" Alias "FtpCreateDirectoryW" (ByVal hConnect As LongPtr, ByVal lpszDirectory As String) As BOOL
    Public Declare PtrSafe Function FtpRemoveDirectoryA Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszDirectory As String) As BOOL
    Public Declare PtrSafe Function FtpRemoveDirectoryW Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszDirectory As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function FtpRemoveDirectory Lib "wininet" Alias "FtpRemoveDirectoryW" (ByVal hConnect As LongPtr, ByVal lpszDirectory As String) As BOOL
    Public Declare PtrSafe Function FtpSetCurrentDirectoryA Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszDirectory As String) As BOOL
    Public Declare PtrSafe Function FtpSetCurrentDirectoryW Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszDirectory As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function FtpSetCurrentDirectory Lib "wininet" Alias "FtpSetCurrentDirectoryW" (ByVal hConnect As LongPtr, ByVal lpszDirectory As String) As BOOL
    Public Declare PtrSafe Function FtpGetCurrentDirectoryA Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszDirectory As String, lpdwCurrentDirectory As Long) As BOOL
    Public Declare PtrSafe Function FtpGetCurrentDirectoryW Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszDirectory As LongPtr, lpdwCurrentDirectory As Long) As BOOL
    Public DeclareWide PtrSafe Function FtpGetCurrentDirectory Lib "wininet" Alias "FtpGetCurrentDirectoryW" (ByVal hConnect As LongPtr, ByVal lpszDirectory As String, lpdwCurrentDirectory As Long) As BOOL
    Public Declare PtrSafe Function FtpCommandA Lib "wininet" (ByVal hConnect As LongPtr, ByVal fExpectResponse As BOOL, ByVal dwFlags As INET_FTPTRANSFER_TYPE, ByVal lpszCommand As String, ByVal dwContext As LongPtr, phFtpCommand As LongPtr) As BOOL
    Public Declare PtrSafe Function FtpCommandW Lib "wininet" (ByVal hConnect As LongPtr, ByVal fExpectResponse As BOOL, ByVal dwFlags As INET_FTPTRANSFER_TYPE, ByVal lpszCommand As LongPtr, ByVal dwContext As LongPtr, phFtpCommand As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function FtpCommand Lib "wininet" Alias "FtpCommandW" (ByVal hConnect As LongPtr, ByVal fExpectResponse As BOOL, ByVal dwFlags As INET_FTPTRANSFER_TYPE, ByVal lpszCommand As String, ByVal dwContext As LongPtr, phFtpCommand As LongPtr) As BOOL
    Public Declare PtrSafe Function FtpGetFileSize Lib "wininet" (ByVal hFile As LongPtr, lpdwFileSizeHigh As Long) As Long
    Public Declare PtrSafe Function GopherCreateLocatorA Lib "wininet" (ByVal lpszHost As String, [TypeHint(INET_DEF_PORTS)] ByVal nServerPort As Integer, ByVal lpszDisplayString As String, ByVal lpszSelectionString As String, ByVal dwGopherType As INET_GOPHER_TYPES, ByVal lpszLocator As String, lpdwBufferLength As Long) As BOOL
    Public Declare PtrSafe Function GopherCreateLocatorW Lib "wininet" (ByVal lpszHost As LongPtr, [TypeHint(INET_DEF_PORTS)] ByVal nServerPort As Integer, ByVal lpszDisplayString As LongPtr, ByVal lpszSelectionString As LongPtr, ByVal dwGopherType As INET_GOPHER_TYPES, ByVal lpszLocator As LongPtr, lpdwBufferLength As Long) As BOOL
    Public DeclareWide PtrSafe Function GopherCreateLocator Lib "wininet" Alias "GopherCreateLocatorW" (ByVal lpszHost As String, [TypeHint(INET_DEF_PORTS)] ByVal nServerPort As Integer, ByVal lpszDisplayString As String, ByVal lpszSelectionString As String, ByVal dwGopherType As INET_GOPHER_TYPES, ByVal lpszLocator As String, lpdwBufferLength As Long) As BOOL
    Public Declare PtrSafe Function GopherGetLocatorTypeA Lib "wininet" (ByVal lpszLocator As String, lpdwGopherType As INET_GOPHER_TYPES) As BOOL
    Public Declare PtrSafe Function GopherGetLocatorTypeW Lib "wininet" (ByVal lpszLocator As LongPtr, lpdwGopherType As INET_GOPHER_TYPES) As BOOL
    Public DeclareWide PtrSafe Function GopherGetLocatorType Lib "wininet" Alias "GopherGetLocatorTypeW" (ByVal lpszLocator As String, lpdwGopherType As INET_GOPHER_TYPES) As BOOL
    Public Declare PtrSafe Function GopherFindFirstFileA Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszLocator As String, ByVal lpszSearchString As String, lpFindData As GOPHER_FIND_DATAA, ByVal dwFlags As INET_FLAGS, Optional ByVal dwContext As LongPtr) As LongPtr
    Public Declare PtrSafe Function GopherFindFirstFileW Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszLocator As LongPtr, ByVal lpszSearchString As LongPtr, lpFindData As GOPHER_FIND_DATAW, ByVal dwFlags As INET_FLAGS, Optional ByVal dwContext As LongPtr) As LongPtr
    Public DeclareWide PtrSafe Function GopherFindFirstFile Lib "wininet" Alias "GopherFindFirstFileW" (ByVal hConnect As LongPtr, ByVal lpszLocator As String, ByVal lpszSearchString As String, lpFindData As GOPHER_FIND_DATA, ByVal dwFlags As INET_FLAGS, Optional ByVal dwContext As LongPtr) As LongPtr
    Public Declare PtrSafe Function GopherOpenFileA Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszLocator As String, ByVal lpszView As String, ByVal dwFlags As INET_FLAGS, Optional ByVal dwContext As LongPtr) As LongPtr
    Public Declare PtrSafe Function GopherOpenFileW Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszLocator As LongPtr, ByVal lpszView As LongPtr, ByVal dwFlags As INET_FLAGS, Optional ByVal dwContext As LongPtr) As LongPtr
    Public DeclareWide PtrSafe Function GopherOpenFile Lib "wininet" Alias "GopherOpenFileW" (ByVal hConnect As LongPtr, ByVal lpszLocator As String, ByVal lpszView As String, ByVal dwFlags As INET_FLAGS, Optional ByVal dwContext As LongPtr) As LongPtr
    Public Declare PtrSafe Function GopherGetAttributeA Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszLocator As String, ByVal lpszAttributeName As String, lpBuffer As Any, ByVal dwBufferLength As Long, lpdwCharactersReturned As Long, ByVal lpfnEnumerator As LongPtr, Optional ByVal dwContext As LongPtr) As BOOL
    Public Declare PtrSafe Function GopherGetAttributeW Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszLocator As LongPtr, ByVal lpszAttributeName As LongPtr, lpBuffer As Any, ByVal dwBufferLength As Long, lpdwCharactersReturned As Long, ByVal lpfnEnumerator As LongPtr, Optional ByVal dwContext As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function GopherGetAttribute Lib "wininet" Alias "GopherGetAttributeW" (ByVal hConnect As LongPtr, ByVal lpszLocator As String, ByVal lpszAttributeName As String, lpBuffer As Any, ByVal dwBufferLength As Long, lpdwCharactersReturned As Long, ByVal lpfnEnumerator As LongPtr, Optional ByVal dwContext As LongPtr) As BOOL
    Public Declare PtrSafe Function HttpOpenRequestA Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszVerb As String, ByVal lpszObjectName As String, ByVal lpszVersion As String, ByVal lpszReferrer As String, ByVal lplpszAcceptTypes As LongPtr, ByVal dwFlags As INET_FLAGS, Optional ByVal dwContext As LongPtr) As LongPtr
    Public Declare PtrSafe Function HttpOpenRequestW Lib "wininet" (ByVal hConnect As LongPtr, ByVal lpszVerb As LongPtr, ByVal lpszObjectName As LongPtr, ByVal lpszVersion As LongPtr, ByVal lpszReferrer As LongPtr, ByVal lplpszAcceptTypes As LongPtr, ByVal dwFlags As INET_FLAGS, Optional ByVal dwContext As LongPtr) As LongPtr
    Public DeclareWide PtrSafe Function HttpOpenRequest Lib "wininet" Alias "HttpOpenRequestW" (ByVal hConnect As LongPtr, ByVal lpszVerb As String, ByVal lpszObjectName As String, ByVal lpszVersion As String, ByVal lpszReferrer As String, ByVal lplpszAcceptTypes As LongPtr, ByVal dwFlags As INET_FLAGS, Optional ByVal dwContext As LongPtr) As LongPtr
    Public Declare PtrSafe Function HttpAddRequestHeadersA Lib "wininet" (ByVal hRequest As LongPtr, ByVal lpszHeaders As String, ByVal dwHeadersLength As Long, ByVal dwModifiers As INET_HTTP_ADDREQ_FLAGS) As BOOL
    Public Declare PtrSafe Function HttpAddRequestHeadersW Lib "wininet" (ByVal hRequest As LongPtr, ByVal lpszHeaders As LongPtr, ByVal dwHeadersLength As Long, ByVal dwModifiers As INET_HTTP_ADDREQ_FLAGS) As BOOL
    Public DeclareWide PtrSafe Function HttpAddRequestHeaders Lib "wininet" Alias "HttpAddRequestHeadersW" (ByVal hRequest As LongPtr, ByVal lpszHeaders As String, ByVal dwHeadersLength As Long, ByVal dwModifiers As INET_HTTP_ADDREQ_FLAGS) As BOOL
    Public Declare PtrSafe Function HttpSendRequestA Lib "wininet" (ByVal hRequest As LongPtr, ByVal lpszHeaders As String, ByVal dwHeadersLength As Long, lpOptional As Any, ByVal dwOptionalLength As Long) As BOOL
    Public Declare PtrSafe Function HttpSendRequestW Lib "wininet" (ByVal hRequest As LongPtr, ByVal lpszHeaders As LongPtr, ByVal dwHeadersLength As Long, lpOptional As Any, ByVal dwOptionalLength As Long) As BOOL
    Public DeclareWide PtrSafe Function HttpSendRequest Lib "wininet" Alias "HttpSendRequestW" (ByVal hRequest As LongPtr, ByVal lpszHeaders As String, ByVal dwHeadersLength As Long, lpOptional As Any, ByVal dwOptionalLength As Long) As BOOL
    Public Declare PtrSafe Function HttpSendRequestExA Lib "wininet" (ByVal hRequest As LongPtr, lpBuffersIn As INTERNET_BUFFERSA, lpBuffersOut As INTERNET_BUFFERSA, ByVal dwFlags As INET_HTTPSENDEX_FLAGS, Optional ByVal dwContext As LongPtr) As BOOL
    Public Declare PtrSafe Function HttpSendRequestExW Lib "wininet" (ByVal hRequest As LongPtr, lpBuffersIn As INTERNET_BUFFERSW, lpBuffersOut As INTERNET_BUFFERSW, ByVal dwFlags As INET_HTTPSENDEX_FLAGS, Optional ByVal dwContext As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function HttpSendRequestEx Lib "wininet" Alias "HttpSendRequestExW" (ByVal hRequest As LongPtr, lpBuffersIn As INTERNET_BUFFERS, lpBuffersOut As INTERNET_BUFFERS, ByVal dwFlags As INET_HTTPSENDEX_FLAGS, Optional ByVal dwContext As LongPtr) As BOOL
    Public Declare PtrSafe Function HttpEndRequestA Lib "wininet" (ByVal hRequest As LongPtr, lpBuffersOut As INTERNET_BUFFERSA, ByVal dwFlags As Long, Optional ByVal dwContext As LongPtr) As BOOL
    Public Declare PtrSafe Function HttpEndRequestW Lib "wininet" (ByVal hRequest As LongPtr, lpBuffersOut As INTERNET_BUFFERSW, ByVal dwFlags As Long, Optional ByVal dwContext As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function HttpEndRequest Lib "wininet" Alias "HttpEndRequestW" (ByVal hRequest As LongPtr, lpBuffersOut As INTERNET_BUFFERS, ByVal dwFlags As Long, Optional ByVal dwContext As LongPtr) As BOOL
    Public Declare PtrSafe Function HttpQueryInfoA Lib "wininet" (ByVal hRequest As LongPtr, ByVal dwInfoLevel As HTTP_QUERY, lpBuffer As Any, lpdwBufferLength As Long, Optional lpdwIndex As Long) As BOOL
    Public DeclareWide PtrSafe Function HttpQueryInfoW Lib "wininet" (ByVal hRequest As LongPtr, ByVal dwInfoLevel As HTTP_QUERY, lpBuffer As Any, lpdwBufferLength As Long, Optional lpdwIndex As Long) As BOOL
    Public DeclareWide PtrSafe Function HttpQueryInfo Lib "wininet" Alias "HttpQueryInfoW" (ByVal hRequest As LongPtr, ByVal dwInfoLevel As HTTP_QUERY, lpBuffer As Any, lpdwBufferLength As Long, Optional lpdwIndex As Long) As BOOL
    Public Declare PtrSafe Function InternetSetCookieA Lib "wininet" (ByVal lpszUrl As String, ByVal lpszCookieName As String, ByVal lpszCookieData As String) As BOOL
    Public Declare PtrSafe Function InternetSetCookieW Lib "wininet" (ByVal lpszUrl As LongPtr, ByVal lpszCookieName As LongPtr, ByVal lpszCookieData As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function InternetSetCookie Lib "wininet" Alias "InternetSetCookieW" (ByVal lpszUrl As String, ByVal lpszCookieName As String, ByVal lpszCookieData As String) As BOOL
    Public Declare PtrSafe Function InternetGetCookieA Lib "wininet" (ByVal lpszUrl As String, ByVal lpszCookieName As String, ByVal lpszCookieData As String, lpdwSize As Long) As BOOL
    Public Declare PtrSafe Function InternetGetCookieW Lib "wininet" (ByVal lpszUrl As LongPtr, ByVal lpszCookieName As LongPtr, ByVal lpszCookieData As LongPtr, lpdwSize As Long) As BOOL
    Public DeclareWide PtrSafe Function InternetGetCookie Lib "wininet" Alias "InternetGetCookieW" (ByVal lpszUrl As String, ByVal lpszCookieName As String, ByVal lpszCookieData As String, lpdwSize As Long) As BOOL
    Public Declare PtrSafe Function InternetSetCookieExA Lib "wininet" (ByVal lpszUrl As String, ByVal lpszCookieName As String, ByVal lpszCookieData As String, ByVal dwFlags As INET_FLAGS, Optional ByVal dwReserved As LongPtr) As Long
    Public Declare PtrSafe Function InternetSetCookieExW Lib "wininet" (ByVal lpszUrl As LongPtr, ByVal lpszCookieName As LongPtr, ByVal lpszCookieData As LongPtr, ByVal dwFlags As INET_FLAGS, Optional ByVal dwReserved As LongPtr) As Long
    Public DeclareWide PtrSafe Function InternetSetCookieEx Lib "wininet" Alias "InternetSetCookieExW" (ByVal lpszUrl As String, ByVal lpszCookieName As String, ByVal lpszCookieData As String, ByVal dwFlags As INET_FLAGS, Optional ByVal dwReserved As LongPtr) As Long
    Public Declare PtrSafe Function InternetGetCookieExA Lib "wininet" (ByVal lpszUrl As String, ByVal lpszCookieName As String, ByVal lpszCookieData As String, lpdwSize As Long, ByVal dwFlags As INET_FLAGS, Optional ByVal dwReserved As LongPtr) As BOOL
    Public Declare PtrSafe Function InternetGetCookieExW Lib "wininet" (ByVal lpszUrl As LongPtr, ByVal lpszCookieName As LongPtr, ByVal lpszCookieData As LongPtr, lpdwSize As Long, ByVal dwFlags As INET_FLAGS, Optional ByVal dwReserved As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function InternetGetCookieEx Lib "wininet" Alias "InternetGetCookieExW" (ByVal lpszUrl As String, ByVal lpszCookieName As String, ByVal lpszCookieData As String, lpdwSize As Long, ByVal dwFlags As INET_FLAGS, Optional ByVal dwReserved As LongPtr) As BOOL
    Public Declare PtrSafe Sub InternetFreeCookies Lib "wininet" (pCookies As INTERNET_COOKIE2, ByVal dwCookieCount As Long)
    Public DeclareWide PtrSafe Function InternetGetCookieEx2 Lib "wininet" (ByVal pcwszUrl As String, ByVal pcwszCookieName As String, ByVal dwFlags As INET_COOKIE_FLAGS, ppCookies As INTERNET_COOKIE2, pdwCookieCount As Long) As Long
    Public DeclareWide PtrSafe Function InternetSetCookieEx2 Lib "wininet" (ByVal pcwszUrl As String, pCookie As INTERNET_COOKIE2, ByVal pcwszP3PPolicy As String, ByVal dwFlags As INET_COOKIE_FLAGS, pdwCookieState As InternetCookieState) As Long
    Public Declare PtrSafe Function InternetAttemptConnect Lib "wininet" (ByVal dwReserved As Long) As Long
    Public Declare PtrSafe Function InternetCheckConnectionA Lib "wininet" (ByVal lpszUrl As String, ByVal dwFlags As INET_ICC_FLAGS, ByVal dwReserved As Long) As BOOL
    Public Declare PtrSafe Function InternetCheckConnectionW Lib "wininet" (ByVal lpszUrl As LongPtr, ByVal dwFlags As INET_ICC_FLAGS, ByVal dwReserved As Long) As BOOL
    Public DeclareWide PtrSafe Function InternetCheckConnection Lib "wininet" Alias "InternetCheckConnectionW" (ByVal lpszUrl As String, ByVal dwFlags As INET_ICC_FLAGS, ByVal dwReserved As Long) As BOOL
    Public Declare PtrSafe Function ResumeSuspendedDownload Lib "wininet" (ByVal hRequest As LongPtr, ByVal dwResultCode As Long) As BOOL
    Public DeclareWide PtrSafe Function InternetErrorDlg Lib "wininet" (ByVal hWnd As LongPtr, ByVal hRequest As LongPtr, ByVal dwError As INET_ERROR_VALUES, ByVal dwFlags As INET_ERRDLG_FLAGS, lppvData As Any) As Long
    Public Declare PtrSafe Function InternetConfirmZoneCrossingA Lib "wininet" (ByVal hWnd As LongPtr, ByVal szUrlPrev As String, ByVal szUrlNew As String, ByVal bPost As BOOL) As Long
    Public Declare PtrSafe Function InternetConfirmZoneCrossingW Lib "wininet" (ByVal hWnd As LongPtr, ByVal szUrlPrev As LongPtr, ByVal szUrlNew As LongPtr, ByVal bPost As BOOL) As Long
    Public DeclareWide PtrSafe Function InternetConfirmZoneCrossing Lib "wininet" Alias "InternetConfirmZoneCrossingW" (ByVal hWnd As LongPtr, ByVal szUrlPrev As String, ByVal szUrlNew As String, ByVal bPost As BOOL) As Long
    Public Declare PtrSafe Function CreateUrlCacheEntryA Lib "wininet" (ByVal lpszUrlName As String, ByVal dwExpectedFileSize As Long, ByVal lpszFileExtension As String, ByVal lpszFileName As String, ByVal dwReserved As Long) As BOOL
    Public Declare PtrSafe Function CreateUrlCacheEntryW Lib "wininet" (ByVal lpszUrlName As LongPtr, ByVal dwExpectedFileSize As Long, ByVal lpszFileExtension As LongPtr, ByVal lpszFileName As LongPtr, ByVal dwReserved As Long) As BOOL
    Public DeclareWide PtrSafe Function CreateUrlCacheEntry Lib "wininet" Alias "CreateUrlCacheEntryW" (ByVal lpszUrlName As String, ByVal dwExpectedFileSize As Long, ByVal lpszFileExtension As String, ByVal lpszFileName As String, ByVal dwReserved As Long) As BOOL
    Public Declare PtrSafe Function CommitUrlCacheEntryA Lib "wininet" (ByVal lpszUrlName As String, ByVal lpszLocalFileName As String, ByVal ExpireTime As LongLong /* FILETIME */, ByVal LastModifiedTime As LongLong /* FILETIME */, ByVal CacheEntryType As INET_CACHE_ENTRIES, ByVal lpHeaderInfo As String, ByVal cchHeaderInfo As Long, ByVal lpszFileExtension As String, Optional ByVal lpszOriginalUrl As String) As BOOL
    Public Declare PtrSafe Function CommitUrlCacheEntryW Lib "wininet" (ByVal lpszUrlName As LongPtr, ByVal lpszLocalFileName As LongPtr, ByVal ExpireTime As LongLong /* FILETIME */, ByVal LastModifiedTime As LongLong /* FILETIME */, ByVal CacheEntryType As INET_CACHE_ENTRIES, ByVal lpHeaderInfo As LongPtr, ByVal cchHeaderInfo As Long, ByVal lpszFileExtension As LongPtr, Optional ByVal lpszOriginalUrl As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function CommitUrlCacheEntry Lib "wininet" Alias "CommitUrlCacheEntryW" (ByVal lpszUrlName As String, ByVal lpszLocalFileName As String, ByVal ExpireTime As LongLong /* FILETIME */, ByVal LastModifiedTime As LongLong /* FILETIME */, ByVal CacheEntryType As INET_CACHE_ENTRIES, ByVal lpHeaderInfo As String, ByVal cchHeaderInfo As Long, ByVal lpszFileExtension As String, Optional ByVal lpszOriginalUrl As String) As BOOL
    Public Declare PtrSafe Function RetrieveUrlCacheEntryFileA Lib "wininet" (ByVal lpszUrlName As String, lpCacheEntryInfo As INTERNET_CACHE_ENTRY_INFOA, lpcbCacheEntryInfo As Long, ByVal dwReserved As Long) As BOOL
    Public Declare PtrSafe Function RetrieveUrlCacheEntryFileW Lib "wininet" (ByVal lpszUrlName As LongPtr, lpCacheEntryInfo As INTERNET_CACHE_ENTRY_INFOW, lpcbCacheEntryInfo As Long, ByVal dwReserved As Long) As BOOL
    Public DeclareWide PtrSafe Function RetrieveUrlCacheEntryFile Lib "wininet" Alias "RetrieveUrlCacheEntryFileW" (ByVal lpszUrlName As String, lpCacheEntryInfo As INTERNET_CACHE_ENTRY_INFO, lpcbCacheEntryInfo As Long, ByVal dwReserved As Long) As BOOL
    Public Declare PtrSafe Function UnlockUrlCacheEntryFileA Lib "wininet" (ByVal lpszUrlName As String, ByVal dwReserved As Long) As BOOL
    Public Declare PtrSafe Function UnlockUrlCacheEntryFileW Lib "wininet" (ByVal lpszUrlName As LongPtr, ByVal dwReserved As Long) As BOOL
    Public DeclareWide PtrSafe Function UnlockUrlCacheEntryFile Lib "wininet" Alias "UnlockUrlCacheEntryFileW" (ByVal lpszUrlName As String, ByVal dwReserved As Long) As BOOL
    Public Declare PtrSafe Function RetrieveUrlCacheEntryStreamA Lib "wininet" (ByVal lpszUrlName As String, lpCacheEntryInfo As INTERNET_CACHE_ENTRY_INFOA, lpcbCacheEntryInfo As Long, ByVal fRandomRead As BOOL, ByVal dwReserved As Long) As LongPtr
    Public Declare PtrSafe Function RetrieveUrlCacheEntryStreamW Lib "wininet" (ByVal lpszUrlName As LongPtr, lpCacheEntryInfo As INTERNET_CACHE_ENTRY_INFOW, lpcbCacheEntryInfo As Long, ByVal fRandomRead As BOOL, ByVal dwReserved As Long) As LongPtr
    Public DeclareWide PtrSafe Function RetrieveUrlCacheEntryStream Lib "wininet" Alias "RetrieveUrlCacheEntryStreamW" (ByVal lpszUrlName As String, lpCacheEntryInfo As INTERNET_CACHE_ENTRY_INFO, lpcbCacheEntryInfo As Long, ByVal fRandomRead As BOOL, ByVal dwReserved As Long) As LongPtr
    Public DeclareWide PtrSafe Function ReadUrlCacheEntryStream Lib "wininet" (ByVal hUrlCacheStream As LongPtr, ByVal dwLocation As Long, lpBuffer As Any, lpdwLen As Long, ByVal Reserved As Long) As BOOL
    Public DeclareWide PtrSafe Function ReadUrlCacheEntryStreamEx Lib "wininet" (ByVal hUrlCacheStream As LongPtr, ByVal qwLocation As LongLong, lpBuffer As Any, lpdwLen As Long) As BOOL
    Public Declare PtrSafe Function UnlockUrlCacheEntryStream Lib "wininet" (ByVal hUrlCacheStream As LongPtr, ByVal dwReserved As Long) As BOOL
    Public Declare PtrSafe Function GetUrlCacheEntryInfoA Lib "wininet" (ByVal lpszUrlName As String, lpCacheEntryInfo As INTERNET_CACHE_ENTRY_INFOA, lpcbCacheEntryInfo As Long) As BOOL
    Public Declare PtrSafe Function GetUrlCacheEntryInfoW Lib "wininet" (ByVal lpszUrlName As LongPtr, lpCacheEntryInfo As INTERNET_CACHE_ENTRY_INFOW, lpcbCacheEntryInfo As Long) As BOOL
    Public DeclareWide PtrSafe Function GetUrlCacheEntryInfo Lib "wininet" Alias "GetUrlCacheEntryInfoW" (ByVal lpszUrlName As String, lpCacheEntryInfo As INTERNET_CACHE_ENTRY_INFO, lpcbCacheEntryInfo As Long) As BOOL
    Public DeclareWide PtrSafe Function FindFirstUrlCacheGroup Lib "wininet" (ByVal dwFlags As Long, ByVal dwFilter As INET_CACHEGROUP_SEARCH, lpSearchCondition As Any, ByVal dwSearchCondition As Long, lpGroupId As LongLong, ByVal lpReserved As LongPtr) As LongPtr
    Public Declare PtrSafe Function FindNextUrlCacheGroup Lib "wininet" (ByVal hFind As Long, lpGroupId As LongLong, ByVal lpReserved As LongPtr) As BOOL
    Public Declare PtrSafe Function GetUrlCacheGroupAttributeA Lib "wininet" (ByVal gid As LongLong, ByVal dwFlags As Long, ByVal dwAttributes As INET_CACHEGROUP_ATTRIBUTES, lpGroupInfo As INTERNET_CACHE_GROUP_INFOA, lpcbGroupInfo As Long, ByVal lpReserved As LongPtr) As BOOL
    Public Declare PtrSafe Function GetUrlCacheGroupAttributeW Lib "wininet" (ByVal gid As LongLong, ByVal dwFlags As Long, ByVal dwAttributes As INET_CACHEGROUP_ATTRIBUTES, lpGroupInfo As INTERNET_CACHE_GROUP_INFOW, lpcbGroupInfo As Long, ByVal lpReserved As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function GetUrlCacheGroupAttribute Lib "wininet" Alias "GetUrlCacheGroupAttributeW" (ByVal gid As LongLong, ByVal dwFlags As Long, ByVal dwAttributes As INET_CACHEGROUP_ATTRIBUTES, lpGroupInfo As INTERNET_CACHE_GROUP_INFO, lpcbGroupInfo As Long, ByVal lpReserved As LongPtr) As BOOL
    Public Declare PtrSafe Function SetUrlCacheGroupAttributeA Lib "wininet" (ByVal gid As LongLong, ByVal dwFlags As Long, ByVal dwAttributes As INET_CACHEGROUP_ATTRIBUTES, lpGroupInfo As INTERNET_CACHE_GROUP_INFOA, ByVal lpReserved As LongPtr) As BOOL
    Public Declare PtrSafe Function SetUrlCacheGroupAttributeW Lib "wininet" (ByVal gid As LongLong, ByVal dwFlags As Long, ByVal dwAttributes As INET_CACHEGROUP_ATTRIBUTES, lpGroupInfo As INTERNET_CACHE_GROUP_INFOW, ByVal lpReserved As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function SetUrlCacheGroupAttribute Lib "wininet" Alias "SetUrlCacheGroupAttributeW" (ByVal gid As LongLong, ByVal dwFlags As Long, ByVal dwAttributes As INET_CACHEGROUP_ATTRIBUTES, lpGroupInfo As INTERNET_CACHE_GROUP_INFO, ByVal lpReserved As LongPtr) As BOOL
    Public Declare PtrSafe Function GetUrlCacheEntryInfoExA Lib "wininet" (ByVal lpszUrl As String, lpCacheEntryInfo As INTERNET_CACHE_ENTRY_INFOA, lpcbCacheEntryInfo As Long, ByVal lpszRedirectUrl As String, lpcbRedirectUrl As Long, ByVal lpReserved As LongPtr, ByVal dwFlags As Long) As BOOL
    Public Declare PtrSafe Function GetUrlCacheEntryInfoExW Lib "wininet" (ByVal lpszUrl As LongPtr, lpCacheEntryInfo As INTERNET_CACHE_ENTRY_INFOW, lpcbCacheEntryInfo As Long, ByVal lpszRedirectUrl As LongPtr, lpcbRedirectUrl As Long, ByVal lpReserved As LongPtr, ByVal dwFlags As Long) As BOOL
    Public DeclareWide PtrSafe Function GetUrlCacheEntryInfoEx Lib "wininet" Alias "GetUrlCacheEntryInfoExW" (ByVal lpszUrl As String, lpCacheEntryInfo As INTERNET_CACHE_ENTRY_INFO, lpcbCacheEntryInfo As Long, ByVal lpszRedirectUrl As String, lpcbRedirectUrl As Long, ByVal lpReserved As LongPtr, ByVal dwFlags As Long) As BOOL
    Public Declare PtrSafe Function SetUrlCacheEntryInfoA Lib "wininet" (ByVal lpszUrlName As String, lpCacheEntryInfo As INTERNET_CACHE_ENTRY_INFOA, ByVal dwFieldControl As INET_CACHEENTRY_FIELDCONTROL) As BOOL
    Public Declare PtrSafe Function SetUrlCacheEntryInfoW Lib "wininet" (ByVal lpszUrlName As LongPtr, lpCacheEntryInfo As INTERNET_CACHE_ENTRY_INFOW, ByVal dwFieldControl As INET_CACHEENTRY_FIELDCONTROL) As BOOL
    Public DeclareWide PtrSafe Function SetUrlCacheEntryInfo Lib "wininet" Alias "SetUrlCacheEntryInfoW" (ByVal lpszUrlName As String, lpCacheEntryInfo As INTERNET_CACHE_ENTRY_INFO, ByVal dwFieldControl As INET_CACHEENTRY_FIELDCONTROL) As BOOL
    Public Declare PtrSafe Function CreateUrlCacheGroup Lib "wininet" (ByVal dwFlags As INET_CACHEGROUP_FLAGS, ByVal lpReserved As LongPtr) As LongLong
    Public Declare PtrSafe Function DeleteUrlCacheGroup Lib "wininet" (ByVal GroupId As LongLong, ByVal dwFlags As Long, ByVal lpReserved As LongPtr) As BOOL
    Public Declare PtrSafe Function SetUrlCacheEntryGroupA Lib "wininet" (ByVal lpszUrlName As String, ByVal dwFlags As INET_CACHE_GROUP_SET, ByVal GroupId As LongLong, pbGroupAttributes As Any, ByVal cbGroupAttributes As Long, ByVal lpReserved As LongPtr) As BOOL
    Public Declare PtrSafe Function SetUrlCacheEntryGroupW Lib "wininet" (ByVal lpszUrlName As LongPtr, ByVal dwFlags As INET_CACHE_GROUP_SET, ByVal GroupId As LongLong, pbGroupAttributes As Any, ByVal cbGroupAttributes As Long, ByVal lpReserved As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function SetUrlCacheEntryGroup Lib "wininet" Alias "SetUrlCacheEntryGroupW" (ByVal lpszUrlName As String, ByVal dwFlags As INET_CACHE_GROUP_SET, ByVal GroupId As LongLong, pbGroupAttributes As Any, ByVal cbGroupAttributes As Long, ByVal lpReserved As LongPtr) As BOOL
    Public Declare PtrSafe Function FindFirstUrlCacheEntryExA Lib "wininet" (ByVal lpszSearchPattern As String, ByVal dwFlags As Long, ByVal dwFilter As INET_CACHE_ENTRIES, ByVal GroupId As LongLong, lpFirstCacheEntryInfo As INTERNET_CACHE_ENTRY_INFOA, lpcbCacheEntryInfo As Long, lpGroupAttributes As Any, lpcbGroupAttributes As Long, ByVal lpReserved As LongPtr) As LongPtr
    Public Declare PtrSafe Function FindFirstUrlCacheEntryExW Lib "wininet" (ByVal lpszSearchPattern As LongPtr, ByVal dwFlags As Long, ByVal dwFilter As INET_CACHE_ENTRIES, ByVal GroupId As LongLong, lpFirstCacheEntryInfo As INTERNET_CACHE_ENTRY_INFOW, lpcbCacheEntryInfo As Long, lpGroupAttributes As Any, lpcbGroupAttributes As Long, ByVal lpReserved As LongPtr) As LongPtr
    Public DeclareWide PtrSafe Function FindFirstUrlCacheEntryEx Lib "wininet" Alias "FindFirstUrlCacheEntryExW" (ByVal lpszSearchPattern As String, ByVal dwFlags As Long, ByVal dwFilter As INET_CACHE_ENTRIES, ByVal GroupId As LongLong, lpFirstCacheEntryInfo As INTERNET_CACHE_ENTRY_INFO, lpcbCacheEntryInfo As Long, lpGroupAttributes As Any, lpcbGroupAttributes As Long, ByVal lpReserved As LongPtr) As LongPtr
    Public Declare PtrSafe Function FindNextUrlCacheEntryExA Lib "wininet" (ByVal hEnumHandle As LongPtr, lpNextCacheEntryInfo As INTERNET_CACHE_ENTRY_INFOA, lpcbCacheEntryInfo As Long, lpGroupAttributes As Any, lpcbGroupAttributes As Long, ByVal lpReserved As LongPtr) As BOOL
    Public Declare PtrSafe Function FindNextUrlCacheEntryExW Lib "wininet" (ByVal hEnumHandle As LongPtr, lpNextCacheEntryInfo As INTERNET_CACHE_ENTRY_INFOW, lpcbCacheEntryInfo As Long, lpGroupAttributes As Any, lpcbGroupAttributes As Long, ByVal lpReserved As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function FindNextUrlCacheEntryEx Lib "wininet" Alias "FindNextUrlCacheEntryExW" (ByVal hEnumHandle As LongPtr, lpNextCacheEntryInfo As INTERNET_CACHE_ENTRY_INFO, lpcbCacheEntryInfo As Long, lpGroupAttributes As Any, lpcbGroupAttributes As Long, ByVal lpReserved As LongPtr) As BOOL
    Public Declare PtrSafe Function FindFirstUrlCacheEntryA Lib "wininet" (ByVal lpszSearchPattern As String, lpFirstCacheEntryInfo As INTERNET_CACHE_ENTRY_INFOA, lpcbCacheEntryInfo As Long) As LongPtr
    Public Declare PtrSafe Function FindFirstUrlCacheEntryW Lib "wininet" (ByVal lpszSearchPattern As LongPtr, lpFirstCacheEntryInfo As INTERNET_CACHE_ENTRY_INFOW, lpcbCacheEntryInfo As Long) As LongPtr
    Public DeclareWide PtrSafe Function FindFirstUrlCacheEntry Lib "wininet" Alias "FindFirstUrlCacheEntryW" (ByVal lpszSearchPattern As String, lpFirstCacheEntryInfo As INTERNET_CACHE_ENTRY_INFO, lpcbCacheEntryInfo As Long) As LongPtr
    Public Declare PtrSafe Function FindNextUrlCacheEntryA Lib "wininet" (ByVal hEnumHandle As LongPtr, lpFirstCacheEntryInfo As INTERNET_CACHE_ENTRY_INFOA, lpcbCacheEntryInfo As Long) As LongPtr
    Public Declare PtrSafe Function FindNextUrlCacheEntryW Lib "wininet" (ByVal hEnumHandle As LongPtr, lpFirstCacheEntryInfo As INTERNET_CACHE_ENTRY_INFOW, lpcbCacheEntryInfo As Long) As LongPtr
    Public DeclareWide PtrSafe Function FindNextUrlCacheEntry Lib "wininet" Alias "FindNextUrlCacheEntryW" (ByVal hEnumHandle As LongPtr, lpFirstCacheEntryInfo As INTERNET_CACHE_ENTRY_INFO, lpcbCacheEntryInfo As Long) As LongPtr
    Public Declare PtrSafe Function FindCloseUrlCache Lib "wininet" (ByVal hEnumHandle As LongPtr) As BOOL
    Public Declare PtrSafe Function DeleteUrlCacheEntryA Lib "wininet" (ByVal lpszUrlName As String) As BOOL
    Public Declare PtrSafe Function DeleteUrlCacheEntryW Lib "wininet" (ByVal lpszUrlName As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function DeleteUrlCacheEntry Lib "wininet" Alias "DeleteUrlCacheEntryW" (ByVal lpszUrlName As String) As BOOL
    Public Declare PtrSafe Function InternetDialA Lib "wininet" (ByVal hwndParent As LongPtr, ByVal lpszConnectoid As String, ByVal dwFlags As INET_DIAL_FLAGS, lpdwConnection As LongPtr, ByVal dwReserved As Long) As Long
    Public Declare PtrSafe Function InternetDialW Lib "wininet" (ByVal hwndParent As LongPtr, ByVal lpszConnectoid As LongPtr, ByVal dwFlags As INET_DIAL_FLAGS, lpdwConnection As LongPtr, ByVal dwReserved As Long) As Long
    Public DeclareWide PtrSafe Function InternetDial Lib "wininet" Alias "InternetDialW" (ByVal hwndParent As LongPtr, ByVal lpszConnectoid As String, ByVal dwFlags As INET_DIAL_FLAGS, lpdwConnection As LongPtr, ByVal dwReserved As Long) As Long
    Public Declare PtrSafe Function InternetHangUp Lib "wininet" (ByVal dwConnection As LongPtr, ByVal dwReserved As Long) As Long
    Public Declare PtrSafe Function InternetGoOnlineA Lib "wininet" (ByVal lpszURL As String, ByVal hwndParent As LongPtr, ByVal dwFlags As INET_GOONLINE_FLAGS) As BOOL
    Public Declare PtrSafe Function InternetGoOnlineW Lib "wininet" (ByVal lpszURL As LongPtr, ByVal hwndParent As LongPtr, ByVal dwFlags As INET_GOONLINE_FLAGS) As BOOL
    Public DeclareWide PtrSafe Function InternetGoOnline Lib "wininet" Alias "InternetGoOnlineW" (ByVal lpszURL As String, ByVal hwndParent As LongPtr, ByVal dwFlags As INET_GOONLINE_FLAGS) As BOOL
    Public Declare PtrSafe Function InternetAutodial Lib "wininet" (ByVal dwFlags As INET_DIAL_FLAGS, ByVal hwndParent As LongPtr) As BOOL
    Public Declare PtrSafe Function InternetAutodialHangup Lib "wininet" (ByVal dwReserved As Long) As BOOL
    Public Declare PtrSafe Function InternetGetConnectedState Lib "wininet" (lpdwFlags As INET_CONSTATE_FLAGS, ByVal dwReserved As Long) As BOOL
    Public Declare PtrSafe Function InternetGetConnectedStateExA Lib "wininet" (lpdwFlags As INET_CONSTATE_FLAGS, ByVal lpszConnectionName As String, ByVal cchNameLen As Long, ByVal dwReserved As Long) As BOOL
    Public Declare PtrSafe Function InternetGetConnectedStateExW Lib "wininet" (lpdwFlags As INET_CONSTATE_FLAGS, ByVal lpszConnectionName As LongPtr, ByVal cchNameLen As Long, ByVal dwReserved As Long) As BOOL
    Public DeclareWide PtrSafe Function InternetGetConnectedStateEx Lib "wininet" Alias "InternetGetConnectedStateExW" (lpdwFlags As INET_CONSTATE_FLAGS, ByVal lpszConnectionName As String, ByVal cchNameLen As Long, ByVal dwReserved As Long) As BOOL
    Public Declare PtrSafe Function DeleteWpadCacheForNetworks Lib "wininet" (ByVal wcd As WPAD_CACHE_DELETE) As BOOL
    Public Declare PtrSafe Function InternetInitializeAutoProxyDll Lib "wininet" (ByVal dwReserved As Long) As BOOL
    Public Declare PtrSafe Function DetectAutoProxyUrl Lib "wininet" (ByVal pszAutoProxyUrl As String, ByVal cchAutoProxyUrl As Long, ByVal dwDetectFlags As WinInetProxAutodetectTypes) As BOOL
    Public DeclareWide PtrSafe Function CreateMD5SSOHash Lib "wininet" (ByVal pszChallengeInfo As String, ByVal pwszRealm As String, ByVal pwszTarget As String, pbHexHash As Any) As BOOL
    Public Declare PtrSafe Function InternetSetDialStateA Lib "wininet" (ByVal lpszConnectoid As String, ByVal dwState As INET_SETDIALSTATE_FLAGS, ByVal dwReserved As Long) As BOOL
    Public Declare PtrSafe Function InternetSetDialStateW Lib "wininet" (ByVal lpszConnectoid As LongPtr, ByVal dwState As INET_SETDIALSTATE_FLAGS, ByVal dwReserved As Long) As BOOL
    Public DeclareWide PtrSafe Function InternetSetDialState Lib "wininet" Alias "InternetSetDialStateW" (ByVal lpszConnectoid As String, ByVal dwState As INET_SETDIALSTATE_FLAGS, ByVal dwReserved As Long) As BOOL
    Public Declare PtrSafe Function InternetSetPerSiteCookieDecisionA Lib "wininet" (ByVal pchHostName As String, ByVal dwDecision As InternetCookieState) As BOOL
    Public Declare PtrSafe Function InternetSetPerSiteCookieDecisionW Lib "wininet" (ByVal pchHostName As LongPtr, ByVal dwDecision As InternetCookieState) As BOOL
    Public DeclareWide PtrSafe Function InternetSetPerSiteCookieDecision Lib "wininet" Alias "InternetSetPerSiteCookieDecisionW" (ByVal pchHostName As String, ByVal dwDecision As InternetCookieState) As BOOL
    Public Declare PtrSafe Function InternetGetPerSiteCookieDecisionA Lib "wininet" (ByVal pchHostName As String, pResult As InternetCookieState) As BOOL
    Public Declare PtrSafe Function InternetGetPerSiteCookieDecisionW Lib "wininet" (ByVal pchHostName As LongPtr, pResult As InternetCookieState) As BOOL
    Public DeclareWide PtrSafe Function InternetGetPerSiteCookieDecision Lib "wininet" Alias "InternetGetPerSiteCookieDecisionW" (ByVal pchHostName As String, pResult As InternetCookieState) As BOOL
    Public Declare PtrSafe Function InternetEnumPerSiteCookieDecisionA Lib "wininet" (ByVal pszSiteName As String, pcSiteNameSize As Long, pdwDecision As InternetCookieState, ByVal dwIndex As Long) As BOOL
    Public Declare PtrSafe Function InternetEnumPerSiteCookieDecisionW Lib "wininet" (ByVal pszSiteName As LongPtr, pcSiteNameSize As Long, pdwDecision As InternetCookieState, ByVal dwIndex As Long) As BOOL
    Public DeclareWide PtrSafe Function InternetEnumPerSiteCookieDecision Lib "wininet" Alias "InternetEnumPerSiteCookieDecisionW" (ByVal pszSiteName As String, pcSiteNameSize As Long, pdwDecision As InternetCookieState, ByVal dwIndex As Long) As BOOL
    Public Declare PtrSafe Function PrivacySetZonePreferenceW Lib "wininet" (ByVal dwZone As URLZONE, ByVal dwType As PrivacyType, ByVal dwTemplate As INET_PRIVACY_TEMPLATES, Optional ByVal pszPreference As LongPtr) As Long
    Public Declare PtrSafe Function PrivacyGetZonePreferenceW Lib "wininet" (ByVal dwZone As URLZONE, ByVal dwType As PrivacyType, pdwTemplate As INET_PRIVACY_TEMPLATES, Optional ByVal pszBuffer As LongPtr, Optional pdwBufferLength As Long) As Long
    Public DeclareWide PtrSafe Function HttpIsHostHstsEnabled Lib "wininet" (ByVal pcwszUrl As String, pfIsHsts As BOOL) As Long
    Public DeclareWide PtrSafe Function HttpIsHostHstsEnabled Lib "wininet" (ByVal pcwszUrl As LongPtr, pfIsHsts As BOOL) As Long
    



    #End Region

    #Region "iphlpapi"
    
'mprapidef.h
    Public Const MAX_INTERFACE_NAME_LEN  = 256
    Public Const MAX_TRANSPORT_NAME_LEN  = 40
    Public Const MAX_MEDIA_NAME  = 16
    Public Const MAX_PORT_NAME  = 16
    Public Const MAX_DEVICE_NAME  = 128
    Public Const MAX_PHONE_NUMBER_LEN  = 128
    Public Const MAX_DEVICETYPE_NAME  = 16

    Public Enum IP_STATUS
        IP_STATUS_BASE = 11000
        IP_SUCCESS = 0
        IP_BUF_TOO_SMALL = (IP_STATUS_BASE + 1)
        IP_DEST_NET_UNREACHABLE = (IP_STATUS_BASE + 2)
        IP_DEST_HOST_UNREACHABLE = (IP_STATUS_BASE + 3)
        IP_DEST_PROT_UNREACHABLE = (IP_STATUS_BASE + 4)
        IP_DEST_PORT_UNREACHABLE = (IP_STATUS_BASE + 5)
        IP_NO_RESOURCES = (IP_STATUS_BASE + 6)
        IP_BAD_OPTION = (IP_STATUS_BASE + 7)
        IP_HW_ERROR = (IP_STATUS_BASE + 8)
        IP_PACKET_TOO_BIG = (IP_STATUS_BASE + 9)
        IP_REQ_TIMED_OUT = (IP_STATUS_BASE + 10)
        IP_BAD_REQ = (IP_STATUS_BASE + 11)
        IP_BAD_ROUTE = (IP_STATUS_BASE + 12)
        IP_TTL_EXPIRED_TRANSIT = (IP_STATUS_BASE + 13)
        IP_TTL_EXPIRED_REASSEM = (IP_STATUS_BASE + 14)
        IP_PARAM_PROBLEM = (IP_STATUS_BASE + 15)
        IP_SOURCE_QUENCH = (IP_STATUS_BASE + 16)
        IP_OPTION_TOO_BIG = (IP_STATUS_BASE + 17)
        IP_BAD_DESTINATION = (IP_STATUS_BASE + 18)
    '  Variants of the above using IPv6 terminology, where different
        IP_DEST_NO_ROUTE = (IP_STATUS_BASE + 2)
        IP_DEST_ADDR_UNREACHABLE = (IP_STATUS_BASE + 3)
        IP_DEST_PROHIBITED = (IP_STATUS_BASE + 4)
        'IP_DEST_PORT_UNREACHABLE  = (IP_STATUS_BASE + 5)
        IP_HOP_LIMIT_EXCEEDED = (IP_STATUS_BASE + 13)
        IP_REASSEMBLY_TIME_EXCEEDED = (IP_STATUS_BASE + 14)
        IP_PARAMETER_PROBLEM = (IP_STATUS_BASE + 15)
    '  IPv6-only status codes
        IP_DEST_UNREACHABLE = (IP_STATUS_BASE + 40)
        IP_TIME_EXCEEDED = (IP_STATUS_BASE + 41)
        IP_BAD_HEADER = (IP_STATUS_BASE + 42)
        IP_UNRECOGNIZED_NEXT_HEADER = (IP_STATUS_BASE + 43)
        IP_ICMP_ERROR = (IP_STATUS_BASE + 44)
        IP_DEST_SCOPE_MISMATCH = (IP_STATUS_BASE + 45)
    '  The next group are status codes passed up on status indications to
    '  transport layer protocols.
        IP_ADDR_DELETED = (IP_STATUS_BASE + 19)
        IP_SPEC_MTU_CHANGE = (IP_STATUS_BASE + 20)
        IP_MTU_CHANGE = (IP_STATUS_BASE + 21)
        IP_UNLOAD = (IP_STATUS_BASE + 22)
        IP_ADDR_ADDED = (IP_STATUS_BASE + 23)
        IP_MEDIA_CONNECT = (IP_STATUS_BASE + 24)
        IP_MEDIA_DISCONNECT = (IP_STATUS_BASE + 25)
        IP_BIND_ADAPTER = (IP_STATUS_BASE + 26)
        IP_UNBIND_ADAPTER = (IP_STATUS_BASE + 27)
        IP_DEVICE_DOES_NOT_EXIST = (IP_STATUS_BASE + 28)
        IP_DUPLICATE_ADDRESS = (IP_STATUS_BASE + 29)
        IP_INTERFACE_METRIC_CHANGE = (IP_STATUS_BASE + 30)
        IP_RECONFIG_SECFLTR = (IP_STATUS_BASE + 31)
        IP_NEGOTIATING_IPSEC = (IP_STATUS_BASE + 32)
        IP_INTERFACE_WOL_CAPABILITY_CHANGE = (IP_STATUS_BASE + 33)
        IP_DUPLICATE_IPADD = (IP_STATUS_BASE + 34)
        IP_GENERAL_FAILURE = (IP_STATUS_BASE + 50)
        MAX_IP_STATUS = IP_GENERAL_FAILURE
        IP_PENDING = (IP_STATUS_BASE + 255)
    End Enum
    Public Enum IP_OPTION_FLAGS
        IP_FLAG_REVERSE = &H1  ' Do a round-trip echo request.
        IP_FLAG_DF = &H2  ' Don't fragment this packet.
    End Enum
    [Description("64bit applications should use IP_OPTION_INFORMATION32")]
    Public Type IP_OPTION_INFORMATION
        Ttl As Byte ' Time To Live
        Tos As Byte ' Type Of Service
        /* [ TypeHint(IP_OPTION_FLAGS) ] */ Flags As Byte ' IP header flags
        OptionsSize As Byte ' Size in bytes of options data
        OptionsData As LongPtr ' Pointer to options data
    End Type
    #If Win64 Then
    Public Type IP_OPTION_INFORMATION32
        Ttl As Byte ' Time To Live
        Tos As Byte ' Type Of Service
        /* [ TypeHint(IP_OPTION_FLAGS) ] */ Flags As Byte ' IP header flags
        OptionsSize As Byte ' Size in bytes of options data
        OptionsData As Long ' Pointer to options data
    End Type
    #End If
    Public Enum IP_OPTION_TYPES
        IP_OPT_EOL = 0  ' End of list option
        IP_OPT_NOP = 1  ' No operation
        IP_OPT_SECURITY = &H82  ' Security option
        IP_OPT_LSRR = &H83  ' Loose source route
        IP_OPT_SSRR = &H89  ' Strict source route
        IP_OPT_RR = &H7  ' Record route
        IP_OPT_TS = &H44  ' Timestamp
        IP_OPT_SID = &H88  ' Stream ID (obsolete)
        IP_OPT_ROUTER_ALERT = &H94  ' Router Alert Option
        MAX_OPT_SIZE = 40  ' Maximum length of IP options in bytes
    End Enum

    [Description("64bit applications should use ICMP_ECHO_REPLY32")]
    Public Type ICMP_ECHO_REPLY
        Address As Long ' Replying address
        Status As IP_STATUS ' Reply IP_STATUS
        RoundTripTime As Long ' RTT in milliseconds
        DataSize As Integer ' Reply data size in bytes
        Reserved As Integer ' Reserved for system use
        Data As LongPtr ' Pointer to the reply data
        Options As IP_OPTION_INFORMATION ' Reply options
    End Type
    #If Win64 Then
    Public Type ICMP_ECHO_REPLY32
        Address As Long ' Replying address
        Status As IP_STATUS ' Reply IP_STATUS
        RoundTripTime As Long ' RTT in milliseconds
        DataSize As Integer ' Reply data size in bytes
        Reserved As Integer ' Reserved for system use
        Data As Long ' Pointer to the reply data
        Options As IP_OPTION_INFORMATION ' Reply options
    End Type
    #End If

    [PackingAlignment(1)]
    Public Type IPV6_ADDRESS_EX
        sin6_port As Integer
        sin6_flowinfo As Long
        sin6_addr(0 To 7) As Integer
        sin6_scope_id As Long
    End Type

    [Description("Reply data follows this structure in memory.")]
    Public Type ICMPV6_ECHO_REPLY_LH
        Address As IPV6_ADDRESS_EX ' Replying address.
        Status As IP_STATUS ' Reply IP_STATUS.
        RoundTripTime As Long ' RTT in milliseconds.
    End Type

    Public Type ARP_SEND_REPLY
        DestAddress As Long
        SrcAddress As Long
    End Type

    Public Type TCP_RESERVE_PORT_RANGE
        UpperRange As Integer
        LowerRange As Integer
    End Type

    Public Const MAX_ADAPTER_NAME = 128
    Public Type IP_ADAPTER_INDEX_MAP
        Index As Long
        Name(0 To (MAX_ADAPTER_NAME - 1)) As Integer
    End Type

    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(Adapter(0))")]
    Public Type IP_INTERFACE_INFO
        NumAdapters As Long
        Adapter() As IP_ADAPTER_INDEX_MAP
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(Address(0))")]
    Public Type IP_UNIDIRECTIONAL_ADAPTER_ADDRESS
        NumAdapters As Long
        Address() As Long
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(AdapterOrder(0))")]
    Public Type IP_ADAPTER_ORDER_MAP
        NumAdapters As Long
        AdapterOrder() As Long
    End Type
    Public Type IP_MCAST_COUNTER_INFO
        InMcastOctets As LongLong
        OutMcastOctets As LongLong
        InMcastPkts As LongLong
        OutMcastPkts As LongLong
    End Type

    'ipifcons.h
    Public Enum IFTYPE
        MIN_IF_TYPE = 1
        IF_TYPE_OTHER = 1  ' None of the below
        IF_TYPE_REGULAR_1822 = 2
        IF_TYPE_HDH_1822 = 3
        IF_TYPE_DDN_X25 = 4
        IF_TYPE_RFC877_X25 = 5
        IF_TYPE_ETHERNET_CSMACD = 6
        IF_TYPE_IS088023_CSMACD = 7
        IF_TYPE_ISO88024_TOKENBUS = 8
        IF_TYPE_ISO88025_TOKENRING = 9
        IF_TYPE_ISO88026_MAN = 10
        IF_TYPE_STARLAN = 11
        IF_TYPE_PROTEON_10MBIT = 12
        IF_TYPE_PROTEON_80MBIT = 13
        IF_TYPE_HYPERCHANNEL = 14
        IF_TYPE_FDDI = 15
        IF_TYPE_LAP_B = 16
        IF_TYPE_SDLC = 17
        IF_TYPE_DS1 = 18  ' DS1-MIB
        IF_TYPE_E1 = 19  ' Obsolete; see DS1-MIB
        IF_TYPE_BASIC_ISDN = 20
        IF_TYPE_PRIMARY_ISDN = 21
        IF_TYPE_PROP_POINT2POINT_SERIAL = 22  ' proprietary serial
        IF_TYPE_PPP = 23
        IF_TYPE_SOFTWARE_LOOPBACK = 24
        IF_TYPE_EON = 25  ' CLNP over IP
        IF_TYPE_ETHERNET_3MBIT = 26
        IF_TYPE_NSIP = 27  ' XNS over IP
        IF_TYPE_SLIP = 28  ' Generic Slip
        IF_TYPE_ULTRA = 29  ' ULTRA Technologies
        IF_TYPE_DS3 = 30  ' DS3-MIB
        IF_TYPE_SIP = 31  ' SMDS, coffee
        IF_TYPE_FRAMERELAY = 32  ' DTE only
        IF_TYPE_RS232 = 33
        IF_TYPE_PARA = 34  ' Parallel port
        IF_TYPE_ARCNET = 35
        IF_TYPE_ARCNET_PLUS = 36
        IF_TYPE_ATM = 37  ' ATM cells
        IF_TYPE_MIO_X25 = 38
        IF_TYPE_SONET = 39  ' SONET or SDH
        IF_TYPE_X25_PLE = 40
        IF_TYPE_ISO88022_LLC = 41
        IF_TYPE_LOCALTALK = 42
        IF_TYPE_SMDS_DXI = 43
        IF_TYPE_FRAMERELAY_SERVICE = 44  ' FRNETSERV-MIB
        IF_TYPE_V35 = 45
        IF_TYPE_HSSI = 46
        IF_TYPE_HIPPI = 47
        IF_TYPE_MODEM = 48  ' Generic Modem
        IF_TYPE_AAL5 = 49  ' AAL5 over ATM
        IF_TYPE_SONET_PATH = 50
        IF_TYPE_SONET_VT = 51
        IF_TYPE_SMDS_ICIP = 52  ' SMDS InterCarrier Interface
        IF_TYPE_PROP_VIRTUAL = 53  ' Proprietary virtual/internal
        IF_TYPE_PROP_MULTIPLEXOR = 54  ' Proprietary multiplexing
        IF_TYPE_IEEE80212 = 55  ' 100BaseVG
        IF_TYPE_FIBRECHANNEL = 56
        IF_TYPE_HIPPIINTERFACE = 57
        IF_TYPE_FRAMERELAY_INTERCONNECT = 58  ' Obsolete, use 32 or 44
        IF_TYPE_AFLANE_8023 = 59  ' ATM Emulated LAN for 802.3
        IF_TYPE_AFLANE_8025 = 60  ' ATM Emulated LAN for 802.5
        IF_TYPE_CCTEMUL = 61  ' ATM Emulated circuit
        IF_TYPE_FASTETHER = 62  ' Fast Ethernet (100BaseT)
        IF_TYPE_ISDN = 63  ' ISDN and X.25
        IF_TYPE_V11 = 64  ' CCITT V.11/X.21
        IF_TYPE_V36 = 65  ' CCITT V.36
        IF_TYPE_G703_64K = 66  ' CCITT G703 at 64Kbps
        IF_TYPE_G703_2MB = 67  ' Obsolete; see DS1-MIB
        IF_TYPE_QLLC = 68  ' SNA QLLC
        IF_TYPE_FASTETHER_FX = 69  ' Fast Ethernet (100BaseFX)
        IF_TYPE_CHANNEL = 70
        IF_TYPE_IEEE80211 = 71  ' Radio spread spectrum
        IF_TYPE_IBM370PARCHAN = 72  ' IBM System 360/370 OEMI Channel
        IF_TYPE_ESCON = 73  ' IBM Enterprise Systems Connection
        IF_TYPE_DLSW = 74  ' Data Link Switching
        IF_TYPE_ISDN_S = 75  ' ISDN S/T interface
        IF_TYPE_ISDN_U = 76  ' ISDN U interface
        IF_TYPE_LAP_D = 77  ' Link Access Protocol D
        IF_TYPE_IPSWITCH = 78  ' IP Switching Objects
        IF_TYPE_RSRB = 79  ' Remote Source Route Bridging
        IF_TYPE_ATM_LOGICAL = 80  ' ATM Logical Port
        IF_TYPE_DS0 = 81  ' Digital Signal Level 0
        IF_TYPE_DS0_BUNDLE = 82  ' Group of ds0s on the same ds1
        IF_TYPE_BSC = 83  ' Bisynchronous Protocol
        IF_TYPE_ASYNC = 84  ' Asynchronous Protocol
        IF_TYPE_CNR = 85  ' Combat Net Radio
        IF_TYPE_ISO88025R_DTR = 86  ' ISO 802.5r DTR
        IF_TYPE_EPLRS = 87  ' Ext Pos Loc Report Sys
        IF_TYPE_ARAP = 88  ' Appletalk Remote Access Protocol
        IF_TYPE_PROP_CNLS = 89  ' Proprietary Connectionless Proto
        IF_TYPE_HOSTPAD = 90  ' CCITT-ITU X.29 PAD Protocol
        IF_TYPE_TERMPAD = 91  ' CCITT-ITU X.3 PAD Facility
        IF_TYPE_FRAMERELAY_MPI = 92  ' Multiproto Interconnect over FR
        IF_TYPE_X213 = 93  ' CCITT-ITU X213
        IF_TYPE_ADSL = 94  ' Asymmetric Digital Subscrbr Loop
        IF_TYPE_RADSL = 95  ' Rate-Adapt Digital Subscrbr Loop
        IF_TYPE_SDSL = 96  ' Symmetric Digital Subscriber Loop
        IF_TYPE_VDSL = 97  ' Very H-Speed Digital Subscrb Loop
        IF_TYPE_ISO88025_CRFPRINT = 98  ' ISO 802.5 CRFP
        IF_TYPE_MYRINET = 99  ' Myricom Myrinet
        IF_TYPE_VOICE_EM = 100  ' Voice recEive and transMit
        IF_TYPE_VOICE_FXO = 101  ' Voice Foreign Exchange Office
        IF_TYPE_VOICE_FXS = 102  ' Voice Foreign Exchange Station
        IF_TYPE_VOICE_ENCAP = 103  ' Voice encapsulation
        IF_TYPE_VOICE_OVERIP = 104  ' Voice over IP encapsulation
        IF_TYPE_ATM_DXI = 105  ' ATM DXI
        IF_TYPE_ATM_FUNI = 106  ' ATM FUNI
        IF_TYPE_ATM_IMA = 107  ' ATM IMA
        IF_TYPE_PPPMULTILINKBUNDLE = 108  ' PPP Multilink Bundle
        IF_TYPE_IPOVER_CDLC = 109  ' IBM ipOverCdlc
        IF_TYPE_IPOVER_CLAW = 110  ' IBM Common Link Access to Workstn
        IF_TYPE_STACKTOSTACK = 111  ' IBM stackToStack
        IF_TYPE_VIRTUALIPADDRESS = 112  ' IBM VIPA
        IF_TYPE_MPC = 113  ' IBM multi-proto channel support
        IF_TYPE_IPOVER_ATM = 114  ' IBM ipOverAtm
        IF_TYPE_ISO88025_FIBER = 115  ' ISO 802.5j Fiber Token Ring
        IF_TYPE_TDLC = 116  ' IBM twinaxial data link control
        IF_TYPE_GIGABITETHERNET = 117
        IF_TYPE_HDLC = 118
        IF_TYPE_LAP_F = 119
        IF_TYPE_V37 = 120
        IF_TYPE_X25_MLP = 121  ' Multi-Link Protocol
        IF_TYPE_X25_HUNTGROUP = 122  ' X.25 Hunt Group
        IF_TYPE_TRANSPHDLC = 123
        IF_TYPE_INTERLEAVE = 124  ' Interleave channel
        IF_TYPE_FAST = 125  ' Fast channel
        IF_TYPE_IP = 126  ' IP (for APPN HPR in IP networks)
        IF_TYPE_DOCSCABLE_MACLAYER = 127  ' CATV Mac Layer
        IF_TYPE_DOCSCABLE_DOWNSTREAM = 128  ' CATV Downstream interface
        IF_TYPE_DOCSCABLE_UPSTREAM = 129  ' CATV Upstream interface
        IF_TYPE_A12MPPSWITCH = 130  ' Avalon Parallel Processor
        IF_TYPE_TUNNEL = 131  ' Encapsulation interface
        IF_TYPE_COFFEE = 132  ' Coffee pot
        IF_TYPE_CES = 133  ' Circuit Emulation Service
        IF_TYPE_ATM_SUBINTERFACE = 134  ' ATM Sub Interface
        IF_TYPE_L2_VLAN = 135  ' Layer 2 Virtual LAN using 802.1Q
        IF_TYPE_L3_IPVLAN = 136  ' Layer 3 Virtual LAN using IP
        IF_TYPE_L3_IPXVLAN = 137  ' Layer 3 Virtual LAN using IPX
        IF_TYPE_DIGITALPOWERLINE = 138  ' IP over Power Lines
        IF_TYPE_MEDIAMAILOVERIP = 139  ' Multimedia Mail over IP
        IF_TYPE_DTM = 140  ' Dynamic syncronous Transfer Mode
        IF_TYPE_DCN = 141  ' Data Communications Network
        IF_TYPE_IPFORWARD = 142  ' IP Forwarding Interface
        IF_TYPE_MSDSL = 143  ' Multi-rate Symmetric DSL
        IF_TYPE_IEEE1394 = 144  ' IEEE1394 High Perf Serial Bus
        IF_TYPE_IF_GSN = 145
        IF_TYPE_DVBRCC_MACLAYER = 146
        IF_TYPE_DVBRCC_DOWNSTREAM = 147
        IF_TYPE_DVBRCC_UPSTREAM = 148
        IF_TYPE_ATM_VIRTUAL = 149
        IF_TYPE_MPLS_TUNNEL = 150
        IF_TYPE_SRP = 151
        IF_TYPE_VOICEOVERATM = 152
        IF_TYPE_VOICEOVERFRAMERELAY = 153
        IF_TYPE_IDSL = 154
        IF_TYPE_COMPOSITELINK = 155
        IF_TYPE_SS7_SIGLINK = 156
        IF_TYPE_PROP_WIRELESS_P2P = 157
        IF_TYPE_FR_FORWARD = 158
        IF_TYPE_RFC1483 = 159
        IF_TYPE_USB = 160
        IF_TYPE_IEEE8023AD_LAG = 161
        IF_TYPE_BGP_POLICY_ACCOUNTING = 162
        IF_TYPE_FRF16_MFR_BUNDLE = 163
        IF_TYPE_H323_GATEKEEPER = 164
        IF_TYPE_H323_PROXY = 165
        IF_TYPE_MPLS = 166
        IF_TYPE_MF_SIGLINK = 167
        IF_TYPE_HDSL2 = 168
        IF_TYPE_SHDSL = 169
        IF_TYPE_DS1_FDL = 170
        IF_TYPE_POS = 171
        IF_TYPE_DVB_ASI_IN = 172
        IF_TYPE_DVB_ASI_OUT = 173
        IF_TYPE_PLC = 174
        IF_TYPE_NFAS = 175
        IF_TYPE_TR008 = 176
        IF_TYPE_GR303_RDT = 177
        IF_TYPE_GR303_IDT = 178
        IF_TYPE_ISUP = 179
        IF_TYPE_PROP_DOCS_WIRELESS_MACLAYER = 180
        IF_TYPE_PROP_DOCS_WIRELESS_DOWNSTREAM = 181
        IF_TYPE_PROP_DOCS_WIRELESS_UPSTREAM = 182
        IF_TYPE_HIPERLAN2 = 183
        IF_TYPE_PROP_BWA_P2MP = 184
        IF_TYPE_SONET_OVERHEAD_CHANNEL = 185
        IF_TYPE_DIGITAL_WRAPPER_OVERHEAD_CHANNEL = 186
        IF_TYPE_AAL2 = 187
        IF_TYPE_RADIO_MAC = 188
        IF_TYPE_ATM_RADIO = 189
        IF_TYPE_IMT = 190
        IF_TYPE_MVL = 191
        IF_TYPE_REACH_DSL = 192
        IF_TYPE_FR_DLCI_ENDPT = 193
        IF_TYPE_ATM_VCI_ENDPT = 194
        IF_TYPE_OPTICAL_CHANNEL = 195
        IF_TYPE_OPTICAL_TRANSPORT = 196
        IF_TYPE_IEEE80216_WMAN = 237
        IF_TYPE_WWANPP = 243  ' WWAN devices based on GSM technology
        IF_TYPE_WWANPP2 = 244  ' WWAN devices based on CDMA technology
        IF_TYPE_IEEE802154 = 259  ' IEEE 802.15.4 WPAN interface
        IF_TYPE_XBOX_WIRELESS = 281
        MAX_IF_TYPE = 281
    End Enum
    Public Enum IF_ACCESS_TYPE
        IF_ACCESS_LOOPBACK = 1
        IF_ACCESS_BROADCAST = 2
        IF_ACCESS_POINT_TO_POINT = 3 ' New definition.
        IF_ACCESS_POINTTOPOINT = 3 ' Old definition.
        IF_ACCESS_POINT_TO_MULTI_POINT = 4 ' New definition.
        IF_ACCESS_POINTTOMULTIPOINT = 4 ' Old definition.
    End Enum
    Public Enum IF_CAPABILITIES
        IF_CHECK_NONE = &H00
        IF_CHECK_MCAST = &H01
        IF_CHECK_SEND = &H02
    End Enum
    Public Enum IF_CONNECTION_TYPES
        IF_CONNECTION_DEDICATED = 1
        IF_CONNECTION_PASSIVE = 2
        IF_CONNECTION_DEMAND = 3
    End Enum
    Public Enum IF_ADMIN_STATUS
        IF_ADMIN_STATUS_UP = 1
        IF_ADMIN_STATUS_DOWN = 2
        IF_ADMIN_STATUS_TESTING = 3
    End Enum
    Public Enum INTERNAL_IF_OPER_STATUS
        IF_OPER_STATUS_NON_OPERATIONAL = 0
        IF_OPER_STATUS_UNREACHABLE = 1
        IF_OPER_STATUS_DISCONNECTED = 2
        IF_OPER_STATUS_CONNECTING = 3
        IF_OPER_STATUS_CONNECTED = 4
        IF_OPER_STATUS_OPERATIONAL = 5
    End Enum
    Public Enum MIB_IF_TYPE
        MIB_IF_TYPE_OTHER = 1
        MIB_IF_TYPE_ETHERNET = 6
        MIB_IF_TYPE_TOKENRING = 9
        MIB_IF_TYPE_FDDI = 15
        MIB_IF_TYPE_PPP = 23
        MIB_IF_TYPE_LOOPBACK = 24
        MIB_IF_TYPE_SLIP = 28
    End Enum
    Public Enum MIB_IF_ADMIN
        MIB_IF_ADMIN_STATUS_UP = 1
        MIB_IF_ADMIN_STATUS_DOWN = 2
        MIB_IF_ADMIN_STATUS_TESTING = 3
    End Enum
    Public Enum MIB_IF_OPEN_STATUS
        MIB_IF_OPER_STATUS_NON_OPERATIONAL = IF_OPER_STATUS_NON_OPERATIONAL
        MIB_IF_OPER_STATUS_UNREACHABLE = IF_OPER_STATUS_UNREACHABLE
        MIB_IF_OPER_STATUS_DISCONNECTED = IF_OPER_STATUS_DISCONNECTED
        MIB_IF_OPER_STATUS_CONNECTING = IF_OPER_STATUS_CONNECTING
        MIB_IF_OPER_STATUS_CONNECTED = IF_OPER_STATUS_CONNECTED
        MIB_IF_OPER_STATUS_OPERATIONAL = IF_OPER_STATUS_OPERATIONAL
    End Enum
    
    
    'iprtrmib.h
    Public Const IPRTRMGR_PID = 10000
    Public Enum MIB_VARS
        IF_NUMBER = 0
        IF_TABLE = (IF_NUMBER + 1)
        IF_ROW = (IF_TABLE + 1)
        IP_STATS = (IF_ROW + 1)
        IP_ADDRTABLE = (IP_STATS + 1)
        IP_ADDRROW = (IP_ADDRTABLE + 1)
        IP_FORWARDNUMBER = (IP_ADDRROW + 1)
        IP_FORWARDTABLE = (IP_FORWARDNUMBER + 1)
        IP_FORWARDROW = (IP_FORWARDTABLE + 1)
        IP_NETTABLE = (IP_FORWARDROW + 1)
        IP_NETROW = (IP_NETTABLE + 1)
        ICMP_STATS = (IP_NETROW + 1)
        TCP_STATS = (ICMP_STATS + 1)
        TCP_TABLE = (TCP_STATS + 1)
        TCP_ROW = (TCP_TABLE + 1)
        UDP_STATS = (TCP_ROW + 1)
        UDP_TABLE = (UDP_STATS + 1)
        UDP_ROW = (UDP_TABLE + 1)
        MCAST_MFE = (UDP_ROW + 1)
        MCAST_MFE_STATS = (MCAST_MFE + 1)
        BEST_IF = (MCAST_MFE_STATS + 1)
        BEST_ROUTE = (BEST_IF + 1)
        PROXY_ARP = (BEST_ROUTE + 1)
        MCAST_IF_ENTRY = (PROXY_ARP + 1)
        MCAST_GLOBAL = (MCAST_IF_ENTRY + 1)
        IF_STATUS = (MCAST_GLOBAL + 1)
        MCAST_BOUNDARY = (IF_STATUS + 1)
        MCAST_SCOPE = (MCAST_BOUNDARY + 1)
        DEST_MATCHING = (MCAST_SCOPE + 1)
        DEST_LONGER = (DEST_MATCHING + 1)
        DEST_SHORTER = (DEST_LONGER + 1)
        ROUTE_MATCHING = (DEST_SHORTER + 1)
        ROUTE_LONGER = (ROUTE_MATCHING + 1)
        ROUTE_SHORTER = (ROUTE_LONGER + 1)
        ROUTE_STATE = (ROUTE_SHORTER + 1)
        MCAST_MFE_STATS_EX = (ROUTE_STATE + 1)
        IP6_STATS = (MCAST_MFE_STATS_EX + 1)
        UDP6_STATS = (IP6_STATS + 1)
        TCP6_STATS = (UDP6_STATS + 1)
    End Enum
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(rgdwVarIndex(0))")]
    Public Type MIB_OPAQUE_QUERY
        dwVarId As Long
        rgdwVarIndex() As Long
    End Type

    'ifdef.h
    Public Enum NET_IF_COMPT
        NET_IF_COMPARTMENT_ID_UNSPECIFIED = 0
        NET_IF_COMPARTMENT_ID_PRIMARY = 1
    End Enum
    Public Enum NET_IF_OPER_STATUS ' ifOperStatus
        NET_IF_OPER_STATUS_UP = 1
        NET_IF_OPER_STATUS_DOWN = 2
        NET_IF_OPER_STATUS_TESTING = 3
        NET_IF_OPER_STATUS_UNKNOWN = 4
        NET_IF_OPER_STATUS_DORMANT = 5
        NET_IF_OPER_STATUS_NOT_PRESENT = 6
        NET_IF_OPER_STATUS_LOWER_LAYER_DOWN = 7
    End Enum
    Public Enum NET_IF_ADMIN_STATUS ' ifAdminStatus
        NET_IF_ADMIN_STATUS_UP = 1
        NET_IF_ADMIN_STATUS_DOWN = 2
        NET_IF_ADMIN_STATUS_TESTING = 3
    End Enum
    Public Enum NET_IF_OPER_STATUS_FLAGS
        NET_IF_OPER_STATUS_DOWN_NOT_AUTHENTICATED = &H00000001
        NET_IF_OPER_STATUS_DOWN_NOT_MEDIA_CONNECTED = &H00000002
        NET_IF_OPER_STATUS_DORMANT_PAUSED = &H00000004
        NET_IF_OPER_STATUS_DORMANT_LOW_POWER = &H00000008
    End Enum
    Public Enum NET_IF_COMPARTMENT_SCOPE
        NET_IF_COMPARTMENT_SCOPE_UNSPECIFIED = 0
        NET_IF_COMPARTMENT_SCOPE_ALL = (-1)
    End Enum
    Public Enum NET_IF_DID
        NET_IF_OID_IF_ALIAS = &H00000001  ' identifies the ifAlias string for an interface
        NET_IF_OID_COMPARTMENT_ID = &H00000002  ' identifies the compartment ID for an interface.
        NET_IF_OID_NETWORK_GUID = &H00000003  ' identifies the NetworkGuid for an interface.
        NET_IF_OID_IF_ENTRY = &H00000004  ' identifies statistics for an interface.
    End Enum
    Public Const NET_SITEID_UNSPECIFIED  = (0)
    Public Const NET_SITEID_MAXUSER  = (&H07ffffff)
    Public Const NET_SITEID_MAXSYSTEM  = (&H0fffffff)
    Public Enum NET_IF_RCV_ADDRESS_TYPE ' ifRcvAddressType
        NET_IF_RCV_ADDRESS_TYPE_OTHER = 1
        NET_IF_RCV_ADDRESS_TYPE_VOLATILE = 2
        NET_IF_RCV_ADDRESS_TYPE_NON_VOLATILE = 3
    End Enum
    Public Type NET_IF_RCV_ADDRESS_LH
        ifRcvAddressType As NET_IF_RCV_ADDRESS_TYPE
        ifRcvAddressLength As Integer
        ifRcvAddressOffset As Integer ' from beginning of this struct
    End Type
    Public Type NET_IF_ALIAS_LH
        ifAliasLength As Integer ' in bytes, of ifAlias string
        ifAliasOffset As Integer ' in bytes, from beginning of this struct
    End Type
    Public /* Union */ Type NET_LUID_LH
        Value As LongLong
    End Type
    'Alias IF_LUID As NET_LUID_LH
    'Alias NET_LUID As NET_LUID_LH
    Public /* Union */ Type IF_LUID
        Value As LongLong
    End Type
    Public /* Union */ Type NET_LUID
        Value As LongLong
    End Type
    Public Const NET_IFINDEX_UNSPECIFIED  = (0)  ' Not a valid ifIndex
    Public Const NET_IFLUID_UNSPECIFIED  = (0)  ' Not a valid if Luid
    Public Enum NET_IF_CONNECTION_TYPE
        NET_IF_CONNECTION_DEDICATED = 1
        NET_IF_CONNECTION_PASSIVE = 2
        NET_IF_CONNECTION_DEMAND = 3
        NET_IF_CONNECTION_MAXIMUM = 4
    End Enum
    Public Enum TUNNEL_TYPE
        TUNNEL_TYPE_NONE = 0
        TUNNEL_TYPE_OTHER = 1
        TUNNEL_TYPE_DIRECT = 2
        TUNNEL_TYPE_6TO4 = 11
        TUNNEL_TYPE_ISATAP = 13
        TUNNEL_TYPE_TEREDO = 14
        TUNNEL_TYPE_IPHTTPS = 15
    End Enum
    Public Const IFI_UNSPECIFIED = 0
    Public Enum NET_IF_INFO_FLAGS
        NIIF_HARDWARE_INTERFACE = &H00000001  ' Set iff hardware
        NIIF_FILTER_INTERFACE = &H00000002
        NIIF_NDIS_RESERVED1 = &H00000004
        NIIF_NDIS_RESERVED2 = &H00000008
        NIIF_NDIS_RESERVED3 = &H00000010
        NIIF_NDIS_WDM_INTERFACE = &H00000020
        NIIF_NDIS_ENDPOINT_INTERFACE = &H00000040
        NIIF_NDIS_ISCSI_INTERFACE = &H00000080
        NIIF_NDIS_RESERVED4 = &H00000100
        NIIF_WAN_TUNNEL_TYPE_UNKNOWN = (-1)
    End Enum
    Public Enum NET_IF_ACCESS_TYPE
        NET_IF_ACCESS_LOOPBACK = 1
        NET_IF_ACCESS_BROADCAST = 2
        NET_IF_ACCESS_POINT_TO_POINT = 3
        NET_IF_ACCESS_POINT_TO_MULTI_POINT = 4
        NET_IF_ACCESS_MAXIMUM = 5
    End Enum
    Public Enum NET_IF_DIRECTION_TYPE
        NET_IF_DIRECTION_SENDRECEIVE
        NET_IF_DIRECTION_SENDONLY
        NET_IF_DIRECTION_RECEIVEONLY
        NET_IF_DIRECTION_MAXIMUM
    End Enum
    Public Enum NET_IF_MEDIA_CONNECT_STATE
        MediaConnectStateUnknown
        MediaConnectStateConnected
        MediaConnectStateDisconnected
    End Enum
    Public Const NET_IF_LINK_SPEED_UNKNOWN As LongLong = -1
    Public Enum NET_IF_MEDIA_DUPLEX_STATE
        MediaDuplexStateUnknown
        MediaDuplexStateHalf
        MediaDuplexStateFull
    End Enum
    Public Const NIIF_BUS_NUMBER_UNKNOWN  = (-1)
    Public Const NIIF_SLOT_NUMBER_UNKNOWN  = (-1)
    Public Const NIIF_FUNCTION_NUMBER_UNKNOWN  = (-1)
    Public Type NET_PHYSICAL_LOCATION_LH
        BusNumber As Long ' Physical location
        SlotNumber As Long ' ... for hardware
        FunctionNumber As Long ' ... devices.
    End Type
    Public Const IF_MAX_STRING_SIZE = 256
    Public Type IF_COUNTED_STRING_LH
        '_Field_range_(0, (IF_MAX_STRING_SIZE + 1) * sizeof(WCHAR))
        Length As Integer ' in -Bytes-
        Strng(IF_MAX_STRING_SIZE + 1) As Integer
    End Type
    Public Const IF_MAX_PHYS_ADDRESS_LENGTH = 32
    Public Type IF_PHYSICAL_ADDRESS_LH
        ' _Field_range_(0, IF_MAX_PHYS_ADDRESS_LENGTH)
        Length As Integer
        Address(0 To (IF_MAX_PHYS_ADDRESS_LENGTH - 1)) As Byte
    End Type
    Public Enum IF_ADMINISTRATIVE_STATE
        IF_ADMINISTRATIVE_DISABLED
        IF_ADMINISTRATIVE_ENABLED
        IF_ADMINISTRATIVE_DEMANDDIAL
    End Enum
    Public Enum IF_OPER_STATUS
        IfOperStatusUp = 1
        IfOperStatusDown = 2
        IfOperStatusTesting = 3
        IfOperStatusUnknown = 4
        IfOperStatusDormant = 5
        IfOperStatusNotPresent = 6
        IfOperStatusLowerLayerDown = 7
    End Enum
    Public Type NDIS_INTERFACE_INFORMATION
        '  rod fields
        ifOperStatus As NET_IF_OPER_STATUS
        ifOperStatusFlags As NET_IF_OPER_STATUS_FLAGS
        MediaConnectState As NET_IF_MEDIA_CONNECT_STATE
        MediaDuplexState As NET_IF_MEDIA_DUPLEX_STATE
        ifMtu As Long
        ifPromiscuousMode As Byte
        ifDeviceWakeUpEnable As Byte
        XmitLinkSpeed As LongLong
        RcvLinkSpeed As LongLong
        ifLastChange As LongLong
        ifCounterDiscontinuityTime As LongLong
        ifInUnknownProtos As LongLong
        ' OID_GEN_STATISTICS
        ifInDiscards As LongLong ' OID_GEN_RCV_DISCARDS = OID_GEN_RCV_ERROR + OID_GEN_RCV_NO_BUFFER
        ifInErrors As LongLong ' OID_GEN_RCV_ERROR
        ifHCInOctets As LongLong ' OID_GEN_BYTES_RCV = OID_GEN_DIRECTED_BYTES_RCV + OID_GEN_MULTICAST_BYTES_RCV + OID_GEN_BROADCAST_BYTES_RCV
        ifHCInUcastPkts As LongLong ' OID_GEN_DIRECTED_FRAMES_RCV
        ifHCInMulticastPkts As LongLong ' OID_GEN_MULTICAST_FRAMES_RCV
        ifHCInBroadcastPkts As LongLong ' OID_GEN_BROADCAST_FRAMES_RCV
        ifHCOutOctets As LongLong ' OID_GEN_BYTES_XMIT = OID_GEN_DIRECTED_BYTES_XMIT + OID_GEN_MULTICAST_BYTES_XMIT + OID_GEN_BROADCAST_BYTES_XMIT
        ifHCOutUcastPkts As LongLong ' OID_GEN_DIRECTED_FRAMES_XMIT
        ifHCOutMulticastPkts As LongLong ' OID_GEN_MULTICAST_FRAMES_XMIT
        ifHCOutBroadcastPkts As LongLong ' OID_GEN_BROADCAST_FRAMES_XMIT
        ifOutErrors As LongLong ' OID_GEN_XMIT_ERROR
        ifOutDiscards As LongLong ' OID_GEN_XMIT_DISCARDS
        ifHCInUcastOctets As LongLong ' OID_GEN_DIRECTED_BYTES_RCV
        ifHCInMulticastOctets As LongLong ' OID_GEN_MULTICAST_BYTES_RCV
        ifHCInBroadcastOctets As LongLong ' OID_GEN_BROADCAST_BYTES_RCV
        ifHCOutUcastOctets As LongLong ' OID_GEN_DIRECTED_BYTES_XMIT
        ifHCOutMulticastOctets As LongLong ' OID_GEN_MULTICAST_BYTES_XMIT
        ifHCOutBroadcastOctets As LongLong ' OID_GEN_BROADCAST_BYTES_XMIT
        CompartmentId As Long
        SupportedStatistics As Long
    End Type

    'ifmib.h
    Public Type MIB_IFNUMBER
        dwValue As Long
    End Type

    Public Const MAXLEN_PHYSADDR  = 8
    Public Const MAXLEN_IFDESCR  = 256

    Public Type MIB_IFROW
        wszName(0 To (MAX_INTERFACE_NAME_LEN - 1)) As Integer
        dwIndex As Long
        dwType As IFTYPE
        dwMtu As Long
        dwSpeed As Long
        dwPhysAddrLen As Long
        bPhysAddr(0 To (MAXLEN_PHYSADDR - 1)) As Byte
        dwAdminStatus As Long
        dwOperStatus As INTERNAL_IF_OPER_STATUS
        dwLastChange As Long
        dwInOctets As Long
        dwInUcastPkts As Long
        dwInNUcastPkts As Long
        dwInDiscards As Long
        dwInErrors As Long
        dwInUnknownProtos As Long
        dwOutOctets As Long
        dwOutUcastPkts As Long
        dwOutNUcastPkts As Long
        dwOutDiscards As Long
        dwOutErrors As Long
        dwOutQLen As Long
        dwDescrLen As Long
        bDescr(0 To (MAXLEN_IFDESCR - 1)) As Byte
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_IFTABLE
        dwNumEntries As Long
        table() As MIB_IFROW
    End Type

    'nldef.h
    Public Enum NL_PREFIX_ORIGIN
        ' 
        '  These values are from iptypes.h.
        '  They need to fit in a 4 bit field.
        ' 
        IpPrefixOriginOther = 0
        IpPrefixOriginManual = 1
        IpPrefixOriginWellKnown = 2
        IpPrefixOriginDhcp = 3
        IpPrefixOriginRouterAdvertisement = 4
        IpPrefixOriginUnchanged = 1 << 4
    
        NlpoOther = IpPrefixOriginOther
        NlpoManual = IpPrefixOriginManual
        NlpoWellKnown = IpPrefixOriginWellKnown
        NlpoDhcp = IpPrefixOriginDhcp
        NlpoRouterAdvertisement = IpPrefixOriginRouterAdvertisement
    End Enum
    Public Enum NL_SUFFIX_ORIGIN
        ' 
        '  TODO: Remove the Nlso* definitions.
        ' 
        NlsoOther = 0
        NlsoManual = 1
        NlsoWellKnown = 2
        NlsoDhcp = 3
        NlsoLinkLayerAddress = 4
        NlsoRandom = 5
        ' 
        '  These values are from in iptypes.h.
        '  They need to fit in a 4 bit field.
        ' 
        IpSuffixOriginOther = 0
        IpSuffixOriginManual = 6
        IpSuffixOriginWellKnown = 7
        IpSuffixOriginDhcp = 8
        IpSuffixOriginLinkLayerAddress = 9
        IpSuffixOriginRandom = 10
        IpSuffixOriginUnchanged = 1 << 4
    End Enum
    Public Enum NL_DAD_STATE
        ' 
        '  TODO: Remove the Nlds* definitions.
        ' 
        NldsInvalid = 0
        NldsTentative = 1
        NldsDuplicate = 2
        NldsDeprecated = 3
        NldsPreferred = 4
        ' 
        '  These values are from in iptypes.h.
        ' 
        IpDadStateInvalid = 0
        IpDadStateTentative = 6
        IpDadStateDuplicate = 7
        IpDadStateDeprecated = 8
        IpDadStatePreferred = 9
    End Enum
    Public Const NL_MAX_METRIC_COMPONENT = (((1&) << 31) - 1&)
    Public Enum NL_ROUTE_PROTOCOL
        RouteProtocolOther = 1
        RouteProtocolLocal = 2
        RouteProtocolNetMgmt = 3
        RouteProtocolIcmp = 4
        RouteProtocolEgp = 5
        RouteProtocolGgp = 6
        RouteProtocolHello = 7
        RouteProtocolRip = 8
        RouteProtocolIsIs = 9
        RouteProtocolEsIs = 10
        RouteProtocolCisco = 11
        RouteProtocolBbn = 12
        RouteProtocolOspf = 13
        RouteProtocolBgp = 14
        RouteProtocolIdpr = 15
        RouteProtocolEigrp = 16
        RouteProtocolDvmrp = 17
        RouteProtocolRpl = 18
        RouteProtocolDhcp = 19
        MIB_IPPROTO_OTHER = 1
        PROTO_IP_OTHER = 1
        MIB_IPPROTO_LOCAL = 2
        PROTO_IP_LOCAL = 2
        MIB_IPPROTO_NETMGMT = 3
        PROTO_IP_NETMGMT = 3
        MIB_IPPROTO_ICMP = 4
        PROTO_IP_ICMP = 4
        MIB_IPPROTO_EGP = 5
        PROTO_IP_EGP = 5
        MIB_IPPROTO_GGP = 6
        PROTO_IP_GGP = 6
        MIB_IPPROTO_HELLO = 7
        PROTO_IP_HELLO = 7
        MIB_IPPROTO_RIP = 8
        PROTO_IP_RIP = 8
        MIB_IPPROTO_IS_IS = 9
        PROTO_IP_IS_IS = 9
        MIB_IPPROTO_ES_IS = 10
        PROTO_IP_ES_IS = 10
        MIB_IPPROTO_CISCO = 11
        PROTO_IP_CISCO = 11
        MIB_IPPROTO_BBN = 12
        PROTO_IP_BBN = 12
        MIB_IPPROTO_OSPF = 13
        PROTO_IP_OSPF = 13
        MIB_IPPROTO_BGP = 14
        PROTO_IP_BGP = 14
        MIB_IPPROTO_IDPR = 15
        PROTO_IP_IDPR = 15
        MIB_IPPROTO_EIGRP = 16
        PROTO_IP_EIGRP = 16
        MIB_IPPROTO_DVMRP = 17
        PROTO_IP_DVMRP = 17
        MIB_IPPROTO_RPL = 18
        PROTO_IP_RPL = 18
        MIB_IPPROTO_DHCP = 19
        PROTO_IP_DHCP = 19
        MIB_IPPROTO_NT_AUTOSTATIC = 10002
        PROTO_IP_NT_AUTOSTATIC = 10002
        MIB_IPPROTO_NT_STATIC = 10006
        PROTO_IP_NT_STATIC = 10006
        MIB_IPPROTO_NT_STATIC_NON_DOD = 10007
        PROTO_IP_NT_STATIC_NON_DOD = 10007
    End Enum
    Public Enum NL_ADDRESS_TYPE
        NlatUnspecified
        NlatUnicast
        NlatAnycast
        NlatMulticast
        NlatBroadcast
        NlatInvalid
    End Enum
    Public Enum NL_ROUTE_ORIGIN
        NlroManual
        NlroWellKnown
        NlroDHCP
        NlroRouterAdvertisement
        Nlro6to4
    End Enum
    Public Enum NL_NEIGHBOR_STATE
        NlnsUnreachable
        NlnsIncomplete
        NlnsProbe
        NlnsDelay
        NlnsStale
        NlnsReachable
        NlnsPermanent
        NlnsMaximum
    End Enum
    Public Enum NL_LINK_LOCAL_ADDRESS_BEHAVIOR
        LinkLocalAlwaysOff = 0 ' Never use link locals.
        LinkLocalDelayed = 1 ' Use link locals only if no other addresses.
        '  (default for IPv4).
        '  Legacy mapping: IPAutoconfigurationEnabled.
        LinkLocalAlwaysOn = 2 ' Always use link locals (default for IPv6).
        LinkLocalUnchanged = -1
    End Enum
    Public Type NL_INTERFACE_OFFLOAD_ROD
    ' BOOLEAN NlChecksumSupported : 1;
    ' BOOLEAN NlOptionsSupported : 1;
    ' BOOLEAN TlDatagramChecksumSupported : 1;
    ' BOOLEAN TlStreamChecksumSupported : 1;
    ' BOOLEAN TlStreamOptionsSupported : 1;
    ' BOOLEAN FastPathCompatible : 1;
    ' BOOLEAN TlLargeSendOffloadSupported : 1;
    ' BOOLEAN TlGiantSendOffloadSupported : 1;
        Bitfield As Byte
    End Type
    Public Enum NL_ROUTER_DISCOVERY_BEHAVIOR
        RouterDiscoveryDisabled = 0
        RouterDiscoveryEnabled = 1
        RouterDiscoveryDhcp = 2
        RouterDiscoveryUnchanged = -1
    End Enum
    Public Enum NL_BANDWIDTH_FLAG
        NlbwDisabled = 0
        NlbwEnabled = 1
        NlbwUnchanged = -1
    End Enum
    Public Type NL_PATH_BANDWIDTH_ROD
        Bandwidth As LongLong
        Instability As LongLong
        BandwidthPeaked As Byte
    End Type
    Public Enum NL_NETWORK_CATEGORY
        NetworkCategoryPublic = 0
        NetworkCategoryPrivate = 1
        NetworkCategoryDomainAuthenticated = 2
        NetworkCategoryUnchanged = -1 ' used in a set operation
        NetworkCategoryUnknown = -1 ' returned in a query operation
    End Enum
    Public Enum NL_INTERFACE_NETWORK_CATEGORY_STATE
        NlincCategoryUnknown = 0
        NlincPublic = 1
        NlincPrivate = 2
        NlincDomainAuthenticated = 3
        NlincCategoryStateMax = 2
    End Enum
    Public Enum NL_NETWORK_CONNECTIVITY_LEVEL_HINT
        NetworkConnectivityLevelHintUnknown = 0
        NetworkConnectivityLevelHintNone = 1
        NetworkConnectivityLevelHintLocalAccess = 2
        NetworkConnectivityLevelHintInternetAccess = 3
        NetworkConnectivityLevelHintConstrainedInternetAccess = 4
        NetworkConnectivityLevelHintHidden = 5
    End Enum
    Public Enum NL_NETWORK_CONNECTIVITY_COST_HINT
        NetworkConnectivityCostHintUnknown = 0
        NetworkConnectivityCostHintUnrestricted = 1
        NetworkConnectivityCostHintFixed = 2
        NetworkConnectivityCostHintVariable = 3
    End Enum
    Public Type NL_NETWORK_CONNECTIVITY_HINT
        ConnectivityLevel As NL_NETWORK_CONNECTIVITY_LEVEL_HINT
        ' Fields reflecting cost factors.
        ConnectivityCost As NL_NETWORK_CONNECTIVITY_COST_HINT
        ApproachingDataLimit As Byte
        OverDataLimit As Byte
        Roaming As Byte
    End Type
    Public Type NL_BANDWIDTH_INFORMATION
        Bandwidth As LongLong
        Instability As LongLong
        BandwidthPeaked As Byte
    End Type

    'ipmib.h
    Public Enum MIB_IPADDR_TYPE
        MIB_IPADDR_PRIMARY = &H0001  ' Primary ipaddr
        MIB_IPADDR_DYNAMIC = &H0004  ' Dynamic ipaddr
        MIB_IPADDR_DISCONNECTED = &H0008  ' Address is on disconnected interface
        MIB_IPADDR_DELETED = &H0040  ' Address being deleted
        MIB_IPADDR_TRANSIENT = &H0080  ' Transient address
        MIB_IPADDR_DNS_ELIGIBLE = &H0100  ' Address is published in DNS.
    End Enum



    Public Type MIB_IPADDRROW_XP
        dwAddr As Long
        dwIndex As Long
        dwMask As Long
        dwBCastAddr As Long
        dwReasmSize As Long
        unused1 As Integer
        /* [ TypeHint(MIB_IPADDR_TYPE) ] */ wType As Integer
    End Type
    'Alias MIB_IPADDROW As MIB_IPADDROW_XP
    Public Type MIB_IPADDRROW
        dwAddr As Long
        dwIndex As Long
        dwMask As Long
        dwBCastAddr As Long
        dwReasmSize As Long
        unused1 As Integer
        /* [ TypeHint(MIB_IPADDR_TYPE) ] */ wType As Integer
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_IPADDRTABLE
        dwNumEntries As Long
        table() As MIB_IPADDRROW
    End Type
    Public Type MIB_IPFORWARDNUMBER
        dwValue As Long
    End Type

    Public Type MIB_IPFORWARDROW
        dwForwardDest As Long
        dwForwardMask As Long
        dwForwardPolicy As Long
        dwForwardNextHop As Long
        dwForwardIfIndex As Long
        'union {
        ' DWORD dwForwardType;              // Old field name uses DWORD type.
        ForwardType As MIB_IPROUTE_TYPE ' New field name uses enum type.
        '};
        ' union {
        'DWORD dwForwardProto;             // Old field name uses DWORD type.
        ForwardProto As NL_ROUTE_PROTOCOL ' New field name uses enum type.
        '};
        dwForwardAge As Long
        dwForwardNextHopAS As Long
        dwForwardMetric1 As Long
        dwForwardMetric2 As Long
        dwForwardMetric3 As Long
        dwForwardMetric4 As Long
        dwForwardMetric5 As Long
    End Type
    Public Enum MIB_IPROUTE_TYPE
        MIB_IPROUTE_TYPE_OTHER = 1
        MIB_IPROUTE_TYPE_INVALID = 2
        MIB_IPROUTE_TYPE_DIRECT = 3
        MIB_IPROUTE_TYPE_INDIRECT = 4
        MIB_IPROUTE_METRIC_UNUSED = -1
    End Enum
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_IPFORWARDTABLE
        dwNumEntries As Long
        table() As MIB_IPFORWARDROW
    End Type
    Public Enum MIB_IPNET_TYPE
        MIB_IPNET_TYPE_OTHER = 1
        MIB_IPNET_TYPE_INVALID = 2
        MIB_IPNET_TYPE_DYNAMIC = 3
        MIB_IPNET_TYPE_STATIC = 4
    End Enum
    Public Type MIB_IPNETROW_LH
        dwIndex As Long
        dwPhysAddrLen As Long
        bPhysAddr(0 To (MAXLEN_PHYSADDR - 1)) As Byte
        dwAddr As Long
        ' union {
        '     DWORD dwType;           // Old field name was just a DWORD.
        Type As MIB_IPNET_TYPE ' New field name uses the enum type.
        '};
    End Type
    'Alias MIB_IPNETROW As MIB_IPNETROW_LH
    Public Type MIB_IPNETROW
        dwIndex As Long
        dwPhysAddrLen As Long
        bPhysAddr(0 To (MAXLEN_PHYSADDR - 1)) As Byte
        dwAddr As Long
        ' union {
        '     DWORD dwType;           // Old field name was just a DWORD.
        Type As MIB_IPNET_TYPE ' New field name uses the enum type.
        '};
    End Type
    Public Type MIB_IPNETROW_W2K
        dwIndex As Long
        dwPhysAddrLen As Long
        bPhysAddr(0 To (MAXLEN_PHYSADDR - 1)) As Byte
        dwAddr As Long
        dwType As MIB_IPNET_TYPE
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_IPNETTABLE
        dwNumEntries As Long
        table() As MIB_IPNETROW
    End Type
    Public Enum MIB_IPSTATS_FORWARDING
        MIB_IP_FORWARDING = 1
        MIB_IP_NOT_FORWARDING = 2
    End Enum
    Public Const MIB_USE_CURRENT_TTL  = (-1)
    Public Const MIB_USE_CURRENT_FORWARDING  = (-1)
    Public Type MIB_IPSTATS_LH
        'union {
        '    DWORD dwForwarding;
        Forwarding As MIB_IPSTATS_FORWARDING
        '};
        dwDefaultTTL As Long
        dwInReceives As Long
        dwInHdrErrors As Long
        dwInAddrErrors As Long
        dwForwDatagrams As Long
        dwInUnknownProtos As Long
        dwInDiscards As Long
        dwInDelivers As Long
        dwOutRequests As Long
        dwRoutingDiscards As Long
        dwOutDiscards As Long
        dwOutNoRoutes As Long
        dwReasmTimeout As Long
        dwReasmReqds As Long
        dwReasmOks As Long
        dwReasmFails As Long
        dwFragOks As Long
        dwFragFails As Long
        dwFragCreates As Long
        dwNumIf As Long
        dwNumAddr As Long
        dwNumRoutes As Long
    End Type
    'Alias MIB_IPSTATS As MIB_IPSTATS_LH
    Public Type MIB_IPSTATS
        'union {
        '    DWORD dwForwarding;
        Forwarding As MIB_IPSTATS_FORWARDING
        '};
        dwDefaultTTL As Long
        dwInReceives As Long
        dwInHdrErrors As Long
        dwInAddrErrors As Long
        dwForwDatagrams As Long
        dwInUnknownProtos As Long
        dwInDiscards As Long
        dwInDelivers As Long
        dwOutRequests As Long
        dwRoutingDiscards As Long
        dwOutDiscards As Long
        dwOutNoRoutes As Long
        dwReasmTimeout As Long
        dwReasmReqds As Long
        dwReasmOks As Long
        dwReasmFails As Long
        dwFragOks As Long
        dwFragFails As Long
        dwFragCreates As Long
        dwNumIf As Long
        dwNumAddr As Long
        dwNumRoutes As Long
    End Type
    Public Type MIBICMPSTATS
        dwMsgs As Long
        dwErrors As Long
        dwDestUnreachs As Long
        dwTimeExcds As Long
        dwParmProbs As Long
        dwSrcQuenchs As Long
        dwRedirects As Long
        dwEchos As Long
        dwEchoReps As Long
        dwTimestamps As Long
        dwTimestampReps As Long
        dwAddrMasks As Long
        dwAddrMaskReps As Long
    End Type
    Public Type MIBICMPINFO
        icmpInStats As MIBICMPSTATS
        icmpOutStats As MIBICMPSTATS
    End Type
    Public Type MIB_ICMP
        stats As MIBICMPINFO
    End Type
    Public Type MIBICMPSTATS_EX_XPSP1
        dwMsgs As Long
        dwErrors As Long
        rgdwTypeCount(0 To 255) As Long
    End Type
    'Alias MIBICMPSTATS_EX As MIBICMPSTATS_EX_XPSP1
    Public Type MIBICMPSTATS_EX
        dwMsgs As Long
        dwErrors As Long
        rgdwTypeCount(0 To 255) As Long
    End Type
    Public Type MIB_ICMP_EX_XPSP1
        icmpInStats As MIBICMPSTATS_EX
        icmpOutStats As MIBICMPSTATS_EX
    End Type
    'Alias MIB_ICMP_EX As MIB_ICMP_EX_XPSP1
    Public Type MIB_ICMP_EX
        icmpInStats As MIBICMPSTATS_EX
        icmpOutStats As MIBICMPSTATS_EX
    End Type
    Public Enum ICMP6_TYPE
        ICMP6_DST_UNREACH = 1
        ICMP6_PACKET_TOO_BIG = 2
        ICMP6_TIME_EXCEEDED = 3
        ICMP6_PARAM_PROB = 4
        ICMP6_ECHO_REQUEST = 128
        ICMP6_ECHO_REPLY = 129
        ICMP6_MEMBERSHIP_QUERY = 130
        ICMP6_MEMBERSHIP_REPORT = 131
        ICMP6_MEMBERSHIP_REDUCTION = 132
        ND_ROUTER_SOLICIT = 133
        ND_ROUTER_ADVERT = 134
        ND_NEIGHBOR_SOLICIT = 135
        ND_NEIGHBOR_ADVERT = 136
        ND_REDIRECT = 137
        ICMP6_V2_MEMBERSHIP_REPORT = 143
    End Enum
    Public Const ICMP6_INFOMSG_MASK = &H80
    Public Function ICMP6_ISTYPEINFORMATIONAL(ByVal Type As ICMP6_TYPE) As Boolean: Return (Type And ICMP6_INFOMSG_MASK) <> 0: End Function
    Public Function ICMP6_ISTYPEERROR(ByVal Type As ICMP6_TYPE) As Boolean: Return Not ICMP6_ISTYPEINFORMATIONAL(Type): End Function
        
    Public Enum ICMP4_TYPE
        ICMP4_ECHO_REPLY = 0 ' Echo Reply.
        ICMP4_DST_UNREACH = 3 ' Destination Unreachable.
        ICMP4_SOURCE_QUENCH = 4 ' Source Quench.
        ICMP4_REDIRECT = 5 ' Redirect.
        ICMP4_ECHO_REQUEST = 8 ' Echo Request.
        ICMP4_ROUTER_ADVERT = 9 ' Router Advertisement.
        ICMP4_ROUTER_SOLICIT = 10 ' Router Solicitation.
        ICMP4_TIME_EXCEEDED = 11 ' Time Exceeded.
        ICMP4_PARAM_PROB = 12 ' Parameter Problem.
        ICMP4_TIMESTAMP_REQUEST = 13 ' Timestamp Request.
        ICMP4_TIMESTAMP_REPLY = 14 ' Timestamp Reply.
        ICMP4_MASK_REQUEST = 17 ' Address Mask Request.
        ICMP4_MASK_REPLY = 18 ' Address Mask Reply.
    End Enum
    Public Function ICMP4_ISTYPEERROR(ByVal Type As ICMP4_TYPE) As Boolean: Return (Type = ICMP4_DST_UNREACH) Or (Type = ICMP4_SOURCE_QUENCH) Or (Type = ICMP4_REDIRECT) Or (Type = ICMP4_PARAM_PROB) Or (Type = ICMP4_TIME_EXCEEDED): End Function

    Public Type MIB_IPMCAST_OIF_XP
        dwOutIfIndex As Long
        dwNextHopAddr As Long
        dwReserved As Long
        dwReserved1 As Long
    End Type
    'Alias MIB_IPMCAST_OIF As MIB_IPMCAST_OIF_XP
    Public Type MIB_IPMCAST_OIF
        dwOutIfIndex As Long
        dwNextHopAddr As Long
        dwReserved As Long
        dwReserved1 As Long
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(rgmioOutInfo(0))")]
    Public Type MIB_IPMCAST_MFE
        dwGroup As Long
        dwSource As Long
        dwSrcMask As Long
        dwUpStrmNgbr As Long
        dwInIfIndex As Long
        dwInIfProtocol As Long
        dwRouteProtocol As Long
        dwRouteNetwork As Long
        dwRouteMask As Long
        ulUpTime As Long
        ulExpiryTime As Long
        ulTimeOut As Long
        ulNumOutIf As Long
        fFlags As Long
        dwReserved As Long
        rgmioOutInfo() As MIB_IPMCAST_OIF
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_MFE_TABLE
        dwNumEntries As Long
        table() As MIB_IPMCAST_MFE
    End Type
    Public Type MIB_IPMCAST_OIF_STATS_LH
        dwOutIfIndex As Long
        dwNextHopAddr As Long
        dwDialContext As Long
        ulTtlTooLow As Long
        ulFragNeeded As Long
        ulOutPackets As Long
        ulOutDiscards As Long
    End Type
    'Alias MIB_IPMCAST_OIF_STATS As MIB_IPMCAST_OIF_STATS_LH
    Public Type MIB_IPMCAST_OIF_STATS
        dwOutIfIndex As Long
        dwNextHopAddr As Long
        dwDialContext As Long
        ulTtlTooLow As Long
        ulFragNeeded As Long
        ulOutPackets As Long
        ulOutDiscards As Long
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(rgmiosOutStats(0))")]
    Public Type MIB_IPMCAST_MFE_STATS
        dwGroup As Long
        dwSource As Long
        dwSrcMask As Long
        dwUpStrmNgbr As Long
        dwInIfIndex As Long
        dwInIfProtocol As Long
        dwRouteProtocol As Long
        dwRouteNetwork As Long
        dwRouteMask As Long
        ulUpTime As Long
        ulExpiryTime As Long
        ulNumOutIf As Long
        ulInPkts As Long
        ulInOctets As Long
        ulPktsDifferentIf As Long
        ulQueueOverflow As Long
        rgmiosOutStats() As MIB_IPMCAST_OIF_STATS
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_MFE_STATS_TABLE
        dwNumEntries As Long
        table() As MIB_IPMCAST_MFE_STATS
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(rgmiosOutStats(0))")]
    Public Type MIB_IPMCAST_MFE_STATS_EX_XP
        dwGroup As Long
        dwSource As Long
        dwSrcMask As Long
        dwUpStrmNgbr As Long
        dwInIfIndex As Long
        dwInIfProtocol As Long
        dwRouteProtocol As Long
        dwRouteNetwork As Long
        dwRouteMask As Long
        ulUpTime As Long
        ulExpiryTime As Long
        ulNumOutIf As Long
        ulInPkts As Long
        ulInOctets As Long
        ulPktsDifferentIf As Long
        ulQueueOverflow As Long
        ulUninitMfe As Long
        ulNegativeMfe As Long
        ulInDiscards As Long
        ulInHdrErrors As Long
        ulTotalOutPackets As Long
        rgmiosOutStats() As MIB_IPMCAST_OIF_STATS
    End Type
    'Alias MIB_IPMCAST_MFE_STATS_EX As MIB_IPMCAST_MFE_STATS_EX_XP
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(rgmiosOutStats(0))")]
    Public Type MIB_IPMCAST_MFE_STATS_EX
        dwGroup As Long
        dwSource As Long
        dwSrcMask As Long
        dwUpStrmNgbr As Long
        dwInIfIndex As Long
        dwInIfProtocol As Long
        dwRouteProtocol As Long
        dwRouteNetwork As Long
        dwRouteMask As Long
        ulUpTime As Long
        ulExpiryTime As Long
        ulNumOutIf As Long
        ulInPkts As Long
        ulInOctets As Long
        ulPktsDifferentIf As Long
        ulQueueOverflow As Long
        ulUninitMfe As Long
        ulNegativeMfe As Long
        ulInDiscards As Long
        ulInHdrErrors As Long
        ulTotalOutPackets As Long
        rgmiosOutStats() As MIB_IPMCAST_OIF_STATS
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_MFE_STATS_TABLE_EX_XP
        dwNumEntries As Long
        table() As LongPtr 'PMIB_IPMCAST_MFE_STATS_EX_XP
    End Type
    'Alias MIB_MFE_STATS_TABLE_EX As MIB_MFE_STATS_TABLE_EX_XP
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_MFE_STATS_TABLE_EX
        dwNumEntries As Long
        table() As LongPtr 'PMIB_IPMCAST_MFE_STATS_EX_XP
    End Type
    Public Type MIB_IPMCAST_GLOBAL
        dwEnable As Long
    End Type
    Public Type MIB_IPMCAST_IF_ENTRY
        dwIfIndex As Long
        dwTtl As Long
        dwProtocol As Long
        dwRateLimit As Long
        ulInMcastOctets As Long
        ulOutMcastOctets As Long
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_IPMCAST_IF_TABLE
        dwNumEntries As Long
        table() As MIB_IPMCAST_IF_ENTRY
    End Type

    'tcpmib.h
    Public Const TCPIP_OWNING_MODULE_SIZE = 16
    Public Enum MIB_TCP_STATE
        MIB_TCP_STATE_CLOSED = 1
        MIB_TCP_STATE_LISTEN = 2
        MIB_TCP_STATE_SYN_SENT = 3
        MIB_TCP_STATE_SYN_RCVD = 4
        MIB_TCP_STATE_ESTAB = 5
        MIB_TCP_STATE_FIN_WAIT1 = 6
        MIB_TCP_STATE_FIN_WAIT2 = 7
        MIB_TCP_STATE_CLOSE_WAIT = 8
        MIB_TCP_STATE_CLOSING = 9
        MIB_TCP_STATE_LAST_ACK = 10
        MIB_TCP_STATE_TIME_WAIT = 11
        MIB_TCP_STATE_DELETE_TCB = 12
        ' 
        '  Extra TCP states not defined in the MIB
        ' 
        MIB_TCP_STATE_RESERVED = 100
    End Enum
    Public Enum TCP_CONNECTION_OFFLOAD_STATE
        TcpConnectionOffloadStateInHost = 0
        TcpConnectionOffloadStateOffloading = 1
        TcpConnectionOffloadStateOffloaded = 2
        TcpConnectionOffloadStateUploading = 3
        TcpConnectionOffloadStateMax = 4
    End Enum
    Public Type MIB_TCPROW_LH
        'union {
        '   DWORD dwState;       // Old field used DWORD type.
        State As MIB_TCP_STATE ' New field uses enum type.
        '};
        dwLocalAddr As Long
        dwLocalPort As Long
        dwRemoteAddr As Long
        dwRemotePort As Long
    End Type
    'Alias MIB_TCPROW As MIB_TCPROW_LH
    Public Type MIB_TCPROW
        'union {
        '   DWORD dwState;       // Old field used DWORD type.
        State As MIB_TCP_STATE ' New field uses enum type.
        '};
        dwLocalAddr As Long
        dwLocalPort As Long
        dwRemoteAddr As Long
        dwRemotePort As Long
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_TCPTABLE
        dwNumEntries As Long
        table() As MIB_TCPROW
    End Type
    Public Type MIB_TCPROW2
        dwState As MIB_TCP_STATE
        dwLocalAddr As Long
        dwLocalPort As Long
        dwRemoteAddr As Long
        dwRemotePort As Long
        dwOwningPid As Long
        dwOffloadState As TCP_CONNECTION_OFFLOAD_STATE
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_TCPTABLE2
        dwNumEntries As Long
        table() As MIB_TCPROW2
    End Type
    Public Type MIB_TCPROW_OWNER_PID
        dwState As MIB_TCP_STATE
        dwLocalAddr As Long
        dwLocalPort As Long
        dwRemoteAddr As Long
        dwRemotePort As Long
        dwOwningPid As Long
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_TCPTABLE_OWNER_PID
        dwNumEntries As Long
        table() As MIB_TCPROW_OWNER_PID
    End Type
    Public Type MIB_TCPROW_OWNER_MODULE
        dwState As MIB_TCP_STATE
        dwLocalAddr As Long
        dwLocalPort As Long
        dwRemoteAddr As Long
        dwRemotePort As Long
        dwOwningPid As Long
        liCreateTimestamp As LARGE_INTEGER
        OwningModuleInfo(0 To (TCPIP_OWNING_MODULE_SIZE - 1)) As LongLong
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_TCPTABLE_OWNER_MODULE
        dwNumEntries As Long
        table() As MIB_TCPROW_OWNER_MODULE
    End Type
    Public Type MIB_TCP6ROW
        State As MIB_TCP_STATE
        LocalAddr As IN6_ADDR
        dwLocalScopeId As Long
        dwLocalPort As Long
        RemoteAddr As IN6_ADDR
        dwRemoteScopeId As Long
        dwRemotePort As Long
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_TCP6TABLE
        dwNumEntries As Long
        table() As MIB_TCP6ROW
    End Type
    Public Type MIB_TCP6ROW2
        LocalAddr As IN6_ADDR
        dwLocalScopeId As Long
        dwLocalPort As Long
        RemoteAddr As IN6_ADDR
        dwRemoteScopeId As Long
        dwRemotePort As Long
        State As MIB_TCP_STATE
        dwOwningPid As Long
        dwOffloadState As TCP_CONNECTION_OFFLOAD_STATE
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_TCP6TABLE2
        dwNumEntries As Long
        table() As MIB_TCP6ROW2
    End Type
    Public Type MIB_TCP6ROW_OWNER_PID
        ucLocalAddr(0 To 15) As Byte
        dwLocalScopeId As Long
        dwLocalPort As Long
        ucRemoteAddr(0 To 15) As Byte
        dwRemoteScopeId As Long
        dwRemotePort As Long
        dwState As MIB_TCP_STATE
        dwOwningPid As Long
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_TCP6TABLE_OWNER_PID
        dwNumEntries As Long
        '_Field_size_(dwNumEntries)
        table() As MIB_TCP6ROW_OWNER_PID
    End Type
    Public Type MIB_TCP6ROW_OWNER_MODULE
        ucLocalAddr(0 To 15) As Byte
        dwLocalScopeId As Long
        dwLocalPort As Long
        ucRemoteAddr(0 To 15) As Byte
        dwRemoteScopeId As Long
        dwRemotePort As Long
        dwState As Long
        dwOwningPid As Long
        liCreateTimestamp As LARGE_INTEGER
        OwningModuleInfo(0 To (TCPIP_OWNING_MODULE_SIZE - 1)) As LongLong
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_TCP6TABLE_OWNER_MODULE
        dwNumEntries As Long
        '_Field_size_(dwNumEntries)
        table() As MIB_TCP6ROW_OWNER_MODULE
    End Type
    Public Const MIB_TCP_MAXCONN_DYNAMIC As Long = (-1)
    Public Enum TCP_RTO_ALGORITHM
        TcpRtoAlgorithmOther = 1
        TcpRtoAlgorithmConstant
        TcpRtoAlgorithmRsre
        TcpRtoAlgorithmVanj
        MIB_TCP_RTO_OTHER = 1
        MIB_TCP_RTO_CONSTANT = 2
        MIB_TCP_RTO_RSRE = 3
        MIB_TCP_RTO_VANJ = 4
    End Enum
    Public Type MIB_TCPSTATS_LH
        'union {
        '   DWORD dwRtoAlgorithm;
        RtoAlgorithm As TCP_RTO_ALGORITHM
        '};
        dwRtoMin As Long
        dwRtoMax As Long
        dwMaxConn As Long
        dwActiveOpens As Long
        dwPassiveOpens As Long
        dwAttemptFails As Long
        dwEstabResets As Long
        dwCurrEstab As Long
        dwInSegs As Long
        dwOutSegs As Long
        dwRetransSegs As Long
        dwInErrs As Long
        dwOutRsts As Long
        dwNumConns As Long
    End Type
    'Alias MIB_TCPSTATS As MIB_TCPSTATS_LH
    Public Type MIB_TCPSTATS
        'union {
        '   DWORD dwRtoAlgorithm;
        RtoAlgorithm As TCP_RTO_ALGORITHM
        '};
        dwRtoMin As Long
        dwRtoMax As Long
        dwMaxConn As Long
        dwActiveOpens As Long
        dwPassiveOpens As Long
        dwAttemptFails As Long
        dwEstabResets As Long
        dwCurrEstab As Long
        dwInSegs As Long
        dwOutSegs As Long
        dwRetransSegs As Long
        dwInErrs As Long
        dwOutRsts As Long
        dwNumConns As Long
    End Type
    [Description("Win10 Redstone 3+")]
    Public Type MIB_TCPSTATS2
        RtoAlgorithm As TCP_RTO_ALGORITHM
        dwRtoMin As Long
        dwRtoMax As Long
        dwMaxConn As Long
        dwActiveOpens As Long
        dwPassiveOpens As Long
        dwAttemptFails As Long
        dwEstabResets As Long
        dwCurrEstab As Long
        dw64InSegs As LongLong
        dw64OutSegs As LongLong
        dwRetransSegs As Long
        dwInErrs As Long
        dwOutRsts As Long
        dwNumConns As Long
    End Type

    'udpmib.h

    Public Type MIB_UDPROW
        dwLocalAddr As Long
        dwLocalPort As Long
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_UDPTABLE
        dwNumEntries As Long
        table() As MIB_UDPROW
    End Type
    Public Type MIB_UDPROW_OWNER_PID
        dwLocalAddr As Long
        dwLocalPort As Long
        dwOwningPid As Long
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_UDPTABLE_OWNER_PID
        dwNumEntries As Long
        table() As MIB_UDPROW_OWNER_PID
    End Type
    Public Type MIB_UDPROW_OWNER_MODULE
        dwLocalAddr As Long
        dwLocalPort As Long
        dwOwningPid As Long
        liCreateTimestamp As LARGE_INTEGER
        'union {
        '   struct {
        '        int     SpecificPortBind : 1;
        '  };
        dwFlags As Long
        '};
        OwningModuleInfo(0 To (TCPIP_OWNING_MODULE_SIZE - 1)) As LongLong
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_UDPTABLE_OWNER_MODULE
        dwNumEntries As Long
        table() As MIB_UDPROW_OWNER_MODULE
    End Type
    Public Type MIB_UDPROW2
        dwLocalAddr As Long
        dwLocalPort As Long
        dwOwningPid As Long
        liCreateTimestamp As LARGE_INTEGER
        'union {
        '    struct {
        '        int     SpecificPortBind : 1;
        '    };
        dwFlags As Long
        '};
        OwningModuleInfo(0 To (TCPIP_OWNING_MODULE_SIZE - 1)) As LongLong
        dwRemoteAddr As Long
        dwRemotePort As Long
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_UDPTABLE2
        dwNumEntries As Long
        table() As MIB_UDPROW2
    End Type
    Public Type MIB_UDP6ROW
        dwLocalAddr As IN6_ADDR
        dwLocalScopeId As Long
        dwLocalPort As Long
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_UDP6TABLE
        dwNumEntries As Long
        table() As MIB_UDP6ROW
    End Type
    Public Type MIB_UDP6ROW_OWNER_PID
        ucLocalAddr(0 To 15) As Byte
        dwLocalScopeId As Long
        dwLocalPort As Long
        dwOwningPid As Long
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_UDP6TABLE_OWNER_PID
        dwNumEntries As Long
        '_Field_size_(dwNumEntries)
        table() As MIB_UDP6ROW_OWNER_PID
    End Type
    Public Type MIB_UDP6ROW_OWNER_MODULE
        ucLocalAddr(0 To 15) As Byte
        dwLocalScopeId As Long
        dwLocalPort As Long
        dwOwningPid As Long
        liCreateTimestamp As LARGE_INTEGER
        'union {
        '   struct {
        '      int     SpecificPortBind : 1;
        '  };
        dwFlags As Long
        '};
        OwningModuleInfo(0 To (TCPIP_OWNING_MODULE_SIZE - 1)) As LongLong
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_UDP6TABLE_OWNER_MODULE
        dwNumEntries As Long
        table() As MIB_UDP6ROW_OWNER_MODULE
    End Type
    Public Type MIB_UDP6ROW2
        ucLocalAddr(0 To 15) As Byte
        dwLocalScopeId As Long
        dwLocalPort As Long
        dwOwningPid As Long
        liCreateTimestamp As LARGE_INTEGER
        'union {
        '    struct {
        '       int     SpecificPortBind : 1;
        '   };
        dwFlags As Long
        '};
        OwningModuleInfo(0 To (TCPIP_OWNING_MODULE_SIZE - 1)) As LongLong
        ucRemoteAddr(0 To 15) As Byte
        dwRemoteScopeId As Long
        dwRemotePort As Long
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_UDP6TABLE2
        dwNumEntries As Long
        table() As MIB_UDP6ROW2
    End Type
    Public Type MIB_UDPSTATS
        dwInDatagrams As Long
        dwNoPorts As Long
        dwInErrors As Long
        dwOutDatagrams As Long
        dwNumAddrs As Long
    End Type
    [Description("Win10 Redstone 3+")]
    Public Type MIB_UDPSTATS2
        dw64InDatagrams As LongLong
        dwNoPorts As Long
        dwInErrors As Long
        dw64OutDatagrams As LongLong
        dwNumAddrs As Long
    End Type

    'resume iprtmib.h
    Public Enum TCP_TABLE_CLASS
        TCP_TABLE_BASIC_LISTENER = 0
        TCP_TABLE_BASIC_CONNECTIONS = 1
        TCP_TABLE_BASIC_ALL = 2
        TCP_TABLE_OWNER_PID_LISTENER = 3
        TCP_TABLE_OWNER_PID_CONNECTIONS = 4
        TCP_TABLE_OWNER_PID_ALL = 5
        TCP_TABLE_OWNER_MODULE_LISTENER = 6
        TCP_TABLE_OWNER_MODULE_CONNECTIONS = 7
        TCP_TABLE_OWNER_MODULE_ALL = 8
    End Enum
    Public Enum UDP_TABLE_CLASS
        UDP_TABLE_BASIC = 0
        UDP_TABLE_OWNER_PID = 1
        UDP_TABLE_OWNER_MODULE = 2
    End Enum
    Public Enum TCPIP_OWNER_MODULE_INFO_CLASS
        TCPIP_OWNER_MODULE_INFO_BASIC = 0
    End Enum
    Public Type TCPIP_OWNER_MODULE_BASIC_INFO
        pModuleName As LongPtr
        pModulePath As LongPtr
    End Type
    Public Type MIB_IPMCAST_BOUNDARY
        dwIfIndex As Long
        dwGroupAddress As Long
        dwGroupMask As Long
        dwStatus As Long
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_IPMCAST_BOUNDARY_TABLE
        dwNumEntries As Long
        table() As MIB_IPMCAST_BOUNDARY
    End Type
    Public Type MIB_BOUNDARYROW
        dwGroupAddress As Long
        dwGroupMask As Long
    End Type
    Public Type MIB_MCAST_LIMIT_ROW
        dwTtl As Long
        dwRateLimit As Long
    End Type
    Public Const MAX_SCOPE_NAME_LEN = 255
    Public Type MIB_IPMCAST_SCOPE
        dwGroupAddress As Long
        dwGroupMask As Long
        snNameBuffer(MAX_SCOPE_NAME_LEN) As Integer 'SCOPE_NAME_BUFFER
        dwStatus As Long
    End Type

    Public Enum RTM_VIEW
        RTM_VIEW_MASK_ALL = &HFFFFFFFF
        RTM_VIEW_MASK_ANY = &H0
        RTM_VIEW_MASK_MCAST = &H2
        RTM_VIEW_MASK_NONE = &H0
        RTM_VIEW_MASK_SIZE = &H20
        RTM_VIEW_MASK_UCAST = &H1
    End Enum
    Public Enum RTM_VIEWID
        RTM_VIEW_ID_MCAST = 1
        RTM_VIEW_ID_UCAST = 0
    End Enum
    Public Type MIB_IPDESTROW
        '#ifdef __cplusplus
        ForwardRow As MIB_IPFORWARDROW
        '#else
        '    MIB_IPFORWARDROW;
        '#endif
        dwForwardPreference As Long
        dwForwardViewSet As RTM_VIEW
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_IPDESTTABLE
        dwNumEntries As Long
        table() As MIB_IPDESTROW
    End Type
    Public Type MIB_BEST_IF
        dwDestAddr As Long
        dwIfIndex As Long
    End Type
    Public Type MIB_PROXYARP
        dwAddress As Long
        dwMask As Long
        dwIfIndex As Long
    End Type
    Public Enum ROUTER_CONNECTION_STATE
        ROUTER_IF_STATE_UNREACHABLE = 0
        ROUTER_IF_STATE_DISCONNECTED = 1
        ROUTER_IF_STATE_CONNECTING = 2
        ROUTER_IF_STATE_CONNECTED = 3
    End Enum
    Public Type MIB_IFSTATUS
        dwIfIndex As Long
        dwAdminStatus As Long
        dwOperationalStatus As ROUTER_CONNECTION_STATE
        bMHbeatActive As BOOL
        bMHbeatAlive As BOOL
    End Type
    Public Type MIB_ROUTESTATE
        bRoutesSetToStack As BOOL
    End Type
    Public Type MIB_OPAQUE_INFO
        dwId As Long
        'union
        '{
        ullAlign As LongLong
        '   BYTE        rgbyData[1];
        '};
    End Type
    'end iprtmib.h

    'iptypes.h

    Public Const MAX_ADAPTER_DESCRIPTION_LENGTH  = 128  ' arb.
    Public Const MAX_ADAPTER_NAME_LENGTH  = 256  ' arb.
    Public Const MAX_ADAPTER_ADDRESS_LENGTH  = 8  ' arb.
    Public Const DEFAULT_MINIMUM_ENTITIES  = 32  ' arb.
    Public Const MAX_HOSTNAME_LEN  = 128  ' arb.
    Public Const MAX_DOMAIN_NAME_LEN  = 128  ' arb.
    Public Const MAX_SCOPE_ID_LEN  = 256  ' arb.
    Public Const MAX_DHCPV6_DUID_LENGTH  = 130  ' RFC 3315.
    Public Const MAX_DNS_SUFFIX_STRING_LENGTH  = 256

    Public Enum IP_NODE_TYPES
        BROADCAST_NODETYPE = 1
        PEER_TO_PEER_NODETYPE = 2
        MIXED_NODETYPE = 4
        HYBRID_NODETYPE = 8
    End Enum

    Public Type IP_ADDRESS_STRING
        str((4 * 4) - 1) As Byte
    End Type
    'Alias IP_MASK_STRING As IP_ADDRESS_STRING
    Public Type IP_MASK_STRING
        str((4 * 4) - 1) As Byte
    End Type
    Public Type IP_ADDR_STRING
        Next As LongPtr 'struct _IP_ADDR_STRING
        IpAddress As IP_ADDRESS_STRING
        IpMask As IP_MASK_STRING
        Context As Long
    End Type

    Public Type IP_ADAPTER_INFO
        Next As LongPtr 'struct _IP_ADAPTER_INFO
        ComboIndex As Long
        AdapterName(MAX_ADAPTER_NAME_LENGTH + 3) As Byte
        Description(MAX_ADAPTER_DESCRIPTION_LENGTH + 3) As Byte
        AddressLength As Long
        Address(0 To (MAX_ADAPTER_ADDRESS_LENGTH - 1)) As Byte
        Index As Long
        Type As MIB_IF_TYPE
        DhcpEnabled As Long
        CurrentIpAddress As LongPtr 'PIP_ADDR_STRING
        IpAddressList As IP_ADDR_STRING
        GatewayList As IP_ADDR_STRING
        DhcpServer As IP_ADDR_STRING
        HaveWins As BOOL
        PrimaryWinsServer As IP_ADDR_STRING
        SecondaryWinsServer As IP_ADDR_STRING
        LeaseObtained As LongLong
        LeaseExpires As LongLong
    End Type

    Public Type SOCKET_ADDRESS
        lpSockaddr As LongPtr
        iSockaddrLength As Long
    End Type
    Public Enum IP_ADPT_UC_FLAGS
        IP_ADAPTER_ADDRESS_DNS_ELIGIBLE = &H01
        IP_ADAPTER_ADDRESS_TRANSIENT = &H02
    End Enum
    Public Type IP_ADAPTER_UNICAST_ADDRESS_LH
        'union {
        '    ULONGLONG Alignment;
        '    struct {
        Length As Long
        Flags As IP_ADPT_UC_FLAGS
        '    };
        '};
        Next As LongPtr 'struct _IP_ADAPTER_UNICAST_ADDRESS_LH
        Address As SOCKET_ADDRESS
        PrefixOrigin As NL_PREFIX_ORIGIN
        SuffixOrigin As NL_SUFFIX_ORIGIN
        DadState As NL_DAD_STATE
        ValidLifetime As Long
        PreferredLifetime As Long
        LeaseLifetime As Long
        OnLinkPrefixLength As Byte
    End Type
    'Alias IP_ADAPTER_UNICAST_ADDRESS As IP_ADAPTER_UNICAST_ADDRESS_LH
    Public Type IP_ADAPTER_UNICAST_ADDRESS
        'union {
        '    ULONGLONG Alignment;
        '    struct {
        Length As Long
        Flags As IP_ADPT_UC_FLAGS
        '    };
        '};
        Next As LongPtr 'struct _IP_ADAPTER_UNICAST_ADDRESS_LH
        Address As SOCKET_ADDRESS
        PrefixOrigin As NL_PREFIX_ORIGIN
        SuffixOrigin As NL_SUFFIX_ORIGIN
        DadState As NL_DAD_STATE
        ValidLifetime As Long
        PreferredLifetime As Long
        LeaseLifetime As Long
        OnLinkPrefixLength As Byte
    End Type

    Public Type IP_ADAPTER_ANYCAST_ADDRESS_XP
        'union {
        'Alignment As LongLong
        '    struct {
        'Length As Long
        'Flags As Long
        '   };
        '};
        LengthAndFlags As LongLong 'combined due to align issues
        Next As LongPtr 'struct _IP_ADAPTER_ANYCAST_ADDRESS_XP
        Address As SOCKET_ADDRESS
    End Type
    'Alias IP_ADAPTER_ANYCAST_ADDRESS As IP_ADAPTER_ANYCAST_ADDRESS_XP
    Public Type IP_ADAPTER_ANYCAST_ADDRESS
        'union {
        'Alignment As LongLong
        '    struct {
        'Length As Long
        'Flags As Long
        '   };
        '};
        LengthAndFlags As LongLong 'combined due to align issues
        Next As LongPtr 'struct _IP_ADAPTER_ANYCAST_ADDRESS_XP
        Address As SOCKET_ADDRESS
    End Type

    Public Type IP_ADAPTER_DNS_SERVER_ADDRESS_XP
        'union {
        'Alignment As LongLong
        '    struct {
        'Length As Long
        'Flags As Long
        '   };
        '};
        LengthAndFlags As LongLong 'combined due to align issues
        Next As LongPtr 'struct IP_ADAPTER_DNS_SERVER_ADDRESS_XP
        Address As SOCKET_ADDRESS
    End Type
    'Alias IP_ADAPTER_DNS_SERVER_ADDRESS As IP_ADAPTER_DNS_SERVER_ADDRESS_XP
    Public Type IP_ADAPTER_DNS_SERVER_ADDRESS
        'union {
        'Alignment As LongLong
        '    struct {
        'Length As Long
        'Flags As Long
        '   };
        '};
        LengthAndFlags As LongLong 'combined due to align issues
        Next As LongPtr 'struct IP_ADAPTER_DNS_SERVER_ADDRESS_XP
        Address As SOCKET_ADDRESS
    End Type

    Public Type IP_ADAPTER_WINS_SERVER_ADDRESS_XP
        'union {
        'Alignment As LongLong
        '    struct {
        'Length As Long
        'Flags As Long
        '   };
        '};
        LengthAndFlags As LongLong 'combined due to align issues
        Next As LongPtr 'struct IP_ADAPTER_WINS_SERVER_ADDRESS_XP
        Address As SOCKET_ADDRESS
    End Type
    'Alias IP_ADAPTER_DNS_SERVER_ADDRESS As IP_ADAPTER_DNS_SERVER_ADDRESS_XP
    Public Type IP_ADAPTER_WINS_SERVER_ADDRESS
        'union {
        'Alignment As LongLong
        '    struct {
        'Length As Long
        'Flags As Long
        '   };
        '};
        LengthAndFlags As LongLong 'combined due to align issues
        Next As LongPtr 'struct IP_ADAPTER_WINS_SERVER_ADDRESS_XP
        Address As SOCKET_ADDRESS
    End Type

    Public Type IP_ADAPTER_GATEWAY_ADDRESS_LH
        'union {
        'Alignment As LongLong
        '    struct {
        'Length As Long
        'Flags As Long
        '   };
        '};
        LengthAndFlags As LongLong 'combined due to align issues
        Next As LongPtr 'struct IP_ADAPTER_GATEWAY_ADDRESS_LH
        Address As SOCKET_ADDRESS
    End Type
    'Alias IP_ADAPTER_GATEWAY_ADDRESS As IP_ADAPTER_GATEWAY_ADDRESS_LH
    Public Type IP_ADAPTER_GATEWAY_ADDRESS
        'union {
        'Alignment As LongLong
        '    struct {
        'Length As Long
        'Flags As Long
        '   };
        '};
        LengthAndFlags As LongLong 'combined due to align issues
        Next As LongPtr 'struct IP_ADAPTER_GATEWAY_ADDRESS_LH
        Address As SOCKET_ADDRESS
    End Type
    Public Type IP_ADAPTER_PREFIX_XP
        'union {
        'Alignment As LongLong
        '    struct {
        Length As Long
        Flags As Long
        '   };
        '};
        Next As LongPtr 'struct IP_ADAPTER_GATEWAY_ADDRESS_LH
        Address As SOCKET_ADDRESS
        PrefixLength As Long
    End Type
    'Alias IP_ADAPTER_PREFIX As IP_ADAPTER_PREFIX_XP
    Public Type IP_ADAPTER_PREFIX
        'union {
        'Alignment As LongLong
        '    struct {
        Length As Long
        Flags As Long
        '   };
        '};
        Next As LongPtr 'struct IP_ADAPTER_GATEWAY_ADDRESS_LH
        Address As SOCKET_ADDRESS
        PrefixLength As Long
    End Type

    Public Type IP_ADAPTER_DNS_SUFFIX
        Next As LongPtr 'struct _IP_ADAPTER_DNS_SUFFIX
        String(0 To (MAX_DNS_SUFFIX_STRING_LENGTH - 1)) As Integer
    End Type

    Public Enum IP_ADPT_ADRS_FLAGS
        IP_ADAPTER_DDNS_ENABLED = &H00000001
        IP_ADAPTER_REGISTER_ADAPTER_SUFFIX = &H00000002
        IP_ADAPTER_DHCP_ENABLED = &H00000004
        IP_ADAPTER_RECEIVE_ONLY = &H00000008
        IP_ADAPTER_NO_MULTICAST = &H00000010
        IP_ADAPTER_IPV6_OTHER_STATEFUL_CONFIG = &H00000020
        IP_ADAPTER_NETBIOS_OVER_TCPIP_ENABLED = &H00000040
        IP_ADAPTER_IPV4_ENABLED = &H00000080
        IP_ADAPTER_IPV6_ENABLED = &H00000100
        IP_ADAPTER_IPV6_MANAGE_ADDRESS_CONFIG = &H00000200
    End Enum

    Public Type IP_ADAPTER_ADDRESSES_LH
        'union {
        'Alignment As LongLong
        '    struct {
            Length As Long
            IfIndex As Long
        '  };
        '};
        Next As LongPtr ' struct _IP_ADAPTER_ADDRESSES_LH
        AdapterName As LongPtr
        FirstUnicastAddress As LongPtr 'PIP_ADAPTER_UNICAST_ADDRESS_LH
        FirstAnycastAddress As LongPtr 'PIP_ADAPTER_ANYCAST_ADDRESS_XP
        FirstMulticastAddress As LongPtr 'PIP_ADAPTER_MULTICAST_ADDRESS_XP
        FirstDnsServerAddress As LongPtr 'PIP_ADAPTER_DNS_SERVER_ADDRESS_XP
        DnsSuffix As LongPtr
        Description As LongPtr
        FriendlyName As LongPtr
        PhysicalAddress(0 To (MAX_ADAPTER_ADDRESS_LENGTH - 1)) As Byte
        PhysicalAddressLength As Long
        'union {
        Flags As IP_ADPT_ADRS_FLAGS
        '    struct {
        '  ULONG DdnsEnabled : 1;
        '  ULONG RegisterAdapterSuffix : 1;
        '  ULONG Dhcpv4Enabled : 1;
        '  ULONG ReceiveOnly : 1;
        '  ULONG NoMulticast : 1;
        '  ULONG Ipv6OtherStatefulConfig : 1;
        '  ULONG NetbiosOverTcpipEnabled : 1;
        '  ULONG Ipv4Enabled : 1;
        '  ULONG Ipv6Enabled : 1;
        '  ULONG Ipv6ManagedAddressConfigurationSupported : 1;
        '};
        '};
        Mtu As Long
        IfType As IFTYPE
        OperStatus As IF_OPER_STATUS
        Ipv6IfIndex As Long
        ZoneIndices(0 To 15) As Long
        FirstPrefix As LongPtr 'PIP_ADAPTER_PREFIX_XP
        TransmitLinkSpeed As LongLong
        ReceiveLinkSpeed As LongLong
        FirstWinsServerAddress As LongPtr 'PIP_ADAPTER_WINS_SERVER_ADDRESS_LH
        FirstGatewayAddress As LongPtr 'PIP_ADAPTER_GATEWAY_ADDRESS_LH
        Ipv4Metric As Long
        Ipv6Metric As Long
        Luid As IF_LUID
        Dhcpv4Server As SOCKET_ADDRESS
        CompartmentId As Long 'NET_IF_COMPARTMENT_ID
        NetworkGuid As UUID 'NET_IF_NETWORK_GUID
        ConnectionType As NET_IF_CONNECTION_TYPE
        TunnelType As TUNNEL_TYPE
        ' DHCP v6 Info.
        Dhcpv6Server As SOCKET_ADDRESS
        Dhcpv6ClientDuid(0 To (MAX_DHCPV6_DUID_LENGTH - 1)) As Byte
        Dhcpv6ClientDuidLength As Long
        Dhcpv6Iaid As Long
        '#if (NTDDI_VERSION >= NTDDI_VISTASP1)
        FirstDnsSuffix As LongPtr 'PIP_ADAPTER_DNS_SUFFIX
        '#endif
    End Type
    'Alias IP_ADAPTER_ADDRESSES As IP_ADAPTER_ADDRESSES_LH
    Public Type IP_ADAPTER_ADDRESSES
        'union {
        'Alignment As LongLong
        '    struct {
            Length As Long
            IfIndex As Long
        '  };
        '};
        Next As LongPtr ' struct _IP_ADAPTER_ADDRESSES_LH
        AdapterName As LongPtr
        FirstUnicastAddress As LongPtr 'PIP_ADAPTER_UNICAST_ADDRESS_LH
        FirstAnycastAddress As LongPtr 'PIP_ADAPTER_ANYCAST_ADDRESS_XP
        FirstMulticastAddress As LongPtr 'PIP_ADAPTER_MULTICAST_ADDRESS_XP
        FirstDnsServerAddress As LongPtr 'PIP_ADAPTER_DNS_SERVER_ADDRESS_XP
        DnsSuffix As LongPtr
        Description As LongPtr
        FriendlyName As LongPtr
        PhysicalAddress(0 To (MAX_ADAPTER_ADDRESS_LENGTH - 1)) As Byte
        PhysicalAddressLength As Long
        'union {
        Flags As IP_ADPT_ADRS_FLAGS
        '    struct {
        '  ULONG DdnsEnabled : 1;
        '  ULONG RegisterAdapterSuffix : 1;
        '  ULONG Dhcpv4Enabled : 1;
        '  ULONG ReceiveOnly : 1;
        '  ULONG NoMulticast : 1;
        '  ULONG Ipv6OtherStatefulConfig : 1;
        '  ULONG NetbiosOverTcpipEnabled : 1;
        '  ULONG Ipv4Enabled : 1;
        '  ULONG Ipv6Enabled : 1;
        '  ULONG Ipv6ManagedAddressConfigurationSupported : 1;
        '};
        '};
        Mtu As Long
        IfType As IFTYPE
        OperStatus As IF_OPER_STATUS
        Ipv6IfIndex As Long
        ZoneIndices(0 To 15) As Long
        FirstPrefix As LongPtr 'PIP_ADAPTER_PREFIX_XP
        TransmitLinkSpeed As LongLong
        ReceiveLinkSpeed As LongLong
        FirstWinsServerAddress As LongPtr 'PIP_ADAPTER_WINS_SERVER_ADDRESS_LH
        FirstGatewayAddress As LongPtr 'PIP_ADAPTER_GATEWAY_ADDRESS_LH
        Ipv4Metric As Long
        Ipv6Metric As Long
        Luid As IF_LUID
        Dhcpv4Server As SOCKET_ADDRESS
        CompartmentId As Long 'NET_IF_COMPARTMENT_ID
        NetworkGuid As UUID 'NET_IF_NETWORK_GUID
        ConnectionType As NET_IF_CONNECTION_TYPE
        TunnelType As TUNNEL_TYPE
        ' DHCP v6 Info.
        Dhcpv6Server As SOCKET_ADDRESS
        Dhcpv6ClientDuid(0 To (MAX_DHCPV6_DUID_LENGTH - 1)) As Byte
        Dhcpv6ClientDuidLength As Long
        Dhcpv6Iaid As Long
        '#if (NTDDI_VERSION >= NTDDI_VISTASP1)
        FirstDnsSuffix As LongPtr 'PIP_ADAPTER_DNS_SUFFIX
        '#endif
    End Type

    Public Enum IP_GAA_FLAGS
        GAA_FLAG_SKIP_UNICAST = &H0001
        GAA_FLAG_SKIP_ANYCAST = &H0002
        GAA_FLAG_SKIP_MULTICAST = &H0004
        GAA_FLAG_SKIP_DNS_SERVER = &H0008
        GAA_FLAG_INCLUDE_PREFIX = &H0010
        GAA_FLAG_SKIP_FRIENDLY_NAME = &H0020
        GAA_FLAG_INCLUDE_WINS_INFO = &H0040
        GAA_FLAG_INCLUDE_GATEWAYS = &H0080
        GAA_FLAG_INCLUDE_ALL_INTERFACES = &H0100
        GAA_FLAG_INCLUDE_ALL_COMPARTMENTS = &H0200
        GAA_FLAG_INCLUDE_TUNNEL_BINDINGORDER = &H0400
        GAA_FLAG_SKIP_DNS_INFO = &H0800
    End Enum

    Public Type IP_PER_ADAPTER_INFO_W2KSP1
        AutoconfigEnabled As Long
        AutoconfigActive As Long
        CurrentDnsServer As LongPtr 'PIP_ADDR_STRING
        DnsServerList As IP_ADDR_STRING
    End Type
    'Alias IP_PER_ADAPTER_INFO As IP_PER_ADAPTER_INFO_W2KSP1
    Public Type IP_PER_ADAPTER_INFO
        AutoconfigEnabled As Long
        AutoconfigActive As Long
        CurrentDnsServer As LongPtr 'PIP_ADDR_STRING
        DnsServerList As IP_ADDR_STRING
    End Type

    Public Type FIXED_INFO_W2KSP1
       HostName(MAX_HOSTNAME_LEN + 3) As Byte
       DomainName(MAX_DOMAIN_NAME_LEN + 3) As Byte
       CurrentDnsServer As LongPtr 'PIP_ADDR_STRING
       DnsServerList As IP_ADDR_STRING
       NodeType As IP_NODE_TYPES
       ScopeId(MAX_SCOPE_ID_LEN + 3) As Byte
       EnableRouting As Long
       EnableProxy As Long
       EnableDns As Long
    End Type
    'Alias FIXED_INFO As FIXED_INFO_W2KSP1
    Public Type FIXED_INFO
       HostName(MAX_HOSTNAME_LEN + 3) As Byte
       DomainName(MAX_DOMAIN_NAME_LEN + 3) As Byte
       CurrentDnsServer As LongPtr 'PIP_ADDR_STRING
       DnsServerList As IP_ADDR_STRING
       NodeType As IP_NODE_TYPES
       ScopeId(MAX_SCOPE_ID_LEN + 3) As Byte
       EnableRouting As Long
       EnableProxy As Long
       EnableDns As Long
    End Type

    Public Type IP_INTERFACE_NAME_INFO_W2KSP1
        Index As Long ' Interface Index
        MediaType As IFTYPE ' Interface Types - see ipifcons.h
        /* [ TypeHint(IF_CONNECTION_TYPES) ] */ ConnectionType As Byte
        /* [ TypeHint(IF_ACCESS_TYPE) ] */ AccessType As Byte
        DeviceGuid As UUID ' Device GUID is the guid of the device
        ' that IP exposes
        InterfaceGuid As UUID ' Interface GUID, if not GUID_NULL is the
        ' GUID for the interface mapped to the device.
    End Type
    'Alias IP_INTERFACE_NAME_INFO As IP_INTERFACE_NAME_INFO_W2KSP1
    Public Type IP_INTERFACE_NAME_INFO
        Index As Long ' Interface Index
        MediaType As IFTYPE ' Interface Types - see ipifcons.h
        /* [ TypeHint(IF_CONNECTION_TYPES) ] */ ConnectionType As Byte
        /* [ TypeHint(IF_ACCESS_TYPE) ] */ AccessType As Byte
        DeviceGuid As UUID ' Device GUID is the guid of the device
        ' that IP exposes
        InterfaceGuid As UUID ' Interface GUID, if not GUID_NULL is the
        ' GUID for the interface mapped to the device.
    End Type
    'end

    'begin tcpestats.h

    Public Enum TCP_ESTATS_TYPE
        TcpConnectionEstatsSynOpts = 0
        TcpConnectionEstatsData = 1
        TcpConnectionEstatsSndCong = 2
        TcpConnectionEstatsPath = 3
        TcpConnectionEstatsSendBuff = 4
        TcpConnectionEstatsRec = 5
        TcpConnectionEstatsObsRec = 6
        TcpConnectionEstatsBandwidth = 7
        TcpConnectionEstatsFineRtt = 8
        TcpConnectionEstatsMaximum = 9
    End Enum

    Public Enum TCP_BOOLEAN_OPTIONAL
        TcpBoolOptDisabled = 0
        TcpBoolOptEnabled = 1
        TcpBoolOptUnchanged = -1
    End Enum

    Public Type TCP_ESTATS_SYN_OPTS_ROS_v0
        ActiveOpen As Byte
        MssRcvd As Long
        MssSent As Long
    End Type

    Public Enum TCP_SOFT_ERROR
        TcpErrorNone = 0
        TcpErrorBelowDataWindow = 1
        TcpErrorAboveDataWindow = 2
        TcpErrorBelowAckWindow = 3
        TcpErrorAboveAckWindow = 4
        TcpErrorBelowTsWindow = 5
        TcpErrorAboveTsWindow = 6
        TcpErrorDataChecksumError = 7
        TcpErrorDataLengthError = 8
        TcpErrorMaxSoftError = 9
    End Enum

    Public Type TCP_ESTATS_DATA_ROD_v0
        DataBytesOut As LongLong
        DataSegsOut As LongLong
        DataBytesIn As LongLong
        DataSegsIn As LongLong
        SegsOut As LongLong
        SegsIn As LongLong
        SoftErrors As Long
        SoftErrorReason As Long
        SndUna As Long
        SndNxt As Long
        SndMax As Long
        ThruBytesAcked As LongLong
        RcvNxt As Long
        ThruBytesReceived As LongLong
    End Type

    Public Type TCP_ESTATS_DATA_RW_v0
        EnableCollection As Byte
    End Type

    Public Type TCP_ESTATS_SND_CONG_ROD_v0
        SndLimTransRwin As Long
        SndLimTimeRwin As Long
        SndLimBytesRwin As LongPtr /* SIZE_T */
        SndLimTransCwnd As Long
        SndLimTimeCwnd As Long
        SndLimBytesCwnd As LongPtr /* SIZE_T */
        SndLimTransSnd As Long
        SndLimTimeSnd As Long
        SndLimBytesSnd As LongPtr /* SIZE_T */
        SlowStart As Long
        CongAvoid As Long
        OtherReductions As Long
        CurCwnd As Long
        MaxSsCwnd As Long
        MaxCaCwnd As Long
        CurSsthresh As Long
        MaxSsthresh As Long
        MinSsthresh As Long
    End Type

    Public Type TCP_ESTATS_SND_CONG_ROS_v0
        LimCwnd As Long
    End Type

    Public Type TCP_ESTATS_SND_CONG_RW_v0
        EnableCollection As Byte
    End Type

    Public Type TCP_ESTATS_PATH_ROD_v0
        FastRetran As Long
        Timeouts As Long
        SubsequentTimeouts As Long
        CurTimeoutCount As Long
        AbruptTimeouts As Long
        PktsRetrans As Long
        BytesRetrans As Long
        DupAcksIn As Long
        SacksRcvd As Long
        SackBlocksRcvd As Long
        CongSignals As Long
        PreCongSumCwnd As Long
        PreCongSumRtt As Long
        PostCongSumRtt As Long
        PostCongCountRtt As Long
        EcnSignals As Long
        EceRcvd As Long
        SendStall As Long
        QuenchRcvd As Long
        RetranThresh As Long
        SndDupAckEpisodes As Long
        SumBytesReordered As Long
        NonRecovDa As Long
        NonRecovDaEpisodes As Long
        AckAfterFr As Long
        DsackDups As Long
        SampleRtt As Long
        SmoothedRtt As Long
        RttVar As Long
        MaxRtt As Long
        MinRtt As Long
        SumRtt As Long
        CountRtt As Long
        CurRto As Long
        MaxRto As Long
        MinRto As Long
        CurMss As Long
        MaxMss As Long
        MinMss As Long
        SpuriousRtoDetections As Long
    End Type

    Public Type TCP_ESTATS_PATH_RW_v0
        EnableCollection As Byte
    End Type

    Public Type TCP_ESTATS_SEND_BUFF_ROD_v0
        CurRetxQueue As LongPtr 'SIZE_T
        MaxRetxQueue As LongPtr
        CurAppWQueue As LongPtr
        MaxAppWQueue As LongPtr
    End Type

    Public Type TCP_ESTATS_SEND_BUFF_RW_v0
        EnableCollection As Byte
    End Type

    Public Type TCP_ESTATS_REC_ROD_v0
        CurRwinSent As Long
        MaxRwinSent As Long
        MinRwinSent As Long
        LimRwin As Long
        DupAckEpisodes As Long
        DupAcksOut As Long
        CeRcvd As Long
        EcnSent As Long
        EcnNoncesRcvd As Long
        CurReasmQueue As Long
        MaxReasmQueue As Long
        CurAppRQueue As LongPtr
        MaxAppRQueue As LongPtr
        WinScaleSent As Byte
    End Type

    Public Type TCP_ESTATS_REC_RW_v0
        EnableCollection As Byte
    End Type

    Public Type TCP_ESTATS_OBS_REC_ROD_v0
        CurRwinRcvd As Long
        MaxRwinRcvd As Long
        MinRwinRcvd As Long
        WinScaleRcvd As Byte
    End Type

    Public Type TCP_ESTATS_OBS_REC_RW_v0
        EnableCollection As Byte
    End Type

    Public Type TCP_ESTATS_BANDWIDTH_RW_v0
        EnableCollectionOutbound As TCP_BOOLEAN_OPTIONAL
        EnableCollectionInbound As TCP_BOOLEAN_OPTIONAL
    End Type

    Public Type TCP_ESTATS_BANDWIDTH_ROD_v0
        OutboundBandwidth As LongLong
        InboundBandwidth As LongLong
        OutboundInstability As LongLong
        InboundInstability As LongLong
        OutboundBandwidthPeaked As Byte
        InboundBandwidthPeaked As Byte
    End Type

    Public Type TCP_ESTATS_FINE_RTT_RW_v0
        EnableCollection As Byte
    End Type

    Public Type TCP_ESTATS_FINE_RTT_ROD_v0
        RttVar As Long
        MaxRtt As Long
        MinRtt As Long
        SumRtt As Long
    End Type

    'end tcpestats.h

    Public Enum ADDRESS_FAMILIES
        AF_UNSPEC = 0 /* unspecified */
        AF_UNIX = 1 /* local to host (pipes, portals) */
        AF_INET = 2 /* internetwork: UDP, TCP, etc. */
        AF_IMPLINK = 3 /* arpanet imp addresses */
        AF_PUP = 4 /* pup protocols: e.g. BSP */
        AF_CHAOS = 5 /* mit CHAOS protocols */
        AF_IPX = 6 /* IPX and SPX */
        AF_NS = 6 /* XEROX NS protocols */
        AF_ISO = 7 /* ISO protocols */
        AF_OSI = AF_ISO /* OSI is ISO */
        AF_ECMA = 8 /* european computer manufacturers */
        AF_DATAKIT = 9 /* datakit protocols */
        AF_CCITT = 10 /* CCITT protocols, X.25 etc */
        AF_SNA = 11 /* IBM SNA */
        AF_DECnet = 12 /* DECnet */
        AF_DLI = 13 /* Direct data link interface */
        AF_LAT = 14 /* LAT */
        AF_HYLINK = 15 /* NSC Hyperchannel */
        AF_APPLETALK = 16 /* AppleTalk */
        AF_NETBIOS = 17 /* NetBios-style addresses */
        AF_VOICEVIEW = 18 /* VoiceView */
        AF_FIREFOX = 19 /* FireFox */
        AF_UNKNOWN1 = 20 /* Somebody is using this! */
        AF_BAN = 21 /* Banyan */
        AF_ATM = 22 ' Native ATM Services
        AF_INET6 = 23  ' Internetwork Version 6
        AF_CLUSTER = 24  ' Microsoft Wolfpack
        AF_12844 = 25  ' IEEE 1284.4 WG AF
        AF_IRDA = 26  ' IrDA
        AF_NETDES = 28  ' Network Designers OSI & gateway
        AF_TCNPROCESS = 29
        AF_TCNMESSAGE = 30
        AF_ICLFXBM = 31
        AF_BTH = 32 ' Bluetooth RFCOMM/L2CAP protocols
        AF_LINK = 33
        AF_HYPERV = 34
        AF_MAX = 35
    End Enum

    'BEGIN IPHLPAPI.H !!

    Public Const DNS_MAX_NAME_BUFFER_LENGTH = 256
    /*
    typedef struct NET_ADDRESS_INFO_
    {
       NET_ADDRESS_FORMAT Format;

       union
       {
          struct {
             WCHAR Address[DNS_MAX_NAME_BUFFER_LENGTH];
             WCHAR Port[6];
          } NamedAddress;

          SOCKADDR_IN Ipv4Address;
          SOCKADDR_IN6 Ipv6Address;
          SOCKADDR IpAddress;
       };

    } NET_ADDRESS_INFO, *PNET_ADDRESS_INFO;

    */
    ' Public Type NET_ADDRESS_INFO
    '     Format As NET_ADDRESS_FORMAT
    '     union(523) As Byte '(256 + 6) * sizeof(WCHAR)
    ' End Type


    Public Declare PtrSafe Function GetNumberOfInterfaces Lib "Iphlpapi" (pdwNumIf As Long) As Long
    Public Declare PtrSafe Function GetIfEntry Lib "Iphlpapi" (pIfRow As MIB_IFROW) As Long
    [Description("Make an initial call for size, copy to a byte array, then copy the parts into the UDT and it's SAFEARRAY.")]
    Public Declare PtrSafe Function GetIfTable Lib "Iphlpapi" (pIfTable As Any /* MIB_IFTABLE */, pdwSize As Long, ByVal bOrder As BOOL) As Long
    [Description("Make an initial call for size, copy to a byte array, then copy the parts into the UDT and it's SAFEARRAY.")]
    Public Declare PtrSafe Function GetIpAddrTable Lib "Iphlpapi" (pIpAddrTable As Any /* MIB_IPADDRTABLE */, pdwSize As Long, ByVal bOrder As BOOL) As Long
    [Description("Make an initial call for size, copy to a byte array, then copy the parts into the UDT and it's SAFEARRAY.")]
    Public Declare PtrSafe Function GetIpNetTable Lib "Iphlpapi" (IpNetTable As Any /* MIB_IPNETTABLE */, SizePointer As Long, ByVal Order As BOOL) As Long
    [Description("Make an initial call for size, copy to a byte array, then copy the parts into the UDT and it's SAFEARRAY.")]
    Public Declare PtrSafe Function GetIpForwardTable Lib "Iphlpapi" (pIpForwardTable As Any /* MIB_IPFORWARDTABLE */, pdwSize As Long, ByVal bOrder As BOOL) As Long
    [Description("Make an initial call for size, copy to a byte array, then copy the parts into the UDT and it's SAFEARRAY.")]
    Public Declare PtrSafe Function GetTcpTable Lib "Iphlpapi" (TcpTable As Any /* MIB_TCPTABLE */, SizePointer As Long, ByVal Order As BOOL) As Long
    [Description("Make an initial call for size, copy to a byte array, then copy the parts into the UDT and it's SAFEARRAY.")]
    Public Declare PtrSafe Function GetExtendedTcpTable Lib "Iphlpapi" (pTcpTable As Any, pdwSize As Long, ByVal bOrder As BOOL, ByVal ulAf As ADDRESS_FAMILIES, ByVal TableClass As TCP_TABLE_CLASS, ByVal Reserved As Long) As Long
    Public Declare PtrSafe Function GetOwnerModuleFromTcpEntry Lib "Iphlpapi" (pTcpEntry As MIB_TCPROW_OWNER_MODULE, ByVal Class As TCPIP_OWNER_MODULE_INFO_CLASS, pBuffer As Any, pdwSize As Long) As Long
    [Description("Make an initial call for size, copy to a byte array, then copy the parts into the UDT and it's SAFEARRAY.")]
    Public Declare PtrSafe Function GetUdpTable Lib "Iphlpapi" (UdpTable As Any /* MIB_UDPTABLE */, SizePointer As Long, ByVal Order As BOOL) As Long
    [Description("Make an initial call for size, copy to a byte array, then copy the parts into the UDT and it's SAFEARRAY.")]
    Public Declare PtrSafe Function GetExtendedUdpTable Lib "Iphlpapi" (pUdpTable As Any, pdwSize As Long, ByVal bOrder As BOOL, ByVal ulAf As ADDRESS_FAMILIES, ByVal TableClass As UDP_TABLE_CLASS, ByVal Reserved As Long) As Long
    Public Declare PtrSafe Function GetOwnerModuleFromUdpEntry Lib "Iphlpapi" (pUdpEntry As MIB_UDPROW_OWNER_MODULE, ByVal Class As TCPIP_OWNER_MODULE_INFO_CLASS, pBuffer As Any, pdwSize As Long) As Long
    [Description("Make an initial call for size, copy to a byte array, then copy the parts into the UDT and it's SAFEARRAY.")]
    Public Declare PtrSafe Function GetTcpTable2 Lib "Iphlpapi" (TcpTable As Any /* MIB_TCPTABLE2 */, SizePointer As Long, ByVal Order As BOOL) As Long
    [Description("⚠️ **WARNING:** MS states this has been removed as of Windows Vista, and to use GetTcpTable/GetExtendedTcpTable instead.")]
    Public Declare PtrSafe Function AllocateAndGetTcpExTableFromStack Lib "Iphlpapi" (ppTcpTable As Any, ByVal bOrder As BOOL, ByVal hHeap As LongPtr, ByVal dwFlags As HeapFlags, ByVal dwFamily As ADDRESS_FAMILIES) As Long
    [Description("⚠️ **WARNING:** MS states this has been removed as of Windows Vista, and to use GetTcpTable/GetExtendedTcpTable instead.")]
    Public Declare PtrSafe Function AllocateAndGetUdpExTableFromStack Lib "Iphlpapi" (ppUdpTable As Any, ByVal bOrder As BOOL, ByVal hHeap As LongPtr, ByVal dwFlags As HeapFlags, ByVal dwFamily As ADDRESS_FAMILIES) As Long
    [Description("Make an initial call for size, copy to a byte array, then copy the parts into the UDT and it's SAFEARRAY.")]
    Public Declare PtrSafe Function GetTcp6Table Lib "Iphlpapi" (TcpTable As Any /* MIB_TCP6TABLE */, SizePointer As Long, ByVal Order As BOOL) As Long
    [Description("Make an initial call for size, copy to a byte array, then copy the parts into the UDT and it's SAFEARRAY.")]
    Public Declare PtrSafe Function GetTcp6Table2 Lib "Iphlpapi" (TcpTable As Any /* MIB_TCP6TABLE2 */, SizePointer As Long, ByVal Order As BOOL) As Long
    Public Declare PtrSafe Function GetPerTcpConnectionEStats Lib "Iphlpapi" (Row As MIB_TCPROW, ByVal EstatsType As TCP_ESTATS_TYPE, Rw As Byte, ByVal RwVersion As Long, ByVal RwSize As Long, Ros As Byte, ByVal RosVersion As Long, ByVal RosSize As Long, Rod As Byte, ByVal RodVersion As Long, ByVal RodSize As Long) As Long
    Public Declare PtrSafe Function SetPerTcpConnectionEStats Lib "Iphlpapi" (Row As MIB_TCPROW, ByVal EstatsType As TCP_ESTATS_TYPE, Rw As Byte, ByVal RwVersion As Long, ByVal RwSize As Long, ByVal Offset As Long) As Long
    Public Declare PtrSafe Function GetPerTcp6ConnectionEStats Lib "Iphlpapi" (Row As MIB_TCP6ROW, ByVal EstatsType As TCP_ESTATS_TYPE, Rw As Byte, ByVal RwVersion As Long, ByVal RwSize As Long, Ros As Byte, ByVal RosVersion As Long, ByVal RosSize As Long, Rod As Byte, ByVal RodVersion As Long, ByVal RodSize As Long) As Long
    Public Declare PtrSafe Function SetPerTcp6ConnectionEStats Lib "Iphlpapi" (Row As MIB_TCP6ROW, ByVal EstatsType As TCP_ESTATS_TYPE, Rw As Byte, ByVal RwVersion As Long, ByVal RwSize As Long, ByVal Offset As Long) As Long
    Public Declare PtrSafe Function GetOwnerModuleFromTcp6Entry Lib "Iphlpapi" (pTcpEntry As MIB_TCP6ROW_OWNER_MODULE, ByVal Class As TCPIP_OWNER_MODULE_INFO_CLASS, pBuffer As Any, pdwSize As Long) As Long
    [Description("Make an initial call for size, copy to a byte array, then copy the parts into the UDT and it's SAFEARRAY.")]
    Public Declare PtrSafe Function GetUdp6Table Lib "Iphlpapi" (Udp6Table As Any /* MIB_UDP6TABLE */, SizePointer As Long, ByVal Order As BOOL) As Long
    Public Declare PtrSafe Function GetOwnerModuleFromUdp6Entry Lib "Iphlpapi" (pUdpEntry As MIB_UDP6ROW_OWNER_MODULE, ByVal Class As TCPIP_OWNER_MODULE_INFO_CLASS, pBuffer As Any, pdwSize As Long) As Long
    [Description("No documentation or even search results for this API. CDecl is a guess based on lack of _stdcall notation. Try GetOwnerModuleFromPidAndInfo_S for _stdcall.")]
    Public Declare PtrSafe Function GetOwnerModuleFromPidAndInfo CDecl Lib "Iphlpapi" (ByVal ulPid As Long, pInfo As LongLong, ByVal Class As TCPIP_OWNER_MODULE_INFO_CLASS, pBuffer As Any, pdwSize As Long) As Long
    Public Declare PtrSafe Function GetOwnerModuleFromPidAndInfo_S Lib "Iphlpapi" Alias "GetOwnerModuleFromPidAndInfo" (ByVal ulPid As Long, pInfo As LongLong, ByVal Class As TCPIP_OWNER_MODULE_INFO_CLASS, pBuffer As Any, pdwSize As Long) As Long
    Public Declare PtrSafe Function GetIpStatistics Lib "Iphlpapi" (Statistics As MIB_IPSTATS) As Long
    Public Declare PtrSafe Function GetIcmpStatistics Lib "Iphlpapi" (Statistics As MIB_ICMP) As Long
    Public Declare PtrSafe Function GetTcpStatistics Lib "Iphlpapi" (Statistics As MIB_TCPSTATS) As Long
    Public Declare PtrSafe Function GetUdpStatistics Lib "Iphlpapi" (Statistics As MIB_UDPSTATS) As Long
    Public Declare PtrSafe Function SetIpStatisticsEx Lib "Iphlpapi" (Statistics As MIB_IPSTATS, ByVal Family As ADDRESS_FAMILIES) As Long
    Public Declare PtrSafe Function GetIpStatisticsEx Lib "Iphlpapi" (Statistics As MIB_IPSTATS, ByVal Family As ADDRESS_FAMILIES) As Long
    Public Declare PtrSafe Function GetIcmpStatisticsEx Lib "Iphlpapi" (Statistics As MIB_ICMP, ByVal Family As ADDRESS_FAMILIES) As Long
    Public Declare PtrSafe Function GetTcpStatisticsEx Lib "Iphlpapi" (Statistics As MIB_TCPSTATS, ByVal Family As ADDRESS_FAMILIES) As Long
    Public Declare PtrSafe Function GetUdpStatisticsEx Lib "Iphlpapi" (Statistics As MIB_UDPSTATS, ByVal Family As ADDRESS_FAMILIES) As Long
    Public Declare PtrSafe Function GetTcpStatisticsEx2 Lib "Iphlpapi" (Statistics As MIB_TCPSTATS2, ByVal Family As ADDRESS_FAMILIES) As Long
    Public Declare PtrSafe Function GetUdpStatisticsEx2 Lib "Iphlpapi" (Statistics As MIB_UDPSTATS2, ByVal Family As ADDRESS_FAMILIES) As Long
    Public Declare PtrSafe Function SetIfEntry Lib "Iphlpapi" (pIfRow As MIB_IFROW) As Long
    Public Declare PtrSafe Function CreateIpForwardEntry Lib "Iphlpapi" (pRoute As MIB_IPFORWARDROW) As Long
    Public Declare PtrSafe Function SetIpForwardEntry Lib "Iphlpapi" (pRoute As MIB_IPFORWARDROW) As Long
    Public Declare PtrSafe Function DeleteIpForwardEntry Lib "Iphlpapi" (pRoute As MIB_IPFORWARDROW) As Long
    Public Declare PtrSafe Function SetIpStatistics Lib "Iphlpapi" (pIpStats As MIB_IPSTATS) As Long
    Public Declare PtrSafe Function SetIpTTL Lib "Iphlpapi" (ByVal nTTL As Long) As Long
    Public Declare PtrSafe Function CreateIpNetEntry Lib "Iphlpapi" (pArpEntry As MIB_IPNETROW) As Long
    Public Declare PtrSafe Function SetIpNetEntry Lib "Iphlpapi" (pArpEntry As MIB_IPNETROW) As Long
    Public Declare PtrSafe Function DeleteIpNetEntry Lib "Iphlpapi" (pArpEntry As MIB_IPNETROW) As Long
    Public Declare PtrSafe Function FlushIpNetTable Lib "Iphlpapi" (ByVal dwIfIndex As Long) As Long
    Public Declare PtrSafe Function CreateProxyArpEntry Lib "Iphlpapi" (ByVal dwAddress As Long, ByVal dwMask As Long, ByVal dwIfIndex As Long) As Long
    Public Declare PtrSafe Function DeleteProxyArpEntry Lib "Iphlpapi" (ByVal dwAddress As Long, ByVal dwMask As Long, ByVal dwIfIndex As Long) As Long
    Public Declare PtrSafe Function SetTcpEntry Lib "Iphlpapi" (pTcpRow As MIB_TCPROW) As Long
    [Description("Make an initial call for size, copy to a byte array, then copy the parts into the UDT and it's SAFEARRAY.")]
    Public Declare PtrSafe Function GetInterfaceInfo Lib "Iphlpapi" (pIfTable As Any /* IP_INTERFACE_INFO */, dwOutBufLen As Long) As Long
    [Description("Make an initial call for size, copy to a byte array, then copy the parts into the UDT and it's SAFEARRAY.")]
    Public Declare PtrSafe Function GetUniDirectionalAdapterInfo Lib "Iphlpapi" (pIPIfTable As Any /* IP_UNIDIRECTIONAL_ADAPTER_ADDRESS */, dwOutBufLen As Long) As Long
    Public Declare PtrSafe Function NhpAllocateAndGetInterfaceInfoFromStack Lib "Iphlpapi" (ppTable As IP_INTERFACE_NAME_INFO, pdwCount As Long, ByVal bOrder As BOOL, ByVal hHeap As LongPtr, ByVal dwFlags As HeapFlags) As Long
    Public Declare PtrSafe Function GetBestInterface Lib "Iphlpapi" (ByVal dwDestAddr As Long, pdwBestIfIndex As Long) As Long
    Public Declare PtrSafe Function GetBestInterfaceEx Lib "Iphlpapi" (pDestAddr As SOCKADDR, pdwBestIfIndex As Long) As Long
    Public Declare PtrSafe Function GetBestRoute Lib "Iphlpapi" (ByVal dwDestAddr As Long, ByVal dwSourceAddr As Long, pBestRoute As MIB_IPFORWARDROW) As Long
    Public Declare PtrSafe Function NotifyAddrChange Lib "Iphlpapi" (Handle As LongPtr, overlapped As OVERLAPPED) As Long
    Public Declare PtrSafe Function NotifyRouteChange Lib "Iphlpapi" (Handle As LongPtr, overlapped As OVERLAPPED) As Long
    Public Declare PtrSafe Function CancelIPChangeNotify Lib "Iphlpapi" (notifyoverlapped As OVERLAPPED) As Long
    Public DeclareWide PtrSafe Function GetAdapterIndex Lib "Iphlpapi" (ByVal AdapterName As String, IfIndex As Long) As Long
    Public Declare PtrSafe Function AddIPAddress Lib "Iphlpapi" (ByVal Address As Long, ByVal Mask As Long, ByVal IfIndex As Long, NTEContext As Long, NTEInstance As Long) As Long
    Public Declare PtrSafe Function DeleteIPAddress Lib "Iphlpapi" (ByVal NTEContext As Long) As Long
    Public Declare PtrSafe Function GetNetworkParams Lib "Iphlpapi" (pFixedInfo As FIXED_INFO, pOutBufLen As Long) As Long
    Public Declare PtrSafe Function GetAdaptersInfo Lib "Iphlpapi" (AdapterInfo As Any, SizePointer As Long) As Long
    Public Declare PtrSafe Function GetAdapterOrderMap Lib "Iphlpapi" () As LongPtr
    Public Declare PtrSafe Function GetAdaptersAddresses Lib "Iphlpapi" (ByVal Family As ADDRESS_FAMILIES, ByVal Flags As IP_GAA_FLAGS, ByVal Reserved As LongPtr, AdapterAddresses As Any, SizePointer As Long) As Long
    Public Declare PtrSafe Function GetPerAdapterInfo Lib "Iphlpapi" (ByVal IfIndex As Long, pAdapterInfo As Any, pOutBufLen As Long) As Long
    'Section omitted, see below
    Public Declare PtrSafe Function IpReleaseAddress Lib "Iphlpapi" (AdapterInfo As IP_ADAPTER_INDEX_MAP) As Long
    Public Declare PtrSafe Function IpRenewAddress Lib "Iphlpapi" (AdapterInfo As IP_ADAPTER_INDEX_MAP) As Long
    Public Declare PtrSafe Function SendARP Lib "Iphlpapi" (ByVal DestIP As Long, ByVal SrcIP As Long, pMacAddr As Any, PhyAddrLen As Long) As Long
    Public Declare PtrSafe Function GetRTTAndHopCount Lib "Iphlpapi" (ByVal DestIpAddress As Long, HopCount As Long, ByVal MaxHops As Long, RTT As Long) As BOOL
    Public Declare PtrSafe Function GetFriendlyIfIndex Lib "Iphlpapi" (ByVal IfIndex As Long) As Long
    Public Declare PtrSafe Function EnableRouter Lib "Iphlpapi" (pHandle As LongPtr, pOverlapped As OVERLAPPED) As Long
    Public Declare PtrSafe Function UnEnableRouter Lib "Iphlpapi" (pOverlapped As OVERLAPPED, Optional lpdwEnableCount As Long) As Long
    Public Declare PtrSafe Function DisableMediaSense Lib "Iphlpapi" (pHandle As LongPtr, pOverlapped As OVERLAPPED) As Long
    Public Declare PtrSafe Function RestoreMediaSense Lib "Iphlpapi" (pOverlapped As OVERLAPPED, Optional lpdwEnableCount As Long) As Long
    Public DeclareWide PtrSafe Function GetIpErrorString Lib "Iphlpapi" (ByVal ErrorCode As Long, ByVal Buffer As String, Size As Long) As Long
    Public DeclareWide PtrSafe Function ResolveNeighbor Lib "Iphlpapi" (NetworkAddress As SOCKADDR, PhysicalAddress As Any, PhysicalAddressLength As Long) As Long
    Public Declare PtrSafe Function CreatePersistentTcpPortReservation Lib "Iphlpapi" (ByVal StartPort As Integer, ByVal NumberOfPorts As Integer, Token As LongLong) As Long
    Public Declare PtrSafe Function CreatePersistentUdpPortReservation Lib "Iphlpapi" (ByVal StartPort As Integer, ByVal NumberOfPorts As Integer, Token As LongLong) As Long
    Public Declare PtrSafe Function DeletePersistentTcpPortReservation Lib "Iphlpapi" (ByVal StartPort As Integer, ByVal NumberOfPorts As Integer) As Long
    Public Declare PtrSafe Function DeletePersistentUdpPortReservation Lib "Iphlpapi" (ByVal StartPort As Integer, ByVal NumberOfPorts As Integer) As Long
    Public Declare PtrSafe Function LookupPersistentTcpPortReservation Lib "Iphlpapi" (ByVal StartPort As Integer, ByVal NumberOfPorts As Integer, Token As LongLong) As Long
    Public Declare PtrSafe Function LookupPersistentUdpPortReservation Lib "Iphlpapi" (ByVal StartPort As Integer, ByVal NumberOfPorts As Integer, Token As LongLong) As Long
    Public Declare PtrSafe Function ParseNetworkString Lib "Iphlpapi" (NetworkString As Integer, ByVal Types As NET_STRING_Values, AddressInfo As NET_ADDRESS_INFO, Optional PortNumber As Integer, Optional PrefixLength As Byte) As Long
    

    'netioapi.h   
    'todo: INCOMPLETE

    Public Enum MIB_NOTIFICATION_TYPE
        ' 
        '  ParameterChange.
        ' 
        MibParameterNotification
        ' 
        '  Addition.
        ' 
        MibAddInstance
        ' 
        '  Deletion.
        ' 
        MibDeleteInstance
        ' 
        '  Initial notification.
        ' 
        MibInitialNotification
    End Enum
    
    Public Enum NDIS_MEDIUM
        NdisMedium802_3
        NdisMedium802_5
        NdisMediumFddi
        NdisMediumWan
        NdisMediumLocalTalk
        NdisMediumDix              ' defined for convenience not a real medium
        NdisMediumArcnetRaw
        NdisMediumArcnet878_2
        NdisMediumAtm
        NdisMediumWirelessWan
        NdisMediumIrda
        NdisMediumBpc
        NdisMediumCoWan
        NdisMedium1394
        NdisMediumInfiniBand
    '#if ((NTDDI_VERSION >= NTDDI_VISTA) || NDIS_SUPPORT_NDIS6)
        NdisMediumTunnel
        NdisMediumNative802_11
        NdisMediumLoopback
    '#endif // (NTDDI_VERSION >= NTDDI_VISTA)

    '#if (NTDDI_VERSION >= NTDDI_WIN7)
        NdisMediumWiMAX
        NdisMediumIP
    '#endif

        NdisMediumMax               ' Not a real medium, defined As an upper-bound
    End Enum
    Public Enum NDIS_PHYSICAL_MEDIUM
        NdisPhysicalMediumUnspecified
        NdisPhysicalMediumWirelessLan
        NdisPhysicalMediumCableModem
        NdisPhysicalMediumPhoneLine
        NdisPhysicalMediumPowerLine
        NdisPhysicalMediumDSL      ' includes ADSL and UADSL (G.Lite)
        NdisPhysicalMediumFibreChannel
        NdisPhysicalMedium1394
        NdisPhysicalMediumWirelessWan
        NdisPhysicalMediumNative802_11
        NdisPhysicalMediumBluetooth
        NdisPhysicalMediumInfiniband
        NdisPhysicalMediumWiMax
        NdisPhysicalMediumUWB
        NdisPhysicalMedium802_3
        NdisPhysicalMedium802_5
        NdisPhysicalMediumIrda
        NdisPhysicalMediumWiredWAN
        NdisPhysicalMediumWiredCoWan
        NdisPhysicalMediumOther
        NdisPhysicalMediumNative802_15_4
        NdisPhysicalMediumMax ' Not a real physical type, defined as an upper-bound
    End Enum
    Public Type MIB_IF_ROW2
        ' Key structure.  Sorted by preference.
        InterfaceLuid As NET_LUID
        InterfaceIndex As Long 'NET_IFINDEX
        ' Read-Only fields.
        InterfaceGuid As UUID
        Alias(IF_MAX_STRING_SIZE) As Integer
        Description(IF_MAX_STRING_SIZE) As Integer
        PhysicalAddressLength As Long
        PhysicalAddress(0 To (IF_MAX_PHYS_ADDRESS_LENGTH - 1)) As Byte
        PermanentPhysicalAddress(0 To (IF_MAX_PHYS_ADDRESS_LENGTH - 1)) As Byte
        Mtu As Long
        Type As IFTYPE ' Interface Type.
        TunnelType As TUNNEL_TYPE ' Tunnel Type, if Type = IF_TUNNEL.
        MediaType As NDIS_MEDIUM
        PhysicalMediumType As NDIS_PHYSICAL_MEDIUM
        AccessType As NET_IF_ACCESS_TYPE
        DirectionType As NET_IF_DIRECTION_TYPE
        '    struct {
        '        BOOLEAN HardwareInterface : 1;
        '        BOOLEAN FilterInterface : 1;
        '        BOOLEAN ConnectorPresent : 1;
        '        BOOLEAN NotAuthenticated : 1;
        '        BOOLEAN NotMediaConnected : 1;
        '        BOOLEAN Paused : 1;
        '        BOOLEAN LowPower : 1;
        '        BOOLEAN EndPointInterface : 1;
        '    } InterfaceAndOperStatusFlags;
        InterfaceAndOperStatusFlags As Byte
        OperStatus As IF_OPER_STATUS
        AdminStatus As NET_IF_ADMIN_STATUS
        MediaConnectState As NET_IF_MEDIA_CONNECT_STATE
        NetworkGuid As UUID 'NET_IF_NETWORK_UUID
        ConnectionType As NET_IF_CONNECTION_TYPE
        ' Statistics.
        TransmitLinkSpeed As LongLong
        ReceiveLinkSpeed As LongLong
        InOctets As LongLong
        InUcastPkts As LongLong
        InNUcastPkts As LongLong
        InDiscards As LongLong
        InErrors As LongLong
        InUnknownProtos As LongLong
        InUcastOctets As LongLong
        InMulticastOctets As LongLong
        InBroadcastOctets As LongLong
        OutOctets As LongLong
        OutUcastPkts As LongLong
        OutNUcastPkts As LongLong
        OutDiscards As LongLong
        OutErrors As LongLong
        OutUcastOctets As LongLong
        OutMulticastOctets As LongLong
        OutBroadcastOctets As LongLong
        OutQLen As LongLong
    End Type
    
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_IF_TABLE2
        NumEntries As Long
        Table() As MIB_IF_ROW2
    End Type
    
    Public Declare PtrSafe Function GetIfEntry2 Lib "Iphlpapi" (Row As MIB_IF_ROW2) As Long
    
    Public Enum MIB_IF_ENTRY_LEVEL
        MibIfEntryNormal = 0
        MibIfEntryNormalWithoutStatistics = 2
    End Enum
    
    Public Declare PtrSafe Function GetIfEntry2Ex Lib "Iphlpapi" (ByVal Level As MIB_IF_ENTRY_LEVEL, Row As MIB_IF_ROW2) As Long
    Public Declare PtrSafe Function GetIfTable2 Lib "Iphlpapi" (Table As LongPtr) As Long
    
    Public Enum MIB_IF_TABLE_LEVEL
        MibIfTableNormal
        MibIfTableRaw
        '     #if (NTDDI_VERSION >= NTDDI_WIN10_RS2)
        MibIfTableNormalWithoutStatistics
        '     #endif
    End Enum
    Public Declare PtrSafe Function GetIfTable2Ex Lib "Iphlpapi" (ByVal Level As MIB_IF_TABLE_LEVEL, Table As LongPtr) As Long
    
    Public Enum SCOPE_LEVEL
        ScopeLevelInterface = 1
        ScopeLevelLink = 2
        ScopeLevelSubnet = 3
        ScopeLevelAdmin = 4
        ScopeLevelSite = 5
        ScopeLevelOrganization = 8
        ScopeLevelGlobal = 14
        ScopeLevelCount = 16
    End Enum
    
    Public Type MIB_IPINTERFACE_ROW
        ' Key Structure;
        /* [TypeHint(ADDRESS_FAMILIES)] */ Family As Integer 'ADDRESS_FAMILY
        InterfaceLuid As NET_LUID
        InterfaceIndex As Long 'NET_IFINDEX
        ' Read-Write fields.
        ' Fields currently not exposed.
        MaxReassemblySize As Long
        InterfaceIdentifier As LongLong
        MinRouterAdvertisementInterval As Long
        MaxRouterAdvertisementInterval As Long
        ' Fileds currently exposed.
        AdvertisingEnabled As Byte
        ForwardingEnabled As Byte
        WeakHostSend As Byte
        WeakHostReceive As Byte
        UseAutomaticMetric As Byte
        UseNeighborUnreachabilityDetection As Byte
        ManagedAddressConfigurationSupported As Byte
        OtherStatefulConfigurationSupported As Byte
        AdvertiseDefaultRoute As Byte
        RouterDiscoveryBehavior As NL_ROUTER_DISCOVERY_BEHAVIOR
        DadTransmits As Long ' DupAddrDetectTransmits in RFC 4862.
        BaseReachableTime As Long
        RetransmitTime As Long
        PathMtuDiscoveryTimeout As Long ' Path MTU discovery timeout (in ms).
        LinkLocalAddressBehavior As NL_LINK_LOCAL_ADDRESS_BEHAVIOR
        LinkLocalAddressTimeout As Long ' In ms.
        ZoneIndices(0 To (ScopeLevelCount - 1)) As Long ' Zone part of a SCOPE_ID.
        SitePrefixLength As Long
        Metric As Long
        NlMtu As Long
        ' Read Only fields.
        Connected As Byte
        SupportsWakeUpPatterns As Byte
        SupportsNeighborDiscovery As Byte
        SupportsRouterDiscovery As Byte
        ReachableTime As Long
        TransmitOffload As NL_INTERFACE_OFFLOAD_ROD
        ReceiveOffload As NL_INTERFACE_OFFLOAD_ROD
        ' Disables using default route on the interface. This flag
        ' can be used by VPN clients to restrict Split tunnelling.
        DisableDefaultRoutes As Byte
    End Type
    
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_IPINTERFACE_TABLE
        NumEntries As Long
        Table() As MIB_IPINTERFACE_ROW
    End Type
    
    Public Type MIB_IFSTACK_ROW
        HigherLayerInterfaceIndex As Long 'NET_IFINDEX
        LowerLayerInterfaceIndex As Long 'NET_IFINDEX
    End Type
    Public Type MIB_INVERTEDIFSTACK_ROW
        LowerLayerInterfaceIndex As Long 'NET_IFINDEX
        HigherLayerInterfaceIndex As Long 'NET_IFINDEX
    End Type
    
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_IFSTACK_TABLE
        NumEntries As Long
        Table() As MIB_IFSTACK_ROW
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_INVERTEDIFSTACK_TABLE
        NumEntries As Long
        Table() As MIB_INVERTEDIFSTACK_ROW
    End Type
    
    Public Type MIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES
        InboundBandwidthInformation As NL_BANDWIDTH_INFORMATION
        OutboundBandwidthInformation As NL_BANDWIDTH_INFORMATION
    End Type
    
    Public Declare PtrSafe Function GetIfStackTable Lib "Iphlpapi" (Table As LongPtr) As Long
    Public Declare PtrSafe Function GetInvertedIfStackTable Lib "Iphlpapi" (Table As LongPtr) As Long
    Public Declare PtrSafe Function GetIpInterfaceEntry Lib "Iphlpapi" (Row As MIB_IPINTERFACE_ROW) As Long
    Public Declare PtrSafe Function GetIpInterfaceTable Lib "Iphlpapi" ([TypeHint(ADDRESS_FAMILIES)] ByVal Family As Integer, Table As LongPtr) As Long
    Public Declare PtrSafe Sub InitializeIpInterfaceEntry Lib "Iphlpapi" (Row As MIB_IPINTERFACE_ROW)
    Public Declare PtrSafe Function NotifyIpInterfaceChange Lib "Iphlpapi" ([TypeHint(ADDRESS_FAMILIES)] ByVal Family As Integer, ByVal Callback As LongPtr, ByVal CallerContext As LongPtr, ByVal InitialNotification As Byte, NotificationHandle As LongPtr) As Long
    Public Declare PtrSafe Function SetIpInterfaceEntry Lib "Iphlpapi" (Row As MIB_IPINTERFACE_ROW) As Long
    Public Declare PtrSafe Function GetIpNetworkConnectionBandwidthEstimates Lib "Iphlpapi" (ByVal InterfaceIndex As Long, [TypeHint(ADDRESS_FAMILIES)] ByVal AddressFamily As Integer, BandwidthEstimates As MIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES) As Long
    
    ' typedef union _SOCKADDR_INET {
    ' SOCKADDR_IN Ipv4;
    ' SOCKADDR_IN6 Ipv6;
    ' ADDRESS_FAMILY si_family;
' } SOCKADDR_INET, *PSOCKADDR_INET;
    Public Type SOCKADDR_INET
        u(27) As Byte
    End Type
    
    Public Type MIB_UNICASTIPADDRESS_ROW
        ' Key Structure.
        Address As SOCKADDR_INET
        InterfaceLuid As NET_LUID
        InterfaceIndex As Long 'NET_IFINDEX
        ' Read-Write Fileds.
        PrefixOrigin As NL_PREFIX_ORIGIN
        SuffixOrigin As NL_SUFFIX_ORIGIN
        ValidLifetime As Long
        PreferredLifetime As Long
        OnLinkPrefixLength As Byte 'UINT8
        SkipAsSource As Byte
        ' Read-Only Fields.
        DadState As NL_DAD_STATE
        ScopeId As Long 'SCOPE_ID
        CreationTimeStamp As LARGE_INTEGER
    End Type
    
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_UNICASTIPADDRESS_TABLE
        NumEntries As Long
        Table() As MIB_UNICASTIPADDRESS_ROW
    End Type
    
    Public Declare PtrSafe Function CreateUnicastIpAddressEntry Lib "Iphlpapi" (Row As MIB_UNICASTIPADDRESS_ROW) As Long
    Public Declare PtrSafe Function DeleteUnicastIpAddressEntry Lib "Iphlpapi" (Row As MIB_UNICASTIPADDRESS_ROW) As Long
    Public Declare PtrSafe Function GetUnicastIpAddressEntry Lib "Iphlpapi" (Row As MIB_UNICASTIPADDRESS_ROW) As Long
    Public Declare PtrSafe Function GetUnicastIpAddressTable Lib "Iphlpapi" ([TypeHint(ADDRESS_FAMILIES)] ByVal Family As Integer, Table As LongPtr) As Long
    Public Declare PtrSafe Sub InitializeUnicastIpAddressEntry Lib "Iphlpapi" (Row As MIB_UNICASTIPADDRESS_ROW)
    Public Declare PtrSafe Function NotifyUnicastIpAddressChange Lib "Iphlpapi" ([TypeHint(ADDRESS_FAMILIES)] ByVal Family As Integer, ByVal Callback As LongPtr, ByVal CallerContext As LongPtr, ByVal InitialNotification As Byte, NotificationHandle As LongPtr) As Long
    Public Declare PtrSafe Function NotifyStableUnicastIpAddressTable Lib "Iphlpapi" ([TypeHint(ADDRESS_FAMILIES)] ByVal Family As Integer, Table As LongPtr, ByVal CallerCallback As LongPtr, ByVal CallerContext As LongPtr, NotificationHandle As LongPtr) As Long
    Public Declare PtrSafe Function SetUnicastIpAddressEntry Lib "Iphlpapi" (Row As MIB_UNICASTIPADDRESS_ROW) As Long
    
    Public Type MIB_ANYCASTIPADDRESS_ROW
        ' Key Structure.
        Address As SOCKADDR_INET
        InterfaceLuid As NET_LUID
        InterfaceIndex As Long 'NET_IFINDEX
        ' Read-Only Fields.
        ScopeId As Long 'SCOPE_ID
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_ANYCASTIPADDRESS_TABLE
        NumEntries As Long
        Table() As MIB_ANYCASTIPADDRESS_ROW
    End Type
    
    Public Declare PtrSafe Function CreateAnycastIpAddressEntry Lib "Iphlpapi" (Row As MIB_ANYCASTIPADDRESS_ROW) As Long
    Public Declare PtrSafe Function DeleteAnycastIpAddressEntry Lib "Iphlpapi" (Row As MIB_ANYCASTIPADDRESS_ROW) As Long
    Public Declare PtrSafe Function GetAnycastIpAddressEntry Lib "Iphlpapi" (Row As MIB_ANYCASTIPADDRESS_ROW) As Long
    Public Declare PtrSafe Function GetAnycastIpAddressTable Lib "Iphlpapi" ([TypeHint(ADDRESS_FAMILIES)] ByVal Family As Integer, Table As LongPtr) As Long
    
    Public Type MIB_MULTICASTIPADDRESS_ROW
        ' Key Structure.
        Address As SOCKADDR_INET
        InterfaceIndex As Long 'NET_IFINDEX
        InterfaceLuid As NET_LUID
        ' Read-Only Fields.
        ScopeId As Long 'SCOPE_ID
    End Type
    
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_MULTICASTIPADDRESS_TABLE
        NumEntries As Long
        Table() As MIB_MULTICASTIPADDRESS_ROW
    End Type
    
    Public Declare PtrSafe Function GetMulticastIpAddressEntry Lib "Iphlpapi" (Row As MIB_MULTICASTIPADDRESS_ROW) As Long
    Public Declare PtrSafe Function GetMulticastIpAddressTable Lib "Iphlpapi" ([TypeHint(ADDRESS_FAMILIES)] ByVal Family As Integer, Table As LongPtr) As Long
    
    Public Type IP_ADDRESS_PREFIX
        Prefix As SOCKADDR_INET
        PrefixLength As Byte 'UINT8
    End Type
    
    Public Type MIB_IPFORWARD_ROW2
        ' Key Structure.
        InterfaceLuid As NET_LUID
        InterfaceIndex As Long 'NET_IFINDEX
        DestinationPrefix As IP_ADDRESS_PREFIX
        NextHop As SOCKADDR_INET
        ' Read-Write Fields.
        SitePrefixLength As Byte
        ValidLifetime As Long
        PreferredLifetime As Long
        Metric As Long
        Protocol As NL_ROUTE_PROTOCOL
        Loopback As Byte
        AutoconfigureAddress As Byte
        Publish As Byte
        Immortal As Byte
        ' Read-Only Fields.
        Age As Long
        Origin As NL_ROUTE_ORIGIN
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_IPFORWARD_TABLE2
        NumEntries As Long
        Table() As MIB_IPFORWARD_ROW2
    End Type
    
    Public Type MIB_IPPATH_ROW
        ' Key.
        Source As SOCKADDR_INET
        Destination As SOCKADDR_INET
        InterfaceLuid As NET_LUID
        InterfaceIndex As Long 'NET_IFINDEX
        ' RO.
        ' The current next hop.  This can change over the lifetime of a path.
        CurrentNextHop As SOCKADDR_INET
        ' MTU of path to destination. Includes the IP header length.
        PathMtu As Long
        ' Estimated mean RTT.
        RttMean As Long
        ' Mean deviation of RTT.
        RttDeviation As Long
        '    union {
        '        ULONG LastReachable;    // Milliseconds.
        '        ULONG LastUnreachable;  // Milliseconds.
        '    };
        LastReachableOrUnreachable As Long
        IsReachable As Byte
        ' Estimated speed.
        LinkTransmitSpeed As LongLong
        LinkReceiveSpeed As LongLong
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is. For receiving data only. Copy first 4 bytes, redim properly, copy to VarPtr(table(0))")]
    Public Type MIB_IPPATH_TABLE
        NumEntries As Long
        Table() As MIB_IPPATH_ROW
    End Type
    
    Public Declare PtrSafe Function CreateIpForwardEntry2 Lib "Iphlpapi" (Row As MIB_IPFORWARD_ROW2) As Long
    Public Declare PtrSafe Function DeleteIpForwardEntry2 Lib "Iphlpapi" (Row As MIB_IPFORWARD_ROW2) As Long
    Public Declare PtrSafe Function GetBestRoute2 Lib "Iphlpapi" (InterfaceLuid As NET_LUID, ByVal InterfaceIndex As Long, SourceAddress As SOCKADDR_INET, ByVal AddressSortOptions As Long, BestRoute As MIB_IPFORWARD_ROW2, BestSourceAddress As SOCKADDR_INET) As Long
    Public Declare PtrSafe Function GetIpForwardEntry2 Lib "Iphlpapi" (Row As MIB_IPFORWARD_ROW2) As Long
    Public Declare PtrSafe Function GetIpForwardTable2 Lib "Iphlpapi" ([TypeHint(ADDRESS_FAMILIES)] ByVal Family As Integer, Table As LongPtr) As Long
    Public Declare PtrSafe Sub InitializeIpForwardEntry Lib "Iphlpapi" (Row As MIB_IPFORWARD_ROW2)
    Public Declare PtrSafe Function NotifyRouteChange2 Lib "Iphlpapi" ([TypeHint(ADDRESS_FAMILIES)] ByVal Family As Integer, ByVal Callback As LongPtr, ByVal CallerContext As LongPtr, ByVal InitialNotification As Byte, NotificationHandle As LongPtr) As Long
    Public Declare PtrSafe Function SetIpForwardEntry2 Lib "Iphlpapi" (Row As MIB_IPFORWARD_ROW2) As Long
    Public Declare PtrSafe Function FlushIpPathTable Lib "Iphlpapi" ([TypeHint(ADDRESS_FAMILIES)] ByVal Family As Integer) As Long
    Public Declare PtrSafe Function GetIpPathEntry Lib "Iphlpapi" (Row As MIB_IPPATH_ROW) As Long
    Public Declare PtrSafe Function GetIpPathTable Lib "Iphlpapi" ([TypeHint(ADDRESS_FAMILIES)] ByVal Family As Integer, Table As LongPtr) As Long
    
    Public Type MIB_IPNET_ROW2
        ' Key Struture.
        Address As SOCKADDR_INET
        InterfaceIndex As Long 'NET_IFINDEX
        InterfaceLuid As NET_LUID
        ' Read-Write.
        PhysicalAddress(0 To (IF_MAX_PHYS_ADDRESS_LENGTH - 1)) As Byte
        ' Read-Only.
        PhysicalAddressLength As Long
        State As NL_NEIGHBOR_STATE
        '   union {
        '       struct {
        '           BOOLEAN IsRouter : 1;
        '           BOOLEAN IsUnreachable : 1;
        '       };
        Flags As Byte
        '    };
        '    union {
        '        ULONG LastReachable;
        '        ULONG LastUnreachable;
        '    } ReachabilityTime;
        ReachabilityTime As Long
    End Type
    Public Type MIB_IPNET_TABLE2
        NumEntries As Long
        Table() As MIB_IPNET_ROW2
    End Type
    
    Public Declare PtrSafe Function CreateIpNetEntry2 Lib "Iphlpapi" (Row As MIB_IPNET_ROW2) As Long
    Public Declare PtrSafe Function DeleteIpNetEntry2 Lib "Iphlpapi" (Row As MIB_IPNET_ROW2) As Long
    Public Declare PtrSafe Function FlushIpNetTable2 Lib "Iphlpapi" ([TypeHint(ADDRESS_FAMILIES)] ByVal Family As Integer, ByVal InterfaceIndex As Long) As Long
    Public Declare PtrSafe Function GetIpNetEntry2 Lib "Iphlpapi" (Row As MIB_IPNET_ROW2) As Long
    Public Declare PtrSafe Function GetIpNetTable2 Lib "Iphlpapi" ([TypeHint(ADDRESS_FAMILIES)] ByVal Family As Integer, Table As LongPtr) As Long
    Public Declare PtrSafe Function ResolveIpNetEntry2 Lib "Iphlpapi" (Row As MIB_IPNET_ROW2, SourceAddress As SOCKADDR_INET) As Long
    Public Declare PtrSafe Function SetIpNetEntry2 Lib "Iphlpapi" (Row As MIB_IPNET_ROW2) As Long
    
    Public Const MIB_INVALID_TEREDO_PORT_NUMBER = 0
    
    Public Declare PtrSafe Function NotifyTeredoPortChange Lib "Iphlpapi" (ByVal Callback As LongPtr, ByVal CallerContext As LongPtr, ByVal InitialNotification As Byte, NotificationHandle As LongPtr) As Long
    Public Declare PtrSafe Function GetTeredoPort Lib "Iphlpapi" (Port As Integer) As Long
    
    Public Declare PtrSafe Function CancelMibChangeNotify2 Lib "Iphlpapi" (ByVal NotificationHandle As LongPtr) As Long
    Public Declare PtrSafe Sub FreeMibTable Lib "Iphlpapi" (ByVal Memory As LongPtr)
    Public Declare PtrSafe Function CreateSortedAddressPairs Lib "Iphlpapi" (SourceAddressList As SOCKADDR_IN6, ByVal SourceAddressCount As Long, DestinationAddressList As SOCKADDR_IN6, ByVal DestinationAddressCount As Long, ByVal AddressSortOptions As Long, SortedAddressPairList As LongPtr, SortedAddressPairCount As Long) As Long
    Public Declare PtrSafe Function ConvertCompartmentGuidToId Lib "Iphlpapi" (CompartmentGuid As UUID, CompartmentId As Long) As Long
    Public Declare PtrSafe Function ConvertCompartmentIdToGuid Lib "Iphlpapi" (ByVal CompartmentId As Long, CompartmentGuid As UUID) As Long
    Public Declare PtrSafe Function ConvertInterfaceNameToLuidA Lib "Iphlpapi" (ByVal InterfaceName As String, InterfaceLuid As NET_LUID) As Long
    Public Declare PtrSafe Function ConvertInterfaceNameToLuidW Lib "Iphlpapi" (ByVal InterfaceName As LongPtr, InterfaceLuid As NET_LUID) As Long
    Public DeclareWide PtrSafe Function ConvertInterfaceNameToLuid Lib "Iphlpapi" Alias "ConvertInterfaceNameToLuidW" (ByVal InterfaceName As String, InterfaceLuid As NET_LUID) As Long
    Public Declare PtrSafe Function ConvertInterfaceLuidToNameA Lib "Iphlpapi" (InterfaceLuid As NET_LUID, ByVal InterfaceName As String, ByVal Length As LongPtr) As Long
    Public Declare PtrSafe Function ConvertInterfaceLuidToNameW Lib "Iphlpapi" (InterfaceLuid As NET_LUID, ByVal InterfaceName As LongPtr, ByVal Length As LongPtr) As Long
    Public DeclareWide PtrSafe Function ConvertInterfaceLuidToName Lib "Iphlpapi" Alias "ConvertInterfaceLuidToNameW" (InterfaceLuid As NET_LUID, ByVal InterfaceName As String, ByVal Length As LongPtr) As Long
    Public Declare PtrSafe Function ConvertInterfaceLuidToIndex Lib "Iphlpapi" (InterfaceLuid As NET_LUID, InterfaceIndex As Long) As Long
    Public Declare PtrSafe Function ConvertInterfaceIndexToLuid Lib "Iphlpapi" (ByVal InterfaceIndex As Long, InterfaceLuid As NET_LUID) As Long
    Public DeclareWide PtrSafe Function ConvertInterfaceLuidToAlias Lib "Iphlpapi" (InterfaceLuid As NET_LUID, ByVal InterfaceAlias As String, ByVal Length As LongPtr) As Long
    Public DeclareWide PtrSafe Function ConvertInterfaceAliasToLuid Lib "Iphlpapi" (ByVal InterfaceAlias As String, InterfaceLuid As NET_LUID) As Long
    Public Declare PtrSafe Function ConvertInterfaceLuidToGuid Lib "Iphlpapi" (InterfaceLuid As NET_LUID, InterfaceGuid As UUID) As Long
    Public Declare PtrSafe Function ConvertInterfaceGuidToLuid Lib "Iphlpapi" (InterfaceGuid As UUID, InterfaceLuid As NET_LUID) As Long
    Public Declare PtrSafe Function if_nametoindex Lib "Iphlpapi" (ByVal InterfaceName As String) As Long
    Public Declare PtrSafe Function if_indextoname Lib "Iphlpapi" (ByVal InterfaceIndex As Long, ByVal InterfaceName As String) As Long
    Public Declare PtrSafe Function GetCurrentThreadCompartmentId Lib "Iphlpapi" () As Long
    Public Declare PtrSafe Function SetCurrentThreadCompartmentId Lib "Iphlpapi" (ByVal CompartmentId As Long) As Long
    Public Declare PtrSafe Sub GetCurrentThreadCompartmentScope Lib "Iphlpapi" (CompartmentScope As NET_IF_COMPARTMENT_SCOPE, CompartmentId As Long)
    Public Declare PtrSafe Function SetCurrentThreadCompartmentScope Lib "Iphlpapi" (ByVal CompartmentScope As NET_IF_COMPARTMENT_SCOPE) As Long
    Public Declare PtrSafe Function GetJobCompartmentId Lib "Iphlpapi" (ByVal JobHandle As LongPtr) As Long
    Public Declare PtrSafe Function SetJobCompartmentId Lib "Iphlpapi" (ByVal JobHandle As LongPtr, ByVal CompartmentId As Long) As Long
    Public Declare PtrSafe Function GetSessionCompartmentId Lib "Iphlpapi" (ByVal SessionId As Long) As Long
    Public Declare PtrSafe Function SetSessionCompartmentId Lib "Iphlpapi" (ByVal SessionId As Long, ByVal CompartmentId As Long) As Long
    Public Declare PtrSafe Function GetDefaultCompartmentId Lib "Iphlpapi" () As Long
    Public DeclareWide PtrSafe Function GetNetworkInformation Lib "Iphlpapi" (NetworkGuid As UUID, CompartmentId As Long, SiteId As Long, ByVal NetworkName As String, ByVal Length As Long) As Long
    Public DeclareWide PtrSafe Function SetNetworkInformation Lib "Iphlpapi" (NetworkGuid As UUID, ByVal CompartmentId As Long, ByVal NetworkName As String) As Long
    Public Declare PtrSafe Function ConvertLengthToIpv4Mask Lib "Iphlpapi" (ByVal MaskLength As Long, Mask As Long) As Long
    Public Declare PtrSafe Function ConvertIpv4MaskToLength Lib "Iphlpapi" (ByVal Mask As Long, MaskLength As Byte) As Long
    
    Public Enum IphlpDnsSettingsVersions
        DNS_SETTINGS_VERSION1 = &H0001
        DNS_SETTINGS_VERSION2 = &H0002
    End Enum
    Public Enum IphlpDnsIfaceSettingsVersions
        DNS_INTERFACE_SETTINGS_VERSION1 = &H0001
        DNS_INTERFACE_SETTINGS_VERSION2 = &H0002
        DNS_INTERFACE_SETTINGS_VERSION3 = &H0003
        DNS_INTERFACE_SETTINGS_VERSION4 = &H0004
    End Enum
    Public Enum IphlpDnsSettings
        DNS_SETTING_IPV6 = &H0001
        DNS_SETTING_NAMESERVER = &H0002
        DNS_SETTING_SEARCHLIST = &H0004
        DNS_SETTING_REGISTRATION_ENABLED = &H0008
        DNS_SETTING_REGISTER_ADAPTER_NAME = &H0010
        DNS_SETTING_DOMAIN = &H0020
        DNS_SETTING_HOSTNAME = &H0040
        DNS_SETTINGS_ENABLE_LLMNR = &H0080
        DNS_SETTINGS_QUERY_ADAPTER_NAME = &H0100
        DNS_SETTING_PROFILE_NAMESERVER = &H0200
        DNS_SETTING_DISABLE_UNCONSTRAINED_QUERIES = &H0400
        DNS_SETTING_SUPPLEMENTAL_SEARCH_LIST = &H0800
        DNS_SETTING_DOH = &H1000
        DNS_SETTING_DOH_PROFILE = &H2000
        DNS_SETTING_ENCRYPTED_DNS_ADAPTER_FLAGS = &H4000
        DNS_SETTING_DDR = &H8000&
        DNS_SETTING_DOT = &H10000
        DNS_SETTING_DOT_PROFILE = &H20000
    End Enum
    Public Enum IphlpDnsDohFlags
        DNS_ENABLE_DOH = &H0001
    End Enum
    Public Enum IphlpDnsDohPolicyFlags
        DNS_DOH_POLICY_NOT_CONFIGURED = &H0004
        DNS_DOH_POLICY_DISABLE = &H0008
        DNS_DOH_POLICY_AUTO = &H0010
        DNS_DOH_POLICY_REQUIRED = &H0020
        DNS_ENCRYPTION_POLICY_NOT_CONFIGURED = DNS_DOH_POLICY_NOT_CONFIGURED
        DNS_ENCRYPTION_POLICY_DISABLE = DNS_DOH_POLICY_DISABLE
        DNS_ENCRYPTION_POLICY_AUTO = DNS_DOH_POLICY_AUTO
        DNS_ENCRYPTION_POLICY_REQUIRED = DNS_DOH_POLICY_REQUIRED
        DNS_ENABLE_DDR = &H0040
        DNS_ENABLE_DOT = &H0080
        DNS_DOT_POLICY_BLOCK = &H0100
        DNS_DOH_POLICY_BLOCK = &H0200
    End Enum
    Public Enum IphlpDnsServerVersions
        DNS_SERVER_PROPERTY_VERSION1 = 1
    End Enum
    Public Enum IphlpDnsDohServerSettings
        DNS_DOH_SERVER_SETTINGS_ENABLE_AUTO = &H0001
        DNS_DOH_SERVER_SETTINGS_ENABLE = &H0002
        DNS_DOH_SERVER_SETTINGS_FALLBACK_TO_UDP = &H0004
        DNS_DOH_AUTO_UPGRADE_SERVER = &H0008
        DNS_DOH_SERVER_SETTINGS_ENABLE_DDR = &H0010
    End Enum
    Public Enum IphlpDnsDotServerSettings
        DNS_DOT_SERVER_SETTINGS_ENABLE = &H0001
        DNS_DOT_SERVER_SETTINGS_FALLBACK_TO_UDP = &H0002
        DNS_DOT_AUTO_UPGRADE_SERVER = &H0004
        DNS_DOT_SERVER_SETTINGS_ENABLE_AUTO = &H0008
        DNS_DOT_SERVER_SETTINGS_ENABLE_DDR = &H0010
    End Enum
    Public Enum IphlpDnsDdrAdapterFlags
        DNS_DDR_ADAPTER_ENABLE_DOH = &H0001
        DNS_DDR_ADAPTER_ENABLE = DNS_DDR_ADAPTER_ENABLE_DOH
        DNS_DDR_ADAPTER_ENABLE_UDP_FALLBACK = &H0002
    End Enum
    
    Public Type DNS_SETTINGS
        Version As Long
        Flags As LongLong
        Hostname As LongPtr
        Domain As LongPtr
        SearchList As LongPtr
    End Type
    Public Type DNS_SETTINGS2
        Version As Long
        Flags As LongLong
        Hostname As LongPtr
        Domain As LongPtr
        SearchList As LongPtr
        SettingFlags As LongLong
    End Type
    
    Public Type DNS_DOH_SERVER_SETTINGS
        Template As LongPtr
        /* [TypeHint(IphlpDnsDohServerSettings)] */ Flags As LongLong
    End Type
    Public Type DNS_DOT_SERVER_SETTINGS
        Hostname As LongPtr
        /* [TypeHint(IphlpDnsDotServerSettings)] */ Flags As LongLong
        Port As Integer
    End Type
    
    Public Enum DNS_SERVER_PROPERTY_TYPE
        DnsServerInvalidProperty = 0
        DnsServerDohProperty
        DnsServerDotProperty
    End Enum
    
    ' typedef union _DNS_SERVER_PROPERTY_TYPES
    ' {
        ' DNS_DOH_SERVER_SETTINGS *DohSettings;
        ' DNS_DOT_SERVER_SETTINGS *DotSettings;
    ' } DNS_SERVER_PROPERTY_TYPES;
    Public Type DNS_SERVER_PROPERTY_TYPES
        DohOrDnsSettings As LongPtr
    End Type
    
    Public Type DNS_SERVER_PROPERTY
        Version As IphlpDnsIfaceSettingsVersions
        ServerIndex As Long
        Type As DNS_SERVER_PROPERTY_TYPE
        Property As DNS_SERVER_PROPERTY_TYPES
    End Type
    
    Public Type DNS_INTERFACE_SETTINGS
        Version As IphlpDnsIfaceSettingsVersions
        /* [TypeHint(IphlpDnsSettings)] */ Flags As LongLong
        Domain As LongPtr
        NameServer As LongPtr
        SearchList As LongPtr
        RegistrationEnabled As Long
        RegisterAdapterName As Long
        EnableLLMNR As Long
        QueryAdapterName As Long
        ProfileNameServer As LongPtr
    End Type
    Public Type DNS_INTERFACE_SETTINGS_EX
        SettingsV1 As DNS_INTERFACE_SETTINGS
        DisableUnconstrainedQueries As Long
        SupplementalSearchList As LongPtr
    End Type
    Public Type DNS_INTERFACE_SETTINGS3
        Version As IphlpDnsIfaceSettingsVersions
        /* [TypeHint(IphlpDnsSettings)] */ Flags As LongLong
        Domain As LongPtr
        NameServer As LongPtr
        SearchList As LongPtr
        RegistrationEnabled As Long
        RegisterAdapterName As Long
        EnableLLMNR As Long
        QueryAdapterName As Long
        ProfileNameServer As LongPtr
        DisableUnconstrainedQueries As Long
        SupplementalSearchList As LongPtr
        cServerProperties As Long
        ServerProperties As LongPtr '*DNS_SERVER_PROPERTY
        cProfileServerProperties As Long
        ProfileServerProperties As LongPtr 'DNS_SERVER_PROPERTY
    End Type
    Public Type DNS_INTERFACE_SETTINGS4
        Version As IphlpDnsIfaceSettingsVersions
        /* [TypeHint(IphlpDnsSettings)] */ Flags As LongLong
        Domain As LongPtr
        NameServer As LongPtr
        SearchList As LongPtr
        RegistrationEnabled As Long
        RegisterAdapterName As Long
        EnableLLMNR As Long
        QueryAdapterName As Long
        ProfileNameServer As LongPtr
        DisableUnconstrainedQueries As Long
        SupplementalSearchList As LongPtr
        cServerProperties As Long
        ServerProperties As LongPtr '*DNS_SERVER_PROPERTY
        cProfileServerProperties As Long
        ProfileServerProperties As LongPtr '*DNS_SERVER_PROPERTY
        EncryptedDnsAdapterFlags As Long
    End Type
    
    
    Public Declare PtrSafe Function GetDnsSettings Lib "Iphlpapi" (Settings As Any) As Long
    Public Declare PtrSafe Function FreeDnsSettings Lib "Iphlpapi" (Settings As Any) As Long
    Public Declare PtrSafe Function SetDnsSettings Lib "Iphlpapi" (Settings As Any) As Long
    #If Win64 Then
    Public Declare PtrSafe Function GetInterfaceDnsSettings Lib "Iphlpapi" (Interface As UUID, Settings As Any) As Long
    Public Declare PtrSafe Function SetInterfaceDnsSettings Lib "Iphlpapi" (Interface As UUID, Settings As Any) As Long
    #Else
    Public Declare PtrSafe Function GetInterfaceDnsSettings Lib "Iphlpapi" (ByVal Interface1 As Long, ByVal Interface2 As Long, ByVal Interface3 As Long, ByVal Interface4 As Long, Settings As Any) As Long
    Public Declare PtrSafe Function SetInterfaceDnsSettings Lib "Iphlpapi" (ByVal Interface1 As Long, ByVal Interface2 As Long, ByVal Interface3 As Long, ByVal Interface4 As Long, Settings As Any) As Long
    #End If
    Public Declare PtrSafe Sub FreeInterfaceDnsSettings Lib "Iphlpapi" (Settings As Any)
    Public Declare PtrSafe Function GetNetworkConnectivityHint Lib "Iphlpapi" (ConnectivityHint As NL_NETWORK_CONNECTIVITY_HINT) As Long
    Public Declare PtrSafe Function GetNetworkConnectivityHintForInterface Lib "Iphlpapi" (ByVal InterfaceIndex As Long, ConnectivityHint As NL_NETWORK_CONNECTIVITY_HINT) As Long
    Public Declare PtrSafe Function NotifyNetworkConnectivityHintChange Lib "Iphlpapi" (ByVal Callback As LongPtr, ByVal CallerContext As LongPtr, ByVal InitialNotification As Byte, NotificationHandle As LongPtr) As Long
    
    
    
    /*

    I really don't know which to support (If Win10 21H1, ElseIf Win10 1809/Redstone 5) so I'm leaving the following unfinished for now:
If
    ' #If (NTDDI_VERSION >= NTDDI_WIN10_FE)

    typedef struct _INTERFACE_HARDWARE_TIMESTAMP_CAPABILITIES
    {
        BOOLEAN PtpV2OverUdpIPv4EventMessageReceive;
        BOOLEAN PtpV2OverUdpIPv4AllMessageReceive;
        BOOLEAN PtpV2OverUdpIPv4EventMessageTransmit;
        BOOLEAN PtpV2OverUdpIPv4AllMessageTransmit;
        BOOLEAN PtpV2OverUdpIPv6EventMessageReceive;
        BOOLEAN PtpV2OverUdpIPv6AllMessageReceive;
        BOOLEAN PtpV2OverUdpIPv6EventMessageTransmit;
        BOOLEAN PtpV2OverUdpIPv6AllMessageTransmit;
        BOOLEAN AllReceive;
        BOOLEAN AllTransmit;
        BOOLEAN TaggedTransmit;
    } INTERFACE_HARDWARE_TIMESTAMP_CAPABILITIES, *PINTERFACE_HARDWARE_TIMESTAMP_CAPABILITIES;

    typedef struct _INTERFACE_SOFTWARE_TIMESTAMP_CAPABILITIES
    {
        BOOLEAN AllReceive;
        BOOLEAN AllTransmit;
        BOOLEAN TaggedTransmit;
    } INTERFACE_SOFTWARE_TIMESTAMP_CAPABILITIES, *PINTERFACE_SOFTWARE_TIMESTAMP_CAPABILITIES;

    typedef struct _INTERFACE_TIMESTAMP_CAPABILITIES
    {
        ULONG64 HardwareClockFrequencyHz;
        BOOLEAN SupportsCrossTimestamp;
        INTERFACE_HARDWARE_TIMESTAMP_CAPABILITIES HardwareCapabilities;
        INTERFACE_SOFTWARE_TIMESTAMP_CAPABILITIES SoftwareCapabilities;
    } INTERFACE_TIMESTAMP_CAPABILITIES, *PINTERFACE_TIMESTAMP_CAPABILITIES;

    typedef struct _INTERFACE_HARDWARE_CROSSTIMESTAMP
    {
        ULONG64 SystemTimestamp1;
        ULONG64 HardwareClockTimestamp;
        ULONG64 SystemTimestamp2;
    } INTERFACE_HARDWARE_CROSSTIMESTAMP, *PINTERFACE_HARDWARE_CROSSTIMESTAMP;

    DECLARE_HANDLE(HIFTIMESTAMPCHANGE);

    IPHLPAPI_DLL_LINKAGE
    DWORD
    WINAPI
    GetInterfaceActiveTimestampCapabilities(
        _In_ CONST NET_LUID *InterfaceLuid,
        _Out_ PINTERFACE_TIMESTAMP_CAPABILITIES TimestampCapabilites
        );

    IPHLPAPI_DLL_LINKAGE
    DWORD
    WINAPI
    GetInterfaceSupportedTimestampCapabilities(
        _In_ CONST NET_LUID *InterfaceLuid,
        _Out_ PINTERFACE_TIMESTAMP_CAPABILITIES TimestampCapabilites
        );

    IPHLPAPI_DLL_LINKAGE
    DWORD
    WINAPI
    CaptureInterfaceHardwareCrossTimestamp(
        _In_ CONST NET_LUID *InterfaceLuid,
        _Inout_ PINTERFACE_HARDWARE_CROSSTIMESTAMP CrossTimestamp
        );

    typedef
    VOID
    CALLBACK
    INTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK(
        _In_ PVOID CallerContext
        );

    typedef
    INTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK *PINTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK;

    IPHLPAPI_DLL_LINKAGE
    DWORD
    WINAPI
    RegisterInterfaceTimestampConfigChange(
        _In_ PINTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK Callback,
        _In_opt_ PVOID CallerContext,
        _Out_ HIFTIMESTAMPCHANGE *NotificationHandle
        );

    IPHLPAPI_DLL_LINKAGE
    VOID
    WINAPI
    UnregisterInterfaceTimestampConfigChange(
        _In_ HIFTIMESTAMPCHANGE NotificationHandle
        );

    IPHLPAPI_DLL_LINKAGE
    DWORD
    WINAPI
    GetInterfaceCurrentTimestampCapabilities(
        _In_ CONST NET_LUID *InterfaceLuid,
        _Inout_ PINTERFACE_TIMESTAMP_CAPABILITIES TimestampCapabilites
        );

    IPHLPAPI_DLL_LINKAGE
    DWORD
    WINAPI
    GetInterfaceHardwareTimestampCapabilities(
        _In_ CONST NET_LUID *InterfaceLuid,
        _Inout_ PINTERFACE_TIMESTAMP_CAPABILITIES TimestampCapabilites
        );

    IPHLPAPI_DLL_LINKAGE
    DWORD
    WINAPI
    NotifyIfTimestampConfigChange(
        _In_opt_ PVOID CallerContext,
        _In_ PINTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK Callback,
        _Out_ HIFTIMESTAMPCHANGE *NotificationHandle
        );

    IPHLPAPI_DLL_LINKAGE
    VOID
    WINAPI
    CancelIfTimestampConfigChange(
        _In_ HIFTIMESTAMPCHANGE NotificationHandle
        );

    #elif (NTDDI_VERSION >= NTDDI_WIN10_RS5)

    #define INTERFACE_TIMESTAMP_CAPABILITIES_VERSION_1 0x01
    #define INTERFACE_HARDWARE_CROSSTIMESTAMP_VERSION_1 0x01

    typedef struct _INTERFACE_TIMESTAMP_CAPABILITY_FLAGS
    {
        BOOLEAN PtpV2OverUdpIPv4EventMsgReceiveHw;
        BOOLEAN PtpV2OverUdpIPv4AllMsgReceiveHw;
        BOOLEAN PtpV2OverUdpIPv4EventMsgTransmitHw;
        BOOLEAN PtpV2OverUdpIPv4AllMsgTransmitHw;
        BOOLEAN PtpV2OverUdpIPv6EventMsgReceiveHw;
        BOOLEAN PtpV2OverUdpIPv6AllMsgReceiveHw;
        BOOLEAN PtpV2OverUdpIPv6EventMsgTransmitHw;
        BOOLEAN PtpV2OverUdpIPv6AllMsgTransmitHw;
        BOOLEAN AllReceiveHw;
        BOOLEAN AllTransmitHw;
        BOOLEAN TaggedTransmitHw;
        BOOLEAN AllReceiveSw;
        BOOLEAN AllTransmitSw;
        BOOLEAN TaggedTransmitSw;

    } INTERFACE_TIMESTAMP_CAPABILITY_FLAGS, *PINTERFACE_TIMESTAMP_CAPABILITY_FLAGS;

    typedef struct _INTERFACE_TIMESTAMP_CAPABILITIES
    {
        ULONG Version;
        ULONG64 HardwareClockFrequencyHz;
        BOOLEAN CrossTimestamp;
        ULONG64 Reserved1;
        ULONG64 Reserved2;
        INTERFACE_TIMESTAMP_CAPABILITY_FLAGS TimestampFlags;
    } INTERFACE_TIMESTAMP_CAPABILITIES, *PINTERFACE_TIMESTAMP_CAPABILITIES;

    typedef struct _INTERFACE_HARDWARE_CROSSTIMESTAMP
    {
        ULONG Version;
        ULONG Flags;
        ULONG64 SystemTimestamp1;
        ULONG64 HardwareClockTimestamp;
        ULONG64 SystemTimestamp2;

    } INTERFACE_HARDWARE_CROSSTIMESTAMP, *PINTERFACE_HARDWARE_CROSSTIMESTAMP;

    DECLARE_HANDLE(HIFTIMESTAMPCHANGE);

    IPHLPAPI_DLL_LINKAGE
    DWORD
    WINAPI
    GetInterfaceCurrentTimestampCapabilities(
        _In_ CONST NET_LUID *InterfaceLuid,
        _Inout_ PINTERFACE_TIMESTAMP_CAPABILITIES TimestampCapabilites
        );

    IPHLPAPI_DLL_LINKAGE
    DWORD
    WINAPI
    GetInterfaceHardwareTimestampCapabilities(
        _In_ CONST NET_LUID *InterfaceLuid,
        _Inout_ PINTERFACE_TIMESTAMP_CAPABILITIES TimestampCapabilites
        );

    IPHLPAPI_DLL_LINKAGE
    DWORD
    WINAPI
    CaptureInterfaceHardwareCrossTimestamp(
        _In_ CONST NET_LUID *InterfaceLuid,
        _Inout_ PINTERFACE_HARDWARE_CROSSTIMESTAMP CrossTimestamp
        );

    typedef
    VOID
    CALLBACK
    INTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK(
        _In_ PVOID CallerContext
        );

    typedef
    INTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK *PINTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK;

    IPHLPAPI_DLL_LINKAGE
    DWORD
    WINAPI
    NotifyIfTimestampConfigChange(
        _In_opt_ PVOID CallerContext,
        _In_ PINTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK Callback,
        _Out_ HIFTIMESTAMPCHANGE *NotificationHandle
        );

    IPHLPAPI_DLL_LINKAGE
    VOID
    WINAPI
    CancelIfTimestampConfigChange(
        _In_ HIFTIMESTAMPCHANGE NotificationHandle
        );
 EndIf
    '#endif // (NTDDI_VERSION >= NTDDI_WIN10_FE)

    */



    #End Region
    
    #Region "icmpapi"
    'icmpapi.h
    Public Declare PtrSafe Function IcmpCreateFile Lib "Iphlpapi" () As LongPtr
    Public Declare PtrSafe Function Icmp6CreateFile Lib "Iphlpapi" () As LongPtr
    Public Declare PtrSafe Function IcmpCloseHandle Lib "Iphlpapi" (ByVal IcmpHandle As LongPtr) As BOOL
    Public Declare PtrSafe Function IcmpSendEcho Lib "Iphlpapi" (ByVal IcmpHandle As LongPtr, ByVal DestinationAddress As Long, RequestData As Any, ByVal RequestSize As Integer, RequestOptions As IP_OPTION_INFORMATION, ReplyBuffer As Any, ByVal ReplySize As Long, ByVal Timeout As Long) As Long
    Public Declare PtrSafe Function IcmpSendEcho2 Lib "Iphlpapi" (ByVal IcmpHandle As LongPtr, ByVal Event As LongPtr, ByVal ApcRoutine As LongPtr, ByVal ApcContext As LongPtr, ByVal DestinationAddress As Long, RequestData As Any, ByVal RequestSize As Integer, RequestOptions As IP_OPTION_INFORMATION, ReplyBuffer As Any, ByVal ReplySize As Long, ByVal Timeout As Long) As Long
    Public Declare PtrSafe Function IcmpSendEcho2Ex Lib "Iphlpapi" (ByVal IcmpHandle As LongPtr, ByVal Event As LongPtr, ByVal ApcRoutine As LongPtr, ByVal ApcContext As LongPtr, ByVal SourceAddress As Long, ByVal DestinationAddress As Long, RequestData As Any, ByVal RequestSize As Integer, RequestOptions As IP_OPTION_INFORMATION, ReplyBuffer As Any, ByVal ReplySize As Long, ByVal Timeout As Long) As Long
    Public Declare PtrSafe Function Icmp6SendEcho2 Lib "Iphlpapi" (ByVal IcmpHandle As LongPtr, ByVal Event As LongPtr, ByVal ApcRoutine As LongPtr, ByVal ApcContext As LongPtr, SourceAddress As SOCKADDR_IN6, DestinationAddress As SOCKADDR_IN6, RequestData As Any, ByVal RequestSize As Integer, RequestOptions As IP_OPTION_INFORMATION, ReplyBuffer As Any, ByVal ReplySize As Long, ByVal Timeout As Long) As Long
    Public Declare PtrSafe Function IcmpParseReplies Lib "Iphlpapi" (ReplyBuffer As Any, ByVal ReplySize As Long) As Long
    Public Declare PtrSafe Function Icmp6ParseReplies Lib "Iphlpapi" (ReplyBuffer As Any, ByVal ReplySize As Long) As Long
       
    
    #End Region
    
    
    #Region "wnet"

    'mpr.dll
    'winnetwk.h - 100% coverage

    Public Enum NETWK_RESFLAGS
        RESOURCE_CONNECTED = &H00000001
        RESOURCE_GLOBALNET = &H00000002
        RESOURCE_REMEMBERED = &H00000003
        RESOURCE_RECENT = &H00000004
        RESOURCE_CONTEXT = &H00000005
    End Enum

    Public Enum NETWK_RESUSAGE
        RESOURCEUSAGE_CONNECTABLE = &H00000001
        RESOURCEUSAGE_CONTAINER = &H00000002
        RESOURCEUSAGE_NOLOCALDEVICE = &H00000004
        RESOURCEUSAGE_SIBLING = &H00000008
        RESOURCEUSAGE_ATTACHED = &H00000010
        RESOURCEUSAGE_ALL = (RESOURCEUSAGE_CONNECTABLE Or RESOURCEUSAGE_CONTAINER Or RESOURCEUSAGE_ATTACHED)
        RESOURCEUSAGE_RESERVED = &H80000000
    End Enum

    Public Enum NETWK_RESDISPTYPE
        RESOURCEDISPLAYTYPE_GENERIC = &H00000000
        RESOURCEDISPLAYTYPE_DOMAIN = &H00000001
        RESOURCEDISPLAYTYPE_SERVER = &H00000002
        RESOURCEDISPLAYTYPE_SHARE = &H00000003
        RESOURCEDISPLAYTYPE_FILE = &H00000004
        RESOURCEDISPLAYTYPE_GROUP = &H00000005
        RESOURCEDISPLAYTYPE_NETWORK = &H00000006
        RESOURCEDISPLAYTYPE_ROOT = &H00000007
        RESOURCEDISPLAYTYPE_SHAREADMIN = &H00000008
        RESOURCEDISPLAYTYPE_DIRECTORY = &H00000009
        RESOURCEDISPLAYTYPE_TREE = &H0000000A
        RESOURCEDISPLAYTYPE_NDSCONTAINER = &H0000000B
    End Enum

    Public Type NETRESOURCEA
        dwScope As NETWK_RESFLAGS
        dwType As NetResourceTypeValues
        dwDisplayType As NETWK_RESDISPTYPE
        dwUsage As NETWK_RESUSAGE
        lpLocalName As String
        lpRemoteName As String
        lpComment As String
        lpProvider As String
    End Type
    Public Type NETRESOURCEW
        dwScope As NETWK_RESFLAGS
        dwType As NetResourceTypeValues
        dwDisplayType As NETWK_RESDISPTYPE
        dwUsage As NETWK_RESUSAGE
        lpLocalName As LongPtr
        lpRemoteName As LongPtr
        lpComment As LongPtr
        lpProvider As LongPtr
    End Type
    'Alias NETRESOURCE As NETRESOURCEW
    Public Type NETRESOURCE
        dwScope As NETWK_RESFLAGS
        dwType As NetResourceTypeValues
        dwDisplayType As NETWK_RESDISPTYPE
        dwUsage As NETWK_RESUSAGE
        lpLocalName As LongPtr
        lpRemoteName As LongPtr
        lpComment As LongPtr
        lpProvider As LongPtr
    End Type

    Public Enum NETWK_PROP_FLAGS
        NETPROPERTY_PERSISTENT = 1
    End Enum

    Public Enum NETWK_CONNECTION_FLAGS
        CONNECT_UPDATE_PROFILE = &H00000001
        CONNECT_UPDATE_RECENT = &H00000002
        CONNECT_TEMPORARY = &H00000004
        CONNECT_INTERACTIVE = &H00000008
        CONNECT_PROMPT = &H00000010
        CONNECT_NEED_DRIVE = &H00000020
        CONNECT_REFCOUNT = &H00000040
        CONNECT_REDIRECT = &H00000080
        CONNECT_LOCALDRIVE = &H00000100
        CONNECT_CURRENT_MEDIA = &H00000200
        CONNECT_DEFERRED = &H00000400
        CONNECT_RESERVED = &HFF000000
        CONNECT_COMMANDLINE = &H00000800
        CONNECT_CMD_SAVECRED = &H00001000
    ' #if(WINVER >= 0x0600)
        CONNECT_CRED_RESET = &H00002000
    ' #endif /* WINVER >= 0x0600 */
    ' #if (_WIN32_WINNT >= _WIN32_WINNT_WIN10)
        CONNECT_REQUIRE_INTEGRITY = &H00004000
        CONNECT_REQUIRE_PRIVACY = &H00008000&
        CONNECT_WRITE_THROUGH_SEMANTICS = &H00010000
        CONNECT_GLOBAL_MAPPING = &H00040000
    End Enum

    Public Enum NETWK_CONDLG_FLAGS
        CONNDLG_RO_PATH = &H00000001 /* Resource path should be read-only */
        CONNDLG_CONN_POINT = &H00000002 /* Netware -style movable connection point enabled */
        CONNDLG_USE_MRU = &H00000004 /* Use MRU combobox */
        CONNDLG_HIDE_BOX = &H00000008 /* Hide persistent connect checkbox */
        /*NOTE:   Set at most ONE of the below flags. If neither flag is set,
                  then  the persistence is set to whatever the user chose during
                a previous connection 
        */
        CONNDLG_PERSIST = &H00000010 /* Force persistent connection */
        CONNDLG_NOT_PERSIST = &H00000020 /* Force connection NOT persistent */
    End Enum
    Public Type CONNECTDLGSTRUCTA
        cbStructure As Long '/* size of this structure in bytes */
        hwndOwner As LongPtr '/* owner window for the dialog */
        lpConnRes As LongPtr 'LPNETRESOURCEA '/* Requested Resource info    */
        dwFlags As NETWK_CONDLG_FLAGS '/* flags (see below) */
        dwDevNum As Long '/* number of devices connected to */
    End Type
    Public Type CONNECTDLGSTRUCTW
        cbStructure As Long '/* size of this structure in bytes */
        hwndOwner As LongPtr '/* owner window for the dialog */
        lpConnRes As LongPtr 'LPNETRESOURCEW '/* Requested Resource info    */
        dwFlags As NETWK_CONDLG_FLAGS '/* flags (see below) */
        dwDevNum As Long '/* number of devices connected to */
    End Type
    'Alias CONNECTDLGSTRUCT As CONNECTDLGSTRUCTW
    Public Type CONNECTDLGSTRUCT
        cbStructure As Long '/* size of this structure in bytes */
        hwndOwner As LongPtr '/* owner window for the dialog */
        lpConnRes As LongPtr 'LPNETRESOURCE '/* Requested Resource info    */
        dwFlags As NETWK_CONDLG_FLAGS '/* flags (see below) */
        dwDevNum As Long '/* number of devices connected to */
    End Type

    Public Enum NETWK_DISCDLG_FLAGS
        DISC_UPDATE_PROFILE = &H00000001
        DISC_NO_FORCE = &H00000040
    End Enum
    Public Type DISCDLGSTRUCTA
        cbStructure As Long '/* size of this structure in bytes */
        hwndOwner As LongPtr '/* owner window for the dialog */
        lpLocalName As String '/* local device name */
        lpRemoteName As String '/* network resource name */
        dwFlags As NETWK_DISCDLG_FLAGS '/* flags */
    End Type
    Public Type DISCDLGSTRUCTW
        cbStructure As Long '/* size of this structure in bytes */
        hwndOwner As LongPtr '/* owner window for the dialog */
        lpLocalName As LongPtr '/* local device name */
        lpRemoteName As LongPtr '/* network resource name */
        dwFlags As NETWK_DISCDLG_FLAGS '/* flags */
    End Type
    'Alias DISCDLGSTRUCT As DISCDLGSTRUCTW
    Public Type DISCDLGSTRUCT
        cbStructure As Long '/* size of this structure in bytes */
        hwndOwner As LongPtr '/* owner window for the dialog */
        lpLocalName As LongPtr '/* local device name */
        lpRemoteName As LongPtr '/* network resource name */
        dwFlags As NETWK_DISCDLG_FLAGS '/* flags */
    End Type

    Public Enum NETWK_NAME_INFOLEVEL
        UNIVERSAL_NAME_INFO_LEVEL = &H00000001
        REMOTE_NAME_INFO_LEVEL = &H00000002
    End Enum

    Public Type UNIVERSAL_NAME_INFOA
        lpUniversalName As String
    End Type
    Public Type UNIVERSAL_NAME_INFOW
        lpUniversalName As LongPtr
    End Type
    'Alias UNIVERSAL_NAME_INFO As UNIVERSAL_NAME_INFOW
    Public Type UNIVERSAL_NAME_INFO
        lpUniversalName As LongPtr
    End Type

    Public Type REMOTE_NAME_INFOA
        lpUniversalName As String
        lpConnectionName As String
        lpRemainingPath As String
    End Type
    Public Type REMOTE_NAME_INFOW
        lpUniversalName As LongPtr
        lpConnectionName As LongPtr
        lpRemainingPath As LongPtr
    End Type
    'Alias REMOTE_NAME_INFO As REMOTE_NAME_INFOW
    Public Type REMOTE_NAME_INFO
        lpUniversalName As LongPtr
        lpConnectionName As LongPtr
        lpRemainingPath As LongPtr
    End Type

    Public Enum NETWK_WNFMT
        WNFMT_MULTILINE = &H01
        WNFMT_ABBREVIATED = &H02
        WNFMT_INENUM = &H10
        WNFMT_CONNECTION = &H20
    End Enum

    Public Enum NETWK_INFOSTRUCT_FLAGS
        NETINFO_DLL16 = &H00000001 /* Provider running as 16 bit Winnet Driver */
        NETINFO_DISKRED = &H00000004 /* Provider requires disk redirections to connect */
        NETINFO_PRINTERRED = &H00000008 /* Provider requires printer redirections to connect */
    End Enum
    Public Type NETINFOSTRUCT
        cbStructure As Long
        dwProviderVersion As Long
        dwStatus As Long
        dwCharacteristics As NETWK_INFOSTRUCT_FLAGS
        dwHandle As LongPtr
        wNetType As Integer
        dwPrinters As Long
        dwDrives As Long
    End Type

    Public Enum NETWK_ERROR_CODES
        WN_SUCCESS = NO_ERROR
        WN_NO_ERROR = NO_ERROR
        WN_NOT_SUPPORTED = ERROR_NOT_SUPPORTED
        WN_CANCEL = ERROR_CANCELLED
        WN_RETRY = ERROR_RETRY
        WN_NET_ERROR = ERROR_UNEXP_NET_ERR
        WN_MORE_DATA = ERROR_MORE_DATA
        WN_BAD_POINTER = ERROR_INVALID_ADDRESS
        WN_BAD_VALUE = ERROR_INVALID_PARAMETER
        WN_BAD_USER = ERROR_BAD_USERNAME
        WN_BAD_PASSWORD = ERROR_INVALID_PASSWORD
        WN_ACCESS_DENIED = ERROR_ACCESS_DENIED
        WN_FUNCTION_BUSY = ERROR_BUSY
        WN_WINDOWS_ERROR = ERROR_UNEXP_NET_ERR
        WN_OUT_OF_MEMORY = ERROR_NOT_ENOUGH_MEMORY
        WN_NO_NETWORK = ERROR_NO_NETWORK
        WN_EXTENDED_ERROR = ERROR_EXTENDED_ERROR
        WN_BAD_LEVEL = ERROR_INVALID_LEVEL
        WN_BAD_HANDLE = ERROR_INVALID_HANDLE
        WN_NOT_INITIALIZING = ERROR_ALREADY_INITIALIZED
        WN_NO_MORE_DEVICES = ERROR_NO_MORE_DEVICES
    '  Connection
        WN_NOT_CONNECTED = ERROR_NOT_CONNECTED
        WN_OPEN_FILES = ERROR_OPEN_FILES
        WN_DEVICE_IN_USE = ERROR_DEVICE_IN_USE
        WN_BAD_NETNAME = ERROR_BAD_NET_NAME
        WN_BAD_LOCALNAME = ERROR_BAD_DEVICE
        WN_ALREADY_CONNECTED = ERROR_ALREADY_ASSIGNED
        WN_DEVICE_ERROR = ERROR_GEN_FAILURE
        WN_CONNECTION_CLOSED = ERROR_CONNECTION_UNAVAIL
        WN_NO_NET_OR_BAD_PATH = ERROR_NO_NET_OR_BAD_PATH
        WN_BAD_PROVIDER = ERROR_BAD_PROVIDER
        WN_CANNOT_OPEN_PROFILE = ERROR_CANNOT_OPEN_PROFILE
        WN_BAD_PROFILE = ERROR_BAD_PROFILE
        WN_BAD_DEV_TYPE = ERROR_BAD_DEV_TYPE
        WN_DEVICE_ALREADY_REMEMBERED = ERROR_DEVICE_ALREADY_REMEMBERED
        WN_CONNECTED_OTHER_PASSWORD = ERROR_CONNECTED_OTHER_PASSWORD
        WN_CONNECTED_OTHER_PASSWORD_DEFAULT = ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT
    '  Enumeration
        WN_NO_MORE_ENTRIES = ERROR_NO_MORE_ITEMS
        WN_NOT_CONTAINER = ERROR_NOT_CONTAINER
    '  Authentication
        WN_NOT_AUTHENTICATED = ERROR_NOT_AUTHENTICATED
        WN_NOT_LOGGED_ON = ERROR_NOT_LOGGED_ON
        WN_NOT_VALIDATED = ERROR_NO_LOGON_SERVERS
    End Enum

    Public Enum NETWK_WNCON_FLAGS
        WNCON_FORNETCARD = &H00000001
        WNCON_NOTROUTED = &H00000002
        WNCON_SLOWLINK = &H00000004
        WNCON_DYNAMIC = &H00000008
    End Enum
    Public Type NETCONNECTINFOSTRUCT
        cbStructure As Long
        dwFlags As NETWK_WNCON_FLAGS
        dwSpeed As Long
        dwDelay As Long
        dwOptDataSize As Long
    End Type



    Public Declare PtrSafe Function WNetAddConnectionA Lib "mpr.dll" (ByVal lpRemoteName As String, Optional ByVal lpPassword As String, Optional ByVal lpLocalName As String) As Long
    Public Declare PtrSafe Function WNetAddConnectionW Lib "mpr.dll" (ByVal lpRemoteName As LongPtr, Optional ByVal lpPassword As LongPtr, Optional ByVal lpLocalName As LongPtr) As Long
    Public DeclareWide PtrSafe Function WNetAddConnection Lib "mpr.dll" Alias "WNetAddConnectionW" (ByVal lpRemoteName As String, Optional ByVal lpPassword As String, Optional ByVal lpLocalName As String) As Long
    Public Declare PtrSafe Function WNetAddConnection2A Lib "mpr.dll" (lpNetResource As NETRESOURCEA, ByVal lpPassword As String, ByVal lpUserName As String, ByVal dwFlags As NETWK_CONNECTION_FLAGS) As Long
    Public Declare PtrSafe Function WNetAddConnection2W Lib "mpr.dll" (lpNetResource As NETRESOURCEW, ByVal lpPassword As LongPtr, ByVal lpUserName As LongPtr, ByVal dwFlags As NETWK_CONNECTION_FLAGS) As Long
    Public DeclareWide PtrSafe Function WNetAddConnection2 Lib "mpr.dll" Alias "WNetAddConnection2W" (lpNetResource As NETRESOURCE, ByVal lpPassword As String, ByVal lpUserName As String, ByVal dwFlags As NETWK_CONNECTION_FLAGS) As Long
    Public Declare PtrSafe Function WNetAddConnection3A Lib "mpr.dll" (ByVal hwndOwner As LongPtr, lpNetResource As NETRESOURCEA, ByVal lpPassword As String, ByVal lpUserName As String, ByVal dwFlags As NETWK_CONNECTION_FLAGS) As Long
    Public Declare PtrSafe Function WNetAddConnection3W Lib "mpr.dll" (ByVal hwndOwner As LongPtr, lpNetResource As NETRESOURCEW, ByVal lpPassword As LongPtr, ByVal lpUserName As LongPtr, ByVal dwFlags As NETWK_CONNECTION_FLAGS) As Long
    Public DeclareWide PtrSafe Function WNetAddConnection3 Lib "mpr.dll" Alias "WNetAddConnection3W" (ByVal hwndOwner As LongPtr, lpNetResource As NETRESOURCE, ByVal lpPassword As String, ByVal lpUserName As String, ByVal dwFlags As NETWK_CONNECTION_FLAGS) As Long
    Public Declare PtrSafe Function WNetAddConnection4A Lib "mpr.dll" (ByVal hwndOwner As LongPtr, lpNetResource As NETRESOURCEA, pAuthBuffer As Any, ByVal cbAuthBuffer As Long, ByVal dwFlags As NETWK_CONNECTION_FLAGS, lpUseOptions As Any, ByVal cbUseOptions As Long) As Long
    Public Declare PtrSafe Function WNetAddConnection4W Lib "mpr.dll" (ByVal hwndOwner As LongPtr, lpNetResource As NETRESOURCEW, pAuthBuffer As Any, ByVal cbAuthBuffer As Long, ByVal dwFlags As NETWK_CONNECTION_FLAGS, lpUseOptions As Any, ByVal cbUseOptions As Long) As Long
    Public DeclareWide PtrSafe Function WNetAddConnection4 Lib "mpr.dll" Alias "WNetAddConnection4W" (ByVal hwndOwner As LongPtr, lpNetResource As NETRESOURCE, pAuthBuffer As Any, ByVal cbAuthBuffer As Long, ByVal dwFlags As NETWK_CONNECTION_FLAGS, lpUseOptions As Any, ByVal cbUseOptions As Long) As Long
    Public Declare PtrSafe Function WNetCancelConnectionA Lib "mpr.dll" (ByVal lpName As String, ByVal bForce As BOOL) As Long
    Public Declare PtrSafe Function WNetCancelConnectionW Lib "mpr.dll" (ByVal lpName As LongPtr, ByVal bForce As BOOL) As Long
    Public DeclareWide PtrSafe Function WNetCancelConnection Lib "mpr.dll" Alias "WNetCancelConnectionW" (ByVal lpName As String, ByVal bForce As BOOL) As Long
    Public Declare PtrSafe Function WNetCancelConnection2A Lib "mpr.dll" (ByVal lpName As String, ByVal dwFlags As NETWK_CONNECTION_FLAGS, ByVal bForce As BOOL) As Long
    Public Declare PtrSafe Function WNetCancelConnection2W Lib "mpr.dll" (ByVal lpName As LongPtr, ByVal dwFlags As NETWK_CONNECTION_FLAGS, ByVal bForce As BOOL) As Long
    Public DeclareWide PtrSafe Function WNetCancelConnection2 Lib "mpr.dll" Alias "WNetCancelConnection2W" (ByVal lpName As String, ByVal dwFlags As NETWK_CONNECTION_FLAGS, ByVal bForce As BOOL) As Long
    Public Declare PtrSafe Function WNetGetConnectionA Lib "mpr.dll" (ByVal lpLocalName As String, ByVal lpRemoteName As String, lpnLength As Long) As Long
    Public Declare PtrSafe Function WNetGetConnectionW Lib "mpr.dll" (ByVal lpLocalName As LongPtr, ByVal lpRemoteName As LongPtr, lpnLength As Long) As Long
    Public DeclareWide PtrSafe Function WNetGetConnection Lib "mpr.dll" Alias "WNetGetConnectionW" (ByVal lpLocalName As String, ByVal lpRemoteName As String, lpnLength As Long) As Long
    Public Declare PtrSafe Function WNetRestoreSingleConnectionA Lib "mpr.dll" (ByVal hwndParent As LongPtr, ByVal lpDevice As String, ByVal fUseUI As BOOL) As Long
    Public Declare PtrSafe Function WNetRestoreSingleConnectionW Lib "mpr.dll" (ByVal hwndParent As LongPtr, ByVal lpDevice As LongPtr, ByVal fUseUI As BOOL) As Long
    Public DeclareWide PtrSafe Function WNetRestoreSingleConnection Lib "mpr.dll" Alias "WNetRestoreSingleConnectionW" (ByVal hwndParent As LongPtr, ByVal lpDevice As String, ByVal fUseUI As BOOL) As Long
    [Description("Unavailable on Vista+, use WNetRestoreSingleConnectionA.")] Public Declare PtrSafe Function WNetRestoreConnectionA Lib "mpr.dll" (ByVal hwnd As LongPtr, ByVal lpDevice As String) As Long
    [Description("Unavailable on Vista+, use WNetRestoreSingleConnectionW.")] Public Declare PtrSafe Function WNetRestoreConnectionW Lib "mpr.dll" (ByVal hwnd As LongPtr, ByVal lpDevice As LongPtr) As Long
    [Description("Unavailable on Vista+, use WNetRestoreSingleConnection.")] Public DeclareWide PtrSafe Function WNetRestoreConnection Lib "mpr.dll" Alias "WNetRestoreSingleConnectionW" (ByVal hwnd As LongPtr, ByVal lpDevice As String) As Long
    Public Declare PtrSafe Function WNetUseConnectionA Lib "mpr.dll" (ByVal hwndOwner As LongPtr, lpNetResource As NETRESOURCEA, ByVal lpPassword As String, ByVal lpUserId As String, ByVal dwFlags As NETWK_CONNECTION_FLAGS, ByVal lpAccessName As String, lpBufferSize As Long, lpResult As Long) As Long
    Public Declare PtrSafe Function WNetUseConnectionW Lib "mpr.dll" (ByVal hwndOwner As LongPtr, lpNetResource As NETRESOURCEW, ByVal lpPassword As LongPtr, ByVal lpUserId As LongPtr, ByVal dwFlags As NETWK_CONNECTION_FLAGS, ByVal lpAccessName As LongPtr, lpBufferSize As Long, lpResult As Long) As Long
    Public DeclareWide PtrSafe Function WNetUseConnection Lib "mpr.dll" Alias "WNetUseConnectionW" (ByVal hwndOwner As LongPtr, lpNetResource As NETRESOURCE, ByVal lpPassword As String, ByVal lpUserId As String, ByVal dwFlags As NETWK_CONNECTION_FLAGS, ByVal lpAccessName As String, lpBufferSize As Long, lpResult As Long) As Long
    Public Declare PtrSafe Function WNetUseConnection4A Lib "mpr.dll" (ByVal hwndOwner As LongPtr, lpNetResource As NETRESOURCEA, ByVal lpPassword As String, pAuthBuffer As Any, ByVal cbAuthBuffer As Long, ByVal lpUserId As String, ByVal dwFlags As NETWK_CONNECTION_FLAGS, lpUseOptions As Any, ByVal cbUseOptions As Long, ByVal lpAccessName As String, lpBufferSize As Long, lpResult As Long) As Long
    Public Declare PtrSafe Function WNetUseConnection4W Lib "mpr.dll" (ByVal hwndOwner As LongPtr, lpNetResource As NETRESOURCEW, ByVal lpPassword As LongPtr, pAuthBuffer As Any, ByVal cbAuthBuffer As Long, ByVal lpUserId As LongPtr, ByVal dwFlags As NETWK_CONNECTION_FLAGS, lpUseOptions As Any, ByVal cbUseOptions As Long, ByVal lpAccessName As LongPtr, lpBufferSize As Long, lpResult As Long) As Long
    Public DeclareWide PtrSafe Function WNetUseConnection4 Lib "mpr.dll" Alias "WNetUseConnection4W" (ByVal hwndOwner As LongPtr, lpNetResource As NETRESOURCE, ByVal lpPassword As String, pAuthBuffer As Any, ByVal cbAuthBuffer As Long, ByVal lpUserId As String, ByVal dwFlags As NETWK_CONNECTION_FLAGS, lpUseOptions As Any, ByVal cbUseOptions As Long, ByVal lpAccessName As String, lpBufferSize As Long, lpResult As Long) As Long
    Public Declare PtrSafe Function WNetConnectionDialog Lib "mpr.dll" (ByVal hwnd As LongPtr, ByVal dwType As NetResourceTypeValues) As Long
    Public Declare PtrSafe Function WNetDisconnectionDialog Lib "mpr.dll" (ByVal hwnd As LongPtr, ByVal dwType As NetResourceTypeValues) As Long
    Public Declare PtrSafe Function WNetConnectionDialog1A Lib "mpr.dll" (lpConnDlgStruct As CONNECTDLGSTRUCTA) As Long
    Public Declare PtrSafe Function WNetConnectionDialog1W Lib "mpr.dll" (lpConnDlgStruct As CONNECTDLGSTRUCTW) As Long
    Public DeclareWide PtrSafe Function WNetConnectionDialog1 Lib "mpr.dll" Alias "WNetConnectionDialog1W" (lpConnDlgStruct As CONNECTDLGSTRUCT) As Long
    Public Declare PtrSafe Function WNetDisconnectDialog1A Lib "mpr.dll" (lpConnDlgStruct As DISCDLGSTRUCTA) As Long
    Public Declare PtrSafe Function WNetDisconnectDialog1W Lib "mpr.dll" (lpConnDlgStruct As DISCDLGSTRUCTW) As Long
    Public DeclareWide PtrSafe Function WNetDisconnectDialog1 Lib "mpr.dll" Alias "WNetDisconnectDialog1W" (lpConnDlgStruct As DISCDLGSTRUCT) As Long
    Public Declare PtrSafe Function WNetOpenEnumA Lib "mpr.dll" (ByVal dwScope As NETWK_RESFLAGS, ByVal dwType As NetResourceTypeValues, ByVal dwUsage As NETWK_RESUSAGE, lpNetResource As NETRESOURCEA, lphEnum As LongPtr) As Long
    Public Declare PtrSafe Function WNetOpenEnumW Lib "mpr.dll" (ByVal dwScope As NETWK_RESFLAGS, ByVal dwType As NetResourceTypeValues, ByVal dwUsage As NETWK_RESUSAGE, lpNetResource As NETRESOURCEW, lphEnum As LongPtr) As Long
    Public DeclareWide PtrSafe Function WNetOpenEnum Lib "mpr.dll" Alias "WNetOpenEnumW" (ByVal dwScope As NETWK_RESFLAGS, ByVal dwType As NetResourceTypeValues, ByVal dwUsage As NETWK_RESUSAGE, lpNetResource As NETRESOURCE, lphEnum As LongPtr) As Long
    Public Declare PtrSafe Function WNetEnumResourceA Lib "mpr.dll" (ByVal hEnum As LongPtr, lpcCount As Long, lpBuffer As Any, lpBufferSize As Long) As Long
    Public Declare PtrSafe Function WNetEnumResourceW Lib "mpr.dll" (ByVal hEnum As LongPtr, lpcCount As Long, lpBuffer As Any, lpBufferSize As Long) As Long
    Public DeclareWide PtrSafe Function WNetEnumResource Lib "mpr.dll" Alias "WNetEnumResourceW" (ByVal hEnum As LongPtr, lpcCount As Long, lpBuffer As Any, lpBufferSize As Long) As Long
    Public Declare PtrSafe Function WNetCloseEnum Lib "mpr.dll" (ByVal hEnum As LongPtr) As Long
    Public Declare PtrSafe Function WNetGetResourceParentA Lib "mpr.dll" (lpNetResource As NETRESOURCEA, lpBuffer As Any, lpcbBuffer As Long) As Long
    Public Declare PtrSafe Function WNetGetResourceParentW Lib "mpr.dll" (lpNetResource As NETRESOURCEW, lpBuffer As Any, lpcbBuffer As Long) As Long
    Public DeclareWide PtrSafe Function WNetGetResourceParent Lib "mpr.dll" Alias "WNetGetResourceParentW" (lpNetResource As NETRESOURCE, lpBuffer As Any, lpcbBuffer As Long) As Long
    Public Declare PtrSafe Function WNetGetResourceInformationA Lib "mpr.dll" (lpNetResource As NETRESOURCEA, lpBuffer As Any, lpcbBuffer As Long, lplpSystem As LongPtr) As Long
    Public Declare PtrSafe Function WNetGetResourceInformationW Lib "mpr.dll" (lpNetResource As NETRESOURCEW, lpBuffer As Any, lpcbBuffer As Long, lplpSystem As LongPtr) As Long
    Public DeclareWide PtrSafe Function WNetGetResourceInformation Lib "mpr.dll" Alias "WNetGetResourceInformationW" (lpNetResource As NETRESOURCE, lpBuffer As Any, lpcbBuffer As Long, lplpSystem As LongPtr) As Long
    Public Declare PtrSafe Function WNetGetUniversalNameA Lib "mpr.dll" (ByVal lpLocalPath As String, ByVal dwInfoLevel As NETWK_NAME_INFOLEVEL, lpBuffer As Any, lpBufferSize As Long) As Long
    Public Declare PtrSafe Function WNetGetUniversalNameW Lib "mpr.dll" (ByVal lpLocalPath As LongPtr, ByVal dwInfoLevel As NETWK_NAME_INFOLEVEL, lpBuffer As Any, lpBufferSize As Long) As Long
    Public DeclareWide PtrSafe Function WNetGetUniversalName Lib "mpr.dll" Alias "WNetGetUniversalNameW" (ByVal lpLocalPath As String, ByVal dwInfoLevel As NETWK_NAME_INFOLEVEL, lpBuffer As Any, lpBufferSize As Long) As Long
    Public Declare PtrSafe Function WNetGetUserA Lib "mpr.dll" (ByVal lpName As String, ByVal lpUserName As String, lpnLength As Long) As Long
    Public Declare PtrSafe Function WNetGetUserW Lib "mpr.dll" (ByVal lpName As LongPtr, ByVal lpUserName As LongPtr, lpnLength As Long) As Long
    Public DeclareWide PtrSafe Function WNetGetUser Lib "mpr.dll" Alias "WNetGetUserW" (ByVal lpName As String, ByVal lpUserName As String, lpnLength As Long) As Long
    Public Declare PtrSafe Function WNetGetProviderNameA Lib "mpr.dll" (ByVal dwNetType As WNNC_CODES, ByVal lpProviderName As String, lpBufferSize As Long) As Long
    Public Declare PtrSafe Function WNetGetProviderNameW Lib "mpr.dll" (ByVal dwNetType As WNNC_CODES, ByVal lpProviderName As LongPtr, lpBufferSize As Long) As Long
    Public DeclareWide PtrSafe Function WNetGetProviderName Lib "mpr.dll" Alias "WNetGetProviderNameW" (ByVal dwNetType As WNNC_CODES, ByVal lpProviderName As String, lpBufferSize As Long) As Long
    Public Declare PtrSafe Function WNetGetNetworkInformationA Lib "mpr.dll" (ByVal lpProvider As String, lpNetInfoStruct As NETINFOSTRUCT) As Long
    Public Declare PtrSafe Function WNetGetNetworkInformationW Lib "mpr.dll" (ByVal lpProvider As LongPtr, lpNetInfoStruct As NETINFOSTRUCT) As Long
    Public DeclareWide PtrSafe Function WNetGetNetworkInformation Lib "mpr.dll" Alias "WNetGetNetworkInformationW" (ByVal lpProvider As String, lpNetInfoStruct As NETINFOSTRUCT) As Long
    Public Declare PtrSafe Function WNetGetLastErrorA Lib "mpr.dll" (lpError As NETWK_ERROR_CODES, ByVal lpErrorBuf As String, ByVal nErrorBufSize As Long, ByVal lpNameBuf As String, ByVal nNameBufSize As Long) As Long
    Public Declare PtrSafe Function WNetGetLastErrorW Lib "mpr.dll" (lpError As NETWK_ERROR_CODES, ByVal lpErrorBuf As LongPtr, ByVal nErrorBufSize As Long, ByVal lpNameBuf As LongPtr, ByVal nNameBufSize As Long) As Long
    Public DeclareWide PtrSafe Function WNetGetLastError Lib "mpr.dll" Alias "WNetGetLastErrorW" (lpError As NETWK_ERROR_CODES, ByVal lpErrorBuf As String, ByVal nErrorBufSize As Long, ByVal lpNameBuf As String, ByVal nNameBufSize As Long) As Long
    Public Declare PtrSafe Function MultinetGetConnectionPerformanceA Lib "mpr.dll" (lpNetResource As NETRESOURCEA, lpNetConnectInfoStruct As NETCONNECTINFOSTRUCT) As Long
    Public Declare PtrSafe Function MultinetGetConnectionPerformanceW Lib "mpr.dll" (lpNetResource As NETRESOURCEW, lpNetConnectInfoStruct As NETCONNECTINFOSTRUCT) As Long
    Public DeclareWide PtrSafe Function MultinetGetConnectionPerformance Lib "mpr.dll" Alias "MultinetGetConnectionPerformanceW" (lpNetResource As NETRESOURCE, lpNetConnectInfoStruct As NETCONNECTINFOSTRUCT) As Long



    #End Region

    #Region "winsock"

    'This section follows the convention used by others like wqweto in prefixing the highly generic,
    'almost guaranteed to conflict winsock APIs with the ws_ prefix.

    Public Enum WS_ERRORS
        WSABASEERR = 10000
    '  * Windows Sockets definitions of regular Microsoft C error constants
    '  */
        WSAEINTR = (WSABASEERR + 4)
        WSAEBADF = (WSABASEERR + 9)
        WSAEACCES = (WSABASEERR + 13)
        WSAEFAULT = (WSABASEERR + 14)
        WSAEINVAL = (WSABASEERR + 22)
        WSAEMFILE = (WSABASEERR + 24)
    '  * Windows Sockets definitions of regular Berkeley error constants
    '  */
        WSAEWOULDBLOCK = (WSABASEERR + 35)
        WSAEINPROGRESS = (WSABASEERR + 36)
        WSAEALREADY = (WSABASEERR + 37)
        WSAENOTSOCK = (WSABASEERR + 38)
        WSAEDESTADDRREQ = (WSABASEERR + 39)
        WSAEMSGSIZE = (WSABASEERR + 40)
        WSAEPROTOTYPE = (WSABASEERR + 41)
        WSAENOPROTOOPT = (WSABASEERR + 42)
        WSAEPROTONOSUPPORT = (WSABASEERR + 43)
        WSAESOCKTNOSUPPORT = (WSABASEERR + 44)
        WSAEOPNOTSUPP = (WSABASEERR + 45)
        WSAEPFNOSUPPORT = (WSABASEERR + 46)
        WSAEAFNOSUPPORT = (WSABASEERR + 47)
        WSAEADDRINUSE = (WSABASEERR + 48)
        WSAEADDRNOTAVAIL = (WSABASEERR + 49)
        WSAENETDOWN = (WSABASEERR + 50)
        WSAENETUNREACH = (WSABASEERR + 51)
        WSAENETRESET = (WSABASEERR + 52)
        WSAECONNABORTED = (WSABASEERR + 53)
        WSAECONNRESET = (WSABASEERR + 54)
        WSAENOBUFS = (WSABASEERR + 55)
        WSAEISCONN = (WSABASEERR + 56)
        WSAENOTCONN = (WSABASEERR + 57)
        WSAESHUTDOWN = (WSABASEERR + 58)
        WSAETOOMANYREFS = (WSABASEERR + 59)
        WSAETIMEDOUT = (WSABASEERR + 60)
        WSAECONNREFUSED = (WSABASEERR + 61)
        WSAELOOP = (WSABASEERR + 62)
        WSAENAMETOOLONG = (WSABASEERR + 63)
        WSAEHOSTDOWN = (WSABASEERR + 64)
        WSAEHOSTUNREACH = (WSABASEERR + 65)
        WSAENOTEMPTY = (WSABASEERR + 66)
        WSAEPROCLIM = (WSABASEERR + 67)
        WSAEUSERS = (WSABASEERR + 68)
        WSAEDQUOT = (WSABASEERR + 69)
        WSAESTALE = (WSABASEERR + 70)
        WSAEREMOTE = (WSABASEERR + 71)
    '  * Extended Windows Sockets error constant definitions
    '  */
        WSASYSNOTREADY = (WSABASEERR + 91)
        WSAVERNOTSUPPORTED = (WSABASEERR + 92)
        WSANOTINITIALISED = (WSABASEERR + 93)
        WSAEDISCON = (WSABASEERR + 101)
        WSAENOMORE = (WSABASEERR + 102)
        WSAECANCELLED = (WSABASEERR + 103)
        WSAEINVALIDPROCTABLE = (WSABASEERR + 104)
        WSAEINVALIDPROVIDER = (WSABASEERR + 105)
        WSAEPROVIDERFAILEDINIT = (WSABASEERR + 106)
        WSASYSCALLFAILURE = (WSABASEERR + 107)
        WSASERVICE_NOT_FOUND = (WSABASEERR + 108)
        WSATYPE_NOT_FOUND = (WSABASEERR + 109)
        WSA_E_NO_MORE = (WSABASEERR + 110)
        WSA_E_CANCELLED = (WSABASEERR + 111)
        WSAEREFUSED = (WSABASEERR + 112)
    '  * Error return codes from gethostbyname() and gethostbyaddr()
    '  * (when using the resolver). Note that these errors are
    '  * retrieved via WSAGetLastError() and must therefore follow
    '  * the rules for avoiding clashes with error numbers from
    '  * specific implementations or language run-time systems.
    '  * For this reason the codes are based at WSABASEERR+1001.
    '  * Note also that [WSA]NO_ADDRESS is defined only for
    '  * compatibility purposes.
    '  */
    '  Authoritative Answer: Host not found */
        WSAHOST_NOT_FOUND = (WSABASEERR + 1001)
    '  Non-Authoritative: Host not found, or SERVERFAIL */
        WSATRY_AGAIN = (WSABASEERR + 1002)
    '  Non-recoverable errors, FORMERR, REFUSED, NOTIMP */
        WSANO_RECOVERY = (WSABASEERR + 1003)
    '  Valid name, no data record of requested type */
        WSANO_DATA = (WSABASEERR + 1004)
    ' * Define QOS related error return codes
    '  *
        WSA_QOS_RECEIVERS = (WSABASEERR + 1005)
    '  at least one Reserve has arrived */
        WSA_QOS_SENDERS = (WSABASEERR + 1006)
    '  at least one Path has arrived */
        WSA_QOS_NO_SENDERS = (WSABASEERR + 1007)
    '  there are no senders */
        WSA_QOS_NO_RECEIVERS = (WSABASEERR + 1008)
    '  there are no receivers */
        WSA_QOS_REQUEST_CONFIRMED = (WSABASEERR + 1009)
    '  Reserve has been confirmed */
        WSA_QOS_ADMISSION_FAILURE = (WSABASEERR + 1010)
    '  error due to lack of resources */
        WSA_QOS_POLICY_FAILURE = (WSABASEERR + 1011)
    '  rejected for administrative reasons - bad credentials */
        WSA_QOS_BAD_STYLE = (WSABASEERR + 1012)
    '  unknown or conflicting style */
        WSA_QOS_BAD_OBJECT = (WSABASEERR + 1013)
    '  problem with some part of the filterspec or providerspecific
    '  * buffer in general */
        WSA_QOS_TRAFFIC_CTRL_ERROR = (WSABASEERR + 1014)
    '  problem with some part of the flowspec */
        WSA_QOS_GENERIC_ERROR = (WSABASEERR + 1015)
    '  general error */
        WSA_QOS_ESERVICETYPE = (WSABASEERR + 1016)
    '  invalid service type in flowspec */
        WSA_QOS_EFLOWSPEC = (WSABASEERR + 1017)
    '  invalid flowspec */
        WSA_QOS_EPROVSPECBUF = (WSABASEERR + 1018)
    '  invalid provider specific buffer */
        WSA_QOS_EFILTERSTYLE = (WSABASEERR + 1019)
    '  invalid filter style */
        WSA_QOS_EFILTERTYPE = (WSABASEERR + 1020)
    '  invalid filter type */
        WSA_QOS_EFILTERCOUNT = (WSABASEERR + 1021)
    '  incorrect number of filters */
        WSA_QOS_EOBJLENGTH = (WSABASEERR + 1022)
    '  invalid object length */
        WSA_QOS_EFLOWCOUNT = (WSABASEERR + 1023)
    '  incorrect number of flows */
        WSA_QOS_EUNKOWNPSOBJ = (WSABASEERR + 1024)
    '  unknown object in provider specific buffer */
        WSA_QOS_EPOLICYOBJ = (WSABASEERR + 1025)
    '  invalid policy object in provider specific buffer */
        WSA_QOS_EFLOWDESC = (WSABASEERR + 1026)
    '  invalid flow descriptor in the list */
        WSA_QOS_EPSFLOWSPEC = (WSABASEERR + 1027)
    '  inconsistent flow spec in provider specific buffer */
        WSA_QOS_EPSFILTERSPEC = (WSABASEERR + 1028)
    '  invalid filter spec in provider specific buffer */
        WSA_QOS_ESDMODEOBJ = (WSABASEERR + 1029)
    '  invalid shape discard mode object in provider specific buffer */
        WSA_QOS_ESHAPERATEOBJ = (WSABASEERR + 1030)
    '  invalid shaping rate object in provider specific buffer */
        WSA_QOS_RESERVED_PETYPE = (WSABASEERR + 1031)
        WSA_SECURE_HOST_NOT_FOUND = 11032
 
    '  Name based IPSEC policy could not be added.
        WSA_IPSEC_NAME_POLICY_ERROR = 11033
        
        WSA_IO_PENDING = (ERROR_IO_PENDING)
        WSA_IO_INCOMPLETE = (ERROR_IO_INCOMPLETE)
        WSA_INVALID_HANDLE = (ERROR_INVALID_HANDLE)
        WSA_INVALID_PARAMETER = (ERROR_INVALID_PARAMETER)
        WSA_NOT_ENOUGH_MEMORY = (ERROR_NOT_ENOUGH_MEMORY)
        WSA_OPERATION_ABORTED = (ERROR_OPERATION_ABORTED)
        WSA_INVALID_EVENT = (0)
        WSA_MAXIMUM_WAIT_EVENTS = (MAXIMUM_WAIT_OBJECTS)
        WSA_WAIT_FAILED = (WAIT_FAILED)
        WSA_WAIT_EVENT_0 = (WAIT_OBJECT_0)
        WSA_WAIT_IO_COMPLETION = (WAIT_IO_COMPLETION)
        WSA_WAIT_TIMEOUT = (WAIT_TIMEOUT)
        WSA_INFINITE = (INFINITE)
        
    End Enum

    Public Const WSADESCRIPTION_LEN  = 256
    Public Const WSASYS_STATUS_LEN  = 128

    Public Type WSADATA                                ' typedef struct WSAData {
        wVersion As Integer                            ' WORD                    wVersion;
        wHighVersion As Integer                        ' WORD                    wHighVersion;
        #If Win64 Then                                 ' #ifdef _WIN64
            iMaxSockets As Integer                     '     unsigned short          iMaxSockets;
            iMaxUdpDg As Integer                       '     unsigned short          iMaxUdpDg;
            lpVenderInfo As LongPtr                    '     char FAR *              lpVendorInfo;
            szDescription(WSADESCRIPTION_LEN) As Byte  '     char                    szDescription[WSADESCRIPTION_LEN+1];
            szSystemStatus(WSASYS_STATUS_LEN) As Byte  '     char                    szSystemStatus[WSASYS_STATUS_LEN+1];
        #Else                                          ' #else
            szDescription(WSADESCRIPTION_LEN) As Byte  '     char                    szDescription[WSADESCRIPTION_LEN+1];
            szSystemStatus(WSASYS_STATUS_LEN) As Byte  '     char                    szSystemStatus[WSASYS_STATUS_LEN+1];
            iMaxSockets As Integer                     '     unsigned short          iMaxSockets;
            iMaxUdpDg As Integer                       '     unsigned short          iMaxUdpDg;
            lpVenderInfo As LongPtr                    '     char FAR *              lpVendorInfo;
        #End If                                        ' #endif
    End Type                                        ' } WSADATA,

    Public Enum WS_FD_EVENTS
        FD_READ_BIT = 0
        FD_READ = (1 << FD_READ_BIT)
        FD_WRITE_BIT = 1
        FD_WRITE = (1 << FD_WRITE_BIT)
        FD_OOB_BIT = 2
        FD_OOB = (1 << FD_OOB_BIT)
        FD_ACCEPT_BIT = 3
        FD_ACCEPT = (1 << FD_ACCEPT_BIT)
        FD_CONNECT_BIT = 4
        FD_CONNECT = (1 << FD_CONNECT_BIT)
        FD_CLOSE_BIT = 5
        FD_CLOSE = (1 << FD_CLOSE_BIT)
        FD_QOS_BIT = 6
        FD_QOS = (1 << FD_QOS_BIT)
        FD_GROUP_QOS_BIT = 7
        FD_GROUP_QOS = (1 << FD_GROUP_QOS_BIT)
        FD_ROUTING_INTERFACE_CHANGE_BIT = 8
        FD_ROUTING_INTERFACE_CHANGE = (1 << FD_ROUTING_INTERFACE_CHANGE_BIT)
        FD_ADDRESS_LIST_CHANGE_BIT = 9
        FD_ADDRESS_LIST_CHANGE = (1 << FD_ADDRESS_LIST_CHANGE_BIT)
        FD_MAX_EVENTS = 10
        FD_ALL_EVENTS = ((1 << FD_MAX_EVENTS) - 1)
    End Enum

    Public Enum WS_PROTO_FAMILY
        PF_UNSPEC = AF_UNSPEC
        PF_UNIX = AF_UNIX
        PF_INET = AF_INET
        PF_IMPLINK = AF_IMPLINK
        PF_PUP = AF_PUP
        PF_CHAOS = AF_CHAOS
        PF_NS = AF_NS
        PF_IPX = AF_IPX
        PF_ISO = AF_ISO
        PF_OSI = AF_OSI
        PF_ECMA = AF_ECMA
        PF_DATAKIT = AF_DATAKIT
        PF_CCITT = AF_CCITT
        PF_SNA = AF_SNA
        PF_DECnet = AF_DECnet
        PF_DLI = AF_DLI
        PF_LAT = AF_LAT
        PF_HYLINK = AF_HYLINK
        PF_APPLETALK = AF_APPLETALK
        PF_VOICEVIEW = AF_VOICEVIEW
        PF_FIREFOX = AF_FIREFOX
        PF_UNKNOWN1 = AF_UNKNOWN1
        PF_BAN = AF_BAN
        PF_ATM = AF_ATM
        PF_INET6 = AF_INET6
        PF_BTH = AF_BTH
    End Enum

    Public Const MAXGETHOSTSTRUCT              As Long = 1024

    Public Enum WS_SOCKET_TYPES
        INVALID_SOCKET = 0
        SOCKET_ERROR = (-1)
        FROM_PROTOCOL_INFO = (-1)
        SOCK_STREAM = 1 /* stream socket */
        SOCK_DGRAM = 2 /* datagram socket */
        SOCK_RAW = 3 /* raw-protocol interface */
        SOCK_RDM = 4 /* reliably-delivered message */
        SOCK_SEQPACKET = 5 /* sequenced packet stream */
    End Enum

    Public Enum WS_SNDRCV_FLAGS
        MSG_OOB = &H1 /* process out-of-band data */
        MSG_PEEK = &H2 /* peek at incoming message */
        MSG_DONTROUTE = &H4 /* send without using routing tables */
        MSG_WAITALL = &H8 /* do not complete until packet is completely filled */
        MSG_PUSH_IMMEDIATE = &H20 /* Do not delay receive request completion if data is available */
        MSG_PARTIAL = &H8000& /* partial send or recv for message xport */
        MSG_INTERRUPT = &H10 /* send/recv in the interrupt context */
        MSG_MAXIOVLEN = 16
        
        MSG_TRUNC = &H0100
        MSG_CTRUNC = &H0200
        MSG_BCAST = &H0400
        MSG_MCAST = &H0800
        MSG_ERRQUEUE = &H1000
    End Enum

    Public Type ws_timeval
        tv_sec As Long ' /* seconds */
        tv_usec As Long '  /* and microseconds */
    End Type

    Public Enum WS_SHUTDOWN_TYPES
        SD_RECEIVE = &H00
        SD_SEND = &H01
        SD_BOTH = &H02
    End Enum

    Public Const SOMAXCONN       = &H7fffffff
    Public Const IOCPARM_MASK    = &H7f /* parameters must be < 128 bytes */
    Public Enum WS_IOCTL_FLAGS
        IOC_VOID = &H20000000 /* no parameters */
        IOC_OUT = &H40000000 /* copy out parameters */
        IOC_IN = &H80000000 /* copy in parameters */
        IOC_INOUT = (IOC_IN Or IOC_OUT) /* 0x20000000 distinguishes new & old ioctl's */
        IOC_UNIX = &H00000000
        IOC_WS2 = &H08000000
        IOC_PROTOCOL = &H10000000
        IOC_VENDOR = &H18000000
        IOC_WSK = (IOC_WS2 Or &H07000000)
    End Enum
    Public Enum WS_IOCTL_CODES
        FIONREAD = &H4004667f
        FIONBIO = &H8004667e
        FIOASYNC = &H8004667d
        SIOCSHIWAT = &H80047300
        SIOCGHIWAT = &H40047301
        SIOCSLOWAT = &H80047302
        SIOCGLOWAT = &H40047303
        SIOCATMARK = &H40047307
    End Enum

    Public Type SOCKADDR_IPX
        sa_family As Integer
        sa_netnum(0 To 3) As Byte
        sa_nodenum(0 To 5) As Byte
        sa_socket As Integer
    End Type

    Public Enum WS_SOCKOPT_LEVEL
        SOL_SOCKET = &Hffff&
        SOL_IP = &Hfffb& ' (SOL_SOCKET-4)
        SOL_IPV6 = &Hfffa& ' (SOL_SOCKET-5)
        NSPROTO_IPX = 1000
        NSPROTO_SPX = 1256
        NSPROTO_SPXII = 1257
    
    End Enum

    Public Enum WS_SOCKOPTIONS
        SO_DEBUG = &H0001  ' turn on debugging info recording
        SO_ACCEPTCONN = &H0002  ' socket has had listen()
        SO_REUSEADDR = &H0004  ' allow local address reuse
        SO_KEEPALIVE = &H0008  ' keep connections alive
        SO_DONTROUTE = &H0010  ' just use interface addresses
        SO_BROADCAST = &H0020  ' permit sending of broadcast msgs
        SO_USELOOPBACK = &H0040  ' bypass hardware when possible
        SO_LINGER = &H0080  ' linger on close if data present
        SO_OOBINLINE = &H0100  ' leave received OOB data in line
        SO_DONTLINGER = Not SO_LINGER
        SO_EXCLUSIVEADDRUSE = Not SO_REUSEADDR
        SO_SNDBUF = &H1001  ' send buffer size
        SO_RCVBUF = &H1002  ' receive buffer size
        SO_SNDLOWAT = &H1003  ' send low-water mark
        SO_RCVLOWAT = &H1004  ' receive low-water mark
        SO_SNDTIMEO = &H1005  ' send timeout
        SO_RCVTIMEO = &H1006  ' receive timeout
        SO_ERROR = &H1007  ' get error status and clear
        SO_TYPE = &H1008  ' get socket type
        SO_BSP_STATE = &H1009  ' get socket 5-tuple state
        SO_GROUP_ID = &H2001  ' ID of a socket group
        SO_GROUP_PRIORITY = &H2002  ' the relative priority within a group
        SO_MAX_MSG_SIZE = &H2003  ' maximum message size
        SO_PROTOCOL_INFOA = &H2004 /* WSAPROTOCOL_INFOA structure */
        SO_PROTOCOL_INFOW = &H2005 /* WSAPROTOCOL_INFOW structure */
        SO_PROTOCOL_INFO = SO_PROTOCOL_INFOW
    
        PVD_CONFIG = &H3001
        SO_CONDITIONAL_ACCEPT = &H3002  ' enable true conditional accept:
                                        '  connection is not ack-ed to the
                                        '  other side until conditional
                                        '  function returns CF_ACCEPT
        SO_PAUSE_ACCEPT = &H3003  ' pause accepting new connections
        SO_COMPARTMENT_ID = &H3004  ' get/set the compartment for a socket
    ' #if (_WIN32_WINNT >= 0x0600)
        SO_RANDOMIZE_PORT = &H3005  ' randomize assignment of wildcard ports
        SO_PORT_SCALABILITY = &H3006  ' enable port scalability
        SO_REUSE_UNICASTPORT = &H3007  ' defer ephemeral port allocation for
                                        '  outbound connections
        SO_REUSE_MULTICASTPORT = &H3008  ' enable port reuse and disable unicast
                                          ' reception.
        SO_ORIGINAL_DST = &H300F  ' Query the original destination address
                                    '  of a redirected connection.
        IP6T_SO_ORIGINAL_DST = SO_ORIGINAL_DST
    
        SO_CONNDATA = &H7000
        SO_CONNOPT = &H7001
        SO_DISCDATA = &H7002
        SO_DISCOPT = &H7003
        SO_CONNDATALEN = &H7004
        SO_CONNOPTLEN = &H7005
        SO_DISCDATALEN = &H7006
        SO_DISCOPTLEN = &H7007
        SO_OPENTYPE = &H7008
        SO_MAXDG = &H7009
        SO_MAXPATHDG = &H700A
        SO_UPDATE_ACCEPT_CONTEXT = &H700B
        SO_CONNECT_TIME = &H700C
        TCP_NODELAY = &H0001
        TCP_BSDURGENT = &H7000
    
        SO_SYNCHRONOUS_ALERT = &H10
        SO_SYNCHRONOUS_NONALERT = &H20
    
        IPX_PTYPE = &H4000
        IPX_FILTERPTYPE = &H4001
        IPX_STOPFILTERPTYPE = &H4003
        IPX_DSTYPE = &H4002
        IPX_EXTENDED_ADDRESS = &H4004
        IPX_RECVHDR = &H4005
        IPX_MAXSIZE = &H4006
        IPX_ADDRESS = &H4007
        IPX_GETNETINFO = &H4008
        IPX_GETNETINFO_NORIP = &H4009
        IPX_SPXGETCONNECTIONSTATUS = &H400B
        IPX_ADDRESS_NOTIFY = &H400C
        IPX_MAX_ADAPTER_NUM = &H400D
        IPX_RERIPNETNUMBER = &H400E
        IPX_RECEIVE_BROADCAST = &H400F
        IPX_IMMEDIATESPXACK = &H4010
        
    End Enum

    Public Type sockproto
        sp_family As Integer 'u_short '       /* address family */
        sp_protocol As Integer '_short '     /* protocol */
    End Type
    
    Public Type IPX_ADDRESS_DATA
        adapternum As Long  '* input: 0-based adapter number */
        netnum(0 To 3) As Byte '* output: IPX network number */
        nodenum(0 To 5) As Byte '* output: IPX node address */
        wan As Byte '* output: TRUE = adapter is on a wan link */
        status As Byte '* output: TRUE = wan link is up (or adapter is not wan) */
        maxpkt As Long '* output: max packet size, not including IPX header */
        linkspeed As Long '* output: link speed in 100 bytes/sec (i.e. 96 == 9600 bps) */
    End Type
    Public Type IPX_NETNUM_DATA
        netnum(0 To 3) As Byte '* input: IPX network number */
        hopcount As Integer '* output: hop count to this network, in machine order */
        netdelay As Integer '* output: tick count to this network, in machine order */
        cardnum As Long '* output: 0-based adapter number used to route to this net;
        '*         can be used as adapternum input to IPX_ADDRESS */
        router(0 To 5) As Byte '* output: MAC address of the next hop router, zeroed if
                                  'the network is directly attached
    End Type
    Public Type IPX_SPXCONNSTATUS_DATA
        ConnectionState As Byte
        WatchDogActive As Byte
        LocalConnectionId As Integer
        RemoteConnectionId As Integer
        LocalSequenceNumber As Integer
        LocalAckNumber As Integer
        LocalAllocNumber As Integer
        RemoteAckNumber As Integer
        RemoteAllocNumber As Integer
        LocalSocket As Integer
        ImmediateAddress(0 To 5) As Byte
        RemoteNetwork(0 To 3) As Byte
        RemoteNode(0 To 5) As Byte
        RemoteSocket As Integer
        RetransmissionCount As Integer
        EstimatedRoundTripDelay As Integer 'In milliseconds
        RetransmittedPackets As Integer
        SuppressedPacket As Integer
    End Type

    Public Enum WS_IP_OPTIONS
        IP_OPTIONS = 1 /* set/get IP per-packet options */
        IP_MULTICAST_IF = 2 /* set/get IP multicast interface */
        IP_MULTICAST_TTL = 3 /* set/get IP multicast timetolive */
        IP_MULTICAST_LOOP = 4 /* set/get IP multicast loopback */
        IP_ADD_MEMBERSHIP = 5 /* add an IP group membership */
        IP_DROP_MEMBERSHIP = 6 /* drop an IP group membership */
        IP_TTL = 7 /* set/get IP Time To Live */
        IP_TOS = 8 /* set/get IP Type Of Service */
        IP_DONTFRAGMENT = 9 /* set/get IP Don't Fragment flag */
        IP_DEFAULT_MULTICAST_TTL = 1 /* normally limit m'casts to 1 hop */
        IP_DEFAULT_MULTICAST_LOOP = 1 /* normally hear sends if a member */
        IP_MAX_MEMBERSHIPS = 20 /* per socket; must fit in one mbuf */
    End Enum

    Public Type CSADDR_INFO
        LocalAddr As SOCKET_ADDRESS
        RemoteAddr As SOCKET_ADDRESS
        iSocketType As WS_SOCKET_TYPES
        iProtocol As IPPROTO
    End Type
    Public Type LINGER
        l_onoff As Integer
        l_linger As Integer
    End Type

    Public Type hostent
        h_name As LongPtr /* official name of host */
        h_aliases As LongPtr /* alias list */
        h_addrtype As ADDRESS_FAMILIES /* host address type */
        h_length As Integer /* length of address */
        h_addr_list As LongPtr /* list of addresses */
    End Type
    
    Public Type netent
        n_name As LongPtr /* official name of net */
        n_aliases As LongPtr /* alias list */
        n_addrtype As ADDRESS_FAMILIES /* net address type */
        n_net As Long /* network # */
    End Type

    Public Type servent
        s_name As LongPtr /* official service name */
        s_aliases As LongPtr /* alias list */
        #If Win64 Then
        s_proto As LongPtr /* protocol to use */
        s_port As Integer /* port # */
        #Else
        s_port As Integer /* port # */
        s_proto As LongPtr /* protocol to use */
        #End If
    End Type
    
    Public Type protoent
        p_name As LongPtr /* official name of net */
        p_aliases As LongPtr /* alias list */
        p_proto As Integer /* protocol # */
    End Type
    
    Public Const INADDR_ANY  = &H00000000
    Public Const INADDR_LOOPBACK  = &H7f000001
    Public Const INADDR_BROADCAST  = &Hffffffff
    Public Const INADDR_NONE  = &Hffffffff

    Public Enum IPPROTO
        IPPROTO_IP = 0 /* dummy for IP */
        IPPROTO_ICMP = 1 /* control message protocol */
        IPPROTO_IGMP = 2 /* group management protocol */
        IPPROTO_GGP = 3 /* gateway^2 (deprecated) */
        IPPROTO_ENCAP = 4 /* IP in IP encapsulation */
        IPPROTO_TCP = 6 /* tcp */
        IPPROTO_EGP = 8 /* exterior gateway protocol */
        IPPROTO_PUP = 12 /* pup */
        IPPROTO_UDP = 17 /* user datagram protocol */
        IPPROTO_IDP = 22 /* xns idp */
        IPPROTO_IPV6 = 41 /* IPv6 encapsulated in IP */
        IPPROTO_ROUTING = 43 /* Routing header for IPv6 */
        IPPROTO_FRAGMENT = 44 /* Fragment header for IPv6 */
        IPPROTO_RSVP = 46 /* rsvp */
        IPPROTO_ESP = 50 /* IPsec Encap. Sec. Payload */
        IPPROTO_AH = 51 /* IPsec Authentication Hdr. */
        IPPROTO_ICMPV6 = 58 /* ICMP for IPv6 */
        IPPROTO_NONE = 59 /* No next header for IPv6 */
        IPPROTO_DSTOPTS = 60 /* Destination options */
        IPPROTO_HELLO = 63 /* "hello" routing protocol */
        IPPROTO_ND = 77 /* UNOFFICIAL net disk proto */
        IPPROTO_EON = 80 /* ISO clnp */
        IPPROTO_OSPF = 89 /* OSPF */
        IPPROTO_PIM = 103 /* PIM routing protocol */
        IPPROTO_SCTP = 132 /* Stream Control */
        IPPROTO_RAW = 255 /* raw IP packet */
    End Enum

    /*
    * Port/socket numbers: network standard functions
    */
    Public Const IPPORT_ECHO            = 7
    Public Const IPPORT_DISCARD         = 9
    Public Const IPPORT_SYSTAT          = 11
    Public Const IPPORT_DAYTIME         = 13
    Public Const IPPORT_NETSTAT         = 15
    Public Const IPPORT_CHARGEN         = 19
    Public Const IPPORT_FTPDATA         = 20
    Public Const IPPORT_FTP             = 21
    Public Const IPPORT_SSH             = 22
    Public Const IPPORT_TELNET          = 23
    Public Const IPPORT_SMTP            = 25
    Public Const IPPORT_TIMESERVER      = 37
    Public Const IPPORT_NAMESERVER      = 42
    Public Const IPPORT_WHOIS           = 43
    Public Const IPPORT_DOMAIN          = 53
    Public Const IPPORT_MTP             = 57

    /*
    * Port/socket numbers: host specific functions
    */
    Public Const IPPORT_BOOTPS          = 67
    Public Const IPPORT_BOOTPC          = 68
    Public Const IPPORT_TFTP            = 69
    Public Const IPPORT_GOPHER          = 70
    Public Const IPPORT_RJE             = 77
    Public Const IPPORT_FINGER          = 79
    Public Const IPPORT_HTTP            = 80
    Public Const IPPORT_TTYLINK         = 87
    Public Const IPPORT_SUPDUP          = 95
    Public Const IPPORT_POP3            = 110
    Public Const IPPORT_SUNRPC          = 111
    Public Const IPPORT_AUTH            = 113
    Public Const IPPORT_NTP             = 123
    Public Const IPPORT_NETBIOS_NS      = 137
    Public Const IPPORT_NETBIOS_DGM     = 138
    Public Const IPPORT_NETBIOS_SSN     = 139
    Public Const IPPORT_SNMP            = 161
    Public Const IPPORT_SNMPTRAP        = 162
    Public Const IPPORT_LDAP            = 389
    Public Const IPPORT_SLP             = 427
    Public Const IPPORT_MIP             = 434
    Public Const IPPORT_HTTPS           = 443
    Public Const IPPORT_SMB             = 445
    Public Const IPPORT_SSMTP           = 465
    Public Const IPPORT_IKE             = 500
    Public Const IPPORT_IKE_NATT        = 4500
    /*
    * UNIX TCP sockets
    */
    Public Const IPPORT_EXECSERVER      = 512
    Public Const IPPORT_LOGINSERVER     = 513
    Public Const IPPORT_CMDSERVER       = 514
    Public Const IPPORT_PRINTER         = 515
    Public Const IPPORT_EFSSERVER       = 520
    Public Const IPPORT_SNNTP           = 563
    Public Const IPPORT_POP3S           = 995
    Public Const IPPORT_RESERVED        = 1024
    Public Const IPPORT_USERRESERVED    = 5000
    Public Const IPPORT_HTTPALT         = 8080
    Public Const IPPORT_BINKP           = 24554
    /*
    * UNIX UDP sockets
    */
    Public Const IPPORT_IDENT           = 113
    Public Const IPPORT_BIFFUDP         = 512
    Public Const IPPORT_WHOSERVER       = 513
    Public Const IPPORT_SYSLOG          = 514
    Public Const IPPORT_ROUTESERVER     = 520
    Public Const IPPORT_DHCPV6C         = 546
    Public Const IPPORT_DHCPV6S         = 547
    Public Const IPPORT_SOCKS           = 1080

    Public Const SIO_RCVALL  = &H18000000 Or &H80000000 Or 1& '_WSAIOW(IOC_VENDOR, 1)
    Public Const SIO_RCVALL_MCAST  = &H18000000 Or &H80000000 Or 2& '_WSAIOW(IOC_VENDOR, 2)
    Public Const SIO_RCVALL_IGMPMCAST  = &H18000000 Or &H80000000 Or 3& '_WSAIOW(IOC_VENDOR, 3)
    Public Const SIO_KEEPALIVE_VALS  = &H18000000 Or &H80000000 Or 4& '_WSAIOW(IOC_VENDOR, 4)
    Public Const SIO_ABSORB_RTRALERT  = &H18000000 Or &H80000000 Or 5& '_WSAIOW(IOC_VENDOR, 5)
    Public Const SIO_UCAST_IF  = &H18000000 Or &H80000000 Or 6& '_WSAIOW(IOC_VENDOR, 6)
    Public Const SIO_LIMIT_BROADCASTS  = &H18000000 Or &H80000000 Or 7& '_WSAIOW(IOC_VENDOR, 7)
    Public Const SIO_INDEX_BIND  = &H18000000 Or &H80000000 Or 8& '_WSAIOW(IOC_VENDOR, 8)
    Public Const SIO_INDEX_MCASTIF  = &H18000000 Or &H80000000 Or 9& '_WSAIOW(IOC_VENDOR, 9)
    Public Const SIO_INDEX_ADD_MCAST  = &H18000000 Or &H80000000 Or 10& '_WSAIOW(IOC_VENDOR, 10)
    Public Const SIO_INDEX_DEL_MCAST  = &H18000000 Or &H80000000 Or 11& '_WSAIOW(IOC_VENDOR, 11)
    Public Const SIO_RCVALL_MCAST_IF  = &H18000000 Or &H80000000 Or 13& '_WSAIOW(IOC_VENDOR, 13)
    Public Const SIO_RCVALL_IF  = &H18000000 Or &H80000000 Or 14& '_WSAIOW(IOC_VENDOR, 14)
    Public Const SIO_LOOPBACK_FAST_PATH  = &H18000000 Or &H80000000 Or 16& '_WSAIOW(IOC_VENDOR, 16)
    Public Const SIO_TCP_INITIAL_RTO  = &H18000000 Or &H80000000 Or 17& '_WSAIOW(IOC_VENDOR, 17)
    Public Const SIO_APPLY_TRANSPORT_SETTING  = &H18000000 Or &H80000000 Or 19& '_WSAIOW(IOC_VENDOR, 19)
    Public Const SIO_QUERY_TRANSPORT_SETTING  = &H18000000 Or &H80000000 Or 20& '_WSAIOW(IOC_VENDOR, 20)
    Public Const SIO_TCP_SET_ICW  = &H18000000 Or &H80000000 Or 22& '_WSAIOW(IOC_VENDOR, 22)
    Public Const SIO_TCP_SET_ACK_FREQUENCY  = &H18000000 Or &H80000000 Or 23& '_WSAIOW(IOC_VENDOR, 23)
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_RS3)
    Public Const SIO_SET_PRIORITY_HINT  = &H18000000 Or &H80000000 Or 24& '_WSAIOW(IOC_VENDOR, 24)
    ' #endif // NTDDI_VERSION >= NTDDI_WIN10_RS3
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_FE)
    Public Const SIO_PRIORITY_HINT  = SIO_SET_PRIORITY_HINT
    ' #endif // NTDDI_VERSION >= NTDDI_WIN10_FE
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_RS2)
    Public Const SIO_TCP_INFO  = &H18000000 Or &H80000000 Or 39& '_WSAIORW(IOC_VENDOR, 39)
    ' #endif // NTDDI_VERSION >= NTDDI_WIN10_RS2
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_VB)
    '  Socket IOCTL for port sharing per processor sockets.
    Public Const SIO_CPU_AFFINITY  = &H18000000 Or &H80000000 Or 21& '_WSAIOW(IOC_VENDOR, 21)
    
    
    Public Const SIO_UDP_CONNRESET = (IOC_IN Or (IOC_VENDOR) Or (12))
    Public Const SIO_SOCKET_CLOSE_NOTIFY = (IOC_IN Or (IOC_VENDOR) Or (13))
    Public Const SIO_UDP_NETRESET = (IOC_IN Or (IOC_VENDOR) Or (14))
 
    'Alias WSAOVERLAPPED As OVERLAPPED
    Public Type WSAOVERLAPPED
        Internal As LongPtr
        InternalHigh As LongPtr
        #If Win64 Then
        OffsetsOrPtr As LongLong
        #Else
        OffsetOrPtr As Long
        OffsetHigh As Long
        #End If
        hEvent As LongPtr
    End Type
    ' typedef
    ' void
    ' (CALLBACK * LPWSAOVERLAPPED_COMPLETION_ROUTINE)(
        ' IN DWORD dwError,
        ' IN DWORD cbTransferred,
        ' IN LPWSAOVERLAPPED lpOverlapped,
        ' IN DWORD dwFlags
        ' );
    Public Delegate Sub WsaOverlappedCompletionRoutine (ByVal dwError As Long, ByVal cbTransferred As Long, lpOverlapped As WSAOVERLAPPED, ByVal dwFlags As Long)
    
    Public Declare PtrSafe Function WSAStartup Lib "ws2_32" (ByVal wVersionRequired As Integer, lpWSAData As WSADATA) As WS_ERRORS
    Public Declare PtrSafe Function WSACleanup Lib "ws2_32" () As Long
    Public Declare PtrSafe Function WSAGetLastError Lib "ws2_32" () As WS_ERRORS
    Public Declare PtrSafe Sub WSASetLastError Lib "ws2_32.dll" (ByVal iError As Long)
    Public Declare PtrSafe Function WSAAsyncGetHostByName Lib "ws2_32" (ByVal hWnd As LongPtr, ByVal wMsg As Long, ByVal strHostName As String, lpBuf As Any, ByVal BufLen As Long) As LongPtr
    Public Declare PtrSafe Function WSAAsyncGetHostByAddr Lib "ws2_32" (ByVal hWnd As LongPtr, ByVal wMsg As Long, ByVal addr As String, ByVal nLen As Long, ByVal nType As WS_PROTO_FAMILY, lpBuf As Any, ByVal BufLen As Long) As LongPtr
    Public Declare PtrSafe Function WSAAsyncSelect Lib "ws2_32" (ByVal s As LongPtr, ByVal hWnd As LongPtr, ByVal wMsg As Long, ByVal lEvent As WS_FD_EVENTS) As Long
    Public Declare PtrSafe Function WSACancelAsyncRequest Lib "ws2_32" (ByVal hAsyncTaskHandle As LongPtr) As Long
    ' Public Declare PtrSafe Function WSAIoctl Lib "ws2_32" (ByVal s As LongPtr, ByVal dwIoControlCode As Long, lpvInBuffer As Any, ByVal cbInBuffer As Long, lpvOutBuffer As Any, ByVal cbOutBuffer As Long, lpcbBytesReturned As Long, lpOverlapped As WSAOVERLAPPED, ByVal lpCompletionRoutine As WsaOverlappedCompletionRoutine) As Long
    Public Declare PtrSafe Function WSAIoctl Lib "ws2_32" (ByVal s As LongPtr, ByVal dwIoControlCode As Long, lpvInBuffer As Any, ByVal cbInBuffer As Long, lpvOutBuffer As Any, ByVal cbOutBuffer As Long, lpcbBytesReturned As Long, lpOverlapped As WSAOVERLAPPED, ByVal lpCompletionRoutine As LongPtr) As Long
   Public Declare PtrSafe Function WSASocketA Lib "ws2_32" (ByVal af As ADDRESS_FAMILIES, ByVal type As WS_SOCKET_TYPES, ByVal protocol As IPPROTO, lpProtocolInfo As WSAPROTOCOL_INFOA, ByVal g As WsaSocketGroupFlags, ByVal dwFlags As WsaSocketFlags) As LongPtr
    Public Declare PtrSafe Function WSASocketW Lib "ws2_32" (ByVal af As ADDRESS_FAMILIES, ByVal type As WS_SOCKET_TYPES, ByVal protocol As IPPROTO, lpProtocolInfo As WSAPROTOCOL_INFOW, ByVal g As WsaSocketGroupFlags, ByVal dwFlags As WsaSocketFlags) As LongPtr
    Public DeclareWide PtrSafe Function WSASocket Lib "ws2_32" Alias "WSASocketW" (ByVal af As ADDRESS_FAMILIES, ByVal type As WS_SOCKET_TYPES, ByVal protocol As IPPROTO, lpProtocolInfo As WSAPROTOCOL_INFO, ByVal g As WsaSocketGroupFlags, ByVal dwFlags As WsaSocketFlags) As LongPtr
    Public Declare PtrSafe Function ws_ntohl Lib "ws2_32" Alias "ntohl" (ByVal netlong As Long) As Long
    Public Declare PtrSafe Function ws_htonl Lib "ws2_32" Alias "htonl" (ByVal hostlong As Long) As Long
    Public Declare PtrSafe Function ws_htons Lib "ws2_32" Alias "htons" (ByVal hostshort As Long) As Integer
    Public Declare PtrSafe Function ws_ntohs Lib "ws2_32" Alias "ntohs" (ByVal netshort As Long) As Integer
    Public Declare PtrSafe Function ws_inet_ntoa Lib "ws2_32" Alias "inet_ntoa" (ByVal inn As Long) As LongPtr
    Public Declare PtrSafe Function ntohl Lib "ws2_32" (ByVal netlong As Long) As Long
    Public Declare PtrSafe Function ntohs Lib "ws2_32" (ByVal netlong As Integer) As Integer
    Public Declare PtrSafe Function htonl Lib "ws2_32" (ByVal netlong As Long) As Long
    Public Declare PtrSafe Function htons Lib "ws2_32" (ByVal netlong As Integer) As Integer
    Public Declare PtrSafe Function inet_ntoa Lib "ws2_32" (ByVal inn As Long) As LongPtr
    #If WDL_NO_WS_ALIASES Then
    Public Declare PtrSafe Function connect Lib "ws2_32" (ByVal s As LongPtr, ByRef Name As SOCKADDR_IN, ByVal namelen As Long) As Long
    Public Declare PtrSafe Function socket Lib "ws2_32" (ByVal af As ADDRESS_FAMILIES, ByVal s_type As WS_SOCKET_TYPES, ByVal Protocol As IPPROTO) As LongPtr
    Public Declare PtrSafe Function bind Lib "ws2_32" (ByVal s As LongPtr, ByRef Name As SOCKADDR_IN, ByRef namelen As Long) As Long
    Public Declare PtrSafe Function closesocket Lib "ws2_32" (ByVal s As LongPtr) As Long
    Public Declare PtrSafe Function recv Lib "ws2_32" (ByVal s As LongPtr, ByRef buf As Any, ByVal BufLen As Long, ByVal Flags As WS_SNDRCV_FLAGS) As Long
    Public Declare PtrSafe Function recvfrom Lib "ws2_32" (ByVal s As LongPtr, ByRef buf As Any, ByVal BufLen As Long, ByVal Flags As WS_SNDRCV_FLAGS, ByRef from As SOCKADDR_IN, ByRef fromlen As Long) As Long
    Public Declare PtrSafe Function send Lib "ws2_32" (ByVal s As LongPtr, ByRef buf As Any, ByVal BufLen As Long, ByVal Flags As WS_SNDRCV_FLAGS) As Long
    Public Declare PtrSafe Function sendto Lib "ws2_32" (ByVal s As LongPtr, ByRef buf As Any, ByVal BufLen As Long, ByVal Flags As WS_SNDRCV_FLAGS, ByRef toaddr As SOCKADDR_IN, ByVal tolen As Long) As Long
    Public Declare PtrSafe Function select Lib "ws2_32" (ByVal nfds As Long, readfds As Any, writefds As Any, exceptfds As Any, timeout As ws_timeval) As Long
    Public Declare PtrSafe Function getpeername Lib "ws2_32" (ByVal s As LongPtr, ByRef Name As SOCKADDR_IN, ByRef namelen As Long) As Long
    Public Declare PtrSafe Function getsockname Lib "ws2_32" (ByVal s As LongPtr, ByRef Name As SOCKADDR_IN, ByRef namelen As Long) As Long
    Public Declare PtrSafe Function shutdown Lib "ws2_32" (ByVal s As LongPtr, ByVal How As WS_SHUTDOWN_TYPES) As Long
    Public Declare PtrSafe Function listen Lib "ws2_32" (ByVal s As LongPtr, ByVal backlog As Long) As Long
    Public Declare PtrSafe Function accept Lib "ws2_32" (ByVal s As LongPtr, Addr As Any, addrlen As Any) As Long
    Public Declare PtrSafe Function ioctlsocket Lib "ws2_32" (ByVal s As LongPtr, ByVal cmd As WS_IOCTL_CODES, argp As Long) As Long
    Public Declare PtrSafe Function getsockopt Lib "ws2_32" (ByVal s As LongPtr, ByVal Level As WS_SOCKOPT_LEVEL, ByVal optname As WS_SOCKOPTIONS, optval As Any, optlen As Long) As Long
    Public Declare PtrSafe Function setsockopt Lib "ws2_32" (ByVal s As LongPtr, ByVal Level As WS_SOCKOPT_LEVEL, ByVal optname As WS_SOCKOPTIONS, optval As Any, ByVal optlen As Long) As Long
    Public Declare PtrSafe Function inet_addr Lib "ws2_32" (ByVal cp As String) As Long
    Public Declare PtrSafe Function gethostbyname Lib "ws2_32" (ByVal host_name As String) As LongPtr
    Public Declare PtrSafe Function gethostbyaddr Lib "ws2_32" (ByVal addr As LongPtr, ByVal len As Long, ByVal type As Long) As LongPtr
    Public Declare PtrSafe Function gethostname Lib "ws2_32" (ByVal host_name As String, ByVal namelen As Long) As Long
    Public Declare PtrSafe Function GetHostNameW Lib "ws2_32" (ByVal host_name As LongPtr, ByVal namelen As Long) As Long
    Public Declare PtrSafe Function getservbyname Lib "ws2_32" (ByVal name As String, ByVal proto As String) As LongPtr
    Public Declare PtrSafe Function getservbyport Lib "ws2_32" (ByVal port As Long, ByVal proto As String) As LongPtr
    Public Declare PtrSafe Function getprotobynumber Lib "ws2_32" (ByVal number As Long) As LongPtr
    Public Declare PtrSafe Function getprotobyname Lib "ws2_32" (ByVal name As String) As LongPtr
    #Else
    Public Declare PtrSafe Function ws_connect Lib "ws2_32" Alias "connect" (ByVal s As LongPtr, ByRef Name As SOCKADDR_IN, ByVal namelen As Long) As Long
    Public Declare PtrSafe Function ws_socket Lib "ws2_32" Alias "socket" (ByVal af As ADDRESS_FAMILIES, ByVal s_type As WS_SOCKET_TYPES, ByVal Protocol As IPPROTO) As LongPtr
    Public Declare PtrSafe Function ws_bind Lib "ws2_32" Alias "bind" (ByVal s As LongPtr, ByRef Name As SOCKADDR_IN, ByRef namelen As Long) As Long
    Public Declare PtrSafe Function ws_closesocket Lib "ws2_32" Alias "closesocket" (ByVal s As LongPtr) As Long
    Public Declare PtrSafe Function ws_recv Lib "ws2_32" Alias "recv" (ByVal s As LongPtr, ByRef buf As Any, ByVal BufLen As Long, ByVal Flags As WS_SNDRCV_FLAGS) As Long
    Public Declare PtrSafe Function ws_recvfrom Lib "ws2_32" Alias "recvfrom" (ByVal s As LongPtr, ByRef buf As Any, ByVal BufLen As Long, ByVal Flags As WS_SNDRCV_FLAGS, ByRef from As SOCKADDR_IN, ByRef fromlen As Long) As Long
    Public Declare PtrSafe Function ws_send Lib "ws2_32" Alias "send" (ByVal s As LongPtr, ByRef buf As Any, ByVal BufLen As Long, ByVal Flags As WS_SNDRCV_FLAGS) As Long
    Public Declare PtrSafe Function ws_sendto Lib "ws2_32" Alias "sendto" (ByVal s As LongPtr, ByRef buf As Any, ByVal BufLen As Long, ByVal Flags As WS_SNDRCV_FLAGS, ByRef toaddr As SOCKADDR_IN, ByVal tolen As Long) As Long
    Public Declare PtrSafe Function ws_select Lib "ws2_32" Alias "select" (ByVal nfds As Long, readfds As Any, writefds As Any, exceptfds As Any, timeout As ws_timeval) As Long
    Public Declare PtrSafe Function ws_getpeername Lib "ws2_32" Alias "getpeername" (ByVal s As LongPtr, ByRef Name As SOCKADDR_IN, ByRef namelen As Long) As Long
    Public Declare PtrSafe Function ws_getsockname Lib "ws2_32" Alias "getsockname" (ByVal s As LongPtr, ByRef Name As SOCKADDR_IN, ByRef namelen As Long) As Long
    Public Declare PtrSafe Function ws_shutdown Lib "ws2_32" Alias "shutdown" (ByVal s As LongPtr, ByVal How As WS_SHUTDOWN_TYPES) As Long
    Public Declare PtrSafe Function ws_listen Lib "ws2_32" Alias "listen" (ByVal s As LongPtr, ByVal backlog As Long) As Long
    Public Declare PtrSafe Function ws_accept Lib "ws2_32" Alias "accept" (ByVal s As LongPtr, Addr As Any, addrlen As Any) As Long
    Public Declare PtrSafe Function ws_ioctlsocket Lib "ws2_32" Alias "ioctlsocket" (ByVal s As LongPtr, ByVal cmd As WS_IOCTL_CODES, argp As Long) As Long
    Public Declare PtrSafe Function ws_getsockopt Lib "ws2_32" Alias "getsockopt" (ByVal s As LongPtr, ByVal Level As WS_SOCKOPT_LEVEL, ByVal optname As WS_SOCKOPTIONS, optval As Any, optlen As Long) As Long
    Public Declare PtrSafe Function ws_setsockopt Lib "ws2_32" Alias "setsockopt" (ByVal s As LongPtr, ByVal Level As WS_SOCKOPT_LEVEL, ByVal optname As WS_SOCKOPTIONS, optval As Any, ByVal optlen As Long) As Long
    Public Declare PtrSafe Function ws_inet_addr Lib "ws2_32" Alias "inet_addr" (ByVal cp As String) As Long
    Public Declare PtrSafe Function ws_gethostbyname Lib "ws2_32" Alias "gethostbyname" (ByVal host_name As String) As LongPtr
    Public Declare PtrSafe Function ws_gethostbyaddr Lib "ws2_32" Alias "gethostbyaddr" (ByVal addr As LongPtr, ByVal len As Long, ByVal type As Long) As LongPtr
    Public Declare PtrSafe Function ws_gethostname Lib "ws2_32" Alias "gethostname" (ByVal host_name As String, ByVal namelen As Long) As Long
    Public Declare PtrSafe Function GetHostNameA Lib "ws2_32" Alias "gethostname" (ByVal host_name As String, ByVal namelen As Long) As Long
    Public Declare PtrSafe Function GetHostNameW Lib "ws2_32" (ByVal host_name As LongPtr, ByVal namelen As Long) As Long
    Public DeclareWide PtrSafe Function GetHostName Lib "ws2_32" Alias "GetHostNameW" (ByVal host_name As String, ByVal namelen As Long) As Long
    Public Declare PtrSafe Function ws_getservbyname Lib "ws2_32" Alias "getservbyname" (ByVal name As String, ByVal proto As String) As LongPtr
    Public Declare PtrSafe Function ws_getservbyport Lib "ws2_32" Alias "getservbyport" (ByVal port As Long, ByVal proto As String) As LongPtr
    Public Declare PtrSafe Function ws_getprotobynumber Lib "ws2_32" Alias "getprotobynumber" (ByVal number As Long) As LongPtr
    Public Declare PtrSafe Function ws_getprotobyname Lib "ws2_32" Alias "getprotobyname" (ByVal name As String) As LongPtr
    #End If
    
    
    Public Enum WinsockNamespaces
        NS_ALL = (0)

        NS_SAP = (1)
        NS_NDS = (2)
        NS_PEER_BROWSE = (3)
        NS_SLP = (5)
        NS_DHCP = (6)

        NS_TCPIP_LOCAL = (10)
        NS_TCPIP_HOSTS = (11)
        NS_DNS = (12)
        NS_NETBT = (13)
        NS_WINS = (14)

        '#if= (_WIN32_WINNT >= 0x0501)
        NS_NLA = (15) /* Network Location Awareness */
        '#endif '= (_WIN32_WINNT >= 0x0501)

        '#if= (_WIN32_WINNT >= 0x0600)
        NS_BTH = (16) /* Bluetooth SDP Namespace */
        '#endif '= (_WIN32_WINNT >= 0x0600)

        NS_NBP = (20)

        NS_MS = (30)
        NS_STDA = (31)
        NS_NTDS = (32)

        '#if= (_WIN32_WINNT >= 0x0600)
        NS_EMAIL = (37)
        NS_PNRPNAME = (38)
        NS_PNRPCLOUD = (39)
        '#endif '= (_WIN32_WINNT >= 0x0600)

        NS_X500 = (40)
        NS_NIS = (41)
        NS_NISPLUS = (42)

        NS_WRQ = (50)

        NS_NETDES = (60) /* Network Designers Limited */
    End Enum
 
    Public Enum WSGetAddrByNameResFlags
        RES_UNUSED_1 = (&H00000001)
        RES_FLUSH_CACHE = (&H00000002)
        RES_SERVICE = (&H00000004)
    End Enum
    
    Public Const SERVICE_TYPE_VALUE_IPXPORTA  = "IpxSocket"
    Public Const SERVICE_TYPE_VALUE_IPXPORTW  = "IpxSocket"
    Public Const SERVICE_TYPE_VALUE_SAPIDA  = "SapId"
    Public Const SERVICE_TYPE_VALUE_SAPIDW  = "SapId"
    Public Const SERVICE_TYPE_VALUE_TCPPORTA  = "TcpPort"
    Public Const SERVICE_TYPE_VALUE_TCPPORTW  = "TcpPort"
    Public Const SERVICE_TYPE_VALUE_UDPPORTA  = "UdpPort"
    Public Const SERVICE_TYPE_VALUE_UDPPORTW  = "UdpPort"
    Public Const SERVICE_TYPE_VALUE_OBJECTIDA  = "ObjectId"
    Public Const SERVICE_TYPE_VALUE_OBJECTIDW  = "ObjectId"
    ' #ifdef UNICODE
    Public Const SERVICE_TYPE_VALUE_SAPID  = SERVICE_TYPE_VALUE_SAPIDW
    Public Const SERVICE_TYPE_VALUE_TCPPORT  = SERVICE_TYPE_VALUE_TCPPORTW
    Public Const SERVICE_TYPE_VALUE_UDPPORT  = SERVICE_TYPE_VALUE_UDPPORTW
    Public Const SERVICE_TYPE_VALUE_OBJECTID  = SERVICE_TYPE_VALUE_OBJECTIDW
    
    
    Public Type AFPROTOCOLS
        iAddressFamily As Long
        iProtocol As Long
    End Type
    
    Public Enum WSAECOMPARATOR
        COMP_EQUAL = 0
        COMP_NOTLESS
    End Enum
    Public Type WSAVERSION
        dwVersion As Long
        ecHow As WSAECOMPARATOR
    End Type
    
    Public Type WSAQUERYSETA
        dwSize As Long
        lpszServiceInstanceName As String
        lpServiceClassId As LongPtr 'LPUUID
        lpVersion As LongPtr 'LPWSAVERSION
        lpszComment As String
        dwNameSpace As WinsockNamespaces
        lpNSProviderId As LongPtr 'LPUUID
        lpszContext As String
        dwNumberOfProtocols As Long
        lpafpProtocols As LongPtr 'LPAFPROTOCOLS
        lpszQueryString As String
        dwNumberOfCsAddrs As Long
        lpcsaBuffer As LongPtr 'LPCSADDR_INFO
        dwOutputFlags As Long
        lpBlob As LongPtr 'LPBLOB
    End Type
    Public Type WSAQUERYSETW
        dwSize As Long
        lpszServiceInstanceName As LongPtr
        lpServiceClassId As LongPtr 'LPUUID
        lpVersion As LongPtr 'LPWSAVERSION
        lpszComment As LongPtr
        dwNameSpace As WinsockNamespaces
        lpNSProviderId As LongPtr 'LPUUID
        lpszContext As LongPtr
        dwNumberOfProtocols As Long
        lpafpProtocols As LongPtr 'LPAFPROTOCOLS
        lpszQueryString As LongPtr
        dwNumberOfCsAddrs As Long
        lpcsaBuffer As LongPtr 'LPCSADDR_INFO
        dwOutputFlags As Long
        lpBlob As LongPtr 'LPBLOB
    End Type
    'Alias WSAQUERYSET As WSAQUERYSETW
    Public Type WSAQUERYSET
        dwSize As Long
        lpszServiceInstanceName As LongPtr
        lpServiceClassId As LongPtr 'LPUUID
        lpVersion As LongPtr 'LPWSAVERSION
        lpszComment As LongPtr
        dwNameSpace As WinsockNamespaces
        lpNSProviderId As LongPtr 'LPUUID
        lpszContext As LongPtr
        dwNumberOfProtocols As Long
        lpafpProtocols As LongPtr 'LPAFPROTOCOLS
        lpszQueryString As LongPtr
        dwNumberOfCsAddrs As Long
        lpcsaBuffer As LongPtr 'LPCSADDR_INFO
        dwOutputFlags As Long
        lpBlob As LongPtr 'LPBLOB
    End Type
    
    Public Type WSAQUERYSET2A
        dwSize As Long
        lpszServiceInstanceName As String
        lpVersion As LongPtr 'LPWSAVERSION
        lpszComment As String
        dwNameSpace As WinsockNamespaces
        lpNSProviderId As LongPtr 'LPUUID
        lpszContext As String
        dwNumberOfProtocols As Long
        lpafpProtocols As LongPtr 'LPAFPROTOCOLS
        lpszQueryString As String
        dwNumberOfCsAddrs As Long
        lpcsaBuffer As LongPtr 'LPCSADDR_INFO
        dwOutputFlags As Long
        lpBlob As LongPtr 'LPBLOB
    End Type
    Public Type WSAQUERYSET2W
        dwSize As Long
        lpszServiceInstanceName As LongPtr
        lpVersion As LongPtr 'LPWSAVERSION
        lpszComment As LongPtr
        dwNameSpace As WinsockNamespaces
        lpNSProviderId As LongPtr 'LPUUID
        lpszContext As LongPtr
        dwNumberOfProtocols As Long
        lpafpProtocols As LongPtr 'LPAFPROTOCOLS
        lpszQueryString As LongPtr
        dwNumberOfCsAddrs As Long
        lpcsaBuffer As LongPtr 'LPCSADDR_INFO
        dwOutputFlags As Long
        lpBlob As LongPtr 'LPBLOB
    End Type
    
    Public Type WSAQUERYSET2
        dwSize As Long
        lpszServiceInstanceName As LongPtr
        lpVersion As LongPtr 'LPWSAVERSION
        lpszComment As LongPtr
        dwNameSpace As WinsockNamespaces
        lpNSProviderId As LongPtr 'LPUUID
        lpszContext As LongPtr
        dwNumberOfProtocols As Long
        lpafpProtocols As LongPtr 'LPAFPROTOCOLS
        lpszQueryString As LongPtr
        dwNumberOfCsAddrs As Long
        lpcsaBuffer As LongPtr 'LPCSADDR_INFO
        dwOutputFlags As Long
        lpBlob As LongPtr 'LPBLOB
    End Type
    
    Public Enum WSLookupFlags
        LUP_DEEP = &H00000001
        LUP_CONTAINERS = &H00000002
        LUP_NOCONTAINERS = &H00000004
        LUP_NEAREST = &H00000008
        LUP_RETURN_NAME = &H00000010
        LUP_RETURN_TYPE = &H00000020
        LUP_RETURN_VERSION = &H00000040
        LUP_RETURN_COMMENT = &H00000080
        LUP_RETURN_ADDR = &H00000100
        LUP_RETURN_BLOB = &H00000200
        LUP_RETURN_ALIASES = &H00000400
        LUP_RETURN_QUERY_STRING = &H00000800
        LUP_RETURN_ALL = &H00000FF0
        LUP_RES_SERVICE = &H00008000&
        LUP_FLUSHCACHE = &H00001000
        LUP_FLUSHPREVIOUS = &H00002000
        LUP_NON_AUTHORITATIVE = &H00004000
        LUP_SECURE = &H00008000&
        LUP_RETURN_PREFERRED_NAMES = &H00010000
        LUP_DNS_ONLY = &H00020000
        LUP_RETURN_RESPONSE_FLAGS = &H00040000
        LUP_RESERVED_UNUSED = &H00080000
        LUP_ADDRCONFIG = &H00100000
        LUP_DUAL_ADDR = &H00200000
        LUP_FILESERVER = &H00400000
        LUP_DISABLE_IDN_ENCODING = &H00800000
        LUP_API_ANSI = &H01000000
        LUP_EXTENDED_QUERYSET = &H02000000
        LUP_SECURE_WITH_FALLBACK = &H04000000
        LUP_EXCLUSIVE_CUSTOM_SERVERS = &H08000000
        LUP_REQUIRE_SECURE = &H10000000
        LUP_RETURN_TTL = &H20000000
        LUP_FORCE_CLEAR_TEXT = &H40000000
        LUP_RESOLUTION_HANDLE = &H80000000
    End Enum
    
    Public Const SIO_NSP_NOTIFY_CHANGE = &H88000019
    Public Enum WSACOMPLETIONTYPE
        NSP_NOTIFY_IMMEDIATELY = 0
        NSP_NOTIFY_HWND = 1
        NSP_NOTIFY_EVENT = 2
        NSP_NOTIFY_PORT = 3
        NSP_NOTIFY_APC = 4
    End Enum
    Public Type WSACOMPLETION
        Type As WSACOMPLETIONTYPE
        #If Win64 Then
            pad As Long
            Parameters(23) As Byte
        #Else
            Parameters(11) As Byte
        #End If
        ' union {
            ' struct {
                ' HWND hWnd;
                ' UINT uMsg;
                ' WPARAM context;
            ' } WindowMessage;
            ' struct {
                ' LPWSAOVERLAPPED lpOverlapped;
            ' } Event;
            ' struct {
                ' LPWSAOVERLAPPED lpOverlapped;
                ' LPWSAOVERLAPPED_COMPLETION_ROUTINE lpfnCompletionProc;
            ' } Apc;
            ' struct {
                ' LPWSAOVERLAPPED lpOverlapped;
                ' HANDLE hPort;
                ' ULONG_PTR Key;
            ' } Port;
        ' } Parameters;   
    End Type
    
    Public Enum WSAESETSERVICEOP
        RNRSERVICE_REGISTER = 0
        RNRSERVICE_DEREGISTER
        RNRSERVICE_DELETE
    End Enum
    
    Public Enum WsServiceControlFlags
        SERVICE_MULTIPLE = 1
    End Enum
    Public Declare PtrSafe Function WSALookupServiceBeginA Lib "ws2_32" (lpqsRestrictions As WSAQUERYSETA, ByVal dwControlFlags As WSLookupFlags, lphLookup As LongPtr) As Long
    Public Declare PtrSafe Function WSALookupServiceBeginW Lib "ws2_32" (lpqsRestrictions As WSAQUERYSETW, ByVal dwControlFlags As WSLookupFlags, lphLookup As LongPtr) As Long
    Public DeclareWide PtrSafe Function WSALookupServiceBegin Lib "ws2_32" Alias "WSALookupServiceBeginW" (lpqsRestrictions As WSAQUERYSET, ByVal dwControlFlags As WSLookupFlags, lphLookup As LongPtr) As Long
    Public Declare PtrSafe Function WSALookupServiceNextA Lib "ws2_32" (ByVal hLookup As LongPtr, ByVal dwControlFlags As WSLookupFlags, lpdwBufferLength As Long, lpqsResults As Any) As Long
    Public Declare PtrSafe Function WSALookupServiceNextW Lib "ws2_32" (ByVal hLookup As LongPtr, ByVal dwControlFlags As WSLookupFlags, lpdwBufferLength As Long, lpqsResults As Any) As Long
    Public DeclareWide PtrSafe Function WSALookupServiceNext Lib "ws2_32" Alias "WSALookupServiceNextW" (ByVal hLookup As LongPtr, ByVal dwControlFlags As WSLookupFlags, lpdwBufferLength As Long, lpqsResults As Any) As Long
    Public Declare PtrSafe Function WSANSPIoctl Lib "ws2_32" (ByVal hLookup As LongPtr, ByVal dwControlCode As Long, lpvInBuffer As Any, ByVal cbInBuffer As Long, lpvOutBuffer As Any, ByVal cbOutBuffer As Long, lpcbBytesReturned As Long, lpCompletion As WSACOMPLETION) As Long
    Public Declare PtrSafe Function WSALookupServiceEnd Lib "ws2_32" (ByVal hLookup As LongPtr) As Long
    Public Declare PtrSafe Function WSASetServiceA Lib "ws2_32" (lpqsRegInfo As WSAQUERYSETA, ByVal essoperation As WSAESETSERVICEOP, ByVal dwControlFlags As WsServiceControlFlags) As Long
    Public Declare PtrSafe Function WSASetServiceW Lib "ws2_32" (lpqsRegInfo As WSAQUERYSETW, ByVal essoperation As WSAESETSERVICEOP, ByVal dwControlFlags As WsServiceControlFlags) As Long
    Public DeclareWide PtrSafe Function WSASetService Lib "ws2_32" Alias "WSASetServiceW" (lpqsRegInfo As WSAQUERYSET, ByVal essoperation As WSAESETSERVICEOP, ByVal dwControlFlags As WsServiceControlFlags) As Long
    
    Public Enum WsaSocketFlags
        WSA_FLAG_OVERLAPPED = &H01
        WSA_FLAG_MULTIPOINT_C_ROOT = &H02
        WSA_FLAG_MULTIPOINT_C_LEAF = &H04
        WSA_FLAG_MULTIPOINT_D_ROOT = &H08
        WSA_FLAG_MULTIPOINT_D_LEAF = &H10
        WSA_FLAG_ACCESS_SYSTEM_SECURITY = &H40
        WSA_FLAG_NO_HANDLE_INHERIT = &H80
        WSA_FLAG_REGISTERED_IO = &H100
    End Enum
    
    Public Enum WsaProtocolProviderFlags
        PFL_MULTIPLE_PROTO_ENTRIES = &H00000001
        PFL_RECOMMENDED_PROTO_ENTRY = &H00000002
        PFL_HIDDEN = &H00000004
        PFL_MATCHES_PROTOCOL_ZERO = &H00000008
        PFL_NETWORKDIRECT_PROVIDER = &H00000010
    End Enum
    Public Enum WsaProtocolServiceFlags
        XP1_CONNECTIONLESS = &H00000001
        XP1_GUARANTEED_DELIVERY = &H00000002
        XP1_GUARANTEED_ORDER = &H00000004
        XP1_MESSAGE_ORIENTED = &H00000008
        XP1_PSEUDO_STREAM = &H00000010
        XP1_GRACEFUL_CLOSE = &H00000020
        XP1_EXPEDITED_DATA = &H00000040
        XP1_CONNECT_DATA = &H00000080
        XP1_DISCONNECT_DATA = &H00000100
        XP1_SUPPORT_BROADCAST = &H00000200
        XP1_SUPPORT_MULTIPOINT = &H00000400
        XP1_MULTIPOINT_CONTROL_PLANE = &H00000800
        XP1_MULTIPOINT_DATA_PLANE = &H00001000
        XP1_QOS_SUPPORTED = &H00002000
        XP1_INTERRUPT = &H00004000
        XP1_UNI_SEND = &H00008000&
        XP1_UNI_RECV = &H00010000
        XP1_IFS_HANDLES = &H00020000
        XP1_PARTIAL_MESSAGE = &H00040000
        XP1_SAN_SUPPORT_SDP = &H00080000
    End Enum
    
    Public Const MAX_PROTOCOL_CHAIN  = 7
    Public Const BASE_PROTOCOL  = 1
    Public Const LAYERED_PROTOCOL  = 0
    
    Public Type WSAPROTOCOLCHAIN
        ChainLen As Long '    /* the length of the chain,     */
        '  /* length = 0 means layered protocol, */
        '   /* length = 1 means base protocol, */
        '  /* length > 1 means protocol chain */
        ChainEntries(0 To (MAX_PROTOCOL_CHAIN - 1)) As Long ' /* a list of dwCatalogEntryIds */
    End Type
    
    Public Const WSAPROTOCOL_LEN  = 255
    
    Public Type WSAPROTOCOL_INFOA
        dwServiceFlags1 As WsaProtocolServiceFlags
        dwServiceFlags2 As Long
        dwServiceFlags3 As Long
        dwServiceFlags4 As Long
        dwProviderFlags As WsaProtocolProviderFlags
        ProviderId As UUID
        dwCatalogEntryId As Long
        ProtocolChain As WSAPROTOCOLCHAIN
        iVersion As Long
        iAddressFamily As Long
        iMaxSockAddr As Long
        iMinSockAddr As Long
        iSocketType As Long
        iProtocol As Long
        iProtocolMaxOffset As Long
        iNetworkByteOrder As Long
        iSecurityScheme As Long
        dwMessageSize As Long
        dwProviderReserved As Long
        szProtocol(WSAPROTOCOL_LEN) As Byte
    End Type
    Public Type WSAPROTOCOL_INFOW
        dwServiceFlags1 As WsaProtocolServiceFlags
        dwServiceFlags2 As Long
        dwServiceFlags3 As Long
        dwServiceFlags4 As Long
        dwProviderFlags As WsaProtocolProviderFlags
        ProviderId As UUID
        dwCatalogEntryId As Long
        ProtocolChain As WSAPROTOCOLCHAIN
        iVersion As Long
        iAddressFamily As Long
        iMaxSockAddr As Long
        iMinSockAddr As Long
        iSocketType As Long
        iProtocol As Long
        iProtocolMaxOffset As Long
        iNetworkByteOrder As Long
        iSecurityScheme As Long
        dwMessageSize As Long
        dwProviderReserved As Long
        szProtocol(WSAPROTOCOL_LEN) As Integer
    End Type
    
    Public Type WSAPROTOCOL_INFO
        dwServiceFlags1 As WsaProtocolServiceFlags
        dwServiceFlags2 As Long
        dwServiceFlags3 As Long
        dwServiceFlags4 As Long
        dwProviderFlags As WsaProtocolProviderFlags
        ProviderId As UUID
        dwCatalogEntryId As Long
        ProtocolChain As WSAPROTOCOLCHAIN
        iVersion As Long
        iAddressFamily As Long
        iMaxSockAddr As Long
        iMinSockAddr As Long
        iSocketType As Long
        iProtocol As Long
        iProtocolMaxOffset As Long
        iNetworkByteOrder As Long
        iSecurityScheme As Long
        dwMessageSize As Long
        dwProviderReserved As Long
        szProtocol(WSAPROTOCOL_LEN) As Integer
    End Type
    
    Public Type WSANAMESPACE_INFOA
        NSProviderId As UUID
        dwNameSpace As WinsockNamespaces
        fActive As BOOL
        dwVersion As Long
        lpszIdentifier As String
    End Type
    Public Type WSANAMESPACE_INFOW
        NSProviderId As UUID
        dwNameSpace As WinsockNamespaces
        fActive As BOOL
        dwVersion As Long
        lpszIdentifier As LongPtr
    End Type
    'Alias WSANAMESPACE_INFO As WSANAMESPACE_INFOW
    Public Type WSANAMESPACE_INFO
        NSProviderId As UUID
        dwNameSpace As WinsockNamespaces
        fActive As BOOL
        dwVersion As Long
        lpszIdentifier As LongPtr
    End Type
    
    Public Type WSANAMESPACE_INFOEXA
        NSProviderId As UUID
        dwNameSpace As WinsockNamespaces
        fActive As BOOL
        dwVersion As Long
        lpszIdentifier As String
        ProviderSpecific As BLOB
    End Type
    Public Type WSANAMESPACE_INFOEXW
        NSProviderId As UUID
        dwNameSpace As WinsockNamespaces
        fActive As BOOL
        dwVersion As Long
        lpszIdentifier As LongPtr
        ProviderSpecific As BLOB
    End Type
    'Alias WSANAMESPACE_INFOEX As WSANAMESPACE_INFOEXW
    Public Type WSANAMESPACE_INFOEX
        NSProviderId As UUID
        dwNameSpace As WinsockNamespaces
        fActive As BOOL
        dwVersion As Long
        lpszIdentifier As LongPtr
        ProviderSpecific As BLOB
    End Type
       
    Public Enum WsaPollFlags
        POLLRDNORM = &H0100
        POLLRDBAND = &H0200
        POLLIN = (POLLRDNORM Or POLLRDBAND)
        POLLPRI = &H0400
        POLLWRNORM = &H0010
        POLLOUT = (POLLWRNORM)
        POLLWRBAND = &H0020
        POLLERR = &H0001
        POLLHUP = &H0002
        POLLNVAL = &H0004
    End Enum
    Public Type WSAPOLLFD
        fd As LongPtr 'SOCKET
        events As Integer
        revents As Integer
    End Type
    
    Public Enum WsaSocketGroupFlags
        SG_UNCONSTRAINED_GROUP = &H01
        SG_CONSTRAINED_GROUP = &H02
    End Enum
    Public Type QOS
        SendingFlowspec As FLOWSPEC '  /* the flow spec for data sending */
        ReceivingFlowspec As FLOWSPEC '   /* the flow spec for data receiving */
        ProviderSpecific As WSABUF '   /* additional provider specific stuff */
    End Type
    Public Type WSABUF
        len As Long /* the length of the buffer */
        buf As LongPtr 'CHAR FAR *  /* the pointer to the buffer */
    End Type
    Public Delegate Function CONDITIONPROC (lpCallerId As WSABUF, lpCallerData As WSABUF, lpSQOS As QOS, lpGQOS As QOS, lpCalleeId As WSABUF, lpCalleeData As WSABUF, g As Long, ByVal dwCallbackData As LongPtr) As Long
    
    Public Type WSANETWORKEVENTS
        lNetworkEvents As WS_FD_EVENTS
        iErrorCode(0 To (FD_MAX_EVENTS - 1)) As Long
    End Type
    
    Public Type WSANSCLASSINFOA
        lpszName As String
        dwNameSpace As WinsockNamespaces
        dwValueType As Long
        dwValueSize As Long
        lpValue As LongPtr
    End Type
    Public Type WSANSCLASSINFOW
        lpszName As LongPtr
        dwNameSpace As WinsockNamespaces
        dwValueType As Long
        dwValueSize As Long
        lpValue As LongPtr
    End Type
    'Alias WSANSCLASSINFO as WSANSCLASSINFOW
    Public Type WSANSCLASSINFO
        lpszName As LongPtr
        dwNameSpace As WinsockNamespaces
        dwValueType As Long
        dwValueSize As Long
        lpValue As LongPtr
    End Type
    
    Public Type WSASERVICECLASSINFOA
        lpServiceClassId As LongPtr 'LPUUID
        lpszServiceClassName As String
        dwCount As Long
        lpClassInfos As LongPtr 'LPWSANSCLASSINFOA
    End Type
    Public Type WSASERVICECLASSINFOW
        lpServiceClassId As LongPtr 'LPUUID
        lpszServiceClassName As LongPtr
        dwCount As Long
        lpClassInfos As LongPtr 'LPWSANSCLASSINFOW
    End Type
    'Alias WSASERVICECLASSINFO as WSASERVICECLASSINFOW
    Public Type WSASERVICECLASSINFO
        lpServiceClassId As LongPtr 'LPUUID
        lpszServiceClassName As LongPtr
        dwCount As Long
        lpClassInfos As LongPtr 'LPWSANSCLASSINFOW
    End Type
    
    [Description("⚠️ **WARNING:** Header only. Followed by a variable C-style array.")]
    Public Type SOCKET_ADDRESS_LIST
        iAddressCount As Long
        '  SOCKET_ADDRESS  Address[1];
    End Type
    
    Public Type WSAMSG
        name As LongPtr 'LPSOCKADDR    /* Remote address */
        lpBuffers As LongPtr 'LPWSABUF   /* Data buffer array */
        dwBufferCount As Long /* Number of elements in the array */
        Control As WSABUF /* Control buffer */
        dwFlags As WS_SNDRCV_FLAGS
    End Type
    
    Public Type SOCK_NOTIFY_REGISTRATION
        socket As LongPtr 'SOCKET
        completionKey As LongPtr
        eventFilter As Integer
        operation As Byte
        triggerFlags As Byte
        registrationResult As Long
    End Type
    
    Public Enum WsSocketNotifyRegisterEvents
        SOCK_NOTIFY_REGISTER_EVENT_NONE = &H00
        SOCK_NOTIFY_REGISTER_EVENT_IN = &H01  ' Input is available from the socket without blocking.
        SOCK_NOTIFY_REGISTER_EVENT_OUT = &H02  ' Output can be provided to the socket without blocking.
        SOCK_NOTIFY_REGISTER_EVENT_HANGUP = &H04  ' The socket connection has been terminated.
        SOCK_NOTIFY_REGISTER_EVENTS_ALL = (SOCK_NOTIFY_REGISTER_EVENT_IN Or SOCK_NOTIFY_REGISTER_EVENT_OUT Or SOCK_NOTIFY_REGISTER_EVENT_HANGUP)
    End Enum
    Public Enum WsSocketNotifyEvents
        SOCK_NOTIFY_EVENT_IN = SOCK_NOTIFY_REGISTER_EVENT_IN  ' Input is available from the socket without blocking.
        SOCK_NOTIFY_EVENT_OUT = SOCK_NOTIFY_REGISTER_EVENT_OUT  ' Output can be provided to the socket without blocking.
        SOCK_NOTIFY_EVENT_HANGUP = SOCK_NOTIFY_REGISTER_EVENT_HANGUP  ' The socket connection has been terminated.
        SOCK_NOTIFY_EVENT_ERR = &H40  ' The socket is in an error state.
        SOCK_NOTIFY_EVENT_REMOVE = &H80  ' The notification has been deregistered.
        SOCK_NOTIFY_EVENTS_ALL = (SOCK_NOTIFY_REGISTER_EVENTS_ALL Or SOCK_NOTIFY_EVENT_ERR Or SOCK_NOTIFY_EVENT_REMOVE)
    End Enum
    Public Enum WsSocketNotifyOps
        SOCK_NOTIFY_OP_NONE = &H00
        SOCK_NOTIFY_OP_ENABLE = &H01  ' Enables the registration.
        SOCK_NOTIFY_OP_DISABLE = &H02  ' Disables the registration.
        SOCK_NOTIFY_OP_REMOVE = &H04  ' Removes the registration.
    End Enum
    Public Enum WsSocketNotifyTrigger
        SOCK_NOTIFY_TRIGGER_ONESHOT = &H01  ' The registration will be disabled (not removed) upon delivery of the next notification.
        SOCK_NOTIFY_TRIGGER_PERSISTENT = &H02  ' The registration will remain active until it is explicitly disabled or removed.
        SOCK_NOTIFY_TRIGGER_LEVEL = &H04  ' The registration is for level-triggered notifications.
        SOCK_NOTIFY_TRIGGER_EDGE = &H08  ' The registration is for edge-triggered notifications.
        SOCK_NOTIFY_TRIGGER_ALL = (SOCK_NOTIFY_TRIGGER_ONESHOT Or SOCK_NOTIFY_TRIGGER_PERSISTENT Or SOCK_NOTIFY_TRIGGER_LEVEL Or SOCK_NOTIFY_TRIGGER_EDGE)
    End Enum
    Public Declare PtrSafe Function ProcessSocketNotifications Lib "ws2_32.dll" (ByVal completionPort As LongPtr, ByVal registrationCount As Long, registrationInfos As SOCK_NOTIFY_REGISTRATION, ByVal timeoutMs As Long, ByVal completionCount As Long, completionPortEntries As OVERLAPPED_ENTRY, receivedEntryCount As Long) As Long
    Public Function SocketNotificationRetrieveEvents(notification As OVERLAPPED_ENTRY) As Long
        Return notification.dwNumberOfBytesTransferred
    End Function
    
    
    
    Public Const FD_SETSIZE = 64
    Public Type fd_set
        fd_count As Long '    /* how many are SET? */
        fd_array(0 To (FD_SETSIZE - 1)) As LongPtr 'SOCKET ' /* an array of SOCKETs */
    End Type
    Public Declare PtrSafe Function WSAFDIsSet Lib "ws2_32.dll" Alias "__WSAFDIsSet" (ByVal socket As LongPtr, ByRef TFd_set As fd_set) As Long
    Public Declare PtrSafe Function __WSAFDIsSet Lib "ws2_32.dll" (ByVal socket As LongPtr, ByRef TFd_set As fd_set) As Long
    ' Public Declare PtrSafe Function WSAAccept Lib "ws2_32.dll" (ByVal s As LongPtr, ByRef addr As SOCKADDR, ByRef addrlen As Long, ByVal lpfnCondition As CONDITIONPROC, ByVal dwCallbackData As LongPtr) As LongPtr
    Public Declare PtrSafe Function WSAAccept Lib "ws2_32.dll" (ByVal s As LongPtr, ByRef addr As SOCKADDR, ByRef addrlen As Long, ByVal lpfnCondition As LongPtr, ByVal dwCallbackData As LongPtr) As LongPtr
    Public Declare PtrSafe Function WSAAddressToStringA Lib "ws2_32.dll" (ByRef lpsaAddress As SOCKADDR, ByVal dwAddressLength As Long, ByRef lpProtocolInfo As WSAPROTOCOL_INFOA, ByVal lpszAddressString As String, ByRef lpdwAddressStringLength As Long) As Long
    Public Declare PtrSafe Function WSAAddressToStringW Lib "ws2_32.dll" (ByRef lpsaAddress As SOCKADDR, ByVal dwAddressLength As Long, ByRef lpProtocolInfo As WSAPROTOCOL_INFOW, ByVal lpszAddressString As LongPtr, ByRef lpdwAddressStringLength As Long) As Long
    Public DeclareWide PtrSafe Function WSAAddressToString Lib "ws2_32.dll" Alias "WSAAddressToStringW" (ByRef lpsaAddress As SOCKADDR, ByVal dwAddressLength As Long, ByRef lpProtocolInfo As WSAPROTOCOL_INFO, ByVal lpszAddressString As String, ByRef lpdwAddressStringLength As Long) As Long
    Public Declare PtrSafe Function WSAAsyncGetProtoByName Lib "ws2_32.dll" (ByVal hWnd As LongPtr, ByVal wMsg As Long, ByVal name As String, ByVal buf As String, ByVal buflen As Long) As LongPtr
    Public Declare PtrSafe Function WSAAsyncGetProtoByNumber Lib "ws2_32.dll" (ByVal hWnd As LongPtr, ByVal wMsg As Long, ByVal number As Long, ByVal buf As String, ByVal buflen As Long) As LongPtr
    Public Declare PtrSafe Function WSAAsyncGetServByName Lib "ws2_32.dll" (ByVal hWnd As LongPtr, ByVal wMsg As Long, ByVal name As String, ByVal proto As String, ByVal buf As String, ByVal buflen As Long) As LongPtr
    Public Declare PtrSafe Function WSAAsyncGetServByPort Lib "ws2_32.dll" (ByVal hWnd As LongPtr, ByVal wMsg As Long, ByVal port As Long, ByVal proto As String, ByVal buf As String, ByVal buflen As Long) As LongPtr
    Public Declare PtrSafe Function WSACancelBlockingCall Lib "ws2_32.dll" () As Long
    Public Declare PtrSafe Function WSACloseEvent Lib "ws2_32.dll" (ByVal hEvent As LongPtr) As BOOL
    Public Declare PtrSafe Function WSAConnect Lib "ws2_32.dll" (ByVal s As LongPtr, ByRef name As SOCKADDR, ByVal namelen As Long, ByRef lpCallerData As WSABUF, ByRef lpCalleeData As WSABUF, ByRef lpSQOS As QOS, ByRef lpGQOS As QOS) As Long
    Public Declare PtrSafe Function WSADuplicateSocketA Lib "ws2_32.dll" (ByVal s As LongPtr, ByVal dwProcessId As Long, ByRef lpProtocolInfo As WSAPROTOCOL_INFOA) As Long
    Public Declare PtrSafe Function WSADuplicateSocketW Lib "ws2_32.dll" (ByVal s As LongPtr, ByVal dwProcessId As Long, ByRef lpProtocolInfo As WSAPROTOCOL_INFOW) As Long
    Public DeclareWide PtrSafe Function WSADuplicateSocket Lib "ws2_32.dll" Alias "WSADuplicateSocketW" (ByVal s As LongPtr, ByVal dwProcessId As Long, ByRef lpProtocolInfo As WSAPROTOCOL_INFO) As Long
    Public Declare PtrSafe Function WSAEnumNameSpaceProvidersA Lib "ws2_32.dll" (ByRef lpdwBufferLength As Long, ByRef lpnspBuffer As WSANAMESPACE_INFOA) As Long
    Public Declare PtrSafe Function WSAEnumNameSpaceProvidersW Lib "ws2_32.dll" (ByRef lpdwBufferLength As Long, ByRef lpnspBuffer As WSANAMESPACE_INFOW) As Long
    Public DeclareWide PtrSafe Function WSAEnumNameSpaceProviders Lib "ws2_32.dll" Alias "WSAEnumNameSpaceProvidersW" (ByRef lpdwBufferLength As Long, ByRef lpnspBuffer As WSANAMESPACE_INFO) As Long
    Public Declare PtrSafe Function WSAEnumNameSpaceProvidersExA Lib "ws2_32.dll" (ByRef lpdwBufferLength As Long, ByRef lpnspBuffer As WSANAMESPACE_INFOEXA) As Long
    Public Declare PtrSafe Function WSAEnumNameSpaceProvidersExW Lib "ws2_32.dll" (ByRef lpdwBufferLength As Long, ByRef lpnspBuffer As WSANAMESPACE_INFOEXW) As Long
    Public DeclareWide PtrSafe Function WSAEnumNameSpaceProvidersEx Lib "ws2_32.dll" Alias "WSAEnumNameSpaceProvidersExW" (ByRef lpdwBufferLength As Long, ByRef lpnspBuffer As WSANAMESPACE_INFOEX) As Long
    Public Declare PtrSafe Function WSAEnumNetworkEvents Lib "ws2_32.dll" (ByVal s As LongPtr, ByVal hEventObject As LongPtr, ByRef lpNetworkEvents As WSANETWORKEVENTS) As Long
    Public Declare PtrSafe Function WSAEnumProtocolsA Lib "ws2_32.dll" (ByRef lpiProtocols As Long, ByRef lpProtocolBuffer As WSAPROTOCOL_INFOA, ByRef lpdwBufferLength As Long) As Long
    Public Declare PtrSafe Function WSAEnumProtocolsW Lib "ws2_32.dll" (ByRef lpiProtocols As Long, ByRef lpProtocolBuffer As WSAPROTOCOL_INFOW, ByRef lpdwBufferLength As Long) As Long
    Public DeclareWide PtrSafe Function WSAEnumProtocols Lib "ws2_32.dll" Alias "WSAEnumProtocolsW" (ByRef lpiProtocols As Long, ByRef lpProtocolBuffer As WSAPROTOCOL_INFO, ByRef lpdwBufferLength As Long) As Long
    Public Declare PtrSafe Function WSAEventSelect Lib "ws2_32.dll" (ByVal s As LongPtr, ByVal hEventObject As LongPtr, ByVal lNetworkEvents As WS_FD_EVENTS) As Long
    Public Declare PtrSafe Function WSAGetOverlappedResult Lib "ws2_32.dll" (ByVal s As LongPtr, ByRef lpOverlapped As WSAOVERLAPPED, ByRef lpcbTransfer As Long, ByVal fWait As BOOL, ByRef lpdwFlags As WS_SNDRCV_FLAGS) As BOOL
    Public Declare PtrSafe Function WSAGetQOSByName Lib "ws2_32.dll" (ByVal s As LongPtr, ByRef lpQOSName As WSABUF, ByRef lpQOS As QOS) As BOOL
    Public Declare PtrSafe Function WSAGetServiceClassInfoA Lib "ws2_32.dll" (lpProviderId As UUID, lpServiceClassId As UUID, ByRef lpdwBufSize As Long, ByRef lpServiceClassInfo As Any) As Long
    Public Declare PtrSafe Function WSAGetServiceClassInfoW Lib "ws2_32.dll" (lpProviderId As UUID, lpServiceClassId As UUID, ByRef lpdwBufSize As Long, ByRef lpServiceClassInfo As Any) As Long
    Public DeclareWide PtrSafe Function WSAGetServiceClassInfo Lib "ws2_32.dll" Alias "WSAGetServiceClassInfoW" (lpProviderId As UUID, lpServiceClassId As UUID, ByRef lpdwBufSize As Long, ByRef lpServiceClassInfo As Any) As Long
    Public Declare PtrSafe Function WSAGetServiceClassNameByClassIdA Lib "ws2_32.dll" (lpServiceClassId As UUID, ByVal lpszServiceClassName As String, ByRef lpdwBufferLength As Long) As Long
    Public Declare PtrSafe Function WSAGetServiceClassNameByClassIdW Lib "ws2_32.dll" (lpServiceClassId As UUID, ByVal lpszServiceClassName As LongPtr, ByRef lpdwBufferLength As Long) As Long
    Public DeclareWide PtrSafe Function WSAGetServiceClassNameByClassId Lib "ws2_32.dll" Alias "WSAGetServiceClassNameByClassIdW" (lpServiceClassId As UUID, ByVal lpszServiceClassName As String, ByRef lpdwBufferLength As Long) As Long
    Public Declare PtrSafe Function WSAHtonl Lib "ws2_32.dll" (ByVal s As LongPtr, ByVal hostlong As Long, ByRef lpnetlong As Long) As Long
    Public Declare PtrSafe Function WSAHtons Lib "ws2_32.dll" (ByVal s As LongPtr, ByVal hostshort As Integer, ByRef lpnetshort As Integer) As Long
    Public Declare PtrSafe Function WSAInstallServiceClassA Lib "ws2_32.dll" (ByRef lpServiceClassInfo As WSASERVICECLASSINFOA) As Long
    Public Declare PtrSafe Function WSAInstallServiceClassW Lib "ws2_32.dll" (ByRef lpServiceClassInfo As WSASERVICECLASSINFOW) As Long
    Public DeclareWide PtrSafe Function WSAInstallServiceClass Lib "ws2_32.dll" Alias "WSAInstallServiceClassW" (ByRef lpServiceClassInfo As WSASERVICECLASSINFO) As Long
    Public Declare PtrSafe Function WSAIsBlocking Lib "ws2_32.dll" () As BOOL
    Public Declare PtrSafe Function WSAJoinLeaf Lib "ws2_32.dll" (ByVal s As LongPtr, ByRef name As SOCKADDR, ByVal namelen As Long, ByRef lpCallerData As WSABUF, ByRef lpCalleeData As WSABUF, ByRef lpSQOS As QOS, ByRef lpGQOS As QOS, ByVal dwFlags As Long) As LongPtr
    Public Declare PtrSafe Function WSANtohl Lib "ws2_32.dll" (ByVal s As LongPtr, ByVal netlong As Long, ByRef lphostlong As Long) As Long
    Public Declare PtrSafe Function WSANtohs Lib "ws2_32.dll" (ByVal s As LongPtr, ByVal netshort As Integer, ByRef lphostshort As Integer) As Long
    ' Public Declare PtrSafe Function WSAProviderConfigChange Lib "ws2_32.dll" (ByRef lpNotificationHandle As LongPtr, ByRef lpOverlapped As WSAOVERLAPPED, ByVal lpCompletionRoutine As WsaOverlappedCompletionRoutine) As Long
    Public Declare PtrSafe Function WSAProviderConfigChange Lib "ws2_32.dll" (ByRef lpNotificationHandle As LongPtr, ByRef lpOverlapped As WSAOVERLAPPED, ByVal lpCompletionRoutine As LongPtr) As Long
    Public Declare PtrSafe Function WSAPoll Lib "ws2_32.dll" (fdArray As WSAPOLLFD, ByVal fds As WsaPollFlags, ByVal timeout As Long) As Long
    ' Public Declare PtrSafe Function WSARecv Lib "ws2_32.dll" (ByVal s As LongPtr, ByRef lpBuffers As WSABUF, ByVal dwBufferCount As Long, ByRef lpNumberOfBytesRecvd As Long, ByRef lpFlags As WS_SNDRCV_FLAGS, ByRef lpOverlapped As WSAOVERLAPPED, ByVal lpCompletionRoutine As WsaOverlappedCompletionRoutine) As Long
    Public Declare PtrSafe Function WSARecv Lib "ws2_32.dll" (ByVal s As LongPtr, ByRef lpBuffers As WSABUF, ByVal dwBufferCount As Long, ByRef lpNumberOfBytesRecvd As Long, ByRef lpFlags As WS_SNDRCV_FLAGS, ByRef lpOverlapped As WSAOVERLAPPED, ByVal lpCompletionRoutine As LongPtr) As Long
    Public Declare PtrSafe Function WSARecvDisconnect Lib "ws2_32.dll" (ByVal s As LongPtr, ByRef lpInboundDisconnectData As WSABUF) As Long
    Public Declare PtrSafe Function WSARecvEx Lib "mswsock.dll" (ByVal s As LongPtr, buf As Any, ByVal lLen As Long, ByRef flags As WS_SNDRCV_FLAGS) As Long
    ' Public Declare PtrSafe Function WSARecvFrom Lib "ws2_32.dll" (ByVal s As LongPtr, ByRef lpBuffers As WSABUF, ByVal dwBufferCount As Long, ByRef lpNumberOfBytesRecvd As Long, ByRef lpFlags As WS_SNDRCV_FLAGS, ByRef lpFrom As SOCKADDR, ByRef lpFromlen As Long, ByRef lpOverlapped As WSAOVERLAPPED, ByVal lpCompletionRoutine As WsaOverlappedCompletionRoutine) As Long
    Public Declare PtrSafe Function WSARecvFrom Lib "ws2_32.dll" (ByVal s As LongPtr, ByRef lpBuffers As WSABUF, ByVal dwBufferCount As Long, ByRef lpNumberOfBytesRecvd As Long, ByRef lpFlags As WS_SNDRCV_FLAGS, ByRef lpFrom As SOCKADDR, ByRef lpFromlen As Long, ByRef lpOverlapped As WSAOVERLAPPED, ByVal lpCompletionRoutine As LongPtr) As Long
    Public Declare PtrSafe Function WSARemoveServiceClass Lib "ws2_32.dll" (lpServiceClassId As UUID) As Long
    Public Declare PtrSafe Function WSAResetEvent Lib "ws2_32.dll" (ByVal hEvent As LongPtr) As BOOL
    ' Public Declare PtrSafe Function WSASend Lib "ws2_32.dll" (ByVal s As LongPtr, ByRef lpBuffers As WSABUF, ByVal dwBufferCount As Long, ByRef lpNumberOfBytesSent As Long, ByVal dwFlags As Long, ByRef lpOverlapped As WSAOVERLAPPED, ByVal lpCompletionRoutine As WsaOverlappedCompletionRoutine) As Long
    Public Declare PtrSafe Function WSASend Lib "ws2_32.dll" (ByVal s As LongPtr, ByRef lpBuffers As WSABUF, ByVal dwBufferCount As Long, ByRef lpNumberOfBytesSent As Long, ByVal dwFlags As WS_SNDRCV_FLAGS, ByRef lpOverlapped As WSAOVERLAPPED, ByVal lpCompletionRoutine As LongPtr) As Long
    Public Declare PtrSafe Function WSASendDisconnect Lib "ws2_32.dll" (ByVal s As LongPtr, ByRef lpOutboundDisconnectData As WSABUF) As Long
    ' Public Declare PtrSafe Function WSASendMsg Lib "ws2_32.dll" (ByVal Handle As LongPtr, lpMsg As WSAMSG, ByVal dwFlags As WS_SNDRCV_FLAGS, ByRef lpNumberOfBytesSent As Long, lpOverlapped As WSAOVERLAPPED, ByVal lpCompletionRoutine As WsaOverlappedCompletionRoutine) As Long
    Public Declare PtrSafe Function WSASendMsg Lib "ws2_32.dll" (ByVal Handle As LongPtr, lpMsg As WSAMSG, ByVal dwFlags As WS_SNDRCV_FLAGS, ByRef lpNumberOfBytesSent As Long, lpOverlapped As WSAOVERLAPPED, ByVal lpCompletionRoutine As LongPtr) As Long
    ' Public Declare PtrSafe Function WSASendTo Lib "ws2_32.dll" (ByVal s As LongPtr, ByRef lpBuffers As WSABUF, ByVal dwBufferCount As Long, ByRef lpNumberOfBytesSent As Long, ByVal dwFlags As WS_SNDRCV_FLAGS, ByRef lpTo As SOCKADDR, ByVal iTolen As Long, ByRef lpOverlapped As WSAOVERLAPPED, ByVal lpCompletionRoutine As WsaOverlappedCompletionRoutine) As Long
    Public Declare PtrSafe Function WSASendTo Lib "ws2_32.dll" (ByVal s As LongPtr, ByRef lpBuffers As WSABUF, ByVal dwBufferCount As Long, ByRef lpNumberOfBytesSent As Long, ByVal dwFlags As WS_SNDRCV_FLAGS, ByRef lpTo As SOCKADDR, ByVal iTolen As Long, ByRef lpOverlapped As WSAOVERLAPPED, ByVal lpCompletionRoutine As LongPtr) As Long
    Public Declare PtrSafe Function WSASetBlockingHook Lib "ws2_32.dll" (ByVal lpBlockFunc As LongPtr) As LongPtr
    Public Declare PtrSafe Function WSASetEvent Lib "ws2_32.dll" (ByRef hEvent As LongPtr) As BOOL
    Public Declare PtrSafe Function WSAStringToAddressA Lib "ws2_32.dll" (ByVal AddressString As String, ByVal AddressFamily As ADDRESS_FAMILIES, ByRef lpProtocolInfo As WSAPROTOCOL_INFOA, ByRef lpAddress As SOCKADDR, ByRef lpAddressLength As Long) As Long
    Public Declare PtrSafe Function WSAStringToAddressW Lib "ws2_32.dll" (ByVal AddressString As LongPtr, ByVal AddressFamily As ADDRESS_FAMILIES, ByRef lpProtocolInfo As WSAPROTOCOL_INFOW, ByRef lpAddress As SOCKADDR, ByRef lpAddressLength As Long) As Long
    Public DeclareWide PtrSafe Function WSAStringToAddress Lib "ws2_32.dll" Alias "WSAStringToAddressW" (ByVal AddressString As String, ByVal AddressFamily As ADDRESS_FAMILIES, ByRef lpProtocolInfo As WSAPROTOCOL_INFO, ByRef lpAddress As SOCKADDR, ByRef lpAddressLength As Long) As Long
    Public Declare PtrSafe Function WSAUnhookBlockingHook Lib "ws2_32.dll" () As Long
    Public Declare PtrSafe Function WSAWaitForMultipleEvents Lib "ws2_32.dll" (ByVal cEvents As Long, ByRef lphEvents As LongPtr, ByVal fWaitAll As BOOL, ByVal dwTimeout As Long, ByVal fAlertable As BOOL) As Long
    Public Declare PtrSafe Function WSAConnectByNameA Lib "ws2_32.dll" (ByVal s As LongPtr, ByVal nodename As String, ByVal servicename As String, LocalAddressLength As Long, LocalAddress As SOCKADDR, RemoteAddressLength As Long, RemoteAddress As SOCKADDR, timeout As timeval, Reserved As WSAOVERLAPPED) As BOOL
    Public Declare PtrSafe Function WSAConnectByNameW Lib "ws2_32.dll" (ByVal s As LongPtr, ByVal nodename As LongPtr, ByVal servicename As LongPtr, LocalAddressLength As Long, LocalAddress As SOCKADDR, RemoteAddressLength As Long, RemoteAddress As SOCKADDR, timeout As timeval, Reserved As WSAOVERLAPPED) As BOOL
    Public DeclareWide PtrSafe Function WSAConnectByName Lib "ws2_32.dll" Alias "WSAConnectByNameW" (ByVal s As LongPtr, ByVal nodename As String, ByVal servicename As String, LocalAddressLength As Long, LocalAddress As SOCKADDR, RemoteAddressLength As Long, RemoteAddress As SOCKADDR, timeout As timeval, Reserved As WSAOVERLAPPED) As BOOL
    Public Declare PtrSafe Function WSAConnectByList Lib "ws2_32.dll" (ByVal s As LongPtr, SocketAddress As Any, LocalAddressLength As Long, LocalAddress As SOCKADDR, RemoteAddressLength As Long, RemoteAddress As SOCKADDR, timeout As timeval, Reserved As WSAOVERLAPPED) As BOOL
    Public Declare PtrSafe Function WSACreateEvent Lib "ws2_32.dll" () As LongPtr
    
    Public Declare PtrSafe Function WSCEnumProtocols Lib "ws2_32.dll" (ByRef lpiProtocols As Long, ByRef lpProtocolBuffer As WSAPROTOCOL_INFOW, ByRef lpdwBufferLength As Long, ByRef lpErrno As Long) As Long
    Public Declare PtrSafe Function WSCDeinstallProvider Lib "ws2_32.dll" (lpProviderId As UUID, ByRef lpErrno As Long) As Long
    Public DeclareWide PtrSafe Function WSCInstallProvider Lib "ws2_32.dll" (lpProviderId As UUID, ByVal lpszProviderDllPath As String, ByRef lpProtocolInfoList As WSAPROTOCOL_INFOW, ByVal dwNumberOfEntries As Long, ByRef lpErrno As Long) As Long
    Public DeclareWide PtrSafe Function WSCGetProviderPath Lib "ws2_32.dll" (lpProviderId As UUID, ByVal lpszProviderDllPath As String, ByRef lpProviderDllPathLen As Long, ByRef lpErrno As Long) As Long
    Public DeclareWide PtrSafe Function WSCUpdateProvider Lib "ws2_32.dll" (lpProviderId As UUID, ByVal lpszProviderDllPath As String, ByRef lpProtocolInfoList As WSAPROTOCOL_INFOW, ByVal dwNumberOfEntries As Long, ByRef lpErrno As Long) As Long
    Public Declare PtrSafe Function WSCSetProviderInfo Lib "ws2_32.dll" (lpProviderId As UUID, ByVal InfoType As WSC_PROVIDER_INFO_TYPE, Info As Any, ByVal InfoSize As LongPtr, ByVal Flags As Long, lpErrno As Long) As Long
    Public Declare PtrSafe Function WSCGetProviderInfo Lib "ws2_32.dll" (lpProviderId As UUID, ByVal InfoType As WSC_PROVIDER_INFO_TYPE, Info As Any, InfoSize As LongPtr, ByVal Flags As Long, lpErrno As Long) As Long
    Public DeclareWide PtrSafe Function WSCSetApplicationCategory Lib "ws2_32.dll" (ByVal Path As String, ByVal PathLength As Long, ByVal Extra As String, ByVal ExtraLength As Long, ByVal PermittedLspCategories As WscLspFlags, pPrevPermLspCat As WscLspFlags, ByRef lpErrno As Long) As Long
    Public DeclareWide PtrSafe Function WSCGetApplicationCategory Lib "ws2_32.dll" (ByVal Path As String, ByVal PathLength As Long, ByVal Extra As String, ByVal ExtraLength As Long, pPermittedLspCategories As WscLspFlags, ByRef lpErrno As Long) As Long
    Public DeclareWide PtrSafe Function WSCEnumNameSpaceProviders Lib "ws2_32.dll" Alias "WSAEnumNameSpaceProvidersW" (ByRef lpdwBufferLength As Long, ByRef lpnspBuffer As WSANAMESPACE_INFO) As Long
    Public DeclareWide PtrSafe Function WSCEnumNameSpaceProvidersEx Lib "ws2_32.dll" Alias "WSAEnumNameSpaceProvidersExW" (ByRef lpdwBufferLength As Long, ByRef lpnspBuffer As WSANAMESPACE_INFOEX) As Long
    Public DeclareWide PtrSafe Function WSCInstallNameSpace Lib "ws2_32.dll" (ByVal lpszIdentifier As String, ByVal lpszPathName As String, ByVal dwNameSpace As Long, ByVal dwVersion As Long, lpProviderId As UUID) As Long
    Public DeclareWide PtrSafe Function WSCUnInstallNameSpace Lib "ws2_32.dll" (lpProviderId As UUID) As Long
    Public DeclareWide PtrSafe Function WSCInstallNameSpaceEx Lib "ws2_32.dll" (ByVal lpszIdentifier As String, ByVal lpszPathName As String, ByVal dwNameSpace As Long, ByVal dwVersion As Long, lpProviderId As UUID, lpProviderSpecific As BLOB) As Long
    Public Declare PtrSafe Function WSCEnableNSProvider Lib "ws2_32.dll" (lpProviderId As UUID, ByVal fEnable As BOOL) As Long
    Public Declare PtrSafe Function WSCWriteProviderOrder Lib "WS2_32.DLL" (ByRef lpwdCatalogEntryId As Long, ByVal dwNumberOfEntries As Long) As Long
    Public Declare PtrSafe Function WSCWriteNameSpaceOrder Lib "WS2_32.DLL" (lpProviderId As UUID, ByVal dwNumberOfEntries As Long) As Long

    
    #If Win64 Then
    Public Declare PtrSafe Function WSCEnumProtocols32 Lib "ws2_32.dll" (ByRef lpiProtocols As Long, ByRef lpProtocolBuffer As WSAPROTOCOL_INFOW, ByRef lpdwBufferLength As Long, ByRef lpErrno As Long) As Long
    Public Declare PtrSafe Function WSCDeinstallProvider32 Lib "ws2_32.dll" (lpProviderId As UUID, ByRef lpErrno As Long) As Long
    Public DeclareWide PtrSafe Function WSCInstallProvider64_32 Lib "ws2_32.dll" (lpProviderId As UUID, ByVal lpszProviderDllPath As String, ByRef lpProtocolInfoList As WSAPROTOCOL_INFOW, ByVal dwNumberOfEntries As Long, ByRef lpErrno As Long) As Long
    Public DeclareWide PtrSafe Function WSCGetProviderPath32 Lib "ws2_32.dll" (lpProviderId As UUID, ByVal lpszProviderDllPath As String, ByRef lpProviderDllPathLen As Long, ByRef lpErrno As Long) As Long
    Public DeclareWide PtrSafe Function WSCUpdateProvider32 Lib "ws2_32.dll" (lpProviderId As UUID, ByVal lpszProviderDllPath As String, ByRef lpProtocolInfoList As WSAPROTOCOL_INFOW, ByVal dwNumberOfEntries As Long, ByRef lpErrno As Long) As Long
    Public Declare PtrSafe Function WSCSetProviderInfo32 Lib "ws2_32.dll" (lpProviderId As UUID, ByVal InfoType As WSC_PROVIDER_INFO_TYPE, Info As Any, ByVal InfoSize As LongPtr, ByVal Flags As Long, lpErrno As Long) As Long
    Public Declare PtrSafe Function WSCGetProviderInfo32 Lib "ws2_32.dll" (lpProviderId As UUID, ByVal InfoType As WSC_PROVIDER_INFO_TYPE, Info As Any, InfoSize As LongPtr, ByVal Flags As Long, lpErrno As Long) As Long
    Public DeclareWide PtrSafe Function WSCEnumNameSpaceProviders32 Lib "ws2_32.dll" (ByRef lpdwBufferLength As Long, ByRef lpnspBuffer As WSANAMESPACE_INFO) As Long
    Public DeclareWide PtrSafe Function WSCEnumNameSpaceProvidersEx32 Lib "ws2_32.dll" (ByRef lpdwBufferLength As Long, ByRef lpnspBuffer As WSANAMESPACE_INFOEX) As Long
    Public DeclareWide PtrSafe Function WSCInstallNameSpace32 Lib "ws2_32.dll" (ByVal lpszIdentifier As String, ByVal lpszPathName As String, ByVal dwNameSpace As Long, ByVal dwVersion As Long, lpProviderId As UUID) As Long
    Public DeclareWide PtrSafe Function WSCUnInstallNameSpace32 Lib "ws2_32.dll" (lpProviderId As UUID) As Long
    Public DeclareWide PtrSafe Function WSCInstallNameSpaceEx32 Lib "ws2_32.dll" (ByVal lpszIdentifier As String, ByVal lpszPathName As String, ByVal dwNameSpace As Long, ByVal dwVersion As Long, lpProviderId As UUID, lpProviderSpecific As BLOB) As Long
    Public Declare PtrSafe Function WSCEnableNSProvider32 Lib "ws2_32.dll" (lpProviderId As UUID, ByVal fEnable As BOOL) As Long
    Public DeclareWide PtrSafe Function WSCInstallProviderAndChains64_32 Lib "ws2_32.dll" (lpProviderId As UUID, ByVal lpszProviderDllPath As String, ByVal lpszProviderDllPath32 As String, ByVal lpszLspName As String, ByVal dwServiceFlags As Long, lpProtocolInfoList As WSAPROTOCOL_INFOW, ByVal dwNumberOfEntries As Long, lpdwCatalogEntryId As Long, lpErrno As Long) As Long
    Public Declare PtrSafe Function WSCWriteProviderOrder32 Lib "WS2_32.DLL" (ByRef lpwdCatalogEntryId As Long, ByVal dwNumberOfEntries As Long) As Long
    Public Declare PtrSafe Function WSCWriteNameSpaceOrder32 Lib "WS2_32.DLL" (lpProviderId As UUID, ByVal dwNumberOfEntries As Long) As Long
    #Else
    [Description("For 64it, use WSCInstallProviderAndChains64_32")]
    Public DeclareWide PtrSafe Function WSCInstallProviderAndChains Lib "ws2_32.dll" (lpProviderId As UUID, ByVal lpszProviderDllPath As String, ByVal lpszLspName as String, ByVal dwServiceFlags as Long,lpProtocolInfoList  As WSAPROTOCOL_INFOW, ByVal dwNumberOfEntries As Long, lpdwCatalogEntryId as Long, lpErrno As Long) As Long
    #End If
      ' Declare Function WSCInstallQOSTemplate Lib "qosname.dll" (ByVal Guid As Long, ByRef QosName As WSABUF, ByRef Qos As QOS) As Long
    ' Declare Function WSCRemoveQOSTemplate Lib "qosname.dll" (ByVal Guid As Long, ByRef QosName As WSABUF) As Long
    ' Declare Function WSPStartup Lib "msafd.dll" (ByVal wVersionRequested As Integer, ByRef lpWSPData As WSPDATA, ByRef lpProtocolInfo As WSAPROTOCOL_INFOW, ByRef UpcallTable As WSPUPCALLTABLE, ByRef lpProcTable As WSPPROC_TABLE) As Long
    ' Declare Function WSSelect Lib "ws2_32.dll" Alias "select" (ByVal nfds As Long, ByRef readfds As fd_set, ByRef writefds As fd_set, ByRef exceptfds As fd_set, ByRef timeout As sstruct) As Long
    
    Public Enum WscLspFlags
        LSP_SYSTEM = &H80000000
        LSP_INSPECTOR = &H00000001
        LSP_REDIRECTOR = &H00000002
        LSP_PROXY = &H00000004
        LSP_FIREWALL = &H00000008
        LSP_INBOUND_MODIFY = &H00000010
        LSP_OUTBOUND_MODIFY = &H00000020
        LSP_CRYPTO_COMPRESS = &H00000040
        LSP_LOCAL_CACHE = &H00000080
    End Enum
    Public Enum WSC_PROVIDER_INFO_TYPE
        '   InfoType is:                  Info points to:
        ProviderInfoLspCategories  ' DWORD (LspCategories)
        ProviderInfoAudit  ' struct WSC_PROVIDER_AUDIT_INFO
    End Enum
    Public Type WSC_PROVIDER_AUDIT_INFO
        RecordSize As Long ' Size of this audit record, in bytes (includes this field)
        Reserved As LongPtr ' Reserved
        ' Install Time (GMT)
        ' User SID of account performing install
        ' Length (in characters) of Full Path
        ' Full Path of EXE performing install
    End Type
    
    
    
    Public Type timeval
        tv_sec As Long /* seconds */
        tv_usec As Long /* and microseconds */
    End Type
    
    Public Type ADDRINFOA
        ai_flags As WSAddressInfoFlags ' AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST
        ai_family As WS_PROTO_FAMILY ' PF_xxx
        ai_socktype As WS_SOCKET_TYPES ' SOCK_xxx
        ai_protocol As IPPROTO ' 0 or IPPROTO_xxx for IPv4 and IPv6
        ai_addrlen As LongPtr ' Length of ai_addr
        ai_canonname As String ' Canonical name for nodename
        ai_addr As LongPtr 'SOCKADDR*  ' Binary address
        ai_next As LongPtr 'ADDRINFOW*  ' Next structure in linked list
    End Type
    Public Type ADDRINFOW
        ai_flags As WSAddressInfoFlags ' AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST
        ai_family As WS_PROTO_FAMILY ' PF_xxx
        ai_socktype As WS_SOCKET_TYPES ' SOCK_xxx
        ai_protocol As IPPROTO ' 0 or IPPROTO_xxx for IPv4 and IPv6
        ai_addrlen As LongPtr ' Length of ai_addr
        ai_canonname As LongPtr ' Canonical name for nodename
        ai_addr As LongPtr 'SOCKADDR*  ' Binary address
        ai_next As LongPtr 'ADDRINFOW*  ' Next structure in linked list
    End Type
    'Alias ADDRINFO As ADDRINFOW
    Public Type ADDRINFO
        ai_flags As WSAddressInfoFlags ' AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST
        ai_family As WS_PROTO_FAMILY ' PF_xxx
        ai_socktype As WS_SOCKET_TYPES ' SOCK_xxx
        ai_protocol As IPPROTO ' 0 or IPPROTO_xxx for IPv4 and IPv6
        ai_addrlen As LongPtr ' Length of ai_addr
        ai_canonname As LongPtr ' Canonical name for nodename
        ai_addr As LongPtr 'SOCKADDR*  ' Binary address
        ai_next As LongPtr 'ADDRINFOW*  ' Next structure in linked list
    End Type
    
    
    #Region "ws2tcpip.h"
    
    Public Enum WSGetAddrErrorCodes
        EAI_AGAIN = WSATRY_AGAIN
        EAI_BADFLAGS = WSAEINVAL
        EAI_FAIL = WSANO_RECOVERY
        EAI_FAMILY = WSAEAFNOSUPPORT
        EAI_MEMORY = WSA_NOT_ENOUGH_MEMORY
        EAI_NOSECURENAME = WSA_SECURE_HOST_NOT_FOUND
        'EAI_NODATA = WSANO_DATA
        EAI_NONAME = WSAHOST_NOT_FOUND
        EAI_SERVICE = WSATYPE_NOT_FOUND
        EAI_SOCKTYPE = WSAESOCKTNOSUPPORT
        EAI_IPSECPOLICY = WSA_IPSEC_NAME_POLICY_ERROR
    '   DCR_FIX:  EAI_NODATA remove or fix
    '   EAI_NODATA was removed from rfc2553bis
    '   need to find out from the authors why and
    '   determine the error for "no records of this type"
    '   temporarily, we'll keep #define to avoid changing
    '   code that could change back;  use NONAME
        EAI_NODATA = EAI_NONAME
    End Enum
    
    
    Public Enum WSAddressInfoFlags
        AI_PASSIVE = &H00000001  ' Socket address will be used in bind() call
        AI_CANONNAME = &H00000002  ' Return canonical name in first ai_canonname
        AI_NUMERICHOST = &H00000004  ' Nodename must be a numeric address string
        AI_NUMERICSERV = &H00000008  ' Servicename must be a numeric port number
        AI_DNS_ONLY = &H00000010  ' Restrict queries to unicast DNS only (no LLMNR, netbios, etc.)
        AI_FORCE_CLEAR_TEXT = &H00000020  ' Force clear text DNS query
        AI_BYPASS_DNS_CACHE = &H00000040  ' Bypass DNS cache
        AI_RETURN_TTL = &H00000080  ' Return record TTL
        AI_ALL = &H00000100  ' Query both IP6 and IP4 with AI_V4MAPPED
        AI_ADDRCONFIG = &H00000400  ' Resolution only if global address configured
        AI_V4MAPPED = &H00000800  ' On v6 failure, query v4 and convert to V4MAPPED format
        AI_NON_AUTHORITATIVE = &H00004000  ' LUP_NON_AUTHORITATIVE
        AI_SECURE = &H00008000&  ' LUP_SECURE
        AI_RETURN_PREFERRED_NAMES = &H00010000  ' LUP_RETURN_PREFERRED_NAMES
        AI_FQDN = &H00020000  ' Return the FQDN in ai_canonname
        AI_FILESERVER = &H00040000  ' Resolving fileserver name resolution
        AI_DISABLE_IDN_ENCODING = &H00080000  ' Disable Internationalized Domain Names handling
        AI_SECURE_WITH_FALLBACK = &H00100000  ' Forces clear text fallback if the secure DNS query fails
        AI_EXCLUSIVE_CUSTOM_SERVERS = &H00200000  ' Use exclusively the custom DNS servers
        AI_RETURN_RESPONSE_FLAGS = &H10000000  ' Requests extra information about the DNS results
        AI_REQUIRE_SECURE = &H20000000  ' Forces the DNS query to be done over seucre protocols
        AI_RESOLUTION_HANDLE = &H40000000  ' Request resolution handle
        AI_EXTENDED = &H80000000  ' Indicates this is extended ADDRINFOEX(2/..) struct
    End Enum
    
    
    Public Type ADDRINFOEXA
        ai_flags As WSAddressInfoFlags ' AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST
        ai_family As WS_PROTO_FAMILY ' PF_xxx
        ai_socktype As WS_SOCKET_TYPES ' SOCK_xxx
        ai_protocol As IPPROTO ' 0 or IPPROTO_xxx for IPv4 and IPv6
        ai_addrlen As LongPtr ' Length of ai_addr
        ai_canonname As String ' Canonical name for nodename
        ai_addr As LongPtr 'SOCKADDR* ' Binary address
        ai_blob As LongPtr 'void
        ai_bloblen As LongPtr
        ai_provider As LongPtr 'LPUUID
        ai_next As LongPtr 'ADDRINFOEXW* ' Next structure in linked list
    End Type
    Public Type ADDRINFOEXW
        ai_flags As WSAddressInfoFlags ' AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST
        ai_family As WS_PROTO_FAMILY ' PF_xxx
        ai_socktype As WS_SOCKET_TYPES ' SOCK_xxx
        ai_protocol As IPPROTO ' 0 or IPPROTO_xxx for IPv4 and IPv6
        ai_addrlen As LongPtr ' Length of ai_addr
        ai_canonname As LongPtr ' Canonical name for nodename
        ai_addr As LongPtr 'SOCKADDR* ' Binary address
        ai_blob As LongPtr 'void
        ai_bloblen As LongPtr
        ai_provider As LongPtr 'LPUUID
        ai_next As LongPtr 'ADDRINFOEXW* ' Next structure in linked list
    End Type
    'Alias ADDRINFOEX  as ADDRINFOEXW
    Public Type ADDRINFOEX
        ai_flags As WSAddressInfoFlags ' AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST
        ai_family As WS_PROTO_FAMILY ' PF_xxx
        ai_socktype As WS_SOCKET_TYPES ' SOCK_xxx
        ai_protocol As IPPROTO ' 0 or IPPROTO_xxx for IPv4 and IPv6
        ai_addrlen As LongPtr ' Length of ai_addr
        ai_canonname As LongPtr ' Canonical name for nodename
        ai_addr As LongPtr 'SOCKADDR* ' Binary address
        ai_blob As LongPtr 'void
        ai_bloblen As LongPtr
        ai_provider As LongPtr 'LPUUID
        ai_next As LongPtr 'ADDRINFOEXW* ' Next structure in linked list
    End Type
    
    Public Enum WSAddrInfoExVersions
        ADDRINFOEX_VERSION_2 = 2
        ADDRINFOEX_VERSION_3 = 3
        ADDRINFOEX_VERSION_4 = 4
        ADDRINFOEX_VERSION_5 = 5
        ADDRINFOEX_VERSION_6 = 6
    End Enum
    
    Public Type ADDRINFOEX2A
        ai_flags As WSAddressInfoFlags ' AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST
        ai_family As WS_PROTO_FAMILY ' PF_xxx
        ai_socktype As WS_SOCKET_TYPES ' SOCK_xxx
        ai_protocol As IPPROTO ' 0 or IPPROTO_xxx for IPv4 and IPv6
        ai_addrlen As LongPtr ' Length of ai_addr
        ai_canonname As String ' Canonical name for nodename
        ai_addr As LongPtr 'SOCKADDR* ' Binary address
        ai_blob As LongPtr 'void
        ai_bloblen As LongPtr
        ai_provider As LongPtr 'LPUUID
        ai_next As LongPtr 'ADDRINFOEXW* ' Next structure in linked list
        ai_version As WSAddrInfoExVersions
        ai_fqdn As String
    End Type
    Public Type ADDRINFOEX2W
        ai_flags As WSAddressInfoFlags ' AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST
        ai_family As WS_PROTO_FAMILY ' PF_xxx
        ai_socktype As WS_SOCKET_TYPES ' SOCK_xxx
        ai_protocol As IPPROTO ' 0 or IPPROTO_xxx for IPv4 and IPv6
        ai_addrlen As LongPtr ' Length of ai_addr
        ai_canonname As LongPtr ' Canonical name for nodename
        ai_addr As LongPtr 'SOCKADDR* ' Binary address
        ai_blob As LongPtr 'void
        ai_bloblen As LongPtr
        ai_provider As LongPtr 'LPUUID
        ai_next As LongPtr 'ADDRINFOEXW* ' Next structure in linked list
        ai_version As WSAddrInfoExVersions
        ai_fqdn As LongPtr
    End Type
    'Alias ADDRINFOEX2W As ADDRINFOEX2W
    Public Type ADDRINFOEX2
        ai_flags As WSAddressInfoFlags ' AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST
        ai_family As WS_PROTO_FAMILY ' PF_xxx
        ai_socktype As WS_SOCKET_TYPES ' SOCK_xxx
        ai_protocol As IPPROTO ' 0 or IPPROTO_xxx for IPv4 and IPv6
        ai_addrlen As LongPtr ' Length of ai_addr
        ai_canonname As LongPtr ' Canonical name for nodename
        ai_addr As LongPtr 'SOCKADDR* ' Binary address
        ai_blob As LongPtr 'void
        ai_bloblen As LongPtr
        ai_provider As LongPtr 'LPUUID
        ai_next As LongPtr 'ADDRINFOEXW* ' Next structure in linked list
        ai_version As WSAddrInfoExVersions
        ai_fqdn As LongPtr
    End Type
    
    Public Type ADDRINFOEX3
        ai_flags As WSAddressInfoFlags ' AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST
        ai_family As WS_PROTO_FAMILY ' PF_xxx
        ai_socktype As WS_SOCKET_TYPES ' SOCK_xxx
        ai_protocol As IPPROTO ' 0 or IPPROTO_xxx for IPv4 and IPv6
        ai_addrlen As LongPtr ' Length of ai_addr
        ai_canonname As LongPtr ' Canonical name for nodename
        ai_addr As LongPtr 'SOCKADDR* ' Binary address
        ai_blob As LongPtr 'void
        ai_bloblen As LongPtr
        ai_provider As LongPtr 'LPUUID
        ai_next As LongPtr 'ADDRINFOEXW* ' Next structure in linked list
        ai_version As WSAddrInfoExVersions
        ai_fqdn As LongPtr
        ai_interfaceindex As Long
    End Type
    
    Public Type ADDRINFOEX4
        ai_flags As WSAddressInfoFlags ' AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST
        ai_family As WS_PROTO_FAMILY ' PF_xxx
        ai_socktype As WS_SOCKET_TYPES ' SOCK_xxx
        ai_protocol As IPPROTO ' 0 or IPPROTO_xxx for IPv4 and IPv6
        ai_addrlen As LongPtr ' Length of ai_addr
        ai_canonname As LongPtr ' Canonical name for nodename
        ai_addr As LongPtr 'SOCKADDR* ' Binary address
        ai_blob As LongPtr 'void
        ai_bloblen As LongPtr
        ai_provider As LongPtr 'LPUUID
        ai_next As LongPtr 'ADDRINFOEXW* ' Next structure in linked list
        ai_version As WSAddrInfoExVersions
        ai_fqdn As LongPtr
        ai_interfaceindex As Long
        ai_resolutionhandle As LongPtr
    End Type
    
    Public Type ADDRINFOEX5
        ai_flags As WSAddressInfoFlags ' AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST
        ai_family As WS_PROTO_FAMILY ' PF_xxx
        ai_socktype As WS_SOCKET_TYPES ' SOCK_xxx
        ai_protocol As IPPROTO ' 0 or IPPROTO_xxx for IPv4 and IPv6
        ai_addrlen As LongPtr ' Length of ai_addr
        ai_canonname As LongPtr ' Canonical name for nodename
        ai_addr As LongPtr 'SOCKADDR* ' Binary address
        ai_blob As LongPtr 'void
        ai_bloblen As LongPtr
        ai_provider As LongPtr 'LPUUID
        ai_next As LongPtr 'ADDRINFOEXW* ' Next structure in linked list
        ai_version As WSAddrInfoExVersions
        ai_fqdn As LongPtr
        ai_interfaceindex As Long
        ai_resolutionhandle As LongPtr
        ai_ttl As Long
    End Type
    
    Public Enum WsAiDnsSvrTypes
        AI_DNS_SERVER_TYPE_UDP = &H1
        AI_DNS_SERVER_TYPE_DOH = &H2
    End Enum
    Public Enum WsAiDnsSvrFlags
        AI_DNS_SERVER_UDP_FALLBACK = 1
    End Enum
    Public Type ADDRINFO_DNS_SERVER
        ai_servertype As WsAiDnsSvrTypes
        ai_flags As LongLong
        ai_addrlen As Long
        ai_addr As SOCKADDR
        '   union
        ' {
        ai_template As LongPtr
        '  };
    End Type
    
    Public Enum WsAiDnsResponseFlags
        AI_DNS_RESPONSE_SECURE = &H1  ' Present if the resolution was done through secure protocols
        AI_DNS_RESPONSE_HOSTFILE = &H2
    End Enum
    Public Type ADDRINFOEX6
        ai_flags As WSAddressInfoFlags ' AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST
        ai_family As WS_PROTO_FAMILY ' PF_xxx
        ai_socktype As WS_SOCKET_TYPES ' SOCK_xxx
        ai_protocol As IPPROTO ' 0 or IPPROTO_xxx for IPv4 and IPv6
        ai_addrlen As LongPtr ' Length of ai_addr
        ai_canonname As LongPtr ' Canonical name for nodename
        ai_addr As LongPtr 'SOCKADDR* ' Binary address
        ai_blob As LongPtr 'void
        ai_bloblen As LongPtr
        ai_provider As LongPtr 'LPUUID
        ai_next As LongPtr 'ADDRINFOEXW* ' Next structure in linked list
        ai_version As WSAddrInfoExVersions
        ai_fqdn As LongPtr
        ai_interfaceindex As Long
        ai_resolutionhandle As LongPtr
        ai_ttl As Long
        ai_numservers As Long
        ai_servers As LongPtr 'ADDRINFO_DNS_SERVER  *
        /* [TypeHint(WsAiDnsResponsoFlags)] */ ai_responseflags As LongLong
    End Type
    
    Public Enum WsNameInfoFlags
        NI_NOFQDN = &H01 /* Only return nodename portion for local hosts */
        NI_NUMERICHOST = &H02 /* Return numeric form of the host's address */
        NI_NAMEREQD = &H04 /* Error if the host's name not in DNS */
        NI_NUMERICSERV = &H08 /* Return numeric form of the service (port #) */
        NI_DGRAM = &H10 /* Service is a datagram service */
        NI_MAXHOST = 1025 /* Max size of a fully-qualified domain name */
        NI_MAXSERV = 32 /* Max size of a service name */
    End Enum
    
    
    
    Public Declare PtrSafe Function GetNameInfoA Lib "ws2_32" Alias "getnameinfo" (pSockaddr As SOCKADDR, ByVal SockaddrLength As Long, ByVal pNodeBuffer As String, ByVal NodeBufferSize As Long, ByVal pServiceBuffer As String, ByVal ServiceBufferSize As Long, ByVal flags As WsNameInfoFlags) As WS_ERRORS
    Public Declare PtrSafe Function GetNameInfoW Lib "ws2_32" Alias "getnameinfo" (pSockaddr As SOCKADDR, ByVal SockaddrLength As Long, ByVal pNodeBuffer As LongPtr, ByVal NodeBufferSize As Long, ByVal pServiceBuffer As LongPtr, ByVal ServiceBufferSize As Long, ByVal flags As WsNameInfoFlags) As WS_ERRORS
    Public DeclareWide PtrSafe Function GetNameInfo Lib "ws2_32" Alias "getnameinfo" (pSockaddr As SOCKADDR, ByVal SockaddrLength As Long, ByVal pNodeBuffer As String, ByVal NodeBufferSize As Long, ByVal pServiceBuffer As String, ByVal ServiceBufferSize As Long, ByVal flags As WsNameInfoFlags) As WS_ERRORS
    Public Declare PtrSafe Function ws_getnameinfo Lib "ws2_32" Alias "getnameinfo" (pSockaddr As SOCKADDR, ByVal SockaddrLength As Long, ByVal pNodeBuffer As String, ByVal NodeBufferSize As Long, ByVal pServiceBuffer As String, ByVal ServiceBufferSize As Long, ByVal flags As WsNameInfoFlags) As WS_ERRORS
            
    Public Declare PtrSafe Function GetAddrInfoA Lib "ws2_32" Alias "getaddrinfo" (ByVal pNodeName As String, ByVal pServiceName As String, pHints As ADDRINFOA, ppResult As LongPtr) As Long
    Public Declare PtrSafe Function GetAddrInfoW Lib "ws2_32" (ByVal pNodeName As LongPtr, ByVal pServiceName As LongPtr, pHints As ADDRINFOW, ppResult As LongPtr) As Long
    Public DeclareWide PtrSafe Function GetAddrInfo Lib "ws2_32" Alias "GetAddrInfoW" (ByVal pNodeName As String, ByVal pServiceName As String, pHints As ADDRINFO, ppResult As LongPtr) As Long
       
    
    
    Public Delegate Sub LOOKUPSERVICE_COMPLETION_ROUTINE (ByVal dwError As Long, ByVal dwBytes As Long, lpOverlapped As OVERLAPPED)
    ' Public Declare PtrSafe Function GetAddrInfoExA Lib "ws2_32" (ByVal pName As String, ByVal pServiceName As String, ByVal dwNameSpace As WinsockNamespaces, lpNspId As UUID, hints As ADDRINFOEXA, ppResult As LongPtr, timeout As timeval, lpOverlapped As OVERLAPPED, ByVal lpCompletionRoutine As LOOKUPSERVICE_COMPLETION_ROUTINE, lpNameHandle As LongPtr) As Long
    ' Public Declare PtrSafe Function GetAddrInfoExW Lib "ws2_32" (ByVal pName As LongPtr, ByVal pServiceName As String, ByVal dwNameSpace As WinsockNamespaces, lpNspId As UUID, hints As ADDRINFOEXW, ppResult As LongPtr, timeout As timeval, lpOverlapped As OVERLAPPED, ByVal lpCompletionRoutine As LOOKUPSERVICE_COMPLETION_ROUTINE, lpNameHandle As LongPtr) As Long
    ' Public DeclareWide PtrSafe Function GetAddrInfoEx Lib "ws2_32" Alias "GetAddrInfoExW" (ByVal pName As String, ByVal pServiceName As String, ByVal dwNameSpace As WinsockNamespaces, lpNspId As UUID, hints As ADDRINFOEX, ppResult As LongPtr, timeout As timeval, lpOverlapped As OVERLAPPED, ByVal lpCompletionRoutine As LOOKUPSERVICE_COMPLETION_ROUTINE, lpNameHandle As LongPtr) As Long
    Public Declare PtrSafe Function GetAddrInfoExA Lib "ws2_32" (ByVal pName As String, ByVal pServiceName As String, ByVal dwNameSpace As WinsockNamespaces, lpNspId As UUID, hints As Any, ppResult As LongPtr, timeout As timeval, lpOverlapped As OVERLAPPED, ByVal lpCompletionRoutine As LongPtr, lpNameHandle As LongPtr) As Long
    Public Declare PtrSafe Function GetAddrInfoExW Lib "ws2_32" (ByVal pName As LongPtr, ByVal pServiceName As String, ByVal dwNameSpace As WinsockNamespaces, lpNspId As UUID, hints As Any, ppResult As LongPtr, timeout As timeval, lpOverlapped As OVERLAPPED, ByVal lpCompletionRoutine As LongPtr, lpNameHandle As LongPtr) As Long
    Public DeclareWide PtrSafe Function GetAddrInfoEx Lib "ws2_32" Alias "GetAddrInfoExW" (ByVal pName As String, ByVal pServiceName As String, ByVal dwNameSpace As WinsockNamespaces, lpNspId As UUID, hints As Any, ppResult As LongPtr, timeout As timeval, lpOverlapped As OVERLAPPED, ByVal lpCompletionRoutine As LongPtr, lpNameHandle As LongPtr) As Long
    Public Declare PtrSafe Function GetAddrInfoExCancel Lib "ws2_32" (lpHandle As LongPtr) As Long
    Public Declare PtrSafe Function GetAddrInfoExOverlappedResult Lib "ws2_32" (lpOverlapped As OVERLAPPED) As Long
    Public Declare PtrSafe Sub FreeAddrInfoA Lib "ws2_32" Alias "freeaddrinfo" (pAddrInfo As ADDRINFOA)
    Public Declare PtrSafe Sub FreeAddrInfoW Lib "ws2_32" (pAddrInfo As ADDRINFOW)
    Public DeclareWide PtrSafe Sub FreeAddrInfo Lib "ws2_32" Alias "FreeAddrInfoW" (pAddrInfo As ADDRINFO)
    Public Declare PtrSafe Sub FreeAddrInfoExA Lib "ws2_32" Alias "FreeAddrInfoEx" (pAddrInfoEx As Any)
    Public Declare PtrSafe Sub FreeAddrInfoExW Lib "ws2_32" (pAddrInfoEx As Any)
    Public Declare PtrSafe Sub FreeAddrInfoEx Lib "ws2_32" Alias "FreeAddrInfoExW" (pAddrInfoEx As Any)
       
       
    
    
    #End Region
    #End Region
    
#Region "dns"
'WinDNS.h

Public Const SIZEOF_IP4_ADDRESS  = (4)
Public Const IP4_ADDRESS_STRING_LENGTH  = (16)
'   Backcompat only -- length def contains terminating NULL
Public Const IP4_ADDRESS_STRING_BUFFER_LENGTH  = (16)


Public Type IP6_ADDRESS
    IP6Qword(0 To 1) As LongLong
End Type

Public Const DNS_ADDR_MAX_SOCKADDR_LENGTH = 32

Public Type DNS_ADDR
    MaxSa(0 To (DNS_ADDR_MAX_SOCKADDR_LENGTH - 1)) As Byte
    DnsAddrUserDword(0 To 7) As Long
End Type

[Description("IMPORTANT: This contains a variable C-style array for which a buffered version has been substituted. Do not use LenB for size calculations.")]
Public Type DNS_ADDR_ARRAY
    MaxCount As Long
    AddrCount As Long
    Tag As Long
    Family As Integer
    WordReserved As Integer
    Flags As Long
    MatchFlag As Long
    Reserved1 As Long
    Reserved2 As Long
    AddrArray(0 To 4095) As DNS_ADDR
End Type

Public Const IP6_ADDRESS_STRING_LENGTH  = (65)
Public Const IP6_ADDRESS_STRING_BUFFER_LENGTH  = (65)
'   IP4/IP6 combined maximum
Public Const DNS_ADDRESS_STRING_LENGTH  = (IP6_ADDRESS_STRING_LENGTH)


'TODO: MACROS
' #define INLINE_WORD_FLIP(out, in)   \
' {                           \
    ' WORD _in = (in);        \
    ' (out) = (_in << 8) | (_in >> 8);  \
' }
' #define INLINE_HTONS(out, in)   INLINE_WORD_FLIP(out, in)
' #define INLINE_NTOHS(out, in)   INLINE_WORD_FLIP(out, in)

' #define INLINE_DWORD_FLIP(out, in)  \
' {                           \
    ' DWORD _in = (in);       \
    ' (out) = ((_in << 8) & 0x00ff0000) | \
            ' (_in << 24)               | \
            ' ((_in >> 8) & 0x0000ff00) | \
            ' (_in >> 24);                \
' }
' #define INLINE_NTOHL(out, in) INLINE_DWORD_FLIP(out, in)
' #define INLINE_HTONL(out, in) INLINE_DWORD_FLIP(out, in)


' //
' //  Inline byte flip and write to packet (unaligned)
' //

' #define INLINE_WRITE_FLIPPED_WORD( pout, in ) \
    ' INLINE_WORD_FLIP( *((UNALIGNED WORD *)(pout)), in )

' #define INLINE_WRITE_FLIPPED_DWORD( pout, in ) \
    ' INLINE_DWORD_FLIP( *((UNALIGNED DWORD *)(pout)), in )

    Public Const DNS_PORT_HOST_ORDER  = (&H0035)  ' port 53
    Public Const DNS_PORT_NET_ORDER  = (&H3500)
    Public Const INTERNET_DEFAULT_DNS_PORT  = DNS_PORT_HOST_ORDER
    Public Const INTERNET_DEFAULT_DOT_PORT  = (853)
    '   DNS UDP packets no more than 512 bytes
    Public Const DNS_RFC_MAX_UDP_PACKET_LENGTH  = (512)
    '   DNS Names limited to 255, 63 in any one label
    Public Const DNS_MAX_NAME_LENGTH  = (255)
    Public Const DNS_MAX_LABEL_LENGTH  = (63)
    'Public Const DNS_MAX_NAME_BUFFER_LENGTH  = (256)
    Public Const DNS_MAX_LABEL_BUFFER_LENGTH  = (64)
    '   Reverse lookup domain names
    Public Const DNS_IP4_REVERSE_DOMAIN_STRING_A  = ("in-addr.arpa.")
    Public Const DNS_IP4_REVERSE_DOMAIN_STRING_W  = ("in-addr.arpa.")
    Public Const DNS_MAX_IP4_REVERSE_NAME_LENGTH  = (IP4_ADDRESS_STRING_LENGTH + 15)
    ' (IP4_ADDRESS_STRING_LENGTH+1+sizeof(DNS_IP4_REVERSE_DOMAIN_STRING_A))
    Public Const DNS_IP6_REVERSE_DOMAIN_STRING_A  = ("ip6.arpa.")
    Public Const DNS_IP6_REVERSE_DOMAIN_STRING_W  = ("ip6.arpa.")
    Public Const DNS_MAX_IP6_REVERSE_NAME_LENGTH  = (75)
    ' (64+sizeof(DNS_IP6_REVERSE_DOMAIN_STRING_A))
    '   Combined
    Public Const DNS_MAX_REVERSE_NAME_LENGTH  = DNS_MAX_IP6_REVERSE_NAME_LENGTH
    Public Const DNS_IP4_REVERSE_DOMAIN_STRING  = DNS_IP4_REVERSE_DOMAIN_STRING_W
    
    Public Const DNS_MAX_IP4_REVERSE_NAME_BUFFER_LENGTH  = DNS_MAX_IP4_REVERSE_NAME_LENGTH
    Public Const DNS_MAX_IP6_REVERSE_NAME_BUFFER_LENGTH  = DNS_MAX_IP6_REVERSE_NAME_LENGTH
    Public Const DNS_MAX_REVERSE_NAME_BUFFER_LENGTH  = DNS_MAX_REVERSE_NAME_LENGTH
    '   DNS Text string limited by size representable
    '       in a single byte length field
    Public Const DNS_MAX_TEXT_STRING_LENGTH  = (255)

    
    Public Type DNS_HEADER
        Xid As Integer
        ' #ifdef MIDL_PASS
        ' WORD    Flags;
    ' #else
        ' BYTE    RecursionDesired : 1;
        ' BYTE    Truncation : 1;
        ' BYTE    Authoritative : 1;
        ' BYTE    Opcode : 4;
        ' BYTE    IsResponse : 1;

        ' BYTE    ResponseCode : 4;
        ' BYTE    CheckingDisabled : 1;
        ' BYTE    AuthenticatedData : 1;
        ' BYTE    Reserved : 1;
        ' BYTE    RecursionAvailable : 1;
    ' #endif
        Flags As Integer
        QuestionCount As Integer
        AnswerCount As Integer
        NameServerCount As Integer
        AdditionalCount As Integer
    End Type

    Public Type DNS_HEADER_EXT
        ' WORD            Reserved : 15;
        ' WORD            DnssecOk : 1;
        DnssecOk As Integer
        chRcode As Byte
        chVersion As Byte
    End Type
    
    ' //
    ' //  Flags as WORD
    ' //

    ' #define DNS_HEADER_FLAGS(pHead)     ( *((PWORD)(pHead)+1) )


    ' //
    ' //  Byte flip DNS header to\from host order.
    ' //
    ' //  Note that this does NOT flip flags, as definition above defines
    ' //  flags as individual bytes for direct access to net byte order.
    ' //

    ' #define DNS_BYTE_FLIP_HEADER_COUNTS(pHeader)       \
            ' {                                   \
                ' PDNS_HEADER _head = (pHeader);  \
                ' INLINE_HTONS(_head->Xid,            _head->Xid             ); \
                ' INLINE_HTONS(_head->QuestionCount,  _head->QuestionCount   ); \
                ' INLINE_HTONS(_head->AnswerCount,    _head->AnswerCount     ); \
                ' INLINE_HTONS(_head->NameServerCount,_head->NameServerCount ); \
                ' INLINE_HTONS(_head->AdditionalCount,_head->AdditionalCount ); \
            ' }
    
    Public Const DNS_OFFSET_TO_QUESTION_NAME  = &HC 'LenB(Of DNS_HEADER)
    '   Question immediately follows header so compressed question name
    '       0xC000 | sizeof(DNS_HEADER)
    Public Const DNS_COMPRESSED_QUESTION_NAME  = (&HC00C)

    ' //
    ' //  Packet extraction macros
    ' //

    ' #define DNS_QUESTION_NAME_FROM_HEADER( _pHeader_ ) \
                ' ( (PCHAR)( (PDNS_HEADER)(_pHeader_) + 1 ) )

    ' #define DNS_ANSWER_FROM_QUESTION( _pQuestion_ ) \
                ' ( (PCHAR)( (PDNS_QUESTION)(_pQuestion_) + 1 ) )

    Public Type DNS_WIRE_QUESTION
        '  Preceded by question name
        QuestionType As Integer
        QuestionClass As Integer
    End Type
        
    [PackingAlignment(1)]
    Public Type DNS_WIRE_RECORD
        '  Preceded by record owner name
        RecordType As Integer
        RecordClass As Integer
        TimeToLive As Long
        DataLength As Integer
        '  Followed by record data
    End Type
    
    Public Enum WinDnsQueryTypes
        DNS_OPCODE_QUERY = 0  ' Query
        DNS_OPCODE_IQUERY = 1  ' Obsolete: IP to name
        DNS_OPCODE_SERVER_STATUS = 2  ' Obsolete: DNS ping
        DNS_OPCODE_UNKNOWN = 3  ' Unknown
        DNS_OPCODE_NOTIFY = 4  ' Notify
        DNS_OPCODE_UPDATE = 5  ' Dynamic Update
    End Enum
    
    Public Enum WinDnsResponseCodes
        DNS_RCODE_NOERROR = 0
        DNS_RCODE_FORMERR = 1  ' Format error
        DNS_RCODE_SERVFAIL = 2  ' Server failure
        DNS_RCODE_NXDOMAIN = 3  ' Name error
        DNS_RCODE_NOTIMPL = 4  ' Not implemented
        DNS_RCODE_REFUSED = 5  ' Refused
        DNS_RCODE_YXDOMAIN = 6  ' Domain name should not exist
        DNS_RCODE_YXRRSET = 7  ' RR set should not exist
        DNS_RCODE_NXRRSET = 8  ' RR set does not exist
        DNS_RCODE_NOTAUTH = 9  ' Not authoritative for zone
        DNS_RCODE_NOTZONE = 10  ' Name is not zone
        DNS_RCODE_MAX = 15
    '   Extended RCODEs
        DNS_RCODE_BADVERS = 16  ' Bad EDNS version
        DNS_RCODE_BADSIG = 16  ' Bad signature
        DNS_RCODE_BADKEY = 17  ' Bad key
        DNS_RCODE_BADTIME = 18  ' Bad timestamp
    '   Mappings to friendly names
        DNS_RCODE_NO_ERROR = DNS_RCODE_NOERROR
        DNS_RCODE_FORMAT_ERROR = DNS_RCODE_FORMERR
        DNS_RCODE_SERVER_FAILURE = DNS_RCODE_SERVFAIL
        DNS_RCODE_NAME_ERROR = DNS_RCODE_NXDOMAIN
        DNS_RCODE_NOT_IMPLEMENTED = DNS_RCODE_NOTIMPL
    End Enum
    
    Public Enum WinDnsClasses
        DNS_CLASS_INTERNET = &H0001  '  1
        DNS_CLASS_CSNET = &H0002  '  2
        DNS_CLASS_CHAOS = &H0003  '  3
        DNS_CLASS_HESIOD = &H0004  '  4
        DNS_CLASS_NONE = &H00fe  '  254
        DNS_CLASS_ALL = &H00ff  '  255
        DNS_CLASS_ANY = &H00ff  '  255
        DNS_CLASS_UNICAST_RESPONSE = &H8000&  ' Set the top-bit of the field to one
        DNS_RCLASS_INTERNET = &H0100  '  1
        DNS_RCLASS_CSNET = &H0200  '  2
        DNS_RCLASS_CHAOS = &H0300  '  3
        DNS_RCLASS_HESIOD = &H0400  '  4
        DNS_RCLASS_NONE = &Hfe00&  '  254
        DNS_RCLASS_ALL = &Hff00&  '  255
        DNS_RCLASS_ANY = &Hff00&  '  255
        DNS_RCLASS_UNICAST_RESPONSE = &H0080  ' Set the top-bit of the field to one, in net order!
        DNS_RCLASS_MDNS_CACHE_FLUSH = &H0080  ' mDNS cache flush bit set on record announcement in net order!
    End Enum
    
    Public Enum WinDnsRecordTypes
        DNS_TYPE_ZERO = &H0000
    '   RFC 1034/1035
        DNS_TYPE_A = &H0001  '  1
        DNS_TYPE_NS = &H0002  '  2
        DNS_TYPE_MD = &H0003  '  3
        DNS_TYPE_MF = &H0004  '  4
        DNS_TYPE_CNAME = &H0005  '  5
        DNS_TYPE_SOA = &H0006  '  6
        DNS_TYPE_MB = &H0007  '  7
        DNS_TYPE_MG = &H0008  '  8
        DNS_TYPE_MR = &H0009  '  9
        DNS_TYPE_NULL = &H000a  '  10
        DNS_TYPE_WKS = &H000b  '  11
        DNS_TYPE_PTR = &H000c  '  12
        DNS_TYPE_HINFO = &H000d  '  13
        DNS_TYPE_MINFO = &H000e  '  14
        DNS_TYPE_MX = &H000f  '  15
        DNS_TYPE_TEXT = &H0010  '  16
    '   RFC 1183
        DNS_TYPE_RP = &H0011  '  17
        DNS_TYPE_AFSDB = &H0012  '  18
        DNS_TYPE_X25 = &H0013  '  19
        DNS_TYPE_ISDN = &H0014  '  20
        DNS_TYPE_RT = &H0015  '  21
    '   RFC 1348
        DNS_TYPE_NSAP = &H0016  '  22
        DNS_TYPE_NSAPPTR = &H0017  '  23
    '   RFC 2065    (DNS security)
        DNS_TYPE_SIG = &H0018  '  24
        DNS_TYPE_KEY = &H0019  '  25
    '   RFC 1664    (X.400 mail)
        DNS_TYPE_PX = &H001a  '  26
    '   RFC 1712    (Geographic position)
        DNS_TYPE_GPOS = &H001b  '  27
    '   RFC 1886    (IPv6 Address)
        DNS_TYPE_AAAA = &H001c  '  28
    '   RFC 1876    (Geographic location)
        DNS_TYPE_LOC = &H001d  '  29
    '   RFC 2065    (Secure negative response)
        DNS_TYPE_NXT = &H001e  '  30
    '   Patton      (Endpoint Identifier)
        DNS_TYPE_EID = &H001f  '  31
    '   Patton      (Nimrod Locator)
        DNS_TYPE_NIMLOC = &H0020  '  32
    '   RFC 2052    (Service location)
        DNS_TYPE_SRV = &H0021  '  33
    '   ATM Standard something-or-another (ATM Address)
        DNS_TYPE_ATMA = &H0022  '  34
    '   RFC 2168    (Naming Authority Pointer)
        DNS_TYPE_NAPTR = &H0023  '  35
    '   RFC 2230    (Key Exchanger)
        DNS_TYPE_KX = &H0024  '  36
    '   RFC 2538    (CERT)
        DNS_TYPE_CERT = &H0025  '  37
    '   A6 Draft    (A6)
        DNS_TYPE_A6 = &H0026  '  38
    '   DNAME Draft (DNAME)
        DNS_TYPE_DNAME = &H0027  '  39
    '   Eastlake    (Kitchen Sink)
        DNS_TYPE_SINK = &H0028  '  40
    '   RFC 2671    (EDNS OPT)
        DNS_TYPE_OPT = &H0029  '  41
    '   RFC 4034    (DNSSEC DS)
        DNS_TYPE_DS = &H002b  '  43
    '   RFC 4034    (DNSSEC RRSIG)
        DNS_TYPE_RRSIG = &H002e  '  46
    '   RFC 4034    (DNSSEC NSEC)
        DNS_TYPE_NSEC = &H002f  '  47
    '   RFC 4034    (DNSSEC DNSKEY)
        DNS_TYPE_DNSKEY = &H0030  '  48
    '   RFC 4701    (DHCID)
        DNS_TYPE_DHCID = &H0031  '  49
    '   RFC 5155    (DNSSEC NSEC3)
        DNS_TYPE_NSEC3 = &H0032  '  50
    '   RFC 5155    (DNSSEC NSEC3PARAM)
        DNS_TYPE_NSEC3PARAM = &H0033  '  51
    '   RFC 6698    (TLSA)
        DNS_TYPE_TLSA = &H0034  '  52
    '   draft-ietf-dnsop-svcb-https
        DNS_TYPE_SVCB = &H0040  '  64
    '   draft-ietf-dnsop-svcb-https
        DNS_TYPE_HTTPS = &H0041  '  65
    '   IANA Reserved
        DNS_TYPE_UINFO = &H0064  '  100
        DNS_TYPE_UID = &H0065  '  101
        DNS_TYPE_GID = &H0066  '  102
        DNS_TYPE_UNSPEC = &H0067  '  103
    '   Query only types (1035, 1995)
    '       - Crawford      (ADDRS)
    '       - TKEY draft    (TKEY)
    '       - TSIG draft    (TSIG)
    '       - RFC 1995      (IXFR)
    '       - RFC 1035      (AXFR up)
        DNS_TYPE_ADDRS = &H00f8  '  248
        DNS_TYPE_TKEY = &H00f9  '  249
        DNS_TYPE_TSIG = &H00fa  '  250
        DNS_TYPE_IXFR = &H00fb  '  251
        DNS_TYPE_AXFR = &H00fc  '  252
        DNS_TYPE_MAILB = &H00fd  '  253
        DNS_TYPE_MAILA = &H00fe  '  254
        DNS_TYPE_ALL = &H00ff  '  255
        DNS_TYPE_ANY = &H00ff  '  255
    '   Private use Microsoft types --  See www.iana.org/assignments/dns-parameters
        DNS_TYPE_WINS = &Hff01&  '  64K - 255
        DNS_TYPE_WINSR = &Hff02&  '  64K - 254
        DNS_TYPE_NBSTAT = (DNS_TYPE_WINSR)
    '   DNS Record Types -- Net Byte Order
        DNS_RTYPE_A = &H0100  '  1
        DNS_RTYPE_NS = &H0200  '  2
        DNS_RTYPE_MD = &H0300  '  3
        DNS_RTYPE_MF = &H0400  '  4
        DNS_RTYPE_CNAME = &H0500  '  5
        DNS_RTYPE_SOA = &H0600  '  6
        DNS_RTYPE_MB = &H0700  '  7
        DNS_RTYPE_MG = &H0800  '  8
        DNS_RTYPE_MR = &H0900  '  9
        DNS_RTYPE_NULL = &H0a00  '  10
        DNS_RTYPE_WKS = &H0b00  '  11
        DNS_RTYPE_PTR = &H0c00  '  12
        DNS_RTYPE_HINFO = &H0d00  '  13
        DNS_RTYPE_MINFO = &H0e00  '  14
        DNS_RTYPE_MX = &H0f00  '  15
        DNS_RTYPE_TEXT = &H1000  '  16
        DNS_RTYPE_RP = &H1100  '  17
        DNS_RTYPE_AFSDB = &H1200  '  18
        DNS_RTYPE_X25 = &H1300  '  19
        DNS_RTYPE_ISDN = &H1400  '  20
        DNS_RTYPE_RT = &H1500  '  21
        DNS_RTYPE_NSAP = &H1600  '  22
        DNS_RTYPE_NSAPPTR = &H1700  '  23
        DNS_RTYPE_SIG = &H1800  '  24
        DNS_RTYPE_KEY = &H1900  '  25
        DNS_RTYPE_PX = &H1a00  '  26
        DNS_RTYPE_GPOS = &H1b00  '  27
        DNS_RTYPE_AAAA = &H1c00  '  28
        DNS_RTYPE_LOC = &H1d00  '  29
        DNS_RTYPE_NXT = &H1e00  '  30
        DNS_RTYPE_EID = &H1f00  '  31
        DNS_RTYPE_NIMLOC = &H2000  '  32
        DNS_RTYPE_SRV = &H2100  '  33
        DNS_RTYPE_ATMA = &H2200  '  34
        DNS_RTYPE_NAPTR = &H2300  '  35
        DNS_RTYPE_KX = &H2400  '  36
        DNS_RTYPE_CERT = &H2500  '  37
        DNS_RTYPE_A6 = &H2600  '  38
        DNS_RTYPE_DNAME = &H2700  '  39
        DNS_RTYPE_SINK = &H2800  '  40
        DNS_RTYPE_OPT = &H2900  '  41
        DNS_RTYPE_DS = &H2b00  '  43
        DNS_RTYPE_RRSIG = &H2e00  '  46
        DNS_RTYPE_NSEC = &H2f00  '  47
        DNS_RTYPE_DNSKEY = &H3000  '  48
        DNS_RTYPE_DHCID = &H3100  '  49
        DNS_RTYPE_NSEC3 = &H3200  '  50
        DNS_RTYPE_NSEC3PARAM = &H3300  '  51
        DNS_RTYPE_TLSA = &H3400  '  52
    '   IANA Reserved
        DNS_RTYPE_UINFO = &H6400  '  100
        DNS_RTYPE_UID = &H6500  '  101
        DNS_RTYPE_GID = &H6600  '  102
        DNS_RTYPE_UNSPEC = &H6700  '  103
    '   Query only types
        DNS_RTYPE_TKEY = &Hf900&  '  249
        DNS_RTYPE_TSIG = &Hfa00&  '  250
        DNS_RTYPE_IXFR = &Hfb00&  '  251
        DNS_RTYPE_AXFR = &Hfc00&  '  252
        DNS_RTYPE_MAILB = &Hfd00&  '  253
        DNS_RTYPE_MAILA = &Hfe00&  '  254
        DNS_RTYPE_ALL = &Hff00&  '  255
        DNS_RTYPE_ANY = &Hff00&  '  255
    '   Private use Microsoft types --  See www.iana.org/assignments/dns-parameters
        DNS_RTYPE_WINS = &H01ff  '  64K - 255
        DNS_RTYPE_WINSR = &H02ff  '  64K - 254
    End Enum
    
    ' #ifndef  ATMA_E164
    Public Const DNS_ATMA_FORMAT_E164  = 1
    Public Const DNS_ATMA_FORMAT_AESA  = 2
    Public Const DNS_ATMA_MAX_ADDR_LENGTH  = (20)
    ' #else
    ' #define DNS_ATMA_FORMAT_E164            ATM_E164
    ' #define DNS_ATMA_FORMAT_AESA            ATM_AESA
    ' #define DNS_ATMA_MAX_ADDR_LENGTH        ATM_ADDR_SIZE
    ' #endif
    Public Const DNS_ATMA_AESA_ADDR_LENGTH  = (20)
    Public Const DNS_ATMA_MAX_RECORD_LENGTH  = (DNS_ATMA_MAX_ADDR_LENGTH + 1)
    
    Public Enum WinDnsDnssecAlgorithms
        DNSSEC_ALGORITHM_RSAMD5 = 1
        DNSSEC_ALGORITHM_RSASHA1 = 5
        DNSSEC_ALGORITHM_RSASHA1_NSEC3 = 7
        DNSSEC_ALGORITHM_RSASHA256 = 8
        DNSSEC_ALGORITHM_RSASHA512 = 10
        DNSSEC_ALGORITHM_ECDSAP256_SHA256 = 13
        DNSSEC_ALGORITHM_ECDSAP384_SHA384 = 14
        DNSSEC_ALGORITHM_NULL = 253
        DNSSEC_ALGORITHM_PRIVATE = 254
    End Enum

    Public Enum WinDnsDnssecRDAlgorithms
        DNSSEC_DIGEST_ALGORITHM_SHA1 = 1
        DNSSEC_DIGEST_ALGORITHM_SHA256 = 2
        DNSSEC_DIGEST_ALGORITHM_SHA384 = 4
    End Enum
    
    Public Enum WinDnsDnssecKeyProtocols
        DNSSEC_PROTOCOL_NONE = 0
        DNSSEC_PROTOCOL_TLS = 1
        DNSSEC_PROTOCOL_EMAIL = 2
        DNSSEC_PROTOCOL_DNSSEC = 3
        DNSSEC_PROTOCOL_IPSEC = 4
    End Enum
    
    Public Enum WinDnsDnssecKeyFlags
        DNSSEC_KEY_FLAG_NOAUTH = &H0001
        DNSSEC_KEY_FLAG_NOCONF = &H0002
        DNSSEC_KEY_FLAG_FLAG2 = &H0004
        DNSSEC_KEY_FLAG_EXTEND = &H0008
        '#define DNSSEC_KEY_FLAG_
        DNSSEC_KEY_FLAG_FLAG4 = &H0010
        DNSSEC_KEY_FLAG_FLAG5 = &H0020
    '  bits 6,7 are name type
        DNSSEC_KEY_FLAG_USER = &H0000
        DNSSEC_KEY_FLAG_ZONE = &H0040
        DNSSEC_KEY_FLAG_HOST = &H0080
        DNSSEC_KEY_FLAG_NTPE3 = &H00c0
    '  bits 8-11 are reserved for future use
        DNSSEC_KEY_FLAG_FLAG8 = &H0100
        DNSSEC_KEY_FLAG_FLAG9 = &H0200
        DNSSEC_KEY_FLAG_FLAG10 = &H0400
        DNSSEC_KEY_FLAG_FLAG11 = &H0800
    '  bits 12-15 are sig field
        DNSSEC_KEY_FLAG_SIG0 = &H0000
        DNSSEC_KEY_FLAG_SIG1 = &H1000
        DNSSEC_KEY_FLAG_SIG2 = &H2000
        DNSSEC_KEY_FLAG_SIG3 = &H3000
        DNSSEC_KEY_FLAG_SIG4 = &H4000
        DNSSEC_KEY_FLAG_SIG5 = &H5000
        DNSSEC_KEY_FLAG_SIG6 = &H6000
        DNSSEC_KEY_FLAG_SIG7 = &H7000
        DNSSEC_KEY_FLAG_SIG8 = &H8000&
        DNSSEC_KEY_FLAG_SIG9 = &H9000&
        DNSSEC_KEY_FLAG_SIG10 = &Ha000&
        DNSSEC_KEY_FLAG_SIG11 = &Hb000&
        DNSSEC_KEY_FLAG_SIG12 = &Hc000&
        DNSSEC_KEY_FLAG_SIG13 = &Hd000&
        DNSSEC_KEY_FLAG_SIG14 = &He000&
        DNSSEC_KEY_FLAG_SIG15 = &Hf000&
    End Enum
    
    Public Enum WinDnsTKeyModes
        DNS_TKEY_MODE_SERVER_ASSIGN = 1
        DNS_TKEY_MODE_DIFFIE_HELLMAN = 2
        DNS_TKEY_MODE_GSS = 3
        DNS_TKEY_MODE_RESOLVER_ASSIGN = 4
    End Enum
    
    Public Enum WinDnsWINSFlags
        DNS_WINS_FLAG_SCOPE = (&H80000000)
        DNS_WINS_FLAG_LOCAL = (&H00010000)
    End Enum
    
    ' #define IS_WORD_ALIGNED(p)      ( !((UINT_PTR)(p) & (UINT_PTR)1) )
    ' #define IS_DWORD_ALIGNED(p)     ( !((UINT_PTR)(p) & (UINT_PTR)3) )
    ' #define IS_QWORD_ALIGNED(p)     ( !((UINT_PTR)(p) & (UINT_PTR)7) )
    
    Public Enum DNS_CONFIG_TYPE
        '  In Win2K
        DnsConfigPrimaryDomainName_W
        DnsConfigPrimaryDomainName_A
        DnsConfigPrimaryDomainName_UTF8

        '  Not available yet
        DnsConfigAdapterDomainName_W
        DnsConfigAdapterDomainName_A
        DnsConfigAdapterDomainName_UTF8

        '  In Win2K
        DnsConfigDnsServerList

        '  Not available yet
        DnsConfigSearchList
        DnsConfigAdapterInfo

        '  In Win2K
        DnsConfigPrimaryHostNameRegistrationEnabled
        DnsConfigAdapterHostNameRegistrationEnabled
        DnsConfigAddressRegistrationMaxCount

        '  In WindowsXP
        DnsConfigHostName_W
        DnsConfigHostName_A
        DnsConfigHostName_UTF8
        DnsConfigFullHostName_W
        DnsConfigFullHostName_A
        DnsConfigFullHostName_UTF8

        DnsConfigNameServer
    End Enum

    Public Enum WinDnsConfigFlags
        DNS_CONFIG_FLAG_ALLOC = &H00000001
    End Enum
    
    [UseGetLastError(False)]
    Public Declare PtrSafe Function DnsQueryConfig Lib "dnsapi.dll" (ByVal Config As DNS_CONFIG_TYPE, ByVal Flag As WinDnsConfigFlags, ByVal pwsAdapterName As LongPtr, ByVal pReserved As LongPtr, pBuffer As Any, pBufLen As Long) As Long
    
    Public Type DNS_A_DATA
        IpAddress As Long 'IP4_ADDRESS
    End Type
    
    Public Type DNS_PTR_DATAW
        pNameHost As LongPtr
    End Type
    
    Public Type DNS_PTR_DATAA
        pNameHost As String
    End Type
    'Alias DNS_PTR_DATA As DNS_PTR_DATAW '***COMPLETE ALIASES FOR NUMEROUS FOLLOWING TYPES::
    Public Type DNS_PTR_DATA
        pNameHost As LongPtr
    End Type
    
    Public Type DNS_SOA_DATAW
        pNamePrimaryServer As LongPtr
        pNameAdministrator As LongPtr
        dwSerialNo As Long
        dwRefresh As Long
        dwRetry As Long
        dwExpire As Long
        dwDefaultTtl As Long
    End Type
    Public Type DNS_SOA_DATAA
        pNamePrimaryServer As String
        pNameAdministrator As String
        dwSerialNo As Long
        dwRefresh As Long
        dwRetry As Long
        dwExpire As Long
        dwDefaultTtl As Long
    End Type
    Public Type DNS_SOA_DATA
        pNamePrimaryServer As LongPtr
        pNameAdministrator As LongPtr
        dwSerialNo As Long
        dwRefresh As Long
        dwRetry As Long
        dwExpire As Long
        dwDefaultTtl As Long
    End Type
        
    Public Type DNS_MINFO_DATAW
        pNameMailbox As LongPtr
        pNameErrorsMailbox As LongPtr
    End Type
    Public Type DNS_MINFO_DATAA
        pNameMailbox As String
        pNameErrorsMailbox As String
    End Type
    Public Type DNS_MINFO_DATA
        pNameMailbox As LongPtr
        pNameErrorsMailbox As LongPtr
    End Type
       
    Public Type DNS_MX_DATAW
        pNameExchange As LongPtr
        wPreference As Integer
        Pad As Integer ' keep ptrs DWORD aligned
    End Type
    Public Type DNS_MX_DATAA
        pNameExchange As String
        wPreference As Integer
        Pad As Integer ' keep ptrs DWORD aligned
    End Type
    
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
    Public Type DNS_TXT_DATAW
        dwStringCount As Long
        pStringArray(255) As LongPtr
    End Type
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
    Public Type DNS_TXT_DATAA
        dwStringCount As Long
        pStringArray(255) As String
    End Type
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
    Public Type DNS_TXT_DATA
        dwStringCount As Long
        pStringArray(255) As LongPtr
    End Type
       
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
    Public Type DNS_NULL_DATA
        dwByteCount As Long
        Data(0 To 4095) As Byte
    End Type
    
    Public Type DNS_WKS_DATA
        IpAddress As Long 'IP4_ADDRESS
        chProtocol As Byte
        BitMask(0 To 0) As Byte
    End Type
    
    Public Type DNS_AAAA_DATA
        Ip6Address As IP6_ADDRESS
    End Type
    
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
    Public Type DNS_SIG_DATAW
        wTypeCovered As Integer
        chAlgorithm As Byte
        chLabelCount As Byte
        dwOriginalTtl As Long
        dwExpiration As Long
        dwTimeSigned As Long
        wKeyTag As Integer
        wSignatureLength As Integer
        pNameSigner As LongPtr
        Signature(0 To 4095) As Byte
    End Type
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
    Public Type DNS_SIG_DATAA
        wTypeCovered As Integer
        chAlgorithm As Byte
        chLabelCount As Byte
        dwOriginalTtl As Long
        dwExpiration As Long
        dwTimeSigned As Long
        wKeyTag As Integer
        wSignatureLength As Integer
        pNameSigner As LongPtr
        Signature(0 To 4095) As Byte
    End Type
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
    Public Type DNS_SIG_DATA
        wTypeCovered As Integer
        chAlgorithm As Byte
        chLabelCount As Byte
        dwOriginalTtl As Long
        dwExpiration As Long
        dwTimeSigned As Long
        wKeyTag As Integer
        wSignatureLength As Integer
        pNameSigner As LongPtr
        Signature(0 To 4095) As Byte
    End Type
    
    'Alias DNS_RRSIG_DATAW As DNS_SIG_DATAW
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
    Public Type DNS_RRSIG_DATAW
        wTypeCovered As Integer
        chAlgorithm As Byte
        chLabelCount As Byte
        dwOriginalTtl As Long
        dwExpiration As Long
        dwTimeSigned As Long
        wKeyTag As Integer
        wSignatureLength As Integer
        pNameSigner As LongPtr
        Signature(0 To 4095) As Byte
    End Type
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
    Public Type DNS_RRSIG_DATAA
        wTypeCovered As Integer
        chAlgorithm As Byte
        chLabelCount As Byte
        dwOriginalTtl As Long
        dwExpiration As Long
        dwTimeSigned As Long
        wKeyTag As Integer
        wSignatureLength As Integer
        pNameSigner As LongPtr
        Signature(0 To 4095) As Byte
    End Type
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
    Public Type DNS_RRSIG_DATA
        wTypeCovered As Integer
        chAlgorithm As Byte
        chLabelCount As Byte
        dwOriginalTtl As Long
        dwExpiration As Long
        dwTimeSigned As Long
        wKeyTag As Integer
        wSignatureLength As Integer
        pNameSigner As LongPtr
        Signature(0 To 4095) As Byte
    End Type
    
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
    Public Type DNS_KEY_DATA
        wFlags As Integer
        chProtocol As Byte
        chAlgorithm As Byte
        wKeyLength As Integer
        wPad As Integer ' keep byte field aligned
        Key(0 To 4095) As Byte
    End Type
    'alias DNS_DNSKEY_DATA As DNS_KEY_DATA
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
    Public Type DNS_DNSKEY_DATA
        wFlags As Integer
        chProtocol As Byte
        chAlgorithm As Byte
        wKeyLength As Integer
        wPad As Integer ' keep byte field aligned
        Key(0 To 4095) As Byte
    End Type
    
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
    Public Type DNS_DHCID_DATA
        dwByteCount As Long
        DHCID(0 To 4095) As Byte
    End Type
    
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
    Public Type DNS_NSEC_DATAW
        pNextDomainName As LongPtr
        wTypeBitMapsLength As Integer
        wPad As Integer ' keep byte field aligned
        TypeBitMaps(0 To 4095) As Byte
    End Type
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
    Public Type DNS_NSEC_DATAA
        pNextDomainName As String
        wTypeBitMapsLength As Integer
        wPad As Integer ' keep byte field aligned
        TypeBitMaps(0 To 4095) As Byte
    End Type
    'Alias DNS_NSEC_DATA As DNS_NSEC_DATAW
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
    Public Type DNS_NSEC_DATA
        pNextDomainName As LongPtr
        wTypeBitMapsLength As Integer
        wPad As Integer ' keep byte field aligned
        TypeBitMaps(0 To 4095) As Byte
    End Type
    
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
    Public Type DNS_NSEC3_DATA
        chAlgorithm As Byte
        bFlags As Byte
        wIterations As Integer
        bSaltLength As Byte
        bHashLength As Byte
        wTypeBitMapsLength As Integer
        chData(0 To 4095) As Byte
    End Type
    
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
    Public Type DNS_NSEC3PARAM_DATA
        chAlgorithm As Byte
        bFlags As Byte
        wIterations As Integer
        bSaltLength As Byte
        bPad(0 To 2) As Byte ' keep salt field aligned
        pbSalt(0 To 4095) As Byte
    End Type
    
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
    Public Type DNS_TLSA_DATA
        bCertUsage As Byte
        bSelector As Byte
        bMatchingType As Byte
        bCertificateAssociationDataLength As Integer
        bPad(0 To 2) As Byte ' keep certificate association data field aligned
        bCertificateAssociationData(0 To 4095) As Byte
    End Type
    
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
    Public Type DNS_DS_DATA
        wKeyTag As Integer
        chAlgorithm As Byte
        chDigestType As Byte
        wDigestLength As Integer
        wPad As Integer ' keep byte field aligned
        Digest(0 To 4095) As Byte
    End Type
    
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
     Public Type DNS_OPT_DATA
        wDataLength As Integer
        wPad As Integer ' keep byte field aligned
        Data(0 To 4095) As Byte
    End Type
    
    Public Type DNS_LOC_DATA
        wVersion As Integer
        wSize As Integer
        wHorPrec As Integer
        wVerPrec As Integer
        dwLatitude As Long
        dwLongitude As Long
        dwAltitude As Long
    End Type
    
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
    Public Type DNS_NXT_DATAW
        pNameNext As LongPtr
        wNumTypes As Integer
        wTypes(0 To 1023) As Integer
    End Type
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
    Public Type DNS_NXT_DATAA
        pNameNext As String
        wNumTypes As Integer
        wTypes(0 To 1023) As Integer
    End Type
    'Alias DNS_NXT_DATA As DNS_NXT_DATAW
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
    Public Type DNS_NXT_DATA
        pNameNext As LongPtr
        wNumTypes As Integer
        wTypes(0 To 1023) As Integer
    End Type
    
    Public Type DNS_SRV_DATAW
        pNameTarget As LongPtr
        wPriority As Integer
        wWeight As Integer
        wPort As Integer
        Pad As Integer ' keep ptrs DWORD aligned
    End Type
    Public Type DNS_SRV_DATAA
        pNameTarget As String
        wPriority As Integer
        wWeight As Integer
        wPort As Integer
        Pad As Integer ' keep ptrs DWORD aligned
    End Type
    'Alias DNS_SRV_DATA As DNS_SRV_DATAW
    Public Type DNS_SRV_DATA
        pNameTarget As LongPtr
        wPriority As Integer
        wWeight As Integer
        wPort As Integer
        Pad As Integer ' keep ptrs DWORD aligned
    End Type
    
    Public Type DNS_NAPTR_DATAW
        wOrder As Integer
        wPreference As Integer
        pFlags As LongPtr
        pService As LongPtr
        pRegularExpression As LongPtr
        pReplacement As LongPtr
    End Type
    Public Type DNS_NAPTR_DATAA
        wOrder As Integer
        wPreference As Integer
        pFlags As String
        pService As String
        pRegularExpression As String
        pReplacement As String
    End Type
    'Alias DNS_NAPTR_DATA As DNS_NAPTR_DATAW
    Public Type DNS_NAPTR_DATA
        wOrder As Integer
        wPreference As Integer
        pFlags As LongPtr
        pService As LongPtr
        pRegularExpression As LongPtr
        pReplacement As LongPtr
    End Type
    
    Public Type DNS_ATMA_DATA
        AddressType As Byte
        Address(0 To (DNS_ATMA_MAX_ADDR_LENGTH - 1)) As Byte
        '  E164 -- Null terminated string of less than
        '      DNS_ATMA_MAX_ADDR_LENGTH
        '  For NSAP (AESA) BCD encoding of exactly
        '      DNS_ATMA_AESA_ADDR_LENGTH
    End Type
    
    Public Type DNS_TKEY_DATAW
        pNameAlgorithm As LongPtr
        '#ifdef MIDL_PASS
        '    [size_is(cAlgNameLength)]
        '#endif
        pAlgorithmPacket As LongPtr
        '#ifdef MIDL_PASS
        '    [size_is(wKeyLength)]
        '#endif
        pKey As LongPtr
        '#ifdef MIDL_PASS
        '    [size_is(wOtherLength)]
        '#endif
        pOtherData As LongPtr
        dwCreateTime As Long
        dwExpireTime As Long
        wMode As Integer
        wError As Integer
        wKeyLength As Integer
        wOtherLength As Integer
        cAlgNameLength As Byte
        bPacketPointers As BOOL
    End Type
    Public Type DNS_TKEY_DATAA
        pNameAlgorithm As String
        '#ifdef MIDL_PASS
        '    [size_is(cAlgNameLength)]
        '#endif
        pAlgorithmPacket As LongPtr
        '#ifdef MIDL_PASS
        '    [size_is(wKeyLength)]
        '#endif
        pKey As LongPtr
        '#ifdef MIDL_PASS
        '    [size_is(wOtherLength)]
        '#endif
        pOtherData As LongPtr
        dwCreateTime As Long
        dwExpireTime As Long
        wMode As Integer
        wError As Integer
        wKeyLength As Integer
        wOtherLength As Integer
        cAlgNameLength As Byte
        bPacketPointers As BOOL
    End Type
    'Alias DNS_TKEY_DATA As DNS_TKEY_DATAW
    Public Type DNS_TKEY_DATA
        pNameAlgorithm As LongPtr
        '#ifdef MIDL_PASS
        '    [size_is(cAlgNameLength)]
        '#endif
        pAlgorithmPacket As LongPtr
        '#ifdef MIDL_PASS
        '    [size_is(wKeyLength)]
        '#endif
        pKey As LongPtr
        '#ifdef MIDL_PASS
        '    [size_is(wOtherLength)]
        '#endif
        pOtherData As LongPtr
        dwCreateTime As Long
        dwExpireTime As Long
        wMode As Integer
        wError As Integer
        wKeyLength As Integer
        wOtherLength As Integer
        cAlgNameLength As Byte
        bPacketPointers As BOOL
    End Type
    
    Public Type DNS_TSIG_DATAW
        pNameAlgorithm As LongPtr
        '#ifdef MIDL_PASS
        '    [size_is(cAlgNameLength)]
        '#endif
        pAlgorithmPacket As LongPtr
        '#ifdef MIDL_PASS
        '    [size_is(wSigLength)]
        '#endif
        pSignature As LongPtr
        '#ifdef MIDL_PASS
        '    [size_is(wOtherLength)]
        '#endif
        pOtherData As LongPtr
        i64CreateTime As LongLong
        wFudgeTime As Integer
        wOriginalXid As Integer
        wError As Integer
        wSigLength As Integer
        wOtherLength As Integer
        cAlgNameLength As Byte
        bPacketPointers As BOOL
    End Type
    Public Type DNS_TSIG_DATAA
        pNameAlgorithm As String
        '#ifdef MIDL_PASS
        '    [size_is(cAlgNameLength)]
        '#endif
        pAlgorithmPacket As LongPtr
        '#ifdef MIDL_PASS
        '    [size_is(wSigLength)]
        '#endif
        pSignature As LongPtr
        '#ifdef MIDL_PASS
        '    [size_is(wOtherLength)]
        '#endif
        pOtherData As LongPtr
        i64CreateTime As LongLong
        wFudgeTime As Integer
        wOriginalXid As Integer
        wError As Integer
        wSigLength As Integer
        wOtherLength As Integer
        cAlgNameLength As Byte
        bPacketPointers As BOOL
    End Type
    'Alias DNS_TSIG_DATA  As DNS_TSIG_DATAW
    Public Type DNS_TSIG_DATA
        pNameAlgorithm As LongPtr
        '#ifdef MIDL_PASS
        '    [size_is(cAlgNameLength)]
        '#endif
        pAlgorithmPacket As LongPtr
        '#ifdef MIDL_PASS
        '    [size_is(wSigLength)]
        '#endif
        pSignature As LongPtr
        '#ifdef MIDL_PASS
        '    [size_is(wOtherLength)]
        '#endif
        pOtherData As LongPtr
        i64CreateTime As LongLong
        wFudgeTime As Integer
        wOriginalXid As Integer
        wError As Integer
        wSigLength As Integer
        wOtherLength As Integer
        cAlgNameLength As Byte
        bPacketPointers As BOOL
    End Type
    
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
    Public Type DNS_UNKNOWN_DATA
        dwByteCount As Long
        bData(0 To 4095) As Byte
    End Type
    
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
    Public Type DNS_WINS_DATA
        dwMappingFlag As Long
        dwLookupTimeout As Long
        dwCacheTimeout As Long
        cWinsServerCount As Long
        WinsServers(0 To 255) As Long 'IP4_ADDRESS
    End Type
    
    Public Type DNS_WINSR_DATAW
        dwMappingFlag As Long
        dwLookupTimeout As Long
        dwCacheTimeout As Long
        pNameResultDomain As LongPtr
    End Type
    Public Type DNS_WINSR_DATAA
        dwMappingFlag As Long
        dwLookupTimeout As Long
        dwCacheTimeout As Long
        pNameResultDomain As String
    End Type
    Public Type DNS_WINSR_DATA
        dwMappingFlag As Long
        dwLookupTimeout As Long
        dwCacheTimeout As Long
        pNameResultDomain As LongPtr
    End Type
    
    Public Const DDR_MAX_IP_HINTS = 4
    
Public Enum DNS_SVCB_PARAM_TYPE
    DnsSvcbParamMandatory = 0
    DnsSvcbParamAlpn = 1
    DnsSvcbParamNoDefaultAlpn = 2
    DnsSvcbParamPort = 3
    DnsSvcbParamIpv4Hint = 4
    DnsSvcbParamEch = 5
    DnsSvcbParamIpv6Hint = 6
    DnsSvcbParamDohPath = 7
    DnsSvcbParamDohPathOpenDns = 65432
End Enum

[Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
Public Type DNS_SVCB_PARAM_MANDATORY
    cMandatoryKeys As Integer
    rgwMandatoryKeys(0 To 1023) As Integer
End Type

Public Type DNS_SVCB_PARAM_ALPN_ID
    cBytes As Byte
    pbId As LongPtr 'BYTE *
End Type

[Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
Public Type DNS_SVCB_PARAM_ALPN
    cIds As Integer
    rgIds(0 To 1023) As DNS_SVCB_PARAM_ALPN_ID
End Type

[Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
Public Type DNS_SVCB_PARAM_IPV4
    cIps As Integer
    rgIps(0 To 4095) As Long 'IP4_ADDRESS
End Type

[Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
Public Type DNS_SVCB_PARAM_IPV6
    cIps As Integer
    rgIps(0 To 4095) As IP6_ADDRESS
End Type

[Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
Public Type DNS_SVCB_PARAM_UNKNOWN
    cBytes As Integer
    pbSvcParamValue(0 To 4095) As Byte
End Type

Public Type DNS_SVCB_PARAM
    wSvcParamKey As Integer
    ' union
    ' {
        ' DNS_SVCB_PARAM_IPV4      *pIpv4Hints;
        ' DNS_SVCB_PARAM_IPV6      *pIpv6Hints;
        ' DNS_SVCB_PARAM_MANDATORY *pMandatory;
        ' DNS_SVCB_PARAM_ALPN      *pAlpn;
        ' WORD                     wPort;
        ' DNS_SVCB_PARAM_UNKNOWN   *pUnknown;
        ' PSTR                     pszDohPath;
        ' VOID                     *pReserved;
    ' };
    u As LongPtr
End Type

Public Type DNS_SVCB_DATA
    wSvcPriority As Integer
    pszTargetName As LongPtr
    cSvcParams As Integer
    pSvcParams As LongPtr 'DNS_SVCB_PARAM *
End Type
' VarPtr(CType(Of DEVMODEW)(vbNullPtr).dmColor)
' #define DNS_TEXT_RECORD_LENGTH(StringCount) \
' (FIELD_OFFSET(DNS_TXT_DATA, pStringArray) + ((StringCount) * sizeof(PCHAR)))
Public Function DNS_TEXT_RECORD_LENGTH(ByVal StringCount As Long) As Long
    Return CLng(VarPtr(CType(Of DNS_TXT_DATA)(vbNullPtr).pStringArray)) + ((StringCount) * LenB(Of Integer))
End Function
    
' #define DNS_NULL_RECORD_LENGTH(ByteCount) \
' (FIELD_OFFSET(DNS_NULL_DATA, Data) + (ByteCount))
Public Function DNS_NULL_RECORD_LENGTH(ByVal ByteCount As Long) As Long
    Return CLng(VarPtr(CType(Of DNS_NULL_DATA)(vbNullPtr).Data)) + ByteCount
End Function
' #define DNS_WKS_RECORD_LENGTH(ByteCount) \
' (FIELD_OFFSET(DNS_WKS_DATA, BitMask) + (ByteCount))
Public Function DNS_WKS_RECORD_LENGTH(ByVal ByteCount As Long) As Long
    Return CLng(VarPtr(CType(Of DNS_WKS_DATA)(vbNullPtr).BitMask)) + ByteCount
End Function
' #define DNS_WINS_RECORD_LENGTH(IpCount) \
' (FIELD_OFFSET(DNS_WINS_DATA, WinsServers) + ((IpCount) * sizeof(IP4_ADDRESS)))
Public Function DNS_WINS_RECORD_LENGTH(ByVal IpCount As Long) As Long
    Return CLng(VarPtr(CType(Of DNS_WINS_DATA)(vbNullPtr).WinsServers)) + (IpCount * LenB(Of Long))
End Function
' #define DNS_KEY_RECORD_LENGTH(ByteCount) \
' (FIELD_OFFSET(DNS_KEY_DATA, Key) + (ByteCount))
Public Function DNS_KEY_RECORD_LENGTH(ByVal ByteCount As Long) As Long
    Return CLng(VarPtr(CType(Of DNS_KEY_DATA)(vbNullPtr).Key)) + ByteCount
End Function
' #define DNS_SIG_RECORD_LENGTH(ByteCount) \
' (FIELD_OFFSET(DNS_SIG_DATA, Signature) + (ByteCount))
Public Function DNS_SIG_RECORD_LENGTH(ByVal ByteCount As Long) As Long
    Return CLng(VarPtr(CType(Of DNS_SIG_DATA)(vbNullPtr).Signature)) + ByteCount
End Function
' #define DNS_NSEC_RECORD_LENGTH(ByteCount) \
' (FIELD_OFFSET(DNS_NSEC_DATA, TypeBitMaps) + (ByteCount))
Public Function DNS_NSEC_RECORD_LENGTH(ByVal ByteCount As Long) As Long
    Return CLng(VarPtr(CType(Of DNS_NSEC_DATA)(vbNullPtr).TypeBitMaps)) + ByteCount
End Function
' #define DNS_DS_RECORD_LENGTH(ByteCount) \
' (FIELD_OFFSET(DNS_DS_DATA, Digest) + (ByteCount))
Public Function DNS_DS_RECORD_LENGTH(ByVal ByteCount As Long) As Long
    Return CLng(VarPtr(CType(Of DNS_DS_DATA)(vbNullPtr).Digest)) + ByteCount
End Function
' #define DNS_OPT_RECORD_LENGTH(ByteCount) \
' (FIELD_OFFSET(DNS_OPT_DATA, Data) + (ByteCount))
Public Function DNS_OPT_RECORD_LENGTH(ByVal ByteCount As Long) As Long
    Return CLng(VarPtr(CType(Of DNS_OPT_DATA)(vbNullPtr).Data)) + ByteCount
End Function
' #define DNS_DHCID_RECORD_LENGTH(ByteCount) \
' (FIELD_OFFSET(DNS_DHCID_DATA, DHCID) + (ByteCount))
Public Function DNS_DHCID_RECORD_LENGTH(ByVal ByteCount As Long) As Long
    Return CLng(VarPtr(CType(Of DNS_DHCID_DATA)(vbNullPtr).DHCID)) + ByteCount
End Function
' #define DNS_NSEC3_RECORD_LENGTH(ByteCount) \
' (FIELD_OFFSET(DNS_NSEC3_DATA, chData) + (ByteCount))
Public Function DNS_NSEC3_RECORD_LENGTH(ByVal ByteCount As Long) As Long
    Return CLng(VarPtr(CType(Of DNS_NSEC3_DATA)(vbNullPtr).chData)) + ByteCount
End Function
' #define DNS_NSEC3PARAM_RECORD_LENGTH(ByteCount) \
' (FIELD_OFFSET(DNS_NSEC3PARAM_DATA, pbSalt) + (ByteCount))
Public Function DNS_NSEC3PARAM_RECORD_LENGTH(ByVal ByteCount As Long) As Long
    Return CLng(VarPtr(CType(Of DNS_NSEC3PARAM_DATA)(vbNullPtr).pbSalt)) + ByteCount
End Function
' #define DNS_TLSA_RECORD_LENGTH(ByteCount) \
' (FIELD_OFFSET(DNS_TLSA_DATA, bCertificateAssociationData) + (ByteCount))
Public Function DNS_TLSA_RECORD_LENGTH(ByVal ByteCount As Long) As Long
    Return CLng(VarPtr(CType(Of DNS_TLSA_DATA)(vbNullPtr).bCertificateAssociationData)) + ByteCount
End Function
' #define DNS_UNKNOWN_RECORD_LENGTH(ByteCount) \
' (FIELD_OFFSET(DNS_UNKNOWN_DATA, bData) + (ByteCount))
Public Function DNS_UNKNOWN_RECORD_LENGTH(ByVal ByteCount As Long) As Long
    Return CLng(VarPtr(CType(Of DNS_UNKNOWN_DATA)(vbNullPtr).bData)) + ByteCount
End Function


Public Type DNS_RECORD_FLAGS
    ' DWORD   Section     : 2;
    ' DWORD   Delete      : 1;
    ' DWORD   CharSet     : 2;
    ' DWORD   Unused      : 3;

    ' DWORD   Reserved    : 24;
    Bitfield As Long
End Type

Public Enum DNS_SECTION
    DnsSectionQuestion = 0
    DnsSectionAnswer = 1
    DnsSectionAuthority = 2
    DnsSectionAddtional = 3
End Enum

Public Const DnsSectionZone  = DnsSectionQuestion
Public Const DnsSectionPrereq  = DnsSectionAnswer
Public Const DnsSectionUpdate  = DnsSectionAuthority

Public Enum DnsRecordBitFlags
    DNSREC_SECTION = (&H00000003)
    DNSREC_QUESTION = (&H00000000)
    DNSREC_ANSWER = (&H00000001)
    DNSREC_AUTHORITY = (&H00000002)
    DNSREC_ADDITIONAL = (&H00000003)
'   RR Section in packet (update)
    DNSREC_ZONE = (&H00000000)
    DNSREC_PREREQ = (&H00000001)
    DNSREC_UPDATE = (&H00000002)
'   Delete RR (update) or No-exist (prerequisite)
    DNSREC_DELETE = (&H00000004)
    DNSREC_NOEXIST = (&H00000004)
End Enum

Public Type DNS_RECORDW
    pNext As LongPtr 'DNS_RECORDW *
    pName As LongPtr
    wType As Integer
    wDataLength As Integer ' Not referenced for DNS record types
    ' defined above.
    'union
    ' {
    '    DWORD               DW;     // flags as DWORD
    '     DNS_RECORD_FLAGS    S;      // flags as structure
    '  } Flags;
    Flags As Long
    dwTtl As Long
    dwReserved As Long
    
    ' union
    ' {
        ' DNS_A_DATA          A;
        ' DNS_SOA_DATAW       SOA, Soa;
        ' DNS_PTR_DATAW       PTR, Ptr,
                            ' NS, Ns,
                            ' CNAME, Cname,
                            ' DNAME, Dname,
                            ' MB, Mb,
                            ' MD, Md,
                            ' MF, Mf,
                            ' MG, Mg,
                            ' MR, Mr;
        ' DNS_MINFO_DATAW     MINFO, Minfo,
                            ' RP, Rp;
        ' DNS_MX_DATAW        MX, Mx,
                            ' AFSDB, Afsdb,
                            ' RT, Rt;
        ' DNS_TXT_DATAW       HINFO, Hinfo,
                            ' ISDN, Isdn,
                            ' TXT, Txt,
                            ' X25;
        ' DNS_NULL_DATA       Null;
        ' DNS_WKS_DATA        WKS, Wks;
        ' DNS_AAAA_DATA       AAAA;
        ' DNS_KEY_DATA        KEY, Key;
        ' DNS_SIG_DATAW       SIG, Sig;
        ' DNS_ATMA_DATA       ATMA, Atma;
        ' DNS_NXT_DATAW       NXT, Nxt;
        ' DNS_SRV_DATAW       SRV, Srv;
        ' DNS_NAPTR_DATAW     NAPTR, Naptr;
        ' DNS_OPT_DATA        OPT, Opt;
        ' DNS_DS_DATA         DS, Ds;
        ' DNS_RRSIG_DATAW     RRSIG, Rrsig;
        ' DNS_NSEC_DATAW      NSEC, Nsec;
        ' DNS_DNSKEY_DATA     DNSKEY, Dnskey;
        ' DNS_TKEY_DATAW      TKEY, Tkey;
        ' DNS_TSIG_DATAW      TSIG, Tsig;
        ' DNS_WINS_DATA       WINS, Wins;
        ' DNS_WINSR_DATAW     WINSR, WinsR, NBSTAT, Nbstat;
        ' DNS_DHCID_DATA      DHCID;
        ' DNS_NSEC3_DATA      NSEC3, Nsec3;
        ' DNS_NSEC3PARAM_DATA NSEC3PARAM, Nsec3Param;
        ' DNS_TLSA_DATA       TLSA, Tlsa;
        ' DNS_SVCB_DATA       SVCB, Svcb;
        ' DNS_UNKNOWN_DATA    UNKNOWN, Unknown;
        ' PBYTE               pDataPtr;

    ' } Data;
    #If Win64 Then
    Data(55) As Byte
    #Else
    Data(39) As Byte
    #End If
End Type

Public Type DNS_RECORD_OPTW
    pNext As LongPtr 'DNS_RECORDW *
    pName As LongPtr
    wType As Integer
    wDataLength As Integer ' Not referenced for DNS record types
    ' defined above.
    'union
    '{
    '    DWORD               DW;     // flags as DWORD
    '    DNS_RECORD_FLAGS    S;      // flags as structure
    '} Flags;
    Flags As Long
    ExtHeader As DNS_HEADER_EXT ' TTL
    wPayloadSize As Integer ' dwReserved;
    wReserved As Integer
    '  Record Data
    'union
    '{
    Opt As DNS_OPT_DATA
    '} Data;
End Type

Public Type DNS_RECORDA
    pNext As LongPtr 'DNS_RECORDW *
    pName As LongPtr
    wType As Integer
    wDataLength As Integer ' Not referenced for DNS record types
    ' defined above.
    'union
    ' {
    '    DWORD               DW;     // flags as DWORD
    '     DNS_RECORD_FLAGS    S;      // flags as structure
    '  } Flags;
    Flags As Long
    dwTtl As Long
    dwReserved As Long
    
    ' union
    ' {
    ' DNS_A_DATA          A;
    ' DNS_SOA_DATAA       SOA, Soa;
    ' DNS_PTR_DATAA       PTR, Ptr,
                        ' NS, Ns,
                        ' CNAME, Cname,
                        ' DNAME, Dname,
                        ' MB, Mb,
                        ' MD, Md,
                        ' MF, Mf,
                        ' MG, Mg,
                        ' MR, Mr;
    ' DNS_MINFO_DATAA     MINFO, Minfo,
                        ' RP, Rp;
    ' DNS_MX_DATAA        MX, Mx,
                        ' AFSDB, Afsdb,
                        ' RT, Rt;
    ' DNS_TXT_DATAA       HINFO, Hinfo,
                        ' ISDN, Isdn,
                        ' TXT, Txt,
                        ' X25;
    ' DNS_NULL_DATA       Null;
    ' DNS_WKS_DATA        WKS, Wks;
    ' DNS_AAAA_DATA       AAAA;
    ' DNS_KEY_DATA        KEY, Key;
    ' DNS_SIG_DATAA       SIG, Sig;
    ' DNS_ATMA_DATA       ATMA, Atma;
    ' DNS_NXT_DATAA       NXT, Nxt;
    ' DNS_SRV_DATAA       SRV, Srv;
    ' DNS_NAPTR_DATAA     NAPTR, Naptr;
    ' DNS_OPT_DATA        OPT, Opt;
    ' DNS_DS_DATA         DS, Ds;
    ' DNS_RRSIG_DATAA     RRSIG, Rrsig;
    ' DNS_NSEC_DATAA      NSEC, Nsec;
    ' DNS_DNSKEY_DATA     DNSKEY, Dnskey;
    ' DNS_TKEY_DATAA      TKEY, Tkey;
    ' DNS_TSIG_DATAA      TSIG, Tsig;
    ' DNS_WINS_DATA       WINS, Wins;
    ' DNS_WINSR_DATAA     WINSR, WinsR, NBSTAT, Nbstat;
    ' DNS_DHCID_DATA      DHCID;
    ' DNS_NSEC3_DATA      NSEC3, Nsec3;
    ' DNS_NSEC3PARAM_DATA NSEC3PARAM, Nsec3Param;
    ' DNS_TLSA_DATA       TLSA, Tlsa;
    ' DNS_SVCB_DATA       SVCB, Svcb;
    ' DNS_UNKNOWN_DATA    UNKNOWN, Unknown;
    ' PBYTE               pDataPtr;

    ' } Data;
    #If Win64 Then
    Data(55) As Byte
    #Else
    Data(39) As Byte
    #End If
End Type

Public Type DNS_RECORD_OPTA
    pNext As LongPtr 'DNS_RECORDA *
    pName As LongPtr
    wType As Integer
    wDataLength As Integer ' Not referenced for DNS record types
    ' defined above.
    'union
    '{
    '    DWORD               DW;     // flags as DWORD
    '    DNS_RECORD_FLAGS    S;      // flags as structure
    '} Flags;
    Flags As Long
    ExtHeader As DNS_HEADER_EXT ' TTL
    wPayloadSize As Integer ' dwReserved;
    wReserved As Integer
    '  Record Data
    'union
    '{
    Opt As DNS_OPT_DATA
    '} Data;
End Type
    
Public Type DNS_RECORD
    pNext As LongPtr 'DNS_RECORD *
    pName As LongPtr
    wType As Integer
    wDataLength As Integer ' Not referenced for DNS record types
    ' defined above.
    'union
    ' {
    '    DWORD               DW;     // flags as DWORD
    '     DNS_RECORD_FLAGS    S;      // flags as structure
    '  } Flags;
    Flags As Long
    dwTtl As Long
    dwReserved As Long
    
    ' union
    ' {
        ' DNS_A_DATA          A;
        ' DNS_SOA_DATAW       SOA, Soa;
        ' DNS_PTR_DATAW       PTR, Ptr,
                            ' NS, Ns,
                            ' CNAME, Cname,
                            ' DNAME, Dname,
                            ' MB, Mb,
                            ' MD, Md,
                            ' MF, Mf,
                            ' MG, Mg,
                            ' MR, Mr;
        ' DNS_MINFO_DATAW     MINFO, Minfo,
                            ' RP, Rp;
        ' DNS_MX_DATAW        MX, Mx,
                            ' AFSDB, Afsdb,
                            ' RT, Rt;
        ' DNS_TXT_DATAW       HINFO, Hinfo,
                            ' ISDN, Isdn,
                            ' TXT, Txt,
                            ' X25;
        ' DNS_NULL_DATA       Null;
        ' DNS_WKS_DATA        WKS, Wks;
        ' DNS_AAAA_DATA       AAAA;
        ' DNS_KEY_DATA        KEY, Key;
        ' DNS_SIG_DATAW       SIG, Sig;
        ' DNS_ATMA_DATA       ATMA, Atma;
        ' DNS_NXT_DATAW       NXT, Nxt;
        ' DNS_SRV_DATAW       SRV, Srv;
        ' DNS_NAPTR_DATAW     NAPTR, Naptr;
        ' DNS_OPT_DATA        OPT, Opt;
        ' DNS_DS_DATA         DS, Ds;
        ' DNS_RRSIG_DATAW     RRSIG, Rrsig;
        ' DNS_NSEC_DATAW      NSEC, Nsec;
        ' DNS_DNSKEY_DATA     DNSKEY, Dnskey;
        ' DNS_TKEY_DATAW      TKEY, Tkey;
        ' DNS_TSIG_DATAW      TSIG, Tsig;
        ' DNS_WINS_DATA       WINS, Wins;
        ' DNS_WINSR_DATAW     WINSR, WinsR, NBSTAT, Nbstat;
        ' DNS_DHCID_DATA      DHCID;
        ' DNS_NSEC3_DATA      NSEC3, Nsec3;
        ' DNS_NSEC3PARAM_DATA NSEC3PARAM, Nsec3Param;
        ' DNS_TLSA_DATA       TLSA, Tlsa;
        ' DNS_SVCB_DATA       SVCB, Svcb;
        ' DNS_UNKNOWN_DATA    UNKNOWN, Unknown;
        ' PBYTE               pDataPtr;

    ' } Data;
    #If Win64 Then
    Data(55) As Byte
    #Else
    Data(39) As Byte
    #End If
End Type

Public Type DNS_RECORD_OPT
    pNext As LongPtr 'DNS_RECORDW *
    pName As LongPtr
    wType As Integer
    wDataLength As Integer ' Not referenced for DNS record types
    ' defined above.
    'union
    '{
    '    DWORD               DW;     // flags as DWORD
    '    DNS_RECORD_FLAGS    S;      // flags as structure
    '} Flags;
    Flags As Long
    ExtHeader As DNS_HEADER_EXT ' TTL
    wPayloadSize As Integer ' dwReserved;
    wReserved As Integer
    '  Record Data
    'union
    '{
    Opt As DNS_OPT_DATA
    '} Data;
End Type

#If Win64 Then
Public Const DNS_RECORD_FIXED_SIZE  = 32 'FIELD_OFFSET(DNS_RECORD, Data)
#Else
Public Const DNS_RECORD_FIXED_SIZE  = 24 'FIELD_OFFSET(DNS_RECORD, Data)
#End If
Public Const SIZEOF_DNS_RECORD_HEADER  = DNS_RECORD_FIXED_SIZE

Public Type DNS_RRSET
    pFirstRR As LongPtr 'PDNS_RECORD
    pLastRR As LongPtr 'PDNS_RECORD
End Type


' #define DNS_RRSET_INIT( rrset )                 \
' {                                       \
    ' PDNS_RRSET  _prrset = &(rrset);     \
    ' _prrset->pFirstRR = NULL;           \
    ' _prrset->pLastRR = (PDNS_RECORD) &_prrset->pFirstRR; \
' }

' #define DNS_RRSET_ADD( rrset, pnewRR )          \
' {                                       \
    ' PDNS_RRSET  _prrset = &(rrset);     \
    ' PDNS_RECORD _prrnew = (pnewRR);     \
    ' _prrset->pLastRR->pNext = _prrnew;  \
    ' _prrset->pLastRR = _prrnew;         \
' }

' #define DNS_RRSET_TERMINATE( rrset )            \
' {                                       \
    ' PDNS_RRSET  _prrset = &(rrset);     \
    ' _prrset->pLastRR->pNext = NULL;     \
' }


Public Delegate Sub DNS_PROXY_COMPLETION_ROUTINE (ByVal completionContext As LongPtr, ByVal status As Long)

Public Enum DNS_PROXY_INFORMATION_TYPE
    DNS_PROXY_INFORMATION_DIRECT
    DNS_PROXY_INFORMATION_DEFAULT_SETTINGS
    DNS_PROXY_INFORMATION_PROXY_NAME
    DNS_PROXY_INFORMATION_DOES_NOT_EXIST
End Enum

Public Type DNS_PROXY_INFORMATION
    version As Long ' Current version is 1
    proxyInformationType As DNS_PROXY_INFORMATION_TYPE
    proxyName As LongPtr
End Type

Public Enum DNS_CHARSET
    DnsCharSetUnknown
    DnsCharSetUnicode
    DnsCharSetUtf8
    DnsCharSetAnsi
End Enum

Public Declare PtrSafe Function DnsRecordCopyEx Lib "Dnsapi.dll" (pRecord As DNS_RECORD, ByVal CharSetIn As DNS_CHARSET, ByVal CharSetOut As DNS_CHARSET) As LongPtr
Public Declare PtrSafe Function DnsRecordSetCopyEx Lib "Dnsapi.dll" (pRecordSet As DNS_RECORD, ByVal CharSetIn As DNS_CHARSET, ByVal CharSetOut As DNS_CHARSET) As LongPtr

Public Function DnsRecordCopy(pRR As DNS_RECORD) As LongPtr
    Return DnsRecordCopyEx(pRR, DnsCharSetUnicode, DnsCharSetUnicode)
End Function
Public Function DnsRecordSetCopy(pRR As DNS_RECORD) As LongPtr
    Return DnsRecordSetCopyEx(pRR, DnsCharSetUnicode, DnsCharSetUnicode)
End Function

Public Declare PtrSafe Function DnsRecordCompare Lib "Dnsapi.dll" (pRecord1 As DNS_RECORD, pRecord2 As DNS_RECORD) As BOOL
Public Declare PtrSafe Function DnsRecordSetCompare Lib "Dnsapi.dll" (pRecord1 As DNS_RECORD, pRecord2 As DNS_RECORD, ppDiff1 As LongPtr, ppDiff2 As LongPtr) As BOOL
Public Declare PtrSafe Function DnsRecordSetDetach Lib "Dnsapi.dll" (pRecordList As DNS_RECORD) As LongPtr

Public Enum DNS_FREE_TYPE
    DnsFreeFlat = 0
    DnsFreeRecordList = 1
    DnsFreeParsedMessageFields = 2
    DnsFreeRecordListDeep = DnsFreeRecordList
End Enum

Public Declare PtrSafe Sub DnsFree Lib "Dnsapi.dll" (pData As Any, ByVal FreeType As DNS_FREE_TYPE)

Public Sub DnsRecordListFree(p As DNS_RECORD, ByVal FreeType As DNS_FREE_TYPE)
    DnsFree(p, DnsFreeRecordList)
End Sub

[UseGetLastError(False)]
Public Declare PtrSafe Function DnsIsFlatRecord Lib "Dnsapi.dll" (pRecord As DNS_RECORD, ByVal ullFlags As LongLong, pfFlat As BOOL) As Long

Public Enum DnsQueryFlags
    DNS_QUERY_STANDARD = &H00000000
    DNS_QUERY_ACCEPT_TRUNCATED_RESPONSE = &H00000001
    DNS_QUERY_USE_TCP_ONLY = &H00000002
    DNS_QUERY_NO_RECURSION = &H00000004
    DNS_QUERY_BYPASS_CACHE = &H00000008
    DNS_QUERY_NO_WIRE_QUERY = &H00000010
    DNS_QUERY_NO_LOCAL_NAME = &H00000020
    DNS_QUERY_NO_HOSTS_FILE = &H00000040
    DNS_QUERY_NO_NETBT = &H00000080
    DNS_QUERY_WIRE_ONLY = &H00000100
    DNS_QUERY_RETURN_MESSAGE = &H00000200
    DNS_QUERY_MULTICAST_ONLY = &H00000400
    DNS_QUERY_NO_MULTICAST = &H00000800
    DNS_QUERY_TREAT_AS_FQDN = &H00001000
    DNS_QUERY_ADDRCONFIG = &H00002000
    DNS_QUERY_DUAL_ADDR = &H00004000
    DNS_QUERY_DONT_RESET_TTL_VALUES = &H00100000
    DNS_QUERY_DISABLE_IDN_ENCODING = &H00200000
    DNS_QUERY_APPEND_MULTILABEL = &H00800000
    DNS_QUERY_DNSSEC_OK = &H01000000  ' Sets DNSSEC OK (DO) bit in query
    DNS_QUERY_DNSSEC_CHECKING_DISABLED = &H02000000  ' Sets DNSSEC checking disabled (CD) bit in query
    DNS_QUERY_DNSSEC_REQUIRED = &H04000000  ' Sets DNSSEC OK (DO) bit in query AND requires that response contains authenticated data (AD) bit set
    DNS_QUERY_RESERVED = &Hf0000000
'   Backward compatibility with Win2K
'   Do not use
    DNS_QUERY_CACHE_ONLY = DNS_QUERY_NO_WIRE_QUERY
End Enum

Public Const DNS_QUERY_PARSE_ALL_RECORDS        = &H0400000000000000

[UseGetLastError(False)]
Public Declare PtrSafe Function DnsQuery_A Lib "Dnsapi.dll" (ByVal pszName As String, [TypeHint(WinDnsRecordTypes)] ByVal wType As Integer, ByVal Options As DnsQueryFlags, ByVal pExtra As LongPtr, ppQueryResults As LongPtr, Optional ByVal pReserved As LongPtr) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function DnsQuery_UTF8 Lib "Dnsapi.dll" (ByVal pszName As LongPtr, [TypeHint(WinDnsRecordTypes)] ByVal wType As Integer, ByVal Options As DnsQueryFlags, ByVal pExtra As LongPtr, ppQueryResults As LongPtr, Optional ByVal pReserved As LongPtr) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function DnsQuery_W Lib "Dnsapi.dll" (ByVal pszName As LongPtr, [TypeHint(WinDnsRecordTypes)] ByVal wType As Integer, ByVal Options As DnsQueryFlags, ByVal pExtra As LongPtr, ppQueryResults As LongPtr, Optional ByVal pReserved As LongPtr) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function DnsQuery Lib "Dnsapi.dll" Alias "DnsQuery_W" (ByVal pszName As String, [TypeHint(WinDnsRecordTypes)] ByVal wType As Integer, ByVal Options As DnsQueryFlags, ByVal pExtra As LongPtr, ppQueryResults As LongPtr, Optional ByVal pReserved As LongPtr) As Long

Public Enum DnsQueryRequestVersions
    DNS_QUERY_REQUEST_VERSION1 = &H1
    DNS_QUERY_REQUEST_VERSION2 = &H2
    DNS_QUERY_REQUEST_VERSION3 = &H3
End Enum
Public Enum DnsQueryResultVersions
    DNS_QUERY_RESULTS_VERSION1 = 1
End Enum
Public Type DNS_QUERY_RESULT
    Version As DnsQueryResultVersions
    QueryStatus As Long 'DNS_STATUS
    QueryOptions As LongLong
    pQueryRecords As LongPtr 'PDNS_RECORD
    Reserved As LongPtr
End Type

Public Delegate Sub DNS_QUERY_COMPLETION_ROUTINE (ByVal pQueryContext As LongPtr, pQueryResults As DNS_QUERY_RESULT)

Public Enum DnsCustomServerTypes
    DNS_CUSTOM_SERVER_TYPE_UDP = &H1
    DNS_CUSTOM_SERVER_TYPE_DOH = &H2
    DNS_CUSTOM_SERVER_TYPE_DOT = &H3
End Enum

Public Const DNS_CUSTOM_SERVER_UDP_FALLBACK As LongLong = 1

Public Type DNS_CUSTOM_SERVER
    dwServerType As DnsCustomServerTypes
    ullFlags As LongLong
    ' union
    ' {
        ' PWSTR pwszTemplate;
        ' PWSTR pwszHostname;
    ' };
    pwszHostnameOrTemplate As LongPtr
    ' union
    ' {
' #ifdef _WS2TCPIP_H_
        ' SOCKADDR_INET ServerAddr;
' #endif
        ' CHAR          MaxSa[DNS_ADDR_MAX_SOCKADDR_LENGTH];
    ' };
    u(31) As Byte
End Type

Public Enum DnsApplicationSettingsFlags
    DNS_APP_SETTINGS_VERSION1 = &H1
    DNS_APP_SETTINGS_EXCLUSIVE_SERVERS = &H1
End Enum
Public Type DNS_APPLICATION_SETTINGS
    Version As Long
    /* [TypeHint(DnsApplicationSettingsFlags)] */ Flags As LongLong
End Type

Public Declare PtrSafe Sub DnsFreeCustomServers Lib "Dnsapi.dll" (pcServers As Long, ppServers As LongPtr)
Public Declare PtrSafe Function DnsGetApplicationSettings Lib "Dnsapi.dll" (pcServers As Long, ppDefaultServers As LongPtr, pSettings As DNS_APPLICATION_SETTINGS) As Long
Public Declare PtrSafe Function DnsSetApplicationSettings Lib "Dnsapi.dll" (ByVal cServers As Long, pServers As DNS_CUSTOM_SERVER, pSettings As DNS_APPLICATION_SETTINGS) As Long

Public Type DNS_QUERY_REQUEST
    Version As Long
    QueryName As LongPtr
    QueryType As Integer
    QueryOptions As LongLong
    pDnsServerList As LongPtr 'PDNS_ADDR_ARRAY
    InterfaceIndex As Long
    ' #If WDL_NO_DELEGATES Then
    pQueryCompletionCallback As LongPtr
    ' #Else
    ' pQueryCompletionCallback As DNS_QUERY_COMPLETION_ROUTINE
    ' #End If
    pQueryContext As LongPtr
End Type

Public Type DNS_QUERY_CANCEL
    Reserved(31) As Byte
End Type

[UseGetLastError(False)]
Public Declare PtrSafe Function DnsQueryEx Lib "Dnsapi.dll" (pQueryRequest As DNS_QUERY_REQUEST, pQueryResults As DNS_QUERY_RESULT, pCancelHandle As DNS_QUERY_CANCEL) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function DnsCancelQuery Lib "Dnsapi.dll" (pCancelHandle As DNS_QUERY_CANCEL) As Long

Public Type DNS_QUERY_REQUEST3
    Version As DnsQueryRequestVersions
    QueryName As LongPtr
    QueryType As Integer
    QueryOptions As LongLong
    pDnsServerList As LongPtr 'PDNS_ADDR_ARRAY
    InterfaceIndex As Long
    pQueryCompletionCallback As DNS_QUERY_COMPLETION_ROUTINE
    pQueryContext As LongPtr
    IsNetworkQueryRequired As BOOL
    RequiredNetworkIndex As Long
    cCustomServers As Long
    pCustomServers As LongPtr 'DNS_CUSTOM_SERVER *
End Type

Public Enum DnsProtocolTypes
    DNS_PROTOCOL_UNSPECIFIED = 0
    DNS_PROTOCOL_UDP = 1
    DNS_PROTOCOL_TCP = 2
    DNS_PROTOCOL_DOH = 3
    DNS_PROTOCOL_DOT = 4
    DNS_PROTOCOL_NO_WIRE = 5
End Enum

Public Enum DnsQueryRawResultsVersions
    DNS_QUERY_RAW_RESULTS_VERSION1 = 1
End Enum

Public Type DNS_QUERY_RAW_RESULT
    version As DnsQueryRawResultsVersions
    queryStatus As Long 'DNS_STATUS
    /* [TypeHint(DnsQueryFlags)] */ queryOptions As LongLong
    queryRawOptions As LongLong
    responseFlags As LongLong
    queryRawResponseSize As Long
    queryRawResponse As LongPtr 'BYTE *
    queryRecords As LongPtr 'PDNS_RECORD
    protocol As Long
    ' union
    ' {
' #if !defined (MIDL_PASS) && defined (_WS2TCPIP_H_)
        ' SOCKADDR_INET                               sourceAddr;
' #endif
        ' CHAR                                        maxSa[DNS_ADDR_MAX_SOCKADDR_LENGTH];
    ' };
    u(31) As Byte
End Type

Public Declare PtrSafe Sub DnsQueryRawResultFree Lib "Dnsapi.dll" (queryResults As DNS_QUERY_RAW_RESULT)

Public Delegate Sub DNS_QUERY_RAW_COMPLETION_ROUTINE (ByVal queryContext As LongPtr, queryResults As DNS_QUERY_RAW_RESULT)

Public Enum DnsQueryRawRequestsVersions
    DNS_QUERY_RAW_REQUEST_VERSION1 = 1
End Enum
 
Public Type DNS_QUERY_RAW_REQUEST
    version As DnsQueryRawRequestsVersions
    resultsVersion As DnsQueryRawResultsVersions
    dnsQueryRawSize As Long
    dnsQueryRaw As LongPtr 'BYTE *
    dnsQueryName As LongPtr
    /* [TypeHint(WinDnsRecordTypes)] */ dnsQueryType As Integer
    /* [TypeHint(DnsQueryFlags)] */ queryOptions As LongLong
    interfaceIndex As Long
    ' #If WDL_NO_DELEGATES Then
    queryCompletionCallback As LongPtr
    ' #Else
    ' queryCompletionCallback As DNS_QUERY_RAW_COMPLETION_ROUTINE
    ' #End If
    queryContext As LongPtr 'VOID *
    /* [TypeHint(DnsQueryRawOptions)] */ queryRawOptions As LongLong
    customServersSize As Long
    customServers As LongPtr 'DNS_CUSTOM_SERVER *
    protocol As DnsProtocolTypes
    ' union
    ' {
' #if !defined(MIDL_PASS) && defined(_WS2TCPIP_H_)
        ' SOCKADDR_INET                                   sourceAddr;
' #endif
        ' CHAR                                            maxSa[DNS_ADDR_MAX_SOCKADDR_LENGTH];
    ' };
    u(31) As Byte
End Type

Public Enum DnsQueryRawOptions
    DNS_QUERY_RAW_OPTION_BEST_EFFORT_PARSE = 1
End Enum

Public Type DNS_QUERY_RAW_CANCEL
    reserved(0 To 31) As Byte
End Type

[UseGetLastError(False)]
Public Declare PtrSafe Function DnsQueryRaw Lib "Dnsapi.dll" (queryRequest As DNS_QUERY_RAW_REQUEST, cancelHandle As DNS_QUERY_RAW_CANCEL) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function DnsCancelQueryRaw Lib "Dnsapi.dll" (cancelHandle As DNS_QUERY_RAW_CANCEL) As Long


Public Enum DnsUpdateFlags
    DNS_UPDATE_SECURITY_USE_DEFAULT = &H00000000
    DNS_UPDATE_SECURITY_OFF = &H00000010
    DNS_UPDATE_SECURITY_ON = &H00000020
    DNS_UPDATE_SECURITY_ONLY = &H00000100
    DNS_UPDATE_CACHE_SECURITY_CONTEXT = &H00000200
    DNS_UPDATE_TEST_USE_LOCAL_SYS_ACCT = &H00000400
    DNS_UPDATE_FORCE_SECURITY_NEGO = &H00000800
    DNS_UPDATE_TRY_ALL_MASTER_SERVERS = &H00001000
    DNS_UPDATE_SKIP_NO_UPDATE_ADAPTERS = &H00002000
    DNS_UPDATE_REMOTE_SERVER = &H00004000
    DNS_UPDATE_RESERVED = &Hffff0000
End Enum

[UseGetLastError(False)]
Public Declare PtrSafe Function DnsAcquireContextHandle_W Lib "Dnsapi.dll" (ByVal CredentialFlags As Long, Credentials As Any, pContext As LongPtr) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function DnsAcquireContextHandle_A Lib "Dnsapi.dll" (ByVal CredentialFlags As Long, Credentials As Any, pContext As LongPtr) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function DnsAcquireContextHandle Lib "Dnsapi.dll" Alias "DnsAcquireContextHandle_W" (ByVal CredentialFlags As Long, Credentials As Any, pContext As LongPtr) As Long
Public Declare PtrSafe Sub DnsReleaseContextHandle Lib "Dnsapi.dll" (ByVal hContext As LongPtr)
[UseGetLastError(False)]
Public Declare PtrSafe Function DnsModifyRecordsInSet_W Lib "Dnsapi.dll" (pAddRecords As DNS_RECORD, pDeleteRecords As DNS_RECORD, ByVal Options As DnsUpdateFlags, ByVal hCredentials As LongPtr, Optional ByVal pExtraList As LongPtr, Optional ByVal pReserved As LongPtr) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function DnsModifyRecordsInSet_A Lib "Dnsapi.dll" (pAddRecords As DNS_RECORD, pDeleteRecords As DNS_RECORD, ByVal Options As DnsUpdateFlags, ByVal hCredentials As LongPtr, Optional ByVal pExtraList As LongPtr, Optional ByVal pReserved As LongPtr) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function DnsModifyRecordsInSet_UTF8 Lib "Dnsapi.dll" (pAddRecords As DNS_RECORD, pDeleteRecords As DNS_RECORD, ByVal Options As DnsUpdateFlags, ByVal hCredentials As LongPtr, Optional ByVal pExtraList As LongPtr, Optional ByVal pReserved As LongPtr) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function DnsModifyRecordsInSet Lib "Dnsapi.dll" Alias "DnsModifyRecordsInSet_W" (pAddRecords As DNS_RECORD, pDeleteRecords As DNS_RECORD, ByVal Options As DnsUpdateFlags, ByVal hCredentials As LongPtr, Optional ByVal pExtraList As LongPtr, Optional ByVal pReserved As LongPtr) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function DnsReplaceRecordSetW Lib "Dnsapi.dll" (pReplaceSet As DNS_RECORD, ByVal Options As DnsUpdateFlags, ByVal hContext As LongPtr, Optional ByVal pExtraList As LongPtr, Optional ByVal pReserved As LongPtr) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function DnsReplaceRecordSetA Lib "Dnsapi.dll" (pReplaceSet As DNS_RECORD, ByVal Options As DnsUpdateFlags, ByVal hContext As LongPtr, Optional ByVal pExtraList As LongPtr, Optional ByVal pReserved As LongPtr) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function DnsReplaceRecordSetUTF8 Lib "Dnsapi.dll" (pReplaceSet As DNS_RECORD, ByVal Options As DnsUpdateFlags, ByVal hContext As LongPtr, Optional ByVal pExtraList As LongPtr, Optional ByVal pReserved As LongPtr) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function DnsReplaceRecordSet Lib "Dnsapi.dll" Alias "DnsReplaceRecordSetW" (pReplaceSet As DNS_RECORD, ByVal Options As DnsUpdateFlags, ByVal hContext As LongPtr, Optional ByVal pExtraList As LongPtr, Optional ByVal pReserved As LongPtr) As Long

Public Enum DNS_NAME_FORMAT
    DnsNameDomain
    DnsNameDomainLabel
    DnsNameHostnameFull
    DnsNameHostnameLabel
    DnsNameWildcard
    DnsNameSrvRecord
    DnsNameValidateTld
End Enum

[UseGetLastError(False)]
Public Declare PtrSafe Function DnsValidateName_W Lib "Dnsapi.dll" (ByVal pszName As LongPtr, ByVal Format As DNS_NAME_FORMAT) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function DnsValidateName_A Lib "Dnsapi.dll" (ByVal pszName As String, ByVal Format As DNS_NAME_FORMAT) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function DnsValidateName_UTF8 Lib "Dnsapi.dll" (ByVal pszName As LongPtr, ByVal Format As DNS_NAME_FORMAT) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function DnsValidateName Lib "Dnsapi.dll" Alias "DnsValidateName_W" (ByVal pszName As String, ByVal Format As DNS_NAME_FORMAT) As Long

Public Enum DnsServerValidationErrors
    DNS_VALSVR_ERROR_INVALID_ADDR = &H01
    DNS_VALSVR_ERROR_INVALID_NAME = &H02
    DNS_VALSVR_ERROR_UNREACHABLE = &H03
    DNS_VALSVR_ERROR_NO_RESPONSE = &H04
    DNS_VALSVR_ERROR_NO_AUTH = &H05
    DNS_VALSVR_ERROR_REFUSED = &H06
    DNS_VALSVR_ERROR_NO_TCP = &H10
    DNS_VALSVR_ERROR_UNKNOWN = &HFF
End Enum
[UseGetLastError(False)]
Public Declare PtrSafe Function DnsValidateServerStatus Lib "Dnsapi.dll" (server As SOCKADDR, ByVal queryName As LongPtr, serverStatus As DnsServerValidationErrors) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function DnsValidateServerStatus Lib "Dnsapi.dll" (server As SOCKADDR, ByVal queryName As String, serverStatus As DnsServerValidationErrors) As Long
Public Declare PtrSafe Function DnsNameCompare_A Lib "Dnsapi.dll" (ByVal pName1 As String, ByVal pName2 As String) As BOOL
Public Declare PtrSafe Function DnsNameCompare_W Lib "Dnsapi.dll" (ByVal pName1 As LongPtr, ByVal pName2 As LongPtr) As BOOL
Public DeclareWide PtrSafe Function DnsNameCompare Lib "Dnsapi.dll" Alias "DnsNameCompare_W" (ByVal pName1 As String, ByVal pName2 As String) As BOOL

[Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid. If count is greater than array size, workarounds must be employed.")]
Public Type DNS_MESSAGE_BUFFER
    MessageHead As DNS_HEADER
    MessageBody(0 To 4095) As Byte
End Type

Public Declare PtrSafe Function DnsWriteQuestionToBuffer_W Lib "Dnsapi.dll" (pDnsBuffer As Any, pdwBufferSize As Long, ByVal pszName As LongPtr, [TypeHint(WinDnsRecordTypes)] ByVal wType As Integer, ByVal Xid As Integer, ByVal fRecursionDesired As BOOL) As BOOL
Public Declare PtrSafe Function DnsWriteQuestionToBuffer_UTF8 Lib "Dnsapi.dll" (pDnsBuffer As Any, pdwBufferSize As Long, ByVal pszName As LongPtr, [TypeHint(WinDnsRecordTypes)] ByVal wType As Integer, ByVal Xid As Integer, ByVal fRecursionDesired As BOOL) As BOOL
' Public Declare PtrSafe Function DnsWriteQuestionToBuffer_A Lib "Dnsapi.dll" (pDnsBuffer As Any, pdwBufferSize As Long, ByVal pszName As String, ByVal wType As Integer, ByVal Xid As Integer, ByVal fRecursionDesired As BOOL) As BOOL
Public DeclareWide PtrSafe Function DnsWriteQuestionToBuffer Lib "Dnsapi.dll" Alias "DnsWriteQuestionToBuffer_W" (pDnsBuffer As Any, pdwBufferSize As Long, ByVal pszName As String, [TypeHint(WinDnsRecordTypes)] ByVal wType As Integer, ByVal Xid As Integer, ByVal fRecursionDesired As BOOL) As BOOL
[UseGetLastError(False)]
Public Declare PtrSafe Function DnsExtractRecordsFromMessage_W Lib "Dnsapi.dll" (pDnsBuffer As Any, ByVal wMessageLength As Integer, ppRecord As LongPtr) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function DnsExtractRecordsFromMessage_UTF8 Lib "Dnsapi.dll" (pDnsBuffer As Any, ByVal wMessageLength As Integer, ppRecord As LongPtr) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function DnsExtractRecordsFromMessage Lib "Dnsapi.dll" Alias "DnsExtractRecordsFromMessage_W" (pDnsBuffer As Any, ByVal wMessageLength As Integer, ppRecord As LongPtr) As Long
' #If WDL_NO_DELEGATES Then
[UseGetLastError(False)]
Public Declare PtrSafe Function DnsGetProxyInformation Lib "Dnsapi.dll" (ByVal hostName As LongPtr, proxyInformation As DNS_PROXY_INFORMATION, defaultProxyInformation As DNS_PROXY_INFORMATION, ByVal completionRoutine As LongPtr, Optional ByVal completionContext As LongPtr) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function DnsGetProxyInformation Lib "Dnsapi.dll" (ByVal hostName As String, proxyInformation As DNS_PROXY_INFORMATION, defaultProxyInformation As DNS_PROXY_INFORMATION, ByVal completionRoutine As LongPtr, Optional ByVal completionContext As LongPtr) As Long
' #Else
' [UseGetLastError(False)]
' Public Declare PtrSafe Function DnsGetProxyInformation Lib "Dnsapi.dll" (ByVal hostName As LongPtr, proxyInformation As DNS_PROXY_INFORMATION, defaultProxyInformation As DNS_PROXY_INFORMATION, ByVal completionRoutine As DNS_PROXY_COMPLETION_ROUTINE, Optional ByVal completionContext As LongPtr) As Long
' [UseGetLastError(False)]
' Public DeclareWide PtrSafe Function DnsGetProxyInformation Lib "Dnsapi.dll" (ByVal hostName As String, proxyInformation As DNS_PROXY_INFORMATION, defaultProxyInformation As DNS_PROXY_INFORMATION, ByVal completionRoutine As DNS_PROXY_COMPLETION_ROUTINE, Optional ByVal completionContext As LongPtr) As Long
' #End If
Public Declare PtrSafe Sub DnsFreeProxyName Lib "Dnsapi.dll" (ByVal hostName As LongPtr)
Public DeclareWide PtrSafe Sub DnsFreeProxyName Lib "Dnsapi.dll" (ByVal hostName As String)

Public Const DNS_CONNECTION_NAME_MAX_LENGTH  = 64
Public Const DNS_CONNECTION_PROXY_INFO_CURRENT_VERSION  = 1
Public Const DNS_CONNECTION_PROXY_INFO_SERVER_MAX_LENGTH  = 256
Public Const DNS_CONNECTION_PROXY_INFO_FRIENDLY_NAME_MAX_LENGTH  = 64
Public Const DNS_CONNECTION_PROXY_INFO_USERNAME_MAX_LENGTH  = 128
Public Const DNS_CONNECTION_PROXY_INFO_PASSWORD_MAX_LENGTH  = 128
Public Const DNS_CONNECTION_PROXY_INFO_EXCEPTION_MAX_LENGTH  = 1024
Public Const DNS_CONNECTION_PROXY_INFO_EXTRA_INFO_MAX_LENGTH  = 1024

Public Enum DNS_CONNECTION_PROXY_TYPE
    DNS_CONNECTION_PROXY_TYPE_NULL = 0
    DNS_CONNECTION_PROXY_TYPE_HTTP = 1
    DNS_CONNECTION_PROXY_TYPE_WAP = 2
    DNS_CONNECTION_PROXY_TYPE_SOCKS4 = 4
    DNS_CONNECTION_PROXY_TYPE_SOCKS5 = 5
End Enum

Public Enum DNS_CONNECTION_PROXY_INFO_SWITCH
    DNS_CONNECTION_PROXY_INFO_SWITCH_CONFIG = 0
    DNS_CONNECTION_PROXY_INFO_SWITCH_SCRIPT
    DNS_CONNECTION_PROXY_INFO_SWITCH_WPAD
End Enum

Public Enum DnsConnectionProxyInfoFlags
    DNS_CONNECTION_PROXY_INFO_FLAG_DISABLED = &H1
    DNS_CONNECTION_PROXY_INFO_FLAG_BYPASSLOCAL = &H2
End Enum

Public Type DNS_CONNECTION_PROXY_INFO
    Version As Long
    pwszFriendlyName As Integer
    Flags As DnsConnectionProxyInfoFlags
    Switch As DNS_CONNECTION_PROXY_INFO_SWITCH
    ' union
    ' {
        ' struct _DNS_CONNECTION_PROXY_INFO_CONFIG
        ' {
            ' WCHAR *pwszServer;
            ' WCHAR *pwszUsername;
            ' WCHAR *pwszPassword;
            ' WCHAR *pwszException;
            ' WCHAR *pwszExtraInfo;
            ' WORD Port;
        ' } Config;

        ' struct _DNS_CONNECTION_PROXY_INFO_SCRIPT
        ' {
            ' WCHAR *pwszScript;
            ' WCHAR *pwszUsername;
            ' WCHAR *pwszPassword;
        ' } Script;
    ' };
    Config_pwszServer_Or_Script_pwszScript As LongPtr
    Config_Or_Script_pwszUsername As LongPtr
    Config_Or_Script_pwszPassword As LongPtr
    Config_pwszException As LongPtr
    Config_pwszExtraInfo As LongPtr
    Config_Port As Integer
End Type

Public Type DNS_CONNECTION_PROXY_INFO_EX
    ProxyInfo As DNS_CONNECTION_PROXY_INFO
    dwInterfaceIndex As Long
    pwszConnectionName As Integer
    fDirectConfiguration As BOOL
    hConnection As LongPtr
End Type

Public Type DNS_CONNECTION_PROXY_ELEMENT
    Type As DNS_CONNECTION_PROXY_TYPE
    Info As DNS_CONNECTION_PROXY_INFO
End Type

Public Type DNS_CONNECTION_PROXY_LIST
    cProxies As Long
    pProxies As LongPtr 'DNS_CONNECTION_PROXY_ELEMENT *
End Type

Public Type DNS_CONNECTION_NAME
    wszName(0 To DNS_CONNECTION_NAME_MAX_LENGTH) As Integer
End Type

Public Type DNS_CONNECTION_NAME_LIST
    cNames As Long
    pNames As LongPtr 'DNS_CONNECTION_NAME *
End Type

Public Declare PtrSafe Function DnsConnectionGetProxyInfoForHostUrl Lib "Dnsapi.dll" (ByVal pwszHostUrl As LongPtr, pSelectionContext As Any, ByVal dwSelectionContextLength As Long, ByVal dwExplicitInterfaceIndex As Long, pProxyInfoEx As DNS_CONNECTION_PROXY_INFO_EX) As Long
Public DeclareWide PtrSafe Function DnsConnectionGetProxyInfoForHostUrl Lib "Dnsapi.dll" (ByVal pwszHostUrl As String, pSelectionContext As Any, ByVal dwSelectionContextLength As Long, ByVal dwExplicitInterfaceIndex As Long, pProxyInfoEx As DNS_CONNECTION_PROXY_INFO_EX) As Long
Public Declare PtrSafe Function DnsConnectionGetProxyInfoForHostUrlEx Lib "Dnsapi.dll" (ByVal pwszHostUrl As LongPtr, pSelectionContext As Any, ByVal dwSelectionContextLength As Long, ByVal dwExplicitInterfaceIndex As Long, ByVal pwszConnectionName As LongPtr, pProxyInfoEx As DNS_CONNECTION_PROXY_INFO_EX) As Long
Public DeclareWide PtrSafe Function DnsConnectionGetProxyInfoForHostUrlEx Lib "Dnsapi.dll" (ByVal pwszHostUrl As String, pSelectionContext As Any, ByVal dwSelectionContextLength As Long, ByVal dwExplicitInterfaceIndex As Long, ByVal pwszConnectionName As String, pProxyInfoEx As DNS_CONNECTION_PROXY_INFO_EX) As Long
Public Declare PtrSafe Sub DnsConnectionFreeProxyInfoEx Lib "Dnsapi.dll" (pProxyInfoEx As DNS_CONNECTION_PROXY_INFO_EX)
Public Declare PtrSafe Function DnsConnectionGetProxyInfo Lib "Dnsapi.dll" (ByVal pwszConnectionName As LongPtr, ByVal Type As DNS_CONNECTION_PROXY_TYPE, pProxyInfo As DNS_CONNECTION_PROXY_INFO) As Long
Public DeclareWide PtrSafe Function DnsConnectionGetProxyInfo Lib "Dnsapi.dll" (ByVal pwszConnectionName As String, ByVal Type As DNS_CONNECTION_PROXY_TYPE, pProxyInfo As DNS_CONNECTION_PROXY_INFO) As Long
Public Declare PtrSafe Sub DnsConnectionFreeProxyInfo Lib "Dnsapi.dll" (pProxyInfoEx As DNS_CONNECTION_PROXY_INFO)
Public Declare PtrSafe Function DnsConnectionSetProxyInfo Lib "Dnsapi.dll" (ByVal pwszConnectionName As LongPtr, ByVal Type As DNS_CONNECTION_PROXY_TYPE, pProxyInfo As DNS_CONNECTION_PROXY_INFO) As Long
Public DeclareWide PtrSafe Function DnsConnectionSetProxyInfo Lib "Dnsapi.dll" (ByVal pwszConnectionName As String, ByVal Type As DNS_CONNECTION_PROXY_TYPE, pProxyInfo As DNS_CONNECTION_PROXY_INFO) As Long
Public Declare PtrSafe Function DnsConnectionDeleteProxyInfo Lib "Dnsapi.dll" (ByVal pwszConnectionName As LongPtr, ByVal Type As DNS_CONNECTION_PROXY_TYPE) As Long
Public DeclareWide PtrSafe Function DnsConnectionDeleteProxyInfo Lib "Dnsapi.dll" (ByVal pwszConnectionName As String, ByVal Type As DNS_CONNECTION_PROXY_TYPE) As Long
Public Declare PtrSafe Function DnsConnectionGetProxyList Lib "Dnsapi.dll" (ByVal pwszConnectionName As LongPtr, pProxyList As DNS_CONNECTION_PROXY_LIST) As Long
Public DeclareWide PtrSafe Function DnsConnectionGetProxyList Lib "Dnsapi.dll" (ByVal pwszConnectionName As String, pProxyList As DNS_CONNECTION_PROXY_LIST) As Long
Public Declare PtrSafe Sub DnsConnectionFreeProxyList Lib "Dnsapi.dll" (pProxyList As DNS_CONNECTION_PROXY_LIST)
Public Declare PtrSafe Function DnsConnectionGetNameList Lib "Dnsapi.dll" (pNameList As DNS_CONNECTION_NAME_LIST) As Long
Public Declare PtrSafe Sub DnsConnectionFreeNameList Lib "Dnsapi.dll" (pNameList As DNS_CONNECTION_NAME_LIST)

Public Type DNS_CONNECTION_IFINDEX_ENTRY
    pwszConnectionName As LongPtr
    dwIfIndex As Long
End Type
Public Type DNS_CONNECTION_IFINDEX_LIST
    pConnectionIfIndexEntries As LongPtr 'DNS_CONNECTION_IFINDEX_ENTRY *
    nEntries As Long
End Type
Public Declare PtrSafe Function DnsConnectionUpdateIfIndexTable Lib "Dnsapi.dll" (pConnectionIfIndexEntries As DNS_CONNECTION_IFINDEX_LIST) As Long

Public Enum DnsConnectionPolicyEntryFlags
    DNS_CONNECTION_POLICY_ENTRY_ONDEMAND = &H00000001
End Enum
Public Type DNS_CONNECTION_POLICY_ENTRY
    pwszHost As LongPtr
    pwszAppId As LongPtr
    cbAppSid As Long
    pbAppSid As LongPtr
    nConnections As Long
    ppwszConnections As LongPtr
    dwPolicyEntryFlags As DnsConnectionPolicyEntryFlags
End Type
Public Type DNS_CONNECTION_POLICY_ENTRY_LIST
    pPolicyEntries As LongPtr 'DNS_CONNECTION_POLICY_ENTRY *
    nEntries As Long
End Type

Public Enum DNS_CONNECTION_POLICY_TAG
    TAG_DNS_CONNECTION_POLICY_TAG_DEFAULT = 0
    TAG_DNS_CONNECTION_POLICY_TAG_CONNECTION_MANAGER = 1
    TAG_DNS_CONNECTION_POLICY_TAG_WWWPT = 2
End Enum

Public Declare PtrSafe Function DnsConnectionSetPolicyEntries Lib "Dnsapi.dll" (ByVal PolicyEntryTag As DNS_CONNECTION_POLICY_TAG, pPolicyEntryList As DNS_CONNECTION_POLICY_ENTRY_LIST) As Long
Public Declare PtrSafe Function DnsConnectionDeletePolicyEntries Lib "Dnsapi.dll" (ByVal PolicyEntryTag As DNS_CONNECTION_POLICY_TAG) As Long

Public Type DNS_SERVICE_INSTANCE
    pszInstanceName As LongPtr
    pszHostName As LongPtr
    ip4Address As LongPtr 'IP4_ADDRESS *
    ip6Address As LongPtr 'IP6_ADDRESS *
    wPort As Integer
    wPriority As Integer
    wWeight As Integer
    ' Property list
    dwPropertyCount As Long
    keys As LongPtr
    values As LongPtr
    dwInterfaceIndex As Long
End Type


Public Declare PtrSafe Function DnsServiceConstructInstance Lib "Dnsapi.dll" (ByVal pServiceName As LongPtr, ByVal pHostName As LongPtr, pIp4 As Long, pIp6 As IP6_ADDRESS, ByVal wPort As Integer, ByVal wPriority As Integer, ByVal wWeight As Integer, ByVal dwPropertiesCount As Long, keys As LongPtr, values As LongPtr) As LongPtr
Public Declare PtrSafe Function DnsServiceCopyInstance Lib "Dnsapi.dll" (pOrig As DNS_SERVICE_INSTANCE) As LongPtr
Public Declare PtrSafe Sub DnsServiceFreeInstance Lib "Dnsapi.dll" (pInstance As DNS_SERVICE_INSTANCE)

Public Type DNS_SERVICE_CANCEL
    reserved As LongPtr
End Type

Public Delegate Sub DNS_SERVICE_BROWSE_CALLBACK (ByVal Status As Long, ByVal pQueryContext As LongPtr, pRecord As DNS_RECORD)

Public Type DNS_SERVICE_BROWSE_REQUEST
    Version As Long
    InterfaceIndex As Long
    QueryName As LongPtr
    ' union
    ' {
        ' PDNS_SERVICE_BROWSE_CALLBACK pBrowseCallback;
        ' DNS_QUERY_COMPLETION_ROUTINE *pBrowseCallbackV2;
    ' };
    pBrowseCallback As LongPtr
    pQueryContext As LongPtr
End Type
 
Public Declare PtrSafe Function DnsServiceBrowse Lib "Dnsapi.dll" (pRequest As DNS_SERVICE_BROWSE_REQUEST, pCancel As DNS_SERVICE_CANCEL) As Long
Public Declare PtrSafe Function DnsServiceBrowseCancel Lib "Dnsapi.dll" (pCancelHandle As DNS_SERVICE_CANCEL) As Long

Public Delegate Sub DNS_SERVICE_RESOLVE_COMPLETE (ByVal Status As Long, ByVal pQueryContext As LongPtr, pInstance As DNS_SERVICE_INSTANCE)

Public Type DNS_SERVICE_RESOLVE_REQUEST
    Version As Long
    InterfaceIndex As Long
    QueryName As LongPtr
    ' #If WDL_NO_DELEGATES Then
    pResolveCompletionCallback As LongPtr
    ' #Else
    ' pResolveCompletionCallback As DNS_SERVICE_RESOLVE_COMPLETE
    ' #End If
    pQueryContext As LongPtr
End Type

 
Public Declare PtrSafe Function DnsServiceResolve Lib "Dnsapi.dll" (pRequest As DNS_SERVICE_RESOLVE_REQUEST, pCancel As DNS_SERVICE_CANCEL) As Long
 
Public Declare PtrSafe Function DnsServiceResolveCancel Lib "Dnsapi.dll" (pCancelHandle As DNS_SERVICE_CANCEL) As Long

Public Delegate Sub DNS_SERVICE_REGISTER_COMPLETE (ByVal Status As Long, ByVal pQueryContext As LongPtr, pInstance As DNS_SERVICE_INSTANCE)


Public Type DNS_SERVICE_REGISTER_REQUEST
    Version As Long
    InterfaceIndex As Long
    pServiceInstance As LongPtr 'PDNS_SERVICE_INSTANCE
    ' #If WDL_NO_DELEGATES Then
    pRegisterCompletionCallback As LongPtr
    ' #Else
    ' pRegisterCompletionCallback As DNS_SERVICE_REGISTER_COMPLETE
    ' #End If
    pQueryContext As LongPtr
    hCredentials As LongPtr
    unicastEnabled As BOOL
End Type

Public Declare PtrSafe Function DnsServiceRegister Lib "Dnsapi.dll" (pRequest As DNS_SERVICE_REGISTER_REQUEST, pCancel As DNS_SERVICE_CANCEL) As Long
Public Declare PtrSafe Function DnsServiceDeRegister Lib "Dnsapi.dll" (pRequest As DNS_SERVICE_REGISTER_REQUEST, pCancel As DNS_SERVICE_CANCEL) As Long
Public Declare PtrSafe Function DnsServiceRegisterCancel Lib "Dnsapi.dll" (pCancelHandle As DNS_SERVICE_CANCEL) As Long

Public Type MDNS_QUERY_HANDLE
    nameBuf(0 To (DNS_MAX_NAME_BUFFER_LENGTH - 1)) As Integer
    wType As Integer
    ' Internal notification bookkeeping, do not edit
    pSubscription As LongPtr
    pWnfCallbackParams As LongPtr
    stateNameData(0 To 1) As Long
End Type

Public Delegate Sub MDNS_QUERY_CALLBACK (ByVal pQueryContext As LongPtr, pQueryHandle As MDNS_QUERY_HANDLE, pQueryResults As DNS_QUERY_RESULT)

Public Type MDNS_QUERY_REQUEST
    Version As Long
    ulRefCount As Long ' Refcount for async query
    Query As LongPtr
    QueryType As Integer
    QueryOptions As LongLong
    InterfaceIndex As Long
    ' #If WDL_NO_DELEGATES Then
    pQueryCallback As LongPtr
    ' #Else
    ' pQueryCallback As MDNS_QUERY_CALLBACK
    ' #End If
    pQueryContext As LongPtr
    fAnswerReceived As BOOL ' Reserved
    ulResendCount As Long ' Reserved
End Type

Public Declare PtrSafe Function DnsStartMulticastQuery Lib "Dnsapi.dll" (pQueryRequest As MDNS_QUERY_REQUEST, pHandle As MDNS_QUERY_HANDLE) As Long
Public Declare PtrSafe Function DnsStopMulticastQuery Lib "Dnsapi.dll" (pHandle As MDNS_QUERY_HANDLE) As Long

Public Declare PtrSafe Function DnsIsZtEnabled Lib "Dnsapi.dll" () As BOOL



#End Region


#Region "qdos2.h"

'Alias QOS_FLOWID As Long
Public Enum QOS_FLOWID
    [_]
End Enum


Public Enum QOS_TRAFFIC_TYPE
    QOSTrafficTypeBestEffort = 0
    QOSTrafficTypeBackground = 1
    QOSTrafficTypeExcellentEffort = 2
    QOSTrafficTypeAudioVideo = 3
    QOSTrafficTypeVoice = 4
    QOSTrafficTypeControl = 5
End Enum

Public Enum QOS_SET_FLOW
    QOSSetTrafficType = 0
    QOSSetOutgoingRate = 1
    QOSSetOutgoingDSCPValue = 2
End Enum

Public Type QOS_PACKET_PRIORITY
    ConformantDSCPValue As Long ' the DSCP marking used for the flow's 
    ' traffic that respects the flow rate
    ' specified
    NonConformantDSCPValue As Long ' the DSCP marking used for the flow's 
    ' traffic that exceeds the flow rate
    ' specified. Applicable only if shaping
    ' behavior is set to
    ' QOSUseNonConformantMarkings
    ConformantL2Value As Long ' the L2 tag used for the flow's traffic 
    ' that respects the flow rate specified
    NonConformantL2Value As Long ' the L2 tag used for the flow's traffic 
    ' that respects the flow rate specified.
    ' Applicable only if shaping behavior is
    ' set to QOSUseNonConformantMarkings
End Type

Public Type QOS_FLOW_FUNDAMENTALS
    BottleneckBandwidthSet As BOOL ' TRUE if the BottleneckBandwidth field
    ' contains a value.
    BottleneckBandwidth As LongLong ' In units of bits/s ; does not include 
    ' layer 3
    AvailableBandwidthSet As BOOL ' TRUE if the AvailableBandwidth field
    ' contains a value.
    AvailableBandwidth As LongLong ' In units of bits/s ; does not include 
    ' layer 3
    RTTSet As BOOL ' TRUE if the RTT field
    ' contains a value.
    RTT As Long ' RTT is in microseconds. 
End Type

Public Enum QOS_FLOWRATE_REASON
    QOSFlowRateNotApplicable = 0
    QOSFlowRateContentChange = 1
    QOSFlowRateCongestion = 2
    QOSFlowRateHigherContentEncoding = 3
    QOSFlowRateUserCaused = 4
End Enum

Public Enum QOS_SHAPING
    QOSShapeOnly = 0
    QOSShapeAndMark = 1
    QOSUseNonConformantMarkings = 2
End Enum

Public Const QOS_OUTGOING_DEFAULT_MINIMUM_BANDWIDTH = &HFFFFFFFF

Public Type QOS_FLOWRATE_OUTGOING
    Bandwidth As LongLong ' In units of bits/s
    ShapingBehavior As QOS_SHAPING ' Shaping behavior
    Reason As QOS_FLOWRATE_REASON ' Optional field for the 
    ' application to indicate why it's
    ' changing a flow's data rate
End Type

Public Enum QOS_QUERY_FLOW
    QOSQueryFlowFundamentals = 0
    QOSQueryPacketPriority = 1
    QOSQueryOutgoingRate = 2
End Enum

Public Enum QOS_NOTIFY_FLOW
    QOSNotifyCongested = 0
    QOSNotifyUncongested = 1
    QOSNotifyAvailable = 2
End Enum

Public Type QOS_VERSION
    MajorVersion As Integer
    MinorVersion As Integer
End Type

Public Enum Qos2FlowFlags
    QOS_QUERYFLOW_FRESH = &H00000001
    QOS_NON_ADAPTIVE_FLOW = &H00000002
End Enum

Public Function QOS_HEADER_OVERHEAD(ByVal af As ADDRESS_FAMILIES, ByVal protocol As IPPROTO) As Long
    Dim overhead As Long
    If af = AF_INET Then
        overhead = 20
    Else
        overhead = 40
    End If
    If (protocol = IPPROTO_TCP) Then
        overhead += 20 ' TCP header overhead in bytes
    Else
        overhead += 8 ' UDP header overhead in bytes
    End If
    Return overhead
End Function

Public Function QOS_ADD_OVERHEAD(ByVal af As ADDRESS_FAMILIES, ByVal protocol As IPPROTO, ByVal targetDataPacketSize As Long, ByVal dataRate As LongLong) As LongLong
    Dim overhead As Long
    Dim d As Double
    Dim r As LongLong
    
    ' //
    ' // Calculate the header overhead
    overhead = QOS_HEADER_OVERHEAD(af, protocol)

    ' //
    ' // Convert overhead And dataRate to bits
    overhead *= 8
    targetDataPacketSize *= 8

    ' //
    ' // The adjustment Is:
    ' //
    ' //                         (       dataRate                  )
    ' // returnRate = dataRate + ( -------------------- * overhead )
    ' //                         ( targetDataPacketSize            )
    ' //
    ' // For Each packet we expect to see go out, we need to add the 
    ' // overhead
    d = overhead
    d /= targetDataPacketSize
    d *= CDbl(dataRate)

    r = dataRate
    r += CLngLng(d)

    Return r
End Function

Public Function QOS_SUBTRACT_OVERHEAD(ByVal af As ADDRESS_FAMILIES, ByVal protocol As IPPROTO, ByVal targetDataPacketSize As Long, ByVal dataRate As LongLong) As LongLong
    Dim overhead As Long
    Dim d As Double
    Dim r As LongLong

    ' //
    ' // Calculate the header overhead
    overhead = QOS_HEADER_OVERHEAD(af, protocol)

    ' //
    ' // Convert overhead And dataRate to bits
    overhead *= 8
    targetDataPacketSize *= 8

    ' //
    ' // The adjustment Is:
    ' //
    ' //                         (            dataRate                        )
    ' // returnRate = dataRate - ( ------------------------------- * overhead )
    ' //                         ( targetDataPacketSize + overhead            )
    ' //
    ' // For Each packet we expect to see go out, we need to add the 
    ' // overhead
    d = overhead
    d /= targetDataPacketSize + overhead
    d *= CDbl(dataRate)

    r = dataRate
    r -= CLngLng(d)

    Return r
    
End Function

Public Declare PtrSafe Function QOSCreateHandle Lib "qwave.dll" (Version As QOS_VERSION, QOSHandle As LongPtr) As BOOL
Public Declare PtrSafe Function QOSCloseHandle Lib "qwave.dll" (ByVal QOSHandle As LongPtr) As BOOL
Public Declare PtrSafe Function QOSStartTrackingClient Lib "qwave.dll" (ByVal QOSHandle As LongPtr, DestAddr As SOCKADDR, ByVal Flags As Long) As BOOL
Public Declare PtrSafe Function QOSStopTrackingClient Lib "qwave.dll" (ByVal QOSHandle As LongPtr, DestAddr As SOCKADDR, ByVal Flags As Long) As BOOL
Public Declare PtrSafe Function QOSEnumerateFlows Lib "qwave.dll" (ByVal QOSHandle As LongPtr, Size As Long, Buffer As Any) As BOOL
Public Declare PtrSafe Function QOSAddSocketToFlow Lib "qwave.dll" (ByVal QOSHandle As LongPtr, ByVal Socket As LongPtr, DestAddr As SOCKADDR, ByVal TrafficType As QOS_TRAFFIC_TYPE, ByVal Flags As Qos2FlowFlags, FlowId As QOS_FLOWID) As BOOL
Public Declare PtrSafe Function QOSRemoveSocketFromFlow Lib "qwave.dll" (ByVal QOSHandle As LongPtr, ByVal Socket As LongPtr, ByVal FlowId As QOS_FLOWID, ByVal Flags As Long) As BOOL
Public Declare PtrSafe Function QOSSetFlow Lib "qwave.dll" (ByVal QOSHandle As LongPtr, ByVal FlowId As QOS_FLOWID, ByVal Operation As QOS_SET_FLOW, ByVal Size As Long, Buffer As Any, ByVal Flags As Long, Overlapped As OVERLAPPED) As BOOL
Public Declare PtrSafe Function QOSQueryFlow Lib "qwave.dll" (ByVal QOSHandle As LongPtr, ByVal FlowId As QOS_FLOWID, ByVal Operation As QOS_QUERY_FLOW, Size As Long, Buffer As Any, ByVal Flags As Qos2FlowFlags, Overlapped As OVERLAPPED) As BOOL
Public Declare PtrSafe Function QOSNotifyFlow Lib "qwave.dll" (ByVal QOSHandle As LongPtr, ByVal FlowId As QOS_FLOWID, ByVal Operation As QOS_NOTIFY_FLOW, Size As Long, Buffer As Any, ByVal Flags As Long, Overlapped As OVERLAPPED) As BOOL
Public Declare PtrSafe Function QOSCancel Lib "qwave.dll" (ByVal QOSHandle As LongPtr, Overlapped As OVERLAPPED) As BOOL

#End Region

#Region "traffic"

'qos.h - 100%
Public Enum SERVICETYPE
    SERVICETYPE_NOTRAFFIC = &H00000000 /* No data in this 
                                        * direction */
    SERVICETYPE_BESTEFFORT = &H00000001 /* Best Effort */
    SERVICETYPE_CONTROLLEDLOAD = &H00000002 /* Controlled Load */
    SERVICETYPE_GUARANTEED = &H00000003 /* Guaranteed */

    SERVICETYPE_NETWORK_UNAVAILABLE = &H00000004 /* Used to notify 
                                                  * change to user */
    SERVICETYPE_GENERAL_INFORMATION = &H00000005 /* corresponds to 
                                                  * "General Parameters"
                                                  * defined by IntServ */
    SERVICETYPE_NOCHANGE = &H00000006 /* used to indicate
                                        * that the flow spec
                                        * contains no change
                                        * from any previous
                                        * one */
    SERVICETYPE_NONCONFORMING = &H00000009 /* Non-Conforming Traffic */
    SERVICETYPE_NETWORK_CONTROL = &H0000000A /* Network Control traffic */
    SERVICETYPE_QUALITATIVE = &H0000000D /* Qualitative applications */
End Enum

Public Const SERVICE_BESTEFFORT  = &H80010000
Public Const SERVICE_CONTROLLEDLOAD  = &H80020000
Public Const SERVICE_GUARANTEED  = &H80040000
Public Const SERVICE_QUALITATIVE  = &H80200000

Public Enum QoSServiceRSVPFlags
    /*
    * Flags to control the usage of RSVP on this flow.
    */

   /*
    * to turn off traffic control, 'OR' ( | ) this flag with the 
    * ServiceType field in the FLOWSPEC
    */
    SERVICE_NO_TRAFFIC_CONTROL = &H81000000
    /*
    * this flag can be used to prevent any rsvp signaling messages from being 
    * sent. Local traffic control will be invoked, but no RSVP Path messages 
    * will be sent.This flag can also be used in conjunction with a receiving 
    * flowspec to suppress the automatic generation of a Reserve message.  
    * The application would receive notification that a Path  message had arrived 
    * and would then need to alter the QOS by issuing WSAIoctl( SIO_SET_QOS ), 
    * to unset this flag and thereby causing Reserve messages to go out.
    */
    SERVICE_NO_QOS_SIGNALING = &H40000000
End Enum

Public Type FLOWSPEC
    TokenRate As Long /* In Bytes/sec */
    TokenBucketSize As Long /* In Bytes */
    PeakBandwidth As Long /* In Bytes/sec */
    Latency As Long /* In microseconds */
    DelayVariation As Long /* In microseconds */
    ServiceType As SERVICETYPE
    MaxSduSize As Long /* In Bytes */
    MinimumPolicedSize As Long /* In Bytes */
End Type

Public Const QOS_NOT_SPECIFIED  = &HFFFFFFFF
Public Const POSITIVE_INFINITY_RATE  = &HFFFFFFFE

Public Type QOS_OBJECT_HDR
    ObjectType As Long
    ObjectLength As Long '  /* the length of object buffer INCLUDING  this header */
End Type

Public Enum QoSGeneralObjectTypes
    QOS_GENERAL_ID_BASE = 2000
    QOS_OBJECT_END_OF_LIST = (&H00000001 + QOS_GENERAL_ID_BASE)
'    /* QOS_End_of_list structure passed */
    QOS_OBJECT_SD_MODE = (&H00000002 + QOS_GENERAL_ID_BASE)
'    /* QOS_ShapeDiscard structure passed */
    QOS_OBJECT_SHAPING_RATE = (&H00000003 + QOS_GENERAL_ID_BASE)
'    /* QOS_ShapingRate structure */
    QOS_OBJECT_DESTADDR = (&H00000004 + QOS_GENERAL_ID_BASE)
End Enum

Public Type QOS_SD_MODE
    ObjectHdr As QOS_OBJECT_HDR
    ShapeDiscardMode As Long
End Type

Public Enum TcNonConFlags
    TC_NONCONF_BORROW = 0
    TC_NONCONF_SHAPE = 1
    TC_NONCONF_DISCARD = 2
    TC_NONCONF_BORROW_PLUS = 3  ' Not supported currently
End Enum

Public Type QOS_SHAPING_RATE
    ObjectHdr As QOS_OBJECT_HDR
    ShapingRate As Long
End Type

'qossp.h - 100%
Public Enum QoSRSVPObjects
    RSVP_OBJECT_ID_BASE = 1000
    RSVP_OBJECT_STATUS_INFO = (&H00000000 + RSVP_OBJECT_ID_BASE)
'     /* RSVP_STATUS_INFO structure passed */
    RSVP_OBJECT_RESERVE_INFO = (&H00000001 + RSVP_OBJECT_ID_BASE)
'    /* RSVP_RESERVE_INFO structure passed */
    RSVP_OBJECT_ADSPEC = (&H00000002 + RSVP_OBJECT_ID_BASE)
'  /* RSVP_ADSPEC structure passed */
    RSVP_OBJECT_POLICY_INFO = (&H00000003 + RSVP_OBJECT_ID_BASE)
'   /* RSVP POLICY ELEMENT(S) retrieved */
    RSVP_OBJECT_FILTERSPEC_LIST = (&H00000004 + RSVP_OBJECT_ID_BASE)
End Enum

' typedef union _IN_ADDR_IPV4 {

' ULONG  Addr;
' UCHAR  AddrBytes[4];

' } IN_ADDR_IPV4,
Public Type IN_ADDR_IPV4
    Addr As Long
End Type
Public Type IN_ADDR_IPV6
    Addr(0 To 15) As Byte 'IPV6 address
End Type

Public Type RSVP_FILTERSPEC_V4
    Address As IN_ADDR_IPV4
    Unused As Integer
    Port As Integer
End Type
Public Type RSVP_FILTERSPEC_V6
    Address As IN_ADDR_IPV6
    UnUsed As Integer
    Port As Integer
End Type

Public Type RSVP_FILTERSPEC_V6_FLOW
    Address As IN_ADDR_IPV6
    UnUsed As Byte
    FlowLabel(0 To 2) As Byte
End Type

Public Type RSVP_FILTERSPEC_V4_GPI
    Address As IN_ADDR_IPV4
    GeneralPortId As Long
End Type

Public Type RSVP_FILTERSPEC_V6_GPI
    Address As IN_ADDR_IPV6
    GeneralPortId As Long
End Type

Public Enum QosRSVPFilterType
    FILTERSPECV4
    FILTERSPECV6
    FILTERSPECV6_FLOW
    FILTERSPECV4_GPI
    FILTERSPECV6_GPI
    FILTERSPEC_END
End Enum

Public Type RSVP_FILTERSPEC
    Type As QosRSVPFilterType
    ' union {
        ' RSVP_FILTERSPEC_V4      FilterSpecV4;
        ' RSVP_FILTERSPEC_V6      FilterSpecV6;
        ' RSVP_FILTERSPEC_V6_FLOW FilterSpecV6Flow;
        ' RSVP_FILTERSPEC_V4_GPI  FilterSpecV4Gpi;
        ' RSVP_FILTERSPEC_V6_GPI  FilterSpecV6Gpi;
    ' };
    u(19) As Byte
End Type

Public Type FLOWDESCRIPTOR
    FlowSpec As FLOWSPEC
    NumFilters As Long
    FilterList As LongPtr 'LPRSVP_FILTERSPEC
End Type

Public Type RSVP_POLICY
   Len As Integer ' total length of this element object
   Type As Integer
   Info(0 To 3) As Byte
End Type

Public Const RSVP_POLICY_HDR_LEN = 4 '   ( sizeof(USHORT) + sizeof(USHORT) )

[Description("PolicyElement is a variable C-style array for which a guess at max ever used is substituted.")]
Public Type RSVP_POLICY_INFO
    ObjectHdr As QOS_OBJECT_HDR
    NumPolicyElement As Long '  /* count of the  number of policy elements */
    PolicyElement(0 To 127) As RSVP_POLICY '   /* a list of the policy   elements retrieved */
End Type

Public Type RSVP_RESERVE_INFO
    ObjectHdr As QOS_OBJECT_HDR '       /* type and length of this object */
    Style As QoSRSVPStyles '   /* RSVP Style (FF,WF,SE) */
    ConfirmRequest As Long '    /* Non Zero for Confirm Request (receive only) */
    PolicyElementList As LongPtr 'LPRSVP_POLICY_INFO '  /* Points to the set of policy elements */
    NumFlowDesc As Long '     /* Number of FlowDesc */
    FlowDescList As LongPtr 'LPFLOWDESCRIPTOR '    /* Points to the FlowDesc list */
End Type
Public Enum QoSRSVPStyles
    RSVP_DEFAULT_STYLE = &H00000000
    RSVP_WILDCARD_STYLE = &H00000001
    RSVP_FIXED_FILTER_STYLE = &H00000002
    RSVP_SHARED_EXPLICIT_STYLE = &H00000003
End Enum

Public Type RSVP_STATUS_INFO
    ObjectHdr As QOS_OBJECT_HDR ' /* Object Hdr */
    StatusCode As Long '    /* Error or Status Information see    Winsock2.h
    ExtendedStatus1 As Long '/* Provider specific status extension */
    ExtendedStatus2 As Long '/* Provider specific status extension */
End Type

Public Type QOS_DESTADDR
    ObjectHdr As QOS_OBJECT_HDR ' /* Object header */
    SocketAddress As LongPtr 'const struct sockaddr *  ' /* Destination socket address */
    SocketAddressLength As Long '/* Length of the address structure */
End Type

Public Type AD_GENERAL_PARAMS
    IntServAwareHopCount As Long '  /* number of hops that conform to
    '    * Integrated Services requirements */
    PathBandwidthEstimate As Long ' /* minimum bandwidth available from 
    '     * sender to receiver */
    MinimumLatency As Long '   /* sum of minimum latency of the packet
    '     * forwarding process in routers
    '   * (in usec)*/
    PathMTU As Long '             /* max transmission unit end to end that
    '    * will not incur fragmentation */
    Flags As QoSAdGeneralParamFlags '     /* used to hold break bits.*/
End Type

Public Const INDETERMINATE_LATENCY = &HFFFFFFFF

Public Enum QoSAdGeneralParamFlags
    AD_FLAG_BREAK_BIT = &H00000001
End Enum

Public Type AD_GUARANTEED
    CTotal As Long
    DTotal As Long
    CSum As Long
    DSum As Long
End Type

[Description("Buffer is a variable C-style array for which a guess at max ever used is substituted.")]
Public Type PARAM_BUFFER
    ParameterId As Long '  /* Int Server parameter ID */
    Length As Long '  /* total length of this structure 
    ' * ( 8 bytes + length of Buffer ) */
    Buffer(0 To 127) As Byte '   /* Paramter itself */ 
End Type

Public Type CONTROL_SERVICE
    '/*
    ' * the length of this entire structure including the following buffer.
    ' * This length value can be added to the ptr to the structure to get the ptr
    ' * to the next SERVICE_TYPE structure in the list, until the
    ' * NumberOfServices count has been exhausted.
    ' */
    Length As Long
    Service As SERVICETYPE
    Overrides As AD_GENERAL_PARAMS
    '/*
    ' * service specific information ( controlled load has no service specific
    ' * info here )
    ' */
    'union {
    '    AD_GUARANTEED   Guaranteed;
    '    PARAM_BUFFER    ParamBuffer[1];     /* allows for other services down
    '                                         * the road */
    '};
    u(135) As Byte
End Type
[Description("Services is a variable C-style array for which a guess at max ever used is substituted.")]
Public Type RSVP_ADSPEC
    ObjectHdr As QOS_OBJECT_HDR
    GeneralParams As AD_GENERAL_PARAMS '  /* contains the general 
    '     * characterization paramters */
    NumberOfServices As Long '  /* count of the number of services */
    Services(0 To 15) As CONTROL_SERVICE ' /* a list of the services 
    '   * supported/requested */
End Type

Public Enum QoSRSVPOpCodes
    mIOC_IN = &H80000000
    mIOC_OUT = &H40000000
    mIOC_VENDOR = &H04000000
    mCOMPANY = &H18000000
    ioctl_code = &H00000001
    SIO_CHK_QOS = (mIOC_IN Or mIOC_OUT Or mIOC_VENDOR Or mCOMPANY Or ioctl_code)
End Enum

Public Const QOSSPBASE  = 50000
Public Const ALLOWED_TO_SEND_DATA  = (QOSSPBASE + 1)  ' query the SBM/BEST_EFFORT limit
                                                        '    -- result is based on a comparison between
                                                        '       the user-specified token rate and the
                                                        '       SBM/BEST_EFFORT bandwidth parameters in
                                                        '       the system
                                                        '    -- result is a YES(1) or NO(0) answer
                                                        '       in the output buffer
Public Const ABLE_TO_RECV_RSVP  = (QOSSPBASE + 2)  ' query the SBM/BEST_EFFORT limit
                                                    '    -- result is based on a comparison between
                                                    '       the user-specified token rate and the
                                                    '       SBM/BEST_EFFORT bandwidth parameters in
                                                    '       the system
                                                    '    -- result is a YES(1) or NO(0) answer
                                                    '       in the output buffer
Public Const LINE_RATE  = (QOSSPBASE + 3)  ' query the interface capacity
                                            '    -- result returned in the output buffer
                                            '       in kilo-bits per second
Public Const LOCAL_TRAFFIC_CONTROL  = (QOSSPBASE + 4)  ' check if Kernel Traffic Control is available or not
                                                        '    -- 0 if not available
                                                        '    -- 1 if avaiable
                                                        '    -- INFO_NOT_AVAILABLE if there is no way to check
Public Const LOCAL_QOSABILITY  = (QOSSPBASE + 5)  ' The followings are for
                                                '  the Discovery of Local QOSability
                                                '    -- 0 if no local QOS support
                                                '    -- 1 if local QOS support available
                                                '    -- INFO_NOT_AVAILABLE if there is no way to check
Public Const END_TO_END_QOSABILITY  = (QOSSPBASE + 6)  ' The followings are for
                                                    '  the Discovery of End-to-End QOSability
                                                    '    -- 0 if no end-to-end QOS support
                                                    '    -- 1 if end-to-end QOS support available
                                                    '    -- INFO_NOT_AVAILABLE if there is no way to check
Public Const INFO_NOT_AVAILABLE  = &HFFFFFFFF  ' used when LINE_RATE is not known
Public Const ANY_DEST_ADDR  = &HFFFFFFFF  ' for QOS_OBJECT_DEST_ADDR
'  The followings are for Guaranteed_Service+Latency -> ISSLOW_Traffic_Class Mapping
Public Const MODERATELY_DELAY_SENSITIVE  = &HFFFFFFFD
Public Const HIGHLY_DELAY_SENSITIVE  = &HFFFFFFFE
'  QOSSP Error Code/Value
Public Const QOSSP_ERR_BASE  = (QOSSPBASE + 6000)
'  No error
Public Const GQOS_NO_ERRORCODE  = (0)
Public Const GQOS_NO_ERRORVALUE  = (0)
'  Unknown error
Public Const GQOS_ERRORCODE_UNKNOWN  = (&HFFFFFFFF)
Public Const GQOS_ERRORVALUE_UNKNOWN  = (&HFFFFFFFF)

Public Enum GQoSErrors
    GQOS_NET_ADMISSION = (QOSSP_ERR_BASE + 100)
    GQOS_OTHER = (QOSSP_ERR_BASE + 100 + 1)
    GQOS_DELAYBND = (QOSSP_ERR_BASE + 100 + 2)
    GQOS_BANDWIDTH = (QOSSP_ERR_BASE + 100 + 3)
    GQOS_MTU = (QOSSP_ERR_BASE + 100 + 4)
    GQOS_FLOW_RATE = (QOSSP_ERR_BASE + 100 + 5)
    GQOS_PEAK_RATE = (QOSSP_ERR_BASE + 100 + 6)
    GQOS_AGG_PEAK_RATE = (QOSSP_ERR_BASE + 100 + 7)
'  Policy Error
    GQOS_NET_POLICY = (QOSSP_ERR_BASE + 200)
    GQOS_POLICY_ERROR_UNKNOWN = (QOSSP_ERR_BASE + 200 + 0)
    GQOS_POLICY_GLOBAL_DEF_FLOW_COUNT = (QOSSP_ERR_BASE + 200 + 1)
    GQOS_POLICY_GLOBAL_GRP_FLOW_COUNT = (QOSSP_ERR_BASE + 200 + 2)
    GQOS_POLICY_GLOBAL_USER_FLOW_COUNT = (QOSSP_ERR_BASE + 200 + 3)
    GQOS_POLICY_GLOBAL_UNK_USER_FLOW_COUNT = (QOSSP_ERR_BASE + 200 + 4)
    GQOS_POLICY_SUBNET_DEF_FLOW_COUNT = (QOSSP_ERR_BASE + 200 + 5)
    GQOS_POLICY_SUBNET_GRP_FLOW_COUNT = (QOSSP_ERR_BASE + 200 + 6)
    GQOS_POLICY_SUBNET_USER_FLOW_COUNT = (QOSSP_ERR_BASE + 200 + 7)
    GQOS_POLICY_SUBNET_UNK_USER_FLOW_COUNT = (QOSSP_ERR_BASE + 200 + 8)
    GQOS_POLICY_GLOBAL_DEF_FLOW_DURATION = (QOSSP_ERR_BASE + 200 + 9)
    GQOS_POLICY_GLOBAL_GRP_FLOW_DURATION = (QOSSP_ERR_BASE + 200 + 10)
    GQOS_POLICY_GLOBAL_USER_FLOW_DURATION = (QOSSP_ERR_BASE + 200 + 11)
    GQOS_POLICY_GLOBAL_UNK_USER_FLOW_DURATION = (QOSSP_ERR_BASE + 200 + 12)
    GQOS_POLICY_SUBNET_DEF_FLOW_DURATION = (QOSSP_ERR_BASE + 200 + 13)
    GQOS_POLICY_SUBNET_GRP_FLOW_DURATION = (QOSSP_ERR_BASE + 200 + 14)
    GQOS_POLICY_SUBNET_USER_FLOW_DURATION = (QOSSP_ERR_BASE + 200 + 15)
    GQOS_POLICY_SUBNET_UNK_USER_FLOW_DURATION = (QOSSP_ERR_BASE + 200 + 16)
    GQOS_POLICY_GLOBAL_DEF_FLOW_RATE = (QOSSP_ERR_BASE + 200 + 17)
    GQOS_POLICY_GLOBAL_GRP_FLOW_RATE = (QOSSP_ERR_BASE + 200 + 18)
    GQOS_POLICY_GLOBAL_USER_FLOW_RATE = (QOSSP_ERR_BASE + 200 + 19)
    GQOS_POLICY_GLOBAL_UNK_USER_FLOW_RATE = (QOSSP_ERR_BASE + 200 + 20)
    GQOS_POLICY_SUBNET_DEF_FLOW_RATE = (QOSSP_ERR_BASE + 200 + 21)
    GQOS_POLICY_SUBNET_GRP_FLOW_RATE = (QOSSP_ERR_BASE + 200 + 22)
    GQOS_POLICY_SUBNET_USER_FLOW_RATE = (QOSSP_ERR_BASE + 200 + 23)
    GQOS_POLICY_SUBNET_UNK_USER_FLOW_RATE = (QOSSP_ERR_BASE + 200 + 24)
    GQOS_POLICY_GLOBAL_DEF_PEAK_RATE = (QOSSP_ERR_BASE + 200 + 25)
    GQOS_POLICY_GLOBAL_GRP_PEAK_RATE = (QOSSP_ERR_BASE + 200 + 26)
    GQOS_POLICY_GLOBAL_USER_PEAK_RATE = (QOSSP_ERR_BASE + 200 + 27)
    GQOS_POLICY_GLOBAL_UNK_USER_PEAK_RATE = (QOSSP_ERR_BASE + 200 + 28)
    GQOS_POLICY_SUBNET_DEF_PEAK_RATE = (QOSSP_ERR_BASE + 200 + 29)
    GQOS_POLICY_SUBNET_GRP_PEAK_RATE = (QOSSP_ERR_BASE + 200 + 30)
    GQOS_POLICY_SUBNET_USER_PEAK_RATE = (QOSSP_ERR_BASE + 200 + 31)
    GQOS_POLICY_SUBNET_UNK_USER_PEAK_RATE = (QOSSP_ERR_BASE + 200 + 32)
    GQOS_POLICY_GLOBAL_DEF_SUM_FLOW_RATE = (QOSSP_ERR_BASE + 200 + 33)
    GQOS_POLICY_GLOBAL_GRP_SUM_FLOW_RATE = (QOSSP_ERR_BASE + 200 + 34)
    GQOS_POLICY_GLOBAL_USER_SUM_FLOW_RATE = (QOSSP_ERR_BASE + 200 + 35)
    GQOS_POLICY_GLOBAL_UNK_USER_SUM_FLOW_RATE = (QOSSP_ERR_BASE + 200 + 36)
    GQOS_POLICY_SUBNET_DEF_SUM_FLOW_RATE = (QOSSP_ERR_BASE + 200 + 37)
    GQOS_POLICY_SUBNET_GRP_SUM_FLOW_RATE = (QOSSP_ERR_BASE + 200 + 38)
    GQOS_POLICY_SUBNET_USER_SUM_FLOW_RATE = (QOSSP_ERR_BASE + 200 + 39)
    GQOS_POLICY_SUBNET_UNK_USER_SUM_FLOW_RATE = (QOSSP_ERR_BASE + 200 + 40)
    GQOS_POLICY_GLOBAL_DEF_SUM_PEAK_RATE = (QOSSP_ERR_BASE + 200 + 41)
    GQOS_POLICY_GLOBAL_GRP_SUM_PEAK_RATE = (QOSSP_ERR_BASE + 200 + 42)
    GQOS_POLICY_GLOBAL_USER_SUM_PEAK_RATE = (QOSSP_ERR_BASE + 200 + 43)
    GQOS_POLICY_GLOBAL_UNK_USER_SUM_PEAK_RATE = (QOSSP_ERR_BASE + 200 + 44)
    GQOS_POLICY_SUBNET_DEF_SUM_PEAK_RATE = (QOSSP_ERR_BASE + 200 + 45)
    GQOS_POLICY_SUBNET_GRP_SUM_PEAK_RATE = (QOSSP_ERR_BASE + 200 + 46)
    GQOS_POLICY_SUBNET_USER_SUM_PEAK_RATE = (QOSSP_ERR_BASE + 200 + 47)
    GQOS_POLICY_SUBNET_UNK_USER_SUM_PEAK_RATE = (QOSSP_ERR_BASE + 200 + 48)
    GQOS_POLICY_UNKNOWN_USER = (QOSSP_ERR_BASE + 200 + 49)
    GQOS_POLICY_NO_PRIVILEGES = (QOSSP_ERR_BASE + 200 + 50)
    GQOS_POLICY_EXPIRED_USER_TOKEN = (QOSSP_ERR_BASE + 200 + 51)
    GQOS_POLICY_NO_RESOURCES = (QOSSP_ERR_BASE + 200 + 52)
    GQOS_POLICY_PRE_EMPTED = (QOSSP_ERR_BASE + 200 + 53)
    GQOS_POLICY_USER_CHANGED = (QOSSP_ERR_BASE + 200 + 54)
    GQOS_POLICY_NO_ACCEPTS = (QOSSP_ERR_BASE + 200 + 55)
    GQOS_POLICY_NO_MEMORY = (QOSSP_ERR_BASE + 200 + 56)
    GQOS_POLICY_CRAZY_FLOWSPEC = (QOSSP_ERR_BASE + 200 + 57)
    GQOS_POLICY_NO_MORE_INFO = (QOSSP_ERR_BASE + 200 + 58)
    GQOS_POLICY_UNSUPPORTED_CREDENTIAL_TYPE = (QOSSP_ERR_BASE + 200 + 59)
    GQOS_POLICY_INSUFFICIENT_PRIVILEGES = (QOSSP_ERR_BASE + 200 + 60)
    GQOS_POLICY_EXPIRED_CREDENTIAL = (QOSSP_ERR_BASE + 200 + 61)
    GQOS_POLICY_IDENTITY_CHANGED = (QOSSP_ERR_BASE + 200 + 62)
    GQOS_POLICY_NO_QOS_PROVIDED = (QOSSP_ERR_BASE + 200 + 63)
    GQOS_POLICY_DO_NOT_SEND = (QOSSP_ERR_BASE + 200 + 64)
    GQOS_POLICY_ERROR_USERID = (QOSSP_ERR_BASE + 200 + 99)
'  RSVP Error
    GQOS_RSVP = (QOSSP_ERR_BASE + 300)
    GQOS_NO_PATH = (QOSSP_ERR_BASE + 300 + 1)
    GQOS_NO_SENDER = (QOSSP_ERR_BASE + 300 + 2)
    GQOS_BAD_STYLE = (QOSSP_ERR_BASE + 300 + 3)
    GQOS_UNKNOWN_STYLE = (QOSSP_ERR_BASE + 300 + 4)
    GQOS_BAD_DSTPORT = (QOSSP_ERR_BASE + 300 + 5)
    GQOS_BAD_SNDPORT = (QOSSP_ERR_BASE + 300 + 6)
    GQOS_AMBIG_FILTER = (QOSSP_ERR_BASE + 300 + 7)
    GQOS_PREEMPTED = (QOSSP_ERR_BASE + 300 + 8)
    GQOS_UNKN_OBJ_CLASS = (QOSSP_ERR_BASE + 300 + 9)
    GQOS_UNKNOWN_CTYPE = (QOSSP_ERR_BASE + 300 + 10)
    GQOS_INVALID = (QOSSP_ERR_BASE + 300 + 11)
'  API Error
    GQOS_API = (QOSSP_ERR_BASE + 400)
    GQOS_API_BADSEND = (QOSSP_ERR_BASE + 400 + 1) /* Sender addr not my interface */
    GQOS_API_BADRECV = (QOSSP_ERR_BASE + 400 + 2) /* Recv addr not my interface */
    GQOS_API_BADSPORT = (QOSSP_ERR_BASE + 400 + 3) /* Sport !=0 but Dport == 0 */
'  TC System Error
    GQOS_KERNEL_TC_SYS = (QOSSP_ERR_BASE + 500)
    GQOS_TC_GENERIC = (QOSSP_ERR_BASE + 500 + 1)
    GQOS_TC_INVALID = (QOSSP_ERR_BASE + 500 + 2)
    GQOS_NO_MEMORY = (QOSSP_ERR_BASE + 500 + 3)
    GQOS_BAD_ADDRESSTYPE = (QOSSP_ERR_BASE + 500 + 4)
    GQOS_BAD_DUPLICATE = (QOSSP_ERR_BASE + 500 + 5)
    GQOS_CONFLICT = (QOSSP_ERR_BASE + 500 + 6)
    GQOS_NOTREADY = (QOSSP_ERR_BASE + 500 + 7)
    GQOS_WOULDBLOCK = (QOSSP_ERR_BASE + 500 + 8)
    GQOS_INCOMPATIBLE = (QOSSP_ERR_BASE + 500 + 9)
    GQOS_BAD_SDMODE = (QOSSP_ERR_BASE + 500 + 10)
    GQOS_BAD_QOSPRIORITY = (QOSSP_ERR_BASE + 500 + 11)
    GQOS_BAD_TRAFFICCLASS = (QOSSP_ERR_BASE + 500 + 12)
    GQOS_NO_SYS_RESOURCES = (QOSSP_ERR_BASE + 500 + 13)
'  RSVP System Error
    GQOS_RSVP_SYS = (QOSSP_ERR_BASE + 600)
    GQOS_OTHER_SYS = (QOSSP_ERR_BASE + 600 + 1)
    GQOS_MEMORY_SYS = (QOSSP_ERR_BASE + 600 + 2)
    GQOS_API_SYS = (QOSSP_ERR_BASE + 600 + 3)
    GQOS_SETQOS_NO_LOCAL_APPS = (QOSSP_ERR_BASE + 600 + 4)
'  TC Error
    GQOS_KERNEL_TC = (QOSSP_ERR_BASE + 700)
    GQOS_CONFLICT_SERV = (QOSSP_ERR_BASE + 700 + 1)
    GQOS_NO_SERV = (QOSSP_ERR_BASE + 700 + 2)
    GQOS_BAD_FLOWSPEC = (QOSSP_ERR_BASE + 700 + 3)
    GQOS_BAD_TSPEC = (QOSSP_ERR_BASE + 700 + 4)
    GQOS_BAD_ADSPEC = (QOSSP_ERR_BASE + 700 + 5)
'  GQOS API ERRORS
'  WSAIoctl Error
    GQOS_IOCTL_SYSTEMFAILURE = (QOSSP_ERR_BASE + 800 + 1)
    GQOS_IOCTL_NOBYTESRETURNED = (QOSSP_ERR_BASE + 800 + 2)
    GQOS_IOCTL_INVALIDSOCKET = (QOSSP_ERR_BASE + 800 + 3)
    GQOS_IOCTL_INV_FUNCPTR = (QOSSP_ERR_BASE + 800 + 4)
    GQOS_IOCTL_INV_OVERLAPPED = (QOSSP_ERR_BASE + 800 + 5)
'  SIO_SET_QOS error
    GQOS_SETQOS_BADINBUFFER = (QOSSP_ERR_BASE + 810 + 1)
    GQOS_SETQOS_BADFLOWSPEC = (QOSSP_ERR_BASE + 810 + 2)
    GQOS_SETQOS_COLLISION = (QOSSP_ERR_BASE + 810 + 3)
    GQOS_SETQOS_BADPROVSPECBUF = (QOSSP_ERR_BASE + 810 + 4)
    GQOS_SETQOS_ILLEGALOP = (QOSSP_ERR_BASE + 810 + 5)
    GQOS_SETQOS_INVALIDADDRESS = (QOSSP_ERR_BASE + 810 + 6)
    GQOS_SETQOS_OUTOFMEMORY = (QOSSP_ERR_BASE + 810 + 7)
    GQOS_SETQOS_EXCEPTION = (QOSSP_ERR_BASE + 810 + 8)
    GQOS_SETQOS_BADADDRLEN = (QOSSP_ERR_BASE + 810 + 9)
    GQOS_SETQOS_NOSOCKNAME = (QOSSP_ERR_BASE + 810 + 10)
    GQOS_SETQOS_IPTOSFAIL = (QOSSP_ERR_BASE + 810 + 11)
    GQOS_SETQOS_OPENSESSIONFAIL = (QOSSP_ERR_BASE + 810 + 12)
    GQOS_SETQOS_SENDFAIL = (QOSSP_ERR_BASE + 810 + 13)
    GQOS_SETQOS_RECVFAIL = (QOSSP_ERR_BASE + 810 + 14)
    GQOS_SETQOS_BADPOLICYOBJECT = (QOSSP_ERR_BASE + 810 + 15)
    GQOS_SETQOS_UNKNOWNFILTEROBJ = (QOSSP_ERR_BASE + 810 + 16)
    GQOS_SETQOS_BADFILTERTYPE = (QOSSP_ERR_BASE + 810 + 17)
    GQOS_SETQOS_BADFILTERCOUNT = (QOSSP_ERR_BASE + 810 + 18)
    GQOS_SETQOS_BADOBJLENGTH = (QOSSP_ERR_BASE + 810 + 19)
    GQOS_SETQOS_BADFLOWCOUNT = (QOSSP_ERR_BASE + 810 + 20)
    GQOS_SETQOS_UNKNOWNPSOBJ = (QOSSP_ERR_BASE + 810 + 21)
    GQOS_SETQOS_BADPOLICYOBJ = (QOSSP_ERR_BASE + 810 + 22)
    GQOS_SETQOS_BADFLOWDESC = (QOSSP_ERR_BASE + 810 + 23)
    GQOS_SETQOS_BADPROVSPECOBJ = (QOSSP_ERR_BASE + 810 + 24)
    GQOS_SETQOS_NOLOOPBACK = (QOSSP_ERR_BASE + 810 + 25)
    GQOS_SETQOS_MODENOTSUPPORTED = (QOSSP_ERR_BASE + 810 + 26)
    GQOS_SETQOS_MISSINGFLOWDESC = (QOSSP_ERR_BASE + 810 + 27)
'  SIO_GET_QOS error
    GQOS_GETQOS_BADOUTBUFFER = (QOSSP_ERR_BASE + 840 + 1)
    GQOS_GETQOS_SYSTEMFAILURE = (QOSSP_ERR_BASE + 840 + 2)
    GQOS_GETQOS_EXCEPTION = (QOSSP_ERR_BASE + 840 + 3)
    GQOS_GETQOS_INTERNALFAILURE = (QOSSP_ERR_BASE + 840 + 4)
'  SIO_CHK_QOS error
    GQOS_CHKQOS_BADINBUFFER = (QOSSP_ERR_BASE + 850 + 1)
    GQOS_CHKQOS_BADOUTBUFFER = (QOSSP_ERR_BASE + 850 + 2)
    GQOS_CHKQOS_SYSTEMFAILURE = (QOSSP_ERR_BASE + 850 + 3)
    GQOS_CHKQOS_INTERNALFAILURE = (QOSSP_ERR_BASE + 850 + 4)
    GQOS_CHKQOS_BADPARAMETER = (QOSSP_ERR_BASE + 850 + 5)
    GQOS_CHKQOS_EXCEPTION = (QOSSP_ERR_BASE + 850 + 6)
End Enum

'qosobjs.h - 100%

Public Const QOS_MAX_OBJECT_STRING_LENGTH = 256

Public Enum TrafficQoSObjects
    QOS_TRAFFIC_GENERAL_ID_BASE = 4000
    QOS_OBJECT_DS_CLASS = (&H00000001 + QOS_TRAFFIC_GENERAL_ID_BASE)
    /* QOS_DS_CLASS structure passed */
    QOS_OBJECT_TRAFFIC_CLASS = (&H00000002 + QOS_TRAFFIC_GENERAL_ID_BASE)
    /* QOS_Traffic class structure passed */
    QOS_OBJECT_DIFFSERV = (&H00000003 + QOS_TRAFFIC_GENERAL_ID_BASE)
    /* QOS_DIFFSERV Structure */
    QOS_OBJECT_TCP_TRAFFIC = (&H00000004 + QOS_TRAFFIC_GENERAL_ID_BASE)
    /* QOS_TCP_TRAFFIC structure */
    QOS_OBJECT_FRIENDLY_NAME = (&H00000005 + QOS_TRAFFIC_GENERAL_ID_BASE)
    /* QOS_FRIENDLY_NAME structure */
End Enum

Public Type QOS_FRIENDLY_NAME
    ObjectHdr As QOS_OBJECT_HDR
    FriendlyName(0 To (QOS_MAX_OBJECT_STRING_LENGTH - 1)) As Integer
End Type

Public Type QOS_TRAFFIC_CLASS
    ObjectHdr As QOS_OBJECT_HDR
    TrafficClass As SERVICETYPE
End Type

Public Type QOS_DS_CLASS
    ObjectHdr As QOS_OBJECT_HDR
    DSField As Long
End Type

[Description("DiffservRule is a variable C-style array for which a guess at max ever used is substituted.")]
Public Type QOS_DIFFSERV
    ObjectHdr As QOS_OBJECT_HDR
    DSFieldCount As Long
    DiffservRule(0 To 255) As Byte
End Type

Public Type QOS_DIFFSERV_RULE
    InboundDSField As Byte
    ConformingOutboundDSField As Byte
    NonConformingOutboundDSField As Byte
    ConformingUserPriority As Byte
    NonConformingUserPriority As Byte
End Type

Public Type QOS_TCP_TRAFFIC
    ObjectHdr As QOS_OBJECT_HDR
End Type


'traffic.h

Public Const CURRENT_TCI_VERSION = 2

Public Enum QoSTcNotifyCodes
    TC_NOTIFY_IFC_UP = 1
'  A TC interface has come down
    TC_NOTIFY_IFC_CLOSE = 2
'  A change on a TC interface, typically a change in the
'  list of supported network addresses
    TC_NOTIFY_IFC_CHANGE = 3
'  A TC parameter has changed
    TC_NOTIFY_PARAM_CHANGED = 4
'  A flow has been closed by the TC interface
'  for example: after a remote call close, or the whole interface
'  is going down
    TC_NOTIFY_FLOW_CLOSE = 5
End Enum

 
Public Const TC_INVALID_HANDLE As LongPtr = 0
Public Const MAX_STRING_LENGTH  = 256

' typedef
' VOID (CALLBACK * TCI_NOTIFY_HANDLER)(
    ' _In_                 HANDLE      ClRegCtx,
    ' _In_                 HANDLE      ClIfcCtx,
    ' _In_                 ULONG       Event,      // See list below
    ' _In_                 HANDLE      SubCode,
    ' _In_                 ULONG       BufSize,
    ' _In_reads_bytes_(BufSize) PVOID       Buffer
    ' );
Public Delegate Sub TciNotifyHandler (ByVal ClRegCtx As LongPtr, ByVal ClIfcCtx As LongPtr, ByVal Event As QoSTcNotifyCodes, ByVal SubCode As LongPtr, ByVal BufSize As Long, ByVal Buffer As LongPtr)
' typedef
' VOID (CALLBACK * TCI_ADD_FLOW_COMPLETE_HANDLER)(
    ' _In_ HANDLE   ClFlowCtx,
    ' _In_ ULONG    Status
    ' );
Public Delegate Sub TciAddFlowCompleteHandler (ByVal ClFlowCtx As LongPtr, ByVal Status As Long)
' typedef
' VOID (CALLBACK * TCI_MOD_FLOW_COMPLETE_HANDLER)(
    ' _In_ HANDLE   ClFlowCtx,
    ' _In_ ULONG    Status
    ' );
Public Delegate Sub TciModFlowCompleteHandler (ByVal ClFlowCtx As LongPtr, ByVal Status As Long)
    
' typedef
' VOID (CALLBACK * TCI_DEL_FLOW_COMPLETE_HANDLER)(
    ' _In_ HANDLE   ClFlowCtx,
    ' _In_ ULONG    Status
    ' );
Public Delegate Sub TciDelFlowCompleteHandler (ByVal ClFlowCtx As LongPtr, ByVal Status As Long)
    
' Public Type TCI_CLIENT_FUNC_LIST
'     ClNotifyHandler As TciNotifyHandler
'     ClAddFlowCompleteHandler As TciAddFlowCompleteHandler
'     ClModifyFlowCompleteHandler As TciModFlowCompleteHandler
'     ClDeleteFlowCompleteHandler As TciDelFlowCompleteHandler
' End Type
Public Type TCI_CLIENT_FUNC_LIST
    ClNotifyHandler As LongPtr
    ClAddFlowCompleteHandler As LongPtr
    ClModifyFlowCompleteHandler As LongPtr
    ClDeleteFlowCompleteHandler As LongPtr
End Type

Public Enum NdisProtocolIds
    NDIS_PROTOCOL_ID_DEFAULT = &H00
    NDIS_PROTOCOL_ID_TCP_IP = &H02
    NDIS_PROTOCOL_ID_IP6 = &H03
    NDIS_PROTOCOL_ID_IPX = &H06
    NDIS_PROTOCOL_ID_NBF = &H07
    NDIS_PROTOCOL_ID_MAX = &H0F
    NDIS_PROTOCOL_ID_MASK = &H0F
End Enum
Public Type NETWORK_ADDRESS
    AddressLength As Integer ' length in bytes of Address[] in this
    AddressType As Integer ' type of this address (NDIS_PROTOCOL_ID_XXX above)
    Address(0 To 16) As Byte ' actually AddressLength bytes long
End Type
[Description("⚠️ **WARNING:** Header only-- followed by a variable C-style array, which would normally be bufferedd but it's *also* variable-sized. ")]
Public Type NETWORK_ADDRESS_LIST
    AddressCount As Long ' number of addresses following
    AddressType As Integer ' type of this address (NDIS_PROTOCOL_ID_XXX above)
    ' Address(0 To 0) As NETWORK_ADDRESS ' actually AddressCount elements long
End Type
Public Type ADDRESS_LIST_DESCRIPTOR
    MediaType As Long
    AddressList As NETWORK_ADDRESS_LIST
End Type
Public Type TC_IFC_DESCRIPTOR
    Length As Long
    pInterfaceName As LongPtr
    pInterfaceID As LongPtr
    AddressListDesc As ADDRESS_LIST_DESCRIPTOR
End Type
Public Type TC_SUPPORTED_INFO_BUFFER
    InstanceIDLength As Integer
    ' device or interface ID
    InstanceID(0 To (MAX_STRING_LENGTH - 1)) As Integer
    ' the NET_LUID for the interface
    InterfaceLuid As LongLong
    ' address list
    AddrListDesc As ADDRESS_LIST_DESCRIPTOR
End Type

Public Type TC_GEN_FILTER
    AddressType As Integer ' IP, IPX, etc.
    PatternSize As Long ' byte count of the pattern
    Pattern As LongPtr ' specific format, e.g. IP_PATTERN
    Mask As LongPtr ' same type as Pattern
End Type

Public Type TC_GEN_FLOW
    SendingFlowspec As FLOWSPEC
    ReceivingFlowspec As FLOWSPEC
    TcObjectsLength As Long ' number of optional bytes
    TcObjects(0 To 0) As QOS_OBJECT_HDR
End Type

Public Type IP_PATTERN
    Reserved1 As Long
    Reserved2 As Long
    SrcAddr As Long
    DstAddr As Long
    '    union {
    '        struct { USHORT s_srcport,s_dstport; } S_un_ports;
    '        struct { UCHAR s_type,s_code; USHORT filler; } S_un_icmp;
    '       ULONG   S_Spi;
    '    } S_un;
    S_un As Long
    ProtocolId As Byte
    Reserved3(0 To 2) As Byte
    '#define tcSrcPort S_un.S_un_ports.s_srcport
    '#define tcDstPort S_un.S_un_ports.s_dstport
    '#define tcIcmpType        S_un.S_un_icmp.s_type
    '#define tcIcmpCode        S_un.S_un_icmp.s_code
    '#define tcSpi             S_un.S_Spi
End Type
Public Type IPX_PATTERN
    '    struct {
    NetworkAddress As Long
    NodeAddress(0 To 5) As Byte
    Socket As Integer
    ' } Src, Dest;
End Type

[Description("Note: GenericFilter is a variable C-style array which has been buffered to a guess at the max ever needed.")]
Public Type ENUMERATION_BUFFER
    Length As Long
    OwnerProcessId As Long
    FlowNameLength As Integer
    FlowName(0 To (MAX_STRING_LENGTH - 1)) As Integer
    pFlow As LongPtr 'PTC_GEN_FLOW
    NumberOfFilters As Long
    GenericFilter(0 To 127) As TC_GEN_FILTER ' one for each filter
End Type

Public Declare PtrSafe Function TcRegisterClient Lib "traffic.dll" (ByVal TciVersion As Long, ByVal ClRegCtx As LongPtr, ClientHandlerList As TCI_CLIENT_FUNC_LIST, pClientHandle As LongPtr) As Long
Public Declare PtrSafe Function TcEnumerateInterfaces Lib "traffic.dll" (ByVal ClientHandle As LongPtr, pBufferSize As Long, InterfaceBuffer As Any) As Long
Public Declare PtrSafe Function TcOpenInterfaceA Lib "traffic.dll" (ByVal pInterfaceName As String, ByVal ClientHandle As LongPtr, ByVal ClIfcCtx As LongPtr, pIfcHandle As LongPtr) As Long
Public Declare PtrSafe Function TcOpenInterfaceW Lib "traffic.dll" (ByVal pInterfaceName As LongPtr, ByVal ClientHandle As LongPtr, ByVal ClIfcCtx As LongPtr, pIfcHandle As LongPtr) As Long
Public DeclareWide PtrSafe Function TcOpenInterface Lib "traffic.dll" Alias "TcOpenInterfaceW" (ByVal pInterfaceName As String, ByVal ClientHandle As LongPtr, ByVal ClIfcCtx As LongPtr, pIfcHandle As LongPtr) As Long
Public Declare PtrSafe Function TcCloseInterface Lib "traffic.dll" (ByVal IfcHandle As LongPtr) As Long
Public Declare PtrSafe Function TcQueryInterface Lib "traffic.dll" (ByVal IfcHandle As LongPtr, pGuidParam As UUID, ByVal NotifyChange As Byte, pBufferSize As Long, Buffer As Any) As Long
Public Declare PtrSafe Function TcSetInterface Lib "traffic.dll" (ByVal IfcHandle As LongPtr, pGuidParam As UUID, ByVal BufferSize As Long, Buffer As Any) As Long
Public Declare PtrSafe Function TcQueryFlowA Lib "traffic.dll" (ByVal pFlowName As String, pGuidParam As UUID, pBufferSize As Long, Buffer As Any) As Long
Public Declare PtrSafe Function TcQueryFlowW Lib "traffic.dll" (ByVal pFlowName As LongPtr, pGuidParam As UUID, pBufferSize As Long, Buffer As Any) As Long
Public DeclareWide PtrSafe Function TcQueryFlow Lib "traffic.dll" Alias "TcQueryFlowW" (ByVal pFlowName As String, pGuidParam As UUID, pBufferSize As Long, Buffer As Any) As Long
Public Declare PtrSafe Function TcSetFlowA Lib "traffic.dll" (ByVal pFlowName As String, pGuidParam As UUID, ByVal BufferSize As Long, Buffer As Any) As Long
Public Declare PtrSafe Function TcSetFlowW Lib "traffic.dll" (ByVal pFlowName As LongPtr, pGuidParam As UUID, ByVal BufferSize As Long, Buffer As Any) As Long
Public DeclareWide PtrSafe Function TcSetFlow Lib "traffic.dll" Alias "TcSetFlowW" (ByVal pFlowName As String, pGuidParam As UUID, ByVal BufferSize As Long, Buffer As Any) As Long
Public Declare PtrSafe Function TcAddFlow Lib "traffic.dll" (ByVal IfcHandle As LongPtr, ByVal ClFlowCtx As LongPtr, ByVal Flags As Long, pGenericFlow As TC_GEN_FLOW, pFlowHandle As LongPtr) As Long
Public Declare PtrSafe Function TcGetFlowNameA Lib "traffic.dll" (ByVal FlowHandle As LongPtr, ByVal StrSize As Long, ByVal pFlowName As String) As Long
Public Declare PtrSafe Function TcGetFlowNameW Lib "traffic.dll" (ByVal FlowHandle As LongPtr, ByVal StrSize As Long, ByVal pFlowName As LongPtr) As Long
Public DeclareWide PtrSafe Function TcGetFlowName Lib "traffic.dll" Alias "TcGetFlowNameW" (ByVal FlowHandle As LongPtr, ByVal StrSize As Long, ByVal pFlowName As String) As Long
Public Declare PtrSafe Function TcModifyFlow Lib "traffic.dll" (ByVal FlowHandle As LongPtr, pGenericFlow As TC_GEN_FLOW) As Long
Public Declare PtrSafe Function TcAddFilter Lib "traffic.dll" (ByVal FlowHandle As LongPtr, pGenericFilter As TC_GEN_FILTER, pFilterHandle As LongPtr) As Long
Public Declare PtrSafe Function TcDeregisterClient Lib "traffic.dll" (ByVal ClientHandle As LongPtr) As Long
Public Declare PtrSafe Function TcDeleteFlow Lib "traffic.dll" (ByVal FlowHandle As LongPtr) As Long
Public Declare PtrSafe Function TcDeleteFilter Lib "traffic.dll" (ByVal FilterHandle As LongPtr) As Long
Public Declare PtrSafe Function TcEnumerateFlows Lib "traffic.dll" (ByVal IfcHandle As LongPtr, pEnumHandle As LongPtr, pFlowCount As Long, pBufSize As Long, Buffer As ENUMERATION_BUFFER) As Long



#End Region


End Module

#End If