
'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

#If WDL_NO_DIRECTX = 0 Then

#Region "DirectWrite"

   [InterfaceId("B859EE5A-D838-4B5B-A2E8-1ADC7D93DB48")]
    [Description("The root factory interface for all DWrite objects.")]
    [OleAutomation(False)]
    Interface IDWriteFactory Extends IUnknown
        [Description("Gets a font collection representing the set of installed fonts.")]
        Sub GetSystemFontCollection(ByRef fontCollection As IDWriteFontCollection, Optional ByVal checkForUpdates As BOOL = CFALSE)
        [Description("Creates a font collection using a custom font collection loader.")]
        Function CreateCustomFontCollection(ByVal collectionLoader As IDWriteFontCollectionLoader, ByRef collectionKey As Any, ByVal collectionKeySize As Long) As IDWriteFontCollection
        [Description("Registers a custom font collection loader with the factory object.")]
        Sub RegisterFontCollectionLoader(ByVal fontCollectionLoader As IDWriteFontCollectionLoader)
        [Description("Unregisters a custom font collection loader that was previously registered using RegisterFontCollectionLoader.")]
        Sub UnregisterFontCollectionLoader(ByVal fontCollectionLoader As IDWriteFontCollectionLoader)
        [Description("CreateFontFileReference creates a font file reference object from a local font file.")]
        Function CreateFontFileReference(ByVal filePath As LongPtr, ByRef LastWriteTime As FILETIME) As IDWriteFontFile
        [Description("CreateCustomFontFileReference creates a reference to an application specific font file resource.")]
        Function CreateCustomFontFileReference(ByRef fontFileReferenceKey As Any, ByVal fontFileReferenceKeySize As Long, ByVal fontFileLoader As IDWriteFontFileLoader) As IDWriteFontFile
        [Description("Creates a font face object.")]
        Function CreateFontFace(ByVal fontFaceType As DWRITE_FONT_FACE_TYPE, ByVal numberOfFiles As Long, ByVal fontFiles As IDWriteFontFile, ByVal faceIndex As Long, ByVal fontFaceSimulationFlags As DWRITE_FONT_SIMULATIONS) As IDWriteFontFace
        [Description("Creates a rendering parameters object with default settings for the primary monitor.")]
        Function CreateRenderingParams() As IDWriteRenderingParams
        [Description("Creates a rendering parameters object with default settings for the specified monitor.")]
        Function CreateMonitorRenderingParams(ByVal monitor As LongPtr) As IDWriteRenderingParams
        [Description("Creates a rendering parameters object with the specified properties.")]
        Function CreateCustomRenderingParams(ByVal Gamma As Single, ByVal enhancedContrast As Single, ByVal clearTypeLevel As Single, ByVal pixelGeometry As DWRITE_PIXEL_GEOMETRY, ByVal renderingMode As DWRITE_RENDERING_MODE) As IDWriteRenderingParams
        [Description("Registers a font file loader with DirectWrite.")]
        Sub RegisterFontFileLoader(ByVal fontFileLoader As IDWriteFontFileLoader)
        [Description("Unregisters a font file loader that was previously registered with the DirectWrite font system using RegisterFontFileLoader.")]
        Sub UnregisterFontFileLoader(ByVal fontFileLoader As IDWriteFontFileLoader)
        [Description("Create a text format object used for text layout.")]
        Function CreateTextFormat(ByVal fontFamilyName As LongPtr, ByVal fontCollection As IDWriteFontCollection, ByVal fontWeight As DWRITE_FONT_WEIGHT, ByVal fontStyle As DWRITE_FONT_STYLE, ByVal fontStretch As DWRITE_FONT_STRETCH, ByVal fontSize As Single, ByVal localeName As LongPtr) As IDWriteTextFormat
        [Description("Create a typography object used in conjunction with text format for text layout.")]
        Function CreateTypography() As IDWriteTypography
        [Description("Create an object used for interoperability with GDI.")]
        Function GetGdiInterop() As IDWriteGdiInterop
        [Description("CreateTextLayout takes a string, format, and associated constraints and produces and object representing the fully analyzed and formatted result.")]
        Function CreateTextLayout(ByVal string As LongPtr, ByVal stringLength As Long, ByVal textFormat As IDWriteTextFormat, ByVal maxWidth As Single, ByVal maxHeight As Single) As IDWriteTextLayout
        [Description("CreateGdiCompatibleTextLayout takes a string, format, and associated constraints and produces and object representing the result formatted for a particular display resolution and measuring method.")]
        Function CreateGdiCompatibleTextLayout(ByVal string As LongPtr, ByVal stringLength As Long, ByVal textFormat As IDWriteTextFormat, ByVal layoutWidth As Single, ByVal layoutHeight As Single, ByVal pixelsPerDip As Single, ByRef transform As DWRITE_MATRIX, ByVal useGdiNatural As BOOL) As IDWriteTextLayout
        [Description("The application may call this function to create an inline object for trimming, using an ellipsis as the omission sign.")]
        Function CreateEllipsisTrimmingSign(ByVal textFormat As IDWriteTextFormat) As IDWriteInlineObject
        [Description("Return an interface to perform text analysis with.")]
        Function CreateTextAnalyzer() As IDWriteTextAnalyzer
        [Description("Creates a number substitution object using a locale name, substitution method, and whether to ignore user overrides (uses NLS defaults for the given culture instead).")]
        Function CreateNumberSubstitution(ByVal substitutionMethod As DWRITE_NUMBER_SUBSTITUTION_METHOD, ByVal localeName As LongPtr, ByVal ignoreUserOverride As BOOL) As IDWriteNumberSubstitution
        [Description("Creates a glyph run analysis object, which encapsulates information used to render a glyph run.")]
        Function CreateGlyphRunAnalysis(ByRef glyphRun As DWRITE_GLYPH_RUN, ByVal pixelsPerDip As Single, ByRef transform As DWRITE_MATRIX, ByVal renderingMode As DWRITE_RENDERING_MODE, ByVal measuringMode As DWRITE_MEASURING_MODE, ByVal baselineOriginX As Single, ByVal baselineOriginY As Single) As IDWriteGlyphRunAnalysis
    End Interface

    [InterfaceId("A84CEE02-3EEA-4EEE-A827-87C1A02A0FCC")]
    [Description("The IDWriteFontCollection encapsulates a collection of fonts.")]
    [OleAutomation(False)]
    Interface IDWriteFontCollection Extends IUnknown
        [PreserveSig]
        [Description("Gets the number of font families in the collection.")]
        Function GetFontFamilyCount() As Long
        [Description("Creates a font family object given a zero-based font family index.")]
        Function GetFontFamily(ByVal index As Long) As IDWriteFontFamily
        [Description("Finds the font family with the specified family name.")]
        Function FindFamilyName(ByVal familyName As LongPtr, ByRef index As Long) As Long
        [Description("Gets the font object that corresponds to the same physical font as the specified font face object. The specified physical font must belong to the font collection.")]
        Function GetFontFromFontFace(ByVal fontFace As IDWriteFontFace) As IDWriteFont
    End Interface




    [InterfaceId("DA20D8EF-812A-4C43-9802-62EC4ABD7ADD")]
    [Description("The IDWriteFontFamily interface represents a set of fonts that share the same design but are differentiated by weight, stretch, and style.")]
    [OleAutomation(False)]
    Interface IDWriteFontFamily Extends IDWriteFontList
        [Description("Creates an localized strings object that contains the family names for the font family, indexed by locale name.")]
        Function GetFamilyNames() As IDWriteLocalizedStrings
        [Description("Gets the font that best matches the specified properties.")]
        Function GetFirstMatchingFont(ByVal Weight As DWRITE_FONT_WEIGHT, ByVal stretch As DWRITE_FONT_STRETCH, ByVal Style As DWRITE_FONT_STYLE) As IDWriteFont
        [Description("Gets a list of fonts in the font family ranked in order of how well they match the specified properties.")]
        Function GetMatchingFonts(ByVal Weight As DWRITE_FONT_WEIGHT, ByVal stretch As DWRITE_FONT_STRETCH, ByVal Style As DWRITE_FONT_STYLE) As IDWriteFontList
    End Interface

    [InterfaceId("1A0D8438-1D97-4EC1-AEF9-A2FB86ED6ACB")]
    [Description("The IDWriteFontList interface represents a list of fonts.")]
    [OleAutomation(False)]
    Interface IDWriteFontList Extends IUnknown
        [Description("Gets the font collection that contains the fonts.")]
        Function GetFontCollection() As IDWriteFontCollection
        [PreserveSig]
        [Description("Gets the number of fonts in the font list.")]
        Function GetFontCount() As Long
        [Description("Gets a font given its zero-based index.")]
        Function GetFont(ByVal index As Long) As IDWriteFont
    End Interface

    [InterfaceId("ACD16696-8C14-4F5D-877E-FE3FC1D32737")]
    [Description("The IDWriteFont interface represents a physical font in a font collection.")]
    [OleAutomation(False)]
    Interface IDWriteFont Extends IUnknown
        [Description("Gets the font family to which the specified font belongs.")]
        Function GetFontFamily() As IDWriteFontFamily
        [PreserveSig]
        [Description("Gets the weight of the specified font.")]
        Function GetWeight() As DWRITE_FONT_WEIGHT
        [PreserveSig]
        [Description("Gets the stretch (aka. width) of the specified font.")]
        Function GetStretch() As DWRITE_FONT_STRETCH
        [PreserveSig]
        [Description("Gets the style (aka. slope) of the specified font.")]
        Function GetStyle() As DWRITE_FONT_STYLE
        [PreserveSig]
        [Description("Returns TRUE if the font is a symbol font or FALSE if not.")]
        Function IsSymbolFont() As Long
        [Description("Gets a localized strings collection containing the face names for the font (e.g., Regular or Bold), indexed by locale name.")]
        Function GetFaceNames() As IDWriteLocalizedStrings
        [Description("Gets a localized strings collection containing the specified informational strings, indexed by locale name.")]
        Function GetInformationalStrings(ByVal informationalStringID As DWRITE_INFORMATIONAL_STRING_ID, ByRef informationalStrings As IDWriteLocalizedStrings) As Long
        [PreserveSig]
        [Description("Gets a value that indicates what simulation are applied to the specified font.")]
        Function GetSimulations() As DWRITE_FONT_SIMULATIONS
        [PreserveSig]
        [Description("Gets the metrics for the font.")]
        Sub GetMetrics(ByRef fontMetrics As DWRITE_FONT_METRICS)
        [Description("Determines whether the font supports the specified character.")]
        Function HasCharacter(ByVal unicodeValue As Long) As Long
        [Description("Creates a font file enumerator object that encapsulates a collection of font files.")]
        Function CreateFontFace() As IDWriteFontFace
    End Interface

    [InterfaceId("08256209-099A-4B34-B86D-C22B110E7771")]
    [Description("Represents a collection of strings indexed by locale name.")]
    [OleAutomation(False)]
    Interface IDWriteLocalizedStrings Extends IUnknown
        [PreserveSig]
        [Description("Gets the number of language/string pairs.")]
        Function GetCount() As Long
        [Description("Gets the index of the item with the specified locale name.")]
        Function FindLocaleName(ByVal localeName As LongPtr, ByRef index As Long) As Long
        [Description("Gets the length in characters (not including the null terminator) of the locale name with the specified index.")]
        Function GetLocaleNameLength(ByVal index As Long) As Long
        [Description("Copies the locale name with the specified index to the specified array.")]
        Sub GetLocaleName(ByVal index As Long, ByVal localeName As LongPtr, ByVal SIZE As Long)
        [Description("Gets the length in characters (not including the null terminator) of the string with the specified index.")]
        Function GetStringLength(ByVal index As Long) As Long
        [Description("Copies the string with the specified index to the specified array.")]
        Sub GetString(ByVal index As Long, ByVal stringBuffer As LongPtr, ByVal SIZE As Long)
    End Interface

    [InterfaceId("5F49804D-7024-4D43-BFA9-D25984F53849")]
    [Description("The interface that represents an absolute reference to a font face.")]
    [OleAutomation(False)]
    Interface IDWriteFontFace Extends IUnknown
        [PreserveSig]
        [Description("Obtains the file format type of a font face.")]
        Function GetType() As DWRITE_FONT_FACE_TYPE
        [Description("Obtains the font files representing a font face.")]
        Sub GetFiles(ByRef numberOfFiles As Long, ByRef fontFiles As IDWriteFontFile)
        [PreserveSig]
        [Description("Obtains the zero-based index of the font face in its font file or files. If the font files contain a single face, the return value is zero.")]
        Function GetIndex() As Long
        [PreserveSig]
        [Description("Obtains the algorithmic style simulation flags of a font face.")]
        Function GetSimulations() As DWRITE_FONT_SIMULATIONS
        [PreserveSig]
        [Description("Determines whether the font is a symbol font.")]
        Function IsSymbolFont() As BOOL
        [PreserveSig]
        [Description("Obtains design units and common metrics for the font face. These metrics are applicable to all the glyphs within a fontface and are used by applications for layout calculations.")]
        Sub GetMetrics(ByRef fontFaceMetrics As DWRITE_FONT_METRICS)
        [PreserveSig]
        [Description("Obtains the number of glyphs in the font face.")]
        Function GetGlyphCount() As Integer
        [Description("Obtains ideal glyph metrics in font design units. Design glyphs metrics are used for glyph positioning.")]
        Sub GetDesignGlyphMetrics(ByRef glyphIndices As Any, ByVal glyphCount As Long, ByRef glyphMetrics As Any, ByVal isSideways As BOOL)
        [Description("Returns the nominal mapping of UCS4 Unicode code points to glyph indices as defined by the font 'CMAP' table.")]
        Sub GetGlyphIndices(ByRef codePoints As Any, ByVal codePointCount As Long, ByRef glyphIndices As Any)
        [Description("Finds the specified OpenType font table if it exists and returns a pointer to it.")]
        Sub TryGetFontTable(ByVal openTypeTableTag As Long, ByRef tableData As Any, ByRef tableSize As Long, ByRef tableContext As Any, ByRef exists As BOOL)
        [PreserveSig]
        [Description("Releases the table obtained earlier from TryGetFontTable.")]
        Sub ReleaseFontTable(ByRef tableContext As Any)
        [Description("Computes the outline of a run of glyphs by calling back to the outline sink interface.")]
        Sub GetGlyphRunOutline(ByVal emSize As Single, ByRef glyphIndices As Any, ByRef glyphAdvances As Any, ByRef glyphOffsets As Any, ByVal glyphCount As Long, ByVal isSideways As BOOL, ByVal isRightToLeft As BOOL, ByVal geometrySink As ID2D1SimplifiedGeometrySink)
        [Description("Determines the recommended rendering mode for the font given the specified size and rendering parameters.")]
        Function GetRecommendedRenderingMode(ByVal emSize As Single, ByVal pixelsPerDip As Single, ByVal measuringMode As DWRITE_MEASURING_MODE, ByVal renderingParams As IDWriteRenderingParams) As DWRITE_RENDERING_MODE
        [Description("Obtains design units and common metrics for the font face.")]
        Function GetGdiCompatibleMetrics(ByVal emSize As Single, ByVal pixelsPerDip As Single, ByRef transform As DWRITE_MATRIX) As DWRITE_FONT_METRICS
        [Description("Obtains glyph metrics in font design units with the return values compatible with what GDI would produce.")]
        Sub GetGdiCompatibleGlyphMetrics(ByVal emSize As Single, ByVal pixelsPerDip As Single, ByRef transform As DWRITE_MATRIX, ByVal useGdiNatural As BOOL, ByRef glyphIndices As Any, ByVal glyphCount As Long, ByRef glyphMetrics As Any, ByVal isSideways As Long)
    End Interface

    [InterfaceId("2F0DA53A-2ADD-47CD-82EE-D9EC34688E75")]
    [Description("The interface that represents text rendering settings for glyph rasterization and filtering.")]
    [OleAutomation(False)]
    Interface IDWriteRenderingParams Extends IUnknown
        [PreserveSig]
        [Description("Gets the gamma value used for gamma correction. Valid values must be greater than zero and cannot exceed 256.")]
        Function GetGamma() As Single
        [PreserveSig]
        [Description("Gets the amount of contrast enhancement. Valid values are greater than or equal to zero.")]
        Function GetEnhancedContrast() As Single
        [PreserveSig]
        [Description("Gets the ClearType level. Valid values range from 0.0f (no ClearType) to 1.0f (full ClearType).")]
        Function GetClearTypeLevel() As Single
        [PreserveSig]
        [Description("Gets the pixel geometry.")]
        Function GetPixelGeometry() As DWRITE_PIXEL_GEOMETRY
        [PreserveSig]
        [Description("Gets the rendering mode.")]
        Function GetRenderingMode() As DWRITE_RENDERING_MODE
    End Interface

    [InterfaceId("CCA920E4-52F0-492B-BFA8-29C72EE0A468")]
    [Description("The font collection loader interface is used to construct a collection of fonts given a particular type of key.")]
    [OleAutomation(False)]
    Interface IDWriteFontCollectionLoader Extends IUnknown
        [Description("Creates a font file enumerator object that encapsulates a collection of font files.")]
        Sub CreateEnumeratorFromKey(ByVal factory As IDWriteFactory, ByRef collectionKey As Any, ByVal collectionKeySize As Long, ByRef fontFileEnumerator As IDWriteFontFileEnumerator)
    End Interface

    [InterfaceId("72755049-5FF7-435D-8348-4BE97CFA6C7C")]
    [Description("The font file enumerator interface encapsulates a collection of font files. The font system uses this interface to enumerate font files when building a font collection.")]
    [OleAutomation(False)]
    Interface IDWriteFontFileEnumerator Extends IUnknown
        Function MoveNext() As Long
        Function GetCurrentFontFile() As IDWriteFontFile
    End Interface

    [InterfaceId("739D886A-CEF5-47DC-8769-1A8B41BEBBB0")]
    [Description("The interface that represents a reference to a font file.")]
    [OleAutomation(False)]
    Interface IDWriteFontFile Extends IUnknown
        [Description("This method obtains the pointer to the reference key of a font file. The pointer is only valid until the object that refers to it is released.")]
        Function GetReferenceKey(ByRef fontFileReferenceKey As Any) As Long
        [Description("Obtains the file loader associated with a font file object.")]
        Function GetLoader() As IDWriteFontFileLoader
        [Description("Analyzes a file and returns whether it represents a font, and whether the font type is supported by the font system.")]
        Sub Analyze(ByRef isSupportedFontType As BOOL, ByRef fontFileType As DWRITE_FONT_FILE_TYPE, ByRef fontFaceType As DWRITE_FONT_FACE_TYPE, ByRef numberOfFaces As Long)
    End Interface

    [InterfaceId("727CAD4E-D6AF-4C9E-8A08-D695B11CAA49")]
    [Description("Font file loader interface handles loading font file resources of a particular type from a key.")]
    [OleAutomation(False)]
    Interface IDWriteFontFileLoader Extends IUnknown
        [Description("Creates a font file stream object that encapsulates an open file resource.")]
        Function CreateStreamFromKey(ByRef fontFileReferenceKey As Any, ByVal fontFileReferenceKeySize As Long) As IDWriteFontFileStream
    End Interface

    [InterfaceId("6D4865FE-0AB8-4D91-8F62-5DD6BE34A3E0")]
    [Description("The interface for loading font file data.")]
    [OleAutomation(False)]
    Interface IDWriteFontFileStream Extends IUnknown
        [Description("Reads a fragment from a file.")]
        Sub ReadFileFragment(ByRef fragmentStart As Any, ByVal fileOffset As LongLong, ByVal fragmentSize As LongLong, ByRef fragmentContext As Any)
        [PreserveSig]
        [Description("Releases a fragment from a file.")]
        Sub ReleaseFileFragment(ByRef fragmentContext As Any)
        [Description("Obtains the total size of a file.")]
        Function GetFileSize() As LongLong
        [Description("Obtains the last modified time of the file. The last modified time is used by DirectWrite font selection algorithms to determine whether one font resource is more up to date than another one.")]
        Function GetLastWriteTime() As LongLong
    End Interface

    [InterfaceId("9C906818-31D7-4FD3-A151-7C5E225DB55A")]
    [Description("The format of text used for text layout purpose.")]
    [OleAutomation(False)]
    Interface IDWriteTextFormat Extends IUnknown
        [Description("Set alignment option of text relative to layout box's leading and trailing edge.")]
        Sub SetTextAlignment(ByVal textAlignment As DWRITE_TEXT_ALIGNMENT)
        [Description("Set alignment option of paragraph relative to layout box's top and bottom edge.")]
        Sub SetParagraphAlignment(ByVal paragraphAlignment As DWRITE_PARAGRAPH_ALIGNMENT)
        [Description("Set word wrapping option.")]
        Sub SetWordWrapping(ByVal wordWrapping As DWRITE_WORD_WRAPPING)
        [Description("Set paragraph reading direction.")]
        Sub SetReadingDirection(ByVal readingDirection As DWRITE_READING_DIRECTION)
        [Description("Set paragraph flow direction.")]
        Sub SetFlowDirection(ByVal flowDirection As DWRITE_FLOW_DIRECTION)
        [Description("Set incremental tab stop position.")]
        Sub SetIncrementalTabStop(ByVal incrementalTabStop As Single)
        [Description("Set trimming options for any trailing text exceeding the layout width or for any far text exceeding the layout height.")]
        Sub SetTrimming(ByRef trimmingOptions As DWRITE_TRIMMING, ByVal trimmingSign As IDWriteInlineObject)
        [Description("Set line spacing.")]
        Sub SetLineSpacing(ByVal lineSpacingMethod As DWRITE_LINE_SPACING_METHOD, ByVal LineSpacing As Single, ByVal baseline As Single)
        [PreserveSig]
        [Description("Get alignment option of text relative to layout box's leading and trailing edge.")]
        Function GetTextAlignment() As DWRITE_TEXT_ALIGNMENT
        [PreserveSig]
        [Description("Get alignment option of paragraph relative to layout box's top and bottom edge.")]
        Function GetParagraphAlignment() As DWRITE_PARAGRAPH_ALIGNMENT
        [PreserveSig]
        [Description("Get word wrapping option.")]
        Function GetWordWrapping() As DWRITE_WORD_WRAPPING
        [PreserveSig]
        [Description("Get paragraph reading direction.")]
        Function GetReadingDirection() As DWRITE_READING_DIRECTION
        [PreserveSig]
        [Description("Get paragraph flow direction.")]
        Function GetFlowDirection() As DWRITE_FLOW_DIRECTION
        [PreserveSig]
        [Description("Get incremental tab stop position.")]
        Function GetIncrementalTabStop() As Single
        [Description("Get trimming options for text overflowing the layout width.")]
        Function GetTrimming(ByRef trimmingOptions As DWRITE_TRIMMING) As IDWriteInlineObject
        [Description("Get line spacing.")]
        Sub GetLineSpacing(ByRef lineSpacingMethod As DWRITE_LINE_SPACING_METHOD, ByRef LineSpacing As Single, ByRef baseline As Single)
        [Description("Get the font collection.")]
        Sub GetFontCollection(ByRef fontCollection As IDWriteFontCollection)
        [PreserveSig]
        [Description("Get the length of the font family name, in characters, not including the terminating NULL character.")]
        Function GetFontFamilyNameLength() As Long
        [Description("Get a copy of the font family name.")]
        Sub GetFontFamilyName(ByVal fontFamilyName As LongPtr, ByVal nameSize As Long)
        [PreserveSig]
        [Description("Get the font weight.")]
        Function GetFontWeight() As DWRITE_FONT_WEIGHT
        [PreserveSig]
        [Description("Get the font style.")]
        Function GetFontStyle() As DWRITE_FONT_STYLE
        [PreserveSig]
        [Description("Get the font stretch.")]
        Function GetFontStretch() As DWRITE_FONT_STRETCH
        [PreserveSig]
        [Description("Get the font em height.")]
        Function GetFontSize() As Single
        [PreserveSig]
        [Description("Get the length of the locale name, in characters, not including the terminating NULL character.")]
        Function GetLocaleNameLength() As Long
        [Description("Get a copy of the locale name.")]
        Sub GetLocaleName(ByVal localeName As LongPtr, ByVal nameSize As Long)
    End Interface

    [InterfaceId("8339FDE3-106F-47AB-8373-1C6295EB10B3")]
    [Description("The IDWriteInlineObject interface wraps an application defined inline graphic, allowing DWrite to query metrics as if it was a glyph inline with the text.")]
    [OleAutomation(False)]
    Interface IDWriteInlineObject Extends IUnknown
        [Description("The application implemented rendering callback (IDWriteTextRenderer::DrawInlineObject) can use this to draw the inline object without needing to cast or query the object type. The text layout does not call this method directly.")]
        Sub Draw(ByVal clientDrawingContext As LongPtr, ByVal renderer As IDWriteTextRenderer, ByVal originX As Single, ByVal originY As Single, ByVal isSideways As BOOL, ByVal isRightToLeft As BOOL, ByVal clientDrawingEffect As IUnknown)
        [Description("TextLayout calls this callback function to get the measurement of the inline object.")]
        Function GetMetrics() As DWRITE_INLINE_OBJECT_METRICS
        [Description("TextLayout calls this callback function to get the visible extents (in DIPs) of the inline object.")]
        Function GetOverhangMetrics() As DWRITE_OVERHANG_METRICS
        [Description("Layout uses this to determine the line breaking behavior of the inline object amidst the text.")]
        Sub GetBreakConditions(ByRef breakConditionBefore As DWRITE_BREAK_CONDITION, ByRef breakConditionAfter As DWRITE_BREAK_CONDITION)
    End Interface

    [InterfaceId("EF8A8135-5CC6-45FE-8825-C5A0724EB819")]
    [Description("The IDWriteTextLayout interface represents a set of application-defined callbacks that perform rendering of text, inline objects, and decorations such as underlines.")]
    [OleAutomation(False)]
    Interface IDWriteTextRenderer Extends IDWritePixelSnapping
        [Description("IDWriteTextLayout::Draw calls this function to instruct the client to render a run of glyphs.")]
        Sub DrawGlyphRun(ByVal clientDrawingContext As LongPtr, ByVal baselineOriginX As Single, ByVal baselineOriginY As Single, ByVal measuringMode As DWRITE_MEASURING_MODE, ByRef glyphRun As DWRITE_GLYPH_RUN, ByRef glyphRunDescription As DWRITE_GLYPH_RUN_DESCRIPTION, ByVal clientDrawingEffect As IUnknown)
        [Description("IDWriteTextLayout::Draw calls this function to instruct the client to draw an underline.")]
        Sub DrawUnderline(ByVal clientDrawingContext As LongPtr, ByVal baselineOriginX As Single, ByVal baselineOriginY As Single, ByRef Underline As DWRITE_UNDERLINE, ByVal clientDrawingEffect As IUnknown)
        [Description("IDWriteTextLayout::Draw calls this function to instruct the client to draw a strikethrough.")]
        Sub DrawStrikethrough(ByVal clientDrawingContext As LongPtr, ByVal baselineOriginX As Single, ByVal baselineOriginY As Single, ByRef StrikeThrough As DWRITE_STRIKETHROUGH, ByVal clientDrawingEffect As IUnknown)
        [Description("IDWriteTextLayout::Draw calls this application callback when it needs to draw an inline object.")]
        Sub DrawInlineObject(ByVal clientDrawingContext As LongPtr, ByVal originX As Single, ByVal originY As Single, ByVal inlineObject As IDWriteInlineObject, ByVal isSideways As BOOL, ByVal isRightToLeft As BOOL, ByVal clientDrawingEffect As IUnknown)
    End Interface

    [InterfaceId("EAF3A2DA-ECF4-4D24-B644-B34F6842024B")]
    [Description("The IDWritePixelSnapping interface defines the pixel snapping properties of a text renderer.")]
    [OleAutomation(False)]
    Interface IDWritePixelSnapping Extends IUnknown
        [Description("Determines whether pixel snapping is disabled. The recommended default is FALSE, unless doing animation that requires subpixel vertical placement.")]
        Function IsPixelSnappingDisabled(ByVal clientDrawingContext As LongPtr) As BOOL
        [Description("Gets the current transform that maps abstract coordinates to DIPs, which may disable pixel snapping upon any rotation or shear.")]
        Function GetCurrentTransform(ByVal clientDrawingContext As LongPtr) As DWRITE_MATRIX
        [Description("Gets the number of physical pixels per DIP. A DIP (device-independent pixel) is 1/96 inch, so the pixelsPerDip value is the number of logical pixels per inch divided by 96 (yieldinga value of 1 for 96 DPI and 1.25 for 120).")]
        Function GetPixelsPerDip(ByVal clientDrawingContext As LongPtr) As Single
    End Interface

    [InterfaceId("55F1112B-1DC2-4B3C-9541-F46894ED85B6")]
    [Description("Font typography setting.")]
    [OleAutomation(False)]
    Interface IDWriteTypography Extends IUnknown
        [Description("Add font feature.")]
        Sub AddFontFeature(ByVal fontFeature As LongLong)
        [PreserveSig]
        [Description("Get the number of font features.")]
        Function GetFontFeatureCount() As Long
        [Description("Get the font feature at the specified index.")]
        Function GetFontFeature(ByVal fontFeatureIndex As Long) As DWRITE_FONT_FEATURE
    End Interface

    [InterfaceId("1EDD9491-9853-4299-898F-6432983B6F3A")]
    [Description("The GDI interop interface provides interoperability with GDI.")]
    [OleAutomation(False)]
    Interface IDWriteGdiInterop Extends IUnknown
        [Description("Creates a font object that matches the properties specified by the LOGFONT structure.")]
        Function CreateFontFromLOGFONT(ByRef logFont As LOGFONTW) As IDWriteFont
        [Description("Initializes a LOGFONT structure based on the GDI-compatible properties of the specified font.")]
        Function ConvertFontToLOGFONT(ByVal Font As IDWriteFont, ByRef logFont As LOGFONTW) As Long
        [Description("Initializes a LOGFONT structure based on the GDI-compatible properties of the specified font.")]
        Sub ConvertFontFaceToLOGFONT(ByVal Font As IDWriteFontFace, ByRef logFont As LOGFONTW)
        [Description("Creates a font face object that corresponds to the currently selected HFONT.")]
        Function CreateFontFaceFromHdc(ByVal hdc As LongPtr) As IDWriteFontFace
        [Description("Creates an object that encapsulates a bitmap and memory DC which can be used for rendering glyphs.")]
        Function CreateBitmapRenderTarget(ByVal hdc As LongPtr, ByVal width As Long, ByVal Height As Long) As IDWriteBitmapRenderTarget
    End Interface

    [InterfaceId("5E5A32A3-8DFF-4773-9FF6-0696EAB77267")]
    [Description("Encapsulates a 32-bit device independent bitmap and device context, which can be used for rendering glyphs.")]
    [OleAutomation(False)]
    Interface IDWriteBitmapRenderTarget Extends IUnknown
        [Description("Draws a run of glyphs to the bitmap.")]
        Sub DrawGlyphRun(ByVal baselineOriginX As Single, ByVal baselineOriginY As Single, ByVal measuringMode As DWRITE_MEASURING_MODE, ByRef glyphRun As DWRITE_GLYPH_RUN, ByVal renderingParams As IDWriteRenderingParams, ByVal textColor As Long, ByRef blackBoxRect As RECT)
        [PreserveSig]
        [Description("Gets a handle to the memory device context.")]
        Function GetMemoryDC() As LongPtr
        [PreserveSig]
        [Description("Gets the number of bitmap pixels per DIP. A DIP (device-independent pixel) is 1/96 inch so this value is the number if pixels per inch divided by 96.")]
        Function GetPixelsPerDip() As Single
        [Description("Sets the number of bitmap pixels per DIP. A DIP (device-independent pixel) is 1/96 inch so this value is the number if pixels per inch divided by 96.")]
        Sub SetPixelsPerDip(ByVal pixelsPerDip As Single)
        [Description("Gets the transform that maps abstract coordinate to DIPs. By default this is the identity transform.")]
        Function GetCurrentTransform() As DWRITE_MATRIX
        [Description("Sets the transform that maps abstract coordinate to DIPs. This does not affect the world transform of the underlying device context.")]
        Sub SetCurrentTransform(ByRef transform As DWRITE_MATRIX)
        [Description("Gets the dimensions of the bitmap.")]
        Function GetSize() As SIZE
        [Description("Resizes the bitmap.")]
        Sub Resize(ByVal width As Long, ByVal Height As Long)
    End Interface

    
    'TODO: textRange should be ByVal DWRITE_TEXT_RANGE
    [InterfaceId("53737037-6D14-410B-9BFE-0B182BB70961")]
    [Description("The IDWriteTextLayout interface represents a block of text after it has been fully analyzed and formatted.")]
    [OleAutomation(False)]
    Interface IDWriteTextLayout Extends IDWriteTextFormat
        [Description("Set layout maximum width")]
        Sub SetMaxWidth(ByVal maxWidth As Single)
        [Description("Set layout maximum height")]
        Sub SetMaxHeight(ByVal maxHeight As Single)
        [Description("Set the font collection.")]
        Sub SetFontCollection(ByVal fontCollection As IDWriteFontCollection, ByVal textRange As LongLong)
        [Description("Set null-terminated font family name.")]
        Sub SetFontFamilyName(ByVal fontFamilyName As LongPtr, ByVal textRange As LongLong)
        [Description("Set font weight.")]
        Sub SetFontWeight(ByVal fontWeight As DWRITE_FONT_WEIGHT, ByVal textRange As LongLong)
        [Description("Set font style.")]
        Sub SetFontStyle(ByVal fontStyle As DWRITE_FONT_STYLE, ByVal textRange As LongLong)
        [Description("Set font stretch.")]
        Sub SetFontStretch(ByVal fontStretch As DWRITE_FONT_STRETCH, ByVal textRange As LongLong)
        [Description("Set font em height.")]
        Sub SetFontSize(ByVal fontSize As Single, ByVal textRange As LongLong)
        [Description("Set underline.")]
        Sub SetUnderline(ByVal hasUnderline As BOOL, ByVal textRange As LongLong)
        [Description("Set strikethrough.")]
        Sub SetStrikethrough(ByVal hasStrikethrough As BOOL, ByVal textRange As LongLong)
        [Description("Set application-defined drawing effect.")]
        Sub SetDrawingEffect(ByVal drawingEffect As IUnknown, ByVal textRange As LongLong)
        [Description("Set inline object.")]
        Sub SetInlineObject(ByVal inlineObject As IDWriteInlineObject, ByVal textRange As LongLong)
        [Description("Set font typography features.")]
        Sub SetTypography(ByVal typography As IDWriteTypography, ByVal textRange As LongLong)
        [Description("Set locale name.")]
        Sub SetLocaleName(ByVal localeName As LongPtr, ByVal textRange As LongLong)
        [PreserveSig]
        [Description("Get layout maximum width.")]
        Function GetMaxWidth() As Single
        [PreserveSig]
        [Description("Get layout maximum height.")]
        Function GetMaxHeight() As Single
        [Description("Get the font collection where the current position is at.")]
        Sub GetFontCollection(ByVal CurrentPosition As Long, ByRef fontCollection As IDWriteFontCollection, ByRef textRange As Any)
        [Description("Get the length of the font family name where the current position is at.")]
        Sub GetFontFamilyNameLength(ByVal CurrentPosition As Long, ByRef nameLength As Long, ByRef textRange As Any)
        [Description("Copy the font family name where the current position is at.")]
        Sub GetFontFamilyName(ByVal CurrentPosition As Long, ByVal fontFamilyName As LongPtr, ByVal nameSize As Long, ByRef textRange As Any)
        [Description("Get the font weight where the current position is at.")]
        Sub GetFontWeight(ByVal CurrentPosition As Long, ByRef fontWeight As DWRITE_FONT_WEIGHT, ByRef textRange As Any)
        [Description("Get the font style where the current position is at.")]
        Sub GetFontStyle(ByVal CurrentPosition As Long, ByRef fontStyle As DWRITE_FONT_STYLE, ByRef textRange As Any)
        [Description("Get the font stretch where the current position is at.")]
        Sub GetFontStretch(ByVal CurrentPosition As Long, ByRef fontStretch As DWRITE_FONT_STRETCH, ByRef textRange As Any)
        [Description("Get the font em height where the current position is at.")]
        Sub GetFontSize(ByVal CurrentPosition As Long, ByRef fontSize As Single, ByRef textRange As Any)
        [Description("Get the underline presence where the current position is at.")]
        Sub GetUnderline(ByVal CurrentPosition As Long, ByRef hasUnderline As BOOL, ByRef textRange As Any)
        [Description("Get the strikethrough presence where the current position is at.")]
        Sub GetStrikethrough(ByVal CurrentPosition As Long, ByRef hasStrikethrough As BOOL, ByRef textRange As Any)
        [Description("Get the application-defined drawing effect where the current position is at.")]
        Sub GetDrawingEffect(ByVal CurrentPosition As Long, ByRef drawingEffect As IUnknown, ByRef textRange As Any)
        [Description("Get the inline object at the given position.")]
        Sub GetInlineObject(ByVal CurrentPosition As Long, ByRef inlineObject As IDWriteInlineObject, ByRef textRange As Any)
        [Description("Get the typography setting where the current position is at.")]
        Sub GetTypography(ByVal CurrentPosition As Long, ByRef typography As IDWriteTypography, ByRef textRange As Any)
        [Description("Get the length of the locale name where the current position is at.")]
        Sub GetLocaleNameLength(ByVal CurrentPosition As Long, ByRef nameLength As Long, ByRef textRange As Any)
        [Description("Get the locale name where the current position is at.")]
        Sub GetLocaleName(ByVal CurrentPosition As Long, ByVal localeName As LongPtr, ByVal nameSize As Long, ByRef textRange As Any)
        [Description("Initiate drawing of the text.")]
        Sub Draw(ByRef clientDrawingContext As Any, ByVal renderer As IDWriteTextRenderer, ByVal originX As Single, ByVal originY As Single)
        [Description("GetLineMetrics returns properties of each line.")]
        Function GetLineMetrics(ByRef lineMetrics As DWRITE_LINE_METRICS, ByVal maxLineCount As Long) As Long
        [Description("GetMetrics retrieves overall metrics for the formatted string.")]
        Function GetMetrics() As DWRITE_TEXT_METRICS
        [Description("GetOverhangMetrics returns the overhangs (in DIPs) of the layout and all objects contained in it, including text glyphs and inline objects.")]
        Function GetOverhangMetrics() As DWRITE_OVERHANG_METRICS
        [Description("Retrieve logical properties and measurement of each cluster.")]
        Function GetClusterMetrics(ByRef clusterMetrics As DWRITE_CLUSTER_METRICS, ByVal maxClusterCount As Long) As Long
        [Description("Determines the minimum possible width the layout can be set to without emergency breaking between the characters of whole words.")]
        Function DetermineMinWidth() As Single
        [Description("Given a coordinate (in DIPs) relative to the top-left of the layout box, this returns the corresponding hit-test metrics of the text string where the hit-test has occurred.")]
        Sub HitTestPoint(ByVal pointX As Single, ByVal pointY As Single, ByRef isTrailingHit As BOOL, ByRef isInside As BOOL, ByRef hitTestMetrics As DWRITE_HIT_TEST_METRICS)
        [Description("Given a text position and whether the caret is on the leading or trailing edge of that position, this returns the corresponding coordinate (in DIPs) relative to the top-left of the layout box.")]
        Sub HitTestTextPosition(ByVal textPosition As Long, ByVal isTrailingHit As BOOL, ByRef pointX As Single, ByRef pointY As Single, ByRef hitTestMetrics As DWRITE_HIT_TEST_METRICS)
        [Description("The application calls this function to get a set of hit-test metrics corresponding to a range of text positions.")]
        Sub HitTestTextRange(ByVal textPosition As Long, ByVal textLength As Long, ByVal originX As Single, ByVal originY As Single, ByRef hitTestMetrics As DWRITE_HIT_TEST_METRICS, ByVal maxHitTestMetricsCount As Long, ByRef actualHitTestMetricsCount As Long)
    End Interface

    [InterfaceId("B7E6163E-7F46-43B4-84B3-E4E6249C365D")]
    [Description("Analyzes various text properties for complex script processing.")]
    [OleAutomation(False)]
    Interface IDWriteTextAnalyzer Extends IUnknown
        [Description("Analyzes a text range for script boundaries, reading text attributes from the source and reporting the Unicode script ID to the sink callback SetScript.")]
        Sub AnalyzeScript(ByVal analysisSource As IDWriteTextAnalysisSource, ByVal textPosition As Long, ByVal textLength As Long, ByVal analysisSink As IDWriteTextAnalysisSink)
        [Description("Analyzes a text range for script directionality, reading attributes from the source and reporting levels to the sink callback SetBidiLevel.")]
        Sub AnalyzeBidi(ByVal analysisSource As IDWriteTextAnalysisSource, ByVal textPosition As Long, ByVal textLength As Long, ByVal analysisSink As IDWriteTextAnalysisSink)
        [Description("Analyzes a text range for spans where number substitution is applicable, reading attributes from the source and reporting substitutable ranges to the sink callback SetNumberSubstitution.")]
        Sub AnalyzeNumberSubstitution(ByVal analysisSource As IDWriteTextAnalysisSource, ByVal textPosition As Long, ByVal textLength As Long, ByVal analysisSink As IDWriteTextAnalysisSink)
        [Description("Analyzes a text range for potential breakpoint opportunities, reading attributes from the source and reporting breakpoint opportunities to the sink callback SetLineBreakpoints.")]
        Sub AnalyzeLineBreakpoints(ByVal analysisSource As IDWriteTextAnalysisSource, ByVal textPosition As Long, ByVal textLength As Long, ByVal analysisSink As IDWriteTextAnalysisSink)
        [Description("Parses the input text string and maps it to the set of glyphs and associated glyph data according to the font and the writing system's rendering rules.")]
        Sub GetGlyphs(ByVal textString As LongPtr, ByVal textLength As Long, ByVal fontFace As IDWriteFontFace, ByVal isSideways As BOOL, ByVal isRightToLeft As BOOL, ByRef scriptAnalysis As DWRITE_SCRIPT_ANALYSIS, ByVal localeName As LongPtr, ByVal numberSubstitution As IDWriteNumberSubstitution, ByRef features As Any, ByRef featureRangeLengths As Any, ByVal featureRanges As Long, ByVal maxGlyphCount As Long, ByRef clusterMap As Integer, ByRef textProps As DWRITE_SHAPING_TEXT_PROPERTIES, ByRef glyphIndices As Integer, ByRef glyphProps As DWRITE_SHAPING_GLYPH_PROPERTIES, ByRef actualGlyphCount As Long)
        [Description("Place glyphs output from the GetGlyphs method according to the font and the writing system's rendering rules.")]
        Sub GetGlyphPlacements(ByVal textString As LongPtr, ByRef clusterMap As Integer, ByRef textProps As DWRITE_SHAPING_TEXT_PROPERTIES, ByVal textLength As Long, ByRef glyphIndices As Integer, ByRef glyphProps As DWRITE_SHAPING_GLYPH_PROPERTIES, ByVal glyphCount As Long, ByVal fontFace As IDWriteFontFace, ByVal fontEmSize As Single, ByVal isSideways As BOOL, ByVal isRightToLeft As BOOL, ByRef scriptAnalysis As DWRITE_SCRIPT_ANALYSIS, ByVal localeName As LongPtr, ByRef features As Any, ByRef featureRangeLengths As Any, ByVal featureRanges As Long, ByRef glyphAdvances As Single, ByRef glyphOffsets As DWRITE_GLYPH_OFFSET)
        [Description("Place glyphs output from the GetGlyphs method according to the font and the writing system's rendering rules.")]
        Sub GetGdiCompatibleGlyphPlacements(ByVal textString As LongPtr, ByRef clusterMap As Integer, ByRef textProps As DWRITE_SHAPING_TEXT_PROPERTIES, ByVal textLength As Long, ByRef glyphIndices As Integer, ByRef glyphProps As DWRITE_SHAPING_GLYPH_PROPERTIES, ByVal glyphCount As Long, ByVal fontFace As IDWriteFontFace, ByVal fontEmSize As Single, ByVal pixelsPerDip As Single, ByRef transform As DWRITE_MATRIX, ByVal useGdiNatural As BOOL, ByVal isSideways As BOOL, ByVal isRightToLeft As BOOL, ByRef scriptAnalysis As DWRITE_SCRIPT_ANALYSIS, ByVal localeName As LongPtr, ByRef features As Any, ByRef featureRangeLengths As Any, ByVal featureRanges As Long, ByRef glyphAdvances As Single, ByRef glyphOffsets As DWRITE_GLYPH_OFFSET)
    End Interface

    [InterfaceId("688E1A58-5094-47C8-ADC8-FBCEA60AE92B")]
    [Description("The interface implemented by the text analyzer's client to provide text to the analyzer.")]
    [OleAutomation(False)]
    Interface IDWriteTextAnalysisSource Extends IUnknown
        Sub GetTextAtPosition(ByVal textPosition As Long, ByRef textString As LongPtr, ByRef textLength As Long)
        Sub GetTextBeforePosition(ByVal textPosition As Long, ByRef textString As LongPtr, ByRef textLength As Long)
        [PreserveSig]
        Function GetParagraphReadingDirection() As DWRITE_READING_DIRECTION
        Sub GetLocaleName(ByVal textPosition As Long, ByRef textLength As Long, ByRef localeName As LongPtr)
        Sub GetNumberSubstitution(ByVal textPosition As Long, ByRef textLength As Long, ByRef numberSubstitution As IDWriteNumberSubstitution)
    End Interface

    [InterfaceId("14885CC9-BAB0-4F90-B6ED-5C366A2CD03D")]
    [Description("Holds the appropriate digits and numeric punctuation for a given locale.")]
    [OleAutomation(False)]
    Interface IDWriteNumberSubstitution Extends IUnknown
    End Interface

    [InterfaceId("5810CD44-0CA0-4701-B3FA-BEC5182AE4F6")]
    [Description("The interface implemented by the text analyzer's client to receive the output of a given text analysis.")]
    [OleAutomation(False)]
    Interface IDWriteTextAnalysisSink Extends IUnknown
        [Description("Report script analysis for the text range.")]
        Sub SetScriptAnalysis(ByVal textPosition As Long, ByVal textLength As Long, ByRef scriptAnalysis As Long)
        [Description("Repport line-break opportunities for each character, starting from the specified position.")]
        Sub SetLineBreakpoints(ByVal textPosition As Long, ByVal textLength As Long, ByRef lineBreakpoints As Long)
        [Description("Set bidirectional level on the range, called once per each level run change (either explicit or resolved implicit).")]
        Sub SetBidiLevel(ByVal textPosition As Long, ByVal textLength As Long, ByVal explicitLevel As Byte, ByVal resolvedLevel As Byte)
        [Description("Set number substitution on the range.")]
        Sub SetNumberSubstitution(ByVal textPosition As Long, ByVal textLength As Long, ByVal numberSubstitution As IDWriteNumberSubstitution)
    End Interface

    [InterfaceId("7D97DBF7-E085-42D4-81E3-6A883BDED118")]
    [Description("Interface that encapsulates information used to render a glyph run.")]
    [OleAutomation(False)]
    Interface IDWriteGlyphRunAnalysis Extends IUnknown
        [Description("Gets the bounding rectangle of the physical pixels affected by the glyph run.")]
        Function GetAlphaTextureBounds(ByVal textureType As DWRITE_TEXTURE_TYPE) As RECT
        [Description("Creates an alpha texture of the specified type.")]
        Sub CreateAlphaTexture(ByVal textureType As DWRITE_TEXTURE_TYPE, ByRef textureBounds As RECT, ByRef alphaValues As Any, ByVal BufferSize As Long)
        [Description("Gets properties required for ClearType blending.")]
        Sub GetAlphaBlendParams(ByVal renderingParams As IDWriteRenderingParams, ByRef blendGamma As Single, ByRef blendEnhancedContrast As Single, ByRef blendClearTypeLevel As Single)
    End Interface

    [InterfaceId("B2D9F3EC-C9FE-4A11-A2EC-D86208F7C0A2")]
    [Description("A built-in implementation of IDWriteFontFileLoader interface that operates on local font files and exposes local font file information from the font file reference key.")]
    [OleAutomation(False)]
    Interface IDWriteLocalFontFileLoader Extends IDWriteFontFileLoader
        [Description("Obtains the length of the absolute file path from the font file reference key.")]
        Sub GetFilePathLengthFromKey(ByRef fontFileReferenceKey As Any, ByVal fontFileReferenceKeySize As Long, ByRef filePathLength As Long)
        [Description("Obtains the absolute font file path from the font file reference key.")]
        Sub GetFilePathFromKey(ByRef fontFileReferenceKey As Any, ByVal fontFileReferenceKeySize As Long, ByVal filePath As LongPtr, ByVal filePathSize As Long)
        [Description("Obtains the last write time of the file from the font file reference key.")]
        Sub GetLastWriteTimeFromKey(ByRef fontFileReferenceKey As Any, ByVal fontFileReferenceKeySize As Long, ByRef LastWriteTime As FILETIME)
    End Interface

    
    
    /* **************************************************
    
        dwrite_1.h
    
      ************************************************** */
      
      [InterfaceId("30572F99-DAC6-41DB-A16E-0486307E606A")]
      [OleAutomation(False)]
      Interface IDWriteFactory1 Extends IDWriteFactory
          Sub GetEudcFontCollection(ByRef fontCollection As IDWriteFontCollection, ByVal checkForUpdates As BOOL)
          Sub CreateCustomRenderingParams(ByVal Gamma As Single, ByVal enhancedContrast As Single, ByVal enhancedContrastGrayscale As Single, ByVal clearTypeLevel As Single, ByVal pixelGeometry As DWRITE_PIXEL_GEOMETRY, ByVal renderingMode As DWRITE_RENDERING_MODE, ByRef renderingParams As IDWriteRenderingParams1)
      End Interface

      [InterfaceId("A71EFDB4-9FDB-4838-AD90-CFC3BE8C3DAF")]
      [OleAutomation(False)]
      Interface IDWriteFontFace1 Extends IDWriteFontFace
          [PreserveSig]
          Sub GetMetrics(ByRef fontMetrics As DWRITE_FONT_METRICS1)
          Sub GetGdiCompatibleMetrics1(ByVal emSize As Single, ByVal pixelsPerDip As Single, ByRef transform As DWRITE_MATRIX, ByRef fontMetrics As DWRITE_FONT_METRICS1)
          [PreserveSig]
          Sub GetCaretMetrics(ByRef caretMetrics As DWRITE_CARET_METRICS)
          Sub GetUnicodeRanges(ByVal maxRangeCount As Long, ByRef unicodeRanges As DWRITE_UNICODE_RANGE, ByRef actualRangeCount As Long)
          [PreserveSig]
          Function IsMonospacedFont() As BOOL
          Sub GetDesignGlyphAdvances(ByVal glyphCount As Long, ByRef glyphIndices As Integer, ByRef glyphAdvances As Long, ByVal isSideways As BOOL)
          Sub GetGdiCompatibleGlyphAdvances(ByVal emSize As Single, ByVal pixelsPerDip As Single, ByRef transform As DWRITE_MATRIX, ByVal useGdiNatural As BOOL, ByVal isSideways As BOOL, ByVal glyphCount As Long, ByRef glyphIndices As Integer, ByRef glyphAdvances As Long)
          Sub GetKerningPairAdjustments(ByVal glyphCount As Long, ByRef glyphIndices As Integer, ByRef glyphAdvanceAdjustments As Long)
          [PreserveSig]
          Function HasKerningPairs() As BOOL
          Sub GetRecommendedRenderingMode(ByVal fontEmSize As Single, ByVal DpiX As Single, ByVal DpiY As Single, ByRef transform As DWRITE_MATRIX, ByVal isSideways As BOOL, ByVal outlineThreshold As DWRITE_OUTLINE_THRESHOLD, ByVal measuringMode As DWRITE_MEASURING_MODE, ByRef renderingMode As DWRITE_RENDERING_MODE)
          Sub GetVerticalGlyphVariants(ByVal glyphCount As Long, ByRef nominalGlyphIndices As Integer, ByRef verticalGlyphIndices As Integer)
          [PreserveSig]
          Function HasVerticalGlyphVariants() As BOOL
      End Interface

      [InterfaceId("ACD16696-8C14-4F5D-877E-FE3FC1D32738")]
      [OleAutomation(False)]
      Interface IDWriteFont1 Extends IDWriteFont
          [PreserveSig]
          Sub GetMetrics(ByRef fontMetrics As DWRITE_FONT_METRICS1)
          [PreserveSig]
          Sub GetPanose(ByRef panose As DWRITE_PANOSE)
          Sub GetUnicodeRanges(ByVal maxRangeCount As Long, ByRef unicodeRanges As DWRITE_UNICODE_RANGE, ByRef actualRangeCount As Long)
          [PreserveSig]
          Function IsMonospacedFont() As BOOL
      End Interface

      [InterfaceId("94413CF4-A6FC-4248-8B50-6674348FCAD3")]
      [OleAutomation(False)]
      Interface IDWriteRenderingParams1 Extends IDWriteRenderingParams
          [PreserveSig]
          Function GetGrayscaleEnhancedContrast() As Single
      End Interface

      [InterfaceId("80DAD800-E21F-4E83-96CE-BFCCE500DB7C")]
      [OleAutomation(False)]
      Interface IDWriteTextAnalyzer1 Extends IDWriteTextAnalyzer
          Sub ApplyCharacterSpacing(ByVal leadingSpacing As Single, ByVal trailingSpacing As Single, ByVal minimumAdvanceWidth As Single, ByVal textLength As Long, ByVal glyphCount As Long, ByRef clusterMap As Integer, ByRef glyphAdvances As Single, ByRef glyphOffsets As DWRITE_GLYPH_OFFSET, ByRef glyphProperties As DWRITE_SHAPING_GLYPH_PROPERTIES, ByRef modifiedGlyphAdvances As Single, ByRef modifiedGlyphOffsets As DWRITE_GLYPH_OFFSET)
          Sub GetBaseline(ByVal fontFace As IDWriteFontFace, ByVal baseline As DWRITE_BASELINE, ByVal isVertical As BOOL, ByVal isSimulationAllowed As BOOL, ByVal scriptAnalysis As LongLong, ByVal localeName As LongPtr, ByRef baselineCoordinate As Long, ByRef exists As BOOL)
          Sub AnalyzeVerticalGlyphOrientation(ByVal analysisSource As IDWriteTextAnalysisSource1, ByVal textPosition As Long, ByVal textLength As Long, ByVal analysisSink As IDWriteTextAnalysisSink1)
          Sub GetGlyphOrientationTransform(ByVal glyphOrientationAngle As DWRITE_GLYPH_ORIENTATION_ANGLE, ByVal isSideways As BOOL, ByRef transform As DWRITE_MATRIX)
          Sub GetScriptProperties(ByVal scriptAnalysis As LongLong, ByRef scriptProperties As DWRITE_SCRIPT_PROPERTIES)
          Sub GetTextComplexity(ByVal textString As LongPtr, ByVal textLength As Long, ByVal fontFace As IDWriteFontFace, ByRef isTextSimple As BOOL, ByRef textLengthRead As Long, ByRef glyphIndices As Integer)
          Sub GetJustificationOpportunities(ByVal fontFace As IDWriteFontFace, ByVal fontEmSize As Single, ByVal scriptAnalysis As LongLong, ByVal textLength As Long, ByVal glyphCount As Long, ByVal textString As LongPtr, ByRef clusterMap As Integer, ByRef glyphProperties As DWRITE_SHAPING_GLYPH_PROPERTIES, ByRef justificationOpportunities As DWRITE_JUSTIFICATION_OPPORTUNITY)
          Sub JustifyGlyphAdvances(ByVal lineWidth As Single, ByVal glyphCount As Long, ByRef justificationOpportunities As DWRITE_JUSTIFICATION_OPPORTUNITY, ByRef glyphAdvances As Single, ByRef glyphOffsets As DWRITE_GLYPH_OFFSET, ByRef justifiedGlyphAdvances As Single, ByRef justifiedGlyphOffsets As DWRITE_GLYPH_OFFSET)
          Sub GetJustifiedGlyphs(ByVal fontFace As IDWriteFontFace, ByVal fontEmSize As Single, ByVal scriptAnalysis As LongLong, ByVal textLength As Long, ByVal glyphCount As Long, ByVal maxGlyphCount As Long, ByRef clusterMap As Integer, ByRef glyphIndices As Integer, ByRef glyphAdvances As Single, ByRef justifiedGlyphAdvances As Single, ByRef justifiedGlyphOffsets As DWRITE_GLYPH_OFFSET, ByRef glyphProperties As DWRITE_SHAPING_GLYPH_PROPERTIES, ByRef actualGlyphCount As Long, ByRef modifiedClusterMap As Any, ByRef modifiedGlyphIndices As Integer, ByRef modifiedGlyphAdvances As Single, ByRef modifiedGlyphOffsets As DWRITE_GLYPH_OFFSET)
      End Interface

      [InterfaceId("639CFAD8-0FB4-4B21-A58A-067920120009")]
      [OleAutomation(False)]
      Interface IDWriteTextAnalysisSource1 Extends IDWriteTextAnalysisSource
          Sub GetVerticalGlyphOrientation(ByVal textPosition As Long, ByRef textLength As Long, ByRef glyphOrientation As DWRITE_VERTICAL_GLYPH_ORIENTATION, ByRef bidiLevel As Byte)
      End Interface

      [InterfaceId("B0D941A0-85E7-4D8B-9FD3-5CED9934482A")]
      [OleAutomation(False)]
      Interface IDWriteTextAnalysisSink1 Extends IDWriteTextAnalysisSink
          Sub SetGlyphOrientation(ByVal textPosition As Long, ByVal textLength As Long, ByVal glyphOrientationAngle As DWRITE_GLYPH_ORIENTATION_ANGLE, ByVal adjustedBidiLevel As Byte, ByVal isSideways As BOOL, ByVal isRightToLeft As BOOL)
      End Interface

      [InterfaceId("9064D822-80A7-465C-A986-DF65F78B8FEB")]
      [OleAutomation(False)]
      Interface IDWriteTextLayout1 Extends IDWriteTextLayout
          Sub SetPairKerning(ByVal isPairKerningEnabled As BOOL, ByVal textRange As LongLong)
          Sub GetPairKerning(ByVal CurrentPosition As Long, ByRef isPairKerningEnabled As BOOL, ByRef TextRange As DWRITE_TEXT_RANGE)
          Sub SetCharacterSpacing(ByVal leadingSpacing As Single, ByVal trailingSpacing As Single, ByVal minimumAdvanceWidth As Single, ByVal textRange As LongLong)
          Sub GetCharacterSpacing(ByVal CurrentPosition As Long, ByRef leadingSpacing As Single, ByRef trailingSpacing As Single, ByRef minimumAdvanceWidth As Single, ByRef TextRange As DWRITE_TEXT_RANGE)
      End Interface



      [InterfaceId("791E8298-3EF3-4230-9880-C9BDECC42064")]
      [OleAutomation(False)]
      Interface IDWriteBitmapRenderTarget1 Extends IDWriteBitmapRenderTarget
          [PreserveSig]
          Function GetTextAntialiasMode() As DWRITE_TEXT_ANTIALIAS_MODE
          Sub SetTextAntialiasMode(ByVal antialiasMode As DWRITE_TEXT_ANTIALIAS_MODE)
      End Interface
    
      [InterfaceId("D3E0E934-22A0-427E-AAE4-7D9574B59DB1")]
      [OleAutomation(False)]
      Interface IDWriteTextRenderer1 Extends IDWriteTextRenderer
          Sub DrawGlyphRun(ByRef clientDrawingContext As Any, ByVal baselineOriginX As Single, ByVal baselineOriginY As Single, ByVal orientationAngle As DWRITE_GLYPH_ORIENTATION_ANGLE, ByVal measuringMode As DWRITE_MEASURING_MODE, ByRef glyphRun As DWRITE_GLYPH_RUN, ByRef glyphRunDescription As DWRITE_GLYPH_RUN_DESCRIPTION, ByVal clientDrawingEffect As IUnknown)
          Sub DrawUnderline(ByRef clientDrawingContext As Any, ByVal baselineOriginX As Single, ByVal baselineOriginY As Single, ByVal orientationAngle As DWRITE_GLYPH_ORIENTATION_ANGLE, ByRef Underline As DWRITE_UNDERLINE, ByVal clientDrawingEffect As IUnknown)
          Sub DrawStrikethrough(ByRef clientDrawingContext As Any, ByVal baselineOriginX As Single, ByVal baselineOriginY As Single, ByVal orientationAngle As DWRITE_GLYPH_ORIENTATION_ANGLE, ByRef StrikeThrough As DWRITE_STRIKETHROUGH, ByVal clientDrawingEffect As IUnknown)
          Sub DrawInlineObject(ByRef clientDrawingContext As Any, ByVal originX As Single, ByVal originY As Single, ByVal orientationAngle As DWRITE_GLYPH_ORIENTATION_ANGLE, ByVal inlineObject As IDWriteInlineObject, ByVal isSideways As BOOL, ByVal isRightToLeft As BOOL, ByVal clientDrawingEffect As IUnknown)
      End Interface

      [InterfaceId("5F174B49-0D8B-4CFB-8BCA-F1CCE9D06C67")]
      [OleAutomation(False)]
      Interface IDWriteTextFormat1 Extends IDWriteTextFormat
          Sub SetVerticalGlyphOrientation(ByVal glyphOrientation As DWRITE_VERTICAL_GLYPH_ORIENTATION)
          [PreserveSig]
          Function GetVerticalGlyphOrientation() As DWRITE_VERTICAL_GLYPH_ORIENTATION
          Sub SetLastLineWrapping(ByVal isLastLineWrappingEnabled As BOOL)
          [PreserveSig]
          Function GetLastLineWrapping() As BOOL
          Sub SetOpticalAlignment(ByVal opticalAlignment As DWRITE_OPTICAL_ALIGNMENT)
          [PreserveSig]
          Function GetOpticalAlignment() As DWRITE_OPTICAL_ALIGNMENT
          Sub SetFontFallback(ByVal fontFallback As IDWriteFontFallback)
          Sub GetFontFallback(ByRef fontFallback As IDWriteFontFallback)
      End Interface

      [InterfaceId("1093C18F-8D5E-43F0-B064-0917311B525E")]
      [OleAutomation(False)]
      Interface IDWriteTextLayout2 Extends IDWriteTextLayout1
          Sub GetMetrics(ByRef textMetrics As DWRITE_TEXT_METRICS1)
          Sub SetVerticalGlyphOrientation(ByVal glyphOrientation As DWRITE_VERTICAL_GLYPH_ORIENTATION)
          [PreserveSig]
          Function GetVerticalGlyphOrientation() As DWRITE_VERTICAL_GLYPH_ORIENTATION
          Sub SetLastLineWrapping(ByVal isLastLineWrappingEnabled As BOOL)
          [PreserveSig]
          Function GetLastLineWrapping() As BOOL
          Sub SetOpticalAlignment(ByVal opticalAlignment As DWRITE_OPTICAL_ALIGNMENT)
          [PreserveSig]
          Function GetOpticalAlignment() As DWRITE_OPTICAL_ALIGNMENT
          Sub SetFontFallback(ByVal fontFallback As IDWriteFontFallback)
          Sub GetFontFallback(ByRef fontFallback As IDWriteFontFallback)
      End Interface

      [InterfaceId("553A9FF3-5693-4DF7-B52B-74806F7F2EB9")]
      [OleAutomation(False)]
      Interface IDWriteTextAnalyzer2 Extends IDWriteTextAnalyzer1
          Sub GetGlyphOrientationTransform(ByVal glyphOrientationAngle As DWRITE_GLYPH_ORIENTATION_ANGLE, ByVal isSideways As BOOL, ByVal originX As Single, ByVal originY As Single, ByRef transform As DWRITE_MATRIX)
          Sub GetTypographicFeatures(ByVal fontFace As IDWriteFontFace, ByVal scriptAnalysis As LongLong, ByVal localeName As LongPtr, ByVal maxTagCount As Long, ByRef actualTagCount As Long, ByRef tags As DWRITE_FONT_FEATURE_TAG)
          Sub CheckTypographicFeature(ByVal fontFace As IDWriteFontFace, ByVal scriptAnalysis As LongLong, ByVal localeName As LongPtr, ByVal featureTag As DWRITE_FONT_FEATURE_TAG, ByVal glyphCount As Long, ByRef glyphIndices As Integer, ByRef featureApplies As Byte)
      End Interface

      [InterfaceId("EFA008F9-F7A1-48BF-B05C-F224713CC0FF")]
      [OleAutomation(False)]
      Interface IDWriteFontFallback Extends stdole.IUnknown
          Sub MapCharacters(ByVal analysisSource As IDWriteTextAnalysisSource, ByVal textPosition As Long, ByVal textLength As Long, ByVal baseFontCollection As IDWriteFontCollection, ByVal baseFamilyName As LongPtr, ByVal baseWeight As DWRITE_FONT_WEIGHT, ByVal baseStyle As DWRITE_FONT_STYLE, ByVal baseStretch As DWRITE_FONT_STRETCH, ByRef mappedLength As Long, ByRef mappedFont As IDWriteFont, ByRef scale As Single)
      End Interface

      [InterfaceId("FD882D06-8ABA-4FB8-B849-8BE8B73E14DE")]
      [OleAutomation(False)]
      Interface IDWriteFontFallbackBuilder Extends stdole.IUnknown
          Sub AddMapping(ByRef ranges As DWRITE_UNICODE_RANGE, ByVal rangesCount As Long, ByRef targetFamilyNames As LongPtr, ByVal targetFamilyNamesCount As Long, ByVal fontCollection As IDWriteFontCollection, ByVal localeName As LongPtr, ByVal baseFamilyName As LongPtr, Optional ByVal scale As Single = 1)
          Sub AddMappings(ByVal fontFallback As IDWriteFontFallback)
          Sub CreateFontFallback(ByRef fontFallback As IDWriteFontFallback)
      End Interface
      
      [InterfaceId("D8B768FF-64BC-4E66-982B-EC8E87F693F7")]
      [OleAutomation(False)]
      Interface IDWriteFontFace2 Extends IDWriteFontFace1
          [PreserveSig]
          Function IsColorFont() As BOOL
          [PreserveSig]
          Function GetColorPaletteCount() As Long
          [PreserveSig]
          Function GetPaletteEntryCount() As Long
          Sub GetPaletteEntries(ByVal colorPaletteIndex As Long, ByVal firstEntryIndex As Long, ByVal entryCount As Long, ByRef PaletteEntries As D3DCOLORVALUE)
          Sub GetRecommendedRenderingMode(ByVal fontEmSize As Single, ByVal DpiX As Single, ByVal DpiY As Single, ByRef transform As DWRITE_MATRIX, ByVal isSideways As BOOL, ByVal outlineThreshold As DWRITE_OUTLINE_THRESHOLD, ByVal measuringMode As DWRITE_MEASURING_MODE, ByVal renderingParams As IDWriteRenderingParams, ByRef renderingMode As DWRITE_RENDERING_MODE, ByRef gridFitMode As DWRITE_GRID_FIT_MODE)
      End Interface
      
      [InterfaceId("D31FBE17-F157-41A2-8D24-CB779E0560E8")]
      [OleAutomation(False)]
      Interface IDWriteColorGlyphRunEnumerator Extends stdole.IUnknown
          Sub MoveNext(ByRef hasRun As BOOL)
          Sub GetCurrentRun(ByRef colorGlyphRun As LongPtr)
      End Interface

      [InterfaceId("F9D711C3-9777-40AE-87E8-3E5AF9BF0948")]
      [OleAutomation(False)]
      Interface IDWriteRenderingParams2 Extends IDWriteRenderingParams1
          [PreserveSig]
          Function GetGridFitMode() As DWRITE_GRID_FIT_MODE
      End Interface

      [InterfaceId("0439FC60-CA44-4994-8DEE-3A9AF7B732EC")]
      [OleAutomation(False)]
      Interface IDWriteFactory2 Extends IDWriteFactory1
          Sub GetSystemFontFallback(ByRef fontFallback As IDWriteFontFallback)
          Sub CreateFontFallbackBuilder(ByRef fontFallbackBuilder As IDWriteFontFallbackBuilder)
          Sub TranslateColorGlyphRun(ByVal baselineOriginX As Single, ByVal baselineOriginY As Single, ByRef glyphRun As DWRITE_GLYPH_RUN, ByRef glyphRunDescription As DWRITE_GLYPH_RUN_DESCRIPTION, ByVal measuringMode As DWRITE_MEASURING_MODE, ByRef worldToDeviceTransform As DWRITE_MATRIX, ByVal colorPaletteIndex As Long, ByRef colorLayers As IDWriteColorGlyphRunEnumerator)
          Sub CreateCustomRenderingParams(ByVal Gamma As Single, ByVal enhancedContrast As Single, ByVal grayscaleEnhancedContrast As Single, ByVal clearTypeLevel As Single, ByVal pixelGeometry As DWRITE_PIXEL_GEOMETRY, ByVal renderingMode As DWRITE_RENDERING_MODE, ByVal gridFitMode As DWRITE_GRID_FIT_MODE, ByRef renderingParams As IDWriteRenderingParams2)
          Sub CreateGlyphRunAnalysis2(ByRef glyphRun As DWRITE_GLYPH_RUN, ByRef transform As DWRITE_MATRIX, ByVal renderingMode As DWRITE_RENDERING_MODE, ByVal measuringMode As DWRITE_MEASURING_MODE, ByVal gridFitMode As DWRITE_GRID_FIT_MODE, ByVal antialiasMode As DWRITE_TEXT_ANTIALIAS_MODE, ByVal baselineOriginX As Single, ByVal baselineOriginY As Single, ByRef glyphRunAnalysis As IDWriteGlyphRunAnalysis)
      End Interface
      
      [InterfaceId("B7924BAA-391B-412A-8C5C-E44CC2D867DC")]
       [OleAutomation(False)]
       Interface IDWriteRenderingParams3 Extends IDWriteRenderingParams2
           [PreserveSig]
           Function GetRenderingMode1() As DWRITE_RENDERING_MODE1
       End Interface

       [InterfaceId("9A1B41C3-D3BB-466A-87FC-FE67556A3B65")]
       [OleAutomation(False)]
       Interface IDWriteFactory3 Extends IDWriteFactory2
           Sub CreateGlyphRunAnalysis(ByRef glyphRun As DWRITE_GLYPH_RUN, ByRef transform As DWRITE_MATRIX, ByVal renderingMode As DWRITE_RENDERING_MODE1, ByVal measuringMode As DWRITE_MEASURING_MODE, ByVal gridFitMode As DWRITE_GRID_FIT_MODE, ByVal antialiasMode As DWRITE_TEXT_ANTIALIAS_MODE, ByVal baselineOriginX As Single, ByVal baselineOriginY As Single, ByRef glyphRunAnalysis As IDWriteGlyphRunAnalysis)
           Sub CreateCustomRenderingParams(ByVal Gamma As Single, ByVal enhancedContrast As Single, ByVal grayscaleEnhancedContrast As Single, ByVal clearTypeLevel As Single, ByVal pixelGeometry As DWRITE_PIXEL_GEOMETRY, ByVal renderingMode As DWRITE_RENDERING_MODE1, ByVal gridFitMode As DWRITE_GRID_FIT_MODE, ByRef renderingParams As IDWriteRenderingParams3)
           Sub CreateFontFaceReferenceI(ByVal fontFile As IDWriteFontFile, ByVal faceIndex As Long, ByVal fontSimulations As DWRITE_FONT_SIMULATIONS, ByRef fontFaceReference As IDWriteFontFaceReference)
           Sub CreateFontFaceReference(ByVal filePath As LongPtr, ByRef LastWriteTime As FILETIME, ByVal faceIndex As Long, ByVal fontSimulations As DWRITE_FONT_SIMULATIONS, ByRef fontFaceReference As IDWriteFontFaceReference)
           Sub GetSystemFontSet(ByRef fontSet As IDWriteFontSet)
           Sub CreateFontSetBuilder(ByRef fontSetBuilder As IDWriteFontSetBuilder)
           Sub CreateFontCollectionFromFontSet(ByVal fontSet As IDWriteFontSet, ByRef fontCollection As IDWriteFontCollection1)
           Sub GetSystemFontCollection(ByVal includeDownloadableFonts As BOOL, ByRef fontCollection As IDWriteFontCollection1, ByVal checkForUpdates As BOOL)
           Sub GetFontDownloadQueue(ByRef fontDownloadQueue As IDWriteFontDownloadQueue)
       End Interface

       [InterfaceId("53585141-D9F8-4095-8321-D73CF6BD116B")]
       [OleAutomation(False)]
       Interface IDWriteFontSet Extends stdole.IUnknown
           [PreserveSig]
           Function GetFontCount() As Long
           Sub GetFontFaceReference(ByVal listIndex As Long, ByRef fontFaceReference As IDWriteFontFaceReference)
           Sub FindFontFaceReference(ByVal fontFaceReference As IDWriteFontFaceReference, ByRef listIndex As Long, ByRef exists As BOOL)
           Sub FindFontFace(ByVal fontFace As IDWriteFontFace, ByRef listIndex As Long, ByRef exists As BOOL)
           Sub GetPropertyValues(ByVal propertyId As DWRITE_FONT_PROPERTY_ID, ByRef values As IDWriteStringList)
           Sub GetPropertyValues(ByVal propertyId As DWRITE_FONT_PROPERTY_ID, ByVal preferredLocaleNames As LongPtr, ByRef values As IDWriteStringList)
           Sub GetPropertyValues(ByVal listIndex As Long, ByVal propertyId As DWRITE_FONT_PROPERTY_ID, ByRef exists As BOOL, ByRef values As IDWriteLocalizedStrings)
           Sub GetPropertyOccurrenceCount(ByRef Property As DWRITE_FONT_PROPERTY, ByRef propertyOccurrenceCount As Long)
           Sub GetMatchingFonts(ByVal familyName As LongPtr, ByVal fontWeight As DWRITE_FONT_WEIGHT, ByVal fontStretch As DWRITE_FONT_STRETCH, ByVal fontStyle As DWRITE_FONT_STYLE, ByRef filteredSet As IDWriteFontSet)
           Sub GetMatchingFonts(ByRef fproperties As DWRITE_FONT_PROPERTY, ByVal propertyCount As Long, ByRef filteredSet As IDWriteFontSet)
       End Interface

       [InterfaceId("2F642AFE-9C68-4F40-B8BE-457401AFCB3D")]
       [OleAutomation(False)]
       Interface IDWriteFontSetBuilder Extends stdole.IUnknown
           Sub AddFontFaceReference(ByVal fontFaceReference As IDWriteFontFaceReference, ByRef fproperties As DWRITE_FONT_PROPERTY, ByVal propertyCount As Long)
           Sub AddFontFaceReference(ByVal fontFaceReference As IDWriteFontFaceReference)
           Sub AddFontSet(ByVal fontSet As IDWriteFontSet)
           Sub CreateFontSet(ByRef fontSet As IDWriteFontSet)
       End Interface

       [InterfaceId("53585141-D9F8-4095-8321-D73CF6BD116C")]
       [OleAutomation(False)]
       Interface IDWriteFontCollection1 Extends IDWriteFontCollection
           Sub GetFontSet(ByRef fontSet As IDWriteFontSet)
           Sub GetFontFamily(ByVal index As Long, ByRef fontFamily As IDWriteFontFamily1)
       End Interface

       [InterfaceId("DA20D8EF-812A-4C43-9802-62EC4ABD7ADF")]
       [OleAutomation(False)]
       Interface IDWriteFontFamily1 Extends IDWriteFontFamily
           [PreserveSig]
           Function GetFontLocality(ByVal listIndex As Long) As DWRITE_LOCALITY
           Sub GetFont(ByVal listIndex As Long, ByRef Font As IDWriteFont3)
           Sub GetFontFaceReference(ByVal listIndex As Long, ByRef fontFaceReference As IDWriteFontFaceReference)
       End Interface

       [InterfaceId("DA20D8EF-812A-4C43-9802-62EC4ABD7ADE")]
       [OleAutomation(False)]
       Interface IDWriteFontList1 Extends IDWriteFontList
           [PreserveSig]
           Function GetFontLocality(ByVal listIndex As Long) As DWRITE_LOCALITY
           Sub GetFont(ByVal listIndex As Long, ByRef Font As IDWriteFont3)
           Sub GetFontFaceReference(ByVal listIndex As Long, ByRef fontFaceReference As IDWriteFontFaceReference)
       End Interface

       [InterfaceId("5E7FA7CA-DDE3-424C-89F0-9FCD6FED58CD")]
       [OleAutomation(False)]
       Interface IDWriteFontFaceReference Extends stdole.IUnknown
           Sub CreateFontFace(ByRef fontFace As IDWriteFontFace3)
           Sub CreateFontFaceWithSimulations(ByVal fontFaceSimulationFlags As DWRITE_FONT_SIMULATIONS, ByRef fontFace As IDWriteFontFace3)
           [PreserveSig]
           Function Equals(ByVal fontFaceReference As IDWriteFontFaceReference) As BOOL
           [PreserveSig]
           Function GetFontFaceIndex() As Long
           [PreserveSig]
           Function GetSimulations() As DWRITE_FONT_SIMULATIONS
           Sub GetFontFile(ByRef fontFile As IDWriteFontFile)
           [PreserveSig]
           Function GetLocalFileSize() As LongLong
           [PreserveSig]
           Function GetFileSize() As LongLong
           Sub GetFileTime(ByRef LastWriteTime As FILETIME)
           [PreserveSig]
           Function GetLocality() As DWRITE_LOCALITY
           Sub EnqueueFontDownloadRequest()
           Sub EnqueueCharacterDownloadRequest(ByVal characters As LongPtr, ByVal characterCount As Long)
           Sub EnqueueGlyphDownloadRequest(ByRef glyphIndices As Integer, ByVal glyphCount As Long)
           Sub EnqueueFileFragmentDownloadRequest(ByVal fileOffset As LongLong, ByVal fragmentSize As LongLong)
       End Interface

       
        [InterfaceId("29748ed6-8c9c-4a6a-be0b-d912e8538944")]
        Interface IDWriteFont2 Extends IDWriteFont1
           [PreserveSig]
           Function IsColorFont() As BOOL
        End Interface
        
       [InterfaceId("29748ED6-8C9C-4A6A-BE0B-D912E8538944")]
       [OleAutomation(False)]
       Interface IDWriteFont3 Extends IDWriteFont2

           Sub CreateFontFace(ByRef fontFace As IDWriteFontFace3)
           [PreserveSig]
           Function Equals(ByVal Font As IDWriteFont) As BOOL
           Sub GetFontFaceReference(ByRef fontFaceReference As IDWriteFontFaceReference)
           [PreserveSig]
           Function HasCharacter(ByVal unicodeValue As Long) As BOOL
           [PreserveSig]
           Function GetLocality() As DWRITE_LOCALITY
       End Interface

       [InterfaceId("D37D7598-09BE-4222-A236-2081341CC1F2")]
       [OleAutomation(False)]
       Interface IDWriteFontFace3 Extends IDWriteFontFace2
           Sub GetFontFaceReference(ByRef fontFaceReference As IDWriteFontFaceReference)
           [PreserveSig]
           Sub GetPanose(ByRef panose As DWRITE_PANOSE)
           [PreserveSig]
           Function GetWeight() As DWRITE_FONT_WEIGHT
           [PreserveSig]
           Function GetStretch() As DWRITE_FONT_STRETCH
           [PreserveSig]
           Function GetStyle() As DWRITE_FONT_STYLE
           Sub GetFamilyNames(ByRef Names As IDWriteLocalizedStrings)
           Sub GetFaceNames(ByRef Names As IDWriteLocalizedStrings)
           Sub GetInformationalStrings(ByVal informationalStringID As DWRITE_INFORMATIONAL_STRING_ID, ByRef informationalStrings As IDWriteLocalizedStrings, ByRef exists As BOOL)
           [PreserveSig]
           Function HasCharacter(ByVal unicodeValue As Long) As BOOL
           Sub GetRecommendedRenderingMode(ByVal fontEmSize As Single, ByVal DpiX As Single, ByVal DpiY As Single, ByRef transform As DWRITE_MATRIX, ByVal isSideways As BOOL, ByVal outlineThreshold As DWRITE_OUTLINE_THRESHOLD, ByVal measuringMode As DWRITE_MEASURING_MODE, ByVal renderingParams As IDWriteRenderingParams, ByRef renderingMode As DWRITE_RENDERING_MODE1, ByRef gridFitMode As DWRITE_GRID_FIT_MODE)
           [PreserveSig]
           Function IsCharacterLocal(ByVal unicodeValue As Long) As BOOL
           [PreserveSig]
           Function IsGlyphLocal(ByVal glyphId As Integer) As BOOL
           Sub AreCharactersLocal(ByVal characters As LongPtr, ByVal characterCount As Long, ByVal enqueueIfNotLocal As BOOL, ByRef isLocal As BOOL)
           Sub AreGlyphsLocal(ByRef glyphIndices As Integer, ByVal glyphCount As Long, ByVal enqueueIfNotLocal As BOOL, ByRef isLocal As BOOL)
       End Interface

       [InterfaceId("CFEE3140-1157-47CA-8B85-31BFCF3F2D0E")]
       [OleAutomation(False)]
       Interface IDWriteStringList Extends stdole.IUnknown
           [PreserveSig]
           Function GetCount() As Long
           Sub GetLocaleNameLength(ByVal listIndex As Long, ByRef Length As Long)
           Sub GetLocaleName(ByVal listIndex As Long, ByVal localeName As LongPtr, ByVal SIZE As Long)
           Sub GetStringLength(ByVal listIndex As Long, ByRef Length As Long)
           Sub GetString(ByVal listIndex As Long, ByVal stringBuffer As LongPtr, ByVal stringBufferSize As Long)
       End Interface

       [InterfaceId("B06FE5B9-43EC-4393-881B-DBE4DC72FDA7")]
       [OleAutomation(False)]
       [Description("⚠️ **WARNING:** REDEFINED VOID")]
       Interface IDWriteFontDownloadListener Extends stdole.IUnknown
           Sub DownloadCompleted(ByVal downloadQueue As IDWriteFontDownloadQueue, ByVal Context As IUnknown, ByVal downloadResult As Long /* HRESULT */)
       End Interface

       [InterfaceId("B71E6052-5AEA-4FA3-832E-F60D431F7E91")]
       [OleAutomation(False)]
       Interface IDWriteFontDownloadQueue Extends stdole.IUnknown
           Sub AddListener(ByVal listener As IDWriteFontDownloadListener, ByRef token As Long)
           Sub RemoveListener(ByVal token As Long)
           [PreserveSig]
           Function IsEmpty() As BOOL
           Sub BeginDownload(ByVal Context As IUnknown)
           Sub CancelDownload()
           [PreserveSig]
           Function GetGenerationCount() As LongLong
       End Interface

       [InterfaceId("4556BE70-3ABD-4F70-90BE-421780A6F515")]
       [OleAutomation(False)]
       Interface IDWriteGdiInterop1 Extends IDWriteGdiInterop
           Sub CreateFontFromLOGFONT(ByRef logFont As LOGFONTW, ByVal fontCollection As IDWriteFontCollection, ByRef Font As IDWriteFont)
           Sub GetFontSignature(ByVal fontFace As IDWriteFontFace, ByRef fontSignature As FONTSIGNATURE)
           Sub GetFontSignature(ByVal Font As IDWriteFont, ByRef fontSignature As FONTSIGNATURE)
           Sub GetMatchingFontsByLOGFONT(ByRef logFont As LOGFONT, ByVal fontSet As IDWriteFontSet, ByRef filteredSet As IDWriteFontSet)
       End Interface
      
       [InterfaceId("F67E0EDD-9E3D-4ECC-8C32-4183253DFE70")]
       [OleAutomation(False)]
       Interface IDWriteTextFormat2 Extends IDWriteTextFormat1
           Sub SetLineSpacing(ByRef lineSpacingOptions As DWRITE_LINE_SPACING)
           Sub GetLineSpacing(ByRef lineSpacingOptions As DWRITE_LINE_SPACING)
       End Interface

       [InterfaceId("07DDCD52-020E-4DE8-AC33-6C953D83F92D")]
       [OleAutomation(False)]
       Interface IDWriteTextLayout3 Extends IDWriteTextLayout2
           Sub InvalidateLayout()
           Sub SetLineSpacing(ByRef lineSpacingOptions As DWRITE_LINE_SPACING)
           Sub GetLineSpacing(ByRef lineSpacingOptions As DWRITE_LINE_SPACING)
           Sub GetLineMetrics(ByRef lineMetrics As DWRITE_LINE_METRICS1, ByVal maxLineCount As Long, ByRef actualLineCount As Long)
       End Interface
       
       [InterfaceId("7C5F86DA-C7A1-4F05-B8E1-55A179FE5A35")]
       [OleAutomation(False)]
       Interface IDWriteColorGlyphRunEnumerator1 Extends IDWriteColorGlyphRunEnumerator
           Sub GetCurrentRun(ByRef colorGlyphRun As LongPtr)
       End Interface

       [InterfaceId("27F2A904-4EB8-441D-9678-0563F53E3E2F")]
       [OleAutomation(False)]
       Interface IDWriteFontFace4 Extends IDWriteFontFace3
           Sub GetGlyphImageFormats(ByVal glyphId As Integer, ByVal pixelsPerEmFirst As Long, ByVal pixelsPerEmLast As Long, ByRef glyphImageFormats As DWRITE_GLYPH_IMAGE_FORMATS)
           [PreserveSig]
           Function GetGlyphImageFormats() As DWRITE_GLYPH_IMAGE_FORMATS
           Sub GetGlyphImageData(ByVal glyphId As Integer, ByVal pixelsPerEm As Long, ByVal glyphImageFormat As DWRITE_GLYPH_IMAGE_FORMATS, ByRef glyphData As DWRITE_GLYPH_IMAGE_DATA, ByRef glyphDataContext As LongPtr)
           [PreserveSig]
           Sub ReleaseGlyphImageData(ByRef glyphDataContext As Any)
       End Interface

       [InterfaceId("4B0B5BD3-0797-4549-8AC5-FE915CC53856")]
       [OleAutomation(False)]
       Interface IDWriteFactory4 Extends IDWriteFactory3
           Sub TranslateColorGlyphRun(ByVal baselineOrigin As LongLong, ByRef glyphRun As DWRITE_GLYPH_RUN, ByRef glyphRunDescription As DWRITE_GLYPH_RUN_DESCRIPTION, ByVal desiredGlyphImageFormats As DWRITE_GLYPH_IMAGE_FORMATS, ByVal measuringMode As DWRITE_MEASURING_MODE, ByRef worldAndDpiTransform As DWRITE_MATRIX, ByVal colorPaletteIndex As Long, ByRef colorLayers As IDWriteColorGlyphRunEnumerator1)
           Sub ComputeGlyphOrigins(ByRef glyphRun As DWRITE_GLYPH_RUN, ByVal baselineOrigin As LongLong, ByRef glyphOrigins As D2D1_POINT_2F)
           Sub ComputeGlyphOrigins(ByRef glyphRun As DWRITE_GLYPH_RUN, ByVal measuringMode As DWRITE_MEASURING_MODE, ByVal baselineOrigin As LongLong, ByRef worldAndDpiTransform As DWRITE_MATRIX, ByRef glyphOrigins As D2D1_POINT_2F)
       End Interface

       [InterfaceId("3FF7715F-3CDC-4DC6-9B72-EC5621DCCAFD")]
       [OleAutomation(False)]
       Interface IDWriteFontSetBuilder1 Extends IDWriteFontSetBuilder
           Sub AddFontFile(ByVal fontFile As IDWriteFontFile)
       End Interface

       [InterfaceId("CE25F8FD-863B-4D13-9651-C1F88DC73FE2")]
       [OleAutomation(False)]
       Interface IDWriteAsyncResult Extends stdole.IUnknown
           [PreserveSig]
           Function GetWaitHandle() As Long
           Sub GetResult()
       End Interface
       
       [InterfaceId("4DB3757A-2C72-4ED9-B2B6-1ABABE1AFF9C")]
       [OleAutomation(False)]
       Interface IDWriteRemoteFontFileStream Extends IDWriteFontFileStream
           Sub GetLocalFileSize(ByRef localFileSize As LongLong)
           Sub GetFileFragmentLocality(ByVal fileOffset As LongLong, ByVal fragmentSize As LongLong, ByRef isLocal As BOOL, ByRef partialSize As LongLong)
           [PreserveSig]
           Function GetLocality() As DWRITE_LOCALITY
           Sub BeginDownload(ByRef downloadOperationID As UUID, ByRef fileFragments As DWRITE_FILE_FRAGMENT, ByVal fragmentCount As Long, ByRef asyncResult As IDWriteAsyncResult)
       End Interface
       
       [InterfaceId("68648C83-6EDE-46C0-AB46-20083A887FDE")]
        [OleAutomation(False)]
        Interface IDWriteRemoteFontFileLoader Extends IDWriteFontFileLoader
            Sub CreateRemoteStreamFromKey(ByRef fontFileReferenceKey As Any, ByVal fontFileReferenceKeySize As Long, ByRef fontFileStream As IDWriteRemoteFontFileStream)
            Sub GetLocalityFromKey(ByRef fontFileReferenceKey As Any, ByVal fontFileReferenceKeySize As Long, ByRef locality As DWRITE_LOCALITY)
            Sub CreateFontFileReferenceFromUrl(ByVal factory As IDWriteFactory, ByVal baseUrl As LongPtr, ByVal fontFileUrl As LongPtr, ByRef fontFile As IDWriteFontFile)
        End Interface

        [InterfaceId("DC102F47-A12D-4B1C-822D-9E117E33043F")]
        [OleAutomation(False)]
        Interface IDWriteInMemoryFontFileLoader Extends IDWriteFontFileLoader
            Sub CreateInMemoryFontFileReference(ByVal factory As IDWriteFactory, ByRef fontData As Any, ByVal fontDataSize As Long, ByVal ownerObject As IUnknown, ByRef fontFile As IDWriteFontFile)
            [PreserveSig]
            Function GetFileCount() As Long
        End Interface

        [InterfaceId("958DB99A-BE2A-4F09-AF7D-65189803D1D3")]
        [OleAutomation(False)]
        Interface IDWriteFactory5 Extends IDWriteFactory4
            Sub CreateFontSetBuilder(ByRef fontSetBuilder As IDWriteFontSetBuilder1)
            Sub CreateInMemoryFontFileLoader(ByRef newLoader As IDWriteInMemoryFontFileLoader)
            Sub CreateHttpFontFileLoader(ByVal referrerUrl As LongPtr, ByVal extraHeaders As LongPtr, ByRef newLoader As IDWriteRemoteFontFileLoader)
            [PreserveSig]
            Function AnalyzeContainerType(ByRef fileData As Any, ByVal fileDataSize As Long) As DWRITE_CONTAINER_TYPE
            Sub UnpackFontFile(ByVal containerType As DWRITE_CONTAINER_TYPE, ByRef fileData As Any, ByVal fileDataSize As Long, ByRef unpackedFontStream As IDWriteFontFileStream)
        End Interface
       
    
        [InterfaceId("F3744D80-21F7-42EB-B35D-995BC72FC223")]
        [OleAutomation(False)]
        Interface IDWriteFactory6 Extends IDWriteFactory5
            Sub CreateFontFaceReference(ByVal fontFile As IDWriteFontFile, ByVal faceIndex As Long, ByVal fontSimulations As DWRITE_FONT_SIMULATIONS, ByRef fontAxisValues As DWRITE_FONT_AXIS_VALUE, ByVal fontAxisValueCount As Long, ByRef fontFaceReference As IDWriteFontFaceReference1)
            Sub CreateFontResource(ByVal fontFile As IDWriteFontFile, ByVal faceIndex As Long, ByRef fontResource As IDWriteFontResource)
            Sub GetSystemFontSet6(ByVal includeDownloadableFonts As BOOL, ByRef fontSet As IDWriteFontSet1)
            Sub GetSystemFontCollection6(ByVal includeDownloadableFonts As BOOL, ByVal fontFamilyModel As DWRITE_FONT_FAMILY_MODEL, ByRef fontCollection As IDWriteFontCollection2)
            Sub CreateFontCollectionFromFontSet(ByVal fontSet As IDWriteFontSet, ByVal fontFamilyModel As DWRITE_FONT_FAMILY_MODEL, ByRef fontCollection As IDWriteFontCollection2)
            Sub CreateFontSetBuilder(ByRef fontSetBuilder As IDWriteFontSetBuilder2)
            Sub CreateTextFormat(ByVal fontFamilyName As LongPtr, ByVal fontCollection As IDWriteFontCollection, ByRef fontAxisValues As DWRITE_FONT_AXIS_VALUE, ByVal fontAxisValueCount As Long, ByVal fontSize As Single, ByVal localeName As LongPtr, ByRef textFormat As IDWriteTextFormat3)
        End Interface

        [InterfaceId("98EFF3A5-B667-479A-B145-E2FA5B9FDC29")]
        [OleAutomation(False)]
        Interface IDWriteFontFace5 Extends IDWriteFontFace4
            [PreserveSig]
            Function GetFontAxisValueCount() As Long
            Sub GetFontAxisValues(ByRef fontAxisValues As DWRITE_FONT_AXIS_VALUE, ByVal fontAxisValueCount As Long)
            [PreserveSig]
            Function HasVariations() As BOOL
            Sub GetFontResource(ByRef fontResource As IDWriteFontResource)
            [PreserveSig]
            Function Equals(ByVal fontFace As IDWriteFontFace) As BOOL
        End Interface

        [InterfaceId("1F803A76-6871-48E8-987F-B975551C50F2")]
        [OleAutomation(False)]
        Interface IDWriteFontResource Extends stdole.IUnknown
            Sub GetFontFile(ByRef fontFile As IDWriteFontFile)
            [PreserveSig]
            Function GetFontFaceIndex() As Long
            [PreserveSig]
            Function GetFontAxisCount() As Long
            Sub GetDefaultFontAxisValues(ByRef fontAxisValues As DWRITE_FONT_AXIS_VALUE, ByVal fontAxisValueCount As Long)
            Sub GetFontAxisRanges(ByRef fontAxisRanges As DWRITE_FONT_AXIS_RANGE, ByVal fontAxisRangeCount As Long)
            [PreserveSig]
            Function GetFontAxisAttributes(ByVal axisIndex As Long) As DWRITE_FONT_AXIS_ATTRIBUTES
            Sub GetAxisNames(ByVal axisIndex As Long, ByRef Names As IDWriteLocalizedStrings)
            [PreserveSig]
            Function GetAxisValueNameCount(ByVal axisIndex As Long) As Long
            Sub GetAxisValueNames(ByVal axisIndex As Long, ByVal axisValueIndex As Long, ByRef fontAxisRange As DWRITE_FONT_AXIS_RANGE, ByRef Names As IDWriteLocalizedStrings)
            [PreserveSig]
            Function HasVariations() As BOOL
            Sub CreateFontFace(ByVal fontSimulations As DWRITE_FONT_SIMULATIONS, ByRef fontAxisValues As DWRITE_FONT_AXIS_VALUE, ByVal fontAxisValueCount As Long, ByRef fontFace As IDWriteFontFace5)
            Sub CreateFontFaceReference(ByVal fontSimulations As DWRITE_FONT_SIMULATIONS, ByRef fontAxisValues As DWRITE_FONT_AXIS_VALUE, ByVal fontAxisValueCount As Long, ByRef fontFaceReference As IDWriteFontFaceReference1)
        End Interface

        [InterfaceId("C081FE77-2FD1-41AC-A5A3-34983C4BA61A")]
        [OleAutomation(False)]
        Interface IDWriteFontFaceReference1 Extends IDWriteFontFaceReference
            Sub CreateFontFace(ByRef fontFace As IDWriteFontFace5)
            [PreserveSig]
            Function GetFontAxisValueCount() As Long
            Sub GetFontAxisValues(ByRef fontAxisValues As DWRITE_FONT_AXIS_VALUE, ByVal fontAxisValueCount As Long)
        End Interface

        [InterfaceId("EE5BA612-B131-463C-8F4F-3189B9401E45")]
        [OleAutomation(False)]
        Interface IDWriteFontSetBuilder2 Extends IDWriteFontSetBuilder1
            Sub AddFont(ByVal fontFile As IDWriteFontFile, ByVal fontFaceIndex As Long, ByVal fontSimulations As DWRITE_FONT_SIMULATIONS, ByRef fontAxisValues As DWRITE_FONT_AXIS_VALUE, ByVal fontAxisValueCount As Long, ByRef fontAxisRanges As DWRITE_FONT_AXIS_RANGE, ByVal fontAxisRangeCount As Long, ByRef fproperties As DWRITE_FONT_PROPERTY, ByVal propertyCount As Long)
            Sub AddFontFile(ByVal filePath As LongPtr)
        End Interface

        [InterfaceId("7E9FDA85-6C92-4053-BC47-7AE3530DB4D3")]
        [OleAutomation(False)]
        Interface IDWriteFontSet1 Extends IDWriteFontSet
            Sub GetMatchingFonts(ByRef fontProperty As DWRITE_FONT_PROPERTY, ByRef fontAxisValues As DWRITE_FONT_AXIS_VALUE, ByVal fontAxisValueCount As Long, ByRef matchingFonts As IDWriteFontSet1)
            Sub GetFirstFontResources(ByRef filteredFontSet As IDWriteFontSet1)
            Sub GetFilteredFonts(ByRef indices As Long, ByVal indexCount As Long, ByRef filteredFontSet As IDWriteFontSet1)
            Sub GetFilteredFonts(ByRef fontAxisRanges As DWRITE_FONT_AXIS_RANGE, ByVal fontAxisRangeCount As Long, ByVal selectAnyRange As BOOL, ByRef filteredFontSet As IDWriteFontSet1)
            Sub GetFilteredFonts(ByRef fproperties As DWRITE_FONT_PROPERTY, ByVal propertyCount As Long, ByVal selectAnyProperty As BOOL, ByRef filteredFontSet As IDWriteFontSet1)
            Sub GetFilteredFontIndices(ByRef fontAxisRanges As DWRITE_FONT_AXIS_RANGE, ByVal fontAxisRangeCount As Long, ByVal selectAnyRange As BOOL, ByRef indices As Long, ByVal maxIndexCount As Long, ByRef actualIndexCount As Long)
            Sub GetFilteredFontIndices(ByRef fproperties As DWRITE_FONT_PROPERTY, ByVal propertyCount As Long, ByVal selectAnyProperty As BOOL, ByRef indices As Long, ByVal maxIndexCount As Long, ByRef actualIndexCount As Long)
            Sub GetFontAxisRanges(ByVal listIndex As Long, ByRef fontAxisRanges As DWRITE_FONT_AXIS_RANGE, ByVal maxFontAxisRangeCount As Long, ByRef actualFontAxisRangeCount As Long)
            Sub GetFontAxisRanges(ByRef fontAxisRanges As DWRITE_FONT_AXIS_RANGE, ByVal maxFontAxisRangeCount As Long, ByRef actualFontAxisRangeCount As Long)
            Sub GetFontFaceReference(ByVal listIndex As Long, ByRef fontFaceReference As IDWriteFontFaceReference1)
            Sub CreateFontResource(ByVal listIndex As Long, ByRef fontResource As IDWriteFontResource)
            Sub CreateFontFace(ByVal listIndex As Long, ByRef fontFace As IDWriteFontFace5)
            [PreserveSig]
            Function GetFontLocality(ByVal listIndex As Long) As DWRITE_LOCALITY
        End Interface

        [InterfaceId("C0763A34-77AF-445A-B735-08C37B0A5BF5")]
        [OleAutomation(False)]
        Interface IDWriteFontList2 Extends IDWriteFontList1
            Sub GetFontSet(ByRef fontSet As IDWriteFontSet1)
        End Interface

        [InterfaceId("3ED49E77-A398-4261-B9CF-C126C2131EF3")]
        [OleAutomation(False)]
        Interface IDWriteFontFamily2 Extends IDWriteFontFamily1
            Sub GetMatchingFonts(ByRef fontAxisValues As DWRITE_FONT_AXIS_VALUE, ByVal fontAxisValueCount As Long, ByRef matchingFonts As IDWriteFontList2)
            Sub GetFontSet(ByRef fontSet As IDWriteFontSet1)
        End Interface

        [InterfaceId("514039C6-4617-4064-BF8B-92EA83E506E0")]
        [OleAutomation(False)]
        Interface IDWriteFontCollection2 Extends IDWriteFontCollection1
            Sub GetFontFamily(ByVal index As Long, ByRef fontFamily As IDWriteFontFamily2)
            Sub GetMatchingFonts(ByVal familyName As LongPtr, ByRef fontAxisValues As DWRITE_FONT_AXIS_VALUE, ByVal fontAxisValueCount As Long, ByRef fontList As IDWriteFontList2)
            [PreserveSig]
            Function GetFontFamilyModel() As DWRITE_FONT_FAMILY_MODEL
            Sub GetFontSet(ByRef fontSet As IDWriteFontSet1)
        End Interface

        [InterfaceId("05A9BF42-223F-4441-B5FB-8263685F55E9")]
        [OleAutomation(False)]
        Interface IDWriteTextLayout4 Extends IDWriteTextLayout3
            Sub SetFontAxisValues(ByRef fontAxisValues As DWRITE_FONT_AXIS_VALUE, ByVal fontAxisValueCount As Long, ByVal textRange As LongLong)
            [PreserveSig]
            Function GetFontAxisValueCount(ByVal CurrentPosition As Long) As Long
            Sub GetFontAxisValues(ByVal CurrentPosition As Long, ByRef fontAxisValues As DWRITE_FONT_AXIS_VALUE, ByVal fontAxisValueCount As Long, ByRef TextRange As DWRITE_TEXT_RANGE)
            [PreserveSig]
            Function GetAutomaticFontAxes() As DWRITE_AUTOMATIC_FONT_AXES
            Sub SetAutomaticFontAxes(ByVal automaticFontAxes As DWRITE_AUTOMATIC_FONT_AXES)
        End Interface

        [InterfaceId("6D3B5641-E550-430D-A85B-B7BF48A93427")]
        [OleAutomation(False)]
        Interface IDWriteTextFormat3 Extends IDWriteTextFormat2
            Sub SetFontAxisValues(ByRef fontAxisValues As DWRITE_FONT_AXIS_VALUE, ByVal fontAxisValueCount As Long)
            [PreserveSig]
            Function GetFontAxisValueCount() As Long
            Sub GetFontAxisValues(ByRef fontAxisValues As DWRITE_FONT_AXIS_VALUE, ByVal fontAxisValueCount As Long)
            [PreserveSig]
            Function GetAutomaticFontAxes() As DWRITE_AUTOMATIC_FONT_AXES
            Sub SetAutomaticFontAxes(ByVal automaticFontAxes As DWRITE_AUTOMATIC_FONT_AXES)
        End Interface

        [InterfaceId("2397599D-DD0D-4681-BD6A-F4F31EAADE77")]
        [OleAutomation(False)]
        Interface IDWriteFontFallback1 Extends IDWriteFontFallback
            Sub MapCharacters(ByVal analysisSource As IDWriteTextAnalysisSource, ByVal textPosition As Long, ByVal textLength As Long, ByVal baseFontCollection As IDWriteFontCollection, ByVal baseFamilyName As LongPtr, ByRef fontAxisValues As DWRITE_FONT_AXIS_VALUE, ByVal fontAxisValueCount As Long, ByRef mappedLength As Long, ByRef scale As Single, ByRef mappedFontFace As IDWriteFontFace5)
        End Interface

        [InterfaceId("DC7EAD19-E54C-43AF-B2DA-4E2B79BA3F7F")]
        [OleAutomation(False)]
        Interface IDWriteFontSet2 Extends IDWriteFontSet1
            [PreserveSig]
            Function GetExpirationEvent() As Long
        End Interface

        [InterfaceId("A4D055A6-F9E3-4E25-93B7-9E309F3AF8E9")]
        [OleAutomation(False)]
        Interface IDWriteFontCollection3 Extends IDWriteFontCollection2
            [PreserveSig]
            Function GetExpirationEvent() As Long
        End Interface

        [InterfaceId("35D0E0B3-9076-4D2E-A016-A91B568A06B4")]
        [OleAutomation(False)]
        Interface IDWriteFactory7 Extends IDWriteFactory6
            Sub GetSystemFontSet(ByVal includeDownloadableFonts As BOOL, ByRef fontSet As IDWriteFontSet2)
            Sub GetSystemFontCollection(ByVal includeDownloadableFonts As BOOL, ByVal fontFamilyModel As DWRITE_FONT_FAMILY_MODEL, ByRef fontCollection As IDWriteFontCollection3)
        End Interface
        
    
        [InterfaceId("7C073EF2-A7F4-4045-8C32-8AB8AE640F90")]
        [OleAutomation(False)]
        Interface IDWriteFontSet3 Extends IDWriteFontSet2
            [PreserveSig]
            Function GetFontSourceType(ByVal fontIndex As Long) As DWRITE_FONT_SOURCE_TYPE
            [PreserveSig]
            Function GetFontSourceNameLength(ByVal listIndex As Long) As Long
            Sub GetFontSourceName(ByVal listIndex As Long, ByVal stringBuffer As LongPtr, ByVal stringBufferSize As Long)
        End Interface

        [InterfaceId("C4B1FE1B-6E84-47D5-B54C-A597981B06AD")]
        [OleAutomation(False)]
        Interface IDWriteFontFace6 Extends IDWriteFontFace5
            Sub GetFamilyNames(ByVal fontFamilyModel As DWRITE_FONT_FAMILY_MODEL, ByRef Names As IDWriteLocalizedStrings)
            Sub GetFaceNames(ByVal fontFamilyModel As DWRITE_FONT_FAMILY_MODEL, ByRef Names As IDWriteLocalizedStrings)
        End Interface

        [InterfaceId("EEC175FC-BEA9-4C86-8B53-CCBDD7DF0C82")]
        [OleAutomation(False)]
        Interface IDWriteFontSet4 Extends IDWriteFontSet3
            [PreserveSig]
            Function ConvertWeightStretchStyleToFontAxisValues(ByRef inputAxisValues As DWRITE_FONT_AXIS_VALUE, ByVal inputAxisCount As Long, ByVal fontWeight As DWRITE_FONT_WEIGHT, ByVal fontStretch As DWRITE_FONT_STRETCH, ByVal fontStyle As DWRITE_FONT_STYLE, ByVal fontSize As Single, ByRef outputAxisValues As DWRITE_FONT_AXIS_VALUE) As Long
            Sub GetMatchingFonts(ByVal familyName As LongPtr, ByRef fontAxisValues As DWRITE_FONT_AXIS_VALUE, ByVal fontAxisValueCount As Long, ByVal allowedSimulations As DWRITE_FONT_SIMULATIONS, ByRef matchingFonts As IDWriteFontSet4)
        End Interface
        
        [InterfaceId("C553A742-FC01-44DA-A66E-B8B9ED6C3995")]
        [OleAutomation(False)]
        Interface IDWriteBitmapRenderTarget2 Extends IDWriteBitmapRenderTarget1
            Sub GetBitmapData(ByRef bitmapData As DWRITE_BITMAP_DATA_BGRA32)
        End Interface
        
        [InterfaceId("8128E912-3B97-42A5-AB6C-24AAD3A86E54")]
        [OleAutomation(False)]
        Interface IDWritePaintReader Extends stdole.IUnknown
            Sub SetCurrentGlyph(ByVal glyphIndex As Long, ByRef paintElement As DWRITE_PAINT_ELEMENT, ByVal structSize As Long, ByRef clipBox As D2D_RECT_F, ByRef glyphAttributes As DWRITE_PAINT_ATTRIBUTES)
            Sub SetTextColor(ByRef textColor As DWRITE_COLOR_F)
            Sub SetColorPaletteIndex(ByVal colorPaletteIndex As Long)
            Sub SetCustomColorPalette(ByRef PaletteEntries As DWRITE_COLOR_F, ByVal paletteEntryCount As Long)
            Sub MoveToFirstChild(ByRef paintElement As DWRITE_PAINT_ELEMENT, ByVal structSize As Long)
            Sub MoveToNextSibling(ByRef paintElement As DWRITE_PAINT_ELEMENT, ByVal structSize As Long)
            Sub MoveToParent()
            Sub GetGradientStops(ByVal firstGradientStopIndex As Long, ByVal gradientStopCount As Long, ByRef gradientStops As D2D1_GRADIENT_STOP)
            Sub GetGradientStopColors(ByVal firstGradientStopIndex As Long, ByVal gradientStopCount As Long, ByRef gradientStopColors As DWRITE_PAINT_COLOR)
        End Interface

        [InterfaceId("3945B85B-BC95-40F7-B72C-8B73BFC7E13B")]
        [OleAutomation(False)]
        Interface IDWriteFontFace7 Extends IDWriteFontFace6
            [PreserveSig]
            Function GetPaintFeatureLevel(ByVal glyphImageFormat As DWRITE_GLYPH_IMAGE_FORMATS) As DWRITE_PAINT_FEATURE_LEVEL
            Sub CreatePaintReader(ByVal glyphImageFormat As DWRITE_GLYPH_IMAGE_FORMATS, ByVal paintFeatureLevel As DWRITE_PAINT_FEATURE_LEVEL, ByRef paintReader As IDWritePaintReader)
        End Interface

        [InterfaceId("EE0A7FB5-DEF4-4C23-A454-C9C7DC878398")]
        [OleAutomation(False)]
        Interface IDWriteFactory8 Extends IDWriteFactory7
            Sub TranslateColorGlyphRun(ByVal baselineOrigin As LongLong, ByRef glyphRun As DWRITE_GLYPH_RUN, ByRef glyphRunDescription As DWRITE_GLYPH_RUN_DESCRIPTION, ByVal desiredGlyphImageFormats As DWRITE_GLYPH_IMAGE_FORMATS, ByVal paintFeatureLevel As DWRITE_PAINT_FEATURE_LEVEL, ByVal measuringMode As DWRITE_MEASURING_MODE, ByRef worldAndDpiTransform As DWRITE_MATRIX, ByVal colorPaletteIndex As Long, ByRef colorEnumerator As IDWriteColorGlyphRunEnumerator1)
        End Interface

        [InterfaceId("AEEC37DB-C337-40F1-8E2A-9A41B167B238")]
        [OleAutomation(False)]
        Interface IDWriteBitmapRenderTarget3 Extends IDWriteBitmapRenderTarget2
            [PreserveSig]
            Function GetPaintFeatureLevel() As DWRITE_PAINT_FEATURE_LEVEL
            Sub DrawPaintGlyphRun(ByVal baselineOriginX As Single, ByVal baselineOriginY As Single, ByVal measuringMode As DWRITE_MEASURING_MODE, ByRef glyphRun As DWRITE_GLYPH_RUN, ByVal glyphImageFormat As DWRITE_GLYPH_IMAGE_FORMATS, ByVal textColor As Long, ByVal colorPaletteIndex As Long, ByRef blackBoxRect As RECT)
            Sub DrawGlyphRunWithColorSupport(ByVal baselineOriginX As Single, ByVal baselineOriginY As Single, ByVal measuringMode As DWRITE_MEASURING_MODE, ByRef glyphRun As DWRITE_GLYPH_RUN, ByVal renderingParams As IDWriteRenderingParams, ByVal textColor As Long, ByVal colorPaletteIndex As Long, ByRef blackBoxRect As RECT)
        End Interface
        
        
        
       
#End Region

#Region "Direct2D"


    [InterfaceId("06152247-6F50-465A-9245-118BFD3B6007")]
    [Description("Creates Direct2D resources.")]
    [OleAutomation(False)]
    Interface ID2D1Factory Extends IUnknown
        [Description("Forces the factory to refresh any system defaults that it might have changed since factory creation.")]
        Sub ReloadSystemMetrics()
        [PreserveSig]
        [Description("Retrieves the current desktop DPI. To refresh this, call ReloadSystemMetrics.")]
        Sub GetDesktopDpi(ByRef DpiX As Single, ByRef DpiY As Single)
        [Description("Creates an ID2D1RectangleGeometry.")]
        Function CreateRectangleGeometry(ByRef rectangle As D2D1_RECT_F) As ID2D1RectangleGeometry
        [Description("Creates an ID2D1RoundedRectangleGeometry.")]
        Function CreateRoundedRectangleGeometry(ByRef roundedRectangle As D2D1_ROUNDED_RECT) As ID2D1RoundedRectangleGeometry
        [Description("Creates an ID2D1EllipseGeometry.")]
        Function CreateEllipseGeometry(ByRef ellipse As D2D1_ELLIPSE) As ID2D1EllipseGeometry
        [Description("Creates an ID2D1GeometryGroup, which is an object that holds other geometries.")]
        Function CreateGeometryGroup(ByVal fillMode As D2D1_FILL_MODE, ByRef geometries As ID2D1Geometry, ByVal geometriesCount As Long) As ID2D1GeometryGroup
        [Description("Transforms the specified geometry and stores the result as an ID2D1TransformedGeometry object.")]
        Function CreateTransformedGeometry(ByVal sourceGeometry As ID2D1Geometry, ByRef transform As D2D1_MATRIX_3X2_F) As ID2D1TransformedGeometry
        [Description("Creates an empty ID2D1PathGeometry.")]
        Function CreatePathGeometry() As ID2D1PathGeometry
        [Description("Creates an ID2D1StrokeStyle that describes start cap, dash pattern, and other features of a stroke.")]
        Function CreateStrokeStyle(ByRef strokeStyleProperties As D2D1_STROKE_STYLE_PROPERTIES, ByRef dashes As Any, ByVal dashesCount As Long) As ID2D1StrokeStyle
        [Description("Creates an ID2D1DrawingStateBlock that can be used with the SaveDrawingState and RestoreDrawingState methods of a render target.")]
        Function CreateDrawingStateBlock(ByRef drawingStateDescription As D2D1_DRAWING_STATE_DESCRIPTION, ByVal textRenderingParams As IDWriteRenderingParams) As ID2D1DrawingStateBlock
        [Description("Creates a render target that renders to a Microsoft Windows Imaging Component (WIC) bitmap.")]
        Function CreateWicBitmapRenderTarget(ByVal target As IWICBitmap, ByRef renderTargetProperties As D2D1_RENDER_TARGET_PROPERTIES) As ID2D1RenderTarget
        [Description("Creates an ID2D1HwndRenderTarget, a render target that renders to a window.")]
        Function CreateHwndRenderTarget(ByRef renderTargetProperties As D2D1_RENDER_TARGET_PROPERTIES, ByRef hwndRenderTargetProperties As D2D1_HWND_RENDER_TARGET_PROPERTIES) As ID2D1HwndRenderTarget
        [Description("Creates a render target that draws to a DirectX Graphics Infrastructure (DXGI) surface.")]
        Function CreateDxgiSurfaceRenderTarget(ByVal dxgiSurface As IDXGISurface, ByRef renderTargetProperties As D2D1_RENDER_TARGET_PROPERTIES) As ID2D1RenderTarget
        [Description("Creates a render target that draws to a Windows Graphics Device Interface (GDI) device context.")]
        Function CreateDCRenderTarget(ByRef renderTargetProperties As D2D1_RENDER_TARGET_PROPERTIES) As ID2D1DCRenderTarget
    End Interface

    [InterfaceId("2CD906A2-12E2-11DC-9FED-001143A055F9")]
    [Description("Describes a two-dimensional rectangle.")]
    [OleAutomation(False)]
    Interface ID2D1RectangleGeometry Extends ID2D1Geometry
        [PreserveSig]
        [Description("Retrieves the rectangle that describes the rectangle geometry's dimensions.")]
        Sub GetRect(ByRef RECT As D2D1_RECT_F)
    End Interface

    [InterfaceId("2CD906A1-12E2-11DC-9FED-001143A055F9")]
    [Description("Represents a geometry resource and defines a set of helper methods for manipulating and measuring geometric shapes. Interfaces that inherit from ID2D1Geometry define specific shapes.")]
    [OleAutomation(False)]
    Interface ID2D1Geometry Extends ID2D1Resource
        [Description("Retrieve the bounds of the geometry, with an optional applied transform.")]
        Function GetBounds(ByRef worldTransform As D2D1_MATRIX_3X2_F) As D2D1_RECT_F
        [Description("Get the bounds of the corresponding geometry after it has been widened or have an optional pen style applied.")]
        Function GetWidenedBounds(ByVal strokeWidth As Single, ByVal strokeStyle As ID2D1StrokeStyle, ByRef worldTransform As D2D1_MATRIX_3X2_F, ByVal flatteningTolerance As Single) As D2D1_RECT_F
        [Description("Checks to see whether the corresponding penned and widened geometry contains the given point. Copy a D2D1_POINT_2F into point.")]
        Function StrokeContainsPoint(ByVal point As LongLong, ByVal strokeWidth As Single, ByVal strokeStyle As ID2D1StrokeStyle, ByRef worldTransform As D2D1_MATRIX_3X2_F, ByVal flatteningTolerance As Single) As Long
        [Description("Test whether the given fill of this geometry would contain this point. Copy a D2D1_POINT_2F into point.")]
        Function FillContainsPoint(ByVal point As LongLong, ByRef worldTransform As D2D1_MATRIX_3X2_F, ByVal flatteningTolerance As Single) As Long
        [Description("Compare how one geometry intersects or contains another geometry.")]
        Function CompareWithGeometry(ByVal inputGeometry As ID2D1Geometry, ByRef inputGeometryTransform As D2D1_MATRIX_3X2_F, ByVal flatteningTolerance As Single) As D2D1_GEOMETRY_RELATION
        [Description("Converts a geometry to a simplified geometry that has arcs and quadratic beziers removed.")]
        Sub Simplify(ByVal simplificationOption As D2D1_GEOMETRY_SIMPLIFICATION_OPTION, ByRef worldTransform As D2D1_MATRIX_3X2_F, ByVal flatteningTolerance As Single, ByVal geometrySink As ID2D1SimplifiedGeometrySink)
        [Description("Tessellates a geometry into triangles.")]
        Sub Tessellate(ByRef worldTransform As D2D1_MATRIX_3X2_F, ByVal flatteningTolerance As Single, ByVal tessellationSink As ID2D1TessellationSink)
        [Description("Performs a combine operation between the two geometries to produce a resulting geometry.")]
        Sub CombineWithGeometry(ByVal inputGeometry As ID2D1Geometry, ByVal combineMode As D2D1_COMBINE_MODE, ByRef inputGeometryTransform As D2D1_MATRIX_3X2_F, ByVal flatteningTolerance As Single, ByVal geometrySink As ID2D1SimplifiedGeometrySink)
        [Description("Computes the outline of the geometry. The result is written back into a simplified geometry sink.")]
        Sub Outline(ByRef worldTransform As D2D1_MATRIX_3X2_F, ByVal flatteningTolerance As Single, ByVal geometrySink As ID2D1SimplifiedGeometrySink)
        [Description("Computes the area of the geometry.")]
        Function ComputeArea(ByRef worldTransform As D2D1_MATRIX_3X2_F, ByVal flatteningTolerance As Single) As Single
        [Description("Computes the length of the geometry.")]
        Function ComputeLength(ByRef worldTransform As D2D1_MATRIX_3X2_F, ByVal flatteningTolerance As Single) As Single
        [Description("Computes the point and tangent a given distance along the path.")]
        Sub ComputePointAtLength(ByVal Length As Single, ByRef worldTransform As D2D1_MATRIX_3X2_F, ByVal flatteningTolerance As Single, ByRef POINT As D2D1_POINT_2F, ByRef unitTangentVector As D2D1_POINT_2F)
        [Description("Get the geometry and widen it as well as apply an optional pen style.")]
        Sub Widen(ByVal strokeWidth As Single, ByVal strokeStyle As ID2D1StrokeStyle, ByRef worldTransform As D2D1_MATRIX_3X2_F, ByVal flatteningTolerance As Single, ByVal geometrySink As ID2D1SimplifiedGeometrySink)
    End Interface

    [InterfaceId("2CD90691-12E2-11DC-9FED-001143A055F9")]
    [Description("Represents a Direct2D drawing resource.")]
    [OleAutomation(False)]
    Interface ID2D1Resource Extends IUnknown
        [Description("Retrieve the factory associated with this resource.")]
        [PreserveSig] Sub GetFactory(factory As ID2D1Factory)
    End Interface

    [InterfaceId("2CD9069D-12E2-11DC-9FED-001143A055F9")]
    [Description("Describes the caps, miter limit, line join, and dash information for a stroke.")]
    [OleAutomation(False)]
    Interface ID2D1StrokeStyle Extends ID2D1Resource
        [PreserveSig]
        [Description("Retrieves the type of shape used at the beginning of a stroke.")]
        Function GetStartCap() As D2D1_CAP_STYLE
        [PreserveSig]
        [Description("Retrieves the type of shape used at the end of a stroke.")]
        Function GetEndCap() As D2D1_CAP_STYLE
        [PreserveSig]
        [Description("Gets a value that specifies how the ends of each dash are drawn.")]
        Function GetDashCap() As D2D1_CAP_STYLE
        [PreserveSig]
        [Description("Retrieves the limit on the ratio of the miter length to half the stroke's thickness.")]
        Function GetMiterLimit() As Single
        [PreserveSig]
        [Description("Retrieves the type of joint used at the vertices of a shape's outline.")]
        Function GetLineJoin() As D2D1_LINE_JOIN
        [PreserveSig]
        [Description("Retrieves a value that specifies how far in the dash sequence the stroke will start.")]
        Function GetDashOffset() As Single
        [PreserveSig]
        [Description("Gets a value that describes the stroke's dash pattern.")]
        Function GetDashStyle() As D2D1_DASH_STYLE
        [PreserveSig]
        [Description("Retrieves the number of entries in the dashes array.")]
        Function GetDashesCount() As Long
        [PreserveSig]
        [Description("Copies the dash pattern to the specified array.")]
        Sub GetDashes(ByRef dashes As Single, ByVal dashesCount As Long)
    End Interface

    [InterfaceId("2CD9069E-12E2-11DC-9FED-001143A055F9")]
    [Description("Describes a geometric path that does not contain quadratic bezier curves or arcs.")]
    [OleAutomation(False)]
    Interface ID2D1SimplifiedGeometrySink Extends IUnknown
        [PreserveSig]
        [Description("Specifies the method used to determine which points are inside the geometry described by this geometry sink and which points are outside.")]
        Sub SetFillMode(ByVal fillMode As D2D1_FILL_MODE)
        [PreserveSig]
        [Description("Specifies stroke and join options to be applied to new segments added to the geometry sink.")]
        Sub SetSegmentFlags(ByVal vertexFlags As D2D1_PATH_SEGMENT)
        [PreserveSig]
        [Description("Starts a new figure at the specified point. Copy a D2D1_POINT_2F into startPoint")]
        Sub BeginFigure(ByVal startPoint As LongLong, ByVal figureBegin As D2D1_FIGURE_BEGIN)
        [PreserveSig]
        [Description("Creates a sequence of lines using the specified points and adds them to the geometry sink.")]
        Sub AddLines(ByRef points As D2D1_POINT_2F, ByVal pointsCount As Long)
        [PreserveSig]
        [Description("Creates a sequence of cubic Bezier curves and adds them to the geometry sink.")]
        Sub AddBeziers(ByRef beziers As D2D1_BEZIER_SEGMENT, ByVal beziersCount As Long)
        [PreserveSig]
        [Description("Ends the current figure; optionally, closes it.")]
        Sub EndFigure(ByVal figureEnd As D2D1_FIGURE_END)
        [Description("Closes the geometry sink, indicates whether it is in an error state, and resets the sink's error state.")]
        Sub Close()
    End Interface

    [InterfaceId("2CD906C1-12E2-11DC-9FED-001143A055F9")]
    [Description("Populates an ID2D1Mesh object with triangles.")]
    [OleAutomation(False)]
    Interface ID2D1TessellationSink Extends IUnknown
        [PreserveSig]
        [Description("Copies the specified triangles to the sink.")]
        Sub AddTriangles(ByRef triangles As D2D1_TRIANGLE, ByVal trianglesCount As Long)
        [Description("Closes the sink and returns its error status.")]
        Sub Close()
    End Interface

    [InterfaceId("2CD906A3-12E2-11DC-9FED-001143A055F9")]
    [Description("Describes a rounded rectangle.")]
    [OleAutomation(False)]
    Interface ID2D1RoundedRectangleGeometry Extends ID2D1Geometry
        [PreserveSig]
        [Description("Retrieves a rounded rectangle that describes this rounded rectangle geometry.")]
        Sub GetRoundedRect(ByRef roundedRect As D2D1_ROUNDED_RECT)
    End Interface

    [InterfaceId("2CD906A4-12E2-11DC-9FED-001143A055F9")]
    [Description("Represents an ellipse.")]
    [OleAutomation(False)]
    Interface ID2D1EllipseGeometry Extends ID2D1Geometry
        [PreserveSig]
        [Description("Gets the D2D1_ELLIPSE structure that describes this ellipse geometry.")]
        Sub GetEllipse(ByRef ellipse As D2D1_ELLIPSE)
    End Interface

    [InterfaceId("2CD906A6-12E2-11DC-9FED-001143A055F9")]
    [Description("Represents a composite geometry, composed of other ID2D1Geometry objects.")]
    [OleAutomation(False)]
    Interface ID2D1GeometryGroup Extends ID2D1Geometry
        [PreserveSig]
        [Description("Indicates how the intersecting areas of the geometries contained in this geometry group are combined.")]
        Function GetFillMode() As D2D1_FILL_MODE
        [PreserveSig]
        [Description("Indicates the number of geometry objects in the geometry group.")]
        Function GetSourceGeometryCount() As Long
        [PreserveSig]
        [Description("Retrieves the geometries in the geometry group.")]
        Sub GetSourceGeometries(ByRef geometries As ID2D1Geometry, ByVal geometriesCount As Long)
    End Interface

    [InterfaceId("2CD906BB-12E2-11DC-9FED-001143A055F9")]
    [Description("Represents a geometry that has been transformed.")]
    [OleAutomation(False)]
    Interface ID2D1TransformedGeometry Extends ID2D1Geometry
        [Description("Retrieves the source geometry of this transformed geometry object.")]
        Function GetSourceGeometry() As ID2D1Geometry
        [PreserveSig]
        [Description("Retrieves the matrix used to transform the ID2D1TransformedGeometry object's source geometry.")]
        Sub GetTransform(ByRef transform As D2D1_MATRIX_3X2_F)
    End Interface

    [InterfaceId("2CD906A5-12E2-11DC-9FED-001143A055F9")]
    [Description("Represents a complex shape that may be composed of arcs, curves, and lines.")]
    [OleAutomation(False)]
    Interface ID2D1PathGeometry Extends ID2D1Geometry
        [Description("Retrieves the geometry sink that is used to populate the path geometry with figures and segments.")]
        Function Open() As ID2D1GeometrySink
        [Description("Copies the contents of the path geometry to the specified ID2D1GeometrySink.")]
        Sub Stream(ByVal geometrySink As ID2D1GeometrySink)
        [Description("Retrieves the number of segments in the path geometry.")]
        Function GetSegmentCount() As Long
        [Description("Retrieves the number of figures in the path geometry.")]
        Function GetFigureCount() As Long
    End Interface

    [InterfaceId("2CD9069F-12E2-11DC-9FED-001143A055F9")]
    [Description("Describes a geometric path that can contain lines, arcs, cubic Bezier curves, and quadratic Bezier curves.")]
    [OleAutomation(False)]
    Interface ID2D1GeometrySink Extends ID2D1SimplifiedGeometrySink
        [PreserveSig]
        [Description("Creates a line segment between the current point and the specified end point and adds it to the geometry sink. Copy a D2D1_POINT_2F into point.")]
        Sub AddLine(ByVal point As LongLong)
        [PreserveSig]
        [Description("Creates a cubic Bezier curve between the current point and the specified end point and adds it to the geometry sink.")]
        Sub AddBezier(ByRef bezier As D2D1_BEZIER_SEGMENT)
        [PreserveSig]
        [Description("Creates a quadratic Bezier curve between the current point and the specified end point and adds it to the geometry sink.")]
        Sub AddQuadraticBezier(ByRef bezier As D2D1_QUADRATIC_BEZIER_SEGMENT)
        [PreserveSig]
        [Description("Adds a sequence of quadratic Bezier segments as an array in a single call.")]
        Sub AddQuadraticBeziers(ByRef beziers As D2D1_QUADRATIC_BEZIER_SEGMENT, ByVal beziersCount As Long)
        [PreserveSig]
        [Description("Creates a single arc and adds it to the path geometry.")]
        Sub AddArc(ByRef arc As D2D1_ARC_SEGMENT)
    End Interface

    [InterfaceId("28506E39-EBF6-46A1-BB47-FD85565AB957")]
    [Description("Represents the drawing state of a render target: the antialiasing mode, transform, tags, and text-rendering options.")]
    [OleAutomation(False)]
    Interface ID2D1DrawingStateBlock Extends ID2D1Resource
        [PreserveSig]
        [Description("Retrieves the state currently contained within this state block resource.")]
        Sub GetDescription(ByRef stateDescription As D2D1_DRAWING_STATE_DESCRIPTION)
        [PreserveSig]
        [Description("Sets the state description of this state block resource.")]
        Sub SetDescription(ByRef stateDescription As D2D1_DRAWING_STATE_DESCRIPTION)
        [PreserveSig]
        [Description("Sets the text rendering parameters of this state block resource.")]
        Sub SetTextRenderingParams(ByVal textRenderingParams As IDWriteRenderingParams)
        [PreserveSig]
        [Description("Retrieves the text rendering parameters contained within this state block resource. If a Nothing text rendering parameter was specified, Nothing will be returned.")]
        Sub GetTextRenderingParams(ByRef textRenderingParams As IDWriteRenderingParams)
    End Interface

    [InterfaceId("2CD90694-12E2-11DC-9FED-001143A055F9")]
    [Description("Represents an object that can receive drawing commands. Interfaces that inherit from ID2D1RenderTarget render the drawing commands they receive in different ways.")]
    [OleAutomation(False)]
    Interface ID2D1RenderTarget Extends ID2D1Resource
        [Description("Create a D2D bitmap by copying from memory, or create uninitialized. Copy a D2D_SIZE_U type to a LongLong for the first parameter.")]
        Function CreateBitmap(ByVal size As LongLong, ByRef srcData As Any, ByVal pitch As Long, ByRef bitmapProperties As D2D1_BITMAP_PROPERTIES) As ID2D1Bitmap
        [Description("Create a D2D bitmap by copying a WIC bitmap.")]
        Function CreateBitmapFromWicBitmap(ByVal wicBitmapSource As IWICBitmapSource, ByRef bitmapProperties As D2D1_BITMAP_PROPERTIES) As ID2D1Bitmap
        [Description("Create a D2D bitmap by sharing bits from another resource. The bitmap must be compatible with the render target for the call to succeed.")]
        Function CreateSharedBitmap(ByRef riid As UUID, ByRef data As Any, ByRef bitmapProperties As D2D1_BITMAP_PROPERTIES) As ID2D1Bitmap
        [Description("Creates a bitmap brush. The bitmap is scaled, rotated, skewed or tiled to fill or pen a geometry.")]
        Function CreateBitmapBrush(ByVal bitmap As ID2D1Bitmap, ByRef bitmapBrushProperties As D2D1_BITMAP_BRUSH_PROPERTIES, ByRef brushProperties As D2D1_BRUSH_PROPERTIES) As ID2D1BitmapBrush
        [Description("Creates a new ID2D1SolidColorBrush that can be used to paint areas with a solid color.")]
        Function CreateSolidColorBrush(ByRef color As D2D1_COLOR_F, ByRef brushProperties As D2D1_BRUSH_PROPERTIES) As ID2D1SolidColorBrush
        [Description("Creates an ID2D1GradientStopCollection from the specified array of D2D1_GRADIENT_STOP structures.")]
        Function CreateGradientStopCollection(ByRef gradientStops As D2D1_GRADIENT_STOP, ByVal gradientStopsCount As Long, ByVal colorInterpolationGamma As D2D1_GAMMA, ByVal extendMode As D2D1_EXTEND_MODE) As ID2D1GradientStopCollection
        [Description("Creates an ID2D1LinearGradientBrush object for painting areas with a linear gradient.")]
        Function CreateLinearGradientBrush(ByRef linearGradientBrushProperties As D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES, ByRef brushProperties As D2D1_BRUSH_PROPERTIES, ByVal gradientStopCollection As ID2D1GradientStopCollection) As ID2D1LinearGradientBrush
        [Description("Creates an ID2D1RadialGradientBrush object that can be used to paint areas with a radial gradient.")]
        Function CreateRadialGradientBrush(ByRef radialGradientBrushProperties As D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES, ByRef brushProperties As D2D1_BRUSH_PROPERTIES, ByVal gradientStopCollection As ID2D1GradientStopCollection) As ID2D1RadialGradientBrush
        [Description("Creates a new bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target.")]
        Function CreateCompatibleRenderTarget(ByRef desiredSize As D2D1_SIZE_F, ByRef desiredPixelSize As D2D1_SIZE_U, ByRef desiredFormat As D2D1_PIXEL_FORMAT, ByVal Options As D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS) As ID2D1BitmapRenderTarget
        [Description("Creates a layer resource that can be used with this render target and its compatible render targets.")]
        Function CreateLayer(ByRef SIZE As D2D1_SIZE_F) As ID2D1Layer
        [Description("Create a mesh that uses triangles to describe a shape.")]
        Function CreateMesh() As ID2D1Mesh
        [PreserveSig]
        [Description("Draws a line between the specified points using the specified stroke style. Copy a D2D1_POINT_2F UDT into point0 and 1.")]
        Sub DrawLine(ByVal point0 As LongLong, ByVal point1 As LongLong, ByVal brush As ID2D1Brush, Optional ByVal strokeWidth As Single = 1, Optional ByVal strokeStyle As ID2D1StrokeStyle)
        [PreserveSig]
        [Description("Draws the outline of a rectangle that has the specified dimensions and stroke style.")]
        Sub DrawRectangle(ByRef RECT As D2D1_RECT_F, ByVal brush As ID2D1Brush, Optional ByVal strokeWidth As Single = 1, Optional ByVal strokeStyle As ID2D1StrokeStyle)
        [PreserveSig]
        [Description("Paints the interior of the specified rectangle.")]
        Sub FillRectangle(ByRef RECT As D2D1_RECT_F, ByVal brush As ID2D1Brush)
        [PreserveSig]
        [Description("Draws the outline of the specified rounded rectangle using the specified stroke style.")]
        Sub DrawRoundedRectangle(ByRef roundedRect As D2D1_ROUNDED_RECT, ByVal brush As ID2D1Brush, Optional ByVal strokeWidth As Single = 1, Optional ByVal strokeStyle As ID2D1StrokeStyle)
        [PreserveSig]
        [Description("Paints the interior of the specified rounded rectangle.")]
        Sub FillRoundedRectangle(ByRef roundedRect As D2D1_ROUNDED_RECT, ByVal brush As ID2D1Brush)
        [PreserveSig]
        [Description("Draws the outline of an ellipse with the specified dimensions and stroke.")]
        Sub DrawEllipse(ByRef ellipse As D2D1_ELLIPSE, ByVal brush As ID2D1Brush, Optional ByVal strokeWidth As Single = 1, Optional ByVal strokeStyle As ID2D1StrokeStyle)
        [PreserveSig]
        [Description("Paints the interior of the specified ellipse.")]
        Sub FillEllipse(ByRef ellipse As D2D1_ELLIPSE, ByVal brush As ID2D1Brush)
        [PreserveSig]
        [Description("Draws the outline of the specified geometry using the specified stroke style.")]
        Sub DrawGeometry(ByVal geometry As ID2D1Geometry, ByVal brush As ID2D1Brush, Optional ByVal strokeWidth As Single = 1, Optional ByVal strokeStyle As ID2D1StrokeStyle)
        [PreserveSig]
        [Description("Paints the interior of the specified geometry.")]
        Sub FillGeometry(ByVal geometry As ID2D1Geometry, ByVal brush As ID2D1Brush, Optional ByVal opacityBrush As ID2D1Brush)
        [PreserveSig]
        [Description("Paints the interior of the specified mesh.")]
        Sub FillMesh(ByVal mesh As ID2D1Mesh, ByVal brush As ID2D1Brush)
        [PreserveSig]
        [Description("Applies the opacity mask described by the specified bitmap to a brush and uses that brush to paint a region of the render target.")]
        Sub FillOpacityMask(ByVal opacityMask As ID2D1Bitmap, ByVal brush As ID2D1Brush, ByVal Content As D2D1_OPACITY_MASK_CONTENT, ByRef destinationRectangle As D2D1_RECT_F, ByRef sourceRectangle As D2D1_RECT_F)
        [PreserveSig]
        [Description("Draws the specified ID2D1Bitmap.")]
        Sub DrawBitmap(ByVal bitmap As ID2D1Bitmap, ByRef destinationRectangle As D2D1_RECT_F, ByVal opacity As Single, ByVal InterpolationMode As D2D1_BITMAP_INTERPOLATION_MODE, ByRef sourceRectangle As D2D1_RECT_F)
        [PreserveSig]
        [Description("Draws the specified text using the format information provided by an IDWriteTextFormat object.")]
        Sub DrawText(ByVal string As LongPtr, ByVal stringLength As Long, ByVal textFormat As IDWriteTextFormat, ByRef layoutRect As D2D1_RECT_F, ByVal defaultFillBrush As ID2D1Brush, Optional ByVal Options As D2D1_DRAW_TEXT_OPTIONS = 0, Optional ByVal measuringMode As DWRITE_MEASURING_MODE = 0)
        [PreserveSig]
        [Description("Draws the formatted text described by the specified IDWriteTextLayout object. Copy a D2D1_POINT_2F into origin.")]
        Sub DrawTextLayout(ByVal origin As LongLong, ByVal textLayout As IDWriteTextLayout, ByVal defaultFillBrush As ID2D1Brush, Optional ByVal Options As D2D1_DRAW_TEXT_OPTIONS = 0)
        [PreserveSig]
        [Description("Draws the specified glyphs.  Copy a D2D1_POINT_2F into baselineOrigin.")]
        Sub DrawGlyphRun(ByVal baselineOrigin As LongLong, ByRef glyphRun As DWRITE_GLYPH_RUN, ByVal foregroundBrush As ID2D1Brush, Optional ByVal measuringMode As DWRITE_MEASURING_MODE = 0)
        [PreserveSig]
        [Description("Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space.")]
        Sub SetTransform(ByRef transform As D2D1_MATRIX_3X2_F)
        [PreserveSig]
        [Description("Gets the current transform of the render target.")]
        Sub GetTransform(ByRef transform As D2D1_MATRIX_3X2_F)
        [PreserveSig]
        [Description("Sets the antialiasing mode of the render target. The antialiasing mode applies to all subsequent drawing operations, excluding text and glyph drawing operations.")]
        Sub SetAntialiasMode(ByVal antialiasMode As D2D1_ANTIALIAS_MODE)
        [PreserveSig]
        [Description("Retrieves the current antialiasing mode for nontext drawing operations.")]
        Function GetAntialiasMode() As D2D1_ANTIALIAS_MODE
        [PreserveSig]
        [Description("Specifies the antialiasing mode to use for subsequent text and glyph drawing operations.")]
        Sub SetTextAntialiasMode(ByVal textAntialiasMode As D2D1_TEXT_ANTIALIAS_MODE)
        [PreserveSig]
        [Description("Gets the current antialiasing mode for text and glyph drawing operations.")]
        Function GetTextAntialiasMode() As D2D1_TEXT_ANTIALIAS_MODE
        [PreserveSig]
        [Description("Specifies text rendering options to be applied to all subsequent text and glyph drawing operations.")]
        Sub SetTextRenderingParams(ByVal textRenderingParams As IDWriteRenderingParams)
        [Description("Retrieves the render target's current text rendering options.")]
        [PreserveSig]
        Sub GetTextRenderingParams(textRenderingParams As IDWriteRenderingParams)
        [PreserveSig]
        [Description("Specifies a label for subsequent drawing operations.")]
        Sub SetTags(ByVal tag1 As LongLong, ByVal tag2 As LongLong)
        [PreserveSig]
        [Description("Gets the label for subsequent drawing operations.")]
        Sub GetTags(ByRef tag1 As Any, ByRef tag2 As Any)
        [PreserveSig]
        [Description("Adds the specified layer to the render target so that it receives all subsequent drawing operations until PopLayer is called.")]
        Sub PushLayer(ByRef layerParameters As D2D1_LAYER_PARAMETERS, ByVal layer As ID2D1Layer)
        [PreserveSig]
        [Description("Stops redirecting drawing operations to the layer that is specified by the last PushLayer call.")]
        Sub PopLayer()
        [Description("Executes all pending drawing commands.")]
        Sub Flush(ByRef tag1 As Any, ByRef tag2 As Any)
        [PreserveSig]
        [Description("Saves the current drawing state to the specified ID2D1DrawingStateBlock.")]
        Sub SaveDrawingState(ByVal drawingStateBlock As ID2D1DrawingStateBlock)
        [PreserveSig]
        [Description("Sets the render target's drawing state to that of the specified ID2D1DrawingStateBlock.")]
        Sub RestoreDrawingState(ByVal drawingStateBlock As ID2D1DrawingStateBlock)
        [PreserveSig]
        [Description("Specifies a rectangle to which all subsequent drawing operations are clipped.")]
        Sub PushAxisAlignedClip(ByRef clipRect As D2D1_RECT_F, ByVal antialiasMode As D2D1_ANTIALIAS_MODE)
        [PreserveSig]
        [Description("Removes the last axis-aligned clip from the render target. After this method is called, the clip is no longer applied to subsequent drawing operations.")]
        Sub PopAxisAlignedClip()
        [PreserveSig]
        [Description("Clears the drawing area to the specified color.")]
        Sub Clear(ByRef clearColor As D2D1_COLOR_F)
        [PreserveSig]
        [Description("Initiates drawing on this render target.")]
        Sub BeginDraw()
        [Description("Ends drawing operations on the render target and indicates the current error state and associated tags.")]
        Sub EndDraw(tag1 As Any, tag2 As Any)
        [PreserveSig]
        [Description("Retrieves the pixel format and alpha mode of the render target.")]
        Function GetPixelFormat() As D2D1_PIXEL_FORMAT
        [PreserveSig]
        [Description("Sets the dots per inch (DPI) of the render target.")]
        Sub SetDpi(ByVal DpiX As Single, ByVal DpiY As Single)
        [PreserveSig]
        [Description("Return the render target's dots per inch (DPI).")]
        Sub GetDpi(ByRef DpiX As Single, ByRef DpiY As Single)
        [PreserveSig]
        [Description("Returns the size of the render target in device-independent pixels.")]
        Function GetSize() As D2D1_SIZE_F
        [PreserveSig]
        [Description("Returns the size of the render target in device pixels.")]
        Function GetPixelSize() As D2D1_SIZE_U
        [PreserveSig]
        [Description("Gets the maximum size, in device-dependent units (pixels), of any one bitmap dimension supported by the render target.")]
        Function GetMaximumBitmapSize() As Long
        [PreserveSig]
        [Description("Indicates whether the render target supports the specified properties.")]
        Function IsSupported(ByRef renderTargetProperties As D2D1_RENDER_TARGET_PROPERTIES) As BOOL
    End Interface

    [InterfaceId("A2296057-EA42-4099-983B-539FB6505426")]
    [Description("Root bitmap resource, linearly scaled on a draw call.")]
    [OleAutomation(False)]
    Interface ID2D1Bitmap Extends ID2D1Image
        [PreserveSig]
        [Description("Returns the size of the bitmap in resolution independent units.")]
        Function GetSize() As D2D1_SIZE_F
        [PreserveSig]
        [Description("Returns the size of the bitmap in resolution dependent units, (pixels).")]
        Function GetPixelSize() As D2D1_SIZE_U
        [PreserveSig]
        [Description("Retrieve the format of the bitmap.")]
        Function GetPixelFormat() As D2D1_PIXEL_FORMAT
        [PreserveSig]
        [Description("Return the DPI of the bitmap.")]
        Sub GetDpi(ByRef DpiX As Single, ByRef DpiY As Single)
        [Description("Copies the specified region from the specified bitmap into the current bitmap.")]
        Sub CopyFromBitmap(ByRef destPoint As D2D1_POINT_2U, ByVal bitmap As ID2D1Bitmap, ByRef srcRect As D2D1_RECT_U)
        [Description("Copies the specified region from the specified render target into the current bitmap.")]
        Sub CopyFromRenderTarget(ByRef destPoint As D2D1_POINT_2U, ByVal renderTarget As ID2D1RenderTarget, ByRef srcRect As D2D1_RECT_U)
        [Description("Copies the specified region from memory into the current bitmap.")]
        Sub CopyFromMemory(ByRef dstRect As D2D1_RECT_U, ByRef srcData As Any, ByVal pitch As Long)
    End Interface

    [InterfaceId("2CD906AA-12E2-11DC-9FED-001143A055F9")]
    [Description("A bitmap brush allows a bitmap to be used to fill a geometry.")]
    [OleAutomation(False)]
    Interface ID2D1BitmapBrush Extends ID2D1Brush
        [PreserveSig]
        [Description("Sets how the bitmap is to be treated outside of its natural extent on the X axis.")]
        Sub SetExtendModeX(ByVal extendModeX As D2D1_EXTEND_MODE)
        [PreserveSig]
        [Description("Sets how the bitmap is to be treated outside of its natural extent on the Y axis.")]
        Sub SetExtendModeY(ByVal extendModeY As D2D1_EXTEND_MODE)
        [PreserveSig]
        [Description("Sets the interpolation mode used when this brush is used.")]
        Sub SetInterpolationMode(ByVal InterpolationMode As D2D1_BITMAP_INTERPOLATION_MODE)
        [PreserveSig]
        [Description("Sets the bitmap associated as the source of this brush.")]
        Sub SetBitmap(ByVal bitmap As ID2D1Bitmap)
        [PreserveSig]
        [Description("Gets the method by which the brush horizontally tiles those areas that extend past its bitmap.")]
        Function GetExtendModeX() As D2D1_EXTEND_MODE
        [PreserveSig]
        [Description("Gets the method by which the brush vertically tiles those areas that extend past its bitmap.")]
        Function GetExtendModeY() As D2D1_EXTEND_MODE
        [PreserveSig]
        [Description("Gets the interpolation method used when the brush bitmap is scaled or rotated.")]
        Function GetInterpolationMode() As D2D1_BITMAP_INTERPOLATION_MODE
        [Description("Gets the bitmap source that this brush uses to paint.")]
        Function GetBitmap() As ID2D1Bitmap
    End Interface

    [InterfaceId("2CD906A8-12E2-11DC-9FED-001143A055F9")]
    [Description("The root brush interface. All brushes can be used to fill or pen a geometry.")]
    [OleAutomation(False)]
    Interface ID2D1Brush Extends ID2D1Resource
        [PreserveSig]
        [Description("Sets the opacity for when the brush is drawn over the entire fill of the brush.")]
        Sub SetOpacity(ByVal opacity As Single)
        [PreserveSig]
        [Description("Sets the transform that applies to everything drawn by the brush.")]
        Sub SetTransform(ByRef transform As D2D1_MATRIX_3X2_F)
        [PreserveSig]
        [Description("Gets the degree of opacity of this brush.")]
        Function GetOpacity() As Single
        [PreserveSig]
        [Description("Gets the transform applied to this brush.")]
        Sub GetTransform(ByRef transform As D2D1_MATRIX_3X2_F)
    End Interface

    [InterfaceId("2CD906A9-12E2-11DC-9FED-001143A055F9")]
    [Description("Paints an area with a solid color.")]
    [OleAutomation(False)]
    Interface ID2D1SolidColorBrush Extends ID2D1Brush
        [PreserveSig]
        [Description("Specifies the color of this solid color brush.")]
        Sub SetColor(ByRef color As D2D1_COLOR_F)
        [PreserveSig]
        [Description("Retrieves the color of the solid color brush.")]
        Function GetColor() As D2D1_COLOR_F
    End Interface

    [InterfaceId("2CD906A7-12E2-11DC-9FED-001143A055F9")]
    [Description("Represents an collection of gradient stops that can then be the source resource for either a linear or radial gradient brush.")]
    [OleAutomation(False)]
    Interface ID2D1GradientStopCollection Extends ID2D1Resource
        [PreserveSig]
        [Description("Returns the number of stops in the gradient.")]
        Function GetGradientStopCount() As Long
        [PreserveSig]
        [Description("Copies the gradient stops from the collection into the caller's interface.")]
        Sub GetGradientStops(ByRef gradientStops As D2D1_GRADIENT_STOP, ByVal gradientStopsCount As Long)
        [PreserveSig]
        [Description("Returns whether the interpolation occurs with 1.0 or 2.2 gamma.")]
        Function GetColorInterpolationGamma() As D2D1_GAMMA
        [PreserveSig]
        [Description("Indicates the behavior of the gradient outside the normalized gradient range.")]
        Function GetExtendMode() As D2D1_EXTEND_MODE
    End Interface

    [InterfaceId("2CD906AB-12E2-11DC-9FED-001143A055F9")]
    [Description("Paints an area with a linear gradient.")]
    [OleAutomation(False)]
    Interface ID2D1LinearGradientBrush Extends ID2D1Brush
        [PreserveSig]
        [Description("Sets the starting coordinates of the linear gradient in the brush's coordinate space. Copy a D2D1_POINT_F into startPoint.")]
        Sub SetStartPoint(ByVal startPoint As LongLong)
        [PreserveSig]
        [Description("Sets the end point of the gradient in local coordinate space. This is not influenced by the geometry being filled. Copy a D2D1_POINT_F into startPoint.")]
        Sub SetEndPoint(ByVal startPoint As LongLong)
        [PreserveSig]
        [Description("Retrieves the starting coordinates of the linear gradient.")]
        Function GetStartPoint() As D2D1_POINT_2F
        [PreserveSig]
        [Description("Retrieves the ending coordinates of the linear gradient.")]
        Function GetEndPoint() As D2D1_POINT_2F
        [Description("Retrieves the ID2D1GradientStopCollection associated with this linear gradient brush.")]
        Function GetGradientStopCollection() As ID2D1GradientStopCollection
    End Interface

    [InterfaceId("2CD906AC-12E2-11DC-9FED-001143A055F9")]
    [Description("Paints an area with a radial gradient.")]
    [OleAutomation(False)]
    Interface ID2D1RadialGradientBrush Extends ID2D1Brush
        [PreserveSig]
        [Description("Sets the center of the radial gradient. This will be in local coordinates and will not depend on the geometry being filled. Copy a D2D1_POINT_F into center")]
        Sub SetCenter(ByVal center As LongLong)
        [PreserveSig]
        [Description("Sets offset of the origin relative to the radial gradient center. Copy a D2D1_POINT_F into gradientOriginOffset")]
        Sub SetGradientOriginOffset(ByVal gradientOriginOffset As LongLong)
        [PreserveSig]
        [Description("Specifies the x-radius of the gradient ellipse, in the brush's coordinate space.")]
        Sub SetRadiusX(ByVal radiusX As Single)
        [PreserveSig]
        [Description("Specifies the y-radius of the gradient ellipse, in the brush's coordinate space.")]
        Sub SetRadiusY(ByVal radiusY As Single)
        [PreserveSig]
        [Description("Retrieves the center of the gradient ellipse.")]
        Function GetCenter() As D2D1_POINT_2F
        [PreserveSig]
        [Description("Retrieves the offset of the gradient origin relative to the gradient ellipse's center.")]
        Function GetGradientOriginOffset() As D2D1_POINT_2F
        [PreserveSig]
        [Description("Retrieves the x-radius of the gradient ellipse.")]
        Function GetRadiusX() As Single
        [PreserveSig]
        [Description("Retrieves the y-radius of the gradient ellipse.")]
        Function GetRadiusY() As Single
        [Description("Retrieves the ID2D1GradientStopCollection associated with this radial gradient brush object.")]
        Function GetGradientStopCollection() As ID2D1GradientStopCollection
    End Interface

    [InterfaceId("2CD90695-12E2-11DC-9FED-001143A055F9")]
    [Description("Renders to an intermediate texture created by the CreateCompatibleRenderTarget method.")]
    [OleAutomation(False)]
    Interface ID2D1BitmapRenderTarget Extends ID2D1RenderTarget
        [Description("Retrieves the bitmap for this render target. The returned bitmap can be used for drawing operations.")]
        Function GetBitmap() As ID2D1Bitmap
    End Interface

    [InterfaceId("2CD9069B-12E2-11DC-9FED-001143A055F9")]
    [Description("Represents the backing store required to render a layer.")]
    [OleAutomation(False)]
    Interface ID2D1Layer Extends ID2D1Resource
        [PreserveSig]
        [Description("Gets the size of the layer in device-independent pixels.")]
        Function GetSize() As D2D1_SIZE_F
    End Interface

    [InterfaceId("2CD906C2-12E2-11DC-9FED-001143A055F9")]
    [Description("Represents a set of vertices that form a list of triangles.")]
    [OleAutomation(False)]
    Interface ID2D1Mesh Extends ID2D1Resource
        [Description("Opens the mesh for population.")]
        Function Open() As ID2D1TessellationSink
    End Interface

    [InterfaceId("2CD90698-12E2-11DC-9FED-001143A055F9")]
    [Description("Renders drawing instructions to a window.")]
    [OleAutomation(False)]
    Interface ID2D1HwndRenderTarget Extends ID2D1RenderTarget
        [PreserveSig]
        [Description("Indicates whether the HWND associated with this render target is occluded.")]
        Function CheckWindowState() As D2D1_WINDOW_STATE
        [Description("Changes the size of the render target to the specified pixel size.")]
        Sub Resize(ByRef pixelSize As D2D1_SIZE_U)
        [PreserveSig]
        [Description("Returns the HWND associated with this render target.")]
        Function GetHwnd() As LongPtr
    End Interface

    [InterfaceId("1C51BC64-DE61-46FD-9899-63A5D8F03950")]
    [Description("Issues drawing commands to a GDI device context.")]
    [OleAutomation(False)]
    Interface ID2D1DCRenderTarget Extends ID2D1RenderTarget
        [Description("Binds the render target to the device context to which it issues drawing commands.")]
        Sub BindDC(ByVal hdc As LongPtr, ByRef pSubRect As RECT)
    End Interface

    [InterfaceId("E0DB51C3-6F77-4BAE-B3D5-E47509B35838")]
    [Description("Provides access to an device context that can accept GDI drawing commands.")]
    [OleAutomation(False)]
    Interface ID2D1GdiInteropRenderTarget Extends IUnknown
        [Description("Retrieves the device context associated with this render target.")]
        Function GetDC(ByVal mode As D2D1_DC_INITIALIZE_MODE) As LongPtr
        [Description("Indicates that drawing with the device context retrieved using the GetDC method is finished.")]
        Sub ReleaseDC(ByRef update As RECT)
    End Interface


    [InterfaceId("82237326-8111-4F7C-BCF4-B5C1175564FE")]
    [OleAutomation(False)]
    Interface ID2D1GdiMetafileSink Extends stdole.IUnknown
        Sub ProcessRecord(ByVal recordType As Long, ByRef recordData As Any, ByVal recordDataSize As Long)
    End Interface

    [InterfaceId("2F543DC3-CFC1-4211-864F-CFD91C6F3395")]
    [OleAutomation(False)]
    Interface ID2D1GdiMetafile Extends ID2D1Resource
        Sub Stream(ByVal sink As ID2D1GdiMetafileSink)
        Sub GetBounds(ByRef bounds As D2D1_RECT_F)
    End Interface

    [InterfaceId("65019F75-8DA2-497C-B32C-DFA34E48EDE6")]
    [OleAutomation(False)]
    Interface ID2D1Image Extends ID2D1Resource
    End Interface

    [InterfaceId("54D7898A-A061-40A7-BEC7-E465BCBA2C4F")]
    [OleAutomation(False)]
    Interface ID2D1CommandSink Extends stdole.IUnknown
        Sub BeginDraw()
        Sub EndDraw()
        Sub SetAntialiasMode(ByVal antialiasMode As D2D1_ANTIALIAS_MODE)
        Sub SetTags(ByVal tag1 As LongLong, ByVal tag2 As LongLong)
        Sub SetTextAntialiasMode(ByVal textAntialiasMode As D2D1_TEXT_ANTIALIAS_MODE)
        Sub SetTextRenderingParams(ByVal textRenderingParams As IDWriteRenderingParams)
        Sub SetTransform(ByRef transform As D2D1_MATRIX_3X2_F)
        Sub SetPrimitiveBlend(ByVal primitiveBlend As D2D1_PRIMITIVE_BLEND)
        Sub SetUnitMode(ByVal unitMode As D2D1_UNIT_MODE)
        Sub Clear(ByRef color As D2D1_COLOR_F)
        Sub DrawGlyphRun(ByVal baselineOrigin As LongLong, ByRef glyphRun As DWRITE_GLYPH_RUN, ByRef glyphRunDescription As DWRITE_GLYPH_RUN_DESCRIPTION, ByVal foregroundBrush As ID2D1Brush, ByVal measuringMode As DWRITE_MEASURING_MODE)
        Sub DrawLine(ByVal point0 As LongLong, ByVal point1 As LongLong, ByVal brush As ID2D1Brush, ByVal strokeWidth As Single, ByVal strokeStyle As ID2D1StrokeStyle)
        Sub DrawGeometry(ByVal geometry As ID2D1Geometry, ByVal brush As ID2D1Brush, ByVal strokeWidth As Single, ByVal strokeStyle As ID2D1StrokeStyle)
        Sub DrawRectangle(ByRef RECT As D2D1_RECT_F, ByVal brush As ID2D1Brush, ByVal strokeWidth As Single, ByVal strokeStyle As ID2D1StrokeStyle)
        Sub DrawBitmap(ByVal bitmap As ID2D1Bitmap, ByRef destinationRectangle As D2D1_RECT_F, ByVal opacity As Single, ByVal InterpolationMode As D2D1_INTERPOLATION_MODE, ByRef sourceRectangle As D2D1_RECT_F, ByRef perspectiveTransform As D2D1_MATRIX_4X4_F)
        Sub DrawImage(ByVal image As ID2D1Image, ByRef targetOffset As D2D1_POINT_2F, ByRef imageRectangle As D2D1_RECT_F, ByVal InterpolationMode As D2D1_INTERPOLATION_MODE, ByVal compositeMode As D2D1_COMPOSITE_MODE)
        Sub DrawGdiMetafile(ByVal gdiMetafile As ID2D1GdiMetafile, ByRef targetOffset As D2D1_POINT_2F)
        Sub FillMesh(ByVal mesh As ID2D1Mesh, ByVal brush As ID2D1Brush)
        Sub FillOpacityMask(ByVal opacityMask As ID2D1Bitmap, ByVal brush As ID2D1Brush, ByRef destinationRectangle As D2D1_RECT_F, ByRef sourceRectangle As D2D1_RECT_F)
        Sub FillGeometry(ByVal geometry As ID2D1Geometry, ByVal brush As ID2D1Brush, ByVal opacityBrush As ID2D1Brush)
        Sub FillRectangle(ByRef RECT As D2D1_RECT_F, ByVal brush As ID2D1Brush)
        Sub PushAxisAlignedClip(ByRef clipRect As D2D1_RECT_F, ByVal antialiasMode As D2D1_ANTIALIAS_MODE)
        Sub PushLayer(ByRef layerParameters1 As D2D1_LAYER_PARAMETERS1, ByVal layer As ID2D1Layer)
        Sub PopAxisAlignedClip()
        Sub PopLayer()
    End Interface

    [InterfaceId("B4F34A19-2383-4D76-94F6-EC343657C3DC")]
    [OleAutomation(False)]
    Interface ID2D1CommandList Extends ID2D1Image
        Sub Stream(ByVal sink As ID2D1CommandSink)
        Sub Close()
    End Interface

    [InterfaceId("2C1D867D-C290-41C8-AE7E-34A98702E9A5")]
    [OleAutomation(False)]
    Interface ID2D1PrintControl Extends stdole.IUnknown
        Sub AddPage(ByVal commandList As ID2D1CommandList, ByVal pageSize As LongLong, ByVal pagePrintTicketStream As IStream, ByRef tag1 As LongLong, ByRef tag2 As LongLong)
        Sub Close()
    End Interface

    [InterfaceId("FE9E984D-3F95-407C-B5DB-CB94D4E8F87C")]
    [OleAutomation(False)]
    Interface ID2D1ImageBrush Extends ID2D1Brush
        [PreserveSig]
        Sub SetImage(ByVal image As ID2D1Image)
        [PreserveSig]
        Sub SetExtendModeX(ByVal extendModeX As D2D1_EXTEND_MODE)
        [PreserveSig]
        Sub SetExtendModeY(ByVal extendModeY As D2D1_EXTEND_MODE)
        [PreserveSig]
        Sub SetInterpolationMode(ByVal InterpolationMode As D2D1_INTERPOLATION_MODE)
        [PreserveSig]
        Sub SetSourceRectangle(ByRef sourceRectangle As D2D1_RECT_F)
        [PreserveSig]
        Sub GetImage(ByRef image As ID2D1Image)
        [PreserveSig]
        Function GetExtendModeX() As D2D1_EXTEND_MODE
        [PreserveSig]
        Function GetExtendModeY() As D2D1_EXTEND_MODE
        [PreserveSig]
        Function GetInterpolationMode() As D2D1_INTERPOLATION_MODE
        [PreserveSig]
        Sub GetSourceRectangle(ByRef sourceRectangle As D2D1_RECT_F)
    End Interface

    [InterfaceId("41343A53-E41A-49A2-91CD-21793BBB62E5")]
    [OleAutomation(False)]
    Interface ID2D1BitmapBrush1 Extends ID2D1BitmapBrush
        [PreserveSig]
        Sub SetInterpolationMode1(ByVal InterpolationMode As D2D1_INTERPOLATION_MODE)
        [PreserveSig]
        Function GetInterpolationMode1() As D2D1_INTERPOLATION_MODE
    End Interface

    [InterfaceId("10A72A66-E91C-43F4-993F-DDF4B82B0B4A")]
    [OleAutomation(False)]
    Interface ID2D1StrokeStyle1 Extends ID2D1StrokeStyle
        [PreserveSig]
        Function GetStrokeTransformType() As D2D1_STROKE_TRANSFORM_TYPE
    End Interface

    [InterfaceId("62BAA2D2-AB54-41B7-B872-787E0106A421")]
    [OleAutomation(False)]
    Interface ID2D1PathGeometry1 Extends ID2D1PathGeometry
        Sub ComputePointAndSegmentAtLength(ByVal Length As Single, ByVal startSegment As Long, ByRef worldTransform As D2D1_MATRIX_3X2_F, ByVal flatteningTolerance As Single, ByRef pointDescription As D2D1_POINT_DESCRIPTION)
    End Interface

    [InterfaceId("483473D7-CD46-4F9D-9D3A-3112AA80159D")]
    [OleAutomation(False)]
    Interface ID2D1Properties Extends stdole.IUnknown
        [PreserveSig]
        Function GetPropertyCount() As Long
        Sub GetPropertyName(ByVal index As Long, ByVal Name As LongPtr, ByVal nameCount As Long)
        [PreserveSig]
        Function GetPropertyNameLength(ByVal index As Long) As Long
        [PreserveSig]
        Function GetType(ByVal index As Long) As D2D1_PROPERTY_TYPE
        [PreserveSig]
        Function GetPropertyIndex(ByVal Name As LongPtr) As Long
        Sub SetValueByName(ByVal Name As LongPtr, ByVal type As D2D1_PROPERTY_TYPE, ByRef data As Any, ByVal DataSize As Long)
        Sub SetValue(ByVal index As Long, ByVal type As D2D1_PROPERTY_TYPE, ByRef data As Any, ByVal DataSize As Long)
        Sub GetValueByName(ByVal Name As LongPtr, ByVal type As D2D1_PROPERTY_TYPE, ByRef data As Any, ByVal DataSize As Long)
        Sub GetValue(ByVal index As Long, ByVal type As D2D1_PROPERTY_TYPE, ByRef data As Any, ByVal DataSize As Long)
        [PreserveSig]
        Function GetValueSize(ByVal index As Long) As Long
        Sub GetSubProperties(ByVal index As Long, ByRef subProperties As ID2D1Properties)
    End Interface

    [InterfaceId("28211A43-7D89-476F-8181-2D6159B220AD")]
    [OleAutomation(False)]
    Interface ID2D1Effect Extends ID2D1Properties
        [PreserveSig]
        Sub SetInput(ByVal index As Long, ByVal input As ID2D1Image, Optional ByVal Invalidate As BOOL = CTRUE)
        Sub SetInputCount(ByVal inputCount As Long)
        [PreserveSig]
        Sub GetInput(ByVal index As Long, ByRef input As ID2D1Image)
        [PreserveSig]
        Function GetInputCount() As Long
        [PreserveSig]
        Sub GetOutput(outputImage As ID2D1Image)
    End Interface

    [InterfaceId("A898A84C-3873-4588-B08B-EBBF978DF041")]
    [OleAutomation(False)]
    Interface ID2D1Bitmap1 Extends ID2D1Bitmap
        [PreserveSig]
        Sub GetColorContext(ByRef colorContext As ID2D1ColorContext)
        [PreserveSig]
        Function GetOptions() As D2D1_BITMAP_OPTIONS
        Sub GetSurface(ByRef dxgiSurface As IDXGISurface)
        Sub Map(ByVal Options As D2D1_MAP_OPTIONS, ByRef mappedRect As D2D1_MAPPED_RECT)
        Sub Unmap()
    End Interface

    [InterfaceId("1C4820BB-5771-4518-A581-2FE4DD0EC657")]
    [OleAutomation(False)]
    Interface ID2D1ColorContext Extends ID2D1Resource
        [PreserveSig]
        Function GetColorSpace() As D2D1_COLOR_SPACE
        [PreserveSig]
        Function GetProfileSize() As Long
        Sub GetProfile(ByRef profile As Byte, ByVal profileSize As Long)
    End Interface

    [InterfaceId("AE1572F4-5DD0-4777-998B-9279472AE63B")]
    [OleAutomation(False)]
    Interface ID2D1GradientStopCollection1 Extends ID2D1GradientStopCollection
        [PreserveSig]
        Sub GetGradientStops1(ByRef gradientStops As D2D1_GRADIENT_STOP, ByVal gradientStopsCount As Long)
        [PreserveSig]
        Function GetPreInterpolationSpace() As D2D1_COLOR_SPACE
        [PreserveSig]
        Function GetPostInterpolationSpace() As D2D1_COLOR_SPACE
        [PreserveSig]
        Function GetBufferPrecision() As D2D1_BUFFER_PRECISION
        [PreserveSig]
        Function GetColorInterpolationMode() As D2D1_COLOR_INTERPOLATION_MODE
    End Interface

    [InterfaceId("689F1F85-C72E-4E33-8F19-85754EFD5ACE")]
    [OleAutomation(False)]
    Interface ID2D1DrawingStateBlock1 Extends ID2D1DrawingStateBlock
        [PreserveSig]
        Sub GetDescription(ByRef stateDescription As D2D1_DRAWING_STATE_DESCRIPTION1)
        [PreserveSig]
        Sub SetDescription(ByRef stateDescription As D2D1_DRAWING_STATE_DESCRIPTION1)
    End Interface

    [InterfaceId("E8F7FE7A-191C-466D-AD95-975678BDA998")]
    [OleAutomation(False)]
    Interface ID2D1DeviceContext Extends ID2D1RenderTarget
        Sub CreateBitmap(ByVal SIZE As LongLong, ByRef sourceData As Any, ByVal pitch As Long, ByRef bitmapProperties As D2D1_BITMAP_PROPERTIES1, ByRef bitmap As ID2D1Bitmap1)
        Sub CreateBitmapFromWicBitmap(ByVal wicBitmapSource As IWICBitmapSource, ByRef bitmapProperties As D2D1_BITMAP_PROPERTIES1, ByRef bitmap As ID2D1Bitmap1)
        Sub CreateColorContext(ByVal space As D2D1_COLOR_SPACE, ByRef profile As Byte, ByVal profileSize As Long, ByRef colorContext As ID2D1ColorContext)
        Sub CreateColorContextFromFilename(ByVal FileName As LongPtr, ByRef colorContext As ID2D1ColorContext)
        Sub CreateColorContextFromWicColorContext(ByVal wicColorContext As IWICColorContext, ByRef colorContext As ID2D1ColorContext)
        Function CreateBitmapFromDxgiSurface(ByVal surface As IDXGISurface, ByRef bitmapProperties As D2D1_BITMAP_PROPERTIES1) As ID2D1Bitmap1
        Function CreateEffect(ByRef effectId As UUID) As ID2D1Effect
        Sub CreateGradientStopCollection(ByRef straightAlphaGradientStops As D2D1_GRADIENT_STOP, ByVal straightAlphaGradientStopsCount As Long, ByVal preInterpolationSpace As D2D1_COLOR_SPACE, ByVal postInterpolationSpace As D2D1_COLOR_SPACE, ByVal bufferPrecision As D2D1_BUFFER_PRECISION, ByVal extendMode As D2D1_EXTEND_MODE, ByVal colorInterpolationMode As D2D1_COLOR_INTERPOLATION_MODE, ByRef gradientStopCollection1 As ID2D1GradientStopCollection1)
        Sub CreateImageBrush(ByVal image As ID2D1Image, ByRef imageBrushProperties As D2D1_IMAGE_BRUSH_PROPERTIES, ByRef brushProperties As D2D1_BRUSH_PROPERTIES, ByRef imageBrush As ID2D1ImageBrush)
        Sub CreateBitmapBrush(ByVal bitmap As ID2D1Bitmap, ByRef bitmapBrushProperties As D2D1_BITMAP_BRUSH_PROPERTIES1, ByRef brushProperties As D2D1_BRUSH_PROPERTIES, ByRef bitmapBrush As ID2D1BitmapBrush1)
        Sub CreateCommandList(ByRef commandList As ID2D1CommandList)
        [PreserveSig]
        Function IsDxgiFormatSupported(ByVal Format As DXGI_FORMAT) As Long
        [PreserveSig]
        Function IsBufferPrecisionSupported(ByVal bufferPrecision As D2D1_BUFFER_PRECISION) As Long
        Sub GetImageLocalBounds(ByVal image As ID2D1Image, ByRef localBounds As D2D1_RECT_F)
        Sub GetImageWorldBounds(ByVal image As ID2D1Image, ByRef worldBounds As D2D1_RECT_F)
        Sub GetGlyphRunWorldBounds(ByVal baselineOrigin As LongLong, ByRef glyphRun As DWRITE_GLYPH_RUN, ByVal measuringMode As DWRITE_MEASURING_MODE, ByRef bounds As D2D1_RECT_F)
        [PreserveSig]
        Sub GetDevice(ByRef device As ID2D1Device)
        [PreserveSig]
        Sub SetTarget(ByVal image As ID2D1Image)
        [PreserveSig]
        Sub GetTarget(ByRef image As ID2D1Image)
        [PreserveSig]
        Sub SetRenderingControls(ByRef renderingControls As D2D1_RENDERING_CONTROLS)
        [PreserveSig]
        Sub GetRenderingControls(ByRef renderingControls As D2D1_RENDERING_CONTROLS)
        [PreserveSig]
        Sub SetPrimitiveBlend(ByVal primitiveBlend As D2D1_PRIMITIVE_BLEND)
        [PreserveSig]
        Function GetPrimitiveBlend() As D2D1_PRIMITIVE_BLEND
        [PreserveSig]
        Sub SetUnitMode(ByVal unitMode As D2D1_UNIT_MODE)
        [PreserveSig]
        Function GetUnitMode() As D2D1_UNIT_MODE
        [PreserveSig]
        Sub DrawGlyphRun(ByVal baselineOrigin As LongLong, ByRef glyphRun As DWRITE_GLYPH_RUN, ByRef glyphRunDescription As DWRITE_GLYPH_RUN_DESCRIPTION, ByVal foregroundBrush As ID2D1Brush, ByVal measuringMode As DWRITE_MEASURING_MODE)
        [PreserveSig]
        Sub DrawImage(ByVal image As ID2D1Image, ByRef targetOffset As D2D1_POINT_2F, ByRef imageRectangle As D2D1_RECT_F, Optional ByVal InterpolationMode As D2D1_INTERPOLATION_MODE = 1, Optional ByVal compositeMode As D2D1_COMPOSITE_MODE = 0)
        [PreserveSig]
        Sub DrawGdiMetafile(ByVal gdiMetafile As ID2D1GdiMetafile, ByRef targetOffset As D2D1_POINT_2F)
        [PreserveSig]
        Sub DrawBitmap(ByVal bitmap As ID2D1Bitmap, ByRef destinationRectangle As D2D1_RECT_F, ByVal opacity As Single, ByVal InterpolationMode As D2D1_INTERPOLATION_MODE, ByRef sourceRectangle As D2D1_RECT_F, ByRef perspectiveTransform As D2D1_MATRIX_4X4_F)
        [PreserveSig]
        Sub PushLayer(ByRef layerParameters As D2D1_LAYER_PARAMETERS1, ByVal layer As ID2D1Layer)
        Sub InvalidateEffectInputRectangle(ByVal effect As ID2D1Effect, ByVal input As Long, ByRef inputRectangle As D2D1_RECT_F)
        Sub GetEffectInvalidRectangleCount(ByVal effect As ID2D1Effect, ByRef rectangleCount As Long)
        Sub GetEffectInvalidRectangles(ByVal effect As ID2D1Effect, ByRef rectangles As D2D1_RECT_F, ByVal rectanglesCount As Long)
        Sub GetEffectRequiredInputRectangles(ByVal renderEffect As ID2D1Effect, ByRef renderImageRectangle As D2D1_RECT_F, ByRef inputDescriptions As D2D1_EFFECT_INPUT_DESCRIPTION, ByRef requiredInputRects As D2D1_RECT_F, ByVal inputCount As Long)
        [PreserveSig]
        Sub FillOpacityMask(ByVal opacityMask As ID2D1Bitmap, ByVal brush As ID2D1Brush, ByRef destinationRectangle As D2D1_RECT_F, ByRef sourceRectangle As D2D1_RECT_F)
    End Interface

    [InterfaceId("47DD575D-AC05-4CDD-8049-9B02CD16F44C")]
    [OleAutomation(False)]
    Interface ID2D1Device Extends ID2D1Resource
        Sub CreateDeviceContext(ByVal Options As D2D1_DEVICE_CONTEXT_OPTIONS, ByRef deviceContext As ID2D1DeviceContext)
        Sub CreatePrintControl(ByVal wicFactory As IWICImagingFactory, ByVal documentTarget As IPrintDocumentPackageTarget, ByRef printControlProperties As D2D1_PRINT_CONTROL_PROPERTIES, ByRef printControl As ID2D1PrintControl)
        [PreserveSig]
        Sub SetMaximumTextureMemory(ByVal maximumInBytes As LongLong)
        [PreserveSig]
        Function GetMaximumTextureMemory() As LongLong
        [PreserveSig]
        Sub ClearResources(ByVal millisecondsSinceUse As Long)
    End Interface


    [InterfaceId("BB12D362-DAEE-4B9A-AA1D-14BA401CFA1F")]
    [OleAutomation(False)]
    Interface ID2D1Factory1 Extends ID2D1Factory
        Sub CreateDevice(ByVal dxgiDevice As IDXGIDevice, ByRef d2dDevice As ID2D1Device)
        Sub CreateStrokeStyle(ByRef strokeStyleProperties As D2D1_STROKE_STYLE_PROPERTIES1, ByRef dashes As Single, ByVal dashesCount As Long, ByRef strokeStyle As ID2D1StrokeStyle1)
        Sub CreatePathGeometry(ByRef pathGeometry As ID2D1PathGeometry1)
        Sub CreateDrawingStateBlock(ByRef drawingStateDescription As D2D1_DRAWING_STATE_DESCRIPTION1, ByVal textRenderingParams As IDWriteRenderingParams, ByRef drawingStateBlock As ID2D1DrawingStateBlock1)
        Sub CreateGdiMetafile(ByVal metafileStream As IStream, ByRef metafile As ID2D1GdiMetafile)
        Sub RegisterEffectFromStream(ByRef ClassId As UUID, ByVal propertyXml As IStream, ByRef bindings As D2D1_PROPERTY_BINDING, ByVal bindingsCount As Long, ByVal effectFactory As LongPtr)
        Sub RegisterEffectFromString(ByRef ClassId As UUID, ByVal propertyXml As LongPtr, ByRef bindings As D2D1_PROPERTY_BINDING, ByVal bindingsCount As Long, ByVal effectFactory As LongPtr)
        Sub UnregisterEffect(ByRef ClassId As UUID)
        Sub GetRegisteredEffects(ByRef effects As UUID, ByVal effectsCount As Long, ByRef effectsReturned As Long, ByRef effectsRegistered As Long)
        Sub GetEffectProperties(ByRef effectId As UUID, ByRef d2d1properties As ID2D1Properties)
    End Interface

    [InterfaceId("31E6E7BC-E0FF-4D46-8C64-A0A8C41C15D3")]
    [OleAutomation(False)]
    Interface ID2D1Multithread Extends stdole.IUnknown
        [PreserveSig]
        Function GetMultithreadProtected() As Long
        [PreserveSig]
        Sub Enter()
        [PreserveSig]
        Sub Leave()
    End Interface


    [InterfaceId("A16907D7-BC02-4801-99E8-8CF7F485F774")]
    [OleAutomation(False)]
    Interface ID2D1GeometryRealization Extends ID2D1Resource
    End Interface

    [InterfaceId("D37F57E4-6908-459F-A199-E72F24F79987")]
    [OleAutomation(False)]
    Interface ID2D1DeviceContext1 Extends ID2D1DeviceContext
        Sub CreateFilledGeometryRealization(ByVal geometry As ID2D1Geometry, ByVal flatteningTolerance As Single, ByRef geometryRealization As ID2D1GeometryRealization)
        Sub CreateStrokedGeometryRealization(ByVal geometry As ID2D1Geometry, ByVal flatteningTolerance As Single, ByVal strokeWidth As Single, ByVal strokeStyle As ID2D1StrokeStyle, ByRef geometryRealization As ID2D1GeometryRealization)
        [PreserveSig]
        Sub DrawGeometryRealization(ByVal geometryRealization As ID2D1GeometryRealization, ByVal brush As ID2D1Brush)
    End Interface

    [InterfaceId("D21768E1-23A4-4823-A14B-7C3EBA85D658")]
    [OleAutomation(False)]
    Interface ID2D1Device1 Extends ID2D1Device
        [PreserveSig]
        Function GetRenderingPriority() As D2D1_RENDERING_PRIORITY
        [PreserveSig]
        Sub SetRenderingPriority(ByVal renderingPriority As D2D1_RENDERING_PRIORITY)
        Sub CreateDeviceContext(ByVal Options As D2D1_DEVICE_CONTEXT_OPTIONS, ByRef deviceContext1 As ID2D1DeviceContext1)
    End Interface

    [InterfaceId("94F81A73-9212-4376-9C58-B16A3A0D3992")]
    [OleAutomation(False)]
    Interface ID2D1Factory2 Extends ID2D1Factory1
        Sub CreateDevice(ByVal dxgiDevice As IDXGIDevice, ByRef d2dDevice1 As ID2D1Device1)
    End Interface

    [InterfaceId("9EB767FD-4269-4467-B8C2-EB30CB305743")]
    [OleAutomation(False)]
    Interface ID2D1CommandSink1 Extends ID2D1CommandSink
        Sub SetPrimitiveBlend1(ByVal primitiveBlend As D2D1_PRIMITIVE_BLEND)
    End Interface


    [InterfaceId("BAE8B344-23FC-4071-8CB5-D05D6F073848")]
    [OleAutomation(False)]
    Interface ID2D1InkStyle Extends ID2D1Resource
        [PreserveSig]
        Sub SetNibTransform(ByRef transform As D2D1_MATRIX_3X2_F)
        [PreserveSig]
        Sub GetNibTransform(ByRef transform As D2D1_MATRIX_3X2_F)
        [PreserveSig]
        Sub SetNibShape(ByVal nibShape As D2D1_INK_NIB_SHAPE)
        [PreserveSig]
        Function GetNibShape() As D2D1_INK_NIB_SHAPE
    End Interface

    [InterfaceId("B499923B-7029-478F-A8B3-432C7C5F5312")]
    [OleAutomation(False)]
    Interface ID2D1Ink Extends ID2D1Resource
        [PreserveSig]
        Sub SetStartPoint(ByRef startPoint As D2D1_INK_POINT)
        [PreserveSig]
        Function GetStartPoint() As D2D1_INK_POINT
        Sub AddSegments(ByRef segments As D2D1_INK_BEZIER_SEGMENT, ByVal segmentsCount As Long)
        Sub RemoveSegmentsAtEnd(ByVal segmentsCount As Long)
        Sub SetSegments(ByVal startSegment As Long, ByRef segments As D2D1_INK_BEZIER_SEGMENT, ByVal segmentsCount As Long)
        Sub SetSegmentAtEnd(ByRef segment As D2D1_INK_BEZIER_SEGMENT)
        [PreserveSig]
        Function GetSegmentCount() As Long
        Sub GetSegments(ByVal startSegment As Long, ByRef segments As D2D1_INK_BEZIER_SEGMENT, ByVal segmentsCount As Long)
        Sub StreamAsGeometry(ByVal inkStyle As ID2D1InkStyle, ByRef worldTransform As D2D1_MATRIX_3X2_F, ByVal flatteningTolerance As Single, ByVal geometrySink As ID2D1SimplifiedGeometrySink)
        Sub GetBounds(ByVal inkStyle As ID2D1InkStyle, ByRef worldTransform As D2D1_MATRIX_3X2_F, ByRef bounds As D2D1_RECT_F)
    End Interface

    [InterfaceId("F292E401-C050-4CDE-83D7-04962D3B23C2")]
    [OleAutomation(False)]
    Interface ID2D1GradientMesh Extends ID2D1Resource
        [PreserveSig]
        Function GetPatchCount() As Long
        Sub GetPatches(ByVal StartIndex As Long, ByRef patches As D2D1_GRADIENT_MESH_PATCH, ByVal patchesCount As Long)
    End Interface

    [InterfaceId("C9B664E5-74A1-4378-9AC2-EEFC37A3F4D8")]
    [OleAutomation(False)]
    Interface ID2D1ImageSource Extends ID2D1Image
        Sub OfferResources()
        Sub TryReclaimResources(ByVal resourcesDiscarded As BOOL)
    End Interface

    [InterfaceId("77395441-1C8F-4555-8683-F50DAB0FE792")]
    [OleAutomation(False)]
    Interface ID2D1ImageSourceFromWic Extends ID2D1ImageSource
        Sub EnsureCached(ByRef rectangleToFill As D2D1_RECT_U)
        Sub TrimCache(ByRef rectangleToPreserve As D2D1_RECT_U)
        [PreserveSig]
        Sub GetSource(ByRef wicBitmapSource As IWICBitmapSource)
    End Interface

    [InterfaceId("7F1F79E5-2796-416C-8F55-700F911445E5")]
    [OleAutomation(False)]
    Interface ID2D1TransformedImageSource Extends ID2D1Image
        [PreserveSig]
        Sub GetSource(ByRef imageSource As ID2D1ImageSource)
        [PreserveSig]
        Sub GetProperties(ByRef imageSrcProperties As D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES)
    End Interface

    [InterfaceId("53DD9855-A3B0-4D5B-82E1-26E25C5E5797")]
    [OleAutomation(False)]
    Interface ID2D1LookupTable3D Extends ID2D1Resource
    End Interface

    [InterfaceId("394EA6A3-0C34-4321-950B-6CA20F0BE6C7")]
    [OleAutomation(False)]
    Interface ID2D1DeviceContext2 Extends ID2D1DeviceContext1
        Sub CreateInk(ByRef startPoint As D2D1_INK_POINT, ByRef ink As ID2D1Ink)
        Sub CreateInkStyle(ByRef inkStyleProperties As D2D1_INK_STYLE_PROPERTIES, ByRef inkStyle As ID2D1InkStyle)
        Sub CreateGradientMesh(ByRef patches As D2D1_GRADIENT_MESH_PATCH, ByVal patchesCount As Long, ByRef gradientMesh As ID2D1GradientMesh)
        Sub CreateImageSourceFromWic(ByVal wicBitmapSource As IWICBitmapSource, ByVal loadingOptions As D2D1_IMAGE_SOURCE_LOADING_OPTIONS, ByVal AlphaMode As D2D1_ALPHA_MODE, ByRef imageSource As ID2D1ImageSourceFromWic)
        Sub CreateLookupTable3D(ByVal precision As D2D1_BUFFER_PRECISION, ByRef extents As Long, ByRef data As Byte, ByVal dataCount As Long, ByRef strides As Long, ByRef lookupTable As ID2D1LookupTable3D)
        Sub CreateImageSourceFromDxgi(ByRef surfaces As IDXGISurface, ByVal surfaceCount As Long, ByVal ColorSpace As DXGI_COLOR_SPACE_TYPE, ByVal Options As D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, ByRef imageSource As ID2D1ImageSource)
        Sub GetGradientMeshWorldBounds(ByVal gradientMesh As ID2D1GradientMesh, ByRef pBounds As D2D1_RECT_F)
        [PreserveSig]
        Sub DrawInk(ByVal ink As ID2D1Ink, ByVal brush As ID2D1Brush, ByVal inkStyle As ID2D1InkStyle)
        [PreserveSig]
        Sub DrawGradientMesh(ByVal gradientMesh As ID2D1GradientMesh)
        [PreserveSig]
        Sub DrawGdiMetafile(ByVal gdiMetafile As ID2D1GdiMetafile, ByRef destinationRectangle As D2D1_RECT_F, ByRef sourceRectangle As D2D1_RECT_F)
        Sub CreateTransformedImageSource(ByVal imageSource As ID2D1ImageSource, ByRef imgSrcProperties As D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES, ByRef transformedImageSource As ID2D1TransformedImageSource)
    End Interface

    [InterfaceId("A44472E1-8DFB-4E60-8492-6E2861C9CA8B")]
    [OleAutomation(False)]
    Interface ID2D1Device2 Extends ID2D1Device1
        Sub CreateDeviceContext(ByVal Options As D2D1_DEVICE_CONTEXT_OPTIONS, ByRef deviceContext2 As ID2D1DeviceContext2)
        [PreserveSig]
        Sub FlushDeviceContexts(ByVal bitmap As ID2D1Bitmap)
        Sub GetDxgiDevice(ByRef dxgiDevice As IDXGIDevice)
    End Interface

    [InterfaceId("0869759F-4F00-413F-B03E-2BDA45404D0F")]
    [OleAutomation(False)]
    Interface ID2D1Factory3 Extends ID2D1Factory2
        Sub CreateDevice(ByVal dxgiDevice As IDXGIDevice, ByRef d2dDevice2 As ID2D1Device2)
    End Interface

    [InterfaceId("3BAB440E-417E-47DF-A2E2-BC0BE6A00916")]
    [OleAutomation(False)]
    Interface ID2D1CommandSink2 Extends ID2D1CommandSink1
        Sub DrawInk(ByVal ink As ID2D1Ink, ByVal brush As ID2D1Brush, ByVal inkStyle As ID2D1InkStyle)
        Sub DrawGradientMesh(ByVal gradientMesh As ID2D1GradientMesh)
        Sub DrawGdiMetafile(ByVal gdiMetafile As ID2D1GdiMetafile, ByRef destinationRectangle As D2D1_RECT_F, ByRef sourceRectangle As D2D1_RECT_F)
    End Interface

    [InterfaceId("2E69F9E8-DD3F-4BF9-95BA-C04F49D788DF")]
    [OleAutomation(False)]
    Interface ID2D1GdiMetafile1 Extends ID2D1GdiMetafile
        Sub GetDpi(ByRef DpiX As Single, ByRef DpiY As Single)
        Sub GetSourceBounds(ByRef bounds As D2D1_RECT_F)
    End Interface

    [InterfaceId("FD0ECB6B-91E6-411E-8655-395E760F91B4")]
    [OleAutomation(False)]
    Interface ID2D1GdiMetafileSink1 Extends ID2D1GdiMetafileSink
        Sub ProcessRecord(ByVal recordType As Long, ByRef recordData As Any, ByVal recordDataSize As Long, ByVal flags As Long)
    End Interface

    [InterfaceId("4DC583BF-3A10-438A-8722-E9765224F1F1")]
    [OleAutomation(False)]
    Interface ID2D1SpriteBatch Extends ID2D1Resource
        Sub AddSprites(ByVal spriteCount As Long, ByRef destinationRectangles As D2D1_RECT_F, ByRef sourceRectangles As D2D1_RECT_U, ByRef colors As D2D1_COLOR_F, ByRef transforms As D2D1_MATRIX_3X2_F, ByVal destinationRectanglesStride As Long, ByVal sourceRectanglesStride As Long, ByVal colorsStride As Long, ByVal transformsStride As Long)
        Sub SetSprites(ByVal StartIndex As Long, ByVal spriteCount As Long, ByRef destinationRectangles As D2D1_RECT_F, ByRef sourceRectangles As D2D1_RECT_U, ByRef colors As D2D1_COLOR_F, ByRef transforms As D2D1_MATRIX_3X2_F, ByVal destinationRectanglesStride As Long, ByVal sourceRectanglesStride As Long, ByVal colorsStride As Long, ByVal transformsStride As Long)
        Sub GetSprites(ByVal StartIndex As Long, ByVal spriteCount As Long, ByRef destinationRectangles As D2D1_RECT_F, ByRef sourceRectangles As D2D1_RECT_U, ByRef colors As D2D1_COLOR_F, ByRef transforms As D2D1_MATRIX_3X2_F)
        [PreserveSig]
        Function GetSpriteCount() As Long
        [PreserveSig]
        Sub Clear()
    End Interface

    [InterfaceId("235A7496-8351-414C-BCD4-6672AB2D8E00")]
    [OleAutomation(False)]
    Interface ID2D1DeviceContext3 Extends ID2D1DeviceContext2
        Sub CreateSpriteBatch(ByRef spriteBatch As ID2D1SpriteBatch)
        [PreserveSig]
        Sub DrawSpriteBatch(ByVal spriteBatch As ID2D1SpriteBatch, ByVal StartIndex As Long, ByVal spriteCount As Long, ByVal bitmap As ID2D1Bitmap, ByVal InterpolationMode As D2D1_BITMAP_INTERPOLATION_MODE, ByVal spriteOptions As D2D1_SPRITE_OPTIONS)
    End Interface

    [InterfaceId("852F2087-802C-4037-AB60-FF2E7EE6FC01")]
    [OleAutomation(False)]
    Interface ID2D1Device3 Extends ID2D1Device2
        Sub CreateDeviceContext(ByVal Options As D2D1_DEVICE_CONTEXT_OPTIONS, ByRef deviceContext3 As ID2D1DeviceContext3)
    End Interface

    [InterfaceId("BD4EC2D2-0662-4BEE-BA8E-6F29F032E096")]
    [OleAutomation(False)]
    Interface ID2D1Factory4 Extends ID2D1Factory3
        Sub CreateDevice(ByVal dxgiDevice As IDXGIDevice, ByRef d2dDevice3 As ID2D1Device3)
    End Interface

    [InterfaceId("18079135-4CF3-4868-BC8E-06067E6D242D")]
    [OleAutomation(False)]
    Interface ID2D1CommandSink3 Extends ID2D1CommandSink2
        Sub DrawSpriteBatch(ByVal spriteBatch As ID2D1SpriteBatch, ByVal StartIndex As Long, ByVal spriteCount As Long, ByVal bitmap As ID2D1Bitmap, ByVal InterpolationMode As D2D1_BITMAP_INTERPOLATION_MODE, ByVal spriteOptions As D2D1_SPRITE_OPTIONS)
    End Interface

    [InterfaceId("AF671749-D241-4DB8-8E41-DCC2E5C1A438")]
    [OleAutomation(False)]
    Interface ID2D1SvgGlyphStyle Extends ID2D1Resource
        Sub SetFill(ByVal brush As ID2D1Brush)
        [PreserveSig]
        Sub GetFill(ByRef brush As ID2D1Brush)
        Sub SetStroke(ByVal brush As ID2D1Brush, ByVal strokeWidth As Single, ByRef dashes As Single, ByVal dashesCount As Long, ByVal dashOffset As Single)
        [PreserveSig]
        Function GetStrokeDashesCount() As Long
        [PreserveSig]
        Sub GetStroke(ByRef brush As ID2D1Brush, ByRef strokeWidth As Single, ByRef dashes As Single, ByVal dashesCount As Long, ByRef dashOffset As Single)
    End Interface


    [InterfaceId("8C427831-3D90-4476-B647-C4FAE349E4DB")]
    [OleAutomation(False)]
    Interface ID2D1DeviceContext4 Extends ID2D1DeviceContext3
        Sub CreateSvgGlyphStyle(ByRef svgGlyphStyle As ID2D1SvgGlyphStyle)
        [PreserveSig]
        Sub DrawText(ByRef string As Integer, ByVal stringLength As Long, ByVal textFormat As IDWriteTextFormat, ByRef layoutRect As D2D1_RECT_F, ByVal defaultFillBrush As ID2D1Brush, ByVal svgGlyphStyle As ID2D1SvgGlyphStyle, ByVal colorPaletteIndex As Long, ByVal Options As D2D1_DRAW_TEXT_OPTIONS, ByVal measuringMode As DWRITE_MEASURING_MODE)
        [PreserveSig]
        Sub DrawTextLayout(ByVal origin As LongLong, ByVal textLayout As IDWriteTextLayout, ByVal defaultFillBrush As ID2D1Brush, ByVal svgGlyphStyle As ID2D1SvgGlyphStyle, ByVal colorPaletteIndex As Long, ByVal Options As D2D1_DRAW_TEXT_OPTIONS)
        [PreserveSig]
        Sub DrawColorBitmapGlyphRun(ByVal glyphImageFormat As DWRITE_GLYPH_IMAGE_FORMATS, ByVal baselineOrigin As LongLong, ByRef glyphRun As DWRITE_GLYPH_RUN, ByVal measuringMode As DWRITE_MEASURING_MODE, ByVal bitmapSnapOption As D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION)
        [PreserveSig]
        Sub DrawSvgGlyphRun(ByVal baselineOrigin As LongLong, ByRef glyphRun As DWRITE_GLYPH_RUN, ByVal defaultFillBrush As ID2D1Brush, ByVal svgGlyphStyle As ID2D1SvgGlyphStyle, ByVal colorPaletteIndex As Long, ByVal measuringMode As DWRITE_MEASURING_MODE)
        Sub GetColorBitmapGlyphImage(ByVal glyphImageFormat As DWRITE_GLYPH_IMAGE_FORMATS, ByVal glyphOrigin As LongLong, ByVal fontFace As IDWriteFontFace, ByVal fontEmSize As Single, ByVal glyphIndex As Integer, ByVal isSideways As BOOL, ByRef worldTransform As D2D1_MATRIX_3X2_F, ByVal DpiX As Single, ByVal DpiY As Single, ByRef glyphTransform As D2D1_MATRIX_3X2_F, ByRef glyphImage As ID2D1Image)
        Sub GetSvgGlyphImage(ByVal glyphOrigin As LongLong, ByVal fontFace As IDWriteFontFace, ByVal fontEmSize As Single, ByVal glyphIndex As Integer, ByVal isSideways As BOOL, ByRef worldTransform As D2D1_MATRIX_3X2_F, ByVal defaultFillBrush As ID2D1Brush, ByVal svgGlyphStyle As ID2D1SvgGlyphStyle, ByVal colorPaletteIndex As Long, ByRef glyphTransform As D2D1_MATRIX_3X2_F, ByRef glyphImage As ID2D1CommandList)
    End Interface

    [InterfaceId("D7BDB159-5683-4A46-BC9C-72DC720B858B")]
    [OleAutomation(False)]
    Interface ID2D1Device4 Extends ID2D1Device3
        Sub CreateDeviceContext(ByVal Options As D2D1_DEVICE_CONTEXT_OPTIONS, ByRef deviceContext4 As ID2D1DeviceContext4)
        [PreserveSig]
        Sub SetMaximumColorGlyphCacheMemory(ByVal maximumInBytes As LongLong)
        [PreserveSig]
        Function GetMaximumColorGlyphCacheMemory() As LongLong
    End Interface

    [InterfaceId("C4349994-838E-4B0F-8CAB-44997D9EEACC")]
    [OleAutomation(False)]
    Interface ID2D1Factory5 Extends ID2D1Factory4
        Sub CreateDevice(ByVal dxgiDevice As IDXGIDevice, ByRef d2dDevice4 As ID2D1Device4)
    End Interface

    [InterfaceId("C78A6519-40D6-4218-B2DE-BEEEB744BB3E")]
    [OleAutomation(False)]
    Interface ID2D1CommandSink4 Extends ID2D1CommandSink3
        Sub SetPrimitiveBlend2(ByVal primitiveBlend As D2D1_PRIMITIVE_BLEND)
    End Interface

    [InterfaceId("1AB42875-C57F-4BE9-BD85-9CD78D6F55EE")]
    [OleAutomation(False)]
    Interface ID2D1ColorContext1 Extends ID2D1ColorContext
        [PreserveSig]
        Function GetColorContextType() As D2D1_COLOR_CONTEXT_TYPE
        [PreserveSig]
        Function GetDXGIColorSpace() As DXGI_COLOR_SPACE_TYPE
        Sub GetSimpleColorProfile(ByRef simpleProfile As D2D1_SIMPLE_COLOR_PROFILE)
    End Interface
    
    [InterfaceId("C9CDB0DD-F8C9-4E70-B7C2-301C80292C5E")]
    [OleAutomation(False)]
    Interface ID2D1SvgAttribute Extends ID2D1Resource
        [PreserveSig]
        Sub GetElement(ByRef svgelement As ID2D1SvgElement)
        Sub Clone(ByRef attribute As ID2D1SvgAttribute)
    End Interface

    [InterfaceId("D59BAB0A-68A2-455B-A5DC-9EB2854E2490")]
    [OleAutomation(False)]
    Interface ID2D1SvgPaint Extends ID2D1SvgAttribute
        Sub SetPaintType(ByVal paintType As D2D1_SVG_PAINT_TYPE)
        [PreserveSig]
        Function GetPaintType() As D2D1_SVG_PAINT_TYPE
        Sub SetColor(ByRef color As D2D1_COLOR_F)
        [PreserveSig]
        Sub GetColor(ByRef color As D2D1_COLOR_F)
        Sub SetId(ByVal id As LongPtr)
        Sub GetId(ByVal id As LongPtr, ByVal idCount As Long)
        [PreserveSig]
        Function GetIdLength() As Long
    End Interface

    [InterfaceId("F1C0CA52-92A3-4F00-B4CE-F35691EFD9D9")]
    [OleAutomation(False)]
    Interface ID2D1SvgStrokeDashArray Extends ID2D1SvgAttribute
        Sub RemoveDashesAtEnd(ByVal dashesCount As Long)
        Sub UpdateDashes(ByRef dashes As D2D1_SVG_LENGTH, ByVal dashesCount As Long, ByVal StartIndex As Long)
        Sub UpdateDashes(ByRef dashes As Single, ByVal dashesCount As Long, ByVal StartIndex As Long)
        Sub GetDashes(ByRef dashes As D2D1_SVG_LENGTH, ByVal dashesCount As Long, ByVal StartIndex As Long)
        Sub GetDashes(ByRef dashes As Single, ByVal dashesCount As Long, ByVal StartIndex As Long)
        [PreserveSig]
        Function GetDashesCount() As Long
    End Interface

    [InterfaceId("9DBE4C0D-3572-4DD9-9825-5530813BB712")]
    [OleAutomation(False)]
    Interface ID2D1SvgPointCollection Extends ID2D1SvgAttribute
        Sub RemovePointsAtEnd(ByVal pointsCount As Long)
        Sub UpdatePoints(ByRef points As D2D1_POINT_2F, ByVal pointsCount As Long, ByVal StartIndex As Long)
        Sub GetPoints(ByRef points As D2D1_POINT_2F, ByVal pointsCount As Long, ByVal StartIndex As Long)
        [PreserveSig]
        Function GetPointsCount() As Long
    End Interface

    [InterfaceId("C095E4F4-BB98-43D6-9745-4D1B84EC9888")]
    [OleAutomation(False)]
    Interface ID2D1SvgPathData Extends ID2D1SvgAttribute
        Sub RemoveSegmentDataAtEnd(ByVal dataCount As Long)
        Sub UpdateSegmentData(ByRef data As Single, ByVal dataCount As Long, ByVal StartIndex As Long)
        Sub GetSegmentData(ByRef data As Single, ByVal dataCount As Long, ByVal StartIndex As Long)
        [PreserveSig]
        Function GetSegmentDataCount() As Long
        Sub RemoveCommandsAtEnd(ByVal commandsCount As Long)
        Sub UpdateCommands(ByRef commands As D2D1_SVG_PATH_COMMAND, ByVal commandsCount As Long, ByVal StartIndex As Long)
        Sub GetCommands(ByRef commands As D2D1_SVG_PATH_COMMAND, ByVal commandsCount As Long, ByVal StartIndex As Long)
        [PreserveSig]
        Function GetCommandsCount() As Long
        Sub CreatePathGeometry(ByVal fillMode As D2D1_FILL_MODE, ByRef pathGeometry As ID2D1PathGeometry1)
    End Interface

    [InterfaceId("AC7B67A6-183E-49C1-A823-0EBE40B0DB29")]
    [OleAutomation(False)]
    Interface ID2D1SvgElement Extends ID2D1Resource
        [PreserveSig]
        Sub GetDocument(ByRef Document As ID2D1SvgDocument)
        Sub GetTagName(ByVal Name As LongPtr, ByVal nameCount As Long)
        [PreserveSig]
        Function GetTagNameLength() As Long
        [PreserveSig]
        Function IsTextContent() As BOOL
        [PreserveSig]
        Sub GetParent(ByRef parent As ID2D1SvgElement)
        [PreserveSig]
        Function HasChildren() As BOOL
        [PreserveSig]
        Sub GetFirstChild(ByRef child As ID2D1SvgElement)
        [PreserveSig]
        Sub GetLastChild(ByRef child As ID2D1SvgElement)
        Sub GetPreviousChild(ByVal referenceChild As ID2D1SvgElement, ByRef previousChild As ID2D1SvgElement)
        Sub GetNextChild(ByVal referenceChild As ID2D1SvgElement, ByRef nextChild As ID2D1SvgElement)
        Sub InsertChildBefore(ByVal newChild As ID2D1SvgElement, ByVal referenceChild As ID2D1SvgElement)
        Sub AppendChild(ByVal newChild As ID2D1SvgElement)
        Sub ReplaceChild(ByVal newChild As ID2D1SvgElement, ByVal oldChild As ID2D1SvgElement)
        Sub RemoveChild(ByVal oldChild As ID2D1SvgElement)
        Sub CreateChild(ByVal tagName As LongPtr, ByRef newChild As ID2D1SvgElement)
        [PreserveSig]
        Function IsAttributeSpecified(ByVal Name As LongPtr, ByRef inherited As BOOL) As BOOL
        [PreserveSig]
        Function GetSpecifiedAttributeCount() As Long
        Sub GetSpecifiedAttributeName(ByVal index As Long, ByVal Name As LongPtr, ByVal nameCount As Long, ByRef inherited As BOOL)
        Sub GetSpecifiedAttributeNameLength(ByVal index As Long, ByRef nameLength As Long, ByRef inherited As BOOL)
        Sub RemoveAttribute(ByVal Name As LongPtr)
        Sub SetTextValue(ByVal Name As LongPtr, ByVal nameCount As Long)
        Sub GetTextValue(ByVal Name As LongPtr, ByVal nameCount As Long)
        [PreserveSig]
        Function GetTextValueLength() As Long
        Sub SetAttributeValueC(ByVal Name As LongPtr, ByVal Value As ID2D1SvgAttribute)
        Sub SetAttributeValueB(ByVal Name As LongPtr, ByVal type As D2D1_SVG_ATTRIBUTE_POD_TYPE, ByRef Value As Any, ByVal valueSizeInBytes As Long)
        Sub SetAttributeValueA(ByVal Name As LongPtr, ByVal type As D2D1_SVG_ATTRIBUTE_STRING_TYPE, ByVal Value As LongPtr)
        Sub GetAttributeValueC(ByVal Name As LongPtr, ByRef riid As UUID, ByRef Value As Any)
        Sub GetAttributeValueB(ByVal Name As LongPtr, ByVal type As D2D1_SVG_ATTRIBUTE_POD_TYPE, ByRef Value As Any, ByVal valueSizeInBytes As Long)
        Sub GetAttributeValueA(ByVal Name As LongPtr, ByVal type As D2D1_SVG_ATTRIBUTE_STRING_TYPE, ByVal Value As LongPtr, ByVal valueCount As Long)
        Sub GetAttributeValueLength(ByVal Name As LongPtr, ByVal type As D2D1_SVG_ATTRIBUTE_STRING_TYPE, ByRef valueLength As Long)
    End Interface

    [InterfaceId("86B88E4D-AFA4-4D7B-88E4-68A51C4A0AEC")]
    [OleAutomation(False)]
    Interface ID2D1SvgDocument Extends ID2D1Resource
        Sub SetViewportSize(ByVal viewportSize As Currency)
        [PreserveSig]
        Function GetViewportSize() As D2D1_SIZE_F
        Sub SetRoot(ByVal root As ID2D1SvgElement)
        [PreserveSig]
        Sub GetRoot(ByRef root As ID2D1SvgElement)
        Sub FindElementById(ByVal id As LongPtr, ByRef svgelement As ID2D1SvgElement)
        Sub Serialize(ByVal outputXmlStream As IStream, ByVal subtree As ID2D1SvgElement)
        Sub Deserialize(ByVal inputXmlStream As IStream, ByRef subtree As ID2D1SvgElement)
        Sub CreatePaint(ByVal paintType As D2D1_SVG_PAINT_TYPE, ByRef color As D2D1_COLOR_F, ByVal id As LongPtr, ByRef paint As ID2D1SvgPaint)
        Sub CreateStrokeDashArray(ByRef dashes As D2D1_SVG_LENGTH, ByVal dashesCount As Long, ByRef strokeDashArray As ID2D1SvgStrokeDashArray)
        Sub CreatePointCollection(ByRef points As D2D1_POINT_2F, ByVal pointsCount As Long, ByRef pointCollection As ID2D1SvgPointCollection)
        Sub CreatePathData(ByRef segmentData As Single, ByVal segmentDataCount As Long, ByRef commands As D2D1_SVG_PATH_COMMAND, ByVal commandsCount As Long, ByRef pathData As ID2D1SvgPathData)
    End Interface
    
    [InterfaceId("7836D248-68CC-4DF6-B9E8-DE991BF62EB7")]
    [OleAutomation(False)]
    Interface ID2D1DeviceContext5 Extends ID2D1DeviceContext4
        Sub CreateSvgDocument(ByVal inputXmlStream As IStream, ByRef svgDocument As ID2D1SvgDocument)
        [PreserveSig]
        Sub DrawSvgDocument(ByVal svgDocument As ID2D1SvgDocument)
        Sub CreateColorContextFromDxgiColorSpace(ByVal ColorSpace As DXGI_COLOR_SPACE_TYPE, ByRef colorContext As ID2D1ColorContext1)
        Sub CreateColorContextFromSimpleColorProfile(ByRef simpleProfile As D2D1_SIMPLE_COLOR_PROFILE, ByRef colorContext As ID2D1ColorContext1)
    End Interface

    [InterfaceId("D55BA0A4-6405-4694-AEF5-08EE1A4358B4")]
    [OleAutomation(False)]
    Interface ID2D1Device5 Extends ID2D1Device4
        Sub CreateDeviceContext5(ByVal Options As D2D1_DEVICE_CONTEXT_OPTIONS, ByRef deviceContext5 As ID2D1DeviceContext5)
    End Interface

    [InterfaceId("F9976F46-F642-44C1-97CA-DA32EA2A2635")]
    [OleAutomation(False)]
    Interface ID2D1Factory6 Extends ID2D1Factory5
        Sub CreateDevice6(ByVal dxgiDevice As IDXGIDevice, ByRef d2dDevice5 As ID2D1Device5)
    End Interface

    [InterfaceId("7047DD26-B1E7-44A7-959A-8349E2144FA8")]
    [OleAutomation(False)]
    Interface ID2D1CommandSink5 Extends ID2D1CommandSink4
        Sub BlendImage(ByVal image As ID2D1Image, ByVal blendMode As D2D1_BLEND_MODE, ByRef targetOffset As D2D1_POINT_2F, ByRef imageRectangle As D2D1_RECT_F, ByVal InterpolationMode As D2D1_INTERPOLATION_MODE)
    End Interface

    [InterfaceId("985F7E37-4ED0-4A19-98A3-15B0EDFDE306")]
    [OleAutomation(False)]
    Interface ID2D1DeviceContext6 Extends ID2D1DeviceContext5
        [PreserveSig]
        Sub BlendImage(ByVal image As ID2D1Image, ByVal blendMode As D2D1_BLEND_MODE, ByRef targetOffset As D2D1_POINT_2F, ByRef imageRectangle As D2D1_RECT_F, Optional ByVal InterpolationMode As D2D1_INTERPOLATION_MODE = 1)
    End Interface

    [InterfaceId("7BFEF914-2D75-4BAD-BE87-E18DDB077B6D")]
    [OleAutomation(False)]
    Interface ID2D1Device6 Extends ID2D1Device5
        Sub CreateDeviceContext6(ByVal Options As D2D1_DEVICE_CONTEXT_OPTIONS, ByRef deviceContext6 As ID2D1DeviceContext6)
    End Interface

    [InterfaceId("BDC2BDD3-B96C-4DE6-BDF7-99D4745454DE")]
    [OleAutomation(False)]
    Interface ID2D1Factory7 Extends ID2D1Factory6
        Sub CreateDevice7(ByVal dxgiDevice As IDXGIDevice, ByRef d2dDevice6 As ID2D1Device6)
    End Interface

    [InterfaceId("EC891CF7-9B69-4851-9DEF-4E0915771E62")]
    [OleAutomation(False)]
    Interface ID2D1DeviceContext7 Extends ID2D1DeviceContext6
        [PreserveSig]
        Function GetPaintFeatureLevel() As DWRITE_PAINT_FEATURE_LEVEL
        [PreserveSig]
        Sub DrawPaintGlyphRun(ByVal baselineOrigin As LongLong, ByRef glyphRun As DWRITE_GLYPH_RUN, ByVal defaultFillBrush As ID2D1Brush, ByVal colorPaletteIndex As Long, ByVal measuringMode As DWRITE_MEASURING_MODE)
        [PreserveSig]
        Sub DrawGlyphRunWithColorSupport(ByVal baselineOrigin As LongLong, ByRef glyphRun As DWRITE_GLYPH_RUN, ByRef glyphRunDescription As DWRITE_GLYPH_RUN_DESCRIPTION, ByVal foregroundBrush As ID2D1Brush, ByVal svgGlyphStyle As ID2D1SvgGlyphStyle, ByVal colorPaletteIndex As Long, ByVal measuringMode As DWRITE_MEASURING_MODE, ByVal bitmapSnapOption As D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION)
    End Interface

    [InterfaceId("F07C8968-DD4E-4BA6-9CBD-EB6D3752DCBB")]
    [OleAutomation(False)]
    Interface ID2D1Device7 Extends ID2D1Device6
        Sub CreateDeviceContext7(ByVal Options As D2D1_DEVICE_CONTEXT_OPTIONS, ByRef deviceContext As ID2D1DeviceContext7)
    End Interface

    [InterfaceId("677C9311-F36D-4B1F-AE86-86D1223FFD3A")]
    [OleAutomation(False)]
    Interface ID2D1Factory8 Extends ID2D1Factory7
        Sub CreateDevice8(ByVal dxgiDevice As IDXGIDevice, ByRef d2dDevice6 As ID2D1Device7)
    End Interface
    
    
    
    
    
    [InterfaceId("9B8B1336-00A5-4668-92B7-CED5D8BF9B7B")]
    [OleAutomation(False)]
    Interface ID2D1VertexBuffer Extends stdole.IUnknown
        Sub Map(ByRef data As Byte, ByVal BufferSize As Long)
        Sub Unmap()
    End Interface

    [InterfaceId("688D15C3-02B0-438D-B13A-D1B44C32C39A")]
    [OleAutomation(False)]
    Interface ID2D1ResourceTexture Extends stdole.IUnknown
        Sub Update(ByRef minimumExtents As Long, ByRef maximimumExtents As Long, ByRef strides As Long, ByVal dimensions As Long, ByRef data As Byte, ByVal dataCount As Long)
    End Interface

    [InterfaceId("519AE1BD-D19A-420D-B849-364F594776B7")]
    [OleAutomation(False)]
    Interface ID2D1RenderInfo Extends stdole.IUnknown
        Sub SetInputDescription(ByVal inputIndex As Long, ByVal inputDescriptor As LongLong)
        Sub SetOutputBuffer(ByVal bufferPrecision As D2D1_BUFFER_PRECISION, ByVal channelDepth As D2D1_CHANNEL_DEPTH)
        [PreserveSig]
        Sub SetCached(ByVal isCached As BOOL)
        [PreserveSig]
        Sub SetInstructionCountHint(ByVal instructionCount As Long)
    End Interface

    [InterfaceId("693CE632-7F2F-45DE-93FE-18D88B37AA21")]
    [OleAutomation(False)]
    Interface ID2D1DrawInfo Extends ID2D1RenderInfo
        Sub SetPixelShaderConstantBuffer(ByRef Buffer As Byte, ByVal BufferCount As Long)
        Sub SetResourceTexture(ByVal textureIndex As Long, ByVal resourceTexture As ID2D1ResourceTexture)
        Sub SetVertexShaderConstantBuffer(ByRef Buffer As Byte, ByVal BufferCount As Long)
        Sub SetPixelShader(ByRef shaderId As UUID, ByVal pixelOptions As D2D1_PIXEL_OPTIONS)
        Sub SetVertexProcessing(ByVal vertexBuffer As ID2D1VertexBuffer, ByVal vertexOptions As D2D1_VERTEX_OPTIONS, ByRef blendDescription As D2D1_BLEND_DESCRIPTION, ByRef vertexRange As D2D1_VERTEX_RANGE, ByRef vertexShader As UUID)
    End Interface

    [InterfaceId("5598B14B-9FD7-48B7-9BDB-8F0964EB38BC")]
    [OleAutomation(False)]
    Interface ID2D1ComputeInfo Extends ID2D1RenderInfo
        Sub SetComputeShaderConstantBuffer(ByRef Buffer As Byte, ByVal BufferCount As Long)
        Sub SetComputeShader(ByRef shaderId As UUID)
        Sub SetResourceTexture(ByVal textureIndex As Long, ByVal resourceTexture As ID2D1ResourceTexture)
    End Interface

    [InterfaceId("B2EFE1E7-729F-4102-949F-505FA21BF666")]
    [OleAutomation(False)]
    Interface ID2D1TransformNode Extends stdole.IUnknown
        [PreserveSig]
        Function GetInputCount() As Long
    End Interface

    [InterfaceId("13D29038-C3E6-4034-9081-13B53A417992")]
    [OleAutomation(False)]
    Interface ID2D1TransformGraph Extends stdole.IUnknown
        [PreserveSig]
        Function GetInputCount() As Long
        Sub SetSingleTransformNode(ByVal node As ID2D1TransformNode)
        Sub AddNode(ByVal node As ID2D1TransformNode)
        Sub RemoveNode(ByVal node As ID2D1TransformNode)
        Sub SetOutputNode(ByVal node As ID2D1TransformNode)
        Sub ConnectNode(ByVal fromNode As ID2D1TransformNode, ByVal toNode As ID2D1TransformNode, ByVal toNodeInputIndex As Long)
        Sub ConnectToEffectInput(ByVal toEffectInputIndex As Long, ByVal node As ID2D1TransformNode, ByVal toNodeInputIndex As Long)
        [PreserveSig]
        Sub Clear()
        Sub SetPassthroughGraph(ByVal effectInputIndex As Long)
    End Interface

[InterfaceId("ef1a287d-342a-4f76-8fdb-da0d6ea9f92b")]
Interface ID2D1Transform Extends ID2D1TransformNode
    Sub MapOutputRectToInputRects(outputRect As D2D1_RECT_L, inputRects As D2D1_RECT_L, ByVal inputRectsCount As Long)
    Sub MapInputRectsToOutputRect(inputRects As D2D1_RECT_L, inputOpaqueSubRects As D2D1_RECT_L, ByVal inputRectCount As Long, outputRect As D2D1_RECT_L, outputOpaqueSubRect As D2D1_RECT_L)
    #If Win64 Then
    	Sub MapInvalidRect(ByVal inputIndex As Long, invalidInputRect As D2D1_RECT_L, invalidOutputRect As D2D1_RECT_L)
    #Else
        Sub MapInvalidRect(ByVal inputIndex As Long, invalidInputRect As D2D1_RECT_L, ByVal invalidOutputRectLeft As Long, ByVal invalidOutputRectTop As Long, ByVal invalidOutputRectRight As Long, ByVal invalidOutputRectBottom As Long)
    #End If
End Interface

    [InterfaceId("36BFDCB6-9739-435D-A30D-A653BEFF6A6F")]
    [OleAutomation(False)]
    Interface ID2D1DrawTransform Extends ID2D1Transform
        Sub SetDrawInfo(ByVal drawInfo As ID2D1DrawInfo)
    End Interface

    [InterfaceId("0D85573C-01E3-4F7D-BFD9-0D60608BF3C3")]
    [OleAutomation(False)]
    Interface ID2D1ComputeTransform Extends ID2D1Transform
        Sub SetComputeInfo(ByVal computeInfo As ID2D1ComputeInfo)
        Sub CalculateThreadgroups(ByRef outputRect As D2D1_RECT_L, ByRef dimensionX As Long, ByRef dimensionY As Long, ByRef dimensionZ As Long)
    End Interface

    [InterfaceId("0359DC30-95E6-4568-9055-27720D130E93")]
    [OleAutomation(False)]
    Interface ID2D1AnalysisTransform Extends stdole.IUnknown
        Sub ProcessAnalysisResults(ByRef analysisData As Byte, ByVal analysisDataCount As Long)
    End Interface

    [InterfaceId("DB1800DD-0C34-4CF9-BE90-31CC0A5653E1")]
    [OleAutomation(False)]
    Interface ID2D1SourceTransform Extends ID2D1Transform
        Sub SetRenderInfo(ByVal renderInfo As ID2D1RenderInfo)
        Sub Draw(ByVal target As ID2D1Bitmap1, ByRef drawRect As D2D1_RECT_L, ByVal targetOrigin As LongLong)
    End Interface

    [InterfaceId("1A799D8A-69F7-4E4C-9FED-437CCC6684CC")]
    [OleAutomation(False)]
    Interface ID2D1ConcreteTransform Extends ID2D1TransformNode
        Sub SetOutputBuffer(ByVal bufferPrecision As D2D1_BUFFER_PRECISION, ByVal channelDepth As D2D1_CHANNEL_DEPTH)
        [PreserveSig]
        Sub SetCached(ByVal isCached As BOOL)
    End Interface

    [InterfaceId("63AC0B32-BA44-450F-8806-7F4CA1FF2F1B")]
    [OleAutomation(False)]
    Interface ID2D1BlendTransform Extends ID2D1ConcreteTransform
        [PreserveSig]
        Sub SetDescription(ByRef Description As D2D1_BLEND_DESCRIPTION)
        [PreserveSig]
        Sub GetDescription(ByRef Description As D2D1_BLEND_DESCRIPTION)
    End Interface

    [InterfaceId("4998735C-3A19-473C-9781-656847E3A347")]
    [OleAutomation(False)]
    Interface ID2D1BorderTransform Extends ID2D1ConcreteTransform
        [PreserveSig]
        Sub SetExtendModeX(ByVal extendMode As D2D1_EXTEND_MODE)
        [PreserveSig]
        Sub SetExtendModeY(ByVal extendMode As D2D1_EXTEND_MODE)
        [PreserveSig]
        Function GetExtendModeX() As D2D1_EXTEND_MODE
        [PreserveSig]
        Function GetExtendModeY() As D2D1_EXTEND_MODE
    End Interface

    [InterfaceId("3FE6ADEA-7643-4F53-BD14-A0CE63F24042")]
    [OleAutomation(False)]
    Interface ID2D1OffsetTransform Extends ID2D1TransformNode
        [PreserveSig]
        Sub SetOffset(ByVal Offset As LongLong)
        [PreserveSig]
        Function GetOffset() As D2D1_POINT_2L
    End Interface

    [InterfaceId("90F732E2-5092-4606-A819-8651970BACCD")]
    [OleAutomation(False)]
    Interface ID2D1BoundsAdjustmentTransform Extends ID2D1TransformNode
        [PreserveSig]
        Sub SetOutputBounds(ByRef outputBounds As D2D1_RECT_L)
        [PreserveSig]
        Sub GetOutputBounds(ByRef outputBounds As D2D1_RECT_L)
    End Interface

    [InterfaceId("A248FD3F-3E6C-4E63-9F03-7F68ECC91DB9")]
    [OleAutomation(False)]
    Interface ID2D1EffectImpl Extends stdole.IUnknown
        Sub Initialize(ByVal effectContext As ID2D1EffectContext, ByVal transformGraph As ID2D1TransformGraph)
        Sub PrepareForRender(ByVal CHANGETYPE As D2D1_CHANGE_TYPE)
        Sub SetGraph(ByVal transformGraph As ID2D1TransformGraph)
    End Interface

    [InterfaceId("3D9F916B-27DC-4AD7-B4F1-64945340F563")]
    [OleAutomation(False)]
    Interface ID2D1EffectContext Extends stdole.IUnknown
        [PreserveSig]
        Sub GetDpi(ByRef DpiX As Single, ByRef DpiY As Single)
        Sub CreateEffect(ByRef effectId As UUID, ByRef effect As ID2D1Effect)
        Sub GetMaximumSupportedFeatureLevel(ByRef featureLevels As D3D_FEATURE_LEVEL, ByVal featureLevelsCount As Long, ByRef maximumSupportedFeatureLevel As D3D_FEATURE_LEVEL)
        Sub CreateTransformNodeFromEffect(ByVal effect As ID2D1Effect, ByRef transformNode As ID2D1TransformNode)
        Sub CreateBlendTransform(ByVal numInputs As Long, ByRef blendDescription As D2D1_BLEND_DESCRIPTION, ByRef transform As ID2D1BlendTransform)
        Sub CreateBorderTransform(ByVal extendModeX As D2D1_EXTEND_MODE, ByVal extendModeY As D2D1_EXTEND_MODE, ByRef transform As ID2D1BorderTransform)
        Sub CreateOffsetTransform(ByVal Offset As LongLong, ByRef transform As ID2D1OffsetTransform)
        Sub CreateBoundsAdjustmentTransform(ByRef outputRectangle As D2D1_RECT_L, ByRef transform As ID2D1BoundsAdjustmentTransform)
        Sub LoadPixelShader(ByRef shaderId As UUID, ByRef shaderBuffer As Byte, ByVal shaderBufferCount As Long)
        Sub LoadVertexShader(ByRef resourceId As UUID, ByRef shaderBuffer As Byte, ByVal shaderBufferCount As Long)
        Sub LoadComputeShader(ByRef resourceId As UUID, ByRef shaderBuffer As Byte, ByVal shaderBufferCount As Long)
        [PreserveSig]
        Function IsShaderLoaded(ByRef shaderId As UUID) As Long
        Sub CreateResourceTexture(ByRef resourceId As UUID, ByRef resourceTextureProperties As D2D1_RESOURCE_TEXTURE_PROPERTIES, ByRef data As Byte, ByRef strides As Long, ByVal DataSize As Long, ByRef resourceTexture As ID2D1ResourceTexture)
        Sub FindResourceTexture(ByRef resourceId As UUID, ByRef resourceTexture As ID2D1ResourceTexture)
        Sub CreateVertexBuffer(ByRef vertexBufferProperties As D2D1_VERTEX_BUFFER_PROPERTIES, ByRef resourceId As UUID, ByRef customVertexBufferProperties As D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES, ByRef Buffer As ID2D1VertexBuffer)
        Sub FindVertexBuffer(ByRef resourceId As UUID, ByRef Buffer As ID2D1VertexBuffer)
        Sub CreateColorContext(ByVal space As D2D1_COLOR_SPACE, ByRef profile As Byte, ByVal profileSize As Long, ByRef colorContext As ID2D1ColorContext)
        Sub CreateColorContextFromFilename(ByVal FileName As LongPtr, ByRef colorContext As ID2D1ColorContext)
        Sub CreateColorContextFromWicColorContext(ByVal wicColorContext As IWICColorContext, ByRef colorContext As ID2D1ColorContext)
        Sub CheckFeatureSupport(ByVal Feature As D2D1_FEATURE, ByRef featureSupportData As Any, ByVal FeatureSupportDataSize As Long)
        [PreserveSig]
        Function IsBufferPrecisionSupported(ByVal bufferPrecision As D2D1_BUFFER_PRECISION) As Long
    End Interface

#End Region









    
#Region "DXGI"
    [InterfaceId("AEC22FB8-76F3-4639-9BE0-28EB43A67A2E")]
    [OleAutomation(False)]
    Interface IDXGIObject Extends stdole.IUnknown
        Sub SetPrivateData(ByRef Name As UUID, ByVal DataSize As Long, ByRef pData As Any)
        Sub SetPrivateDataInterface(ByRef Name As UUID, ByVal pUnknown As IUnknown)
        Sub GetPrivateData(ByRef Name As UUID, ByRef pDataSize As Long, ByRef pData As Any)
        Sub GetParent(ByRef riid As UUID, ByRef ppParent As Any)
    End Interface

    [InterfaceId("3D3E0379-F9DE-4D58-BB6C-18D62992F1A6")]
    [OleAutomation(False)]
    Interface IDXGIDeviceSubObject Extends IDXGIObject
        Sub GetDevice(ByRef riid As UUID, ByRef ppDevice As Any)
    End Interface

    [InterfaceId("035F3AB4-482E-4E50-B41F-8A7F8BD8960B")]
    [OleAutomation(False)]
    Interface IDXGIResource Extends IDXGIDeviceSubObject
        Sub GetSharedHandle(ByRef pSharedHandle As LongPtr)
        Sub GetUsage(ByRef pUsage As Long)
        Sub SetEvictionPriority(ByVal EvictionPriority As Long)
        Sub GetEvictionPriority(ByRef pEvictionPriority As Long)
    End Interface

    [InterfaceId("9D8E1289-D7B3-465F-8126-250E349AF85D")]
    [OleAutomation(False)]
    Interface IDXGIKeyedMutex Extends IDXGIDeviceSubObject
        Sub AcquireSync(ByVal key As LongLong, ByVal dwMilliseconds As Long)
        Sub ReleaseSync(ByVal key As LongLong)
    End Interface

    [InterfaceId("CAFCB56C-6AC3-4889-BF47-9E23BBD260EC")]
    [OleAutomation(False)]
    Interface IDXGISurface Extends IDXGIDeviceSubObject
        Sub GetDesc(ByRef pDesc As DXGI_SURFACE_DESC)
        Sub Map(ByRef pLockedRect As DXGI_MAPPED_RECT, ByVal MapFlags As DxgiSurfaceMapFlags)
        Sub Unmap()
    End Interface

    [InterfaceId("4AE63092-6327-4C1B-80AE-BFE12EA32B86")]
    [OleAutomation(False)]
    Interface IDXGISurface1 Extends IDXGISurface
        Sub GetDC(ByVal Discard As BOOL, ByRef phdc As LongPtr)
        Sub ReleaseDC(ByRef pDirtyRect As RECT)
    End Interface

    [InterfaceId("2411E7E1-12AC-4CCF-BD14-9798E8534DC0")]
    [OleAutomation(False)]
    Interface IDXGIAdapter Extends IDXGIObject
        Sub EnumOutputs(ByVal Output As Long, ByRef ppOutput As IDXGIOutput)
        Sub GetDesc(ByRef pDesc As DXGI_ADAPTER_DESC)
        Sub CheckInterfaceSupport(ByRef InterfaceName As UUID, ByRef pUMDVersion As LARGE_INTEGER)
    End Interface

    [InterfaceId("AE02EEDB-C735-4690-8D52-5A8DC20213AA")]
    [OleAutomation(False)]
    Interface IDXGIOutput Extends IDXGIObject
        Sub GetDesc(ByRef pDesc As DXGI_OUTPUT_DESC)
        Sub GetDisplayModeList(ByVal EnumFormat As DXGI_FORMAT, ByVal flags As DXGI_ENUM_MODES, ByRef pNumModes As Long, ByRef pDesc As DXGI_MODE_DESC)
        Sub FindClosestMatchingMode(ByRef pModeToMatch As DXGI_MODE_DESC, ByRef pClosestMatch As DXGI_MODE_DESC, ByVal pConcernedDevice As IUnknown)
        Sub WaitForVBlank()
        Sub TakeOwnership(ByVal pDevice As IUnknown, ByVal Exclusive As BOOL)
        [PreserveSig]
        Sub ReleaseOwnership()
        Sub GetGammaControlCapabilities(ByRef pGammaCaps As DXGI_GAMMA_CONTROL_CAPABILITIES)
        Sub SetGammaControl(ByRef pArray As DXGI_GAMMA_CONTROL)
        Sub GetGammaControl(ByRef pArray As DXGI_GAMMA_CONTROL)
        Sub SetDisplaySurface(ByVal pScanoutSurface As IDXGISurface)
        Sub GetDisplaySurfaceData(ByVal pDestination As IDXGISurface)
        Sub GetFrameStatistics(ByRef pStats As DXGI_FRAME_STATISTICS)
    End Interface

    [InterfaceId("310D36A0-D2E7-4C0A-AA04-6A9D23B8886A")]
    [OleAutomation(False)]
    Interface IDXGISwapChain Extends IDXGIDeviceSubObject
        Sub Present(ByVal SyncInterval As Long, ByVal flags As DXGI_PRESENT)
        Sub GetBuffer(ByVal Buffer As Long, ByRef riid As UUID, ByRef ppSurface As Any)
        Sub SetFullscreenState(ByVal FullScreen As BOOL, ByVal pTarget As IDXGIOutput)
        Sub GetFullscreenState(pFullscreen As BOOL, ByRef ppTarget As IDXGIOutput)
        Sub GetDesc(ByRef pDesc As DXGI_SWAP_CHAIN_DESC)
        Sub ResizeBuffers(ByVal BufferCount As Long, ByVal width As Long, ByVal Height As Long, ByVal NewFormat As DXGI_FORMAT, ByVal SwapChainFlags As DXGI_SWAP_CHAIN_FLAG)
        Sub ResizeTarget(ByRef pNewTargetParameters As DXGI_MODE_DESC)
        Sub GetContainingOutput(ByRef ppOutput As IDXGIOutput)
        Sub GetFrameStatistics(ByRef pStats As DXGI_FRAME_STATISTICS)
        Sub GetLastPresentCount(ByRef pLastPresentCount As Long)
    End Interface

    [InterfaceId("7B7166EC-21C7-44AE-B21A-C9AE321AE369")]
    [OleAutomation(False)]
    Interface IDXGIFactory Extends IDXGIObject
        Sub EnumAdapters(ByVal Adapter As Long, ByRef ppAdapter As IDXGIAdapter)
        Sub MakeWindowAssociation(ByVal WindowHandle As LongPtr, ByVal flags As DXGI_MWA)
        Sub GetWindowAssociation(ByRef pWindowHandle As LongPtr)
        Sub CreateSwapChain(ByVal pDevice As IUnknown, ByRef pDesc As DXGI_SWAP_CHAIN_DESC, ByRef ppSwapChain As IDXGISwapChain)
        Sub CreateSoftwareAdapter(ByVal Module As LongPtr, ByRef ppAdapter As IDXGIAdapter)
    End Interface

    [InterfaceId("54EC77FA-1377-44E6-8C32-88FD5F44C84C")]
    [OleAutomation(False)]
    Interface IDXGIDevice Extends IDXGIObject
        Sub GetAdapter(ByRef pAdapter As IDXGIAdapter)
        Sub CreateSurface(ByRef pDesc As DXGI_SURFACE_DESC, ByVal NumSurfaces As Long, ByVal usage As Long, ByRef pSharedResource As DXGI_SHARED_RESOURCE, ByRef ppSurface As IDXGISurface)
        Sub QueryResourceResidency(ppResources As IUnknown, ByRef pResidencyStatus As DXGI_RESIDENCY, ByVal NumResources As Long)
        Sub SetGPUThreadPriority(ByVal Priority As Long)
        Sub GetGPUThreadPriority(ByRef pPriority As Long)
    End Interface

    [InterfaceId("770AAE78-F26F-4DBA-A829-253C83D1B387")]
    [OleAutomation(False)]
    Interface IDXGIFactory1 Extends IDXGIFactory
        Sub EnumAdapters1(ByVal Adapter As Long, ByRef ppAdapter As IDXGIAdapter1)
        [PreserveSig]
        Function IsCurrent() As BOOL
    End Interface

    [InterfaceId("29038F61-3839-4626-91FD-086879011A05")]
    [OleAutomation(False)]
    Interface IDXGIAdapter1 Extends IDXGIAdapter
        Sub GetDesc1(ByRef pDesc As DXGI_ADAPTER_DESC1)
    End Interface

    [InterfaceId("77DB970F-6276-48BA-BA28-070143B4392C")]
    [OleAutomation(False)]
    Interface IDXGIDevice1 Extends IDXGIDevice
        Sub SetMaximumFrameLatency(ByVal MaxLatency As Long)
        Sub GetMaximumFrameLatency(ByRef pMaxLatency As Long)
    End Interface

    [InterfaceId("EA9DBF1A-C88E-4486-854A-98AA0138F30C")]
    [OleAutomation(False)]
    Interface IDXGIDisplayControl Extends stdole.IUnknown
        [PreserveSig]
        Function IsStereoEnabled() As BOOL
        [PreserveSig]
        Sub SetStereoEnabled(ByVal Enabled As BOOL)
    End Interface

    [InterfaceId("191CFAC3-A341-470D-B26E-A864F428319C")]
    [OleAutomation(False)]
    Interface IDXGIOutputDuplication Extends IDXGIObject
        [PreserveSig]
        Sub GetDesc(ByRef pDesc As DXGI_OUTDUPL_DESC)
        Sub AcquireNextFrame(ByVal TimeoutInMilliseconds As Long, ByRef pFrameInfo As DXGI_OUTDUPL_FRAME_INFO, ByRef ppDesktopResource As IDXGIResource)
        Sub GetFrameDirtyRects(ByVal DirtyRectsBufferSize As Long, ByRef pDirtyRectsBuffer As RECT, ByRef pDirtyRectsBufferSizeRequired As Long)
        Sub GetFrameMoveRects(ByVal MoveRectsBufferSize As Long, ByRef pMoveRectBuffer As DXGI_OUTDUPL_MOVE_RECT, ByRef pMoveRectsBufferSizeRequired As Long)
        Sub GetFramePointerShape(ByVal PointerShapeBufferSize As Long, ByRef pPointerShapeBuffer As Any, ByRef pPointerShapeBufferSizeRequired As Long, ByRef pPointerShapeInfo As DXGI_OUTDUPL_POINTER_SHAPE_INFO)
        Sub MapDesktopSurface(ByRef pLockedRect As DXGI_MAPPED_RECT)
        Sub UnMapDesktopSurface()
        Sub ReleaseFrame()
    End Interface

    [InterfaceId("ABA496DD-B617-4CB8-A866-BC44D7EB1FA2")]
    [OleAutomation(False)]
    Interface IDXGISurface2 Extends IDXGISurface1
        Sub GetResource(ByRef riid As UUID, ByRef ppParentResource As Any, ByRef pSubresourceIndex As Long)
    End Interface

    [InterfaceId("30961379-4609-4A41-998E-54FE567EE0C1")]
    [OleAutomation(False)]
    Interface IDXGIResource1 Extends IDXGIResource
        Sub CreateSubresourceSurface(ByVal index As Long, ByRef ppSurface As IDXGISurface2)
        Sub CreateSharedHandle(ByRef pAttributes As SECURITY_ATTRIBUTES, ByVal dwAccess As Long, ByVal lpName As LongPtr, ByRef pHandle As LongPtr)
    End Interface



    [InterfaceId("05008617-FBFD-4051-A790-144884B4F6A9")]
    [OleAutomation(False)]
    Interface IDXGIDevice2 Extends IDXGIDevice1
        Sub OfferResources(ByVal NumResources As Long, ppResources As IDXGIResource, ByVal Priority As DXGI_OFFER_RESOURCE_PRIORITY)
        Sub ReclaimResources(ByVal NumResources As Long, ppResources As IDXGIResource, pDiscarded As BOOL)
        Sub EnqueueSetEvent(ByVal hEvent As LongPtr)
    End Interface

    [InterfaceId("790A45F7-0D42-4876-983A-0A55CFE6F4AA")]
    [OleAutomation(False)]
    Interface IDXGISwapChain1 Extends IDXGISwapChain
        Sub GetDesc1(ByRef pDesc As DXGI_SWAP_CHAIN_DESC1)
        Sub GetFullscreenDesc(ByRef pDesc As DXGI_SWAP_CHAIN_FULLSCREEN_DESC)
        Sub GetHwnd(ByRef phwnd As LongPtr)
        Sub GetCoreWindow(ByRef refiid As UUID, ByRef ppunk As Any)
        Sub Present1(ByVal SyncInterval As Long, ByVal PresentFlags As DXGI_PRESENT, ByRef pPresentParameters As DXGI_PRESENT_PARAMETERS)
        [PreserveSig]
        Function IsTemporaryMonoSupported() As BOOL
        Sub GetRestrictToOutput(ByRef ppRestrictToOutput As IDXGIOutput)
        Sub SetBackgroundColor(ByRef pColor As D3DCOLORVALUE)
        Sub GetBackgroundColor(ByRef pColor As D3DCOLORVALUE)
        Sub SetRotation(ByVal rotation As DXGI_MODE_ROTATION)
        Sub GetRotation(ByRef pRotation As DXGI_MODE_ROTATION)
    End Interface

    [InterfaceId("50C83A1C-E072-4C48-87B0-3630FA36A6D0")]
    [OleAutomation(False)]
    Interface IDXGIFactory2 Extends IDXGIFactory1
        [PreserveSig]
        Function IsWindowedStereoEnabled() As Long
        Sub CreateSwapChainForHwnd(ByVal pDevice As IUnknown, ByVal hwnd As LongPtr, ByRef pDesc As DXGI_SWAP_CHAIN_DESC1, ByRef pFullscreenDesc As DXGI_SWAP_CHAIN_FULLSCREEN_DESC, ByVal pRestrictToOutput As IDXGIOutput, ByRef ppSwapChain As IDXGISwapChain1)
        Sub CreateSwapChainForCoreWindow(ByVal pDevice As IUnknown, ByVal pWindow As IUnknown, ByRef pDesc As DXGI_SWAP_CHAIN_DESC1, ByVal pRestrictToOutput As IDXGIOutput, ByRef ppSwapChain As IDXGISwapChain1)
        Sub GetSharedResourceAdapterLuid(ByVal hResource As LongPtr, ByRef pLuid As LUID)
        Sub RegisterStereoStatusWindow(ByVal WindowHandle As LongPtr, ByVal wMsg As Long, ByRef pdwCookie As Long)
        Sub RegisterStereoStatusEvent(ByVal hEvent As LongPtr, ByRef pdwCookie As Long)
        [PreserveSig]
        Sub UnregisterStereoStatus(ByVal dwCookie As Long)
        Sub RegisterOcclusionStatusWindow(ByVal WindowHandle As LongPtr, ByVal wMsg As Long, ByRef pdwCookie As Long)
        Sub RegisterOcclusionStatusEvent(ByVal hEvent As LongPtr, ByRef pdwCookie As Long)
        [PreserveSig]
        Sub UnregisterOcclusionStatus(ByVal dwCookie As Long)
        Sub CreateSwapChainForComposition(ByVal pDevice As IUnknown, ByRef pDesc As DXGI_SWAP_CHAIN_DESC1, ByVal pRestrictToOutput As IDXGIOutput, ByRef ppSwapChain As IDXGISwapChain1)
    End Interface

                                               ' LenB() = &H0130, Len() = &H0130, UDT Alignment = &H0004

    [InterfaceId("0AA1AE0A-FA0E-4B84-8644-E05FF8E5ACB5")]
    [OleAutomation(False)]
    Interface IDXGIAdapter2 Extends IDXGIAdapter1
        Sub GetDesc2(ByRef pDesc As DXGI_ADAPTER_DESC2)
    End Interface

    [InterfaceId("00CDDEA8-939B-4B83-A340-A685226666CC")]
    [OleAutomation(False)]
    Interface IDXGIOutput1 Extends IDXGIOutput
        Sub GetDisplayModeList1(ByVal EnumFormat As DXGI_FORMAT, ByVal flags As Long, ByRef pNumModes As Long, ByRef pDesc As DXGI_MODE_DESC1)
        Sub FindClosestMatchingMode1(ByRef pModeToMatch As DXGI_MODE_DESC1, ByRef pClosestMatch As DXGI_MODE_DESC1, ByVal pConcernedDevice As IUnknown)
        Sub GetDisplaySurfaceData1(ByVal pDestination As IDXGIResource)
        Sub DuplicateOutput(ByVal pDevice As IUnknown, ByRef ppOutputDuplication As IDXGIOutputDuplication)
    End Interface

    [InterfaceId("6007896C-3244-4AFD-BF18-A6D3BEDA5023")]
    [OleAutomation(False)]
    Interface IDXGIDevice3 Extends IDXGIDevice2
        [PreserveSig]
        Sub Trim()
    End Interface
	
    [InterfaceId("A8BE2AC4-199F-4946-B331-79599FB98DE7")]
    [OleAutomation(False)]
    Interface IDXGISwapChain2 Extends IDXGISwapChain1
        Sub SetSourceSize(ByVal width As Long, ByVal Height As Long)
        Sub GetSourceSize(ByRef pwidth As Long, ByRef pheight As Long)
        Sub SetMaximumFrameLatency(ByVal MaxLatency As Long)
        Sub GetMaximumFrameLatency(ByRef pMaxLatency As Long)
        [PreserveSig]
        Function GetFrameLatencyWaitableObject() As Long
        Sub SetMatrixTransform(ByRef pMatrix As DXGI_MATRIX_3X2_F)
        Sub GetMatrixTransform(ByRef pMatrix As DXGI_MATRIX_3X2_F)
    End Interface

    [InterfaceId("595E39D1-2724-4663-99B1-DA969DE28364")]
    [OleAutomation(False)]
    Interface IDXGIOutput2 Extends IDXGIOutput1
        [PreserveSig]
        Function SupportsOverlays() As Long
    End Interface

    [InterfaceId("25483823-CD46-4C7D-86CA-47AA95B837BD")]
    [OleAutomation(False)]
    Interface IDXGIFactory3 Extends IDXGIFactory2
        [PreserveSig]
        Function GetCreationFlags() As Long
    End Interface

    [InterfaceId("2633066B-4514-4C7A-8FD8-12EA98059D18")]
    [OleAutomation(False)]
    Interface IDXGIDecodeSwapChain Extends stdole.IUnknown
        Sub PresentBuffer(ByVal BufferToPresent As Long, ByVal SyncInterval As Long, ByVal flags As Long)
        Sub SetSourceRect(ByRef prect As RECT)
        Sub SetTargetRect(ByRef prect As RECT)
        Sub SetDestSize(ByVal width As Long, ByVal Height As Long)
        Sub GetSourceRect(ByRef prect As RECT)
        Sub GetTargetRect(ByRef prect As RECT)
        Sub GetDestSize(ByRef pwidth As Long, ByRef pheight As Long)
        Sub SetColorSpace(ByVal ColorSpace As DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS)
        [PreserveSig]
        Function GetColorSpace() As DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS
    End Interface

    [InterfaceId("41E7D1F2-A591-4F7B-A2E5-FA9C843E1C12")]
    [OleAutomation(False)]
    Interface IDXGIFactoryMedia Extends stdole.IUnknown
        Sub CreateSwapChainForCompositionSurfaceHandle(ByVal pDevice As IUnknown, ByVal hSurface As LongPtr, ByRef pDesc As DXGI_SWAP_CHAIN_DESC1, ByVal pRestrictToOutput As IDXGIOutput, ByRef ppSwapChain As IDXGISwapChain1)
        Sub CreateDecodeSwapChainForCompositionSurfaceHandle(ByVal pDevice As IUnknown, ByVal hSurface As LongPtr, ByRef pDesc As DXGI_DECODE_SWAP_CHAIN_DESC, ByVal pYuvDecodeBuffers As IDXGIResource, ByVal pRestrictToOutput As IDXGIOutput, ByRef ppSwapChain As IDXGIDecodeSwapChain)
    End Interface

    [InterfaceId("DD95B90B-F05F-4F6A-BD65-25BFB264BD84")]
    [OleAutomation(False)]
    Interface IDXGISwapChainMedia Extends stdole.IUnknown
        Sub GetFrameStatisticsMedia(ByRef pStats As DXGI_FRAME_STATISTICS_MEDIA)
        Sub SetPresentDuration(ByVal Duration As Long)
        Sub CheckPresentDurationSupport(ByVal DesiredPresentDuration As Long, ByRef pClosestSmallerPresentDuration As Long, ByRef pClosestLargerPresentDuration As Long)
    End Interface

    [InterfaceId("8A6BB301-7E7E-41F4-A8E0-5B32F7F99B18")]
    [OleAutomation(False)]
    Interface IDXGIOutput3 Extends IDXGIOutput2
        Sub CheckOverlaySupport(ByVal EnumFormat As DXGI_FORMAT, ByVal pConcernedDevice As IUnknown, ByRef pFlags As DXGI_OVERLAY_SUPPORT_FLAG)
    End Interface

    [InterfaceId("94D99BDB-F1F8-4AB0-B236-7DA0170EDAB1")]
    [OleAutomation(False)]
    Interface IDXGISwapChain3 Extends IDXGISwapChain2
        [PreserveSig]
        Function GetCurrentBackBufferIndex() As Long
        Sub CheckColorSpaceSupport(ByVal ColorSpace As DXGI_COLOR_SPACE_TYPE, ByRef pColorSpaceSupport As Long)
        Sub SetColorSpace1(ByVal ColorSpace As DXGI_COLOR_SPACE_TYPE)
        Sub ResizeBuffers1(ByVal BufferCount As Long, ByVal width As Long, ByVal Height As Long, ByVal Format As DXGI_FORMAT, ByVal SwapChainFlags As DXGI_SWAP_CHAIN_FLAG, ByRef pCreationNodeMask As Long, ppPresentQueue As IUnknown)
    End Interface

    [InterfaceId("DC7DCA35-2196-414D-9F53-617884032A60")]
    [OleAutomation(False)]
    Interface IDXGIOutput4 Extends IDXGIOutput3
        Sub CheckOverlayColorSpaceSupport(ByVal Format As DXGI_FORMAT, ByVal ColorSpace As DXGI_COLOR_SPACE_TYPE, ByVal pConcernedDevice As IUnknown, ByRef pFlags As DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG)
    End Interface

    [InterfaceId("1BC6EA02-EF36-464F-BF0C-21CA39E5168A")]
    [OleAutomation(False)]
    Interface IDXGIFactory4 Extends IDXGIFactory3
        Sub EnumAdapterByLuid(ByVal AdapterLuid As LongLong, ByRef riid As UUID, ByRef ppvAdapter As Any)
        Sub EnumWarpAdapter(ByRef riid As UUID, ByRef ppvAdapter As Any)
    End Interface

    [InterfaceId("645967A4-1392-4310-A798-8053CE3E93FD")]
    [OleAutomation(False)]
    Interface IDXGIAdapter3 Extends IDXGIAdapter2
        Sub RegisterHardwareContentProtectionTeardownStatusEvent(ByVal hEvent As LongPtr, ByRef pdwCookie As Long)
        [PreserveSig]
        Sub UnregisterHardwareContentProtectionTeardownStatus(ByVal dwCookie As Long)
        Sub QueryVideoMemoryInfo(ByVal NodeIndex As Long, ByVal MemorySegmentGroup As DXGI_MEMORY_SEGMENT_GROUP, ByRef pVideoMemoryInfo As DXGI_QUERY_VIDEO_MEMORY_INFO)
        Sub SetVideoMemoryReservation(ByVal NodeIndex As Long, ByVal MemorySegmentGroup As DXGI_MEMORY_SEGMENT_GROUP, ByVal Reservation As LongLong)
        Sub RegisterVideoMemoryBudgetChangeNotificationEvent(ByVal hEvent As LongPtr, ByRef pdwCookie As Long)
        [PreserveSig]
        Sub UnregisterVideoMemoryBudgetChangeNotification(ByVal dwCookie As Long)
    End Interface

    [InterfaceId("80A07424-AB52-42EB-833C-0C42FD282D98")]
    [OleAutomation(False)]
    Interface IDXGIOutput5 Extends IDXGIOutput4
        Sub DuplicateOutput1(ByVal pDevice As IUnknown, ByVal flags As DXGI_OUTDUPL_FLAG, ByVal SupportedFormatsCount As Long, ByRef pSupportedFormats As DXGI_FORMAT, ByRef ppOutputDuplication As IDXGIOutputDuplication)
    End Interface

    [InterfaceId("3D585D5A-BD4A-489E-B1F4-3DBCB6452FFB")]
    [OleAutomation(False)]
    Interface IDXGISwapChain4 Extends IDXGISwapChain3
        Sub SetHDRMetaData(ByVal type As DXGI_HDR_METADATA_TYPE, ByVal Size As Long, ByRef pMetaData As Any)
    End Interface

    [InterfaceId("7632E1F5-EE65-4DCA-87FD-84CD75F8838D")]
    [OleAutomation(False)]
    Interface IDXGIFactory5 Extends IDXGIFactory4
        Sub CheckFeatureSupport(ByVal Feature As DXGI_FEATURE, ByRef pFeatureSupportData As Any, ByVal FeatureSupportDataSize As Long)
    End Interface

    [InterfaceId("3C8D99D1-4FBF-4181-A82C-AF66BF7BD24E")]
    [OleAutomation(False)]
    Interface IDXGIAdapter4 Extends IDXGIAdapter3
        Sub GetDesc3(ByRef pDesc As DXGI_ADAPTER_DESC3)
    End Interface

    [InterfaceId("95B4F95F-D8DA-4CA4-9EE6-3B76D5968A10")]
    [OleAutomation(False)]
    Interface IDXGIDevice4 Extends IDXGIDevice3
        Sub OfferResources1(ByVal NumResources As Long, ppResources As IDXGIResource, ByVal Priority As DXGI_OFFER_RESOURCE_PRIORITY, ByVal flags As Long)
        Sub ReclaimResources1(ByVal NumResources As Long, ppResources As IDXGIResource, ByRef pResults As DXGI_RECLAIM_RESOURCE_RESULTS)
    End Interface


    [InterfaceId("068346E8-AAEC-4B84-ADD7-137F513F77A1")]
    [OleAutomation(False)]
    Interface IDXGIOutput6 Extends IDXGIOutput5
        Sub GetDesc1(ByRef pDesc As DXGI_OUTPUT_DESC1)
        Sub CheckHardwareCompositionSupport(ByRef pFlags As Long)
    End Interface
    
    [InterfaceId("c1b6694f-ff09-44a9-b03c-77900a0a1d17")]
    [OleAutomation(False)]
    Interface IDXGIFactory6 Extends IDXGIFactory5
        Sub EnumAdapterByGpuPreference(ByVal Adapter As Long, ByVal GpuPreference As DXGI_GPU_PREFERENCE, ByRef riid As GUID, ByRef ppvAdapter As Any)
    End Interface
    
    [InterfaceId("a4966eed-76db-44da-84c1-ee9a7afb20a8")]
    [OleAutomation(False)]
    Interface IDXGIFactory7 Extends IDXGIFactory6
        Sub RegisterAdaptersChangedEvent(ByVal hEvent As LongPtr, ByRef pdwCookie As Long)
        Sub UnregisterAdaptersChangedEvent(ByVal dwCookie As Long)
    End Interface
    
    
    [InterfaceId("1a6dd0ad-1e2a-4e99-a5ba-91f17818290e")]
    [OleAutomation(False)]
    Interface IPrintPreviewDxgiPackageTarget Extends IUnknown
        Sub SetJobPageCount(ByVal countType As PageCountType, ByVal count As Long)
        Sub DrawPage(ByVal jobPageNumer As Long, ByVal pageImage As IDXGISurface, ByVal dpiX As Single, ByVal dpiY As Single)
        Sub InvalidatePreview()
    End Interface

    
    
    [InterfaceId("D67441C7-672A-476f-9E82-CD55B44949CE")]
    Interface IDXGIInfoQueue Extends IUnknown
        #If Win64 Then
        Sub SetMessageCountLimit(Producer As UUID, ByVal MessageCountLimit As LongLong)
        [PreserveSig] Sub ClearStoredMessages(Producer As UUID)
        Sub GetMessage(Producer As UUID, ByVal MessageIndex As LongLong, ByRef pMessage As DXGI_INFO_QUEUE_MESSAGE, ByRef pMessageByteLength As LongPtr)
        [PreserveSig] Function GetNumStoredMessagesAllowedByRetrievalFilters(Producer As UUID) As LongLong
        [PreserveSig] Function GetNumStoredMessages(Producer As UUID) As LongLong
        [PreserveSig] Function GetNumMessagesDiscardedByMessageCountLimit(Producer As UUID) As LongLong
        [PreserveSig] Function GetMessageCountLimit(Producer As UUID) As LongLong
        [PreserveSig] Function GetNumMessagesAllowedByStorageFilter(Producer As UUID) As LongLong
        [PreserveSig] Function GetNumMessagesDeniedByStorageFilter(Producer As UUID) As LongLong
        Sub AddStorageFilterEntries(Producer As UUID, ByRef pFilter As DXGI_INFO_QUEUE_FILTER)
        Function GetStorageFilter(Producer As UUID, ByRef pFilter As DXGI_INFO_QUEUE_FILTER, ByRef pFilterByteLength As LongPtr) As Long
        [PreserveSig] Sub ClearStorageFilter(Producer As UUID)
        Sub PushEmptyStorageFilter(Producer As UUID)
        Sub PushDenyAllStorageFilter(Producer As UUID)
        Sub PushCopyOfStorageFilter(Producer As UUID)
        Sub PushStorageFilter(Producer As UUID, ByRef pFilter As DXGI_INFO_QUEUE_FILTER)
        [PreserveSig] Sub PopStorageFilter(Producer As UUID)
        [PreserveSig] Function GetStorageFilterStackSize(Producer As UUID) As Long
        Sub AddRetrievalFilterEntries(Producer As UUID, ByRef pFilter As DXGI_INFO_QUEUE_FILTER)
        Sub GetRetrievalFilter(Producer As UUID, ByRef pFilter As DXGI_INFO_QUEUE_FILTER, ByRef pFilterByteLength As LongPtr)
        [PreserveSig] Sub ClearRetrievalFilter(Producer As UUID)
        Sub PushEmptyRetrievalFilter(Producer As UUID)
        Sub PushDenyAllRetrievalFilter(Producer As UUID)
        Sub PushCopyOfRetrievalFilter(Producer As UUID)
        Sub PushRetrievalFilter(Producer As UUID, ByRef pFilter As DXGI_INFO_QUEUE_FILTER)
        Sub PopRetrievalFilter(Producer As UUID)
        [PreserveSig] Function GetRetrievalFilterStackSize(Producer As UUID) As Long
        Sub AddMessage(Producer As UUID, ByVal Category As DXGI_INFO_QUEUE_MESSAGE_CATEGORY, ByVal Severity As DXGI_INFO_QUEUE_MESSAGE_SEVERITY, ByVal ID As DXGI_INFO_QUEUE_MESSAGE_ID, ByVal pDescription As String)
        Sub AddApplicationMessage(ByVal Severity As DXGI_INFO_QUEUE_MESSAGE_SEVERITY, ByVal pDescription As LongPtr)
        Sub SetBreakOnCategory(Producer As UUID, ByVal Category As DXGI_INFO_QUEUE_MESSAGE_CATEGORY, ByVal bEnable As BOOL)
        Sub SetBreakOnSeverity(Producer As UUID, ByVal Severity As DXGI_INFO_QUEUE_MESSAGE_SEVERITY, ByVal bEnable As BOOL)
        Sub SetBreakOnID(Producer As UUID, ByVal ID As DXGI_INFO_QUEUE_MESSAGE_ID, ByVal bEnable As BOOL)
        [PreserveSig] Function GetBreakOnCategory(Producer As UUID, ByVal Category As DXGI_INFO_QUEUE_MESSAGE_CATEGORY) As BOOL
        [PreserveSig] Function GetBreakOnSeverity(Producer As UUID, ByVal Severity As DXGI_INFO_QUEUE_MESSAGE_SEVERITY) As BOOL
        [PreserveSig] Function GetBreakOnID(Producer As UUID, ByVal ID As DXGI_INFO_QUEUE_MESSAGE_ID) As BOOL
        [PreserveSig] Sub SetMuteDebugOutput(Producer As UUID, ByVal bMute As BOOL)
        [PreserveSig] Function GetMuteDebugOutput(Producer As UUID) As BOOL
        #Else
        Sub SetMessageCountLimit(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long, ByVal MessageCountLimit As LongLong)
        [PreserveSig] Sub ClearStoredMessages(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long)
        Sub GetMessage(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long, ByVal MessageIndex As LongLong, ByRef pMessage As DXGI_INFO_QUEUE_MESSAGE, ByRef pMessageByteLength As LongPtr)
        [PreserveSig] Function GetNumStoredMessagesAllowedByRetrievalFilters(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long) As LongLong
        [PreserveSig] Function GetNumStoredMessages(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long) As LongLong
        [PreserveSig] Function GetNumMessagesDiscardedByMessageCountLimit(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long) As LongLong
        [PreserveSig] Function GetMessageCountLimit(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long) As LongLong
        [PreserveSig] Function GetNumMessagesAllowedByStorageFilter(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long) As LongLong
        [PreserveSig] Function GetNumMessagesDeniedByStorageFilter(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long) As LongLong
        Sub AddStorageFilterEntries(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long, ByRef pFilter As DXGI_INFO_QUEUE_FILTER)
        Function GetStorageFilter(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long, ByRef pFilter As DXGI_INFO_QUEUE_FILTER, ByRef pFilterByteLength As LongPtr) As Long
        [PreserveSig] Sub ClearStorageFilter(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long)
        Sub PushEmptyStorageFilter(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long)
        Sub PushDenyAllStorageFilter(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long)
        Sub PushCopyOfStorageFilter(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long)
        Sub PushStorageFilter(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long, ByRef pFilter As DXGI_INFO_QUEUE_FILTER)
        [PreserveSig] Sub PopStorageFilter(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long)
        [PreserveSig] Function GetStorageFilterStackSize(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long) As Long
        Sub AddRetrievalFilterEntries(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long, ByRef pFilter As DXGI_INFO_QUEUE_FILTER)
        Sub GetRetrievalFilter(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long, ByRef pFilter As DXGI_INFO_QUEUE_FILTER, ByRef pFilterByteLength As LongPtr)
        [PreserveSig] Sub ClearRetrievalFilter(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long)
        Sub PushEmptyRetrievalFilter(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long)
        Sub PushDenyAllRetrievalFilter(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long)
        Sub PushCopyOfRetrievalFilter(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long)
        Sub PushRetrievalFilter(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long, ByRef pFilter As DXGI_INFO_QUEUE_FILTER)
        Sub PopRetrievalFilter(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long)
        [PreserveSig] Function GetRetrievalFilterStackSize(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long) As Long
        Sub AddMessage(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long, ByVal Category As DXGI_INFO_QUEUE_MESSAGE_CATEGORY, ByVal Severity As DXGI_INFO_QUEUE_MESSAGE_SEVERITY, ByVal ID As DXGI_INFO_QUEUE_MESSAGE_ID, ByVal pDescription As String)
        Sub AddApplicationMessage(ByVal Severity As DXGI_INFO_QUEUE_MESSAGE_SEVERITY, ByVal pDescription As LongPtr)
        Sub SetBreakOnCategory(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long, ByVal Category As DXGI_INFO_QUEUE_MESSAGE_CATEGORY, ByVal bEnable As BOOL)
        Sub SetBreakOnSeverity(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long, ByVal Severity As DXGI_INFO_QUEUE_MESSAGE_SEVERITY, ByVal bEnable As BOOL)
        Sub SetBreakOnID(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long, ByVal ID As DXGI_INFO_QUEUE_MESSAGE_ID, ByVal bEnable As BOOL)
        [PreserveSig] Function GetBreakOnCategory(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long, ByVal Category As DXGI_INFO_QUEUE_MESSAGE_CATEGORY) As BOOL
        [PreserveSig] Function GetBreakOnSeverity(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long, ByVal Severity As DXGI_INFO_QUEUE_MESSAGE_SEVERITY) As BOOL
        [PreserveSig] Function GetBreakOnID(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long, ByVal ID As DXGI_INFO_QUEUE_MESSAGE_ID) As BOOL
        [PreserveSig] Sub SetMuteDebugOutput(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long, ByVal bMute As BOOL)
        [PreserveSig] Function GetMuteDebugOutput(ByVal Producer1 As Long, ByVal Producer2 As Long, ByVal Producer3 As Long, ByVal Producer4 As Long) As BOOL
        #End If
    End Interface
    
    [InterfaceId("119E7452-DE9E-40fe-8806-88F90C12B441")]
    Interface IDXGIDebug Extends IUnknown
        #If Win64 Then
        Sub ReportLiveObjects(apiid As UUID, ByVal flags As DXGI_DEBUG_RLO_FLAGS)
        #Else
        Sub ReportLiveObjects(ByVal apiid1 As Long, ByVal apiid2 As Long, ByVal apiid3 As Long, ByVal apiid4 As Long, ByVal flags As DXGI_DEBUG_RLO_FLAGS)
        #End If
    End Interface

    [InterfaceId("c5a05f0c-16f2-4adf-9f4d-a8c4d58ac550")]
    Interface IDXGIDebug1 Extends IDXGIDebug
        [PreserveSig]
        Sub EnableLeakTrackingForThread()
        [PreserveSig]
        Sub DisableLeakTrackingForThread()
        [PreserveSig]
        Function IsLeakTrackingEnabledForThread() As BOOL
    End Interface
    
    
#End Region

#Region "DCOMP"

    [InterfaceId("C37EA93A-E7AA-450D-B16F-9746CB0407F3")]
    [OleAutomation(False)]
    Interface IDCompositionDevice Extends stdole.IUnknown
        Sub Commit()
        Sub WaitForCommitCompletion()
        Sub GetFrameStatistics(ByRef statistics As DCOMPOSITION_FRAME_STATISTICS)
        Sub CreateTargetForHwnd(ByVal hwnd As LongPtr, ByVal topmost As Long, ByRef target As IDCompositionTarget)
        Sub CreateVisual(ByRef visual As IDCompositionVisual)
        Sub CreateSurface(ByVal width As Long, ByVal Height As Long, ByVal PixelFormat As DXGI_FORMAT, ByVal AlphaMode As DXGI_ALPHA_MODE, ByRef surface As IDCompositionSurface)
        Sub CreateVirtualSurface(ByVal initialWidth As Long, ByVal initialHeight As Long, ByVal PixelFormat As DXGI_FORMAT, ByVal AlphaMode As DXGI_ALPHA_MODE, ByRef virtualSurface As IDCompositionVirtualSurface)
        Sub CreateSurfaceFromHandle(ByVal Handle As LongPtr, ByRef surface As IUnknown)
        Sub CreateSurfaceFromHwnd(ByVal hwnd As LongPtr, ByRef surface As IUnknown)
        Sub CreateTranslateTransform(ByRef translateTransform As IDCompositionTranslateTransform)
        Sub CreateScaleTransform(ByRef scaleTransform As IDCompositionScaleTransform)
        Sub CreateRotateTransform(ByRef rotateTransform As IDCompositionRotateTransform)
        Sub CreateSkewTransform(ByRef skewTransform As IDCompositionSkewTransform)
        Sub CreateMatrixTransform(ByRef matrixTransform As IDCompositionMatrixTransform)
        Sub CreateTransformGroup(ByVal transforms As LongPtr, ByVal Elements As Long, ByRef transformGroup As IDCompositionTransform)
        Sub CreateTranslateTransform3D(ByRef translateTransform3D As IDCompositionTranslateTransform3D)
        Sub CreateScaleTransform3D(ByRef scaleTransform3D As IDCompositionScaleTransform3D)
        Sub CreateRotateTransform3D(ByRef rotateTransform3D As IDCompositionRotateTransform3D)
        Sub CreateMatrixTransform3D(ByRef matrixTransform3D As IDCompositionMatrixTransform3D)
        Sub CreateTransform3DGroup(ByVal transforms3D As LongPtr, ByVal Elements As Long, ByRef transform3DGroup As IDCompositionTransform3D)
        Sub CreateEffectGroup(ByRef effectGroup As IDCompositionEffectGroup)
        Sub CreateRectangleClip(ByRef clip As IDCompositionRectangleClip)
        Sub CreateAnimation(ByRef Animation As IDCompositionAnimation)
        Sub CheckDeviceState(ByRef pfValid As Long)
    End Interface

    [InterfaceId("EACDD04C-117E-4E17-88F4-D1B12B0E3D89")]
    [OleAutomation(False)]
    Interface IDCompositionTarget Extends stdole.IUnknown
        Sub SetRoot(ByVal visual As IDCompositionVisual)
    End Interface


    [InterfaceId("4D93059D-097B-4651-9A60-F0F25116E2F3")]
    [OleAutomation(False)]
    Interface IDCompositionVisual Extends stdole.IUnknown
        Sub SetOffsetX(ByVal Animation As IDCompositionAnimation)
        Sub SetOffsetX(ByVal offsetX As Single)
        Sub SetOffsetY(ByVal Animation As IDCompositionAnimation)
        Sub SetOffsetY(ByVal offsetY As Single)
        Sub SetTransform_T(ByVal transform As IDCompositionTransform)
        Sub SetTransform(ByRef matrix As D2D_MATRIX_3X2_F)
        Sub SetTransformParent(ByVal visual As IDCompositionVisual)
        Sub SetEffect(ByVal effect As IDCompositionEffect)
        Sub SetBitmapInterpolationMode(ByVal InterpolationMode As DCOMPOSITION_BITMAP_INTERPOLATION_MODE)
        Sub SetBorderMode(ByVal borderMode As DCOMPOSITION_BORDER_MODE)
        Sub SetClip(ByVal clip As IDCompositionClip)
        Sub SetClipR(ByRef RECT As D2D_RECT_F)
        Sub SetContent(ByVal Content As IUnknown)
        Sub AddVisual(ByVal visual As IDCompositionVisual, ByVal insertAbove As Long, ByVal referenceVisual As IDCompositionVisual)
        Sub RemoveVisual(ByVal visual As IDCompositionVisual)
        Sub RemoveAllVisuals()
        Sub SetCompositeMode(ByVal compositeMode As DCOMPOSITION_COMPOSITE_MODE)
    End Interface

    [InterfaceId("EC81B08F-BFCB-4E8D-B193-A915587999E8")]
    [OleAutomation(False)]
    Interface IDCompositionEffect Extends stdole.IUnknown
    End Interface

    [InterfaceId("71185722-246B-41F2-AAD1-0443F7F4BFC2")]
    [OleAutomation(False)]
    Interface IDCompositionTransform3D Extends IDCompositionEffect
    End Interface

    [InterfaceId("FD55FAA7-37E0-4C20-95D2-9BE45BC33F55")]
    [OleAutomation(False)]
    Interface IDCompositionTransform Extends IDCompositionTransform3D
    End Interface

    [InterfaceId("06791122-C6F0-417D-8323-269E987F5954")]
    [OleAutomation(False)]
    Interface IDCompositionTranslateTransform Extends IDCompositionTransform
        Sub SetOffsetX(ByVal Animation As IDCompositionAnimation)
        Sub SetOffsetX(ByVal offsetX As Single)
        Sub SetOffsetY(ByVal Animation As IDCompositionAnimation)
        Sub SetOffsetY(ByVal offsetY As Single)
    End Interface

    [InterfaceId("71FDE914-40EF-45EF-BD51-68B037C339F9")]
    [OleAutomation(False)]
    Interface IDCompositionScaleTransform Extends IDCompositionTransform
        Sub SetScaleX(ByVal Animation As IDCompositionAnimation)
        Sub SetScaleX(ByVal scaleX As Single)
        Sub SetScaleY(ByVal Animation As IDCompositionAnimation)
        Sub SetScaleY(ByVal scaleY As Single)
        Sub SetCenterX(ByVal Animation As IDCompositionAnimation)
        Sub SetCenterX(ByVal centerX As Single)
        Sub SetCenterY(ByVal Animation As IDCompositionAnimation)
        Sub SetCenterY(ByVal centerY As Single)
    End Interface

    [InterfaceId("641ED83C-AE96-46C5-90DC-32774CC5C6D5")]
    [OleAutomation(False)]
    Interface IDCompositionRotateTransform Extends IDCompositionTransform
        Sub SetAngle(ByVal Animation As IDCompositionAnimation)
        Sub SetAngle(ByVal angle As Single)
        Sub SetCenterX(ByVal Animation As IDCompositionAnimation)
        Sub SetCenterX(ByVal centerX As Single)
        Sub SetCenterY(ByVal Animation As IDCompositionAnimation)
        Sub SetCenterY(ByVal centerY As Single)
    End Interface

    [InterfaceId("E57AA735-DCDB-4C72-9C61-0591F58889EE")]
    [OleAutomation(False)]
    Interface IDCompositionSkewTransform Extends IDCompositionTransform
        Sub SetAngleX(ByVal Animation As IDCompositionAnimation)
        Sub SetAngleX(ByVal angleX As Single)
        Sub SetAngleY(ByVal Animation As IDCompositionAnimation)
        Sub SetAngleY(ByVal angleY As Single)
        Sub SetCenterX(ByVal Animation As IDCompositionAnimation)
        Sub SetCenterX(ByVal centerX As Single)
        Sub SetCenterY(ByVal Animation As IDCompositionAnimation)
        Sub SetCenterY(ByVal centerY As Single)
    End Interface

    [InterfaceId("16CDFF07-C503-419C-83F2-0965C7AF1FA6")]
    [OleAutomation(False)]
    Interface IDCompositionMatrixTransform Extends IDCompositionTransform
        Sub SetMatrix(ByRef matrix As D2D_MATRIX_3X2_F)
        Sub SetMatrixElement(ByVal Row As Long, ByVal Column As Long, ByVal Animation As IDCompositionAnimation)
        Sub SetMatrixElement(ByVal Row As Long, ByVal Column As Long, ByVal Value As Single)
    End Interface

    [InterfaceId("A7929A74-E6B2-4BD6-8B95-4040119CA34D")]
    [OleAutomation(False)]
    Interface IDCompositionEffectGroup Extends IDCompositionEffect
        Sub SetOpacity(ByVal Animation As IDCompositionAnimation)
        Sub SetOpacity(ByVal opacity As Single)
        Sub SetTransform3D(ByVal transform3D As IDCompositionTransform3D)
    End Interface

    [InterfaceId("91636D4B-9BA1-4532-AAF7-E3344994D788")]
    [OleAutomation(False)]
    Interface IDCompositionTranslateTransform3D Extends IDCompositionTransform3D
        Sub SetOffsetX(ByVal Animation As IDCompositionAnimation)
        Sub SetOffsetX(ByVal offsetX As Single)
        Sub SetOffsetY(ByVal Animation As IDCompositionAnimation)
        Sub SetOffsetY(ByVal offsetY As Single)
        Sub SetOffsetZ(ByVal Animation As IDCompositionAnimation)
        Sub SetOffsetZ(ByVal offsetZ As Single)
    End Interface

    [InterfaceId("2A9E9EAD-364B-4B15-A7C4-A1997F78B389")]
    [OleAutomation(False)]
    Interface IDCompositionScaleTransform3D Extends IDCompositionTransform3D
        Sub SetScaleX(ByVal Animation As IDCompositionAnimation)
        Sub SetScaleX(ByVal scaleX As Single)
        Sub SetScaleY(ByVal Animation As IDCompositionAnimation)
        Sub SetScaleY(ByVal scaleY As Single)
        Sub SetScaleZ(ByVal Animation As IDCompositionAnimation)
        Sub SetScaleZ(ByVal scaleZ As Single)
        Sub SetCenterX(ByVal Animation As IDCompositionAnimation)
        Sub SetCenterX(ByVal centerX As Single)
        Sub SetCenterY(ByVal Animation As IDCompositionAnimation)
        Sub SetCenterY(ByVal centerY As Single)
        Sub SetCenterZ(ByVal Animation As IDCompositionAnimation)
        Sub SetCenterZ(ByVal centerZ As Single)
    End Interface

    [InterfaceId("D8F5B23F-D429-4A91-B55A-D2F45FD75B18")]
    [OleAutomation(False)]
    Interface IDCompositionRotateTransform3D Extends IDCompositionTransform3D
        Sub SetAngle(ByVal Animation As IDCompositionAnimation)
        Sub SetAngle(ByVal angle As Single)
        Sub SetAxisX(ByVal Animation As IDCompositionAnimation)
        Sub SetAxisX(ByVal axisX As Single)
        Sub SetAxisY(ByVal Animation As IDCompositionAnimation)
        Sub SetAxisY(ByVal axisY As Single)
        Sub SetAxisZ(ByVal Animation As IDCompositionAnimation)
        Sub SetAxisZ(ByVal axisZ As Single)
        Sub SetCenterX(ByVal Animation As IDCompositionAnimation)
        Sub SetCenterX(ByVal centerX As Single)
        Sub SetCenterY(ByVal Animation As IDCompositionAnimation)
        Sub SetCenterY(ByVal centerY As Single)
        Sub SetCenterZ(ByVal Animation As IDCompositionAnimation)
        Sub SetCenterZ(ByVal centerZ As Single)
     End Interface
                                              ' LenB() = &H0018, Len() = &H0018, UDT Alignment = &H0004

    [InterfaceId("4B3363F0-643B-41B7-B6E0-CCF22D34467C")]
    [OleAutomation(False)]
    Interface IDCompositionMatrixTransform3D Extends IDCompositionTransform3D
        Sub SetMatrix(ByRef matrix As D3DMATRIX)
        Sub SetMatrixElement(ByVal Row As Long, ByVal Column As Long, ByVal Animation As IDCompositionAnimation)
        Sub SetMatrixElement(ByVal Row As Long, ByVal Column As Long, ByVal Value As Single)
    End Interface

    [InterfaceId("64AC3703-9D3F-45EC-A109-7CAC0E7A13A7")]
    [OleAutomation(False)]
    Interface IDCompositionClip Extends stdole.IUnknown
    End Interface

    [InterfaceId("9842AD7D-D9CF-4908-AED7-48B51DA5E7C2")]
    [OleAutomation(False)]
    Interface IDCompositionRectangleClip Extends IDCompositionClip
        Sub SetLeft(ByVal Animation As IDCompositionAnimation)
        Sub SetLeft(ByVal Left As Single)
        Sub SetTop(ByVal Animation As IDCompositionAnimation)
        Sub SetTop(ByVal Top As Single)
        Sub SetRight(ByVal Animation As IDCompositionAnimation)
        Sub SetRight(ByVal Right As Single)
        Sub SetBottom(ByVal Animation As IDCompositionAnimation)
        Sub SetBottom(ByVal Bottom As Single)
        Sub SetTopLeftRadiusX(ByVal Animation As IDCompositionAnimation)
        Sub SetTopLeftRadiusX(ByVal radius As Single)
        Sub SetTopLeftRadiusY(ByVal Animation As IDCompositionAnimation)
        Sub SetTopLeftRadiusY(ByVal radius As Single)
        Sub SetTopRightRadiusX(ByVal Animation As IDCompositionAnimation)
        Sub SetTopRightRadiusX(ByVal radius As Single)
        Sub SetTopRightRadiusY(ByVal Animation As IDCompositionAnimation)
        Sub SetTopRightRadiusY(ByVal radius As Single)
        Sub SetBottomLeftRadiusX(ByVal Animation As IDCompositionAnimation)
        Sub SetBottomLeftRadiusX(ByVal radius As Single)
        Sub SetBottomLeftRadiusY(ByVal Animation As IDCompositionAnimation)
        Sub SetBottomLeftRadiusY(ByVal radius As Single)
        Sub SetBottomRightRadiusX(ByVal Animation As IDCompositionAnimation)
        Sub SetBottomRightRadiusX(ByVal radius As Single)
        Sub SetBottomRightRadiusY(ByVal Animation As IDCompositionAnimation)
        Sub SetBottomRightRadiusY(ByVal radius As Single)
    End Interface

    [InterfaceId("BB8A4953-2C99-4F5A-96F5-4819027FA3AC")]
    [OleAutomation(False)]
    Interface IDCompositionSurface Extends stdole.IUnknown
        Sub BeginDraw(ByRef updateRect As RECT, ByRef iid As UUID, ByRef updateObject As Any, ByRef updateOffset As POINT)
        Sub EndDraw()
        Sub SuspendDraw()
        Sub ResumeDraw()
        Sub Scroll(ByRef scrollRect As RECT, ByRef clipRect As RECT, ByVal offsetX As Long, ByVal offsetY As Long)
    End Interface

    [InterfaceId("AE471C51-5F53-4A24-8D3E-D0C39C30B3F0")]
    [OleAutomation(False)]
    Interface IDCompositionVirtualSurface Extends IDCompositionSurface
        Sub Resize(ByVal width As Long, ByVal Height As Long)
        Sub Trim(ByRef rectangles As RECT, ByVal Count As Long)
    End Interface

    [InterfaceId("75F6468D-1B8E-447C-9BC6-75FEA80B5B25")]
    [OleAutomation(False)]
    Interface IDCompositionDevice2 Extends stdole.IUnknown
        Sub Commit()
        Sub WaitForCommitCompletion()
        Sub GetFrameStatistics(ByRef statistics As DCOMPOSITION_FRAME_STATISTICS)
        Sub CreateVisual(ByRef visual As IDCompositionVisual2)
        Sub CreateSurfaceFactory(ByVal renderingDevice As IUnknown, ByRef surfaceFactory As IDCompositionSurfaceFactory)
        Sub CreateSurface(ByVal width As Long, ByVal Height As Long, ByVal PixelFormat As DXGI_FORMAT, ByVal AlphaMode As DXGI_ALPHA_MODE, ByRef surface As IDCompositionSurface)
        Sub CreateVirtualSurface(ByVal initialWidth As Long, ByVal initialHeight As Long, ByVal PixelFormat As DXGI_FORMAT, ByVal AlphaMode As DXGI_ALPHA_MODE, ByRef virtualSurface As IDCompositionVirtualSurface)
        Sub CreateTranslateTransform(ByRef translateTransform As IDCompositionTranslateTransform)
        Sub CreateScaleTransform(ByRef scaleTransform As IDCompositionScaleTransform)
        Sub CreateRotateTransform(ByRef rotateTransform As IDCompositionRotateTransform)
        Sub CreateSkewTransform(ByRef skewTransform As IDCompositionSkewTransform)
        Sub CreateMatrixTransform(ByRef matrixTransform As IDCompositionMatrixTransform)
        Sub CreateTransformGroup(ByVal transforms As LongPtr, ByVal Elements As Long, ByRef transformGroup As IDCompositionTransform)
        Sub CreateTranslateTransform3D(ByRef translateTransform3D As IDCompositionTranslateTransform3D)
        Sub CreateScaleTransform3D(ByRef scaleTransform3D As IDCompositionScaleTransform3D)
        Sub CreateRotateTransform3D(ByRef rotateTransform3D As IDCompositionRotateTransform3D)
        Sub CreateMatrixTransform3D(ByRef matrixTransform3D As IDCompositionMatrixTransform3D)
        Sub CreateTransform3DGroup(ByVal transforms3D As LongPtr, ByVal Elements As Long, ByRef transform3DGroup As IDCompositionTransform3D)
        Sub CreateEffectGroup(ByRef effectGroup As IDCompositionEffectGroup)
        Sub CreateRectangleClip(ByRef clip As IDCompositionRectangleClip)
        Sub CreateAnimation(ByRef Animation As IDCompositionAnimation)
    End Interface

    [InterfaceId("5F4633FE-1E08-4CB8-8C75-CE24333F5602")]
    [OleAutomation(False)]
    Interface IDCompositionDesktopDevice Extends IDCompositionDevice2
        Sub CreateTargetForHwnd(ByVal hwnd As LongPtr, ByVal topmost As Long, ByRef target As IDCompositionTarget)
        Sub CreateSurfaceFromHandle(ByVal Handle As LongPtr, ByRef surface As IUnknown)
        Sub CreateSurfaceFromHwnd(ByVal hwnd As LongPtr, ByRef surface As IUnknown)
    End Interface

    [InterfaceId("A1A3C64A-224F-4A81-9773-4F03A89D3C6C")]
    [OleAutomation(False)]
    Interface IDCompositionDeviceDebug Extends stdole.IUnknown
        Sub EnableDebugCounters()
        Sub DisableDebugCounters()
    End Interface

    [InterfaceId("E334BC12-3937-4E02-85EB-FCF4EB30D2C8")]
    [OleAutomation(False)]
    Interface IDCompositionSurfaceFactory Extends stdole.IUnknown
        Sub CreateSurface(ByVal width As Long, ByVal Height As Long, ByVal PixelFormat As DXGI_FORMAT, ByVal AlphaMode As DXGI_ALPHA_MODE, ByRef surface As IDCompositionSurface)
        Sub CreateVirtualSurface(ByVal initialWidth As Long, ByVal initialHeight As Long, ByVal PixelFormat As DXGI_FORMAT, ByVal AlphaMode As DXGI_ALPHA_MODE, ByRef virtualSurface As IDCompositionVirtualSurface)
    End Interface

    [InterfaceId("E8DE1639-4331-4B26-BC5F-6A321D347A85")]
    [OleAutomation(False)]
    Interface IDCompositionVisual2 Extends IDCompositionVisual
        Sub SetOpacityMode(ByVal mode As DCOMPOSITION_OPACITY_MODE)
        Sub SetBackFaceVisibility(ByVal visibility As DCOMPOSITION_BACKFACE_VISIBILITY)
    End Interface

    [InterfaceId("FED2B808-5EB4-43A0-AEA3-35F65280F91B")]
    [OleAutomation(False)]
    Interface IDCompositionVisualDebug Extends IDCompositionVisual2
        Sub EnableHeatMap(ByRef color As D2D1_COLOR_F)
        Sub DisableHeatMap()
        Sub EnableRedrawRegions()
        Sub DisableRedrawRegions()
    End Interface


    [InterfaceId("2775F462-B6C1-4015-B0BE-B3E7D6A4976D")]
    [OleAutomation(False)]
    Interface IDCompositionVisual3 Extends IDCompositionVisualDebug
        Sub SetDepthMode(ByVal mode As DCOMPOSITION_DEPTH_MODE)
        Sub SetOffsetZ(ByVal Animation As IDCompositionAnimation)
        Sub SetOffsetZ(ByVal offsetZ As Single)
        Sub SetOpacity(ByVal Animation As IDCompositionAnimation)
        Sub SetOpacity(ByVal opacity As Single)
        Sub SetTransform_T(ByVal transform As IDCompositionTransform3D)
        Sub SetTransform(ByRef matrix As D2D_MATRIX_4X4_F)
        Sub SetVisible(ByVal Visible As Long)
    End Interface

    [InterfaceId("0987CB06-F916-48BF-8D35-CE7641781BD9")]
    [OleAutomation(False)]
    Interface IDCompositionDevice3 Extends IDCompositionDevice2
        Sub CreateGaussianBlurEffect(ByRef gaussianBlurEffect As IDCompositionGaussianBlurEffect)
        Sub CreateBrightnessEffect(ByRef brightnessEffect As IDCompositionBrightnessEffect)
        Sub CreateColorMatrixEffect(ByRef colorMatrixEffect As IDCompositionColorMatrixEffect)
        Sub CreateShadowEffect(ByRef shadowEffect As IDCompositionShadowEffect)
        Sub CreateHueRotationEffect(ByRef hueRotationEffect As IDCompositionHueRotationEffect)
        Sub CreateSaturationEffect(ByRef saturationEffect As IDCompositionSaturationEffect)
        Sub CreateTurbulenceEffect(ByRef turbulenceEffect As IDCompositionTurbulenceEffect)
        Sub CreateLinearTransferEffect(ByRef linearTransferEffect As IDCompositionLinearTransferEffect)
        Sub CreateTableTransferEffect(ByRef tableTransferEffect As IDCompositionTableTransferEffect)
        Sub CreateCompositeEffect(ByRef compositeEffect As IDCompositionCompositeEffect)
        Sub CreateBlendEffect(ByRef blendEffect As IDCompositionBlendEffect)
        Sub CreateArithmeticCompositeEffect(ByRef arithmeticCompositeEffect As IDCompositionArithmeticCompositeEffect)
        Sub CreateAffineTransform2DEffect(ByRef affineTransform2dEffect As IDCompositionAffineTransform2DEffect)
    End Interface

    [InterfaceId("30C421D5-8CB2-4E9F-B133-37BE270D4AC2")]
    [OleAutomation(False)]
    Interface IDCompositionFilterEffect Extends IDCompositionEffect
        Sub SetInput(ByVal index As Long, ByVal input As IUnknown, ByVal flags As Long)
    End Interface

    [InterfaceId("45D4D0B7-1BD4-454E-8894-2BFA68443033")]
    [OleAutomation(False)]
    Interface IDCompositionGaussianBlurEffect Extends IDCompositionFilterEffect
        Sub SetStandardDeviation(ByVal Animation As IDCompositionAnimation)
        Sub SetStandardDeviation(ByVal amount As Single)
        Sub SetBorderMode(ByVal mode As D2D1_BORDER_MODE)
    End Interface

    [InterfaceId("6027496E-CB3A-49AB-934F-D798DA4F7DA6")]
    [OleAutomation(False)]
    Interface IDCompositionBrightnessEffect Extends IDCompositionFilterEffect
        Sub SetWhitePoint(ByRef WhitePoint As D2D1_VECTOR_2F)
        Sub SetBlackPoint(ByRef blackPoint As D2D1_VECTOR_2F)
        Sub SetWhitePointX(ByVal Animation As IDCompositionAnimation)
        Sub SetWhitePointX(ByVal whitePointX As Single)
        Sub SetWhitePointY(ByVal Animation As IDCompositionAnimation)
        Sub SetWhitePointY(ByVal whitePointY As Single)
        Sub SetBlackPointX(ByVal Animation As IDCompositionAnimation)
        Sub SetBlackPointX(ByVal blackPointX As Single)
        Sub SetBlackPointY(ByVal Animation As IDCompositionAnimation)
        Sub SetBlackPointY(ByVal blackPointY As Single)
    End Interface

    [InterfaceId("C1170A22-3CE2-4966-90D4-55408BFC84C4")]
    [OleAutomation(False)]
    Interface IDCompositionColorMatrixEffect Extends IDCompositionFilterEffect
        Sub SetMatrix(ByRef matrix As D2D_MATRIX_5X4_F)
        Sub SetMatrixElement(ByVal Row As Long, ByVal Column As Long, ByVal Animation As IDCompositionAnimation)
        Sub SetMatrixElement(ByVal Row As Long, ByVal Column As Long, ByVal Value As Single)
        Sub SetAlphaMode(ByVal mode As D2D1_COLORMATRIX_ALPHA_MODE)
        Sub SetClampOutput(ByVal clamp As Long)
    End Interface

    [InterfaceId("4AD18AC0-CFD2-4C2F-BB62-96E54FDB6879")]
    [OleAutomation(False)]
    Interface IDCompositionShadowEffect Extends IDCompositionFilterEffect
        Sub SetStandardDeviation(ByVal Animation As IDCompositionAnimation)
        Sub SetStandardDeviation(ByVal amount As Single)
        Sub SetColor(ByRef color As D2D_VECTOR_4F)
        Sub SetRed(ByVal Animation As IDCompositionAnimation)
        Sub SetRed(ByVal amount As Single)
        Sub SetGreen(ByVal Animation As IDCompositionAnimation)
        Sub SetGreen(ByVal amount As Single)
        Sub SetBlue(ByVal Animation As IDCompositionAnimation)
        Sub SetBlue(ByVal amount As Single)
        Sub SetAlpha(ByVal Animation As IDCompositionAnimation)
        Sub SetAlpha(ByVal amount As Single)
    End Interface

    [InterfaceId("6DB9F920-0770-4781-B0C6-381912F9D167")]
    [OleAutomation(False)]
    Interface IDCompositionHueRotationEffect Extends IDCompositionFilterEffect
        Sub SetAngle(ByVal Animation As IDCompositionAnimation)
        Sub SetAngle(ByVal amountDegrees As Single)
    End Interface

    [InterfaceId("A08DEBDA-3258-4FA4-9F16-9174D3FE93B1")]
    [OleAutomation(False)]
    Interface IDCompositionSaturationEffect Extends IDCompositionFilterEffect
        Sub SetSaturation(ByVal Animation As IDCompositionAnimation)
        Sub SetSaturation(ByVal ratio As Single)
    End Interface

    [InterfaceId("A6A55BDA-C09C-49F3-9193-A41922C89715")]
    [OleAutomation(False)]
    Interface IDCompositionTurbulenceEffect Extends IDCompositionFilterEffect
        Sub SetOffset(ByRef Offset As D2D1_VECTOR_2F)
        Sub SetBaseFrequency(ByRef frequency As D2D1_VECTOR_2F)
        Sub SetSize(ByRef SIZE As D2D1_VECTOR_2F)
        Sub SetNumOctaves(ByVal numOctaves As Long)
        Sub SetSeed(ByVal seed As Long)
        Sub SetNoise(ByVal noise As D2D1_TURBULENCE_NOISE)
        Sub SetStitchable(ByVal stitchable As Long)
    End Interface

    [InterfaceId("4305EE5B-C4A0-4C88-9385-67124E017683")]
    [OleAutomation(False)]
    Interface IDCompositionLinearTransferEffect Extends IDCompositionFilterEffect
        Sub SetRedYIntercept(ByVal Animation As IDCompositionAnimation)
        Sub SetRedYIntercept(ByVal redYIntercept As Single)
        Sub SetRedSlope(ByVal Animation As IDCompositionAnimation)
        Sub SetRedSlope(ByVal redSlope As Single)
        Sub SetRedDisable(ByVal redDisable As Long)
        Sub SetGreenYIntercept(ByVal Animation As IDCompositionAnimation)
        Sub SetGreenYIntercept(ByVal greenYIntercept As Single)
        Sub SetGreenSlope(ByVal Animation As IDCompositionAnimation)
        Sub SetGreenSlope(ByVal greenSlope As Single)
        Sub SetGreenDisable(ByVal greenDisable As Long)
        Sub SetBlueYIntercept(ByVal Animation As IDCompositionAnimation)
        Sub SetBlueYIntercept(ByVal blueYIntercept As Single)
        Sub SetBlueSlope(ByVal Animation As IDCompositionAnimation)
        Sub SetBlueSlope(ByVal blueSlope As Single)
        Sub SetBlueDisable(ByVal blueDisable As Long)
        Sub SetAlphaYIntercept(ByVal Animation As IDCompositionAnimation)
        Sub SetAlphaYIntercept(ByVal alphaYIntercept As Single)
        Sub SetAlphaSlope(ByVal Animation As IDCompositionAnimation)
        Sub SetAlphaSlope(ByVal alphaSlope As Single)
        Sub SetAlphaDisable(ByVal alphaDisable As Long)
        Sub SetClampOutput(ByVal clampOutput As Long)
    End Interface

    [InterfaceId("9B7E82E2-69C5-4EB4-A5F5-A7033F5132CD")]
    [OleAutomation(False)]
    Interface IDCompositionTableTransferEffect Extends IDCompositionFilterEffect
        Sub SetRedTable(ByRef tableValues As Single, ByVal Count As Long)
        Sub SetGreenTable(ByRef tableValues As Single, ByVal Count As Long)
        Sub SetBlueTable(ByRef tableValues As Single, ByVal Count As Long)
        Sub SetAlphaTable(ByRef tableValues As Single, ByVal Count As Long)
        Sub SetRedDisable(ByVal redDisable As Long)
        Sub SetGreenDisable(ByVal greenDisable As Long)
        Sub SetBlueDisable(ByVal blueDisable As Long)
        Sub SetAlphaDisable(ByVal alphaDisable As Long)
        Sub SetClampOutput(ByVal clampOutput As Long)
        Sub SetRedTableValue(ByVal index As Long, ByVal Animation As IDCompositionAnimation)
        Sub SetRedTableValue(ByVal index As Long, ByVal Value As Single)
        Sub SetGreenTableValue(ByVal index As Long, ByVal Animation As IDCompositionAnimation)
        Sub SetGreenTableValue(ByVal index As Long, ByVal Value As Single)
        Sub SetBlueTableValue(ByVal index As Long, ByVal Animation As IDCompositionAnimation)
        Sub SetBlueTableValue(ByVal index As Long, ByVal Value As Single)
        Sub SetAlphaTableValue(ByVal index As Long, ByVal Animation As IDCompositionAnimation)
        Sub SetAlphaTableValue(ByVal index As Long, ByVal Value As Single)
    End Interface

    [InterfaceId("576616C0-A231-494D-A38D-00FD5EC4DB46")]
    [OleAutomation(False)]
    Interface IDCompositionCompositeEffect Extends IDCompositionFilterEffect
        Sub SetMode(ByVal mode As D2D1_COMPOSITE_MODE)
    End Interface

    [InterfaceId("33ECDC0A-578A-4A11-9C14-0CB90517F9C5")]
    [OleAutomation(False)]
    Interface IDCompositionBlendEffect Extends IDCompositionFilterEffect
        Sub SetMode(ByVal mode As D2D1_BLEND_MODE)
    End Interface

    [InterfaceId("3B67DFA8-E3DD-4E61-B640-46C2F3D739DC")]
    [OleAutomation(False)]
    Interface IDCompositionArithmeticCompositeEffect Extends IDCompositionFilterEffect
        Sub SetCoefficients(ByRef coefficients As D2D_VECTOR_4F)
        Sub SetClampOutput(ByVal clampOutput As Long)
        Sub SetCoefficient1(ByVal Animation As IDCompositionAnimation)
        Sub SetCoefficient1(ByVal Coeffcient1 As Single)
        Sub SetCoefficient2(ByVal Animation As IDCompositionAnimation)
        Sub SetCoefficient2(ByVal Coefficient2 As Single)
        Sub SetCoefficient3(ByVal Animation As IDCompositionAnimation)
        Sub SetCoefficient3(ByVal Coefficient3 As Single)
        Sub SetCoefficient4(ByVal Animation As IDCompositionAnimation)
        Sub SetCoefficient4(ByVal Coefficient4 As Single)
    End Interface

    [InterfaceId("0B74B9E8-CDD6-492F-BBBC-5ED32157026D")]
    [OleAutomation(False)]
    Interface IDCompositionAffineTransform2DEffect Extends IDCompositionFilterEffect
        Sub SetInterpolationMode(ByVal InterpolationMode As D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE)
        Sub SetBorderMode(ByVal borderMode As D2D1_BORDER_MODE)
        Sub SetTransformMatrix(ByRef transformMatrix As D2D1_MATRIX_3X2_F)
        Sub SetTransformMatrixElement(ByVal Row As Long, ByVal Column As Long, ByVal Animation As IDCompositionAnimation)
        Sub SetTransformMatrixElement(ByVal Row As Long, ByVal Column As Long, ByVal Value As Single)
        Sub SetSharpness(ByVal Animation As IDCompositionAnimation)
        Sub SetSharpness(ByVal Sharpness As Single)
    End Interface

    [InterfaceId("CBFD91D9-51B2-45E4-B3DE-D19CCFB863C5")]
    [Description("IDCompositionAnimation Interface")]
    [OleAutomation(False)]
    Interface IDCompositionAnimation Extends stdole.IUnknown
        Sub Reset()
        Sub SetAbsoluteBeginTime(ByVal beginTime As LongLong)
        Sub AddCubic(ByVal beginOffset As Double, ByVal constantCoefficient As Single, ByVal linearCoefficient As Single, ByVal quadraticCoefficient As Single, ByVal cubicCoefficient As Single)
        Sub AddSinusoidal(ByVal beginOffset As Double, ByVal bias As Single, ByVal amplitude As Single, ByVal frequency As Single, ByVal phase As Single)
        Sub AddRepeat(ByVal beginOffset As Double, ByVal durationToRepeat As Double)
        Sub End(ByVal endOffset As Double, ByVal endValue As Single)
    End Interface
    
[InterfaceId("2AF16BA9-2DE5-4B75-82D9-01372AFBFFB4")]
Interface IInputPaneAnimationCoordinator Extends IUnknown
    Sub AddAnimation(ByVal device As IDCompositionDevice, ByVal animation As IDCompositionAnimation)
End Interface
    

[InterfaceId("2E217D3A-5ABB-4138-9A13-A775593C89CA")]
[OleAutomation(False)]
Interface IPresentationBuffer Extends stdole.IUnknown
    Function GetAvailableEvent() As LongPtr
    Function IsAvailable() As Byte
End Interface

[InterfaceId("5668BB79-3D8E-415C-B215-F38020F2D252")]
[OleAutomation(False)]
Interface IPresentationContent Extends stdole.IUnknown
    [PreserveSig] Sub SetTag(ByVal tag As LongPtr)
End Interface

[InterfaceId("956710FB-EA40-4EBA-A3EB-4375A0EB4EDC")]
[OleAutomation(False)]
Interface IPresentationSurface Extends IPresentationContent
    Sub SetBuffer(ByVal presentationBuffer As IPresentationBuffer)
    Sub SetColorSpace(ByVal colorSpace As DXGI_COLOR_SPACE_TYPE)
    Sub SetAlphaMode(ByVal alphaMode As DXGI_ALPHA_MODE)
    Sub SetSourceRect(sourceRect As RECT)
    Sub SetTransform(transform As PresentationTransform)
    Sub RestrictToOutput(ByVal output As IUnknown)
    Sub SetDisableReadback(ByVal value As Byte)
    Sub SetLetterboxingMargins(ByVal leftLetterboxSize As Single, ByVal topLetterboxSize As Single, ByVal rightLetterboxSize As Single, ByVal bottomLetterboxSize As Single)
End Interface

[InterfaceId("B44B8BDA-7282-495D-9DD7-CEADD8B4BB86")]
[OleAutomation(False)]
Interface IPresentStatistics Extends stdole.IUnknown
    [PreserveSig] Function GetPresentId() As LongLong
    [PreserveSig] Function GetKind() As PresentStatisticsKind
End Interface

[InterfaceId("FB562F82-6292-470A-88B1-843661E7F20C")]
[OleAutomation(False)]
Interface IPresentationManager Extends stdole.IUnknown
    Function AddBufferFromResource(ByVal resource As IUnknown) As IPresentationBuffer
    Function CreatePresentationSurface(ByVal compositionSurfaceHandle As LongPtr) As IPresentationSurface
    [PreserveSig] Function GetNextPresentId() As LongLong
    [Description("Since this is ByVal, we'll use the only member directly. This is the same as a SystemInterruptTime struct.")]
    Sub SetTargetTime(ByVal targetTime As LongLong)
    [Description("Since this is ByVal, we'll use the only member directly. This is the same as a SystemInterruptTime structs.")]
    Sub SetPreferredPresentDuration(ByVal preferredDuration As LongLong, ByVal deviationTolerance As LongLong)
    Sub ForceVSyncInterrupt(ByVal forceVsyncInterrupt As Byte)
    Sub Present()
    Function GetPresentRetiringFence(riid As UUID) As LongPtr
    Sub CancelPresentsFrom(ByVal presentIdToCancelFrom As LongLong)
    Function GetLostEvent() As LongPtr
    Function GetPresentStatisticsAvailableEvent() As LongPtr
    Sub EnablePresentStatisticsKind(ByVal presentStatisticsKind As PresentStatisticsKind, ByVal enabled As Byte)
    Function GetNextPresentStatistics() As IPresentStatistics
End Interface

[InterfaceId("8FB37B58-1D74-4F64-A49C-1F97A80A2EC0")]
[OleAutomation(False)]
Interface IPresentationFactory Extends stdole.IUnknown
    [PreserveSig] Function IsPresentationSupported() As Byte
    [PreserveSig] Function IsPresentationSupportedWithIndependentFlip() As Byte
    Function CreatePresentationManager() As IPresentationManager
End Interface

[InterfaceId("C9ED2A41-79CB-435E-964E-C8553055420C")]
[OleAutomation(False)]
Interface IPresentStatusPresentStatistics Extends IPresentStatistics
    [PreserveSig] Function GetCompositionFrameId() As LongLong
    [PreserveSig] Function GetPresentStatus() As PresentStatus
End Interface

[InterfaceId("AB41D127-C101-4C0A-911D-F9F2E9D08E64")]
[OleAutomation(False)]
Interface ICompositionFramePresentStatistics Extends IPresentStatistics
    [PreserveSig] Function GetContentTag() As LongPtr
    [PreserveSig] Sub GetDisplayInstanceArray(displayInstanceArrayCount As Long, displayInstanceArray As LongPtr)
End Interface

[InterfaceId("8C93BE27-AD94-4DA0-8FD4-2413132D124E")]
[OleAutomation(False)]
Interface IIndependentFlipFramePresentStatistics Extends IPresentStatistics
    [PreserveSig] Function GetOutputAdapterLUID() As LUID
    [PreserveSig] Function GetOutputVidPnSourceId() As Long
    [PreserveSig] Function GetContentTag() As LongPtr
    [PreserveSig] Function GetDisplayedTime() As SystemInterruptTime
    [PreserveSig] Function GetPresentDuration() As SystemInterruptTime
End Interface


[CoClassId("1F046ABF-3202-4DC1-8CB5-3C67617CE1FA")]
CoClass ShowInputPaneAnimationCoordinator
    [Default] Interface IInputPaneAnimationCoordinator
End CoClass
[CoClassId("384742B1-2A77-4CB3-8CF8-1136F5E17E59")]
CoClass HideInputPaneAnimationCoordinator
    [Default] Interface IInputPaneAnimationCoordinator
End CoClass

#End Region



Module wdDirectX
[Description("Creates a factory object that can be used to create Direct2D resources.")]
Public Declare PtrSafe Function D2D1CreateFactory Lib "D2d1.dll" (ByVal factoryType As D2D1_FACTORY_TYPE, ByRef riid As Any, ByRef pFactoryOptions As Any, ppUnk As IUnknown) As Long
[PreserveSig(False), Description("Creates a factory object that can be used to create Direct2D resources.")]
Public Declare PtrSafe Function D2D1CreateFactory Lib "D2d1.dll" (ByVal factoryType As D2D1_FACTORY_TYPE, ByRef riid As Any, ByRef pFactoryOptions As Any) As IUnknown
[Description("Creates a rotation transformation that rotates by the specified angle about the specified point. Copy a D2D1_POINT_2F into center.")]
Public Declare PtrSafe Sub D2D1MakeRotateMatrix Lib "D2d1.dll" (ByVal angle As Single, ByVal center As LongLong, ByRef matrix As D2D1_MATRIX_3X2_F)
[Description("Creates a skew transformation that has the specified x-axis angle, y-axis angle, and center point.  Copy a D2D1_POINT_2F into center.")]
Public Declare PtrSafe Sub D2D1MakeSkewMatrix Lib "D2d1.dll" (ByVal angleX As Single, ByVal angleY As Single, ByVal center As LongLong, ByRef matrix As D2D1_MATRIX_3X2_F)
[Description("Indicates whether the specified matrix is invertible.")]
Public Declare PtrSafe Function D2D1IsMatrixInvertible Lib "D2d1.dll" (ByRef matrix As D2D1_MATRIX_3X2_F) As Long
[Description("Tries to invert the specified matrix.")]
Public Declare PtrSafe Function D2D1InvertMatrix Lib "D2d1.dll" (ByRef matrix As D2D1_MATRIX_3X2_F) As Long
Public Declare PtrSafe Function D2D1CreateDevice Lib "D2d1.dll" (ByVal dxgiDevice As IDXGIDevice, ByRef creationProperties As Any, ByRef d2dDevice As ID2D1Device) As Long
[PreserveSig(False)]
Public Declare PtrSafe Function D2D1CreateDevice Lib "D2d1.dll" (ByVal dxgiDevice As IDXGIDevice, ByRef creationProperties As Any) As ID2D1Device
Public Declare PtrSafe Function D2D1CreateDeviceContext Lib "D2d1.dll" (ByVal dxgiSurface As IDXGISurface, ByRef creationProperties As Any, ByRef d2dDeviceContext As ID2D1DeviceContext) As Long
Public Declare PtrSafe Function D2D1ConvertColorSpace Lib "D2d1.dll" (ByVal sourceColorSpace As D2D1_COLOR_SPACE, ByVal destinationColorSpace As D2D1_COLOR_SPACE, ByRef color As D2D1_COLOR_F) As D2D1_COLOR_F
Public Declare PtrSafe Sub D2D1SinCos Lib "D2d1.dll" (ByVal angle As Single, ByRef s As Single, ByRef c As Single)
Public Declare PtrSafe Function D2D1Tan Lib "D2d1.dll" (ByVal angle As Single) As Single
Public Declare PtrSafe Function D2D1Vec3Length Lib "D2d1.dll" (ByVal x As Single, ByVal y As Single, ByVal z As Single) As Single
Public Declare PtrSafe Function D2D1ComputeMaximumScaleFactor Lib "D2d1.dll" (ByRef matrix As D2D1_MATRIX_3X2_F) As Single
Public Declare PtrSafe Sub D2D1GetGradientMeshInteriorPointsFromCoonsPatch Lib "D2d1.dll" (pPoint0 As D2D1_POINT_2F, pPoint1 As D2D1_POINT_2F, pPoint2 As D2D1_POINT_2F, pPoint3 As D2D1_POINT_2F, pPoint4 As D2D1_POINT_2F, pPoint5 As D2D1_POINT_2F, pPoint6 As D2D1_POINT_2F, pPoint7 As D2D1_POINT_2F, pPoint8 As D2D1_POINT_2F, pPoint9 As D2D1_POINT_2F, pPoint10 As D2D1_POINT_2F, pPoint11 As D2D1_POINT_2F, pTensorPoint11 As D2D1_POINT_2F, pTensorPoint12 As D2D1_POINT_2F, pTensorPoint21 As D2D1_POINT_2F, pTensorPoint22 As D2D1_POINT_2F)
Public Const D2D1_DEFAULT_FLATTENING_TOLERANCE As Single = 0.25
Public Const DWRITE_ALPHA_MAX As Long = 255


Public Declare PtrSafe Function DWriteCreateFactory Lib "Dwrite.dll" (ByVal factoryType As DWRITE_FACTORY_TYPE, ByRef iid As UUID, ppUnk As IUnknown) As Long
[PreserveSig(False)]
Public Declare PtrSafe Function DWriteCreateFactory Lib "Dwrite.dll" (ByVal factoryType As DWRITE_FACTORY_TYPE, ByRef iid As UUID) As IUnknown

Public Const D2D1_APPEND_ALIGNED_ELEMENT As Long = -1
Public Const D2DERR_UNSUPPORTED_PIXEL_FORMAT = &H88982f80
Public Const D2DERR_INSUFFICIENT_BUFFER = &H8007007a


Public Enum PageCountType
    FinalPageCount = 0
    IntermediatePageCount = 1
End Enum

Public Const DWRITE_NO_PALETTE_INDEX = &HFFFF


Public Enum DWRITE_FONT_FACE_TYPE
    DWRITE_FONT_FACE_TYPE_CFF = 0
    DWRITE_FONT_FACE_TYPE_TRUETYPE = 1
    DWRITE_FONT_FACE_TYPE_TRUETYPE_COLLECTION = 2
    DWRITE_FONT_FACE_TYPE_TYPE1 = 3
    DWRITE_FONT_FACE_TYPE_VECTOR = 4
    DWRITE_FONT_FACE_TYPE_BITMAP = 5
    DWRITE_FONT_FACE_TYPE_UNKNOWN = 6
End Enum

Public Enum DWRITE_FONT_WEIGHT
    DWRITE_FONT_WEIGHT_THIN = 100
    DWRITE_FONT_WEIGHT_EXTRA_LIGHT = 200
    DWRITE_FONT_WEIGHT_ULTRA_LIGHT = 200
    DWRITE_FONT_WEIGHT_LIGHT = 300
    DWRITE_FONT_WEIGHT_NORMAL = 400
    DWRITE_FONT_WEIGHT_REGULAR = 400
    DWRITE_FONT_WEIGHT_MEDIUM = 500
    DWRITE_FONT_WEIGHT_DEMI_BOLD = 600
    DWRITE_FONT_WEIGHT_SEMI_BOLD = 600
    DWRITE_FONT_WEIGHT_BOLD = 700
    DWRITE_FONT_WEIGHT_EXTRA_BOLD = 800
    DWRITE_FONT_WEIGHT_ULTRA_BOLD = 800
    DWRITE_FONT_WEIGHT_BLACK = 900
    DWRITE_FONT_WEIGHT_HEAVY = 900
    DWRITE_FONT_WEIGHT_EXTRA_BLACK = 950
    DWRITE_FONT_WEIGHT_ULTRA_BLACK = 950
End Enum

Public Enum DWRITE_FONT_STRETCH
    DWRITE_FONT_STRETCH_UNDEFINED = 0
    DWRITE_FONT_STRETCH_ULTRA_CONDENSED = 1
    DWRITE_FONT_STRETCH_EXTRA_CONDENSED = 2
    DWRITE_FONT_STRETCH_CONDENSED = 3
    DWRITE_FONT_STRETCH_SEMI_CONDENSED = 4
    DWRITE_FONT_STRETCH_NORMAL = 5
    DWRITE_FONT_STRETCH_MEDIUM = 5
    DWRITE_FONT_STRETCH_SEMI_EXPANDED = 6
    DWRITE_FONT_STRETCH_EXPANDED = 7
    DWRITE_FONT_STRETCH_EXTRA_EXPANDED = 8
    DWRITE_FONT_STRETCH_ULTRA_EXPANDED = 9
End Enum


Public Enum DWRITE_GLYPH_IMAGE_FORMATS
    DWRITE_GLYPH_IMAGE_FORMATS_NONE = 0
    DWRITE_GLYPH_IMAGE_FORMATS_TRUETYPE = 1
    DWRITE_GLYPH_IMAGE_FORMATS_CFF = 2
    DWRITE_GLYPH_IMAGE_FORMATS_COLR = 4
    DWRITE_GLYPH_IMAGE_FORMATS_SVG = 8
    DWRITE_GLYPH_IMAGE_FORMATS_PNG = 16
    DWRITE_GLYPH_IMAGE_FORMATS_JPEG = 32
    DWRITE_GLYPH_IMAGE_FORMATS_TIFF = 64
    DWRITE_GLYPH_IMAGE_FORMATS_PREMULTIPLIED_B8G8R8A8 = 128
End Enum

Public Enum DWRITE_FONT_STYLE
    DWRITE_FONT_STYLE_NORMAL = 0
    DWRITE_FONT_STYLE_OBLIQUE = 1
    DWRITE_FONT_STYLE_ITALIC = 2
End Enum

Public Enum DWRITE_MEASURING_MODE
    DWRITE_MEASURING_MODE_NATURAL = 0
    DWRITE_MEASURING_MODE_GDI_CLASSIC = 1
    DWRITE_MEASURING_MODE_GDI_NATURAL = 2
End Enum

Public Enum DWRITE_INFORMATIONAL_STRING_ID
    ' / <summary>
    ' / Unspecified name ID.
    ' / </summary>
    DWRITE_INFORMATIONAL_STRING_NONE = 0
    ' / <summary>
    ' / Copyright notice provided by the font.
    ' / </summary>
    DWRITE_INFORMATIONAL_STRING_COPYRIGHT_NOTICE = 1
    ' / <summary>
    ' / String containing a version number.
    ' / </summary>
    DWRITE_INFORMATIONAL_STRING_VERSION_STRINGS = 2
    ' / <summary>
    ' / Trademark information provided by the font.
    ' / </summary>
    DWRITE_INFORMATIONAL_STRING_TRADEMARK = 3
    ' / <summary>
    ' / Name of the font manufacturer.
    ' / </summary>
    DWRITE_INFORMATIONAL_STRING_MANUFACTURER = 4
    ' / <summary>
    ' / Name of the font designer.
    ' / </summary>
    DWRITE_INFORMATIONAL_STRING_DESIGNER = 5
    ' / <summary>
    ' / URL of font designer (with protocol, e.g., http://, ftp://).
    ' / </summary>
    DWRITE_INFORMATIONAL_STRING_DESIGNER_URL = 6
    ' / <summary>
    ' / Description of the font. Can contain revision information, usage recommendations, history, features, etc.
    ' / </summary>
    DWRITE_INFORMATIONAL_STRING_DESCRIPTION = 7
    ' / <summary>
    ' / URL of font vendor (with protocol, e.g., http://, ftp://). If a unique serial number is embedded in the URL, it can be used to register the font.
    ' / </summary>
    DWRITE_INFORMATIONAL_STRING_FONT_VENDOR_URL = 8
    ' / <summary>
    ' / Description of how the font may be legally used, or different example scenarios for licensed use. This field should be written in plain language, not legalese.
    ' / </summary>
    DWRITE_INFORMATIONAL_STRING_LICENSE_DESCRIPTION = 9
    ' / <summary>
    ' / URL where additional licensing information can be found.
    ' / </summary>
    DWRITE_INFORMATIONAL_STRING_LICENSE_INFO_URL = 10
    ' / <summary>
    ' / GDI-compatible family name. Because GDI allows a maximum of four fonts per family, fonts in the same family may have different GDI-compatible family names
    ' / (e.g., "Arial", "Arial Narrow", "Arial Black").
    ' / </summary>
    DWRITE_INFORMATIONAL_STRING_WIN32_FAMILY_NAMES = 11
    ' / <summary>
    ' / GDI-compatible subfamily name.
    ' / </summary>
    DWRITE_INFORMATIONAL_STRING_WIN32_SUBFAMILY_NAMES = 12
    ' / <summary>
    ' / Typographic family name preferred by the designer. This enables font designers to group more than four fonts in a single family without losing compatibility with
    ' / GDI. This name is typically only present if it differs from the GDI-compatible family name.
    ' / </summary>
    DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_FAMILY_NAMES = 13
    ' / <summary>
    ' / Typographic subfamily name preferred by the designer. This name is typically only present if it differs from the GDI-compatible subfamily name.
    ' / </summary>
    DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_SUBFAMILY_NAMES = 14
    ' / <summary>
    ' / Sample text. This can be the font name or any other text that the designer thinks is the best example to display the font in.
    ' / </summary>
    DWRITE_INFORMATIONAL_STRING_SAMPLE_TEXT = 15
    ' / <summary>
    ' / The full name of the font, e.g. "Arial Bold", from name id 4 in the name table.
    ' / </summary>
    DWRITE_INFORMATIONAL_STRING_FULL_NAME = 16
    ' / <summary>
    ' / The postscript name of the font, e.g. "GillSans-Bold" from name id 6 in the name table.
    ' / </summary>
    DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_NAME = 17
    ' / <summary>
    ' / The postscript CID findfont name, from name id 20 in the name table.
    ' / </summary>
    DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_CID_NAME = 18
    ' / <summary>
    ' / Family name for the weight-stretch-style model.
    ' / </summary>
    DWRITE_INFORMATIONAL_STRING_WEIGHT_STRETCH_STYLE_FAMILY_NAME = 19
    ' / <summary>
    ' / Script/language tag to identify the scripts or languages that the font was
    ' / primarily designed to support. See DWRITE_FONT_PROPERTY_ID_DESIGN_SCRIPT_LANGUAGE_TAG
    ' / for a longer description.
    ' / </summary>
    DWRITE_INFORMATIONAL_STRING_DESIGN_SCRIPT_LANGUAGE_TAG = 20
    ' / <summary>
    ' / Script/language tag to identify the scripts or languages that the font declares
    ' / it is able to support.
    ' / </summary>
    DWRITE_INFORMATIONAL_STRING_SUPPORTED_SCRIPT_LANGUAGE_TAG = 21
    '  Obsolete aliases kept to avoid breaking existing code.
    DWRITE_INFORMATIONAL_STRING_PREFERRED_FAMILY_NAMES = DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_FAMILY_NAMES
    DWRITE_INFORMATIONAL_STRING_PREFERRED_SUBFAMILY_NAMES = DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_SUBFAMILY_NAMES
    DWRITE_INFORMATIONAL_STRING_WWS_FAMILY_NAME = DWRITE_INFORMATIONAL_STRING_WEIGHT_STRETCH_STYLE_FAMILY_NAME
End Enum

Public Enum DWRITE_FONT_SIMULATIONS
    ' / <summary>
    ' / No simulations are performed.
    ' / </summary>
    DWRITE_FONT_SIMULATIONS_NONE = &H0000
    ' / <summary>
    ' / Algorithmic emboldening is performed.
    ' / </summary>
    DWRITE_FONT_SIMULATIONS_BOLD = &H0001
    ' / <summary>
    ' / Algorithmic italicization is performed.
    ' / </summary>
    DWRITE_FONT_SIMULATIONS_OBLIQUE = &H0002
End Enum

Public Type DWRITE_FONT_METRICS
    designUnitsPerEm As Integer
    ascent As Integer
    descent As Integer
    lineGap As Integer
    capHeight As Integer
    xHeight As Integer
    underlinePosition As Integer
    underlineThickness As Integer
    strikethroughPosition As Integer
    strikethroughThickness As Integer
End Type

Public Enum DWRITE_PIXEL_GEOMETRY
    DWRITE_PIXEL_GEOMETRY_FLAT = 0
    DWRITE_PIXEL_GEOMETRY_RGB = 1
    DWRITE_PIXEL_GEOMETRY_BGR = 2
End Enum

Public Enum DWRITE_RENDERING_MODE
    ' / <summary>
    ' / Specifies that the rendering mode is determined automatically based on the font and size.
    ' / </summary>
    DWRITE_RENDERING_MODE_DEFAULT = 0
    ' / <summary>
    ' / Specifies that no antialiasing is performed. Each pixel is either set to the foreground
    ' / color of the text or retains the color of the background.
    ' / </summary>
    DWRITE_RENDERING_MODE_ALIASED = 1
    ' / <summary>
    ' / Specifies that antialiasing is performed in the horizontal direction and the appearance
    ' / of glyphs is layout-compatible with GDI using CLEARTYPE_QUALITY. Use DWRITE_MEASURING_MODE_GDI_CLASSIC
    ' / to get glyph advances. The antialiasing may be either ClearType or grayscale depending on
    ' / the text antialiasing mode.
    ' / </summary>
    DWRITE_RENDERING_MODE_GDI_CLASSIC = 2
    ' / <summary>
    ' / Specifies that antialiasing is performed in the horizontal direction and the appearance
    ' / of glyphs is layout-compatible with GDI using CLEARTYPE_NATURAL_QUALITY. Glyph advances
    ' / are close to the font design advances, but are still rounded to whole pixels. Use
    ' / DWRITE_MEASURING_MODE_GDI_NATURAL to get glyph advances. The antialiasing may be either
    ' / ClearType or grayscale depending on the text antialiasing mode.
    ' / </summary>
    DWRITE_RENDERING_MODE_GDI_NATURAL = 3
    ' / <summary>
    ' / Specifies that antialiasing is performed in the horizontal direction. This rendering
    ' / mode allows glyphs to be positioned with subpixel precision and is therefore suitable
    ' / for natural (i.e., resolution-independent) layout. The antialiasing may be either
    ' / ClearType or grayscale depending on the text antialiasing mode.
    ' / </summary>
    DWRITE_RENDERING_MODE_NATURAL = 4
    ' / <summary>
    ' / Similar to natural mode except that antialiasing is performed in both the horizontal
    ' / and vertical directions. This is typically used at larger sizes to make curves and
    ' / diagonal lines look smoother. The antialiasing may be either ClearType or grayscale
    ' / depending on the text antialiasing mode.
    ' / </summary>
    DWRITE_RENDERING_MODE_NATURAL_SYMMETRIC = 5
    ' / <summary>
    ' / Specifies that rendering should bypass the rasterizer and use the outlines directly.
    ' / This is typically used at very large sizes.
    ' / </summary>
    DWRITE_RENDERING_MODE_OUTLINE = 6
    '  The following names are obsolete, but are kept as aliases to avoid breaking existing code.
    '  Each of these rendering modes may result in either ClearType or grayscale antialiasing
    '  depending on the DWRITE_TEXT_ANTIALIASING_MODE.
    DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC = DWRITE_RENDERING_MODE_GDI_CLASSIC
    DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL = DWRITE_RENDERING_MODE_GDI_NATURAL
    DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL = DWRITE_RENDERING_MODE_NATURAL
    DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC = DWRITE_RENDERING_MODE_NATURAL_SYMMETRIC
End Enum

Public Enum DWRITE_SCRIPT_SHAPES
    DWRITE_SCRIPT_SHAPES_DEFAULT = 0
    DWRITE_SCRIPT_SHAPES_NO_VISUAL = 1
End Enum

Public Type DWRITE_SCRIPT_ANALYSIS
    Script As Integer
                    
    shapes As DWRITE_SCRIPT_SHAPES
End Type

Public Type DWRITE_SHAPING_TEXT_PROPERTIES
    bitfield As Integer
End Type

Public Type DWRITE_SHAPING_GLYPH_PROPERTIES
    flags As Integer
End Type

Public Type DWRITE_GLYPH_OFFSET
    advanceOffset As Single
    ascenderOffset As Single
End Type

Public Enum DWRITE_NUMBER_SUBSTITUTION_METHOD
    ' / <summary>
    ' / Specifies that the substitution method should be determined based
    ' / on LOCALE_IDIGITSUBSTITUTION value of the specified text culture.
    ' / </summary>
    DWRITE_NUMBER_SUBSTITUTION_METHOD_FROM_CULTURE
    ' / <summary>
    ' / If the culture is Arabic or Farsi, specifies that the number shape
    ' / depend on the context. Either traditional or nominal number shape
    ' / are used depending on the nearest preceding strong character or (if
    ' / there is none) the reading direction of the paragraph.
    ' / </summary>
    DWRITE_NUMBER_SUBSTITUTION_METHOD_CONTEXTUAL
    ' / <summary>
    ' / Specifies that code points 0x30-0x39 are always rendered as nominal numeral
    ' / shapes (ones of the European number), i.e., no substitution is performed.
    ' / </summary>
    DWRITE_NUMBER_SUBSTITUTION_METHOD_NONE
    ' / <summary>
    ' / Specifies that number are rendered using the national number shape
    ' / as specified by the LOCALE_SNATIVEDIGITS value of the specified text culture.
    ' / </summary>
    DWRITE_NUMBER_SUBSTITUTION_METHOD_NATIONAL
    ' / <summary>
    ' / Specifies that number are rendered using the traditional shape
    ' / for the specified culture. For most cultures, this is the same as
    ' / NativeNational. However, NativeNational results in Latin number
    ' / for some Arabic cultures, whereas this value results in Arabic
    ' / number for all Arabic cultures.
    ' / </summary>
    DWRITE_NUMBER_SUBSTITUTION_METHOD_TRADITIONAL
End Enum

Public Type DWRITE_MATRIX
    m11 As Single
    m12 As Single
    m21 As Single
    m22 As Single
    dx As Single
    dy As Single
End Type

Public Type DWRITE_GLYPH_RUN
    fontFace As IDWriteFontFace
    fontEmSize As Single
    glyphCount As Long
    pglyphIndices As LongPtr
    pglyphAdvances As LongPtr
    pglyphOffsets As LongPtr
    isSideways As BOOL
    bidiLevel As Long
End Type

Public Type DWRITE_GLYPH_RUN_DESCRIPTION
    plocaleName As LongPtr
    pString As LongPtr
    stringLength As Long
    pclusterMap As LongPtr
    textPosition As Long
End Type

Public Enum DWRITE_TEXT_ALIGNMENT
    DWRITE_TEXT_ALIGNMENT_LEADING
    DWRITE_TEXT_ALIGNMENT_TRAILING
    DWRITE_TEXT_ALIGNMENT_CENTER
    DWRITE_TEXT_ALIGNMENT_JUSTIFIED
End Enum

Public Enum DWRITE_PARAGRAPH_ALIGNMENT
    ' /// <summary>
    ' /// The first line of paragraph is aligned to the flow's beginning edge of the layout box.
    ' /// </summary>
    DWRITE_PARAGRAPH_ALIGNMENT_NEAR

    ' /// <summary>
    ' /// The last line of paragraph is aligned to the flow's ending edge of the layout box.
    ' /// </summary>
    DWRITE_PARAGRAPH_ALIGNMENT_FAR

    ' /// <summary>
    ' /// The center of the paragraph is aligned to the center of the flow of the layout box.
    ' /// </summary>
    DWRITE_PARAGRAPH_ALIGNMENT_CENTER
End Enum

Public Enum DWRITE_WORD_WRAPPING
    ' / <summary>
    ' / Words are broken across lines to avoid text overflowing the layout box.
    ' / </summary>
    DWRITE_WORD_WRAPPING_WRAP = 0
    ' / <summary>
    ' / Words are kept within the same line even when it overflows the layout box.
    ' / This option is often used with scrolling to reveal overflow text.
    ' / </summary>
    DWRITE_WORD_WRAPPING_NO_WRAP = 1
    ' / <summary>
    ' / Words are broken across lines to avoid text overflowing the layout box.
    ' / Emergency wrapping occurs if the word is larger than the maximum width.
    ' / </summary>
    DWRITE_WORD_WRAPPING_EMERGENCY_BREAK = 2
    ' / <summary>
    ' / Only wrap whole words, never breaking words (emergency wrapping) when the
    ' / layout width is too small for even a single word.
    ' / </summary>
    DWRITE_WORD_WRAPPING_WHOLE_WORD = 3
    ' / <summary>
    ' / Wrap between any valid characters clusters.
    ' / </summary>
    DWRITE_WORD_WRAPPING_CHARACTER = 4
End Enum

Public Enum DWRITE_READING_DIRECTION
    ' / <summary>
    ' / Reading progresses from left to right.
    ' / </summary>
    DWRITE_READING_DIRECTION_LEFT_TO_RIGHT
    ' / <summary>
    ' / Reading progresses from right to left.
    ' / </summary>
    DWRITE_READING_DIRECTION_RIGHT_TO_LEFT
    ' / <summary>
    ' / Reading progresses from top to bottom.
    ' / </summary>
    DWRITE_READING_DIRECTION_TOP_TO_BOTTOM
    ' / <summary>
    ' / Reading progresses from bottom to top.
    ' / </summary>
    DWRITE_READING_DIRECTION_BOTTOM_TO_TOP
End Enum

Public Enum DWRITE_FLOW_DIRECTION
    ' / <summary>
    ' / Text lines are placed from top to bottom.
    ' / </summary>
    DWRITE_FLOW_DIRECTION_TOP_TO_BOTTOM = 0
    ' / <summary>
    ' / Text lines are placed from bottom to top.
    ' / </summary>
    DWRITE_FLOW_DIRECTION_BOTTOM_TO_TOP = 1
    ' / <summary>
    ' / Text lines are placed from left to right.
    ' / </summary>
    DWRITE_FLOW_DIRECTION_LEFT_TO_RIGHT = 2
    ' / <summary>
    ' / Text lines are placed from right to left.
    ' / </summary>
    DWRITE_FLOW_DIRECTION_RIGHT_TO_LEFT = 3
End Enum

Public Enum DWRITE_TRIMMING_GRANULARITY
    DWRITE_TRIMMING_GRANULARITY_NONE = 0
    DWRITE_TRIMMING_GRANULARITY_CHARACTER = 1
    DWRITE_TRIMMING_GRANULARITY_WORD = 2
End Enum

Public Type DWRITE_TRIMMING
    granularity As DWRITE_TRIMMING_GRANULARITY
    delimiter As Long
    delimiterCount As Long
End Type

Public Type DWRITE_UNDERLINE
    width As Single
    thickness As Single
    Offset As Single
    runHeight As Single
    readingDirection As DWRITE_READING_DIRECTION
    flowDirection As DWRITE_FLOW_DIRECTION
    plocaleName As LongPtr
    measuringMode As DWRITE_MEASURING_MODE
End Type

Public Type DWRITE_STRIKETHROUGH
    width As Single
    thickness As Single
    Offset As Single
    readingDirection As DWRITE_READING_DIRECTION
    flowDirection As DWRITE_FLOW_DIRECTION
    plocaleName As LongPtr
    measuringMode As DWRITE_MEASURING_MODE
End Type

Public Type DWRITE_INLINE_OBJECT_METRICS
    width As Single
    Height As Single
    baseline As Single
    supportsSideways As BOOL
End Type

Public Type DWRITE_OVERHANG_METRICS
    Left As Single
    Top As Single
    Right As Single
    Bottom As Single
End Type

Public Enum DWRITE_BREAK_CONDITION
    DWRITE_BREAK_CONDITION_NEUTRAL = 0
    DWRITE_BREAK_CONDITION_CAN_BREAK = 1
    DWRITE_BREAK_CONDITION_MAY_NOT_BREAK = 2
    DWRITE_BREAK_CONDITION_MUST_BREAK = 3
End Enum

Public Enum DWRITE_LINE_SPACING_METHOD
    ' / <summary>
    ' / Line spacing depends solely on the content, growing to accommodate the size of fonts and inline objects.
    ' / </summary>
    DWRITE_LINE_SPACING_METHOD_DEFAULT
    ' / <summary>
    ' / Lines are explicitly set to uniform spacing, regardless of contained font sizes.
    ' / This can be useful to avoid the uneven appearance that can occur from font fallback.
    ' / </summary>
    DWRITE_LINE_SPACING_METHOD_UNIFORM
    ' / <summary>
    ' / Line spacing and baseline distances are proportional to the computed values based on the content, the size of the fonts and inline objects.
    ' / </summary>
    DWRITE_LINE_SPACING_METHOD_PROPORTIONAL
End Enum
 
Public Enum DWRITE_FONT_FEATURE_TAG
	DWRITE_FONT_FEATURE_TAG_ALTERNATIVE_FRACTIONS = &H63726661
	DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS_FROM_CAPITALS = &H63703263
	DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS_FROM_CAPITALS = &H63733263
	DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_ALTERNATES = &H746c6163
	DWRITE_FONT_FEATURE_TAG_CASE_SENSITIVE_FORMS = &H65736163
	DWRITE_FONT_FEATURE_TAG_GLYPH_COMPOSITION_DECOMPOSITION = &H706d6363
	DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_LIGATURES = &H67696c63
	DWRITE_FONT_FEATURE_TAG_CAPITAL_SPACING = &H70737063
	DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_SWASH = &H68777363
	DWRITE_FONT_FEATURE_TAG_CURSIVE_POSITIONING = &H73727563
	DWRITE_FONT_FEATURE_TAG_DEFAULT = &H746c6664
	DWRITE_FONT_FEATURE_TAG_DISCRETIONARY_LIGATURES = &H67696c64
	DWRITE_FONT_FEATURE_TAG_EXPERT_FORMS = &H74707865
	DWRITE_FONT_FEATURE_TAG_FRACTIONS = &H63617266
	DWRITE_FONT_FEATURE_TAG_FULL_WIDTH = &H64697766
	DWRITE_FONT_FEATURE_TAG_HALF_FORMS = &H666c6168
	DWRITE_FONT_FEATURE_TAG_HALANT_FORMS = &H6e6c6168
	DWRITE_FONT_FEATURE_TAG_ALTERNATE_HALF_WIDTH = &H746c6168
	DWRITE_FONT_FEATURE_TAG_HISTORICAL_FORMS = &H74736968
	DWRITE_FONT_FEATURE_TAG_HORIZONTAL_KANA_ALTERNATES = &H616e6b68
	DWRITE_FONT_FEATURE_TAG_HISTORICAL_LIGATURES = &H67696c68
	DWRITE_FONT_FEATURE_TAG_HALF_WIDTH = &H64697768
	DWRITE_FONT_FEATURE_TAG_HOJO_KANJI_FORMS = &H6f6a6f68
	DWRITE_FONT_FEATURE_TAG_JIS04_FORMS = &H3430706a
	DWRITE_FONT_FEATURE_TAG_JIS78_FORMS = &H3837706a
	DWRITE_FONT_FEATURE_TAG_JIS83_FORMS = &H3338706a
	DWRITE_FONT_FEATURE_TAG_JIS90_FORMS = &H3039706a
	DWRITE_FONT_FEATURE_TAG_KERNING = &H6e72656b
	DWRITE_FONT_FEATURE_TAG_STANDARD_LIGATURES = &H6167696c
	DWRITE_FONT_FEATURE_TAG_LINING_FIGURES = &H6d756e6c
	DWRITE_FONT_FEATURE_TAG_LOCALIZED_FORMS = &H6c636f6c
	DWRITE_FONT_FEATURE_TAG_MARK_POSITIONING = &H6b72616d
	DWRITE_FONT_FEATURE_TAG_MATHEMATICAL_GREEK = &H6b72676d
	DWRITE_FONT_FEATURE_TAG_MARK_TO_MARK_POSITIONING = &H6b6d6b6d
	DWRITE_FONT_FEATURE_TAG_ALTERNATE_ANNOTATION_FORMS = &H746c616e
	DWRITE_FONT_FEATURE_TAG_NLC_KANJI_FORMS = &H6b636c6e
	DWRITE_FONT_FEATURE_TAG_OLD_STYLE_FIGURES = &H6d756e6f
	DWRITE_FONT_FEATURE_TAG_ORDINALS = &H6e64726f
	DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_ALTERNATE_WIDTH = &H746c6170
	DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS = &H70616370
	DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_FIGURES = &H6d756e70
	DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_WIDTHS = &H64697770
	DWRITE_FONT_FEATURE_TAG_QUARTER_WIDTHS = &H64697771
	DWRITE_FONT_FEATURE_TAG_REQUIRED_LIGATURES = &H67696c72
	DWRITE_FONT_FEATURE_TAG_RUBY_NOTATION_FORMS = &H79627572
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_ALTERNATES = &H746c6173
	DWRITE_FONT_FEATURE_TAG_SCIENTIFIC_INFERIORS = &H666e6973
	DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS = &H70636d73
	DWRITE_FONT_FEATURE_TAG_SIMPLIFIED_FORMS = &H6c706d73
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1 = &H31307373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_2 = &H32307373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_3 = &H33307373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_4 = &H34307373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_5 = &H35307373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_6 = &H36307373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_7 = &H37307373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_8 = &H38307373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_9 = &H39307373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_10 = &H30317373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_11 = &H31317373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_12 = &H32317373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_13 = &H33317373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_14 = &H34317373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_15 = &H35317373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_16 = &H36317373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_17 = &H37317373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_18 = &H38317373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_19 = &H39317373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_20 = &H30327373
	DWRITE_FONT_FEATURE_TAG_SUBSCRIPT = &H73627573
	DWRITE_FONT_FEATURE_TAG_SUPERSCRIPT = &H73707573
	DWRITE_FONT_FEATURE_TAG_SWASH = &H68737773
	DWRITE_FONT_FEATURE_TAG_TITLING = &H6c746974
	DWRITE_FONT_FEATURE_TAG_TRADITIONAL_NAME_FORMS = &H6d616e74
	DWRITE_FONT_FEATURE_TAG_TABULAR_FIGURES = &H6d756e74
	DWRITE_FONT_FEATURE_TAG_TRADITIONAL_FORMS = &H64617274
	DWRITE_FONT_FEATURE_TAG_THIRD_WIDTHS = &H64697774
	DWRITE_FONT_FEATURE_TAG_UNICASE = &H63696e75
	DWRITE_FONT_FEATURE_TAG_SLASHED_ZERO = &H6f72657a
End Enum

Public Type DWRITE_FONT_FEATURE
    nameTag As DWRITE_FONT_FEATURE_TAG
    Parameter As Long
End Type

Public Enum DWRITE_FONT_FILE_TYPE
    DWRITE_FONT_FILE_TYPE_UNKNOWN = 0
    DWRITE_FONT_FILE_TYPE_CFF = 1
    DWRITE_FONT_FILE_TYPE_TRUETYPE = 2
    DWRITE_FONT_FILE_TYPE_TRUETYPE_COLLECTION = 3
    DWRITE_FONT_FILE_TYPE_TYPE1_PFM = 4
    DWRITE_FONT_FILE_TYPE_TYPE1_PFB = 5
    DWRITE_FONT_FILE_TYPE_VECTOR = 6
    DWRITE_FONT_FILE_TYPE_BITMAP = 7
End Enum

Public Type DWRITE_LINE_METRICS
    Length As Long
    trailingWhitespaceLength As Long
    newlineLength As Long
    Height As Single
    baseline As Single
    isTrimmed As BOOL
End Type

Public Type DWRITE_TEXT_METRICS
    Left As Single
    Top As Single
    width As Single
    widthIncludingTrailingWhitespace As Single
    Height As Single
    layoutWidth As Single
    layoutHeight As Single
    maxBidiReorderingDepth As Long
    lineCount As Long
End Type

Public Type DWRITE_CLUSTER_METRICS
    width As Single
    Length As Integer
    flags As Integer
End Type

Public Type DWRITE_HIT_TEST_METRICS
    textPosition As Long
    Length As Long
    Left As Single
    Top As Single
    width As Single
    Height As Single
    bidiLevel As Long
    isText As BOOL
    isTrimmed As BOOL
End Type

Public Enum DWRITE_FACTORY_TYPE
    DWRITE_FACTORY_TYPE_SHARED = 0
    DWRITE_FACTORY_TYPE_ISOLATED = 1
End Enum

Public Enum DWRITE_CLUSTER_METRICS_FLAGS
    canWrapLineAfter = 1
    isWhitespace = 2
    isNewline = 4
    isSoftHyphen = 8
    isRightToLeft = 16
End Enum

Public Enum DWRITE_SHAPING_GLYPH_PROPERTIES_FLAGS
    isClusterStart = 16
    isDiacritic = 32
    isZeroWidthSpace = 64
    justification_mask = 15
End Enum

Public Enum DWRITE_SHAPING_TEXT_PROPERTIES_FLAGS
    isShapedAlone = 1
End Enum

Public Enum DWRITE_LINE_BREAKPOINT_FLAGS
    breakConditionBefore_mask = 3
    breakConditionBefore_shift = 1
    breakConditionAfter_mask = 12
    breakConditionAfter_shift = 4
    lbisWhitespace = 16
    lbisSoftHyphen = 32
End Enum

Public Type DWRITE_GLYPH_METRICS
    leftSideBearing As Long
    advanceWidth As Long
    rightSideBearing As Long
    topSideBearing As Long
    advanceHeight As Long
    bottomSideBearing As Long
    verticalOriginY As Long
End Type

Public Type DWRITE_TEXT_RANGE
    startPosition As Long
    Length As Long
End Type

Public Type DWRITE_TYPOGRAPHIC_FEATURES
    features As LongPtr
    featureCount As Long
End Type

Public Type DWRITE_LINE_BREAKPOINT
    flags As Byte
End Type

Public Enum DWRITE_TEXTURE_TYPE
    DWRITE_TEXTURE_ALIASED_1x1 = 0
    DWRITE_TEXTURE_CLEARTYPE_3x1 = 1
End Enum
 


Public Enum DWRITE_PANOSE_FAMILY
    DWRITE_PANOSE_FAMILY_ANY = 0
    DWRITE_PANOSE_FAMILY_NO_FIT = 1
    DWRITE_PANOSE_FAMILY_TEXT_DISPLAY = 2
    DWRITE_PANOSE_FAMILY_SCRIPT = 3
    DWRITE_PANOSE_FAMILY_DECORATIVE = 4
    DWRITE_PANOSE_FAMILY_SYMBOL = 5
    DWRITE_PANOSE_FAMILY_PICTORIAL = 5
End Enum

Public Enum DWRITE_PANOSE_SERIF_STYLE
    DWRITE_PANOSE_SERIF_STYLE_ANY = 0
    DWRITE_PANOSE_SERIF_STYLE_NO_FIT = 1
    DWRITE_PANOSE_SERIF_STYLE_COVE = 2
    DWRITE_PANOSE_SERIF_STYLE_OBTUSE_COVE = 3
    DWRITE_PANOSE_SERIF_STYLE_SQUARE_COVE = 4
    DWRITE_PANOSE_SERIF_STYLE_OBTUSE_SQUARE_COVE = 5
    DWRITE_PANOSE_SERIF_STYLE_SQUARE = 6
    DWRITE_PANOSE_SERIF_STYLE_THIN = 7
    DWRITE_PANOSE_SERIF_STYLE_OVAL = 8
    DWRITE_PANOSE_SERIF_STYLE_EXAGGERATED = 9
    DWRITE_PANOSE_SERIF_STYLE_TRIANGLE = 10
    DWRITE_PANOSE_SERIF_STYLE_NORMAL_SANS = 11
    DWRITE_PANOSE_SERIF_STYLE_OBTUSE_SANS = 12
    DWRITE_PANOSE_SERIF_STYLE_PERPENDICULAR_SANS = 13
    DWRITE_PANOSE_SERIF_STYLE_FLARED = 14
    DWRITE_PANOSE_SERIF_STYLE_ROUNDED = 15
    DWRITE_PANOSE_SERIF_STYLE_SCRIPT = 16
    DWRITE_PANOSE_SERIF_STYLE_PERP_SANS = 13
    DWRITE_PANOSE_SERIF_STYLE_BONE = 8
End Enum

Public Enum DWRITE_PANOSE_WEIGHT
    DWRITE_PANOSE_WEIGHT_ANY = 0
    DWRITE_PANOSE_WEIGHT_NO_FIT = 1
    DWRITE_PANOSE_WEIGHT_VERY_LIGHT = 2
    DWRITE_PANOSE_WEIGHT_LIGHT = 3
    DWRITE_PANOSE_WEIGHT_THIN = 4
    DWRITE_PANOSE_WEIGHT_BOOK = 5
    DWRITE_PANOSE_WEIGHT_MEDIUM = 6
    DWRITE_PANOSE_WEIGHT_DEMI = 7
    DWRITE_PANOSE_WEIGHT_BOLD = 8
    DWRITE_PANOSE_WEIGHT_HEAVY = 9
    DWRITE_PANOSE_WEIGHT_BLACK = 10
    DWRITE_PANOSE_WEIGHT_EXTRA_BLACK = 11
    DWRITE_PANOSE_WEIGHT_NORD = 11
End Enum

Public Enum DWRITE_PANOSE_PROPORTION
    DWRITE_PANOSE_PROPORTION_ANY = 0
    DWRITE_PANOSE_PROPORTION_NO_FIT = 1
    DWRITE_PANOSE_PROPORTION_OLD_STYLE = 2
    DWRITE_PANOSE_PROPORTION_MODERN = 3
    DWRITE_PANOSE_PROPORTION_EVEN_WIDTH = 4
    DWRITE_PANOSE_PROPORTION_EXPANDED = 5
    DWRITE_PANOSE_PROPORTION_CONDENSED = 6
    DWRITE_PANOSE_PROPORTION_VERY_EXPANDED = 7
    DWRITE_PANOSE_PROPORTION_VERY_CONDENSED = 8
    DWRITE_PANOSE_PROPORTION_MONOSPACED = 9
End Enum

Public Enum DWRITE_PANOSE_CONTRAST
    DWRITE_PANOSE_CONTRAST_ANY = 0
    DWRITE_PANOSE_CONTRAST_NO_FIT = 1
    DWRITE_PANOSE_CONTRAST_NONE = 2
    DWRITE_PANOSE_CONTRAST_VERY_LOW = 3
    DWRITE_PANOSE_CONTRAST_LOW = 4
    DWRITE_PANOSE_CONTRAST_MEDIUM_LOW = 5
    DWRITE_PANOSE_CONTRAST_MEDIUM = 6
    DWRITE_PANOSE_CONTRAST_MEDIUM_HIGH = 7
    DWRITE_PANOSE_CONTRAST_HIGH = 8
    DWRITE_PANOSE_CONTRAST_VERY_HIGH = 9
    DWRITE_PANOSE_CONTRAST_HORIZONTAL_LOW = 10
    DWRITE_PANOSE_CONTRAST_HORIZONTAL_MEDIUM = 11
    DWRITE_PANOSE_CONTRAST_HORIZONTAL_HIGH = 12
    DWRITE_PANOSE_CONTRAST_BROKEN = 13
End Enum

Public Enum DWRITE_PANOSE_STROKE_VARIATION
    DWRITE_PANOSE_STROKE_VARIATION_ANY = 0
    DWRITE_PANOSE_STROKE_VARIATION_NO_FIT = 1
    DWRITE_PANOSE_STROKE_VARIATION_NO_VARIATION = 2
    DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_DIAGONAL = 3
    DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_TRANSITIONAL = 4
    DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_VERTICAL = 5
    DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_HORIZONTAL = 6
    DWRITE_PANOSE_STROKE_VARIATION_RAPID_VERTICAL = 7
    DWRITE_PANOSE_STROKE_VARIATION_RAPID_HORIZONTAL = 8
    DWRITE_PANOSE_STROKE_VARIATION_INSTANT_VERTICAL = 9
    DWRITE_PANOSE_STROKE_VARIATION_INSTANT_HORIZONTAL = 10
End Enum

Public Enum DWRITE_PANOSE_ARM_STYLE
    DWRITE_PANOSE_ARM_STYLE_ANY = 0
    DWRITE_PANOSE_ARM_STYLE_NO_FIT = 1
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_HORIZONTAL = 2
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_WEDGE = 3
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_VERTICAL = 4
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_SINGLE_SERIF = 5
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_DOUBLE_SERIF = 6
    DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_HORIZONTAL = 7
    DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_WEDGE = 8
    DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_VERTICAL = 9
    DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_SINGLE_SERIF = 10
    DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_DOUBLE_SERIF = 11
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_HORZ = 2
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_VERT = 4
    DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_HORZ = 7
    DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_WEDGE = 8
    DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_VERT = 9
    DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_SINGLE_SERIF = 10
    DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_DOUBLE_SERIF = 11
End Enum

Public Enum DWRITE_PANOSE_LETTERFORM
    DWRITE_PANOSE_LETTERFORM_ANY = 0
    DWRITE_PANOSE_LETTERFORM_NO_FIT = 1
    DWRITE_PANOSE_LETTERFORM_NORMAL_CONTACT = 2
    DWRITE_PANOSE_LETTERFORM_NORMAL_WEIGHTED = 3
    DWRITE_PANOSE_LETTERFORM_NORMAL_BOXED = 4
    DWRITE_PANOSE_LETTERFORM_NORMAL_FLATTENED = 5
    DWRITE_PANOSE_LETTERFORM_NORMAL_ROUNDED = 6
    DWRITE_PANOSE_LETTERFORM_NORMAL_OFF_CENTER = 7
    DWRITE_PANOSE_LETTERFORM_NORMAL_SQUARE = 8
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_CONTACT = 9
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_WEIGHTED = 10
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_BOXED = 11
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_FLATTENED = 12
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_ROUNDED = 13
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_OFF_CENTER = 14
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_SQUARE = 15
End Enum

Public Enum DWRITE_PANOSE_MIDLINE
    DWRITE_PANOSE_MIDLINE_ANY = 0
    DWRITE_PANOSE_MIDLINE_NO_FIT = 1
    DWRITE_PANOSE_MIDLINE_STANDARD_TRIMMED = 2
    DWRITE_PANOSE_MIDLINE_STANDARD_POINTED = 3
    DWRITE_PANOSE_MIDLINE_STANDARD_SERIFED = 4
    DWRITE_PANOSE_MIDLINE_HIGH_TRIMMED = 5
    DWRITE_PANOSE_MIDLINE_HIGH_POINTED = 6
    DWRITE_PANOSE_MIDLINE_HIGH_SERIFED = 7
    DWRITE_PANOSE_MIDLINE_CONSTANT_TRIMMED = 8
    DWRITE_PANOSE_MIDLINE_CONSTANT_POINTED = 9
    DWRITE_PANOSE_MIDLINE_CONSTANT_SERIFED = 10
    DWRITE_PANOSE_MIDLINE_LOW_TRIMMED = 11
    DWRITE_PANOSE_MIDLINE_LOW_POINTED = 12
    DWRITE_PANOSE_MIDLINE_LOW_SERIFED = 13
End Enum

Public Enum DWRITE_PANOSE_XHEIGHT
    DWRITE_PANOSE_XHEIGHT_ANY = 0
    DWRITE_PANOSE_XHEIGHT_NO_FIT = 1
    DWRITE_PANOSE_XHEIGHT_CONSTANT_SMALL = 2
    DWRITE_PANOSE_XHEIGHT_CONSTANT_STANDARD = 3
    DWRITE_PANOSE_XHEIGHT_CONSTANT_LARGE = 4
    DWRITE_PANOSE_XHEIGHT_DUCKING_SMALL = 5
    DWRITE_PANOSE_XHEIGHT_DUCKING_STANDARD = 6
    DWRITE_PANOSE_XHEIGHT_DUCKING_LARGE = 7
    DWRITE_PANOSE_XHEIGHT_CONSTANT_STD = 3
    DWRITE_PANOSE_XHEIGHT_DUCKING_STD = 6
End Enum

Public Enum DWRITE_PANOSE_TOOL_KIND
    DWRITE_PANOSE_TOOL_KIND_ANY = 0
    DWRITE_PANOSE_TOOL_KIND_NO_FIT = 1
    DWRITE_PANOSE_TOOL_KIND_FLAT_NIB = 2
    DWRITE_PANOSE_TOOL_KIND_PRESSURE_POINT = 3
    DWRITE_PANOSE_TOOL_KIND_ENGRAVED = 4
    DWRITE_PANOSE_TOOL_KIND_BALL = 5
    DWRITE_PANOSE_TOOL_KIND_BRUSH = 6
    DWRITE_PANOSE_TOOL_KIND_ROUGH = 7
    DWRITE_PANOSE_TOOL_KIND_FELT_PEN_BRUSH_TIP = 8
    DWRITE_PANOSE_TOOL_KIND_WILD_BRUSH = 9
End Enum

Public Enum DWRITE_PANOSE_SPACING
    DWRITE_PANOSE_SPACING_ANY = 0
    DWRITE_PANOSE_SPACING_NO_FIT = 1
    DWRITE_PANOSE_SPACING_PROPORTIONAL_SPACED = 2
    DWRITE_PANOSE_SPACING_MONOSPACED = 3
End Enum

Public Enum DWRITE_PANOSE_ASPECT_RATIO
    DWRITE_PANOSE_ASPECT_RATIO_ANY = 0
    DWRITE_PANOSE_ASPECT_RATIO_NO_FIT = 1
    DWRITE_PANOSE_ASPECT_RATIO_VERY_CONDENSED = 2
    DWRITE_PANOSE_ASPECT_RATIO_CONDENSED = 3
    DWRITE_PANOSE_ASPECT_RATIO_NORMAL = 4
    DWRITE_PANOSE_ASPECT_RATIO_EXPANDED = 5
    DWRITE_PANOSE_ASPECT_RATIO_VERY_EXPANDED = 6
End Enum

Public Enum DWRITE_PANOSE_SCRIPT_TOPOLOGY
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_ANY = 0
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_NO_FIT = 1
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_DISCONNECTED = 2
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_TRAILING = 3
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_CONNECTED = 4
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_DISCONNECTED = 5
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_TRAILING = 6
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_CONNECTED = 7
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_DISCONNECTED = 8
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_TRAILING = 9
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_CONNECTED = 10
End Enum

Public Enum DWRITE_PANOSE_SCRIPT_FORM
    DWRITE_PANOSE_SCRIPT_FORM_ANY = 0
    DWRITE_PANOSE_SCRIPT_FORM_NO_FIT = 1
    DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_NO_WRAPPING = 2
    DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_SOME_WRAPPING = 3
    DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_MORE_WRAPPING = 4
    DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_EXTREME_WRAPPING = 5
    DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_NO_WRAPPING = 6
    DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_SOME_WRAPPING = 7
    DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_MORE_WRAPPING = 8
    DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_EXTREME_WRAPPING = 9
    DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_NO_WRAPPING = 10
    DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_SOME_WRAPPING = 11
    DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_MORE_WRAPPING = 12
    DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_EXTREME_WRAPPING = 13
End Enum

Public Enum DWRITE_PANOSE_FINIALS
    DWRITE_PANOSE_FINIALS_ANY = 0
    DWRITE_PANOSE_FINIALS_NO_FIT = 1
    DWRITE_PANOSE_FINIALS_NONE_NO_LOOPS = 2
    DWRITE_PANOSE_FINIALS_NONE_CLOSED_LOOPS = 3
    DWRITE_PANOSE_FINIALS_NONE_OPEN_LOOPS = 4
    DWRITE_PANOSE_FINIALS_SHARP_NO_LOOPS = 5
    DWRITE_PANOSE_FINIALS_SHARP_CLOSED_LOOPS = 6
    DWRITE_PANOSE_FINIALS_SHARP_OPEN_LOOPS = 7
    DWRITE_PANOSE_FINIALS_TAPERED_NO_LOOPS = 8
    DWRITE_PANOSE_FINIALS_TAPERED_CLOSED_LOOPS = 9
    DWRITE_PANOSE_FINIALS_TAPERED_OPEN_LOOPS = 10
    DWRITE_PANOSE_FINIALS_ROUND_NO_LOOPS = 11
    DWRITE_PANOSE_FINIALS_ROUND_CLOSED_LOOPS = 12
    DWRITE_PANOSE_FINIALS_ROUND_OPEN_LOOPS = 13
End Enum

Public Enum DWRITE_PANOSE_XASCENT
    DWRITE_PANOSE_XASCENT_ANY = 0
    DWRITE_PANOSE_XASCENT_NO_FIT = 1
    DWRITE_PANOSE_XASCENT_VERY_LOW = 2
    DWRITE_PANOSE_XASCENT_LOW = 3
    DWRITE_PANOSE_XASCENT_MEDIUM = 4
    DWRITE_PANOSE_XASCENT_HIGH = 5
    DWRITE_PANOSE_XASCENT_VERY_HIGH = 6
End Enum

Public Enum DWRITE_PANOSE_DECORATIVE_CLASS
    DWRITE_PANOSE_DECORATIVE_CLASS_ANY = 0
    DWRITE_PANOSE_DECORATIVE_CLASS_NO_FIT = 1
    DWRITE_PANOSE_DECORATIVE_CLASS_DERIVATIVE = 2
    DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_TOPOLOGY = 3
    DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_ELEMENTS = 4
    DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_ASPECT = 5
    DWRITE_PANOSE_DECORATIVE_CLASS_INITIALS = 6
    DWRITE_PANOSE_DECORATIVE_CLASS_CARTOON = 7
    DWRITE_PANOSE_DECORATIVE_CLASS_PICTURE_STEMS = 8
    DWRITE_PANOSE_DECORATIVE_CLASS_ORNAMENTED = 9
    DWRITE_PANOSE_DECORATIVE_CLASS_TEXT_AND_BACKGROUND = 10
    DWRITE_PANOSE_DECORATIVE_CLASS_COLLAGE = 11
    DWRITE_PANOSE_DECORATIVE_CLASS_MONTAGE = 12
End Enum

Public Enum DWRITE_PANOSE_ASPECT
    DWRITE_PANOSE_ASPECT_ANY = 0
    DWRITE_PANOSE_ASPECT_NO_FIT = 1
    DWRITE_PANOSE_ASPECT_SUPER_CONDENSED = 2
    DWRITE_PANOSE_ASPECT_VERY_CONDENSED = 3
    DWRITE_PANOSE_ASPECT_CONDENSED = 4
    DWRITE_PANOSE_ASPECT_NORMAL = 5
    DWRITE_PANOSE_ASPECT_EXTENDED = 6
    DWRITE_PANOSE_ASPECT_VERY_EXTENDED = 7
    DWRITE_PANOSE_ASPECT_SUPER_EXTENDED = 8
    DWRITE_PANOSE_ASPECT_MONOSPACED = 9
End Enum

Public Enum DWRITE_PANOSE_FILL
    DWRITE_PANOSE_FILL_ANY = 0
    DWRITE_PANOSE_FILL_NO_FIT = 1
    DWRITE_PANOSE_FILL_STANDARD_SOLID_FILL = 2
    DWRITE_PANOSE_FILL_NO_FILL = 3
    DWRITE_PANOSE_FILL_PATTERNED_FILL = 4
    DWRITE_PANOSE_FILL_COMPLEX_FILL = 5
    DWRITE_PANOSE_FILL_SHAPED_FILL = 6
    DWRITE_PANOSE_FILL_DRAWN_DISTRESSED = 7
End Enum

Public Enum DWRITE_PANOSE_LINING
    DWRITE_PANOSE_LINING_ANY = 0
    DWRITE_PANOSE_LINING_NO_FIT = 1
    DWRITE_PANOSE_LINING_NONE = 2
    DWRITE_PANOSE_LINING_INLINE = 3
    DWRITE_PANOSE_LINING_OUTLINE = 4
    DWRITE_PANOSE_LINING_ENGRAVED = 5
    DWRITE_PANOSE_LINING_SHADOW = 6
    DWRITE_PANOSE_LINING_RELIEF = 7
    DWRITE_PANOSE_LINING_BACKDROP = 8
End Enum

Public Enum DWRITE_PANOSE_DECORATIVE_TOPOLOGY
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_ANY = 0
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_NO_FIT = 1
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_STANDARD = 2
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_SQUARE = 3
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_MULTIPLE_SEGMENT = 4
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_ART_DECO = 5
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_UNEVEN_WEIGHTING = 6
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_DIVERSE_ARMS = 7
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_DIVERSE_FORMS = 8
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_LOMBARDIC_FORMS = 9
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_UPPER_CASE_IN_LOWER_CASE = 10
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_IMPLIED_TOPOLOGY = 11
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_HORSESHOE_E_AND_A = 12
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_CURSIVE = 13
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_BLACKLETTER = 14
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_SWASH_VARIANCE = 15
End Enum

Public Enum DWRITE_PANOSE_CHARACTER_RANGES
    DWRITE_PANOSE_CHARACTER_RANGES_ANY = 0
    DWRITE_PANOSE_CHARACTER_RANGES_NO_FIT = 1
    DWRITE_PANOSE_CHARACTER_RANGES_EXTENDED_COLLECTION = 2
    DWRITE_PANOSE_CHARACTER_RANGES_LITERALS = 3
    DWRITE_PANOSE_CHARACTER_RANGES_NO_LOWER_CASE = 4
    DWRITE_PANOSE_CHARACTER_RANGES_SMALL_CAPS = 5
End Enum

Public Enum DWRITE_PANOSE_SYMBOL_KIND
    DWRITE_PANOSE_SYMBOL_KIND_ANY = 0
    DWRITE_PANOSE_SYMBOL_KIND_NO_FIT = 1
    DWRITE_PANOSE_SYMBOL_KIND_MONTAGES = 2
    DWRITE_PANOSE_SYMBOL_KIND_PICTURES = 3
    DWRITE_PANOSE_SYMBOL_KIND_SHAPES = 4
    DWRITE_PANOSE_SYMBOL_KIND_SCIENTIFIC = 5
    DWRITE_PANOSE_SYMBOL_KIND_MUSIC = 6
    DWRITE_PANOSE_SYMBOL_KIND_EXPERT = 7
    DWRITE_PANOSE_SYMBOL_KIND_PATTERNS = 8
    DWRITE_PANOSE_SYMBOL_KIND_BOARDERS = 9
    DWRITE_PANOSE_SYMBOL_KIND_ICONS = 10
    DWRITE_PANOSE_SYMBOL_KIND_LOGOS = 11
    DWRITE_PANOSE_SYMBOL_KIND_INDUSTRY_SPECIFIC = 12
End Enum

Public Enum DWRITE_PANOSE_SYMBOL_ASPECT_RATIO
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_ANY = 0
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NO_FIT = 1
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NO_WIDTH = 2
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_EXCEPTIONALLY_WIDE = 3
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_SUPER_WIDE = 4
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_VERY_WIDE = 5
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_WIDE = 6
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NORMAL = 7
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NARROW = 8
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_VERY_NARROW = 9
End Enum

Public Enum DWRITE_OUTLINE_THRESHOLD
    DWRITE_OUTLINE_THRESHOLD_ANTIALIASED = 0
    DWRITE_OUTLINE_THRESHOLD_ALIASED = 1
End Enum

Public Enum DWRITE_BASELINE
    DWRITE_BASELINE_DEFAULT = 0
    DWRITE_BASELINE_ROMAN = 1
    DWRITE_BASELINE_CENTRAL = 2
    DWRITE_BASELINE_MATH = 3
    DWRITE_BASELINE_HANGING = 4
    DWRITE_BASELINE_IDEOGRAPHIC_BOTTOM = 5
    DWRITE_BASELINE_IDEOGRAPHIC_TOP = 6
    DWRITE_BASELINE_MINIMUM = 7
    DWRITE_BASELINE_MAXIMUM = 8
End Enum

Public Enum DWRITE_VERTICAL_GLYPH_ORIENTATION
    DWRITE_VERTICAL_GLYPH_ORIENTATION_DEFAULT = 0
    DWRITE_VERTICAL_GLYPH_ORIENTATION_STACKED = 1
End Enum

Public Enum DWRITE_GLYPH_ORIENTATION_ANGLE
    DWRITE_GLYPH_ORIENTATION_ANGLE_0_DEGREES = 0
    DWRITE_GLYPH_ORIENTATION_ANGLE_90_DEGREES = 1
    DWRITE_GLYPH_ORIENTATION_ANGLE_180_DEGREES = 2
    DWRITE_GLYPH_ORIENTATION_ANGLE_270_DEGREES = 3
End Enum

Public Type DWRITE_FONT_METRICS1
    designUnitsPerEm As Integer
    ascent As Integer
    descent As Integer
    lineGap As Integer
    capHeight As Integer
    xHeight As Integer
    underlinePosition As Integer
    underlineThickness As Integer
    strikethroughPosition As Integer
    strikethroughThickness As Integer
    glyphBoxLeft As Integer
    glyphBoxTop As Integer
    glyphBoxRight As Integer
    glyphBoxBottom As Integer
    subscriptPositionX As Integer
    subscriptPositionY As Integer
    subscriptSizeX As Integer
    subscriptSizeY As Integer
    superscriptPositionX As Integer
    superscriptPositionY As Integer
    superscriptSizeX As Integer
    superscriptSizeY As Integer
    hasTypographicMetrics As BOOL
End Type

Public Type DWRITE_CARET_METRICS
    slopeRise As Integer
    slopeRun As Integer
    Offset As Integer
End Type

Public Type DWRITE_PANOSE
    values(0 To 9) As Byte
End Type

Public Type DWRITE_UNICODE_RANGE
    first As Long
    last As Long
End Type

Public Type DWRITE_SCRIPT_PROPERTIES
    isoScriptCode As Long
    isoScriptNumber As Long
    clusterLookahead As Long
    justificationCharacter As Long
    bitfield As Long
End Type

Public Type DWRITE_JUSTIFICATION_OPPORTUNITY
    expansionMinimum As Single
    expansionMaximum As Single
    compressionMaximum As Single
    bitfield As Long
End Type

Public Enum DWRITE_TEXT_ANTIALIAS_MODE
    DWRITE_TEXT_ANTIALIAS_MODE_CLEARTYPE = 0
    DWRITE_TEXT_ANTIALIAS_MODE_GRAYSCALE = 1
End Enum

Public Enum DWRITE_OPTICAL_ALIGNMENT
    DWRITE_OPTICAL_ALIGNMENT_NONE = 0
    DWRITE_OPTICAL_ALIGNMENT_NO_SIDE_BEARINGS = 1
End Enum

Public Enum DWRITE_GRID_FIT_MODE
    DWRITE_GRID_FIT_MODE_DEFAULT = 0
    DWRITE_GRID_FIT_MODE_DISABLED = 1
    DWRITE_GRID_FIT_MODE_ENABLED = 2
End Enum

Public Type DWRITE_TEXT_METRICS1
    Left As Single
    Top As Single
    width As Single
    widthIncludingTrailingWhitespace As Single
    Height As Single
    layoutWidth As Single
    layoutHeight As Single
    maxBidiReorderingDepth As Long
    lineCount As Long
    heightIncludingTrailingWhitespace As Single
End Type

Public Type DWRITE_COLOR_GLYPH_RUN
    glyphRun As DWRITE_GLYPH_RUN
    glyphRunDescription As LongPtr
    baselineOriginX As Single
    baselineOriginY As Single
    runColor As DWRITE_COLOR_F
    paletteIndex As Integer
End Type

Public Enum DWRITE_FONT_PROPERTY_ID
    ' / <summary>
    ' / Unspecified font property identifier.
    ' / </summary>
    DWRITE_FONT_PROPERTY_ID_NONE = 0
    ' / <summary>
    ' / Family name for the weight-stretch-style model.
    ' / </summary>
    DWRITE_FONT_PROPERTY_ID_WEIGHT_STRETCH_STYLE_FAMILY_NAME = 1
    ' / <summary>
    ' / Family name preferred by the designer. This enables font designers to group more than four fonts in a single family without losing compatibility with
    ' / GDI. This name is typically only present if it differs from the GDI-compatible family name.
    ' / </summary>
    DWRITE_FONT_PROPERTY_ID_TYPOGRAPHIC_FAMILY_NAME = 2
    ' / <summary>
    ' / Face name of the for the weight-stretch-style (e.g., Regular or Bold).
    ' / </summary>
    DWRITE_FONT_PROPERTY_ID_WEIGHT_STRETCH_STYLE_FACE_NAME = 3
    ' / <summary>
    ' / The full name of the font, e.g. "Arial Bold", from name id 4 in the name table.
    ' / </summary>
    DWRITE_FONT_PROPERTY_ID_FULL_NAME = 4
    ' / <summary>
    ' / GDI-compatible family name. Because GDI allows a maximum of four fonts per family, fonts in the same family may have different GDI-compatible family names
    ' / (e.g., "Arial", "Arial Narrow", "Arial Black").
    ' / </summary>
    DWRITE_FONT_PROPERTY_ID_WIN32_FAMILY_NAME = 5
    ' / <summary>
    ' / The postscript name of the font, e.g. "GillSans-Bold" from name id 6 in the name table.
    ' / </summary>
    DWRITE_FONT_PROPERTY_ID_POSTSCRIPT_NAME = 6
    ' / <summary>
    ' / Script/language tag to identify the scripts or languages that the font was
    ' / primarily designed to support.
    ' / </summary>
    ' / <remarks>
    ' / The design script/language tag is meant to be understood from the perspective of
    ' / users. For example, a font is considered designed for English if it is considered
    ' / useful for English users. Note that this is different from what a font might be
    ' / capable of supporting. For example, the Meiryo font was primarily designed for
    ' / Japanese users. While it is capable of displaying English well, it was not
    ' / meant to be offered for the benefit of non-Japanese-speaking English users.
    ' /
    ' / As another example, a font designed for Chinese may be capable of displaying
    ' / Japanese text, but would likely look incorrect to Japanese users.
    ' /
    ' / The valid values for this property are "ScriptLangTag" values. These are adapted
    ' / from the IETF BCP 47 specification, "Tags for Identifying Languages" (see
    ' / http://tools.ietf.org/html/bcp47). In a BCP 47 language tag, a language subtag
    ' / element is mandatory and other subtags are optional. In a ScriptLangTag, a
    ' / script subtag is mandatory and other subtags are option. The following
    ' / augmented BNF syntax, adapted from BCP 47, is used:
    ' /
    ' /     ScriptLangTag = [language "-"]
    ' /                     script
    ' /                     ["-" region]
    ' /                     *("-" variant)
    ' /                     *("-" extension)
    ' /                     ["-" privateuse]
    ' /
    ' / The expansion of the elements and the intended semantics associated with each
    ' / are as defined in BCP 47. Script subtags are taken from ISO 15924. At present,
    ' / no extensions are defined, and any extension should be ignored. Private use
    ' / subtags are defined by private agreement between the source and recipient and
    ' / may be ignored.
    ' /
    ' / Subtags must be valid for use in BCP 47 and contained in the Language Subtag
    ' / Registry maintained by IANA. (See
    ' / http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry
    ' / and section 3 of BCP 47 for details.
    ' /
    ' / Any ScriptLangTag value not conforming to these specifications is ignored.
    ' /
    ' / Examples:
    ' /   "Latn" denotes Latin script (and any language or writing system using Latin)
    ' /   "Cyrl" denotes Cyrillic script
    ' /   "sr-Cyrl" denotes Cyrillic script as used for writing the Serbian language;
    ' /       a font that has this property value may not be suitable for displaying
    ' /       text in Russian or other languages written using Cyrillic script
    ' /   "Jpan" denotes Japanese writing (Han + Hiragana + Katakana)
    ' /
    ' / When passing this property to GetPropertyValues, use the overload which does
    ' / not take a language parameter, since this property has no specific language.
    ' / </remarks>
    DWRITE_FONT_PROPERTY_ID_DESIGN_SCRIPT_LANGUAGE_TAG = 7
    ' / <summary>
    ' / Script/language tag to identify the scripts or languages that the font declares
    ' / it is able to support.
    ' / </summary>
    DWRITE_FONT_PROPERTY_ID_SUPPORTED_SCRIPT_LANGUAGE_TAG = 8
    ' / <summary>
    ' / Semantic tag to describe the font (e.g. Fancy, Decorative, Handmade, Sans-serif, Swiss, Pixel, Futuristic).
    ' / </summary>
    DWRITE_FONT_PROPERTY_ID_SEMANTIC_TAG = 9
    ' / <summary>
    ' / Weight of the font represented as a decimal string in the range 1-999.
    ' / </summary>
    ' / <remark>
    ' / This enum is discouraged for use with IDWriteFontSetBuilder2 in favor of the more generic font axis
    ' / DWRITE_FONT_AXIS_TAG_WEIGHT which supports higher precision and range.
    ' / </remark>
    DWRITE_FONT_PROPERTY_ID_WEIGHT = 10
    ' / <summary>
    ' / Stretch of the font represented as a decimal string in the range 1-9.
    ' / </summary>
    ' / <remark>
    ' / This enum is discouraged for use with IDWriteFontSetBuilder2 in favor of the more generic font axis
    ' / DWRITE_FONT_AXIS_TAG_WIDTH which supports higher precision and range.
    ' / </remark>
    DWRITE_FONT_PROPERTY_ID_STRETCH = 11
    ' / <summary>
    ' / Style of the font represented as a decimal string in the range 0-2.
    ' / </summary>
    ' / <remark>
    ' / This enum is discouraged for use with IDWriteFontSetBuilder2 in favor of the more generic font axes
    ' / DWRITE_FONT_AXIS_TAG_SLANT and DWRITE_FONT_AXIS_TAG_ITAL.
    ' / </remark>
    DWRITE_FONT_PROPERTY_ID_STYLE = 12
    ' / <summary>
    ' / Face name preferred by the designer. This enables font designers to group more than four fonts in a single
    ' / family without losing compatibility with GDI.
    ' / </summary>
    DWRITE_FONT_PROPERTY_ID_TYPOGRAPHIC_FACE_NAME = 13
    ' / <summary>
    ' / Total number of properties for NTDDI_WIN10 (IDWriteFontSet).
    ' / </summary>
    ' / <remarks>
    ' / DWRITE_FONT_PROPERTY_ID_TOTAL cannot be used as a property ID.
    ' / </remarks>
    DWRITE_FONT_PROPERTY_ID_TOTAL = DWRITE_FONT_PROPERTY_ID_STYLE + 1
    ' / <summary>
    ' / Total number of properties for NTDDI_WIN10_RS3 (IDWriteFontSet1).
    ' / </summary>
    DWRITE_FONT_PROPERTY_ID_TOTAL_RS3 = DWRITE_FONT_PROPERTY_ID_TYPOGRAPHIC_FACE_NAME + 1
    '  Obsolete aliases kept to avoid breaking existing code.
    DWRITE_FONT_PROPERTY_ID_PREFERRED_FAMILY_NAME = DWRITE_FONT_PROPERTY_ID_TYPOGRAPHIC_FAMILY_NAME
    DWRITE_FONT_PROPERTY_ID_FAMILY_NAME = DWRITE_FONT_PROPERTY_ID_WEIGHT_STRETCH_STYLE_FAMILY_NAME
    DWRITE_FONT_PROPERTY_ID_FACE_NAME = DWRITE_FONT_PROPERTY_ID_WEIGHT_STRETCH_STYLE_FACE_NAME
End Enum

Public Type DWRITE_FONT_PROPERTY
    propertyId As DWRITE_FONT_PROPERTY_ID
    PropertyValue As LongPtr
    localeName As LongPtr
End Type

Public Enum DWRITE_LOCALITY
    DWRITE_LOCALITY_REMOTE = 0
    DWRITE_LOCALITY_PARTIAL = 1
    DWRITE_LOCALITY_LOCAL = 2
End Enum

Public Enum DWRITE_RENDERING_MODE1
    ' / <summary>
    ' / Specifies that the rendering mode is determined automatically based on the font and size.
    ' / </summary>
    DWRITE_RENDERING_MODE1_DEFAULT = DWRITE_RENDERING_MODE_DEFAULT
    ' / <summary>
    ' / Specifies that no antialiasing is performed. Each pixel is either set to the foreground
    ' / color of the text or retains the color of the background.
    ' / </summary>
    DWRITE_RENDERING_MODE1_ALIASED = DWRITE_RENDERING_MODE_ALIASED
    ' / <summary>
    ' / Specifies that antialiasing is performed in the horizontal direction and the appearance
    ' / of glyphs is layout-compatible with GDI using CLEARTYPE_QUALITY. Use DWRITE_MEASURING_MODE_GDI_CLASSIC
    ' / to get glyph advances. The antialiasing may be either ClearType or grayscale depending on
    ' / the text antialiasing mode.
    ' / </summary>
    DWRITE_RENDERING_MODE1_GDI_CLASSIC = DWRITE_RENDERING_MODE_GDI_CLASSIC
    ' / <summary>
    ' / Specifies that antialiasing is performed in the horizontal direction and the appearance
    ' / of glyphs is layout-compatible with GDI using CLEARTYPE_NATURAL_QUALITY. Glyph advances
    ' / are close to the font design advances, but are still rounded to whole pixels. Use
    ' / DWRITE_MEASURING_MODE_GDI_NATURAL to get glyph advances. The antialiasing may be either
    ' / ClearType or grayscale depending on the text antialiasing mode.
    ' / </summary>
    DWRITE_RENDERING_MODE1_GDI_NATURAL = DWRITE_RENDERING_MODE_GDI_NATURAL
    ' / <summary>
    ' / Specifies that antialiasing is performed in the horizontal direction. This rendering
    ' / mode allows glyphs to be positioned with subpixel precision and is therefore suitable
    ' / for natural (i.e., resolution-independent) layout. The antialiasing may be either
    ' / ClearType or grayscale depending on the text antialiasing mode.
    ' / </summary>
    DWRITE_RENDERING_MODE1_NATURAL = DWRITE_RENDERING_MODE_NATURAL
    ' / <summary>
    ' / Similar to natural mode except that antialiasing is performed in both the horizontal
    ' / and vertical directions. This is typically used at larger sizes to make curves and
    ' / diagonal lines look smoother. The antialiasing may be either ClearType or grayscale
    ' / depending on the text antialiasing mode.
    ' / </summary>
    DWRITE_RENDERING_MODE1_NATURAL_SYMMETRIC = DWRITE_RENDERING_MODE_NATURAL_SYMMETRIC
    ' / <summary>
    ' / Specifies that rendering should bypass the rasterizer and use the outlines directly.
    ' / This is typically used at very large sizes.
    ' / </summary>
    DWRITE_RENDERING_MODE1_OUTLINE = DWRITE_RENDERING_MODE_OUTLINE
    ' / <summary>
    ' / Similar to natural symmetric mode except that when possible, text should be rasterized
    ' / in a downsampled form.
    ' / </summary>
    DWRITE_RENDERING_MODE1_NATURAL_SYMMETRIC_DOWNSAMPLED
End Enum

Public Type DWRITE_LINE_METRICS1
    Length As Long
    trailingWhitespaceLength As Long
    newlineLength As Long
    Height As Single
    baseline As Single
    isTrimmed As Long
    leadingBefore As Single
    leadingAfter As Single
End Type

Public Enum DWRITE_FONT_LINE_GAP_USAGE
    DWRITE_FONT_LINE_GAP_USAGE_DEFAULT = 0
    DWRITE_FONT_LINE_GAP_USAGE_DISABLED = 1
    DWRITE_FONT_LINE_GAP_USAGE_ENABLED = 2
End Enum

Public Type DWRITE_LINE_SPACING
    Method As DWRITE_LINE_SPACING_METHOD
    Height As Single
    baseline As Single
    leadingBefore As Single
    fontLineGapUsage As DWRITE_FONT_LINE_GAP_USAGE
End Type

Public Type DWRITE_COLOR_GLYPH_RUN1
    glyphRun As DWRITE_GLYPH_RUN
    glyphRunDescription As LongPtr
    baselineOriginX As Single
    baselineOriginY As Single
    runColor As DWRITE_COLOR_F
    paletteIndex As Integer
    glyphImageFormat As DWRITE_GLYPH_IMAGE_FORMATS
    measuringMode As DWRITE_MEASURING_MODE
End Type

Public Type DWRITE_GLYPH_IMAGE_DATA
    imageData As LongPtr
    imageDataSize As Long
    uniqueDataId As Long
    pixelsPerEm As Long
    pixelSize As D2D1_SIZE_U
    horizontalLeftOrigin As D2D1_POINT_2L
    horizontalRightOrigin As D2D1_POINT_2L
    verticalTopOrigin As D2D1_POINT_2L
    verticalBottomOrigin As D2D1_POINT_2L
End Type
        
Public Type DWRITE_FILE_FRAGMENT
    fileOffset As LongLong
    fragmentSize As LongLong
End Type

Public Enum DWRITE_CONTAINER_TYPE
    DWRITE_CONTAINER_TYPE_UNKNOWN = 0
    DWRITE_CONTAINER_TYPE_WOFF = 1
    DWRITE_CONTAINER_TYPE_WOFF2 = 2
End Enum
' //typedef enum DWRITE_FONT_AXIS_TAG // : UINT32
' //{
' //    DWRITE_FONT_AXIS_TAG_WEIGHT = DWRITE_MAKE_FONT_AXIS_TAG('w', 'g', 'h', 't'),
' //    DWRITE_FONT_AXIS_TAG_WIDTH = DWRITE_MAKE_FONT_AXIS_TAG('w', 'd', 't', 'h'),
' //    DWRITE_FONT_AXIS_TAG_SLANT = DWRITE_MAKE_FONT_AXIS_TAG('s', 'l', 'n', 't'),
' //    DWRITE_FONT_AXIS_TAG_OPTICAL_SIZE = DWRITE_MAKE_FONT_AXIS_TAG('o', 'p', 's', 'z'),
' //    DWRITE_FONT_AXIS_TAG_ITALIC = DWRITE_MAKE_FONT_AXIS_TAG('i', 't', 'a', 'l'),
' //} DWRITE_FONT_AXIS_TAG;
Public Enum DWRITE_FONT_AXIS_TAG
    DWRITE_FONT_AXIS_TAG_WEIGHT = &H74686777
    DWRITE_FONT_AXIS_TAG_WIDTH = &H68746477
    DWRITE_FONT_AXIS_TAG_SLANT = &H746e6c73
    DWRITE_FONT_AXIS_TAG_OPTICAL_SIZE = &H7a73706f
    DWRITE_FONT_AXIS_TAG_ITALIC = &H6c617469
End Enum

Public Enum DWriteStdFontAxisCount
            DWRITE_STANDARD_FONT_AXIS_COUNT = 5
End Enum

Public Type DWRITE_FONT_AXIS_VALUE
    axisTag As DWRITE_FONT_AXIS_TAG
    Value As Single
End Type

Public Type DWRITE_FONT_AXIS_RANGE
    axisTag As DWRITE_FONT_AXIS_TAG
    minValue As Single
    maxValue As Single
End Type

Public Enum DWRITE_FONT_FAMILY_MODEL
    DWRITE_FONT_FAMILY_MODEL_TYPOGRAPHIC = 0
    DWRITE_FONT_FAMILY_MODEL_WEIGHT_STRETCH_STYLE = 1
End Enum

Public Enum DWRITE_AUTOMATIC_FONT_AXES
    DWRITE_AUTOMATIC_FONT_AXES_NONE = 0
    DWRITE_AUTOMATIC_FONT_AXES_OPTICAL_SIZE = 1
End Enum

Public Enum DWRITE_FONT_AXIS_ATTRIBUTES
    DWRITE_FONT_AXIS_ATTRIBUTES_NONE = 0
    DWRITE_FONT_AXIS_ATTRIBUTES_VARIABLE = 1
    DWRITE_FONT_AXIS_ATTRIBUTES_HIDDEN = 2
End Enum

Public Enum DWRITE_FONT_SOURCE_TYPE
    DWRITE_FONT_SOURCE_TYPE_UNKNOWN = 0
    DWRITE_FONT_SOURCE_TYPE_PER_MACHINE = 1
    DWRITE_FONT_SOURCE_TYPE_PER_USER = 2
    DWRITE_FONT_SOURCE_TYPE_APPX_PACKAGE = 3
    DWRITE_FONT_SOURCE_TYPE_REMOTE_FONT_PROVIDER = 4
End Enum

Public Type DWRITE_BITMAP_DATA_BGRA32
    width As Long
    Height As Long
    pixels As LongPtr
End Type

Public Enum DWRITE_PAINT_FEATURE_LEVEL
    DWRITE_PAINT_FEATURE_LEVEL_NONE = 0
    DWRITE_PAINT_FEATURE_LEVEL_COLR_V0 = 1
    DWRITE_PAINT_FEATURE_LEVEL_COLR_V1 = 2
End Enum

Public Enum DWRITE_PAINT_ATTRIBUTES
    DWRITE_PAINT_ATTRIBUTES_NONE = 0
    DWRITE_PAINT_ATTRIBUTES_USES_PALETTE = 1
    DWRITE_PAINT_ATTRIBUTES_USES_TEXT_COLOR = 2
End Enum

Public Type DWRITE_PAINT_COLOR
    Value As DWRITE_COLOR_F
    paletteEntryIndex As Integer
    alphaMultiplier As Single
    colorAttributes As DWRITE_PAINT_ATTRIBUTES
End Type

Public Enum DWRITE_COLOR_COMPOSITE_MODE
    '  Porter-Duff modes.
    DWRITE_COLOR_COMPOSITE_CLEAR
    DWRITE_COLOR_COMPOSITE_SRC
    DWRITE_COLOR_COMPOSITE_DEST
    DWRITE_COLOR_COMPOSITE_SRC_OVER
    DWRITE_COLOR_COMPOSITE_DEST_OVER
    DWRITE_COLOR_COMPOSITE_SRC_IN
    DWRITE_COLOR_COMPOSITE_DEST_IN
    DWRITE_COLOR_COMPOSITE_SRC_OUT
    DWRITE_COLOR_COMPOSITE_DEST_OUT
    DWRITE_COLOR_COMPOSITE_SRC_ATOP
    DWRITE_COLOR_COMPOSITE_DEST_ATOP
    DWRITE_COLOR_COMPOSITE_XOR
    DWRITE_COLOR_COMPOSITE_PLUS
    '  Separable color blend modes.
    DWRITE_COLOR_COMPOSITE_SCREEN
    DWRITE_COLOR_COMPOSITE_OVERLAY
    DWRITE_COLOR_COMPOSITE_DARKEN
    DWRITE_COLOR_COMPOSITE_LIGHTEN
    DWRITE_COLOR_COMPOSITE_COLOR_DODGE
    DWRITE_COLOR_COMPOSITE_COLOR_BURN
    DWRITE_COLOR_COMPOSITE_HARD_LIGHT
    DWRITE_COLOR_COMPOSITE_SOFT_LIGHT
    DWRITE_COLOR_COMPOSITE_DIFFERENCE
    DWRITE_COLOR_COMPOSITE_EXCLUSION
    DWRITE_COLOR_COMPOSITE_MULTIPLY
    '  Non-separable color blend modes.
    DWRITE_COLOR_COMPOSITE_HSL_HUE
    DWRITE_COLOR_COMPOSITE_HSL_SATURATION
    DWRITE_COLOR_COMPOSITE_HSL_COLOR
    DWRITE_COLOR_COMPOSITE_HSL_LUMINOSITY
End Enum

Public Enum DWRITE_PAINT_TYPE
    DWRITE_PAINT_TYPE_NONE = 0
    DWRITE_PAINT_TYPE_LAYERS = 1
    DWRITE_PAINT_TYPE_SOLID_GLYPH = 2
    DWRITE_PAINT_TYPE_SOLID = 3
    DWRITE_PAINT_TYPE_LINEAR_GRADIENT = 4
    DWRITE_PAINT_TYPE_RADIAL_GRADIENT = 5
    DWRITE_PAINT_TYPE_SWEEP_GRADIENT = 6
    DWRITE_PAINT_TYPE_GLYPH = 7
    DWRITE_PAINT_TYPE_COLOR_GLYPH = 8
    DWRITE_PAINT_TYPE_TRANSFORM = 9
    DWRITE_PAINT_TYPE_COMPOSITE = 10
End Enum

Public Type DWRITE_PAINT_ELEMENT
    paintType As DWRITE_PAINT_TYPE
    PAINT_UNION(0 To 31) As Byte
End Type






Public Const FACDXGI As Long = &H87a

 Public Const DXGI_CPU_ACCESS_NONE = (0)
 Public Const DXGI_CPU_ACCESS_DYNAMIC = (1)
 Public Const DXGI_CPU_ACCESS_READ_WRITE = (2)
 Public Const DXGI_CPU_ACCESS_SCRATCH = (3)
 Public Const DXGI_CPU_ACCESS_FIELD = 15
 Public Enum DxgiUsageFlags
    DXGI_USAGE_SHADER_INPUT = &H00000010
    DXGI_USAGE_RENDER_TARGET_OUTPUT = &H00000020
    DXGI_USAGE_BACK_BUFFER = &H00000040
    DXGI_USAGE_SHARED = &H00000080
    DXGI_USAGE_READ_ONLY = &H00000100
    DXGI_USAGE_DISCARD_ON_PRESENT = &H00000200
    DXGI_USAGE_UNORDERED_ACCESS = &H00000400
    DXGI_USAGE_REMOTE_SWAPCHAIN_BUFFER = (1& << (15 + 4))
    DXGI_USAGE_GDI_COMPATIBLE = (1& << (16 + 4))
 End Enum
 Public Const DXGI_RESOURCE_PRIORITY_MINIMUM = (&H28000000)

 Public Const DXGI_RESOURCE_PRIORITY_LOW = (&H50000000)

 Public Const DXGI_RESOURCE_PRIORITY_NORMAL = (&H78000000)

 Public Const DXGI_RESOURCE_PRIORITY_HIGH = (&Ha0000000)

 Public Const DXGI_RESOURCE_PRIORITY_MAXIMUM = (&Hc8000000)

 Public Const DXGI_MAX_SWAP_CHAIN_BUFFERS = (16)
 Public Enum DXGI_PRESENT
     DXGI_PRESENT_TEST = &H00000001
     DXGI_PRESENT_DO_NOT_SEQUENCE = &H00000002
     DXGI_PRESENT_RESTART = &H00000004
     DXGI_PRESENT_DO_NOT_WAIT = &H00000008
     DXGI_PRESENT_STEREO_PREFER_RIGHT = &H00000010
     DXGI_PRESENT_STEREO_TEMPORARY_MONO = &H00000020
     DXGI_PRESENT_RESTRICT_TO_OUTPUT = &H00000040
     DXGI_PRESENT_USE_DURATION = &H00000100
     DXGI_PRESENT_ALLOW_TEARING = &H00000200
 End Enum

 Public Enum DXGI_MWA
     DXGI_MWA_NO_WINDOW_CHANGES = (1 << 0)
     DXGI_MWA_NO_ALT_ENTER = (1 << 1)
     DXGI_MWA_NO_PRINT_SCREEN = (1 << 2)
     DXGI_MWA_VALID = (&H7)
 End Enum

Public Enum DXGI_ENUM_MODES
    DXGI_ENUM_MODES_INTERLACED = (1)
    DXGI_ENUM_MODES_SCALING = (2)
    DXGI_ENUM_MODES_STEREO = (4)
    DXGI_ENUM_MODES_DISABLED_STEREO = (8)
End Enum

Public Const DXGI_SHARED_RESOURCE_READ= (&H80000000)

Public Const DXGI_SHARED_RESOURCE_WRITE= (1)

Public Const DXGI_STANDARD_MULTISAMPLE_QUALITY_PATTERN = &Hffffffff
Public Const DXGI_CENTER_MULTISAMPLE_QUALITY_PATTERN = &Hfffffffe



Public Declare PtrSafe Function CreateDXGIFactory Lib "dxgi.dll" (ByRef riid As UUID, ByRef ppFactory As Any) As Long
Public Declare PtrSafe Function CreateDXGIFactory1 Lib "dxgi.dll" (ByRef riid As UUID, ByRef ppFactory As Any) As Long
Public Declare PtrSafe Function CreateDXGIFactory2 Lib "dxgi.dll" (ByVal flags As Long, ByRef riid As UUID, ByRef ppFactory As Any) As Long
Public Declare PtrSafe Function DXGIGetDebugInterface1 Lib "dxgi.dll" (ByVal flags As Long, ByRef riid As UUID, ByRef pDebug As Any) As Long


Public Type DXGI_RATIONAL
    Numerator As Long
    Denominator As Long
End Type

Public Type DXGI_SAMPLE_DESC
    Count As Long
    Quality As Long
End Type

Public Type DXGI_MATRIX_3X2_F
    m_11 As Single
    m_12 As Single
    m_21 As Single
    m_22 As Single
    m_31 As Single
    m_32 As Single
End Type

Public Enum DXGI_COLOR_SPACE_TYPE
    DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709 = 0
    DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709 = 1
    DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P709 = 2
    DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P2020 = 3
    DXGI_COLOR_SPACE_RESERVED = 4
    DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601 = 5
    DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601 = 6
    DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P601 = 7
    DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709 = 8
    DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P709 = 9
    DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020 = 10
    DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020 = 11
    DXGI_COLOR_SPACE_RGB_FULL_G2084_NONE_P2020 = 12
    DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_LEFT_P2020 = 13
    DXGI_COLOR_SPACE_RGB_STUDIO_G2084_NONE_P2020 = 14
    DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_TOPLEFT_P2020 = 15
    DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_TOPLEFT_P2020 = 16
    DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P2020 = 17
    DXGI_COLOR_SPACE_YCBCR_STUDIO_GHLG_TOPLEFT_P2020 = 18
    DXGI_COLOR_SPACE_YCBCR_FULL_GHLG_TOPLEFT_P2020 = 19
    DXGI_COLOR_SPACE_RGB_STUDIO_G24_NONE_P709 = 20
    DXGI_COLOR_SPACE_RGB_STUDIO_G24_NONE_P2020 = 21
    DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_LEFT_P709 = 22
    DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_LEFT_P2020 = 23
    DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_TOPLEFT_P2020 = 24
    DXGI_COLOR_SPACE_CUSTOM = -1
End Enum

Public Type DXGI_RGB
    Red As Single
    Green As Single
    Blue As Single
End Type

Public Type D3DCOLORVALUE
    r As Single
    g As Single
    b As Single
    a As Single
End Type
'ALias DWRITE_COLOR_F As D3DCOLORVALUE
Public Type DWRITE_COLOR_F
    r As Single
    g As Single
    b As Single
    a As Single
End Type


Public Type DXGI_GAMMA_CONTROL
    Scale As DXGI_RGB
    Offset As DXGI_RGB
    GammaCurve(0 To 1024) As DXGI_RGB
End Type

Public Type DXGI_GAMMA_CONTROL_CAPABILITIES
    ScaleAndOffsetSupported As BOOL
    MaxConvertedValue As Single
    MinConvertedValue As Single
    NumGammaControlPoints As Long
    ControlPointPositions(0 To 1024) As Single
End Type

Public Enum DXGI_MODE_SCANLINE_ORDER
    DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED = 0
    DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE = 1
    DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST = 2
    DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST = 3
End Enum

Public Enum DXGI_MODE_SCALING
    DXGI_MODE_SCALING_UNSPECIFIED = 0
    DXGI_MODE_SCALING_CENTERED = 1
    DXGI_MODE_SCALING_STRETCHED = 2
End Enum

Public Enum DXGI_MODE_ROTATION
    DXGI_MODE_ROTATION_UNSPECIFIED = 0
    DXGI_MODE_ROTATION_IDENTITY = 1
    DXGI_MODE_ROTATION_ROTATE90 = 2
    DXGI_MODE_ROTATION_ROTATE180 = 3
    DXGI_MODE_ROTATION_ROTATE270 = 4
End Enum

Public Type DXGI_MODE_DESC
    width As Long
    Height As Long
    RefreshRate As DXGI_RATIONAL
    Format As DXGI_FORMAT
    ScanlineOrdering As DXGI_MODE_SCANLINE_ORDER
    Scaling As DXGI_MODE_SCALING
End Type

Public Type DXGI_FRAME_STATISTICS
    PresentCount As Long
    PresentRefreshCount As Long
    SyncRefreshCount As Long
    SyncQPCTime As LARGE_INTEGER
    SyncGPUTime As LARGE_INTEGER
End Type

Public Type DXGI_MAPPED_RECT
    pitch As Long
    pBits As LongPtr
End Type

Public Enum DxgiSurfaceMapFlags
    DXGI_MAP_READ = 1
    DXGI_MAP_WRITE = 2
    DXGI_MAP_DISCARD = 4
End Enum

Public Type DXGI_ADAPTER_DESC
    Description (0 To 127) As Integer
    VendorId As Long
    deviceId As Long
    SubSysId As Long
    Revision As Long
    DedicatedVideoMemory As LongPtr
    DedicatedSystemMemory As LongPtr
    SharedSystemMemory As LongPtr
    AdapterLuid As LUID
End Type

Public Type DXGI_OUTPUT_DESC
    DeviceName (0 To 31) As Integer
    DesktopCoordinates As RECT
    AttachedToDesktop As BOOL
    rotation As DXGI_MODE_ROTATION
    monitor As LongPtr
End Type

Public Type DXGI_SHARED_RESOURCE
    Handle As LongPtr
End Type

Public Enum DXGI_RESIDENCY
    DXGI_RESIDENCY_FULLY_RESIDENT = 1
    DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY = 2
    DXGI_RESIDENCY_EVICTED_TO_DISK = 3
End Enum

Public Type DXGI_SURFACE_DESC
    width As Long
    Height As Long
    Format As DXGI_FORMAT
    SampleDesc As DXGI_SAMPLE_DESC
End Type

Public Enum DXGI_SWAP_EFFECT
    DXGI_SWAP_EFFECT_DISCARD = 0
    DXGI_SWAP_EFFECT_SEQUENTIAL = 1
    DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL = 3
    DXGI_SWAP_EFFECT_FLIP_DISCARD = 4
End Enum

Public Enum DXGI_SWAP_CHAIN_FLAG
    DXGI_SWAP_CHAIN_FLAG_NONPREROTATED = 1
    DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH = 2
    DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE = 4
    DXGI_SWAP_CHAIN_FLAG_RESTRICTED_CONTENT = 8
    DXGI_SWAP_CHAIN_FLAG_RESTRICT_SHARED_RESOURCE_DRIVER = 16
    DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY = 32
    DXGI_SWAP_CHAIN_FLAG_FRAME_LATENCY_WAITABLE_OBJECT = 64
    DXGI_SWAP_CHAIN_FLAG_FOREGROUND_LAYER = 128
    DXGI_SWAP_CHAIN_FLAG_FULLSCREEN_VIDEO = 256
    DXGI_SWAP_CHAIN_FLAG_YUV_VIDEO = 512
    DXGI_SWAP_CHAIN_FLAG_HW_PROTECTED = 1024
    DXGI_SWAP_CHAIN_FLAG_ALLOW_TEARING = 2048
    DXGI_SWAP_CHAIN_FLAG_RESTRICTED_TO_ALL_HOLOGRAPHIC_DISPLAYS = 4096
End Enum

Public Enum DXGI_OFFER_RESOURCE_PRIORITY
    DXGI_OFFER_RESOURCE_PRIORITY_LOW = 1
    DXGI_OFFER_RESOURCE_PRIORITY_NORMAL = 2
    DXGI_OFFER_RESOURCE_PRIORITY_HIGH = 3
End Enum

Public Type DXGI_SWAP_CHAIN_DESC
    BufferDesc As DXGI_MODE_DESC
    SampleDesc As DXGI_SAMPLE_DESC
    BufferUsage As Long
    BufferCount As Long
    OutputWindow As LongPtr
    Windowed As BOOL
    SwapEffect As DXGI_SWAP_EFFECT
    flags As DXGI_SWAP_CHAIN_FLAG
End Type

Public Enum DXGI_ADAPTER_FLAG
    DXGI_ADAPTER_FLAG_NONE = 0
    DXGI_ADAPTER_FLAG_REMOTE = 1
    DXGI_ADAPTER_FLAG_SOFTWARE = 2
    DXGI_ADAPTER_FLAG_FORCE_DWORD = -1
End Enum

Public Type DXGI_ADAPTER_DESC1
    Description(0 To 127) As Integer
    VendorId As Long
    deviceId As Long
    SubSysId As Long
    Revision As Long
    DedicatedVideoMemory As LongPtr
    DedicatedSystemMemory As LongPtr
    SharedSystemMemory As LongPtr
    AdapterLuid As LUID
    flags As DXGI_ADAPTER_FLAG
End Type

[Description("NOTE: Array dimensions are switched vs C++ to match the underlying memory layout.")]
Public Type DXGI_DISPLAY_COLOR_SPACE
    [Description("NOTE: Array dimensions are switched vs C++ to match the underlying memory layout.")]
    PrimaryCoordinates(0 To 1, 0 To 7) As Single
    [Description("NOTE: Array dimensions are switched vs C++ to match the underlying memory layout.")]
    WhitePoints(0 To 1, 0 To 15) As Single
End Type

Public Type DXGI_OUTDUPL_MOVE_RECT
    SourcePoint As POINT
    DestinationRect As RECT
End Type

Public Type DXGI_OUTDUPL_DESC
    ModeDesc As DXGI_MODE_DESC
    rotation As DXGI_MODE_ROTATION
    DesktopImageInSystemMemory As BOOL
End Type

Public Type DXGI_OUTDUPL_POINTER_POSITION
    position As POINT
    Visible As BOOL
End Type

Public Enum DXGI_OUTDUPL_POINTER_SHAPE_TYPE
    DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MONOCHROME = 1
    DXGI_OUTDUPL_POINTER_SHAPE_TYPE_COLOR = 2
    DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MASKED_COLOR = 4
End Enum

Public Type DXGI_OUTDUPL_POINTER_SHAPE_INFO
    type As Long
    width As Long
    Height As Long
    pitch As Long
    HotSpot As POINT
End Type

Public Type DXGI_OUTDUPL_FRAME_INFO
    LastPresentTime As LARGE_INTEGER
    LastMouseUpdateTime As LARGE_INTEGER
    AccumulatedFrames As Long
    RectsCoalesced As BOOL
    ProtectedContentMaskedOut As BOOL
    PointerPosition As DXGI_OUTDUPL_POINTER_POSITION
    TotalMetadataBufferSize As Long
    PointerShapeBufferSize As Long
End Type

Public Enum DXGI_ALPHA_MODE
    DXGI_ALPHA_MODE_UNSPECIFIED = 0
    DXGI_ALPHA_MODE_PREMULTIPLIED = 1
    DXGI_ALPHA_MODE_STRAIGHT = 2
    DXGI_ALPHA_MODE_IGNORE = 3
    DXGI_ALPHA_MODE_FORCE_DWORD = -1
End Enum

Public Type DXGI_MODE_DESC1
    width As Long
    Height As Long
    RefreshRate As DXGI_RATIONAL
    Format As DXGI_FORMAT
    ScanlineOrdering As DXGI_MODE_SCANLINE_ORDER
    Scaling As DXGI_MODE_SCALING
    Stereo As BOOL
End Type

Public Enum DXGI_SCALING
    DXGI_SCALING_STRETCH = 0
    DXGI_SCALING_NONE = 1
    DXGI_SCALING_ASPECT_RATIO_STRETCH = 2
End Enum

Public Type DXGI_SWAP_CHAIN_DESC1
    width As Long
    Height As Long
    Format As DXGI_FORMAT
    Stereo As BOOL
    SampleDesc As DXGI_SAMPLE_DESC
    BufferUsage As DxgiUsageFlags
    BufferCount As Long
    Scaling As DXGI_SCALING
    SwapEffect As DXGI_SWAP_EFFECT
    AlphaMode As DXGI_ALPHA_MODE
    flags As DXGI_SWAP_CHAIN_FLAG
End Type

Public Type DXGI_SWAP_CHAIN_FULLSCREEN_DESC
    RefreshRate As DXGI_RATIONAL
    ScanlineOrdering As DXGI_MODE_SCANLINE_ORDER
    Scaling As DXGI_MODE_SCALING
    Windowed As BOOL
End Type

Public Type DXGI_PRESENT_PARAMETERS
    DirtyRectsCount As Long
    pDirtyRects As LongPtr
    pScrollRect As LongPtr
    pScrollOffset As LongPtr
End Type

Public Enum DXGI_GRAPHICS_PREEMPTION_GRANULARITY
    DXGI_GRAPHICS_PREEMPTION_DMA_BUFFER_BOUNDARY = 0
    DXGI_GRAPHICS_PREEMPTION_PRIMITIVE_BOUNDARY = 1
    DXGI_GRAPHICS_PREEMPTION_TRIANGLE_BOUNDARY = 2
    DXGI_GRAPHICS_PREEMPTION_PIXEL_BOUNDARY = 3
    DXGI_GRAPHICS_PREEMPTION_INSTRUCTION_BOUNDARY = 4
End Enum

Public Enum DXGI_COMPUTE_PREEMPTION_GRANULARITY
    DXGI_COMPUTE_PREEMPTION_DMA_BUFFER_BOUNDARY = 0
    DXGI_COMPUTE_PREEMPTION_DISPATCH_BOUNDARY = 1
    DXGI_COMPUTE_PREEMPTION_THREAD_GROUP_BOUNDARY = 2
    DXGI_COMPUTE_PREEMPTION_THREAD_BOUNDARY = 3
    DXGI_COMPUTE_PREEMPTION_INSTRUCTION_BOUNDARY = 4
End Enum

Public Type DXGI_ADAPTER_DESC2
    Description(0 To 127) As Integer
    VendorId As Long
    deviceId As Long
    SubSysId As Long
    Revision As Long
    DedicatedVideoMemory As LongPtr
    DedicatedSystemMemory As LongPtr
    SharedSystemMemory As LongPtr
    AdapterLuid As LUID
    flags As DXGI_ADAPTER_FLAG
    GraphicsPreemptionGranularity As DXGI_GRAPHICS_PREEMPTION_GRANULARITY
    ComputePreemptionGranularity As DXGI_COMPUTE_PREEMPTION_GRANULARITY
End Type


Public Type DXGI_DECODE_SWAP_CHAIN_DESC
    flags As Long
End Type

Public Enum DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS
    DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_NOMINAL_RANGE = 1
    DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_BT709 = 2
    DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_xvYCC = 4
End Enum

Public Enum DXGI_FRAME_PRESENTATION_MODE
    DXGI_FRAME_PRESENTATION_MODE_COMPOSED = 0
    DXGI_FRAME_PRESENTATION_MODE_OVERLAY = 1
    DXGI_FRAME_PRESENTATION_MODE_NONE = 2
    DXGI_FRAME_PRESENTATION_MODE_COMPOSITION_FAILURE = 3
End Enum

Public Type DXGI_FRAME_STATISTICS_MEDIA
    PresentCount As Long
    PresentRefreshCount As Long
    SyncRefreshCount As Long
    SyncQPCTime As LARGE_INTEGER
    SyncGPUTime As LARGE_INTEGER
    CompositionMode As DXGI_FRAME_PRESENTATION_MODE
    ApprovedPresentDuration As Long
End Type

Public Enum DXGI_OVERLAY_SUPPORT_FLAG
    DXGI_OVERLAY_SUPPORT_FLAG_DIRECT = 1
    DXGI_OVERLAY_SUPPORT_FLAG_SCALING = 2
End Enum

Public Enum DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG
    DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_PRESENT = 1
    DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_OVERLAY_PRESENT = 2
End Enum

Public Enum DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG
    DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG_PRESENT = 1
End Enum

Public Enum DXGI_MEMORY_SEGMENT_GROUP
    DXGI_MEMORY_SEGMENT_GROUP_LOCAL = 0
    DXGI_MEMORY_SEGMENT_GROUP_NON_LOCAL = 1
End Enum

Public Type DXGI_QUERY_VIDEO_MEMORY_INFO
    Budget As LongLong
    CurrentUsage As LongLong
    AvailableForReservation As LongLong
    CurrentReservation As LongLong
End Type

Public Enum DXGI_OUTDUPL_FLAG
    DXGI_OUTDUPL_COMPOSITED_UI_CAPTURE_ONLY = 1
End Enum

Public Enum DXGI_HDR_METADATA_TYPE
    DXGI_HDR_METADATA_TYPE_NONE = 0
    DXGI_HDR_METADATA_TYPE_HDR10 = 1
End Enum

Public Type DXGI_HDR_METADATA_HDR10
    RedPrimary(0 To 1) As Integer
    GreenPrimary(0 To 1) As Integer
    BluePrimary(0 To 1) As Integer
    WhitePoint(0 To 1) As Integer
    MaxMasteringLuminance As Long
    MinMasteringLuminance As Long
    MaxContentLightLevel As Integer
    MaxFrameAverageLightLevel As Integer
End Type

Public Enum DXGI_OFFER_RESOURCE_FLAGS
    DXGI_OFFER_RESOURCE_FLAG_ALLOW_DECOMMIT = 1
End Enum

Public Enum DXGI_RECLAIM_RESOURCE_RESULTS
    DXGI_RECLAIM_RESOURCE_RESULT_OK = 0
    DXGI_RECLAIM_RESOURCE_RESULT_DISCARDED = 1
    DXGI_RECLAIM_RESOURCE_RESULT_NOT_COMMITTED = 2
End Enum


Public Enum DXGI_FEATURE
    DXGI_FEATURE_PRESENT_ALLOW_TEARING = 0
End Enum


Public Enum DXGI_ADAPTER_FLAG3
    DXGI_ADAPTER_FLAG3_NONE = 0
    DXGI_ADAPTER_FLAG3_REMOTE = 1
    DXGI_ADAPTER_FLAG3_SOFTWARE = 2
    DXGI_ADAPTER_FLAG3_ACG_COMPATIBLE = 4
    DXGI_ADAPTER_FLAG3_SUPPORT_MONITORED_FENCES = 8
    DXGI_ADAPTER_FLAG3_SUPPORT_NON_MONITORED_FENCES = 16
    DXGI_ADAPTER_FLAG3_KEYED_MUTEX_CONFORMANCE = 32
    DXGI_ADAPTER_FLAG3_FORCE_DWORD = -1
End Enum

Public Type DXGI_ADAPTER_DESC3
    Description(0 To 127) As Integer
    VendorId As Long
    deviceId As Long
    SubSysId As Long
    Revision As Long
    DedicatedVideoMemory As LongPtr
    DedicatedSystemMemory As LongPtr
    SharedSystemMemory As LongPtr
    AdapterLuid As LUID
    flags As DXGI_ADAPTER_FLAG3
    GraphicsPreemptionGranularity As DXGI_GRAPHICS_PREEMPTION_GRANULARITY
    ComputePreemptionGranularity As DXGI_COMPUTE_PREEMPTION_GRANULARITY
End Type

Public Type DXGI_OUTPUT_DESC1
    DeviceName(0 To 31) As Integer
    DesktopCoordinates As RECT
    AttachedToDesktop As BOOL
    rotation As DXGI_MODE_ROTATION
    monitor As LongPtr
    BitsPerColor As Long
    ColorSpace As DXGI_COLOR_SPACE_TYPE
    RedPrimary(0 To 1) As Single
    GreenPrimary(0 To 1) As Single
    BluePrimary(0 To 1) As Single
    WhitePoint(0 To 1) As Single
    MinLuminance As Single
    MaxLuminance As Single
    MaxFullFrameLuminance As Single
End Type

Public Enum DXGI_GPU_PREFERENCE
    DXGI_GPU_PREFERENCE_UNSPECIFIED = 0
    DXGI_GPU_PREFERENCE_MINIMUM_POWER = 1
    DXGI_GPU_PREFERENCE_HIGH_PERFORMANCE = 2
End Enum

Public Enum DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAGS
    DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAG_FULLSCREEN = 1
    DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAG_WINDOWED = 2
    DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAG_CURSOR_STRETCHED = 4
End Enum

Public Const DXGI_DEBUG_BINARY_VERSION = 1

Public Enum DXGI_DEBUG_RLO_FLAGS
    DXGI_DEBUG_RLO_SUMMARY = &H1
    DXGI_DEBUG_RLO_DETAIL = &H2
    DXGI_DEBUG_RLO_IGNORE_INTERNAL = &H4
    DXGI_DEBUG_RLO_ALL = &H7
End Enum

Public Function DXGI_DEBUG_ALL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He48ae283, &Hda80, &H490b, &H87, &He6, &H43, &He9, &Ha9, &Hcf, &Hda, &H8)
DXGI_DEBUG_ALL = iid
End Function
Public Function DXGI_DEBUG_DX() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H35cdd7fc, &H13b2, &H421d, &Ha5, &Hd7, &H7e, &H44, &H51, &H28, &H7d, &H64)
DXGI_DEBUG_DX = iid
End Function
Public Function DXGI_DEBUG_DXGI() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H25cddaa4, &Hb1c6, &H47e1, &Hac, &H3e, &H98, &H87, &H5b, &H5a, &H2e, &H2a)
DXGI_DEBUG_DXGI = iid
End Function
Public Function DXGI_DEBUG_APP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6cd6e01, &H4219, &H4ebd, &H87, &H9, &H27, &Hed, &H23, &H36, &Hc, &H62)
DXGI_DEBUG_APP = iid
End Function

Public Enum DXGI_INFO_QUEUE_MESSAGE_CATEGORY
    DXGI_INFO_QUEUE_MESSAGE_CATEGORY_UNKNOWN
    DXGI_INFO_QUEUE_MESSAGE_CATEGORY_MISCELLANEOUS
    DXGI_INFO_QUEUE_MESSAGE_CATEGORY_INITIALIZATION
    DXGI_INFO_QUEUE_MESSAGE_CATEGORY_CLEANUP
    DXGI_INFO_QUEUE_MESSAGE_CATEGORY_COMPILATION
    DXGI_INFO_QUEUE_MESSAGE_CATEGORY_STATE_CREATION
    DXGI_INFO_QUEUE_MESSAGE_CATEGORY_STATE_SETTING
    DXGI_INFO_QUEUE_MESSAGE_CATEGORY_STATE_GETTING
    DXGI_INFO_QUEUE_MESSAGE_CATEGORY_RESOURCE_MANIPULATION
    DXGI_INFO_QUEUE_MESSAGE_CATEGORY_EXECUTION
    DXGI_INFO_QUEUE_MESSAGE_CATEGORY_SHADER
End Enum

Public Enum DXGI_INFO_QUEUE_MESSAGE_SEVERITY
    DXGI_INFO_QUEUE_MESSAGE_SEVERITY_CORRUPTION
    DXGI_INFO_QUEUE_MESSAGE_SEVERITY_ERROR
    DXGI_INFO_QUEUE_MESSAGE_SEVERITY_WARNING
    DXGI_INFO_QUEUE_MESSAGE_SEVERITY_INFO
    DXGI_INFO_QUEUE_MESSAGE_SEVERITY_MESSAGE
End Enum

Public Enum DXGI_INFO_QUEUE_MESSAGE_ID
    [_]
End Enum
Public Const DXGI_INFO_QUEUE_MESSAGE_ID_STRING_FROM_APPLICATION = 0

Public Type DXGI_INFO_QUEUE_MESSAGE
    Producer As UUID 'UUID
    Category As DXGI_INFO_QUEUE_MESSAGE_CATEGORY
    Severity As DXGI_INFO_QUEUE_MESSAGE_SEVERITY
    ID As DXGI_INFO_QUEUE_MESSAGE_ID
    pDescription As LongPtr 'const char
    DescriptionByteLength As LongPtr
End Type

Public Type DXGI_INFO_QUEUE_FILTER_DESC
    NumCategories As Long
    pCategoryList As LongPtr 'DXGI_INFO_QUEUE_MESSAGE_CATEGORY
    NumSeverities As Long
    pSeverityList As LongPtr 'DXGI_INFO_QUEUE_MESSAGE_SEVERITY
    NumIDs As Long
    pIDList As LongPtr 'DXGI_INFO_QUEUE_MESSAGE_ID
End Type

Public Type DXGI_INFO_QUEUE_FILTER
    AllowList As DXGI_INFO_QUEUE_FILTER_DESC
    DenyList As DXGI_INFO_QUEUE_FILTER_DESC
End Type

Public Const DXGI_INFO_QUEUE_DEFAULT_MESSAGE_COUNT_LIMIT= 1024

Public Declare PtrSafe Function DXGIGetDebugInterface Lib "dxgidebug.dll" (ByRef riid As UUID, ByRef pDebug As Any) As Long







Public Enum DCOMPOSITION_BITMAP_INTERPOLATION_MODE
    DCOMPOSITION_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0
    DCOMPOSITION_BITMAP_INTERPOLATION_MODE_LINEAR = 1
    DCOMPOSITION_BITMAP_INTERPOLATION_MODE_INHERIT = -1
End Enum

Public Enum DCOMPOSITION_BORDER_MODE
    DCOMPOSITION_BORDER_MODE_SOFT = 0
    DCOMPOSITION_BORDER_MODE_HARD = 1
    DCOMPOSITION_BORDER_MODE_INHERIT = -1
End Enum

Public Enum DCOMPOSITION_COMPOSITE_MODE
    DCOMPOSITION_COMPOSITE_MODE_SOURCE_OVER = 0
    DCOMPOSITION_COMPOSITE_MODE_DESTINATION_INVERT = 1
    DCOMPOSITION_COMPOSITE_MODE_MIN_BLEND = 2
    DCOMPOSITION_COMPOSITE_MODE_INHERIT = -1
End Enum

Public Enum DCOMPOSITION_BACKFACE_VISIBILITY
    DCOMPOSITION_BACKFACE_VISIBILITY_VISIBLE = 0
    DCOMPOSITION_BACKFACE_VISIBILITY_HIDDEN = 1
    DCOMPOSITION_BACKFACE_VISIBILITY_INHERIT = -1
End Enum

Public Enum DCOMPOSITION_OPACITY_MODE
    DCOMPOSITION_OPACITY_MODE_LAYER = 0
    DCOMPOSITION_OPACITY_MODE_MULTIPLY = 1
    DCOMPOSITION_OPACITY_MODE_INHERIT = -1
End Enum

Public Enum DCOMPOSITION_DEPTH_MODE
    DCOMPOSITION_DEPTH_MODE_TREE = 0
    DCOMPOSITION_DEPTH_MODE_SPATIAL = 1
    DCOMPOSITION_DEPTH_MODE_SORTED = 3
    DCOMPOSITION_DEPTH_MODE_INHERIT = -1
End Enum

Public Type DCOMPOSITION_FRAME_STATISTICS
    lastFrameTime As LARGE_INTEGER
    currentCompositionRate As DXGI_RATIONAL
    currentTime As LARGE_INTEGER
    timeFrequency As LARGE_INTEGER
    nextEstimatedFrameTime As LARGE_INTEGER
End Type

Public Const COMPOSITIONOBJECT_READ As Long = 1
Public Const COMPOSITIONOBJECT_WRITE As Long = 2
Public Const COMPOSITIONOBJECT_ALL_ACCESS As Long = 3

Public Declare PtrSafe Function DCompositionCreateDevice Lib "dcomp.dll" (ByVal dxgiDevice As IDXGIDevice, ByRef iid As UUID, ByRef dcompositionDevice As Any) As Long
Public Declare PtrSafe Function DCompositionCreateDevice2 Lib "dcomp.dll" (ByVal renderingDevice As IUnknown, ByRef iid As UUID, ByRef dcompositionDevice As Any) As Long
Public Declare PtrSafe Function DCompositionCreateDevice3 Lib "dcomp.dll" (ByVal renderingDevice As IUnknown, ByRef iid As UUID, ByRef dcompositionDevice As Any) As Long
Public Declare PtrSafe Function DCompositionCreateSurfaceHandle Lib "dcomp.dll" (ByVal desiredAccess As Long, ByRef securityAttributes As SECURITY_ATTRIBUTES, ByRef surfaceHandle As LongPtr) As Long
Public Declare PtrSafe Function DCompositionAttachMouseWheelToHwnd Lib "dcomp.dll" (ByVal visual As IDCompositionVisual, ByVal hwnd As LongPtr, ByVal Enable As Long) As Long
Public Declare PtrSafe Function DCompositionAttachMouseDragToHwnd Lib "dcomp.dll" (ByVal visual As IDCompositionVisual, ByVal hwnd As LongPtr, ByVal Enable As Long) As Long
Public Declare PtrSafe Function CreatePresentationFactory Lib "dcomp.dll" (ByVal d3dDevice As IUnknown, riid As UUID, presentationFactory As Any) As Long

[Description("For an array version, use D3DMATRIXA")]
 Public Type D3DMATRIX
'     m(0 To 3, 0 To 3) As Single
    m_11    As Single: m_12    As Single:   m_13    As Single:  m_14    As Single
    m_21    As Single: m_22    As Single:   m_23    As Single:  m_24    As Single
    m_31    As Single: m_32    As Single:   m_33    As Single:  m_34    As Single
    m_41    As Single: m_42    As Single:   m_43    As Single:  m_44    As Single
End Type
[Description("NOTE: Array dimensions are switched vs C++ to match the underlying memory layout.")]
Public Type D3DMATRIXA
    [Description("NOTE: Array dimensions are switched vs C++ to match the underlying memory layout.")]
    m(0 To 3, 0 To 3) As Single
'    m_11    As Single: m_12    As Single:   m_13    As Single:  m_14    As Single
'    m_21    As Single: m_22    As Single:   m_23    As Single:  m_24    As Single
'    m_31    As Single: m_32    As Single:   m_33    As Single:  m_34    As Single
'    m_41    As Single: m_42    As Single:   m_43    As Single:  m_44    As Single
End Type
    
Public Enum D2D1_COLORS
	AliceBlue = &HF0F8FF
	AntiqueWhite = &HFAEBD7
	Aqua = &H00FFFF&
	Aquamarine = &H7FFFD4
	Azure = &HF0FFFF
	Beige = &HF5F5DC
	Bisque = &HFFE4C4
	Black = &H000000
	BlanchedAlmond = &HFFEBCD
	Blue = &H0000FF
	BlueViolet = &H8A2BE2
	Brown = &HA52A2A
	BurlyWood = &HDEB887
	CadetBlue = &H5F9EA0
	Chartreuse = &H7FFF00
	Chocolate = &HD2691E
	Coral = &HFF7F50
	CornflowerBlue = &H6495ED
	Cornsilk = &HFFF8DC
	Crimson = &HDC143C
	Cyan = &H00FFFF&
	DarkBlue = &H00008B
	DarkCyan = &H008B8B&
	DarkGoldenrod = &HB8860B
	DarkGray = &HA9A9A9
	DarkGreen = &H006400
	DarkKhaki = &HBDB76B
	DarkMagenta = &H8B008B
	DarkOliveGreen = &H556B2F
	DarkOrange = &HFF8C00
	DarkOrchid = &H9932CC
	DarkRed = &H8B0000
	DarkSalmon = &HE9967A
	DarkSeaGreen = &H8FBC8F
	DarkSlateBlue = &H483D8B
	DarkSlateGray = &H2F4F4F
	DarkTurquoise = &H00CED1&
	DarkViolet = &H9400D3
	DeepPink = &HFF1493
	DeepSkyBlue = &H00BFFF&
	DimGray = &H696969
	DodgerBlue = &H1E90FF
	Firebrick = &HB22222
	FloralWhite = &HFFFAF0
	ForestGreen = &H228B22
	Fuchsia = &HFF00FF
	Gainsboro = &HDCDCDC
	GhostWhite = &HF8F8FF
	Gold = &HFFD700
	Goldenrod = &HDAA520
	Gray = &H808080
	Green = &H008000&
	GreenYellow = &HADFF2F
	Honeydew = &HF0FFF0
	HotPink = &HFF69B4
	IndianRed = &HCD5C5C
	Indigo = &H4B0082
	Ivory = &HFFFFF0
	Khaki = &HF0E68C
	Lavender = &HE6E6FA
	LavenderBlush = &HFFF0F5
	LawnGreen = &H7CFC00
	LemonChiffon = &HFFFACD
	LightBlue = &HADD8E6
	LightCoral = &HF08080
	LightCyan = &HE0FFFF
	LightGoldenrodYellow = &HFAFAD2
	LightGreen = &H90EE90
	LightGray = &HD3D3D3
	LightPink = &HFFB6C1
	LightSalmon = &HFFA07A
	LightSeaGreen = &H20B2AA
	LightSkyBlue = &H87CEFA
	LightSlateGray = &H778899
	LightSteelBlue = &HB0C4DE
	LightYellow = &HFFFFE0
	Lime = &H00FF00&
	LimeGreen = &H32CD32
	Linen = &HFAF0E6
	Magenta = &HFF00FF
	Maroon = &H800000
	MediumAquamarine = &H66CDAA
	MediumBlue = &H0000CD
	MediumOrchid = &HBA55D3
	MediumPurple = &H9370DB
	MediumSeaGreen = &H3CB371
	MediumSlateBlue = &H7B68EE
	MediumSpringGreen = &H00FA9A&
	MediumTurquoise = &H48D1CC
	MediumVioletRed = &HC71585
	MidnightBlue = &H191970
	MintCream = &HF5FFFA
	MistyRose = &HFFE4E1
	Moccasin = &HFFE4B5
	NavajoWhite = &HFFDEAD
	Navy = &H000080
	OldLace = &HFDF5E6
	Olive = &H808000
	OliveDrab = &H6B8E23
	Orange = &HFFA500
	OrangeRed = &HFF4500
	Orchid = &HDA70D6
	PaleGoldenrod = &HEEE8AA
	PaleGreen = &H98FB98
	PaleTurquoise = &HAFEEEE
	PaleVioletRed = &HDB7093
	PapayaWhip = &HFFEFD5
	PeachPuff = &HFFDAB9
	Peru = &HCD853F
	Pink = &HFFC0CB
	Plum = &HDDA0DD
	PowderBlue = &HB0E0E6
	Purple = &H800080
	Red = &HFF0000
	RosyBrown = &HBC8F8F
	RoyalBlue = &H4169E1
	SaddleBrown = &H8B4513
	Salmon = &HFA8072
	SandyBrown = &HF4A460
	SeaGreen = &H2E8B57
	SeaShell = &HFFF5EE
	Sienna = &HA0522D
	Silver = &HC0C0C0
	SkyBlue = &H87CEEB
	SlateBlue = &H6A5ACD
	SlateGray = &H708090
	Snow = &HFFFAFA
	SpringGreen = &H00FF7F&
	SteelBlue = &H4682B4
	Tan = &HD2B48C
	Teal = &H008080&
	Thistle = &HD8BFD8
	Tomato = &HFF6347
	Turquoise = &H40E0D0
	Violet = &HEE82EE
	Wheat = &HF5DEB3
	White = &HFFFFFF
	WhiteSmoke = &HF5F5F5
	Yellow = &HFFFF00
	YellowGreen = &H9ACD32
End Enum



Public Const D3D11_DEFAULT_BLEND_FACTOR_ALPHA As Single = (1.0)
Public Const D3D11_DEFAULT_BLEND_FACTOR_BLUE	As Single = 1
Public Const D3D11_DEFAULT_BLEND_FACTOR_GREEN =	&H3f800000
Public Const D3D11_DEFAULT_BLEND_FACTOR_RED	As Single = 1
Public Const D3D11_DEFAULT_BORDER_COLOR_COMPONENT =	0 ' (0.0)
Public Const D3D11_DEFAULT_DEPTH_BIAS_CLAMP =	0 ' (0.0)
Public Const D3D11_DEFAULT_MIP_LOD_BIAS =	0 ' (0.0)
Public Const D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS =	0 ' (0.0)
Public Const D3D11_FLOAT16_FUSED_TOLERANCE_IN_ULP	As Single = (0.6)
Public Const D3D11_FLOAT32_MAX As Single = (3.402823466e+38)
Public Const D3D11_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP	As Single = (0.6)
Public Const D3D11_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR As Single = (2.4)
Public Const D3D11_FLOAT_TO_SRGB_EXPONENT_NUMERATOR	As Single = 1
Public Const D3D11_FLOAT_TO_SRGB_OFFSET As Single = (0.055)
Public Const D3D11_FLOAT_TO_SRGB_SCALE_1 As Single = (12.92)
Public Const D3D11_FLOAT_TO_SRGB_SCALE_2 As Single = (1.055)
Public Const D3D11_FLOAT_TO_SRGB_THRESHOLD As Single = (0.0031308)
Public Const D3D11_FTOI_INSTRUCTION_MAX_INPUT As Single = (2147483647.999)
Public Const D3D11_FTOI_INSTRUCTION_MIN_INPUT As Single = (-2147483648.999)
Public Const D3D11_FTOU_INSTRUCTION_MAX_INPUT As Single = (4294967295.999)
Public Const D3D11_FTOU_INSTRUCTION_MIN_INPUT = 0 ' (0.0)
Public Const D3D11_DEFAULT_VIEWPORT_MAX_DEPTH	= 0 ' (0.0)
Public Const D3D11_DEFAULT_VIEWPORT_MIN_DEPTH	= 0 ' (0.0)
Public Const D3D11_HS_MAXTESSFACTOR_LOWER_BOUND =	(1.0)
Public Const D3D11_HS_MAXTESSFACTOR_UPPER_BOUND As Single = (64.0)
Public Const D3D11_LINEAR_GAMMA	As Single = (1.0)
Public Const D3D11_MAX_BORDER_COLOR_COMPONENT	As Single = (1.0)
Public Const D3D11_MAX_POSITION_VALUE As Single = (3.402823466e+34)
Public Const D3D11_MIN_BORDER_COLOR_COMPONENT	= 0 ' ( 0.0)
Public Const D3D11_MIN_DEPTH	= 0 ' ( 0.0)
Public Const D3D11_MIP_LOD_BIAS_MAX As Single = (15.99)
Public Const D3D11_MIP_LOD_BIAS_MIN As Single = (-16.0)
Public Const D3D11_MULTISAMPLE_ANTIALIAS_LINE_WIDTH As Single = (1.4)
Public Const D3D11_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT	= 0 ' ( 0.0)
Public Const D3D11_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT As Single = (0.5)
Public Const D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM As Single = (0.25)
Public Const D3D11_SPEC_VERSION As Single = (1.07)
Public Const D3D11_SRGB_GAMMA As Single = (2.2)
Public Const D3D11_SRGB_TO_FLOAT_DENOMINATOR_1 As Single = (12.92)
Public Const D3D11_SRGB_TO_FLOAT_DENOMINATOR_2 As Single = (1.055)
Public Const D3D11_SRGB_TO_FLOAT_EXPONENT As Single = (2.4)
Public Const D3D11_SRGB_TO_FLOAT_OFFSET As Single = (0.055)
Public Const D3D11_SRGB_TO_FLOAT_THRESHOLD As Single = (0.04045)
Public Const D3D11_SRGB_TO_FLOAT_TOLERANCE_IN_ULP	As Single = (0.5)
Public Const D3D12_DEFAULT_BLEND_FACTOR_ALPHA As Single = (1.0)
Public Const D3D12_DEFAULT_BLEND_FACTOR_BLUE As Single = (1.0)
Public Const D3D12_DEFAULT_BLEND_FACTOR_GREEN As Single = (1.0)
Public Const D3D12_DEFAULT_BLEND_FACTOR_RED As Single = (1.0)
Public Const D3D12_DEFAULT_BORDER_COLOR_COMPONENT = 0 '	(0.0f)
Public Const D3D12_DEFAULT_DEPTH_BIAS_CLAMP = 0 ' (0.0f)
Public Const D3D12_DEFAULT_MIP_LOD_BIAS = 0 '( 0.0f )
Public Const D3D12_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = 0 ' (0.0f)
Public Const D3D12_DEFAULT_VIEWPORT_MAX_DEPTH = 0 ' (0.0f)
Public Const D3D12_DEFAULT_VIEWPORT_MIN_DEPTH = 0 ' (0.0f)
Public Const D3D12_FLOAT16_FUSED_TOLERANCE_IN_ULP	As Single = (0.6)
Public Const D3D12_FLOAT32_MAX As Single = (3.402823466e+38)
Public Const D3D12_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP As Single = (0.6)
Public Const D3D12_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR As Single = (2.4)
Public Const D3D12_FLOAT_TO_SRGB_EXPONENT_NUMERATOR As Single = 1.0
Public Const D3D12_FLOAT_TO_SRGB_OFFSET As Single = (0.055)
Public Const D3D12_FLOAT_TO_SRGB_SCALE_1 As Single = (12.92)
Public Const D3D12_FLOAT_TO_SRGB_SCALE_2 As Single = (1.055)
Public Const D3D12_FLOAT_TO_SRGB_THRESHOLD	As Single = (0.0031308)
Public Const D3D12_FTOI_INSTRUCTION_MAX_INPUT As Single = (2147483647.999)
Public Const D3D12_FTOI_INSTRUCTION_MIN_INPUT As Single = (-2147483648.999)
Public Const D3D12_FTOU_INSTRUCTION_MAX_INPUT As Single = (4294967295.999)
Public Const D3D12_FTOU_INSTRUCTION_MIN_INPUT = 0 ' (0.0)
Public Const D3D12_HS_MAXTESSFACTOR_LOWER_BOUND As Single = (1.0)
Public Const D3D12_HS_MAXTESSFACTOR_UPPER_BOUND As Single = (64.0)
Public Const D3D12_LINEAR_GAMMA As Single = (1.0)
Public Const D3D12_MAX_BORDER_COLOR_COMPONENT As Single = (1.0)
Public Const D3D12_MAX_DEPTH As Single = (1.0)
Public Const D3D12_MAX_POSITION_VALUE As Single = (3.402823466e+34)
Public Const D3D12_MIN_BORDER_COLOR_COMPONENT = 0 ' (0.0f)
Public Const D3D12_MIN_DEPTH = 0 '	(0.0f)
Public Const D3D12_MIP_LOD_BIAS_MAX As Single = (15.99)
Public Const D3D12_MIP_LOD_BIAS_MIN As Single = (-16.0)
Public Const D3D12_MULTISAMPLE_ANTIALIAS_LINE_WIDTH As Single = (1.4)
Public Const D3D12_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0 ' (0.0f)
Public Const D3D12_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT As Single = (0.5)
Public Const D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM As Single = (0.25)
Public Const D3D12_SPEC_VERSION As Single = (1.16)
Public Const D3D12_SRGB_GAMMA As Single = (2.2)
Public Const D3D12_SRGB_TO_FLOAT_DENOMINATOR_1 As Single = (12.92)
Public Const D3D12_SRGB_TO_FLOAT_DENOMINATOR_2 As Single = (1.055)
Public Const D3D12_SRGB_TO_FLOAT_EXPONENT As Single = (2.4)
Public Const D3D12_SRGB_TO_FLOAT_OFFSET As Single = (0.055)
Public Const D3D12_SRGB_TO_FLOAT_THRESHOLD As Single = (0.04045)
Public Const D3D12_SRGB_TO_FLOAT_TOLERANCE_IN_ULP As Single = (0.5)

Public Enum D2D1_ALPHA_MODE
    D2D1_ALPHA_MODE_UNKNOWN = 0
    D2D1_ALPHA_MODE_PREMULTIPLIED = 1
    D2D1_ALPHA_MODE_STRAIGHT = 2
    D2D1_ALPHA_MODE_IGNORE = 3
    D2D1_ALPHA_MODE_FORCE_DWORD = -1
End Enum

Public Type D2D1_PIXEL_FORMAT
    Format As DXGI_FORMAT
    AlphaMode As D2D1_ALPHA_MODE
End Type

Public Type D2D_POINT_2U
    x As Long
    y As Long
End Type

Public Type D2D1_POINT_2U
    x As Long
    y As Long
End Type

Public Type D2D_POINT_2F
    x As Single
    y As Single
End Type

Public Type D2D1_POINT_2F
    x As Single
    y As Single
End Type

Public Type D2D_POINT_2L
    x As Long
    y As Long
End Type

Public Type D2D1_POINT_2L
    x As Long
    y As Long
End Type

Public Type D2D_VECTOR_3F
    x As Single
    y As Single
    z As Single
End Type

Public Type D2D1_VECTOR_3F
    x As Single
    y As Single
    z As Single
End Type

Public Type D2D_VECTOR_4F
    x As Single
    y As Single
    z As Single
    w As Single
End Type

Public Type D2D1_VECTOR_4F
    x As Single
    y As Single
    z As Single
    w As Single
End Type

Public Type D2D_RECT_F
    Left As Single
    Top As Single
    Right As Single
    Bottom As Single
End Type

Public Type D2D1_RECT_F
    Left As Single
    Top As Single
    Right As Single
    Bottom As Single
End Type

Public Type D2D_RECT_U
    Left As Long
    Top As Long
    Right As Long
    Bottom As Long
End Type

Public Type D2D1_RECT_U
    Left As Long
    Top As Long
    Right As Long
    Bottom As Long
End Type

Public Type D2D_RECT_L
    Left As Long
    Top As Long
    Right As Long
    Bottom As Long
End Type

Public Type D2D1_RECT_L
    Left As Long
    Top As Long
    Right As Long
    Bottom As Long
End Type

Public Type D2D_SIZE_F
    width As Single
    Height As Single
End Type

Public Type D2D1_SIZE_F
    width As Single
    Height As Single
End Type

Public Type D2D_SIZE_U
    width As Long
    Height As Long
End Type

Public Type D2D1_SIZE_U
    width As Long
    Height As Long
End Type

[Description("For the flat version, use D2D1_MATRIX_3X2_F. NOTE: Array dimensions are switched vs C++ to match the underlying memory layout.")]
Public Type D2D_MATRIX_3X2_F
    m(0 To 1, 0 To 2) As Single
End Type

[Description("For the 2D array version, use D2D_MATRIX_3X2_F")]
Public Type D2D1_MATRIX_3X2_F
    'union {
    ' m(0 To 1, 0 To 2) As Single
    ' struct {
    m_11 As Single
    m_12 As Single
    m_21 As Single
    m_22 As Single
    m_31 As Single
    m_32 As Single
    '} }
End Type

[Description("For the flat version, use D2D1_MATRIX_4X3_F.  NOTE: Array dimensions are switched vs C++ to match the underlying memory layout.")]
Public Type D2D_MATRIX_4X3_F
    m(0 To 2, 0 To 3) As Single
End Type

[Description("For the 2D array version, use D2D_MATRIX_4X3_F")]
Public Type D2D1_MATRIX_4X3_F
    m_11 As Single
    m_12 As Single
    m_13 As Single
    m_21 As Single
    m_22 As Single
    m_23 As Single
    m_31 As Single
    m_32 As Single
    m_33 As Single
    m_41 As Single
    m_42 As Single
    m_43 As Single
End Type

[Description("For the flat version, use D2D1_MATRIX_4X4_F.  NOTE: Array dimensions are switched vs C++ to match the underlying memory layout.")]
Public Type D2D_MATRIX_4X4_F
    m(0 To 3, 0 To 3) As Single
End Type

[Description("For the 2D array version, use D2D_MATRIX_4X4_F")]
Public Type D2D1_MATRIX_4X4_F
    m_11 As Single
    m_12 As Single
    m_13 As Single
    m_14 As Single
    m_21 As Single
    m_22 As Single
    m_23 As Single
    m_24 As Single
    m_31 As Single
    m_32 As Single
    m_33 As Single
    m_34 As Single
    m_41 As Single
    m_42 As Single
    m_43 As Single
    m_44 As Single
End Type

[Description("For the flat version, use D2D1_MATRIX_5X4_F.  NOTE: Array dimensions are switched vs C++ to match the underlying memory layout.")]
Public Type D2D_MATRIX_5X4_F
    m(0 To 3, 0 To 4) As Single
End Type

[Description("For the 2D array version, use D2D_MATRIX_5X4_F")]
Public Type D2D1_MATRIX_5X4_F
    m_11 As Single
    m_12 As Single
    m_13 As Single
    m_14 As Single
    m_21 As Single
    m_22 As Single
    m_23 As Single
    m_24 As Single
    m_31 As Single
    m_32 As Single
    m_33 As Single
    m_34 As Single
    m_41 As Single
    m_42 As Single
    m_43 As Single
    m_44 As Single
    m_51 As Single
    m_52 As Single
    m_53 As Single
    m_54 As Single
End Type

Public Type D2D1_COLOR_F
    r As Single
    g As Single
    b As Single
    a As Single
End Type

Public Type D2D1_TRIANGLE
    point1 As D2D1_POINT_2F
    point2 As D2D1_POINT_2F
    point3 As D2D1_POINT_2F
End Type

Public Enum D2D1_COMBINE_MODE
    D2D1_COMBINE_MODE_UNION = 0
    D2D1_COMBINE_MODE_INTERSECT = 1
    D2D1_COMBINE_MODE_XOR = 2
    D2D1_COMBINE_MODE_EXCLUDE = 3
    D2D1_COMBINE_MODE_FORCE_DWORD = -1
End Enum

Public Type D2D1_ROUNDED_RECT
    RECT As D2D1_RECT_F
    radiusX As Single
    radiusY As Single
End Type

Public Type D2D1_ELLIPSE
    POINT As D2D1_POINT_2F
    radiusX As Single
    radiusY As Single
End Type

Public Enum D2D1_FILL_MODE
    D2D1_FILL_MODE_ALTERNATE = 0
    D2D1_FILL_MODE_WINDING = 1
    D2D1_FILL_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_PATH_SEGMENT
    D2D1_PATH_SEGMENT_NONE = 0
    D2D1_PATH_SEGMENT_FORCE_UNSTROKED = 1
    D2D1_PATH_SEGMENT_FORCE_ROUND_LINE_JOIN = 2
    D2D1_PATH_SEGMENT_FORCE_DWORD = -1
End Enum

Public Enum D2D1_FIGURE_BEGIN
    D2D1_FIGURE_BEGIN_FILLED = 0
    D2D1_FIGURE_BEGIN_HOLLOW = 1
    D2D1_FIGURE_BEGIN_FORCE_DWORD = -1
End Enum

Public Type D2D1_BEZIER_SEGMENT
    point1 As D2D1_POINT_2F
    point2 As D2D1_POINT_2F
    point3 As D2D1_POINT_2F
End Type

Public Enum D2D1_FIGURE_END
    D2D1_FIGURE_END_OPEN = 0
    D2D1_FIGURE_END_CLOSED = 1
    D2D1_FIGURE_END_FORCE_DWORD = -1
End Enum

Public Type D2D1_QUADRATIC_BEZIER_SEGMENT
    point1 As D2D1_POINT_2F
    point2 As D2D1_POINT_2F
End Type

Public Type D2D_VECTOR_2F
    x As Single
    y As Single
End Type

Public Type D2D1_VECTOR_2F
    x As Single
    y As Single
End Type

Public Enum D2D1_SWEEP_DIRECTION
    D2D1_SWEEP_DIRECTION_COUNTER_CLOCKWISE = 0
    D2D1_SWEEP_DIRECTION_CLOCKWISE = 1
    D2D1_SWEEP_DIRECTION_FORCE_DWORD = -1
End Enum

Public Enum D2D1_ARC_SIZE
    D2D1_ARC_SIZE_SMALL = 0
    D2D1_ARC_SIZE_LARGE = 1
    D2D1_ARC_SIZE_FORCE_DWORD = -1
End Enum

Public Type D2D1_ARC_SEGMENT
    POINT As D2D1_POINT_2F
    SIZE As D2D1_SIZE_F
    rotationAngle As Single
    sweepDirection As D2D1_SWEEP_DIRECTION
    arcSize As D2D1_ARC_SIZE
End Type

Public Enum D2D1_COMPOSITE_MODE
    D2D1_COMPOSITE_MODE_SOURCE_OVER = 0
    D2D1_COMPOSITE_MODE_DESTINATION_OVER = 1
    D2D1_COMPOSITE_MODE_SOURCE_IN = 2
    D2D1_COMPOSITE_MODE_DESTINATION_IN = 3
    D2D1_COMPOSITE_MODE_SOURCE_OUT = 4
    D2D1_COMPOSITE_MODE_DESTINATION_OUT = 5
    D2D1_COMPOSITE_MODE_SOURCE_ATOP = 6
    D2D1_COMPOSITE_MODE_DESTINATION_ATOP = 7
    D2D1_COMPOSITE_MODE_XOR = 8
    D2D1_COMPOSITE_MODE_PLUS = 9
    D2D1_COMPOSITE_MODE_SOURCE_COPY = 10
    D2D1_COMPOSITE_MODE_BOUNDED_SOURCE_COPY = 11
    D2D1_COMPOSITE_MODE_MASK_INVERT = 12
    D2D1_COMPOSITE_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_CAP_STYLE
    D2D1_CAP_STYLE_FLAT = 0
    D2D1_CAP_STYLE_SQUARE = 1
    D2D1_CAP_STYLE_ROUND = 2
    D2D1_CAP_STYLE_TRIANGLE = 3
    D2D1_CAP_STYLE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_LINE_JOIN
    D2D1_LINE_JOIN_MITER = 0
    D2D1_LINE_JOIN_BEVEL = 1
    D2D1_LINE_JOIN_ROUND = 2
    D2D1_LINE_JOIN_MITER_OR_BEVEL = 3
    D2D1_LINE_JOIN_FORCE_DWORD = -1
End Enum

Public Enum D2D1_DASH_STYLE
    D2D1_DASH_STYLE_SOLID = 0
    D2D1_DASH_STYLE_DASH = 1
    D2D1_DASH_STYLE_DOT = 2
    D2D1_DASH_STYLE_DASH_DOT = 3
    D2D1_DASH_STYLE_DASH_DOT_DOT = 4
    D2D1_DASH_STYLE_CUSTOM = 5
    D2D1_DASH_STYLE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_GEOMETRY_RELATION
    D2D1_GEOMETRY_RELATION_UNKNOWN = 0
    D2D1_GEOMETRY_RELATION_DISJOINT = 1
    D2D1_GEOMETRY_RELATION_IS_CONTAINED = 2
    D2D1_GEOMETRY_RELATION_CONTAINS = 3
    D2D1_GEOMETRY_RELATION_OVERLAP = 4
    D2D1_GEOMETRY_RELATION_FORCE_DWORD = -1
End Enum

Public Enum D2D1_GEOMETRY_SIMPLIFICATION_OPTION
    D2D1_GEOMETRY_SIMPLIFICATION_OPTION_CUBICS_AND_LINES = 0
    D2D1_GEOMETRY_SIMPLIFICATION_OPTION_LINES = 1
    D2D1_GEOMETRY_SIMPLIFICATION_OPTION_FORCE_DWORD = -1
End Enum

Public Type D2D1_STROKE_STYLE_PROPERTIES
    startCap As D2D1_CAP_STYLE
    endCap As D2D1_CAP_STYLE
    dashCap As D2D1_CAP_STYLE
    lineJoin As D2D1_LINE_JOIN
    miterLimit As Single
    dashStyle As D2D1_DASH_STYLE
    dashOffset As Single
End Type

Public Enum D2D1_ANTIALIAS_MODE
    D2D1_ANTIALIAS_MODE_PER_PRIMITIVE = 0
    D2D1_ANTIALIAS_MODE_ALIASED = 1
    D2D1_ANTIALIAS_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_TEXT_ANTIALIAS_MODE
    D2D1_TEXT_ANTIALIAS_MODE_DEFAULT = 0
    D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE = 1
    D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE = 2
    D2D1_TEXT_ANTIALIAS_MODE_ALIASED = 3
    D2D1_TEXT_ANTIALIAS_MODE_FORCE_DWORD = -1
End Enum

Public Type D2D1_DRAWING_STATE_DESCRIPTION
    antialiasMode As D2D1_ANTIALIAS_MODE
    textAntialiasMode As D2D1_TEXT_ANTIALIAS_MODE
    tag1 As LongLong
    tag2 As LongLong
    transform As D2D1_MATRIX_3X2_F
End Type

Public Enum D2D1_RENDER_TARGET_TYPE
    D2D1_RENDER_TARGET_TYPE_DEFAULT = 0
    D2D1_RENDER_TARGET_TYPE_SOFTWARE = 1
    D2D1_RENDER_TARGET_TYPE_HARDWARE = 2
    D2D1_RENDER_TARGET_TYPE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_RENDER_TARGET_USAGE
    D2D1_RENDER_TARGET_USAGE_NONE = 0
    D2D1_RENDER_TARGET_USAGE_FORCE_BITMAP_REMOTING = 1
    D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE = 2
    D2D1_RENDER_TARGET_USAGE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_FEATURE_LEVEL
    D2D1_FEATURE_LEVEL_DEFAULT = 0
    D2D1_FEATURE_LEVEL_9 = 37120
    D2D1_FEATURE_LEVEL_10 = 40960
    D2D1_FEATURE_LEVEL_FORCE_DWORD = -1
End Enum

Public Type D2D1_RENDER_TARGET_PROPERTIES
    type As D2D1_RENDER_TARGET_TYPE
    PixelFormat As D2D1_PIXEL_FORMAT
    DpiX As Single
    DpiY As Single
    Usage As D2D1_RENDER_TARGET_USAGE
    minLevel As D2D1_FEATURE_LEVEL
End Type

Public Type D2D1_BITMAP_PROPERTIES
    PixelFormat As D2D1_PIXEL_FORMAT
    DpiX As Single
    DpiY As Single
End Type

Public Type D2D1_GRADIENT_STOP
    position As Single
    color As D2D1_COLOR_F
End Type

Public Enum D2D1_INTERPOLATION_MODE_DEFINITION
    D2D1_INTERPOLATION_MODE_DEFINITION_NEAREST_NEIGHBOR = 0
    D2D1_INTERPOLATION_MODE_DEFINITION_LINEAR = 1
    D2D1_INTERPOLATION_MODE_DEFINITION_CUBIC = 2
    D2D1_INTERPOLATION_MODE_DEFINITION_MULTI_SAMPLE_LINEAR = 3
    D2D1_INTERPOLATION_MODE_DEFINITION_ANISOTROPIC = 4
    D2D1_INTERPOLATION_MODE_DEFINITION_HIGH_QUALITY_CUBIC = 5
    D2D1_INTERPOLATION_MODE_DEFINITION_FANT = 6
    D2D1_INTERPOLATION_MODE_DEFINITION_MIPMAP_LINEAR = 7
End Enum

Public Enum D2D1_GAMMA
    D2D1_GAMMA_2_2 = 0
    D2D1_GAMMA_1_0 = 1
    D2D1_GAMMA_FORCE_DWORD = -1
End Enum

Public Enum D2D1_EXTEND_MODE
    D2D1_EXTEND_MODE_CLAMP = 0
    D2D1_EXTEND_MODE_WRAP = 1
    D2D1_EXTEND_MODE_MIRROR = 2
    D2D1_EXTEND_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_BITMAP_INTERPOLATION_MODE
    D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0
    D2D1_BITMAP_INTERPOLATION_MODE_LINEAR = 1
    D2D1_BITMAP_INTERPOLATION_MODE_FORCE_DWORD = -1
End Enum

Public Type D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES
    startPoint As D2D1_POINT_2F
    endPoint As D2D1_POINT_2F
End Type

Public Type D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES
    center As D2D1_POINT_2F
    gradientOriginOffset As D2D1_POINT_2F
    radiusX As Single
    radiusY As Single
End Type

Public Enum D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS
    D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_NONE = 0
    D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE = 1
    D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_FORCE_DWORD = -1
End Enum

Public Enum D2D1_OPACITY_MASK_CONTENT
    D2D1_OPACITY_MASK_CONTENT_GRAPHICS = 0
    D2D1_OPACITY_MASK_CONTENT_TEXT_NATURAL = 1
    D2D1_OPACITY_MASK_CONTENT_TEXT_GDI_COMPATIBLE = 2
    D2D1_OPACITY_MASK_CONTENT_FORCE_DWORD = -1
End Enum

Public Enum D2D1_DRAW_TEXT_OPTIONS
    D2D1_DRAW_TEXT_OPTIONS_NO_SNAP = 1
    D2D1_DRAW_TEXT_OPTIONS_CLIP = 2
    D2D1_DRAW_TEXT_OPTIONS_ENABLE_COLOR_FONT = 4
    D2D1_DRAW_TEXT_OPTIONS_DISABLE_COLOR_BITMAP_SNAPPING = 8
    D2D1_DRAW_TEXT_OPTIONS_NONE = 0
    D2D1_DRAW_TEXT_OPTIONS_FORCE_DWORD = -1
End Enum

Public Enum D2D1_LAYER_OPTIONS
    D2D1_LAYER_OPTIONS_NONE = 0
    D2D1_LAYER_OPTIONS_INITIALIZE_FOR_CLEARTYPE = 1
    D2D1_LAYER_OPTIONS_FORCE_DWORD = -1
End Enum

Public Type D2D1_LAYER_PARAMETERS
    contentBounds As D2D1_RECT_F
    geometricMask As ID2D1Geometry
    maskAntialiasMode As D2D1_ANTIALIAS_MODE
    maskTransform As D2D1_MATRIX_3X2_F
    opacity As Single
    opacityBrush As ID2D1Brush
    layerOptions As D2D1_LAYER_OPTIONS
End Type

Public Enum D2D1_PRESENT_OPTIONS
    D2D1_PRESENT_OPTIONS_NONE = 0
    D2D1_PRESENT_OPTIONS_RETAIN_CONTENTS = 1
    D2D1_PRESENT_OPTIONS_IMMEDIATELY = 2
    D2D1_PRESENT_OPTIONS_FORCE_DWORD = -1
End Enum

Public Type D2D1_HWND_RENDER_TARGET_PROPERTIES
    hwnd As LongPtr
    pixelSize As D2D1_SIZE_U
    presentOptions As D2D1_PRESENT_OPTIONS
End Type

Public Enum D2D1_WINDOW_STATE
    D2D1_WINDOW_STATE_NONE = 0
    D2D1_WINDOW_STATE_OCCLUDED = 1
    D2D1_WINDOW_STATE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_DC_INITIALIZE_MODE
    D2D1_DC_INITIALIZE_MODE_COPY = 0
    D2D1_DC_INITIALIZE_MODE_CLEAR = 1
    D2D1_DC_INITIALIZE_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_DEBUG_LEVEL
    D2D1_DEBUG_LEVEL_NONE = 0
    D2D1_DEBUG_LEVEL_ERROR = 1
    D2D1_DEBUG_LEVEL_WARNING = 2
    D2D1_DEBUG_LEVEL_INFORMATION = 3
    D2D1_DEBUG_LEVEL_FORCE_DWORD = -1
End Enum

Public Enum D2D1_FACTORY_TYPE
    D2D1_FACTORY_TYPE_SINGLE_THREADED = 0
    D2D1_FACTORY_TYPE_MULTI_THREADED = 1
    D2D1_FACTORY_TYPE_FORCE_DWORD = -1
End Enum

Public Type D2D1_BRUSH_PROPERTIES
    opacity As Single
    transform As D2D1_MATRIX_3X2_F
End Type

Public Type D2D1_BITMAP_BRUSH_PROPERTIES
    extendModeX As D2D1_EXTEND_MODE
    extendModeY As D2D1_EXTEND_MODE
    InterpolationMode As D2D1_BITMAP_INTERPOLATION_MODE
End Type

Public Type D2D1_FACTORY_OPTIONS
    debugLevel As D2D1_DEBUG_LEVEL
End Type


Public Enum D2D1_PROPERTY_TYPE
    D2D1_PROPERTY_TYPE_UNKNOWN = 0
    D2D1_PROPERTY_TYPE_STRING = 1
    D2D1_PROPERTY_TYPE_BOOL = 2
    D2D1_PROPERTY_TYPE_UINT32 = 3
    D2D1_PROPERTY_TYPE_INT32 = 4
    D2D1_PROPERTY_TYPE_FLOAT = 5
    D2D1_PROPERTY_TYPE_VECTOR2 = 6
    D2D1_PROPERTY_TYPE_VECTOR3 = 7
    D2D1_PROPERTY_TYPE_VECTOR4 = 8
    D2D1_PROPERTY_TYPE_BLOB = 9
    D2D1_PROPERTY_TYPE_IUNKNOWN = 10
    D2D1_PROPERTY_TYPE_ENUM = 11
    D2D1_PROPERTY_TYPE_ARRAY = 12
    D2D1_PROPERTY_TYPE_CLSID = 13
    D2D1_PROPERTY_TYPE_MATRIX_3X2 = 14
    D2D1_PROPERTY_TYPE_MATRIX_4X3 = 15
    D2D1_PROPERTY_TYPE_MATRIX_4X4 = 16
    D2D1_PROPERTY_TYPE_MATRIX_5X4 = 17
    D2D1_PROPERTY_TYPE_COLOR_CONTEXT = 18
    D2D1_PROPERTY_TYPE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_PROPERTY
    D2D1_PROPERTY_CLSID = -2147483648
    D2D1_PROPERTY_DISPLAYNAME = -2147483647
    D2D1_PROPERTY_AUTHOR = -2147483646
    D2D1_PROPERTY_CATEGORY = -2147483645
    D2D1_PROPERTY_DESCRIPTION = -2147483644
    D2D1_PROPERTY_INPUTS = -2147483643
    D2D1_PROPERTY_CACHED = -2147483642
    D2D1_PROPERTY_PRECISION = -2147483641
    D2D1_PROPERTY_MIN_INPUTS = -2147483640
    D2D1_PROPERTY_MAX_INPUTS = -2147483639
    D2D1_PROPERTY_FORCE_DWORD = -1
End Enum

Public Enum D2D1_SUBPROPERTY
    D2D1_SUBPROPERTY_DISPLAYNAME = -2147483648
    D2D1_SUBPROPERTY_ISREADONLY = -2147483647
    D2D1_SUBPROPERTY_MIN = -2147483646
    D2D1_SUBPROPERTY_MAX = -2147483645
    D2D1_SUBPROPERTY_DEFAULT = -2147483644
    D2D1_SUBPROPERTY_FIELDS = -2147483643
    D2D1_SUBPROPERTY_INDEX = -2147483642
    D2D1_SUBPROPERTY_FORCE_DWORD = -1
End Enum

Public Enum D2D1_BITMAP_OPTIONS
    D2D1_BITMAP_OPTIONS_NONE = 0
    D2D1_BITMAP_OPTIONS_TARGET = 1
    D2D1_BITMAP_OPTIONS_CANNOT_DRAW = 2
    D2D1_BITMAP_OPTIONS_CPU_READ = 4
    D2D1_BITMAP_OPTIONS_GDI_COMPATIBLE = 8
    D2D1_BITMAP_OPTIONS_FORCE_DWORD = -1
End Enum

Public Enum D2D1_BUFFER_PRECISION
    D2D1_BUFFER_PRECISION_UNKNOWN = 0
    D2D1_BUFFER_PRECISION_8BPC_UNORM = 1
    D2D1_BUFFER_PRECISION_8BPC_UNORM_SRGB = 2
    D2D1_BUFFER_PRECISION_16BPC_UNORM = 3
    D2D1_BUFFER_PRECISION_16BPC_FLOAT = 4
    D2D1_BUFFER_PRECISION_32BPC_FLOAT = 5
    D2D1_BUFFER_PRECISION_FORCE_DWORD = -1
End Enum

Public Enum D2D1_MAP_OPTIONS
    D2D1_MAP_OPTIONS_NONE = 0
    D2D1_MAP_OPTIONS_READ = 1
    D2D1_MAP_OPTIONS_WRITE = 2
    D2D1_MAP_OPTIONS_DISCARD = 4
    D2D1_MAP_OPTIONS_FORCE_DWORD = -1
End Enum

Public Enum D2D1_INTERPOLATION_MODE
    D2D1_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0
    D2D1_INTERPOLATION_MODE_LINEAR = 1
    D2D1_INTERPOLATION_MODE_CUBIC = 2
    D2D1_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_INTERPOLATION_MODE_ANISOTROPIC = 4
    D2D1_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC = 5
    D2D1_INTERPOLATION_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_UNIT_MODE
    D2D1_UNIT_MODE_DIPS = 0
    D2D1_UNIT_MODE_PIXELS = 1
    D2D1_UNIT_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_COLOR_SPACE
    D2D1_COLOR_SPACE_CUSTOM = 0
    D2D1_COLOR_SPACE_SRGB = 1
    D2D1_COLOR_SPACE_SCRGB = 2
    D2D1_COLOR_SPACE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_DEVICE_CONTEXT_OPTIONS
    D2D1_DEVICE_CONTEXT_OPTIONS_NONE = 0
    D2D1_DEVICE_CONTEXT_OPTIONS_ENABLE_MULTITHREADED_OPTIMIZATIONS = 1
    D2D1_DEVICE_CONTEXT_OPTIONS_FORCE_DWORD = -1
End Enum

Public Enum D2D1_STROKE_TRANSFORM_TYPE
    D2D1_STROKE_TRANSFORM_TYPE_NORMAL = 0
    D2D1_STROKE_TRANSFORM_TYPE_FIXED = 1
    D2D1_STROKE_TRANSFORM_TYPE_HAIRLINE = 2
    D2D1_STROKE_TRANSFORM_TYPE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_PRIMITIVE_BLEND
    D2D1_PRIMITIVE_BLEND_SOURCE_OVER = 0
    D2D1_PRIMITIVE_BLEND_COPY = 1
    D2D1_PRIMITIVE_BLEND_MIN = 2
    D2D1_PRIMITIVE_BLEND_ADD = 3
    D2D1_PRIMITIVE_BLEND_FORCE_DWORD = -1
End Enum

Public Enum D2D1_THREADING_MODE
    D2D1_THREADING_MODE_SINGLE_THREADED = 0
    D2D1_THREADING_MODE_MULTI_THREADED = 1
    D2D1_THREADING_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_COLOR_INTERPOLATION_MODE
    D2D1_COLOR_INTERPOLATION_MODE_STRAIGHT = 0
    D2D1_COLOR_INTERPOLATION_MODE_PREMULTIPLIED = 1
    D2D1_COLOR_INTERPOLATION_MODE_FORCE_DWORD = -1
End Enum

Public Type D2D1_BITMAP_PROPERTIES1
    PixelFormat As D2D1_PIXEL_FORMAT
    DpiX As Single
    DpiY As Single
    bitmapOptions As D2D1_BITMAP_OPTIONS
    colorContext As ID2D1ColorContext
End Type

Public Type D2D1_MAPPED_RECT
    pitch As Long
    bits As LongPtr
End Type

Public Type D2D1_RENDERING_CONTROLS
    bufferPrecision As D2D1_BUFFER_PRECISION
    tileSize As D2D1_SIZE_U
End Type

Public Type D2D1_EFFECT_INPUT_DESCRIPTION
    effect As ID2D1Effect
    inputIndex As Long
    inputRectangle As D2D1_RECT_F
End Type

Public Type D2D1_POINT_DESCRIPTION
    POINT As D2D1_POINT_2F
    unitTangentVector As D2D1_POINT_2F
    endSegment As Long
    EndFigure As Long
    lengthToEndSegment As Single
End Type

Public Type D2D1_IMAGE_BRUSH_PROPERTIES
    sourceRectangle As D2D1_RECT_F
    extendModeX As D2D1_EXTEND_MODE
    extendModeY As D2D1_EXTEND_MODE
    InterpolationMode As D2D1_INTERPOLATION_MODE
End Type

Public Type D2D1_BITMAP_BRUSH_PROPERTIES1
    extendModeX As D2D1_EXTEND_MODE
    extendModeY As D2D1_EXTEND_MODE
    InterpolationMode As D2D1_INTERPOLATION_MODE
End Type

Public Type D2D1_STROKE_STYLE_PROPERTIES1
    startCap As D2D1_CAP_STYLE
    endCap As D2D1_CAP_STYLE
    dashCap As D2D1_CAP_STYLE
    lineJoin As D2D1_LINE_JOIN
    miterLimit As Single
    dashStyle As D2D1_DASH_STYLE
    dashOffset As Single
    transformType As D2D1_STROKE_TRANSFORM_TYPE
End Type

Public Enum D2D1_LAYER_OPTIONS1
    D2D1_LAYER_OPTIONS1_NONE = 0
    D2D1_LAYER_OPTIONS1_INITIALIZE_FROM_BACKGROUND = 1
    D2D1_LAYER_OPTIONS1_IGNORE_ALPHA = 2
    D2D1_LAYER_OPTIONS1_FORCE_DWORD = -1
End Enum

Public Type D2D1_LAYER_PARAMETERS1
    contentBounds As D2D1_RECT_F
    geometricMask As ID2D1Geometry
    maskAntialiasMode As D2D1_ANTIALIAS_MODE
    maskTransform As D2D1_MATRIX_3X2_F
    opacity As Single
    opacityBrush As ID2D1Brush
    layerOptions As D2D1_LAYER_OPTIONS1
End Type

Public Enum D2D1_PRINT_FONT_SUBSET_MODE
    D2D1_PRINT_FONT_SUBSET_MODE_DEFAULT = 0
    D2D1_PRINT_FONT_SUBSET_MODE_EACHPAGE = 1
    D2D1_PRINT_FONT_SUBSET_MODE_NONE = 2
    D2D1_PRINT_FONT_SUBSET_MODE_FORCE_DWORD = -1
End Enum

Public Type D2D1_DRAWING_STATE_DESCRIPTION1
    antialiasMode As D2D1_ANTIALIAS_MODE
    textAntialiasMode As D2D1_TEXT_ANTIALIAS_MODE
    tag1 As LongLong
    tag2 As LongLong
    transform As D2D1_MATRIX_3X2_F
    primitiveBlend As D2D1_PRIMITIVE_BLEND
    unitMode As D2D1_UNIT_MODE
End Type

Public Type D2D1_PRINT_CONTROL_PROPERTIES
    fontSubset As D2D1_PRINT_FONT_SUBSET_MODE
    rasterDPI As Single
    ColorSpace As D2D1_COLOR_SPACE
End Type

Public Type D2D1_CREATION_PROPERTIES
    threadingMode As D2D1_THREADING_MODE
    debugLevel As D2D1_DEBUG_LEVEL
    Options As D2D1_DEVICE_CONTEXT_OPTIONS
End Type

Public Delegate Function D2D1_PROPERTY_SET_FUNCTION (ByVal effect As IUnknown, ByVal data As LongPtr, ByVal dataSize As Long) As Long
Public Delegate Function D2D1_PROPERTY_GET_FUNCTION (ByVal effect As IUnknown, ByVal data As LongPtr, ByVal dataSize As Long, actualSize As Long) As Long

Public Type D2D1_PROPERTY_BINDING
    propertyName As LongPtr
    ' #If WDL_NO_DELEGATES Then
    setFunction As LongPtr
    getFunction As LongPtr
    ' #Else
    ' setFunction As D2D1_PROPERTY_SET_FUNCTION
    ' getFunction As D2D1_PROPERTY_GET_FUNCTION
    ' #End If
End Type


Public Enum D2D1_RENDERING_PRIORITY
    D2D1_RENDERING_PRIORITY_NORMAL = 0
    D2D1_RENDERING_PRIORITY_LOW = 1
    D2D1_RENDERING_PRIORITY_FORCE_DWORD = -1
End Enum


Public Enum D2D1_INK_NIB_SHAPE
    D2D1_INK_NIB_SHAPE_ROUND = 0
    D2D1_INK_NIB_SHAPE_SQUARE = 1
    D2D1_INK_NIB_SHAPE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_ORIENTATION
    D2D1_ORIENTATION_DEFAULT = 1
    D2D1_ORIENTATION_FLIP_HORIZONTAL = 2
    D2D1_ORIENTATION_ROTATE_CLOCKWISE180 = 3
    D2D1_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL = 4
    D2D1_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL = 5
    D2D1_ORIENTATION_ROTATE_CLOCKWISE270 = 6
    D2D1_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL = 7
    D2D1_ORIENTATION_ROTATE_CLOCKWISE90 = 8
    D2D1_ORIENTATION_FORCE_DWORD = -1
End Enum

Public Enum D2D1_IMAGE_SOURCE_LOADING_OPTIONS
    D2D1_IMAGE_SOURCE_LOADING_OPTIONS_NONE = 0
    D2D1_IMAGE_SOURCE_LOADING_OPTIONS_RELEASE_SOURCE = 1
    D2D1_IMAGE_SOURCE_LOADING_OPTIONS_CACHE_ON_DEMAND = 2
    D2D1_IMAGE_SOURCE_LOADING_OPTIONS_FORCE_DWORD = -1
End Enum

Public Enum D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS
    D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_NONE = 0
    D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_LOW_QUALITY_PRIMARY_CONVERSION = 1
    D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_FORCE_DWORD = -1
End Enum

Public Enum D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS
    D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_NONE = 0
    D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_DISABLE_DPI_SCALE = 1
    D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_FORCE_DWORD = -1
End Enum

Public Type D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES
    orientation As D2D1_ORIENTATION
    scaleX As Single
    scaleY As Single
    InterpolationMode As D2D1_INTERPOLATION_MODE
    Options As D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS
End Type

Public Type D2D1_INK_POINT
    x As Single
    y As Single
    radius As Single
End Type

Public Type D2D1_INK_BEZIER_SEGMENT
    point1 As D2D1_INK_POINT
    point2 As D2D1_INK_POINT
    point3 As D2D1_INK_POINT
End Type

Public Type D2D1_INK_STYLE_PROPERTIES
    nibShape As D2D1_INK_NIB_SHAPE
    nibTransform As D2D1_MATRIX_3X2_F
End Type

Public Enum D2D1_PATCH_EDGE_MODE
    D2D1_PATCH_EDGE_MODE_ALIASED = 0
    D2D1_PATCH_EDGE_MODE_ANTIALIASED = 1
    D2D1_PATCH_EDGE_MODE_ALIASED_INFLATED = 2
    D2D1_PATCH_EDGE_MODE_FORCE_DWORD = -1
End Enum

Public Type D2D1_GRADIENT_MESH_PATCH
    point00 As D2D1_POINT_2F
    point01 As D2D1_POINT_2F
    point02 As D2D1_POINT_2F
    point03 As D2D1_POINT_2F
    point10 As D2D1_POINT_2F
    point11 As D2D1_POINT_2F
    point12 As D2D1_POINT_2F
    point13 As D2D1_POINT_2F
    point20 As D2D1_POINT_2F
    point21 As D2D1_POINT_2F
    point22 As D2D1_POINT_2F
    point23 As D2D1_POINT_2F
    point30 As D2D1_POINT_2F
    point31 As D2D1_POINT_2F
    point32 As D2D1_POINT_2F
    point33 As D2D1_POINT_2F
    color00 As D2D1_COLOR_F
    color03 As D2D1_COLOR_F
    color30 As D2D1_COLOR_F
    color33 As D2D1_COLOR_F
    topEdgeMode As D2D1_PATCH_EDGE_MODE
    leftEdgeMode As D2D1_PATCH_EDGE_MODE
    bottomEdgeMode As D2D1_PATCH_EDGE_MODE
    rightEdgeMode As D2D1_PATCH_EDGE_MODE
End Type

Public Enum D2D1_SPRITE_OPTIONS
    D2D1_SPRITE_OPTIONS_NONE = 0
    D2D1_SPRITE_OPTIONS_CLAMP_TO_SOURCE_RECTANGLE = 1
    D2D1_SPRITE_OPTIONS_FORCE_DWORD = -1
End Enum

Public Enum D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION
    D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_DEFAULT = 0
    D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_DISABLE = 1
    D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_FORCE_DWORD = -1
End Enum

Public Enum D2D1_GAMMA1
    ' / <summary>
    ' / Colors are manipulated in 2.2 gamma color space.
    ' / </summary>
    D2D1_GAMMA1_G22 = D2D1_GAMMA_2_2
    ' / <summary>
    ' / Colors are manipulated in 1.0 gamma color space.
    ' / </summary>
    D2D1_GAMMA1_G10 = D2D1_GAMMA_1_0
    ' / <summary>
    ' / Colors are manipulated in ST.2084 PQ gamma color space.
    ' / </summary>
    D2D1_GAMMA1_G2084 = 2
    D2D1_GAMMA1_FORCE_DWORD = &Hffffffff
End Enum

Public Type D2D1_SIMPLE_COLOR_PROFILE
    '/ <summary>
    '/ The XY coordinates of the red primary in CIEXYZ space.
    '/ </summary>
    redPrimary As D2D1_POINT_2F
    '/ <summary>
    '/ The XY coordinates of the green primary in CIEXYZ space.
    '/ </summary>
    greenPrimary As D2D1_POINT_2F
    '/ <summary>
    '/ The XY coordinates of the blue primary in CIEXYZ space.
    '/ </summary>
    bluePrimary As D2D1_POINT_2F
    '/ <summary>
    '/ The X/Z tristimulus values for the whitepoint, normalized for relative
    '/ luminance.
    '/ </summary>
    whitePointXZ As D2D1_POINT_2F
    '/ <summary>
    '/ The gamma encoding to use for this color space.
    '/ </summary>
    gamma As D2D1_GAMMA1
End Type

Public Enum D2D1_COLOR_CONTEXT_TYPE
    D2D1_COLOR_CONTEXT_TYPE_ICC = 0
    D2D1_COLOR_CONTEXT_TYPE_SIMPLE = 1
    D2D1_COLOR_CONTEXT_TYPE_DXGI = 2
    D2D1_COLOR_CONTEXT_TYPE_FORCE_DWORD = &Hffffffff
End Enum


Public Enum D2D1_SVG_PAINT_TYPE
    ' / <summary>
    ' / The fill or stroke is not rendered.
    ' / </summary>
    D2D1_SVG_PAINT_TYPE_NONE = 0
    ' / <summary>
    ' / A solid color is rendered.
    ' / </summary>
    D2D1_SVG_PAINT_TYPE_COLOR = 1
    ' / <summary>
    ' / The current color is rendered.
    ' / </summary>
    D2D1_SVG_PAINT_TYPE_CURRENT_COLOR = 2
    ' / <summary>
    ' / A paint server, defined by another element in the SVG document, is used.
    ' / </summary>
    D2D1_SVG_PAINT_TYPE_URI = 3
    ' / <summary>
    ' / A paint server, defined by another element in the SVG document, is used. If the
    ' / paint server reference is invalid, fall back to D2D1_SVG_PAINT_TYPE_NONE.
    ' / </summary>
    D2D1_SVG_PAINT_TYPE_URI_NONE = 4
    ' / <summary>
    ' / A paint server, defined by another element in the SVG document, is used. If the
    ' / paint server reference is invalid, fall back to D2D1_SVG_PAINT_TYPE_COLOR.
    ' / </summary>
    D2D1_SVG_PAINT_TYPE_URI_COLOR = 5
    ' / <summary>
    ' / A paint server, defined by another element in the SVG document, is used. If the
    ' / paint server reference is invalid, fall back to
    ' / D2D1_SVG_PAINT_TYPE_CURRENT_COLOR.
    ' / </summary>
    D2D1_SVG_PAINT_TYPE_URI_CURRENT_COLOR = 6
    D2D1_SVG_PAINT_TYPE_FORCE_DWORD = &Hffffffff
End Enum

Public Enum D2D1_SVG_LENGTH_UNITS
    ' / <summary>
    ' / The length is unitless.
    ' / </summary>
    D2D1_SVG_LENGTH_UNITS_NUMBER = 0
    ' / <summary>
    ' / The length is a percentage value.
    ' / </summary>
    D2D1_SVG_LENGTH_UNITS_PERCENTAGE = 1
    D2D1_SVG_LENGTH_UNITS_FORCE_DWORD = &Hffffffff
End Enum

Public Enum D2D1_SVG_DISPLAY
    ' / <summary>
    ' / The element uses the default display behavior.
    ' / </summary>
    D2D1_SVG_DISPLAY_INLINE = 0
    ' / <summary>
    ' / The element and all children are not rendered directly.
    ' / </summary>
    D2D1_SVG_DISPLAY_NONE = 1
    D2D1_SVG_DISPLAY_FORCE_DWORD = &Hffffffff
End Enum

Public Enum D2D1_SVG_VISIBILITY
    ' / <summary>
    ' / The element is visible.
    ' / </summary>
    D2D1_SVG_VISIBILITY_VISIBLE = 0
    ' / <summary>
    ' / The element is invisible.
    ' / </summary>
    D2D1_SVG_VISIBILITY_HIDDEN = 1
    D2D1_SVG_VISIBILITY_FORCE_DWORD = &Hffffffff
End Enum

Public Enum D2D1_SVG_OVERFLOW
    ' / <summary>
    ' / The element is not clipped to its viewport.
    ' / </summary>
    D2D1_SVG_OVERFLOW_VISIBLE = 0
    ' / <summary>
    ' / The element is clipped to its viewport.
    ' / </summary>
    D2D1_SVG_OVERFLOW_HIDDEN = 1
    D2D1_SVG_OVERFLOW_FORCE_DWORD = &Hffffffff
End Enum

Public Enum D2D1_SVG_LINE_CAP
    ' / <summary>
    ' / The property is set to SVG's 'butt' value.
    ' / </summary>
    D2D1_SVG_LINE_CAP_BUTT = D2D1_CAP_STYLE_FLAT
    ' / <summary>
    ' / The property is set to SVG's 'square' value.
    ' / </summary>
    D2D1_SVG_LINE_CAP_SQUARE = D2D1_CAP_STYLE_SQUARE
    ' / <summary>
    ' / The property is set to SVG's 'round' value.
    ' / </summary>
    D2D1_SVG_LINE_CAP_ROUND = D2D1_CAP_STYLE_ROUND
    D2D1_SVG_LINE_CAP_FORCE_DWORD = &Hffffffff
End Enum

Public Enum D2D1_SVG_LINE_JOIN
    ' / <summary>
    ' / The property is set to SVG's 'bevel' value.
    ' / </summary>
    D2D1_SVG_LINE_JOIN_BEVEL = D2D1_LINE_JOIN_BEVEL
    ' / <summary>
    ' / The property is set to SVG's 'miter' value. Note that this is equivalent to
    ' / D2D1_LINE_JOIN_MITER_OR_BEVEL, not D2D1_LINE_JOIN_MITER.
    ' / </summary>
    D2D1_SVG_LINE_JOIN_MITER = D2D1_LINE_JOIN_MITER_OR_BEVEL
    ' / <summary>
    ' / \ The property is set to SVG's 'round' value.
    ' / </summary>
    D2D1_SVG_LINE_JOIN_ROUND = D2D1_LINE_JOIN_ROUND
    D2D1_SVG_LINE_JOIN_FORCE_DWORD = &Hffffffff
End Enum

Public Enum D2D1_SVG_ASPECT_ALIGN
    ' / <summary>
    ' / The alignment is set to SVG's 'none' value.
    ' / </summary>
    D2D1_SVG_ASPECT_ALIGN_NONE = 0
    ' / <summary>
    ' / The alignment is set to SVG's 'xMinYMin' value.
    ' / </summary>
    D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MIN = 1
    ' / <summary>
    ' / The alignment is set to SVG's 'xMidYMin' value.
    ' / </summary>
    D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MIN = 2
    ' / <summary>
    ' / The alignment is set to SVG's 'xMaxYMin' value.
    ' / </summary>
    D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MIN = 3
    ' / <summary>
    ' / The alignment is set to SVG's 'xMinYMid' value.
    ' / </summary>
    D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MID = 4
    ' / <summary>
    ' / The alignment is set to SVG's 'xMidYMid' value.
    ' / </summary>
    D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MID = 5
    ' / <summary>
    ' / The alignment is set to SVG's 'xMaxYMid' value.
    ' / </summary>
    D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MID = 6
    ' / <summary>
    ' / The alignment is set to SVG's 'xMinYMax' value.
    ' / </summary>
    D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MAX = 7
    ' / <summary>
    ' / The alignment is set to SVG's 'xMidYMax' value.
    ' / </summary>
    D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MAX = 8
    ' / <summary>
    ' / The alignment is set to SVG's 'xMaxYMax' value.
    ' / </summary>
    D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MAX = 9
    D2D1_SVG_ASPECT_ALIGN_FORCE_DWORD = &Hffffffff
End Enum

Public Enum D2D1_SVG_ASPECT_SCALING
    ' / <summary>
    ' / Scale the viewBox up as much as possible such that the entire viewBox is visible
    ' / within the viewport.
    ' / </summary>
    D2D1_SVG_ASPECT_SCALING_MEET = 0
    ' / <summary>
    ' / Scale the viewBox down as much as possible such that the entire viewport is
    ' / covered by the viewBox.
    ' / </summary>
    D2D1_SVG_ASPECT_SCALING_SLICE = 1
    D2D1_SVG_ASPECT_SCALING_FORCE_DWORD = &Hffffffff
End Enum

Public Enum D2D1_SVG_PATH_COMMAND
    ' / <summary>
    ' / Closes the current subpath. Uses no segment data.
    ' / </summary>
    D2D1_SVG_PATH_COMMAND_CLOSE_PATH = 0
    ' / <summary>
    ' / Starts a new subpath at the coordinate (x y). Uses 2 floats of segment data.
    ' / </summary>
    D2D1_SVG_PATH_COMMAND_MOVE_ABSOLUTE = 1
    ' / <summary>
    ' / Starts a new subpath at the coordinate (x y). Uses 2 floats of segment data.
    ' / </summary>
    D2D1_SVG_PATH_COMMAND_MOVE_RELATIVE = 2
    ' / <summary>
    ' / Draws a line to the coordinate (x y). Uses 2 floats of segment data.
    ' / </summary>
    D2D1_SVG_PATH_COMMAND_LINE_ABSOLUTE = 3
    ' / <summary>
    ' / Draws a line to the coordinate (x y). Uses 2 floats of segment data.
    ' / </summary>
    D2D1_SVG_PATH_COMMAND_LINE_RELATIVE = 4
    ' / <summary>
    ' / Draws a cubic Bezier curve (x1 y1 x2 y2 x y). The curve ends at (x, y) and is
    ' / defined by the two control points (x1, y1) and (x2, y2). Uses 6 floats of
    ' / segment data.
    ' / </summary>
    D2D1_SVG_PATH_COMMAND_CUBIC_ABSOLUTE = 5
    ' / <summary>
    ' / Draws a cubic Bezier curve (x1 y1 x2 y2 x y). The curve ends at (x, y) and is
    ' / defined by the two control points (x1, y1) and (x2, y2). Uses 6 floats of
    ' / segment data.
    ' / </summary>
    D2D1_SVG_PATH_COMMAND_CUBIC_RELATIVE = 6
    ' / <summary>
    ' / Draws a quadratic Bezier curve (x1 y1 x y). The curve ends at (x, y) and is
    ' / defined by the control point (x1 y1). Uses 4 floats of segment data.
    ' / </summary>
    D2D1_SVG_PATH_COMMAND_QUADRADIC_ABSOLUTE = 7
    ' / <summary>
    ' / Draws a quadratic Bezier curve (x1 y1 x y). The curve ends at (x, y) and is
    ' / defined by the control point (x1 y1). Uses 4 floats of segment data.
    ' / </summary>
    D2D1_SVG_PATH_COMMAND_QUADRADIC_RELATIVE = 8
    ' / <summary>
    ' / Draws an elliptical arc (rx ry x-axis-rotation large-arc-flag sweep-flag x y).
    ' / The curve ends at (x, y) and is defined by the arc parameters. The two flags are
    ' / considered set if their values are non-zero. Uses 7 floats of segment data.
    ' / </summary>
    D2D1_SVG_PATH_COMMAND_ARC_ABSOLUTE = 9
    ' / <summary>
    ' / Draws an elliptical arc (rx ry x-axis-rotation large-arc-flag sweep-flag x y).
    ' / The curve ends at (x, y) and is defined by the arc parameters. The two flags are
    ' / considered set if their values are non-zero. Uses 7 floats of segment data.
    ' / </summary>
    D2D1_SVG_PATH_COMMAND_ARC_RELATIVE = 10
    ' / <summary>
    ' / Draws a horizontal line to the coordinate (x). Uses 1 float of segment data.
    ' / </summary>
    D2D1_SVG_PATH_COMMAND_HORIZONTAL_ABSOLUTE = 11
    ' / <summary>
    ' / Draws a horizontal line to the coordinate (x). Uses 1 float of segment data.
    ' / </summary>
    D2D1_SVG_PATH_COMMAND_HORIZONTAL_RELATIVE = 12
    ' / <summary>
    ' / Draws a vertical line to the coordinate (y). Uses 1 float of segment data.
    ' / </summary>
    D2D1_SVG_PATH_COMMAND_VERTICAL_ABSOLUTE = 13
    ' / <summary>
    ' / Draws a vertical line to the coordinate (y). Uses 1 float of segment data.
    ' / </summary>
    D2D1_SVG_PATH_COMMAND_VERTICAL_RELATIVE = 14
    ' / <summary>
    ' / Draws a smooth cubic Bezier curve (x2 y2 x y). The curve ends at (x, y) and is
    ' / defined by the control point (x2, y2). Uses 4 floats of segment data.
    ' / </summary>
    D2D1_SVG_PATH_COMMAND_CUBIC_SMOOTH_ABSOLUTE = 15
    ' / <summary>
    ' / Draws a smooth cubic Bezier curve (x2 y2 x y). The curve ends at (x, y) and is
    ' / defined by the control point (x2, y2). Uses 4 floats of segment data.
    ' / </summary>
    D2D1_SVG_PATH_COMMAND_CUBIC_SMOOTH_RELATIVE = 16
    ' / <summary>
    ' / Draws a smooth quadratic Bezier curve ending at (x, y). Uses 2 floats of segment
    ' / data.
    ' / </summary>
    D2D1_SVG_PATH_COMMAND_QUADRADIC_SMOOTH_ABSOLUTE = 17
    ' / <summary>
    ' / Draws a smooth quadratic Bezier curve ending at (x, y). Uses 2 floats of segment
    ' / data.
    ' / </summary>
    D2D1_SVG_PATH_COMMAND_QUADRADIC_SMOOTH_RELATIVE = 18
    D2D1_SVG_PATH_COMMAND_FORCE_DWORD = &Hffffffff
End Enum

Public Enum D2D1_SVG_UNIT_TYPE
    ' / <summary>
    ' / The property is set to SVG's 'userSpaceOnUse' value.
    ' / </summary>
    D2D1_SVG_UNIT_TYPE_USER_SPACE_ON_USE = 0
    ' / <summary>
    ' / The property is set to SVG's 'objectBoundingBox' value.
    ' / </summary>
    D2D1_SVG_UNIT_TYPE_OBJECT_BOUNDING_BOX = 1
    D2D1_SVG_UNIT_TYPE_FORCE_DWORD = &Hffffffff
End Enum

Public Enum D2D1_SVG_ATTRIBUTE_STRING_TYPE
    ' / <summary>
    ' / The attribute is a string in the same form as it would appear in the SVG XML.
    ' /
    ' / Note that when getting values of this type, the value returned may not exactly
    ' / match the value that was set. Instead, the output value is a normalized version
    ' / of the value. For example, an input color of 'red' may be output as '#FF0000'.
    ' / </summary>
    D2D1_SVG_ATTRIBUTE_STRING_TYPE_SVG = 0
    ' / <summary>
    ' / The attribute is an element ID.
    ' / </summary>
    D2D1_SVG_ATTRIBUTE_STRING_TYPE_ID = 1
    D2D1_SVG_ATTRIBUTE_STRING_TYPE_FORCE_DWORD = &Hffffffff
End Enum

Public Enum D2D1_SVG_ATTRIBUTE_POD_TYPE
    ' / <summary>
    ' / The attribute is a FLOAT.
    ' / </summary>
    D2D1_SVG_ATTRIBUTE_POD_TYPE_FLOAT = 0
    ' / <summary>
    ' / The attribute is a D2D1_COLOR_F.
    ' / </summary>
    D2D1_SVG_ATTRIBUTE_POD_TYPE_COLOR = 1
    ' / <summary>
    ' / The attribute is a D2D1_FILL_MODE.
    ' / </summary>
    D2D1_SVG_ATTRIBUTE_POD_TYPE_FILL_MODE = 2
    ' / <summary>
    ' / The attribute is a D2D1_SVG_DISPLAY.
    ' / </summary>
    D2D1_SVG_ATTRIBUTE_POD_TYPE_DISPLAY = 3
    ' / <summary>
    ' / The attribute is a D2D1_SVG_OVERFLOW.
    ' / </summary>
    D2D1_SVG_ATTRIBUTE_POD_TYPE_OVERFLOW = 4
    ' / <summary>
    ' / The attribute is a D2D1_SVG_LINE_CAP.
    ' / </summary>
    D2D1_SVG_ATTRIBUTE_POD_TYPE_LINE_CAP = 5
    ' / <summary>
    ' / The attribute is a D2D1_SVG_LINE_JOIN.
    ' / </summary>
    D2D1_SVG_ATTRIBUTE_POD_TYPE_LINE_JOIN = 6
    ' / <summary>
    ' / The attribute is a D2D1_SVG_VISIBILITY.
    ' / </summary>
    D2D1_SVG_ATTRIBUTE_POD_TYPE_VISIBILITY = 7
    ' / <summary>
    ' / The attribute is a D2D1_MATRIX_3X2_F.
    ' / </summary>
    D2D1_SVG_ATTRIBUTE_POD_TYPE_MATRIX = 8
    ' / <summary>
    ' / The attribute is a D2D1_SVG_UNIT_TYPE.
    ' / </summary>
    D2D1_SVG_ATTRIBUTE_POD_TYPE_UNIT_TYPE = 9
    ' / <summary>
    ' / The attribute is a D2D1_EXTEND_MODE.
    ' / </summary>
    D2D1_SVG_ATTRIBUTE_POD_TYPE_EXTEND_MODE = 10
    ' / <summary>
    ' / The attribute is a D2D1_SVG_PRESERVE_ASPECT_RATIO.
    ' / </summary>
    D2D1_SVG_ATTRIBUTE_POD_TYPE_PRESERVE_ASPECT_RATIO = 11
    ' / <summary>
    ' / The attribute is a D2D1_SVG_VIEWBOX.
    ' / </summary>
    D2D1_SVG_ATTRIBUTE_POD_TYPE_VIEWBOX = 12
    ' / <summary>
    ' / The attribute is a D2D1_SVG_LENGTH.
    ' / </summary>
    D2D1_SVG_ATTRIBUTE_POD_TYPE_LENGTH = 13
    D2D1_SVG_ATTRIBUTE_POD_TYPE_FORCE_DWORD = &Hffffffff
End Enum

Public Type D2D1_SVG_LENGTH
    value As Single
    units As D2D1_SVG_LENGTH_UNITS
End Type

Public Type D2D1_SVG_PRESERVE_ASPECT_RATIO
    '/ <summary>
    '/ Sets the 'defer' portion of the preserveAspectRatio settings. This field only
    '/ has an effect on an 'image' element that references another SVG document. As
    '/ this is not currently supported, the field has no impact on rendering.
    '/ </summary>
    defer As BOOL
    '/ <summary>
    '/ Sets the align portion of the preserveAspectRatio settings.
    '/ </summary>
    align As D2D1_SVG_ASPECT_ALIGN
    '/ <summary>
    '/ Sets the meetOrSlice portion of the preserveAspectRatio settings.
    '/ </summary>
    meetOrSlice As D2D1_SVG_ASPECT_SCALING
End Type

Public Type D2D1_SVG_VIEWBOX
    x As Single
    y As Single
    width As Single
    height As Single
End Type











Public Enum D2D1_CHANGE_TYPE
    D2D1_CHANGE_TYPE_NONE = 0
    D2D1_CHANGE_TYPE_PROPERTIES = 1
    D2D1_CHANGE_TYPE_CONTEXT = 2
    D2D1_CHANGE_TYPE_GRAPH = 3
    D2D1_CHANGE_TYPE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_PIXEL_OPTIONS
    D2D1_PIXEL_OPTIONS_NONE = 0
    D2D1_PIXEL_OPTIONS_TRIVIAL_SAMPLING = 1
    D2D1_PIXEL_OPTIONS_FORCE_DWORD = -1
End Enum

Public Enum D2D1_VERTEX_OPTIONS
    D2D1_VERTEX_OPTIONS_NONE = 0
    D2D1_VERTEX_OPTIONS_DO_NOT_CLEAR = 1
    D2D1_VERTEX_OPTIONS_USE_DEPTH_BUFFER = 2
    D2D1_VERTEX_OPTIONS_ASSUME_NO_OVERLAP = 4
    D2D1_VERTEX_OPTIONS_FORCE_DWORD = -1
End Enum

Public Enum D2D1_VERTEX_USAGE
    D2D1_VERTEX_USAGE_STATIC = 0
    D2D1_VERTEX_USAGE_DYNAMIC = 1
    D2D1_VERTEX_USAGE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_BLEND_OPERATION
    D2D1_BLEND_OPERATION_ADD = 1
    D2D1_BLEND_OPERATION_SUBTRACT = 2
    D2D1_BLEND_OPERATION_REV_SUBTRACT = 3
    D2D1_BLEND_OPERATION_MIN = 4
    D2D1_BLEND_OPERATION_MAX = 5
    D2D1_BLEND_OPERATION_FORCE_DWORD = -1
End Enum

Public Enum D2D1_BLEND
    D2D1_BLEND_ZERO = 1
    D2D1_BLEND_ONE = 2
    D2D1_BLEND_SRC_COLOR = 3
    D2D1_BLEND_INV_SRC_COLOR = 4
    D2D1_BLEND_SRC_ALPHA = 5
    D2D1_BLEND_INV_SRC_ALPHA = 6
    D2D1_BLEND_DEST_ALPHA = 7
    D2D1_BLEND_INV_DEST_ALPHA = 8
    D2D1_BLEND_DEST_COLOR = 9
    D2D1_BLEND_INV_DEST_COLOR = 10
    D2D1_BLEND_SRC_ALPHA_SAT = 11
    D2D1_BLEND_BLEND_FACTOR = 14
    D2D1_BLEND_INV_BLEND_FACTOR = 15
    D2D1_BLEND_FORCE_DWORD = -1
End Enum

Public Enum D2D1_CHANNEL_DEPTH
    D2D1_CHANNEL_DEPTH_DEFAULT = 0
    D2D1_CHANNEL_DEPTH_1 = 1
    D2D1_CHANNEL_DEPTH_4 = 4
    D2D1_CHANNEL_DEPTH_FORCE_DWORD = -1
End Enum

Public Enum D2D1_FILTER
    D2D1_FILTER_MIN_MAG_MIP_POINT = 0
    D2D1_FILTER_MIN_MAG_POINT_MIP_LINEAR = 1
    D2D1_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 4
    D2D1_FILTER_MIN_POINT_MAG_MIP_LINEAR = 5
    D2D1_FILTER_MIN_LINEAR_MAG_MIP_POINT = 16
    D2D1_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17
    D2D1_FILTER_MIN_MAG_LINEAR_MIP_POINT = 20
    D2D1_FILTER_MIN_MAG_MIP_LINEAR = 21
    D2D1_FILTER_ANISOTROPIC = 85
    D2D1_FILTER_FORCE_DWORD = -1
End Enum

Public Enum D2D1_FEATURE
    D2D1_FEATURE_DOUBLES = 0
    D2D1_FEATURE_D3D10_X_HARDWARE_OPTIONS = 1
    D2D1_FEATURE_FORCE_DWORD = -1
End Enum

Public Type D2D1_RESOURCE_TEXTURE_PROPERTIES
    extents As LongPtr
    dimensions As Long
    bufferPrecision As D2D1_BUFFER_PRECISION
    channelDepth As D2D1_CHANNEL_DEPTH
    Filter As D2D1_FILTER
    extendModes As LongPtr
End Type

Public Type D2D1_INPUT_ELEMENT_DESC
    semanticName As LongPtr
    semanticIndex As Long
    Format As DXGI_FORMAT
    inputSlot As Long
    alignedByteOffset As Long
End Type

Public Type D2D1_VERTEX_BUFFER_PROPERTIES
    inputCount As Long
    Usage As D2D1_VERTEX_USAGE
    data As LongPtr
    byteWidth As Long
End Type

Public Type D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES
    shaderBufferWithInputSignature As LongPtr
    shaderBufferSize As Long
    inputElements As LongPtr
    elementCount As Long
    stride As Long
End Type

Public Type D2D1_VERTEX_RANGE
    startVertex As Long
    vertexCount As Long
End Type

Public Type D2D1_BLEND_DESCRIPTION
    sourceBlend As D2D1_BLEND
    destinationBlend As D2D1_BLEND
    blendOperation As D2D1_BLEND_OPERATION
    sourceBlendAlpha As D2D1_BLEND
    destinationBlendAlpha As D2D1_BLEND
    blendOperationAlpha As D2D1_BLEND_OPERATION
    blendFactor(0 To 3) As Single
End Type

Public Type D2D1_INPUT_DESCRIPTION
    Filter As D2D1_FILTER
    levelOfDetailCount As Long
End Type

Public Type D2D1_FEATURE_DATA_DOUBLES
    doublePrecisionFloatShaderOps As Long
End Type

Public Type D2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS
    computeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x As Long
End Type


Public Enum D2D1_BORDER_MODE
    D2D1_BORDER_MODE_SOFT = 0
    D2D1_BORDER_MODE_HARD = 1
    D2D1_BORDER_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_CHANNEL_SELECTOR
    D2D1_CHANNEL_SELECTOR_R = 0
    D2D1_CHANNEL_SELECTOR_G = 1
    D2D1_CHANNEL_SELECTOR_B = 2
    D2D1_CHANNEL_SELECTOR_A = 3
    D2D1_CHANNEL_SELECTOR_FORCE_DWORD = -1
End Enum

Public Enum D2D1_BITMAPSOURCE_ORIENTATION
    D2D1_BITMAPSOURCE_ORIENTATION_DEFAULT = 1
    D2D1_BITMAPSOURCE_ORIENTATION_FLIP_HORIZONTAL = 2
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180 = 3
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL = 4
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL = 5
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90 = 6
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL = 7
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270 = 8
    D2D1_BITMAPSOURCE_ORIENTATION_FORCE_DWORD = -1
End Enum

Public Enum D2D1_GAUSSIANBLUR_PROP
    D2D1_GAUSSIANBLUR_PROP_STANDARD_DEVIATION = 0
    D2D1_GAUSSIANBLUR_PROP_OPTIMIZATION = 1
    D2D1_GAUSSIANBLUR_PROP_BORDER_MODE = 2
    D2D1_GAUSSIANBLUR_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_GAUSSIANBLUR_OPTIMIZATION
    D2D1_GAUSSIANBLUR_OPTIMIZATION_SPEED = 0
    D2D1_GAUSSIANBLUR_OPTIMIZATION_BALANCED = 1
    D2D1_GAUSSIANBLUR_OPTIMIZATION_QUALITY = 2
    D2D1_GAUSSIANBLUR_OPTIMIZATION_FORCE_DWORD = -1
End Enum

Public Enum D2D1_DIRECTIONALBLUR_PROP
    D2D1_DIRECTIONALBLUR_PROP_STANDARD_DEVIATION = 0
    D2D1_DIRECTIONALBLUR_PROP_ANGLE = 1
    D2D1_DIRECTIONALBLUR_PROP_OPTIMIZATION = 2
    D2D1_DIRECTIONALBLUR_PROP_BORDER_MODE = 3
    D2D1_DIRECTIONALBLUR_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_DIRECTIONALBLUR_OPTIMIZATION
    D2D1_DIRECTIONALBLUR_OPTIMIZATION_SPEED = 0
    D2D1_DIRECTIONALBLUR_OPTIMIZATION_BALANCED = 1
    D2D1_DIRECTIONALBLUR_OPTIMIZATION_QUALITY = 2
    D2D1_DIRECTIONALBLUR_OPTIMIZATION_FORCE_DWORD = -1
End Enum

Public Enum D2D1_SHADOW_PROP
    D2D1_SHADOW_PROP_BLUR_STANDARD_DEVIATION = 0
    D2D1_SHADOW_PROP_COLOR = 1
    D2D1_SHADOW_PROP_OPTIMIZATION = 2
    D2D1_SHADOW_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_SHADOW_OPTIMIZATION
    D2D1_SHADOW_OPTIMIZATION_SPEED = 0
    D2D1_SHADOW_OPTIMIZATION_BALANCED = 1
    D2D1_SHADOW_OPTIMIZATION_QUALITY = 2
    D2D1_SHADOW_OPTIMIZATION_FORCE_DWORD = -1
End Enum

Public Enum D2D1_BLEND_PROP
    D2D1_BLEND_PROP_MODE = 0
    D2D1_BLEND_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_BLEND_MODE
    D2D1_BLEND_MODE_MULTIPLY = 0
    D2D1_BLEND_MODE_SCREEN = 1
    D2D1_BLEND_MODE_DARKEN = 2
    D2D1_BLEND_MODE_LIGHTEN = 3
    D2D1_BLEND_MODE_DISSOLVE = 4
    D2D1_BLEND_MODE_COLOR_BURN = 5
    D2D1_BLEND_MODE_LINEAR_BURN = 6
    D2D1_BLEND_MODE_DARKER_COLOR = 7
    D2D1_BLEND_MODE_LIGHTER_COLOR = 8
    D2D1_BLEND_MODE_COLOR_DODGE = 9
    D2D1_BLEND_MODE_LINEAR_DODGE = 10
    D2D1_BLEND_MODE_OVERLAY = 11
    D2D1_BLEND_MODE_SOFT_LIGHT = 12
    D2D1_BLEND_MODE_HARD_LIGHT = 13
    D2D1_BLEND_MODE_VIVID_LIGHT = 14
    D2D1_BLEND_MODE_LINEAR_LIGHT = 15
    D2D1_BLEND_MODE_PIN_LIGHT = 16
    D2D1_BLEND_MODE_HARD_MIX = 17
    D2D1_BLEND_MODE_DIFFERENCE = 18
    D2D1_BLEND_MODE_EXCLUSION = 19
    D2D1_BLEND_MODE_HUE = 20
    D2D1_BLEND_MODE_SATURATION = 21
    D2D1_BLEND_MODE_COLOR = 22
    D2D1_BLEND_MODE_LUMINOSITY = 23
    D2D1_BLEND_MODE_SUBTRACT = 24
    D2D1_BLEND_MODE_DIVISION = 25
    D2D1_BLEND_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_SATURATION_PROP
    D2D1_SATURATION_PROP_SATURATION = 0
    D2D1_SATURATION_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_HUEROTATION_PROP
    D2D1_HUEROTATION_PROP_ANGLE = 0
    D2D1_HUEROTATION_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_COLORMATRIX_PROP
    D2D1_COLORMATRIX_PROP_COLOR_MATRIX = 0
    D2D1_COLORMATRIX_PROP_ALPHA_MODE = 1
    D2D1_COLORMATRIX_PROP_CLAMP_OUTPUT = 2
    D2D1_COLORMATRIX_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_COLORMATRIX_ALPHA_MODE
    D2D1_COLORMATRIX_ALPHA_MODE_PREMULTIPLIED = 1
    D2D1_COLORMATRIX_ALPHA_MODE_STRAIGHT = 2
    D2D1_COLORMATRIX_ALPHA_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_BITMAPSOURCE_PROP
    D2D1_BITMAPSOURCE_PROP_WIC_BITMAP_SOURCE = 0
    D2D1_BITMAPSOURCE_PROP_SCALE = 1
    D2D1_BITMAPSOURCE_PROP_INTERPOLATION_MODE = 2
    D2D1_BITMAPSOURCE_PROP_ENABLE_DPI_CORRECTION = 3
    D2D1_BITMAPSOURCE_PROP_ALPHA_MODE = 4
    D2D1_BITMAPSOURCE_PROP_ORIENTATION = 5
    D2D1_BITMAPSOURCE_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_BITMAPSOURCE_INTERPOLATION_MODE
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_LINEAR = 1
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_CUBIC = 2
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_FANT = 6
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_MIPMAP_LINEAR = 7
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_BITMAPSOURCE_ALPHA_MODE
    D2D1_BITMAPSOURCE_ALPHA_MODE_PREMULTIPLIED = 1
    D2D1_BITMAPSOURCE_ALPHA_MODE_STRAIGHT = 2
    D2D1_BITMAPSOURCE_ALPHA_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_COMPOSITE_PROP
    D2D1_COMPOSITE_PROP_MODE = 0
    D2D1_COMPOSITE_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_3DTRANSFORM_PROP
    D2D1_3DTRANSFORM_PROP_INTERPOLATION_MODE = 0
    D2D1_3DTRANSFORM_PROP_BORDER_MODE = 1
    D2D1_3DTRANSFORM_PROP_TRANSFORM_MATRIX = 2
    D2D1_3DTRANSFORM_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_3DTRANSFORM_INTERPOLATION_MODE
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_LINEAR = 1
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_CUBIC = 2
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_ANISOTROPIC = 4
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_3DPERSPECTIVETRANSFORM_PROP
    D2D1_3DPERSPECTIVETRANSFORM_PROP_INTERPOLATION_MODE = 0
    D2D1_3DPERSPECTIVETRANSFORM_PROP_BORDER_MODE = 1
    D2D1_3DPERSPECTIVETRANSFORM_PROP_DEPTH = 2
    D2D1_3DPERSPECTIVETRANSFORM_PROP_PERSPECTIVE_ORIGIN = 3
    D2D1_3DPERSPECTIVETRANSFORM_PROP_LOCAL_OFFSET = 4
    D2D1_3DPERSPECTIVETRANSFORM_PROP_GLOBAL_OFFSET = 5
    D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION_ORIGIN = 6
    D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION = 7
    D2D1_3DPERSPECTIVETRANSFORM_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_LINEAR = 1
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_CUBIC = 2
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC = 4
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_2DAFFINETRANSFORM_PROP
    D2D1_2DAFFINETRANSFORM_PROP_INTERPOLATION_MODE = 0
    D2D1_2DAFFINETRANSFORM_PROP_BORDER_MODE = 1
    D2D1_2DAFFINETRANSFORM_PROP_TRANSFORM_MATRIX = 2
    D2D1_2DAFFINETRANSFORM_PROP_SHARPNESS = 3
    D2D1_2DAFFINETRANSFORM_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE
    D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0
    D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_LINEAR = 1
    D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_CUBIC = 2
    D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC = 4
    D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC = 5
    D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_DPICOMPENSATION_PROP
    D2D1_DPICOMPENSATION_PROP_INTERPOLATION_MODE = 0
    D2D1_DPICOMPENSATION_PROP_BORDER_MODE = 1
    D2D1_DPICOMPENSATION_PROP_INPUT_DPI = 2
    D2D1_DPICOMPENSATION_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_DPICOMPENSATION_INTERPOLATION_MODE
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_LINEAR = 1
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_CUBIC = 2
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_ANISOTROPIC = 4
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC = 5
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_SCALE_PROP
    D2D1_SCALE_PROP_SCALE = 0
    D2D1_SCALE_PROP_CENTER_POINT = 1
    D2D1_SCALE_PROP_INTERPOLATION_MODE = 2
    D2D1_SCALE_PROP_BORDER_MODE = 3
    D2D1_SCALE_PROP_SHARPNESS = 4
    D2D1_SCALE_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_SCALE_INTERPOLATION_MODE
    D2D1_SCALE_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0
    D2D1_SCALE_INTERPOLATION_MODE_LINEAR = 1
    D2D1_SCALE_INTERPOLATION_MODE_CUBIC = 2
    D2D1_SCALE_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_SCALE_INTERPOLATION_MODE_ANISOTROPIC = 4
    D2D1_SCALE_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC = 5
    D2D1_SCALE_INTERPOLATION_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_TURBULENCE_PROP
    D2D1_TURBULENCE_PROP_OFFSET = 0
    D2D1_TURBULENCE_PROP_SIZE = 1
    D2D1_TURBULENCE_PROP_BASE_FREQUENCY = 2
    D2D1_TURBULENCE_PROP_NUM_OCTAVES = 3
    D2D1_TURBULENCE_PROP_SEED = 4
    D2D1_TURBULENCE_PROP_NOISE = 5
    D2D1_TURBULENCE_PROP_STITCHABLE = 6
    D2D1_TURBULENCE_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_TURBULENCE_NOISE
    D2D1_TURBULENCE_NOISE_FRACTAL_SUM = 0
    D2D1_TURBULENCE_NOISE_TURBULENCE = 1
    D2D1_TURBULENCE_NOISE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_DISPLACEMENTMAP_PROP
    D2D1_DISPLACEMENTMAP_PROP_SCALE = 0
    D2D1_DISPLACEMENTMAP_PROP_X_CHANNEL_SELECT = 1
    D2D1_DISPLACEMENTMAP_PROP_Y_CHANNEL_SELECT = 2
    D2D1_DISPLACEMENTMAP_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_COLORMANAGEMENT_PROP
    D2D1_COLORMANAGEMENT_PROP_SOURCE_COLOR_CONTEXT = 0
    D2D1_COLORMANAGEMENT_PROP_SOURCE_RENDERING_INTENT = 1
    D2D1_COLORMANAGEMENT_PROP_DESTINATION_COLOR_CONTEXT = 2
    D2D1_COLORMANAGEMENT_PROP_DESTINATION_RENDERING_INTENT = 3
    D2D1_COLORMANAGEMENT_PROP_ALPHA_MODE = 4
    D2D1_COLORMANAGEMENT_PROP_QUALITY = 5
    D2D1_COLORMANAGEMENT_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_COLORMANAGEMENT_ALPHA_MODE
    D2D1_COLORMANAGEMENT_ALPHA_MODE_PREMULTIPLIED = 1
    D2D1_COLORMANAGEMENT_ALPHA_MODE_STRAIGHT = 2
    D2D1_COLORMANAGEMENT_ALPHA_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_COLORMANAGEMENT_QUALITY
    D2D1_COLORMANAGEMENT_QUALITY_PROOF = 0
    D2D1_COLORMANAGEMENT_QUALITY_NORMAL = 1
    D2D1_COLORMANAGEMENT_QUALITY_BEST = 2
    D2D1_COLORMANAGEMENT_QUALITY_FORCE_DWORD = -1
End Enum

Public Enum D2D1_COLORMANAGEMENT_RENDERING_INTENT
    D2D1_COLORMANAGEMENT_RENDERING_INTENT_PERCEPTUAL = 0
    D2D1_COLORMANAGEMENT_RENDERING_INTENT_RELATIVE_COLORIMETRIC = 1
    D2D1_COLORMANAGEMENT_RENDERING_INTENT_SATURATION = 2
    D2D1_COLORMANAGEMENT_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC = 3
    D2D1_COLORMANAGEMENT_RENDERING_INTENT_FORCE_DWORD = -1
End Enum

Public Enum D2D1_HISTOGRAM_PROP
    D2D1_HISTOGRAM_PROP_NUM_BINS = 0
    D2D1_HISTOGRAM_PROP_CHANNEL_SELECT = 1
    D2D1_HISTOGRAM_PROP_HISTOGRAM_OUTPUT = 2
    D2D1_HISTOGRAM_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_POINTSPECULAR_PROP
    D2D1_POINTSPECULAR_PROP_LIGHT_POSITION = 0
    D2D1_POINTSPECULAR_PROP_SPECULAR_EXPONENT = 1
    D2D1_POINTSPECULAR_PROP_SPECULAR_CONSTANT = 2
    D2D1_POINTSPECULAR_PROP_SURFACE_SCALE = 3
    D2D1_POINTSPECULAR_PROP_COLOR = 4
    D2D1_POINTSPECULAR_PROP_KERNEL_UNIT_LENGTH = 5
    D2D1_POINTSPECULAR_PROP_SCALE_MODE = 6
    D2D1_POINTSPECULAR_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_POINTSPECULAR_SCALE_MODE
    D2D1_POINTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR = 0
    D2D1_POINTSPECULAR_SCALE_MODE_LINEAR = 1
    D2D1_POINTSPECULAR_SCALE_MODE_CUBIC = 2
    D2D1_POINTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_POINTSPECULAR_SCALE_MODE_ANISOTROPIC = 4
    D2D1_POINTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC = 5
    D2D1_POINTSPECULAR_SCALE_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_SPOTSPECULAR_PROP
    D2D1_SPOTSPECULAR_PROP_LIGHT_POSITION = 0
    D2D1_SPOTSPECULAR_PROP_POINTS_AT = 1
    D2D1_SPOTSPECULAR_PROP_FOCUS = 2
    D2D1_SPOTSPECULAR_PROP_LIMITING_CONE_ANGLE = 3
    D2D1_SPOTSPECULAR_PROP_SPECULAR_EXPONENT = 4
    D2D1_SPOTSPECULAR_PROP_SPECULAR_CONSTANT = 5
    D2D1_SPOTSPECULAR_PROP_SURFACE_SCALE = 6
    D2D1_SPOTSPECULAR_PROP_COLOR = 7
    D2D1_SPOTSPECULAR_PROP_KERNEL_UNIT_LENGTH = 8
    D2D1_SPOTSPECULAR_PROP_SCALE_MODE = 9
    D2D1_SPOTSPECULAR_PROP_FORCE_DWORD = -1
End Enum


Public Enum D2D1_SPOTSPECULAR_SCALE_MODE
    D2D1_SPOTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR = 0
    D2D1_SPOTSPECULAR_SCALE_MODE_LINEAR = 1
    D2D1_SPOTSPECULAR_SCALE_MODE_CUBIC = 2
    D2D1_SPOTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_SPOTSPECULAR_SCALE_MODE_ANISOTROPIC = 4
    D2D1_SPOTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC = 5
    D2D1_SPOTSPECULAR_SCALE_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_DISTANTSPECULAR_PROP
    D2D1_DISTANTSPECULAR_PROP_AZIMUTH = 0
    D2D1_DISTANTSPECULAR_PROP_ELEVATION = 1
    D2D1_DISTANTSPECULAR_PROP_SPECULAR_EXPONENT = 2
    D2D1_DISTANTSPECULAR_PROP_SPECULAR_CONSTANT = 3
    D2D1_DISTANTSPECULAR_PROP_SURFACE_SCALE = 4
    D2D1_DISTANTSPECULAR_PROP_COLOR = 5
    D2D1_DISTANTSPECULAR_PROP_KERNEL_UNIT_LENGTH = 6
    D2D1_DISTANTSPECULAR_PROP_SCALE_MODE = 7
    D2D1_DISTANTSPECULAR_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_DISTANTSPECULAR_SCALE_MODE
    D2D1_DISTANTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR = 0
    D2D1_DISTANTSPECULAR_SCALE_MODE_LINEAR = 1
    D2D1_DISTANTSPECULAR_SCALE_MODE_CUBIC = 2
    D2D1_DISTANTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_DISTANTSPECULAR_SCALE_MODE_ANISOTROPIC = 4
    D2D1_DISTANTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC = 5
    D2D1_DISTANTSPECULAR_SCALE_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_POINTDIFFUSE_PROP
    D2D1_POINTDIFFUSE_PROP_LIGHT_POSITION = 0
    D2D1_POINTDIFFUSE_PROP_DIFFUSE_CONSTANT = 1
    D2D1_POINTDIFFUSE_PROP_SURFACE_SCALE = 2
    D2D1_POINTDIFFUSE_PROP_COLOR = 3
    D2D1_POINTDIFFUSE_PROP_KERNEL_UNIT_LENGTH = 4
    D2D1_POINTDIFFUSE_PROP_SCALE_MODE = 5
    D2D1_POINTDIFFUSE_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_POINTDIFFUSE_SCALE_MODE
    D2D1_POINTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR = 0
    D2D1_POINTDIFFUSE_SCALE_MODE_LINEAR = 1
    D2D1_POINTDIFFUSE_SCALE_MODE_CUBIC = 2
    D2D1_POINTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_POINTDIFFUSE_SCALE_MODE_ANISOTROPIC = 4
    D2D1_POINTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC = 5
    D2D1_POINTDIFFUSE_SCALE_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_SPOTDIFFUSE_PROP
    D2D1_SPOTDIFFUSE_PROP_LIGHT_POSITION = 0
    D2D1_SPOTDIFFUSE_PROP_POINTS_AT = 1
    D2D1_SPOTDIFFUSE_PROP_FOCUS = 2
    D2D1_SPOTDIFFUSE_PROP_LIMITING_CONE_ANGLE = 3
    D2D1_SPOTDIFFUSE_PROP_DIFFUSE_CONSTANT = 4
    D2D1_SPOTDIFFUSE_PROP_SURFACE_SCALE = 5
    D2D1_SPOTDIFFUSE_PROP_COLOR = 6
    D2D1_SPOTDIFFUSE_PROP_KERNEL_UNIT_LENGTH = 7
    D2D1_SPOTDIFFUSE_PROP_SCALE_MODE = 8
    D2D1_SPOTDIFFUSE_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_SPOTDIFFUSE_SCALE_MODE
    D2D1_SPOTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR = 0
    D2D1_SPOTDIFFUSE_SCALE_MODE_LINEAR = 1
    D2D1_SPOTDIFFUSE_SCALE_MODE_CUBIC = 2
    D2D1_SPOTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_SPOTDIFFUSE_SCALE_MODE_ANISOTROPIC = 4
    D2D1_SPOTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC = 5
    D2D1_SPOTDIFFUSE_SCALE_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_DISTANTDIFFUSE_PROP
    D2D1_DISTANTDIFFUSE_PROP_AZIMUTH = 0
    D2D1_DISTANTDIFFUSE_PROP_ELEVATION = 1
    D2D1_DISTANTDIFFUSE_PROP_DIFFUSE_CONSTANT = 2
    D2D1_DISTANTDIFFUSE_PROP_SURFACE_SCALE = 3
    D2D1_DISTANTDIFFUSE_PROP_COLOR = 4
    D2D1_DISTANTDIFFUSE_PROP_KERNEL_UNIT_LENGTH = 5
    D2D1_DISTANTDIFFUSE_PROP_SCALE_MODE = 6
    D2D1_DISTANTDIFFUSE_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_DISTANTDIFFUSE_SCALE_MODE
    D2D1_DISTANTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR = 0
    D2D1_DISTANTDIFFUSE_SCALE_MODE_LINEAR = 1
    D2D1_DISTANTDIFFUSE_SCALE_MODE_CUBIC = 2
    D2D1_DISTANTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_DISTANTDIFFUSE_SCALE_MODE_ANISOTROPIC = 4
    D2D1_DISTANTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC = 5
    D2D1_DISTANTDIFFUSE_SCALE_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_FLOOD_PROP
    D2D1_FLOOD_PROP_COLOR = 0
    D2D1_FLOOD_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_LINEARTRANSFER_PROP
    D2D1_LINEARTRANSFER_PROP_RED_Y_INTERCEPT = 0
    D2D1_LINEARTRANSFER_PROP_RED_SLOPE = 1
    D2D1_LINEARTRANSFER_PROP_RED_DISABLE = 2
    D2D1_LINEARTRANSFER_PROP_GREEN_Y_INTERCEPT = 3
    D2D1_LINEARTRANSFER_PROP_GREEN_SLOPE = 4
    D2D1_LINEARTRANSFER_PROP_GREEN_DISABLE = 5
    D2D1_LINEARTRANSFER_PROP_BLUE_Y_INTERCEPT = 6
    D2D1_LINEARTRANSFER_PROP_BLUE_SLOPE = 7
    D2D1_LINEARTRANSFER_PROP_BLUE_DISABLE = 8
    D2D1_LINEARTRANSFER_PROP_ALPHA_Y_INTERCEPT = 9
    D2D1_LINEARTRANSFER_PROP_ALPHA_SLOPE = 10
    D2D1_LINEARTRANSFER_PROP_ALPHA_DISABLE = 11
    D2D1_LINEARTRANSFER_PROP_CLAMP_OUTPUT = 12
    D2D1_LINEARTRANSFER_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_GAMMATRANSFER_PROP
    D2D1_GAMMATRANSFER_PROP_RED_AMPLITUDE = 0
    D2D1_GAMMATRANSFER_PROP_RED_EXPONENT = 1
    D2D1_GAMMATRANSFER_PROP_RED_OFFSET = 2
    D2D1_GAMMATRANSFER_PROP_RED_DISABLE = 3
    D2D1_GAMMATRANSFER_PROP_GREEN_AMPLITUDE = 4
    D2D1_GAMMATRANSFER_PROP_GREEN_EXPONENT = 5
    D2D1_GAMMATRANSFER_PROP_GREEN_OFFSET = 6
    D2D1_GAMMATRANSFER_PROP_GREEN_DISABLE = 7
    D2D1_GAMMATRANSFER_PROP_BLUE_AMPLITUDE = 8
    D2D1_GAMMATRANSFER_PROP_BLUE_EXPONENT = 9
    D2D1_GAMMATRANSFER_PROP_BLUE_OFFSET = 10
    D2D1_GAMMATRANSFER_PROP_BLUE_DISABLE = 11
    D2D1_GAMMATRANSFER_PROP_ALPHA_AMPLITUDE = 12
    D2D1_GAMMATRANSFER_PROP_ALPHA_EXPONENT = 13
    D2D1_GAMMATRANSFER_PROP_ALPHA_OFFSET = 14
    D2D1_GAMMATRANSFER_PROP_ALPHA_DISABLE = 15
    D2D1_GAMMATRANSFER_PROP_CLAMP_OUTPUT = 16
    D2D1_GAMMATRANSFER_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_TABLETRANSFER_PROP
    D2D1_TABLETRANSFER_PROP_RED_TABLE = 0
    D2D1_TABLETRANSFER_PROP_RED_DISABLE = 1
    D2D1_TABLETRANSFER_PROP_GREEN_TABLE = 2
    D2D1_TABLETRANSFER_PROP_GREEN_DISABLE = 3
    D2D1_TABLETRANSFER_PROP_BLUE_TABLE = 4
    D2D1_TABLETRANSFER_PROP_BLUE_DISABLE = 5
    D2D1_TABLETRANSFER_PROP_ALPHA_TABLE = 6
    D2D1_TABLETRANSFER_PROP_ALPHA_DISABLE = 7
    D2D1_TABLETRANSFER_PROP_CLAMP_OUTPUT = 8
    D2D1_TABLETRANSFER_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_DISCRETETRANSFER_PROP
    D2D1_DISCRETETRANSFER_PROP_RED_TABLE = 0
    D2D1_DISCRETETRANSFER_PROP_RED_DISABLE = 1
    D2D1_DISCRETETRANSFER_PROP_GREEN_TABLE = 2
    D2D1_DISCRETETRANSFER_PROP_GREEN_DISABLE = 3
    D2D1_DISCRETETRANSFER_PROP_BLUE_TABLE = 4
    D2D1_DISCRETETRANSFER_PROP_BLUE_DISABLE = 5
    D2D1_DISCRETETRANSFER_PROP_ALPHA_TABLE = 6
    D2D1_DISCRETETRANSFER_PROP_ALPHA_DISABLE = 7
    D2D1_DISCRETETRANSFER_PROP_CLAMP_OUTPUT = 8
    D2D1_DISCRETETRANSFER_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_CONVOLVEMATRIX_PROP
    D2D1_CONVOLVEMATRIX_PROP_KERNEL_UNIT_LENGTH = 0
    D2D1_CONVOLVEMATRIX_PROP_SCALE_MODE = 1
    D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_X = 2
    D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_Y = 3
    D2D1_CONVOLVEMATRIX_PROP_KERNEL_MATRIX = 4
    D2D1_CONVOLVEMATRIX_PROP_DIVISOR = 5
    D2D1_CONVOLVEMATRIX_PROP_BIAS = 6
    D2D1_CONVOLVEMATRIX_PROP_KERNEL_OFFSET = 7
    D2D1_CONVOLVEMATRIX_PROP_PRESERVE_ALPHA = 8
    D2D1_CONVOLVEMATRIX_PROP_BORDER_MODE = 9
    D2D1_CONVOLVEMATRIX_PROP_CLAMP_OUTPUT = 10
    D2D1_CONVOLVEMATRIX_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_CONVOLVEMATRIX_SCALE_MODE
    D2D1_CONVOLVEMATRIX_SCALE_MODE_NEAREST_NEIGHBOR = 0
    D2D1_CONVOLVEMATRIX_SCALE_MODE_LINEAR = 1
    D2D1_CONVOLVEMATRIX_SCALE_MODE_CUBIC = 2
    D2D1_CONVOLVEMATRIX_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_CONVOLVEMATRIX_SCALE_MODE_ANISOTROPIC = 4
    D2D1_CONVOLVEMATRIX_SCALE_MODE_HIGH_QUALITY_CUBIC = 5
    D2D1_CONVOLVEMATRIX_SCALE_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_BRIGHTNESS_PROP
    D2D1_BRIGHTNESS_PROP_WHITE_POINT = 0
    D2D1_BRIGHTNESS_PROP_BLACK_POINT = 1
    D2D1_BRIGHTNESS_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_ARITHMETICCOMPOSITE_PROP
    D2D1_ARITHMETICCOMPOSITE_PROP_COEFFICIENTS = 0
    D2D1_ARITHMETICCOMPOSITE_PROP_CLAMP_OUTPUT = 1
    D2D1_ARITHMETICCOMPOSITE_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_CROP_PROP
    D2D1_CROP_PROP_RECT = 0
    D2D1_CROP_PROP_BORDER_MODE = 1
    D2D1_CROP_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_BORDER_PROP
    D2D1_BORDER_PROP_EDGE_MODE_X = 0
    D2D1_BORDER_PROP_EDGE_MODE_Y = 1
    D2D1_BORDER_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_BORDER_EDGE_MODE
    D2D1_BORDER_EDGE_MODE_CLAMP = 0
    D2D1_BORDER_EDGE_MODE_WRAP = 1
    D2D1_BORDER_EDGE_MODE_MIRROR = 2
    D2D1_BORDER_EDGE_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_MORPHOLOGY_PROP
    D2D1_MORPHOLOGY_PROP_MODE = 0
    D2D1_MORPHOLOGY_PROP_WIDTH = 1
    D2D1_MORPHOLOGY_PROP_HEIGHT = 2
    D2D1_MORPHOLOGY_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_MORPHOLOGY_MODE
    D2D1_MORPHOLOGY_MODE_ERODE = 0
    D2D1_MORPHOLOGY_MODE_DILATE = 1
    D2D1_MORPHOLOGY_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_TILE_PROP
    D2D1_TILE_PROP_RECT = 0
    D2D1_TILE_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_ATLAS_PROP
    D2D1_ATLAS_PROP_INPUT_RECT = 0
    D2D1_ATLAS_PROP_INPUT_PADDING_RECT = 1
    D2D1_ATLAS_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_OPACITYMETADATA_PROP
    D2D1_OPACITYMETADATA_PROP_INPUT_OPAQUE_RECT = 0
    D2D1_OPACITYMETADATA_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_YCBCR_PROP
    D2D1_YCBCR_PROP_CHROMA_SUBSAMPLING = 0
    D2D1_YCBCR_PROP_TRANSFORM_MATRIX = 1
    D2D1_YCBCR_PROP_INTERPOLATION_MODE = 2
    D2D1_YCBCR_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_YCBCR_CHROMA_SUBSAMPLING
    D2D1_YCBCR_CHROMA_SUBSAMPLING_AUTO = 0
    D2D1_YCBCR_CHROMA_SUBSAMPLING_420 = 1
    D2D1_YCBCR_CHROMA_SUBSAMPLING_422 = 2
    D2D1_YCBCR_CHROMA_SUBSAMPLING_444 = 3
    D2D1_YCBCR_CHROMA_SUBSAMPLING_440 = 4
    D2D1_YCBCR_CHROMA_SUBSAMPLING_FORCE_DWORD = -1
End Enum

Public Enum D2D1_YCBCR_INTERPOLATION_MODE
    D2D1_YCBCR_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0
    D2D1_YCBCR_INTERPOLATION_MODE_LINEAR = 1
    D2D1_YCBCR_INTERPOLATION_MODE_CUBIC = 2
    D2D1_YCBCR_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_YCBCR_INTERPOLATION_MODE_ANISOTROPIC = 4
    D2D1_YCBCR_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC = 5
    D2D1_YCBCR_INTERPOLATION_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_CONTRAST_PROP
    D2D1_CONTRAST_PROP_CONTRAST = 0
    D2D1_CONTRAST_PROP_CLAMP_INPUT = 1
    D2D1_CONTRAST_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_RGBTOHUE_PROP
    D2D1_RGBTOHUE_PROP_OUTPUT_COLOR_SPACE = 0
    D2D1_RGBTOHUE_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE
    D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_VALUE = 0
    D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS = 1
    D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_HUETORGB_PROP
    D2D1_HUETORGB_PROP_INPUT_COLOR_SPACE = 0
    D2D1_HUETORGB_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_HUETORGB_INPUT_COLOR_SPACE
    D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_VALUE = 0
    D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS = 1
    D2D1_HUETORGB_INPUT_COLOR_SPACE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_CHROMAKEY_PROP
    D2D1_CHROMAKEY_PROP_COLOR = 0
    D2D1_CHROMAKEY_PROP_TOLERANCE = 1
    D2D1_CHROMAKEY_PROP_INVERT_ALPHA = 2
    D2D1_CHROMAKEY_PROP_FEATHER = 3
    D2D1_CHROMAKEY_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_EMBOSS_PROP
    D2D1_EMBOSS_PROP_HEIGHT = 0
    D2D1_EMBOSS_PROP_DIRECTION = 1
    D2D1_EMBOSS_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_EXPOSURE_PROP
    D2D1_EXPOSURE_PROP_EXPOSURE_VALUE = 0
    D2D1_EXPOSURE_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_POSTERIZE_PROP
    D2D1_POSTERIZE_PROP_RED_VALUE_COUNT = 0
    D2D1_POSTERIZE_PROP_GREEN_VALUE_COUNT = 1
    D2D1_POSTERIZE_PROP_BLUE_VALUE_COUNT = 2
    D2D1_POSTERIZE_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_SEPIA_PROP
    D2D1_SEPIA_PROP_INTENSITY = 0
    D2D1_SEPIA_PROP_ALPHA_MODE = 1
    D2D1_SEPIA_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_SHARPEN_PROP
    D2D1_SHARPEN_PROP_SHARPNESS = 0
    D2D1_SHARPEN_PROP_THRESHOLD = 1
    D2D1_SHARPEN_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_STRAIGHTEN_PROP
    D2D1_STRAIGHTEN_PROP_ANGLE = 0
    D2D1_STRAIGHTEN_PROP_MAINTAIN_SIZE = 1
    D2D1_STRAIGHTEN_PROP_SCALE_MODE = 2
    D2D1_STRAIGHTEN_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_STRAIGHTEN_SCALE_MODE
    D2D1_STRAIGHTEN_SCALE_MODE_NEAREST_NEIGHBOR = 0
    D2D1_STRAIGHTEN_SCALE_MODE_LINEAR = 1
    D2D1_STRAIGHTEN_SCALE_MODE_CUBIC = 2
    D2D1_STRAIGHTEN_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3
    D2D1_STRAIGHTEN_SCALE_MODE_ANISOTROPIC = 4
    D2D1_STRAIGHTEN_SCALE_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_TEMPERATUREANDTINT_PROP
    D2D1_TEMPERATUREANDTINT_PROP_TEMPERATURE = 0
    D2D1_TEMPERATUREANDTINT_PROP_TINT = 1
    D2D1_TEMPERATUREANDTINT_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_VIGNETTE_PROP
    D2D1_VIGNETTE_PROP_COLOR = 0
    D2D1_VIGNETTE_PROP_TRANSITION_SIZE = 1
    D2D1_VIGNETTE_PROP_STRENGTH = 2
    D2D1_VIGNETTE_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_EDGEDETECTION_PROP
    D2D1_EDGEDETECTION_PROP_STRENGTH = 0
    D2D1_EDGEDETECTION_PROP_BLUR_RADIUS = 1
    D2D1_EDGEDETECTION_PROP_MODE = 2
    D2D1_EDGEDETECTION_PROP_OVERLAY_EDGES = 3
    D2D1_EDGEDETECTION_PROP_ALPHA_MODE = 4
    D2D1_EDGEDETECTION_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_EDGEDETECTION_MODE
    D2D1_EDGEDETECTION_MODE_SOBEL = 0
    D2D1_EDGEDETECTION_MODE_PREWITT = 1
    D2D1_EDGEDETECTION_MODE_FORCE_DWORD = -1
End Enum

Public Enum D2D1_HIGHLIGHTSANDSHADOWS_PROP
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_HIGHLIGHTS = 0
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_SHADOWS = 1
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_CLARITY = 2
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_INPUT_GAMMA = 3
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_MASK_BLUR_RADIUS = 4
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA
    D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_LINEAR = 0
    D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_SRGB = 1
    D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_FORCE_DWORD = -1
End Enum

Public Enum D2D1_LOOKUPTABLE3D_PROP
    D2D1_LOOKUPTABLE3D_PROP_LUT = 0
    D2D1_LOOKUPTABLE3D_PROP_ALPHA_MODE = 1
    D2D1_LOOKUPTABLE3D_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_OPACITY_PROP
    D2D1_OPACITY_PROP_OPACITY = 0
    D2D1_OPACITY_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_CROSSFADE_PROP
    D2D1_CROSSFADE_PROP_WEIGHT = 0
    D2D1_CROSSFADE_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_TINT_PROP
    D2D1_TINT_PROP_COLOR = 0
    D2D1_TINT_PROP_CLAMP_OUTPUT = 1
    D2D1_TINT_PROP_FORCE_DWORD = -1
End Enum

Public Enum D2D1_WHITELEVELADJUSTMENT_PROP
    ' / <summary>
    ' / Property Name: "InputWhiteLevel"
    ' / Property Type: FLOAT
    ' / </summary>
    D2D1_WHITELEVELADJUSTMENT_PROP_INPUT_WHITE_LEVEL = 0
    ' / <summary>
    ' / Property Name: "OutputWhiteLevel"
    ' / Property Type: FLOAT
    ' / </summary>
    D2D1_WHITELEVELADJUSTMENT_PROP_OUTPUT_WHITE_LEVEL = 1
    D2D1_WHITELEVELADJUSTMENT_PROP_FORCE_DWORD = &Hffffffff
End Enum

Public Enum D2D1_HDRTONEMAP_PROP
    ' / <summary>
    ' / Property Name: "InputMaxLuminance"
    ' / Property Type: FLOAT
    ' / </summary>
    D2D1_HDRTONEMAP_PROP_INPUT_MAX_LUMINANCE = 0
    ' / <summary>
    ' / Property Name: "OutputMaxLuminance"
    ' / Property Type: FLOAT
    ' / </summary>
    D2D1_HDRTONEMAP_PROP_OUTPUT_MAX_LUMINANCE = 1
    ' / <summary>
    ' / Property Name: "DisplayMode"
    ' / Property Type: D2D1_HDRTONEMAP_DISPLAY_MODE
    ' / </summary>
    D2D1_HDRTONEMAP_PROP_DISPLAY_MODE = 2
    D2D1_HDRTONEMAP_PROP_FORCE_DWORD = &Hffffffff
End Enum

Public Enum D2D1_HDRTONEMAP_DISPLAY_MODE
    D2D1_HDRTONEMAP_DISPLAY_MODE_SDR = 0
    D2D1_HDRTONEMAP_DISPLAY_MODE_HDR = 1
    D2D1_HDRTONEMAP_DISPLAY_MODE_FORCE_DWORD = &Hffffffff
End Enum


Public Type SystemInterruptTime
    value As LongLong
End Type

Public Type PresentationTransform
	M11 As Single
	M12 As Single
	M21 As Single
	M22 As Single
	M31 As Single
	M32 As Single
End Type

Public Enum PresentStatisticsKind
	PresentStatisticsKind_PresentStatus = 1
	PresentStatisticsKind_CompositionFrame = 2
	PresentStatisticsKind_IndependentFlipFrame = 3
	'  Future versions of the API will extend this enumeration
End Enum

Public Enum PresentStatus
	'  The frame was queued by the system to eventually be shown.
	PresentStatus_Queued = 0
	'  The frame was skipped because a later frame was a better candidate to show.
	PresentStatus_Skipped = 1
	'  The frame arrived, but was canceled by the application, so it was not displayed.
	PresentStatus_Canceled = 2
End Enum

Public Enum CompositionFrameInstanceKind
	'  Composed directly to DWM's backbuffer.
	CompositionFrameInstanceKind_ComposedOnScreen = 0
	'  Directly scanned out in an MPO plane.
	CompositionFrameInstanceKind_ScanoutOnScreen = 1
	'  Composed to an intermediate.
	CompositionFrameInstanceKind_ComposedToIntermediate = 2
End Enum

Public Type CompositionFrameDisplayInstance
	' The output that this instance was displayed on.
	displayAdapterLUID As LUID
	displayVidPnSourceId As Long
	displayUniqueId As Long
	' The LUID of the render adapter used to render this instance in the composition frame
	renderAdapterLUID As LUID
	' The kind of instance.
	instanceKind As CompositionFrameInstanceKind
	' Accumulated transform on screen of displayed content, including all transforms of ancestor
	' visuals, if applicable.
	finalTransform As PresentationTransform
	' Whether or not a copy took place to display this instance due to the destination being
	' a different adapter than the allocation's adapter.
	requiredCrossAdapterCopy As Byte
	' Color space of the output this instance was shown on.
	colorSpace As DXGI_COLOR_SPACE_TYPE
End Type

Public Const D2D1_SCENE_REFERRED_SDR_WHITE_LEVEL As Single = 81.0


Public Enum DXGI_Message_Id
    DXGI_MSG_IDXGISwapChain_CreationOrResizeBuffers_InvalidOutputWindow = 0
    DXGI_MSG_IDXGISwapChain_CreationOrResizeBuffers_BufferWidthInferred
    DXGI_MSG_IDXGISwapChain_CreationOrResizeBuffers_BufferHeightInferred
    DXGI_MSG_IDXGISwapChain_CreationOrResizeBuffers_NoScanoutFlagChanged
    DXGI_MSG_IDXGISwapChain_Creation_MaxBufferCountExceeded
    DXGI_MSG_IDXGISwapChain_Creation_TooFewBuffers
    DXGI_MSG_IDXGISwapChain_Creation_NoOutputWindow
    DXGI_MSG_IDXGISwapChain_Destruction_OtherMethodsCalled
    DXGI_MSG_IDXGISwapChain_GetDesc_pDescIsNULL
    DXGI_MSG_IDXGISwapChain_GetBuffer_ppSurfaceIsNULL
    DXGI_MSG_IDXGISwapChain_GetBuffer_NoAllocatedBuffers
    DXGI_MSG_IDXGISwapChain_GetBuffer_iBufferMustBeZero
    DXGI_MSG_IDXGISwapChain_GetBuffer_iBufferOOB
    DXGI_MSG_IDXGISwapChain_GetContainingOutput_ppOutputIsNULL
    DXGI_MSG_IDXGISwapChain_Present_SyncIntervalOOB
    DXGI_MSG_IDXGISwapChain_Present_InvalidNonPreRotatedFlag
    DXGI_MSG_IDXGISwapChain_Present_NoAllocatedBuffers
    DXGI_MSG_IDXGISwapChain_Present_GetDXGIAdapterFailed
    DXGI_MSG_IDXGISwapChain_ResizeBuffers_BufferCountOOB
    DXGI_MSG_IDXGISwapChain_ResizeBuffers_UnreleasedReferences
    DXGI_MSG_IDXGISwapChain_ResizeBuffers_InvalidSwapChainFlag
    DXGI_MSG_IDXGISwapChain_ResizeBuffers_InvalidNonPreRotatedFlag
    DXGI_MSG_IDXGISwapChain_ResizeTarget_RefreshRateDivideByZero
    DXGI_MSG_IDXGISwapChain_SetFullscreenState_InvalidTarget
    DXGI_MSG_IDXGISwapChain_GetFrameStatistics_pStatsIsNULL
    DXGI_MSG_IDXGISwapChain_GetLastPresentCount_pLastPresentCountIsNULL
    DXGI_MSG_IDXGISwapChain_SetFullscreenState_RemoteNotSupported
    DXGI_MSG_IDXGIOutput_TakeOwnership_FailedToAcquireFullscreenMutex
    DXGI_MSG_IDXGIFactory_CreateSoftwareAdapter_ppAdapterInterfaceIsNULL
    DXGI_MSG_IDXGIFactory_EnumAdapters_ppAdapterInterfaceIsNULL
    DXGI_MSG_IDXGIFactory_CreateSwapChain_ppSwapChainIsNULL
    DXGI_MSG_IDXGIFactory_CreateSwapChain_pDescIsNULL
    DXGI_MSG_IDXGIFactory_CreateSwapChain_UnknownSwapEffect
    DXGI_MSG_IDXGIFactory_CreateSwapChain_InvalidFlags
    DXGI_MSG_IDXGIFactory_CreateSwapChain_NonPreRotatedFlagAndWindowed
    DXGI_MSG_IDXGIFactory_CreateSwapChain_NullDeviceInterface
    DXGI_MSG_IDXGIFactory_GetWindowAssociation_phWndIsNULL
    DXGI_MSG_IDXGIFactory_MakeWindowAssociation_InvalidFlags
    DXGI_MSG_IDXGISurface_Map_InvalidSurface
    DXGI_MSG_IDXGISurface_Map_FlagsSetToZero
    DXGI_MSG_IDXGISurface_Map_DiscardAndReadFlagSet
    DXGI_MSG_IDXGISurface_Map_DiscardButNotWriteFlagSet
    DXGI_MSG_IDXGISurface_Map_NoCPUAccess
    DXGI_MSG_IDXGISurface_Map_ReadFlagSetButCPUAccessIsDynamic
    DXGI_MSG_IDXGISurface_Map_DiscardFlagSetButCPUAccessIsNotDynamic
    DXGI_MSG_IDXGIOutput_GetDisplayModeList_pNumModesIsNULL
    DXGI_MSG_IDXGIOutput_FindClosestMatchingMode_ModeHasInvalidWidthOrHeight
    DXGI_MSG_IDXGIOutput_GetCammaControlCapabilities_NoOwnerDevice
    DXGI_MSG_IDXGIOutput_TakeOwnership_pDeviceIsNULL
    DXGI_MSG_IDXGIOutput_GetDisplaySurfaceData_NoOwnerDevice
    DXGI_MSG_IDXGIOutput_GetDisplaySurfaceData_pDestinationIsNULL
    DXGI_MSG_IDXGIOutput_GetDisplaySurfaceData_MapOfDestinationFailed
    DXGI_MSG_IDXGIOutput_GetFrameStatistics_NoOwnerDevice
    DXGI_MSG_IDXGIOutput_GetFrameStatistics_pStatsIsNULL
    DXGI_MSG_IDXGIOutput_SetGammaControl_NoOwnerDevice
    DXGI_MSG_IDXGIOutput_GetGammaControl_NoOwnerDevice
    DXGI_MSG_IDXGIOutput_GetGammaControl_NoGammaControls
    DXGI_MSG_IDXGIOutput_SetDisplaySurface_IDXGIResourceNotSupportedBypPrimary
    DXGI_MSG_IDXGIOutput_SetDisplaySurface_pPrimaryIsInvalid
    DXGI_MSG_IDXGIOutput_SetDisplaySurface_NoOwnerDevice
    DXGI_MSG_IDXGIOutput_TakeOwnership_RemoteDeviceNotSupported
    DXGI_MSG_IDXGIOutput_GetDisplayModeList_RemoteDeviceNotSupported
    DXGI_MSG_IDXGIOutput_FindClosestMatchingMode_RemoteDeviceNotSupported
    DXGI_MSG_IDXGIDevice_CreateSurface_InvalidParametersWithpSharedResource
    DXGI_MSG_IDXGIObject_GetPrivateData_puiDataSizeIsNULL
    DXGI_MSG_IDXGISwapChain_Creation_InvalidOutputWindow
    DXGI_MSG_IDXGISwapChain_Release_SwapChainIsFullscreen
    DXGI_MSG_IDXGIOutput_GetDisplaySurfaceData_InvalidTargetSurfaceFormat
    DXGI_MSG_IDXGIFactory_CreateSoftwareAdapter_ModuleIsNULL
    DXGI_MSG_IDXGIOutput_FindClosestMatchingMode_IDXGIDeviceNotSupportedBypConcernedDevice
    DXGI_MSG_IDXGIOutput_FindClosestMatchingMode_pModeToMatchOrpClosestMatchIsNULL
    DXGI_MSG_IDXGIOutput_FindClosestMatchingMode_ModeHasRefreshRateDenominatorZero
    DXGI_MSG_IDXGIOutput_FindClosestMatchingMode_UnknownFormatIsInvalidForConfiguration
    DXGI_MSG_IDXGIOutput_FindClosestMatchingMode_InvalidDisplayModeScanlineOrdering
    DXGI_MSG_IDXGIOutput_FindClosestMatchingMode_InvalidDisplayModeScaling
    DXGI_MSG_IDXGIOutput_FindClosestMatchingMode_InvalidDisplayModeFormatAndDeviceCombination
    DXGI_MSG_IDXGIFactory_Creation_CalledFromDllMain
    DXGI_MSG_IDXGISwapChain_SetFullscreenState_OutputNotOwnedBySwapChainDevice
    DXGI_MSG_IDXGISwapChain_Creation_InvalidWindowStyle
    DXGI_MSG_IDXGISwapChain_GetFrameStatistics_UnsupportedStatistics
    DXGI_MSG_IDXGISwapChain_GetContainingOutput_SwapchainAdapterDoesNotControlOutput
    DXGI_MSG_IDXGIOutput_SetOrGetGammaControl_pArrayIsNULL
    DXGI_MSG_IDXGISwapChain_SetFullscreenState_FullscreenInvalidForChildWindows
    DXGI_MSG_IDXGIFactory_Release_CalledFromDllMain
    DXGI_MSG_IDXGISwapChain_Present_UnreleasedHDC
    DXGI_MSG_IDXGISwapChain_ResizeBuffers_NonPreRotatedAndGDICompatibleFlags
    DXGI_MSG_IDXGIFactory_CreateSwapChain_NonPreRotatedAndGDICompatibleFlags
    DXGI_MSG_IDXGISurface1_GetDC_pHdcIsNULL
    DXGI_MSG_IDXGISurface1_GetDC_SurfaceNotTexture2D
    DXGI_MSG_IDXGISurface1_GetDC_GDICompatibleFlagNotSet
    DXGI_MSG_IDXGISurface1_GetDC_UnreleasedHDC
    DXGI_MSG_IDXGISurface_Map_NoCPUAccess2
    DXGI_MSG_IDXGISurface1_ReleaseDC_GetDCNotCalled
    DXGI_MSG_IDXGISurface1_ReleaseDC_InvalidRectangleDimensions
    DXGI_MSG_IDXGIOutput_TakeOwnership_RemoteOutputNotSupported
    DXGI_MSG_IDXGIOutput_FindClosestMatchingMode_RemoteOutputNotSupported
    DXGI_MSG_IDXGIOutput_GetDisplayModeList_RemoteOutputNotSupported
    DXGI_MSG_IDXGIFactory_CreateSwapChain_pDeviceHasMismatchedDXGIFactory
    DXGI_MSG_IDXGISwapChain_Present_NonOptimalFSConfiguration
    DXGI_MSG_IDXGIFactory_CreateSwapChain_FlipSequentialNotSupportedOnD3D10
    DXGI_MSG_IDXGIFactory_CreateSwapChain_BufferCountOOBForFlipSequential
    DXGI_MSG_IDXGIFactory_CreateSwapChain_InvalidFormatForFlipSequential
    DXGI_MSG_IDXGIFactory_CreateSwapChain_MultiSamplingNotSupportedForFlipSequential
    DXGI_MSG_IDXGISwapChain_ResizeBuffers_BufferCountOOBForFlipSequential
    DXGI_MSG_IDXGISwapChain_ResizeBuffers_InvalidFormatForFlipSequential
    DXGI_MSG_IDXGISwapChain_Present_PartialPresentationBeforeStandardPresentation
    DXGI_MSG_IDXGISwapChain_Present_FullscreenPartialPresentIsInvalid
    DXGI_MSG_IDXGISwapChain_Present_InvalidPresentTestOrDoNotSequenceFlag
    DXGI_MSG_IDXGISwapChain_Present_ScrollInfoWithNoDirtyRectsSpecified
    DXGI_MSG_IDXGISwapChain_Present_EmptyScrollRect
    DXGI_MSG_IDXGISwapChain_Present_ScrollRectOutOfBackbufferBounds
    DXGI_MSG_IDXGISwapChain_Present_ScrollRectOutOfBackbufferBoundsWithOffset
    DXGI_MSG_IDXGISwapChain_Present_EmptyDirtyRect
    DXGI_MSG_IDXGISwapChain_Present_DirtyRectOutOfBackbufferBounds
    DXGI_MSG_IDXGIFactory_CreateSwapChain_UnsupportedBufferUsageFlags
    DXGI_MSG_IDXGISwapChain_Present_DoNotSequenceFlagSetButPreviousBufferIsUndefined
    DXGI_MSG_IDXGISwapChain_Present_UnsupportedFlags
    DXGI_MSG_IDXGISwapChain_Present_FlipModelChainMustResizeOrCreateOnFSTransition
    DXGI_MSG_IDXGIFactory_CreateSwapChain_pRestrictToOutputFromOtherIDXGIFactory
    DXGI_MSG_IDXGIFactory_CreateSwapChain_RestrictOutputNotSupportedOnAdapter
    DXGI_MSG_IDXGISwapChain_Present_RestrictToOutputFlagSetButInvalidpRestrictToOutput
    DXGI_MSG_IDXGISwapChain_Present_RestrictToOutputFlagdWithFullscreen
    DXGI_MSG_IDXGISwapChain_Present_RestrictOutputFlagWithStaleSwapChain
    DXGI_MSG_IDXGISwapChain_Present_OtherFlagsCausingInvalidPresentTestFlag
    DXGI_MSG_IDXGIFactory_CreateSwapChain_UnavailableInSession0
    DXGI_MSG_IDXGIFactory_MakeWindowAssociation_UnavailableInSession0
    DXGI_MSG_IDXGIFactory_GetWindowAssociation_UnavailableInSession0
    DXGI_MSG_IDXGIAdapter_EnumOutputs_UnavailableInSession0
    DXGI_MSG_IDXGISwapChain_CreationOrSetFullscreenState_StereoDisabled
    DXGI_MSG_IDXGIFactory2_UnregisterStatus_CookieNotFound
    DXGI_MSG_IDXGISwapChain_Present_ProtectedContentInWindowedModeWithoutFSOrOverlay
    DXGI_MSG_IDXGISwapChain_Present_ProtectedContentInWindowedModeWithoutFlipSequential
    DXGI_MSG_IDXGISwapChain_Present_ProtectedContentWithRDPDriver
    DXGI_MSG_IDXGISwapChain_Present_ProtectedContentInWindowedModeWithDWMOffOrInvalidDisplayAffinity
    DXGI_MSG_IDXGIFactory_CreateSwapChainForComposition_WidthOrHeightIsZero
    DXGI_MSG_IDXGIFactory_CreateSwapChainForComposition_OnlyFlipSequentialSupported
    DXGI_MSG_IDXGIFactory_CreateSwapChainForComposition_UnsupportedOnAdapter
    DXGI_MSG_IDXGIFactory_CreateSwapChainForComposition_UnsupportedOnWindows7
    DXGI_MSG_IDXGISwapChain_SetFullscreenState_FSTransitionWithCompositionSwapChain
    DXGI_MSG_IDXGISwapChain_ResizeTarget_InvalidWithCompositionSwapChain
    DXGI_MSG_IDXGISwapChain_ResizeBuffers_WidthOrHeightIsZero
    DXGI_MSG_IDXGIFactory_CreateSwapChain_ScalingNoneIsFlipModelOnly
    DXGI_MSG_IDXGIFactory_CreateSwapChain_ScalingUnrecognized
    DXGI_MSG_IDXGIFactory_CreateSwapChain_DisplayOnlyFullscreenUnsupported
    DXGI_MSG_IDXGIFactory_CreateSwapChain_DisplayOnlyUnsupported
    DXGI_MSG_IDXGISwapChain_Present_RestartIsFullscreenOnly
    DXGI_MSG_IDXGISwapChain_Present_ProtectedWindowlessPresentationRequiresDisplayOnly
    DXGI_MSG_IDXGISwapChain_SetFullscreenState_DisplayOnlyUnsupported
    DXGI_MSG_IDXGISwapChain1_SetBackgroundColor_OutOfRange
    DXGI_MSG_IDXGISwapChain_ResizeBuffers_DisplayOnlyFullscreenUnsupported
    DXGI_MSG_IDXGISwapChain_ResizeBuffers_DisplayOnlyUnsupported
    DXGI_MSG_IDXGISwapchain_Present_ScrollUnsupported
    DXGI_MSG_IDXGISwapChain1_SetRotation_UnsupportedOS
    DXGI_MSG_IDXGISwapChain1_GetRotation_UnsupportedOS
    DXGI_MSG_IDXGISwapchain_Present_FullscreenRotation
    DXGI_MSG_IDXGISwapChain_Present_PartialPresentationWithMSAABuffers
    DXGI_MSG_IDXGISwapChain1_SetRotation_FlipSequentialRequired
    DXGI_MSG_IDXGISwapChain1_SetRotation_InvalidRotation
    DXGI_MSG_IDXGISwapChain1_GetRotation_FlipSequentialRequired
    DXGI_MSG_IDXGISwapChain_GetHwnd_WrongType
    DXGI_MSG_IDXGISwapChain_GetCompositionSurface_WrongType
    DXGI_MSG_IDXGISwapChain_GetCoreWindow_WrongType
    DXGI_MSG_IDXGISwapChain_GetFullscreenDesc_NonHwnd
    DXGI_MSG_IDXGISwapChain_SetFullscreenState_CoreWindow
    DXGI_MSG_IDXGIFactory2_CreateSwapChainForCoreWindow_UnsupportedOnWindows7
    DXGI_MSG_IDXGIFactory2_CreateSwapChainForCoreWindow_pWindowIsNULL
    DXGI_MSG_IDXGIFactory_CreateSwapChain_FSUnsupportedForModernApps
    DXGI_MSG_IDXGIFactory_MakeWindowAssociation_ModernApp
    DXGI_MSG_IDXGISwapChain_ResizeTarget_ModernApp
    DXGI_MSG_IDXGISwapChain_ResizeTarget_pNewTargetParametersIsNULL
    DXGI_MSG_IDXGIOutput_SetDisplaySurface_ModernApp
    DXGI_MSG_IDXGIOutput_TakeOwnership_ModernApp
    DXGI_MSG_IDXGIFactory2_CreateSwapChainForCoreWindow_pWindowIsInvalid
    DXGI_MSG_IDXGIFactory2_CreateSwapChainForCompositionSurface_InvalidHandle
    DXGI_MSG_IDXGISurface1_GetDC_ModernApp
    DXGI_MSG_IDXGIFactory_CreateSwapChain_ScalingNoneRequiresWindows8OrNewer
    DXGI_MSG_IDXGISwapChain_Present_TemporaryMonoAndPreferRight
    DXGI_MSG_IDXGISwapChain_Present_TemporaryMonoOrPreferRightWithDoNotSequence
    DXGI_MSG_IDXGISwapChain_Present_TemporaryMonoOrPreferRightWithoutStereo
    DXGI_MSG_IDXGISwapChain_Present_TemporaryMonoUnsupported
    DXGI_MSG_IDXGIOutput_GetDisplaySurfaceData_ArraySizeMismatch
    DXGI_MSG_IDXGISwapChain_Present_PartialPresentationWithSwapEffectDiscard
    DXGI_MSG_IDXGIFactory_CreateSwapChain_AlphaUnrecognized
    DXGI_MSG_IDXGIFactory_CreateSwapChain_AlphaIsWindowlessOnly
    DXGI_MSG_IDXGIFactory_CreateSwapChain_AlphaIsFlipModelOnly
    DXGI_MSG_IDXGIFactory_CreateSwapChain_RestrictToOutputAdapterMismatch
    DXGI_MSG_IDXGIFactory_CreateSwapChain_DisplayOnlyOnLegacy
    DXGI_MSG_IDXGISwapChain_ResizeBuffers_DisplayOnlyOnLegacy
    DXGI_MSG_IDXGIResource1_CreateSubresourceSurface_InvalidIndex
    DXGI_MSG_IDXGIFactory_CreateSwapChainForComposition_InvalidScaling
    DXGI_MSG_IDXGIFactory_CreateSwapChainForCoreWindow_InvalidSwapEffect
    DXGI_MSG_IDXGIResource1_CreateSharedHandle_UnsupportedOS
    DXGI_MSG_IDXGIFactory2_RegisterOcclusionStatusWindow_UnsupportedOS
    DXGI_MSG_IDXGIFactory2_RegisterOcclusionStatusEvent_UnsupportedOS
    DXGI_MSG_IDXGIOutput1_DuplicateOutput_UnsupportedOS
    DXGI_MSG_IDXGIDisplayControl_IsStereoEnabled_UnsupportedOS
    DXGI_MSG_IDXGIFactory_CreateSwapChainForComposition_InvalidAlphaMode
    DXGI_MSG_IDXGIFactory_GetSharedResourceAdapterLuid_InvalidResource
    DXGI_MSG_IDXGIFactory_GetSharedResourceAdapterLuid_InvalidLUID
    DXGI_MSG_IDXGIFactory_GetSharedResourceAdapterLuid_UnsupportedOS
    DXGI_MSG_IDXGIOutput1_GetDisplaySurfaceData1_2DOnly
    DXGI_MSG_IDXGIOutput1_GetDisplaySurfaceData1_StagingOnly
    DXGI_MSG_IDXGIOutput1_GetDisplaySurfaceData1_NeedCPUAccessWrite
    DXGI_MSG_IDXGIOutput1_GetDisplaySurfaceData1_NoShared
    DXGI_MSG_IDXGIOutput1_GetDisplaySurfaceData1_OnlyMipLevels1
    DXGI_MSG_IDXGIOutput1_GetDisplaySurfaceData1_MappedOrOfferedResource
    DXGI_MSG_IDXGISwapChain_SetFullscreenState_FSUnsupportedForModernApps
    DXGI_MSG_IDXGIFactory_CreateSwapChain_FailedToGoFSButNonPreRotated
    DXGI_MSG_IDXGIFactory_CreateSwapChainOrRegisterOcclusionStatus_BlitModelUsedWhileRegisteredForOcclusionStatusEvents
    DXGI_MSG_IDXGISwapChain_Present_BlitModelUsedWhileRegisteredForOcclusionStatusEvents
    DXGI_MSG_IDXGIFactory_CreateSwapChain_WaitableSwapChainsAreFlipModelOnly
    DXGI_MSG_IDXGIFactory_CreateSwapChain_WaitableSwapChainsAreNotFullscreen
    DXGI_MSG_IDXGISwapChain_SetFullscreenState_Waitable
    DXGI_MSG_IDXGISwapChain_ResizeBuffers_CannotAddOrRemoveWaitableFlag
    DXGI_MSG_IDXGISwapChain_GetFrameLatencyWaitableObject_OnlyWaitable
    DXGI_MSG_IDXGISwapChain_GetMaximumFrameLatency_OnlyWaitable
    DXGI_MSG_IDXGISwapChain_GetMaximumFrameLatency_pMaxLatencyIsNULL
    DXGI_MSG_IDXGISwapChain_SetMaximumFrameLatency_OnlyWaitable
    DXGI_MSG_IDXGISwapChain_SetMaximumFrameLatency_MaxLatencyIsOutOfBounds
    DXGI_MSG_IDXGIFactory_CreateSwapChain_ForegroundIsCoreWindowOnly
    DXGI_MSG_IDXGIFactory2_CreateSwapChainForCoreWindow_ForegroundUnsupportedOnAdapter
    DXGI_MSG_IDXGIFactory2_CreateSwapChainForCoreWindow_InvalidScaling
    DXGI_MSG_IDXGIFactory2_CreateSwapChainForCoreWindow_InvalidAlphaMode
    DXGI_MSG_IDXGISwapChain_ResizeBuffers_CannotAddOrRemoveForegroundFlag
    DXGI_MSG_IDXGISwapChain_SetMatrixTransform_MatrixPointerCannotBeNull
    DXGI_MSG_IDXGISwapChain_SetMatrixTransform_RequiresCompositionSwapChain
    DXGI_MSG_IDXGISwapChain_SetMatrixTransform_MatrixMustBeFinite
    DXGI_MSG_IDXGISwapChain_SetMatrixTransform_MatrixMustBeTranslateAndOrScale
    DXGI_MSG_IDXGISwapChain_GetMatrixTransform_MatrixPointerCannotBeNull
    DXGI_MSG_IDXGISwapChain_GetMatrixTransform_RequiresCompositionSwapChain
    DXGI_MSG_DXGIGetDebugInterface1_NULL_ppDebug
    DXGI_MSG_DXGIGetDebugInterface1_InvalidFlags
    DXGI_MSG_IDXGISwapChain_Present_Decode
    DXGI_MSG_IDXGISwapChain_ResizeBuffers_Decode
    DXGI_MSG_IDXGISwapChain_SetSourceSize_FlipModel
    DXGI_MSG_IDXGISwapChain_SetSourceSize_Decode
    DXGI_MSG_IDXGISwapChain_SetSourceSize_WidthHeight
    DXGI_MSG_IDXGISwapChain_GetSourceSize_NullPointers
    DXGI_MSG_IDXGISwapChain_GetSourceSize_Decode
    DXGI_MSG_IDXGIDecodeSwapChain_SetColorSpace_InvalidFlags
    DXGI_MSG_IDXGIDecodeSwapChain_SetSourceRect_InvalidRect
    DXGI_MSG_IDXGIDecodeSwapChain_SetTargetRect_InvalidRect
    DXGI_MSG_IDXGIDecodeSwapChain_SetDestSize_InvalidSize
    DXGI_MSG_IDXGIDecodeSwapChain_GetSourceRect_InvalidPointer
    DXGI_MSG_IDXGIDecodeSwapChain_GetTargetRect_InvalidPointer
    DXGI_MSG_IDXGIDecodeSwapChain_GetDestSize_InvalidPointer
    DXGI_MSG_IDXGISwapChain_PresentBuffer_YUV
    DXGI_MSG_IDXGISwapChain_SetSourceSize_YUV
    DXGI_MSG_IDXGISwapChain_GetSourceSize_YUV
    DXGI_MSG_IDXGISwapChain_SetMatrixTransform_YUV
    DXGI_MSG_IDXGISwapChain_GetMatrixTransform_YUV
    DXGI_MSG_IDXGISwapChain_Present_PartialPresentation_YUV
    DXGI_MSG_IDXGISwapChain_ResizeBuffers_CannotAddOrRemoveFlag_YUV
    DXGI_MSG_IDXGISwapChain_ResizeBuffers_Alignment_YUV
    DXGI_MSG_IDXGIFactory_CreateSwapChain_ShaderInputUnsupported_YUV
    DXGI_MSG_IDXGIOutput3_CheckOverlaySupport_NullPointers
    DXGI_MSG_IDXGIOutput3_CheckOverlaySupport_IDXGIDeviceNotSupportedBypConcernedDevice
    DXGI_MSG_IDXGIAdapter_EnumOutputs2_InvalidEnumOutputs2Flag
    DXGI_MSG_IDXGISwapChain_CreationOrSetFullscreenState_FSUnsupportedForFlipDiscard
    DXGI_MSG_IDXGIOutput4_CheckOverlayColorSpaceSupport_NullPointers
    DXGI_MSG_IDXGIOutput4_CheckOverlayColorSpaceSupport_IDXGIDeviceNotSupportedBypConcernedDevice
    DXGI_MSG_IDXGISwapChain3_CheckColorSpaceSupport_NullPointers
    DXGI_MSG_IDXGISwapChain3_SetColorSpace1_InvalidColorSpace
    DXGI_MSG_IDXGIFactory_CreateSwapChain_InvalidHwProtect
    DXGI_MSG_IDXGIFactory_CreateSwapChain_HwProtectUnsupported
    DXGI_MSG_IDXGISwapChain_ResizeBuffers_InvalidHwProtect
    DXGI_MSG_IDXGISwapChain_ResizeBuffers_HwProtectUnsupported
    DXGI_MSG_IDXGISwapChain_ResizeBuffers1_D3D12Only
    DXGI_MSG_IDXGISwapChain_ResizeBuffers1_FlipModel
    DXGI_MSG_IDXGISwapChain_ResizeBuffers1_NodeMaskAndQueueRequired
    DXGI_MSG_IDXGISwapChain_CreateSwapChain_InvalidHwProtectGdiFlag
    DXGI_MSG_IDXGISwapChain_ResizeBuffers_InvalidHwProtectGdiFlag
    DXGI_MSG_IDXGIFactory_CreateSwapChain_10BitFormatNotSupported
    DXGI_MSG_IDXGIFactory_CreateSwapChain_FlipSwapEffectRequired
    DXGI_MSG_IDXGIFactory_CreateSwapChain_InvalidDevice
    DXGI_MSG_IDXGIOutput_TakeOwnership_Unsupported
    DXGI_MSG_IDXGIFactory_CreateSwapChain_InvalidQueue
    DXGI_MSG_IDXGISwapChain3_ResizeBuffers1_InvalidQueue
    DXGI_MSG_IDXGIFactory_CreateSwapChainForHwnd_InvalidScaling
    DXGI_MSG_IDXGISwapChain3_SetHDRMetaData_InvalidSize
    DXGI_MSG_IDXGISwapChain3_SetHDRMetaData_InvalidPointer
    DXGI_MSG_IDXGISwapChain3_SetHDRMetaData_InvalidType
    DXGI_MSG_IDXGISwapChain_Present_FullscreenAllowTearingIsInvalid
    DXGI_MSG_IDXGISwapChain_Present_AllowTearingRequiresPresentIntervalZero
    DXGI_MSG_IDXGISwapChain_Present_AllowTearingRequiresCreationFlag
    DXGI_MSG_IDXGISwapChain_ResizeBuffers_CannotAddOrRemoveAllowTearingFlag
    DXGI_MSG_IDXGIFactory_CreateSwapChain_AllowTearingFlagIsFlipModelOnly
    DXGI_MSG_IDXGIFactory_CheckFeatureSupport_InvalidFeature
    DXGI_MSG_IDXGIFactory_CheckFeatureSupport_InvalidSize
    DXGI_MSG_IDXGIOutput6_CheckHardwareCompositionSupport_NullPointer
    DXGI_MSG_IDXGISwapChain_SetFullscreenState_PerMonitorDpiShimApplied
    DXGI_MSG_IDXGIOutput_DuplicateOutput_PerMonitorDpiShimApplied
    DXGI_MSG_IDXGIOutput_DuplicateOutput1_PerMonitorDpiRequired
    DXGI_MSG_IDXGIFactory7_UnregisterAdaptersChangedEvent_CookieNotFound
    DXGI_MSG_IDXGIFactory_CreateSwapChain_LegacyBltModelSwapEffect
    DXGI_MSG_IDXGISwapChain4_SetHDRMetaData_MetadataUnchanged
    DXGI_MSG_IDXGISwapChain_Present_11On12_Released_Resource
    DXGI_MSG_IDXGIFactory_CreateSwapChain_MultipleSwapchainRefToSurface_DeferredDtr
    DXGI_MSG_IDXGIFactory_MakeWindowAssociation_NoOpBehavior

    DXGI_MSG_Phone_IDXGIFactory_CreateSwapChain_NotForegroundWindow = 1000
    DXGI_MSG_Phone_IDXGIFactory_CreateSwapChain_DISCARD_BufferCount
    DXGI_MSG_Phone_IDXGISwapChain_SetFullscreenState_NotAvailable
    DXGI_MSG_Phone_IDXGISwapChain_ResizeBuffers_NotAvailable
    DXGI_MSG_Phone_IDXGISwapChain_ResizeTarget_NotAvailable
    DXGI_MSG_Phone_IDXGISwapChain_Present_InvalidLayerIndex
    DXGI_MSG_Phone_IDXGISwapChain_Present_MultipleLayerIndex
    DXGI_MSG_Phone_IDXGISwapChain_Present_InvalidLayerFlag
    DXGI_MSG_Phone_IDXGISwapChain_Present_InvalidRotation
    DXGI_MSG_Phone_IDXGISwapChain_Present_InvalidBlend
    DXGI_MSG_Phone_IDXGISwapChain_Present_InvalidResource
    DXGI_MSG_Phone_IDXGISwapChain_Present_InvalidMultiPlaneOverlayResource
    DXGI_MSG_Phone_IDXGISwapChain_Present_InvalidIndexForPrimary
    DXGI_MSG_Phone_IDXGISwapChain_Present_InvalidIndexForOverlay
    DXGI_MSG_Phone_IDXGISwapChain_Present_InvalidSubResourceIndex
    DXGI_MSG_Phone_IDXGISwapChain_Present_InvalidSourceRect
    DXGI_MSG_Phone_IDXGISwapChain_Present_InvalidDestinationRect
    DXGI_MSG_Phone_IDXGISwapChain_Present_MultipleResource
    DXGI_MSG_Phone_IDXGISwapChain_Present_NotSharedResource
    DXGI_MSG_Phone_IDXGISwapChain_Present_InvalidFlag
    DXGI_MSG_Phone_IDXGISwapChain_Present_InvalidInterval
    DXGI_MSG_Phone_IDXGIFactory_CreateSwapChain_MSAA_NotSupported
    DXGI_MSG_Phone_IDXGIFactory_CreateSwapChain_ScalingAspectRatioStretch_Supported_ModernApp
    DXGI_MSG_Phone_IDXGISwapChain_GetFrameStatistics_NotAvailable_ModernApp
    DXGI_MSG_Phone_IDXGISwapChain_Present_ReplaceInterval0With1
    DXGI_MSG_Phone_IDXGIFactory_CreateSwapChain_FailedRegisterWithCompositor
    DXGI_MSG_Phone_IDXGIFactory_CreateSwapChain_NotForegroundWindow_AtRendering
    DXGI_MSG_Phone_IDXGIFactory_CreateSwapChain_FLIP_SEQUENTIAL_BufferCount
    DXGI_MSG_Phone_IDXGIFactory_CreateSwapChain_FLIP_Modern_CoreWindow_Only
    DXGI_MSG_Phone_IDXGISwapChain_Present1_RequiresOverlays
    DXGI_MSG_Phone_IDXGISwapChain_SetBackgroundColor_FlipSequentialRequired
    DXGI_MSG_Phone_IDXGISwapChain_GetBackgroundColor_FlipSequentialRequired
End Enum


#Region "DXErrors"
' MessageId: DXGI_STATUS_OCCLUDED
'
[Description("The Present operation was invisible to the user.")]
Public Const DXGI_STATUS_OCCLUDED             = &H087A0001

'
' MessageId: DXGI_STATUS_CLIPPED
'
[Description("The Present operation was partially invisible to the user.")]
Public Const DXGI_STATUS_CLIPPED              = &H087A0002

'
' MessageId: DXGI_STATUS_NO_REDIRECTION
'
[Description("The driver is requesting that the DXGI runtime not use shared resources to communicate with the Desktop Window Manager.")]
Public Const DXGI_STATUS_NO_REDIRECTION       = &H087A0004

'
' MessageId: DXGI_STATUS_NO_DESKTOP_ACCESS
'
[Description("The Present operation was not visible because the Windows session has switched to another desktop (for example, ctrl-alt-de.")]
Public Const DXGI_STATUS_NO_DESKTOP_ACCESS    = &H087A0005

'
' MessageId: DXGI_STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE
'
[Description("The Present operation was not visible because the target monitor was being used for some other purpose.")]
Public Const DXGI_STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE = &H087A0006

'
' MessageId: DXGI_STATUS_MODE_CHANGED
'
[Description("The Present operation was not visible because the display mode changed. DXGI will have re-attempted the presentation.")]
Public Const DXGI_STATUS_MODE_CHANGED         = &H087A0007

'
' MessageId: DXGI_STATUS_MODE_CHANGE_IN_PROGRESS
'
[Description("The Present operation was not visible because another Direct3D device was attempting to take fullscreen mode at the time.")]
Public Const DXGI_STATUS_MODE_CHANGE_IN_PROGRESS = &H087A0008


'
' DXGI error codes
'

'
' MessageId: DXGI_ERROR_INVALID_CALL
'
[Description("The application made a call that is invalid. Either the parameters of the call or the state of some object was incorrect. Enable the D3D debug layer in order to see details via debug messages.")]
Public Const DXGI_ERROR_INVALID_CALL          = &H887A0001

'
' MessageId: DXGI_ERROR_NOT_FOUND
'
[Description("The object was not found. If calling IDXGIFactory::EnumAdaptes, there is no adapter with the specified ordinal.")]
Public Const DXGI_ERROR_NOT_FOUND             = &H887A0002

'
' MessageId: DXGI_ERROR_MORE_DATA
'
[Description("The caller did not supply a sufficiently large buffer.")]
Public Const DXGI_ERROR_MORE_DATA             = &H887A0003

'
' MessageId: DXGI_ERROR_UNSUPPORTED
'
[Description("The specified device interface or feature level is not supported on this system.")]
Public Const DXGI_ERROR_UNSUPPORTED           = &H887A0004

'
' MessageId: DXGI_ERROR_DEVICE_REMOVED
'
[Description("The GPU device instance has been suspended. Use GetDeviceRemovedReason to determine the appropriate action.")]
Public Const DXGI_ERROR_DEVICE_REMOVED        = &H887A0005

'
' MessageId: DXGI_ERROR_DEVICE_HUNG
'
[Description("The GPU will not respond to more commands, most likely because of an invalid command passed by the calling application.")]
Public Const DXGI_ERROR_DEVICE_HUNG           = &H887A0006

'
' MessageId: DXGI_ERROR_DEVICE_RESET
'
[Description("The GPU will not respond to more commands, most likely because some other application submitted invalid commands. The calling application should re-create the device and continue.")]
Public Const DXGI_ERROR_DEVICE_RESET          = &H887A0007

'
' MessageId: DXGI_ERROR_WAS_STILL_DRAWING
'
[Description("The GPU was busy at the moment when the call was made, and the call was neither executed nor scheduled.")]
Public Const DXGI_ERROR_WAS_STILL_DRAWING     = &H887A000A

'
' MessageId: DXGI_ERROR_FRAME_STATISTICS_DISJOINT
'
[Description("An Event (such as power cycle) interrupted the gathering of presentation statistics. Any previous statistics should be considered invalid.")]
Public Const DXGI_ERROR_FRAME_STATISTICS_DISJOINT = &H887A000B

'
' MessageId: DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE
'
[Description("Fullscreen mode could not be achieved because the specified output was already in use.")]
Public Const DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE = &H887A000C

'
' MessageId: DXGI_ERROR_DRIVER_INTERNAL_ERROR
'
[Description("An internal issue prevented the driver from carrying out the specified operation. The driver's state is probably suspect, and the application should not continue.")]
Public Const DXGI_ERROR_DRIVER_INTERNAL_ERROR = &H887A0020

'
' MessageId: DXGI_ERROR_NONEXCLUSIVE
'
[Description("A Global counter resource was in use, and the specified counter cannot be used by this Direct3D device at this time.")]
Public Const DXGI_ERROR_NONEXCLUSIVE          = &H887A0021

'
' MessageId: DXGI_ERROR_NOT_CURRENTLY_AVAILABLE
'
[Description("A resource is not available at the time of the call, but may become available later.")]
Public Const DXGI_ERROR_NOT_CURRENTLY_AVAILABLE = &H887A0022

'
' MessageId: DXGI_ERROR_REMOTE_CLIENT_DISCONNECTED
'
[Description("The application's remote device has been removed due to session disconnect or network disconnect. The application should call IDXGIFactory1::IsCurrent to find out when the remote device becomes available again.")]
Public Const DXGI_ERROR_REMOTE_CLIENT_DISCONNECTED = &H887A0023

'
' MessageId: DXGI_ERROR_REMOTE_OUTOFMEMORY
'
[Description("The device has been removed during a remote session because the remote computer ran out of memory.")]
Public Const DXGI_ERROR_REMOTE_OUTOFMEMORY    = &H887A0024

'
' MessageId: DXGI_ERROR_ACCESS_LOST
'
[Description("The keyed mutex was abandoned.")]
Public Const DXGI_ERROR_ACCESS_LOST           = &H887A0026

'
' MessageId: DXGI_ERROR_WAIT_TIMEOUT
'
[Description("The timeout value has elapsed and the resource is not yet available.")]
Public Const DXGI_ERROR_WAIT_TIMEOUT          = &H887A0027

'
' MessageId: DXGI_ERROR_SESSION_DISCONNECTED
'
[Description("The output duplication has been turned off because the Windows session ended or was disconnected. This happens when a remote user disconnects, or when 'switch user' is used locally.")]
Public Const DXGI_ERROR_SESSION_DISCONNECTED  = &H887A0028

'
' MessageId: DXGI_ERROR_RESTRICT_TO_OUTPUT_STALE
'
[Description("The DXGI output (monitor) to which the swapchain content was restricted, has been disconnected or changed.")]
Public Const DXGI_ERROR_RESTRICT_TO_OUTPUT_STALE = &H887A0029

'
' MessageId: DXGI_ERROR_CANNOT_PROTECT_CONTENT
'
[Description("DXGI is unable to provide content protection on the swapchain. This is typically caused by an older driver, or by the application using a swapchain that is incompatible with content protection.")]
Public Const DXGI_ERROR_CANNOT_PROTECT_CONTENT = &H887A002A

'
' MessageId: DXGI_ERROR_ACCESS_DENIED
'
[Description("The application is trying to use a resource to which it does not have the required access privileges. This is most commonly caused by writing to a shared resource with read-only access.")]
Public Const DXGI_ERROR_ACCESS_DENIED         = &H887A002B

'
' MessageId: DXGI_ERROR_NAME_ALREADY_EXISTS
'
[Description("The application is trying to create a shared handle using a name that is already associated with some other resource.")]
Public Const DXGI_ERROR_NAME_ALREADY_EXISTS   = &H887A002C

'
' MessageId: DXGI_ERROR_SDK_COMPONENT_MISSING
'
[Description("The application requested an operation that depends on an SDK component that is missing or mismatched.")]
Public Const DXGI_ERROR_SDK_COMPONENT_MISSING = &H887A002D

'
' MessageId: DXGI_ERROR_NOT_CURRENT
'
[Description("The DXGI objects that the application has created are no longer current & need to be recreated for this operation to be performed.")]
Public Const DXGI_ERROR_NOT_CURRENT           = &H887A002E

'
' MessageId: DXGI_ERROR_HW_PROTECTION_OUTOFMEMORY
'
[Description("Insufficient HW protected memory exits for proper Function.")]
Public Const DXGI_ERROR_HW_PROTECTION_OUTOFMEMORY = &H887A0030

'
' MessageId: DXGI_ERROR_DYNAMIC_CODE_POLICY_VIOLATION
'
[Description("Creating this device would violate the process's dynamic code policy.")]
Public Const DXGI_ERROR_DYNAMIC_CODE_POLICY_VIOLATION = &H887A0031

'
' MessageId: DXGI_ERROR_NON_COMPOSITED_UI
'
[Description("The operation failed because the compositor is not in control of the output.")]
Public Const DXGI_ERROR_NON_COMPOSITED_UI     = &H887A0032


'
' DXCore error codes
'

'
' MessageId: DXCORE_ERROR_EVENT_NOT_UNREGISTERED
'
[Description("The application failed to unregister from an Event it registered for.")]
Public Const DXCORE_ERROR_EVENT_NOT_UNREGISTERED = &H88800001


'
' Presentation error codes
'

'
' MessageId: PRESENTATION_ERROR_LOST
'
[Description("The presentation manager has been lost and can no longer be used. The application should destroy this presentation manager and create a new presentation manager to use.")]
Public Const PRESENTATION_ERROR_LOST          = &H88810001


'
' DXGI errors that are internal to the Desktop Window Manager
'

'
' MessageId: DXGI_STATUS_UNOCCLUDED
'
[Description("The swapchain has become unoccluded.")]
Public Const DXGI_STATUS_UNOCCLUDED           = &H087A0009

'
' MessageId: DXGI_STATUS_DDA_WAS_STILL_DRAWING
'
[Description("The adapter did not have access to the required resources to complete the Desktop Duplication Present() call, the Present() call needs to be made again. ")]
'
Public Const DXGI_STATUS_DDA_WAS_STILL_DRAWING = &H087A000A

'
' MessageId: DXGI_ERROR_MODE_CHANGE_IN_PROGRESS
'
[Description("An on-going mode change prevented completion of the call. The call may succeed if attempted later.")]
Public Const DXGI_ERROR_MODE_CHANGE_IN_PROGRESS = &H887A0025

'
' MessageId: DXGI_STATUS_PRESENT_REQUIRED
'
[Description("The present succeeded but the caller should present again on the next V-sync, even if there are no changes to the content.")]
Public Const DXGI_STATUS_PRESENT_REQUIRED     = &H087A002F


'
' DXGI errors that are produced by the D3D Shader Cache component
'

'
' MessageId: DXGI_ERROR_CACHE_CORRUPT
'
[Description("The cache is corrupt and either could not be opened or could not be reset.")]
Public Const DXGI_ERROR_CACHE_CORRUPT         = &H887A0033

'
' MessageId: DXGI_ERROR_CACHE_FULL
'
[Description("This entry would cause the cache to exceed its quota. On a load operation, this may indicate exceeding the maximum in-memory size.")]
Public Const DXGI_ERROR_CACHE_FULL            = &H887A0034

'
' MessageId: DXGI_ERROR_CACHE_HASH_COLLISION
'
[Description("A cache entry was found, but the key provided does not match the key stored in the entry.")]
Public Const DXGI_ERROR_CACHE_HASH_COLLISION  = &H887A0035

'
' MessageId: DXGI_ERROR_ALREADY_EXISTS
'
[Description("The desired element already exists.")]
Public Const DXGI_ERROR_ALREADY_EXISTS        = &H887A0036


'
' DXGI errors that are produced by the DDisplay
'

'
' MessageId: DXGI_ERROR_MPO_UNPINNED
'
[Description("The allocation of the MPO plane has been unpinned.")]
'
Public Const DXGI_ERROR_MPO_UNPINNED          = &H887A0064


'
' DXGI DDI
'

'
' MessageId: DXGI_DDI_ERR_WASSTILLDRAWING
'
[Description("The GPU was busy when the operation was requested.")]
Public Const DXGI_DDI_ERR_WASSTILLDRAWING     = &H887B0001

'
' MessageId: DXGI_DDI_ERR_UNSUPPORTED
'
[Description("The driver has rejected the creation of this resource.")]
Public Const DXGI_DDI_ERR_UNSUPPORTED         = &H887B0002

'
' MessageId: DXGI_DDI_ERR_NONEXCLUSIVE
'
[Description("The GPU counter was in use by another process or d3d device when application requested access to it.")]
Public Const DXGI_DDI_ERR_NONEXCLUSIVE        = &H887B0003


'
' Direct3D10
'

'
' MessageId: D3D10_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS
'
[Description("The application has exceeded the maximum number of unique state objects per Direct3D device. The limit is 4096 for feature levels up to 11.1.")]
Public Const D3D10_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS = &H88790001

'
' MessageId: D3D10_ERROR_FILE_NOT_FOUND
'
[Description("The specified file was not found.")]
Public Const D3D10_ERROR_FILE_NOT_FOUND       = &H88790002


'
' Direct3D11
'

'
' MessageId: D3D11_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS
'
[Description("The application has exceeded the maximum number of unique state objects per Direct3D device. The limit is 4096 for feature levels up to 11.1.")]
Public Const D3D11_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS = &H887C0001

'
' MessageId: D3D11_ERROR_FILE_NOT_FOUND
'
[Description("The specified file was not found.")]
Public Const D3D11_ERROR_FILE_NOT_FOUND       = &H887C0002

'
' MessageId: D3D11_ERROR_TOO_MANY_UNIQUE_VIEW_OBJECTS
'
[Description("The application has exceeded the maximum number of unique view objects per Direct3D device. The limit is 2^20 for feature levels up to 11.1.")]
Public Const D3D11_ERROR_TOO_MANY_UNIQUE_VIEW_OBJECTS = &H887C0003

'
' MessageId: D3D11_ERROR_DEFERRED_CONTEXT_MAP_WITHOUT_INITIAL_DISCARD
'
[Description("The application's first call per command list to Map on a deferred context did not use D3D11_MAP_WRITE_DISCARD.")]
Public Const D3D11_ERROR_DEFERRED_CONTEXT_MAP_WITHOUT_INITIAL_DISCARD = &H887C0004


'
' Direct3D12
'

'
' MessageId: D3D12_ERROR_ADAPTER_NOT_FOUND
'
[Description("The blob provided does not match the adapter that the device was created on.")]
Public Const D3D12_ERROR_ADAPTER_NOT_FOUND    = &H887E0001

'
' MessageId: D3D12_ERROR_DRIVER_VERSION_MISMATCH
'
[Description("The blob provided was created for a different version of the driver, and must be re-created.")]
Public Const D3D12_ERROR_DRIVER_VERSION_MISMATCH = &H887E0002

'
' MessageId: D3D12_ERROR_INVALID_REDIST
'
[Description("The D3D12 SDK version configuration of the host exe is invalid.")]
Public Const D3D12_ERROR_INVALID_REDIST       = &H887E0003


'
' Direct2D
'

'
' MessageId: D2DERR_WRONG_STATE
'
[Description("The object was not in the correct state to process the method.")]
Public Const D2DERR_WRONG_STATE               = &H88990001

'
' MessageId: D2DERR_NOT_INITIALIZED
'
[Description("The object has not yet been initialized.")]
Public Const D2DERR_NOT_INITIALIZED           = &H88990002

'
' MessageId: D2DERR_UNSUPPORTED_OPERATION
'
[Description("The requested operation is not supported.")]
Public Const D2DERR_UNSUPPORTED_OPERATION     = &H88990003

'
' MessageId: D2DERR_SCANNER_FAILED
'
[Description("The geometry scanner failed to process the data.")]
Public Const D2DERR_SCANNER_FAILED            = &H88990004

'
' MessageId: D2DERR_SCREEN_ACCESS_DENIED
'
[Description("Direct2D could not access the screen.")]
Public Const D2DERR_SCREEN_ACCESS_DENIED      = &H88990005

'
' MessageId: D2DERR_DISPLAY_STATE_INVALID
'
[Description("A valid display state could not be determined.")]
Public Const D2DERR_DISPLAY_STATE_INVALID     = &H88990006

'
' MessageId: D2DERR_ZERO_VECTOR
'
[Description("The supplied vector is zero.")]
Public Const D2DERR_ZERO_VECTOR               = &H88990007

'
' MessageId: D2DERR_INTERNAL_ERROR
'
[Description("An internal error (Direct2D bug) occurred. On checked builds, we would assert. The application should close this instance of Direct2D and should consider restarting its process.")]
Public Const D2DERR_INTERNAL_ERROR            = &H88990008

'
' MessageId: D2DERR_DISPLAY_FORMAT_NOT_SUPPORTED
'
[Description("The display format Direct2D needs to render is not supported by the hardware device.")]
Public Const D2DERR_DISPLAY_FORMAT_NOT_SUPPORTED = &H88990009

'
' MessageId: D2DERR_INVALID_CALL
'
[Description("A call to this method is invalid.")]
Public Const D2DERR_INVALID_CALL              = &H8899000A

'
' MessageId: D2DERR_NO_HARDWARE_DEVICE
'
[Description("No hardware rendering device is available for this operation.")]
Public Const D2DERR_NO_HARDWARE_DEVICE        = &H8899000B

'
' MessageId: D2DERR_RECREATE_TARGET
'
[Description("There has been a presentation error that may be recoverable. The caller needs to recreate, rerender the entire frame, and reattempt present.")]
Public Const D2DERR_RECREATE_TARGET           = &H8899000C

'
' MessageId: D2DERR_TOO_MANY_SHADER_ELEMENTS
'
[Description("Shader construction failed because it was too complex.")]
Public Const D2DERR_TOO_MANY_SHADER_ELEMENTS  = &H8899000D

'
' MessageId: D2DERR_SHADER_COMPILE_FAILED
'
[Description("Shader compilation failed.")]
Public Const D2DERR_SHADER_COMPILE_FAILED     = &H8899000E

'
' MessageId: D2DERR_MAX_TEXTURE_SIZE_EXCEEDED
'
[Description("Requested DirectX surface size exceeded maximum texture size.")]
Public Const D2DERR_MAX_TEXTURE_SIZE_EXCEEDED = &H8899000F

'
' MessageId: D2DERR_UNSUPPORTED_VERSION
'
[Description("The requested Direct2D version is not supported.")]
Public Const D2DERR_UNSUPPORTED_VERSION       = &H88990010

'
' MessageId: D2DERR_BAD_NUMBER
'
[Description("Invalid number.")]
Public Const D2DERR_BAD_NUMBER                = &H88990011

'
' MessageId: D2DERR_WRONG_FACTORY
'
[Description("Objects used together must be created from the same factory instance.")]
Public Const D2DERR_WRONG_FACTORY             = &H88990012

'
' MessageId: D2DERR_LAYER_ALREADY_IN_USE
'
[Description("A layer resource can only be in use once at any point in time.")]
Public Const D2DERR_LAYER_ALREADY_IN_USE      = &H88990013

'
' MessageId: D2DERR_POP_CALL_DID_NOT_MATCH_PUSH
'
[Description("The pop call did not match the corresponding push call.")]
Public Const D2DERR_POP_CALL_DID_NOT_MATCH_PUSH = &H88990014

'
' MessageId: D2DERR_WRONG_RESOURCE_DOMAIN
'
[Description("The resource was realized on the wrong render target.")]
Public Const D2DERR_WRONG_RESOURCE_DOMAIN     = &H88990015

'
' MessageId: D2DERR_PUSH_POP_UNBALANCED
'
[Description("The push and pop calls were unbalanced.")]
Public Const D2DERR_PUSH_POP_UNBALANCED       = &H88990016

'
' MessageId: D2DERR_RENDER_TARGET_HAS_LAYER_OR_CLIPRECT
'
[Description("Attempt to copy from a render target while a layer or clip rect is applied.")]
Public Const D2DERR_RENDER_TARGET_HAS_LAYER_OR_CLIPRECT = &H88990017

'
' MessageId: D2DERR_INCOMPATIBLE_BRUSH_TYPES
'
[Description("The brush types are incompatible for the call.")]
Public Const D2DERR_INCOMPATIBLE_BRUSH_TYPES  = &H88990018

'
' MessageId: D2DERR_WIN32_ERROR
'
[Description("An unknown win32 failure occurred.")]
Public Const D2DERR_WIN32_ERROR               = &H88990019

'
' MessageId: D2DERR_TARGET_NOT_GDI_COMPATIBLE
'
[Description("The render target is not compatible with GDI.")]
Public Const D2DERR_TARGET_NOT_GDI_COMPATIBLE = &H8899001A

'
' MessageId: D2DERR_TEXT_EFFECT_IS_WRONG_TYPE
'
[Description("A text client drawing effect object is of the wrong Type.")]
Public Const D2DERR_TEXT_EFFECT_IS_WRONG_TYPE = &H8899001B

'
' MessageId: D2DERR_TEXT_RENDERER_NOT_RELEASED
'
[Description("The application is holding a reference to the IDWriteTextRenderer interface after the corresponding DrawText or DrawTextLayout call has returned. The IDWriteTextRenderer instance will be invalid.")]
Public Const D2DERR_TEXT_RENDERER_NOT_RELEASED = &H8899001C

'
' MessageId: D2DERR_EXCEEDS_MAX_BITMAP_SIZE
'
[Description("The requested size is larger than the guaranteed supported texture size at the Direct3D device's current feature level.")]
Public Const D2DERR_EXCEEDS_MAX_BITMAP_SIZE   = &H8899001D

'
' MessageId: D2DERR_INVALID_GRAPH_CONFIGURATION
'
[Description("There was a configuration error in the graph.")]
Public Const D2DERR_INVALID_GRAPH_CONFIGURATION = &H8899001E

'
' MessageId: D2DERR_INVALID_INTERNAL_GRAPH_CONFIGURATION
'
[Description("There was a internal configuration error in the graph.")]
Public Const D2DERR_INVALID_INTERNAL_GRAPH_CONFIGURATION = &H8899001F

'
' MessageId: D2DERR_CYCLIC_GRAPH
'
[Description("There was a cycle in the graph.")]
Public Const D2DERR_CYCLIC_GRAPH              = &H88990020

'
' MessageId: D2DERR_BITMAP_CANNOT_DRAW
'
[Description("Cannot draw with a bitmap that has the D2D1_BITMAP_OPTIONS_CANNOT_DRAW Option.")]
Public Const D2DERR_BITMAP_CANNOT_DRAW        = &H88990021

'
' MessageId: D2DERR_OUTSTANDING_BITMAP_REFERENCES
'
[Description("The operation cannot complete while there are outstanding references to the target bitmap.")]
Public Const D2DERR_OUTSTANDING_BITMAP_REFERENCES = &H88990022

'
' MessageId: D2DERR_ORIGINAL_TARGET_NOT_BOUND
'
[Description("The operation failed because the original target is not currently bound as a target.")]
Public Const D2DERR_ORIGINAL_TARGET_NOT_BOUND = &H88990023

'
' MessageId: D2DERR_INVALID_TARGET
'
[Description("Cannot set the image as a target because it is either an effect or is a bitmap that does not have the D2D1_BITMAP_OPTIONS_TARGET flag set.")]
Public Const D2DERR_INVALID_TARGET            = &H88990024

'
' MessageId: D2DERR_BITMAP_BOUND_AS_TARGET
'
[Description("Cannot draw with a bitmap that is currently bound as the target bitmap.")]
Public Const D2DERR_BITMAP_BOUND_AS_TARGET    = &H88990025

'
' MessageId: D2DERR_INSUFFICIENT_DEVICE_CAPABILITIES
'
[Description("D3D Device does not have sufficient capabilities to perform the requested action.")]
Public Const D2DERR_INSUFFICIENT_DEVICE_CAPABILITIES = &H88990026

'
' MessageId: D2DERR_INTERMEDIATE_TOO_LARGE
'
[Description("The graph could not be rendered with the context's current tiling settings.")]
Public Const D2DERR_INTERMEDIATE_TOO_LARGE    = &H88990027

'
' MessageId: D2DERR_EFFECT_IS_NOT_REGISTERED
'
[Description("The CLSID provided to Unregister did not correspond to a registered effect.")]
Public Const D2DERR_EFFECT_IS_NOT_REGISTERED  = &H88990028

'
' MessageId: D2DERR_INVALID_PROPERTY
'
[Description("The specified Property does not exist.")]
Public Const D2DERR_INVALID_PROPERTY          = &H88990029

'
' MessageId: D2DERR_NO_SUBPROPERTIES
'
[Description("The specified Sub-property does not exist.")]
Public Const D2DERR_NO_SUBPROPERTIES          = &H8899002A

'
' MessageId: D2DERR_PRINT_JOB_CLOSED
'
[Description("AddPage or Close called after print job is already closed.")]
Public Const D2DERR_PRINT_JOB_CLOSED          = &H8899002B

'
' MessageId: D2DERR_PRINT_FORMAT_NOT_SUPPORTED
'
[Description("Error during print control creation. Indicates that none of the package target types (representing printer formats) are supported by Direct2D print control.")]
Public Const D2DERR_PRINT_FORMAT_NOT_SUPPORTED = &H8899002C

'
' MessageId: D2DERR_TOO_MANY_TRANSFORM_INPUTS
'
[Description("An effect attempted to use a transform with too many inputs.")]
Public Const D2DERR_TOO_MANY_TRANSFORM_INPUTS = &H8899002D

'
' MessageId: D2DERR_INVALID_GLYPH_IMAGE
'
[Description("An error was encountered while decoding or parsing the requested glyph image.")]
Public Const D2DERR_INVALID_GLYPH_IMAGE       = &H8899002E


'
' DirectWrite
'

'
' MessageId: DWRITE_E_FILEFORMAT
'
[Description("Indicates an error in an input file such as a font file.")]
Public Const DWRITE_E_FILEFORMAT              = &H88985000

'
' MessageId: DWRITE_E_UNEXPECTED
'
[Description("Indicates an error originating in DirectWrite code, which is not expected to occur but is safe to recover from.")]
Public Const DWRITE_E_UNEXPECTED              = &H88985001

'
' MessageId: DWRITE_E_NOFONT
'
[Description("Indicates the specified font does not exist.")]
Public Const DWRITE_E_NOFONT                  = &H88985002

'
' MessageId: DWRITE_E_FILENOTFOUND
'
[Description("A font file could not be opened because the file, directory, network location, drive, or other storage location does not exist or is unavailable.")]
Public Const DWRITE_E_FILENOTFOUND            = &H88985003

'
' MessageId: DWRITE_E_FILEACCESS
'
[Description("A font file exists but could not be opened due to access denied, sharing violation, or similar error.")]
Public Const DWRITE_E_FILEACCESS              = &H88985004

'
' MessageId: DWRITE_E_FONTCOLLECTIONOBSOLETE
'
[Description("A font collection is obsolete due to changes in the system.")]
Public Const DWRITE_E_FONTCOLLECTIONOBSOLETE  = &H88985005

'
' MessageId: DWRITE_E_ALREADYREGISTERED
'
[Description("The given interface is already registered.")]
Public Const DWRITE_E_ALREADYREGISTERED       = &H88985006

'
' MessageId: DWRITE_E_CACHEFORMAT
'
[Description("The font cache contains invalid data.")]
Public Const DWRITE_E_CACHEFORMAT             = &H88985007

'
' MessageId: DWRITE_E_CACHEVERSION
'
[Description("A font cache file corresponds to a different version of DirectWrite.")]
Public Const DWRITE_E_CACHEVERSION            = &H88985008

'
' MessageId: DWRITE_E_UNSUPPORTEDOPERATION
'
[Description("The operation is not supported for this Type of font.")]
Public Const DWRITE_E_UNSUPPORTEDOPERATION    = &H88985009

'
' MessageId: DWRITE_E_TEXTRENDERERINCOMPATIBLE
'
[Description("The version of the text renderer interface is not compatible.")]
Public Const DWRITE_E_TEXTRENDERERINCOMPATIBLE = &H8898500A

'
' MessageId: DWRITE_E_FLOWDIRECTIONCONFLICTS
'
[Description("The flow direction conflicts with the reading direction. They must be perpendicular to each other.")]
Public Const DWRITE_E_FLOWDIRECTIONCONFLICTS  = &H8898500B

'
' MessageId: DWRITE_E_NOCOLOR
'
[Description("The font or glyph run does not contain any colored glyphs.")]
Public Const DWRITE_E_NOCOLOR                 = &H8898500C

'
' MessageId: DWRITE_E_REMOTEFONT
'
[Description("A font resource could not be accessed because it is remote.")]
Public Const DWRITE_E_REMOTEFONT              = &H8898500D

'
' MessageId: DWRITE_E_DOWNLOADCANCELLED
'
[Description("A font download was canceled.")]
Public Const DWRITE_E_DOWNLOADCANCELLED       = &H8898500E

'
' MessageId: DWRITE_E_DOWNLOADFAILED
'
[Description("A font download failed.")]
Public Const DWRITE_E_DOWNLOADFAILED          = &H8898500F

'
' MessageId: DWRITE_E_TOOMANYDOWNLOADS
'
[Description("A font download request was not added or a download failed because there are too many active downloads.")]
Public Const DWRITE_E_TOOMANYDOWNLOADS        = &H88985010
#End Region

#Region "GUIDs"
Public Function CLSID_D2D12DAffineTransform() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6AA97485, &H6354, &H4CFC, &H90, &H8C, &HE4, &HA7, &H4F, &H62, &HC9, &H6C)
CLSID_D2D12DAffineTransform = iid
End Function
Public Function CLSID_D2D13DPerspectiveTransform() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC2844D0B, &H3D86, &H46E7, &H85, &HBA, &H52, &H6C, &H92, &H40, &HF3, &HFB)
CLSID_D2D13DPerspectiveTransform = iid
End Function
Public Function CLSID_D2D13DTransform() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE8467B04, &HEC61, &H4B8A, &HB5, &HDE, &HD4, &HD7, &H3D, &HEB, &HEA, &H5A)
CLSID_D2D13DTransform = iid
End Function
Public Function CLSID_D2D1ArithmeticComposite() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HFC151437, &H49A, &H4784, &HA2, &H4A, &HF1, &HC4, &HDA, &HF2, &H9, &H87)
CLSID_D2D1ArithmeticComposite = iid
End Function
Public Function CLSID_D2D1Atlas() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H913E2BE4, &HFDCF, &H4FE2, &HA5, &HF0, &H24, &H54, &HF1, &H4F, &HF4, &H8)
CLSID_D2D1Atlas = iid
End Function
Public Function CLSID_D2D1BitmapSource() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5FB6C24D, &HC6DD, &H4231, &H94, &H4, &H50, &HF4, &HD5, &HC3, &H25, &H2D)
CLSID_D2D1BitmapSource = iid
End Function
Public Function CLSID_D2D1Blend() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H81C5B77B, &H13F8, &H4CDD, &HAD, &H20, &HC8, &H90, &H54, &H7A, &HC6, &H5D)
CLSID_D2D1Blend = iid
End Function
Public Function CLSID_D2D1Border() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2A2D49C0, &H4ACF, &H43C7, &H8C, &H6A, &H7C, &H4A, &H27, &H87, &H4D, &H27)
CLSID_D2D1Border = iid
End Function
Public Function CLSID_D2D1Brightness() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8CEA8D1E, &H77B0, &H4986, &HB3, &HB9, &H2F, &HC, &HE, &HAE, &H78, &H87)
CLSID_D2D1Brightness = iid
End Function
Public Function CLSID_D2D1ColorManagement() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1A28524C, &HFDD6, &H4AA4, &HAE, &H8F, &H83, &H7E, &HB8, &H26, &H7B, &H37)
CLSID_D2D1ColorManagement = iid
End Function
Public Function CLSID_D2D1ColorMatrix() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H921F03D6, &H641C, &H47DF, &H85, &H2D, &HB4, &HBB, &H61, &H53, &HAE, &H11)
CLSID_D2D1ColorMatrix = iid
End Function
Public Function CLSID_D2D1Composite() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H48FC9F51, &HF6AC, &H48F1, &H8B, &H58, &H3B, &H28, &HAC, &H46, &HF7, &H6D)
CLSID_D2D1Composite = iid
End Function
Public Function CLSID_D2D1ConvolveMatrix() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H407F8C08, &H5533, &H4331, &HA3, &H41, &H23, &HCC, &H38, &H77, &H84, &H3E)
CLSID_D2D1ConvolveMatrix = iid
End Function
Public Function CLSID_D2D1Crop() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE23F7110, &HE9A, &H4324, &HAF, &H47, &H6A, &H2C, &HC, &H46, &HF3, &H5B)
CLSID_D2D1Crop = iid
End Function
Public Function CLSID_D2D1DirectionalBlur() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H174319A6, &H58E9, &H49B2, &HBB, &H63, &HCA, &HF2, &HC8, &H11, &HA3, &HDB)
CLSID_D2D1DirectionalBlur = iid
End Function
Public Function CLSID_D2D1DiscreteTransfer() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H90866FCD, &H488E, &H454B, &HAF, &H6, &HE5, &H4, &H1B, &H66, &HC3, &H6C)
CLSID_D2D1DiscreteTransfer = iid
End Function
Public Function CLSID_D2D1DisplacementMap() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HEDC48364, &H417, &H4111, &H94, &H50, &H43, &H84, &H5F, &HA9, &HF8, &H90)
CLSID_D2D1DisplacementMap = iid
End Function
Public Function CLSID_D2D1DistantDiffuse() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3E7EFD62, &HA32D, &H46D4, &HA8, &H3C, &H52, &H78, &H88, &H9A, &HC9, &H54)
CLSID_D2D1DistantDiffuse = iid
End Function
Public Function CLSID_D2D1DistantSpecular() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H428C1EE5, &H77B8, &H4450, &H8A, &HB5, &H72, &H21, &H9C, &H21, &HAB, &HDA)
CLSID_D2D1DistantSpecular = iid
End Function
Public Function CLSID_D2D1DpiCompensation() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6C26C5C7, &H34E0, &H46FC, &H9C, &HFD, &HE5, &H82, &H37, &H6, &HE2, &H28)
CLSID_D2D1DpiCompensation = iid
End Function
Public Function CLSID_D2D1Flood() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H61C23C20, &HAE69, &H4D8E, &H94, &HCF, &H50, &H7, &H8D, &HF6, &H38, &HF2)
CLSID_D2D1Flood = iid
End Function
Public Function CLSID_D2D1GammaTransfer() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H409444C4, &HC419, &H41A0, &HB0, &HC1, &H8C, &HD0, &HC0, &HA1, &H8E, &H42)
CLSID_D2D1GammaTransfer = iid
End Function
Public Function CLSID_D2D1GaussianBlur() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1FEB6D69, &H2FE6, &H4AC9, &H8C, &H58, &H1D, &H7F, &H93, &HE7, &HA6, &HA5)
CLSID_D2D1GaussianBlur = iid
End Function
Public Function CLSID_D2D1Scale() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9DAF9369, &H3846, &H4D0E, &HA4, &H4E, &HC, &H60, &H79, &H34, &HA5, &HD7)
CLSID_D2D1Scale = iid
End Function
Public Function CLSID_D2D1Histogram() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H881DB7D0, &HF7EE, &H4D4D, &HA6, &HD2, &H46, &H97, &HAC, &HC6, &H6E, &HE8)
CLSID_D2D1Histogram = iid
End Function
Public Function CLSID_D2D1HueRotation() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF4458EC, &H4B32, &H491B, &H9E, &H85, &HBD, &H73, &HF4, &H4D, &H3E, &HB6)
CLSID_D2D1HueRotation = iid
End Function
Public Function CLSID_D2D1LinearTransfer() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAD47C8FD, &H63EF, &H4ACC, &H9B, &H51, &H67, &H97, &H9C, &H3, &H6C, &H6)
CLSID_D2D1LinearTransfer = iid
End Function
Public Function CLSID_D2D1LuminanceToAlpha() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H41251AB7, &HBEB, &H46F8, &H9D, &HA7, &H59, &HE9, &H3F, &HCC, &HE5, &HDE)
CLSID_D2D1LuminanceToAlpha = iid
End Function
Public Function CLSID_D2D1Morphology() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HEAE6C40D, &H626A, &H4C2D, &HBF, &HCB, &H39, &H10, &H1, &HAB, &HE2, &H2)
CLSID_D2D1Morphology = iid
End Function
Public Function CLSID_D2D1OpacityMetadata() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6C53006A, &H4450, &H4199, &HAA, &H5B, &HAD, &H16, &H56, &HFE, &HCE, &H5E)
CLSID_D2D1OpacityMetadata = iid
End Function
Public Function CLSID_D2D1PointDiffuse() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HB9E303C3, &HC08C, &H4F91, &H8B, &H7B, &H38, &H65, &H6B, &HC4, &H8C, &H20)
CLSID_D2D1PointDiffuse = iid
End Function
Public Function CLSID_D2D1PointSpecular() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9C3CA26, &H3AE2, &H4F09, &H9E, &HBC, &HED, &H38, &H65, &HD5, &H3F, &H22)
CLSID_D2D1PointSpecular = iid
End Function
Public Function CLSID_D2D1Premultiply() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6EAB419, &HDEED, &H4018, &H80, &HD2, &H3E, &H1D, &H47, &H1A, &HDE, &HB2)
CLSID_D2D1Premultiply = iid
End Function
Public Function CLSID_D2D1Saturation() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5CB2D9CF, &H327D, &H459F, &HA0, &HCE, &H40, &HC0, &HB2, &H8, &H6B, &HF7)
CLSID_D2D1Saturation = iid
End Function
Public Function CLSID_D2D1Shadow() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC67EA361, &H1863, &H4E69, &H89, &HDB, &H69, &H5D, &H3E, &H9A, &H5B, &H6B)
CLSID_D2D1Shadow = iid
End Function
Public Function CLSID_D2D1SpotDiffuse() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H818A1105, &H7932, &H44F4, &HAA, &H86, &H8, &HAE, &H7B, &H2F, &H2C, &H93)
CLSID_D2D1SpotDiffuse = iid
End Function
Public Function CLSID_D2D1SpotSpecular() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HEDAE421E, &H7654, &H4A37, &H9D, &HB8, &H71, &HAC, &HC1, &HBE, &HB3, &HC1)
CLSID_D2D1SpotSpecular = iid
End Function
Public Function CLSID_D2D1TableTransfer() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5BF818C3, &H5E43, &H48CB, &HB6, &H31, &H86, &H83, &H96, &HD6, &HA1, &HD4)
CLSID_D2D1TableTransfer = iid
End Function
Public Function CLSID_D2D1Tile() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HB0784138, &H3B76, &H4BC5, &HB1, &H3B, &HF, &HA2, &HAD, &H2, &H65, &H9F)
CLSID_D2D1Tile = iid
End Function
Public Function CLSID_D2D1Turbulence() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HCF2BB6AE, &H889A, &H4AD7, &HBA, &H29, &HA2, &HFD, &H73, &H2C, &H9F, &HC9)
CLSID_D2D1Turbulence = iid
End Function
Public Function CLSID_D2D1UnPremultiply() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HFB9AC489, &HAD8D, &H41ED, &H99, &H99, &HBB, &H63, &H47, &HD1, &H10, &HF7)
CLSID_D2D1UnPremultiply = iid
End Function


'modDirectX - IIDs for DirectWrite and Direct2D


Public Function IID_ID2D1Factory() As UUID
'{06152247-6F50-465A-9245-118BFD3B6007}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6152247, CInt(&H6F50), CInt(&H465A), &H92, &H45, &H11, &H8B, &HFD, &H3B, &H60, &H7)
IID_ID2D1Factory = iid
End Function
Public Function IID_ID2D1RectangleGeometry() As UUID
'{2CD906A2-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906A2, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1RectangleGeometry = iid
End Function
Public Function IID_ID2D1Geometry() As UUID
'{2CD906A1-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906A1, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1Geometry = iid
End Function
Public Function IID_ID2D1Resource() As UUID
'{2CD90691-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD90691, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1Resource = iid
End Function
Public Function IID_ID2D1StrokeStyle() As UUID
'{2CD9069D-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD9069D, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1StrokeStyle = iid
End Function
Public Function IID_ID2D1SimplifiedGeometrySink() As UUID
'{2CD9069E-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD9069E, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1SimplifiedGeometrySink = iid
End Function
Public Function IID_ID2D1TessellationSink() As UUID
'{2CD906C1-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906C1, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1TessellationSink = iid
End Function
Public Function IID_ID2D1RoundedRectangleGeometry() As UUID
'{2CD906A3-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906A3, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1RoundedRectangleGeometry = iid
End Function
Public Function IID_ID2D1EllipseGeometry() As UUID
'{2CD906A4-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906A4, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1EllipseGeometry = iid
End Function
Public Function IID_ID2D1GeometryGroup() As UUID
'{2CD906A6-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906A6, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1GeometryGroup = iid
End Function
Public Function IID_ID2D1TransformedGeometry() As UUID
'{2CD906BB-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906BB, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1TransformedGeometry = iid
End Function
Public Function IID_ID2D1PathGeometry() As UUID
'{2CD906A5-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906A5, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1PathGeometry = iid
End Function
Public Function IID_ID2D1GeometrySink() As UUID
'{2CD9069F-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD9069F, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1GeometrySink = iid
End Function
Public Function IID_ID2D1DrawingStateBlock() As UUID
'{28506E39-EBF6-46A1-BB47-FD85565AB957}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H28506E39, CInt(&HEBF6), CInt(&H46A1), &HBB, &H47, &HFD, &H85, &H56, &H5A, &HB9, &H57)
IID_ID2D1DrawingStateBlock = iid
End Function
Public Function IID_ID2D1RenderTarget() As UUID
'{2CD90694-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD90694, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1RenderTarget = iid
End Function
Public Function IID_ID2D1Bitmap() As UUID
'{A2296057-EA42-4099-983B-539FB6505426}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA2296057, CInt(&HEA42), CInt(&H4099), &H98, &H3B, &H53, &H9F, &HB6, &H50, &H54, &H26)
IID_ID2D1Bitmap = iid
End Function
Public Function IID_ID2D1BitmapBrush() As UUID
'{2CD906AA-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906AA, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1BitmapBrush = iid
End Function
Public Function IID_ID2D1Brush() As UUID
'{2CD906A8-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906A8, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1Brush = iid
End Function
Public Function IID_ID2D1SolidColorBrush() As UUID
'{2CD906A9-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906A9, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1SolidColorBrush = iid
End Function
Public Function IID_ID2D1GradientStopCollection() As UUID
'{2CD906A7-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906A7, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1GradientStopCollection = iid
End Function
Public Function IID_ID2D1LinearGradientBrush() As UUID
'{2CD906AB-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906AB, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1LinearGradientBrush = iid
End Function
Public Function IID_ID2D1RadialGradientBrush() As UUID
'{2CD906AC-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906AC, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1RadialGradientBrush = iid
End Function
Public Function IID_ID2D1BitmapRenderTarget() As UUID
'{2CD90695-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD90695, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1BitmapRenderTarget = iid
End Function
Public Function IID_ID2D1Layer() As UUID
'{2CD9069B-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD9069B, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1Layer = iid
End Function
Public Function IID_ID2D1Mesh() As UUID
'{2CD906C2-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906C2, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1Mesh = iid
End Function
Public Function IID_ID2D1HwndRenderTarget() As UUID
'{2CD90698-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD90698, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1HwndRenderTarget = iid
End Function
Public Function IID_ID2D1DCRenderTarget() As UUID
'{1C51BC64-DE61-46FD-9899-63A5D8F03950}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1C51BC64, CInt(&HDE61), CInt(&H46FD), &H98, &H99, &H63, &HA5, &HD8, &HF0, &H39, &H50)
IID_ID2D1DCRenderTarget = iid
End Function
Public Function IID_ID2D1GdiInteropRenderTarget() As UUID
'{E0DB51C3-6F77-4BAE-B3D5-E47509B35838}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE0DB51C3, CInt(&H6F77), CInt(&H4BAE), &HB3, &HD5, &HE4, &H75, &H9, &HB3, &H58, &H38)
IID_ID2D1GdiInteropRenderTarget = iid
End Function




Public Function IID_IDWriteFactory() As UUID
'{B859EE5A-D838-4B5B-A2E8-1ADC7D93DB48}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB859EE5A, CInt(&HD838), CInt(&H4B5B), &HA2, &HE8, &H1A, &HDC, &H7D, &H93, &HDB, &H48)
IID_IDWriteFactory = iid
End Function
Public Function IID_IDWriteFontCollection() As UUID
'{A84CEE02-3EEA-4EEE-A827-87C1A02A0FCC}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA84CEE02, CInt(&H3EEA), CInt(&H4EEE), &HA8, &H27, &H87, &HC1, &HA0, &H2A, &HF, &HCC)
IID_IDWriteFontCollection = iid
End Function
Public Function IID_IDWriteFontFamily() As UUID
'{DA20D8EF-812A-4C43-9802-62EC4ABD7ADD}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDA20D8EF, CInt(&H812A), CInt(&H4C43), &H98, &H2, &H62, &HEC, &H4A, &HBD, &H7A, &HDD)
IID_IDWriteFontFamily = iid
End Function
Public Function IID_IDWriteFontList() As UUID
'{1A0D8438-1D97-4EC1-AEF9-A2FB86ED6ACB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1A0D8438, CInt(&H1D97), CInt(&H4EC1), &HAE, &HF9, &HA2, &HFB, &H86, &HED, &H6A, &HCB)
IID_IDWriteFontList = iid
End Function
Public Function IID_IDWriteFont() As UUID
'{ACD16696-8C14-4F5D-877E-FE3FC1D32737}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HACD16696, CInt(&H8C14), CInt(&H4F5D), &H87, &H7E, &HFE, &H3F, &HC1, &HD3, &H27, &H37)
IID_IDWriteFont = iid
End Function
Public Function IID_IDWriteLocalizedStrings() As UUID
'{08256209-099A-4B34-B86D-C22B110E7771}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8256209, CInt(&H99A), CInt(&H4B34), &HB8, &H6D, &HC2, &H2B, &H11, &HE, &H77, &H71)
IID_IDWriteLocalizedStrings = iid
End Function
Public Function IID_IDWriteFontFace() As UUID
'{5F49804D-7024-4D43-BFA9-D25984F53849}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5F49804D, CInt(&H7024), CInt(&H4D43), &HBF, &HA9, &HD2, &H59, &H84, &HF5, &H38, &H49)
IID_IDWriteFontFace = iid
End Function
Public Function IID_IDWriteRenderingParams() As UUID
'{2F0DA53A-2ADD-47CD-82EE-D9EC34688E75}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2F0DA53A, CInt(&H2ADD), CInt(&H47CD), &H82, &HEE, &HD9, &HEC, &H34, &H68, &H8E, &H75)
IID_IDWriteRenderingParams = iid
End Function
Public Function IID_IDWriteFontCollectionLoader() As UUID
'{CCA920E4-52F0-492B-BFA8-29C72EE0A468}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HCCA920E4, CInt(&H52F0), CInt(&H492B), &HBF, &HA8, &H29, &HC7, &H2E, &HE0, &HA4, &H68)
IID_IDWriteFontCollectionLoader = iid
End Function
Public Function IID_IDWriteFontFileEnumerator() As UUID
'{72755049-5FF7-435D-8348-4BE97CFA6C7C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H72755049, CInt(&H5FF7), CInt(&H435D), &H83, &H48, &H4B, &HE9, &H7C, &HFA, &H6C, &H7C)
IID_IDWriteFontFileEnumerator = iid
End Function
Public Function IID_IDWriteFontFile() As UUID
'{739D886A-CEF5-47DC-8769-1A8B41BEBBB0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H739D886A, CInt(&HCEF5), CInt(&H47DC), &H87, &H69, &H1A, &H8B, &H41, &HBE, &HBB, &HB0)
IID_IDWriteFontFile = iid
End Function
Public Function IID_IDWriteFontFileLoader() As UUID
'{727CAD4E-D6AF-4C9E-8A08-D695B11CAA49}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H727CAD4E, CInt(&HD6AF), CInt(&H4C9E), &H8A, &H8, &HD6, &H95, &HB1, &H1C, &HAA, &H49)
IID_IDWriteFontFileLoader = iid
End Function
Public Function IID_IDWriteFontFileStream() As UUID
'{6D4865FE-0AB8-4D91-8F62-5DD6BE34A3E0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6D4865FE, CInt(&HAB8), CInt(&H4D91), &H8F, &H62, &H5D, &HD6, &HBE, &H34, &HA3, &HE0)
IID_IDWriteFontFileStream = iid
End Function
Public Function IID_IDWriteTextFormat() As UUID
'{9C906818-31D7-4FD3-A151-7C5E225DB55A}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9C906818, CInt(&H31D7), CInt(&H4FD3), &HA1, &H51, &H7C, &H5E, &H22, &H5D, &HB5, &H5A)
IID_IDWriteTextFormat = iid
End Function
Public Function IID_IDWriteInlineObject() As UUID
'{8339FDE3-106F-47AB-8373-1C6295EB10B3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8339FDE3, CInt(&H106F), CInt(&H47AB), &H83, &H73, &H1C, &H62, &H95, &HEB, &H10, &HB3)
IID_IDWriteInlineObject = iid
End Function
Public Function IID_IDWriteTextRenderer() As UUID
'{EF8A8135-5CC6-45FE-8825-C5A0724EB819}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEF8A8135, CInt(&H5CC6), CInt(&H45FE), &H88, &H25, &HC5, &HA0, &H72, &H4E, &HB8, &H19)
IID_IDWriteTextRenderer = iid
End Function
Public Function IID_IDWritePixelSnapping() As UUID
'{EAF3A2DA-ECF4-4D24-B644-B34F6842024B}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEAF3A2DA, CInt(&HECF4), CInt(&H4D24), &HB6, &H44, &HB3, &H4F, &H68, &H42, &H2, &H4B)
IID_IDWritePixelSnapping = iid
End Function
Public Function IID_IDWriteTypography() As UUID
'{55F1112B-1DC2-4B3C-9541-F46894ED85B6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H55F1112B, CInt(&H1DC2), CInt(&H4B3C), &H95, &H41, &HF4, &H68, &H94, &HED, &H85, &HB6)
IID_IDWriteTypography = iid
End Function
Public Function IID_IDWriteGdiInterop() As UUID
'{1EDD9491-9853-4299-898F-6432983B6F3A}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1EDD9491, CInt(&H9853), CInt(&H4299), &H89, &H8F, &H64, &H32, &H98, &H3B, &H6F, &H3A)
IID_IDWriteGdiInterop = iid
End Function
Public Function IID_IDWriteBitmapRenderTarget() As UUID
'{5E5A32A3-8DFF-4773-9FF6-0696EAB77267}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5E5A32A3, CInt(&H8DFF), CInt(&H4773), &H9F, &HF6, &H6, &H96, &HEA, &HB7, &H72, &H67)
IID_IDWriteBitmapRenderTarget = iid
End Function
Public Function IID_IDWriteTextLayout() As UUID
'{53737037-6D14-410B-9BFE-0B182BB70961}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H53737037, CInt(&H6D14), CInt(&H410B), &H9B, &HFE, &HB, &H18, &H2B, &HB7, &H9, &H61)
IID_IDWriteTextLayout = iid
End Function
Public Function IID_IDWriteTextAnalyzer() As UUID
'{B7E6163E-7F46-43B4-84B3-E4E6249C365D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB7E6163E, CInt(&H7F46), CInt(&H43B4), &H84, &HB3, &HE4, &HE6, &H24, &H9C, &H36, &H5D)
IID_IDWriteTextAnalyzer = iid
End Function
Public Function IID_IDWriteTextAnalysisSource() As UUID
'{688E1A58-5094-47C8-ADC8-FBCEA60AE92B}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H688E1A58, CInt(&H5094), CInt(&H47C8), &HAD, &HC8, &HFB, &HCE, &HA6, &HA, &HE9, &H2B)
IID_IDWriteTextAnalysisSource = iid
End Function
Public Function IID_IDWriteNumberSubstitution() As UUID
'{14885CC9-BAB0-4F90-B6ED-5C366A2CD03D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H14885CC9, CInt(&HBAB0), CInt(&H4F90), &HB6, &HED, &H5C, &H36, &H6A, &H2C, &HD0, &H3D)
IID_IDWriteNumberSubstitution = iid
End Function
Public Function IID_IDWriteTextAnalysisSink() As UUID
'{5810CD44-0CA0-4701-B3FA-BEC5182AE4F6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5810CD44, CInt(&HCA0), CInt(&H4701), &HB3, &HFA, &HBE, &HC5, &H18, &H2A, &HE4, &HF6)
IID_IDWriteTextAnalysisSink = iid
End Function
Public Function IID_IDWriteGlyphRunAnalysis() As UUID
'{7D97DBF7-E085-42D4-81E3-6A883BDED118}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7D97DBF7, CInt(&HE085), CInt(&H42D4), &H81, &HE3, &H6A, &H88, &H3B, &HDE, &HD1, &H18)
IID_IDWriteGlyphRunAnalysis = iid
End Function
Public Function IID_IDWriteLocalFontFileLoader() As UUID
'{B2D9F3EC-C9FE-4A11-A2EC-D86208F7C0A2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB2D9F3EC, CInt(&HC9FE), CInt(&H4A11), &HA2, &HEC, &HD8, &H62, &H8, &HF7, &HC0, &HA2)
IID_IDWriteLocalFontFileLoader = iid
End Function
Public Function IID_IDWriteFontFamily1() As UUID
'{DA20D8EF-812A-4C43-9802-62EC4ABD7ADF}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDA20D8EF, CInt(&H812A), CInt(&H4C43), &H98, &H02, &H62, &HEC, &H4A, &HBD, &H7A, &HDF)
IID_IDWriteFontFamily1 = iid
End Function
Public Function IID_IDWriteFontList1() As UUID
'{DA20D8EF-812A-4C43-9802-62EC4ABD7ADE}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDA20D8EF, CInt(&H812A), CInt(&H4C43), &H98, &H02, &H62, &HEC, &H4A, &HBD, &H7A, &HDE)
IID_IDWriteFontList1 = iid
End Function
Public Function IID_IDWriteFontFaceReference() As UUID
'{5E7FA7CA-DDE3-424C-89F0-9FCD6FED58CD}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5E7FA7CA, CInt(&HDDE3), CInt(&H424C), &H89, &HF0, &H9F, &HCD, &H6F, &HED, &H58, &HCD)
IID_IDWriteFontFaceReference = iid
End Function
Public Function IID_IDWriteFont3() As UUID
'{29748ED6-8C9C-4A6A-BE0B-D912E8538944}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H29748ED6, CInt(&H8C9C), CInt(&H4A6A), &HBE, &H0B, &HD9, &H12, &HE8, &H53, &H89, &H44)
IID_IDWriteFont3 = iid
End Function
Public Function IID_IDWriteFontFace3() As UUID
'{D37D7598-09BE-4222-A236-2081341CC1F2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD37D7598, CInt(&H09BE), CInt(&H4222), &HA2, &H36, &H20, &H81, &H34, &H1C, &HC1, &HF2)
IID_IDWriteFontFace3 = iid
End Function
Public Function IID_IDWriteStringList() As UUID
'{CFEE3140-1157-47CA-8B85-31BFCF3F2D0E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HCFEE3140, CInt(&H1157), CInt(&H47CA), &H8B, &H85, &H31, &HBF, &HCF, &H3F, &H2D, &H0E)
IID_IDWriteStringList = iid
End Function
Public Function IID_IDWriteFontDownloadListener() As UUID
'{B06FE5B9-43EC-4393-881B-DBE4DC72FDA7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB06FE5B9, CInt(&H43EC), CInt(&H4393), &H88, &H1B, &HDB, &HE4, &HDC, &H72, &HFD, &HA7)
IID_IDWriteFontDownloadListener = iid
End Function
Public Function IID_IDWriteFontDownloadQueue() As UUID
'{B71E6052-5AEA-4FA3-832E-F60D431F7E91}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB71E6052, CInt(&H5AEA), CInt(&H4FA3), &H83, &H2E, &HF6, &H0D, &H43, &H1F, &H7E, &H91)
IID_IDWriteFontDownloadQueue = iid
End Function
Public Function IID_IDWriteGdiInterop1() As UUID
'{4556BE70-3ABD-4F70-90BE-421780A6F515}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4556BE70, CInt(&H3ABD), CInt(&H4F70), &H90, &HBE, &H42, &H17, &H80, &HA6, &HF5, &H15)
IID_IDWriteGdiInterop1 = iid
End Function
Public Function IID_IDWriteTextFormat2() As UUID
'{F67E0EDD-9E3D-4ECC-8C32-4183253DFE70}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF67E0EDD, CInt(&H9E3D), CInt(&H4ECC), &H8C, &H32, &H41, &H83, &H25, &H3D, &HFE, &H70)
IID_IDWriteTextFormat2 = iid
End Function
Public Function IID_IDWriteTextLayout3() As UUID
'{07DDCD52-020E-4DE8-AC33-6C953D83F92D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H07DDCD52, CInt(&H020E), CInt(&H4DE8), &HAC, &H33, &H6C, &H95, &H3D, &H83, &HF9, &H2D)
IID_IDWriteTextLayout3 = iid
End Function
Public Function IID_IDWriteColorGlyphRunEnumerator1() As UUID
'{7C5F86DA-C7A1-4F05-B8E1-55A179FE5A35}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7C5F86DA, CInt(&HC7A1), CInt(&H4F05), &HB8, &HE1, &H55, &HA1, &H79, &HFE, &H5A, &H35)
IID_IDWriteColorGlyphRunEnumerator1 = iid
End Function
Public Function IID_IDWriteFontFace4() As UUID
'{27F2A904-4EB8-441D-9678-0563F53E3E2F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H27F2A904, CInt(&H4EB8), CInt(&H441D), &H96, &H78, &H05, &H63, &HF5, &H3E, &H3E, &H2F)
IID_IDWriteFontFace4 = iid
End Function
Public Function IID_IDWriteFactory4() As UUID
'{4B0B5BD3-0797-4549-8AC5-FE915CC53856}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4B0B5BD3, CInt(&H0797), CInt(&H4549), &H8A, &HC5, &HFE, &H91, &H5C, &HC5, &H38, &H56)
IID_IDWriteFactory4 = iid
End Function
Public Function IID_IDWriteFontSetBuilder1() As UUID
'{3FF7715F-3CDC-4DC6-9B72-EC5621DCCAFD}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3FF7715F, CInt(&H3CDC), CInt(&H4DC6), &H9B, &H72, &HEC, &H56, &H21, &HDC, &HCA, &HFD)
IID_IDWriteFontSetBuilder1 = iid
End Function
Public Function IID_IDWriteAsyncResult() As UUID
'{CE25F8FD-863B-4D13-9651-C1F88DC73FE2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HCE25F8FD, CInt(&H863B), CInt(&H4D13), &H96, &H51, &HC1, &HF8, &H8D, &HC7, &H3F, &HE2)
IID_IDWriteAsyncResult = iid
End Function
Public Function IID_IDWriteRemoteFontFileStream() As UUID
'{4DB3757A-2C72-4ED9-B2B6-1ABABE1AFF9C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4DB3757A, CInt(&H2C72), CInt(&H4ED9), &HB2, &HB6, &H1A, &HBA, &HBE, &H1A, &HFF, &H9C)
IID_IDWriteRemoteFontFileStream = iid
End Function
Public Function IID_IDWriteRemoteFontFileLoader() As UUID
'{68648C83-6EDE-46C0-AB46-20083A887FDE}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H68648C83, CInt(&H6EDE), CInt(&H46C0), &HAB, &H46, &H20, &H08, &H3A, &H88, &H7F, &HDE)
IID_IDWriteRemoteFontFileLoader = iid
End Function
Public Function IID_IDWriteInMemoryFontFileLoader() As UUID
'{DC102F47-A12D-4B1C-822D-9E117E33043F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDC102F47, CInt(&HA12D), CInt(&H4B1C), &H82, &H2D, &H9E, &H11, &H7E, &H33, &H04, &H3F)
IID_IDWriteInMemoryFontFileLoader = iid
End Function
Public Function IID_IDWriteFactory5() As UUID
'{958DB99A-BE2A-4F09-AF7D-65189803D1D3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H958DB99A, CInt(&HBE2A), CInt(&H4F09), &HAF, &H7D, &H65, &H18, &H98, &H03, &HD1, &HD3)
IID_IDWriteFactory5 = iid
End Function
Public Function IID_IDWriteFactory6() As UUID
'{F3744D80-21F7-42EB-B35D-995BC72FC223}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF3744D80, CInt(&H21F7), CInt(&H42EB), &HB3, &H5D, &H99, &H5B, &HC7, &H2F, &HC2, &H23)
IID_IDWriteFactory6 = iid
End Function
Public Function IID_IDWriteFontFace5() As UUID
'{98EFF3A5-B667-479A-B145-E2FA5B9FDC29}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H98EFF3A5, CInt(&HB667), CInt(&H479A), &HB1, &H45, &HE2, &HFA, &H5B, &H9F, &HDC, &H29)
IID_IDWriteFontFace5 = iid
End Function
Public Function IID_IDWriteFontResource() As UUID
'{1F803A76-6871-48E8-987F-B975551C50F2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1F803A76, CInt(&H6871), CInt(&H48E8), &H98, &H7F, &HB9, &H75, &H55, &H1C, &H50, &HF2)
IID_IDWriteFontResource = iid
End Function
Public Function IID_IDWriteFontFaceReference1() As UUID
'{C081FE77-2FD1-41AC-A5A3-34983C4BA61A}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC081FE77, CInt(&H2FD1), CInt(&H41AC), &HA5, &HA3, &H34, &H98, &H3C, &H4B, &HA6, &H1A)
IID_IDWriteFontFaceReference1 = iid
End Function
Public Function IID_IDWriteFontSetBuilder2() As UUID
'{EE5BA612-B131-463C-8F4F-3189B9401E45}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEE5BA612, CInt(&HB131), CInt(&H463C), &H8F, &H4F, &H31, &H89, &HB9, &H40, &H1E, &H45)
IID_IDWriteFontSetBuilder2 = iid
End Function
Public Function IID_IDWriteFontSet1() As UUID
'{7E9FDA85-6C92-4053-BC47-7AE3530DB4D3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7E9FDA85, CInt(&H6C92), CInt(&H4053), &HBC, &H47, &H7A, &HE3, &H53, &H0D, &HB4, &HD3)
IID_IDWriteFontSet1 = iid
End Function
Public Function IID_IDWriteFontList2() As UUID
'{C0763A34-77AF-445A-B735-08C37B0A5BF5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC0763A34, CInt(&H77AF), CInt(&H445A), &HB7, &H35, &H08, &HC3, &H7B, &H0A, &H5B, &HF5)
IID_IDWriteFontList2 = iid
End Function
Public Function IID_IDWriteFontFamily2() As UUID
'{3ED49E77-A398-4261-B9CF-C126C2131EF3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3ED49E77, CInt(&HA398), CInt(&H4261), &HB9, &HCF, &HC1, &H26, &HC2, &H13, &H1E, &HF3)
IID_IDWriteFontFamily2 = iid
End Function
Public Function IID_IDWriteFontCollection2() As UUID
'{514039C6-4617-4064-BF8B-92EA83E506E0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H514039C6, CInt(&H4617), CInt(&H4064), &HBF, &H8B, &H92, &HEA, &H83, &HE5, &H06, &HE0)
IID_IDWriteFontCollection2 = iid
End Function
Public Function IID_IDWriteTextLayout4() As UUID
'{05A9BF42-223F-4441-B5FB-8263685F55E9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H05A9BF42, CInt(&H223F), CInt(&H4441), &HB5, &HFB, &H82, &H63, &H68, &H5F, &H55, &HE9)
IID_IDWriteTextLayout4 = iid
End Function
Public Function IID_IDWriteTextFormat3() As UUID
'{6D3B5641-E550-430D-A85B-B7BF48A93427}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6D3B5641, CInt(&HE550), CInt(&H430D), &HA8, &H5B, &HB7, &HBF, &H48, &HA9, &H34, &H27)
IID_IDWriteTextFormat3 = iid
End Function
Public Function IID_IDWriteFontFallback1() As UUID
'{2397599D-DD0D-4681-BD6A-F4F31EAADE77}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2397599D, CInt(&HDD0D), CInt(&H4681), &HBD, &H6A, &HF4, &HF3, &H1E, &HAA, &HDE, &H77)
IID_IDWriteFontFallback1 = iid
End Function
Public Function IID_IDWriteFontSet2() As UUID
'{DC7EAD19-E54C-43AF-B2DA-4E2B79BA3F7F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDC7EAD19, CInt(&HE54C), CInt(&H43AF), &HB2, &HDA, &H4E, &H2B, &H79, &HBA, &H3F, &H7F)
IID_IDWriteFontSet2 = iid
End Function
Public Function IID_IDWriteFontCollection3() As UUID
'{A4D055A6-F9E3-4E25-93B7-9E309F3AF8E9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA4D055A6, CInt(&HF9E3), CInt(&H4E25), &H93, &HB7, &H9E, &H30, &H9F, &H3A, &HF8, &HE9)
IID_IDWriteFontCollection3 = iid
End Function
Public Function IID_IDWriteFactory7() As UUID
'{35D0E0B3-9076-4D2E-A016-A91B568A06B4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H35D0E0B3, CInt(&H9076), CInt(&H4D2E), &HA0, &H16, &HA9, &H1B, &H56, &H8A, &H06, &HB4)
IID_IDWriteFactory7 = iid
End Function
Public Function IID_IDWriteFontSet3() As UUID
'{7C073EF2-A7F4-4045-8C32-8AB8AE640F90}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7C073EF2, CInt(&HA7F4), CInt(&H4045), &H8C, &H32, &H8A, &HB8, &HAE, &H64, &H0F, &H90)
IID_IDWriteFontSet3 = iid
End Function
Public Function IID_IDWriteFontFace6() As UUID
'{C4B1FE1B-6E84-47D5-B54C-A597981B06AD}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC4B1FE1B, CInt(&H6E84), CInt(&H47D5), &HB5, &H4C, &HA5, &H97, &H98, &H1B, &H06, &HAD)
IID_IDWriteFontFace6 = iid
End Function
Public Function IID_IDWriteFontSet4() As UUID
'{EEC175FC-BEA9-4C86-8B53-CCBDD7DF0C82}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEEC175FC, CInt(&HBEA9), CInt(&H4C86), &H8B, &H53, &HCC, &HBD, &HD7, &HDF, &H0C, &H82)
IID_IDWriteFontSet4 = iid
End Function
Public Function IID_IDWriteBitmapRenderTarget2() As UUID
'{C553A742-FC01-44DA-A66E-B8B9ED6C3995}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC553A742, CInt(&HFC01), CInt(&H44DA), &HA6, &H6E, &HB8, &HB9, &HED, &H6C, &H39, &H95)
IID_IDWriteBitmapRenderTarget2 = iid
End Function
Public Function IID_IDWritePaintReader() As UUID
'{8128E912-3B97-42A5-AB6C-24AAD3A86E54}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8128E912, CInt(&H3B97), CInt(&H42A5), &HAB, &H6C, &H24, &HAA, &HD3, &HA8, &H6E, &H54)
IID_IDWritePaintReader = iid
End Function
Public Function IID_IDWriteFontFace7() As UUID
'{3945B85B-BC95-40F7-B72C-8B73BFC7E13B}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3945B85B, CInt(&HBC95), CInt(&H40F7), &HB7, &H2C, &H8B, &H73, &HBF, &HC7, &HE1, &H3B)
IID_IDWriteFontFace7 = iid
End Function
Public Function IID_IDWriteFactory8() As UUID
'{EE0A7FB5-DEF4-4C23-A454-C9C7DC878398}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEE0A7FB5, CInt(&HDEF4), CInt(&H4C23), &HA4, &H54, &HC9, &HC7, &HDC, &H87, &H83, &H98)
IID_IDWriteFactory8 = iid
End Function
Public Function IID_IDWriteBitmapRenderTarget3() As UUID
'{AEEC37DB-C337-40F1-8E2A-9A41B167B238}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HAEEC37DB, CInt(&HC337), CInt(&H40F1), &H8E, &H2A, &H9A, &H41, &HB1, &H67, &HB2, &H38)
IID_IDWriteBitmapRenderTarget3 = iid
End Function
Public Function IID_IDWriteFactory1() As UUID
'{30572f99-dac6-41db-a16e-0486307e606a}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H30572f99, CInt(&Hdac6), CInt(&H41db), &Ha1, &H6e, &H04, &H86, &H30, &H7e, &H60, &H6a)
IID_IDWriteFactory1 = iid
End Function
Public Function IID_IDWriteFontFace1() As UUID
'{a71efdb4-9fdb-4838-ad90-cfc3be8c3daf}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Ha71efdb4, CInt(&H9fdb), CInt(&H4838), &Had, &H90, &Hcf, &Hc3, &Hbe, &H8c, &H3d, &Haf)
IID_IDWriteFontFace1 = iid
End Function
Public Function IID_IDWriteFont1() As UUID
'{acd16696-8c14-4f5d-877e-fe3fc1d32738}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hacd16696, CInt(&H8c14), CInt(&H4f5d), &H87, &H7e, &Hfe, &H3f, &Hc1, &Hd3, &H27, &H38)
IID_IDWriteFont1 = iid
End Function
Public Function IID_IDWriteRenderingParams1() As UUID
'{94413cf4-a6fc-4248-8b50-6674348fcad3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H94413cf4, CInt(&Ha6fc), CInt(&H4248), &H8b, &H50, &H66, &H74, &H34, &H8f, &Hca, &Hd3)
IID_IDWriteRenderingParams1 = iid
End Function
Public Function IID_IDWriteTextAnalyzer1() As UUID
'{80DAD800-E21F-4E83-96CE-BFCCE500DB7C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H80DAD800, CInt(&HE21F), CInt(&H4E83), &H96, &HCE, &HBF, &HCC, &HE5, &H00, &HDB, &H7C)
IID_IDWriteTextAnalyzer1 = iid
End Function
Public Function IID_IDWriteTextAnalysisSource1() As UUID
'{639CFAD8-0FB4-4B21-A58A-067920120009}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H639CFAD8, CInt(&H0FB4), CInt(&H4B21), &HA5, &H8A, &H06, &H79, &H20, &H12, &H00, &H09)
IID_IDWriteTextAnalysisSource1 = iid
End Function
Public Function IID_IDWriteTextAnalysisSink1() As UUID
'{B0D941A0-85E7-4D8B-9FD3-5CED9934482A}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB0D941A0, CInt(&H85E7), CInt(&H4D8B), &H9F, &HD3, &H5C, &HED, &H99, &H34, &H48, &H2A)
IID_IDWriteTextAnalysisSink1 = iid
End Function
Public Function IID_IDWriteTextLayout1() As UUID
'{9064D822-80A7-465C-A986-DF65F78B8FEB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9064D822, CInt(&H80A7), CInt(&H465C), &HA9, &H86, &HDF, &H65, &HF7, &H8B, &H8F, &HEB)
IID_IDWriteTextLayout1 = iid
End Function
Public Function IID_IDWriteBitmapRenderTarget1() As UUID
'{791e8298-3ef3-4230-9880-c9bdecc42064}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H791e8298, CInt(&H3ef3), CInt(&H4230), &H98, &H80, &Hc9, &Hbd, &Hec, &Hc4, &H20, &H64)
IID_IDWriteBitmapRenderTarget1 = iid
End Function
Public Function IID_IDWriteTextRenderer1() As UUID
'{D3E0E934-22A0-427E-AAE4-7D9574B59DB1}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD3E0E934, CInt(&H22A0), CInt(&H427E), &HAA, &HE4, &H7D, &H95, &H74, &HB5, &H9D, &HB1)
IID_IDWriteTextRenderer1 = iid
End Function
Public Function IID_IDWriteTextFormat1() As UUID
'{5F174B49-0D8B-4CFB-8BCA-F1CCE9D06C67}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5F174B49, CInt(&H0D8B), CInt(&H4CFB), &H8B, &HCA, &HF1, &HCC, &HE9, &HD0, &H6C, &H67)
IID_IDWriteTextFormat1 = iid
End Function
Public Function IID_IDWriteTextLayout2() As UUID
'{1093C18F-8D5E-43F0-B064-0917311B525E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1093C18F, CInt(&H8D5E), CInt(&H43F0), &HB0, &H64, &H09, &H17, &H31, &H1B, &H52, &H5E)
IID_IDWriteTextLayout2 = iid
End Function
Public Function IID_IDWriteTextAnalyzer2() As UUID
'{553A9FF3-5693-4DF7-B52B-74806F7F2EB9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H553A9FF3, CInt(&H5693), CInt(&H4DF7), &HB5, &H2B, &H74, &H80, &H6F, &H7F, &H2E, &HB9)
IID_IDWriteTextAnalyzer2 = iid
End Function
Public Function IID_IDWriteFontFallback() As UUID
'{EFA008F9-F7A1-48BF-B05C-F224713CC0FF}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEFA008F9, CInt(&HF7A1), CInt(&H48BF), &HB0, &H5C, &HF2, &H24, &H71, &H3C, &HC0, &HFF)
IID_IDWriteFontFallback = iid
End Function
Public Function IID_IDWriteFontFallbackBuilder() As UUID
'{FD882D06-8ABA-4FB8-B849-8BE8B73E14DE}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFD882D06, CInt(&H8ABA), CInt(&H4FB8), &HB8, &H49, &H8B, &HE8, &HB7, &H3E, &H14, &HDE)
IID_IDWriteFontFallbackBuilder = iid
End Function
Public Function IID_IDWriteFontFace2() As UUID
'{d8b768ff-64bc-4e66-982b-ec8e87f693f7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hd8b768ff, CInt(&H64bc), CInt(&H4e66), &H98, &H2b, &Hec, &H8e, &H87, &Hf6, &H93, &Hf7)
IID_IDWriteFontFace2 = iid
End Function
Public Function IID_IDWriteColorGlyphRunEnumerator() As UUID
'{d31fbe17-f157-41a2-8d24-cb779e0560e8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hd31fbe17, CInt(&Hf157), CInt(&H41a2), &H8d, &H24, &Hcb, &H77, &H9e, &H05, &H60, &He8)
IID_IDWriteColorGlyphRunEnumerator = iid
End Function
Public Function IID_IDWriteRenderingParams2() As UUID
'{F9D711C3-9777-40AE-87E8-3E5AF9BF0948}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF9D711C3, CInt(&H9777), CInt(&H40AE), &H87, &HE8, &H3E, &H5A, &HF9, &HBF, &H09, &H48)
IID_IDWriteRenderingParams2 = iid
End Function
Public Function IID_IDWriteFactory2() As UUID
'{0439fc60-ca44-4994-8dee-3a9af7b732ec}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H0439fc60, CInt(&Hca44), CInt(&H4994), &H8d, &Hee, &H3a, &H9a, &Hf7, &Hb7, &H32, &Hec)
IID_IDWriteFactory2 = iid
End Function
Public Function IID_IDWriteRenderingParams3() As UUID
'{B7924BAA-391B-412A-8C5C-E44CC2D867DC}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB7924BAA, CInt(&H391B), CInt(&H412A), &H8C, &H5C, &HE4, &H4C, &HC2, &HD8, &H67, &HDC)
IID_IDWriteRenderingParams3 = iid
End Function
Public Function IID_IDWriteFactory3() As UUID
'{9A1B41C3-D3BB-466A-87FC-FE67556A3B65}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9A1B41C3, CInt(&HD3BB), CInt(&H466A), &H87, &HFC, &HFE, &H67, &H55, &H6A, &H3B, &H65)
IID_IDWriteFactory3 = iid
End Function
Public Function IID_IDWriteFontSet() As UUID
'{53585141-D9F8-4095-8321-D73CF6BD116B}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H53585141, CInt(&HD9F8), CInt(&H4095), &H83, &H21, &HD7, &H3C, &HF6, &HBD, &H11, &H6B)
IID_IDWriteFontSet = iid
End Function
Public Function IID_IDWriteFontSetBuilder() As UUID
'{2F642AFE-9C68-4F40-B8BE-457401AFCB3D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2F642AFE, CInt(&H9C68), CInt(&H4F40), &HB8, &HBE, &H45, &H74, &H01, &HAF, &HCB, &H3D)
IID_IDWriteFontSetBuilder = iid
End Function
Public Function IID_IDWriteFontCollection1() As UUID
'{53585141-D9F8-4095-8321-D73CF6BD116C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H53585141, CInt(&HD9F8), CInt(&H4095), &H83, &H21, &HD7, &H3C, &HF6, &HBD, &H11, &H6C)
IID_IDWriteFontCollection1 = iid
End Function
Public Function IID_IDXGIObject() As UUID
'{aec22fb8-76f3-4639-9be0-28eb43a67a2e}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Haec22fb8, CInt(&H76f3), CInt(&H4639), &H9b, &He0, &H28, &Heb, &H43, &Ha6, &H7a, &H2e)
IID_IDXGIObject = iid
End Function
Public Function IID_IDXGIDeviceSubObject() As UUID
'{3d3e0379-f9de-4d58-bb6c-18d62992f1a6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3d3e0379, CInt(&Hf9de), CInt(&H4d58), &Hbb, &H6c, &H18, &Hd6, &H29, &H92, &Hf1, &Ha6)
IID_IDXGIDeviceSubObject = iid
End Function
Public Function IID_IDXGIResource() As UUID
'{035f3ab4-482e-4e50-b41f-8a7f8bd8960b}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H035f3ab4, CInt(&H482e), CInt(&H4e50), &Hb4, &H1f, &H8a, &H7f, &H8b, &Hd8, &H96, &H0b)
IID_IDXGIResource = iid
End Function
Public Function IID_IDXGIKeyedMutex() As UUID
'{9d8e1289-d7b3-465f-8126-250e349af85d}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9d8e1289, CInt(&Hd7b3), CInt(&H465f), &H81, &H26, &H25, &H0e, &H34, &H9a, &Hf8, &H5d)
IID_IDXGIKeyedMutex = iid
End Function
Public Function IID_IDXGISurface() As UUID
'{cafcb56c-6ac3-4889-bf47-9e23bbd260ec}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hcafcb56c, CInt(&H6ac3), CInt(&H4889), &Hbf, &H47, &H9e, &H23, &Hbb, &Hd2, &H60, &Hec)
IID_IDXGISurface = iid
End Function
Public Function IID_IDXGISurface1() As UUID
'{4AE63092-6327-4c1b-80AE-BFE12EA32B86}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4AE63092, CInt(&H6327), CInt(&H4c1b), &H80, &HAE, &HBF, &HE1, &H2E, &HA3, &H2B, &H86)
IID_IDXGISurface1 = iid
End Function
Public Function IID_IDXGIAdapter() As UUID
'{2411e7e1-12ac-4ccf-bd14-9798e8534dc0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2411e7e1, CInt(&H12ac), CInt(&H4ccf), &Hbd, &H14, &H97, &H98, &He8, &H53, &H4d, &Hc0)
IID_IDXGIAdapter = iid
End Function
Public Function IID_IDXGIOutput() As UUID
'{ae02eedb-c735-4690-8d52-5a8dc20213aa}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hae02eedb, CInt(&Hc735), CInt(&H4690), &H8d, &H52, &H5a, &H8d, &Hc2, &H02, &H13, &Haa)
IID_IDXGIOutput = iid
End Function
Public Function IID_IDXGISwapChain() As UUID
'{310d36a0-d2e7-4c0a-aa04-6a9d23b8886a}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H310d36a0, CInt(&Hd2e7), CInt(&H4c0a), &Haa, &H04, &H6a, &H9d, &H23, &Hb8, &H88, &H6a)
IID_IDXGISwapChain = iid
End Function
Public Function IID_IDXGIFactory() As UUID
'{7b7166ec-21c7-44ae-b21a-c9ae321ae369}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7b7166ec, CInt(&H21c7), CInt(&H44ae), &Hb2, &H1a, &Hc9, &Hae, &H32, &H1a, &He3, &H69)
IID_IDXGIFactory = iid
End Function
Public Function IID_IDXGIDevice() As UUID
'{54ec77fa-1377-44e6-8c32-88fd5f44c84c}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H54ec77fa, CInt(&H1377), CInt(&H44e6), &H8c, &H32, &H88, &Hfd, &H5f, &H44, &Hc8, &H4c)
IID_IDXGIDevice = iid
End Function
Public Function IID_IDXGIFactory1() As UUID
'{770aae78-f26f-4dba-a829-253c83d1b387}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H770aae78, CInt(&Hf26f), CInt(&H4dba), &Ha8, &H29, &H25, &H3c, &H83, &Hd1, &Hb3, &H87)
IID_IDXGIFactory1 = iid
End Function
Public Function IID_IDXGIAdapter1() As UUID
'{29038f61-3839-4626-91fd-086879011a05}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H29038f61, CInt(&H3839), CInt(&H4626), &H91, &Hfd, &H08, &H68, &H79, &H01, &H1a, &H05)
IID_IDXGIAdapter1 = iid
End Function
Public Function IID_IDXGIDevice1() As UUID
'{77db970f-6276-48ba-ba28-070143b4392c}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H77db970f, CInt(&H6276), CInt(&H48ba), &Hba, &H28, &H07, &H01, &H43, &Hb4, &H39, &H2c)
IID_IDXGIDevice1 = iid
End Function
Public Function IID_IDXGIDisplayControl() As UUID
'{ea9dbf1a-c88e-4486-854a-98aa0138f30c}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hea9dbf1a, CInt(&Hc88e), CInt(&H4486), &H85, &H4a, &H98, &Haa, &H01, &H38, &Hf3, &H0c)
IID_IDXGIDisplayControl = iid
End Function
Public Function IID_IDXGIOutputDuplication() As UUID
'{191cfac3-a341-470d-b26e-a864f428319c}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H191cfac3, CInt(&Ha341), CInt(&H470d), &Hb2, &H6e, &Ha8, &H64, &Hf4, &H28, &H31, &H9c)
IID_IDXGIOutputDuplication = iid
End Function
Public Function IID_IDXGISurface2() As UUID
'{aba496dd-b617-4cb8-a866-bc44d7eb1fa2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Haba496dd, CInt(&Hb617), CInt(&H4cb8), &Ha8, &H66, &Hbc, &H44, &Hd7, &Heb, &H1f, &Ha2)
IID_IDXGISurface2 = iid
End Function
Public Function IID_IDXGIResource1() As UUID
'{30961379-4609-4a41-998e-54fe567ee0c1}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H30961379, CInt(&H4609), CInt(&H4a41), &H99, &H8e, &H54, &Hfe, &H56, &H7e, &He0, &Hc1)
IID_IDXGIResource1 = iid
End Function
Public Function IID_IDXGIDevice2() As UUID
'{05008617-fbfd-4051-a790-144884b4f6a9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H05008617, CInt(&Hfbfd), CInt(&H4051), &Ha7, &H90, &H14, &H48, &H84, &Hb4, &Hf6, &Ha9)
IID_IDXGIDevice2 = iid
End Function
Public Function IID_IDXGISwapChain1() As UUID
'{790a45f7-0d42-4876-983a-0a55cfe6f4aa}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H790a45f7, CInt(&H0d42), CInt(&H4876), &H98, &H3a, &H0a, &H55, &Hcf, &He6, &Hf4, &Haa)
IID_IDXGISwapChain1 = iid
End Function
Public Function IID_IDXGIFactory2() As UUID
'{50c83a1c-e072-4c48-87b0-3630fa36a6d0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H50c83a1c, CInt(&He072), CInt(&H4c48), &H87, &Hb0, &H36, &H30, &Hfa, &H36, &Ha6, &Hd0)
IID_IDXGIFactory2 = iid
End Function
Public Function IID_IDXGIAdapter2() As UUID
'{0AA1AE0A-FA0E-4B84-8644-E05FF8E5ACB5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H0AA1AE0A, CInt(&HFA0E), CInt(&H4B84), &H86, &H44, &HE0, &H5F, &HF8, &HE5, &HAC, &HB5)
IID_IDXGIAdapter2 = iid
End Function
Public Function IID_IDXGIOutput1() As UUID
'{00cddea8-939b-4b83-a340-a685226666cc}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H00cddea8, CInt(&H939b), CInt(&H4b83), &Ha3, &H40, &Ha6, &H85, &H22, &H66, &H66, &Hcc)
IID_IDXGIOutput1 = iid
End Function
Public Function IID_IDXGIDevice3() As UUID
'{6007896c-3244-4afd-bf18-a6d3beda5023}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6007896c, CInt(&H3244), CInt(&H4afd), &Hbf, &H18, &Ha6, &Hd3, &Hbe, &Hda, &H50, &H23)
IID_IDXGIDevice3 = iid
End Function
Public Function IID_IDXGISwapChain2() As UUID
'{a8be2ac4-199f-4946-b331-79599fb98de7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Ha8be2ac4, CInt(&H199f), CInt(&H4946), &Hb3, &H31, &H79, &H59, &H9f, &Hb9, &H8d, &He7)
IID_IDXGISwapChain2 = iid
End Function
Public Function IID_IDXGIOutput2() As UUID
'{595e39d1-2724-4663-99b1-da969de28364}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H595e39d1, CInt(&H2724), CInt(&H4663), &H99, &Hb1, &Hda, &H96, &H9d, &He2, &H83, &H64)
IID_IDXGIOutput2 = iid
End Function
Public Function IID_IDXGIFactory3() As UUID
'{25483823-cd46-4c7d-86ca-47aa95b837bd}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H25483823, CInt(&Hcd46), CInt(&H4c7d), &H86, &Hca, &H47, &Haa, &H95, &Hb8, &H37, &Hbd)
IID_IDXGIFactory3 = iid
End Function
Public Function IID_IDXGIDecodeSwapChain() As UUID
'{2633066b-4514-4c7a-8fd8-12ea98059d18}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2633066b, CInt(&H4514), CInt(&H4c7a), &H8f, &Hd8, &H12, &Hea, &H98, &H05, &H9d, &H18)
IID_IDXGIDecodeSwapChain = iid
End Function
Public Function IID_IDXGIFactoryMedia() As UUID
'{41e7d1f2-a591-4f7b-a2e5-fa9c843e1c12}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H41e7d1f2, CInt(&Ha591), CInt(&H4f7b), &Ha2, &He5, &Hfa, &H9c, &H84, &H3e, &H1c, &H12)
IID_IDXGIFactoryMedia = iid
End Function
Public Function IID_IDXGISwapChainMedia() As UUID
'{dd95b90b-f05f-4f6a-bd65-25bfb264bd84}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hdd95b90b, CInt(&Hf05f), CInt(&H4f6a), &Hbd, &H65, &H25, &Hbf, &Hb2, &H64, &Hbd, &H84)
IID_IDXGISwapChainMedia = iid
End Function
Public Function IID_IDXGIOutput3() As UUID
'{8a6bb301-7e7e-41F4-a8e0-5b32f7f99b18}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8a6bb301, CInt(&H7e7e), CInt(&H41F4), &Ha8, &He0, &H5b, &H32, &Hf7, &Hf9, &H9b, &H18)
IID_IDXGIOutput3 = iid
End Function
Public Function IID_IDXGISwapChain3() As UUID
'{94d99bdb-f1f8-4ab0-b236-7da0170edab1}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H94d99bdb, CInt(&Hf1f8), CInt(&H4ab0), &Hb2, &H36, &H7d, &Ha0, &H17, &H0e, &Hda, &Hb1)
IID_IDXGISwapChain3 = iid
End Function
Public Function IID_IDXGIOutput4() As UUID
'{dc7dca35-2196-414d-9F53-617884032a60}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hdc7dca35, CInt(&H2196), CInt(&H414d), &H9F, &H53, &H61, &H78, &H84, &H03, &H2a, &H60)
IID_IDXGIOutput4 = iid
End Function
Public Function IID_IDXGIFactory4() As UUID
'{1bc6ea02-ef36-464f-bf0c-21ca39e5168a}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1bc6ea02, CInt(&Hef36), CInt(&H464f), &Hbf, &H0c, &H21, &Hca, &H39, &He5, &H16, &H8a)
IID_IDXGIFactory4 = iid
End Function
Public Function IID_IDXGIAdapter3() As UUID
'{645967A4-1392-4310-A798-8053CE3E93FD}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H645967A4, CInt(&H1392), CInt(&H4310), &HA7, &H98, &H80, &H53, &HCE, &H3E, &H93, &HFD)
IID_IDXGIAdapter3 = iid
End Function
Public Function IID_IDXGIOutput5() As UUID
'{80A07424-AB52-42EB-833C-0C42FD282D98}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H80A07424, CInt(&HAB52), CInt(&H42EB), &H83, &H3C, &H0C, &H42, &HFD, &H28, &H2D, &H98)
IID_IDXGIOutput5 = iid
End Function
Public Function IID_IDXGISwapChain4() As UUID
'{3D585D5A-BD4A-489E-B1F4-3DBCB6452FFB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3D585D5A, CInt(&HBD4A), CInt(&H489E), &HB1, &HF4, &H3D, &HBC, &HB6, &H45, &H2F, &HFB)
IID_IDXGISwapChain4 = iid
End Function
Public Function IID_IDXGIDevice4() As UUID
'{95B4F95F-D8DA-4CA4-9EE6-3B76D5968A10}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H95B4F95F, CInt(&HD8DA), CInt(&H4CA4), &H9E, &HE6, &H3B, &H76, &HD5, &H96, &H8A, &H10)
IID_IDXGIDevice4 = iid
End Function
Public Function IID_IDXGIFactory5() As UUID
'{7632e1f5-ee65-4dca-87fd-84cd75f8838d}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7632e1f5, CInt(&Hee65), CInt(&H4dca), &H87, &Hfd, &H84, &Hcd, &H75, &Hf8, &H83, &H8d)
IID_IDXGIFactory5 = iid
End Function
Public Function IID_IDXGIAdapter4() As UUID
'{3c8d99d1-4fbf-4181-a82c-af66bf7bd24e}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3c8d99d1, CInt(&H4fbf), CInt(&H4181), &Ha8, &H2c, &Haf, &H66, &Hbf, &H7b, &Hd2, &H4e)
IID_IDXGIAdapter4 = iid
End Function
Public Function IID_IDXGIOutput6() As UUID
'{068346e8-aaec-4b84-add7-137f513f77a1}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H068346e8, CInt(&Haaec), CInt(&H4b84), &Had, &Hd7, &H13, &H7f, &H51, &H3f, &H77, &Ha1)
IID_IDXGIOutput6 = iid
End Function
Public Function IID_IDXGIFactory6() As UUID
'{c1b6694f-ff09-44a9-b03c-77900a0a1d17}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc1b6694f, CInt(&Hff09), CInt(&H44a9), &Hb0, &H3c, &H77, &H90, &H0a, &H0a, &H1d, &H17)
 IID_IDXGIFactory6 = iid
End Function
Public Function IID_IDXGIFactory7() As UUID
'{a4966eed-76db-44da-84c1-ee9a7afb20a8}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha4966eed, CInt(&H76db), CInt(&H44da), &H84, &Hc1, &Hee, &H9a, &H7a, &Hfb, &H20, &Ha8)
 IID_IDXGIFactory7 = iid
End Function
Public Function IID_IPrintPreviewDxgiPackageTarget() As UUID
'{1a6dd0ad-1e2a-4e99-a5ba-91f17818290e}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1a6dd0ad, CInt(&H1e2a), CInt(&H4e99), &Ha5, &Hba, &H91, &Hf1, &H78, &H18, &H29, &H0e)
 IID_IPrintPreviewDxgiPackageTarget = iid
End Function
Public Function IID_IDXGIInfoQueue() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD67441C7, &H672A, &H476f, &H9E, &H82, &HCD, &H55, &HB4, &H49, &H49, &HCE)
IID_IDXGIInfoQueue = iid
End Function
Public Function IID_IDXGIDebug() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H119E7452, &HDE9E, &H40fe, &H88, &H06, &H88, &HF9, &H0C, &H12, &HB4, &H41)
IID_IDXGIDebug = iid
End Function
Public Function IID_IDXGIDebug1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc5a05f0c, &H16f2, &H4adf, &H9f, &H4d, &Ha8, &Hc4, &Hd5, &H8a, &Hc5, &H50)
IID_IDXGIDebug1 = iid
End Function
Public Function IID_IPresentationBuffer() As UUID
'{2E217D3A-5ABB-4138-9A13-A775593C89CA}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2E217D3A, CInt(&H5ABB), CInt(&H4138), &H9A, &H13, &HA7, &H75, &H59, &H3C, &H89, &HCA)
IID_IPresentationBuffer = iid
End Function
Public Function IID_IPresentationContent() As UUID
'{5668BB79-3D8E-415C-B215-F38020F2D252}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5668BB79, CInt(&H3D8E), CInt(&H415C), &HB2, &H15, &HF3, &H80, &H20, &HF2, &HD2, &H52)
IID_IPresentationContent = iid
End Function
Public Function IID_IPresentationSurface() As UUID
'{956710FB-EA40-4EBA-A3EB-4375A0EB4EDC}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H956710FB, CInt(&HEA40), CInt(&H4EBA), &HA3, &HEB, &H43, &H75, &HA0, &HEB, &H4E, &HDC)
IID_IPresentationSurface = iid
End Function
Public Function IID_IPresentStatistics() As UUID
'{B44B8BDA-7282-495D-9DD7-CEADD8B4BB86}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB44B8BDA, CInt(&H7282), CInt(&H495D), &H9D, &HD7, &HCE, &HAD, &HD8, &HB4, &HBB, &H86)
IID_IPresentStatistics = iid
End Function
Public Function IID_IPresentationManager() As UUID
'{FB562F82-6292-470A-88B1-843661E7F20C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFB562F82, CInt(&H6292), CInt(&H470A), &H88, &HB1, &H84, &H36, &H61, &HE7, &HF2, &H0C)
IID_IPresentationManager = iid
End Function
Public Function IID_IPresentationFactory() As UUID
'{8FB37B58-1D74-4F64-A49C-1F97A80A2EC0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8FB37B58, CInt(&H1D74), CInt(&H4F64), &HA4, &H9C, &H1F, &H97, &HA8, &H0A, &H2E, &HC0)
IID_IPresentationFactory = iid
End Function
Public Function IID_IPresentStatusPresentStatistics() As UUID
'{C9ED2A41-79CB-435E-964E-C8553055420C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC9ED2A41, CInt(&H79CB), CInt(&H435E), &H96, &H4E, &HC8, &H55, &H30, &H55, &H42, &H0C)
IID_IPresentStatusPresentStatistics = iid
End Function
Public Function IID_ICompositionFramePresentStatistics() As UUID
'{AB41D127-C101-4C0A-911D-F9F2E9D08E64}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HAB41D127, CInt(&HC101), CInt(&H4C0A), &H91, &H1D, &HF9, &HF2, &HE9, &HD0, &H8E, &H64)
IID_ICompositionFramePresentStatistics = iid
End Function
Public Function IID_IIndependentFlipFramePresentStatistics() As UUID
'{8C93BE27-AD94-4DA0-8FD4-2413132D124E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8C93BE27, CInt(&HAD94), CInt(&H4DA0), &H8F, &HD4, &H24, &H13, &H13, &H2D, &H12, &H4E)
IID_IIndependentFlipFramePresentStatistics = iid
End Function

Public Function IID_IDCompositionDevice() As UUID
'{C37EA93A-E7AA-450D-B16F-9746CB0407F3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC37EA93A, CInt(&HE7AA), CInt(&H450D), &HB1, &H6F, &H97, &H46, &HCB, &H04, &H07, &HF3)
IID_IDCompositionDevice = iid
End Function
Public Function IID_IDCompositionTarget() As UUID
'{eacdd04c-117e-4e17-88f4-d1b12b0e3d89}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Heacdd04c, CInt(&H117e), CInt(&H4e17), &H88, &Hf4, &Hd1, &Hb1, &H2b, &H0e, &H3d, &H89)
IID_IDCompositionTarget = iid
End Function
Public Function IID_IDCompositionVisual() As UUID
'{4d93059d-097b-4651-9a60-f0f25116e2f3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4d93059d, CInt(&H097b), CInt(&H4651), &H9a, &H60, &Hf0, &Hf2, &H51, &H16, &He2, &Hf3)
IID_IDCompositionVisual = iid
End Function
Public Function IID_IDCompositionEffect() As UUID
'{EC81B08F-BFCB-4e8d-B193-A915587999E8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEC81B08F, CInt(&HBFCB), CInt(&H4e8d), &HB1, &H93, &HA9, &H15, &H58, &H79, &H99, &HE8)
IID_IDCompositionEffect = iid
End Function
Public Function IID_IDCompositionTransform3D() As UUID
'{71185722-246B-41f2-AAD1-0443F7F4BFC2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H71185722, CInt(&H246B), CInt(&H41f2), &HAA, &HD1, &H04, &H43, &HF7, &HF4, &HBF, &HC2)
IID_IDCompositionTransform3D = iid
End Function
Public Function IID_IDCompositionTransform() As UUID
'{FD55FAA7-37E0-4c20-95D2-9BE45BC33F55}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFD55FAA7, CInt(&H37E0), CInt(&H4c20), &H95, &HD2, &H9B, &HE4, &H5B, &HC3, &H3F, &H55)
IID_IDCompositionTransform = iid
End Function
Public Function IID_IDCompositionTranslateTransform() As UUID
'{06791122-C6F0-417d-8323-269E987F5954}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H06791122, CInt(&HC6F0), CInt(&H417d), &H83, &H23, &H26, &H9E, &H98, &H7F, &H59, &H54)
IID_IDCompositionTranslateTransform = iid
End Function
Public Function IID_IDCompositionScaleTransform() As UUID
'{71FDE914-40EF-45ef-BD51-68B037C339F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H71FDE914, CInt(&H40EF), CInt(&H45ef), &HBD, &H51, &H68, &HB0, &H37, &HC3, &H39, &HF9)
IID_IDCompositionScaleTransform = iid
End Function
Public Function IID_IDCompositionRotateTransform() As UUID
'{641ED83C-AE96-46c5-90DC-32774CC5C6D5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H641ED83C, CInt(&HAE96), CInt(&H46c5), &H90, &HDC, &H32, &H77, &H4C, &HC5, &HC6, &HD5)
IID_IDCompositionRotateTransform = iid
End Function
Public Function IID_IDCompositionSkewTransform() As UUID
'{E57AA735-DCDB-4c72-9C61-0591F58889EE}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE57AA735, CInt(&HDCDB), CInt(&H4c72), &H9C, &H61, &H05, &H91, &HF5, &H88, &H89, &HEE)
IID_IDCompositionSkewTransform = iid
End Function
Public Function IID_IDCompositionMatrixTransform() As UUID
'{16CDFF07-C503-419c-83F2-0965C7AF1FA6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H16CDFF07, CInt(&HC503), CInt(&H419c), &H83, &HF2, &H09, &H65, &HC7, &HAF, &H1F, &HA6)
IID_IDCompositionMatrixTransform = iid
End Function
Public Function IID_IDCompositionEffectGroup() As UUID
'{A7929A74-E6B2-4bd6-8B95-4040119CA34D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA7929A74, CInt(&HE6B2), CInt(&H4bd6), &H8B, &H95, &H40, &H40, &H11, &H9C, &HA3, &H4D)
IID_IDCompositionEffectGroup = iid
End Function
Public Function IID_IDCompositionTranslateTransform3D() As UUID
'{91636D4B-9BA1-4532-AAF7-E3344994D788}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H91636D4B, CInt(&H9BA1), CInt(&H4532), &HAA, &HF7, &HE3, &H34, &H49, &H94, &HD7, &H88)
IID_IDCompositionTranslateTransform3D = iid
End Function
Public Function IID_IDCompositionScaleTransform3D() As UUID
'{2A9E9EAD-364B-4b15-A7C4-A1997F78B389}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2A9E9EAD, CInt(&H364B), CInt(&H4b15), &HA7, &HC4, &HA1, &H99, &H7F, &H78, &HB3, &H89)
IID_IDCompositionScaleTransform3D = iid
End Function
Public Function IID_IDCompositionRotateTransform3D() As UUID
'{D8F5B23F-D429-4a91-B55A-D2F45FD75B18}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD8F5B23F, CInt(&HD429), CInt(&H4a91), &HB5, &H5A, &HD2, &HF4, &H5F, &HD7, &H5B, &H18)
IID_IDCompositionRotateTransform3D = iid
End Function
Public Function IID_IDCompositionMatrixTransform3D() As UUID
'{4B3363F0-643B-41b7-B6E0-CCF22D34467C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4B3363F0, CInt(&H643B), CInt(&H41b7), &HB6, &HE0, &HCC, &HF2, &H2D, &H34, &H46, &H7C)
IID_IDCompositionMatrixTransform3D = iid
End Function
Public Function IID_IDCompositionClip() As UUID
'{64AC3703-9D3F-45ec-A109-7CAC0E7A13A7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H64AC3703, CInt(&H9D3F), CInt(&H45ec), &HA1, &H09, &H7C, &HAC, &H0E, &H7A, &H13, &HA7)
IID_IDCompositionClip = iid
End Function
Public Function IID_IDCompositionRectangleClip() As UUID
'{9842AD7D-D9CF-4908-AED7-48B51DA5E7C2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9842AD7D, CInt(&HD9CF), CInt(&H4908), &HAE, &HD7, &H48, &HB5, &H1D, &HA5, &HE7, &HC2)
IID_IDCompositionRectangleClip = iid
End Function
Public Function IID_IDCompositionSurface() As UUID
'{BB8A4953-2C99-4F5A-96F5-4819027FA3AC}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBB8A4953, CInt(&H2C99), CInt(&H4F5A), &H96, &HF5, &H48, &H19, &H02, &H7F, &HA3, &HAC)
IID_IDCompositionSurface = iid
End Function
Public Function IID_IDCompositionVirtualSurface() As UUID
'{AE471C51-5F53-4A24-8D3E-D0C39C30B3F0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HAE471C51, CInt(&H5F53), CInt(&H4A24), &H8D, &H3E, &HD0, &HC3, &H9C, &H30, &HB3, &HF0)
IID_IDCompositionVirtualSurface = iid
End Function
Public Function IID_IDCompositionDevice2() As UUID
'{75F6468D-1B8E-447C-9BC6-75FEA80B5B25}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H75F6468D, CInt(&H1B8E), CInt(&H447C), &H9B, &HC6, &H75, &HFE, &HA8, &H0B, &H5B, &H25)
IID_IDCompositionDevice2 = iid
End Function
Public Function IID_IDCompositionDesktopDevice() As UUID
'{5F4633FE-1E08-4CB8-8C75-CE24333F5602}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5F4633FE, CInt(&H1E08), CInt(&H4CB8), &H8C, &H75, &HCE, &H24, &H33, &H3F, &H56, &H02)
IID_IDCompositionDesktopDevice = iid
End Function
Public Function IID_IDCompositionDeviceDebug() As UUID
'{A1A3C64A-224F-4A81-9773-4F03A89D3C6C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA1A3C64A, CInt(&H224F), CInt(&H4A81), &H97, &H73, &H4F, &H03, &HA8, &H9D, &H3C, &H6C)
IID_IDCompositionDeviceDebug = iid
End Function
Public Function IID_IDCompositionSurfaceFactory() As UUID
'{E334BC12-3937-4E02-85EB-FCF4EB30D2C8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE334BC12, CInt(&H3937), CInt(&H4E02), &H85, &HEB, &HFC, &HF4, &HEB, &H30, &HD2, &HC8)
IID_IDCompositionSurfaceFactory = iid
End Function
Public Function IID_IDCompositionVisual2() As UUID
'{E8DE1639-4331-4B26-BC5F-6A321D347A85}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE8DE1639, CInt(&H4331), CInt(&H4B26), &HBC, &H5F, &H6A, &H32, &H1D, &H34, &H7A, &H85)
IID_IDCompositionVisual2 = iid
End Function
Public Function IID_IDCompositionVisualDebug() As UUID
'{FED2B808-5EB4-43A0-AEA3-35F65280F91B}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFED2B808, CInt(&H5EB4), CInt(&H43A0), &HAE, &HA3, &H35, &HF6, &H52, &H80, &HF9, &H1B)
IID_IDCompositionVisualDebug = iid
End Function
Public Function IID_IDCompositionVisual3() As UUID
'{2775F462-B6C1-4015-B0BE-B3E7D6A4976D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2775F462, CInt(&HB6C1), CInt(&H4015), &HB0, &HBE, &HB3, &HE7, &HD6, &HA4, &H97, &H6D)
IID_IDCompositionVisual3 = iid
End Function
Public Function IID_IDCompositionDevice3() As UUID
'{0987CB06-F916-48BF-8D35-CE7641781BD9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H0987CB06, CInt(&HF916), CInt(&H48BF), &H8D, &H35, &HCE, &H76, &H41, &H78, &H1B, &HD9)
IID_IDCompositionDevice3 = iid
End Function
Public Function IID_IDCompositionFilterEffect() As UUID
'{30C421D5-8CB2-4E9F-B133-37BE270D4AC2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H30C421D5, CInt(&H8CB2), CInt(&H4E9F), &HB1, &H33, &H37, &HBE, &H27, &H0D, &H4A, &HC2)
IID_IDCompositionFilterEffect = iid
End Function
Public Function IID_IDCompositionGaussianBlurEffect() As UUID
'{45D4D0B7-1BD4-454E-8894-2BFA68443033}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H45D4D0B7, CInt(&H1BD4), CInt(&H454E), &H88, &H94, &H2B, &HFA, &H68, &H44, &H30, &H33)
IID_IDCompositionGaussianBlurEffect = iid
End Function
Public Function IID_IDCompositionBrightnessEffect() As UUID
'{6027496E-CB3A-49AB-934F-D798DA4F7DA6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6027496E, CInt(&HCB3A), CInt(&H49AB), &H93, &H4F, &HD7, &H98, &HDA, &H4F, &H7D, &HA6)
IID_IDCompositionBrightnessEffect = iid
End Function
Public Function IID_IDCompositionColorMatrixEffect() As UUID
'{C1170A22-3CE2-4966-90D4-55408BFC84C4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC1170A22, CInt(&H3CE2), CInt(&H4966), &H90, &HD4, &H55, &H40, &H8B, &HFC, &H84, &HC4)
IID_IDCompositionColorMatrixEffect = iid
End Function
Public Function IID_IDCompositionShadowEffect() As UUID
'{4AD18AC0-CFD2-4C2F-BB62-96E54FDB6879}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4AD18AC0, CInt(&HCFD2), CInt(&H4C2F), &HBB, &H62, &H96, &HE5, &H4F, &HDB, &H68, &H79)
IID_IDCompositionShadowEffect = iid
End Function
Public Function IID_IDCompositionHueRotationEffect() As UUID
'{6DB9F920-0770-4781-B0C6-381912F9D167}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6DB9F920, CInt(&H0770), CInt(&H4781), &HB0, &HC6, &H38, &H19, &H12, &HF9, &HD1, &H67)
IID_IDCompositionHueRotationEffect = iid
End Function
Public Function IID_IDCompositionSaturationEffect() As UUID
'{A08DEBDA-3258-4FA4-9F16-9174D3FE93B1}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA08DEBDA, CInt(&H3258), CInt(&H4FA4), &H9F, &H16, &H91, &H74, &HD3, &HFE, &H93, &HB1)
IID_IDCompositionSaturationEffect = iid
End Function
Public Function IID_IDCompositionTurbulenceEffect() As UUID
'{A6A55BDA-C09C-49F3-9193-A41922C89715}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA6A55BDA, CInt(&HC09C), CInt(&H49F3), &H91, &H93, &HA4, &H19, &H22, &HC8, &H97, &H15)
IID_IDCompositionTurbulenceEffect = iid
End Function
Public Function IID_IDCompositionLinearTransferEffect() As UUID
'{4305EE5B-C4A0-4C88-9385-67124E017683}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4305EE5B, CInt(&HC4A0), CInt(&H4C88), &H93, &H85, &H67, &H12, &H4E, &H01, &H76, &H83)
IID_IDCompositionLinearTransferEffect = iid
End Function
Public Function IID_IDCompositionTableTransferEffect() As UUID
'{9B7E82E2-69C5-4EB4-A5F5-A7033F5132CD}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9B7E82E2, CInt(&H69C5), CInt(&H4EB4), &HA5, &HF5, &HA7, &H03, &H3F, &H51, &H32, &HCD)
IID_IDCompositionTableTransferEffect = iid
End Function
Public Function IID_IDCompositionCompositeEffect() As UUID
'{576616C0-A231-494D-A38D-00FD5EC4DB46}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H576616C0, CInt(&HA231), CInt(&H494D), &HA3, &H8D, &H00, &HFD, &H5E, &HC4, &HDB, &H46)
IID_IDCompositionCompositeEffect = iid
End Function
Public Function IID_IDCompositionBlendEffect() As UUID
'{33ECDC0A-578A-4A11-9C14-0CB90517F9C5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H33ECDC0A, CInt(&H578A), CInt(&H4A11), &H9C, &H14, &H0C, &HB9, &H05, &H17, &HF9, &HC5)
IID_IDCompositionBlendEffect = iid
End Function
Public Function IID_IDCompositionArithmeticCompositeEffect() As UUID
'{3B67DFA8-E3DD-4E61-B640-46C2F3D739DC}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3B67DFA8, CInt(&HE3DD), CInt(&H4E61), &HB6, &H40, &H46, &HC2, &HF3, &HD7, &H39, &HDC)
IID_IDCompositionArithmeticCompositeEffect = iid
End Function
Public Function IID_IDCompositionAffineTransform2DEffect() As UUID
'{0B74B9E8-CDD6-492F-BBBC-5ED32157026D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H0B74B9E8, CInt(&HCDD6), CInt(&H492F), &HBB, &HBC, &H5E, &HD3, &H21, &H57, &H02, &H6D)
IID_IDCompositionAffineTransform2DEffect = iid
End Function
Public Function IID_IDCompositionAnimation() As UUID
'{CBFD91D9-51B2-45e4-B3DE-D19CCFB863C5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HCBFD91D9, CInt(&H51B2), CInt(&H45e4), &HB3, &HDE, &HD1, &H9C, &HCF, &HB8, &H63, &HC5)
IID_IDCompositionAnimation = iid
End Function
Public Function IID_IInputPaneAnimationCoordinator() As UUID
'{2AF16BA9-2DE5-4B75-82D9-01372AFBFFB4}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2AF16BA9, CInt(&H2DE5), CInt(&H4B75), &H82, &HD9, &H01, &H37, &H2A, &HFB, &HFF, &HB4)
 IID_IInputPaneAnimationCoordinator = iid
End Function

Public Function IID_ID3D10Blob() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8BA5FB08, &H5195, &H40E2, &HAC, &H58, &HD, &H98, &H9C, &H3A, &H1, &H2)
IID_ID3D10Blob = iid
End Function
Public Function IID_ID3DDestructionNotifier() As UUID
'{a06eb39a-50da-425b-8c31-4eecd6c270f3}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha06eb39a, CInt(&H50da), CInt(&H425b), &H8c, &H31, &H4e, &Hec, &Hd6, &Hc2, &H70, &Hf3)
 IID_ID3DDestructionNotifier = iid
End Function

Public Function WKPDID_D3DDebugObjectName() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H429B8C22, &H9188, &H4B0C, &H87, &H42, &HAC, &HB0, &HBF, &H85, &HC2, &H0)
WKPDID_D3DDebugObjectName = iid
End Function
Public Function WKPDID_D3DDebugObjectNameW() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4CCA5FD8, &H921F, &H42C8, &H85, &H66, &H70, &HCA, &HF2, &HA9, &HB7, &H41)
WKPDID_D3DDebugObjectNameW = iid
End Function
Public Function WKPDID_CommentStringW() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD0149DC0, &H90E8, &H4EC8, &H81, &H44, &HE9, &H0, &HAD, &H26, &H6B, &HB2)
WKPDID_CommentStringW = iid
End Function
Public Function D3D_TEXTURE_LAYOUT_ROW_MAJOR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb5dc234f, &H72bb, &H4bec, &H97, &H05, &H8c, &Hf2, &H58, &Hdf, &H6b, &H6c)
D3D_TEXTURE_LAYOUT_ROW_MAJOR = iid
End Function
Public Function D3D_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4c0f29e3, &H3f5f, &H4d35, &H84, &Hc9, &Hbc, &H09, &H83, &Hb6, &H2c, &H28)
D3D_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE = iid
End Function

Public Function D3D11_DECODER_PROFILE_MPEG2_MOCOMP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE6A9F44B, &H61B0, &H4563, &H9E, &HA4, &H63, &HD2, &HA3, &HC6, &HFE, &H66)
D3D11_DECODER_PROFILE_MPEG2_MOCOMP = iid
End Function
Public Function D3D11_DECODER_PROFILE_MPEG2_IDCT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBF22AD00, &H3EA, &H4690, &H80, &H77, &H47, &H33, &H46, &H20, &H9B, &H7E)
D3D11_DECODER_PROFILE_MPEG2_IDCT = iid
End Function
Public Function D3D11_DECODER_PROFILE_MPEG2_VLD() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HEE27417F, &H5E28, &H4E65, &HBE, &HEA, &H1D, &H26, &HB5, &H8, &HAD, &HC9)
D3D11_DECODER_PROFILE_MPEG2_VLD = iid
End Function
Public Function D3D11_DECODER_PROFILE_MPEG1_VLD() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6F3EC719, &H3735, &H42CC, &H80, &H63, &H65, &HCC, &H3C, &HB3, &H66, &H16)
D3D11_DECODER_PROFILE_MPEG1_VLD = iid
End Function
Public Function D3D11_DECODER_PROFILE_MPEG2and1_VLD() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H86695F12, &H340E, &H4F04, &H9F, &HD3, &H92, &H53, &HDD, &H32, &H74, &H60)
D3D11_DECODER_PROFILE_MPEG2and1_VLD = iid
End Function
Public Function D3D11_DECODER_PROFILE_H264_MOCOMP_NOFGT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1B81BE64, &HA0C7, &H11D3, &HB9, &H84, &H0, &HC0, &H4F, &H2E, &H73, &HC5)
D3D11_DECODER_PROFILE_H264_MOCOMP_NOFGT = iid
End Function
Public Function D3D11_DECODER_PROFILE_H264_MOCOMP_FGT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1B81BE65, &HA0C7, &H11D3, &HB9, &H84, &H0, &HC0, &H4F, &H2E, &H73, &HC5)
D3D11_DECODER_PROFILE_H264_MOCOMP_FGT = iid
End Function
Public Function D3D11_DECODER_PROFILE_H264_IDCT_NOFGT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1B81BE66, &HA0C7, &H11D3, &HB9, &H84, &H0, &HC0, &H4F, &H2E, &H73, &HC5)
D3D11_DECODER_PROFILE_H264_IDCT_NOFGT = iid
End Function
Public Function D3D11_DECODER_PROFILE_H264_IDCT_FGT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1B81BE67, &HA0C7, &H11D3, &HB9, &H84, &H0, &HC0, &H4F, &H2E, &H73, &HC5)
D3D11_DECODER_PROFILE_H264_IDCT_FGT = iid
End Function
Public Function D3D11_DECODER_PROFILE_H264_VLD_NOFGT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1B81BE68, &HA0C7, &H11D3, &HB9, &H84, &H0, &HC0, &H4F, &H2E, &H73, &HC5)
D3D11_DECODER_PROFILE_H264_VLD_NOFGT = iid
End Function
Public Function D3D11_DECODER_PROFILE_H264_VLD_FGT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1B81BE69, &HA0C7, &H11D3, &HB9, &H84, &H0, &HC0, &H4F, &H2E, &H73, &HC5)
D3D11_DECODER_PROFILE_H264_VLD_FGT = iid
End Function
Public Function D3D11_DECODER_PROFILE_H264_VLD_WITHFMOASO_NOFGT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD5F04FF9, &H3418, &H45D8, &H95, &H61, &H32, &HA7, &H6A, &HAE, &H2D, &HDD)
D3D11_DECODER_PROFILE_H264_VLD_WITHFMOASO_NOFGT = iid
End Function
Public Function D3D11_DECODER_PROFILE_H264_VLD_STEREO_PROGRESSIVE_NOFGT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD79BE8DA, &HCF1, &H4C81, &HB8, &H2A, &H69, &HA4, &HE2, &H36, &HF4, &H3D)
D3D11_DECODER_PROFILE_H264_VLD_STEREO_PROGRESSIVE_NOFGT = iid
End Function
Public Function D3D11_DECODER_PROFILE_H264_VLD_STEREO_NOFGT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF9AACCBB, &HC2B6, &H4CFC, &H87, &H79, &H57, &H7, &HB1, &H76, &H5, &H52)
D3D11_DECODER_PROFILE_H264_VLD_STEREO_NOFGT = iid
End Function
Public Function D3D11_DECODER_PROFILE_H264_VLD_MULTIVIEW_NOFGT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H705B9D82, &H76CF, &H49D6, &HB7, &HE6, &HAC, &H88, &H72, &HDB, &H1, &H3C)
D3D11_DECODER_PROFILE_H264_VLD_MULTIVIEW_NOFGT = iid
End Function
Public Function D3D11_DECODER_PROFILE_WMV8_POSTPROC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1B81BE80, &HA0C7, &H11D3, &HB9, &H84, &H0, &HC0, &H4F, &H2E, &H73, &HC5)
D3D11_DECODER_PROFILE_WMV8_POSTPROC = iid
End Function
Public Function D3D11_DECODER_PROFILE_WMV8_MOCOMP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1B81BE81, &HA0C7, &H11D3, &HB9, &H84, &H0, &HC0, &H4F, &H2E, &H73, &HC5)
D3D11_DECODER_PROFILE_WMV8_MOCOMP = iid
End Function
Public Function D3D11_DECODER_PROFILE_WMV9_POSTPROC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1B81BE90, &HA0C7, &H11D3, &HB9, &H84, &H0, &HC0, &H4F, &H2E, &H73, &HC5)
D3D11_DECODER_PROFILE_WMV9_POSTPROC = iid
End Function
Public Function D3D11_DECODER_PROFILE_WMV9_MOCOMP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1B81BE91, &HA0C7, &H11D3, &HB9, &H84, &H0, &HC0, &H4F, &H2E, &H73, &HC5)
D3D11_DECODER_PROFILE_WMV9_MOCOMP = iid
End Function
Public Function D3D11_DECODER_PROFILE_WMV9_IDCT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1B81BE94, &HA0C7, &H11D3, &HB9, &H84, &H0, &HC0, &H4F, &H2E, &H73, &HC5)
D3D11_DECODER_PROFILE_WMV9_IDCT = iid
End Function
Public Function D3D11_DECODER_PROFILE_VC1_POSTPROC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1B81BEA0, &HA0C7, &H11D3, &HB9, &H84, &H0, &HC0, &H4F, &H2E, &H73, &HC5)
D3D11_DECODER_PROFILE_VC1_POSTPROC = iid
End Function
Public Function D3D11_DECODER_PROFILE_VC1_MOCOMP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1B81BEA1, &HA0C7, &H11D3, &HB9, &H84, &H0, &HC0, &H4F, &H2E, &H73, &HC5)
D3D11_DECODER_PROFILE_VC1_MOCOMP = iid
End Function
Public Function D3D11_DECODER_PROFILE_VC1_IDCT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1B81BEA2, &HA0C7, &H11D3, &HB9, &H84, &H0, &HC0, &H4F, &H2E, &H73, &HC5)
D3D11_DECODER_PROFILE_VC1_IDCT = iid
End Function
Public Function D3D11_DECODER_PROFILE_VC1_VLD() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1B81BEA3, &HA0C7, &H11D3, &HB9, &H84, &H0, &HC0, &H4F, &H2E, &H73, &HC5)
D3D11_DECODER_PROFILE_VC1_VLD = iid
End Function
Public Function D3D11_DECODER_PROFILE_VC1_D2010() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1B81BEA4, &HA0C7, &H11D3, &HB9, &H84, &H0, &HC0, &H4F, &H2E, &H73, &HC5)
D3D11_DECODER_PROFILE_VC1_D2010 = iid
End Function
Public Function D3D11_DECODER_PROFILE_MPEG4PT2_VLD_SIMPLE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HEFD64D74, &HC9E8, &H41D7, &HA5, &HE9, &HE9, &HB0, &HE3, &H9F, &HA3, &H19)
D3D11_DECODER_PROFILE_MPEG4PT2_VLD_SIMPLE = iid
End Function
Public Function D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_NOGMC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HED418A9F, &H10D, &H4EDA, &H9A, &HE3, &H9A, &H65, &H35, &H8D, &H8D, &H2E)
D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_NOGMC = iid
End Function
Public Function D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_GMC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAB998B5B, &H4258, &H44A9, &H9F, &HEB, &H94, &HE5, &H97, &HA6, &HBA, &HAE)
D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_GMC = iid
End Function
Public Function D3D11_DECODER_PROFILE_HEVC_VLD_MAIN() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5B11D51B, &H2F4C, &H4452, &HBC, &HC3, &H9, &HF2, &HA1, &H16, &HC, &HC0)
D3D11_DECODER_PROFILE_HEVC_VLD_MAIN = iid
End Function
Public Function D3D11_DECODER_PROFILE_HEVC_VLD_MAIN10() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H107AF0E0, &HEF1A, &H4D19, &HAB, &HA8, &H67, &HA1, &H63, &H7, &H3D, &H13)
D3D11_DECODER_PROFILE_HEVC_VLD_MAIN10 = iid
End Function
Public Function D3D11_DECODER_PROFILE_VP9_VLD_PROFILE0() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H463707F8, &HA1D0, &H4585, &H87, &H6D, &H83, &HAA, &H6D, &H60, &HB8, &H9E)
D3D11_DECODER_PROFILE_VP9_VLD_PROFILE0 = iid
End Function
Public Function D3D11_DECODER_PROFILE_VP8_VLD() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H90B899EA, &H3A62, &H4705, &H88, &HB3, &H8D, &HF0, &H4B, &H27, &H44, &HE7)
D3D11_DECODER_PROFILE_VP8_VLD = iid
End Function
Public Function D3D11_CRYPTO_TYPE_AES128_CTR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B6BD711, &H4F74, &H41C9, &H9E, &H7B, &HB, &HE2, &HD7, &HD9, &H3B, &H4F)
D3D11_CRYPTO_TYPE_AES128_CTR = iid
End Function
Public Function D3D11_DECODER_ENCRYPTION_HW_CENC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H89D6AC4F, &H9F2, &H4229, &HB2, &HCD, &H37, &H74, &HA, &H6D, &HFD, &H81)
D3D11_DECODER_ENCRYPTION_HW_CENC = iid
End Function
Public Function D3D11_KEY_EXCHANGE_HW_PROTECTION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HB1170D8A, &H628D, &H4DA3, &HAD, &H3B, &H82, &HDD, &HB0, &H8B, &H49, &H70)
D3D11_KEY_EXCHANGE_HW_PROTECTION = iid
End Function
Public Function D3D11_AUTHENTICATED_QUERY_PROTECTION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA84EB584, &HC495, &H48AA, &HB9, &H4D, &H8B, &HD2, &HD6, &HFB, &HCE, &H5)
D3D11_AUTHENTICATED_QUERY_PROTECTION = iid
End Function
Public Function D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBC1B18A5, &HB1FB, &H42AB, &HBD, &H94, &HB5, &H82, &H8B, &H4B, &HF7, &HBE)
D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE = iid
End Function
Public Function D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HEC1C539D, &H8CFF, &H4E2A, &HBC, &HC4, &HF5, &H69, &H2F, &H99, &HF4, &H80)
D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE = iid
End Function
Public Function D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2634499E, &HD018, &H4D74, &HAC, &H17, &H7F, &H72, &H40, &H59, &H52, &H8D)
D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION = iid
End Function
Public Function D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HDB207B3, &H9450, &H46A6, &H82, &HDE, &H1B, &H96, &HD4, &H4F, &H9C, &HF2)
D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT = iid
End Function
Public Function D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H649BBADB, &HF0F4, &H4639, &HA1, &H5B, &H24, &H39, &H3F, &HC3, &HAB, &HAC)
D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS = iid
End Function
Public Function D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H12F0BD6, &HE662, &H4474, &HBE, &HFD, &HAA, &H53, &HE5, &H14, &H3C, &H6D)
D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT = iid
End Function
Public Function D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2C042B5E, &H8C07, &H46D5, &HAA, &HBE, &H8F, &H75, &HCB, &HAD, &H4C, &H31)
D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT = iid
End Function
Public Function D3D11_AUTHENTICATED_QUERY_OUTPUT_ID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H839DDCA3, &H9B4E, &H41E4, &HB0, &H53, &H89, &H2B, &HD2, &HA1, &H1E, &HE7)
D3D11_AUTHENTICATED_QUERY_OUTPUT_ID = iid
End Function
Public Function D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ATTRIBUTES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6214D9D2, &H432C, &H4ABB, &H9F, &HCE, &H21, &H6E, &HEA, &H26, &H9E, &H3B)
D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ATTRIBUTES = iid
End Function
Public Function D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID_COUNT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HB30F7066, &H203C, &H4B07, &H93, &HFC, &HCE, &HAA, &HFD, &H61, &H24, &H1E)
D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID_COUNT = iid
End Function
Public Function D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF83A5958, &HE986, &H4BDA, &HBE, &HB0, &H41, &H1F, &H6A, &H7A, &H1, &HB7)
D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID = iid
End Function
Public Function D3D11_AUTHENTICATED_QUERY_CURRENT_ENCRYPTION_WHEN_ACCESSIBLE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HEC1791C7, &HDAD3, &H4F15, &H9E, &HC3, &HFA, &HA9, &H3D, &H60, &HD4, &HF0)
D3D11_AUTHENTICATED_QUERY_CURRENT_ENCRYPTION_WHEN_ACCESSIBLE = iid
End Function
Public Function D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6114BDB, &H3523, &H470A, &H8D, &HCA, &HFB, &HC2, &H84, &H51, &H54, &HF0)
D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE = iid
End Function
Public Function D3D11_AUTHENTICATED_CONFIGURE_PROTECTION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H50455658, &H3F47, &H4362, &HBF, &H99, &HBF, &HDF, &HCD, &HE9, &HED, &H29)
D3D11_AUTHENTICATED_CONFIGURE_PROTECTION = iid
End Function
Public Function D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6346CC54, &H2CFC, &H4AD4, &H82, &H24, &HD1, &H58, &H37, &HDE, &H77, &H0)
D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION = iid
End Function
Public Function D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H772D047, &H1B40, &H48E8, &H9C, &HA6, &HB5, &HF5, &H10, &HDE, &H9F, &H1)
D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE = iid
End Function
Public Function D3D11_AUTHENTICATED_CONFIGURE_ENCRYPTION_WHEN_ACCESSIBLE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H41FFF286, &H6AE0, &H4D43, &H9D, &H55, &HA4, &H6E, &H9E, &HFD, &H15, &H8A)
D3D11_AUTHENTICATED_CONFIGURE_ENCRYPTION_WHEN_ACCESSIBLE = iid
End Function
Public Function D3D11_KEY_EXCHANGE_RSAES_OAEP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC1949895, &HD72A, &H4A1D, &H8E, &H5D, &HED, &H85, &H7D, &H17, &H15, &H20)
D3D11_KEY_EXCHANGE_RSAES_OAEP = iid
End Function
Public Function IID_ID3D11DeviceChild() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1841E5C8, &H16B0, &H489B, &HBC, &HC8, &H44, &HCF, &HB0, &HD5, &HDE, &HAE)
IID_ID3D11DeviceChild = iid
End Function
Public Function IID_ID3D11DepthStencilState() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3823EFB, &H8D8F, &H4E1C, &H9A, &HA2, &HF6, &H4B, &HB2, &HCB, &HFD, &HF1)
IID_ID3D11DepthStencilState = iid
End Function
Public Function IID_ID3D11BlendState() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H75B68FAA, &H347D, &H4159, &H8F, &H45, &HA0, &H64, &HF, &H1, &HCD, &H9A)
IID_ID3D11BlendState = iid
End Function
Public Function IID_ID3D11RasterizerState() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9BB4AB81, &HAB1A, &H4D8F, &HB5, &H6, &HFC, &H4, &H20, &HB, &H6E, &HE7)
IID_ID3D11RasterizerState = iid
End Function
Public Function IID_ID3D11Resource() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HDC8E63F3, &HD12B, &H4952, &HB4, &H7B, &H5E, &H45, &H2, &H6A, &H86, &H2D)
IID_ID3D11Resource = iid
End Function
Public Function IID_ID3D11Buffer() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H48570B85, &HD1EE, &H4FCD, &HA2, &H50, &HEB, &H35, &H7, &H22, &HB0, &H37)
IID_ID3D11Buffer = iid
End Function
Public Function IID_ID3D11Texture1D() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF8FB5C27, &HC6B3, &H4F75, &HA4, &HC8, &H43, &H9A, &HF2, &HEF, &H56, &H4C)
IID_ID3D11Texture1D = iid
End Function
Public Function IID_ID3D11Texture2D() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6F15AAF2, &HD208, &H4E89, &H9A, &HB4, &H48, &H95, &H35, &HD3, &H4F, &H9C)
IID_ID3D11Texture2D = iid
End Function
Public Function IID_ID3D11Texture3D() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H37E866E, &HF56D, &H4357, &HA8, &HAF, &H9D, &HAB, &HBE, &H6E, &H25, &HE)
IID_ID3D11Texture3D = iid
End Function
Public Function IID_ID3D11View() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H839D1216, &HBB2E, &H412B, &HB7, &HF4, &HA9, &HDB, &HEB, &HE0, &H8E, &HD1)
IID_ID3D11View = iid
End Function
Public Function IID_ID3D11ShaderResourceView() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HB0E06FE0, &H8192, &H4E1A, &HB1, &HCA, &H36, &HD7, &H41, &H47, &H10, &HB2)
IID_ID3D11ShaderResourceView = iid
End Function
Public Function IID_ID3D11RenderTargetView() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HDFDBA067, &HB8D, &H4865, &H87, &H5B, &HD7, &HB4, &H51, &H6C, &HC1, &H64)
IID_ID3D11RenderTargetView = iid
End Function
Public Function IID_ID3D11DepthStencilView() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9FDAC92A, &H1876, &H48C3, &HAF, &HAD, &H25, &HB9, &H4F, &H84, &HA9, &HB6)
IID_ID3D11DepthStencilView = iid
End Function
Public Function IID_ID3D11UnorderedAccessView() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H28ACF509, &H7F5C, &H48F6, &H86, &H11, &HF3, &H16, &H1, &HA, &H63, &H80)
IID_ID3D11UnorderedAccessView = iid
End Function
Public Function IID_ID3D11VertexShader() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3B301D64, &HD678, &H4289, &H88, &H97, &H22, &HF8, &H92, &H8B, &H72, &HF3)
IID_ID3D11VertexShader = iid
End Function
Public Function IID_ID3D11HullShader() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8E5C6061, &H628A, &H4C8E, &H82, &H64, &HBB, &HE4, &H5C, &HB3, &HD5, &HDD)
IID_ID3D11HullShader = iid
End Function
Public Function IID_ID3D11DomainShader() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF582C508, &HF36, &H490C, &H99, &H77, &H31, &HEE, &HCE, &H26, &H8C, &HFA)
IID_ID3D11DomainShader = iid
End Function
Public Function IID_ID3D11GeometryShader() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H38325B96, &HEFFB, &H4022, &HBA, &H2, &H2E, &H79, &H5B, &H70, &H27, &H5C)
IID_ID3D11GeometryShader = iid
End Function
Public Function IID_ID3D11PixelShader() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HEA82E40D, &H51DC, &H4F33, &H93, &HD4, &HDB, &H7C, &H91, &H25, &HAE, &H8C)
IID_ID3D11PixelShader = iid
End Function
Public Function IID_ID3D11ComputeShader() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4F5B196E, &HC2BD, &H495E, &HBD, &H1, &H1F, &HDE, &HD3, &H8E, &H49, &H69)
IID_ID3D11ComputeShader = iid
End Function
Public Function IID_ID3D11InputLayout() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE4819DDC, &H4CF0, &H4025, &HBD, &H26, &H5D, &HE8, &H2A, &H3E, &H7, &HB7)
IID_ID3D11InputLayout = iid
End Function
Public Function IID_ID3D11SamplerState() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HDA6FEA51, &H564C, &H4487, &H98, &H10, &HF0, &HD0, &HF9, &HB4, &HE3, &HA5)
IID_ID3D11SamplerState = iid
End Function
Public Function IID_ID3D11Asynchronous() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4B35D0CD, &H1E15, &H4258, &H9C, &H98, &H1B, &H13, &H33, &HF6, &HDD, &H3B)
IID_ID3D11Asynchronous = iid
End Function
Public Function IID_ID3D11Query() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD6C00747, &H87B7, &H425E, &HB8, &H4D, &H44, &HD1, &H8, &H56, &HA, &HFD)
IID_ID3D11Query = iid
End Function
Public Function IID_ID3D11Predicate() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9EB576DD, &H9F77, &H4D86, &H81, &HAA, &H8B, &HAB, &H5F, &HE4, &H90, &HE2)
IID_ID3D11Predicate = iid
End Function
Public Function IID_ID3D11Counter() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6E8C49FB, &HA371, &H4770, &HB4, &H40, &H29, &H8, &H60, &H22, &HB7, &H41)
IID_ID3D11Counter = iid
End Function
Public Function IID_ID3D11ClassInstance() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA6CD7FAA, &HB0B7, &H4A2F, &H94, &H36, &H86, &H62, &HA6, &H57, &H97, &HCB)
IID_ID3D11ClassInstance = iid
End Function
Public Function IID_ID3D11ClassLinkage() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HDDF57CBA, &H9543, &H46E4, &HA1, &H2B, &HF2, &H7, &HA0, &HFE, &H7F, &HED)
IID_ID3D11ClassLinkage = iid
End Function
Public Function IID_ID3D11CommandList() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA24BC4D1, &H769E, &H43F7, &H80, &H13, &H98, &HFF, &H56, &H6C, &H18, &HE2)
IID_ID3D11CommandList = iid
End Function
Public Function IID_ID3D11DeviceContext() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC0BFA96C, &HE089, &H44FB, &H8E, &HAF, &H26, &HF8, &H79, &H61, &H90, &HDA)
IID_ID3D11DeviceContext = iid
End Function
Public Function IID_ID3D11VideoDecoder() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3C9C5B51, &H995D, &H48D1, &H9B, &H8D, &HFA, &H5C, &HAE, &HDE, &HD6, &H5C)
IID_ID3D11VideoDecoder = iid
End Function
Public Function IID_ID3D11VideoProcessorEnumerator() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H31627037, &H53AB, &H4200, &H90, &H61, &H5, &HFA, &HA9, &HAB, &H45, &HF9)
IID_ID3D11VideoProcessorEnumerator = iid
End Function
Public Function IID_ID3D11VideoProcessor() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1D7B0652, &H185F, &H41C6, &H85, &HCE, &HC, &H5B, &HE3, &HD4, &HAE, &H6C)
IID_ID3D11VideoProcessor = iid
End Function
Public Function IID_ID3D11AuthenticatedChannel() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3015A308, &HDCBD, &H47AA, &HA7, &H47, &H19, &H24, &H86, &HD1, &H4D, &H4A)
IID_ID3D11AuthenticatedChannel = iid
End Function
Public Function IID_ID3D11CryptoSession() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B32F9AD, &HBDCC, &H40A6, &HA3, &H9D, &HD5, &HC8, &H65, &H84, &H57, &H20)
IID_ID3D11CryptoSession = iid
End Function
Public Function IID_ID3D11VideoDecoderOutputView() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC2931AEA, &H2A85, &H4F20, &H86, &HF, &HFB, &HA1, &HFD, &H25, &H6E, &H18)
IID_ID3D11VideoDecoderOutputView = iid
End Function
Public Function IID_ID3D11VideoProcessorInputView() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H11EC5A5F, &H51DC, &H4945, &HAB, &H34, &H6E, &H8C, &H21, &H30, &HE, &HA5)
IID_ID3D11VideoProcessorInputView = iid
End Function
Public Function IID_ID3D11VideoProcessorOutputView() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA048285E, &H25A9, &H4527, &HBD, &H93, &HD6, &H8B, &H68, &HC4, &H42, &H54)
IID_ID3D11VideoProcessorOutputView = iid
End Function
Public Function IID_ID3D11VideoContext() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H61F21C45, &H3C0E, &H4A74, &H9C, &HEA, &H67, &H10, &HD, &H9A, &HD5, &HE4)
IID_ID3D11VideoContext = iid
End Function
Public Function IID_ID3D11VideoDevice() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H10EC4D5B, &H975A, &H4689, &HB9, &HE4, &HD0, &HAA, &HC3, &HF, &HE3, &H33)
IID_ID3D11VideoDevice = iid
End Function
Public Function IID_ID3D11Device() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HDB6F6DDB, &HAC77, &H4E88, &H82, &H53, &H81, &H9D, &HF9, &HBB, &HF1, &H40)
IID_ID3D11Device = iid
End Function
Public Function IID_ID3D11BlendState1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HCC86FABE, &HDA55, &H401D, &H85, &HE7, &HE3, &HC9, &HDE, &H28, &H77, &HE9)
IID_ID3D11BlendState1 = iid
End Function
Public Function IID_ID3D11RasterizerState1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1217D7A6, &H5039, &H418C, &HB0, &H42, &H9C, &HBE, &H25, &H6A, &HFD, &H6E)
IID_ID3D11RasterizerState1 = iid
End Function
Public Function IID_ID3DDeviceContextState() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5C1E0D8A, &H7C23, &H48F9, &H8C, &H59, &HA9, &H29, &H58, &HCE, &HFF, &H11)
IID_ID3DDeviceContextState = iid
End Function
Public Function IID_ID3D11DeviceContext1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBB2C6FAA, &HB5FB, &H4082, &H8E, &H6B, &H38, &H8B, &H8C, &HFA, &H90, &HE1)
IID_ID3D11DeviceContext1 = iid
End Function
Public Function IID_ID3D11VideoContext1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA7F026DA, &HA5F8, &H4487, &HA5, &H64, &H15, &HE3, &H43, &H57, &H65, &H1E)
IID_ID3D11VideoContext1 = iid
End Function
Public Function IID_ID3D11VideoDevice1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H29DA1D51, &H1321, &H4454, &H80, &H4B, &HF5, &HFC, &H9F, &H86, &H1F, &HF)
IID_ID3D11VideoDevice1 = iid
End Function
Public Function IID_ID3D11VideoProcessorEnumerator1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H465217F2, &H5568, &H43CF, &HB5, &HB9, &HF6, &H1D, &H54, &H53, &H1C, &HA1)
IID_ID3D11VideoProcessorEnumerator1 = iid
End Function
Public Function IID_ID3D11Device1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA04BFB29, &H8EF, &H43D6, &HA4, &H9C, &HA9, &HBD, &HBD, &HCB, &HE6, &H86)
IID_ID3D11Device1 = iid
End Function
Public Function IID_ID3DUserDefinedAnnotation() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HB2DAAD8B, &H3D4, &H4DBF, &H95, &HEB, &H32, &HAB, &H4B, &H63, &HD0, &HAB)
IID_ID3DUserDefinedAnnotation = iid
End Function
Public Function IID_ID3D11DeviceContext2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H420D5B32, &HB90C, &H4DA4, &HBE, &HF0, &H35, &H9F, &H6A, &H24, &HA8, &H3A)
IID_ID3D11DeviceContext2 = iid
End Function
Public Function IID_ID3D11Device2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9D06DFFA, &HD1E5, &H4D07, &H83, &HA8, &H1B, &HB1, &H23, &HF2, &HF8, &H41)
IID_ID3D11Device2 = iid
End Function
Public Function IID_ID3D11Texture2D1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H51218251, &H1E33, &H4617, &H9C, &HCB, &H4D, &H3A, &H43, &H67, &HE7, &HBB)
IID_ID3D11Texture2D1 = iid
End Function
Public Function IID_ID3D11Texture3D1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC711683, &H2853, &H4846, &H9B, &HB0, &HF3, &HE6, &H6, &H39, &HE4, &H6A)
IID_ID3D11Texture3D1 = iid
End Function
Public Function IID_ID3D11RasterizerState2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6FBD02FB, &H209F, &H46C4, &HB0, &H59, &H2E, &HD1, &H55, &H86, &HA6, &HAC)
IID_ID3D11RasterizerState2 = iid
End Function
Public Function IID_ID3D11ShaderResourceView1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H91308B87, &H9040, &H411D, &H8C, &H67, &HC3, &H92, &H53, &HCE, &H38, &H2)
IID_ID3D11ShaderResourceView1 = iid
End Function
Public Function IID_ID3D11RenderTargetView1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HFFBE2E23, &HF011, &H418A, &HAC, &H56, &H5C, &HEE, &HD7, &HC5, &HB9, &H4B)
IID_ID3D11RenderTargetView1 = iid
End Function
Public Function IID_ID3D11UnorderedAccessView1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7B3B6153, &HA886, &H4544, &HAB, &H37, &H65, &H37, &HC8, &H50, &H4, &H3)
IID_ID3D11UnorderedAccessView1 = iid
End Function
Public Function IID_ID3D11Query1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H631B4766, &H36DC, &H461D, &H8D, &HB6, &HC4, &H7E, &H13, &HE6, &H9, &H16)
IID_ID3D11Query1 = iid
End Function
Public Function IID_ID3D11DeviceContext3() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HB4E3C01D, &HE79E, &H4637, &H91, &HB2, &H51, &HE, &H9F, &H4C, &H9B, &H8F)
IID_ID3D11DeviceContext3 = iid
End Function
Public Function IID_ID3D11Fence() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Haffde9d1, &H1df7, &H4bb7, &H8a, &H34, &H0f, &H46, &H25, &H1d, &Hab, &H80)
IID_ID3D11Fence = iid
End Function
Public Function IID_ID3D11DeviceContext4() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H917600da, &Hf58c, &H4c33, &H98, &Hd8, &H3e, &H15, &Hb3, &H90, &Hfa, &H24)
IID_ID3D11DeviceContext4 = iid
End Function
Public Function IID_ID3D11Device3() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA05C8C37, &HD2C6, &H4732, &HB3, &HA0, &H9C, &HE0, &HB0, &HDC, &H9A, &HE6)
IID_ID3D11Device3 = iid
End Function
Public Function IID_ID3D11Device4() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8992AB71, &H2E6, &H4B8D, &HBA, &H48, &HB0, &H56, &HDC, &HDA, &H42, &HC4)
IID_ID3D11Device4 = iid
End Function
Public Function IID_ID3D11Device5() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8ffde202, &Ha0e7, &H45df, &H9e, &H01, &He8, &H37, &H80, &H1b, &H5e, &Ha0)
IID_ID3D11Device5 = iid
End Function
Public Function IID_ID3D11Multithread() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B7E4E00, &H342C, &H4106, &HA1, &H9F, &H4F, &H27, &H04, &HF6, &H89, &HF0)
IID_ID3D11Multithread = iid
End Function
Public Function IID_ID3D11VideoContext2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC4E7374C, &H6243, &H4D1B, &HAE, &H87, &H52, &HB4, &HF7, &H40, &HE2, &H61)
IID_ID3D11VideoContext2 = iid
End Function
Public Function IID_ID3D11VideoDevice2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H59C0CB01, &H35F0, &H4A70, &H8F, &H67, &H87, &H90, &H5C, &H90, &H6A, &H53)
IID_ID3D11VideoDevice2 = iid
End Function
Public Function IID_ID3D11VideoContext3() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA9E2FAA0, &HCB39, &H418F, &HA0, &HB7, &HD8, &HAA, &HD4, &HDE, &H67, &H2E)
IID_ID3D11VideoContext3 = iid
End Function
Public Function IID_ID3D11On12Device() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H85611E73, &H70A9, &H490E, &H96, &H14, &HA9, &HE3, &H2, &H77, &H79, &H4)
IID_ID3D11On12Device = iid
End Function
Public Function IID_ID3D11On12Device1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hbdb64df4, &Hea2f, &H4c70, &Hb8, &H61, &Haa, &Hab, &H12, &H58, &Hbb, &H5d)
IID_ID3D11On12Device1 = iid
End Function
Public Function IID_ID3D11On12Device2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hdc90f331, &H4740, &H43fa, &H86, &H6e, &H67, &Hf1, &H2c, &Hb5, &H82, &H23)
IID_ID3D11On12Device2 = iid
End Function
Public Function DXGI_DEBUG_D3D11() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4B99317B, &HAC39, &H4AA6, &HBB, &HB, &HBA, &HA0, &H47, &H84, &H79, &H8F)
DXGI_DEBUG_D3D11 = iid
End Function
Public Function IID_ID3D11Debug() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H79CF2233, &H7536, &H4948, &H9D, &H36, &H1E, &H46, &H92, &HDC, &H57, &H60)
IID_ID3D11Debug = iid
End Function
Public Function IID_ID3D11SwitchToRef() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1EF337E3, &H58E7, &H4F83, &HA6, &H92, &HDB, &H22, &H1F, &H5E, &HD4, &H7E)
IID_ID3D11SwitchToRef = iid
End Function
Public Function IID_ID3D11TracingDevice() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1911C771, &H1587, &H413E, &HA7, &HE0, &HFB, &H26, &HC3, &HDE, &H2, &H68)
IID_ID3D11TracingDevice = iid
End Function
Public Function IID_ID3D11RefTrackingOptions() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H193DACDF, &HDB2, &H4C05, &HA5, &H5C, &HEF, &H6, &HCA, &HC5, &H6F, &HD9)
IID_ID3D11RefTrackingOptions = iid
End Function
Public Function IID_ID3D11RefDefaultTrackingOptions() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3916615, &HC644, &H418C, &H9B, &HF4, &H75, &HDB, &H5B, &HE6, &H3C, &HA0)
IID_ID3D11RefDefaultTrackingOptions = iid
End Function
Public Function IID_ID3D11InfoQueue() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6543DBB6, &H1B48, &H42F5, &HAB, &H82, &HE9, &H7E, &HC7, &H43, &H26, &HF6)
IID_ID3D11InfoQueue = iid
End Function
Public Function IID_ID3D11ShaderTrace() As UUID
'{36b013e6-2811-4845-baa7-d623fe0df104}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H36B013E6, CInt(&H2811), CInt(&H4845), &HBA, &HA7, &HD6, &H23, &HFE, &HD, &HF1, &H4)
iid = iid
IID_ID3D11ShaderTrace = iid
End Function
Public Function IID_ID3D11ShaderReflectionType() As UUID
'{6E6FFA6A-9BAE-4613-A51E-91652D508C21}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6E6FFA6A, CInt(&H9BAE), CInt(&H4613), &HA5, &H1E, &H91, &H65, &H2D, &H50, &H8C, &H21)
iid = iid
IID_ID3D11ShaderReflectionType = iid
End Function
Public Function IID_ID3D11ShaderReflectionVariable() As UUID
'{51F23923-F3E5-4BD1-91CB-606177D8DB4C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H51F23923, CInt(&HF3E5), CInt(&H4BD1), &H91, &HCB, &H60, &H61, &H77, &HD8, &HDB, &H4C)
iid = iid
IID_ID3D11ShaderReflectionVariable = iid
End Function
Public Function IID_ID3D11ShaderReflectionConstantBuffer() As UUID
'{EB62D63D-93DD-4318-8AE8-C6F83AD371B8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEB62D63D, CInt(&H93DD), CInt(&H4318), &H8A, &HE8, &HC6, &HF8, &H3A, &HD3, &H71, &HB8)
iid = iid
IID_ID3D11ShaderReflectionConstantBuffer = iid
End Function
Public Function IID_ID3D11ShaderReflection() As UUID
'{8d536ca1-0cca-4956-a837-786963755584}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8D536CA1, CInt(&HCCA), CInt(&H4956), &HA8, &H37, &H78, &H69, &H63, &H75, &H55, &H84)
iid = iid
IID_ID3D11ShaderReflection = iid
End Function
Public Function IID_ID3D11LibraryReflection() As UUID
'{54384F1B-5B3E-4BB7-AE01-60BA3097CBB6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H54384F1B, CInt(&H5B3E), CInt(&H4BB7), &HAE, &H1, &H60, &HBA, &H30, &H97, &HCB, &HB6)
iid = iid
IID_ID3D11LibraryReflection = iid
End Function
Public Function IID_ID3D11FunctionReflection() As UUID
'{207BCECB-D683-4A06-A8A3-9B149B9F73A4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H207BCECB, CInt(&HD683), CInt(&H4A06), &HA8, &HA3, &H9B, &H14, &H9B, &H9F, &H73, &HA4)
iid = iid
IID_ID3D11FunctionReflection = iid
End Function
Public Function IID_ID3D11FunctionParameterReflection() As UUID
'{42757488-334F-47FE-982E-1A65D08CC462}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H42757488, CInt(&H334F), CInt(&H47FE), &H98, &H2E, &H1A, &H65, &HD0, &H8C, &HC4, &H62)
iid = iid
IID_ID3D11FunctionParameterReflection = iid
End Function
Public Function IID_ID3D11Module() As UUID
'{CAC701EE-80FC-4122-8242-10B39C8CEC34}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HCAC701EE, CInt(&H80FC), CInt(&H4122), &H82, &H42, &H10, &HB3, &H9C, &H8C, &HEC, &H34)
iid = iid
IID_ID3D11Module = iid
End Function
Public Function IID_ID3D11ModuleInstance() As UUID
'{469E07F7-045A-48D5-AA12-68A478CDF75D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H469E07F7, CInt(&H45A), CInt(&H48D5), &HAA, &H12, &H68, &HA4, &H78, &HCD, &HF7, &H5D)
iid = iid
IID_ID3D11ModuleInstance = iid
End Function
Public Function IID_ID3D11Linker() As UUID
'{59A6CD0E-E10D-4C1F-88C0-63ABA1DAF30E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H59A6CD0E, CInt(&HE10D), CInt(&H4C1F), &H88, &HC0, &H63, &HAB, &HA1, &HDA, &HF3, &HE)
iid = iid
IID_ID3D11Linker = iid
End Function
Public Function IID_ID3D11LinkingNode() As UUID
'{D80DD70C-8D2F-4751-94A1-03C79B3556DB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD80DD70C, CInt(&H8D2F), CInt(&H4751), &H94, &HA1, &H3, &HC7, &H9B, &H35, &H56, &HDB)
iid = iid
IID_ID3D11LinkingNode = iid
End Function
Public Function IID_ID3D11FunctionLinkingGraph() As UUID
'{54133220-1CE8-43D3-8236-9855C5CEECFF}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H54133220, CInt(&H1CE8), CInt(&H43D3), &H82, &H36, &H98, &H55, &HC5, &HCE, &HEC, &HFF)
iid = iid
IID_ID3D11FunctionLinkingGraph = iid
End Function
Public Function IID_ID3DX11Scan() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5089b68f, &He71d, &H4d38, &Hbe, &H8e, &Hf3, &H63, &Hb9, &H5a, &H94, &H05)
IID_ID3DX11Scan = iid
End Function
Public Function IID_ID3DX11SegmentedScan() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha915128c, &Hd954, &H4c79, &Hbf, &He1, &H64, &Hdb, &H92, &H31, &H94, &Hd6)
IID_ID3DX11SegmentedScan = iid
End Function
Public Function IID_ID3DX11FFT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb3f7a938, &H4c93, &H4310, &Ha6, &H75, &Hb3, &H0d, &H6d, &He5, &H05, &H53)
IID_ID3DX11FFT = iid
End Function


Public Function IID_ID3D12Debug() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H344488B7, &H6846, &H474B, &HB9, &H89, &HF0, &H27, &H44, &H82, &H45, &HE0)
IID_ID3D12Debug = iid
End Function
Public Function IID_ID3D12Debug1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAFFAA4CA, &H63FE, &H4D8E, &HB8, &HAD, &H15, &H90, &H0, &HAF, &H43, &H4)
IID_ID3D12Debug1 = iid
End Function
Public Function IID_ID3D12Object() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc4fec28f, &H7966, &H4e95, &H9f, &H94, &Hf4, &H31, &Hcb, &H56, &Hc3, &Hb8)
IID_ID3D12Object = iid
End Function
Public Function IID_ID3D12DeviceChild() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H905db94b, &Ha00c, &H4140, &H9d, &Hf5, &H2b, &H64, &Hca, &H9e, &Ha3, &H57)
IID_ID3D12DeviceChild = iid
End Function
Public Function IID_ID3D12RootSignature() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc54a6b66, &H72df, &H4ee8, &H8b, &He5, &Ha9, &H46, &Ha1, &H42, &H92, &H14)
IID_ID3D12RootSignature = iid
End Function
Public Function IID_ID3D12RootSignatureDeserializer() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H34AB647B, &H3CC8, &H46AC, &H84, &H1B, &HC0, &H96, &H56, &H45, &HC0, &H46)
IID_ID3D12RootSignatureDeserializer = iid
End Function
Public Function IID_ID3D12VersionedRootSignatureDeserializer() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7F91CE67, &H090C, &H4BB7, &HB7, &H8E, &HED, &H8F, &HF2, &HE3, &H1D, &HA0)
IID_ID3D12VersionedRootSignatureDeserializer = iid
End Function
Public Function IID_ID3D12Pageable() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H63ee58fb, &H1268, &H4835, &H86, &Hda, &Hf0, &H08, &Hce, &H62, &Hf0, &Hd6)
IID_ID3D12Pageable = iid
End Function
Public Function IID_ID3D12Heap() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6b3b2502, &H6e51, &H45b3, &H90, &Hee, &H98, &H84, &H26, &H5e, &H8d, &Hf3)
IID_ID3D12Heap = iid
End Function
Public Function IID_ID3D12Resource() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H696442be, &Ha72e, &H4059, &Hbc, &H79, &H5b, &H5c, &H98, &H04, &H0f, &Had)
IID_ID3D12Resource = iid
End Function
Public Function IID_ID3D12CommandAllocator() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6102dee4, &Haf59, &H4b09, &Hb9, &H99, &Hb4, &H4d, &H73, &Hf0, &H9b, &H24)
IID_ID3D12CommandAllocator = iid
End Function
Public Function IID_ID3D12Fence() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0a753dcf, &Hc4d8, &H4b91, &Had, &Hf6, &Hbe, &H5a, &H60, &Hd9, &H5a, &H76)
IID_ID3D12Fence = iid
End Function
Public Function IID_ID3D12Fence1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H433685fe, &He22b, &H4ca0, &Ha8, &Hdb, &Hb5, &Hb4, &Hf4, &Hdd, &H0e, &H4a)
IID_ID3D12Fence1 = iid
End Function
Public Function IID_ID3D12PipelineState() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H765a30f3, &Hf624, &H4c6f, &Ha8, &H28, &Hac, &He9, &H48, &H62, &H24, &H45)
IID_ID3D12PipelineState = iid
End Function
Public Function IID_ID3D12DescriptorHeap() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8efb471d, &H616c, &H4f49, &H90, &Hf7, &H12, &H7b, &Hb7, &H63, &Hfa, &H51)
IID_ID3D12DescriptorHeap = iid
End Function
Public Function IID_ID3D12QueryHeap() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0d9658ae, &Hed45, &H469e, &Ha6, &H1d, &H97, &H0e, &Hc5, &H83, &Hca, &Hb4)
IID_ID3D12QueryHeap = iid
End Function
Public Function IID_ID3D12CommandSignature() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc36a797c, &Hec80, &H4f0a, &H89, &H85, &Ha7, &Hb2, &H47, &H50, &H82, &Hd1)
IID_ID3D12CommandSignature = iid
End Function
Public Function IID_ID3D12CommandList() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7116d91c, &He7e4, &H47ce, &Hb8, &Hc6, &Hec, &H81, &H68, &Hf4, &H37, &He5)
IID_ID3D12CommandList = iid
End Function
Public Function IID_ID3D12GraphicsCommandList() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5b160d0f, &Hac1b, &H4185, &H8b, &Ha8, &Hb3, &Hae, &H42, &Ha5, &Ha4, &H55)
IID_ID3D12GraphicsCommandList = iid
End Function
Public Function IID_ID3D12GraphicsCommandList1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H553103fb, &H1fe7, &H4557, &Hbb, &H38, &H94, &H6d, &H7d, &H0e, &H7c, &Ha7)
IID_ID3D12GraphicsCommandList1 = iid
End Function
Public Function IID_ID3D12GraphicsCommandList2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H38C3E585, &HFF17, &H412C, &H91, &H50, &H4F, &HC6, &HF9, &HD7, &H2A, &H28)
IID_ID3D12GraphicsCommandList2 = iid
End Function
Public Function IID_ID3D12CommandQueue() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0ec870a6, &H5d7e, &H4c22, &H8c, &Hfc, &H5b, &Haa, &He0, &H76, &H16, &Hed)
IID_ID3D12CommandQueue = iid
End Function
Public Function IID_ID3D12Device() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H189819f1, &H1db6, &H4b57, &Hbe, &H54, &H18, &H21, &H33, &H9b, &H85, &Hf7)
IID_ID3D12Device = iid
End Function
Public Function IID_ID3D12PipelineLibrary() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc64226a8, &H9201, &H46af, &Hb4, &Hcc, &H53, &Hfb, &H9f, &Hf7, &H41, &H4f)
IID_ID3D12PipelineLibrary = iid
End Function
Public Function IID_ID3D12PipelineLibrary1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H80eabf42, &H2568, &H4e5e, &Hbd, &H82, &Hc3, &H7f, &H86, &H96, &H1d, &Hc3)
IID_ID3D12PipelineLibrary1 = iid
End Function
Public Function IID_ID3D12Device1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H77acce80, &H638e, &H4e65, &H88, &H95, &Hc1, &Hf2, &H33, &H86, &H86, &H3e)
IID_ID3D12Device1 = iid
End Function
Public Function IID_ID3D12Device2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H30baa41e, &Hb15b, &H475c, &Ha0, &Hbb, &H1a, &Hf5, &Hc5, &Hb6, &H43, &H28)
IID_ID3D12Device2 = iid
End Function
Public Function IID_ID3D12Device3() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H81dadc15, &H2bad, &H4392, &H93, &Hc5, &H10, &H13, &H45, &Hc4, &Haa, &H98)
IID_ID3D12Device3 = iid
End Function
Public Function IID_ID3D12ProtectedSession() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA1533D18, &H0AC1, &H4084, &H85, &HB9, &H89, &HA9, &H61, &H16, &H80, &H6B)
IID_ID3D12ProtectedSession = iid
End Function
Public Function IID_ID3D12ProtectedResourceSession() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6CD696F4, &HF289, &H40CC, &H80, &H91, &H5A, &H6C, &H0A, &H09, &H9C, &H3D)
IID_ID3D12ProtectedResourceSession = iid
End Function
Public Function IID_ID3D12Device4() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He865df17, &Ha9ee, &H46f9, &Ha4, &H63, &H30, &H98, &H31, &H5a, &Ha2, &He5)
IID_ID3D12Device4 = iid
End Function
Public Function IID_ID3D12LifetimeOwner() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He667af9f, &Hcd56, &H4f46, &H83, &Hce, &H03, &H2e, &H59, &H5d, &H70, &Ha8)
IID_ID3D12LifetimeOwner = iid
End Function
Public Function IID_ID3D12SwapChainAssistant() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf1df64b6, &H57fd, &H49cd, &H88, &H07, &Hc0, &Heb, &H88, &Hb4, &H5c, &H8f)
IID_ID3D12SwapChainAssistant = iid
End Function
Public Function IID_ID3D12LifetimeTracker() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3fd03d36, &H4eb1, &H424a, &Ha5, &H82, &H49, &H4e, &Hcb, &H8b, &Ha8, &H13)
IID_ID3D12LifetimeTracker = iid
End Function
Public Function IID_ID3D12StateObject() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H47016943, &Hfca8, &H4594, &H93, &Hea, &Haf, &H25, &H8b, &H55, &H34, &H6d)
IID_ID3D12StateObject = iid
End Function
Public Function IID_ID3D12StateObjectProperties() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hde5fa827, &H9bf9, &H4f26, &H89, &Hff, &Hd7, &Hf5, &H6f, &Hde, &H38, &H60)
IID_ID3D12StateObjectProperties = iid
End Function
Public Function IID_ID3D12Device5() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8b4f173b, &H2fea, &H4b80, &H8f, &H58, &H43, &H07, &H19, &H1a, &Hb9, &H5d)
IID_ID3D12Device5 = iid
End Function
Public Function IID_ID3D12DeviceRemovedExtendedDataSettings() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H82BC481C, &H6B9B, &H4030, &HAE, &HDB, &H7E, &HE3, &HD1, &HDF, &H1E, &H63)
IID_ID3D12DeviceRemovedExtendedDataSettings = iid
End Function
Public Function IID_ID3D12DeviceRemovedExtendedDataSettings1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HDBD5AE51, &H3317, &H4F0A, &HAD, &HF9, &H1D, &H7C, &HED, &HCA, &HAE, &H0B)
IID_ID3D12DeviceRemovedExtendedDataSettings1 = iid
End Function
Public Function IID_ID3D12DeviceRemovedExtendedDataSettings2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H61552388, &H01ab, &H4008, &Ha4, &H36, &H83, &Hdb, &H18, &H95, &H66, &Hea)
IID_ID3D12DeviceRemovedExtendedDataSettings2 = iid
End Function
Public Function IID_ID3D12DeviceRemovedExtendedData() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H98931D33, &H5AE8, &H4791, &HAA, &H3C, &H1A, &H73, &HA2, &H93, &H4E, &H71)
IID_ID3D12DeviceRemovedExtendedData = iid
End Function
Public Function IID_ID3D12DeviceRemovedExtendedData1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9727A022, &HCF1D, &H4DDA, &H9E, &HBA, &HEF, &HFA, &H65, &H3F, &HC5, &H06)
IID_ID3D12DeviceRemovedExtendedData1 = iid
End Function
Public Function IID_ID3D12DeviceRemovedExtendedData2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H67FC5816, &HE4CA, &H4915, &HBF, &H18, &H42, &H54, &H12, &H72, &HDA, &H54)
IID_ID3D12DeviceRemovedExtendedData2 = iid
End Function
Public Function IID_ID3D12Device6() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc70b221b, &H40e4, &H4a17, &H89, &Haf, &H02, &H5a, &H07, &H27, &Ha6, &Hdc)
IID_ID3D12Device6 = iid
End Function
Public Function IID_ID3D12ProtectedResourceSession1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD6F12DD6, &H76FB, &H406E, &H89, &H61, &H42, &H96, &HEE, &HFC, &H04, &H09)
IID_ID3D12ProtectedResourceSession1 = iid
End Function
Public Function IID_ID3D12Device7() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5c014b53, &H68a1, &H4b9b, &H8b, &Hd1, &Hdd, &H60, &H46, &Hb9, &H35, &H8b)
IID_ID3D12Device7 = iid
End Function
Public Function IID_ID3D12Device8() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9218E6BB, &HF944, &H4F7E, &HA7, &H5C, &HB1, &HB2, &HC7, &HB7, &H01, &HF3)
IID_ID3D12Device8 = iid
End Function
Public Function IID_ID3D12Resource1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9D5E227A, &H4430, &H4161, &H88, &HB3, &H3E, &HCA, &H6B, &HB1, &H6E, &H19)
IID_ID3D12Resource1 = iid
End Function
Public Function IID_ID3D12Resource2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBE36EC3B, &HEA85, &H4AEB, &HA4, &H5A, &HE9, &HD7, &H64, &H04, &HA4, &H95)
IID_ID3D12Resource2 = iid
End Function
Public Function IID_ID3D12Heap1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H572F7389, &H2168, &H49E3, &H96, &H93, &HD6, &HDF, &H58, &H71, &HBF, &H6D)
IID_ID3D12Heap1 = iid
End Function
Public Function IID_ID3D12GraphicsCommandList3() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6FDA83A7, &HB84C, &H4E38, &H9A, &HC8, &HC7, &HBD, &H22, &H01, &H6B, &H3D)
IID_ID3D12GraphicsCommandList3 = iid
End Function
Public Function IID_ID3D12MetaCommand() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HDBB84C27, &H36CE, &H4FC9, &HB8, &H01, &HF0, &H48, &HC4, &H6A, &HC5, &H70)
IID_ID3D12MetaCommand = iid
End Function
Public Function IID_ID3D12GraphicsCommandList4() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8754318e, &Hd3a9, &H4541, &H98, &Hcf, &H64, &H5b, &H50, &Hdc, &H48, &H74)
IID_ID3D12GraphicsCommandList4 = iid
End Function
Public Function IID_ID3D12ShaderCacheSession() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H28e2495d, &H0f64, &H4ae4, &Ha6, &Hec, &H12, &H92, &H55, &Hdc, &H49, &Ha8)
IID_ID3D12ShaderCacheSession = iid
End Function
Public Function IID_ID3D12Device9() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4c80e962, &Hf032, &H4f60, &Hbc, &H9e, &Heb, &Hc2, &Hcf, &Ha1, &Hd8, &H3c)
IID_ID3D12Device9 = iid
End Function
Public Function IID_ID3D12Device10() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H517f8718, &Haa66, &H49f9, &Hb0, &H2b, &Ha7, &Hab, &H89, &Hc0, &H60, &H31)
IID_ID3D12Device10 = iid
End Function
Public Function IID_ID3D12Device11() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5405c344, &Hd457, &H444e, &Hb4, &Hdd, &H23, &H66, &He4, &H5a, &Hee, &H39)
IID_ID3D12Device11 = iid
End Function
Public Function IID_ID3D12Device12() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5af5c532, &H4c91, &H4cd0, &Hb5, &H41, &H15, &Ha4, &H05, &H39, &H5f, &Hc5)
IID_ID3D12Device12 = iid
End Function
Public Function IID_ID3D12Device13() As UUID
'{14eecffc-4df8-40f7-a118-5c816f45695e}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H14eecffc, CInt(&H4df8), CInt(&H40f7), &Ha1, &H18, &H5c, &H81, &H6f, &H45, &H69, &H5e)
 IID_ID3D12Device13 = iid
End Function
Public Function IID_ID3D12Device14() As UUID
'{5f6e592d-d895-44c2-8e4a-88ad4926d323}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5f6e592d, CInt(&Hd895), CInt(&H44c2), &H8e, &H4a, &H88, &Had, &H49, &H26, &Hd3, &H23)
 IID_ID3D12Device14 = iid
End Function
Public Function IID_ID3D12VirtualizationGuestDevice() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hbc66d368, &H7373, &H4943, &H87, &H57, &Hfc, &H87, &Hdc, &H79, &He4, &H76)
IID_ID3D12VirtualizationGuestDevice = iid
End Function
Public Function IID_ID3D12Tools() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7071e1f0, &He84b, &H4b33, &H97, &H4f, &H12, &Hfa, &H49, &Hde, &H65, &Hc5)
IID_ID3D12Tools = iid
End Function
Public Function IID_ID3D12SDKConfiguration() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He9eb5314, &H33aa, &H42b2, &Ha7, &H18, &Hd7, &H7f, &H58, &Hb1, &Hf1, &Hc7)
IID_ID3D12SDKConfiguration = iid
End Function
Public Function IID_ID3D12SDKConfiguration1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8aaf9303, &Had25, &H48b9, &H9a, &H57, &Hd9, &Hc3, &H7e, &H00, &H9d, &H9f)
IID_ID3D12SDKConfiguration1 = iid
End Function
Public Function IID_ID3D12DeviceFactory() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H61f307d3, &Hd34e, &H4e7c, &H83, &H74, &H3b, &Ha4, &Hde, &H23, &Hcc, &Hcb)
IID_ID3D12DeviceFactory = iid
End Function
#If TWINBASIC Then
[Description("NOTE: This interface previously had a different GUID and lacked the FeatureLevel arg in CreateDevice. For that interface, use ID3D12DeviceFactoryOld/IID_ID3D12DeviceFactoryOld")]
#End If
Public Function IID_ID3D12DeviceFactoryOld() As UUID
'{cd310fac-c78c-413d-a799-3da46a952cb7}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hcd310fac, CInt(&Hc78c), CInt(&H413d), &Ha7, &H99, &H3d, &Ha4, &H6a, &H95, &H2c, &Hb7)
 IID_ID3D12DeviceFactoryOld = iid
End Function
Public Function IID_ID3D12DeviceConfiguration() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H78dbf87b, &Hf766, &H422b, &Ha6, &H1c, &Hc8, &Hc4, &H46, &Hbd, &Hb9, &Had)
IID_ID3D12DeviceConfiguration = iid
End Function
Public Function IID_ID3D12DeviceConfiguration1() As UUID
'{ed342442-6343-4e16-bb82-a3a577874e56}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hed342442, CInt(&H6343), CInt(&H4e16), &Hbb, &H82, &Ha3, &Ha5, &H77, &H87, &H4e, &H56)
 IID_ID3D12DeviceConfiguration1 = iid
End Function
Public Function IID_ID3D12GraphicsCommandList5() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H55050859, &H4024, &H474c, &H87, &Hf5, &H64, &H72, &Hea, &Hee, &H44, &Hea)
IID_ID3D12GraphicsCommandList5 = iid
End Function
Public Function IID_ID3D12GraphicsCommandList6() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc3827890, &He548, &H4cfa, &H96, &Hcf, &H56, &H89, &Ha9, &H37, &H0f, &H80)
IID_ID3D12GraphicsCommandList6 = iid
End Function
Public Function IID_ID3D12GraphicsCommandList7() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hdd171223, &H8b61, &H4769, &H90, &He3, &H16, &H0c, &Hcd, &He4, &He2, &Hc1)
IID_ID3D12GraphicsCommandList7 = iid
End Function
Public Function IID_ID3D12GraphicsCommandList8() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hee936ef9, &H599d, &H4d28, &H93, &H8e, &H23, &Hc4, &Had, &H05, &Hce, &H51)
IID_ID3D12GraphicsCommandList8 = iid
End Function
Public Function IID_ID3D12GraphicsCommandList9() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H34ed2808, &Hffe6, &H4c2b, &Hb1, &H1a, &Hca, &Hbd, &H2b, &H0c, &H59, &He1)
IID_ID3D12GraphicsCommandList9 = iid
End Function
Public Function IID_ID3D12GraphicsCommandList10() As UUID
'{7013c015-d161-4b63-a08c-238552dd8acc}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7013c015, CInt(&Hd161), CInt(&H4b63), &Ha0, &H8c, &H23, &H85, &H52, &Hdd, &H8a, &Hcc)
 IID_ID3D12GraphicsCommandList10 = iid
End Function
Public Function IID_ID3D12StateObjectProperties1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H460caac7, &H1d24, &H446a, &Ha1, &H84, &Hca, &H67, &Hdb, &H49, &H41, &H38)
IID_ID3D12StateObjectProperties1 = iid
End Function
Public Function IID_ID3D12WorkGraphProperties() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H065acf71, &Hf863, &H4b89, &H82, &Hf4, &H02, &He4, &Hd5, &H88, &H67, &H57)
IID_ID3D12WorkGraphProperties = iid
End Function










Public Function IID_ID3D12DebugDevice1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA9B71770, &HD099, &H4A65, &HA6, &H98, &H3D, &HEE, &H10, &H2, &HF, &H88)
IID_ID3D12DebugDevice1 = iid
End Function
Public Function IID_ID3D12DebugDevice() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3FEBD6DD, &H4973, &H4787, &H81, &H94, &HE4, &H5F, &H9E, &H28, &H92, &H3E)
IID_ID3D12DebugDevice = iid
End Function
Public Function IID_ID3D12DebugCommandQueue() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9E0BF36, &H54AC, &H484F, &H88, &H47, &H4B, &HAE, &HEA, &HB6, &H5, &H3A)
IID_ID3D12DebugCommandQueue = iid
End Function
Public Function IID_ID3D12DebugCommandList1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H102CA951, &H311B, &H4B01, &HB1, &H1F, &HEC, &HB8, &H3E, &H6, &H1B, &H37)
IID_ID3D12DebugCommandList1 = iid
End Function
Public Function IID_ID3D12DebugCommandList() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9E0BF36, &H54AC, &H484F, &H88, &H47, &H4B, &HAE, &HEA, &HB6, &H5, &H3F)
IID_ID3D12DebugCommandList = iid
End Function
Public Function IID_ID3D12InfoQueue() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H742A90B, &HC387, &H483F, &HB9, &H46, &H30, &HA7, &HE4, &HE6, &H14, &H58)
IID_ID3D12InfoQueue = iid
End Function
Public Function DXGI_DEBUG_D3D12() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HCF59A98C, &HA950, &H4326, &H91, &HEF, &H9B, &HBA, &HA1, &H7B, &HFD, &H95)
DXGI_DEBUG_D3D12 = iid
End Function
Public Function D3D12_PROTECTED_RESOURCES_SESSION_HARDWARE_PROTECTED() As UUID
'{62B0084E-C70E-4DAA-A109-30FF8D5A0482}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H62B0084E, CInt(&HC70E), CInt(&H4DAA), &HA1, &H09, &H30, &HFF, &H8D, &H5A, &H04, &H82)
 D3D12_PROTECTED_RESOURCES_SESSION_HARDWARE_PROTECTED = iid
End Function
Public Function D3D12ExperimentalShaderModels() As UUID
'{76f5573e-f13a-40f5-b297-81ce9e18933f}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H76f5573e, CInt(&Hf13a), CInt(&H40f5), &Hb2, &H97, &H81, &Hce, &H9e, &H18, &H93, &H3f)
 D3D12ExperimentalShaderModels = iid
End Function
Public Function D3D12TiledResourceTier4() As UUID
'{c9c4725f-a81a-4f56-8c5b-c51039d694fb}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc9c4725f, CInt(&Ha81a), CInt(&H4f56), &H8c, &H5b, &Hc5, &H10, &H39, &Hd6, &H94, &Hfb)
 D3D12TiledResourceTier4 = iid
End Function
Public Function D3D12MetaCommand() As UUID
'{C734C97E-8077-48C8-9FDC-D9D1DD31DD77}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC734C97E, CInt(&H8077), CInt(&H48C8), &H9F, &HDC, &HD9, &HD1, &HDD, &H31, &HDD, &H77)
 D3D12MetaCommand = iid
End Function
Public Function CLSID_D3D12Debug() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf2352aeb, &Hdd84, &H49fe, &Hb9, &H7b, &Ha9, &Hdc, &Hfd, &Hcc, &H1b, &H4f)
CLSID_D3D12Debug = iid
End Function
Public Function CLSID_D3D12Tools() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He38216b1, &H3c8c, &H4833, &Haa, &H09, &H0a, &H06, &Hb6, &H5d, &H96, &Hc8)
CLSID_D3D12Tools = iid
End Function
Public Function CLSID_D3D12DeviceRemovedExtendedData() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4a75bbc4, &H9ff4, &H4ad8, &H9f, &H18, &Hab, &Hae, &H84, &Hdc, &H5f, &Hf2)
CLSID_D3D12DeviceRemovedExtendedData = iid
End Function
Public Function CLSID_D3D12SDKConfiguration() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7cda6aca, &Ha03e, &H49c8, &H94, &H58, &H03, &H34, &Hd2, &H0e, &H07, &Hce)
CLSID_D3D12SDKConfiguration = iid
End Function
Public Function CLSID_D3D12DeviceFactory() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H114863bf, &Hc386, &H4aee, &Hb3, &H9d, &H8f, &H0b, &Hbb, &H06, &H29, &H55)
CLSID_D3D12DeviceFactory = iid
End Function



Public Function D3D12_VIDEO_DECODE_PROFILE_MPEG2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hee27417f, &H5e28, &H4e65, &Hbe, &Hea, &H1d, &H26, &Hb5, &H08, &Had, &Hc9)
D3D12_VIDEO_DECODE_PROFILE_MPEG2 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_MPEG1_AND_MPEG2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H86695f12, &H340e, &H4f04, &H9f, &Hd3, &H92, &H53, &Hdd, &H32, &H74, &H60)
D3D12_VIDEO_DECODE_PROFILE_MPEG1_AND_MPEG2 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_H264() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be68, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
D3D12_VIDEO_DECODE_PROFILE_H264 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_H264_STEREO_PROGRESSIVE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd79be8da, &H0cf1, &H4c81, &Hb8, &H2a, &H69, &Ha4, &He2, &H36, &Hf4, &H3d)
D3D12_VIDEO_DECODE_PROFILE_H264_STEREO_PROGRESSIVE = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_H264_STEREO() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf9aaccbb, &Hc2b6, &H4cfc, &H87, &H79, &H57, &H07, &Hb1, &H76, &H05, &H52)
D3D12_VIDEO_DECODE_PROFILE_H264_STEREO = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_H264_MULTIVIEW() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H705b9d82, &H76cf, &H49d6, &Hb7, &He6, &Hac, &H88, &H72, &Hdb, &H01, &H3c)
D3D12_VIDEO_DECODE_PROFILE_H264_MULTIVIEW = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_VC1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81beA3, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
D3D12_VIDEO_DECODE_PROFILE_VC1 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_VC1_D2010() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81beA4, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
D3D12_VIDEO_DECODE_PROFILE_VC1_D2010 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_MPEG4PT2_SIMPLE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hefd64d74, &Hc9e8, &H41d7, &Ha5, &He9, &He9, &Hb0, &He3, &H9f, &Ha3, &H19)
D3D12_VIDEO_DECODE_PROFILE_MPEG4PT2_SIMPLE = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_MPEG4PT2_ADVSIMPLE_NOGMC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hed418a9f, &H010d, &H4eda, &H9a, &He3, &H9a, &H65, &H35, &H8d, &H8d, &H2e)
D3D12_VIDEO_DECODE_PROFILE_MPEG4PT2_ADVSIMPLE_NOGMC = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5b11d51b, &H2f4c, &H4452, &Hbc, &Hc3, &H09, &Hf2, &Ha1, &H16, &H0c, &Hc0)
D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN10() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H107af0e0, &Hef1a, &H4d19, &Hab, &Ha8, &H67, &Ha1, &H63, &H07, &H3d, &H13)
D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN10 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_VP9() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H463707f8, &Ha1d0, &H4585, &H87, &H6d, &H83, &Haa, &H6d, &H60, &Hb8, &H9e)
D3D12_VIDEO_DECODE_PROFILE_VP9 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_VP9_10BIT_PROFILE2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha4c749ef, &H6ecf, &H48aa, &H84, &H48, &H50, &Ha7, &Ha1, &H16, &H5f, &Hf7)
D3D12_VIDEO_DECODE_PROFILE_VP9_10BIT_PROFILE2 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_VP8() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H90b899ea, &H3a62, &H4705, &H88, &Hb3, &H8d, &Hf0, &H4b, &H27, &H44, &He7)
D3D12_VIDEO_DECODE_PROFILE_VP8 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE0() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb8be4ccb, &Hcf53, &H46ba, &H8d, &H59, &Hd6, &Hb8, &Ha6, &Hda, &H5d, &H2a)
D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE0 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6936ff0f, &H45b1, &H4163, &H9c, &Hc1, &H64, &H6e, &Hf6, &H94, &H61, &H08)
D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE1 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0c5f2aa1, &He541, &H4089, &Hbb, &H7b, &H98, &H11, &H0a, &H19, &Hd7, &Hc8)
D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE2 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_AV1_12BIT_PROFILE2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H17127009, &Ha00f, &H4ce1, &H99, &H4e, &Hbf, &H40, &H81, &Hf6, &Hf3, &Hf0)
D3D12_VIDEO_DECODE_PROFILE_AV1_12BIT_PROFILE2 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_AV1_12BIT_PROFILE2_420() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2d80bed6, &H9cac, &H4835, &H9e, &H91, &H32, &H7b, &Hbc, &H4f, &H9e, &He8)
D3D12_VIDEO_DECODE_PROFILE_AV1_12BIT_PROFILE2_420 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_HEVC_MONOCHROME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0685b993, &H3d8c, &H43a0, &H8b, &H28, &Hd7, &H4c, &H2d, &H68, &H99, &Ha4)
D3D12_VIDEO_DECODE_PROFILE_HEVC_MONOCHROME = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_HEVC_MONOCHROME10() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H142a1d0f, &H69dd, &H4ec9, &H85, &H91, &Hb1, &H2f, &Hfc, &Hb9, &H1a, &H29)
D3D12_VIDEO_DECODE_PROFILE_HEVC_MONOCHROME10 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN12() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1a72925f, &H0c2c, &H4f15, &H96, &Hfb, &Hb1, &H7d, &H14, &H73, &H60, &H3f)
D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN12 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN10_422() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0bac4fe5, &H1532, &H4429, &Ha8, &H54, &Hf8, &H4d, &He0, &H49, &H53, &Hdb)
D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN10_422 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN12_422() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H55bcac81, &Hf311, &H4093, &Ha7, &Hd0, &H1c, &Hbc, &H0b, &H84, &H9b, &Hee)
D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN12_422 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN_444() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4008018f, &Hf537, &H4b36, &H98, &Hcf, &H61, &Haf, &H8a, &H2c, &H1a, &H33)
D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN_444 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN10_EXT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9cc55490, &He37c, &H4932, &H86, &H84, &H49, &H20, &Hf9, &Hf6, &H40, &H9c)
D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN10_EXT = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN10_444() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0dabeffa, &H4458, &H4602, &Hbc, &H03, &H07, &H95, &H65, &H9d, &H61, &H7c)
D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN10_444 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN12_444() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9798634d, &Hfe9d, &H48e5, &Hb4, &Hda, &Hdb, &Hec, &H45, &Hb3, &Hdf, &H01)
D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN12_444 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN16() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha4fbdbb0, &Ha113, &H482b, &Ha2, &H32, &H63, &H5c, &Hc0, &H69, &H7f, &H6d)
D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN16 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_MJPEG_VLD_420() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H725cb506, &Hc29, &H43c4, &H94, &H40, &H8e, &H93, &H97, &H90, &H3a, &H4)
D3D12_VIDEO_DECODE_PROFILE_MJPEG_VLD_420 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_MJPEG_VLD_422() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5b77b9cd, &H1a35, &H4c30, &H9f, &Hd8, &Hef, &H4b, &H60, &Hc0, &H35, &Hdd)
D3D12_VIDEO_DECODE_PROFILE_MJPEG_VLD_422 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_MJPEG_VLD_444() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd95161f9, &Hd44, &H47e6, &Hbc, &Hf5, &H1b, &Hfb, &Hfb, &H26, &H8f, &H97)
D3D12_VIDEO_DECODE_PROFILE_MJPEG_VLD_444 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_MJPEG_VLD_4444() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc91748d5, &Hfd18, &H4aca, &H9d, &Hb3, &H3a, &H66, &H34, &Hab, &H54, &H7d)
D3D12_VIDEO_DECODE_PROFILE_MJPEG_VLD_4444 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_JPEG_VLD_420() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hcf782c83, &Hbef5, &H4a2c, &H87, &Hcb, &H60, &H19, &He7, &Hb1, &H75, &Hac)
D3D12_VIDEO_DECODE_PROFILE_JPEG_VLD_420 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_JPEG_VLD_422() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf04df417, &Heee2, &H4067, &Ha7, &H78, &Hf3, &H5c, &H15, &Hab, &H97, &H21)
D3D12_VIDEO_DECODE_PROFILE_JPEG_VLD_422 = iid
End Function
Public Function D3D12_VIDEO_DECODE_PROFILE_JPEG_VLD_444() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4cd00e17, &H89ba, &H48ef, &Hb9, &Hf9, &Hed, &Hcb, &H82, &H71, &H3f, &H65)
D3D12_VIDEO_DECODE_PROFILE_JPEG_VLD_444 = iid
End Function

Public Function IID_ID3D12VideoDecoderHeap() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0946B7C9, &HEBF6, &H4047, &HBB, &H73, &H86, &H83, &HE2, &H7D, &HBB, &H1F)
IID_ID3D12VideoDecoderHeap = iid
End Function
Public Function IID_ID3D12VideoDevice() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1F052807, &H0B46, &H4ACC, &H8A, &H89, &H36, &H4F, &H79, &H37, &H18, &HA4)
IID_ID3D12VideoDevice = iid
End Function
Public Function IID_ID3D12VideoDecoder() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC59B6BDC, &H7720, &H4074, &HA1, &H36, &H17, &HA1, &H56, &H03, &H74, &H70)
IID_ID3D12VideoDecoder = iid
End Function
Public Function IID_ID3D12VideoProcessor() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H304FDB32, &HBEDE, &H410A, &H85, &H45, &H94, &H3A, &HC6, &HA4, &H61, &H38)
IID_ID3D12VideoProcessor = iid
End Function
Public Function IID_ID3D12VideoDecodeCommandList() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3B60536E, &HAD29, &H4E64, &HA2, &H69, &HF8, &H53, &H83, &H7E, &H5E, &H53)
IID_ID3D12VideoDecodeCommandList = iid
End Function
Public Function IID_ID3D12VideoProcessCommandList() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAEB2543A, &H167F, &H4682, &HAC, &HC8, &HD1, &H59, &HED, &H4A, &H62, &H09)
IID_ID3D12VideoProcessCommandList = iid
End Function
Public Function IID_ID3D12VideoDecodeCommandList1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD52F011B, &HB56E, &H453C, &HA0, &H5A, &HA7, &HF3, &H11, &HC8, &HF4, &H72)
IID_ID3D12VideoDecodeCommandList1 = iid
End Function
Public Function IID_ID3D12VideoProcessCommandList1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H542C5C4D, &H7596, &H434F, &H8C, &H93, &H4E, &HFA, &H67, &H66, &HF2, &H67)
IID_ID3D12VideoProcessCommandList1 = iid
End Function
Public Function IID_ID3D12VideoMotionEstimator() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H33FDAE0E, &H098B, &H428F, &H87, &HBB, &H34, &HB6, &H95, &HDE, &H08, &HF8)
IID_ID3D12VideoMotionEstimator = iid
End Function
Public Function IID_ID3D12VideoMotionVectorHeap() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5BE17987, &H743A, &H4061, &H83, &H4B, &H23, &HD2, &H2D, &HAE, &HA5, &H05)
IID_ID3D12VideoMotionVectorHeap = iid
End Function
Public Function IID_ID3D12VideoDevice1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H981611AD, &HA144, &H4C83, &H98, &H90, &HF3, &H0E, &H26, &HD6, &H58, &HAB)
IID_ID3D12VideoDevice1 = iid
End Function
Public Function IID_ID3D12VideoEncodeCommandList() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8455293A, &H0CBD, &H4831, &H9B, &H39, &HFB, &HDB, &HAB, &H72, &H47, &H23)
IID_ID3D12VideoEncodeCommandList = iid
End Function
Public Function IID_ID3D12VideoDecoder1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H79A2E5FB, &HCCD2, &H469A, &H9F, &HDE, &H19, &H5D, &H10, &H95, &H1F, &H7E)
IID_ID3D12VideoDecoder1 = iid
End Function
Public Function IID_ID3D12VideoDecoderHeap1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HDA1D98C5, &H539F, &H41B2, &HBF, &H6B, &H11, &H98, &HA0, &H3B, &H6D, &H26)
IID_ID3D12VideoDecoderHeap1 = iid
End Function
Public Function IID_ID3D12VideoProcessor1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF3CFE615, &H553F, &H425C, &H86, &HD8, &HEE, &H8C, &H1B, &H1F, &HB0, &H1C)
IID_ID3D12VideoProcessor1 = iid
End Function
Public Function IID_ID3D12VideoExtensionCommand() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H554E41E8, &HAE8E, &H4A8C, &HB7, &HD2, &H5B, &H4F, &H27, &H4A, &H30, &HE4)
IID_ID3D12VideoExtensionCommand = iid
End Function
Public Function IID_ID3D12VideoDevice2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF019AC49, &HF838, &H4A95, &H9B, &H17, &H57, &H94, &H37, &HC8, &HF5, &H13)
IID_ID3D12VideoDevice2 = iid
End Function
Public Function IID_ID3D12VideoDecodeCommandList2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6e120880, &Hc114, &H4153, &H80, &H36, &Hd2, &H47, &H05, &H1e, &H17, &H29)
IID_ID3D12VideoDecodeCommandList2 = iid
End Function
Public Function IID_ID3D12VideoDecodeCommandList3() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2aee8c37, &H9562, &H42da, &H8a, &Hbf, &H61, &Hef, &Heb, &H2e, &H45, &H13)
IID_ID3D12VideoDecodeCommandList3 = iid
End Function
Public Function IID_ID3D12VideoProcessCommandList2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hdb525ae4, &H6ad6, &H473c, &Hba, &Ha7, &H59, &Hb2, &He3, &H70, &H82, &He4)
IID_ID3D12VideoProcessCommandList2 = iid
End Function
Public Function IID_ID3D12VideoProcessCommandList3() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1a0a4ca4, &H9f08, &H40ce, &H95, &H58, &Hb4, &H11, &Hfd, &H26, &H66, &Hff)
IID_ID3D12VideoProcessCommandList3 = iid
End Function
Public Function IID_ID3D12VideoEncodeCommandList1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H94971eca, &H2bdb, &H4769, &H88, &Hcf, &H36, &H75, &Hea, &H75, &H7e, &Hbc)
IID_ID3D12VideoEncodeCommandList1 = iid
End Function
Public Function IID_ID3D12VideoEncoder() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2E0D212D, &H8DF9, &H44A6, &HA7, &H70, &HBB, &H28, &H9B, &H18, &H27, &H37)
IID_ID3D12VideoEncoder = iid
End Function
Public Function IID_ID3D12VideoEncoderHeap() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H22B35D96, &H876A, &H44C0, &HB2, &H5E, &HFB, &H8C, &H9C, &H7F, &H1C, &H4A)
IID_ID3D12VideoEncoderHeap = iid
End Function
Public Function IID_ID3D12VideoDevice3() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4243ADB4, &H3A32, &H4666, &H97, &H3C, &H0C, &HCC, &H56, &H25, &HDC, &H44)
IID_ID3D12VideoDevice3 = iid
End Function
Public Function IID_ID3D12VideoEncodeCommandList2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H895491e2, &He701, &H46a9, &H9a, &H1f, &H8d, &H34, &H80, &Hed, &H86, &H7a)
IID_ID3D12VideoEncodeCommandList2 = iid
End Function
Public Function IID_ID3D12VideoEncodeCommandList3() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7f027b22, &H1515, &H4e85, &Haa, &H0d, &H02, &H64, &H86, &H58, &H05, &H76)
IID_ID3D12VideoEncodeCommandList3 = iid
End Function



Public Function CLSID_D2D1YCbCr() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H99503cc1, &H66c7, &H45c9, &Ha8, &H75, &H8a, &Hd8, &Ha7, &H91, &H44, &H01)
CLSID_D2D1YCbCr = iid
End Function
Public Function CLSID_D2D1Contrast() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb648a78a, &H0ed5, &H4f80, &Ha9, &H4a, &H8e, &H82, &H5a, &Hca, &H6b, &H77)
CLSID_D2D1Contrast = iid
End Function
Public Function CLSID_D2D1RgbToHue() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H23f3e5ec, &H91e8, &H4d3d, &Had, &H0a, &Haf, &Had, &Hc1, &H00, &H4a, &Ha1)
CLSID_D2D1RgbToHue = iid
End Function
Public Function CLSID_D2D1HueToRgb() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7b78a6bd, &H0141, &H4def, &H8a, &H52, &H63, &H56, &Hee, &H0c, &Hbd, &Hd5)
CLSID_D2D1HueToRgb = iid
End Function
Public Function CLSID_D2D1ChromaKey() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H74C01F5B, &H2A0D, &H408C, &H88, &HE2, &HC7, &HA3, &HC7, &H19, &H77, &H42)
CLSID_D2D1ChromaKey = iid
End Function
Public Function CLSID_D2D1Emboss() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb1c5eb2b, &H0348, &H43f0, &H81, &H07, &H49, &H57, &Hca, &Hcb, &Ha2, &Hae)
CLSID_D2D1Emboss = iid
End Function
Public Function CLSID_D2D1Exposure() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb56c8cfa, &Hf634, &H41ee, &Hbe, &He0, &Hff, &Ha6, &H17, &H10, &H60, &H04)
CLSID_D2D1Exposure = iid
End Function
Public Function CLSID_D2D1Grayscale() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H36DDE0EB, &H3725, &H42E0, &H83, &H6D, &H52, &HFB, &H20, &HAE, &HE6, &H44)
CLSID_D2D1Grayscale = iid
End Function
Public Function CLSID_D2D1Invert() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He0c3784d, &Hcb39, &H4e84, &Hb6, &Hfd, &H6b, &H72, &Hf0, &H81, &H02, &H63)
CLSID_D2D1Invert = iid
End Function
Public Function CLSID_D2D1Posterize() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2188945e, &H33a3, &H4366, &Hb7, &Hbc, &H08, &H6b, &Hd0, &H2d, &H08, &H84)
CLSID_D2D1Posterize = iid
End Function
Public Function CLSID_D2D1Sepia() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3a1af410, &H5f1d, &H4dbe, &H84, &Hdf, &H91, &H5d, &Ha7, &H9b, &H71, &H53)
CLSID_D2D1Sepia = iid
End Function
Public Function CLSID_D2D1Sharpen() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC9B887CB, &HC5FF, &H4DC5, &H97, &H79, &H27, &H3D, &HCF, &H41, &H7C, &H7D)
CLSID_D2D1Sharpen = iid
End Function
Public Function CLSID_D2D1Straighten() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4da47b12, &H79a3, &H4fb0, &H82, &H37, &Hbb, &Hc3, &Hb2, &Ha4, &Hde, &H08)
CLSID_D2D1Straighten = iid
End Function
Public Function CLSID_D2D1TemperatureTint() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H89176087, &H8AF9, &H4A08, &HAE, &HB1, &H89, &H5F, &H38, &HDB, &H17, &H66)
CLSID_D2D1TemperatureTint = iid
End Function
Public Function CLSID_D2D1Vignette() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc00c40be, &H5e67, &H4ca3, &H95, &Hb4, &Hf4, &Hb0, &H2c, &H11, &H51, &H35)
CLSID_D2D1Vignette = iid
End Function
Public Function CLSID_D2D1EdgeDetection() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HEFF583CA, &HCB07, &H4AA9, &HAC, &H5D, &H2C, &HC4, &H4C, &H76, &H46, &H0F)
CLSID_D2D1EdgeDetection = iid
End Function
Public Function CLSID_D2D1HighlightsShadows() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HCADC8384, &H323F, &H4C7E, &HA3, &H61, &H2E, &H2B, &H24, &HDF, &H6E, &HE4)
CLSID_D2D1HighlightsShadows = iid
End Function
Public Function CLSID_D2D1LookupTable3D() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H349E0EDA, &H0088, &H4A79, &H9C, &HA3, &HC7, &HE3, &H00, &H20, &H20, &H20)
CLSID_D2D1LookupTable3D = iid
End Function
Public Function CLSID_D2D1Opacity() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H811d79a4, &Hde28, &H4454, &H80, &H94, &Hc6, &H46, &H85, &Hf8, &Hbd, &H4c)
CLSID_D2D1Opacity = iid
End Function
Public Function CLSID_D2D1AlphaMask() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc80ecff0, &H3fd5, &H4f05, &H83, &H28, &Hc5, &Hd1, &H72, &H4b, &H4f, &H0a)
CLSID_D2D1AlphaMask = iid
End Function
Public Function CLSID_D2D1CrossFade() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H12f575e8, &H4db1, &H485f, &H9a, &H84, &H03, &Ha0, &H7d, &Hd3, &H82, &H9f)
CLSID_D2D1CrossFade = iid
End Function
Public Function CLSID_D2D1Tint() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H36312b17, &Hf7dd, &H4014, &H91, &H5d, &Hff, &Hca, &H76, &H8c, &Hf2, &H11)
CLSID_D2D1Tint = iid
End Function
Public Function CLSID_D2D1WhiteLevelAdjustment() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H44a1cadb, &H6cdd, &H4818, &H8f, &Hf4, &H26, &Hc1, &Hcf, &He9, &H5b, &Hdb)
CLSID_D2D1WhiteLevelAdjustment = iid
End Function
Public Function CLSID_D2D1HdrToneMap() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7b0b748d, &H4610, &H4486, &Ha9, &H0c, &H99, &H9d, &H9a, &H2e, &H2b, &H11)
CLSID_D2D1HdrToneMap = iid
End Function








Public Function IID_ID2D1SvgAttribute() As UUID
'{c9cdb0dd-f8c9-4e70-b7c2-301c80292c5e}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc9cdb0dd, CInt(&Hf8c9), CInt(&H4e70), &Hb7, &Hc2, &H30, &H1c, &H80, &H29, &H2c, &H5e)
 IID_ID2D1SvgAttribute = iid
End Function
Public Function IID_ID2D1SvgPaint() As UUID
'{d59bab0a-68a2-455b-a5dc-9eb2854e2490}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd59bab0a, CInt(&H68a2), CInt(&H455b), &Ha5, &Hdc, &H9e, &Hb2, &H85, &H4e, &H24, &H90)
 IID_ID2D1SvgPaint = iid
End Function
Public Function IID_ID2D1SvgStrokeDashArray() As UUID
'{f1c0ca52-92a3-4f00-b4ce-f35691efd9d9}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf1c0ca52, CInt(&H92a3), CInt(&H4f00), &Hb4, &Hce, &Hf3, &H56, &H91, &Hef, &Hd9, &Hd9)
 IID_ID2D1SvgStrokeDashArray = iid
End Function
Public Function IID_ID2D1SvgPointCollection() As UUID
'{9dbe4c0d-3572-4dd9-9825-5530813bb712}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9dbe4c0d, CInt(&H3572), CInt(&H4dd9), &H98, &H25, &H55, &H30, &H81, &H3b, &Hb7, &H12)
 IID_ID2D1SvgPointCollection = iid
End Function
Public Function IID_ID2D1SvgPathData() As UUID
'{c095e4f4-bb98-43d6-9745-4d1b84ec9888}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc095e4f4, CInt(&Hbb98), CInt(&H43d6), &H97, &H45, &H4d, &H1b, &H84, &Hec, &H98, &H88)
 IID_ID2D1SvgPathData = iid
End Function
Public Function IID_ID2D1SvgElement() As UUID
'{ac7b67a6-183e-49c1-a823-0ebe40b0db29}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hac7b67a6, CInt(&H183e), CInt(&H49c1), &Ha8, &H23, &H0e, &Hbe, &H40, &Hb0, &Hdb, &H29)
 IID_ID2D1SvgElement = iid
End Function
Public Function IID_ID2D1SvgDocument() As UUID
'{86b88e4d-afa4-4d7b-88e4-68a51c4a0aec}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H86b88e4d, CInt(&Hafa4), CInt(&H4d7b), &H88, &He4, &H68, &Ha5, &H1c, &H4a, &H0a, &Hec)
 IID_ID2D1SvgDocument = iid
End Function

Public Function IID_ID2D1VertexBuffer() As UUID
'{9b8b1336-00a5-4668-92b7-ced5d8bf9b7b}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9b8b1336, CInt(&H00a5), CInt(&H4668), &H92, &Hb7, &Hce, &Hd5, &Hd8, &Hbf, &H9b, &H7b)
IID_ID2D1VertexBuffer = iid
End Function
Public Function IID_ID2D1ResourceTexture() As UUID
'{688d15c3-02b0-438d-b13a-d1b44c32c39a}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H688d15c3, CInt(&H02b0), CInt(&H438d), &Hb1, &H3a, &Hd1, &Hb4, &H4c, &H32, &Hc3, &H9a)
IID_ID2D1ResourceTexture = iid
End Function
Public Function IID_ID2D1RenderInfo() As UUID
'{519ae1bd-d19a-420d-b849-364f594776b7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H519ae1bd, CInt(&Hd19a), CInt(&H420d), &Hb8, &H49, &H36, &H4f, &H59, &H47, &H76, &Hb7)
IID_ID2D1RenderInfo = iid
End Function
Public Function IID_ID2D1DrawInfo() As UUID
'{693ce632-7f2f-45de-93fe-18d88b37aa21}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H693ce632, CInt(&H7f2f), CInt(&H45de), &H93, &Hfe, &H18, &Hd8, &H8b, &H37, &Haa, &H21)
IID_ID2D1DrawInfo = iid
End Function
Public Function IID_ID2D1ComputeInfo() As UUID
'{5598b14b-9fd7-48b7-9bdb-8f0964eb38bc}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5598b14b, CInt(&H9fd7), CInt(&H48b7), &H9b, &Hdb, &H8f, &H09, &H64, &Heb, &H38, &Hbc)
IID_ID2D1ComputeInfo = iid
End Function
Public Function IID_ID2D1TransformNode() As UUID
'{b2efe1e7-729f-4102-949f-505fa21bf666}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hb2efe1e7, CInt(&H729f), CInt(&H4102), &H94, &H9f, &H50, &H5f, &Ha2, &H1b, &Hf6, &H66)
IID_ID2D1TransformNode = iid
End Function
Public Function IID_ID2D1TransformGraph() As UUID
'{13d29038-c3e6-4034-9081-13b53a417992}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H13d29038, CInt(&Hc3e6), CInt(&H4034), &H90, &H81, &H13, &Hb5, &H3a, &H41, &H79, &H92)
IID_ID2D1TransformGraph = iid
End Function
Public Function IID_ID2D1Transform() As UUID
'{ef1a287d-342a-4f76-8fdb-da0d6ea9f92b}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hef1a287d, CInt(&H342a), CInt(&H4f76), &H8f, &Hdb, &Hda, &H0d, &H6e, &Ha9, &Hf9, &H2b)
IID_ID2D1Transform = iid
End Function
Public Function IID_ID2D1DrawTransform() As UUID
'{36bfdcb6-9739-435d-a30d-a653beff6a6f}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H36bfdcb6, CInt(&H9739), CInt(&H435d), &Ha3, &H0d, &Ha6, &H53, &Hbe, &Hff, &H6a, &H6f)
IID_ID2D1DrawTransform = iid
End Function
Public Function IID_ID2D1ComputeTransform() As UUID
'{0d85573c-01e3-4f7d-bfd9-0d60608bf3c3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H0d85573c, CInt(&H01e3), CInt(&H4f7d), &Hbf, &Hd9, &H0d, &H60, &H60, &H8b, &Hf3, &Hc3)
IID_ID2D1ComputeTransform = iid
End Function
Public Function IID_ID2D1AnalysisTransform() As UUID
'{0359dc30-95e6-4568-9055-27720d130e93}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H0359dc30, CInt(&H95e6), CInt(&H4568), &H90, &H55, &H27, &H72, &H0d, &H13, &H0e, &H93)
IID_ID2D1AnalysisTransform = iid
End Function
Public Function IID_ID2D1SourceTransform() As UUID
'{db1800dd-0c34-4cf9-be90-31cc0a5653e1}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hdb1800dd, CInt(&H0c34), CInt(&H4cf9), &Hbe, &H90, &H31, &Hcc, &H0a, &H56, &H53, &He1)
IID_ID2D1SourceTransform = iid
End Function
Public Function IID_ID2D1ConcreteTransform() As UUID
'{1a799d8a-69f7-4e4c-9fed-437ccc6684cc}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1a799d8a, CInt(&H69f7), CInt(&H4e4c), &H9f, &Hed, &H43, &H7c, &Hcc, &H66, &H84, &Hcc)
IID_ID2D1ConcreteTransform = iid
End Function
Public Function IID_ID2D1BlendTransform() As UUID
'{63ac0b32-ba44-450f-8806-7f4ca1ff2f1b}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H63ac0b32, CInt(&Hba44), CInt(&H450f), &H88, &H06, &H7f, &H4c, &Ha1, &Hff, &H2f, &H1b)
IID_ID2D1BlendTransform = iid
End Function
Public Function IID_ID2D1BorderTransform() As UUID
'{4998735c-3a19-473c-9781-656847e3a347}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4998735c, CInt(&H3a19), CInt(&H473c), &H97, &H81, &H65, &H68, &H47, &He3, &Ha3, &H47)
IID_ID2D1BorderTransform = iid
End Function
Public Function IID_ID2D1OffsetTransform() As UUID
'{3fe6adea-7643-4f53-bd14-a0ce63f24042}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3fe6adea, CInt(&H7643), CInt(&H4f53), &Hbd, &H14, &Ha0, &Hce, &H63, &Hf2, &H40, &H42)
IID_ID2D1OffsetTransform = iid
End Function
Public Function IID_ID2D1BoundsAdjustmentTransform() As UUID
'{90f732e2-5092-4606-a819-8651970baccd}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H90f732e2, CInt(&H5092), CInt(&H4606), &Ha8, &H19, &H86, &H51, &H97, &H0b, &Hac, &Hcd)
IID_ID2D1BoundsAdjustmentTransform = iid
End Function
Public Function IID_ID2D1EffectImpl() As UUID
'{a248fd3f-3e6c-4e63-9f03-7f68ecc91db9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Ha248fd3f, CInt(&H3e6c), CInt(&H4e63), &H9f, &H03, &H7f, &H68, &Hec, &Hc9, &H1d, &Hb9)
IID_ID2D1EffectImpl = iid
End Function
Public Function IID_ID2D1EffectContext() As UUID
'{3d9f916b-27dc-4ad7-b4f1-64945340f563}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3d9f916b, CInt(&H27dc), CInt(&H4ad7), &Hb4, &Hf1, &H64, &H94, &H53, &H40, &Hf5, &H63)
IID_ID2D1EffectContext = iid
End Function
Public Function IID_ID2D1Device() As UUID
'{47dd575d-ac05-4cdd-8049-9b02cd16f44c}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H47dd575d, CInt(&Hac05), CInt(&H4cdd), &H80, &H49, &H9b, &H02, &Hcd, &H16, &Hf4, &H4c)
IID_ID2D1Device = iid
End Function
Public Function IID_ID2D1Factory1() As UUID
'{bb12d362-daee-4b9a-aa1d-14ba401cfa1f}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hbb12d362, CInt(&Hdaee), CInt(&H4b9a), &Haa, &H1d, &H14, &Hba, &H40, &H1c, &Hfa, &H1f)
IID_ID2D1Factory1 = iid
End Function
Public Function IID_ID2D1Multithread() As UUID
'{31e6e7bc-e0ff-4d46-8c64-a0a8c41c15d3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H31e6e7bc, CInt(&He0ff), CInt(&H4d46), &H8c, &H64, &Ha0, &Ha8, &Hc4, &H1c, &H15, &Hd3)
IID_ID2D1Multithread = iid
End Function
Public Function IID_ID2D1GeometryRealization() As UUID
'{a16907d7-bc02-4801-99e8-8cf7f485f774}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Ha16907d7, CInt(&Hbc02), CInt(&H4801), &H99, &He8, &H8c, &Hf7, &Hf4, &H85, &Hf7, &H74)
IID_ID2D1GeometryRealization = iid
End Function
Public Function IID_ID2D1DeviceContext1() As UUID
'{d37f57e4-6908-459f-a199-e72f24f79987}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hd37f57e4, CInt(&H6908), CInt(&H459f), &Ha1, &H99, &He7, &H2f, &H24, &Hf7, &H99, &H87)
IID_ID2D1DeviceContext1 = iid
End Function
Public Function IID_ID2D1Device1() As UUID
'{d21768e1-23a4-4823-a14b-7c3eba85d658}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hd21768e1, CInt(&H23a4), CInt(&H4823), &Ha1, &H4b, &H7c, &H3e, &Hba, &H85, &Hd6, &H58)
IID_ID2D1Device1 = iid
End Function
Public Function IID_ID2D1Factory2() As UUID
'{94f81a73-9212-4376-9c58-b16a3a0d3992}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H94f81a73, CInt(&H9212), CInt(&H4376), &H9c, &H58, &Hb1, &H6a, &H3a, &H0d, &H39, &H92)
IID_ID2D1Factory2 = iid
End Function
Public Function IID_ID2D1CommandSink1() As UUID
'{9eb767fd-4269-4467-b8c2-eb30cb305743}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9eb767fd, CInt(&H4269), CInt(&H4467), &Hb8, &Hc2, &Heb, &H30, &Hcb, &H30, &H57, &H43)
IID_ID2D1CommandSink1 = iid
End Function
Public Function IID_ID2D1InkStyle() As UUID
'{bae8b344-23fc-4071-8cb5-d05d6f073848}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hbae8b344, CInt(&H23fc), CInt(&H4071), &H8c, &Hb5, &Hd0, &H5d, &H6f, &H07, &H38, &H48)
IID_ID2D1InkStyle = iid
End Function
Public Function IID_ID2D1Ink() As UUID
'{b499923b-7029-478f-a8b3-432c7c5f5312}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hb499923b, CInt(&H7029), CInt(&H478f), &Ha8, &Hb3, &H43, &H2c, &H7c, &H5f, &H53, &H12)
IID_ID2D1Ink = iid
End Function
Public Function IID_ID2D1GradientMesh() As UUID
'{f292e401-c050-4cde-83d7-04962d3b23c2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hf292e401, CInt(&Hc050), CInt(&H4cde), &H83, &Hd7, &H04, &H96, &H2d, &H3b, &H23, &Hc2)
IID_ID2D1GradientMesh = iid
End Function
Public Function IID_ID2D1ImageSource() As UUID
'{c9b664e5-74a1-4378-9ac2-eefc37a3f4d8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hc9b664e5, CInt(&H74a1), CInt(&H4378), &H9a, &Hc2, &Hee, &Hfc, &H37, &Ha3, &Hf4, &Hd8)
IID_ID2D1ImageSource = iid
End Function
Public Function IID_ID2D1ImageSourceFromWic() As UUID
'{77395441-1c8f-4555-8683-f50dab0fe792}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H77395441, CInt(&H1c8f), CInt(&H4555), &H86, &H83, &Hf5, &H0d, &Hab, &H0f, &He7, &H92)
IID_ID2D1ImageSourceFromWic = iid
End Function
Public Function IID_ID2D1TransformedImageSource() As UUID
'{7f1f79e5-2796-416c-8f55-700f911445e5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7f1f79e5, CInt(&H2796), CInt(&H416c), &H8f, &H55, &H70, &H0f, &H91, &H14, &H45, &He5)
IID_ID2D1TransformedImageSource = iid
End Function
Public Function IID_ID2D1LookupTable3D() As UUID
'{53dd9855-a3b0-4d5b-82e1-26e25c5e5797}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H53dd9855, CInt(&Ha3b0), CInt(&H4d5b), &H82, &He1, &H26, &He2, &H5c, &H5e, &H57, &H97)
IID_ID2D1LookupTable3D = iid
End Function
Public Function IID_ID2D1DeviceContext2() As UUID
'{394ea6a3-0c34-4321-950b-6ca20f0be6c7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H394ea6a3, CInt(&H0c34), CInt(&H4321), &H95, &H0b, &H6c, &Ha2, &H0f, &H0b, &He6, &Hc7)
IID_ID2D1DeviceContext2 = iid
End Function
Public Function IID_ID2D1Device2() As UUID
'{a44472e1-8dfb-4e60-8492-6e2861c9ca8b}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Ha44472e1, CInt(&H8dfb), CInt(&H4e60), &H84, &H92, &H6e, &H28, &H61, &Hc9, &Hca, &H8b)
IID_ID2D1Device2 = iid
End Function
Public Function IID_ID2D1Factory3() As UUID
'{0869759f-4f00-413f-b03e-2bda45404d0f}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H0869759f, CInt(&H4f00), CInt(&H413f), &Hb0, &H3e, &H2b, &Hda, &H45, &H40, &H4d, &H0f)
IID_ID2D1Factory3 = iid
End Function
Public Function IID_ID2D1CommandSink2() As UUID
'{3bab440e-417e-47df-a2e2-bc0be6a00916}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3bab440e, CInt(&H417e), CInt(&H47df), &Ha2, &He2, &Hbc, &H0b, &He6, &Ha0, &H09, &H16)
IID_ID2D1CommandSink2 = iid
End Function
Public Function IID_ID2D1GdiMetafile1() As UUID
'{2e69f9e8-dd3f-4bf9-95ba-c04f49d788df}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2e69f9e8, CInt(&Hdd3f), CInt(&H4bf9), &H95, &Hba, &Hc0, &H4f, &H49, &Hd7, &H88, &Hdf)
IID_ID2D1GdiMetafile1 = iid
End Function
Public Function IID_ID2D1GdiMetafileSink1() As UUID
'{fd0ecb6b-91e6-411e-8655-395e760f91b4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hfd0ecb6b, CInt(&H91e6), CInt(&H411e), &H86, &H55, &H39, &H5e, &H76, &H0f, &H91, &Hb4)
IID_ID2D1GdiMetafileSink1 = iid
End Function
Public Function IID_ID2D1SpriteBatch() As UUID
'{4dc583bf-3a10-438a-8722-e9765224f1f1}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4dc583bf, CInt(&H3a10), CInt(&H438a), &H87, &H22, &He9, &H76, &H52, &H24, &Hf1, &Hf1)
IID_ID2D1SpriteBatch = iid
End Function
Public Function IID_ID2D1DeviceContext3() As UUID
'{235a7496-8351-414c-bcd4-6672ab2d8e00}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H235a7496, CInt(&H8351), CInt(&H414c), &Hbc, &Hd4, &H66, &H72, &Hab, &H2d, &H8e, &H00)
IID_ID2D1DeviceContext3 = iid
End Function
Public Function IID_ID2D1Device3() As UUID
'{852f2087-802c-4037-ab60-ff2e7ee6fc01}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H852f2087, CInt(&H802c), CInt(&H4037), &Hab, &H60, &Hff, &H2e, &H7e, &He6, &Hfc, &H01)
IID_ID2D1Device3 = iid
End Function
Public Function IID_ID2D1Factory4() As UUID
'{bd4ec2d2-0662-4bee-ba8e-6f29f032e096}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hbd4ec2d2, CInt(&H0662), CInt(&H4bee), &Hba, &H8e, &H6f, &H29, &Hf0, &H32, &He0, &H96)
IID_ID2D1Factory4 = iid
End Function
Public Function IID_ID2D1CommandSink3() As UUID
'{18079135-4cf3-4868-bc8e-06067e6d242d}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H18079135, CInt(&H4cf3), CInt(&H4868), &Hbc, &H8e, &H06, &H06, &H7e, &H6d, &H24, &H2d)
IID_ID2D1CommandSink3 = iid
End Function
Public Function IID_ID2D1SvgGlyphStyle() As UUID
'{af671749-d241-4db8-8e41-dcc2e5c1a438}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Haf671749, CInt(&Hd241), CInt(&H4db8), &H8e, &H41, &Hdc, &Hc2, &He5, &Hc1, &Ha4, &H38)
IID_ID2D1SvgGlyphStyle = iid
End Function
Public Function IID_ID2D1DeviceContext4() As UUID
'{8c427831-3d90-4476-b647-c4fae349e4db}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8c427831, CInt(&H3d90), CInt(&H4476), &Hb6, &H47, &Hc4, &Hfa, &He3, &H49, &He4, &Hdb)
IID_ID2D1DeviceContext4 = iid
End Function
Public Function IID_ID2D1Device4() As UUID
'{d7bdb159-5683-4a46-bc9c-72dc720b858b}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hd7bdb159, CInt(&H5683), CInt(&H4a46), &Hbc, &H9c, &H72, &Hdc, &H72, &H0b, &H85, &H8b)
IID_ID2D1Device4 = iid
End Function
Public Function IID_ID2D1Factory5() As UUID
'{c4349994-838e-4b0f-8cab-44997d9eeacc}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hc4349994, CInt(&H838e), CInt(&H4b0f), &H8c, &Hab, &H44, &H99, &H7d, &H9e, &Hea, &Hcc)
IID_ID2D1Factory5 = iid
End Function
Public Function IID_ID2D1CommandSink() As UUID
'{54d7898a-a061-40a7-bec7-e465bcba2c4f}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H54d7898a, CInt(&Ha061), CInt(&H40a7), &Hbe, &Hc7, &He4, &H65, &Hbc, &Hba, &H2c, &H4f)
IID_ID2D1CommandSink = iid
End Function
Public Function IID_ID2D1CommandList() As UUID
'{b4f34a19-2383-4d76-94f6-ec343657c3dc}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hb4f34a19, CInt(&H2383), CInt(&H4d76), &H94, &Hf6, &Hec, &H34, &H36, &H57, &Hc3, &Hdc)
IID_ID2D1CommandList = iid
End Function
Public Function IID_ID2D1PrintControl() As UUID
'{2c1d867d-c290-41c8-ae7e-34a98702e9a5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2c1d867d, CInt(&Hc290), CInt(&H41c8), &Hae, &H7e, &H34, &Ha9, &H87, &H02, &He9, &Ha5)
IID_ID2D1PrintControl = iid
End Function
Public Function IID_ID2D1ImageBrush() As UUID
'{fe9e984d-3f95-407c-b5db-cb94d4e8f87c}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hfe9e984d, CInt(&H3f95), CInt(&H407c), &Hb5, &Hdb, &Hcb, &H94, &Hd4, &He8, &Hf8, &H7c)
IID_ID2D1ImageBrush = iid
End Function
Public Function IID_ID2D1BitmapBrush1() As UUID
'{41343a53-e41a-49a2-91cd-21793bbb62e5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H41343a53, CInt(&He41a), CInt(&H49a2), &H91, &Hcd, &H21, &H79, &H3b, &Hbb, &H62, &He5)
IID_ID2D1BitmapBrush1 = iid
End Function
Public Function IID_ID2D1StrokeStyle1() As UUID
'{10a72a66-e91c-43f4-993f-ddf4b82b0b4a}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H10a72a66, CInt(&He91c), CInt(&H43f4), &H99, &H3f, &Hdd, &Hf4, &Hb8, &H2b, &H0b, &H4a)
IID_ID2D1StrokeStyle1 = iid
End Function
Public Function IID_ID2D1PathGeometry1() As UUID
'{62baa2d2-ab54-41b7-b872-787e0106a421}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H62baa2d2, CInt(&Hab54), CInt(&H41b7), &Hb8, &H72, &H78, &H7e, &H01, &H06, &Ha4, &H21)
IID_ID2D1PathGeometry1 = iid
End Function
Public Function IID_ID2D1Properties() As UUID
'{483473d7-cd46-4f9d-9d3a-3112aa80159d}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H483473d7, CInt(&Hcd46), CInt(&H4f9d), &H9d, &H3a, &H31, &H12, &Haa, &H80, &H15, &H9d)
IID_ID2D1Properties = iid
End Function
Public Function IID_ID2D1Effect() As UUID
'{28211a43-7d89-476f-8181-2d6159b220ad}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H28211a43, CInt(&H7d89), CInt(&H476f), &H81, &H81, &H2d, &H61, &H59, &Hb2, &H20, &Had)
IID_ID2D1Effect = iid
End Function
Public Function IID_ID2D1Bitmap1() As UUID
'{a898a84c-3873-4588-b08b-ebbf978df041}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Ha898a84c, CInt(&H3873), CInt(&H4588), &Hb0, &H8b, &Heb, &Hbf, &H97, &H8d, &Hf0, &H41)
IID_ID2D1Bitmap1 = iid
End Function
Public Function IID_ID2D1ColorContext() As UUID
'{1c4820bb-5771-4518-a581-2fe4dd0ec657}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1c4820bb, CInt(&H5771), CInt(&H4518), &Ha5, &H81, &H2f, &He4, &Hdd, &H0e, &Hc6, &H57)
IID_ID2D1ColorContext = iid
End Function
Public Function IID_ID2D1GradientStopCollection1() As UUID
'{ae1572f4-5dd0-4777-998b-9279472ae63b}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hae1572f4, CInt(&H5dd0), CInt(&H4777), &H99, &H8b, &H92, &H79, &H47, &H2a, &He6, &H3b)
IID_ID2D1GradientStopCollection1 = iid
End Function
Public Function IID_ID2D1DrawingStateBlock1() As UUID
'{689f1f85-c72e-4e33-8f19-85754efd5ace}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H689f1f85, CInt(&Hc72e), CInt(&H4e33), &H8f, &H19, &H85, &H75, &H4e, &Hfd, &H5a, &Hce)
IID_ID2D1DrawingStateBlock1 = iid
End Function
Public Function IID_ID2D1DeviceContext() As UUID
'{e8f7fe7a-191c-466d-ad95-975678bda998}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &He8f7fe7a, CInt(&H191c), CInt(&H466d), &Had, &H95, &H97, &H56, &H78, &Hbd, &Ha9, &H98)
IID_ID2D1DeviceContext = iid
End Function

Public Function IID_IDirectSoundFXGargle() As UUID
'{D616F352-D622-11CE-AAC5-0020AF0B99A3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD616F352, CInt(&HD622), CInt(&H11CE), &HAA, &HC5, &H0, &H20, &HAF, &HB, &H99, &HA3)
IID_IDirectSoundFXGargle = iid
End Function
Public Function IID_IDirectSoundFXParamEq() As UUID
'{C03CA9FE-FE90-4204-8078-82334CD177DA}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC03CA9FE, CInt(&HFE90), CInt(&H4204), &H80, &H78, &H82, &H33, &H4C, &HD1, &H77, &HDA)
IID_IDirectSoundFXParamEq = iid
End Function
Public Function IID_IDirectSoundFXI3DL2Reverb() As UUID
'{4B166A6A-0D66-43F3-80E3-EE6280DEE1A4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4B166A6A, CInt(&HD66), CInt(&H43F3), &H80, &HE3, &HEE, &H62, &H80, &HDE, &HE1, &HA4)
IID_IDirectSoundFXI3DL2Reverb = iid
End Function
Public Function IID_IDirectSoundFXWavesReverb() As UUID
'{46858C3A-0DC6-45E3-B760-D4EEF16CB325}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H46858C3A, CInt(&HDC6), CInt(&H45E3), &HB7, &H60, &HD4, &HEE, &HF1, &H6C, &HB3, &H25)
IID_IDirectSoundFXWavesReverb = iid
End Function
Public Function IID_IDirectSoundFXCompressor() As UUID
'{4BBD1154-62F6-4E2C-A15C-D3B6C417F7A0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4BBD1154, CInt(&H62F6), CInt(&H4E2C), &HA1, &H5C, &HD3, &HB6, &HC4, &H17, &HF7, &HA0)
IID_IDirectSoundFXCompressor = iid
End Function
Public Function IID_IDirectSoundFXDistortion() As UUID
'{8ECF4326-455F-4D8B-BDA9-8D5D3E9E3E0B}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8ECF4326, CInt(&H455F), CInt(&H4D8B), &HBD, &HA9, &H8D, &H5D, &H3E, &H9E, &H3E, &HB)
IID_IDirectSoundFXDistortion = iid
End Function
Public Function IID_IDirectSoundFXEcho() As UUID
'{8BD28EDF-50DB-4E92-A2BD-445488D1ED42}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8BD28EDF, CInt(&H50DB), CInt(&H4E92), &HA2, &HBD, &H44, &H54, &H88, &HD1, &HED, &H42)
IID_IDirectSoundFXEcho = iid
End Function
Public Function IID_IDirectSoundFXFlanger() As UUID
'{903E9878-2C92-4072-9B2C-EA68F5396783}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H903E9878, CInt(&H2C92), CInt(&H4072), &H9B, &H2C, &HEA, &H68, &HF5, &H39, &H67, &H83)
IID_IDirectSoundFXFlanger = iid
End Function
Public Function IID_IDirectSoundFXChorus() As UUID
'{880842E3-145F-43E6-A934-A71806E50547}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H880842E3, CInt(&H145F), CInt(&H43E6), &HA9, &H34, &HA7, &H18, &H6, &HE5, &H5, &H47)
IID_IDirectSoundFXChorus = iid
End Function
Public Function IID_IDirectSound() As UUID
'{279AFA83-4981-11CE-A521-0020AF0BE560}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H279AFA83, CInt(&H4981), CInt(&H11CE), &HA5, &H21, &H0, &H20, &HAF, &HB, &HE5, &H60)
IID_IDirectSound = iid
End Function
Public Function IID_IDirectSoundBuffer() As UUID
'{279AFA85-4981-11CE-A521-0020AF0BE560}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H279AFA85, CInt(&H4981), CInt(&H11CE), &HA5, &H21, &H0, &H20, &HAF, &HB, &HE5, &H60)
IID_IDirectSoundBuffer = iid
End Function
Public Function IID_IDirectSound8() As UUID
'{C50A7E93-F395-4834-9EF6-7FA99DE50966}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC50A7E93, CInt(&HF395), CInt(&H4834), &H9E, &HF6, &H7F, &HA9, &H9D, &HE5, &H9, &H66)
IID_IDirectSound8 = iid
End Function
Public Function IID_IDirectSoundBuffer8() As UUID
'{6825A449-7524-4D82-920F-50E36AB3AB1E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6825A449, CInt(&H7524), CInt(&H4D82), &H92, &HF, &H50, &HE3, &H6A, &HB3, &HAB, &H1E)
IID_IDirectSoundBuffer8 = iid
End Function
Public Function IID_IDirectSound3DBuffer() As UUID
'{279AFA86-4981-11CE-A521-0020AF0BE560}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H279AFA86, CInt(&H4981), CInt(&H11CE), &HA5, &H21, &H0, &H20, &HAF, &HB, &HE5, &H60)
IID_IDirectSound3DBuffer = iid
End Function
Public Function IID_IDirectSound3DListener() As UUID
'{279AFA84-4981-11CE-A521-0020AF0BE560}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H279AFA84, CInt(&H4981), CInt(&H11CE), &HA5, &H21, &H0, &H20, &HAF, &HB, &HE5, &H60)
IID_IDirectSound3DListener = iid
End Function
Public Function IID_IDirectSoundCapture() As UUID
'{B0210781-89CD-11D0-AF08-00A0C925CD16}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB0210781, CInt(&H89CD), CInt(&H11D0), &HAF, &H8, &H0, &HA0, &HC9, &H25, &HCD, &H16)
IID_IDirectSoundCapture = iid
End Function
Public Function IID_IDirectSoundCaptureBuffer() As UUID
'{B0210782-89CD-11D0-AF08-00A0C925CD16}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB0210782, CInt(&H89CD), CInt(&H11D0), &HAF, &H8, &H0, &HA0, &HC9, &H25, &HCD, &H16)
IID_IDirectSoundCaptureBuffer = iid
End Function
Public Function IID_IDirectSoundCaptureBuffer8() As UUID
'{00990DF4-0DBB-4872-833E-6D303E80AEB6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H990DF4, CInt(&HDBB), CInt(&H4872), &H83, &H3E, &H6D, &H30, &H3E, &H80, &HAE, &HB6)
IID_IDirectSoundCaptureBuffer8 = iid
End Function
Public Function IID_IDirectSoundNotify() As UUID
'{B0210783-89CD-11D0-AF08-00A0C925CD16}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB0210783, CInt(&H89CD), CInt(&H11D0), &HAF, &H8, &H0, &HA0, &HC9, &H25, &HCD, &H16)
IID_IDirectSoundNotify = iid
End Function


Public Function IID_IMultiMediaStream() As UUID
'{B502D1BC-9A57-11d0-8FDE-00C04FD9189D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB502D1BC, CInt(&H9A57), CInt(&H11d0), &H8F, &HDE, &H00, &HC0, &H4F, &HD9, &H18, &H9D)
IID_IMultiMediaStream = iid
End Function
Public Function IID_IMediaStream() As UUID
'{B502D1BD-9A57-11d0-8FDE-00C04FD9189D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB502D1BD, CInt(&H9A57), CInt(&H11d0), &H8F, &HDE, &H00, &HC0, &H4F, &HD9, &H18, &H9D)
IID_IMediaStream = iid
End Function
Public Function IID_IStreamSample() As UUID
'{B502D1BE-9A57-11d0-8FDE-00C04FD9189D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB502D1BE, CInt(&H9A57), CInt(&H11d0), &H8F, &HDE, &H00, &HC0, &H4F, &HD9, &H18, &H9D)
IID_IStreamSample = iid
End Function
Public Function IID_IAMMultiMediaStream() As UUID
'{BEBE595C-9A6F-11d0-8FDE-00C04FD9189D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBEBE595C, CInt(&H9A6F), CInt(&H11d0), &H8F, &HDE, &H00, &HC0, &H4F, &HD9, &H18, &H9D)
IID_IAMMultiMediaStream = iid
End Function
Public Function IID_IAMMediaStream() As UUID
'{BEBE595D-9A6F-11d0-8FDE-00C04FD9189D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBEBE595D, CInt(&H9A6F), CInt(&H11d0), &H8F, &HDE, &H00, &HC0, &H4F, &HD9, &H18, &H9D)
IID_IAMMediaStream = iid
End Function
Public Function IID_IMediaStreamFilter() As UUID
'{BEBE595E-9A6F-11d0-8FDE-00C04FD9189D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBEBE595E, CInt(&H9A6F), CInt(&H11d0), &H8F, &HDE, &H00, &HC0, &H4F, &HD9, &H18, &H9D)
IID_IMediaStreamFilter = iid
End Function
Public Function IID_IDirectDrawMediaSampleAllocator() As UUID
'{AB6B4AFC-F6E4-11d0-900D-00C04FD9189D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HAB6B4AFC, CInt(&HF6E4), CInt(&H11d0), &H90, &H0D, &H00, &HC0, &H4F, &HD9, &H18, &H9D)
IID_IDirectDrawMediaSampleAllocator = iid
End Function
Public Function IID_IDirectDrawMediaSample() As UUID
'{AB6B4AFE-F6E4-11d0-900D-00C04FD9189D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HAB6B4AFE, CInt(&HF6E4), CInt(&H11d0), &H90, &H0D, &H00, &HC0, &H4F, &HD9, &H18, &H9D)
IID_IDirectDrawMediaSample = iid
End Function
Public Function IID_IAMMediaTypeStream() As UUID
'{AB6B4AFA-F6E4-11d0-900D-00C04FD9189D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HAB6B4AFA, CInt(&HF6E4), CInt(&H11d0), &H90, &H0D, &H00, &HC0, &H4F, &HD9, &H18, &H9D)
IID_IAMMediaTypeStream = iid
End Function
Public Function IID_IAMMediaTypeSample() As UUID
'{AB6B4AFB-F6E4-11d0-900D-00C04FD9189D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HAB6B4AFB, CInt(&HF6E4), CInt(&H11d0), &H90, &H0D, &H00, &HC0, &H4F, &HD9, &H18, &H9D)
IID_IAMMediaTypeSample = iid
End Function
Public Function IID_IAudioMediaStream() As UUID
'{f7537560-a3be-11d0-8212-00c04fc32c45}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hf7537560, CInt(&Ha3be), CInt(&H11d0), &H82, &H12, &H00, &Hc0, &H4f, &Hc3, &H2c, &H45)
IID_IAudioMediaStream = iid
End Function
Public Function IID_IAudioStreamSample() As UUID
'{345fee00-aba5-11d0-8212-00c04fc32c45}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H345fee00, CInt(&Haba5), CInt(&H11d0), &H82, &H12, &H00, &Hc0, &H4f, &Hc3, &H2c, &H45)
IID_IAudioStreamSample = iid
End Function
Public Function IID_IMemoryData() As UUID
'{327fc560-af60-11d0-8212-00c04fc32c45}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H327fc560, CInt(&Haf60), CInt(&H11d0), &H82, &H12, &H00, &Hc0, &H4f, &Hc3, &H2c, &H45)
IID_IMemoryData = iid
End Function
Public Function IID_IAudioData() As UUID
'{54c719c0-af60-11d0-8212-00c04fc32c45}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H54c719c0, CInt(&Haf60), CInt(&H11d0), &H82, &H12, &H00, &Hc0, &H4f, &Hc3, &H2c, &H45)
IID_IAudioData = iid
End Function
Public Function IID_IDirectDrawMediaStream() As UUID
'{F4104FCE-9A70-11d0-8FDE-00C04FD9189D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF4104FCE, CInt(&H9A70), CInt(&H11d0), &H8F, &HDE, &H00, &HC0, &H4F, &HD9, &H18, &H9D)
IID_IDirectDrawMediaStream = iid
End Function
Public Function IID_IDirectDrawStreamSample() As UUID
'{F4104FCF-9A70-11d0-8FDE-00C04FD9189D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF4104FCF, CInt(&H9A70), CInt(&H11d0), &H8F, &HDE, &H00, &HC0, &H4F, &HD9, &H18, &H9D)
IID_IDirectDrawStreamSample = iid
End Function


Public Function IID_IDMLObject() As UUID
'{c8263aac-9e0c-4a2d-9b8e-007521a3317c}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hc8263aac, CInt(&H9e0c), CInt(&H4a2d), &H9b, &H8e, &H00, &H75, &H21, &Ha3, &H31, &H7c)
IID_IDMLObject = iid
End Function
Public Function IID_IDMLDevice() As UUID
'{6dbd6437-96fd-423f-a98c-ae5e7c2a573f}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6dbd6437, CInt(&H96fd), CInt(&H423f), &Ha9, &H8c, &Hae, &H5e, &H7c, &H2a, &H57, &H3f)
IID_IDMLDevice = iid
End Function
Public Function IID_IDMLDeviceChild() As UUID
'{27e83142-8165-49e3-974e-2fd66e4cb69d}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H27e83142, CInt(&H8165), CInt(&H49e3), &H97, &H4e, &H2f, &Hd6, &H6e, &H4c, &Hb6, &H9d)
IID_IDMLDeviceChild = iid
End Function
Public Function IID_IDMLPageable() As UUID
'{b1ab0825-4542-4a4b-8617-6dde6e8f6201}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hb1ab0825, CInt(&H4542), CInt(&H4a4b), &H86, &H17, &H6d, &Hde, &H6e, &H8f, &H62, &H01)
IID_IDMLPageable = iid
End Function
Public Function IID_IDMLOperator() As UUID
'{26caae7a-3081-4633-9581-226fbe57695d}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H26caae7a, CInt(&H3081), CInt(&H4633), &H95, &H81, &H22, &H6f, &Hbe, &H57, &H69, &H5d)
IID_IDMLOperator = iid
End Function
Public Function IID_IDMLDispatchable() As UUID
'{dcb821a8-1039-441e-9f1c-b1759c2f3cec}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hdcb821a8, CInt(&H1039), CInt(&H441e), &H9f, &H1c, &Hb1, &H75, &H9c, &H2f, &H3c, &Hec)
IID_IDMLDispatchable = iid
End Function
Public Function IID_IDMLCompiledOperator() As UUID
'{6b15e56a-bf5c-4902-92d8-da3a650afea4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6b15e56a, CInt(&Hbf5c), CInt(&H4902), &H92, &Hd8, &Hda, &H3a, &H65, &H0a, &Hfe, &Ha4)
IID_IDMLCompiledOperator = iid
End Function
Public Function IID_IDMLOperatorInitializer() As UUID
'{427c1113-435c-469c-8676-4d5dd072f813}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H427c1113, CInt(&H435c), CInt(&H469c), &H86, &H76, &H4d, &H5d, &Hd0, &H72, &Hf8, &H13)
IID_IDMLOperatorInitializer = iid
End Function
Public Function IID_IDMLBindingTable() As UUID
'{29c687dc-de74-4e3b-ab00-1168f2fc3cfc}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H29c687dc, CInt(&Hde74), CInt(&H4e3b), &Hab, &H00, &H11, &H68, &Hf2, &Hfc, &H3c, &Hfc)
IID_IDMLBindingTable = iid
End Function
Public Function IID_IDMLCommandRecorder() As UUID
'{e6857a76-2e3e-4fdd-bff4-5d2ba10fb453}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &He6857a76, CInt(&H2e3e), CInt(&H4fdd), &Hbf, &Hf4, &H5d, &H2b, &Ha1, &H0f, &Hb4, &H53)
IID_IDMLCommandRecorder = iid
End Function
Public Function IID_IDMLDebugDevice() As UUID
'{7d6f3ac9-394a-4ac3-92a7-390cc57a8217}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7d6f3ac9, CInt(&H394a), CInt(&H4ac3), &H92, &Ha7, &H39, &H0c, &Hc5, &H7a, &H82, &H17)
IID_IDMLDebugDevice = iid
End Function
Public Function IID_IDMLDevice1() As UUID
'{a0884f9a-d2be-4355-aa5d-5901281ad1d2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Ha0884f9a, CInt(&Hd2be), CInt(&H4355), &Haa, &H5d, &H59, &H01, &H28, &H1a, &Hd1, &Hd2)
IID_IDMLDevice1 = iid
End Function


Public Function DXVA2_ModeMPEG2_MoComp() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He6a9f44b, &H61b0, &H4563, &H9e, &Ha4, &H63, &Hd2, &Ha3, &Hc6, &Hfe, &H66)
DXVA2_ModeMPEG2_MoComp = iid
End Function
Public Function DXVA2_ModeMPEG2_IDCT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hbf22ad00, &H03ea, &H4690, &H80, &H77, &H47, &H33, &H46, &H20, &H9b, &H7e)
DXVA2_ModeMPEG2_IDCT = iid
End Function
Public Function DXVA2_ModeMPEG2_VLD() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hee27417f, &H5e28, &H4e65, &Hbe, &Hea, &H1d, &H26, &Hb5, &H08, &Had, &Hc9)
DXVA2_ModeMPEG2_VLD = iid
End Function
Public Function DXVA2_ModeMPEG1_VLD() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6f3ec719, &H3735, &H42cc, &H80, &H63, &H65, &Hcc, &H3c, &Hb3, &H66, &H16)
DXVA2_ModeMPEG1_VLD = iid
End Function
Public Function DXVA2_ModeMPEG2and1_VLD() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H86695f12, &H340e, &H4f04, &H9f, &Hd3, &H92, &H53, &Hdd, &H32, &H74, &H60)
DXVA2_ModeMPEG2and1_VLD = iid
End Function
Public Function DXVA2_ModeH264_A() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be64, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
DXVA2_ModeH264_A = iid
End Function
Public Function DXVA2_ModeH264_B() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be65, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
DXVA2_ModeH264_B = iid
End Function
Public Function DXVA2_ModeH264_C() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be66, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
DXVA2_ModeH264_C = iid
End Function
Public Function DXVA2_ModeH264_D() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be67, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
DXVA2_ModeH264_D = iid
End Function
Public Function DXVA2_ModeH264_E() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be68, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
DXVA2_ModeH264_E = iid
End Function
Public Function DXVA2_ModeH264_F() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be69, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
DXVA2_ModeH264_F = iid
End Function
Public Function DXVA2_ModeH264_VLD_WithFMOASO_NoFGT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd5f04ff9, &H3418, &H45d8, &H95, &H61, &H32, &Ha7, &H6a, &Hae, &H2d, &Hdd)
DXVA2_ModeH264_VLD_WithFMOASO_NoFGT = iid
End Function
Public Function DXVA2_ModeH264_VLD_Stereo_Progressive_NoFGT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd79be8da, &H0cf1, &H4c81, &Hb8, &H2a, &H69, &Ha4, &He2, &H36, &Hf4, &H3d)
DXVA2_ModeH264_VLD_Stereo_Progressive_NoFGT = iid
End Function
Public Function DXVA2_ModeH264_VLD_Stereo_NoFGT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf9aaccbb, &Hc2b6, &H4cfc, &H87, &H79, &H57, &H07, &Hb1, &H76, &H05, &H52)
DXVA2_ModeH264_VLD_Stereo_NoFGT = iid
End Function
Public Function DXVA2_ModeH264_VLD_Multiview_NoFGT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H705b9d82, &H76cf, &H49d6, &Hb7, &He6, &Hac, &H88, &H72, &Hdb, &H01, &H3c)
DXVA2_ModeH264_VLD_Multiview_NoFGT = iid
End Function
Public Function DXVA2_ModeWMV8_A() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be80, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
DXVA2_ModeWMV8_A = iid
End Function
Public Function DXVA2_ModeWMV8_B() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be81, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
DXVA2_ModeWMV8_B = iid
End Function
Public Function DXVA2_ModeWMV9_A() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be90, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
DXVA2_ModeWMV9_A = iid
End Function
Public Function DXVA2_ModeWMV9_B() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be91, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
DXVA2_ModeWMV9_B = iid
End Function
Public Function DXVA2_ModeWMV9_C() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be94, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
DXVA2_ModeWMV9_C = iid
End Function
Public Function DXVA2_ModeVC1_A() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81beA0, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
DXVA2_ModeVC1_A = iid
End Function
Public Function DXVA2_ModeVC1_B() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81beA1, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
DXVA2_ModeVC1_B = iid
End Function
Public Function DXVA2_ModeVC1_C() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81beA2, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
DXVA2_ModeVC1_C = iid
End Function
Public Function DXVA2_ModeVC1_D() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81beA3, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
DXVA2_ModeVC1_D = iid
End Function
Public Function DXVA2_ModeVC1_D2010() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81beA4, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
DXVA2_ModeVC1_D2010 = iid
End Function
Public Function DXVA2_NoEncrypt() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81beD0, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
DXVA2_NoEncrypt = iid
End Function
Public Function DXVA2_VideoProcProgressiveDevice() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5a54a0c9, &Hc7ec, &H4bd9, &H8e, &Hde, &Hf3, &Hc7, &H5d, &Hc4, &H39, &H3b)
DXVA2_VideoProcProgressiveDevice = iid
End Function
Public Function DXVA2_VideoProcBobDevice() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H335aa36e, &H7884, &H43a4, &H9c, &H91, &H7f, &H87, &Hfa, &Hf3, &He3, &H7e)
DXVA2_VideoProcBobDevice = iid
End Function
Public Function DXVA2_VideoProcSoftwareDevice() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4553d47f, &Hee7e, &H4e3f, &H94, &H75, &Hdb, &Hf1, &H37, &H6c, &H48, &H10)
DXVA2_VideoProcSoftwareDevice = iid
End Function
Public Function DXVA2_ModeMPEG4pt2_VLD_Simple() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hefd64d74, &Hc9e8, &H41d7, &Ha5, &He9, &He9, &Hb0, &He3, &H9f, &Ha3, &H19)
DXVA2_ModeMPEG4pt2_VLD_Simple = iid
End Function
Public Function DXVA2_ModeMPEG4pt2_VLD_AdvSimple_NoGMC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hed418a9f, &H010d, &H4eda, &H9a, &He3, &H9a, &H65, &H35, &H8d, &H8d, &H2e)
DXVA2_ModeMPEG4pt2_VLD_AdvSimple_NoGMC = iid
End Function
Public Function DXVA2_ModeMPEG4pt2_VLD_AdvSimple_GMC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hab998b5b, &H4258, &H44a9, &H9f, &Heb, &H94, &He5, &H97, &Ha6, &Hba, &Hae)
DXVA2_ModeMPEG4pt2_VLD_AdvSimple_GMC = iid
End Function
Public Function DXVA2_ModeHEVC_VLD_Main() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5b11d51b, &H2f4c, &H4452, &Hbc, &Hc3, &H09, &Hf2, &Ha1, &H16, &H0c, &Hc0)
DXVA2_ModeHEVC_VLD_Main = iid
End Function
Public Function DXVA2_ModeHEVC_VLD_Main10() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H107af0e0, &Hef1a, &H4d19, &Hab, &Ha8, &H67, &Ha1, &H63, &H07, &H3d, &H13)
DXVA2_ModeHEVC_VLD_Main10 = iid
End Function
Public Function DXVA2_ModeVP9_VLD_Profile0() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H463707f8, &Ha1d0, &H4585, &H87, &H6d, &H83, &Haa, &H6d, &H60, &Hb8, &H9e)
DXVA2_ModeVP9_VLD_Profile0 = iid
End Function
Public Function DXVA2_ModeVP9_VLD_10bit_Profile2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha4c749ef, &H6ecf, &H48aa, &H84, &H48, &H50, &Ha7, &Ha1, &H16, &H5f, &Hf7)
DXVA2_ModeVP9_VLD_10bit_Profile2 = iid
End Function
Public Function DXVA2_ModeVP8_VLD() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H90b899ea, &H3a62, &H4705, &H88, &Hb3, &H8d, &Hf0, &H4b, &H27, &H44, &He7)
DXVA2_ModeVP8_VLD = iid
End Function
Public Function DXVA2_ModeWMV8_PostProc() As UUID
    DXVA2_ModeWMV8_PostProc = DXVA2_ModeWMV8_A
End Function
Public Function DXVA2_ModeWMV8_MoComp() As UUID
    DXVA2_ModeWMV8_MoComp = DXVA2_ModeWMV8_B
End Function
Public Function DXVA2_ModeWMV9_PostProc() As UUID
    DXVA2_ModeWMV9_PostProc = DXVA2_ModeWMV9_A
End Function
Public Function DXVA2_ModeWMV9_MoComp() As UUID
    DXVA2_ModeWMV9_MoComp = DXVA2_ModeWMV9_B
End Function
Public Function DXVA2_ModeWMV9_IDCT() As UUID
    DXVA2_ModeWMV9_IDCT = DXVA2_ModeWMV9_C
End Function
Public Function DXVA2_ModeVC1_PostProc() As UUID
    DXVA2_ModeVC1_PostProc = DXVA2_ModeVC1_A
End Function
Public Function DXVA2_ModeVC1_MoComp() As UUID
    DXVA2_ModeVC1_MoComp = DXVA2_ModeVC1_B
End Function
Public Function DXVA2_ModeVC1_IDCT() As UUID
    DXVA2_ModeVC1_IDCT = DXVA2_ModeVC1_C
End Function
Public Function DXVA2_ModeVC1_VLD() As UUID
    DXVA2_ModeVC1_VLD = DXVA2_ModeVC1_D
End Function
Public Function DXVA2_ModeH264_MoComp_NoFGT() As UUID
    DXVA2_ModeH264_MoComp_NoFGT = DXVA2_ModeH264_A
End Function
Public Function DXVA2_ModeH264_MoComp_FGT() As UUID
    DXVA2_ModeH264_MoComp_FGT = DXVA2_ModeH264_B
End Function
Public Function DXVA2_ModeH264_IDCT_NoFGT() As UUID
    DXVA2_ModeH264_IDCT_NoFGT = DXVA2_ModeH264_C
End Function
Public Function DXVA2_ModeH264_IDCT_FGT() As UUID
    DXVA2_ModeH264_IDCT_FGT = DXVA2_ModeH264_D
End Function
Public Function DXVA2_ModeH264_VLD_NoFGT() As UUID
    DXVA2_ModeH264_VLD_NoFGT = DXVA2_ModeH264_E
End Function
Public Function DXVA2_ModeH264_VLD_FGT() As UUID
    DXVA2_ModeH264_VLD_FGT = DXVA2_ModeH264_F
End Function
     
    
Public Function IID_IDirect3DDeviceManager9() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha0cade0f, &H06d5, &H4cf4, &Ha1, &Hc7, &Hf3, &Hcd, &Hd7, &H25, &Haa, &H75)
IID_IDirect3DDeviceManager9 = iid
End Function
Public Function IID_IDirectXVideoAccelerationService() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hfc51a550, &Hd5e7, &H11d9, &Haf, &H55, &H00, &H05, &H4e, &H43, &Hff, &H02)
IID_IDirectXVideoAccelerationService = iid
End Function
Public Function IID_IDirectXVideoDecoderService() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hfc51a551, &Hd5e7, &H11d9, &Haf, &H55, &H00, &H05, &H4e, &H43, &Hff, &H02)
IID_IDirectXVideoDecoderService = iid
End Function
Public Function IID_IDirectXVideoProcessorService() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hfc51a552, &Hd5e7, &H11d9, &Haf, &H55, &H00, &H05, &H4e, &H43, &Hff, &H02)
IID_IDirectXVideoProcessorService = iid
End Function
Public Function IID_IDirectXVideoDecoder() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf2b0810a, &Hfd00, &H43c9, &H91, &H8c, &Hdf, &H94, &He2, &Hd8, &Hef, &H7d)
IID_IDirectXVideoDecoder = iid
End Function
Public Function IID_IDirectXVideoProcessor() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8c3a39f0, &H916e, &H4690, &H80, &H4f, &H4c, &H80, &H01, &H35, &H5d, &H25)
IID_IDirectXVideoProcessor = iid
End Function
Public Function IID_IDirectXVideoMemoryConfiguration() As UUID
'{b7f916dd-db3b-49c1-84d7-e45ef99ec726}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hb7f916dd, CInt(&Hdb3b), CInt(&H49c1), &H84, &Hd7, &He4, &H5e, &Hf9, &H9e, &Hc7, &H26)
IID_IDirectXVideoMemoryConfiguration = iid
End Function
Public Function IID_IDXVAHD_Device() As UUID
'{95f12dfd-d77e-49be-815f-57d579634d6d}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H95f12dfd, CInt(&Hd77e), CInt(&H49be), &H81, &H5f, &H57, &Hd5, &H79, &H63, &H4d, &H6d)
IID_IDXVAHD_Device = iid
End Function
Public Function IID_IDXVAHD_VideoProcessor() As UUID
'{95f4edf4-6e03-4cd7-be1b-3075d665aa52}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H95f4edf4, CInt(&H6e03), CInt(&H4cd7), &Hbe, &H1b, &H30, &H75, &Hd6, &H65, &Haa, &H52)
IID_IDXVAHD_VideoProcessor = iid
End Function

Public Function DXVAHD_STREAM_STATE_PRIVATE_IVTC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9c601e3c, &H0f33, &H414c, &Ha7, &H39, &H99, &H54, &H0e, &He4, &H2d, &Ha5)
DXVAHD_STREAM_STATE_PRIVATE_IVTC = iid
End Function
Public Function DXVAHDControlGuid() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha0386e75, &Hf70c, &H464c, &Ha9, &Hce, &H33, &Hc4, &H4e, &H09, &H16, &H23)
DXVAHDControlGuid = iid
End Function
Public Function DXVAHDETWGUID_CREATEVIDEOPROCESSOR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H681e3d1e, &H5674, &H4fb3, &Ha5, &H03, &H2f, &H20, &H55, &He9, &H1f, &H60)
DXVAHDETWGUID_CREATEVIDEOPROCESSOR = iid
End Function
Public Function DXVAHDETWGUID_VIDEOPROCESSBLTSTATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H76c94b5a, &H193f, &H4692, &H94, &H84, &Ha4, &Hd9, &H99, &Hda, &H81, &Ha8)
DXVAHDETWGUID_VIDEOPROCESSBLTSTATE = iid
End Function
Public Function DXVAHDETWGUID_VIDEOPROCESSSTREAMSTATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H262c0b02, &H209d, &H47ed, &H94, &Hd8, &H82, &Hae, &H02, &Hb8, &H4a, &Ha7)
DXVAHDETWGUID_VIDEOPROCESSSTREAMSTATE = iid
End Function
Public Function DXVAHDETWGUID_VIDEOPROCESSBLTHD() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hbef3d435, &H78c7, &H4de3, &H97, &H07, &Hcd, &H1b, &H08, &H3b, &H16, &H0a)
DXVAHDETWGUID_VIDEOPROCESSBLTHD = iid
End Function
Public Function DXVAHDETWGUID_VIDEOPROCESSBLTHD_STREAM() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H27ae473e, &Ha5fc, &H4be5, &Hb4, &He3, &Hf2, &H49, &H94, &Hd3, &Hc4, &H95)
DXVAHDETWGUID_VIDEOPROCESSBLTHD_STREAM = iid
End Function
Public Function DXVAHDETWGUID_DESTROYVIDEOPROCESSOR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf943f0a0, &H3f16, &H43e0, &H80, &H93, &H10, &H5a, &H98, &H6a, &Ha5, &Hf1)
DXVAHDETWGUID_DESTROYVIDEOPROCESSOR = iid
End Function

Public Function IID_IDirect3D9() As UUID
'{81BDCBCA-64D4-426D-AE8D-AD0147F4275C}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H81BDCBCA, CInt(&H64D4), CInt(&H426D), &HAE, &H8D, &HAD, &H01, &H47, &HF4, &H27, &H5C)
 IID_IDirect3D9 = iid
End Function
Public Function IID_IDirect3DDevice9() As UUID
'{D0223B96-BF7A-43FD-92BD-A43B0D82B9EB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD0223B96, CInt(&HBF7A), CInt(&H43FD), &H92, &HBD, &HA4, &H3B, &H0D, &H82, &HB9, &HEB)
IID_IDirect3DDevice9 = iid
End Function
Public Function IID_IDirect3DSurface9() As UUID
'{0CFBAF3A-9FF6-429A-99B3-A2796AF8B89B}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H0CFBAF3A, CInt(&H9FF6), CInt(&H429A), &H99, &HB3, &HA2, &H79, &H6A, &HF8, &HB8, &H9B)
IID_IDirect3DSurface9 = iid
End Function
Public Function IID_IDirect3DResource9() As UUID
'{05EEC05D-8F7D-4362-B999-D1BAF357C704}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H05EEC05D, CInt(&H8F7D), CInt(&H4362), &HB9, &H99, &HD1, &HBA, &HF3, &H57, &HC7, &H04)
IID_IDirect3DResource9 = iid
End Function
Public Function IID_IDirect3DSwapChain9() As UUID
'{794950F2-ADFC-458A-905E-10A10B0B503B}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H794950F2, CInt(&HADFC), CInt(&H458A), &H90, &H5E, &H10, &HA1, &H0B, &H0B, &H50, &H3B)
IID_IDirect3DSwapChain9 = iid
End Function
Public Function IID_IDirect3DTexture9() As UUID
'{85C31227-3DE5-4F00-9B3A-F11AC38C18B5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H85C31227, CInt(&H3DE5), CInt(&H4F00), &H9B, &H3A, &HF1, &H1A, &HC3, &H8C, &H18, &HB5)
IID_IDirect3DTexture9 = iid
End Function
Public Function IID_IDirect3DBaseTexture9() As UUID
'{580CA87E-1D3C-4D54-991D-B7D3E3C298CE}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H580CA87E, CInt(&H1D3C), CInt(&H4D54), &H99, &H1D, &HB7, &HD3, &HE3, &HC2, &H98, &HCE)
IID_IDirect3DBaseTexture9 = iid
End Function
Public Function IID_IDirect3DVolumeTexture9() As UUID
'{2518526C-E789-4111-A7B9-47EF328D13E6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2518526C, CInt(&HE789), CInt(&H4111), &HA7, &HB9, &H47, &HEF, &H32, &H8D, &H13, &HE6)
IID_IDirect3DVolumeTexture9 = iid
End Function
Public Function IID_IDirect3DVolume9() As UUID
'{24F416E6-1F67-4AA7-B88E-D33F6F3128A1}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H24F416E6, CInt(&H1F67), CInt(&H4AA7), &HB8, &H8E, &HD3, &H3F, &H6F, &H31, &H28, &HA1)
IID_IDirect3DVolume9 = iid
End Function
Public Function IID_IDirect3DCubeTexture9() As UUID
'{FFF32F81-D953-473A-9223-93D652ABA93F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFFF32F81, CInt(&HD953), CInt(&H473A), &H92, &H23, &H93, &HD6, &H52, &HAB, &HA9, &H3F)
IID_IDirect3DCubeTexture9 = iid
End Function
Public Function IID_IDirect3DVertexBuffer9() As UUID
'{B64BB1B5-FD70-4DF6-BF91-19D0A12455E3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB64BB1B5, CInt(&HFD70), CInt(&H4DF6), &HBF, &H91, &H19, &HD0, &HA1, &H24, &H55, &HE3)
IID_IDirect3DVertexBuffer9 = iid
End Function
Public Function IID_IDirect3DIndexBuffer9() As UUID
'{7C9DD65E-D3F7-4529-ACEE-785830ACDE35}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7C9DD65E, CInt(&HD3F7), CInt(&H4529), &HAC, &HEE, &H78, &H58, &H30, &HAC, &HDE, &H35)
IID_IDirect3DIndexBuffer9 = iid
End Function
Public Function IID_IDirect3DStateBlock9() As UUID
'{B07C4FE5-310D-4BA8-A23C-4F0F206F218B}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB07C4FE5, CInt(&H310D), CInt(&H4BA8), &HA2, &H3C, &H4F, &H0F, &H20, &H6F, &H21, &H8B)
IID_IDirect3DStateBlock9 = iid
End Function
Public Function IID_IDirect3DVertexDeclaration9() As UUID
'{DD13C59C-36FA-4098-A8FB-C7ED39DC8546}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDD13C59C, CInt(&H36FA), CInt(&H4098), &HA8, &HFB, &HC7, &HED, &H39, &HDC, &H85, &H46)
IID_IDirect3DVertexDeclaration9 = iid
End Function
Public Function IID_IDirect3DVertexShader9() As UUID
'{EFC5557E-6265-4613-8A94-43857889EB36}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEFC5557E, CInt(&H6265), CInt(&H4613), &H8A, &H94, &H43, &H85, &H78, &H89, &HEB, &H36)
IID_IDirect3DVertexShader9 = iid
End Function
Public Function IID_IDirect3DPixelShader9() As UUID
'{6D3BDBDC-5B02-4415-B852-CE5E8BCCB289}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6D3BDBDC, CInt(&H5B02), CInt(&H4415), &HB8, &H52, &HCE, &H5E, &H8B, &HCC, &HB2, &H89)
IID_IDirect3DPixelShader9 = iid
End Function
Public Function IID_IDirect3DQuery9() As UUID
'{D9771460-A695-4F26-BBD3-27B840B541CC}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD9771460, CInt(&HA695), CInt(&H4F26), &HBB, &HD3, &H27, &HB8, &H40, &HB5, &H41, &HCC)
IID_IDirect3DQuery9 = iid
End Function
Public Function IID_IDirect3D9Ex() As UUID
'{02177241-69FC-400C-8FF1-93A44DF6861D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H02177241, CInt(&H69FC), CInt(&H400C), &H8F, &HF1, &H93, &HA4, &H4D, &HF6, &H86, &H1D)
IID_IDirect3D9Ex = iid
End Function
Public Function IID_IDirect3DDevice9Ex() As UUID
'{B18B10CE-2649-405a-870F-95F777D4313A}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB18B10CE, CInt(&H2649), CInt(&H405a), &H87, &H0F, &H95, &HF7, &H77, &HD4, &H31, &H3A)
IID_IDirect3DDevice9Ex = iid
End Function
Public Function IID_IDirect3DSwapChain9Ex() As UUID
'{91886CAF-1C3D-4d2e-A0AB-3E4C7D8D3303}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H91886CAF, CInt(&H1C3D), CInt(&H4d2e), &HA0, &HAB, &H3E, &H4C, &H7D, &H8D, &H33, &H03)
IID_IDirect3DSwapChain9Ex = iid
End Function
Public Function IID_IDirect3D9ExOverlayExtension() As UUID
'{187AEB13-AAF5-4C59-876D-E059088C0DF8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H187AEB13, CInt(&HAAF5), CInt(&H4C59), &H87, &H6D, &HE0, &H59, &H08, &H8C, &H0D, &HF8)
IID_IDirect3D9ExOverlayExtension = iid
End Function
Public Function IID_IDirect3DDevice9Video() As UUID
'{26DC4561-A1EE-4ae7-96DA-118A36C0EC95}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H26DC4561, CInt(&HA1EE), CInt(&H4ae7), &H96, &HDA, &H11, &H8A, &H36, &HC0, &HEC, &H95)
IID_IDirect3DDevice9Video = iid
End Function
Public Function IID_IDirect3DAuthenticatedChannel9() As UUID
'{FF24BEEE-DA21-4beb-98B5-D2F899F98AF9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFF24BEEE, CInt(&HDA21), CInt(&H4beb), &H98, &HB5, &HD2, &HF8, &H99, &HF9, &H8A, &HF9)
IID_IDirect3DAuthenticatedChannel9 = iid
End Function
Public Function IID_IDirect3DCryptoSession9() As UUID
'{FA0AB799-7A9C-48CA-8C5B-237E71A54434}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFA0AB799, CInt(&H7A9C), CInt(&H48CA), &H8C, &H5B, &H23, &H7E, &H71, &HA5, &H44, &H34)
IID_IDirect3DCryptoSession9 = iid
End Function
Public Function IID_ID3DXConstantTable() As UUID
'{AB3C758F-093E-4356-B762-4DB18F1B3A01}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HAB3C758F, CInt(&H093E), CInt(&H4356), &HB7, &H62, &H4D, &HB1, &H8F, &H1B, &H3A, &H01)
IID_ID3DXConstantTable = iid
End Function
Public Function IID_ID3DXInclude() As UUID
'{D3914005-8E8C-49D3-9A97-4B402FD89AAB)}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD3914005, CInt(&H8E8C), CInt(&H49D3), &H9A, &H97, &H4B, &H40, &H2F, &HD8, &H9A, &HAB)
 IID_ID3DXInclude = iid
End Function
Public Function IID_IEVRVideoStreamControl() As UUID
'{d0cfe38b-93e7-4772-8957-0400c49a4485}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hd0cfe38b, CInt(&H93e7), CInt(&H4772), &H89, &H57, &H04, &H00, &Hc4, &H9a, &H44, &H85)
IID_IEVRVideoStreamControl = iid
End Function
Public Function IID_IMFVideoProcessor() As UUID
'{6AB0000C-FECE-4d1f-A2AC-A9573530656E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6AB0000C, CInt(&HFECE), CInt(&H4d1f), &HA2, &HAC, &HA9, &H57, &H35, &H30, &H65, &H6E)
IID_IMFVideoProcessor = iid
End Function
Public Function IID_IMFVideoMixerBitmap() As UUID
'{814C7B20-0FDB-4eec-AF8F-F957C8F69EDC}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H814C7B20, CInt(&H0FDB), CInt(&H4eec), &HAF, &H8F, &HF9, &H57, &HC8, &HF6, &H9E, &HDC)
IID_IMFVideoMixerBitmap = iid
End Function
#End Region

End Module

#If WINDEVLIB_DXHELPERS Then
    [PredeclaredId(True)]
Class D2D1
    Public Function CreateFactory( _
                    Optional ByVal eType As D2D1_FACTORY_TYPE = D2D1_FACTORY_TYPE_SINGLE_THREADED, _
                    Optional ByVal eDebugOptions As D2D1_DEBUG_LEVEL = -1) As ID2D1Factory
        Dim tOptions    As D2D1_FACTORY_OPTIONS
        Dim pOptions    As LongPtr
        Dim cIID(1)     As Currency
    
        If eDebugOptions <> -1 Then
    
            tOptions.debugLevel = eDebugOptions
            pOptions = VarPtr(tOptions)
        
        End If
    
        ' // IID_ID2D1Factory
        cIID(0) = 506948672004902.9703@
        cIID(1) = 53149071617564.8146@
    
        D2D1CreateFactory(eType, cIID(0), ByVal pOptions, CreateFactory)
    
    End Function

    Public Function Point2F( _
                    ByVal fX As Single, _
                    ByVal fY As Single) As D2D1_POINT_2F
                
        Point2F.x = fX
        Point2F.y = fY
    
    End Function

    Public Function Point2( _
                    ByVal lX As Long, _
                    ByVal lY As Long) As D2D1_POINT_2U
                
        Point2.x = lX
        Point2.y = lY
    
    End Function

    Public Function Size( _
                    Optional ByVal lWidth As Long, _
                    Optional ByVal lHeight As Long) As D2D1_SIZE_U
                
        Size.width = lWidth
        Size.Height = lHeight
    
    End Function

    Public Function SizeF( _
                    Optional ByVal fWidth As Single, _
                    Optional ByVal fHeight As Single) As D2D1_SIZE_F
                
        SizeF.width = fWidth
        SizeF.Height = fHeight
    
    End Function

    Public Function RectF(ByVal fLeft As Single, ByVal fTop As Single, ByVal fRight As Single, ByVal fBottom As Single) As D2D1_RECT_F
        With RectF
            .Left = fLeft
            .Right = fRight
            .Top = fTop
            .Bottom = fBottom
        End With
    End Function
    Public Function Rect(ByVal lLeft As Long, ByVal lTop As Long, ByVal lRight As Long, ByVal lBottom As Long) As D2D1_RECT_U
        With Rect
            .Left = lLeft
            .Right = lRight
            .Top = lTop
            .Bottom = lBottom
        End With
    End Function

    ' Sub testd2d1rc()

    ' Dim x As D2D1_RECT_F
    ' x = Rect(1!, 2!, 3!, 4!)
               
    ' Dim x2 As D2D1_RECT_U
    ' x2 = Rect(1&, 2&, 3&, 4&)
    ' End Sub
    Public Function RectF_InfiniteRect() As D2D1_RECT_F
    ' Dim x As D2D1_RECT_F
    ' x = Rect(1!, 2!, 3!, 4!)
        With RectF_InfiniteRect
    
        .Left = -FLT_MAX
        .Right = FLT_MAX
        .Top = -FLT_MAX
        .Bottom = FLT_MAX
    
        End With
    
    End Function


    Public Function ArcSegment( _
                    ByRef tPoint As D2D1_POINT_2F, _
                    ByRef tSize As D2D1_SIZE_F, _
                    ByVal fRotationAngle As Single, _
                    ByVal eSweepDirection As D2D1_SWEEP_DIRECTION, _
                    ByVal eArcSize As D2D1_ARC_SIZE) As D2D1_ARC_SEGMENT
    
        With ArcSegment
    
        .POINT = tPoint
        .SIZE = tSize
        .rotationAngle = fRotationAngle
        .sweepDirection = eSweepDirection
        .arcSize = eArcSize
    
        End With
    
    End Function

    Public Function BezierSegment( _
                    ByRef tPoint1 As D2D1_POINT_2F, _
                    ByRef tPoint2 As D2D1_POINT_2F, _
                    ByRef tPoint3 As D2D1_POINT_2F) As D2D1_BEZIER_SEGMENT

        With BezierSegment
    
        .point1 = tPoint1
        .point2 = tPoint2
        .point3 = tPoint3
    
        End With
    
    End Function

    Public Function Ellipse( _
                    ByRef tCenter As D2D1_POINT_2F, _
                    ByVal fRadiusX As Single, _
                    ByVal fRadiusY As Single) As D2D1_ELLIPSE
    
        With Ellipse
    
        .POINT = tCenter
        .radiusX = fRadiusX
        .radiusY = fRadiusY
    
        End With
    
    End Function

    Public Function RoundedRect( _
                    ByRef tRect As D2D1_RECT_F, _
                    ByVal fRadiusX As Single, _
                    ByVal fRadiusY As Single) As D2D1_ROUNDED_RECT
    
        With RoundedRect
    
        .RECT = tRect
        .radiusX = fRadiusX
        .radiusY = fRadiusY
    
        End With
    
    End Function
    
    Public Function BrushProperties( _
                    ByVal fOpacity As Single, _
                    ByRef tTransform As D2D1_MATRIX_3X2_F) As D2D1_BRUSH_PROPERTIES
    
        With BrushProperties
    
        .opacity = fOpacity
        .transform = tTransform
    
        End With
    
    End Function

    Public Function GradientStop( _
                    ByVal fPosition As Single, _
                    ByRef tColor As D2D1_COLOR_F) As D2D1_GRADIENT_STOP
    
        With GradientStop
    
        .position = fPosition
        .color = tColor
    
        End With
    
    End Function

    Public Function QuadraticBezierSegment( _
                    ByRef tPoint1 As D2D1_POINT_2F, _
                    ByRef tPoint2 As D2D1_POINT_2F) As D2D1_QUADRATIC_BEZIER_SEGMENT
    
        With QuadraticBezierSegment
    
        .point1 = tPoint1
        .point2 = tPoint2
    
        End With
    
    End Function

    Public Function StrokeStyleProperties( _
                    Optional ByVal eStartCap As D2D1_CAP_STYLE = D2D1_CAP_STYLE_FLAT, _
                    Optional ByVal eEndCap As D2D1_CAP_STYLE = D2D1_CAP_STYLE_FLAT, _
                    Optional ByVal eDashCap As D2D1_CAP_STYLE = D2D1_CAP_STYLE_FLAT, _
                    Optional ByVal eLineJoin As D2D1_LINE_JOIN = D2D1_LINE_JOIN_MITER, _
                    Optional ByVal fMiterLimit As Single = 10!, _
                    Optional ByVal eDashStyle As D2D1_DASH_STYLE = D2D1_DASH_STYLE_SOLID, _
                    Optional ByVal fDashOffset As Single) As D2D1_STROKE_STYLE_PROPERTIES
                
        With StrokeStyleProperties
    
        .startCap = eStartCap
        .endCap = eEndCap
        .dashCap = eDashCap
        .lineJoin = eLineJoin
        .miterLimit = fMiterLimit
        .dashStyle = eDashStyle
        .dashOffset = fDashOffset
    
        End With
    
    End Function

    Public Function BitmapBrushProperties( _
                    Optional ByVal eExtendModeX As D2D1_EXTEND_MODE = D2D1_EXTEND_MODE_CLAMP, _
                    Optional ByVal eExtendModeY As D2D1_EXTEND_MODE = D2D1_EXTEND_MODE_CLAMP, _
                    Optional ByVal eInterpolationMode As D2D1_BITMAP_INTERPOLATION_MODE = _
                    D2D1_BITMAP_INTERPOLATION_MODE_LINEAR) As D2D1_BITMAP_BRUSH_PROPERTIES
                
        With BitmapBrushProperties
    
        .extendModeX = eExtendModeX
        .extendModeY = eExtendModeY
        .InterpolationMode = eInterpolationMode
    
        End With
    
    End Function

    Public Function LinearGradientBrushProperties( _
                    ByRef tStartPoint As D2D1_POINT_2F, _
                    ByRef tEndPoint As D2D1_POINT_2F) As D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES
                
        With LinearGradientBrushProperties
    
        .startPoint = tStartPoint
        .endPoint = tEndPoint
    
        End With
    
    End Function

    Public Function RadialGradientBrushProperties( _
                    ByRef tCenter As D2D1_POINT_2F, _
                    ByRef tGradientOriginOffset As D2D1_POINT_2F, _
                    ByVal fRadiusX As Single, _
                    ByVal fRadiusY As Single) As D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES
                
        With RadialGradientBrushProperties
    
        .center = tCenter
        .gradientOriginOffset = tGradientOriginOffset
        .radiusX = fRadiusX
        .radiusY = fRadiusY
    
        End With
    
    End Function

    Public Function PixelFormat( _
                    Optional ByVal eDxgiFormat As DXGI_FORMAT = DXGI_FORMAT_UNKNOWN, _
                    Optional ByVal eAlphaMode As D2D1_ALPHA_MODE = D2D1_ALPHA_MODE_UNKNOWN) As D2D1_PIXEL_FORMAT
                
        PixelFormat.Format = eDxgiFormat
        PixelFormat.AlphaMode = eAlphaMode
    
    End Function

    Public Function BitmapProperties( _
                    ByRef tPixelFormat As D2D1_PIXEL_FORMAT, _
                    ByVal fDpiX As Single, _
                    ByVal fDpiY As Single) As D2D1_BITMAP_PROPERTIES
                
        With BitmapProperties
    
        .PixelFormat = tPixelFormat
        .DpiX = fDpiX
        .DpiY = fDpiY
    
        End With
    
    End Function

    Public Function RenderTargetProperties( _
                    ByRef tPixelFormat As D2D1_PIXEL_FORMAT, _
                    Optional ByVal eType As D2D1_RENDER_TARGET_TYPE = D2D1_RENDER_TARGET_TYPE_DEFAULT, _
                    Optional ByVal fDpiX As Single, _
                    Optional ByVal fDpiY As Single, _
                    Optional ByVal eUsage As D2D1_RENDER_TARGET_USAGE = D2D1_RENDER_TARGET_USAGE_NONE, _
                    Optional ByVal eMinLevel As D2D1_FEATURE_LEVEL = _
                    D2D1_FEATURE_LEVEL_DEFAULT) As D2D1_RENDER_TARGET_PROPERTIES
    
        With RenderTargetProperties
    
        .type = eType
        .PixelFormat = tPixelFormat
        .DpiX = fDpiX
        .DpiY = fDpiY
        .Usage = eUsage
        .minLevel = eMinLevel
    
        End With
    
    End Function

    Public Function HwndRenderTargetProperties( _
                    ByVal hWnd As LongPtr, _
                    ByRef tPixelSize As D2D1_SIZE_U, _
                    Optional ByVal ePresentOptions As D2D1_PRESENT_OPTIONS = _
                    D2D1_PRESENT_OPTIONS_NONE) As D2D1_HWND_RENDER_TARGET_PROPERTIES
    
        With HwndRenderTargetProperties
    
        .hwnd = hWnd
        .pixelSize = tPixelSize
        .presentOptions = ePresentOptions
    
        End With
    
    End Function

    Public Function LayerParameters( _
                    ByRef tContentBounds As D2D1_RECT_F, _
                    ByVal cGeometricMask As ID2D1Geometry, _
                    ByVal eMaskAntialiasMode As D2D1_ANTIALIAS_MODE, _
                    ByRef tMaskTransform As D2D1_MATRIX_3X2_F, _
                    Optional ByVal fOpacity As Single = 1!, _
                    Optional ByVal cOpacityBrush As ID2D1Brush, _
                    Optional ByVal eLayerOptions As D2D1_LAYER_OPTIONS = D2D1_LAYER_OPTIONS_NONE) As D2D1_LAYER_PARAMETERS
    
        With LayerParameters
    
        .contentBounds = tContentBounds
        Set .geometricMask = cGeometricMask
        .maskAntialiasMode = eMaskAntialiasMode
        .maskTransform = tMaskTransform
        .opacity = fOpacity
        Set .opacityBrush = cOpacityBrush
        .layerOptions = eLayerOptions
    
        End With
    
    End Function

    Public Function DrawingStateDescription( _
                    ByVal eAntialiasMode As D2D1_ANTIALIAS_MODE, _
                    ByVal eTextAntialiasMode As D2D1_TEXT_ANTIALIAS_MODE, _
                    ByVal cTag1 As LongLong, _
                    ByVal cTag2 As LongLong, _
                    ByRef tTransform As D2D1_MATRIX_3X2_F) As D2D1_DRAWING_STATE_DESCRIPTION
    
        With DrawingStateDescription
    
        .antialiasMode = eAntialiasMode
        .textAntialiasMode = eTextAntialiasMode
        .tag1 = cTag1
        .tag2 = cTag2
        .transform = tTransform
    
        End With
    
    End Function
    
    Public Function ColorF( _
                    ByVal eColor As D2D1_COLORS, _
                    Optional ByVal fAlpha As Single = 1!) As D2D1_COLOR_F
        Dim bR As Byte
        Dim bB As Byte
        Dim bG As Byte
    
        bB = CByte(eColor And &HFF)
        bG = CByte((eColor \ &H100) And &HFF)
        bR = CByte((eColor \ &H10000) And &HFF)
    
        With ColorF
    
        .r = bR / 255!
        .g = bG / 255!
        .b = bB / 255!
        .a = fAlpha
    
        End With
    
    End Function

    Public Function ColorF2( _
                    ByVal fR As Single, _
                    ByVal fG As Single, _
                    ByVal fB As Single, _
                    Optional ByVal fAlpha As Single = 1!) As D2D1_COLOR_F
    
        With ColorF2
    
        .r = fR
        .g = fG
        .b = fB
        .a = fAlpha
    
        End With
    
    End Function

    Public Function Matrix3x2F( _
                    ByVal f_11 As Single, _
                    ByVal f_12 As Single, _
                    ByVal f_21 As Single, _
                    ByVal f_22 As Single, _
                    ByVal f_31 As Single, _
                    ByVal f_32 As Single) As D2D1_MATRIX_3X2_F
    
        With Matrix3x2F
    
        .m_11 = f_11
        .m_12 = f_12
        .m_21 = f_21
        .m_22 = f_22
        .m_31 = f_31
        .m_32 = f_32
    
        End With
    
    End Function

    Public Function Matrix3x2F_Identity() As D2D1_MATRIX_3X2_F
    
        With Matrix3x2F_Identity
    
        .m_11 = 1
        .m_22 = 1
    
        End With
    
    End Function

    Public Function Matrix3x2F_Translation( _
                    ByRef tSize As D2D1_SIZE_F) As D2D1_MATRIX_3X2_F
    
        With Matrix3x2F_Translation
    
        .m_11 = 1!: .m_12 = 0!
        .m_21 = 0!: .m_22 = 1!
        .m_31 = tSize.width: .m_32 = tSize.Height
    
        End With
    
    End Function

    Public Function Matrix3x2F_Translation2( _
                    ByVal fWidth As Single, _
                    ByVal fHeight As Single) As D2D1_MATRIX_3X2_F
    
        With Matrix3x2F_Translation2
    
        .m_11 = 1!: .m_12 = 0!
        .m_21 = 0!: .m_22 = 1!
        .m_31 = fWidth: .m_32 = fHeight
    
        End With
    
    End Function

    Public Function Matrix3x2F_Scale( _
                    ByRef tSize As D2D1_SIZE_F, _
                    ByRef tCenter As D2D1_POINT_2F) As D2D1_MATRIX_3X2_F
    
        With Matrix3x2F_Scale
    
        .m_11 = tSize.width: .m_12 = 0!
        .m_21 = 0!: .m_22 = tSize.Height
        .m_31 = tCenter.x - tSize.width * tCenter.x
        .m_32 = tCenter.y - tSize.Height * tCenter.y
    
        End With
    
    End Function

    Public Function Matrix3x2F_Scale2( _
                    ByVal fWidth As Single, _
                    ByVal fHeight As Single, _
                    ByRef tCenter As D2D1_POINT_2F) As D2D1_MATRIX_3X2_F
    
        With Matrix3x2F_Scale2
    
        .m_11 = fWidth: .m_12 = 0!
        .m_21 = 0!: .m_22 = fHeight
        .m_31 = tCenter.x - fWidth * tCenter.x
        .m_32 = tCenter.y - fHeight * tCenter.y
    
        End With
    
    End Function

    Public Function Matrix3x2F_Rotation( _
                    ByVal fAngle As Single, _
                    ByRef tCenter As D2D1_POINT_2F) As D2D1_MATRIX_3X2_F
        D2D1MakeRotateMatrix fAngle, PointFToLongLong(tCenter.x, tCenter.y), Matrix3x2F_Rotation
    End Function

    Public Function Matrix3x2F_Rotation2( _
                    ByVal fAngle As Single, _
                    ByVal fCenterX As Single, _
                    ByVal fCentery As Single) As D2D1_MATRIX_3X2_F
        D2D1MakeRotateMatrix fAngle, PointFToLongLong(fCenterX, fCentery), Matrix3x2F_Rotation2
    End Function

    Public Function Matrix3x2F_Skew( _
                    ByVal fAngleX As Single, _
                    ByVal fAngleY As Single, _
                    ByRef tCenter As D2D1_POINT_2F) As D2D1_MATRIX_3X2_F
        D2D1MakeSkewMatrix fAngleX, fAngleY, PointFToLongLong(tCenter.x, tCenter.y), Matrix3x2F_Skew
    End Function

    Public Function Matrix3x2F_Determinant( _
                    ByRef tMtx As D2D1_MATRIX_3X2_F) As Single
        Matrix3x2F_Determinant = (tMtx.m_11 * tMtx.m_22) - (tMtx.m_12 * tMtx.m_21)
    End Function

    Public Function Matrix3x2F_IsInvertible( _
                    ByRef tMtx As D2D1_MATRIX_3X2_F) As Boolean
        Matrix3x2F_IsInvertible = D2D1IsMatrixInvertible(tMtx)
    End Function

    Public Function Matrix3x2F_Invert( _
                    ByRef tMtx As D2D1_MATRIX_3X2_F) As Boolean
        Matrix3x2F_Invert = D2D1InvertMatrix(tMtx)
    End Function

    Public Function Matrix3x2F_IsIdentity( _
                    ByRef tMtx As D2D1_MATRIX_3X2_F) As Boolean
        Matrix3x2F_IsIdentity = (tMtx.m_11 = 1!) And (tMtx.m_12 = 0!) And _
                                (tMtx.m_21 = 0!) And (tMtx.m_22 = 1!) And _
                                (tMtx.m_31 = 0!) And (tMtx.m_32 = 0!)
    End Function

    Public Function Matrix3x2F_SetProduct( _
                    ByRef tMtx1 As D2D1_MATRIX_3X2_F, _
                    ByRef tMtx2 As D2D1_MATRIX_3X2_F) As D2D1_MATRIX_3X2_F
                
        With Matrix3x2F_SetProduct
    
        .m_11 = tMtx1.m_11 * tMtx2.m_11 + tMtx1.m_12 * tMtx2.m_21
        .m_12 = tMtx1.m_11 * tMtx2.m_12 + tMtx1.m_12 * tMtx2.m_22
        .m_21 = tMtx1.m_21 * tMtx2.m_11 + tMtx1.m_22 * tMtx2.m_21
        .m_22 = tMtx1.m_21 * tMtx2.m_12 + tMtx1.m_22 * tMtx2.m_22
        .m_31 = tMtx1.m_31 * tMtx2.m_11 + tMtx1.m_32 * tMtx2.m_21 + tMtx2.m_31
        .m_32 = tMtx1.m_31 * tMtx2.m_12 + tMtx1.m_32 * tMtx2.m_22 + tMtx2.m_32
    
        End With
    
    End Function

    Public Function Matrix3x2F_TransformPoint( _
                    ByRef tMtx As D2D1_MATRIX_3X2_F, _
                    ByRef tPoint As D2D1_POINT_2F) As D2D1_POINT_2F
    
        With Matrix3x2F_TransformPoint
    
        .x = tPoint.x * tMtx.m_11 + tPoint.y * tMtx.m_21 + tMtx.m_31
        .y = tPoint.x * tMtx.m_12 + tPoint.y * tMtx.m_22 + tMtx.m_32
    
        End With
    
    End Function

    Public Function Matrix4x3F( _
                    ByVal f_11 As Single, _
                    ByVal f_12 As Single, _
                    ByVal f_13 As Single, _
                    ByVal f_21 As Single, _
                    ByVal f_22 As Single, _
                    ByVal f_23 As Single, _
                    ByVal f_31 As Single, _
                    ByVal f_32 As Single, _
                    ByVal f_33 As Single, _
                    ByVal f_41 As Single, _
                    ByVal f_42 As Single, _
                    ByVal f_43 As Single) As D2D1_MATRIX_4X3_F
    
        With Matrix4x3F
    
        .m_11 = f_11
        .m_12 = f_12
        .m_13 = f_13
        .m_21 = f_21
        .m_22 = f_22
        .m_23 = f_23
        .m_31 = f_31
        .m_32 = f_32
        .m_33 = f_33
        .m_41 = f_41
        .m_42 = f_42
        .m_43 = f_43

        End With
    
    End Function

    Public Function Matrix4x3F_Identity() As D2D1_MATRIX_4X3_F
    
        With Matrix4x3F_Identity
    
        .m_11 = 1!
        .m_22 = 1!
        .m_33 = 1!
    
        End With
    
    End Function

    Public Function Matrix4x4F( _
                    ByVal f_11 As Single, _
                    ByVal f_12 As Single, _
                    ByVal f_13 As Single, _
                    ByVal f_14 As Single, _
                    ByVal f_21 As Single, _
                    ByVal f_22 As Single, _
                    ByVal f_23 As Single, _
                    ByVal f_24 As Single, _
                    ByVal f_31 As Single, _
                    ByVal f_32 As Single, _
                    ByVal f_33 As Single, _
                    ByVal f_34 As Single, _
                    ByVal f_41 As Single, _
                    ByVal f_42 As Single, _
                    ByVal f_43 As Single, _
                    ByVal f_44 As Single) As D2D1_MATRIX_4X4_F
    
        With Matrix4x4F
    
        .m_11 = f_11
        .m_12 = f_12
        .m_13 = f_13
        .m_14 = f_14
        .m_21 = f_21
        .m_22 = f_22
        .m_23 = f_23
        .m_24 = f_24
        .m_31 = f_31
        .m_32 = f_32
        .m_33 = f_33
        .m_34 = f_34
        .m_41 = f_41
        .m_42 = f_42
        .m_43 = f_43
        .m_44 = f_44
    
        End With
    
    End Function

    Public Function Matrix4x4F_Identity() As D2D1_MATRIX_4X4_F
    
        With Matrix4x4F_Identity
    
        .m_11 = 1!
        .m_22 = 1!
        .m_33 = 1!
        .m_44 = 1!
    
        End With
    
    End Function

    Public Function Matrix4x4F_Translation( _
                    ByVal fX As Single, _
                    ByVal fY As Single, _
                    ByVal fZ As Single) As D2D1_MATRIX_4X4_F
    
        With Matrix4x4F_Translation
    
        .m_11 = 1!
        .m_22 = 1!
        .m_33 = 1!
        .m_44 = 1!
        .m_41 = fX
        .m_42 = fY
        .m_43 = fZ
    
        End With
    
    End Function

    Public Function Matrix4x4F_Scale( _
                    ByVal fX As Single, _
                    ByVal fY As Single, _
                    ByVal fZ As Single) As D2D1_MATRIX_4X4_F
    
        With Matrix4x4F_Scale
    
        .m_11 = fX
        .m_22 = fY
        .m_33 = fZ
        .m_44 = 1!

        End With
    
    End Function

    Public Function Matrix4x4F_RotationX( _
                    ByVal fDegreeX As Single) As D2D1_MATRIX_4X4_F
        Dim fAngleInRadian  As Single
        Dim fSin            As Single
        Dim fCos            As Single
    
        fAngleInRadian = fDegreeX * (3.141593! / 180!)
    
        D2D1SinCos fAngleInRadian, fSin, fCos
    
        With Matrix4x4F_RotationX
    
        .m_11 = 1
        .m_22 = fCos
        .m_33 = fCos
        .m_23 = fSin
        .m_32 = -fSin
        .m_44 = 1!

        End With
    
    End Function

    Public Function Matrix4x4F_RotationY( _
                    ByVal fDegreeY As Single) As D2D1_MATRIX_4X4_F
        Dim fAngleInRadian  As Single
        Dim fSin            As Single
        Dim fCos            As Single
    
        fAngleInRadian = fDegreeY * (3.141593! / 180!)
    
        D2D1SinCos fAngleInRadian, fSin, fCos
    
        With Matrix4x4F_RotationY
    
        .m_11 = fCos
        .m_13 = -fSin
        .m_22 = 1!
        .m_31 = fSin
        .m_33 = fCos
        .m_44 = 1!

        End With
    
    End Function

    Public Function Matrix4x4F_RotationZ( _
                    ByVal fDegreeZ As Single) As D2D1_MATRIX_4X4_F
        Dim fAngleInRadian  As Single
        Dim fSin            As Single
        Dim fCos            As Single
    
        fAngleInRadian = fDegreeZ * (3.141593! / 180!)
    
        D2D1SinCos fAngleInRadian, fSin, fCos
    
        With Matrix4x4F_RotationZ
    
        .m_11 = fCos
        .m_12 = fSin
        .m_21 = -fSin
        .m_22 = fCos
        .m_33 = 1!
        .m_44 = 1!

        End With
    
    End Function

    Public Function Matrix4x4F_RotationArbitraryAxis( _
                    ByVal fX As Single, _
                    ByVal fY As Single, _
                    ByVal fZ As Single, _
                    ByVal fDegree As Single) As D2D1_MATRIX_4X4_F
        Dim fAngleInRadian  As Single
        Dim fMagnitude      As Single
        Dim fSin            As Single
        Dim fCos            As Single
        Dim fInvCos         As Single
    
        fMagnitude = D2D1Vec3Length(fX, fY, fZ)
    
        fX = fX / fMagnitude
        fY = fY / fMagnitude
        fZ = fZ / fMagnitude
    
        fAngleInRadian = fDegree * (3.141593! / 180!)
    
        D2D1SinCos fAngleInRadian, fSin, fCos
    
        fInvCos = 1 - fCos
    
        With Matrix4x4F_RotationArbitraryAxis
    
        .m_11 = 1 + fInvCos * (fX * fX - 1)
        .m_12 = fZ * fSin + fInvCos * fX * fY
        .m_13 = -fY * fSin + fInvCos * fX * fZ
        .m_21 = -fZ * fSin + fInvCos * fY * fX
        .m_22 = 1 + fInvCos * (fY * fY - 1)
        .m_23 = fX * fSin + fInvCos * fY * fZ
        .m_31 = fY * fSin + fInvCos * fZ * fX
        .m_32 = -fX * fSin + fInvCos * fZ * fY
        .m_33 = 1 + fInvCos * (fZ * fZ - 1)
        .m_44 = 1
    
        End With
    
    End Function

    Public Function Matrix4x4F_SkewX( _
                    ByVal fDegreeX As Single) As D2D1_MATRIX_4X4_F
        Dim fAngleInRadian  As Single
        Dim fTan            As Single
    
        fAngleInRadian = fDegreeX * (3.141593! / 180!)
        fTan = D2D1Tan(fAngleInRadian)

        With Matrix4x4F_SkewX
    
        .m_11 = 1!
        .m_21 = fTan
        .m_22 = 1!
        .m_33 = 1!
        .m_44 = 1!

        End With
    
    End Function

    Public Function Matrix4x4F_SkewY( _
                    ByVal fDegreeY As Single) As D2D1_MATRIX_4X4_F
        Dim fAngleInRadian  As Single
        Dim fTan            As Single
    
        fAngleInRadian = fDegreeY * (3.141593! / 180!)
        fTan = D2D1Tan(fAngleInRadian)

        With Matrix4x4F_SkewY
    
        .m_11 = 1!
        .m_12 = fTan
        .m_22 = 1!
        .m_33 = 1!
        .m_44 = 1!

        End With
    
    End Function

    Public Function Matrix4x4F_PerspectiveProjection( _
                    ByVal fDepth As Single) As D2D1_MATRIX_4X4_F
        Dim fProj   As Single
    
        If fDepth > 0 Then
            fProj = -1 / fDepth
        End If
    
        With Matrix4x4F_PerspectiveProjection
    
        .m_11 = 1!
        .m_12 = 1!
        .m_22 = 1!
        .m_33 = 1!
        .m_34 = fProj
        .m_44 = 1!

        End With
    
    End Function

    Public Function Matrix4x4F_Determinant( _
                    ByRef tMtx As D2D1_MATRIX_4X4_F) As Single
        Dim fMinor1 As Single
        Dim fMinor2 As Single
        Dim fMinor3 As Single
        Dim fMinor4 As Single
    
        With tMtx
    
        fMinor1 = .m_41 * (.m_12 * (.m_23 * .m_34 - .m_33 * .m_24) - _
                  .m_13 * (.m_22 * .m_34 - .m_24 * .m_32) + _
                  .m_14 * (.m_22 * .m_33 - .m_23 * .m_32))
        fMinor2 = .m_42 * (.m_11 * (.m_21 * .m_34 - .m_31 * .m_24) - _
                  .m_13 * (.m_21 * .m_34 - .m_24 * .m_31) + _
                  .m_14 * (.m_21 * .m_33 - .m_23 * .m_31))
        fMinor3 = .m_43 * (.m_11 * (.m_22 * .m_34 - .m_32 * .m_24) - _
                  .m_12 * (.m_21 * .m_34 - .m_24 * .m_31) + _
                  .m_14 * (.m_21 * .m_32 - .m_22 * .m_31))
        fMinor4 = .m_44 * (.m_11 * (.m_22 * .m_33 - .m_32 * .m_23) - _
                  .m_12 * (.m_21 * .m_33 - .m_23 * .m_31) + _
                  .m_13 * (.m_21 * .m_32 - .m_22 * .m_31))

        Matrix4x4F_Determinant = fMinor1 - fMinor2 + fMinor3 - fMinor4
            
        End With
    
    End Function

    Public Function Matrix4x4F_IsIdentity( _
                    ByRef tMtx As D2D1_MATRIX_4X4_F) As Boolean
        Matrix4x4F_IsIdentity = (tMtx.m_11 = 1!) And (tMtx.m_12 = 0!) And (tMtx.m_13 = 0!) And (tMtx.m_14 = 0!) And _
                                (tMtx.m_21 = 0!) And (tMtx.m_22 = 1!) And (tMtx.m_23 = 0!) And (tMtx.m_24 = 0!) And _
                                (tMtx.m_31 = 0!) And (tMtx.m_32 = 0!) And (tMtx.m_33 = 1!) And (tMtx.m_34 = 0!) And _
                                (tMtx.m_41 = 0!) And (tMtx.m_42 = 0!) And (tMtx.m_43 = 1!) And (tMtx.m_44 = 1!)
    End Function

    Public Function Matrix4x4F_SetProduct( _
                    ByRef tMtx1 As D2D1_MATRIX_4X4_F, _
                    ByRef tMtx2 As D2D1_MATRIX_4X4_F) As D2D1_MATRIX_4X4_F
                
        With Matrix4x4F_SetProduct
    
        .m_11 = tMtx1.m_11 * tMtx2.m_11 + tMtx1.m_12 * tMtx2.m_21 + tMtx1.m_13 * tMtx2.m_31 + tMtx1.m_14 * tMtx2.m_41
        .m_12 = tMtx1.m_11 * tMtx2.m_12 + tMtx1.m_12 * tMtx2.m_22 + tMtx1.m_13 * tMtx2.m_32 + tMtx1.m_14 * tMtx2.m_42
        .m_13 = tMtx1.m_11 * tMtx2.m_13 + tMtx1.m_12 * tMtx2.m_23 + tMtx1.m_13 * tMtx2.m_33 + tMtx1.m_14 * tMtx2.m_43
        .m_14 = tMtx1.m_11 * tMtx2.m_14 + tMtx1.m_12 * tMtx2.m_24 + tMtx1.m_13 * tMtx2.m_34 + tMtx1.m_14 * tMtx2.m_44

        .m_21 = tMtx1.m_21 * tMtx2.m_11 + tMtx1.m_22 * tMtx2.m_21 + tMtx1.m_23 * tMtx2.m_31 + tMtx1.m_24 * tMtx2.m_41
        .m_22 = tMtx1.m_21 * tMtx2.m_12 + tMtx1.m_22 * tMtx2.m_22 + tMtx1.m_23 * tMtx2.m_32 + tMtx1.m_24 * tMtx2.m_42
        .m_23 = tMtx1.m_21 * tMtx2.m_13 + tMtx1.m_22 * tMtx2.m_23 + tMtx1.m_23 * tMtx2.m_33 + tMtx1.m_24 * tMtx2.m_43
        .m_24 = tMtx1.m_21 * tMtx2.m_14 + tMtx1.m_22 * tMtx2.m_24 + tMtx1.m_23 * tMtx2.m_34 + tMtx1.m_24 * tMtx2.m_44

        .m_31 = tMtx1.m_31 * tMtx2.m_11 + tMtx1.m_32 * tMtx2.m_21 + tMtx1.m_33 * tMtx2.m_31 + tMtx1.m_34 * tMtx2.m_41
        .m_32 = tMtx1.m_31 * tMtx2.m_12 + tMtx1.m_32 * tMtx2.m_22 + tMtx1.m_33 * tMtx2.m_32 + tMtx1.m_34 * tMtx2.m_42
        .m_33 = tMtx1.m_31 * tMtx2.m_13 + tMtx1.m_32 * tMtx2.m_23 + tMtx1.m_33 * tMtx2.m_33 + tMtx1.m_34 * tMtx2.m_43
        .m_34 = tMtx1.m_31 * tMtx2.m_14 + tMtx1.m_32 * tMtx2.m_24 + tMtx1.m_33 * tMtx2.m_34 + tMtx1.m_34 * tMtx2.m_44

        .m_41 = tMtx1.m_41 * tMtx2.m_11 + tMtx1.m_42 * tMtx2.m_21 + tMtx1.m_43 * tMtx2.m_31 + tMtx1.m_44 * tMtx2.m_41
        .m_42 = tMtx1.m_41 * tMtx2.m_12 + tMtx1.m_42 * tMtx2.m_22 + tMtx1.m_43 * tMtx2.m_32 + tMtx1.m_44 * tMtx2.m_42
        .m_43 = tMtx1.m_41 * tMtx2.m_13 + tMtx1.m_42 * tMtx2.m_23 + tMtx1.m_43 * tMtx2.m_33 + tMtx1.m_44 * tMtx2.m_43
        .m_44 = tMtx1.m_41 * tMtx2.m_14 + tMtx1.m_42 * tMtx2.m_24 + tMtx1.m_43 * tMtx2.m_34 + tMtx1.m_44 * tMtx2.m_44
        
        End With
    
    End Function

    Public Function Matrix5x4F( _
                    ByVal f_11 As Single, _
                    ByVal f_12 As Single, _
                    ByVal f_13 As Single, _
                    ByVal f_14 As Single, _
                    ByVal f_21 As Single, _
                    ByVal f_22 As Single, _
                    ByVal f_23 As Single, _
                    ByVal f_24 As Single, _
                    ByVal f_31 As Single, _
                    ByVal f_32 As Single, _
                    ByVal f_33 As Single, _
                    ByVal f_34 As Single, _
                    ByVal f_41 As Single, _
                    ByVal f_42 As Single, _
                    ByVal f_43 As Single, _
                    ByVal f_44 As Single, _
                    ByVal f_51 As Single, _
                    ByVal f_52 As Single, _
                    ByVal f_53 As Single, _
                    ByVal f_54 As Single) As D2D1_MATRIX_5X4_F
    
        With Matrix5x4F
    
        .m_11 = f_11
        .m_12 = f_12
        .m_13 = f_13
        .m_14 = f_14
        .m_21 = f_21
        .m_22 = f_22
        .m_23 = f_23
        .m_24 = f_24
        .m_31 = f_31
        .m_32 = f_32
        .m_33 = f_33
        .m_34 = f_34
        .m_41 = f_41
        .m_42 = f_42
        .m_43 = f_43
        .m_44 = f_44
        .m_51 = f_51
        .m_52 = f_52
        .m_53 = f_53
        .m_54 = f_54
    
        End With
    
    End Function

    Public Function Matrix5x4F_Identity() As D2D1_MATRIX_5X4_F
    
        With Matrix5x4F_Identity
    
        .m_11 = 1!
        .m_22 = 1!
        .m_33 = 1!
        .m_44 = 1!
    
        End With
    
    End Function

    Public Function ConvertColorSpace( _
                    ByVal eSourceColorSpace As D2D1_COLOR_SPACE, _
                    ByVal eDestinationColorSpace As D2D1_COLOR_SPACE, _
                    ByRef tColor As D2D1_COLOR_F) As D2D1_COLOR_F
        ConvertColorSpace = D2D1ConvertColorSpace(eSourceColorSpace, eDestinationColorSpace, tColor)
    End Function

    ' // TODO
    ' // DrawingStateDescription1
    ' // BitmapProperties1
    ' // LayerParameters1
    ' // StrokeStyleProperties1
    ' // ImageBrushProperties
    ' // BitmapBrushProperties1
    ' // PrintControlProperties
    ' // RenderingControls
    ' // EffectInputDescription
    ' // CreationProperties
    ' // Point2L
    ' // RectL

    Public Sub SetDpiCompensatedEffectInput( _
               ByVal cContext As ID2D1DeviceContext, _
               ByVal cEffect As ID2D1Effect, _
               ByVal lInputIndex As Long, _
               ByVal cBitmap As ID2D1Bitmap, _
               Optional ByVal eInterpolationMode As D2D1_INTERPOLATION_MODE = D2D1_INTERPOLATION_MODE_LINEAR, _
               Optional ByVal eBorderMode As D2D1_BORDER_MODE = D2D1_BORDER_MODE_HARD)
        Dim cDpiEffect  As ID2D1Effect
        Dim tCLSID      As UUID
        Dim tDPI        As D2D1_POINT_2F
    
        If cBitmap Is Nothing Then
            cEffect.SetInput lInputIndex, Nothing
            Exit Sub
        End If
    
        ' // CLSID_D2D1DpiCompensation
        GetMem8 511502141527783.9815@, tCLSID
        GetMem8 294592394174280.438@, ByVal VarPtr(tCLSID) + 8
    
        Set cDpiEffect = cContext.CreateEffect(tCLSID)
    
        cDpiEffect.SetInput 0, cBitmap
        cBitmap.GetDpi tDPI.x, tDPI.y
        cDpiEffect.SetValue D2D1_DPICOMPENSATION_PROP_INPUT_DPI, D2D1_PROPERTY_TYPE_UNKNOWN, tDPI, LenB(tDPI)
        cDpiEffect.SetValue D2D1_DPICOMPENSATION_PROP_INTERPOLATION_MODE, D2D1_PROPERTY_TYPE_UNKNOWN, eInterpolationMode, LenB(eInterpolationMode)
        cDpiEffect.SetValue D2D1_DPICOMPENSATION_PROP_BORDER_MODE, D2D1_PROPERTY_TYPE_UNKNOWN, eBorderMode, LenB(eBorderMode)
        Dim di As ID2D1Image
        cDpiEffect.GetOutput di
        cEffect.SetInput lInputIndex, di
    
    End Sub

    Public Function Vector2F( _
                    Optional ByVal fX As Single, _
                    Optional ByVal fY As Single) As D2D1_VECTOR_2F

        Vector2F.x = fX
        Vector2F.y = fY
    
    End Function

    Public Function Vector3F( _
                    Optional ByVal fX As Single, _
                    Optional ByVal fY As Single, _
                    Optional ByVal fZ As Single) As D2D1_VECTOR_3F

        Vector3F.x = fX
        Vector3F.y = fY
        Vector3F.z = fZ
    
    End Function

    Public Function Vector4F( _
                    Optional ByVal fX As Single, _
                    Optional ByVal fY As Single, _
                    Optional ByVal fZ As Single, _
                    Optional ByVal fW As Single) As D2D1_VECTOR_4F

        Vector4F.x = fX
        Vector4F.y = fY
        Vector4F.z = fZ
        Vector4F.w = fW
    
    End Function
End Class
#End If

#End If