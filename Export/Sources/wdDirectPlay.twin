'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************


'DirectPlay

'dplay8.h
'dpaddr.h
'dplobby8.h
'dpnathlp.h

#If WDL_NO_DIRECTX = 0 Then

[InterfaceId("83783300-4063-4c8a-9DB3-82830A7FEB31")]
[OleAutomation(False)]
Interface IDirectPlay8Address Extends IUnknown
    Sub BuildFromURLW(ByVal pwszSourceURL As LongPtr)
    Sub BuildFromURLA(ByVal pszSourceURL As LongPtr)
    Sub Duplicate(ByVal ppdpaNewAddress As LongPtr)
    Sub SetEqual(ByVal pdpaAddress As LongPtr)
    Sub IsEqual(ByVal pdpaAddress As LongPtr)
    Sub Clear()
    Sub GetURLW(ByVal pwszURL As LongPtr, ByRef pdwNumChars As Long)
    Sub GetURLA(ByVal pszURL As LongPtr, ByRef pdwNumChars As Long)
    Sub GetSP(ByRef pguidSP As UUID)
    Sub GetUserData(ByVal pvUserData As LongPtr, ByRef pdwBufferSize As Long)
    Sub SetSP(ByRef pguidSP As UUID)
    Sub SetUserData(ByVal pvUserData As LongPtr, ByVal dwDataSize As Long)
    Sub GetNumComponents(ByRef pdwNumComponents As Long)
    Sub GetComponentByName(ByVal pwszName As LongPtr, ByVal pvBuffer As LongPtr, ByRef pdwBufferSize As Long, ByRef pdwDataType As Long)
    Sub GetComponentByIndex(ByVal dwComponentID As Long, ByVal pwszName As LongPtr, ByRef pdwNameLen As Long, ByVal pvBuffer As LongPtr, ByRef pdwBufferSize As Long, ByRef pdwDataType As Long)
    Sub AddComponent(ByVal pwszName As LongPtr, ByVal lpvData As LongPtr, ByVal dwDataSize As Long, ByVal dwDataType As Long)
    Sub GetDevice(ByRef pguid As UUID)
    Sub SetDevice(ByRef pguid As UUID)
    Sub BuildFromDPADDRESS(ByVal pvAddress As LongPtr, ByVal dwDataSize As Long)
End Interface

[InterfaceId("E5A0E990-2BAD-430b-87DA-A142CF75DE58")]
[OleAutomation(False)]
Interface IDirectPlay8AddressIP Extends IUnknown
    [Description("Constructs a IDirectPlay8 TCP Address from a SOCKADDR structure")]
    Sub BuildFromSockAddr(ByRef sa As SOCKADDR)
    [Description("Constructs a TCP Address from a string (hostname) and port")]
    Sub BuildAddress(ByVal wszAddress As LongPtr, ByVal usPort As Integer)
    [Description("Builds a local TCP Address")]
    Sub BuildLocalAddress(ByRef pguidAdapter As UUID, ByVal usPort As Integer)
    [Description("Gets the address from the structure in SOCKADR format")]
    Sub GetSockAddress(ByRef sa As SOCKADDR, ByRef pdw As Long)
    [Description("Gets the local afddress")]
    Sub GetLocalAddress(ByRef pguidAdapter As UUID, ByRef pusPort As Integer)
    [Description("Gets the remote address")]
    Sub GetAddress(ByVal wszAddress As LongPtr, ByRef pdwAddressLength As Long, ByRef psPort As Integer)
End Interface






[InterfaceId("5102DACD-241B-11d3-AEA7-006097B01411")]
[OleAutomation(False)]
Interface IDirectPlay8Client Extends IUnknown
    ' #If WDL_NO_DELEGATES Then
    Sub Initialize(ByVal pvUserContext As LongPtr, ByVal pfn As LongPtr, ByVal dwFlags As DPlayInitFlags)
	' #Else
    ' Sub Initialize(ByVal pvUserContext As LongPtr, ByVal pfn As DPNMESSAGEHANDLER, ByVal dwFlags As DPlayInitFlags)
    ' #End If
    Sub EnumServiceProviders(ByRef pguidServiceProvider As UUID, ByRef pguidApplication As UUID, ByVal pSPInfoBuffer As LongPtr, ByRef pcbEnumData As Long, ByRef pcReturned As Long, ByVal dwFlags As DPlayEnumSvcProvFlags)
    Sub EnumHosts(ByRef pApplicationDesc As DPN_APPLICATION_DESC, ByVal pAddrHost As IDirectPlay8Address, ByVal pDeviceInfo As IDirectPlay8Address, pUserEnumData As Any, ByVal dwUserEnumDataSize As Long, ByVal dwEnumCount As Long, ByVal dwRetryInterval As Long, ByVal dwTimeOut As Long, ByVal pvUserContext As LongPtr, ByRef pAsyncHandle As Long, ByVal dwFlags As DPlayEnumHostsFlags)
    Sub CancelAsyncOperation(ByVal hAsyncHandle As Long, ByVal dwFlags As Long)
    Sub Connect(ByRef pdnAppDesc As DPN_APPLICATION_DESC, ByVal pHostAddr As IDirectPlay8Address, ByVal pDeviceInfo As IDirectPlay8Address, ByVal pdnSecurity As LongPtr /* DPN_SECURITY_DESC */, ByVal pdnCredentials As LongPtr /* DPN_SECURITY_CREDENTIALS */, ByVal pvUserConnectData As LongPtr, ByVal dwUserConnectDataSize As Long, ByVal pvAsyncContext As LongPtr, ByRef phAsyncHandle As Long, ByVal dwFlags As DPlayConnectFlags)
    Sub Send(ByRef prgBufferDesc As DPN_BUFFER_DESC, ByVal cBufferDesc As Long, ByVal dwTimeOut As Long, ByVal pvAsyncContext As LongPtr, ByRef phAsyncHandle As Long, ByVal dwFlags As DPNSENDFLAGS)
    Sub GetSendQueueInfo(ByRef pdwNumMsgs As Long, ByRef pdwNumBytes As Long, ByVal dwFlags As DPNGETSENDQUEUEINFO)
    Sub GetApplicationDesc(ByRef pAppDescBuffer As DPN_APPLICATION_DESC, ByRef pcbDataSize As Long, ByVal dwFlags As Long)
    Sub SetClientInfo(ByRef pdpnPlayerInfo As DPN_PLAYER_INFO, ByVal pvAsyncContext As LongPtr, ByRef phAsyncHandle As Long, ByVal dwFlags As DPNSETCLIENTINFOFLAGS)
    Sub GetServerInfo(ByRef pdpnPlayerInfo As DPN_PLAYER_INFO, ByRef pdwSize As Long, ByVal dwFlags As Long)
    Sub GetServerAddress(pAddress As IDirectPlay8Address, ByVal dwFlags As Long)
    Sub Close(ByVal dwFlags As DPNCLOSEFLAGS)
    Sub ReturnBuffer(ByVal hBufferHandle As Long, ByVal dwFlags As Long)
    Sub GetCaps(ByRef pdpCaps As DPN_CAPS, ByVal dwFlags As Long)
    Sub SetCaps(ByRef pdpCaps As DPN_CAPS, ByVal dwFlags As Long)
    Sub SetSPCaps(ByRef pguidSP As UUID, ByRef pdpspCaps As DPN_SP_CAPS, ByVal dwFlags As Long)
    Sub GetSPCaps(ByRef pguidSP As UUID, ByRef pdpspCaps As DPN_SP_CAPS, ByVal dwFlags As Long)
    Sub GetConnectionInfo(ByRef pdpConnectionInfo As DPN_CONNECTION_INFO, ByVal dwFlags As Long)
    Sub RegisterLobby(ByVal dpnHandle As Long, ByVal pIDP8LobbiedApplication As IDirectPlay8LobbiedApplication, ByVal dwFlags As DPNLOBBY)
End Interface

[InterfaceId("5102DACE-241B-11d3-AEA7-006097B01411")]
[OleAutomation(False)]
Interface IDirectPlay8Server Extends IUnknown
    ' #If WDL_NO_DELEGATES Then
    Sub Initialize(ByVal pvUserContext As LongPtr, ByVal pfn As LongPtr, ByVal dwFlags As Long)
    ' #Else
    ' Sub Initialize(ByVal pvUserContext As LongPtr, ByVal pfn As DPNMESSAGEHANDLER, ByVal dwFlags As Long)
    ' #End If
    Sub EnumServiceProviders(ByRef pguidServiceProvider As UUID, ByRef pguidApplication As UUID, ByRef pSPInfoBuffer As DPN_SERVICE_PROVIDER_INFO, ByRef pcbEnumData As Long, ByRef pcReturned As Long, ByVal dwFlags As Long)
    Sub CancelAsyncOperation(ByVal hAsyncHandle As Long, ByVal dwFlags As Long)
    Sub GetSendQueueInfo(ByVal dpnid As Long, ByRef pdwNumMsgs As Long, ByRef pdwNumBytes As Long, ByVal dwFlags As Long)
    Sub GetApplicationDesc(ByRef pAppDescBuffer As DPN_APPLICATION_DESC, ByRef pcbDataSize As Long, ByVal dwFlags As Long)
    Sub SetServerInfo(ByRef pdpnPlayerInfo As DPN_PLAYER_INFO, ByVal pvAsyncContext As LongPtr, ByRef phAsyncHandle As Long, ByVal dwFlags As Long)
    Sub GetClientInfo(ByVal dpnid As Long, ByRef pdpnPlayerInfo As DPN_PLAYER_INFO, ByRef pdwSize As Long, ByVal dwFlags As Long)
    Sub GetClientAddress(ByVal dpnid As Long, ByRef pAddress As IDirectPlay8Address, ByVal dwFlags As Long)
    Sub GetLocalHostAddresses(ByRef prgpAddress As IDirectPlay8Address, ByRef pcAddress As Long, ByVal dwFlags As Long)
    Sub SetApplicationDesc(ByRef pad As DPN_APPLICATION_DESC, ByVal dwFlags As Long)
    Sub Host(ByRef pdnAppDesc As DPN_APPLICATION_DESC, ByRef prgpDeviceInfo As IDirectPlay8Address, ByVal cDeviceInfo As Long, ByVal pdnSecurity As LongPtr /* DPN_SECURITY_DESC */, ByVal pdnCredentials As LongPtr /* DPN_SECURITY_CREDENTIALS */, ByVal pvPlayerContext As LongPtr, ByVal dwFlags As Long)
    Sub SendTo(ByVal dpnid As Long, ByRef prgBufferDesc As DPN_BUFFER_DESC, ByVal cBufferDesc As Long, ByVal dwTimeOut As Long, ByVal pvAsyncContext As LongPtr, ByRef phAsyncHandle As Long, ByVal dwFlags As Long)
    Sub CreateGroup(ByRef pdpnGroupInfo As DPN_GROUP_INFO, ByVal pvGroupContext As LongPtr, ByVal pvAsyncContext As LongPtr, ByRef phAsyncHandle As Long, ByVal dwFlags As Long)
    Sub DestroyGroup(ByVal idGroup As Long, ByVal pvAsyncContext As LongPtr, ByRef phAsyncHandle As Long, ByVal dwFlags As Long)
    Sub AddPlayerToGroup(ByVal idGroup As Long, ByVal idClient As Long, ByVal pvAsyncContext As LongPtr, ByRef phAsyncHandle As Long, ByVal dwFlags As Long)
    Sub RemovePlayerFromGroup(ByVal idGroup As Long, ByVal idClient As Long, ByVal pvAsyncContext As LongPtr, ByRef phAsyncHandle As Long, ByVal dwFlags As Long)
    Sub SetGroupInfo(ByVal dpnid As Long, ByRef pdpnGroupInfo As DPN_GROUP_INFO, ByVal pvAsyncContext As LongPtr, ByRef phAsyncHandle As Long, ByVal dwFlags As Long)
    Sub GetGroupInfo(ByVal dpnid As Long, ByRef pdpnGroupInfo As DPN_GROUP_INFO, ByRef pdwSize As Long, ByVal dwFlags As Long)
    Sub EnumPlayersAndGroups(prgdpnid As Long, ByRef pcdpnid As Long, ByVal dwFlags As Long)
    Sub EnumGroupMembers(ByVal dpnid As Long, prgdpnid As Long, ByRef pcdpnid As Long, ByVal dwFlags As Long)
    Sub Close(ByVal dwFlags As Long)
    Sub DestroyClient(ByVal dpnidClient As Long, ByVal pvDestroyData As LongPtr, ByVal dwDestroyDataSize As Long, ByVal dwFlags As Long)
    Sub ReturnBuffer(ByVal hBufferHandle As Long, ByVal dwFlags As Long)
    Sub GetPlayerContext(ByVal dpnid As Long, ppvPlayerContext As LongPtr, ByVal dwFlags As Long)
    Sub GetGroupContext(ByVal dpnid As Long, ppvGroupContext As LongPtr, ByVal dwFlags As Long)
    Sub GetCaps(ByRef pdpCaps As DPN_CAPS, ByVal dwFlags As Long)
    Sub SetCaps(ByRef pdpCaps As DPN_CAPS, ByVal dwFlags As Long)
    Sub SetSPCaps(ByRef pguidSP As UUID, ByRef pdpspCaps As DPN_SP_CAPS, ByVal dwFlags As Long)
    Sub GetSPCaps(ByRef pguidSP As UUID, ByRef pdpspCaps As DPN_SP_CAPS, ByVal dwFlags As Long)
    Sub GetConnectionInfo(ByVal dpnid As Long, ByRef pdpConnectionInfo As DPN_CONNECTION_INFO, ByVal dwFlags As Long)
    Sub RegisterLobby(ByVal dpnHandle As Long, ByVal pIDP8LobbiedApplication As IDirectPlay8LobbiedApplication, ByVal dwFlags As Long)
End Interface

[InterfaceId("286F484D-375E-4458-A272-B138E2F80A6A")]
[OleAutomation(False)]
Interface IDirectPlay8Peer Extends IUnknown
    ' #If WDL_NO_DELEGATES Then
    Sub Initialize(ByVal pvUserContext As LongPtr, ByVal pfn As LongPtr, ByVal dwFlags As Long)
    ' #Else
    ' Sub Initialize(ByVal pvUserContext As LongPtr, ByVal pfn As DPNMESSAGEHANDLER, ByVal dwFlags As Long)
    ' #End If
    Sub EnumServiceProviders(ByRef pguidServiceProvider As UUID, ByRef pguidApplication As UUID, ByRef pSPInfoBuffer As DPN_SERVICE_PROVIDER_INFO, ByRef pcbEnumData As Long, ByRef pcReturned As Long, ByVal dwFlags As Long)
    Sub CancelAsyncOperation(ByVal hAsyncHandle As Long, ByVal dwFlags As Long)
    Sub Connect(ByRef pdnAppDesc As DPN_APPLICATION_DESC, ByVal pHostAddr As IDirectPlay8Address, ByVal pDeviceInfo As IDirectPlay8Address, ByVal pdnSecurity As LongPtr /* DPN_SECURITY_DESC */, ByVal pdnCredentials As LongPtr /* DPN_SECURITY_CREDENTIALS */, ByVal pvUserConnectData As LongPtr, ByVal dwUserConnectDataSize As Long, ByVal pvPlayerContext As LongPtr, ByVal pvAsyncContext As LongPtr, ByRef phAsyncHandle As Long, ByVal dwFlags As Long)
    Sub SendTo(ByVal dpnid As Long, ByRef prgBufferDesc As DPN_BUFFER_DESC, ByVal cBufferDesc As Long, ByVal dwTimeOut As Long, ByVal pvAsyncContext As LongPtr, ByRef phAsyncHandle As Long, ByVal dwFlags As Long)
    Sub GetSendQueueInfo(ByVal dpnid As Long, ByRef pdwNumMsgs As Long, ByRef pdwNumBytes As Long, ByVal dwFlags As Long)
    Sub Host(ByRef pdnAppDesc As DPN_APPLICATION_DESC, ByRef prgpDeviceInfo As IDirectPlay8Address, ByVal cDeviceInfo As Long, ByVal pdnSecurity As LongPtr /* DPN_SECURITY_DESC */, ByVal pdnCredentials As LongPtr /* DPN_SECURITY_CREDENTIALS */, ByVal pvPlayerContext As LongPtr, ByVal dwFlags As Long)
    Sub GetApplicationDesc(ByRef pAppDescBuffer As DPN_APPLICATION_DESC, ByRef pcbDataSize As Long, ByVal dwFlags As Long)
    Sub SetApplicationDesc(ByRef pad As DPN_APPLICATION_DESC, ByVal dwFlags As Long)
    Sub CreateGroup(ByRef pdpnGroupInfo As DPN_GROUP_INFO, ByVal pvGroupContext As LongPtr, ByVal pvAsyncContext As LongPtr, ByRef phAsyncHandle As Long, ByVal dwFlags As Long)
    Sub DestroyGroup(ByVal idGroup As Long, ByVal pvAsyncContext As LongPtr, ByRef phAsyncHandle As Long, ByVal dwFlags As Long)
    Sub AddPlayerToGroup(ByVal idGroup As Long, ByVal idClient As Long, ByVal pvAsyncContext As LongPtr, ByRef phAsyncHandle As Long, ByVal dwFlags As Long)
    Sub RemovePlayerFromGroup(ByVal idGroup As Long, ByVal idClient As Long, ByVal pvAsyncContext As LongPtr, ByRef phAsyncHandle As Long, ByVal dwFlags As Long)
    Sub SetGroupInfo(ByVal dpnid As Long, ByRef pdpnGroupInfo As DPN_GROUP_INFO, ByVal pvAsyncContext As LongPtr, ByRef phAsyncHandle As Long, ByVal dwFlags As Long)
    Sub GetGroupInfo(ByVal dpnid As Long, ByRef pdpnGroupInfo As DPN_GROUP_INFO, ByRef pdwSize As Long, ByVal dwFlags As Long)
    Sub EnumPlayersAndGroups(prgdpnid As Long, ByRef pcdpnid As Long, ByVal dwFlags As Long)
    Sub EnumGroupMembers(ByVal dpnid As Long, prgdpnid As Long, ByRef pcdpnid As Long, ByVal dwFlags As Long)
    Sub SetPeerInfo(ByRef pdpnPlayerInfo As DPN_PLAYER_INFO, ByVal pvAsyncContext As LongPtr, ByRef phAsyncHandle As Long, ByVal dwFlags As Long)
    Sub GetPeerInfo(ByVal dpnid As Long, ByRef pdpnPlayerInfo As DPN_PLAYER_INFO, ByRef pdwSize As Long, ByVal dwFlags As Long)
    Sub GetPeerAddress(ByVal dpnid As Long, ByRef ppAddress As IDirectPlay8Address, ByVal dwFlags As Long)
    Sub GetLocalHostAddresses(ByRef prgpAddress As IDirectPlay8Address, ByRef pcAddress As Long, ByVal dwFlags As Long)
    Sub Close(ByVal dwFlags As Long)
    Sub EnumHosts(ByRef pApplicationDesc As DPN_APPLICATION_DESC, ByVal pAddrHost As IDirectPlay8Address, ByVal pDeviceInfo As IDirectPlay8Address, ByVal pUserEnumData As LongPtr, ByVal dwUserEnumDataSize As Long, ByVal dwEnumCount As Long, ByVal dwRetryInterval As Long, ByVal dwTimeOut As Long, ByVal pvUserContext As LongPtr, ByRef pAsyncHandle As Long, ByVal dwFlags As Long)
    Sub DestroyPeer(ByVal dpnidClient As Long, ByVal pvDestroyData As LongPtr, ByVal dwDestroyDataSize As Long, ByVal dwFlags As Long)
    Sub ReturnBuffer(ByVal hBufferHandle As Long, ByVal dwFlags As Long)
    Sub GetPlayerContext(ByVal dpnid As Long, ByRef ppvPlayerContext As LongPtr, ByVal dwFlags As Long)
    Sub GetGroupContext(ByVal dpnid As Long, ByRef ppvGroupContext As LongPtr, ByVal dwFlags As Long)
    Sub GetCaps(ByRef pdpCaps As DPN_CAPS, ByVal dwFlags As Long)
    Sub SetCaps(ByRef pdpCaps As DPN_CAPS, ByVal dwFlags As Long)
    Sub SetSPCaps(ByRef pguidSP As UUID, ByRef pdpspCaps As DPN_SP_CAPS, ByVal dwFlags As Long)
    Sub GetSPCaps(ByRef pguidSP As UUID, ByRef pdpspCaps As DPN_SP_CAPS, ByVal dwFlags As Long)
    Sub GetConnectionInfo(ByVal dpnid As Long, ByRef pdpConnectionInfo As DPN_CONNECTION_INFO, ByVal dwFlags As Long)
    Sub RegisterLobby(ByVal dpnHandle As Long, ByVal pIDP8LobbiedApplication As IDirectPlay8LobbiedApplication, ByVal dwFlags As Long)
    Sub TerminateSession(ByVal pvTerminateData As LongPtr, ByVal dwTerminateDataSize As Long, ByVal dwFlags As Long)
End Interface

[InterfaceId("0D22EE73-4A46-4a0d-89B2-045B4D666425")]
[OleAutomation(False)]
Interface IDirectPlay8ThreadPool Extends IUnknown
    ' #If WDL_NO_DELEGATES Then
    Sub Initialize(ByVal pvUserContext As LongPtr, ByVal pfn As LongPtr, ByVal dwFlags As Long)
    ' #Else
    ' Sub Initialize(ByVal pvUserContext As LongPtr, ByVal pfn As DPNMESSAGEHANDLER, ByVal dwFlags As Long)
    ' #End If
    Sub Close(ByVal dwFlags As Long)
    Sub GetThreadCount(ByVal dwProcessorNum As Long, pdwNumThreads As Long, ByVal dwFlags As Long)
    Sub SetThreadCount(ByVal dwProcessorNum As Long, ByVal dwNumThreads As Long, ByVal dwFlags As Long)
    Sub DoWork(ByVal dwAllowedTimeSlice As Long, ByVal dwFlags As Long)
End Interface

[InterfaceId("A9E213F2-9A60-486f-BF3B-53408B6D1CBB")]
[OleAutomation(False)]
Interface IDirectPlay8NATResolver Extends IUnknown
    ' #If WDL_NO_DELEGATES Then
    Sub Initialize(ByVal pvUserContext As LongPtr, ByVal pfn As LongPtr, ByVal dwFlags As Long)
    ' #Else
    ' Sub Initialize(ByVal pvUserContext As LongPtr, ByVal pfn As DPNMESSAGEHANDLER, ByVal dwFlags As Long)
    ' #End If
    Sub Start(ppDevices As IDirectPlay8Address, ByVal dwNumDevices As Long, ByVal dwFlags As Long)
    Sub Close(ByVal dwFlags As Long)
    Sub EnumDevices(pSPInfoBuffer As DPN_SERVICE_PROVIDER_INFO, pdwBufferSize As Long, pdwNumDevices As Long, ByVal dwFlags As Long)
    Sub GetAddresses(ppAddresses As IDirectPlay8Address, pdwNumAddresses As Long, ByVal dwFlags As Long)
End Interface


'dplobby8.h

[InterfaceId("819074A2-016C-11d3-AE14-006097B01411")]
[OleAutomation(False)]
Interface IDirectPlay8LobbyClient Extends IUnknown
    ' #If WDL_NO_DELEGATES Then
    Sub Initialize(ByVal pvUserContext As LongPtr, ByVal pfn As LongPtr, ByVal dwFlags As Long)
    ' #Else
    ' Sub Initialize(ByVal pvUserContext As LongPtr, ByVal pfn As DPNMESSAGEHANDLER, ByVal dwFlags As Long)
    ' #End If
    Sub EnumLocalPrograms(ByRef pGuidApplication As UUID, pEnumData As any, ByRef pdwEnumData As Long, ByRef pdwItems As Long, ByVal dwFlags As Long)
    Sub ConnectApplication(ByRef pdplConnectionInfo As DPL_CONNECT_INFO, ByVal pvConnectionContext As LongPtr, ByRef hApplication As Long, ByVal dwTimeOut As Long, ByVal dwFlags As Long)
    Sub Send(ByVal hConnection As Long, pBuffer As Any, ByVal pBufferSize As Long, ByVal dwFlags As Long)
    Sub ReleaseApplication(ByVal hConnection As Long, ByVal dwFlags As Long)
    Sub Close(ByVal dwFlags As Long)
    Sub GetConnectionSettings(ByVal hConnection As Long, ByRef pdplSessionInfo As DPL_CONNECTION_SETTINGS, ByRef pdwInfoSize As Long, ByVal dwFlags As Long)
    Sub SetConnectionSettings(ByVal hConnection As Long, ByRef pdplSessionInfo As DPL_CONNECTION_SETTINGS, ByVal dwFlags As Long)
End Interface

[InterfaceId("819074A3-016C-11d3-AE14-006097B01411")]
[OleAutomation(False)]
Interface IDirectPlay8LobbiedApplication Extends IUnknown
    ' #If WDL_NO_DELEGATES Then
    Sub Initialize(ByVal pvUserContext As LongPtr, ByVal pfn As LongPtr, ByRef pdpnhConnection As Long, ByVal dwFlags As Long)
    ' #Else
    ' Sub Initialize(ByVal pvUserContext As LongPtr, ByVal pfn As DPNMESSAGEHANDLER, ByRef pdpnhConnection As Long, ByVal dwFlags As Long)
    ' #End If 
    Sub RegisterProgram(ByRef pdplProgramDesc As DPL_PROGRAM_DESC, ByVal dwFlags As Long)
    Sub UnRegisterProgram(ByRef pguidApplication As UUID, ByVal dwFlags As Long)
    Sub Send(ByVal hConnection As Long, pBuffer As Any, ByVal pBufferSize As Long, ByVal dwFlags As Long)
    Sub SetAppAvailable(ByVal fAvailable As BOOL, ByVal dwFlags As Long)
    Sub UpdateStatus(ByVal hConnection As Long, ByVal dwStatus As Long, ByVal dwFlags As Long)
    Sub Close(ByVal dwFlags As Long)
    Sub GetConnectionSettings(ByVal hConnection As Long, ByRef pdplSessionInfo As DPL_CONNECTION_SETTINGS, ByRef pdwInfoSize As Long, ByVal dwFlags As Long)
    Sub SetConnectionSettings(ByVal hConnection As Long, ByRef pdplSessionInfo As DPL_CONNECTION_SETTINGS, ByVal dwFlags As Long)
End Interface


'dpnathlp.h

[InterfaceId("154940B6-2278-4a2f-9101-9BA9F431F603")]
[OleAutomation(False)]
Interface IDirectPlayNATHelp Extends IUnknown
    Sub Initialize(ByVal dwFlags As DPNHINITIALIZE)
    Sub Close(ByVal dwFlags As Long)
    Sub GetCaps(ByRef dpnhcaps As DPNHCAPS, ByVal dwFlags As DPNHGETCAPS)
    Sub RegisterPorts(ByRef aLocalAddresses As SOCKADDR, ByVal dwAddressesSize As Long, ByVal dwNumAddresses As Long, ByVal dwLeaseTime As Long, ByRef phRegisteredPorts As LongPtr, ByVal dwFlags As Long)
    Sub GetRegisteredAddresses(ByVal hRegisteredPorts As LongPtr, ByRef paPublicAddresses As SOCKADDR, ByRef pdwPublicAddressesSize As Long, ByRef pdwAddressTypeFlags As DPNHADDRESSTYPE, ByRef pdwLeaseTimeRemaining As Long, ByVal dwFlags As DPNHGETREGISTEREDADDRESSES)
    Sub DeregisterPorts(ByVal hRegisteredPorts As LongPtr, ByVal dwFlags As Long)
    Sub QueryAddress(ByRef pSourceAddress As SOCKADDR, ByRef pQueryAddress As SOCKADDR, ByRef pResponseAddress As SOCKADDR, ByVal iAddressesSize As Long, ByVal dwFlags As Long)
    Sub SetAlertEvent(ByVal hEvent As LongPtr, ByVal dwFlags As Long)
    Sub SetAlertIOCompletionPort(ByVal hIOCompletionPort As LongPtr, ByVal dwCompletionKey As Long, ByVal dwNumConcurrentThreads As Long, ByVal dwFlags As Long)
    Sub ExtendRegisteredPortsLease(ByVal hRegisteredPorts As LongPtr, ByVal dwLeaseTime As Long, ByVal dwFlags As Long)
End Interface

#If WDL_QUALIFY Then
[MustBeQualified]
#End If
Module wdDirectPlay

'dpaddr.h

Public Function CLSID_DirectPlay8Address() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H934a9523, &Ha3ca, &H4bc5, &Had, &Ha0, &Hd6, &Hd9, &H5d, &H97, &H94, &H21)
CLSID_DirectPlay8Address = iid
End Function
Public Function IID_IDirectPlay8Address() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H83783300, &H4063, &H4c8a, &H9d, &Hb3, &H82, &H83, &Ha, &H7f, &Heb, &H31)
IID_IDirectPlay8Address = iid
End Function
Public Function IID_IDirectPlay8AddressIP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He5a0e990, &H2bad, &H430b, &H87, &Hda, &Ha1, &H42, &Hcf, &H75, &Hde, &H58)
IID_IDirectPlay8AddressIP = iid
End Function

Public Enum DPlayAsyncOpFlags
    DPNA_DATATYPE_STRING = &H00000001
    DPNA_DATATYPE_DWORD = &H00000002
    DPNA_DATATYPE_GUID = &H00000003
    DPNA_DATATYPE_BINARY = &H00000004
    DPNA_DATATYPE_STRING_ANSI = &H00000005
    DPNA_DPNSVR_PORT = 6073
    DPNA_INDEX_INVALID = &HFFFFFFFF
End Enum

Public Const DPNA_SEPARATOR_KEYVALUE  = "="
Public Const DPNA_SEPARATOR_USERDATA  = "#"
Public Const DPNA_SEPARATOR_COMPONENT  = ";"
Public Const DPNA_ESCAPECHAR  = "%"
'  Header
Public Const DPNA_HEADER  = "x-directplay:/"
'  key names for address components
Public Const DPNA_KEY_NAT_RESOLVER  = "natresolver"
Public Const DPNA_KEY_NAT_RESOLVER_USER_STRING  = "natresolveruserstring"
Public Const DPNA_KEY_APPLICATION_INSTANCE  = "applicationinstance"
Public Const DPNA_KEY_DEVICE  = "device"
Public Const DPNA_KEY_HOSTNAME  = "hostname"
Public Const DPNA_KEY_PORT  = "port"
Public Const DPNA_KEY_NAMEINFO  = "nameinfo"
Public Const DPNA_KEY_PROCESSOR  = "processor"
Public Const DPNA_KEY_PROGRAM  = "program"
Public Const DPNA_KEY_PROVIDER  = "provider"
Public Const DPNA_KEY_SCOPE  = "scope"
Public Const DPNA_KEY_TRAVERSALMODE  = "traversalmode"
Public Const DPNA_KEY_BAUD  = "baud"
Public Const DPNA_KEY_FLOWCONTROL  = "flowcontrol"
Public Const DPNA_KEY_PARITY  = "parity"
Public Const DPNA_KEY_PHONENUMBER  = "phonenumber"
Public Const DPNA_KEY_STOPBITS  = "stopbits"

Public Enum DPlayBaudRates
	DPNA_BAUD_RATE_9600 = 9600
	DPNA_BAUD_RATE_14400 = 14400
	DPNA_BAUD_RATE_19200 = 19200
	DPNA_BAUD_RATE_38400 = 38400
	DPNA_BAUD_RATE_56000 = 56000
	DPNA_BAUD_RATE_57600 = 57600
	DPNA_BAUD_RATE_115200 = 115200
End Enum
    
Public Const DPNA_STOP_BITS_ONE  = "1"
Public Const DPNA_STOP_BITS_ONE_FIVE  = "1.5"
Public Const DPNA_STOP_BITS_TWO  = "2"
'  values for parity
Public Const DPNA_PARITY_NONE  = "NONE"
Public Const DPNA_PARITY_EVEN  = "EVEN"
Public Const DPNA_PARITY_ODD  = "ODD"
Public Const DPNA_PARITY_MARK  = "MARK"
Public Const DPNA_PARITY_SPACE  = "SPACE"
'  values for flow control
Public Const DPNA_FLOW_CONTROL_NONE  = "NONE"
Public Const DPNA_FLOW_CONTROL_XONXOFF  = "XONXOFF"
Public Const DPNA_FLOW_CONTROL_RTS  = "RTS"
Public Const DPNA_FLOW_CONTROL_DTR  = "DTR"
Public Const DPNA_FLOW_CONTROL_RTSDTR  = "RTSDTR"
'  values for traversal mode
Public Const DPNA_TRAVERSALMODE_NONE  = 0
Public Const DPNA_TRAVERSALMODE_PORTREQUIRED  = 1
Public Const DPNA_TRAVERSALMODE_PORTRECOMMENDED  = 2
'  Shortcut values
'  These can be used instead of the corresponding CLSID_DP8SP_XXXX guids
Public Const DPNA_VALUE_TCPIPPROVIDER  = "IP"
Public Const DPNA_VALUE_IPXPROVIDER  = "IPX"
Public Const DPNA_VALUE_MODEMPROVIDER  = "MODEM"
Public Const DPNA_VALUE_SERIALPROVIDER  = "SERIAL"
' // ANSI DEFINITIONS
'  Header
Public Const DPNA_HEADER_A  = "x-directplay:/"
Public Const DPNA_SEPARATOR_KEYVALUE_A  = "="
Public Const DPNA_SEPARATOR_USERDATA_A  = "#"
Public Const DPNA_SEPARATOR_COMPONENT_A  = ";"
Public Const DPNA_ESCAPECHAR_A  = "%"
'  key names for address components
Public Const DPNA_KEY_NAT_RESOLVER_A  = "natresolver"
Public Const DPNA_KEY_NAT_RESOLVER_USER_STRING_A  = "natresolveruserstring"
Public Const DPNA_KEY_APPLICATION_INSTANCE_A  = "applicationinstance"
Public Const DPNA_KEY_DEVICE_A  = "device"
Public Const DPNA_KEY_HOSTNAME_A  = "hostname"
Public Const DPNA_KEY_PORT_A  = "port"
Public Const DPNA_KEY_NAMEINFO_A  = "nameinfo"
Public Const DPNA_KEY_PROCESSOR_A  = "processor"
Public Const DPNA_KEY_PROGRAM_A  = "program"
Public Const DPNA_KEY_PROVIDER_A  = "provider"
Public Const DPNA_KEY_SCOPE_A  = "scope"
Public Const DPNA_KEY_TRAVERSALMODE_A  = "traversalmode"
Public Const DPNA_KEY_BAUD_A  = "baud"
Public Const DPNA_KEY_FLOWCONTROL_A  = "flowcontrol"
Public Const DPNA_KEY_PARITY_A  = "parity"
Public Const DPNA_KEY_PHONENUMBER_A  = "phonenumber"
Public Const DPNA_KEY_STOPBITS_A  = "stopbits"
'  values for stop bits
Public Const DPNA_STOP_BITS_ONE_A  = "1"
Public Const DPNA_STOP_BITS_ONE_FIVE_A  = "1.5"
Public Const DPNA_STOP_BITS_TWO_A  = "2"
'  values for parity
Public Const DPNA_PARITY_NONE_A  = "NONE"
Public Const DPNA_PARITY_EVEN_A  = "EVEN"
Public Const DPNA_PARITY_ODD_A  = "ODD"
Public Const DPNA_PARITY_MARK_A  = "MARK"
Public Const DPNA_PARITY_SPACE_A  = "SPACE"
'  values for flow control
Public Const DPNA_FLOW_CONTROL_NONE_A  = "NONE"
Public Const DPNA_FLOW_CONTROL_XONXOFF_A  = "XONXOFF"
Public Const DPNA_FLOW_CONTROL_RTS_A  = "RTS"
Public Const DPNA_FLOW_CONTROL_DTR_A  = "DTR"
Public Const DPNA_FLOW_CONTROL_RTSDTR_A  = "RTSDTR"
'  Shortcut values
'  These can be used instead of the corresponding CLSID_DP8SP_XXXX guids
Public Const DPNA_VALUE_TCPIPPROVIDER_A  = "IP"
Public Const DPNA_VALUE_IPXPROVIDER_A  = "IPX"
Public Const DPNA_VALUE_MODEMPROVIDER_A  = "MODEM"
Public Const DPNA_VALUE_SERIALPROVIDER_A  = "SERIAL"
    
    
    
    

'dplay8.h
Public Function CLSID_DirectPlay8Client() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H743f1dc6, &H5aba, &H429f, &H8b, &Hdf, &Hc5, &H4d, &H3, &H25, &H3d, &Hc2)
CLSID_DirectPlay8Client = iid
End Function
Public Function CLSID_DirectPlay8Server() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hda825e1b, &H6830, &H43d7, &H83, &H5d, &Hb, &H5a, &Hd8, &H29, &H56, &Ha2)
CLSID_DirectPlay8Server = iid
End Function
Public Function CLSID_DirectPlay8Peer() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H286f484d, &H375e, &H4458, &Ha2, &H72, &Hb1, &H38, &He2, &Hf8, &Ha, &H6a)
CLSID_DirectPlay8Peer = iid
End Function
Public Function CLSID_DirectPlay8ThreadPool() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hfc47060e, &H6153, &H4b34, &Hb9, &H75, &H8e, &H41, &H21, &Heb, &H7f, &H3c)
CLSID_DirectPlay8ThreadPool = iid
End Function
Public Function CLSID_DirectPlay8NATResolver() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He4c1d9a2, &Hcbf7, &H48bd, &H9a, &H69, &H34, &Ha5, &H5e, &Hd, &H89, &H41)
CLSID_DirectPlay8NATResolver = iid
End Function
Public Function IID_IDirectPlay8Client() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5102dacd, &H241b, &H11d3, &Hae, &Ha7, &H0, &H60, &H97, &Hb0, &H14, &H11)
IID_IDirectPlay8Client = iid
End Function
Public Function IID_IDirectPlay8Server() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5102dace, &H241b, &H11d3, &Hae, &Ha7, &H0, &H60, &H97, &Hb0, &H14, &H11)
IID_IDirectPlay8Server = iid
End Function
Public Function IID_IDirectPlay8Peer() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5102dacf, &H241b, &H11d3, &Hae, &Ha7, &H0, &H60, &H97, &Hb0, &H14, &H11)
IID_IDirectPlay8Peer = iid
End Function
Public Function IID_IDirectPlay8ThreadPool() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd22ee73, &H4a46, &H4a0d, &H89, &Hb2, &H4, &H5b, &H4d, &H66, &H64, &H25)
IID_IDirectPlay8ThreadPool = iid
End Function
Public Function IID_IDirectPlay8NATResolver() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha9e213f2, &H9a60, &H486f, &Hbf, &H3b, &H53, &H40, &H8b, &H6d, &H1c, &Hbb)
IID_IDirectPlay8NATResolver = iid
End Function
Public Function CLSID_DP8SP_IPX() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H53934290, &H628d, &H11d2, &Hae, &Hf, &H0, &H60, &H97, &Hb0, &H14, &H11)
CLSID_DP8SP_IPX = iid
End Function
Public Function CLSID_DP8SP_MODEM() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6d4a3650, &H628d, &H11d2, &Hae, &Hf, &H0, &H60, &H97, &Hb0, &H14, &H11)
CLSID_DP8SP_MODEM = iid
End Function
Public Function CLSID_DP8SP_SERIAL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H743b5d60, &H628d, &H11d2, &Hae, &Hf, &H0, &H60, &H97, &Hb0, &H14, &H11)
CLSID_DP8SP_SERIAL = iid
End Function
Public Function CLSID_DP8SP_TCPIP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hebfe7ba0, &H628d, &H11d2, &Hae, &Hf, &H0, &H60, &H97, &Hb0, &H14, &H11)
CLSID_DP8SP_TCPIP = iid
End Function
Public Function CLSID_DP8SP_BLUETOOTH() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H995513af, &H3027, &H4b9a, &H95, &H6e, &Hc7, &H72, &Hb3, &Hf7, &H80, &H6)
CLSID_DP8SP_BLUETOOTH = iid
End Function

Public Delegate Function DPNMESSAGEHANDLER (ByVal pv As LongPtr, ByVal dw As Long, ByVal pv2 As LongPtr) As Long

Public Enum DPNMESSAGEID
	DPN_MSGID_OFFSET = &HFFFF0000
	DPN_MSGID_ADD_PLAYER_TO_GROUP = (DPN_MSGID_OFFSET Or &H0001)
	DPN_MSGID_APPLICATION_DESC = (DPN_MSGID_OFFSET Or &H0002)
	DPN_MSGID_ASYNC_OP_COMPLETE = (DPN_MSGID_OFFSET Or &H0003)
	DPN_MSGID_CLIENT_INFO = (DPN_MSGID_OFFSET Or &H0004)
	DPN_MSGID_CONNECT_COMPLETE = (DPN_MSGID_OFFSET Or &H0005)
	DPN_MSGID_CREATE_GROUP = (DPN_MSGID_OFFSET Or &H0006)
	DPN_MSGID_CREATE_PLAYER = (DPN_MSGID_OFFSET Or &H0007)
	DPN_MSGID_DESTROY_GROUP = (DPN_MSGID_OFFSET Or &H0008)
	DPN_MSGID_DESTROY_PLAYER = (DPN_MSGID_OFFSET Or &H0009)
	DPN_MSGID_ENUM_HOSTS_QUERY = (DPN_MSGID_OFFSET Or &H000a)
	DPN_MSGID_ENUM_HOSTS_RESPONSE = (DPN_MSGID_OFFSET Or &H000b)
	DPN_MSGID_GROUP_INFO = (DPN_MSGID_OFFSET Or &H000c)
	DPN_MSGID_HOST_MIGRATE = (DPN_MSGID_OFFSET Or &H000d)
	DPN_MSGID_INDICATE_CONNECT = (DPN_MSGID_OFFSET Or &H000e)
	DPN_MSGID_INDICATED_CONNECT_ABORTED = (DPN_MSGID_OFFSET Or &H000f)
	DPN_MSGID_PEER_INFO = (DPN_MSGID_OFFSET Or &H0010)
	DPN_MSGID_RECEIVE = (DPN_MSGID_OFFSET Or &H0011)
	DPN_MSGID_REMOVE_PLAYER_FROM_GROUP = (DPN_MSGID_OFFSET Or &H0012)
	DPN_MSGID_RETURN_BUFFER = (DPN_MSGID_OFFSET Or &H0013)
	DPN_MSGID_SEND_COMPLETE = (DPN_MSGID_OFFSET Or &H0014)
	DPN_MSGID_SERVER_INFO = (DPN_MSGID_OFFSET Or &H0015)
	DPN_MSGID_TERMINATE_SESSION = (DPN_MSGID_OFFSET Or &H0016)
'  Messages added for DirectX 9
	DPN_MSGID_CREATE_THREAD = (DPN_MSGID_OFFSET Or &H0017)
	DPN_MSGID_DESTROY_THREAD = (DPN_MSGID_OFFSET Or &H0018)
	DPN_MSGID_NAT_RESOLVER_QUERY = (DPN_MSGID_OFFSET Or &H0101)
End Enum

Public Const DPNID_ALL_PLAYERS_GROUP = 0

Public Enum DPNDESTROYGROUPREASON
	DPNDESTROYGROUPREASON_NORMAL = &H0001
	DPNDESTROYGROUPREASON_AUTODESTRUCTED = &H0002
	DPNDESTROYGROUPREASON_SESSIONTERMINATED = &H0003
End Enum

Public Enum DPNDESTROYPLAYERREASON
    DPNDESTROYPLAYERREASON_NORMAL = &H0001
    DPNDESTROYPLAYERREASON_CONNECTIONLOST = &H0002
    DPNDESTROYPLAYERREASON_SESSIONTERMINATED = &H0003
    DPNDESTROYPLAYERREASON_HOSTDESTROYEDPLAYER = &H0004
End Enum

Public Const DPN_MAX_APPDESC_RESERVEDDATA_SIZE = 64


Public Enum DPlaySyncFlags
    DPNOP_SYNC = &H80000000
End Enum

Public Enum DPlayConnectFlags
    DPNCONNECT_SYNC = DPNOP_SYNC
    DPNCONNECT_OKTOQUERYFORADDRESSING = &H0001
End Enum

Public Enum DPlayAddPlayerToGroupFlags
    DPNADDPLAYERTOGROUP_SYNC = DPNOP_SYNC
End Enum

Public Enum DPNCANCELFLAGS
	DPNCANCEL_CONNECT = &H00000001
	DPNCANCEL_ENUM = &H00000002
	DPNCANCEL_SEND = &H00000004
	DPNCANCEL_ALL_OPERATIONS = &H00008000&
'  Flags added for DirectX 9
	DPNCANCEL_PLAYER_SENDS = &H80000000
	DPNCANCEL_PLAYER_SENDS_PRIORITY_HIGH = (DPNCANCEL_PLAYER_SENDS Or &H00010000)
	DPNCANCEL_PLAYER_SENDS_PRIORITY_NORMAL = (DPNCANCEL_PLAYER_SENDS Or &H00020000)
	DPNCANCEL_PLAYER_SENDS_PRIORITY_LOW = (DPNCANCEL_PLAYER_SENDS Or &H00040000)
End Enum

Public Enum DPNCLOSEFLAGS
	DPNCLOSE_IMMEDIATE = &H00000001
End Enum

Public Enum DPlayCreateGroupFlags
    DPNCREATEGROUP_SYNC = DPNOP_SYNC
End Enum

Public Enum DPlayDestroyGroupFlags
    DPNDESTROYGROUP_SYNC = DPNOP_SYNC
End Enum

Public Enum DPNENUMCLIENTGROUPFLAGS
    DPNENUM_PLAYERS = &H0001
    DPNENUM_GROUPS = &H0010
End Enum

Public Enum DPlayEnumHostsFlags
    DPNENUMHOSTS_SYNC = DPNOP_SYNC
    DPNENUMHOSTS_OKTOQUERYFORADDRESSING = &H0001
    DPNENUMHOSTS_NOBROADCASTFALLBACK = &H0002
End Enum

Public Enum DPlayEnumSvcProvFlags
    DPNENUMSERVICEPROVIDERS_ALL = &H0001
End Enum

Public Enum DPlayGetLocalHostAddressesFlags
    DPNGETLOCALHOSTADDRESSES_COMBINED = &H0001
End Enum

Public Enum DPNGETSENDQUEUEINFO
    DPNGETSENDQUEUEINFO_PRIORITY_NORMAL = &H0001
    DPNGETSENDQUEUEINFO_PRIORITY_HIGH = &H0002
    DPNGETSENDQUEUEINFO_PRIORITY_LOW = &H0004
End Enum

Public Enum DPNGROUPINFOFLAGS
    DPNGROUP_AUTODESTRUCT = &H0001
End Enum

Public Enum DPlayHostFlags
    DPNHOST_OKTOQUERYFORADDRESSING = &H0001
End Enum

Public Enum DPNINFO
    DPNINFO_NAME = &H0001
    DPNINFO_DATA = &H0002
End Enum

Public Enum DPlayInitFlags
    DPNINITIALIZE_DISABLEPARAMVAL = &H0001
'  Flags added for DirectX 9
    DPNINITIALIZE_HINT_LANSESSION = &H0002
    DPNINITIALIZE_DISABLELINKTUNING = &H0004
End Enum

Public Enum DPNLOBBY
    DPNLOBBY_REGISTER = &H0001
    DPNLOBBY_UNREGISTER = &H0002
End Enum

Public Enum DPNPLAYINFOFLAGS
    DPNPLAYER_LOCAL = &H0002
    DPNPLAYER_HOST = &H0004
End Enum

Public Enum DPNRECEIVEFLAGS
    DPNRECEIVE_GUARANTEED = &H0001
    DPNRECEIVE_COALESCED = &H0002
End Enum

Public Enum DPNREMOVEPLAYERFROMGROUPFLAGS
    DPNREMOVEPLAYERFROMGROUP_SYNC = DPNOP_SYNC
End Enum

Public Enum DPNSENDFLAGS
    DPNSEND_SYNC = DPNOP_SYNC
    DPNSEND_NOCOPY = &H0001
    DPNSEND_NOCOMPLETE = &H0002
    DPNSEND_COMPLETEONPROCESS = &H0004
    DPNSEND_GUARANTEED = &H0008
    DPNSEND_NONSEQUENTIAL = &H0010
    DPNSEND_NOLOOPBACK = &H0020
    DPNSEND_PRIORITY_LOW = &H0040
    DPNSEND_PRIORITY_HIGH = &H0080
'  Flag added for DirectX 9
    DPNSEND_COALESCE = &H0100
End Enum

Public Enum DPNSENDCOMPLETE_GUARANTEEDFLAGS
    DPNSENDCOMPLETE_GUARANTEED = &H0001
    DPNSENDCOMPLETE_COALESCED = &H0002
End Enum

Public Enum DPNSESSIONFLAGS
    DPNSESSION_CLIENT_SERVER = &H0001
    DPNSESSION_MIGRATE_HOST = &H0004
    DPNSESSION_NODPNSVR = &H0040
    DPNSESSION_REQUIREPASSWORD = &H0080
'  Flag added for DirectX 9
    DPNSESSION_NOENUMS = &H0100
    DPNSESSION_FAST_SIGNED = &H0200
    DPNSESSION_FULL_SIGNED = &H0400
End Enum

Public Enum DPNSETCLIENTINFOFLAGS
    DPNSETCLIENTINFO_SYNC = DPNOP_SYNC
End Enum

Public Enum DPNSETGROUPINFOFLAGS
    DPNSETGROUPINFO_SYNC = DPNOP_SYNC
End Enum

Public Enum DPNSETPEERINFOFLAGS
    DPNSETPEERINFO_SYNC = DPNOP_SYNC
End Enum

Public Enum DPNSETSERVERINFOFLAGS
    DPNSETSERVERINFO_SYNC = DPNOP_SYNC
End Enum

Public Enum DPNSPCAPSFLAGS
    DPNSPCAPS_SUPPORTSDPNSVR = &H0001
    DPNSPCAPS_SUPPORTSDPNSRV = DPNSPCAPS_SUPPORTSDPNSVR
    DPNSPCAPS_SUPPORTSBROADCAST = &H0002
    DPNSPCAPS_SUPPORTSALLADAPTERS = &H0004
'  Flags added for DirectX 9
    DPNSPCAPS_SUPPORTSTHREADPOOL = &H0008
    DPNSPCAPS_NETWORKSIMULATOR = &H0010
End Enum

Public Enum DPNSPINFOFLAGS
    DPNSPINFO_NETWORKSIMULATORDEVICE = &H0001
End Enum

Public Type DPN_APPLICATION_DESC
    dwSize As Long ' Size of this structure
    dwFlags As DPNSESSIONFLAGS ' Flags (DPNSESSION_...)
    guidInstance As UUID ' Instance GUID
    guidApplication As UUID ' Application GUID
    dwMaxPlayers As Long ' Maximum # of players allowed (0=no limit)
    dwCurrentPlayers As Long ' Current # of players allowed
    pwszSessionName As LongPtr ' Name of the session
    pwszPassword As LongPtr ' Password for the session
    pvReservedData As LongPtr
    dwReservedDataSize As Long
    pvApplicationReservedData As LongPtr
    dwApplicationReservedDataSize As Long
End Type

Public Type DPN_BUFFER_DESC
    dwBufferSize As Long
    pBufferData As LongPtr
End Type

Public Type DPN_CAPS
    dwSize As Long ' Size of this structure
    dwFlags As Long ' Flags
    dwConnectTimeout As Long ' ms before a connect request times out
    dwConnectRetries As Long ' # of times to attempt the connection
    dwTimeoutUntilKeepAlive As Long ' ms of inactivity before a keep alive is sent
End Type

Public Type DPN_CAPS_EX
    dwSize As Long ' Size of this structure
    dwFlags As Long ' Flags
    dwConnectTimeout As Long ' ms before a connect request times out
    dwConnectRetries As Long ' # of times to attempt the connection
    dwTimeoutUntilKeepAlive As Long ' ms of inactivity before a keep alive is sent
    dwMaxRecvMsgSize As Long ' maximum size in bytes of message that can be received
    dwNumSendRetries As Long ' maximum number of send retries before link is considered dead
    dwMaxSendRetryInterval As Long ' maximum period in msec between send retries
    dwDropThresholdRate As Long ' percentage of dropped packets before throttling
    dwThrottleRate As Long ' percentage amount to reduce send window when throttling
    dwNumHardDisconnectSends As Long ' number of hard disconnect frames to send when close immediate flag is specified
    dwMaxHardDisconnectPeriod As Long ' maximum period between hard disconnect sends
End Type

Public Type DPN_CONNECTION_INFO
    dwSize As Long
    dwRoundTripLatencyMS As Long
    dwThroughputBPS As Long
    dwPeakThroughputBPS As Long
    dwBytesSentGuaranteed As Long
    dwPacketsSentGuaranteed As Long
    dwBytesSentNonGuaranteed As Long
    dwPacketsSentNonGuaranteed As Long
    dwBytesRetried As Long ' Guaranteed only
    dwPacketsRetried As Long ' Guaranteed only
    dwBytesDropped As Long ' Non Guaranteed only
    dwPacketsDropped As Long ' Non Guaranteed only
    dwMessagesTransmittedHighPriority As Long
    dwMessagesTimedOutHighPriority As Long
    dwMessagesTransmittedNormalPriority As Long
    dwMessagesTimedOutNormalPriority As Long
    dwMessagesTransmittedLowPriority As Long
    dwMessagesTimedOutLowPriority As Long
    dwBytesReceivedGuaranteed As Long
    dwPacketsReceivedGuaranteed As Long
    dwBytesReceivedNonGuaranteed As Long
    dwPacketsReceivedNonGuaranteed As Long
    dwMessagesReceived As Long
End Type

Public Type DPN_GROUP_INFO
    dwSize As Long ' size of this structure
    dwInfoFlags As Long ' information contained
    pwszName As LongPtr ' Unicode Name
    pvData As LongPtr ' data block
    dwDataSize As Long ' size in BYTES of data block
    dwGroupFlags As DPNGROUPINFOFLAGS ' group flags (DPNGROUP_...)
End Type

Public Type DPN_PLAYER_INFO
    dwSize As Long ' size of this structure
    dwInfoFlags As DPNINFO ' information contained
    pwszName As LongPtr ' Unicode Name
    pvData As LongPtr ' data block
    dwDataSize As Long ' size in BYTES of data block
    dwPlayerFlags As DPNPLAYINFOFLAGS ' player flags (DPNPLAYER_...)
End Type

Public Type DPN_SERVICE_PROVIDER_INFO
    dwFlags As Long
    guid As UUID ' SP Guid
    pwszName As Integer ' Friendly Name
    pvReserved As LongPtr
    dwReserved As Long
End Type

Public Type DPN_SP_CAPS
    dwSize As Long ' Size of this structure
    dwFlags As DPNSPCAPSFLAGS ' Flags (DPNSPCAPS_...)
    dwNumThreads As Long ' # of worker threads to use
    dwDefaultEnumCount As Long ' default # of enum requests
    dwDefaultEnumRetryInterval As Long ' default ms between enum requests
    dwDefaultEnumTimeout As Long ' default enum timeout
    dwMaxEnumPayloadSize As Long ' maximum size in bytes for enum payload data
    dwBuffersPerThread As Long ' number of receive buffers per thread
    dwSystemBufferSize As Long ' amount of buffering to do in addition to posted receive buffers
End Type

Public Type DPNMSG_ADD_PLAYER_TO_GROUP
    dwSize As Long ' Size of this structure
    dpnidGroup As Long 'DPNID ' DPNID of group
    pvGroupContext As LongPtr ' Group context value
    dpnidPlayer As Long 'DPNID ' DPNID of added player
    pvPlayerContext As LongPtr ' Player context value
End Type

Public Type DPNMSG_ASYNC_OP_COMPLETE
    dwSize As Long ' Size of this structure
    hAsyncOp As Long ' ' DirectPlay8 async operation handle
    pvUserContext As LongPtr ' User context supplied
    hResultCode As Long ' HRESULT of operation
End Type

Public Type DPNMSG_CLIENT_INFO
    dwSize As Long ' Size of this structure
    dpnidClient As Long 'DPNID ' DPNID of client
    pvPlayerContext As LongPtr ' Player context value
End Type

Public Type DPNMSG_CONNECT_COMPLETE
    dwSize As Long ' Size of this structure
    hAsyncOp As Long ' DirectPlay8 Async operation handle
    pvUserContext As LongPtr ' User context supplied at Connect
    hResultCode As Long ' HRESULT of connection attempt
    pvApplicationReplyData As LongPtr ' Connection reply data from Host/Server
    dwApplicationReplyDataSize As Long ' Size (in bytes) of pvApplicationReplyData
    ' Fields added for DirectX 9
    dpnidLocal As Long 'DPNID ' DPNID of local player
End Type

Public Type DPNMSG_CREATE_GROUP
    dwSize As Long ' Size of this structure
    dpnidGroup As Long 'DPNID ' DPNID of new group
    dpnidOwner As Long 'DPNID ' Owner of newgroup
    pvGroupContext As LongPtr ' Group context value
    ' Fields added for DirectX 9
    pvOwnerContext As LongPtr ' Owner context value
End Type

Public Type DPNMSG_CREATE_PLAYER
    dwSize As Long ' Size of this structure
    dpnidPlayer As Long 'DPNID ' DPNID of new player
    pvPlayerContext As LongPtr ' Player context value
End Type

Public Type DPNMSG_DESTROY_GROUP
    dwSize As Long ' Size of this structure
    dpnidGroup As Long 'DPNID ' DPNID of destroyed group
    pvGroupContext As LongPtr ' Group context value
    dwReason As DPNDESTROYGROUPREASON ' Information only
End Type

Public Type DPNMSG_DESTROY_PLAYER
    dwSize As Long ' Size of this structure
    dpnidPlayer As Long 'DPNID ' DPNID of leaving player
    pvPlayerContext As LongPtr ' Player context value
    dwReason As DPNDESTROYPLAYERREASON ' Information only
End Type

Public Type DPNMSG_ENUM_HOSTS_QUERY
    dwSize As Long ' Size of this structure.
    pAddressSender As IDirectPlay8Address ' Address of client who sent the request
    pAddressDevice As IDirectPlay8Address ' Address of device request was received on
    pvReceivedData As LongPtr ' Request data (set on client)
    dwReceivedDataSize As Long ' Request data size (set on client)
    dwMaxResponseDataSize As Long ' Max allowable size of enum response
    pvResponseData As LongPtr ' Optional query repsonse (user set)
    dwResponseDataSize As Long ' Optional query response size (user set)
    pvResponseContext As LongPtr ' Optional query response context (user set)
End Type

Public Type DPNMSG_ENUM_HOSTS_RESPONSE
    dwSize As Long ' Size of this structure
    pAddressSender As IDirectPlay8Address ' Address of host who responded
    pAddressDevice As IDirectPlay8Address ' Device response was received on
    pApplicationDescription As LongPtr 'DPN_APPLICATION_DESC* ' Application description for the session
    pvResponseData As LongPtr ' Optional response data (set on host)
    dwResponseDataSize As Long ' Optional response data size (set on host)
    pvUserContext As LongPtr ' Context value supplied for enumeration
    dwRoundTripLatencyMS As Long ' Round trip latency in MS
End Type

Public Type DPNMSG_GROUP_INFO
    dwSize As Long ' Size of this structure
    dpnidGroup As Long 'DPNID ' DPNID of group
    pvGroupContext As LongPtr ' Group context value
End Type

Public Type DPNMSG_HOST_MIGRATE
    dwSize As Long ' Size of this structure
    dpnidNewHost As Long 'DPNID ' DPNID of new Host player
    pvPlayerContext As LongPtr ' Player context value
End Type

Public Type DPNMSG_INDICATE_CONNECT
    dwSize As Long ' Size of this structure
    pvUserConnectData As LongPtr ' Connecting player data
    dwUserConnectDataSize As Long ' Size (in bytes) of pvUserConnectData
    pvReplyData As LongPtr ' Connection reply data
    dwReplyDataSize As Long ' Size (in bytes) of pvReplyData
    pvReplyContext As LongPtr ' Buffer context for pvReplyData
    pvPlayerContext As LongPtr ' Player context preset
    pAddressPlayer As IDirectPlay8Address ' Address of connecting player
    pAddressDevice As IDirectPlay8Address ' Address of device receiving connect attempt
End Type

Public Type DPNMSG_INDICATED_CONNECT_ABORTED
    dwSize As Long ' Size of this structure
    pvPlayerContext As LongPtr ' Player context preset from DPNMSG_INDICATE_CONNECT
End Type

Public Type DPNMSG_PEER_INFO
    dwSize As Long ' Size of this structure
    dpnidPeer As Long 'DPNID ' DPNID of peer
    pvPlayerContext As LongPtr ' Player context value
End Type

Public Type DPNMSG_RECEIVE
    dwSize As Long ' Size of this structure
    dpnidSender As Long 'DPNID ' DPNID of sending player
    pvPlayerContext As LongPtr ' Player context value of sending player
    pReceiveData As LongPtr ' Received data
    dwReceiveDataSize As Long ' Size (in bytes) of pReceiveData
    hBufferHandle As Long ' Buffer handle for pReceiveData
    ' Fields added for DirectX 9
    dwReceiveFlags As Long ' Flags describing how message was received
End Type

Public Type DPNMSG_REMOVE_PLAYER_FROM_GROUP
    dwSize As Long ' Size of this structure
    dpnidGroup As Long 'DPNID ' DPNID of group
    pvGroupContext As LongPtr ' Group context value
    dpnidPlayer As Long 'DPNID ' DPNID of deleted player
    pvPlayerContext As LongPtr ' Player context value
End Type

Public Type DPNMSG_RETURN_BUFFER
    dwSize As Long ' Size of this structure
    hResultCode As Long ' Return value of operation
    pvBuffer As LongPtr ' Buffer being returned
    pvUserContext As LongPtr ' Context associated with buffer
End Type

Public Type DPNMSG_SEND_COMPLETE
    dwSize As Long ' Size of this structure
    hAsyncOp As Long ' DirectPlay8 Async operation handle
    pvUserContext As LongPtr ' User context supplied at Send/SendTo
    hResultCode As Long ' HRESULT of send
    dwSendTime As Long ' Send time in ms
    ' Fields added for DirectX 9
    dwFirstFrameRTT As Long ' RTT of the first frame in the message
    dwFirstFrameRetryCount As Long ' Retry count of the first frame
    dwSendCompleteFlags As Long ' Flags describing how message was sent
    pBuffers As DPN_BUFFER_DESC ' Pointer to array of buffers sent, if DirectPlay did not make a copy
    dwNumBuffers As Long ' Number of buffers in previous array
End Type

Public Type DPNMSG_SERVER_INFO
    dwSize As Long ' Size of this structure
    dpnidServer As Long 'DPNID ' DPNID of server
    pvPlayerContext As LongPtr ' Player context value
End Type

Public Type DPNMSG_TERMINATE_SESSION
    dwSize As Long ' Size of this structure
    hResultCode As Long ' Reason
    pvTerminateData As LongPtr ' Data passed from Host/Server
    dwTerminateDataSize As Long ' Size (in bytes) of pvTerminateData
End Type

Public Type DPNMSG_CREATE_THREAD
    dwSize As Long ' Size of this structure
    dwFlags As Long ' Flags describing this thread
    dwProcessorNum As Long ' Index of processor to which thread is bound
    pvUserContext As LongPtr ' Thread context value
End Type

Public Type DPNMSG_DESTROY_THREAD
    dwSize As Long ' Size of this structure
    dwProcessorNum As Long ' Index of processor to which thread was bound
    pvUserContext As LongPtr ' Thread context value
End Type

Public Type DPNMSG_NAT_RESOLVER_QUERY
    dwSize As Long ' Size of this structure.
    pAddressSender As IDirectPlay8Address ' Address of client that sent the query
    pAddressDevice As IDirectPlay8Address ' Address of device on which query was received
    pwszUserString As LongPtr ' User specified string, or NULL if none
End Type

Public Const _DPN_FACILITY_CODE  = &H015
Public Const _DPNHRESULT_BASE  = &H8000&

Public Enum DPNERROR
    DPNSUCCESS_EQUAL = &H158005 ' MAKE_HRESULT(0, _DPN_FACILITY_CODE, (&H5 + _DPNHRESULT_BASE ))
    DPNSUCCESS_NOPLAYERSINGROUP = &H158008 ' MAKE_HRESULT(0, _DPN_FACILITY_CODE, (&H8 + _DPNHRESULT_BASE ))  ' added for DirectX 9
    DPNSUCCESS_NOTEQUAL = &H15800A 'MAKE_HRESULT(0, _DPN_FACILITY_CODE, (&H0A + _DPNHRESULT_BASE ))
    DPNSUCCESS_PENDING = &H15800E ' MAKE_HRESULT(0, _DPN_FACILITY_CODE, (&H0e + _DPNHRESULT_BASE ))
    
    DPNERR_ABORTED = &H80158030
    DPNERR_ADDRESSING = &H80158040
    DPNERR_ALREADYCLOSING = &H80158050
    DPNERR_ALREADYCONNECTED = &H80158060
    DPNERR_ALREADYDISCONNECTING = &H80158070
    DPNERR_ALREADYINITIALIZED = &H80158080
    DPNERR_ALREADYREGISTERED = &H80158090
    DPNERR_BUFFERTOOSMALL = &H80158100
    DPNERR_CANNOTCANCEL = &H80158110
    DPNERR_CANTCREATEGROUP = &H80158120
    DPNERR_CANTCREATEPLAYER = &H80158130
    DPNERR_CANTLAUNCHAPPLICATION = &H80158140
    DPNERR_CONNECTING = &H80158150
    DPNERR_CONNECTIONLOST = &H80158160
    DPNERR_CONVERSION = &H80158170
    DPNERR_DATATOOLARGE = &H80158175
    DPNERR_DOESNOTEXIST = &H80158180
    DPNERR_DPNSVRNOTAVAILABLE = &H80158185
    DPNERR_DUPLICATECOMMAND = &H80158190
    DPNERR_ENDPOINTNOTRECEIVING = &H80158200
    DPNERR_ENUMQUERYTOOLARGE = &H80158210
    DPNERR_ENUMRESPONSETOOLARGE = &H80158220
    DPNERR_EXCEPTION = &H80158230
    DPNERR_GROUPNOTEMPTY = &H80158240
    DPNERR_HOSTING = &H80158250
    DPNERR_HOSTREJECTEDCONNECTION = &H80158260
    DPNERR_HOSTTERMINATEDSESSION = &H80158270
    DPNERR_INCOMPLETEADDRESS = &H80158280
    DPNERR_INVALIDADDRESSFORMAT = &H80158290
    DPNERR_INVALIDAPPLICATION = &H80158300
    DPNERR_INVALIDCOMMAND = &H80158310
    DPNERR_INVALIDDEVICEADDRESS = &H80158320
    DPNERR_INVALIDENDPOINT = &H80158330
    DPNERR_INVALIDFLAGS = &H80158340
    DPNERR_INVALIDGROUP = &H80158350
    DPNERR_INVALIDHANDLE = &H80158360
    DPNERR_INVALIDHOSTADDRESS = &H80158370
    DPNERR_INVALIDINSTANCE = &H80158380
    DPNERR_INVALIDINTERFACE = &H80158390
    DPNERR_INVALIDOBJECT = &H80158400
    DPNERR_INVALIDPASSWORD = &H80158410
    DPNERR_INVALIDPLAYER = &H80158420
    DPNERR_INVALIDPRIORITY = &H80158430
    DPNERR_INVALIDSTRING = &H80158440
    DPNERR_INVALIDURL = &H80158450
    DPNERR_INVALIDVERSION = &H80158460
    DPNERR_NOCAPS = &H80158470
    DPNERR_NOCONNECTION = &H80158480
    DPNERR_NOHOSTPLAYER = &H80158490
    DPNERR_NOMOREADDRESSCOMPONENTS = &H80158500
    DPNERR_NORESPONSE = &H80158510
    DPNERR_NOTALLOWED = &H80158520
    DPNERR_NOTHOST = &H80158530
    DPNERR_NOTREADY = &H80158540
    DPNERR_NOTREGISTERED = &H80158550
    DPNERR_PLAYERALREADYINGROUP = &H80158560
    DPNERR_PLAYERLOST = &H80158570
    DPNERR_PLAYERNOTINGROUP = &H80158580
    DPNERR_PLAYERNOTREACHABLE = &H80158590
    DPNERR_SENDTOOLARGE = &H80158600
    DPNERR_SESSIONFULL = &H80158610
    DPNERR_TABLEFULL = &H80158620
    DPNERR_TIMEDOUT = &H80158630
    DPNERR_UNINITIALIZED = &H80158640
    DPNERR_USERCANCEL = &H80158650
    
    DPNERR_GENERIC = E_FAIL
    DPNERR_INVALIDPARAM = E_INVALIDARG
    DPNERR_INVALIDPOINTER = E_POINTER
    DPNERR_NOINTERFACE = E_NOINTERFACE
    DPNERR_OUTOFMEMORY = E_OUTOFMEMORY
    DPNERR_PENDING = DPNSUCCESS_PENDING
    DPNERR_UNSUPPORTED = E_NOTIMPL
End Enum



'dplobby8.h

Public Function CLSID_DirectPlay8LobbiedApplication() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H667955ad, &H6b3b, &H43ca, &Hb9, &H49, &Hbc, &H69, &Hb5, &Hba, &Hff, &H7f)
CLSID_DirectPlay8LobbiedApplication = iid
End Function
Public Function CLSID_DirectPlay8LobbyClient() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3b2b6775, &H70b6, &H45af, &H8d, &Hea, &Ha2, &H9, &Hc6, &H95, &H59, &Hf3)
CLSID_DirectPlay8LobbyClient = iid
End Function
Public Function IID_IDirectPlay8LobbiedApplication() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H819074a3, &H16c, &H11d3, &Hae, &H14, &H0, &H60, &H97, &Hb0, &H14, &H11)
IID_IDirectPlay8LobbiedApplication = iid
End Function
Public Function IID_IDirectPlay8LobbyClient() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H819074a2, &H16c, &H11d3, &Hae, &H14, &H0, &H60, &H97, &Hb0, &H14, &H11)
IID_IDirectPlay8LobbyClient = iid
End Function

Public Enum DPlayLobbyMsgIds
    DPL_MSGID_LOBBY = &H8000&
    DPL_MSGID_RECEIVE = (&H0001 Or DPL_MSGID_LOBBY)
    DPL_MSGID_CONNECT = (&H0002 Or DPL_MSGID_LOBBY)
    DPL_MSGID_DISCONNECT = (&H0003 Or DPL_MSGID_LOBBY)
    DPL_MSGID_SESSION_STATUS = (&H0004 Or DPL_MSGID_LOBBY)
    DPL_MSGID_CONNECTION_SETTINGS = (&H0005 Or DPL_MSGID_LOBBY)
End Enum

Public Enum DPLHANDLE
    DPLHANDLE_ALLCONNECTIONS = &HFFFFFFFF
End Enum

Public Enum DPLSESSION
'  The associated game session has suceeded in connecting / hosting
    DPLSESSION_CONNECTED = &H0001
'  The associated game session failed connecting / hosting
    DPLSESSION_COULDNOTCONNECT = &H0002
'  The associated game session has disconnected
    DPLSESSION_DISCONNECTED = &H0003
'  The associated game session has terminated
    DPLSESSION_TERMINATED = &H0004
'  The associated game session's host has migrated
    DPLSESSION_HOSTMIGRATED = &H0005
'  The associated game session's host has migrated to the local client
    DPLSESSION_HOSTMIGRATEDHERE = &H0006
End Enum

Public Enum DPLAVAILABLE
    ' Do not automatically make the lobby app unavailable when a connection is established
    DPLAVAILABLE_ALLOWMULTIPLECONNECT = &H0001
End Enum

Public Enum DPLCONNECT
'  Launch a new instance of the application to connect to
    DPLCONNECT_LAUNCHNEW = &H0001
'  Launch a new instance of the application if one is not waiting
    DPLCONNECT_LAUNCHNOTFOUND = &H0002
End Enum

Public Enum DPLCONNECTSETTINGS
    ' When starting the associated game session, start it as a host
    DPLCONNECTSETTINGS_HOST = &H0001
End Enum

Public Enum DPLINITIALIZE
    '  Disable parameter validation
    DPLINITIALIZE_DISABLEPARAMVAL = &H0001
End Enum

Public Type DPL_APPLICATION_INFO
    guidApplication As UUID ' GUID of the application
    pwszApplicationName As LongPtr ' Name of the application
    dwNumRunning As Long ' # of instances of this application running
    dwNumWaiting As Long ' # of instances of this application waiting 
    dwFlags As Long ' Flags
End Type

Public Type DPL_CONNECTION_SETTINGS
    dwSize As Long ' Size of this structure
    dwFlags As DPLCONNECTSETTINGS ' Connection settings flags (DPLCONNECTSETTINGS_...)
    dpnAppDesc As DPN_APPLICATION_DESC ' Application desc for the associated DirectPlay session
    pdp8HostAddress As IDirectPlay8Address ' Address of host to connect to
    ppdp8DeviceAddresses As LongPtr 'IDirectPlay8Address** ' Address of device to connect from / host on
    cNumDeviceAddresses As Long ' # of addresses specified in ppdp8DeviceAddresses
    pwszPlayerName As LongPtr ' Name to give the player
End Type

Public Type DPL_CONNECT_INFO
    dwSize As Long ' Size of this structure
    dwFlags As DPLCONNECT ' Flags (DPLCONNECT_...)
    guidApplication As UUID ' GUID of application to launch
    pdplConnectionSettings As LongPtr 'PDPL_CONNECTION_SETTINGS
    ' Settings application should use
    pvLobbyConnectData As LongPtr ' User defined data block
    dwLobbyConnectDataSize As Long
    ' Size of user defined data block
End Type

Public Type DPL_PROGRAM_DESC
    dwSize As Long
    dwFlags As Long
    guidApplication As UUID ' Application GUID
    pwszApplicationName As LongPtr ' Unicode application name
    pwszCommandLine As LongPtr ' Unicode command line arguments
    pwszCurrentDirectory As LongPtr ' Unicode current directory
    pwszDescription As LongPtr ' Unicode application description
    pwszExecutableFilename As LongPtr ' Unicode filename of application executable
    pwszExecutablePath As LongPtr ' Unicode path of application executable
    pwszLauncherFilename As LongPtr ' Unicode filename of launcher executable
    pwszLauncherPath As LongPtr ' Unicode path of launcher executable
End Type

Public Type DPL_MESSAGE_CONNECT
    dwSize As Long ' Size of this structure
    hConnectId As Long ' Handle of new connection
    pdplConnectionSettings As LongPtr 'PDPL_CONNECTION_SETTINGS ' Connection settings for this connection
    pvLobbyConnectData As LongPtr ' User defined lobby data block
    dwLobbyConnectDataSize As Long ' Size of user defined lobby data block
    pvConnectionContext As LongPtr ' Context value for this connection (user set)
End Type

Public Type DPL_MESSAGE_CONNECTION_SETTINGS
    dwSize As Long ' Size of this structure
    hSender As Long ' Handle of the connection for these settings
    pdplConnectionSettings As LongPtr 'PDPL_CONNECTION_SETTINGS ' Connection settings
    pvConnectionContext As LongPtr ' Context value for this connection
End Type

Public Type DPL_MESSAGE_DISCONNECT
    dwSize As Long ' Size of this structure
    hDisconnectId As Long ' Handle of the connection that was terminated
    hrReason As Long ' Reason the connection was broken
    pvConnectionContext As LongPtr ' Context value for this connection
End Type

Public Type DPL_MESSAGE_RECEIVE
    dwSize As Long ' Size of this structure
    hSender As Long ' Handle of the connection that is from
    pBuffer As LongPtr ' Contents of the message
    dwBufferSize As Long ' Size of the message context 
    pvConnectionContext As LongPtr ' Context value for this connection
End Type

Public Type DPL_MESSAGE_SESSION_STATUS
    dwSize As Long ' Size of this structure
    hSender As Long ' Handle of the connection that this is from
    dwStatus As DPLSESSION ' Status (DPLSESSION_...)
    pvConnectionContext As LongPtr ' Context value for this connection
End Type



'dpnathlp.h

Public Function CLSID_DirectPlayNATHelpUPnP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb9c2e9c4, &H68c1, &H4d42, &Ha7, &Ha1, &He7, &H6a, &H26, &H98, &H2a, &Hd6)
CLSID_DirectPlayNATHelpUPnP = iid
End Function
Public Function CLSID_DirectPlayNATHelpPAST() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H963ab779, &H16a1, &H477c, &Ha3, &H6d, &Hcb, &H5e, &H71, &H19, &H38, &Hf7)
CLSID_DirectPlayNATHelpPAST = iid
End Function
Public Function IID_IDirectPlayNATHelp() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H154940b6, &H2278, &H4a2f, &H91, &H1, &H9b, &Ha9, &Hf4, &H31, &Hf6, &H3)
IID_IDirectPlayNATHelp = iid
End Function

Public Const DPNH_MAX_SIMULTANEOUS_PORTS = 16

Public Enum DPNHINITIALIZE
	DPNHINITIALIZE_DISABLEGATEWAYSUPPORT = &H01  ' disables Internet gateway traversal support (cannot be specified with DPNHINITIALIZE_DISABLELOCALFIREWALLSUPPORT)
	DPNHINITIALIZE_DISABLELOCALFIREWALLSUPPORT = &H02  ' disables local firewall traversal support (cannot be specified with DPNHINITIALIZE_DISABLEGATEWAYSUPPORT)
End Enum

Public Enum DPNHGETCAPS
    DPNHGETCAPS_UPDATESERVERSTATUS = &H01    ' automatically extend expiring leases and detect changes in server status
End Enum

Public Enum DPNHREGISTERPORTS
    DPNHREGISTERPORTS_TCP = &H01  ' request TCP ports instead of UDP
    DPNHREGISTERPORTS_FIXEDPORTS = &H02  ' asks the server to use the same port numbers on the public interface
    DPNHREGISTERPORTS_SHAREDPORTS = &H04  ' requests that the server allow the UDP fixed ports to be shared with other clients (must be specified with DPNHREGISTERPORTS_FIXEDPORTS and cannot be specified with DPNHREGISTERPORTS_TCP)
End Enum

Public Enum DPNHGETREGISTEREDADDRESSES
    DPNHGETREGISTEREDADDRESSES_LOCALFIREWALLREMAPONLY = &H01    ' retrieve the public address for the local firewall only, even if mapped on remote Internet gateway
End Enum

Public Enum DPNHQUERYADDRESS
    DPNHQUERYADDRESS_TCP = &H01  ' request a TCP port instead of UDP
    DPNHQUERYADDRESS_CACHEFOUND = &H02  ' cache the discovered address if found
    DPNHQUERYADDRESS_CACHENOTFOUND = &H04  ' cache the fact that no address was found, if that is the case
    DPNHQUERYADDRESS_CHECKFORPRIVATEBUTUNMAPPED = &H08  ' determine if the address is behind the same Internet gateway, but not mapped on that Internet gateway
End Enum

Public Enum DPNHCAPSFLAG
    DPNHCAPSFLAG_LOCALFIREWALLPRESENT = &H01  ' at least one network connection has a local firewall present
    DPNHCAPSFLAG_GATEWAYPRESENT = &H02  ' at least one network connection has an Internet gateway present
    DPNHCAPSFLAG_GATEWAYISLOCAL = &H04  ' a detected Internet gateway is local (i.e. the public address is another network interface on the same machine)
    DPNHCAPSFLAG_PUBLICADDRESSAVAILABLE = &H08  ' at least one server has a valid public address for registered mappings
    DPNHCAPSFLAG_NOTALLSUPPORTACTIVENOTIFY = &H10  ' at least one available server does not support an active-notification mechanisms and must be polled
End Enum

Public Type DPNHCAPS
    dwSize As Long ' size of this structure, must be filled in prior to calling GetCaps
    dwFlags As Long ' flags indicating capabilities of Internet gateway server(s)
    dwNumRegisteredPorts As Long ' number of ports currently registered, including multiple ports registered at the same time (so this may not be equal to the number of DPNHHANDLEs given out)
    dwMinLeaseTimeRemaining As Long ' approximate time remaining, in milliseconds, for the lease that will expire soonest
    dwRecommendedGetCapsInterval As Long ' recommended time, in milliseconds, after which GetCaps should be called again (with DPNHGETCAPS_UPDATESERVERSTATUS flag)
End Type

Public Enum DPNHADDRESSTYPE
    DPNHADDRESSTYPE_TCP = &H01  ' the mappings are for TCP ports instead of UDP
    DPNHADDRESSTYPE_FIXEDPORTS = &H02  ' the mappings are for ports which are the same on the Internet gateway
    DPNHADDRESSTYPE_SHAREDPORTS = &H04  ' the mappings are for shared UDP fixed ports
    DPNHADDRESSTYPE_LOCALFIREWALL = &H08  ' the addresses are opened on a local firewall
    DPNHADDRESSTYPE_GATEWAY = &H10  ' the addresses are registered with an Internet gateway
    DPNHADDRESSTYPE_GATEWAYISLOCAL = &H20  ' the Internet gateway is local (i.e. the public address is another network interface on the same machine)
End Enum

Public Delegate Function PFN_DIRECTPLAYNATHELPCREATE (pIID As UUID, ppvInterface As Any) As Long








End Module

#End If