'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

'mswmdm.h

    
[InterfaceId("EC3B0663-0951-460A-9A80-0DCEED3C043C")]
[OleAutomation(False)]
Interface IWMDMMetaData Extends stdole.IUnknown
    Sub AddItem(ByVal type As WMDM_TAG_DATATYPE, ByVal pwszTagName As LongPtr, ByRef pValue As Any, ByVal iLength As Long)
    Sub QueryByName(ByVal pwszTagName As LongPtr, ByRef pType As WMDM_TAG_DATATYPE, ByRef pValue As LongPtr, ByRef pcbLength As Long)
    Sub QueryByIndex(ByVal iIndex As Long, ByRef ppwszName As LongPtr, ByRef pType As WMDM_TAG_DATATYPE, ByRef pValue As LongPtr, ByRef pcbLength As Long)
    Sub GetItemCount(ByRef iCount As Long)
End Interface

[InterfaceId("1DCB3A00-33ED-11D3-8470-00C04F79DBC0")]
[OleAutomation(False)]
Interface IWMDeviceManager Extends stdole.IUnknown
    Sub GetRevision(ByRef pdwRevision As Long)
    Sub GetDeviceCount(ByRef pdwCount As Long)
    Sub EnumDevices(ByRef ppEnumDevice As IWMDMEnumDevice)
End Interface

[InterfaceId("923E5249-8731-4C5B-9B1C-B8B60B6E46AF")]
[OleAutomation(False)]
Interface IWMDeviceManager2 Extends IWMDeviceManager
    Sub GetDeviceFromCanonicalName(ByVal pwszCanonicalName As LongPtr, ByRef ppDevice As IWMDMDevice)
    Sub EnumDevices2(ByRef ppEnumDevice As IWMDMEnumDevice)
    Sub Reinitialize()
End Interface

[InterfaceId("AF185C41-100D-46ED-BE2E-9CE8C44594EF")]
[OleAutomation(False)]
Interface IWMDeviceManager3 Extends IWMDeviceManager2
    Sub SetDeviceEnumPreference(ByVal dwEnumPref As WMDMDeviceEnumFlags)
End Interface

[InterfaceId("1DCB3A07-33ED-11D3-8470-00C04F79DBC0")]
[OleAutomation(False)]
Interface IWMDMStorageGlobals Extends stdole.IUnknown
    Sub GetCapabilities(ByRef pdwCapabilities As WMDMStgCaps)
    Sub GetSerialNumber(ByRef pSerialNum As WMDMID, abMac As Any)
    Sub GetTotalSize(ByRef pdwTotalSizeLow As Long, ByRef pdwTotalSizeHigh As Long)
    Sub GetTotalFree(ByRef pdwFreeLow As Long, ByRef pdwFreeHigh As Long)
    Sub GetTotalBad(ByRef pdwBadLow As Long, ByRef pdwBadHigh As Long)
    Sub GetStatus(ByRef pdwStatus As WMDMDeviceStatusFlags)
    Sub Initialize(ByVal fuMode As WMDMModes, ByVal pProgress As IWMDMProgress)
End Interface

[InterfaceId("1DCB3A06-33ED-11D3-8470-00C04F79DBC0")]
[OleAutomation(False)]
Interface IWMDMStorage Extends stdole.IUnknown
    Sub SetAttributes(ByVal dwAttributes As WMDMStgAttributes, ByRef pFormat As Any)
    Sub GetStorageGlobals(ByRef ppStorageGlobals As IWMDMStorageGlobals)
    Sub GetAttributes(ByRef pdwAttributes As WMDMStgAttributes, ByRef pFormat As Any)
    Sub GetName(ByVal pwszName As LongPtr, ByVal nMaxChars As Long)
    Sub GetDate(ByRef pDateTimeUTC As WMDMDATETIME)
    Sub GetSize(ByRef pdwSizeLow As Long, ByRef pdwSizeHigh As Long)
    Sub GetRights(ByRef ppRights As LongPtr, ByRef pnRightsCount As Long, abMac As Any)
    Sub EnumStorage(ByRef pEnumStorage As IWMDMEnumStorage)
    Sub SendOpaqueCommand(ByRef pCommand As OPAQUECOMMAND)
End Interface

[InterfaceId("1ED5A144-5CD5-4683-9EFF-72CBDB2D9533")]
[OleAutomation(False)]
Interface IWMDMStorage2 Extends IWMDMStorage
    Sub GetStorage(ByVal pszStorageName As LongPtr, ByRef ppStorage As IWMDMStorage)
    Sub SetAttributes2(ByVal dwAttributes As WMDMStgAttributes, ByVal dwAttributesEx As Long, ByRef pFormat As Any, ByRef pVideoFormat As WAVEFORMATEX)
    #If WDL_NO_DIRECTX = 0 Then
    Sub GetAttributes2(ByRef pdwAttributes As WMDMStgAttributes, ByRef pdwAttributesEx As Long, ByRef pFormat As Any, ByRef pVideoFormat As VIDEOINFOHEADER)
    #Else
    Sub GetAttributes2(ByRef pdwAttributes As WMDMStgAttributes, ByRef pdwAttributesEx As Long, ByRef pFormat As Any, ByRef pVideoFormat As Any)
    #End If
End Interface

[InterfaceId("97717EEA-926A-464E-96A4-247B0216026E")]
[OleAutomation(False)]
Interface IWMDMStorage3 Extends IWMDMStorage2
    Sub GetMetadata(ByRef ppMetadata As IWMDMMetaData)
    Sub SetMetadata(ByVal pMetaData As IWMDMMetaData)
    Sub CreateEmptyMetadataObject(ByRef ppMetadata As IWMDMMetaData)
    Sub SetEnumPreference(ByRef pMode As WMDM_STORAGE_ENUM_MODE, ByVal nViews As Long, ByRef pViews As WMDMMetadataView)
End Interface

[InterfaceId("C225BAC5-A03A-40B8-9A23-91CF478C64A6")]
[OleAutomation(False)]
Interface IWMDMStorage4 Extends IWMDMStorage3
    Sub SetReferences(ByVal dwRefs As Long, ByRef ppIWMDMStorage As IWMDMStorage)
    Sub GetReferences(ByRef pdwRefs As Long, ByRef pppIWDMDStorage As LongPtr)
    Sub GetRightsWithProgress(ByVal pIProgressCallback As IWMDMProgress3, ByRef ppRights As LongPtr, ByRef pnRightsCount As Long)
    Sub GetSpecifiedMetadata(ByVal cProperties As Long, ByRef ppwszPropNames As LongPtr, ByRef ppMetadata As IWMDMMetaData)
    Sub FindStorage(ByVal findScope As WMDM_FIND_SCOPE, ByVal pwszUniqueID As LongPtr, ByRef ppStorage As IWMDMStorage)
    Sub GetParent(ByRef ppStorage As IWMDMStorage)
End Interface

[InterfaceId("1DCB3A0B-33ED-11D3-8470-00C04F79DBC0")]
[OleAutomation(False)]
Interface IWMDMOperation Extends stdole.IUnknown
    Sub BeginRead()
    Sub BeginWrite()
    Sub GetObjectName(ByVal pwszName As LongPtr, ByVal nMaxChars As Long)
    Sub SetObjectName(ByVal pwszName As LongPtr, ByVal nMaxChars As Long)
    Sub GetObjectAttributes(ByRef pdwAttributes As WMDMStgAttributes, ByRef pFormat As Any)
    Sub SetObjectAttributes(ByVal dwAttributes As WMDMStgAttributes, ByRef pFormat As Any)
    Sub GetObjectTotalSize(ByRef pdwSize As Long, ByRef pdwSizeHigh As Long)
    Sub SetObjectTotalSize(ByVal dwSize As Long, ByVal dwSizeHigh As Long)
    Sub TransferObjectData(ByRef pData As Any, ByRef pdwSize As Long, abMac As Any)
    Sub end(ByRef phCompletionCode As Long /* HRESULT */, ByVal pNewObject As IUnknown)
End Interface

[InterfaceId("33445B48-7DF7-425C-AD8F-0FC6D82F9F75")]
[OleAutomation(False)]
Interface IWMDMOperation2 Extends IWMDMOperation
    Sub SetObjectAttributes2(ByVal dwAttributes As WMDMStgAttributes, ByVal dwAttributesEx As Long, ByRef pFormat As Any, ByRef pVideoFormat As Any)
    Sub GetObjectAttributes2(ByRef pdwAttributes As WMDMStgAttributes, ByRef pdwAttributesEx As Long, ByRef pFormat As Any, ByRef pVideoFormat As Any)
End Interface

[InterfaceId("D1F9B46A-9CA8-46D8-9D0F-1EC9BAE54919")]
[OleAutomation(False)]
Interface IWMDMOperation3 Extends IWMDMOperation
    Sub TransferObjectDataOnClearChannel(ByRef pData As Any, ByRef pdwSize As Long)
End Interface

[InterfaceId("1DCB3A0C-33ED-11D3-8470-00C04F79DBC0")]
[OleAutomation(False)]
Interface IWMDMProgress Extends stdole.IUnknown
    Sub Begin(ByVal dwEstimatedTicks As Long)
    Sub Progress(ByVal dwTranspiredTicks As Long)
    Sub end()
End Interface

[InterfaceId("3A43F550-B383-4E92-B04A-E6BBC660FEFC")]
[OleAutomation(False)]
Interface IWMDMProgress2 Extends IWMDMProgress
    Sub End2(ByVal hrCompletionCode As Long /* HRESULT */)
End Interface

[InterfaceId("21DE01CB-3BB4-4929-B21A-17AF3F80F658")]
[OleAutomation(False)]
Interface IWMDMProgress3 Extends IWMDMProgress2
    #If Win64 Then
    Sub Begin3(EventId As UUID, ByVal dwEstimatedTicks As Long, ByRef pContext As OPAQUECOMMAND)
    Sub Progress3(EventId As UUID, ByVal dwTranspiredTicks As Long, ByRef pContext As OPAQUECOMMAND)
    Sub End3(EventId As UUID, ByVal hrCompletionCode As Long /* HRESULT */, ByRef pContext As OPAQUECOMMAND)
    #Else
    Sub Begin3(ByVal EventId1 As Long, ByVal EventId2 As Long, ByVal EventId3 As Long, ByVal EventId4 As Long, ByVal dwEstimatedTicks As Long, ByRef pContext As OPAQUECOMMAND)
    Sub Progress3(ByVal EventId1 As Long, ByVal EventId2 As Long, ByVal EventId3 As Long, ByVal EventId4 As Long, ByVal dwTranspiredTicks As Long, ByRef pContext As OPAQUECOMMAND)
    Sub End3(ByVal EventId1 As Long, ByVal EventId2 As Long, ByVal EventId3 As Long, ByVal EventId4 As Long, ByVal hrCompletionCode As Long /* HRESULT */, ByRef pContext As OPAQUECOMMAND)
    #End If
End Interface

[InterfaceId("1DCB3A02-33ED-11D3-8470-00C04F79DBC0")]
[OleAutomation(False)]
Interface IWMDMDevice Extends stdole.IUnknown
    Sub GetName(ByVal pwszName As LongPtr, ByVal nMaxChars As Long)
    Sub GetManufacturer(ByVal pwszName As LongPtr, ByVal nMaxChars As Long)
    Sub GetVersion(ByRef pdwVersion As Long)
    Sub GetType(ByRef pdwType As WMDMDeviceTypeFlags)
    Sub GetSerialNumber(ByRef pSerialNumber As WMDMID, abMac As Any)
    Sub GetPowerSource(ByRef pdwPowerSource As WMDMDevicePowerFlags, ByRef pdwPercentRemaining As Long)
    Sub GetStatus(ByRef pdwStatus As WMDMDeviceStatusFlags)
    Sub GetDeviceIcon(ByRef hIcon As Long)
    Sub EnumStorage(ByRef ppEnumStorage As IWMDMEnumStorage)
    Sub GetFormatSupport(ByRef ppFormatEx As LongPtr, ByRef pnFormatCount As Long, ByRef pppwszMimeType As LongPtr, ByRef pnMimeTypeCount As Long)
    Sub SendOpaqueCommand(ByRef pCommand As OPAQUECOMMAND)
End Interface

[InterfaceId("E34F3D37-9D67-4FC1-9252-62D28B2F8B55")]
[OleAutomation(False)]
Interface IWMDMDevice2 Extends IWMDMDevice
    Sub GetStorage(ByVal pszStorageName As LongPtr, ByRef ppStorage As IWMDMStorage)
    Sub GetFormatSupport2(ByVal dwFlags As WMDMGetFmtSupport2Flags, ByRef ppAudioFormatEx As Any, ByRef pnAudioFormatCount As Long, ByRef ppVideoFormatEx As Any, ByRef pnVideoFormatCount As Long, ByRef ppFileType As Any, ByRef pnFileTypeCount As Long)
    Sub GetSpecifyPropertyPages(ByRef ppSpecifyPropPages As ISpecifyPropertyPages, ByRef pppUnknowns As LongPtr, ByRef pcUnks As Long)
    Sub GetCanonicalName(ByVal pwszPnPName As LongPtr, ByVal nMaxChars As Long)
End Interface

[InterfaceId("6C03E4FE-05DB-4DDA-9E3C-06233A6D5D65")]
[OleAutomation(False)]
Interface IWMDMDevice3 Extends IWMDMDevice2
    Sub GetProperty(ByVal pwszPropName As LongPtr, ByRef pValue As Variant)
    Sub SetProperty(ByVal pwszPropName As LongPtr, ByRef pValue As Variant)
    Sub GetFormatCapability(ByVal Format As WMDM_FORMATCODE, ByRef pFormatSupport As WMDM_FORMAT_CAPABILITY)
    Sub DeviceIoControl(ByVal dwIoControlCode As Long, ByRef lpInBuffer As Any, ByVal nInBufferSize As Long, ByRef lpOutBuffer As Any, ByRef pnOutBufferSize As Long)
    Sub FindStorage(ByVal findScope As WMDM_FIND_SCOPE, ByVal pwszUniqueID As LongPtr, ByRef ppStorage As IWMDMStorage)
End Interface

[InterfaceId("82AF0A65-9D96-412C-83E5-3C43E4B06CC7")]
[OleAutomation(False)]
Interface IWMDMDeviceSession Extends stdole.IUnknown
    Sub BeginSession(ByVal type As WMDM_SESSION_TYPE, ByRef pCtx As Any, ByVal dwSizeCtx As Long)
    Sub EndSession(ByVal type As WMDM_SESSION_TYPE, ByRef pCtx As Any, ByVal dwSizeCtx As Long)
End Interface

[InterfaceId("1DCB3A01-33ED-11D3-8470-00C04F79DBC0")]
[OleAutomation(False)]
Interface IWMDMEnumDevice Extends stdole.IUnknown
    [PreserveSig]
    Function Next(ByVal celt As Long, ByRef ppDevice As IWMDMDevice, ByRef pceltFetched As Long) As Long
    Sub Skip(ByVal celt As Long, ByRef pceltFetched As Long)
    Sub Reset()
    Sub Clone(ByRef ppEnumDevice As IWMDMEnumDevice)
End Interface

[InterfaceId("1DCB3A04-33ED-11D3-8470-00C04F79DBC0")]
[OleAutomation(False)]
Interface IWMDMDeviceControl Extends stdole.IUnknown
    Sub GetStatus(ByRef pdwStatus As WMDMDeviceStatusFlags)
    Sub GetCapabilities(ByRef pdwCapabilitiesMask As WMDMDeviceCapFlags)
    Sub Play()
    Sub Record(ByRef pFormat As WAVEFORMATEX)
    Sub Pause()
    Sub Resume()
    Sub Stop()
    Sub Seek(ByVal fuMode As WMDMSeek, ByVal nOffset As Long)
End Interface

[InterfaceId("1DCB3A05-33ED-11D3-8470-00C04F79DBC0")]
[OleAutomation(False)]
Interface IWMDMEnumStorage Extends stdole.IUnknown
    [PreserveSig]
    Function Next(ByVal celt As Long, ByRef ppStorage As IWMDMStorage, ByRef pceltFetched As Long) As Long
    Sub Skip(ByVal celt As Long, ByRef pceltFetched As Long)
    Sub Reset()
    Sub Clone(ByRef ppEnumStorage As IWMDMEnumStorage)
End Interface

[InterfaceId("1DCB3A08-33ED-11D3-8470-00C04F79DBC0")]
[OleAutomation(False)]
Interface IWMDMStorageControl Extends stdole.IUnknown
    Sub Insert(ByVal fuMode As WMDMModes, ByVal pwszFile As LongPtr, ByVal pOperation As IWMDMOperation, ByVal pProgress As IWMDMProgress, ByRef ppNewObject As IWMDMStorage)
    Sub Delete(ByVal fuMode As WMDMModes, ByVal pProgress As IWMDMProgress)
    Sub Rename(ByVal fuMode As WMDMModes, ByVal pwszNewName As LongPtr, ByVal pProgress As IWMDMProgress)
    Sub Read(ByVal fuMode As WMDMModes, ByVal pwszFile As LongPtr, ByVal pProgress As IWMDMProgress, ByVal pOperation As IWMDMOperation)
    Sub Move(ByVal fuMode As WMDMModes, ByVal pTargetObject As IWMDMStorage, ByVal pProgress As IWMDMProgress)
End Interface

[InterfaceId("972C2E88-BD6C-4125-8E09-84F837E637B6")]
[OleAutomation(False)]
Interface IWMDMStorageControl2 Extends IWMDMStorageControl
    Sub Insert2(ByVal fuMode As WMDMModes, ByVal pwszFileSource As LongPtr, ByVal pwszFileDest As LongPtr, ByVal pOperation As IWMDMOperation, ByVal pProgress As IWMDMProgress, ByVal pUnknown As IUnknown, ByRef ppNewObject As IWMDMStorage)
End Interface

[InterfaceId("B3266365-D4F3-4696-8D53-BD27EC60993A")]
[OleAutomation(False)]
Interface IWMDMStorageControl3 Extends IWMDMStorageControl2
    Sub Insert3(ByVal fuMode As WMDMModes, ByVal fuType As WMDMStgAttributes, ByVal pwszFileSource As LongPtr, ByVal pwszFileDest As LongPtr, ByVal pOperation As IWMDMOperation, ByVal pProgress As IWMDMProgress, ByVal pMetaData As IWMDMMetaData, ByVal pUnknown As IUnknown, ByRef ppNewObject As IWMDMStorage)
End Interface

[InterfaceId("1DCB3A09-33ED-11D3-8470-00C04F79DBC0")]
[OleAutomation(False)]
Interface IWMDMObjectInfo Extends stdole.IUnknown
    Sub GetPlayLength(ByRef pdwLength As Long)
    Sub SetPlayLength(ByVal dwLength As Long)
    Sub GetPlayOffset(ByRef pdwOffset As Long)
    Sub SetPlayOffset(ByVal dwOffset As Long)
    Sub GetTotalLength(ByRef pdwLength As Long)
    Sub GetLastPlayPosition(ByRef pdwLastPos As Long)
    Sub GetLongestPlayPosition(ByRef pdwLongestPos As Long)
End Interface

[InterfaceId("EBECCEDB-88EE-4E55-B6A4-8D9F07D696AA")]
[OleAutomation(False)]
Interface IWMDMRevoked Extends stdole.IUnknown
    Sub GetRevocationURL(ByRef ppwszRevocationURL As LongPtr, ByRef pdwBufferLen As Long, ByRef pdwRevokedBitFlag As Long)
End Interface


[InterfaceId("3F5E95C0-0F43-4ED4-93D2-C89A45D59B81")]
[OleAutomation(False)]
Interface IWMDMNotification Extends stdole.IUnknown
    Sub WMDMMessage(ByVal dwMessageType As WMDMMessage, ByVal pwszCanonicalName As LongPtr)
End Interface


[CoClassId("50040C1D-BDBF-4924-B873-F14D6C5BFD66")]
[Hidden, COMCreatable]
[Description("MediaDevMgrClassFactory Class, CLSID_MediaDevMgrClassFactory")]
CoClass MediaDevMgrClassFactory
    [Default] Interface IClassFactory
End CoClass

[CoClassId("25BAAD81-3560-11D3-8471-00C04F79DBC0")]
[COMCreatable]
[Description("MediaDevMgr Class, CLSID_MediaDevMgr")]
CoClass MediaDevMgr
    [Default] Interface IWMDeviceManager
    Interface IConnectionPointContainer
    Interface IConnectionPoint
End CoClass

[CoClassId("807B3CDF-357A-11D3-8471-00C04F79DBC0")]
[Description("WMDMDevice Class, CLSID_WMDMDevice")]
CoClass WMDMDevice
    [Default] Interface IWMDMDevice
End CoClass

[CoClassId("807B3CE0-357A-11D3-8471-00C04F79DBC0")]
[Description("WMDMStorage Class, CLSID_WMDMStorage")]
CoClass WMDMStorage
    [Default] Interface IWMDMStorage
    Interface IWMDMRevoked
End CoClass

[CoClassId("807B3CE1-357A-11D3-8471-00C04F79DBC0")]
[Description("WMDMStorageGlobal Class, CLSID_WMDMStorageGlobal")]
CoClass WMDMStorageGlobal
    [Default] Interface IWMDMStorageGlobals
End CoClass

[CoClassId("430E35AF-3971-11D3-8474-00C04F79DBC0")]
[Description("WMDMDeviceEnum Class, CLSID_WMDMDeviceEnum")]
CoClass WMDMDeviceEnum
    [Default] Interface IWMDMEnumDevice
End CoClass

[CoClassId("EB401A3B-3AF7-11D3-8474-00C04F79DBC0")]
[Description("WMDMStorageEnum Class, CLSID_WMDMStorageEnum")]
CoClass WMDMStorageEnum
    [Default] Interface IWMDMEnumStorage
End CoClass







[InterfaceId("93AFDB44-B1E1-411d-B89B-75AD4F97882B")]
Interface IWMDRMDeviceApp Extends stdole.IUnknown
    Sub GenerateMeterChallenge(ByVal pDevice As IWMDMDevice, ByVal bstrMeterCert As String, pbstrMeterURL As String, pbstrMeterData As String)
    Sub ProcessMeterResponse(ByVal pDevice As IWMDMDevice, pbResponse As Any, ByVal cbResponse As Long, pdwFlags As WMDRMProcessMeterResponse)
    Sub QueryDeviceStatus(ByVal pDevice As IWMDMDevice, pdwStatus As WMDRMStatusFlags)
    Sub AcquireDeviceData(ByVal pDevice As IWMDMDevice, ByVal pProgressCallback As IWMDMProgress3, ByVal dwFlags As WMDRMStatusFlags, pdwStatus As Long)
    Sub SynchronizeLicenses(ByVal pDevice As IWMDMDevice, ByVal pProgressCallback As IWMDMProgress3, ByVal cMinCountThreshold As Long, ByVal cMinHoursThreshold As Long)
End Interface

[InterfaceId("600D6E55-DEA5-4e4c-9C3A-6BD642A45B9D")]
Interface IWMDRMDeviceApp2 Extends IWMDRMDeviceApp
    Sub QueryDeviceStatus2(ByVal pDevice As IWMDMDevice, ByVal dwFlags As WMDRMDeviceQueryFlags, pdwStatus As WMDRMStatusFlags)
End Interface

[CoClassId("5C140836-43DE-11d3-847D-00C04F79DBC0")]
[Description("WMDRMDeviceApp Class, CLSID_WMDRMDeviceApp")]
CoClass WMDRMDeviceApp
    [Default] Interface IWMDRMDeviceApp2
    Interface IWMDRMDeviceApp
End CoClass
    
Module wdWMDM

    ' / WMDM constants for wellknown meta-data tags
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMFileName = "WMDM/FileName"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMFormatCode = "WMDM/FormatCode"
    ' //Type: WMDMDATETIME, WMDM_TAG_DATATYPE: WMDM_TYPE_DATETIME
    Public Const g_wszWMDMLastModifiedDate = "WMDM/LastModifiedDate"
    ' //Type: WMDMDATETIME, WMDM_TAG_DATATYPE: WMDM_TYPE_DATETIME
    Public Const g_wszWMDMFileCreationDate = "WMDM/FileCreationDate"
    ' //Type: QWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_QWORD
    Public Const g_wszWMDMFileSize = "WMDM/FileSize"
    ' //Type: QWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_QWORD
    Public Const g_wszWMDMFileAttributes = "WMDM/FileAttributes"
    ' //Format code: WAVE Format
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszAudioWAVECodec = "WMDM/AudioWAVECodec"
    ' //Format code: FOURCC code 
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszVideoFourCCCodec = "WMDM/VideoFourCCCodec"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMTitle = "WMDM/Title"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMAuthor = "WMDM/Author"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMDescription = "WMDM/Description"
    ' //Type: BOOL, WMDM_TAG_DATATYPE: WMDM_TYPE_BOOL
    Public Const g_wszWMDMIsProtected = "WMDM/IsProtected"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMAlbumTitle = "WMDM/AlbumTitle"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMAlbumArtist = "WMDM/AlbumArtist"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMTrack = "WMDM/Track"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMGenre = "WMDM/Genre"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMTrackMood = "WMDM/TrackMood"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMAlbumCoverFormat = "WMDM/AlbumCoverFormat"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMAlbumCoverSize = "WMDM/AlbumCoverSize"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMAlbumCoverHeight = "WMDM/AlbumCoverHeight"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMAlbumCoverWidth = "WMDM/AlbumCoverWidth"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMAlbumCoverDuration = "WMDM/AlbumCoverDuration"
    ' //Type: BYTE*, WMDM_TAG_DATATYPE: WMDM_TYPE_BINARY
    Public Const g_wszWMDMAlbumCoverData = "WMDM/AlbumCoverData"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMYear = "WMDM/Year"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMComposer = "WMDM/Composer"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMCodec = "WMDM/Codec"
    Public Const g_wszWMDMDRMId = "WMDM/DRMId"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMBitrate = "WMDM/Bitrate"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMBitRateType = "WMDM/BitRateType"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMSampleRate = "WMDM/SampleRate"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMNumChannels = "WMDM/NumChannels"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMBlockAlignment = "WMDM/BlockAlignment"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMAudioBitDepth = "WMDM/AudioBitDepth"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMTotalBitrate = "WMDM/TotalBitrate"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMVideoBitrate = "WMDM/VideoBitrate"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMFrameRate = "WMDM/FrameRate"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMScanType = "WMDM/ScanType"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMKeyFrameDistance = "WMDM/KeyFrameDistance"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMBufferSize = "WMDM/BufferSize"
    ' //Type: QWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_QWORD
    Public Const g_wszWMDMQualitySetting = "WMDM/QualitySetting"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMEncodingProfile = "WMDM/EncodingProfile"
    ' //Type: QWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_QWORD
    Public Const g_wszWMDMDuration = "WMDM/Duration"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMAlbumArt = "WMDM/AlbumArt"
    ' //Type: BOOL, WMDM_TAG_DATATYPE: WMDM_TYPE_BOOL
    Public Const g_wszWMDMBuyNow = "WMDM/BuyNow"
    ' //Type: BOOL, WMDM_TAG_DATATYPE: WMDM_TYPE_BOOL
    Public Const g_wszWMDMNonConsumable = "WMDM/NonConsumable"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMediaClassPrimaryID = "WMDM/MediaClassPrimaryID"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMMediaClassSecondaryID = "WMDM/MediaClassSecondaryID"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMUserEffectiveRating = "WMDM/UserEffectiveRating"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMUserRating = "WMDM/UserRating"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMUserRatingOnDevice = "WMDM/UserRatingOnDevice"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMPlayCount = "WMDM/PlayCount"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMDevicePlayCount = "WMDM/DevicePlayCount"
    ' //Type: WMDMDATETIME, WMDM_TAG_DATATYPE: WMDM_TYPE_DATETIME
    Public Const g_wszWMDMAuthorDate = "WMDM/AuthorDate"
    ' //Type: WMDMDATETIME, WMDM_TAG_DATATYPE: WMDM_TYPE_DATETIME
    Public Const g_wszWMDMUserLastPlayTime = "WMDM/UserLastPlayTime"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMSubTitle = "WMDM/SubTitle"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMSubTitleDescription = "WMDM/SubTitleDescription"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMMediaCredits = "WMDM/MediaCredits"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMMediaStationName = "WMDM/MediaStationName"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMMediaOriginalChannel = "WMDM/MediaOriginalChannel"
    ' //Type: WMDMDATETIME, WMDM_TAG_DATATYPE: WMDM_TYPE_DATETIME
    Public Const g_wszWMDMMediaOriginalBroadcastDateTime = "WMDM/MediaOriginalBroadcastDateTime"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMProviderCopyright = "WMDM/ProviderCopyright"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMSyncID = "WMDM/SyncID"
    ' //Type: GUID, WMDM_TAG_DATATYPE: WMDM_TYPE_GUID
    Public Const g_wszWMDMPersistentUniqueID = "WMDM/PersistentUniqueID"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMWidth = "WMDM/Width"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMHeight = "WMDM/Height"
    ' //Type: WMDMDATETIME, WMDM_TAG_DATATYPE: WMDM_TYPE_DATETIME
    Public Const g_wszWMDMSyncTime = "WMDM/SyncTime"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMParentalRating = "WMDM/ParentalRating"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMMetaGenre = "WMDM/MetaGenre"
    ' //Type: BOOL, WMDM_TAG_DATATYPE: WMDM_TYPE_BOOL
    Public Const g_wszWMDMIsRepeat = "WMDM/IsRepeat"
    ' // Device properties
    ' //PROPVARIANT vt = VT_BSTR | VT_ARRAY
    Public Const g_wszWMDMSupportedDeviceProperties = "WMDM/SupportedDeviceProperties"
    ' //PROPVARIANT vt = VT_BSTR
    Public Const g_wszWMDMDeviceFriendlyName = "WMDM/DeviceFriendlyName"
    ' //PROPVARIANT vt = VT_UI4 | VT_ARRAY
    Public Const g_wszWMDMFormatsSupported = "WMDM/FormatsSupported"
    ' //PROPVARIANT vt = VT_BOOL
    Public Const g_wszWMDMFormatsSupportedAreOrdered = "WMDM/FormatsSupportedAreOrdered"
    ' //PROPVARIANT vt = VT_BSTR
    Public Const g_wszWMDMSyncRelationshipID = "WMDM/SyncRelationshipID"
    ' //PROPVARIANT vt = VT_BSTR
    Public Const g_wszWMDMDeviceModelName = "WMDM/DeviceModelName"
    ' //PROPVARIANT vt = VT_BSTR
    Public Const g_wszWMDMDeviceFirmwareVersion = "WMDM/DeviceFirmwareVersion"
    ' //PROPVARIANT vt = VT_BSTR
    Public Const g_wszWMDMDeviceVendorExtension = "WMDM/DeviceVendorExtension"
    ' //PROPVARIANT vt = VT_CLSID
    Public Const g_wszWMDMDeviceProtocol = "WMDM/DeviceProtocol"
    ' //PROPVARIANT vt = VT_CLSID
    Public Const g_wszWMDMDeviceServiceProviderVendor = "WMDM/DeviceServiceProviderVendor"
    ' //PROPVARIANT vt = VT_BSTR
    Public Const g_wszWMDMDeviceRevocationInfo = "WMDM/DeviceRevocationInfo"
    ' //PROPVARIANT vt = VT_BSTR
    Public Const g_wszWMDMCollectionID = "WMDM/CollectionID"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMOwner = "WMDM/Owner"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMEditor = "WMDM/Editor"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMWebmaster = "WMDM/Webmaster"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMSourceURL = "WMDM/SourceURL"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMDestinationURL = "WMDM/DestinationURL"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMCategory = "WMDM/Category"
    ' //Type: QWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_QWORD
    Public Const g_wszWMDMTimeBookmark = "WMDM/TimeBookmark"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMObjectBookmark = "WMDM/ObjectBookmark"
    ' //Type: QWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_QWORD
    Public Const g_wszWMDMByteBookmark = "WMDM/ByteBookmark"
    ' //Type: QWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_QWORD
    Public Const g_wszWMDMDataOffset = "WMDM/DataOffset"
    ' //Type: QWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_QWORD
    Public Const g_wszWMDMDataLength = "WMDM/DataLength"
    ' //Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD
    Public Const g_wszWMDMDataUnits = "WMDM/DataUnits"
    ' //Type: QWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_QWORD
    Public Const g_wszWMDMTimeToLive = "WMDM/TimeToLive"
    ' //Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING
    Public Const g_wszWMDMMediaGuid = "WMDM/MediaGuid"
    ' //Type: BYTE*, WMDM_TAG_DATATYPE: WMDM_TYPE_BINARY
    Public Const g_wszWPDPassthroughPropertyValues = "WPD/PassthroughPropertyValues"
    
    Public Const WMDM_MAXLEN_PROPERTYNAME = 70
    
    Public Const WMDMID_LENGTH = (128)
    Public Const WMDM_MAC_LENGTH = 8
    
    'Success codes
    Public Const WMDM_S_NOT_ALL_PROPERTIES_APPLIED  = &H00045001
    Public Const WMDM_S_NOT_ALL_PROPERTIES_RETRIEVED  = &H00045002
    ' Error codes
    Public Const WMDM_E_BUSY  = &H80045000
    Public Const WMDM_E_INTERFACEDEAD  = &H80045001
    Public Const WMDM_E_INVALIDTYPE  = &H80045002
    Public Const WMDM_E_PROCESSFAILED  = &H80045003
    Public Const WMDM_E_NOTSUPPORTED  = &H80045004
    Public Const WMDM_E_NOTCERTIFIED  = &H80045005
    Public Const WMDM_E_NORIGHTS  = &H80045006
    Public Const WMDM_E_CALL_OUT_OF_SEQUENCE  = &H80045007
    Public Const WMDM_E_BUFFERTOOSMALL  = &H80045008
    Public Const WMDM_E_MOREDATA  = &H80045009
    Public Const WMDM_E_MAC_CHECK_FAILED  = &H8004500A
    Public Const WMDM_E_USER_CANCELLED  = &H8004500B
    Public Const WMDM_E_SDMI_TRIGGER  = &H8004500C
    Public Const WMDM_E_SDMI_NOMORECOPIES  = &H8004500D
    Public Const WMDM_E_REVOKED  = &H8004500E
    Public Const WMDM_E_LICENSE_NOTEXIST  = &H8004500F
    Public Const WMDM_E_INCORRECT_APPSEC  = &H80045010
    Public Const WMDM_E_INCORRECT_RIGHTS  = &H80045011
    Public Const WMDM_E_LICENSE_EXPIRED  = &H80045012
    Public Const WMDM_E_CANTOPEN_PMSN_SERVICE_PIPE  = &H80045013
    Public Const WMDM_E_TOO_MANY_SESSIONS  = &H80045013
    
    Public Const IOCTL_MTP_CUSTOM_COMMAND = &H3150544D
    
    Public Enum WMDM_TAG_DATATYPE
        WMDM_TYPE_DWORD = 0
        WMDM_TYPE_STRING = 1
        WMDM_TYPE_BINARY = 2
        WMDM_TYPE_BOOL = 3
        WMDM_TYPE_QWORD = 4
        WMDM_TYPE_WORD = 5
        WMDM_TYPE_GUID = 6
        WMDM_TYPE_DATE = 7
    End Enum
    
    Public Enum WMDM_SESSION_TYPE
        WMDM_SESSION_NONE = 0
        WMDM_SESSION_TRANSFER_TO_DEVICE = &H1
        WMDM_SESSION_TRANSFER_FROM_DEVICE = &H10
        WMDM_SESSION_DELETE = &H100
        WMDM_SESSION_CUSTOM = &H1000
    End Enum
    
    ' Public Type VIDEOINFOHEADER
    '     rcSource As RECT
    '     rcTarget As RECT
    '     dwBitRate As Long
    '     dwBitErrorRate As Long
    '     AvgTimePerFrame As Currency
    '     bmiHeader As BITMAPINFOHEADER
    ' End Type

    Public Type WMFILECAPABILITIES
        pwszMimeType As LongPtr
        dwReserved As Long
    End Type

    Public Type OPAQUECOMMAND
        guidCommand As UUID
        dwDataLen As Long
        pData As LongPtr
        abMAC(0 To 19) As Byte
    End Type

    Public Type WMDMID
        cbSize As Long
        dwVendorID As Long
        pid(0 To 127) As Byte
        SerialNumberLength As Long
    End Type

    Public Type WMDMDATETIME
        wYear As Integer
        wMonth As Integer
        wDay As Integer
        wHour As Integer
        wMinute As Integer
        wSecond As Integer
    End Type

    Public Type WMDMRIGHTS
        cbSize As Long
        dwContentType As Long
        fuFlags As WMDMRightsFlags
        fuRights As WMDMRightsFlags2
        dwAppSec As Long
        dwPlaybackCount As Long
        ExpirationDate As WMDMDATETIME
    End Type

    Public Type WMDMMetadataView
        pwszViewName As LongPtr
        nDepth As Long
        ppwszTags As LongPtr
    End Type

    Public Enum WMDM_STORAGE_ENUM_MODE
        ENUM_MODE_RAW = 0
        ENUM_MODE_USE_DEVICE_PREF = 1
        ENUM_MODE_METADATA_VIEWS = 2
    End Enum
    
    Public Enum WMDM_FORMATCODE
        WMDM_FORMATCODE_NOTUSED = 0
        WMDM_FORMATCODE_ALLIMAGES = &Hffffffff
        WMDM_FORMATCODE_UNDEFINED = &H3000
        WMDM_FORMATCODE_ASSOCIATION = &H3001
        WMDM_FORMATCODE_SCRIPT = &H3002
        WMDM_FORMATCODE_EXECUTABLE = &H3003
        WMDM_FORMATCODE_TEXT = &H3004
        WMDM_FORMATCODE_HTML = &H3005
        WMDM_FORMATCODE_DPOF = &H3006
        WMDM_FORMATCODE_AIFF = &H3007
        WMDM_FORMATCODE_WAVE = &H3008
        WMDM_FORMATCODE_MP3 = &H3009
        WMDM_FORMATCODE_AVI = &H300a
        WMDM_FORMATCODE_MPEG = &H300b
        WMDM_FORMATCODE_ASF = &H300c
        WMDM_FORMATCODE_RESERVED_FIRST = &H300d
        WMDM_FORMATCODE_RESERVED_LAST = &H37ff
        WMDM_FORMATCODE_IMAGE_UNDEFINED = &H3800
        WMDM_FORMATCODE_IMAGE_EXIF = &H3801
        WMDM_FORMATCODE_IMAGE_TIFFEP = &H3802
        WMDM_FORMATCODE_IMAGE_FLASHPIX = &H3803
        WMDM_FORMATCODE_IMAGE_BMP = &H3804
        WMDM_FORMATCODE_IMAGE_CIFF = &H3805
        WMDM_FORMATCODE_IMAGE_GIF = &H3807
        WMDM_FORMATCODE_IMAGE_JFIF = &H3808&
        WMDM_FORMATCODE_IMAGE_PCD = &H3809&
        WMDM_FORMATCODE_IMAGE_PICT = &H380a&
        WMDM_FORMATCODE_IMAGE_PNG = &H380b&
        WMDM_FORMATCODE_IMAGE_TIFF = &H380d&
        WMDM_FORMATCODE_IMAGE_TIFFIT = &H380e&
        WMDM_FORMATCODE_IMAGE_JP2 = &H380f&
        WMDM_FORMATCODE_IMAGE_JPX = &H3810&
        WMDM_FORMATCODE_IMAGE_RESERVED_FIRST = &H3811&
        WMDM_FORMATCODE_IMAGE_RESERVED_LAST = &H3fff&
        WMDM_FORMATCODE_UNDEFINEDFIRMWARE = &Hb802&
        WMDM_FORMATCODE_WBMP = &Hb803&
        WMDM_FORMATCODE_JPEGXR = &Hb804&
        WMDM_FORMATCODE_WINDOWSIMAGEFORMAT = &Hb881&
        WMDM_FORMATCODE_UNDEFINEDAUDIO = &Hb900&
        WMDM_FORMATCODE_WMA = &Hb901&
        WMDM_FORMATCODE_OGG = &Hb902&
        WMDM_FORMATCODE_AAC = &Hb903&
        WMDM_FORMATCODE_AUDIBLE = &Hb904&
        WMDM_FORMATCODE_FLAC = &Hb906&
        WMDM_FORMATCODE_QCELP = &Hb907&
        WMDM_FORMATCODE_AMR = &Hb908&
        WMDM_FORMATCODE_UNDEFINEDVIDEO = &Hb980&
        WMDM_FORMATCODE_WMV = &Hb981&
        WMDM_FORMATCODE_MP4 = &Hb982&
        WMDM_FORMATCODE_MP2 = &Hb983&
        WMDM_FORMATCODE_3GP = &Hb984&
        WMDM_FORMATCODE_3G2 = &Hb985&
        WMDM_FORMATCODE_AVCHD = &Hb986&
        WMDM_FORMATCODE_ATSCTS = &Hb987&
        WMDM_FORMATCODE_DVBTS = &Hb988&
        WMDM_FORMATCODE_MKV = &Hb989&
        WMDM_FORMATCODE_MKA = &Hb98a&
        WMDM_FORMATCODE_MK3D = &Hb98b&
        WMDM_FORMATCODE_UNDEFINEDCOLLECTION = &Hba00&
        WMDM_FORMATCODE_ABSTRACTMULTIMEDIAALBUM = &Hba01&
        WMDM_FORMATCODE_ABSTRACTIMAGEALBUM = &Hba02&
        WMDM_FORMATCODE_ABSTRACTAUDIOALBUM = &Hba03&
        WMDM_FORMATCODE_ABSTRACTVIDEOALBUM = &Hba04&
        WMDM_FORMATCODE_ABSTRACTAUDIOVIDEOPLAYLIST = &Hba05&
        WMDM_FORMATCODE_ABSTRACTCONTACTGROUP = &Hba06&
        WMDM_FORMATCODE_ABSTRACTMESSAGEFOLDER = &Hba07&
        WMDM_FORMATCODE_ABSTRACTCHAPTEREDPRODUCTION = &Hba08&
        WMDM_FORMATCODE_MEDIA_CAST = &Hba0b&
        WMDM_FORMATCODE_WPLPLAYLIST = &Hba10&
        WMDM_FORMATCODE_M3UPLAYLIST = &Hba11&
        WMDM_FORMATCODE_MPLPLAYLIST = &Hba12&
        WMDM_FORMATCODE_ASXPLAYLIST = &Hba13&
        WMDM_FORMATCODE_PLSPLAYLIST = &Hba14&
        WMDM_FORMATCODE_UNDEFINEDDOCUMENT = &Hba80&
        WMDM_FORMATCODE_ABSTRACTDOCUMENT = &Hba81&
        WMDM_FORMATCODE_XMLDOCUMENT = &Hba82&
        WMDM_FORMATCODE_MICROSOFTWORDDOCUMENT = &Hba83&
        WMDM_FORMATCODE_MHTCOMPILEDHTMLDOCUMENT = &Hba84&
        WMDM_FORMATCODE_MICROSOFTEXCELSPREADSHEET = &Hba85&
        WMDM_FORMATCODE_MICROSOFTPOWERPOINTDOCUMENT = &Hba86&
        WMDM_FORMATCODE_UNDEFINEDMESSAGE = &Hbb00&
        WMDM_FORMATCODE_ABSTRACTMESSAGE = &Hbb01&
        WMDM_FORMATCODE_UNDEFINEDCONTACT = &Hbb80&
        WMDM_FORMATCODE_ABSTRACTCONTACT = &Hbb81&
        WMDM_FORMATCODE_VCARD2 = &Hbb82&
        WMDM_FORMATCODE_VCARD3 = &Hbb83&
        WMDM_FORMATCODE_UNDEFINEDCALENDARITEM = &Hbe00&
        WMDM_FORMATCODE_ABSTRACTCALENDARITEM = &Hbe01&
        WMDM_FORMATCODE_VCALENDAR1 = &Hbe02&
        WMDM_FORMATCODE_VCALENDAR2 = &Hbe03&
        WMDM_FORMATCODE_UNDEFINEDWINDOWSEXECUTABLE = &Hbe80&
        WMDM_FORMATCODE_M4A = &H4d503441
        WMDM_FORMATCODE_3GPA = &H33475041
        WMDM_FORMATCODE_3G2A = &H33473241
        WMDM_FORMATCODE_SECTION = &Hbe82&
    End Enum
    
    Public Enum WMDM_ENUM_PROP_VALID_VALUES_FORM
        WMDM_ENUM_PROP_VALID_VALUES_ANY = 0
        WMDM_ENUM_PROP_VALID_VALUES_RANGE = (WMDM_ENUM_PROP_VALID_VALUES_ANY + 1)
        WMDM_ENUM_PROP_VALID_VALUES_ENUM = (WMDM_ENUM_PROP_VALID_VALUES_RANGE + 1)
    End Enum
    
    Public Type WMDM_PROP_VALUES_RANGE
        rangeMin As Variant
        rangeMax As Variant
        rangeStep As Variant
    End Type

    Public Type WMDM_PROP_VALUES_ENUM
        cEnumValues As Long
        pValues As LongPtr
    End Type

    Public Type WMDM_PROP_DESC
        pwszPropName As LongPtr
        ValidValuesForm As WMDM_ENUM_PROP_VALID_VALUES_FORM
        ValidValues(0 To 47) As Byte
    End Type

    Public Type WMDM_PROP_CONFIG
        nPreference As Long
        nPropDesc As Long
        pPropDesc As LongPtr
    End Type

    Public Type WMDM_FORMAT_CAPABILITY
        nPropConfig As Long
        pConfigs As LongPtr
    End Type

    Public Enum WMDM_FIND_SCOPE
        WMDM_FIND_SCOPE_GLOBAL = 0
        WMDM_FIND_SCOPE_IMMEDIATE_CHILDREN = 1
    End Enum
    
    Public Enum WMDMRevocationFlags
        WMDM_WMDM_REVOKED = &H00000001
        WMDM_APP_REVOKED = &H00000002
        WMDM_SP_REVOKED = &H00000004
        WMDM_SCP_REVOKED = &H00000008
    End Enum
    
    Public Enum WMDMGetFmtSupport2Flags
        WMDM_GET_FORMAT_SUPPORT_AUDIO = &H00000001
        WMDM_GET_FORMAT_SUPPORT_VIDEO = &H00000002
        WMDM_GET_FORMAT_SUPPORT_FILE = &H00000004
    End Enum
    
    Public Enum WMDMRightsFlags
        WMDM_RIGHTS_PLAYBACKCOUNT = &H00000001
        WMDM_RIGHTS_EXPIRATIONDATE = &H00000002
        WMDM_RIGHTS_GROUPID = &H00000004
        WMDM_RIGHTS_FREESERIALIDS = &H00000008
        WMDM_RIGHTS_NAMEDSERIALIDS = &H00000010
    End Enum
    
    Public Enum WMDMDeviceTypeFlags
        WMDM_DEVICE_TYPE_PLAYBACK = &H00000001
        WMDM_DEVICE_TYPE_RECORD = &H00000002
        WMDM_DEVICE_TYPE_DECODE = &H00000004
        WMDM_DEVICE_TYPE_ENCODE = &H00000008
        WMDM_DEVICE_TYPE_STORAGE = &H00000010
        WMDM_DEVICE_TYPE_VIRTUAL = &H00000020
        WMDM_DEVICE_TYPE_SDMI = &H00000040
        WMDM_DEVICE_TYPE_NONSDMI = &H00000080
        WMDM_DEVICE_TYPE_NONREENTRANT = &H00000100
        WMDM_DEVICE_TYPE_FILELISTRESYNC = &H00000200
        WMDM_DEVICE_TYPE_VIEW_PREF_METADATAVIEW = &H00000400
    End Enum
    
    Public Enum WMDMDevicePowerFlags
        WMDM_POWER_CAP_BATTERY = &H00000001
        WMDM_POWER_CAP_EXTERNAL = &H00000002
        WMDM_POWER_IS_BATTERY = &H00000004
        WMDM_POWER_IS_EXTERNAL = &H00000008
        WMDM_POWER_PERCENT_AVAILABLE = &H00000010
    End Enum
    
    Public Enum WMDMDeviceStatusFlags
        WMDM_STATUS_READY = &H00000001
        WMDM_STATUS_BUSY = &H00000002
        WMDM_STATUS_DEVICE_NOTPRESENT = &H00000004
        WMDM_STATUS_DEVICECONTROL_PLAYING = &H00000008
        WMDM_STATUS_DEVICECONTROL_RECORDING = &H00000010
        WMDM_STATUS_DEVICECONTROL_PAUSED = &H00000020
        WMDM_STATUS_DEVICECONTROL_REMOTE = &H00000040
        WMDM_STATUS_DEVICECONTROL_STREAM = &H00000080
        WMDM_STATUS_STORAGE_NOTPRESENT = &H00000100
        WMDM_STATUS_STORAGE_INITIALIZING = &H00000200
        WMDM_STATUS_STORAGE_BROKEN = &H00000400
        WMDM_STATUS_STORAGE_NOTSUPPORTED = &H00000800
        WMDM_STATUS_STORAGE_UNFORMATTED = &H00001000
        WMDM_STATUS_STORAGECONTROL_INSERTING = &H00002000
        WMDM_STATUS_STORAGECONTROL_DELETING = &H00004000
        WMDM_STATUS_STORAGECONTROL_APPENDING = &H00008000&
        WMDM_STATUS_STORAGECONTROL_MOVING = &H00010000
        WMDM_STATUS_STORAGECONTROL_READING = &H00020000
    End Enum
    
    Public Enum WMDMDeviceCapFlags
        WMDM_DEVICECAP_CANPLAY = &H00000001
        WMDM_DEVICECAP_CANSTREAMPLAY = &H00000002
        WMDM_DEVICECAP_CANRECORD = &H00000004
        WMDM_DEVICECAP_CANSTREAMRECORD = &H00000008
        WMDM_DEVICECAP_CANPAUSE = &H00000010
        WMDM_DEVICECAP_CANRESUME = &H00000020
        WMDM_DEVICECAP_CANSTOP = &H00000040
        WMDM_DEVICECAP_CANSEEK = &H00000080
        WMDM_DEVICECAP_HASSECURECLOCK = &H00000100
    End Enum
    
    Public Enum WMDMSeekFlags
        WMDM_SEEK_REMOTECONTROL = &H00000001
        WMDM_SEEK_STREAMINGAUDIO = &H00000002
    End Enum
    
    Public Enum WMDMStgAttributes
        WMDM_STORAGE_ATTR_FILESYSTEM = &H00000001
        WMDM_STORAGE_ATTR_REMOVABLE = &H00000002
        WMDM_STORAGE_ATTR_NONREMOVABLE = &H00000004
        WMDM_FILE_ATTR_FOLDER = &H00000008
        WMDM_FILE_ATTR_LINK = &H00000010
        WMDM_FILE_ATTR_FILE = &H00000020
        WMDM_FILE_ATTR_VIDEO = &H00000040
        WMDM_STORAGE_ATTR_CANEDITMETADATA = &H00000080
        WMDM_STORAGE_ATTR_FOLDERS = &H00000100
        WMDM_FILE_ATTR_AUDIO = &H00001000
        WMDM_FILE_ATTR_DATA = &H00002000
        WMDM_FILE_ATTR_CANPLAY = &H00004000
        WMDM_FILE_ATTR_CANDELETE = &H00008000&
        WMDM_FILE_ATTR_CANMOVE = &H00010000
        WMDM_FILE_ATTR_CANRENAME = &H00020000
        WMDM_FILE_ATTR_CANREAD = &H00040000
        WMDM_FILE_ATTR_MUSIC = &H00080000
        WMDM_FILE_CREATE_OVERWRITE = &H00100000
        WMDM_FILE_ATTR_AUDIOBOOK = &H00200000
        WMDM_FILE_ATTR_HIDDEN = &H00400000
        WMDM_FILE_ATTR_SYSTEM = &H00800000
        WMDM_FILE_ATTR_READONLY = &H01000000
        WMDM_STORAGE_ATTR_HAS_FOLDERS = &H02000000
        WMDM_STORAGE_ATTR_HAS_FILES = &H04000000
        WMDM_STORAGE_IS_DEFAULT = &H08000000
        WMDM_STORAGE_CONTAINS_DEFAULT = &H10000000
        WMDM_STORAGE_ATTR_VIRTUAL = &H20000000
    End Enum
    
    Public Enum WMDMStgCaps
        WMDM_STORAGECAP_FOLDERSINROOT = &H00000001
        WMDM_STORAGECAP_FILESINROOT = &H00000002
        WMDM_STORAGECAP_FOLDERSINFOLDERS = &H00000004
        WMDM_STORAGECAP_FILESINFOLDERS = &H00000008
        WMDM_STORAGECAP_FOLDERLIMITEXISTS = &H00000010
        WMDM_STORAGECAP_FILELIMITEXISTS = &H00000020
        WMDM_STORAGECAP_NOT_INITIALIZABLE = &H00000040
    End Enum
    
    Public Enum WMDMModes
        WMDM_MODE_BLOCK = &H00000001
        WMDM_MODE_THREAD = &H00000002
        WMDM_CONTENT_FILE = &H00000004
        WMDM_CONTENT_FOLDER = &H00000008
        WMDM_CONTENT_OPERATIONINTERFACE = &H00000010
        WMDM_MODE_QUERY = &H00000020
        WMDM_MODE_PROGRESS = &H00000040
        WMDM_MODE_TRANSFER_PROTECTED = &H00000080
        WMDM_MODE_TRANSFER_UNPROTECTED = &H00000100
        WMDM_STORAGECONTROL_INSERTBEFORE = &H00000200
        WMDM_STORAGECONTROL_INSERTAFTER = &H00000400
        WMDM_STORAGECONTROL_INSERTINTO = &H00000800
        WMDM_MODE_RECURSIVE = &H00001000
    End Enum
    
    Public Enum WMDMRightsFlags2
        WMDM_RIGHTS_PLAY_ON_PC = &H00000001
        WMDM_RIGHTS_COPY_TO_NON_SDMI_DEVICE = &H00000002
        WMDM_RIGHTS_COPY_TO_CD = &H00000008
        WMDM_RIGHTS_COPY_TO_SDMI_DEVICE = &H00000010
    End Enum
    
    Public Enum WMDMSeek
        WMDM_SEEK_BEGIN = &H00000001
        WMDM_SEEK_CURRENT = &H00000002
        WMDM_SEEK_END = &H00000008
    End Enum
    
    Public Enum WMDMDeviceEnumFlags
        DO_NOT_VIRTUALIZE_STORAGES_AS_DEVICES = &H00000001
        ALLOW_OUTOFBAND_NOTIFICATION = &H00000002
    End Enum
    
    Public Enum WMDMMessage
        WMDM_MSG_DEVICE_ARRIVAL = 0
        WMDM_MSG_DEVICE_REMOVAL = (WMDM_MSG_DEVICE_ARRIVAL + 1)
        WMDM_MSG_MEDIA_ARRIVAL = (WMDM_MSG_DEVICE_REMOVAL + 1)
        WMDM_MSG_MEDIA_REMOVAL = (WMDM_MSG_MEDIA_ARRIVAL + 1)
    End Enum
    
    Public Enum WMDMNavOps
        MDSP_READ = 1
        MDSP_WRITE = 2
    End Enum

    Public Enum WMDMSeekOps
        MDSP_SEEK_BOF = 1
        MDSP_SEEK_CUR = 2
        MDSP_SEEK_EOF = 4
    End Enum
    
    Public Enum WMDRMStatusFlags
        WMDRM_DEVICE_ISWMDRM = &H00000001
        WMDRM_DEVICE_NEEDCLOCK = &H00000002
        WMDRM_DEVICE_REVOKED = &H00000004
        WMDRM_CLIENT_NEEDINDIV = &H00000008
        WMDRM_DEVICE_REFRESHCLOCK = &H00000010
    End Enum
    
    Public Enum WMDRMDeviceQueryFlags
        WMDRM_QUERY_DEVICE_ISWMDRM = &H00000001
        WMDRM_QUERY_DEVICE_CLOCKSTATUS = &H00000002
        WMDRM_QUERY_DEVICE_ISREVOKED = &H00000004
        WMDRM_QUERY_CLIENT_INDIVSTATUS = &H00000008
    End Enum
    
    Public Enum WMDRMProcessMeterResponse
        WMDRM_METER_RESPONSE_ALL = &H00000000
        WMDRM_METER_RESPONSE_PARTIAL = &H00000001
    End Enum
    
    
    
    Public Function WMDM_DEVICE_PROTOCOL_MTP() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H979e54e5, &Hafc, &H4604, &H8d, &H93, &Hdc, &H79, &H8a, &H4b, &Hcf, &H45)
    WMDM_DEVICE_PROTOCOL_MTP = iid
    End Function
    Public Function WMDM_DEVICE_PROTOCOL_RAPI() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2a11ed91, &H8c8f, &H41e4, &H82, &Hd1, &H83, &H86, &He0, &H3, &H56, &H1c)
    WMDM_DEVICE_PROTOCOL_RAPI = iid
    End Function
    Public Function WMDM_DEVICE_PROTOCOL_MSC() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha4d2c26c, &Ha881, &H44bb, &Hbd, &H5d, &H1f, &H70, &H3c, &H71, &Hf7, &Ha9)
    WMDM_DEVICE_PROTOCOL_MSC = iid
    End Function
    Public Function WMDM_SERVICE_PROVIDER_VENDOR_MICROSOFT() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7de8686d, &H78ee, &H43ea, &Ha4, &H96, &Hc6, &H25, &Hac, &H91, &Hcc, &H5d)
    WMDM_SERVICE_PROVIDER_VENDOR_MICROSOFT = iid
    End Function
    

End Module