'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

'wdDirectShow - quartz.dll plus oleexp additions; includes mDirectShow.bas

'QUARTZ
    [InterfaceId("56A868C0-0AD4-11CE-B03A-0020AF0BA770")]
    [Description("IMediaEventEx interface")]
    [OleAutomation(False)]
    Interface IMediaEventEx Extends IMediaEvent
        Sub SetNotifyWindow(ByVal hwnd As LongPtr, ByVal lMsg As Long, ByVal lInstanceData As LongPtr)
        Sub SetNotifyFlags(ByVal lNoNotifyFlags As Long)
        Sub GetNotifyFlags(ByRef lplNoNotifyFlags As Long)
    End Interface

   

    [InterfaceId("329BB360-F6EA-11D1-9038-00A0C9697298")]
    [Description("IBasicVideo2")]
    [OleAutomation(False)]
    Interface IBasicVideo2 Extends IBasicVideo
        Sub GetPreferredAspectRatio(ByRef plAspectX As Long, ByRef plAspectY As Long)
    End Interface

    [InterfaceId("56A868B8-0AD4-11CE-B03A-0020AF0BA770")]
    [Description("IDeferredCommand")]
    [OleAutomation(False)]
    Interface IDeferredCommand Extends stdole.IUnknown
        Sub Cancel()
        Sub Confidence(ByRef pConfidence As Long)
        Sub Postpone(ByVal newtime As Double)
        Sub GetHResult(ByRef phrResult As Long)
    End Interface

    [InterfaceId("56A868B7-0AD4-11CE-B03A-0020AF0BA770")]
    [Description("IQueueCommand")]
    [OleAutomation(False)]
    Interface IQueueCommand Extends stdole.IUnknown
        Sub InvokeAtStreamTime(ByRef pCmd As IDeferredCommand, ByVal time As Double, ByRef iid As UUID, ByVal dispidMethod As Long, ByVal wFlags As Integer, ByVal cArgs As Long, ByRef pDispParams As Variant, ByRef pvarResult As Variant, ByRef puArgErr As Integer)
        Sub InvokeAtPresentationTime(ByRef pCmd As IDeferredCommand, ByVal time As Double, ByRef iid As UUID, ByVal dispidMethod As Long, ByVal wFlags As Integer, ByVal cArgs As Long, ByRef pDispParams As Variant, ByRef pvarResult As Variant, ByRef puArgErr As Integer)
    End Interface


    [InterfaceId("56A868B9-0AD4-11CE-B03A-0020AF0BA770")]
   ' [ DualInterface, COMExtensible]
    [Description("Collection")]
    [OleAutomation(False)]
    Interface IAMCollection Extends stdole.IDispatch
        [DispId(&H60020000)]
        Property Get Count() As Long
        [DispId(&H60020001)]
        Sub Item(ByVal lItem As Long, ByRef ppUnk As IUnknown)
        [DispId(&H60020002)]
        Property Get _NewEnum() As IUnknown
    End Interface

    [InterfaceId("56A868B1-0AD4-11CE-B03A-0020AF0BA770")]
    '[ DualInterface, COMExtensible]
    [Description("IMediaControl interface")]
    [OleAutomation(False)]
    Interface IMediaControl Extends stdole.IDispatch
        [DispId(&H60020000)]
        Sub Run()
        [DispId(&H60020001)]
        Sub Pause()
        [DispId(&H60020002)]
        Sub Stop()
        [DispId(&H60020003)]
        Sub GetState(ByVal msTimeout As Long, ByRef pfs As Long)
        [DispId(&H60020004)]
        Sub RenderFile(ByVal strFilename As String)
        [DispId(&H60020005)]
        Sub AddSourceFilter(ByVal strFilename As String, ByRef ppUnk As stdole.IDispatch)
        [DispId(&H60020006)]
        Property Get FilterCollection() As stdole.IDispatch
        [DispId(&H60020007)]
        Property Get RegFilterCollection() As stdole.IDispatch
        [DispId(&H60020008)]
        Sub StopWhenReady()
    End Interface

    [InterfaceId("56A868B6-0AD4-11CE-B03A-0020AF0BA770")]
    '[ DualInterface, COMExtensible]
    [Description("IMediaEvent interface")]
    [OleAutomation(False)]
    Interface IMediaEvent Extends stdole.IDispatch
        [DispId(&H60020000)]
        Sub GetEventHandle(ByVal hEvent As LongPtr)
        [DispId(&H60020001)]
        Sub GetEvent(ByRef lEventCode As Long, ByVal lParam1 As LongPtr, ByVal lParam2 As LongPtr, ByVal msTimeout As Long)
        [DispId(&H60020002)]
        Sub WaitForCompletion(ByVal msTimeout As Long, ByRef pEvCode As Long)
        [DispId(&H60020003)]
        Sub CancelDefaultHandling(ByVal lEvCode As Long)
        [DispId(&H60020004)]
        Sub RestoreDefaultHandling(ByVal lEvCode As Long)
        [DispId(&H60020005)]
        Sub FreeEventParams(ByVal lEvCode As Long, ByVal lParam1 As LongPtr, ByVal lParam2 As LongPtr)
    End Interface

    [InterfaceId("56A868B2-0AD4-11CE-B03A-0020AF0BA770")]
   ' [ DualInterface, COMExtensible]
    [Description("IMediaPosition interface")]
    [OleAutomation(False)]
    Interface IMediaPosition Extends stdole.IDispatch
        [DispId(&H60020000)]
        Property Get Duration() As Double
        [DispId(&H60020001)]
        Property Let CurrentPosition(ByVal pllTime As Double)
        [DispId(&H60020001)]
        Property Get CurrentPosition() As Double
        [DispId(&H60020003)]
        Property Get StopTime() As Double
        [DispId(&H60020003)]
        Property Let StopTime(ByVal pllTime As Double)
        [DispId(&H60020005)]
        Property Get PrerollTime() As Double
        [DispId(&H60020005)]
        Property Let PrerollTime(ByVal pllTime As Double)
        [DispId(&H60020007)]
        Property Let Rate(ByVal pdRate As Double)
        [DispId(&H60020007)]
        Property Get Rate() As Double
        [DispId(&H60020009)]
        Function CanSeekForward() As Long
        [DispId(&H6002000A)]
        Function CanSeekBackward() As Long
    End Interface

    [InterfaceId("56A868B3-0AD4-11CE-B03A-0020AF0BA770")]
   ' [ DualInterface, COMExtensible]
    [Description("IBasicAudio interface")]
    [OleAutomation(False)]
    Interface IBasicAudio Extends stdole.IDispatch
        [DispId(&H60020000)]
        Property Let Volume(ByVal plVolume As Long)
        [DispId(&H60020000)]
        Property Get Volume() As Long
        [DispId(&H60020002)]
        Property Let Balance(ByVal plBalance As Long)
        [DispId(&H60020002)]
        Property Get Balance() As Long
    End Interface

    [InterfaceId("56A868B4-0AD4-11CE-B03A-0020AF0BA770")]
   ' [ DualInterface, COMExtensible]
    [Description("IVideoWindow interface")]
    [OleAutomation(False)]
    Interface IVideoWindow Extends stdole.IDispatch
        [DispId(&H60020000)]
        Property Let Caption(ByVal strCaption As String)
        [DispId(&H60020000)]
        Property Get Caption() As String
        [DispId(&H60020002)]
        Property Let WindowStyle(ByVal WindowStyle As Long)
        [DispId(&H60020002)]
        Property Get WindowStyle() As Long
        [DispId(&H60020004)]
        Property Let WindowStyleEx(ByVal WindowStyleEx As Long)
        [DispId(&H60020004)]
        Property Get WindowStyleEx() As Long
        [DispId(&H60020006)]
        Property Let AutoShow(ByVal AutoShow As Long)
        [DispId(&H60020006)]
        Property Get AutoShow() As Long
        [DispId(&H60020008)]
        Property Let WindowState(ByVal WindowState As Long)
        [DispId(&H60020008)]
        Property Get WindowState() As Long
        [DispId(&H6002000A)]
        Property Let BackgroundPalette(ByVal pBackgroundPalette As Long)
        [DispId(&H6002000A)]
        Property Get BackgroundPalette() As Long
        [DispId(&H6002000C)]
        Property Let Visible(ByVal pVisible As Long)
        [DispId(&H6002000C)]
        Property Get Visible() As Long
        [DispId(&H6002000E)]
        Property Let Left(ByVal pLeft As Long)
        [DispId(&H6002000E)]
        Property Get Left() As Long
        [DispId(&H60020010)]
        Property Let Width(ByVal pWidth As Long)
        [DispId(&H60020010)]
        Property Get Width() As Long
        [DispId(&H60020012)]
        Property Let Top(ByVal pTop As Long)
        [DispId(&H60020012)]
        Property Get Top() As Long
        [DispId(&H60020014)]
        Property Let Height(ByVal pHeight As Long)
        [DispId(&H60020014)]
        Property Get Height() As Long
        [DispId(&H60020016)]
        Property Let Owner(ByVal Owner As LongPtr)
        [DispId(&H60020016)]
        Property Get Owner() As LongPtr
        [DispId(&H60020018)]
        Property Let MessageDrain(ByVal Drain As LongPtr)
        [DispId(&H60020018)]
        Property Get MessageDrain() As LongPtr
        [DispId(&H6002001A)]
        Property Get BorderColor() As Long
        [DispId(&H6002001A)]
        Property Let BorderColor(ByVal Color As Long)
        [DispId(&H6002001C)]
        Property Get FullScreenMode() As Long
        [DispId(&H6002001C)]
        Property Let FullScreenMode(ByVal FullScreenMode As Long)
        [DispId(&H6002001E)]
        Sub SetWindowForeground(ByVal Focus As Long)
        [DispId(&H6002001F)]
        Sub NotifyOwnerMessage(ByVal hwnd As LongPtr, ByVal uMsg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr)
        [DispId(&H60020020)]
        Sub SetWindowPosition(ByVal Left As Long, ByVal Top As Long, ByVal Width As Long, ByVal Height As Long)
        [DispId(&H60020021)]
        Sub GetWindowPosition(ByRef pLeft As Long, ByRef pTop As Long, ByRef pWidth As Long, ByRef pHeight As Long)
        [DispId(&H60020022)]
        Sub GetMinIdealImageSize(ByRef pWidth As Long, ByRef pHeight As Long)
        [DispId(&H60020023)]
        Sub GetMaxIdealImageSize(ByRef pWidth As Long, ByRef pHeight As Long)
        [DispId(&H60020024)]
        Sub GetRestorePosition(ByRef pLeft As Long, ByRef pTop As Long, ByRef pWidth As Long, ByRef pHeight As Long)
        [DispId(&H60020025)]
        Sub HideCursor(ByVal HideCursor As Long)
        [DispId(&H60020026)]
        Sub IsCursorHidden(ByRef CursorHidden As Long)
    End Interface

    [InterfaceId("56A868B5-0AD4-11CE-B03A-0020AF0BA770")]
   ' [ DualInterface, COMExtensible]
    [Description("IBasicVideo interface")]
    [OleAutomation(False)]
    Interface IBasicVideo Extends stdole.IDispatch
        [DispId(&H60020000)]
        Property Get AvgTimePerFrame() As Double
        [DispId(&H60020001)]
        Property Get BitRate() As Long
        [DispId(&H60020002)]
        Property Get BitErrorRate() As Long
        [DispId(&H60020003)]
        Property Get VideoWidth() As Long
        [DispId(&H60020004)]
        Property Get VideoHeight() As Long
        [DispId(&H60020005)]
        Property Let SourceLeft(ByVal pSourceLeft As Long)
        [DispId(&H60020005)]
        Property Get SourceLeft() As Long
        [DispId(&H60020007)]
        Property Let SourceWidth(ByVal pSourceWidth As Long)
        [DispId(&H60020007)]
        Property Get SourceWidth() As Long
        [DispId(&H60020009)]
        Property Let SourceTop(ByVal pSourceTop As Long)
        [DispId(&H60020009)]
        Property Get SourceTop() As Long
        [DispId(&H6002000B)]
        Property Let SourceHeight(ByVal pSourceHeight As Long)
        [DispId(&H6002000B)]
        Property Get SourceHeight() As Long
        [DispId(&H6002000D)]
        Property Let DestinationLeft(ByVal pDestinationLeft As Long)
        [DispId(&H6002000D)]
        Property Get DestinationLeft() As Long
        [DispId(&H6002000F)]
        Property Let DestinationWidth(ByVal pDestinationWidth As Long)
        [DispId(&H6002000F)]
        Property Get DestinationWidth() As Long
        [DispId(&H60020011)]
        Property Let DestinationTop(ByVal pDestinationTop As Long)
        [DispId(&H60020011)]
        Property Get DestinationTop() As Long
        [DispId(&H60020013)]
        Property Let DestinationHeight(ByVal pDestinationHeight As Long)
        [DispId(&H60020013)]
        Property Get DestinationHeight() As Long
        [DispId(&H60020015)]
        Sub SetSourcePosition(ByVal Left As Long, ByVal Top As Long, ByVal Width As Long, ByVal Height As Long)
        [DispId(&H60020016)]
        Sub GetSourcePosition(ByRef pLeft As Long, ByRef pTop As Long, ByRef pWidth As Long, ByRef pHeight As Long)
        [DispId(&H60020017)]
        Sub SetDefaultSourcePosition()
        [DispId(&H60020018)]
        Sub SetDestinationPosition(ByVal Left As Long, ByVal Top As Long, ByVal Width As Long, ByVal Height As Long)
        [DispId(&H60020019)]
        Sub GetDestinationPosition(ByRef pLeft As Long, ByRef pTop As Long, ByRef pWidth As Long, ByRef pHeight As Long)
        [DispId(&H6002001A)]
        Sub SetDefaultDestinationPosition()
        [DispId(&H6002001B)]
        Sub GetVideoSize(ByRef pWidth As Long, ByRef pHeight As Long)
        [DispId(&H6002001C)]
        Sub GetVideoPaletteEntries(ByVal StartIndex As Long, ByVal Entries As Long, ByRef pRetrieved As Long, ByRef pPalette As Long)
        [DispId(&H6002001D)]
        Sub GetCurrentImage(ByRef pBufferSize As Long, ByRef pDIBImage As Long)
        [DispId(&H6002001E)]
        Sub IsUsingDefaultSource()
        [DispId(&H6002001F)]
        Sub IsUsingDefaultDestination()
    End Interface

    [InterfaceId("56A868BA-0AD4-11CE-B03A-0020AF0BA770")]
   ' [ DualInterface, COMExtensible]
    [Description("FilterInfo")]
    [OleAutomation(False)]
    Interface IFilterInfo Extends stdole.IDispatch
        [DispId(&H60020000)]
        Sub FindPin(ByVal strPinID As String, ByRef ppUnk As stdole.IDispatch)
        [DispId(&H60020001)]
        Property Get Name() As String
        [DispId(&H60020002)]
        Property Get VendorInfo() As String
        [DispId(&H60020003)]
        Property Get Filter() As IUnknown
        [DispId(&H60020004)]
        Property Get Pins() As stdole.IDispatch
        [DispId(&H60020005)]
        Property Get IsFileSource() As Long
        [DispId(&H60020006)]
        Property Get Filename() As String
        [DispId(&H60020006)]
        Property Let Filename(ByVal pstrFilename As String)
    End Interface

    [InterfaceId("56A868BB-0AD4-11CE-B03A-0020AF0BA770")]
   ' [ DualInterface, COMExtensible]
    [Description("Registry Filter Info")]
    [OleAutomation(False)]
    Interface IRegFilterInfo Extends stdole.IDispatch
        [DispId(&H60020000)]
        Property Get Name() As String
        [DispId(&H60020001)]
        Sub Filter(ByRef ppUnk As stdole.IDispatch)
    End Interface

    [InterfaceId("56A868BC-0AD4-11CE-B03A-0020AF0BA770")]
    '[ DualInterface, COMExtensible]
    [Description("Media Type")]
    [OleAutomation(False)]
    Interface IMediaTypeInfo Extends stdole.IDispatch
        [DispId(&H60020000)]
        Property Get Type() As String
        [DispId(&H60020001)]
        Property Get Subtype() As String
    End Interface

    [InterfaceId("56A868BD-0AD4-11CE-B03A-0020AF0BA770")]
    '[ DualInterface, COMExtensible]
    [Description("Pin Info")]
    [OleAutomation(False)]
    Interface IPinInfo Extends stdole.IDispatch
        [DispId(&H60020000)]
        Property Get Pin() As IUnknown
        [DispId(&H60020001)]
        Property Get ConnectedTo() As stdole.IDispatch
        [DispId(&H60020002)]
        Property Get ConnectionMediaType() As stdole.IDispatch
        [DispId(&H60020003)]
        Property Get FilterInfo() As stdole.IDispatch
        [DispId(&H60020004)]
        Property Get Name() As String
        [DispId(&H60020005)]
        Property Get Direction() As Long
        [DispId(&H60020006)]
        Property Get PinID() As String
        [DispId(&H60020007)]
        Property Get MediaTypes() As stdole.IDispatch
        [DispId(&H60020008)]
        Sub Connect(ByVal pPin As IUnknown)
        [DispId(&H60020009)]
        Sub ConnectDirect(ByVal pPin As IUnknown)
        [DispId(&H6002000A)]
        Sub ConnectWithType(ByVal pPin As IUnknown, ByVal pMediaType As stdole.IDispatch)
        [DispId(&H6002000B)]
        Sub Disconnect()
        [DispId(&H6002000C)]
        Sub Render()
    End Interface

    [InterfaceId("BC9BCF80-DCD2-11D2-ABF6-00A0C905F375")]
    '[ DualInterface, COMExtensible]
    [Description("Statistics")]
    [OleAutomation(False)]
    Interface IAMStats Extends stdole.IDispatch
        [DispId(&H60020000)]
        Sub Reset()
        [DispId(&H60020001)]
        Property Get Count() As Long
        [DispId(&H60020002)]
        Sub GetValueByIndex(ByVal lIndex As Long, ByRef szName As String, ByRef lCount As Long, ByRef dLast As Double, ByRef dAverage As Double, ByRef dStdDev As Double, ByRef dMin As Double, ByRef dMax As Double)
        [DispId(&H60020003)]
        Sub GetValueByName(ByVal szName As String, ByRef lIndex As Long, ByRef lCount As Long, ByRef dLast As Double, ByRef dAverage As Double, ByRef dStdDev As Double, ByRef dMin As Double, ByRef dMax As Double)
        [DispId(&H60020004)]
        Sub GetIndex(ByVal szName As String, ByVal lCreate As Long, ByRef plIndex As Long)
        [DispId(&H60020005)]
        Sub AddValue(ByVal lIndex As Long, ByVal dValue As Double)
    End Interface

    [CoClassId("E436EBB3-524F-11CE-9F53-0020AF0BA770")]
    [COMCreatable]
    [Description("Filtergraph type info")]
    CoClass FilgraphManager
        [Default] Interface IMediaControl
        Interface IMediaEvent
        Interface IMediaPosition
        Interface IBasicAudio
        Interface IBasicVideo
        Interface IVideoWindow
    End CoClass
'END QUARTZ
'********************************************************************************************************************
    [InterfaceId("89C31040-846B-11CE-97D3-00AA0055595A")]
    [OleAutomation(False)]
    Interface IEnumMediaTypes Extends stdole.IUnknown
        [PreserveSig]
        Function Next(ByVal cMediaTypes As Long, ByRef ppMediaTypes As AM_MEDIA_TYPE, ByRef pcFetched As Long) As Long
        [PreserveSig]
        Function Skip(ByVal cMediaTypes As Long) As Long
        [PreserveSig]
        Function Reset() As Long
        [PreserveSig]
        Function Clone(ByRef ppenum As IEnumMediaTypes) As Long
    End Interface

    [InterfaceId("56A86891-0AD4-11CE-B03A-0020AF0BA770")]
    [OleAutomation(False)]
    Interface IPin Extends stdole.IUnknown
        [PreserveSig]
        Function Connect(ByVal pReceivePin As IPin, ByRef pmt As AM_MEDIA_TYPE) As Long
        [PreserveSig]
        Function ReceiveConnection(ByVal pConnector As IPin, ByRef pmt As AM_MEDIA_TYPE) As Long
        [PreserveSig]
        Function Disconnect() As Long
        [PreserveSig]
        Function ConnectedTo(ByRef pPin As IPin) As Long
        [PreserveSig]
        Function ConnectionMediaType(ByRef pmt As AM_MEDIA_TYPE) As Long
        [PreserveSig]
        Function QueryPinInfo(ByRef pInfo As PIN_INFO) As Long
        [PreserveSig]
        Function QueryDirection(ByRef pPinDir As PIN_DIRECTION) As Long
        [PreserveSig]
        Function QueryId(ByRef id As Long) As Long
        [PreserveSig]
        Function QueryAccept(ByRef pmt As AM_MEDIA_TYPE) As Long
        [PreserveSig]
        Function EnumMediaTypes(ByRef ppenum As IEnumMediaTypes) As Long
        [PreserveSig]
        Function QueryInternalConnections(ByRef apPin As IPin, ByRef nPin As Long) As Long
        [PreserveSig]
        Function EndOfStream() As Long
        [PreserveSig]
        Function BeginFlush() As Long
        [PreserveSig]
        Function EndFlush() As Long
        [PreserveSig]
        Function NewSegment(ByVal tStart As LongLong /* LongLong */, ByVal tStop As LongLong /* LongLong */, ByVal dRate As Double) As Long
    End Interface

    [InterfaceId("56A86892-0AD4-11CE-B03A-0020AF0BA770")]
    [OleAutomation(False)]
    Interface IEnumPins Extends stdole.IUnknown
        [PreserveSig]
        Function Next(ByVal cPins As Long, ByRef ppPins As IPin, ByRef pcFetched As Long) As Long
        [PreserveSig]
        Function Skip(ByVal cPins As Long) As Long
        [PreserveSig]
        Function Reset() As Long
        [PreserveSig]
        Function Clone(ByRef ppenum As IEnumPins) As Long
    End Interface

    [InterfaceId("56A86897-0AD4-11CE-B03A-0020AF0BA770")]
    [OleAutomation(False)]
    Interface IReferenceClock Extends stdole.IUnknown
        [PreserveSig]
        Function GetTime(ByVal pTime As LongLong /* LongLong */) As Long
        [PreserveSig]
        Function AdviseTime(ByVal baseTime As LongLong /* LongLong */, ByVal streamTime As LongLong /* LongLong */, ByVal hEvent As LongPtr, ByRef pdwAdviseCookie As LongPtr) As Long
        [PreserveSig]
        Function AdvisePeriodic(ByVal startTime As LongLong /* LongLong */, ByVal periodTime As LongLong /* LongLong */, ByVal hSemaphore As LongPtr, ByRef pdwAdviseCookie As LongPtr) As Long
        [PreserveSig]
        Function Unadvise(ByVal dwAdviseCookie As LongPtr) As Long
    End Interface

    [InterfaceId("56A86899-0AD4-11CE-B03A-0020AF0BA770")]
    [OleAutomation(False)]
    Interface IMediaFilter Extends IPersist
        [PreserveSig]
        Function Stop() As Long
        [PreserveSig]
        Function Pause() As Long
        [PreserveSig]
        Function Run(ByVal tStart As LongLong /* LongLong */) As Long
        [PreserveSig]
        Function GetState(ByVal dwMilliSecsTimeout As Long, ByRef State As FILTER_STATE) As Long
        [PreserveSig]
        Function SetSyncSource(ByVal pClock As IReferenceClock) As Long
        [PreserveSig]
        Function GetSyncSource(ByRef pClock As IReferenceClock) As Long
    End Interface

    [InterfaceId("56A86895-0AD4-11CE-B03A-0020AF0BA770")]
    [OleAutomation(False)]
    Interface IBaseFilter Extends IMediaFilter
        [PreserveSig]
        Function EnumPins(ByRef ppenum As IEnumPins) As Long
        [PreserveSig]
        Function FindPin(ByVal lpszId As LongPtr, ByRef ppPin As IPin) As Long
        [PreserveSig]
        Function QueryFilterInfo(ByRef pInfo As FILTER_INFO) As Long
        [PreserveSig]
        Function JoinFilterGraph(ByVal pGraph As IFilterGraph, ByVal pName As LongPtr) As Long
        [PreserveSig]
        Function QueryVendorInfo(ByRef pVendorInfo As LongPtr) As Long
    End Interface

    [InterfaceId("56A86893-0AD4-11CE-B03A-0020AF0BA770")]
    [OleAutomation(False)]
    Interface IEnumFilters Extends stdole.IUnknown
        [PreserveSig]
        Function Next(ByVal cFilters As Long, ByRef ppFilter As IBaseFilter, ByRef pcFetched As Long) As Long
        [PreserveSig]
        Function Skip(ByVal cFilters As Long) As Long
        [PreserveSig]
        Function Reset() As Long
        [PreserveSig]
        Function Clone(ByRef ppenum As IEnumFilters) As Long
    End Interface

    [InterfaceId("56A8689F-0AD4-11CE-B03A-0020AF0BA770")]
    [OleAutomation(False)]
    Interface IFilterGraph Extends stdole.IUnknown
        [PreserveSig]
        Function AddFilter(ByVal pFilter As IBaseFilter, ByVal pName As LongPtr) As Long
        [PreserveSig]
        Function RemoveFilter(ByVal pFilter As IBaseFilter) As Long
        [PreserveSig]
        Function EnumFilters(ByRef ppenum As IEnumFilters) As Long
        [PreserveSig]
        Function FindFilterByName(ByVal pName As LongPtr, ByRef ppFilter As IBaseFilter) As Long
        [PreserveSig]
        Function ConnectDirect(ByVal ppinOut As IPin, ByVal ppinIn As IPin, ByRef pmt As AM_MEDIA_TYPE) As Long
        [PreserveSig]
        Function Reconnect(ByVal pPin As IPin) As Long
        [PreserveSig]
        Function Disconnect(ByVal pPin As IPin) As Long
        [PreserveSig]
        Function SetDefaultSyncSource() As Long
    End Interface

    [InterfaceId("A2104830-7C70-11CF-8BCE-00AA00A3F1A6")]
    [OleAutomation(False)]
    Interface IFileSinkFilter Extends stdole.IUnknown
        [PreserveSig]
        Function SetFileName(ByVal pszFileName As LongPtr, ByRef pmt As AM_MEDIA_TYPE) As Long
        [PreserveSig]
        Function GetCurFile(ByRef ppszFileName As LongPtr, ByRef pmt As AM_MEDIA_TYPE) As Long
    End Interface

    [InterfaceId("670D1D20-A068-11D0-B3F0-00AA003761C5")]
    [OleAutomation(False)]
    Interface IAMCopyCaptureFileProgress Extends stdole.IUnknown
        Sub Progress(ByVal iProgress As Long)
    End Interface

    [InterfaceId("56A868A9-0AD4-11CE-B03A-0020AF0BA770")]
    [OleAutomation(False)]
    Interface IGraphBuilder Extends IFilterGraph
        [PreserveSig]
        Function Connect(ByVal ppinOut As IPin, ByVal ppinIn As IPin) As Long
        [PreserveSig]
        Function Render(ByVal ppinOut As IPin) As Long
        [PreserveSig]
        Function RenderFile(ByVal lpcwstrFile As LongPtr, ByVal lpcwstrPlayList As LongPtr) As Long
        [PreserveSig]
        Function AddSourceFilter(ByVal lpcwstrFileName As String, ByVal lpcwstrFilterName As LongPtr, ByRef ppFilter As IBaseFilter) As Long
        [PreserveSig]
        Function SetLogFile(ByVal hFile As LongPtr) As Long
        [PreserveSig]
        Function Abort() As Long
        [PreserveSig]
        Function ShouldOperationContinue() As Long
    End Interface

    [InterfaceId("36B73882-C2C8-11CF-8B46-00805F6CEF60")]
    [OleAutomation(False)]
    Interface IFilterGraph2 Extends IGraphBuilder
        [PreserveSig]
        Function AddSourceFilterForMoniker(ByVal pMoniker As IMoniker, ByVal pCtx As IBindCtx, ByVal lpcwstrFilterName As LongPtr, ByRef ppFilter As IBaseFilter) As Long
        [PreserveSig]
        Function ReconnectEx(ByVal pPin As IPin, ByVal pmt As LongPtr) As Long
        [PreserveSig]
        Function RenderEx(ByVal pPin As IPin, ByVal dwFlags As AM_RENSDEREXFLAGS, ByRef pvContext As Long) As Long
    End Interface

    [InterfaceId("AAF38154-B80B-422F-91E6-B66467509A07")]
    [OleAutomation(False)]
    Interface IFilterGraph3 Extends IFilterGraph2
        [PreserveSig]
        Function SetSyncSourceEx(ByVal pClockForMostOfFilterGraph As IReferenceClock, ByVal pClockForFilter As IReferenceClock, ByVal pFilter As IBaseFilter) As Long
    End Interface

    [InterfaceId("BF87B6E0-8C27-11D0-B3F0-00AA003761C5")]
    [OleAutomation(False)]
    Interface ICaptureGraphBuilder Extends stdole.IUnknown
        [PreserveSig]
        Function SetFiltergraph(ByVal pfg As IGraphBuilder) As Long
        [PreserveSig]
        Function GetFiltergraph(ByRef ppfg As IGraphBuilder) As Long
        [PreserveSig]
        Function SetOutputFileName(ByRef pType As UUID, ByVal lpstrFile As LongPtr, ByRef ppf As IBaseFilter, ByRef ppSink As IFileSinkFilter) As Long
        [PreserveSig]
        Function FindInterface(ByRef pCategory As UUID, ByVal pf As IBaseFilter, ByRef riid As UUID, ByRef ppint As Any) As Long
        [PreserveSig]
        Function RenderStream(ByRef pCategory As UUID, ByVal pSource As IUnknown, ByVal pfCompressor As IBaseFilter, ByVal pfRenderer As IBaseFilter) As Long
        [PreserveSig]
        Function ControlStream(ByRef pCategory As UUID, ByVal pFilter As IBaseFilter, ByVal pStart As LongLong /* LongLong */, ByVal pStop As LongLong /* LongLong */, ByVal wStartCookie As Integer, ByVal wStopCookie As Integer) As Long
        [PreserveSig]
        Function AllocCapFile(ByVal lpStr As LongPtr, ByVal dwlSize As LongLong) As Long
        [PreserveSig]
        Function CopyCaptureFile(ByVal lpwstrOld As LongPtr, ByVal lpwstrNew As LongPtr, ByVal fAllowEscAbort As Long, ByVal pCallback As IAMCopyCaptureFileProgress) As Long
    End Interface

    [InterfaceId("93E5A4E0-2D50-11D2-ABFA-00A0C9C6E38D")]
    [OleAutomation(False)]
    Interface ICaptureGraphBuilder2 Extends stdole.IUnknown
        [PreserveSig]
        Function SetFiltergraph(ByVal pfg As IGraphBuilder) As Long
        [PreserveSig]
        Function GetFiltergraph(ByRef ppfg As IGraphBuilder) As Long
        [PreserveSig]
        Function SetOutputFileName(ByRef pType As UUID, ByVal lpstrFile As LongPtr, ByRef ppf As IBaseFilter, ByRef ppSink As IFileSinkFilter) As Long
        [PreserveSig]
        Function FindInterface(ByRef pCategory As UUID, ByRef pType As UUID, ByVal pf As IBaseFilter, ByRef riid As UUID, ByRef ppint As Any) As Long
        [PreserveSig]
        Function RenderStream(ByRef pCategory As UUID, ByRef pType As UUID, ByVal pSource As IUnknown, ByVal pfCompressor As IBaseFilter, ByVal pfRenderer As IBaseFilter) As Long
        [PreserveSig]
        Function ControlStream(ByRef pCategory As UUID, ByRef pType As UUID, ByVal pFilter As IBaseFilter, ByVal pStart As LongLong /* LongLong */, ByVal pStop As LongLong /* LongLong */, ByVal wStartCookie As Integer, ByVal wStopCookie As Integer) As Long
        [PreserveSig]
        Function AllocCapFile(ByVal lpStr As LongPtr, ByVal dwlSize As LongLong) As Long
        [PreserveSig]
        Function CopyCaptureFile(ByVal lpwstrOld As LongPtr, ByVal lpwstrNew As LongPtr, ByVal fAllowEscAbort As Long, ByVal pCallback As IAMCopyCaptureFileProgress) As Long
        [PreserveSig]
        Function FindPin(ByVal pSource As IUnknown, ByVal pindir As PIN_DIRECTION, ByRef pCategory As UUID, ByRef pType As UUID, ByVal fUnconnected As Long, ByVal num As Long, ByRef ppPin As IPin) As Long
    End Interface

    [InterfaceId("FA2AA8F1-8B62-11D0-A520-000000000000")]
    [OleAutomation(False)]
    Interface IAMNetShowConfig Extends IDispatch
        [PreserveSig]
        Function get_BufferingTime(ByRef pBufferingTime As Double) As Long
        [PreserveSig]
        Function put_BufferingTime(ByVal BufferingTime As Double) As Long
        [PreserveSig]
        Function get_UseFixedUDPPort(ByVal pUseFixedUDPPort As Long) As Long
        [PreserveSig]
        Function put_UseFixedUDPPort(ByVal UseFixedUDPPort As Long) As Long
        [PreserveSig]
        Function get_FixedUDPPort(ByRef pFixedUDPPort As Long) As Long
        [PreserveSig]
        Function put_FixedUDPPort(ByVal FixedUDPPort As Long) As Long
        [PreserveSig]
        Function get_UseHTTPProxy(ByVal pUseHTTPProxy As Long) As Long
        [PreserveSig]
        Function put_UseHTTPProxy(ByVal UseHTTPProxy As Long) As Long
        [PreserveSig]
        Function get_EnableAutoProxy(ByVal pEnableAutoProxy As Long) As Long
        [PreserveSig]
        Function put_EnableAutoProxy(ByVal EnableAutoProxy As Long) As Long
        [PreserveSig]
        Function get_HTTPProxyHost(ByRef pbstrHTTPProxyHost As String) As Long
        [PreserveSig]
        Function put_HTTPProxyHost(ByVal bstrHTTPProxyHost As String) As Long
        [PreserveSig]
        Function get_HTTPProxyPort(ByRef pHTTPProxyPort As Long) As Long
        [PreserveSig]
        Function put_HTTPProxyPort(ByVal HTTPProxyPort As Long) As Long
        [PreserveSig]
        Function get_EnableMulticast(ByVal pEnableMulticast As Long) As Long
        [PreserveSig]
        Function put_EnableMulticast(ByVal EnableMulticast As Long) As Long
        [PreserveSig]
        Function get_EnableUDP(ByVal pEnableUDP As Long) As Long
        [PreserveSig]
        Function put_EnableUDP(ByVal EnableUDP As Long) As Long
        [PreserveSig]
        Function get_EnableTCP(ByVal pEnableTCP As Long) As Long
        [PreserveSig]
        Function put_EnableTCP(ByVal EnableTCP As Long) As Long
        [PreserveSig]
        Function get_EnableHTTP(ByVal pEnableHTTP As Long) As Long
        [PreserveSig]
        Function put_EnableHTTP(ByVal EnableHTTP As Long) As Long
    End Interface

    [InterfaceId("FA2AA8F2-8B62-11D0-A520-000000000000")]
    [OleAutomation(False)]
    Interface IAMChannelInfo Extends IDispatch
        [PreserveSig]
        Function get_ChannelName(ByRef pbstrChannelName As String) As Long
        [PreserveSig]
        Function get_ChannelDescription(ByRef pbstrChannelDescription As String) As Long
        [PreserveSig]
        Function get_ChannelURL(ByRef pbstrChannelURL As String) As Long
        [PreserveSig]
        Function get_ContactAddress(ByRef pbstrContactAddress As String) As Long
        [PreserveSig]
        Function get_ContactPhone(ByRef pbstrContactPhone As String) As Long
        [PreserveSig]
        Function get_ContactEmail(ByRef pbstrContactEmail As String) As Long
    End Interface

    [InterfaceId("FA2AA8F3-8B62-11D0-A520-000000000000")]
    [OleAutomation(False)]
    Interface IAMNetworkStatus Extends IDispatch
        [PreserveSig]
        Function get_ReceivedPackets(ByRef pReceivedPackets As Long) As Long
        [PreserveSig]
        Function get_RecoveredPackets(ByRef pRecoveredPackets As Long) As Long
        [PreserveSig]
        Function get_LostPackets(ByRef pLostPackets As Long) As Long
        [PreserveSig]
        Function get_ReceptionQuality(ByRef pReceptionQuality As Long) As Long
        [PreserveSig]
        Function get_BufferingCount(ByRef pBufferingCount As Long) As Long
        [PreserveSig]
        Function get_IsBroadcast(ByVal pIsBroadcast As Integer) As Long
        [PreserveSig]
        Function get_BufferingProgress(ByRef pBufferingProgress As Long) As Long
    End Interface

    [InterfaceId("FA2AA8F5-8B62-11D0-A520-000000000000")]
    [OleAutomation(False)]
    Interface IAMNetShowExProps Extends IDispatch
        [PreserveSig]
        Function get_SourceProtocol(ByRef pSourceProtocol As Long) As Long
        [PreserveSig]
        Function get_Bandwidth(ByRef pBandwidth As Long) As Long
        [PreserveSig]
        Function get_ErrorCorrection(ByRef pbstrErrorCorrection As String) As Long
        [PreserveSig]
        Function get_CodecCount(ByRef pCodecCount As Long) As Long
        [PreserveSig]
        Function GetCodecInstalled(ByRef CodecNum As Long, ByVal pCodecInstalled As Integer) As Long
        [PreserveSig]
        Function GetCodecDescription(ByRef CodecNum As Long, ByRef pbstrCodecDescription As String) As Long
        [PreserveSig]
        Function GetCodecURL(ByRef CodecNum As Long, ByRef pbstrCodecURL As String) As Long
        [PreserveSig]
        Function get_CreationDate(ByRef pCreationDate As Double) As Long
        [PreserveSig]
        Function get_SourceLink(ByRef pbstrSourceLink As String) As Long
    End Interface

    [InterfaceId("FA2AA8F6-8B62-11D0-A520-000000000000")]
    [OleAutomation(False)]
    Interface IAMExtendedErrorInfo Extends IDispatch
        [PreserveSig]
        Function get_HasError(ByVal pHasError As Long) As Long
        [PreserveSig]
        Function get_ErrorDescription(ByRef pbstrErrorDescription As String) As Long
        [PreserveSig]
        Function get_ErrorCode(ByRef pErrorCode As Long) As Long
    End Interface

    [InterfaceId("AAE7E4E2-6388-11D1-8D93-006097C9A2B2")]
    [OleAutomation(False)]
    Interface IAMNetShowPreroll Extends IDispatch
        [PreserveSig]
        Function put_Preroll(ByVal fPreroll As Long) As Long
        [PreserveSig]
        Function get_Preroll(ByVal pfPreroll As Long) As Long
    End Interface

    [InterfaceId("4746B7C8-700E-11D1-BECC-00C04FB6E937")]
    [OleAutomation(False)]
    Interface IDShowPlugin Extends IUnknown
        [PreserveSig]
        Function get_URL(ByRef pURL As String) As Long
        [PreserveSig]
        Function get_UserAgent(ByRef pUserAgent As String) As Long
    End Interface

    [InterfaceId("FA2AA8F4-8B62-11D0-A520-000000000000")]
    [OleAutomation(False)]
    Interface IAMMediaContent Extends IDispatch
        [PreserveSig]
        Function get_AuthorName(ByRef pbstrAuthorName As String) As Long
        [PreserveSig]
        Function get_Title(ByRef pbstrTitle As String) As Long
        [PreserveSig]
        Function get_Rating(ByRef pbstrRating As String) As Long
        [PreserveSig]
        Function get_Description(ByRef pBstrDescription As String) As Long
        [PreserveSig]
        Function get_Copyright(ByRef pbstrCopyright As String) As Long
        [PreserveSig]
        Function get_BaseURL(ByRef pbstrBaseURL As String) As Long
        [PreserveSig]
        Function get_LogoURL(ByRef pbstrLogoURL As String) As Long
        [PreserveSig]
        Function get_LogoIconURL(ByRef pbstrLogoURL As String) As Long
        [PreserveSig]
        Function get_WatermarkURL(ByRef pbstrWatermarkURL As String) As Long
        [PreserveSig]
        Function get_MoreInfoURL(ByRef pbstrMoreInfoURL As String) As Long
        [PreserveSig]
        Function get_MoreInfoBannerImage(ByRef pbstrMoreInfoBannerImage As String) As Long
        [PreserveSig]
        Function get_MoreInfoBannerURL(ByRef pbstrMoreInfoBannerURL As String) As Long
        [PreserveSig]
        Function get_MoreInfoText(ByRef pbstrMoreInfoText As String) As Long
    End Interface

    [InterfaceId("FA2AA8F9-8B62-11D0-A520-000000000000")]
    [OleAutomation(False)]
    Interface IAMExtendedSeeking Extends IDispatch
        [PreserveSig]
        Function get_ExSeekCapabilities(ByRef pExCapabilities As AMExtendedSeekingCapabilities) As Long
        [PreserveSig]
        Function get_MarkerCount(ByRef pMarkerCount As Long) As Long
        [PreserveSig]
        Function get_CurrentMarker(ByRef pCurrentMarker As Long) As Long
        [PreserveSig]
        Function GetMarkerTime(ByVal MarkerNum As Long, ByRef pMarkerTime As Double) As Long
        [PreserveSig]
        Function GetMarkerName(ByVal MarkerNum As Long, ByRef pbstrMarkerName As String) As Long
        [PreserveSig]
        Function put_PlaybackSpeed(ByVal Speed As Double) As Long
        [PreserveSig]
        Function get_PlaybackSpeed(ByRef pSpeed As Double) As Long
    End Interface

    [InterfaceId("CE8F78C1-74D9-11D2-B09D-00A0C9A81117")]
    [OleAutomation(False)]
    Interface IAMMediaContent2 Extends IDispatch
        [PreserveSig]
        Function get_MediaParameter(ByVal EntryNum As Long, ByVal bstrName As String, ByRef pbstrValue As String) As Long
        [PreserveSig]
        Function get_MediaParameterName(ByVal EntryNum As Long, ByVal index As Long, ByRef pBstrName As String) As Long
        [PreserveSig]
        Function get_PlaylistCount(ByRef pNumberEntries As Long) As Long
    End Interface

    [InterfaceId("C6E13350-30AC-11D0-A18C-00A0C9118956")]
    [OleAutomation(False)]
    Interface IAMAnalogVideoDecoder Extends stdole.IUnknown
        [PreserveSig]
        Function get_AvailableTVFormats(ByRef lAnalogVideoStandard As Long) As Long
        [PreserveSig]
        Function put_TVFormat(ByVal lAnalogVideoStandard As Long) As Long
        [PreserveSig]
        Function get_TVFormat(ByRef plAnalogVideoStandard As Long) As Long
        [PreserveSig]
        Function get_HorizontalLocked(ByRef plLocked As Long) As Long
        [PreserveSig]
        Function put_VCRHorizontalLocking(ByVal lVCRHorizontalLocking As Long) As Long
        [PreserveSig]
        Function get_VCRHorizontalLocking(ByRef plVCRHorizontalLocking As Long) As Long
        [PreserveSig]
        Function get_NumberOfLines(ByRef plNumberOfLines As Long) As Long
        [PreserveSig]
        Function put_OutputEnable(ByVal lOutputEnable As Long) As Long
        [PreserveSig]
        Function get_OutputEnable(ByRef plOutputEnable As Long) As Long
    End Interface

    [InterfaceId("CF7B26FC-9A00-485B-8147-3E789D5E8F67")]
    [OleAutomation(False)]
    Interface IAMAsyncReaderTimestampScaling Extends stdole.IUnknown
        [PreserveSig]
        Function GetTimestampMode(ByVal pfRaw As Long) As Long
        [PreserveSig]
        Function SetTimestampMode(ByVal fRaw As Long) As Long
    End Interface

    [InterfaceId("54C39221-8380-11D0-B3F0-00AA003761C5")]
    [OleAutomation(False)]
    Interface IAMAudioInputMixer Extends stdole.IUnknown
        [PreserveSig]
        Function put_Enable(ByVal fEnable As Long) As Long
        [PreserveSig]
        Function get_Enable(ByVal pfEnable As Long) As Long
        [PreserveSig]
        Function put_Mono(ByVal fMono As Long) As Long
        [PreserveSig]
        Function get_Mono(ByVal pfMono As Long) As Long
        [PreserveSig]
        Function put_MixLevel(ByVal Level As Double) As Long
        [PreserveSig]
        Function get_MixLevel(ByRef pLevel As Double) As Long
        [PreserveSig]
        Function put_Pan(ByVal Pan As Double) As Long
        [PreserveSig]
        Function get_Pan(ByRef pPan As Double) As Long
        [PreserveSig]
        Function put_Loudness(ByVal fLoudness As Long) As Long
        [PreserveSig]
        Function get_Loudness(ByVal pfLoudness As Long) As Long
        [PreserveSig]
        Function put_Treble(ByVal Treble As Double) As Long
        [PreserveSig]
        Function get_Treble(ByRef pTreble As Double) As Long
        [PreserveSig]
        Function get_TrebleRange(ByRef pRange As Double) As Long
        [PreserveSig]
        Function put_Bass(ByVal Bass As Double) As Long
        [PreserveSig]
        Function get_Bass(ByRef pBass As Double) As Long
        [PreserveSig]
        Function get_BassRange(ByRef pRange As Double) As Long
    End Interface

    [InterfaceId("22320CB2-D41A-11D2-BF7C-D7CB9DF0BF93")]
    [OleAutomation(False)]
    Interface IAMAudioRendererStats Extends stdole.IUnknown
        [PreserveSig]
        Function GetStatParam(ByVal dwParam As Long, ByRef pdwParam1 As Long, ByRef pdwParam2 As Long) As Long
    End Interface

    [InterfaceId("56ED71A0-AF5F-11D0-B3F0-00AA003761C5")]
    [OleAutomation(False)]
    Interface IAMBufferNegotiation Extends stdole.IUnknown
        [PreserveSig]
        Function SuggestAllocatorProperties(ByRef pprop As ALLOCATOR_PROPERTIES) As Long
        [PreserveSig]
        Function GetAllocatorProperties(ByRef pprop As ALLOCATOR_PROPERTIES) As Long
    End Interface

    [InterfaceId("C6E13370-30AC-11D0-A18C-00A0C9118956")]
    [OleAutomation(False)]
    Interface IAMCameraControl Extends stdole.IUnknown
        [PreserveSig]
        Function GetRange(ByVal Property As Long, ByRef pMin As Long, ByRef pMax As Long, ByRef pSteppingDelta As Long, ByRef pDefault As Long, ByRef pCapsFlags As Long) As Long
        [PreserveSig]
        [Description("ccSet renamed from Set; VB keywords can't be function names.")]
        Function ccSet(ByVal Property As Long, ByVal lValue As Long, ByVal flags As Long) As Long
        [PreserveSig]
        [Description("ccGet renamed from Get; VB keywords can't be function names.")]
        Function ccGet(ByVal Property As Long, ByRef lValue As Long, ByRef flags As Long) As Long
    End Interface
    [InterfaceId("6FEDED3E-0FF1-4901-A2F1-43F7012C8515")]
    [OleAutomation(False)]
    Interface IAMCertifiedOutputProtection Extends stdole.IUnknown
        [PreserveSig]
        Function KeyExchange(ByRef pRandom As UUID, ByRef VarLenCertGH As LongPtr, ByRef pdwLengthCertGH As Long) As Long
        [PreserveSig]
        Function SessionSequenceStart(ByRef pSig As AMCOPPSignature) As Long
        [PreserveSig]
        Function ProtectionCommand(ByRef cmd As AMCOPPCommand) As Long
        [PreserveSig]
        Function ProtectionStatus(ByRef pStatusInput As AMCOPPStatusInput, ByRef pStatusOutput As AMCOPPStatusOutput) As Long
    End Interface

    [InterfaceId("4D5466B0-A49C-11D1-ABE8-00A0C905F375")]
    [OleAutomation(False)]
    Interface IAMClockAdjust Extends stdole.IUnknown
        [PreserveSig]
        Function SetClockDelta(ByVal rtDelta As LongLong /* LongLong */) As Long
    End Interface

    [InterfaceId("9FD52741-176D-4B36-8F51-CA8F933223BE")]
    [OleAutomation(False)]
    Interface IAMClockSlave Extends stdole.IUnknown
        [PreserveSig]
        Function SetErrorTolerance(ByVal dwTolerance As Long) As Long
        [PreserveSig]
        Function GetErrorTolerance(ByRef pdwTolerance As Long) As Long
    End Interface

    [InterfaceId("C6E13380-30AC-11D0-A18C-00A0C9118956")]
    [OleAutomation(False)]
    Interface IAMCrossbar Extends stdole.IUnknown
        [PreserveSig]
        Function get_PinCounts(ByRef OutputPinCount As Long, ByRef InputPinCount As Long) As Long
        [PreserveSig]
        Function CanRoute(ByVal OutputPinIndex As Long, ByVal InputPinIndex As Long) As Long
        [PreserveSig]
        Function Route(ByVal OutputPinIndex As Long, ByVal InputPinIndex As Long) As Long
        [PreserveSig]
        Function get_IsRoutedTo(ByVal OutputPinIndex As Long, ByRef InputPinIndex As Long) As Long
        [PreserveSig]
        Function get_CrossbarPinInfo(ByVal IsInputPin As Long, ByVal PinIndex As Long, ByRef PinIndexRelated As Long, ByRef PhysicalType As Long) As Long
    End Interface

    [InterfaceId("C0DFF467-D499-4986-972B-E1D9090FA941")]
    [OleAutomation(False)]
    Interface IAMDecoderCaps Extends stdole.IUnknown
        [PreserveSig]
        Function GetDecoderCaps(ByVal dwCapIndex As Long, ByRef lpdwCap As Long) As Long
    End Interface

    [InterfaceId("56A8689A-0AD4-11CE-B03A-0020AF0BA770")]
    [OleAutomation(False)]
    Interface IMediaSample Extends stdole.IUnknown
        [PreserveSig]
        Function GetPointer(ByRef pBuffer As Long) As Long
        [PreserveSig]
        Function GetSize() As Long
        [PreserveSig]
        Function GetTime(ByVal pTimeStart As LongLong /* LongLong */, ByVal pTimeEnd As LongLong /* LongLong */) As Long
        [PreserveSig]
        Function SetTime(ByVal pTimeStart As LongLong /* LongLong */, ByVal pTimeEnd As LongLong /* LongLong */) As Long
        [PreserveSig]
        Function IsSyncPoint() As Long
        [PreserveSig]
        Function SetSyncPoint(ByVal bIsSyncPoint As Long) As Long
        [PreserveSig]
        Function IsPreroll() As Long
        [PreserveSig]
        Function SetPreroll(ByVal bIsPreroll As Long) As Long
        [PreserveSig]
        Function GetActualDataLength() As Long
        [PreserveSig]
        Function SetActualDataLength(ByVal MIDL__IMediaSample0000 As Long) As Long
        [PreserveSig]
        Function GetMediaType(ByRef ppMediaType As AM_MEDIA_TYPE) As Long
        [PreserveSig]
        Function SetMediaType(ByRef pMediaType As AM_MEDIA_TYPE) As Long
        [PreserveSig]
        Function IsDiscontinuity() As Long
        [PreserveSig]
        Function SetDiscontinuity(ByVal bDiscontinuity As Long) As Long
        [PreserveSig]
        Function GetMediaTime(ByVal pTimeStart As LongLong /* LongLong */, ByVal pTimeEnd As LongLong /* LongLong */) As Long
        [PreserveSig]
        Function SetMediaTime(ByVal pTimeStart As LongLong /* LongLong */, ByVal pTimeEnd As LongLong /* LongLong */) As Long
    End Interface
    
    [InterfaceId("36B73884-C2C8-11CF-8B46-00805F6CEF60")]
    [OleAutomation(False)]
    Interface IMediaSample2 Extends IMediaSample
        [PreserveSig]
        Function GetProperties(ByVal cbProperties As Long, ByRef pbProperties As Byte) As Long
        [PreserveSig]
        Function SetProperties(ByVal cbProperties As Long, ByRef pbProperties As Byte) As Long
    End Interface

    [InterfaceId("68961E68-832B-41EA-BC91-63593F3E70E3")]
    [OleAutomation(False)]
    Interface IMediaSample2Config Extends stdole.IUnknown
        Sub GetSurface(ByRef ppDirect3DSurface9 As IUnknown)
    End Interface

    [InterfaceId("56A8689C-0AD4-11CE-B03A-0020AF0BA770")]
    [OleAutomation(False)]
    Interface IMemAllocator Extends stdole.IUnknown
        Sub SetProperties(ByRef pRequest As ALLOCATOR_PROPERTIES, ByRef pActual As ALLOCATOR_PROPERTIES)
        Sub GetProperties(ByRef pProps As ALLOCATOR_PROPERTIES)
        Sub Commit()
        Sub Decommit()
        Sub GetBuffer(ByRef ppBuffer As IMediaSample, ByVal pStartTime As LongLong /* LongLong */, ByVal pEndTime As LongLong /* LongLong */)
        Sub ReleaseBuffer(ByVal pBuffer As IMediaSample)
    End Interface

    [InterfaceId("0579154A-2B53-4994-B0D0-E773148EFF85")]
    [OleAutomation(False)]
    Interface ISampleGrabberCB Extends stdole.IUnknown
        Sub SampleCB(ByVal SampleTime As Double, ByVal pSample As IMediaSample)
        Sub BufferCB(ByVal SampleTime As Double, ByRef pBuffer As Byte, ByVal BufferLen As Long)
    End Interface

    [InterfaceId("6B652FFF-11FE-4FCE-92AD-0266B5D7C78F")]
    [OleAutomation(False)]
    Interface ISampleGrabber Extends stdole.IUnknown
        Sub SetOneShot(ByVal OneShot As Long)
        Sub SetMediaType(ByRef pType As AM_MEDIA_TYPE)
        Sub GetConnectedMediaType(ByRef pType As AM_MEDIA_TYPE)
        Sub SetBufferSamples(ByVal BufferThem As Long)
        Sub GetCurrentBuffer(ByRef pBufferSize As Long, ByRef pBuffer As Any)
        Sub GetCurrentSample(ByRef ppSample As IMediaSample)
        Sub SetCallback(ByVal pCallback As ISampleGrabberCB, ByVal WhichMethodToCallback As Long)
    End Interface

    [InterfaceId("7FA864F8-EBEF-4D07-97E8-A410D7CEEDEB")]
    [Description("User callback object interface")]
    [OleAutomation(False)]
    Interface ISampleGrabberBuffer Extends ISampleGrabberCB
        [Description("Reset current time of sample")]
        Sub Reset()
        [PreserveSig]
        [Description("Calculate offset (in bytes) by specified time of sample")]
        Function GetOffsetByTime(ByVal SampleTime As Double) As Long
    End Interface

    [InterfaceId("B502D1BC-9A57-11D0-8FDE-00C04FD9189D")]
    [OleAutomation(False)]
    Interface IMultiMediaStream Extends stdole.IUnknown
        Sub GetInformation(ByRef pdwFlags As MMSTRM_INFO_FLAGS, ByRef pStreamType As DDS_STREAM_TYPE)
        Sub GetMediaStream(ByRef idPurpose As UUID, ByRef ppMediaStream As IMediaStream)
        Sub EnumMediaStreams(ByVal index As Long, ByRef ppMediaStream As IMediaStream)
        Sub GetState(ByRef pCurrentState As DDS_STREAM_STATE)
        Sub SetState(ByVal NewState As DDS_STREAM_STATE)
        Sub GetTime(ByRef pCurrentTime As LongLong)
        Sub GetDuration(ByRef pDuration As LongLong)
        Sub Seek(ByVal SeekTime As LongLong)
        Sub GetEndOfStreamEventHandle(ByRef phEOS As LongPtr)
    End Interface

    [InterfaceId("B502D1BD-9A57-11D0-8FDE-00C04FD9189D")]
    [OleAutomation(False)]
    Interface IMediaStream Extends stdole.IUnknown
        Sub GetMultiMediaStream(ByRef ppMultiMediaStream As IMultiMediaStream)
        Sub GetInformation(ByRef pPurposeId As UUID, ByRef pType As DDS_STREAM_TYPE)
        Sub SetSameFormat(ByVal pStreamThatHasDesiredFormat As IMediaStream, ByVal dwFlags As Long)
        Sub AllocateSample(ByVal dwFlags As Long, ByRef ppSample As IStreamSample)
        Sub CreateSharedSample(ByVal pExistingSample As IStreamSample, ByVal dwFlags As Long, ByRef ppNewSample As IStreamSample)
        Sub SendEndOfStream(ByVal dwFlags As Long)
    End Interface

    [InterfaceId("B502D1BE-9A57-11D0-8FDE-00C04FD9189D")]
    [OleAutomation(False)]
    Interface IStreamSample Extends stdole.IUnknown
        Sub GetMediaStream(ByRef ppMediaStream As IMediaStream)
        Sub GetSampleTimes(ByRef pStartTime As LongLong, ByRef pEndTime As LongLong, ByRef pCurrentTime As LongLong)
        Sub SetSampleTimes(ByRef pStartTime As LongLong, ByRef pEndTime As LongLong)
        Sub Update(ByVal dwFlags As SSUPDATE_FLAGS, ByVal hEvent As LongPtr, ByVal pfnAPC As LongPtr, ByVal dwAPCData As LongPtr)
        Sub CompletionStatus(ByVal dwFlags As COMPLETION_STATUS_FLAGS, ByVal dwMilliseconds As Long)
    End Interface

    [InterfaceId("BEBE595C-9A6F-11D0-8FDE-00C04FD9189D")]
    [OleAutomation(False)]
    Interface IAMMultiMediaStream Extends IMultiMediaStream
        Sub Initialize(ByVal StreamType As DDS_STREAM_TYPE, ByVal dwFlags As AMMSF_FLAGS, ByVal pFilterGraph As IGraphBuilder)
        Sub GetFiltergraph(ByRef ppGraphBuilder As IGraphBuilder)
        Sub GetFilter(ByRef ppFilter As IMediaStreamFilter)
        Sub AddMediaStream(ByVal pStreamObject As stdole.IUnknown, ByRef PurposeId As UUID, ByVal dwFlags As Long, ByRef ppNewStream As IMediaStream)
        Sub OpenFile(ByVal pszFileName As LongPtr, ByVal dwFlags As AMMSF_RENDERFLAGS)
        Sub OpenMoniker(ByVal pCtx As IBindCtx, ByVal pMoniker As IMoniker, ByVal dwFlags As AMMSF_RENDERFLAGS)
        Sub Render(ByVal dwFlags As AMMSF_RENDERFLAGS)
    End Interface

    [InterfaceId("BEBE595D-9A6F-11D0-8FDE-00C04FD9189D")]
    [OleAutomation(False)]
    Interface IAMMediaStream Extends IMediaStream
        Sub Initialize(ByVal pSourceObject As stdole.IUnknown, ByVal dwFlags As AMS_INIT_FLAGS, ByRef PurposeId As UUID, ByVal StreamType As DDS_STREAM_TYPE)
        Sub SetState(ByVal State As FILTER_STATE)
        Sub JoinAMMultiMediaStream(ByVal pAMMultiMediaStream As IAMMultiMediaStream)
        Sub JoinFilter(ByVal pMediaStreamFilter As IMediaStreamFilter)
        Sub JoinFilterGraph(ByVal pFilterGraph As IFilterGraph)
    End Interface

    [InterfaceId("BEBE595E-9A6F-11D0-8FDE-00C04FD9189D")]
    [OleAutomation(False)]
    Interface IMediaStreamFilter Extends IBaseFilter
        Sub AddMediaStream(ByVal pAMMediaStream As IAMMediaStream)
        Sub GetMediaStream(ByRef idPurpose As UUID, ByRef ppMediaStream As IMediaStream)
        Sub EnumMediaStreams(ByVal index As Long, ByRef ppMediaStream As IMediaStream)
        Sub SupportSeeking(ByVal bRenderer As BOOL)
        Sub ReferenceTimeToStreamTime(ByVal pTime As LongLong)
        Sub GetCurrentStreamTime(ByVal pCurrentStreamTime As LongLong)
        Sub WaitUntil(ByVal WaitStreamTime As LongLong)
        Sub Flush(ByVal bCancelEOS As BOOL)
        Sub EndOfStream()
    End Interface

    [InterfaceId("AB6B4AFC-F6E4-11D0-900D-00C04FD9189D")]
    [OleAutomation(False)]
    Interface IDirectDrawMediaSampleAllocator Extends stdole.IUnknown
        Sub GetDirectDraw(ByRef ppDirectDraw As stdole.IUnknown)
    End Interface

    [InterfaceId("AB6B4AFE-F6E4-11D0-900D-00C04FD9189D")]
    [OleAutomation(False)]
    Interface IDirectDrawMediaSample Extends stdole.IUnknown
        Sub GetSurfaceAndReleaseLock(ByRef ppDirectDrawSurface As stdole.IUnknown, ByRef pRect As RECT)
        Sub LockMediaSamplePointer()
    End Interface

    [InterfaceId("AB6B4AFA-F6E4-11D0-900D-00C04FD9189D")]
    [OleAutomation(False)]
    Interface IAMMediaTypeStream Extends IMediaStream
        Sub GetFormat(ByRef pMediaType As AM_MEDIA_TYPE, ByVal dwFlags As Long)
        Sub SetFormat(ByRef pMediaType As AM_MEDIA_TYPE, ByVal dwFlags As Long)
        Sub CreateSample(ByVal lSampleSize As Long, ByRef pbBuffer As Byte, ByVal dwFlags As Long, ByVal pUnkOuter As stdole.IUnknown, ByRef ppAMMediaTypeSample As IAMMediaTypeSample)
        Sub GetStreamAllocatorRequirements(ByRef pProps As ALLOCATOR_PROPERTIES)
        Sub SetStreamAllocatorRequirements(ByRef pProps As ALLOCATOR_PROPERTIES)
    End Interface

    [InterfaceId("AB6B4AFB-F6E4-11D0-900D-00C04FD9189D")]
    [OleAutomation(False)]
    Interface IAMMediaTypeSample Extends IStreamSample
        Sub SetPointer(ByRef pBuffer As Byte, ByVal lSize As Long)
        Sub GetPointer(ByRef ppBuffer As Byte)
        [PreserveSig]
        Function GetSize() As Long
        Sub GetTime(ByVal pTimeStart As LongLong, ByVal pTimeEnd As LongLong)
        Sub SetTime(ByVal pTimeStart As LongLong, ByVal pTimeEnd As LongLong)
        Sub IsSyncPoint()
        Sub SetSyncPoint(ByVal bIsSyncPoint As BOOL)
        Sub IsPreroll()
        Sub SetPreroll(ByVal bIsPreroll As BOOL)
        [PreserveSig]
        Function GetActualDataLength() As Long
        Sub SetActualDataLength(ByVal Value As Long)
        Sub GetMediaType(ByRef ppMediaType As AM_MEDIA_TYPE)
        Sub SetMediaType(ByRef pMediaType As AM_MEDIA_TYPE)
        Sub IsDiscontinuity()
        Sub SetDiscontinuity(ByVal bDiscontinuity As BOOL)
        Sub GetMediaTime(ByRef pTimeStart As LongLong, ByRef pTimeEnd As LongLong)
        Sub SetMediaTime(ByRef pTimeStart As LongLong, ByRef pTimeEnd As LongLong)
    End Interface

    [InterfaceId("F7537560-A3BE-11D0-8212-00C04FC32C45")]
    [OleAutomation(False)]
    Interface IAudioMediaStream Extends IMediaStream
        Sub GetFormat(ByRef pWaveFormatCurrent As WAVEFORMATEX)
        Sub SetFormat(ByRef lpWaveFormat As WAVEFORMATEX)
        Sub CreateSample(ByVal pAudioData As IAudioData, ByVal dwFlags As Long, ByRef ppSample As IAudioStreamSample)
    End Interface

    [InterfaceId("345FEE00-ABA5-11D0-8212-00C04FC32C45")]
    [OleAutomation(False)]
    Interface IAudioStreamSample Extends IStreamSample
        Sub GetAudioData(ByRef ppAudio As IAudioData)
    End Interface

    [InterfaceId("327FC560-AF60-11D0-8212-00C04FC32C45")]
    [OleAutomation(False)]
    Interface IMemoryData Extends stdole.IUnknown
        Sub SetBuffer(ByVal cbSize As Long, ByRef pbData As Byte, ByVal dwFlags As Long)
        Sub GetInfo(ByRef pdwLength As Long, ByRef ppbData As LongPtr, ByRef pcbActualData As Long)
        Sub SetActual(ByVal cbDataValid As Long)
    End Interface

    [InterfaceId("54C719C0-AF60-11D0-8212-00C04FC32C45")]
    [OleAutomation(False)]
    Interface IAudioData Extends IMemoryData
        Sub GetFormat(ByRef pWaveFormatCurrent As WAVEFORMATEX)
        Sub SetFormat(ByRef lpWaveFormat As WAVEFORMATEX)
    End Interface
    
    [InterfaceId("F4104FCE-9A70-11D0-8FDE-00C04FD9189D")]
    [OleAutomation(False)]
    Interface IDirectDrawMediaStream Extends IMediaStream
        Sub GetFormat(ByRef pDDSDCurrent As DDSURFACEDESC, ByRef ppDirectDrawPalette As stdole.IUnknown, ByRef pDDSDDesired As DDSURFACEDESC, ByRef pdwFlags As DDSD_FLAGS)
        Sub SetFormat(ByRef pDDSurfaceDesc As DDSURFACEDESC, ByVal pDirectDrawPalette As stdole.IUnknown)
        Sub GetDirectDraw(ByRef ppDirectDraw As stdole.IUnknown)
        Sub SetDirectDraw(ByVal pDirectDraw As stdole.IUnknown)
        Sub CreateSample(ByVal pSurface As stdole.IUnknown, ByRef pRect As RECT, ByVal dwFlags As DDSFF_CS_FLAGS, ByRef ppSample As stdole.IUnknown)
        Sub GetTimePerFrame(ByRef pFrameTime As LongLong)
    End Interface

    [InterfaceId("F4104FCF-9A70-11D0-8FDE-00C04FD9189D")]
    [OleAutomation(False)]
    Interface IDirectDrawStreamSample Extends IStreamSample
        Sub GetSurface(ByRef ppDirectDrawSurface As stdole.IUnknown, ByRef pRect As RECT)
        Sub SetRect(ByRef pRect As RECT)
    End Interface
        
    
    [CoClassId("49C47CE5-9BA4-11D0-8212-00C04FC32C45")]
    [COMCreatable]
    CoClass AMMultiMediaStream
        [Default] Interface IAMMultiMediaStream
        Interface IAMMediaTypeStream
        Interface IAMMediaStream
    End CoClass

    [CoClassId("49C47CE4-9BA4-11D0-8212-00C04FC32C45")]
    [COMCreatable]
    CoClass AMDirectDrawStream
        [Default] Interface IDirectDrawMediaStream
        Interface IAMMediaStream
        Interface IMediaStream
    End CoClass

    [CoClassId("8496E040-AF4C-11D0-8212-00C04FC32C45")]
    [COMCreatable]
    CoClass AMAudioStream
        [Default] Interface IAudioMediaStream
    End CoClass

    [CoClassId("F2468580-AF8A-11D0-8212-00C04FC32C45")]
    [COMCreatable]
    CoClass AMAudioData
        [Default] Interface IAudioData
    End CoClass

    [CoClassId("CF0F2F7C-F7BF-11D0-900D-00C04FD9189D")]
    [COMCreatable]
    CoClass AMMediaTypeStream
        [Default] Interface IAMMediaStream
        Interface IMediaStream
        Interface IPin
    End CoClass


    [CoClassId("C1F400A0-3F08-11D3-9F0B-006008039E37")]
    [COMCreatable]
    [Description("SampleGrabber")]
    CoClass SampleGrabber
        [Default] Interface ISampleGrabber
    End CoClass

    [CoClassId("E436EBB5-524F-11CE-9F53-0020AF0BA770")]
    [COMCreatable]
    [Description("File Source Filter")]
    CoClass AsyncReader
        [Default] Interface IBaseFilter
    End CoClass

    [CoClassId("1B544C20-FD0B-11CE-8C63-00AA0044B51E")]
    [COMCreatable]
    [Description("AVI Splitter")]
    CoClass AviSplitter
        [Default] Interface IBaseFilter
    End CoClass

    [CoClassId("336475D0-942A-11CE-A870-00AA002FEAB5")]
    [COMCreatable]
    [Description("MPEG-I Stream Splitter")]
    CoClass MPEG1Splitter
        [Default] Interface IBaseFilter
    End CoClass

    [CoClassId("CF49D4E0-1115-11CE-B03A-0020AF0BA770")]
    [COMCreatable]
    [Description("AVI Decompressor")]
    CoClass AVIDec
        [Default] Interface IBaseFilter
    End CoClass

    [CoClassId("79376820-07D0-11CF-A24D-0020AFD79767")]
    [COMCreatable]
    [Description("DirectSound Audio Renderer")]
    CoClass DSoundRender
        [Default] Interface IBaseFilter
    End CoClass

    [CoClassId("E30629D1-27E5-11CE-875D-00608CB78066")]
    [COMCreatable]
    [Description("Wave Audio Renderer")]
    CoClass AudioRender
        [Default] Interface IBaseFilter
    End CoClass

    [CoClassId("C1F400A4-3F08-11D3-9F0B-006008039E37")]
    [COMCreatable]
    [Description("Null Renderer")]
    CoClass NullRenderer
        [Default] Interface IBaseFilter
    End CoClass

    [CoClassId("70E102B0-5556-11CE-97C0-00AA0055595A")]
    [COMCreatable]
    [Description("Video Renderer")]
    CoClass VideoRenderer
        [Default] Interface IBaseFilter
    End CoClass

    [CoClassId("6BC1CFFA-8FC1-4261-AC22-CFB4CC38DB50")]
    [COMCreatable]
    [Description("Default Video Renderer")]
    CoClass VideoRendererDefault
        [Default] Interface IBaseFilter
    End CoClass

    [CoClassId("6A08CF80-0E18-11CF-A24D-0020AFD79767")]
    [COMCreatable]
    [Description("ACM wrapper")]
    CoClass ACMWrapper
        [Default] Interface IBaseFilter
    End CoClass

    [CoClassId("D51BD5A1-7548-11CF-A520-0080C77EF58A")]
    [COMCreatable]
    [Description("Wave Parser")]
    CoClass WAVEParser
        [Default] Interface IBaseFilter
    End CoClass

    [CoClassId("B87BEB7B-8D29-423F-AE4D-6582C10175AC")]
    [COMCreatable]
    [Description("Video Mixing Renderer")]
    CoClass VideoMixingRenderer
        [Default] Interface IBaseFilter
    End CoClass

    [CoClassId("51B4ABF3-748F-4E3B-A276-C828330E926A")]
    [COMCreatable]
    [Description("Video Mixing Renderer 9")]
    CoClass VideoMixingRenderer9
        [Default] Interface IBaseFilter
    End CoClass
        
    'CLSID_FilterGraph
    [CoClassId("E436EBB3-524F-11CE-9F53-0020AF0BA770")]
    CoClass FilterGraph
        [Default] Interface IFilterGraph2
    End CoClass
    
    
Module wdDirectShow

Public Const sCLSID_FilgraphManager = "new: {E436EBB3-524F-11CE-9F53-0020AF0BA770}"
Public Const sCLSID_VideoMixingRenderer9 = "new: {51B4ABF3-748F-4E3B-A276-C828330E926A}"
Public Const sCLSID_VideoMixingRenderer = "new: {B87BEB7B-8D29-423F-AE4D-6582C10175AC}"
Public Const sCLSID_WAVEParser = "new: {D51BD5A1-7548-11CF-A520-0080C77EF58A}"
Public Const sCLSID_ACMWrapper = "new: {6A08CF80-0E18-11CF-A24D-0020AFD79767}"
Public Const sCLSID_VideoRendererDefault = "new: {6BC1CFFA-8FC1-4261-AC22-CFB4CC38DB50}"
Public Const sCLSID_VideoRenderer = "new: {70E102B0-5556-11CE-97C0-00AA0055595A}"
Public Const sCLSID_NullRenderer = "new: {C1F400A4-3F08-11D3-9F0B-006008039E37}"
Public Const sCLSID_AudioRender = "new: {E30629D1-27E5-11CE-875D-00608CB78066}"
Public Const sCLSID_DSoundRender = "new: {79376820-07D0-11CF-A24D-0020AFD79767}"
Public Const sCLSID_AVIDec = "new: {CF49D4E0-1115-11CE-B03A-0020AF0BA770}"
Public Const sCLSID_MPEG1Splitter = "new: {336475D0-942A-11CE-A870-00AA002FEAB5}"
Public Const sCLSID_AVISplitter = "new: {1B544C20-FD0B-11CE-8C63-00AA0044B51E}"
Public Const sCLSID_AsyncReader = "new: {E436EBB5-524F-11CE-9F53-0020AF0BA770}"
Public Const sCLSID_SampleGrabber = "new: {C1F400A0-3F08-11D3-9F0B-006008039E37}"

Public Enum OABOOL
            OATRUE = -1
            OAFALSE = 0
End Enum

Public Enum EC_CODES
            EC_SYSTEMBASE = 0
            EC_COMPLETE = 1
            EC_USERABORT = 2
            EC_ERRORABORT = 3
            EC_TIME = 4
            EC_REPAINT = 5
            EC_STREAM_ERROR_STOPPED = 6
            EC_STREAM_ERROR_STILLPLAYING = 7
            EC_ERROR_STILLPLAYING = 8
            EC_PALETTE_CHANGED = 9
            EC_VIDEO_SIZE_CHANGED = 10
            EC_QUALITY_CHANGE = 11
            EC_SHUTTING_DOWN = 12
            EC_CLOCK_CHANGED = 13
            EC_PAUSED = 14
            EC_OPENING_FILE = 16
            EC_BUFFERING_DATA = 17
            EC_FULLSCREEN_LOST = 18
            EC_ACTIVATE = 19
            EC_NEED_RESTART = 20
            EC_WINDOW_DESTROYED = 21
            EC_DISPLAY_CHANGED = 22
            EC_STARVATION = 23
            EC_OLE_EVENT = 24
            EC_NOTIFY_WINDOW = 25
            EC_STREAM_CONTROL_STOPPED = 26
            EC_STREAM_CONTROL_STARTED = 27
            EC_END_OF_SEGMENT = 28
            EC_SEGMENT_STARTED = 29
            EC_LENGTH_CHANGED = 30
            EC_DEVICE_LOST = 31
            EC_SAMPLE_NEEDED = 32
            EC_PROCESSING_LATENCY = 33
            EC_SAMPLE_LATENCY = 34
            EC_SCRUB_TIME = 35
            EC_STEP_COMPLETE = 36
            EC_TIMECODE_AVAILABLE = 48
            EC_EXTDEVICE_MODE_CHANGE = 49
            EC_STATE_CHANGE = 50
            EC_GRAPH_CHANGED = 80
            EC_CLOCK_UNSET = 81
            EC_VMR_RENDERDEVICE_SET = 83
            EC_VMR_SURFACE_FLIPPED = 84
            EC_VMR_RECONNECTION_FAILED = 85
            EC_PREPROCESS_COMPLETE = 86
            EC_CODECAPI_EVENT = 87
            EC_WMT_EVENT_BASE = 593
            EC_WMT_INDEX_EVENT = 593
            EC_WMT_EVENT = 594
            EC_BUILT = 768
            EC_UNBUILT = 769
            EC_SKIP_FRAMES = 37
            EC_PLEASE_REOPEN = 64
            EC_STATUS = 65
            EC_MARKER_HIT = 66
            EC_LOADSTATUS = 67
            EC_FILE_CLOSED = 68
            EC_ERRORABORTEX = 69
            EC_NEW_PIN = 32
            EC_RENDER_FINISHED = 33
            EC_EOS_SOON = 70
            EC_CONTENTPROPERTY_CHANGED = 71
            EC_BANDWIDTHCHANGE = 72
            EC_VIDEOFRAMEREADY = 73
            EC_USER = 32768
End Enum

Public Enum VMR_RENDER_DEVICE_TYPE
            VMR_RENDER_DEVICE_OVERLAY = 1
            VMR_RENDER_DEVICE_VIDMEM = 2
            VMR_RENDER_DEVICE_SYSMEM = 4
End Enum

Public Enum AM_LOADSTATUS
            AM_LOADSTATUS_CLOSED = 0
            AM_LOADSTATUS_LOADINGDESCR = 1
            AM_LOADSTATUS_LOADINGMCAST = 2
            AM_LOADSTATUS_LOCATING = 3
            AM_LOADSTATUS_CONNECTING = 4
            AM_LOADSTATUS_OPENING = 5
            AM_LOADSTATUS_OPEN = 6
End Enum

Public Enum AM_CONTENTPROPERTY
            AM_CONTENTPROPERTY_TITLE = 1
            AM_CONTENTPROPERTY_AUTHOR = 2
            AM_CONTENTPROPERTY_COPYRIGHT = 4
            AM_CONTENTPROPERTY_DESCRIPTION = 8
End Enum

Public Type AM_WMT_EVENT_DATA
            hrStatus As Long
            pData As LongPtr
        End Type

Public Enum AMExtendedSeekingCapabilities
            None = 0
            CanSeek = 1
            CanScan = 2
            MarkerSeek = 4
            ScanWithoutClock = 8
            NoStandardRepaint = 16
            Buffering = 32
            SendsVideoFrameReady = 64
End Enum

Public Type ALLOCATOR_PROPERTIES
            cBuffers As Long
            cbBuffer As Long
            cbAlign As Long
            cbPrefix As Long
End Type

Public Type AMCOPPSignature
	Signature(0 To 255) As Byte
End Type

Public Type AMCOPPCommand
	macKDI As UUID
	guidCommandID As UUID
	dwSequence As Long
	cbSizeData As Long
	CommandData(0 To 4055) As Byte
End Type

Public Type AMCOPPStatusInput
	rApp As UUID
	guidStatusRequestID As UUID
	dwSequence As Long
	cbSizeData As Long
	StatusData(0 To 4055) As Byte
End Type

Public Type AMCOPPStatusOutput
	macKDI As UUID
	cbSizeData As Long
	COPPStatus(0 To 4075) As Byte
End Type

Public Enum AM_SAMPLE_PROPERTY_FLAGS
	AM_SAMPLE_SPLICEPOINT = &H1
	AM_SAMPLE_PREROLL = &H2
	AM_SAMPLE_DATADISCONTINUITY = &H4
	AM_SAMPLE_TYPECHANGED = &H8
	AM_SAMPLE_TIMEVALID = &H10
	AM_SAMPLE_TIMEDISCONTINUITY = &H40
	AM_SAMPLE_FLUSH_ON_PAUSE = &H80
	AM_SAMPLE_STOPVALID = &H100
	AM_SAMPLE_ENDOFSTREAM = &H200
	AM_STREAM_MEDIA = 0
	AM_STREAM_CONTROL = 1
End Enum

Public Type AM_SAMPLE2_PROPERTIES
	cbData As Long
	dwTypeSpecificFlags As Long
	dwSampleFlags As AM_SAMPLE_PROPERTY_FLAGS
	lActual As Long
	tStart As LongLong ' LongLong
	tStop As LongLong ' LongLong
	dwStreamId As Long
	pMediaType As LongPtr ' was AM_MEDIA_TYPE *pMediaType; VB6 can't do that, so instead, pass the pointer from VarPtr
	pbBuffer As LongPtr ' was BYTE *pbBuffer; same issue as above
	cbBuffer As Long
End Type

Public Type AM_MEDIA_TYPE
            majortype As UUID
            Subtype As UUID
            bFixedSizeSamples As Long
            bTemporalCompression As Long
            lSampleSize As Long
            formattype As UUID
            pUnk As LongPtr
            cbFormat As Long
            pbFormat As LongPtr
End Type

Public Enum FILTER_STATE
	State_Stopped = 0
	State_Paused = 1
	State_Running = 2
End Enum

Public Type FILTER_INFO
	achName(0 To 127) As Integer
	pGraph As IFilterGraph
End Type

Public Enum PIN_DIRECTION
	PINDIR_INPUT = 0
	PINDIR_OUTPUT = 1
End Enum

Public Type PIN_INFO
	pFilter As IBaseFilter 'IBaseFilter *pFilter;
	dir As PIN_DIRECTION
	achName(0 To 127) As Integer
End Type

Public Enum AM_RENSDEREXFLAGS
    AM_RENDEREX_RENDERTOEXISTINGRENDERERS = 1            ' &H00000001&
End Enum

Public Enum DDS_STREAM_TYPE
    STREAMTYPE_READ = 0
    STREAMTYPE_WRITE = 1
    STREAMTYPE_TRANSFORM = 2
End Enum

Public Enum DDS_STREAM_STATE
    STREAMSTATE_STOP = 0
    STREAMSTATE_RUN = 1
End Enum

Public Enum COMPLETION_STATUS_FLAGS
    COMPSTAT_NOUPDATEOK = &H00000001
    COMPSTAT_WAIT = &H00000002
    COMPSTAT_ABORT = &H00000004
End Enum

Public Enum MMSTRM_INFO_FLAGS
    MMSSF_HASCLOCK = &H00000001
    MMSSF_SUPPORTSEEK = &H00000002
    MMSSF_ASYNCHRONOUS = &H00000004
End Enum

Public Enum SSUPDATE_FLAGS
    SSUPDATE_ASYNC = &H00000001
    SSUPDATE_CONTINUOUS = &H00000002
End Enum

Public Enum AMMSF_FLAGS
    AMMSF_NOGRAPHTHREAD = &H00000001
End Enum

Public Enum AMS_INIT_FLAGS
    '   Don't add a stream - create a default renderer instead
    '   for the supplied purpose id
    AMMSF_ADDDEFAULTRENDERER = &H00000001
    AMMSF_CREATEPEER = &H00000002
    '   If no samples are created when we run or the last sample
    '   is deleted then terminate this stream
    AMMSF_STOPIFNOSAMPLES = &H00000004
    '   If Update is not called keep going
    AMMSF_NOSTALL = &H00000008
End Enum

Public Enum AMMSF_RENDERFLAGS
    AMMSF_RENDERTYPEMASK = &H00000003
    AMMSF_RENDERTOEXISTING = &H00000000
    AMMSF_RENDERALLSTREAMS = &H00000001
    AMMSF_NORENDER = &H00000002
    AMMSF_NOCLOCK = &H00000004
    AMMSF_RUN = &H00000008
End Enum

Public Enum AMMSF_OUTPUT_STATE
    ammsfosDisabled = 0
    ammsfosReadData = 1
    ammsfosRenderData = 2
End Enum

Public Enum DDSFF_CS_FLAGS
    DDSFF_PROGRESSIVERENDER = &H00000001
End Enum

Public Type DDCOLORKEY
    dwColorSpaceLowValue As Long ' low boundary of color space that is to
    ' be treated as Color Key, inclusive
    dwColorSpaceHighValue As Long ' high boundary of color space that is
    ' to be treated as Color Key, inclusive
End Type

Public Enum DDPixelFormatFlags
'     *The surface has alpha channel information in the pixel format.
'     */
    DDPF_ALPHAPIXELS = &H00000001
'      * The pixel format contains alpha only information
'      */
    DDPF_ALPHA = &H00000002
'       * The FourCC code is valid.
'       */
    DDPF_FOURCC = &H00000004
'        * The surface is 4-bit color indexed.
'        */
    DDPF_PALETTEINDEXED4 = &H00000008
'         * The surface is indexed into a palette which stores indices
'         * into the destination surface's 8-bit palette.
'         */
    DDPF_PALETTEINDEXEDTO8 = &H00000010
'          * The surface is 8-bit color indexed.
'          */
    DDPF_PALETTEINDEXED8 = &H00000020
'           * The RGB data in the pixel format structure is valid.
'           */
    DDPF_RGB = &H00000040
'            * The surface will accept pixel data in the format specified
'            * and compress it during the write.
'            */
    DDPF_COMPRESSED = &H00000080
'             * The surface will accept RGB data and translate it during
'             * the write to YUV data.  The format of the data to be written
'             * will be contained in the pixel format structure.  The DDPF_RGB
'             * flag will be set.
'             */
    DDPF_RGBTOYUV = &H00000100
'              * pixel format is YUV - YUV data in pixel format struct is valid
'              */
    DDPF_YUV = &H00000200
'               * pixel format is a z buffer only surface
'               */
    DDPF_ZBUFFER = &H00000400
'                * The surface is 1-bit color indexed.
'                */
    DDPF_PALETTEINDEXED1 = &H00000800
'                 * The surface is 2-bit color indexed.
'                 */
    DDPF_PALETTEINDEXED2 = &H00001000
'                  * The surface contains Z information in the pixels
'                  */
    DDPF_ZPIXELS = &H00002000
'                   * The surface contains stencil information along with Z
'                   */
    DDPF_STENCILBUFFER = &H00004000
'                    * Premultiplied alpha format -- the color components have been
'                    * premultiplied by the alpha component.
'                    */
    DDPF_ALPHAPREMULT = &H00008000&
'                     * Luminance data in the pixel format is valid.
'                     * Use this flag for luminance-only or luminance+alpha surfaces,
'                     * the bit depth is then ddpf.dwLuminanceBitCount.
'                     */
    DDPF_LUMINANCE = &H00020000
'                      * Luminance data in the pixel format is valid.
'                      * Use this flag when hanging luminance off bumpmap surfaces,
'                      * the bit mask for the luminance portion of the pixel is then
'                      * ddpf.dwBumpLuminanceBitMask
'                      */
    DDPF_BUMPLUMINANCE = &H00040000
'                       * Bump map dUdV data in the pixel format is valid.
'                       */
    DDPF_BUMPDUDV = &H00080000
End Enum

Public Type DDPIXELFORMAT
    dwSize As Long ' size of structure
    dwFlags As DDPixelFormatFlags ' pixel format flags
    dwFourCC As Long ' (FOURCC code)
    'union
    '{
    '    DWORD   dwRGBBitCount;          // how many bits per pixel
    '    DWORD   dwYUVBitCount;          // how many bits per pixel
    '    DWORD   dwZBufferBitDepth;      // how many total bits/pixel in z buffer (including any stencil bits)
    '    DWORD   dwAlphaBitDepth;        // how many bits for alpha channels
    '    DWORD   dwLuminanceBitCount;    // how many bits per pixel
    '    DWORD   dwBumpBitCount;         // how many bits per "buxel", total
    '    DWORD   dwPrivateFormatBitCount;// Bits per pixel of private driver formats. Only valid in texture
    '                                    // format list and if DDPF_D3DFORMAT is set
    '} DUMMYUNIONNAMEN(1);
    BitCount As Long
    'union
    '{
    '    DWORD   dwRBitMask;             // mask for red bit
    '    DWORD   dwYBitMask;             // mask for Y bits
    '    DWORD   dwStencilBitDepth;      // how many stencil bits (note: dwZBufferBitDepth-dwStencilBitDepth is total Z-only bits)
    '    DWORD   dwLuminanceBitMask;     // mask for luminance bits
    '    DWORD   dwBumpDuBitMask;        // mask for bump map U delta bits
    '    DWORD   dwOperations;           // DDPF_D3DFORMAT Operations
    '} DUMMYUNIONNAMEN(2);
    RYSLUOpsBits As Long
    'union
    '{
    '    DWORD   dwGBitMask;             // mask for green bits
    '    DWORD   dwUBitMask;             // mask for U bits
    '    DWORD   dwZBitMask;             // mask for Z bits
    '    DWORD   dwBumpDvBitMask;        // mask for bump map V delta bits
    '    struct
    '    {
    '        WORD    wFlipMSTypes;       // Multisample methods supported via flip for this D3DFORMAT
    '        WORD    wBltMSTypes;        // Multisample methods supported via blt for this D3DFORMAT
    '    } MultiSampleCaps;
    '} DUMMYUNIONNAMEN(3);
    GUZVBits As Long
    'union
    '{
    '    DWORD   dwBBitMask;             // mask for blue bits
    '    DWORD   dwVBitMask;             // mask for V bits
    '    DWORD   dwStencilBitMask;       // mask for stencil bits
    '    DWORD   dwBumpLuminanceBitMask; // mask for luminance in bump map
    '} DUMMYUNIONNAMEN(4);
    BVSBBits As Long
    'union
    '{
    '    DWORD   dwRGBAlphaBitMask;      // mask for alpha channel
    '    DWORD   dwYUVAlphaBitMask;      // mask for alpha channel
    '    DWORD   dwLuminanceAlphaBitMask;// mask for alpha channel
    '    DWORD   dwRGBZBitMask;          // mask for Z channel
    '    DWORD   dwYUVZBitMask;          // mask for Z channel
    '} DUMMYUNIONNAMEN(5);
    AlphaOrZ As Long
End Type

Public Enum DDSCAP_FLAGS
'      * This bit is reserved. It should not be specified.
'      */
    DDSCAPS_RESERVED1 = &H00000001
'       * Indicates that this surface contains alpha-only information.
'       * (To determine if a surface is RGBA/YUVA, the pixel format must be
'       * interrogated.)
'       */
    DDSCAPS_ALPHA = &H00000002
'        * Indicates that this surface is a backbuffer.  It is generally
'        * set by CreateSurface when the DDSCAPS_FLIP capability bit is set.
'        * It indicates that this surface is THE back buffer of a surface
'        * flipping structure.  DirectDraw supports N surfaces in a
'        * surface flipping structure.  Only the surface that immediately
'        * precedeces the DDSCAPS_FRONTBUFFER has this capability bit set.
'        * The other surfaces are identified as back buffers by the presence
'        * of the DDSCAPS_FLIP capability, their attachment order, and the
'        * absence of the DDSCAPS_FRONTBUFFER and DDSCAPS_BACKBUFFER
'        * capabilities.  The bit is sent to CreateSurface when a standalone
'        * back buffer is being created.  This surface could be attached to
'        * a front buffer and/or back buffers to form a flipping surface
'        * structure after the CreateSurface call.  See AddAttachments for
'        * a detailed description of the behaviors in this case.
'        */
    DDSCAPS_BACKBUFFER = &H00000004
'         * Indicates a complex surface structure is being described.  A
'         * complex surface structure results in the creation of more than
'         * one surface.  The additional surfaces are attached to the root
'         * surface.  The complex structure can only be destroyed by
'         * destroying the root.
'         */
    DDSCAPS_COMPLEX = &H00000008
'          * Indicates that this surface is a part of a surface flipping structure.
'          * When it is passed to CreateSurface the DDSCAPS_FRONTBUFFER and
'          * DDSCAP_BACKBUFFER bits are not set.  They are set by CreateSurface
'          * on the resulting creations.  The dwBackBufferCount field in the
'          * DDSURFACEDESC structure must be set to at least 1 in order for
'          * the CreateSurface call to succeed.  The DDSCAPS_COMPLEX capability
'          * must always be set with creating multiple surfaces through CreateSurface.
'          */
    DDSCAPS_FLIP = &H00000010
'           * Indicates that this surface is THE front buffer of a surface flipping
'           * structure.  It is generally set by CreateSurface when the DDSCAPS_FLIP
'           * capability bit is set.
'           * If this capability is sent to CreateSurface then a standalonw front buffer
'           * is created.  This surface will not have the DDSCAPS_FLIP capability.
'           * It can be attached to other back buffers to form a flipping structure.
'           * See AddAttachments for a detailed description of the behaviors in this
'           * case.
'           */
    DDSCAPS_FRONTBUFFER = &H00000020
'            * Indicates that this surface is any offscreen surface that is not an overlay,
'            * texture, zbuffer, front buffer, back buffer, or alpha surface.  It is used
'            * to identify plain vanilla surfaces.
'            */
    DDSCAPS_OFFSCREENPLAIN = &H00000040
'             * Indicates that this surface is an overlay.  It may or may not be directly visible
'             * depending on whether or not it is currently being overlayed onto the primary
'             * surface.  DDSCAPS_VISIBLE can be used to determine whether or not it is being
'             * overlayed at the moment.
'             */
    DDSCAPS_OVERLAY = &H00000080
'              * Indicates that unique DirectDrawPalette objects can be created and
'              * attached to this surface.
'              */
    DDSCAPS_PALETTE = &H00000100
'               * Indicates that this surface is the primary surface.  The primary
'               * surface represents what the user is seeing at the moment.
'               */
    DDSCAPS_PRIMARYSURFACE = &H00000200
'                * This flag used to be DDSCAPS_PRIMARYSURFACELEFT, which is now
'                * obsolete.
'                */
    DDSCAPS_RESERVED3 = &H00000400
    DDSCAPS_PRIMARYSURFACELEFT = &H00000000
'                 * Indicates that this surface memory was allocated in system memory
'                 */
    DDSCAPS_SYSTEMMEMORY = &H00000800
'                  * Indicates that this surface can be used as a 3D texture.  It does not
'                  * indicate whether or not the surface is being used for that purpose.
'                  */
    DDSCAPS_TEXTURE = &H00001000
'                   * Indicates that a surface may be a destination for 3D rendering.  This
'                   * bit must be set in order to query for a Direct3D Device Interface
'                   * from this surface.
'                   */
    DDSCAPS_3DDEVICE = &H00002000
'                    * Indicates that this surface exists in video memory.
'                    */
    DDSCAPS_VIDEOMEMORY = &H00004000
'                     * Indicates that changes made to this surface are immediately visible.
'                     * It is always set for the primary surface and is set for overlays while
'                     * they are being overlayed and texture maps while they are being textured.
'                     */
    DDSCAPS_VISIBLE = &H00008000&
'                      * Indicates that only writes are permitted to the surface.  Read accesses
'                      * from the surface may or may not generate a protection fault, but the
'                      * results of a read from this surface will not be meaningful.  READ ONLY.
'                      */
    DDSCAPS_WRITEONLY = &H00010000
'                       * Indicates that this surface is a z buffer. A z buffer does not contain
'                       * displayable information.  Instead it contains bit depth information that is
'                       * used to determine which pixels are visible and which are obscured.
'                       */
    DDSCAPS_ZBUFFER = &H00020000
'                        * Indicates surface will have a DC associated long term
'                        */
    DDSCAPS_OWNDC = &H00040000
'                         * Indicates surface should be able to receive live video
'                         */
    DDSCAPS_LIVEVIDEO = &H00080000
'                          * Indicates surface should be able to have a stream decompressed
'                          * to it by the hardware.
'                          */
    DDSCAPS_HWCODEC = &H00100000
'                           * Surface is a ModeX surface.
'                           *
'                           */
    DDSCAPS_MODEX = &H00200000
'                            * Indicates surface is one level of a mip-map. This surface will
'                            * be attached to other DDSCAPS_MIPMAP surfaces to form the mip-map.
'                            * This can be done explicitly, by creating a number of surfaces and
'                            * attaching them with AddAttachedSurface or by implicitly by CreateSurface.
'                            * If this bit is set then DDSCAPS_TEXTURE must also be set.
'                            */
    DDSCAPS_MIPMAP = &H00400000
'                             * This bit is reserved. It should not be specified.
'                             */
    DDSCAPS_RESERVED2 = &H00800000
'                              * Indicates that memory for the surface is not allocated until the surface
'                              * is loaded (via the Direct3D texture Load() function).
'                              */
    DDSCAPS_ALLOCONLOAD = &H04000000
'                               * Indicates that the surface will recieve data from a video port.
'                               */
    DDSCAPS_VIDEOPORT = &H08000000
'                                * Indicates that a video memory surface is resident in true, local video
'                                * memory rather than non-local video memory. If this flag is specified then
'                                * so must DDSCAPS_VIDEOMEMORY. This flag is mutually exclusive with
'                                * DDSCAPS_NONLOCALVIDMEM.
'                                */
    DDSCAPS_LOCALVIDMEM = &H10000000
'                                 * Indicates that a video memory surface is resident in non-local video
'                                 * memory rather than true, local video memory. If this flag is specified
'                                 * then so must DDSCAPS_VIDEOMEMORY. This flag is mutually exclusive with
'                                 * DDSCAPS_LOCALVIDMEM.
'                                 */
    DDSCAPS_NONLOCALVIDMEM = &H20000000
'                                  * Indicates that this surface is a standard VGA mode surface, and not a
'                                  * ModeX surface. (This flag will never be set in combination with the
'                                  * DDSCAPS_MODEX flag).
'                                  */
    DDSCAPS_STANDARDVGAMODE = &H40000000
'                                   * Indicates that this surface will be an optimized surface. This flag is
'                                   * currently only valid in conjunction with the DDSCAPS_TEXTURE flag. The surface
'                                   * will be created without any underlying video memory until loaded.
'                                   */
    DDSCAPS_OPTIMIZED = &H80000000

End Enum

Public Type DDSCAPS
    dwCaps As DDSCAP_FLAGS ' capabilities of surface wanted
End Type

Public Enum DDSD_FLAGS
    DDSD_CAPS = &H00000001 ' default
'      * dwHeight field is valid.
'      */
    DDSD_HEIGHT = &H00000002
'       * dwWidth field is valid.
'       */
    DDSD_WIDTH = &H00000004
'        * lPitch is valid.
'        */
    DDSD_PITCH = &H00000008
'         * dwBackBufferCount is valid.
'         */
    DDSD_BACKBUFFERCOUNT = &H00000020
'          * dwZBufferBitDepth is valid.  (shouldnt be used in DDSURFACEDESC2)
'          */
    DDSD_ZBUFFERBITDEPTH = &H00000040
'           * dwAlphaBitDepth is valid.
'           */
    DDSD_ALPHABITDEPTH = &H00000080
'            * lpSurface is valid.
'            */
    DDSD_LPSURFACE = &H00000800
'             * ddpfPixelFormat is valid.
'             */
    DDSD_PIXELFORMAT = &H00001000
'              * ddckCKDestOverlay is valid.
'              */
    DDSD_CKDESTOVERLAY = &H00002000
'               * ddckCKDestBlt is valid.
'               */
    DDSD_CKDESTBLT = &H00004000
'                * ddckCKSrcOverlay is valid.
'                */
    DDSD_CKSRCOVERLAY = &H00008000&
'                 * ddckCKSrcBlt is valid.
'                 */
    DDSD_CKSRCBLT = &H00010000
'                  * dwMipMapCount is valid.
'                  */
    DDSD_MIPMAPCOUNT = &H00020000
'                   * dwRefreshRate is valid
'                   */
    DDSD_REFRESHRATE = &H00040000
'                    * dwLinearSize is valid
'                    */
    DDSD_LINEARSIZE = &H00080000
'                     * dwTextureStage is valid
'                     */
    DDSD_TEXTURESTAGE = &H00100000
'                      * dwFVF is valid
'                      */
    DDSD_FVF = &H00200000
'                       * dwSrcVBHandle is valid
'                       */
    DDSD_SRCVBHANDLE = &H00400000
'                        * dwDepth is valid
'                        */
    DDSD_DEPTH = &H00800000
'                         * All input fields are valid.
'                         */
    DDSD_ALL = &H00fff9ee
End Enum

Public Type DDSURFACEDESC
    dwSize As Long ' size of the DDSURFACEDESC structure
    dwFlags As DDSD_FLAGS ' determines what fields are valid
    dwHeight As Long ' height of surface to be created
    dwWidth As Long ' width of input surface
    'union
    '{
    '    LONG            lPitch;                 // distance to start of next line (return value only)
    '    DWORD           dwLinearSize;           // Formless late-allocated optimized surface size
    '} DUMMYUNIONNAMEN(1);
    'DWORD               dwBackBufferCount;      // number of back buffers requested
    'union
    '{
    '    DWORD           dwMipMapCount;          // number of mip-map levels requested
    '    DWORD           dwZBufferBitDepth;      // depth of Z buffer requested
    '    DWORD           dwRefreshRate;          // refresh rate (used when display mode is described)
    '} DUMMYUNIONNAMEN(2);
    PitchOrLinearSize As Long
    MipmapzDeptchOrRefreshRate As Long
    dwAlphaBitDepth As Long ' depth of alpha buffer requested
    dwReserved As Long ' reserved
    lpSurface As LongPtr ' pointer to the associated surface memory
    ddckCKDestOverlay As DDCOLORKEY ' color key for destination overlay use
    ddckCKDestBlt As DDCOLORKEY ' color key for destination blt use
    ddckCKSrcOverlay As DDCOLORKEY ' color key for source overlay use
    ddckCKSrcBlt As DDCOLORKEY ' color key for source blt use
    ddpfPixelFormat As DDPIXELFORMAT ' pixel format description of the surface
    ddsCaps As DDSCAPS ' direct draw surface capabilities
End Type



Public Function LIBID_QuartzNetTypeLib() As UUID
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56A868B1, &HAD4, &H11CE, &HB0, &H3A, &H0, &H20, &HAF, &HB, &HA7, &H70)
LIBID_QuartzNetTypeLib = iid
End Function

Public Function CLSID_MP3DecoderDMO() As UUID
'{BBEEA841-0A63-4F52-A7AB-A9B3A84ED38A}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBBEEA841, CInt(&HA63), CInt(&H4F52), &HA7, &HAB, &HA9, &HB3, &HA8, &H4E, &HD3, &H8A)
 CLSID_MP3DecoderDMO = iid
End Function

Public Function CLSID_CaptureGraphBuilder() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBF87B6E0, CInt(&H8C27), CInt(&H11D0), &HB3, &HF0, &H0, &HAA, &H0, &H37, &H61, &HC5)
 CLSID_CaptureGraphBuilder = iid
End Function

Public Function CLSID_CaptureGraphBuilder2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBF87B6E1, CInt(&H8C27), CInt(&H11D0), &HB3, &HF0, &H0, &HAA, &H0, &H37, &H61, &HC5)
 CLSID_CaptureGraphBuilder2 = iid
End Function

Public Function CLSID_ProtoFilterGraph() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE436EBB0, CInt(&H524F), CInt(&H11CE), &H9F, &H53, &H0, &H20, &HAF, &HB, &HA7, &H70)
 CLSID_ProtoFilterGraph = iid
End Function

Public Function CLSID_SystemClock() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE436EBB1, CInt(&H524F), CInt(&H11CE), &H9F, &H53, &H0, &H20, &HAF, &HB, &HA7, &H70)
 CLSID_SystemClock = iid
End Function

Public Function CLSID_FilterMapper() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE436EBB2, CInt(&H524F), CInt(&H11CE), &H9F, &H53, &H0, &H20, &HAF, &HB, &HA7, &H70)
 CLSID_FilterMapper = iid
End Function

Public Function CLSID_FilterGraph() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE436EBB3, CInt(&H524F), CInt(&H11CE), &H9F, &H53, &H0, &H20, &HAF, &HB, &HA7, &H70)
 CLSID_FilterGraph = iid
End Function

Public Function CLSID_FilterGraphNoThread() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE436EBB8, CInt(&H524F), CInt(&H11CE), &H9F, &H53, &H0, &H20, &HAF, &HB, &HA7, &H70)
 CLSID_FilterGraphNoThread = iid
End Function

Public Function CLSID_FilterGraphPrivateThread() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA3ECBC41, CInt(&H581A), CInt(&H4476), &HB6, &H93, &HA6, &H33, &H40, &H46, &H2D, &H8B)
 CLSID_FilterGraphPrivateThread = iid
End Function

Public Function CLSID_MPEG1Doc() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE4BBD160, CInt(&H4269), CInt(&H11CE), &H83, &H8D, &H0, &HAA, &H0, &H55, &H59, &H5A)
 CLSID_MPEG1Doc = iid
End Function

Public Function CLSID_FileSource() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H701722E0, CInt(&H8AE3), CInt(&H11CE), &HA8, &H5C, &H0, &HAA, &H0, &H2F, &HEA, &HB5)
 CLSID_FileSource = iid
End Function

Public Function CLSID_MPEG1PacketPlayer() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H26C25940, CInt(&H4CA9), CInt(&H11CE), &HA8, &H28, &H0, &HAA, &H0, &H2F, &HEA, &HB5)
 CLSID_MPEG1PacketPlayer = iid
End Function

Public Function CLSID_MPEG1Splitter() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H336475D0, CInt(&H942A), CInt(&H11CE), &HA8, &H70, &H0, &HAA, &H0, &H2F, &HEA, &HB5)
 CLSID_MPEG1Splitter = iid
End Function

Public Function CLSID_CMpegVideoCodec() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HFEB50740, CInt(&H7BEF), CInt(&H11CE), &H9B, &HD9, &H0, &H0, &HE2, &H2, &H59, &H9C)
 CLSID_CMpegVideoCodec = iid
End Function

Public Function CLSID_CMpegAudioCodec() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4A2286E0, CInt(&H7BEF), CInt(&H11CE), &H9B, &HD9, &H0, &H0, &HE2, &H2, &H59, &H9C)
 CLSID_CMpegAudioCodec = iid
End Function

Public Function CLSID_TextRender() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE30629D3, CInt(&H27E5), CInt(&H11CE), &H87, &H5D, &H0, &H60, &H8C, &HB7, &H80, &H66)
 CLSID_TextRender = iid
End Function

Public Function CLSID_InfTee() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF8388A40, CInt(&HD5BB), CInt(&H11D0), &HBE, &H5A, &H0, &H80, &HC7, &H6, &H56, &H8E)
 CLSID_InfTee = iid
End Function

Public Function CLSID_AviSplitter() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1B544C20, CInt(&HFD0B), CInt(&H11CE), &H8C, &H63, &H0, &HAA, &H0, &H44, &HB5, &H1E)
 CLSID_AviSplitter = iid
End Function

Public Function CLSID_AviReader() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1B544C21, CInt(&HFD0B), CInt(&H11CE), &H8C, &H63, &H0, &HAA, &H0, &H44, &HB5, &H1E)
 CLSID_AviReader = iid
End Function

Public Function CLSID_VfwCapture() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1B544C22, CInt(&HFD0B), CInt(&H11CE), &H8C, &H63, &H0, &HAA, &H0, &H44, &HB5, &H1E)
 CLSID_VfwCapture = iid
End Function

Public Function CLSID_CaptureProperties() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1B544C22, CInt(&HFD0B), CInt(&H11CE), &H8C, &H63, &H0, &HAA, &H0, &H44, &HB5, &H1F)
 CLSID_CaptureProperties = iid
End Function

Public Function CLSID_FGControl() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE436EBB4, CInt(&H524F), CInt(&H11CE), &H9F, &H53, &H0, &H20, &HAF, &HB, &HA7, &H70)
 CLSID_FGControl = iid
End Function

Public Function CLSID_MOVReader() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H44584800, CInt(&HF8EE), CInt(&H11CE), &HB2, &HD4, &H0, &HDD, &H1, &H10, &H1B, &H85)
 CLSID_MOVReader = iid
End Function

Public Function CLSID_QuickTimeParser() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD51BD5A0, CInt(&H7548), CInt(&H11CF), &HA5, &H20, &H0, &H80, &HC7, &H7E, &HF5, &H8A)
 CLSID_QuickTimeParser = iid
End Function

Public Function CLSID_QTDec() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HFDFE9681, CInt(&H74A3), CInt(&H11D0), &HAF, &HA7, &H0, &HAA, &H0, &HB6, &H7A, &H42)
 CLSID_QTDec = iid
End Function

Public Function CLSID_AVIDoc() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD3588AB0, CInt(&H781), CInt(&H11CE), &HB0, &H3A, &H0, &H20, &HAF, &HB, &HA7, &H70)
 CLSID_AVIDoc = iid
End Function

Public Function CLSID_VideoRenderer() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H70E102B0, CInt(&H5556), CInt(&H11CE), &H97, &HC0, &H0, &HAA, &H0, &H55, &H59, &H5A)
 CLSID_VideoRenderer = iid
End Function

Public Function CLSID_Colour() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1643E180, CInt(&H90F5), CInt(&H11CE), &H97, &HD5, &H0, &HAA, &H0, &H55, &H59, &H5A)
 CLSID_Colour = iid
End Function

Public Function CLSID_Dither() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1DA08500, CInt(&H9EDC), CInt(&H11CF), &HBC, &H10, &H0, &HAA, &H0, &HAC, &H74, &HF6)
 CLSID_Dither = iid
End Function

Public Function CLSID_ModexRenderer() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7167665, CInt(&H5011), CInt(&H11CF), &HBF, &H33, &H0, &HAA, &H0, &H55, &H59, &H5A)
 CLSID_ModexRenderer = iid
End Function

Public Function CLSID_AudioRender() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE30629D1, CInt(&H27E5), CInt(&H11CE), &H87, &H5D, &H0, &H60, &H8C, &HB7, &H80, &H66)
 CLSID_AudioRender = iid
End Function

Public Function CLSID_AudioProperties() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5589FAF, CInt(&HC356), CInt(&H11CE), &HBF, &H1, &H0, &HAA, &H0, &H55, &H59, &H5A)
 CLSID_AudioProperties = iid
End Function

Public Function CLSID_DSoundRender() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H79376820, CInt(&H7D0), CInt(&H11CF), &HA2, &H4D, &H0, &H20, &HAF, &HD7, &H97, &H67)
 CLSID_DSoundRender = iid
End Function

Public Function CLSID_AudioRecord() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE30629D2, CInt(&H27E5), CInt(&H11CE), &H87, &H5D, &H0, &H60, &H8C, &HB7, &H80, &H66)
 CLSID_AudioRecord = iid
End Function

Public Function CLSID_AudioInputMixerProperties() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2CA8CA52, CInt(&H3C3F), CInt(&H11D2), &HB7, &H3D, &H0, &HC0, &H4F, &HB6, &HBD, &H3D)
 CLSID_AudioInputMixerProperties = iid
End Function

Public Function CLSID_AVIDec() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HCF49D4E0, CInt(&H1115), CInt(&H11CE), &HB0, &H3A, &H0, &H20, &HAF, &HB, &HA7, &H70)
 CLSID_AVIDec = iid
End Function

Public Function CLSID_AVIDraw() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA888DF60, CInt(&H1E90), CInt(&H11CF), &HAC, &H98, &H0, &HAA, &H0, &H4C, &HF, &HA9)
 CLSID_AVIDraw = iid
End Function

Public Function CLSID_ACMWrapper() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6A08CF80, CInt(&HE18), CInt(&H11CF), &HA2, &H4D, &H0, &H20, &HAF, &HD7, &H97, &H67)
 CLSID_ACMWrapper = iid
End Function

Public Function CLSID_AsyncReader() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE436EBB5, CInt(&H524F), CInt(&H11CE), &H9F, &H53, &H0, &H20, &HAF, &HB, &HA7, &H70)
 CLSID_AsyncReader = iid
End Function

Public Function CLSID_URLReader() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE436EBB6, CInt(&H524F), CInt(&H11CE), &H9F, &H53, &H0, &H20, &HAF, &HB, &HA7, &H70)
 CLSID_URLReader = iid
End Function

Public Function CLSID_PersistMonikerPID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE436EBB7, CInt(&H524F), CInt(&H11CE), &H9F, &H53, &H0, &H20, &HAF, &HB, &HA7, &H70)
 CLSID_PersistMonikerPID = iid
End Function

Public Function CLSID_AVICo() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD76E2820, CInt(&H1563), CInt(&H11CF), &HAC, &H98, &H0, &HAA, &H0, &H4C, &HF, &HA9)
 CLSID_AVICo = iid
End Function

Public Function CLSID_FileWriter() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8596E5F0, CInt(&HDA5), CInt(&H11D0), &HBD, &H21, &H0, &HA0, &HC9, &H11, &HCE, &H86)
 CLSID_FileWriter = iid
End Function

Public Function CLSID_AviDest() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE2510970, CInt(&HF137), CInt(&H11CE), &H8B, &H67, &H0, &HAA, &H0, &HA3, &HF1, &HA6)
 CLSID_AviDest = iid
End Function

Public Function CLSID_AviMuxProptyPage() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC647B5C0, CInt(&H157C), CInt(&H11D0), &HBD, &H23, &H0, &HA0, &HC9, &H11, &HCE, &H86)
 CLSID_AviMuxProptyPage = iid
End Function

Public Function CLSID_AviMuxProptyPage1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA9AE910, CInt(&H85C0), CInt(&H11D0), &HBD, &H42, &H0, &HA0, &HC9, &H11, &HCE, &H86)
 CLSID_AviMuxProptyPage1 = iid
End Function

Public Function CLSID_AVIMIDIRender() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7B65360, CInt(&HC445), CInt(&H11CE), &HAF, &HDE, &H0, &HAA, &H0, &H6C, &H14, &HF4)
 CLSID_AVIMIDIRender = iid
End Function

Public Function CLSID_WMAsfReader() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H187463A0, CInt(&H5BB7), CInt(&H11D3), &HAC, &HBE, &H0, &H80, &HC7, &H5E, &H24, &H6E)
 CLSID_WMAsfReader = iid
End Function

Public Function CLSID_WMAsfWriter() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7C23220E, CInt(&H55BB), CInt(&H11D3), &H8B, &H16, &H0, &HC0, &H4F, &HB6, &HBD, &H3D)
 CLSID_WMAsfWriter = iid
End Function

Public Function CLSID_MPEG2Demultiplexer() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAFB6C280, CInt(&H2C41), CInt(&H11D3), &H8A, &H60, &H0, &H0, &HF8, &H1E, &HE, &H4A)
 CLSID_MPEG2Demultiplexer = iid
End Function

Public Function CLSID_MPEG2Demultiplexer_NoClock() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H687D3367, CInt(&H3644), CInt(&H467A), &HAD, &HFE, &H6C, &HD7, &HA8, &H5C, &H4A, &H2C)
 CLSID_MPEG2Demultiplexer_NoClock = iid
End Function

Public Function CLSID_MMSPLITTER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3AE86B20, CInt(&H7BE8), CInt(&H11D1), &HAB, &HE6, &H0, &HA0, &HC9, &H5, &HF3, &H75)
 CLSID_MMSPLITTER = iid
End Function

Public Function CLSID_StreamBufferSink() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2DB47AE5, CInt(&HCF39), CInt(&H43C2), &HB4, &HD6, &HC, &HD8, &HD9, &H9, &H46, &HF4)
 CLSID_StreamBufferSink = iid
End Function

Public Function CLSID_SBE2Sink() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE2448508, CInt(&H95DA), CInt(&H4205), &H9A, &H27, &H7E, &HC8, &H1E, &H72, &H3B, &H1A)
 CLSID_SBE2Sink = iid
End Function

Public Function CLSID_StreamBufferSource() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC9F5FE02, CInt(&HF851), CInt(&H4EB5), &H99, &HEE, &HAD, &H60, &H2A, &HF1, &HE6, &H19)
 CLSID_StreamBufferSource = iid
End Function

Public Function CLSID_StreamBufferConfig() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HFA8A68B2, CInt(&HC864), CInt(&H4BA2), &HAD, &H53, &HD3, &H87, &H6A, &H87, &H49, &H4B)
 CLSID_StreamBufferConfig = iid
End Function

Public Function CLSID_StreamBufferPropertyHandler() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE37A73F8, CInt(&HFB01), CInt(&H43DC), &H91, &H4E, &HAA, &HEE, &H76, &H9, &H5A, &HB9)
 CLSID_StreamBufferPropertyHandler = iid
End Function

Public Function CLSID_StreamBufferThumbnailHandler() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H713790EE, CInt(&H5EE1), CInt(&H45BA), &H80, &H70, &HA1, &H33, &H7D, &H27, &H62, &HFA)
 CLSID_StreamBufferThumbnailHandler = iid
End Function

Public Function CLSID_Mpeg2VideoStreamAnalyzer() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6CFAD761, CInt(&H735D), CInt(&H4AA5), &H8A, &HFC, &HAF, &H91, &HA7, &HD6, &H1E, &HBA)
 CLSID_Mpeg2VideoStreamAnalyzer = iid
End Function

Public Function CLSID_StreamBufferRecordingAttributes() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HCCAA63AC, CInt(&H1057), CInt(&H4778), &HAE, &H92, &H12, &H6, &HAB, &H9A, &HCE, &HE6)
 CLSID_StreamBufferRecordingAttributes = iid
End Function

Public Function CLSID_StreamBufferComposeRecording() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD682C4BA, CInt(&HA90A), CInt(&H42FE), &HB9, &HE1, &H3, &H10, &H98, &H49, &HC4, &H23)
 CLSID_StreamBufferComposeRecording = iid
End Function

Public Function CLSID_SBE2File() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H93A094D7, CInt(&H51E8), CInt(&H485B), &H90, &H4A, &H8D, &H6B, &H97, &HDC, &H6B, &H39)
 CLSID_SBE2File = iid
End Function

Public Function CLSID_DVVideoCodec() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HB1B77C00, CInt(&HC3E4), CInt(&H11CF), &HAF, &H79, &H0, &HAA, &H0, &HB6, &H7A, &H42)
 CLSID_DVVideoCodec = iid
End Function

Public Function CLSID_DVVideoEnc() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H13AA3650, CInt(&HBB6F), CInt(&H11D0), &HAF, &HB9, &H0, &HAA, &H0, &HB6, &H7A, &H42)
 CLSID_DVVideoEnc = iid
End Function

Public Function CLSID_DVSplitter() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4EB31670, CInt(&H9FC6), CInt(&H11CF), &HAF, &H6E, &H0, &HAA, &H0, &HB6, &H7A, &H42)
 CLSID_DVSplitter = iid
End Function

Public Function CLSID_DVMux() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H129D7E40, CInt(&HC10D), CInt(&H11D0), &HAF, &HB9, &H0, &HAA, &H0, &HB6, &H7A, &H42)
 CLSID_DVMux = iid
End Function

Public Function CLSID_SeekingPassThru() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H60AF76C, CInt(&H68DD), CInt(&H11D0), &H8F, &HC1, &H0, &HC0, &H4F, &HD9, &H18, &H9D)
 CLSID_SeekingPassThru = iid
End Function

Public Function CLSID_Line21Decoder() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6E8D4A20, CInt(&H310C), CInt(&H11D0), &HB7, &H9A, &H0, &HAA, &H0, &H37, &H67, &HA7)
 CLSID_Line21Decoder = iid
End Function

Public Function CLSID_Line21Decoder2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE4206432, CInt(&H1A1), CInt(&H4BEE), &HB3, &HE1, &H37, &H2, &HC8, &HED, &HC5, &H74)
 CLSID_Line21Decoder2 = iid
End Function

Public Function CLSID_CCAFilter() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3D07A539, CInt(&H35CA), CInt(&H447C), &H9B, &H5, &H8D, &H85, &HCE, &H92, &H4F, &H9E)
 CLSID_CCAFilter = iid
End Function

Public Function CLSID_OverlayMixer() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HCD8743A1, CInt(&H3736), CInt(&H11D0), &H9E, &H69, &H0, &HC0, &H4F, &HD7, &HC1, &H5B)
 CLSID_OverlayMixer = iid
End Function

Public Function CLSID_VBISurfaces() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H814B9800, CInt(&H1C88), CInt(&H11D1), &HBA, &HD9, &H0, &H60, &H97, &H44, &H11, &H1A)
 CLSID_VBISurfaces = iid
End Function

Public Function CLSID_WSTDecoder() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H70BC06E0, CInt(&H5666), CInt(&H11D3), &HA1, &H84, &H0, &H10, &H5A, &HEF, &H9F, &H33)
 CLSID_WSTDecoder = iid
End Function

Public Function CLSID_MjpegDec() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H301056D0, CInt(&H6DFF), CInt(&H11D2), &H9E, &HEB, &H0, &H60, &H8, &H3, &H9E, &H37)
 CLSID_MjpegDec = iid
End Function

Public Function CLSID_MJPGEnc() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HB80AB0A0, CInt(&H7416), CInt(&H11D2), &H9E, &HEB, &H0, &H60, &H8, &H3, &H9E, &H37)
 CLSID_MJPGEnc = iid
End Function

Public Function CLSID_SystemDeviceEnum() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H62BE5D10, CInt(&H60EB), CInt(&H11D0), &HBD, &H3B, &H0, &HA0, &HC9, &H11, &HCE, &H86)
 CLSID_SystemDeviceEnum = iid
End Function

Public Function CLSID_CDeviceMoniker() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4315D437, CInt(&H5B8C), CInt(&H11D0), &HBD, &H3B, &H0, &HA0, &HC9, &H11, &HCE, &H86)
 CLSID_CDeviceMoniker = iid
End Function

Public Function CLSID_VideoInputDeviceCategory() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H860BB310, CInt(&H5D01), CInt(&H11D0), &HBD, &H3B, &H0, &HA0, &HC9, &H11, &HCE, &H86)
 CLSID_VideoInputDeviceCategory = iid
End Function

Public Function CLSID_CVidCapClassManager() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H860BB310, CInt(&H5D01), CInt(&H11D0), &HBD, &H3B, &H0, &HA0, &HC9, &H11, &HCE, &H86)
 CLSID_CVidCapClassManager = iid
End Function

Public Function CLSID_LegacyAmFilterCategory() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H83863F1, CInt(&H70DE), CInt(&H11D0), &HBD, &H40, &H0, &HA0, &HC9, &H11, &HCE, &H86)
 CLSID_LegacyAmFilterCategory = iid
End Function

Public Function CLSID_CQzFilterClassManager() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H83863F1, CInt(&H70DE), CInt(&H11D0), &HBD, &H40, &H0, &HA0, &HC9, &H11, &HCE, &H86)
 CLSID_CQzFilterClassManager = iid
End Function

Public Function CLSID_VideoCompressorCategory() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H33D9A760, CInt(&H90C8), CInt(&H11D0), &HBD, &H43, &H0, &HA0, &HC9, &H11, &HCE, &H86)
 CLSID_VideoCompressorCategory = iid
End Function

Public Function CLSID_CIcmCoClassManager() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H33D9A760, CInt(&H90C8), CInt(&H11D0), &HBD, &H43, &H0, &HA0, &HC9, &H11, &HCE, &H86)
 CLSID_CIcmCoClassManager = iid
End Function

Public Function CLSID_AudioCompressorCategory() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H33D9A761, CInt(&H90C8), CInt(&H11D0), &HBD, &H43, &H0, &HA0, &HC9, &H11, &HCE, &H86)
 CLSID_AudioCompressorCategory = iid
End Function

Public Function CLSID_CAcmCoClassManager() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H33D9A761, CInt(&H90C8), CInt(&H11D0), &HBD, &H43, &H0, &HA0, &HC9, &H11, &HCE, &H86)
 CLSID_CAcmCoClassManager = iid
End Function

Public Function CLSID_AudioInputDeviceCategory() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H33D9A762, CInt(&H90C8), CInt(&H11D0), &HBD, &H43, &H0, &HA0, &HC9, &H11, &HCE, &H86)
 CLSID_AudioInputDeviceCategory = iid
End Function

Public Function CLSID_CWaveinClassManager() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H33D9A762, CInt(&H90C8), CInt(&H11D0), &HBD, &H43, &H0, &HA0, &HC9, &H11, &HCE, &H86)
 CLSID_CWaveinClassManager = iid
End Function

Public Function CLSID_AudioRendererCategory() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE0F158E1, CInt(&HCB04), CInt(&H11D0), &HBD, &H4E, &H0, &HA0, &HC9, &H11, &HCE, &H86)
 CLSID_AudioRendererCategory = iid
End Function

Public Function CLSID_CWaveOutClassManager() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE0F158E1, CInt(&HCB04), CInt(&H11D0), &HBD, &H4E, &H0, &HA0, &HC9, &H11, &HCE, &H86)
 CLSID_CWaveOutClassManager = iid
End Function

Public Function CLSID_MidiRendererCategory() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4EFE2452, CInt(&H168A), CInt(&H11D1), &HBC, &H76, &H0, &HC0, &H4F, &HB9, &H45, &H3B)
 CLSID_MidiRendererCategory = iid
End Function

Public Function CLSID_CMidiOutClassManager() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4EFE2452, CInt(&H168A), CInt(&H11D1), &HBC, &H76, &H0, &HC0, &H4F, &HB9, &H45, &H3B)
 CLSID_CMidiOutClassManager = iid
End Function

Public Function CLSID_TransmitCategory() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HCC7BFB41, CInt(&HF175), CInt(&H11D1), &HA3, &H92, &H0, &HE0, &H29, &H1F, &H39, &H59)
 CLSID_TransmitCategory = iid
End Function

Public Function CLSID_DeviceControlCategory() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HCC7BFB46, CInt(&HF175), CInt(&H11D1), &HA3, &H92, &H0, &HE0, &H29, &H1F, &H39, &H59)
 CLSID_DeviceControlCategory = iid
End Function

Public Function CLSID_ActiveMovieCategories() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HDA4E3DA0, CInt(&HD07D), CInt(&H11D0), &HBD, &H50, &H0, &HA0, &HC9, &H11, &HCE, &H86)
 CLSID_ActiveMovieCategories = iid
End Function

Public Function CLSID_DVDHWDecodersCategory() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2721AE20, CInt(&H7E70), CInt(&H11D0), &HA5, &HD6, &H28, &HDB, &H4, &HC1, &H0, &H0)
 CLSID_DVDHWDecodersCategory = iid
End Function

Public Function CLSID_MediaEncoderCategory() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7D22E920, CInt(&H5CA9), CInt(&H4787), &H8C, &H2B, &HA6, &H77, &H9B, &HD1, &H17, &H81)
 CLSID_MediaEncoderCategory = iid
End Function

Public Function CLSID_MediaMultiplexerCategory() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H236C9559, CInt(&HADCE), CInt(&H4736), &HBF, &H72, &HBA, &HB3, &H4E, &H39, &H21, &H96)
 CLSID_MediaMultiplexerCategory = iid
End Function

Public Function CLSID_FilterMapper2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HCDA42200, CInt(&HBD88), CInt(&H11D0), &HBD, &H4E, &H0, &HA0, &HC9, &H11, &HCE, &H86)
 CLSID_FilterMapper2 = iid
End Function

Public Function CLSID_MemoryAllocator() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1E651CC0, CInt(&HB199), CInt(&H11D0), &H82, &H12, &H0, &HC0, &H4F, &HC3, &H2C, &H45)
 CLSID_MemoryAllocator = iid
End Function

Public Function CLSID_MediaPropertyBag() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HCDBD8D00, CInt(&HC193), CInt(&H11D0), &HBD, &H4E, &H0, &HA0, &HC9, &H11, &HCE, &H86)
 CLSID_MediaPropertyBag = iid
End Function

Public Function CLSID_DvdGraphBuilder() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HFCC152B7, CInt(&HF372), CInt(&H11D0), &H8E, &H0, &H0, &HC0, &H4F, &HD7, &HC0, &H8B)
 CLSID_DvdGraphBuilder = iid
End Function

Public Function CLSID_DVDNavigator() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B8C4620, CInt(&H2C1A), CInt(&H11D0), &H84, &H93, &H0, &HA0, &H24, &H38, &HAD, &H48)
 CLSID_DVDNavigator = iid
End Function

Public Function CLSID_DVDState() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF963C5CF, CInt(&HA659), CInt(&H4A93), &H96, &H38, &HCA, &HF3, &HCD, &H27, &H7D, &H13)
 CLSID_DVDState = iid
End Function

Public Function CLSID_SmartTee() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HCC58E280, CInt(&H8AA1), CInt(&H11D1), &HB3, &HF1, &H0, &HAA, &H0, &H37, &H61, &HC5)
 CLSID_SmartTee = iid
End Function

Public Function CLSID_DtvCcFilter() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HFB056BA0, CInt(&H2502), CInt(&H45B9), &H8E, &H86, &H2B, &H40, &HDE, &H84, &HAD, &H29)
 CLSID_DtvCcFilter = iid
End Function

Public Function CLSID_CaptionsFilter() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2F7EE4B6, CInt(&H6FF5), CInt(&H4EB4), &HB2, &H4A, &H2B, &HFC, &H41, &H11, &H71, &H71)
 CLSID_CaptionsFilter = iid
End Function

Public Function CLSID_SubtitlesFilter() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9F22CFEA, CInt(&HCE07), CInt(&H41AB), &H8B, &HA0, &HC7, &H36, &H4A, &HF9, &HA, &HF9)
 CLSID_SubtitlesFilter = iid
End Function

Public Function CLSID_DirectShowPluginControl() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8670C736, CInt(&HF614), CInt(&H427B), &H8A, &HDA, &HBB, &HAD, &HC5, &H87, &H19, &H4B)
 CLSID_DirectShowPluginControl = iid
End Function

Public Function MSPID_PrimaryVideo() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha35ff56a, &H9fda, &H11d0, &H8f, &Hdf, &H0, &Hc0, &H4f, &Hd9, &H18, &H9d)
MSPID_PrimaryVideo = iid
End Function
Public Function MSPID_PrimaryAudio() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(MSPID_PrimaryAudio, &Ha35ff56b, &H9fda, &H11d0, &H8f, &Hdf, &H0, &Hc0, &H4f, &Hd9, &H18, &H9d)
MSPID_PrimaryAudio = iid
End Function



Public Function IID_IAMCollection() As UUID
'{56A868B9-0AD4-11CE-B03A-0020AF0BA770}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56A868B9, CInt(&HAD4), CInt(&H11CE), &HB0, &H3A, &H0, &H20, &HAF, &HB, &HA7, &H70)
IID_IAMCollection = iid
End Function
Public Function IID_IMediaControl() As UUID
'{56A868B1-0AD4-11CE-B03A-0020AF0BA770}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56A868B1, CInt(&HAD4), CInt(&H11CE), &HB0, &H3A, &H0, &H20, &HAF, &HB, &HA7, &H70)
IID_IMediaControl = iid
End Function
Public Function IID_IMediaEvent() As UUID
'{56A868B6-0AD4-11CE-B03A-0020AF0BA770}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56A868B6, CInt(&HAD4), CInt(&H11CE), &HB0, &H3A, &H0, &H20, &HAF, &HB, &HA7, &H70)
IID_IMediaEvent = iid
End Function
Public Function IID_IMediaEventEx() As UUID
'{56A868C0-0AD4-11CE-B03A-0020AF0BA770}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56A868C0, CInt(&HAD4), CInt(&H11CE), &HB0, &H3A, &H0, &H20, &HAF, &HB, &HA7, &H70)
IID_IMediaEventEx = iid
End Function
Public Function IID_IMediaPosition() As UUID
'{56A868B2-0AD4-11CE-B03A-0020AF0BA770}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56A868B2, CInt(&HAD4), CInt(&H11CE), &HB0, &H3A, &H0, &H20, &HAF, &HB, &HA7, &H70)
IID_IMediaPosition = iid
End Function
Public Function IID_IBasicAudio() As UUID
'{56A868B3-0AD4-11CE-B03A-0020AF0BA770}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56A868B3, CInt(&HAD4), CInt(&H11CE), &HB0, &H3A, &H0, &H20, &HAF, &HB, &HA7, &H70)
IID_IBasicAudio = iid
End Function
Public Function IID_IVideoWindow() As UUID
'{56A868B4-0AD4-11CE-B03A-0020AF0BA770}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56A868B4, CInt(&HAD4), CInt(&H11CE), &HB0, &H3A, &H0, &H20, &HAF, &HB, &HA7, &H70)
IID_IVideoWindow = iid
End Function
Public Function IID_IBasicVideo() As UUID
'{56A868B5-0AD4-11CE-B03A-0020AF0BA770}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56A868B5, CInt(&HAD4), CInt(&H11CE), &HB0, &H3A, &H0, &H20, &HAF, &HB, &HA7, &H70)
IID_IBasicVideo = iid
End Function
Public Function IID_IBasicVideo2() As UUID
'{329BB360-F6EA-11D1-9038-00A0C9697298}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H329BB360, CInt(&HF6EA), CInt(&H11D1), &H90, &H38, &H0, &HA0, &HC9, &H69, &H72, &H98)
IID_IBasicVideo2 = iid
End Function
Public Function IID_IDeferredCommand() As UUID
'{56A868B8-0AD4-11CE-B03A-0020AF0BA770}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56A868B8, CInt(&HAD4), CInt(&H11CE), &HB0, &H3A, &H0, &H20, &HAF, &HB, &HA7, &H70)
IID_IDeferredCommand = iid
End Function
Public Function IID_IQueueCommand() As UUID
'{56A868B7-0AD4-11CE-B03A-0020AF0BA770}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56A868B7, CInt(&HAD4), CInt(&H11CE), &HB0, &H3A, &H0, &H20, &HAF, &HB, &HA7, &H70)
IID_IQueueCommand = iid
End Function
Public Function IID_IFilterInfo() As UUID
'{E436EBB3-524F-11CE-9F53-0020AF0BA770}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE436EBB3, CInt(&H524F), CInt(&H11CE), &H9F, &H53, &H0, &H20, &HAF, &HB, &HA7, &H70)
IID_IFilterInfo = iid
End Function
Public Function IID_IRegFilterInfo() As UUID
'{56A868BB-0AD4-11CE-B03A-0020AF0BA770}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56A868BB, CInt(&HAD4), CInt(&H11CE), &HB0, &H3A, &H0, &H20, &HAF, &HB, &HA7, &H70)
IID_IRegFilterInfo = iid
End Function
Public Function IID_IMediaTypeInfo() As UUID
'{56A868BC-0AD4-11CE-B03A-0020AF0BA770}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56A868BC, CInt(&HAD4), CInt(&H11CE), &HB0, &H3A, &H0, &H20, &HAF, &HB, &HA7, &H70)
IID_IMediaTypeInfo = iid
End Function
Public Function IID_IPinInfo() As UUID
'{56A868BD-0AD4-11CE-B03A-0020AF0BA770}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56A868BD, CInt(&HAD4), CInt(&H11CE), &HB0, &H3A, &H0, &H20, &HAF, &HB, &HA7, &H70)
IID_IPinInfo = iid
End Function
Public Function IID_IAMStats() As UUID
'{BC9BCF80-DCD2-11D2-ABF6-00A0C905F375}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBC9BCF80, CInt(&HDCD2), CInt(&H11D2), &HAB, &HF6, &H0, &HA0, &HC9, &H5, &HF3, &H75)
IID_IAMStats = iid
End Function
Public Function IID_IEnumMediaTypes() As UUID
'{89c31040-846b-11ce-97d3-00aa0055595a}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H89C31040, CInt(&H846B), CInt(&H11CE), &H97, &HD3, &H0, &HAA, &H0, &H55, &H59, &H5A)
IID_IEnumMediaTypes = iid
End Function
Public Function IID_IPin() As UUID
'{56a86891-0ad4-11ce-b03a-0020af0ba770}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56A86891, CInt(&HAD4), CInt(&H11CE), &HB0, &H3A, &H0, &H20, &HAF, &HB, &HA7, &H70)
IID_IPin = iid
End Function
Public Function IID_IEnumPins() As UUID
'{56a86892-0ad4-11ce-b03a-0020af0ba770}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56A86892, CInt(&HAD4), CInt(&H11CE), &HB0, &H3A, &H0, &H20, &HAF, &HB, &HA7, &H70)
IID_IEnumPins = iid
End Function
Public Function IID_IReferenceClock() As UUID
'{56a86897-0ad4-11ce-b03a-0020af0ba770}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56A86897, CInt(&HAD4), CInt(&H11CE), &HB0, &H3A, &H0, &H20, &HAF, &HB, &HA7, &H70)
IID_IReferenceClock = iid
End Function
Public Function IID_IMediaFilter() As UUID
'{56a86899-0ad4-11ce-b03a-0020af0ba770}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56A86899, CInt(&HAD4), CInt(&H11CE), &HB0, &H3A, &H0, &H20, &HAF, &HB, &HA7, &H70)
IID_IMediaFilter = iid
End Function
Public Function IID_IBaseFilter() As UUID
'{56a86895-0ad4-11ce-b03a-0020af0ba770}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56A86895, CInt(&HAD4), CInt(&H11CE), &HB0, &H3A, &H0, &H20, &HAF, &HB, &HA7, &H70)
IID_IBaseFilter = iid
End Function
Public Function IID_IEnumFilters() As UUID
'{56a86893-0ad4-11ce-b03a-0020af0ba770}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56A86893, CInt(&HAD4), CInt(&H11CE), &HB0, &H3A, &H0, &H20, &HAF, &HB, &HA7, &H70)
IID_IEnumFilters = iid
End Function
Public Function IID_IFilterGraph() As UUID
'{56a8689f-0ad4-11ce-b03a-0020af0ba770}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56A8689F, CInt(&HAD4), CInt(&H11CE), &HB0, &H3A, &H0, &H20, &HAF, &HB, &HA7, &H70)
IID_IFilterGraph = iid
End Function
Public Function IID_IFilterGraph2() As UUID
'{36b73882-c2c8-11cf-8b46-00805f6cef60}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H36B73882, CInt(&HC2C8), CInt(&H11CF), &H8B, &H46, &H0, &H80, &H5F, &H6C, &HEF, &H60)
 IID_IFilterGraph2 = iid
End Function
Public Function IID_IFilterGraph3() As UUID
'{aaf38154-b80b-422f-91e6-b66467509a07}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAAF38154, CInt(&HB80B), CInt(&H422F), &H91, &HE6, &HB6, &H64, &H67, &H50, &H9A, &H7)
 IID_IFilterGraph3 = iid
End Function
Public Function IID_IFileSinkFilter() As UUID
'{a2104830-7c70-11cf-8bce-00aa00a3f1a6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA2104830, CInt(&H7C70), CInt(&H11CF), &H8B, &HCE, &H0, &HAA, &H0, &HA3, &HF1, &HA6)
IID_IFileSinkFilter = iid
End Function
Public Function IID_IAMCopyCaptureFileProgress() As UUID
'{670d1d20-a068-11d0-b3f0-00aa003761c5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H670D1D20, CInt(&HA068), CInt(&H11D0), &HB3, &HF0, &H0, &HAA, &H0, &H37, &H61, &HC5)
IID_IAMCopyCaptureFileProgress = iid
End Function
Public Function IID_IGraphBuilder() As UUID
'{56a868a9-0ad4-11ce-b03a-0020af0ba770}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56A868A9, CInt(&HAD4), CInt(&H11CE), &HB0, &H3A, &H0, &H20, &HAF, &HB, &HA7, &H70)
IID_IGraphBuilder = iid
End Function
Public Function IID_ICaptureGraphBuilder() As UUID
'{bf87b6e0-8c27-11d0-b3f0-00aa003761c5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBF87B6E0, CInt(&H8C27), CInt(&H11D0), &HB3, &HF0, &H0, &HAA, &H0, &H37, &H61, &HC5)
IID_ICaptureGraphBuilder = iid
End Function
Public Function IID_ICaptureGraphBuilder2() As UUID
'{93E5A4E0-2D50-11d2-ABFA-00A0C9C6E38D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H93E5A4E0, CInt(&H2D50), CInt(&H11D2), &HAB, &HFA, &H0, &HA0, &HC9, &HC6, &HE3, &H8D)
IID_ICaptureGraphBuilder2 = iid
End Function
Public Function IID_IAMChannelInfo() As UUID
'{FA2AA8F1-8B62-11D0-A520-000000000000}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFA2AA8F1, CInt(&H8B62), CInt(&H11D0), &HA5, &H20, &H0, &H0, &H0, &H0, &H0, &H0)
IID_IAMChannelInfo = iid
End Function
Public Function IID_IAMNetworkStatus() As UUID
'{FA2AA8F3-8B62-11D0-A520-000000000000}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFA2AA8F3, CInt(&H8B62), CInt(&H11D0), &HA5, &H20, &H0, &H0, &H0, &H0, &H0, &H0)
IID_IAMNetworkStatus = iid
End Function
Public Function IID_IAMNetShowExProps() As UUID
'{FA2AA8F5-8B62-11D0-A520-000000000000}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFA2AA8F5, CInt(&H8B62), CInt(&H11D0), &HA5, &H20, &H0, &H0, &H0, &H0, &H0, &H0)
IID_IAMNetShowExProps = iid
End Function
Public Function IID_IAMExtendedErrorInfo() As UUID
'{FA2AA8F6-8B62-11D0-A520-000000000000}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFA2AA8F6, CInt(&H8B62), CInt(&H11D0), &HA5, &H20, &H0, &H0, &H0, &H0, &H0, &H0)
IID_IAMExtendedErrorInfo = iid
End Function
Public Function IID_IAMNetShowPreroll() As UUID
'{AAE7E4E2-6388-11D1-8D93-006097C9A2B2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HAAE7E4E2, CInt(&H6388), CInt(&H11D1), &H8D, &H93, &H0, &H60, &H97, &HC9, &HA2, &HB2)
IID_IAMNetShowPreroll = iid
End Function
Public Function IID_IAMMediaContent() As UUID
'{FA2AA8F4-8B62-11D0-A520-000000000000}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFA2AA8F4, CInt(&H8B62), CInt(&H11D0), &HA5, &H20, &H0, &H0, &H0, &H0, &H0, &H0)
IID_IAMMediaContent = iid
End Function
Public Function IID_IAMExtendedSeeking() As UUID
'{FA2AA8F9-8B62-11D0-A520-000000000000}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFA2AA8F9, CInt(&H8B62), CInt(&H11D0), &HA5, &H20, &H0, &H0, &H0, &H0, &H0, &H0)
IID_IAMExtendedSeeking = iid
End Function
Public Function IID_IAMMediaContent2() As UUID
'{CE8F78C1-74D9-11D2-B09D-00A0C9A81117}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HCE8F78C1, CInt(&H74D9), CInt(&H11D2), &HB0, &H9D, &H0, &HA0, &HC9, &HA8, &H11, &H17)
IID_IAMMediaContent2 = iid
End Function
Public Function IID_IAMAnalogVideoDecoder() As UUID
'{C6E13350-30AC-11d0-A18C-00A0C9118956}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC6E13350, CInt(&H30AC), CInt(&H11D0), &HA1, &H8C, &H0, &HA0, &HC9, &H11, &H89, &H56)
IID_IAMAnalogVideoDecoder = iid
End Function
Public Function IID_IAMAsyncReaderTimestampScaling() As UUID
'{cf7b26fc-9a00-485b-8147-3e789d5e8f67}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HCF7B26FC, CInt(&H9A00), CInt(&H485B), &H81, &H47, &H3E, &H78, &H9D, &H5E, &H8F, &H67)
IID_IAMAsyncReaderTimestampScaling = iid
End Function
Public Function IID_IAMAudioInputMixer() As UUID
'{54C39221-8380-11d0-B3F0-00AA003761C5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H54C39221, CInt(&H8380), CInt(&H11D0), &HB3, &HF0, &H0, &HAA, &H0, &H37, &H61, &HC5)
IID_IAMAudioInputMixer = iid
End Function
Public Function IID_IAMAudioRendererStats() As UUID
'{22320CB2-D41A-11d2-BF7C-D7CB9DF0BF93}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H22320CB2, CInt(&HD41A), CInt(&H11D2), &HBF, &H7C, &HD7, &HCB, &H9D, &HF0, &HBF, &H93)
IID_IAMAudioRendererStats = iid
End Function
Public Function IID_IAMBufferNegotiation() As UUID
'{56ED71A0-AF5F-11D0-B3F0-00AA003761C5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56ED71A0, CInt(&HAF5F), CInt(&H11D0), &HB3, &HF0, &H0, &HAA, &H0, &H37, &H61, &HC5)
IID_IAMBufferNegotiation = iid
End Function
Public Function IID_IAMCameraControl() As UUID
'{C6E13370-30AC-11d0-A18C-00A0C9118956}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC6E13370, CInt(&H30AC), CInt(&H11D0), &HA1, &H8C, &H0, &HA0, &HC9, &H11, &H89, &H56)
IID_IAMCameraControl = iid
End Function
Public Function IID_IAMCertifiedOutputProtection() As UUID
'{6feded3e-0ff1-4901-a2f1-43f7012c8515}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6FEDED3E, CInt(&HFF1), CInt(&H4901), &HA2, &HF1, &H43, &HF7, &H1, &H2C, &H85, &H15)
IID_IAMCertifiedOutputProtection = iid
End Function
Public Function IID_IAMClockAdjust() As UUID
'{4d5466b0-a49c-11d1-abe8-00a0c905f375}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4D5466B0, CInt(&HA49C), CInt(&H11D1), &HAB, &HE8, &H0, &HA0, &HC9, &H5, &HF3, &H75)
IID_IAMClockAdjust = iid
End Function
Public Function IID_IAMClockSlave() As UUID
'{9FD52741-176D-4b36-8F51-CA8F933223BE}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9FD52741, CInt(&H176D), CInt(&H4B36), &H8F, &H51, &HCA, &H8F, &H93, &H32, &H23, &HBE)
IID_IAMClockSlave = iid
End Function
Public Function IID_IAMCrossbar() As UUID
'{C6E13380-30AC-11d0-A18C-00A0C9118956}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC6E13380, CInt(&H30AC), CInt(&H11D0), &HA1, &H8C, &H0, &HA0, &HC9, &H11, &H89, &H56)
IID_IAMCrossbar = iid
End Function
Public Function IID_IAMDecoderCaps() As UUID
'{c0dff467-d499-4986-972b-e1d9090fa941}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC0DFF467, CInt(&HD499), CInt(&H4986), &H97, &H2B, &HE1, &HD9, &H9, &HF, &HA9, &H41)
IID_IAMDecoderCaps = iid
End Function
Public Function IID_IMediaSample() As UUID
'{56a8689a-0ad4-11ce-b03a-0020af0ba770}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H56A8689A, CInt(&HAD4), CInt(&H11CE), &HB0, &H3A, &H0, &H20, &HAF, &HB, &HA7, &H70)
 IID_IMediaSample = iid
End Function
Public Function IID_IMediaSample2() As UUID
'{36b73884-c2c8-11cf-8b46-00805f6cef60}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H36B73884, CInt(&HC2C8), CInt(&H11CF), &H8B, &H46, &H0, &H80, &H5F, &H6C, &HEF, &H60)
 IID_IMediaSample2 = iid
End Function
Public Function IID_ISampleGrabber() As UUID
'{6B652FFF-11FE-4fce-92AD-0266B5D7C78F}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6B652FFF, CInt(&H11FE), CInt(&H4FCE), &H92, &HAD, &H2, &H66, &HB5, &HD7, &HC7, &H8F)
 IID_ISampleGrabber = iid
End Function
Public Function IID_ISampleGrabberCB() As UUID
'{0579154a-2b53-4994-b0d0-e773148eff85}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H579154A, CInt(&H2B53), CInt(&H4994), &HB0, &HD0, &HE7, &H73, &H14, &H8E, &HFF, &H85)
 IID_ISampleGrabberCB = iid
End Function
End Module