'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

'wdMF.twin - Media Foundation interfaces

/*

Covered headers:

Mfobjects.idl
Mfidl.idl
Mftransform.idl
mfmediaengine.idl
mfmediacapture.idl
mfcapturengine.idl
mfcontentdecyrptionmodule.idl
mfvirtualcamera.idl
mfspatialaudio.idl
mfmp2dlna.idl
mfplay.idl
mfreadwrite.idl
mfsharingengine.idl
mfd3d12.idl
evr.idl

*/

#If WDL_NO_DIRECTX = 0 Then

    [InterfaceId("90377834-21D0-4DEE-8214-BA2E3E6C1127")]
    [OleAutomation(False)]
    Interface IMFMediaSession Extends IMFMediaEventGenerator
        Sub SetTopology(ByVal dwSetTopologyFlags As MFSESSION_SETTOPOLOGY_FLAGS, ByVal pTopology As IMFTopology)
        Sub ClearTopologies()
        Sub Start(ByRef pguidTimeFormat As UUID, ByRef pvarStartPosition As Variant)
        Sub Pause()
        Sub Stop()
        Sub Close()
        Sub Shutdown()
        Sub GetClock(ByRef ppClock As IMFClock)
        Sub GetSessionCapabilities(ByRef pdwCaps As MFSessionCapabilities)
        Sub GetFullTopology(ByVal dwGetFullTopologyFlags As MFSESSION_GETFULLTOPOLOGY_FLAGS, ByVal TopoId As LongLong, ByRef ppFullTopology As IMFTopology)
    End Interface
    
    [InterfaceId("FBE5A32D-A497-4B61-BB85-97B1A848A6E3")]
    [OleAutomation(False)]
    Interface IMFSourceResolver Extends stdole.IUnknown
        Function CreateObjectFromURL(ByVal pwszUrl As LongPtr, ByVal dwFlags As MF_RESOLUTION, ByVal pProps As IPropertyStore, ByRef pObjectType As MF_OBJECT_TYPE) As IUnknown
        Function CreateObjectFromByteStream(ByVal pByteStream As IMFByteStream, ByVal pwszUrl As LongPtr, ByVal dwFlags As MF_RESOLUTION, ByVal pProps As IPropertyStore, ByRef pObjectType As MF_OBJECT_TYPE) As IUnknown
        Sub BeginCreateObjectFromURL(ByVal pwszUrl As LongPtr, ByVal dwFlags As MF_RESOLUTION, ByVal pProps As IPropertyStore, ByRef ppIUnknownCancelCookie As IUnknown, ByVal pCallback As IMFAsyncCallback, ByVal punkState As IUnknown)
        Function EndCreateObjectFromURL(ByVal pResult As IMFAsyncResult, ByRef pObjectType As MF_OBJECT_TYPE) As IUnknown
        Sub BeginCreateObjectFromByteStream(ByVal pByteStream As IMFByteStream, ByVal pwszUrl As LongPtr, ByVal dwFlags As MF_RESOLUTION, ByVal pProps As IPropertyStore, ByRef ppIUnknownCancelCookie As IUnknown, ByVal pCallback As IMFAsyncCallback, ByVal punkState As IUnknown)
        Function EndCreateObjectFromByteStream(ByVal pResult As IMFAsyncResult, ByRef pObjectType As MF_OBJECT_TYPE) As IUnknown
        Sub CancelObjectCreation(ByVal pIUnknownCancelCookie As IUnknown)
    End Interface

    [InterfaceId("AD4C1B00-4BF7-422F-9175-756693D9130D")]
    [OleAutomation(False)]
    Interface IMFByteStream Extends stdole.IUnknown
        Function GetCapabilities() As MfByteStreamFlags
        Function GetLength() As LongLong
        Sub SetLength(ByVal qwLength As LongLong)
        Function GetCurrentPosition() As LongLong
        Sub SetCurrentPosition(ByVal qwPosition As LongLong)
        Function IsEndOfStream() As Long
        Function Read(ByRef pb As Any, ByVal cb As Long) As Long
        Sub BeginRead(ByRef pb As Any, ByVal cb As Long, ByVal pCallback As IMFAsyncCallback, ByVal punkState As IUnknown)
        Function EndRead(ByVal pResult As IMFAsyncResult) As Long
        Function Write(ByRef pb As Any, ByVal cb As Long) As Long
        Sub BeginWrite(ByRef pb As Any, ByVal cb As Long, ByVal pCallback As IMFAsyncCallback, ByVal punkState As IUnknown)
        Function EndWrite(ByVal pResult As IMFAsyncResult) As Long
        Function Seek(ByVal SeekOrigin As MFBYTESTREAM_SEEK_ORIGIN, ByVal llSeekOffset As LongLong, ByVal dwSeekFlags As MfByteStreamSeekFlags) As LongLong
        Sub Flush()
        Sub Close()
    End Interface

    [InterfaceId("A27003CF-2354-4F2A-8D6A-AB7CFF15437E")]
    [OleAutomation(False)]
    Interface IMFAsyncCallback Extends stdole.IUnknown
        Sub GetParameters(ByRef pdwFlags As MfAsyncParamFlags, ByRef pdwQueue As Long)
        Sub Invoke(ByVal pAsyncResult As IMFAsyncResult)
    End Interface

    [InterfaceId("AC6B7889-0740-4D51-8619-905994A55CC6")]
    [OleAutomation(False)]
    Interface IMFAsyncResult Extends stdole.IUnknown
        Function GetState() As IUnknown
        [PreserveSig]
        Function GetStatus() As Long
        Sub SetStatus(ByVal hrStatus As Long)
        Function GetObject() As IUnknown
        [PreserveSig]
        Function GetStateNoAddRef() As IUnknown
    End Interface

    [InterfaceId("2CD2D921-C447-44A7-A13C-4ADABFC247E3")]
    [OleAutomation(False)]
    Interface IMFAttributes Extends stdole.IUnknown
        Sub GetItem(ByRef guidKey As UUID, ByRef pValue As Any)
        Function GetItemType(ByRef guidKey As UUID) As MF_ATTRIBUTE_TYPE
        Function CompareItem(ByRef guidKey As UUID, ByRef Value As Variant) As BOOL
        Function Compare(ByVal pTheirs As IMFAttributes, ByVal MatchType As MF_ATTRIBUTES_MATCH_TYPE) As BOOL
        Function GetUInt32(ByRef guidKey As UUID) As Long
        Function GetUInt64(ByRef guidKey As UUID) As LongLong
        Function GetDouble(ByRef guidKey As UUID) As Double
        Function GetGUID(ByRef guidKey As UUID) As UUID
        Function GetStringLength(ByRef guidKey As UUID) As Long
        Function GetString(ByRef guidKey As UUID, ByVal pwszValue As LongPtr, ByVal cchBufSize As Long) As Long
        Function GetAllocatedString(ByRef guidKey As UUID, ByRef ppwszValue As LongPtr) As Long
        Function GetBlobSize(ByRef guidKey As UUID) As Long
        Function GetBlob(ByRef guidKey As UUID, ByRef pBuf As Any, ByVal cbBufSize As Long) As Long
        Function GetAllocatedBlob(ByRef guidKey As UUID, ByRef ppBuf As Any) As Long
        Function GetUnknown(ByRef guidKey As UUID, ByRef riid As UUID) As IUnknown
        Sub SetItem(ByRef guidKey As UUID, ByRef Value As Variant)
        Sub DeleteItem(ByRef guidKey As UUID)
        Sub DeleteAllItems()
        Sub SetUINT32(ByRef guidKey As UUID, ByVal unValue As Long)
        Sub SetUINT64(ByRef guidKey As UUID, ByVal unValue As LongLong)
        Sub SetDouble(ByRef guidKey As UUID, ByVal fValue As Double)
        Sub SetGuid(ByRef guidKey As UUID, ByRef guidValue As UUID)
        Sub SetString(ByRef guidKey As UUID, ByVal wszValue As LongPtr)
        Sub SetBlob(ByRef guidKey As UUID, ByRef pBuf As Any, ByVal cbBufSize As Long)
        Sub SetUnknown(ByRef guidKey As UUID, ByVal pUnknown As IUnknown)
        Sub LockStore()
        Sub UnlockStore()
        Function GetCount() As Long
        Sub GetItemByIndex(ByVal unIndex As Long, ByRef pguidKey As UUID, ByRef pValue As Any)
        Sub CopyAllItems(ByVal pDest As IMFAttributes)
    End Interface


    [InterfaceId("2CD0BD52-BCD5-4B89-B62C-EADC0C031E7D")]
    [OleAutomation(False)]
    Interface IMFMediaEventGenerator Extends stdole.IUnknown
        Function GetEvent(ByVal dwFlags As Long) As IMFMediaEvent
        Sub BeginGetEvent(ByVal pCallback As IMFAsyncCallback, ByVal punkState As IUnknown)
        Function EndGetEvent(ByVal pResult As IMFAsyncResult) As IMFMediaEvent
        Sub QueueEvent(ByVal met As MediaEventType, ByRef guidExtendedType As UUID, ByVal hrStatus As Long, ByRef pvValue As Any)
    End Interface

    [InterfaceId("DF598932-F10C-4E39-BBA2-C308F101DAA3")]
    [OleAutomation(False)]
    Interface IMFMediaEvent Extends IMFAttributes
        Function GetType() As MediaEventType
        Function GetExtendedType() As UUID
        Function GetStatus() As Long
        Function GetValue() As Variant
    End Interface

    [InterfaceId("E7FE2E12-661C-40DA-92F9-4F002AB67627")]
    Interface IMFReadWriteClassFactory Extends stdole.IUnknown
        Sub CreateInstanceFromURL(clsid As UUID, ByVal pwszURL As LongPtr, ByVal pAttributes As IMFAttributes, riid As UUID, ppvObject As Any)
        Sub CreateInstanceFromObject(clsid As UUID, ByVal punkObject As IUnknown, ByVal pAttributes As IMFAttributes, riid As UUID, ppvObject As Any)
    End Interface


    [InterfaceId("279A808D-AEC7-40C8-9C6B-A6B492C78A66")]
    [OleAutomation(False)]
    Interface IMFMediaSource Extends IMFMediaEventGenerator
        Function GetCharacteristics() As Long
        Function CreatePresentationDescriptor() As IMFPresentationDescriptor
        Sub Start(ByVal pPresentationDescriptor As IMFPresentationDescriptor, ByRef pguidTimeFormat As Any, ByRef pvarStartPosition As Any)
        Sub Stop()
        Sub Pause()
        Sub Shutdown()
    End Interface

    [InterfaceId("03CB2711-24D7-4DB6-A17F-F3A7A479A536")]
    [OleAutomation(False)]
    Interface IMFPresentationDescriptor Extends IMFAttributes
        Function GetStreamDescriptorCount() As Long
        Function GetStreamDescriptorByIndex(ByVal dwIndex As Long, ByRef pfSelected As BOOL) As IMFStreamDescriptor
        Sub SelectStream(ByVal dwDescriptorIndex As Long)
        Sub DeselectStream(ByVal dwDescriptorIndex As Long)
        Function Clone() As IMFPresentationDescriptor
    End Interface

    [InterfaceId("56C03D9C-9DBB-45F5-AB4B-D80F47C05938")]
    [OleAutomation(False)]
    Interface IMFStreamDescriptor Extends IMFAttributes
        Function GetStreamIdentifier() As Long
        Function GetMediaTypeHandler() As IMFMediaTypeHandler
    End Interface

    [InterfaceId("E93DCF6C-4B07-4E1E-8123-AA16ED6EADF5")]
    [OleAutomation(False)]
    Interface IMFMediaTypeHandler Extends stdole.IUnknown
        Function IsMediaTypeSupported(ByVal pMediaType As IMFMediaType) As IMFMediaType
        Function GetMediaTypeCount() As Long
        Function GetMediaTypeByIndex(ByVal dwIndex As Long) As IMFMediaType
        Sub SetCurrentMediaType(ByVal pMediaType As IMFMediaType)
        Function GetCurrentMediaType() As IMFMediaType
        Function GetMajorType() As UUID
    End Interface

    [InterfaceId("44AE0FA8-EA31-4109-8D2E-4CAE4997C555")]
    [OleAutomation(False)]
    Interface IMFMediaType Extends IMFAttributes
        Function GetMajorType() As UUID
        Function IsCompressedFormat() As BOOL
        Function IsEqual(ByVal pIMediaType As IMFMediaType) As MfMediaTypeEqualFlags
        #If Win64 Then
        Sub GetRepresentation(guidRepresentation As UUID, ByRef ppvRepresentation As Any)
        Sub FreeRepresentation(guidRepresentation As UUID, ByRef pvRepresentation As Any)
        #Else
        Sub GetRepresentation(ByVal guidRepresentation1 As Long, ByVal guidRepresentation2 As Long, ByVal guidRepresentation3 As Long, ByVal guidRepresentation4 As Long, ByRef ppvRepresentation As Any)
        Sub FreeRepresentation(ByVal guidRepresentation1 As Long, ByVal guidRepresentation2 As Long, ByVal guidRepresentation3 As Long, ByVal guidRepresentation4 As Long, ByRef pvRepresentation As Any)
        #End If
    End Interface

    [InterfaceId("70AE66F2-C809-4E4F-8915-BDCB406B7993")]
    [OleAutomation(False)]
    Interface IMFSourceReader Extends stdole.IUnknown
        Function GetStreamSelection(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes) As Long
        Sub SetStreamSelection(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes, ByVal fSelected As BOOL)
        Function GetNativeMediaType(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes, ByVal dwMediaTypeIndex As Long) As IMFMediaType
        Function GetCurrentMediaType(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes) As IMFMediaType
        Sub SetCurrentMediaType(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes, ByVal pdwReserved As LongPtr, ByVal pMediaType As IMFMediaType)
        Sub SetCurrentPosition(ByRef guidTimeFormat As UUID, ByRef varPosition As Variant)
        Function ReadSample(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes, ByVal dwControlFlags As MF_SOURCE_READER_CONTROL_FLAG, ByRef pdwActualStreamIndex As Long, ByRef pdwStreamFlags As MF_SOURCE_READER_FLAG, ByRef pllTimestamp As LongLong) As IMFSample
        Sub Flush(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes)
        Sub GetServiceForStream(ByVal dwStreamIndex As Long, ByRef guidService As UUID, ByRef riid As UUID, ByRef ppvObject As Any)
        Function GetPresentationAttribute(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes, ByRef guidAttribute As UUID) As Variant
    End Interface

    [InterfaceId("7b981cf0-560e-4116-9875-b099895f23d7")]
    [OleAutomation(False)]
    Interface IMFSourceReaderEx Extends IMFSourceReader
        Sub SetNativeMediaType(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes, ByVal pMediaType As IMFMediaType, pdwStreamFlags As MF_SOURCE_READER_FLAG)
        Sub AddTransformForStream(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes, ByVal pTransformOrActivate As IUnknown)
        Sub RemoveAllTransformsForStream(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes)
        Sub GetTransformForStream(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes, ByVal dwTransformIndex As Long, pGuidCategory As UUID, ppTransform As IMFTransform)
    End Interface

    [InterfaceId("deec8d99-fa1d-4d82-84c2-2c8969944867")]
    [OleAutomation(False)]
    Interface IMFSourceReaderCallback Extends stdole.IUnknown
        Sub OnReadSample(ByVal hrStatus As Long, ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes, ByVal dwStreamFlags As Long, ByVal llTimestamp As LongLong, ByVal pSample As IMFSample)
        Sub OnFlush(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes)
        Sub OnEvent(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes, ByVal pEvent As IMFMediaEvent)
    End Interface
    [InterfaceId("CF839FE6-8C2A-4DD2-B6EA-C22D6961AF05")]
    [OleAutomation(False)]
    Interface IMFSourceReaderCallback2 Extends IMFSourceReaderCallback
        Sub OnTransformChange()
        Sub OnStreamError(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes, ByVal hrStatus As Long)
    End Interface

    [InterfaceId("3137f1cd-fe5e-4805-a5d8-fb477448cb3d")]
    [OleAutomation(False)]
    Interface IMFSinkWriter Extends stdole.IUnknown
        Sub AddStream(ByVal pTargetMediaType As IMFMediaType, pdwStreamIndex As Long)
        Sub SetInputMediaType(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes, ByVal pInputMediaType As IMFMediaType, Optional ByVal pEncodingParameters As IMFAttributes)
        Sub BeginWriting()
        Sub WriteSample(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes, ByVal pSample As IMFSample)
        Sub SendStreamTick(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes, ByVal llTimestamp As LongLong)
        Sub PlaceMarker(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes, pvContext As Any)
        Sub NotifyEndOfSegment(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes)
        Sub Flush(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes)
        Sub Finalize()
        Sub GetServiceForStream(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes, guidService As UUID, riid As UUID, ppvObject As Any)
        Sub GetStatistics(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes, pStats As MF_SINK_WRITER_STATISTICS)
    End Interface
    [InterfaceId("588d72ab-5Bc1-496a-8714-b70617141b25")]
    [OleAutomation(False)]
    Interface IMFSinkWriterEx Extends IMFSinkWriter
        Sub GetTransformForStream(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes, ByVal dwTransformIndex As Long, pGuidCategory As UUID, ppTransform As IMFTransform)
    End Interface

    [InterfaceId("17C3779E-3CDE-4EDE-8C60-3899F5F53AD6")]
    [OleAutomation(False)]
    Interface IMFSinkWriterEncoderConfig Extends stdole.IUnknown
        Sub SetTargetMediaType(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes, ByVal pTargetMediaType As IMFMediaType, Optional ByVal pEncodingParameters As IMFAttributes)
        Sub PlaceEncodingParameters(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes, ByVal pEncodingParameters As IMFAttributes)
    End Interface

    [InterfaceId("666f76de-33d2-41b9-a458-29ed0a972c58")]
    [OleAutomation(False)]
    Interface IMFSinkWriterCallback Extends stdole.IUnknown
        Sub OnFinalize(ByVal hrStatus As Long)
        Sub OnMarker(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes, ByVal pvContext As LongPtr)
    End Interface
    [InterfaceId("2456BD58-C067-4513-84FE-8D0C88FFDC61")]
    [OleAutomation(False)]
    Interface IMFSinkWriterCallback2 Extends IMFSinkWriterCallback
        Sub OnTransformChange()
        Sub OnStreamError(ByVal dwStreamIndex As MfSourceReaderDefaultStreamIndexes, ByVal hrStatus As Long)
    End Interface







    [InterfaceId("C40A00F2-B93A-4D80-AE8C-5A1C634F58E4")]
    [OleAutomation(False)]
    Interface IMFSample Extends IMFAttributes
        Function GetSampleFlags() As Long
        Sub SetSampleFlags(ByVal dwSampleFlags As Long)
        Function GetSampleTime() As LongLong
        Sub SetSampleTime(ByVal hnsSampleTime As LongLong)
        Function GetSampleDuration() As LongLong
        Sub SetSampleDuration(ByVal hnsSampleDuration As LongLong)
        Function GetBufferCount() As Long
        Function GetBufferByIndex(ByVal dwIndex As Long) As IMFMediaBuffer
        Function ConvertToContiguousBuffer() As IMFMediaBuffer
        Sub AddBuffer(ByVal pBuffer As IMFMediaBuffer)
        Sub RemoveBufferByIndex(ByVal dwIndex As Long)
        Sub RemoveAllBuffers()
        Function GetTotalLength() As Long
        Sub CopyToBuffer(ByVal pBuffer As IMFMediaBuffer)
    End Interface

    [InterfaceId("045FA593-8799-42B8-BC8D-8968C6453507")]
    [OleAutomation(False)]
    Interface IMFMediaBuffer Extends stdole.IUnknown
        Sub Lock(ByRef ppbBuffer As Any, ByRef pcbMaxLength As Long, ByRef pcbCurrentLength As Long)
        Sub Unlock()
        Function GetCurrentLength() As Long
        Sub SetCurrentLength(ByVal cbCurrentLength As Long)
        Function GetMaxLength() As Long
    End Interface

    [InterfaceId("2EB1E945-18B8-4139-9B1A-D5D584818530")]
    [OleAutomation(False)]
    Interface IMFClock Extends stdole.IUnknown
        Sub GetClockCharacteristics(ByRef pdwCharacteristics As MFCLOCK_CHARACTERISTICS_FLAGS)
        Sub GetCorrelatedTime(ByVal dwReserved As Long, ByRef pllClockTime As LongLong, ByRef phnsSystemTime As LongLong)
        Sub GetContinuityKey(ByRef pdwContinuityKey As Long)
        Sub GetState(ByVal dwReserved As Long, ByRef peClockState As MFCLOCK_STATE)
        Sub GetProperties(ByRef pClockProperties As MFCLOCK_PROPERTIES)
    End Interface

    [InterfaceId("5BC8A76B-869A-46A3-9B03-FA218A66AEBE")]
    [OleAutomation(False)]
    Interface IMFCollection Extends stdole.IUnknown
        Sub GetElementCount(ByRef pcElements As Long)
        Sub GetElement(ByVal dwElementIndex As Long, ByRef ppUnkElement As IUnknown)
        Sub AddElement(ByVal pUnkElement As IUnknown)
        Sub RemoveElement(ByVal dwElementIndex As Long, ByRef ppUnkElement As IUnknown)
        Sub InsertElementAt(ByVal dwIndex As Long, ByVal pUnknown As IUnknown)
        Sub RemoveAllElements()
    End Interface

    [InterfaceId("7DC9D5F9-9ED9-44EC-9BBF-0600BB589FBB")]
    [OleAutomation(False)]
    Interface IMF2DBuffer Extends stdole.IUnknown
        Sub Lock2D(ByRef pbScanline0 As Any, ByRef plPitch As Long)
        Sub Unlock2D()
        Sub GetScanline0AndPitch(ByRef pbScanline0 As Any, ByRef plPitch As Long)
        Sub IsContiguousFormat(ByRef pfIsContiguous As BOOL)
        Sub GetContiguousLength(ByRef pcbLength As Long)
        Sub ContiguousCopyTo(ByRef pbDestBuffer As Byte, ByVal cbDestBuffer As Long)
        Sub ContiguousCopyFrom(ByRef pbSrcBuffer As Any, ByVal cbSrcBuffer As Long)
    End Interface

    [InterfaceId("33AE5EA6-4316-436F-8DDD-D73D22F829EC")]
    [OleAutomation(False)]
    Interface IMF2DBuffer2 Extends IMF2DBuffer
        Sub Lock2DSize(ByVal flags As MF2DBuffer_LockFlags, ByRef scanline0 As Byte, ByRef pitch As Long, ByRef buffer_start As Byte, ByRef buffer_length As Long)
        Sub Copy2DTo(ByVal dest_buffer As IMF2DBuffer2)
    End Interface

    [InterfaceId("E7174CFA-1C9E-48B1-8866-626226BFC258")]
    [OleAutomation(False)]
    Interface IMFDXGIBuffer Extends stdole.IUnknown
        Sub GetResource(ByRef riid As UUID, ByRef object As Any)
        Sub GetSubresourceIndex(ByRef index As Long)
        Sub GetUnknown(ByRef guid As UUID, ByRef riid As UUID, ByRef object As Any)
        Sub SetUnknown(ByRef guid As UUID, ByVal data As IUnknown)
    End Interface

    [InterfaceId("83CF873A-F6DA-4BC8-823F-BACFD55DC430")]
    [OleAutomation(False)]
    Interface IMFTopologyNode Extends IMFAttributes
        Sub SetObject(ByVal pObject As IUnknown)
        Sub GetObject(ByRef ppObject As IUnknown)
        Sub GetNodeType(ByRef pType As MF_TOPOLOGY_TYPE)
        Sub GetTopoNodeID(ByRef pid As LongLong)
        Sub SetTopoNodeID(ByVal ullTopoID As LongLong)
        Sub GetInputCount(ByRef pcInputs As Long)
        Sub GetOutputCount(ByRef pcOutputs As Long)
        Sub ConnectOutput(ByVal dwOutputIndex As Long, ByVal pDownstreamNode As IMFTopologyNode, ByVal dwInputIndexOnDownstreamNode As Long)
        Sub DisconnectOutput(ByVal dwOutputIndex As Long)
        Sub GetInput(ByVal dwInputIndex As Long, ByRef ppUpstreamNode As IMFTopologyNode, ByRef pdwOutputIndexOnUpstreamNode As Long)
        Sub GetOutput(ByVal dwOutputIndex As Long, ByRef ppDownstreamNode As IMFTopologyNode, ByRef pdwInputIndexOnDownstreamNode As Long)
        Sub SetOutputPrefType(ByVal dwOutputIndex As Long, ByVal pType As IMFMediaType)
        Sub GetOutputPrefType(ByVal dwOutputIndex As Long, ByRef ppType As IMFMediaType)
        Sub SetInputPrefType(ByVal dwInputIndex As Long, ByVal pType As IMFMediaType)
        Sub GetInputPrefType(ByVal dwInputIndex As Long, ByRef ppType As IMFMediaType)
        Sub CloneFrom(ByVal pNode As IMFTopologyNode)
    End Interface

    [InterfaceId("83CF873A-F6DA-4BC8-823F-BACFD55DC433")]
    [OleAutomation(False)]
    Interface IMFTopology Extends IMFAttributes
        Sub GetTopologyID(ByRef pid As LongLong)
        Sub AddNode(ByVal pNode As IMFTopologyNode)
        Sub RemoveNode(ByVal pNode As IMFTopologyNode)
        Sub GetNodeCount(ByRef pwNodes As Integer)
        Sub GetNode(ByVal wIndex As Integer, ByRef ppNode As IMFTopologyNode)
        Sub Clear()
        Sub CloneFrom(ByVal pTopology As IMFTopology)
        Sub GetNodeByID(ByVal qwTopoNodeID As LongLong, ByRef ppNode As IMFTopologyNode)
        Sub GetSourceNodeCollection(ByRef ppCollection As IMFCollection)
        Sub GetOutputNodeCollection(ByRef ppCollection As IMFCollection)
    End Interface
    
    [InterfaceId("59EFF8B9-938C-4A26-82F2-95CB84CDC837")]
    [OleAutomation(False)]
    Interface IMediaBuffer Extends stdole.IUnknown
        Sub SetLength(ByVal cbLength As Long)
        Sub GetMaxLength(ByRef pcbMaxLength As Long)
        Sub GetBufferAndLength(ByRef ppBuffer As LongPtr, ByRef pcbLength As Long)
    End Interface


    [InterfaceId("D8AD0F58-5494-4102-97C5-EC798E59BCF4")]
    [OleAutomation(False)]
    Interface IMediaObject Extends stdole.IUnknown
        Sub GetStreamCount(ByRef pcInputStreams As Long, ByRef pcOutputStreams As Long)
        Sub GetInputStreamInfo(ByVal dwInputStreamIndex As Long, ByRef pdwFlags As DMO_INPUT_STREAM_INFO_FLAGS)
        Sub GetOutputStreamInfo(ByVal dwOutputStreamIndex As Long, ByRef pdwFlags As DMO_OUTPUT_STREAM_INFO_FLAGS)
        Sub GetInputType(ByVal dwInputStreamIndex As Long, ByVal dwTypeIndex As Long, ByRef pmt As DMO_MEDIA_TYPE)
        Sub GetOutputType(ByVal dwOutputStreamIndex As Long, ByVal dwTypeIndex As Long, ByRef pmt As DMO_MEDIA_TYPE)
        Sub SetInputType(ByVal dwInputStreamIndex As Long, ByRef pmt As DMO_MEDIA_TYPE, ByVal dwFlags As Long)
        Sub SetOutputType(ByVal dwOutputStreamIndex As Long, ByRef pmt As DMO_MEDIA_TYPE, ByVal dwFlags As Long)
        Sub GetInputCurrentType(ByVal dwInputStreamIndex As Long, ByRef pmt As DMO_MEDIA_TYPE)
        Sub GetOutputCurrentType(ByVal dwOutputStreamIndex As Long, ByRef pmt As DMO_MEDIA_TYPE)
        Sub GetInputSizeInfo(ByVal dwInputStreamIndex As Long, ByRef pcbSize As Long, ByRef pcbMaxLookahead As Long, ByRef pcbAlignment As Long)
        Sub GetOutputSizeInfo(ByVal dwOutputStreamIndex As Long, ByRef pcbSize As Long, ByRef pcbAlignment As Long)
        Sub GetInputMaxLatency(ByVal dwInputStreamIndex As Long, ByVal prtMaxLatency As LongLong)
        Sub SetInputMaxLatency(ByVal dwInputStreamIndex As Long, ByVal rtMaxLatency As LongLong)
        Sub Flush()
        Sub Discontinuity(ByVal dwInputStreamIndex As Long)
        Sub AllocateStreamingResources()
        Sub FreeStreamingResources()
        Sub GetInputStatus(ByVal dwInputStreamIndex As Long, ByRef dwFlags As Long)
        Sub ProcessInput(ByVal dwInputStreamIndex As Long, ByVal pBuffer As IMediaBuffer, ByVal dwFlags As Long, ByVal rtTimestamp As LongLong, ByVal rtTimelength As LongLong)
        Sub ProcessOutput(ByVal dwFlags As Long, ByVal cOutputBufferCount As Long, ByRef pOutputBuffers As DMO_OUTPUT_DATA_BUFFER, ByRef pdwStatus As Long)
        Sub Lock(ByVal bLock As Long)
    End Interface

    [InterfaceId("2C3CD98A-2BFA-4A53-9C27-5249BA64BA0F")]
    [OleAutomation(False)]
    Interface IEnumDMO Extends stdole.IUnknown
        Sub Next(ByVal cItemsToFetch As Long, ByRef pclsid As UUID, ByVal Names As LongPtr, ByRef pcItemsFetched As Long)
        Sub Skip(ByVal cItemsToSkip As Long)
        Sub Reset()
        Sub Clone(ByRef ppenum As IEnumDMO)
    End Interface

    [InterfaceId("651B9AD0-0FC7-4AA9-9538-D89931010741")]
    [OleAutomation(False)]
    Interface IMediaObjectInPlace Extends stdole.IUnknown
        Sub Process(ByVal ulSize As Long, ByRef pData As Byte, ByVal refTimeStart As LongLong, ByVal dwFlags As Long)
        Sub Clone(ByRef ppMediaObject As IMediaObjectInPlace)
        Sub GetLatency(ByVal pLatencyTime As LongLong)
    End Interface
   
    [InterfaceId("65ABEA96-CF36-453F-AF8A-705E98F16260")]
    [OleAutomation(False)]
    Interface IDMOQualityControl Extends stdole.IUnknown
        Sub SetNow(ByVal rtNow As LongLong)
        Sub SetStatus(ByVal dwFlags As Long)
        Sub GetStatus(ByRef pdwFlags As Long)
    End Interface

    [InterfaceId("BE8F4F4E-5B16-4D29-B350-7F6B5D9298AC")]
    [OleAutomation(False)]
    Interface IDMOVideoOutputOptimizations Extends stdole.IUnknown
        Sub QueryOperationModePreferences(ByVal ulOutputStreamIndex As Long, ByRef pdwRequestedCapabilities As Long)
        Sub SetOperationMode(ByVal ulOutputStreamIndex As Long, ByVal dwEnabledFeatures As Long)
        Sub GetCurrentOperationMode(ByVal ulOutputStreamIndex As Long, ByRef pdwEnabledFeatures As Long)
        Sub GetCurrentSampleRequirements(ByVal ulOutputStreamIndex As Long, ByRef pdwRequestedFeatures As Long)
    End Interface


    [InterfaceId("26A0ADC3-CE26-4672-9304-69552EDD3FAF")]
    [OleAutomation(False)]
    Interface IMFAudioMediaType Extends IMFMediaType
        [PreserveSig]
        Function GetAudioFormat() As WAVEFORMATEX
    End Interface

    [InterfaceId("B99F381F-A8F9-47A2-A5AF-CA3A225A3890")]
    [OleAutomation(False)]
    Interface IMFVideoMediaType Extends IMFMediaType
        [PreserveSig]
        Function GetVideoFormat() As MFVIDEOFORMAT
        #If Win64 Then
            Sub GetVideoRepresentation(ByRef guidRepresentation As UUID, ByRef ppvRepresentation As Any, ByVal lStride As Long)
        #Else
        	Sub GetVideoRepresentation(ByVal guidRepresentation1 As Long, ByVal guidRepresentation2 As Long, ByVal guidRepresentation3 As Long, ByVal guidRepresentation4 As Long, ByRef ppvRepresentation As Any, ByVal lStride As Long)
        #End If
    End Interface

    [InterfaceId("C7A4DCA1-F5F0-47B6-B92B-BF0106D25791")]
    [OleAutomation(False)]
    Interface IMFAsyncCallbackLogging Extends stdole.IUnknown
        Sub GetParameters(ByRef pdwFlags As Long, ByRef pdwQueue As Long)
        Sub Invoke(ByVal pAsyncResult As IMFAsyncResult)
        Sub GetObjectPointer()
        Sub GetObjectTag()
    End Interface

    [InterfaceId("A6B43F84-5C0A-42E8-A44D-B1857A76992F")]
    [OleAutomation(False)]
    Interface IMFByteStreamProxyClassFactory Extends stdole.IUnknown
        Sub CreateByteStreamProxy(ByVal pByteStream As IMFByteStream, ByVal pAttributes As IMFAttributes, ByRef riid As UUID, ByRef ppvObject As Any)
    End Interface


    [InterfaceId("8FEED468-6F7E-440D-869A-49BDD283AD0D")]
    [OleAutomation(False)]
    Interface IMFSampleOutputStream Extends stdole.IUnknown
        Sub BeginWriteSample(ByVal pSample As IMFSample, ByVal pCallback As IMFAsyncCallback, ByVal punkState As IUnknown)
        Sub EndWriteSample(ByVal pResult As IMFAsyncResult)
        Sub Close()
    End Interface

    [InterfaceId("36F846FC-2256-48B6-B58E-E2B638316581")]
    [OleAutomation(False)]
    Interface IMFMediaEventQueue Extends stdole.IUnknown
        Sub GetEvent(ByVal dwFlags As Long, ByRef ppEvent As IMFMediaEvent)
        Sub BeginGetEvent(ByVal pCallback As IMFAsyncCallback, ByVal punkState As IUnknown)
        Sub EndGetEvent(ByVal pResult As IMFAsyncResult, ByRef ppEvent As IMFMediaEvent)
        Sub QueueEvent(ByVal pEvent As IMFMediaEvent)
        Sub QueueEventParamVar(ByVal met As MediaEventType, ByRef guidExtendedType As UUID, ByVal hrStatus As Long, ByRef pvValue As Variant)
        Sub QueueEventParamUnk(ByVal met As MediaEventType, ByRef guidExtendedType As UUID, ByVal hrStatus As Long, ByVal pUnk As IUnknown)
        Sub Shutdown()
    End Interface

    [InterfaceId("7FEE9E9A-4A89-47A6-899C-B6A53A70FB67")]
    [Description("IMFActivate Interface")]
    [OleAutomation(False)]
    Interface IMFActivate Extends IMFAttributes
        Sub ActivateObject(ByRef riid As UUID, ByRef ppv As Any)
        Sub ShutdownObject()
        Sub DetachObject()
    End Interface

    [InterfaceId("5C6C44BF-1DB6-435B-9249-E8CD10FDEC96")]
    [Description("IMFPluginControl Interface")]
    [OleAutomation(False)]
    Interface IMFPluginControl Extends stdole.IUnknown
        Sub GetPreferredClsid(ByVal pluginType As Long, ByVal selector As LongPtr, ByRef clsid As UUID)
        Sub GetPreferredClsidByIndex(ByVal pluginType As Long, ByVal index As Long, ByVal selector As LongPtr, ByRef clsid As UUID)
        Sub SetPreferredClsid(ByVal pluginType As Long, ByVal selector As LongPtr, ByRef clsid As UUID)
        Sub IsDisabled(ByVal pluginType As Long, ByRef clsid As UUID)
        Sub GetDisabledByIndex(ByVal pluginType As Long, ByVal index As Long, ByRef clsid As UUID)
        Sub SetDisabled(ByVal pluginType As Long, ByRef clsid As UUID, ByVal disabled As Long)
    End Interface


    [InterfaceId("C6982083-3DDC-45CB-AF5E-0F7A8CE4DE77")]
    [Description("IMFPluginControl2 Interface")]
    [OleAutomation(False)]
    Interface IMFPluginControl2 Extends IMFPluginControl
        Sub SetPolicy(ByVal policy As MF_PLUGIN_CONTROL_POLICY)
    End Interface

    [InterfaceId("EB533D5D-2DB6-40F8-97A9-494692014F07")]
    [Description("IMFDXGIDeviceManager Interface")]
    [OleAutomation(False)]
    Interface IMFDXGIDeviceManager Extends stdole.IUnknown
        Sub CloseDeviceHandle(ByVal hDevice As LongPtr)
        Sub GetVideoService(ByVal hDevice As LongPtr, ByRef riid As UUID, ByRef ppService As Any)
        Sub LockDevice(ByVal hDevice As LongPtr, ByRef riid As UUID, ByRef ppUnkDevice As Any, ByVal fBlock As BOOL)
        Sub OpenDeviceHandle(ByRef phDevice As LongPtr)
        Sub ResetDevice(ByVal pUnkDevice As IUnknown, ByVal resetToken As Long)
        Sub TestDevice(ByVal hDevice As LongPtr)
        Sub UnlockDevice(ByVal hDevice As LongPtr, ByVal fSaveState As BOOL)
    End Interface


    [InterfaceId("BF94C121-5B05-4E6F-8000-BA598961414D")]
    [OleAutomation(False)]
    Interface IMFTransform Extends stdole.IUnknown
        Sub GetStreamLimits(ByRef pdwInputMinimum As Long, ByRef pdwInputMaximum As Long, ByRef pdwOutputMinimum As Long, ByRef pdwOutputMaximum As Long)
        Sub GetStreamCount(ByRef pcInputStreams As Long, ByRef pcOutputStreams As Long)
        Sub GetStreamIDs(ByVal dwInputIDArraySize As Long, ByRef pdwInputIDs As Long, ByVal dwOutputIDArraySize As Long, ByRef pdwOutputIDs As Long)
        Sub GetInputStreamInfo(ByVal dwInputStreamID As Long, ByRef pStreamInfo As MFT_INPUT_STREAM_INFO)
        Sub GetOutputStreamInfo(ByVal dwOutputStreamID As Long, ByRef pStreamInfo As MFT_OUTPUT_STREAM_INFO)
        Sub GetAttributes(ByRef pAttributes As IMFAttributes)
        Sub GetInputStreamAttributes(ByVal dwInputStreamID As Long, ByRef pAttributes As IMFAttributes)
        Sub GetOutputStreamAttributes(ByVal dwOutputStreamID As Long, ByRef pAttributes As IMFAttributes)
        Sub DeleteInputStream(ByVal dwStreamId As Long)
        Sub AddInputStreams(ByVal cStreams As Long, ByRef adwStreamIDs As Long)
        Sub GetInputAvailableType(ByVal dwInputStreamID As Long, ByVal dwTypeIndex As Long, ByRef ppType As IMFMediaType)
        Sub GetOutputAvailableType(ByVal dwOutputStreamID As Long, ByVal dwTypeIndex As Long, ByRef ppType As IMFMediaType)
        Sub SetInputType(ByVal dwInputStreamID As Long, ByVal pType As IMFMediaType, ByVal dwFlags As Long)
        Sub SetOutputType(ByVal dwOutputStreamID As Long, ByVal pType As IMFMediaType, ByVal dwFlags As Long)
        Sub GetInputCurrentType(ByVal dwInputStreamID As Long, ByRef ppType As IMFMediaType)
        Sub GetOutputCurrentType(ByVal dwOutputStreamID As Long, ByRef ppType As IMFMediaType)
        Sub GetInputStatus(ByVal dwInputStreamID As Long, ByRef pdwFlags As Long)
        Sub GetOutputStatus(ByRef pdwFlags As Long)
        Sub SetOutputBounds(ByVal hnsLowerBound As LongLong, ByVal hnsUpperBound As LongLong)
        Sub ProcessEvent(ByVal dwInputStreamID As Long, ByVal pEvent As IMFMediaEvent)
        Sub ProcessMessage(ByVal eMessage As MFT_MESSAGE_TYPE, ByVal ulParam As LongPtr)
        Sub ProcessInput(ByVal dwInputStreamID As Long, ByVal pSample As IMFSample, ByVal dwFlags As Long)
        Sub ProcessOutput(ByVal dwFlags As Long, ByVal cOutputBufferCount As Long, ByRef pOutputSamples As MFT_OUTPUT_DATA_BUFFER, ByRef pdwStatus As Long)
    End Interface

    [InterfaceId("D818FBD8-FC46-42F2-87AC-1EA2D1F9BF32")]
    [OleAutomation(False)]
    Interface IMFDeviceTransform Extends IUnknown
        Sub InitializeTransform(ByVal pAttributes As IMFAttributes)
        Sub GetInputAvailableType(ByVal dwInputStreamID As Long, ByVal dwTypeIndex As Long, ByRef pMediaType As IMFMediaType)
        Sub GetInputCurrentType(ByVal dwInputStreamID As Long, ByRef pMediaType As IMFMediaType)
        Sub GetInputStreamAttributes(ByVal dwInputStreamID As Long, ByRef ppAttributes As IMFAttributes)
        Sub GetOutputAvailableType(ByVal dwOutputStreamID As Long, ByVal dwTypeIndex As Long, ByRef pMediaType As IMFMediaType)
        Sub GetOutputCurrentType(ByVal dwOutputStreamID As Long, ByRef pMediaType As IMFMediaType)
        Sub GetOutputStreamAttributes(ByVal dwOutputStreamID As Long, ByRef ppAttributes As IMFAttributes)
        Sub GetStreamCount(ByRef pcInputStreams As Long, ByRef pcOutputStreams As Long)
        Sub GetStreamIDs(ByVal dwInputIDArraySize As Long, ByRef pdwInputStreamIds As Long, ByVal dwOutputIDArraySize As Long, ByRef pdwOutputStreamIds As Long)
        Sub ProcessEvent(ByVal dwInputStreamID As Long, ByVal pEvent As IMFMediaEvent)
        Sub ProcessInput(ByVal dwInputStreamID As Long, ByVal pSample As IMFSample, ByVal dwFlags As Long)
        Sub ProcessMessage(ByVal eMessage As MFT_MESSAGE_TYPE, ByVal ulParam As LongPtr)
        Sub ProcessOutput(ByVal dwFlags As Long, ByVal cOutputBufferCount As Long, ByRef pOutputSamples As MFT_OUTPUT_DATA_BUFFER, ByRef pdwStatus As Long)
        Sub SetInputStreamState(ByVal dwOutputStreamID As Long, ByVal pMediaType As IMFMediaType, ByVal value As DeviceStreamState, ByVal dwFlags As Long)
        Sub GetInputStreamState(ByVal dwOutputStreamID As Long, value As DeviceStreamState)
        Sub SetOutputStreamState(ByVal dwOutputStreamID As Long, ByVal pMediaType As IMFMediaType, ByVal value As DeviceStreamState, ByVal dwFlags As Long)
        Sub GetOutputStreamState(ByVal dwOutputStreamID As Long, value As DeviceStreamState)
        Sub GetInputStreamPreferredState(ByVal dwOutputStreamID As Long, value As DeviceStreamState, ppMediaType As IMFMediaType)
        Sub FlushInputStream(ByVal dwOutputStreamID As Long, ByVal dwFlags As Long)
        Sub FlushOutputStream(ByVal dwOutputStreamID As Long, ByVal dwFlags As Long)
    End Interface

    [InterfaceId("6D5CB646-29EC-41FB-8179-8C4C6D750811")]
    [OleAutomation(False)]
    Interface IMFDeviceTransformCallback Extends IUnknown
        Sub OnBufferSent(ByVal pCallbackAttributes As IMFAttributes, ByVal pinId As Long)
    End Interface




    [InterfaceId("3C9B2EB9-86D5-4514-A394-F56664F9F0D8")]
    [OleAutomation(False)]
    Interface IMFMediaSourceEx Extends IMFMediaSource
        Sub GetSourceAttributes(ByRef ppAttributes As IMFAttributes)
        Sub GetStreamAttributes(ByVal dwStreamIdentifier As Long, ByRef ppAttributes As IMFAttributes)
        Sub SetD3DManager(ByVal pManager As IUnknown)
    End Interface

    [InterfaceId("6EF2A662-47C0-4666-B13D-CBB717F2FA2C")]
    [OleAutomation(False)]
    Interface IMFClockConsumer Extends stdole.IUnknown
        Sub SetPresentationClock(ByVal pPresentationClock As IMFPresentationClock)
        Sub GetPresentationClock(ByRef ppPresentationClock As IMFPresentationClock)
    End Interface

    [InterfaceId("D182108F-4EC6-443F-AA42-A71106EC825F")]
    [OleAutomation(False)]
    Interface IMFMediaStream Extends IMFMediaEventGenerator
        Sub GetMediaSource(ByRef ppMediaSource As IMFMediaSource)
        Sub GetStreamDescriptor(ByRef ppStreamDescriptor As IMFStreamDescriptor)
        Sub RequestSample(ByVal pToken As IUnknown)
    End Interface

    [InterfaceId("6EF2A660-47C0-4666-B13D-CBB717F2FA2C")]
    [OleAutomation(False)]
    Interface IMFMediaSink Extends stdole.IUnknown
        Sub GetCharacteristics(ByRef pdwCharacteristics As MfMediaStreamCharacteristics)
        Sub AddStreamSink(ByVal dwStreamSinkIdentifier As Long, ByVal pMediaType As IMFMediaType, ByRef ppStreamSink As IMFStreamSink)
        Sub RemoveStreamSink(ByVal dwStreamSinkIdentifier As Long)
        Sub GetStreamSinkCount(ByRef pcStreamSinkCount As Long)
        Sub GetStreamSinkByIndex(ByVal dwIndex As Long, ByRef ppStreamSink As IMFStreamSink)
        Sub GetStreamSinkById(ByVal dwStreamSinkIdentifier As Long, ByRef ppStreamSink As IMFStreamSink)
        Sub SetPresentationClock(ByVal pPresentationClock As IMFPresentationClock)
        Sub GetPresentationClock(ByRef ppPresentationClock As IMFPresentationClock)
        Sub Shutdown()
    End Interface

    [InterfaceId("0A97B3CF-8E7C-4A3D-8F8C-0C843DC247FB")]
    [OleAutomation(False)]
    Interface IMFStreamSink Extends IMFMediaEventGenerator
        Sub GetMediaSink(ByRef ppMediaSink As IMFMediaSink)
        Sub GetIdentifier(ByRef pdwIdentifier As Long)
        Sub GetMediaTypeHandler(ByRef ppHandler As IMFMediaTypeHandler)
        Sub ProcessSample(ByVal pSample As IMFSample)
        Sub PlaceMarker(ByVal eMarkerType As MFSTREAMSINK_MARKER_TYPE, ByRef pvarMarkerValue As Variant, ByRef pvarContextValue As Variant)
        Sub Flush()
    End Interface

    [InterfaceId("86CBC910-E533-4751-8E3B-F19B5B806A03")]
    [OleAutomation(False)]
    Interface IMFVideoSampleAllocator Extends stdole.IUnknown
        Sub SetDirectXManager(ByVal pManager As IUnknown)
        Sub UninitializeSampleAllocator()
        Sub InitializeSampleAllocator(ByVal cRequestedFrames As Long, ByVal pMediaType As IMFMediaType)
        Sub AllocateSample(ByRef ppSample As IMFSample)
    End Interface

    [InterfaceId("A792CDBE-C374-4E89-8335-278E7B9956A4")]
    [OleAutomation(False)]
    Interface IMFVideoSampleAllocatorNotify Extends stdole.IUnknown
        Sub NotifyRelease()
    End Interface

    [InterfaceId("3978AA1A-6D5B-4B7F-A340-90899189AE34")]
    [OleAutomation(False)]
    Interface IMFVideoSampleAllocatorNotifyEx Extends IMFVideoSampleAllocatorNotify
        Sub NotifyPrune(ByVal pSample As IMFSample)
    End Interface

    [InterfaceId("992388B4-3372-4F67-8B6F-C84C071F4751")]
    [OleAutomation(False)]
    Interface IMFVideoSampleAllocatorCallback Extends stdole.IUnknown
        Sub SetCallback(ByVal pNotify As IMFVideoSampleAllocatorNotify)
        Sub GetFreeSampleCount(ByRef plSamples As Long)
    End Interface

    [InterfaceId("545B3A48-3283-4F62-866F-A62D8F598F9F")]
    [Description("IMFVideoSampleAllocatorEx Interface")]
    [OleAutomation(False)]
    Interface IMFVideoSampleAllocatorEx Extends IMFVideoSampleAllocator
        Sub InitializeSampleAllocatorEx(ByVal cInitialSamples As Long, ByVal cMaximumSamples As Long, ByVal pAttributes As IMFAttributes, ByVal pMediaType As IMFMediaType)
    End Interface

    [InterfaceId("20BC074B-7A8D-4609-8C3B-64A0A3B5D7CE")]
    [OleAutomation(False)]
    Interface IMFDXGIDeviceManagerSource Extends stdole.IUnknown
        Sub GetManager(ByRef ppManager As IMFDXGIDeviceManager)
    End Interface

    [InterfaceId("A3F675D5-6119-4F7F-A100-1D8B280F0EFB")]
    [Description("Configuration interface for Video Processors")]
    [OleAutomation(False)]
    Interface IMFVideoProcessorControl Extends stdole.IUnknown
        Sub SetBorderColor(ByRef pBorderColor As MFARGB)
        Sub SetSourceRectangle(ByRef pSrcRect As RECT)
        Sub SetDestinationRectangle(ByRef pDstRect As RECT)
        Sub SetMirror(ByVal eMirror As MF_VIDEO_PROCESSOR_MIRROR)
        Sub SetRotation(ByVal eRotation As MF_VIDEO_PROCESSOR_ROTATION)
        Sub SetConstrictionSize(ByRef pConstrictionSize As SIZE)
    End Interface

    [InterfaceId("BDE633D3-E1DC-4A7F-A693-BBAE399C4A20")]
    [OleAutomation(False)]
    Interface IMFVideoProcessorControl2 Extends IMFVideoProcessorControl
        Sub SetRotationOverride(ByVal uiRotation As Long)
        Sub EnableHardwareEffects(ByVal fEnabled As BOOL)
        Function GetSupportedHardwareEffects() As Long
    End Interface

    [InterfaceId("FA993888-4383-415A-A930-DD472A8CF6F7")]
    [OleAutomation(False)]
    Interface IMFGetService Extends stdole.IUnknown
        Sub GetService(ByRef guidService As UUID, ByRef riid As UUID, ByRef ppvObject As Any)
    End Interface

    [InterfaceId("868CE85C-8EA9-4F55-AB82-B009A910A805")]
    [OleAutomation(False)]
    Interface IMFPresentationClock Extends IMFClock
        Sub SetTimeSource(ByVal pTimeSource As IMFPresentationTimeSource)
        Sub GetTimeSource(ByRef ppTimeSource As IMFPresentationTimeSource)
        Sub GetTime(ByRef phnsClockTime As LongLong)
        Sub AddClockStateSink(ByVal pStateSink As IMFClockStateSink)
        Sub RemoveClockStateSink(ByVal pStateSink As IMFClockStateSink)
        Sub Start(ByVal llClockStartOffset As LongLong)
        Sub Stop()
        Sub Pause()
    End Interface

    [InterfaceId("7FF12CCE-F76F-41C2-863B-1666C8E5E139")]
    [OleAutomation(False)]
    Interface IMFPresentationTimeSource Extends IMFClock
        Sub GetUnderlyingClock(ByRef ppClock As IMFClock)
    End Interface

    [InterfaceId("F6696E82-74F7-4F3D-A178-8A5E09C3659F")]
    [OleAutomation(False)]
    Interface IMFClockStateSink Extends stdole.IUnknown
        Sub OnClockStart(ByVal hnsSystemTime As LongLong, ByVal llClockStartOffset As LongLong)
        Sub OnClockStop(ByVal hnsSystemTime As LongLong)
        Sub OnClockPause(ByVal hnsSystemTime As LongLong)
        Sub OnClockRestart(ByVal hnsSystemTime As LongLong)
        Sub OnClockSetRate(ByVal hnsSystemTime As LongLong, ByVal flRate As Single)
    End Interface

    [InterfaceId("E56E4CBD-8F70-49D8-A0F8-EDB3D6AB9BF2")]
    [OleAutomation(False)]
    Interface IMFTimer Extends stdole.IUnknown
        Sub SetTimer(ByVal dwFlags As Long, ByVal llClockTime As LongLong, ByVal pCallback As IMFAsyncCallback, ByVal punkState As IUnknown, ByRef ppunkKey As IUnknown)
        Sub CancelTimer(ByVal punkKey As IUnknown)
    End Interface

    [InterfaceId("97EC2EA4-0E42-4937-97AC-9D6D328824E1")]
    [OleAutomation(False)]
    Interface IMFShutdown Extends stdole.IUnknown
        Sub Shutdown()
        Sub GetShutdownStatus(ByRef pStatus As MFSHUTDOWN_STATUS)
    End Interface

    [InterfaceId("DE9A6157-F660-4643-B56A-DF9F7998C7CD")]
    [OleAutomation(False)]
    Interface IMFTopoLoader Extends stdole.IUnknown
        Sub Load(ByVal pInputTopo As IMFTopology, ByRef ppOutputTopo As IMFTopology, ByVal pCurrentTopo As IMFTopology)
    End Interface

    [InterfaceId("ACF92459-6A61-42BD-B57C-B43E51203CB0")]
    [Description("IMFContentProtectionManager Interface")]
    [OleAutomation(False)]
    Interface IMFContentProtectionManager Extends stdole.IUnknown
        Sub BeginEnableContent(ByVal pEnablerActivate As IMFActivate, ByVal pTopo As IMFTopology, ByVal pCallback As IMFAsyncCallback, ByVal punkState As IUnknown)
        Sub EndEnableContent(ByVal pResult As IMFAsyncResult)
    End Interface

    [InterfaceId("D3C4EF59-49CE-4381-9071-D5BCD044C770")]
    [Description("IMFContentEnabler Interface")]
    [OleAutomation(False)]
    Interface IMFContentEnabler Extends stdole.IUnknown
        Sub GetEnableType(ByRef pType As UUID)
        Sub GetEnableURL(ByRef ppwszURL As LongPtr, ByRef pcchUrl As Long, ByRef pTrustStatus As MF_URL_TRUST_STATUS)
        Sub GetEnableData(ByRef ppbData As LongPtr, ByRef pcbData As Long)
        Sub IsAutomaticSupported(ByRef pfAutomatic As BOOL)
        Sub AutomaticEnable()
        Sub MonitorEnable()
        Sub Cancel()
    End Interface

    [InterfaceId("F88CFB8C-EF16-4991-B450-CB8C69E51704")]
    [OleAutomation(False)]
    Interface IMFMetadata Extends stdole.IUnknown
        Sub SetLanguage(ByVal pwszRFC1766 As LongPtr)
        Sub GetLanguage(ByRef ppwszRFC1766 As LongPtr)
        Sub GetAllLanguages(ByRef ppvLanguages As Variant)
        Sub SetProperty(ByVal pwszName As LongPtr, ByRef ppvValue As Variant)
        Sub GetProperty(ByVal pwszName As LongPtr, ByRef ppvValue As Variant)
        Sub DeleteProperty(ByVal pwszName As LongPtr)
        Sub GetAllPropertyNames(ByRef ppvNames As Variant)
    End Interface

    [InterfaceId("56181D2D-E221-4ADB-B1C8-3CEE6A53F76F")]
    [OleAutomation(False)]
    Interface IMFMetadataProvider Extends stdole.IUnknown
        Sub GetMFMetadata(ByVal pPresentationDescriptor As IMFPresentationDescriptor, ByVal dwStreamIdentifier As Long, ByVal dwFlags As Long, ByRef ppMFMetadata As IMFMetadata)
    End Interface

    [InterfaceId("0A9CCDBC-D797-4563-9667-94EC5D79292D")]
    [OleAutomation(False)]
    Interface IMFRateSupport Extends stdole.IUnknown
        Sub GetSlowestRate(ByVal eDirection As MFRATE_DIRECTION, ByVal fThin As BOOL, ByRef pflRate As Single)
        Sub GetFastestRate(ByVal eDirection As MFRATE_DIRECTION, ByVal fThin As BOOL, ByRef pflRate As Single)
        Sub IsRateSupported(ByVal fThin As BOOL, ByVal flRate As Single, ByRef pflNearestSupportedRate As Single)
    End Interface

    [InterfaceId("88DDCD21-03C3-4275-91ED-55EE3929328F")]
    [OleAutomation(False)]
    Interface IMFRateControl Extends stdole.IUnknown
        Sub SetRate(ByVal fThin As BOOL, ByVal flRate As Single)
        Sub GetRate(ByRef pfThin As BOOL, ByRef pflRate As Single)
    End Interface

    [InterfaceId("AB9D8661-F7E8-4EF4-9861-89F334F94E74")]
    [OleAutomation(False)]
    Interface IMFTimecodeTranslate Extends stdole.IUnknown
        Sub BeginConvertTimecodeToHNS(ByRef pPropVarTimecode As Variant, ByVal pCallback As IMFAsyncCallback, ByVal punkState As IUnknown)
        Sub EndConvertTimecodeToHNS(ByVal pResult As IMFAsyncResult, ByRef phnsTime As LongLong)
        Sub BeginConvertHNSToTimecode(ByVal HNSTIME As LongLong, ByVal pCallback As IMFAsyncCallback, ByVal punkState As IUnknown)
        Sub EndConvertHNSToTimecode(ByVal pResult As IMFAsyncResult, ByRef pPropVarTimecode As Variant)
    End Interface

    [InterfaceId("26AFEA53-D9ED-42B5-AB80-E64F9EE34779")]
    [OleAutomation(False)]
    Interface IMFSeekInfo Extends stdole.IUnknown
        Sub GetNearestKeyFrames(ByRef pguidTimeFormat As UUID, ByRef pvarStartPosition As Variant, ByRef pvarPreviousKeyFrame As Variant, ByRef pvarNextKeyFrame As Variant)
    End Interface

    [InterfaceId("089EDF13-CF71-4338-8D13-9E569DBDC319")]
    [OleAutomation(False)]
    Interface IMFSimpleAudioVolume Extends stdole.IUnknown
        Sub SetMasterVolume(ByVal fLevel As Single)
        Sub GetMasterVolume(ByRef pfLevel As Single)
        Sub SetMute(ByVal bMute As BOOL)
        Sub GetMute(ByRef pbMute As BOOL)
    End Interface

    [InterfaceId("76B1BBDB-4EC8-4F36-B106-70A9316DF593")]
    [OleAutomation(False)]
    Interface IMFAudioStreamVolume Extends stdole.IUnknown
        Sub GetChannelCount(ByRef pdwCount As Long)
        Sub SetChannelVolume(ByVal dwIndex As Long, ByVal fLevel As Single)
        Sub GetChannelVolume(ByVal dwIndex As Long, ByRef pfLevel As Single)
        Sub SetAllVolumes(ByVal dwCount As Long, ByRef pfVolumes As Single)
        Sub GetAllVolumes(ByVal dwCount As Long, ByRef pfVolumes As Single)
    End Interface

    [InterfaceId("A0638C2B-6465-4395-9AE7-A321A9FD2856")]
    [OleAutomation(False)]
    Interface IMFAudioPolicy Extends stdole.IUnknown
        Sub SetGroupingParam(ByRef rguidClass As UUID)
        Sub GetGroupingParam(ByRef pguidClass As UUID)
        Sub SetDisplayName(ByVal pszName As LongPtr)
        Sub GetDisplayName(pszName As LongPtr)
        Sub SetIconPath(ByVal pszPath As LongPtr)
        Sub GetIconPath(pszPath As LongPtr)
    End Interface

    [InterfaceId("8C7B80BF-EE42-4B59-B1DF-55668E1BDCA8")]
    [OleAutomation(False)]
    Interface IMFSampleGrabberSinkCallback Extends stdole.IUnknown
        Sub OnClockStart(ByVal hnsSystemTime As LongLong, ByVal llClockStartOffset As LongLong)
        Sub OnClockStop(ByVal hnsSystemTime As LongLong)
        Sub OnClockPause(ByVal hnsSystemTime As LongLong)
        Sub OnClockRestart(ByVal hnsSystemTime As LongLong)
        Sub OnClockSetRate(ByVal hnsSystemTime As LongLong, ByVal flRate As Single)
        Sub OnSetPresentationClock(ByVal pPresentationClock As IMFPresentationClock)
        Sub OnProcessSample(ByRef guidMajorMediaType As UUID, ByVal dwSampleFlags As Long, ByVal llSampleTime As LongLong, ByVal llSampleDuration As LongLong, ByRef pSampleBuffer As Byte, ByVal dwSampleSize As Long)
        Sub OnShutdown()
    End Interface

    [InterfaceId("CA86AA50-C46E-429E-AB27-16D6AC6844CB")]
    [OleAutomation(False)]
    Interface IMFSampleGrabberSinkCallback2 Extends stdole.IUnknown
        Sub OnClockStart(ByVal hnsSystemTime As LongLong, ByVal llClockStartOffset As LongLong)
        Sub OnClockStop(ByVal hnsSystemTime As LongLong)
        Sub OnClockPause(ByVal hnsSystemTime As LongLong)
        Sub OnClockRestart(ByVal hnsSystemTime As LongLong)
        Sub OnClockSetRate(ByVal hnsSystemTime As LongLong, ByVal flRate As Single)
        Sub OnSetPresentationClock(ByVal pPresentationClock As IMFPresentationClock)
        Sub OnProcessSample(ByRef guidMajorMediaType As UUID, ByVal dwSampleFlags As Long, ByVal llSampleTime As LongLong, ByVal llSampleDuration As LongLong, ByRef pSampleBuffer As Byte, ByVal dwSampleSize As Long)
        Sub OnShutdown()
        Sub OnProcessSampleEx(ByRef guidMajorMediaType As UUID, ByVal dwSampleFlags As Long, ByVal llSampleTime As LongLong, ByVal llSampleDuration As LongLong, ByRef pSampleBuffer As Byte, ByVal dwSampleSize As Long, ByVal pAttributes As IMFAttributes)
    End Interface

    [InterfaceId("35FE1BB8-A3A9-40FE-BBEC-EB569C9CCCA3")]
    [OleAutomation(False)]
    Interface IMFWorkQueueServices Extends stdole.IUnknown
        Sub BeginRegisterTopologyWorkQueuesWithMMCSS(ByVal pCallback As IMFAsyncCallback, ByVal pState As IUnknown)
        Sub EndRegisterTopologyWorkQueuesWithMMCSS(ByVal pResult As IMFAsyncResult)
        Sub BeginUnregisterTopologyWorkQueuesWithMMCSS(ByVal pCallback As IMFAsyncCallback, ByVal pState As IUnknown)
        Sub EndUnregisterTopologyWorkQueuesWithMMCSS(ByVal pResult As IMFAsyncResult)
        Sub GetTopologyWorkQueueMMCSSClass(ByVal dwTopologyWorkQueueId As Long, ByVal pwszClass As LongPtr, ByRef pcchClass As Long)
        Sub GetTopologyWorkQueueMMCSSTaskId(ByVal dwTopologyWorkQueueId As Long, ByRef pdwTaskId As Long)
        Sub BeginRegisterPlatformWorkQueueWithMMCSS(ByVal dwPlatformWorkQueue As Long, ByVal wszClass As LongPtr, ByVal dwTaskId As Long, ByVal pCallback As IMFAsyncCallback, ByVal pState As IUnknown)
        Sub EndRegisterPlatformWorkQueueWithMMCSS(ByVal pResult As IMFAsyncResult, ByRef pdwTaskId As Long)
        Sub BeginUnregisterPlatformWorkQueueWithMMCSS(ByVal dwPlatformWorkQueue As Long, ByVal pCallback As IMFAsyncCallback, ByVal pState As IUnknown)
        Sub EndUnregisterPlatformWorkQueueWithMMCSS(ByVal pResult As IMFAsyncResult)
        Sub GetPlaftormWorkQueueMMCSSClass(ByVal dwPlatformWorkQueueId As Long, ByVal pwszClass As LongPtr, ByRef pcchClass As Long)
        Sub GetPlatformWorkQueueMMCSSTaskId(ByVal dwPlatformWorkQueueId As Long, ByRef pdwTaskId As Long)
    End Interface

    [InterfaceId("96BF961B-40FE-42F1-BA9D-320238B49700")]
    [OleAutomation(False)]
    Interface IMFWorkQueueServicesEx Extends IMFWorkQueueServices
        Sub GetTopologyWorkQueueMMCSSPriority(ByVal dwTopologyWorkQueueId As Long, ByRef plPriority As Long)
        Sub BeginRegisterPlatformWorkQueueWithMMCSSEx(ByVal dwPlatformWorkQueue As Long, ByVal wszClass As LongPtr, ByVal dwTaskId As Long, ByVal lPriority As Long, ByVal pCallback As IMFAsyncCallback, ByVal pState As IUnknown)
        Sub GetPlatformWorkQueueMMCSSPriority(ByVal dwPlatformWorkQueueId As Long, ByRef plPriority As Long)
    End Interface

    [InterfaceId("8D009D86-5B9F-4115-B1FC-9F80D52AB8AB")]
    [OleAutomation(False)]
    Interface IMFQualityManager Extends stdole.IUnknown
        Sub NotifyTopology(ByVal pTopology As IMFTopology)
        Sub NotifyPresentationClock(ByVal pClock As IMFPresentationClock)
        Sub NotifyProcessInput(ByVal pNode As IMFTopologyNode, ByVal lInputIndex As Long, ByVal pSample As IMFSample)
        Sub NotifyProcessOutput(ByVal pNode As IMFTopologyNode, ByVal lOutputIndex As Long, ByVal pSample As IMFSample)
        Sub NotifyQualityEvent(ByVal pObject As IUnknown, ByVal pEvent As IMFMediaEvent)
        Sub Shutdown()
    End Interface

    [InterfaceId("EC15E2E9-E36B-4F7C-8758-77D452EF4CE7")]
    [OleAutomation(False)]
    Interface IMFQualityAdvise Extends stdole.IUnknown
        Sub SetDropMode(ByVal eDropMode As MF_QUALITY_DROP_MODE)
        Sub SetQualityLevel(ByVal eQualityLevel As MF_QUALITY_LEVEL)
        Sub GetDropMode(ByRef peDropMode As MF_QUALITY_DROP_MODE)
        Sub GetQualityLevel(ByRef peQualityLevel As MF_QUALITY_LEVEL)
        Sub DropTime(ByVal hnsAmountToDrop As LongLong)
    End Interface

    [InterfaceId("F3706F0D-8EA2-4886-8000-7155E9EC2EAE")]
    [OleAutomation(False)]
    Interface IMFQualityAdvise2 Extends IMFQualityAdvise
        Sub NotifyQualityEvent(ByVal pEvent As IMFMediaEvent, ByRef pdwFlags As MF_QUALITY_ADVISE_FLAGS)
    End Interface

    [InterfaceId("DFCD8E4D-30B5-4567-ACAA-8EB5B7853DC9")]
    [OleAutomation(False)]
    Interface IMFQualityAdviseLimits Extends stdole.IUnknown
        Sub GetMaximumDropMode(ByRef peDropMode As MF_QUALITY_DROP_MODE)
        Sub GetMinimumQualityLevel(ByRef peQualityLevel As MF_QUALITY_LEVEL)
    End Interface

    [InterfaceId("2347D60B-3FB5-480C-8803-8DF3ADCD3EF0")]
    [OleAutomation(False)]
    Interface IMFRealTimeClient Extends stdole.IUnknown
        Sub RegisterThreads(ByVal dwTaskIndex As Long, ByVal wszClass As LongPtr)
        Sub UnregisterThreads()
        Sub SetWorkQueue(ByVal dwWorkQueueId As Long)
    End Interface

    [InterfaceId("03910848-AB16-4611-B100-17B88AE2F248")]
    [OleAutomation(False)]
    Interface IMFRealTimeClientEx Extends stdole.IUnknown
        Sub RegisterThreadsEx(ByRef pdwTaskIndex As Long, ByVal wszClassName As LongPtr, ByVal lBasePriority As Long)
        Sub UnregisterThreads()
        Sub SetWorkQueueEx(ByVal dwMultithreadedWorkQueueId As Long, ByVal lWorkItemBasePriority As Long)
    End Interface

    [InterfaceId("197CD219-19CB-4DE1-A64C-ACF2EDCBE59E")]
    [OleAutomation(False)]
    Interface IMFSequencerSource Extends stdole.IUnknown
        Sub AppendTopology(ByVal pTopology As IMFTopology, ByVal dwFlags As Long, ByRef pdwId As Long)
        Sub DeleteTopology(ByVal dwID As Long)
        Sub GetPresentationContext(ByVal pPD As IMFPresentationDescriptor, ByRef pid As Long, ByRef ppTopology As IMFTopology)
        Sub UpdateTopology(ByVal dwID As Long, ByVal pTopology As IMFTopology)
        Sub UpdateTopologyFlags(ByVal dwID As Long, ByVal dwFlags As Long)
    End Interface

    [InterfaceId("0E1D6009-C9F3-442D-8C51-A42D2D49452F")]
    [OleAutomation(False)]
    Interface IMFMediaSourceTopologyProvider Extends stdole.IUnknown
        Sub GetMediaSourceTopology(ByVal pPresentationDescriptor As IMFPresentationDescriptor, ByRef ppTopology As IMFTopology)
    End Interface

    [InterfaceId("0E1D600A-C9F3-442D-8C51-A42D2D49452F")]
    [OleAutomation(False)]
    Interface IMFMediaSourcePresentationProvider Extends stdole.IUnknown
        Sub ForceEndOfPresentation(ByVal pPresentationDescriptor As IMFPresentationDescriptor)
    End Interface

    [InterfaceId("676AA6DD-238A-410D-BB99-65668D01605A")]
    [OleAutomation(False)]
    Interface IMFTopologyNodeAttributeEditor Extends stdole.IUnknown
        Sub UpdateNodeAttributes(ByVal TopoId As LongLong, ByVal cUpdates As Long, ByRef pUpdates As MFTOPONODE_ATTRIBUTE_UPDATE)
    End Interface

  
    [InterfaceId("6D66D782-1D4F-4DB7-8C63-CB8C77F1EF5E")]
    [OleAutomation(False)]
    Interface IMFByteStreamBuffering Extends stdole.IUnknown
        Sub SetBufferingParams(ByRef pparams As MFBYTESTREAM_BUFFERING_PARAMS)
        Sub EnableBuffering(ByVal fEnable As BOOL)
        Sub StopBuffering()
    End Interface

    [InterfaceId("F5042EA4-7A96-4A75-AA7B-2BE1EF7F88D5")]
    [OleAutomation(False)]
    Interface IMFByteStreamCacheControl Extends stdole.IUnknown
        Sub StopBackgroundTransfer()
    End Interface

    [InterfaceId("64976BFA-FB61-4041-9069-8C9A5F659BEB")]
    [OleAutomation(False)]
    Interface IMFByteStreamTimeSeek Extends stdole.IUnknown
        Sub IsTimeSeekSupported(ByRef pfTimeSeekIsSupported As BOOL)
        Sub TimeSeek(ByVal qwTimePosition As LongLong)
        Sub GetTimeSeekResult(ByRef pqwStartTime As LongLong, ByRef pqwStopTime As LongLong, ByRef pqwDuration As LongLong)
    End Interface

    [InterfaceId("71CE469C-F34B-49EA-A56B-2D2A10E51149")]
    [OleAutomation(False)]
    Interface IMFByteStreamCacheControl2 Extends IMFByteStreamCacheControl
        Sub GetByteRanges(ByRef pcRanges As Long, ByRef ppRanges As LongPtr)
        Sub SetCacheLimit(ByVal qwBytes As LongLong)
        Sub IsBackgroundTransferActive(ByRef pfActive As BOOL)
    End Interface

    [InterfaceId("5B87EF6A-7ED8-434F-BA0E-184FAC1628D1")]
    [OleAutomation(False)]
    Interface IMFNetCredential Extends stdole.IUnknown
        Sub SetUser(ByRef pbData As Byte, ByVal cbData As Long, ByVal fDataIsEncrypted As BOOL)
        Sub SetPassword(ByRef pbData As Byte, ByVal cbData As Long, ByVal fDataIsEncrypted As BOOL)
        Sub GetUser(ByRef pbData As Byte, ByRef pcbData As Long, ByVal fEncryptData As BOOL)
        Sub GetPassword(ByRef pbData As Byte, ByRef pcbData As Long, ByVal fEncryptData As BOOL)
        Sub LoggedOnUser(ByRef pfLoggedOnUser As BOOL)
    End Interface

    [InterfaceId("5B87EF6B-7ED8-434F-BA0E-184FAC1628D1")]
    [OleAutomation(False)]
    Interface IMFNetCredentialManager Extends stdole.IUnknown
        Sub BeginGetCredentials(ByRef pParam As MFNetCredentialManagerGetParam, ByVal pCallback As IMFAsyncCallback, ByVal pState As IUnknown)
        Sub EndGetCredentials(ByVal pResult As IMFAsyncResult, ByRef ppCred As IMFNetCredential)
        Sub SetGood(ByVal pCred As IMFNetCredential, ByVal fGood As BOOL)
    End Interface

    [InterfaceId("5B87EF6C-7ED8-434F-BA0E-184FAC1628D1")]
    [OleAutomation(False)]
    Interface IMFNetCredentialCache Extends stdole.IUnknown
        Sub GetCredential(ByVal pszUrl As LongPtr, ByVal pszRealm As LongPtr, ByVal dwAuthenticationFlags As MFNetAuthenticationFlags, ByRef ppCred As IMFNetCredential, ByRef pdwRequirementsFlags As MFNetCredentialRequirements)
        Sub SetGood(ByVal pCred As IMFNetCredential, ByVal fGood As BOOL)
        Sub SetUserOptions(ByVal pCred As IMFNetCredential, ByVal dwOptionsFlags As MFNetCredentialOptions)
    End Interface

    [InterfaceId("61F7D887-1230-4A8B-AEBA-8AD434D1A64D")]
    [OleAutomation(False)]
    Interface IMFSSLCertificateManager Extends stdole.IUnknown
        Sub GetClientCertificate(ByVal pszUrl As LongPtr, ByRef ppbData As LongPtr, ByRef pcbData As Long)
        Sub BeginGetClientCertificate(ByVal pszUrl As LongPtr, ByVal pCallback As IMFAsyncCallback, ByVal pState As IUnknown)
        Sub EndGetClientCertificate(ByVal pResult As IMFAsyncResult, ByRef ppbData As LongPtr, ByRef pcbData As Long)
        Sub GetCertificatePolicy(ByVal pszUrl As LongPtr, ByRef pfOverrideAutomaticCheck As BOOL, ByRef pfClientCertificateAvailable As BOOL)
        Sub OnServerCertificate(ByVal pszUrl As LongPtr, ByRef pbData As Byte, ByVal cbData As Long, ByRef pfIsGood As BOOL)
    End Interface

    [InterfaceId("091878A3-BF11-4A5C-BC9F-33995B06EF2D")]
    [Description("IMFNetResourceFilter Interface")]
    [OleAutomation(False)]
    Interface IMFNetResourceFilter Extends stdole.IUnknown
        Sub OnRedirect(ByVal pszUrl As LongPtr, ByRef pvbCancel As Boolean)
        Sub OnSendingRequest(ByVal pszUrl As LongPtr)
    End Interface

    [InterfaceId("059054B3-027C-494C-A27D-9113291CF87F")]
    [OleAutomation(False)]
    Interface IMFSourceOpenMonitor Extends stdole.IUnknown
        Sub OnSourceEvent(ByVal pEvent As IMFMediaEvent)
    End Interface

    [InterfaceId("E9CD0383-A268-4BB4-82DE-658D53574D41")]
    [OleAutomation(False)]
    Interface IMFNetProxyLocator Extends stdole.IUnknown
        Sub FindFirstProxy(ByVal pszHost As LongPtr, ByVal pszUrl As LongPtr, ByVal fReserved As BOOL)
        Sub FindNextProxy()
        Sub RegisterProxyResult(ByVal hrOp As Long)
        Sub GetCurrentProxy(ByVal pszStr As LongPtr, ByRef pcchStr As Long)
        Sub Clone(ByRef ppProxyLocator As IMFNetProxyLocator)
    End Interface

    [InterfaceId("E9CD0384-A268-4BB4-82DE-658D53574D41")]
    [OleAutomation(False)]
    Interface IMFNetProxyLocatorFactory Extends stdole.IUnknown
        Sub CreateProxyLocator(ByVal pszProtocol As LongPtr, ByRef ppProxyLocator As IMFNetProxyLocator)
    End Interface

    [InterfaceId("E9931663-80BF-4C6E-98AF-5DCF58747D1F")]
    [OleAutomation(False)]
    Interface IMFSaveJob Extends stdole.IUnknown
        Sub BeginSave(ByVal pStream As IMFByteStream, ByVal pCallback As IMFAsyncCallback, ByVal pState As IUnknown)
        Sub EndSave(ByVal pResult As IMFAsyncResult)
        Sub CancelSave()
        Sub GetProgress(ByRef pdwPercentComplete As Long)
    End Interface

    [InterfaceId("7BE19E73-C9BF-468A-AC5A-A5E8653BEC87")]
    [OleAutomation(False)]
    Interface IMFNetSchemeHandlerConfig Extends stdole.IUnknown
        Sub GetNumberOfSupportedProtocols(ByRef pcProtocols As Long)
        Sub GetSupportedProtocolType(ByVal nProtocolIndex As Long, ByRef pnProtocolType As MFNETSOURCE_PROTOCOL_TYPE)
        Sub ResetProtocolRolloverSettings()
    End Interface


    [InterfaceId("6D4C7B74-52A0-4BB7-B0DB-55F29F47A668")]
    [OleAutomation(False)]
    Interface IMFSchemeHandler Extends stdole.IUnknown
        Sub BeginCreateObject(ByVal pwszUrl As LongPtr, ByVal dwFlags As Long, ByVal pProps As IPropertyStore, ByRef ppIUnknownCancelCookie As IUnknown, ByVal pCallback As IMFAsyncCallback, ByVal punkState As IUnknown)
        Sub EndCreateObject(ByVal pResult As IMFAsyncResult, ByRef pObjectType As MF_OBJECT_TYPE, ByRef ppObject As IUnknown)
        Sub CancelObjectCreation(ByVal pIUnknownCancelCookie As IUnknown)
    End Interface

    [InterfaceId("BB420AA4-765B-4A1F-91FE-D6A8A143924C")]
    [OleAutomation(False)]
    Interface IMFByteStreamHandler Extends stdole.IUnknown
        Sub BeginCreateObject(ByVal pByteStream As IMFByteStream, ByVal pwszUrl As LongPtr, ByVal dwFlags As Long, ByVal pProps As IPropertyStore, ByRef ppIUnknownCancelCookie As IUnknown, ByVal pCallback As IMFAsyncCallback, ByVal punkState As IUnknown)
        Sub EndCreateObject(ByVal pResult As IMFAsyncResult, ByRef pObjectType As MF_OBJECT_TYPE, ByRef ppObject As IUnknown)
        Sub CancelObjectCreation(ByVal pIUnknownCancelCookie As IUnknown)
        Sub GetMaxNumberOfBytesRequiredForResolution(ByRef pqwBytes As LongLong)
    End Interface

    [InterfaceId("542612C4-A1B8-4632-B521-DE11EA64A0B0")]
    [Description("IMFTrustedInput Interface")]
    [OleAutomation(False)]
    Interface IMFTrustedInput Extends stdole.IUnknown
        Sub GetInputTrustAuthority(ByVal dwStreamId As Long, ByRef riid As UUID, ByRef ppunkObject As IUnknown)
    End Interface

    [InterfaceId("D19F8E98-B126-4446-890C-5DCB7AD71453")]
    [Description("IMFInputTrustAuthority Interface")]
    [OleAutomation(False)]
    Interface IMFInputTrustAuthority Extends stdole.IUnknown
        Sub GetDecrypter(ByRef riid As UUID, ByRef ppv As Any)
        Sub RequestAccess(ByVal action As MFPOLICYMANAGER_ACTION, ByRef ppContentEnablerActivate As IMFActivate)
        Sub GetPolicy(ByVal action As MFPOLICYMANAGER_ACTION, ByRef ppPolicy As IMFOutputPolicy)
        Sub BindAccess(ByRef pParam As MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS)
        Sub UpdateAccess(ByRef pParam As MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS)
        Sub Reset()
    End Interface

    [InterfaceId("D19F8E95-B126-4446-890C-5DCB7AD71453")]
    [Description("IMFTrustedOutput Interface")]
    [OleAutomation(False)]
    Interface IMFTrustedOutput Extends stdole.IUnknown
        Sub GetOutputTrustAuthorityCount(ByRef pcOutputTrustAuthorities As Long)
        Sub GetOutputTrustAuthorityByIndex(ByVal dwIndex As Long, ByRef ppauthority As IMFOutputTrustAuthority)
        Sub IsFinal(ByRef pfIsFinal As BOOL)
    End Interface

    [InterfaceId("D19F8E94-B126-4446-890C-5DCB7AD71453")]
    [Description("IMFOutputTrustAuthority Interface")]
    [OleAutomation(False)]
    Interface IMFOutputTrustAuthority Extends stdole.IUnknown
        Sub GetAction(ByRef pAction As MFPOLICYMANAGER_ACTION)
        Sub SetPolicy(ByRef ppPolicy As IMFOutputPolicy, ByVal nPolicy As Long, ByRef ppbTicket As LongPtr, ByRef pcbTicket As Long)
    End Interface

    [InterfaceId("7F00F10A-DAED-41AF-AB26-5FDFA4DFBA3C")]
    [Description("IMFOutputPolicy Interface")]
    [OleAutomation(False)]
    Interface IMFOutputPolicy Extends IMFAttributes
        #If Win64 Then
        Sub GenerateRequiredSchemas(ByVal dwAttributes As MfOutputAttribs, ByRef guidOutputSubType As UUID, ByRef rgGuidProtectionSchemasSupported As UUID, ByVal cProtectionSchemasSupported As Long, ByRef ppRequiredProtectionSchemas As IMFCollection)
        #Else
        Sub GenerateRequiredSchemas(ByVal dwAttributes As MfOutputAttribs, ByVal guidOutputSubType1 As Long, ByVal guidOutputSubType2 As Long, ByVal guidOutputSubType3 As Long, ByVal guidOutputSubType4 As Long, ByRef rgGuidProtectionSchemasSupported As UUID, ByVal cProtectionSchemasSupported As Long, ByRef ppRequiredProtectionSchemas As IMFCollection)
        #End If
        Sub GetOriginatorID(ByRef pguidOriginatorID As UUID)
        Sub GetMinimumGRLVersion(ByRef pdwMinimumGRLVersion As Long)
    End Interface

    [InterfaceId("7BE0FC5B-ABD9-44FB-A5C8-F50136E71599")]
    [Description("IMFOutputSchema Interface")]
    [OleAutomation(False)]
    Interface IMFOutputSchema Extends IMFAttributes
        Sub GetSchemaType(ByRef pguidSchemaType As UUID)
        Sub GetConfigurationData(ByRef pdwVal As Long)
        Sub GetOriginatorID(ByRef pguidOriginatorID As UUID)
    End Interface

    [InterfaceId("D0AE555D-3B12-4D97-B060-0990BC5AEB67")]
    [OleAutomation(False)]
    Interface IMFSecureChannel Extends stdole.IUnknown
        Sub GetCertificate(ByRef ppCert As LongPtr, ByRef pcbCert As Long)
        Sub SetupSession(ByRef pbEncryptedSessionKey As Byte, ByVal cbSessionKey As Long)
    End Interface

    [InterfaceId("8E36395F-C7B9-43C4-A54D-512B4AF63C95")]
    [OleAutomation(False)]
    Interface IMFSampleProtection Extends stdole.IUnknown
        Sub GetInputProtectionVersion(ByRef pdwVersion As Long)
        Sub GetOutputProtectionVersion(ByRef pdwVersion As Long)
        Sub GetProtectionCertificate(ByVal dwVersion As Long, ByRef ppCert As LongPtr, ByRef pcbCert As Long)
        Sub InitOutputProtection(ByVal dwVersion As Long, ByVal dwOutputId As Long, ByRef pbCert As Byte, ByVal cbCert As Long, ByRef ppbSeed As LongPtr, ByRef pcbSeed As Long)
        Sub InitInputProtection(ByVal dwVersion As Long, ByVal dwInputId As Long, ByRef pbSeed As Byte, ByVal cbSeed As Long)
    End Interface

    [InterfaceId("5DFD4B2A-7674-4110-A4E6-8A68FD5F3688")]
    [OleAutomation(False)]
    Interface IMFMediaSinkPreroll Extends stdole.IUnknown
        Sub NotifyPreroll(ByVal hnsUpcomingStartTime As LongLong)
    End Interface

    [InterfaceId("EAECB74A-9A50-42CE-9541-6A7F57AA4AD7")]
    [OleAutomation(False)]
    Interface IMFFinalizableMediaSink Extends IMFMediaSink
        Sub BeginFinalize(ByVal pCallback As IMFAsyncCallback, ByVal punkState As IUnknown)
        Sub EndFinalize(ByVal pResult As IMFAsyncResult)
    End Interface

    [InterfaceId("9DB7AA41-3CC5-40D4-8509-555804AD34CC")]
    [OleAutomation(False)]
    Interface IMFStreamingSinkConfig Extends stdole.IUnknown
        Sub StartStreaming(ByVal fSeekOffsetIsByteOffset As BOOL, ByVal qwSeekOffset As LongLong)
    End Interface

    [InterfaceId("994E23AD-1CC2-493C-B9FA-46F1CB040FA4")]
    [OleAutomation(False)]
    Interface IMFRemoteProxy Extends stdole.IUnknown
        Sub GetRemoteObject(ByRef riid As UUID, ByRef ppv As Any)
        Sub GetRemoteHost(ByRef riid As UUID, ByRef ppv As Any)
    End Interface

    [InterfaceId("09EF5BE3-C8A7-469E-8B70-73BF25BB193F")]
    [OleAutomation(False)]
    Interface IMFObjectReferenceStream Extends stdole.IUnknown
        Sub SaveReference(ByRef riid As UUID, ByVal pUnk As IUnknown)
        Sub LoadReference(ByRef riid As UUID, ByRef ppv As Any)
    End Interface

    [InterfaceId("F70CA1A9-FDC7-4782-B994-ADFFB1C98606")]
    [OleAutomation(False)]
    Interface IMFPMPHost Extends stdole.IUnknown
        Sub LockProcess()
        Sub UnlockProcess()
        Sub CreateObjectByCLSID(ByRef clsid As UUID, ByVal pStream As IStream, ByRef riid As UUID, ByRef ppv As Any)
    End Interface

    [InterfaceId("6C4E655D-EAD8-4421-B6B9-54DCDBBDF820")]
    [OleAutomation(False)]
    Interface IMFPMPClient Extends stdole.IUnknown
        Sub SetPMPHost(ByVal pPMPHost As IMFPMPHost)
    End Interface

    [InterfaceId("994E23AF-1CC2-493C-B9FA-46F1CB040FA4")]
    [OleAutomation(False)]
    Interface IMFPMPServer Extends stdole.IUnknown
        Sub LockProcess()
        Sub UnlockProcess()
        Sub CreateObjectByCLSID(ByRef clsid As UUID, ByRef riid As UUID, ByRef ppObject As Any)
    End Interface

    [InterfaceId("1CDE6309-CAE0-4940-907E-C1EC9C3D1D4A")]
    [OleAutomation(False)]
    Interface IMFRemoteDesktopPlugin Extends stdole.IUnknown
        Sub UpdateTopology(ByVal pTopology As IMFTopology)
    End Interface

    [InterfaceId("A7E025DD-5303-4A62-89D6-E747E1EFAC73")]
    [OleAutomation(False)]
    Interface IMFSAMIStyle Extends stdole.IUnknown
        Sub GetStyleCount(ByRef pdwCount As Long)
        Sub GetStyles(ByRef pPropVarStyleArray As Variant)
        Sub SetSelectedStyle(ByVal pwszStyle As LongPtr)
        Sub GetSelectedStyle(ByRef ppwszStyle As LongPtr)
    End Interface

    [InterfaceId("4ADFDBA3-7AB0-4953-A62B-461E7FF3DA1E")]
    [OleAutomation(False)]
    Interface IMFTranscodeProfile Extends stdole.IUnknown
        Sub SetAudioAttributes(ByVal pAttrs As IMFAttributes)
        Sub GetAudioAttributes(ByRef ppAttrs As IMFAttributes)
        Sub SetVideoAttributes(ByVal pAttrs As IMFAttributes)
        Sub GetVideoAttributes(ByRef ppAttrs As IMFAttributes)
        Sub SetContainerAttributes(ByVal pAttrs As IMFAttributes)
        Sub GetContainerAttributes(ByRef ppAttrs As IMFAttributes)
    End Interface

    [InterfaceId("8CFFCD2E-5A03-4A3A-AFF7-EDCD107C620E")]
    [OleAutomation(False)]
    Interface IMFTranscodeSinkInfoProvider Extends stdole.IUnknown
        Sub SetOutputFile(ByVal pwszFileName As LongPtr)
        Sub SetOutputByteStream(ByVal pByteStreamActivate As IMFActivate)
        Sub SetProfile(ByVal pProfile As IMFTranscodeProfile)
        Sub GetSinkInfo(ByRef pSinkInfo As MF_TRANSCODE_SINK_INFO)
    End Interface

    [InterfaceId("508E71D3-EC66-4FC3-8775-B4B9ED6BA847")]
    [OleAutomation(False)]
    Interface IMFFieldOfUseMFTUnlock Extends stdole.IUnknown
        Sub Unlock(ByVal pUnkMFT As IUnknown)
    End Interface

    [InterfaceId("149C4D73-B4BE-4F8D-8B87-079E926B6ADD")]
    [OleAutomation(False)]
    Interface IMFLocalMFTRegistration Extends stdole.IUnknown
        Sub RegisterMFTs(ByRef pMFTs As MFT_REGISTRATION_INFO, ByVal cMFTs As Long)
    End Interface

    [InterfaceId("84D2054A-3AA1-4728-A3B0-440A418CF49C")]
    [OleAutomation(False)]
    Interface IMFPMPHostApp Extends stdole.IUnknown
        Sub LockProcess()
        Sub UnlockProcess()
        Sub ActivateClassById(ByVal id As LongPtr, ByVal pStream As IStream, ByRef riid As UUID, ByRef ppv As Any)
    End Interface

    [InterfaceId("C004F646-BE2C-48F3-93A2-A0983EBA1108")]
    [OleAutomation(False)]
    Interface IMFPMPClientApp Extends stdole.IUnknown
        Sub SetPMPHost(ByVal pPMPHost As IMFPMPHostApp)
    End Interface

    [InterfaceId("380B9AF9-A85B-4E78-A2AF-EA5CE645C6B4")]
    [OleAutomation(False)]
    Interface IMFMediaStreamSourceSampleRequest Extends stdole.IUnknown
        Sub SetSample(ByVal Value As IMFSample)
    End Interface

    [InterfaceId("245BF8E9-0755-40F7-88A5-AE0F18D55E17")]
    [Description("IMFTrackedSample Interface")]
    [OleAutomation(False)]
    Interface IMFTrackedSample Extends stdole.IUnknown
        Sub SetAllocator(ByVal pSampleAllocator As IMFAsyncCallback, ByVal punkState As IUnknown)
    End Interface

    [InterfaceId("EF5DC845-F0D9-4EC9-B00C-CB5183D38434")]
    [OleAutomation(False)]
    Interface IMFProtectedEnvironmentAccess Extends stdole.IUnknown
        Sub Call(ByVal inputLength As Long, ByRef input As Byte, ByVal outputLength As Long, ByRef Output As Byte)
        Sub ReadGRL(ByRef outputLength As Long, ByVal Output As LongPtr)
    End Interface

    [InterfaceId("4A724BCA-FF6A-4C07-8E0D-7A358421CF06")]
    [OleAutomation(False)]
    Interface IMFSignedLibrary Extends stdole.IUnknown
        Sub GetProcedureAddress(ByVal Name As String, ByVal address As LongPtr)
    End Interface

    [InterfaceId("FFF4AF3A-1FC1-4EF9-A29B-D26C49E2F31A")]
    [OleAutomation(False)]
    Interface IMFSystemId Extends stdole.IUnknown
        Sub GetData(ByRef SIZE As Long, ByVal data As LongPtr)
        Sub Setup(ByVal stage As Long, ByVal cbIn As Long, ByRef pbIn As Byte, ByRef pcbOut As Long, ByRef ppbOut As LongPtr)
    End Interface


    [InterfaceId("E6257174-A060-4C9A-A088-3B1B471CAD28")]
    [OleAutomation(False)]
    Interface IMFContentProtectionDevice Extends stdole.IUnknown
        Sub InvokeFunction(ByVal FunctionId As Long, ByVal InputBufferByteCount As Long, ByRef InputBuffer As Byte, ByRef OutputBufferByteCount As Long, ByRef OutputBuffer As Byte)
        Sub GetPrivateDataByteCount(ByRef PrivateInputByteCount As Long, ByRef PrivateOutputByteCount As Long)
    End Interface

    [InterfaceId("7EC4B1BD-43FB-4763-85D2-64FCB5C5F4CB")]
    [OleAutomation(False)]
    Interface IMFContentDecryptorContext Extends stdole.IUnknown
        Sub InitializeHardwareKey(ByVal InputPrivateDataByteCount As Long, ByRef InputPrivateData As Any, ByRef OutputPrivateData As LongLong)
    End Interface

    [InterfaceId("1F6A9F17-E70B-4E24-8AE4-0B2C3BA7A4AE")]
    [Description("IMFVideoPositionMapper Interface")]
    [OleAutomation(False)]
    Interface IMFVideoPositionMapper Extends stdole.IUnknown
        Sub MapOutputCoordinateToInputStream(ByVal xOut As Single, ByVal yOut As Single, ByVal dwOutputStreamIndex As Long, ByVal dwInputStreamIndex As Long, ByRef pxIn As Single, ByRef pyIn As Single)
    End Interface

    [InterfaceId("A38D9567-5A9C-4F3C-B293-8EB415B279BA")]
    [Description("IMFVideoDeviceID Interface")]
    [OleAutomation(False)]
    Interface IMFVideoDeviceID Extends stdole.IUnknown
        Sub GetDeviceId(ByRef pDeviceID As UUID)
    End Interface

    [InterfaceId("A490B1E4-AB84-4D31-A1B2-181E03B1077A")]
    [Description("IMFVideoDisplayControl Interface")]
    [OleAutomation(False)]
    Interface IMFVideoDisplayControl Extends stdole.IUnknown
        Sub GetNativeVideoSize(ByRef pszVideo As SIZE, ByRef pszARVideo As SIZE)
        Sub GetIdealVideoSize(ByRef pszMin As SIZE, ByRef pszMax As SIZE)
        Sub SetVideoPosition(ByRef pnrcSource As MFVideoNormalizedRect, ByRef prcDest As RECT)
        Sub GetVideoPosition(ByRef pnrcSource As MFVideoNormalizedRect, ByRef prcDest As RECT)
        Sub SetAspectRatioMode(ByVal dwAspectRatioMode As MFVideoAspectRatioMode)
        Sub GetAspectRatioMode(ByRef pdwAspectRatioMode As MFVideoAspectRatioMode)
        Sub SetVideoWindow(ByVal hwndVideo As LongPtr)
        Sub GetVideoWindow(ByRef phwndVideo As LongPtr)
        Sub RepaintVideo()
        Sub GetCurrentImage(ByRef pBih As BITMAPINFOHEADER, pDib As LongPtr, ByRef pcbDib As Long, ByRef pTimeStamp As LongLong)
        Sub SetBorderColor(ByVal clr As Long)
        Sub GetBorderColor(ByRef pclr As Long)
        Sub SetRenderingPrefs(ByVal dwRenderFlags As MFVideoRenderPrefs)
        Sub GetRenderingPrefs(ByRef pdwRenderFlags As MFVideoRenderPrefs)
        Sub SetFullscreen(ByVal fFullscreen As BOOL)
        Sub GetFullscreen(ByRef pfFullscreen As BOOL)
    End Interface

    [InterfaceId("29AFF080-182A-4A5D-AF3B-448F3A6346CB")]
    [Description("IMFVideoPresenter Interface")]
    [OleAutomation(False)]
    Interface IMFVideoPresenter Extends IMFClockStateSink
        Sub ProcessMessage(ByVal eMessage As MFVP_MESSAGE_TYPE, ByVal ulParam As LongPtr)
        Sub GetCurrentMediaType(ByRef ppMediaType As IMFVideoMediaType)
    End Interface

    [InterfaceId("56C294D0-753E-4260-8D61-A3D8820B1D54")]
    [Description("IMFDesiredSample Interface")]
    [OleAutomation(False)]
    Interface IMFDesiredSample Extends stdole.IUnknown
        Sub GetDesiredSampleTimeAndDuration(ByRef phnsSampleTime As LongLong, ByRef phnsSampleDuration As LongLong)
        [PreserveSig]
        Sub SetDesiredSampleTimeAndDuration(ByVal hnsSampleTime As LongLong, ByVal hnsSampleDuration As LongLong)
        [PreserveSig]
        Sub Clear()
    End Interface

    [InterfaceId("A5C6C53F-C202-4AA5-9695-175BA8C508A5")]
    [Description("IMFVideoMixerControl Interface")]
    [OleAutomation(False)]
    Interface IMFVideoMixerControl Extends stdole.IUnknown
        Sub SetStreamZOrder(ByVal dwStreamId As Long, ByVal dwZ As Long)
        Sub GetStreamZOrder(ByVal dwStreamId As Long, ByRef pdwZ As Long)
        Sub SetStreamOutputRect(ByVal dwStreamId As Long, ByRef pnrcOutput As MFVideoNormalizedRect)
        Sub GetStreamOutputRect(ByVal dwStreamId As Long, ByRef pnrcOutput As MFVideoNormalizedRect)
    End Interface

    [InterfaceId("8459616D-966E-4930-B658-54FA7E5A16D3")]
    [Description("IMFVideoMixerControl2 Interface")]
    [OleAutomation(False)]
    Interface IMFVideoMixerControl2 Extends IMFVideoMixerControl
        Sub SetMixingPrefs(ByVal dwMixFlags As Long)
        Sub GetMixingPrefs(ByRef pdwMixFlags As Long)
    End Interface

    [InterfaceId("DFDFD197-A9CA-43D8-B341-6AF3503792CD")]
    [Description("IMFVideoRenderer Interface")]
    [OleAutomation(False)]
    Interface IMFVideoRenderer Extends stdole.IUnknown
        Sub InitializeRenderer(ByVal pVideoMixer As IMFTransform, ByVal pVideoPresenter As IMFVideoPresenter)
    End Interface

    [InterfaceId("83E91E85-82C1-4EA7-801D-85DC50B75086")]
    [Description("IEVRFilterConfig Interface")]
    [OleAutomation(False)]
    Interface IEVRFilterConfig Extends stdole.IUnknown
        Sub SetNumberOfStreams(ByVal dwMaxStreams As Long)
        Sub GetNumberOfStreams(ByRef pdwMaxStreams As Long)
    End Interface

    [InterfaceId("AEA36028-796D-454F-BEEE-B48071E24304")]
    [Description("IEVRFilterConfigEx Interface")]
    [OleAutomation(False)]
    Interface IEVRFilterConfigEx Extends IEVRFilterConfig
        Sub SetConfigPrefs(ByVal dwConfigFlags As EVRFilterConfigPrefs)
        Sub GetConfigPrefs(ByRef pdwConfigFlags As EVRFilterConfigPrefs)
    End Interface

    [InterfaceId("FA993889-4383-415A-A930-DD472A8CF6F7")]
    [Description("IMFTopologyServiceLookup Interface")]
    [OleAutomation(False)]
    Interface IMFTopologyServiceLookup Extends stdole.IUnknown
        Sub LookupService(ByVal type As MF_SERVICE_LOOKUP_TYPE, ByVal dwIndex As Long, ByRef guidService As UUID, ByRef riid As UUID, ByRef ppvObjects As Any, ByRef pnObjects As Long)
    End Interface

    [InterfaceId("FA99388A-4383-415A-A930-DD472A8CF6F7")]
    [OleAutomation(False)]
    Interface IMFTopologyServiceLookupClient Extends stdole.IUnknown
        Sub InitServicePointers(ByVal pLookup As IMFTopologyServiceLookup)
        Sub ReleaseServicePointers()
    End Interface

    [InterfaceId("83A4CE40-7710-494B-A893-A472049AF630")]
    [Description("IEVRTrustedVideoPlugin Interface")]
    [OleAutomation(False)]
    Interface IEVRTrustedVideoPlugin Extends stdole.IUnknown
        Sub IsInTrustedVideoMode(ByVal pYes As Long)
        Sub CanConstrict(ByVal pYes As Long)
        Sub SetConstriction(ByVal dwKPix As Long)
        Sub DisableImageExport(ByVal bDisable As Long)
    End Interface

    [InterfaceId("A714590A-58AF-430A-85BF-44F5EC838D85")]
    [OleAutomation(False)]
    Interface IMFPMediaPlayer Extends stdole.IUnknown
        Sub Play()
        Sub Pause()
        Sub Stop()
        Sub FrameStep()
        Sub SetPosition(ByRef guidPositionType As UUID, ByRef pvPositionValue As Variant)
        Sub GetPosition(ByRef guidPositionType As UUID, ByRef pvPositionValue As Variant)
        Sub GetDuration(ByRef guidPositionType As UUID, ByRef pvDurationValue As Variant)
        Sub SetRate(ByVal flRate As Single)
        Sub GetRate(ByRef pflRate As Single)
        Sub GetSupportedRates(ByVal fForwardDirection As BOOL, ByRef pflSlowestRate As Single, ByRef pflFastestRate As Single)
        Sub GetState(ByRef peState As MFP_MEDIAPLAYER_STATE)
        Sub CreateMediaItemFromURL(ByVal pwszUrl As LongPtr, ByVal fSync As BOOL, ByVal dwUserData As LongPtr, ByRef ppMediaItem As IMFPMediaItem)
        Sub CreateMediaItemFromObject(ByVal pIUnknownObj As IUnknown, ByVal fSync As BOOL, ByVal dwUserData As LongPtr, ByRef ppMediaItem As IMFPMediaItem)
        Sub SetMediaItem(ByVal pIMFPMediaItem As IMFPMediaItem)
        Sub ClearMediaItem()
        Sub GetMediaItem(ByRef ppIMFPMediaItem As IMFPMediaItem)
        Sub GetVolume(ByRef pflVolume As Single)
        Sub SetVolume(ByVal flVolume As Single)
        Sub GetBalance(ByRef pflBalance As Single)
        Sub SetBalance(ByVal flBalance As Single)
        Sub GetMute(ByRef pfMute As BOOL)
        Sub SetMute(ByVal fMute As BOOL)
        Sub GetNativeVideoSize(ByRef pszVideo As SIZE, ByRef pszARVideo As SIZE)
        Sub GetIdealVideoSize(ByRef pszMin As SIZE, ByRef pszMax As SIZE)
        Sub SetVideoSourceRect(ByRef pnrcSource As MFVideoNormalizedRect)
        Sub GetVideoSourceRect(ByRef pnrcSource As MFVideoNormalizedRect)
        Sub SetAspectRatioMode(ByVal dwAspectRatioMode As MFVideoAspectRatioMode)
        Sub GetAspectRatioMode(ByRef pdwAspectRatioMode As MFVideoAspectRatioMode)
        Sub GetVideoWindow(ByRef phwndVideo As LongPtr)
        Sub UpdateVideo()
        Sub SetBorderColor(ByVal clr As Long)
        Sub GetBorderColor(ByRef pclr As Long)
        Sub InsertEffect(ByVal pEffect As IUnknown, ByVal fOptional As BOOL)
        Sub RemoveEffect(ByVal pEffect As IUnknown)
        Sub RemoveAllEffects()
        Sub Shutdown()
    End Interface

    [InterfaceId("90EB3E6B-ECBF-45CC-B1DA-C6FE3EA70D57")]
    [OleAutomation(False)]
    Interface IMFPMediaItem Extends stdole.IUnknown
        Sub GetMediaPlayer(ByRef ppMediaPlayer As IMFPMediaPlayer)
        Sub GetUrl(ByRef ppwszURL As Long)
        Sub GetObject(ByRef ppIUnknown As IUnknown)
        Sub GetUserData(ByRef pdwUserData As LongPtr)
        Sub SetUserData(ByVal dwUserData As LongPtr)
        Sub GetStartStopPosition(ByRef pguidStartPositionType As UUID, ByRef pvStartValue As Variant, ByRef pguidStopPositionType As UUID, ByRef pvStopValue As Variant)
        Sub SetStartStopPosition(ByRef pguidStartPositionType As UUID, ByRef pvStartValue As Variant, ByRef pguidStopPositionType As UUID, ByRef pvStopValue As Variant)
        Sub HasVideo(ByRef pfHasVideo As BOOL, ByRef pfSelected As BOOL)
        Sub HasAudio(ByRef pfHasAudio As BOOL, ByRef pfSelected As BOOL)
        Sub IsProtected(ByRef pfProtected As BOOL)
        Sub GetDuration(ByRef guidPositionType As UUID, ByRef pvDurationValue As Variant)
        Sub GetNumberOfStreams(ByRef pdwStreamCount As Long)
        Sub GetStreamSelection(ByVal dwStreamIndex As Long, ByRef pfEnabled As BOOL)
        Sub SetStreamSelection(ByVal dwStreamIndex As Long, ByVal fEnabled As BOOL)
        Sub GetStreamAttribute(ByVal dwStreamIndex As Long, ByRef guidMFAttribute As UUID, ByRef pvValue As Variant)
        Sub GetPresentationAttribute(ByRef guidMFAttribute As UUID, ByRef pvValue As Variant)
        Sub GetCharacteristics(ByRef pCharacteristics As MFP_MEDIAITEM_CHARACTERISTICS)
        Sub SetStreamSink(ByVal dwStreamIndex As Long, ByVal pMediaSink As IUnknown)
        Sub GetMetadata(ByRef ppMetadataStore As IPropertyStore)
    End Interface


    [InterfaceId("766C8FFB-5FDB-4FEA-A28D-B912996F51BD")]
    [OleAutomation(False)]
    Interface IMFPMediaPlayerCallback Extends stdole.IUnknown
        Sub OnMediaPlayerEvent(ByRef pEventHeader As MFP_EVENT_HEADER)
    End Interface
    
    [InterfaceId("09D0F835-92FF-4E53-8EFA-40FAA551F233")]
    [OleAutomation(False)]
    Interface IMFD3D12SynchronizationObjectCommands Extends IUnknown
        Sub EnqueueResourceReady(ByVal pProducerCommandQueue As ID3D12CommandQueue)
        Sub EnqueueResourceReadyWait(ByVal pConsumerCommandQueue As ID3D12CommandQueue)
        Sub SignalEventOnResourceReady(ByVal hEvent As LongPtr)
        Sub EnqueueResourceRelease(ByVal pConsumerCommandQueue As ID3D12CommandQueue)
    End Interface
    
    [InterfaceId("802302B0-82DE-45E1-B421-F19EE5BDAF23")]
    [OleAutomation(False)]
    Interface IMFD3D12SynchronizationObject Extends IUnknown
        Sub SignalEventOnFinalResourceRelease(ByVal hEvent As LongPtr)
        Sub Reset()
    End Interface
    
[InterfaceId("aeda51c0-9025-4983-9012-de597b88b089")]
[OleAutomation(False)]
Interface IMFCaptureEngineOnEventCallback Extends IUnknown
    Sub OnEvent(ByVal pEvent As IMFMediaEvent)
End Interface

[InterfaceId("52150b82-ab39-4467-980f-e48bf0822ecd")]
[OleAutomation(False)]
Interface IMFCaptureEngineOnSampleCallback Extends IUnknown '//To send compressed/uncompressed samples back to app
    Sub OnSample(Optional ByVal pSample As IMFSample)
End Interface

[InterfaceId("72d6135b-35e9-412c-b926-fd5265f2a885")]
[OleAutomation(False)]
Interface IMFCaptureSink Extends IUnknown
    Sub GetOutputMediaType(ByVal dwSinkStreamIndex As Long, ppMediaType As IMFMediaType)
    Sub GetService(ByVal dwSinkStreamIndex As Long, rguidService As UUID, riid As UUID, ppUnknown As IUnknown)
    Sub AddStream(ByVal dwSourceStreamIndex As Long, ByVal pMediaType As IMFMediaType, Optional ByVal pAttributes As IMFAttributes, Optional ByRef pdwSinkStreamIndex As Long)
    Sub Prepare()
    Sub RemoveAllStreams()
End Interface

[InterfaceId("3323b55a-f92a-4fe2-8edc-e9bfc0634d77")]
[OleAutomation(False)]
Interface IMFCaptureRecordSink Extends IMFCaptureSink
    Sub SetOutputBytStream(ByVal pByteStream As IMFByteStream, guidContainerType As UUID)
    Sub SetOutputFilename(ByVal fileName As LongPtr)
    Sub SetSampleCallback(ByVal dwStreamSinkIndex As Long, ByVal pCallback As IMFCaptureEngineOnSampleCallback)
    Sub SetCustomSink(ByVal pMediaSink As IMFMediaSink)
    Sub GetRotation(ByVal dwStreamIndex As Long, pdwRotationValue As Long)
    Sub SetRotation(ByVal dwStreamIndex As Long, ByVal dwRotationValue As Long)
End Interface

[InterfaceId("77346cfd-5b49-4d73-ace0-5b52a859f2e0")]
[OleAutomation(False)]
Interface IMFCapturePreviewSink Extends IMFCaptureSink
    Sub SetRenderHandle(ByVal handle As LongPtr)
    Sub SetRenderSurface(ByVal pSurface As IUnknown)
    Sub UpdateVideo(pSrc As MFVideoNormalizedRect, pDst As RECT, Optional pBorderColor As Long)
    Sub SetSampleCallback(ByVal dwSinkStreamIndex As Long, ByVal pCallback As IMFCaptureEngineOnSampleCallback)
    Sub GetMirrorState(pfMirrorState As BOOL)
    Sub SetMirrorState(ByVal fMirrorState As BOOL)
    Sub GetRotation(ByVal dwStreamIndex As Long, pdwRotationValue As Long)
    Sub SetRotation(ByVal dwStreamIndex As Long, ByVal dwRotationValue As Long)
    Sub SetCustomSink(ByVal pMediaSink As IMFMediaSink)
End Interface

[InterfaceId("d2d43cc8-48bb-4aa7-95db-10c06977e777")]
[OleAutomation(False)]
Interface IMFCapturePhotoSink Extends IMFCaptureSink
    Sub SetOutputFilename(ByVal fileName As LongPtr)
    Sub SetSampleCallback(ByVal pCallback As IMFCaptureEngineOnSampleCallback)
    Sub SetOutputBytStream(ByVal pByteStream As IMFByteStream)
End Interface

[InterfaceId("439a42a8-0d2c-4505-be83-f79b2a05d5c4")]
[OleAutomation(False)]
Interface IMFCaptureSource Extends IUnknown
    Sub GetCaptureDeviceSource(ByVal mfCaptureEngineDeviceType As MF_CAPTURE_ENGINE_DEVICE_TYPE, Optional ppMediaSource As IMFMediaSource)
    Sub GetCaptureDeviceActivate(ByVal mfCaptureEngineDeviceType As MF_CAPTURE_ENGINE_DEVICE_TYPE, Optional ppActivate As IMFActivate)
    Sub GetService(rguidService As UUID, riid As UUID, ppUnknown As IUnknown)
    Sub AddEffect(ByVal dwSourceStreamIndex As Long, ByVal pUnknown As IUnknown)
    Sub RemoveEffect(ByVal dwSourceStreamIndex As Long, ByVal pUnknown As IUnknown)
    Sub RemoveAllEffects(ByVal dwSourceStreamIndex As Long)
    Sub GetAvailableDeviceMediaType(ByVal dwSourceStreamIndex As Long, ByVal dwMediaTypeIndex As Long, Optional ppMediaType As IMFMediaType)
    Sub SetCurrentDeviceMediaType(ByVal dwSourceStreamIndex As Long, ByVal pMediaType As IMFMediaType)
    Sub GetCurrentDeviceMediaType(ByVal dwSourceStreamIndex As Long, ppMediaType As IMFMediaType)
    Sub GetDeviceStreamCount(pdwStreamCount As Long)
    Sub GetDeviceStreamCategory(ByVal dwSourceStreamIndex As Long, pStreamCategory As MF_CAPTURE_ENGINE_STREAM_CATEGORY)
    Sub GetMirrorState(ByVal dwStreamIndex As Long, pfMirrorState As BOOL)
    Sub SetMirrorState(ByVal dwStreamIndex As Long, ByVal fMirrorState As BOOL)
    Sub GetStreamIndexFromFriendlyName(ByVal uifriendlyname As Long, pdwActualStreamIndex As Long)
End Interface

[InterfaceId("a6bba433-176b-48b2-b375-53aa03473207")]
[OleAutomation(False)]
Interface IMFCaptureEngine Extends IUnknown
    Sub Initialize(ByVal pEventCallback As IMFCaptureEngineOnEventCallback, Optional ByVal pAttributes As IMFAttributes, Optional ByVal pAudioSource As IUnknown, Optional ByVal pVideoSource As IUnknown)
    Sub StartPreview()
    Sub StopPreview()
    Sub StartRecord()
    Sub StopRecord(ByVal fFinalize As BOOL, ByVal bFlushUnprocessedSamples As BOOL)
    Sub TakePhoto()
    Sub GetSink(ByVal mfCaptureEngineSinkType As MF_CAPTURE_ENGINE_SINK_TYPE, ppSink As IMFCaptureSink)
    Sub GetSource(ppSource As IMFCaptureSource)
End Interface

[InterfaceId("8f02d140-56fc-4302-a705-3a97c78be779")]
[OleAutomation(False)]
Interface IMFCaptureEngineClassFactory Extends IUnknown
    Sub CreateInstance(clsid As UUID, riid As UUID, ppvObject As Any)
End Interface

[InterfaceId("e37ceed7-340f-4514-9f4d-9c2ae026100b")]
[OleAutomation(False)]
Interface IMFCaptureEngineOnSampleCallback2 Extends IMFCaptureEngineOnSampleCallback
    Sub OnSynchronizedEvent(ByVal pEvent As IMFMediaEvent)
End Interface

[InterfaceId("f9e4219e-6197-4b5e-b888-bee310ab2c59")]
[OleAutomation(False)]
Interface IMFCaptureSink2 Extends IMFCaptureSink
    Sub SetOutputMediaType(ByVal dwStreamIndex As Long, ByVal pMediaType As IMFMediaType, Optional ByVal pEncodingAttributes As IMFAttributes)
End Interface

    [InterfaceId("FC0E10D2-AB2A-4501-A951-06BB1075184C")]
    [OleAutomation(False)]
    Interface IMFMediaError Extends stdole.IUnknown
        [PreserveSig]
        Function GetErrorCode() As Integer
        Sub GetExtendedErrorCode()
        Sub SetErrorCode(ByVal error As MF_MEDIA_ENGINE_ERR)
        Sub SetExtendedErrorCode(ByVal error As Long /* HRESULT */)
    End Interface

    [InterfaceId("DB71A2FC-078A-414E-9DF9-8C2531B0AA6C")]
    [OleAutomation(False)]
    Interface IMFMediaTimeRange Extends stdole.IUnknown
        [PreserveSig]
        Function GetLength() As Long
        Sub GetStart(ByVal index As Long, ByRef pStart As Double)
        Sub GetEnd(ByVal index As Long, ByRef pEnd As Double)
        [PreserveSig]
        Function ContainsTime(ByVal time As Double) As BOOL
        Sub AddRange(ByVal startTime As Double, ByVal endTime As Double)
        Sub Clear()
    End Interface

    [InterfaceId("FEE7C112-E776-42B5-9BBF-0048524E2BD5")]
    [OleAutomation(False)]
    Interface IMFMediaEngineNotify Extends stdole.IUnknown
        Sub EventNotify(ByVal event As MF_MEDIA_ENGINE_EVENT, ByVal param1 As LongPtr, ByVal param2 As Long)
    End Interface

    [InterfaceId("7A5E5354-B114-4C72-B991-3131D75032EA")]
    [OleAutomation(False)]
    Interface IMFMediaEngineSrcElements Extends stdole.IUnknown
        [PreserveSig]
        Function GetLength() As Long
        Sub GetUrl(ByVal index As Long, ByRef pURL As String)
        Sub GetType(ByVal index As Long, ByRef pType As String)
        Sub GetMedia(ByVal index As Long, ByRef pMedia As String)
        Sub AddElement(ByVal pURL As String, ByVal pType As String, ByVal pMedia As String)
        Sub RemoveAllElements()
    End Interface

    [InterfaceId("98A1B0BB-03EB-4935-AE7C-93C1FA0E1C93")]
    [OleAutomation(False)]
    Interface IMFMediaEngine Extends stdole.IUnknown
        Sub GetError(ByRef ppError As IMFMediaError)
        Sub SetErrorCode(ByVal error As MF_MEDIA_ENGINE_ERR)
        Sub SetSourceElements(ByVal pSrcElements As IMFMediaEngineSrcElements)
        Sub SetSource(ByVal pURL As String)
        Sub GetCurrentSource(ByRef ppUrl As String)
        [PreserveSig]
        Function GetNetworkState() As Integer
        [PreserveSig]
        Function GetPreload() As MF_MEDIA_ENGINE_PRELOAD
        Sub SetPreload(ByVal Preload As MF_MEDIA_ENGINE_PRELOAD)
        Sub GetBuffered(ByRef ppBuffered As IMFMediaTimeRange)
        Sub Load()
        Sub CanPlayType(ByVal type As String, ByRef pAnswer As MF_MEDIA_ENGINE_CANPLAY)
        [PreserveSig]
        Function GetReadyState() As Integer
        [PreserveSig]
        Function IsSeeking() As BOOL
        [PreserveSig]
        Function GetCurrentTime() As Double
        Sub SetCurrentTime(ByVal seekTime As Double)
        [PreserveSig]
        Function GetStartTime() As Double
        [PreserveSig]
        Function GetDuration() As Double
        [PreserveSig]
        Function IsPaused() As BOOL
        [PreserveSig]
        Function GetDefaultPlaybackRate() As Double
        Sub SetDefaultPlaybackRate(ByVal Rate As Double)
        [PreserveSig]
        Function GetPlaybackRate() As Double
        Sub SetPlaybackRate(ByVal Rate As Double)
        Sub GetPlayed(ByRef ppPlayed As IMFMediaTimeRange)
        Sub GetSeekable(ByRef ppSeekable As IMFMediaTimeRange)
        [PreserveSig]
        Function IsEnded() As BOOL
        [PreserveSig]
        Function GetAutoPlay() As BOOL
        Sub SetAutoPlay(ByVal AutoPlay As BOOL)
        [PreserveSig]
        Function GetLoop() As BOOL
        Sub SetLoop(ByVal Loop As BOOL)
        Sub Play()
        Sub Pause()
        [PreserveSig]
        Function GetMuted() As BOOL
        Sub SetMuted(ByVal Muted As BOOL)
        [PreserveSig]
        Function GetVolume() As Double
        Sub SetVolume(ByVal volume As Double)
        [PreserveSig]
        Function HasVideo() As BOOL
        [PreserveSig]
        Function HasAudio() As BOOL
        Sub GetNativeVideoSize(ByRef cx As Long, ByRef cy As Long)
        Sub GetVideoAspectRatio(ByRef cx As Long, ByRef cy As Long)
        Sub Shutdown()
        Sub TransferVideoFrame(ByVal pDstSurf As IUnknown, ByRef pSrc As MFVideoNormalizedRect, ByRef pDst As RECT, ByRef pBorderClr As MFARGB)
        Sub OnVideoStreamTick(ByRef pPts As LongLong)
    End Interface


    [InterfaceId("83015EAD-B1E6-40D0-A98A-37145FFE1AD1")]
    [OleAutomation(False)]
    Interface IMFMediaEngineEx Extends IMFMediaEngine
        Sub SetSourceFromByteStream(ByVal pByteStream As IMFByteStream, ByVal pURL As String)
        Sub GetStatistics(ByVal StatisticID As MF_MEDIA_ENGINE_STATISTIC, ByRef pStatistic As Variant)
        Sub UpdateVideoStream(ByRef pSrc As MFVideoNormalizedRect, ByRef pDst As RECT, ByRef pBorderClr As MFARGB)
        [PreserveSig]
        Function GetBalance() As Double
        Sub SetBalance(ByVal Balance As Double)
        [PreserveSig]
        Function IsPlaybackRateSupported(ByVal Rate As Double) As BOOL
        Sub FrameStep(ByVal Forward As BOOL)
        Sub GetResourceCharacteristics(ByRef pCharacteristics As MFMEDIASOURCE_CHARACTERISTICS)
        Sub GetPresentationAttribute(ByRef guidMFAttribute As UUID, ByRef pvValue As Variant)
        Sub GetNumberOfStreams(ByRef pdwStreamCount As Long)
        Sub GetStreamAttribute(ByVal dwStreamIndex As Long, ByRef guidMFAttribute As UUID, ByRef pvValue As Variant)
        Sub GetStreamSelection(ByVal dwStreamIndex As Long, pEnabled As BOOL)
        Sub SetStreamSelection(ByVal dwStreamIndex As Long, ByVal Enabled As BOOL)
        Sub ApplyStreamSelections()
        Sub IsProtected(ByRef pProtected As BOOL)
        Sub InsertVideoEffect(ByVal pEffect As IUnknown, ByVal fOptional As BOOL)
        Sub InsertAudioEffect(ByVal pEffect As IUnknown, ByVal fOptional As BOOL)
        Sub RemoveAllEffects()
        Sub SetTimelineMarkerTimer(ByVal timeToFire As Double)
        Sub GetTimelineMarkerTimer(ByRef pTimeToFire As Double)
        Sub CancelTimelineMarkerTimer()
        [PreserveSig]
        Function IsStereo3D() As BOOL
        Sub GetStereo3DFramePackingMode(ByRef packMode As MF_MEDIA_ENGINE_S3D_PACKING_MODE)
        Sub SetStereo3DFramePackingMode(ByVal packMode As MF_MEDIA_ENGINE_S3D_PACKING_MODE)
        Sub GetStereo3DRenderMode(ByRef outputType As MF3DVideoOutputType)
        Sub SetStereo3DRenderMode(ByVal outputType As MF3DVideoOutputType)
        Sub EnableWindowlessSwapchainMode(ByVal fEnable As BOOL)
        Sub GetVideoSwapchainHandle(ByRef phSwapchain As LongPtr)
        Sub EnableHorizontalMirrorMode(ByVal fEnable As BOOL)
        Sub GetAudioStreamCategory(ByRef pCategory As AUDIO_STREAM_CATEGORY)
        Sub SetAudioStreamCategory(ByVal category As AUDIO_STREAM_CATEGORY)
        Sub GetAudioEndpointRole(ByRef pRole As ERole)
        Sub SetAudioEndpointRole(ByVal role As ERole)
        Sub GetRealTimeMode(ByRef pfEnabled As BOOL)
        Sub SetRealTimeMode(ByVal fEnable As BOOL)
        Sub SetCurrentTimeEx(ByVal seekTime As Double, ByVal seekMode As MF_MEDIA_ENGINE_SEEK_MODE)
        Sub EnableTimeUpdateTimer(ByVal fEnableTimer As BOOL)
    End Interface

    [InterfaceId("7A3BAC98-0E76-49FB-8C20-8A86FD98EAF2")]
    [OleAutomation(False)]
    Interface IMFMediaEngineAudioEndpointId Extends stdole.IUnknown
        Sub SetAudioEndpointId(ByVal pszEndpointId As LongPtr)
        Sub GetAudioEndpointId(ByRef ppszEndpointId As LongPtr)
    End Interface

    [InterfaceId("2F69D622-20B5-41E9-AFDF-89CED1DDA04E")]
    [OleAutomation(False)]
    Interface IMFMediaEngineExtension Extends stdole.IUnknown
        Sub CanPlayType(ByVal AudioOnly As BOOL, ByVal MimeType As String, ByRef pAnswer As MF_MEDIA_ENGINE_CANPLAY)
        Sub BeginCreateObject(ByVal bstrURL As String, ByVal pByteStream As IMFByteStream, ByVal type As MF_OBJECT_TYPE, ByRef ppIUnknownCancelCookie As IUnknown, ByVal pCallback As IMFAsyncCallback, ByVal punkState As IUnknown)
        Sub CancelObjectCreation(ByVal pIUnknownCancelCookie As IUnknown)
        Sub EndCreateObject(ByVal pResult As IMFAsyncResult, ByRef ppObject As IUnknown)
    End Interface

    [InterfaceId("9F8021E8-9C8C-487E-BB5C-79AA4779938C")]
    [OleAutomation(False)]
    Interface IMFMediaEngineProtectedContent Extends stdole.IUnknown
        Sub ShareResources(ByVal pUnkDeviceContext As IUnknown)
        Sub GetRequiredProtections(ByRef pFrameProtectionFlags As Long)
        Sub SetOPMWindow(ByVal hwnd As Long)
        Sub TransferVideoFrame(ByVal pDstSurf As IUnknown, ByRef pSrc As MFVideoNormalizedRect, ByRef pDst As RECT, ByRef pBorderClr As MFARGB, ByRef pFrameProtectionFlags As Long)
        Sub SetContentProtectionManager(ByVal pCPM As IMFContentProtectionManager)
        Sub SetApplicationCertificate(ByRef pbBlob As Byte, ByVal cbBlob As Long)
    End Interface

    [InterfaceId("EBBAF249-AFC2-4582-91C6-B60DF2E84954")]
    [OleAutomation(False)]
    Interface IAudioSourceProvider Extends stdole.IUnknown
        Sub ProvideInput(ByVal dwSampleCount As Long, ByRef pdwChannelCount As Long, ByRef pInterleavedAudioData As Single)
    End Interface

    [InterfaceId("BA2743A1-07E0-48EF-84B6-9A2ED023CA6C")]
    [OleAutomation(False)]
    Interface IMFMediaEngineWebSupport Extends stdole.IUnknown
        [PreserveSig]
        Function ShouldDelayTheLoadEvent() As BOOL
        Sub ConnectWebAudio(ByVal dwSampleRate As Long, ByRef ppSourceProvider As IAudioSourceProvider)
        Sub DisconnectWebAudio()
    End Interface

    [InterfaceId("A7901327-05DD-4469-A7B7-0E01979E361D")]
    [OleAutomation(False)]
    Interface IMFMediaSourceExtensionNotify Extends stdole.IUnknown
        [PreserveSig]
        Sub OnSourceOpen()
        [PreserveSig]
        Sub OnSourceEnded()
        [PreserveSig]
        Sub OnSourceClose()
    End Interface

    [InterfaceId("24CD47F7-81D8-4785-ADB2-AF697A963CD2")]
    [OleAutomation(False)]
    Interface IMFBufferListNotify Extends stdole.IUnknown
        [PreserveSig]
        Sub OnAddSourceBuffer()
        [PreserveSig]
        Sub OnRemoveSourceBuffer()
    End Interface

    [InterfaceId("87E47623-2CEB-45D6-9B88-D8520C4DCBBC")]
    [OleAutomation(False)]
    Interface IMFSourceBufferNotify Extends stdole.IUnknown
        [PreserveSig]
        Sub OnUpdateStart()
        [PreserveSig]
        Sub OnAbort()
        [PreserveSig]
        Sub OnError(ByVal hr As Long /* HRESULT */)
        [PreserveSig]
        Sub OnUpdate()
        [PreserveSig]
        Sub OnUpdateEnd()
    End Interface

    [InterfaceId("E2CD3A4B-AF25-4D3D-9110-DA0E6F8EE877")]
    [OleAutomation(False)]
    Interface IMFSourceBuffer Extends stdole.IUnknown
        [PreserveSig]
        Function GetUpdating() As BOOL
        Sub GetBuffered(ByRef ppBuffered As IMFMediaTimeRange)
        [PreserveSig]
        Function GetTimeStampOffset() As Double
        Sub SetTimeStampOffset(ByVal Offset As Double)
        [PreserveSig]
        Function GetAppendWindowStart() As Double
        Sub SetAppendWindowStart(ByVal time As Double)
        [PreserveSig]
        Function GetAppendWindowEnd() As Double
        Sub SetAppendWindowEnd(ByVal time As Double)
        Sub Append(ByRef pData As Byte, ByVal len As Long)
        Sub AppendByteStream(ByVal pStream As IMFByteStream, ByRef pMaxLen As LongLong)
        Sub Abort()
        Sub Remove(ByVal Start As Double, ByVal end As Double)
    End Interface
   [InterfaceId("19666FB4-BABE-4C55-BC03-0A074DA37E2A")]
    [OleAutomation(False)]
    Interface IMFSourceBufferAppendMode Extends stdole.IUnknown
        [PreserveSig]
        Function GetAppendMode() As MF_MSE_APPEND_MODE
        Sub SetAppendMode(ByVal mode As MF_MSE_APPEND_MODE)
    End Interface

    [InterfaceId("249981F8-8325-41F3-B80C-3B9E3AAD0CBE")]
    [OleAutomation(False)]
    Interface IMFSourceBufferList Extends stdole.IUnknown
        [PreserveSig]
        Function GetLength() As Long
        [PreserveSig]
        Function GetSourceBuffer(ByVal index As Long) As IMFSourceBuffer
    End Interface

    [InterfaceId("E467B94E-A713-4562-A802-816A42E9008A")]
    [OleAutomation(False)]
    Interface IMFMediaSourceExtension Extends stdole.IUnknown
        [PreserveSig]
        Function GetSourceBuffers() As IMFSourceBufferList
        [PreserveSig]
        Function GetActiveSourceBuffers() As IMFSourceBufferList
        [PreserveSig]
        Function GetReadyState() As MF_MSE_READY
        [PreserveSig]
        Function GetDuration() As Double
        Sub SetDuration(ByVal Duration As Double)
        Sub AddSourceBuffer(ByVal type As String, ByVal pNotify As IMFSourceBufferNotify, ByRef ppSourceBuffer As IMFSourceBuffer)
        Sub RemoveSourceBuffer(ByVal pSourceBuffer As IMFSourceBuffer)
        Sub SetEndOfStream(ByVal error As MF_MSE_ERROR)
        [PreserveSig]
        Function IsTypeSupported(ByVal type As String) As BOOL
        [PreserveSig]
        Function GetSourceBuffer(ByVal dwStreamIndex As Long) As IMFSourceBuffer
    End Interface

    [InterfaceId("5D1ABFD6-450A-4D92-9EFC-D6B6CBC1F4DA")]
    [OleAutomation(False)]
    Interface IMFMediaSourceExtensionLiveSeekableRange Extends stdole.IUnknown
        Sub SetLiveSeekableRange(ByVal Start As Double, ByVal end As Double)
        Sub ClearLiveSeekableRange()
    End Interface

    [InterfaceId("50DC93E4-BA4F-4275-AE66-83E836E57469")]
    [OleAutomation(False)]
    Interface IMFMediaEngineEME Extends stdole.IUnknown
        Sub get_Keys(ByRef keys As IMFMediaKeys)
        Sub SetMediaKeys(ByVal keys As IMFMediaKeys)
    End Interface

    [InterfaceId("654A6BB3-E1A3-424A-9908-53A43A0DFDA0")]
    [OleAutomation(False)]
    Interface IMFMediaEngineSrcElementsEx Extends IMFMediaEngineSrcElements
        Sub AddElementEx(ByVal pURL As String, ByVal pType As String, ByVal pMedia As String, ByVal keySystem As String)
        Sub GetKeySystem(ByVal index As Long, ByRef pType As String)
    End Interface

    [InterfaceId("46A30204-A696-4B18-8804-246B8F031BB1")]
    [OleAutomation(False)]
    Interface IMFMediaEngineNeedKeyNotify Extends stdole.IUnknown
        [PreserveSig]
        Sub NeedKey(ByRef initData As Byte, ByVal cb As Long)
    End Interface

    [InterfaceId("5CB31C05-61FF-418F-AFDA-CAAF41421A38")]
    [OleAutomation(False)]
    Interface IMFMediaKeys Extends stdole.IUnknown
        Sub CreateSession(ByVal MimeType As String, ByRef initData As Byte, ByVal cb As Long, ByRef customData As Byte, ByVal cbCustomData As Long, ByVal Notify As IMFMediaKeySessionNotify, ByRef ppSession As IMFMediaKeySession)
        Sub get_KeySystem(ByRef keySystem As String)
        Sub Shutdown()
        Sub GetSuspendNotify(ByRef Notify As IMFCdmSuspendNotify)
    End Interface

    [InterfaceId("24FA67D5-D1D0-4DC5-995C-C0EFDC191FB5")]
    [OleAutomation(False)]
    Interface IMFMediaKeySession Extends stdole.IUnknown
        Sub GetError(ByRef code As Integer, ByRef systemCode As Long)
        Sub get_KeySystem(ByRef keySystem As String)
        Sub get_SessionId(ByRef sessionID As String)
        Sub Update(ByRef key As Byte, ByVal cb As Long)
        Sub Close()
    End Interface

    [InterfaceId("6A0083F9-8947-4C1D-9CE0-CDEE22B23135")]
    [OleAutomation(False)]
    Interface IMFMediaKeySessionNotify Extends stdole.IUnknown
        [PreserveSig]
        Sub KeyMessage(ByVal destinationURL As String, ByRef message As Byte, ByVal cb As Long)
        [PreserveSig]
        Sub KeyAdded()
        [PreserveSig]
        Sub KeyError(ByVal code As Integer, ByVal systemCode As Long)
    End Interface

    [InterfaceId("7A5645D2-43BD-47FD-87B7-DCD24CC7D692")]
    [OleAutomation(False)]
    Interface IMFCdmSuspendNotify Extends stdole.IUnknown
        Sub Begin()
        Sub end()
    End Interface


    [InterfaceId("DE400F54-5BF1-40CF-8964-0BEA136B1E3D")]
    [OleAutomation(False)]
    Interface IMFHDCPStatus Extends stdole.IUnknown
        Sub Query(ByRef pStatus As MF_HDCP_STATUS, ByRef pfStatus As BOOL)
        Sub Set(ByVal Status As MF_HDCP_STATUS)
    End Interface

    [InterfaceId("765763E6-6C01-4B01-BB0F-B829F60ED28C")]
    [OleAutomation(False)]
    Interface IMFMediaEngineOPMInfo Extends stdole.IUnknown
        Sub GetOPMInfo(ByRef pStatus As MF_MEDIA_ENGINE_OPM_STATUS, ByRef pConstricted As BOOL)
    End Interface

    [InterfaceId("4D645ACE-26AA-4688-9BE1-DF3516990B93")]
    [OleAutomation(False)]
    Interface IMFMediaEngineClassFactory Extends stdole.IUnknown
        Sub CreateInstance(ByVal dwFlags As MF_MEDIA_ENGINE_CREATEFLAGS, ByVal pAttr As IMFAttributes, ByRef ppPlayer As IMFMediaEngine)
        Sub CreateTimeRange(ByRef ppTimeRange As IMFMediaTimeRange)
        Sub CreateError(ByRef ppError As IMFMediaError)
    End Interface

    [InterfaceId("C56156C6-EA5B-48A5-9DF8-FBE035D0929E")]
    [OleAutomation(False)]
    Interface IMFMediaEngineClassFactoryEx Extends IMFMediaEngineClassFactory
        Sub CreateMediaSourceExtension(ByVal dwFlags As Long, ByVal pAttr As IMFAttributes, ByRef ppMSE As IMFMediaSourceExtension)
        Sub CreateMediaKeys(ByVal keySystem As String, ByVal cdmStorePath As String, ByRef ppKeys As IMFMediaKeys)
        Sub IsTypeSupported(ByVal type As String, ByVal keySystem As String, ByRef isSupported As BOOL)
    End Interface

    [InterfaceId("09083CEF-867F-4BF6-8776-DEE3A7B42FCA")]
    [OleAutomation(False)]
    Interface IMFMediaEngineClassFactory2 Extends stdole.IUnknown
        Sub CreateMediaKeys2(ByVal keySystem As String, ByVal defaultCdmStorePath As String, ByVal inprivateCdmStorePath As String, ByRef ppKeys As IMFMediaKeys)
    End Interface

    [InterfaceId("332EC562-3758-468D-A784-E38F23552128")]
    [OleAutomation(False)]
    Interface IMFExtendedDRMTypeSupport Extends stdole.IUnknown
        Sub IsTypeSupportedEx(ByVal type As String, ByVal keySystem As String, ByRef pAnswer As MF_MEDIA_ENGINE_CANPLAY)
    End Interface

    [InterfaceId("A724B056-1B2E-4642-A6F3-DB9420C52908")]
    [OleAutomation(False)]
    Interface IMFMediaEngineSupportsSourceTransfer Extends stdole.IUnknown
        Sub ShouldTransferSource(ByRef pfShouldTransfer As BOOL)
        Sub DetachMediaSource(ByRef ppByteStream As IMFByteStream, ByRef ppMediaSource As IMFMediaSource, ByRef ppMSE As IMFMediaSourceExtension)
        Sub AttachMediaSource(ByVal pByteStream As IMFByteStream, ByVal pMediaSource As IMFMediaSource, ByVal pMSE As IMFMediaSourceExtension)
    End Interface

    [InterfaceId("24230452-FE54-40CC-94F3-FCC394C340D6")]
    [OleAutomation(False)]
    Interface IMFMediaEngineTransferSource Extends stdole.IUnknown
        Sub TransferSourceToMediaEngine(ByVal Destination As IMFMediaEngine)
    End Interface
    

    [InterfaceId("1F2A94C9-A3DF-430D-9D0F-ACD85DDC29AF")]
    [OleAutomation(False)]
    Interface IMFTimedText Extends stdole.IUnknown
        Sub RegisterNotifications(ByVal Notify As IMFTimedTextNotify)
        Sub SelectTrack(ByVal trackId As Long, ByVal selected As BOOL)
        Sub AddDataSource(ByVal byteStream As IMFByteStream, ByVal label As LongPtr, ByVal language As LongPtr, ByVal kind As MF_TIMED_TEXT_TRACK_KIND, ByVal isDefault As BOOL, ByRef trackId As Long)
        Sub AddDataSourceFromUrl(ByVal URL As LongPtr, ByVal label As LongPtr, ByVal language As LongPtr, ByVal kind As MF_TIMED_TEXT_TRACK_KIND, ByVal isDefault As BOOL, ByRef trackId As Long)
        Sub AddTrack(ByVal label As LongPtr, ByVal language As LongPtr, ByVal kind As MF_TIMED_TEXT_TRACK_KIND, ByRef track As IMFTimedTextTrack)
        Sub RemoveTrack(ByVal track As IMFTimedTextTrack)
        Sub GetCueTimeOffset(ByRef Offset As Double)
        Sub SetCueTimeOffset(ByVal Offset As Double)
        Sub GetTracks(ByRef tracks As IMFTimedTextTrackList)
        Sub GetActiveTracks(ByRef activeTracks As IMFTimedTextTrackList)
        Sub GetTextTracks(ByRef textTracks As IMFTimedTextTrackList)
        Sub GetMetadataTracks(ByRef metadataTracks As IMFTimedTextTrackList)
        Sub SetInBandEnabled(ByVal Enabled As BOOL)
        [PreserveSig]
        Function IsInBandEnabled() As BOOL
    End Interface

    [InterfaceId("DF6B87B6-CE12-45DB-ABA7-432FE054E57D")]
    [OleAutomation(False)]
    Interface IMFTimedTextNotify Extends stdole.IUnknown
        ' [PreserveSig]
        Sub TrackAdded(ByVal trackId As Long)
        ' [PreserveSig]
        Sub TrackRemoved(ByVal trackId As Long)
        ' [PreserveSig]
        Sub TrackSelected(ByVal trackId As Long, ByVal selected As BOOL)
        ' [PreserveSig]
        Sub TrackReadyStateChanged(ByVal trackId As Long)
        ' [PreserveSig]
        Sub Error(ByVal errorCode As MF_TIMED_TEXT_ERROR_CODE, ByVal extendedErrorCode As Long /* HRESULT */, ByVal sourceTrackId As Long)
        ' [PreserveSig]
        Sub Cue(ByVal cueEvent As MF_TIMED_TEXT_CUE_EVENT, ByVal currentTime As Double, ByVal Cue As IMFTimedTextCue)
        ' [PreserveSig]
        Sub Reset()
    End Interface

    [InterfaceId("8822C32D-654E-4233-BF21-D7F2E67D30D4")]
    [OleAutomation(False)]
    Interface IMFTimedTextTrack Extends stdole.IUnknown
        [PreserveSig]
        Function GetId() As Long
        Sub GetLabel(label As LongPtr)
        Sub SetLabel(ByVal label As LongPtr)
        Sub GetLanguage(language As LongPtr)
        [PreserveSig]
        Function GetTrackKind() As MF_TIMED_TEXT_TRACK_KIND
        [PreserveSig]
        Function IsInBand() As BOOL
        Sub GetInBandMetadataTrackDispatchType(ByVal dispatchType As LongPtr)
        [PreserveSig]
        Function IsActive() As BOOL
        [PreserveSig]
        Function GetErrorCode() As MF_TIMED_TEXT_ERROR_CODE
        Sub GetExtendedErrorCode()
        Sub GetDataFormat(ByRef Format As UUID)
        [PreserveSig]
        Function GetReadyState() As MF_TIMED_TEXT_TRACK_READY_STATE
        Sub GetCueList(ByRef cues As IMFTimedTextCueList)
    End Interface

    [InterfaceId("23FF334C-442C-445F-BCCC-EDC438AA11E2")]
    [OleAutomation(False)]
    Interface IMFTimedTextTrackList Extends stdole.IUnknown
        [PreserveSig]
        Function GetLength() As Long
        Sub GetTrack(ByVal index As Long, ByRef track As IMFTimedTextTrack)
        Sub GetTrackById(ByVal trackId As Long, ByRef track As IMFTimedTextTrack)
    End Interface

    [InterfaceId("1E560447-9A2B-43E1-A94C-B0AAABFBFBC9")]
    [OleAutomation(False)]
    Interface IMFTimedTextCue Extends stdole.IUnknown
        [PreserveSig]
        Function GetId() As Long
        Sub GetOriginalId(originalId As LongPtr)
        [PreserveSig]
        Function GetCueKind() As MF_TIMED_TEXT_TRACK_KIND
        [PreserveSig]
        Function GetStartTime() As Double
        [PreserveSig]
        Function GetDuration() As Double
        [PreserveSig]
        Function GetTrackId() As Long
        Sub GetData(ByRef data As IMFTimedTextBinary)
        Sub GetRegion(ByRef region As IMFTimedTextRegion)
        Sub GetStyle(ByRef Style As IMFTimedTextStyle)
        [PreserveSig]
        Function GetLineCount() As Long
        Sub GetLine(ByVal index As Long, ByRef line As IMFTimedTextFormattedText)
    End Interface

    [InterfaceId("E13AF3C1-4D47-4354-B1F5-E83AE0ECAE60")]
    [OleAutomation(False)]
    Interface IMFTimedTextFormattedText Extends stdole.IUnknown
        Sub GetText(Text As LongPtr)
        [PreserveSig]
        Function GetSubformattingCount() As Long
        Sub GetSubformatting(ByVal index As Long, ByRef firstChar As Long, ByRef charLength As Long, ByRef Style As IMFTimedTextStyle)
    End Interface

    [InterfaceId("09B2455D-B834-4F01-A347-9052E21C450E")]
    [OleAutomation(False)]
    Interface IMFTimedTextStyle Extends stdole.IUnknown
        Sub GetName(Name As LongPtr)
        [PreserveSig]
        Function IsExternal() As BOOL
        Sub GetFontFamily(fontFamily As LongPtr)
        Sub GetFontSize(ByRef fontSize As Double, ByRef unitType As MF_TIMED_TEXT_UNIT_TYPE)
        Sub GetColor(ByRef color As MFARGB)
        Sub GetBackgroundColor(ByRef bgColor As MFARGB)
        Sub GetShowBackgroundAlways(showBackgroundAlways As BOOL)
        Sub GetFontStyle(ByRef fontStyle As MF_TIMED_TEXT_FONT_STYLE)
        Sub GetBold(Bold As BOOL)
        Sub GetRightToLeft(rightToLeft As BOOL)
        Sub GetTextAlignment(ByRef textAlign As MF_TIMED_TEXT_ALIGNMENT)
        Sub GetTextDecoration(ByRef textDecoration As MF_TIMED_TEXT_DECORATION)
        Sub GetTextOutline(ByRef color As MFARGB, ByRef thickness As Double, ByRef blurRadius As Double, ByRef unitType As MF_TIMED_TEXT_UNIT_TYPE)
    End Interface

    [InterfaceId("C8D22AFC-BC47-4BDF-9B04-787E49CE3F58")]
    [OleAutomation(False)]
    Interface IMFTimedTextRegion Extends stdole.IUnknown
        Sub GetName(Name As LongPtr)
        Sub GetPosition(ByRef px As Double, ByRef py As Double, ByRef unitType As MF_TIMED_TEXT_UNIT_TYPE)
        Sub GetExtent(ByRef pwidth As Double, ByRef pheight As Double, ByRef unitType As MF_TIMED_TEXT_UNIT_TYPE)
        Sub GetBackgroundColor(ByRef bgColor As MFARGB)
        Sub GetWritingMode(ByRef writingMode As MF_TIMED_TEXT_WRITING_MODE)
        Sub GetDisplayAlignment(ByRef displayAlign As MF_TIMED_TEXT_DISPLAY_ALIGNMENT)
        Sub GetLineHeight(ByRef pLineHeight As Double, ByRef unitType As MF_TIMED_TEXT_UNIT_TYPE)
        Sub GetClipOverflow(clipOverflow As BOOL)
        Sub GetPadding(ByRef before As Double, ByRef Start As Double, ByRef after As Double, ByRef end As Double, ByRef unitType As MF_TIMED_TEXT_UNIT_TYPE)
        Sub GetWrap(wrap As BOOL)
        Sub GetZIndex(ByRef zIndex As Long)
        Sub GetScrollMode(ByRef scrollMode As MF_TIMED_TEXT_SCROLL_MODE)
    End Interface

    [InterfaceId("4AE3A412-0545-43C4-BF6F-6B97A5C6C432")]
    [OleAutomation(False)]
    Interface IMFTimedTextBinary Extends stdole.IUnknown
        Sub GetData(data As LongPtr, ByRef Length As Long)
    End Interface

    [InterfaceId("AD128745-211B-40A0-9981-FE65F166D0FD")]
    [OleAutomation(False)]
    Interface IMFTimedTextCueList Extends stdole.IUnknown
        [PreserveSig]
        Function GetLength() As Long
        Sub GetCueByIndex(ByVal index As Long, ByRef Cue As IMFTimedTextCue)
        Sub GetCueById(ByVal id As Long, ByRef Cue As IMFTimedTextCue)
        Sub GetCueByOriginalId(ByVal originalId As LongPtr, ByRef Cue As IMFTimedTextCue)
        Sub AddTextCue(ByVal Start As Double, ByVal Duration As Double, ByVal Text As LongPtr, ByRef Cue As IMFTimedTextCue)
        Sub AddDataCue(ByVal Start As Double, ByVal Duration As Double, ByRef data As Byte, ByVal dataSize As Long, ByRef Cue As IMFTimedTextCue)
        Sub RemoveCue(ByVal Cue As IMFTimedTextCue)
    End Interface

    [InterfaceId("76C6A6F5-4955-4DE5-B27B-14B734CC14B4")]
    [OleAutomation(False)]
    Interface IMFTimedTextRuby Extends stdole.IUnknown
        Sub GetRubyText(rubyText As LongPtr)
        Sub GetRubyPosition(ByRef Value As MF_TIMED_TEXT_RUBY_POSITION)
        Sub GetRubyAlign(ByRef Value As MF_TIMED_TEXT_RUBY_ALIGN)
        Sub GetRubyReserve(ByRef Value As MF_TIMED_TEXT_RUBY_RESERVE)
    End Interface

    [InterfaceId("3C5F3E8A-90C0-464E-8136-898D2975F847")]
    [OleAutomation(False)]
    Interface IMFTimedTextBouten Extends stdole.IUnknown
        Sub GetBoutenType(ByRef Value As MF_TIMED_TEXT_BOUTEN_TYPE)
        Sub GetBoutenColor(ByRef Value As MFARGB)
        Sub GetBoutenPosition(ByRef Value As MF_TIMED_TEXT_BOUTEN_POSITION)
    End Interface

    [InterfaceId("DB639199-C809-4C89-BFCA-D0BBB9729D6E")]
    [OleAutomation(False)]
    Interface IMFTimedTextStyle2 Extends stdole.IUnknown
        Sub GetRuby(ByRef ruby As IMFTimedTextRuby)
        Sub GetBouten(ByRef bouten As IMFTimedTextBouten)
        Sub IsTextCombined(Value As BOOL)
        Sub GetFontAngleInDegrees(ByRef Value As Double)
    End Interface
    
    [InterfaceId("9E184D15-CDB7-4F86-B49E-566689F4A601")]
    [OleAutomation(False)]
    Interface IMFMediaEngineEMENotify Extends stdole.IUnknown
        [PreserveSig]
        Sub Encrypted(ByRef pbInitData As Byte, ByVal cb As Long, ByVal bstrInitDataType As String)
        [PreserveSig]
        Sub WaitingForKey()
    End Interface

    [InterfaceId("C3A9E92A-DA88-46B0-A110-6CF953026CB9")]
    [OleAutomation(False)]
    Interface IMFMediaKeySessionNotify2 Extends IMFMediaKeySessionNotify
        [PreserveSig]
        Sub KeyMessage2(ByVal eMessageType As MF_MEDIAKEYSESSION_MESSAGETYPE, ByVal destinationURL As String, ByRef pbMessage As Byte, ByVal cbMessage As Long)
        [PreserveSig]
        Sub KeyStatusChange()
    End Interface

    [InterfaceId("AEC63FDA-7A97-4944-B35C-6C6DF8085CC3")]
    [OleAutomation(False)]
    Interface IMFMediaKeySystemAccess Extends stdole.IUnknown
        Sub CreateMediaKeys(ByVal pCdmCustomConfig As IPropertyStore, ByRef ppKeys As IMFMediaKeys2)
        Sub get_SupportedConfiguration(ByRef ppSupportedConfiguration As IPropertyStore)
        Sub get_KeySystem(ByRef pKeySystem As String)
    End Interface

    [InterfaceId("3787614F-65F7-4003-B673-EAD8293A0E60")]
    [OleAutomation(False)]
    Interface IMFMediaEngineClassFactory3 Extends stdole.IUnknown
        Sub CreateMediaKeySystemAccess(ByVal keySystem As String, ByRef ppSupportedConfigurationsArray As IPropertyStore, ByVal uSize As Long, ByRef ppKeyAccess As IMFMediaKeySystemAccess)
    End Interface

    [InterfaceId("45892507-AD66-4DE2-83A2-ACBB13CD8D43")]
    [OleAutomation(False)]
    Interface IMFMediaKeys2 Extends IMFMediaKeys
        Sub CreateSession2(ByVal eSessionType As MF_MEDIAKEYSESSION_TYPE, ByVal pMFMediaKeySessionNotify2 As IMFMediaKeySessionNotify2, ByRef ppSession As IMFMediaKeySession2)
        Sub SetServerCertificate(ByRef pbServerCertificate As Byte, ByVal cb As Long)
        Sub GetDOMException(ByVal systemCode As Long /* HRESULT */, ByRef code As Long /* HRESULT */)
    End Interface

    [InterfaceId("E9707E05-6D55-4636-B185-3DE21210BD75")]
    [OleAutomation(False)]
    Interface IMFMediaKeySession2 Extends IMFMediaKeySession
        Sub get_KeyStatuses(ByVal pKeyStatusesArray As LongPtr, ByRef puSize As Long)
        Sub Load(ByVal bstrSessionId As String, ByRef pfLoaded As BOOL)
        Sub GenerateRequest(ByVal initDataType As String, ByRef pbInitData As Byte, ByVal cb As Long)
        Sub get_Expiration(ByRef dblExpiration As Double)
        Sub Remove()
        Sub Shutdown()
    End Interface

    [InterfaceId("FBE256C1-43CF-4A9B-8CB8-CE8632A34186")]
    [OleAutomation(False)]
    Interface IMFMediaEngineClassFactory4 Extends stdole.IUnknown
        Sub CreateContentDecryptionModuleFactory(ByVal keySystem As LongPtr, ByRef riid As UUID, ByRef ppvObject As Any)
    End Interface

    [InterfaceId("4E233EFD-1DD2-49E8-B577-D63EEE4C0D33")]
    [OleAutomation(False)]
    Interface IMFContentDecryptionModuleSession Extends stdole.IUnknown
        Sub GetSessionId(ByVal sessionID As LongPtr)
        Sub GetExpiration(ByRef expiration As Double)
        Sub GetKeyStatuses(ByVal keyStatuses As LongPtr, ByRef numKeyStatuses As Long)
        Sub Load(ByVal sessionID As LongPtr, ByVal loaded As BOOL)
        Sub GenerateRequest(ByVal initDataType As LongPtr, ByRef initData As Byte, ByVal initDataSize As Long)
        Sub Update(ByRef response As Byte, ByVal responseSize As Long)
        Sub Close()
        Sub Remove()
    End Interface

    [InterfaceId("3F96EE40-AD81-4096-8470-59A4B770F89A")]
    [OleAutomation(False)]
    Interface IMFContentDecryptionModuleSessionCallbacks Extends stdole.IUnknown
        Sub KeyMessage(ByVal messageType As MF_MEDIAKEYSESSION_MESSAGETYPE, ByRef message As Byte, ByVal messageSize As Long, ByVal destinationURL As LongPtr)
        Sub KeyStatusChanged()
    End Interface

    [InterfaceId("87BE986C-10BE-4943-BF48-4B54CE1983A2")]
    [OleAutomation(False)]
    Interface IMFContentDecryptionModule Extends stdole.IUnknown
        Sub SetContentEnabler(ByVal contentEnabler As IMFContentEnabler, ByVal result As IMFAsyncResult)
        Sub GetSuspendNotify(ByRef Notify As IMFCdmSuspendNotify)
        Sub SetPMPHostApp(ByVal pmpHostApp As IMFPMPHostApp)
        Sub CreateSession(ByVal sessionType As MF_MEDIAKEYSESSION_TYPE, ByVal callbacks As IMFContentDecryptionModuleSessionCallbacks, ByRef Session As IMFContentDecryptionModuleSession)
        Sub SetServerCertificate(ByRef certificate As Byte, ByVal certificateSize As Long)
        Sub CreateTrustedInput(ByRef contentInitData As Byte, ByVal contentInitDataSize As Long, ByRef trustedInput As IMFTrustedInput)
        Sub GetProtectionSystemIds(ByVal systemIds As LongPtr, ByRef Count As Long)
    End Interface

    [InterfaceId("A853D1F4-E2A0-4303-9EDC-F1A68EE43136")]
    [OleAutomation(False)]
    Interface IMFContentDecryptionModuleAccess Extends stdole.IUnknown
        Sub CreateContentDecryptionModule(ByVal contentDecryptionModuleProperties As IPropertyStore, ByRef contentDecryptionModule As IMFContentDecryptionModule)
        Sub GetConfiguration(ByRef configuration As IPropertyStore)
        Sub GetKeySystem(ByVal keySystem As LongPtr)
    End Interface

    [InterfaceId("7D5ABF16-4CBB-4E08-B977-9BA59049943E")]
    [OleAutomation(False)]
    Interface IMFContentDecryptionModuleFactory Extends stdole.IUnknown
        [PreserveSig]
        Function IsTypeSupported(ByVal keySystem As LongPtr, ByVal ContentType As LongPtr) As BOOL
        Sub CreateContentDecryptionModuleAccess(ByVal keySystem As LongPtr, ByVal configurations As IPropertyStore, ByVal numConfigurations As Long, ByRef contentDecryptionModuleAccess As IMFContentDecryptionModuleAccess)
    End Interface

    [InterfaceId("0C012799-1B61-4C10-BDA9-04445BE5F561")]
    [OleAutomation(False)]
    Interface IMFDLNASinkInit Extends stdole.IUnknown
        Sub Initialize(ByVal pByteStream As IMFByteStream, ByVal fPal As BOOL)
    End Interface

    [InterfaceId("3DE21209-8BA6-4F2A-A577-2819B56FF14D")]
    [OleAutomation(False)]
    Interface IAdvancedMediaCaptureInitializationSettings Extends stdole.IUnknown
        Sub SetDirectxDeviceManager(ByVal Value As IMFDXGIDeviceManager)
    End Interface

    [InterfaceId("24E0485F-A33E-4AA1-B564-6019B1D14F65")]
    [OleAutomation(False)]
    Interface IAdvancedMediaCaptureSettings Extends stdole.IUnknown
        Sub GetDirectxDeviceManager(ByRef Value As IMFDXGIDeviceManager)
    End Interface

    [InterfaceId("D0751585-D216-4344-B5BF-463B68F977BB")]
    [OleAutomation(False)]
    Interface IAdvancedMediaCapture Extends stdole.IUnknown
        Sub GetAdvancedMediaCaptureSettings(ByRef Value As IAdvancedMediaCaptureSettings)
    End Interface

    [InterfaceId("2BA61F92-8305-413B-9733-FAF15F259384")]
    [OleAutomation(False)]
    Interface IMFSharingEngineClassFactory Extends stdole.IUnknown
        Sub CreateInstance(ByVal dwFlags As Long, ByVal pAttr As IMFAttributes, ByRef ppEngine As IUnknown)
    End Interface

    [InterfaceId("8D3CE1BF-2367-40E0-9EEE-40D377CC1B46")]
    [OleAutomation(False)]
    [Description("IMFMediaSharingEngine Interface")]
    Interface IMFMediaSharingEngine Extends IMFMediaEngine
        Sub GetDevice(ByRef pDevice As DEVICE_INFO)
    End Interface

    [InterfaceId("524D2BC4-B2B1-4FE5-8FAC-FA4E4512B4E0")]
    [OleAutomation(False)]
    [Description("IMFMediaSharingEngineClassFactory Interface")]
    Interface IMFMediaSharingEngineClassFactory Extends stdole.IUnknown
        Sub CreateInstance(ByVal dwFlags As Long, ByVal pAttr As IMFAttributes, ByRef ppEngine As IMFMediaSharingEngine)
    End Interface

    [InterfaceId("CFA0AE8E-7E1C-44D2-AE68-FC4C148A6354")]
    [OleAutomation(False)]
    [Description("IMFImageSharingEngine Interface")]
    Interface IMFImageSharingEngine Extends stdole.IUnknown
        Sub SetSource(ByVal pStream As IUnknown)
        Sub GetDevice(ByRef pDevice As DEVICE_INFO)
        Sub Shutdown()
    End Interface

    [InterfaceId("1FC55727-A7FB-4FC8-83AE-8AF024990AF1")]
    [OleAutomation(False)]
    [Description("IMFImageSharingEngineClassFactory Interface")]
    Interface IMFImageSharingEngineClassFactory Extends stdole.IUnknown
        Sub CreateInstanceFromUDN(ByVal pUniqueDeviceName As String, ByRef ppEngine As IMFImageSharingEngine)
    End Interface

    [InterfaceId("607574EB-F4B6-45C1-B08C-CB715122901D")]
    [OleAutomation(False)]
    Interface IPlayToControl Extends stdole.IUnknown
        Sub Connect(ByVal pFactory As IMFSharingEngineClassFactory)
        Sub Disconnect()
    End Interface

    [InterfaceId("AA9DD80F-C50A-4220-91C1-332287F82A34")]
    [OleAutomation(False)]
    Interface IPlayToControlWithCapabilities Extends IPlayToControl
        Sub GetCapabilities(ByRef pCapabilities As PLAYTO_SOURCE_CREATEFLAGS)
    End Interface

    [InterfaceId("842B32A3-9B9B-4D1C-B3F3-49193248A554")]
    [OleAutomation(False)]
    Interface IPlayToSourceClassFactory Extends stdole.IUnknown
        Sub CreateInstance(ByVal dwFlags As PLAYTO_SOURCE_CREATEFLAGS, ByVal pControl As IPlayToControl, ByRef ppSource As IUnknown)
    End Interface

    [InterfaceId("D396EC8C-605E-4249-978D-72AD1C312872")]
    [OleAutomation(False)]
    Interface IMFSpatialAudioObjectBuffer Extends IMFMediaBuffer
        Sub SetId(ByVal u32ID As Long)
        Sub GetId(ByRef pu32ID As Long)
        Sub SetType(ByVal type As AudioObjectType)
        Sub GetType(ByRef pType As AudioObjectType)
        Sub GetMetadataItems(ByRef ppMetadataItems As ISpatialAudioMetadataItems)
    End Interface

    [InterfaceId("ABF28A9B-3393-4290-BA79-5FFC46D986B2")]
    [OleAutomation(False)]
    Interface IMFSpatialAudioSample Extends IMFSample
        Sub GetObjectCount(ByRef pdwObjectCount As Long)
        Sub AddSpatialAudioObject(ByVal pAudioObjBuffer As IMFSpatialAudioObjectBuffer)
        Sub GetSpatialAudioObjectByIndex(ByVal dwIndex As Long, ByRef ppAudioObjBuffer As IMFSpatialAudioObjectBuffer)
    End Interface
    [InterfaceId("6338B23A-3042-49D2-A3EA-EC0FED815407")]
    [OleAutomation(False)]
    Interface IMFCameraSyncObject Extends stdole.IUnknown
        Sub WaitOnSignal(ByVal timeOutInMs As Long)
        [PreserveSig]
        Sub Shutdown()
    End Interface

    [InterfaceId("1C08A864-EF6C-4C75-AF59-5F2D68DA9563")]
    [OleAutomation(False)]
    [Description("IMFVirtualCamera Interface")]
    Interface IMFVirtualCamera Extends IMFAttributes
        Sub AddDeviceSourceInfo(ByVal DeviceSourceInfo As LongPtr)
        Sub AddProperty(ByRef pkey As PROPERTYKEY, ByVal type As DEVPROPTYPE, ByRef pbData As Byte, ByVal cbData As Long)
        Sub AddRegistryEntry(ByVal EntryName As LongPtr, ByVal SubkeyPath As LongPtr, ByVal dwRegType As Long, ByRef pbData As Byte, ByVal cbData As Long)
        Sub Start(ByVal pCallback As IMFAsyncCallback)
        Sub Stop()
        Sub Remove()
        Sub GetMediaSource(ByRef ppMediaSource As IMFMediaSource)
        Sub SendCameraProperty(ByRef propertySet As UUID, ByVal propertyId As Long, ByVal propertyFlags As Long, ByRef propertyPayload As Any, ByVal propertyPayloadLength As Long, ByRef data As Any, ByVal DataLength As Long, ByRef dataWritten As Long)
        Sub CreateSyncEvent(ByRef kseventSet As UUID, ByVal kseventId As Long, ByVal kseventFlags As Long, ByVal eventHandle As LongPtr, ByRef cameraSyncObject As IMFCameraSyncObject)
        Sub CreateSyncSemaphore(ByRef kseventSet As UUID, ByVal kseventId As Long, ByVal kseventFlags As Long, ByVal semaphoreHandle As LongPtr, ByVal semaphoreAdjustment As Long, ByRef cameraSyncObject As IMFCameraSyncObject)
        Sub Shutdown()
    End Interface

    [InterfaceId("CE8BD576-E440-43B3-BE34-1E53F565F7E8")]
    [OleAutomation(False)]
    [Description("IMFMuxStreamAttributesManager Interface")]
    Interface IMFMuxStreamAttributesManager Extends stdole.IUnknown
        Sub GetStreamCount(ByRef pdwMuxStreamCount As Long)
        Sub GetAttributes(ByVal dwMuxStreamIndex As Long, ByRef ppStreamAttributes As IMFAttributes)
    End Interface

    [InterfaceId("505A2C72-42F7-4690-AEAB-8F513D0FFDB8")]
    [OleAutomation(False)]
    [Description("IMFMuxStreamMediaTypeManager Interface")]
    Interface IMFMuxStreamMediaTypeManager Extends stdole.IUnknown
        Sub GetStreamCount(ByRef pdwMuxStreamCount As Long)
        Sub GetMediaType(ByVal dwMuxStreamIndex As Long, ByRef ppMediaType As IMFMediaType)
        Sub GetStreamConfigurationCount(ByRef pdwCount As Long)
        Sub AddStreamConfiguration(ByVal ullStreamMask As LongLong)
        Sub RemoveStreamConfiguration(ByVal ullStreamMask As LongLong)
        Sub GetStreamConfiguration(ByVal ulIndex As Long, ByRef pullStreamMask As LongLong)
    End Interface

    [InterfaceId("74ABBC19-B1CC-4E41-BB8B-9D9B86A8F6CA")]
    [OleAutomation(False)]
    [Description("IMFMuxStreamSampleManager Interface")]
    Interface IMFMuxStreamSampleManager Extends stdole.IUnknown
        Sub GetStreamCount(ByRef pdwMuxStreamCount As Long)
        Sub GetSample(ByVal dwMuxStreamIndex As Long, ByRef ppSample As IMFSample)
        [PreserveSig]
        Function GetStreamConfiguration() As LongLong
    End Interface

    [InterfaceId("C1209904-E584-4752-A2D6-7F21693F8B21")]
    [OleAutomation(False)]
    Interface IMFSecureBuffer Extends stdole.IUnknown
        Sub GetIdentifier(ByRef pGuidIdentifier As UUID)
    End Interface

    [InterfaceId("BC2B7D44-A72D-49D5-8376-1480DEE58B22")]
    [OleAutomation(False)]
    [Description("IMFNetCrossOriginSupport Interface")]
    Interface IMFNetCrossOriginSupport Extends stdole.IUnknown
        Sub GetCrossOriginPolicy(ByRef pPolicy As MF_CROSS_ORIGIN_POLICY)
        Sub GetSourceOrigin(ByRef wszSourceOrigin As LongPtr)
        Sub IsSameOrigin(ByVal wszUrl As LongPtr, ByRef pfIsSameOrigin As BOOL)
    End Interface

    [InterfaceId("F779FDDF-26E7-4270-8A8B-B983D1859DE0")]
    [OleAutomation(False)]
    Interface IMFHttpDownloadRequest Extends stdole.IUnknown
        Sub AddHeader(ByVal szHeader As LongPtr)
        Sub BeginSendRequest(ByRef pbPayload As Byte, ByVal cbPayload As Long, ByVal pCallback As IMFAsyncCallback, ByVal punkState As IUnknown)
        Sub EndSendRequest(ByVal pResult As IMFAsyncResult)
        Sub BeginReceiveResponse(ByVal pCallback As IMFAsyncCallback, ByVal punkState As IUnknown)
        Sub EndReceiveResponse(ByVal pResult As IMFAsyncResult)
        Sub BeginReadPayload(ByRef pb As Byte, ByVal cb As Long, ByVal pCallback As IMFAsyncCallback, ByVal punkState As IUnknown)
        Sub EndReadPayload(ByVal pResult As IMFAsyncResult, ByRef pqwOffset As LongLong, ByRef pcbRead As Long)
        Sub QueryHeader(ByVal szHeaderName As LongPtr, ByVal dwIndex As Long, ByRef ppszHeaderValue As LongPtr)
        Sub GetUrl(ByRef ppszURL As LongPtr)
        Sub HasNullSourceOrigin(ByRef pfNullSourceOrigin As BOOL)
        Sub GetTimeSeekResult(ByRef pqwStartTime As LongLong, ByRef pqwStopTime As LongLong, ByRef pqwDuration As LongLong)
        Sub GetHttpStatus(ByRef pdwHttpStatus As Long)
        Sub GetAtEndOfPayload(ByRef pfAtEndOfPayload As BOOL)
        Sub GetTotalLength(ByRef pqwTotalLength As LongLong)
        Sub GetRangeEndOffset(ByRef pqwRangeEnd As LongLong)
        Sub Close()
    End Interface

    [InterfaceId("71FA9A2C-53CE-4662-A132-1A7E8CBF62DB")]
    [OleAutomation(False)]
    Interface IMFHttpDownloadSession Extends stdole.IUnknown
        Sub SetServer(ByVal szServerName As String, ByVal nPort As Long)
        Function CreateRequest(ByVal szObjectName As String, ByVal fBypassProxyCache As BOOL, ByVal fSecure As BOOL, ByVal szVerb As String, ByVal szReferrer As String) As IMFHttpDownloadRequest
        Sub Close()
    End Interface

    [InterfaceId("1B4CF4B9-3A16-4115-839D-03CC5C99DF01")]
    [OleAutomation(False)]
    Interface IMFHttpDownloadSessionProvider Extends stdole.IUnknown
        Sub CreateHttpDownloadSession(ByVal wszScheme As LongPtr, ByRef ppDownloadSession As IMFHttpDownloadSession)
    End Interface

    [InterfaceId("FBB03414-D13B-4786-8319-5AC51FC0A136")]
    [OleAutomation(False)]
    Interface IMFMediaSource2 Extends IMFMediaSourceEx
        Sub SetMediaType(ByVal dwStreamId As Long, ByVal pMediaType As IMFMediaType)
    End Interface

    [InterfaceId("C5BC37D6-75C7-46A1-A132-81B5F723C20F")]
    [OleAutomation(False)]
    Interface IMFMediaStream2 Extends IMFMediaStream
        Sub SetStreamState(ByVal Value As MF_STREAM_STATE)
        Sub GetStreamState(ByRef Value As MF_STREAM_STATE)
    End Interface

    [InterfaceId("FB9F48F2-2A18-4E28-9730-786F30F04DC4")]
    [OleAutomation(False)]
    [Description("IMFSensorDevice Interface")]
    Interface IMFSensorDevice Extends stdole.IUnknown
        Sub GetDeviceId(ByRef pDeviceID As LongLong)
        Sub GetDeviceType(ByRef pType As MFSensorDeviceType)
        Sub GetFlags(ByRef pFlags As LongLong)
        Sub GetSymbolicLink(ByVal SymbolicLink As LongPtr, ByVal cchSymbolicLink As Long, ByRef pcchWritten As Long)
        Sub GetDeviceAttributes(ByRef ppAttributes As IMFAttributes)
        Sub GetStreamAttributesCount(ByVal eType As MFSensorStreamType, ByRef pdwCount As Long)
        Sub GetStreamAttributes(ByVal eType As MFSensorStreamType, ByVal dwIndex As Long, ByRef ppAttributes As IMFAttributes)
        Sub SetSensorDeviceMode(ByVal eMode As MFSensorDeviceMode)
        Sub GetSensorDeviceMode(ByRef peMode As MFSensorDeviceMode)
    End Interface

    [InterfaceId("4110243A-9757-461F-89F1-F22345BCAB4E")]
    [OleAutomation(False)]
    [Description("IMFSensorGroup Interface")]
    Interface IMFSensorGroup Extends stdole.IUnknown
        Sub GetSymbolicLink(ByVal SymbolicLink As LongPtr, ByVal cchSymbolicLink As Long, ByRef pcchWritten As Long)
        Sub GetFlags(ByRef pFlags As LongLong)
        Sub GetSensorGroupAttributes(ByRef ppAttributes As IMFAttributes)
        Sub GetSensorDeviceCount(ByRef pdwCount As Long)
        Sub GetSensorDevice(ByVal dwIndex As Long, ByRef ppDevice As IMFSensorDevice)
        Sub SetDefaultSensorDeviceIndex(ByVal dwIndex As Long)
        Sub GetDefaultSensorDeviceIndex(ByRef pdwIndex As Long)
        Sub CreateMediaSource(ByRef ppSource As IMFMediaSource)
    End Interface

    [InterfaceId("E9A42171-C56E-498A-8B39-EDA5A070B7FC")]
    [OleAutomation(False)]
    [Description("IMFSensorStream Interface")]
    Interface IMFSensorStream Extends IMFAttributes
        Sub GetMediaTypeCount(ByRef pdwCount As Long)
        Sub GetMediaType(ByVal dwIndex As Long, ByRef ppMediaType As IMFMediaType)
        Sub CloneSensorStream(ByRef ppStream As IMFSensorStream)
    End Interface

    [InterfaceId("EED9C2EE-66B4-4F18-A697-AC7D3960215C")]
    [OleAutomation(False)]
    [Description("IMFSensorTransformFactory Interface")]
    Interface IMFSensorTransformFactory Extends stdole.IUnknown
        Sub GetFactoryAttributes(ByRef ppAttributes As IMFAttributes)
        Sub InitializeFactory(ByVal dwMaxTransformCount As Long, ByVal pSensorDevices As IMFCollection, ByVal pAttributes As IMFAttributes)
        Sub GetTransformCount(ByRef pdwCount As Long)
        Sub GetTransformInformation(ByVal TransformIndex As Long, ByRef pguidTransformId As UUID, ByRef ppAttributes As IMFAttributes, ByRef ppStreamInformation As IMFCollection)
        Function CreateTransform(ByRef guidSensorTransformID As UUID, ByVal pAttributes As IMFAttributes) As IMFDeviceTransform
    End Interface

    [InterfaceId("22F765D1-8DAB-4107-846D-56BAF72215E7")]
    [OleAutomation(False)]
    [Description("IMFSensorProfile Interface")]
    Interface IMFSensorProfile Extends stdole.IUnknown
        Sub GetProfileId(ByRef pid As SENSORPROFILEID)
        Sub AddProfileFilter(ByVal StreamId As Long, ByVal wzFilterSetString As LongPtr)
        Sub IsMediaTypeSupported(ByVal StreamId As Long, ByVal pMediaType As IMFMediaType, ByRef pfSupported As BOOL)
        Sub AddBlockedControl(ByVal wzBlockedControl As LongPtr)
    End Interface

    [InterfaceId("C95EA55B-0187-48BE-9353-8D2507662351")]
    [OleAutomation(False)]
    [Description("IMFSensorProfileCollection Interface")]
    Interface IMFSensorProfileCollection Extends stdole.IUnknown
        [PreserveSig]
        Function GetProfileCount() As Long
        Sub GetProfile(ByVal index As Long, ByRef ppProfile As IMFSensorProfile)
        Sub AddProfile(ByVal pProfile As IMFSensorProfile)
        Sub FindProfile(ByRef ProfileId As SENSORPROFILEID, ByRef ppProfile As IMFSensorProfile)
        [PreserveSig]
        Sub RemoveProfileByIndex(ByVal index As Long)
        [PreserveSig]
        Sub RemoveProfile(ByRef ProfileId As SENSORPROFILEID)
    End Interface

    [InterfaceId("39DC7F4A-B141-4719-813C-A7F46162A2B8")]
    [OleAutomation(False)]
    [Description("IMFSensorProcessActivity Interface")]
    Interface IMFSensorProcessActivity Extends stdole.IUnknown
        Sub GetProcessId(ByRef ppid As Long)
        Sub GetStreamingState(ByRef pfStreaming As BOOL)
        Sub GetStreamingMode(ByRef pMode As MFSensorDeviceMode)
        Sub GetReportTime(ByRef pft As FILETIME)
    End Interface

    [InterfaceId("3E8C4BE1-A8C2-4528-90DE-2851BDE5FEAD")]
    [OleAutomation(False)]
    [Description("IMFSensorActivityReport  Interface")]
    Interface IMFSensorActivityReport Extends stdole.IUnknown
        Sub GetFriendlyName(ByVal FriendlyName As LongPtr, ByVal cchFriendlyName As Long, ByRef pcchWritten As Long)
        Sub GetSymbolicLink(ByVal SymbolicLink As LongPtr, ByVal cchSymbolicLink As Long, ByRef pcchWritten As Long)
        Sub GetProcessCount(ByRef pcCount As Long)
        Sub GetProcessActivity(ByVal index As Long, ByRef ppProcessActivity As IMFSensorProcessActivity)
    End Interface

    [InterfaceId("683F7A5E-4A19-43CD-B1A9-DBF4AB3F7777")]
    [OleAutomation(False)]
    [Description("IMFSensorActivitiesReport Interface")]
    Interface IMFSensorActivitiesReport Extends stdole.IUnknown
        Sub GetCount(ByRef pcCount As Long)
        Sub GetActivityReport(ByVal index As Long, ByRef sensorActivityReport As IMFSensorActivityReport)
        Sub GetActivityReportByDeviceName(ByVal SymbolicName As LongPtr, ByRef sensorActivityReport As IMFSensorActivityReport)
    End Interface

    [InterfaceId("DE5072EE-DBE3-46DC-8A87-B6F631194751")]
    [OleAutomation(False)]
    [Description("IMFSensorActivitiesReportCallback Interface")]
    Interface IMFSensorActivitiesReportCallback Extends stdole.IUnknown
        Sub OnActivitiesReport(ByVal sensorActivitiesReport As IMFSensorActivitiesReport)
    End Interface

    [InterfaceId("D0CEF145-B3F4-4340-A2E5-7A5080CA05CB")]
    [OleAutomation(False)]
    [Description("IMFSensorActivityMonitor Interface")]
    Interface IMFSensorActivityMonitor Extends stdole.IUnknown
        Sub Start()
        Sub Stop()
    End Interface

    [InterfaceId("5C595E64-4630-4231-855A-12842F733245")]
    [OleAutomation(False)]
    Interface IMFExtendedCameraIntrinsicModel Extends stdole.IUnknown
        Sub GetModel(ByRef pIntrinsicModel As MFExtendedCameraIntrinsic_IntrinsicModel)
        Sub SetModel(ByRef pIntrinsicModel As MFExtendedCameraIntrinsic_IntrinsicModel)
        Sub GetDistortionModelType(ByRef pDistortionModelType As MFCameraIntrinsic_DistortionModelType)
    End Interface

    [InterfaceId("74C2653B-5F55-4EB1-9F0F-18B8F68B7D3D")]
    [OleAutomation(False)]
    Interface IMFExtendedCameraIntrinsicsDistortionModel6KT Extends stdole.IUnknown
        Sub GetDistortionModel(ByRef pDistortionModel As MFCameraIntrinsic_DistortionModel6KT)
        Sub SetDistortionModel(ByRef pDistortionModel As MFCameraIntrinsic_DistortionModel6KT)
    End Interface

    [InterfaceId("812D5F95-B572-45DC-BAFC-AE24199DDDA8")]
    [OleAutomation(False)]
    Interface IMFExtendedCameraIntrinsicsDistortionModelArcTan Extends stdole.IUnknown
        Sub GetDistortionModel(ByRef pDistortionModel As MFCameraIntrinsic_DistortionModelArcTan)
        Sub SetDistortionModel(ByRef pDistortionModel As MFCameraIntrinsic_DistortionModelArcTan)
    End Interface

    [InterfaceId("687F6DAC-6987-4750-A16A-734D1E7A10FE")]
    [OleAutomation(False)]
    Interface IMFExtendedCameraIntrinsics Extends stdole.IUnknown
        Sub InitializeFromBuffer(ByRef pbBuffer As Byte, ByVal dwBufferSize As Long)
        Sub GetBufferSize(ByRef pdwBufferSize As Long)
        Sub SerializeToBuffer(ByRef pbBuffer As Byte, ByRef pdwBufferSize As Long)
        Sub GetIntrinsicModelCount(ByRef pdwCount As Long)
        Sub GetIntrinsicModelByIndex(ByVal dwIndex As Long, ByRef ppIntrinsicModel As IMFExtendedCameraIntrinsicModel)
        Sub AddIntrinsicModel(ByVal pIntrinsicModel As IMFExtendedCameraIntrinsicModel)
    End Interface

    [InterfaceId("38E33520-FCA1-4845-A27A-68B7C6AB3789")]
    [OleAutomation(False)]
    [Description("IMFExtendedCameraControl Interface")]
    Interface IMFExtendedCameraControl Extends stdole.IUnknown
        [PreserveSig]
        Function GetCapabilities() As LongLong
        Sub SetFlags(ByVal ulFlags As LongLong)
        [PreserveSig]
        Function GetFlags() As LongLong
        Sub LockPayload(ByRef ppPayload As LongPtr, ByRef pulPayload As Long)
        Sub UnlockPayload()
        Sub CommitSettings()
    End Interface

    [InterfaceId("B91EBFEE-CA03-4AF4-8A82-A31752F4A0FC")]
    [OleAutomation(False)]
    [Description("IMFExtendedCameraController Interface")]
    Interface IMFExtendedCameraController Extends stdole.IUnknown
        Sub GetExtendedCameraControl(ByVal dwStreamIndex As Long, ByVal ulPropertyId As Long, ByRef ppControl As IMFExtendedCameraControl)
    End Interface

    [InterfaceId("F25362EA-2C0E-447F-81E2-755914CDC0C3")]
    [OleAutomation(False)]
    [Description("IMFRelativePanelReport Interface")]
    Interface IMFRelativePanelReport Extends stdole.IUnknown
        Sub GetRelativePanel(ByRef panel As Long)
    End Interface

    [InterfaceId("421AF7F6-573E-4AD0-8FDA-2E57CEDB18C6")]
    [OleAutomation(False)]
    [Description("IMFRelativePanelWatcher Interface")]
    Interface IMFRelativePanelWatcher Extends IMFShutdown
        Sub BeginGetReport(ByVal pCallback As IMFAsyncCallback, ByVal pState As IUnknown)
        Sub EndGetReport(ByVal pResult As IMFAsyncResult, ByRef ppRelativePanelReport As IMFRelativePanelReport)
        Sub GetReport(ByRef ppRelativePanelReport As IMFRelativePanelReport)
    End Interface
    [InterfaceId("725B77C7-CA9F-4FE5-9D72-9946BF9B3C70")]
    [OleAutomation(False)]
    [Description("IMFVideoCaptureSampleAllocator Interface")]
    Interface IMFVideoCaptureSampleAllocator Extends IMFVideoSampleAllocator
        Sub InitializeCaptureSampleAllocator(ByVal cbSampleSize As Long, ByVal cbCaptureMetadataSize As Long, ByVal cbAlignment As Long, ByVal cMinimumSamples As Long, ByVal pAttributes As IMFAttributes, ByVal pMediaType As IMFMediaType)
    End Interface

    [InterfaceId("DA62B958-3A38-4A97-BD27-149C640C0771")]
    [OleAutomation(False)]
    [Description("IMFSampleAllocatorControl Interface")]
    Interface IMFSampleAllocatorControl Extends stdole.IUnknown
        Sub SetDefaultAllocator(ByVal dwOutputStreamID As Long, ByVal pAllocator As IUnknown)
        Sub GetAllocatorUsage(ByVal dwOutputStreamID As Long, ByRef pdwInputStreamID As Long, ByRef peUsage As MFSampleAllocatorUsage)
    End Interface

    [InterfaceId("1640B2CF-74DA-4462-A43B-B76D3BDC1434")]
    [OleAutomation(False)]
    [Description("IMFCameraOcclusionStateReport Interface")]
    Interface IMFCameraOcclusionStateReport Extends stdole.IUnknown
        Sub GetOcclusionState(ByRef occlusionState As Long)
    End Interface

    [InterfaceId("6E5841C7-3889-4019-9035-783FB19B5948")]
    [OleAutomation(False)]
    [Description("IMFCameraOcclusionStateReportCallback Interface")]
    Interface IMFCameraOcclusionStateReportCallback Extends stdole.IUnknown
        Sub OnOcclusionStateReport(ByVal occlusionStateReport As IMFCameraOcclusionStateReport)
    End Interface

    [InterfaceId("CC692F46-C697-47E2-A72D-7B064617749B")]
    [OleAutomation(False)]
    [Description("IMFCameraOcclusionStateMonitor Interface")]
    Interface IMFCameraOcclusionStateMonitor Extends stdole.IUnknown
        Sub Start()
        Sub Stop()
        [PreserveSig]
        Function GetSupportedStates() As Long
    End Interface

    [InterfaceId("E8F2540D-558A-4449-8B64-4863467A9FE8")]
    [OleAutomation(False)]
    [Description("IMFCameraControlNotify Interface")]
    Interface IMFCameraControlNotify Extends stdole.IUnknown
        [PreserveSig]
        Sub OnChange(ByRef controlSet As UUID, ByVal id As Long)
        [PreserveSig]
        Sub OnError(ByVal hrStatus As Long /* HRESULT */)
    End Interface

    [InterfaceId("4D46F2C9-28BA-4970-8C7B-1F0C9D80AF69")]
    [OleAutomation(False)]
    [Description("IMFCameraControlMonitor Interface")]
    Interface IMFCameraControlMonitor Extends stdole.IUnknown
        Sub Start()
        Sub Stop()
        #If Win64 Then
        Sub AddControlSubscription(ByRef controlSet As UUID, ByVal id As Long)
        Sub RemoveControlSubscription(ByRef controlSet As UUID, ByVal id As Long)
        #Else
        Sub AddControlSubscription(ByVal controlSet1 As Long, ByVal controlSet2 As Long, ByVal controlSet3 As Long, ByVal controlSet4 As Long, ByVal id As Long)
        Sub RemoveControlSubscription(ByVal controlSet1 As Long, ByVal controlSet2 As Long, ByVal controlSet3 As Long, ByVal controlSet4 As Long, ByVal id As Long)
        #End If
        [PreserveSig]
        Sub Shutdown()
    End Interface

    [InterfaceId("75510662-B034-48F4-88A7-8DE61DAA4AF9")]
    [OleAutomation(False)]
    [Description("IMFCameraControlDefaults Interface")]
    Interface IMFCameraControlDefaults Extends stdole.IUnknown
        [PreserveSig]
        Function GetType() As MF_CAMERA_CONTROL_CONFIGURATION_TYPE
        Sub GetRangeInfo(ByRef rangeInfo As MF_CAMERA_CONTROL_RANGE_INFO)
        Sub LockControlData(ByRef control As Any, ByRef controlSize As Long, ByRef data As Any, ByRef dataSize As Long)
        Sub UnlockControlData()
    End Interface

    [InterfaceId("92D43D0F-54A8-4BAE-96DA-356D259A5C26")]
    [OleAutomation(False)]
    [Description("IMFCameraControlDefaultsCollection Interface")]
    Interface IMFCameraControlDefaultsCollection Extends IMFAttributes
        [PreserveSig]
        Function GetControlCount() As Long
        Sub GetControl(ByVal index As Long, ByRef configuration As IMFCameraControlDefaults)
        Sub GetOrAddExtendedControl(ByVal configType As MF_CAMERA_CONTROL_CONFIGURATION_TYPE, ByVal constrolId As Long, ByVal StreamId As Long, ByVal dataSize As Long, ByRef defaults As IMFCameraControlDefaults)
        Sub GetOrAddControl(ByVal configType As MF_CAMERA_CONTROL_CONFIGURATION_TYPE, ByRef controlSet As UUID, ByVal constrolId As Long, ByVal controlSize As Long, ByVal dataSize As Long, ByRef defaults As IMFCameraControlDefaults)
        Sub RemoveControl(ByRef controlSet As UUID, ByVal constrolId As Long)
        Sub RemoveAllControls()
    End Interface

    [InterfaceId("A624F617-4704-4206-8A6D-EBDA4A093985")]
    [OleAutomation(False)]
    [Description("IMFCameraConfigurationManager Interface")]
    Interface IMFCameraConfigurationManager Extends stdole.IUnknown
        Sub LoadDefaults(ByVal cameraAttributes As IMFAttributes, ByRef configurations As IMFCameraControlDefaultsCollection)
        Sub SaveDefaults(ByVal configurations As IMFCameraControlDefaultsCollection)
        [PreserveSig]
        Sub Shutdown()
    End Interface

    [InterfaceId("0BFD1ADE-0421-4909-ACB7-7A7125416881")]
    Interface IMFFaceDetectionTransformCallback Extends IUnknown
        Sub OnFaceDetectionResult(ByVal countOfBounds As Long, detectedFaceBounds As DetectedFaceBound)
    End Interface

    [InterfaceId("DDD59578-D0E7-46E2-BE8C-1CE76AD147C0")]
    Interface IMFFaceDetectionTransform Extends IUnknown
        Sub SetDetectionCallback(ByVal callback As IMFFaceDetectionTransformCallback, callbackToken As LongPtr)
        Sub ClearDetectionCallback(ByVal callbackToken As LongPtr)
    End Interface
    
    
    [InterfaceId("B1DCA5CD-D5DA-4451-8E9E-DB5C59914EAD")]
    [OleAutomation(False)]
    Interface IMFASFContentInfo Extends stdole.IUnknown
        Sub GetHeaderSize(ByVal pIStartOfContent As IMFMediaBuffer, ByRef cbHeaderSize As LongLong)
        Sub ParseHeader(ByVal pIHeaderBuffer As IMFMediaBuffer, ByVal cbOffsetWithinHeader As LongLong)
        Sub GenerateHeader(ByVal pIHeader As IMFMediaBuffer, ByRef pcbHeader As Long)
        Sub GetProfile(ByRef ppIProfile As IMFASFProfile)
        Sub SetProfile(ByVal pIProfile As IMFASFProfile)
        Sub GeneratePresentationDescriptor(ByRef ppIPresentationDescriptor As IMFPresentationDescriptor)
        Sub GetEncodingConfigurationPropertyStore(ByVal wStreamNumber As Integer, ByRef ppIStore As IPropertyStore)
    End Interface

    [InterfaceId("D267BF6A-028B-4E0D-903D-43F0EF82D0D4")]
    [OleAutomation(False)]
    Interface IMFASFProfile Extends IMFAttributes
        Sub GetStreamCount(ByRef pcStreams As Long)
        Sub GetStream(ByVal dwStreamIndex As Long, ByRef pwStreamNumber As Integer, ByRef ppIStream As IMFASFStreamConfig)
        Sub GetStreamByNumber(ByVal wStreamNumber As Integer, ByRef ppIStream As IMFASFStreamConfig)
        Sub SetStream(ByVal pIStream As IMFASFStreamConfig)
        Sub RemoveStream(ByVal wStreamNumber As Integer)
        Sub CreateStream(ByVal pIMediaType As IMFMediaType, ByRef ppIStream As IMFASFStreamConfig)
        Sub GetMutualExclusionCount(ByRef pcMutexs As Long)
        Sub GetMutualExclusion(ByVal dwMutexIndex As Long, ByRef ppIMutex As IMFASFMutualExclusion)
        Sub AddMutualExclusion(ByVal pIMutex As IMFASFMutualExclusion)
        Sub RemoveMutualExclusion(ByVal dwMutexIndex As Long)
        Sub CreateMutualExclusion(ByRef ppIMutex As IMFASFMutualExclusion)
        Sub GetStreamPrioritization(ByRef ppIStreamPrioritization As IMFASFStreamPrioritization)
        Sub AddStreamPrioritization(ByVal pIStreamPrioritization As IMFASFStreamPrioritization)
        Sub RemoveStreamPrioritization()
        Sub CreateStreamPrioritization(ByRef ppIStreamPrioritization As IMFASFStreamPrioritization)
        Sub Clone(ByRef ppIProfile As IMFASFProfile)
    End Interface

    [InterfaceId("9E8AE8D2-DBBD-4200-9ACA-06E6DF484913")]
    [OleAutomation(False)]
    Interface IMFASFStreamConfig Extends IMFAttributes
        Sub GetStreamType(ByRef pguidStreamType As UUID)
        [PreserveSig]
        Function GetStreamNumber() As Integer
        Sub SetStreamNumber(ByVal wStreamNum As Integer)
        Sub GetMediaType(ByRef ppIMediaType As IMFMediaType)
        Sub SetMediaType(ByVal pIMediaType As IMFMediaType)
        Sub GetPayloadExtensionCount(ByRef pcPayloadExtensions As Integer)
        Sub GetPayloadExtension(ByVal wPayloadExtensionNumber As Integer, ByRef pguidExtensionSystemID As UUID, ByRef pcbExtensionDataSize As Integer, ByRef pbExtensionSystemInfo As Any, Optional ByRef pcbExtensionSystemInfo As Long = 0)
        Sub AddPayloadExtension(ByVal guidExtensionSystemID1 As Long, ByVal guidExtensionSystemID2 As Long, ByVal guidExtensionSystemID3 As Long, ByVal guidExtensionSystemID4 As Long, ByVal cbExtensionDataSize As Integer, ByRef pbExtensionSystemInfo As Any, ByVal cbExtensionSystemInfo As Long)
        Sub RemoveAllPayloadExtensions()
        Sub Clone(ByRef ppIStreamConfig As IMFASFStreamConfig)
    End Interface

    [InterfaceId("12558291-E399-11D5-BC2A-00B0D0F3F4AB")]
    [OleAutomation(False)]
    Interface IMFASFMutualExclusion Extends stdole.IUnknown
        Sub GetType(ByRef pguidType As UUID)
        Sub SetType(ByRef guidType As UUID)
        Sub GetRecordCount(ByRef pdwRecordCount As Long)
        Sub GetStreamsForRecord(ByVal dwRecordNumber As Long, ByRef pwStreamNumArray As Integer, ByRef pcStreams As Long)
        Sub AddStreamForRecord(ByVal dwRecordNumber As Long, ByVal wStreamNumber As Integer)
        Sub RemoveStreamFromRecord(ByVal dwRecordNumber As Long, ByVal wStreamNumber As Integer)
        Sub RemoveRecord(ByVal dwRecordNumber As Long)
        Sub AddRecord(ByRef pdwRecordNumber As Long)
        Sub Clone(ByRef ppIMutex As IMFASFMutualExclusion)
    End Interface

    [InterfaceId("699BDC27-BBAF-49FF-8E38-9C39C9B5E088")]
    [OleAutomation(False)]
    Interface IMFASFStreamPrioritization Extends stdole.IUnknown
        Sub GetStreamCount(ByRef pdwStreamCount As Long)
        Sub GetStream(ByVal dwStreamIndex As Long, ByRef pwStreamNumber As Integer, ByRef pwStreamFlags As Integer)
        Sub AddStream(ByVal wStreamNumber As Integer, ByVal wStreamFlags As Integer)
        Sub RemoveStream(ByVal dwStreamIndex As Long)
        Sub Clone(ByRef ppIStreamPrioritization As IMFASFStreamPrioritization)
    End Interface

    [InterfaceId("53590F48-DC3B-4297-813F-787761AD7B3E")]
    [OleAutomation(False)]
    Interface IMFASFIndexer Extends stdole.IUnknown
        Sub SetFlags(ByVal dwFlags As Long)
        Sub GetFlags(ByRef pdwFlags As Long)
        Sub Initialize(ByVal pIContentInfo As IMFASFContentInfo)
        Sub GetIndexPosition(ByVal pIContentInfo As IMFASFContentInfo, ByRef pcbIndexOffset As LongLong)
        Sub SetIndexByteStreams(ByRef ppIByteStreams As IMFByteStream, ByVal cByteStreams As Long)
        Sub GetIndexByteStreamCount(ByRef pcByteStreams As Long)
        Sub GetIndexStatus(ByRef pIndexIdentifier As ASF_INDEX_IDENTIFIER, ByRef pfIsIndexed As BOOL, ByRef pbIndexDescriptor As Byte, ByRef pcbIndexDescriptor As Long)
        Sub SetIndexStatus(ByRef pbIndexDescriptor As Byte, ByVal cbIndexDescriptor As Long, ByVal fGenerateIndex As BOOL)
        Sub GetSeekPositionForValue(ByRef pvarValue As Variant, ByRef pIndexIdentifier As ASF_INDEX_IDENTIFIER, ByRef pcbOffsetWithinData As LongLong, Optional ByRef phnsApproxTime As LongLong = 0, Optional ByRef pdwPayloadNumberOfStreamWithinPacket As Long = 0)
        Sub GenerateIndexEntries(ByVal pIASFPacketSample As IMFSample)
        Sub CommitIndex(ByVal pIContentInfo As IMFASFContentInfo)
        Sub GetIndexWriteSpace(ByRef pcbIndexWriteSpace As LongLong)
        Sub GetCompletedIndex(ByVal pIIndexBuffer As IMFMediaBuffer, ByVal cbOffsetWithinIndex As LongLong)
    End Interface

    [InterfaceId("12558295-E399-11D5-BC2A-00B0D0F3F4AB")]
    [OleAutomation(False)]
    Interface IMFASFSplitter Extends stdole.IUnknown
        Sub Initialize(ByVal pIContentInfo As IMFASFContentInfo)
        Sub SetFlags(ByVal dwFlags As Long)
        Sub GetFlags(ByRef pdwFlags As Long)
        Sub SelectStreams(ByRef pwStreamNumbers As Integer, ByVal wNumStreams As Integer)
        Sub GetSelectedStreams(ByRef pwStreamNumbers As Integer, ByRef pwNumStreams As Integer)
        Sub ParseData(ByVal pIBuffer As IMFMediaBuffer, ByVal cbBufferOffset As Long, ByVal cbLength As Long)
        Sub GetNextSample(ByRef pdwStatusFlags As Long, ByRef pwStreamNumber As Integer, ByRef ppISample As IMFSample)
        Sub Flush()
        Sub GetLastSendTime(ByRef pdwLastSendTime As Long)
    End Interface

    [InterfaceId("57BDD80A-9B38-4838-B737-C58F670D7D4F")]
    [OleAutomation(False)]
    Interface IMFASFMultiplexer Extends stdole.IUnknown
        Sub Initialize(ByVal pIContentInfo As IMFASFContentInfo)
        Sub SetFlags(ByVal dwFlags As Long)
        Sub GetFlags(ByRef pdwFlags As Long)
        Sub ProcessSample(ByVal wStreamNumber As Integer, ByVal pISample As IMFSample, ByVal hnsTimestampAdjust As LongLong)
        Sub GetNextPacket(ByRef pdwStatusFlags As Long, ByRef ppIPacket As IMFSample)
        Sub Flush()
        Sub end(ByVal pIContentInfo As IMFASFContentInfo)
        Sub GetStatistics(ByVal wStreamNumber As Integer, ByRef pMuxStats As ASF_MUX_STATISTICS)
        Sub SetSyncTolerance(ByVal msSyncTolerance As Long)
    End Interface

    [InterfaceId("D01BAD4A-4FA0-4A60-9349-C27E62DA9D41")]
    [OleAutomation(False)]
    Interface IMFASFStreamSelector Extends stdole.IUnknown
        Sub GetStreamCount(ByRef pcStreams As Long)
        Sub GetOutputCount(ByRef pcOutputs As Long)
        Sub GetOutputStreamCount(ByVal dwOutputNum As Long, ByRef pcStreams As Long)
        Sub GetOutputStreamNumbers(ByVal dwOutputNum As Long, ByRef rgwStreamNumbers As Integer)
        Sub GetOutputFromStream(ByVal wStreamNum As Integer, ByRef pdwOutput As Long)
        Sub GetOutputOverride(ByVal dwOutputNum As Long, ByRef pSelection As ASF_SELECTION_STATUS)
        Sub SetOutputOverride(ByVal dwOutputNum As Long, ByVal Selection As ASF_SELECTION_STATUS)
        Sub GetOutputMutexCount(ByVal dwOutputNum As Long, ByRef pcMutexes As Long)
        Sub GetOutputMutex(ByVal dwOutputNum As Long, ByVal dwMutexNum As Long, ByRef ppMutex As IUnknown)
        Sub SetOutputMutexSelection(ByVal dwOutputNum As Long, ByVal dwMutexNum As Long, ByVal wSelectedRecord As Integer)
        Sub GetBandwidthStepCount(ByRef pcStepCount As Long)
        Sub GetBandwidthStep(ByVal dwStepNum As Long, ByRef pdwBitrate As Long, ByRef rgwStreamNumbers As Integer, ByRef rgSelections As ASF_SELECTION_STATUS)
        Sub BitrateToStepNumber(ByVal dwBitrate As Long, ByRef pdwStepNum As Long)
        Sub SetStreamSelectorFlags(ByVal dwStreamSelectorFlags As Long)
    End Interface

    [InterfaceId("3D1FF0EA-679A-4190-8D46-7FA69E8C7E15")]
    [OleAutomation(False)]
    Interface IMFDRMNetHelper Extends stdole.IUnknown
        Sub ProcessLicenseRequest(ByRef pLicenseRequest As Any, ByVal cbLicenseRequest As Long, ByRef ppLicenseResponse As LongPtr, ByRef pcbLicenseResponse As Long, ByRef pbstrKID As String)
        Sub GetChainedLicenseResponse(ByRef ppLicenseResponse As LongPtr, ByRef pcbLicenseResponse As Long)
    End Interface
    
    
    
    
    
    
    [InterfaceId("0A15159D-41C7-4456-93E1-284CD61D4E8D")]
    [OleAutomation(False)]
    Interface IOPMVideoOutput Extends IUnknown
        Sub StartInitialization(ByRef prnRandomNumber As OPM_RANDOM_NUMBER, ByRef ppbCertificate As LongPtr, ByRef pulCertificateLength As Long)
        Sub FinishInitialization(ByRef pParameters As OPM_ENCRYPTED_INITIALIZATION_PARAMETERS)
        Sub GetInformation(ByRef pParameters As OPM_GET_INFO_PARAMETERS, ByRef pRequestedInformation As OPM_REQUESTED_INFORMATION)
        Sub COPPCompatibleGetInformation(ByRef pParameters As OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS, ByRef pRequestedInformation As OPM_REQUESTED_INFORMATION)
        Sub Configure(ByRef pParameters As OPM_CONFIGURE_PARAMETERS, ByVal ulAdditionalParametersSize As Long, ByRef pbAdditionalParameters As Any)
    End Interface
    
    
    
    'vmr.idl
    
    [InterfaceId("69188c61-12a3-40f0-8ffc-342e7b433fd7")]
    [Description("IVMRImagePresenter9 Interface")]
    [OleAutomation(False)]
    Interface IVMRImagePresenter9 Extends IUnknown
        Sub StartPresenting(ByVal dwUserID As LongPtr)
        Sub StopPresenting(ByVal dwUserID As LongPtr)
        Sub PresentImage(ByVal dwUserID As LongPtr, ByRef lpPresInfo As VMR9PresentationInfo)
    End Interface

    [InterfaceId("8d5148ea-3f5d-46cf-9df1-d1b896eedb1f")]
    [Description("IVMRSurfaceAllocator9 Interface")]
    [OleAutomation(False)]
    Interface IVMRSurfaceAllocator9 Extends IUnknown
        Sub InitializeDevice(ByVal dwUserID As LongPtr, ByRef lpAllocInfo As VMR9AllocationInfo, ByRef lpNumBuffers As Long)
        Sub TerminateDevice(ByVal dwID As LongPtr)
        Sub GetSurface(ByVal dwUserID As LongPtr, ByVal SurfaceIndex As Long, ByVal SurfaceFlags As Long, ByRef lplpSurface As IDirect3DSurface9)
        Sub AdviseNotify(ByVal lpIVMRSurfAllocNotify As IVMRSurfaceAllocatorNotify9)
    End Interface

    [InterfaceId("6de9a68a-a928-4522-bf57-655ae3866456")]
    [Description("IVMRSurfaceAllocatorEx9 Interface")]
    [OleAutomation(False)]
    Interface IVMRSurfaceAllocatorEx9 Extends IVMRSurfaceAllocator9
        Sub GetSurfaceEx(ByVal dwUserID As LongPtr, ByVal SurfaceIndex As Long, ByVal SurfaceFlags As Long, ByRef lplpSurface As IDirect3DSurface9, ByRef lprcDst As RECT)
    End Interface

    [InterfaceId("dca3f5df-bb3a-4d03-bd81-84614bfbfa0c")]
    [Description("IVMRSurfaceAllocatorNotify9 Interface")]
    [OleAutomation(False)]
    Interface IVMRSurfaceAllocatorNotify9 Extends IUnknown
        Sub AdviseSurfaceAllocator(ByVal dwUserID As LongPtr, ByVal lpIVRMSurfaceAllocator As IVMRSurfaceAllocator9)
        Sub SetD3DDevice(ByVal lpD3DDevice As IDirect3DDevice9, ByVal hMonitor As LongPtr)
        Sub ChangeD3DDevice(ByVal lpD3DDevice As IDirect3DDevice9, ByVal hMonitor As LongPtr)
        Sub AllocateSurfaceHelper(ByRef lpAllocInfo As VMR9AllocationInfo, ByRef lpNumBuffers As Long, ByRef lplpSurface As IDirect3DSurface9)
        Sub NotifyEvent(ByVal EventCode As Long, ByVal Param1 As LongPtr, ByVal Param2 As LongPtr)
    End Interface

    [InterfaceId("8f537d09-f85e-4414-b23b-502e54c79927")]
    [Description("IVMRWindowlessControl Interface")]
    [OleAutomation(False)]
    Interface IVMRWindowlessControl9 Extends IUnknown
        Sub GetNativeVideoSize(ByRef lpWidth As Long, ByRef lpHeight As Long, ByRef lpARWidth As Long, ByRef lpARHeight As Long)
        Sub GetMinIdealVideoSize(ByRef lpWidth As Long, ByRef lpHeight As Long)
        Sub GetMaxIdealVideoSize(ByRef lpWidth As Long, ByRef lpHeight As Long)
        Sub SetVideoPosition(ByRef lpSRCRect As RECT, ByRef lpDSTRect As RECT)
        Sub GetVideoPosition(ByRef lpSRCRect As RECT, ByRef lpDSTRect As RECT)
        Sub GetAspectRatioMode(ByRef lpAspectRatioMode As VMR9AspectRatioMode)
        Sub SetAspectRatioMode(ByVal AspectRatioMode As VMR9AspectRatioMode)
        Sub SetVideoClippingWindow(ByVal hwnd As LongPtr)
        Sub RepaintVideo(ByVal hwnd As LongPtr, ByVal hdc As LongPtr)
        Sub DisplayModeChanged()
        Sub GetCurrentImage(ByRef lpDib As LongPtr)
        Sub SetBorderColor(ByVal Clr As Long)
        Sub GetBorderColor(ByRef lpClr As Long)
    End Interface
    
    [InterfaceId("1a777eaa-47c8-4930-b2c9-8fee1c1b0f3b")]
    [Description("IVMRMixerControl9 Interface")]
    [OleAutomation(False)]
    Interface IVMRMixerControl9 Extends IUnknown
        Sub SetAlpha(ByVal dwStreamID As Long, ByVal Alpha As Single)
        Sub GetAlpha(ByVal dwStreamID As Long, ByRef pAlpha As Single)
        Sub SetZOrder(ByVal dwStreamID As Long, ByVal dwZ As Long)
        Sub GetZOrder(ByVal dwStreamID As Long, ByRef pZ As Long)
        Sub SetOutputRect(ByVal dwStreamID As Long, ByRef pRect As VMR9NormalizedRect)
        Sub GetOutputRect(ByVal dwStreamID As Long, ByRef pRect As VMR9NormalizedRect)
        Sub SetBackgroundClr(ByVal ClrBkg As Long)
        Sub GetBackgroundClr(ByRef lpClrBkg As Long)
        Sub SetMixingPrefs(ByVal dwMixerPrefs As Long)
        Sub GetMixingPrefs(ByRef pdwMixerPrefs As Long)
        Sub SetProcAmpControl(ByVal dwStreamID As Long, ByRef lpClrControl As VMR9ProcAmpControl)
        Sub GetProcAmpControl(ByVal dwStreamID As Long, ByRef lpClrControl As VMR9ProcAmpControl)
        Sub GetProcAmpControlRange(ByVal dwStreamID As Long, ByRef lpClrControl As VMR9ProcAmpControlRange)
    End Interface

    [InterfaceId("ced175e5-1935-4820-81bd-ff6ad00c9108")]
    [Description("IVMRMixerBitmap Interface")]
    [OleAutomation(False)]
    Interface IVMRMixerBitmap9 Extends IUnknown
        Sub SetAlphaBitmap(ByRef pBmpParms As VMR9AlphaBitmap)
        Sub UpdateAlphaBitmapParameters(ByRef pBmpParms As VMR9AlphaBitmap)
        Sub GetAlphaBitmapParameters(ByRef pBmpParms As VMR9AlphaBitmap)
    End Interface

    [InterfaceId("dfc581a1-6e1f-4c3a-8d0a-5e9792ea2afc")]
    [Description("IVMRSurface Interface")]
    [OleAutomation(False)]
    Interface IVMRSurface9 Extends IUnknown
        [PreserveSig] Function IsSurfaceLocked() As Long
        Sub LockSurface(ByRef lpSurface As LongPtr)
        Sub UnlockSurface()
        Sub GetSurface(ByRef lplpSurface As IDirect3DSurface9)
    End Interface

    [InterfaceId("45c15cab-6e22-420a-8043-ae1f0ac02c7d")]
    [Description("IVMRImagePresenterConfig9 Interface")]
    [OleAutomation(False)]
    Interface IVMRImagePresenterConfig9 Extends IUnknown
        Sub SetRenderingPrefs(ByVal dwRenderFlags As VMR9RenderPrefs)
        Sub GetRenderingPrefs(ByRef dwRenderFlags As VMR9RenderPrefs)
    End Interface

    [InterfaceId("d0cfe38b-93e7-4772-8957-0400c49a4485")]
    [Description("IVMRMixerStreamConfig Interface")]
    [OleAutomation(False)]
    Interface IVMRVideoStreamControl9 Extends IUnknown
        Sub SetStreamActiveState(ByVal fActive As BOOL)
        Sub GetStreamActiveState(ByRef lpfActive As BOOL)
    End Interface

    [InterfaceId("5a804648-4f66-4867-9c43-4f5c822cf1b8")]
    [Description("IVMRFilterConfig9 Interface")]
    [OleAutomation(False)]
    Interface IVMRFilterConfig9 Extends IUnknown
        Sub SetImageCompositor(ByVal lpVMRImgCompositor As IVMRImageCompositor9)
        Sub SetNumberOfStreams(ByVal dwMaxStreams As Long)
        Sub GetNumberOfStreams(ByRef pdwMaxStreams As Long)
        Sub SetRenderingPrefs(ByVal dwRenderFlags As VMR9RenderPrefs)
        Sub GetRenderingPrefs(ByRef pdwRenderFlags As VMR9RenderPrefs)
        Sub SetRenderingMode(ByVal Mode As VMR9Mode)
        Sub GetRenderingMode(ByRef pMode As VMR9Mode)
    End Interface

    [InterfaceId("00d96c29-bbde-4efc-9901-bb5036392146")]
    [Description("IVMRAspectRatioControl9 Interface")]
    [OleAutomation(False)]
    Interface IVMRAspectRatioControl9 Extends IUnknown
        Sub GetAspectRatioMode(ByRef lpdwARMode As VMR_ASPECT_RATIO_MODE)
        Sub SetAspectRatioMode(ByVal dwARMode As VMR_ASPECT_RATIO_MODE)
    End Interface
    
    [InterfaceId("46c2e457-8ba0-4eef-b80b-0680f0978749")]
    [Description("IVMRMonitorConfig9 Interface")]
    [OleAutomation(False)]
    Interface IVMRMonitorConfig9 Extends IUnknown
        [Description("Use this method on a Multi-Monitor system to specify to the mixer filter which Direct Draw driver should be used when connecting to an upstream decoder filter.")]
        Sub SetMonitor(ByVal uDev As Long)
        [Description("Use this method to determine the direct draw object that will be used when connecting the mixer filter to an upstream decoder filter.")]
        Sub GetMonitor(ByRef puDev As Long)
        [Description("Use this method on a multi-monitor system to specify to the mixer filter the default Direct Draw device to use when connecting to an upstream filter. The default direct draw device can be overriden for a particular connection by SetMonitor method described above.")]
        Sub SetDefaultMonitor(ByVal uDev As Long)
        [Description("Use this method on a multi-monitor system to determine which is the default direct draw device the overlay mixer filter will use when connecting to an upstream filter.")]
        Sub GetDefaultMonitor(ByRef puDev As Long)
        [Description("Use this method to get a list of Direct Draw device GUIDs and thier associated monitor information that the mixer can use when connecting to an upstream decoder filter. Passing down a NULL pInfo parameter allows the app to determine the required array size (returned in pdwNumDevices). Otherwise, dwNumDevices returns the actual number of devices retrieved.")]
        Sub GetAvailableMonitors(ByRef pInfo As VMR9MonitorInfo, ByVal dwMaxInfoArraySize As Long, ByRef pdwNumDevices As Long)
    End Interface
 
    [InterfaceId("a215fb8d-13c2-4f7f-993c-003d6271a459")]
    [Description("IVMRDeinterlaceControl9 Interface")]
    [OleAutomation(False)]
    Interface IVMRDeinterlaceControl9 Extends IUnknown
        [Description("For the specified video description returns the number of deinterlacing modes available to the VMR. The deinterlacing modes are returned in descending quality order ie. the best quality mode is at lpdwNumDeinterlaceModes[0], the next best at lpdwNumDeinterlaceModes[1] and so on. To determine how big an array of guids to pass to the GetNumberOfDeinterlaceModes method call GetNumberOfDeinterlaceModes(lpVideoDescription, &dwNumModes, NULL);")]
        Sub GetNumberOfDeinterlaceModes(ByRef lpVideoDescription As VMR9VideoDesc, ByRef lpdwNumDeinterlaceModes As Long, ByRef lpDeinterlaceModes As UUID)
        [Description("For the given video description get the capabilities of the specified de-interlace mode.")]
        Sub GetDeinterlaceModeCaps(ByRef lpDeinterlaceMode As UUID, ByRef lpVideoDescription As VMR9VideoDesc, ByRef lpDeinterlaceCaps As VMR9DeinterlaceCaps)
        [Description("Get the deinterlace mode that you would like the VMR to use when de-interlacing the specified stream. It should be noted that the VMR may not actually be able to use the requested deinterlace mode, in which case the the VMR will fall back to other de-interlace modes as specified by the de-interlace preferences.")]
        Sub GetDeinterlaceMode(ByVal dwStreamID As Long, ByRef lpDeinterlaceMode As UUID)
        [Description("Set the deinterlace mode that you would like the VMR to use when de-interlacing the specified stream. Use 0xFFFFFFFF to set mode for all streams. GUID_NULL == turn deinterlacing off")]
        Sub SetDeinterlaceMode(ByVal dwStreamID As Long, ByRef lpDeinterlaceMode As UUID)
        Sub GetDeinterlacePrefs(ByRef lpdwDeinterlacePrefs As VMR9DeinterlacePrefs)
        Sub SetDeinterlacePrefs(ByVal dwDeinterlacePrefs As VMR9DeinterlacePrefs)
        [Description("Get the DeinterlaceMode currently in use for the specified video stream (ie. pin). The returned GUID will be NULL if the de-interlacing h/w has not been created by the VMR at the time the function is called, or if the VMR determines that this stream should not or can be de-interlaced.")]
        Sub GetActualDeinterlaceMode(ByVal dwStreamID As Long, ByRef lpDeinterlaceMode As UUID)
    End Interface
 
    [InterfaceId("4a5c89eb-df51-4654-ac2a-e48e02bbabf6")]
    [Description("IVMRImageCompositor9 Interface")]
    [OleAutomation(False)]
    Interface IVMRImageCompositor9 Extends IUnknown
        Sub InitCompositionDevice(ByVal pD3DDevice As IUnknown)
        Sub TermCompositionDevice(ByVal pD3DDevice As IUnknown)
        Sub SetStreamMediaType(ByVal dwStrmID As Long, ByRef pmt As AM_MEDIA_TYPE, ByVal fTexture As BOOL)
        Sub CompositeImage(ByVal pD3DDevice As IUnknown, ByVal pddsRenderTarget As IDirect3DSurface9, ByRef pmtRenderTarget As AM_MEDIA_TYPE, ByVal rtStart As LongLong /* REFERENCE_TIME */, ByVal rtEnd As LongLong /* REFERENCE_TIME */, ByVal dwClrBkGnd As Long, ByRef pVideoStreamInfo As VMR9VideoStreamInfo, ByVal cStreams As Long)
    End Interface
    
    [InterfaceId("CE704FE7-E71E-41fb-BAA2-C4403E1182F5")]
    [Description("IVMRImagePresenter Interface")]
    [OleAutomation(False)]
    Interface IVMRImagePresenter Extends IUnknown
        Sub StartPresenting(ByVal dwUserID As LongPtr)
        Sub StopPresenting(ByVal dwUserID As LongPtr)
        Sub PresentImage(ByVal dwUserID As LongPtr, ByRef lpPresInfo As VMRPRESENTATIONINFO)
    End Interface

    [InterfaceId("31ce832e-4484-458b-8cca-f4d7e3db0b52")]
    [Description("IVMRSurfaceAllocator Interface")]
    [OleAutomation(False)]
    Interface IVMRSurfaceAllocator Extends IUnknown
        Sub AllocateSurface(ByVal dwUserID As LongPtr, ByRef lpAllocInfo As VMRALLOCATIONINFO, ByRef lpdwActualBuffers As Long, ByRef lplpSurface As IDirectDrawSurface7)
        Sub FreeSurface(ByVal dwID As LongPtr)
        Sub PrepareSurface(ByVal dwUserID As LongPtr, ByVal lpSurface As IDirectDrawSurface7, [TypeHint(AM_GBF_Flags)] ByVal dwSurfaceFlags As Long)
        Sub AdviseNotify(ByVal lpIVMRSurfAllocNotify As IVMRSurfaceAllocatorNotify)
    End Interface

    [InterfaceId("aada05a8-5a4e-4729-af0b-cea27aed51e2")]
    [Description("IVMRSurfaceAllocatorNotify Interface")]
    [OleAutomation(False)]
    Interface IVMRSurfaceAllocatorNotify Extends IUnknown
        Sub AdviseSurfaceAllocator(ByVal dwUserID As LongPtr, ByVal lpIVRMSurfaceAllocator As IVMRSurfaceAllocator)
        Sub SetDDrawDevice(ByVal lpDDrawDevice As IDirectDraw7, ByVal hMonitor As LongPtr)
        Sub ChangeDDrawDevice(ByVal lpDDrawDevice As IDirectDraw7, ByVal hMonitor As LongPtr)
        Sub RestoreDDrawSurfaces()
        Sub NotifyEvent(ByVal EventCode As Long, ByVal Param1 As LongPtr, ByVal Param2 As LongPtr)
        Sub SetBorderColor(ByVal clrBorder As Long)
    End Interface

    [InterfaceId("0eb1088c-4dcd-46f0-878f-39dae86a51b7")]
    [Description("IVMRWindowlessControl Interface")]
    [OleAutomation(False)]
    Interface IVMRWindowlessControl Extends stdole.IUnknown
        Sub GetNativeVideoSize(ByRef lpWidth As Long, ByRef lpHeight As Long, ByRef lpARWidth As Long, ByRef lpARHeight As Long)
        Sub GetMinIdealVideoSize(ByRef lpWidth As Long, ByRef lpHeight As Long)
        Sub GetMaxIdealVideoSize(ByRef lpWidth As Long, ByRef lpHeight As Long)
        Sub SetVideoPosition(ByRef lpSRCRect As RECT, ByRef lpDSTRect As RECT)
        Sub GetVideoPosition(ByRef lpSRCRect As RECT, ByRef lpDSTRect As RECT)
        Sub GetAspectRatioMode(ByRef lpAspectRatioMode As VMR_ASPECT_RATIO_MODE)
        Sub SetAspectRatioMode(ByVal AspectRatioMode As VMR_ASPECT_RATIO_MODE)
        Sub SetVideoClippingWindow(ByVal hwnd As LongPtr)
        Sub RepaintVideo(ByVal hwnd As LongPtr, ByVal hdc As LongPtr)
        Sub DisplayModeChanged()
        Sub GetCurrentImage(ByRef lpDib As LongPtr)
        Sub SetBorderColor(ByVal Clr As Long)
        Sub GetBorderColor(ByRef lpClr As Long)
        Sub SetColorKey(ByVal Clr As Long)
        Sub GetColorKey(ByRef lpClr As Long)
    End Interface

    [InterfaceId("1c1a17b0-bed0-415d-974b-dc6696131599")]
    [Description("IVMRMixerControl Interface")]
    [OleAutomation(False)]
    Interface IVMRMixerControl Extends stdole.IUnknown
        Sub SetAlpha(ByVal dwStreamID As Long, ByVal Alpha As Single)
        Sub GetAlpha(ByVal dwStreamID As Long, ByRef pAlpha As Single)
        Sub SetZOrder(ByVal dwStreamID As Long, ByVal dwZ As Long)
        Sub GetZOrder(ByVal dwStreamID As Long, ByRef pZ As Long)
        Sub SetOutputRect(ByVal dwStreamID As Long, ByRef pRect As NORMALIZEDRECT)
        Sub GetOutputRect(ByVal dwStreamID As Long, ByRef pRect As NORMALIZEDRECT)
        Sub SetBackgroundClr(ByVal ClrBkg As Long)
        Sub GetBackgroundClr(ByRef lpClrBkg As Long)
        Sub SetMixingPrefs(ByVal dwMixerPrefs As Long)
        Sub GetMixingPrefs(ByRef pdwMixerPrefs As Long)
    End Interface
    
    [InterfaceId("9cf0b1b6-fbaa-4b7f-88cf-cf1f130a0dce")]
    [OleAutomation(False)]
    Interface IVMRMonitorConfig Extends stdole.IUnknown
        [Description("Use this method on a Multi-Monitor system to specify to the mixer filter which Direct Draw driver should be used when connecting to an upstream decoder filter.")]
        Sub SetMonitor(ByRef pGUID As VMRGUID)
        [Description("Use this method to determine the direct draw object that will be used when connecting the mixer filter to an upstream decoder filter.")]
        Sub GetMonitor(ByRef pGUID As VMRGUID)
        [Description("Use this method on a multi-monitor system to specify to the mixer filter the default Direct Draw device to use when connecting to an upstream filter. The default direct draw device can be overriden for a particular connection by SetMonitor method described above.")]
        Sub SetDefaultMonitor(ByRef pGUID As VMRGUID)
        [Description("Use this method on a multi-monitor system to determine which is the default direct draw device the overlay mixer filter will use when connecting to an upstream filter.")]
        Sub GetDefaultMonitor(ByRef pGUID As VMRGUID)
        [Description("Use this method to get a list of Direct Draw device GUIDs and thier associated monitor information that the mixer can use when connecting to an upstream decoder filter. Passing down a NULL pInfo parameter allows the app to determine the required array size (returned in pdwNumDevices). Otherwise, dwNumDevices returns the actual number of devices retrieved.")]
        Sub GetAvailableMonitors(ByRef pInfo As VMRMONITORINFO, ByVal dwMaxInfoArraySize As Long, ByRef pdwNumDevices As Long)
    End Interface

    [InterfaceId("9e5530c5-7034-48b4-bb46-0b8a6efc8e36")]
    [OleAutomation(False)]
    Interface IVMRFilterConfig Extends stdole.IUnknown
        Sub SetImageCompositor(ByVal lpVMRImgCompositor As IVMRImageCompositor)
        Sub SetNumberOfStreams(ByVal dwMaxStreams As Long)
        Sub GetNumberOfStreams(ByRef pdwMaxStreams As Long)
        Sub SetRenderingPrefs(ByVal dwRenderFlags As VMRRenderPrefs)
        Sub GetRenderingPrefs(ByRef pdwRenderFlags As VMRRenderPrefs)
        Sub SetRenderingMode(ByVal Mode As VMRMode)
        Sub GetRenderingMode(ByRef pMode As VMRMode)
    End Interface

    [InterfaceId("ede80b5c-bad6-4623-b537-65586c9f8dfd")]
    [OleAutomation(False)]
    Interface IVMRAspectRatioControl Extends stdole.IUnknown
        Sub GetAspectRatioMode(ByRef lpdwARMode As VMR_ASPECT_RATIO_MODE)
        Sub SetAspectRatioMode(ByVal dwARMode As VMR_ASPECT_RATIO_MODE)
    End Interface

    [InterfaceId("bb057577-0db8-4e6a-87a7-1a8c9a505a0f")]
    [OleAutomation(False)]
    Interface IVMRDeinterlaceControl Extends stdole.IUnknown
        [Description("For the specified video description returns the number of deinterlacing modes available to the VMR. The deinterlacing modes are returned in descending quality order ie. the best quality mode is at lpdwNumDeinterlaceModes[0], the next best at lpdwNumDeinterlaceModes[1] and so on. To determine how big an array of guids to pass to the GetNumberOfDeinterlaceModes method call GetNumberOfDeinterlaceModes(lpVideoDescription, &dwNumModes, NULL);")]
        Sub GetNumberOfDeinterlaceModes(ByRef lpVideoDescription As VMRVideoDesc, ByRef lpdwNumDeinterlaceModes As Long, ByRef lpDeinterlaceModes As UUID)
        [Description("For the given video description get the capabilities of the specified de-interlace mode.")]
        Sub GetDeinterlaceModeCaps(ByRef lpDeinterlaceMode As UUID, ByRef lpVideoDescription As VMRVideoDesc, ByRef lpDeinterlaceCaps As VMRDeinterlaceCaps)
        [Description("Get/Set the deinterlace mode that you would like the VMR to use when de-interlacing the specified stream. It should be noted that the VMR may not actually be able to use the requested deinterlace mode, in which case the the VMR will fall back to other de-interlace modes as specified by the de-interlace preferences (see SetDeinterlacePrefs below).")]
        Sub GetDeinterlaceMode(ByVal dwStreamID As Long, ByRef lpDeinterlaceMode As UUID)
        Sub SetDeinterlaceMode(ByVal dwStreamID As Long, ByRef lpDeinterlaceMode As UUID)
        Sub GetDeinterlacePrefs(ByRef lpdwDeinterlacePrefs As VMRDeinterlacePrefs)
        Sub SetDeinterlacePrefs(ByVal dwDeinterlacePrefs As VMRDeinterlacePrefs)
        [Description("Get the DeinterlaceMode currently in use for the specified video stream (ie. pin). The returned GUID will be NULL if the de-interlacing h/w has not been created by the VMR at the time the function is called, or if the VMR determines that this stream should not or can be de-interlaced.")]
        Sub GetActualDeinterlaceMode(ByVal dwStreamID As Long, ByRef lpDeinterlaceMode As UUID)
    End Interface
    
    [InterfaceId("7a4fb5af-479f-4074-bb40-ce6722e43c82")]
    [OleAutomation(False)]
    Interface IVMRImageCompositor Extends stdole.IUnknown
        Sub InitCompositionTarget(ByVal pD3DDevice As IUnknown, ByVal pddsRenderTarget As IDirectDrawSurface7)
        Sub TermCompositionTarget(ByVal pD3DDevice As IUnknown, ByVal pddsRenderTarget As IDirectDrawSurface7)
        Sub SetStreamMediaType(ByVal dwStrmID As Long, ByRef pmt As AM_MEDIA_TYPE, ByVal fTexture As BOOL)
        Sub CompositeImage(ByVal pD3DDevice As IUnknown, ByVal pddsRenderTarget As IDirectDrawSurface7, ByRef pmtRenderTarget As AM_MEDIA_TYPE, ByVal rtStart As LongLong, ByVal rtEnd As LongLong, ByVal dwClrBkGnd As Long, ByRef pVideoStreamInfo As VMRVIDEOSTREAMINFO, ByVal cStreams As Long)
    End Interface

    [InterfaceId("058d1f11-2a54-4bef-bd54-df706626b727")]
    [OleAutomation(False)]
    Interface IVMRVideoStreamControl Extends stdole.IUnknown
        [Description("Source color key, set to 0xFFFFFFFF to disable")]
        Sub SetColorKey(ByRef lpClrKey As DDCOLORKEY)
        Sub GetColorKey(ByRef lpClrKey As DDCOLORKEY)
        Sub SetStreamActiveState(ByVal fActive As BOOL)
        Sub GetStreamActiveState(ByRef lpfActive As BOOL)
    End Interface

    [InterfaceId("a9849bbe-9ec8-4263-b764-62730f0d15d0")]
    [OleAutomation(False)]
    Interface IVMRSurface Extends stdole.IUnknown
        [PreserveSig] Function IsSurfaceLocked() As Long
        Sub LockSurface(ByRef lpSurface As LongPtr)
        Sub UnlockSurface()
        Sub GetSurface(ByRef lplpSurface As IDirectDrawSurface7)
    End Interface

    [InterfaceId("9f3a1c85-8555-49ba-935f-be5b5b29d178")]
    [OleAutomation(False)]
    Interface IVMRImagePresenterConfig Extends stdole.IUnknown
        [Description("see VMRRenderPrefs for valid flags")]
        Sub SetRenderingPrefs(ByVal dwRenderFlags As VMRRenderPrefs)
        [Description("see VMRRenderPrefs for valid flags")]
        Sub GetRenderingPrefs(ByRef dwRenderFlags As VMRRenderPrefs)
    End Interface

    [InterfaceId("e6f7ce40-4673-44f1-8f77-5499d68cb4ea")]
    [OleAutomation(False)]
    Interface IVMRImagePresenterExclModeConfig Extends IVMRImagePresenterConfig
        Sub SetXlcModeDDObjAndPrimarySurface(ByVal lpDDObj As IDirectDraw7, ByVal lpPrimarySurf As IDirectDrawSurface7)
        Sub GetXlcModeDDObjAndPrimarySurface(ByRef lpDDObj As IDirectDraw7, ByRef lpPrimarySurf As IDirectDrawSurface7)
    End Interface

    [InterfaceId("aac18c18-e186-46d2-825d-a1f8dc8e395a")]
    [OleAutomation(False)]
    Interface IVPManager Extends stdole.IUnknown
        [Description("Use this method on a Multi-Monitor system to specify to the video port manager filter which videoport index is used to an upstream decoder filter.")]
        Sub SetVideoPortIndex(ByVal dwVideoPortIndex As Long)
        [Description("This method returns the current video port index being used by the VPM.")]
        Sub GetVideoPortIndex(ByRef pdwVideoPortIndex As Long)
    End Interface

    [InterfaceId("1E673275-0257-40aa-AF20-7C608D4A0428")]
    [OleAutomation(False)]
    Interface IVMRMixerBitmap Extends stdole.IUnknown
        [Description("Set bitmap, location to blend it, and blending value")]
        Sub SetAlphaBitmap(ByRef pBmpParms As VMRALPHABITMAP)
        [Description("Change bitmap location, size and blending value, graph must be running for change to take effect.")]
        Sub UpdateAlphaBitmapParameters(ByRef pBmpParms As VMRALPHABITMAP)
        [Description("Get bitmap, location to blend it, and blending value")]
        Sub GetAlphaBitmapParameters(ByRef pBmpParms As VMRALPHABITMAP)
    End Interface
Module wdMF

 Private Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (Destination As Any, Source As Any, ByVal Length As LongPtr)

 Public Const DMO_E_INVALIDSTREAMINDEX  = &H80040201
 Public Const DMO_E_INVALIDTYPE  = &H80040202
 Public Const DMO_E_TYPE_NOT_SET  = &H80040203
 Public Const DMO_E_NOTACCEPTING  = &H80040204
 Public Const DMO_E_TYPE_NOT_ACCEPTED  = &H80040205
 Public Const DMO_E_NO_MORE_ITEMS  = &H80040206
 



Public Enum MF_CAMERA_CONTROL_CONFIGURATION_TYPE
    MF_CAMERA_CONTROL_CONFIGURATION_TYPE_PRESTART = 0
    MF_CAMERA_CONTROL_CONFIGURATION_TYPE_POSTSTART = 1
End Enum

Public Type MF_CAMERA_CONTROL_RANGE_INFO
    minValue As Long
    maxValue As Long
    stepValue As Long
    defaultValue As Long
End Type

Public Enum MFSampleAllocatorUsage
    MFSampleAllocatorUsage_UsesProvidedAllocator = 0
    MFSampleAllocatorUsage_UsesCustomAllocator = 1
    MFSampleAllocatorUsage_DoesNotAllocate = 2
End Enum

Public Enum MFCameraOcclusionState
    MFCameraOcclusionState_Open = 0
    MFCameraOcclusionState_OccludedByLid = 1
    MFCameraOcclusionState_OccludedByCameraHardware = 2
End Enum


Public Type SENSORPROFILEID
    type As UUID
    index As Long
    Unused As Long
End Type


Public Type MFCameraIntrinsic_CameraModel
    FocalLength_x As Single
    FocalLength_y As Single
    PrincipalPoint_x As Single
    PrincipalPoint_y As Single
End Type

Public Type MFCameraIntrinsic_DistortionModel6KT
    Radial_k1 As Single
    Radial_k2 As Single
    Radial_k3 As Single
    Radial_k4 As Single
    Radial_k5 As Single
    Radial_k6 As Single
    Tangential_p1 As Single
    Tangential_p2 As Single
End Type

Public Type MFCameraIntrinsic_DistortionModelArcTan
    Radial_k0 As Single
    DistortionCenter_x As Single
    DistortionCenter_y As Single
    Tangential_x As Single
    Tangential_y As Single
End Type

Public Enum MFCameraIntrinsic_DistortionModelType
    MFCameraIntrinsic_DistortionModelType_6KT = 0
    MFCameraIntrinsic_DistortionModelType_ArcTan = 1
End Enum

Public Type MFExtendedCameraIntrinsic_IntrinsicModel
    width As Long
    Height As Long
    SplitFrameId As Long
    CameraModel As MFCameraIntrinsic_CameraModel
End Type


Public Enum MFSensorDeviceType
    MFSensorDeviceType_Unknown = 0
    MFSensorDeviceType_Device = 1
    MFSensorDeviceType_MediaSource = 2
    MFSensorDeviceType_FrameProvider = 3
    MFSensorDeviceType_SensorTransform = 4
End Enum

Public Enum MFSensorStreamType
    MFSensorStreamType_Unknown = 0
    MFSensorStreamType_Input = 1
    MFSensorStreamType_Output = 2
End Enum

Public Enum MFSensorDeviceMode
    MFSensorDeviceMode_Controller = 0
    MFSensorDeviceMode_Shared = 1
End Enum

Public Enum MF_CROSS_ORIGIN_POLICY
    MF_CROSS_ORIGIN_POLICY_NONE = 0
    MF_CROSS_ORIGIN_POLICY_ANONYMOUS = 1
    MF_CROSS_ORIGIN_POLICY_USE_CREDENTIALS = 2
End Enum

Public Enum MFVirtualCameraType
    MFVirtualCameraType_SoftwareCameraSource = 0
End Enum

Public Enum MFVirtualCameraLifetime
    MFVirtualCameraLifetime_Session = 0
    MFVirtualCameraLifetime_System = 1
End Enum

Public Enum MFVirtualCameraAccess
    MFVirtualCameraAccess_CurrentUser = 0
    MFVirtualCameraAccess_AllUsers = 1
End Enum

Public Enum PLAYTO_SOURCE_CREATEFLAGS
    PLAYTO_SOURCE_NONE = 0
    PLAYTO_SOURCE_IMAGE = 1
    PLAYTO_SOURCE_AUDIO = 2
    PLAYTO_SOURCE_VIDEO = 4
    PLAYTO_SOURCE_PROTECTED = 8
End Enum


Public Enum MF_MEDIASOURCE_STATUS_INFO
    MF_MEDIASOURCE_STATUS_INFO_FULLYSUPPORTED = 0
    MF_MEDIASOURCE_STATUS_INFO_UNKNOWN = 1
End Enum

Public Type MF_VIDEO_SPHERICAL_VIEWDIRECTION
    iHeading As Long
    iPitch As Long
    iRoll As Long
End Type

Public Type DEVICE_INFO
    pFriendlyDeviceName As LongPtr
    pUniqueDeviceName As LongPtr
    pManufacturerName As LongPtr
    pModelName As LongPtr
    pIconURL As LongPtr
End Type

Public Enum MF_SHARING_ENGINE_EVENT
    MF_SHARING_ENGINE_EVENT_DISCONNECT = 2000
    MF_SHARING_ENGINE_EVENT_LOCALRENDERINGSTARTED = 2001
    MF_SHARING_ENGINE_EVENT_LOCALRENDERINGENDED = 2002
    MF_SHARING_ENGINE_EVENT_STOPPED = 2003
    MF_SHARING_ENGINE_EVENT_ERROR = 2501
End Enum

Public Enum MF_MEDIA_SHARING_ENGINE_EVENT
    MF_MEDIA_SHARING_ENGINE_EVENT_DISCONNECT = 2000
End Enum

Public Type MFMPEG2DLNASINKSTATS
    cBytesWritten As LongLong
    fPal As BOOL
    fccVideo As Long
    dwVideoWidth As Long
    dwVideoHeight As Long
    cVideoFramesReceived As LongLong
    cVideoFramesEncoded As LongLong
    cVideoFramesSkipped As LongLong
    cBlackVideoFramesEncoded As LongLong
    cVideoFramesDuplicated As LongLong
    cAudioSamplesPerSec As Long
    cAudioChannels As Long
    cAudioBytesReceived As LongLong
    cAudioFramesEncoded As LongLong
End Type

Public Enum MF_MEDIAKEYS_REQUIREMENT
    MF_MEDIAKEYS_REQUIREMENT_REQUIRED = 1
    MF_MEDIAKEYS_REQUIREMENT_OPTIONAL = 2
    MF_MEDIAKEYS_REQUIREMENT_NOT_ALLOWED = 3
End Enum

Public Enum MF_MEDIA_ENGINE_STREAMTYPE_FAILED
    MF_MEDIA_ENGINE_STREAMTYPE_FAILED_UNKNOWN = 0
    MF_MEDIA_ENGINE_STREAMTYPE_FAILED_AUDIO = 1
    MF_MEDIA_ENGINE_STREAMTYPE_FAILED_VIDEO = 2
End Enum

Public Enum MF_TIMED_TEXT_TRACK_KIND
    MF_TIMED_TEXT_TRACK_KIND_UNKNOWN = 0
    MF_TIMED_TEXT_TRACK_KIND_SUBTITLES = 1
    MF_TIMED_TEXT_TRACK_KIND_CAPTIONS = 2
    MF_TIMED_TEXT_TRACK_KIND_METADATA = 3
End Enum

Public Enum MF_TIMED_TEXT_UNIT_TYPE
    MF_TIMED_TEXT_UNIT_TYPE_PIXELS = 0
    MF_TIMED_TEXT_UNIT_TYPE_PERCENTAGE = 1
End Enum

Public Enum MF_TIMED_TEXT_FONT_STYLE
    MF_TIMED_TEXT_FONT_STYLE_NORMAL = 0
    MF_TIMED_TEXT_FONT_STYLE_OBLIQUE = 1
    MF_TIMED_TEXT_FONT_STYLE_ITALIC = 2
End Enum

Public Enum MF_TIMED_TEXT_ALIGNMENT
    MF_TIMED_TEXT_ALIGNMENT_START = 0
    MF_TIMED_TEXT_ALIGNMENT_END = 1
    MF_TIMED_TEXT_ALIGNMENT_CENTER = 2
End Enum

Public Enum MF_TIMED_TEXT_DISPLAY_ALIGNMENT
    MF_TIMED_TEXT_DISPLAY_ALIGNMENT_BEFORE = 0
    MF_TIMED_TEXT_DISPLAY_ALIGNMENT_AFTER = 1
    MF_TIMED_TEXT_DISPLAY_ALIGNMENT_CENTER = 2
End Enum

Public Enum MF_TIMED_TEXT_DECORATION
    MF_TIMED_TEXT_DECORATION_NONE = 0
    MF_TIMED_TEXT_DECORATION_UNDERLINE = 1
    MF_TIMED_TEXT_DECORATION_LINE_THROUGH = 2
    MF_TIMED_TEXT_DECORATION_OVERLINE = 4
End Enum

Public Enum MF_TIMED_TEXT_WRITING_MODE
    MF_TIMED_TEXT_WRITING_MODE_LRTB = 0
    MF_TIMED_TEXT_WRITING_MODE_RLTB = 1
    MF_TIMED_TEXT_WRITING_MODE_TBRL = 2
    MF_TIMED_TEXT_WRITING_MODE_TBLR = 3
    MF_TIMED_TEXT_WRITING_MODE_LR = 4
    MF_TIMED_TEXT_WRITING_MODE_RL = 5
    MF_TIMED_TEXT_WRITING_MODE_TB = 6
End Enum

Public Enum MF_TIMED_TEXT_SCROLL_MODE
    MF_TIMED_TEXT_SCROLL_MODE_POP_ON = 0
    MF_TIMED_TEXT_SCROLL_MODE_ROLL_UP = 1
End Enum

Public Enum MF_TIMED_TEXT_ERROR_CODE
    MF_TIMED_TEXT_ERROR_CODE_NOERROR = 0
    MF_TIMED_TEXT_ERROR_CODE_FATAL = 1
    MF_TIMED_TEXT_ERROR_CODE_DATA_FORMAT = 2
    MF_TIMED_TEXT_ERROR_CODE_NETWORK = 3
    MF_TIMED_TEXT_ERROR_CODE_INTERNAL = 4
End Enum

Public Enum MF_TIMED_TEXT_CUE_EVENT
    MF_TIMED_TEXT_CUE_EVENT_ACTIVE = 0
    MF_TIMED_TEXT_CUE_EVENT_INACTIVE = 1
    MF_TIMED_TEXT_CUE_EVENT_CLEAR = 2
End Enum

Public Enum MF_TIMED_TEXT_TRACK_READY_STATE
    MF_TIMED_TEXT_TRACK_READY_STATE_NONE = 0
    MF_TIMED_TEXT_TRACK_READY_STATE_LOADING = 1
    MF_TIMED_TEXT_TRACK_READY_STATE_LOADED = 2
    MF_TIMED_TEXT_TRACK_READY_STATE_ERROR = 3
End Enum

Public Enum MF_TIMED_TEXT_RUBY_POSITION
    MF_TIMED_TEXT_RUBY_POSITION_BEFORE = 0
    MF_TIMED_TEXT_RUBY_POSITION_AFTER = 1
    MF_TIMED_TEXT_RUBY_POSITION_OUTSIDE = 2
End Enum

Public Enum MF_TIMED_TEXT_RUBY_ALIGN
    MF_TIMED_TEXT_RUBY_ALIGN_CENTER = 0
    MF_TIMED_TEXT_RUBY_ALIGN_START = 1
    MF_TIMED_TEXT_RUBY_ALIGN_END = 2
    MF_TIMED_TEXT_RUBY_ALIGN_SPACEAROUND = 3
    MF_TIMED_TEXT_RUBY_ALIGN_SPACEBETWEEN = 4
    MF_TIMED_TEXT_RUBY_ALIGN_WITHBASE = 5
End Enum

Public Enum MF_TIMED_TEXT_RUBY_RESERVE
    MF_TIMED_TEXT_RUBY_RESERVE_NONE = 0
    MF_TIMED_TEXT_RUBY_RESERVE_BEFORE = 1
    MF_TIMED_TEXT_RUBY_RESERVE_AFTER = 2
    MF_TIMED_TEXT_RUBY_RESERVE_BOTH = 3
    MF_TIMED_TEXT_RUBY_RESERVE_OUTSIDE = 4
End Enum

Public Enum MF_TIMED_TEXT_BOUTEN_TYPE
    MF_TIMED_TEXT_BOUTEN_TYPE_NONE = 0
    MF_TIMED_TEXT_BOUTEN_TYPE_AUTO = 1
    MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDCIRCLE = 2
    MF_TIMED_TEXT_BOUTEN_TYPE_OPENCIRCLE = 3
    MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDDOT = 4
    MF_TIMED_TEXT_BOUTEN_TYPE_OPENDOT = 5
    MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDSESAME = 6
    MF_TIMED_TEXT_BOUTEN_TYPE_OPENSESAME = 7
End Enum

Public Enum MF_TIMED_TEXT_BOUTEN_POSITION
    MF_TIMED_TEXT_BOUTEN_POSITION_BEFORE = 0
    MF_TIMED_TEXT_BOUTEN_POSITION_AFTER = 1
    MF_TIMED_TEXT_BOUTEN_POSITION_OUTSIDE = 2
End Enum

Public Enum MF_MEDIA_ENGINE_OPM_STATUS
    MF_MEDIA_ENGINE_OPM_NOT_REQUESTED = 0
    MF_MEDIA_ENGINE_OPM_ESTABLISHED = 1
    MF_MEDIA_ENGINE_OPM_FAILED_VM = 2
    MF_MEDIA_ENGINE_OPM_FAILED_BDA = 3
    MF_MEDIA_ENGINE_OPM_FAILED_UNSIGNED_DRIVER = 4
    MF_MEDIA_ENGINE_OPM_FAILED = 5
End Enum


Public Enum MF_MEDIA_ENGINE_CREATEFLAGS
    MF_MEDIA_ENGINE_AUDIOONLY = &H0001
    MF_MEDIA_ENGINE_WAITFORSTABLE_STATE = &H0002
    MF_MEDIA_ENGINE_FORCEMUTE = &H0004
    MF_MEDIA_ENGINE_REAL_TIME_MODE = &H0008 ' sets the default real time mode, can be changed later by calling IMFMediaEngineEx::SetRealTimeMode
    MF_MEDIA_ENGINE_DISABLE_LOCAL_PLUGINS = &H0010
    MF_MEDIA_ENGINE_CREATEFLAGS_MASK = &H001F
End Enum

Public Enum MF_MEDIA_ENGINE_PROTECTION_FLAGS
    MF_MEDIA_ENGINE_ENABLE_PROTECTED_CONTENT = 1
    MF_MEDIA_ENGINE_USE_PMP_FOR_ALL_CONTENT = 2
    MF_MEDIA_ENGINE_USE_UNPROTECTED_PMP = 4
End Enum

Public Enum MF_MEDIA_ENGINE_EXTENSION_TYPE
    MF_MEDIA_ENGINE_EXTENSION_TYPE_MEDIASOURCE = 0
    MF_MEDIA_ENGINE_EXTENSION_TYPE_BYTESTREAM = 1
End Enum

Public Enum MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAGS
    MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_PROTECTED = 1
    MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_SURFACE_PROTECTION = 2
    MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_ANTI_SCREEN_SCRAPE_PROTECTION = 4
End Enum

Public Enum MF_MSE_VP9_SUPPORT_TYPE
    MF_MSE_VP9_SUPPORT_DEFAULT = 0
    MF_MSE_VP9_SUPPORT_ON = 1
    MF_MSE_VP9_SUPPORT_OFF = 2
End Enum

Public Enum MF_MSE_OPUS_SUPPORT_TYPE
    MF_MSE_OPUS_SUPPORT_ON = 0
    MF_MSE_OPUS_SUPPORT_OFF = 1
End Enum

Public Enum MF_MSE_APPEND_MODE
    MF_MSE_APPEND_MODE_SEGMENTS = 0
    MF_MSE_APPEND_MODE_SEQUENCE = 1
End Enum


Public Enum MF_MSE_READY
    MF_MSE_READY_CLOSED = 1
    MF_MSE_READY_OPEN = 2
    MF_MSE_READY_ENDED = 3
End Enum

Public Enum MF_MSE_ERROR
    MF_MSE_ERROR_NOERROR = 0
    MF_MSE_ERROR_NETWORK = 1
    MF_MSE_ERROR_DECODE = 2
    MF_MSE_ERROR_UNKNOWN_ERROR = 3
End Enum

Public Enum MF_MEDIA_ENGINE_KEYERR
    MF_MEDIAENGINE_KEYERR_UNKNOWN = 1
    MF_MEDIAENGINE_KEYERR_CLIENT = 2
    MF_MEDIAENGINE_KEYERR_SERVICE = 3
    MF_MEDIAENGINE_KEYERR_OUTPUT = 4
    MF_MEDIAENGINE_KEYERR_HARDWARECHANGE = 5
    MF_MEDIAENGINE_KEYERR_DOMAIN = 6
End Enum

Public Enum MF_HDCP_STATUS
    MF_HDCP_STATUS_ON = 0
    MF_HDCP_STATUS_OFF = 1
    MF_HDCP_STATUS_ON_WITH_TYPE_ENFORCEMENT = 2
End Enum

Public Enum MF_MEDIA_ENGINE_S3D_PACKING_MODE
    MF_MEDIA_ENGINE_S3D_PACKING_MODE_NONE = 0
    MF_MEDIA_ENGINE_S3D_PACKING_MODE_SIDE_BY_SIDE = 1
    MF_MEDIA_ENGINE_S3D_PACKING_MODE_TOP_BOTTOM = 2
End Enum

Public Enum MF_MEDIA_ENGINE_STATISTIC
    MF_MEDIA_ENGINE_STATISTIC_FRAMES_RENDERED = 0
    MF_MEDIA_ENGINE_STATISTIC_FRAMES_DROPPED = 1
    MF_MEDIA_ENGINE_STATISTIC_BYTES_DOWNLOADED = 2
    MF_MEDIA_ENGINE_STATISTIC_BUFFER_PROGRESS = 3
    MF_MEDIA_ENGINE_STATISTIC_FRAMES_PER_SECOND = 4
    MF_MEDIA_ENGINE_STATISTIC_PLAYBACK_JITTER = 5
    MF_MEDIA_ENGINE_STATISTIC_FRAMES_CORRUPTED = 6
    MF_MEDIA_ENGINE_STATISTIC_TOTAL_FRAME_DELAY = 7
End Enum

Public Enum MF_MEDIA_ENGINE_SEEK_MODE
    MF_MEDIA_ENGINE_SEEK_MODE_NORMAL = 0
    MF_MEDIA_ENGINE_SEEK_MODE_APPROXIMATE = 1
End Enum

Public Enum MF_MEDIA_ENGINE_EVENT
    MF_MEDIA_ENGINE_EVENT_LOADSTART = 1
    MF_MEDIA_ENGINE_EVENT_PROGRESS = 2
    MF_MEDIA_ENGINE_EVENT_SUSPEND = 3
    MF_MEDIA_ENGINE_EVENT_ABORT = 4
    MF_MEDIA_ENGINE_EVENT_ERROR = 5
    MF_MEDIA_ENGINE_EVENT_EMPTIED = 6
    MF_MEDIA_ENGINE_EVENT_STALLED = 7
    MF_MEDIA_ENGINE_EVENT_PLAY = 8
    MF_MEDIA_ENGINE_EVENT_PAUSE = 9
    MF_MEDIA_ENGINE_EVENT_LOADEDMETADATA = 10
    MF_MEDIA_ENGINE_EVENT_LOADEDDATA = 11
    MF_MEDIA_ENGINE_EVENT_WAITING = 12
    MF_MEDIA_ENGINE_EVENT_PLAYING = 13
    MF_MEDIA_ENGINE_EVENT_CANPLAY = 14
    MF_MEDIA_ENGINE_EVENT_CANPLAYTHROUGH = 15
    MF_MEDIA_ENGINE_EVENT_SEEKING = 16
    MF_MEDIA_ENGINE_EVENT_SEEKED = 17
    MF_MEDIA_ENGINE_EVENT_TIMEUPDATE = 18
    MF_MEDIA_ENGINE_EVENT_ENDED = 19
    MF_MEDIA_ENGINE_EVENT_RATECHANGE = 20
    MF_MEDIA_ENGINE_EVENT_DURATIONCHANGE = 21
    MF_MEDIA_ENGINE_EVENT_VOLUMECHANGE = 22
    MF_MEDIA_ENGINE_EVENT_FORMATCHANGE = 1000
    MF_MEDIA_ENGINE_EVENT_PURGEQUEUEDEVENTS = 1001
    MF_MEDIA_ENGINE_EVENT_TIMELINE_MARKER = 1002
    MF_MEDIA_ENGINE_EVENT_BALANCECHANGE = 1003
    MF_MEDIA_ENGINE_EVENT_DOWNLOADCOMPLETE = 1004
    MF_MEDIA_ENGINE_EVENT_BUFFERINGSTARTED = 1005
    MF_MEDIA_ENGINE_EVENT_BUFFERINGENDED = 1006
    MF_MEDIA_ENGINE_EVENT_FRAMESTEPCOMPLETED = 1007
    MF_MEDIA_ENGINE_EVENT_NOTIFYSTABLESTATE = 1008
    MF_MEDIA_ENGINE_EVENT_FIRSTFRAMEREADY = 1009
    MF_MEDIA_ENGINE_EVENT_TRACKSCHANGE = 1010
    MF_MEDIA_ENGINE_EVENT_OPMINFO = 1011
    MF_MEDIA_ENGINE_EVENT_RESOURCELOST = 1012
    MF_MEDIA_ENGINE_EVENT_DELAYLOADEVENT_CHANGED = 1013
    MF_MEDIA_ENGINE_EVENT_STREAMRENDERINGERROR = 1014
    MF_MEDIA_ENGINE_EVENT_SUPPORTEDRATES_CHANGED = 1015
    MF_MEDIA_ENGINE_EVENT_AUDIOENDPOINTCHANGE = 1016
End Enum

Public Enum MF_MEDIA_ENGINE_NETWORK
    MF_MEDIA_ENGINE_NETWORK_EMPTY = 0
    MF_MEDIA_ENGINE_NETWORK_IDLE = 1
    MF_MEDIA_ENGINE_NETWORK_LOADING = 2
    MF_MEDIA_ENGINE_NETWORK_NO_SOURCE = 3
End Enum

Public Enum MF_MEDIA_ENGINE_READY
    MF_MEDIA_ENGINE_READY_HAVE_NOTHING = 0
    MF_MEDIA_ENGINE_READY_HAVE_METADATA = 1
    MF_MEDIA_ENGINE_READY_HAVE_CURRENT_DATA = 2
    MF_MEDIA_ENGINE_READY_HAVE_FUTURE_DATA = 3
    MF_MEDIA_ENGINE_READY_HAVE_ENOUGH_DATA = 4
End Enum

Public Enum MF_MEDIA_ENGINE_CANPLAY
    MF_MEDIA_ENGINE_CANPLAY_NOT_SUPPORTED = 0
    MF_MEDIA_ENGINE_CANPLAY_MAYBE = 1
    MF_MEDIA_ENGINE_CANPLAY_PROBABLY = 2
End Enum

Public Enum MF_MEDIA_ENGINE_PRELOAD
    MF_MEDIA_ENGINE_PRELOAD_MISSING = 0
    MF_MEDIA_ENGINE_PRELOAD_EMPTY = 1
    MF_MEDIA_ENGINE_PRELOAD_NONE = 2
    MF_MEDIA_ENGINE_PRELOAD_METADATA = 3
    MF_MEDIA_ENGINE_PRELOAD_AUTOMATIC = 4
End Enum

Public Enum MF_MEDIA_ENGINE_ERR
    MF_MEDIA_ENGINE_ERR_NOERROR = 0
    MF_MEDIA_ENGINE_ERR_ABORTED = 1
    MF_MEDIA_ENGINE_ERR_NETWORK = 2
    MF_MEDIA_ENGINE_ERR_DECODE = 3
    MF_MEDIA_ENGINE_ERR_SRC_NOT_SUPPORTED = 4
    MF_MEDIA_ENGINE_ERR_ENCRYPTED = 5
End Enum
    
Public Enum MF_SINK_WRITER_TAGS
	MF_SINK_WRITER_INVALID_STREAM_INDEX = &HFFFFFFFF
	MF_SINK_WRITER_ALL_STREAMS = &HFFFFFFFE
	MF_SINK_WRITER_MEDIASINK = &HFFFFFFFF
End Enum

Public Type MF_SINK_WRITER_STATISTICS
	' Set to the size of the structure.  Used so that future releases
	' can support additional statistics without having to rev the interface.
	cb As Long
	llLastTimestampReceived As LongLong
	llLastTimestampEncoded As LongLong
	llLastTimestampProcessed As LongLong
	llLastStreamTickReceived As LongLong
	llLastSinkSampleRequest As LongLong
	qwNumSamplesReceived As LongLong
	qwNumSamplesEncoded As LongLong
	qwNumSamplesProcessed As LongLong
	qwNumStreamTicksReceived As LongLong
	dwByteCountQueued As Long
	qwByteCountProcessed As LongLong
	dwNumOutstandingSinkSampleRequests As Long
	dwAverageSampleRateReceived As Long
	dwAverageSampleRateEncoded As Long
	dwAverageSampleRateProcessed As Long
End Type

Public Enum MF_CAPTURE_ENGINE_PREF_SOURCE
	MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_PREVIEW = &HFFFFFFFA 'The preferred stream for previewing video
	MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_RECORD = &HFFFFFFF9 'The preferred stream for recording video
	MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_PHOTO = &HFFFFFFF8 'The first independent photo stream if present, or else the same stream chosen by MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_PREVIEW
	MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_AUDIO = &HFFFFFFF7 'The first available audio stream
	'#if(NTDDI_VERSION>NTDDI_WIN10_FE) = 0
	MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_METADATA = &HFFFFFFF6 'The first available metadata stream
	'#endif = 1
	MF_CAPTURE_ENGINE_MEDIASOURCE = &HFFFFFFFF
End Enum

Public Enum MF_CAPTURE_ENGINE_STREAM_CATEGORY
	' / <summary>
	' / Video Preview stream
	' / </summary>
	MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_PREVIEW = &H00000000
	' / <summary>
	' / Video Capture Stream
	' / </summary>
	MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_CAPTURE = &H00000001
	' / <summary>
	' / Independent photo stream
	' / </summary>
	MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_INDEPENDENT = &H00000002
	' / <summary>
	' / Dependent photo stream
	' / </summary>
	MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_DEPENDENT = &H00000003
	' / <summary>
	' / Audio stream
	' / </summary>
	MF_CAPTURE_ENGINE_STREAM_CATEGORY_AUDIO = &H00000004
	' / <summary>
	' / Unsupported stream
	' / </summary>
	MF_CAPTURE_ENGINE_STREAM_CATEGORY_UNSUPPORTED = &H00000005
	'#if(NTDDI_VERSION>NTDDI_WIN10_FE) = 0
	' / <summary>
	' / Video Metadata stream
	' / </summary>
	MF_CAPTURE_ENGINE_STREAM_CATEGORY_METADATA = &H00000006
	'#endif = 1
End Enum
Public Enum MF_CAPTURE_ENGINE_DEVICE_TYPE
	' / <summary>
	' / Audio device which is a microphone
	' / </summary>
	MF_CAPTURE_ENGINE_DEVICE_TYPE_AUDIO = &H00000000
	' / <summary>
	' / Video device which is a webcam
	' / </summary>
	MF_CAPTURE_ENGINE_DEVICE_TYPE_VIDEO = &H00000001
End Enum

Public Enum MF_CAPTURE_ENGINE_SINK_TYPE
	' / <summary>
	' / Record sink, used for outputting compressed data
	' / </summary>
	MF_CAPTURE_ENGINE_SINK_TYPE_RECORD = &H00000000
	' / <summary>
	' / Record sink, used for outputting uncompressed data or rendering video
	' / </summary>
	MF_CAPTURE_ENGINE_SINK_TYPE_PREVIEW = &H00000001
	' / <summary>
	' / Photo sink, used for retrieving a single photograph
	' / </summary>
	MF_CAPTURE_ENGINE_SINK_TYPE_PHOTO = &H00000002
End Enum

Public Enum MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE
	' / <summary>
	' / Default capture category
	' / </summary>
	MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_OTHER = 0
	' / <summary>
	' / Communications capture category
	' / </summary>
	MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_COMMUNICATIONS = 1
	' / <summary>
	' / General media capture category
	' / </summary>
	MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_MEDIA = 2
	' / <summary>
	' / Game Chat capture category
	' / </summary>
	MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_GAMECHAT = 3
	' / <summary>
	' / Speech capture category
	' / </summary>
	MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_SPEECH = 4
	'#ifNTDDI_VERSION>=NTDDI_WIN10_FE
	' / <summary>
	' / Capture Audio located in the 'far field' for the purpose of speech recognition
	' / </summary>
	MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_FARFIELDSPEECH = 5
	' / <summary>
	' / Consistent speech processing for the captured Audio. Used for Machine Learning
	' / </summary>
	MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_UNIFORMSPEECH = 6
	' / <summary>
	' / Capture Audio with the intent of enabling dictation or typing by voice
	' / </summary>
	MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_VOICETYPING = 7
	'#endif = 2
End Enum

Public Enum MF_CAPTURE_ENGINE_AUDIO_PROCESSING_MODE
	' / <summary>
	' / Normal audio signal processing.
	' / </summary>
	MF_CAPTURE_ENGINE_AUDIO_PROCESSING_DEFAULT = 0
	' / <summary>
	' / Minimal audio signal processing.
	' / </summary>
	MF_CAPTURE_ENGINE_AUDIO_PROCESSING_RAW = 1
End Enum



Public Const MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_CROSSPROCESS As Long = 1
Public Const MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_NOPERSIST As Long = 1
Public Const MFSEQUENCER_INVALID_ELEMENT_ID As Long = -1

Public Const MFASF_MIN_HEADER_BYTES = 24  ' (sizeof(GUID) + sizeof(QWORD) );
Public Const MFASF_MAX_STREAM_NUMBER   = 127
Public Const MFASF_INVALID_STREAM_NUMBER = (MFASF_MAX_STREAM_NUMBER + 1)
Public Const MFASF_PAYLOADEXTENSION_MAX_SIZE        = &Hff
Public Const MFASF_PAYLOADEXTENSION_VARIABLE_SIZE   = &Hffff
Public Const MFASF_DEFAULT_BUFFER_WINDOW_MS        = &H3000



Public Enum MfRrComponentHashInfoReasonFlags
    MF_USER_MODE_COMPONENT_LOAD = &H00000001
    MF_KERNEL_MODE_COMPONENT_LOAD = &H00000002
    MF_GRL_LOAD_FAILED = &H00000010
    MF_INVALID_GRL_SIGNATURE = &H00000020
    MF_GRL_ABSENT = &H00001000
    MF_COMPONENT_REVOKED = &H00002000
    MF_COMPONENT_INVALID_EKU = &H00004000
    MF_COMPONENT_CERT_REVOKED = &H00008000&
    MF_COMPONENT_INVALID_ROOT = &H00010000
    MF_COMPONENT_HS_CERT_REVOKED = &H00020000
    MF_COMPONENT_LS_CERT_REVOKED = &H00040000
    MF_BOOT_DRIVER_VERIFICATION_FAILED = &H00100000
    MF_TEST_SIGNED_COMPONENT_LOADING = &H01000000
    MF_MINCRYPT_FAILURE = &H10000000
End Enum
Public Const SHA_HASH_LEN  = 20
Public Const STR_HASH_LEN  = (SHA_HASH_LEN * 2 + 3)
Public Type MFRR_COMPONENT_HASH_INFO
    ' Reason for failure (revoked or unsigned or badly signed).
    ulReason As MfRrComponentHashInfoReasonFlags
    ' Header hash of the component
    rgHeaderHash(0 To (STR_HASH_LEN - 1)) As Integer
    ' Hash of public key if one of the certificates
    ' in the signing certificate chain is revoked
    rgPublicKeyHash(0 To (STR_HASH_LEN - 1)) As Integer
    ' Component name (full path name)
    wszName(0 To (MAX_PATH - 1)) As Integer
End Type
Public Type MFRR_COMPONENTS
    ' Version number
    dwRRInfoVersion As Long
    ' Number of components in list
    dwRRComponents As Long
    ' points to the end of this structure that has
    ' allocated memory for the array of component info structures
    pRRComponents As LongPtr 'PMFRR_COMPONENT_HASH_INFO
End Type
[PackingAlignment(1)]
Public Type ASFFlatPicture
    ' Direct mapped fields
    bPictureType As Byte
    dwDataLen As Long
End Type
[PackingAlignment(1)]
Public Type ASFFlatSynchronisedLyrics
    ' Direct mapped fields
    bTimeStampFormat As Byte
    bContentType As Byte
    dwLyricsLen As Long
End Type


Public Enum MfMediaStreamCharacteristics
    MEDIASINK_FIXED_STREAMS = &H00000001
    MEDIASINK_CANNOT_MATCH_CLOCK = &H00000002
    MEDIASINK_RATELESS = &H00000004
    MEDIASINK_CLOCK_REQUIRED = &H00000008
    MEDIASINK_CAN_PREROLL = &H00000010
    MEDIASINK_REQUIRE_REFERENCE_MEDIATYPE = &H00000020
End Enum


Public Const MFCLOCK_FREQUENCY_HNS      = 10000000
Public Const MFCLOCK_TOLERANCE_UNKNOWN  = 50000
Public Const MFCLOCK_JITTER_ISR         = 1000
Public Const MFCLOCK_JITTER_DPC         = 4000
Public Const MFCLOCK_JITTER_PASSIVE     = 10000

Public Const PRESENTATION_CURRENT_POSITION = &H7fffffffffffffff

Public Const MF_ACTIVATE_CUSTOM_MIXER_ALLOWFAIL As Long = 1
Public Const MF_ACTIVATE_CUSTOM_PRESENTER_ALLOWFAIL As Long = 1
Public Enum MfOutputAttribs
    MFOUTPUTATTRIBUTE_DIGITAL = (&H00000001)
    MFOUTPUTATTRIBUTE_NONSTANDARDIMPLEMENTATION = (&H00000002)
    MFOUTPUTATTRIBUTE_VIDEO = (&H00000004)
    MFOUTPUTATTRIBUTE_COMPRESSED = (&H00000008)
    MFOUTPUTATTRIBUTE_SOFTWARE = (&H00000010)
    MFOUTPUTATTRIBUTE_BUS = (&H00000020)
    MFOUTPUTATTRIBUTE_BUSIMPLEMENTATION = (&H0000FF00&)
End Enum



/*
avrt.h

*/
Public Enum AVRT_PRIORITY
    AVRT_PRIORITY_VERYLOW = -2
    AVRT_PRIORITY_LOW
    AVRT_PRIORITY_NORMAL
    AVRT_PRIORITY_HIGH
    AVRT_PRIORITY_CRITICAL
End Enum

Public Const THREAD_ORDER_GROUP_INFINITE_TIMEOUT As LongLong = -1

Public Declare PtrSafe Function AvSetMmThreadCharacteristicsA Lib "avrt.dll" (ByVal TaskName As String, TaskIndex As Long) As LongPtr
Public Declare PtrSafe Function AvSetMmThreadCharacteristicsW Lib "avrt.dll" (ByVal TaskName As LongPtr, TaskIndex As Long) As LongPtr
Public DeclareWide PtrSafe Function AvSetMmThreadCharacteristics Lib "avrt.dll" Alias "AvSetMmThreadCharacteristicsW" (ByVal TaskName As String, TaskIndex As Long) As LongPtr
Public Declare PtrSafe Function AvSetMmMaxThreadCharacteristicsA Lib "avrt.dll" (ByVal FirstTask As String, ByVal SecondTask As String, TaskIndex As Long) As LongPtr
Public Declare PtrSafe Function AvSetMmMaxThreadCharacteristicsW Lib "avrt.dll" (ByVal FirstTask As LongPtr, ByVal SecondTask As LongPtr, TaskIndex As Long) As LongPtr
Public DeclareWide PtrSafe Function AvSetMmMaxThreadCharacteristics Lib "avrt.dll" Alias "AvSetMmMaxThreadCharacteristicsW" (ByVal FirstTask As String, ByVal SecondTask As String, TaskIndex As Long) As LongPtr
Public Declare PtrSafe Function AvRevertMmThreadCharacteristics Lib "avrt.dll" (ByVal AvrtHandle As LongPtr) As BOOL
Public Declare PtrSafe Function AvSetMmThreadPriority Lib "avrt.dll" (ByVal AvrtHandle As LongPtr, ByVal Priority As AVRT_PRIORITY) As BOOL
Public Declare PtrSafe Function AvRtCreateThreadOrderingGroup Lib "avrt.dll" (Context As LongPtr, Period As LARGE_INTEGER, ThreadOrderingGuid As UUID, Timeout As LARGE_INTEGER) As BOOL
Public Declare PtrSafe Function AvRtCreateThreadOrderingGroupExA Lib "avrt.dll" (Context As LongPtr, Period As LARGE_INTEGER, ThreadOrderingGuid As UUID, Timeout As LARGE_INTEGER, ByVal TaskName As String) As BOOL
Public Declare PtrSafe Function AvRtCreateThreadOrderingGroupExW Lib "avrt.dll" (Context As LongPtr, Period As LARGE_INTEGER, ThreadOrderingGuid As UUID, Timeout As LARGE_INTEGER, ByVal TaskName As LongPtr) As BOOL
Public DeclareWide PtrSafe Function AvRtCreateThreadOrderingGroupEx Lib "avrt.dll" Alias "AvRtCreateThreadOrderingGroupExW" (Context As LongPtr, Period As LARGE_INTEGER, ThreadOrderingGuid As UUID, Timeout As LARGE_INTEGER, ByVal TaskName As String) As BOOL
Public Declare PtrSafe Function AvRtJoinThreadOrderingGroup Lib "avrt.dll" (Context As LongPtr, ThreadOrderingGuid As UUID, ByVal Before As BOOL) As BOOL
Public Declare PtrSafe Function AvRtWaitOnThreadOrderingGroup Lib "avrt.dll" (ByVal Context As LongPtr) As BOOL
Public Declare PtrSafe Function AvRtLeaveThreadOrderingGroup Lib "avrt.dll" (ByVal Context As LongPtr) As BOOL
Public Declare PtrSafe Function AvRtDeleteThreadOrderingGroup Lib "avrt.dll" (ByVal Context As LongPtr) As BOOL
Public Declare PtrSafe Function AvQuerySystemResponsiveness Lib "avrt.dll" (ByVal AvrtHandle As LongPtr, SystemResponsivenessValue As Long) As BOOL

'END avrt.h

'RESUME mfapi.h

Public Const MF_SDK_VERSION = 2 'Win7+
Public Const MF_API_VERSION  = &H0070  ' This value is unused in the Win7 release and left at its Vista release value
Public Const MF_VERSION  = (MF_SDK_VERSION << 16 Or MF_API_VERSION)

Public Enum MF_STARTUP_FLAGS
    MFSTARTUP_NOSOCKET = &H1
    MFSTARTUP_LITE = (MFSTARTUP_NOSOCKET)
    MFSTARTUP_FULL = 0
End Enum

Public Declare PtrSafe Function MFStartup Lib "MFPlat.DLL" (ByVal Version As Long, Optional ByVal dwFlags As MF_STARTUP_FLAGS = MFSTARTUP_FULL) As Long
Public Declare PtrSafe Function MFShutdown Lib "MFPlat.DLL" () As Long
Public Declare PtrSafe Function MFLockPlatform Lib "MFPlat.DLL" () As Long
Public Declare PtrSafe Function MFUnlockPlatform Lib "MFPlat.DLL" () As Long
Public Declare PtrSafe Function MFPutWorkItem Lib "MFPlat.dll" (ByVal dwQueue As Long, ByVal pCallback As IMFAsyncCallback, ByVal pState As IUnknown) As Long
Public Declare PtrSafe Function MFPutWorkItem2 Lib "MFPlat.dll" (ByVal dwQueue As Long, ByVal Priority As Long, ByVal pCallback As IMFAsyncCallback, ByVal pState As IUnknown) As Long
Public Declare PtrSafe Function MFPutWorkItemEx Lib "MFPlat.dll" (ByVal dwQueue As Long, ByVal pResult As IMFAsyncCallback) As Long
Public Declare PtrSafe Function MFPutWorkItemEx2 Lib "MFPlat.dll" (ByVal dwQueue As Long, ByVal Priority As Long, ByVal pResult As IMFAsyncCallback) As Long
Public Declare PtrSafe Function MFPutWaitingWorkItem Lib "MFPlat.dll" (ByVal hEvent As LongPtr, ByVal Priority As Long, ByVal pResult As IMFAsyncCallback, pKey As LongLong) As Long
Public Declare PtrSafe Function MFAllocateSerialWorkQueue Lib "MFPlat.dll" (ByVal dwWorkQueue As Long, pdwWorkQueue As Long) As Long
Public Declare PtrSafe Function MFScheduleWorkItem Lib "MFPlat.dll" (ByVal pCallback As IMFAsyncCallback, ByVal pState As IUnknown, ByVal Timeout As LongLong, Optional pKey As LongLong) As Long
Public Declare PtrSafe Function MFScheduleWorkItemEx Lib "MFPlat.dll" (ByVal pResult As IMFAsyncCallback, ByVal Timeout As LongLong, Optional pKey As LongLong) As Long
Public Declare PtrSafe Function MFCancelWorkItem Lib "MFPlat.dll" (ByVal key As LongLong) As Long
Public Declare PtrSafe Function MFGetTimerPeriodicity Lib "MFPlat.dll" (Periodicity As Long) As Long
Public Declare PtrSafe Function MFAddPeriodicCallback Lib "MFPlat.dll" (ByVal Callback As LongPtr, ByVal pContext As IUnknown, Optional pdwKey As Long) As Long
Public Declare PtrSafe Function MFRemovePeriodicCallback Lib "MFPlat.dll" (ByVal dwKey As Long) As Long

Public Enum MFASYNC_WORKQUEUE_TYPE
    MF_STANDARD_WORKQUEUE = 0
    MF_WINDOW_WORKQUEUE = 1
    MF_MULTITHREADED_WORKQUEUE = 2
End Enum
Public Declare PtrSafe Function MFAllocateWorkQueue Lib "MFPlat.dll" (pdwWorkQueue As Long) As Long
Public Declare PtrSafe Function MFAllocateWorkQueueEx Lib "MFPlat.dll" (ByVal WorkQueueType As MFASYNC_WORKQUEUE_TYPE, pdwWorkQueue As Long) As Long
Public Declare PtrSafe Function MFLockWorkQueue Lib "MFPlat.dll" (ByVal dwWorkQueue As Long) As Long
Public Declare PtrSafe Function MFUnlockWorkQueue Lib "MFPlat.dll" (ByVal dwWorkQueue As Long) As Long
Public Declare PtrSafe Function MFBeginRegisterWorkQueueWithMMCSS Lib "MFPlat.dll" ([TypeHint(MFCallbackQueue)] ByVal dwWorkQueueId As Long, ByVal wszClass As LongPtr, ByVal dwTaskId As Long, ByVal pDoneCallback As IMFAsyncCallback, ByVal pDoneState As IUnknown) As Long
Public Declare PtrSafe Function MFBeginRegisterWorkQueueWithMMCSSEx Lib "MFPlat.dll" ([TypeHint(MFCallbackQueue)] ByVal dwWorkQueueId As Long, ByVal wszClass As LongPtr, ByVal dwTaskId As Long, ByVal lPriority As Long, ByVal pDoneCallback As IMFAsyncCallback, ByVal pDoneState As IUnknown) As Long
Public Declare PtrSafe Function MFEndRegisterWorkQueueWithMMCSS Lib "MFPlat.dll" (ByVal pResult As IMFAsyncResult, pdwTaskId As Long) As Long
Public Declare PtrSafe Function MFBeginUnregisterWorkQueueWithMMCSS Lib "MFPlat.dll" ([TypeHint(MFCallbackQueue)] ByVal dwWorkQueueId As Long, ByVal pDoneCallback As IMFAsyncCallback, ByVal pDoneState As IUnknown) As Long
Public Declare PtrSafe Function MFEndUnregisterWorkQueueWithMMCSS Lib "MFPlat.dll" (ByVal pResult As IMFAsyncResult) As Long
Public Declare PtrSafe Function MFGetWorkQueueMMCSSClass Lib "MFPlat.dll" ([TypeHint(MFCallbackQueue)] ByVal dwWorkQueueId As Long, ByVal pwszClass As LongPtr, pcchClass As Long) As Long
Public Declare PtrSafe Function MFGetWorkQueueMMCSSTaskId Lib "MFPlat.dll" ([TypeHint(MFCallbackQueue)] ByVal dwWorkQueueId As Long, pdwTaskId As Long) As Long
Public Declare PtrSafe Function MFRegisterPlatformWithMMCSS Lib "MFPlat.dll" (ByVal wszClass As LongPtr, pdwTaskId As Long, ByVal lPriority As Long) As Long
Public Declare PtrSafe Function MFUnregisterPlatformFromMMCSS Lib "MFPlat.dll" () As Long
Public Declare PtrSafe Function MFLockSharedWorkQueue Lib "MFPlat.dll" (ByVal wszClass As LongPtr, ByVal BasePriority As Long, pdwTaskId As Long, pID As Long) As Long
Public Declare PtrSafe Function MFGetWorkQueueMMCSSPriority Lib "MFPlat.dll" ([TypeHint(MFCallbackQueue)] ByVal dwWorkQueueId As Long, lPriority As Long) As Long

Public Declare PtrSafe Function MFCreateAsyncResult Lib "MFPlat.dll" (ByVal punkObject As IUnknown, ByVal pCallback As IMFAsyncCallback, ByVal punkState As IUnknown, ppAsyncResult As IMFAsyncResult) As Long
Public Declare PtrSafe Function MFInvokeCallback Lib "MFPlat.dll" (ByVal pAsyncResult As IMFAsyncResult) As Long

Public Type MFASYNCRESULT
    AsyncResult As IMFAsyncResult
    overlapped As OVERLAPPED
    pCallback As IMFAsyncCallback
    hrStatusResult As Long
    dwBytesTransferred As Long
    hEvent As LongPtr
End Type

Public Declare PtrSafe Function MFCreateFile Lib "MFPlat.dll" (ByVal AccessMode As MF_FILE_ACCESSMODE, ByVal OpenMode As MF_FILE_OPENMODE, ByVal fFlags As MF_FILE_FLAGS, ByVal pwszFileURL As LongPtr, ppIByteStream As IMFByteStream) As Long
Public Declare PtrSafe Function MFCreateTempFile Lib "MFPlat.dll" (ByVal AccessMode As MF_FILE_ACCESSMODE, ByVal OpenMode As MF_FILE_OPENMODE, ByVal fFlags As MF_FILE_FLAGS, ppIByteStream As IMFByteStream) As Long
Public Declare PtrSafe Function MFBeginCreateFile Lib "MFPlat.dll" (ByVal AccessMode As MF_FILE_ACCESSMODE, ByVal OpenMode As MF_FILE_OPENMODE, ByVal fFlags As MF_FILE_FLAGS, ByVal pwszFilePath As LongPtr, ByVal pCallback As IMFAsyncCallback, ByVal pState As IUnknown, ppCancelCookie As IUnknown) As Long
Public Declare PtrSafe Function MFEndCreateFile Lib "MFPlat.dll" (ByVal pResult As IMFAsyncResult, ppFile As IMFByteStream) As Long
Public Declare PtrSafe Function MFCancelCreateFile Lib "MFPlat.dll" (ByVal pCancelCookie As IUnknown) As Long
Public Declare PtrSafe Function MFCreateMemoryBuffer Lib "MFPlat.dll" (ByVal cbMaxLength As Long, ppBuffer As IMFMediaBuffer) As Long
Public Declare PtrSafe Function MFCreateMediaBufferWrapper Lib "MFPlat.dll" (ByVal pBuffer As IMFMediaBuffer, ByVal cbOffset As Long, ByVal dwLength As Long, ppBuffer As IMFMediaBuffer) As Long
Public Declare PtrSafe Function MFCreateLegacyMediaBufferOnMFMediaBuffer Lib "MFPlat.dll" (ByVal pSample As IMFSample, ByVal pMFMediaBuffer As IMFMediaBuffer, ByVal cbOffset As Long, ppMediaBuffer As IMediaBuffer) As Long
Public Declare PtrSafe Function MFMapDX9FormatToDXGIFormat Lib "MFPlat.dll" (ByVal dx9 As D3DFORMAT) As DXGI_FORMAT
Public Declare PtrSafe Function MFMapDXGIFormatToDX9Format Lib "MFPlat.dll" (ByVal dx11 As DXGI_FORMAT) As D3DFORMAT
Public Declare PtrSafe Function MFLockDXGIDeviceManager Lib "MFPlat.dll" (pResetToken As Long, ppManager As IMFDXGIDeviceManager) As Long
Public Declare PtrSafe Function MFUnlockDXGIDeviceManager Lib "MFPlat.dll" () As Long
Public Declare PtrSafe Function MFCreateDXSurfaceBuffer Lib "MFPlat.dll" (riid As UUID, ByVal punkSurface As IUnknown, ByVal fBottomUpWhenLinear As BOOL, ppBuffer As IMFMediaBuffer) As Long
Public Declare PtrSafe Function MFCreateWICBitmapBuffer Lib "MFPlat.dll" (riid As UUID, ByVal punkSurface As IUnknown, ppBuffer As IMFMediaBuffer) As Long
Public Declare PtrSafe Function MFCreateDXGISurfaceBuffer Lib "MFPlat.dll" (riid As UUID, ByVal punkSurface As IUnknown, ByVal uSubresourceIndex As Long, ByVal fBottomUpWhenLinear As BOOL, ppBuffer As IMFMediaBuffer) As Long
Public Declare PtrSafe Function MFCreateDXGICrossAdapterBuffer Lib "MFPlat.dll" (riid As UUID, ByVal punkDevice As IUnknown, ByVal pMediaType As IMFMediaType, ByVal uSubresource As Long, ppBuffer As IMFMediaBuffer) As Long
Public Declare PtrSafe Function MFCreateVideoSampleAllocatorEx Lib "MFPlat.dll" (riid As UUID, ppSampleAllocator As Any) As Long
Public Declare PtrSafe Function MFCreateDXGIDeviceManager Lib "MFPlat.dll" (pResetToken As Long, ppDeviceManager As IMFDXGIDeviceManager) As Long
Public Declare PtrSafe Function MFGetDXGIDeviceManageMode Lib "MFPlat.dll" (ByVal pDeviceManager As IUnknown, mode As MF_DXGI_DEVICE_MANAGER_MODE) As Long

Public Const MF_E_DXGI_DEVICE_NOT_INITIALIZED  = (&H80041000)  ' DXVA2_E_NOT_INITIALIZED
Public Const MF_E_DXGI_NEW_VIDEO_DEVICE  = (&H80041001)  ' DXVA2_E_NEW_VIDEO_DEVICE
Public Const MF_E_DXGI_VIDEO_DEVICE_LOCKED  = (&H80041002)  ' DXVA2_E_VIDEO_DEVICE_LOCKED

Public Enum MF_MEM_ALIGN
    MF_1_BYTE_ALIGNMENT = &H00000000
    MF_2_BYTE_ALIGNMENT = &H00000001
    MF_4_BYTE_ALIGNMENT = &H00000003
    MF_8_BYTE_ALIGNMENT = &H00000007
    MF_16_BYTE_ALIGNMENT = &H0000000f
    MF_32_BYTE_ALIGNMENT = &H0000001f
    MF_64_BYTE_ALIGNMENT = &H0000003f
    MF_128_BYTE_ALIGNMENT = &H0000007f
    MF_256_BYTE_ALIGNMENT = &H000000ff
    MF_512_BYTE_ALIGNMENT = &H000001ff
    MF_1024_BYTE_ALIGNMENT = &H000003ff
    MF_2048_BYTE_ALIGNMENT = &H000007ff
    MF_4096_BYTE_ALIGNMENT = &H00000fff
    MF_8192_BYTE_ALIGNMENT = &H00001fff
End Enum

Public Declare PtrSafe Function MFCreateAlignedMemoryBuffer Lib "MFPlat.dll" (ByVal cbMaxLength As Long, ByVal cbAlignment As MF_MEM_ALIGN, ppBuffer As IMFMediaBuffer) As Long

Public Declare PtrSafe Function MFCreateMediaEvent Lib "MFPlat.dll" (ByVal met As MediaEventType, guidExtendedType As UUID, ByVal hrStatus As Long, pvValue As Variant, ppEvent As IMFMediaEvent) As Long
Public Declare PtrSafe Function MFCreateEventQueue Lib "MFPlat.dll" (ppMediaEventQueue As IMFMediaEventQueue) As Long

Public Enum MFSessionCapabilities
    MFSESSIONCAP_START = &H00000001
    MFSESSIONCAP_SEEK = &H00000002
    MFSESSIONCAP_PAUSE = &H00000004
    MFSESSIONCAP_RATE_FORWARD = &H00000010
    MFSESSIONCAP_RATE_REVERSE = &H00000020
    MFSESSIONCAP_DOES_NOT_USE_NETWORK = &H00000040
End Enum

Public Enum MF_TOPOSTATUS
    '  MF_TOPOSTATUS_INVALID: Invalid value; will not be sent
    MF_TOPOSTATUS_INVALID = 0
    '  MF_TOPOSTATUS_READY: The topology has been put in place and is
    '  ready to start.  All GetService calls to the Media Session will use
    '  this topology.
    MF_TOPOSTATUS_READY = 100
    '  MF_TOPOSTATUS_STARTED_SOURCE: The Media Session has started to read
    '  and process data from the Media Source(s) in this topology.
    MF_TOPOSTATUS_STARTED_SOURCE = 200
    ' #if (WINVER >= _WIN32_WINNT_WIN7)
    '  MF_TOPOSTATUS_DYNAMIC_CHANGED: The topology has been dynamic changed
    '  due to the format change.
    MF_TOPOSTATUS_DYNAMIC_CHANGED = 210
    ' #endif // (WINVER >= _WIN32_WINNT_WIN7)
    '  MF_TOPOSTATUS_SINK_SWITCHED: The Media Sinks in the pipeline have
    '  switched from a previous topology to this topology.
    '  Note that this status does not get sent for the first topology;
    '  applications can assume that the sinks are playing the first
    '  topology when they receive MESessionStarted.
    MF_TOPOSTATUS_SINK_SWITCHED = 300
    '  MF_TOPOSTATUS_ENDED: Playback of this topology is complete.
    '  Before deleting this topology, however, the application should wait
    '  for either MESessionEnded or the MF_TOPOSTATUS_STARTED_SOURCE status
    '  on the next topology to ensure that the Media Session is no longer
    '  using this topology.
    MF_TOPOSTATUS_ENDED = 400
End Enum

Public Declare PtrSafe Function MFCreateSample Lib "MFPlat.dll" (ppIMFSample As IMFSample) As Long

Public Enum MFSampleEncryptionProtectionScheme
    MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_NONE = 0
    MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_AES_CTR = 1
    MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_AES_CBC = 2
End Enum

Public Type MOVE_RECT
    SourcePoint As POINT
    DestRect As RECT
End Type
[Description("HEADER ONLY :: FOLLOW(ED) IN MEMORY BY RECTs")]
Public Type DIRTYRECT_INFO
    FrameNumber As Long
    NumDirtyRects As Long
    'DirtyRects(0 To 0) As RECT
End Type

[Description("HEADER ONLY :: FOLLOW(ED) IN MEMORY BY MOVE_RECTs")]
Public Type MOVEREGION_INFO
    FrameNumber As Long
    NumMoveRegions As Long
    'MoveRegions(0 To 0) As MOVE_RECT
End Type

Public Type ROI_AREA
    rect As RECT
    QPDelta As Long
End Type

Public Enum MFMacroBlockFlags
    MACROBLOCK_FLAG_SKIP = &H00000001
'  Indicates macroblock is changed from the previous frame
    MACROBLOCK_FLAG_DIRTY = &H00000002
'  Indicates macroblock from the previous frame has moved to a new position
    MACROBLOCK_FLAG_MOTION = &H00000004
'  Indicates macroblock contains video playback or other continuous motion, rather than a slower moving screen capture
    MACROBLOCK_FLAG_VIDEO = &H00000008
'  Indicates that the motion vector values of MACROBLOCK_DATA are valid, and should be used in preference to
'  the encoder's calculated motion vector values
    MACROBLOCK_FLAG_HAS_MOTION_VECTOR = &H00000010
'  Indicates that the QPDelta value of MACROBLOCK_DATA is valid, and specifies the QP of this macroblock relative
'  to the rest of the frame
    MACROBLOCK_FLAG_HAS_QP = &H00000020
End Enum
Public Type MACROBLOCK_DATA
    flags As MFMacroBlockFlags
    motionVectorX As Integer
    motionVectorY As Integer
    QPDelta As Long
End Type

Public Enum MFCaptureMetadataScan
    MFCAPTURE_METADATA_SCAN_RIGHT_LEFT = &H00000001
    MFCAPTURE_METADATA_SCAN_BOTTOM_TOP = &H00000002
    MFCAPTURE_METADATA_SCANLINE_VERTICAL = &H00000004
End Enum

Public Type DigitalWindowSetting
    OriginX As Double
    OriginY As Double
    WindowSize As Double
End Type
Public Type FaceRectInfoBlobHeader
    Size As Long ' Size of this header + all FaceRectInfo following
    Count As Long ' Number of FaceRectInfo's in the blob
End Type
Public Type FaceRectInfo
    Region As RECT ' Relative coordinates on the frame (Q31 format)
    confidenceLevel As Long ' Confidence Level of the region being a face
End Type
Public Type FaceCharacterizationBlobHeader
    Size As Long ' Size of this header + all FaceCharacterization following
    Count As Long ' Number of FaceCharacterization's in the blob. Must match the number of FaceRectInfo's in FaceRectInfoBlobHeader
End Type
Public Type FaceCharacterization
    BlinkScoreLeft As Long ' [0, 100]. 0 indicates no blink for the left eye. 100 indicates definite blink for the left eye
    BlinkScoreRight As Long ' [0, 100]. 0 indicates no blink for the right eye. 100 indicates definite blink for the right eye
    FacialExpression As Long ' Any one of the MF_METADATAFACIALEXPRESSION_XXX defined 
    FacialExpressionScore As Long ' [0, 100]. 0 indicates no such facial expression as identified. 100 indicates definite such facial expression as defined
End Type
Public Const MF_METADATAFACIALEXPRESSION_SMILE = 1
Public Type CapturedMetadataExposureCompensation
    Flags As LongLong ' KSCAMERA_EXTENDEDPROP_EVCOMP_XXX step flag
    Value As Long ' EV Compensation value in units of the step  
End Type
Public Type CapturedMetadataISOGains
    AnalogGain As Single
    DigitalGain As Single
End Type
Public Type CapturedMetadataWhiteBalanceGains
    R As Single
    G As Single
    B As Single
End Type
Public Enum MFCaptureMetadataTimestampFlags
    MF_METADATATIMESTAMPS_DEVICE = &H00000001
    MF_METADATATIMESTAMPS_PRESENTATION = &H00000002
End Enum
Public Type MetadataTimeStamps
    Flags As MFCaptureMetadataTimestampFlags ' Bitwise OR of MF_METADATATIMESTAMPS_XXX flags
    Device As LongLong ' QPC time for the sample where the metadata is derived from (in 100ns) 
    Presentation As LongLong ' PTS for the sample where the metadata is derived from (in 100ns)
End Type
Public Type HistogramGrid
    Width As Long ' Width of the sensor output that histogram is collected from
    Height As Long ' Height of the sensor output that histogram is collected from
    Region As RECT ' Absolute coordinates of the region on the sensor output that the histogram is collected for
End Type
Public Type HistogramBlobHeader
    Size As Long ' Size of the entire histogram blob in bytes 
    Histograms As Long ' Number of histograms in the blob. Each histogram is identified by a HistogramHeader
End Type
Public Type HistogramHeader
    Size As Long ' Size in bytes of this header + (HistogramDataHeader + histogram data following)*number of channels available
    Bins As Long ' Number of bins in the histogram
    FourCC As Long ' Color space that the histogram is collected from
    ChannelMasks As MFHistogramChannelMask ' Masks of the color channels that the histogram is collected for
    Grid As HistogramGrid ' Grid that the histogram is collected from
End Type
Public Enum MFHistogramChannelMask
    MF_HISTOGRAM_CHANNEL_Y = &H00000001
    MF_HISTOGRAM_CHANNEL_R = &H00000002
    MF_HISTOGRAM_CHANNEL_G = &H00000004
    MF_HISTOGRAM_CHANNEL_B = &H00000008
    MF_HISTOGRAM_CHANNEL_Cb = &H00000010
    MF_HISTOGRAM_CHANNEL_Cr = &H00000020
End Enum
Public Type HistogramDataHeader
    Size As Long ' Size in bytes of this header + histogram data following
    ChannelMask As MFHistogramChannelMask ' Mask of the color channel for the histogram data
    Linear As Long ' 1, if linear; 0 nonlinear
End Type

Public Declare PtrSafe Function MFCreateAttributes Lib "MFPlat.DLL" (ByRef ppMFAttributes As IMFAttributes, ByVal cInitialSize As Long) As Long
Public Declare PtrSafe Function MFInitAttributesFromBlob Lib "MFPlat.DLL" (ByVal pAttributes As IMFAttributes, pBuf As Any, ByVal cbBufSize As Long) As Long
Public Declare PtrSafe Function MFGetAttributesAsBlobSize Lib "MFPlat.DLL" (ByVal pAttributes As IMFAttributes, pcbBufSize As Long) As Long
Public Declare PtrSafe Function MFGetAttributesAsBlob Lib "MFPlat.DLL" (ByVal pAttributes As IMFAttributes, pBuf As Any, ByVal cbBufSize As Long) As Long

#If Win64 Then
Public Declare PtrSafe Function MFTRegister Lib "MFPlat.DLL" (clsidMFT As UUID, guidCategory As UUID, ByVal pszName As LongPtr, ByVal Flags As MFT_ENUM_FLAG, ByVal cInputTypes As Long, pInputTypes As MFT_REGISTER_TYPE_INFO, ByVal cOutputTypes As Long, pOutputTypes As MFT_REGISTER_TYPE_INFO, ByVal pAttributes As IMFAttributes) As Long
Public Declare PtrSafe Function MFTUnregister Lib "MFPlat.DLL" (clsidMFT As UUID) As Long
Public Declare PtrSafe Function MFTUnregisterLocalByCLSID Lib "MFPlat.DLL" (clsidMFT As UUID) As Long
[Description("result *ppclsidMFT must be freed with CoTaskMemFree.")]
Public Declare PtrSafe Function MFTEnum Lib "MFPlat.DLL" (guidCategory As UUID, ByVal Flags As Long, pInputType As MFT_REGISTER_TYPE_INFO, pOutputType As MFT_REGISTER_TYPE_INFO, ByVal pAttributes As IMFAttributes, ppclsidMFT As LongPtr, pcMFTs As Long) As Long
Public Declare PtrSafe Function MFTEnumEx Lib "MFPlat.DLL" (guidCategory As UUID, ByVal Flags As Long, pInputType As MFT_REGISTER_TYPE_INFO, pOutputType As MFT_REGISTER_TYPE_INFO, pppMFTActivate As LongPtr, pnumMFTActivate As Long) As Long
Public Declare PtrSafe Function MFTEnum2 Lib "MFPlat.DLL" (guidCategory As UUID, ByVal Flags As Long, pInputType As MFT_REGISTER_TYPE_INFO, pOutputType As MFT_REGISTER_TYPE_INFO, ByVal pAttributes As IMFAttributes, pppMFTActivate As LongPtr, pnumMFTActivate As Long) As Long
Public Declare PtrSafe Function MFTGetInfo Lib "MFPlat.DLL" (clsidMFT As UUID, pszName As LongPtr, ppInputTypes As LongPtr, pcInputTypes As Long, ppOutputTypes As LongPtr, pcOutputTypes As Long, ppAttributes As IMFAttributes) As Long
#Else
Public Declare PtrSafe Function MFTRegister Lib "MFPlat.DLL" (ByVal clsidMFT1 As Long, ByVal clsidMFT2 As Long, ByVal clsidMFT3 As Long, ByVal clsidMFT4 As Long, ByVal guidCategory1 As Long, ByVal guidCategory2 As Long, ByVal guidCategory3 As Long, ByVal guidCategory4 As Long, ByVal pszName As LongPtr, ByVal Flags As MFT_ENUM_FLAG, ByVal cInputTypes As Long, pInputTypes As MFT_REGISTER_TYPE_INFO, ByVal cOutputTypes As Long, pOutputTypes As MFT_REGISTER_TYPE_INFO, ByVal pAttributes As IMFAttributes) As Long
Public Declare PtrSafe Function MFTUnregister Lib "MFPlat.DLL" (ByVal clsidMFT1 As Long, ByVal clsidMFT2 As Long, ByVal clsidMFT3 As Long, ByVal clsidMFT4 As Long) As Long
Public Declare PtrSafe Function MFTUnregisterLocalByCLSID Lib "MFPlat.DLL" (ByVal clsidMFT1 As Long, ByVal clsidMFT2 As Long, ByVal clsidMFT3 As Long, ByVal clsidMFT4 As Long) As Long
[Description("result *ppclsidMFT must be freed with CoTaskMemFree.")]
Public Declare PtrSafe Function MFTEnum Lib "MFPlat.DLL" (ByVal guidCategory1 As Long, ByVal guidCategory2 As Long, ByVal guidCategory3 As Long, ByVal guidCategory4 As Long, ByVal Flags As Long, pInputType As MFT_REGISTER_TYPE_INFO, pOutputType As MFT_REGISTER_TYPE_INFO, ByVal pAttributes As IMFAttributes, ppclsidMFT As LongPtr, pcMFTs As Long) As Long
Public Declare PtrSafe Function MFTEnumEx Lib "MFPlat.DLL" (ByVal guidCategory1 As Long, ByVal guidCategory2 As Long, ByVal guidCategory3 As Long, ByVal guidCategory4 As Long, ByVal Flags As Long, pInputType As MFT_REGISTER_TYPE_INFO, pOutputType As MFT_REGISTER_TYPE_INFO, pppMFTActivate As LongPtr, pnumMFTActivate As Long) As Long
Public Declare PtrSafe Function MFTEnum2 Lib "MFPlat.DLL" (ByVal guidCategory1 As Long, ByVal guidCategory2 As Long, ByVal guidCategory3 As Long, ByVal guidCategory4 As Long, ByVal Flags As Long, pInputType As MFT_REGISTER_TYPE_INFO, pOutputType As MFT_REGISTER_TYPE_INFO, ByVal pAttributes As IMFAttributes, pppMFTActivate As LongPtr, pnumMFTActivate As Long) As Long
Public Declare PtrSafe Function MFTGetInfo Lib "MFPlat.DLL" (ByVal clsidMFT1 As Long, ByVal clsidMFT2 As Long, ByVal clsidMFT3 As Long, ByVal clsidMFT4 As Long, pszName As LongPtr, ppInputTypes As LongPtr, pcInputTypes As Long, ppOutputTypes As LongPtr, pcOutputTypes As Long, ppAttributes As IMFAttributes) As Long
#End If
Public Declare PtrSafe Function MFTRegisterLocal Lib "MFPlat.DLL" (ByVal pClassFactory As IClassFactory, guidCategory As UUID, ByVal pszName As LongPtr, ByVal Flags As MFT_ENUM_FLAG, ByVal cInputTypes As Long, pInputTypes As MFT_REGISTER_TYPE_INFO, ByVal cOutputTypes As Long, pOutputTypes As MFT_REGISTER_TYPE_INFO, ByVal pAttributes As IMFAttributes) As Long
Public Declare PtrSafe Function MFTUnregisterLocal Lib "MFPlat.DLL" (ByVal pClassFactory As IClassFactory) As Long
Public Declare PtrSafe Function MFTRegisterLocalByCLSID Lib "MFPlat.DLL" (clsidMFT As UUID, guidCategory As UUID, ByVal pszName As LongPtr, ByVal Flags As MFT_ENUM_FLAG, ByVal cInputTypes As Long, pInputTypes As MFT_REGISTER_TYPE_INFO, ByVal cOutputTypes As Long, pOutputTypes As MFT_REGISTER_TYPE_INFO, ByVal pAttributes As IMFAttributes) As Long


Public Enum MFT_ENUM_FLAG
    MFT_ENUM_FLAG_SYNCMFT = &H00000001 ' Enumerates V1 MFTs. This is default.
    MFT_ENUM_FLAG_ASYNCMFT = &H00000002 ' Enumerates only software async MFTs also known as V2 MFTs
    MFT_ENUM_FLAG_HARDWARE = &H00000004 ' Enumerates V2 hardware async MFTs
    MFT_ENUM_FLAG_FIELDOFUSE = &H00000008 ' Enumerates MFTs that require unlocking
    MFT_ENUM_FLAG_LOCALMFT = &H00000010 ' Enumerates Locally (in-process) registered MFTs
    MFT_ENUM_FLAG_TRANSCODE_ONLY = &H00000020 ' Enumerates decoder MFTs used by transcode only
    MFT_ENUM_FLAG_SORTANDFILTER = &H00000040 ' Apply system local, do not use and preferred sorting and filtering
    MFT_ENUM_FLAG_SORTANDFILTER_APPROVED_ONLY = &H000000C0 ' Similar to MFT_ENUM_FLAG_SORTANDFILTER, but apply a local policy of: MF_PLUGIN_CONTROL_POLICY_USE_APPROVED_PLUGINS
    MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY = &H00000140 ' Similar to MFT_ENUM_FLAG_SORTANDFILTER, but apply a local policy of: MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS
    MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY_EDGEMODE = &H00000240 ' Similar to MFT_ENUM_FLAG_SORTANDFILTER, but apply a local policy of: MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS_EDGEMODE
    MFT_ENUM_FLAG_UNTRUSTED_STOREMFT = &H00000400 ' Enumerates all untrusted store MFTs downloaded from the store
    MFT_ENUM_FLAG_ALL = &H0000003F ' Enumerates all MFTs including SW and HW MFTs and applies filtering
End Enum

Public Declare PtrSafe Function MFGetPluginControl Lib "MFPlat.DLL" (ppPluginControl As IMFPluginControl) As Long
Public Declare PtrSafe Function MFGetMFTMerit Lib "MFPlat.DLL" (ByVal pMFT As IUnknown, ByVal cbVerifier As Long, verifier As Any, merit As Long) As Long
Public Declare PtrSafe Function MFRegisterLocalSchemeHandler Lib "MFPlat.DLL" (ByVal szScheme As LongPtr, ByVal pActivate As IMFActivate) As Long
Public Declare PtrSafe Function MFRegisterLocalByteStreamHandler Lib "MFPlat.DLL" (ByVal szFileExtension As LongPtr, ByVal szMimeType As LongPtr, ByVal pActivate As IMFActivate) As Long
Public Declare PtrSafe Function MFCreateMFByteStreamWrapper Lib "MFPlat.DLL" (ByVal pStream As IMFByteStream, ppStreamWrapper As IMFByteStream) As Long
Public Declare PtrSafe Function MFCreateMediaExtensionActivate Lib "MFPlat.DLL" (ByVal szActivatableClassId As LongPtr, ByVal pConfiguration As IUnknown, riid As UUID, ppvObject As Any) As Long

Public Enum MFFrameSourceTypes
    MFFrameSourceTypes_Color = &H0001
    MFFrameSourceTypes_Infrared = &H0002
    MFFrameSourceTypes_Depth = &H0004
    MFFrameSourceTypes_Image = &H0008
    MFFrameSourceTypes_Custom = &H0080
End Enum

Public Enum MFVideo3DFormat
    MFVideo3DSampleFormat_BaseView = 0
    MFVideo3DSampleFormat_MultiView = 1
    MFVideo3DSampleFormat_Packed_LeftRight = 2
    MFVideo3DSampleFormat_Packed_TopBottom = 3
End Enum
Public Enum MFVideo3DSampleFormat
    MFSampleExtension_3DVideo_MultiView = 1
    MFSampleExtension_3DVideo_Packed = 0
End Enum

Public Enum MFVideoRotationFormat
    MFVideoRotationFormat_0 = 0
    MFVideoRotationFormat_90 = 90
    MFVideoRotationFormat_180 = 180
    MFVideoRotationFormat_270 = 270
End Enum

Public Declare PtrSafe Function MFCreateMuxStreamAttributes Lib "MFPlat.DLL" (ByVal pAttributesToMux As IMFCollection, ppMuxAttribs As IMFAttributes) As Long
Public Declare PtrSafe Function MFCreateMuxStreamMediaType Lib "MFPlat.DLL" (ByVal pMediaTypesToMux As IMFCollection, ppMuxMediaType As IMFMediaType) As Long
Public Declare PtrSafe Function MFCreateMuxStreamSample Lib "MFPlat.DLL" (ByVal pSamplesToMux As IMFCollection, ppMuxSample As IMFSample) As Long

Public Enum MFDepthMeasurement
    DistanceToFocalPlane = 0
    DistanceToOpticalCenter = 1
End Enum

Public Enum MF_CUSTOM_DECODE_UNIT_TYPE
    MF_DECODE_UNIT_NAL = 0
    MF_DECODE_UNIT_SEI = 1
End Enum

Public Type MFFOLDDOWN_MATRIX
    cbSize As Long
    cSrcChannels As Long ' number of source channels
    cDstChannels As Long ' number of destination channels
    dwChannelMask As Long ' mask
    Coeff(0 To 63) As Long
End Type

Public Enum MFVideoDRMFlags
    MFVideoDRMFlag_None = 0
    MFVideoDRMFlag_AnalogProtected = 1
    MFVideoDRMFlag_DigitallyProtected = 2
End Enum

Public Enum MFVideoPadFlags
    MFVideoPadFlag_PAD_TO_None = 0
    MFVideoPadFlag_PAD_TO_4x3 = 1
    MFVideoPadFlag_PAD_TO_16x9 = 2
End Enum
Public Enum MFVideoSrcContentHintFlags
    MFVideoSrcContentHintFlag_None = 0
    MFVideoSrcContentHintFlag_16x9 = 1
    MFVideoSrcContentHintFlag_235_1 = 2
End Enum

Public Type MT_CUSTOM_VIDEO_PRIMARIES
    fRx As Single
    fRy As Single
    fGx As Single
    fGy As Single
    fBx As Single
    fBy As Single
    fWx As Single
    fWy As Single
End Type

Public Type MT_ARBITRARY_HEADER
    majortype As UUID
    subtype As UUID
    bFixedSizeSamples As BOOL
    bTemporalCompression As BOOL
    lSampleSize As Long
    formattype As UUID
End Type

Public Type MF_FLOAT2
    x As Single
    y As Single
End Type
Public Type MF_FLOAT3
    x As Single
    y As Single
    z As Single
End Type
Public Type MF_QUATERNION
    x As Single
    y As Single
    z As Single
    w As Single
End Type
Public Type MFCameraExtrinsic_CalibratedTransform
    CalibrationId As UUID
    Position As MF_FLOAT3
    Orientation As MF_QUATERNION
End Type
[Description("⚠️ **WARNING:** This structure cannot be used as-is directly due to SAFEARRAY considerations. Copy count and array separately.")]
Public Type MFCameraExtrinsics
    TransformCount As Long
    CalibratedTransforms() As MFCameraExtrinsic_CalibratedTransform
End Type
Public Type MFCameraIntrinsic_PinholeCameraModel
    FocalLength As MF_FLOAT2
    PrincipalPoint As MF_FLOAT2
End Type

Public Type MFCameraIntrinsic_DistortionModel
    Radial_k1 As Single
    Radial_k2 As Single
    Radial_k3 As Single
    Tangential_p1 As Single
    Tangential_p2 As Single
End Type

Public Type MFPinholeCameraIntrinsic_IntrinsicModel
    Width As Long
    Height As Long
    CameraModel As MFCameraIntrinsic_PinholeCameraModel
    DistortionModel As MFCameraIntrinsic_DistortionModel
End Type
[Description("⚠️ **WARNING:** This structure cannot be used as-is directly due to SAFEARRAY considerations. Copy count and array separately.")]
Public Type MFPinholeCameraIntrinsics
    IntrinsicModelCount As Long
    IntrinsicModels() As MFPinholeCameraIntrinsic_IntrinsicModel
End Type

#If Win64 Then
Public Declare PtrSafe Function MFValidateMediaTypeSize Lib "MFPlat.DLL" (FormatType As UUID, pBlock As Any, ByVal cbSize As Long) As Long
#Else
Public Declare PtrSafe Function MFValidateMediaTypeSize Lib "MFPlat.DLL" (ByVal FormatTypeGuid1 As Long, ByVal FormatTypeGuid2 As Long, ByVal FormatTypeGuid3 As Long, ByVal FormatTypeGuid4 As Long, pBlock As Any, ByVal cbSize As Long) As Long
#End If

Public Declare PtrSafe Function MFCreateMediaType Lib "MFPlat.DLL" (ppMFType As IMFMediaType) As Long
[PreserveSig(False)]
Public Declare PtrSafe Function MFCreateMediaType Lib "MFPlat.DLL" () As IMFMediaType
Public Declare PtrSafe Function MFCreateMFVideoFormatFromMFMediaType Lib "MFPlat.DLL" (ByVal pMFType As IMFMediaType, ppMFVF As LongPtr, pcbSize As Long) As Long

Public Enum MFWaveFormatExConvertFlags
    MFWaveFormatExConvertFlag_Normal = 0
    MFWaveFormatExConvertFlag_ForceExtensible = 1
End Enum

Public Enum VidHeaderCopyProtectFlags
    AMCOPYPROTECT_RestrictDuplication = 1
End Enum
Public Enum VidHeaderControlFlags
    AMCONTROL_USED = &H00000001  ' Used to test if these flags are supported.  Set and test for AcceptMediaType.
'  If rejected, then you cannot use the AMCONTROL flags (send 0 for dwReserved1)
    AMCONTROL_PAD_TO_4x3 = &H00000002  ' if set means display the image in a 4x3 area
    AMCONTROL_PAD_TO_16x9 = &H00000004  ' if set means display the image in a 16x9 area
    AMCONTROL_COLORINFO_PRESENT = &H00000080  ' if set, indicates DXVA color info is present in the upper (24) bits of the dwControlFlags
End Enum

Public Type VIDEOINFOHEADER
    rcSource As RECT
    rcTarget As RECT
    dwBitRate As Long
    dwBitErrorRate As Long
    AvgTimePerFrame As LongLong 'REFERENCE_TIME
    bmiHeader As BITMAPINFOHEADER
End Type
Public Type VIDEOINFOHEADER2
    rcSource As RECT
    rcTarget As RECT
    dwBitRate As Long
    dwBitErrorRate As Long
    AvgTimePerFrame As LongLong 'REFERENCE_TIME
    dwInterlaceFlags As VidHeaderInterlaceFlags
    dwCopyProtectFlags As VidHeaderCopyProtectFlags
    dwPictAspectRatioX As Long
    dwPictAspectRatioY As Long
    '    union {
    dwControlFlags As VidHeaderControlFlags
    '        DWORD dwReserved1;
    '    } DUMMYUNIONNAME;
    dwReserved2 As Long
    bmiHeader As BITMAPINFOHEADER
End Type

Public Enum AM_MPEG2Level
    AM_MPEG2Level_Low = 1
    AM_MPEG2Level_Main = 2
    AM_MPEG2Level_High1440 = 3
    AM_MPEG2Level_High = 4
End Enum
Public Enum AM_MPEG2Profile
    AM_MPEG2Profile_Simple = 1
    AM_MPEG2Profile_Main = 2
    AM_MPEG2Profile_SNRScalable = 3
    AM_MPEG2Profile_SpatiallyScalable = 4
    AM_MPEG2Profile_High = 5
End Enum
Public Enum Mpeg2VidInfoFlags
    AMMPEG2_DoPanScan = &H00000001  'if set, the MPEG-2 video decoder should crop output image
'   based on pan-scan vectors in picture_display_extension
'   and change the picture aspect ratio accordingly.
    AMMPEG2_DVDLine21Field1 = &H00000002  'if set, the MPEG-2 decoder must be able to produce an output
'   pin for DVD style closed caption data found in GOP layer of field 1
    AMMPEG2_DVDLine21Field2 = &H00000004  'if set, the MPEG-2 decoder must be able to produce an output
'   pin for DVD style closed caption data found in GOP layer of field 2
    AMMPEG2_SourceIsLetterboxed = &H00000008  'if set, indicates that black bars have been encoded in the top
'   and bottom of the video.
    AMMPEG2_FilmCameraMode = &H00000010  'if set, indicates "film mode" used for 625/50 content.  If cleared,
'   indicates that "camera mode" was used.
    AMMPEG2_LetterboxAnalogOut = &H00000020  'if set and this stream is sent to an analog output, it should
'   be letterboxed.  Streams sent to VGA should be letterboxed only by renderers.
    AMMPEG2_DSS_UserData = &H00000040  'if set, the MPEG-2 decoder must process DSS style user data
    AMMPEG2_DVB_UserData = &H00000080  'if set, the MPEG-2 decoder must process DVB style user data
    AMMPEG2_27MhzTimebase = &H00000100  'if set, the PTS,DTS timestamps advance at 27MHz rather than 90KHz
    AMMPEG2_WidescreenAnalogOut = &H00000200  'if set and this stream is sent to an analog output, it should
'   be in widescreen format (4x3 content should be centered on a 16x9 output).
'   Streams sent to VGA should be widescreened only by renderers.
End Enum

Public Type MPEG1VIDEOINFO
    hdr As VIDEOINFOHEADER ' Compatible with VIDEOINFO
    dwStartTimeCode As Long ' 25-bit Group of pictures time code
    ' at start of data
    cbSequenceHeader As Long ' Length in bytes of bSequenceHeader
    bSequenceHeader(0 To 139) As Byte ' Sequence header including
    ' quantization matrices if any
End Type
Public Type MPEG2VIDEOINFO
    hdr As VIDEOINFOHEADER2
    dwStartTimeCode As Long
    cbSequenceHeader As Long
    dwProfile As AM_MPEG2Profile
    dwLevel As AM_MPEG2Level
    dwFlags As Mpeg2VidInfoFlags
    dwSequenceHeader(0 To 140) As Long
End Type

Public Enum VidHeaderInterlaceFlags
    AMINTERLACE_IsInterlaced = &H00000001  ' if 0, other interlace bits are irrelevent
    AMINTERLACE_1FieldPerSample = &H00000002  ' else 2 fields per media sample
    AMINTERLACE_Field1First = &H00000004  ' else Field 2 is first;  top field in PAL is field 1, top field in NTSC is field 2?
    AMINTERLACE_UNUSED = &H00000008  '
    AMINTERLACE_FieldPatternMask = &H00000030  ' use this mask with AMINTERLACE_FieldPat*
    AMINTERLACE_FieldPatField1Only = &H00000000  ' stream never contains a Field2
    AMINTERLACE_FieldPatField2Only = &H00000010  ' stream never contains a Field1
    AMINTERLACE_FieldPatBothRegular = &H00000020  ' There will be a Field2 for every Field1 (required for Weave?)
    AMINTERLACE_FieldPatBothIrregular = &H00000030  ' Random pattern of Field1s and Field2s
    AMINTERLACE_DisplayModeMask = &H000000c0
    AMINTERLACE_DisplayModeBobOnly = &H00000000
    AMINTERLACE_DisplayModeWeaveOnly = &H00000040
    AMINTERLACE_DisplayModeBobOrWeave = &H00000080
End Enum
 


Public Declare PtrSafe Function MFCreateWaveFormatExFromMFMediaType Lib "MFPlat.DLL" (ByVal pMFType As IMFMediaType, ppWF As LongPtr, pcbSize As Long, ByVal Flags As MFWaveFormatExConvertFlags) As Long
Public Declare PtrSafe Function MFInitMediaTypeFromVideoInfoHeader Lib "MFPlat.DLL" (ByVal pMFType As IMFMediaType, pVIH As VIDEOINFOHEADER, ByVal cbBufSize As Long, pSubtype As UUID) As Long
Public Declare PtrSafe Function MFInitMediaTypeFromVideoInfoHeader2 Lib "MFPlat.DLL" (ByVal pMFType As IMFMediaType, pVIH2 As VIDEOINFOHEADER2, ByVal cbBufSize As Long, pSubtype As UUID) As Long
Public Declare PtrSafe Function MFInitMediaTypeFromMPEG1VideoInfo Lib "MFPlat.DLL" (ByVal pMFType As IMFMediaType, pMP1VI As MPEG1VIDEOINFO, ByVal cbBufSize As Long, pSubtype As UUID) As Long
Public Declare PtrSafe Function MFInitMediaTypeFromMPEG2VideoInfo Lib "MFPlat.DLL" (ByVal pMFType As IMFMediaType, pMP2VI As MPEG2VIDEOINFO, ByVal cbBufSize As Long, pSubtype As UUID) As Long
Public Declare PtrSafe Function MFCalculateBitmapImageSize Lib "MFPlat.DLL" (pBMIH As BITMAPINFOHEADER, ByVal cbBufSize As Long, pcbImageSize As Long, pbKnown As BOOL) As Long
Public Declare PtrSafe Function MFCalculateImageSize Lib "MFPlat.DLL" (guidSubtype As UUID, ByVal unWidth As Long, ByVal unHeight As Long, pcbImageSize As Long) As Long
Public Declare PtrSafe Function MFFrameRateToAverageTimePerFrame Lib "MFPlat.DLL" (ByVal unNumerator As Long, ByVal unDenominator As Long, punAverageTimePerFrame As LongLong) As Long
Public Declare PtrSafe Function MFAverageTimePerFrameToFrameRate Lib "MFPlat.DLL" (ByVal unAverageTimePerFrame As LongLong, punNumerator As Long, punDenominator As Long) As Long
Public Declare PtrSafe Function MFInitMediaTypeFromWaveFormatEx Lib "MFPlat.DLL" (ByVal pMFType As IMFMediaType, pWaveFormat As WAVEFORMATEX, ByVal cbBufSize As Long) As Long
Public Declare PtrSafe Function MFInitMediaTypeFromMFVideoFormat Lib "MFPlat.DLL" (ByVal pMFType As IMFMediaType, pMFVF As MFVIDEOFORMAT, ByVal cbBufSize As Long) As Long
Public Declare PtrSafe Function MFInitMediaTypeFromAMMediaType Lib "MFPlat.DLL" (ByVal pMFType As IMFMediaType, pAMType As AM_MEDIA_TYPE) As Long
#If Win64 Then
Public Declare PtrSafe Function MFInitAMMediaTypeFromMFMediaType Lib "MFPlat.DLL" (ByVal pMFType As IMFMediaType, guidFormatBlockType As UUID, pAMType As AM_MEDIA_TYPE) As Long
Public Declare PtrSafe Function MFCreateAMMediaTypeFromMFMediaType Lib "MFPlat.DLL" (ByVal pMFType As IMFMediaType, guidFormatBlockType As UUID, ppAMType As LongPtr) As Long
#Else
Public Declare PtrSafe Function MFInitAMMediaTypeFromMFMediaType Lib "MFPlat.DLL" (ByVal pMFType As IMFMediaType, ByVal guidFormatBlockType1 As Long, ByVal guidFormatBlockType2 As Long, ByVal guidFormatBlockType3 As Long, ByVal guidFormatBlockType4 As Long, pAMType As AM_MEDIA_TYPE) As Long
Public Declare PtrSafe Function MFCreateAMMediaTypeFromMFMediaType Lib "MFPlat.DLL" (ByVal pMFType As IMFMediaType, ByVal guidFormatBlockType1 As Long, ByVal guidFormatBlockType2 As Long, ByVal guidFormatBlockType3 As Long, ByVal guidFormatBlockType4 As Long, ppAMType As LongPtr) As Long
#End If
Public Declare PtrSafe Function MFCompareFullToPartialMediaType Lib "MFPlat.DLL" (ByVal pMFTypeFull As IMFMediaType, ByVal pMFTypePartial As IMFMediaType) As BOOL
Public Declare PtrSafe Function MFWrapMediaType Lib "MFPlat.DLL" (ByVal pOrig As IMFMediaType, MajorType As UUID, SubType As UUID, ppWrap As IMFMediaType) As Long
Public Declare PtrSafe Function MFUnwrapMediaType Lib "MFPlat.DLL" (ByVal pWrap As IMFMediaType, ppOrig As IMFMediaType) As Long
Public Declare PtrSafe Function MFGetStrideForBitmapInfoHeader Lib "MFPlat.DLL" ([TypeHint(D3DFORMAT)] ByVal format As Long, ByVal dwWidth As Long, pStride As Long) As Long

Public Type KS_BITMAPINFOHEADER
    biSize As Long
    biWidth As Long
    biHeight As Long
    biPlanes As Integer
    biBitCount As Integer
    biCompression As Long
    biSizeImage As Long
    biXPelsPerMeter As Long
    biYPelsPerMeter As Long
    biClrUsed As Long
    biClrImportant As Long
End Type
Public Type KS_VIDEOINFOHEADER
    rcSource As RECT ' The bit we really want to use
    rcTarget As RECT ' Where the video should go
    dwBitRate As Long ' Approximate bit data rate
    dwBitErrorRate As Long ' Bit error rate for this stream
    AvgTimePerFrame As LongLong 'REFERENCE_TIME ' Average time per frame (100ns units)
    bmiHeader As KS_BITMAPINFOHEADER
End Type
Public Enum KS_MPEG2Level
    KS_MPEG2Level_Low = 1
    KS_MPEG2Level_Main = 2
    KS_MPEG2Level_High1440 = 3
    KS_MPEG2Level_High = 4
End Enum
Public Enum KS_MPEG2Profile
    KS_MPEG2Profile_Simple = 1
    KS_MPEG2Profile_Main = 2
    KS_MPEG2Profile_SNRScalable = 3
    KS_MPEG2Profile_SpatiallyScalable = 4
    KS_MPEG2Profile_High = 5
End Enum
Public Enum KSVHControlFlags
    KS_AMCONTROL_USED = &H00000001  ' Used to test if these flags are supported.  Set and test for AcceptMediaType.
'  If rejected, then you cannot use the AMCONTROL flags (send 0 for dwReserved1)
    KS_AMCONTROL_PAD_TO_4x3 = &H00000002  ' if set means display the image in a 4x3 area
    KS_AMCONTROL_PAD_TO_16x9 = &H00000004  ' if set means display the image in a 16x9 area
    KS_AMCONTROL_COLORINFO_PRESENT = &H00000080  ' if set, indicates DXVA color info is present in the upper (24) bits of the dwControlFlags
End Enum
Public Enum KSVidHeaderCopyProtectFlags
    KSCOPYPROTECT_RestrictDuplication = 1
End Enum
Public Enum KsVidHeaderInterlaceFlags
    KS_INTERLACE_IsInterlaced = &H00000001  ' if 0, other interlace bits are irrelevent
    KS_INTERLACE_1FieldPerSample = &H00000002  ' else 2 fields per media sample
    KS_INTERLACE_Field1First = &H00000004  ' else Field 2 is first;  top field in PAL is field 1, top field in NTSC is field 2?
    KS_INTERLACE_UNUSED = &H00000008  '
    KS_INTERLACE_FieldPatternMask = &H00000030  ' use this mask with AMINTERLACE_FieldPat*
    KS_INTERLACE_FieldPatField1Only = &H00000000  ' Data never contains a Field2
    KS_INTERLACE_FieldPatField2Only = &H00000010  ' Data never contains a Field1
    KS_INTERLACE_FieldPatBothRegular = &H00000020  ' There will be a Field2 for every Field1 (required for Weave?)
    KS_INTERLACE_FieldPatBothIrregular = &H00000030  ' Random pattern of Field1s and Field2s
    KS_INTERLACE_DisplayModeMask = &H000000c0
    KS_INTERLACE_DisplayModeBobOnly = &H00000000
    KS_INTERLACE_DisplayModeWeaveOnly = &H00000040
    KS_INTERLACE_DisplayModeBobOrWeave = &H00000080
End Enum
Public Type KS_VIDEOINFOHEADER2
    rcSource As RECT
    rcTarget As RECT
    dwBitRate As Long
    dwBitErrorRate As Long
    AvgTimePerFrame As LongLong 'REFERENCE_TIME
    dwInterlaceFlags As KsVidHeaderInterlaceFlags ' use AMINTERLACE_* defines. Reject connection if undefined bits are not 0
    dwCopyProtectFlags As KSVidHeaderCopyProtectFlags ' use KS_COPYPROTECT_* defines. Reject connection if undefined bits are not 0
    dwPictAspectRatioX As Long ' X dimension of picture aspect ratio, e.g. 16 for 16x9 display
    dwPictAspectRatioY As Long ' Y dimension of picture aspect ratio, e.g.  9 for 16x9 display
    '    union {
    dwControlFlags As KSVHControlFlags ' use KS_AMCONTROL_* defines, use this from now on
    '        DWORD dwReserved1;                  // for backward compatiblity (was "must be 0";  connection rejected otherwise)
    '    };
    dwReserved2 As Long ' must be 0; reject connection otherwise
    bmiHeader As KS_BITMAPINFOHEADER
End Type

Public Declare PtrSafe Function MFCreateVideoMediaTypeFromVideoInfoHeader Lib "MFPlat.DLL" (pVideoInfoHeader As KS_VIDEOINFOHEADER, ByVal cbVideoInfoHeader As Long, ByVal dwPixelAspectRatioX As Long, ByVal dwPixelAspectRatioY As Long, ByVal InterlaceMode As MFVideoInterlaceMode, [TypeHint(MFVideoFlags)] ByVal VideoFlags As LongLong, pSubtype As UUID, ppIVideoMediaType As IMFVideoMediaType) As Long
Public Declare PtrSafe Function MFCreateVideoMediaTypeFromVideoInfoHeader2 Lib "MFPlat.DLL" (pVideoInfoHeader As KS_VIDEOINFOHEADER2, ByVal cbVideoInfoHeader As Long, [TypeHint(MFVideoFlags)] ByVal AdditionalVideoFlags As LongLong, pSubtype As UUID, ppIVideoMediaType As IMFVideoMediaType) As Long
Public Declare PtrSafe Function MFCreateVideoMediaType Lib "MFPlat.DLL" (pVideoFormat As MFVIDEOFORMAT, ppIVideoMediaType As IMFVideoMediaType) As Long
Public Declare PtrSafe Function MFCreateVideoMediaTypeFromSubtype Lib "MFPlat.DLL" (pAMSubtype As UUID, ppIVideoMediaType As IMFVideoMediaType) As Long
Public Declare PtrSafe Function MFIsFormatYUV Lib "evr.dll" ([TypeHint(D3DFORMAT)] ByVal format As Long) As BOOL
Public Declare PtrSafe Function MFCreateVideoMediaTypeFromBitMapInfoHeader Lib "MFPlat.DLL" (pbmihBitMapInfoHeader As BITMAPINFOHEADER, ByVal dwPixelAspectRatioX As Long, ByVal dwPixelAspectRatioY As Long, ByVal InterlaceMode As MFVideoInterlaceMode, [TypeHint(MFVideoFlags)] ByVal VideoFlags As LongLong, ByVal qwFramesPerSecondNumerator As LongLong, ByVal qwFramesPerSecondDenominator As LongLong, ByVal dwMaxBitRate As Long, ppIVideoMediaType As IMFVideoMediaType) As Long
Public Declare PtrSafe Function MFGetPlaneSize Lib "MFPlat.DLL" ([TypeHint(D3DFORMAT)] ByVal format As Long, ByVal dwWidth As Long, ByVal dwHeight As Long, pdwPlaneSize As Long) As Long
Public Declare PtrSafe Function MFCreateVideoMediaTypeFromBitMapInfoHeaderEx Lib "MFPlat.DLL" (pbmihBitMapInfoHeader As BITMAPINFOHEADER, ByVal cbBitMapInfoHeader As Long, ByVal dwPixelAspectRatioX As Long, ByVal dwPixelAspectRatioY As Long, ByVal InterlaceMode As MFVideoInterlaceMode, [TypeHint(MFVideoFlags)] ByVal VideoFlags As LongLong, ByVal dwFramesPerSecondNumerator As Long, ByVal dwFramesPerSecondDenominator As Long, ByVal dwMaxBitRate As Long, ppIVideoMediaType As IMFVideoMediaType) As Long
#If Win64 Then
Public Declare PtrSafe Function MFCreateMediaTypeFromRepresentation Lib "MFPlat.DLL" (guidRepresentation As UUID, pvRepresentation As Any, ppIMediaType As IMFMediaType) As Long
#Else
Public Declare PtrSafe Function MFCreateMediaTypeFromRepresentation Lib "MFPlat.DLL" (ByVal guidRepresentation1 As Long, ByVal guidRepresentation2 As Long, ByVal guidRepresentation3 As Long, ByVal guidRepresentation4 As Long, pvRepresentation As Any, ppIMediaType As IMFMediaType) As Long
#End If
Public Declare PtrSafe Function MFCreateAudioMediaType Lib "MFPlat.DLL" (pAudioFormat As Any, ppIAudioMediaType As IMFAudioMediaType) As Long
Public Declare PtrSafe Function MFGetUncompressedVideoFormat Lib "MFPlat.DLL" (pVideoFormat As MFVIDEOFORMAT) As Long
Public Declare PtrSafe Function MFInitVideoFormat Lib "MFPlat.DLL" (pVideoFormat As MFVIDEOFORMAT, ByVal type As MFStandardVideoFormat) As Long
Public Declare PtrSafe Function MFInitVideoFormat_RGB Lib "MFPlat.DLL" (pVideoFormat As MFVIDEOFORMAT, ByVal dwWidth As Long, ByVal dwHeight As Long, ByVal D3Dfmt As D3DFORMAT) As Long
Public Declare PtrSafe Function MFConvertColorInfoToDXVA Lib "MFPlat.DLL" (pdwToDXVA As Long, pFromFormat As MFVIDEOFORMAT) As Long
Public Declare PtrSafe Function MFConvertColorInfoFromDXVA Lib "MFPlat.DLL" (pToFormat As MFVIDEOFORMAT, ByVal dwFromDXVA As Long) As Long
Public Declare PtrSafe Function MFCopyImage Lib "MFPlat.DLL" (pDest As Any, ByVal lDestStride As Long, pSrc As Any, ByVal lSrcStride As Long, ByVal dwWidthInBytes As Long, ByVal dwLines As Long) As Long
Public Declare PtrSafe Function MFConvertFromFP16Array Lib "MFPlat.DLL" (pDest As Single, pSrc As Integer, ByVal dwCount As Long) As Long
Public Declare PtrSafe Function MFConvertToFP16Array Lib "MFPlat.DLL" (pDest As Integer, pSrc As Single, ByVal dwCount As Long) As Long
Public Declare PtrSafe Function MFCreate2DMediaBuffer Lib "MFPlat.DLL" (ByVal dwWidth As Long, ByVal dwHeight As Long, [TypeHint(D3DFORMAT)] ByVal dwFourCC As Long, ByVal fBottomUp As BOOL, ppBuffer As IMFMediaBuffer) As Long
Public Declare PtrSafe Function MFCreateMediaBufferFromMediaType Lib "MFPlat.DLL" (ByVal pMediaType As IMFMediaType, ByVal llDuration As LongLong, ByVal dwMinLength As Long, ByVal dwMinAlignment As Long, ppBuffer As IMFMediaBuffer) As Long
Public Declare PtrSafe Function MFCreateCollection Lib "MFPlat.DLL" (ppIMFCollection As IMFCollection) As Long

Public Enum EAllocationType
    eAllocationTypeDynamic = 0
    eAllocationTypeRT = 1
    eAllocationTypePageable = 2
    eAllocationTypeIgnore = 3
End Enum
Public Declare PtrSafe Function MFHeapAlloc Lib "MFPlat.DLL" (ByVal nSize As LongPtr, ByVal dwFlags As HeapFlags, ByVal pszFile As String, ByVal line As Long, ByVal eat As EAllocationType) As LongPtr
Public Declare PtrSafe Sub MFHeapFree Lib "MFPlat.DLL" (ByVal pv As LongPtr)
Public Declare PtrSafe Function MFllMulDiv Lib "MFPlat.DLL" (ByVal a As LongLong, ByVal b As LongLong, ByVal c As LongLong, ByVal d As LongLong) As LongLong
Public Declare PtrSafe Function MFGetContentProtectionSystemCLSID Lib "MFPlat.DLL" (guidProtectionSystemID As UUID, pclsid As UUID) As Long
Public Declare PtrSafe Function MFCombineSamples Lib "MFPlat.DLL" (ByVal pSample As IMFSample, ByVal pSampleToAdd As IMFSample, ByVal dwMaxMergedDurationInMS As Long, pMerged As BOOL) As Long
Public Declare PtrSafe Function MFSplitSample Lib "MFPlat.DLL" (ByVal pSample As IMFSample, pOutputSamples As IMFSample, ByVal dwOutputSampleMaxCount As Long, pdwOutputSampleCount As Long) As Long
Public Declare PtrSafe Function CreatePropertyStore Lib "MFPlat.DLL" (ppStore As IPropertyStore) As Long

Public Declare PtrSafe Function MFCreateMediaSession Lib "mf.dll" (ByVal pConfiguration As IMFAttributes, ByRef ppMediaSession As IMFMediaSession) As Long
Public Declare PtrSafe Function MFCreatePMPMediaSession Lib "mf.dll" (ByVal dwCreationFlags As Long, ByVal pConfiguration As IMFAttributes, ByRef ppMediaSession As IMFMediaSession, ByRef ppEnablerActivate As IMFActivate) As Long
Public Declare PtrSafe Function MFGetSupportedSchemes Lib "mf.dll" (ByRef pPropVarSchemeArray As Variant) As Long
Public Declare PtrSafe Function MFGetSupportedMimeTypes Lib "mf.dll" (ByRef pPropVarMimeTypeArray As Variant) As Long
Public Declare PtrSafe Function MFCreateTopology Lib "mf.dll" (ByRef ppTopo As IMFTopology) As Long
Public Declare PtrSafe Function MFCreateTopologyNode Lib "mf.dll" (ByVal NodeType As MF_TOPOLOGY_TYPE, ByRef ppNode As IMFTopologyNode) As Long
Public Declare PtrSafe Function MFGetTopoNodeCurrentType Lib "mf.dll" (ByVal pNode As IMFTopologyNode, ByVal dwStreamIndex As Long, ByVal fOutput As Long, ByRef ppType As IMFMediaType) As Long
Public Declare PtrSafe Function MFGetService Lib "mf.dll" (ByVal pUnkObject As IUnknown, ByRef guidService As UUID, ByRef riid As UUID, ByRef ppvObject As Any) As Long
Public Declare PtrSafe Function MFCreatePresentationClock Lib "mf.dll" (ByRef ppPresentationClock As IMFPresentationClock) As Long
Public Declare PtrSafe Function MFRequireProtectedEnvironment Lib "mf.dll" (ByVal pPresentationDescriptor As IMFPresentationDescriptor) As Long
Public Declare PtrSafe Function MFCreateSimpleTypeHandler Lib "mf.dll" (ByRef ppHandler As IMFMediaTypeHandler) As Long
Public Declare PtrSafe Function MFShutdownObject Lib "mf.dll" (ByVal pUnk As IUnknown) As Long
Public Declare PtrSafe Function MFCreateAudioRenderer Lib "mf.dll" (ByVal pAudioAttributes As IMFAttributes, ByRef ppSink As IMFMediaSink) As Long
Public Declare PtrSafe Function MFCreateAudioRendererActivate Lib "mf.dll" (ByRef ppActivate As IMFActivate) As Long
Public Declare PtrSafe Function MFCreateVideoRendererActivate Lib "mf.dll" (ByVal hwndVideo As LongPtr, ByRef ppActivate As IMFActivate) As Long
Public Declare PtrSafe Function MFCreateMPEG4MediaSink Lib "mf.dll" (ByVal pIByteStream As IMFByteStream, ByVal pVideoMediaType As IMFMediaType, ByVal pAudioMediaType As IMFMediaType, ByRef ppIMediaSink As IMFMediaSink) As Long
Public Declare PtrSafe Function MFCreate3GPMediaSink Lib "mf.dll" (ByVal pIByteStream As IMFByteStream, ByVal pVideoMediaType As IMFMediaType, ByVal pAudioMediaType As IMFMediaType, ByRef ppIMediaSink As IMFMediaSink) As Long
Public Declare PtrSafe Function MFCreateMP3MediaSink Lib "mf.dll" (ByVal pTargetByteStream As IMFByteStream, ByRef ppIMediaSink As IMFMediaSink) As Long
Public Declare PtrSafe Function MFCreateAC3MediaSink Lib "mf.dll" (ByVal pIByteStream As IMFByteStream, ByVal pAudioMediaType As IMFMediaType, ByRef ppIMediaSink As IMFMediaSink) As Long
Public Declare PtrSafe Function MFCreateADTSMediaSink Lib "mf.dll" (ByVal pTargetByteStream As IMFByteStream, ByVal pAudioMediaType As IMFMediaType, ByRef ppIMediaSink As IMFMediaSink) As Long
Public Declare PtrSafe Function MFCreateMuxSink Lib "mf.dll" (ByVal guidOutputSubType1 As Long, ByVal guidOutputSubType2 As Long, ByVal guidOutputSubType3 As Long, ByVal guidOutputSubType4 As Long, ByVal pOutputAttributes As IMFAttributes, ByVal pOutputByteStream As IMFByteStream, ByRef ppIMediaSink As IMFMediaSink) As Long
Public Declare PtrSafe Function MFCreateFMPEG4MediaSink Lib "mf.dll" (ByVal pIByteStream As IMFByteStream, ByVal pVideoMediaType As IMFMediaType, ByVal pAudioMediaType As IMFMediaType, ByRef ppIMediaSink As IMFMediaSink) As Long
Public Declare PtrSafe Function MFCreateAVIMediaSink Lib "mfsrcsnk.dll" (ByVal pIByteStream As IMFByteStream, ByVal pVideoMediaType As IMFMediaType, ByVal pAudioMediaType As IMFMediaType, ByRef ppIMediaSink As IMFMediaSink) As Long
Public Declare PtrSafe Function MFCreateWAVEMediaSink Lib "mfsrcsnk.dll" (ByVal pTargetByteStream As IMFByteStream, ByRef ppIMediaSink As IMFMediaSink) As Long
Public Declare PtrSafe Function MFCreateTopoLoader Lib "mf.dll" (ByRef ppObj As IMFTopoLoader) As Long
Public Declare PtrSafe Function MFCreateSampleGrabberSinkActivate Lib "mf.dll" (ByVal pIMFMediaType As IMFMediaType, ByVal pIMFSampleGrabberSinkCallback As IMFSampleGrabberSinkCallback, ByRef ppActivate As IMFActivate) As Long
Public Declare PtrSafe Function MFCreateStandardQualityManager Lib "mf.dll" (ByRef ppQualityManager As IMFQualityManager) As Long
Public Declare PtrSafe Function MFCreateSequencerSource Lib "mf.dll" (ByVal pReserved As IUnknown, ByRef ppSequencerSource As IMFSequencerSource) As Long
Public Declare PtrSafe Function MFCreateSequencerSegmentOffset Lib "mf.dll" (ByVal dwID As Long, ByVal hnsOffset As LongLong, ByRef pvarSegmentOffset As Variant) As Long
Public Declare PtrSafe Function MFCreateAggregateSource Lib "mf.dll" (ByVal pSourceCollection As IMFCollection, ByRef ppAggSource As IMFMediaSource) As Long
Public Declare PtrSafe Function MFCreateCredentialCache Lib "mf.dll" (ByRef ppCache As IMFNetCredentialCache) As Long
Public Declare PtrSafe Function MFCreateProxyLocator Lib "mf.dll" (ByVal pszProtocol As LongPtr, ByVal pProxyConfig As IPropertyStore, ByRef ppProxyLocator As IMFNetProxyLocator) As Long
Public Declare PtrSafe Function MFCreateNetSchemePlugin Lib "mf.dll" (ByRef riid As UUID, ByRef ppvHandler As Any) As Long
Public Declare PtrSafe Function MFCreatePMPServer Lib "mf.dll" (ByVal dwCreationFlags As Long, ByRef ppPMPServer As IMFPMPServer) As Long
Public Declare PtrSafe Function MFCreateRemoteDesktopPlugin Lib "mf.dll" (ByRef ppPlugin As IMFRemoteDesktopPlugin) As Long
Public Declare PtrSafe Function MFCreateTranscodeProfile Lib "mf.dll" (ByRef ppTranscodeProfile As IMFTranscodeProfile) As Long
Public Declare PtrSafe Function MFCreateTranscodeTopology Lib "mf.dll" (ByVal pSrc As IMFMediaSource, ByVal pwszOutputFilePath As LongPtr, ByVal pProfile As IMFTranscodeProfile, ByRef ppTranscodeTopo As IMFTopology) As Long
Public Declare PtrSafe Function MFCreateTranscodeTopologyFromByteStream Lib "mf.dll" (ByVal pSrc As IMFMediaSource, ByVal pOutputStream As IMFByteStream, ByVal pProfile As IMFTranscodeProfile, ByRef ppTranscodeTopo As IMFTopology) As Long
Public Declare PtrSafe Function MFTranscodeGetAudioOutputAvailableTypes Lib "mf.dll" (ByRef guidSubtype As UUID, ByVal dwMFTFlags As Long, ByVal pCodecConfig As IMFAttributes, ByRef ppAvailableTypes As IMFCollection) As Long
Public Declare PtrSafe Function MFCreateTranscodeSinkActivate Lib "mf.dll" (ByRef ppActivate As IMFActivate) As Long
Public Declare PtrSafe Function MFEnumDeviceSources Lib "mf.dll" (ByVal pAttributes As IMFAttributes, ByRef pppSourceActivate As LongPtr, ByRef pcSourceActivate As Long) As Long
Public Declare PtrSafe Function MFCreateDeviceSource Lib "mf.dll" (ByVal pAttributes As IMFAttributes, ByRef ppSource As IMFMediaSource) As Long
Public Declare PtrSafe Function MFCreateDeviceSourceActivate Lib "mf.dll" (ByVal pAttributes As IMFAttributes, ByRef ppActivate As IMFActivate) As Long
Public Declare PtrSafe Function MFCreateProtectedEnvironmentAccess Lib "mf.dll" (ByRef ppAccess As IMFProtectedEnvironmentAccess) As Long
Public Declare PtrSafe Function MFLoadSignedLibrary Lib "mf.dll" (ByVal pszName As LongPtr, ByRef ppLib As IMFSignedLibrary) As Long
Public Declare PtrSafe Function MFGetSystemId Lib "mf.dll" (ByRef ppid As IMFSystemId) As Long
Public Declare PtrSafe Function MFGetLocalId Lib "mf.dll" (ByRef verifier As Byte, ByVal size As Long, id As LongPtr) As Long
Public Declare PtrSafe Function MFCreateEncryptedMediaExtensionsStoreActivate Lib "mf.dll" (ByVal pmpHost As IMFPMPHostApp, ByVal objectStream As IStream, ByVal ClassId As String, ByRef Activate As IMFActivate) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function MFCreateASFContentInfo Lib "mf.dll" (ByRef ppIContentInfo As IMFASFContentInfo) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function MFCreateASFIndexer Lib "mf.dll" (ByRef ppIIndexer As IMFASFIndexer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function MFCreateASFIndexerByteStream Lib "mf.dll" (ByVal pIContentByteStream As IMFByteStream, ByVal cbIndexStartOffset As LongLong, ByRef pIIndexByteStream As IMFByteStream) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function MFCreateASFSplitter Lib "mf.dll" (ByRef ppISplitter As IMFASFSplitter) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function MFCreateASFProfile Lib "mf.dll" (ByRef ppIProfile As IMFASFProfile) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function MFCreateASFProfileFromPresentationDescriptor Lib "mf.dll" (ByVal pIPD As IMFPresentationDescriptor, ByRef ppIProfile As IMFASFProfile) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function MFCreatePresentationDescriptorFromASFProfile Lib "mf.dll" (ByVal pIProfile As IMFASFProfile, ByRef ppIPD As IMFPresentationDescriptor) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function MFCreateASFMultiplexer Lib "mf.dll" (ByRef ppIMultiplexer As IMFASFMultiplexer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function MFCreateASFStreamSelector Lib "mf.dll" (ByVal pIASFProfile As IMFASFProfile, ByRef ppSelector As IMFASFStreamSelector) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function MFCreateASFMediaSink Lib "mf.dll" (ByVal pIByteStream As IMFByteStream, ByRef ppIMediaSink As IMFMediaSink) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function MFCreateASFMediaSinkActivate Lib "mf.dll" (ByVal pwszFileName As String, ByVal pContentInfo As IMFASFContentInfo, ByRef ppIActivate As IMFActivate) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function MFCreateWMVEncoderActivate Lib "mf.dll" (ByVal pMediaType As IMFMediaType, ByVal pEncodingConfigurationProperties As IPropertyStore, ByRef ppActivate As IMFActivate) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function MFCreateWMAEncoderActivate Lib "mf.dll" (ByVal pMediaType As IMFMediaType, ByVal pEncodingConfigurationProperties As IPropertyStore, ByRef ppActivate As IMFActivate) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function MFCreateASFStreamingMediaSink Lib "mf.dll" (ByVal pIByteStream As IMFByteStream, ByRef ppIMediaSink As IMFMediaSink) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function MFCreateASFStreamingMediaSinkActivate Lib "mf.dll" (ByVal pByteStreamActivate As IMFActivate, ByVal pContentInfo As IMFASFContentInfo, ByRef ppIActivate As IMFActivate) As Long


Public Declare PtrSafe Function MFPCreateMediaPlayer Lib "mfplay.dll" (ByVal pwszUrl As LongPtr, ByVal fStartPlayback As BOOL, ByVal creationOptions As MFP_CREATION_OPTIONS, ByVal pCallback As IMFPMediaPlayerCallback, ByVal hwnd As LongPtr, ByRef ppMediaPlayer As IMFPMediaPlayer) As Long

Public Declare PtrSafe Function MFCreateSourceResolver Lib "MFPlat.DLL" (ppISourceResolver As IMFSourceResolver) As Long
[PreserveSig(False)]
Public Declare PtrSafe Function MFCreateSourceResolver Lib "MFPlat.DLL" () As IMFSourceResolver
Public Declare PtrSafe Function MFSerializeAttributesToStream Lib "MFPlat.DLL" (ByVal pAttr As IMFAttributes, ByVal dwOptions As Long, ByVal pStm As IStream) As Long
Public Declare PtrSafe Function MFDeserializeAttributesFromStream Lib "MFPlat.DLL" (ByVal pAttr As IMFAttributes, ByVal dwOptions As Long, ByVal pStm As IStream) As Long
Public Declare PtrSafe Function MFGetSystemTime Lib "MFPlat.DLL" () As LongLong
Public Declare PtrSafe Function MFCreateSystemTimeSource Lib "MFPlat.DLL" (ByRef ppSystemTimeSource As IMFPresentationTimeSource) As Long
Public Declare PtrSafe Function MFCreatePresentationDescriptor Lib "MFPlat.DLL" (ByVal cStreamDescriptors As Long, ByVal apStreamDescriptors As IMFStreamDescriptor, ByRef ppPresentationDescriptor As IMFPresentationDescriptor) As Long
Public Declare PtrSafe Function MFSerializePresentationDescriptor Lib "MFPlat.DLL" (ByVal pPD As IMFPresentationDescriptor, ByRef pcbData As Long, ByRef ppbData As LongPtr) As Long
Public Declare PtrSafe Function MFDeserializePresentationDescriptor Lib "MFPlat.DLL" (ByVal cbData As Long, ByRef pbData As Byte, ByRef ppPD As IMFPresentationDescriptor) As Long
Public Declare PtrSafe Function MFCreateStreamDescriptor Lib "MFPlat.DLL" (ByVal dwStreamIdentifier As Long, ByVal cMediaTypes As Long, ByVal apMediaTypes As IMFMediaType, ByRef ppDescriptor As IMFStreamDescriptor) As Long
Public Declare PtrSafe Function MFCreateTrackedSample Lib "MFPlat.DLL" (ByRef ppMFSample As IMFTrackedSample) As Long
Public Declare PtrSafe Function MFCreateMFByteStreamOnStream Lib "MFPlat.DLL" (ByVal pStream As IStream, ByRef ppByteStream As IMFByteStream) As Long
Public Declare PtrSafe Function MFCreateMFByteStreamOnStreamEx Lib "MFPlat.DLL" (ByVal pUnkStream As IUnknown, ByRef ppByteStream As IMFByteStream) As Long
Public Declare PtrSafe Function MFCreateStreamOnMFByteStream Lib "MFPlat.DLL" (ByVal pByteStream As IMFByteStream, ByRef ppStream As IStream) As Long
Public Declare PtrSafe Function MFCreateStreamOnMFByteStreamEx Lib "MFPlat.DLL" (ByVal pByteStream As IMFByteStream, ByRef riid As UUID, ByRef ppv As Any) As Long
Public Declare PtrSafe Function MFCreateMediaTypeFromProperties Lib "MFPlat.DLL" (ByVal pUnkStream As IUnknown, ByRef ppMediaType As IMFMediaType) As Long
Public Declare PtrSafe Function MFCreatePropertiesFromMediaType Lib "MFPlat.DLL" (ByVal pMediaType As IMFMediaType, ByRef riid As UUID, ByRef ppv As Any) As Long
Public Declare PtrSafe Function MFCreateContentProtectionDevice Lib "MFPlat.DLL" (ByRef ProtectionSystemId As UUID, ByRef ContentProtectionDevice As IMFContentProtectionDevice) As Long
Public Declare PtrSafe Function MFIsContentProtectionDeviceSupported Lib "MFPlat.DLL" (ByRef ProtectionSystemId As UUID, ByRef isSupported As BOOL) As Long
Public Declare PtrSafe Function MFCreateContentDecryptorContext Lib "MFPlat.DLL" (ByRef guidMediaProtectionSystemId As UUID, ByVal pD3DManager As IMFDXGIDeviceManager, ByVal pContentProtectionDevice As IMFContentProtectionDevice, ByRef ppContentDecryptorContext As IMFContentDecryptorContext) As Long
Public Declare PtrSafe Function MFCreateD3D12SynchronizationObject Lib "MFPlat.DLL" (ByVal pDevice As ID3D12Device, riid As UUID, ppv As Any) As Long
Public Declare PtrSafe Function MFCreateTransformActivate Lib "MFPlat.DLL" (ByRef ppActivate As IMFActivate) As Long


Public Declare PtrSafe Function MFCreateSourceReaderFromMediaSource Lib "MFReadWrite.DLL" (ByVal pMediaSource As IMFMediaSource, ByVal pAttributes As IMFAttributes, ppSourceReader As IMFSourceReader) As Long
[PreserveSig(False)]
Public Declare PtrSafe Function MFCreateSourceReaderFromMediaSource Lib "MFReadWrite.DLL" (ByVal pMediaSource As IMFMediaSource, ByVal pAttributes As IMFAttributes) As IMFSourceReader
Public Declare PtrSafe Function MFCreateSourceReaderFromURL Lib "MFReadWrite.DLL" (ByVal pwszUrl As LongPtr, ByVal pAttributes As IMFAttributes, ByRef ppSourceReader As IMFSourceReader) As Long
Public Declare PtrSafe Function MFCreateSourceReaderFromByteStream Lib "MFReadWrite.DLL" (ByVal pByteStream As IMFByteStream, ByVal pAttributes As IMFAttributes, ByRef ppSourceReader As IMFSourceReader) As Long
Public Declare PtrSafe Function MFCreateSinkWriterFromURL Lib "MFReadWrite.DLL" (ByVal pwszOutputURL As LongPtr, ByVal pByteStream As IMFByteStream, ByVal pAttributes As IMFAttributes, ByRef ppSinkWriter As IMFSinkWriter) As Long
Public Declare PtrSafe Function MFCreateSinkWriterFromMediaSink Lib "MFReadWrite.DLL" (ByVal pMediaSink As IMFMediaSink, ByVal pAttributes As IMFAttributes, ByRef ppSinkWriter As IMFSinkWriter) As Long

Public Declare PtrSafe Function MFCreateExtendedCameraIntrinsics Lib "mfcore.dll" (ByRef ppExtendedCameraIntrinsics As IMFExtendedCameraIntrinsics) As Long
Public Declare PtrSafe Function MFCreateExtendedCameraIntrinsicModel Lib "mfcore.dll" (ByVal distortionModelType As MFCameraIntrinsic_DistortionModelType, ByRef ppExtendedCameraIntrinsicModel As IMFExtendedCameraIntrinsicModel) As Long

Public Declare PtrSafe Function MFCreateVirtualCamera Lib "mfsensorgroup.dll" (ByVal type As MFVirtualCameraType, ByVal lifetime As MFVirtualCameraLifetime, ByVal access As MFVirtualCameraAccess, ByVal FriendlyName As String, ByVal sourceId As String, ByRef categories As UUID, ByVal categoryCount As Long, ByRef virtualCamera As IMFVirtualCamera) As Long
Public Declare PtrSafe Function MFIsVirtualCameraTypeSupported Lib "mfsensorgroup.dll" (ByVal type As MFVirtualCameraType, ByVal supported As BOOL) As Long
Public Declare PtrSafe Function MFCreateSensorGroup Lib "mfsensorgroup.dll" (ByVal SensorGroupSymbolicLink As String, ByRef ppSensorGroup As IMFSensorGroup) As Long
Public Declare PtrSafe Function MFCreateSensorStream Lib "mfsensorgroup.dll" (ByVal StreamId As Long, ByVal pAttributes As IMFAttributes, ByVal pMediaTypeCollection As IMFCollection, ByRef ppStream As IMFSensorStream) As Long
Public Declare PtrSafe Function MFCreateCameraControlMonitor Lib "mfsensorgroup.dll" (ByVal SymbolicLink As String, ByVal CallBack As IMFCameraControlNotify, ByRef ppCameraControlMonitor As IMFCameraControlMonitor) As Long
Public Declare PtrSafe Function MFCreateCameraOcclusionStateMonitor Lib "mfsensorgroup.dll" (ByVal SymbolicLink As String, ByVal CallBack As IMFCameraOcclusionStateReportCallback, ByRef occlusionStateMonitor As IMFCameraOcclusionStateMonitor) As Long
Public Declare PtrSafe Function MFCreateRelativePanelWatcher Lib "mfsensorgroup.dll" (ByVal videoDeviceId As String, ByVal displayMonitorDeviceId As String, ByRef ppRelativePanelWatcher As IMFRelativePanelWatcher) As Long
Public Declare PtrSafe Function MFCreateSensorActivityMonitor Lib "mfsensorgroup.dll" (ByVal pCallback As IMFSensorActivitiesReportCallback, ByRef ppActivityMonitor As IMFSensorActivityMonitor) As Long
Public Declare PtrSafe Function MFCreateSensorProfileCollection Lib "mfsensorgroup.dll" (ByRef ppSensorProfile As IMFSensorProfileCollection) As Long
Public Declare PtrSafe Function MFCreateSensorProfile Lib "mfsensorgroup.dll" (ByRef ProfileType As UUID, ByVal ProfileIndex As Long, ByVal Constraints As String, ByRef ppProfile As IMFSensorProfile) As Long

[UseGetLastError(False)]
Public Declare PtrSafe Function MFCreateVideoPresenter Lib "evr.dll" (ByVal pOwner As IUnknown, riidDevice As UUID, riid As UUID, ppVideoPresenter As Any) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function MFCreateVideoMixer Lib "evr.dll" (ByVal pOwner As IUnknown, riidDevice As UUID, riid As UUID, ppv As Any) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function MFCreateVideoMixerAndPresenter Lib "evr.dll" (ByVal pMixerOwner As IUnknown, ByVal pPresenterOwner As IUnknown, riidMixer As UUID, ppvVideoMixer As Any, riidPresenter As UUID, ppvVideoPresenter As Any) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function MFCreateVideoRenderer Lib "evr.dll" (riidRenderer As UUID, ppVideoRenderer As Any) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function MFCreateVideoSampleFromSurface Lib "evr.dll" (ByVal pUnkSurface As IUnknown, ppSample As IMFSample) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function MFCreateVideoSampleAllocator Lib "evr.dll" (riid As UUID, ppSampleAllocator As Any) As Long





Public Enum MF_MT_D3D_RESOURCE_VERSION_ENUM
	MF_D3D11_RESOURCE = 0
	MF_D3D12_RESOURCE = 1
End Enum

Public Type MFP_EVENT_HEADER
    eEventType As MFP_EVENT_TYPE
    hrEvent As Long
    pMediaPlayer As IMFPMediaPlayer
    eState As MFP_MEDIAPLAYER_STATE
    pPropertyStore As IPropertyStore
End Type

Public Type MFP_PLAY_EVENT
    Header As MFP_EVENT_HEADER
    pMediaItem As IMFPMediaItem
End Type

Public Type MFP_PAUSE_EVENT
    Header As MFP_EVENT_HEADER
    pMediaItem As IMFPMediaItem
End Type

Public Type MFP_STOP_EVENT
    Header As MFP_EVENT_HEADER
    pMediaItem As IMFPMediaItem
End Type

Public Type MFP_POSITION_SET_EVENT
    Header As MFP_EVENT_HEADER
    pMediaItem As IMFPMediaItem
End Type

Public Type MFP_RATE_SET_EVENT
    Header As MFP_EVENT_HEADER
    pMediaItem As IMFPMediaItem
    flRate As Single
End Type

Public Type MFP_MEDIAITEM_CREATED_EVENT
    Header As MFP_EVENT_HEADER
    pMediaItem As IMFPMediaItem
    dwUserData As LongPtr
End Type

Public Type MFP_MEDIAITEM_SET_EVENT
    Header As MFP_EVENT_HEADER
    pMediaItem As IMFPMediaItem
End Type

Public Type MFP_FRAME_STEP_EVENT
    Header As MFP_EVENT_HEADER
    pMediaItem As IMFPMediaItem
End Type

Public Type MFP_MEDIAITEM_CLEARED_EVENT
    Header As MFP_EVENT_HEADER
    pMediaItem As IMFPMediaItem
End Type

Public Type MFP_MF_EVENT
    Header As MFP_EVENT_HEADER
    MFEventType As MediaEventType
    pMFMediaEvent As IMFMediaEvent
    pMediaItem As IMFPMediaItem
End Type

Public Type MFP_ERROR_EVENT
    Header As MFP_EVENT_HEADER
End Type

Public Type MFP_PLAYBACK_ENDED_EVENT
    Header As MFP_EVENT_HEADER
    pMediaItem As IMFPMediaItem
End Type

Public Type MFP_ACQUIRE_USER_CREDENTIAL_EVENT
    Header As MFP_EVENT_HEADER
    dwUserData As LongPtr
    fProceedWithAuthentication As Long
    hrAuthenticationStatus As Long
    pwszUrl As LongPtr
    pwszSite As LongPtr
    pwszRealm As LongPtr
    pwszPackage As LongPtr
    nRetries As LongPtr
    flags As MFP_CREDENTIAL_FLAGS
    pCredential As IMFNetCredential
End Type

Public Enum MF_MEDIAKEYSESSION_TYPE
    MF_MEDIAKEYSESSION_TYPE_TEMPORARY = 0
    MF_MEDIAKEYSESSION_TYPE_PERSISTENT_LICENSE = 1
    MF_MEDIAKEYSESSION_TYPE_PERSISTENT_RELEASE_MESSAGE = 2
End Enum

Public Enum MF_MEDIAKEY_STATUS
    MF_MEDIAKEY_STATUS_USABLE = 0
    MF_MEDIAKEY_STATUS_EXPIRED = 1
    MF_MEDIAKEY_STATUS_OUTPUT_DOWNSCALED = 2
    MF_MEDIAKEY_STATUS_OUTPUT_NOT_ALLOWED = 3
    MF_MEDIAKEY_STATUS_STATUS_PENDING = 4
    MF_MEDIAKEY_STATUS_INTERNAL_ERROR = 5
End Enum

Public Type MFMediaKeyStatus
    pbKeyId As LongPtr
    cbKeyId As Long
    eMediaKeyStatus As MF_MEDIAKEY_STATUS
End Type

Public Enum MF_MEDIAKEYSESSION_MESSAGETYPE
    MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_REQUEST = 0
    MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RENEWAL = 1
    MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RELEASE = 2
    MF_MEDIAKEYSESSION_MESSAGETYPE_INDIVIDUALIZATION_REQUEST = 3
End Enum

Public Enum D3DFORMAT
    D3DFMT_UNKNOWN = 0
    D3DFMT_R8G8B8 = 20
    D3DFMT_A8R8G8B8 = 21
    D3DFMT_X8R8G8B8 = 22
    D3DFMT_R5G6B5 = 23
    D3DFMT_X1R5G5B5 = 24
    D3DFMT_A1R5G5B5 = 25
    D3DFMT_A4R4G4B4 = 26
    D3DFMT_R3G3B2 = 27
    D3DFMT_A8 = 28
    D3DFMT_A8R3G3B2 = 29
    D3DFMT_X4R4G4B4 = 30
    D3DFMT_A2B10G10R10 = 31
    D3DFMT_A8B8G8R8 = 32
    D3DFMT_X8B8G8R8 = 33
    D3DFMT_G16R16 = 34
    D3DFMT_A2R10G10B10 = 35
    D3DFMT_A16B16G16R16 = 36
    D3DFMT_A8P8 = 40
    D3DFMT_P8 = 41
    D3DFMT_L8 = 50
    D3DFMT_A8L8 = 51
    D3DFMT_A4L4 = 52
    D3DFMT_V8U8 = 60
    D3DFMT_L6V5U5 = 61
    D3DFMT_X8L8V8U8 = 62
    D3DFMT_Q8W8V8U8 = 63
    D3DFMT_V16U16 = 64
    D3DFMT_W11V11U10 = 65
    D3DFMT_A2W10V10U10 = 67
    
    ' D3DFMT_UYVY = MAKEFOURCC('U', 'Y', 'V', 'Y'),
    ' D3DFMT_R8G8_B8G8 = MAKEFOURCC('R', 'G', 'B', 'G'),
    ' D3DFMT_YUY2 = MAKEFOURCC('Y', 'U', 'Y', '2'),
    ' D3DFMT_G8R8_G8B8 = MAKEFOURCC('G', 'R', 'G', 'B'),
    ' D3DFMT_DXT1 = MAKEFOURCC('D', 'X', 'T', '1'),
    ' D3DFMT_DXT2 = MAKEFOURCC('D', 'X', 'T', '2'),
    ' D3DFMT_DXT3 = MAKEFOURCC('D', 'X', 'T', '3'),
    ' D3DFMT_DXT4 = MAKEFOURCC('D', 'X', 'T', '4'),
    ' D3DFMT_DXT5 = MAKEFOURCC('D', 'X', 'T', '5'),
    D3DFMT_UYVY = &H59565955
    D3DFMT_R8G8_B8G8 = &H47424752
    D3DFMT_YUY2 = &H32595559
    D3DFMT_G8R8_G8B8 = &H42475247
    D3DFMT_DXT1 = &H31545844
    D3DFMT_DXT2 = &H32545844
    D3DFMT_DXT3 = &H33545844
    D3DFMT_DXT4 = &H34545844
    D3DFMT_DXT5 = &H35545844
    
    D3DFMT_D16_LOCKABLE = 70
    D3DFMT_D32 = 71
    D3DFMT_D15S1 = 73
    D3DFMT_D24S8 = 75
    D3DFMT_D16 = 80
    D3DFMT_D24X8 = 77
    D3DFMT_D24X4S4 = 79
    D3DFMT_L16 = 81
    D3DFMT_D32F_LOCKABLE = 82
    D3DFMT_D24FS8 = 83
    D3DFMT_D32_LOCKABLE = 84
    D3DFMT_S8_LOCKABLE = 85
    
    D3DFMT_VERTEXDATA = 100
    D3DFMT_INDEX16 = 101
    D3DFMT_INDEX32 = 102
    D3DFMT_Q16W16V16U16 = 110

    D3DFMT_MULTI2_ARGB8 = &H3154454d ' MAKEFOURCC('M', 'E', 'T', '1'),

    ' Floating point surface formats

    ' s10e5 formats (16-bits per channel)
    D3DFMT_R16F = 111
    D3DFMT_G16R16F = 112
    D3DFMT_A16B16G16R16F = 113

    ' IEEE s23e8 formats (32-bits per channel)
    D3DFMT_R32F = 114
    D3DFMT_G32R32F = 115
    D3DFMT_A32B32G32R32F = 116

    D3DFMT_CxV8U8 = 117

    /* D3D9Ex only -- */
'#If !defined(D3D_DISABLE_9EX)

    ' Monochrome 1 bit per pixel format
    D3DFMT_A1 = 118

    ' 2.8 biased fixed point
    D3DFMT_A2B10G10R10_XR_BIAS = 119


    ' Binary format indicating that the data has no inherent type
    D3DFMT_BINARYBUFFER = 199
    LOCAL_D3DFMT_DEFINES = 1
    D3DFMT_FORCE_DWORD = 2147483647
End Enum

Public Enum MFVideoAspectRatioMode
    MFVideoARMode_None = 0
    MFVideoARMode_PreservePicture = 1
    MFVideoARMode_PreservePixel = 2
    MFVideoARMode_NonLinearStretch = 4
    MFVideoARMode_Mask = 7
End Enum

Public Enum MFVideoRenderPrefs
    MFVideoRenderPrefs_DoNotRenderBorder = 1
    MFVideoRenderPrefs_DoNotClipToDevice = 2
    MFVideoRenderPrefs_AllowOutputThrottling = 4
    MFVideoRenderPrefs_ForceOutputThrottling = 8
    MFVideoRenderPrefs_ForceBatching = 16
    MFVideoRenderPrefs_AllowBatching = 32
    MFVideoRenderPrefs_ForceScaling = 64
    MFVideoRenderPrefs_AllowScaling = 128
    MFVideoRenderPrefs_DoNotRepaintOnStop = 256
    MFVideoRenderPrefs_Mask = 511
End Enum

Public Type MFVideoNormalizedRect
    Left As Single
    Top As Single
    Right As Single
    Bottom As Single
End Type

Public Enum MFVP_MESSAGE_TYPE
    MFVP_MESSAGE_FLUSH = 0
    MFVP_MESSAGE_INVALIDATEMEDIATYPE = 1
    MFVP_MESSAGE_PROCESSINPUTNOTIFY = 2
    MFVP_MESSAGE_BEGINSTREAMING = 3
    MFVP_MESSAGE_ENDSTREAMING = 4
    MFVP_MESSAGE_ENDOFSTREAM = 5
    MFVP_MESSAGE_STEP = 6
    MFVP_MESSAGE_CANCELSTEP = 7
End Enum

Public Enum MFVideoMixPrefs
    MFVideoMixPrefs_ForceHalfInterlace = 1
    MFVideoMixPrefs_AllowDropToHalfInterlace = 2
    MFVideoMixPrefs_AllowDropToBob = 4
    MFVideoMixPrefs_ForceBob = 8
    MFVideoMixPrefs_EnableRotation = 16
    MFVideoMixPrefs_Mask = 31
End Enum

Public Enum EVRFilterConfigPrefs
    EVRFilterConfigPrefs_EnableQoS = 1
    EVRFilterConfigPrefs_Mask = 1
End Enum

Public Enum MF_SERVICE_LOOKUP_TYPE
    MF_SERVICE_LOOKUP_UPSTREAM = 0
    MF_SERVICE_LOOKUP_UPSTREAM_DIRECT = 1
    MF_SERVICE_LOOKUP_DOWNSTREAM = 2
    MF_SERVICE_LOOKUP_DOWNSTREAM_DIRECT = 3
    MF_SERVICE_LOOKUP_ALL = 4
    MF_SERVICE_LOOKUP_GLOBAL = 5
End Enum

Public Enum MFP_CREATION_OPTIONS
    MFP_OPTION_NONE = 0
    MFP_OPTION_FREE_THREADED_CALLBACK = 1
    MFP_OPTION_NO_MMCSS = 2
    MFP_OPTION_NO_REMOTE_DESKTOP_OPTIMIZATION = 4
End Enum

Public Enum MFP_MEDIAPLAYER_STATE
    MFP_MEDIAPLAYER_STATE_EMPTY = 0
    MFP_MEDIAPLAYER_STATE_STOPPED = 1
    MFP_MEDIAPLAYER_STATE_PLAYING = 2
    MFP_MEDIAPLAYER_STATE_PAUSED = 3
    MFP_MEDIAPLAYER_STATE_SHUTDOWN = 4
End Enum

Public Enum MFP_MEDIAITEM_CHARACTERISTICS
    MFP_MEDIAITEM_IS_LIVE = 1
    MFP_MEDIAITEM_CAN_SEEK = 2
    MFP_MEDIAITEM_CAN_PAUSE = 4
    MFP_MEDIAITEM_HAS_SLOW_SEEK = 8
End Enum

Public Enum MFP_CREDENTIAL_FLAGS
    MFP_CREDENTIAL_PROMPT = 1
    MFP_CREDENTIAL_SAVE = 2
    MFP_CREDENTIAL_DO_NOT_CACHE = 4
    MFP_CREDENTIAL_CLEAR_TEXT = 8
    MFP_CREDENTIAL_PROXY = 16
    MFP_CREDENTIAL_LOGGED_ON_USER = 32
End Enum

Public Enum MFP_EVENT_TYPE
    MFP_EVENT_TYPE_PLAY = 0
    MFP_EVENT_TYPE_PAUSE = 1
    MFP_EVENT_TYPE_STOP = 2
    MFP_EVENT_TYPE_POSITION_SET = 3
    MFP_EVENT_TYPE_RATE_SET = 4
    MFP_EVENT_TYPE_MEDIAITEM_CREATED = 5
    MFP_EVENT_TYPE_MEDIAITEM_SET = 6
    MFP_EVENT_TYPE_FRAME_STEP = 7
    MFP_EVENT_TYPE_MEDIAITEM_CLEARED = 8
    MFP_EVENT_TYPE_MF = 9
    MFP_EVENT_TYPE_ERROR = 10
    MFP_EVENT_TYPE_PLAYBACK_ENDED = 11
    MFP_EVENT_TYPE_ACQUIRE_USER_CREDENTIAL = 12
End Enum

Public Type MFCONTENTPROTECTIONDEVICE_INPUT_DATA
    HWProtectionFunctionID As Long
    PrivateDataByteCount As Long
    HWProtectionDataByteCount As Long
    reserved As Long
    InputData(0 To 3) As Byte
End Type

Public Type MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA
    PrivateDataByteCount As Long
    MaxHWProtectionDataByteCount As Long
    HWProtectionDataByteCount As Long
    Status As Long
    TransportTimeInHundredsOfNanoseconds As LongLong
    ExecutionTimeInHundredsOfNanoseconds As LongLong
    OutputData(0 To 3) As Byte
End Type

Public Type MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA
    TaskIndex As Long
    ClassName(0 To 259) As Integer
    BasePriority As Long
End Type

Public Enum MFPOLICYMANAGER_ACTION
    PEACTION_NO = 0
    PEACTION_PLAY = 1
    PEACTION_COPY = 2
    PEACTION_EXPORT = 3
    PEACTION_EXTRACT = 4
    PEACTION_RESERVED1 = 5
    PEACTION_RESERVED2 = 6
    PEACTION_RESERVED3 = 7
    PEACTION_LAST = 7
End Enum

Public Type MFINPUTTRUSTAUTHORITY_ACCESS_ACTION
    action As MFPOLICYMANAGER_ACTION
    pbTicket As LongPtr
    cbTicket As Long
End Type

Public Type MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS
    dwSize As Long
    dwVer As Long
    cbSignatureOffset As Long
    cbSignatureSize As Long
    cbExtensionOffset As Long
    cbExtensionSize As Long
    cActions As Long
    rgOutputActions(0 To 0) As MFINPUTTRUSTAUTHORITY_ACCESS_ACTION
End Type

Public Enum MF_OPM_CGMSA_PROTECTION_LEVEL
    MF_OPM_CGMSA_OFF = 0
    MF_OPM_CGMSA_COPY_FREELY = 1
    MF_OPM_CGMSA_COPY_NO_MORE = 2
    MF_OPM_CGMSA_COPY_ONE_GENERATION = 3
    MF_OPM_CGMSA_COPY_NEVER = 4
    MF_OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED = 8
End Enum

Public Enum MF_OPM_ACP_PROTECTION_LEVEL
    MF_OPM_ACP_OFF = 0
    MF_OPM_ACP_LEVEL_ONE = 1
    MF_OPM_ACP_LEVEL_TWO = 2
    MF_OPM_ACP_LEVEL_THREE = 3
    MF_OPM_ACP_FORCE_ULONG = &H7fffffff
End Enum

Public Enum SAMPLE_PROTECTION_VERSION
    SAMPLE_PROTECTION_VERSION_NO = 0
    SAMPLE_PROTECTION_VERSION_BASIC_LOKI = 1
    SAMPLE_PROTECTION_VERSION_SCATTER = 2
    SAMPLE_PROTECTION_VERSION_RC4 = 3
    SAMPLE_PROTECTION_VERSION_AES128CTR = 4
End Enum

Public Enum MF_TRANSCODE_TOPOLOGYMODE_FLAGS
    MF_TRANSCODE_TOPOLOGYMODE_SOFTWARE_ONLY = 0
    MF_TRANSCODE_TOPOLOGYMODE_HARDWARE_ALLOWED = 1
End Enum

Public Enum MF_TRANSCODE_ADJUST_PROFILE_FLAGS
    MF_TRANSCODE_ADJUST_PROFILE_DEFAULT = 0
    MF_TRANSCODE_ADJUST_PROFILE_USE_SOURCE_ATTRIBUTES = 1
End Enum

Public Enum MF_VIDEO_PROCESSOR_ALGORITHM_TYPE
    MF_VIDEO_PROCESSOR_ALGORITHM_DEFAULT = 0
    MF_VIDEO_PROCESSOR_ALGORITHM_MRF_CRF_444 = 1
End Enum

Public Type MF_TRANSCODE_SINK_INFO
    dwVideoStreamID As Long
    pVideoMediaType As IMFMediaType
    dwAudioStreamID As Long
    pAudioMediaType As IMFMediaType
End Type

Public Type MFT_REGISTRATION_INFO
    clsid As UUID
    guidCategory As UUID
    uiFlags As Long
    pszName As LongPtr
    cInTypes As Long
    pInTypes As LongPtr
    cOutTypes As Long
    pOutTypes As LongPtr
End Type

Public Enum MFNETSOURCE_TRANSPORT_TYPE
    MFNETSOURCE_UDP = 0
    MFNETSOURCE_TCP = 1
End Enum

Public Enum MFNETSOURCE_CACHE_STATE
    MFNETSOURCE_CACHE_UNAVAILABLE = 0
    MFNETSOURCE_CACHE_ACTIVE_WRITING = 1
    MFNETSOURCE_CACHE_ACTIVE_COMPLETE = 2
End Enum

Public Enum MFNETSOURCE_STATISTICS_IDS
    MFNETSOURCE_RECVPACKETS_ID = 0
    MFNETSOURCE_LOSTPACKETS_ID = 1
    MFNETSOURCE_RESENDSREQUESTED_ID = 2
    MFNETSOURCE_RESENDSRECEIVED_ID = 3
    MFNETSOURCE_RECOVEREDBYECCPACKETS_ID = 4
    MFNETSOURCE_RECOVEREDBYRTXPACKETS_ID = 5
    MFNETSOURCE_OUTPACKETS_ID = 6
    MFNETSOURCE_RECVRATE_ID = 7
    MFNETSOURCE_AVGBANDWIDTHBPS_ID = 8
    MFNETSOURCE_BYTESRECEIVED_ID = 9
    MFNETSOURCE_PROTOCOL_ID = 10
    MFNETSOURCE_TRANSPORT_ID = 11
    MFNETSOURCE_CACHE_STATE_ID = 12
    MFNETSOURCE_LINKBANDWIDTH_ID = 13
    MFNETSOURCE_CONTENTBITRATE_ID = 14
    MFNETSOURCE_SPEEDFACTOR_ID = 15
    MFNETSOURCE_BUFFERSIZE_ID = 16
    MFNETSOURCE_BUFFERPROGRESS_ID = 17
    MFNETSOURCE_LASTBWSWITCHTS_ID = 18
    MFNETSOURCE_SEEKRANGESTART_ID = 19
    MFNETSOURCE_SEEKRANGEEND_ID = 20
    MFNETSOURCE_BUFFERINGCOUNT_ID = 21
    MFNETSOURCE_INCORRECTLYSIGNEDPACKETS_ID = 22
    MFNETSOURCE_SIGNEDSESSION_ID = 23
    MFNETSOURCE_MAXBITRATE_ID = 24
    MFNETSOURCE_RECEPTION_QUALITY_ID = 25
    MFNETSOURCE_RECOVEREDPACKETS_ID = 26
    MFNETSOURCE_VBR_ID = 27
    MFNETSOURCE_DOWNLOADPROGRESS_ID = 28
    MFNETSOURCE_UNPREDEFINEDPROTOCOLNAME_ID = 29
End Enum

Public Enum MFNET_PROXYSETTINGS
    MFNET_PROXYSETTING_NONE = 0
    MFNET_PROXYSETTING_MANUAL = 1
    MFNET_PROXYSETTING_AUTO = 2
    MFNET_PROXYSETTING_BROWSER = 3
End Enum

Public Type MF_BYTE_STREAM_CACHE_RANGE
    qwStartOffset As LongLong
    qwEndOffset As LongLong
End Type

Public Type MFNetCredentialManagerGetParam
    hrOp As Long
    fAllowLoggedOnUser As Long
    fClearTextPackage As Long
    pszUrl As LongPtr
    pszSite As LongPtr
    pszRealm As LongPtr
    pszPackage As LongPtr
    nRetries As Long
End Type

Public Enum MFNetCredentialRequirements
    REQUIRE_PROMPT = 1
    REQUIRE_SAVE_SELECTED = 2
End Enum

Public Enum MFNetCredentialOptions
    MFNET_CREDENTIAL_SAVE = 1
    MFNET_CREDENTIAL_DONT_CACHE = 2
    MFNET_CREDENTIAL_ALLOW_CLEAR_TEXT = 4
End Enum

Public Enum MFNetAuthenticationFlags
    MFNET_AUTHENTICATION_PROXY = 1
    MFNET_AUTHENTICATION_CLEAR_TEXT = 2
    MFNET_AUTHENTICATION_LOGGED_ON_USER = 4
End Enum

Public Enum MFNETSOURCE_PROTOCOL_TYPE
    MFNETSOURCE_UNDEFINED = 0
    MFNETSOURCE_HTTP = 1
    MFNETSOURCE_RTSP = 2
    MFNETSOURCE_FILE = 3
    MFNETSOURCE_MULTICAST = 4
End Enum

Public Type MFBYTESTREAM_BUFFERING_PARAMS
    cbTotalFileSize As LongLong
    cbPlayableDataSize As LongLong
    prgBuckets As LongPtr
    cBuckets As Long
    qwNetBufferingTime As LongLong
    qwExtraBufferingTimeDuringSeek As LongLong
    qwPlayDuration As LongLong
    dRate As Single
End Type

Public Enum MF_TRANSFER_VIDEO_FRAME_FLAGS
    MF_TRANSFER_VIDEO_FRAME_DEFAULT = 0
    MF_TRANSFER_VIDEO_FRAME_STRETCH = 1
    MF_TRANSFER_VIDEO_FRAME_IGNORE_PAR = 2
End Enum

Public Enum MFSTREAMSINK_MARKER_TYPE
    MFSTREAMSINK_MARKER_DEFAULT = 0
    MFSTREAMSINK_MARKER_ENDOFSEGMENT
    MFSTREAMSINK_MARKER_TICK
    MFSTREAMSINK_MARKER_EVENT
End Enum

Public Enum MF_VIDEO_PROCESSOR_ROTATION
    ROTATION_NONE = 0
    ROTATION_NORMAL = 1
End Enum

Public Enum MF_VIDEO_PROCESSOR_MIRROR
    MIRROR_NONE = 0
    MIRROR_HORIZONTAL = 1
    MIRROR_VERTICAL = 2
End Enum

Public Enum MF_TOPONODE_FLUSH_MODE
    MF_TOPONODE_FLUSH_ALWAYS = 0
    MF_TOPONODE_FLUSH_SEEK = 1
    MF_TOPONODE_FLUSH_NEVER = 2
End Enum

Public Enum MF_TOPONODE_DRAIN_MODE
    MF_TOPONODE_DRAIN_DEFAULT = 0
    MF_TOPONODE_DRAIN_ALWAYS = 1
    MF_TOPONODE_DRAIN_NEVER = 2
End Enum

Public Enum MFTIMER_FLAGS
    MFTIMER_RELATIVE = 1
End Enum

Public Enum MFSHUTDOWN_STATUS
    MFSHUTDOWN_INITIATED = 0
    MFSHUTDOWN_COMPLETED = 1
End Enum

Public Enum MF_URL_TRUST_STATUS
    MF_LICENSE_URL_UNTRUSTED = 0
    MF_LICENSE_URL_TRUSTED = 1
    MF_LICENSE_URL_TAMPERED = 2
End Enum

Public Enum MFRATE_DIRECTION
    MFRATE_FORWARD = 0
    MFRATE_REVERSE = 1
End Enum

Public Enum MF_QUALITY_DROP_MODE
    MF_DROP_MODE_NONE = 0
    MF_DROP_MODE_1 = 1
    MF_DROP_MODE_2 = 2
    MF_DROP_MODE_3 = 3
    MF_DROP_MODE_4 = 4
    MF_DROP_MODE_5 = 5
    MF_NUM_DROP_MODES = 6
End Enum

Public Enum MF_QUALITY_LEVEL
    MF_QUALITY_NORMAL = 0
    MF_QUALITY_NORMAL_MINUS_1 = 1
    MF_QUALITY_NORMAL_MINUS_2 = 2
    MF_QUALITY_NORMAL_MINUS_3 = 3
    MF_QUALITY_NORMAL_MINUS_4 = 4
    MF_QUALITY_NORMAL_MINUS_5 = 5
    MF_NUM_QUALITY_LEVELS = 6
End Enum

Public Enum MF_QUALITY_ADVISE_FLAGS
    MF_QUALITY_CANNOT_KEEP_UP = 1
End Enum

Public Type MFTOPONODE_ATTRIBUTE_UPDATE
    NodeId As LongLong
    guidAttributeKey As UUID
    attrType As MF_ATTRIBUTE_TYPE
    uu As LongLong
End Type

Public Type MF_LEAKY_BUCKET_PAIR
    dwBitrate As Long
    msBufferWindow As Long
End Type


Public Enum MFSequencerTopologyFlags
    SequencerTopologyFlags_Last = 1
End Enum

Public Type STREAM_MEDIUM
    gidMedium As UUID
    unMediumInstance As Long
End Type

Public Type DetectedFaceBound
    sizeInBytes As Long
    normalizedXPosition As Single
    normalizedYPosition As Single
    normalizedWidth As Single
    normalizedHeight As Single
    confidenceValue As Long
    flags As LongLong
End Type

Public Enum DeviceStreamState
	DeviceStreamState_Stop = 0
	DeviceStreamState_Pause = 1
	DeviceStreamState_Run = 2
	DeviceStreamState_Disabled = 3
End Enum

Public Enum MF3DVideoOutputType
    MF3DVideoOutputType_BaseView = 0
    MF3DVideoOutputType_Stereo = 1
End Enum

Public Enum MFT_AUDIO_DECODER_DEGRADATION_REASON
	MFT_AUDIO_DECODER_DEGRADATION_REASON_NONE = 0
	MFT_AUDIO_DECODER_DEGRADATION_REASON_LICENSING_REQUIREMENT = 1
End Enum

Public Enum MFT_AUDIO_DECODER_DEGRADATION_TYPE
	MFT_AUDIO_DECODER_DEGRADATION_TYPE_NONE = 0
	MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX2CHANNEL = 1
	MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX6CHANNEL = 2
	MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX8CHANNEL = 3
End Enum

Public Type MFAudioDecoderDegradationInfo
	eDegradationReason As MFT_AUDIO_DECODER_DEGRADATION_REASON
	eType As MFT_AUDIO_DECODER_DEGRADATION_TYPE
End Type

Public Enum MF_DXGI_DEVICE_MANAGER_MODE
    MF_DXGI_DEVICE_MANAGER_MODE_INVALID = 0
    MF_DXGI_DEVICE_MANAGER_MODE_D3D11
    MF_DXGI_DEVICE_MANAGER_MODE_D3D12
End Enum

Public Enum MF_STREAM_STATE
	MF_STREAM_STATE_STOPPED = 0
	MF_STREAM_STATE_PAUSED = (MF_STREAM_STATE_STOPPED + 1)
	MF_STREAM_STATE_RUNNING = (MF_STREAM_STATE_PAUSED + 1)
End Enum

Public Type MFT_STREAM_STATE_PARAM
	StreamId As Long
	State As MF_STREAM_STATE
End Type


Public Enum MFPMPSESSION_CREATION_FLAGS
    MFPMPSESSION_UNPROTECTED_PROCESS = 1
    MFPMPSESSION_IN_PROCESS = 2
End Enum

Public Enum MF_CONNECT_METHOD
    MF_CONNECT_DIRECT = 0
    MF_CONNECT_ALLOW_CONVERTER = 1
    MF_CONNECT_ALLOW_DECODER = 3
    MF_CONNECT_RESOLVE_INDEPENDENT_OUTPUTTYPES = 4
    MF_CONNECT_AS_OPTIONAL = &H10000
    MF_CONNECT_AS_OPTIONAL_BRANCH = &H20000
End Enum

Public Enum MFT_INPUT_DATA_BUFFER_FLAGS
    MFT_INPUT_DATA_BUFFER_PLACEHOLDER = -1
End Enum

Public Enum MFT_OUTPUT_DATA_BUFFER_FLAGS
    MFT_OUTPUT_DATA_BUFFER_INCOMPLETE = &H1000000
    MFT_OUTPUT_DATA_BUFFER_FORMAT_CHANGE = &H100
    MFT_OUTPUT_DATA_BUFFER_STREAM_END = &H200
    MFT_OUTPUT_DATA_BUFFER_NO_SAMPLE = &H300
End Enum

Public Enum MFT_INPUT_STATUS_FLAGS
    MFT_INPUT_STATUS_ACCEPT_DATA = 1
End Enum

Public Enum MFT_OUTPUT_STATUS_FLAGS
    MFT_OUTPUT_STATUS_SAMPLE_READY = 1
End Enum

Public Enum MFT_INPUT_STREAM_INFO_FLAGS
    MFT_INPUT_STREAM_WHOLE_SAMPLES = &H1
    MFT_INPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER = &H2
    MFT_INPUT_STREAM_FIXED_SAMPLE_SIZE = &H4
    MFT_INPUT_STREAM_HOLDS_BUFFERS = &H8
    MFT_INPUT_STREAM_DOES_NOT_ADDREF = &H100
    MFT_INPUT_STREAM_REMOVABLE = &H200
    MFT_INPUT_STREAM_OPTIONAL = &H400
    MFT_INPUT_STREAM_PROCESSES_IN_PLACE = &H800
End Enum

Public Enum MFT_OUTPUT_STREAM_INFO_FLAGS
    MFT_OUTPUT_STREAM_WHOLE_SAMPLES = &H1
    MFT_OUTPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER = &H2
    MFT_OUTPUT_STREAM_FIXED_SAMPLE_SIZE = &H4
    MFT_OUTPUT_STREAM_DISCARDABLE = &H8
    MFT_OUTPUT_STREAM_OPTIONAL = &H10
    MFT_OUTPUT_STREAM_PROVIDES_SAMPLES = &H100
    MFT_OUTPUT_STREAM_CAN_PROVIDE_SAMPLES = &H200
    MFT_OUTPUT_STREAM_LAZY_READ = &H400
    MFT_OUTPUT_STREAM_REMOVABLE = &H800
End Enum

Public Enum MFT_SET_TYPE_FLAGS
    MFT_SET_TYPE_TEST_ONLY = 1
End Enum

Public Enum MFT_PROCESS_OUTPUT_FLAGS
    MFT_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER = 1
    MFT_PROCESS_OUTPUT_REGENERATE_LAST_OUTPUT = 2
End Enum

Public Enum MFT_PROCESS_OUTPUT_STATUS
    MFT_PROCESS_OUTPUT_STATUS_NEW_STREAMS = 256
End Enum

Public Enum MFT_DRAIN_TYPE
    MFT_DRAIN_PRODUCE_TAILS = 0
    MFT_DRAIN_NO_TAILS = 1
End Enum

Public Enum MFT_MESSAGE_TYPE
    MFT_MESSAGE_COMMAND_FLUSH = 0
    MFT_MESSAGE_COMMAND_DRAIN = &H1
    MFT_MESSAGE_SET_D3D_MANAGER = &H2
    MFT_MESSAGE_DROP_SAMPLES = &H3
    MFT_MESSAGE_COMMAND_TICK = &H4
    MFT_MESSAGE_NOTIFY_BEGIN_STREAMING = &H10000000
    MFT_MESSAGE_NOTIFY_END_STREAMING = &H10000001
    MFT_MESSAGE_NOTIFY_END_OF_STREAM = &H10000002
    MFT_MESSAGE_NOTIFY_START_OF_STREAM = &H10000003
    MFT_MESSAGE_NOTIFY_RELEASE_RESOURCES = &H10000004
    MFT_MESSAGE_NOTIFY_REACQUIRE_RESOURCES = &H10000005
    MFT_MESSAGE_NOTIFY_EVENT = &H10000006
    MFT_MESSAGE_COMMAND_SET_OUTPUT_STREAM_STATE = &H10000007
    MFT_MESSAGE_COMMAND_FLUSH_OUTPUT_STREAM = &H10000008
    MFT_MESSAGE_COMMAND_MARKER = &H20000000
End Enum

Public Type MFT_INPUT_STREAM_INFO
    hnsMaxLatency As LongLong
    dwFlags As MFT_INPUT_STREAM_INFO_FLAGS
    cbSize As Long
    cbMaxLookahead As Long
    cbAlignment As Long
End Type

Public Type MFT_OUTPUT_STREAM_INFO
    dwFlags As MFT_OUTPUT_STREAM_INFO_FLAGS
    cbSize As Long
    cbAlignment As Long
End Type

Public Type MFT_OUTPUT_DATA_BUFFER
    dwStreamId As Long
    pSample As IMFSample
    dwStatus As MFT_OUTPUT_DATA_BUFFER_FLAGS
    pEvents As IMFCollection
End Type


Public Enum MF_Plugin_Type
    MF_Plugin_Type_MFT = 0
    MF_Plugin_Type_MediaSource = 1
    MF_Plugin_Type_MFT_MatchOutputType = 2
    MF_Plugin_Type_Other = -1
End Enum

Public Enum MF_PLUGIN_CONTROL_POLICY
    MF_PLUGIN_CONTROL_POLICY_USE_ALL_PLUGINS = 0
    MF_PLUGIN_CONTROL_POLICY_USE_APPROVED_PLUGINS = 1
    MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS = 2
    MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS_EDGEMODE = 3
End Enum



Public Type MFT_REGISTER_TYPE_INFO
    guidMajorType As UUID
    guidSubtype As UUID
End Type

Public Enum MFVideoTransferFunction
    MFVideoTransFunc_Unknown = 0
    MFVideoTransFunc_10 = 1
    MFVideoTransFunc_18 = 2
    MFVideoTransFunc_20 = 3
    MFVideoTransFunc_22 = 4
    MFVideoTransFunc_709 = 5
    MFVideoTransFunc_240M = 6
    MFVideoTransFunc_sRGB = 7
    MFVideoTransFunc_28 = 8
    MFVideoTransFunc_Log_100 = 9
    MFVideoTransFunc_Log_316 = 10
    MFVideoTransFunc_709_sym = 11
    MFVideoTransFunc_2020_const = 12
    MFVideoTransFunc_2020 = 13
    MFVideoTransFunc_26 = 14
    MFVideoTransFunc_2084 = 15
    MFVideoTransFunc_HLG = 16
    MFVideoTransFunc_10_rel = 17
    MFVideoTransFunc_BT1361_ECG = 18
    MFVideoTransFunc_SMPTE428 = 19
    MFVideoTransFunc_Last
    MFVideoTransFunc_ForceDWORD = &H7fffffff
End Enum

Public Enum MFVideoPrimaries
    MFVideoPrimaries_Unknown = 0
    MFVideoPrimaries_reserved = 1
    MFVideoPrimaries_BT709 = 2
    MFVideoPrimaries_BT470_2_SysM = 3
    MFVideoPrimaries_BT470_2_SysBG = 4
    MFVideoPrimaries_SMPTE170M = 5
    MFVideoPrimaries_SMPTE240M = 6
    MFVideoPrimaries_EBU3213 = 7
    MFVideoPrimaries_SMPTE_C = 8
    MFVideoPrimaries_BT2020 = 9
    MFVideoPrimaries_XYZ = 10
    MFVideoPrimaries_DCI_P3 = 11
    MFVideoPrimaries_ACES = 12
    MFVideoPrimaries_Display_P3 = 13
    MFVideoPrimaries_Last
    MFVideoPrimaries_ForceDWORD = &H7fffffff
End Enum

Public Enum MFVideoLighting
    MFVideoLighting_Unknown = 0
    MFVideoLighting_bright = 1
    MFVideoLighting_office = 2
    MFVideoLighting_dim = 3
    MFVideoLighting_dark = 4
    MFVideoLighting_Last = 5
    MFVideoLighting_ForceDWORD = &H7fffffff
End Enum

Public Enum MFVideoTransferMatrix
    MFVideoTransferMatrix_Unknown = 0
    MFVideoTransferMatrix_BT709 = 1
    MFVideoTransferMatrix_BT601 = 2
    MFVideoTransferMatrix_SMPTE240M = 3
    MFVideoTransferMatrix_BT2020_10 = 4
    MFVideoTransferMatrix_BT2020_12 = 5
    MFVideoTransferMatrix_Identity = 6
    MFVideoTransferMatrix_FCC47 = 7
    MFVideoTransferMatrix_YCgCo = 8
    MFVideoTransferMatrix_SMPTE2085 = 9
    MFVideoTransferMatrix_Chroma = 10
    MFVideoTransferMatrix_Chroma_const = 11
    MFVideoTransferMatrix_ICtCp = 12
    MFVideoTransferMatrix_Last
    MFVideoTransferMatrix_ForceDWORD = &H7fffffff
End Enum

Public Enum MFVideoChromaSubsampling
    MFVideoChromaSubsampling_Unknown = 0
    MFVideoChromaSubsampling_ProgressiveChroma = 8
    MFVideoChromaSubsampling_Horizontally_Cosited = 4
    MFVideoChromaSubsampling_Vertically_Cosited = 2
    MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes = 1
    MFVideoChromaSubsampling_MPEG2 = 5
    MFVideoChromaSubsampling_MPEG1 = 1
    MFVideoChromaSubsampling_DV_PAL = 6
    MFVideoChromaSubsampling_Cosited = 7
    MFVideoChromaSubsampling_Last
    MFVideoChromaSubsampling_ForceDWORD = &H7fffffff
End Enum

Public Enum MFNominalRange
    MFNominalRange_Unknown = 0
    MFNominalRange_Normal = 1
    MFNominalRange_Wide = 2
    MFNominalRange_0_255 = 1
    MFNominalRange_16_235 = 2
    MFNominalRange_48_208 = 3
    MFNominalRange_64_127 = 4
    MFNominalRange_Last
    MFNominalRange_ForceDWORD = &H7fffffff
End Enum

Public Enum MFVideoFlags
    MFVideoFlag_PAD_TO_Mask = 0
    MFVideoFlag_PAD_TO_None = 1
    MFVideoFlag_PAD_TO_4x3 = 2
    MFVideoFlag_PAD_TO_16x9 = 3
    MFVideoFlag_SrcContentHintMask = 4
    MFVideoFlag_SrcContentHintNone = 5
    MFVideoFlag_SrcContentHint16x9 = 6
    MFVideoFlag_SrcContentHint235_1 = 7
    MFVideoFlag_AnalogProtected = &H20
    MFVideoFlag_DigitallyProtected = &H40
    MFVideoFlag_ProgressiveContent = &H80
    MFVideoFlag_FieldRepeatCountMask = 8
    MFVideoFlag_FieldRepeatCountShift = 8
    MFVideoFlag_ProgressiveSeqReset = &H800
    MFVideoFlag_PanScanEnabled = &H20000
    MFVideoFlag_LowerFieldFirst = &H40000
    MFVideoFlag_BottomUpLinearRep = &H80000
    MFVideoFlags_DXVASurface = &H100000
    MFVideoFlags_RenderTargetSurface = &H400000
    MFVideoFlags_ForceQWORD = &H7fffffff
End Enum

Public Type MFRatio
    Numerator As Long
    Denominator As Long
End Type

Public Type MFOffset
    fract As Integer
    Value As Integer
End Type

Public Type MFVideoArea
    OffsetX As MFOffset
    OffsetY As MFOffset
    Area As SIZE
End Type

Public Type MFVideoInfo
    dwWidth As Long
    dwHeight As Long
    PixelAspectRatio As MFRatio
    SourceChromaSubsampling As MFVideoChromaSubsampling
    InterlaceMode As MFVideoInterlaceMode
    TransferFunction As MFVideoTransferFunction
    ColorPrimaries As MFVideoPrimaries
    TransferMatrix As MFVideoTransferMatrix
    SourceLighting As MFVideoLighting
    FramesPerSecond As MFRatio
    NominalRange As MFNominalRange
    GeometricAperture As MFVideoArea
    MinimumDisplayAperture As MFVideoArea
    PanScanAperture As MFVideoArea
    VideoFlags As LongLong
End Type

Public Type MFAYUVSample
    bCrValue As Byte
    bCbValue As Byte
    bYValue As Byte
    bSampleAlpha8 As Byte
End Type

Public Type MFARGB
    rgbBlue As Byte
    rgbGreen As Byte
    rgbRed As Byte
    rgbAlpha As Byte
End Type

Public Type MFPaletteEntry
    ColorUnion As Long
End Type

Public Type MFVideoSurfaceInfo
    Format As Long
    PaletteEntries As Long
    Palette(0 To 255) As MFPaletteEntry
End Type

Public Type MFVideoCompressedInfo
    AvgBitrate As LongLong
    AvgBitErrorRate As LongLong
    MaxKeyFrameSpacing As Long
End Type

Public Type MFVIDEOFORMAT
    dwSize As Long
    videoInfo As MFVideoInfo
    guidFormat As UUID
    compressedInfo As MFVideoCompressedInfo
    surfaceInfo As MFVideoSurfaceInfo
End Type

Public Enum MFStandardVideoFormat
    MFStdVideoFormat_reserved = 0
    MFStdVideoFormat_NTSC
    MFStdVideoFormat_PAL
    MFStdVideoFormat_DVD_NTSC
    MFStdVideoFormat_DVD_PAL
    MFStdVideoFormat_DV_PAL
    MFStdVideoFormat_DV_NTSC
    MFStdVideoFormat_ATSC_SD480i
    MFStdVideoFormat_ATSC_HD1080i
    MFStdVideoFormat_ATSC_HD720p
End Enum

Public Enum MF_FILE_ACCESSMODE
    MF_ACCESSMODE_READ = 1
    MF_ACCESSMODE_WRITE = 2
    MF_ACCESSMODE_READWRITE = 3
End Enum

Public Enum MF_FILE_OPENMODE
    MF_OPENMODE_FAIL_IF_NOT_EXIST = 0
    MF_OPENMODE_FAIL_IF_EXIST = 1
    MF_OPENMODE_RESET_IF_EXIST = 2
    MF_OPENMODE_APPEND_IF_EXIST = 3
    MF_OPENMODE_DELETE_IF_EXIST = 4
End Enum

Public Enum MF_FILE_FLAGS
    MF_FILEFLAGS_NONE = 0
    MF_FILEFLAGS_NOBUFFERING = 1
    MF_FILEFLAGS_ALLOW_WRITE_SHARING = 2
End Enum

Public Enum DMO_VIDEO_OUTPUT_STREAM_FLAGS
    DMO_VOSF_NEEDS_PREVIOUS_SAMPLE = 1
End Enum

Public Enum DMO_QUALITY_STATUS_FLAGS
    DMO_QUALITY_STATUS_ENABLED = 1
End Enum


Public Enum DMO_INPLACE_PROCESS_FLAGS
    DMO_INPLACE_NORMAL = 0
    DMO_INPLACE_ZERO = 1
End Enum


Public Type DMO_OUTPUT_DATA_BUFFER
    pBuffer As IMediaBuffer
    dwStatus As Long
    rtTimestamp As LongLong
    rtTimelength As LongLong
End Type


Public Enum MFMEDIASOURCE_CHARACTERISTICS
    ' / <summary>
    ' /     This bit should be set if the Media Source is sourcing a live
    ' /     presentation
    ' / <summary>
    MFMEDIASOURCE_IS_LIVE = &H1
    ' / <summary>
    ' /     This bit should be set if the Media Source supports seeking
    ' / </summary>
    MFMEDIASOURCE_CAN_SEEK = &H2
    ' / <summary>
    ' /     This bit should be set if the Media Source supports pausing
    ' / </summary>
    MFMEDIASOURCE_CAN_PAUSE = &H4
    ' / <summary>
    ' /     This bit should be set if the Media Source downloads content
    ' /     and seeking outside the downloaded area is slow.
    ' / </summary>
    MFMEDIASOURCE_HAS_SLOW_SEEK = &H8
    '/#if(WINVER>=_WIN32_WINNT_WIN7)
    ' / <summary>
    ' /     This bit should be set if the Media Source may change presentation
    ' /     information during playback, such as network sources.
    ' / </summary>
    MFMEDIASOURCE_HAS_MULTIPLE_PRESENTATIONS = &H10
    ' / <summary>
    ' /     This bit should be set if the Media Source can skip to the next
    ' /     playlist entry
    ' / </summary>
    MFMEDIASOURCE_CAN_SKIPFORWARD = &H20
    ' / <summary>
    ' /     This bit should be set if the Media Source can skip to the previous
    ' /     playlist entry
    ' / </summary>
    MFMEDIASOURCE_CAN_SKIPBACKWARD = &H40
    'endif = 0 ' (WINVER >= _WIN32_WINNT_WIN7)
    ' #if (WINVER >= _WIN32_WINNT_WIN8)
    ' / <summary>
    ' /     This bit should be set if the Media Source is not currently
    ' /     using the network to receive the content.  Networking hardware
    ' /     may enter a power saving state when this bit is set.
    ' / </summary>
    MFMEDIASOURCE_DOES_NOT_USE_NETWORK = &H80
    ' #endif // (WINVER >= _WIN32_WINNT_WIN8)
End Enum

Public Enum MF_SOURCE_READER_CONTROL_FLAG
    MF_SOURCE_READER_CONTROLF_DRAIN = 1
End Enum

Public Enum MF_SOURCE_READER_FLAG
    MF_SOURCE_READERF_ERROR = &H1
    MF_SOURCE_READERF_ENDOFSTREAM = &H2
    MF_SOURCE_READERF_NEWSTREAM = &H4
    MF_SOURCE_READERF_NATIVEMEDIATYPECHANGED = &H10
    MF_SOURCE_READERF_CURRENTMEDIATYPECHANGED = &H20
    MF_SOURCE_READERF_STREAMTICK = &H100
    MF_SOURCE_READERF_ALLEFFECTSREMOVED = &H200
End Enum

Public Type DMO_MEDIA_TYPE
    majortype As UUID
    Subtype As UUID
    bFixedSizeSamples As Long
    bTemporalCompression As Long
    lSampleSize As Long
    formattype As UUID
    pUnk As IUnknown
    cbFormat As Long
    pbFormat As LongPtr
End Type

Public Enum DMO_INPUT_DATA_BUFFER_FLAGS
    DMO_INPUT_DATA_BUFFERF_SYNCPOINT = 1
    DMO_INPUT_DATA_BUFFERF_TIME = 2
    DMO_INPUT_DATA_BUFFERF_TIMELENGTH = 4
    DMO_INPUT_DATA_BUFFERF_DISCONTINUITY = 8
End Enum

Public Enum DMO_OUTPUT_DATA_BUFFER_FLAGS
    DMO_OUTPUT_DATA_BUFFERF_SYNCPOINT = 1
    DMO_OUTPUT_DATA_BUFFERF_TIME = 2
    DMO_OUTPUT_DATA_BUFFERF_TIMELENGTH = 4
    DMO_OUTPUT_DATA_BUFFERF_DISCONTINUITY = 8
    DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE = 16777216
End Enum

Public Enum DMO_INPUT_STATUS_FLAGS
    DMO_INPUT_STATUSF_ACCEPT_DATA = 1
End Enum

Public Enum DMO_INPUT_STREAM_INFO_FLAGS
    DMO_INPUT_STREAMF_WHOLE_SAMPLES = 1
    DMO_INPUT_STREAMF_SINGLE_SAMPLE_PER_BUFFER = 2
    DMO_INPUT_STREAMF_FIXED_SAMPLE_SIZE = 4
    DMO_INPUT_STREAMF_HOLDS_BUFFERS = 8
End Enum

Public Enum DMO_OUTPUT_STREAM_INFO_FLAGS
    DMO_OUTPUT_STREAMF_WHOLE_SAMPLES = 1
    DMO_OUTPUT_STREAMF_SINGLE_SAMPLE_PER_BUFFER = 2
    DMO_OUTPUT_STREAMF_FIXED_SAMPLE_SIZE = 4
    DMO_OUTPUT_STREAMF_DISCARDABLE = 8
    DMO_OUTPUT_STREAMF_OPTIONAL = 16
End Enum

Public Enum DMO_SET_TYPE_FLAGS
    DMO_SET_TYPEF_TEST_ONLY = 1
    DMO_SET_TYPEF_CLEAR = 2
End Enum

Public Enum DMO_PROCESS_OUTPUT_FLAGS
    DMO_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER = 1
End Enum

Public Enum MfByteStreamFlags
    MFBYTESTREAM_IS_READABLE = &H00000001
    MFBYTESTREAM_IS_WRITABLE = &H00000002
    MFBYTESTREAM_IS_SEEKABLE = &H00000004
    MFBYTESTREAM_IS_REMOTE = &H00000008
    MFBYTESTREAM_IS_DIRECTORY = &H00000080
    MFBYTESTREAM_HAS_SLOW_SEEK = &H00000100
    MFBYTESTREAM_IS_PARTIALLY_DOWNLOADED = &H00000200
' #if (WINVER >= _WIN32_WINNT_WIN7)
    MFBYTESTREAM_SHARE_WRITE = &H00000400
' #endif // (WINVER >= _WIN32_WINNT_WIN7)
' #if (WINVER >= _WIN32_WINNT_WIN8)
    MFBYTESTREAM_DOES_NOT_USE_NETWORK = &H00000800
End Enum

Public Enum MF_ATTRIBUTE_SERIALIZE_OPTIONS
	MF_ATTRIBUTE_SERIALIZE_UNKNOWN_BYREF = &H00000001
End Enum

Public Enum MFSESSION_SETTOPOLOGY_FLAGS
	MFSESSION_SETTOPOLOGY_IMMEDIATE = &H1
	MFSESSION_SETTOPOLOGY_NORESOLUTION = &H2
	MFSESSION_SETTOPOLOGY_CLEAR_CURRENT = &H4
End Enum

Public Enum MFSESSION_GETFULLTOPOLOGY_FLAGS
	MFSESSION_GETFULLTOPOLOGY_CURRENT = &H1
End Enum

Public Enum MF_TOPOLOGY_RESOLUTION_STATUS_FLAGS
	MF_TOPOLOGY_RESOLUTION_SUCCEEDED = &H00000000
	MF_OPTIONAL_NODE_REJECTED_MEDIA_TYPE = &H00000001
	MF_OPTIONAL_NODE_REJECTED_PROTECTED_PROCESS = &H00000002
End Enum

Public Enum MF_RESOLUTION
	' 
	'  Object type requested
	' 
	MF_RESOLUTION_MEDIASOURCE = &H00000001 ' Attempt to return a MediaSource object
	MF_RESOLUTION_BYTESTREAM = &H00000002 ' Attempt to return a ByteStream object (not currently supported)
	MF_RESOLUTION_CONTENT_DOES_NOT_HAVE_TO_MATCH_EXTENSION_OR_MIME_TYPE = &H00000010
	MF_RESOLUTION_KEEP_BYTE_STREAM_ALIVE_ON_FAIL = &H00000020
	MF_RESOLUTION_DISABLE_LOCAL_PLUGINS = &H00000040
	MF_RESOLUTION_PLUGIN_CONTROL_POLICY_APPROVED_ONLY = &H00000080
	MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY = &H00000100
	MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY_EDGEMODE = &H00000200
	MF_RESOLUTION_ENABLE_STORE_PLUGINS = &H00000400
	MF_RESOLUTION_READ = &H00010000
	MF_RESOLUTION_WRITE = &H00020000
End Enum
Public Enum MFVideoInterlaceMode
	MFVideoInterlace_Unknown = 0
	MFVideoInterlace_Progressive = 2
	MFVideoInterlace_FieldInterleavedUpperFirst = 3
	MFVideoInterlace_FieldInterleavedLowerFirst = 4
	MFVideoInterlace_FieldSingleUpper = 5
	MFVideoInterlace_FieldSingleLower = 6
	MFVideoInterlace_MixedInterlaceOrProgressive = 7
	MFVideoInterlace_Last = 8
	MFVideoInterlace_ForceDWORD = &H7fffffff
End Enum

Public Enum MF_OBJECT_TYPE
	MF_OBJECT_MEDIASOURCE = 0
	MF_OBJECT_BYTESTREAM = 1
	MF_OBJECT_INVALID = 2
End Enum

Public Enum MF_ATTRIBUTE_TYPE
	MF_ATTRIBUTE_UINT32 = 19
	MF_ATTRIBUTE_UINT64 = 21
	MF_ATTRIBUTE_DOUBLE = 5
	MF_ATTRIBUTE_GUID = 72
	MF_ATTRIBUTE_STRING = 31
	MF_ATTRIBUTE_BLOB = 4113
	MF_ATTRIBUTE_IUNKNOWN = 13
End Enum

Public Enum MF_ATTRIBUTES_MATCH_TYPE
	MF_ATTRIBUTES_MATCH_OUR_ITEMS = 0
	MF_ATTRIBUTES_MATCH_THEIR_ITEMS = 1
	MF_ATTRIBUTES_MATCH_ALL_ITEMS = 2
	MF_ATTRIBUTES_MATCH_INTERSECTION = 3
	MF_ATTRIBUTES_MATCH_SMALLER = 4
End Enum

Public Enum MFBYTESTREAM_SEEK_ORIGIN
	msoBegin = 0
	msoCurrent
End Enum

Public Enum MediaEventType
    MEUnknown = 0
    MEError = 1
    MEExtendedType = 2
    MENonFatalError = 3
    MEGenericV1Anchor = MENonFatalError
    MESessionUnknown = 100
    MESessionTopologySet = 101
    MESessionTopologiesCleared = 102
    MESessionStarted = 103
    MESessionPaused = 104
    MESessionStopped = 105
    MESessionClosed = 106
    MESessionEnded = 107
    MESessionRateChanged = 108
    MESessionScrubSampleComplete = 109
    MESessionCapabilitiesChanged = 110
    MESessionTopologyStatus = 111
    MESessionNotifyPresentationTime = 112
    MENewPresentation = 113
    MELicenseAcquisitionStart = 114
    MELicenseAcquisitionCompleted = 115
    MEIndividualizationStart = 116
    MEIndividualizationCompleted = 117
    MEEnablerProgress = 118
    MEEnablerCompleted = 119
    MEPolicyError = 120
    MEPolicyReport = 121
    MEBufferingStarted = 122
    MEBufferingStopped = 123
    MEConnectStart = 124
    MEConnectEnd = 125
    MEReconnectStart = 126
    MEReconnectEnd = 127
    MERendererEvent = 128
    MESessionStreamSinkFormatChanged = 129
    MESessionV1Anchor = MESessionStreamSinkFormatChanged
    MESourceUnknown = 200
    MESourceStarted = 201
    MEStreamStarted = 202
    MESourceSeeked = 203
    MEStreamSeeked = 204
    MENewStream = 205
    MEUpdatedStream = 206
    MESourceStopped = 207
    MEStreamStopped = 208
    MESourcePaused = 209
    MEStreamPaused = 210
    MEEndOfPresentation = 211
    MEEndOfStream = 212
    MEMediaSample = 213
    MEStreamTick = 214
    MEStreamThinMode = 215
    MEStreamFormatChanged = 216
    MESourceRateChanged = 217
    MEEndOfPresentationSegment = 218
    MESourceCharacteristicsChanged = 219
    MESourceRateChangeRequested = 220
    MESourceMetadataChanged = 221
    MESequencerSourceTopologyUpdated = 222
    MESourceV1Anchor = MESequencerSourceTopologyUpdated
    MESinkUnknown = 300
    MEStreamSinkStarted = 301
    MEStreamSinkStopped = 302
    MEStreamSinkPaused = 303
    MEStreamSinkRateChanged = 304
    MEStreamSinkRequestSample = 305
    MEStreamSinkMarker = 306
    MEStreamSinkPrerolled = 307
    MEStreamSinkScrubSampleComplete = 308
    MEStreamSinkFormatChanged = 309
    MEStreamSinkDeviceChanged = 310
    MEQualityNotify = 311
    MESinkInvalidated = 312
    MEAudioSessionNameChanged = 313
    MEAudioSessionVolumeChanged = 314
    MEAudioSessionDeviceRemoved = 315
    MEAudioSessionServerShutdown = 316
    MEAudioSessionGroupingParamChanged = 317
    MEAudioSessionIconChanged = 318
    MEAudioSessionFormatChanged = 319
    MEAudioSessionDisconnected = 320
    MEAudioSessionExclusiveModeOverride = 321
    MESinkV1Anchor = MEAudioSessionExclusiveModeOverride
    MECaptureAudioSessionVolumeChanged = 322
    MECaptureAudioSessionDeviceRemoved = 323
    MECaptureAudioSessionFormatChanged = 324
    MECaptureAudioSessionDisconnected = 325
    MECaptureAudioSessionExclusiveModeOverride = 326
    MECaptureAudioSessionServerShutdown = 327
    MESinkV2Anchor = MECaptureAudioSessionServerShutdown
    METrustUnknown = 400
    MEPolicyChanged = 401
    MEContentProtectionMessage = 402
    MEPolicySet = 403
    METrustV1Anchor = MEPolicySet
    MEWMDRMLicenseBackupCompleted = 500
    MEWMDRMLicenseBackupProgress = 501
    MEWMDRMLicenseRestoreCompleted = 502
    MEWMDRMLicenseRestoreProgress = 503
    MEWMDRMLicenseAcquisitionCompleted = 506
    MEWMDRMIndividualizationCompleted = 508
    MEWMDRMIndividualizationProgress = 513
    MEWMDRMProximityCompleted = 514
    MEWMDRMLicenseStoreCleaned = 515
    MEWMDRMRevocationDownloadCompleted = 516
    MEWMDRMV1Anchor = MEWMDRMRevocationDownloadCompleted
    METransformUnknown = 600
    METransformNeedInput = (METransformUnknown + 1)
    METransformHaveOutput = (METransformNeedInput + 1)
    METransformDrainComplete = (METransformHaveOutput + 1)
    METransformMarker = (METransformDrainComplete + 1)
    METransformInputStreamStateChanged = (METransformMarker + 1)
    MEByteStreamCharacteristicsChanged = 700
    MEVideoCaptureDeviceRemoved = 800
    MEVideoCaptureDevicePreempted = 801
    MEStreamSinkFormatInvalidated = 802
    MEEncodingParameters = 803
    MEContentProtectionMetadata = 900
    MEDeviceThermalStateChanged = 950
    MEReservedMax = 10000
End Enum

Public Enum MF2DBuffer_LockFlags
	MF2DBuffer_LockFlags_LockTypeMask = &H3 '0x1 | 0x2 | 0x3,
	MF2DBuffer_LockFlags_Read = &H1
	MF2DBuffer_LockFlags_Write = &H2
	MF2DBuffer_LockFlags_ReadWrite = &H3
	MF2DBuffer_LockFlags_ForceDWORD = &H7fffffff
End Enum

Public Enum MFTOPOLOGY_DXVA_MODE
	' / <summary>
	' /     Default DXVA handling for MF v1.  The D3DManager will be set on
	' /     decoders inserted by the topoloader only.
	' / </summary>
	MFTOPOLOGY_DXVA_DEFAULT = 0
	' / <summary>
	' /     No DXVA.  No transforms will get the D3DManager.  This allows
	' /     software processing even on DXVA-enabled machines
	' / </summary>
	MFTOPOLOGY_DXVA_NONE = 1
	' / <summary>
	' /     Full DXVA.  The D3DManager will be set on any chain of D3D-aware
	' /     nodes upstream from a D3D-aware renderer.
	MFTOPOLOGY_DXVA_FULL = 2
End Enum

Public Enum MFTOPOLOGY_HARDWARE_MODE
	' / <summary>
	' /     Default hardware handling for MF v1.  Hardware MFTs will
	' /     not be inserted.
	' / </summary>
	MFTOPOLOGY_HWMODE_SOFTWARE_ONLY = 0
	' / <summary>
	' /     If hardware MFTs are available, the topoloader will insert
	' /     them.  If not, the topoloader will fall back to a software
	' /     MFT to perform the task.
	' / </summary>
	MFTOPOLOGY_HWMODE_USE_HARDWARE = 1
	' / <summary>
	' /     If hardware MFTs are available, the topoloader will insert
	' /     them.  If not, the connection will fail.
	' / </summary>
	MFTOPOLOGY_HWMODE_USE_ONLY_HARDWARE = 2
End Enum

Public Enum MF_TOPOLOGY_TYPE
	' / <member name="MF_TOPOLOGY_OUTPUT_NODE">
	' /     It represents the output topolgy node. The object contained in the output node could be a media sink object or an sink activator object.
	' / </member>
	MF_TOPOLOGY_OUTPUT_NODE = 0
	' / <member name="MF_TOPOLOGY_SOURCESTREAM_NODE">
	' /     It represents the source topology node. The node of this type implements IMFSourceStreamTopologyNode.
	' / </member>
	MF_TOPOLOGY_SOURCESTREAM_NODE = 1
	' / <member name="MF_TOPOLOGY_TRANSFORM_NODE">
	' /     It represents a media foundation transform object. The node of this type contains an IMFTransform object.
	' / </member>
	MF_TOPOLOGY_TRANSFORM_NODE = 2
	' / <member name="MF_TOPOLOGY_TEE_NODE">
	' /     represents a TEE node. It doesn't hold any real object. The node will be useful in scenarios like preview & archive.
	' / </member>
	MF_TOPOLOGY_TEE_NODE = 3
	MF_TOPOLOGY_MAX = &Hffffffff
End Enum

Public Enum MFCLOCK_CHARACTERISTICS_FLAGS
	' / <member name="MFCLOCK_CHARACTERISTICS_FLAG_FREQUENCY_10MHZ">
	' /     If set, clock times given in IMFClock::GetCorrelatedTime
	' /     are in standard MFTIME (100ns) units.
	' /     The dwClockFrequency member of the MFCLOCK_PROPERTIES structure
	' /     returned from IMFClock::GetProperties must be set to
	' /     MFCLOCK_FREQUENCY_HNS in this case.
	' / </member>
	MFCLOCK_CHARACTERISTICS_FLAG_FREQUENCY_10MHZ = &H2
	' / <member name="MFCLOCK_CHARACTERISTICS_FLAG_ALWAYS_RUNNING">
	' /     If set, the clock will always be in the MFCLOCK_STATE_RUNNING
	' /     state.
	' / </member>
	MFCLOCK_CHARACTERISTICS_FLAG_ALWAYS_RUNNING = &H4
	' / <member name="MFCLOCK_CHARACTERISTICS_FLAG_IS_SYSTEM_CLOCK">
	' /     If set, then this clock is running according to system time.
	' /     Therefore, the clock time returned from
	' /     IMFClock::GetCorrelation can be used without any further
	' /     calculations.
	' / </member>
	MFCLOCK_CHARACTERISTICS_FLAG_IS_SYSTEM_CLOCK = &H8
End Enum

Public Enum MFCLOCK_STATE
	' / <member name="MFCLOCK_STATE_INVALID">
	' /     Clock is currently invalid.
	' /     If the clock uses an underlying device, this could mean that
	' /     there is no device.
	' / </member>
	MFCLOCK_STATE_INVALID = 0
	' / <member name="MFCLOCK_STATE_RUNNING">
	' /     Clock is currently running (started).
	' / </member>
	MFCLOCK_STATE_RUNNING = 1
	' / <member name="MFCLOCK_STATE_STOPPED">
	' /     Clock is currently stopped and reporting a time of 0.
	' / </member>
	MFCLOCK_STATE_STOPPED = 2
	' / <member name="MFCLOCK_STATE_PAUSED">
	' /     Clock is currently paused, and the time it reports is frozen.
	' / </member>
	MFCLOCK_STATE_PAUSED = 3
End Enum

Public Enum MFCLOCK_RELATIONAL_FLAGS
	' / <member name="MFCLOCK_RELATIONAL_FLAG_JITTER_NEVER_AHEAD">
	' /     If set, this bit indicates that jitter values are always negative.
	' /     That is, the clock time returned by IMFClock::GetCorrelatedTime()
	' /     will never jitter to times ahead; only to times behind.
	' / </member>
	MFCLOCK_RELATIONAL_FLAG_JITTER_NEVER_AHEAD = &H1
End Enum

Public Type MFCLOCK_PROPERTIES
	'/ <member name="qwCorrelationRate">
	'/     The nominal rate at which the clock is correlated to MF system time.
	'/     A value of 0 means that the correlation is made during the
	'/     IMFClock::GetCorrelatedTime call.
	'/ </member>
	qwCorrelationRate As LongLong
	'/ <member name="guidClockId">
	'/     Uniquely identifies the clocking device (source crystal).
	'/     If two clocks have the same guidClockId, then they are based
	'/     on the same clocking device.
	'/     A value of GUID_NULL indicates that this clock is not similar
	'/     to any other clock.
	'/ </member>
	guidClockId As UUID
	'/ <member name="dwClockFlags">
	'/     Bit flags describing this clock.
	'/     See enumerated type MFCLOCK_RELATIONAL_FLAGS.
	'/ </member>
	dwClockFlags As Long
	'/ <member name="qwClockFrequency">
	'/     Fixed frequency in Hz at which the clock operates.
	'/     A value of MFCLOCK_FREQUENCY_HNS means that the clock has
	'/     a frequency of 10MHz, which is standard MFTIME units (100ns).
	'/     If the bit flag MFCLOCK_CHARACTERISTICS_FLAG_FREQUENCY_10MHZ
	'/     is set in the characteristics returned by
	'/     IMFClock::GetClockCharacteristics, then this value must be equal
	'/     to MFCLOCK_FREQUENCY_HNS.
	'/ </member>
	qwClockFrequency As LongLong
	'/ <member name="dwClockTolerance">
	'/     Amount of inaccuracy in parts-per-billion that may be present
	'/     on the clock.
	'/     Implementations that do not know the clock tolerance should
	'/     set this value to MFCLOCK_TOLERANCE_UNKNOWN, which is the
	'/     value typical in crystal specifications.
	'/ </member>
	dwClockTolerance As Long
	'/ <member name="dwClockJitter">
	'/     Amount of jitter in 100ns units that may be present on this
	'/     clock due to sampling (this does not include the inaccuracies
	'/     accounted for in dwClockTolerance).
	'/     For single-device clocks, this is the inverse of frequency.
	'/     For frequencies greater than or equal to 10MHz on single-device
	'/     clocks, this value should be 1.
	'/     When this clock belongs to a capture device that is not directly
	'/     timestamping the incoming data, the correlation cannot be made
	'/     until the driver's interrupt service routine runs.
	'/     If this is the case,
	'/     then these values should be included in the expected jitter:
	'/     <para>
	'/         MFCLOCK_JITTER_ISR:
	'/             Jitter due to timestamping during
	'/             the device driver's interrupt service routine.
	'/     </para>
	'/     <para>
	'/         MFCLOCK_JITTER_DPC:
	'/             Jitter due to timestampind during
	'/             the device driver's deferred procedure call processing.
	'/     </para>
	'/     <para>
	'/         MFCLOCK_JITTER_PASSIVE:
	'/             Jitter due to dropping to
	'/             passive level (normal thread execution) before timestamping.
	'/     </para>
	'/ </member>
	dwClockJitter As Long
End Type

Public Enum MfEngineStreamIndexConstants
    MF_CAPTURE_ENGINE_FIRST_SOURCE_PHOTO_STREAM = &HFFFFFFFB
    MF_CAPTURE_ENGINE_FIRST_SOURCE_VIDEO_STREAM = &HFFFFFFFC
    MF_CAPTURE_ENGINE_FIRST_SOURCE_AUDIO_STREAM = &HFFFFFFFD
End Enum


[Description("Platform not initialized. Please call MFStartup().")] Public Const MF_E_PLATFORM_NOT_INITIALIZED = &Hc00d36b0
[Description("The buffer was too small to carry out the requested action.")] Public Const MF_E_BUFFERTOOSMALL = &Hc00d36b1
[Description("The request is invalid in the current state.")] Public Const MF_E_INVALIDREQUEST = &Hc00d36b2
[Description("The stream number provided was invalid.")] Public Const MF_E_INVALIDSTREAMNUMBER = &Hc00d36b3
[Description("The data specified for the media type is invalid, inconsistent, or not supported by this object.")] Public Const MF_E_INVALIDMEDIATYPE = &Hc00d36b4
[Description("The callee is currently not accepting further input.")] Public Const MF_E_NOTACCEPTING = &Hc00d36b5
[Description("This object needs to be initialized before the requested operation can be carried out.")] Public Const MF_E_NOT_INITIALIZED = &Hc00d36b6
[Description("The requested representation is not supported by this object.")] Public Const MF_E_UNSUPPORTED_REPRESENTATION = &Hc00d36b7
[Description("An object ran out of media types to suggest therefore the requested chain of streaming objects cannot be completed.")] Public Const MF_E_NO_MORE_TYPES = &Hc00d36b9
[Description("The object does not support the specified service.")] Public Const MF_E_UNSUPPORTED_SERVICE = &Hc00d36ba
[Description("An unexpected error has occurred in the operation requested.")] Public Const MF_E_UNEXPECTED = &Hc00d36bb
[Description("Invalid name.")] Public Const MF_E_INVALIDNAME = &Hc00d36bc
[Description("Invalid type.")] Public Const MF_E_INVALIDTYPE = &Hc00d36bd
[Description("The file does not conform to the relevant file format specification.")] Public Const MF_E_INVALID_FILE_FORMAT = &Hc00d36be
[Description("Invalid index.")] Public Const MF_E_INVALIDINDEX = &Hc00d36bf
[Description("An invalid timestamp was given.")] Public Const MF_E_INVALID_TIMESTAMP = &Hc00d36c0
[Description("The scheme of the given URL is unsupported.")] Public Const MF_E_UNSUPPORTED_SCHEME = &Hc00d36c3
[Description("The byte stream type of the given URL is unsupported.")] Public Const MF_E_UNSUPPORTED_BYTESTREAM_TYPE = &Hc00d36c4
[Description("The given time format is unsupported.")] Public Const MF_E_UNSUPPORTED_TIME_FORMAT = &Hc00d36c5
[Description("The Media Sample does not have a timestamp.")] Public Const MF_E_NO_SAMPLE_TIMESTAMP = &Hc00d36c8
[Description("The Media Sample does not have a duration.")] Public Const MF_E_NO_SAMPLE_DURATION = &Hc00d36c9
[Description("The request failed because the data in the stream is corrupt.")] Public Const MF_E_INVALID_STREAM_DATA = &Hc00d36cb
[Description("Real time services are not available.")] Public Const MF_E_RT_UNAVAILABLE = &Hc00d36cf
[Description("The specified rate is not supported.")] Public Const MF_E_UNSUPPORTED_RATE = &Hc00d36d0
[Description("This component does not support stream-thinning.")] Public Const MF_E_THINNING_UNSUPPORTED = &Hc00d36d1
[Description("The call failed because no reverse playback rates are available.")] Public Const MF_E_REVERSE_UNSUPPORTED = &Hc00d36d2
[Description("The requested rate transition cannot occur in the current state.")] Public Const MF_E_UNSUPPORTED_RATE_TRANSITION = &Hc00d36d3
[Description("The requested rate change has been pre-empted and will not occur.")] Public Const MF_E_RATE_CHANGE_PREEMPTED = &Hc00d36d4
[Description("The specified object or value does not exist.")] Public Const MF_E_NOT_FOUND = &Hc00d36d5
[Description("The requested value is not available.")] Public Const MF_E_NOT_AVAILABLE = &Hc00d36d6
[Description("The specified operation requires a clock and no clock is available.")] Public Const MF_E_NO_CLOCK = &Hc00d36d7
[Description("This callback and state had already been passed in to this event generator earlier.")] Public Const MF_S_MULTIPLE_BEGIN = &H000d36d8
[Description("This callback has already been passed in to this event generator.")] Public Const MF_E_MULTIPLE_BEGIN = &Hc00d36d9
[Description("Some component is already listening to events on this event generator.")] Public Const MF_E_MULTIPLE_SUBSCRIBERS = &Hc00d36da
[Description("This timer was orphaned before its callback time arrived.")] Public Const MF_E_TIMER_ORPHANED = &Hc00d36db
[Description("A state transition is already pending.")] Public Const MF_E_STATE_TRANSITION_PENDING = &Hc00d36dc
[Description("The requested state transition is unsupported.")] Public Const MF_E_UNSUPPORTED_STATE_TRANSITION = &Hc00d36dd
[Description("An unrecoverable error has occurred.")] Public Const MF_E_UNRECOVERABLE_ERROR_OCCURRED = &Hc00d36de
[Description("The provided sample has too many buffers.")] Public Const MF_E_SAMPLE_HAS_TOO_MANY_BUFFERS = &Hc00d36df
[Description("The provided sample is not writable.")] Public Const MF_E_SAMPLE_NOT_WRITABLE = &Hc00d36e0
[Description("The specified key is not valid.")] Public Const MF_E_INVALID_KEY = &Hc00d36e2
[Description("You are calling MFStartup with the wrong MF_VERSION. Mismatched bits?")] Public Const MF_E_BAD_STARTUP_VERSION = &Hc00d36e3
[Description("The caption of the given URL is unsupported.")] Public Const MF_E_UNSUPPORTED_CAPTION = &Hc00d36e4
[Description("The operation on the current offset is not permitted.")] Public Const MF_E_INVALID_POSITION = &Hc00d36e5
[Description("The requested attribute was not found.")] Public Const MF_E_ATTRIBUTENOTFOUND = &Hc00d36e6
[Description("The specified property type is not allowed in this context.")] Public Const MF_E_PROPERTY_TYPE_NOT_ALLOWED = &Hc00d36e7
[Description("The specified property type is not supported.")] Public Const MF_E_PROPERTY_TYPE_NOT_SUPPORTED = &Hc00d36e8
[Description("The specified property is empty.")] Public Const MF_E_PROPERTY_EMPTY = &Hc00d36e9
[Description("The specified property is not empty.")] Public Const MF_E_PROPERTY_NOT_EMPTY = &Hc00d36ea
[Description("The vector property specified is not allowed in this context.")] Public Const MF_E_PROPERTY_VECTOR_NOT_ALLOWED = &Hc00d36eb
[Description("A vector property is required in this context.")] Public Const MF_E_PROPERTY_VECTOR_REQUIRED = &Hc00d36ec
[Description("The operation is cancelled.")] Public Const MF_E_OPERATION_CANCELLED = &Hc00d36ed
[Description("The provided bytestream was expected to be seekable and it is not.")] Public Const MF_E_BYTESTREAM_NOT_SEEKABLE = &Hc00d36ee
[Description("The Media Foundation platform is disabled when the system is running in Safe Mode.")] Public Const MF_E_DISABLED_IN_SAFEMODE = &Hc00d36ef
[Description("The Media Source could not parse the byte stream.")] Public Const MF_E_CANNOT_PARSE_BYTESTREAM = &Hc00d36f0
[Description("Mutually exclusive flags have been specified to source resolver. This flag combination is invalid.")] Public Const MF_E_SOURCERESOLVER_MUTUALLY_EXCLUSIVE_FLAGS = &Hc00d36f1
[Description("MediaProc is in the wrong state")] Public Const MF_E_MEDIAPROC_WRONGSTATE = &Hc00d36f2
[Description("Real time I/O service can not provide requested throughput.")] Public Const MF_E_RT_THROUGHPUT_NOT_AVAILABLE = &Hc00d36f3
[Description("The workqueue cannot be registered with more classes.")] Public Const MF_E_RT_TOO_MANY_CLASSES = &Hc00d36f4
[Description("This operation cannot succeed because another thread owns this object.")] Public Const MF_E_RT_WOULDBLOCK = &Hc00d36f5
[Description("Internal. Bitpump not found.")] Public Const MF_E_NO_BITPUMP = &Hc00d36f6
[Description("No more RT memory available.")] Public Const MF_E_RT_OUTOFMEMORY = &Hc00d36f7
[Description("An MMCSS class has not been set for this work queue.")] Public Const MF_E_RT_WORKQUEUE_CLASS_NOT_SPECIFIED = &Hc00d36f8
[Description("Insufficient memory for response.")] Public Const MF_E_INSUFFICIENT_BUFFER = &Hc00d7170
[Description("Activate failed to create mediasink. Call OutputNode::GetUINT32(MF_TOPONODE_MAJORTYPE) for more information. ")] Public Const MF_E_CANNOT_CREATE_SINK = &Hc00d36fa
[Description("The length of the provided bytestream is unknown.")] Public Const MF_E_BYTESTREAM_UNKNOWN_LENGTH = &Hc00d36fb
[Description("The media session cannot pause from a stopped state.")] Public Const MF_E_SESSION_PAUSEWHILESTOPPED = &Hc00d36fc
[Description("The activate could not be created in the remote process for some reason it was replaced with empty one.")] Public Const MF_S_ACTIVATE_REPLACED = &H000d36fd
[Description("The data specified for the media type is supported, but would require a format change, which is not supported by this object.")] Public Const MF_E_FORMAT_CHANGE_NOT_SUPPORTED = &Hc00d36fe
[Description("The operation failed because an invalid combination of workqueue ID and flags was specified.")] Public Const MF_E_INVALID_WORKQUEUE = &Hc00d36ff
[Description("No DRM support is available.")] Public Const MF_E_DRM_UNSUPPORTED = &Hc00d3700
[Description("This operation is not authorized.")] Public Const MF_E_UNAUTHORIZED = &Hc00d3701
[Description("The value is not in the specified or valid range.")] Public Const MF_E_OUT_OF_RANGE = &Hc00d3702
[Description("The registered codec merit is not valid.")] Public Const MF_E_INVALID_CODEC_MERIT = &Hc00d3703
[Description("Hardware MFT failed to start streaming due to lack of hardware resources.")] Public Const MF_E_HW_MFT_FAILED_START_STREAMING = &Hc00d3704
[Description("Parsing is still in progress and is not yet complete.")] Public Const MF_S_ASF_PARSEINPROGRESS = &H400d3a98
[Description("Not enough data have been parsed to carry out the requested action.")] Public Const MF_E_ASF_PARSINGINCOMPLETE = &Hc00d3a98
[Description("There is a gap in the ASF data provided.")] Public Const MF_E_ASF_MISSINGDATA = &Hc00d3a99
[Description("The data provided are not valid ASF.")] Public Const MF_E_ASF_INVALIDDATA = &Hc00d3a9a
[Description("The packet is opaque, so the requested information cannot be returned.")] Public Const MF_E_ASF_OPAQUEPACKET = &Hc00d3a9b
[Description("The requested operation failed since there is no appropriate ASF index.")] Public Const MF_E_ASF_NOINDEX = &Hc00d3a9c
[Description("The value supplied is out of range for this operation.")] Public Const MF_E_ASF_OUTOFRANGE = &Hc00d3a9d
[Description("The index entry requested needs to be loaded before it can be available.")] Public Const MF_E_ASF_INDEXNOTLOADED = &Hc00d3a9e
[Description("The packet has reached the maximum number of payloads.")] Public Const MF_E_ASF_TOO_MANY_PAYLOADS = &Hc00d3a9f
[Description("Stream type is not supported.")] Public Const MF_E_ASF_UNSUPPORTED_STREAM_TYPE = &Hc00d3aa0
[Description("One or more ASF packets were dropped.")] Public Const MF_E_ASF_DROPPED_PACKET = &Hc00d3aa1
[Description("There are no events available in the queue.")] Public Const MF_E_NO_EVENTS_AVAILABLE = &Hc00d3e80
[Description("A media source cannot go from the stopped state to the paused state.")] Public Const MF_E_INVALID_STATE_TRANSITION = &Hc00d3e82
[Description("The media stream cannot process any more samples because there are no more samples in the stream.")] Public Const MF_E_END_OF_STREAM = &Hc00d3e84
[Description("The request is invalid because Shutdown() has been called.")] Public Const MF_E_SHUTDOWN = &Hc00d3e85
[Description("The MP3 object was not found.")] Public Const MF_E_MP3_NOTFOUND = &Hc00d3e86
[Description("The MP3 parser ran out of data before finding the MP3 object.")] Public Const MF_E_MP3_OUTOFDATA = &Hc00d3e87
[Description("The file is not really a MP3 file.")] Public Const MF_E_MP3_NOTMP3 = &Hc00d3e88
[Description("The MP3 file is not supported.")] Public Const MF_E_MP3_NOTSUPPORTED = &Hc00d3e89
[Description("The Media stream has no duration.")] Public Const MF_E_NO_DURATION = &Hc00d3e8a
[Description("The Media format is recognized but is invalid.")] Public Const MF_E_INVALID_FORMAT = &Hc00d3e8c
[Description("The property requested was not found.")] Public Const MF_E_PROPERTY_NOT_FOUND = &Hc00d3e8d
[Description("The property is read only.")] Public Const MF_E_PROPERTY_READ_ONLY = &Hc00d3e8e
[Description("The specified property is not allowed in this context.")] Public Const MF_E_PROPERTY_NOT_ALLOWED = &Hc00d3e8f
[Description("The media source is not started.")] Public Const MF_E_MEDIA_SOURCE_NOT_STARTED = &Hc00d3e91
[Description("The Media format is recognized but not supported.")] Public Const MF_E_UNSUPPORTED_FORMAT = &Hc00d3e98
[Description("The MPEG frame has bad CRC.")] Public Const MF_E_MP3_BAD_CRC = &Hc00d3e99
[Description("The file is not protected.")] Public Const MF_E_NOT_PROTECTED = &Hc00d3e9a
[Description("The media source is in the wrong state")] Public Const MF_E_MEDIA_SOURCE_WRONGSTATE = &Hc00d3e9b
[Description("No streams are selected in source presentation descriptor.")] Public Const MF_E_MEDIA_SOURCE_NO_STREAMS_SELECTED = &Hc00d3e9c
[Description("No key frame sample was found.")] Public Const MF_E_CANNOT_FIND_KEYFRAME_SAMPLE = &Hc00d3e9d
[Description("An attempt to acquire a network resource failed.")] Public Const MF_E_NETWORK_RESOURCE_FAILURE = &Hc00d4268
[Description("Error writing to the network.")] Public Const MF_E_NET_WRITE = &Hc00d4269
[Description("Error reading from the network.")] Public Const MF_E_NET_READ = &Hc00d426a
[Description("Internal. Entry cannot complete operation without network.")] Public Const MF_E_NET_REQUIRE_NETWORK = &Hc00d426b
[Description("Internal. Async op is required.")] Public Const MF_E_NET_REQUIRE_ASYNC = &Hc00d426c
[Description("Internal. Bandwidth levels are not supported.")] Public Const MF_E_NET_BWLEVEL_NOT_SUPPORTED = &Hc00d426d
[Description("Internal. Stream groups are not supported.")] Public Const MF_E_NET_STREAMGROUPS_NOT_SUPPORTED = &Hc00d426e
[Description("Manual stream selection is not supported.")] Public Const MF_E_NET_MANUALSS_NOT_SUPPORTED = &Hc00d426f
[Description("Invalid presentation descriptor.")] Public Const MF_E_NET_INVALID_PRESENTATION_DESCRIPTOR = &Hc00d4270
[Description("Cannot find cache stream.")] Public Const MF_E_NET_CACHESTREAM_NOT_FOUND = &Hc00d4271
[Description("The proxy setting is manual.")] Public Const MF_I_MANUAL_PROXY = &H400d4272
[Description("Internal. Entry cannot complete operation without input.")] Public Const MF_E_NET_REQUIRE_INPUT = &Hc00d4274
[Description("The client redirected to another server.")] Public Const MF_E_NET_REDIRECT = &Hc00d4275
[Description("The client is redirected to a proxy server.")] Public Const MF_E_NET_REDIRECT_TO_PROXY = &Hc00d4276
[Description("The client reached maximum redirection limit.")] Public Const MF_E_NET_TOO_MANY_REDIRECTS = &Hc00d4277
[Description("The server, a computer set up to offer multimedia content to other computers, could not handle your request for multimedia content in a timely manner.  Please try again later.")] Public Const MF_E_NET_TIMEOUT = &Hc00d4278
[Description("The control socket is closed by the client.")] Public Const MF_E_NET_CLIENT_CLOSE = &Hc00d4279
[Description("The server received invalid data from the client on the control connection.")] Public Const MF_E_NET_BAD_CONTROL_DATA = &Hc00d427a
[Description("The server is not a compatible streaming media server.")] Public Const MF_E_NET_INCOMPATIBLE_SERVER = &Hc00d427b
[Description("Url.")] Public Const MF_E_NET_UNSAFE_URL = &Hc00d427c
[Description("Data is not available.")] Public Const MF_E_NET_CACHE_NO_DATA = &Hc00d427d
[Description("End of line.")] Public Const MF_E_NET_EOL = &Hc00d427e
[Description("The request could not be understood by the server.")] Public Const MF_E_NET_BAD_REQUEST = &Hc00d427f
[Description("The server encountered an unexpected condition which prevented it from fulfilling the request.")] Public Const MF_E_NET_INTERNAL_SERVER_ERROR = &Hc00d4280
[Description("Session not found.")] Public Const MF_E_NET_SESSION_NOT_FOUND = &Hc00d4281
[Description("There is no connection established with the Windows Media server. The operation failed.")] Public Const MF_E_NET_NOCONNECTION = &Hc00d4282
[Description("The network connection has failed.")] Public Const MF_E_NET_CONNECTION_FAILURE = &Hc00d4283
[Description("The Server service that received the HTTP push request is not a compatible version of Windows Media Services (WMS).")] Public Const MF_E_NET_INCOMPATIBLE_PUSHSERVER = &Hc00d4284
[Description("The Windows Media server is denying access.  The username and/or password might be incorrect.")] Public Const MF_E_NET_SERVER_ACCESSDENIED = &Hc00d4285
[Description("The proxy server is denying access.  The username and/or password might be incorrect.")] Public Const MF_E_NET_PROXY_ACCESSDENIED = &Hc00d4286
[Description("Unable to establish a connection to the server.")] Public Const MF_E_NET_CANNOTCONNECT = &Hc00d4287
[Description("The specified push template is invalid.")] Public Const MF_E_NET_INVALID_PUSH_TEMPLATE = &Hc00d4288
[Description("The specified push publishing point is invalid.")] Public Const MF_E_NET_INVALID_PUSH_PUBLISHING_POINT = &Hc00d4289
[Description("The requested resource is in use.")] Public Const MF_E_NET_BUSY = &Hc00d428a
[Description("The Publishing Point or file on the Windows Media Server is no longer available.")] Public Const MF_E_NET_RESOURCE_GONE = &Hc00d428b
[Description("The proxy experienced an error while attempting to contact the media server.")] Public Const MF_E_NET_ERROR_FROM_PROXY = &Hc00d428c
[Description("The proxy did not receive a timely response while attempting to contact the media server.")] Public Const MF_E_NET_PROXY_TIMEOUT = &Hc00d428d
[Description("The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.")] Public Const MF_E_NET_SERVER_UNAVAILABLE = &Hc00d428e
[Description("The encoding process was unable to keep up with the amount of supplied data.")] Public Const MF_E_NET_TOO_MUCH_DATA = &Hc00d428f
[Description("Session not found.")] Public Const MF_E_NET_SESSION_INVALID = &Hc00d4290
[Description("The requested URL is not available in offline mode.")] Public Const MF_E_OFFLINE_MODE = &Hc00d4291
[Description("A device in the network is blocking UDP traffic.")] Public Const MF_E_NET_UDP_BLOCKED = &Hc00d4292
[Description("The specified configuration value is not supported.")] Public Const MF_E_NET_UNSUPPORTED_CONFIGURATION = &Hc00d4293
[Description("The networking protocol is disabled.")] Public Const MF_E_NET_PROTOCOL_DISABLED = &Hc00d4294
[Description("This object has already been initialized and cannot be re-initialized at this time.")] Public Const MF_E_ALREADY_INITIALIZED = &Hc00d4650
[Description("The amount of data passed in exceeds the given bitrate and buffer window.")] Public Const MF_E_BANDWIDTH_OVERRUN = &Hc00d4651
[Description("The sample was passed in too late to be correctly processed.")] Public Const MF_E_LATE_SAMPLE = &Hc00d4652
[Description("The requested action cannot be carried out until the object is flushed and the queue is emptied.")] Public Const MF_E_FLUSH_NEEDED = &Hc00d4653
[Description("The profile is invalid.")] Public Const MF_E_INVALID_PROFILE = &Hc00d4654
[Description("The index that is being generated needs to be committed before the requested action can be carried out.")] Public Const MF_E_INDEX_NOT_COMMITTED = &Hc00d4655
[Description("The index that is necessary for the requested action is not found.")] Public Const MF_E_NO_INDEX = &Hc00d4656
[Description("The requested index cannot be added in-place to the specified ASF content.")] Public Const MF_E_CANNOT_INDEX_IN_PLACE = &Hc00d4657
[Description("The ASF leaky bucket parameters must be specified in order to carry out this request.")] Public Const MF_E_MISSING_ASF_LEAKYBUCKET = &Hc00d4658
[Description("The stream id is invalid. The valid range for ASF stream id is from 1 to 127.")] Public Const MF_E_INVALID_ASF_STREAMID = &Hc00d4659
[Description("The requested Stream Sink has been removed and cannot be used.")] Public Const MF_E_STREAMSINK_REMOVED = &Hc00d4a38
[Description("The various Stream Sinks in this Media Sink are too far out of sync for the requested action to take place.")] Public Const MF_E_STREAMSINKS_OUT_OF_SYNC = &Hc00d4a3a
[Description("Stream Sinks cannot be added to or removed from this Media Sink because its set of streams is fixed.")] Public Const MF_E_STREAMSINKS_FIXED = &Hc00d4a3b
[Description("The given Stream Sink already exists.")] Public Const MF_E_STREAMSINK_EXISTS = &Hc00d4a3c
[Description("Sample allocations have been canceled.")] Public Const MF_E_SAMPLEALLOCATOR_CANCELED = &Hc00d4a3d
[Description("The sample allocator is currently empty, due to outstanding requests.")] Public Const MF_E_SAMPLEALLOCATOR_EMPTY = &Hc00d4a3e
[Description("When we try to sopt a stream sink, it is already stopped ")] Public Const MF_E_SINK_ALREADYSTOPPED = &Hc00d4a3f
[Description("The ASF file sink could not reserve AVIO because the bitrate is unknown.")] Public Const MF_E_ASF_FILESINK_BITRATE_UNKNOWN = &Hc00d4a40
[Description("No streams are selected in sink presentation descriptor.")] Public Const MF_E_SINK_NO_STREAMS = &Hc00d4a41
[Description("The sink has not been finalized before shut down. This may cause sink generate a corrupted content.")] Public Const MF_S_SINK_NOT_FINALIZED = &H000d4a42
[Description("A metadata item was too long to write to the output container.")] Public Const MF_E_METADATA_TOO_LONG = &Hc00d4a43
[Description("The operation failed because no samples were processed by the sink.")] Public Const MF_E_SINK_NO_SAMPLES_PROCESSED = &Hc00d4a44
[Description("There is no available procamp hardware with which to perform color correction.")] Public Const MF_E_VIDEO_REN_NO_PROCAMP_HW = &Hc00d4e20
[Description("There is no available deinterlacing hardware with which to deinterlace the video stream.")] Public Const MF_E_VIDEO_REN_NO_DEINTERLACE_HW = &Hc00d4e21
[Description("A video stream requires copy protection to be enabled, but there was a failure in attempting to enable copy protection.")] Public Const MF_E_VIDEO_REN_COPYPROT_FAILED = &Hc00d4e22
[Description("A component is attempting to access a surface for sharing that is not shared.")] Public Const MF_E_VIDEO_REN_SURFACE_NOT_SHARED = &Hc00d4e23
[Description("A component is attempting to access a shared device that is already locked by another component.")] Public Const MF_E_VIDEO_DEVICE_LOCKED = &Hc00d4e24
[Description("The device is no longer available. The handle should be closed and a new one opened.")] Public Const MF_E_NEW_VIDEO_DEVICE = &Hc00d4e25
[Description("A video sample is not currently queued on a stream that is required for mixing.")] Public Const MF_E_NO_VIDEO_SAMPLE_AVAILABLE = &Hc00d4e26
[Description("No audio playback device was found.")] Public Const MF_E_NO_AUDIO_PLAYBACK_DEVICE = &Hc00d4e84
[Description("The requested audio playback device is currently in use.")] Public Const MF_E_AUDIO_PLAYBACK_DEVICE_IN_USE = &Hc00d4e85
[Description("The audio playback device is no longer present.")] Public Const MF_E_AUDIO_PLAYBACK_DEVICE_INVALIDATED = &Hc00d4e86
[Description("The audio service is not running.")] Public Const MF_E_AUDIO_SERVICE_NOT_RUNNING = &Hc00d4e87
[Description("The topology contains an invalid optional node.  Possible reasons are incorrect number of outputs and inputs or optional node is at the beginning or end of a segment. ")] Public Const MF_E_TOPO_INVALID_OPTIONAL_NODE = &Hc00d520e
[Description("No suitable transform was found to decrypt the content. ")] Public Const MF_E_TOPO_CANNOT_FIND_DECRYPTOR = &Hc00d5211
[Description("No suitable transform was found to encode or decode the content. ")] Public Const MF_E_TOPO_CODEC_NOT_FOUND = &Hc00d5212
[Description("Unable to find a way to connect nodes")] Public Const MF_E_TOPO_CANNOT_CONNECT = &Hc00d5213
[Description("Unsupported operations in topoloader")] Public Const MF_E_TOPO_UNSUPPORTED = &Hc00d5214
[Description("The topology or its nodes contain incorrectly set time attributes")] Public Const MF_E_TOPO_INVALID_TIME_ATTRIBUTES = &Hc00d5215
[Description("The topology contains loops, which are unsupported in media foundation topologies")] Public Const MF_E_TOPO_LOOPS_IN_TOPOLOGY = &Hc00d5216
[Description("A source stream node in the topology does not have a presentation descriptor")] Public Const MF_E_TOPO_MISSING_PRESENTATION_DESCRIPTOR = &Hc00d5217
[Description("A source stream node in the topology does not have a stream descriptor")] Public Const MF_E_TOPO_MISSING_STREAM_DESCRIPTOR = &Hc00d5218
[Description("A stream descriptor was set on a source stream node but it was not selected on the presentation descriptor")] Public Const MF_E_TOPO_STREAM_DESCRIPTOR_NOT_SELECTED = &Hc00d5219
[Description("A source stream node in the topology does not have a source")] Public Const MF_E_TOPO_MISSING_SOURCE = &Hc00d521a
[Description("The topology loader does not support sink activates on output nodes.")] Public Const MF_E_TOPO_SINK_ACTIVATES_UNSUPPORTED = &Hc00d521b
[Description("The sequencer cannot find a segment with the given ID.")] Public Const MF_E_SEQUENCER_UNKNOWN_SEGMENT_ID = &Hc00d61ac
[Description("The context was canceled.")] Public Const MF_S_SEQUENCER_CONTEXT_CANCELED = &H000d61ad
[Description("Cannot find source in source cache.")] Public Const MF_E_NO_SOURCE_IN_CACHE = &Hc00d61ae
[Description("Cannot update topology flags.")] Public Const MF_S_SEQUENCER_SEGMENT_AT_END_OF_STREAM = &H000d61af
[Description("A valid type has not been set for this stream or a stream that it depends on.")] Public Const MF_E_TRANSFORM_TYPE_NOT_SET = &Hc00d6d60
[Description("A stream change has occurred. Output cannot be produced until the streams have been renegotiated.")] Public Const MF_E_TRANSFORM_STREAM_CHANGE = &Hc00d6d61
[Description("The transform cannot take the requested action until all of the input data it currently holds is processed or flushed.")] Public Const MF_E_TRANSFORM_INPUT_REMAINING = &Hc00d6d62
[Description("The transform requires a profile but no profile was supplied or found.")] Public Const MF_E_TRANSFORM_PROFILE_MISSING = &Hc00d6d63
[Description("The transform requires a profile but the supplied profile was invalid or corrupt.")] Public Const MF_E_TRANSFORM_PROFILE_INVALID_OR_CORRUPT = &Hc00d6d64
[Description("The transform requires a profile but the supplied profile ended unexpectedly while parsing.")] Public Const MF_E_TRANSFORM_PROFILE_TRUNCATED = &Hc00d6d65
[Description("The property ID does not match any property supported by the transform.")] Public Const MF_E_TRANSFORM_PROPERTY_PID_NOT_RECOGNIZED = &Hc00d6d66
[Description("The variant does not have the type expected for this property ID.")] Public Const MF_E_TRANSFORM_PROPERTY_VARIANT_TYPE_WRONG = &Hc00d6d67
[Description("An attempt was made to set the value on a read-only property.")] Public Const MF_E_TRANSFORM_PROPERTY_NOT_WRITEABLE = &Hc00d6d68
[Description("The array property value has an unexpected number of dimensions.")] Public Const MF_E_TRANSFORM_PROPERTY_ARRAY_VALUE_WRONG_NUM_DIM = &Hc00d6d69
[Description("The array or blob property value has an unexpected size.")] Public Const MF_E_TRANSFORM_PROPERTY_VALUE_SIZE_WRONG = &Hc00d6d6a
[Description("The property value is out of range for this transform.")] Public Const MF_E_TRANSFORM_PROPERTY_VALUE_OUT_OF_RANGE = &Hc00d6d6b
[Description("The property value is incompatible with some other property or mediatype set on the transform.")] Public Const MF_E_TRANSFORM_PROPERTY_VALUE_INCOMPATIBLE = &Hc00d6d6c
[Description("The requested operation is not supported for the currently set output mediatype.")] Public Const MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_OUTPUT_MEDIATYPE = &Hc00d6d6d
[Description("The requested operation is not supported for the currently set input mediatype.")] Public Const MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_INPUT_MEDIATYPE = &Hc00d6d6e
[Description("The requested operation is not supported for the currently set combination of mediatypes.")] Public Const MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_MEDIATYPE_COMBINATION = &Hc00d6d6f
[Description("The requested feature is not supported in combination with some other currently enabled feature.")] Public Const MF_E_TRANSFORM_CONFLICTS_WITH_OTHER_CURRENTLY_ENABLED_FEATURES = &Hc00d6d70
[Description("The transform cannot produce output until it gets more input samples.")] Public Const MF_E_TRANSFORM_NEED_MORE_INPUT = &Hc00d6d72
[Description("The requested operation is not supported for the current speaker configuration.")] Public Const MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_SPKR_CONFIG = &Hc00d6d73
[Description("The transform cannot accept mediatype changes in the middle of processing.")] Public Const MF_E_TRANSFORM_CANNOT_CHANGE_MEDIATYPE_WHILE_PROCESSING = &Hc00d6d74
[Description("The caller should not propagate this event to downstream components.")] Public Const MF_S_TRANSFORM_DO_NOT_PROPAGATE_EVENT = &H000d6d75
[Description("The input type is not supported for D3D device.")] Public Const MF_E_UNSUPPORTED_D3D_TYPE = &Hc00d6d76
[Description("The caller does not appear to support this transform's asynchronous capabilities.")] Public Const MF_E_TRANSFORM_ASYNC_LOCKED = &Hc00d6d77
[Description("An audio compression manager driver could not be initialized by the transform.")] Public Const MF_E_TRANSFORM_CANNOT_INITIALIZE_ACM_DRIVER = &Hc00d6d78
[Description("You are not allowed to open this file. Contact the content provider for further assistance.")] Public Const MF_E_LICENSE_INCORRECT_RIGHTS = &Hc00d7148
[Description("The license for this media file has expired. Get a new license or contact the content provider for further assistance.")] Public Const MF_E_LICENSE_OUTOFDATE = &Hc00d7149
[Description("You need a license to perform the requested operation on this media file.")] Public Const MF_E_LICENSE_REQUIRED = &Hc00d714a
[Description("The licenses for your media files are corrupted. Contact Microsoft product support.")] Public Const MF_E_DRM_HARDWARE_INCONSISTENT = &Hc00d714b
[Description("The APP needs to provide IMFContentProtectionManager callback to access the protected media file.")] Public Const MF_E_NO_CONTENT_PROTECTION_MANAGER = &Hc00d714c
[Description("Client does not have rights to restore licenses.")] Public Const MF_E_LICENSE_RESTORE_NO_RIGHTS = &Hc00d714d
[Description("Licenses are restricted and hence can not be backed up.")] Public Const MF_E_BACKUP_RESTRICTED_LICENSE = &Hc00d714e
[Description("License restore requires machine to be individualized.")] Public Const MF_E_LICENSE_RESTORE_NEEDS_INDIVIDUALIZATION = &Hc00d714f
[Description("Protection for stream is not required.")] Public Const MF_S_PROTECTION_NOT_REQUIRED = &H000d7150
[Description("Component is revoked.")] Public Const MF_E_COMPONENT_REVOKED = &Hc00d7151
[Description("Trusted functionality is currently disabled on this component.")] Public Const MF_E_TRUST_DISABLED = &Hc00d7152
[Description("No Action is set on WMDRM Output Trust Authority.")] Public Const MF_E_WMDRMOTA_NO_ACTION = &Hc00d7153
[Description("Action is already set on WMDRM Output Trust Authority.")] Public Const MF_E_WMDRMOTA_ACTION_ALREADY_SET = &Hc00d7154
[Description("DRM Heaader is not available.")] Public Const MF_E_WMDRMOTA_DRM_HEADER_NOT_AVAILABLE = &Hc00d7155
[Description("Current encryption scheme is not supported.")] Public Const MF_E_WMDRMOTA_DRM_ENCRYPTION_SCHEME_NOT_SUPPORTED = &Hc00d7156
[Description("Action does not match with current configuration.")] Public Const MF_E_WMDRMOTA_ACTION_MISMATCH = &Hc00d7157
[Description("Invalid policy for WMDRM Output Trust Authority.")] Public Const MF_E_WMDRMOTA_INVALID_POLICY = &Hc00d7158
[Description("The policies that the Input Trust Authority requires to be enforced are unsupported by the outputs.")] Public Const MF_E_POLICY_UNSUPPORTED = &Hc00d7159
[Description("The OPL that the license requires to be enforced are not supported by the Input Trust Authority.")] Public Const MF_E_OPL_NOT_SUPPORTED = &Hc00d715a
[Description("The topology could not be successfully verified.")] Public Const MF_E_TOPOLOGY_VERIFICATION_FAILED = &Hc00d715b
[Description("Signature verification could not be completed successfully for this component.")] Public Const MF_E_SIGNATURE_VERIFICATION_FAILED = &Hc00d715c
[Description("Running this process under a debugger while using protected content is not allowed.")] Public Const MF_E_DEBUGGING_NOT_ALLOWED = &Hc00d715d
[Description("MF component has expired.")] Public Const MF_E_CODE_EXPIRED = &Hc00d715e
[Description("The current GRL on the machine does not meet the minimum version requirements.")] Public Const MF_E_GRL_VERSION_TOO_LOW = &Hc00d715f
[Description("The current GRL on the machine does not contain any renewal entries for the specified revocation.")] Public Const MF_E_GRL_RENEWAL_NOT_FOUND = &Hc00d7160
[Description("The current GRL on the machine does not contain any extensible entries for the specified extension GUID.")] Public Const MF_E_GRL_EXTENSIBLE_ENTRY_NOT_FOUND = &Hc00d7161
[Description("The kernel isn't secure for high security level content.")] Public Const MF_E_KERNEL_UNTRUSTED = &Hc00d7162
[Description("The response from protected environment driver isn't valid.")] Public Const MF_E_PEAUTH_UNTRUSTED = &Hc00d7163
[Description("A non-PE process tried to talk to PEAuth.")] Public Const MF_E_NON_PE_PROCESS = &Hc00d7165
[Description("We need to reboot the machine.")] Public Const MF_E_REBOOT_REQUIRED = &Hc00d7167
[Description("Protection for this stream is not guaranteed to be enforced until the MEPolicySet event is fired.")] Public Const MF_S_WAIT_FOR_POLICY_SET = &H000d7168
[Description("This video stream is disabled because it is being sent to an unknown software output.")] Public Const MF_S_VIDEO_DISABLED_WITH_UNKNOWN_SOFTWARE_OUTPUT = &H000d7169
[Description("The GRL file is not correctly formed, it may have been corrupted or overwritten.")] Public Const MF_E_GRL_INVALID_FORMAT = &Hc00d716a
[Description("The GRL file is in a format newer than those recognized by this GRL Reader.")] Public Const MF_E_GRL_UNRECOGNIZED_FORMAT = &Hc00d716b
[Description("The GRL was reloaded and required all processes that can run protected media to restart.")] Public Const MF_E_ALL_PROCESS_RESTART_REQUIRED = &Hc00d716c
[Description("The GRL was reloaded and the current process needs to restart.")] Public Const MF_E_PROCESS_RESTART_REQUIRED = &Hc00d716d
[Description("The user space is untrusted for protected content play.")] Public Const MF_E_USERMODE_UNTRUSTED = &Hc00d716e
[Description("PEAuth communication session hasn't been started.")] Public Const MF_E_PEAUTH_SESSION_NOT_STARTED = &Hc00d716f
[Description("PEAuth's public key is revoked.")] Public Const MF_E_PEAUTH_PUBLICKEY_REVOKED = &Hc00d7171
[Description("The GRL is absent.")] Public Const MF_E_GRL_ABSENT = &Hc00d7172
[Description("The Protected Environment is trusted.")] Public Const MF_S_PE_TRUSTED = &H000d7173
[Description("The Protected Environment is untrusted.")] Public Const MF_E_PE_UNTRUSTED = &Hc00d7174
[Description("The Protected Environment Authorization service (PEAUTH) has not been started.")] Public Const MF_E_PEAUTH_NOT_STARTED = &Hc00d7175
[Description("The sample protection algorithms supported by components are not compatible.")] Public Const MF_E_INCOMPATIBLE_SAMPLE_PROTECTION = &Hc00d7176
[Description("No more protected environment sessions can be supported.")] Public Const MF_E_PE_SESSIONS_MAXED = &Hc00d7177
[Description("WMDRM ITA does not allow protected content with high security level for this release.")] Public Const MF_E_HIGH_SECURITY_LEVEL_CONTENT_NOT_ALLOWED = &Hc00d7178
[Description("WMDRM ITA cannot allow the requested action for the content as one or more components is not properly signed.")] Public Const MF_E_TEST_SIGNED_COMPONENTS_NOT_ALLOWED = &Hc00d7179
[Description("WMDRM ITA does not support the requested action.")] Public Const MF_E_ITA_UNSUPPORTED_ACTION = &Hc00d717a
[Description("WMDRM ITA encountered an error in parsing the Secure Audio Path parameters.")] Public Const MF_E_ITA_ERROR_PARSING_SAP_PARAMETERS = &Hc00d717b
[Description("The Policy Manager action passed in is invalid.")] Public Const MF_E_POLICY_MGR_ACTION_OUTOFBOUNDS = &Hc00d717c
[Description("The structure specifying Output Protection Level is not the correct format.")] Public Const MF_E_BAD_OPL_STRUCTURE_FORMAT = &Hc00d717d
[Description("WMDRM ITA does not recognize the Explicite Analog Video Output Protection guid specified in the license.")] Public Const MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_PROTECTION_GUID = &Hc00d717e
[Description("IMFPMPHost object not available.")] Public Const MF_E_NO_PMP_HOST = &Hc00d717f
[Description("WMDRM ITA could not initialize the Output Protection Level data.")] Public Const MF_E_ITA_OPL_DATA_NOT_INITIALIZED = &Hc00d7180
[Description("WMDRM ITA does not recognize the Analog Video Output specified by the OTA.")] Public Const MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_OUTPUT = &Hc00d7181
[Description("WMDRM ITA does not recognize the Digital Video Output specified by the OTA.")] Public Const MF_E_ITA_UNRECOGNIZED_DIGITAL_VIDEO_OUTPUT = &Hc00d7182
[Description("The continuity key supplied is not currently valid.")] Public Const MF_E_CLOCK_INVALID_CONTINUITY_KEY = &Hc00d9c40
[Description("No Presentation Time Source has been specified.")] Public Const MF_E_CLOCK_NO_TIME_SOURCE = &Hc00d9c41
[Description("The clock is already in the requested state.")] Public Const MF_E_CLOCK_STATE_ALREADY_SET = &Hc00d9c42
[Description("The clock has too many advanced features to carry out the request.")] Public Const MF_E_CLOCK_NOT_SIMPLE = &Hc00d9c43
[Description("Timer::SetTimer returns this success code if called happened while timer is stopped. Timer is not going to be dispatched until clock is running")] Public Const MF_S_CLOCK_STOPPED = &H000d9c44
[Description("The component does not support any more drop modes.")] Public Const MF_E_NO_MORE_DROP_MODES = &Hc00da028
[Description("The component does not support any more quality levels.")] Public Const MF_E_NO_MORE_QUALITY_LEVELS = &Hc00da029
[Description("The component does not support drop time functionality.")] Public Const MF_E_DROPTIME_NOT_SUPPORTED = &Hc00da02a
[Description("Quality Manager needs to wait longer before bumping the Quality Level up.")] Public Const MF_E_QUALITYKNOB_WAIT_LONGER = &Hc00da02b
[Description("Quality Manager is in an invalid state. Quality Management is off at this moment.")] Public Const MF_E_QM_INVALIDSTATE = &Hc00da02c
[Description("No transcode output container type is specified.")] Public Const MF_E_TRANSCODE_NO_CONTAINERTYPE = &Hc00da410
[Description("The profile does not have a media type configuration for any selected source streams.")] Public Const MF_E_TRANSCODE_PROFILE_NO_MATCHING_STREAMS = &Hc00da411
[Description("Cannot find an encoder MFT that accepts the user preferred output type.")] Public Const MF_E_TRANSCODE_NO_MATCHING_ENCODER = &Hc00da412
[Description("Memory allocator is not initialized.")] Public Const MF_E_ALLOCATOR_NOT_INITIALIZED = &Hc00da7f8
[Description("Memory allocator is not committed yet.")] Public Const MF_E_ALLOCATOR_NOT_COMMITED = &Hc00da7f9
[Description("Memory allocator has already been committed.")] Public Const MF_E_ALLOCATOR_ALREADY_COMMITED = &Hc00da7fa
[Description("An error occurred in media stream.")] Public Const MF_E_STREAM_ERROR = &Hc00da7fb
[Description("Stream is not in a state to handle the request.")] Public Const MF_E_INVALID_STREAM_STATE = &Hc00da7fc
[Description("Hardware stream is not connected yet.")] Public Const MF_E_HW_STREAM_NOT_CONNECTED = &Hc00da7fd
        

Public Enum MfByteStreamSeekFlags
    MFBYTESTREAM_SEEK_FLAG_CANCEL_PENDING_IO = 1
End Enum
Public Enum MfAsyncParamFlags
    MFASYNC_FAST_IO_PROCESSING_CALLBACK = 1
    MFASYNC_SIGNAL_CALLBACK = 2
    MFASYNC_BLOCKING_CALLBACK = 4
    MFASYNC_REPLY_CALLBACK = 8
    MFASYNC_LOCALIZE_REMOTE_CALLBACK = 10
End Enum

Public Enum MFCallbackQueue
    MFASYNC_CALLBACK_QUEUE_UNDEFINED = &H00000000
    MFASYNC_CALLBACK_QUEUE_STANDARD = &H00000001
    MFASYNC_CALLBACK_QUEUE_RT = &H00000002
    MFASYNC_CALLBACK_QUEUE_IO = &H00000003
    MFASYNC_CALLBACK_QUEUE_TIMER = &H00000004
    MFASYNC_CALLBACK_QUEUE_MULTITHREADED = &H00000005
    MFASYNC_CALLBACK_QUEUE_LONG_FUNCTION = &H00000007
    MFASYNC_CALLBACK_QUEUE_PRIVATE_MASK = &HFFFF0000
    MFASYNC_CALLBACK_QUEUE_ALL = &HFFFFFFFF
End Enum

Public Const MF_EVENT_FLAG_NO_WAIT = 1

Public Enum MfSourceReaderDefaultStreamIndexes
    MF_SOURCE_READER_INVALID_STREAM_INDEX = &HFFFFFFFF
    MF_SOURCE_READER_ALL_STREAMS = &HFFFFFFFE
    MF_SOURCE_READER_ANY_STREAM = &HFFFFFFFE
    MF_SOURCE_READER_FIRST_AUDIO_STREAM = &HFFFFFFFD
    MF_SOURCE_READER_FIRST_VIDEO_STREAM = &HFFFFFFFC
    MF_SOURCE_READER_MEDIASOURCE = &HFFFFFFFF
End Enum
Public Const MF_SOURCE_READER_CURRENT_TYPE_INDEX = &Hffffffff

Public Enum MfMediaTypeEqualFlags
    MF_MEDIATYPE_EQUAL_MAJOR_TYPES = 1
    MF_MEDIATYPE_EQUAL_FORMAT_TYPES = 2
    MF_MEDIATYPE_EQUAL_FORMAT_DATA = 4
    MF_MEDIATYPE_EQUAL_FORMAT_USER_DATA = 8
End Enum
#If TWINBASIC Then
Public Const MF_INVALID_PRESENTATION_TIME = &H8000000000000000
#End If
 
Public Const MFASFINDEXER_PER_ENTRY_BYTES_DYNAMIC  = &Hffff
Public Const MFASFINDEXER_NO_FIXED_INTERVAL  = &Hffffffff
Public Const MFASFINDEXER_READ_FOR_REVERSEPLAYBACK_OUTOFDATASEGMENT  = &Hffffffffffffffff
Public Const MFASFINDEXER_APPROX_SEEK_TIME_UNKNOWN  = &Hffffffffffffffff

Public Enum MFASF_SPLITTERFLAGS
    MFASF_SPLITTER_REVERSE = 1
    MFASF_SPLITTER_WMDRM = 2
End Enum

Public Enum ASF_STATUSFLAGS
    ASF_STATUSFLAGS_INCOMPLETE = 1
    ASF_STATUSFLAGS_NONFATAL_ERROR = 2
End Enum

Public Enum MFASF_MULTIPLEXERFLAGS
    MFASF_MULTIPLEXER_AUTOADJUST_BITRATE = 1
End Enum

Public Type ASF_MUX_STATISTICS
    cFramesWritten As Long
    cFramesDropped As Long
End Type

Public Enum MFASF_STREAMSELECTOR_FLAGS
    MFASF_STREAMSELECTOR_DISABLE_THINNING = 1
    MFASF_STREAMSELECTOR_USE_AVERAGE_BITRATE = 2
End Enum

Public Enum ASF_SELECTION_STATUS
    ASF_STATUS_NOTSELECTED = 0
    ASF_STATUS_CLEANPOINTSONLY = 1
    ASF_STATUS_ALLDATAUNITS = 2
End Enum

Public Enum MFSINK_WMDRMACTION
    MFSINK_WMDRMACTION_UNDEFINED = 0
    MFSINK_WMDRMACTION_ENCODE = 1
    MFSINK_WMDRMACTION_TRANSCODE = 2
    MFSINK_WMDRMACTION_TRANSCRYPT = 3
    MFSINK_WMDRMACTION_LAST = 3
End Enum

Public Enum MFASF_INDEXER_FLAGS
    MFASF_INDEXER_WRITE_NEW_INDEX = 1
    MFASF_INDEXER_READ_FOR_REVERSEPLAYBACK = 2
    MFASF_INDEXER_WRITE_FOR_LIVEREAD = 4
End Enum

Public Type ASF_INDEX_IDENTIFIER
    guidIndexType As UUID
    wStreamNumber As Integer
End Type

Public Type ASF_INDEX_DESCRIPTOR
    identifier As ASF_INDEX_IDENTIFIER
    cPerEntryBytes As Integer
    szDescription(0 To 31) As Integer
    dwInterval As Long
End Type




Public Function KSPROPSETID_OPMVideoOutput() As UUID
'{06F414BB-F43A-4fe2-A566-774B4C81F0DB}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H06F414BB, CInt(&HF43A), CInt(&H4fe2), &HA5, &H66, &H77, &H4B, &H4C, &H81, &HF0, &HDB)
 KSPROPSETID_OPMVideoOutput = iid
End Function

Public Enum KSMETHOD_OPMVIDEOOUTPUT
    '   Output is OPM_RANDOM_NUMBER followed by certifiate
    KSMETHOD_OPMVIDEOOUTPUT_STARTINITIALIZATION = 0
    '   Input OPM_ENCRYPTED_INITIALIZATION_PARAMETERS
    '   Output OPM_STANDARD_INFORMATION
    KSMETHOD_OPMVIDEOOUTPUT_FINISHINITIALIZATION = 1
    '   Input is OPM_GET_INFO_PARAMETERS, output is OPM_REQUESTED_INFORMATION
    '   Use KsMethod - both input and output in the buffer (not after the KSMETHOD structure)
    KSMETHOD_OPMVIDEOOUTPUT_GETINFORMATION = 2
End Enum

Public Function OPM_GET_CODEC_INFO() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4f374491, &H8f5f, &H4445, &H9d, &Hba, &H95, &H58, &H8f, &H6b, &H58, &Hb4)
 OPM_GET_CODEC_INFO = iid
End Function

Public Type OPM_RANDOM_NUMBER
    abRandomNumber(0 To 15) As Byte
End Type

Public Enum OpmParamSizes
    OPM_OMAC_SIZE = 16
    OPM_128_BIT_RANDOM_NUMBER_SIZE = 16
    OPM_ENCRYPTED_INITIALIZATION_PARAMETERS_SIZE = 256
    OPM_CONFIGURE_SETTING_DATA_SIZE = 4056
    OPM_GET_INFORMATION_PARAMETERS_SIZE = 4056
    OPM_REQUESTED_INFORMATION_SIZE = 4076
    OPM_HDCP_KEY_SELECTION_VECTOR_SIZE = 5
    OPM_PROTECTION_TYPE_SIZE = 4
    OPM_BUS_TYPE_MASK = &HFFFF&
    OPM_BUS_IMPLEMENTATION_MODIFIER_MASK = &H7FFF
End Enum

Public Type OPM_OMAC
    abOMAC(0 To (OPM_OMAC_SIZE - 1)) As Byte
End Type

Public Type OPM_GET_INFO_PARAMETERS
    omac As OPM_OMAC
    rnRandomNumber As OPM_RANDOM_NUMBER
    guidInformation As UUID
    ulSequenceNumber As Long
    cbParametersSize As Long
    abParameters(0 To (OPM_GET_INFORMATION_PARAMETERS_SIZE - 1)) As Byte
End Type

Public Type OPM_REQUESTED_INFORMATION
    omac As OPM_OMAC
    cbRequestedInformationSize As Long
    abRequestedInformation(0 To (OPM_REQUESTED_INFORMATION_SIZE - 1)) As Byte
End Type

Public Type OPM_ENCRYPTED_INITIALIZATION_PARAMETERS
    abEncryptedInitializationParameters(0 To (OPM_ENCRYPTED_INITIALIZATION_PARAMETERS_SIZE - 1)) As Byte
End Type

Public Type OPM_STANDARD_INFORMATION
    rnRandomNumber As OPM_RANDOM_NUMBER
    ulStatusFlags As OpmStatusFlags
    ulInformation As Long
    ulReserved As Long
    ulReserved2 As Long
End Type

Public Type OPM_GET_CODEC_INFO_PARAMETERS
    cbVerifier As Long
    Verifier(0 To (OPM_GET_INFORMATION_PARAMETERS_SIZE - 4 - 1)) As Byte ' Class ID of MFT or symbolic link for AVStream 
    ' drivers
End Type

Public Type OPM_GET_CODEC_INFO_INFORMATION
    rnRandomNumber As OPM_RANDOM_NUMBER
    Merit As Long ' Merit assigned to the codec
End Type

Public Function OPM_GET_CURRENT_HDCP_SRM_VERSION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H99c5ceff, &H5f1d, &H4879, &H81, &Hc1, &Hc5, &H24, &H43, &Hc9, &H48, &H2b)
 OPM_GET_CURRENT_HDCP_SRM_VERSION = iid
End Function
Public Function OPM_GET_CONNECTED_HDCP_DEVICE_INFORMATION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0db59d74, &Ha992, &H492e, &Ha0, &Hbd, &Hc2, &H3f, &Hda, &H56, &H4e, &H00)
 OPM_GET_CONNECTED_HDCP_DEVICE_INFORMATION = iid
End Function
Public Function OPM_GET_ACP_AND_CGMSA_SIGNALING() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6629a591, &H3b79, &H4cf3, &H92, &H4a, &H11, &He8, &He7, &H81, &H16, &H71)
 OPM_GET_ACP_AND_CGMSA_SIGNALING = iid
End Function
Public Function OPM_GET_CONNECTOR_TYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H81d0bfd5, &H6afe, &H48c2, &H99, &Hc0, &H95, &Ha0, &H8f, &H97, &Hc5, &Hda)
 OPM_GET_CONNECTOR_TYPE = iid
End Function
Public Function OPM_GET_SUPPORTED_PROTECTION_TYPES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H38f2a801, &H9a6c, &H48bb, &H91, &H07, &Hb6, &H69, &H6e, &H6f, &H17, &H97)
 OPM_GET_SUPPORTED_PROTECTION_TYPES = iid
End Function
Public Function OPM_GET_VIRTUAL_PROTECTION_LEVEL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb2075857, &H3eda, &H4d5d, &H88, &Hdb, &H74, &H8f, &H8c, &H1a, &H05, &H49)
 OPM_GET_VIRTUAL_PROTECTION_LEVEL = iid
End Function
Public Function OPM_GET_ACTUAL_PROTECTION_LEVEL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1957210a, &H7766, &H452a, &Hb9, &H9a, &Hd2, &H7a, &Hed, &H54, &Hf0, &H3a)
 OPM_GET_ACTUAL_PROTECTION_LEVEL = iid
End Function
Public Function OPM_GET_ACTUAL_OUTPUT_FORMAT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd7bf1ba3, &Had13, &H4f8e, &Haf, &H98, &H0d, &Hcb, &H3c, &Ha2, &H04, &Hcc)
 OPM_GET_ACTUAL_OUTPUT_FORMAT = iid
End Function
Public Function OPM_GET_ADAPTER_BUS_TYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc6f4d673, &H6174, &H4184, &H8e, &H35, &Hf6, &Hdb, &H52, &H0, &Hbc, &Hba)
 OPM_GET_ADAPTER_BUS_TYPE = iid
End Function
Public Function OPM_GET_OUTPUT_ID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H72cb6df3, &H244f, &H40ce, &Hb0, &H9e, &H20, &H50, &H6a, &Hf6, &H30, &H2f)
 OPM_GET_OUTPUT_ID = iid
End Function
Public Function OPM_GET_DVI_CHARACTERISTICS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha470b3bb, &H5dd7, &H4172, &H83, &H9c, &H3d, &H37, &H76, &He0, &Heb, &Hf5)
 OPM_GET_DVI_CHARACTERISTICS = iid
End Function
' Public Function OPM_GET_CODEC_INFO() As UUID
' Static iid As UUID
'  If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4f374491, &H8f5f, &H4445, &H9d, &Hba, &H95, &H58, &H8f, &H6b, &H58, &Hb4)
'  OPM_GET_CODEC_INFO = iid
' End Function
Public Function OPM_GET_OUTPUT_HARDWARE_PROTECTION_SUPPORT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3b129589, &H2af8, &H4ef0, &H96, &Ha2, &H70, &H4a, &H84, &H5a, &H21, &H8e)
 OPM_GET_OUTPUT_HARDWARE_PROTECTION_SUPPORT = iid
End Function
Public Function OPM_SET_PROTECTION_LEVEL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9bb9327c, &H4eb5, &H4727, &H9f, &H00, &Hb4, &H2b, &H09, &H19, &Hc0, &Hda)
 OPM_SET_PROTECTION_LEVEL = iid
End Function
Public Function OPM_SET_ACP_AND_CGMSA_SIGNALING() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H09a631a5, &Hd684, &H4c60, &H8e, &H4d, &Hd3, &Hbb, &H0f, &H0b, &He3, &Hee)
 OPM_SET_ACP_AND_CGMSA_SIGNALING = iid
End Function
Public Function OPM_SET_HDCP_SRM() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8b5ef5d1, &Hc30d, &H44ff, &H84, &Ha5, &Hea, &H71, &Hdc, &He7, &H8f, &H13)
 OPM_SET_HDCP_SRM = iid
End Function
Public Function OPM_SET_PROTECTION_LEVEL_ACCORDING_TO_CSS_DVD() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H39ce333e, &H4cc0, &H44ae, &Hbf, &Hcc, &Hda, &H50, &Hb5, &Hf8, &H2e, &H72)
 OPM_SET_PROTECTION_LEVEL_ACCORDING_TO_CSS_DVD = iid
End Function

Public Enum OPM_VIDEO_OUTPUT_SEMANTICS
    OPM_VOS_COPP_SEMANTICS = 0
    OPM_VOS_OPM_SEMANTICS = 1
    OPM_VOS_OPM_INDIRECT_DISPLAY = 2
End Enum

Public Enum OpmHdcpFlags
    OPM_HDCP_FLAG_NONE = &H00
    OPM_HDCP_FLAG_REPEATER = &H01
End Enum

Public Enum OpmStatusFlags
    OPM_STATUS_NORMAL = &H00
    OPM_STATUS_LINK_LOST = &H01
    OPM_STATUS_RENEGOTIATION_REQUIRED = &H02
    OPM_STATUS_TAMPERING_DETECTED = &H04
    OPM_STATUS_REVOKED_HDCP_DEVICE_ATTACHED = &H08
End Enum

Public Enum OpmConnectorTypes
    OPM_CONNECTOR_TYPE_OTHER = -1
    OPM_CONNECTOR_TYPE_VGA = 0
    OPM_CONNECTOR_TYPE_SVIDEO = 1
    OPM_CONNECTOR_TYPE_COMPOSITE_VIDEO = 2
    OPM_CONNECTOR_TYPE_COMPONENT_VIDEO = 3
    OPM_CONNECTOR_TYPE_DVI = 4
    OPM_CONNECTOR_TYPE_HDMI = 5
    OPM_CONNECTOR_TYPE_LVDS = 6
    OPM_CONNECTOR_TYPE_D_JPN = 8
    OPM_CONNECTOR_TYPE_SDI = 9
    OPM_CONNECTOR_TYPE_DISPLAYPORT_EXTERNAL = 10
    OPM_CONNECTOR_TYPE_DISPLAYPORT_EMBEDDED = 11
    OPM_CONNECTOR_TYPE_UDI_EXTERNAL = 12
    OPM_CONNECTOR_TYPE_UDI_EMBEDDED = 13
    OPM_CONNECTOR_TYPE_RESERVED = 14
    OPM_CONNECTOR_TYPE_MIRACAST = 15
    OPM_CONNECTOR_TYPE_TRANSPORT_AGNOSTIC_DIGITAL_MODE_A = 16
    OPM_CONNECTOR_TYPE_TRANSPORT_AGNOSTIC_DIGITAL_MODE_B = 17
    OPM_COPP_COMPATIBLE_CONNECTOR_TYPE_INTERNAL = &H80000000
End Enum

Public Enum OpmDviCharacteristics
    OPM_DVI_CHARACTERISTIC_1_0 = 1
    OPM_DVI_CHARACTERISTIC_1_1_OR_ABOVE = 2
End Enum

Public Enum OPM_OUTPUT_HARDWARE_PROTECTION
    OPM_OUTPUT_HARDWARE_PROTECTION_NOT_SUPPORTED = &H0
    OPM_OUTPUT_HARDWARE_PROTECTION_SUPPORTED = &H1
End Enum

Public Enum OpmBusTypes
    OPM_BUS_TYPE_OTHER = &H00000000
    OPM_BUS_TYPE_PCI = &H00000001
    OPM_BUS_TYPE_PCIX = &H00000002
    OPM_BUS_TYPE_PCIEXPRESS = &H00000003
    OPM_BUS_TYPE_AGP = &H00000004
    OPM_BUS_IMPLEMENTATION_MODIFIER_INSIDE_OF_CHIPSET = &H00010000
    OPM_BUS_IMPLEMENTATION_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = &H00020000
    OPM_BUS_IMPLEMENTATION_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = &H00030000
    OPM_BUS_IMPLEMENTATION_MODIFIER_DAUGHTER_BOARD_CONNECTOR = &H00040000
    OPM_BUS_IMPLEMENTATION_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = &H00050000
    OPM_BUS_IMPLEMENTATION_MODIFIER_NON_STANDARD = &H80000000
    OPM_COPP_COMPATIBLE_BUS_TYPE_INTEGRATED = &H80000000
End Enum

Public Enum OPM_DPCP_PROTECTION_LEVEL
    OPM_DPCP_OFF = 0
    OPM_DPCP_ON = 1
    OPM_DPCP_FORCE_ULONG = &H7fffffff
End Enum

Public Enum OPM_HDCP_PROTECTION_LEVEL
    OPM_HDCP_OFF = 0
    OPM_HDCP_ON = 1
    OPM_HDCP_FORCE_ULONG = &H7fffffff
End Enum

Public Enum OPM_TYPE_ENFORCEMENT_HDCP_PROTECTION_LEVEL
    OPM_TYPE_ENFORCEMENT_HDCP_OFF = OPM_HDCP_OFF
    OPM_TYPE_ENFORCEMENT_HDCP_ON_WITH_NO_TYPE_RESTRICTION = OPM_HDCP_ON ' No Type restriction on output topology nodes
    OPM_TYPE_ENFORCEMENT_HDCP_ON_WITH_TYPE1_RESTRICTION = OPM_HDCP_ON + 1 ' Restrict to Type 1 compliant output topology nodes
    OPM_TYPE_ENFORCEMENT_HDCP_FORCE_ULONG = &H7fffffff
End Enum

Public Enum OpmCgmsaFlags
    OPM_CGMSA_OFF = &H00
    OPM_CGMSA_COPY_FREELY = &H01
    OPM_CGMSA_COPY_NO_MORE = &H02
    OPM_CGMSA_COPY_ONE_GENERATION = &H03
    OPM_CGMSA_COPY_NEVER = &H04
    OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED = &H08
End Enum

Public Enum OPM_ACP_PROTECTION_LEVEL
    OPM_ACP_OFF = 0
    OPM_ACP_LEVEL_ONE = 1
    OPM_ACP_LEVEL_TWO = 2
    OPM_ACP_LEVEL_THREE = 3
    OPM_ACP_FORCE_ULONG = &H7fffffff
End Enum

Public Enum OpmProtectionTypes
    OPM_PROTECTION_TYPE_OTHER = &H80000000
    OPM_PROTECTION_TYPE_NONE = &H00000000
    OPM_PROTECTION_TYPE_COPP_COMPATIBLE_HDCP = &H00000001
    OPM_PROTECTION_TYPE_ACP = &H00000002
    OPM_PROTECTION_TYPE_CGMSA = &H00000004
    OPM_PROTECTION_TYPE_HDCP = &H00000008
    OPM_PROTECTION_TYPE_DPCP = &H00000010
    OPM_PROTECTION_TYPE_TYPE_ENFORCEMENT_HDCP = &H00000020
End Enum

Public Enum OpmProtectionStandards
    OPM_PROTECTION_STANDARD_OTHER = &H80000000
    OPM_PROTECTION_STANDARD_NONE = &H00000000
    OPM_PROTECTION_STANDARD_IEC61880_525I = &H00000001
    OPM_PROTECTION_STANDARD_IEC61880_2_525I = &H00000002
    OPM_PROTECTION_STANDARD_IEC62375_625P = &H00000004
    OPM_PROTECTION_STANDARD_EIA608B_525 = &H00000008
    OPM_PROTECTION_STANDARD_EN300294_625I = &H00000010
    OPM_PROTECTION_STANDARD_CEA805A_TYPEA_525P = &H00000020
    OPM_PROTECTION_STANDARD_CEA805A_TYPEA_750P = &H00000040
    OPM_PROTECTION_STANDARD_CEA805A_TYPEA_1125I = &H00000080
    OPM_PROTECTION_STANDARD_CEA805A_TYPEB_525P = &H00000100
    OPM_PROTECTION_STANDARD_CEA805A_TYPEB_750P = &H00000200
    OPM_PROTECTION_STANDARD_CEA805A_TYPEB_1125I = &H00000400
    OPM_PROTECTION_STANDARD_ARIBTRB15_525I = &H00000800
    OPM_PROTECTION_STANDARD_ARIBTRB15_525P = &H00001000
    OPM_PROTECTION_STANDARD_ARIBTRB15_750P = &H00002000
    OPM_PROTECTION_STANDARD_ARIBTRB15_1125I = &H00004000
End Enum

Public Enum OPM_IMAGE_ASPECT_RATIO_EN300294
    OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_4_BY_3 = 0
    OPM_ASPECT_RATIO_EN300294_BOX_14_BY_9_CENTER = 1
    OPM_ASPECT_RATIO_EN300294_BOX_14_BY_9_TOP = 2
    OPM_ASPECT_RATIO_EN300294_BOX_16_BY_9_CENTER = 3
    OPM_ASPECT_RATIO_EN300294_BOX_16_BY_9_TOP = 4
    OPM_ASPECT_RATIO_EN300294_BOX_GT_16_BY_9_CENTER = 5
    OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_4_BY_3_PROTECTED_CENTER = 6
    OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_16_BY_9_ANAMORPHIC = 7
    OPM_ASPECT_RATIO_FORCE_ULONG = &H7FFFFFFF
End Enum

Public Type OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS
    rnRandomNumber As OPM_RANDOM_NUMBER
    guidInformation As UUID
    ulSequenceNumber As Long
    cbParametersSize As Long
    abParameters(0 To (OPM_GET_INFORMATION_PARAMETERS_SIZE - 1)) As Byte
End Type

Public Type OPM_HDCP_KEY_SELECTION_VECTOR
    abKeySelectionVector(0 To (OPM_HDCP_KEY_SELECTION_VECTOR_SIZE - 1)) As Byte
End Type

Public Type OPM_CONNECTED_HDCP_DEVICE_INFORMATION
    rnRandomNumber As OPM_RANDOM_NUMBER
    ulStatusFlags As OpmStatusFlags
    ulHDCPFlags As OpmHdcpFlags
    ksvB As OPM_HDCP_KEY_SELECTION_VECTOR
    Reserved(0 To 10) As Byte
    Reserved2(0 To 15) As Byte
    Reserved3(0 To 15) As Byte
End Type
 
Public Type OPM_ACTUAL_OUTPUT_FORMAT
    rnRandomNumber As OPM_RANDOM_NUMBER
    ulStatusFlags As OpmStatusFlags
    ulDisplayWidth As Long
    ulDisplayHeight As Long
    dsfSampleInterleaveFormat As DXVA2_SampleFormat
    d3dFormat As D3DFORMAT
    ulFrequencyNumerator As Long
    ulFrequencyDenominator As Long
End Type

Public Type OPM_ACP_AND_CGMSA_SIGNALING
    rnRandomNumber As OPM_RANDOM_NUMBER
    ulStatusFlags As OpmStatusFlags
    ulAvailableTVProtectionStandards As OpmProtectionStandards
    ulActiveTVProtectionStandard As OpmProtectionStandards
    ulReserved As Long
    ulAspectRatioValidMask1 As OPM_IMAGE_ASPECT_RATIO_EN300294
    ulAspectRatioData1 As OPM_IMAGE_ASPECT_RATIO_EN300294
    ulAspectRatioValidMask2 As Long
    ulAspectRatioData2 As Long
    ulAspectRatioValidMask3 As Long
    ulAspectRatioData3 As Long
    ulReserved2(0 To 3) As Long
    ulReserved3(0 To 3) As Long
End Type

Public Type OPM_OUTPUT_ID_DATA
    rnRandomNumber As OPM_RANDOM_NUMBER
    ulStatusFlags As OpmStatusFlags
    OutputId As LongLong
End Type

Public Type OPM_CONFIGURE_PARAMETERS
    omac As OPM_OMAC
    guidSetting As UUID
    ulSequenceNumber As Long
    cbParametersSize As Long
    abParameters(0 To (OPM_CONFIGURE_SETTING_DATA_SIZE - 1)) As Byte
End Type

Public Type OPM_SET_PROTECTION_LEVEL_PARAMETERS
    ulProtectionType As Long
    ulProtectionLevel As Long
    Reserved As Long
    Reserved2 As Long
End Type

Public Type OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS
    ulNewTVProtectionStandard As Long
    ulAspectRatioChangeMask1 As Long
    ulAspectRatioData1 As Long
    ulAspectRatioChangeMask2 As Long
    ulAspectRatioData2 As Long
    ulAspectRatioChangeMask3 As Long
    ulAspectRatioData3 As Long
    ulReserved(0 To 3) As Long
    ulReserved2(0 To 3) As Long
    ulReserved3 As Long
End Type

Public Type OPM_SET_HDCP_SRM_PARAMETERS
    ulSRMVersion As Long
End Type

Public Function IID_IOPMVideoOutput() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0A15159D, &H41C7, &H4456, &H93, &HE1, &H28, &H4C, &HD6, &H1D, &H4E, &H8D)
 IID_IOPMVideoOutput = iid
End Function

[UseGetLastError(False)]
Public Declare PtrSafe Function OPMGetVideoOutputsFromHMONITOR Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal vos As OPM_VIDEO_OUTPUT_SEMANTICS, pulNumVideoOutputs As Long, pppOPMVideoOutputArray As LongPtr) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function OPMGetVideoOutputForTarget Lib "dxva2.dll" (pAdapterLuid As LUID, ByVal VidPnTarget As Long, ByVal vos As OPM_VIDEO_OUTPUT_SEMANTICS, ppOPMVideoOutput As IOPMVideoOutput) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function OPMGetVideoOutputsFromIDirect3DDevice9Object Lib "dxva2.dll" (ByVal pDirect3DDevice9 As IDirect3DDevice9, ByVal vos As OPM_VIDEO_OUTPUT_SEMANTICS, pulNumVideoOutputs As Long, pppOPMVideoOutputArray As LongPtr) As Long









Private Const PID_FIRST_USABLE = 2

Private Function HI32(ByVal unPacked As LongLong) As Long
    Return CLng(unPacked >> 32)
End Function
Private Function LO32(ByVal unPacked As LongLong) As Long
    CopyMemory LO32, unPacked, 4
End Function
Private Function Pack2UINT32AsUINT64(ByVal unHigh As Long, ByVal unLow As Long) As LongLong
    Return (CLngLng(unHigh) << 32) Or unLow
End Function
Private Sub Unpack2UINT32AsUINT64(ByVal unPacked As LongLong, punHigh As Long, punLow As Long)
    punHigh = HI32(unPacked)
    punLow = LO32(unPacked)
End Sub
Private Function PackSize(ByVal unWidth As Long, ByVal unHeight As Long) As LongLong
    Return Pack2UINT32AsUINT64(unWidth, unHeight)
End Function
Private Sub UnpackSize(ByVal unPacked As LongLong, punWidth As Long, punHeight As Long)
    Unpack2UINT32AsUINT64(unPacked, punWidth, punHeight)
End Sub
Private Function PackRatio(ByVal nNumerator As Long, ByVal unDenominator As Long) As LongLong
    Return Pack2UINT32AsUINT64(nNumerator, unDenominator)
End Function
Private Sub UnpackRatio(ByVal unPacked As LongLong, pnNumerator As Long, punDenominator As Long)
    Unpack2UINT32AsUINT64(unPacked, pnNumerator, punDenominator)
End Sub


Public Function MFGetAttributeUINT32(ByVal pAttributes As IMFAttributes, guidKey As UUID, ByVal unDefault As Long) As Long
    On Error Resume Next
    Dim unRet As Long = pAttributes.GetUInt32(guidKey)
    If FAILED(Err.LastHresult) Then
        unRet = unDefault
    End If
    On Error GoTo 0
    Return unRet
End Function
Public Function MFGetAttributeUINT64(ByVal pAttributes As IMFAttributes, guidKey As UUID, ByVal unDefault As LongLong) As LongLong
    On Error Resume Next
    Dim unRet As LongLong = pAttributes.GetUInt64(guidKey)
    If FAILED(Err.LastHresult) Then
        unRet = unDefault
    End If
    On Error GoTo 0
    Return unRet
End Function
Public Function MFGetAttributeDouble(ByVal pAttributes As IMFAttributes, guidKey As UUID, ByVal fDefault As Double) As Double
    On Error Resume Next
    Dim fRet As Double = pAttributes.GetDouble(guidKey)
    If FAILED(Err.LastHresult) Then
        fRet = fDefault
    End If
    On Error GoTo 0
    Return fRet
End Function
Public Function MFGetAttribute2UINT32asUINT64(ByVal pAttributes As IMFAttributes, guidKey As UUID, punHigh32 As Long, punLow32 As Long) As Long
    Dim unPacked As LongLong
    Dim hr As Long = S_OK
    
    On Error Resume Next
    unPacked = pAttributes.GetUInt64(guidKey)
    hr = Err.LastHresult
    If FAILED(hr) Then
        On Error GoTo 0
        Return hr
    End If
    Unpack2UINT32AsUINT64(unPacked, punHigh32, punLow32)
    On Error GoTo 0
    Return hr
End Function
Public Function MFSetAttribute2UINT32asUINT64(ByVal pAttributes As IMFAttributes, guidKey As UUID, ByVal unHigh32 As Long, ByVal unLow32 As Long) As Long
    On Error Resume Next
    pAttributes.SetUINT64(guidKey, Pack2UINT32AsUINT64(unHigh32, unLow32))
    On Error GoTo 0
    Return Err.LastHresult
End Function
Public Function MFGetAttributeRatio(ByVal pAttributes As IMFAttributes, guidKey As UUID, punNumerator As Long, punDenominator As Long) As Long
    Return MFGetAttribute2UINT32asUINT64(pAttributes, guidKey, punNumerator, punDenominator)
End Function
Public Function MFGetAttributeSize(ByVal pAttributes As IMFAttributes, guidKey As UUID, punWidth As Long, punHeight As Long) As Long
    Return MFGetAttribute2UINT32asUINT64(pAttributes, guidKey, punWidth, punHeight)
End Function
Public Function MFSetAttributeRatio(ByVal pAttributes As IMFAttributes, guidKey As UUID, ByVal unNumerator As Long, ByVal unDenominator As Long) As Long
    Return MFSetAttribute2UINT32asUINT64(pAttributes, guidKey, unNumerator, unDenominator)
End Function
Public Function MFSetAttributeSize(ByVal pAttributes As IMFAttributes, guidKey As UUID, ByVal unWidth As Long, ByVal unHeight As Long) As Long
    Return MFSetAttribute2UINT32asUINT64(pAttributes, guidKey, unWidth, unHeight)
End Function
Public Function MFGetAttributeString(ByVal pAttributes As IMFAttributes, guidKey As UUID, ppsz As String) As Long
    On Error Resume Next
    Dim n As Long = pAttributes.GetStringLength(guidKey)
    If SUCCEEDED(Err.LastHresult) Then
        If n Then
            ppsz = String$(n, 0)
            n = pAttributes.GetString(guidKey, StrPtr(ppsz), n)
        End If
    End If
    On Error GoTo 0
    Return Err.LastHresult
End Function
    

Public Function MFP_GET_PLAY_EVENT(pEventHeader As MFP_EVENT_HEADER) As MFP_PLAY_EVENT
    If pEventHeader.eEventType = MFP_EVENT_TYPE_PLAY Then
        MFP_GET_PLAY_EVENT = CType(Of MFP_PLAY_EVENT)(VarPtr(pEventHeader))
    End If
End Function
Public Function MFP_GET_PAUSE_EVENT(pEventHeader As MFP_EVENT_HEADER) As MFP_PAUSE_EVENT
    If pEventHeader.eEventType = MFP_EVENT_TYPE_PAUSE Then
    MFP_GET_PAUSE_EVENT = CType(Of MFP_PAUSE_EVENT)(VarPtr(pEventHeader))
    End If
End Function
Public Function MFP_GET_STOP_EVENT(pEventHeader As MFP_EVENT_HEADER) As MFP_STOP_EVENT
    If pEventHeader.eEventType = MFP_EVENT_TYPE_STOP Then
    MFP_GET_STOP_EVENT = CType(Of MFP_STOP_EVENT)(VarPtr(pEventHeader))
    End If
End Function
Public Function MFP_GET_POSITION_SET_EVENT(pEventHeader As MFP_EVENT_HEADER) As MFP_POSITION_SET_EVENT
    If pEventHeader.eEventType = MFP_EVENT_TYPE_POSITION_SET Then
    MFP_GET_POSITION_SET_EVENT = CType(Of MFP_POSITION_SET_EVENT)(VarPtr(pEventHeader))
    End If
End Function
Public Function MFP_GET_RATE_SET_EVENT(pEventHeader As MFP_EVENT_HEADER) As MFP_RATE_SET_EVENT
    If pEventHeader.eEventType = MFP_EVENT_TYPE_RATE_SET Then
    MFP_GET_RATE_SET_EVENT = CType(Of MFP_RATE_SET_EVENT)(VarPtr(pEventHeader))
    End If
End Function
Public Function MFP_GET_MEDIAITEM_CREATED_EVENT(pEventHeader As MFP_EVENT_HEADER) As MFP_MEDIAITEM_CREATED_EVENT
    If pEventHeader.eEventType = MFP_EVENT_TYPE_MEDIAITEM_CREATED Then
    MFP_GET_MEDIAITEM_CREATED_EVENT = CType(Of MFP_MEDIAITEM_CREATED_EVENT)(VarPtr(pEventHeader))
    End If
End Function
Public Function MFP_GET_MEDIAITEM_SET_EVENT(pEventHeader As MFP_EVENT_HEADER) As MFP_MEDIAITEM_SET_EVENT
    If pEventHeader.eEventType = MFP_EVENT_TYPE_MEDIAITEM_SET Then
    MFP_GET_MEDIAITEM_SET_EVENT = CType(Of MFP_MEDIAITEM_SET_EVENT)(VarPtr(pEventHeader))
    End If
End Function
Public Function MFP_GET_FRAME_STEP_EVENT(pEventHeader As MFP_EVENT_HEADER) As MFP_FRAME_STEP_EVENT
    If pEventHeader.eEventType = MFP_EVENT_TYPE_FRAME_STEP Then
    MFP_GET_FRAME_STEP_EVENT = CType(Of MFP_FRAME_STEP_EVENT)(VarPtr(pEventHeader))
    End If
    End Function
Public Function MFP_GET_MEDIAITEM_CLEARED_EVENT(pEventHeader As MFP_EVENT_HEADER) As MFP_MEDIAITEM_CLEARED_EVENT
    If pEventHeader.eEventType = MFP_EVENT_TYPE_MEDIAITEM_CLEARED Then
        MFP_GET_MEDIAITEM_CLEARED_EVENT = CType(Of MFP_MEDIAITEM_CLEARED_EVENT)(VarPtr(pEventHeader))
    End If
End Function
Public Function MFP_GET_MF_EVENT(pEventHeader As MFP_EVENT_HEADER) As MFP_MF_EVENT
    If pEventHeader.eEventType = MFP_EVENT_TYPE_MF Then
        MFP_GET_MF_EVENT = CType(Of MFP_MF_EVENT)(VarPtr(pEventHeader))
    End If
End Function
Public Function MFP_GET_ERROR_EVENT(pEventHeader As MFP_EVENT_HEADER) As MFP_ERROR_EVENT
    If pEventHeader.eEventType = MFP_EVENT_TYPE_ERROR Then
        MFP_GET_ERROR_EVENT = CType(Of MFP_ERROR_EVENT)(VarPtr(pEventHeader))
    End If
End Function
Public Function MFP_GET_PLAYBACK_ENDED_EVENT(pEventHeader As MFP_EVENT_HEADER) As MFP_PLAYBACK_ENDED_EVENT
    If pEventHeader.eEventType = MFP_EVENT_TYPE_PLAYBACK_ENDED Then
        MFP_GET_PLAYBACK_ENDED_EVENT = CType(Of MFP_PLAYBACK_ENDED_EVENT)(VarPtr(pEventHeader))
    End If
End Function
Public Function MFP_GET_ACQUIRE_USER_CREDENTIAL_EVENT(pEventHeader As MFP_EVENT_HEADER) As MFP_ACQUIRE_USER_CREDENTIAL_EVENT
    If pEventHeader.eEventType = MFP_EVENT_TYPE_ACQUIRE_USER_CREDENTIAL Then
        MFP_GET_ACQUIRE_USER_CREDENTIAL_EVENT = CType(Of MFP_ACQUIRE_USER_CREDENTIAL_EVENT)(VarPtr(pEventHeader))
    End If
End Function


#Region "VMR"

Public Enum VMR9PresentationFlags
    VMR9Sample_SyncPoint = &H00000001
    VMR9Sample_Preroll = &H00000002
    VMR9Sample_Discontinuity = &H00000004
    VMR9Sample_TimeValid = &H00000008
    VMR9Sample_SrcDstRectsValid = &H00000010
End Enum
Public Type VMR9PresentationInfo
    dwFlags As VMR9PresentationFlags
    lpSurf As IDirect3DSurface9
    rtStart As LongLong 'REFERENCE_TIME
    rtEnd As LongLong 'REFERENCE_TIME
    szAspectRatio As SIZE
    rcSrc As RECT
    rcDst As RECT
    dwReserved1 As Long
    dwReserved2 As Long
End Type

Public Enum VMR9SurfaceAllocationFlags
    ' 
    '  surface types/usage
    ' 
    VMR9AllocFlag_3DRenderTarget = &H0001
    VMR9AllocFlag_DXVATarget = &H0002
    ' 
    '  VMR9AllocFlag_TextureSurface can be combined with
    '  DXVATarget and 3DRenderTarget
    ' 
    VMR9AllocFlag_TextureSurface = &H0004
    VMR9AllocFlag_OffscreenSurface = &H0008
    ' 
    '  The following flag applies to YUV mixing mode only
    '  and indicates that VMR9's mixer can accept RGB formats
    '  as well as the specified YUV format.
    '  The allocator-present can switch between the two
    '  surface formats dynamically.
    ' 
    VMR9AllocFlag_RGBDynamicSwitch = &H0010
    VMR9AllocFlag_UsageReserved = &H00E0
    VMR9AllocFlag_UsageMask = &H00FF
    '  surface
End Enum

Public Type VMR9AllocationInfo
    dwFlags As VMR9SurfaceAllocationFlags ' see VMR9SurfaceAllocationFlags
    dwWidth As Long
    dwHeight As Long
    Format As D3DFORMAT ' 0 means use a format compatible with the display
    Pool As D3DPOOL
    MinBuffers As Long
    szAspectRatio As SIZE
    szNativeSize As SIZE
End Type

Public Enum VMR9AspectRatioMode
    VMR9ARMode_None = 0
    VMR9ARMode_LetterBox = 1
End Enum

Public Enum VMR9MixerPrefs
    MixerPref9_NoDecimation = &H00000001 ' No decimation - full size
    MixerPref9_DecimateOutput = &H00000002 ' decimate output by 2 in x & y
    MixerPref9_ARAdjustXorY = &H00000004 ' adjust the aspect ratio in x or y
    MixerPref9_NonSquareMixing = &H00000008 ' assume AP can handle non-square mixing, avoids intermediate scales
    MixerPref9_DecimateMask = &H0000000F
    MixerPref9_BiLinearFiltering = &H00000010 ' use bi-linear filtering
    MixerPref9_PointFiltering = &H00000020 ' use point filtering
    MixerPref9_AnisotropicFiltering = &H00000040 '
    MixerPref9_PyramidalQuadFiltering = &H00000080 ' 4-sample tent
    MixerPref9_GaussianQuadFiltering = &H00000100 ' 4-sample gaussian
    MixerPref9_FilteringReserved = &H00000E00 ' bits reserved for future use.
    MixerPref9_FilteringMask = &H00000FF0 ' OR of all above flags
    MixerPref9_RenderTargetRGB = &H00001000
    MixerPref9_RenderTargetYUV = &H00002000 ' Uses DXVA to perform mixing
    MixerPref9_RenderTargetReserved = &H000FC000 ' bits reserved for future use.
    MixerPref9_RenderTargetMask = &H000FF000 ' OR of all above flags
    ' 
    '  Dynamic changes that can be performed when the VMR's mixer is
    '  configured to use the YUV Render target (see MixerPref_RenderTargetYUV)
    '  These preferences can be applied while the graph is running and take effect
    '  when the next frame is composed by the mixer.
    ' 
    MixerPref9_DynamicSwitchToBOB = &H00100000
    MixerPref9_DynamicDecimateBy2 = &H00200000
    MixerPref9_DynamicReserved = &H00C00000
    MixerPref9_DynamicMask = &H00F00000
End Enum

Public Type VMR9NormalizedRect
    left As Single
    top As Single
    right As Single
    bottom As Single
End Type

Public Enum VMR9ProcAmpControlFlags
    ProcAmpControl9_Brightness = &H00000001
    ProcAmpControl9_Contrast = &H00000002
    ProcAmpControl9_Hue = &H00000004
    ProcAmpControl9_Saturation = &H00000008
    ProcAmpControl9_Mask = &H0000000F
End Enum

Public Type VMR9ProcAmpControl
    dwSize As Long
    dwFlags As VMR9ProcAmpControlFlags
    Brightness As Single
    Contrast As Single
    Hue As Single
    Saturation As Single
End Type

Public Type VMR9ProcAmpControlRange
    dwSize As Long
    dwProperty As VMR9ProcAmpControlFlags ' see VMR9ProcAmpControlFlags above
    MinValue As Single
    MaxValue As Single
    DefaultValue As Single
    StepSize As Single
End Type

Public Type VMR9AlphaBitmap
    dwFlags As VMR9AlphaBitmapFlags ' flags word
    hdc As LongPtr ' DC for the bitmap to copy
    pDDS As IDirect3DSurface9 ' D3D surface to copy
    rSrc As RECT ' rectangle to copy from the DC/DDS
    rDest As VMR9NormalizedRect ' output rectangle in composition space
    fAlpha As Single ' opacity of the bitmap
    clrSrcKey As Long ' src color key
    dwFilterMode As VMR9MixerPrefs ' See "SetMixerPrefs" 
End Type
Public Enum VMR9AlphaBitmapFlags
    '  Disable the alpha bitmap for now
    VMR9AlphaBitmap_Disable = &H00000001
    '  Take the bitmap from the HDC rather than the DirectDraw surface
    VMR9AlphaBitmap_hDC = &H00000002
    '  Take the entire DDraw surface - rSrc is ignored
    VMR9AlphaBitmap_EntireDDS = &H00000004
    '  Indicates that the clrTrans value is valid and should be
    '  used when blending
    VMR9AlphaBitmap_SrcColorKey = &H00000008
    '  Indicates that the rSrc rectangle is valid and specifies a
    '  sub-rectangle of the of original app image to be blended.
    '  Use of this parameter enables "Image Strips"
    VMR9AlphaBitmap_SrcRect = &H00000010
    '  Indicates that dwFilterMode parameter is valid and should be
    '  used to overide the default filtering method used by the VMR.
    '  MixerPref_PointFiltering is particulaly useful for images that
    '  contain text and do not need to be stretch prior to blending with
    '  the video content.
    VMR9AlphaBitmap_FilterMode = &H00000020
End Enum

Public Enum VMR9RenderPrefs
    RenderPrefs9_DoNotRenderBorder = &H00000001 ' app paints color keys
    RenderPrefs9_Mask = &H00000001 ' OR of all above flags
End Enum

Public Enum VMR9Mode
    VMR9Mode_Windowed = &H00000001
    VMR9Mode_Windowless = &H00000002
    VMR9Mode_Renderless = &H00000004
    '  not a valid value to pass to SetRenderMode
    VMR9Mode_Mask = &H00000007 ' OR of all above flags
End Enum

Public Const VMR9DEVICENAMELEN  = 32
Public Const VMR9DEVICEDESCRIPTIONLEN  = 512

Public Type VMR9MonitorInfo
    uDevID As Long
    rcMonitor As RECT
    hMon As LongPtr 'HMONITOR
    #If WINDEVLIB_LITE Then
    dwFlags As Long ' described in MONITORINFOEX, currently only MONITORINFOF_PRIMARY
    #Else
    dwFlags As MonitorInfoFlags ' described in MONITORINFOEX, currently only MONITORINFOF_PRIMARY
    #End If
    szDevice(0 To (VMR9DEVICENAMELEN - 1)) As LongPtr 'wchar_t 
    szDescription(0 To (VMR9DEVICEDESCRIPTIONLEN - 1)) As LongPtr 'wchar_t 
    liDriverVersion As LARGE_INTEGER
    dwVendorId As Long
    dwDeviceId As Long
    dwSubSysId As Long
    dwRevision As Long
End Type

Public Enum VMR9DeinterlacePrefs
    DeinterlacePref9_NextBest = &H01
    DeinterlacePref9_BOB = &H02
    DeinterlacePref9_Weave = &H04
    DeinterlacePref9_Mask = &H07
End Enum

Public Enum VMR9DeinterlaceTech
    '  the algorithm is unknown or proprietary
    DeinterlaceTech9_Unknown = &H0000
    '  the algorithm creates the missing lines by repeating
    '  the line either above or below it - this method will look very jaggy and
    '  isn't recommended
    DeinterlaceTech9_BOBLineReplicate = &H0001
    '  the algorithm creates the missing lines by vertically stretching each
    '  video field by a factor of two, for example by averaging two lines or
    '  using a [-1, 9, 9, -1]/16 filter across four lines.
    '  Slight vertical adjustments are made to ensure that the resulting image
    '  does not "bob" up and down.
    DeinterlaceTech9_BOBVerticalStretch = &H0002
    '  the pixels in the missing line are recreated by a median filtering operation
    DeinterlaceTech9_MedianFiltering = &H0004
    '  the pixels in the missing line are recreated by an edge filter.
    '  In this process, spatial directional filters are applied to determine
    '  the orientation of edges in the picture content, and missing
    '  pixels are created by filtering along (rather than across) the
    '  detected edges.
    DeinterlaceTech9_EdgeFiltering = &H0010
    '  the pixels in the missing line are recreated by switching on a field by
    '  field basis between using either spatial or temporal interpolation
    '  depending on the amount of motion.
    DeinterlaceTech9_FieldAdaptive = &H0020
    '  the pixels in the missing line are recreated by switching on a pixel by pixel
    '  basis between using either spatial or temporal interpolation depending on
    '  the amount of motion..
    DeinterlaceTech9_PixelAdaptive = &H0040
    '  Motion Vector Steering  identifies objects within a sequence of video
    '  fields.  The missing pixels are recreated after first aligning the
    '  movement axes of the individual objects in the scene to make them
    '  parallel with the time axis.
    DeinterlaceTech9_MotionVectorSteered = &H0080
End Enum

Public Type VMR9Frequency
    dwNumerator As Long
    dwDenominator As Long
End Type

Public Enum VMR9_SampleFormat
    VMR9_SampleReserved = 1
    VMR9_SampleProgressiveFrame = 2
    VMR9_SampleFieldInterleavedEvenFirst = 3
    VMR9_SampleFieldInterleavedOddFirst = 4
    VMR9_SampleFieldSingleEven = 5
    VMR9_SampleFieldSingleOdd = 6
End Enum

Public Type VMR9VideoDesc
    dwSize As Long
    dwSampleWidth As Long
    dwSampleHeight As Long
    SampleFormat As VMR9_SampleFormat
    dwFourCC As Long
    InputSampleFreq As VMR9Frequency
    OutputFrameFreq As VMR9Frequency
End Type

Public Type VMR9DeinterlaceCaps
    dwSize As Long
    dwNumPreviousOutputFrames As Long
    dwNumForwardRefSamples As Long
    dwNumBackwardRefSamples As Long
    DeinterlaceTechnology As VMR9DeinterlaceTech
End Type


Public Type VMR9VideoStreamInfo
    pddsVideoSurface As IDirect3DSurface9
    dwWidth As Long
    dwHeight As Long
    dwStrmID As Long
    fAlpha As Single
    rNormal As VMR9NormalizedRect
    rtStart As LongLong 'REFERENCE_TIME
    rtEnd As LongLong 'REFERENCE_TIME
    SampleFormat As VMR9_SampleFormat
End Type

Public Function IID_IVMRImagePresenter9() As UUID
'{69188c61-12a3-40f0-8ffc-342e7b433fd7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H69188c61, CInt(&H12a3), CInt(&H40f0), &H8f, &Hfc, &H34, &H2e, &H7b, &H43, &H3f, &Hd7)
IID_IVMRImagePresenter9 = iid
End Function
Public Function IID_IVMRSurfaceAllocator9() As UUID
'{8d5148ea-3f5d-46cf-9df1-d1b896eedb1f}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8d5148ea, CInt(&H3f5d), CInt(&H46cf), &H9d, &Hf1, &Hd1, &Hb8, &H96, &Hee, &Hdb, &H1f)
IID_IVMRSurfaceAllocator9 = iid
End Function
Public Function IID_IVMRSurfaceAllocatorEx9() As UUID
'{6de9a68a-a928-4522-bf57-655ae3866456}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6de9a68a, CInt(&Ha928), CInt(&H4522), &Hbf, &H57, &H65, &H5a, &He3, &H86, &H64, &H56)
IID_IVMRSurfaceAllocatorEx9 = iid
End Function
Public Function IID_IVMRSurfaceAllocatorNotify9() As UUID
'{dca3f5df-bb3a-4d03-bd81-84614bfbfa0c}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hdca3f5df, CInt(&Hbb3a), CInt(&H4d03), &Hbd, &H81, &H84, &H61, &H4b, &Hfb, &Hfa, &H0c)
IID_IVMRSurfaceAllocatorNotify9 = iid
End Function
Public Function IID_IVMRWindowlessControl9() As UUID
'{8f537d09-f85e-4414-b23b-502e54c79927}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8f537d09, CInt(&Hf85e), CInt(&H4414), &Hb2, &H3b, &H50, &H2e, &H54, &Hc7, &H99, &H27)
IID_IVMRWindowlessControl9 = iid
End Function
Public Function IID_IVMRMixerControl9() As UUID
'{1a777eaa-47c8-4930-b2c9-8fee1c1b0f3b}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1a777eaa, CInt(&H47c8), CInt(&H4930), &Hb2, &Hc9, &H8f, &Hee, &H1c, &H1b, &H0f, &H3b)
IID_IVMRMixerControl9 = iid
End Function
Public Function IID_IVMRMixerBitmap9() As UUID
'{ced175e5-1935-4820-81bd-ff6ad00c9108}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hced175e5, CInt(&H1935), CInt(&H4820), &H81, &Hbd, &Hff, &H6a, &Hd0, &H0c, &H91, &H08)
IID_IVMRMixerBitmap9 = iid
End Function
Public Function IID_IVMRSurface9() As UUID
'{dfc581a1-6e1f-4c3a-8d0a-5e9792ea2afc}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hdfc581a1, CInt(&H6e1f), CInt(&H4c3a), &H8d, &H0a, &H5e, &H97, &H92, &Hea, &H2a, &Hfc)
IID_IVMRSurface9 = iid
End Function
Public Function IID_IVMRImagePresenterConfig9() As UUID
'{45c15cab-6e22-420a-8043-ae1f0ac02c7d}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H45c15cab, CInt(&H6e22), CInt(&H420a), &H80, &H43, &Hae, &H1f, &H0a, &Hc0, &H2c, &H7d)
IID_IVMRImagePresenterConfig9 = iid
End Function
Public Function IID_IVMRVideoStreamControl() As UUID
'{d0cfe38b-93e7-4772-8957-0400c49a4485}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hd0cfe38b, CInt(&H93e7), CInt(&H4772), &H89, &H57, &H04, &H00, &Hc4, &H9a, &H44, &H85)
IID_IVMRVideoStreamControl = iid
End Function
Public Function IID_IVMRFilterConfig9() As UUID
'{5a804648-4f66-4867-9c43-4f5c822cf1b8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5a804648, CInt(&H4f66), CInt(&H4867), &H9c, &H43, &H4f, &H5c, &H82, &H2c, &Hf1, &Hb8)
IID_IVMRFilterConfig9 = iid
End Function
Public Function IID_IVMRAspectRatioControl9() As UUID
'{00d96c29-bbde-4efc-9901-bb5036392146}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H00d96c29, CInt(&Hbbde), CInt(&H4efc), &H99, &H01, &Hbb, &H50, &H36, &H39, &H21, &H46)
IID_IVMRAspectRatioControl9 = iid
End Function
Public Function IID_IVMRMonitorConfig9() As UUID
'{46c2e457-8ba0-4eef-b80b-0680f0978749}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H46c2e457, CInt(&H8ba0), CInt(&H4eef), &Hb8, &H0b, &H06, &H80, &Hf0, &H97, &H87, &H49)
IID_IVMRMonitorConfig9 = iid
End Function
Public Function IID_IVMRDeinterlaceControl9() As UUID
'{a215fb8d-13c2-4f7f-993c-003d6271a459}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Ha215fb8d, CInt(&H13c2), CInt(&H4f7f), &H99, &H3c, &H00, &H3d, &H62, &H71, &Ha4, &H59)
IID_IVMRDeinterlaceControl9 = iid
End Function
Public Function IID_IVMRImageCompositor9() As UUID
'{4a5c89eb-df51-4654-ac2a-e48e02bbabf6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4a5c89eb, CInt(&Hdf51), CInt(&H4654), &Hac, &H2a, &He4, &H8e, &H02, &Hbb, &Hab, &Hf6)
IID_IVMRImageCompositor9 = iid
End Function


'vmrender.idl

Public Enum VMRPresentationFlags
    VMRSample_SyncPoint = &H00000001
    VMRSample_Preroll = &H00000002
    VMRSample_Discontinuity = &H00000004
    VMRSample_TimeValid = &H00000008
    VMRSample_SrcDstRectsValid = &H00000010
End Enum

Public Type VMRPRESENTATIONINFO
    dwFlags As VMRPresentationFlags
    lpSurf As IDirectDrawSurface7
    rtStart As LongLong 'REFERENCE_TIME
    rtEnd As LongLong 'REFERENCE_TIME
    szAspectRatio As SIZE
    rcSrc As RECT
    rcDst As RECT
    dwTypeSpecificFlags As AM_SAMPLE_PROPERTY_FLAGS
    dwInterlaceFlags As VidHeaderInterlaceFlags
End Type

Public Enum VMRSurfaceAllocationFlags
    AMAP_PIXELFORMAT_VALID = &H01
    AMAP_3D_TARGET = &H02
    AMAP_ALLOW_SYSMEM = &H04
    AMAP_FORCE_SYSMEM = &H08
    AMAP_DIRECTED_FLIP = &H10
    AMAP_DXVA_TARGET = &H20
End Enum

Public Type VMRALLOCATIONINFO
    dwFlags As VMRSurfaceAllocationFlags
    lpHdr As LongPtr 'LPBITMAPINFOHEADER
    lpPixFmt As LongPtr 'LPDDPIXELFORMAT
    szAspectRatio As SIZE
    dwMinBuffers As Long
    dwMaxBuffers As Long
    dwInterlaceFlags As VidHeaderInterlaceFlags
    szNativeSize As SIZE
End Type

Public Enum VMR_ASPECT_RATIO_MODE
    VMR_ARMODE_NONE = 0
    VMR_ARMODE_LETTER_BOX = 1
End Enum

Public Enum VMRMixerPrefs
    MixerPref_NoDecimation = &H00000001 ' No decimation - full size
    MixerPref_DecimateOutput = &H00000002 ' decimate output by 2 in x & y
    MixerPref_ARAdjustXorY = &H00000004 ' adjust the aspect ratio in x or y
    MixerPref_DecimationReserved = &H00000008 ' bits reserved for future use.
    MixerPref_DecimateMask = &H0000000F
    MixerPref_BiLinearFiltering = &H00000010 ' use bi-linear filtering
    MixerPref_PointFiltering = &H00000020 ' use point filtering
    MixerPref_FilteringMask = &H000000F0 ' OR of all above flags
    MixerPref_RenderTargetRGB = &H00000100 ' Uses D3D to perform mixing
    MixerPref_RenderTargetYUV = &H00001000 ' Uses DXVA to perform mixing
    MixerPref_RenderTargetYUV420 = &H00000200 ' Depricated render target
    MixerPref_RenderTargetYUV422 = &H00000400 ' Depricated render target
    MixerPref_RenderTargetYUV444 = &H00000800 ' Depricated render target
    MixerPref_RenderTargetReserved = &H0000E000& ' 3 bits reserved for future use.
    MixerPref_RenderTargetMask = &H0000FF00& ' OR of all above flags
    ' 
    '  Dynamic changes that can be performed when the VMR's mixer is
    '  configured to use the YUV Render target (see MixerPref_RenderTargetYUV)
    '  These preferences can be applied while the graph is running and take effect
    '  when the next frame is composed by the mixer.
    ' 
    MixerPref_DynamicSwitchToBOB = &H00010000
    MixerPref_DynamicDecimateBy2 = &H00020000
    MixerPref_DynamicReserved = &H000C0000
    MixerPref_DynamicMask = &H000F0000
End Enum

Public Type NORMALIZEDRECT
    left As Single
    top As Single
    right As Single
    bottom As Single
End Type

Public Type VMRGUID
    pGUID As LongPtr '*GUID ' is NULL if the default DDraw device
    GUID As UUID ' otherwise points to this GUID 
End Type

Public Const VMRDEVICENAMELEN  = 32
Public Const VMRDEVICEDESCRIPTIONLEN  = 256

Public Type VMRMONITORINFO
    guid As VMRGUID
    rcMonitor As RECT
    hMon As LongPtr 'HMONITOR
    #If WINDEVLIB_LITE Then
    dwFlags As Long ' described in MONITORINFOEX, currently only MONITORINFOF_PRIMARY
    #Else
    dwFlags As MonitorInfoFlags ' described in MONITORINFOEX, currently only MONITORINFOF_PRIMARY
    #End If
    szDevice(0 To (VMRDEVICENAMELEN - 1)) As LongPtr 'wchar_t 
    szDescription(0 To (VMRDEVICEDESCRIPTIONLEN - 1)) As LongPtr 'wchar_t 
    liDriverVersion As LARGE_INTEGER
    dwVendorId As Long
    dwDeviceId As Long
    dwSubSysId As Long
    dwRevision As Long
    ' find out the DDCAPS using DDrawCreate on the monitor GUID
End Type

Public Enum VMRRenderPrefs
    RenderPrefs_RestrictToInitialMonitor = &H00000000 ' not implemented do not use
    RenderPrefs_ForceOffscreen = &H00000001
    RenderPrefs_ForceOverlays = &H00000002 ' fail if no overlays
    RenderPrefs_AllowOverlays = &H00000000 ' overlay used by default
    RenderPrefs_AllowOffscreen = &H00000000 ' offscreen used if no overlay
    RenderPrefs_DoNotRenderColorKeyAndBorder = &H00000008 ' app paints color keys
    RenderPrefs_Reserved = &H00000010 ' note: used to be RestrictToInitialMonitor
    RenderPrefs_PreferAGPMemWhenMixing = &H00000020 ' try agp mem when allocating textures
    RenderPrefs_Mask = &H0000003f ' OR of all above flags
End Enum

Public Enum VMRMode
    VMRMode_Windowed = &H00000001
    VMRMode_Windowless = &H00000002
    VMRMode_Renderless = &H00000004
    '  not a valid value to pass to SetRenderMode
    VMRMode_Mask = &H00000007 ' OR of all above flags
End Enum

Public Const MAX_NUMBER_OF_STREAMS = 16

Public Enum VMRDeinterlacePrefs
    DeinterlacePref_NextBest = &H01
    DeinterlacePref_BOB = &H02
    DeinterlacePref_Weave = &H04
    DeinterlacePref_Mask = &H07
End Enum

Public Enum VMRDeinterlaceTech
    '  the algorithm is unknown or proprietary
    DeinterlaceTech_Unknown = &H0000
    '  the algorithm creates the missing lines by repeating
    '  the line either above or below it - this method will look very jaggy and
    '  isn't recommended
    DeinterlaceTech_BOBLineReplicate = &H0001
    '  the algorithm creates the missing lines by vertically stretching each
    '  video field by a factor of two, for example by averaging two lines or
    '  using a [-1, 9, 9, -1]/16 filter across four lines.
    '  Slight vertical adjustments are made to ensure that the resulting image
    '  does not "bob" up and down.
    DeinterlaceTech_BOBVerticalStretch = &H0002
    '  the pixels in the missing line are recreated by a median filtering operation
    DeinterlaceTech_MedianFiltering = &H0004
    '  the pixels in the missing line are recreated by an edge filter.
    '  In this process, spatial directional filters are applied to determine
    '  the orientation of edges in the picture content, and missing
    '  pixels are created by filtering along (rather than across) the
    '  detected edges.
    DeinterlaceTech_EdgeFiltering = &H0010
    '  the pixels in the missing line are recreated by switching on a field by
    '  field basis between using either spatial or temporal interpolation
    '  depending on the amount of motion.
    DeinterlaceTech_FieldAdaptive = &H0020
    '  the pixels in the missing line are recreated by switching on a pixel by pixel
    '  basis between using either spatial or temporal interpolation depending on
    '  the amount of motion..
    DeinterlaceTech_PixelAdaptive = &H0040
    '  Motion Vector Steering  identifies objects within a sequence of video
    '  fields.  The missing pixels are recreated after first aligning the
    '  movement axes of the individual objects in the scene to make them
    '  parallel with the time axis.
    DeinterlaceTech_MotionVectorSteered = &H0080
End Enum

Public Type VMRFrequency
    dwNumerator As Long
    dwDenominator As Long
End Type

Public Type VMRVideoDesc
    dwSize As Long
    dwSampleWidth As Long
    dwSampleHeight As Long
    SingleFieldPerSample As BOOL
    dwFourCC As Long
    InputSampleFreq As VMRFrequency
    OutputFrameFreq As VMRFrequency
End Type

Public Type VMRDeinterlaceCaps
    dwSize As Long
    dwNumPreviousOutputFrames As Long
    dwNumForwardRefSamples As Long
    dwNumBackwardRefSamples As Long
    DeinterlaceTechnology As VMRDeinterlaceTech
End Type

Public Type VMRALPHABITMAP
    dwFlags As VmrAlphaBitmapFlags ' flags word
    hdc As LongPtr ' DC for the bitmap to copy
    pDDS As IDirectDrawSurface7 ' DirectDraw surface to copy
    rSrc As RECT ' rectangle to copy from the DC/DDS
    rDest As NORMALIZEDRECT ' output rectangle in composition space
    fAlpha As Single ' opacity of the bitmap
    clrSrcKey As Long ' src color key
End Type

Public Enum VmrAlphaBitmapFlags
    VMRBITMAP_DISABLE = &H00000001
'  Take the bitmap from the HDC rather than the DirectDraw surface
    VMRBITMAP_HDC = &H00000002
'  Take the entire DDraw surface - rSrc is ignored
    VMRBITMAP_ENTIREDDS = &H00000004
'  Indicates that the clrTrans value is valid and should be
'  used when blending
    VMRBITMAP_SRCCOLORKEY = &H00000008
'  Indicates that the rSrc rectangle is valid and specifies a
'  sub-rectangle of the of original app image to be blended.
'  Use of this parameter enables "Image Strips"
    VMRBITMAP_SRCRECT = &H00000010
End Enum

Public Type VMRVIDEOSTREAMINFO
    pddsVideoSurface As IDirectDrawSurface7
    dwWidth As Long
    dwHeight As Long
    dwStrmID As Long
    fAlpha As Single
    ddClrKey As DDCOLORKEY
    rNormal As NORMALIZEDRECT
End Type

Public Function IID_IVMRImagePresenter() As UUID
'{CE704FE7-E71E-41fb-BAA2-C4403E1182F5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HCE704FE7, CInt(&HE71E), CInt(&H41fb), &HBA, &HA2, &HC4, &H40, &H3E, &H11, &H82, &HF5)
IID_IVMRImagePresenter = iid
End Function
Public Function IID_IVMRSurfaceAllocator() As UUID
'{31ce832e-4484-458b-8cca-f4d7e3db0b52}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H31ce832e, CInt(&H4484), CInt(&H458b), &H8c, &Hca, &Hf4, &Hd7, &He3, &Hdb, &H0b, &H52)
IID_IVMRSurfaceAllocator = iid
End Function
Public Function IID_IVMRSurfaceAllocatorNotify() As UUID
'{aada05a8-5a4e-4729-af0b-cea27aed51e2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Haada05a8, CInt(&H5a4e), CInt(&H4729), &Haf, &H0b, &Hce, &Ha2, &H7a, &Hed, &H51, &He2)
IID_IVMRSurfaceAllocatorNotify = iid
End Function
Public Function IID_IVMRWindowlessControl() As UUID
'{0eb1088c-4dcd-46f0-878f-39dae86a51b7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H0eb1088c, CInt(&H4dcd), CInt(&H46f0), &H87, &H8f, &H39, &Hda, &He8, &H6a, &H51, &Hb7)
IID_IVMRWindowlessControl = iid
End Function
Public Function IID_IVMRMixerControl() As UUID
'{1c1a17b0-bed0-415d-974b-dc6696131599}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1c1a17b0, CInt(&Hbed0), CInt(&H415d), &H97, &H4b, &Hdc, &H66, &H96, &H13, &H15, &H99)
IID_IVMRMixerControl = iid
End Function
Public Function IID_IVMRMonitorConfig() As UUID
'{9cf0b1b6-fbaa-4b7f-88cf-cf1f130a0dce}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9cf0b1b6, CInt(&Hfbaa), CInt(&H4b7f), &H88, &Hcf, &Hcf, &H1f, &H13, &H0a, &H0d, &Hce)
IID_IVMRMonitorConfig = iid
End Function
Public Function IID_IVMRFilterConfig() As UUID
'{9e5530c5-7034-48b4-bb46-0b8a6efc8e36}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9e5530c5, CInt(&H7034), CInt(&H48b4), &Hbb, &H46, &H0b, &H8a, &H6e, &Hfc, &H8e, &H36)
IID_IVMRFilterConfig = iid
End Function
Public Function IID_IVMRAspectRatioControl() As UUID
'{ede80b5c-bad6-4623-b537-65586c9f8dfd}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hede80b5c, CInt(&Hbad6), CInt(&H4623), &Hb5, &H37, &H65, &H58, &H6c, &H9f, &H8d, &Hfd)
IID_IVMRAspectRatioControl = iid
End Function
Public Function IID_IVMRDeinterlaceControl() As UUID
'{bb057577-0db8-4e6a-87a7-1a8c9a505a0f}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hbb057577, CInt(&H0db8), CInt(&H4e6a), &H87, &Ha7, &H1a, &H8c, &H9a, &H50, &H5a, &H0f)
IID_IVMRDeinterlaceControl = iid
End Function
Public Function IID_IVMRMixerBitmap() As UUID
'{1E673275-0257-40aa-AF20-7C608D4A0428}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1E673275, CInt(&H0257), CInt(&H40aa), &HAF, &H20, &H7C, &H60, &H8D, &H4A, &H04, &H28)
IID_IVMRMixerBitmap = iid
End Function
Public Function IID_IVMRImageCompositor() As UUID
'{7a4fb5af-479f-4074-bb40-ce6722e43c82}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7a4fb5af, CInt(&H479f), CInt(&H4074), &Hbb, &H40, &Hce, &H67, &H22, &He4, &H3c, &H82)
IID_IVMRImageCompositor = iid
End Function
Public Function IID_IVMRVideoStreamContro() As UUID
'{058d1f11-2a54-4bef-bd54-df706626b727}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H058d1f11, CInt(&H2a54), CInt(&H4bef), &Hbd, &H54, &Hdf, &H70, &H66, &H26, &Hb7, &H27)
IID_IVMRVideoStreamContro = iid
End Function
Public Function IID_IVMRSurface() As UUID
'{a9849bbe-9ec8-4263-b764-62730f0d15d0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Ha9849bbe, CInt(&H9ec8), CInt(&H4263), &Hb7, &H64, &H62, &H73, &H0f, &H0d, &H15, &Hd0)
IID_IVMRSurface = iid
End Function
Public Function IID_IVMRImagePresenterConfig() As UUID
'{9f3a1c85-8555-49ba-935f-be5b5b29d178}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9f3a1c85, CInt(&H8555), CInt(&H49ba), &H93, &H5f, &Hbe, &H5b, &H5b, &H29, &Hd1, &H78)
IID_IVMRImagePresenterConfig = iid
End Function
Public Function IID_IVMRImagePresenterExclModeConfig() As UUID
'{e6f7ce40-4673-44f1-8f77-5499d68cb4ea}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &He6f7ce40, CInt(&H4673), CInt(&H44f1), &H8f, &H77, &H54, &H99, &Hd6, &H8c, &Hb4, &Hea)
IID_IVMRImagePresenterExclModeConfig = iid
End Function
Public Function IID_IVPManager() As UUID
'{aac18c18-e186-46d2-825d-a1f8dc8e395a}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Haac18c18, CInt(&He186), CInt(&H46d2), &H82, &H5d, &Ha1, &Hf8, &Hdc, &H8e, &H39, &H5a)
IID_IVPManager = iid
End Function
#End Region


#Region "GUIDs"
Public Function IID_IMFMediaSession() As UUID
'{90377834-21D0-4dee-8214-BA2E3E6C1127}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H90377834, CInt(&H21D0), CInt(&H4DEE), &H82, &H14, &HBA, &H2E, &H3E, &H6C, &H11, &H27)
IID_IMFMediaSession = iid
End Function
Public Function IID_IMFSourceResolver() As UUID
'{FBE5A32D-A497-4B61-BB85-97B1A848A6E3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFBE5A32D, CInt(&HA497), CInt(&H4B61), &HBB, &H85, &H97, &HB1, &HA8, &H48, &HA6, &HE3)
IID_IMFSourceResolver = iid
End Function
Public Function IID_IMFByteStream() As UUID
'{AD4C1B00-4BF7-422F-9175-756693D9130D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HAD4C1B00, CInt(&H4BF7), CInt(&H422F), &H91, &H75, &H75, &H66, &H93, &HD9, &H13, &HD)
IID_IMFByteStream = iid
End Function
Public Function IID_IMFAsyncCallback() As UUID
'{A27003CF-2354-4F2A-8D6A-AB7CFF15437E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA27003CF, CInt(&H2354), CInt(&H4F2A), &H8D, &H6A, &HAB, &H7C, &HFF, &H15, &H43, &H7E)
IID_IMFAsyncCallback = iid
End Function
Public Function IID_IMFAsyncResult() As UUID
'{AC6B7889-0740-4D51-8619-905994A55CC6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HAC6B7889, CInt(&H740), CInt(&H4D51), &H86, &H19, &H90, &H59, &H94, &HA5, &H5C, &HC6)
IID_IMFAsyncResult = iid
End Function
Public Function IID_IMFAttributes() As UUID
'{2CD2D921-C447-44A7-A13C-4ADABFC247E3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD2D921, CInt(&HC447), CInt(&H44A7), &HA1, &H3C, &H4A, &HDA, &HBF, &HC2, &H47, &HE3)
IID_IMFAttributes = iid
End Function
Public Function IID_IMFMediaEventGenerator() As UUID
'{2CD0BD52-BCD5-4B89-B62C-EADC0C031E7D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD0BD52, CInt(&HBCD5), CInt(&H4B89), &HB6, &H2C, &HEA, &HDC, &HC, &H3, &H1E, &H7D)
IID_IMFMediaEventGenerator = iid
End Function
Public Function IID_IMFMediaEvent() As UUID
'{2CD0BD52-BCD5-4B89-B62C-EADC0C031E7D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD0BD52, CInt(&HBCD5), CInt(&H4B89), &HB6, &H2C, &HEA, &HDC, &HC, &H3, &H1E, &H7D)
IID_IMFMediaEvent = iid
End Function
Public Function IID_IMFReadWriteClassFactory() As UUID
'{E7FE2E12-661C-40DA-92F9-4F002AB67627}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE7FE2E12, CInt(&H661C), CInt(&H40DA), &H92, &HF9, &H4F, &H00, &H2A, &HB6, &H76, &H27)
 IID_IMFReadWriteClassFactory = iid
End Function
Public Function IID_IMFMediaSource() As UUID
'{279A808D-AEC7-40C8-9C6B-A6B492C78A66}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H279A808D, CInt(&HAEC7), CInt(&H40C8), &H9C, &H6B, &HA6, &HB4, &H92, &HC7, &H8A, &H66)
IID_IMFMediaSource = iid
End Function
Public Function IID_IMFPresentationDescriptor() As UUID
'{03CB2711-24D7-4DB6-A17F-F3A7A479A536}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3CB2711, CInt(&H24D7), CInt(&H4DB6), &HA1, &H7F, &HF3, &HA7, &HA4, &H79, &HA5, &H36)
IID_IMFPresentationDescriptor = iid
End Function
Public Function IID_IMFStreamDescriptor() As UUID
'{56C03D9C-9DBB-45F5-AB4B-D80F47C05938}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56C03D9C, CInt(&H9DBB), CInt(&H45F5), &HAB, &H4B, &HD8, &HF, &H47, &HC0, &H59, &H38)
IID_IMFStreamDescriptor = iid
End Function
Public Function IID_IMFMediaTypeHandler() As UUID
'{E93DCF6C-4B07-4E1E-8123-AA16ED6EADF5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE93DCF6C, CInt(&H4B07), CInt(&H4E1E), &H81, &H23, &HAA, &H16, &HED, &H6E, &HAD, &HF5)
IID_IMFMediaTypeHandler = iid
End Function
Public Function IID_IMFMediaType() As UUID
'{44AE0FA8-EA31-4109-8D2E-4CAE4997C555}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H44AE0FA8, CInt(&HEA31), CInt(&H4109), &H8D, &H2E, &H4C, &HAE, &H49, &H97, &HC5, &H55)
IID_IMFMediaType = iid
End Function
Public Function IID_IMFSourceReader() As UUID
'{70AE66F2-C809-4E4F-8915-BDCB406B7993}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H70AE66F2, CInt(&HC809), CInt(&H4E4F), &H89, &H15, &HBD, &HCB, &H40, &H6B, &H79, &H93)
IID_IMFSourceReader = iid
End Function
Public Function IID_IMFSourceReaderEx() As UUID
'{7b981cf0-560e-4116-9875-b099895f23d7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7b981cf0, CInt(&H560e), CInt(&H4116), &H98, &H75, &Hb0, &H99, &H89, &H5f, &H23, &Hd7)
IID_IMFSourceReaderEx = iid
End Function
Public Function IID_IMFSourceReaderCallback() As UUID
'{deec8d99-fa1d-4d82-84c2-2c8969944867}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hdeec8d99, CInt(&Hfa1d), CInt(&H4d82), &H84, &Hc2, &H2c, &H89, &H69, &H94, &H48, &H67)
IID_IMFSourceReaderCallback = iid
End Function
Public Function IID_IMFSourceReaderCallback2() As UUID
'{CF839FE6-8C2A-4DD2-B6EA-C22D6961AF05}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HCF839FE6, CInt(&H8C2A), CInt(&H4DD2), &HB6, &HEA, &HC2, &H2D, &H69, &H61, &HAF, &H05)
IID_IMFSourceReaderCallback2 = iid
End Function
Public Function IID_IMFSinkWriter() As UUID
'{3137f1cd-fe5e-4805-a5d8-fb477448cb3d}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3137f1cd, CInt(&Hfe5e), CInt(&H4805), &Ha5, &Hd8, &Hfb, &H47, &H74, &H48, &Hcb, &H3d)
IID_IMFSinkWriter = iid
End Function
Public Function IID_IMFSinkWriterEx() As UUID
'{588d72ab-5Bc1-496a-8714-b70617141b25}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H588d72ab, CInt(&H5Bc1), CInt(&H496a), &H87, &H14, &Hb7, &H06, &H17, &H14, &H1b, &H25)
IID_IMFSinkWriterEx = iid
End Function
Public Function IID_IMFSinkWriterEncoderConfig() As UUID
'{17C3779E-3CDE-4EDE-8C60-3899F5F53AD6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H17C3779E, CInt(&H3CDE), CInt(&H4EDE), &H8C, &H60, &H38, &H99, &HF5, &HF5, &H3A, &HD6)
IID_IMFSinkWriterEncoderConfig = iid
End Function
Public Function IID_IMFSinkWriterCallback() As UUID
'{666f76de-33d2-41b9-a458-29ed0a972c58}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H666f76de, CInt(&H33d2), CInt(&H41b9), &Ha4, &H58, &H29, &Hed, &H0a, &H97, &H2c, &H58)
IID_IMFSinkWriterCallback = iid
End Function
Public Function IID_IMFSinkWriterCallback2() As UUID
'{2456BD58-C067-4513-84FE-8D0C88FFDC61}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2456BD58, CInt(&HC067), CInt(&H4513), &H84, &HFE, &H8D, &H0C, &H88, &HFF, &HDC, &H61)
IID_IMFSinkWriterCallback2 = iid
End Function
Public Function IID_IMFSample() As UUID
'{C40A00F2-B93A-4D80-AE8C-5A1C634F58E4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC40A00F2, CInt(&HB93A), CInt(&H4D80), &HAE, &H8C, &H5A, &H1C, &H63, &H4F, &H58, &HE4)
IID_IMFSample = iid
End Function
Public Function IID_IMFMediaBuffer() As UUID
'{045FA593-8799-42B8-BC8D-8968C6453507}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H45FA593, CInt(&H8799), CInt(&H42B8), &HBC, &H8D, &H89, &H68, &HC6, &H45, &H35, &H7)
IID_IMFMediaBuffer = iid
End Function
Public Function IID_IMFClock() As UUID
'{2eb1e945-18b8-4139-9b1a-d5d584818530}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2EB1E945, CInt(&H18B8), CInt(&H4139), &H9B, &H1A, &HD5, &HD5, &H84, &H81, &H85, &H30)
IID_IMFClock = iid
End Function
Public Function IID_IMFCollection() As UUID
'{5BC8A76B-869A-46a3-9B03-FA218A66AEBE}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5BC8A76B, CInt(&H869A), CInt(&H46A3), &H9B, &H3, &HFA, &H21, &H8A, &H66, &HAE, &HBE)
IID_IMFCollection = iid
End Function
Public Function IID_IMF2DBuffer() As UUID
'{7dc9d5f9-9ed9-44ec-9bbf-0600bb589fbb}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7DC9D5F9, CInt(&H9ED9), CInt(&H44EC), &H9B, &HBF, &H6, &H0, &HBB, &H58, &H9F, &HBB)
IID_IMF2DBuffer = iid
End Function
Public Function IID_IMF2DBuffer2() As UUID
'{33ae5ea6-4316-436f-8ddd-d73d22f829ec}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H33AE5EA6, CInt(&H4316), CInt(&H436F), &H8D, &HDD, &HD7, &H3D, &H22, &HF8, &H29, &HEC)
IID_IMF2DBuffer2 = iid
End Function
Public Function IID_IMFDXGIBuffer() As UUID
'{e7174cfa-1c9e-48b1-8866-626226bfc258}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE7174CFA, CInt(&H1C9E), CInt(&H48B1), &H88, &H66, &H62, &H62, &H26, &HBF, &HC2, &H58)
IID_IMFDXGIBuffer = iid
End Function
Public Function IID_IMFTopologyNode() As UUID
'{83CF873A-F6DA-4bc8-823F-BACFD55DC430}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H83CF873A, CInt(&HF6DA), CInt(&H4BC8), &H82, &H3F, &HBA, &HCF, &HD5, &H5D, &HC4, &H30)
IID_IMFTopologyNode = iid
End Function
Public Function IID_IMFTopology() As UUID
'{83CF873A-F6DA-4bc8-823F-BACFD55DC433}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H83CF873A, CInt(&HF6DA), CInt(&H4BC8), &H82, &H3F, &HBA, &HCF, &HD5, &H5D, &HC4, &H33)
IID_IMFTopology = iid
End Function
Public Function IID_IMediaObject() As UUID
'{d8ad0f58-5494-4102-97c5-ec798e59bcf4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD8AD0F58, CInt(&H5494), CInt(&H4102), &H97, &HC5, &HEC, &H79, &H8E, &H59, &HBC, &HF4)
IID_IMediaObject = iid
End Function
Public Function IID_IEnumDMO() As UUID
'{2c3cd98a-2bfa-4a53-9c27-5249ba64ba0f}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2C3CD98A, CInt(&H2BFA), CInt(&H4A53), &H9C, &H27, &H52, &H49, &HBA, &H64, &HBA, &HF)
IID_IEnumDMO = iid
End Function
Public Function IID_IMediaObjectInPlace() As UUID
'{651b9ad0-0fc7-4aa9-9538-d89931010741}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H651B9AD0, CInt(&HFC7), CInt(&H4AA9), &H95, &H38, &HD8, &H99, &H31, &H1, &H7, &H41)
IID_IMediaObjectInPlace = iid
End Function
Public Function IID_IDMOQualityControl() As UUID
'{65abea96-cf36-453f-af8a-705e98f16260}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H65ABEA96, CInt(&HCF36), CInt(&H453F), &HAF, &H8A, &H70, &H5E, &H98, &HF1, &H62, &H60)
IID_IDMOQualityControl = iid
End Function
Public Function IID_IDMOVideoOutputOptimizations() As UUID
'{be8f4f4e-5b16-4d29-b350-7f6b5d9298ac}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBE8F4F4E, CInt(&H5B16), CInt(&H4D29), &HB3, &H50, &H7F, &H6B, &H5D, &H92, &H98, &HAC)
IID_IDMOVideoOutputOptimizations = iid
End Function
Public Function IID_IMFAudioMediaType() As UUID
'{26a0adc3-ce26-4672-9304-69552edd3faf}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H26A0ADC3, CInt(&HCE26), CInt(&H4672), &H93, &H4, &H69, &H55, &H2E, &HDD, &H3F, &HAF)
IID_IMFAudioMediaType = iid
End Function
Public Function IID_IMFVideoMediaType() As UUID
'{b99f381f-a8f9-47a2-a5af-ca3a225a3890}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB99F381F, CInt(&HA8F9), CInt(&H47A2), &HA5, &HAF, &HCA, &H3A, &H22, &H5A, &H38, &H90)
IID_IMFVideoMediaType = iid
End Function
Public Function IID_IMFAsyncCallbackLogging() As UUID
'{c7a4dca1-f5f0-47b6-b92b-bf0106d25791}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC7A4DCA1, CInt(&HF5F0), CInt(&H47B6), &HB9, &H2B, &HBF, &H1, &H6, &HD2, &H57, &H91)
IID_IMFAsyncCallbackLogging = iid
End Function
Public Function IID_IMFByteStreamProxyClassFactory() As UUID
'{a6b43f84-5c0a-42e8-a44d-b1857a76992f}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA6B43F84, CInt(&H5C0A), CInt(&H42E8), &HA4, &H4D, &HB1, &H85, &H7A, &H76, &H99, &H2F)
IID_IMFByteStreamProxyClassFactory = iid
End Function
Public Function IID_IMFSampleOutputStream() As UUID
'{8feed468-6f7e-440d-869a-49bdd283ad0d}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8FEED468, CInt(&H6F7E), CInt(&H440D), &H86, &H9A, &H49, &HBD, &HD2, &H83, &HAD, &HD)
IID_IMFSampleOutputStream = iid
End Function
Public Function IID_IMFMediaEventQueue() As UUID
'{36f846fc-2256-48b6-b58e-e2b638316581}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H36F846FC, CInt(&H2256), CInt(&H48B6), &HB5, &H8E, &HE2, &HB6, &H38, &H31, &H65, &H81)
IID_IMFMediaEventQueue = iid
End Function
Public Function IID_IMFActivate() As UUID
'{7FEE9E9A-4A89-47a6-899C-B6A53A70FB67}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7FEE9E9A, CInt(&H4A89), CInt(&H47A6), &H89, &H9C, &HB6, &HA5, &H3A, &H70, &HFB, &H67)
IID_IMFActivate = iid
End Function
Public Function IID_IMFPluginControl() As UUID
'{5c6c44bf-1db6-435b-9249-e8cd10fdec96}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5C6C44BF, CInt(&H1DB6), CInt(&H435B), &H92, &H49, &HE8, &HCD, &H10, &HFD, &HEC, &H96)
IID_IMFPluginControl = iid
End Function
Public Function IID_IMFPluginControl2() As UUID
'{C6982083-3DDC-45CB-AF5E-0F7A8CE4DE77}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC6982083, CInt(&H3DDC), CInt(&H45CB), &HAF, &H5E, &HF, &H7A, &H8C, &HE4, &HDE, &H77)
IID_IMFPluginControl2 = iid
End Function
Public Function IID_IMFDXGIDeviceManager() As UUID
'{eb533d5d-2db6-40f8-97a9-494692014f07}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEB533D5D, CInt(&H2DB6), CInt(&H40F8), &H97, &HA9, &H49, &H46, &H92, &H1, &H4F, &H7)
IID_IMFDXGIDeviceManager = iid
End Function
Public Function IID_IMFTransform() As UUID
'{bf94c121-5b05-4e6f-8000-ba598961414d}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBF94C121, CInt(&H5B05), CInt(&H4E6F), &H80, &H0, &HBA, &H59, &H89, &H61, &H41, &H4D)
IID_IMFTransform = iid
End Function
Public Function IID_IMFDeviceTransform() As UUID
'{D818FBD8-FC46-42F2-87AC-1EA2D1F9BF32}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD818FBD8, CInt(&HFC46), CInt(&H42F2), &H87, &HAC, &H1E, &HA2, &HD1, &HF9, &HBF, &H32)
 IID_IMFDeviceTransform = iid
End Function
Public Function IID_IMFDeviceTransformCallback() As UUID
'{6D5CB646-29EC-41FB-8179-8C4C6D750811}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6D5CB646, CInt(&H29EC), CInt(&H41FB), &H81, &H79, &H8C, &H4C, &H6D, &H75, &H08, &H11)
 IID_IMFDeviceTransformCallback = iid
End Function
Public Function IID_IMFMediaSourceEx() As UUID
'{3C9B2EB9-86D5-4514-A394-F56664F9F0D8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3C9B2EB9, CInt(&H86D5), CInt(&H4514), &HA3, &H94, &HF5, &H66, &H64, &HF9, &HF0, &HD8)
IID_IMFMediaSourceEx = iid
End Function
Public Function IID_IMFClockConsumer() As UUID
'{6ef2a662-47c0-4666-b13d-cbb717f2fa2c}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6EF2A662, CInt(&H47C0), CInt(&H4666), &HB1, &H3D, &HCB, &HB7, &H17, &HF2, &HFA, &H2C)
IID_IMFClockConsumer = iid
End Function
Public Function IID_IMFMediaStream() As UUID
'{D182108F-4EC6-443f-AA42-A71106EC825F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD182108F, CInt(&H4EC6), CInt(&H443F), &HAA, &H42, &HA7, &H11, &H6, &HEC, &H82, &H5F)
IID_IMFMediaStream = iid
End Function
Public Function IID_IMFMediaSink() As UUID
'{6ef2a660-47c0-4666-b13d-cbb717f2fa2c}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6EF2A660, CInt(&H47C0), CInt(&H4666), &HB1, &H3D, &HCB, &HB7, &H17, &HF2, &HFA, &H2C)
IID_IMFMediaSink = iid
End Function
Public Function IID_IMFStreamSink() As UUID
'{0A97B3CF-8E7C-4a3d-8F8C-0C843DC247FB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA97B3CF, CInt(&H8E7C), CInt(&H4A3D), &H8F, &H8C, &HC, &H84, &H3D, &HC2, &H47, &HFB)
IID_IMFStreamSink = iid
End Function
Public Function IID_IMFVideoSampleAllocator() As UUID
'{86cbc910-e533-4751-8e3b-f19b5b806a03}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H86CBC910, CInt(&HE533), CInt(&H4751), &H8E, &H3B, &HF1, &H9B, &H5B, &H80, &H6A, &H3)
IID_IMFVideoSampleAllocator = iid
End Function
Public Function IID_IMFVideoSampleAllocatorNotify() As UUID
'{A792CDBE-C374-4e89-8335-278E7B9956A4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA792CDBE, CInt(&HC374), CInt(&H4E89), &H83, &H35, &H27, &H8E, &H7B, &H99, &H56, &HA4)
IID_IMFVideoSampleAllocatorNotify = iid
End Function
Public Function IID_IMFVideoSampleAllocatorNotifyEx() As UUID
'{3978AA1A-6D5B-4B7F-A340-90899189AE34}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3978AA1A, CInt(&H6D5B), CInt(&H4B7F), &HA3, &H40, &H90, &H89, &H91, &H89, &HAE, &H34)
IID_IMFVideoSampleAllocatorNotifyEx = iid
End Function
Public Function IID_IMFVideoSampleAllocatorCallback() As UUID
'{992388B4-3372-4f67-8B6F-C84C071F4751}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H992388B4, CInt(&H3372), CInt(&H4F67), &H8B, &H6F, &HC8, &H4C, &H7, &H1F, &H47, &H51)
IID_IMFVideoSampleAllocatorCallback = iid
End Function
Public Function IID_IMFVideoSampleAllocatorEx() As UUID
'{545b3a48-3283-4f62-866f-a62d8f598f9f}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H545B3A48, CInt(&H3283), CInt(&H4F62), &H86, &H6F, &HA6, &H2D, &H8F, &H59, &H8F, &H9F)
IID_IMFVideoSampleAllocatorEx = iid
End Function
Public Function IID_IMFDXGIDeviceManagerSource() As UUID
'{20bc074b-7a8d-4609-8c3b-64a0a3b5d7ce}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H20BC074B, CInt(&H7A8D), CInt(&H4609), &H8C, &H3B, &H64, &HA0, &HA3, &HB5, &HD7, &HCE)
IID_IMFDXGIDeviceManagerSource = iid
End Function
Public Function IID_IMFVideoProcessorControl() As UUID
'{A3F675D5-6119-4f7f-A100-1D8B280F0EFB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA3F675D5, CInt(&H6119), CInt(&H4F7F), &HA1, &H0, &H1D, &H8B, &H28, &HF, &HE, &HFB)
IID_IMFVideoProcessorControl = iid
End Function
Public Function IID_IMFVideoProcessorControl2() As UUID
'{BDE633D3-E1DC-4a7f-A693-BBAE399C4A20}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBDE633D3, CInt(&HE1DC), CInt(&H4A7F), &HA6, &H93, &HBB, &HAE, &H39, &H9C, &H4A, &H20)
IID_IMFVideoProcessorControl2 = iid
End Function
Public Function IID_IMFGetService() As UUID
'{fa993888-4383-415a-a930-dd472a8cf6f7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFA993888, CInt(&H4383), CInt(&H415A), &HA9, &H30, &HDD, &H47, &H2A, &H8C, &HF6, &HF7)
IID_IMFGetService = iid
End Function
Public Function IID_IMFPresentationClock() As UUID
'{868CE85C-8EA9-4f55-AB82-B009A910A805}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H868CE85C, CInt(&H8EA9), CInt(&H4F55), &HAB, &H82, &HB0, &H9, &HA9, &H10, &HA8, &H5)
IID_IMFPresentationClock = iid
End Function
Public Function IID_IMFPresentationTimeSource() As UUID
'{7FF12CCE-F76F-41c2-863B-1666C8E5E139}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7FF12CCE, CInt(&HF76F), CInt(&H41C2), &H86, &H3B, &H16, &H66, &HC8, &HE5, &HE1, &H39)
IID_IMFPresentationTimeSource = iid
End Function
Public Function IID_IMFClockStateSink() As UUID
'{F6696E82-74F7-4f3d-A178-8A5E09C3659F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF6696E82, CInt(&H74F7), CInt(&H4F3D), &HA1, &H78, &H8A, &H5E, &H9, &HC3, &H65, &H9F)
IID_IMFClockStateSink = iid
End Function
Public Function IID_IMFTimer() As UUID
'{e56e4cbd-8f70-49d8-a0f8-edb3d6ab9bf2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE56E4CBD, CInt(&H8F70), CInt(&H49D8), &HA0, &HF8, &HED, &HB3, &HD6, &HAB, &H9B, &HF2)
IID_IMFTimer = iid
End Function
Public Function IID_IMFShutdown() As UUID
'{97ec2ea4-0e42-4937-97ac-9d6d328824e1}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H97EC2EA4, CInt(&HE42), CInt(&H4937), &H97, &HAC, &H9D, &H6D, &H32, &H88, &H24, &HE1)
IID_IMFShutdown = iid
End Function
Public Function IID_IMFTopoLoader() As UUID
'{DE9A6157-F660-4643-B56A-DF9F7998C7CD}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDE9A6157, CInt(&HF660), CInt(&H4643), &HB5, &H6A, &HDF, &H9F, &H79, &H98, &HC7, &HCD)
IID_IMFTopoLoader = iid
End Function
Public Function IID_IMFContentProtectionManager() As UUID
'{ACF92459-6A61-42bd-B57C-B43E51203CB0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HACF92459, CInt(&H6A61), CInt(&H42BD), &HB5, &H7C, &HB4, &H3E, &H51, &H20, &H3C, &HB0)
IID_IMFContentProtectionManager = iid
End Function
Public Function IID_IMFContentEnabler() As UUID
'{D3C4EF59-49CE-4381-9071-D5BCD044C770}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD3C4EF59, CInt(&H49CE), CInt(&H4381), &H90, &H71, &HD5, &HBC, &HD0, &H44, &HC7, &H70)
IID_IMFContentEnabler = iid
End Function
Public Function IID_IMFMetadata() As UUID
'{F88CFB8C-EF16-4991-B450-CB8C69E51704}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF88CFB8C, CInt(&HEF16), CInt(&H4991), &HB4, &H50, &HCB, &H8C, &H69, &HE5, &H17, &H4)
IID_IMFMetadata = iid
End Function
Public Function IID_IMFMetadataProvider() As UUID
'{56181D2D-E221-4adb-B1C8-3CEE6A53F76F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56181D2D, CInt(&HE221), CInt(&H4ADB), &HB1, &HC8, &H3C, &HEE, &H6A, &H53, &HF7, &H6F)
IID_IMFMetadataProvider = iid
End Function
Public Function IID_IMFRateSupport() As UUID
'{0a9ccdbc-d797-4563-9667-94ec5d79292d}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA9CCDBC, CInt(&HD797), CInt(&H4563), &H96, &H67, &H94, &HEC, &H5D, &H79, &H29, &H2D)
IID_IMFRateSupport = iid
End Function
Public Function IID_IMFRateControl() As UUID
'{88ddcd21-03c3-4275-91ed-55ee3929328f}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H88DDCD21, CInt(&H3C3), CInt(&H4275), &H91, &HED, &H55, &HEE, &H39, &H29, &H32, &H8F)
IID_IMFRateControl = iid
End Function
Public Function IID_IMFTimecodeTranslate() As UUID
'{ab9d8661-f7e8-4ef4-9861-89f334f94e74}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HAB9D8661, CInt(&HF7E8), CInt(&H4EF4), &H98, &H61, &H89, &HF3, &H34, &HF9, &H4E, &H74)
IID_IMFTimecodeTranslate = iid
End Function
Public Function IID_IMFSeekInfo() As UUID
'{26AFEA53-D9ED-42B5-AB80-E64F9EE34779}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H26AFEA53, CInt(&HD9ED), CInt(&H42B5), &HAB, &H80, &HE6, &H4F, &H9E, &HE3, &H47, &H79)
IID_IMFSeekInfo = iid
End Function
Public Function IID_IMFSimpleAudioVolume() As UUID
'{089EDF13-CF71-4338-8D13-9E569DBDC319}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H89EDF13, CInt(&HCF71), CInt(&H4338), &H8D, &H13, &H9E, &H56, &H9D, &HBD, &HC3, &H19)
IID_IMFSimpleAudioVolume = iid
End Function
Public Function IID_IMFAudioStreamVolume() As UUID
'{76B1BBDB-4EC8-4f36-B106-70A9316DF593}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H76B1BBDB, CInt(&H4EC8), CInt(&H4F36), &HB1, &H6, &H70, &HA9, &H31, &H6D, &HF5, &H93)
IID_IMFAudioStreamVolume = iid
End Function
Public Function IID_IMFAudioPolicy() As UUID
'{a0638c2b-6465-4395-9ae7-a321a9fd2856}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA0638C2B, CInt(&H6465), CInt(&H4395), &H9A, &HE7, &HA3, &H21, &HA9, &HFD, &H28, &H56)
IID_IMFAudioPolicy = iid
End Function
Public Function IID_IMFSampleGrabberSinkCallback() As UUID
'{8C7B80BF-EE42-4b59-B1DF-55668E1BDCA8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8C7B80BF, CInt(&HEE42), CInt(&H4B59), &HB1, &HDF, &H55, &H66, &H8E, &H1B, &HDC, &HA8)
IID_IMFSampleGrabberSinkCallback = iid
End Function
Public Function IID_IMFSampleGrabberSinkCallback2() As UUID
'{ca86aa50-c46e-429e-ab27-16d6ac6844cb}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HCA86AA50, CInt(&HC46E), CInt(&H429E), &HAB, &H27, &H16, &HD6, &HAC, &H68, &H44, &HCB)
IID_IMFSampleGrabberSinkCallback2 = iid
End Function
Public Function IID_IMFWorkQueueServices() As UUID
'{35FE1BB8-A3A9-40fe-BBEC-EB569C9CCCA3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H35FE1BB8, CInt(&HA3A9), CInt(&H40FE), &HBB, &HEC, &HEB, &H56, &H9C, &H9C, &HCC, &HA3)
IID_IMFWorkQueueServices = iid
End Function
Public Function IID_IMFWorkQueueServicesEx() As UUID
'{96bf961b-40fe-42f1-ba9d-320238b49700}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H96BF961B, CInt(&H40FE), CInt(&H42F1), &HBA, &H9D, &H32, &H2, &H38, &HB4, &H97, &H0)
IID_IMFWorkQueueServicesEx = iid
End Function
Public Function IID_IMFQualityManager() As UUID
'{8D009D86-5B9F-4115-B1FC-9F80D52AB8AB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8D009D86, CInt(&H5B9F), CInt(&H4115), &HB1, &HFC, &H9F, &H80, &HD5, &H2A, &HB8, &HAB)
IID_IMFQualityManager = iid
End Function
Public Function IID_IMFQualityAdvise() As UUID
'{EC15E2E9-E36B-4f7c-8758-77D452EF4CE7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEC15E2E9, CInt(&HE36B), CInt(&H4F7C), &H87, &H58, &H77, &HD4, &H52, &HEF, &H4C, &HE7)
IID_IMFQualityAdvise = iid
End Function
Public Function IID_IMFQualityAdvise2() As UUID
'{F3706F0D-8EA2-4886-8000-7155E9EC2EAE}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF3706F0D, CInt(&H8EA2), CInt(&H4886), &H80, &H0, &H71, &H55, &HE9, &HEC, &H2E, &HAE)
IID_IMFQualityAdvise2 = iid
End Function
Public Function IID_IMFQualityAdviseLimits() As UUID
'{dfcd8e4d-30b5-4567-acaa-8eb5b7853dc9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDFCD8E4D, CInt(&H30B5), CInt(&H4567), &HAC, &HAA, &H8E, &HB5, &HB7, &H85, &H3D, &HC9)
IID_IMFQualityAdviseLimits = iid
End Function
Public Function IID_IMFRealTimeClient() As UUID
'{2347D60B-3FB5-480c-8803-8DF3ADCD3EF0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2347D60B, CInt(&H3FB5), CInt(&H480C), &H88, &H3, &H8D, &HF3, &HAD, &HCD, &H3E, &HF0)
IID_IMFRealTimeClient = iid
End Function
Public Function IID_IMFRealTimeClientEx() As UUID
'{03910848-AB16-4611-B100-17B88AE2F248}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3910848, CInt(&HAB16), CInt(&H4611), &HB1, &H0, &H17, &HB8, &H8A, &HE2, &HF2, &H48)
IID_IMFRealTimeClientEx = iid
End Function
Public Function IID_IMFSequencerSource() As UUID
'{197CD219-19CB-4de1-A64C-ACF2EDCBE59E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H197CD219, CInt(&H19CB), CInt(&H4DE1), &HA6, &H4C, &HAC, &HF2, &HED, &HCB, &HE5, &H9E)
IID_IMFSequencerSource = iid
End Function
Public Function IID_IMFMediaSourceTopologyProvider() As UUID
'{0E1D6009-C9F3-442d-8C51-A42D2D49452F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE1D6009, CInt(&HC9F3), CInt(&H442D), &H8C, &H51, &HA4, &H2D, &H2D, &H49, &H45, &H2F)
IID_IMFMediaSourceTopologyProvider = iid
End Function
Public Function IID_IMFMediaSourcePresentationProvider() As UUID
'{0E1D600a-C9F3-442d-8C51-A42D2D49452F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE1D600A, CInt(&HC9F3), CInt(&H442D), &H8C, &H51, &HA4, &H2D, &H2D, &H49, &H45, &H2F)
IID_IMFMediaSourcePresentationProvider = iid
End Function
Public Function IID_IMFTopologyNodeAttributeEditor() As UUID
'{676aa6dd-238a-410d-bb99-65668d01605a}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H676AA6DD, CInt(&H238A), CInt(&H410D), &HBB, &H99, &H65, &H66, &H8D, &H1, &H60, &H5A)
IID_IMFTopologyNodeAttributeEditor = iid
End Function
Public Function IID_IMFByteStreamBuffering() As UUID
'{6d66d782-1d4f-4db7-8c63-cb8c77f1ef5e}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6D66D782, CInt(&H1D4F), CInt(&H4DB7), &H8C, &H63, &HCB, &H8C, &H77, &HF1, &HEF, &H5E)
IID_IMFByteStreamBuffering = iid
End Function
Public Function IID_IMFByteStreamCacheControl() As UUID
'{F5042EA4-7A96-4a75-AA7B-2BE1EF7F88D5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF5042EA4, CInt(&H7A96), CInt(&H4A75), &HAA, &H7B, &H2B, &HE1, &HEF, &H7F, &H88, &HD5)
IID_IMFByteStreamCacheControl = iid
End Function
Public Function IID_IMFByteStreamTimeSeek() As UUID
'{64976BFA-FB61-4041-9069-8C9A5F659BEB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H64976BFA, CInt(&HFB61), CInt(&H4041), &H90, &H69, &H8C, &H9A, &H5F, &H65, &H9B, &HEB)
IID_IMFByteStreamTimeSeek = iid
End Function
Public Function IID_IMFByteStreamCacheControl2() As UUID
'{71CE469C-F34B-49EA-A56B-2D2A10E51149}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H71CE469C, CInt(&HF34B), CInt(&H49EA), &HA5, &H6B, &H2D, &H2A, &H10, &HE5, &H11, &H49)
IID_IMFByteStreamCacheControl2 = iid
End Function
Public Function IID_IMFNetCredential() As UUID
'{5b87ef6a-7ed8-434f-ba0e-184fac1628d1}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5B87EF6A, CInt(&H7ED8), CInt(&H434F), &HBA, &HE, &H18, &H4F, &HAC, &H16, &H28, &HD1)
IID_IMFNetCredential = iid
End Function
Public Function IID_IMFNetCredentialManager() As UUID
'{5b87ef6b-7ed8-434f-ba0e-184fac1628d1}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5B87EF6B, CInt(&H7ED8), CInt(&H434F), &HBA, &HE, &H18, &H4F, &HAC, &H16, &H28, &HD1)
IID_IMFNetCredentialManager = iid
End Function
Public Function IID_IMFNetCredentialCache() As UUID
'{5b87ef6c-7ed8-434f-ba0e-184fac1628d1}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5B87EF6C, CInt(&H7ED8), CInt(&H434F), &HBA, &HE, &H18, &H4F, &HAC, &H16, &H28, &HD1)
IID_IMFNetCredentialCache = iid
End Function
Public Function IID_IMFSSLCertificateManager() As UUID
'{61f7d887-1230-4a8b-aeba-8ad434d1a64d}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H61F7D887, CInt(&H1230), CInt(&H4A8B), &HAE, &HBA, &H8A, &HD4, &H34, &HD1, &HA6, &H4D)
IID_IMFSSLCertificateManager = iid
End Function
Public Function IID_IMFNetResourceFilter() As UUID
'{091878a3-bf11-4a5c-bc9f-33995b06ef2d}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H91878A3, CInt(&HBF11), CInt(&H4A5C), &HBC, &H9F, &H33, &H99, &H5B, &H6, &HEF, &H2D)
IID_IMFNetResourceFilter = iid
End Function
Public Function IID_IMFSourceOpenMonitor() As UUID
'{059054B3-027C-494C-A27D-9113291CF87F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H59054B3, CInt(&H27C), CInt(&H494C), &HA2, &H7D, &H91, &H13, &H29, &H1C, &HF8, &H7F)
IID_IMFSourceOpenMonitor = iid
End Function
Public Function IID_IMFNetProxyLocator() As UUID
'{e9cd0383-a268-4bb4-82de-658d53574d41}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE9CD0383, CInt(&HA268), CInt(&H4BB4), &H82, &HDE, &H65, &H8D, &H53, &H57, &H4D, &H41)
IID_IMFNetProxyLocator = iid
End Function
Public Function IID_IMFNetProxyLocatorFactory() As UUID
'{e9cd0384-a268-4bb4-82de-658d53574d41}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE9CD0384, CInt(&HA268), CInt(&H4BB4), &H82, &HDE, &H65, &H8D, &H53, &H57, &H4D, &H41)
IID_IMFNetProxyLocatorFactory = iid
End Function
Public Function IID_IMFSaveJob() As UUID
'{e9931663-80bf-4c6e-98af-5dcf58747d1f}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE9931663, CInt(&H80BF), CInt(&H4C6E), &H98, &HAF, &H5D, &HCF, &H58, &H74, &H7D, &H1F)
IID_IMFSaveJob = iid
End Function
Public Function IID_IMFNetSchemeHandlerConfig() As UUID
'{7BE19E73-C9BF-468a-AC5A-A5E8653BEC87}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7BE19E73, CInt(&HC9BF), CInt(&H468A), &HAC, &H5A, &HA5, &HE8, &H65, &H3B, &HEC, &H87)
IID_IMFNetSchemeHandlerConfig = iid
End Function
Public Function IID_IMFSchemeHandler() As UUID
'{6D4C7B74-52A0-4bb7-B0DB-55F29F47A668}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6D4C7B74, CInt(&H52A0), CInt(&H4BB7), &HB0, &HDB, &H55, &HF2, &H9F, &H47, &HA6, &H68)
IID_IMFSchemeHandler = iid
End Function
Public Function IID_IMFByteStreamHandler() As UUID
'{BB420AA4-765B-4a1f-91FE-D6A8A143924C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBB420AA4, CInt(&H765B), CInt(&H4A1F), &H91, &HFE, &HD6, &HA8, &HA1, &H43, &H92, &H4C)
IID_IMFByteStreamHandler = iid
End Function
Public Function IID_IMFTrustedInput() As UUID
'{542612C4-A1B8-4632-B521-DE11EA64A0B0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H542612C4, CInt(&HA1B8), CInt(&H4632), &HB5, &H21, &HDE, &H11, &HEA, &H64, &HA0, &HB0)
IID_IMFTrustedInput = iid
End Function
Public Function IID_IMFInputTrustAuthority() As UUID
'{D19F8E98-B126-4446-890C-5DCB7AD71453}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD19F8E98, CInt(&HB126), CInt(&H4446), &H89, &HC, &H5D, &HCB, &H7A, &HD7, &H14, &H53)
IID_IMFInputTrustAuthority = iid
End Function
Public Function IID_IMFTrustedOutput() As UUID
'{D19F8E95-B126-4446-890C-5DCB7AD71453}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD19F8E95, CInt(&HB126), CInt(&H4446), &H89, &HC, &H5D, &HCB, &H7A, &HD7, &H14, &H53)
IID_IMFTrustedOutput = iid
End Function
Public Function IID_IMFOutputTrustAuthority() As UUID
'{D19F8E94-B126-4446-890C-5DCB7AD71453}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD19F8E94, CInt(&HB126), CInt(&H4446), &H89, &HC, &H5D, &HCB, &H7A, &HD7, &H14, &H53)
IID_IMFOutputTrustAuthority = iid
End Function
Public Function IID_IMFOutputPolicy() As UUID
'{7F00F10A-DAED-41AF-AB26-5FDFA4DFBA3C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7F00F10A, CInt(&HDAED), CInt(&H41AF), &HAB, &H26, &H5F, &HDF, &HA4, &HDF, &HBA, &H3C)
IID_IMFOutputPolicy = iid
End Function
Public Function IID_IMFOutputSchema() As UUID
'{7BE0FC5B-ABD9-44FB-A5C8-F50136E71599}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7BE0FC5B, CInt(&HABD9), CInt(&H44FB), &HA5, &HC8, &HF5, &H1, &H36, &HE7, &H15, &H99)
IID_IMFOutputSchema = iid
End Function
Public Function IID_IMFSecureChannel() As UUID
'{d0ae555d-3b12-4d97-b060-0990bc5aeb67}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD0AE555D, CInt(&H3B12), CInt(&H4D97), &HB0, &H60, &H9, &H90, &HBC, &H5A, &HEB, &H67)
IID_IMFSecureChannel = iid
End Function
Public Function IID_IMFSampleProtection() As UUID
'{8e36395f-c7b9-43c4-a54d-512b4af63c95}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8E36395F, CInt(&HC7B9), CInt(&H43C4), &HA5, &H4D, &H51, &H2B, &H4A, &HF6, &H3C, &H95)
IID_IMFSampleProtection = iid
End Function
Public Function IID_IMFMediaSinkPreroll() As UUID
'{5dfd4b2a-7674-4110-a4e6-8a68fd5f3688}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5DFD4B2A, CInt(&H7674), CInt(&H4110), &HA4, &HE6, &H8A, &H68, &HFD, &H5F, &H36, &H88)
IID_IMFMediaSinkPreroll = iid
End Function
Public Function IID_IMFFinalizableMediaSink() As UUID
'{EAECB74A-9A50-42ce-9541-6A7F57AA4AD7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEAECB74A, CInt(&H9A50), CInt(&H42CE), &H95, &H41, &H6A, &H7F, &H57, &HAA, &H4A, &HD7)
IID_IMFFinalizableMediaSink = iid
End Function
Public Function IID_IMFStreamingSinkConfig() As UUID
'{9db7aa41-3cc5-40d4-8509-555804ad34cc}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9DB7AA41, CInt(&H3CC5), CInt(&H40D4), &H85, &H9, &H55, &H58, &H4, &HAD, &H34, &HCC)
IID_IMFStreamingSinkConfig = iid
End Function
Public Function IID_IMFRemoteProxy() As UUID
'{994e23ad-1cc2-493c-b9fa-46f1cb040fa4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H994E23AD, CInt(&H1CC2), CInt(&H493C), &HB9, &HFA, &H46, &HF1, &HCB, &H4, &HF, &HA4)
IID_IMFRemoteProxy = iid
End Function
Public Function IID_IMFObjectReferenceStream() As UUID
'{09EF5BE3-C8A7-469e-8B70-73BF25BB193F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9EF5BE3, CInt(&HC8A7), CInt(&H469E), &H8B, &H70, &H73, &HBF, &H25, &HBB, &H19, &H3F)
IID_IMFObjectReferenceStream = iid
End Function
Public Function IID_IMFPMPHost() As UUID
'{F70CA1A9-FDC7-4782-B994-ADFFB1C98606}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF70CA1A9, CInt(&HFDC7), CInt(&H4782), &HB9, &H94, &HAD, &HFF, &HB1, &HC9, &H86, &H6)
IID_IMFPMPHost = iid
End Function
Public Function IID_IMFPMPClient() As UUID
'{6C4E655D-EAD8-4421-B6B9-54DCDBBDF820}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6C4E655D, CInt(&HEAD8), CInt(&H4421), &HB6, &HB9, &H54, &HDC, &HDB, &HBD, &HF8, &H20)
IID_IMFPMPClient = iid
End Function
Public Function IID_IMFPMPServer() As UUID
'{994e23af-1cc2-493c-b9fa-46f1cb040fa4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H994E23AF, CInt(&H1CC2), CInt(&H493C), &HB9, &HFA, &H46, &HF1, &HCB, &H4, &HF, &HA4)
IID_IMFPMPServer = iid
End Function
Public Function IID_IMFRemoteDesktopPlugin() As UUID
'{1cde6309-cae0-4940-907e-c1ec9c3d1d4a}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1CDE6309, CInt(&HCAE0), CInt(&H4940), &H90, &H7E, &HC1, &HEC, &H9C, &H3D, &H1D, &H4A)
IID_IMFRemoteDesktopPlugin = iid
End Function
Public Function IID_IMFSAMIStyle() As UUID
'{A7E025DD-5303-4a62-89D6-E747E1EFAC73}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA7E025DD, CInt(&H5303), CInt(&H4A62), &H89, &HD6, &HE7, &H47, &HE1, &HEF, &HAC, &H73)
IID_IMFSAMIStyle = iid
End Function
Public Function IID_IMFTranscodeProfile() As UUID
'{4ADFDBA3-7AB0-4953-A62B-461E7FF3DA1E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4ADFDBA3, CInt(&H7AB0), CInt(&H4953), &HA6, &H2B, &H46, &H1E, &H7F, &HF3, &HDA, &H1E)
IID_IMFTranscodeProfile = iid
End Function
Public Function IID_IMFTranscodeSinkInfoProvider() As UUID
'{8CFFCD2E-5A03-4a3a-AFF7-EDCD107C620E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8CFFCD2E, CInt(&H5A03), CInt(&H4A3A), &HAF, &HF7, &HED, &HCD, &H10, &H7C, &H62, &HE)
IID_IMFTranscodeSinkInfoProvider = iid
End Function
Public Function IID_IMFFieldOfUseMFTUnlock() As UUID
'{508E71D3-EC66-4fc3-8775-B4B9ED6BA847}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H508E71D3, CInt(&HEC66), CInt(&H4FC3), &H87, &H75, &HB4, &HB9, &HED, &H6B, &HA8, &H47)
IID_IMFFieldOfUseMFTUnlock = iid
End Function
Public Function IID_IMFLocalMFTRegistration() As UUID
'{149c4d73-b4be-4f8d-8b87-079e926b6add}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H149C4D73, CInt(&HB4BE), CInt(&H4F8D), &H8B, &H87, &H7, &H9E, &H92, &H6B, &H6A, &HDD)
IID_IMFLocalMFTRegistration = iid
End Function
Public Function IID_IMFPMPHostApp() As UUID
'{84d2054a-3aa1-4728-a3b0-440a418cf49c}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H84D2054A, CInt(&H3AA1), CInt(&H4728), &HA3, &HB0, &H44, &HA, &H41, &H8C, &HF4, &H9C)
IID_IMFPMPHostApp = iid
End Function
Public Function IID_IMFPMPClientApp() As UUID
'{c004f646-be2c-48f3-93a2-a0983eba1108}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC004F646, CInt(&HBE2C), CInt(&H48F3), &H93, &HA2, &HA0, &H98, &H3E, &HBA, &H11, &H8)
IID_IMFPMPClientApp = iid
End Function
Public Function IID_IMFMediaStreamSourceSampleRequest() As UUID
'{380b9af9-a85b-4e78-a2af-ea5ce645c6b4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H380B9AF9, CInt(&HA85B), CInt(&H4E78), &HA2, &HAF, &HEA, &H5C, &HE6, &H45, &HC6, &HB4)
IID_IMFMediaStreamSourceSampleRequest = iid
End Function
Public Function IID_IMFTrackedSample() As UUID
'{245BF8E9-0755-40f7-88A5-AE0F18D55E17}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H245BF8E9, CInt(&H755), CInt(&H40F7), &H88, &HA5, &HAE, &HF, &H18, &HD5, &H5E, &H17)
IID_IMFTrackedSample = iid
End Function
Public Function IID_IMFProtectedEnvironmentAccess() As UUID
'{ef5dc845-f0d9-4ec9-b00c-cb5183d38434}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEF5DC845, CInt(&HF0D9), CInt(&H4EC9), &HB0, &HC, &HCB, &H51, &H83, &HD3, &H84, &H34)
IID_IMFProtectedEnvironmentAccess = iid
End Function
Public Function IID_IMFSignedLibrary() As UUID
'{4a724bca-ff6a-4c07-8e0d-7a358421cf06}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4A724BCA, CInt(&HFF6A), CInt(&H4C07), &H8E, &HD, &H7A, &H35, &H84, &H21, &HCF, &H6)
IID_IMFSignedLibrary = iid
End Function
Public Function IID_IMFSystemId() As UUID
'{fff4af3a-1fc1-4ef9-a29b-d26c49e2f31a}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFFF4AF3A, CInt(&H1FC1), CInt(&H4EF9), &HA2, &H9B, &HD2, &H6C, &H49, &HE2, &HF3, &H1A)
IID_IMFSystemId = iid
End Function
Public Function IID_IMFContentProtectionDevice() As UUID
'{E6257174-A060-4C9A-A088-3B1B471CAD28}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE6257174, CInt(&HA060), CInt(&H4C9A), &HA0, &H88, &H3B, &H1B, &H47, &H1C, &HAD, &H28)
IID_IMFContentProtectionDevice = iid
End Function
Public Function IID_IMFContentDecryptorContext() As UUID
'{7EC4B1BD-43FB-4763-85D2-64FCB5C5F4CB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7EC4B1BD, CInt(&H43FB), CInt(&H4763), &H85, &HD2, &H64, &HFC, &HB5, &HC5, &HF4, &HCB)
IID_IMFContentDecryptorContext = iid
End Function
Public Function IID_IMFVideoPositionMapper() As UUID
'{1F6A9F17-E70B-4e24-8AE4-0B2C3BA7A4AE}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1F6A9F17, CInt(&HE70B), CInt(&H4E24), &H8A, &HE4, &HB, &H2C, &H3B, &HA7, &HA4, &HAE)
IID_IMFVideoPositionMapper = iid
End Function
Public Function IID_IMFVideoDeviceID() As UUID
'{A38D9567-5A9C-4f3c-B293-8EB415B279BA}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA38D9567, CInt(&H5A9C), CInt(&H4F3C), &HB2, &H93, &H8E, &HB4, &H15, &HB2, &H79, &HBA)
IID_IMFVideoDeviceID = iid
End Function
Public Function IID_IMFVideoDisplayControl() As UUID
'{a490b1e4-ab84-4d31-a1b2-181e03b1077a}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA490B1E4, CInt(&HAB84), CInt(&H4D31), &HA1, &HB2, &H18, &H1E, &H3, &HB1, &H7, &H7A)
IID_IMFVideoDisplayControl = iid
End Function
Public Function IID_IMFVideoPresenter() As UUID
'{29AFF080-182A-4a5d-AF3B-448F3A6346CB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H29AFF080, CInt(&H182A), CInt(&H4A5D), &HAF, &H3B, &H44, &H8F, &H3A, &H63, &H46, &HCB)
IID_IMFVideoPresenter = iid
End Function
Public Function IID_IMFDesiredSample() As UUID
'{56C294D0-753E-4260-8D61-A3D8820B1D54}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56C294D0, CInt(&H753E), CInt(&H4260), &H8D, &H61, &HA3, &HD8, &H82, &HB, &H1D, &H54)
IID_IMFDesiredSample = iid
End Function
Public Function IID_IMFVideoMixerControl() As UUID
'{A5C6C53F-C202-4aa5-9695-175BA8C508A5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA5C6C53F, CInt(&HC202), CInt(&H4AA5), &H96, &H95, &H17, &H5B, &HA8, &HC5, &H8, &HA5)
IID_IMFVideoMixerControl = iid
End Function
Public Function IID_IMFVideoMixerControl2() As UUID
'{8459616d-966e-4930-b658-54fa7e5a16d3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8459616D, CInt(&H966E), CInt(&H4930), &HB6, &H58, &H54, &HFA, &H7E, &H5A, &H16, &HD3)
IID_IMFVideoMixerControl2 = iid
End Function
Public Function IID_IMFVideoRenderer() As UUID
'{DFDFD197-A9CA-43d8-B341-6AF3503792CD}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDFDFD197, CInt(&HA9CA), CInt(&H43D8), &HB3, &H41, &H6A, &HF3, &H50, &H37, &H92, &HCD)
IID_IMFVideoRenderer = iid
End Function
Public Function IID_IEVRFilterConfig() As UUID
'{83E91E85-82C1-4ea7-801D-85DC50B75086}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H83E91E85, CInt(&H82C1), CInt(&H4EA7), &H80, &H1D, &H85, &HDC, &H50, &HB7, &H50, &H86)
IID_IEVRFilterConfig = iid
End Function
Public Function IID_IEVRFilterConfigEx() As UUID
'{aea36028-796d-454f-beee-b48071e24304}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HAEA36028, CInt(&H796D), CInt(&H454F), &HBE, &HEE, &HB4, &H80, &H71, &HE2, &H43, &H4)
IID_IEVRFilterConfigEx = iid
End Function
Public Function IID_IMFTopologyServiceLookup() As UUID
'{fa993889-4383-415a-a930-dd472a8cf6f7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFA993889, CInt(&H4383), CInt(&H415A), &HA9, &H30, &HDD, &H47, &H2A, &H8C, &HF6, &HF7)
IID_IMFTopologyServiceLookup = iid
End Function
Public Function IID_IMFTopologyServiceLookupClient() As UUID
'{fa99388a-4383-415a-a930-dd472a8cf6f7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFA99388A, CInt(&H4383), CInt(&H415A), &HA9, &H30, &HDD, &H47, &H2A, &H8C, &HF6, &HF7)
IID_IMFTopologyServiceLookupClient = iid
End Function
Public Function IID_IEVRTrustedVideoPlugin() As UUID
'{83A4CE40-7710-494b-A893-A472049AF630}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H83A4CE40, CInt(&H7710), CInt(&H494B), &HA8, &H93, &HA4, &H72, &H4, &H9A, &HF6, &H30)
IID_IEVRTrustedVideoPlugin = iid
End Function
Public Function IID_IMFPMediaPlayer() As UUID
'{A714590A-58AF-430a-85BF-44F5EC838D85}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA714590A, CInt(&H58AF), CInt(&H430A), &H85, &HBF, &H44, &HF5, &HEC, &H83, &H8D, &H85)
IID_IMFPMediaPlayer = iid
End Function
Public Function IID_IMFPMediaItem() As UUID
'{90EB3E6B-ECBF-45cc-B1DA-C6FE3EA70D57}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H90EB3E6B, CInt(&HECBF), CInt(&H45CC), &HB1, &HDA, &HC6, &HFE, &H3E, &HA7, &HD, &H57)
IID_IMFPMediaItem = iid
End Function
Public Function IID_IMFPMediaPlayerCallback() As UUID
'{766C8FFB-5FDB-4fea-A28D-B912996F51BD}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H766C8FFB, CInt(&H5FDB), CInt(&H4FEA), &HA2, &H8D, &HB9, &H12, &H99, &H6F, &H51, &HBD)
IID_IMFPMediaPlayerCallback = iid
End Function
Public Function IID_IMFCaptureSource() As UUID
'{439a42a8-0d2c-4505-be83-f79b2a05d5c4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H439a42a8, CInt(&H0d2c), CInt(&H4505), &Hbe, &H83, &Hf7, &H9b, &H2a, &H05, &Hd5, &Hc4)
IID_IMFCaptureSource = iid
End Function
Public Function IID_IMFCaptureEngine() As UUID
'{a6bba433-176b-48b2-b375-53aa03473207}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Ha6bba433, CInt(&H176b), CInt(&H48b2), &Hb3, &H75, &H53, &Haa, &H03, &H47, &H32, &H07)
IID_IMFCaptureEngine = iid
End Function
Public Function IID_IMFCaptureEngineClassFactory() As UUID
'{8f02d140-56fc-4302-a705-3a97c78be779}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8f02d140, CInt(&H56fc), CInt(&H4302), &Ha7, &H05, &H3a, &H97, &Hc7, &H8b, &He7, &H79)
IID_IMFCaptureEngineClassFactory = iid
End Function
Public Function IID_IMFCaptureEngineOnSampleCallback2() As UUID
'{e37ceed7-340f-4514-9f4d-9c2ae026100b}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &He37ceed7, CInt(&H340f), CInt(&H4514), &H9f, &H4d, &H9c, &H2a, &He0, &H26, &H10, &H0b)
IID_IMFCaptureEngineOnSampleCallback2 = iid
End Function
Public Function IID_IMFCaptureSink2() As UUID
'{f9e4219e-6197-4b5e-b888-bee310ab2c59}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hf9e4219e, CInt(&H6197), CInt(&H4b5e), &Hb8, &H88, &Hbe, &He3, &H10, &Hab, &H2c, &H59)
IID_IMFCaptureSink2 = iid
End Function
Public Function IID_IMFCaptureRecordSink() As UUID
'{3323b55a-f92a-4fe2-8edc-e9bfc0634d77}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3323b55a, CInt(&Hf92a), CInt(&H4fe2), &H8e, &Hdc, &He9, &Hbf, &Hc0, &H63, &H4d, &H77)
IID_IMFCaptureRecordSink = iid
End Function
Public Function IID_IMFCapturePreviewSink() As UUID
'{77346cfd-5b49-4d73-ace0-5b52a859f2e0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H77346cfd, CInt(&H5b49), CInt(&H4d73), &Hac, &He0, &H5b, &H52, &Ha8, &H59, &Hf2, &He0)
IID_IMFCapturePreviewSink = iid
End Function
Public Function IID_IMFCapturePhotoSink() As UUID
'{d2d43cc8-48bb-4aa7-95db-10c06977e777}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hd2d43cc8, CInt(&H48bb), CInt(&H4aa7), &H95, &Hdb, &H10, &Hc0, &H69, &H77, &He7, &H77)
IID_IMFCapturePhotoSink = iid
End Function
Public Function IID_IMFCaptureEngineOnEventCallback() As UUID
'{aeda51c0-9025-4983-9012-de597b88b089}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Haeda51c0, CInt(&H9025), CInt(&H4983), &H90, &H12, &Hde, &H59, &H7b, &H88, &Hb0, &H89)
IID_IMFCaptureEngineOnEventCallback = iid
End Function
Public Function IID_IMFCaptureEngineOnSampleCallback() As UUID
'{52150b82-ab39-4467-980f-e48bf0822ecd}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H52150b82, CInt(&Hab39), CInt(&H4467), &H98, &H0f, &He4, &H8b, &Hf0, &H82, &H2e, &Hcd)
IID_IMFCaptureEngineOnSampleCallback = iid
End Function
Public Function IID_IMFCaptureSink() As UUID
'{72d6135b-35e9-412c-b926-fd5265f2a885}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H72d6135b, CInt(&H35e9), CInt(&H412c), &Hb9, &H26, &Hfd, &H52, &H65, &Hf2, &Ha8, &H85)
IID_IMFCaptureSink = iid
End Function
Public Function IID_IMFMediaError() As UUID
'{fc0e10d2-ab2a-4501-a951-06bb1075184c}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hfc0e10d2, CInt(&Hab2a), CInt(&H4501), &Ha9, &H51, &H06, &Hbb, &H10, &H75, &H18, &H4c)
IID_IMFMediaError = iid
End Function
Public Function IID_IMFMediaTimeRange() As UUID
'{db71a2fc-078a-414e-9df9-8c2531b0aa6c}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hdb71a2fc, CInt(&H078a), CInt(&H414e), &H9d, &Hf9, &H8c, &H25, &H31, &Hb0, &Haa, &H6c)
IID_IMFMediaTimeRange = iid
End Function
Public Function IID_IMFMediaEngineNotify() As UUID
'{fee7c112-e776-42b5-9bbf-0048524e2bd5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hfee7c112, CInt(&He776), CInt(&H42b5), &H9b, &Hbf, &H00, &H48, &H52, &H4e, &H2b, &Hd5)
IID_IMFMediaEngineNotify = iid
End Function
Public Function IID_IMFMediaEngineSrcElements() As UUID
'{7a5e5354-b114-4c72-b991-3131d75032ea}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7a5e5354, CInt(&Hb114), CInt(&H4c72), &Hb9, &H91, &H31, &H31, &Hd7, &H50, &H32, &Hea)
IID_IMFMediaEngineSrcElements = iid
End Function
Public Function IID_IMFMediaEngine() As UUID
'{98a1b0bb-03eb-4935-ae7c-93c1fa0e1c93}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H98a1b0bb, CInt(&H03eb), CInt(&H4935), &Hae, &H7c, &H93, &Hc1, &Hfa, &H0e, &H1c, &H93)
IID_IMFMediaEngine = iid
End Function
Public Function IID_IMFMediaEngineEx() As UUID
'{83015ead-b1e6-40d0-a98a-37145ffe1ad1}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H83015ead, CInt(&Hb1e6), CInt(&H40d0), &Ha9, &H8a, &H37, &H14, &H5f, &Hfe, &H1a, &Hd1)
IID_IMFMediaEngineEx = iid
End Function
Public Function IID_IMFMediaEngineAudioEndpointId() As UUID
'{7a3bac98-0e76-49fb-8c20-8a86fd98eaf2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7a3bac98, CInt(&H0e76), CInt(&H49fb), &H8c, &H20, &H8a, &H86, &Hfd, &H98, &Hea, &Hf2)
IID_IMFMediaEngineAudioEndpointId = iid
End Function
Public Function IID_IMFMediaEngineExtension() As UUID
'{2f69d622-20b5-41e9-afdf-89ced1dda04e}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2f69d622, CInt(&H20b5), CInt(&H41e9), &Haf, &Hdf, &H89, &Hce, &Hd1, &Hdd, &Ha0, &H4e)
IID_IMFMediaEngineExtension = iid
End Function
Public Function IID_IMFMediaEngineProtectedContent() As UUID
'{9f8021e8-9c8c-487e-bb5c-79aa4779938c}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9f8021e8, CInt(&H9c8c), CInt(&H487e), &Hbb, &H5c, &H79, &Haa, &H47, &H79, &H93, &H8c)
IID_IMFMediaEngineProtectedContent = iid
End Function
Public Function IID_IAudioSourceProvider() As UUID
'{EBBAF249-AFC2-4582-91C6-B60DF2E84954}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEBBAF249, CInt(&HAFC2), CInt(&H4582), &H91, &HC6, &HB6, &H0D, &HF2, &HE8, &H49, &H54)
IID_IAudioSourceProvider = iid
End Function
Public Function IID_IMFMediaEngineWebSupport() As UUID
'{ba2743a1-07e0-48ef-84b6-9a2ed023ca6c}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hba2743a1, CInt(&H07e0), CInt(&H48ef), &H84, &Hb6, &H9a, &H2e, &Hd0, &H23, &Hca, &H6c)
IID_IMFMediaEngineWebSupport = iid
End Function
Public Function IID_IMFMediaSourceExtensionNotify() As UUID
'{a7901327-05dd-4469-a7b7-0e01979e361d}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Ha7901327, CInt(&H05dd), CInt(&H4469), &Ha7, &Hb7, &H0e, &H01, &H97, &H9e, &H36, &H1d)
IID_IMFMediaSourceExtensionNotify = iid
End Function
Public Function IID_IMFBufferListNotify() As UUID
'{24cd47f7-81d8-4785-adb2-af697a963cd2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H24cd47f7, CInt(&H81d8), CInt(&H4785), &Had, &Hb2, &Haf, &H69, &H7a, &H96, &H3c, &Hd2)
IID_IMFBufferListNotify = iid
End Function
Public Function IID_IMFSourceBufferNotify() As UUID
'{87e47623-2ceb-45d6-9b88-d8520c4dcbbc}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H87e47623, CInt(&H2ceb), CInt(&H45d6), &H9b, &H88, &Hd8, &H52, &H0c, &H4d, &Hcb, &Hbc)
IID_IMFSourceBufferNotify = iid
End Function
Public Function IID_IMFSourceBuffer() As UUID
'{e2cd3a4b-af25-4d3d-9110-da0e6f8ee877}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &He2cd3a4b, CInt(&Haf25), CInt(&H4d3d), &H91, &H10, &Hda, &H0e, &H6f, &H8e, &He8, &H77)
IID_IMFSourceBuffer = iid
End Function
Public Function IID_IMFSourceBufferAppendMode() As UUID
'{19666fb4-babe-4c55-bc03-0a074da37e2a}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H19666fb4, CInt(&Hbabe), CInt(&H4c55), &Hbc, &H03, &H0a, &H07, &H4d, &Ha3, &H7e, &H2a)
IID_IMFSourceBufferAppendMode = iid
End Function
Public Function IID_IMFSourceBufferList() As UUID
'{249981f8-8325-41f3-b80c-3b9e3aad0cbe}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H249981f8, CInt(&H8325), CInt(&H41f3), &Hb8, &H0c, &H3b, &H9e, &H3a, &Had, &H0c, &Hbe)
IID_IMFSourceBufferList = iid
End Function
Public Function IID_IMFMediaSourceExtension() As UUID
'{e467b94e-a713-4562-a802-816a42e9008a}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &He467b94e, CInt(&Ha713), CInt(&H4562), &Ha8, &H02, &H81, &H6a, &H42, &He9, &H00, &H8a)
IID_IMFMediaSourceExtension = iid
End Function
Public Function IID_IMFMediaSourceExtensionLiveSeekableRange() As UUID
'{5D1ABFD6-450A-4D92-9EFC-D6B6CBC1F4DA}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5D1ABFD6, CInt(&H450A), CInt(&H4D92), &H9E, &HFC, &HD6, &HB6, &HCB, &HC1, &HF4, &HDA)
IID_IMFMediaSourceExtensionLiveSeekableRange = iid
End Function
Public Function IID_IMFMediaEngineEME() As UUID
'{50dc93e4-ba4f-4275-ae66-83e836e57469}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H50dc93e4, CInt(&Hba4f), CInt(&H4275), &Hae, &H66, &H83, &He8, &H36, &He5, &H74, &H69)
IID_IMFMediaEngineEME = iid
End Function
Public Function IID_IMFMediaEngineSrcElementsEx() As UUID
'{654a6bb3-e1a3-424a-9908-53a43a0dfda0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H654a6bb3, CInt(&He1a3), CInt(&H424a), &H99, &H08, &H53, &Ha4, &H3a, &H0d, &Hfd, &Ha0)
IID_IMFMediaEngineSrcElementsEx = iid
End Function
Public Function IID_IMFMediaEngineNeedKeyNotify() As UUID
'{46a30204-a696-4b18-8804-246b8f031bb1}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H46a30204, CInt(&Ha696), CInt(&H4b18), &H88, &H04, &H24, &H6b, &H8f, &H03, &H1b, &Hb1)
IID_IMFMediaEngineNeedKeyNotify = iid
End Function
Public Function IID_IMFMediaKeys() As UUID
'{5cb31c05-61ff-418f-afda-caaf41421a38}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5cb31c05, CInt(&H61ff), CInt(&H418f), &Haf, &Hda, &Hca, &Haf, &H41, &H42, &H1a, &H38)
IID_IMFMediaKeys = iid
End Function
Public Function IID_IMFMediaKeySession() As UUID
'{24fa67d5-d1d0-4dc5-995c-c0efdc191fb5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H24fa67d5, CInt(&Hd1d0), CInt(&H4dc5), &H99, &H5c, &Hc0, &Hef, &Hdc, &H19, &H1f, &Hb5)
IID_IMFMediaKeySession = iid
End Function
Public Function IID_IMFMediaKeySessionNotify() As UUID
'{6a0083f9-8947-4c1d-9ce0-cdee22b23135}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6a0083f9, CInt(&H8947), CInt(&H4c1d), &H9c, &He0, &Hcd, &Hee, &H22, &Hb2, &H31, &H35)
IID_IMFMediaKeySessionNotify = iid
End Function
Public Function IID_IMFCdmSuspendNotify() As UUID
'{7a5645d2-43bd-47fd-87b7-dcd24cc7d692}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7a5645d2, CInt(&H43bd), CInt(&H47fd), &H87, &Hb7, &Hdc, &Hd2, &H4c, &Hc7, &Hd6, &H92)
IID_IMFCdmSuspendNotify = iid
End Function
Public Function IID_IMFHDCPStatus() As UUID
'{DE400F54-5BF1-40CF-8964-0BEA136B1E3D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDE400F54, CInt(&H5BF1), CInt(&H40CF), &H89, &H64, &H0B, &HEA, &H13, &H6B, &H1E, &H3D)
IID_IMFHDCPStatus = iid
End Function
Public Function IID_IMFMediaEngineOPMInfo() As UUID
'{765763e6-6c01-4b01-bb0f-b829f60ed28c}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H765763e6, CInt(&H6c01), CInt(&H4b01), &Hbb, &H0f, &Hb8, &H29, &Hf6, &H0e, &Hd2, &H8c)
IID_IMFMediaEngineOPMInfo = iid
End Function
Public Function IID_IMFMediaEngineClassFactory() As UUID
'{4D645ACE-26AA-4688-9BE1-DF3516990B93}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4D645ACE, CInt(&H26AA), CInt(&H4688), &H9B, &HE1, &HDF, &H35, &H16, &H99, &H0B, &H93)
IID_IMFMediaEngineClassFactory = iid
End Function
Public Function IID_IMFMediaEngineClassFactoryEx() As UUID
'{c56156c6-ea5b-48a5-9df8-fbe035d0929e}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hc56156c6, CInt(&Hea5b), CInt(&H48a5), &H9d, &Hf8, &Hfb, &He0, &H35, &Hd0, &H92, &H9e)
IID_IMFMediaEngineClassFactoryEx = iid
End Function
Public Function IID_IMFMediaEngineClassFactory2() As UUID
'{09083cef-867f-4bf6-8776-dee3a7b42fca}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H09083cef, CInt(&H867f), CInt(&H4bf6), &H87, &H76, &Hde, &He3, &Ha7, &Hb4, &H2f, &Hca)
IID_IMFMediaEngineClassFactory2 = iid
End Function
Public Function IID_IMFExtendedDRMTypeSupport() As UUID
'{332EC562-3758-468D-A784-E38F23552128}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H332EC562, CInt(&H3758), CInt(&H468D), &HA7, &H84, &HE3, &H8F, &H23, &H55, &H21, &H28)
IID_IMFExtendedDRMTypeSupport = iid
End Function
Public Function IID_IMFMediaEngineSupportsSourceTransfer() As UUID
'{a724b056-1b2e-4642-a6f3-db9420c52908}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Ha724b056, CInt(&H1b2e), CInt(&H4642), &Ha6, &Hf3, &Hdb, &H94, &H20, &Hc5, &H29, &H08)
IID_IMFMediaEngineSupportsSourceTransfer = iid
End Function
Public Function IID_IMFMediaEngineTransferSource() As UUID
'{24230452-fe54-40cc-94f3-fcc394c340d6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H24230452, CInt(&Hfe54), CInt(&H40cc), &H94, &Hf3, &Hfc, &Hc3, &H94, &Hc3, &H40, &Hd6)
IID_IMFMediaEngineTransferSource = iid
End Function
Public Function IID_IMFTimedText() As UUID
'{1f2a94c9-a3df-430d-9d0f-acd85ddc29af}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1f2a94c9, CInt(&Ha3df), CInt(&H430d), &H9d, &H0f, &Hac, &Hd8, &H5d, &Hdc, &H29, &Haf)
IID_IMFTimedText = iid
End Function
Public Function IID_IMFTimedTextNotify() As UUID
'{df6b87b6-ce12-45db-aba7-432fe054e57d}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hdf6b87b6, CInt(&Hce12), CInt(&H45db), &Hab, &Ha7, &H43, &H2f, &He0, &H54, &He5, &H7d)
IID_IMFTimedTextNotify = iid
End Function
Public Function IID_IMFTimedTextTrack() As UUID
'{8822c32d-654e-4233-bf21-d7f2e67d30d4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8822c32d, CInt(&H654e), CInt(&H4233), &Hbf, &H21, &Hd7, &Hf2, &He6, &H7d, &H30, &Hd4)
IID_IMFTimedTextTrack = iid
End Function
Public Function IID_IMFTimedTextTrackList() As UUID
'{23ff334c-442c-445f-bccc-edc438aa11e2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H23ff334c, CInt(&H442c), CInt(&H445f), &Hbc, &Hcc, &Hed, &Hc4, &H38, &Haa, &H11, &He2)
IID_IMFTimedTextTrackList = iid
End Function
Public Function IID_IMFTimedTextCue() As UUID
'{1e560447-9a2b-43e1-a94c-b0aaabfbfbc9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1e560447, CInt(&H9a2b), CInt(&H43e1), &Ha9, &H4c, &Hb0, &Haa, &Hab, &Hfb, &Hfb, &Hc9)
IID_IMFTimedTextCue = iid
End Function
Public Function IID_IMFTimedTextFormattedText() As UUID
'{e13af3c1-4d47-4354-b1f5-e83ae0ecae60}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &He13af3c1, CInt(&H4d47), CInt(&H4354), &Hb1, &Hf5, &He8, &H3a, &He0, &Hec, &Hae, &H60)
IID_IMFTimedTextFormattedText = iid
End Function
Public Function IID_IMFTimedTextStyle() As UUID
'{09b2455d-b834-4f01-a347-9052e21c450e}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H09b2455d, CInt(&Hb834), CInt(&H4f01), &Ha3, &H47, &H90, &H52, &He2, &H1c, &H45, &H0e)
IID_IMFTimedTextStyle = iid
End Function
Public Function IID_IMFTimedTextRegion() As UUID
'{c8d22afc-bc47-4bdf-9b04-787e49ce3f58}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hc8d22afc, CInt(&Hbc47), CInt(&H4bdf), &H9b, &H04, &H78, &H7e, &H49, &Hce, &H3f, &H58)
IID_IMFTimedTextRegion = iid
End Function
Public Function IID_IMFTimedTextBinary() As UUID
'{4ae3a412-0545-43c4-bf6f-6b97a5c6c432}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4ae3a412, CInt(&H0545), CInt(&H43c4), &Hbf, &H6f, &H6b, &H97, &Ha5, &Hc6, &Hc4, &H32)
IID_IMFTimedTextBinary = iid
End Function
Public Function IID_IMFTimedTextCueList() As UUID
'{ad128745-211b-40a0-9981-fe65f166d0fd}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Had128745, CInt(&H211b), CInt(&H40a0), &H99, &H81, &Hfe, &H65, &Hf1, &H66, &Hd0, &Hfd)
IID_IMFTimedTextCueList = iid
End Function
Public Function IID_IMFTimedTextRuby() As UUID
'{76c6a6f5-4955-4de5-b27b-14b734cc14b4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H76c6a6f5, CInt(&H4955), CInt(&H4de5), &Hb2, &H7b, &H14, &Hb7, &H34, &Hcc, &H14, &Hb4)
IID_IMFTimedTextRuby = iid
End Function
Public Function IID_IMFTimedTextBouten() As UUID
'{3c5f3e8a-90c0-464e-8136-898d2975f847}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3c5f3e8a, CInt(&H90c0), CInt(&H464e), &H81, &H36, &H89, &H8d, &H29, &H75, &Hf8, &H47)
IID_IMFTimedTextBouten = iid
End Function
Public Function IID_IMFTimedTextStyle2() As UUID
'{db639199-c809-4c89-bfca-d0bbb9729d6e}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hdb639199, CInt(&Hc809), CInt(&H4c89), &Hbf, &Hca, &Hd0, &Hbb, &Hb9, &H72, &H9d, &H6e)
IID_IMFTimedTextStyle2 = iid
End Function
Public Function IID_IMFMediaEngineEMENotify() As UUID
'{9e184d15-cdb7-4f86-b49e-566689f4a601}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9e184d15, CInt(&Hcdb7), CInt(&H4f86), &Hb4, &H9e, &H56, &H66, &H89, &Hf4, &Ha6, &H01)
IID_IMFMediaEngineEMENotify = iid
End Function
Public Function IID_IMFMediaKeySessionNotify2() As UUID
'{c3a9e92a-da88-46b0-a110-6cf953026cb9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hc3a9e92a, CInt(&Hda88), CInt(&H46b0), &Ha1, &H10, &H6c, &Hf9, &H53, &H02, &H6c, &Hb9)
IID_IMFMediaKeySessionNotify2 = iid
End Function
Public Function IID_IMFMediaKeySystemAccess() As UUID
'{aec63fda-7a97-4944-b35c-6c6df8085cc3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Haec63fda, CInt(&H7a97), CInt(&H4944), &Hb3, &H5c, &H6c, &H6d, &Hf8, &H08, &H5c, &Hc3)
IID_IMFMediaKeySystemAccess = iid
End Function
Public Function IID_IMFMediaEngineClassFactory3() As UUID
'{3787614f-65f7-4003-b673-ead8293a0e60}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3787614f, CInt(&H65f7), CInt(&H4003), &Hb6, &H73, &Hea, &Hd8, &H29, &H3a, &H0e, &H60)
IID_IMFMediaEngineClassFactory3 = iid
End Function
Public Function IID_IMFMediaKeys2() As UUID
'{45892507-ad66-4de2-83a2-acbb13cd8d43}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H45892507, CInt(&Had66), CInt(&H4de2), &H83, &Ha2, &Hac, &Hbb, &H13, &Hcd, &H8d, &H43)
IID_IMFMediaKeys2 = iid
End Function
Public Function IID_IMFMediaKeySession2() As UUID
'{e9707e05-6d55-4636-b185-3de21210bd75}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &He9707e05, CInt(&H6d55), CInt(&H4636), &Hb1, &H85, &H3d, &He2, &H12, &H10, &Hbd, &H75)
IID_IMFMediaKeySession2 = iid
End Function
Public Function IID_IMFMediaEngineClassFactory4() As UUID
'{fbe256c1-43cf-4a9b-8cb8-ce8632a34186}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hfbe256c1, CInt(&H43cf), CInt(&H4a9b), &H8c, &Hb8, &Hce, &H86, &H32, &Ha3, &H41, &H86)
IID_IMFMediaEngineClassFactory4 = iid
End Function
Public Function IID_IMFContentDecryptionModuleSession() As UUID
'{4e233efd-1dd2-49e8-b577-d63eee4c0d33}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4e233efd, CInt(&H1dd2), CInt(&H49e8), &Hb5, &H77, &Hd6, &H3e, &Hee, &H4c, &H0d, &H33)
IID_IMFContentDecryptionModuleSession = iid
End Function
Public Function IID_IMFContentDecryptionModuleSessionCallbacks() As UUID
'{3f96ee40-ad81-4096-8470-59a4b770f89a}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3f96ee40, CInt(&Had81), CInt(&H4096), &H84, &H70, &H59, &Ha4, &Hb7, &H70, &Hf8, &H9a)
IID_IMFContentDecryptionModuleSessionCallbacks = iid
End Function
Public Function IID_IMFContentDecryptionModule() As UUID
'{87be986c-10be-4943-bf48-4b54ce1983a2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H87be986c, CInt(&H10be), CInt(&H4943), &Hbf, &H48, &H4b, &H54, &Hce, &H19, &H83, &Ha2)
IID_IMFContentDecryptionModule = iid
End Function
Public Function IID_IMFContentDecryptionModuleAccess() As UUID
'{a853d1f4-e2a0-4303-9edc-f1a68ee43136}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Ha853d1f4, CInt(&He2a0), CInt(&H4303), &H9e, &Hdc, &Hf1, &Ha6, &H8e, &He4, &H31, &H36)
IID_IMFContentDecryptionModuleAccess = iid
End Function
Public Function IID_IMFContentDecryptionModuleFactory() As UUID
'{7d5abf16-4cbb-4e08-b977-9ba59049943e}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7d5abf16, CInt(&H4cbb), CInt(&H4e08), &Hb9, &H77, &H9b, &Ha5, &H90, &H49, &H94, &H3e)
IID_IMFContentDecryptionModuleFactory = iid
End Function
Public Function IID_IMFDLNASinkInit() As UUID
'{0c012799-1b61-4c10-bda9-04445be5f561}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H0c012799, CInt(&H1b61), CInt(&H4c10), &Hbd, &Ha9, &H04, &H44, &H5b, &He5, &Hf5, &H61)
IID_IMFDLNASinkInit = iid
End Function
Public Function IID_IMFD3D12SynchronizationObjectCommands() As UUID
'{09D0F835-92FF-4E53-8EFA-40FAA551F233}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H09D0F835, CInt(&H92FF), CInt(&H4E53), &H8E, &HFA, &H40, &HFA, &HA5, &H51, &HF2, &H33)
IID_IMFD3D12SynchronizationObjectCommands = iid
End Function
Public Function IID_IMFD3D12SynchronizationObject() As UUID
'{802302B0-82DE-45E1-B421-F19EE5BDAF23}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H802302B0, CInt(&H82DE), CInt(&H45E1), &HB4, &H21, &HF1, &H9E, &HE5, &HBD, &HAF, &H23)
IID_IMFD3D12SynchronizationObject = iid
End Function
Public Function IID_IAdvancedMediaCaptureInitializationSettings() As UUID
'{3DE21209-8BA6-4f2a-A577-2819B56FF14D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3DE21209, CInt(&H8BA6), CInt(&H4f2a), &HA5, &H77, &H28, &H19, &HB5, &H6F, &HF1, &H4D)
IID_IAdvancedMediaCaptureInitializationSettings = iid
End Function
Public Function IID_IAdvancedMediaCaptureSettings() As UUID
'{24E0485F-A33E-4aa1-B564-6019B1D14F65}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H24E0485F, CInt(&HA33E), CInt(&H4aa1), &HB5, &H64, &H60, &H19, &HB1, &HD1, &H4F, &H65)
IID_IAdvancedMediaCaptureSettings = iid
End Function
Public Function IID_IAdvancedMediaCapture() As UUID
'{D0751585-D216-4344-B5BF-463B68F977BB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD0751585, CInt(&HD216), CInt(&H4344), &HB5, &HBF, &H46, &H3B, &H68, &HF9, &H77, &HBB)
IID_IAdvancedMediaCapture = iid
End Function
Public Function IID_IMFSharingEngineClassFactory() As UUID
'{2BA61F92-8305-413B-9733-FAF15F259384}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2BA61F92, CInt(&H8305), CInt(&H413B), &H97, &H33, &HFA, &HF1, &H5F, &H25, &H93, &H84)
IID_IMFSharingEngineClassFactory = iid
End Function
Public Function IID_IMFMediaSharingEngine() As UUID
'{8D3CE1BF-2367-40E0-9EEE-40D377CC1B46}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8D3CE1BF, CInt(&H2367), CInt(&H40E0), &H9E, &HEE, &H40, &HD3, &H77, &HCC, &H1B, &H46)
IID_IMFMediaSharingEngine = iid
End Function
Public Function IID_IMFMediaSharingEngineClassFactory() As UUID
'{524D2BC4-B2B1-4FE5-8FAC-FA4E4512B4E0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H524D2BC4, CInt(&HB2B1), CInt(&H4FE5), &H8F, &HAC, &HFA, &H4E, &H45, &H12, &HB4, &HE0)
IID_IMFMediaSharingEngineClassFactory = iid
End Function
Public Function IID_IMFImageSharingEngine() As UUID
'{CFA0AE8E-7E1C-44D2-AE68-FC4C148A6354}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HCFA0AE8E, CInt(&H7E1C), CInt(&H44D2), &HAE, &H68, &HFC, &H4C, &H14, &H8A, &H63, &H54)
IID_IMFImageSharingEngine = iid
End Function
Public Function IID_IMFImageSharingEngineClassFactory() As UUID
'{1FC55727-A7FB-4FC8-83AE-8AF024990AF1}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1FC55727, CInt(&HA7FB), CInt(&H4FC8), &H83, &HAE, &H8A, &HF0, &H24, &H99, &H0A, &HF1)
IID_IMFImageSharingEngineClassFactory = iid
End Function
Public Function IID_IPlayToControl() As UUID
'{607574EB-F4B6-45C1-B08C-CB715122901D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H607574EB, CInt(&HF4B6), CInt(&H45C1), &HB0, &H8C, &HCB, &H71, &H51, &H22, &H90, &H1D)
IID_IPlayToControl = iid
End Function
Public Function IID_IPlayToControlWithCapabilities() As UUID
'{AA9DD80F-C50A-4220-91C1-332287F82A34}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HAA9DD80F, CInt(&HC50A), CInt(&H4220), &H91, &HC1, &H33, &H22, &H87, &HF8, &H2A, &H34)
IID_IPlayToControlWithCapabilities = iid
End Function
Public Function IID_IPlayToSourceClassFactory() As UUID
'{842B32A3-9B9B-4D1C-B3F3-49193248A554}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H842B32A3, CInt(&H9B9B), CInt(&H4D1C), &HB3, &HF3, &H49, &H19, &H32, &H48, &HA5, &H54)
IID_IPlayToSourceClassFactory = iid
End Function
Public Function IID_IMFSpatialAudioObjectBuffer() As UUID
'{d396ec8c-605e-4249-978d-72ad1c312872}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hd396ec8c, CInt(&H605e), CInt(&H4249), &H97, &H8d, &H72, &Had, &H1c, &H31, &H28, &H72)
IID_IMFSpatialAudioObjectBuffer = iid
End Function
Public Function IID_IMFSpatialAudioSample() As UUID
'{abf28a9B-3393-4290-ba79-5ffc46d986b2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Habf28a9B, CInt(&H3393), CInt(&H4290), &Hba, &H79, &H5f, &Hfc, &H46, &Hd9, &H86, &Hb2)
IID_IMFSpatialAudioSample = iid
End Function
Public Function IID_IMFVirtualCamera() As UUID
'{1C08A864-EF6C-4C75-AF59-5F2D68DA9563}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1C08A864, CInt(&HEF6C), CInt(&H4C75), &HAF, &H59, &H5F, &H2D, &H68, &HDA, &H95, &H63)
IID_IMFVirtualCamera = iid
End Function
Public Function IID_IMFMuxStreamAttributesManager() As UUID
'{CE8BD576-E440-43B3-BE34-1E53F565F7E8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HCE8BD576, CInt(&HE440), CInt(&H43B3), &HBE, &H34, &H1E, &H53, &HF5, &H65, &HF7, &HE8)
IID_IMFMuxStreamAttributesManager = iid
End Function
Public Function IID_IMFMuxStreamMediaTypeManager() As UUID
'{505A2C72-42F7-4690-AEAB-8F513D0FFDB8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H505A2C72, CInt(&H42F7), CInt(&H4690), &HAE, &HAB, &H8F, &H51, &H3D, &H0F, &HFD, &HB8)
IID_IMFMuxStreamMediaTypeManager = iid
End Function
Public Function IID_IMFMuxStreamSampleManager() As UUID
'{74ABBC19-B1CC-4E41-BB8B-9D9B86A8F6CA}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H74ABBC19, CInt(&HB1CC), CInt(&H4E41), &HBB, &H8B, &H9D, &H9B, &H86, &HA8, &HF6, &HCA)
IID_IMFMuxStreamSampleManager = iid
End Function
Public Function IID_IMFSecureBuffer() As UUID
'{C1209904-E584-4752-A2D6-7F21693F8B21}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC1209904, CInt(&HE584), CInt(&H4752), &HA2, &HD6, &H7F, &H21, &H69, &H3F, &H8B, &H21)
IID_IMFSecureBuffer = iid
End Function
Public Function IID_IMFNetCrossOriginSupport() As UUID
'{bc2b7d44-a72d-49d5-8376-1480dee58b22}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hbc2b7d44, CInt(&Ha72d), CInt(&H49d5), &H83, &H76, &H14, &H80, &Hde, &He5, &H8b, &H22)
IID_IMFNetCrossOriginSupport = iid
End Function
Public Function IID_IMFHttpDownloadRequest() As UUID
'{F779FDDF-26E7-4270-8A8B-B983D1859DE0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF779FDDF, CInt(&H26E7), CInt(&H4270), &H8A, &H8B, &HB9, &H83, &HD1, &H85, &H9D, &HE0)
IID_IMFHttpDownloadRequest = iid
End Function
Public Function IID_IMFHttpDownloadSession() As UUID
'{71FA9A2C-53CE-4662-A132-1A7E8CBF62DB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H71FA9A2C, CInt(&H53CE), CInt(&H4662), &HA1, &H32, &H1A, &H7E, &H8C, &HBF, &H62, &HDB)
IID_IMFHttpDownloadSession = iid
End Function
Public Function IID_IMFHttpDownloadSessionProvider() As UUID
'{1B4CF4B9-3A16-4115-839D-03CC5C99DF01}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1B4CF4B9, CInt(&H3A16), CInt(&H4115), &H83, &H9D, &H03, &HCC, &H5C, &H99, &HDF, &H01)
IID_IMFHttpDownloadSessionProvider = iid
End Function
Public Function IID_IMFMediaSource2() As UUID
'{FBB03414-D13B-4786-8319-5AC51FC0A136}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFBB03414, CInt(&HD13B), CInt(&H4786), &H83, &H19, &H5A, &HC5, &H1F, &HC0, &HA1, &H36)
IID_IMFMediaSource2 = iid
End Function
Public Function IID_IMFMediaStream2() As UUID
'{C5BC37D6-75C7-46A1-A132-81B5F723C20F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC5BC37D6, CInt(&H75C7), CInt(&H46A1), &HA1, &H32, &H81, &HB5, &HF7, &H23, &HC2, &H0F)
IID_IMFMediaStream2 = iid
End Function
Public Function IID_IMFSensorDevice() As UUID
'{FB9F48F2-2A18-4E28-9730-786F30F04DC4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFB9F48F2, CInt(&H2A18), CInt(&H4E28), &H97, &H30, &H78, &H6F, &H30, &HF0, &H4D, &HC4)
IID_IMFSensorDevice = iid
End Function
Public Function IID_IMFSensorGroup() As UUID
'{4110243A-9757-461F-89F1-F22345BCAB4E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4110243A, CInt(&H9757), CInt(&H461F), &H89, &HF1, &HF2, &H23, &H45, &HBC, &HAB, &H4E)
IID_IMFSensorGroup = iid
End Function
Public Function IID_IMFSensorStream() As UUID
'{E9A42171-C56E-498A-8B39-EDA5A070B7FC}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE9A42171, CInt(&HC56E), CInt(&H498A), &H8B, &H39, &HED, &HA5, &HA0, &H70, &HB7, &HFC)
IID_IMFSensorStream = iid
End Function
Public Function IID_IMFSensorTransformFactory() As UUID
'{EED9C2EE-66B4-4F18-A697-AC7D3960215C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEED9C2EE, CInt(&H66B4), CInt(&H4F18), &HA6, &H97, &HAC, &H7D, &H39, &H60, &H21, &H5C)
IID_IMFSensorTransformFactory = iid
End Function
Public Function IID_IMFSensorProfile() As UUID
'{22F765D1-8DAB-4107-846D-56BAF72215E7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H22F765D1, CInt(&H8DAB), CInt(&H4107), &H84, &H6D, &H56, &HBA, &HF7, &H22, &H15, &HE7)
IID_IMFSensorProfile = iid
End Function
Public Function IID_IMFSensorProfileCollection() As UUID
'{C95EA55B-0187-48BE-9353-8D2507662351}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC95EA55B, CInt(&H0187), CInt(&H48BE), &H93, &H53, &H8D, &H25, &H07, &H66, &H23, &H51)
IID_IMFSensorProfileCollection = iid
End Function
Public Function IID_IMFSensorProcessActivity() As UUID
'{39DC7F4A-B141-4719-813C-A7F46162A2B8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H39DC7F4A, CInt(&HB141), CInt(&H4719), &H81, &H3C, &HA7, &HF4, &H61, &H62, &HA2, &HB8)
IID_IMFSensorProcessActivity = iid
End Function
Public Function IID_IMFSensorActivityReport() As UUID
'{3E8C4BE1-A8C2-4528-90DE-2851BDE5FEAD}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3E8C4BE1, CInt(&HA8C2), CInt(&H4528), &H90, &HDE, &H28, &H51, &HBD, &HE5, &HFE, &HAD)
IID_IMFSensorActivityReport = iid
End Function
Public Function IID_IMFSensorActivitiesReport() As UUID
'{683F7A5E-4A19-43CD-B1A9-DBF4AB3F7777}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H683F7A5E, CInt(&H4A19), CInt(&H43CD), &HB1, &HA9, &HDB, &HF4, &HAB, &H3F, &H77, &H77)
IID_IMFSensorActivitiesReport = iid
End Function
Public Function IID_IMFSensorActivitiesReportCallback() As UUID
'{DE5072EE-DBE3-46DC-8A87-B6F631194751}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDE5072EE, CInt(&HDBE3), CInt(&H46DC), &H8A, &H87, &HB6, &HF6, &H31, &H19, &H47, &H51)
IID_IMFSensorActivitiesReportCallback = iid
End Function
Public Function IID_IMFSensorActivityMonitor() As UUID
'{D0CEF145-B3F4-4340-A2E5-7A5080CA05CB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD0CEF145, CInt(&HB3F4), CInt(&H4340), &HA2, &HE5, &H7A, &H50, &H80, &HCA, &H05, &HCB)
IID_IMFSensorActivityMonitor = iid
End Function
Public Function IID_IMFExtendedCameraIntrinsicModel() As UUID
'{5C595E64-4630-4231-855A-12842F733245}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5C595E64, CInt(&H4630), CInt(&H4231), &H85, &H5A, &H12, &H84, &H2F, &H73, &H32, &H45)
IID_IMFExtendedCameraIntrinsicModel = iid
End Function
Public Function IID_IMFExtendedCameraIntrinsicsDistortionModel6KT() As UUID
'{74C2653B-5F55-4EB1-9F0F-18B8F68B7D3D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H74C2653B, CInt(&H5F55), CInt(&H4EB1), &H9F, &H0F, &H18, &HB8, &HF6, &H8B, &H7D, &H3D)
IID_IMFExtendedCameraIntrinsicsDistortionModel6KT = iid
End Function
Public Function IID_IMFExtendedCameraIntrinsicsDistortionModelArcTan() As UUID
'{812D5F95-B572-45DC-BAFC-AE24199DDDA8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H812D5F95, CInt(&HB572), CInt(&H45DC), &HBA, &HFC, &HAE, &H24, &H19, &H9D, &HDD, &HA8)
IID_IMFExtendedCameraIntrinsicsDistortionModelArcTan = iid
End Function
Public Function IID_IMFExtendedCameraIntrinsics() As UUID
'{687F6DAC-6987-4750-A16A-734D1E7A10FE}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H687F6DAC, CInt(&H6987), CInt(&H4750), &HA1, &H6A, &H73, &H4D, &H1E, &H7A, &H10, &HFE)
IID_IMFExtendedCameraIntrinsics = iid
End Function
Public Function IID_IMFExtendedCameraControl() As UUID
'{38E33520-FCA1-4845-A27A-68B7C6AB3789}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H38E33520, CInt(&HFCA1), CInt(&H4845), &HA2, &H7A, &H68, &HB7, &HC6, &HAB, &H37, &H89)
IID_IMFExtendedCameraControl = iid
End Function
Public Function IID_IMFExtendedCameraController() As UUID
'{B91EBFEE-CA03-4AF4-8A82-A31752F4A0FC}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB91EBFEE, CInt(&HCA03), CInt(&H4AF4), &H8A, &H82, &HA3, &H17, &H52, &HF4, &HA0, &HFC)
IID_IMFExtendedCameraController = iid
End Function
Public Function IID_IMFRelativePanelReport() As UUID
'{F25362EA-2C0E-447F-81E2-755914CDC0C3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF25362EA, CInt(&H2C0E), CInt(&H447F), &H81, &HE2, &H75, &H59, &H14, &HCD, &HC0, &HC3)
IID_IMFRelativePanelReport = iid
End Function
Public Function IID_IMFRelativePanelWatcher() As UUID
'{421AF7F6-573E-4AD0-8FDA-2E57CEDB18C6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H421AF7F6, CInt(&H573E), CInt(&H4AD0), &H8F, &HDA, &H2E, &H57, &HCE, &HDB, &H18, &HC6)
IID_IMFRelativePanelWatcher = iid
End Function
Public Function IID_IMFVideoCaptureSampleAllocator() As UUID
'{725B77C7-CA9F-4FE5-9D72-9946BF9B3C70}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H725B77C7, CInt(&HCA9F), CInt(&H4FE5), &H9D, &H72, &H99, &H46, &HBF, &H9B, &H3C, &H70)
IID_IMFVideoCaptureSampleAllocator = iid
End Function
Public Function IID_IMFSampleAllocatorControl() As UUID
'{DA62B958-3A38-4A97-BD27-149C640C0771}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDA62B958, CInt(&H3A38), CInt(&H4A97), &HBD, &H27, &H14, &H9C, &H64, &H0C, &H07, &H71)
IID_IMFSampleAllocatorControl = iid
End Function
Public Function IID_IMFCameraOcclusionStateReport() As UUID
'{1640B2CF-74DA-4462-A43B-B76D3BDC1434}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1640B2CF, CInt(&H74DA), CInt(&H4462), &HA4, &H3B, &HB7, &H6D, &H3B, &HDC, &H14, &H34)
IID_IMFCameraOcclusionStateReport = iid
End Function
Public Function IID_IMFCameraOcclusionStateReportCallback() As UUID
'{6E5841C7-3889-4019-9035-783FB19B5948}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6E5841C7, CInt(&H3889), CInt(&H4019), &H90, &H35, &H78, &H3F, &HB1, &H9B, &H59, &H48)
IID_IMFCameraOcclusionStateReportCallback = iid
End Function
Public Function IID_IMFCameraOcclusionStateMonitor() As UUID
'{CC692F46-C697-47E2-A72D-7B064617749B}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HCC692F46, CInt(&HC697), CInt(&H47E2), &HA7, &H2D, &H7B, &H06, &H46, &H17, &H74, &H9B)
IID_IMFCameraOcclusionStateMonitor = iid
End Function
Public Function IID_IMFCameraControlNotify() As UUID
'{E8F2540D-558A-4449-8B64-4863467A9FE8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE8F2540D, CInt(&H558A), CInt(&H4449), &H8B, &H64, &H48, &H63, &H46, &H7A, &H9F, &HE8)
IID_IMFCameraControlNotify = iid
End Function
Public Function IID_IMFCameraControlMonitor() As UUID
'{4D46F2C9-28BA-4970-8C7B-1F0C9D80AF69}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4D46F2C9, CInt(&H28BA), CInt(&H4970), &H8C, &H7B, &H1F, &H0C, &H9D, &H80, &HAF, &H69)
IID_IMFCameraControlMonitor = iid
End Function
Public Function IID_IMFCameraControlDefaults() As UUID
'{75510662-B034-48F4-88A7-8DE61DAA4AF9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H75510662, CInt(&HB034), CInt(&H48F4), &H88, &HA7, &H8D, &HE6, &H1D, &HAA, &H4A, &HF9)
IID_IMFCameraControlDefaults = iid
End Function
Public Function IID_IMFCameraControlDefaultsCollection() As UUID
'{92D43D0F-54A8-4BAE-96DA-356D259A5C26}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H92D43D0F, CInt(&H54A8), CInt(&H4BAE), &H96, &HDA, &H35, &H6D, &H25, &H9A, &H5C, &H26)
IID_IMFCameraControlDefaultsCollection = iid
End Function
Public Function IID_IMFCameraConfigurationManager() As UUID
'{A624F617-4704-4206-8A6D-EBDA4A093985}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA624F617, CInt(&H4704), CInt(&H4206), &H8A, &H6D, &HEB, &HDA, &H4A, &H09, &H39, &H85)
IID_IMFCameraConfigurationManager = iid
End Function
Public Function IID_IMFASFContentInfo() As UUID
'{B1DCA5CD-D5DA-4451-8E9E-DB5C59914EAD}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB1DCA5CD, CInt(&HD5DA), CInt(&H4451), &H8E, &H9E, &HDB, &H5C, &H59, &H91, &H4E, &HAD)
IID_IMFASFContentInfo = iid
End Function
Public Function IID_IMFASFProfile() As UUID
'{D267BF6A-028B-4e0d-903D-43F0EF82D0D4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD267BF6A, CInt(&H028B), CInt(&H4e0d), &H90, &H3D, &H43, &HF0, &HEF, &H82, &HD0, &HD4)
IID_IMFASFProfile = iid
End Function
Public Function IID_IMFASFStreamConfig() As UUID
'{9E8AE8D2-DBBD-4200-9ACA-06E6DF484913}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9E8AE8D2, CInt(&HDBBD), CInt(&H4200), &H9A, &HCA, &H06, &HE6, &HDF, &H48, &H49, &H13)
IID_IMFASFStreamConfig = iid
End Function
Public Function IID_IMFASFMutualExclusion() As UUID
'{12558291-E399-11D5-BC2A-00B0D0F3F4AB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H12558291, CInt(&HE399), CInt(&H11D5), &HBC, &H2A, &H00, &HB0, &HD0, &HF3, &HF4, &HAB)
IID_IMFASFMutualExclusion = iid
End Function
Public Function IID_IMFASFStreamPrioritization() As UUID
'{699bdc27-bbaf-49ff-8e38-9c39c9b5e088}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H699bdc27, CInt(&Hbbaf), CInt(&H49ff), &H8e, &H38, &H9c, &H39, &Hc9, &Hb5, &He0, &H88)
IID_IMFASFStreamPrioritization = iid
End Function
Public Function IID_IMFASFIndexer() As UUID
'{53590F48-DC3B-4297-813F-787761AD7B3E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H53590F48, CInt(&HDC3B), CInt(&H4297), &H81, &H3F, &H78, &H77, &H61, &HAD, &H7B, &H3E)
IID_IMFASFIndexer = iid
End Function
Public Function IID_IMFASFSplitter() As UUID
'{12558295-E399-11D5-BC2A-00B0D0F3F4AB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H12558295, CInt(&HE399), CInt(&H11D5), &HBC, &H2A, &H00, &HB0, &HD0, &HF3, &HF4, &HAB)
IID_IMFASFSplitter = iid
End Function
Public Function IID_IMFASFMultiplexer() As UUID
'{57BDD80A-9B38-4838-B737-C58F670D7D4F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H57BDD80A, CInt(&H9B38), CInt(&H4838), &HB7, &H37, &HC5, &H8F, &H67, &H0D, &H7D, &H4F)
IID_IMFASFMultiplexer = iid
End Function
Public Function IID_IMFASFStreamSelector() As UUID
'{d01bad4a-4fa0-4a60-9349-c27e62da9d41}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hd01bad4a, CInt(&H4fa0), CInt(&H4a60), &H93, &H49, &Hc2, &H7e, &H62, &Hda, &H9d, &H41)
IID_IMFASFStreamSelector = iid
End Function
Public Function IID_IMFDRMNetHelper() As UUID
'{3D1FF0EA-679A-4190-8D46-7FA69E8C7E15}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3D1FF0EA, CInt(&H679A), CInt(&H4190), &H8D, &H46, &H7F, &HA6, &H9E, &H8C, &H7E, &H15)
IID_IMFDRMNetHelper = iid
End Function



Public Function MF_WVC1_PROG_SINGLE_SLICE_CONTENT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H67EC2559, &HF2F, &H4420, &HA4, &HDD, &H2F, &H8E, &HE7, &HA5, &H73, &H8B)
MF_WVC1_PROG_SINGLE_SLICE_CONTENT = iid
End Function
Public Function MF_PROGRESSIVE_CODING_CONTENT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8F020EEA, &H1508, &H471F, &H9D, &HA6, &H50, &H7D, &H7C, &HFA, &H40, &HDB)
MF_PROGRESSIVE_CODING_CONTENT = iid
End Function
Public Function MF_NALU_LENGTH_SET() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA7911D53, &H12A4, &H4965, &HAE, &H70, &H6E, &HAD, &HD6, &HFF, &H5, &H51)
MF_NALU_LENGTH_SET = iid
End Function
Public Function MF_NALU_LENGTH_INFORMATION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H19124E7C, &HAD4B, &H465F, &HBB, &H18, &H20, &H18, &H62, &H87, &HB6, &HAF)
MF_NALU_LENGTH_INFORMATION = iid
End Function
Public Function MF_USER_DATA_PAYLOAD() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD1D4985D, &HDC92, &H457A, &HB3, &HA0, &H65, &H1A, &H33, &HA3, &H10, &H47)
MF_USER_DATA_PAYLOAD = iid
End Function
Public Function MF_MPEG4SINK_SPSPPS_PASSTHROUGH() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5601A134, &H2005, &H4AD2, &HB3, &H7D, &H22, &HA6, &HC5, &H54, &HDE, &HB2)
MF_MPEG4SINK_SPSPPS_PASSTHROUGH = iid
End Function
Public Function MF_MPEG4SINK_MOOV_BEFORE_MDAT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF672E3AC, &HE1E6, &H4F10, &HB5, &HEC, &H5F, &H3B, &H30, &H82, &H88, &H16)
MF_MPEG4SINK_MOOV_BEFORE_MDAT = iid
End Function
Public Function MF_SESSION_TOPOLOADER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1E83D482, &H1F1C, &H4571, &H84, &H5, &H88, &HF4, &HB2, &H18, &H1F, &H71)
MF_SESSION_TOPOLOADER = iid
End Function
Public Function MF_SESSION_GLOBAL_TIME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1E83D482, &H1F1C, &H4571, &H84, &H5, &H88, &HF4, &HB2, &H18, &H1F, &H72)
MF_SESSION_GLOBAL_TIME = iid
End Function
Public Function MF_SESSION_QUALITY_MANAGER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1E83D482, &H1F1C, &H4571, &H84, &H5, &H88, &HF4, &HB2, &H18, &H1F, &H73)
MF_SESSION_QUALITY_MANAGER = iid
End Function
Public Function MF_SESSION_CONTENT_PROTECTION_MANAGER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1E83D482, &H1F1C, &H4571, &H84, &H5, &H88, &HF4, &HB2, &H18, &H1F, &H74)
MF_SESSION_CONTENT_PROTECTION_MANAGER = iid
End Function
Public Function MF_SESSION_SERVER_CONTEXT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAFE5B291, &H50FA, &H46E8, &HB9, &HBE, &HC, &HC, &H3C, &HE4, &HB3, &HA5)
MF_SESSION_SERVER_CONTEXT = iid
End Function
Public Function MF_SESSION_REMOTE_SOURCE_MODE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF4033EF4, &H9BB3, &H4378, &H94, &H1F, &H85, &HA0, &H85, &H6B, &HC2, &H44)
MF_SESSION_REMOTE_SOURCE_MODE = iid
End Function
Public Function MF_SESSION_APPROX_EVENT_OCCURRENCE_TIME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H190E852F, &H6238, &H42D1, &HB5, &HAF, &H69, &HEA, &H33, &H8E, &HF8, &H50)
MF_SESSION_APPROX_EVENT_OCCURRENCE_TIME = iid
End Function
Public Function MF_PMP_SERVER_CONTEXT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2F00C910, &HD2CF, &H4278, &H8B, &H6A, &HD0, &H77, &HFA, &HC3, &HA2, &H5F)
MF_PMP_SERVER_CONTEXT = iid
End Function



Public Function MFPKEY_SourceOpenMonitor() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H74D4637, &HB5AE, &H465D, &HAF, &H17, &H1A, &H53, &H8D, &H28, &H59, &HDD, &H2)
End Function


' Type: VT_BOOL
' When this is set to VARIANT_TRUE, if an ASF Media Source is created,
' it will perform all seek operations approximately (and more quickly)
Public Function MFPKEY_ASFMediaSource_ApproxSeek() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &HB4CD270F, &H244D, &H4969, &HBB, &H92, &H3F, &HF, &HB8, &H31, &H6F, &H10, &H1)
MFPKEY_ASFMediaSource_ApproxSeek = pk
End Function

' Type: VT_BOOL
' When this is set to VARIANT_TRUE, if an ASF Media Source is created,
' it will perform iterative seek if there is  no index
Public Function MFPKEY_ASFMediaSource_IterativeSeekIfNoIndex() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H170B65DC, &H4A4E, &H407A, &HAC, &H22, &H57, &H7F, &H50, &HE4, &HA3, &H7C, &H1)
MFPKEY_ASFMediaSource_IterativeSeekIfNoIndex = pk
End Function
' Type: VT_UINT32
' Only valid when MFPKEY_ASFMediaSource_IterativeSeekIfNoIndex is set to TRUE
' The count is any integer [1, 10]
' If this value is not set, the default value 5 is used.
Public Function MFPKEY_ASFMediaSource_IterativeSeek_Max_Count() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H170B65DC, &H4A4E, &H407A, &HAC, &H22, &H57, &H7F, &H50, &HE4, &HA3, &H7C, &H2)
MFPKEY_ASFMediaSource_IterativeSeek_Max_Count = pk
End Function
' Type: VT_UINT32
' Only valid when MFPKEY_ASFMediaSource_IterativeSeekIfNoIndex is set to TRUE
' the tolerance zone is the difference that allowed between the real seek time and preferred seek time.
' Keyframe distance is recommended to use.
' If this value is not set, the default value 8000 millisecond is used.
Public Function MFPKEY_ASFMediaSource_IterativeSeek_Tolerance_In_MilliSecond() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H170B65DC, &H4A4E, &H407A, &HAC, &H22, &H57, &H7F, &H50, &HE4, &HA3, &H7C, &H3)
MFPKEY_ASFMediaSource_IterativeSeek_Tolerance_In_MilliSecond = pk
End Function
'
' DLNA Profile ID - needed for media sharing.
'
' {CFA31B45-525D-4998-BB44-3F7D81542FA4}
Public Function MFPKEY_Content_DLNA_Profile_ID() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &HCFA31B45, &H525D, &H4998, &HBB, &H44, &H3F, &H7D, &H81, &H54, &H2F, &HA4, &H1)
MFPKEY_Content_DLNA_Profile_ID = pk
End Function
' Type: VT_BOOL
' When this is set to VARIANT_TRUE, the media source is requested to disable any read-ahead.
' This can be a useful performance optimization to limit disk read when a media source will
' only be instantiated for limited tasks, such as reading video thumbnail data.
' Not all sources will support this feature.
' {26366C14-C5BF-4c76-887B-9F1754DB5F09}
Public Function MFPKEY_MediaSource_DisableReadAhead() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H26366C14, &HC5BF, &H4C76, &H88, &H7B, &H9F, &H17, &H54, &HDB, &H5F, &H9, &H1)
MFPKEY_MediaSource_DisableReadAhead = pk
End Function
' Type: VT_UINT32
' Sets the SBE mode.
' 0: default is to use the automatic stream mapping in the crossbar to the output
' 1: Crossbar output multiple streams mapped to the output
' 2: Crossbar mode where the application has to map the streams to the output (selection of the audio stream possible)
' {3FAE10BB-F859-4192-B562-1868D3DA3A02}
Public Function MFPKEY_SBESourceMode() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H3FAE10BB, &HF859, &H4192, &HB5, &H62, &H18, &H68, &HD3, &HDA, &H3A, &H2, &H1)
MFPKEY_SBESourceMode = pk
End Function
' Type: VT_UNKNOWN
' Defines an IMFAsyncCallback implementation that will create the a PMP session on behalf of the bytestream.
' {28bb4de2-26a2-4870-b720-d26bbeb14942}
Public Function MFPKEY_PMP_Creation_Callback() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H28BB4DE2, &H26A2, &H4870, &HB7, &H20, &HD2, &H6B, &HBE, &HB1, &H49, &H42, &H1)
MFPKEY_PMP_Creation_Callback = pk
End Function
' Type: VT_BOOL
' When set and TRUE, specifies that the HTTP caching bytestream should use URLMon to download
' content.  By default, WinHTTP will be used.
' {eda8afdf-c171-417f-8d17-2e0918303292}, 1
Public Function MFPKEY_HTTP_ByteStream_Enable_Urlmon() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &HEDA8AFDF, &HC171, &H417F, &H8D, &H17, &H2E, &H9, &H18, &H30, &H32, &H92, &H1)
MFPKEY_HTTP_ByteStream_Enable_Urlmon = pk
End Function
' Type: VT_UI4
' When MFPKEY_HTTP_ByteStream_Enable_Urlmon is turned on, this value specifies the urlmon
' bind flags as defined in the BINDF enumeration.  The default value is BINDF_ASYNCHRONOUS |
' BINDF_ASYNCSTORAGE | BINDF_NOWRITECACHE | BINDF_PULLDATA | BINDF_RESYNCHRONIZE
' {eda8afdf-c171-417f-8d17-2e0918303292}, 2
Public Function MFPKEY_HTTP_ByteStream_Urlmon_Bind_Flags() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &HEDA8AFDF, &HC171, &H417F, &H8D, &H17, &H2E, &H9, &H18, &H30, &H32, &H92, &H2)
MFPKEY_HTTP_ByteStream_Urlmon_Bind_Flags = pk
End Function
' Type: VT_VECTOR | VT_UI1
' When MFPKEY_HTTP_ByteStream_Enable_Urlmon is turned on, this value specifies the root security
' ID for urlmon.  By default, this value is null and no root security ID will be provided to
' urlmon.
' {eda8afdf-c171-417f-8d17-2e0918303292}, 3
Public Function MFPKEY_HTTP_ByteStream_Urlmon_Security_Id() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &HEDA8AFDF, &HC171, &H417F, &H8D, &H17, &H2E, &H9, &H18, &H30, &H32, &H92, &H3)
MFPKEY_HTTP_ByteStream_Urlmon_Security_Id = pk
End Function
' Type: VT_UNKNOWN
' When MFPKEY_HTTP_ByteStream_Enable_Urlmon is turned on, this value specifies an
' implementation of IWindowForBindingUI that can be used to obtain an HWND for urlmon
' UI.  By default, urlmon UI will be disabled.
' {eda8afdf-c171-417f-8d17-2e0918303292}, 4
Public Function MFPKEY_HTTP_ByteStream_Urlmon_Window() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &HEDA8AFDF, &HC171, &H417F, &H8D, &H17, &H2E, &H9, &H18, &H30, &H32, &H92, &H4)
MFPKEY_HTTP_ByteStream_Urlmon_Window = pk
End Function
' Type: VT_UNKNOWN
' When MFPKEY_HTTP_ByteStream_Enable_Urlmon is turned on, this value specifies an
' implementation of IServiceProvider that can be used to obtain services for the
' urlmon protocol handler.
' {eda8afdf-c171-417f-8d17-2e0918303292}, 5
Public Function MFPKEY_HTTP_ByteStream_Urlmon_Callback_QueryService() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &HEDA8AFDF, &HC171, &H417F, &H8D, &H17, &H2E, &H9, &H18, &H30, &H32, &H92, &H5)
MFPKEY_HTTP_ByteStream_Urlmon_Callback_QueryService = pk
End Function
' Type: VT_CLSID
' Set to the GUID that identifies the media protection system to use for the content.
' {636B271D-DDC7-49E9-A6C6-47385962E5BD}
Public Function MFPKEY_MediaProtectionSystemId() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H636B271D, &HDDC7, &H49E9, &HA6, &HC6, &H47, &H38, &H59, &H62, &HE5, &HBD, &H1)
MFPKEY_MediaProtectionSystemId = pk
End Function

' Type: VT_BLOB
' BLOB containing the context to use when initializing a media protection system's trusted input module.
' {636B271D-DDC7-49E9-A6C6-47385962E5BD}
Public Function MFPKEY_MediaProtectionSystemContext() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H636B271D, &HDDC7, &H49E9, &HA6, &HC6, &H47, &H38, &H59, &H62, &HE5, &HBD, &H2)
MFPKEY_MediaProtectionSystemContext = pk
End Function
' Type: VT_UNKNOWN
' Set to an IPropertySet that defines the mapping from Property system id to property system activation id.
' {636B271D-DDC7-49E9-A6C6-47385962E5BD}
Public Function MFPKEY_MediaProtectionSystemIdMapping() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H636B271D, &HDDC7, &H49E9, &HA6, &HC6, &H47, &H38, &H59, &H62, &HE5, &HBD, &H3)
MFPKEY_MediaProtectionSystemIdMapping = pk
End Function
' Type: VT_CLSID
' Set to the GUID that identifies the protection system in the container.
' {42AF3D7C-00CF-4a0f-81F0-ADF524A5A5B5}
Public Function MFPKEY_MediaProtectionContainerGuid() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H42AF3D7C, &HCF, &H4A0F, &H81, &HF0, &HAD, &HF5, &H24, &HA5, &HA5, &HB5, &H1)
MFPKEY_MediaProtectionContainerGuid = pk
End Function
' Type: VT_UNKNOWN
' Set to an IPropertySet that defines a mapping from track Type to IRandomAccessStream containing the DRM context
' {4454B092-D3DA-49b0-8452-6850C7DB764D}
Public Function MFPKEY_MediaProtectionSystemContextsPerTrack() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H4454B092, &HD3DA, &H49B0, &H84, &H52, &H68, &H50, &HC7, &HDB, &H76, &H4D, &H3)
MFPKEY_MediaProtectionSystemContextsPerTrack = pk
End Function
' Type: VT_BOOL
' When set and TRUE, specifies that the URL is being downloaded to disk instead of being played.
' {817f11b7-a982-46ec-a449-ef58aed53ca8}
Public Function MFPKEY_HTTP_ByteStream_Download_Mode() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H817F11B7, &HA982, &H46EC, &HA4, &H49, &HEF, &H58, &HAE, &HD5, &H3C, &HA8, &H1)
MFPKEY_HTTP_ByteStream_Download_Mode = pk
End Function
' TYPE: VT_UI4
' This property specifies how the HTTP Byte Stream should cache downloaded data.
' A value of 1 means that the downloaded data should be cached to disk.
' A value of 2 means that the downloaded data should be cached in memory.
' A value of 0 is the default, and means that the Byte Stream is free to choose the caching mode
' based on heuristics.
' {86a2403e-c78b-44d7-8bc8-ff7258117508}, 1
Public Function MFPKEY_HTTP_ByteStream_Caching_Mode() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H86A2403E, &HC78B, &H44D7, &H8B, &HC8, &HFF, &H72, &H58, &H11, &H75, &H8, &H1)
MFPKEY_HTTP_ByteStream_Caching_Mode = pk
End Function
' TYPE: VT_UI8
' This property specifies an upper limit on the amount of data, in bytes, that the
' HTTP Byte Stream caches on disk or in memory.
' The Byte Stream may choose a lower limit than the one specified.
' A value of 0 is the default, and means that the Byte Stream is free to limit the cache size
' based on heuristics.
' {86a2403e-c78b-44d7-8bc8-ff7258117508}, 2
Public Function MFPKEY_HTTP_ByteStream_Cache_Limit() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H86A2403E, &HC78B, &H44D7, &H8B, &HC8, &HFF, &H72, &H58, &H11, &H75, &H8, &H2)
MFPKEY_HTTP_ByteStream_Cache_Limit = pk
End Function

Public Function MFPKEY_CLSID() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &Hc57a84c0, &H1a80, &H40a3, &H97, &Hb5, &H92, &H72, &Ha4, &H3, &Hc8, &Hae, &H01)
 MFPKEY_CLSID = pk
End Function
Public Function MFPKEY_CATEGORY() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &Hc57a84c0, &H1a80, &H40a3, &H97, &Hb5, &H92, &H72, &Ha4, &H3, &Hc8, &Hae, &H02)
 MFPKEY_CATEGORY = pk
End Function
Public Function MFPKEY_EXATTRIBUTE_SUPPORTED() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H456fe843, &H3c87, &H40c0, &H94, &H9d, &H14, &H9, &Hc9, &H7d, &Hab, &H2c, &H01)
 MFPKEY_EXATTRIBUTE_SUPPORTED = pk
End Function
Public Function MFPKEY_MULTICHANNEL_CHANNEL_MASK() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H58bdaf8c, &H3224, &H4692, &H86, &Hd0, &H44, &Hd6, &H5c, &H5b, &Hf8, &H2b, &H01)
 MFPKEY_MULTICHANNEL_CHANNEL_MASK = pk
End Function
Public Function MF_EME_INITDATATYPES() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H497d231b, &H4eb9, &H4df0, &Hb4, &H74, &Hb9, &Haf, &Heb, &H0a, &Hdf, &H38, PID_FIRST_USABLE + &H00000001)
 MF_EME_INITDATATYPES = pk
End Function
Public Function MF_EME_DISTINCTIVEID() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H7dc9c4a5, &H12be, &H497e, &H8b, &Hff, &H9b, &H60, &Hb2, &Hdc, &H58, &H45, PID_FIRST_USABLE + &H00000002)
 MF_EME_DISTINCTIVEID = pk
End Function
Public Function MF_EME_PERSISTEDSTATE() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H5d4df6ae, &H9af1, &H4e3d, &H95, &H5b, &H0e, &H4b, &Hd2, &H2f, &Hed, &Hf0, PID_FIRST_USABLE + &H00000003)
 MF_EME_PERSISTEDSTATE = pk
End Function
Public Function MF_EME_AUDIOCAPABILITIES() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H980fbb84, &H297d, &H4ea7, &H89, &H5f, &Hbc, &Hf2, &H8a, &H46, &H28, &H81, PID_FIRST_USABLE + &H00000004)
 MF_EME_AUDIOCAPABILITIES = pk
End Function
Public Function MF_EME_VIDEOCAPABILITIES() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &Hb172f83d, &H30dd, &H4c10, &H80, &H06, &Hed, &H53, &Hda, &H4d, &H3b, &Hdb, PID_FIRST_USABLE + &H00000005)
 MF_EME_VIDEOCAPABILITIES = pk
End Function
Public Function MF_EME_LABEL() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H9eae270e, &Hb2d7, &H4817, &Hb8, &H8f, &H54, &H00, &H99, &Hf2, &Hef, &H4e, PID_FIRST_USABLE + &H00000006)
 MF_EME_LABEL = pk
End Function
Public Function MF_EME_SESSIONTYPES() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H7623384f, &H00f5, &H4376, &H86, &H98, &H34, &H58, &Hdb, &H03, &H0e, &Hd5, PID_FIRST_USABLE + &H00000007)
 MF_EME_SESSIONTYPES = pk
End Function
Public Function MF_EME_ROBUSTNESS() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H9d3d2b9e, &H7023, &H4944, &Ha8, &Hf5, &Hec, &Hca, &H52, &Ha4, &H69, &H90, PID_FIRST_USABLE + &H00000001)
 MF_EME_ROBUSTNESS = pk
End Function
Public Function MF_EME_CONTENTTYPE() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H289fb1fc, &Hd9c4, &H4cc7, &Hb2, &Hbe, &H97, &H2b, &H0e, &H9b, &H28, &H3a, PID_FIRST_USABLE + &H00000002)
 MF_EME_CONTENTTYPE = pk
End Function
Public Function MF_EME_CDM_INPRIVATESTOREPATH() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &Hec305fd9, &H039f, &H4ac8, &H98, &Hda, &He7, &H92, &H1e, &H00, &H6a, &H90, PID_FIRST_USABLE + &H00000001)
 MF_EME_CDM_INPRIVATESTOREPATH = pk
End Function
Public Function MF_EME_CDM_STOREPATH() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &Hf795841e, &H99f9, &H44d7, &Haf, &Hc0, &Hd3, &H09, &Hc0, &H4c, &H94, &Hab, PID_FIRST_USABLE + &H00000002)
 MF_EME_CDM_STOREPATH = pk
End Function
Public Function MF_CONTENTDECRYPTIONMODULE_INPRIVATESTOREPATH() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H730cb3ac, &H51dc, &H49da, &Ha5, &H78, &Hb9, &H53, &H86, &Hb6, &H2a, &Hfe, &H01)
 MF_CONTENTDECRYPTIONMODULE_INPRIVATESTOREPATH = pk
End Function
Public Function MF_CONTENTDECRYPTIONMODULE_STOREPATH() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H77d993b9, &Hba61, &H4bb7, &H92, &Hc6, &H18, &Hc8, &H6a, &H18, &H9c, &H06, &H02)
 MF_CONTENTDECRYPTIONMODULE_STOREPATH = pk
End Function
Public Function MF_CONTENTDECRYPTIONMODULE_PMPSTORECONTEXT() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H6d2a2835, &Hc3a9, &H4681, &H97, &Hf2, &H0a, &Hf5, &H6b, &He9, &H34, &H46, &H03)
 MF_CONTENTDECRYPTIONMODULE_PMPSTORECONTEXT = pk
End Function
Public Function DEVPKEY_DeviceInterface_IsVirtualCamera() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H6EDC630D, &HC2E3, &H43B7, &HB2, &HD1, &H20, &H52, &H5A, &H1A, &HF1, &H20, 3)
 DEVPKEY_DeviceInterface_IsVirtualCamera = pk
End Function
Public Function DEVPKEY_DeviceInterface_IsWindowsCameraEffectAvailable() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H6EDC630D, &HC2E3, &H43B7, &HB2, &HD1, &H20, &H52, &H5A, &H1A, &HF1, &H20, 4)
 DEVPKEY_DeviceInterface_IsWindowsCameraEffectAvailable = pk
End Function
Public Function DEVPKEY_DeviceInterface_VirtualCameraAssociatedCameras() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H6EDC630D, &HC2E3, &H43B7, &HB2, &HD1, &H20, &H52, &H5A, &H1A, &HF1, &H20, 5)
 DEVPKEY_DeviceInterface_VirtualCameraAssociatedCameras = pk
End Function


Public Function MF_TIME_FORMAT_ENTRY_RELATIVE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4399F178, &H46D3, &H4504, &HAF, &HDA, &H20, &HD3, &H2E, &H9B, &HA3, &H60)
MF_TIME_FORMAT_ENTRY_RELATIVE = iid
End Function
Public Function MF_SOURCE_STREAM_SUPPORTS_HW_CONNECTION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA38253AA, &H6314, &H42FD, &HA3, &HCE, &HBB, &H27, &HB6, &H85, &H99, &H46)
MF_SOURCE_STREAM_SUPPORTS_HW_CONNECTION = iid
End Function
Public Function MF_STREAM_SINK_SUPPORTS_HW_CONNECTION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B465CBF, &H597, &H4F9E, &H9F, &H3C, &HB9, &H7E, &HEE, &HF9, &H3, &H59)
MF_STREAM_SINK_SUPPORTS_HW_CONNECTION = iid
End Function
Public Function MF_STREAM_SINK_SUPPORTS_ROTATION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HB3E96280, &HBD05, &H41A5, &H97, &HAD, &H8A, &H7F, &HEE, &H24, &HB9, &H12)
MF_STREAM_SINK_SUPPORTS_ROTATION = iid
End Function
Public Function MF_SINK_VIDEO_PTS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2162BDE7, &H421E, &H4B90, &H9B, &H33, &HE5, &H8F, &HBF, &H1D, &H58, &HB6)
MF_SINK_VIDEO_PTS = iid
End Function
Public Function MF_SINK_VIDEO_NATIVE_WIDTH() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE6D6A707, &H1505, &H4747, &H9B, &H10, &H72, &HD2, &HD1, &H58, &HCB, &H3A)
MF_SINK_VIDEO_NATIVE_WIDTH = iid
End Function
Public Function MF_SINK_VIDEO_NATIVE_HEIGHT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF0CA6705, &H490C, &H43E8, &H94, &H1C, &HC0, &HB3, &H20, &H6B, &H9A, &H65)
MF_SINK_VIDEO_NATIVE_HEIGHT = iid
End Function
Public Function MF_SINK_VIDEO_DISPLAY_ASPECT_RATIO_NUMERATOR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD0F33B22, &HB78A, &H4879, &HB4, &H55, &HF0, &H3E, &HF3, &HFA, &H82, &HCD)
MF_SINK_VIDEO_DISPLAY_ASPECT_RATIO_NUMERATOR = iid
End Function
Public Function MF_SINK_VIDEO_DISPLAY_ASPECT_RATIO_DENOMINATOR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6EA1EB97, &H1FE0, &H4F10, &HA6, &HE4, &H1F, &H4F, &H66, &H15, &H64, &HE0)
MF_SINK_VIDEO_DISPLAY_ASPECT_RATIO_DENOMINATOR = iid
End Function
Public Function MF_BD_MVC_PLANE_OFFSET_METADATA() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H62A654E4, &HB76C, &H4901, &H98, &H23, &H2C, &HB6, &H15, &HD4, &H73, &H18)
MF_BD_MVC_PLANE_OFFSET_METADATA = iid
End Function
Public Function MF_LUMA_KEY_ENABLE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7369820F, &H76DE, &H43CA, &H92, &H84, &H47, &HB8, &HF3, &H7E, &H6, &H49)
MF_LUMA_KEY_ENABLE = iid
End Function
Public Function MF_LUMA_KEY_LOWER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H93D7B8D5, &HB81, &H4715, &HAE, &HA0, &H87, &H25, &H87, &H16, &H21, &HE9)
MF_LUMA_KEY_LOWER = iid
End Function
Public Function MF_LUMA_KEY_UPPER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD09F39BB, &H4602, &H4C31, &HA7, &H6, &HA1, &H21, &H71, &HA5, &H11, &HA)
MF_LUMA_KEY_UPPER = iid
End Function
Public Function MF_USER_EXTENDED_ATTRIBUTES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC02ABAC6, &HFEB2, &H4541, &H92, &H2F, &H92, &HB, &H43, &H70, &H27, &H22)
MF_USER_EXTENDED_ATTRIBUTES = iid
End Function
Public Function MF_INDEPENDENT_STILL_IMAGE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HEA12AF41, &H710, &H42C9, &HA1, &H27, &HDA, &HA3, &HE7, &H84, &H83, &HA5)
MF_INDEPENDENT_STILL_IMAGE = iid
End Function
Public Function MF_TOPOLOGY_PROJECTSTART() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7ED3F802, &H86BB, &H4B3F, &HB7, &HE4, &H7C, &HB4, &H3A, &HFD, &H4B, &H80)
MF_TOPOLOGY_PROJECTSTART = iid
End Function
Public Function MF_TOPOLOGY_PROJECTSTOP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7ED3F803, &H86BB, &H4B3F, &HB7, &HE4, &H7C, &HB4, &H3A, &HFD, &H4B, &H80)
MF_TOPOLOGY_PROJECTSTOP = iid
End Function
Public Function MF_TOPOLOGY_NO_MARKIN_MARKOUT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7ED3F804, &H86BB, &H4B3F, &HB7, &HE4, &H7C, &HB4, &H3A, &HFD, &H4B, &H80)
MF_TOPOLOGY_NO_MARKIN_MARKOUT = iid
End Function
Public Function MF_TOPOLOGY_DXVA_MODE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1E8D34F6, &HF5AB, &H4E23, &HBB, &H88, &H87, &H4A, &HA3, &HA1, &HA7, &H4D)
MF_TOPOLOGY_DXVA_MODE = iid
End Function
Public Function MF_TOPOLOGY_ENABLE_XVP_FOR_PLAYBACK() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1967731F, &HCD78, &H42FC, &HB0, &H26, &H9, &H92, &HA5, &H6E, &H56, &H93)
MF_TOPOLOGY_ENABLE_XVP_FOR_PLAYBACK = iid
End Function
Public Function MF_TOPOLOGY_STATIC_PLAYBACK_OPTIMIZATIONS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HB86CAC42, &H41A6, &H4B79, &H89, &H7A, &H1A, &HB0, &HE5, &H2B, &H4A, &H1B)
MF_TOPOLOGY_STATIC_PLAYBACK_OPTIMIZATIONS = iid
End Function
Public Function MF_TOPOLOGY_PLAYBACK_MAX_DIMS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5715CF19, &H5768, &H44AA, &HAD, &H6E, &H87, &H21, &HF1, &HB0, &HF9, &HBB)
MF_TOPOLOGY_PLAYBACK_MAX_DIMS = iid
End Function
Public Function MF_TOPOLOGY_HARDWARE_MODE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD2D362FD, &H4E4F, &H4191, &HA5, &H79, &HC6, &H18, &HB6, &H67, &H6, &HAF)
MF_TOPOLOGY_HARDWARE_MODE = iid
End Function
Public Function MF_TOPOLOGY_PLAYBACK_FRAMERATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC164737A, &HC2B1, &H4553, &H83, &HBB, &H5A, &H52, &H60, &H72, &H44, &H8F)
MF_TOPOLOGY_PLAYBACK_FRAMERATE = iid
End Function
Public Function MF_TOPOLOGY_DYNAMIC_CHANGE_NOT_ALLOWED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD529950B, &HD484, &H4527, &HA9, &HCD, &HB1, &H90, &H95, &H32, &HB5, &HB0)
MF_TOPOLOGY_DYNAMIC_CHANGE_NOT_ALLOWED = iid
End Function
Public Function MF_TOPOLOGY_ENUMERATE_SOURCE_TYPES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6248C36D, &H5D0B, &H4F40, &HA0, &HBB, &HB0, &HB3, &H5, &HF7, &H76, &H98)
MF_TOPOLOGY_ENUMERATE_SOURCE_TYPES = iid
End Function
Public Function MF_TOPOLOGY_START_TIME_ON_PRESENTATION_SWITCH() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC8CC113F, &H7951, &H4548, &HAA, &HD6, &H9E, &HD6, &H20, &H2E, &H62, &HB3)
MF_TOPOLOGY_START_TIME_ON_PRESENTATION_SWITCH = iid
End Function
Public Function MF_DISABLE_LOCALLY_REGISTERED_PLUGINS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H66B16DA9, &HADD4, &H47E0, &HA1, &H6B, &H5A, &HF1, &HFB, &H48, &H36, &H34)
MF_DISABLE_LOCALLY_REGISTERED_PLUGINS = iid
End Function
Public Function MF_LOCAL_PLUGIN_CONTROL_POLICY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD91B0085, &HC86D, &H4F81, &H88, &H22, &H8C, &H68, &HE1, &HD7, &HFA, &H4)
MF_LOCAL_PLUGIN_CONTROL_POLICY = iid
End Function
Public Function MF_TOPONODE_FLUSH() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCE8, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_FLUSH = iid
End Function
Public Function MF_TOPONODE_DRAIN() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCE9, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_DRAIN = iid
End Function
Public Function MF_TOPONODE_D3DAWARE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCED, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_D3DAWARE = iid
End Function
Public Function MF_TOPOLOGY_RESOLUTION_STATUS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCDE, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPOLOGY_RESOLUTION_STATUS = iid
End Function
Public Function MF_TOPONODE_ERRORCODE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCEE, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_ERRORCODE = iid
End Function
Public Function MF_TOPONODE_CONNECT_METHOD() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCF1, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_CONNECT_METHOD = iid
End Function
Public Function MF_TOPONODE_LOCKED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCF7, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_LOCKED = iid
End Function
Public Function MF_TOPONODE_WORKQUEUE_ID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCF8, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_WORKQUEUE_ID = iid
End Function
Public Function MF_TOPONODE_WORKQUEUE_MMCSS_CLASS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCF9, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_WORKQUEUE_MMCSS_CLASS = iid
End Function
Public Function MF_TOPONODE_DECRYPTOR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCFA, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_DECRYPTOR = iid
End Function
Public Function MF_TOPONODE_DISCARDABLE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCFB, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_DISCARDABLE = iid
End Function
Public Function MF_TOPONODE_ERROR_MAJORTYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCFD, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_ERROR_MAJORTYPE = iid
End Function
Public Function MF_TOPONODE_ERROR_SUBTYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCFE, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_ERROR_SUBTYPE = iid
End Function
Public Function MF_TOPONODE_WORKQUEUE_MMCSS_TASKID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCFF, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_WORKQUEUE_MMCSS_TASKID = iid
End Function
Public Function MF_TOPONODE_WORKQUEUE_MMCSS_PRIORITY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5001F840, &H2816, &H48F4, &H93, &H64, &HAD, &H1E, &HF6, &H61, &HA1, &H23)
MF_TOPONODE_WORKQUEUE_MMCSS_PRIORITY = iid
End Function
Public Function MF_TOPONODE_WORKQUEUE_ITEM_PRIORITY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA1FF99BE, &H5E97, &H4A53, &HB4, &H94, &H56, &H8C, &H64, &H2C, &HF, &HF3)
MF_TOPONODE_WORKQUEUE_ITEM_PRIORITY = iid
End Function
Public Function MF_TOPONODE_MARKIN_HERE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBD00, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_MARKIN_HERE = iid
End Function
Public Function MF_TOPONODE_MARKOUT_HERE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBD01, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_MARKOUT_HERE = iid
End Function
Public Function MF_TOPONODE_DECODER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBD02, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_DECODER = iid
End Function
Public Function MF_TOPONODE_MEDIASTART() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H835C58EA, &HE075, &H4BC7, &HBC, &HBA, &H4D, &HE0, &H0, &HDF, &H9A, &HE6)
MF_TOPONODE_MEDIASTART = iid
End Function
Public Function MF_TOPONODE_MEDIASTOP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H835C58EB, &HE075, &H4BC7, &HBC, &HBA, &H4D, &HE0, &H0, &HDF, &H9A, &HE6)
MF_TOPONODE_MEDIASTOP = iid
End Function
Public Function MF_TOPONODE_SOURCE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H835C58EC, &HE075, &H4BC7, &HBC, &HBA, &H4D, &HE0, &H0, &HDF, &H9A, &HE6)
MF_TOPONODE_SOURCE = iid
End Function
Public Function MF_TOPONODE_PRESENTATION_DESCRIPTOR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H835C58ED, &HE075, &H4BC7, &HBC, &HBA, &H4D, &HE0, &H0, &HDF, &H9A, &HE6)
MF_TOPONODE_PRESENTATION_DESCRIPTOR = iid
End Function
Public Function MF_TOPONODE_STREAM_DESCRIPTOR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H835C58EE, &HE075, &H4BC7, &HBC, &HBA, &H4D, &HE0, &H0, &HDF, &H9A, &HE6)
MF_TOPONODE_STREAM_DESCRIPTOR = iid
End Function
Public Function MF_TOPONODE_SEQUENCE_ELEMENTID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H835C58EF, &HE075, &H4BC7, &HBC, &HBA, &H4D, &HE0, &H0, &HDF, &H9A, &HE6)
MF_TOPONODE_SEQUENCE_ELEMENTID = iid
End Function
Public Function MF_TOPONODE_TRANSFORM_OBJECTID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H88DCC0C9, &H293E, &H4E8B, &H9A, &HEB, &HA, &HD6, &H4C, &HC0, &H16, &HB0)
MF_TOPONODE_TRANSFORM_OBJECTID = iid
End Function
Public Function MF_TOPONODE_STREAMID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H14932F9B, &H9087, &H4BB4, &H84, &H12, &H51, &H67, &H14, &H5C, &HBE, &H4)
MF_TOPONODE_STREAMID = iid
End Function
Public Function MF_TOPONODE_NOSHUTDOWN_ON_REMOVE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H14932F9C, &H9087, &H4BB4, &H84, &H12, &H51, &H67, &H14, &H5C, &HBE, &H4)
MF_TOPONODE_NOSHUTDOWN_ON_REMOVE = iid
End Function
Public Function MF_TOPONODE_RATELESS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H14932F9D, &H9087, &H4BB4, &H84, &H12, &H51, &H67, &H14, &H5C, &HBE, &H4)
MF_TOPONODE_RATELESS = iid
End Function
Public Function MF_TOPONODE_DISABLE_PREROLL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H14932F9E, &H9087, &H4BB4, &H84, &H12, &H51, &H67, &H14, &H5C, &HBE, &H4)
MF_TOPONODE_DISABLE_PREROLL = iid
End Function
Public Function MF_TOPONODE_PRIMARYOUTPUT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6304EF99, &H16B2, &H4EBE, &H9D, &H67, &HE4, &HC5, &H39, &HB3, &HA2, &H59)
MF_TOPONODE_PRIMARYOUTPUT = iid
End Function
Public Function MF_PD_PMPHOST_CONTEXT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6C990D31, &HBB8E, &H477A, &H85, &H98, &HD, &H5D, &H96, &HFC, &HD8, &H8A)
MF_PD_PMPHOST_CONTEXT = iid
End Function
Public Function MF_PD_APP_CONTEXT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6C990D32, &HBB8E, &H477A, &H85, &H98, &HD, &H5D, &H96, &HFC, &HD8, &H8A)
MF_PD_APP_CONTEXT = iid
End Function
Public Function MF_PD_DURATION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6C990D33, &HBB8E, &H477A, &H85, &H98, &HD, &H5D, &H96, &HFC, &HD8, &H8A)
MF_PD_DURATION = iid
End Function
Public Function MF_PD_TOTAL_FILE_SIZE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6C990D34, &HBB8E, &H477A, &H85, &H98, &HD, &H5D, &H96, &HFC, &HD8, &H8A)
MF_PD_TOTAL_FILE_SIZE = iid
End Function
Public Function MF_PD_AUDIO_ENCODING_BITRATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6C990D35, &HBB8E, &H477A, &H85, &H98, &HD, &H5D, &H96, &HFC, &HD8, &H8A)
MF_PD_AUDIO_ENCODING_BITRATE = iid
End Function
Public Function MF_PD_VIDEO_ENCODING_BITRATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6C990D36, &HBB8E, &H477A, &H85, &H98, &HD, &H5D, &H96, &HFC, &HD8, &H8A)
MF_PD_VIDEO_ENCODING_BITRATE = iid
End Function
Public Function MF_PD_MIME_TYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6C990D37, &HBB8E, &H477A, &H85, &H98, &HD, &H5D, &H96, &HFC, &HD8, &H8A)
MF_PD_MIME_TYPE = iid
End Function
Public Function MF_PD_LAST_MODIFIED_TIME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6C990D38, &HBB8E, &H477A, &H85, &H98, &HD, &H5D, &H96, &HFC, &HD8, &H8A)
MF_PD_LAST_MODIFIED_TIME = iid
End Function
Public Function MF_PD_PLAYBACK_ELEMENT_ID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6C990D39, &HBB8E, &H477A, &H85, &H98, &HD, &H5D, &H96, &HFC, &HD8, &H8A)
MF_PD_PLAYBACK_ELEMENT_ID = iid
End Function
Public Function MF_PD_PREFERRED_LANGUAGE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6C990D3A, &HBB8E, &H477A, &H85, &H98, &HD, &H5D, &H96, &HFC, &HD8, &H8A)
MF_PD_PREFERRED_LANGUAGE = iid
End Function
Public Function MF_PD_PLAYBACK_BOUNDARY_TIME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6C990D3B, &HBB8E, &H477A, &H85, &H98, &HD, &H5D, &H96, &HFC, &HD8, &H8A)
MF_PD_PLAYBACK_BOUNDARY_TIME = iid
End Function
Public Function MF_PD_AUDIO_ISVARIABLEBITRATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H33026EE0, &HE387, &H4582, &HAE, &HA, &H34, &HA2, &HAD, &H3B, &HAA, &H18)
MF_PD_AUDIO_ISVARIABLEBITRATE = iid
End Function
Public Function MF_SD_LANGUAGE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAF2180, &HBDC2, &H423C, &HAB, &HCA, &HF5, &H3, &H59, &H3B, &HC1, &H21)
MF_SD_LANGUAGE = iid
End Function
Public Function MF_SD_PROTECTED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAF2181, &HBDC2, &H423C, &HAB, &HCA, &HF5, &H3, &H59, &H3B, &HC1, &H21)
MF_SD_PROTECTED = iid
End Function
Public Function MF_SD_STREAM_NAME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4F1B099D, &HD314, &H41E5, &HA7, &H81, &H7F, &HEF, &HAA, &H4C, &H50, &H1F)
MF_SD_STREAM_NAME = iid
End Function
Public Function MF_SD_MUTUALLY_EXCLUSIVE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H23EF79C, &H388D, &H487F, &HAC, &H17, &H69, &H6C, &HD6, &HE3, &HC6, &HF5)
MF_SD_MUTUALLY_EXCLUSIVE = iid
End Function
Public Function MF_ACTIVATE_CUSTOM_VIDEO_MIXER_CLSID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBA491360, &HBE50, &H451E, &H95, &HAB, &H6D, &H4A, &HCC, &HC7, &HDA, &HD8)
MF_ACTIVATE_CUSTOM_VIDEO_MIXER_CLSID = iid
End Function
Public Function MF_ACTIVATE_CUSTOM_VIDEO_MIXER_ACTIVATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBA491361, &HBE50, &H451E, &H95, &HAB, &H6D, &H4A, &HCC, &HC7, &HDA, &HD8)
MF_ACTIVATE_CUSTOM_VIDEO_MIXER_ACTIVATE = iid
End Function
Public Function MF_ACTIVATE_CUSTOM_VIDEO_MIXER_FLAGS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBA491362, &HBE50, &H451E, &H95, &HAB, &H6D, &H4A, &HCC, &HC7, &HDA, &HD8)
MF_ACTIVATE_CUSTOM_VIDEO_MIXER_FLAGS = iid
End Function
Public Function MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_CLSID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBA491364, &HBE50, &H451E, &H95, &HAB, &H6D, &H4A, &HCC, &HC7, &HDA, &HD8)
MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_CLSID = iid
End Function
Public Function MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_ACTIVATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBA491365, &HBE50, &H451E, &H95, &HAB, &H6D, &H4A, &HCC, &HC7, &HDA, &HD8)
MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_ACTIVATE = iid
End Function
Public Function MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_FLAGS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBA491366, &HBE50, &H451E, &H95, &HAB, &H6D, &H4A, &HCC, &HC7, &HDA, &HD8)
MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_FLAGS = iid
End Function
Public Function MF_ACTIVATE_MFT_LOCKED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC1F6093C, &H7F65, &H4FBD, &H9E, &H39, &H5F, &HAE, &HC3, &HC4, &HFB, &HD7)
MF_ACTIVATE_MFT_LOCKED = iid
End Function
Public Function MF_ACTIVATE_VIDEO_WINDOW() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9A2DBBDD, &HF57E, &H4162, &H82, &HB9, &H68, &H31, &H37, &H76, &H82, &HD3)
MF_ACTIVATE_VIDEO_WINDOW = iid
End Function
Public Function MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HEDE4B5E0, &HF805, &H4D6C, &H99, &HB3, &HDB, &H1, &HBF, &H95, &HDF, &HAB)
MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS = iid
End Function
Public Function MF_AUDIO_RENDERER_ATTRIBUTE_SESSION_ID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HEDE4B5E3, &HF805, &H4D6C, &H99, &HB3, &HDB, &H1, &HBF, &H95, &HDF, &HAB)
MF_AUDIO_RENDERER_ATTRIBUTE_SESSION_ID = iid
End Function
Public Function MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HB10AAEC3, &HEF71, &H4CC3, &HB8, &H73, &H5, &HA9, &HA0, &H8B, &H9F, &H8E)
MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ID = iid
End Function
Public Function MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ROLE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6BA644FF, &H27C5, &H4D02, &H98, &H87, &HC2, &H86, &H19, &HFD, &HB9, &H1B)
MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ROLE = iid
End Function
Public Function MF_AUDIO_RENDERER_ATTRIBUTE_STREAM_CATEGORY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA9770471, &H92EC, &H4DF4, &H94, &HFE, &H81, &HC3, &H6F, &HC, &H3A, &H7A)
MF_AUDIO_RENDERER_ATTRIBUTE_STREAM_CATEGORY = iid
End Function
Public Function MFENABLETYPE_WMDRMV1_LicenseAcquisition() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4FF6EEAF, &HB43, &H4797, &H9B, &H85, &HAB, &HF3, &H18, &H15, &HE7, &HB0)
MFENABLETYPE_WMDRMV1_LicenseAcquisition = iid
End Function
Public Function MFENABLETYPE_WMDRMV7_LicenseAcquisition() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3306DF, &H4A06, &H4884, &HA0, &H97, &HEF, &H6D, &H22, &HEC, &H84, &HA3)
MFENABLETYPE_WMDRMV7_LicenseAcquisition = iid
End Function
Public Function MFENABLETYPE_WMDRMV7_Individualization() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HACD2C84A, &HB303, &H4F65, &HBC, &H2C, &H2C, &H84, &H8D, &H1, &HA9, &H89)
MFENABLETYPE_WMDRMV7_Individualization = iid
End Function
Public Function MFENABLETYPE_MF_UpdateRevocationInformation() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE558B0B5, &HB3C4, &H44A0, &H92, &H4C, &H50, &HD1, &H78, &H93, &H23, &H85)
MFENABLETYPE_MF_UpdateRevocationInformation = iid
End Function
Public Function MFENABLETYPE_MF_UpdateUntrustedComponent() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9879F3D6, &HCEE2, &H48E6, &HB5, &H73, &H97, &H67, &HAB, &H17, &H2F, &H16)
MFENABLETYPE_MF_UpdateUntrustedComponent = iid
End Function
Public Function MFENABLETYPE_MF_RebootRequired() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6D4D3D4B, &HECE, &H4652, &H8B, &H3A, &HF2, &HD2, &H42, &H60, &HD8, &H87)
MFENABLETYPE_MF_RebootRequired = iid
End Function
Public Function MF_METADATA_PROVIDER_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HDB214084, &H58A4, &H4D2E, &HB8, &H4F, &H6F, &H75, &H5B, &H2F, &H7A, &HD)
MF_METADATA_PROVIDER_SERVICE = iid
End Function
Public Function MF_PROPERTY_HANDLER_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA3FACE02, &H32B8, &H41DD, &H90, &HE7, &H5F, &HEF, &H7C, &H89, &H91, &HB5)
MF_PROPERTY_HANDLER_SERVICE = iid
End Function
Public Function MF_RATE_CONTROL_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H866FA297, &HB802, &H4BF8, &H9D, &HC9, &H5E, &H3B, &H6A, &H9F, &H53, &HC9)
MF_RATE_CONTROL_SERVICE = iid
End Function
Public Function MF_TIMECODE_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA0D502A7, &HEB3, &H4885, &HB1, &HB9, &H9F, &HEB, &HD, &H8, &H34, &H54)
MF_TIMECODE_SERVICE = iid
End Function
Public Function MR_POLICY_VOLUME_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1ABAA2AC, &H9D3B, &H47C6, &HAB, &H48, &HC5, &H95, &H6, &HDE, &H78, &H4D)
MR_POLICY_VOLUME_SERVICE = iid
End Function
Public Function MR_CAPTURE_POLICY_VOLUME_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H24030ACD, &H107A, &H4265, &H97, &H5C, &H41, &H4E, &H33, &HE6, &H5F, &H2A)
MR_CAPTURE_POLICY_VOLUME_SERVICE = iid
End Function
Public Function MR_STREAM_VOLUME_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF8B5FA2F, &H32EF, &H46F5, &HB1, &H72, &H13, &H21, &H21, &H2F, &HB2, &HC4)
MR_STREAM_VOLUME_SERVICE = iid
End Function
Public Function MR_AUDIO_POLICY_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H911FD737, &H6775, &H4AB0, &HA6, &H14, &H29, &H78, &H62, &HFD, &HAC, &H88)
MR_AUDIO_POLICY_SERVICE = iid
End Function
Public Function MF_SAMPLEGRABBERSINK_SAMPLE_TIME_OFFSET() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H62E3D776, &H8100, &H4E03, &HA6, &HE8, &HBD, &H38, &H57, &HAC, &H9C, &H47)
MF_SAMPLEGRABBERSINK_SAMPLE_TIME_OFFSET = iid
End Function
Public Function MF_SAMPLEGRABBERSINK_IGNORE_CLOCK() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HEFDA2C0, &H2B69, &H4E2E, &HAB, &H8D, &H46, &HDC, &HBF, &HF7, &HD2, &H5D)
MF_SAMPLEGRABBERSINK_IGNORE_CLOCK = iid
End Function
Public Function MF_QUALITY_SERVICES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HB7E2BE11, &H2F96, &H4640, &HB5, &H2C, &H28, &H23, &H65, &HBD, &HF1, &H6C)
MF_QUALITY_SERVICES = iid
End Function
Public Function MF_WORKQUEUE_SERVICES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8E37D489, &H41E0, &H413A, &H90, &H68, &H28, &H7C, &H88, &H6D, &H8D, &HDA)
MF_WORKQUEUE_SERVICES = iid
End Function
Public Function MF_QUALITY_NOTIFY_PROCESSING_LATENCY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF6B44AF8, &H604D, &H46FE, &HA9, &H5D, &H45, &H47, &H9B, &H10, &HC9, &HBC)
MF_QUALITY_NOTIFY_PROCESSING_LATENCY = iid
End Function
Public Function MF_QUALITY_NOTIFY_SAMPLE_LAG() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H30D15206, &HED2A, &H4760, &HBE, &H17, &HEB, &H4A, &H9F, &H12, &H29, &H5C)
MF_QUALITY_NOTIFY_SAMPLE_LAG = iid
End Function
Public Function MF_TIME_FORMAT_SEGMENT_OFFSET() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC8B8BE77, &H869C, &H431D, &H81, &H2E, &H16, &H96, &H93, &HF6, &H5A, &H39)
MF_TIME_FORMAT_SEGMENT_OFFSET = iid
End Function
Public Function MF_SOURCE_PRESENTATION_PROVIDER_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE002AADC, &HF4AF, &H4EE5, &H98, &H47, &H5, &H3E, &HDF, &H84, &H4, &H26)
MF_SOURCE_PRESENTATION_PROVIDER_SERVICE = iid
End Function
Public Function MF_TOPONODE_ATTRIBUTE_EDITOR_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H65656E1A, &H77F, &H4472, &H83, &HEF, &H31, &H6F, &H11, &HD5, &H8, &H7A)
MF_TOPONODE_ATTRIBUTE_EDITOR_SERVICE = iid
End Function
Public Function MFNETSOURCE_SSLCERTIFICATE_MANAGER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H55E6CB27, &HE69B, &H4267, &H94, &HC, &H2D, &H7E, &HC5, &HBB, &H8A, &HF)
MFNETSOURCE_SSLCERTIFICATE_MANAGER = iid
End Function
Public Function MFNETSOURCE_RESOURCE_FILTER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H815D0FF6, &H265A, &H4477, &H9E, &H46, &H7B, &H80, &HAD, &H80, &HB5, &HFB)
MFNETSOURCE_RESOURCE_FILTER = iid
End Function
Public Function MFNET_SAVEJOB_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HB85A587F, &H3D02, &H4E52, &H95, &H65, &H55, &HD3, &HEC, &H1E, &H7F, &HF7)
MFNET_SAVEJOB_SERVICE = iid
End Function
Public Function MFNETSOURCE_STATISTICS_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F275, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_STATISTICS_SERVICE = iid
End Function
Public Function MFNETSOURCE_STATISTICS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F274, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_STATISTICS = iid
End Function
Public Function MFNETSOURCE_BUFFERINGTIME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F276, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_BUFFERINGTIME = iid
End Function
Public Function MFNETSOURCE_ACCELERATEDSTREAMINGDURATION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F277, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_ACCELERATEDSTREAMINGDURATION = iid
End Function
Public Function MFNETSOURCE_MAXUDPACCELERATEDSTREAMINGDURATION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4AAB2879, &HBBE1, &H4994, &H9F, &HF0, &H54, &H95, &HBD, &H25, &H1, &H29)
MFNETSOURCE_MAXUDPACCELERATEDSTREAMINGDURATION = iid
End Function
Public Function MFNETSOURCE_MAXBUFFERTIMEMS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H408B24E6, &H4038, &H4401, &HB5, &HB2, &HFE, &H70, &H1A, &H9E, &HBF, &H10)
MFNETSOURCE_MAXBUFFERTIMEMS = iid
End Function
Public Function MFNETSOURCE_CONNECTIONBANDWIDTH() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F278, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_CONNECTIONBANDWIDTH = iid
End Function
Public Function MFNETSOURCE_CACHEENABLED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F279, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_CACHEENABLED = iid
End Function
Public Function MFNETSOURCE_AUTORECONNECTLIMIT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F27A, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_AUTORECONNECTLIMIT = iid
End Function
Public Function MFNETSOURCE_RESENDSENABLED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F27B, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_RESENDSENABLED = iid
End Function
Public Function MFNETSOURCE_THINNINGENABLED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F27C, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_THINNINGENABLED = iid
End Function
Public Function MFNETSOURCE_PROTOCOL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F27D, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PROTOCOL = iid
End Function
Public Function MFNETSOURCE_TRANSPORT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F27E, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_TRANSPORT = iid
End Function
Public Function MFNETSOURCE_PREVIEWMODEENABLED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F27F, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PREVIEWMODEENABLED = iid
End Function
Public Function MFNETSOURCE_CREDENTIAL_MANAGER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F280, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_CREDENTIAL_MANAGER = iid
End Function
Public Function MFNETSOURCE_PPBANDWIDTH() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F281, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PPBANDWIDTH = iid
End Function
Public Function MFNETSOURCE_AUTORECONNECTPROGRESS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F282, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_AUTORECONNECTPROGRESS = iid
End Function
Public Function MFNETSOURCE_PROXYLOCATORFACTORY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F283, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PROXYLOCATORFACTORY = iid
End Function
Public Function MFNETSOURCE_BROWSERUSERAGENT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F28B, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_BROWSERUSERAGENT = iid
End Function
Public Function MFNETSOURCE_BROWSERWEBPAGE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F28C, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_BROWSERWEBPAGE = iid
End Function
Public Function MFNETSOURCE_PLAYERVERSION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F28D, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PLAYERVERSION = iid
End Function
Public Function MFNETSOURCE_PLAYERID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F28E, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PLAYERID = iid
End Function
Public Function MFNETSOURCE_HOSTEXE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F28F, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_HOSTEXE = iid
End Function
Public Function MFNETSOURCE_HOSTVERSION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F291, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_HOSTVERSION = iid
End Function
Public Function MFNETSOURCE_PLAYERUSERAGENT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F292, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PLAYERUSERAGENT = iid
End Function
Public Function MFNETSOURCE_CLIENTGUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H60A2C4A6, &HF197, &H4C14, &HA5, &HBF, &H88, &H83, &HD, &H24, &H58, &HAF)
MFNETSOURCE_CLIENTGUID = iid
End Function
Public Function MFNETSOURCE_LOGURL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F293, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_LOGURL = iid
End Function
Public Function MFNETSOURCE_ENABLE_UDP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F294, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_ENABLE_UDP = iid
End Function
Public Function MFNETSOURCE_ENABLE_TCP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F295, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_ENABLE_TCP = iid
End Function
Public Function MFNETSOURCE_ENABLE_MSB() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F296, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_ENABLE_MSB = iid
End Function
Public Function MFNETSOURCE_ENABLE_RTSP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F298, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_ENABLE_RTSP = iid
End Function
Public Function MFNETSOURCE_ENABLE_HTTP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F299, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_ENABLE_HTTP = iid
End Function
Public Function MFNETSOURCE_ENABLE_STREAMING() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F29C, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_ENABLE_STREAMING = iid
End Function
Public Function MFNETSOURCE_ENABLE_DOWNLOAD() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F29D, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_ENABLE_DOWNLOAD = iid
End Function
Public Function MFNETSOURCE_ENABLE_PRIVATEMODE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H824779D8, &HF18B, &H4405, &H8C, &HF1, &H46, &H4F, &HB5, &HAA, &H8F, &H71)
MFNETSOURCE_ENABLE_PRIVATEMODE = iid
End Function
Public Function MFNETSOURCE_UDP_PORT_RANGE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F29A, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_UDP_PORT_RANGE = iid
End Function
Public Function MFNETSOURCE_PROXYINFO() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F29B, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PROXYINFO = iid
End Function
Public Function MFNETSOURCE_DRMNET_LICENSE_REPRESENTATION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H47EAE1BD, &HBDFE, &H42E2, &H82, &HF3, &H54, &HA4, &H8C, &H17, &H96, &H2D)
MFNETSOURCE_DRMNET_LICENSE_REPRESENTATION = iid
End Function
Public Function MFNETSOURCE_PROXYSETTINGS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F287, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PROXYSETTINGS = iid
End Function
Public Function MFNETSOURCE_PROXYHOSTNAME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F284, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PROXYHOSTNAME = iid
End Function
Public Function MFNETSOURCE_PROXYPORT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F288, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PROXYPORT = iid
End Function
Public Function MFNETSOURCE_PROXYEXCEPTIONLIST() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F285, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PROXYEXCEPTIONLIST = iid
End Function
Public Function MFNETSOURCE_PROXYBYPASSFORLOCAL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F286, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PROXYBYPASSFORLOCAL = iid
End Function
Public Function MFNETSOURCE_PROXYRERUNAUTODETECTION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F289, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PROXYRERUNAUTODETECTION = iid
End Function
Public Function MFNETSOURCE_STREAM_LANGUAGE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9AB44318, &HF7CD, &H4F2D, &H8D, &H6D, &HFA, &H35, &HB4, &H92, &HCE, &HCB)
MFNETSOURCE_STREAM_LANGUAGE = iid
End Function
Public Function MFNETSOURCE_LOGPARAMS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H64936AE8, &H9418, &H453A, &H8C, &HDA, &H3E, &HA, &H66, &H8B, &H35, &H3B)
MFNETSOURCE_LOGPARAMS = iid
End Function
Public Function MFNETSOURCE_PEERMANAGER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H48B29ADB, &HFEBF, &H45EE, &HA9, &HBF, &HEF, &HB8, &H1C, &H49, &H2E, &HFC)
MFNETSOURCE_PEERMANAGER = iid
End Function
Public Function MFNETSOURCE_FRIENDLYNAME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5B2A7757, &HBC6B, &H447E, &HAA, &H6, &HD, &HDA, &H1C, &H64, &H6E, &H2F)
MFNETSOURCE_FRIENDLYNAME = iid
End Function
Public Function MF_BYTESTREAMHANDLER_ACCEPTS_SHARE_WRITE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA6E1F733, &H3001, &H4915, &H81, &H50, &H15, &H58, &HA2, &H18, &HE, &HC8)
MF_BYTESTREAMHANDLER_ACCEPTS_SHARE_WRITE = iid
End Function
Public Function MF_BYTESTREAM_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAB025E2B, &H16D9, &H4180, &HA1, &H27, &HBA, &H6C, &H70, &H15, &H61, &H61)
MF_BYTESTREAM_SERVICE = iid
End Function
Public Function MF_MEDIA_PROTECTION_MANAGER_PROPERTIES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H38BD81A9, &HACEA, &H4C73, &H89, &HB2, &H55, &H32, &HC0, &HAE, &HCA, &H79)
MF_MEDIA_PROTECTION_MANAGER_PROPERTIES = iid
End Function
Public Function MFCONNECTOR_UNKNOWN() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAC3AEF5C, &HCE43, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_UNKNOWN = iid
End Function
Public Function MFCONNECTOR_PCI() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAC3AEF5D, &HCE43, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_PCI = iid
End Function
Public Function MFCONNECTOR_PCIX() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAC3AEF5E, &HCE43, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_PCIX = iid
End Function
Public Function MFCONNECTOR_PCI_Express() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAC3AEF5F, &HCE43, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_PCI_Express = iid
End Function
Public Function MFCONNECTOR_AGP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAC3AEF60, &HCE43, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_AGP = iid
End Function
Public Function MFCONNECTOR_VGA() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD5968, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_VGA = iid
End Function
Public Function MFCONNECTOR_SVIDEO() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD5969, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_SVIDEO = iid
End Function
Public Function MFCONNECTOR_COMPOSITE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD596A, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_COMPOSITE = iid
End Function
Public Function MFCONNECTOR_COMPONENT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD596B, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_COMPONENT = iid
End Function
Public Function MFCONNECTOR_DVI() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD596C, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_DVI = iid
End Function
Public Function MFCONNECTOR_HDMI() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD596D, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_HDMI = iid
End Function
Public Function MFCONNECTOR_LVDS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD596E, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_LVDS = iid
End Function
Public Function MFCONNECTOR_D_JPN() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD5970, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_D_JPN = iid
End Function
Public Function MFCONNECTOR_SDI() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD5971, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_SDI = iid
End Function
Public Function MFCONNECTOR_DISPLAYPORT_EXTERNAL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD5972, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_DISPLAYPORT_EXTERNAL = iid
End Function
Public Function MFCONNECTOR_DISPLAYPORT_EMBEDDED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD5973, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_DISPLAYPORT_EMBEDDED = iid
End Function
Public Function MFCONNECTOR_UDI_EXTERNAL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD5974, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_UDI_EXTERNAL = iid
End Function
Public Function MFCONNECTOR_UDI_EMBEDDED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD5975, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_UDI_EMBEDDED = iid
End Function
Public Function MFCONNECTOR_MIRACAST() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD5977, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_MIRACAST = iid
End Function
Public Function MFPROTECTION_DISABLE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8CC6D81B, &HFEC6, &H4D8F, &H96, &H4B, &HCF, &HBA, &HB, &HD, &HAD, &HD)
MFPROTECTION_DISABLE = iid
End Function
Public Function MFPROTECTION_CONSTRICTVIDEO() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H193370CE, &HC5E4, &H4C3A, &H8A, &H66, &H69, &H59, &HB4, &HDA, &H44, &H42)
MFPROTECTION_CONSTRICTVIDEO = iid
End Function
Public Function MFPROTECTION_CONSTRICTVIDEO_NOOPM() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA580E8CD, &HC247, &H4957, &HB9, &H83, &H3C, &H2E, &HEB, &HD1, &HFF, &H59)
MFPROTECTION_CONSTRICTVIDEO_NOOPM = iid
End Function
Public Function MFPROTECTION_CONSTRICTAUDIO() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HFFC99B44, &HDF48, &H4E16, &H8E, &H66, &H9, &H68, &H92, &HC1, &H57, &H8A)
MFPROTECTION_CONSTRICTAUDIO = iid
End Function
Public Function MFPROTECTION_TRUSTEDAUDIODRIVERS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H65BDF3D2, &H168, &H4816, &HA5, &H33, &H55, &HD4, &H7B, &H2, &H71, &H1)
MFPROTECTION_TRUSTEDAUDIODRIVERS = iid
End Function
Public Function MFPROTECTION_HDCP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAE7CC03D, &HC828, &H4021, &HAC, &HB7, &HD5, &H78, &HD2, &H7A, &HAF, &H13)
MFPROTECTION_HDCP = iid
End Function
Public Function MFPROTECTION_CGMSA() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE57E69E9, &H226B, &H4D31, &HB4, &HE3, &HD3, &HDB, &H0, &H87, &H36, &HDD)
MFPROTECTION_CGMSA = iid
End Function
Public Function MFPROTECTION_ACP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC3FD11C6, &HF8B7, &H4D20, &HB0, &H8, &H1D, &HB1, &H7D, &H61, &HF2, &HDA)
MFPROTECTION_ACP = iid
End Function
Public Function MFPROTECTION_WMDRMOTA() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA267A6A1, &H362E, &H47D0, &H88, &H5, &H46, &H28, &H59, &H8A, &H23, &HE4)
MFPROTECTION_WMDRMOTA = iid
End Function
Public Function MFPROTECTION_FFT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H462A56B2, &H2866, &H4BB6, &H98, &HD, &H6D, &H8D, &H9E, &HDB, &H1A, &H8C)
MFPROTECTION_FFT = iid
End Function
Public Function MFPROTECTION_PROTECTED_SURFACE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4F5D9566, &HE742, &H4A25, &H8D, &H1F, &HD2, &H87, &HB5, &HFA, &HA, &HDE)
MFPROTECTION_PROTECTED_SURFACE = iid
End Function
Public Function MFPROTECTION_DISABLE_SCREEN_SCRAPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA21179A4, &HB7CD, &H40D8, &H96, &H14, &H8E, &HF2, &H37, &H1B, &HA7, &H8D)
MFPROTECTION_DISABLE_SCREEN_SCRAPE = iid
End Function
Public Function MFPROTECTION_VIDEO_FRAMES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H36A59CBC, &H7401, &H4A8C, &HBC, &H20, &H46, &HA7, &HC9, &HE5, &H97, &HF0)
MFPROTECTION_VIDEO_FRAMES = iid
End Function
Public Function MFPROTECTION_HARDWARE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4EE7F0C1, &H9ED7, &H424F, &HB6, &HBE, &H99, &H6B, &H33, &H52, &H88, &H56)
MFPROTECTION_HARDWARE = iid
End Function
Public Function MFPROTECTION_HDCP_WITH_TYPE_ENFORCEMENT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA4A585E8, &HED60, &H442D, &H81, &H4D, &HDB, &H4D, &H42, &H20, &HA0, &H6D)
MFPROTECTION_HDCP_WITH_TYPE_ENFORCEMENT = iid
End Function
Public Function MFPROTECTIONATTRIBUTE_BEST_EFFORT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC8E06331, &H75F0, &H4EC1, &H8E, &H77, &H17, &H57, &H8F, &H77, &H3B, &H46)
MFPROTECTIONATTRIBUTE_BEST_EFFORT = iid
End Function
Public Function MFPROTECTIONATTRIBUTE_FAIL_OVER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8536ABC5, &H38F1, &H4151, &H9C, &HCE, &HF5, &H5D, &H94, &H12, &H29, &HAC)
MFPROTECTIONATTRIBUTE_FAIL_OVER = iid
End Function
Public Function MFPROTECTION_GRAPHICS_TRANSFER_AES_ENCRYPTION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC873DE64, &HD8A5, &H49E6, &H88, &HBB, &HFB, &H96, &H3F, &HD3, &HD4, &HCE)
MFPROTECTION_GRAPHICS_TRANSFER_AES_ENCRYPTION = iid
End Function
Public Function MFPROTECTIONATTRIBUTE_CONSTRICTVIDEO_IMAGESIZE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8476FC, &H4B58, &H4D80, &HA7, &H90, &HE7, &H29, &H76, &H73, &H16, &H1D)
MFPROTECTIONATTRIBUTE_CONSTRICTVIDEO_IMAGESIZE = iid
End Function
Public Function MFPROTECTIONATTRIBUTE_HDCP_SRM() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6F302107, &H3477, &H4468, &H8A, &H8, &HEE, &HF9, &HDB, &H10, &HE2, &HF)
MFPROTECTIONATTRIBUTE_HDCP_SRM = iid
End Function
Public Function MF_SampleProtectionSalt() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5403DEEE, &HB9EE, &H438F, &HAA, &H83, &H38, &H4, &H99, &H7E, &H56, &H9D)
MF_SampleProtectionSalt = iid
End Function
Public Function MF_REMOTE_PROXY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2F00C90E, &HD2CF, &H4278, &H8B, &H6A, &HD0, &H77, &HFA, &HC3, &HA2, &H5F)
MF_REMOTE_PROXY = iid
End Function
Public Function CLSID_CreateMediaExtensionObject() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HEF65A54D, &H788, &H45B8, &H8B, &H14, &HBC, &HF, &H6A, &H6B, &H51, &H37)
CLSID_CreateMediaExtensionObject = iid
End Function
Public Function MF_SAMI_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H49A89AE7, &HB4D9, &H4EF2, &HAA, &H5C, &HF6, &H5A, &H3E, &H5, &HAE, &H4E)
MF_SAMI_SERVICE = iid
End Function
Public Function MF_PD_SAMI_STYLELIST() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE0B73C7F, &H486D, &H484E, &H98, &H72, &H4D, &HE5, &H19, &H2A, &H7B, &HF8)
MF_PD_SAMI_STYLELIST = iid
End Function
Public Function MF_SD_SAMI_LANGUAGE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H36FCB98A, &H6CD0, &H44CB, &HAC, &HB9, &HA8, &HF5, &H60, &HD, &HD0, &HBB)
MF_SD_SAMI_LANGUAGE = iid
End Function
Public Function MF_TRANSCODE_CONTAINERTYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H150FF23F, &H4ABC, &H478B, &HAC, &H4F, &HE1, &H91, &H6F, &HBA, &H1C, &HCA)
MF_TRANSCODE_CONTAINERTYPE = iid
End Function
Public Function MFTranscodeContainerType_ASF() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H430F6F6E, &HB6BF, &H4FC1, &HA0, &HBD, &H9E, &HE4, &H6E, &HEE, &H2A, &HFB)
MFTranscodeContainerType_ASF = iid
End Function
Public Function MFTranscodeContainerType_MPEG4() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HDC6CD05D, &HB9D0, &H40EF, &HBD, &H35, &HFA, &H62, &H2C, &H1A, &HB2, &H8A)
MFTranscodeContainerType_MPEG4 = iid
End Function
Public Function MFTranscodeContainerType_MP3() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE438B912, &H83F1, &H4DE6, &H9E, &H3A, &H9F, &HFB, &HC6, &HDD, &H24, &HD1)
MFTranscodeContainerType_MP3 = iid
End Function
Public Function MFTranscodeContainerType_FLAC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H31344AA3, &H5A9, &H42B5, &H90, &H1B, &H8E, &H9D, &H42, &H57, &HF7, &H5E)
MFTranscodeContainerType_FLAC = iid
End Function
Public Function MFTranscodeContainerType_3GP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H34C50167, &H4472, &H4F34, &H9E, &HA0, &HC4, &H9F, &HBA, &HCF, &H3, &H7D)
MFTranscodeContainerType_3GP = iid
End Function
Public Function MFTranscodeContainerType_AC3() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6D8D91C3, &H8C91, &H4ED1, &H87, &H42, &H8C, &H34, &H7D, &H5B, &H44, &HD0)
MFTranscodeContainerType_AC3 = iid
End Function
Public Function MFTranscodeContainerType_ADTS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H132FD27D, &HF02, &H43DE, &HA3, &H1, &H38, &HFB, &HBB, &HB3, &H83, &H4E)
MFTranscodeContainerType_ADTS = iid
End Function
Public Function MFTranscodeContainerType_MPEG2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBFC2DBF9, &H7BB4, &H4F8F, &HAF, &HDE, &HE1, &H12, &HC4, &H4B, &HA8, &H82)
MFTranscodeContainerType_MPEG2 = iid
End Function
Public Function MFTranscodeContainerType_WAVE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H64C3453C, &HF26, &H4741, &HBE, &H63, &H87, &HBD, &HF8, &HBB, &H93, &H5B)
MFTranscodeContainerType_WAVE = iid
End Function
Public Function MFTranscodeContainerType_AVI() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7EDFE8AF, &H402F, &H4D76, &HA3, &H3C, &H61, &H9F, &HD1, &H57, &HD0, &HF1)
MFTranscodeContainerType_AVI = iid
End Function
Public Function MFTranscodeContainerType_FMPEG4() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9BA876F1, &H419F, &H4B77, &HA1, &HE0, &H35, &H95, &H9D, &H9D, &H40, &H4)
MFTranscodeContainerType_FMPEG4 = iid
End Function
Public Function MFTranscodeContainerType_AMR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H25D5AD3, &H621A, &H475B, &H96, &H4D, &H66, &HB1, &HC8, &H24, &HF0, &H79)
MFTranscodeContainerType_AMR = iid
End Function
Public Function MF_TRANSCODE_SKIP_METADATA_TRANSFER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4E4469EF, &HB571, &H4959, &H8F, &H83, &H3D, &HCF, &HBA, &H33, &HA3, &H93)
MF_TRANSCODE_SKIP_METADATA_TRANSFER = iid
End Function
Public Function MF_TRANSCODE_TOPOLOGYMODE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3E3DF610, &H394A, &H40B2, &H9D, &HEA, &H3B, &HAB, &H65, &HB, &HEB, &HF2)
MF_TRANSCODE_TOPOLOGYMODE = iid
End Function
Public Function MF_TRANSCODE_ADJUST_PROFILE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9C37C21B, &H60F, &H487C, &HA6, &H90, &H80, &HD7, &HF5, &HD, &H1C, &H72)
MF_TRANSCODE_ADJUST_PROFILE = iid
End Function
Public Function MF_TRANSCODE_ENCODINGPROFILE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6947787C, &HF508, &H4EA9, &HB1, &HE9, &HA1, &HFE, &H3A, &H49, &HFB, &HC9)
MF_TRANSCODE_ENCODINGPROFILE = iid
End Function
Public Function MF_TRANSCODE_QUALITYVSSPEED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H98332DF8, &H3CD, &H476B, &H89, &HFA, &H3F, &H9E, &H44, &H2D, &HEC, &H9F)
MF_TRANSCODE_QUALITYVSSPEED = iid
End Function
Public Function MF_TRANSCODE_DONOT_INSERT_ENCODER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF45AA7CE, &HAB24, &H4012, &HA1, &H1B, &HDC, &H82, &H20, &H20, &H14, &H10)
MF_TRANSCODE_DONOT_INSERT_ENCODER = iid
End Function
Public Function MF_VIDEO_PROCESSOR_ALGORITHM() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4A0A1E1F, &H272C, &H4FB6, &H9E, &HB1, &HDB, &H33, &HC, &HBC, &H97, &HCA)
MF_VIDEO_PROCESSOR_ALGORITHM = iid
End Function
Public Function MF_XVP_DISABLE_FRC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2C0AFA19, &H7A97, &H4D5A, &H9E, &HE8, &H16, &HD4, &HFC, &H51, &H8D, &H8C)
MF_XVP_DISABLE_FRC = iid
End Function
Public Function MF_XVP_CALLER_ALLOCATES_OUTPUT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4A2CABC, &HCAB, &H40B1, &HA1, &HB9, &H75, &HBC, &H36, &H58, &HF0, &H0)
MF_XVP_CALLER_ALLOCATES_OUTPUT = iid
End Function
Public Function CLSID_VideoProcessorMFT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H88753B26, &H5B24, &H49BD, &HB2, &HE7, &HC, &H44, &H5C, &H78, &HC9, &H82)
CLSID_VideoProcessorMFT = iid
End Function
Public Function MF_LOCAL_MFT_REGISTRATION_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HDDF5CF9C, &H4506, &H45AA, &HAB, &HF0, &H6D, &H5D, &H94, &HDD, &H1B, &H4A)
MF_LOCAL_MFT_REGISTRATION_SERVICE = iid
End Function
Public Function MF_WRAPPED_SAMPLE_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H31F52BF2, &HD03E, &H4048, &H80, &HD0, &H9C, &H10, &H46, &HD8, &H7C, &H61)
MF_WRAPPED_SAMPLE_SERVICE = iid
End Function
Public Function MF_WRAPPED_OBJECT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2B182C4C, &HD6AC, &H49F4, &H89, &H15, &HF7, &H18, &H87, &HDB, &H70, &HCD)
MF_WRAPPED_OBJECT = iid
End Function
Public Function CLSID_HttpSchemePlugin() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H44CB442B, &H9DA9, &H49DF, &HB3, &HFD, &H2, &H37, &H77, &HB1, &H6E, &H50)
CLSID_HttpSchemePlugin = iid
End Function
Public Function CLSID_UrlmonSchemePlugin() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9EC4B4F9, &H3029, &H45AD, &H94, &H7B, &H34, &H4D, &HE2, &HA2, &H49, &HE2)
CLSID_UrlmonSchemePlugin = iid
End Function
Public Function CLSID_NetSchemePlugin() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE9F4EBAB, &HD97B, &H463E, &HA2, &HB1, &HC5, &H4E, &HE3, &HF9, &H41, &H4D)
CLSID_NetSchemePlugin = iid
End Function
Public Function MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC60AC5FE, &H252A, &H478F, &HA0, &HEF, &HBC, &H8F, &HA5, &HF7, &HCA, &HD3)
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE = iid
End Function
Public Function MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_HW_SOURCE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HDE7046BA, &H54D6, &H4487, &HA2, &HA4, &HEC, &H7C, &HD, &H1B, &HD1, &H63)
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_HW_SOURCE = iid
End Function
Public Function MF_DEVSOURCE_ATTRIBUTE_FRIENDLY_NAME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H60D0E559, &H52F8, &H4FA2, &HBB, &HCE, &HAC, &HDB, &H34, &HA8, &HEC, &H1)
MF_DEVSOURCE_ATTRIBUTE_FRIENDLY_NAME = iid
End Function
Public Function MF_DEVSOURCE_ATTRIBUTE_MEDIA_TYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H56A819CA, &HC78, &H4DE4, &HA0, &HA7, &H3D, &HDA, &HBA, &HF, &H24, &HD4)
MF_DEVSOURCE_ATTRIBUTE_MEDIA_TYPE = iid
End Function
Public Function MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_CATEGORY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H77F0AE69, &HC3BD, &H4509, &H94, &H1D, &H46, &H7E, &H4D, &H24, &H89, &H9E)
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_CATEGORY = iid
End Function
Public Function MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_SYMBOLIC_LINK() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H58F0AAD8, &H22BF, &H4F8A, &HBB, &H3D, &HD2, &HC4, &H97, &H8C, &H6E, &H2F)
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_SYMBOLIC_LINK = iid
End Function
Public Function MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_SYMBOLIC_LINK() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H98D24B5E, &H5930, &H4614, &HB5, &HA1, &HF6, &H0, &HF9, &H35, &H5A, &H78)
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_SYMBOLIC_LINK = iid
End Function
Public Function MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_MAX_BUFFERS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7DD9B730, &H4F2D, &H41D5, &H8F, &H95, &HC, &HC9, &HA9, &H12, &HBA, &H26)
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_MAX_BUFFERS = iid
End Function
Public Function MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ENDPOINT_ID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H30DA9258, &HFEB9, &H47A7, &HA4, &H53, &H76, &H3A, &H7A, &H8E, &H1C, &H5F)
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ENDPOINT_ID = iid
End Function
Public Function MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ROLE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBC9D118E, &H8C67, &H4A18, &H85, &HD4, &H12, &HD3, &H0, &H40, &H5, &H52)
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ROLE = iid
End Function
Public Function MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_GUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H14DD9A1C, &H7CFF, &H41BE, &HB1, &HB9, &HBA, &H1A, &HC6, &HEC, &HB5, &H71)
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_GUID = iid
End Function
Public Function MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_GUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8AC3587A, &H4AE7, &H42D8, &H99, &HE0, &HA, &H60, &H13, &HEE, &HF9, &HF)
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_GUID = iid
End Function
Public Function MF_DEVICESTREAM_IMAGE_STREAM() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA7FFB865, &HE7B2, &H43B0, &H9F, &H6F, &H9A, &HF2, &HA0, &HE5, &HF, &HC0)
MF_DEVICESTREAM_IMAGE_STREAM = iid
End Function
Public Function MF_DEVICESTREAM_INDEPENDENT_IMAGE_STREAM() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3EEEC7E, &HD605, &H4576, &H8B, &H29, &H65, &H80, &HB4, &H90, &HD7, &HD3)
MF_DEVICESTREAM_INDEPENDENT_IMAGE_STREAM = iid
End Function
Public Function MF_DEVICESTREAM_STREAM_ID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H11BD5120, &HD124, &H446B, &H88, &HE6, &H17, &H6, &H2, &H57, &HFF, &HF9)
MF_DEVICESTREAM_STREAM_ID = iid
End Function
Public Function MF_DEVICESTREAM_STREAM_CATEGORY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2939E7B8, &HA62E, &H4579, &HB6, &H74, &HD4, &H7, &H3D, &HFA, &HBB, &HBA)
MF_DEVICESTREAM_STREAM_CATEGORY = iid
End Function
Public Function MF_DEVICESTREAM_TRANSFORM_STREAM_ID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE63937B7, &HDAAF, &H4D49, &H81, &H5F, &HD8, &H26, &HF8, &HAD, &H31, &HE7)
MF_DEVICESTREAM_TRANSFORM_STREAM_ID = iid
End Function
Public Function MF_DEVICESTREAM_EXTENSION_PLUGIN_CLSID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H48E6558, &H60C4, &H4173, &HBD, &H5B, &H6A, &H3C, &HA2, &H89, &H6A, &HEE)
MF_DEVICESTREAM_EXTENSION_PLUGIN_CLSID = iid
End Function
Public Function MF_DEVICEMFT_EXTENSION_PLUGIN_CLSID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H844DBAE, &H34FA, &H48A0, &HA7, &H83, &H8E, &H69, &H6F, &HB1, &HC9, &HA8)
MF_DEVICEMFT_EXTENSION_PLUGIN_CLSID = iid
End Function
Public Function MF_DEVICESTREAM_EXTENSION_PLUGIN_CONNECTION_POINT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H37F9375C, &HE664, &H4EA4, &HAA, &HE4, &HCB, &H6D, &H1D, &HAC, &HA1, &HF4)
MF_DEVICESTREAM_EXTENSION_PLUGIN_CONNECTION_POINT = iid
End Function
Public Function MF_DEVICESTREAM_TAKEPHOTO_TRIGGER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1D180E34, &H538C, &H4FBB, &HA7, &H5A, &H85, &H9A, &HF7, &HD2, &H61, &HA6)
MF_DEVICESTREAM_TAKEPHOTO_TRIGGER = iid
End Function
Public Function MF_DEVICESTREAM_MAX_FRAME_BUFFERS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1684CEBE, &H3175, &H4985, &H88, &H2C, &HE, &HFD, &H3E, &H8A, &HC1, &H1E)
MF_DEVICESTREAM_MAX_FRAME_BUFFERS = iid
End Function
Public Function MF_DEVICEMFT_CONNECTED_FILTER_KSCONTROL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6A2C4FA6, &HD179, &H41CD, &H95, &H23, &H82, &H23, &H71, &HEA, &H40, &HE5)
MF_DEVICEMFT_CONNECTED_FILTER_KSCONTROL = iid
End Function
Public Function MF_DEVICEMFT_CONNECTED_PIN_KSCONTROL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE63310F7, &HB244, &H4EF8, &H9A, &H7D, &H24, &HC7, &H4E, &H32, &HEB, &HD0)
MF_DEVICEMFT_CONNECTED_PIN_KSCONTROL = iid
End Function
Public Function MF_DEVICE_THERMAL_STATE_CHANGED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H70CCD0AF, &HFC9F, &H4DEB, &HA8, &H75, &H9F, &HEC, &HD1, &H6C, &H5B, &HD4)
MF_DEVICE_THERMAL_STATE_CHANGED = iid
End Function
Public Function MFSampleExtension_DeviceTimestamp() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8F3E35E7, &H2DCD, &H4887, &H86, &H22, &H2A, &H58, &HBA, &HA6, &H52, &HB0)
MFSampleExtension_DeviceTimestamp = iid
End Function
Public Function MFSampleExtension_Spatial_CameraViewTransform() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4E251FA4, &H830F, &H4770, &H85, &H9A, &H4B, &H8D, &H99, &HAA, &H80, &H9B)
MFSampleExtension_Spatial_CameraViewTransform = iid
End Function
Public Function MFSampleExtension_Spatial_CameraCoordinateSystem() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9D13C82F, &H2199, &H4E67, &H91, &HCD, &HD1, &HA4, &H18, &H1F, &H25, &H34)
MFSampleExtension_Spatial_CameraCoordinateSystem = iid
End Function
Public Function MFSampleExtension_Spatial_CameraProjectionTransform() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H47F9FCB5, &H2A02, &H4F26, &HA4, &H77, &H79, &H2F, &HDF, &H95, &H88, &H6A)
MFSampleExtension_Spatial_CameraProjectionTransform = iid
End Function
Public Function CLSID_MPEG2ByteStreamPlugin() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H40871C59, &HAB40, &H471F, &H8D, &HC3, &H1F, &H25, &H9D, &H86, &H24, &H79)
CLSID_MPEG2ByteStreamPlugin = iid
End Function
Public Function MF_MEDIASOURCE_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF09992F7, &H9FBA, &H4C4A, &HA3, &H7F, &H8C, &H47, &HB4, &HE1, &HDF, &HE7)
MF_MEDIASOURCE_SERVICE = iid
End Function
Public Function MF_ACCESS_CONTROLLED_MEDIASOURCE_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H14A5031, &H2F05, &H4C6A, &H9F, &H9C, &H7D, &HD, &HC4, &HED, &HA5, &HF4)
MF_ACCESS_CONTROLLED_MEDIASOURCE_SERVICE = iid
End Function
Public Function MF_WRAPPED_BUFFER_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAB544072, &HC269, &H4EBC, &HA5, &H52, &H1C, &H3B, &H32, &HBE, &HD5, &HCA)
MF_WRAPPED_BUFFER_SERVICE = iid
End Function
Public Function MF_CONTENT_DECRYPTOR_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H68A72927, &HFC7B, &H44EE, &H85, &HF4, &H7C, &H51, &HBD, &H55, &HA6, &H59)
MF_CONTENT_DECRYPTOR_SERVICE = iid
End Function
Public Function MF_CONTENT_PROTECTION_DEVICE_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HFF58436F, &H76A0, &H41FE, &HB5, &H66, &H10, &HCC, &H53, &H96, &H2E, &HDD)
MF_CONTENT_PROTECTION_DEVICE_SERVICE = iid
End Function
Public Function MF_SD_AUDIO_ENCODER_DELAY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8E85422C, &H73DE, &H403F, &H9A, &H35, &H55, &HA, &HD6, &HE8, &HB9, &H51)
MF_SD_AUDIO_ENCODER_DELAY = iid
End Function
Public Function MF_SD_AUDIO_ENCODER_PADDING() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H529C7F2C, &HAC4B, &H4E3F, &HBF, &HC3, &H9, &H2, &H19, &H49, &H82, &HCB)
MF_SD_AUDIO_ENCODER_PADDING = iid
End Function
Public Function CLSID_MSH264DecoderMFT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H62CE7E72, &H4C71, &H4D20, &HB1, &H5D, &H45, &H28, &H31, &HA8, &H7D, &H9D)
CLSID_MSH264DecoderMFT = iid
End Function
Public Function CLSID_MSH264EncoderMFT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6CA50344, &H51A, &H4DED, &H97, &H79, &HA4, &H33, &H5, &H16, &H5E, &H35)
CLSID_MSH264EncoderMFT = iid
End Function
Public Function CLSID_MSDDPlusDecMFT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H177C0AFE, &H900B, &H48D4, &H9E, &H4C, &H57, &HAD, &HD2, &H50, &HB3, &HD4)
CLSID_MSDDPlusDecMFT = iid
End Function
Public Function CLSID_MP3DecMediaObject() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBBEEA841, &HA63, &H4F52, &HA7, &HAB, &HA9, &HB3, &HA8, &H4E, &HD3, &H8A)
CLSID_MP3DecMediaObject = iid
End Function
Public Function CLSID_MSAACDecMFT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H32D186A7, &H218F, &H4C75, &H88, &H76, &HDD, &H77, &H27, &H3A, &H89, &H99)
CLSID_MSAACDecMFT = iid
End Function
Public Function CLSID_MSH265DecoderMFT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H420A51A3, &HD605, &H430C, &HB4, &HFC, &H45, &H27, &H4F, &HA6, &HC5, &H62)
CLSID_MSH265DecoderMFT = iid
End Function
Public Function CLSID_WMVDecoderMFT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H82D353DF, &H90BD, &H4382, &H8B, &HC2, &H3F, &H61, &H92, &HB7, &H6E, &H34)
CLSID_WMVDecoderMFT = iid
End Function
Public Function CLSID_WMADecMediaObject() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2EEB4ADF, &H4578, &H4D10, &HBC, &HA7, &HBB, &H95, &H5F, &H56, &H32, &HA)
CLSID_WMADecMediaObject = iid
End Function
Public Function CLSID_MSMPEGAudDecMFT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H70707B39, &HB2CA, &H4015, &HAB, &HEA, &HF8, &H44, &H7D, &H22, &HD8, &H8B)
CLSID_MSMPEGAudDecMFT = iid
End Function
Public Function CLSID_MSMPEGDecoderMFT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2D709E52, &H123F, &H49B5, &H9C, &HBC, &H9A, &HF5, &HCD, &HE2, &H8F, &HB9)
CLSID_MSMPEGDecoderMFT = iid
End Function
Public Function CLSID_AudioResamplerMediaObject() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF447B69E, &H1884, &H4A7E, &H80, &H55, &H34, &H6F, &H74, &HD6, &HED, &HB3)
CLSID_AudioResamplerMediaObject = iid
End Function
Public Function CLSID_MSVPxDecoder() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE3AAF548, &HC9A4, &H4C6E, &H23, &H4D, &H5A, &HDA, &H37, &H4B, &H0, &H0)
CLSID_MSVPxDecoder = iid
End Function
Public Function MF_D3D12_SYNCHRONIZATION_OBJECT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2a7c8d6a, &H85a6, &H494d, &Ha0, &H46, &H6, &Hea, &H1a, &H13, &H8f, &H4b)
MF_D3D12_SYNCHRONIZATION_OBJECT = iid
End Function
Public Function MF_MT_D3D_RESOURCE_VERSION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H174f1e85, &Hfe26, &H453d, &Hb5, &H2e, &H5b, &Hdd, &H4e, &H55, &Hb9, &H44)
MF_MT_D3D_RESOURCE_VERSION = iid
End Function
Public Function MF_MT_D3D12_CPU_READBACK() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H28ee9fe3, &Hd481, &H46a6, &Hb9, &H8a, &H7f, &H69, &Hd5, &H28, &He, &H82)
MF_MT_D3D12_CPU_READBACK = iid
End Function
Public Function MF_MT_D3D12_TEXTURE_LAYOUT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H97c85caa, &Hbeb, &H4ee1, &H97, &H15, &Hf2, &H2f, &Had, &H8c, &H10, &Hf5)
MF_MT_D3D12_TEXTURE_LAYOUT = iid
End Function
Public Function MF_MT_D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Heeac2585, &H3430, &H498c, &H84, &Ha2, &H77, &Hb1, &Hbb, &Ha5, &H70, &Hf6)
MF_MT_D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET = iid
End Function
Public Function MF_MT_D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb1138dc3, &H1d5, &H4c14, &H9b, &Hdc, &Hcd, &Hc9, &H33, &H6f, &H55, &Hb9)
MF_MT_D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL = iid
End Function
Public Function MF_MT_D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H82c85647, &H5057, &H4960, &H95, &H59, &Hf4, &H5b, &H8e, &H27, &H14, &H27)
MF_MT_D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS = iid
End Function
Public Function MF_MT_D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hba06bfac, &Hffe3, &H474a, &Hab, &H55, &H16, &H1e, &He4, &H41, &H7a, &H2e)
MF_MT_D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE = iid
End Function
Public Function MF_MT_D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha6a1e439, &H2f96, &H4ab5, &H98, &Hdc, &Had, &Hf7, &H49, &H73, &H50, &H5d)
MF_MT_D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER = iid
End Function
Public Function MF_MT_D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha4940b2, &Hcfd6, &H4738, &H9d, &H2, &H98, &H11, &H37, &H34, &H1, &H5a)
MF_MT_D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS = iid
End Function
Public Function MF_SA_D3D12_HEAP_FLAGS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H496b3266, &Hd28f, &H4f8c, &H93, &Ha7, &H4a, &H59, &H6b, &H1a, &H31, &Ha1)
MF_SA_D3D12_HEAP_FLAGS = iid
End Function
Public Function MF_SA_D3D12_HEAP_TYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H56f26a76, &Hbbc1, &H4ce0, &Hbb, &H11, &He2, &H23, &H68, &Hd8, &H74, &Hed)
MF_SA_D3D12_HEAP_TYPE = iid
End Function
Public Function MF_SA_D3D12_CLEAR_VALUE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H86ba9a39, &H526, &H495d, &H9a, &Hb5, &H54, &Hec, &H9f, &Had, &H6f, &Hc3)
MF_SA_D3D12_CLEAR_VALUE = iid
End Function
Public Function MF_CAPTURE_ENGINE_INITIALIZED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H219992bc, &Hcf92, &H4531, &Ha1, &Hae, &H96, &He1, &He8, &H86, &Hc8, &Hf1)
MF_CAPTURE_ENGINE_INITIALIZED = iid
End Function
Public Function MF_CAPTURE_ENGINE_PREVIEW_STARTED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha416df21, &Hf9d3, &H4a74, &H99, &H1b, &Hb8, &H17, &H29, &H89, &H52, &Hc4)
MF_CAPTURE_ENGINE_PREVIEW_STARTED = iid
End Function
Public Function MF_CAPTURE_ENGINE_PREVIEW_STOPPED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H13d5143c, &H1edd, &H4e50, &Ha2, &Hef, &H35, &H0a, &H47, &H67, &H80, &H60)
MF_CAPTURE_ENGINE_PREVIEW_STOPPED = iid
End Function
Public Function MF_CAPTURE_ENGINE_RECORD_STARTED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hac2b027b, &Hddf9, &H48a0, &H89, &Hbe, &H38, &Hab, &H35, &Hef, &H45, &Hc0)
MF_CAPTURE_ENGINE_RECORD_STARTED = iid
End Function
Public Function MF_CAPTURE_ENGINE_RECORD_STOPPED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H55e5200a, &Hf98f, &H4c0d, &Ha9, &Hec, &H9e, &Hb2, &H5e, &Hd3, &Hd7, &H73)
MF_CAPTURE_ENGINE_RECORD_STOPPED = iid
End Function
Public Function MF_CAPTURE_ENGINE_PHOTO_TAKEN() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3c50c445, &H7304, &H48eb, &H86, &H5d, &Hbb, &Ha1, &H9b, &Ha3, &Haf, &H5c)
MF_CAPTURE_ENGINE_PHOTO_TAKEN = iid
End Function
Public Function MF_CAPTURE_SOURCE_CURRENT_DEVICE_MEDIA_TYPE_SET() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He7e75e4c, &H039c, &H4410, &H81, &H5b, &H87, &H41, &H30, &H7b, &H63, &Haa)
MF_CAPTURE_SOURCE_CURRENT_DEVICE_MEDIA_TYPE_SET = iid
End Function
Public Function MF_CAPTURE_ENGINE_ERROR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H46b89fc6, &H33cc, &H4399, &H9d, &Had, &H78, &H4d, &He7, &H7d, &H58, &H7c)
MF_CAPTURE_ENGINE_ERROR = iid
End Function
Public Function MF_CAPTURE_ENGINE_EFFECT_ADDED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Haa8dc7b5, &Ha048, &H4e13, &H8e, &Hbe, &Hf2, &H3c, &H46, &Hc8, &H30, &Hc1)
MF_CAPTURE_ENGINE_EFFECT_ADDED = iid
End Function
Public Function MF_CAPTURE_ENGINE_EFFECT_REMOVED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc6e8db07, &Hfb09, &H4a48, &H89, &Hc6, &Hbf, &H92, &Ha0, &H42, &H22, &Hc9)
MF_CAPTURE_ENGINE_EFFECT_REMOVED = iid
End Function
Public Function MF_CAPTURE_ENGINE_ALL_EFFECTS_REMOVED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hfded7521, &H8ed8, &H431a, &Ha9, &H6b, &Hf3, &He2, &H56, &H5e, &H98, &H1c)
MF_CAPTURE_ENGINE_ALL_EFFECTS_REMOVED = iid
End Function
Public Function MF_CAPTURE_SINK_PREPARED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7BFCE257, &H12B1, &H4409, &H8C, &H34, &HD4, &H45, &HDA, &HAB, &H75, &H78)
MF_CAPTURE_SINK_PREPARED = iid
End Function
Public Function MF_CAPTURE_ENGINE_OUTPUT_MEDIA_TYPE_SET() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hcaaad994, &H83ec, &H45e9, &Ha3, &H0a, &H1f, &H20, &Haa, &Hdb, &H98, &H31)
MF_CAPTURE_ENGINE_OUTPUT_MEDIA_TYPE_SET = iid
End Function
Public Function MF_CAPTURE_ENGINE_D3D_MANAGER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H76e25e7b, &Hd595, &H4283, &H96, &H2c, &Hc5, &H94, &Haf, &Hd7, &H8d, &Hdf)
MF_CAPTURE_ENGINE_D3D_MANAGER = iid
End Function
Public Function MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_UNPROCESSED_SAMPLES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb467f705, &H7913, &H4894, &H9d, &H42, &Ha2, &H15, &Hfe, &Ha2, &H3d, &Ha9)
MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_UNPROCESSED_SAMPLES = iid
End Function
Public Function MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_UNPROCESSED_SAMPLES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1cddb141, &Ha7f4, &H4d58, &H98, &H96, &H4d, &H15, &Ha5, &H3c, &H4e, &Hfe)
MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_UNPROCESSED_SAMPLES = iid
End Function
Public Function MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_PROCESSED_SAMPLES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He7b4a49e, &H382c, &H4aef, &Ha9, &H46, &Hae, &Hd5, &H49, &Hb, &H71, &H11)
MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_PROCESSED_SAMPLES = iid
End Function
Public Function MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_PROCESSED_SAMPLES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9896e12a, &Hf707, &H4500, &Hb6, &Hbd, &Hdb, &H8e, &Hb8, &H10, &Hb5, &Hf)
MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_PROCESSED_SAMPLES = iid
End Function
Public Function MF_CAPTURE_ENGINE_USE_AUDIO_DEVICE_ONLY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1c8077da, &H8466, &H4dc4, &H8b, &H8e, &H27, &H6b, &H3f, &H85, &H92, &H3b)
MF_CAPTURE_ENGINE_USE_AUDIO_DEVICE_ONLY = iid
End Function
Public Function MF_CAPTURE_ENGINE_USE_VIDEO_DEVICE_ONLY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7e025171, &Hcf32, &H4f2e, &H8f, &H19, &H41, &H5, &H77, &Hb7, &H3a, &H66)
MF_CAPTURE_ENGINE_USE_VIDEO_DEVICE_ONLY = iid
End Function
Public Function MF_CAPTURE_ENGINE_DISABLE_HARDWARE_TRANSFORMS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb7c42a6b, &H3207, &H4495, &Hb4, &He7, &H81, &Hf9, &Hc3, &H5d, &H59, &H91)
MF_CAPTURE_ENGINE_DISABLE_HARDWARE_TRANSFORMS = iid
End Function
Public Function MF_CAPTURE_ENGINE_DISABLE_DXVA() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf9818862, &H179d, &H433f, &Ha3, &H2f, &H74, &Hcb, &Hcf, &H74, &H46, &H6d)
MF_CAPTURE_ENGINE_DISABLE_DXVA = iid
End Function
Public Function MF_CAPTURE_ENGINE_MEDIASOURCE_CONFIG() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hbc6989d2, &H0fc1, &H46e1, &Ha7, &H4f, &Hef, &Hd3, &H6b, &Hc7, &H88, &Hde)
MF_CAPTURE_ENGINE_MEDIASOURCE_CONFIG = iid
End Function
Public Function MF_CAPTURE_ENGINE_DECODER_MFT_FIELDOFUSE_UNLOCK_Attribute() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2b8ad2e8, &H7acb, &H4321, &Ha6, &H06, &H32, &H5c, &H42, &H49, &Hf4, &Hfc)
MF_CAPTURE_ENGINE_DECODER_MFT_FIELDOFUSE_UNLOCK_Attribute = iid
End Function
Public Function MF_CAPTURE_ENGINE_ENCODER_MFT_FIELDOFUSE_UNLOCK_Attribute() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H54c63a00, &H78d5, &H422f, &Haa, &H3e, &H5e, &H99, &Hac, &H64, &H92, &H69)
MF_CAPTURE_ENGINE_ENCODER_MFT_FIELDOFUSE_UNLOCK_Attribute = iid
End Function
Public Function MF_CAPTURE_ENGINE_EVENT_GENERATOR_GUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Habfa8ad5, &Hfc6d, &H4911, &H87, &He0, &H96, &H19, &H45, &Hf8, &Hf7, &Hce)
MF_CAPTURE_ENGINE_EVENT_GENERATOR_GUID = iid
End Function
Public Function MF_CAPTURE_ENGINE_EVENT_STREAM_INDEX() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H82697f44, &Hb1cf, &H42eb, &H97, &H53, &Hf8, &H6d, &H64, &H9c, &H88, &H65)
MF_CAPTURE_ENGINE_EVENT_STREAM_INDEX = iid
End Function
Public Function MF_CAPTURE_ENGINE_SELECTEDCAMERAPROFILE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H03160B7E, &H1C6F, &H4DB2, &HAD, &H56, &HA7, &HC4, &H30, &HF8, &H23, &H92)
MF_CAPTURE_ENGINE_SELECTEDCAMERAPROFILE = iid
End Function
Public Function MF_CAPTURE_ENGINE_SELECTEDCAMERAPROFILE_INDEX() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CE88613, &H2214, &H46C3, &HB4, &H17, &H82, &HF8, &HA3, &H13, &HC9, &HC3)
MF_CAPTURE_ENGINE_SELECTEDCAMERAPROFILE_INDEX = iid
End Function
Public Function CLSID_MFCaptureEngine() As UUID
'{efce38d3-8914-4674-a7df-ae1b3d654b8a}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hefce38d3, CInt(&H8914), CInt(&H4674), &Ha7, &Hdf, &Hae, &H1b, &H3d, &H65, &H4b, &H8a)
 CLSID_MFCaptureEngine = iid
End Function
Public Function CLSID_MFCaptureEngineClassFactory() As UUID
'{efce38d3-8914-4674-a7df-ae1b3d654b8a}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hefce38d3, CInt(&H8914), CInt(&H4674), &Ha7, &Hdf, &Hae, &H1b, &H3d, &H65, &H4b, &H8a)
 CLSID_MFCaptureEngineClassFactory = iid
End Function
Public Function MFSampleExtension_DeviceReferenceSystemTime() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6523775a, &Hba2d, &H405f, &Hb2, &Hc5, &H01, &Hff, &H88, &He2, &He8, &Hf6)
MFSampleExtension_DeviceReferenceSystemTime = iid
End Function
Public Function CLSID_MFReadWriteClassFactory() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H48e2ed0f, &H98c2, &H4a37, &Hbe, &Hd5, &H16, &H63, &H12, &Hdd, &Hd8, &H3f)
CLSID_MFReadWriteClassFactory = iid
End Function
Public Function CLSID_MFSourceReader() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1777133c, &H0881, &H411b, &Ha5, &H77, &Had, &H54, &H5f, &H07, &H14, &Hc4)
CLSID_MFSourceReader = iid
End Function
Public Function MF_SOURCE_READER_ASYNC_CALLBACK() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1e3dbeac, &Hbb43, &H4c35, &Hb5, &H07, &Hcd, &H64, &H44, &H64, &Hc9, &H65)
 MF_SOURCE_READER_ASYNC_CALLBACK = iid
End Function
Public Function MF_SOURCE_READER_DISABLE_DXVA() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Haa456cfd, &H3943, &H4a1e, &Ha7, &H7d, &H18, &H38, &Hc0, &Hea, &H2e, &H35)
 MF_SOURCE_READER_DISABLE_DXVA = iid
End Function
Public Function MF_SOURCE_READER_MEDIASOURCE_CONFIG() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9085abeb, &H0354, &H48f9, &Hab, &Hb5, &H20, &H0d, &Hf8, &H38, &Hc6, &H8e)
 MF_SOURCE_READER_MEDIASOURCE_CONFIG = iid
End Function
Public Function MF_SOURCE_READER_MEDIASOURCE_CHARACTERISTICS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6d23f5c8, &Hc5d7, &H4a9b, &H99, &H71, &H5d, &H11, &Hf8, &Hbc, &Ha8, &H80)
 MF_SOURCE_READER_MEDIASOURCE_CHARACTERISTICS = iid
End Function
Public Function MF_SOURCE_READER_ENABLE_VIDEO_PROCESSING() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hfb394f3d, &Hccf1, &H42ee, &Hbb, &Hb3, &Hf9, &Hb8, &H45, &Hd5, &H68, &H1d)
 MF_SOURCE_READER_ENABLE_VIDEO_PROCESSING = iid
End Function
Public Function MF_SOURCE_READER_ENABLE_ADVANCED_VIDEO_PROCESSING() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf81da2c, &Hb537, &H4672, &Ha8, &Hb2, &Ha6, &H81, &Hb1, &H73, &H7, &Ha3)
 MF_SOURCE_READER_ENABLE_ADVANCED_VIDEO_PROCESSING = iid
End Function
Public Function MF_SOURCE_READER_DISABLE_CAMERA_PLUGINS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9d3365dd, &H58f, &H4cfb, &H9f, &H97, &Hb3, &H14, &Hcc, &H99, &Hc8, &Had)
 MF_SOURCE_READER_DISABLE_CAMERA_PLUGINS = iid
End Function
Public Function MF_SOURCE_READER_DISCONNECT_MEDIASOURCE_ON_SHUTDOWN() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H56b67165, &H219e, &H456d, &Ha2, &H2e, &H2d, &H30, &H04, &Hc7, &Hfe, &H56)
 MF_SOURCE_READER_DISCONNECT_MEDIASOURCE_ON_SHUTDOWN = iid
End Function
Public Function MF_SOURCE_READER_ENABLE_TRANSCODE_ONLY_TRANSFORMS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hdfd4f008, &Hb5fd, &H4e78, &Hae, &H44, &H62, &Ha1, &He6, &H7b, &Hbe, &H27)
 MF_SOURCE_READER_ENABLE_TRANSCODE_ONLY_TRANSFORMS = iid
End Function
Public Function MF_SOURCE_READER_D3D11_BIND_FLAGS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H33f3197b, &Hf73a, &H4e14, &H8d, &H85, &He, &H4c, &H43, &H68, &H78, &H8d)
 MF_SOURCE_READER_D3D11_BIND_FLAGS = iid
End Function
Public Function CLSID_MFSinkWriter() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha3bbfb17, &H8273, &H4e52, &H9e, &H0e, &H97, &H39, &Hdc, &H88, &H79, &H90)
CLSID_MFSinkWriter = iid
End Function
Public Function MF_SINK_WRITER_ASYNC_CALLBACK() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H48cb183e, &H7b0b, &H46f4, &H82, &H2e, &H5e, &H1d, &H2d, &Hda, &H43, &H54)
 MF_SINK_WRITER_ASYNC_CALLBACK = iid
End Function
Public Function MF_SINK_WRITER_DISABLE_THROTTLING() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H08b845d8, &H2b74, &H4afe, &H9d, &H53, &Hbe, &H16, &Hd2, &Hd5, &Hae, &H4f)
 MF_SINK_WRITER_DISABLE_THROTTLING = iid
End Function
Public Function MF_SINK_WRITER_D3D_MANAGER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hec822da2, &He1e9, &H4b29, &Ha0, &Hd8, &H56, &H3c, &H71, &H9f, &H52, &H69)
 MF_SINK_WRITER_D3D_MANAGER = iid
End Function
Public Function MF_SINK_WRITER_ENCODER_CONFIG() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Had91cd04, &Ha7cc, &H4ac7, &H99, &Hb6, &Ha5, &H7b, &H9a, &H4a, &H7c, &H70)
 MF_SINK_WRITER_ENCODER_CONFIG = iid
End Function
Public Function MF_READWRITE_DISABLE_CONVERTERS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H98d5b065, &H1374, &H4847, &H8d, &H5d, &H31, &H52, &H0f, &Hee, &H71, &H56)
 MF_READWRITE_DISABLE_CONVERTERS = iid
End Function
Public Function MF_READWRITE_ENABLE_HARDWARE_TRANSFORMS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha634a91c, &H822b, &H41b9, &Ha4, &H94, &H4d, &He4, &H64, &H36, &H12, &Hb0)
 MF_READWRITE_ENABLE_HARDWARE_TRANSFORMS = iid
End Function
Public Function MF_READWRITE_MMCSS_CLASS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H39384300, &Hd0eb, &H40b1, &H87, &Ha0, &H33, &H18, &H87, &H1b, &H5a, &H53)
 MF_READWRITE_MMCSS_CLASS = iid
End Function
Public Function MF_READWRITE_MMCSS_PRIORITY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H43ad19ce, &Hf33f, &H4ba9, &Ha5, &H80, &He4, &Hcd, &H12, &Hf2, &Hd1, &H44)
 MF_READWRITE_MMCSS_PRIORITY = iid
End Function
Public Function MF_READWRITE_MMCSS_CLASS_AUDIO() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H430847da, &H0890, &H4b0e, &H93, &H8c, &H05, &H43, &H32, &Hc5, &H47, &He1)
 MF_READWRITE_MMCSS_CLASS_AUDIO = iid
End Function
Public Function MF_READWRITE_MMCSS_PRIORITY_AUDIO() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H273db885, &H2de2, &H4db2, &Ha6, &Ha7, &Hfd, &Hb6, &H6f, &Hb4, &H0b, &H61)
 MF_READWRITE_MMCSS_PRIORITY_AUDIO = iid
End Function
Public Function MF_READWRITE_D3D_OPTIONAL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H216479d9, &H3071, &H42ca, &Hbb, &H6c, &H4c, &H22, &H10, &H2e, &H1d, &H18)
 MF_READWRITE_D3D_OPTIONAL = iid
End Function
Public Function MF_MEDIASINK_AUTOFINALIZE_SUPPORTED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H48c131be, &H135a, &H41cb, &H82, &H90, &H3, &H65, &H25, &H9, &Hc9, &H99)
 MF_MEDIASINK_AUTOFINALIZE_SUPPORTED = iid
End Function
Public Function MF_MEDIASINK_ENABLE_AUTOFINALIZE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H34014265, &Hcb7e, &H4cde, &Hac, &H7c, &Hef, &Hfd, &H3b, &H3c, &H25, &H30)
 MF_MEDIASINK_ENABLE_AUTOFINALIZE = iid
End Function
Public Function MF_READWRITE_ENABLE_AUTOFINALIZE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hdd7ca129, &H8cd1, &H4dc5, &H9d, &Hde, &Hce, &H16, &H86, &H75, &Hde, &H61)
 MF_READWRITE_ENABLE_AUTOFINALIZE = iid
End Function
Public Function MF_DMFT_FRAME_BUFFER_INFO() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H396CE1C9, &H67A9, &H454C, &H87, &H97, &H95, &HA4, &H57, &H99, &HD8, &H04)
 MF_DMFT_FRAME_BUFFER_INFO = iid
End Function
Public Function MFT_AUDIO_DECODER_DEGRADATION_INFO_ATTRIBUTE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6c3386ad, &Hec20, &H430d, &Hb2, &Ha5, &H50, &H5c, &H71, &H78, &Hd9, &Hc4)
 MFT_AUDIO_DECODER_DEGRADATION_INFO_ATTRIBUTE = iid
End Function
Public Function MF_MSE_CALLBACK() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9063a7c0, &H42c5, &H4ffd, &Ha8, &Ha8, &H6f, &Hcf, &H9e, &Ha3, &Hd0, &H0c)
MF_MSE_CALLBACK = iid
End Function
Public Function MF_MSE_ACTIVELIST_CALLBACK() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H949bda0f, &H4549, &H46d5, &Had, &H7f, &Hb8, &H46, &He1, &Hab, &H16, &H52)
MF_MSE_ACTIVELIST_CALLBACK = iid
End Function
Public Function MF_MSE_BUFFERLIST_CALLBACK() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H42e669b0, &Hd60e, &H4afb, &Ha8, &H5b, &Hd8, &He5, &Hfe, &H6b, &Hda, &Hb5)
MF_MSE_BUFFERLIST_CALLBACK = iid
End Function
Public Function MF_MSE_VP9_SUPPORT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H92d78429, &Hd88b, &H4ff0, &H83, &H22, &H80, &H3e, &Hfa, &H6e, &H96, &H26)
MF_MSE_VP9_SUPPORT = iid
End Function
Public Function MF_MSE_OPUS_SUPPORT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4d224cc1, &H8cc4, &H48a3, &Ha7, &Ha7, &He4, &Hc1, &H6c, &He6, &H38, &H8a)
MF_MSE_OPUS_SUPPORT = iid
End Function
Public Function MF_MEDIA_ENGINE_NEEDKEY_CALLBACK() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7ea80843, &Hb6e4, &H432c, &H8e, &Ha4, &H78, &H48, &Hff, &He4, &H22, &H0e)
MF_MEDIA_ENGINE_NEEDKEY_CALLBACK = iid
End Function
Public Function MF_MEDIA_ENGINE_CALLBACK() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc60381b8, &H83a4, &H41f8, &Ha3, &Hd0, &Hde, &H05, &H07, &H68, &H49, &Ha9)
MF_MEDIA_ENGINE_CALLBACK = iid
End Function
Public Function MF_MEDIA_ENGINE_DXGI_MANAGER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H065702da, &H1094, &H486d, &H86, &H17, &Hee, &H7c, &Hc4, &Hee, &H46, &H48)
MF_MEDIA_ENGINE_DXGI_MANAGER = iid
End Function
Public Function MF_MEDIA_ENGINE_EXTENSION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3109fd46, &H060d, &H4b62, &H8d, &Hcf, &Hfa, &Hff, &H81, &H13, &H18, &Hd2)
MF_MEDIA_ENGINE_EXTENSION = iid
End Function
Public Function MF_MEDIA_ENGINE_PLAYBACK_HWND() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd988879b, &H67c9, &H4d92, &Hba, &Ha7, &H6e, &Had, &Hd4, &H46, &H03, &H9d)
MF_MEDIA_ENGINE_PLAYBACK_HWND = iid
End Function
Public Function MF_MEDIA_ENGINE_OPM_HWND() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha0be8ee7, &H0572, &H4f2c, &Ha8, &H01, &H2a, &H15, &H1b, &Hd3, &He7, &H26)
MF_MEDIA_ENGINE_OPM_HWND = iid
End Function
Public Function MF_MEDIA_ENGINE_PLAYBACK_VISUAL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6debd26f, &H6ab9, &H4d7e, &Hb0, &Hee, &Hc6, &H1a, &H73, &Hff, &Had, &H15)
MF_MEDIA_ENGINE_PLAYBACK_VISUAL = iid
End Function
Public Function MF_MEDIA_ENGINE_COREWINDOW() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hfccae4dc, &H0b7f, &H41c2, &H9f, &H96, &H46, &H59, &H94, &H8a, &Hcd, &Hdc)
MF_MEDIA_ENGINE_COREWINDOW = iid
End Function
Public Function MF_MEDIA_ENGINE_VIDEO_OUTPUT_FORMAT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5066893c, &H8cf9, &H42bc, &H8b, &H8a, &H47, &H22, &H12, &He5, &H27, &H26)
MF_MEDIA_ENGINE_VIDEO_OUTPUT_FORMAT = iid
End Function
Public Function MF_MEDIA_ENGINE_CONTENT_PROTECTION_FLAGS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He0350223, &H5aaf, &H4d76, &Ha7, &Hc3, &H06, &Hde, &H70, &H89, &H4d, &Hb4)
MF_MEDIA_ENGINE_CONTENT_PROTECTION_FLAGS = iid
End Function
Public Function MF_MEDIA_ENGINE_CONTENT_PROTECTION_MANAGER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hfdd6dfaa, &Hbd85, &H4af3, &H9e, &H0f, &Ha0, &H1d, &H53, &H9d, &H87, &H6a)
MF_MEDIA_ENGINE_CONTENT_PROTECTION_MANAGER = iid
End Function
Public Function MF_MEDIA_ENGINE_AUDIO_ENDPOINT_ROLE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd2cb93d1, &H116a, &H44f2, &H93, &H85, &Hf7, &Hd0, &Hfd, &Ha2, &Hfb, &H46)
MF_MEDIA_ENGINE_AUDIO_ENDPOINT_ROLE = iid
End Function
Public Function MF_MEDIA_ENGINE_AUDIO_CATEGORY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc8d4c51d, &H350e, &H41f2, &Hba, &H46, &Hfa, &Heb, &Hbb, &H08, &H57, &Hf6)
MF_MEDIA_ENGINE_AUDIO_CATEGORY = iid
End Function
Public Function MF_MEDIA_ENGINE_STREAM_CONTAINS_ALPHA_CHANNEL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5cbfaf44, &Hd2b2, &H4cfb, &H80, &Ha7, &Hd4, &H29, &Hc7, &H4c, &H78, &H9d)
MF_MEDIA_ENGINE_STREAM_CONTAINS_ALPHA_CHANNEL = iid
End Function
Public Function MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4e0212e2, &He18f, &H41e1, &H95, &He5, &Hc0, &He7, &He9, &H23, &H5b, &Hc3)
MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE = iid
End Function
Public Function MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE9() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H052c2d39, &H40c0, &H4188, &Hab, &H86, &Hf8, &H28, &H27, &H3b, &H75, &H22)
MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE9 = iid
End Function
Public Function MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE10() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H11a47afd, &H6589, &H4124, &Hb3, &H12, &H61, &H58, &Hec, &H51, &H7f, &Hc3)
MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE10 = iid
End Function
Public Function MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE11() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1cf1315f, &Hce3f, &H4035, &H93, &H91, &H16, &H14, &H2f, &H77, &H51, &H89)
MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE11 = iid
End Function
Public Function MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE_EDGE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha6f3e465, &H3aca, &H442c, &Ha3, &Hf0, &Had, &H6d, &Hda, &Hd8, &H39, &Hae)
MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE_EDGE = iid
End Function
Public Function MF_MEDIA_ENGINE_COMPATIBILITY_MODE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3ef26ad4, &Hdc54, &H45de, &Hb9, &Haf, &H76, &Hc8, &Hc6, &H6b, &Hfa, &H8e)
MF_MEDIA_ENGINE_COMPATIBILITY_MODE = iid
End Function
Public Function MF_MEDIA_ENGINE_COMPATIBILITY_MODE_WWA_EDGE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H15b29098, &H9f01, &H4e4d, &Hb6, &H5a, &Hc0, &H6c, &H6c, &H89, &Hda, &H2a)
MF_MEDIA_ENGINE_COMPATIBILITY_MODE_WWA_EDGE = iid
End Function
Public Function MF_MEDIA_ENGINE_COMPATIBILITY_MODE_WIN10() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5b25e089, &H6ca7, &H4139, &Ha2, &Hcb, &Hfc, &Haa, &Hb3, &H95, &H52, &Ha3)
MF_MEDIA_ENGINE_COMPATIBILITY_MODE_WIN10 = iid
End Function
Public Function MF_MEDIA_ENGINE_SOURCE_RESOLVER_CONFIG_STORE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0ac0c497, &Hb3c4, &H48c9, &H9c, &Hde, &Hbb, &H8c, &Ha2, &H44, &H2c, &Ha3)
MF_MEDIA_ENGINE_SOURCE_RESOLVER_CONFIG_STORE = iid
End Function
Public Function MF_MEDIA_ENGINE_TRACK_ID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H65bea312, &H4043, &H4815, &H8e, &Hab, &H44, &Hdc, &He2, &Hef, &H8f, &H2a)
MF_MEDIA_ENGINE_TRACK_ID = iid
End Function
Public Function MF_MEDIA_ENGINE_TELEMETRY_APPLICATION_ID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1e7b273b, &Ha7e4, &H402a, &H8f, &H51, &Hc4, &H8e, &H88, &Ha2, &Hca, &Hbc)
MF_MEDIA_ENGINE_TELEMETRY_APPLICATION_ID = iid
End Function
Public Function MF_MEDIA_ENGINE_SYNCHRONOUS_CLOSE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc3c2e12f, &H7e0e, &H4e43, &Hb9, &H1c, &Hdc, &H99, &H2c, &Hcd, &Hfa, &H5e)
MF_MEDIA_ENGINE_SYNCHRONOUS_CLOSE = iid
End Function
Public Function MF_MEDIA_ENGINE_MEDIA_PLAYER_MODE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3ddd8d45, &H5aa1, &H4112, &H82, &He5, &H36, &Hf6, &Ha2, &H19, &H7e, &H6e)
MF_MEDIA_ENGINE_MEDIA_PLAYER_MODE = iid
End Function
Public Function CLSID_MFMediaEngineClassFactory() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb44392da, &H499b, &H446b, &Ha4, &Hcb, &H0, &H5f, &Hea, &Hd0, &He6, &Hd5)
CLSID_MFMediaEngineClassFactory = iid
End Function
Public Function MF_MEDIA_ENGINE_TIMEDTEXT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H805ea411, &H92e0, &H4e59, &H9b, &H6e, &H5c, &H7d, &H79, &H15, &He6, &H4f)
 MF_MEDIA_ENGINE_TIMEDTEXT = iid
End Function
Public Function MF_MEDIA_ENGINE_CONTINUE_ON_CODEC_ERROR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hdbcdb7f9, &H48e4, &H4295, &Hb7, &H0d, &Hd5, &H18, &H23, &H4e, &Heb, &H38)
MF_MEDIA_ENGINE_CONTINUE_ON_CODEC_ERROR = iid
End Function
Public Function MF_MEDIA_ENGINE_EME_CALLBACK() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494553a7, &Ha481, &H4cb7, &Hbe, &Hc5, &H38, &H09, &H03, &H51, &H37, &H31)
MF_MEDIA_ENGINE_EME_CALLBACK = iid
End Function
Public Function MF_CONTENTDECRYPTIONMODULE_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H15320c45, &Hff80, &H484a, &H9d, &Hcb, &Hd, &Hf8, &H94, &He6, &H9a, &H1)
 MF_CONTENTDECRYPTIONMODULE_SERVICE = iid
End Function
Public Function CLSID_MPEG2DLNASink() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hfa5fe7c5, &H6a1d, &H4b11, &Hb4, &H1f, &Hf9, &H59, &Hd6, &Hc7, &H65, &H00)
 CLSID_MPEG2DLNASink = iid
End Function
Public Function MF_MP2DLNA_USE_MMCSS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H54f3e2ee, &Ha2a2, &H497d, &H98, &H34, &H97, &H3a, &Hfd, &He5, &H21, &Heb)
 MF_MP2DLNA_USE_MMCSS = iid
End Function
Public Function MF_MP2DLNA_VIDEO_BIT_RATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He88548de, &H73b4, &H42d7, &H9c, &H75, &Had, &Hfa, &Ha, &H2a, &H6e, &H4c)
 MF_MP2DLNA_VIDEO_BIT_RATE = iid
End Function
Public Function MF_MP2DLNA_AUDIO_BIT_RATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2d1c070e, &H2b5f, &H4ab3, &Ha7, &He6, &H8d, &H94, &H3b, &Ha8, &Hd0, &H0a)
 MF_MP2DLNA_AUDIO_BIT_RATE = iid
End Function
Public Function MF_MP2DLNA_ENCODE_QUALITY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb52379d7, &H1d46, &H4fb6, &Ha3, &H17, &Ha4, &Ha5, &Hf6, &H09, &H59, &Hf8)
 MF_MP2DLNA_ENCODE_QUALITY = iid
End Function
Public Function MF_MP2DLNA_STATISTICS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H75e488a3, &Hd5ad, &H4898, &H85, &He0, &Hbc, &Hce, &H24, &Ha7, &H22, &Hd7)
 MF_MP2DLNA_STATISTICS = iid
End Function
Public Function MF_MEDIA_SHARING_ENGINE_DEVICE_NAME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H771e05d1, &H862f, &H4299, &H95, &Hac, &Hae, &H81, &Hfd, &H14, &Hf3, &He7)
MF_MEDIA_SHARING_ENGINE_DEVICE_NAME = iid
End Function
Public Function MF_MEDIA_SHARING_ENGINE_DEVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb461c58a, &H7a08, &H4b98, &H99, &Ha8, &H70, &Hfd, &H5f, &H3b, &Had, &Hfd)
MF_MEDIA_SHARING_ENGINE_DEVICE = iid
End Function
Public Function MF_MEDIA_SHARING_ENGINE_INITIAL_SEEK_TIME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6f3497f5, &Hd528, &H4a4f, &H8d, &Hd7, &Hdb, &H36, &H65, &H7e, &Hc4, &Hc9)
MF_MEDIA_SHARING_ENGINE_INITIAL_SEEK_TIME = iid
End Function
Public Function MF_SHUTDOWN_RENDERER_ON_ENGINE_SHUTDOWN() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc112d94d, &H6b9c, &H48f8, &Hb6, &Hf9, &H79, &H50, &Hff, &H9a, &Hb7, &H1e)
MF_SHUTDOWN_RENDERER_ON_ENGINE_SHUTDOWN = iid
End Function
Public Function MF_PREFERRED_SOURCE_URI() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5fc85488, &H436a, &H4db8, &H90, &Haf, &H4d, &Hb4, &H2, &Hae, &H5c, &H57)
MF_PREFERRED_SOURCE_URI = iid
End Function
Public Function MF_SHARING_ENGINE_SHAREDRENDERER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hefa446a0, &H73e7, &H404e, &H8a, &He2, &Hfe, &Hf6, &H0a, &Hf5, &Ha3, &H2b)
MF_SHARING_ENGINE_SHAREDRENDERER = iid
End Function
Public Function MF_SHARING_ENGINE_CALLBACK() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57dc1e95, &Hd252, &H43fa, &H9b, &Hbc, &H18, &H0, &H70, &Hee, &Hfe, &H6d)
MF_SHARING_ENGINE_CALLBACK = iid
End Function
Public Function CLSID_MFMediaSharingEngineClassFactory() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf8e307fb, &H6d45, &H4ad3, &H99, &H93, &H66, &Hcd, &H5a, &H52, &H96, &H59)
CLSID_MFMediaSharingEngineClassFactory = iid
End Function
Public Function CLSID_MFImageSharingEngineClassFactory() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb22c3339, &H87f3, &H4059, &Ha0, &Hc5, &H3, &H7a, &Ha9, &H70, &H7e, &Haf)
CLSID_MFImageSharingEngineClassFactory = iid
End Function
Public Function CLSID_PlayToSourceClassFactory() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HDA17539A, &H3DC3, &H42C1, &HA7, &H49, &HA1, &H83, &HB5, &H1F, &H08, &H5E)
CLSID_PlayToSourceClassFactory = iid
End Function
Public Function GUID_PlayToService() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf6a8ff9d, &H9e14, &H41c9, &Hbf, &H0f, &H12, &H0a, &H2b, &H3c, &He1, &H20)
GUID_PlayToService = iid
End Function
Public Function GUID_NativeDeviceService() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hef71e53c, &H52f4, &H43c5, &Hb8, &H6a, &Had, &H6c, &Hb2, &H16, &Ha6, &H1e)
GUID_NativeDeviceService = iid
End Function
Public Function MF_DEVSOURCE_ATTRIBUTE_ENABLE_MS_CAMERA_EFFECTS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H28A5531A, &H57DD, &H4FD5, &HAA, &HA7, &H38, &H5A, &HBF, &H57, &HD7, &H85)
MF_DEVSOURCE_ATTRIBUTE_ENABLE_MS_CAMERA_EFFECTS = iid
End Function
Public Function MF_VIRTUALCAMERA_ASSOCIATED_CAMERA_SOURCES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1BB79E7C, &H5D83, &H438C, &H94, &HD8, &HE5, &HF0, &HDF, &H6D, &H32, &H79)
MF_VIRTUALCAMERA_ASSOCIATED_CAMERA_SOURCES = iid
End Function
Public Function MF_VIRTUALCAMERA_PROVIDE_ASSOCIATED_CAMERA_SOURCES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF0273718, &H4A4D, &H4AC5, &HA1, &H5D, &H30, &H5E, &HB5, &HE9, &H06, &H67)
MF_VIRTUALCAMERA_PROVIDE_ASSOCIATED_CAMERA_SOURCES = iid
End Function
Public Function MF_VIRTUALCAMERA_CONFIGURATION_APP_PACKAGE_FAMILY_NAME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H658ABE51, &H8044, &H462E, &H97, &HEA, &HE6, &H76, &HFD, &H72, &H05, &H5F)
MF_VIRTUALCAMERA_CONFIGURATION_APP_PACKAGE_FAMILY_NAME = iid
End Function
Public Function MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_INITIALIZE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE52C4DFF, &HE46D, &H4D0B, &HBC, &H75, &HDD, &HD4, &HC8, &H72, &H3F, &H96)
MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_INITIALIZE = iid
End Function
Public Function MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_START() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HB1EEB989, &HB456, &H4F4A, &HAE, &H40, &H07, &H9C, &H28, &HE2, &H4A, &HF8)
MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_START = iid
End Function
Public Function MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_STOP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HB7FE7A61, &HFE91, &H415E, &H86, &H08, &HD3, &H7D, &HED, &HB1, &HA5, &H8B)
MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_STOP = iid
End Function
Public Function MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_UNINITIALIZE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA0EBABA7, &HA422, &H4E33, &H84, &H01, &HB3, &H7D, &H28, &H00, &HAA, &H67)
MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_UNINITIALIZE = iid
End Function
Public Function MF_FRAMESERVER_VCAMEVENT_EXTENDED_PIPELINE_SHUTDOWN() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H45A81B31, &H43F8, &H4E5D, &H8C, &HE2, &H22, &HDC, &HE0, &H26, &H99, &H6D)
MF_FRAMESERVER_VCAMEVENT_EXTENDED_PIPELINE_SHUTDOWN = iid
End Function
Public Function MF_FRAMESERVER_VCAMEVENT_EXTENDED_CUSTOM_EVENT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6E59489C, &H47D3, &H4467, &H83, &HEF, &H12, &HD3, &H4E, &H87, &H16, &H65)
MF_FRAMESERVER_VCAMEVENT_EXTENDED_CUSTOM_EVENT = iid
End Function
Public Function MFNETSOURCE_CROSS_ORIGIN_SUPPORT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9842207c, &Hb02c, &H4271, &Ha2, &Hfc, &H72, &He4, &H93, &H8, &He5, &Hc2)
MFNETSOURCE_CROSS_ORIGIN_SUPPORT = iid
End Function
Public Function MFNETSOURCE_HTTP_DOWNLOAD_SESSION_PROVIDER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7d55081e, &H307d, &H4d6d, &Ha6, &H63, &Ha9, &H3b, &He9, &H7c, &H4b, &H5c)
MFNETSOURCE_HTTP_DOWNLOAD_SESSION_PROVIDER = iid
End Function
Public Function MF_SD_MEDIASOURCE_STATUS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1913678b, &Hfc0f, &H44da, &H8f, &H43, &H1b, &Ha3, &Hb5, &H26, &Hf4, &Hae)
MF_SD_MEDIASOURCE_STATUS = iid
End Function
Public Function MF_SD_VIDEO_SPHERICAL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha51da449, &H3fdc, &H478c, &Hbc, &Hb5, &H30, &Hbe, &H76, &H59, &H5f, &H55)
MF_SD_VIDEO_SPHERICAL = iid
End Function
Public Function MF_SD_VIDEO_SPHERICAL_FORMAT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4a8fc407, &H6ea1, &H46c8, &Hb5, &H67, &H69, &H71, &Hd4, &Ha1, &H39, &Hc3)
MF_SD_VIDEO_SPHERICAL_FORMAT = iid
End Function
Public Function MF_SD_VIDEO_SPHERICAL_INITIAL_VIEWDIRECTION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H11d25a49, &Hbb62, &H467f, &H9d, &Hb1, &Hc1, &H71, &H65, &H71, &H6c, &H49)
MF_SD_VIDEO_SPHERICAL_INITIAL_VIEWDIRECTION = iid
End Function
Public Function MF_MEDIASOURCE_EXPOSE_ALL_STREAMS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He7f250b8, &H8fd9, &H4a09, &Hb6, &Hc1, &H6a, &H31, &H5c, &H7c, &H72, &He)
MF_MEDIASOURCE_EXPOSE_ALL_STREAMS = iid
End Function
Public Function MF_ST_MEDIASOURCE_COLLECTION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H616DE972, &H83AD, &H4950, &H81, &H70, &H63, &H0D, &H19, &HCB, &HE3, &H07)
MF_ST_MEDIASOURCE_COLLECTION = iid
End Function
Public Function MF_DEVICESTREAM_FILTER_KSCONTROL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H46783CCA, &H3DF5, &H4923, &HA9, &HEF, &H36, &HB7, &H22, &H3E, &HDD, &HE0)
MF_DEVICESTREAM_FILTER_KSCONTROL = iid
End Function
Public Function MF_DEVICESTREAM_PIN_KSCONTROL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HEF3EF9A7, &H87F2, &H48CA, &HBE, &H02, &H67, &H48, &H78, &H91, &H8E, &H98)
MF_DEVICESTREAM_PIN_KSCONTROL = iid
End Function
Public Function MF_DEVICESTREAM_SOURCE_ATTRIBUTES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2F8CB617, &H361B, &H434F, &H85, &HEA, &H99, &HA0, &H3E, &H1C, &HE4, &HE0)
MF_DEVICESTREAM_SOURCE_ATTRIBUTES = iid
End Function
Public Function MF_DEVICESTREAM_FRAMESERVER_HIDDEN() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF402567B, &H4D91, &H4179, &H96, &HD1, &H74, &HC8, &H48, &H0C, &H20, &H34)
 MF_DEVICESTREAM_FRAMESERVER_HIDDEN = iid
End Function
Public Function MF_STF_VERSION_INFO() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6770BD39, &HEF82, &H44EE, &HA4, &H9B, &H93, &H4B, &HEB, &H24, &HAE, &HF7)
 MF_STF_VERSION_INFO = iid
End Function
Public Function MF_STF_VERSION_DATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H31A165D5, &HDF67, &H4095, &H8E, &H44, &H88, &H68, &HFC, &H20, &HDB, &HFD)
 MF_STF_VERSION_DATE = iid
End Function
Public Function MF_DEVICESTREAM_REQUIRED_CAPABILITIES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6D8B957E, &H7CF6, &H43F4, &HAF, &H56, &H9C, &H0E, &H1E, &H4F, &HCB, &HE1)
 MF_DEVICESTREAM_REQUIRED_CAPABILITIES = iid
End Function
Public Function MF_DEVICESTREAM_REQUIRED_SDDL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H331AE85D, &HC0D3, &H49BA, &H83, &HBA, &H82, &HA1, &H2D, &H63, &HCD, &HD6)
 MF_DEVICESTREAM_REQUIRED_SDDL = iid
End Function
Public Function MF_DEVICEMFT_SENSORPROFILE_COLLECTION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H36EBDC44, &HB12C, &H441B, &H89, &HF4, &H08, &HB2, &HF4, &H1A, &H9C, &HFC)
MF_DEVICEMFT_SENSORPROFILE_COLLECTION = iid
End Function
Public Function MF_DEVICESTREAM_SENSORSTREAM_ID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE35B9FE4, &H0659, &H4CAD, &HBB, &H51, &H33, &H16, &H0B, &HE7, &HE4, &H13)
MF_DEVICESTREAM_SENSORSTREAM_ID = iid
End Function
Public Function CLSID_CameraConfigurationManager() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6C92B540, &H5854, &H4A17, &H92, &HB6, &HAC, &H89, &HC9, &H6E, &H96, &H83)
CLSID_CameraConfigurationManager = iid
End Function
Public Function KSPROPERTYSETID_ANYCAMERACONTROL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H94dd0c30, &H28c7, &H4efb, &H9d, &H6b, &H81, &H23, &H0, &Hfb, &Hc, &H7f)
KSPROPERTYSETID_ANYCAMERACONTROL = iid
End Function
Public Function MFStreamExtension_ExtendedCameraIntrinsics() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Haa74b3df, &H9a2c, &H48d6, &H83, &H93, &H5b, &Hd1, &Hc1, &Ha8, &H1e, &H6e)
MFStreamExtension_ExtendedCameraIntrinsics = iid
End Function
Public Function MFSampleExtension_ExtendedCameraIntrinsics() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H560bc4a5, &H4de0, &H4113, &H9c, &Hdc, &H83, &H2d, &Hb9, &H74, &Hf, &H3d)
MFSampleExtension_ExtendedCameraIntrinsics = iid
End Function
Public Function MF_SA_D3D11_BINDFLAGS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Heacf97ad, &H065c, &H4408, &Hbe, &He3, &Hfd, &Hcb, &Hfd, &H12, &H8b, &He2)
MF_SA_D3D11_BINDFLAGS = iid
End Function
Public Function MF_SA_D3D11_USAGE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He85fe442, &H2ca3, &H486e, &Ha9, &Hc7, &H10, &H9d, &Hda, &H60, &H98, &H80)
MF_SA_D3D11_USAGE = iid
End Function
Public Function MF_SA_D3D11_AWARE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H206b4fc8, &Hfcf9, &H4c51, &Haf, &He3, &H97, &H64, &H36, &H9e, &H33, &Ha0)
MF_SA_D3D11_AWARE = iid
End Function
Public Function MF_SA_D3D11_SHARED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7b8f32c3, &H6d96, &H4b89, &H92, &H3, &Hdd, &H38, &Hb6, &H14, &H14, &Hf3)
MF_SA_D3D11_SHARED = iid
End Function
Public Function MF_SA_D3D11_SHARED_WITHOUT_MUTEX() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H39dbd44d, &H2e44, &H4931, &Ha4, &Hc8, &H35, &H2d, &H3d, &Hc4, &H21, &H15)
MF_SA_D3D11_SHARED_WITHOUT_MUTEX = iid
End Function
Public Function MF_SA_D3D11_ALLOW_DYNAMIC_YUV_TEXTURE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hce06d49f, &H613, &H4b9d, &H86, &Ha6, &Hd8, &Hc4, &Hf9, &Hc1, &H0, &H75)
MF_SA_D3D11_ALLOW_DYNAMIC_YUV_TEXTURE = iid
End Function
Public Function MF_SA_D3D11_HW_PROTECTED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3a8ba9d9, &H92ca, &H4307, &Ha3, &H91, &H69, &H99, &Hdb, &Hf3, &Hb6, &Hce)
MF_SA_D3D11_HW_PROTECTED = iid
End Function
Public Function MF_SA_D3D_AWARE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Heaa35c29, &H775e, &H488e, &H9b, &H61, &Hb3, &H28, &H3e, &H49, &H58, &H3b)
MF_SA_D3D_AWARE = iid
End Function
Public Function MFT_SUPPORT_3DVIDEO() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H93f81b1, &H4f2e, &H4631, &H81, &H68, &H79, &H34, &H3, &H2a, &H1, &Hd3)
MFT_SUPPORT_3DVIDEO = iid
End Function
Public Function MF_ENABLE_3DVIDEO_OUTPUT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hbdad7bca, &He5f, &H4b10, &Hab, &H16, &H26, &Hde, &H38, &H1b, &H62, &H93)
MF_ENABLE_3DVIDEO_OUTPUT = iid
End Function
Public Function MF_SA_BUFFERS_PER_SAMPLE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H873c5171, &H1e3d, &H4e25, &H98, &H8d, &Hb4, &H33, &Hce, &H04, &H19, &H83)
MF_SA_BUFFERS_PER_SAMPLE = iid
End Function
Public Function MF_SA_D3D11_ALLOCATE_DISPLAYABLE_RESOURCES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Heeface6d, &H2ea9, &H4adf, &Hbb, &Hdf, &H7b, &Hbc, &H48, &H2a, &H1b, &H6d)
MF_SA_D3D11_ALLOCATE_DISPLAYABLE_RESOURCES = iid
End Function
Public Function MFT_DECODER_EXPOSE_OUTPUT_TYPES_IN_NATIVE_ORDER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hef80833f, &Hf8fa, &H44d9, &H80, &Hd8, &H41, &Hed, &H62, &H32, &H67, &Hc)
MFT_DECODER_EXPOSE_OUTPUT_TYPES_IN_NATIVE_ORDER = iid
End Function
Public Function MFT_DECODER_QUALITY_MANAGEMENT_CUSTOM_CONTROL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha24e30d7, &Hde25, &H4558, &Hbb, &Hfb, &H71, &H7, &Ha, &H2d, &H33, &H2e)
MFT_DECODER_QUALITY_MANAGEMENT_CUSTOM_CONTROL = iid
End Function
Public Function MFT_DECODER_QUALITY_MANAGEMENT_RECOVERY_WITHOUT_ARTIFACTS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd8980deb, &Ha48, &H425f, &H86, &H23, &H61, &H1d, &Hb4, &H1d, &H38, &H10)
MFT_DECODER_QUALITY_MANAGEMENT_RECOVERY_WITHOUT_ARTIFACTS = iid
End Function
Public Function MFT_REMUX_MARK_I_PICTURE_AS_CLEAN_POINT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H364e8f85, &H3f2e, &H436c, &Hb2, &Ha2, &H44, &H40, &Ha0, &H12, &Ha9, &He8)
MFT_REMUX_MARK_I_PICTURE_AS_CLEAN_POINT = iid
End Function
Public Function MFT_DECODER_FINAL_VIDEO_RESOLUTION_HINT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hdc2f8496, &H15c4, &H407a, &Hb6, &Hf0, &H1b, &H66, &Hab, &H5f, &Hbf, &H53)
MFT_DECODER_FINAL_VIDEO_RESOLUTION_HINT = iid
End Function
Public Function MFT_ENCODER_SUPPORTS_CONFIG_EVENT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H86a355ae, &H3a77, &H4ec4, &H9f, &H31, &H1, &H14, &H9a, &H4e, &H92, &Hde)
MFT_ENCODER_SUPPORTS_CONFIG_EVENT = iid
End Function
Public Function MFT_ENUM_HARDWARE_VENDOR_ID_Attribute() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3aecb0cc, &H35b, &H4bcc, &H81, &H85, &H2b, &H8d, &H55, &H1e, &Hf3, &Haf)
MFT_ENUM_HARDWARE_VENDOR_ID_Attribute = iid
End Function
Public Function MF_TRANSFORM_ASYNC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf81a699a, &H649a, &H497d, &H8c, &H73, &H29, &Hf8, &Hfe, &Hd6, &Had, &H7a)
MF_TRANSFORM_ASYNC = iid
End Function
Public Function MF_TRANSFORM_ASYNC_UNLOCK() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He5666d6b, &H3422, &H4eb6, &Ha4, &H21, &Hda, &H7d, &Hb1, &Hf8, &He2, &H7)
MF_TRANSFORM_ASYNC_UNLOCK = iid
End Function
Public Function MF_TRANSFORM_FLAGS_Attribute() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9359bb7e, &H6275, &H46c4, &Ha0, &H25, &H1c, &H1, &He4, &H5f, &H1a, &H86)
MF_TRANSFORM_FLAGS_Attribute = iid
End Function
Public Function MF_TRANSFORM_CATEGORY_Attribute() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hceabba49, &H506d, &H4757, &Ha6, &Hff, &H66, &Hc1, &H84, &H98, &H7e, &H4e)
MF_TRANSFORM_CATEGORY_Attribute = iid
End Function
Public Function MFT_TRANSFORM_CLSID_Attribute() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6821c42b, &H65a4, &H4e82, &H99, &Hbc, &H9a, &H88, &H20, &H5e, &Hcd, &Hc)
MFT_TRANSFORM_CLSID_Attribute = iid
End Function
Public Function MFT_INPUT_TYPES_Attributes() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4276c9b1, &H759d, &H4bf3, &H9c, &Hd0, &Hd, &H72, &H3d, &H13, &H8f, &H96)
MFT_INPUT_TYPES_Attributes = iid
End Function
Public Function MFT_OUTPUT_TYPES_Attributes() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8eae8cf3, &Ha44f, &H4306, &Hba, &H5c, &Hbf, &H5d, &Hda, &H24, &H28, &H18)
MFT_OUTPUT_TYPES_Attributes = iid
End Function
Public Function MFT_ENUM_HARDWARE_URL_Attribute() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2fb866ac, &Hb078, &H4942, &Hab, &H6c, &H0, &H3d, &H5, &Hcd, &Ha6, &H74)
MFT_ENUM_HARDWARE_URL_Attribute = iid
End Function
Public Function MFT_FRIENDLY_NAME_Attribute() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H314ffbae, &H5b41, &H4c95, &H9c, &H19, &H4e, &H7d, &H58, &H6f, &Hac, &He3)
MFT_FRIENDLY_NAME_Attribute = iid
End Function
Public Function MFT_CONNECTED_STREAM_ATTRIBUTE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H71eeb820, &Ha59f, &H4de2, &Hbc, &Hec, &H38, &Hdb, &H1d, &Hd6, &H11, &Ha4)
MFT_CONNECTED_STREAM_ATTRIBUTE = iid
End Function
Public Function MFT_CONNECTED_TO_HW_STREAM() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H34e6e728, &H6d6, &H4491, &Ha5, &H53, &H47, &H95, &H65, &Hd, &Hb9, &H12)
MFT_CONNECTED_TO_HW_STREAM = iid
End Function
Public Function MFT_PREFERRED_OUTPUTTYPE_Attribute() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7e700499, &H396a, &H49ee, &Hb1, &Hb4, &Hf6, &H28, &H2, &H1e, &H8c, &H9d)
MFT_PREFERRED_OUTPUTTYPE_Attribute = iid
End Function
Public Function MFT_PROCESS_LOCAL_Attribute() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H543186e4, &H4649, &H4e65, &Hb5, &H88, &H4a, &Ha3, &H52, &Haf, &Hf3, &H79)
MFT_PROCESS_LOCAL_Attribute = iid
End Function
Public Function MFT_PREFERRED_ENCODER_PROFILE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H53004909, &H1ef5, &H46d7, &Ha1, &H8e, &H5a, &H75, &Hf8, &Hb5, &H90, &H5f)
MFT_PREFERRED_ENCODER_PROFILE = iid
End Function
Public Function MFT_HW_TIMESTAMP_WITH_QPC_Attribute() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8d030fb8, &Hcc43, &H4258, &Ha2, &H2e, &H92, &H10, &Hbe, &Hf8, &H9b, &He4)
MFT_HW_TIMESTAMP_WITH_QPC_Attribute = iid
End Function
Public Function MFT_FIELDOFUSE_UNLOCK_Attribute() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8ec2e9fd, &H9148, &H410d, &H83, &H1e, &H70, &H24, &H39, &H46, &H1a, &H8e)
MFT_FIELDOFUSE_UNLOCK_Attribute = iid
End Function
Public Function MFT_CODEC_MERIT_Attribute() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H88a7cb15, &H7b07, &H4a34, &H91, &H28, &He6, &H4c, &H67, &H3, &Hc4, &Hd3)
MFT_CODEC_MERIT_Attribute = iid
End Function
Public Function MFT_ENUM_TRANSCODE_ONLY_ATTRIBUTE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H111ea8cd, &Hb62a, &H4bdb, &H89, &Hf6, &H67, &Hff, &Hcd, &Hc2, &H45, &H8b)
MFT_ENUM_TRANSCODE_ONLY_ATTRIBUTE = iid
End Function
Public Function MFT_POLICY_SET_AWARE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5a633b19, &Hcc39, &H4fa8, &H8c, &Ha5, &H59, &H98, &H1b, &H7a, &H0, &H18)
MFT_POLICY_SET_AWARE = iid
End Function


Public Function MFP_PKEY_StreamRenderingResults() As PROPERTYKEY
	Static pk As PROPERTYKEY
    If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &Ha7cf9740, &He8d9, &H4a87, &Hbd, &H8e, &H29, &H67, &H0, &H1f, &Hd3, &Had, &H01)
    MFP_PKEY_StreamRenderingResults = pk
End Function
Public Function MFP_PKEY_StreamIndex() As PROPERTYKEY
    Static pk As PROPERTYKEY
    If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &Ha7cf9740, &He8d9, &H4a87, &Hbd, &H8e, &H29, &H67, &H0, &H1f, &Hd3, &Had, &H00)
    MFP_PKEY_StreamIndex = pk
End Function



Public Function MR_VIDEO_RENDER_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1092a86c, &Hab1a, &H459a, &Ha3, &H36, &H83, &H1f, &Hbc, &H4d, &H11, &Hff)
MR_VIDEO_RENDER_SERVICE = iid
End Function
Public Function MR_VIDEO_MIXER_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H73cd2fc, &H6cf4, &H40b7, &H88, &H59, &He8, &H95, &H52, &Hc8, &H41, &Hf8)
MR_VIDEO_MIXER_SERVICE = iid
End Function
Public Function MR_VIDEO_ACCELERATION_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hefef5175, &H5c7d, &H4ce2, &Hbb, &Hbd, &H34, &Hff, &H8b, &Hca, &H65, &H54)
MR_VIDEO_ACCELERATION_SERVICE = iid
End Function
Public Function MR_BUFFER_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha562248c, &H9ac6, &H4ffc, &H9f, &Hba, &H3a, &Hf8, &Hf8, &Had, &H1a, &H4d)
MR_BUFFER_SERVICE = iid
End Function
Public Function VIDEO_ZOOM_RECT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7aaa1638, &H1b7f, &H4c93, &Hbd, &H89, &H5b, &H9c, &H9f, &Hb6, &Hfc, &Hf0)
VIDEO_ZOOM_RECT = iid
End Function


Public Function MF_EVENT_SESSIONCAPS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7e5ebcd0, &H11b8, &H4abe, &Haf, &Had, &H10, &Hf6, &H59, &H9a, &H7f, &H42)
MF_EVENT_SESSIONCAPS = iid
End Function
Public Function MF_EVENT_SESSIONCAPS_DELTA() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7e5ebcd1, &H11b8, &H4abe, &Haf, &Had, &H10, &Hf6, &H59, &H9a, &H7f, &H42)
MF_EVENT_SESSIONCAPS_DELTA = iid
End Function
Public Function MF_EVENT_TOPOLOGY_STATUS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H30c5018d, &H9a53, &H454b, &Had, &H9e, &H6d, &H5f, &H8f, &Ha7, &Hc4, &H3b)
MF_EVENT_TOPOLOGY_STATUS = iid
End Function
Public Function MF_EVENT_START_PRESENTATION_TIME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5ad914d0, &H9b45, &H4a8d, &Ha2, &Hc0, &H81, &Hd1, &He5, &Hb, &Hfb, &H7)
MF_EVENT_START_PRESENTATION_TIME = iid
End Function
Public Function MF_EVENT_PRESENTATION_TIME_OFFSET() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5ad914d1, &H9b45, &H4a8d, &Ha2, &Hc0, &H81, &Hd1, &He5, &Hb, &Hfb, &H7)
MF_EVENT_PRESENTATION_TIME_OFFSET = iid
End Function
Public Function MF_EVENT_START_PRESENTATION_TIME_AT_OUTPUT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5ad914d2, &H9b45, &H4a8d, &Ha2, &Hc0, &H81, &Hd1, &He5, &Hb, &Hfb, &H7)
MF_EVENT_START_PRESENTATION_TIME_AT_OUTPUT = iid
End Function
Public Function MF_EVENT_SOURCE_FAKE_START() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha8cc55a7, &H6b31, &H419f, &H84, &H5d, &Hff, &Hb3, &H51, &Ha2, &H43, &H4b)
MF_EVENT_SOURCE_FAKE_START = iid
End Function
Public Function MF_EVENT_SOURCE_PROJECTSTART() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha8cc55a8, &H6b31, &H419f, &H84, &H5d, &Hff, &Hb3, &H51, &Ha2, &H43, &H4b)
MF_EVENT_SOURCE_PROJECTSTART = iid
End Function
Public Function MF_EVENT_SOURCE_ACTUAL_START() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha8cc55a9, &H6b31, &H419f, &H84, &H5d, &Hff, &Hb3, &H51, &Ha2, &H43, &H4b)
MF_EVENT_SOURCE_ACTUAL_START = iid
End Function
Public Function MF_EVENT_SOURCE_TOPOLOGY_CANCELED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hdb62f650, &H9a5e, &H4704, &Hac, &Hf3, &H56, &H3b, &Hc6, &Ha7, &H33, &H64)
MF_EVENT_SOURCE_TOPOLOGY_CANCELED = iid
End Function
Public Function MF_EVENT_SOURCE_CHARACTERISTICS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H47db8490, &H8b22, &H4f52, &Haf, &Hda, &H9c, &He1, &Hb2, &Hd3, &Hcf, &Ha8)
MF_EVENT_SOURCE_CHARACTERISTICS = iid
End Function
Public Function MF_EVENT_SOURCE_CHARACTERISTICS_OLD() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H47db8491, &H8b22, &H4f52, &Haf, &Hda, &H9c, &He1, &Hb2, &Hd3, &Hcf, &Ha8)
MF_EVENT_SOURCE_CHARACTERISTICS_OLD = iid
End Function
Public Function MF_EVENT_DO_THINNING() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H321ea6fb, &Hdad9, &H46e4, &Hb3, &H1d, &Hd2, &Hea, &He7, &H9, &He, &H30)
MF_EVENT_DO_THINNING = iid
End Function
Public Function MF_EVENT_SCRUBSAMPLE_TIME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9ac712b3, &Hdcb8, &H44d5, &H8d, &Hc, &H37, &H45, &H5a, &H27, &H82, &He3)
MF_EVENT_SCRUBSAMPLE_TIME = iid
End Function
Public Function MF_EVENT_OUTPUT_NODE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H830f1a8b, &Hc060, &H46dd, &Ha8, &H01, &H1c, &H95, &Hde, &Hc9, &Hb1, &H07)
MF_EVENT_OUTPUT_NODE = iid
End Function
Public Function MF_EVENT_MFT_INPUT_STREAM_ID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf29c2cca, &H7ae6, &H42d2, &Hb2, &H84, &Hbf, &H83, &H7c, &Hc8, &H74, &He2)
MF_EVENT_MFT_INPUT_STREAM_ID = iid
End Function
Public Function MF_EVENT_MFT_CONTEXT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb7cd31f1, &H899e, &H4b41, &H80, &Hc9, &H26, &Ha8, &H96, &Hd3, &H29, &H77)
MF_EVENT_MFT_CONTEXT = iid
End Function
Public Function MF_EVENT_STREAM_METADATA_KEYDATA() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hcd59a4a1, &H4a3b, &H4bbd, &H86, &H65, &H72, &Ha4, &Hf, &Hbe, &Ha7, &H76)
MF_EVENT_STREAM_METADATA_KEYDATA = iid
End Function
Public Function MF_EVENT_STREAM_METADATA_CONTENT_KEYIDS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5063449d, &Hcc29, &H4fc6, &Ha7, &H5a, &Hd2, &H47, &Hb3, &H5a, &Hf8, &H5c)
MF_EVENT_STREAM_METADATA_CONTENT_KEYIDS = iid
End Function
Public Function MF_EVENT_STREAM_METADATA_SYSTEMID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1ea2ef64, &Hba16, &H4a36, &H87, &H19, &Hfe, &H75, &H60, &Hba, &H32, &Had)
MF_EVENT_STREAM_METADATA_SYSTEMID = iid
End Function

Public Function MFSampleExtension_MaxDecodeFrameSize() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd3cc654f, &Hf9f3, &H4a13, &H88, &H9f, &Hf0, &H4e, &Hb2, &Hb5, &Hb9, &H57)
MFSampleExtension_MaxDecodeFrameSize = iid
End Function
Public Function MFSampleExtension_AccumulatedNonRefPicPercent() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H79ea74df, &Ha740, &H445b, &Hbc, &H98, &Hc9, &Hed, &H1f, &H26, &He, &Hee)
MFSampleExtension_AccumulatedNonRefPicPercent = iid
End Function
Public Function MFSampleExtension_Encryption_ProtectionScheme() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd054d096, &H28bb, &H45da, &H87, &Hec, &H74, &Hf3, &H51, &H87, &H14, &H6)
MFSampleExtension_Encryption_ProtectionScheme = iid
End Function
Public Function MFSampleExtension_Encryption_CryptByteBlock() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9d84289b, &Hc7f, &H4713, &Hab, &H95, &H10, &H8a, &Hb4, &H2a, &Hd8, &H1)
MFSampleExtension_Encryption_CryptByteBlock = iid
End Function
Public Function MFSampleExtension_Encryption_SkipByteBlock() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd550548, &H8317, &H4ab1, &H84, &H5f, &Hd0, &H63, &H6, &He2, &H93, &He3)
MFSampleExtension_Encryption_SkipByteBlock = iid
End Function
Public Function MFSampleExtension_Encryption_SubSample_Mapping() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8444F27A, &H69A1, &H48DA, &HBD, &H08, &H11, &HCE, &HF3, &H68, &H30, &HD2)
MFSampleExtension_Encryption_SubSample_Mapping = iid
End Function
Public Function MFSampleExtension_Encryption_ClearSliceHeaderData() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5509a4f4, &H320d, &H4e6c, &H8d, &H1a, &H94, &Hc6, &H6d, &Hd2, &Hc, &Hb0)
MFSampleExtension_Encryption_ClearSliceHeaderData = iid
End Function
Public Function MFSampleExtension_Encryption_HardwareProtection_KeyInfoID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8cbfcceb, &H94a5, &H4de1, &H82, &H31, &Ha8, &H5e, &H47, &Hcf, &H81, &He7)
MFSampleExtension_Encryption_HardwareProtection_KeyInfoID = iid
End Function
Public Function MFSampleExtension_Encryption_HardwareProtection_KeyInfo() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb2372080, &H455b, &H4dd7, &H99, &H89, &H1a, &H95, &H57, &H84, &Hb7, &H54)
MFSampleExtension_Encryption_HardwareProtection_KeyInfo = iid
End Function
Public Function MFSampleExtension_Encryption_HardwareProtection_VideoDecryptorContext() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H693470c8, &He837, &H47a0, &H88, &Hcb, &H53, &H5b, &H90, &H5e, &H35, &H82)
MFSampleExtension_Encryption_HardwareProtection_VideoDecryptorContext = iid
End Function
Public Function MFSampleExtension_Encryption_Opaque_Data() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H224d77e5, &H1391, &H4ffb, &H9f, &H41, &Hb4, &H32, &Hf6, &H8c, &H61, &H1d)
MFSampleExtension_Encryption_Opaque_Data = iid
End Function
Public Function MFSampleExtension_NALULengthInfo() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H19124E7C, &HAD4B, &H465F, &HBB, &H18, &H20, &H18, &H62, &H87, &HB6, &HAF)
MFSampleExtension_NALULengthInfo = iid
End Function
Public Function MFSampleExtension_Encryption_ResumeVideoOutput() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha435aba5, &Hafde, &H4cf5, &Hbc, &H1c, &Hf6, &Hac, &Haf, &H13, &H94, &H9d)
MFSampleExtension_Encryption_ResumeVideoOutput = iid
End Function
Public Function MFSampleExtension_Encryption_NALUTypes() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb0f067c7, &H714c, &H416c, &H8d, &H59, &H5f, &H4d, &Hdf, &H89, &H13, &Hb6)
MFSampleExtension_Encryption_NALUTypes = iid
End Function
Public Function MFSampleExtension_Encryption_SPSPPSData() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Haede0fa2, &He0c, &H453c, &Hb7, &Hf3, &Hde, &H86, &H93, &H36, &H4d, &H11)
MFSampleExtension_Encryption_SPSPPSData = iid
End Function
Public Function MFSampleExtension_Encryption_SEIData() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3cf0e972, &H4542, &H4687, &H99, &H99, &H58, &H5f, &H56, &H5f, &Hba, &H7d)
MFSampleExtension_Encryption_SEIData = iid
End Function
Public Function MFSampleExtension_Encryption_HardwareProtection() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9a2b2d2b, &H8270, &H43e3, &H84, &H48, &H99, &H4f, &H42, &H6e, &H88, &H86)
MFSampleExtension_Encryption_HardwareProtection = iid
End Function
Public Function MFSampleExtension_CleanPoint() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9cdf01d8, &Ha0f0, &H43ba, &Hb0, &H77, &Hea, &Ha0, &H6c, &Hbd, &H72, &H8a)
MFSampleExtension_CleanPoint = iid
End Function
Public Function MFSampleExtension_Discontinuity() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9cdf01d9, &Ha0f0, &H43ba, &Hb0, &H77, &Hea, &Ha0, &H6c, &Hbd, &H72, &H8a)
MFSampleExtension_Discontinuity = iid
End Function
Public Function MFSampleExtension_Token() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8294da66, &Hf328, &H4805, &Hb5, &H51, &H00, &Hde, &Hb4, &Hc5, &H7a, &H61)
MFSampleExtension_Token = iid
End Function
Public Function MFSampleExtension_ClosedCaption_CEA708() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H26f09068, &He744, &H47dc, &Haa, &H03, &Hdb, &Hf2, &H04, &H03, &Hbd, &He6)
MFSampleExtension_ClosedCaption_CEA708 = iid
End Function
Public Function MFSampleExtension_DecodeTimestamp() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H73a954d4, &H9e2, &H4861, &Hbe, &Hfc, &H94, &Hbd, &H97, &Hc0, &H8e, &H6e)
MFSampleExtension_DecodeTimestamp = iid
End Function
Public Function MFSampleExtension_VideoEncodeQP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb2efe478, &Hf979, &H4c66, &Hb9, &H5e, &Hee, &H2b, &H82, &Hc8, &H2f, &H36)
MFSampleExtension_VideoEncodeQP = iid
End Function
Public Function MFSampleExtension_VideoEncodePictureType() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H973704e6, &Hcd14, &H483c, &H8f, &H20, &Hc9, &Hfc, &H9, &H28, &Hba, &Hd5)
MFSampleExtension_VideoEncodePictureType = iid
End Function
Public Function MFSampleExtension_FrameCorruption() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb4dd4a8c, &Hbeb, &H44c4, &H8b, &H75, &Hb0, &H2b, &H91, &H3b, &H4, &Hf0)
MFSampleExtension_FrameCorruption = iid
End Function
Public Function MFSampleExtension_DirtyRects() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9ba70225, &Hb342, &H4e97, &H91, &H26, &H0b, &H56, &H6a, &Hb7, &Hea, &H7e)
MFSampleExtension_DirtyRects = iid
End Function
Public Function MFSampleExtension_MoveRegions() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He2a6c693, &H3a8b, &H4b8d, &H95, &Hd0, &Hf6, &H02, &H81, &Ha1, &H2f, &Hb7)
MFSampleExtension_MoveRegions = iid
End Function

Public Function MFSampleExtension_HDCP_OptionalHeader() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9a2e7390, &H121f, &H455f, &H83, &H76, &Hc9, &H74, &H28, &He0, &Hb5, &H40)
MFSampleExtension_HDCP_OptionalHeader = iid
End Function
Public Function MFSampleExtension_HDCP_FrameCounter() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9d389c60, &Hf507, &H4aa6, &Ha4, &Ha, &H71, &H2, &H7a, &H2, &Hf3, &Hde)
MFSampleExtension_HDCP_FrameCounter = iid
End Function
Public Function MFSampleExtension_HDCP_StreamID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H177e5d74, &Hc370, &H4a7a, &H95, &Ha2, &H36, &H83, &H3c, &H01, &Hd0, &Haf)
MFSampleExtension_HDCP_StreamID = iid
End Function
Public Function MFSampleExtension_Timestamp() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1e436999, &H69be, &H4c7a, &H93, &H69, &H70, &H06, &H8c, &H02, &H60, &Hcb)
MFSampleExtension_Timestamp = iid
End Function
Public Function MFSampleExtension_RepeatFrame() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H88be738f, &H711, &H4f42, &Hb4, &H58, &H34, &H4a, &Hed, &H42, &Hec, &H2f)
MFSampleExtension_RepeatFrame = iid
End Function
Public Function MFT_ENCODER_ERROR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc8d1eda4, &H98e4, &H41d5, &H92, &H97, &H44, &Hf5, &H38, &H52, &Hf9, &H0e)
MFT_ENCODER_ERROR = iid
End Function
Public Function MFT_GFX_DRIVER_VERSION_ID_Attribute() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf34b9093, &H05e0, &H4b16, &H99, &H3d, &H3e, &H2a, &H2c, &Hde, &H6a, &Hd3)
MFT_GFX_DRIVER_VERSION_ID_Attribute = iid
End Function
Public Function MFSampleExtension_DescrambleData() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H43483be6, &H4903, &H4314, &Hb0, &H32, &H29, &H51, &H36, &H59, &H36, &Hfc)
MFSampleExtension_DescrambleData = iid
End Function
Public Function MFSampleExtension_SampleKeyID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9ed713c8, &H9b87, &H4b26, &H82, &H97, &Ha9, &H3b, &H0c, &H5a, &H8a, &Hcc)
MFSampleExtension_SampleKeyID = iid
End Function
Public Function MFSampleExtension_GenKeyFunc() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H441ca1ee, &H6b1f, &H4501, &H90, &H3a, &Hde, &H87, &Hdf, &H42, &Hf6, &Hed)
MFSampleExtension_GenKeyFunc = iid
End Function
Public Function MFSampleExtension_GenKeyCtx() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H188120cb, &Hd7da, &H4b59, &H9b, &H3e, &H92, &H52, &Hfd, &H37, &H30, &H1c)
MFSampleExtension_GenKeyCtx = iid
End Function
Public Function MFSampleExtension_PacketCrossOffsets() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2789671d, &H389f, &H40bb, &H90, &Hd9, &Hc2, &H82, &Hf7, &H7f, &H9a, &Hbd)
MFSampleExtension_PacketCrossOffsets = iid
End Function
Public Function MFSampleExtension_Encryption_SampleID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6698b84e, &H0afa, &H4330, &Hae, &Hb2, &H1c, &H0a, &H98, &Hd7, &Ha4, &H4d)
MFSampleExtension_Encryption_SampleID = iid
End Function
Public Function MFSampleExtension_Encryption_KeyID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H76376591, &H795f, &H4da1, &H86, &Hed, &H9d, &H46, &Hec, &Ha1, &H09, &Ha9)
MFSampleExtension_Encryption_KeyID = iid
End Function
Public Function MFSampleExtension_Content_KeyID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc6c7f5b0, &Hacca, &H415b, &H87, &Hd9, &H10, &H44, &H14, &H69, &Hef, &Hc6)
MFSampleExtension_Content_KeyID = iid
End Function
Public Function MFSampleExtension_Encryption_SubSampleMappingSplit() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hfe0254b9, &H2aa5, &H4edc, &H99, &Hf7, &H17, &He8, &H9d, &Hbf, &H91, &H74)
MFSampleExtension_Encryption_SubSampleMappingSplit = iid
End Function
Public Function MFSampleExtension_Interlaced() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb1d5830a, &Hdeb8, &H40e3, &H90, &Hfa, &H38, &H99, &H43, &H71, &H64, &H61)
MFSampleExtension_Interlaced = iid
End Function
Public Function MFSampleExtension_BottomFieldFirst() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H941ce0a3, &H6ae3, &H4dda, &H9a, &H08, &Ha6, &H42, &H98, &H34, &H06, &H17)
MFSampleExtension_BottomFieldFirst = iid
End Function
Public Function MFSampleExtension_RepeatFirstField() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H304d257c, &H7493, &H4fbd, &Hb1, &H49, &H92, &H28, &Hde, &H8d, &H9a, &H99)
MFSampleExtension_RepeatFirstField = iid
End Function
Public Function MFSampleExtension_SingleField() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9d85f816, &H658b, &H455a, &Hbd, &He0, &H9f, &Ha7, &He1, &H5a, &Hb8, &Hf9)
MFSampleExtension_SingleField = iid
End Function
Public Function MFSampleExtension_DerivedFromTopField() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6852465a, &Hae1c, &H4553, &H8e, &H9b, &Hc3, &H42, &H0f, &Hcb, &H16, &H37)
MFSampleExtension_DerivedFromTopField = iid
End Function
Public Function MFSampleExtension_MeanAbsoluteDifference() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1cdbde11, &H08b4, &H4311, &Ha6, &Hdd, &H0f, &H9f, &H37, &H19, &H07, &Haa)
MFSampleExtension_MeanAbsoluteDifference = iid
End Function
Public Function MFSampleExtension_LongTermReferenceFrameInfo() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9154733f, &He1bd, &H41bf, &H81, &Hd3, &Hfc, &Hd9, &H18, &Hf7, &H13, &H32)
MFSampleExtension_LongTermReferenceFrameInfo = iid
End Function
Public Function MFSampleExtension_ROIRectangle() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3414a438, &H4998, &H4d2c, &Hbe, &H82, &Hbe, &H3c, &Ha0, &Hb2, &H4d, &H43)
MFSampleExtension_ROIRectangle = iid
End Function
Public Function MFSampleExtension_LastSlice() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2b5d5457, &H5547, &H4f07, &Hb8, &Hc8, &Hb4, &Ha3, &Ha9, &Ha1, &Hda, &Hac)
MFSampleExtension_LastSlice = iid
End Function
Public Function MFSampleExtension_FeatureMap() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha032d165, &H46fc, &H400a, &Hb4, &H49, &H49, &Hde, &H53, &He6, &H2a, &H6e)
MFSampleExtension_FeatureMap = iid
End Function
Public Function MFSampleExtension_ChromaOnly() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1eb9179c, &Ha01f, &H4845, &H8c, &H04, &H0e, &H65, &Ha2, &H6e, &Hb0, &H4f)
MFSampleExtension_ChromaOnly = iid
End Function
Public Function MFSampleExtension_PhotoThumbnail() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H74BBC85C, &HC8BB, &H42DC, &HB5, &H86, &HDA, &H17, &HFF, &HD3, &H5D, &HCC)
MFSampleExtension_PhotoThumbnail = iid
End Function
Public Function MFSampleExtension_PhotoThumbnailMediaType() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H61AD5420, &HEBF8, &H4143, &H89, &HAF, &H6B, &HF2, &H5F, &H67, &H2D, &HEF)
MFSampleExtension_PhotoThumbnailMediaType = iid
End Function
Public Function MFSampleExtension_CaptureMetadata() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2EBE23A8, &HFAF5, &H444A, &HA6, &HA2, &HEB, &H81, &H08, &H80, &HAB, &H5D)
MFSampleExtension_CaptureMetadata = iid
End Function
Public Function MFSampleExtension_MDLCacheCookie() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5F002AF9, &HD8F9, &H41A3, &HB6, &HC3, &HA2, &HAD, &H43, &HF6, &H47, &HAD)
MFSampleExtension_MDLCacheCookie = iid
End Function
Public Function MF_CAPTURE_METADATA_PHOTO_FRAME_FLASH() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0F9DD6C6, &H6003, &H45D8, &HBD, &H59, &HF1, &HF5, &H3E, &H3D, &H04, &HE8)
MF_CAPTURE_METADATA_PHOTO_FRAME_FLASH = iid
End Function
Public Function MF_CAPTURE_METADATA_FRAME_RAWSTREAM() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9252077B, &H2680, &H49B9, &HAE, &H02, &HB1, &H90, &H75, &H97, &H3B, &H70)
MF_CAPTURE_METADATA_FRAME_RAWSTREAM = iid
End Function
Public Function MF_CAPTURE_METADATA_FOCUSSTATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha87ee154, &H997f, &H465d, &Hb9, &H1f, &H29, &Hd5, &H3b, &H98, &H2b, &H88)
MF_CAPTURE_METADATA_FOCUSSTATE = iid
End Function
Public Function MF_CAPTURE_METADATA_REQUESTED_FRAME_SETTING_ID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hbb3716d9, &H8a61, &H47a4, &H81, &H97, &H45, &H9c, &H7f, &Hf1, &H74, &Hd5)
MF_CAPTURE_METADATA_REQUESTED_FRAME_SETTING_ID = iid
End Function
Public Function MF_CAPTURE_METADATA_EXPOSURE_TIME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H16b9ae99, &Hcd84, &H4063, &H87, &H9d, &Ha2, &H8c, &H76, &H33, &H72, &H9e)
MF_CAPTURE_METADATA_EXPOSURE_TIME = iid
End Function
Public Function MF_CAPTURE_METADATA_EXPOSURE_COMPENSATION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd198aa75, &H4b62, &H4345, &Hab, &Hf3, &H3c, &H31, &Hfa, &H12, &Hc2, &H99)
MF_CAPTURE_METADATA_EXPOSURE_COMPENSATION = iid
End Function
Public Function MF_CAPTURE_METADATA_ISO_SPEED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He528a68f, &Hb2e3, &H44fe, &H8b, &H65, &H7, &Hbf, &H4b, &H5a, &H13, &Hff)
MF_CAPTURE_METADATA_ISO_SPEED = iid
End Function
Public Function MF_CAPTURE_METADATA_LENS_POSITION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb5fc8e86, &H11d1, &H4e70, &H81, &H9b, &H72, &H3a, &H89, &Hfa, &H45, &H20)
MF_CAPTURE_METADATA_LENS_POSITION = iid
End Function
Public Function MF_CAPTURE_METADATA_SCENE_MODE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9cc3b54d, &H5ed3, &H4bae, &Hb3, &H88, &H76, &H70, &Hae, &Hf5, &H9e, &H13)
MF_CAPTURE_METADATA_SCENE_MODE = iid
End Function
Public Function MF_CAPTURE_METADATA_FLASH() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4a51520b, &Hfb36, &H446c, &H9d, &Hf2, &H68, &H17, &H1b, &H9a, &H3, &H89)
MF_CAPTURE_METADATA_FLASH = iid
End Function
Public Function MF_CAPTURE_METADATA_FLASH_POWER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9c0e0d49, &H205, &H491a, &Hbc, &H9d, &H2d, &H6e, &H1f, &H4d, &H56, &H84)
MF_CAPTURE_METADATA_FLASH_POWER = iid
End Function
Public Function MF_CAPTURE_METADATA_WHITEBALANCE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc736fd77, &Hfb9, &H4e2e, &H97, &Ha2, &Hfc, &Hd4, &H90, &H73, &H9e, &He9)
MF_CAPTURE_METADATA_WHITEBALANCE = iid
End Function
Public Function MF_CAPTURE_METADATA_ZOOMFACTOR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He50b0b81, &He501, &H42c2, &Hab, &Hf2, &H85, &H7e, &Hcb, &H13, &Hfa, &H5c)
MF_CAPTURE_METADATA_ZOOMFACTOR = iid
End Function
Public Function MF_CAPTURE_METADATA_FACEROIS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H864f25a6, &H349f, &H46b1, &Ha3, &He, &H54, &Hcc, &H22, &H92, &H8a, &H47)
MF_CAPTURE_METADATA_FACEROIS = iid
End Function
Public Function MF_CAPTURE_METADATA_FACEROITIMESTAMPS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He94d50cc, &H3da0, &H44d4, &Hbb, &H34, &H83, &H19, &H8a, &H74, &H18, &H68)
MF_CAPTURE_METADATA_FACEROITIMESTAMPS = iid
End Function
Public Function MF_CAPTURE_METADATA_FACEROICHARACTERIZATIONS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb927a1a8, &H18ef, &H46d3, &Hb3, &Haf, &H69, &H37, &H2f, &H94, &Hd9, &Hb2)
MF_CAPTURE_METADATA_FACEROICHARACTERIZATIONS = iid
End Function
Public Function MF_CAPTURE_METADATA_ISO_GAINS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5802ac9, &He1d, &H41c7, &Ha8, &Hc8, &H7e, &H73, &H69, &Hf8, &H4e, &H1e)
MF_CAPTURE_METADATA_ISO_GAINS = iid
End Function
Public Function MF_CAPTURE_METADATA_SENSORFRAMERATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hdb51357e, &H9d3d, &H4962, &Hb0, &H6d, &H7, &Hce, &H65, &Hd, &H9a, &Ha)
MF_CAPTURE_METADATA_SENSORFRAMERATE = iid
End Function
Public Function MF_CAPTURE_METADATA_WHITEBALANCE_GAINS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He7570c8f, &H2dcb, &H4c7c, &Haa, &Hce, &H22, &Hec, &He7, &Hcc, &He6, &H47)
MF_CAPTURE_METADATA_WHITEBALANCE_GAINS = iid
End Function
Public Function MF_CAPTURE_METADATA_HISTOGRAM() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H85358432, &H2ef6, &H4ba9, &Ha3, &Hfb, &H6, &Hd8, &H29, &H74, &Hb8, &H95)
MF_CAPTURE_METADATA_HISTOGRAM = iid
End Function
Public Function MF_CAPTURE_METADATA_EXIF() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2e9575b8, &H8c31, &H4a02, &H85, &H75, &H42, &Hb1, &H97, &Hb7, &H15, &H92)
MF_CAPTURE_METADATA_EXIF = iid
End Function
Public Function MF_CAPTURE_METADATA_FRAME_ILLUMINATION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6D688FFC, &H63D3, &H46FE, &HBA, &HDA, &H5B, &H94, &H7D, &HB0, &HD0, &H80)
MF_CAPTURE_METADATA_FRAME_ILLUMINATION = iid
End Function
Public Function MF_CAPTURE_METADATA_UVC_PAYLOADHEADER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf9f88a87, &He1dd, &H441e, &H95, &Hcb, &H42, &He2, &H1a, &H64, &Hf1, &Hd9)
MF_CAPTURE_METADATA_UVC_PAYLOADHEADER = iid
End Function
Public Function MFSampleExtension_Depth_MinReliableDepth() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5f8582b2, &He36b, &H47c8, &H9b, &H87, &Hfe, &He1, &Hca, &H72, &Hc5, &Hb0)
MFSampleExtension_Depth_MinReliableDepth = iid
End Function
Public Function MFSampleExtension_Depth_MaxReliableDepth() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He45545d1, &H1f0f, &H4a32, &Ha8, &Ha7, &H61, &H1, &Ha2, &H4e, &Ha8, &Hbe)
MFSampleExtension_Depth_MaxReliableDepth = iid
End Function
Public Function MF_CAPTURE_METADATA_FIRST_SCANLINE_START_TIME_QPC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6a2c49f1, &He052, &H46b6, &Hb2, &Hd9, &H73, &Hc1, &H55, &H87, &H09, &Haf)
MF_CAPTURE_METADATA_FIRST_SCANLINE_START_TIME_QPC = iid
End Function
Public Function MF_CAPTURE_METADATA_LAST_SCANLINE_END_TIME_QPC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hdccadecb, &Hc4d4, &H400d, &Hb4, &H18, &H10, &He8, &H85, &H25, &He1, &Hf6)
MF_CAPTURE_METADATA_LAST_SCANLINE_END_TIME_QPC = iid
End Function
Public Function MF_CAPTURE_METADATA_SCANLINE_TIME_QPC_ACCURACY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4cd79c51, &Hf765, &H4b09, &Hb1, &He1, &H27, &Hd1, &Hf7, &Heb, &Hea, &H09)
MF_CAPTURE_METADATA_SCANLINE_TIME_QPC_ACCURACY = iid
End Function
Public Function MF_CAPTURE_METADATA_SCANLINE_DIRECTION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6496a3ba, &H1907, &H49e6, &Hb0, &Hc3, &H12, &H37, &H95, &Hf3, &H80, &Ha9)
MF_CAPTURE_METADATA_SCANLINE_DIRECTION = iid
End Function
Public Function MF_CAPTURE_METADATA_DIGITALWINDOW() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H276f72a2, &H59c8, &H4f69, &H97, &Hb4, &H6, &H8b, &H8c, &He, &Hc0, &H44)
MF_CAPTURE_METADATA_DIGITALWINDOW = iid
End Function
Public Function MF_CAPTURE_METADATA_FRAME_BACKGROUND_MASK() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3f14dd3, &H75dd, &H433a, &Ha8, &He2, &H1e, &H3f, &H5f, &H2a, &H50, &Ha0)
MF_CAPTURE_METADATA_FRAME_BACKGROUND_MASK = iid
End Function
Public Function MFT_CATEGORY_VIDEO_DECODER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd6c02d4b, &H6833, &H45b4, &H97, &H1a, &H05, &Ha4, &Hb0, &H4b, &Hab, &H91)
MFT_CATEGORY_VIDEO_DECODER = iid
End Function
Public Function MFT_CATEGORY_VIDEO_ENCODER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf79eac7d, &He545, &H4387, &Hbd, &Hee, &Hd6, &H47, &Hd7, &Hbd, &He4, &H2a)
MFT_CATEGORY_VIDEO_ENCODER = iid
End Function
Public Function MFT_CATEGORY_VIDEO_EFFECT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H12e17c21, &H532c, &H4a6e, &H8a, &H1c, &H40, &H82, &H5a, &H73, &H63, &H97)
MFT_CATEGORY_VIDEO_EFFECT = iid
End Function
Public Function MFT_CATEGORY_MULTIPLEXER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H059c561e, &H05ae, &H4b61, &Hb6, &H9d, &H55, &Hb6, &H1e, &He5, &H4a, &H7b)
MFT_CATEGORY_MULTIPLEXER = iid
End Function
Public Function MFT_CATEGORY_DEMULTIPLEXER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha8700a7a, &H939b, &H44c5, &H99, &Hd7, &H76, &H22, &H6b, &H23, &Hb3, &Hf1)
MFT_CATEGORY_DEMULTIPLEXER = iid
End Function
Public Function MFT_CATEGORY_AUDIO_DECODER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9ea73fb4, &Hef7a, &H4559, &H8d, &H5d, &H71, &H9d, &H8f, &H04, &H26, &Hc7)
MFT_CATEGORY_AUDIO_DECODER = iid
End Function
Public Function MFT_CATEGORY_AUDIO_ENCODER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H91c64bd0, &Hf91e, &H4d8c, &H92, &H76, &Hdb, &H24, &H82, &H79, &Hd9, &H75)
MFT_CATEGORY_AUDIO_ENCODER = iid
End Function
Public Function MFT_CATEGORY_AUDIO_EFFECT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H11064c48, &H3648, &H4ed0, &H93, &H2e, &H05, &Hce, &H8a, &Hc8, &H11, &Hb7)
MFT_CATEGORY_AUDIO_EFFECT = iid
End Function
Public Function MFT_CATEGORY_VIDEO_PROCESSOR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H302ea3fc, &Haa5f, &H47f9, &H9f, &H7a, &Hc2, &H18, &H8b, &Hb1, &H63, &H2)
MFT_CATEGORY_VIDEO_PROCESSOR = iid
End Function
Public Function MFT_CATEGORY_OTHER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H90175d57, &Hb7ea, &H4901, &Hae, &Hb3, &H93, &H3a, &H87, &H47, &H75, &H6f)
MFT_CATEGORY_OTHER = iid
End Function
Public Function MFT_CATEGORY_ENCRYPTOR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb0c687be, &H01cd, &H44b5, &Hb8, &Hb2, &H7c, &H1d, &H7e, &H05, &H8b, &H1f)
MFT_CATEGORY_ENCRYPTOR = iid
End Function
Public Function MFT_CATEGORY_VIDEO_RENDERER_EFFECT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H145cd8b4, &H92f4, &H4b23, &H8a, &He7, &He0, &Hdf, &H6, &Hc2, &Hda, &H95)
MFT_CATEGORY_VIDEO_RENDERER_EFFECT = iid
End Function
Public Function MFT_ENUM_VIDEO_RENDERER_EXTENSION_PROFILE() As UUID
'{62C56928-9A4E-443b-B9DC-CAC830C24100}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H62C56928, CInt(&H9A4E), CInt(&H443b), &HB9, &HDC, &HCA, &HC8, &H30, &HC2, &H41, &H00)
 MFT_ENUM_VIDEO_RENDERER_EXTENSION_PROFILE = iid
End Function
Public Function MFT_ENUM_ADAPTER_LUID() As UUID
'{1D39518C-E220-4DA8-A07F-BA172552D6B1}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1D39518C, CInt(&HE220), CInt(&H4DA8), &HA0, &H7F, &HBA, &H17, &H25, &H52, &HD6, &HB1)
 MFT_ENUM_ADAPTER_LUID = iid
End Function
Public Function MFVideoFormat_H264_ES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3f40f4f0, &H5622, &H4ff8, &Hb6, &Hd8, &Ha1, &H7a, &H58, &H4b, &Hee, &H5e)
MFVideoFormat_H264_ES = iid
End Function
Public Function MFVideoFormat_MPEG2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He06d8026, &Hdb46, &H11cf, &Hb4, &Hd1, &H00, &H80, &H5f, &H6c, &Hbb, &Hea)
MFVideoFormat_MPEG2 = iid
End Function
Public Function MFVideoFormat_MPG2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He06d8026, &Hdb46, &H11cf, &Hb4, &Hd1, &H00, &H80, &H5f, &H6c, &Hbb, &Hea)
MFVideoFormat_MPG2 = iid
End Function
Public Function MFAudioFormat_Dolby_AC3() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He06d802c, &Hdb46, &H11cf, &Hb4, &Hd1, &H00, &H80, &H05f, &H6c, &Hbb, &Hea)
MFAudioFormat_Dolby_AC3 = iid
End Function
Public Function MFAudioFormat_Dolby_DDPlus() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha7fb87af, &H2d02, &H42fb, &Ha4, &Hd4, &H5, &Hcd, &H93, &H84, &H3b, &Hdd)
MFAudioFormat_Dolby_DDPlus = iid
End Function
Public Function MFAudioFormat_Dolby_AC4_V1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H36b7927c, &H3d87, &H4a2a, &H91, &H96, &Ha2, &H1a, &Hd9, &He9, &H35, &He6)
MFAudioFormat_Dolby_AC4_V1 = iid
End Function
Public Function MFAudioFormat_Dolby_AC4_V2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7998b2a0, &H17dd, &H49b6, &H8d, &Hfa, &H9b, &H27, &H85, &H52, &Ha2, &Hac)
MFAudioFormat_Dolby_AC4_V2 = iid
End Function
Public Function MFAudioFormat_Dolby_AC4_V1_ES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9d8dccc6, &Hd156, &H4fb8, &H97, &H9c, &Ha8, &H5b, &He7, &Hd2, &H1d, &Hfa)
MFAudioFormat_Dolby_AC4_V1_ES = iid
End Function
Public Function MFAudioFormat_Dolby_AC4_V2_ES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7e58c9f9, &Hb070, &H45f4, &H8c, &Hcd, &Ha9, &H9a, &H04, &H17, &Hc1, &Hac)
MFAudioFormat_Dolby_AC4_V2_ES = iid
End Function
Public Function MFAudioFormat_MPEGH() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7c13c441, &Hebf8, &H4931, &Hb6, &H78, &H80, &H0b, &H19, &H24, &H22, &H36)
MFAudioFormat_MPEGH = iid
End Function
Public Function MFAudioFormat_MPEGH_ES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H19ee97fe, &H1be0, &H4255, &Ha8, &H76, &He9, &H9f, &H53, &Ha4, &H2a, &He3)
MFAudioFormat_MPEGH_ES = iid
End Function
Public Function MFAudioFormat_Vorbis() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8D2FD10B, &H5841, &H4a6b, &H89, &H05, &H58, &H8F, &HEC, &H1A, &HDE, &HD9)
MFAudioFormat_Vorbis = iid
End Function
Public Function MFAudioFormat_DTS_RAW() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE06D8033, &HDB46, &H11CF, &HB4, &HD1, &H00, &H80, &H5F, &H6C, &HBB, &HEA)
MFAudioFormat_DTS_RAW = iid
End Function
Public Function MFAudioFormat_DTS_HD() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA2E58EB7, &H0FA9, &H48BB, &HA4, &H0C, &HFA, &H0E, &H15, &H6D, &H06, &H45)
MFAudioFormat_DTS_HD = iid
End Function
Public Function MFAudioFormat_DTS_XLL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H45B37C1B, &H8C70, &H4E59, &HA7, &HBE, &HA1, &HE4, &H2C, &H81, &HC8, &H0D)
MFAudioFormat_DTS_XLL = iid
End Function
Public Function MFAudioFormat_DTS_LBR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC2FE6F0A, &H4E3C, &H4DF1, &H9B, &H60, &H50, &H86, &H30, &H91, &HE4, &HB9)
MFAudioFormat_DTS_LBR = iid
End Function
Public Function MFAudioFormat_DTS_UHD() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H87020117, &HACE3, &H42DE, &HB7, &H3E, &HC6, &H56, &H70, &H62, &H63, &HF8)
MFAudioFormat_DTS_UHD = iid
End Function
Public Function MFAudioFormat_DTS_UHDY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B9CCA00, &H91B9, &H4CCC, &H88, &H3A, &H8F, &H78, &H7A, &HC3, &HCC, &H86)
MFAudioFormat_DTS_UHDY = iid
End Function
Public Function MFAudioFormat_Float_SpatialObjects() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hfa39cd94, &Hbc64, &H4ab1, &H9b, &H71, &Hdc, &Hd0, &H9d, &H5a, &H7e, &H7a)
 MFAudioFormat_Float_SpatialObjects = iid
End Function
Public Function MFAudioFormat_LPCM() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He06d8032, &Hdb46, &H11cf, &Hb4, &Hd1, &H00, &H80, &H5f, &H6c, &Hbb, &Hea)
MFAudioFormat_LPCM = iid
End Function
Public Function MFAudioFormat_PCM_HDCP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha5e7ff01, &H8411, &H4acc, &Ha8, &H65, &H5f, &H49, &H41, &H28, &H8d, &H80)
MFAudioFormat_PCM_HDCP = iid
End Function
Public Function MFAudioFormat_Dolby_AC3_HDCP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H97663a80, &H8ffb, &H4445, &Ha6, &Hba, &H79, &H2d, &H90, &H8f, &H49, &H7f)
MFAudioFormat_Dolby_AC3_HDCP = iid
End Function
Public Function MFAudioFormat_AAC_HDCP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H419bce76, &H8b72, &H400f, &Had, &Heb, &H84, &Hb5, &H7d, &H63, &H48, &H4d)
MFAudioFormat_AAC_HDCP = iid
End Function
Public Function MFAudioFormat_ADTS_HDCP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hda4963a3, &H14d8, &H4dcf, &H92, &Hb7, &H19, &H3e, &Hb8, &H43, &H63, &Hdb)
MFAudioFormat_ADTS_HDCP = iid
End Function
Public Function MFAudioFormat_Base_HDCP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3884b5bc, &He277, &H43fd, &H98, &H3d, &H03, &H8a, &Ha8, &Hd9, &Hb6, &H05)
MFAudioFormat_Base_HDCP = iid
End Function
Public Function MFVideoFormat_H264_HDCP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5d0ce9dd, &H9817, &H49da, &Hbd, &Hfd, &Hf5, &Hf5, &Hb9, &H8f, &H18, &Ha6)
MFVideoFormat_H264_HDCP = iid
End Function
Public Function MFVideoFormat_HEVC_HDCP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3cfe0fe6, &H05c4, &H47dc, &H9d, &H70, &H4b, &Hdb, &H29, &H59, &H72, &H0f)
MFVideoFormat_HEVC_HDCP = iid
End Function
Public Function MFVideoFormat_Base_HDCP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Heac3b9d5, &Hbd14, &H4237, &H8f, &H1f, &Hba, &Hb4, &H28, &He4, &H93, &H12)
MFVideoFormat_Base_HDCP = iid
End Function
Public Function MFMPEG4Format_Base() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000000, &H767a, &H494d, &Hb4, &H78, &Hf2, &H9d, &H25, &Hdc, &H90, &H37)
MFMPEG4Format_Base = iid
End Function
Public Function MFSubtitleFormat_XML() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2006f94f, &H29ca, &H4195, &Hb8, &Hdb, &H00, &Hde, &Hd8, &Hff, &H0c, &H97)
MFSubtitleFormat_XML = iid
End Function
Public Function MFSubtitleFormat_TTML() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H73e73992, &H9a10, &H4356, &H95, &H57, &H71, &H94, &He9, &H1e, &H3e, &H54)
MFSubtitleFormat_TTML = iid
End Function
Public Function MFSubtitleFormat_ATSC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7fa7faa3, &Hfeae, &H4e16, &Hae, &Hdf, &H36, &Hb9, &Hac, &Hfb, &Hb0, &H99)
MFSubtitleFormat_ATSC = iid
End Function
Public Function MFSubtitleFormat_WebVTT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc886d215, &Hf485, &H40bb, &H8d, &Hb6, &Hfa, &Hdb, &Hc6, &H19, &Ha4, &H5d)
MFSubtitleFormat_WebVTT = iid
End Function
Public Function MFSubtitleFormat_SRT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5e467f2e, &H77ca, &H4ca5, &H83, &H91, &Hd1, &H42, &Hed, &H4b, &H76, &Hc8)
MFSubtitleFormat_SRT = iid
End Function
Public Function MFSubtitleFormat_SSA() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57176a1b, &H1a9e, &H4eea, &Hab, &Hef, &Hc6, &H17, &H60, &H19, &H8a, &Hc4)
MFSubtitleFormat_SSA = iid
End Function
Public Function MFSubtitleFormat_CustomUserData() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1bb3d849, &H6614, &H4d80, &H88, &H82, &Hed, &H24, &Haa, &H82, &Hda, &H92)
MFSubtitleFormat_CustomUserData = iid
End Function
Public Function MFSubtitleFormat_PGS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H71f40e4a, &H1278, &H4442, &Hb3, &H0d, &H39, &Hdd, &H1d, &H77, &H22, &Hbc)
MFSubtitleFormat_PGS = iid
End Function
Public Function MFSubtitleFormat_VobSub() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6b8e40f4, &H8d2c, &H4ced, &Had, &H91, &H59, &H60, &He4, &H5b, &H44, &H33)
MFSubtitleFormat_VobSub = iid
End Function
Public Function MF_MT_MAJOR_TYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H48eba18e, &Hf8c9, &H4687, &Hbf, &H11, &H0a, &H74, &Hc9, &Hf9, &H6a, &H8f)
MF_MT_MAJOR_TYPE = iid
End Function
Public Function MF_MT_SUBTYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf7e34c9a, &H42e8, &H4714, &Hb7, &H4b, &Hcb, &H29, &Hd7, &H2c, &H35, &He5)
MF_MT_SUBTYPE = iid
End Function
Public Function MF_MT_ALL_SAMPLES_INDEPENDENT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc9173739, &H5e56, &H461c, &Hb7, &H13, &H46, &Hfb, &H99, &H5c, &Hb9, &H5f)
MF_MT_ALL_SAMPLES_INDEPENDENT = iid
End Function
Public Function MF_MT_FIXED_SIZE_SAMPLES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb8ebefaf, &Hb718, &H4e04, &Hb0, &Ha9, &H11, &H67, &H75, &He3, &H32, &H1b)
MF_MT_FIXED_SIZE_SAMPLES = iid
End Function
Public Function MF_MT_COMPRESSED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3afd0cee, &H18f2, &H4ba5, &Ha1, &H10, &H8b, &Hea, &H50, &H2e, &H1f, &H92)
MF_MT_COMPRESSED = iid
End Function
Public Function MF_MT_SAMPLE_SIZE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hdad3ab78, &H1990, &H408b, &Hbc, &He2, &Heb, &Ha6, &H73, &Hda, &Hcc, &H10)
MF_MT_SAMPLE_SIZE = iid
End Function
Public Function MF_MT_WRAPPED_TYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4d3f7b23, &Hd02f, &H4e6c, &H9b, &Hee, &He4, &Hbf, &H2c, &H6c, &H69, &H5d)
MF_MT_WRAPPED_TYPE = iid
End Function
Public Function MF_MT_VIDEO_3D() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hcb5e88cf, &H7b5b, &H476b, &H85, &Haa, &H1c, &Ha5, &Hae, &H18, &H75, &H55)
 MF_MT_VIDEO_3D = iid
End Function
Public Function MF_MT_VIDEO_3D_FORMAT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5315d8a0, &H87c5, &H4697, &Hb7, &H93, &H66, &H6, &Hc6, &H7c, &H4, &H9b)
MF_MT_VIDEO_3D_FORMAT = iid
End Function
Public Function MF_MT_VIDEO_3D_NUM_VIEWS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hbb077e8a, &Hdcbf, &H42eb, &Haf, &H60, &H41, &H8d, &Hf9, &H8a, &Ha4, &H95)
 MF_MT_VIDEO_3D_NUM_VIEWS = iid
End Function
Public Function MF_MT_VIDEO_3D_LEFT_IS_BASE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6d4b7bff, &H5629, &H4404, &H94, &H8c, &Hc6, &H34, &Hf4, &Hce, &H26, &Hd4)
 MF_MT_VIDEO_3D_LEFT_IS_BASE = iid
End Function
Public Function MF_MT_VIDEO_3D_FIRST_IS_LEFT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hec298493, &Hada, &H4ea1, &Ha4, &Hfe, &Hcb, &Hbd, &H36, &Hce, &H93, &H31)
 MF_MT_VIDEO_3D_FIRST_IS_LEFT = iid
End Function
Public Function MFSampleExtension_3DVideo() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf86f97a4, &Hdd54, &H4e2e, &H9a, &H5e, &H55, &Hfc, &H2d, &H74, &Ha0, &H05)
 MFSampleExtension_3DVideo = iid
End Function
Public Function MFSampleExtension_3DVideo_SampleFormat() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8671772, &He36f, &H4cff, &H97, &Hb3, &Hd7, &H2e, &H20, &H98, &H7a, &H48)
 MFSampleExtension_3DVideo_SampleFormat = iid
End Function
Public Function MF_MT_VIDEO_ROTATION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc380465d, &H2271, &H428c, &H9b, &H83, &Hec, &Hea, &H3b, &H4a, &H85, &Hc1)
MF_MT_VIDEO_ROTATION = iid
End Function
Public Function MF_DEVICESTREAM_MULTIPLEXED_MANAGER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6ea542b0, &H281f, &H4231, &Ha4, &H64, &Hfe, &H2f, &H50, &H22, &H50, &H1c)
MF_DEVICESTREAM_MULTIPLEXED_MANAGER = iid
End Function
Public Function MF_MEDIATYPE_MULTIPLEXED_MANAGER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H13c78fb5, &Hf275, &H4ea0, &Hbb, &H5f, &H2, &H49, &H83, &H2b, &Hd, &H6e)
MF_MEDIATYPE_MULTIPLEXED_MANAGER = iid
End Function
Public Function MFSampleExtension_MULTIPLEXED_MANAGER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8dcdee79, &H6b5a, &H4c45, &H8d, &Hb9, &H20, &Hb3, &H95, &Hf0, &H2f, &Hcf)
MFSampleExtension_MULTIPLEXED_MANAGER = iid
End Function
Public Function MF_MT_SECURE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc5acc4fd, &H0304, &H4ecf, &H80, &H9f, &H47, &Hbc, &H97, &Hff, &H63, &Hbd)
MF_MT_SECURE = iid
End Function
Public Function MF_DEVICESTREAM_ATTRIBUTE_FRAMESOURCE_TYPES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H17145fd1, &H1b2b, &H423c, &H80, &H1, &H2b, &H68, &H33, &Hed, &H35, &H88)
MF_DEVICESTREAM_ATTRIBUTE_FRAMESOURCE_TYPES = iid
End Function
Public Function MF_MT_ALPHA_MODE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5D959B0D, &H4CBF, &H4D04, &H91, &H9F, &H3F, &H5F, &H7F, &H28, &H42, &H11)
MF_MT_ALPHA_MODE = iid
End Function
Public Function MF_MT_DEPTH_MEASUREMENT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hfd5ac489, &H917, &H4bb6, &H9d, &H54, &H31, &H22, &Hbf, &H70, &H14, &H4b)
MF_MT_DEPTH_MEASUREMENT = iid
End Function
Public Function MF_MT_DEPTH_VALUE_UNIT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H21a800f5, &H3189, &H4797, &Hbe, &Hba, &Hf1, &H3c, &Hd9, &Ha3, &H1a, &H5e)
MF_MT_DEPTH_VALUE_UNIT = iid
End Function
Public Function MF_MT_VIDEO_NO_FRAME_ORDERING() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3f5b106f, &H6bc2, &H4ee3, &Hb7, &Hed, &H89, &H2, &Hc1, &H8f, &H53, &H51)
MF_MT_VIDEO_NO_FRAME_ORDERING = iid
End Function
Public Function MF_MT_VIDEO_H264_NO_FMOASO() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hed461cd6, &Hec9f, &H416a, &Ha8, &Ha3, &H26, &Hd7, &Hd3, &H10, &H18, &Hd7)
MF_MT_VIDEO_H264_NO_FMOASO = iid
End Function
Public Function MFSampleExtension_ForwardedDecodeUnits() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H424c754c, &H97c8, &H48d6, &H87, &H77, &Hfc, &H41, &Hf7, &Hb6, &H8, &H79)
MFSampleExtension_ForwardedDecodeUnits = iid
End Function
Public Function MFSampleExtension_TargetGlobalLuminance() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3f60ef36, &H31ef, &H4daf, &H83, &H60, &H94, &H3, &H97, &He4, &H1e, &Hf3)
MFSampleExtension_TargetGlobalLuminance = iid
End Function
Public Function MFSampleExtension_ForwardedDecodeUnitType() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H89e57c7, &H47d3, &H4a26, &Hbf, &H9c, &H4b, &H64, &Hfa, &Hfb, &H5d, &H1e)
MFSampleExtension_ForwardedDecodeUnitType = iid
End Function
Public Function MF_MT_FORWARD_CUSTOM_NALU() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hed336efd, &H244f, &H428d, &H91, &H53, &H28, &Hf3, &H99, &H45, &H88, &H90)
MF_MT_FORWARD_CUSTOM_NALU = iid
End Function
Public Function MF_MT_FORWARD_CUSTOM_SEI() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He27362f1, &Hb136, &H41d1, &H95, &H94, &H3a, &H7e, &H4f, &Heb, &Hf2, &Hd1)
MF_MT_FORWARD_CUSTOM_SEI = iid
End Function
Public Function MF_MT_VIDEO_RENDERER_EXTENSION_PROFILE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8437d4b9, &Hd448, &H4fcd, &H9b, &H6b, &H83, &H9b, &Hf9, &H6c, &H77, &H98)
MF_MT_VIDEO_RENDERER_EXTENSION_PROFILE = iid
End Function
Public Function MF_DECODER_FWD_CUSTOM_SEI_DECODE_ORDER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf13bbe3c, &H36d4, &H410a, &Hb9, &H85, &H7a, &H95, &H1a, &H1e, &H62, &H94)
MF_DECODER_FWD_CUSTOM_SEI_DECODE_ORDER = iid
End Function
Public Function MF_VIDEO_RENDERER_EFFECT_APP_SERVICE_NAME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc6052a80, &H6d9c, &H40a3, &H9d, &Hb8, &Hf0, &H27, &Ha2, &H5c, &H9a, &Hb9)
MF_VIDEO_RENDERER_EFFECT_APP_SERVICE_NAME = iid
End Function
Public Function MF_MT_AUDIO_NUM_CHANNELS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H37e48bf5, &H645e, &H4c5b, &H89, &Hde, &Had, &Ha9, &He2, &H9b, &H69, &H6a)
MF_MT_AUDIO_NUM_CHANNELS = iid
End Function
Public Function MF_MT_AUDIO_SAMPLES_PER_SECOND() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5faeeae7, &H0290, &H4c31, &H9e, &H8a, &Hc5, &H34, &Hf6, &H8d, &H9d, &Hba)
MF_MT_AUDIO_SAMPLES_PER_SECOND = iid
End Function
Public Function MF_MT_AUDIO_FLOAT_SAMPLES_PER_SECOND() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hfb3b724a, &Hcfb5, &H4319, &Hae, &Hfe, &H6e, &H42, &Hb2, &H40, &H61, &H32)
MF_MT_AUDIO_FLOAT_SAMPLES_PER_SECOND = iid
End Function
Public Function MF_MT_AUDIO_AVG_BYTES_PER_SECOND() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1aab75c8, &Hcfef, &H451c, &Hab, &H95, &Hac, &H03, &H4b, &H8e, &H17, &H31)
MF_MT_AUDIO_AVG_BYTES_PER_SECOND = iid
End Function
Public Function MF_MT_AUDIO_BLOCK_ALIGNMENT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H322de230, &H9eeb, &H43bd, &Hab, &H7a, &Hff, &H41, &H22, &H51, &H54, &H1d)
MF_MT_AUDIO_BLOCK_ALIGNMENT = iid
End Function
Public Function MF_MT_AUDIO_BITS_PER_SAMPLE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf2deb57f, &H40fa, &H4764, &Haa, &H33, &Hed, &H4f, &H2d, &H1f, &Hf6, &H69)
MF_MT_AUDIO_BITS_PER_SAMPLE = iid
End Function
Public Function MF_MT_AUDIO_VALID_BITS_PER_SAMPLE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd9bf8d6a, &H9530, &H4b7c, &H9d, &Hdf, &Hff, &H6f, &Hd5, &H8b, &Hbd, &H06)
MF_MT_AUDIO_VALID_BITS_PER_SAMPLE = iid
End Function
Public Function MF_MT_AUDIO_SAMPLES_PER_BLOCK() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Haab15aac, &He13a, &H4995, &H92, &H22, &H50, &H1e, &Ha1, &H5c, &H68, &H77)
MF_MT_AUDIO_SAMPLES_PER_BLOCK = iid
End Function
Public Function MF_MT_AUDIO_CHANNEL_MASK() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H55fb5765, &H644a, &H4caf, &H84, &H79, &H93, &H89, &H83, &Hbb, &H15, &H88)
MF_MT_AUDIO_CHANNEL_MASK = iid
End Function
Public Function MF_MT_AUDIO_FOLDDOWN_MATRIX() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9d62927c, &H36be, &H4cf2, &Hb5, &Hc4, &Ha3, &H92, &H6e, &H3e, &H87, &H11)
MF_MT_AUDIO_FOLDDOWN_MATRIX = iid
End Function
Public Function MF_MT_AUDIO_WMADRC_PEAKREF() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9d62927d, &H36be, &H4cf2, &Hb5, &Hc4, &Ha3, &H92, &H6e, &H3e, &H87, &H11)
MF_MT_AUDIO_WMADRC_PEAKREF = iid
End Function
Public Function MF_MT_AUDIO_WMADRC_PEAKTARGET() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9d62927e, &H36be, &H4cf2, &Hb5, &Hc4, &Ha3, &H92, &H6e, &H3e, &H87, &H11)
MF_MT_AUDIO_WMADRC_PEAKTARGET = iid
End Function
Public Function MF_MT_AUDIO_WMADRC_AVGREF() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9d62927f, &H36be, &H4cf2, &Hb5, &Hc4, &Ha3, &H92, &H6e, &H3e, &H87, &H11)
MF_MT_AUDIO_WMADRC_AVGREF = iid
End Function
Public Function MF_MT_AUDIO_WMADRC_AVGTARGET() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9d629280, &H36be, &H4cf2, &Hb5, &Hc4, &Ha3, &H92, &H6e, &H3e, &H87, &H11)
MF_MT_AUDIO_WMADRC_AVGTARGET = iid
End Function
Public Function MF_MT_AUDIO_PREFER_WAVEFORMATEX() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha901aaba, &He037, &H458a, &Hbd, &Hf6, &H54, &H5b, &He2, &H07, &H40, &H42)
MF_MT_AUDIO_PREFER_WAVEFORMATEX = iid
End Function
Public Function MF_MT_AAC_PAYLOAD_TYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hbfbabe79, &H7434, &H4d1c, &H94, &Hf0, &H72, &Ha3, &Hb9, &He1, &H71, &H88)
MF_MT_AAC_PAYLOAD_TYPE = iid
End Function
Public Function MF_MT_AAC_AUDIO_PROFILE_LEVEL_INDICATION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7632f0e6, &H9538, &H4d61, &Hac, &Hda, &Hea, &H29, &Hc8, &Hc1, &H44, &H56)
MF_MT_AAC_AUDIO_PROFILE_LEVEL_INDICATION = iid
End Function
Public Function MF_MT_AUDIO_FLAC_MAX_BLOCK_SIZE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8b81adae, &H4b5a, &H4d40, &H80, &H22, &Hf3, &H8d, &H9, &Hca, &H3c, &H5c)
MF_MT_AUDIO_FLAC_MAX_BLOCK_SIZE = iid
End Function
Public Function MF_MT_SPATIAL_AUDIO_MAX_DYNAMIC_OBJECTS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hdcfba24a, &H2609, &H4240, &Ha7, &H21, &H3f, &Hae, &Ha7, &H6a, &H4d, &Hf9)
 MF_MT_SPATIAL_AUDIO_MAX_DYNAMIC_OBJECTS = iid
End Function
Public Function MF_MT_SPATIAL_AUDIO_OBJECT_METADATA_FORMAT_ID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2ab71bc0, &H6223, &H4ba7, &Had, &H64, &H7b, &H94, &Hb4, &H7a, &He7, &H92)
 MF_MT_SPATIAL_AUDIO_OBJECT_METADATA_FORMAT_ID = iid
End Function
Public Function MF_MT_SPATIAL_AUDIO_OBJECT_METADATA_LENGTH() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H94ba8be, &Hd723, &H489f, &H92, &Hfa, &H76, &H67, &H77, &Hb3, &H47, &H26)
 MF_MT_SPATIAL_AUDIO_OBJECT_METADATA_LENGTH = iid
End Function
Public Function MF_MT_SPATIAL_AUDIO_MAX_METADATA_ITEMS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H11aa80b4, &He0da, &H47c6, &H80, &H60, &H96, &Hc1, &H25, &H9a, &He5, &Hd)
 MF_MT_SPATIAL_AUDIO_MAX_METADATA_ITEMS = iid
End Function
Public Function MF_MT_SPATIAL_AUDIO_MIN_METADATA_ITEM_OFFSET_SPACING() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H83e96ec9, &H1184, &H417e, &H82, &H54, &H9f, &H26, &H91, &H58, &Hfc, &H6)
 MF_MT_SPATIAL_AUDIO_MIN_METADATA_ITEM_OFFSET_SPACING = iid
End Function
Public Function MF_MT_SPATIAL_AUDIO_DATA_PRESENT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6842f6e7, &Hd43e, &H4ebb, &H9c, &H9c, &Hc9, &H6f, &H41, &H78, &H48, &H63)
 MF_MT_SPATIAL_AUDIO_DATA_PRESENT = iid
End Function
Public Function MF_MT_SPATIAL_AUDIO_IS_PREVIRTUALIZED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4eacab51, &Hffe5, &H421a, &Ha2, &Ha7, &H8b, &H74, &H09, &Ha1, &Hca, &Hc4)
MF_MT_SPATIAL_AUDIO_IS_PREVIRTUALIZED = iid
End Function
Public Function MF_MT_MPEGH_AUDIO_PROFILE_LEVEL_INDICATION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H51267a39, &Hdd0c, &H4bb9, &Ha7, &Hbd, &H91, &H73, &Had, &H4b, &H13, &H1c)
MF_MT_MPEGH_AUDIO_PROFILE_LEVEL_INDICATION = iid
End Function
Public Function MF_MT_FRAME_SIZE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1652c33d, &Hd6b2, &H4012, &Hb8, &H34, &H72, &H03, &H08, &H49, &Ha3, &H7d)
MF_MT_FRAME_SIZE = iid
End Function
Public Function MF_MT_FRAME_RATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc459a2e8, &H3d2c, &H4e44, &Hb1, &H32, &Hfe, &He5, &H15, &H6c, &H7b, &Hb0)
MF_MT_FRAME_RATE = iid
End Function
Public Function MF_MT_PIXEL_ASPECT_RATIO() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc6376a1e, &H8d0a, &H4027, &Hbe, &H45, &H6d, &H9a, &H0a, &Hd3, &H9b, &Hb6)
MF_MT_PIXEL_ASPECT_RATIO = iid
End Function
Public Function MF_MT_DRM_FLAGS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8772f323, &H355a, &H4cc7, &Hbb, &H78, &H6d, &H61, &Ha0, &H48, &Hae, &H82)
MF_MT_DRM_FLAGS = iid
End Function
Public Function MF_MT_TIMESTAMP_CAN_BE_DTS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H24974215, &H1b7b, &H41e4, &H86, &H25, &Hac, &H46, &H9f, &H2d, &Hed, &Haa)
MF_MT_TIMESTAMP_CAN_BE_DTS = iid
End Function
Public Function MF_MT_PAD_CONTROL_FLAGS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4d0e73e5, &H80ea, &H4354, &Ha9, &Hd0, &H11, &H76, &Hce, &Hb0, &H28, &Hea)
MF_MT_PAD_CONTROL_FLAGS = iid
End Function
Public Function MF_MT_SOURCE_CONTENT_HINT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H68aca3cc, &H22d0, &H44e6, &H85, &Hf8, &H28, &H16, &H71, &H97, &Hfa, &H38)
MF_MT_SOURCE_CONTENT_HINT = iid
End Function
Public Function MF_MT_VIDEO_CHROMA_SITING() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H65df2370, &Hc773, &H4c33, &Haa, &H64, &H84, &H3e, &H06, &H8e, &Hfb, &H0c)
MF_MT_VIDEO_CHROMA_SITING = iid
End Function
Public Function MF_MT_INTERLACE_MODE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He2724bb8, &He676, &H4806, &Hb4, &Hb2, &Ha8, &Hd6, &Hef, &Hb4, &H4c, &Hcd)
MF_MT_INTERLACE_MODE = iid
End Function
Public Function MF_MT_TRANSFER_FUNCTION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5fb0fce9, &Hbe5c, &H4935, &Ha8, &H11, &Hec, &H83, &H8f, &H8e, &Hed, &H93)
MF_MT_TRANSFER_FUNCTION = iid
End Function
Public Function MF_MT_VIDEO_PRIMARIES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hdbfbe4d7, &H0740, &H4ee0, &H81, &H92, &H85, &H0a, &Hb0, &He2, &H19, &H35)
MF_MT_VIDEO_PRIMARIES = iid
End Function
Public Function MF_MT_MAX_LUMINANCE_LEVEL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H50253128, &Hc110, &H4de4, &H98, &Hae, &H46, &Ha3, &H24, &Hfa, &He6, &Hda)
MF_MT_MAX_LUMINANCE_LEVEL = iid
End Function
Public Function MF_MT_MAX_FRAME_AVERAGE_LUMINANCE_LEVEL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H58d4bf57, &H6f52, &H4733, &Ha1, &H95, &Ha9, &He2, &H9e, &Hcf, &H9e, &H27)
MF_MT_MAX_FRAME_AVERAGE_LUMINANCE_LEVEL = iid
End Function
Public Function MF_MT_MAX_MASTERING_LUMINANCE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd6c6b997, &H272f, &H4ca1, &H8d, &H0, &H80, &H42, &H11, &H1a, &Hf, &Hf6)
MF_MT_MAX_MASTERING_LUMINANCE = iid
End Function
Public Function MF_MT_MIN_MASTERING_LUMINANCE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H839a4460, &H4e7e, &H4b4f, &Hae, &H79, &Hcc, &H8, &H90, &H5c, &H7b, &H27)
MF_MT_MIN_MASTERING_LUMINANCE = iid
End Function
Public Function MF_MT_DECODER_USE_MAX_RESOLUTION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4c547c24, &Haf9a, &H4f38, &H96, &Had, &H97, &H87, &H73, &Hcf, &H53, &He7)
MF_MT_DECODER_USE_MAX_RESOLUTION = iid
End Function
Public Function MF_MT_DECODER_MAX_DPB_COUNT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H67be144c, &H88b7, &H4ca9, &H96, &H28, &Hc8, &H8, &Hd5, &H26, &H22, &H17)
MF_MT_DECODER_MAX_DPB_COUNT = iid
End Function
Public Function MF_MT_CUSTOM_VIDEO_PRIMARIES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H47537213, &H8cfb, &H4722, &Haa, &H34, &Hfb, &Hc9, &He2, &H4d, &H77, &Hb8)
MF_MT_CUSTOM_VIDEO_PRIMARIES = iid
End Function
Public Function MF_MT_YUV_MATRIX() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3e23d450, &H2c75, &H4d25, &Ha0, &H0e, &Hb9, &H16, &H70, &Hd1, &H23, &H27)
MF_MT_YUV_MATRIX = iid
End Function
Public Function MF_MT_VIDEO_LIGHTING() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H53a0529c, &H890b, &H4216, &H8b, &Hf9, &H59, &H93, &H67, &Had, &H6d, &H20)
MF_MT_VIDEO_LIGHTING = iid
End Function
Public Function MF_MT_VIDEO_NOMINAL_RANGE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc21b8ee5, &Hb956, &H4071, &H8d, &Haf, &H32, &H5e, &Hdf, &H5c, &Hab, &H11)
MF_MT_VIDEO_NOMINAL_RANGE = iid
End Function
Public Function MF_MT_GEOMETRIC_APERTURE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H66758743, &H7e5f, &H400d, &H98, &H0a, &Haa, &H85, &H96, &Hc8, &H56, &H96)
MF_MT_GEOMETRIC_APERTURE = iid
End Function
Public Function MF_MT_MINIMUM_DISPLAY_APERTURE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd7388766, &H18fe, &H48c6, &Ha1, &H77, &Hee, &H89, &H48, &H67, &Hc8, &Hc4)
MF_MT_MINIMUM_DISPLAY_APERTURE = iid
End Function
Public Function MF_MT_PAN_SCAN_APERTURE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H79614dde, &H9187, &H48fb, &Hb8, &Hc7, &H4d, &H52, &H68, &H9d, &He6, &H49)
MF_MT_PAN_SCAN_APERTURE = iid
End Function
Public Function MF_MT_PAN_SCAN_ENABLED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4b7f6bc3, &H8b13, &H40b2, &Ha9, &H93, &Hab, &Hf6, &H30, &Hb8, &H20, &H4e)
MF_MT_PAN_SCAN_ENABLED = iid
End Function
Public Function MF_MT_AVG_BITRATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H20332624, &Hfb0d, &H4d9e, &Hbd, &H0d, &Hcb, &Hf6, &H78, &H6c, &H10, &H2e)
MF_MT_AVG_BITRATE = iid
End Function
Public Function MF_MT_AVG_BIT_ERROR_RATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H799cabd6, &H3508, &H4db4, &Ha3, &Hc7, &H56, &H9c, &Hd5, &H33, &Hde, &Hb1)
MF_MT_AVG_BIT_ERROR_RATE = iid
End Function
Public Function MF_MT_MAX_KEYFRAME_SPACING() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc16eb52b, &H73a1, &H476f, &H8d, &H62, &H83, &H9d, &H6a, &H02, &H06, &H52)
MF_MT_MAX_KEYFRAME_SPACING = iid
End Function
Public Function MF_MT_USER_DATA() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb6bc765f, &H4c3b, &H40a4, &Hbd, &H51, &H25, &H35, &Hb6, &H6f, &He0, &H9d)
MF_MT_USER_DATA = iid
End Function
Public Function MF_MT_OUTPUT_BUFFER_NUM() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha505d3ac, &Hf930, &H436e, &H8e, &Hde, &H93, &Ha5, &H09, &Hce, &H23, &Hb2)
MF_MT_OUTPUT_BUFFER_NUM = iid
End Function
Public Function MF_MT_REALTIME_CONTENT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hbb12d222, &H2bdb, &H425e, &H91, &Hec, &H23, &H08, &He1, &H89, &Ha5, &H8f)
MF_MT_REALTIME_CONTENT = iid
End Function
Public Function MF_MT_DEFAULT_STRIDE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H644b4e48, &H1e02, &H4516, &Hb0, &Heb, &Hc0, &H1c, &Ha9, &Hd4, &H9a, &Hc6)
MF_MT_DEFAULT_STRIDE = iid
End Function
Public Function MF_MT_PALETTE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6d283f42, &H9846, &H4410, &Haf, &Hd9, &H65, &H4d, &H50, &H3b, &H1a, &H54)
MF_MT_PALETTE = iid
End Function
Public Function MF_MT_AM_FORMAT_TYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H73d1072d, &H1870, &H4174, &Ha0, &H63, &H29, &Hff, &H4f, &Hf6, &Hc1, &H1e)
MF_MT_AM_FORMAT_TYPE = iid
End Function
Public Function MF_MT_VIDEO_PROFILE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Had76a80b, &H2d5c, &H4e0b, &Hb3, &H75, &H64, &He5, &H20, &H13, &H70, &H36)
MF_MT_VIDEO_PROFILE = iid
End Function
Public Function MF_MT_VIDEO_LEVEL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H96f66574, &H11c5, &H4015, &H86, &H66, &Hbf, &Hf5, &H16, &H43, &H6d, &Ha7)
MF_MT_VIDEO_LEVEL = iid
End Function
Public Function MF_MT_MPEG_START_TIME_CODE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H91f67885, &H4333, &H4280, &H97, &Hcd, &Hbd, &H5a, &H6c, &H03, &Ha0, &H6e)
MF_MT_MPEG_START_TIME_CODE = iid
End Function
Public Function MF_MT_MPEG2_PROFILE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Had76a80b, &H2d5c, &H4e0b, &Hb3, &H75, &H64, &He5, &H20, &H13, &H70, &H36)
MF_MT_MPEG2_PROFILE = iid
End Function
Public Function MF_MT_MPEG2_LEVEL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H96f66574, &H11c5, &H4015, &H86, &H66, &Hbf, &Hf5, &H16, &H43, &H6d, &Ha7)
MF_MT_MPEG2_LEVEL = iid
End Function
Public Function MF_MT_MPEG2_FLAGS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H31e3991d, &Hf701, &H4b2f, &Hb4, &H26, &H8a, &He3, &Hbd, &Ha9, &He0, &H4b)
MF_MT_MPEG2_FLAGS = iid
End Function
Public Function MF_MT_MPEG_SEQUENCE_HEADER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3c036de7, &H3ad0, &H4c9e, &H92, &H16, &Hee, &H6d, &H6a, &Hc2, &H1c, &Hb3)
MF_MT_MPEG_SEQUENCE_HEADER = iid
End Function
Public Function MF_MT_MPEG2_STANDARD() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha20af9e8, &H928a, &H4b26, &Haa, &Ha9, &Hf0, &H5c, &H74, &Hca, &Hc4, &H7c)
MF_MT_MPEG2_STANDARD = iid
End Function
Public Function MF_MT_MPEG2_TIMECODE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5229ba10, &He29d, &H4f80, &Ha5, &H9c, &Hdf, &H4f, &H18, &H2, &H7, &Hd2)
MF_MT_MPEG2_TIMECODE = iid
End Function
Public Function MF_MT_MPEG2_CONTENT_PACKET() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H825d55e4, &H4f12, &H4197, &H9e, &Hb3, &H59, &Hb6, &He4, &H71, &Hf, &H6)
MF_MT_MPEG2_CONTENT_PACKET = iid
End Function
Public Function MF_MT_MPEG2_ONE_FRAME_PER_PACKET() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H91a49eb5, &H1d20, &H4b42, &Hac, &He8, &H80, &H42, &H69, &Hbf, &H95, &Hed)
MF_MT_MPEG2_ONE_FRAME_PER_PACKET = iid
End Function
Public Function MF_MT_MPEG2_HDCP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H168f1b4a, &H3e91, &H450f, &Hae, &Ha7, &He4, &Hba, &Hea, &Hda, &He5, &Hba)
MF_MT_MPEG2_HDCP = iid
End Function
Public Function MF_MT_H264_MAX_CODEC_CONFIG_DELAY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf5929986, &H4c45, &H4fbb, &Hbb, &H49, &H6c, &Hc5, &H34, &Hd0, &H5b, &H9b)
MF_MT_H264_MAX_CODEC_CONFIG_DELAY = iid
End Function
Public Function MF_MT_H264_SUPPORTED_SLICE_MODES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc8be1937, &H4d64, &H4549, &H83, &H43, &Ha8, &H8, &H6c, &Hb, &Hfd, &Ha5)
MF_MT_H264_SUPPORTED_SLICE_MODES = iid
End Function
Public Function MF_MT_H264_SUPPORTED_SYNC_FRAME_TYPES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H89a52c01, &Hf282, &H48d2, &Hb5, &H22, &H22, &He6, &Hae, &H63, &H31, &H99)
MF_MT_H264_SUPPORTED_SYNC_FRAME_TYPES = iid
End Function
Public Function MF_MT_H264_RESOLUTION_SCALING() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He3854272, &Hf715, &H4757, &Hba, &H90, &H1b, &H69, &H6c, &H77, &H34, &H57)
MF_MT_H264_RESOLUTION_SCALING = iid
End Function
Public Function MF_MT_H264_SIMULCAST_SUPPORT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9ea2d63d, &H53f0, &H4a34, &Hb9, &H4e, &H9d, &He4, &H9a, &H7, &H8c, &Hb3)
MF_MT_H264_SIMULCAST_SUPPORT = iid
End Function
Public Function MF_MT_H264_SUPPORTED_RATE_CONTROL_MODES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6a8ac47e, &H519c, &H4f18, &H9b, &Hb3, &H7e, &Hea, &Hae, &Ha5, &H59, &H4d)
MF_MT_H264_SUPPORTED_RATE_CONTROL_MODES = iid
End Function
Public Function MF_MT_H264_MAX_MB_PER_SEC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H45256d30, &H7215, &H4576, &H93, &H36, &Hb0, &Hf1, &Hbc, &Hd5, &H9b, &Hb2)
MF_MT_H264_MAX_MB_PER_SEC = iid
End Function
Public Function MF_MT_H264_SUPPORTED_USAGES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H60b1a998, &Hdc01, &H40ce, &H97, &H36, &Hab, &Ha8, &H45, &Ha2, &Hdb, &Hdc)
MF_MT_H264_SUPPORTED_USAGES = iid
End Function
Public Function MF_MT_H264_CAPABILITIES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hbb3bd508, &H490a, &H11e0, &H99, &He4, &H13, &H16, &Hdf, &Hd7, &H20, &H85)
MF_MT_H264_CAPABILITIES = iid
End Function
Public Function MF_MT_H264_SVC_CAPABILITIES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf8993abe, &Hd937, &H4a8f, &Hbb, &Hca, &H69, &H66, &Hfe, &H9e, &H11, &H52)
MF_MT_H264_SVC_CAPABILITIES = iid
End Function
Public Function MF_MT_H264_USAGE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H359ce3a5, &Haf00, &H49ca, &Ha2, &Hf4, &H2a, &Hc9, &H4c, &Ha8, &H2b, &H61)
MF_MT_H264_USAGE = iid
End Function
Public Function MF_MT_H264_RATE_CONTROL_MODES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H705177d8, &H45cb, &H11e0, &Hac, &H7d, &Hb9, &H1c, &He0, &Hd7, &H20, &H85)
MF_MT_H264_RATE_CONTROL_MODES = iid
End Function
Public Function MF_MT_H264_LAYOUT_PER_STREAM() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H85e299b2, &H90e3, &H4fe8, &Hb2, &Hf5, &Hc0, &H67, &He0, &Hbf, &He5, &H7a)
MF_MT_H264_LAYOUT_PER_STREAM = iid
End Function
Public Function MF_MT_IN_BAND_PARAMETER_SET() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H75da5090, &H910b, &H4a03, &H89, &H6c, &H7b, &H89, &H8f, &Hee, &Ha5, &Haf)
MF_MT_IN_BAND_PARAMETER_SET = iid
End Function
Public Function MF_MT_MPEG4_TRACK_TYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H54f486dd, &H9327, &H4f6d, &H80, &Hab, &H6f, &H70, &H9e, &Hbb, &H4c, &Hce)
MF_MT_MPEG4_TRACK_TYPE = iid
End Function
Public Function MF_MT_CONTAINER_RATE_SCALING() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H83877f5e, &H444, &H4e28, &H84, &H79, &H6d, &Hb0, &H98, &H9b, &H8c, &H9)
MF_MT_CONTAINER_RATE_SCALING = iid
End Function
Public Function MF_MT_DV_AAUX_SRC_PACK_0() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H84bd5d88, &H0fb8, &H4ac8, &Hbe, &H4b, &Ha8, &H84, &H8b, &Hef, &H98, &Hf3)
MF_MT_DV_AAUX_SRC_PACK_0 = iid
End Function
Public Function MF_MT_DV_AAUX_CTRL_PACK_0() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf731004e, &H1dd1, &H4515, &Haa, &Hbe, &Hf0, &Hc0, &H6a, &Ha5, &H36, &Hac)
MF_MT_DV_AAUX_CTRL_PACK_0 = iid
End Function
Public Function MF_MT_DV_AAUX_SRC_PACK_1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H720e6544, &H0225, &H4003, &Ha6, &H51, &H01, &H96, &H56, &H3a, &H95, &H8e)
MF_MT_DV_AAUX_SRC_PACK_1 = iid
End Function
Public Function MF_MT_DV_AAUX_CTRL_PACK_1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hcd1f470d, &H1f04, &H4fe0, &Hbf, &Hb9, &Hd0, &H7a, &He0, &H38, &H6a, &Hd8)
MF_MT_DV_AAUX_CTRL_PACK_1 = iid
End Function
Public Function MF_MT_DV_VAUX_SRC_PACK() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H41402d9d, &H7b57, &H43c6, &Hb1, &H29, &H2c, &Hb9, &H97, &Hf1, &H50, &H09)
MF_MT_DV_VAUX_SRC_PACK = iid
End Function
Public Function MF_MT_DV_VAUX_CTRL_PACK() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2f84e1c4, &H0da1, &H4788, &H93, &H8e, &H0d, &Hfb, &Hfb, &Hb3, &H4b, &H48)
MF_MT_DV_VAUX_CTRL_PACK = iid
End Function
Public Function MF_MT_ARBITRARY_HEADER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9e6bd6f5, &H109, &H4f95, &H84, &Hac, &H93, &H9, &H15, &H3a, &H19, &Hfc)
MF_MT_ARBITRARY_HEADER = iid
End Function
Public Function MF_MT_ARBITRARY_FORMAT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5a75b249, &Hd7d, &H49a1, &Ha1, &Hc3, &He0, &Hd8, &H7f, &Hc, &Had, &He5)
MF_MT_ARBITRARY_FORMAT = iid
End Function
Public Function MF_MT_IMAGE_LOSS_TOLERANT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hed062cf4, &He34e, &H4922, &Hbe, &H99, &H93, &H40, &H32, &H13, &H3d, &H7c)
MF_MT_IMAGE_LOSS_TOLERANT = iid
End Function
Public Function MF_MT_MPEG4_SAMPLE_DESCRIPTION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H261e9d83, &H9529, &H4b8f, &Ha1, &H11, &H8b, &H9c, &H95, &H0a, &H81, &Ha9)
MF_MT_MPEG4_SAMPLE_DESCRIPTION = iid
End Function
Public Function MF_MT_MPEG4_CURRENT_SAMPLE_ENTRY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9aa7e155, &Hb64a, &H4c1d, &Ha5, &H00, &H45, &H5d, &H60, &H0b, &H65, &H60)
MF_MT_MPEG4_CURRENT_SAMPLE_ENTRY = iid
End Function
Public Function MF_SD_AMBISONICS_SAMPLE3D_DESCRIPTION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf715cf3e, &Ha964, &H4c3f, &H94, &Hae, &H9d, &H6b, &Ha7, &H26, &H46, &H41)
MF_SD_AMBISONICS_SAMPLE3D_DESCRIPTION = iid
End Function
Public Function MF_MT_ORIGINAL_4CC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd7be3fe0, &H2bc7, &H492d, &Hb8, &H43, &H61, &Ha1, &H91, &H9b, &H70, &Hc3)
MF_MT_ORIGINAL_4CC = iid
End Function
Public Function MF_MT_ORIGINAL_WAVE_FORMAT_TAG() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8cbbc843, &H9fd9, &H49c2, &H88, &H2f, &Ha7, &H25, &H86, &Hc4, &H08, &Had)
MF_MT_ORIGINAL_WAVE_FORMAT_TAG = iid
End Function
Public Function MF_MT_FRAME_RATE_RANGE_MIN() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd2e7558c, &Hdc1f, &H403f, &H9a, &H72, &Hd2, &H8b, &Hb1, &Heb, &H3b, &H5e)
MF_MT_FRAME_RATE_RANGE_MIN = iid
End Function
Public Function MF_MT_FRAME_RATE_RANGE_MAX() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He3371d41, &Hb4cf, &H4a05, &Hbd, &H4e, &H20, &Hb8, &H8b, &Hb2, &Hc4, &Hd6)
MF_MT_FRAME_RATE_RANGE_MAX = iid
End Function
Public Function MF_LOW_LATENCY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9c27891a, &Hed7a, &H40e1, &H88, &He8, &Hb2, &H27, &H27, &Ha0, &H24, &Hee)
MF_LOW_LATENCY = iid
End Function
Public Function MF_VIDEO_MAX_MB_PER_SEC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He3f2e203, &Hd445, &H4b8c, &H92, &H11, &Hae, &H39, &Hd, &H3b, &Ha0, &H17)
MF_VIDEO_MAX_MB_PER_SEC = iid
End Function
Public Function MF_DISABLE_FRAME_CORRUPTION_INFO() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7086e16c, &H49c5, &H4201, &H88, &H2a, &H85, &H38, &Hf3, &H8c, &Hf1, &H3a)
MF_DISABLE_FRAME_CORRUPTION_INFO = iid
End Function
Public Function MFStreamExtension_CameraExtrinsics() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H686196d0, &H13e2, &H41d9, &H96, &H38, &Hef, &H3, &H2c, &H27, &H2a, &H52)
MFStreamExtension_CameraExtrinsics = iid
End Function
Public Function MFSampleExtension_CameraExtrinsics() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6b761658, &Hb7ec, &H4c3b, &H82, &H25, &H86, &H23, &Hca, &Hbe, &Hc3, &H1d)
MFSampleExtension_CameraExtrinsics = iid
End Function
Public Function MFStreamExtension_PinholeCameraIntrinsics() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hdbac0455, &Hec8, &H4aef, &H9c, &H32, &H7a, &H3e, &He3, &H45, &H6f, &H53)
MFStreamExtension_PinholeCameraIntrinsics = iid
End Function
Public Function MFSampleExtension_PinholeCameraIntrinsics() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4ee3b6c5, &H6a15, &H4e72, &H97, &H61, &H70, &Hc1, &Hdb, &H8b, &H9f, &He3)
MFSampleExtension_PinholeCameraIntrinsics = iid
End Function
Public Function MFMediaType_Default() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H81A412E6, &H8103, &H4B06, &H85, &H7F, &H18, &H62, &H78, &H10, &H24, &HAC)
MFMediaType_Default = iid
End Function
Public Function MFMediaType_Audio() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H73647561, &H0000, &H0010, &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
MFMediaType_Audio = iid
End Function
Public Function MFMediaType_Video() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H73646976, &H0000, &H0010, &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
MFMediaType_Video = iid
End Function
Public Function MFMediaType_Protected() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7b4b6fe6, &H9d04, &H4494, &Hbe, &H14, &H7e, &H0b, &Hd0, &H76, &Hc8, &He4)
MFMediaType_Protected = iid
End Function
Public Function MFMediaType_SAMI() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He69669a0, &H3dcd, &H40cb, &H9e, &H2e, &H37, &H08, &H38, &H7c, &H06, &H16)
MFMediaType_SAMI = iid
End Function
Public Function MFMediaType_Script() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H72178C22, &HE45B, &H11D5, &HBC, &H2A, &H00, &HB0, &HD0, &HF3, &HF4, &HAB)
MFMediaType_Script = iid
End Function
Public Function MFMediaType_Image() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H72178C23, &HE45B, &H11D5, &HBC, &H2A, &H00, &HB0, &HD0, &HF3, &HF4, &HAB)
MFMediaType_Image = iid
End Function
Public Function MFMediaType_HTML() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H72178C24, &HE45B, &H11D5, &HBC, &H2A, &H00, &HB0, &HD0, &HF3, &HF4, &HAB)
MFMediaType_HTML = iid
End Function
Public Function MFMediaType_Binary() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H72178C25, &HE45B, &H11D5, &HBC, &H2A, &H00, &HB0, &HD0, &HF3, &HF4, &HAB)
MFMediaType_Binary = iid
End Function
Public Function MFMediaType_FileTransfer() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H72178C26, &HE45B, &H11D5, &HBC, &H2A, &H00, &HB0, &HD0, &HF3, &HF4, &HAB)
MFMediaType_FileTransfer = iid
End Function
Public Function MFMediaType_Stream() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He436eb83, &H524f, &H11ce, &H9f, &H53, &H00, &H20, &Haf, &H0b, &Ha7, &H70)
MFMediaType_Stream = iid
End Function
Public Function MFMediaType_MultiplexedFrames() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6ea542b0, &H281f, &H4231, &Ha4, &H64, &Hfe, &H2f, &H50, &H22, &H50, &H1c)
MFMediaType_MultiplexedFrames = iid
End Function
Public Function MFMediaType_Subtitle() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha6d13581, &Hed50, &H4e65, &Hae, &H08, &H26, &H06, &H55, &H76, &Haa, &Hcc)
MFMediaType_Subtitle = iid
End Function
Public Function MFMediaType_Perception() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H597ff6f9, &H6ea2, &H4670, &H85, &Hb4, &Hea, &H84, &H7, &H3f, &He9, &H40)
MFMediaType_Perception = iid
End Function
Public Function MFImageFormat_JPEG() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H19e4a5aa, &H5662, &H4fc5, &Ha0, &Hc0, &H17, &H58, &H02, &H8e, &H10, &H57)
MFImageFormat_JPEG = iid
End Function
Public Function MFImageFormat_RGB32() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000016, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MFImageFormat_RGB32 = iid
End Function
Public Function MFStreamFormat_MPEG2Transport() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He06d8023, &Hdb46, &H11cf, &Hb4, &Hd1, &H00, &H80, &H5f, &H6c, &Hbb, &Hea)
MFStreamFormat_MPEG2Transport = iid
End Function
Public Function MFStreamFormat_MPEG2Program() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H263067d1, &Hd330, &H45dc, &Hb6, &H69, &H34, &Hd9, &H86, &He4, &He3, &He1)
MFStreamFormat_MPEG2Program = iid
End Function
Public Function AM_MEDIA_TYPE_REPRESENTATION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He2e42ad2, &H132c, &H491e, &Ha2, &H68, &H3c, &H7c, &H2d, &Hca, &H18, &H1f)
AM_MEDIA_TYPE_REPRESENTATION = iid
End Function
Public Function FORMAT_MFVideoFormat() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Haed4ab2d, &H7326, &H43cb, &H94, &H64, &Hc8, &H79, &Hca, &Hb9, &Hc4, &H3d)
FORMAT_MFVideoFormat = iid
End Function
Public Function MFMediaType_Metadata() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2c8fa20c, &H82bb, &H4782, &H90, &Ha0, &H98, &Ha2, &Ha5, &Hbd, &H8e, &Hf8)
MFMediaType_Metadata = iid
End Function
Public Function CLSID_MFSourceResolver() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H90eab60f, &He43a, &H4188, &Hbc, &Hc4, &He4, &H7f, &Hdf, &H04, &H86, &H8c)
CLSID_MFSourceResolver = iid
End Function
Public Function MF_DEVICESTREAM_ATTRIBUTE_FACEAUTH_CAPABILITY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HCB6FD12A, &H2248, &H4E41, &HAD, &H46, &HE7, &H8B, &HB9, &H0A, &HB9, &HFC)
MF_DEVICESTREAM_ATTRIBUTE_FACEAUTH_CAPABILITY = iid
End Function
Public Function MF_DEVICESTREAM_ATTRIBUTE_SECURE_CAPABILITY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H940FD626, &HEA6E, &H4684, &H98, &H40, &H36, &HBD, &H6E, &HC9, &HFB, &HEF)
MF_DEVICESTREAM_ATTRIBUTE_SECURE_CAPABILITY = iid
End Function



Public Function MFVideoFormat_Base() As UUID
'{00000000-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000000, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_Base = iid
End Function
Public Function MFVideoFormat_RGB32() As UUID
'{00000016-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000016, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_RGB32 = iid
End Function
Public Function MFVideoFormat_ARGB32() As UUID
'{00000015-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000015, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_ARGB32 = iid
End Function
Public Function MFVideoFormat_RGB24() As UUID
'{00000014-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000014, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_RGB24 = iid
End Function
Public Function MFVideoFormat_RGB555() As UUID
'{00000018-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000018, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_RGB555 = iid
End Function
Public Function MFVideoFormat_RGB565() As UUID
'{00000017-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000017, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_RGB565 = iid
End Function
Public Function MFVideoFormat_RGB8() As UUID
'{00000029-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000029, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_RGB8 = iid
End Function
Public Function MFVideoFormat_L8() As UUID
'{00000032-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000032, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_L8 = iid
End Function
Public Function MFVideoFormat_L16() As UUID
'{00000051-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000051, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_L16 = iid
End Function
Public Function MFVideoFormat_D16() As UUID
'{00000050-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000050, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_D16 = iid
End Function
Public Function MFVideoFormat_AI44() As UUID
'{34344941-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H34344941, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_AI44 = iid
End Function
Public Function MFVideoFormat_AYUV() As UUID
'{56555941-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H56555941, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_AYUV = iid
End Function
Public Function MFVideoFormat_YUY2() As UUID
'{32595559-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H32595559, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_YUY2 = iid
End Function
Public Function MFVideoFormat_YVYU() As UUID
'{55595659-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H55595659, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_YVYU = iid
End Function
Public Function MFVideoFormat_YVU9() As UUID
'{39555659-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H39555659, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_YVU9 = iid
End Function
Public Function MFVideoFormat_UYVY() As UUID
'{59565955-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H59565955, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_UYVY = iid
End Function
Public Function MFVideoFormat_NV11() As UUID
'{3131564E-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3131564E, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_NV11 = iid
End Function
Public Function MFVideoFormat_NV12() As UUID
'{3231564E-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3231564E, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_NV12 = iid
End Function
Public Function MFVideoFormat_YV12() As UUID
'{32315659-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H32315659, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_YV12 = iid
End Function
Public Function MFVideoFormat_I420() As UUID
'{30323449-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H30323449, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_I420 = iid
End Function
Public Function MFVideoFormat_IYUV() As UUID
'{56555949-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H56555949, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_IYUV = iid
End Function
Public Function MFVideoFormat_Y210() As UUID
'{30313259-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H30313259, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_Y210 = iid
End Function
Public Function MFVideoFormat_Y216() As UUID
'{36313259-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H36313259, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_Y216 = iid
End Function
Public Function MFVideoFormat_Y410() As UUID
'{30313459-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H30313459, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_Y410 = iid
End Function
Public Function MFVideoFormat_Y416() As UUID
'{36313459-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H36313459, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_Y416 = iid
End Function
Public Function MFVideoFormat_Y41P() As UUID
'{50313459-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H50313459, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_Y41P = iid
End Function
Public Function MFVideoFormat_Y41T() As UUID
'{54313459-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H54313459, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_Y41T = iid
End Function
Public Function MFVideoFormat_Y42T() As UUID
'{54323459-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H54323459, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_Y42T = iid
End Function
Public Function MFVideoFormat_P210() As UUID
'{30313250-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H30313250, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_P210 = iid
End Function
Public Function MFVideoFormat_P216() As UUID
'{36313250-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H36313250, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_P216 = iid
End Function
Public Function MFVideoFormat_P010() As UUID
'{30313050-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H30313050, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_P010 = iid
End Function
Public Function MFVideoFormat_P016() As UUID
'{36313050-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H36313050, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_P016 = iid
End Function
Public Function MFVideoFormat_v210() As UUID
'{30313276-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H30313276, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_v210 = iid
End Function
Public Function MFVideoFormat_v216() As UUID
'{36313276-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H36313276, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_v216 = iid
End Function
Public Function MFVideoFormat_v410() As UUID
'{30313476-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H30313476, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_v410 = iid
End Function
Public Function MFVideoFormat_MP43() As UUID
'{3334504D-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3334504D, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_MP43 = iid
End Function
Public Function MFVideoFormat_MP4S() As UUID
'{5334504D-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5334504D, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_MP4S = iid
End Function
Public Function MFVideoFormat_M4S2() As UUID
'{3253344D-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3253344D, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_M4S2 = iid
End Function
Public Function MFVideoFormat_MP4V() As UUID
'{5634504D-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5634504D, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_MP4V = iid
End Function
Public Function MFVideoFormat_WMV1() As UUID
'{31564D57-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H31564D57, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_WMV1 = iid
End Function
Public Function MFVideoFormat_WMV2() As UUID
'{32564D57-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H32564D57, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_WMV2 = iid
End Function
Public Function MFVideoFormat_WMV3() As UUID
'{33564D57-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H33564D57, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_WMV3 = iid
End Function
Public Function MFVideoFormat_WVC1() As UUID
'{31435657-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H31435657, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_WVC1 = iid
End Function
Public Function MFVideoFormat_MSS1() As UUID
'{3153534D-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3153534D, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_MSS1 = iid
End Function
Public Function MFVideoFormat_MSS2() As UUID
'{3253534D-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3253534D, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_MSS2 = iid
End Function
Public Function MFVideoFormat_MPG1() As UUID
'{3147504D-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3147504D, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_MPG1 = iid
End Function
Public Function MFVideoFormat_DVSL() As UUID
'{6C737664-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6C737664, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_DVSL = iid
End Function
Public Function MFVideoFormat_DVSD() As UUID
'{64737664-0000-0010-8000-00AA00389B71}}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H64737664, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_DVSD = iid
End Function
Public Function MFVideoFormat_DVHD() As UUID
'{64687664-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H64687664, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_DVHD = iid
End Function
Public Function MFVideoFormat_DV25() As UUID
'{35327664-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H35327664, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_DV25 = iid
End Function
Public Function MFVideoFormat_DV50() As UUID
'{30357664-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H30357664, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_DV50 = iid
End Function
Public Function MFVideoFormat_DVH1() As UUID
'{31687664-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H31687664, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_DVH1 = iid
End Function
Public Function MFVideoFormat_DVC() As UUID
'{20637664-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H20637664, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_DVC = iid
End Function
Public Function MFVideoFormat_H264() As UUID
'{34363248-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H34363248, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_H264 = iid
End Function
Public Function MFVideoFormat_H265() As UUID
'{35363248-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H35363248, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_H265 = iid
End Function
Public Function MFVideoFormat_MJPG() As UUID
'{47504A4D-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H47504A4D, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_MJPG = iid
End Function
Public Function MFVideoFormat_420O() As UUID
'{4F303234-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4F303234, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_420O = iid
End Function
Public Function MFVideoFormat_HEVC() As UUID
'{43564548-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H43564548, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_HEVC = iid
End Function
Public Function MFVideoFormat_HEVC_ES() As UUID
'{53564548-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H53564548, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_HEVC_ES = iid
End Function
Public Function MFVideoFormat_VP80() As UUID
'{30385056-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H30385056, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_VP80 = iid
End Function
Public Function MFVideoFormat_VP90() As UUID
'{30395056-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H30395056, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_VP90 = iid
End Function
Public Function MFVideoFormat_ORAW() As UUID
'{5741524F-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5741524F, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MFVideoFormat_ORAW = iid
End Function
Public Function MFVideoFormat_H263() As UUID
'{33363248-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H33363248, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 MFVideoFormat_H263 = iid
End Function
Public Function MFVideoFormat_A2R10G10B10() As UUID
'{0000001f-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0000001f, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 MFVideoFormat_A2R10G10B10 = iid
End Function
Public Function MFVideoFormat_A16B16G16R16F() As UUID
'{00000071-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000071, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 MFVideoFormat_A16B16G16R16F = iid
End Function
Public Function MFVideoFormat_VP10() As UUID
'{30315056-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H30315056, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 MFVideoFormat_VP10 = iid
End Function
Public Function MFVideoFormat_AV1() As UUID
'{31305641-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H31305641, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 MFVideoFormat_AV1 = iid
End Function
Public Function MFVideoFormat_Theora() As UUID
'{6f656874-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6f656874, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 MFVideoFormat_Theora = iid
End Function

Public Function MFAudioFormat_Base() As UUID
'{00000000-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000000, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 MFAudioFormat_Base = iid
End Function
Public Function MFAudioFormat_PCM() As UUID
'{00000001-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000001, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 MFAudioFormat_PCM = iid
End Function
Public Function MFAudioFormat_Float() As UUID
'{00000003-0000-0010-8000-00aa00389b7}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000003, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H7)
 MFAudioFormat_Float = iid
End Function
Public Function MFAudioFormat_DTS() As UUID
'{00000008-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000008, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 MFAudioFormat_DTS = iid
End Function
Public Function MFAudioFormat_Dolby_AC3_SPDIF() As UUID
'{00000092-0000-0010-8000-00aa00389b7}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000092, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H7)
 MFAudioFormat_Dolby_AC3_SPDIF = iid
End Function
Public Function MFAudioFormat_DRM() As UUID
'{00000009-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000009, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 MFAudioFormat_DRM = iid
End Function
Public Function MFAudioFormat_WMAudioV8() As UUID
'{00000161-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000161, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 MFAudioFormat_WMAudioV8 = iid
End Function
Public Function MFAudioFormat_WMAudioV9() As UUID
'{00000162-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000162, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 MFAudioFormat_WMAudioV9 = iid
End Function
Public Function MFAudioFormat_WMAudio_Lossless() As UUID
'{00000163-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000163, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 MFAudioFormat_WMAudio_Lossless = iid
End Function
Public Function MFAudioFormat_WMASPDIF() As UUID
'{00000164-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000164, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 MFAudioFormat_WMASPDIF = iid
End Function
Public Function MFAudioFormat_MSP1() As UUID
'{0000000a-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0000000a, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 MFAudioFormat_MSP1 = iid
End Function
Public Function MFAudioFormat_MP3() As UUID
'{00000055-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000055, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 MFAudioFormat_MP3 = iid
End Function
Public Function MFAudioFormat_MPEG() As UUID
'{00000050-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000050, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 MFAudioFormat_MPEG = iid
End Function
Public Function MFAudioFormat_AAC() As UUID
'{00001610-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00001610, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 MFAudioFormat_AAC = iid
End Function
Public Function MFAudioFormat_ADTS() As UUID
'{00001610-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00001610, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 MFAudioFormat_ADTS = iid
End Function
Public Function MFAudioFormat_AMR_NB() As UUID
'{00007361-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00007361, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 MFAudioFormat_AMR_NB = iid
End Function
Public Function MFAudioFormat_AMR_WB() As UUID
'{00007362-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00007362, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 MFAudioFormat_AMR_WB = iid
End Function
Public Function MFAudioFormat_AMR_WP() As UUID
'{00007363-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00007363, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 MFAudioFormat_AMR_WP = iid
End Function
Public Function MFAudioFormat_FLAC() As UUID
'{0000f1ac-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0000f1ac&, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 MFAudioFormat_FLAC = iid
End Function
Public Function MFAudioFormat_ALAC() As UUID
'{00006c61-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00006c61, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 MFAudioFormat_ALAC = iid
End Function
Public Function MFAudioFormat_Opus() As UUID
'{0000704f-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0000704f, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 MFAudioFormat_Opus = iid
End Function
Public Function MFAudioFormat_Dolby_AC4() As UUID
'{0000ac40-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0000ac40&, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 MFAudioFormat_Dolby_AC4 = iid
End Function

Public Function CLSID_FaceDetectionMFT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc1e565e2, &Hf2de, &H4537, &H96, &H12, &H2f, &H30, &Ha1, &H60, &Heb, &H5c)
CLSID_FaceDetectionMFT = iid
End Function
Public Function CLSID_FrameServerClassFactory() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9A93092C, &H9CDC, &H49B8, &H83, &H49, &HCB, &HCF, &H31, &H45, &HFE, &H0A)
CLSID_FrameServerClassFactory = iid
End Function
Public Function MF_CAMERASOURCE_PROVIDE_SELECTED_PROFILE_ON_START() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA9B46058, &H82F2, &H4E5C, &HBF, &H6E, &H25, &HB4, &HB0, &H9F, &H22, &HED)
MF_CAMERASOURCE_PROVIDE_SELECTED_PROFILE_ON_START = iid
End Function
Public Function MF_DEVSOURCE_ATTRIBUTE_FRAMESERVER_SHARE_MODE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H44d1a9bc, &H2999, &H4238, &Hae, &H43, &H07, &H30, &Hce, &Hb2, &Hab, &H1b)
MF_DEVSOURCE_ATTRIBUTE_FRAMESERVER_SHARE_MODE = iid
End Function
Public Function MFP_POSITIONTYPE_100NS() As UUID
    Static iid As UUID
    MFP_POSITIONTYPE_100NS = iid 'GUID_NULL
End Function
Public Function MF_PD_ASF_FILEPROPERTIES_FILE_ID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3de649b4, &Hd76d, &H4e66, &H9e, &Hc9, &H78, &H12, &Hf, &Hb4, &Hc7, &He3)
MF_PD_ASF_FILEPROPERTIES_FILE_ID = iid
End Function
Public Function MF_PD_ASF_FILEPROPERTIES_CREATION_TIME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3de649b6, &Hd76d, &H4e66, &H9e, &Hc9, &H78, &H12, &Hf, &Hb4, &Hc7, &He3)
MF_PD_ASF_FILEPROPERTIES_CREATION_TIME = iid
End Function
Public Function MF_PD_ASF_FILEPROPERTIES_PACKETS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3de649b7, &Hd76d, &H4e66, &H9e, &Hc9, &H78, &H12, &Hf, &Hb4, &Hc7, &He3)
MF_PD_ASF_FILEPROPERTIES_PACKETS = iid
End Function
Public Function MF_PD_ASF_FILEPROPERTIES_PLAY_DURATION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3de649b8, &Hd76d, &H4e66, &H9e, &Hc9, &H78, &H12, &Hf, &Hb4, &Hc7, &He3)
MF_PD_ASF_FILEPROPERTIES_PLAY_DURATION = iid
End Function
Public Function MF_PD_ASF_FILEPROPERTIES_SEND_DURATION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3de649b9, &Hd76d, &H4e66, &H9e, &Hc9, &H78, &H12, &Hf, &Hb4, &Hc7, &He3)
MF_PD_ASF_FILEPROPERTIES_SEND_DURATION = iid
End Function
Public Function MF_PD_ASF_FILEPROPERTIES_PREROLL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3de649ba, &Hd76d, &H4e66, &H9e, &Hc9, &H78, &H12, &Hf, &Hb4, &Hc7, &He3)
MF_PD_ASF_FILEPROPERTIES_PREROLL = iid
End Function
Public Function MF_PD_ASF_FILEPROPERTIES_FLAGS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3de649bb, &Hd76d, &H4e66, &H9e, &Hc9, &H78, &H12, &Hf, &Hb4, &Hc7, &He3)
MF_PD_ASF_FILEPROPERTIES_FLAGS = iid
End Function
Public Function MF_PD_ASF_FILEPROPERTIES_MIN_PACKET_SIZE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3de649bc, &Hd76d, &H4e66, &H9e, &Hc9, &H78, &H12, &Hf, &Hb4, &Hc7, &He3)
MF_PD_ASF_FILEPROPERTIES_MIN_PACKET_SIZE = iid
End Function
Public Function MF_PD_ASF_FILEPROPERTIES_MAX_PACKET_SIZE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3de649bd, &Hd76d, &H4e66, &H9e, &Hc9, &H78, &H12, &Hf, &Hb4, &Hc7, &He3)
MF_PD_ASF_FILEPROPERTIES_MAX_PACKET_SIZE = iid
End Function
Public Function MF_PD_ASF_FILEPROPERTIES_MAX_BITRATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3de649be, &Hd76d, &H4e66, &H9e, &Hc9, &H78, &H12, &Hf, &Hb4, &Hc7, &He3)
MF_PD_ASF_FILEPROPERTIES_MAX_BITRATE = iid
End Function
Public Function CLSID_WMDRMSystemID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8948BB22, &H11BD, &H4796, &H93, &HE3, &H97, &H4D, &H1B, &H57, &H56, &H78)
 CLSID_WMDRMSystemID = iid
End Function
Public Function MF_PD_ASF_CONTENTENCRYPTION_TYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8520fe3d, &H277e, &H46ea, &H99, &He4, &He3, &Ha, &H86, &Hdb, &H12, &Hbe)
MF_PD_ASF_CONTENTENCRYPTION_TYPE = iid
End Function
Public Function MF_PD_ASF_CONTENTENCRYPTION_KEYID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8520fe3e, &H277e, &H46ea, &H99, &He4, &He3, &Ha, &H86, &Hdb, &H12, &Hbe)
MF_PD_ASF_CONTENTENCRYPTION_KEYID = iid
End Function
Public Function MF_PD_ASF_CONTENTENCRYPTION_SECRET_DATA() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8520fe3f, &H277e, &H46ea, &H99, &He4, &He3, &Ha, &H86, &Hdb, &H12, &Hbe)
MF_PD_ASF_CONTENTENCRYPTION_SECRET_DATA = iid
End Function
Public Function MF_PD_ASF_CONTENTENCRYPTION_LICENSE_URL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8520fe40, &H277e, &H46ea, &H99, &He4, &He3, &Ha, &H86, &Hdb, &H12, &Hbe)
MF_PD_ASF_CONTENTENCRYPTION_LICENSE_URL = iid
End Function
Public Function MF_PD_ASF_CONTENTENCRYPTIONEX_ENCRYPTION_DATA() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H62508be5, &Hecdf, &H4924, &Ha3, &H59, &H72, &Hba, &Hb3, &H39, &H7b, &H9d)
 MF_PD_ASF_CONTENTENCRYPTIONEX_ENCRYPTION_DATA = iid
End Function
Public Function MF_PD_ASF_LANGLIST() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf23de43c, &H9977, &H460d, &Ha6, &Hec, &H32, &H93, &H7f, &H16, &Hf, &H7d)
 MF_PD_ASF_LANGLIST = iid
End Function
Public Function MF_PD_ASF_LANGLIST_LEGACYORDER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf23de43d, &H9977, &H460d, &Ha6, &Hec, &H32, &H93, &H7f, &H16, &Hf, &H7d)
 MF_PD_ASF_LANGLIST_LEGACYORDER = iid
End Function
Public Function MF_PD_ASF_MARKER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5134330e, &H83a6, &H475e, &Ha9, &Hd5, &H4f, &Hb8, &H75, &Hfb, &H2e, &H31)
MF_PD_ASF_MARKER = iid
End Function
Public Function MF_PD_ASF_SCRIPT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He29cd0d7, &Hd602, &H4923, &Ha7, &Hfe, &H73, &Hfd, &H97, &Hec, &Hc6, &H50)
 MF_PD_ASF_SCRIPT = iid
End Function
Public Function MF_PD_ASF_CODECLIST() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He4bb3509, &Hc18d, &H4df1, &Hbb, &H99, &H7a, &H36, &Hb3, &Hcc, &H41, &H19)
MF_PD_ASF_CODECLIST = iid
End Function
Public Function MF_PD_ASF_METADATA_IS_VBR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5fc6947a, &Hef60, &H445d, &Hb4, &H49, &H44, &H2e, &Hcc, &H78, &Hb4, &Hc1)
 MF_PD_ASF_METADATA_IS_VBR = iid
End Function
Public Function MF_PD_ASF_METADATA_V8_VBRPEAK() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5fc6947b, &Hef60, &H445d, &Hb4, &H49, &H44, &H2e, &Hcc, &H78, &Hb4, &Hc1)
 MF_PD_ASF_METADATA_V8_VBRPEAK = iid
End Function
Public Function MF_PD_ASF_METADATA_V8_BUFFERAVERAGE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5fc6947c, &Hef60, &H445d, &Hb4, &H49, &H44, &H2e, &Hcc, &H78, &Hb4, &Hc1)
 MF_PD_ASF_METADATA_V8_BUFFERAVERAGE = iid
End Function
Public Function MF_PD_ASF_METADATA_LEAKY_BUCKET_PAIRS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5fc6947d, &Hef60, &H445d, &Hb4, &H49, &H44, &H2e, &Hcc, &H78, &Hb4, &Hc1)
 MF_PD_ASF_METADATA_LEAKY_BUCKET_PAIRS = iid
End Function
Public Function MF_PD_ASF_DATA_START_OFFSET() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He7d5b3e7, &H1f29, &H45d3, &H88, &H22, &H3e, &H78, &Hfa, &He2, &H72, &Hed)
MF_PD_ASF_DATA_START_OFFSET = iid
End Function
Public Function MF_PD_ASF_DATA_LENGTH() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He7d5b3e8, &H1f29, &H45d3, &H88, &H22, &H3e, &H78, &Hfa, &He2, &H72, &Hed)
MF_PD_ASF_DATA_LENGTH = iid
End Function
Public Function MF_SD_ASF_EXTSTRMPROP_LANGUAGE_ID_INDEX() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H48f8a522, &H305d, &H422d, &H85, &H24, &H25, &H2, &Hdd, &Ha3, &H36, &H80)
MF_SD_ASF_EXTSTRMPROP_LANGUAGE_ID_INDEX = iid
End Function
Public Function MF_SD_ASF_EXTSTRMPROP_AVG_DATA_BITRATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H48f8a523, &H305d, &H422d, &H85, &H24, &H25, &H2, &Hdd, &Ha3, &H36, &H80)
MF_SD_ASF_EXTSTRMPROP_AVG_DATA_BITRATE = iid
End Function
Public Function MF_SD_ASF_EXTSTRMPROP_AVG_BUFFERSIZE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H48f8a524, &H305d, &H422d, &H85, &H24, &H25, &H2, &Hdd, &Ha3, &H36, &H80)
MF_SD_ASF_EXTSTRMPROP_AVG_BUFFERSIZE = iid
End Function
Public Function MF_SD_ASF_EXTSTRMPROP_MAX_DATA_BITRATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H48f8a525, &H305d, &H422d, &H85, &H24, &H25, &H2, &Hdd, &Ha3, &H36, &H80)
MF_SD_ASF_EXTSTRMPROP_MAX_DATA_BITRATE = iid
End Function
Public Function MF_SD_ASF_EXTSTRMPROP_MAX_BUFFERSIZE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H48f8a526, &H305d, &H422d, &H85, &H24, &H25, &H2, &Hdd, &Ha3, &H36, &H80)
MF_SD_ASF_EXTSTRMPROP_MAX_BUFFERSIZE = iid
End Function
Public Function MF_SD_ASF_STREAMBITRATES_BITRATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha8e182ed, &Hafc8, &H43d0, &Hb0, &Hd1, &Hf6, &H5b, &Had, &H9d, &Ha5, &H58)
MF_SD_ASF_STREAMBITRATES_BITRATE = iid
End Function
Public Function MF_SD_ASF_METADATA_DEVICE_CONFORMANCE_TEMPLATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H245e929d, &Hc44e, &H4f7e, &Hbb, &H3c, &H77, &Hd4, &Hdf, &Hd2, &H7f, &H8a)
MF_SD_ASF_METADATA_DEVICE_CONFORMANCE_TEMPLATE = iid
End Function
Public Function MF_PD_ASF_INFO_HAS_AUDIO() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H80e62295, &H2296, &H4a44, &Hb3, &H1c, &Hd1, &H3, &Hc6, &Hfe, &Hd2, &H3c)
MF_PD_ASF_INFO_HAS_AUDIO = iid
End Function
Public Function MF_PD_ASF_INFO_HAS_VIDEO() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H80e62296, &H2296, &H4a44, &Hb3, &H1c, &Hd1, &H3, &Hc6, &Hfe, &Hd2, &H3c)
MF_PD_ASF_INFO_HAS_VIDEO = iid
End Function
Public Function MF_PD_ASF_INFO_HAS_NON_AUDIO_VIDEO() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H80e62297, &H2296, &H4a44, &Hb3, &H1c, &Hd1, &H3, &Hc6, &Hfe, &Hd2, &H3c)
MF_PD_ASF_INFO_HAS_NON_AUDIO_VIDEO = iid
End Function
Public Function MF_ASFPROFILE_MINPACKETSIZE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H22587626, &H47de, &H4168, &H87, &Hf5, &Hb5, &Haa, &H9b, &H12, &Ha8, &Hf0)
MF_ASFPROFILE_MINPACKETSIZE = iid
End Function
Public Function MF_ASFPROFILE_MAXPACKETSIZE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H22587627, &H47de, &H4168, &H87, &Hf5, &Hb5, &Haa, &H9b, &H12, &Ha8, &Hf0)
MF_ASFPROFILE_MAXPACKETSIZE = iid
End Function
Public Function MF_ASFSTREAMCONFIG_LEAKYBUCKET1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc69b5901, &Hea1a, &H4c9b, &Hb6, &H92, &He2, &Ha0, &Hd2, &H9a, &H8a, &Hdd)
MF_ASFSTREAMCONFIG_LEAKYBUCKET1 = iid
End Function
Public Function MF_ASFSTREAMCONFIG_LEAKYBUCKET2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc69b5902, &Hea1a, &H4c9b, &Hb6, &H92, &He2, &Ha0, &Hd2, &H9a, &H8a, &Hdd)
MF_ASFSTREAMCONFIG_LEAKYBUCKET2 = iid
End Function
Public Function MFASFSampleExtension_SampleDuration() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc6bd9450, &H867f, &H4907, &H83, &Ha3, &Hc7, &H79, &H21, &Hb7, &H33, &Had)
MFASFSampleExtension_SampleDuration = iid
End Function
Public Function MFASFSampleExtension_OutputCleanPoint() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf72a3c6f, &H6eb4, &H4ebc, &Hb1, &H92, &H9, &Had, &H97, &H59, &He8, &H28)
MFASFSampleExtension_OutputCleanPoint = iid
End Function
Public Function MFASFSampleExtension_SMPTE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H399595ec, &H8667, &H4e2d, &H8f, &Hdb, &H98, &H81, &H4c, &He7, &H6c, &H1e)
MFASFSampleExtension_SMPTE = iid
End Function
Public Function MFASFSampleExtension_FileName() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He165ec0e, &H19ed, &H45d7, &Hb4, &Ha7, &H25, &Hcb, &Hd1, &He2, &H8e, &H9b)
MFASFSampleExtension_FileName = iid
End Function
Public Function MFASFSampleExtension_ContentType() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd590dc20, &H07bc, &H436c, &H9c, &Hf7, &Hf3, &Hbb, &Hfb, &Hf1, &Ha4, &Hdc)
MFASFSampleExtension_ContentType = iid
End Function
Public Function MFASFSampleExtension_PixelAspectRatio() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b1ee554, &Hf9ea, &H4bc8, &H82, &H1a, &H37, &H6b, &H74, &He4, &Hc4, &Hb8)
MFASFSampleExtension_PixelAspectRatio = iid
End Function
Public Function MFASFSampleExtension_Encryption_SampleID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6698B84E, &H0AFA, &H4330, &HAE, &HB2, &H1C, &H0A, &H98, &HD7, &HA4, &H4D)
MFASFSampleExtension_Encryption_SampleID = iid
End Function
Public Function MFASFSampleExtension_Encryption_KeyID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H76376591, &H795f, &H4da1, &H86, &Hed, &H9d, &H46, &Hec, &Ha1, &H09, &Ha9)
MFASFSampleExtension_Encryption_KeyID = iid
End Function
Public Function MFASFMutexType_Language() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H72178C2B, &HE45B, &H11D5, &HBC, &H2A, &H00, &HB0, &HD0, &HF3, &HF4, &HAB)
MFASFMutexType_Language = iid
End Function
Public Function MFASFMutexType_Bitrate() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H72178C2C, &HE45B, &H11D5, &HBC, &H2A, &H00, &HB0, &HD0, &HF3, &HF4, &HAB)
MFASFMutexType_Bitrate = iid
End Function
Public Function MFASFMutexType_Presentation() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H72178C2D, &HE45B, &H11D5, &HBC, &H2A, &H00, &HB0, &HD0, &HF3, &HF4, &HAB)
MFASFMutexType_Presentation = iid
End Function
Public Function MFASFMutexType_Unknown() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H72178C2E, &HE45B, &H11D5, &HBC, &H2A, &H00, &HB0, &HD0, &HF3, &HF4, &HAB)
MFASFMutexType_Unknown = iid
End Function
Public Function MFASFINDEXER_TYPE_TIMECODE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H49815231, &H6bad, &H44fd, &H81, &Ha, &H3f, &H60, &H98, &H4e, &Hc7, &Hfd)
MFASFINDEXER_TYPE_TIMECODE = iid
End Function
Public Function MFASFSPLITTER_PACKET_BOUNDARY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hfe584a05, &He8d6, &H42e3, &Hb1, &H76, &Hf1, &H21, &H17, &H5, &Hfb, &H6f)
MFASFSPLITTER_PACKET_BOUNDARY = iid
End Function
Public Function MFPKEY_ASFMEDIASINK_BASE_SENDTIME() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hcddcbc82, &H3411, &H4119, &H91, &H35, &H84, &H23, &Hc4, &H1b, &H39, &H57, 3)
MFPKEY_ASFMEDIASINK_BASE_SENDTIME = pkk
End Function
Public Function MFPKEY_ASFMEDIASINK_AUTOADJUST_BITRATE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hcddcbc82, &H3411, &H4119, &H91, &H35, &H84, &H23, &Hc4, &H1b, &H39, &H57, 4)
MFPKEY_ASFMEDIASINK_AUTOADJUST_BITRATE = pkk
End Function
Public Function MFPKEY_ASFMEDIASINK_DRMACTION() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Ha1db6f6c, &H1d0a, &H4cb6, &H82, &H54, &Hcb, &H36, &Hbe, &Hed, &Hbc, &H48, 5)
MFPKEY_ASFMEDIASINK_DRMACTION = pkk
End Function
Public Function MFPKEY_ASFSTREAMSINK_CORRECTED_LEAKYBUCKET() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Ha2f152fb, &H8ad9, &H4a11, &Hb3, &H45, &H2c, &He2, &Hfa, &Hd8, &H72, &H3d, 1)
MFPKEY_ASFSTREAMSINK_CORRECTED_LEAKYBUCKET = pkk
End Function

Public Function MEDIATYPE_Video() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H73646976, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIATYPE_Video = iid
End Function
Public Function MEDIATYPE_Audio() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H73647561, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIATYPE_Audio = iid
End Function
Public Function MEDIATYPE_Text() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H73747874, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIATYPE_Text = iid
End Function
Public Function MEDIATYPE_Midi() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7364696D, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIATYPE_Midi = iid
End Function
Public Function MEDIATYPE_Stream() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He436eb83, &H524f, &H11ce, &H9f, &H53, &H00, &H20, &Haf, &H0b, &Ha7, &H70)
MEDIATYPE_Stream = iid
End Function
Public Function MEDIATYPE_Interleaved() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H73766169, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIATYPE_Interleaved = iid
End Function
Public Function MEDIATYPE_File() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H656c6966, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIATYPE_File = iid
End Function
Public Function MEDIATYPE_ScriptCommand() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H73636d64, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIATYPE_ScriptCommand = iid
End Function
Public Function MEDIATYPE_AUXLine21Data() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H670aea80, &H3a82, &H11d0, &Hb7, &H9b, &H0, &Haa, &H0, &H37, &H67, &Ha7)
MEDIATYPE_AUXLine21Data = iid
End Function
Public Function MEDIATYPE_AUXTeletextPage() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H11264acb, &H37de, &H4eba, &H8c, &H35, &H7f, &H4, &Ha1, &Ha6, &H83, &H32)
MEDIATYPE_AUXTeletextPage = iid
End Function
Public Function MEDIATYPE_CC_CONTAINER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Haeb312e9, &H3357, &H43ca, &Hb7, &H1, &H97, &Hec, &H19, &H8e, &H2b, &H62)
MEDIATYPE_CC_CONTAINER = iid
End Function
Public Function MEDIATYPE_DTVCCData() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hfb77e152, &H53b2, &H499c, &Hb4, &H6b, &H50, &H9f, &Hc3, &H3e, &Hdf, &Hd7)
MEDIATYPE_DTVCCData = iid
End Function
Public Function MEDIATYPE_MSTVCaption() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HB88B8A89, &HB049, &H4C80, &HAD, &HCF, &H58, &H98, &H98, &H5E, &H22, &HC1)
MEDIATYPE_MSTVCaption = iid
End Function
Public Function MEDIATYPE_VBI() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf72a76e1, &Heb0a, &H11d0, &Hac, &He4, &H00, &H00, &Hc0, &Hcc, &H16, &Hba)
MEDIATYPE_VBI = iid
End Function
Public Function MEDIASUBTYPE_DVB_SUBTITLES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H34FFCBC3, &HD5B3, &H4171, &H90, &H02, &HD4, &HC6, &H03, &H01, &H69, &H7F)
MEDIASUBTYPE_DVB_SUBTITLES = iid
End Function
Public Function MEDIASUBTYPE_ISDB_CAPTIONS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H059dd67d, &H2e55, &H4d41, &H8d, &H1b, &H01, &Hf5, &He4, &Hf5, &H06, &H07)
MEDIASUBTYPE_ISDB_CAPTIONS = iid
End Function
Public Function MEDIASUBTYPE_ISDB_SUPERIMPOSE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H36dc6d28, &Hf1a6, &H4216, &H90, &H48, &H9c, &Hfc, &Hef, &Heb, &H5e, &Hba)
MEDIASUBTYPE_ISDB_SUPERIMPOSE = iid
End Function
Public Function MEDIATYPE_Timecode() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H482dee3, &H7817, &H11cf, &H8a, &H3, &H0, &Haa, &H0, &H6e, &Hcb, &H65)
MEDIATYPE_Timecode = iid
End Function
Public Function MEDIATYPE_LMRT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H74726c6d, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIATYPE_LMRT = iid
End Function
Public Function MEDIATYPE_URL_STREAM() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H736c7275, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIATYPE_URL_STREAM = iid
End Function
Public Function MEDIASUBTYPE_CLPL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4C504C43, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_CLPL = iid
End Function
Public Function MEDIASUBTYPE_YUYV() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H56595559, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_YUYV = iid
End Function
Public Function MEDIASUBTYPE_IYUV() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H56555949, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_IYUV = iid
End Function
Public Function MEDIASUBTYPE_YVU9() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H39555659, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_YVU9 = iid
End Function
Public Function MEDIASUBTYPE_Y411() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H31313459, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_Y411 = iid
End Function
Public Function MEDIASUBTYPE_Y41P() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H50313459, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_Y41P = iid
End Function
Public Function MEDIASUBTYPE_YUY2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H32595559, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_YUY2 = iid
End Function
Public Function MEDIASUBTYPE_YVYU() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H55595659, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_YVYU = iid
End Function
Public Function MEDIASUBTYPE_UYVY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H59565955, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_UYVY = iid
End Function
Public Function MEDIASUBTYPE_Y211() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H31313259, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_Y211 = iid
End Function
Public Function MEDIASUBTYPE_CLJR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H524a4c43, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_CLJR = iid
End Function
Public Function MEDIASUBTYPE_IF09() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H39304649, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_IF09 = iid
End Function
Public Function MEDIASUBTYPE_CPLA() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H414c5043, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_CPLA = iid
End Function
Public Function MEDIASUBTYPE_MJPG() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H47504A4D, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_MJPG = iid
End Function
Public Function MEDIASUBTYPE_TVMJ() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4A4D5654, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_TVMJ = iid
End Function
Public Function MEDIASUBTYPE_WAKE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H454B4157, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_WAKE = iid
End Function
Public Function MEDIASUBTYPE_CFCC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H43434643, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_CFCC = iid
End Function
Public Function MEDIASUBTYPE_IJPG() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H47504A49, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_IJPG = iid
End Function
Public Function MEDIASUBTYPE_Plum() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6D756C50, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_Plum = iid
End Function
Public Function MEDIASUBTYPE_DVCS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H53435644, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_DVCS = iid
End Function
Public Function MEDIASUBTYPE_H264_U() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H34363248, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_H264_U = iid
End Function
Public Function MEDIASUBTYPE_DVSD_U() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H44535644, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_DVSD_U = iid
End Function
Public Function MEDIASUBTYPE_MDVF() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4656444D, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_MDVF = iid
End Function
Public Function MEDIASUBTYPE_RGB1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He436eb78, &H524f, &H11ce, &H9f, &H53, &H00, &H20, &Haf, &H0b, &Ha7, &H70)
MEDIASUBTYPE_RGB1 = iid
End Function
Public Function MEDIASUBTYPE_RGB4() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He436eb79, &H524f, &H11ce, &H9f, &H53, &H00, &H20, &Haf, &H0b, &Ha7, &H70)
MEDIASUBTYPE_RGB4 = iid
End Function
Public Function MEDIASUBTYPE_RGB8() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He436eb7a, &H524f, &H11ce, &H9f, &H53, &H00, &H20, &Haf, &H0b, &Ha7, &H70)
MEDIASUBTYPE_RGB8 = iid
End Function
Public Function MEDIASUBTYPE_RGB565() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He436eb7b, &H524f, &H11ce, &H9f, &H53, &H00, &H20, &Haf, &H0b, &Ha7, &H70)
MEDIASUBTYPE_RGB565 = iid
End Function
Public Function MEDIASUBTYPE_RGB555() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He436eb7c, &H524f, &H11ce, &H9f, &H53, &H00, &H20, &Haf, &H0b, &Ha7, &H70)
MEDIASUBTYPE_RGB555 = iid
End Function
Public Function MEDIASUBTYPE_RGB24() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He436eb7d, &H524f, &H11ce, &H9f, &H53, &H00, &H20, &Haf, &H0b, &Ha7, &H70)
MEDIASUBTYPE_RGB24 = iid
End Function
Public Function MEDIASUBTYPE_RGB32() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He436eb7e, &H524f, &H11ce, &H9f, &H53, &H00, &H20, &Haf, &H0b, &Ha7, &H70)
MEDIASUBTYPE_RGB32 = iid
End Function
Public Function MEDIASUBTYPE_ARGB1555() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H297c55af, &He209, &H4cb3, &Hb7, &H57, &Hc7, &H6d, &H6b, &H9c, &H88, &Ha8)
MEDIASUBTYPE_ARGB1555 = iid
End Function
Public Function MEDIASUBTYPE_ARGB4444() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6e6415e6, &H5c24, &H425f, &H93, &Hcd, &H80, &H10, &H2b, &H3d, &H1c, &Hca)
MEDIASUBTYPE_ARGB4444 = iid
End Function
Public Function MEDIASUBTYPE_ARGB32() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H773c9ac0, &H3274, &H11d0, &Hb7, &H24, &H0, &Haa, &H0, &H6c, &H1a, &H1)
MEDIASUBTYPE_ARGB32 = iid
End Function
Public Function MEDIASUBTYPE_A2R10G10B10() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2f8bb76d, &Hb644, &H4550, &Hac, &Hf3, &Hd3, &H0c, &Haa, &H65, &Hd5, &Hc5)
MEDIASUBTYPE_A2R10G10B10 = iid
End Function
Public Function MEDIASUBTYPE_A2B10G10R10() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H576f7893, &Hbdf6, &H48c4, &H87, &H5f, &Hae, &H7b, &H81, &H83, &H45, &H67)
MEDIASUBTYPE_A2B10G10R10 = iid
End Function
Public Function MEDIASUBTYPE_AYUV() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H56555941, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_AYUV = iid
End Function
Public Function MEDIASUBTYPE_AI44() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H34344941, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_AI44 = iid
End Function
Public Function MEDIASUBTYPE_IA44() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H34344149, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_IA44 = iid
End Function
Public Function MEDIASUBTYPE_RGB32_D3D_DX7_RT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H32335237, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_RGB32_D3D_DX7_RT = iid
End Function
Public Function MEDIASUBTYPE_RGB16_D3D_DX7_RT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H36315237, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_RGB16_D3D_DX7_RT = iid
End Function
Public Function MEDIASUBTYPE_ARGB32_D3D_DX7_RT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H38384137, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_ARGB32_D3D_DX7_RT = iid
End Function
Public Function MEDIASUBTYPE_ARGB4444_D3D_DX7_RT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H34344137, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_ARGB4444_D3D_DX7_RT = iid
End Function
Public Function MEDIASUBTYPE_ARGB1555_D3D_DX7_RT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H35314137, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_ARGB1555_D3D_DX7_RT = iid
End Function
Public Function MEDIASUBTYPE_RGB32_D3D_DX9_RT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H32335239, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_RGB32_D3D_DX9_RT = iid
End Function
Public Function MEDIASUBTYPE_RGB16_D3D_DX9_RT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H36315239, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_RGB16_D3D_DX9_RT = iid
End Function
Public Function MEDIASUBTYPE_ARGB32_D3D_DX9_RT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H38384139, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_ARGB32_D3D_DX9_RT = iid
End Function
Public Function MEDIASUBTYPE_ARGB4444_D3D_DX9_RT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H34344139, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_ARGB4444_D3D_DX9_RT = iid
End Function
Public Function MEDIASUBTYPE_ARGB1555_D3D_DX9_RT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H35314139, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_ARGB1555_D3D_DX9_RT = iid
End Function

Public Function MEDIASUBTYPE_None() As UUID
'{e436eb8e-524f-11ce-9f53-0020af0ba770}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He436eb8e, CInt(&H524f), CInt(&H11ce), &H9f, &H53, &H00, &H20, &Haf, &H0b, &Ha7, &H70)
 MEDIASUBTYPE_None = iid
End Function
Public Function MEDIASUBTYPE_NV11() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3131564E, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_NV11 = iid
End Function
Public Function MEDIASUBTYPE_Y41T() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H54313459, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_Y41T = iid
End Function
Public Function MEDIASUBTYPE_Y42T() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H54323459, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_Y42T = iid
End Function
Public Function MEDIASUBTYPE_V216() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H36313256, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_V216 = iid
End Function
Public Function MEDIASUBTYPE_V410() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H30313456, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_V410 = iid
End Function
Public Function MEDIASUBTYPE_v210() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H30313276, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_v210 = iid
End Function
Public Function MEDIASUBTYPE_I420() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H30323449, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_I420 = iid
End Function
Public Function MEDIASUBTYPE_WVC1_U() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H31435657, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_WVC1_U = iid
End Function
[Description("C++ is case sensitive; for same-named GUID in uppercase, add _U to the name..")]
Public Function MEDIASUBTYPE_wvc1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H31637677, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_wvc1 = iid
End Function
Public Function MEDIASUBTYPE_WMVA_U() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H41564D57, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_WMVA_U = iid
End Function
[Description("C++ is case sensitive; for same-named GUID in uppercase, add _U to the name..")]
Public Function MEDIASUBTYPE_wmva() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H61766D77, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_wmva = iid
End Function
Public Function MEDIASUBTYPE_WMVB_U() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H42564D57, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_WMVB_U = iid
End Function
[Description("C++ is case sensitive; for same-named GUID in uppercase, add _U to the name..")]
Public Function MEDIASUBTYPE_wmvb() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H62766D77, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_wmvb = iid
End Function
Public Function MEDIASUBTYPE_WMVR_U() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H52564D57, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_WMVR_U = iid
End Function
[Description("C++ is case sensitive; for same-named GUID in uppercase, add _U to the name..")]
Public Function MEDIASUBTYPE_wmvr() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H72766D77, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_wmvr = iid
End Function
Public Function MEDIASUBTYPE_WMVP_U() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H50564D57, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_WMVP_U = iid
End Function
[Description("C++ is case sensitive; for same-named GUID in uppercase, add _U to the name..")]
Public Function MEDIASUBTYPE_wmvp() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H70766D77, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_wmvp = iid
End Function
Public Function MEDIASUBTYPE_WVP2_U() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H32505657, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_WVP2_U = iid
End Function
[Description("C++ is case sensitive; for same-named GUID in uppercase, add _U to the name..")]
Public Function MEDIASUBTYPE_wvp2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H32707677, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_wvp2 = iid
End Function
Public Function MEDIASUBTYPE_WMV3_U() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H33564D57, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_WMV3_U = iid
End Function
[Description("C++ is case sensitive; for same-named GUID in uppercase, add _U to the name..")]
Public Function MEDIASUBTYPE_wmv3() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H33766D77, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_wmv3 = iid
End Function
Public Function MEDIASUBTYPE_WMV2_U() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H32564D57, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_WMV2_U = iid
End Function
[Description("C++ is case sensitive; for same-named GUID in uppercase, add _U to the name..")]
Public Function MEDIASUBTYPE_wmv2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H32766D77, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_wmv2 = iid
End Function
Public Function MEDIASUBTYPE_WMV1_U() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H31564D57, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_WMV1_U = iid
End Function
[Description("C++ is case sensitive; for same-named GUID in uppercase, add _U to the name..")]
Public Function MEDIASUBTYPE_wmv1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H31766D77, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_wmv1 = iid
End Function
Public Function MEDIASUBTYPE_MPG4_U() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3447504D, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_MPG4_U = iid
End Function
[Description("C++ is case sensitive; for same-named GUID in uppercase, add _U to the name..")]
Public Function MEDIASUBTYPE_mpg4() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3467706D, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_mpg4 = iid
End Function
Public Function MEDIASUBTYPE_MP42_U() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3234504D, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_MP42_U = iid
End Function
[Description("C++ is case sensitive; for same-named GUID in uppercase, add _U to the name..")]
Public Function MEDIASUBTYPE_mp42() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3234706D, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_mp42 = iid
End Function
Public Function MEDIASUBTYPE_MP43_U() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3334504D, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_MP43_U = iid
End Function
[Description("C++ is case sensitive; for same-named GUID in uppercase, add _U to the name..")]
Public Function MEDIASUBTYPE_mp43() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3334706D, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_mp43 = iid
End Function
Public Function MEDIASUBTYPE_MP4S_U() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5334504D, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_MP4S_U = iid
End Function
[Description("C++ is case sensitive; for same-named GUID in uppercase, add _U to the name..")]
Public Function MEDIASUBTYPE_mp4s() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7334706D, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_mp4s = iid
End Function
Public Function MEDIASUBTYPE_M4S2_U() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3253344D, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_M4S2_U = iid
End Function
[Description("C++ is case sensitive; for same-named GUID in uppercase, add _U to the name..")]
Public Function MEDIASUBTYPE_m4s2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3273346D, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_m4s2 = iid
End Function
Public Function MEDIASUBTYPE_MSS1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3153534D, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_MSS1 = iid
End Function
Public Function MEDIASUBTYPE_MSS2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3253534D, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_MSS2 = iid
End Function
Public Function MEDIASUBTYPE_MSAUDIO1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000160, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_MSAUDIO1 = iid
End Function
Public Function MEDIASUBTYPE_WMAUDIO2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000161, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_WMAUDIO2 = iid
End Function
Public Function MEDIASUBTYPE_WMAUDIO3() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000162, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_WMAUDIO3 = iid
End Function
Public Function MEDIASUBTYPE_WMAUDIO_LOSSLESS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000163, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_WMAUDIO_LOSSLESS = iid
End Function
Public Function MEDIASUBTYPE_WMASPDIF() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000164, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_WMASPDIF = iid
End Function
Public Function MEDIASUBTYPE_WMAUDIO4() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000168, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_WMAUDIO4 = iid
End Function
Public Function MEDIASUBTYPE_MPEG_ADTS_AAC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00001600, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_MPEG_ADTS_AAC = iid
End Function
Public Function MEDIASUBTYPE_MPEG_RAW_AAC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00001601, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_MPEG_RAW_AAC = iid
End Function
Public Function MEDIASUBTYPE_MPEG_LOAS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00001602, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_MPEG_LOAS = iid
End Function
Public Function MEDIASUBTYPE_NOKIA_MPEG_ADTS_AAC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00001608, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_NOKIA_MPEG_ADTS_AAC = iid
End Function
Public Function MEDIASUBTYPE_NOKIA_MPEG_RAW_AAC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00001609, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_NOKIA_MPEG_RAW_AAC = iid
End Function
Public Function MEDIASUBTYPE_VODAFONE_MPEG_ADTS_AAC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0000160A, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_VODAFONE_MPEG_ADTS_AAC = iid
End Function
Public Function MEDIASUBTYPE_VODAFONE_MPEG_RAW_AAC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0000160B, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_VODAFONE_MPEG_RAW_AAC = iid
End Function
Public Function MEDIASUBTYPE_MPEG_HEAAC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00001610, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_MPEG_HEAAC = iid
End Function
Public Function MEDIASUBTYPE_RAW_AAC1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H000000FF, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_RAW_AAC1 = iid
End Function
Public Function MEDIASUBTYPE_DVM() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00002000, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_DVM = iid
End Function
Public Function MEDIASUBTYPE_DTS2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00002001, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_DTS2 = iid
End Function
Public Function MEDIASUBTYPE_DOLBY_DDPLUS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha7fb87af, &H2d02, &H42fb, &Ha4, &Hd4, &H5, &Hcd, &H93, &H84, &H3b, &Hdd)
MEDIASUBTYPE_DOLBY_DDPLUS = iid
End Function
Public Function MEDIASUBTYPE_DOLBY_TRUEHD() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Heb27cec4, &H163e, &H4ca3, &H8b, &H74, &H8e, &H25, &Hf9, &H1b, &H51, &H7e)
MEDIASUBTYPE_DOLBY_TRUEHD = iid
End Function
Public Function MEDIASUBTYPE_DTS_HD() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha2e58eb7, &Hfa9, &H48bb, &Ha4, &Hc, &Hfa, &He, &H15, &H6d, &H6, &H45)
MEDIASUBTYPE_DTS_HD = iid
End Function
Public Function MEDIASUBTYPE_DTS_HD_HRA() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA61AC364, &HAD0E, &H4744, &H89, &HFF, &H21, &H3C, &HE0, &HDF, &H88, &H04)
MEDIASUBTYPE_DTS_HD_HRA = iid
End Function
[Description("C++ is case sensitive; for same-named GUID in uppercase, add _U to the name..")]
Public Function MEDIASUBTYPE_h264() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H34363268, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_h264 = iid
End Function
Public Function MEDIASUBTYPE_AVC1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H31435641, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_AVC1 = iid
End Function
Public Function MEDIASUBTYPE_X264_U() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H34363258, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_X264_U = iid
End Function
[Description("C++ is case sensitive; for same-named GUID in uppercase, add _U to the name..")]
Public Function MEDIASUBTYPE_x264() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H34363278, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_x264 = iid
End Function
Public Function MEDIASUBTYPE_YV12() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H32315659, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_YV12 = iid
End Function
Public Function MEDIASUBTYPE_NV12() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3231564E, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_NV12 = iid
End Function
Public Function MEDIASUBTYPE_P208() As UUID
'{38303250-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H38303250, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MEDIASUBTYPE_P208 = iid
End Function
Public Function MEDIASUBTYPE_P210() As UUID
'{30313250-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H30313250, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MEDIASUBTYPE_P210 = iid
End Function
Public Function MEDIASUBTYPE_P216() As UUID
'{36313250-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H36313250, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MEDIASUBTYPE_P216 = iid
End Function
Public Function MEDIASUBTYPE_P010() As UUID
'{30313050-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H30313050, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MEDIASUBTYPE_P010 = iid
End Function
Public Function MEDIASUBTYPE_P016() As UUID
'{36313050-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H36313050, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MEDIASUBTYPE_P016 = iid
End Function
Public Function MEDIASUBTYPE_Y210() As UUID
'{30313259-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H30313259, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MEDIASUBTYPE_Y210 = iid
End Function
Public Function MEDIASUBTYPE_Y216() As UUID
'{36313259-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H36313259, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MEDIASUBTYPE_Y216 = iid
End Function
Public Function MEDIASUBTYPE_P408() As UUID
'{38303450-0000-0010-8000-00AA00389B71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H38303450, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
 MEDIASUBTYPE_P408 = iid
End Function
Public Function MEDIASUBTYPE_NV24() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3432564E, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_NV24 = iid
End Function
Public Function MEDIASUBTYPE_420O() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4F303234, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_420O = iid
End Function
Public Function MEDIASUBTYPE_IMC1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H31434D49, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_IMC1 = iid
End Function
Public Function MEDIASUBTYPE_IMC2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H32434D49, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_IMC2 = iid
End Function
Public Function MEDIASUBTYPE_IMC3() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H33434D49, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_IMC3 = iid
End Function
Public Function MEDIASUBTYPE_IMC4() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H34434D49, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_IMC4 = iid
End Function
Public Function MEDIASUBTYPE_S340() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H30343353, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_S340 = iid
End Function
Public Function MEDIASUBTYPE_S342() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H32343353, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_S342 = iid
End Function
Public Function MEDIASUBTYPE_Overlay() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He436eb7f, &H524f, &H11ce, &H9f, &H53, &H00, &H20, &Haf, &H0b, &Ha7, &H70)
MEDIASUBTYPE_Overlay = iid
End Function
Public Function MEDIASUBTYPE_MPEG1Packet() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He436eb80, &H524f, &H11ce, &H9f, &H53, &H00, &H20, &Haf, &H0b, &Ha7, &H70)
MEDIASUBTYPE_MPEG1Packet = iid
End Function
Public Function MEDIASUBTYPE_MPEG1Payload() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He436eb81, &H524f, &H11ce, &H9f, &H53, &H00, &H20, &Haf, &H0b, &Ha7, &H70)
MEDIASUBTYPE_MPEG1Payload = iid
End Function
Public Function MEDIASUBTYPE_MPEG1AudioPayload() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000050, &H0000, &H0010, &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
MEDIASUBTYPE_MPEG1AudioPayload = iid
End Function
Public Function MEDIATYPE_MPEG1SystemStream() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He436eb82, &H524f, &H11ce, &H9f, &H53, &H00, &H20, &Haf, &H0b, &Ha7, &H70)
MEDIATYPE_MPEG1SystemStream = iid
End Function
Public Function MEDIASUBTYPE_MPEG1System() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He436eb84, &H524f, &H11ce, &H9f, &H53, &H00, &H20, &Haf, &H0b, &Ha7, &H70)
MEDIASUBTYPE_MPEG1System = iid
End Function
Public Function MEDIASUBTYPE_MPEG1VideoCD() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He436eb85, &H524f, &H11ce, &H9f, &H53, &H00, &H20, &Haf, &H0b, &Ha7, &H70)
MEDIASUBTYPE_MPEG1VideoCD = iid
End Function
Public Function MEDIASUBTYPE_MPEG1Video() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He436eb86, &H524f, &H11ce, &H9f, &H53, &H00, &H20, &Haf, &H0b, &Ha7, &H70)
MEDIASUBTYPE_MPEG1Video = iid
End Function
Public Function MEDIASUBTYPE_MPEG1Audio() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He436eb87, &H524f, &H11ce, &H9f, &H53, &H00, &H20, &Haf, &H0b, &Ha7, &H70)
MEDIASUBTYPE_MPEG1Audio = iid
End Function
Public Function MEDIASUBTYPE_Avi() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He436eb88, &H524f, &H11ce, &H9f, &H53, &H00, &H20, &Haf, &H0b, &Ha7, &H70)
MEDIASUBTYPE_Avi = iid
End Function
Public Function MEDIASUBTYPE_Asf() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3db80f90, &H9412, &H11d1, &Had, &Hed, &H0, &H0, &Hf8, &H75, &H4b, &H99)
MEDIASUBTYPE_Asf = iid
End Function
Public Function MEDIASUBTYPE_QTMovie() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He436eb89, &H524f, &H11ce, &H9f, &H53, &H00, &H20, &Haf, &H0b, &Ha7, &H70)
MEDIASUBTYPE_QTMovie = iid
End Function
Public Function MEDIASUBTYPE_QTRpza() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H617a7072, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_QTRpza = iid
End Function
Public Function MEDIASUBTYPE_QTSmc() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H20636d73, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_QTSmc = iid
End Function
Public Function MEDIASUBTYPE_QTRle() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H20656c72, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_QTRle = iid
End Function
Public Function MEDIASUBTYPE_QTJpeg() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6765706a, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_QTJpeg = iid
End Function
Public Function MEDIASUBTYPE_PCMAudio_Obsolete() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He436eb8a, &H524f, &H11ce, &H9f, &H53, &H00, &H20, &Haf, &H0b, &Ha7, &H70)
MEDIASUBTYPE_PCMAudio_Obsolete = iid
End Function
Public Function MEDIASUBTYPE_PCM() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000001, &H0000, &H0010, &H80, &H00, &H00, &HAA, &H00, &H38, &H9B, &H71)
MEDIASUBTYPE_PCM = iid
End Function
Public Function MEDIASUBTYPE_WAVE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He436eb8b, &H524f, &H11ce, &H9f, &H53, &H00, &H20, &Haf, &H0b, &Ha7, &H70)
MEDIASUBTYPE_WAVE = iid
End Function
Public Function MEDIASUBTYPE_AU() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He436eb8c, &H524f, &H11ce, &H9f, &H53, &H00, &H20, &Haf, &H0b, &Ha7, &H70)
MEDIASUBTYPE_AU = iid
End Function
Public Function MEDIASUBTYPE_AIFF() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He436eb8d, &H524f, &H11ce, &H9f, &H53, &H00, &H20, &Haf, &H0b, &Ha7, &H70)
MEDIASUBTYPE_AIFF = iid
End Function
[Description("C++ is case sensitive; for same-named GUID in uppercase, add _U to the name..")]
Public Function MEDIASUBTYPE_dvsd() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H64737664, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_dvsd = iid
End Function
Public Function MEDIASUBTYPE_dvhd() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H64687664, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_dvhd = iid
End Function
Public Function MEDIASUBTYPE_dvsl() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6c737664, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_dvsl = iid
End Function
Public Function MEDIASUBTYPE_dv25() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H35327664, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_dv25 = iid
End Function
Public Function MEDIASUBTYPE_dv50() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H30357664, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_dv50 = iid
End Function
Public Function MEDIASUBTYPE_dvh1() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H31687664, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_dvh1 = iid
End Function
Public Function MEDIASUBTYPE_Line21_BytePair() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6e8d4a22, &H310c, &H11d0, &Hb7, &H9a, &H0, &Haa, &H0, &H37, &H67, &Ha7)
MEDIASUBTYPE_Line21_BytePair = iid
End Function
Public Function MEDIASUBTYPE_Line21_GOPPacket() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6e8d4a23, &H310c, &H11d0, &Hb7, &H9a, &H0, &Haa, &H0, &H37, &H67, &Ha7)
MEDIASUBTYPE_Line21_GOPPacket = iid
End Function
Public Function MEDIASUBTYPE_Line21_VBIRawData() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6e8d4a24, &H310c, &H11d0, &Hb7, &H9a, &H0, &Haa, &H0, &H37, &H67, &Ha7)
MEDIASUBTYPE_Line21_VBIRawData = iid
End Function
Public Function MEDIASUBTYPE_708_608Data() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Haf414bc, &H4ed2, &H445e, &H98, &H39, &H8f, &H9, &H55, &H68, &Hab, &H3c)
MEDIASUBTYPE_708_608Data = iid
End Function
Public Function MEDIASUBTYPE_DtvCcData() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF52ADDAA, &H36F0, &H43F5, &H95, &HEA, &H6D, &H86, &H64, &H84, &H26, &H2A)
MEDIASUBTYPE_DtvCcData = iid
End Function
Public Function MEDIASUBTYPE_CC_CONTAINER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7ea626db, &H54da, &H437b, &Hbe, &H9f, &Hf7, &H30, &H73, &Had, &Hfa, &H3c)
MEDIASUBTYPE_CC_CONTAINER = iid
End Function
Public Function MEDIASUBTYPE_TELETEXT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf72a76e3, &Heb0a, &H11d0, &Hac, &He4, &H00, &H00, &Hc0, &Hcc, &H16, &Hba)
MEDIASUBTYPE_TELETEXT = iid
End Function
Public Function MEDIASUBTYPE_VBI() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H663da43c, &H3e8, &H4e9a, &H9c, &Hd5, &Hbf, &H11, &Hed, &Hd, &Hef, &H76)
MEDIASUBTYPE_VBI = iid
End Function
Public Function MEDIASUBTYPE_WSS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2791D576, &H8E7A, &H466F, &H9E, &H90, &H5D, &H3F, &H30, &H83, &H73, &H8B)
MEDIASUBTYPE_WSS = iid
End Function
Public Function MEDIASUBTYPE_XDS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1ca73e3, &Hdce6, &H4575, &Haf, &He1, &H2b, &Hf1, &Hc9, &H2, &Hca, &Hf3)
MEDIASUBTYPE_XDS = iid
End Function
Public Function MEDIASUBTYPE_VPS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha1b3f620, &H9792, &H4d8d, &H81, &Ha4, &H86, &Haf, &H25, &H77, &H20, &H90)
MEDIASUBTYPE_VPS = iid
End Function
Public Function MEDIASUBTYPE_DRM_Audio() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000009, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_DRM_Audio = iid
End Function
Public Function MEDIASUBTYPE_IEEE_FLOAT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000003, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_IEEE_FLOAT = iid
End Function
Public Function MEDIASUBTYPE_DOLBY_AC3_SPDIF() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000092, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_DOLBY_AC3_SPDIF = iid
End Function
Public Function MEDIASUBTYPE_RAW_SPORT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000240, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_RAW_SPORT = iid
End Function
Public Function MEDIASUBTYPE_SPDIF_TAG_241h() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000241, &H0000, &H0010, &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
MEDIASUBTYPE_SPDIF_TAG_241h = iid
End Function
Public Function MEDIASUBTYPE_DssVideo() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha0af4f81, &He163, &H11d0, &Hba, &Hd9, &H0, &H60, &H97, &H44, &H11, &H1a)
MEDIASUBTYPE_DssVideo = iid
End Function
Public Function MEDIASUBTYPE_DssAudio() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha0af4f82, &He163, &H11d0, &Hba, &Hd9, &H0, &H60, &H97, &H44, &H11, &H1a)
MEDIASUBTYPE_DssAudio = iid
End Function
Public Function MEDIASUBTYPE_VPVideo() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5a9b6a40, &H1a22, &H11d1, &Hba, &Hd9, &H0, &H60, &H97, &H44, &H11, &H1a)
MEDIASUBTYPE_VPVideo = iid
End Function
Public Function MEDIASUBTYPE_VPVBI() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5a9b6a41, &H1a22, &H11d1, &Hba, &Hd9, &H0, &H60, &H97, &H44, &H11, &H1a)
MEDIASUBTYPE_VPVBI = iid
End Function





























Public Function CLSID_CColorControlDmo() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H798059f0, &H89ca, &H4160, &Hb3, &H25, &Hae, &Hb4, &H8e, &Hfe, &H4f, &H9a)
CLSID_CColorControlDmo = iid
End Function
Public Function CLSID_CColorConvertDMO() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H98230571, &H0087, &H4204, &Hb0, &H20, &H32, &H82, &H53, &H8e, &H57, &Hd3)
CLSID_CColorConvertDMO = iid
End Function
Public Function CLSID_CColorLegalizerDmo() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hfdfaa753, &He48e, &H4e33, &H9c, &H74, &H98, &Ha2, &H7f, &Hc6, &H72, &H6a)
CLSID_CColorLegalizerDmo = iid
End Function
Public Function CLSID_CFrameInterpDMO() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0a7cfe1b, &H6ab5, &H4334, &H9e, &Hd8, &H3f, &H97, &Hcb, &H37, &Hda, &Ha1)
CLSID_CFrameInterpDMO = iid
End Function
Public Function CLSID_CFrameRateConvertDmo() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H01f36ce2, &H0907, &H4d8b, &H97, &H9d, &Hf1, &H51, &Hbe, &H91, &Hc8, &H83)
CLSID_CFrameRateConvertDmo = iid
End Function
Public Function CLSID_CResizerDMO() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1ea1ea14, &H48f4, &H4054, &Had, &H1a, &He8, &Hae, &He1, &H0a, &Hc8, &H05)
CLSID_CResizerDMO = iid
End Function
Public Function CLSID_CShotDetectorDmo() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H56aefacd, &H110c, &H4397, &H92, &H92, &Hb0, &Ha0, &Hc6, &H1b, &H67, &H50)
CLSID_CShotDetectorDmo = iid
End Function
Public Function CLSID_CSmpteTransformsDmo() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hbde6388b, &Hda25, &H485d, &Hba, &H7f, &Hfa, &Hbc, &H28, &Hb2, &H03, &H18)
CLSID_CSmpteTransformsDmo = iid
End Function
Public Function CLSID_CThumbnailGeneratorDmo() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H559c6bad, &H1ea8, &H4963, &Ha0, &H87, &H8a, &H68, &H10, &Hf9, &H21, &H8b)
CLSID_CThumbnailGeneratorDmo = iid
End Function

Public Enum MFVideoDSPMode
    MFVideoDSPMode_Passthrough = 1
    MFVideoDSPMode_Stabilization = 4
End Enum
Public Function MF_VIDEODSP_MODE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H16d720f0, &H768c, &H11de, &H8a, &H39, &H08, &H00, &H20, &H0c, &H9a, &H66)
MF_VIDEODSP_MODE = iid
End Function
Public Function MFSampleExtension_VideoDSPMode() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc12d55cb, &Hd7d9, &H476d, &H81, &Hf3, &H69, &H11, &H7f, &H16, &H3e, &Ha0)
MFSampleExtension_VideoDSPMode = iid
End Function

#End Region

#Region "MFPKEY"
Public Function MFPKEY_STARTTIME() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H5cefee10, &He210, &H45c6, &H9e, &H28, &Hf5, &Ha8, &H73, &H1c, &H96, &Hc7, &H01)
MFPKEY_STARTTIME = pkk
End Function
Public Function MFPKEY_STOPTIME() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H5cefee10, &He210, &H45c6, &H9e, &H28, &Hf5, &Ha8, &H73, &H1c, &H96, &Hc7, &H02)
MFPKEY_STOPTIME = pkk
End Function
Public Function MFPKEY_PROGRESS() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H5cefee10, &He210, &H45c6, &H9e, &H28, &Hf5, &Ha8, &H73, &H1c, &H96, &Hc7, &H03)
MFPKEY_PROGRESS = pkk
End Function
Public Function MFPKEY_PHANTOMING_ON() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H12b53cb2, &He12e, &H4579, &H8a, &Hc3, &Hd0, &H2f, &H94, &Hf1, &He8, &H9e, PID_FIRST_USABLE)
MFPKEY_PHANTOMING_ON = pkk
End Function
Public Function MFPKEY_ROOMCORR_PROFILE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hf311cdc7, &Hf45f, &H4eb7, &Ha8, &H64, &H9d, &Hc1, &Hae, &Heb, &H7e, &H6d, PID_FIRST_USABLE)
MFPKEY_ROOMCORR_PROFILE = pkk
End Function
Public Function MFPKEY_BASSMGMT_CROSSOVER_FREQ() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H61e8acb9, &Hf04f, &H4f40, &Ha6, &H5f, &H8f, &H49, &Hfa, &Hb3, &Hba, &H10, PID_FIRST_USABLE)
MFPKEY_BASSMGMT_CROSSOVER_FREQ = pkk
End Function
Public Function MFPKEY_BASSMGMT_SPKRBASSCONFIG() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7bfd170d, &H4770, &H4dc5, &H92, &H4d, &H0b, &H7b, &H25, &H2e, &He9, &H18, PID_FIRST_USABLE)
MFPKEY_BASSMGMT_SPKRBASSCONFIG = pkk
End Function
Public Function MFPKEY_BASSMGMT_BIGROOM() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hc816a1a7, &Ha119, &H48a5, &H9a, &Hd2, &H85, &H45, &H1f, &H4b, &H5a, &H2e, PID_FIRST_USABLE)
MFPKEY_BASSMGMT_BIGROOM = pkk
End Function
Public Function MFPKEY_BASSMGMT_NO_SUB() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H5c3fd32e, &H0d40, &H4e2d, &H99, &Hfb, &Hc9, &H1e, &H96, &H42, &H0b, &He7, PID_FIRST_USABLE)
MFPKEY_BASSMGMT_NO_SUB = pkk
End Function
Public Function MFPKEY_BASSMGMT_INVERT_SUB() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hb1103003, &Hc191, &H4275, &H9f, &Ha0, &H8c, &H28, &H2c, &H72, &H4b, &Hce, PID_FIRST_USABLE)
MFPKEY_BASSMGMT_INVERT_SUB = pkk
End Function
Public Function MFPKEY_CORR_HEADPHONE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H445f3559, &Hb43f, &H4b67, &Hb0, &Hf8, &H32, &Hb6, &H7c, &Hf9, &H4b, &H48, PID_FIRST_USABLE + 0)
MFPKEY_CORR_HEADPHONE = pkk
End Function
Public Function MFPKEY_CORR_BASS_MANAGEMENT_MODE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1864a4e0, &Hefc1, &H45e6, &Ha6, &H75, &H57, &H86, &Hcb, &Hf3, &Hb9, &Hf0, PID_FIRST_USABLE)
MFPKEY_CORR_BASS_MANAGEMENT_MODE = pkk
End Function
Public Function MFPKEY_CORR_MULTICHANNEL_MODE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1b5c2483, &H0839, &H4523, &Hba, &H87, &H95, &Hf8, &H9d, &H27, &Hbd, &H8c, PID_FIRST_USABLE)
MFPKEY_CORR_MULTICHANNEL_MODE = pkk
End Function
Public Function MFPKEY_CORR_LOUDNESS_EQUALIZATION_ON() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hfc52a749, &H4be9, &H4510, &H89, &H6e, &H96, &H6b, &Ha6, &H52, &H59, &H80, PID_FIRST_USABLE)
MFPKEY_CORR_LOUDNESS_EQUALIZATION_ON = pkk
End Function
Public Function MFPKEY_CORR_ROOM_CORRECTION_ON() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H01fb17e3, &H796c, &H4451, &H81, &H63, &H68, &Hcd, &Hc1, &H32, &H1a, &H60, PID_FIRST_USABLE)
MFPKEY_CORR_ROOM_CORRECTION_ON = pkk
End Function
Public Function MFPKEY_CORR_SPKRMASK() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd328d8fb, &Hd49f, &H4aa9, &Hb7, &H21, &He1, &H71, &He9, &H3a, &Hd5, &H63, PID_FIRST_USABLE + 5)
MFPKEY_CORR_SPKRMASK = pkk
End Function
Public Function MFPKEY_CORR_NORMALIZATION_GAIN() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd61b266c, &H5aee, &H456b, &H84, &H24, &H72, &H25, &H47, &H7d, &Hae, &H77, PID_FIRST_USABLE + 0)
MFPKEY_CORR_NORMALIZATION_GAIN = pkk
End Function
Public Function MFPKEY_BASS_BOOST_AMOUNT() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hae7f0b2a, &H96fc, &H493a, &H92, &H47, &Ha0, &H19, &Hf1, &Hf7, &H01, &He1, PID_FIRST_USABLE)
MFPKEY_BASS_BOOST_AMOUNT = pkk
End Function
Public Function MFPKEY_LOUDNESS_EQUALIZATION_RELEASE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H9c00eeed, &Hedce, &H4cd8, &Hae, &H08, &Hcb, &H05, &He8, &Hef, &H57, &Ha0, PID_FIRST_USABLE)
MFPKEY_LOUDNESS_EQUALIZATION_RELEASE = pkk
End Function
Public Function PKEY_SYSFXUI_HIDE_MASK() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hcb9c6bce, &H7a25, &H47aa, &Hb2, &Hbe, &H6a, &Hd8, &H44, &H31, &Hed, &Hde, PID_FIRST_USABLE)
PKEY_SYSFXUI_HIDE_MASK = pkk
End Function
Public Function MFPKEY_AUVRHP_SKIPHRTFREVERB() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H30bbfebf, &H24b4, &H4198, &H89, &Hba, &Had, &H11, &Ha2, &Hac, &Hd6, &H01, &H01)
MFPKEY_AUVRHP_SKIPHRTFREVERB = pkk
End Function
Public Function MFPKEY_AUVRHP_SKIPPOSTREVERB() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H30bbfebf, &H24b4, &H4198, &H89, &Hba, &Had, &H11, &Ha2, &Hac, &Hd6, &H01, &H02)
MFPKEY_AUVRHP_SKIPPOSTREVERB = pkk
End Function
Public Function MFPKEY_AUVRHP_ROOMMODEL() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H73ae880e, &H8258, &H4e57, &Hb8, &H5f, &H7d, &Haa, &H6b, &H7d, &H5e, &Hf0, PID_FIRST_USABLE)
MFPKEY_AUVRHP_ROOMMODEL = pkk
End Function
Public Function MFPKEY_AUVRHP_LFWEIGHT() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H30bbfebf, &H24b4, &H4198, &H89, &Hba, &Had, &H11, &Ha2, &Hac, &Hd6, &H01, &H04)
MFPKEY_AUVRHP_LFWEIGHT = pkk
End Function
Public Function MFPKEY_AUVRHP_DOHRTFREVERB() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H30bbfebf, &H24b4, &H4198, &H89, &Hba, &Had, &H11, &Ha2, &Hac, &Hd6, &H01, &H05)
MFPKEY_AUVRHP_DOHRTFREVERB = pkk
End Function
Public Function MFPKEY_AUVRHP_DOPOSTREVERB() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H30bbfebf, &H24b4, &H4198, &H89, &Hba, &Had, &H11, &Ha2, &Hac, &Hd6, &H01, &H06)
MFPKEY_AUVRHP_DOPOSTREVERB = pkk
End Function
Public Function MFPKEY_AUVRHP_POSTREVERB_START() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H30bbfebf, &H24b4, &H4198, &H89, &Hba, &Had, &H11, &Ha2, &Hac, &Hd6, &H01, &H07)
MFPKEY_AUVRHP_POSTREVERB_START = pkk
End Function
Public Function MFPKEY_AUVRHP_POSTREVERB_LEN() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H30bbfebf, &H24b4, &H4198, &H89, &Hba, &Had, &H11, &Ha2, &Hac, &Hd6, &H01, &H08)
MFPKEY_AUVRHP_POSTREVERB_LEN = pkk
End Function
Public Function MFPKEY_WMRESAMP_FILTERQUALITY() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Haf1adc73, &Ha210, &H4b05, &H96, &H6e, &H54, &H91, &Hcf, &Hf4, &H8b, &H1d, &H01)
MFPKEY_WMRESAMP_FILTERQUALITY = pkk
End Function
Public Function MFPKEY_WMRESAMP_CHANNELMTX() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Haf1adc73, &Ha210, &H4b05, &H96, &H6e, &H54, &H91, &Hcf, &Hf4, &H8b, &H1d, &H02)
MFPKEY_WMRESAMP_CHANNELMTX = pkk
End Function
Public Function MFPKEY_WMRESAMP_LOWPASS_BANDWIDTH() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Haf1adc73, &Ha210, &H4b05, &H96, &H6e, &H54, &H91, &Hcf, &Hf4, &H8b, &H1d, &H03)
MFPKEY_WMRESAMP_LOWPASS_BANDWIDTH = pkk
End Function
Public Function MFPKEY_WMAENC_AVGBYTESPERSEC() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H11caf780, &H921b, &H42ef, &Hb7, &H55, &Hf3, &Ha0, &H53, &Hea, &H1a, &H41, &H00)
MFPKEY_WMAENC_AVGBYTESPERSEC = pkk
End Function
Public Function MFPKEY_WMAENC_ORIGWAVEFORMAT() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hf5c760a2, &H3635, &H48e1, &H8f, &Hbd, &H0e, &H49, &H81, &H24, &He0, &Ha2, &H00)
MFPKEY_WMAENC_ORIGWAVEFORMAT = pkk
End Function
Public Function MFPKEY_PEAKCONSTRAINED() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, &H00)
MFPKEY_PEAKCONSTRAINED = pkk
End Function
Public Function MFPKEY_STAT_RAVG() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H23a0e3b5, &Hfc62, &H4ab8, &Hb7, &H7c, &H6e, &H0c, &H28, &Hab, &H30, &H16, &H00)
MFPKEY_STAT_RAVG = pkk
End Function
Public Function MFPKEY_STAT_BAVG() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H036f6b60, &Had43, &H485c, &H86, &Hc6, &H21, &Ha6, &Hdb, &H2c, &H1b, &Ha3, &H00)
MFPKEY_STAT_BAVG = pkk
End Function
Public Function MFPKEY_STAT_RMAX() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H82ff7c67, &H6554, &H4749, &Ha3, &H2b, &H36, &H90, &Hdd, &H1a, &He8, &Hde, &H00)
MFPKEY_STAT_RMAX = pkk
End Function
Public Function MFPKEY_STAT_BMAX() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hcd95e5b7, &H9143, &H47fb, &Ha9, &Hd2, &H9d, &Hb7, &H5f, &H2e, &H74, &Hbe, &H00)
MFPKEY_STAT_BMAX = pkk
End Function
Public Function MFPKEY_CONSTRAINENCLATENCY() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 1)
MFPKEY_CONSTRAINENCLATENCY = pkk
End Function
Public Function MFPKEY_CONSTRAINDECLATENCY() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 2)
MFPKEY_CONSTRAINDECLATENCY = pkk
End Function
Public Function MFPKEY_CONSTRAINENCCOMPLEXITY() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 3)
MFPKEY_CONSTRAINENCCOMPLEXITY = pkk
End Function
Public Function MFPKEY_MAXENCLATENCYMS() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 4)
MFPKEY_MAXENCLATENCYMS = pkk
End Function
Public Function MFPKEY_MAXDECLATENCYMS() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 5)
MFPKEY_MAXDECLATENCYMS = pkk
End Function
Public Function MFPKEY_ENCCOMPLEXITY() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 6)
MFPKEY_ENCCOMPLEXITY = pkk
End Function
Public Function MFPKEY_CHECKDATACONSISTENCY2P() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 7)
MFPKEY_CHECKDATACONSISTENCY2P = pkk
End Function
Public Function MFPKEY_AVGCONSTRAINED() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 8)
MFPKEY_AVGCONSTRAINED = pkk
End Function
Public Function MFPKEY_ENHANCED_WMA() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 20)
MFPKEY_ENHANCED_WMA = pkk
End Function
Public Function MFPKEY_REQUESTING_A_FRAMESIZE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 21)
MFPKEY_REQUESTING_A_FRAMESIZE = pkk
End Function
Public Function MFPKEY_PREFERRED_FRAMESIZE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 22)
MFPKEY_PREFERRED_FRAMESIZE = pkk
End Function
Public Function MFPKEY_WMA_ELEMENTARY_STREAM() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 23)
MFPKEY_WMA_ELEMENTARY_STREAM = pkk
End Function
Public Function MFPKEY_MOST_RECENTLY_ENUMERATED_VBRQUALITY() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 24)
MFPKEY_MOST_RECENTLY_ENUMERATED_VBRQUALITY = pkk
End Function
Public Function MFPKEY_DESIRED_VBRQUALITY() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 25)
MFPKEY_DESIRED_VBRQUALITY = pkk
End Function
Public Function MFPKEY_CONSTRAIN_ENUMERATED_VBRQUALITY() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 26)
MFPKEY_CONSTRAIN_ENUMERATED_VBRQUALITY = pkk
End Function
Public Function MFPKEY_WMAENC_GENERATE_DRC_PARAMS() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 28)
MFPKEY_WMAENC_GENERATE_DRC_PARAMS = pkk
End Function
Public Function MFPKEY_WMAENC_BUFFERLESSCBR() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 29)
MFPKEY_WMAENC_BUFFERLESSCBR = pkk
End Function
Public Function MFPKEY_WMAENC_RTSPDIF() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 30)
MFPKEY_WMAENC_RTSPDIF = pkk
End Function
Public Function MFPKEY_DYN_VBR_RAVG() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 9)
MFPKEY_DYN_VBR_RAVG = pkk
End Function
Public Function MFPKEY_DYN_BANDTRUNCATION() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 10)
MFPKEY_DYN_BANDTRUNCATION = pkk
End Function
Public Function MFPKEY_DYN_BANDTRUNC_QFLOOR() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 11)
MFPKEY_DYN_BANDTRUNC_QFLOOR = pkk
End Function
Public Function MFPKEY_DYN_BANDTRUNC_QCEIL() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 12)
MFPKEY_DYN_BANDTRUNC_QCEIL = pkk
End Function
Public Function MFPKEY_DYN_BANDTRUNC_BWFLOOR() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 13)
MFPKEY_DYN_BANDTRUNC_BWFLOOR = pkk
End Function
Public Function MFPKEY_DYN_BANDTRUNC_BWCEIL() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 14)
MFPKEY_DYN_BANDTRUNC_BWCEIL = pkk
End Function
Public Function MFPKEY_DYN_SIMPLEMASK() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 15)
MFPKEY_DYN_SIMPLEMASK = pkk
End Function
Public Function MFPKEY_DYN_STEREO_PREPROC() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 16)
MFPKEY_DYN_STEREO_PREPROC = pkk
End Function
Public Function MFPKEY_DYN_VBR_BAVG() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 18)
MFPKEY_DYN_VBR_BAVG = pkk
End Function
Public Function MFPKEY_DYN_ALLOW_NOISESUB() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 19)
MFPKEY_DYN_ALLOW_NOISESUB = pkk
End Function
Public Function MFPKEY_DYN_ALLOW_PCMRANGELIMITING() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6dbdf03b, &Hb05c, &H4a03, &H8e, &Hc1, &Hbb, &He6, &H3d, &Hb1, &H0c, &Hb4, 27)
MFPKEY_DYN_ALLOW_PCMRANGELIMITING = pkk
End Function
Public Function MFPKEY_WMADEC_HIRESOUTPUT() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H8d3fe592, &Heecc, &H4f4e, &H9a, &Hff, &H5a, &Hf1, &H67, &H9d, &H38, &Hd2, &H00)
MFPKEY_WMADEC_HIRESOUTPUT = pkk
End Function
Public Function MFPKEY_WMADEC_SPKRCFG() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H8fff67be, &H977f, &H41dc, &H8f, &Haf, &H23, &Hba, &Hc9, &Ha6, &Hdf, &H73, &H00)
MFPKEY_WMADEC_SPKRCFG = pkk
End Function
Public Function MFPKEY_WMADEC_FOLDDOWN_MATRIX() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H51647e9b, &H6a7f, &H4739, &H9e, &H0b, &H29, &H4b, &H27, &H89, &H69, &Heb, &H00)
MFPKEY_WMADEC_FOLDDOWN_MATRIX = pkk
End Function
Public Function MFPKEY_WMADEC_DRCMODE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7b613713, &H3d38, &H4cda, &Haa, &H61, &H04, &H78, &Hb1, &Hbc, &Hfc, &H42, &H00)
MFPKEY_WMADEC_DRCMODE = pkk
End Function
Public Function MFPKEY_WMADRC_AVGTARGET() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7b613713, &H3d38, &H4cda, &Haa, &H61, &H04, &H78, &Hb1, &Hbc, &Hfc, &H42, &H01)
MFPKEY_WMADRC_AVGTARGET = pkk
End Function
Public Function MFPKEY_WMADRC_PEAKTARGET() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7b613713, &H3d38, &H4cda, &Haa, &H61, &H04, &H78, &Hb1, &Hbc, &Hfc, &H42, &H02)
MFPKEY_WMADRC_PEAKTARGET = pkk
End Function
Public Function MFPKEY_WMADRC_AVGREF() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7b613713, &H3d38, &H4cda, &Haa, &H61, &H04, &H78, &Hb1, &Hbc, &Hfc, &H42, &H03)
MFPKEY_WMADRC_AVGREF = pkk
End Function
Public Function MFPKEY_WMADRC_PEAKREF() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7b613713, &H3d38, &H4cda, &Haa, &H61, &H04, &H78, &Hb1, &Hbc, &Hfc, &H42, &H04)
MFPKEY_WMADRC_PEAKREF = pkk
End Function
Public Function MFPKEY_WMADEC_LTRTOUTPUT() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7b613713, &H3d38, &H4cda, &Haa, &H61, &H04, &H78, &Hb1, &Hbc, &Hfc, &H42, &H05)
MFPKEY_WMADEC_LTRTOUTPUT = pkk
End Function
Public Function MFPKEY_WMAVOICE_ENC_MusicSpeechClassMode() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd9c8f5fe, &H8682, &H4347, &H85, &H07, &H60, &Ha3, &Hf5, &H1f, &H33, &Hf1, PID_FIRST_USABLE)
MFPKEY_WMAVOICE_ENC_MusicSpeechClassMode = pkk
End Function
Public Function MFPKEY_WMAVOICE_ENC_BufferWindow() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd9c8f5fe, &H8682, &H4347, &H85, &H07, &H60, &Ha3, &Hf5, &H1f, &H33, &Hf1, PID_FIRST_USABLE + 1)
MFPKEY_WMAVOICE_ENC_BufferWindow = pkk
End Function
Public Function MFPKEY_WMAVOICE_ENC_DecoderDelay() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd9c8f5fe, &H8682, &H4347, &H85, &H07, &H60, &Ha3, &Hf5, &H1f, &H33, &Hf1, PID_FIRST_USABLE + 2)
MFPKEY_WMAVOICE_ENC_DecoderDelay = pkk
End Function
Public Function MFPKEY_WMAVOICE_ENC_EDL() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd9c8f5fe, &H8682, &H4347, &H85, &H07, &H60, &Ha3, &Hf5, &H1f, &H33, &Hf1, PID_FIRST_USABLE + 3)
MFPKEY_WMAVOICE_ENC_EDL = pkk
End Function
Public Function MFPKEY_WMAVOICE_ENC_RT_VariableRate() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd9c8f5fe, &H8682, &H4347, &H85, &H07, &H60, &Ha3, &Hf5, &H1f, &H33, &Hf1, PID_FIRST_USABLE + 4)
MFPKEY_WMAVOICE_ENC_RT_VariableRate = pkk
End Function
Public Function MFPKEY_WMAVOICE_ENC_RT_BandWidth() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd9c8f5fe, &H8682, &H4347, &H85, &H07, &H60, &Ha3, &Hf5, &H1f, &H33, &Hf1, PID_FIRST_USABLE + 5)
MFPKEY_WMAVOICE_ENC_RT_BandWidth = pkk
End Function
Public Function MFPKEY_WMAVOICE_ENC_RT_PacketLossMode() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd9c8f5fe, &H8682, &H4347, &H85, &H07, &H60, &Ha3, &Hf5, &H1f, &H33, &Hf1, PID_FIRST_USABLE + 6)
MFPKEY_WMAVOICE_ENC_RT_PacketLossMode = pkk
End Function
Public Function MFPKEY_WMAVOICE_ENC_RT_MinBufferSize() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd9c8f5fe, &H8682, &H4347, &H85, &H07, &H60, &Ha3, &Hf5, &H1f, &H33, &Hf1, PID_FIRST_USABLE + 7)
MFPKEY_WMAVOICE_ENC_RT_MinBufferSize = pkk
End Function
Public Function MFPKEY_WMAVOICE_DEC_RT_JitterControl() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H0165f69b, &H80a1, &H4ef8, &Ha4, &Ha9, &Had, &Ha3, &Hb8, &Ha6, &H89, &Hdd, PID_FIRST_USABLE)
MFPKEY_WMAVOICE_DEC_RT_JitterControl = pkk
End Function
Public Function MFPKEY_WMAVOICE_DEC_RT_JitterMode() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H0165f69b, &H80a1, &H4ef8, &Ha4, &Ha9, &Had, &Ha3, &Hb8, &Ha6, &H89, &Hdd, PID_FIRST_USABLE + 1)
MFPKEY_WMAVOICE_DEC_RT_JitterMode = pkk
End Function
Public Function MFPKEY_WMAVOICE_DEC_RT_PacketLossMode() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H0165f69b, &H80a1, &H4ef8, &Ha4, &Ha9, &Had, &Ha3, &Hb8, &Ha6, &H89, &Hdd, PID_FIRST_USABLE + 2)
MFPKEY_WMAVOICE_DEC_RT_PacketLossMode = pkk
End Function
Public Function MFPKEY_Decoder_MaxNumPCMSamplesWithPaddedSilence() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hc678ba85, &H1212, &H43da, &H5a, &Hc3, &He7, &H48, &Hb9, &H24, &H49, &Hec, &H00)
MFPKEY_Decoder_MaxNumPCMSamplesWithPaddedSilence = pkk
End Function
Public Function MFPKEY_WMAAECMA_SYSTEM_MODE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6f52c567, &H0360, &H4bd2, &H96, &H17, &Hcc, &Hbf, &H14, &H21, &Hc9, &H39, PID_FIRST_USABLE + 0)
MFPKEY_WMAAECMA_SYSTEM_MODE = pkk
End Function
Public Function MFPKEY_WMAAECMA_DMO_SOURCE_MODE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6f52c567, &H0360, &H4bd2, &H96, &H17, &Hcc, &Hbf, &H14, &H21, &Hc9, &H39, PID_FIRST_USABLE + 1)
MFPKEY_WMAAECMA_DMO_SOURCE_MODE = pkk
End Function
Public Function MFPKEY_WMAAECMA_DEVICE_INDEXES() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6f52c567, &H0360, &H4bd2, &H96, &H17, &Hcc, &Hbf, &H14, &H21, &Hc9, &H39, PID_FIRST_USABLE + 2)
MFPKEY_WMAAECMA_DEVICE_INDEXES = pkk
End Function
Public Function MFPKEY_WMAAECMA_FEATURE_MODE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6f52c567, &H0360, &H4bd2, &H96, &H17, &Hcc, &Hbf, &H14, &H21, &Hc9, &H39, PID_FIRST_USABLE + 3)
MFPKEY_WMAAECMA_FEATURE_MODE = pkk
End Function
Public Function MFPKEY_WMAAECMA_FEATR_FRAME_SIZE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6f52c567, &H0360, &H4bd2, &H96, &H17, &Hcc, &Hbf, &H14, &H21, &Hc9, &H39, PID_FIRST_USABLE + 4)
MFPKEY_WMAAECMA_FEATR_FRAME_SIZE = pkk
End Function
Public Function MFPKEY_WMAAECMA_FEATR_ECHO_LENGTH() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6f52c567, &H0360, &H4bd2, &H96, &H17, &Hcc, &Hbf, &H14, &H21, &Hc9, &H39, PID_FIRST_USABLE + 5)
MFPKEY_WMAAECMA_FEATR_ECHO_LENGTH = pkk
End Function
Public Function MFPKEY_WMAAECMA_FEATR_NS() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6f52c567, &H0360, &H4bd2, &H96, &H17, &Hcc, &Hbf, &H14, &H21, &Hc9, &H39, PID_FIRST_USABLE + 6)
MFPKEY_WMAAECMA_FEATR_NS = pkk
End Function
Public Function MFPKEY_WMAAECMA_FEATR_AGC() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6f52c567, &H0360, &H4bd2, &H96, &H17, &Hcc, &Hbf, &H14, &H21, &Hc9, &H39, PID_FIRST_USABLE + 7)
MFPKEY_WMAAECMA_FEATR_AGC = pkk
End Function
Public Function MFPKEY_WMAAECMA_FEATR_AES() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6f52c567, &H0360, &H4bd2, &H96, &H17, &Hcc, &Hbf, &H14, &H21, &Hc9, &H39, PID_FIRST_USABLE + 8)
MFPKEY_WMAAECMA_FEATR_AES = pkk
End Function
Public Function MFPKEY_WMAAECMA_FEATR_VAD() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6f52c567, &H0360, &H4bd2, &H96, &H17, &Hcc, &Hbf, &H14, &H21, &Hc9, &H39, PID_FIRST_USABLE + 9)
MFPKEY_WMAAECMA_FEATR_VAD = pkk
End Function
Public Function MFPKEY_WMAAECMA_FEATR_CENTER_CLIP() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6f52c567, &H0360, &H4bd2, &H96, &H17, &Hcc, &Hbf, &H14, &H21, &Hc9, &H39, PID_FIRST_USABLE + 10)
MFPKEY_WMAAECMA_FEATR_CENTER_CLIP = pkk
End Function
Public Function MFPKEY_WMAAECMA_FEATR_NOISE_FILL() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6f52c567, &H0360, &H4bd2, &H96, &H17, &Hcc, &Hbf, &H14, &H21, &Hc9, &H39, PID_FIRST_USABLE + 11)
MFPKEY_WMAAECMA_FEATR_NOISE_FILL = pkk
End Function
Public Function MFPKEY_WMAAECMA_RETRIEVE_TS_STATS() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6f52c567, &H360, &H4bd2, &H96, &H17, &Hcc, &Hbf, &H14, &H21, &Hc9, &H39, PID_FIRST_USABLE + 12)
MFPKEY_WMAAECMA_RETRIEVE_TS_STATS = pkk
End Function
Public Function MFPKEY_WMAAECMA_QUALITY_METRICS() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6f52c567, &H360, &H4bd2, &H96, &H17, &Hcc, &Hbf, &H14, &H21, &Hc9, &H39, PID_FIRST_USABLE + 13)
MFPKEY_WMAAECMA_QUALITY_METRICS = pkk
End Function
Public Function MFPKEY_WMAAECMA_MICARRAY_DESCPTR() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6f52c567, &H360, &H4bd2, &H96, &H17, &Hcc, &Hbf, &H14, &H21, &Hc9, &H39, PID_FIRST_USABLE + 14)
MFPKEY_WMAAECMA_MICARRAY_DESCPTR = pkk
End Function
Public Function MFPKEY_WMAAECMA_DEVICEPAIR_GUID() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6f52c567, &H360, &H4bd2, &H96, &H17, &Hcc, &Hbf, &H14, &H21, &Hc9, &H39, PID_FIRST_USABLE + 15)
MFPKEY_WMAAECMA_DEVICEPAIR_GUID = pkk
End Function
Public Function MFPKEY_WMAAECMA_FEATR_MICARR_MODE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6f52c567, &H360, &H4bd2, &H96, &H17, &Hcc, &Hbf, &H14, &H21, &Hc9, &H39, PID_FIRST_USABLE + 16)
MFPKEY_WMAAECMA_FEATR_MICARR_MODE = pkk
End Function
Public Function MFPKEY_WMAAECMA_FEATR_MICARR_BEAM() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6f52c567, &H360, &H4bd2, &H96, &H17, &Hcc, &Hbf, &H14, &H21, &Hc9, &H39, PID_FIRST_USABLE + 17)
MFPKEY_WMAAECMA_FEATR_MICARR_BEAM = pkk
End Function
Public Function MFPKEY_WMAAECMA_FEATR_MICARR_PREPROC() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6f52c567, &H360, &H4bd2, &H96, &H17, &Hcc, &Hbf, &H14, &H21, &Hc9, &H39, PID_FIRST_USABLE + 18)
MFPKEY_WMAAECMA_FEATR_MICARR_PREPROC = pkk
End Function
Public Function MFPKEY_WMAAECMA_MIC_GAIN_BOUNDER() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6f52c567, &H360, &H4bd2, &H96, &H17, &Hcc, &Hbf, &H14, &H21, &Hc9, &H39, PID_FIRST_USABLE + 19)
MFPKEY_WMAAECMA_MIC_GAIN_BOUNDER = pkk
End Function
Public Function MFPKEY_COLOR_BRIGHTNESS() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H174fb0ec, &H2695, &H476c, &H88, &Haa, &Hd2, &Hb4, &H1c, &He7, &H5e, &H67, &H01)
MFPKEY_COLOR_BRIGHTNESS = pkk
End Function
Public Function MFPKEY_COLOR_CONTRAST() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H174fb0ec, &H2695, &H476c, &H88, &Haa, &Hd2, &Hb4, &H1c, &He7, &H5e, &H67, &H02)
MFPKEY_COLOR_CONTRAST = pkk
End Function
Public Function MFPKEY_COLOR_HUE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H174fb0ec, &H2695, &H476c, &H88, &Haa, &Hd2, &Hb4, &H1c, &He7, &H5e, &H67, &H03)
MFPKEY_COLOR_HUE = pkk
End Function
Public Function MFPKEY_COLOR_SATURATION() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H174fb0ec, &H2695, &H476c, &H88, &Haa, &Hd2, &Hb4, &H1c, &He7, &H5e, &H67, &H04)
MFPKEY_COLOR_SATURATION = pkk
End Function
Public Function MFPKEY_COLORLEGALIZER_COMPLEXITY() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hadd0e6c1, &Hcc30, &H475d, &H9e, &H5a, &Hf1, &Hb1, &H9f, &H58, &H7b, &He0, &H01)
MFPKEY_COLORLEGALIZER_COMPLEXITY = pkk
End Function
Public Function MFPKEY_COLORLEGALIZER_COMPLEXITYEX() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hadd0e6c1, &Hcc30, &H475d, &H9e, &H5a, &Hf1, &Hb1, &H9f, &H58, &H7b, &He0, &H02)
MFPKEY_COLORLEGALIZER_COMPLEXITYEX = pkk
End Function
Public Function MFPKEY_COLORLEGALIZER_COMPLEXITYMAX() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hadd0e6c1, &Hcc30, &H475d, &H9e, &H5a, &Hf1, &Hb1, &H9f, &H58, &H7b, &He0, &H03)
MFPKEY_COLORLEGALIZER_COMPLEXITYMAX = pkk
End Function
Public Function MFPKEY_COLORLEGALIZER_COMPLEXITYLIVE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hadd0e6c1, &Hcc30, &H475d, &H9e, &H5a, &Hf1, &Hb1, &H9f, &H58, &H7b, &He0, &H04)
MFPKEY_COLORLEGALIZER_COMPLEXITYLIVE = pkk
End Function
Public Function MFPKEY_COLORLEGALIZER_COMPLEXITYOFFLINE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hadd0e6c1, &Hcc30, &H475d, &H9e, &H5a, &Hf1, &Hb1, &H9f, &H58, &H7b, &He0, &H05)
MFPKEY_COLORLEGALIZER_COMPLEXITYOFFLINE = pkk
End Function
Public Function MFPKEY_COLORLEGALIZER_bSVideo() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hadd0e6c1, &Hcc30, &H475d, &H9e, &H5a, &Hf1, &Hb1, &H9f, &H58, &H7b, &He0, &H06)
MFPKEY_COLORLEGALIZER_bSVideo = pkk
End Function
Public Function MFPKEY_CONV_INPUTFRAMERATE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H52f8d29b, &H2e76, &H43f7, &Ha4, &Hf6, &H17, &H17, &H90, &H4e, &H35, &Hdf, &H01)
MFPKEY_CONV_INPUTFRAMERATE = pkk
End Function
Public Function MFPKEY_CONV_OUTPUTFRAMERATE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H52f8d29b, &H2e76, &H43f7, &Ha4, &Hf6, &H17, &H17, &H90, &H4e, &H35, &Hdf, &H02)
MFPKEY_CONV_OUTPUTFRAMERATE = pkk
End Function
Public Function MFPKEY_CONV_REVERSEPLAYBACK() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H52f8d29b, &H2e76, &H43f7, &Ha4, &Hf6, &H17, &H17, &H90, &H4e, &H35, &Hdf, &H03)
MFPKEY_CONV_REVERSEPLAYBACK = pkk
End Function
Public Function MFPKEY_SMPTE_MASKNUM() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H427ce859, &Hd55c, &H4f8e, &Hb0, &H0e, &H9c, &Hdf, &H76, &H15, &H48, &Ha6, &H01)
MFPKEY_SMPTE_MASKNUM = pkk
End Function
Public Function MFPKEY_SMPTE_OFFSETX() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H427ce859, &Hd55c, &H4f8e, &Hb0, &H0e, &H9c, &Hdf, &H76, &H15, &H48, &Ha6, &H02)
MFPKEY_SMPTE_OFFSETX = pkk
End Function
Public Function MFPKEY_SMPTE_OFFSETY() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H427ce859, &Hd55c, &H4f8e, &Hb0, &H0e, &H9c, &Hdf, &H76, &H15, &H48, &Ha6, &H03)
MFPKEY_SMPTE_OFFSETY = pkk
End Function
Public Function MFPKEY_SMPTE_REPLICATEX() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H427ce859, &Hd55c, &H4f8e, &Hb0, &H0e, &H9c, &Hdf, &H76, &H15, &H48, &Ha6, &H04)
MFPKEY_SMPTE_REPLICATEX = pkk
End Function
Public Function MFPKEY_SMPTE_REPLICATEY() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H427ce859, &Hd55c, &H4f8e, &Hb0, &H0e, &H9c, &Hdf, &H76, &H15, &H48, &Ha6, &H05)
MFPKEY_SMPTE_REPLICATEY = pkk
End Function
Public Function MFPKEY_SMPTE_REVERSE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H427ce859, &Hd55c, &H4f8e, &Hb0, &H0e, &H9c, &Hdf, &H76, &H15, &H48, &Ha6, &H06)
MFPKEY_SMPTE_REVERSE = pkk
End Function
Public Function MFPKEY_SMPTE_BORDERSOFTNESS() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H427ce859, &Hd55c, &H4f8e, &Hb0, &H0e, &H9c, &Hdf, &H76, &H15, &H48, &Ha6, &H07)
MFPKEY_SMPTE_BORDERSOFTNESS = pkk
End Function
Public Function MFPKEY_SMPTE_BORDERWIDTH() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H427ce859, &Hd55c, &H4f8e, &Hb0, &H0e, &H9c, &Hdf, &H76, &H15, &H48, &Ha6, &H08)
MFPKEY_SMPTE_BORDERWIDTH = pkk
End Function
Public Function MFPKEY_SMPTE_BORDERCOLOR() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H427ce859, &Hd55c, &H4f8e, &Hb0, &H0e, &H9c, &Hdf, &H76, &H15, &H48, &Ha6, &H09)
MFPKEY_SMPTE_BORDERCOLOR = pkk
End Function
Public Function MFPKEY_DENOISE_FILTER() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7213c6ef, &Hcdd4, &H4d09, &Ha8, &H9e, &Hf3, &Heb, &Heb, &He5, &Hf5, &H65, &H01)
MFPKEY_DENOISE_FILTER = pkk
End Function
Public Function MFPKEY_DENOISE_CACHEFRAMES() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7213c6ef, &Hcdd4, &H4d09, &Ha8, &H9e, &Hf3, &Heb, &Heb, &He5, &Hf5, &H65, &H02)
MFPKEY_DENOISE_CACHEFRAMES = pkk
End Function
Public Function MFPKEY_DENOISE_PROCFRAMES() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7213c6ef, &Hcdd4, &H4d09, &Ha8, &H9e, &Hf3, &Heb, &Heb, &He5, &Hf5, &H65, &H03)
MFPKEY_DENOISE_PROCFRAMES = pkk
End Function
Public Function MFPKEY_DENOISE_CAUSAL() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7213c6ef, &Hcdd4, &H4d09, &Ha8, &H9e, &Hf3, &Heb, &Heb, &He5, &Hf5, &H65, &H04)
MFPKEY_DENOISE_CAUSAL = pkk
End Function
Public Function MFPKEY_DENOISE_ITERATIVE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7213c6ef, &Hcdd4, &H4d09, &Ha8, &H9e, &Hf3, &Heb, &Heb, &He5, &Hf5, &H65, &H05)
MFPKEY_DENOISE_ITERATIVE = pkk
End Function
Public Function MFPKEY_DENOISE_PARA1() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7213c6ef, &Hcdd4, &H4d09, &Ha8, &H9e, &Hf3, &Heb, &Heb, &He5, &Hf5, &H65, &H06)
MFPKEY_DENOISE_PARA1 = pkk
End Function
Public Function MFPKEY_DENOISE_PARA2() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7213c6ef, &Hcdd4, &H4d09, &Ha8, &H9e, &Hf3, &Heb, &Heb, &He5, &Hf5, &H65, &H07)
MFPKEY_DENOISE_PARA2 = pkk
End Function
Public Function MFPKEY_DENOISE_PARA3() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7213c6ef, &Hcdd4, &H4d09, &Ha8, &H9e, &Hf3, &Heb, &Heb, &He5, &Hf5, &H65, &H08)
MFPKEY_DENOISE_PARA3 = pkk
End Function
Public Function MFPKEY_DENOISE_PARA4() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7213c6ef, &Hcdd4, &H4d09, &Ha8, &H9e, &Hf3, &Heb, &Heb, &He5, &Hf5, &H65, &H09)
MFPKEY_DENOISE_PARA4 = pkk
End Function
Public Function MFPKEY_DENOISE_PARA5() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7213c6ef, &Hcdd4, &H4d09, &Ha8, &H9e, &Hf3, &Heb, &Heb, &He5, &Hf5, &H65, &H10)
MFPKEY_DENOISE_PARA5 = pkk
End Function
Public Function MFPKEY_CLUSTERDETECTOR_MAXCLUSTERS() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hb79a666d, &H8a9d, &H463c, &H9d, &H97, &He1, &Hb1, &H0, &H45, &Hc1, &H3a, &H01)
MFPKEY_CLUSTERDETECTOR_MAXCLUSTERS = pkk
End Function
Public Function MFPKEY_CLUSTERDETECTOR_MINCLUSTERDURATION() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hb79a666d, &H8a9d, &H463c, &H9d, &H97, &He1, &Hb1, &H0, &H45, &Hc1, &H3a, &H02)
MFPKEY_CLUSTERDETECTOR_MINCLUSTERDURATION = pkk
End Function
Public Function MFPKEY_CLUSTERDETECTOR_MAXCLUSTERDURATION() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hb79a666d, &H8a9d, &H463c, &H9d, &H97, &He1, &Hb1, &H0, &H45, &Hc1, &H3a, &H03)
MFPKEY_CLUSTERDETECTOR_MAXCLUSTERDURATION = pkk
End Function
Public Function MFPKEY_FACEDETECTOR_SKIPFRAMES() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &He1a124a6, &H4fa8, &H4ba5, &Ha2, &Hd8, &Hdc, &H34, &H53, &H6f, &H74, &H26, &H01)
MFPKEY_FACEDETECTOR_SKIPFRAMES = pkk
End Function
Public Function MFPKEY_SHOTDETECTOR_TYPE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7bcc7b0f, &Hdedf, &H4a68, &H96, &Ha2, &Hfc, &He0, &H19, &Hed, &H95, &H6f, &H01)
MFPKEY_SHOTDETECTOR_TYPE = pkk
End Function
Public Function MFPKEY_SHOTDETECTOR_CLASSIFICATIONMETHOD() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7bcc7b0f, &Hdedf, &H4a68, &H96, &Ha2, &Hfc, &He0, &H19, &Hed, &H95, &H6f, &H02)
MFPKEY_SHOTDETECTOR_CLASSIFICATIONMETHOD = pkk
End Function
Public Function MFPKEY_SHOTDETECTOR_GLOBALTHRESHOLD() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7bcc7b0f, &Hdedf, &H4a68, &H96, &Ha2, &Hfc, &He0, &H19, &Hed, &H95, &H6f, &H03)
MFPKEY_SHOTDETECTOR_GLOBALTHRESHOLD = pkk
End Function
Public Function MFPKEY_SHOTDETECTOR_ADAPTIVETHRESHOLD() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7bcc7b0f, &Hdedf, &H4a68, &H96, &Ha2, &Hfc, &He0, &H19, &Hed, &H95, &H6f, &H04)
MFPKEY_SHOTDETECTOR_ADAPTIVETHRESHOLD = pkk
End Function
Public Function MFPKEY_SHOTDETECTOR_ADAPTIVEWINDOWSIZE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7bcc7b0f, &Hdedf, &H4a68, &H96, &Ha2, &Hfc, &He0, &H19, &Hed, &H95, &H6f, &H05)
MFPKEY_SHOTDETECTOR_ADAPTIVEWINDOWSIZE = pkk
End Function
Public Function MFPKEY_SHOTDETECTOR_MINCLIPWEIGHT() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7bcc7b0f, &Hdedf, &H4a68, &H96, &Ha2, &Hfc, &He0, &H19, &Hed, &H95, &H6f, &H06)
MFPKEY_SHOTDETECTOR_MINCLIPWEIGHT = pkk
End Function
Public Function MFPKEY_SHOTDETECTOR_MINCLIPDURATION() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7bcc7b0f, &Hdedf, &H4a68, &H96, &Ha2, &Hfc, &He0, &H19, &Hed, &H95, &H6f, &H07)
MFPKEY_SHOTDETECTOR_MINCLIPDURATION = pkk
End Function
Public Function MFPKEY_SHOTDETECTOR_MAXCLIPDURATION() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7bcc7b0f, &Hdedf, &H4a68, &H96, &Ha2, &Hfc, &He0, &H19, &Hed, &H95, &H6f, &H08)
MFPKEY_SHOTDETECTOR_MAXCLIPDURATION = pkk
End Function
Public Function MFPKEY_SHOTDETECTOR_MAXCLIPSPERHOUR() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7bcc7b0f, &Hdedf, &H4a68, &H96, &Ha2, &Hfc, &He0, &H19, &Hed, &H95, &H6f, &H09)
MFPKEY_SHOTDETECTOR_MAXCLIPSPERHOUR = pkk
End Function
Public Function MFPKEY_SHOTDETECTOR_PRESERVEMONOCLIPS() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7bcc7b0f, &Hdedf, &H4a68, &H96, &Ha2, &Hfc, &He0, &H19, &Hed, &H95, &H6f, &H0a)
MFPKEY_SHOTDETECTOR_PRESERVEMONOCLIPS = pkk
End Function
Public Function MFPKEY_THUMBNAILGENERATOR_SEARCHWINDOWSIZE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd9d7473f, &H7d68, &H4226, &H98, &H5c, &H31, &H85, &H2c, &H4c, &H9e, &H74, &H01)
MFPKEY_THUMBNAILGENERATOR_SEARCHWINDOWSIZE = pkk
End Function
Public Function MFPKEY_THUMBNAILGENERATOR_MINCOLORENTROPY() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd9d7473f, &H7d68, &H4226, &H98, &H5c, &H31, &H85, &H2c, &H4c, &H9e, &H74, &H02)
MFPKEY_THUMBNAILGENERATOR_MINCOLORENTROPY = pkk
End Function
Public Function MFPKEY_THUMBNAILGENERATOR_MAXMOTIONACTIVITY() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd9d7473f, &H7d68, &H4226, &H98, &H5c, &H31, &H85, &H2c, &H4c, &H9e, &H74, &H03)
MFPKEY_THUMBNAILGENERATOR_MAXMOTIONACTIVITY = pkk
End Function
Public Function MFPKEY_THUMBNAILGENERATOR_THUMBNAILWIDTH() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd9d7473f, &H7d68, &H4226, &H98, &H5c, &H31, &H85, &H2c, &H4c, &H9e, &H74, &H04)
MFPKEY_THUMBNAILGENERATOR_THUMBNAILWIDTH = pkk
End Function
Public Function MFPKEY_THUMBNAILGENERATOR_THUMBNAILHEIGHT() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd9d7473f, &H7d68, &H4226, &H98, &H5c, &H31, &H85, &H2c, &H4c, &H9e, &H74, &H05)
MFPKEY_THUMBNAILGENERATOR_THUMBNAILHEIGHT = pkk
End Function
Public Function MFPKEY_THUMBNAILGENERATOR_THUMBNAILREADY() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd9d7473f, &H7d68, &H4226, &H98, &H5c, &H31, &H85, &H2c, &H4c, &H9e, &H74, &H06)
MFPKEY_THUMBNAILGENERATOR_THUMBNAILREADY = pkk
End Function
Public Function MFPKEY_THUMBNAILGENERATOR_THUMBNAILFILENAME() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd9d7473f, &H7d68, &H4226, &H98, &H5c, &H31, &H85, &H2c, &H4c, &H9e, &H74, &Hff)
MFPKEY_THUMBNAILGENERATOR_THUMBNAILFILENAME = pkk
End Function
Public Function MFPKEY_TOCGENERATOR_TOCREADY() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7c109759, &H3c27, &H42ef, &Ha6, &Ha3, &Hce, &Hde, &Hf7, &H5a, &H35, &He9, &H01)
MFPKEY_TOCGENERATOR_TOCREADY = pkk
End Function
Public Function MFPKEY_TOCGENERATOR_TOCOBJECT() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7c109759, &H3c27, &H42ef, &Ha6, &Ha3, &Hce, &Hde, &Hf7, &H5a, &H35, &He9, &H02)
MFPKEY_TOCGENERATOR_TOCOBJECT = pkk
End Function
Public Function MFPKEY_TOCGENERATOR_SHOTDETECTOR_ON() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7c109759, &H3c27, &H42ef, &Ha6, &Ha3, &Hce, &Hde, &Hf7, &H5a, &H35, &He9, &H03)
MFPKEY_TOCGENERATOR_SHOTDETECTOR_ON = pkk
End Function
Public Function MFPKEY_TOCGENERATOR_CLUSTERDETECTOR_ON() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7c109759, &H3c27, &H42ef, &Ha6, &Ha3, &Hce, &Hde, &Hf7, &H5a, &H35, &He9, &H04)
MFPKEY_TOCGENERATOR_CLUSTERDETECTOR_ON = pkk
End Function
Public Function MFPKEY_TOCGENERATOR_THUMBNAILGENERATOR_ON() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7c109759, &H3c27, &H42ef, &Ha6, &Ha3, &Hce, &Hde, &Hf7, &H5a, &H35, &He9, &H05)
MFPKEY_TOCGENERATOR_THUMBNAILGENERATOR_ON = pkk
End Function
Public Function MFPKEY_TOCGENERATOR_FEATUREEXTRACTOR_ON() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7c109759, &H3c27, &H42ef, &Ha6, &Ha3, &Hce, &Hde, &Hf7, &H5a, &H35, &He9, &H06)
MFPKEY_TOCGENERATOR_FEATUREEXTRACTOR_ON = pkk
End Function
Public Function MFPKEY_TOCGENERATOR_FACEDETECTOR_ON() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7c109759, &H3c27, &H42ef, &Ha6, &Ha3, &Hce, &Hde, &Hf7, &H5a, &H35, &He9, &H07)
MFPKEY_TOCGENERATOR_FACEDETECTOR_ON = pkk
End Function
Public Function MFPKEY_TOCGENERATOR_USEENDSIGNAL() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7c109759, &H3c27, &H42ef, &Ha6, &Ha3, &Hce, &Hde, &Hf7, &H5a, &H35, &He9, &Hfa)
MFPKEY_TOCGENERATOR_USEENDSIGNAL = pkk
End Function
Public Function MFPKEY_TOCGENERATOR_ENDSIGNAL() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7c109759, &H3c27, &H42ef, &Ha6, &Ha3, &Hce, &Hde, &Hf7, &H5a, &H35, &He9, &Hfb)
MFPKEY_TOCGENERATOR_ENDSIGNAL = pkk
End Function
Public Function MFPKEY_TOCGENERATOR_ENDTIME() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7c109759, &H3c27, &H42ef, &Ha6, &Ha3, &Hce, &Hde, &Hf7, &H5a, &H35, &He9, &Hfc)
MFPKEY_TOCGENERATOR_ENDTIME = pkk
End Function
Public Function MFPKEY_TOCGENERATOR_CURRENTTIME() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7c109759, &H3c27, &H42ef, &Ha6, &Ha3, &Hce, &Hde, &Hf7, &H5a, &H35, &He9, &Hfd)
MFPKEY_TOCGENERATOR_CURRENTTIME = pkk
End Function
Public Function MFPKEY_TOCGENERATOR_PROCESSEDFRAMES() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7c109759, &H3c27, &H42ef, &Ha6, &Ha3, &Hce, &Hde, &Hf7, &H5a, &H35, &He9, &Hfe)
MFPKEY_TOCGENERATOR_PROCESSEDFRAMES = pkk
End Function
Public Function MFPKEY_TOCGENERATOR_INDEXFILENAME() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7c109759, &H3c27, &H42ef, &Ha6, &Ha3, &Hce, &Hde, &Hf7, &H5a, &H35, &He9, &Hff)
MFPKEY_TOCGENERATOR_INDEXFILENAME = pkk
End Function
Public Function MFPKEY_DXVA_ENABLED() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H58e28605, &H1d51, &H48ed, &Ha3, &Heb, &Hf, &H9b, &Haf, &H78, &H5f, &Hbd, &H01)
MFPKEY_DXVA_ENABLED = pkk
End Function
Public Function MFPKEY_FI_SUPPORTED() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H5ce18788, &Hb992, &H49a7, &Ha4, &Hf1, &H60, &Hea, &H21, &Hca, &Ha5, &H5f, &H02)
MFPKEY_FI_SUPPORTED = pkk
End Function
Public Function MFPKEY_FI_ENABLED() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &He020c4ca, &H3bdd, &H40ec, &Hbc, &Hf4, &H40, &H39, &Hb1, &H45, &He, &Hb8, &H03)
MFPKEY_FI_ENABLED = pkk
End Function
Public Function MFPKEY_DECODER_DEINTERLACING() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hc6281f, &H4be6, &H4e44, &H9e, &Hd8, &H9e, &Hc5, &H42, &H23, &H16, &He4, &H04)
MFPKEY_DECODER_DEINTERLACING = pkk
End Function
Public Function MFPKEY_POSTPROCESSMODE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hc6281f, &H4be6, &H4e44, &H9e, &Hd8, &H9e, &Hc5, &H42, &H23, &H16, &He4, &H05)
MFPKEY_POSTPROCESSMODE = pkk
End Function
Public Function MFPKEY_NUMTHREADSDEC() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hc6281f, &H4be6, &H4e44, &H9e, &Hd8, &H9e, &Hc5, &H42, &H23, &H16, &He4, &H06)
MFPKEY_NUMTHREADSDEC = pkk
End Function
Public Function MFPKEY_AVDecVideoSWPowerLevel() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hfb5d2347, &H4dd8, &H4509, &Hae, &Hd0, &Hdb, &H5f, &Ha9, &Haa, &H93, &Hf4, &H08)
MFPKEY_AVDecVideoSWPowerLevel = pkk
End Function
Public Function MFPKEY_AVGFRAMERATE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H41d700d6, &H95b1, &H4e3f, &Hb7, &H59, &H2d, &H66, &Hd8, &Hc7, &Had, &Ha2, &H01)
MFPKEY_AVGFRAMERATE = pkk
End Function
Public Function MFPKEY_BUFFERFULLNESSINFIRSTBYTE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hb69dc3c5, &H64c4, &H4757, &H99, &Hcb, &H5d, &H58, &Hf, &Hd5, &H65, &H9e, &H02)
MFPKEY_BUFFERFULLNESSINFIRSTBYTE = pkk
End Function
Public Function MFPKEY_PASSESRECOMMENDED() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H38bdceea, &H393e, &H4f9a, &H8d, &Hc3, &H80, &H2c, &Hc4, &H5, &H83, &H8f, &H03)
MFPKEY_PASSESRECOMMENDED = pkk
End Function
Public Function MFPKEY_DECODERCOMPLEXITYPROFILE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hc0d912d6, &H14da, &H4d31, &H8d, &H83, &Hd1, &H8, &H91, &H5e, &H8d, &H77, &H04)
MFPKEY_DECODERCOMPLEXITYPROFILE = pkk
End Function
Public Function MFPKEY_TOTALFRAMES() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hce5f1e3c, &Hd3d4, &H4c3f, &H88, &Hc8, &H1, &He9, &H89, &Hd9, &H98, &Hd2, &H05)
MFPKEY_TOTALFRAMES = pkk
End Function
Public Function MFPKEY_CODEDFRAMES() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H62872b55, &Hfe0e, &H4930, &Ha6, &Hd2, &Hcc, &Haa, &H37, &He8, &Hf5, &H35, &H06)
MFPKEY_CODEDFRAMES = pkk
End Function
Public Function MFPKEY_ZEROBYTEFRAMES() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H8f04aba4, &H313d, &H40fb, &H80, &H31, &H31, &H51, &H78, &H13, &Hd9, &Hef, &H07)
MFPKEY_ZEROBYTEFRAMES = pkk
End Function
Public Function MFPKEY_ENDOFPASS() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hb2030f2a, &H8bbc, &H46f8, &Ha6, &H4b, &Ha9, &H8f, &Hf7, &Hfc, &Hf0, &H2a, &H08)
MFPKEY_ENDOFPASS = pkk
End Function
Public Function MFPKEY_DATARATE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &He0db0807, &H8003, &H4880, &Hac, &H11, &H61, &Hb7, &H3f, &H33, &Hdc, &H60, &H09)
MFPKEY_DATARATE = pkk
End Function
Public Function MFPKEY_KEYDIST() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H18d6f8c5, &H2416, &H4d7b, &H90, &Hd7, &H9f, &H3f, &H21, &He7, &H52, &Hb4, &H0a)
MFPKEY_KEYDIST = pkk
End Function
Public Function MFPKEY_CRISP() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H2985f772, &H3af2, &H4d15, &H8c, &Hfa, &H8a, &H96, &H2f, &Hf3, &H20, &H40, &H0b)
MFPKEY_CRISP = pkk
End Function
Public Function MFPKEY_FOURCC() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H593e3f2e, &Hf84d, &H4e85, &Hb6, &H8d, &Hf6, &H69, &H40, &He, &Hda, &Hbc, &H0c)
MFPKEY_FOURCC = pkk
End Function
Public Function MFPKEY_VIDEOWINDOW() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hc1c96060, &H76f0, &H47d4, &Ha8, &H75, &H5b, &Hdd, &Ha9, &Hd, &Hf5, &He9, &H0d)
MFPKEY_VIDEOWINDOW = pkk
End Function
Public Function MFPKEY_FRAMECOUNT() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H75028eb4, &H4853, &H44d3, &H88, &Ha3, &He4, &H99, &Hf8, &H9d, &H22, &H7f, &H0e)
MFPKEY_FRAMECOUNT = pkk
End Function
Public Function MFPKEY_LIVEENCODE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H3ffa1e60, &H5514, &H4634, &H86, &He6, &H1f, &H3b, &H7c, &H54, &H51, &H43, &H0f)
MFPKEY_LIVEENCODE = pkk
End Function
Public Function MFPKEY_COMPLEXITY() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H44fa08c7, &H92f5, &H45dc, &H83, &H76, &H8d, &H1d, &H32, &H4c, &H65, &H2a, &H10)
MFPKEY_COMPLEXITY = pkk
End Function
Public Function MFPKEY_COMPLEXITYEX() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd6e48f93, &Hfd47, &H47a3, &H92, &H62, &H8a, &Hef, &Hb5, &H53, &H3, &H32, &H11)
MFPKEY_COMPLEXITYEX = pkk
End Function
Public Function MFPKEY_ASFOVERHEADPERFRAME() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Heac7502, &H1957, &H4beb, &H91, &H4d, &H88, &H5f, &H85, &He7, &H54, &H36, &H12)
MFPKEY_ASFOVERHEADPERFRAME = pkk
End Function
Public Function MFPKEY_PASSESUSED() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hb1653ac1, &Hcb7d, &H43ee, &H84, &H54, &H3f, &H9d, &H81, &H1b, &H3, &H31, &H13)
MFPKEY_PASSESUSED = pkk
End Function
Public Function MFPKEY_VBRENABLED() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &He48d9459, &H6abe, &H4eb5, &H92, &H11, &H60, &H8, &Hc, &H1a, &Hb9, &H84, &H14)
MFPKEY_VBRENABLED = pkk
End Function
Public Function MFPKEY_VBRQUALITY() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hf97b3f3a, &H9eff, &H4ac9, &H82, &H47, &H35, &Hb3, &He, &Hb9, &H25, &Hf4, &H15)
MFPKEY_VBRQUALITY = pkk
End Function
Public Function MFPKEY_RAVG() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H14b2aae6, &H2987, &H460a, &H8b, &H22, &H9c, &H7, &H7c, &H55, &Hd0, &H5e, &H16)
MFPKEY_RAVG = pkk
End Function
Public Function MFPKEY_BAVG() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H10174e76, &He0ca, &H4a39, &H94, &H8c, &H85, &H10, &Hc2, &H32, &H32, &H76, &H17)
MFPKEY_BAVG = pkk
End Function
Public Function MFPKEY_RMAX() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7d8dd246, &Haaf4, &H4a24, &H81, &H66, &H19, &H39, &H6b, &H6, &Hef, &H69, &H18)
MFPKEY_RMAX = pkk
End Function
Public Function MFPKEY_BMAX() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hff365211, &H21b6, &H4134, &Hab, &H7c, &H52, &H39, &H3a, &H8f, &H80, &Hf6, &H19)
MFPKEY_BMAX = pkk
End Function
Public Function MFPKEY_INTERLACEDCODINGENABLED() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H56976073, &H6c3, &H4b3b, &Had, &H41, &Hb7, &H41, &H7f, &Hce, &H84, &H74, &H1a)
MFPKEY_INTERLACEDCODINGENABLED = pkk
End Function
Public Function MFPKEY_PRODUCEDUMMYFRAMES() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H61714bc6, &H8a1, &H49d1, &Hb8, &H27, &Ha3, &H3a, &Had, &Ha9, &H55, &H26, &H1b)
MFPKEY_PRODUCEDUMMYFRAMES = pkk
End Function
Public Function MFPKEY_DECODERCOMPLEXITYREQUESTED() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hb0d7d4a7, &H422b, &H44c3, &H97, &Hb4, &Hb9, &H76, &Hc, &Hce, &Hee, &Ha9, &H1c)
MFPKEY_DECODERCOMPLEXITYREQUESTED = pkk
End Function
Public Function MFPKEY_DROPPEDFRAMES() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hbdb5afd3, &H4027, &H4882, &H80, &H6c, &H41, &H62, &He4, &Ha7, &Ha3, &Hf0, &H1d)
MFPKEY_DROPPEDFRAMES = pkk
End Function
Public Function MFPKEY_CODEDNONZEROFRAMES() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H7adf5b69, &H1e3f, &H42d3, &H99, &H1d, &Hf8, &H1e, &Hc, &Heb, &He9, &H3e, &H1e)
MFPKEY_CODEDNONZEROFRAMES = pkk
End Function
Public Function MFPKEY_QPPERFRAME() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H1f)
MFPKEY_QPPERFRAME = pkk
End Function
Public Function MFPKEY_VOLHEADERFORREENCODE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H21)
MFPKEY_VOLHEADERFORREENCODE = pkk
End Function
Public Function MFPKEY_REENCDURATION() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H22)
MFPKEY_REENCDURATION = pkk
End Function
Public Function MFPKEY_REENCSTARTBUFFERSIZE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H23)
MFPKEY_REENCSTARTBUFFERSIZE = pkk
End Function
Public Function MFPKEY_REENCENDBUFFERSIZE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H24)
MFPKEY_REENCENDBUFFERSIZE = pkk
End Function
Public Function MFPKEY_REENCQPREF() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H25)
MFPKEY_REENCQPREF = pkk
End Function
Public Function MFPKEY_DENOISEOPTION() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H26)
MFPKEY_DENOISEOPTION = pkk
End Function
Public Function MFPKEY_FULLFRAMERATE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H2d)
MFPKEY_FULLFRAMERATE = pkk
End Function
Public Function MFPKEY_MOTIONSEARCHRANGE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H2e)
MFPKEY_MOTIONSEARCHRANGE = pkk
End Function
Public Function MFPKEY_DELTAMVRANGEINDEX() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H2f)
MFPKEY_DELTAMVRANGEINDEX = pkk
End Function
Public Function MFPKEY_NUMBFRAMES() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H30)
MFPKEY_NUMBFRAMES = pkk
End Function
Public Function MFPKEY_RDSUBPIXELSEARCH() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H31)
MFPKEY_RDSUBPIXELSEARCH = pkk
End Function
Public Function MFPKEY_BDELTAQP() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H32)
MFPKEY_BDELTAQP = pkk
End Function
Public Function MFPKEY_FORCEFRAMEWIDTH() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H33)
MFPKEY_FORCEFRAMEWIDTH = pkk
End Function
Public Function MFPKEY_FORCEFRAMEHEIGHT() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H34)
MFPKEY_FORCEFRAMEHEIGHT = pkk
End Function
Public Function MFPKEY_RANGEREDUX() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H35)
MFPKEY_RANGEREDUX = pkk
End Function
Public Function MFPKEY_LOOKAHEAD() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H36)
MFPKEY_LOOKAHEAD = pkk
End Function
Public Function MFPKEY_VIDEOSCALING() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H37)
MFPKEY_VIDEOSCALING = pkk
End Function
Public Function MFPKEY_PERCEPTUALOPTLEVEL() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H38)
MFPKEY_PERCEPTUALOPTLEVEL = pkk
End Function
Public Function MFPKEY_FORCEMEDIANSETTING() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H39)
MFPKEY_FORCEMEDIANSETTING = pkk
End Function
Public Function MFPKEY_NUMTHREADS() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H3a)
MFPKEY_NUMTHREADS = pkk
End Function
Public Function MFPKEY_LOOPFILTER() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H3b)
MFPKEY_LOOPFILTER = pkk
End Function
Public Function MFPKEY_NOISEEDGEREMOVAL() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H3c)
MFPKEY_NOISEEDGEREMOVAL = pkk
End Function
Public Function MFPKEY_VTYPE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H3d)
MFPKEY_VTYPE = pkk
End Function
Public Function MFPKEY_CLOSEDENTRYPOINT() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H3f)
MFPKEY_CLOSEDENTRYPOINT = pkk
End Function
Public Function MFPKEY_MOTIONSEARCHLEVEL() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H40)
MFPKEY_MOTIONSEARCHLEVEL = pkk
End Function
Public Function MFPKEY_MOTIONMATCHMETHOD() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H41)
MFPKEY_MOTIONMATCHMETHOD = pkk
End Function
Public Function MFPKEY_MACROBLOCKMODECOSTMETHOD() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H42)
MFPKEY_MACROBLOCKMODECOSTMETHOD = pkk
End Function
Public Function MFPKEY_COMPRESSIONOPTIMIZATIONTYPE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H43)
MFPKEY_COMPRESSIONOPTIMIZATIONTYPE = pkk
End Function
Public Function MFPKEY_PERIODICALSPDISTANCE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H46)
MFPKEY_PERIODICALSPDISTANCE = pkk
End Function
Public Function MFPKEY_ENCODERCOMPLEXITY() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H47)
MFPKEY_ENCODERCOMPLEXITY = pkk
End Function
Public Function MFPKEY_USERDATASIZE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H48)
MFPKEY_USERDATASIZE = pkk
End Function
Public Function MFPKEY_LETTERBOXPRESENT() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H49)
MFPKEY_LETTERBOXPRESENT = pkk
End Function
Public Function MFPKEY_SCENECHANGE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H4a)
MFPKEY_SCENECHANGE = pkk
End Function
Public Function MFPKEY_VARIABLEGOP() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H4b)
MFPKEY_VARIABLEGOP = pkk
End Function
Public Function MFPKEY_SCENECHANGEI() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H4c)
MFPKEY_SCENECHANGEI = pkk
End Function
Public Function MFPKEY_LOOKAHEADRC() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H4d)
MFPKEY_LOOKAHEADRC = pkk
End Function
Public Function MFPKEY_DQUANTOPTION() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H4e)
MFPKEY_DQUANTOPTION = pkk
End Function
Public Function MFPKEY_DQUANTSTRENGTH() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H4f)
MFPKEY_DQUANTSTRENGTH = pkk
End Function
Public Function MFPKEY_FORCEOVERLAP() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H50)
MFPKEY_FORCEOVERLAP = pkk
End Function
Public Function MFPKEY_MOTIONVECTORCOSTMETHOD() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H51)
MFPKEY_MOTIONVECTORCOSTMETHOD = pkk
End Function
Public Function MFPKEY_DYNCOMPLEXLEVEL() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H52)
MFPKEY_DYNCOMPLEXLEVEL = pkk
End Function
Public Function MFPKEY_TARGETENCRATE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H53)
MFPKEY_TARGETENCRATE = pkk
End Function
Public Function MFPKEY_DYNENCMODE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H54)
MFPKEY_DYNENCMODE = pkk
End Function
Public Function MFPKEY_TARGETENCDELTA() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H55)
MFPKEY_TARGETENCDELTA = pkk
End Function
Public Function MFPKEY_ADAPTIVERESOLUTION() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H56)
MFPKEY_ADAPTIVERESOLUTION = pkk
End Function
Public Function MFPKEY_SETDYNVIDRES() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H4e91bf89, &H665a, &H49da, &Hbb, &H94, &H88, &Hc5, &H50, &Hcf, &Hcd, &H28, &H57)
MFPKEY_SETDYNVIDRES = pkk
End Function
Public Function MFPKEY_CLIP_XORIG() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H716fe5c8, &H755c, &H482f, &H8d, &Hf3, &Hb3, &H1d, &H53, &H59, &Hf0, &Hd6, &H01)
MFPKEY_CLIP_XORIG = pkk
End Function
Public Function MFPKEY_CLIP_YORIG() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H716fe5c8, &H755c, &H482f, &H8d, &Hf3, &Hb3, &H1d, &H53, &H59, &Hf0, &Hd6, &H02)
MFPKEY_CLIP_YORIG = pkk
End Function
Public Function MFPKEY_CLIP_WIDTH() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H716fe5c8, &H755c, &H482f, &H8d, &Hf3, &Hb3, &H1d, &H53, &H59, &Hf0, &Hd6, &H03)
MFPKEY_CLIP_WIDTH = pkk
End Function
Public Function MFPKEY_CLIP_HEIGHT() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H716fe5c8, &H755c, &H482f, &H8d, &Hf3, &Hb3, &H1d, &H53, &H59, &Hf0, &Hd6, &H04)
MFPKEY_CLIP_HEIGHT = pkk
End Function
Public Function MFPKEY_FI_FRAMERATE_VALU_SRC() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H305bca55, &H1e5b, &H428e, &Ha9, &H4c, &H65, &Hb9, &H4d, &H2, &H64, &Hed, &H01)
MFPKEY_FI_FRAMERATE_VALU_SRC = pkk
End Function
Public Function MFPKEY_FI_FRAMERATE_SCAL_SRC() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H305bca55, &H1e5b, &H428e, &Ha9, &H4c, &H65, &Hb9, &H4d, &H2, &H64, &Hed, &H02)
MFPKEY_FI_FRAMERATE_SCAL_SRC = pkk
End Function
Public Function MFPKEY_FI_FRAMERATE_VALU_DST() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H305bca55, &H1e5b, &H428e, &Ha9, &H4c, &H65, &Hb9, &H4d, &H2, &H64, &Hed, &H03)
MFPKEY_FI_FRAMERATE_VALU_DST = pkk
End Function
Public Function MFPKEY_FI_FRAMERATE_SCAL_DST() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H305bca55, &H1e5b, &H428e, &Ha9, &H4c, &H65, &Hb9, &H4d, &H2, &H64, &Hed, &H04)
MFPKEY_FI_FRAMERATE_SCAL_DST = pkk
End Function
Public Function MFPKEY_FI_ALLOWED() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H305bca55, &H1e5b, &H428e, &Ha9, &H4c, &H65, &Hb9, &H4d, &H2, &H64, &Hed, &H05)
MFPKEY_FI_ALLOWED = pkk
End Function
Public Function MFPKEY_FI_COMPLEXITY() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H305bca55, &H1e5b, &H428e, &Ha9, &H4c, &H65, &Hb9, &H4d, &H2, &H64, &Hed, &H06)
MFPKEY_FI_COMPLEXITY = pkk
End Function
Public Function MFPKEY_RESIZE_SRC_LEFT() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6612a6bc, &He57d, &H407d, &Ha9, &H58, &H28, &H5d, &Hf0, &Hd9, &Hb4, &H0, &H01)
MFPKEY_RESIZE_SRC_LEFT = pkk
End Function
Public Function MFPKEY_RESIZE_SRC_TOP() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6612a6bc, &He57d, &H407d, &Ha9, &H58, &H28, &H5d, &Hf0, &Hd9, &Hb4, &H0, &H02)
MFPKEY_RESIZE_SRC_TOP = pkk
End Function
Public Function MFPKEY_RESIZE_SRC_WIDTH() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6612a6bc, &He57d, &H407d, &Ha9, &H58, &H28, &H5d, &Hf0, &Hd9, &Hb4, &H0, &H03)
MFPKEY_RESIZE_SRC_WIDTH = pkk
End Function
Public Function MFPKEY_RESIZE_SRC_HEIGHT() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6612a6bc, &He57d, &H407d, &Ha9, &H58, &H28, &H5d, &Hf0, &Hd9, &Hb4, &H0, &H04)
MFPKEY_RESIZE_SRC_HEIGHT = pkk
End Function
Public Function MFPKEY_RESIZE_DST_LEFT() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6612a6bc, &He57d, &H407d, &Ha9, &H58, &H28, &H5d, &Hf0, &Hd9, &Hb4, &H0, &H05)
MFPKEY_RESIZE_DST_LEFT = pkk
End Function
Public Function MFPKEY_RESIZE_DST_TOP() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6612a6bc, &He57d, &H407d, &Ha9, &H58, &H28, &H5d, &Hf0, &Hd9, &Hb4, &H0, &H06)
MFPKEY_RESIZE_DST_TOP = pkk
End Function
Public Function MFPKEY_RESIZE_DST_WIDTH() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6612a6bc, &He57d, &H407d, &Ha9, &H58, &H28, &H5d, &Hf0, &Hd9, &Hb4, &H0, &H07)
MFPKEY_RESIZE_DST_WIDTH = pkk
End Function
Public Function MFPKEY_RESIZE_DST_HEIGHT() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6612a6bc, &He57d, &H407d, &Ha9, &H58, &H28, &H5d, &Hf0, &Hd9, &Hb4, &H0, &H08)
MFPKEY_RESIZE_DST_HEIGHT = pkk
End Function
Public Function MFPKEY_RESIZE_QUALITY() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6612a6bc, &He57d, &H407d, &Ha9, &H58, &H28, &H5d, &Hf0, &Hd9, &Hb4, &H0, &H09)
MFPKEY_RESIZE_QUALITY = pkk
End Function
Public Function MFPKEY_RESIZE_INTERLACE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6612a6bc, &He57d, &H407d, &Ha9, &H58, &H28, &H5d, &Hf0, &Hd9, &Hb4, &H0, &H0a)
MFPKEY_RESIZE_INTERLACE = pkk
End Function
Public Function MFPKEY_RESIZE_PANSCANAPX() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6612a6bc, &He57d, &H407d, &Ha9, &H58, &H28, &H5d, &Hf0, &Hd9, &Hb4, &H0, &H0b)
MFPKEY_RESIZE_PANSCANAPX = pkk
End Function
Public Function MFPKEY_RESIZE_PANSCANAPY() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6612a6bc, &He57d, &H407d, &Ha9, &H58, &H28, &H5d, &Hf0, &Hd9, &Hb4, &H0, &H0c)
MFPKEY_RESIZE_PANSCANAPY = pkk
End Function
Public Function MFPKEY_RESIZE_PANSCANAPWIDTH() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6612a6bc, &He57d, &H407d, &Ha9, &H58, &H28, &H5d, &Hf0, &Hd9, &Hb4, &H0, &H0d)
MFPKEY_RESIZE_PANSCANAPWIDTH = pkk
End Function
Public Function MFPKEY_RESIZE_PANSCANAPHEIGHT() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6612a6bc, &He57d, &H407d, &Ha9, &H58, &H28, &H5d, &Hf0, &Hd9, &Hb4, &H0, &H0e)
MFPKEY_RESIZE_PANSCANAPHEIGHT = pkk
End Function
Public Function MFPKEY_RESIZE_GEOMAPX() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6612a6bc, &He57d, &H407d, &Ha9, &H58, &H28, &H5d, &Hf0, &Hd9, &Hb4, &H0, &H0f)
MFPKEY_RESIZE_GEOMAPX = pkk
End Function
Public Function MFPKEY_RESIZE_GEOMAPY() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6612a6bc, &He57d, &H407d, &Ha9, &H58, &H28, &H5d, &Hf0, &Hd9, &Hb4, &H0, &H10)
MFPKEY_RESIZE_GEOMAPY = pkk
End Function
Public Function MFPKEY_RESIZE_GEOMAPWIDTH() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6612a6bc, &He57d, &H407d, &Ha9, &H58, &H28, &H5d, &Hf0, &Hd9, &Hb4, &H0, &H11)
MFPKEY_RESIZE_GEOMAPWIDTH = pkk
End Function
Public Function MFPKEY_RESIZE_GEOMAPHEIGHT() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6612a6bc, &He57d, &H407d, &Ha9, &H58, &H28, &H5d, &Hf0, &Hd9, &Hb4, &H0, &H12)
MFPKEY_RESIZE_GEOMAPHEIGHT = pkk
End Function
Public Function MFPKEY_RESIZE_MINAPX() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6612a6bc, &He57d, &H407d, &Ha9, &H58, &H28, &H5d, &Hf0, &Hd9, &Hb4, &H0, &H13)
MFPKEY_RESIZE_MINAPX = pkk
End Function
Public Function MFPKEY_RESIZE_MINAPY() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6612a6bc, &He57d, &H407d, &Ha9, &H58, &H28, &H5d, &Hf0, &Hd9, &Hb4, &H0, &H14)
MFPKEY_RESIZE_MINAPY = pkk
End Function
Public Function MFPKEY_RESIZE_MINAPWIDTH() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6612a6bc, &He57d, &H407d, &Ha9, &H58, &H28, &H5d, &Hf0, &Hd9, &Hb4, &H0, &H15)
MFPKEY_RESIZE_MINAPWIDTH = pkk
End Function
Public Function MFPKEY_RESIZE_MINAPHEIGHT() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6612a6bc, &He57d, &H407d, &Ha9, &H58, &H28, &H5d, &Hf0, &Hd9, &Hb4, &H0, &H16)
MFPKEY_RESIZE_MINAPHEIGHT = pkk
End Function
Public Function MFPKEY_PIXELASPECTRATIO() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6612a6bc, &He57d, &H407d, &Ha9, &H58, &H28, &H5d, &Hf0, &Hd9, &Hb4, &H0, &H17)
MFPKEY_PIXELASPECTRATIO = pkk
End Function
Public Function MFPKEY_COLORCONV_SRCLEFT() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hdc9100be, &H1228, &H416c, &H99, &H48, &H6f, &H38, &Hf4, &H79, &H65, &H4f, &H01)
MFPKEY_COLORCONV_SRCLEFT = pkk
End Function
Public Function MFPKEY_COLORCONV_SRCTOP() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hdc9100be, &H1228, &H416c, &H99, &H48, &H6f, &H38, &Hf4, &H79, &H65, &H4f, &H02)
MFPKEY_COLORCONV_SRCTOP = pkk
End Function
Public Function MFPKEY_COLORCONV_DSTLEFT() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hdc9100be, &H1228, &H416c, &H99, &H48, &H6f, &H38, &Hf4, &H79, &H65, &H4f, &H03)
MFPKEY_COLORCONV_DSTLEFT = pkk
End Function
Public Function MFPKEY_COLORCONV_DSTTOP() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hdc9100be, &H1228, &H416c, &H99, &H48, &H6f, &H38, &Hf4, &H79, &H65, &H4f, &H04)
MFPKEY_COLORCONV_DSTTOP = pkk
End Function
Public Function MFPKEY_COLORCONV_WIDTH() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hdc9100be, &H1228, &H416c, &H99, &H48, &H6f, &H38, &Hf4, &H79, &H65, &H4f, &H05)
MFPKEY_COLORCONV_WIDTH = pkk
End Function
Public Function MFPKEY_COLORCONV_HEIGHT() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hdc9100be, &H1228, &H416c, &H99, &H48, &H6f, &H38, &Hf4, &H79, &H65, &H4f, &H06)
MFPKEY_COLORCONV_HEIGHT = pkk
End Function
Public Function MFPKEY_COLORCONV_MODE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hdc9100be, &H1228, &H416c, &H99, &H48, &H6f, &H38, &Hf4, &H79, &H65, &H4f, &H07)
MFPKEY_COLORCONV_MODE = pkk
End Function
Public Function MFPKEY_DEINTERLACE_PROCESSTYPE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6141f4c3, &Hd3a2, &H48a9, &H96, &Hac, &H2f, &H0, &H14, &H17, &H6c, &H26, &H01)
MFPKEY_DEINTERLACE_PROCESSTYPE = pkk
End Function
Public Function MFPKEY_DEINTERLACE_TELECINEPATTERN() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6141f4c3, &Hd3a2, &H48a9, &H96, &Hac, &H2f, &H0, &H14, &H17, &H6c, &H26, &H02)
MFPKEY_DEINTERLACE_TELECINEPATTERN = pkk
End Function
Public Function MFPKEY_DEINTERLACE_LASTFRAME() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6141f4c3, &Hd3a2, &H48a9, &H96, &Hac, &H2f, &H0, &H14, &H17, &H6c, &H26, &H03)
MFPKEY_DEINTERLACE_LASTFRAME = pkk
End Function
Public Function MFPKEY_DEINTERLACE_DETELECINE_FLAG() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6141f4c3, &Hd3a2, &H48a9, &H96, &Hac, &H2f, &H0, &H14, &H17, &H6c, &H26, &H04)
MFPKEY_DEINTERLACE_DETELECINE_FLAG = pkk
End Function
Public Function MFPKEY_DEINTERLACE_SMOOTHLEVEL() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6141f4c3, &Hd3a2, &H48a9, &H96, &Hac, &H2f, &H0, &H14, &H17, &H6c, &H26, &H05)
MFPKEY_DEINTERLACE_SMOOTHLEVEL = pkk
End Function
Public Function MFPKEY_DEINTERLACE_EDGETHRESHOLD() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H6141f4c3, &Hd3a2, &H48a9, &H96, &Hac, &H2f, &H0, &H14, &H17, &H6c, &H26, &H06)
MFPKEY_DEINTERLACE_EDGETHRESHOLD = pkk
End Function
Public Function MFPKEY_DVDEC_SIZE() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H75f2421a, &He73a, &H45b3, &Hae, &Hf0, &H91, &H3c, &H66, &H84, &H64, &H61, &H00)
MFPKEY_DVDEC_SIZE = pkk
End Function
Public Function MFPKEY_DVENC_FORMAT() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hf449a927, &H7b22, &H46ef, &Hb2, &He7, &H4d, &H2b, &H72, &H8b, &H69, &H9c, &H00)
MFPKEY_DVENC_FORMAT = pkk
End Function

Public Function PHANTOMING_ENABLED_KEY_GUID() As UUID: Return MFPKEY_PHANTOMING_ON.fmtid: End Function
Public Function ROOM_PROFILE_KEY_GUID() As UUID: Return MFPKEY_ROOMCORR_PROFILE.fmtid: End Function
Public Function CROSSOVER_FREQ_KEY_GUID() As UUID: Return MFPKEY_BASSMGMT_CROSSOVER_FREQ.fmtid: End Function
Public Function FULL_RANGE_SPEAKERS_KEY_GUID() As UUID: Return MFPKEY_BASSMGMT_SPKRBASSCONFIG.fmtid: End Function
Public Function BIG_ROOM_KEY_GUID() As UUID: Return MFPKEY_BASSMGMT_BIGROOM.fmtid: End Function
Public Function NO_SUB_KEY_GUID() As UUID: Return MFPKEY_BASSMGMT_NO_SUB.fmtid: End Function
Public Function INVERTED_SUB_KEY_GUID() As UUID: Return MFPKEY_BASSMGMT_INVERT_SUB.fmtid: End Function
Public Function BASSMGMT_MODE_KEY_GUID() As UUID: Return MFPKEY_CORR_BASS_MANAGEMENT_MODE.fmtid: End Function
Public Function MULTICHANNEL_MODE_KEY_GUID() As UUID: Return MFPKEY_CORR_MULTICHANNEL_MODE.fmtid: End Function
Public Function LEQ_ENABLED_KEY_GUID() As UUID: Return MFPKEY_CORR_LOUDNESS_EQUALIZATION_ON.fmtid: End Function
Public Function ROOM_CORRECTION_ENABLED_KEY_GUID() As UUID: Return MFPKEY_CORR_ROOM_CORRECTION_ON.fmtid: End Function
Public Function BOOST_LEVEL_KEY_GUID() As UUID: Return MFPKEY_BASS_BOOST_AMOUNT.fmtid: End Function
Public Function LEQ_RELEASE_KEY_GUID() As UUID: Return MFPKEY_LOUDNESS_EQUALIZATION_RELEASE.fmtid: End Function
Public Function VIRTUALIZATION_MODE_KEY_GUID() As UUID: Return MFPKEY_AUVRHP_ROOMMODEL.fmtid: End Function

Public Enum SYSFXUI_DONOTSHOW
    SYSFXUI_DONOTSHOW_LOUDNESSEQUALIZATION = &H01
    SYSFXUI_DONOTSHOW_ROOMCORRECTION = &H02
    SYSFXUI_DONOTSHOW_BASSMANAGEMENT = &H04
    SYSFXUI_DONOTSHOW_BASSBOOST = &H08
    SYSFXUI_DONOTSHOW_HEADPHONEVIRTUALIZATION = &H10
    SYSFXUI_DONOTSHOW_VIRTUALSURROUND = &H20
    SYSFXUI_DONOTSHOW_SPEAKERFILLING = &H40
    SYSFXUI_DONOTSHOW_CHANNELPHANTOMING = &H80
End Enum
#End Region













End Module

#End If