'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

'wdAD.twin :: Active Directory

'ObjSel.h
[InterfaceId("0c87e64e-3b7b-11d2-b9e0-00c04fd8dbf7")]
[OleAutomation(False)]
Interface IDsObjectPicker Extends IUnknown
    Sub Initialize(pInitInfo As DSOP_INIT_INFO)
    Sub InvokeDialog(ByVal hwndParent As LongPtr, ppdoSelections As IDataObject)
End Interface
    
[InterfaceId("e2d3ec9b-d041-445a-8f16-4748de8fb1cf")]
[OleAutomation(False)]
Interface IDsObjectPickerCredentials Extends IDsObjectPicker
    Sub SetCredentials(ByVal szUserName As LongPtr, ByVal szPassword As LongPtr)
End Interface

'CLSID_DsObjectPicker
[CoClassId("17d6ccd8-3b7b-11d2-b9e0-00c04fd8dbf7")]
CoClass DsObjectPicker
    [Default] Interface IDsObjectPicker
    Interface IDsObjectPickerCredentials
End CoClass
    
'DSClient.h
    
[InterfaceId("7cabcf1e-78f5-11d2-960c-00c04fa31a86")]
[OleAutomation(False)]
Interface IDsBrowseDomainTree Extends IUnknown
    Sub BrowseTo(ByVal hwndParent As LongPtr, ppszTargetPath As LongPtr, ByVal dwFlags As DBDTF_ReturnFlags)
    Sub GetDomains(ppDomainTree As LongPtr, ByVal dwFlags As DBDTF_ReturnFlags)
    Sub FreeDomains(ppDomainTree As LongPtr)
    Sub FlushCachedDomains()
    Sub SetComputer(ByVal pszComputerName As LongPtr, ByVal pszUserName As LongPtr, ByVal pszPassword As LongPtr)
End Interface
    
[InterfaceId("1ab4a8c0-6a0b-11d2-ad49-00c04fa31a86")]
[OleAutomation(False)]
Interface IDsDisplaySpecifier Extends IUnknown
    Sub SetServer(ByVal pszServer As LongPtr, ByVal pszUserName As LongPtr, ByVal pszPassword As LongPtr, ByVal dwFlags As DsDisplaySpecifierSetServerFlags)
    Sub SetLanguageID(ByVal langid As Integer)
    Sub GetDisplaySpecifier(ByVal pszObjectClass As LongPtr, riid As UUID, ppv As Any)
    Sub GetIconLocation(ByVal pszObjectClass As LongPtr, ByVal dwFlags As DsDisplaySpecifierIconLocFlags, ByVal pszBuffer As LongPtr, ByVal cchBuffer As Long, presid As Long)
    [PreserveSig]
    Function GetIcon(ByVal pszObjectClass As LongPtr, ByVal dwFlags As DsDisplaySpecifierIconLocFlags, ByVal cxIcon As Long, ByVal cyIcon As Long) As LongPtr 'HICON
    Sub GetFriendlyClassName(ByVal pszObjectClass As LongPtr, ByVal pszBuffer As LongPtr, ByVal cchBuffer As Long)
    Sub GetFriendlyAttributeName(ByVal pszObjectClass As LongPtr, ByVal pszAttributeName As LongPtr, ByVal pszBuffer As LongPtr, ByVal cchBuffer As Long)
    [PreserveSig]
    Function IsClassContainer(ByVal pszObjectClass As LongPtr, ByVal pszADsPath As LongPtr, ByVal dwFlags As DsDisplaySpecifierClassContFlags) As BOOL
    Sub GetClassCreationInfo(ByVal pszObjectClass As LongPtr, ppdscci As Any)
    Sub EnumClassAttributes(ByVal pszObjectClass As LongPtr, ByVal pcbEnum As LongPtr, ByVal lParam As LongPtr)
    [PreserveSig]
    Function GetAttributeADsType(ByVal pszAttributeName As LongPtr) As ADSTYPE
End Interface
    

'DSAdmin.h
'Note: activeds.tlb is already mostly tB-compatible and won't be duplicated
'  in this project. Use compiler switch ADS_DEFINED to indicate you've added
'  a reference to that.

#If WDL_ADS_DEFINED Then
[InterfaceId("53554A38-F902-11d2-82B9-00C04F68928B")]
[OleAutomation(False)]
Interface IDsAdminCreateObj Extends IUnknown
    Sub Initialize(ByVal pADsContainerObj As IADsContainer, ByVal pADsCopySource As IADs, ByVal lpszClassName As LongPtr)
    Sub CreateModal(ByVal hwndParent As LongPtr, ByRef ppADsObj As IADs)
End Interface

[InterfaceId("F2573587-E6FC-11d2-82AF-00C04F68928B")]
[OleAutomation(False)]
Interface IDsAdminNewObj Extends IUnknown
    Sub SetButtons(ByVal nCurrIndex As Long, ByVal bValid As Boolean)
    Sub GetPageCounts(ByRef pnTotal As Long, ByRef pnStartIndex As Long)
End Interface

[InterfaceId("BE2B487E-F904-11d2-82B9-00C04F68928B")]
[OleAutomation(False)]
Interface IDsAdminNewObjPrimarySite Extends IUnknown
    Sub CreateNew(ByVal pszName As LongPtr)
    Sub Commit()
End Interface

[InterfaceId("6088EAE2-E7BF-11d2-82AF-00C04F68928B")]
[OleAutomation(False)]
Interface IDsAdminNewObjExt Extends IUnknown
    Sub Initialize(ByVal pADsContainerObj As IADsContainer, ByVal pADsCopySource As IADs, ByVal lpszClassName As LongPtr, ByVal pDsAdminNewObj As IDsAdminNewObj, pDispInfo As DSA_NEWOBJ_DISPINFO)
    ' #If WDL_NO_DELEGATES Then
    Sub AddPages(ByVal lpfnAddPage As LongPtr, ByVal lParam As LongPtr)
    ' #Else
    ' Sub AddPages(ByVal lpfnAddPage As ADDPROPSHEETPAGE, ByVal lParam As LongPtr)
    ' #End If
    Sub SetObject(ByVal pADsObj As IADs)
    Sub WriteData(ByVal hWnd As LongPtr, ByVal uContext As Long)
    Sub OnError(ByVal hWnd As LongPtr, ByVal hr As Long, ByVal uContext As Long)
    Sub GetSummaryInfo(ByRef pBstrText As String)
End Interface

[InterfaceId("E4A2B8B3-5A18-11d2-97C1-00A0C9A06D2D")]
[OleAutomation(False)]
Interface IDsAdminNotifyHandler Extends IUnknown
    Sub Initialize(ByVal pExtraInfo As IDataObject, ByRef puEventFlags As Long)
    Sub Begin(ByVal uEvent As Long, ByVal pArg1 As IDataObject, ByVal pArg2 As IDataObject, ByRef puFlags As Long, ByRef pBstr As String)
    Sub Notify(ByVal nItem As Long, ByVal uFlags As Long)
    Sub End()
End Interface
#End If


#If WDL_QUALIFY Then
[MustBeQualified]
#End If
Module wdAD

/*
objsel.h - 100%
Directory Object Picker
*/

Public Function CLSID_DsObjectPicker() As UUID
'{17d6ccd8-3b7b-11d2-b9e0-00c04fd8dbf7}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H17d6ccd8, CInt(&H3b7b), CInt(&H11d2), &Hb9, &He0, &H00, &Hc0, &H4f, &Hd8, &Hdb, &Hf7)
 CLSID_DsObjectPicker = iid
End Function
Public Function IID_IDsObjectPicker() As UUID
'{0c87e64e-3b7b-11d2-b9e0-00c04fd8dbf7}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0c87e64e, CInt(&H3b7b), CInt(&H11d2), &Hb9, &He0, &H00, &Hc0, &H4f, &Hd8, &Hdb, &Hf7)
 IID_IDsObjectPicker = iid
End Function

Public Function IID_IDsObjectPickerCredentials() As UUID
'{e2d3ec9b-d041-445a-8f16-4748de8fb1cf}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He2d3ec9b, CInt(&Hd041), CInt(&H445a), &H8f, &H16, &H47, &H48, &Hde, &H8f, &Hb1, &Hcf)
 IID_IDsObjectPickerCredentials = iid
End Function

Public Const CFSTR_DSOP_DS_SELECTION_LIST = "CFSTR_DSOP_DS_SELECTION_LIST"

Public Enum DSOPScopeTypes
    DSOP_SCOPE_TYPE_TARGET_COMPUTER = &H00000001
    DSOP_SCOPE_TYPE_UPLEVEL_JOINED_DOMAIN = &H00000002
    DSOP_SCOPE_TYPE_DOWNLEVEL_JOINED_DOMAIN = &H00000004
    DSOP_SCOPE_TYPE_ENTERPRISE_DOMAIN = &H00000008
    DSOP_SCOPE_TYPE_GLOBAL_CATALOG = &H00000010
    DSOP_SCOPE_TYPE_EXTERNAL_UPLEVEL_DOMAIN = &H00000020
    DSOP_SCOPE_TYPE_EXTERNAL_DOWNLEVEL_DOMAIN = &H00000040
    DSOP_SCOPE_TYPE_WORKGROUP = &H00000080
    DSOP_SCOPE_TYPE_USER_ENTERED_UPLEVEL_SCOPE = &H00000100
    DSOP_SCOPE_TYPE_USER_ENTERED_DOWNLEVEL_SCOPE = &H00000200
End Enum
   
Public Enum DSOPScopeInitInfoFlags
    DSOP_SCOPE_FLAG_STARTING_SCOPE = &H00000001
    DSOP_SCOPE_FLAG_WANT_PROVIDER_WINNT = &H00000002
    DSOP_SCOPE_FLAG_WANT_PROVIDER_LDAP = &H00000004
    DSOP_SCOPE_FLAG_WANT_PROVIDER_GC = &H00000008
    DSOP_SCOPE_FLAG_WANT_SID_PATH = &H00000010
    DSOP_SCOPE_FLAG_WANT_DOWNLEVEL_BUILTIN_PATH = &H00000020
    DSOP_SCOPE_FLAG_DEFAULT_FILTER_USERS = &H00000040
    DSOP_SCOPE_FLAG_DEFAULT_FILTER_GROUPS = &H00000080
    DSOP_SCOPE_FLAG_DEFAULT_FILTER_COMPUTERS = &H00000100
    DSOP_SCOPE_FLAG_DEFAULT_FILTER_CONTACTS = &H00000200
    DSOP_SCOPE_FLAG_DEFAULT_FILTER_SERVICE_ACCOUNTS = &H00000400
    DSOP_SCOPE_FLAG_DEFAULT_FILTER_PASSWORDSETTINGS_OBJECTS = &H00000800
End Enum

Public Enum DSOPScopeFilterFlags
    DSOP_FILTER_INCLUDE_ADVANCED_VIEW = &H00000001
    DSOP_FILTER_USERS = &H00000002
    DSOP_FILTER_BUILTIN_GROUPS = &H00000004
    DSOP_FILTER_WELL_KNOWN_PRINCIPALS = &H00000008
    DSOP_FILTER_UNIVERSAL_GROUPS_DL = &H00000010
    DSOP_FILTER_UNIVERSAL_GROUPS_SE = &H00000020
    DSOP_FILTER_GLOBAL_GROUPS_DL = &H00000040
    DSOP_FILTER_GLOBAL_GROUPS_SE = &H00000080
    DSOP_FILTER_DOMAIN_LOCAL_GROUPS_DL = &H00000100
    DSOP_FILTER_DOMAIN_LOCAL_GROUPS_SE = &H00000200
    DSOP_FILTER_CONTACTS = &H00000400
    DSOP_FILTER_COMPUTERS = &H00000800
    DSOP_FILTER_SERVICE_ACCOUNTS = &H00001000
    DSOP_FILTER_PASSWORDSETTINGS_OBJECTS = &H00002000
End Enum

Public Enum DSOPScopeDownlevelFilterFlags
    DSOP_DOWNLEVEL_FILTER_USERS = &H80000001
    DSOP_DOWNLEVEL_FILTER_LOCAL_GROUPS = &H80000002
    DSOP_DOWNLEVEL_FILTER_GLOBAL_GROUPS = &H80000004
    DSOP_DOWNLEVEL_FILTER_COMPUTERS = &H80000008
    DSOP_DOWNLEVEL_FILTER_WORLD = &H80000010
    DSOP_DOWNLEVEL_FILTER_AUTHENTICATED_USER = &H80000020
    DSOP_DOWNLEVEL_FILTER_ANONYMOUS = &H80000040
    DSOP_DOWNLEVEL_FILTER_BATCH = &H80000080
    DSOP_DOWNLEVEL_FILTER_CREATOR_OWNER = &H80000100
    DSOP_DOWNLEVEL_FILTER_CREATOR_GROUP = &H80000200
    DSOP_DOWNLEVEL_FILTER_DIALUP = &H80000400
    DSOP_DOWNLEVEL_FILTER_INTERACTIVE = &H80000800
    DSOP_DOWNLEVEL_FILTER_NETWORK = &H80001000
    DSOP_DOWNLEVEL_FILTER_SERVICE = &H80002000
    DSOP_DOWNLEVEL_FILTER_SYSTEM = &H80004000
    DSOP_DOWNLEVEL_FILTER_EXCLUDE_BUILTIN_GROUPS = &H80008000
    DSOP_DOWNLEVEL_FILTER_TERMINAL_SERVER = &H80010000
    DSOP_DOWNLEVEL_FILTER_ALL_WELLKNOWN_SIDS = &H80020000
    DSOP_DOWNLEVEL_FILTER_LOCAL_SERVICE = &H80040000
    DSOP_DOWNLEVEL_FILTER_NETWORK_SERVICE = &H80080000
    DSOP_DOWNLEVEL_FILTER_REMOTE_LOGON = &H80100000
    DSOP_DOWNLEVEL_FILTER_INTERNET_USER = &H80200000
    DSOP_DOWNLEVEL_FILTER_OWNER_RIGHTS = &H80400000
    DSOP_DOWNLEVEL_FILTER_SERVICES = &H80800000
    DSOP_DOWNLEVEL_FILTER_LOCAL_LOGON = &H81000000
    DSOP_DOWNLEVEL_FILTER_THIS_ORG_CERT = &H82000000
    DSOP_DOWNLEVEL_FILTER_IIS_APP_POOL = &H84000000
    DSOP_DOWNLEVEL_FILTER_ALL_APP_PACKAGES = &H88000000
    DSOP_DOWNLEVEL_FILTER_LOCAL_ACCOUNTS = &H90000000
End Enum

Public Type DSOP_UPLEVEL_FILTER_FLAGS
    flBothModes As DSOPScopeFilterFlags
    flMixedModeOnly As DSOPScopeFilterFlags
    flNativeModeOnly As DSOPScopeFilterFlags
End Type

Public Type DSOP_FILTER_FLAGS
    Uplevel As DSOP_UPLEVEL_FILTER_FLAGS
    flDownlevel As DSOPScopeDownlevelFilterFlags
End Type

Public Type DSOP_SCOPE_INIT_INFO
    cbSize As Long
    flType As DSOPScopeTypes
    flScope As DSOPScopeInitInfoFlags
    FilterFlags As DSOP_FILTER_FLAGS
    pwzDcName As LongPtr ' OPTIONAL
    pwzADsPath As LongPtr ' OPTIONAL
    hr As Long
End Type

Public Enum DSOPScopeInitInfoOptions
    DSOP_FLAG_MULTISELECT = &H00000001
    DSOP_FLAG_SKIP_TARGET_COMPUTER_DC_CHECK = &H00000002
End Enum
    
Public Type DSOP_INIT_INFO
    cbSize As Long
    pwzTargetComputer As LongPtr
    cDsScopeInfos As Long
    aDsScopeInfos As LongPtr 'PDSOP_SCOPE_INIT_INFO
    flOptions As DSOPScopeInitInfoOptions
    cAttributesToFetch As Long
    apwzAttributeNames As LongPtr
End Type

Public Type DS_SELECTION
    pwzName As LongPtr
    pwzADsPath As LongPtr
    pwzClass As LongPtr
    pwzUPN As LongPtr
    pvarFetchedAttributes As LongPtr '*Variant
    flScopeType As DSOPScopeTypes
End Type

Public Type DS_SELECTION_LIST
    cItems As Long
    cFetchedAttributes As Long
    aDsSelection(255) As DS_SELECTION
End Type


'dsclient.h
Public Function CLSID_MicrosoftDS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hfe1290f0, &Hcfbd, &H11cf, &Ha3, &H30, &H0, &Haa, &H0, &Hc1, &H6e, &H65)
CLSID_MicrosoftDS = iid
End Function
Public Function CLSID_DsFolder() As UUID
CLSID_DsFolder = CLSID_MicrosoftDS
End Function
Public Function CLSID_DsPropertyPages() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd45d530, &H764b, &H11d0, &Ha1, &Hca, &H0, &Haa, &H0, &Hc1, &H6e, &H65)
CLSID_DsPropertyPages = iid
End Function
Public Function CLSID_DsDomainTreeBrowser() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1698790a, &He2b4, &H11d0, &Hb0, &Hb1, &H00, &Hc0, &H4f, &Hd8, &Hdc, &Ha6)
CLSID_DsDomainTreeBrowser = iid
End Function
Public Function IID_IDsBrowseDomainTree() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7cabcf1e, &H78f5, &H11d2, &H96, &Hc, &H0, &Hc0, &H4f, &Ha3, &H1a, &H86)
IID_IDsBrowseDomainTree = iid
End Function
Public Function CLSID_DsDisplaySpecifier() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1ab4a8c0, &H6a0b, &H11d2, &Had, &H49, &H0, &Hc0, &H4f, &Ha3, &H1a, &H86)
CLSID_DsDisplaySpecifier = iid
End Function
Public Function IID_IDsDisplaySpecifier() As UUID
IID_IDsDisplaySpecifier = CLSID_DsDisplaySpecifier
End Function
Public Function CLSID_DsFolderProperties() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9e51e0d0, &H6e0f, &H11d2, &H96, &H1, &H0, &Hc0, &H4f, &Ha3, &H1a, &H86)
CLSID_DsFolderProperties = iid
End Function


Public Enum DsObjectFlags
    DSOBJECT_ISCONTAINER = &H00000001  ' = 1 => object is a container
    DSOBJECT_READONLYPAGES = &H80000000  ' = 1 => read only pages
End Enum
Public Enum DsObjectProviderFlags
    DSPROVIDER_UNUSED_0 = &H00000001
    DSPROVIDER_UNUSED_1 = &H00000002
    DSPROVIDER_UNUSED_2 = &H00000004
    DSPROVIDER_UNUSED_3 = &H00000008
    DSPROVIDER_ADVANCED = &H00000010  ' = 1 => advanced mode
    DSPROVIDER_AD_LDS = &H00000020  ' = 1 => talking to an AD LDS instance
End Enum
Public Type DSOBJECT
    dwFlags As DsObjectFlags ' item flags
    dwProviderFlags As DsObjectProviderFlags ' flags for item provider
    offsetName As Long ' offset to ADS path of the object
    offsetClass As Long ' offset to object class name / == 0 not known
End Type
[Description("⚠️ **WARNING:** For receiving only. Copy aObjects separately after sizing to cItems. For sending, use DSOBJECTNAMES_Buffered.")]
Public Type DSOBJECTNAMES
    clsidNamespace As UUID ' namespace identifier (indicates which namespace selection from)
    cItems As Long ' number of objects
    aObjects() As DSOBJECT ' array of objects
End Type
Public Type DSOBJECTNAMES_Buffered
    clsidNamespace As UUID ' namespace identifier (indicates which namespace selection from)
    cItems As Long ' number of objects
    aObjects(255) As DSOBJECT ' array of objects
End Type

Public Const CFSTR_DS_DISPLAY_SPEC_OPTIONS  = "DsDisplaySpecOptions"
Public Const CFSTR_DSDISPLAYSPECOPTIONS  = CFSTR_DS_DISPLAY_SPEC_OPTIONS

Public Type DSDISPLAYSPECOPTIONS
    dwSize As Long ' size of struct, for versioning
    dwFlags As DSDSOF_Flags ' invocation flags
    offsetAttribPrefix As Long ' offset to attribute prefix string.
    offsetUserName As Long ' offset to UNICODE user name
    offsetPassword As Long ' offset to UNICODE password
    offsetServer As Long
    offsetServerConfigPath As Long
End Type

Public Const DS_PROP_SHELL_PREFIX  = "shell"
Public Const DS_PROP_ADMIN_PREFIX  = "admin"

Public Enum DSDSOF_Flags
    DSDSOF_HASUSERANDSERVERINFO = &H00000001  ' = 1 => user name/password are valid
    DSDSOF_SIMPLEAUTHENTICATE = &H00000002  ' = 1 => don't use secure authentication to DS
    DSDSOF_DONTSIGNSEAL = &H00000004  ' = 1 => don't sign+seal when opening DS objects
    DSDSOF_DSAVAILABLE = &H40000000  ' = 1 => ignore DS available checks
End Enum

Public Const CFSTR_DSPROPERTYPAGEINFO  = "DsPropPageInfo"
Public Const DSPROP_ATTRCHANGED_MSG  = "DsPropAttrChanged"

Public Type DSPROPERTYPAGEINFO
    offsetString As Long ' offset to UNICODE string
End Type

Public Enum DBDTF_ReturnFlags
    DBDTF_RETURNFQDN = &H00000001  ' if not set, pszNCName will be blank
    DBDTF_RETURNMIXEDDOMAINS = &H00000002  ' set it if you want downlevel trust domains too
    DBDTF_RETURNEXTERNAL = &H00000004  ' set it if you want external trust domains too
    DBDTF_RETURNINBOUND = &H00000008  ' set it if you want trusting domains
    DBDTF_RETURNINOUTBOUND = &H00000010  ' set it if you want both trusted and trusting domains
End Enum
    
Public Type DOMAINDESC
    pszName As LongPtr ' domain name (if no dns, use netbios)
    pszPath As LongPtr ' set to blank
    pszNCName As LongPtr ' FQDN, e.g.,DC=mydomain,DC=microsoft,DC=com
    pszTrustParent As LongPtr ' parent domain name (if no dns, use netbios)
    pszObjectClass As LongPtr ' Object class of the domain object referenced
    ulFlags As Long ' Flags, from DS_TRUSTED_DOMAINS.Flags
    fDownLevel As BOOL ' == 1 if downlevel domain
    pdChildList As LongPtr 'struct _DOMAINDESC* ' Children of this node
    pdNextSibling As LongPtr 'struct _DOMAINDESC* ' Siblings of this node            
End Type

Public Type DOMAIN_TREE
    dsSize As Long
    dwCount As Long
    aDomains(0 To 255) As DOMAINDESC
End Type

Public Enum DsDisplaySpecifierSetServerFlags
    DSSSF_SIMPLEAUTHENTICATE = &H00000001  ' = 1 => don't use secure authentication to DS
    DSSSF_DONTSIGNSEAL = &H00000002  ' = 1 => don't use sign+seal when opening objects in the DS
    DSSSF_DSAVAILABLE = &H80000000  ' = 1 => ignore DS available checks
End Enum
Public Enum DsDisplaySpecifierIconLocFlags
    DSGIF_ISNORMAL = &H0000000  ' = icon is in normal state (default)
    DSGIF_ISOPEN = &H0000001  ' = icon is in open state
    DSGIF_ISDISABLED = &H0000002  ' = icon is in a disabled state
    DSGIF_ISMASK = &H000000f
    DSGIF_GETDEFAULTICON = &H0000010  ' = 1 => if no icon then get default (from shell32.dll)
    DSGIF_DEFAULTISCONTAINER = &H0000020  ' = 1 => if returning default icon, return it as a container
End Enum
Public Enum DsDisplaySpecifierClassContFlags
    DSICCF_IGNORETREATASLEAF = &H1
End Enum
Public Enum DsDisplaySpecifierEnumClassFlags
    DSECAF_NOTLISTED = &H1
End Enum
Public Enum DsDisplaySpecifiderClassCIFlags
    DSCCIF_HASWIZARDDIALOG = &H00000001  ' = 1 => return the wizard dialog CLSID
    DSCCIF_HASWIZARDPRIMARYPAGE = &H00000002  ' = 1 => returning a primary wizard dlg CLSID
End Enum

Public Type DSCLASSCREATIONINFO
    dwFlags As DsDisplaySpecifiderClassCIFlags
    clsidWizardDialog As UUID
    clsidWizardPrimaryPage As UUID
    cWizardExtensions As Long ' how many extension CLSIDs?
    aWizardExtensions(0 To 31) As UUID
End Type

Public Enum DsBrowseInfoFlags
    DSBI_NOBUTTONS = &H00000001  ' NOT TVS_HASBUTTONS
    DSBI_NOLINES = &H00000002  ' NOT TVS_HASLINES
    DSBI_NOLINESATROOT = &H00000004  ' NOT TVS_LINESATROOT
    DSBI_CHECKBOXES = &H00000100  ' TVS_CHECKBOXES
    DSBI_NOROOT = &H00010000  ' don't include pszRoot in tree (its children become top level nodes)
    DSBI_INCLUDEHIDDEN = &H00020000  ' display hidden objects
    DSBI_EXPANDONOPEN = &H00040000  ' expand to the path specified in pszPath when opening the dialog
    DSBI_ENTIREDIRECTORY = &H00090000  ' browse the entire directory (defaults to having DSBI_NOROOT set)
    DSBI_RETURN_FORMAT = &H00100000  ' dwReturnFormat field is valid
    DSBI_HASCREDENTIALS = &H00200000  ' pUserName & pPassword are valid
    DSBI_IGNORETREATASLEAF = &H00400000  ' ignore the treat as leaf flag when calling IsClassContainer
    DSBI_SIMPLEAUTHENTICATE = &H00800000  ' don't use secure authentication to DS
    DSBI_RETURNOBJECTCLASS = &H01000000  ' return object class of selected object
    DSBI_DONTSIGNSEAL = &H02000000  ' don't sign+seal communication with DS
End Enum
Public Type DSBROWSEINFOA
    cbStruct As Long ' size of structure in bytes
    hwndOwner As LongPtr ' dialog owner
    pszCaption As String ' dialog caption text (can be NULL)
    pszTitle As String ' displayed above the tree view control (can be NULL)
    pszRoot As String ' ADS path to root (NULL == root of DS namespace)
    pszPath As String ' [in/out] initial selection & returned path (required)
    cchPath As Long ' size of pszPath buffer in characters
    dwFlags As DsBrowseInfoFlags
    pfnCallback As LongPtr 'BFFCALLBACK ' callback function (see SHBrowseForFolder)
    lParam As LongPtr ' passed to pfnCallback as lpUserData
    dwReturnFormat As ADS_FORMAT_ENUM ' ADS_FORMAT_* (default is ADS_FORMAT_X500_NO_SERVER)
    pUserName As String ' Username and Password to authenticate against DS with  
    pPassword As String
    pszObjectClass As String ' UNICODE string for the object class
    cchObjectClass As Long
End Type
Public Type DSBROWSEINFOW
    cbStruct As Long ' size of structure in bytes
    hwndOwner As LongPtr ' dialog owner
    pszCaption As LongPtr ' dialog caption text (can be NULL)
    pszTitle As LongPtr ' displayed above the tree view control (can be NULL)
    pszRoot As LongPtr ' ADS path to root (NULL == root of DS namespace)
    pszPath As LongPtr ' [in/out] initial selection & returned path (required)
    cchPath As Long ' size of pszPath buffer in characters
    dwFlags As DsBrowseInfoFlags
    pfnCallback As LongPtr 'BFFCALLBACK ' callback function (see SHBrowseForFolder)
    lParam As LongPtr ' passed to pfnCallback as lpUserData
    dwReturnFormat As ADS_FORMAT_ENUM ' ADS_FORMAT_* (default is ADS_FORMAT_X500_NO_SERVER)
    pUserName As LongPtr ' Username and Password to authenticate against DS with  
    pPassword As LongPtr
    pszObjectClass As LongPtr ' UNICODE string for the object class
    cchObjectClass As Long
End Type
Public Type DSBROWSEINFO
    cbStruct As Long ' size of structure in bytes
    hwndOwner As LongPtr ' dialog owner
    pszCaption As LongPtr ' dialog caption text (can be NULL)
    pszTitle As LongPtr ' displayed above the tree view control (can be NULL)
    pszRoot As LongPtr ' ADS path to root (NULL == root of DS namespace)
    pszPath As LongPtr ' [in/out] initial selection & returned path (required)
    cchPath As Long ' size of pszPath buffer in characters
    dwFlags As DsBrowseInfoFlags
    pfnCallback As LongPtr 'BFFCALLBACK ' callback function (see SHBrowseForFolder)
    lParam As LongPtr ' passed to pfnCallback as lpUserData
    dwReturnFormat As ADS_FORMAT_ENUM ' ADS_FORMAT_* (default is ADS_FORMAT_X500_NO_SERVER)
    pUserName As LongPtr ' Username and Password to authenticate against DS with  
    pPassword As LongPtr
    pszObjectClass As LongPtr ' UNICODE string for the object class
    cchObjectClass As Long
End Type

Public Enum DsbItemMask
    DSBF_STATE = &H00000001
    DSBF_ICONLOCATION = &H00000002
    DSBF_DISPLAYNAME = &H00000004
End Enum
Public Enum DsbItemStates
    DSBS_CHECKED = &H00000001
    DSBS_HIDDEN = &H00000002
    DSBS_ROOT = &H00000004
End Enum
Public Const DSB_MAX_DISPLAYNAME_CHARS = 64
Public Type DSBITEMA
    cbStruct As Long
    pszADsPath As String ' ADS paths are always Unicode
    pszClass As String ' ADS properties are always Unicode
    dwMask As DsbItemMask
    dwState As DsbItemStates
    dwStateMask As DsbItemStates
    szDisplayName(0 To (DSB_MAX_DISPLAYNAME_CHARS - 1)) As Integer
    szIconLocation(0 To (MAX_PATH - 1)) As Integer
    iIconResID As Long
End Type
Public Type DSBITEMW
    cbStruct As Long
    pszADsPath As LongPtr ' ADS paths are always Unicode
    pszClass As LongPtr ' ADS properties are always Unicode
    dwMask As DsbItemMask
    dwState As DsbItemStates
    dwStateMask As DsbItemStates
    szDisplayName(0 To (DSB_MAX_DISPLAYNAME_CHARS - 1)) As Integer
    szIconLocation(0 To (MAX_PATH - 1)) As Integer
    iIconResID As Long
End Type
'Alias DSBITEM As DSBITEMW
Public Type DSBITEM
    cbStruct As Long
    pszADsPath As LongPtr ' ADS paths are always Unicode
    pszClass As LongPtr ' ADS properties are always Unicode
    dwMask As DsbItemMask
    dwState As DsbItemStates
    dwStateMask As DsbItemStates
    szDisplayName(0 To (DSB_MAX_DISPLAYNAME_CHARS - 1)) As Integer
    szIconLocation(0 To (MAX_PATH - 1)) As Integer
    iIconResID As Long
End Type

Public Const DSBM_QUERYINSERTW  = 100  ' lParam = PDSBITEMW (state, icon & name may be modified). Return TRUE if handled.
Public Const DSBM_QUERYINSERTA  = 101  ' lParam = PDSBITEMA (state, icon & name may be modified). Return TRUE if handled.
Public Const DSBM_QUERYINSERT  = DSBM_QUERYINSERTW
Public Const DSBM_CHANGEIMAGESTATE  = 102  ' lParam = adspath.  Return TRUE/FALSE top allow/disallow
'  The dialog receives a WM_HELP
Public Const DSBM_HELP  = 103  ' lParam == LPHELPINFO structure
'  The dialog receives a WM_CONTEXTMENU, DSBID_xxx are the control ID's for this
'  dialog so that you can display suitable help.
Public Const DSBM_CONTEXTMENU  = 104  ' lParam == window handle to retrieve help for
'  These are the control IDs for the controls in the dialog.   The callback can use
'  these to modify the contents of the dialog as required.
Public Const DSBID_BANNER  = 256
Public Const DSBID_CONTAINERLIST  = 257

Public Declare PtrSafe Function DsBrowseForContainerA Lib "dsuiext.dll" (pInfo As DSBROWSEINFOA) As Long
Public Declare PtrSafe Function DsBrowseForContainerW Lib "dsuiext.dll" (pInfo As DSBROWSEINFOW) As Long
Public DeclareWide PtrSafe Function DsBrowseForContainer Lib "dsuiext.dll" Alias "DsBrowseForContainerW" (pInfo As DSBROWSEINFO) As Long

Public Declare PtrSafe Function DsGetIcon Lib "dsuiext.dll" (ByVal dwFlags As DsDisplaySpecifierIconLocFlags, ByVal pszObjectClass As LongPtr, ByVal cxImage As Long, ByVal cyImage As Long) As LongPtr 'HICON

Public Declare PtrSafe Function DsGetFriendlyClassName Lib "dsuiext.dll" (ByVal pszObjectClass As LongPtr, ByVal pszBuffer As LongPtr, ByVal cchBuffer As Long) As Long





Public Enum ADSTYPE
    ADSTYPE_INVALID = 0
    ADSTYPE_DN_STRING = (ADSTYPE_INVALID + 1)
    ADSTYPE_CASE_EXACT_STRING = (ADSTYPE_DN_STRING + 1)
    ADSTYPE_CASE_IGNORE_STRING = (ADSTYPE_CASE_EXACT_STRING + 1)
    ADSTYPE_PRINTABLE_STRING = (ADSTYPE_CASE_IGNORE_STRING + 1)
    ADSTYPE_NUMERIC_STRING = (ADSTYPE_PRINTABLE_STRING + 1)
    ADSTYPE_BOOLEAN = (ADSTYPE_NUMERIC_STRING + 1)
    ADSTYPE_INTEGER = (ADSTYPE_BOOLEAN + 1)
    ADSTYPE_OCTET_STRING = (ADSTYPE_INTEGER + 1)
    ADSTYPE_UTC_TIME = (ADSTYPE_OCTET_STRING + 1)
    ADSTYPE_LARGE_INTEGER = (ADSTYPE_UTC_TIME + 1)
    ADSTYPE_PROV_SPECIFIC = (ADSTYPE_LARGE_INTEGER + 1)
    ADSTYPE_OBJECT_CLASS = (ADSTYPE_PROV_SPECIFIC + 1)
    ADSTYPE_CASEIGNORE_LIST = (ADSTYPE_OBJECT_CLASS + 1)
    ADSTYPE_OCTET_LIST = (ADSTYPE_CASEIGNORE_LIST + 1)
    ADSTYPE_PATH = (ADSTYPE_OCTET_LIST + 1)
    ADSTYPE_POSTALADDRESS = (ADSTYPE_PATH + 1)
    ADSTYPE_TIMESTAMP = (ADSTYPE_POSTALADDRESS + 1)
    ADSTYPE_BACKLINK = (ADSTYPE_TIMESTAMP + 1)
    ADSTYPE_TYPEDNAME = (ADSTYPE_BACKLINK + 1)
    ADSTYPE_HOLD = (ADSTYPE_TYPEDNAME + 1)
    ADSTYPE_NETADDRESS = (ADSTYPE_HOLD + 1)
    ADSTYPE_REPLICAPOINTER = (ADSTYPE_NETADDRESS + 1)
    ADSTYPE_FAXNUMBER = (ADSTYPE_REPLICAPOINTER + 1)
    ADSTYPE_EMAIL = (ADSTYPE_FAXNUMBER + 1)
    ADSTYPE_NT_SECURITY_DESCRIPTOR = (ADSTYPE_EMAIL + 1)
    ADSTYPE_UNKNOWN = (ADSTYPE_NT_SECURITY_DESCRIPTOR + 1)
    ADSTYPE_DN_WITH_BINARY = (ADSTYPE_UNKNOWN + 1)
    ADSTYPE_DN_WITH_STRING = (ADSTYPE_DN_WITH_BINARY + 1)
End Enum
Public Enum ADS_FORMAT_ENUM
    ADS_FORMAT_WINDOWS = 1
    ADS_FORMAT_WINDOWS_NO_SERVER = 2
    ADS_FORMAT_WINDOWS_DN = 3
    ADS_FORMAT_WINDOWS_PARENT = 4
    ADS_FORMAT_X500 = 5
    ADS_FORMAT_X500_NO_SERVER = 6
    ADS_FORMAT_X500_DN = 7
    ADS_FORMAT_X500_PARENT = 8
    ADS_FORMAT_SERVER = 9
    ADS_FORMAT_PROVIDER = 10
    ADS_FORMAT_LEAF = 11
End Enum


'DSAdmin.h
Public Function CLSID_DsAdminCreateObj() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He301a009, &Hf901, &H11d2, &H82, &Hb9, &H0, &Hc0, &H4f, &H68, &H92, &H8b)
CLSID_DsAdminCreateObj = iid
End Function
Public Function IID_IDsAdminCreateObj() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H53554a38, &Hf902, &H11d2, &H82, &Hb9, &H0, &Hc0, &H4f, &H68, &H92, &H8b)
IID_IDsAdminCreateObj = iid
End Function
Public Function IID_IDsAdminNewObj() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf2573587, &He6fc, &H11d2, &H82, &Haf, &H0, &Hc0, &H4f, &H68, &H92, &H8b)
IID_IDsAdminNewObj = iid
End Function
Public Function IID_IDsAdminNewObjPrimarySite() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hbe2b487e, &Hf904, &H11d2, &H82, &Hb9, &H0, &Hc0, &H4f, &H68, &H92, &H8b)
IID_IDsAdminNewObjPrimarySite = iid
End Function
Public Function IID_IDsAdminNewObjExt() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6088eae2, &He7bf, &H11d2, &H82, &Haf, &H0, &Hc0, &H4f, &H68, &H92, &H8b)
IID_IDsAdminNewObjExt = iid
End Function
Public Function IID_IDsAdminNotifyHandler() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He4a2b8b3, &H5a18, &H11d2, &H97, &Hc1, &H0, &Ha0, &Hc9, &Ha0, &H6d, &H2d)
IID_IDsAdminNotifyHandler = iid
End Function

Public Type DSA_NEWOBJ_DISPINFO
    dwSize As Long ' size of struct, for versioning
    hObjClassIcon As LongPtr ' class icon for the object to be created
    lpszWizTitle As LongPtr ' title of the wizard
    lpszContDisplayName As LongPtr ' container display name (canonical name)
End Type

Public Enum DsAdminNewObjFlags
    DSA_NEWOBJ_CTX_PRECOMMIT = &H00000001  ' before SetInfo()
    DSA_NEWOBJ_CTX_COMMIT = &H00000002  ' SetInfo(), commit phase
    DSA_NEWOBJ_CTX_POSTCOMMIT = &H00000003  ' after SetInfo()
    DSA_NEWOBJ_CTX_CLEANUP = &H00000004  ' on post commit fail
End Enum

Public Enum DsAdminNotifyFlags
    DSA_NOTIFY_DEL = &H00000001  ' delete
    DSA_NOTIFY_REN = &H00000002  ' rename
    DSA_NOTIFY_MOV = &H00000004  ' move
    DSA_NOTIFY_PROP = &H00000008  ' property change
    DSA_NOTIFY_ALL = (DSA_NOTIFY_DEL Or DSA_NOTIFY_REN Or DSA_NOTIFY_MOV Or DSA_NOTIFY_PROP)
End Enum

Public Enum DsAdminNotifyAddDataFlags
    DSA_NOTIFY_FLAG_ADDITIONAL_DATA = &H00000002  'process additional extension data?
    DSA_NOTIFY_FLAG_FORCE_ADDITIONAL_DATA = &H00000001  'operation forced
End Enum







'dsgetdc.h

Public Enum DsGetDcNameFlags
    DS_FORCE_REDISCOVERY = &H00000001
    DS_DIRECTORY_SERVICE_REQUIRED = &H00000010
    DS_DIRECTORY_SERVICE_PREFERRED = &H00000020
    DS_GC_SERVER_REQUIRED = &H00000040
    DS_PDC_REQUIRED = &H00000080
    DS_BACKGROUND_ONLY = &H00000100
    DS_IP_REQUIRED = &H00000200
    DS_KDC_REQUIRED = &H00000400
    DS_TIMESERV_REQUIRED = &H00000800
    DS_WRITABLE_REQUIRED = &H00001000
    DS_GOOD_TIMESERV_PREFERRED = &H00002000
    DS_AVOID_SELF = &H00004000
    DS_ONLY_LDAP_NEEDED = &H00008000&
    DS_IS_FLAT_NAME = &H00010000
    DS_IS_DNS_NAME = &H00020000
    DS_TRY_NEXTCLOSEST_SITE = &H00040000
    DS_DIRECTORY_SERVICE_6_REQUIRED = &H00080000
    DS_WEB_SERVICE_REQUIRED = &H00100000
    DS_DIRECTORY_SERVICE_8_REQUIRED = &H00200000
    DS_DIRECTORY_SERVICE_9_REQUIRED = &H00400000
    DS_DIRECTORY_SERVICE_10_REQUIRED = &H00800000
    DS_KEY_LIST_SUPPORT_REQUIRED = &H01000000
    DS_DIRECTORY_SERVICE_13_REQUIRED = &H02000000
    DS_RETURN_DNS_NAME = &H40000000
    DS_RETURN_FLAT_NAME = &H80000000
    DSGETDC_VALID_FLAGS = (DS_FORCE_REDISCOVERY Or DS_DIRECTORY_SERVICE_REQUIRED Or DS_DIRECTORY_SERVICE_PREFERRED Or DS_GC_SERVER_REQUIRED Or DS_PDC_REQUIRED Or DS_BACKGROUND_ONLY Or DS_IP_REQUIRED Or DS_KDC_REQUIRED Or DS_TIMESERV_REQUIRED Or DS_WRITABLE_REQUIRED Or DS_GOOD_TIMESERV_PREFERRED Or DS_AVOID_SELF Or DS_ONLY_LDAP_NEEDED Or DS_IS_FLAT_NAME Or DS_IS_DNS_NAME Or DS_TRY_NEXTCLOSEST_SITE Or DS_DIRECTORY_SERVICE_6_REQUIRED Or DS_DIRECTORY_SERVICE_8_REQUIRED Or DS_DIRECTORY_SERVICE_9_REQUIRED Or DS_DIRECTORY_SERVICE_10_REQUIRED Or DS_KEY_LIST_SUPPORT_REQUIRED Or DS_DIRECTORY_SERVICE_13_REQUIRED Or DS_WEB_SERVICE_REQUIRED Or DS_RETURN_FLAT_NAME Or DS_RETURN_DNS_NAME)
    DS_DIRECTORY_SERVICE_ALL_VERSIONS = (DS_DIRECTORY_SERVICE_REQUIRED Or DS_DIRECTORY_SERVICE_6_REQUIRED Or DS_DIRECTORY_SERVICE_8_REQUIRED Or DS_DIRECTORY_SERVICE_9_REQUIRED Or DS_DIRECTORY_SERVICE_10_REQUIRED Or DS_DIRECTORY_SERVICE_13_REQUIRED)
End Enum

Public Type DOMAIN_CONTROLLER_INFOA
    DomainControllerName As String
    DomainControllerAddress As String
    DomainControllerAddressType As DomainControllerAddrTypes
    DomainGuid As UUID
    DomainName As String
    DnsForestName As String
    Flags As DomainControllerFlags
    DcSiteName As String
    ClientSiteName As String
End Type
Public Type DOMAIN_CONTROLLER_INFOW
    DomainControllerName As LongPtr
    DomainControllerAddress As LongPtr
    DomainControllerAddressType As DomainControllerAddrTypes
    DomainGuid As UUID
    DomainName As LongPtr
    DnsForestName As LongPtr
    Flags As DomainControllerFlags
    DcSiteName As LongPtr
    ClientSiteName As LongPtr
End Type
'Alias DOMAIN_CONTROLLER_INFO As DOMAIN_CONTROLLER_INFOW
Public Type DOMAIN_CONTROLLER_INFO
    DomainControllerName As LongPtr
    DomainControllerAddress As LongPtr
    DomainControllerAddressType As DomainControllerAddrTypes
    DomainGuid As UUID
    DomainName As LongPtr
    DnsForestName As LongPtr
    Flags As DomainControllerFlags
    DcSiteName As LongPtr
    ClientSiteName As LongPtr
End Type

Public Enum DomainControllerAddrTypes
    DS_INET_ADDRESS = 1
    DS_NETBIOS_ADDRESS = 2
End Enum

Public Enum DomainControllerFlags
    DS_PDC_FLAG = &H00000001  ' DC is PDC of Domain
    DS_GC_FLAG = &H00000004  ' DC is a GC of forest
    DS_LDAP_FLAG = &H00000008  ' Server supports an LDAP server
    DS_DS_FLAG = &H00000010  ' DC supports a DS and is a Domain Controller
    DS_KDC_FLAG = &H00000020  ' DC is running KDC service
    DS_TIMESERV_FLAG = &H00000040  ' DC is running time service
    DS_CLOSEST_FLAG = &H00000080  ' DC is in closest site to client
    DS_WRITABLE_FLAG = &H00000100  ' DC has a writable DS
    DS_GOOD_TIMESERV_FLAG = &H00000200  ' DC is running time service (and has clock hardware)
    DS_NDNC_FLAG = &H00000400  ' DomainName is non-domain NC serviced by the LDAP server
    DS_SELECT_SECRET_DOMAIN_6_FLAG = &H00000800  ' DC has some secrets
    DS_FULL_SECRET_DOMAIN_6_FLAG = &H00001000  ' DC has all secrets
    DS_WS_FLAG = &H00002000  ' DC is running web service
    DS_DS_8_FLAG = &H00004000  ' DC is running Windows Server 2008 or later
    DS_DS_9_FLAG = &H00008000&  ' DC is running Windows Server 2008R2 or later
    DS_DS_10_FLAG = &H00010000  ' DC is running Windows Server 2016 or later
    DS_KEY_LIST_FLAG = &H00020000  ' DC supports key list requests
    DS_DS_13_FLAG = &H00040000  ' DC is running Windows Server 2025 or later
    DS_PING_FLAGS = &H000FFFFF  ' Flags returned on ping
    DS_DNS_CONTROLLER_FLAG = &H20000000  ' DomainControllerName is a DNS name
    DS_DNS_DOMAIN_FLAG = &H40000000  ' DomainName is a DNS name
    DS_DNS_FOREST_FLAG = &H80000000  ' DnsForestName is a DNS name
End Enum

Public Declare PtrSafe Function DsGetDcNameA Lib "netapi32" (ByVal ComputerName As String, ByVal DomainName As String, ByRef DomainGuid As GUID, ByVal SiteName As String, ByVal Flags As DsGetDcNameFlags, ByRef DomainControllerInfo As LongPtr) As Long
Public Declare PtrSafe Function DsGetDcNameW Lib "netapi32" (ByVal ComputerName As LongPtr, ByVal DomainName As LongPtr, ByRef DomainGuid As GUID, ByVal SiteName As LongPtr, ByVal Flags As DsGetDcNameFlags, ByRef DomainControllerInfo As LongPtr) As Long
Public DeclareWide PtrSafe Function DsGetDcName Lib "netapi32" Alias "DsGetDcNameW" (ByVal ComputerName As String, ByVal DomainName As String, ByRef DomainGuid As GUID, ByVal SiteName As String, ByVal Flags As DsGetDcNameFlags, ByRef DomainControllerInfo As LongPtr) As Long
Public Declare PtrSafe Function DsGetSiteNameA Lib "netapi32" (ByVal ComputerName As String, ByRef SiteName As LongPtr) As Long
Public Declare PtrSafe Function DsGetSiteNameW Lib "netapi32" (ByVal ComputerName As LongPtr, ByRef SiteName As LongPtr) As Long
Public DeclareWide PtrSafe Function DsGetSiteName Lib "netapi32" Alias "DsGetSiteNameW" (ByVal ComputerName As String, ByRef SiteName As LongPtr) As Long
Public Declare PtrSafe Function DsValidateSubnetNameA Lib "netapi32" (ByVal SubnetName As String) As Long
Public Declare PtrSafe Function DsValidateSubnetNameW Lib "netapi32" (ByVal SubnetName As LongPtr) As Long
Public DeclareWide PtrSafe Function DsValidateSubnetName Lib "netapi32" Alias "DsValidateSubnetNameW" (ByVal SubnetName As String) As Long
Public Declare PtrSafe Function DsAddressToSiteNamesA Lib "netapi32" (ByVal ComputerName As String, ByVal EntryCount As Long, ByRef SocketAddresses As SOCKET_ADDRESS, ByRef SiteNames As LongPtr) As Long
Public Declare PtrSafe Function DsAddressToSiteNamesW Lib "netapi32" (ByVal ComputerName As LongPtr, ByVal EntryCount As Long, ByRef SocketAddresses As SOCKET_ADDRESS, ByRef SiteNames As LongPtr) As Long
Public DeclareWide PtrSafe Function DsAddressToSiteNames Lib "netapi32" Alias "DsAddressToSiteNamesW" (ByVal ComputerName As String, ByVal EntryCount As Long, ByRef SocketAddresses As SOCKET_ADDRESS, ByRef SiteNames As LongPtr) As Long
Public Declare PtrSafe Function DsAddressToSiteNamesExA Lib "netapi32" (ByVal ComputerName As String, ByVal EntryCount As Long, ByRef SocketAddresses As SOCKET_ADDRESS, ByRef SiteNames As LongPtr, ByRef SubnetNames As LongPtr) As Long
Public Declare PtrSafe Function DsAddressToSiteNamesExW Lib "netapi32" (ByVal ComputerName As LongPtr, ByVal EntryCount As Long, ByRef SocketAddresses As SOCKET_ADDRESS, ByRef SiteNames As LongPtr, ByRef SubnetNames As LongPtr) As Long
Public DeclareWide PtrSafe Function DsAddressToSiteNamesEx Lib "netapi32" Alias "DsAddressToSiteNamesExW" (ByVal ComputerName As String, ByVal EntryCount As Long, ByRef SocketAddresses As SOCKET_ADDRESS, ByRef SiteNames As LongPtr, ByRef SubnetNames As LongPtr) As Long

Public Enum DSDomainTrustFlags
    DS_DOMAIN_IN_FOREST = &H0001  ' Domain is a member of the forest
    DS_DOMAIN_DIRECT_OUTBOUND = &H0002  ' Domain is directly trusted
    DS_DOMAIN_TREE_ROOT = &H0004  ' Domain is root of a tree in the forest
    DS_DOMAIN_PRIMARY = &H0008  ' Domain is the primary domain of queried server
    DS_DOMAIN_NATIVE_MODE = &H0010  ' Primary domain is running in native mode
    DS_DOMAIN_DIRECT_INBOUND = &H0020  ' Domain is directly trusting
    DS_DOMAIN_VALID_FLAGS = (DS_DOMAIN_IN_FOREST Or DS_DOMAIN_DIRECT_OUTBOUND Or DS_DOMAIN_TREE_ROOT Or DS_DOMAIN_PRIMARY Or DS_DOMAIN_NATIVE_MODE Or DS_DOMAIN_DIRECT_INBOUND)
End Enum

Public Type DS_DOMAIN_TRUSTSW
    ' Name of the trusted domain.
    NetbiosDomainName As LongPtr
    DnsDomainName As LongPtr
    ' Flags defining attributes of the trust.
    Flags As DSDomainTrustFlags
    ' Index to the domain that is the parent of this domain.
    '  Only defined if NETLOGON_DOMAIN_IN_FOREST is set and
    '      NETLOGON_DOMAIN_TREE_ROOT is not set.
    ParentIndex As Long
    ' The trust type and attributes of this trust.
    ' If NETLOGON_DOMAIN_DIRECTLY_TRUSTED is not set,
    '  these value are infered.
    TrustType As LsaTrustType
    TrustAttributes As LsaTrustAttributes
    ' The SID of the trusted domain.
    ' If NETLOGON_DOMAIN_DIRECTLY_TRUSTED is not set,
    '  this value will be NULL.
    DomainSid As LongPtr 'PSID
    ' The GUID of the trusted domain.
    DomainGuid As UUID
End Type
Public Type DS_DOMAIN_TRUSTSA
    ' Name of the trusted domain.
    NetbiosDomainName As String
    DnsDomainName As String
    ' Flags defining attributes of the trust.
    Flags As DSDomainTrustFlags
    ' Index to the domain that is the parent of this domain.
    '  Only defined if NETLOGON_DOMAIN_IN_FOREST is set and
    '      NETLOGON_DOMAIN_TREE_ROOT is not set.
    ParentIndex As Long
    ' The trust type and attributes of this trust.
    ' If NETLOGON_DOMAIN_DIRECTLY_TRUSTED is not set,
    '  these value are infered.
    TrustType As LsaTrustType
    TrustAttributes As LsaTrustAttributes
    ' The SID of the trusted domain.
    ' If NETLOGON_DOMAIN_DIRECTLY_TRUSTED is not set,
    '  this value will be NULL.
    DomainSid As LongPtr 'PSID
    ' The GUID of the trusted domain.
    DomainGuid As UUID
End Type
'Alias DS_DOMAIN_TRUSTS As DS_DOMAIN_TRUSTSW
Public Type DS_DOMAIN_TRUSTS
    ' Name of the trusted domain.
    NetbiosDomainName As LongPtr
    DnsDomainName As LongPtr
    ' Flags defining attributes of the trust.
    Flags As DSDomainTrustFlags
    ' Index to the domain that is the parent of this domain.
    '  Only defined if NETLOGON_DOMAIN_IN_FOREST is set and
    '      NETLOGON_DOMAIN_TREE_ROOT is not set.
    ParentIndex As Long
    ' The trust type and attributes of this trust.
    ' If NETLOGON_DOMAIN_DIRECTLY_TRUSTED is not set,
    '  these value are infered.
    TrustType As LsaTrustType
    TrustAttributes As LsaTrustAttributes
    ' The SID of the trusted domain.
    ' If NETLOGON_DOMAIN_DIRECTLY_TRUSTED is not set,
    '  this value will be NULL.
    DomainSid As LongPtr 'PSID
    ' The GUID of the trusted domain.
    DomainGuid As UUID
End Type

Public Declare PtrSafe Function DsEnumerateDomainTrustsA Lib "netapi32" (ByVal ServerName As String, ByVal Flags As DSDomainTrustFlags, ByRef Domains As LongPtr, ByRef DomainCount As Long) As Long
Public Declare PtrSafe Function DsEnumerateDomainTrustsW Lib "netapi32" (ByVal ServerName As LongPtr, ByVal Flags As DSDomainTrustFlags, ByRef Domains As LongPtr, ByRef DomainCount As Long) As Long
Public DeclareWide PtrSafe Function DsEnumerateDomainTrusts Lib "netapi32" Alias "DsEnumerateDomainTrustsW" (ByVal ServerName As String, ByVal Flags As DSDomainTrustFlags, ByRef Domains As LongPtr, ByRef DomainCount As Long) As Long
Public Enum DSForestTrustFlags
    DS_GFTI_UPDATE_TDO = &H1  ' Update TDO with information returned
    DS_GFTI_VALID_FLAGS = &H1  ' All valid flags to DsGetForestTrustInformation
End Enum
Public Declare PtrSafe Function DsGetForestTrustInformationW Lib "netapi32" (ByVal ServerName As LongPtr, ByVal TrustedDomainName As LongPtr, ByVal Flags As DSForestTrustFlags, ByRef ForestTrustInfo As LongPtr) As Long
Public DeclareWide PtrSafe Function DsGetForestTrustInformation Lib "netapi32" Alias "DsGetForestTrustInformationW" (ByVal ServerName As String, ByVal TrustedDomainName As String, ByVal Flags As DSForestTrustFlags, ByRef ForestTrustInfo As LongPtr) As Long
Public Declare PtrSafe Function DsMergeForestTrustInformationW Lib "netapi32" (ByVal DomainName As LongPtr, ByRef NewForestTrustInfo As LSA_FOREST_TRUST_INFORMATION, ByRef OldForestTrustInfo As LSA_FOREST_TRUST_INFORMATION, ByRef MergedForestTrustInfo As LongPtr) As Long
Public DeclareWide PtrSafe Function DsMergeForestTrustInformation Lib "netapi32" Alias "DsMergeForestTrustInformationW" (ByVal DomainName As String, ByRef NewForestTrustInfo As LSA_FOREST_TRUST_INFORMATION, ByRef OldForestTrustInfo As LSA_FOREST_TRUST_INFORMATION, ByRef MergedForestTrustInfo As LongPtr) As Long

Public Enum DSGetDcFlags
    DS_ONLY_DO_SITE_NAME = &H01  ' Non-site specific names should be avoided.
    DS_NOTIFY_AFTER_SITE_RECORDS = &H02  ' Return ERROR_FILEMARK_DETECTED after all
'   site specific records have been processed.
    DS_OPEN_VALID_OPTION_FLAGS = (DS_ONLY_DO_SITE_NAME Or DS_NOTIFY_AFTER_SITE_RECORDS)
'  Valid DcFlags for DsGetDcOpen
    DS_OPEN_VALID_FLAGS = (DS_FORCE_REDISCOVERY Or DS_ONLY_LDAP_NEEDED Or DS_KDC_REQUIRED Or DS_PDC_REQUIRED Or DS_GC_SERVER_REQUIRED Or DS_WRITABLE_REQUIRED)
End Enum

Public Declare PtrSafe Function DsGetDcSiteCoverageA Lib "netapi32" (ByVal ServerName As String, ByRef EntryCount As Long, ByRef SiteNames As LongPtr) As Long
Public Declare PtrSafe Function DsGetDcSiteCoverageW Lib "netapi32" (ByVal ServerName As LongPtr, ByRef EntryCount As Long, ByRef SiteNames As LongPtr) As Long
Public DeclareWide PtrSafe Function DsGetDcSiteCoverage Lib "netapi32" Alias "DsGetDcSiteCoverageW" (ByVal ServerName As String, ByRef EntryCount As Long, ByRef SiteNames As LongPtr) As Long
Public Declare PtrSafe Function DsDeregisterDnsHostRecordsA Lib "netapi32" (ByVal ServerName As String, ByVal DnsDomainName As String, ByRef DomainGuid As GUID, ByRef DsaGuid As GUID, ByVal DnsHostName As String) As Long
Public Declare PtrSafe Function DsDeregisterDnsHostRecordsW Lib "netapi32" (ByVal ServerName As LongPtr, ByVal DnsDomainName As LongPtr, ByRef DomainGuid As GUID, ByRef DsaGuid As GUID, ByVal DnsHostName As LongPtr) As Long
Public DeclareWide PtrSafe Function DsDeregisterDnsHostRecords Lib "netapi32" Alias "DsDeregisterDnsHostRecordsW" (ByVal ServerName As String, ByVal DnsDomainName As String, ByRef DomainGuid As GUID, ByRef DsaGuid As GUID, ByVal DnsHostName As String) As Long
Public Declare PtrSafe Function DsGetDcOpenA Lib "netapi32" (ByVal DnsName As String, ByVal OptionFlags As DSGetDcFlags, ByVal SiteName As String, ByRef DomainGuid As GUID, ByVal DnsForestName As String, ByVal DcFlags As DsGetDcNameFlags, ByRef RetGetDcContext As LongPtr) As Long
Public Declare PtrSafe Function DsGetDcOpenW Lib "netapi32" (ByVal DnsName As LongPtr, ByVal OptionFlags As DSGetDcFlags, ByVal SiteName As LongPtr, ByRef DomainGuid As GUID, ByVal DnsForestName As LongPtr, ByVal DcFlags As DsGetDcNameFlags, ByRef RetGetDcContext As LongPtr) As Long
Public DeclareWide PtrSafe Function DsGetDcOpen Lib "netapi32" Alias "DsGetDcOpenW" (ByVal DnsName As String, ByVal OptionFlags As DSGetDcFlags, ByVal SiteName As String, ByRef DomainGuid As GUID, ByVal DnsForestName As String, ByVal DcFlags As DsGetDcNameFlags, ByRef RetGetDcContext As LongPtr) As Long
Public Declare PtrSafe Function DsGetDcNextA Lib "netapi32" (ByVal GetDcContextHandle As LongPtr, ByRef SockAddressCount As Long, ByRef SockAddresses As LongPtr, ByRef DnsHostName As LongPtr) As Long
Public Declare PtrSafe Function DsGetDcNextW Lib "netapi32" (ByVal GetDcContextHandle As LongPtr, ByRef SockAddressCount As Long, ByRef SockAddresses As LongPtr, ByRef DnsHostName As LongPtr) As Long
Public DeclareWide PtrSafe Function DsGetDcNext Lib "netapi32" Alias "DsGetDcNextW" (ByVal GetDcContextHandle As LongPtr, ByRef SockAddressCount As Long, ByRef SockAddresses As LongPtr, ByRef DnsHostName As LongPtr) As Long
Public Declare PtrSafe Sub DsGetDcCloseW Lib "netapi32" (ByVal GetDcContextHandle As LongPtr)
Public Declare PtrSafe Sub DsGetDcClose Lib "netapi32" Alias "DsGetDcCloseW" (ByVal GetDcContextHandle As LongPtr)


 

End Module