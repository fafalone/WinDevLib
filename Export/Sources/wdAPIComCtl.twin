'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************


#If WINDEVLIB_LITE = 0 Then
#If WINDEVLIB_COMCTL_LIB_DEFINED = 0 Then
/*
As part of expanding the API surface by popular request, I'm merging in tbComCtlLib. If you want to continue to use
that separately, the constant above will exclude this entire module.
*/
#Region "Interfaces"
    
[InterfaceId("5852A2C3-6530-11D1-B6A3-0000F8757BF9")]
[OleAutomation(False)]
Interface IPrintDialogCallback Extends stdole.IUnknown
    Sub InitDone()
    Sub SelectionChanged()
    Sub HandleMessage(ByVal hDlg As LongPtr, ByVal uMsg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr, plResult As LongPtr)
End Interface
[InterfaceId("509AAEDA-5639-11D1-B6A1-0000F8757BF9")]
[OleAutomation(False)]
Interface IPrintDialogServices Extends stdole.IUnknown
    Sub GetCurrentDevMode(pDevMode As DEVMODEW, pcbSize As Long)
    Sub GetCurrentPrinterName(pPrinterName As LongPtr, pcchSize As Long)
    Sub GetCurrentPortName(pPortName As LongPtr, pcchSize As Long)
End Interface

[InterfaceId("000214E9-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IShellPropSheetExt Extends stdole.IUnknown
    Sub AddPages(ByVal pfnAddPage As LongPtr, ByVal lParam As LongPtr)
    Sub ReplacePage(ByVal uPageId As Long, ByVal lpfnReplaceWith As LongPtr, ByVal lParam As LongPtr)
End Interface


[InterfaceId("96a23e16-a1bc-11d1-b084-00c04fc33aa5")]
[OleAutomation(False)]
Interface ILVRange Extends stdole.IUnknown
    Sub IncludeRange(ByVal iBegin As Long, ByVal iEnd As Long)
    Sub ExcludeRange(ByVal iBegin As Long, ByVal iEnd As Long)
    Sub InvertRange(ByVal iBegin As Long, ByVal iEnd As Long)
    Sub InsertItem(ByVal iItem As Long)
    Sub RemoveItem(ByVal iItem As Long)
    Sub Clear()
    Sub IsSelected(ByVal iItem As Long)
    Sub IsEmpty()
    Sub NextSelected(ByVal iItem As Long, piItem As Long)
    Sub NextUnSelected(ByVal iItem As Long, piItem As Long)
    Sub CountIncluded(pcIncluded As Long)
End Interface

[InterfaceId("44C09D56-8D3B-419D-A462-7B956B105B47")]
[OleAutomation(False)]
Interface IOwnerDataCallback Extends stdole.IUnknown
    Sub GetItemPosition(ByVal iItem As Long, pt As POINT)
    Sub SetItemPosition(ByVal iItem As Long, pt As POINT)
    Sub GetItemInGroup(ByVal groupIndex As Long, ByVal groupWideItemIndex As Long, pTotalItemIndex As Long)
    Sub GetItemGroup(ByVal iItem As Long, ByVal occurenceIndex As Long, pGroupIndex As Long)
    Sub GetItemGroupCount(ByVal iItem As Long, pOccurenceCount As Long)
    Sub OnCacheHint(ByVal lviFirst As LongLong, ByVal lviiLast As LongLong) 'Byval LVITEMINDEX
End Interface

[InterfaceId("6E71A510-732A-4557-9596-A827E36DAF8F")]
[OleAutomation(False)]
Interface IPropertyControlBase Extends stdole.IUnknown
    Sub Initialize(ByVal pUnk As stdole.IUnknown, ByVal pct As Long)
    Sub GetSize(ByVal prt As Long, ByVal hDC As LongPtr, siz1 As SIZE, siz2 As SIZE)
    Sub SetWindowTheme(ByVal lpsz1 As LongPtr, ByVal lpsz2 As LongPtr)
    Sub SetFont(ByVal phf As LongPtr)
    Sub SetTextColor(ByVal clrText As Long)
    Sub GetFlags(pdwFlags As Long)
    Sub SetFlags(ByVal dwMask As Long, ByVal dwFlags As Long)
    Sub AdjustWindowRectPCB(ByVal hWnd As LongPtr, prc1 As RECT, prc2 As RECT, ByVal unk As Long)
    Sub SetValue(ByVal pUnk As stdole.IUnknown)
    Sub InvokeDefaultAction()
    Sub Destroy()
    Sub SetFormatFlags(ByVal dwFlags As Long)
    Sub GetFormatFlags(pdwFlags As Long)
End Interface

[InterfaceId("5E82A4DD-9561-476A-8634-1BEBACBA4A38")]
[OleAutomation(False)]
Interface IPropertyControl Extends IPropertyControlBase
    Sub GetValue(riid As UUID, ppv As Any)
    Sub Create(ByVal hWnd As LongPtr, prc As RECT, prc2 As RECT, ByVal unk As Long)
    Sub SetPosition(prc As RECT, prc2 As RECT)
    Sub IsModified(bModified As Long)
    Sub SetModified(ByVal bModified As Long)
    Sub ValidationFailed(ByVal lpsz As LongPtr)
    Sub GetState(pState As Long)
End Interface

[InterfaceId("E6DFF6FD-BCD5-4162-9C65-A3B18C616FDB")]
[OleAutomation(False)]
Interface IDrawPropertyControl Extends IPropertyControlBase
    Sub GetDrawFlags(pdwFlags As Long)
    Sub WindowlessDraw(ByVal hDC As LongPtr, pRect As RECT, ByVal a As Long)
    Sub HasVisibleContent()
    Sub GetDisplayText(lpText As LongPtr)
    Sub GetTooltipInfo(ByVal hDC As LongPtr, sz As SIZE, unk As Long)
End Interface

[InterfaceId("7AF7F355-1066-4E17-B1F2-19FE2F099CD2")]
[OleAutomation(False)]
Interface IPropertyValue Extends stdole.IUnknown
    Sub SetPropertyKey(pk As PROPERTYKEY)
    Sub GetPropertyKey(bk As PROPERTYKEY)
    Sub GetValue(pprop As Variant)
    Sub InitValue(ByVal pprop As Variant)
End Interface

[InterfaceId("11A66240-5489-42C2-AEBF-286FC831524C")]
[OleAutomation(False)]
Interface ISubItemCallback Extends stdole.IUnknown
    Sub GetSubItemTitle(ByVal subitemIndex As Long, ByVal lpszBuffer As LongPtr, ByVal BufferSize As Long)
    Sub GetSubItemControl(ByVal itemIndex As Long, ByVal subItemIndex As Long, requiredInterface As UUID, ppObject As Any)
    Sub BeginSubItemEdit(ByVal itemIndex As Long, ByVal subItemIndex As Long, ByVal mode As Long, requiredInterface As UUID, ppObject As Any)
    Sub EndSubItemEdit(ByVal itemIndex As Long, ByVal subItemIndex As Long, ByVal mode As Long, ByVal ppc As IPropertyControl)
    Sub BeginGroupEdit(ByVal groupIndex As Long, requiredInterface As UUID, ppObject As Any)
    Sub EndGroupEdit(ByVal groupIndex As Long, ByVal mode As Long, ByVal pPropertyControl As IPropertyControl)
    Sub OnInvokeVerb(ByVal itemIndex As Long, ByVal pVerb As LongPtr)
End Interface

[Description("This is the IListView interface for Windows 7 and newer. For Windows vista, use IListViewVista.")]
[InterfaceId("E5B16AF2-3990-4681-A609-1F060CD14269")]
[OleAutomation(False)]
Interface IListView Extends IOleWindow 'Windows 7+ version
    Sub GetImageList(ByVal lIndex As Long, himl As LongPtr)
    Sub SetImageList(ByVal lIndex As Long, ByVal himl As LongPtr, phimlOld As LongPtr)
    Sub GetBackgroundColor(clrBk As Long)
    Sub SetBackgroundColor(ByVal clrBk As Long)
    Sub GetTextColor(clrText As Long)
    Sub SetTextColor(ByVal clrText As Long)
    Sub GetTextBackgroundColor(clrTextBk As Long)
    Sub SetTextBackgroundColor(ByVal clrTextBk As Long)
    Sub GetHotLightColor(clrHot As Long)
    Sub SetHotLightColor(ByVal clrHot As Long)
    Sub GetItemCount(nItems As Long)
    Sub SetItemCount(ByVal nItems As Long, ByVal unk As Long)
    Sub GetItem(ByVal ptLVI As LongPtr)
    Sub SetItem(pLVI As LVITEMW)
    Sub GetItemState(ByVal iItem As Long, ByVal iSubItem As Long, ByVal mask As LVITEM_state, pState As LVITEM_state)
    Sub SetItemState(ByVal iItem As Long, ByVal iSubItem As Long, ByVal mask As LVITEM_state, ByVal pState As LVITEM_state)
    Sub GetItemText(ByVal iItem As Long, ByVal iSubItem As Long, ByVal pBuffer As LongPtr, ByVal nBufferSize As Long)
    Sub SetItemText(ByVal iItem As Long, ByVal iSubItem As Long, ByVal pszText As LongPtr)
    Sub GetBackgroundImage(lvbk As LVBKIMAGEW)
    Sub SetBackgroundImage(ByVal plvnk As LongPtr)
    Sub GetFocusedColumn(iCol As Long)
    Sub SetSelectionFlags(ByVal mask As Long, ByVal flags As Long)
    Sub GetSelectedColumn(iCol As Long)
    Sub SetSelectedColumn(ByVal iCol As Long)
    Sub GetView(iView As Long)
    Sub SetView(ByVal iView As Long)
    Sub InsertItem(ByVal pItem As LongPtr, index As Long)
    Sub DeleteItem(ByVal iIndex As Long)
    Sub DeleteAllItems()
    Sub UpdateItem(ByVal iItem As Long)
    Sub GetItemRect(ByVal lvii As LongLong, ByVal nRectType As Long, prc As RECT)
    Sub GetSubItemRect(ByVal lvii As LongLong, ByVal iSubItem As Long, ByVal nRectType As Long, prc As RECT)
    Sub HitTestSubItem(pHitTestData As LVHITTESTINFO)
    Sub GetIncrSearchString(ByVal pBuffer As LongPtr, ByVal BufferSize As Long, pCopiedChars As Long)
    Sub GetItemSpacing(ByVal bSmallIconView As Long, pHorz As Long, pVert As Long)
    Sub SetIconSpacing(ByVal nHoriz As Long, ByVal nVert As Long, pHoriz As Long, pVert As Long)
    Sub GetNextItem(ByVal lvii As LongLong, ByVal lviiGroup As Long, ByVal flags As Long, plviiNext As LVITEMINDEX)
    Sub FindItem(ByVal lvii As LongLong, lvfi As LVFINDINFOW, lviiFound As LVITEMINDEX)
    Sub GetSelectionMark(lvii As LVITEMINDEX)
    Sub SetSelectionMark(ByVal lvii As LongLong, lviiPrev As LVITEMINDEX)
    Sub GetItemPosition(ByVal lvii As LongLong, pt As POINT)
    Sub SetItemPosition(ByVal iItem As Long, pt As POINT)
    Sub ScrollView(ByVal hDist As Long, ByVal vDist As Long)
    Sub EnsureItemVisible(ByVal lvii As LongLong, ByVal fPartialOk As Long)
    Sub EnsureSubItemVisible(ByVal lvii As LongLong, ByVal iSubItem As Long)
    Sub EditSubitem(ByVal lvii As LongLong, ByVal iSubItem As Long)
    Sub RedrawItems(ByVal iFirst As Long, ByVal iLast As Long)
    Sub ArrangeItems(ByVal mode As Long)
    Sub RecomputeItems(ByVal unk As Long)
    Sub GetEditControl(hEdit As LongPtr)
    Sub EditLabel(ByVal lvii As LongLong, ByVal initialEditText As LongPtr, phwndEdit As LongPtr)
    Sub EditGroupLabel(ByVal iGroup As Long)
    Sub CancelLabelEdit()
    Sub GetEditItem(lvii As LVITEMINDEX, iSubItem As Long)
    Sub HitTest(lvhti As LVHITTESTINFO)
    Sub GetStringWidth(ByVal pString As LongPtr, pWidth As Long)
    Sub GetColumn(ByVal iCol As Long, pCol As LVCOLUMNW)
    Sub SetColumn(ByVal iCol As Long, pCol As LVCOLUMNW)
    Sub GetColumnOrderArray(ByVal iNumOfColumns As Long, pCol As Long)
    Sub SetColumnOrderArray(ByVal iNumOfColumns As Long, pCol As Long)
    Sub GetHeaderControl(hHeader As LongPtr)
    Sub InsertColumn(ByVal iInsertAt As Long, lvcol As LVCOLUMNW)
    Sub DeleteColumn(ByVal iIndex As Long)
    Sub CreateDragImage(ByVal iItem As Long, ptUpperLeft As POINT, phiml As LongPtr)
    Sub GetViewRect(rc As RECT)
    Sub GetClientRect(ByVal unk As Long, rc As RECT)
    Sub GetColumnWidth(ByVal iCol As Long, pWidth As Long)
    Sub SetColumnWidth(ByVal iCol As Long, ByVal nWidth As Long)
    Sub GetCallbackMask(pMask As Long)
    Sub SetCallbackMask(ByVal mask As Long)
    Sub GetItemIndex(iIndex As Long)
    Sub GetCountPerPage(pCount As Long)
    Sub GetOrigin(pt As POINT)
    Sub GetSelectedCount(pSelCount As Long)
    Sub SortItems(ByVal unk As Long, ByVal lParam As LongPtr, ByVal pfnCompare As LongPtr)
    Sub GetExtendedStyle(dwStyle As Long)
    Sub SetExtendedStyle(ByVal mask As Long, ByVal style As Long, dwOldStyle As Long)
    Sub GetHoverTime(pTime As Long)
    Sub SetHoverTime(ByVal time As Long, prevtime As Long)
    Sub GetTooltip(hTooltip As LongPtr)
    Sub SetToolTip(ByVal hTooltip As LongPtr, hOldTooltip As LongPtr)
    Sub GetHotItem(lvii As LVITEMINDEX)
    Sub SetHotItem(ByVal lvii As LongLong, oldlvii As LVITEMINDEX)
    Sub GetHotCursor(hCursor As LongPtr)
    Sub SetHotCursor(ByVal hCursor As LongPtr, hOldCursor As LongPtr)
    Sub ApproximateViewRect(ByVal nItemCount As Long, pWidth As Long, pHeight As Long)
    Sub SetRangeObject(ByVal unk As Long, ByVal plvRange As ILVRange)
    Sub GetWorkAreas(ByVal iNumOfWorkAreas As Long, rc As RECT)
    Sub SetWorkAreas(ByVal iNumOfWorkAreas As Long, rc As RECT)
    Sub GetWorkAreaCount(pCount As Long)
    Sub ResetEmptyText()
    Sub EnableGroupView(ByVal fEnable As Long)
    Sub IsGroupViewEnabled(pEnabled As Long)
    Sub SortGroups(ByVal pfnGroupCompare As LongPtr, lParam As Any)
    Sub GetGroupInfo(ByVal unk As Long, ByVal iGroupID As Long, lvg As LVGROUP)
    Sub SetGroupInfo(ByVal unk As Long, ByVal iGroupID As Long, lvg As LVGROUP)
    Sub GetGroupRect(ByVal unk As Long, ByVal iGroupID As Long, ByVal nRectType As Long, rc As RECT)
    Sub GetGroupState(ByVal iGroupID As Long, ByVal mask As LVGROUPSTATE, state As LVGROUPSTATE)
    Sub HasGroup(ByVal iGroupID As Long, pHasGroup As Long)
    Sub InsertGroup(ByVal insertAt As Long, lvg As LVGROUP)
    Sub RemoveGroup(ByVal iGroupID As Long)
    Sub InsertGroupSorted(lvigs As LVINSERTGROUPSORTED, pGroupID As Long)
    Sub GetGroupMetrics(lvgm As LVGROUPMETRICS)
    Sub SetGroupMetrics(lvgm As LVGROUPMETRICS)
    Sub RemoveAllGroups()
    Sub GetFocusedGroup(iGroupID As Long)
    Sub GetGroupCount(nCount As Long)
    Sub SetOwnerDataCallback(ByVal pCallback As IOwnerDataCallback)
    Sub GetTileViewInfo(pInfo As LVTILEVIEWINFO)
    Sub SetTileViewInfo(pInfo As LVTILEVIEWINFO)
    Sub GetTileInfo(pInfo As LVTILEINFO)
    Sub SetTileInfo(pInfo As LVTILEINFO)
    Sub GetInsertMark(pInsertMark As LVINSERTMARK)
    Sub SetInsertMark(pInsertMark As LVINSERTMARK)
    Sub GetInsertMarkRect(rc As RECT)
    Sub GetInsertMarkColor(pClrMark As Long)
    Sub SetInsertMarkColor(ByVal clrMark As Long, pclrMarkOld As Long)
    Sub HitTestInsertMark(pt As POINT, pMark As LVINSERTMARK)
    Sub SetInfoTip(pInfoTip As LVSETINFOTIP)
    Sub GetOutlineColor(pClrOutline As Long)
    Sub SetOutlineColor(ByVal clrOutline As Long, pclrOutlineOld As Long)
    Sub GetFrozenItem(pItem As Long)
    Sub SetFrozenItem(ByVal iItemSometimes As Long, ByVal iItemOtherTimes As Long)
    Sub GetFrozenSlot(pSlotRect As RECT)
    Sub SetFrozenSlot(ByVal fFreeze As Long, ptFrozen As POINT)
    Sub GetViewMargin(rcMargin As RECT)
    Sub SetViewMargin(rcMargin As RECT)
    Sub SetKeyboardSelected(ByVal lvii As LongLong)
    Sub MapIndexToId(ByVal iItem As Long, pId As Long)
    Sub MapIdToIndex(ByVal iId As Long, iIndex As Long)
    Sub IsItemVisible(ByVal lvii As LongLong, pVisible As Long)
    Sub EnableAlphaShadow(ByVal fEnable As Long)
    Sub GetGroupSubsetCount(pRows As Long)
    Sub SetGroupSubsetCount(ByVal nRows As Long)
    Sub GetVisibleSlotCount(pCount As Long)
    Sub GetColumnMarginRect(rc As RECT)
    Sub SetSubItemCallback(ByVal pCallback As ISubItemCallback)
    Sub GetVisibleItemRange(pFirst As LVITEMINDEX, pLast As LVITEMINDEX)
    Sub SetTypeAheadFlags(ByVal mask As Long, ByVal flags As Long)
End Interface
[Description("This is the IListView interface for Windows Vista **only**. For Windows 7 and newer, use IListView. XP or earlier does not implement any equivalent.")]
[InterfaceId("2FFE2979-5928-4386-9CDB-8E1F15B72FB4")]
[OleAutomation(False)]
Interface IListViewVista Extends IOleWindow 'Vista-only version
    Sub GetImageList(ByVal lIndex As Long, himl As LongPtr)
    Sub SetImageList(ByVal lIndex As Long, ByVal himl As LongPtr, phimlOld As LongPtr)
    Sub GetBackgroundColor(clrBk As Long)
    Sub SetBackgroundColor(ByVal clrBk As Long)
    Sub GetTextColor(clrText As Long)
    Sub SetTextColor(ByVal clrText As Long)
    Sub GetTextBackgroundColor(clrTextBk As Long)
    Sub SetTextBackgroundColor(ByVal clrTextBk As Long)
    Sub GetHotLightColor(clrHot As Long)
    Sub SetHotLightColor(ByVal clrHot As Long)
    Sub GetItemCount(nItems As Long)
    Sub SetItemCount(ByVal nItems As Long, ByVal unk As Long)
    Sub GetItem(ByVal ptLVI As LongPtr)
    Sub SetItem(pLVI As LVITEMW)
    Sub GetItemState(ByVal iItem As Long, ByVal iSubItem As Long, ByVal mask As LVITEM_state, pState As LVITEM_state)
    Sub SetItemState(ByVal iItem As Long, ByVal iSubItem As Long, ByVal mask As LVITEM_state, ByVal pState As LVITEM_state)
    Sub GetItemText(ByVal iItem As Long, ByVal iSubItem As Long, ByVal pBuffer As LongPtr, ByVal nBufferSize As Long)
    Sub SetItemText(ByVal iItem As Long, ByVal iSubItem As Long, ByVal pszText As LongPtr)
    Sub GetBackgroundImage(lvbk As LVBKIMAGEW)
    Sub SetBackgroundImage(ByVal plvnk As LongPtr)
    Sub GetFocusedColumn(iCol As Long)
    Sub SetSelectionFlags(ByVal mask As Long, ByVal flags As Long)
    Sub GetSelectedColumn(iCol As Long)
    Sub SetSelectedColumn(ByVal iCol As Long)
    Sub GetView(iView As Long)
    Sub SetView(ByVal iView As Long)
    Sub InsertItem(ByVal pItem As LongPtr, index As Long)
    Sub DeleteItem(ByVal iIndex As Long)
    Sub DeleteAllItems()
    Sub UpdateItem(ByVal iItem As Long)
    Sub GetItemRect(ByVal lvii As LongLong, ByVal nRectType As Long, prc As RECT)
    Sub GetSubItemRect(ByVal lvii As LongLong, ByVal iSubItem As Long, ByVal nRectType As Long, prc As RECT)
    Sub HitTestSubItem(pHitTestData As LVHITTESTINFO)
    Sub GetIncrSearchString(ByVal pBuffer As LongPtr, ByVal BufferSize As Long, pCopiedChars As Long)
    Sub GetItemSpacing(ByVal bSmallIconView As Long, pHorz As Long, pVert As Long)
    Sub SetIconSpacing(ByVal nHoriz As Long, ByVal nVert As Long, pHoriz As Long, pVert As Long)
    Sub GetNextItem(ByVal lvii As LongLong, ByVal lviiGroup As Long, ByVal flags As Long, plviiNext As LVITEMINDEX)
    Sub FindItem(ByVal lvii As LongLong, lvfi As LVFINDINFOW, lviiFound As LVITEMINDEX)
    Sub GetSelectionMark(lvii As LVITEMINDEX)
    Sub SetSelectionMark(ByVal lvii As LongLong, lviiPrev As LVITEMINDEX)
    Sub GetItemPosition(ByVal lvii As LongLong, pt As POINT)
    Sub SetItemPosition(ByVal iItem As Long, pt As POINT)
    Sub ScrollView(ByVal hDist As Long, ByVal vDist As Long)
    Sub EnsureItemVisible(ByVal lvii As LongLong, ByVal fPartialOk As Long)
    Sub EnsureSubItemVisible(ByVal lvii As LongLong, ByVal iSubItem As Long)
    Sub EditSubitem(ByVal lvii As LongLong, ByVal iSubItem As Long)
    Sub RedrawItems(ByVal iFirst As Long, ByVal iLast As Long)
    Sub ArrangeItems(ByVal mode As Long)
    Sub RecomputeItems(ByVal unk As Long)
    Sub GetEditControl(hEdit As LongPtr)
    Sub EditLabel(ByVal lvii As LongLong, ByVal initialEditText As LongPtr, phwndEdit As LongPtr)
    Sub EditGroupLabel(ByVal iGroup As Long)
    Sub CancelLabelEdit()
    Sub GetEditItem(lvii As LVITEMINDEX, iSubItem As Long)
    Sub HitTest(lvhti As LVHITTESTINFO)
    Sub GetStringWidth(ByVal pString As LongPtr, pWidth As Long)
    Sub GetColumn(ByVal iCol As Long, pCol As LVCOLUMNW)
    Sub SetColumn(ByVal iCol As Long, pCol As LVCOLUMNW)
    Sub GetColumnOrderArray(ByVal iNumOfColumns As Long, pCol As Long)
    Sub SetColumnOrderArray(ByVal iNumOfColumns As Long, pCol As Long)
    Sub GetHeaderControl(hHeader As LongPtr)
    Sub InsertColumn(ByVal iInsertAt As Long, lvcol As LVCOLUMNW)
    Sub DeleteColumn(ByVal iIndex As Long)
    Sub CreateDragImage(ByVal iItem As Long, ptUpperLeft As POINT, phiml As LongPtr)
    Sub GetViewRect(rc As RECT)
    Sub GetClientRect(ByVal unk As Long, rc As RECT)
    Sub GetColumnWidth(ByVal iCol As Long, pWidth As Long)
    Sub SetColumnWidth(ByVal iCol As Long, ByVal nWidth As Long)
    Sub GetCallbackMask(pMask As Long)
    Sub SetCallbackMask(ByVal mask As Long)
    Sub GetItemIndex(iIndex As Long)
    Sub GetCountPerPage(pCount As Long)
    Sub GetOrigin(pt As POINT)
    Sub GetSelectedCount(pSelCount As Long)
    Sub SortItems(ByVal unk As Long, ByVal lParam As LongPtr, ByVal pfnCompare As LongPtr)
    Sub GetExtendedStyle(dwStyle As Long)
    Sub SetExtendedStyle(ByVal mask As Long, ByVal style As Long, dwOldStyle As Long)
    Sub GetHoverTime(pTime As Long)
    Sub SetHoverTime(ByVal time As Long, prevtime As Long)
    Sub GetTooltip(hTooltip As LongPtr)
    Sub SetToolTip(ByVal hTooltip As LongPtr, hOldTooltip As LongPtr)
    Sub GetHotItem(lvii As LVITEMINDEX)
    Sub SetHotItem(ByVal lvii As LongLong, oldlvii As LVITEMINDEX)
    Sub GetHotCursor(hCursor As LongPtr)
    Sub SetHotCursor(ByVal hCursor As LongPtr, hOldCursor As LongPtr)
    Sub ApproximateViewRect(ByVal nItemCount As Long, pWidth As Long, pHeight As Long)
    Sub SetRangeObject(ByVal unk As Long, ByVal plvRange As ILVRange)
    Sub GetWorkAreas(ByVal iNumOfWorkAreas As Long, rc As RECT)
    Sub SetWorkAreas(ByVal iNumOfWorkAreas As Long, rc As RECT)
    Sub GetWorkAreaCount(pCount As Long)
    Sub ResetEmptyText()
    Sub EnableGroupView(ByVal fEnable As Long)
    Sub IsGroupViewEnabled(pEnabled As Long)
    Sub SortGroups(ByVal pfnGroupCompare As LongPtr, lParam As Any)
    Sub GetGroupInfo(ByVal unk As Long, ByVal iGroupID As Long, lvg As LVGROUP)
    Sub SetGroupInfo(ByVal unk As Long, ByVal iGroupID As Long, lvg As LVGROUP)
    Sub GetGroupRect(ByVal unk As Long, ByVal iGroupID As Long, ByVal nRectType As Long, rc As RECT)
    Sub GetGroupState(ByVal iGroupID As Long, ByVal mask As LVGROUPSTATE, state As LVGROUPSTATE)
    Sub HasGroup(ByVal iGroupID As Long, pHasGroup As Long)
    Sub InsertGroup(ByVal insertAt As Long, lvg As LVGROUP)
    Sub RemoveGroup(ByVal iGroupID As Long)
    Sub InsertGroupSorted(lvigs As LVINSERTGROUPSORTED, pGroupID As Long)
    Sub GetGroupMetrics(lvgm As LVGROUPMETRICS)
    Sub SetGroupMetrics(lvgm As LVGROUPMETRICS)
    Sub RemoveAllGroups()
    Sub GetFocusedGroup(iGroupID As Long)
    Sub GetGroupCount(nCount As Long)
    Sub SetOwnerDataCallback(ByVal pCallback As IOwnerDataCallback)
    Sub GetTileViewInfo(pInfo As LVTILEVIEWINFO)
    Sub SetTileViewInfo(pInfo As LVTILEVIEWINFO)
    Sub GetTileInfo(pInfo As LVTILEINFO)
    Sub SetTileInfo(pInfo As LVTILEINFO)
    Sub GetInsertMark(pInsertMark As LVINSERTMARK)
    Sub SetInsertMark(pInsertMark As LVINSERTMARK)
    Sub GetInsertMarkRect(rc As RECT)
    Sub GetInsertMarkColor(pClrMark As Long)
    Sub SetInsertMarkColor(ByVal clrMark As Long, pclrMarkOld As Long)
    Sub HitTestInsertMark(pt As POINT, pMark As LVINSERTMARK)
    Sub SetInfoTip(pInfoTip As LVSETINFOTIP)
    Sub GetOutlineColor(pClrOutline As Long)
    Sub SetOutlineColor(ByVal clrOutline As Long, pclrOutlineOld As Long)
    Sub GetFrozenItem(pItem As Long)
    Sub SetFrozenItem(ByVal iItemSometimes As Long, ByVal iItemOtherTimes As Long)
    Sub GetFrozenSlot(pSlotRect As RECT)
    Sub SetFrozenSlot(ByVal fFreeze As Long, ptFrozen As POINT)
    Sub GetViewMargin(rcMargin As RECT)
    Sub SetViewMargin(rcMargin As RECT)
    Sub SetKeyboardSelected(ByVal lvii As LongLong)
    Sub MapIndexToId(ByVal iItem As Long, pId As Long)
    Sub MapIdToIndex(ByVal iId As Long, iIndex As Long)
    Sub IsItemVisible(ByVal lvii As LongLong, pVisible As Long)
    Sub GetGroupSubsetCount(pRows As Long)
    Sub SetGroupSubsetCount(ByVal nRows As Long)
    Sub GetVisibleSlotCount(pCount As Long)
    Sub GetColumnMarginRect(rc As RECT)
    Sub SetSubItemCallback(ByVal pCallback As ISubItemCallback)
    Sub GetVisibleItemRange(pFirst As LVITEMINDEX, pLast As LVITEMINDEX)
    Sub SetTypeAheadFlags(ByVal mask As Long, ByVal flags As Long)
End Interface

[InterfaceId("88EB9442-913B-4AB4-A741-DD99DCB7558B")]
[OleAutomation(False)]
Interface IListViewFooterCallback Extends stdole.IUnknown
    Sub OnButtonClicked(ByVal itemIndex As Long, ByVal lParam As Long, pRemoveFooter As Long)
    Sub OnDestroyButton(ByVal itemIndex As Long, ByVal lParam As Long)
End Interface

[InterfaceId("F0034DA8-8A22-4151-8F16-2EBA76565BCC")]
[OleAutomation(False)]
Interface IListViewFooter Extends stdole.IUnknown
    Sub IsVisible(pVisible As Long)
    Sub GetFooterFocus(pItemIndex As Long)
    Sub SetFooterFocus(ByVal pItemIndex As Long)
    Sub SetIntroText(ByVal pszText As LongPtr)
    Sub Show(ByVal pCallbackObject As IListViewFooterCallback)
    Sub RemoveAllButtons()
    Sub InsertButton(ByVal insertAt As Long, ByVal pszText As LongPtr, ByVal pszAltText As LongPtr, ByVal iconIndex As Long, ByVal lParam As Long)
    Sub GetButtonLParam(lParam As Long)
End Interface


    [InterfaceId("00020D00-0000-0000-C000-000000000046")]
    [OleAutomation(False)]
    Interface IRichEditOle Extends stdole.IUnknown
        Function GetClientSite() As IOleClientSite
        [PreserveSig]
        Function GetObjectCount() As Long
        [PreserveSig]
        Function GetLinkCount() As Long
        [PreserveSig]
        Function GetObject(ByVal iob As Long, ByRef pREOBJECT As Any, ByVal dwFlags As REO_GETOBJ) As Long
        [PreserveSig]
        Function InsertObject(ByRef pREOBJECT As Any) As Long
        [PreserveSig]
        Function ConvertObject(ByVal iob As Long, ByRef pCLSIDNew As OLECLSID, ByVal pstrUserTypeNew As String) As Long
        [PreserveSig]
        Function ActivateAs(ByRef pCLSID As OLECLSID, ByRef pCLSIDAs As OLECLSID) As Long
        [PreserveSig]
        Function SetHostNames(ByVal pstrContainerApp As String, ByVal pstrContainerObj As String) As Long
        [PreserveSig]
        Function SetLinkAvailable(ByVal iob As Long, ByVal fAvailable As Long) As Long
        [PreserveSig]
        Function SetDvaspect(ByVal iob As Long, ByVal dvAspect As DVASPECT) As Long
        [PreserveSig]
        Function HandsOffStorage(ByVal iob As Long) As Long
        [PreserveSig]
        Function SaveCompleted(ByVal iob As Long, ByVal pStorage As IStorage) As Long
        [PreserveSig]
        Function InPlaceDeactivate() As Long
        [PreserveSig]
        Function ContextSensitiveHelp(ByVal fEnterMode As Long) As Long
        [PreserveSig]
        Function GetClipboardData(ByVal lpCharRange As LongPtr, ByVal RECO As RECO_FLAGS, ByRef ppDataObject As IDataObject) As Long
        [PreserveSig]
        Function ImportDataObject(ByVal pDataObject As IDataObject, [TypeHint(StdClipboardFormats)] ByVal CF As Integer, ByVal hMetaPict As LongPtr) As Long
    End Interface

    [InterfaceId("00020D03-0000-0000-C000-000000000046")]
    [OleAutomation(False)]
    Interface IRichEditOleCallback Extends stdole.IUnknown
        Sub GetNewStorage(ByRef ppStorage As IStorage)
        Sub GetInPlaceContext(ByRef ppFrame As IOleInPlaceFrame, ByRef ppDoc As IOleInPlaceUIWindow, ByRef pFrameInfo As OLEINPLACEFRAMEINFO)
        Sub ShowContainerUI(ByVal fShow As Long)
        Sub QueryInsertObject(ByRef pCLSID As OLECLSID, ByVal pStorage As IStorage, ByVal CharPos As Long)
        Sub DeleteObject(ByVal LpOleObject As LongPtr)
        Sub QueryAcceptData(ByVal pDataObject As IDataObject, [TypeHint(StdClipboardFormats)] ByRef CF As Integer, ByVal RECO As RECO_FLAGS, ByVal fReally As Long, ByVal hMetaPict As LongPtr)
        Sub ContextSensitiveHelp(ByVal fEnterMode As Long)
        Sub GetClipboardData(ByVal lpCharRange As LongPtr, ByVal RECO As RECO_FLAGS, ByRef ppDataObject As IDataObject)
        Sub GetDragDropEffect(ByVal fDrag As Long, ByVal KeyState As Long, ByRef dwEffect As DROPEFFECTS)
        Sub GetContextMenu(ByVal SelType As Integer, ByVal LpOleObject As LongPtr, ByVal lpCharRange As LongPtr, ByRef hMenu As LongPtr)
    End Interface
    
    
   [InterfaceId("8CC497C0-A1DF-11CE-8098-00AA0047BE5D")]
    '[ DualInterface ]
    [OleAutomation(False)]
    Interface ITextDocument Extends IDispatch
        [DispId(0)]
        Property Get Name() As String
        [DispId(1)]
        Property Get Selection() As ITextSelection
        [DispId(2)]
        Property Get StoryCount() As Long
        [DispId(3)]
        Property Get StoryRanges() As ITextStoryRanges
        [DispId(4)]
        Property Get Saved() As Long
        [DispId(4)]
        Property Let Saved(ByVal pValue As Long)
        [DispId(5)]
        Property Get DefaultTabStop() As Single
        [DispId(5)]
        Property Let DefaultTabStop(ByVal pValue As Single)
        [DispId(6)]
        Sub New()
        [DispId(7)]
        Sub Open(ByRef pVar As Variant, ByVal flags As tomOpenFlags, Optional ByVal CodePage As Long = 0)
        [DispId(8)]
        Sub Save(ByRef pVar As Variant, ByVal flags As tomOpenFlags, Optional ByVal CodePage As Long = 0)
        [DispId(9)]
        Function Freeze() As Long
        [DispId(10)]
        Function Unfreeze() As Long
        [DispId(11)]
        Sub BeginEditCollection()
        [DispId(12)]
        Sub EndEditCollection()
        [DispId(13)]
        Function Undo(ByVal Count As Long) As Long
        [DispId(14)]
        Function Redo(ByVal Count As Long) As Long
        [DispId(15)]
        Function Range(Optional ByVal cp1 As Long = 0, Optional ByVal cp2 As Long = -1) As ITextRange
        [DispId(16)]
        Function RangeFromPoint(ByVal x As Long, ByVal y As Long) As ITextRange
    End Interface
    [InterfaceId("C241F5E0-7206-11D8-A2C7-00A0D1D6C6B3")]
    [OleAutomation(False)]
    Interface ITextDocument2 Extends ITextDocument
        Property Get GetCaretType() As Long
        Property Let SetCaretType(ByVal value As Long)
        Property Get GetDisplays() As ITextDisplays
        Property Get GetDocumentFont() As ITextFont2
        Property Let SetDocumentFont(ByVal pFont As ITextFont2)
        Property Get GetDocumentPara() As ITextPara2
        Property Let SetDocumentPara(ByVal pPara As ITextPara2)
        Property Get GetEastAsianFlags() As Long
        Property Get GetGenerator() As String
        Property Let SetIMEInProgress(ByVal Value As Long)
        Property Get GetNotificationMode() As Long
        Property Let SetNotificationMode(ByVal Value As Long)
        Property Get GetSelection2() As ITextSelection2
        Property Get GetStoryRanges2() As ITextStoryRanges2
        Property Get GetTypographyOptions() As Long
        Property Get GetVersion() As Long
        Property Get GetWindow() As LongLong
        Sub AttachMsgFilter(ByVal pFilter As IUnknown)
        Sub CheckTextLimit(ByVal cch As Long, pcch As Long)
        Function GetCallManager() As IUnknown
        Sub GetClientRect(pLeft As Long, pTop As Long, pRight As Long, pBottom As Long)
        Function GetEffectColor(ByVal Index As Long) As Long
        Function GetImmContext() As LongLong
        Sub GetPreferredFont(ByVal cp As Long, ByVal CharRep As Long, ByVal Options As Long, ByVal curCharRep As Long, ByVal curFontSize As Long, pbstr As String, pPitchAndFamily As Long, pNewFontSize As Long)
        Sub GetProperty(ByVal Type As Long, pValue As Long)
        Sub GetStrings(ppStrs As ITextStrings)
        Sub Notify(ByVal Notify As Long)
        Function Range2(ByVal cpActive As Long, ByVal cpAnchor As Long) As ITextRange2
        Function RangeFromPoint2(ByVal x As Long, ByVal y As Long, ByVal Type As Long) As ITextRange2
        Sub ReleaseCallManager(ByVal pVoid As IUnknown)
        Sub ReleaseImmContext(ByVal Context As LongLong)
        Sub SetEffectColor(ByVal Index As Long, ByVal Value As Long)
        Sub SetProperty(ByVal Type As Long, ByVal Value As Long)
        Sub SetTypographyOptions(ByVal Options As Long, ByVal Mask As Long)
        Sub SysBeep()
        Sub Update(ByVal Value As Long)
        Sub UpdateWindow()
        Sub	GetMathProperties(pOptions As Long)
        Sub SetMathProperties(ByVal Options As Long, ByVal Mask As Long)
        Property Get GetActiveStory() As ITextStory
        Property Let SetActiveStory(ByVal pStore As ITextStory)
        Property Get GetMainStory() As ITextStory
        Property Get GetNewStory() As ITextStory
        Function GetStory(ByVal Index As Long) As ITextStory
    End Interface
    
    [InterfaceId("01c25500-4268-11d1-883a-3c8b00c10000")]
    [OleAutomation(False)]
    Interface ITextDocument2Old Extends ITextDocument
    	Sub AttachMsgFilter(ByVal pFilter As IUnknown)
        Sub SetEffectColor(ByVal Index As Long, ByVal Value As Long)
        Sub GetEffectColor(ByVal Index As Long, pcr As Long)
        Property Get GetCaretType() As Long
        Property Let SetCaretType(ByVal value As Long)
        Function GetImmContext() As LongLong
        Sub ReleaseImmContext(ByVal Context As LongLong)
        Sub GetPreferredFont(ByVal cp As Long, ByVal CharRep As Long, ByVal Option As Long, ByVal curCharRep As Long, ByVal curFontSize As Long, pbstr As String, pPitchAndFamily As Long, pNewFontSize As Long)
        Property Get GetNotificationMode() As Long
        Property Let SetNotificationMode(ByVal Value As Long)
        Sub GetClientRect(pLeft As Long, pTop As Long, pRight As Long, pBottom As Long)
        Property Get GetSelection2() As ITextSelection
        Sub GetWindow(phwnd As LongLong)
        Sub GetFEFlags(pFlags As Long)
        Sub UpdateWindow()
        Sub CheckTextLimit(ByVal cch As Long, pcch As Long)
        Sub IMEInProgress(ByVal Value As Long)
        Sub SysBeep()
        Sub Update(ByVal mode As Long)
        Sub Notify(ByVal Notify As Long)
        Function GetDocumentFont() As ITextFont
        Function GetDocumentPara() As ITextPara
        Function GetCallManager() As IUnknown
        Sub ReleaseCallManager(ByVal pVoid As IUnknown)
    End Interface
    
    [InterfaceId("C241F5F2-7206-11D8-A2C7-00A0D1D6C6B3")]
    [OleAutomation(False)]
    Interface ITextDisplays Extends IDispatch
    
    End Interface
    
    [InterfaceId("8CC497C2-A1DF-11CE-8098-00AA0047BE5D")]
   '[ DualInterface]
    Interface ITextRange Extends IDispatch
        [DispId(0)]
        Property Get Text() As String
        [DispId(0)]
        Property Let Text(ByVal pBSTR As String)
        [DispId(513)]
        Property Get CHAR() As Long
        [DispId(513)]
        Property Let CHAR(ByVal pch As Long)
        [DispId(514)]
        Property Get Duplicate() As ITextRange
        [DispId(515)]
        Property Get FormattedText() As ITextRange
        [DispId(515)]
        Property Let FormattedText(ByVal ppRange As ITextRange)
        [DispId(516)]
        Property Get Start() As Long
        [DispId(516)]
        Property Let Start(ByVal pcpFirst As Long)
        [DispId(517)]
        Property Get end() As Long
        [DispId(517)]
        Property Let end(ByVal pcpLim As Long)
        [DispId(518)]
        Property Get Font() As ITextFont
        [DispId(518)]
        Property Let Font(ByVal pFont As ITextFont)
        [DispId(519)]
        Property Get Para() As ITextPara
        [DispId(519)]
        Property Let Para(ByVal pPara As ITextPara)
        [DispId(520)]
        Property Get StoryLength() As Long
        [DispId(521)]
        Property Get StoryType() As tomStories
        [DispId(528)]
        Sub Collapse(ByVal bStart As Long)
        [DispId(529)]
        Function Expand(ByVal Unit As tomUnits) As Long
        [DispId(530)]
        Function GetIndex(ByVal Unit As tomUnits) As Long
        [DispId(531)]
        Sub SetIndex(ByVal Unit As tomUnits, ByVal index As Long, ByVal Extend As tomExtend)
        [DispId(532)]
        Sub SetRange(ByVal cpActive As Long, ByVal cpOther As Long)
        [DispId(533)]
        Function InRange(ByVal pRange As ITextRange) As Long
        [DispId(534)]
        Function InStory(ByVal pRange As ITextRange) As Long
        [DispId(535)]
        Function IsEqual(ByVal pRange As ITextRange) As Long
        [DispId(536)]
        Sub Select()
        [DispId(537)]
        Function StartOf(ByVal Unit As tomUnits, ByVal Extend As tomExtend) As Long
        [DispId(544)]
        Function EndOf(ByVal Unit As tomUnits, ByVal Extend As tomExtend) As Long
        [DispId(545)]
        Function Move(ByVal Unit As tomUnits, ByVal Count As Long) As Long
        [DispId(546)]
        Function MoveStart(ByVal Unit As tomUnits, ByVal Count As Long) As Long
        [DispId(547)]
        Function MoveEnd(ByVal Unit As tomUnits, ByVal Count As Long) As Long
        [DispId(548)]
        Function MoveWhile(ByRef Cset As Variant, ByVal Count As Long) As Long
        [DispId(549)]
        Function MoveStartWhile(ByRef Cset As Variant, ByVal Count As Long) As Long
        [DispId(550)]
        Function MoveEndWhile(ByRef Cset As Variant, ByVal Count As Long) As Long
        [DispId(551)]
        Function MoveUntil(ByRef Cset As Variant, ByVal Count As Long) As Long
        [DispId(552)]
        Function MoveStartUntil(ByRef Cset As Variant, ByVal Count As Long) As Long
        [DispId(553)]
        Function MoveEndUntil(ByRef Cset As Variant, ByVal Count As Long) As Long
        [DispId(560)]
        Function FindText(ByVal bstr As String, ByVal cch As Long, ByVal flags As tomFindFlags) As Long
        [DispId(561)]
        Function FindTextStart(ByVal bstr As String, ByVal cch As Long, ByVal flags As tomFindFlags) As Long
        [DispId(562)]
        Function FindTextEnd(ByVal bstr As String, ByVal cch As Long, ByVal flags As tomFindFlags) As Long
        [DispId(563)]
        Function Delete(ByVal Unit As tomUnits, ByVal Count As Long) As Long
        [DispId(564)]
        Sub Cut(ByRef pVar As Variant)
        [DispId(565)]
        Sub Copy(ByRef pVar As Variant)
        [DispId(566)]
        Sub Paste(ByRef pVar As Variant, ByVal Format As Long)
        [DispId(567)]
        Function CanPaste(ByRef pVar As Variant, ByVal Format As Long) As Long
        [DispId(568)]
        Function CanEdit() As Long
        [DispId(569)]
        Sub ChangeCase(ByVal type As Long)
        [DispId(576)]
        Sub GetPoint(ByVal type As Long, ByRef px As Long, ByRef py As Long)
        [DispId(577)]
        Sub SetPoint(ByVal x As Long, ByVal y As Long, ByVal type As Long, ByVal Extend As tomExtend)
        [DispId(578)]
        Sub ScrollIntoView(ByVal Value As Long)
        [DispId(579)]
        Function GetEmbeddedObject() As IUnknown
    End Interface
    [InterfaceId("C241F5E2-7206-11D8-A2C7-00A0D1D6C6B3")]
    [OleAutomation(False)]
    Interface ITextRange2 Extends ITextSelection
    	Property Get GetCch() As Long
        Property Get GetCells() As IUnknown
        Property Get GetColumn() As IUnknown
        Property Get GetCount() As Long
        Property Get GetDuplicate2() As ITextRange2
        Property Get GetFont2() As ITextFont2
        Property Let SetFont2(ByVal pFont As ITextFont2)
        Property Get GetFormattedText() As ITextRange2
        Property Let SetFormattedText(ByVal pRange As ITextRange2)
        Property Get GetGravity() As Long
        Property Let SetGravity(ByVal Value As Long)
        Property Get GetPara2() As ITextPara2
        Property Let SetPara2(ByVal pPara As ITextPara2)
        Property Get GetRow() As ITextRow
        Property Get GetStartPara() As Long
        Property Get GetTable() As IUnknown
        Property Get GetURL() As String
        Property Let SetURL(ByVal bstr As String)
        Sub AddSubrange(ByVal cp1 As Long, ByVal cp2 As Long, ByVal Activate As Long)
        Sub BuildUpMath(ByVal Flags As Long)
        Sub DeleteSubrange(ByVal cpFirst As Long, ByVal cpLim As Long)
        Sub Find(ByVal pRange As ITextRange2, ByVal Count As Long, ByVal Flags As Long, pDelta As Long)
        Sub GetChar2(pChar As Long, ByVal Offset As Long)
        Sub GetDropCap(pcLine As Long, pPosition As Long)
        Sub GetInlineObject(pType As Long, pAlign As Long, pChar As Long, pChar1 As Long, pChar2 As Long, pCount As Long, pTeXStyle As Long, pcCol As Long, pLevel As Long)
        Sub GetRect(ByVal Type As Long, pLeft As Long, pTop As Long, pRight As Long, pBottom As Long, pHit As Long)
        Sub GetSubrange(ByVal iSubrange As Long, pcpFirst As Long, pcpLim As Long)
        Sub GetText2(ByVal Flags As Long, pbstr As String)
        Sub HexToUnicode()
        Sub InsertTable(ByVal cCol As Long, ByVal cRow As Long, ByVal AutoFit As Long)
        Sub Linearize(ByVal Flags As Long)
        Sub SetActiveSubrange(ByVal cpAnchor As Long, ByVal cpActive As Long)
        Sub SetDropCap(ByVal cLine As Long, ByVal Position As Long)
        Sub SetProperty(ByVal Flags As Long, ByVal bstr As String)
        Sub UnicodeToHex()
        Sub SetInlineObject(ByVal Type As Long, ByVal Align As Long, ByVal Char As Long, ByVal Char1 As Long, ByVal Char2 As Long, ByVal Count As Long, ByVal TeXStyle As Long, ByVal cCol As Long)
        Sub GetMathFunctionType(ByVal bstr As String, pValue As Long)
        Sub InsertImage(ByVal width As Long, ByVal height As Long, ByVal ascent As Long, ByVal Type As Long, ByVal bstrAltText As String, ByVal pStream As IStream)
    End Interface
    
    [InterfaceId("8CC497C1-A1DF-11CE-8098-00AA0047BE5D")]
    '[ DualInterface ]
    [OleAutomation(False)]
    Interface ITextSelection Extends ITextRange
        [DispId(257)]
        Property Get flags() As tomSelectionFlags
        [DispId(257)]
        Property Let flags(ByVal pFlags As tomSelectionFlags)
        [DispId(258)]
        Property Get type() As Long
        [DispId(259)]
        Function MoveLeft(ByVal Unit As tomUnits, ByVal Count As Long, ByVal Extend As tomExtend) As Long
        [DispId(260)]
        Function MoveRight(ByVal Unit As tomUnits, ByVal Count As Long, ByVal Extend As tomExtend) As Long
        [DispId(261)]
        Function MoveUp(ByVal Unit As tomUnits, ByVal Count As Long, ByVal Extend As tomExtend) As Long
        [DispId(262)]
        Function MoveDown(ByVal Unit As tomUnits, ByVal Count As Long, ByVal Extend As tomExtend) As Long
        [DispId(263)]
        Function HomeKey(ByVal Unit As tomUnits, ByVal Extend As tomExtend) As Long
        [DispId(264)]
        Function EndKey(ByVal Unit As tomUnits, ByVal Extend As tomExtend) As Long
        [DispId(265)]
        Sub TypeText(ByVal bstr As String)
    End Interface
    [InterfaceId("C241F5E1-7206-11D8-A2C7-00A0D1D6C6B3")]
    [OleAutomation(False)]
    Interface ITextSelection2 Extends ITextRange
    	
    End Interface
    
    [InterfaceId("8CC497C3-A1DF-11CE-8098-00AA0047BE5D")]
    '[ DualInterface ]
    [OleAutomation(False)]
    Interface ITextFont Extends IDispatch
        [DispId(0)]
        Property Get Duplicate() As ITextFont
        [DispId(0)]
        Property Let Duplicate(ByVal ppFont As ITextFont)
        [DispId(769)]
        Function CanChange() As Long
        [DispId(770)]
        Function IsEqual(ByVal pFont As ITextFont) As Long
        [DispId(771)]
        Sub Reset(ByVal Value As Long)
        [DispId(772)]
        Property Get Style() As Long
        [DispId(772)]
        Property Let Style(ByVal pValue As Long)
        [DispId(773)]
        Property Get AllCaps() As Long
        [DispId(773)]
        Property Let AllCaps(ByVal pValue As Long)
        [DispId(774)]
        Property Get Animation() As tomAnimation
        [DispId(774)]
        Property Let Animation(ByVal pValue As tomAnimation)
        [DispId(775)]
        Property Get BackColor() As Long
        [DispId(775)]
        Property Let BackColor(ByVal pValue As Long)
        [DispId(776)]
        Property Get Bold() As Long
        [DispId(776)]
        Property Let Bold(ByVal pValue As Long)
        [DispId(777)]
        Property Get Emboss() As Long
        [DispId(777)]
        Property Let Emboss(ByVal pValue As Long)
        [DispId(784)]
        Property Get ForeColor() As Long
        [DispId(784)]
        Property Let ForeColor(ByVal pValue As Long)
        [DispId(785)]
        Property Get Hidden() As Long
        [DispId(785)]
        Property Let Hidden(ByVal pValue As Long)
        [DispId(786)]
        Property Get Engrave() As Long
        [DispId(786)]
        Property Let Engrave(ByVal pValue As Long)
        [DispId(787)]
        Property Get Italic() As Long
        [DispId(787)]
        Property Let Italic(ByVal pValue As Long)
        [DispId(788)]
        Property Get Kerning() As Single
        [DispId(788)]
        Property Let Kerning(ByVal pValue As Single)
        [DispId(789)]
        Property Get LanguageID() As Long
        [DispId(789)]
        Property Let LanguageID(ByVal pValue As Long)
        [DispId(790)]
        Property Get Name() As String
        [DispId(790)]
        Property Let Name(ByVal pBSTR As String)
        [DispId(791)]
        Property Get Outline() As Long
        [DispId(791)]
        Property Let Outline(ByVal pValue As Long)
        [DispId(792)]
        Property Get position() As Single
        [DispId(792)]
        Property Let position(ByVal pValue As Single)
        [DispId(793)]
        Property Get Protected() As Long
        [DispId(793)]
        Property Let Protected(ByVal pValue As Long)
        [DispId(800)]
        Property Get Shadow() As Long
        [DispId(800)]
        Property Let Shadow(ByVal pValue As Long)
        [DispId(801)]
        Property Get SIZE() As Single
        [DispId(801)]
        Property Let SIZE(ByVal pValue As Single)
        [DispId(802)]
        Property Get SmallCaps() As Long
        [DispId(802)]
        Property Let SmallCaps(ByVal pValue As Long)
        [DispId(803)]
        Property Get Spacing() As Single
        [DispId(803)]
        Property Let Spacing(ByVal pValue As Single)
        [DispId(804)]
        Property Get StrikeThrough() As Long
        [DispId(804)]
        Property Let StrikeThrough(ByVal pValue As Long)
        [DispId(805)]
        Property Get Subscript() As Long
        [DispId(805)]
        Property Let Subscript(ByVal pValue As Long)
        [DispId(806)]
        Property Get Superscript() As Long
        [DispId(806)]
        Property Let Superscript(ByVal pValue As Long)
        [DispId(807)]
        Property Get Underline() As Long
        [DispId(807)]
        Property Let Underline(ByVal pValue As Long)
        [DispId(808)]
        Property Get Weight() As Long
        [DispId(808)]
        Property Let Weight(ByVal pValue As Long)
    End Interface
    [InterfaceId("C241F5E3-7206-11D8-A2C7-00A0D1D6C6B3")]
    [OleAutomation(False)]
    Interface ITextFont2 Extends ITextFont
        Property Get GetCount() As Long
        Property Get GetAutoLigatures() As Long
        Property Let SetAutoLigatures(ByVal value As Long)
        Property Get GetAutospaceAlpha() As Long
        Property Let SetAutospaceAlpha(ByVal value As Long)
        Property Get GetAutospaceNumeric() As Long
        Property Let SetAutospaceNumeric(ByVal value As Long)
        Property Get GetAutospaceParens() As Long
        Property Let SetAutospaceParens(ByVal value As Long)
        Property Get GetCharRep() As Long
        Property Let SetCharRep(ByVal value As Long)
        Property Get GetCompressionMode() As Long
        Property Let SetCompressionMode(ByVal value As Long)
        Property Get GetCookie() As Long
        Property Let SetCookie(ByVal value As Long)
        Property Get GetDoubleStrike() As Long
        Property Let SetDoubleStrike(ByVal value As Long)
        Property Get GetDuplicate2() As ITextFont2
        Property Let SetDuplicate2(ByVal pFont As ITextFont2)
        Property Get GetLinkType() As Long
        Property Get GetMathZone() As Long
        Property Let SetMathZone(ByVal value As Long)
        Property Get GetModWidthPairs() As Long
        Property Let SetModWidthPairs(ByVal value As Long)
        Property Get GetModWidthSpace() As Long
        Property Let SetModWidthSpace(ByVal value As Long)
        Property Get GetOldNumbers() As Long
        Property Let SetOldNumbers(ByVal value As Long)
        Property Get GetOverlapping() As Long
        Property Let SetOverlapping(ByVal value As Long)
        Property Get GetPositionSubSuper() As Long
        Property Let SetPositionSubSuper(ByVal value As Long)
        Property Get GetScaling() As Long
        Property Let SetScaling(ByVal value As Long)
        Sub GetEffects(pValue As Long, pMask As Long)
        Sub GetEffects2(pValue As Long, pMask As Long)
        Function GetProperty(ByVal Type As Long) As Long
        Sub GetPropertyInfo(ByVal index As Long, pType As Long, pValue As Long)
        Function IsEqual2(ByVal pFont As ITextFont2) As LongPtr
        Sub SetEffects(ByVal pValue As Long, ByVal pMask As Long)
        Sub SetEffects2(ByVal pValue As Long, ByVal pMask As Long)
        Sub SetProperty(ByVal Type As Long, ByVal Value As Long)
    End Interface

    [InterfaceId("8CC497C4-A1DF-11CE-8098-00AA0047BE5D")]
    '[ DualInterface ]
    [OleAutomation(False)]
    Interface ITextPara Extends IDispatch
        [DispId(0)]
        Property Get Duplicate() As ITextPara
        [DispId(0)]
        Property Let Duplicate(ByVal ppPara As ITextPara)
        [DispId(1025)]
        Function CanChange() As Long
        [DispId(1026)]
        Function IsEqual(ByVal pPara As ITextPara) As Long
        [DispId(1027)]
        Sub Reset(ByVal Value As Long)
        [DispId(1028)]
        Property Get Style() As Long
        [DispId(1028)]
        Property Let Style(ByVal pValue As Long)
        [DispId(1029)]
        Property Get Alignment() As tomAlign
        [DispId(1029)]
        Property Let Alignment(ByVal pValue As tomAlign)
        [DispId(1030)]
        Property Get Hyphenation() As Long
        [DispId(1030)]
        Property Let Hyphenation(ByVal pValue As Long)
        [DispId(1031)]
        Property Get FirstLineIndent() As Single
        [DispId(1032)]
        Property Get KeepTogether() As Long
        [DispId(1032)]
        Property Let KeepTogether(ByVal pValue As Long)
        [DispId(1033)]
        Property Get KeepWithNext() As Long
        [DispId(1033)]
        Property Let KeepWithNext(ByVal pValue As Long)
        [DispId(1040)]
        Property Get LeftIndent() As Single
        [DispId(1041)]
        Property Get LineSpacing() As Single
        [DispId(1042)]
        Property Get LineSpacingRule() As tomLineSpacingRules
        [DispId(1043)]
        Property Get ListAlignment() As Long
        [DispId(1043)]
        Property Let ListAlignment(ByVal pValue As Long)
        [DispId(1044)]
        Property Get ListLevelIndex() As Long
        [DispId(1044)]
        Property Let ListLevelIndex(ByVal pValue As Long)
        [DispId(1045)]
        Property Get ListStart() As Long
        [DispId(1045)]
        Property Let ListStart(ByVal pValue As Long)
        [DispId(1046)]
        Property Get ListTab() As Single
        [DispId(1046)]
        Property Let ListTab(ByVal pValue As Single)
        [DispId(1047)]
        Property Get ListType() As tomList
        [DispId(1047)]
        Property Let ListType(ByVal pValue As tomList)
        [DispId(1048)]
        Property Get NoLineNumber() As Long
        [DispId(1048)]
        Property Let NoLineNumber(ByVal pValue As Long)
        [DispId(1049)]
        Property Get PageBreakBefore() As Long
        [DispId(1049)]
        Property Let PageBreakBefore(ByVal pValue As Long)
        [DispId(1056)]
        Property Get RightIndent() As Single
        [DispId(1056)]
        Property Let RightIndent(ByVal pValue As Single)
        [DispId(1057)]
        Sub SetIndents(ByVal StartIndent As Single, ByVal LeftIndent As Single, ByVal RightIndent As Single)
        [DispId(1058)]
        Sub SetLineSpacing(ByVal LineSpacingRule As tomLineSpacingRules, ByVal LineSpacing As Single)
        [DispId(1059)]
        Property Get SpaceAfter() As Single
        [DispId(1059)]
        Property Let SpaceAfter(ByVal pValue As Single)
        [DispId(1060)]
        Property Get SpaceBefore() As Single
        [DispId(1060)]
        Property Let SpaceBefore(ByVal pValue As Single)
        [DispId(1061)]
        Property Get WidowControl() As Long
        [DispId(1061)]
        Property Let WidowControl(ByVal pValue As Long)
        [DispId(1062)]
        Property Get TabCount() As Long
        [DispId(1063)]
        Sub AddTab(ByVal tbPos As Single, ByVal tbAlign As Long, ByVal tbLeader As Long)
        [DispId(1064)]
        Sub ClearAllTabs()
        [DispId(1065)]
        Sub DeleteTab(ByVal tbPos As Single)
        [DispId(1072)]
        Sub GetTab(ByVal iTab As Long, ByRef ptbPos As Single, ByRef ptbAlign As Long, ByRef ptbLeader As Long)
    End Interface
    [InterfaceId("C241F5E4-7206-11D8-A2C7-00A0D1D6C6B3")]
    [OleAutomation(False)]
    Interface ITextPara2 Extends ITextPara
    	Property Get GetBorders() As IUnknown
        Property Get GetDuplicate2() As ITextPara2
        Property Let GetDuplicate2(ByVal pPara As ITextPara2)
        Property Get GetFontAlignment() As Long
        Property Let SetFontAlignment(ByVal Value As Long)
        Property Get GetHangingPunctuation() As Long
        Property Let SetHangingPunctuation(ByVal Value As Long)
        Property Get GetSnapToGrid() As Long
        Property Let SetSnapToGrid(ByVal Value As Long)
        Property Get GetTrimPunctuationAtStart() As Long
        Property Let SetTrimPunctuationAtStart(ByVal Value As Long)
        Sub GetEffects(pValue As Long, pMask As Long)
        Function GetProperty(ByVal Type As Long) As Long
        Function IsEqual2(ByVal pPara As ITextPara2) As Long
        Sub SetEffects(ByVal Value As Long, ByVal Mask As Long)
        Sub SetProperty(ByVal Type As Long, ByVal Value As Long)
    End Interface
    

    [InterfaceId("8CC497C5-A1DF-11CE-8098-00AA0047BE5D")]
    '[ DualInterface ]
    [OleAutomation(False)]
    Interface ITextStoryRanges Extends IDispatch
        [DispId(-4), Restricted]
        Function _NewEnum() As Variant
        [DispId(0)]
        Function Item(ByVal index As Long) As ITextRange
        [DispId(2)]
        Property Get Count() As Long
    End Interface
    [InterfaceId("C241F5E5-7206-11D8-A2C7-00A0D1D6C6B3")]
    [OleAutomation(False)]
    Interface ITextStoryRanges2 Extends ITextStoryRanges
    	Function Item2(ByVal Index As Long) As ITextRange2
    End Interface
    
    [InterfaceId("C241F5F3-7206-11D8-A2C7-00A0D1D6C6B3")]
    [OleAutomation(False)]
    Interface ITextStory Extends stdole.IUnknown
    	Property Get GetActive() As Long
        Property Let SetActive(ByVal Value As Long)
        Property Get GetDisplay() As IUnknown
        Property Get GetIndex() As Long
        Property Get GetType() As Long
        Property Let SetType(ByVal Value As Long)
        Sub GetProperty(ByVal Type As Long, pValue As Long)
        Function GetRange(ByVal cpActive As Long, ByVal cpAnchor As Long) As ITextRange2
        Function GetText(ByVal Flags As Long) As String
        Sub SetFormattedText(ByVal pUnk As IUnknown)
        Sub SetProperty(ByVal Type As Long, ByVal Value As Long)
        Sub SetText(ByVal Flags As Long, ByVal bstr As String)
    End Interface
    
    [InterfaceId("C241F5E7-7206-11D8-A2C7-00A0D1D6C6B3")]
    [OleAutomation(False)]
    Interface ITextStrings Extends IDispatch
        Function Item(ByVal Index As Long) As ITextRange2
        Property Get GetCount() As Long
        Sub Add(ByVal bstr As String)
        Sub Append(ByVal pRange As ITextRange2, ByVal iString As Long)
        Sub Cat2(ByVal iString As Long)
        Sub CatTop2(ByVal bstr As String)
        Sub DeleteRange(ByVal pRange As ITextRange2)
        Sub EncodeFunction(ByVal Type As Long, ByVal Align As Long, ByVal Char As Long, ByVal Char1 As Long, ByVal Char2 As Long, ByVal Count As Long, ByVal TeXStyle As Long, ByVal cCol As Long, ByVal pRange As ITextRange2)
        Sub GetCch(ByVal iString As Long, pcch As Long)
        Sub InsertNullStr(ByVal iString As Long)
        Sub MoveBoundary(ByVal iString As Long, ByVal cch As Long)
        Sub PrefixTop(ByVal bstr As String)
        Sub Remove(ByVal iString As Long, ByVal cString As Long)
        Sub SetFormattedText(ByVal pRangeD As ITextRange2, ByVal pRangeS As ITextRange2)
        Sub SetOpCp(ByVal iString As Long, ByVal cp As Long)
        Sub SuffixTop(ByVal bstr As String, ByVal pRange As ITextRange2)
        Sub Swap()
    End Interface
        
    [InterfaceId("C241F5EF-7206-11D8-A2C7-00A0D1D6C6B3")]
    [OleAutomation(False)]
    Interface ITextRow Extends IDispatch
    	Property Get GetAlignment() As Long
        Property Let SetAlignment(ByVal Value As Long)
    	Property Get GetCellCount() As Long
        Property Let SetCellCount(ByVal Value As Long)
    	Property Get GetCellCountCache() As Long
        Property Let SetCellCountCache(ByVal Value As Long)
    	Property Get GetCellIndex() As Long
        Property Let SetCellIndex(ByVal Value As Long)
    	Property Get GetCellMargin() As Long
        Property Let SetCellMargin(ByVal Value As Long)
    	Property Get GetHeight() As Long
        Property Let SetHeight(ByVal Value As Long)
   	    Property Get GetIndent() As Long
        Property Let SetIndent(ByVal Value As Long)
   	    Property Get GetKeepTogether() As Long
        Property Let SetKeepTogether(ByVal Value As Long)
   	    Property Get GetKeepWithNext() As Long
        Property Let SetKeepWithNext(ByVal Value As Long)
        Property Get GetNestLevel() As Long
        Property Get GetRTL() As Long
        Property Let SetRTL(ByVal Value As Long)
        Property Get GetCellAlignment() As Long
        Property Let SetCellAlignment(ByVal Value As Long)
        Property Get GetCellColorBack() As Long
        Property Let SetCellColorBack(ByVal Value As Long)
        Property Get GetCellColorFore() As Long
        Property Let SetCellColorFore(ByVal Value As Long)
        Property Get GetCellMergeFlags() As Long
        Property Let SetCellMergeFlags(ByVal Value As Long)
        Property Get GetCellShading() As Long
        Property Let SetCellShading(ByVal Value As Long)
        Property Get GetCellVerticalText() As Long
        Property Let SetCellVerticalText(ByVal Value As Long)
        Property Get GetCellWidth() As Long
        Property Let SetCellWidth(ByVal Value As Long)
        Sub GetCellBorderColors(pcrLeft As Long, pcrTop As Long, pcrRight As Long, pcrBottom As Long)
        Sub GetCellBorderWidths(pduLeft As Long, pduTop As Long, pduRight As Long, pduBottom As Long)
        Sub SetCellBorderColors(ByVal crLeft As Long, ByVal crTop As Long, ByVal crRight As Long, ByVal crBottom As Long)
        Sub SetCellBorderWidths(ByVal duLeft As Long, ByVal duTop As Long, ByVal duRight As Long, ByVal duBottom As Long)
        Sub Apply(ByVal cRow As Long, ByVal Flags As Long)
        Function CanChange() As Long
        Function GetProperty(ByVal type As Long) As Long
        Sub Insert(ByVal cRow As Long)
        Function IsEqual(ByVal pRow As ITextRow) As Long
        Sub Reset(ByVal Value As Long)
        Sub SetProperty(ByVal Type As Long, ByVal Value As Long)
    End Interface

[InterfaceId("8D33F740-CF58-11CE-A89D-00AA006CADC5")]
[OleAutomation(False)]
Interface ITextServices Extends stdole.IUnknown
	Sub TxSendMessage(ByVal msg As Long, ByVal wParam As LongPtr, lParam As Any, plResult As LongPtr)
    Sub TxDraw(ByVal dwDrawAspect As Long, ByVal lindex As Long, pvAspect As Any, ptd As DVTARGETDEVICE, ByVal hdcDraw As LongPtr, ByVal hicTargetDev As LongPtr, lprcBounds As RECT, lprcWBounds As RECT, lprcUpdate As RECT, ByVal pfnContinue As Long, ByVal dwContinue As Long, ByVal lViewId As Long)
    Sub TxGetHScroll(plMin As Long, plMax As Long, plPos As Long, plPage As Long, pfEnabled As Long)
    Sub TxGetVScroll(plMin As Long, plMax As Long, plPos As Long, plPage As Long, pfEnabled As Long)
    Sub OnTxSetCursor(ByVal dwDrawAspect As Long, ByVal lindex As Long, pvAspect As Any, ptd As DVTARGETDEVICE, ByVal hdcDraw As LongPtr, ByVal hicTargetDev As LongPtr, lprcClient As RECT, ByVal x As Long, ByVal y As Long)
    Sub TxQueryHitPoint(ByVal dwDrawAspect As Long, ByVal lindex As Long, pvAspect As Any, ptd As DVTARGETDEVICE, ByVal hdcDraw As LongPtr, ByVal hicTargetDev As LongPtr, lprcClient As RECT, ByVal x As Long, ByVal y As Long, pHitResult As Long)
    Sub OnTxInPlaceActivate(prcClient As RECT)
    Sub OnTxInPlaceDeactivate()
    Sub OnTxUIActivate()
    Sub OnTxUIDeactivate()
    Sub TxGetText(pbstrText As String)
    Sub TxSetText(ByVal pszText As LongPtr)
    Sub TxGetCurTargetX(x As Long)
    Sub TxGetBaseLinePos(pos As Long)
    Sub TxGetNaturalSize(ByVal dwDrawAspect As Long, ByVal hdcDraw As LongPtr, ByVal hicTargetDev As LongPtr, ptd As DVTARGETDEVICE, ByVal dwMode As Long, psizelExtent As SIZE, pwidth As Long, pheight As Long)
    Sub TxGetDropTarget(ppDropTarget As IDropTarget)
    Sub OnTxPropertyBitsChange(ByVal dwMask As Long, ByVal dwBits As Long)
    Sub TxGetCachedSize(pdwWidth As Long, pdwHeight As Long)
End Interface
[InterfaceId("8D33F741-CF58-11CE-A89D-00AA006CADC5")]
[OleAutomation(False)]
Interface ITextServices2 Extends ITextServices
	Sub TxGetNaturalSize2(ByVal dwAspect As Long, ByVal hdcDraw As LongPtr, ByVal hicTargetDevice As LongPtr, ptd As DVTARGETDEVICE, ByVal dwMode As Long, psizelExtent As SIZE, pwidth As Long, pheight As Long, pascent As Long)
    Sub TxDrawD2D(ByVal pRenderTarget As ID2D1RenderTarget, lprcBounds As RECT, lprcUpdate As RECT, ByVal lViewId As Long)
End Interface


[InterfaceId("13E670F4-1A5A-11CF-ABEB-00AA00B65EA1")]
[OleAutomation(False)]
Interface ITextHost Extends stdole.IUnknown
	[PreserveSig] Function TxGetDC() As LongPtr
    [PreserveSig] Function TxReleaseDC(ByVal hdc As LongPtr) As Long
    [PreserveSig] Function TxShowScrollBar(ByVal fnBar As Long, ByVal fShow As Long) As Long
    [PreserveSig] Function TxEnableScrollBar(ByVal fuSBFlags As Long, ByVal fuArrowFlags As Long) As Long
    [PreserveSig] Function TxSetScrollRange(ByVal fnBar As Long, ByVal nMinPos As Long, ByVal nMaxPos As Long, ByVal fRedraw As Long) As Long
    [PreserveSig] Function TxSetScrollPos(ByVal fnBar As Long, ByVal fuArrowFlags As Long) As Long
    [PreserveSig] Sub TxInvalidateRect(prc As RECT, ByVal fMode As Long)
    [PreserveSig] Sub TxViewChange(ByVal fUpdate As Long)
    [PreserveSig] Function TxCreateCaret(ByVal hbmp As LongPtr, ByVal xWidth As Long, ByVal yHeight As Long) As Long
    [PreserveSig] Function TxShowCaret(ByVal fShow As Long) As Long
    [PreserveSig] Function TxSetCaretPos(ByVal x As Long, ByVal x As Long) As Long
    [PreserveSig] Function TxSetTimer(ByVal idTimer As Long, ByVal uTimeout As Long) As Long
    [PreserveSig] Sub TxKillTimer(ByVal idTimer As Long)
    [PreserveSig] Sub TxScrollWindowEx(ByVal dx As Long, ByVal dy As Long, lprcScroll As RECT, lprcClip As RECT, ByVal hrgnUpdate As LongPtr, lprcUpdate As RECT, ByVal fuScroll As Long)
    [PreserveSig] Sub TxSetCapture(ByVal fCapture As Long)
    [PreserveSig] Sub TxSetFocus()
    [PreserveSig] Sub TxSetCursor(ByVal hcur As LongPtr, ByVal fText As Long)
    [PreserveSig] Function TxScreenToClient(lppt As POINT) As Long
    [PreserveSig] Function TxClientToScreen(lppt As POINT) As Long
    Sub TxActivate(plOldState As Long)
    Sub TxDeactivate(ByVal lNewState As Long)
    Sub TxGetClientRect(prc As RECT)
    Sub TxGetViewInset(prc As RECT)
    Sub TxGetCharFormat(ppCF As CHARFORMATW)
    Sub TxGetParaFormat(ppPF As PARAFORMAT)
    [PreserveSig] Function TxGetSysColor(ByVal nIndex As Long) As Long
    Sub TxGetBackStyle(pstyle As TXTBACKSTYLE)
    Sub TxGetMaxLength(plength As Long)
    Sub TxGetScrollBars(pdwScrollBars As Long)
    Sub TxGetPasswordChar(pch As Integer)
    Sub TxGetAcceleratorPos(pcp As Long)
    Sub TxGetExtent(lpExtent As SIZE)
    Sub OnTxCharFormatChange(pCF As CHARFORMATW)
    Sub OnTxParaFormatChange(pPF As PARAFORMAT)
    Sub TxGetPropertyBits(ByVal dwMask As Long, pdwBits As Long)
    Sub TxNotify(ByVal iNotify As Long, pv As Any)
    [PreserveSig] Function TxImmGetContext() As LongPtr
    [PreserveSig] Sub TxImmReleaseContext(ByVal himc As LongPtr)
    Sub TxGetSelectionBarWidth(lSelBarWidth As Long)
End Interface
[InterfaceId("13E670F5-1A5A-11CF-ABEB-00AA00B65EA1")]
[OleAutomation(False)]
Interface ITextHost2 Extends ITextHost
	[PreserveSig] Function TxIsDoubleClickPending() As Long
    Sub TxGetWindow(phwnd As LongPtr)
    Sub TxSetForegroundWindow()
    [PreserveSig] Function TxGetPalette() As LongPtr
    Sub TxGetFEFlags(pFlags As Long)
    [PreserveSig] Function TxSetCursor2(ByVal hcur As LongPtr, ByVal bText As Long) As LongPtr
    [PreserveSig] Sub TxFreeTextServicesNotification()
    Sub TxGetEditStyle(ByVal dwItem As Long, pdwData As Long)
    Sub TxGetWindowStyles(pdwStyle As Long, pdwExStyle As Long)
    Sub TxEBookLoadImage(ByVal lpszName As LongPtr, pID As LongPtr, psize As SIZE, pdwFlags As Long)
    Sub TxEBookImageDraw(ByVal ID As LongPtr, ByVal hdc As LongPtr, topLeft As POINT, prcRenderint As RECT, ByVal fSelected As Long)
    Sub TxGetHorzExtent(plHorzExtent As Long)
End Interface

[InterfaceId("F2FB5CC0-B5A9-437F-9BA2-47632082269F")]
[OleAutomation(False)]
Interface IRicheditUiaOverrides Extends stdole.iunknown
	Sub GetPropertyOverrideValue(ByVal propertyId As Long, pRetValue As Variant)
End Interface

[InterfaceId("23969a9d-8546-4032-a1bb-73750cbf3333")]
[OleAutomation(False)]
Interface IRichEditUiaInformation Extends stdole.IUnknown
	Sub GetBoundaryRectangle(pUiaRect As RECT)
    Sub IsVisible()
End Interface

	
#End Region


Module wdAPIComCtl
Private Const WM_USER = &H400 'Workaround for constent expression evaluation bug. Do not make public.
#Region "Common"

Public Enum ICC_CLASS
    ICC_LISTVIEW_CLASSES = &H1&
    ICC_TREEVIEW_CLASSES = &H2&
    ICC_BAR_CLASSES = &H4&
    ICC_TAB_CLASSES = &H8&
    ICC_UPDOWN_CLASS = &H10&
    ICC_PROGRESS_CLASS = &H20&
    ICC_HOTKEY_CLASS = &H40&
    ICC_ANIMATE_CLASS = &H80&
    ICC_DATE_CLASSES = &H100&
    ICC_USEREX_CLASSES = &H200&
    ICC_COOL_CLASSES = &H400&
    ICC_INTERNET_CLASSES = &H800&
    ICC_PAGESCROLLER_CLASS = &H1000&
    ICC_NATIVEFNTCTL_CLASS = &H2000&
    ICC_STANDARD_CLASSES = &H4000&
    ICC_LINK_CLASS = &H8000&

    ICC_WIN95_CLASSES = &HFF&
    ICC_ALL_CLASSES = &HFDFF& ' combination of all values above
End Enum
Public Type INITCOMMONCONTROLSEX
   dwSize As Long
   dwICC As ICC_CLASS
End Type

Public Declare PtrSafe Sub InitCommonControls Lib "comctl32" ()

Public Declare PtrSafe Function InitCommonControlsEx Lib "comctl32" (picce As INITCOMMONCONTROLSEX) As Long


Public Const CCM_FIRST = &H2000
Public Const CCM_SETBKCOLOR = (CCM_FIRST + 1)   ' lParam is bkColor
Public Const CCM_SETCOLORSCHEME = (CCM_FIRST + 2)     ' lParam is color scheme
Public Const CCM_GETCOLORSCHEME = (CCM_FIRST + 3)     ' fills in COLORSCHEME pointed to by lParam
Public Const CCM_GETDROPTARGET = (CCM_FIRST + 4)
Public Const CCM_SETUNICODEFORMAT = (CCM_FIRST + 5)
Public Const CCM_GETUNICODEFORMAT = (CCM_FIRST + 6)
Public Const CCM_SETVERSION = (CCM_FIRST + 7)
Public Const CCM_GETVERSION = (CCM_FIRST + 8)
Public Const CCM_SETNOTIFYWINDOW = (CCM_FIRST + 9) '// wParam == hwndParent.
Public Const CCM_SETWINDOWTHEME = (CCM_FIRST + 11)
Public Const CCM_DPISCALE = (CCM_FIRST + 12)
Public Const CCM_TRANSLATEACCELERATOR = &H461 '(WM_USER + 97)

Public Enum CommonStyles
	CCS_TOP = &H00000001
	CCS_NOMOVEY = &H00000002
	CCS_BOTTOM = &H00000003
	CCS_NORESIZE = &H00000004
	CCS_NOPARENTALIGN = &H00000008
    CCS_NOHILITE = &H00000010 'UNDOCUMENTED
	CCS_ADJUSTABLE = &H00000020
	CCS_NODIVIDER = &H00000040
	CCS_VERT = &H00000080
	CCS_LEFT = (CCS_VERT Or CCS_TOP)
	CCS_RIGHT = (CCS_VERT Or CCS_BOTTOM)
	CCS_NOMOVEX = (CCS_VERT Or CCS_NOMOVEY)
End Enum

Public Enum ODT
	ODT_HEADER = 100
	ODT_TAB = 101
	ODT_LISTVIEW = 102
End Enum

Public Const NM_FIRST                As Long = 0
Public Const NM_OUTOFMEMORY          As Long = (NM_FIRST - 1)
Public Const NM_CLICK                As Long = (NM_FIRST - 2) 'uses NMCLICK struct
Public Const NM_DBLCLK               As Long = (NM_FIRST - 3)
Public Const NM_RETURN               As Long = (NM_FIRST - 4)
Public Const NM_RCLICK               As Long = (NM_FIRST - 5) 'uses NMCLICK struct
Public Const NM_RDBLCLK              As Long = (NM_FIRST - 6)
Public Const NM_SETFOCUS             As Long = (NM_FIRST - 7)
Public Const NM_KILLFOCUS            As Long = (NM_FIRST - 8)
Public Const NM_CUSTOMDRAW           As Long = (NM_FIRST - 12)
Public Const NM_HOVER                As Long = (NM_FIRST - 13)
Public Const NM_NCHITTEST            As Long = (NM_FIRST - 14)
Public Const NM_KEYDOWN              As Long = (NM_FIRST - 15)
Public Const NM_RELEASEDCAPTURE      As Long = (NM_FIRST - 16)
Public Const NM_SETCURSOR            As Long = (NM_FIRST - 17)
Public Const NM_CHAR                 As Long = (NM_FIRST - 18)
Public Const NM_TOOLTIPSCREATED      As Long = (NM_FIRST - 19)
Public Const NM_LDOWN                As Long = (NM_FIRST - 20)
Public Const NM_RDOWN                As Long = (NM_FIRST - 21)
Public Const NM_THEMECHANGED         As Long = (NM_FIRST - 22)
Public Const NM_FONTCHANGED          As Long = (NM_FIRST - 23)
Public Const NM_CUSTOMTEXT           As Long = (NM_FIRST - 24)   ' uses NMCUSTOMTEXT struct
Public Const NM_TVSTATEIMAGECHANGING As Long = (NM_FIRST - 24)

' Public Type NMHDR
'   hWndFrom As LongPtr   ' Window handle of control sending message
'   idFrom As LongPtr      ' Identifier of control sending message
'   code  As Long          ' Specifies the notification code
' End Type

Public Type NMMOUSE
	hdr As NMHDR
    dwItemSpec As LongPtr
    dwItemData As LongPtr
    pt As POINT
    dwHitInfo As LongPtr
End Type

Public Type NMOBJECTNOTIFY
	hdr As NMHDR
    iItem As Long
    piid As LongPtr
    pObject As LongPtr
    hResult As Long
    dwFlags As Long
End Type

Public Type NMKEY
	hdr As NMHDR
    nVKey As VirtualKeyCodes
    uFlags As WM_KEY_lParam
End Type

Public Type NMCHAR
	hdr As NMHDR
    ch As Long
    dwItemPrev As Long
    dwItemNext As Long
End Type

Public Type NMCUSTOMTEXT
	hdr As NMHDR
    hDC As LongPtr
    lpString As LongPtr
    nCount As Long
    lpRect As LongPtr
    uFormat As DT_Flags
    fLink As BOOL
End Type


Public Type NMCUSTOMDRAW
    hdr As NMHDR
    dwDrawStage As NotifyCustomDrawStates
    hDC As LongPtr
    rc As RECT
    dwItemSpec As LongPtr
    uItemState As CustomDrawItemStates
    lItemlParam As LongPtr
End Type

Public Type NMCUSTOMSPLITRECTINFO
	hdr As NMHDR
    rcClient As RECT
    rcButton As RECT
    rcSplit As RECT
End Type

Public Const CDRF_DODEFAULT As Long = &H0
Public Const CDRF_NEWFONT As Long = &H2
Public Const CDRF_SKIPDEFAULT As Long = &H4
Public Const CDRF_DOERASE As Long = &H8
Public Const CDRF_NOTIFYPOSTPAINT As Long = &H10
Public Const CDRF_NOTIFYITEMDRAW As Long = &H20
Public Const CDRF_NOTIFYSUBITEMDRAW As Long = &H20
Public Const CDRF_NOTIFYPOSTERASE As Long = &H40

Public Enum NotifyCustomDrawStates
    CDDS_PREPAINT = &H00000001
    CDDS_POSTPAINT = &H00000002
    CDDS_PREERASE = &H00000003
    CDDS_POSTERASE = &H00000004
'  the 0x000010000 bit means it's individual item specific
    CDDS_ITEM = &H00010000
    CDDS_ITEMPREPAINT = (CDDS_ITEM Or CDDS_PREPAINT)
    CDDS_ITEMPOSTPAINT = (CDDS_ITEM Or CDDS_POSTPAINT)
    CDDS_ITEMPREERASE = (CDDS_ITEM Or CDDS_PREERASE)
    CDDS_ITEMPOSTERASE = (CDDS_ITEM Or CDDS_POSTERASE)
    CDDS_SUBITEM = &H00020000
End Enum

'Moved to wdExplorer
' Public Enum CustomDrawItemStates
'     CDIS_SELECTED = &H1
'     CDIS_GRAYED = &H2
'     CDIS_DISABLED = &H4
'     CDIS_CHECKED = &H8
'     CDIS_FOCUS = &H10
'     CDIS_DEFAULT = &H20
'     CDIS_HOT = &H40
'     CDIS_MARKED = &H80
'     CDIS_INDETERMINATE = &H100
'     CDIS_SHOWKEYBOARDCUES = &H200
'     CDIS_NEARHOT = &H400
'     CDIS_OTHERSIDEHOT = &H800
'     CDIS_DROPHILITED = &H1000
' End Enum

Public Enum MSGFs
	MSGF_COMMCTRL_BEGINDRAG = &H4200
	MSGF_COMMCTRL_SIZEHEADER = &H4201
	MSGF_COMMCTRL_DRAGSELECT = &H4202
	MSGF_COMMCTRL_TOOLBARCUST = &H4203
End Enum

Public Enum HIC_FLAGS
    HICF_OTHER = &H0
    HICF_MOUSE = &H1          ' Triggered by mouse
    HICF_ARROWKEYS = &H2          ' Triggered by arrow keys
    HICF_ACCELERATOR = &H4          ' Triggered by accelerator
    HICF_DUPACCEL = &H8          ' This accelerator is not unique
    HICF_ENTERING = &H10         ' idOld is invalid
    HICF_LEAVING = &H20         ' idNew is invalid
    HICF_RESELECT = &H40         ' hot item reselected
    HICF_LMOUSE = &H80         ' left mouse button selected
    HICF_TOGGLEDROPDOWN = &H100        ' Toggle button's dropdown state
End Enum

Public Declare PtrSafe Function DefSubclassProc Lib "comctl32" Alias "#413" (ByVal hWnd As LongPtr, ByVal uMsg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr) As LongPtr
Public Declare PtrSafe Function SetWindowSubclass Lib "comctl32" Alias "#410" (ByVal hWnd As LongPtr, ByVal pfnSubclass As LongPtr, ByVal uIdSubclass As LongPtr, Optional ByVal dwRefData As LongPtr) As Long
Public Declare PtrSafe Function GetWindowSubclass Lib "comctl32" Alias "#411" (ByVal hWnd As LongPtr, ByVal pfnSubclass As LongPtr, ByVal uIdSubclass As LongPtr, dwRefData As LongPtr) As Long
Public Declare PtrSafe Function RemoveWindowSubclass Lib "comctl32" Alias "#412" (ByVal hWnd As LongPtr, ByVal pfnSubclass As LongPtr, ByVal uIdSubclass As LongPtr) As Long

Public Declare PtrSafe Function LoadIconWithScaleDown Lib "comctl32" (ByVal hinst As LongPtr, ByVal pszName As LongPtr, ByVal cx As Long, ByVal cy As Long, phico As LongPtr) As Long
Public Declare PtrSafe Function LoadIconMetric Lib "comctl32" (ByVal hinst As LongPtr, ByVal pszName As LongPtr, ByVal lims As LI_METRIC, phico As LongPtr) As Long
Public Declare PtrSafe Function MirrorIcon Lib "comctl32" Alias "#414" (phIconSmall As LongPtr, phIconLarge As LongPtr) As BOOL



Public Declare PtrSafe Function DrawShadowText Lib "comctl32" (ByVal hdc As LongPtr, ByVal pszText As String, ByVal cch As Long, prc As RECT, ByVal dwFlags As DT_Flags, ByVal crText As Long, ByVal crShadow As Long, ByVal ixOffset As Long, ByVal iyOffset As Long) As Long

Public Declare PtrSafe Function DllGetVersion Lib "comctl32" (ByRef pdvi As DLLVERSIONINFO) As Long

Public Declare PtrSafe Sub InitMUILanguage Lib "comctl32" (ByVal uiLang As Integer)

Public Const WC_NATIVEFONTCTLW  = "NativeFontCtl"
Public Const WC_NATIVEFONTCTLA  = "NativeFontCtl"
Public Const WC_NATIVEFONTCTL  = WC_NATIVEFONTCTLW

Public Enum NativeFontControlStyles
    NFS_EDIT = &H0001
    NFS_STATIC = &H0002
    NFS_LISTCOMBO = &H0004
    NFS_BUTTON = &H0008
    NFS_ALL = &H0010
    NFS_USEFONTASSOC = &H0020
End Enum

Public Enum DsaItemIndexSpecialValues
    DA_LAST = (&H7FFFFFFF)
    DA_ERR = (-1)
    DSA_APPEND = DA_LAST
    DSA_ERR = DA_ERR
End Enum

Public Type DPASTREAMINFO
    iPos As Long ' Index of item
    pvItem As LongPtr 'void*
End Type

Public Enum DPAMergeFlags
    DPAM_SORTED = &H00000001
    DPAM_NORMAL = &H00000002
    DPAM_UNION = &H00000004
    DPAM_INTERSECT = &H00000008
End Enum
Public Const DPAMM_MERGE  = 1
Public Const DPAMM_DELETE  = 2
Public Const DPAMM_INSERT  = 3
Public Enum DPASearchFlags
    DPAS_SORTED = &H0001
    DPAS_INSERTBEFORE = &H0002
    DPAS_INSERTAFTER = &H0004
End Enum
Public Const DPA_APPEND  = DA_LAST
Public Const DPA_ERR  = DA_ERR

Public Type DPA
    cpItems As Long
    pArray As LongPtr
    hHeap As LongPtr
    cpCapacity As Long
    cpGrow As Long
End Type
Public Type DSA
    cItem As Long
    aItem As LongPtr
    cItemAlloc As Long
    cbItem As Long
    cItemGrow As Long
End Type


Public Declare PtrSafe Function DSA_Create Lib "comctl32" (ByVal cbItem As Long, ByVal cItemGrow As Long) As LongPtr
Public Declare PtrSafe Function DSA_Destroy Lib "comctl32" (ByVal hdsa As LongPtr) As BOOL
Public Declare PtrSafe Sub DSA_DestroyCallback Lib "comctl32" (ByVal hdsa As LongPtr, ByVal pfnCB As LongPtr, pData As Any)
Public Declare PtrSafe Function DSA_DeleteItem Lib "comctl32" (ByVal hdsa As LongPtr, [TypeHint(DsaItemIndexSpecialValues)] ByVal i As Long) As BOOL
Public Declare PtrSafe Function DSA_DeleteAllItems Lib "comctl32" (ByVal hdsa As LongPtr) As BOOL
Public Declare PtrSafe Sub DSA_EnumCallback Lib "comctl32" (ByVal hdsa As LongPtr, ByVal pfnCB As LongPtr, pData As Any)
Public Declare PtrSafe Function DSA_InsertItem Lib "comctl32" (ByVal hdsa As LongPtr, [TypeHint(DsaItemIndexSpecialValues)] ByVal i As Long, pItem As Any) As Long
Public Declare PtrSafe Function DSA_GetItemPtr Lib "comctl32" (ByVal hdsa As LongPtr, [TypeHint(DsaItemIndexSpecialValues)] ByVal i As Long) As LongPtr
Public Declare PtrSafe Function DSA_GetItem Lib "comctl32" (ByVal hdsa As LongPtr, [TypeHint(DsaItemIndexSpecialValues)] ByVal i As Long, pItem As Any) As BOOL
Public Declare PtrSafe Function DSA_SetItem Lib "comctl32" (ByVal hdsa As LongPtr, [TypeHint(DsaItemIndexSpecialValues)] ByVal i As Long, pItem As Any) As BOOL
Public Declare PtrSafe Function DSA_Clone Lib "comctl32" (ByVal hdsa As LongPtr) As LongPtr
Public Declare PtrSafe Function DSA_GetSize Lib "comctl32" (ByVal hdsa As LongPtr) As LongLong
Public Declare PtrSafe Function DSA_Sort Lib "comctl32" (ByVal hdsa As LongPtr, ByVal pfnCompare As LongPtr, ByVal lParam As LongPtr) As BOOL

Public Declare PtrSafe Function DPA_Create Lib "comctl32" (ByVal cItemGrow As Long) As LongPtr
Public Declare PtrSafe Function DPA_CreateEx Lib "comctl32" (ByVal cItemGrow As Long, ByVal hheap As LongPtr) As LongPtr
Public Declare PtrSafe Function DPA_Clone Lib "comctl32" (ByVal hdpa As LongPtr, Optional ByVal hdpaNew As LongPtr) As LongPtr
Public Declare PtrSafe Function DPA_Destroy Lib "comctl32" (ByVal hdpa As LongPtr) As BOOL
Public Declare PtrSafe Sub DPA_DestroyCallback Lib "comctl32" (ByVal hdpa As LongPtr, ByVal pfnCB As LongPtr, pData As Any)
Public Declare PtrSafe Function DPA_DeletePtr Lib "comctl32" (ByVal hdpa As LongPtr, [TypeHint(DsaItemIndexSpecialValues)] ByVal i As Long) As LongPtr
Public Declare PtrSafe Function DPA_DeleteAllPtrs Lib "comctl32" (ByVal hdpa As LongPtr) As BOOL
Public Declare PtrSafe Sub DPA_EnumCallback Lib "comctl32" (ByVal hdpa As LongPtr, ByVal pfnCB As LongPtr, pData As Any)
Public Declare PtrSafe Function DPA_Grow Lib "comctl32" (ByVal hdpa As LongPtr, ByVal cp As Long) As BOOL
Public Declare PtrSafe Function DPA_InsertPtr Lib "comctl32" (ByVal hdpa As LongPtr, [TypeHint(DsaItemIndexSpecialValues)] ByVal i As Long, p As Any) As Long
Public Declare PtrSafe Function DPA_SetPtr Lib "comctl32" (ByVal hdpa As LongPtr, [TypeHint(DsaItemIndexSpecialValues)] ByVal i As Long, p As Any) As BOOL
Public Declare PtrSafe Function DPA_GetPtr Lib "comctl32" (ByVal hdpa As LongPtr, [TypeHint(DsaItemIndexSpecialValues)] ByVal i As Long) As LongPtr
Public Declare PtrSafe Function DPA_GetPtrIndex Lib "comctl32" (ByVal hdpa As LongPtr, p As Any) As Long
Public Declare PtrSafe Function DPA_GetSize Lib "comctl32" (ByVal hdpa As LongPtr) As LongLong
Public Declare PtrSafe Function DPA_Sort Lib "comctl32" (ByVal hdpa As LongPtr, ByVal pfnCompare As LongPtr, ByVal lParam As LongPtr) As BOOL
Public Declare PtrSafe Function DPA_LoadStream Lib "comctl32" (phdpa As LongPtr, ByVal pfn As LongPtr, ByVal pstream As IStream, Optional ByVal pvInstData As LongPtr) As Long
Public Declare PtrSafe Function DPA_SaveStream Lib "comctl32" (ByVal hdpa As LongPtr, ByVal pfn As LongPtr, ByVal pstream As IStream, Optional ByVal pvInstData As LongPtr) As Long
Public Declare PtrSafe Function DPA_Merge Lib "comctl32" (ByVal hdpaDest As LongPtr, ByVal hdpaSrc As LongPtr, ByVal dwFlags As DPAMergeFlags, ByVal pfnCompare As LongPtr, ByVal pfnMerge As LongPtr, ByVal lParam As LongPtr) As BOOL
Public Declare PtrSafe Function DPA_Search Lib "comctl32" (ByVal hdpa As LongPtr, pFind As Any, ByVal iStart As Long, ByVal pfnCompare As LongPtr, ByVal lParam As LongPtr, ByVal options As DPASearchFlags) As Long

Public Declare PtrSafe Function Str_GetPtrA Lib "comctl32" Alias "#233" (ByVal pszSource As String, ByVal pszDest As String, ByVal cchDest As Long) As Long
Public Declare PtrSafe Function Str_GetPtrW Lib "comctl32" Alias "#235" (ByVal pszSource As LongPtr, ByVal pszDest As LongPtr, ByVal cchDest As Long) As Long
Public Declare PtrSafe Function Str_SetPtrA Lib "comctl32" Alias "#234" (ppsz As LongPtr, ByVal psz As String) As BOOL
Public Declare PtrSafe Function Str_SetPtrW Lib "comctl32" (ppsz As LongPtr, ByVal psz As LongPtr) As BOOL


' #define DSA_GetItemCount(hdsa)      (*(int *)(hdsa))
Public Function DSA_GetItemCount(ByVal hdsa As LongPtr) As Long
    CopyMemory DSA_GetItemCount, ByVal hdsa, 4
End Function
' #define DSA_AppendItem(hdsa, pitem) DSA_InsertItem(hdsa, DA_LAST, pitem)
Public Function DSA_AppendItem(ByVal hdsa As LongPtr, ByVal pItem As LongPtr) As Long
    Return DSA_InsertItem(hdsa, DA_LAST, ByVal pItem)
End Function

' #define DPA_GetPtrCount(hdpa)       (*(int *)(hdpa))
Public Function DPA_GetPtrCount(ByVal hdpa As LongPtr) As Long
    CopyMemory DPA_GetPtrCount, ByVal hdpa, 4
End Function
' #define DPA_SetPtrCount(hdpa, cItems) (*(int *)(hdpa) = (cItems))
Public Sub DPA_SetPtrCount(ByVal hdpa As LongPtr, ByVal cItems As Long)
    CopyMemory ByVal hdpa, cItems, 4
End Sub
' #define DPA_FastDeleteLastPtr(hdpa) (--*(int *)(hdpa))
Public Sub DPA_FastDeleteLastPtr(ByVal hdpa As LongPtr)
    DPA_SetPtrCount hdpa, DPA_GetPtrCount(hdpa) - 1
End Sub
' #define DPA_GetPtrPtr(hdpa)         (*((void * **)((BYTE *)(hdpa) + sizeof(void *))))
Public Function DPA_GetPtrPtr(ByVal hdpa As LongPtr) As LongPtr
   CopyMemory DPA_GetPtrPtr, ByVal hdpa + LenB(Of LongPtr), LenB(Of LongPtr)
End Function
' #define DPA_FastGetPtr(hdpa, i)     (DPA_GetPtrPtr(hdpa)[i])
Public Function DPA_FastGetPtr(ByVal hdpa As LongPtr, ByVal i As Long) As LongPtr
    Dim ptr As LongPtr
    CopyMemory ptr, ByVal hdpa + LenB(Of LongPtr), LenB(Of LongPtr)
    CopyMemory DPA_FastGetPtr, ByVal ptr + (i * LenB(Of LongPtr)), LenB(Of LongPtr)
End Function
' #define DPA_AppendPtr(hdpa, pitem)  DPA_InsertPtr(hdpa, DA_LAST, pitem)
Public Function DPA_AppendPtr(ByVal hdpa As LongPtr, ByVal pItem As LongPtr) As Long
    Return DPA_InsertPtr(hdpa, DA_LAST, pItem)
End Function
' #define DPA_SortedInsertPtr(hdpa, pFind, iStart, pfnCompare, lParam, options, pitem)  \
' DPA_InsertPtr(hdpa, DPA_Search(hdpa, pFind, iStart, pfnCompare, lParam, (DPAS_SORTED | (options))), (pitem))
Public Function DPA_SortedInsertPtr(ByVal hdpa As LongPtr, ByVal pFind As LongPtr, ByVal iStart As Long, ByVal pfnCompare As LongPtr, ByVal lParam As LongPtr, ByVal options As DPASearchFlags, ByVal pItem As LongPtr) As Long
    Return DPA_InsertPtr(hdpa, DPA_Search(hdpa, pFind, iStart, pfnCompare, lParam, (DPAS_SORTED Or (options))), (pItem))
End Function




Public Enum LI_METRIC
    LIM_SMALL
    LIM_LARGE
End Enum

Public Enum ODControlTypes
	ODT_MENU = 1
	ODT_LISTBOX = 2
	ODT_COMBOBOX = 3
	ODT_BUTTON = 4
	ODT_STATIC = 5
End Enum
Public Enum ODActions
	ODA_DRAWENTIRE = &H0001
	ODA_SELECT = &H0002
	ODA_FOCUS = &H0004
End Enum
Public Enum ODDrawStates
	ODS_SELECTED = &H0001
	ODS_GRAYED = &H0002
	ODS_DISABLED = &H0004
	ODS_CHECKED = &H0008
	ODS_FOCUS = &H0010
' #if(WINVER >= 0x0400)
	ODS_DEFAULT = &H0020
	ODS_COMBOBOXEDIT = &H1000
' #endif /* WINVER >= 0x0400 */
' #if(WINVER >= 0x0500)
	ODS_HOTLIGHT = &H0040
	ODS_INACTIVE = &H0080
' #if(_WIN32_WINNT >= 0x0500)
	ODS_NOACCEL = &H0100
	ODS_NOFOCUSRECT = &H0200
End Enum


Public Type MEASUREITEMSTRUCT
	CtlType As ODControlTypes
	CtlID As Long
	itemID As Long
	itemWidth As Long
	itemHeight As Long
	itemData As LongPtr
End Type

Public Type DRAWITEMSTRUCT
	CtlType As ODControlTypes
	CtlID As Long
	itemID As Long
	itemAction As ODActions
	itemState As ODDrawStates
	hwndItem As LongPtr
	hDC As LongPtr
	rcItem As RECT
	itemData As LongPtr
End Type

Public Type DELETEITEMSTRUCT
    CtlType As ODControlTypes
    CtlID As Long
    itemID As Long
    hwndItem As LongPtr
    itemData As LongPtr
End Type

Public Type COMPAREITEMSTRUCT
    CtlType As Long
    CtlID As Long
    hwndItem As LongPtr
    itemID1 As Long
    itemData1 As LongPtr
    itemID2 As Long
    itemData2 As LongPtr
    dwLocaleId As Long
End Type

Public Enum MRU_FLAGS
    MRU_BINARY = &H0001
    MRU_CACHEWRITE = &H0002
End Enum
Public Type MRUINFOA
    cbSize As Long
    uMax As Long
    fFlags As MRU_FLAGS
    hKey As LongPtr
    lpszSubKey As String
    lpfnCompare As LongPtr 'MRUCMPPROC
End Type
Public Type MRUINFOW
    cbSize As Long
    uMax As Long
    fFlags As MRU_FLAGS
    hKey As LongPtr
    lpszSubKey As LongPtr
    lpfnCompare As LongPtr 'MRUCMPPROC
End Type
Public Type MRUINFO
    cbSize As Long
    uMax As Long
    fFlags As MRU_FLAGS
    hKey As LongPtr
    lpszSubKey As LongPtr
    lpfnCompare As LongPtr 'MRUCMPPROC
End Type

Public Declare PtrSafe Function CreateMRUListA Lib "comctl32" Alias "#151" (lpmi As MRUINFOA) As LongPtr
Public Declare PtrSafe Function CreateMRUListW Lib "comctl32" Alias "#400" (lpmi As MRUINFOW) As LongPtr
Public Declare PtrSafe Function CreateMRUList Lib "comctl32" Alias "#400" (lpmi As MRUINFO) As LongPtr
Public Declare PtrSafe Function CreateMRUListLazyA Lib "comctl32" Alias "#157" (lpmi As MRUINFOA, lpData As Any, ByVal cbData As Long, lpiSlot As Long) As LongPtr
Public Declare PtrSafe Function CreateMRUListLazyW Lib "comctl32" Alias "#404" (lpmi As MRUINFOW, lpData As Any, ByVal cbData As Long, lpiSlot As Long) As LongPtr
Public DeclareWide PtrSafe Function CreateMRUListLazy Lib "comctl32" Alias "#404" (lpmi As MRUINFO, lpData As Any, ByVal cbData As Long, lpiSlot As Long) As LongPtr
Public Declare PtrSafe Function AddMRUStringA Lib "comctl32" Alias "#153" (ByVal hMRU As LongPtr, ByVal szString As String) As Long
Public Declare PtrSafe Function AddMRUStringW Lib "comctl32" Alias "#401" (ByVal hMRU As LongPtr, ByVal szString As LongPtr) As Long
Public DeclareWide PtrSafe Function AddMRUString Lib "comctl32" Alias "#401" (ByVal hMRU As LongPtr, ByVal szString As String) As Long
Public DeclareWide PtrSafe Function AddMRUData Lib "comctl32" Alias "#167" (ByVal hMRU As LongPtr, lpData As Any, ByVal cbData As Long) As Long
Public Declare PtrSafe Function DelMRUString Lib "comctl32" Alias "#156" (ByVal hMRU As LongPtr, ByVal nItem As Long) As BOOL
Public Declare PtrSafe Function EnumMRUListA Lib "comctl32" Alias "#154" (ByVal hMRU As LongPtr, ByVal nItem As Long, lpData As Any, ByVal uLen As Long) As Long
Public Declare PtrSafe Function EnumMRUListW Lib "comctl32" Alias "#403" (ByVal hMRU As LongPtr, ByVal nItem As Long, lpData As Any, ByVal uLen As Long) As Long
Public DeclareWide PtrSafe Function EnumMRUList Lib "comctl32" Alias "#403" (ByVal hMRU As LongPtr, ByVal nItem As Long, lpData As Any, ByVal uLen As Long) As Long
Public Declare PtrSafe Function FindMRUStringA Lib "comctl32" Alias "#155" (ByVal hMRU As LongPtr, ByVal szString As String, lpiSlot As Long) As Long
Public Declare PtrSafe Function FindMRUStringW Lib "comctl32" Alias "#402" (ByVal hMRU As LongPtr, ByVal szString As LongPtr, lpiSlot As Long) As Long
Public DeclareWide PtrSafe Function FindMRUString Lib "comctl32" Alias "#402" (ByVal hMRU As LongPtr, ByVal szString As String, lpiSlot As Long) As Long
Public DeclareWide PtrSafe Function FindMRUData Lib "comctl32" Alias "#169" (ByVal hMRU As LongPtr, lpData As Any, ByVal cbData As Long, lpiSlot As Long) As Long
Public Declare PtrSafe Sub FreeMRUList Lib "comctl32" Alias "#152" ()


#End Region

#Region "Animation"
Public Const ANIMATE_CLASS = "SysAnimate32"

Public Const ACM_OPENA As Long = (WM_USER + 100)
Public Const ACM_OPENW As Long = (WM_USER + 103)
Public Const ACM_OPEN As Long = ACM_OPENW
Public Const ACM_PLAY As Long = (WM_USER + 101)
Public Const ACM_STOP As Long = (WM_USER + 102)
Public Const ACM_ISPLAYING As Long = (WM_USER + 104)

Public Const ACN_START As Long = &H1
Public Const ACN_STOP As Long = &H2

Public Enum AnimateStyles
	ACS_CENTER = &H0001
	ACS_TRANSPARENT = &H0002
	ACS_AUTOPLAY = &H0004
	ACS_TIMER = &H0008 ' don't use threads... use timers
End Enum
#End Region

#Region "Button"
Public Const WC_BUTTONA  = "Button"
Public Const WC_BUTTONW  = "Button"
Public Const WC_BUTTON  = WC_BUTTONW


Public Enum ButtonMessages
	BM_GETCHECK = &H00F0
	BM_SETCHECK = &H00F1
	BM_GETSTATE = &H00F2
	BM_SETSTATE = &H00F3
	BM_SETSTYLE = &H00F4
	BM_CLICK = &H00F5
	BM_GETIMAGE = &H00F6
	BM_SETIMAGE = &H00F7
	BM_SETDONTCLICK = &H00F8
	BCM_FIRST = &H1600
	BCM_GETIDEALSIZE = (BCM_FIRST + &H0001)
	BCM_SETIMAGELIST = (BCM_FIRST + &H0002)
	BCM_GETIMAGELIST = (BCM_FIRST + &H0003)
	BCM_SETTEXTMARGIN = (BCM_FIRST + &H0004)
	BCM_GETTEXTMARGIN = (BCM_FIRST + &H0005)
	BCM_SETDROPDOWNSTATE = (BCM_FIRST + &H0006)
	BCM_SETSPLITINFO = (BCM_FIRST + &H0007)
	BCM_GETSPLITINFO = (BCM_FIRST + &H0008)
	BCM_SETNOTE = (BCM_FIRST + &H0009)
	BCM_GETNOTE = (BCM_FIRST + &H000A)
	BCM_GETNOTELENGTH = (BCM_FIRST + &H000B)
	BCM_SETSHIELD = (BCM_FIRST + &H000C)
End Enum

Public Enum ButtonStates
    BST_UNCHECKED = &H0000
    BST_CHECKED = &H0001
    BST_INDETERMINAT = &H0002
    BST_PUSHED = &H0004
    BST_FOCUS = &H0008
	BST_HOT = &H0200
	BST_DROPDOWNPUSHED = &H0400
End Enum

Public Enum ButtonNotifications
	BN_CLICKED = 0
	BN_PAINT = 1
	BN_HILITE = 2
	BN_UNHILITE = 3
	BN_DISABLE = 4
	BN_DOUBLECLICKED = 5
	BN_PUSHED = BN_HILITE
	BN_UNPUSHED = BN_UNHILITE
	BN_DBLCLK = BN_DOUBLECLICKED
	BN_SETFOCUS = 6
	BN_KILLFOCUS = 7
	BCN_FIRST = (-1250)
	BCN_HOTITEMCHANGE = (BCN_FIRST + &H0001)
	BCN_DROPDOWN = (BCN_FIRST + &H0002)
	NM_GETCUSTOMSPLITRECT = (BCN_FIRST + &H0003)
End Enum

Public Enum ButtonStyles
	BS_SPLITBUTTON = &H0000000C
	BS_DEFSPLITBUTTON = &H0000000D
	BS_COMMANDLINK = &H0000000E
	BS_DEFCOMMANDLINK = &H0000000F
	BS_PUSHBUTTON = &H00000000
	BS_DEFPUSHBUTTON = &H00000001
	BS_CHECKBOX = &H00000002
	BS_AUTOCHECKBOX = &H00000003
	BS_RADIOBUTTON = &H00000004
	BS_3STATE = &H00000005
	BS_AUTO3STATE = &H00000006
	BS_GROUPBOX = &H00000007
	BS_USERBUTTON = &H00000008
	BS_AUTORADIOBUTTON = &H00000009
	BS_PUSHBOX = &H0000000A
	BS_OWNERDRAW = &H0000000B
	BS_TYPEMASK = &H0000000F
	BS_LEFTTEXT = &H00000020
	BS_TEXT = &H00000000
	BS_ICON = &H00000040
	BS_BITMAP = &H00000080
	BS_LEFT = &H00000100
	BS_RIGHT = &H00000200
	BS_CENTER = &H00000300
	BS_TOP = &H00000400
	BS_BOTTOM = &H00000800
	BS_VCENTER = &H00000C00
	BS_PUSHLIKE = &H00001000
	BS_MULTILINE = &H00002000
	BS_NOTIFY = &H00004000
	BS_FLAT = &H00008000&
	BS_RIGHTBUTTON = &H00000020
End Enum

Public Enum BUTTON_IMAGELIST_ALIGN
	BUTTON_IMAGELIST_ALIGN_LEFT = 0
	BUTTON_IMAGELIST_ALIGN_RIGHT = 1
	BUTTON_IMAGELIST_ALIGN_TOP = 2
	BUTTON_IMAGELIST_ALIGN_BOTTOM = 3
	BUTTON_IMAGELIST_ALIGN_CENTER = 4 ' Doesn't draw text
End Enum
Public Type BUTTON_IMAGELIST
    himl As LongPtr
    margin As RECT
    uAlign As BUTTON_IMAGELIST_ALIGN
End Type

Public Type NMBCHOTITEM
	hdr As NMHDR
	dwFlags As HIC_FLAGS ' HICF_*
End Type

Public Enum BCS_Mask
	BCSIF_GLYPH = &H0001
	BCSIF_IMAGE = &H0002
	BCSIF_STYLE = &H0004
	BCSIF_SIZE = &H0008
End Enum
Public Enum BCS_Style
	BCSS_NOSPLIT = &H0001
	BCSS_STRETCH = &H0002
	BCSS_ALIGNLEFT = &H0004
	BCSS_IMAGE = &H0008
End Enum
Public Type BUTTON_SPLITINFO
	mask As BCS_Mask
	himlGlyph As LongPtr ' interpreted as WCHAR if BCSIF_GLYPH is set
	uSplitStyle As BCS_Style
	size As SIZE
End Type

Public Const BCCL_NOGLYPH As Long = (-1)

Public Type NMBCDROPDOWN
    hdr As NMHDR
    rcButton As RECT
End Type


#End Region

#Region "Combo"
Public Const WC_COMBOBOXA = "ComboBox"
Public Const WC_COMBOBOXW = "ComboBox"
Public Const WC_COMBOBOX = WC_COMBOBOXW
Public Const WC_COMBOBOXEXA = "ComboBoxEx32"
Public Const WC_COMBOBOXEXW = "ComboBoxEx32"
Public Const WC_COMBOBOXEX = WC_COMBOBOXEXW

Public Const H_MAX As Long = (&HFFFF + 1)

Public Const CB_ADDSTRING = &H143
Public Const CB_DELETESTRING = &H144
Public Const CB_DIR = &H145
Public Const CB_FINDSTRING = &H14C
Public Const CB_FINDSTRINGEXACT = &H158
Public Const CB_GETCOMBOBOXINFO = &H164
Public Const CB_GETCOUNT = &H146
Public Const CB_GETCURSEL = &H147
Public Const CB_GETDROPPEDCONTROLRECT = &H152
Public Const CB_GETDROPPEDSTATE = &H157
Public Const CB_GETDROPPEDWIDTH = &H15F
Public Const CB_GETEDITSEL = &H140
Public Const CB_GETEXTENDEDUI = &H156
Public Const CB_GETHORIZONTALEXTENT = &H15D
Public Const CB_GETITEMDATA = &H150
Public Const CB_GETITEMHEIGHT = &H154
Public Const CB_GETLBTEXT = &H148
Public Const CB_GETLBTEXTLEN = &H149
Public Const CB_GETLOCALE = &H15A
Public Const CB_GETTOPINDEX = &H15B
Public Const CB_INITSTORAGE = &H161
Public Const CB_INSERTSTRING = &H14A
Public Const CB_LIMITTEXT = &H141
Public Const CB_MSGMAX = &H15B
Public Const CB_MULTIPLEADDSTRING = &H163
Public Const CB_RESETCONTENT = &H14B
Public Const CB_SELECTSTRING = &H14D
Public Const CB_SETCURSEL = &H14E
Public Const CB_SETDROPPEDWIDTH = &H160
Public Const CB_SETEDITSEL = &H142
Public Const CB_SETEXTENDEDUI = &H155
Public Const CB_SETHORIZONTALEXTENT = &H15E
Public Const CB_SETITEMDATA = &H151
Public Const CB_SETITEMHEIGHT = &H153
Public Const CB_SETLOCALE = &H159
Public Const CB_SETTOPINDEX = &H15C
Public Const CB_SHOWDROPDOWN = &H14F
Public Const CBEC_SETCOMBOFOCUS = (&H165 + 1)   ' ;internal_nt
Public Const CBEC_KILLCOMBOFOCUS = (&H165 + 2) ';internal_nt
Public Const CBM_FIRST As Long = &H1700&
Public Const CB_SETMINVISIBLE = (CBM_FIRST + 1)
Public Const CB_GETMINVISIBLE = (CBM_FIRST + 2)
Public Const CB_SETCUEBANNER = (CBM_FIRST + 3)
Public Const CB_GETCUEBANNER = (CBM_FIRST + 4)
Public Const CBEM_INSERTITEMA = (WM_USER + 1)
Public Const CBEM_SETIMAGELIST = (WM_USER + 2)
Public Const CBEM_GETIMAGELIST = (WM_USER + 3)
Public Const CBEM_GETITEMA = (WM_USER + 4)
Public Const CBEM_SETITEMA = (WM_USER + 5)
Public Const CBEM_DELETEITEM = CB_DELETESTRING
Public Const CBEM_GETCOMBOCONTROL = (WM_USER + 6)
Public Const CBEM_GETEDITCONTROL = (WM_USER + 7)
Public Const CBEM_SETEXTENDEDSTYLE = (WM_USER + 8)
Public Const CBEM_GETEXTENDEDSTYLE = (WM_USER + 9)
Public Const CBEM_HASEDITCHANGED = (WM_USER + 10)
Public Const CBEM_INSERTITEMW = (WM_USER + 11)
Public Const CBEM_SETITEMW = (WM_USER + 12)
Public Const CBEM_GETITEMW = (WM_USER + 13)
Public Const CBEM_INSERTITEM = CBEM_INSERTITEMW
Public Const CBEM_SETITEM = CBEM_SETITEMW
Public Const CBEM_GETITEM = CBEM_GETITEMW
Public Const CBEM_SETUNICODEFORMAT = CCM_SETUNICODEFORMAT '8192 + 5
Public Const CBEM_GETUNICODEFORMAT = CCM_GETUNICODEFORMAT '8192 + 6
Public Const CBEM_SETWINDOWTHEME = CCM_SETWINDOWTHEME '8192 + 11
Public Enum ComboBox_Styles
    CBS_SIMPLE = &H1&
    CBS_DROPDOWN = &H2&
    CBS_DROPDOWNLIST = &H3&
    CBS_OWNERDRAWFIXED = &H10&
    CBS_OWNERDRAWVARIABLE = &H20&
    CBS_AUTOHSCROLL = &H40
    CBS_OEMCONVERT = &H80
    CBS_SORT = &H100&
    CBS_HASSTRINGS = &H200&
    CBS_NOINTEGRALHEIGHT = &H400&
    CBS_DISABLENOSCROLL = &H800&
    CBS_UPPERCASE = &H2000
    CBS_LOWERCASE = &H4000
End Enum

'// Notification messages
Public Const CBN_ERRSPACE = (-1)
Public Const CBN_SELCHANGE = 1
Public Const CBN_DBLCLK = 2
Public Const CBN_SETFOCUS = 3
Public Const CBN_KILLFOCUS = 4
Public Const CBN_EDITCHANGE = 5
Public Const CBN_EDITUPDATE = 6
Public Const CBN_DROPDOWN = 7
Public Const CBN_CLOSEUP = 8
Public Const CBN_SELENDOK = 9
Public Const CBN_SELENDCANCEL = 10
Public Const CBEN_FIRST = (H_MAX - 800&)
Public Const CBEN_LAST = (H_MAX - 830&)
Public Const CBEN_GETDISPINFOA = (CBEN_FIRST - 0)
Public Const CBEN_GETDISPINFOW = (CBEN_FIRST - 7)
Public Const CBEN_GETDISPINFO = CBEN_GETDISPINFOW
Public Const CBEN_INSERTITEM = (CBEN_FIRST - 1)
Public Const CBEN_DELETEITEM = (CBEN_FIRST - 2)
Public Const CBEN_BEGINEDIT = (CBEN_FIRST - 4)
Public Const CBEN_ENDEDITA = (CBEN_FIRST - 5)
Public Const CBEN_ENDEDITW = (CBEN_FIRST - 6)
Public Const CBEN_ENDEDIT = CBEN_ENDEDITW
Public Const CBEN_DRAGBEGINA = (CBEN_FIRST - 8)
Public Const CBEN_DRAGBEGINW = (CBEN_FIRST - 9)
Public Const CBEN_DRAGBEGIN = CBEN_DRAGBEGINW
'// lParam specifies why the endedit is happening
Public Const CBENF_KILLFOCUS = 1
Public Const CBENF_RETURN = 2
Public Const CBENF_ESCAPE = 3
Public Const CBENF_DROPDOWN = 4

Public Enum CBEX_ExStyles
    CBES_EX_NOEDITIMAGE = &H1
    CBES_EX_NOEDITIMAGEINDENT = &H2
    CBES_EX_PATHWORDBREAKPROC = &H4
    CBES_EX_NOSIZELIMIT = &H8
    CBES_EX_CASESENSITIVE = &H10
    '6.0
    CBES_EX_TEXTENDELLIPSIS = &H20
End Enum
Public Type COMBOBOXEXITEM
    Mask As COMBOBOXEXITEM_Mask
    iItem As LongPtr
    pszText As String
    cchTextMax As Long
    iImage As Long
    iSelectedImage As Long
    iOverlay As Long
    iIndent As Long
    lParam As LongPtr
End Type
Public Type COMBOBOXEXITEMW
    Mask As COMBOBOXEXITEM_Mask
    iItem As LongPtr
    pszText As LongPtr      '// LPCSTR
    cchTextMax As Long
    iImage As Long
    iSelectedImage As Long
    iOverlay As Long
    iIndent As Long
    lParam As LongPtr
End Type
Public Enum COMBOBOXEXITEM_Mask
    CBEIF_TEXT = &H1
    CBEIF_IMAGE = &H2
    CBEIF_SELECTEDIMAGE = &H4
    CBEIF_OVERLAY = &H8
    CBEIF_INDENT = &H10
    CBEIF_LPARAM = &H20
    CBEIF_DI_SETITEM = &H10000000
End Enum
Public Type NMCOMBOBOXEX
    hdr As NMHDR
    ceItem As COMBOBOXEXITEM
End Type
Public Type NMCOMBOBOXEXW
    hdr As NMHDR
    ceItem As COMBOBOXEXITEMW
End Type

Public Const CBEMAXSTRLEN = 260

'// Drag notification struct
Public Type NMCBEDRAGBEGIN
    hdr As NMHDR
    iItemid As Long
    szText(0 To CBEMAXSTRLEN - 1) As Byte   '// As String * CBEMAXSTRLEN
End Type
Public Type NMCBEDRAGBEGINW
    hdr As NMHDR
    iItemid As Long
    szText(0 To CBEMAXSTRLEN - 1) As Integer   '// As String * CBEMAXSTRLEN
End Type

'// CBEN_ENDEDIT sends this information...
'// fChanged if the user actually did anything
'// iNewSelection gives what would be the new selection unless the notify is failed
'// iNewSelection may be CB_ERR if there's no match
Public Type NMCBEENDEDIT
    hdr As NMHDR
    fChanged As Long
    iNewSelection As Long
    szText(0 To CBEMAXSTRLEN - 1) As Byte   '// As String * CBEMAXSTRLEN
    iWhy As Long
End Type
Public Type NMCBEENDEDITW
    hdr As NMHDR
    fChanged As Long
    iNewSelection As Long
    szText(0 To CBEMAXSTRLEN - 1) As Integer   '// As String * CBEMAXSTRLEN
    iWhy As Long
End Type

Public Type COMBOBOXINFO
    cbSize As Long
    RCItem As RECT
    rcButton As RECT
    stateButton As Long
    hWndCombo As LongPtr
    hWndItem As LongPtr
    hwndList As LongPtr
End Type
Public Declare PtrSafe Function GetComboBoxInfo Lib "user32" (ByVal hWndCombo As LongPtr, pcbi As COMBOBOXINFO) As Long


	
#End Region

#Region "Dialog"
Public Const WC_DIALOG = "#32770"

[Description("⚠️ **WARNING:** Use GWLP_Dialog values with Get/SetWindowLongPtr on 64bit")]
Public Enum GWL_Dialog
    DWL_MSGRESULT = 0
    DWL_DLGPROC = 4
    DWL_USER = 8
End Enum
[Description("⚠️ **WARNING:** Use GWL_Dialog values with Get/SetWindowLongPtr on 32bit")]
Public Enum GWLP_Dialog
    DWLP_MSGRESULT = 0
    DWLP_DLGPROC = DWLP_MSGRESULT + LenB(Of LongPtr)
    DWLP_USER = DWLP_DLGPROC + LenB(Of LongPtr)
End Enum

Public Enum DlgDL_Flags
    DDL_READWRITE = &H0000
    DDL_READONLY = &H0001
    DDL_HIDDEN = &H0002
    DDL_SYSTEM = &H0004
    DDL_DIRECTORY = &H0010
    DDL_ARCHIVE = &H0020
    DDL_POSTMSGS = &H2000
    DDL_DRIVES = &H4000
    DDL_EXCLUSIVE = &H8000&
End Enum

Public Enum DialogStyles
    DS_ABSALIGN = &H01
    DS_SYSMODAL = &H02
    DS_LOCALEDIT = &H20 /* 16-bit: Edit items get Local storage. 32-bit and up: meaningless. */
    DS_SETFONT = &H40 /* User specified font for Dlg controls */
    DS_MODALFRAME = &H80 /* Can be combined with WS_CAPTION */
    DS_NOIDLEMSG = &H100 /* WM_ENTERIDLE message will not be sent */
    DS_SETFOREGROUND = &H200 /* not in win3.1 */
    DS_3DLOOK = &H0004
    DS_FIXEDSYS = &H0008
    DS_NOFAILCREATE = &H0010
    DS_CONTROL = &H0400
    DS_CENTER = &H0800
    DS_CENTERMOUSE = &H1000
    DS_CONTEXTHELP = &H2000
    DS_SHELLFONT = (DS_SETFONT Or DS_FIXEDSYS)
    DS_USEPIXELS = &H8000&
End Enum

[Description("style also includes control-specific styles")]
[PackingAlignment(2)]
Public Type DLGITEMTEMPLATE
    style As WindowStyles
    dwExtendedStyle As WindowStylesEx
    x As Integer
    y As Integer
    cx As Integer
    cy As Integer
    id As Integer
End Type
[Description("style can also be DialogStyles entries")]
[PackingAlignment(2)]
Public Type DLGTEMPLATE
    style As WindowStyles
    dwExtendedStyle As WindowStylesEx
    x As Integer
    y As Integer
    cx As Integer
    cy As Integer
    id As Integer
End Type

Public Enum DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS
    DCDC_DEFAULT = &H0000
    DCDC_DISABLE_FONT_UPDATE = &H0001
    DCDC_DISABLE_RELAYOUT = &H0002
End Enum
Public Enum DIALOG_DPI_CHANGE_BEHAVIORS
    DDC_DEFAULT = &H0000
    DDC_DISABLE_ALL = &H0001
    DDC_DISABLE_RESIZE = &H0002
    DDC_DISABLE_CONTROL_RELAYOUT = &H0004
End Enum

Public Const DM_GETDEFID  = (WM_USER + 0)
Public Const DM_SETDEFID  = (WM_USER + 1)
Public Const DM_REPOSITION  = (WM_USER + 2)
[Description("Returned in HIWORD() of DM_GETDEFID result if msg Is supported")] Public Const DC_HASDEFID  = &H534B

Public Enum DialogCodes
    DLGC_WANTARROWS = &H0001 /* Control wants arrow keys */
    DLGC_WANTTAB = &H0002 /* Control wants tab keys */
    DLGC_WANTALLKEYS = &H0004 /* Control wants all keys */
    DLGC_WANTMESSAGE = &H0004 /* Pass message to control */
    DLGC_HASSETSEL = &H0008 /* Understands EM_SETSEL message */
    DLGC_DEFPUSHBUTTON = &H0010 /* Default pushbutton */
    DLGC_UNDEFPUSHBUTTON = &H0020 /* Non-default pushbutton */
    DLGC_RADIOBUTTON = &H0040 /* Radio button */
    DLGC_WANTCHARS = &H0080 /* Want WM_CHAR messages */
    DLGC_STATIC = &H0100 /* Static item: don't include */
    DLGC_BUTTON = &H2000 /* Button item: can be checked */
End Enum

Public Const DLGWINDOWEXTRA = 30

Public Declare PtrSafe Function CreateDialogParamA Lib "user32" (ByVal hInstance As LongPtr, ByVal lpName As String, Optional ByVal hWndParent As LongPtr = 0, Optional ByVal lpDialogFunc As LongPtr = 0, Optional ByVal dwInitParam As LongPtr = 0) As LongPtr
Public Declare PtrSafe Function CreateDialogParamW Lib "user32" (ByVal hInstance As LongPtr, ByVal lpName As LongPtr, Optional ByVal hWndParent As LongPtr = 0, Optional ByVal lpDialogFunc As LongPtr = 0, Optional ByVal dwInitParam As LongPtr = 0) As LongPtr
Public DeclareWide PtrSafe Function CreateDialogParam Lib "user32" Alias "CreateDialogParamW" (ByVal hInstance As LongPtr, ByVal lpName As String, Optional ByVal hWndParent As LongPtr = 0, Optional ByVal lpDialogFunc As LongPtr = 0, Optional ByVal dwInitParam As LongPtr = 0) As LongPtr
Public Declare PtrSafe Function CreateDialogIndirectParamA Lib "user32" (ByVal hInstance As LongPtr, lpTemplate As Any, Optional ByVal hWndParent As LongPtr = 0, Optional ByVal lpDialogFunc As LongPtr = 0, Optional ByVal dwInitParam As LongPtr = 0) As LongPtr
Public DeclareWide PtrSafe Function CreateDialogIndirectParamW Lib "user32" (ByVal hInstance As LongPtr, lpTemplate As Any, Optional ByVal hWndParent As LongPtr = 0, Optional ByVal lpDialogFunc As LongPtr = 0, Optional ByVal dwInitParam As LongPtr = 0) As LongPtr
Public DeclareWide PtrSafe Function CreateDialogIndirectParam Lib "user32" Alias "CreateDialogIndirectParamW" (ByVal hInstance As LongPtr, lpTemplate As Any, Optional ByVal hWndParent As LongPtr = 0, Optional ByVal lpDialogFunc As LongPtr = 0, Optional ByVal dwInitParam As LongPtr = 0) As LongPtr
Public Declare PtrSafe Function DefDlgProcA Lib "user32" (ByVal hDlg As LongPtr, ByVal uMsg As Long, ByVal wParam As LongPtr, lParam As Any) As LongPtr
Public DeclareWide PtrSafe Function DefDlgProcW Lib "user32" (ByVal hDlg As LongPtr, ByVal uMsg As Long, ByVal wParam As LongPtr, lParam As Any) As LongPtr
Public DeclareWide PtrSafe Function DefDlgProc Lib "user32" Alias "DefDlgProcW" (ByVal hDlg As LongPtr, ByVal uMsg As Long, ByVal wParam As LongPtr, lParam As Any) As LongPtr
Public Declare PtrSafe Function DialogBoxParamA Lib "user32" (ByVal hInstance As LongPtr, ByVal lpTemplateName As String, Optional ByVal hWndParent As LongPtr = 0, Optional ByVal lpDialogFunc As LongPtr = 0, Optional ByVal dwInitParam As LongPtr = 0) As LongPtr
Public Declare PtrSafe Function DialogBoxParamW Lib "user32" (ByVal hInstance As LongPtr, ByVal lpTemplateName As LongPtr, Optional ByVal hWndParent As LongPtr = 0, Optional ByVal lpDialogFunc As LongPtr = 0, Optional ByVal dwInitParam As LongPtr = 0) As LongPtr
Public DeclareWide PtrSafe Function DialogBoxParam Lib "user32" Alias "DialogBoxParamW" (ByVal hInstance As LongPtr, ByVal lpTemplateName As String, Optional ByVal hWndParent As LongPtr = 0, Optional ByVal lpDialogFunc As LongPtr = 0, Optional ByVal dwInitParam As LongPtr = 0) As LongPtr
Public Declare PtrSafe Function DialogBoxIndirectParamA Lib "user32" (ByVal hInstance As LongPtr, hDialogTemplate As Any, Optional ByVal hWndParent As LongPtr = 0, Optional ByVal lpDialogFunc As LongPtr = 0, Optional ByVal dwInitParam As LongPtr = 0) As LongPtr
Public DeclareWide PtrSafe Function DialogBoxIndirectParamW Lib "user32" (ByVal hInstance As LongPtr, hDialogTemplate As Any, Optional ByVal hWndParent As LongPtr = 0, Optional ByVal lpDialogFunc As LongPtr = 0, Optional ByVal dwInitParam As LongPtr = 0) As LongPtr
Public DeclareWide PtrSafe Function DialogBoxIndirectParam Lib "user32" Alias "DialogBoxIndirectParamW" (ByVal hInstance As LongPtr, hDialogTemplate As Any, Optional ByVal hWndParent As LongPtr = 0, Optional ByVal lpDialogFunc As LongPtr = 0, Optional ByVal dwInitParam As LongPtr = 0) As LongPtr
Public Declare PtrSafe Function EndDialog Lib "user32" (ByVal hDlg As LongPtr, ByVal nResult As LongPtr) As BOOL
Public Declare PtrSafe Function GetDialogBaseUnits Lib "user32" () As Long
Public Declare PtrSafe Function GetDlgCtrlID Lib "user32" (ByVal hWnd As LongPtr) As Long
Public Declare PtrSafe Function GetDlgItem Lib "user32" (ByVal hDlg As LongPtr, ByVal nIDDlgItem As Long) As LongPtr
Public Declare PtrSafe Function GetDlgItemInt Lib "user32" (ByVal hDlg As LongPtr, ByVal nIDDlgItem As Long, lpTranslated As BOOL, ByVal bSigned As BOOL) As Long
Public Declare PtrSafe Function GetDlgItemTextA Lib "user32" (ByVal hDlg As LongPtr, ByVal nIDDlgItem As Long, ByVal lpString As String, ByVal cchMax As Long) As Long
Public Declare PtrSafe Function GetDlgItemTextW Lib "user32" (ByVal hDlg As LongPtr, ByVal nIDDlgItem As Long, ByVal lpString As LongPtr, ByVal cchMax As Long) As Long
Public DeclareWide PtrSafe Function GetDlgItemText Lib "user32" Alias "GetDlgItemTextW" (ByVal hDlg As LongPtr, ByVal nIDDlgItem As Long, ByVal lpString As String, ByVal cchMax As Long) As Long
Public Declare PtrSafe Function GetNextDlgGroupItem Lib "user32" (ByVal hDlg As LongPtr, ByVal hCtl As LongPtr, ByVal bPrevious As BOOL) As LongPtr
Public Declare PtrSafe Function GetNextDlgTabItem Lib "user32" (ByVal hDlg As LongPtr, ByVal hCtl As LongPtr, ByVal bPrevious As BOOL) As LongPtr
Public Declare PtrSafe Function IsDialogMessageA Lib "user32" (ByVal hDlg As LongPtr, lpMsg As MSG) As BOOL
Public Declare PtrSafe Function IsDialogMessageW Lib "user32" (ByVal hDlg As LongPtr, lpMsg As MSG) As BOOL
Public DeclareWide PtrSafe Function IsDialogMessage Lib "user32" Alias "IsDialogMessageW" (ByVal hDlg As LongPtr, lpMsg As MSG) As BOOL
Public Declare PtrSafe Function MapDialogRect Lib "user32" (ByVal hDlg As LongPtr, lpRect As RECT) As BOOL
Public Declare PtrSafe Function SendDlgItemMessageA Lib "user32" (ByVal hDlg As LongPtr, ByVal nIDDlgItem As Long, ByVal uMsg As Long, ByVal wParam As LongPtr, lParam As Any) As LongPtr
Public DeclareWide PtrSafe Function SendDlgItemMessageW Lib "user32" (ByVal hDlg As LongPtr, ByVal nIDDlgItem As Long, ByVal uMsg As Long, ByVal wParam As LongPtr, lParam As Any) As LongPtr
Public DeclareWide PtrSafe Function SendDlgItemMessage Lib "user32" Alias "SendDlgItemMessageW" (ByVal hDlg As LongPtr, ByVal nIDDlgItem As Long, ByVal uMsg As Long, ByVal wParam As LongPtr, lParam As Any) As LongPtr
Public Declare PtrSafe Function SetDlgItemInt Lib "user32" (ByVal hDlg As LongPtr, ByVal nIDDlgItem As Long, ByVal uValue As Long, ByVal bSigned As BOOL) As BOOL
Public Declare PtrSafe Function SetDlgItemTextA Lib "user32" (ByVal hDlg As LongPtr, ByVal nIDDlgItem As Long, ByVal lpString As String) As BOOL
Public Declare PtrSafe Function SetDlgItemTextW Lib "user32" (ByVal hDlg As LongPtr, ByVal nIDDlgItem As Long, ByVal lpString As LongPtr) As BOOL
Public DeclareWide PtrSafe Function SetDlgItemText Lib "user32" Alias "SetDlgItemTextW" (ByVal hDlg As LongPtr, ByVal nIDDlgItem As Long, ByVal lpString As String) As BOOL
Public Declare PtrSafe Function CheckDlgButton Lib "user32" (ByVal hDlg As LongPtr, ByVal nIDButton As Long, ByVal uCheck As ButtonStates) As BOOL
Public Declare PtrSafe Function CheckRadioButton Lib "user32" (ByVal hDlg As LongPtr, ByVal nIDFirstButton As Long, ByVal nIDLastButton As Long, ByVal nIDCheckButton As Long) As BOOL
Public Declare PtrSafe Function IsDlgButtonChecked Lib "user32" (ByVal hDlg As LongPtr, ByVal nIDButton As Long) As Long
Public Declare PtrSafe Function GetDialogControlDpiChangeBehavior Lib "user32" (ByVal hwnd As LongPtr) As DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS
Public Declare PtrSafe Function SetDialogControlDpiChangeBehavior Lib "user32" (ByVal hwnd As LongPtr, ByVal mask As DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS, ByVal values As DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS) As BOOL
Public Declare PtrSafe Function GetDialogDpiChangeBehavior Lib "user32" (ByVal hDlg As LongPtr) As DIALOG_DPI_CHANGE_BEHAVIORS
Public Declare PtrSafe Function SetDialogDpiChangeBehavior Lib "user32" (ByVal hDlg As LongPtr, ByVal mask As DIALOG_DPI_CHANGE_BEHAVIORS, ByVal values As DIALOG_DPI_CHANGE_BEHAVIORS) As BOOL
Public Declare PtrSafe Function DlgDirListA Lib "user32" (ByVal hDlg As LongPtr, ByVal lpPathSpec As String, ByVal nIDListBox As Long, ByVal nIDStaticPath As Long, ByVal uFileType As DlgDL_Flags) As Long
Public Declare PtrSafe Function DlgDirListW Lib "user32" (ByVal hDlg As LongPtr, ByVal lpPathSpec As LongPtr, ByVal nIDListBox As Long, ByVal nIDStaticPath As Long, ByVal uFileType As DlgDL_Flags) As Long
Public DeclareWide PtrSafe Function DlgDirList Lib "user32" Alias "DlgDirListW" (ByVal hDlg As LongPtr, ByVal lpPathSpec As String, ByVal nIDListBox As Long, ByVal nIDStaticPath As Long, ByVal uFileType As DlgDL_Flags) As Long
Public Declare PtrSafe Function DlgDirSelectExA Lib "user32" (ByVal hDlg As LongPtr, ByVal lpString As String, ByVal chCount As Long, ByVal idListBox As Long) As BOOL
Public Declare PtrSafe Function DlgDirSelectExW Lib "user32" (ByVal hDlg As LongPtr, ByVal lpString As LongPtr, ByVal chCount As Long, ByVal idListBox As Long) As BOOL
Public DeclareWide PtrSafe Function DlgDirSelectEx Lib "user32" Alias "DlgDirListW" (ByVal hDlg As LongPtr, ByVal lpString As String, ByVal chCount As Long, ByVal idListBox As Long) As BOOL
Public Declare PtrSafe Function DlgDirListComboBoxA Lib "user32" (ByVal hDlg As LongPtr, ByVal lpPathSpec As String, ByVal nIDComboBox As Long, ByVal nIDStaticPath As Long, ByVal uFileType As DlgDL_Flags) As Long
Public Declare PtrSafe Function DlgDirListComboBoxW Lib "user32" (ByVal hDlg As LongPtr, ByVal lpPathSpec As LongPtr, ByVal nIDComboBox As Long, ByVal nIDStaticPath As Long, ByVal uFileType As DlgDL_Flags) As Long
Public DeclareWide PtrSafe Function DlgDirListComboBox Lib "user32" Alias "DlgDirListComboBoxW" (ByVal hDlg As LongPtr, ByVal lpPathSpec As String, ByVal nIDComboBox As Long, ByVal nIDStaticPath As Long, ByVal uFileType As DlgDL_Flags) As Long
Public Declare PtrSafe Function DlgDirSelectComboBoxExA Lib "user32" (ByVal hwndDlg As LongPtr, ByVal lpString As String, ByVal chCount As Long, ByVal idComboBox As Long) As BOOL
Public Declare PtrSafe Function DlgDirSelectComboBoxExW Lib "user32" (ByVal hwndDlg As LongPtr, ByVal lpString As LongPtr, ByVal chCount As Long, ByVal idComboBox As Long) As BOOL
Public DeclareWide PtrSafe Function DlgDirSelectComboBoxEx Lib "user32" Alias "DlgDirSelectComboBoxExW" (ByVal hwndDlg As LongPtr, ByVal lpString As String, ByVal chCount As Long, ByVal idComboBox As Long) As BOOL

Public Sub CreateDialogW(ByVal hInstance As LongPtr, ByVal lpName As LongPtr, Optional ByVal hWndParent As LongPtr = 0, Optional ByVal lpDialogFunc As LongPtr = 0)
    CreateDialogParamW(hInstance, lpName, hWndParent, lpDialogFunc, 0)
End Sub
Public Sub CreateDialog(ByVal hInstance As LongPtr, ByVal lpName As String, Optional ByVal hWndParent As LongPtr = 0, Optional ByVal lpDialogFunc As LongPtr = 0)
    CreateDialogParam(hInstance, lpName, hWndParent, lpDialogFunc, 0)
End Sub
Public Sub CreateDialogIndirectW(ByVal hInstance As LongPtr, ByVal lpTemplate As LongPtr, Optional ByVal hWndParent As LongPtr = 0, Optional ByVal lpDialogFunc As LongPtr = 0)
    CreateDialogIndirectParamW(hInstance, ByVal lpTemplate, hWndParent, lpDialogFunc, 0)
End Sub
Public Sub CreateDialogIndirect(ByVal hInstance As LongPtr, ByVal lpTemplate As LongPtr, Optional ByVal hWndParent As LongPtr = 0, Optional ByVal lpDialogFunc As LongPtr = 0)
    CreateDialogIndirectParam(hInstance, ByVal lpTemplate, hWndParent, lpDialogFunc, 0)
End Sub
Public Sub DialogBoxW(ByVal hInstance As LongPtr, ByVal lpTemplateName As LongPtr, Optional ByVal hWndParent As LongPtr = 0, Optional ByVal lpDialogFunc As LongPtr = 0)
    DialogBoxParamW(hInstance, lpTemplateName, hWndParent, lpDialogFunc, 0)
End Sub
Public Sub DialogBox(ByVal hInstance As LongPtr, ByVal lpTemplateName As String, Optional ByVal hWndParent As LongPtr = 0, Optional ByVal lpDialogFunc As LongPtr = 0)
    DialogBoxParam(hInstance, lpTemplateName, hWndParent, lpDialogFunc, 0)
End Sub
Public Sub DialogBoxIndirectW(ByVal hInstance As LongPtr, ByVal hDialogTemplate As LongPtr, Optional ByVal hWndParent As LongPtr = 0, Optional ByVal lpDialogFunc As LongPtr = 0)
    DialogBoxIndirectParamW(hInstance, ByVal hDialogTemplate, hWndParent, lpDialogFunc, 0)
End Sub
Public Sub DialogBoxIndirect(ByVal hInstance As LongPtr, ByVal hDialogTemplate As LongPtr, Optional ByVal hWndParent As LongPtr = 0, Optional ByVal lpDialogFunc As LongPtr = 0)
    DialogBoxIndirectParam(hInstance, ByVal hDialogTemplate, hWndParent, lpDialogFunc, 0)
End Sub

#End Region

#Region "DragList"

Public Enum DragListNotifications
    DL_BEGINDRAG = (WM_USER + 133)
    DL_DRAGGING = (WM_USER + 134)
    DL_DROPPED = (WM_USER + 135)
    DL_CANCELDRAG = (WM_USER + 136)
End Enum
Public Type DRAGLISTINFO
    uNotification As DragListNotifications
    hWnd As LongPtr
    ptCursor As POINT
End Type

Public Const DL_CURSORSET  = 0
Public Const DL_STOPCURSOR  = 1
Public Const DL_COPYCURSOR  = 2
Public Const DL_MOVECURSOR  = 3

Public Const DRAGLISTMSGSTRING  = "commctrl_DragListMsg"

Public Declare PtrSafe Function MakeDragList Lib "comctl32" (ByVal hLB As LongPtr) As BOOL
Public Declare PtrSafe Sub DrawInsert Lib "comctl32" (ByVal handParent As LongPtr, ByVal hLB As LongPtr, ByVal nItem As Long)

Public Declare PtrSafe Function LBItemFromPt Lib "comctl32" (ByVal hLB As LongPtr, ByVal PXY As LongLong, ByVal bAutoScroll As BOOL) As Long


#End Region


#Region "DTPicker"
Public Const DATETIMEPICK_CLASS = "SysDateTimePick32"

Public Const DTM_FIRST                     As Long = &H1000
Public Const DTM_GETSYSTEMTIME             As Long = (DTM_FIRST + 1)
Public Const DTM_SETSYSTEMTIME             As Long = (DTM_FIRST + 2)
Public Const DTM_SETRANGE                  As Long = (DTM_FIRST + 4)
Public Const DTM_SETFORMATA                As Long = (DTM_FIRST + 5)
Public Const DTM_SETMCCOLOR                As Long = (DTM_FIRST + 6)
Public Const DTM_GETMCCOLOR                As Long = (DTM_FIRST + 7)
Public Const DTM_GETMONTHCAL               As Long = (DTM_FIRST + 8)
Public Const DTM_SETMCFONT                 As Long = (DTM_FIRST + 9)
Public Const DTM_GETMCFONT                 As Long = (DTM_FIRST + 10)
Public Const DTM_SETMCSTYLE                As Long = (DTM_FIRST + 11) ' ; >= Vista
Public Const DTM_GETMCSTYLE                As Long = (DTM_FIRST + 12) ' ; >= Vista
Public Const DTM_CLOSEMONTHCAL             As Long = (DTM_FIRST + 13) '; >= Vista
Public Const DTM_GETDATETIMEPICKERINFO     As Long = (DTM_FIRST + 14) '; >= Vista
Public Const DTM_GETIDEALSIZE              As Long = (DTM_FIRST + 15)
Public Const DTM_SETFORMATW                As Long = (DTM_FIRST + 50)

Public Const DTM_SETFORMAT = DTM_SETFORMATW


Public Const DTN_FIRST                     As Long = (-760)
Public Const DTN_LAST                      As Long = (-799)
Public Const DTN_DATETIMECHANGE            As Long = (DTN_FIRST + 1)
Public Const DTN_USERSTRINGA               As Long = (DTN_FIRST + 2)
Public Const DTN_WMKEYDOWNA                As Long = (DTN_FIRST + 3)
Public Const DTN_FORMATA                   As Long = (DTN_FIRST + 4)
Public Const DTN_FORMATQUERYA              As Long = (DTN_FIRST + 5)
Public Const DTN_DROPDOWN                  As Long = (DTN_FIRST + 6)
Public Const DTN_CLOSEUP                   As Long = (DTN_FIRST + 7)
Public Const DTN_USERSTRINGW               As Long = (DTN_FIRST + 15)
Public Const DTN_WMKEYDOWNW                As Long = (DTN_FIRST + 16)
Public Const DTN_FORMATW                   As Long = (DTN_FIRST + 17)
Public Const DTN_FORMATQUERYW              As Long = (DTN_FIRST + 18)

Public Const DTN_USERSTRING = DTN_USERSTRINGW
Public Const DTN_WMKEYDOWN = DTN_WMKEYDOWNW
Public Const DTN_FORMAT = DTN_FORMATW
Public Const DTN_FORMATQUERY = DTN_FORMATQUERYW


Public Enum GetDateTimeFlags
    GDT_ERROR = -1
    GDT_VALID = 0
    GDT_NONE = 1
    GDTR_MAX = &H2
    GDTR_MIN = &H1
End Enum

Public Enum DTSTYLES
    DTS_SHORTDATEFORMAT = &H0
    DTS_UPDOWN = &H1
    DTS_SHOWNONE = &H2
    DTS_LongDATEFORMAT = &H4
    DTS_TIMEFORMAT = &H9
    DTS_APPCANPARSE = &H10
    DTS_RIGHTALIGN = &H20
    DTS_SHORTDATECENTURYFORMAT = &HC
End Enum

Public Type DATETIMEPICKERINFO
	cbSize As Long
	rcCheck As RECT
	stateCheck As Long
	rcButton As RECT
	stateButton As Long
	hwndEdit As LongPtr
	hwndUD As LongPtr
	hwndDropDown As LongPtr
End Type

Public Type NMDATETIMECHANGE
    NMHDR                       As NMHDR
    Flags                       As GetDateTimeFlags
    ST                          As SYSTEMTIME
End Type

Public Type NMDATETIMESTRINGW
	nmhdr As NMHDR
	pszUserString As LongPtr ' string user entered
	st As SYSTEMTIME ' app fills this in
	dwFlags As GetDateTimeFlags ' GDT_VALID or GDT_NONE
End Type
'Alias NMDATETIMESTRING As NMDATETIMESTRINGW
Public Type NMDATETIMESTRING
    nmhdr As NMHDR
    pszUserString As LongPtr ' string user entered
    st As SYSTEMTIME ' app fills this in
    dwFlags As GetDateTimeFlags ' GDT_VALID or GDT_NONE
End Type
Public Type NMDATETIMESTRINGA
	nmhdr As NMHDR
	pszUserString As String ' string user entered
	st As SYSTEMTIME ' app fills this in
	dwFlags As GetDateTimeFlags ' GDT_VALID or GDT_NONE
End Type

Public Type NMDATETIMEWMKEYDOWNW
	nmhdr As NMHDR
	nVirtKey As Long ' virtual key code of WM_KEYDOWN which MODIFIES an X field
	pszFormat As LongPtr ' format substring
	st As SYSTEMTIME ' current systemtime, app should modify based on key
End Type
Public Type NMDATETIMEWMKEYDOWN
    nmhdr As NMHDR
    nVirtKey As Long ' virtual key code of WM_KEYDOWN which MODIFIES an X field
    pszFormat As LongPtr ' format substring
    st As SYSTEMTIME ' current systemtime, app should modify based on key
End Type
Public Type NMDATETIMEWMKEYDOWNA
	nmhdr As NMHDR
	nVirtKey As Long ' virtual key code of WM_KEYDOWN which MODIFIES an X field
	pszFormat As String ' format substring
	st As SYSTEMTIME ' current systemtime, app should modify based on key
End Type

Public Type NMDATETIMEFORMATW
	nmhdr As NMHDR
	pszFormat As LongPtr ' format substring
	st As SYSTEMTIME ' current systemtime
	pszDisplay As LongPtr ' string to display
	szDisplay(0 To 63) As Integer ' buffer pszDisplay originally points at
End Type
Public Type NMDATETIMEFORMAT
    nmhdr As NMHDR
    pszFormat As LongPtr ' format substring
    st As SYSTEMTIME ' current systemtime
    pszDisplay As LongPtr ' string to display
    szDisplay(0 To 63) As Integer ' buffer pszDisplay originally points at
End Type
Public Type NMDATETIMEFORMATA
	nmhdr As NMHDR
	pszFormat As String ' format substring
	st As SYSTEMTIME ' current systemtime
	pszDisplay As String ' string to display
	szDisplay(0 To 63) As Byte ' buffer pszDisplay originally points at
End Type

Public Type NMDATETIMEFORMATQUERYW
	nmhdr As NMHDR
	pszFormat As LongPtr ' format substring
	szMax As SIZE ' max bounding rectangle app will use for this format string
End Type
Public Type NMDATETIMEFORMATQUERY
    nmhdr As NMHDR
    pszFormat As LongPtr ' format substring
    szMax As SIZE ' max bounding rectangle app will use for this format string
End Type
Public Type NMDATETIMEFORMATQUERYA
	nmhdr As NMHDR
	pszFormat As String ' format substring
	szMax As SIZE ' max bounding rectangle app will use for this format string
End Type
#End Region

#Region "Edit"
Public Const WC_EDITA = "Edit"
Public Const WC_EDITW = "Edit"
Public Const WC_EDIT = WC_EDITW

Public Enum EditBoxStyles
    ES_LEFT = &H0
    ES_CENTER = &H1
    ES_RIGHT = &H2
    ES_MULTILINE = &H4
    ES_UPPERCASE = &H8
    ES_LOWERCASE = &H10
    ES_PASSWORD = &H20
    ES_AUTOVSCROLL = &H40
    ES_AUTOHSCROLL = &H80
    ES_NOHIDESEL = &H100
    ES_READONLY = &H800
    ES_NUMBER = &H2000
    ES_WANTRETURN = &H1000
End Enum
Public Enum EditBoxStylesEx 'Windows 10 Redstone 5 (1809)+
	ES_EX_ALLOWEOL_CR = &H0001
	ES_EX_ALLOWEOL_LF = &H0002
	ES_EX_ALLOWEOL_ALL = (ES_EX_ALLOWEOL_CR Or ES_EX_ALLOWEOL_LF)
	ES_EX_CONVERT_EOL_ON_PASTE = &H0004
    ES_EX_ZOOMABLE = &H0010
End Enum

Public Const EM_GETSEL = &HB0
Public Const EM_SETSEL = &HB1
Public Const EM_GETRECT = &HB2
Public Const EM_SETRECT = &HB3
Public Const EM_SETRECTNP = &HB4
Public Const EM_SCROLL = &HB5
Public Const EM_LINESCROLL = &HB6
Public Const EM_SCROLLCARET = &HB7
Public Const EM_GETMODIFY = &HB8
Public Const EM_SETMODIFY = &HB9
Public Const EM_GETLINECOUNT = &HBA
Public Const EM_LINEINDEX = &HBB
Public Const EM_SETHANDLE = &HBC
Public Const EM_GETHANDLE = &HBD
Public Const EM_GETTHUMB = &HBE
Public Const EM_LINELENGTH = &HC1
Public Const EM_REPLACESEL = &HC2
Public Const EM_GETLINE = &HC4
Public Const EM_LIMITTEXT = &HC5
Public Const EM_CANUNDO = &HC6
Public Const EM_UNDO = &HC7
Public Const EM_FMTLINES = &HC8
Public Const EM_LINEFROMCHAR = &HC9
Public Const EM_SETTABSTOPS = &HCB
Public Const EM_SETPASSWORDCHAR = &HCC
Public Const EM_EMPTYUNDOBUFFER = &HCD
Public Const EM_GETFIRSTVISIBLELINE = &HCE
Public Const EM_SETREADONLY = &HCF
Public Const EM_SETWORDBREAKPROC = &HD0
Public Const EM_GETWORDBREAKPROC = &HD1
Public Const EM_GETPASSWORDCHAR = &HD2
Public Const EM_SETMARGINS = &HD3
Public Const EM_GETMARGINS = &HD4
Public Const EM_SETLIMITTEXT = EM_LIMITTEXT
Public Const EM_GETLIMITTEXT = &HD5
Public Const EM_POSFROMCHAR = &HD6
Public Const EM_CHARFROMPOS = &HD7
Public Const EM_SETIMESTATUS = &HD8
Public Const EM_GETIMESTATUS = &HD9
Public Const EM_ENABLEFEATURE = &HDA

Public Const ECM_FIRST As Long = &H1500
Public Const EM_SETCUEBANNER As Long = (ECM_FIRST + 1)
Public Const EM_GETCUEBANNER As Long = (ECM_FIRST + 2)
Public Const EM_SHOWBALLOONTIP As Long = (ECM_FIRST + 3)
Public Const EM_HIDEBALLOONTIP As Long = (ECM_FIRST + 4)
Public Const EM_SETHILITE  = (ECM_FIRST + 5)
Public Const EM_GETHILITE  = (ECM_FIRST + 6)
Public Const EM_NOSETFOCUS  = (ECM_FIRST + 7)
Public Const EM_TAKEFOCUS  = (ECM_FIRST + 8)

'Windows 10 Redstone 5 (1809)+
Public Const EM_SETEXTENDEDSTYLE  = (ECM_FIRST + 10)
Public Const EM_GETEXTENDEDSTYLE  = (ECM_FIRST + 11)
Public Const EM_SETENDOFLINE  = (ECM_FIRST + 12)
Public Const EM_GETENDOFLINE  = (ECM_FIRST + 13)
Public Const EM_ENABLESEARCHWEB  = (ECM_FIRST + 14)
Public Const EM_SEARCHWEB  = (ECM_FIRST + 15)
Public Const EM_SETCARETINDEX  = (ECM_FIRST + 17)
Public Const EM_GETCARETINDEX  = (ECM_FIRST + 18)
Public Const EM_FILELINEFROMCHAR  = (ECM_FIRST + 19)
Public Const EM_FILELINEINDEX  = (ECM_FIRST + 20)
Public Const EM_FILELINELENGTH  = (ECM_FIRST + 21)
Public Const EM_GETFILELINE  = (ECM_FIRST + 22)
Public Const EM_GETFILELINECOUNT  = (ECM_FIRST + 23)
Public Enum EC_ENDOFLINE
	EC_ENDOFLINE_DETECTFROMCONTENT = 0
	EC_ENDOFLINE_CRLF = 1
	EC_ENDOFLINE_CR = 2
	EC_ENDOFLINE_LF = 3
End Enum
Public Const EN_SEARCHWEB = (-1520)
Public Enum EC_SEARCHWEB_ENTRYPOINT
	EC_SEARCHWEB_ENTRYPOINT_EXTERNAL = 0
	EC_SEARCHWEB_ENTRYPOINT_CONTEXTMENU = 1
End Enum
Public Type NMSEARCHWEB
	hdr As NMHDR
	entrypoint As EC_SEARCHWEB_ENTRYPOINT
	hasQueryText As Long
	invokeSucceeded As Long
End Type
'-----------------------------------------------


Public Enum EDIT_CONTROL_FEATURE
	EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT = 0
	EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS = 1
End Enum

Public Const EN_SETFOCUS  = &H0100
Public Const EN_KILLFOCUS  = &H0200
Public Const EN_CHANGE  = &H0300
Public Const EN_UPDATE  = &H0400
Public Const EN_ERRSPACE  = &H0500
Public Const EN_MAXTEXT  = &H0501
Public Const EN_HSCROLL  = &H0601
Public Const EN_VSCROLL  = &H0602
Public Const EN_ALIGN_LTR_EC  = &H0700
Public Const EN_ALIGN_RTL_EC  = &H0701
Public Const EN_BEFORE_PASTE  = &H0800 'Windows 10+
Public Const EN_AFTER_PASTE  = &H0801 'Windows 10+
'EM_SETMARGIN parameters */
Public Const EC_LEFTMARGIN  = &H0001
Public Const EC_RIGHTMARGIN  = &H0002
Public Const EC_USEFONTINFO  = &Hffff
'wParam  = of EM_GET/SETIMESTATUS */
Public Const EMSIS_COMPOSITIONSTRING  = &H0001
'lParam  = for EMSIS_COMPOSITIONSTRING */
Public Const EIMES_GETCOMPSTRATONCE  = &H0001
Public Const EIMES_CANCELCOMPSTRINFOCUS  = &H0002
Public Const EIMES_COMPLETECOMPSTRKILLFOCUS  = &H0004


Public Const WB_LEFT  = 0
Public Const WB_RIGHT  = 1
Public Const WB_ISDELIMITER  = 2

Public Type EDITBALLOONTIP
	cbStruct As Long
	pszTitle As LongPtr
	pszText As LongPtr
	ttiIcon As Long ' From TTI_*
End Type
#End Region

#Region "HotKey"

Public Const HOTKEY_CLASSA = "msctls_hotkey32"
Public Const HOTKEY_CLASSW = "msctls_hotkey32"
Public Const HOTKEY_CLASS = "msctls_hotkey32"

Public Enum HotKeyFlags
	HOTKEYF_SHIFT = &H01
	HOTKEYF_CONTROL = &H02
	HOTKEYF_ALT = &H04
	HOTKEYF_EXT = &H08
End Enum

Public Enum HotKeyRulesCombinations
	HKCOMB_NONE = &H0001
	HKCOMB_S = &H0002
	HKCOMB_C = &H0004
	HKCOMB_A = &H0008
	HKCOMB_SC = &H0010
	HKCOMB_SA = &H0020
	HKCOMB_CA = &H0040
	HKCOMB_SCA = &H0080
End Enum

Public Enum HotKeyMessages
	HKM_SETHOTKEY = (WM_USER + 1)
	HKM_GETHOTKEY = (WM_USER + 2)
	HKM_SETRULES = (WM_USER + 3)
End Enum
#End Region

#Region "ImageList"
'NOTE: IImageList[2] and enums it uses defined in slShellCore

Public Enum IL_CreateFlags
  ILC_MASK = &H1
  ILC_COLOR = &H0
  ILC_COLORDDB = &HFE
  ILC_COLOR4 = &H4
  ILC_COLOR8 = &H8
  ILC_COLOR16 = &H10
  ILC_COLOR24 = &H18
  ILC_COLOR32 = &H20
  ILC_PALETTE = &H800                  ' (no longer supported...never worked anyway)
  '5.0
  ILC_MIRROR = &H2000
  ILC_PERITEMMIRROR = &H8000&
  '6.0
  ILC_ORIGINALSIZE = &H10000
  ILC_HIGHQUALITYSCALE = &H20000
End Enum

Public Enum ImageListColor_flags
  CLR_NONE = &HFFFFFFFF
  CLR_DEFAULT = &HFF000000
  CLR_HILIGHT = CLR_DEFAULT
End Enum

Public Enum ImageTypes
  IMAGE_BITMAP = 0
  IMAGE_ICON = 1
  IMAGE_CURSOR = 2
  IMAGE_ENHMETAFILE = 3
End Enum

Public Enum ILPFLAGS
    ILP_NORMAL = 0 'Writes Or reads the stream using New sematics for this version of comctl32
    ILP_DOWNLEVEL = 1
End Enum

Public Declare PtrSafe Function ImageList_Add Lib "comctl32" (ByVal himl As LongPtr, ByVal hbmImage As LongPtr, ByVal hBMMask As LongPtr) As Long
Public Declare PtrSafe Function ImageList_AddMasked Lib "comctl32" (ByVal himl As LongPtr, ByVal hbmImage As LongPtr, ByVal crMask As Long) As Long
Public Declare PtrSafe Function ImageList_BeginDrag Lib "comctl32" (ByVal himlTrack As LongPtr, ByVal iTrack As Long, ByVal dxHotspot As Long, ByVal dyHotspot As Long) As Long
Public Declare PtrSafe Function ImageList_CoCreateInstance Lib "comctl32.dll " (refclsid As UUID, ByVal pUnkOuter As Long, riid As UUID, ppv As Any) As Long
Public Declare PtrSafe Function ImageList_Copy Lib "comctl32" (ByVal himlDst As LongPtr, ByVal iDst As Long, ByVal himlSrc As LongPtr, ByVal iSrc As Long, ByVal uFlags As Long) As Long
Public Declare PtrSafe Function ImageList_Create Lib "comctl32" (ByVal cx As Long, ByVal cy As Long, ByVal Flags As IL_CreateFlags, ByVal cInitial As Long, ByVal cGrow As Long) As LongPtr
Public Declare PtrSafe Function ImageList_Destroy Lib "comctl32" (ByVal himl As LongPtr) As Long
Public Declare PtrSafe Function ImageList_DragEnter Lib "comctl32" (ByVal hWndLock As LongPtr, ByVal X As Long, ByVal Y As Long) As Long
Public Declare PtrSafe Function ImageList_DragLeave Lib "comctl32" (ByVal hWndLock As LongPtr) As Long
Public Declare PtrSafe Function ImageList_DragMove Lib "comctl32" (ByVal X As Long, ByVal Y As Long) As Long
Public Declare PtrSafe Function ImageList_DragShowNolock Lib "comctl32" (ByVal fShow As Long) As Long
Public Declare PtrSafe Function ImageList_Draw Lib "comctl32" (ByVal himl As LongPtr, ByVal i As Long, ByVal hdcDst As LongPtr, ByVal X As Long, ByVal Y As Long, ByVal fStyle As IMAGELISTDRAWFLAGS) As Long
Public Declare PtrSafe Function ImageList_DrawEx Lib "comctl32" (ByVal himl As LongPtr, ByVal i As Long, ByVal hdcDst As LongPtr, ByVal X As Long, ByVal Y As Long, ByVal DX As Long, ByVal DY As Long, ByVal rgbBk As Long, ByVal rgbFg As Long, ByVal fStyle As IMAGELISTDRAWFLAGS) As Long
Public Declare PtrSafe Function ImageList_DrawIndirect Lib "comctl32" (pimldp As IMAGELISTDRAWPARAMS) As Long
Public Declare PtrSafe Function ImageList_Duplicate Lib "comctl32" (ByVal himl As LongPtr) As LongPtr
Public Declare PtrSafe Sub ImageList_EndDrag Lib "comctl32" ()
Public Declare PtrSafe Function ImageList_GetBkColor Lib "comctl32" (ByVal himl As LongPtr) As Long
Public Declare PtrSafe Function ImageList_GetDragImage Lib "comctl32" (ppt As POINT, pptHotspot As POINT) As LongPtr
Public Declare PtrSafe Function ImageList_GetIcon Lib "comctl32" (ByVal himl As LongPtr, ByVal i As Long, ByVal Flags As IMAGELISTDRAWFLAGS) As LongPtr
Public Declare PtrSafe Function ImageList_GetIconSize Lib "comctl32" (ByVal himl As LongPtr, lpcx As Long, lpcy As Long) As Long
Public Declare PtrSafe Function ImageList_GetImageCount Lib "comctl32" (ByVal himl As LongPtr) As Long
Public Declare PtrSafe Function ImageList_GetImageInfo Lib "comctl32" (ByVal himl As LongPtr, ByVal i As Long, pImageInfo As IMAGEINFO) As Long
Public DeclareWide PtrSafe Function ImageList_LoadImage Lib "comctl32" Alias "ImageList_LoadImageW" (ByVal hi As LongPtr, ByVal lpbmp As LongPtr, ByVal CX As Long, ByVal cGrow As Long, ByVal crMask As Long, ByVal uType As ImageTypes, ByVal uFlags As LoadResourceFlags) As LongPtr
Public Declare PtrSafe Function ImageList_LoadImageW Lib "comctl32" (ByVal hi As LongPtr, ByVal lpbmp As LongPtr, ByVal CX As Long, ByVal cGrow As Long, ByVal crMask As Long, ByVal uType As ImageTypes, ByVal uFlags As LoadResourceFlags) As LongPtr
Public Declare PtrSafe Function ImageList_LoadImageA Lib "comctl32" (ByVal hi As LongPtr, ByVal lpbmp As LongPtr, ByVal CX As Long, ByVal cGrow As Long, ByVal crMask As Long, ByVal uType As ImageTypes, ByVal uFlags As LoadResourceFlags) As LongPtr
Public Declare PtrSafe Function ImageList_Merge Lib "comctl32" (ByVal himl1 As LongPtr, ByVal i1 As Long, ByVal himl2 As LongPtr, ByVal i2 As Long, ByVal DX As Long, ByVal DY As Long) As LongPtr
Public Declare PtrSafe Function ImageList_Read Lib "comctl32" (ByVal pstm As IStream) As LongPtr
Public Declare PtrSafe Function ImageList_ReadEx Lib "comctl32" (ByVal dwFlags As ILPFLAGS, ByVal pstm As IStream, riid As UUID, ppv As Any) As Long
Public Declare PtrSafe Function ImageList_Remove Lib "comctl32" (ByVal himl As LongPtr, ByVal i As Long) As Long
Public Declare PtrSafe Function ImageList_Replace Lib "comctl32" (ByVal himl As LongPtr, ByVal i As Long, ByVal hbmImage As LongPtr, ByVal hBMMask As LongPtr) As Long
Public Declare PtrSafe Function ImageList_ReplaceIcon Lib "comctl32" (ByVal himl As LongPtr, ByVal i As Long, ByVal hIcon As LongPtr) As Long
Public Declare PtrSafe Function ImageList_SetBkColor Lib "comctl32" (ByVal himl As LongPtr, ByVal clrBk As Long) As Long
Public Declare PtrSafe Function ImageList_SetColorTable Lib "comctl32" (ByVal himl As LongPtr, ByVal start As Long, ByVal len As Long, prgb As RGBQUAD) As Long
Public Declare PtrSafe Function ImageList_SetIconSize Lib "comctl32" (ByVal himl As LongPtr, ByVal CX As Long, ByVal CY As Long) As Long
Public Declare PtrSafe Function ImageList_SetImageCount Lib "comctl32" (ByVal himl As LongPtr, ByVal uNewCount As Long) As Long
Public Declare PtrSafe Function ImageList_SetDragCursorImage Lib "comctl32" (ByVal himlDrag As LongPtr, ByVal iDrag As Long, ByVal dxHotspot As Long, ByVal dyHotspot As Long) As Long
Public Declare PtrSafe Function ImageList_SetOverlayImage Lib "comctl32" (ByVal himl As LongPtr, ByVal iImage As Long, ByVal iOverlay As Long) As Long
Public Declare PtrSafe Function ImageList_Write Lib "comctl32" (ByVal himl As LongPtr, ByVal pstm As IStream) As Long
Public Declare PtrSafe Function ImageList_WriteEx Lib "comctl32" (ByVal himl As LongPtr, ByVal dwFlags As ILPFLAGS, ByVal pstm As IStream) As Long
Public Declare PtrSafe Function HIMAGELIST_QueryInterface Lib "comctl32" (ByVal himl As LongPtr, riid As UUID, ppv As Any) As Long

Public Function IImageListToHIMAGELIST(ByVal himl As IImageList) As LongPtr
    Return ObjPtr(himl)
End Function
    
#End Region


#Region "IP"
Public Const WC_IPADDRESSA = "SysIPAddress32"
Public Const WC_IPADDRESSW = "SysIPAddress32"
Public Const WC_IPADDRESS = WC_IPADDRESSW

Public Const IPM_CLEARADDRESS  = (WM_USER + 100)  ' no parameters
Public Const IPM_SETADDRESS  = (WM_USER + 101)  ' lparam = TCP/IP address
Public Const IPM_GETADDRESS  = (WM_USER + 102)  ' lresult = # of non black fields.  lparam = LPDWORD for TCP/IP address
Public Const IPM_SETRANGE  = (WM_USER + 103)  ' wparam = field, lparam = range
Public Const IPM_SETFOCUS  = (WM_USER + 104)  ' wparam = field
Public Const IPM_ISBLANK  = (WM_USER + 105)  ' no parameters

Public Const IPN_FIRST  = (-860)  ' internet address
Public Const IPN_LAST  = (-879)  ' internet address
Public Const IPN_FIELDCHANGED = (IPN_FIRST - 0)

Public Type NMIPADDRESS
	hdr As NMHDR
	iField As Long
	iValue As Long
End Type
#End Region

#Region "ListBox"
Public Const WC_LISTBOXA = "ListBox"
Public Const WC_LISTBOXW = "ListBox"
Public Const WC_LISTBOX = WC_LISTBOXW

Public Enum ListBoxReturnValues
	LB_OKAY = 0
	LB_ERR = (-1)
	LB_ERRSPACE = (-2)
End Enum

Public Enum ListBoxNotifications
	LBN_ERRSPACE = (-2)
	LBN_SELCHANGE = 1
	LBN_DBLCLK = 2
	LBN_SELCANCEL = 3
	LBN_SETFOCUS = 4
	LBN_KILLFOCUS = 5
End Enum

Public Enum ListBoxMessages
	LB_ADDSTRING = &H0180
	LB_INSERTSTRING = &H0181
	LB_DELETESTRING = &H0182
	LB_SELITEMRANGEEX = &H0183
	LB_RESETCONTENT = &H0184
	LB_SETSEL = &H0185
	LB_SETCURSEL = &H0186
	LB_GETSEL = &H0187
	LB_GETCURSEL = &H0188
	LB_GETTEXT = &H0189
	LB_GETTEXTLEN = &H018A
	LB_GETCOUNT = &H018B
	LB_SELECTSTRING = &H018C
	LB_DIR = &H018D
	LB_GETTOPINDEX = &H018E
	LB_FINDSTRING = &H018F
	LB_GETSELCOUNT = &H0190
	LB_GETSELITEMS = &H0191
	LB_SETTABSTOPS = &H0192
	LB_GETHORIZONTALEXTENT = &H0193
	LB_SETHORIZONTALEXTENT = &H0194
	LB_SETCOLUMNWIDTH = &H0195
	LB_ADDFILE = &H0196
	LB_SETTOPINDEX = &H0197
	LB_GETITEMRECT = &H0198
	LB_GETITEMDATA = &H0199
	LB_SETITEMDATA = &H019A
	LB_SELITEMRANGE = &H019B
	LB_SETANCHORINDEX = &H019C
	LB_GETANCHORINDEX = &H019D
	LB_SETCARETINDEX = &H019E
	LB_GETCARETINDEX = &H019F
	LB_SETITEMHEIGHT = &H01A0
	LB_GETITEMHEIGHT = &H01A1
	LB_FINDSTRINGEXACT = &H01A2
    LBCB_CARETON = &H01A3 ';internal_NT
    LBCB_CARETOFF = &h01A4 ';internal_NT
	LB_SETLOCALE = &H01A5
	LB_GETLOCALE = &H01A6
	LB_SETCOUNT = &H01A7
	LB_INITSTORAGE = &H01A8
	LB_ITEMFROMPOINT = &H01A9
    LB_INSERTSTRINGUPPER = &H01AA ';internal
    LB_INSERTSTRINGLOWER = &H01AB ';internal
    LB_ADDSTRINGUPPER = &H01AC ';internal
    LB_ADDSTRINGLOWER = &H01AD ';internal
    LBCB_STARTTRACK = &H01AE ';internal_win40
    LBCB_ENDTRACK = &H01AF ';internal_win40
	LB_MULTIPLEADDSTRING = &H01B1
	LB_GETLISTBOXINFO = &H01B2
End Enum

Public Enum ListBoxStyles
	LBS_NOTIFY = &H0001
	LBS_SORT = &H0002
	LBS_NOREDRAW = &H0004
	LBS_MULTIPLESEL = &H0008
	LBS_OWNERDRAWFIXED = &H0010
	LBS_OWNERDRAWVARIABLE = &H0020
	LBS_HASSTRINGS = &H0040
	LBS_USETABSTOPS = &H0080
	LBS_NOINTEGRALHEIGHT = &H0100
	LBS_MULTICOLUMN = &H0200
	LBS_WANTKEYBOARDINPUT = &H0400
	LBS_EXTENDEDSEL = &H0800
	LBS_DISABLENOSCROLL = &H1000
	LBS_NODATA = &H2000
	LBS_NOSEL = &H4000
	LBS_COMBOBOX = &H8000&
	LBS_STANDARD = &HA00003 ' (LBS_NOTIFY | LBS_SORT | WS_VSCROLL | WS_BORDER)
End Enum

[Description("Returns the number of items per row.")]
Public Declare PtrSafe Function GetListBoxInfo Lib "comctl32" (ByVal hwnd As LongPtr) As Long

#End Region

#Region "ListView"
Public Const WC_LISTVIEWA = "SysListView32"
Public Const WC_LISTVIEWW = "SysListView32"
Public Const WC_LISTVIEW = WC_LISTVIEWW

Public Const IDD_LISTVIEW = 101

Public Enum LVStyles
  LVS_ICON = &H0
  LVS_REPORT = &H1
  LVS_SMALLICON = &H2
  LVS_LIST = &H3
  LVS_TYPEMASK = &H3
  LVS_SINGLESEL = &H4
  LVS_SHOWSELALWAYS = &H8
  LVS_SORTASCENDING = &H10
  LVS_SORTDESCENDING = &H20
  LVS_SHAREIMAGELISTS = &H40
  LVS_NOLABELWRAP = &H80
  LVS_AUTOARRANGE = &H100
  LVS_EDITLABELS = &H200
  LVS_OWNERDRAWFIXED = &H400
  LVS_ALIGNLEFT = &H800
  LVS_OWNERDATA = &H1000
  LVS_NOSCROLL = &H2000
  LVS_NOCOLUMNHEADER = &H4000
  LVS_NOSORTHEADER = &H8000&
  LVS_TYPESTYLEMASK = &HFC00&
  LVS_ALIGNTOP = &H0
  LVS_ALIGNRIGHT = &HC00 'UNDOCUMENTED
  LVS_ALIGNMASK = &HC00
End Enum   ' LVStyles

Public Enum LVStylesEx
  LVS_EX_GRIDLINES = &H1
  LVS_EX_SUBITEMIMAGES = &H2
  LVS_EX_CHECKBOXES = &H4
  LVS_EX_TRACKSELECT = &H8
  LVS_EX_HEADERDRAGDROP = &H10
  LVS_EX_FULLROWSELECT = &H20         ' // applies to report mode only
  LVS_EX_ONECLICKACTIVATE = &H40
  LVS_EX_TWOCLICKACTIVATE = &H80
  LVS_EX_FLATSB = &H100
  LVS_EX_REGIONAL = &H200             'Not supported on 6.0+ (Vista+)
  LVS_EX_INFOTIP = &H400              ' listview does InfoTips for you
  LVS_EX_UNDERLINEHOT = &H800
  LVS_EX_UNDERLINECOLD = &H1000
  LVS_EX_MULTIWORKAREAS = &H2000
  LVS_EX_LABELTIP = &H4000
  LVS_EX_BORDERSELECT = &H8000&
  LVS_EX_DOUBLEBUFFER = &H10000
  LVS_EX_HIDELABELS = &H20000
  LVS_EX_SINGLEROW = &H40000
  LVS_EX_SNAPTOGRID = &H80000 '// Icons automatically snap to grid.
  LVS_EX_SIMPLESELECT = &H100000        '// Also changes overlay rendering to top right for icon mode.
  LVS_EX_JUSTIFYCOLUMNS = &H200000      '// Icons are lined up in columns that use up the whole view area.
  LVS_EX_TRANSPARENTBKGND = &H400000    '// Background is painted by the parent via WM_PRINTCLIENT
  LVS_EX_TRANSPARENTSHADOWTEXT = &H800000    '// Enable shadow text on transparent backgrounds only (useful with bitmaps)
  LVS_EX_AUTOAUTOARRANGE = &H1000000    '// Icons automatically arrange if no icon positions have been set
  LVS_EX_HEADERINALLVIEWS = &H2000000   '// Display column header in all view modes
  LVS_EX_DRAWIMAGEASYNC = &H4000000     'UNDOCUMENTED. LVN_ASYNCDRAW, NMLVASYNCDRAW
  LVS_EX_AUTOCHECKSELECT = &H8000000
  LVS_EX_AUTOSIZECOLUMNS = &H10000000
  LVS_EX_COLUMNSNAPPOINTS = &H40000000
  LVS_EX_COLUMNOVERFLOW = &H80000000
End Enum

' value returned by many listview messages indicating
' the index of no listview item (user defined)
Public Const LVI_NOITEM = &HFFFFFFFF

' messages
Public Const LVM_FIRST = &H1000
Public Const LVM_GETBKCOLOR = (LVM_FIRST + 0)
Public Const LVM_SETBKCOLOR = (LVM_FIRST + 1)
Public Const LVM_GETIMAGELIST = (LVM_FIRST + 2)
Public Const LVM_SETIMAGELIST = (LVM_FIRST + 3)
Public Const LVM_GETITEMCOUNT = (LVM_FIRST + 4)
Public Const LVM_GETITEMA = (LVM_FIRST + 5)
Public Const LVM_SETITEMA = (LVM_FIRST + 6)
Public Const LVM_INSERTITEMA = (LVM_FIRST + 7)
Public Const LVM_DELETEITEM = (LVM_FIRST + 8)
Public Const LVM_DELETEALLITEMS = (LVM_FIRST + 9)
Public Const LVM_GETCALLBACKMASK = (LVM_FIRST + 10)
Public Const LVM_SETCALLBACKMASK = (LVM_FIRST + 11)
Public Const LVM_GETNEXTITEM = (LVM_FIRST + 12)
Public Const LVM_FINDITEMA = (LVM_FIRST + 13)
Public Const LVM_GETITEMRECT = (LVM_FIRST + 14)
Public Const LVM_SETITEMPOSITION = (LVM_FIRST + 15)
Public Const LVM_GETITEMPOSITION = (LVM_FIRST + 16)
Public Const LVM_GETSTRINGWIDTH = (LVM_FIRST + 17)
Public Const LVM_HITTEST = (LVM_FIRST + 18)
Public Const LVM_ENSUREVISIBLE = (LVM_FIRST + 19)
Public Const LVM_SCROLL = (LVM_FIRST + 20)
Public Const LVM_REDRAWITEMS = (LVM_FIRST + 21)
Public Const LVM_ARRANGE = (LVM_FIRST + 22)
Public Const LVM_EDITLABELA = (LVM_FIRST + 23)
Public Const LVM_GETEDITCONTROL = (LVM_FIRST + 24)
Public Const LVM_GETCOLUMNA = (LVM_FIRST + 25)
Public Const LVM_SETCOLUMNA = (LVM_FIRST + 26)
Public Const LVM_INSERTCOLUMNA = (LVM_FIRST + 27)
Public Const LVM_DELETECOLUMN = (LVM_FIRST + 28)
Public Const LVM_GETCOLUMNWIDTH = (LVM_FIRST + 29)
Public Const LVM_SETCOLUMNWIDTH = (LVM_FIRST + 30)
Public Const LVM_GETHEADER = (LVM_FIRST + 31)
Public Const LVM_CREATEDRAGIMAGE = (LVM_FIRST + 33)
Public Const LVM_GETVIEWRECT = (LVM_FIRST + 34)
Public Const LVM_GETTEXTCOLOR = (LVM_FIRST + 35)
Public Const LVM_SETTEXTCOLOR = (LVM_FIRST + 36)
Public Const LVM_GETTEXTBKCOLOR = (LVM_FIRST + 37)
Public Const LVM_SETTEXTBKCOLOR = (LVM_FIRST + 38)
Public Const LVM_GETTOPINDEX = (LVM_FIRST + 39)
Public Const LVM_GETCOUNTPERPAGE = (LVM_FIRST + 40)
Public Const LVM_GETORIGIN = (LVM_FIRST + 41)
Public Const LVM_UPDATE = (LVM_FIRST + 42)
Public Const LVM_SETITEMSTATE = (LVM_FIRST + 43)
Public Const LVM_GETITEMSTATE = (LVM_FIRST + 44)
Public Const LVM_GETITEMTEXTA = (LVM_FIRST + 45)
Public Const LVM_SETITEMTEXTA = (LVM_FIRST + 46)
Public Const LVM_SETITEMCOUNT = (LVM_FIRST + 47)
Public Const LVM_SORTITEMS = (LVM_FIRST + 48)
Public Const LVM_SETITEMPOSITION32 = (LVM_FIRST + 49)
Public Const LVM_GETSELECTEDCOUNT = (LVM_FIRST + 50)
Public Const LVM_GETITEMSPACING = (LVM_FIRST + 51)
Public Const LVM_GETISEARCHSTRINGA = (LVM_FIRST + 52)
Public Const LVM_SETICONSPACING = (LVM_FIRST + 53)
Public Const LVM_SETEXTENDEDLISTVIEWSTYLE = (LVM_FIRST + 54)
Public Const LVM_GETEXTENDEDLISTVIEWSTYLE = (LVM_FIRST + 55)
Public Const LVM_GETSUBITEMRECT = (LVM_FIRST + 56)
Public Const LVM_SUBITEMHITTEST = (LVM_FIRST + 57)
Public Const LVM_SETCOLUMNORDERARRAY = (LVM_FIRST + 58)
Public Const LVM_GETCOLUMNORDERARRAY = (LVM_FIRST + 59)
Public Const LVM_SETHOTITEM = (LVM_FIRST + 60)
Public Const LVM_GETHOTITEM = (LVM_FIRST + 61)
Public Const LVM_SETHOTCURSOR = (LVM_FIRST + 62)
Public Const LVM_GETHOTCURSOR = (LVM_FIRST + 63)
Public Const LVM_APPROXIMATEVIEWRECT = (LVM_FIRST + 64)
Public Const LVM_SETWORKAREAS = (LVM_FIRST + 65)
Public Const LVM_GETSELECTIONMARK = (LVM_FIRST + 66)
Public Const LVM_SETSELECTIONMARK = (LVM_FIRST + 67)
Public Const LVM_SETBKIMAGEA = (LVM_FIRST + 68)
Public Const LVM_GETBKIMAGEA = (LVM_FIRST + 69)
Public Const LVM_GETWORKAREAS = (LVM_FIRST + 70)
Public Const LVM_SETHOVERTIME = (LVM_FIRST + 71)
Public Const LVM_GETHOVERTIME = (LVM_FIRST + 72)
Public Const LVM_GETNUMBEROFWORKAREAS = (LVM_FIRST + 73)
Public Const LVM_SETTOOLTIPS = (LVM_FIRST + 74)
Public Const LVM_GETITEMW = (LVM_FIRST + 75)
Public Const LVM_SETITEMW = (LVM_FIRST + 76)
Public Const LVM_INSERTITEMW = (LVM_FIRST + 77)
Public Const LVM_GETTOOLTIPS = (LVM_FIRST + 78)
Public Const LVM_GETHOTLIGHTCOLOR = (LVM_FIRST + 79) 'UNDOCUMENTED
Public Const LVM_SETHOTLIGHTCOLOR = (LVM_FIRST + 80) 'UNDOCUMENTED
Public Const LVM_SORTITEMSEX = (LVM_FIRST + 81)
Public Const LVM_SETRANGEOBJECT = (LVM_FIRST + 82) 'UNDOCUMENTED
Public Const LVM_FINDITEMW = (LVM_FIRST + 83)
Public Const LVM_RESETEMPTYTEXT = (LVM_FIRST + 84) 'UNDOCUMENTED
Public Const LVM_SETFROZENITEM = (LVM_FIRST + 85) 'UNDOCUMENTED
Public Const LVM_GETFROZENITEM = (LVM_FIRST + 86) 'UNDOCUMENTED
Public Const LVM_GETSTRINGWIDTHW = (LVM_FIRST + 87)
Public Const LVM_SETFROZENSLOT = (LVM_FIRST + 88) 'UNDOCUMENTED
Public Const LVM_GETFROZENSLOT = (LVM_FIRST + 89) 'UNDOCUMENTED
Public Const LVM_SETVIEWMARGIN = (LVM_FIRST + 90) 'UNDOCUMENTED
Public Const LVM_GETVIEWMARGIN = (LVM_FIRST + 91) 'UNDOCUMENTED
Public Const LVM_GETGROUPSTATE = (LVM_FIRST + 92)
Public Const LVM_GETFOCUSEDGROUP = (LVM_FIRST + 93)
Public Const LVM_EDITGROUPLABEL = (LVM_FIRST + 94) 'UNDOCUMENTED
Public Const LVM_GETCOLUMNW = (LVM_FIRST + 95)
Public Const LVM_SETCOLUMNW = (LVM_FIRST + 96)
Public Const LVM_INSERTCOLUMNW = (LVM_FIRST + 97)  '
Public Const LVM_GETGROUPRECT = (LVM_FIRST + 98)

Public Const LVM_GETITEMTEXTW = (LVM_FIRST + 115)
Public Const LVM_SETITEMTEXTW = (LVM_FIRST + 116)
Public Const LVM_GETISEARCHSTRINGW = (LVM_FIRST + 117)
Public Const LVM_EDITLABELW = (LVM_FIRST + 118)

Public Const LVM_SETBKIMAGEW = (LVM_FIRST + 138)
Public Const LVM_GETBKIMAGEW = (LVM_FIRST + 139)
Public Const LVM_SETSELECTEDCOLUMN = (LVM_FIRST + 140)
Public Const LVM_SETTILEWIDTH = (LVM_FIRST + 141)
Public Const LVM_SETVIEW = (LVM_FIRST + 142)
Public Const LVM_GETVIEW = (LVM_FIRST + 143)

Public Const LVM_INSERTGROUP = (LVM_FIRST + 145)

Public Const LVM_SETGROUPINFO = (LVM_FIRST + 147)

Public Const LVM_GETGROUPINFO = (LVM_FIRST + 149)
Public Const LVM_REMOVEGROUP = (LVM_FIRST + 150)
Public Const LVM_MOVEGROUP = (LVM_FIRST + 151)
Public Const LVM_GETGROUPCOUNT = (LVM_FIRST + 152)
Public Const LVM_GETGROUPINFOBYINDEX = (LVM_FIRST + 153)
Public Const LVM_MOVEITEMTOGROUP = (LVM_FIRST + 154)
Public Const LVM_SETGROUPMETRICS = (LVM_FIRST + 155)
Public Const LVM_GETGROUPMETRICS = (LVM_FIRST + 156)
Public Const LVM_ENABLEGROUPVIEW = (LVM_FIRST + 157)
Public Const LVM_SORTGROUPS = (LVM_FIRST + 158)
Public Const LVM_INSERTGROUPSORTED = (LVM_FIRST + 159)
Public Const LVM_REMOVEALLGROUPS = (LVM_FIRST + 160)
Public Const LVM_HASGROUP = (LVM_FIRST + 161)
Public Const LVM_SETTILEVIEWINFO = (LVM_FIRST + 162)
Public Const LVM_GETTILEVIEWINFO = (LVM_FIRST + 163)
Public Const LVM_SETTILEINFO = (LVM_FIRST + 164)
Public Const LVM_GETTILEINFO = (LVM_FIRST + 165)
Public Const LVM_SETINSERTMARK = (LVM_FIRST + 166)
Public Const LVM_GETINSERTMARK = (LVM_FIRST + 167)
Public Const LVM_INSERTMARKHITTEST = (LVM_FIRST + 168)
Public Const LVM_GETINSERTMARKRECT = (LVM_FIRST + 169)
Public Const LVM_SETINSERTMARKCOLOR = (LVM_FIRST + 170)
Public Const LVM_GETINSERTMARKCOLOR = (LVM_FIRST + 171)

Public Const LVM_SETINFOTIP = (LVM_FIRST + 173)
Public Const LVM_GETSELECTEDCOLUMN = (LVM_FIRST + 174)
Public Const LVM_ISGROUPVIEWENABLED = (LVM_FIRST + 175)
Public Const LVM_GETOUTLINECOLOR = (LVM_FIRST + 176)
Public Const LVM_SETOUTLINECOLOR = (LVM_FIRST + 177)
Public Const LVM_SETKEYBOARDSELECTED = (LVM_FIRST + 178)  'UNDOCUMENTED
Public Const LVM_CANCELEDITLABEL = (LVM_FIRST + 179)
Public Const LVM_MAPINDEXTOID = (LVM_FIRST + 180)
Public Const LVM_MAPIDTOINDEX = (LVM_FIRST + 181)
Public Const LVM_ISITEMVISIBLE = (LVM_FIRST + 182)
Public Const LVM_EDITSUBITEM = (LVM_FIRST + 183)          'UNDOCUMENTED
Public Const LVM_ENSURESUBITEMVISIBLE = (LVM_FIRST + 184) 'UNDOCUMENTED
Public Const LVM_GETCLIENTRECT = (LVM_FIRST + 185)        'UNDOCUMENTED
Public Const LVM_GETFOCUSEDCOLUMN = (LVM_FIRST + 186)     'UNDOCUMENTED
Public Const LVM_SETOWNERDATACALLBACK = (LVM_FIRST + 187) 'UNDOCUMENTED
Public Const LVM_RECOMPUTEITEMS = (LVM_FIRST + 188)      'UNDOCUMENTED
Public Const LVM_QUERYINTERFACE = (LVM_FIRST + 189)      'UNDOCUMENTED: NOT OFFICIAL NAME
Public Const LVM_SETGROUPSUBSETCOUNT = (LVM_FIRST + 190) 'UNDOCUMENTED
Public Const LVM_GETGROUPSUBSETCOUNT = (LVM_FIRST + 191) 'UNDOCUMENTED
Public Const LVM_ORDERTOINDEX = (LVM_FIRST + 192)        'UNDOCUMENTED
Public Const LVM_GETACCVERSION = (LVM_FIRST + 193)       'UNDOCUMENTED
Public Const LVM_MAPACCIDTOACCINDEX = (LVM_FIRST + 194)  'UNDOCUMENTED
Public Const LVM_MAPACCINDEXTOACCID = (LVM_FIRST + 195)  'UNDOCUMENTED
Public Const LVM_GETOBJECTCOUNT = (LVM_FIRST + 196)      'UNDOCUMENTED
Public Const LVM_GETOBJECTRECT = (LVM_FIRST + 197)       'UNDOCUMENTED
Public Const LVM_ACCHITTEST = (LVM_FIRST + 198)          'UNDOCUMENTED
Public Const LVM_GETFOCUSEDOBJECT = (LVM_FIRST + 199)    'UNDOCUMENTED
Public Const LVM_GETOBJECTROLE = (LVM_FIRST + 200)       'UNDOCUMENTED
Public Const LVM_GETOBJECTSTATE = (LVM_FIRST + 201)      'UNDOCUMENTED
Public Const LVM_ACCNAVIGATE = (LVM_FIRST + 202)         'UNDOCUMENTED
Public Const LVM_INVOKEDEFAULTACTION = (LVM_FIRST + 203) 'UNDOCUMENTED
Public Const LVM_GETEMPTYTEXT = (LVM_FIRST + 204)
Public Const LVM_GETFOOTERRECT = (LVM_FIRST + 205)
Public Const LVM_GETFOOTERINFO = (LVM_FIRST + 206)
Public Const LVM_GETFOOTERITEMRECT = (LVM_FIRST + 207)
Public Const LVM_GETFOOTERITEM = (LVM_FIRST + 208)
Public Const LVM_GETITEMINDEXRECT = (LVM_FIRST + 209)
Public Const LVM_SETITEMINDEXSTATE = (LVM_FIRST + 210)
Public Const LVM_GETNEXTITEMINDEX = (LVM_FIRST + 211)
Public Const LVM_SETPRESERVEALPHA = (LVM_FIRST + 212)    'UNDOCUMENTED

Public Const LVM_SETUNICODEFORMAT = CCM_SETUNICODEFORMAT
Public Const LVM_GETUNICODEFORMAT = CCM_GETUNICODEFORMAT

'If UNICODE Then
Public Const LVM_SETBKIMAGE = LVM_SETBKIMAGEW
Public Const LVM_GETBKIMAGE = LVM_GETBKIMAGEW
Public Const LVM_GETCOLUMN = LVM_GETCOLUMNW
Public Const LVM_SETCOLUMN = LVM_SETCOLUMNW
Public Const LVM_INSERTCOLUMN = LVM_INSERTCOLUMNW
Public Const LVM_EDITLABEL = LVM_EDITLABELW
Public Const LVM_GETITEM = LVM_GETITEMW
Public Const LVM_SETITEM = LVM_SETITEMW
Public Const LVM_INSERTITEM = LVM_INSERTITEMW
Public Const LVM_GETISEARCHSTRING = LVM_GETISEARCHSTRINGW
Public Const LVM_FINDITEM = LVM_FINDITEMW
Public Const LVM_GETITEMTEXT = LVM_GETITEMTEXTW
Public Const LVM_SETITEMTEXT = LVM_SETITEMTEXTW

Public Const I_IMAGECALLBACK As Long = (-1)
Public Const I_IMAGENONE = (-2)
Public Const I_COLUMNSCALLBACK As Long = (-1)
Public Const I_GROUPIDCALLBACK As Long = (-1)
Public Const I_GROUPIDNONE As Long = (-2)
Public Const LPSTR_TEXTCALLBACKA = (-1)
Public Const LPSTR_TEXTCALLBACKW = (-1)

Public Enum LV_VIEW
    LV_VIEW_ICON = &H0
    LV_VIEW_DETAILS = &H1
    LV_VIEW_SMALLICON = &H2
    LV_VIEW_LIST = &H3
    LV_VIEW_TILE = &H4&
    LV_VIEW_CONTENTS = &H7
'Below are not part of API, but are implemented by this project.
    LV_VIEW_THUMBNAIL = &H6&
    LV_VIEW_XLICON = &H8
    LV_VIEW_MDICON = &H9
    LV_VIEW_CUSTOM = &H100
End Enum

Public Enum LVTVI_Flags
    LVTVIF_AUTOSIZE = &H0
    LVTVIF_FIXEDWIDTH = &H1
    LVTVIF_FIXEDHEIGHT = &H2
    LVTVIF_FIXEDSIZE = &H3
    '6.0
    LVTVIF_EXTENDED = &H4
End Enum
Public Enum LVTVI_Mask
    LVTVIM_TILESIZE = &H1
    LVTVIM_COLUMNS = &H2
    LVTVIM_LABELMARGIN = &H4
End Enum
 
Public Type LVTILEVIEWINFO
    cbSize As Long
    dwMask As LVTVI_Mask ';     //LVTVIM_*
    dwFlags As LVTVI_Flags ';    //LVTVIF_*
    SizeTile As SIZE ' ;
    cLines As Long
    RCLabelMargin As RECT
End Type

Public Type LVTILEINFO
    cbSize As Long
    iItem As Long
    cColumns As Long
    puColumns As LongPtr
'#if (_WIN32_WINNT >= 0x0600)
    piColFmt As LongPtr
'#End If
End Type


' ============================================
' Notifications

Public Enum LVNotifications
  LVN_FIRST = -100&   ' &HFFFFFF9C   ' (0U-100U)
  LVN_LAST = -199&   ' &HFFFFFF39   ' (0U-199U)
                                                                          ' lParam points to:
  LVN_ITEMCHANGING = (LVN_FIRST - 0)            ' NMLISTVIEW, ?, rtn T/F
  LVN_ITEMCHANGED = (LVN_FIRST - 1)             ' NMLISTVIEW, ?
  LVN_INSERTITEM = (LVN_FIRST - 2)                  ' NMLISTVIEW, iItem
  LVN_DELETEITEM = (LVN_FIRST - 3)                 ' NMLISTVIEW, iItem
  LVN_DELETEALLITEMS = (LVN_FIRST - 4)         ' NMLISTVIEW, iItem = -1, rtn T/F

  LVN_COLUMNCLICK = (LVN_FIRST - 8)              ' NMLISTVIEW, iItem = -1, iSubItem = column
  LVN_BEGINDRAG = (LVN_FIRST - 9)                  ' NMLISTVIEW, iItem
  LVN_BEGINRDRAG = (LVN_FIRST - 11)              ' NMLISTVIEW, iItem

  LVN_ODCACHEHINT = (LVN_FIRST - 13)           ' NMLVCACHEHINT
  LVN_ITEMACTIVATE = (LVN_FIRST - 14)           ' v4.70 = NMHDR, v4.71 = NMITEMACTIVATE
  LVN_ODSTATECHANGED = (LVN_FIRST - 15)  ' NMLVODSTATECHANGE, rtn T/F
  LVN_HOTTRACK = (LVN_FIRST - 21)                 ' NMLISTVIEW, see docs, rtn T/F
  LVN_BEGINLABELEDITA = (LVN_FIRST - 5)        ' NMLVDISPINFO, iItem, rtn T/F
  LVN_ENDLABELEDITA = (LVN_FIRST - 6)           ' NMLVDISPINFO, see docs
 
  LVN_GETDISPINFOA = (LVN_FIRST - 50)            ' NMLVDISPINFO, see docs
  LVN_SETDISPINFOA = (LVN_FIRST - 51)            ' NMLVDISPINFO, see docs
  LVN_ODFINDITEMA = (LVN_FIRST - 52)             ' NMLVFINDITEM
 
  LVN_KEYDOWN = (LVN_FIRST - 55)                 ' NMLVKEYDOWN
  LVN_MARQUEEBEGIN = (LVN_FIRST - 56)       ' NMLISTVIEW, rtn T/F
  LVN_GETINFOTIPA = (LVN_FIRST - 57)             ' NMLVGETINFOTIP
  LVN_GETINFOTIPW = (LVN_FIRST - 58)              ' NMLVGETINFOTIP
  LVN_INCREMENTALSEARCHA = (LVN_FIRST - 62)
  LVN_INCREMENTALSEARCHW = (LVN_FIRST - 63)
'#If (WIN32_IE >= &H600) Then
  LVN_COLUMNDROPDOWN = (LVN_FIRST - 64)
  LVN_COLUMNOVERFLOWCLICK = (LVN_FIRST - 66)
'#End If
  LVN_BEGINLABELEDITW = (LVN_FIRST - 75)
  LVN_ENDLABELEDITW = (LVN_FIRST - 76)
  LVN_GETDISPINFOW = (LVN_FIRST - 77)
  LVN_SETDISPINFOW = (LVN_FIRST - 78)
  LVN_ODFINDITEMW = (LVN_FIRST - 79)             ' NMLVFINDITEM
  LVN_BEGINSCROLL = (LVN_FIRST - 80)
  LVN_ENDSCROLL = (LVN_FIRST - 81)
  LVN_LINKCLICK = (LVN_FIRST - 84)
  LVN_ASYNCDRAW = (LVN_FIRST - 86) 'Undocumented; NMLVASYNCDRAW
  LVN_GETEMPTYMARKUP = (LVN_FIRST - 87)
  LVN_GROUPCHANGED = (LVN_FIRST - 88)   ' Undocumented; NMLVGROUP
'We're going to default to Unicode, but allow targeting ANSI
#If ANSI = 1 Then
  LVN_BEGINLABELEDIT = LVN_BEGINLABELEDITA
  LVN_ENDLABELEDIT = LVN_ENDLABELEDITA
  LVN_GETDISPINFO = LVN_GETDISPINFOA
  LVN_SETDISPINFO = LVN_SETDISPINFOA
  LVN_ODFINDITEM = LVN_ODFINDITEMA         ' NMLVFINDITEM
  LVN_GETINFOTIP = LVN_GETINFOTIPA              ' NMLVGETINFOTIP
  LVN_INCREMENTALSEARCH = LVN_INCREMENTALSEARCHA
#Else
  LVN_BEGINLABELEDIT = LVN_BEGINLABELEDITW
  LVN_ENDLABELEDIT = LVN_ENDLABELEDITW
  LVN_GETDISPINFO = LVN_GETDISPINFOW
  LVN_SETDISPINFO = LVN_SETDISPINFOW
  LVN_ODFINDITEM = LVN_ODFINDITEMW         ' NMLVFINDITEM
  LVN_GETINFOTIP = LVN_GETINFOTIPW              ' NMLVGETINFOTIP
  LVN_INCREMENTALSEARCH = LVN_INCREMENTALSEARCHW
#End If
End Enum   ' LVNotifications


' LVM_GET/SETIMAGELIST wParam

Public Enum LV_ImageList
    LVSIL_NORMAL = 0
    LVSIL_SMALL = 1
    LVSIL_STATE = 2
    LVSIL_GROUPHEADER = 3
    LVSIL_FOOTER = 4 'UNDOCUMENTED: For footer items... see IListViewFooter
End Enum

' LVM_GET/SETITEM lParam
Public Type LVITEM 'LVITEMW
  Mask As LVITEM_mask
  iItem As Long
  iSubItem As Long
  State As LVITEM_state
  StateMask As LVITEM_state
  pszText As LongPtr
  cchTextMax As Long
  iImage As Long
  lParam As LongPtr
'#If (WIN32_IE >= &H300) Then
  iIndent As Long
'#End If
'#If (WIN32_IE >= &H501) Then
  iGroupId As Long
  cColumns As Long
  puColumns As LongPtr
'#End If
'#If (WIN32_IE >= &H600) Then
  piColFmt As LongPtr 'array of certain LVCFMT_ for each subitem
  iGroup As Long 'for single item in multiple groups in virtual listview
'#End If
End Type
Public Type LVITEMW 'LVITEMW
  Mask As LVITEM_mask
  iItem As Long
  iSubItem As Long
  State As LVITEM_state
  StateMask As LVITEM_state
  pszText As LongPtr
  cchTextMax As Long
  iImage As Long
  lParam As LongPtr
'#If (WIN32_IE >= &H300) Then
  iIndent As Long
'#End If
'#If (WIN32_IE >= &H501) Then
  iGroupId As Long
  cColumns As Long
  puColumns As LongPtr
'#End If
'#If (WIN32_IE >= &H600) Then
  piColFmt As LongPtr 'array of certain LVCFMT_ for each subitem
  iGroup As Long 'for single item in multiple groups in virtual listview
'#End If
End Type
Public Type LVITEMA   ' LVITEM with pszText as string
  Mask As LVITEM_mask
  iItem As Long
  iSubItem As Long
  State As LVITEM_state
  StateMask As Long
  pszText As String  ' if String, must be pre-allocated
  cchTextMax As Long
  iImage As Long
  lParam As LongPtr
'#If (WIN32_IE >= &H300) Then
  iIndent As Long
'#End If
'#If (WIN32_IE >= &H501) Then
  iGroupId As Long
  cColumns As Long
  puColumns As LongPtr
'#End If
'#If (WIN32_IE >= &H600) Then
  piColFmt As LongPtr 'array of certain LVCFMT_ for each subitem
  iGroup As Long 'for single item in multiple groups in virtual listview
'#End If
End Type
' LVITEM mask
Public Enum LVITEM_mask
  LVIF_TEXT = &H1
  LVIF_IMAGE = &H2
  LVIF_PARAM = &H4
  LVIF_STATE = &H8
  LVIF_INDENT = &H10
  LVIF_GROUPID = &H100
  LVIF_COLUMNS = &H200
  LVIF_NORECOMPUTE = &H800
  LVIF_DI_SETITEM = &H1000   ' NMLVDISPINFO notification
  '6.0
  LVIF_COLFMT = &H10000
End Enum

' LVITEM state, stateMask, LVM_SETCALLBACKMASK wParam
Public Enum LVITEM_state
  LVIS_FOCUSED = &H1
  LVIS_SELECTED = &H2
  LVIS_CUT = &H4
  LVIS_DROPHILITED = &H8
  LVIS_GLOW = &H10
  LVIS_ACTIVATING = &H20
  LVIS_LINK = &H40 'UNDOCUMENTED
  LVIS_OVERLAYMASK = &HF00
  LVIS_STATEIMAGEMASK = &HF000&
End Enum
Public Type LVBKIMAGE
  ulFlags As LVBKIMAGE_Flags
  hBm As LongPtr
  pszImage As LongPtr  ' if String, must be pre-allocated
  cchImageMax As Long
  XOffsetPercent As Long
  YOffsetPercent As Long
End Type
Public Type LVBKIMAGEW
  ulFlags As LVBKIMAGE_Flags
  hBm As LongPtr
  pszImage As LongPtr  ' if String, must be pre-allocated
  cchImageMax As Long
  XOffsetPercent As Long
  YOffsetPercent As Long
End Type
Public Type LVBKIMAGEA
  ulFlags As LVBKIMAGE_Flags
  hBm As LongPtr
  pszImage As String  ' if String, must be pre-allocated
  cchImageMax As Long
  XOffsetPercent As Long
  YOffsetPercent As Long
End Type
Public Enum LVBKIMAGE_Flags
    LVBKIF_SOURCE_NONE = &H0
    LVBKIF_SOURCE_HBITMAP = &H1
    LVBKIF_SOURCE_URL = &H2
    LVBKIF_SOURCE_MASK = &H3
    LVBKIF_STYLE_NORMAL = &H0
    LVBKIF_STYLE_TILE = &H10
    LVBKIF_STYLE_MASK = &H10
  '5.0
    LVBKIF_FLAG_TILEOFFSET = &H100
    LVBKIF_TYPE_WATERMARK = &H10000000
    LVBKIF_FLAG_ALPHABLEND = &H20000000
End Enum

' LVM_GETNEXTITEM LOWORD(lParam)
Public Enum LVNI_Flags
    LVNI_ALL = &H0
    LVNI_FOCUSED = &H1
    LVNI_SELECTED = &H2
    LVNI_CUT = &H4
    LVNI_DROPHILITED = &H8
    
    LVNI_ABOVE = &H100
    LVNI_BELOW = &H200
    LVNI_TOLEFT = &H400
    LVNI_TORIGHT = &H800
'#If (WIN32_IE >= &H600) Then
    LVNI_STATEMASK = (LVNI_FOCUSED Or LVNI_SELECTED Or LVNI_CUT Or LVNI_DROPHILITED)
    LVNI_DIRECTIONMASK = (LVNI_ABOVE Or LVNI_BELOW Or LVNI_TOLEFT Or LVNI_TORIGHT)

    LVNI_PREVIOUS = &H20
    LVNI_VISIBLEORDER = &H10
    LVNI_VISIBLEONLY = &H40
    LVNI_SAMEGROUPONLY = &H80
'#End If
End Enum
' LVM_GETITEMRECT rc.Left (lParam)
Public Enum LVIR_Flags
    LVIR_BOUNDS = 0
    LVIR_ICON = 1
    LVIR_LABEL = 2
    LVIR_SELECTBOUNDS = 3
End Enum
Public Enum LVSIC_Flags
    LVSICF_NOINVALIDATEALL = &H1
    LVSICF_NOSCROLL = &H2
End Enum

' LVM_HITTEST lParam
Public Type LVHITTESTINFO   ' was LV_HITTESTINFO
  PT As POINT
  Flags As LVHT_Flags
  iItem As Long
'#If (WIN32_IE >= &H300) Then
  iSubItem As Long    ' this is was NOT in win95.  valid only for LVM_SUBITEMHITTEST
'#End If
'#If (WIN32_IE >= &H600) then
  iGroup As Long
'#End If
End Type
Public Enum LVA_Flags
  LVA_DEFAULT = &H0
  LVA_ALIGNLEFT = &H1
  LVA_ALIGNTOP = &H2
  LVA_SNAPTOGRID = &H5
End Enum
Public Enum LVHT_Flags
     LVHT_NOWHERE = &H1   ' in LV client area, but not over item
     LVHT_ONITEMICON = &H2
     LVHT_ONITEMLABEL = &H4
     LVHT_ONITEMSTATEICON = &H8
     LVHT_ONITEM = (LVHT_ONITEMICON Or LVHT_ONITEMLABEL Or LVHT_ONITEMSTATEICON)
    
    '  ' outside the LV's client area
     LVHT_ABOVE = &H8
     LVHT_BELOW = &H10
     LVHT_TORIGHT = &H20
     LVHT_TOLEFT = &H40
'#If (WIN32_IE >= &H600) Then
    LVHT_EX_GROUP_HEADER = &H10000000
    LVHT_EX_GROUP_FOOTER = &H20000000
    LVHT_EX_GROUP_COLLAPSE = &H40000000
    LVHT_EX_GROUP_BACKGROUND = &H80000000
    LVHT_EX_GROUP_STATEICON = &H1000000
    LVHT_EX_GROUP_SUBSETLINK = &H2000000
    LVHT_EX_GROUP = (LVHT_EX_GROUP_BACKGROUND Or LVHT_EX_GROUP_COLLAPSE Or LVHT_EX_GROUP_FOOTER Or LVHT_EX_GROUP_HEADER Or LVHT_EX_GROUP_STATEICON Or LVHT_EX_GROUP_SUBSETLINK)
    LVHT_EX_ONCONTENTS = &H4000000          'On item AND not on the background
    LVHT_EX_FOOTER = &H8000000
'#End If
End Enum
Public Type LVFINDINFOA   ' was LV_FINDINFO
  Flags As LVFINDINFO_flags
  psz As String  ' if String, must be pre-allocated
  lParam As LongPtr
  PT As POINT
  VKDirection As Long
End Type
Public Type LVFINDINFOW   ' was LV_FINDINFO
  Flags As LVFINDINFO_flags
  psz As LongPtr  ' if String, must be pre-allocated
  lParam As LongPtr
  PT As POINT
  VKDirection As Long
End Type
'Alias LVFINDINFO As LVFINDINFOW
Public Type LVFINDINFO   ' was LV_FINDINFO
  Flags As LVFINDINFO_flags
  psz As LongPtr  ' if String, must be pre-allocated
  lParam As LongPtr
  PT As POINT
  VKDirection As Long
End Type

Public Enum LVFINDINFO_flags
  LVFI_PARAM = &H1
  LVFI_STRING = &H2
  LVFI_SUBSTRING = &H4 'same as LVFI_PARTIAL
  LVFI_PARTIAL = &H8
  LVFI_NOCASE = &H10 'UNDOCUMENTED
  LVFI_WRAP = &H20
  LVFI_NEARESTXY = &H40
End Enum
Public Const LVFF_ITEMCOUNT = &H1
Public Type LVFOOTERINFO
     Mask As Long 'must be LVFF_ITEMCOUNT
     pszText As LongPtr 'not supported, must be 0
     cchText As Long 'not supported, must be 0
     cItems As Long
End Type
Public Enum LVFOOTERITEM_Flags
    LVFIF_TEXT = &H1
    LVFIF_STATE = &H2
End Enum
' footer item state
Public Enum LVFI_States
     LVFIS_FOCUSED = &H1
End Enum

Public Type LVFOOTERITEM
    Mask As LVFOOTERITEM_Flags
    iItem As Long
    pszText As LongPtr
    cchTextMax As Long
    State As LVFI_States
    StateMask As LVFI_States
End Type

Public Enum LVIM_Flags
    LVIM_AFTER = &H1
End Enum
Public Type LVINSERTMARK
    cbSize As Long
    dwFlags As LVIM_Flags 'must be LVIM_AFTER
    iItem As Long
    dwReserved As Long 'must be 0
End Type

Public Type LVITEMINDEX
    iItem As Long '          // listview item index
    iGroup As Long
End Type
Public Type LVSETINFOTIP
    cbSize As Long
    dwFlags As Long
    pszText As LongPtr ' LPWSTR
    iItem As Long
    iSubItem As Long
End Type



Public Type LVCOLUMNA   ' was LV_COLUMN
  Mask As LVCOLUMN_mask
  fmt As LVCOLUMN_fmt
  CX As Long
  pszText As String  ' if String, must be pre-allocated
  cchTextMax As Long
  iSubItem As Long
'#If (WIN32_IE >= &H300) Then
  iImage As Long
  iOrder As Long
'#End If
'#if (WIN32_IE >= &H600)
  cxMin As Long
  cxDefault As Long
  cxIdeal As Long
'#End If
End Type
Public Enum LVCOLUMN_mask
  LVCF_FMT = &H1
  LVCF_WIDTH = &H2
  LVCF_TEXT = &H4
  LVCF_SUBITEM = &H8
'#If (WIN32_IE >= &H300) Then
  LVCF_IMAGE = &H10
  LVCF_ORDER = &H20
'#End If
'#If (WIN32_IE >= &H600) Then
  LVCF_MINWIDTH = &H40
  LVCF_DEFAULTWIDTH = &H80
  LVCF_IDEALWIDTH = &H100
'#End If
End Enum
Public Type LVCOLUMNW   ' was LV_COLUMN
  Mask As LVCOLUMN_mask
  fmt As LVCOLUMN_fmt
  CX As Long
  pszText As LongPtr  ' if String, must be pre-allocated
  cchTextMax As Long
  iSubItem As Long
'#If (WIN32_IE >= &H300) Then
  iImage As Long
  iOrder As Long
'#End If
'#if (WIN32_IE >= &H600)
  cxMin As Long
  cxDefault As Long
  cxIdeal As Long
'#End If
End Type
Public Type LVCOLUMN   ' was LV_COLUMN
  Mask As LVCOLUMN_mask
  fmt As LVCOLUMN_fmt
  CX As Long
  pszText As LongPtr  ' if String, must be pre-allocated
  cchTextMax As Long
  iSubItem As Long
'#If (WIN32_IE >= &H300) Then
  iImage As Long
  iOrder As Long
'#End If
'#if (WIN32_IE >= &H600)
  cxMin As Long
  cxDefault As Long
  cxIdeal As Long
'#End If
End Type
 
Public Enum LVCOLUMN_fmt
  LVCFMT_LEFT = &H0
  LVCFMT_RIGHT = &H1
  LVCFMT_CENTER = &H2
  LVCFMT_JUSTIFYMASK = &H3
'#If (WIN32_IE >= &H300) Then
  LVCFMT_IMAGE = &H800
  LVCFMT_BITMAP_ON_RIGHT = &H1000
  LVCFMT_COL_HAS_IMAGES = &H8000&
'#End If
'#If (WIN32_IE >= &H600) Then
  LVCFMT_FIXED_WIDTH = &H100
  LVCFMT_NO_DPI_SCALE = &H40000
  LVCFMT_FIXED_RATIO = &H80000
  LVCFMT_LINE_BREAK = &H100000
  LVCFMT_FILL = &H200000
  LVCFMT_WRAP = &H400000
  LVCFMT_NO_TITLE = &H800000
  LVCFMT_TILE_PLACEMENTMASK = (LVCFMT_LINE_BREAK Or LVCFMT_FILL)
  LVCFMT_SPLITBUTTON = &H1000000
'#End If
End Enum



Public Enum LVGROUPRECT
    LVGGR_GROUP = 0                      'Entire expanded group
    LVGGR_HEADER = 1                     'Header only (collapsed group)
    LVGGR_LABEL = 2                      'Label only
    LVGGR_SUBSETLINK = 3                 'subset link only
End Enum
Public Enum LVGROUPMETRICFLAGS
    LVGMF_NONE = 0
    LVGMF_BORDERSIZE = 1
    LVGMF_BORDERCOLOR = 2
    LVGMF_TEXTCOLOR = 4
End Enum
Public Enum LVGROUPMASK
     LVGF_NONE = 0
     LVGF_HEADER = &H1
     LVGF_FOOTER = &H2
     LVGF_STATE = &H4
     LVGF_ALIGN = &H8
     LVGF_GROUPID = &H10
    ' If SO >= WinVista Then
     LVGF_SUBTITLE = &H100
     LVGF_TASK = &H200
     LVGF_DESCRIPTIONTOP = &H400
     LVGF_DESCRIPTIONBOTTOM = &H800
     LVGF_TITLEIMAGE = &H1000
     LVGF_EXTENDEDIMAGE = &H2000
     LVGF_ITEMS = &H4000
     LVGF_SUBSET = &H8000&
     LVGF_SUBSETITEMS = &H10000               'readonly, cItems holds count of items in visible subset, iFirstItem is valid
End Enum

Public Enum LVGROUPSTATE
     LVGS_NORMAL = &H0
     LVGS_COLLAPSED = &H1
     LVGS_HIDDEN = &H2
    
    ' SO >= WinVista
     LVGS_NOHEADER = &H4
     LVGS_COLLAPSIBLE = &H8
     LVGS_FOCUSED = &H10
     LVGS_SELECTED = &H20
     LVGS_SUBSETED = &H40
     LVGS_SUBSETLINKFOCUSED = &H80
End Enum
Public Enum LVGROUPALIGN
     LVGA_HEADER_LEFT = &H1
     LVGA_HEADER_CENTER = &H2
     LVGA_HEADER_RIGHT = &H4             ' Don't forget to validate exclusivity
    ' SO >= WinVista
     LVGA_FOOTER_LEFT = &H8
     LVGA_FOOTER_CENTER = &H10
     LVGA_FOOTER_RIGHT = &H20             ' Don't forget to validate exclusivity
End Enum

Public Type LVGROUP
    cbSize                  As Long
    Mask                    As LVGROUPMASK
    pszHeader               As LongPtr
    cchHeader               As Long
    
    pszFooter               As LongPtr
    cchFooter               As Long
    
    iGroupId                As Long
    
    StateMask               As LVGROUPSTATE
    State                   As LVGROUPSTATE
    uAlign                  As LVGROUPALIGN
' SO >= WinVista
    pszSubtitle            As LongPtr
    cchSubtitle            As Long
    pszTask                As LongPtr
    cchTask                As Long
    pszDescriptionTop      As LongPtr
    cchDescriptionTop      As Long
    pszDescriptionBottom   As LongPtr
    cchDescriptionBottom   As Long
    iTitleImage            As Long
    iExtendedImage         As Long
    iFirstItem             As Long     ' Read only
    cItems                 As Long     ' Read only
    pszSubsetTitle         As LongPtr   ' NULL if group is not subset
    cchSubsetTitle         As Long
End Type
Public Type LVINSERTGROUPSORTED
    pfnGroupCompare As LongPtr
    pvData As LongPtr
    LVG As LVGROUP
End Type

Public Type LVGROUPMETRICS
    cbSize      As Long
    Mask        As LVGROUPMETRICFLAGS
    Left        As Long
    Top         As Long
    Right       As Long
    Bottom      As Long
    crLeft      As Long
    crTop       As Long
    crRigth     As Long
    crBottom    As Long
    crHeader    As Long
    crFooter    As Long
End Type
' Notify Message Header for Listview
Public Type NMHEADER
     hdr As NMHDR
     iItem As Long
     iButton As Long
     lPtrHDItem As LongPtr ' HDITEM FAR* pItem
End Type
Public Type NMHEADERW
     hdr As NMHDR
     iItem As Long
     iButton As Long
     lPtrHDItem As LongPtr ' HDITEM FAR* pItem
End Type
Public Type NMLISTVIEW   ' was NM_LISTVIEW
  hdr As NMHDR
  iItem As Long
  iSubItem As Long
  uNewState As LVITEM_state
  uOldState As LVITEM_state
  uChanged As LVITEM_mask
  PTAction As POINT
  lParam As LongPtr
End Type
Public Enum LVCD_ItemType
    LVCDI_ITEM = &H0
    LVCDI_GROUP = &H1
    LVCDI_ITEMSLIST = &H2
End Enum
Public Const LVCDRF_NOSELECT = &H10000
Public Const LVCDRF_NOGROUPFRAME = &H20000

Public Type NMLVCUSTOMDRAW
  NMCD As NMCUSTOMDRAW
  ClrText As Long
  ClrTextBk As Long
  ' if IE >= 4.0 this member of the struct can be used
  iSubItem As Integer
  '>=5.01
  dwItemType As LVCD_ItemType
  clrFace As Long
  iIconEffect As Integer
  iIconPhase As Integer
  iPartId As Integer
  iStateId As Integer
  rcText As RECT
  uAlign As LVGROUPALIGN
End Type
[PackingAlignment(1)]
Public Type NMLVKEYDOWN   ' was LV_KEYDOWN
   hdr As NMHDR
   wVKey As Integer   ' can't be KeyCodeConstants, enums are Longs!
   Flags As Long   ' Always zero.
End Type
Public Type NMLVDISPINFOA   ' was LV_DISPINFO
  hdr As NMHDR
  Item As LVITEMA
End Type
Public Type NMLVDISPINFOW   ' was LV_DISPINFO
  hdr As NMHDR
  Item As LVITEMW
End Type
Public Type NMLVDISPINFO   ' was LV_DISPINFO
  hdr As NMHDR
  Item As LVITEM
End Type

Public Type NMLVLINK
    hdr As NMHDR
    Item As LITEM
    iItem As Long
    iGroupId As Long
End Type

Public Enum LVEM_Flags
    EMF_CENTERED = &H1
End Enum
Public Type NMLVEMPTYMARKUP
    hdr As NMHDR
    dwFlags As LVEM_Flags
    szMarkup(0 To ((L_MAX_URL_LENGTH) - 1)) As Integer
End Type
Public Type NMLVEMPTYMARKUPA
    hdr As NMHDR
    dwFlags As LVEM_Flags
    szMarkup(0 To (L_MAX_URL_LENGTH - 1)) As Byte
End Type
Public Type NMLVEMPTYMARKUPW
    hdr As NMHDR
    dwFlags As LVEM_Flags
    szMarkup(0 To (L_MAX_URL_LENGTH - 1)) As Integer
End Type

Public Type NMLVSCROLL
    hdr As NMHDR
    DX As Long
    DY As Long
End Type

Public Type NMLVGROUP
    hdr As NMHDR
    iGroupId As Long
    uNewState As LVGROUPSTATE
    uOldState As LVGROUPSTATE
End Type

Public Type NMLVODSTATECHANGE
    hdr As NMHDR
    iFrom As Long
    iTo As Long
    uNewState As LVITEM_state
    uOldState As LVITEM_state
End Type
Public Enum LVGIT_Flags
    LVGIT_UNFOLDED = &H1
End Enum
Public Type NMLVGETINFOTIPA
    hdr As NMHDR
    dwFlags As LVGIT_Flags
    pszText As String
    cchTextMax As Long
    iItem As Long
    iSubItem As Long
    lParam As LongPtr
End Type
Public Type NMLVGETINFOTIPW
    hdr As NMHDR
    dwFlags As LVGIT_Flags
    pszText As LongPtr
    cchTextMax As Long
    iItem As Long
    iSubItem As Long
    lParam As LongPtr
End Type
'Alias NMLVGETINFOTIP As NMLVGETINFOTIPW
Public Type NMLVGETINFOTIP
    hdr As NMHDR
    dwFlags As LVGIT_Flags
    pszText As LongPtr
    cchTextMax As Long
    iItem As Long
    iSubItem As Long
    lParam As LongPtr
End Type

Public Type NMLVFINDITEMA
    hdr As NMHDR
    iStart As Long
    LVFI As LVFINDINFOA
End Type
Public Type NMLVFINDITEMW
    hdr As NMHDR
    iStart As Long
    LVFI As LVFINDINFOW
End Type
Public Type NMLVFINDITEM
    hdr As NMHDR
    iStart As Long
    LVFI As LVFINDINFO
End Type

Public Type NMLVCACHEHINT
    hdr As NMHDR
    iFrom As Long
    iTo As Long
End Type

' key flags stored in uKeyFlags

Public Enum NMIA_KeyFlags
    LVKF_ALT = &H1
    LVKF_CONTROL = &H2
    LVKF_SHIFT = &H4
' #end If '(_WIN32_IE >= =&H0400)
End Enum
Public Type NMITEMACTIVATE
    hdr As NMHDR
    iItem As Long
    iSubItem As Long
    uNewState As LVITEM_state
    uOldState As LVITEM_state
    uChanged As Long
    PTAction As POINT
    lParam As LongPtr
    uKeyFlags As NMIA_KeyFlags
End Type

Public Type NMLVASYNCDRAW 'Undocumented; for LVN_ASYNCDRAW
    hdr As NMHDR
    pimldp As LongPtr 'IMAGELISTDRAWPARAMS
    hr As Long
    iPart As LVAD_Parts
    iItem As Long
    iSubItem As Long
    dwRetFlags As Long
    iRetImageIndex As Long
End Type
Public Enum LVAD_Parts
    LVADPART_ITEM = &H0&
    LVADPART_GROUP = &H1& 'iItem = group id, others unused
    LVADPART_IMAGETITLE = &H2& 'value unconfirmed and purpose unknown
End Enum

Public Const LVSR_SELECTION = &H0
Public Const LVSR_CUT = &H1

Public Const HEADER32_CLASS   As String = "SysHeader32"
Public Const HEADER_CLASS     As String = "SysHeader"
Public Const WC_HEADERA  = "SysHeader32"
Public Const WC_HEADERW  = "SysHeader32"
Public Const WC_HEADER  = WC_HEADERW


'header info

Public Enum HDMASK
    HDI_WIDTH = &H1
    HDI_HEIGHT = HDI_WIDTH
    HDI_TEXT = &H2
    HDI_FORMAT = &H4
    HDI_LPARAM = &H8
    HDI_BITMAP = &H10
    HDI_IMAGE = &H20
    HDI_DI_SETITEM = &H40
    HDI_ORDER = &H80
    '5.0
    HDI_FILTER = &H100
    '6.0
    HDI_STATE = &H200
End Enum

Public Enum HeaderStyles
    HDS_HORZ = &H0
    HDS_VERT = &H1 'UNDOCUMENTED
    HDS_BUTTONS = &H2
    HDS_HOTTRACK = &H4 ' v 4.70
    HDS_HIDDEN = &H8
    HDS_PRIVATEIMAGELISTS = &H10 'UNDOCUMENTED
    HDS_OWNERDATA = &H20 'UNDOCUMENTED
    HDS_DRAGDROP = &H40 ' v 4.70
    HDS_FULLDRAG = &H80
    HDS_FILTERBAR = &H100 ' v 5.0
    HDS_FLAT = &H200 ' v 5.1
    HDS_CHECKBOXES = &H400 '6.0
    HDS_NOSIZING = &H800
    HDS_OVERFLOW = &H1000
End Enum
Public Enum HeaderHitTestFlags
    HHT_NOWHERE = &H1
    HHT_ONHEADER = &H2
    HHT_ONDIVIDER = &H4
    HHT_ONDIVOPEN = &H8
'#if (_WIN32_IE >= =&h0500)
    HHT_ONFILTER = &H10
    HHT_ONFILTERBUTTON = &H20
'#End If
    HHT_ABOVE = &H100
    HHT_BELOW = &H200
    HHT_TORIGHT = &H400
    HHT_TOLEFT = &H800
'#if _WIN32_WINNT >= =&h0600
    HHT_ONITEMSTATEICON = &H1000
    HHT_ONDROPDOWN = &H2000
    HHT_ONOVERFLOW = &H4000
End Enum
Public Type HDHITTESTINFO
    PT As POINT
    Flags As HeaderHitTestFlags
    iItem As Long
End Type
Public Enum HeaderImageListFlags
    HDSIL_NORMAL = 0
    HDSIL_STATE = 1
End Enum

Public Const HDN_FIRST As Long = -300&
Public Const HDN_ITEMCLICK = (HDN_FIRST - 2)
Public Const HDN_DIVIDERDBLCLICK = (HDN_FIRST - 5)
Public Const HDN_BEGINTRACK = (HDN_FIRST - 6)
Public Const HDN_ENDTRACK = (HDN_FIRST - 7)
Public Const HDN_TRACK = (HDN_FIRST - 8)
Public Const HDN_GETDISPINFO = (HDN_FIRST - 9)
Public Const HDN_ITEMCHANGING As Long = (HDN_FIRST - 0)
Public Const HDN_ITEMDBLCLICK As Long = (HDN_FIRST - 3)
Public Const HDN_ITEMCHANGINGA = (HDN_FIRST - 0)
Public Const HDN_ITEMCHANGINGW = (HDN_FIRST - 20)
Public Const HDN_ITEMCHANGEDA = (HDN_FIRST - 1)
Public Const HDN_ITEMCHANGEDW = (HDN_FIRST - 21)
Public Const HDN_ITEMCLICKA = (HDN_FIRST - 2)
Public Const HDN_ITEMCLICKW = (HDN_FIRST - 22)
Public Const HDN_ITEMDBLCLICKA = (HDN_FIRST - 3)
Public Const HDN_ITEMDBLCLICKW = (HDN_FIRST - 23)
Public Const HDN_DIVIDERDBLCLICKA = (HDN_FIRST - 5)
Public Const HDN_DIVIDERDBLCLICKW = (HDN_FIRST - 25)
Public Const HDN_BEGINTRACKA = (HDN_FIRST - 6)
Public Const HDN_BEGINTRACKW = (HDN_FIRST - 26)
Public Const HDN_ENDTRACKA = (HDN_FIRST - 7)
Public Const HDN_ENDTRACKW = (HDN_FIRST - 27)
Public Const HDN_TRACKA = (HDN_FIRST - 8)
Public Const HDN_TRACKW = (HDN_FIRST - 28)
Public Const HDN_GETDISPINFOA = (HDN_FIRST - 9)
Public Const HDN_GETDISPINFOW = (HDN_FIRST - 29)
Public Const HDN_BEGINDRAG = (HDN_FIRST - 10)
Public Const HDN_ENDDRAG = (HDN_FIRST - 11)
Public Const HDN_FILTERCHANGE = (HDN_FIRST - 12)
Public Const HDN_FILTERBTNCLICK = (HDN_FIRST - 13)
'#If (WIN32_IE > 600) Then
Public Const HDN_BEGINFILTEREDIT = (HDN_FIRST - 14)
Public Const HDN_ENDFILTEREDIT = (HDN_FIRST - 15)
Public Const HDN_ITEMSTATEICONCLICK = (HDN_FIRST - 16)
Public Const HDN_ITEMKEYDOWN = (HDN_FIRST - 17)
Public Const HDN_DROPDOWN = (HDN_FIRST - 18)
Public Const HDN_OVERFLOWCLICK = (HDN_FIRST - 19)
'#End If

Public Const HDM_FIRST As Long = &H1200
Public Const HDM_GETITEMCOUNT = (HDM_FIRST + 0)
Public Const HDM_INSERTITEMA = (HDM_FIRST + 1)
Public Const HDM_DELETEITEM = (HDM_FIRST + 2)
Public Const HDM_GETITEMA = (HDM_FIRST + 3)
Public Const HDM_SETITEMA = (HDM_FIRST + 4)
Public Const HDM_LAYOUT = (HDM_FIRST + 5)
Public Const HDM_HITTEST = (HDM_FIRST + 6)
Public Const HDM_GETITEMRECT = (HDM_FIRST + 7)
Public Const HDM_SETIMAGELIST = (HDM_FIRST + 8)
Public Const HDM_GETIMAGELIST = (HDM_FIRST + 9)
Public Const HDM_INSERTITEMW = (HDM_FIRST + 10)
Public Const HDM_GETITEMW = (HDM_FIRST + 11)
Public Const HDM_SETITEMW = (HDM_FIRST + 12)

Public Const HDM_ORDERTOINDEX = (HDM_FIRST + 15)
Public Const HDM_CREATEDRAGIMAGE = (HDM_FIRST + 16)      '// wparam = which item (by index)
Public Const HDM_GETORDERARRAY = (HDM_FIRST + 17)
Public Const HDM_SETORDERARRAY = (HDM_FIRST + 18)
Public Const HDM_SETHOTDIVIDER = (HDM_FIRST + 19)
Public Const HDM_SETBITMAPMARGIN = (HDM_FIRST + 20)
Public Const HDM_GETBITMAPMARGIN = (HDM_FIRST + 21)
Public Const HDM_SETFILTERCHANGETIMEOUT = (HDM_FIRST + 22)
Public Const HDM_EDITFILTER = (HDM_FIRST + 23)
Public Const HDM_CLEARFILTER = (HDM_FIRST + 24)
Public Const HDM_GETITEMDROPDOWNRECT = (HDM_FIRST + 25) ' // rect of item's drop down button
Public Const HDM_GETOVERFLOWRECT = (HDM_FIRST + 26) '// rect of overflow button
Public Const HDM_GETFOCUSEDITEM = (HDM_FIRST + 27)
Public Const HDM_SETFOCUSEDITEM = (HDM_FIRST + 28)
Public Const HDM_TRANSLATEACCELERATOR = &H461  ' CCM_TRANSLATEACCELERATOR

Public Const HDM_GETITEM = HDM_GETITEMW
Public Const HDM_SETITEM = HDM_SETITEMW
Public Const HDM_INSERTITEM = HDM_INSERTITEMW
Public Const HDM_SETUNICODEFORMAT = CCM_SETUNICODEFORMAT
Public Const HDM_GETUNICODEFORMAT = CCM_GETUNICODEFORMAT
'#define Header_GetItemDropDownRect(hwnd, iItem, lprc) \
'        (BOOL)SNDMSG((hwnd), HDM_GETITEMDROPDOWNRECT, (WPARAM)(iItem), (LPARAM)(lprc))

'#define Header_GetOverflowRect(hwnd, lprc) \
'        (BOOL)SNDMSG((hwnd), HDM_GETOVERFLOWRECT, 0, (LPARAM)(lprc))
'
'#define Header_GetFocusedItem(hwnd) \
'        (int)SNDMSG((hwnd), HDM_GETFOCUSEDITEM, (WPARAM)(0), (LPARAM)(0))


'#End if
' HDITEM fmt
Public Enum HDITEM_FMT
    HDF_LEFT = 0
    HDF_RIGHT = 1
    HDF_CENTER = 2
    HDF_JUSTIFYMASK = &H3
    HDF_RTLREADING = 4
    HDF_BITMAP = &H2000
    HDF_STRING = &H4000
    HDF_OWNERDRAW = &H8000&
    '3.0
    HDF_IMAGE = &H800
    HDF_BITMAP_ON_RIGHT = &H1000
    '5.0
    HDF_SORTUP = &H400
    HDF_SORTDOWN = &H200
    '6.0
    HDF_CHECKBOX = &H40
    HDF_CHECKED = &H80
    HDF_FIXEDWIDTH = &H100
    HDF_SPLITBUTTON = &H1000000
End Enum
Public Enum HDF_TYPE
    HDFT_ISSTRING = &H0           '// HD_ITEM.pvFilter points to a HD_TEXTFILTER
    HDFT_ISNUMBER = &H1           '// HD_ITEM.pvFilter points to a INT
    HDFT_ISDATE = &H2
    HDFT_HASNOVALUE = &H8000&      '// clear the filter, by setting this bit
End Enum
Public Const HDIS_FOCUSED = &H1

' Header Item Type

Public Type HDITEMA
    Mask As HDMASK
    CXY As Long
    pszText As String
    hBm As LongPtr
    cchTextMax As Long
    fmt As HDITEM_FMT
    lParam As LongPtr
    iImage As Long
    iOrder As Long
'#If (WIN32_IE >= &H500) then
    type As HDF_TYPE
    pvFilter As LongPtr
'#If (WIN32_IE >= &H600) then
    State As Long
End Type
Public Type HDITEMW
    Mask As HDMASK
    CXY As Long
    pszText As LongPtr
    hBm As LongPtr
    cchTextMax As Long
    fmt As HDITEM_FMT
    lParam As LongPtr
'#If (WIN32_IE >= &H300) then
    iImage As Long
    iOrder As Long
'#If (WIN32_IE >= &H500) then
    type As HDF_TYPE
    pvFilter As LongPtr
'#If (WIN32_IE >= &H600) then
    State As Long
End Type
Public Type HDITEM
    Mask As HDMASK
    CXY As Long
    pszText As LongPtr
    hBm As LongPtr
    cchTextMax As Long
    fmt As HDITEM_FMT
    lParam As LongPtr
'#If (WIN32_IE >= &H300) then
    iImage As Long
    iOrder As Long
'#If (WIN32_IE >= &H500) then
    type As HDF_TYPE
    pvFilter As LongPtr
'#If (WIN32_IE >= &H600) then
    State As Long
End Type
Public Type HD_TEXTFILTERA
    pszText As String
    cchTextMax As Long
End Type
Public Type D_TEXTFILTERW
    pszText  As LongPtr
    cchTextMax As Long
End Type
Public Type HDLAYOUT
    prc As RECT
    pwpos As WINDOWPOS
End Type

Public Type HD_NOTIFY
    hdr As NMHDR
    iItem As Long
    iButton As Long
    pItem As HDITEM
End Type
Public Type HD_NOTIFYW
    hdr As NMHDR
    iItem As Long
    iButton As Long
    pItem As HDITEMW
End Type
Public Type HD_NOTIFYA
    hdr As NMHDR
    iItem As Long
    iButton As Long
    pItem As HDITEMA
End Type

Public Type NMHDDISPINFO
    hdr As NMHDR
    iItem As Long
    Mask As Long
    pszText As LongPtr
    cchTextMax As Long
    iImage As Long
    lParam As LongPtr
End Type
Public Type NMHDDISPINFOW
    hdr As NMHDR
    iItem As Long
    Mask As Long
    pszText As LongPtr
    cchTextMax As Long
    iImage As Long
    lParam As LongPtr
End Type
Public Type NMHDDISPINFOA
    hdr As NMHDR
    iItem As Long
    Mask As Long
    pszText As String
    cchTextMax As Long
    iImage As Long
    lParam As LongPtr
End Type
Public Type NMHDFILTERBTNCLICK
    hdr As NMHDR
    iItem As Long
    rc As RECT
End Type
	
#End Region

#Region "MenuHelp"
Public Declare PtrSafe Sub MenuHelp Lib "comctl32" (ByVal uMsg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr, ByVal hMainMenu As LongPtr, _
        ByVal hInst As LongPtr, ByVal hwndStatus As LongPtr, lpwIDs As Long)
        
Public Declare PtrSafe Function ShowHideMenu Lib "comctl32" (ByVal hWnd As LongPtr, ByVal uFlags As LongPtr, lpInfo As Long) As Long

Public Declare PtrSafe Sub GetEffectiveClientRect Lib "comctl32" (ByVal hWnd As LongPtr, lprc As RECT, lpInfo As Long)
#End Region

#Region "MonthCal"
Public Const MONTHCAL_CLASS= "SysMonthCal32"

Public Const MCM_FIRST As Long = &H1000
Public Const MCM_GETCURSEL As Long = (MCM_FIRST + 1)
Public Const MCM_SETCURSEL As Long = (MCM_FIRST + 2)
Public Const MCM_GETMAXSELCOUNT As Long = (MCM_FIRST + 3)
Public Const MCM_SETMAXSELCOUNT As Long = (MCM_FIRST + 4)
Public Const MCM_GETSELRANGE As Long = (MCM_FIRST + 5)
Public Const MCM_SETSELRANGE As Long = (MCM_FIRST + 6)
Public Const MCM_GETMONTHRANGE As Long = (MCM_FIRST + 7)
Public Const MCM_SETDAYSTATE As Long = (MCM_FIRST + 8)
Public Const MCM_GETMINREQRECT As Long = (MCM_FIRST + 9)
Public Const MCM_SETCOLOR As Long = (MCM_FIRST + 10)
Public Const MCM_GETCOLOR As Long = (MCM_FIRST + 11)
Public Const MCM_SETTODAY As Long = (MCM_FIRST + 12)
Public Const MCM_GETTODAY As Long = (MCM_FIRST + 13)
Public Const MCM_HITTEST As Long = (MCM_FIRST + 14)
Public Const MCM_SETFIRSTDAYOFWEEK As Long = (MCM_FIRST + 15)
Public Const MCM_GETFIRSTDAYOFWEEK As Long = (MCM_FIRST + 16)
Public Const MCM_GETRANGE As Long = (MCM_FIRST + 17)
Public Const MCM_SETRANGE As Long = (MCM_FIRST + 18)
Public Const MCM_GETMONTHDELTA As Long = (MCM_FIRST + 19)
Public Const MCM_SETMONTHDELTA As Long = (MCM_FIRST + 20)
Public Const MCM_GETMAXTODAYWIDTH As Long = (MCM_FIRST + 21)
Public Const MCM_GETCURRENTVIEW As Long = (MCM_FIRST + 22)
Public Const MCM_GETCALENDARCOUNT As Long = (MCM_FIRST + 23)
Public Const MCM_GETCALENDARGRIDINFO As Long = (MCM_FIRST + 24)
Public Const MCM_GETCALID As Long = (MCM_FIRST + 27)
Public Const MCM_SETCALID As Long = (MCM_FIRST + 28)
Public Const MCM_SIZERECTTOMIN As Long = (MCM_FIRST + 29)
Public Const MCM_SETCALENDARBORDER As Long = (MCM_FIRST + 30)
Public Const MCM_GETCALENDARBORDER As Long = (MCM_FIRST + 31)
Public Const MCM_SETCURRENTVIEW As Long = (MCM_FIRST + 32)
Public Const MCM_SETUNICODEFORMAT = CCM_SETUNICODEFORMAT
Public Const MCM_GETUNICODEFORMAT = CCM_GETUNICODEFORMAT

Public Const MCN_FIRST As Long = (-750)
Public Const MCN_VIEWCHANGE As Long = (MCN_FIRST)
Public Const MCN_SELCHANGE As Long = (MCN_FIRST + 1)
Public Const MCN_GETDAYSTATE As Long = (MCN_FIRST + 3)
Public Const MCN_SELECT As Long = (MCN_FIRST + 4)

Public Const GMR_VISIBLE  = 0  ' visible portion of display
Public Const GMR_DAYSTATE  = 1  ' above plus the grayed out parts of
'  partially displayed months

Public Enum MonthViewStyles
	MCS_DAYSTATE = &H0001
	MCS_MULTISELECT = &H0002
	MCS_WEEKNUMBERS = &H0004
	MCS_NOTODAYCIRCLE = &H0008
	MCS_NOTODAY = &H0010
	MCS_NOTRAILINGDATES = &H0040
	MCS_SHORTDAYSOFWEEK = &H0080
	MCS_NOSELCHANGEONNAV = &H0100
End Enum

Public Enum MCSC_Flags
	MCSC_BACKGROUND = 0 ' the background color (between months)
	MCSC_TEXT = 1 ' the dates
	MCSC_TITLEBK = 2 ' background of the title
	MCSC_TITLETEXT = 3
	MCSC_MONTHBK = 4 ' background within the month cal
	MCSC_TRAILINGTEXT = 5 ' the text color of header & trailing days
    MCSC_COLORCOUNT = 6 'UNDOCUMENTED
End Enum

Public Enum MonthCalView
	MCMV_MONTH = 0
	MCMV_YEAR = 1
	MCMV_DECADE = 2
	MCMV_CENTURY = 3
	MCMV_MAX = 3
End Enum

Public Enum MonthCalGridInfoPart
	MCGIP_CALENDARCONTROL = 0
	MCGIP_NEXT = 1
	MCGIP_PREV = 2
	MCGIP_FOOTER = 3
	MCGIP_CALENDAR = 4
	MCGIP_CALENDARHEADER = 5
	MCGIP_CALENDARBODY = 6
	MCGIP_CALENDARROW = 7
	MCGIP_CALENDARCELL = 8
End Enum

Public Enum MonthCalGridInfoFlags
	MCGIF_DATE = &H00000001
	MCGIF_RECT = &H00000002
	MCGIF_NAME = &H00000004
End Enum

Public Type MCGRIDINFO
	cbSize As Long
	dwPart As MonthCalGridInfoPart
	dwFlags As MonthCalGridInfoFlags
	iCalendar As Long
	iRow As Long
	iCol As Long
	bSelected As Long
	stStart As SYSTEMTIME
	stEnd As SYSTEMTIME
	rc As RECT
	pszName As LongPtr
	cchName As LongPtr
End Type

Public Enum MCHT_Flags
	MCHT_TITLE = &H00010000
	MCHT_CALENDAR = &H00020000
	MCHT_TODAYLINK = &H00030000
	MCHT_NEXT = &H01000000 ' these indicate that hitting
	MCHT_PREV = &H02000000 ' here will go to the next/prev month
	MCHT_NOWHERE = &H00000000
	MCHT_TITLEBK = (MCHT_TITLE)
	MCHT_TITLEMONTH = (MCHT_TITLE Or &H0001)
	MCHT_TITLEYEAR = (MCHT_TITLE Or &H0002)
	MCHT_TITLEBTNNEXT = (MCHT_TITLE Or MCHT_NEXT Or &H0003)
	MCHT_TITLEBTNPREV = (MCHT_TITLE Or MCHT_PREV Or &H0003)
	MCHT_CALENDARBK = (MCHT_CALENDAR)
	MCHT_CALENDARDATE = (MCHT_CALENDAR Or &H0001)
	MCHT_CALENDARDATENEXT = (MCHT_CALENDARDATE Or MCHT_NEXT)
	MCHT_CALENDARDATEPREV = (MCHT_CALENDARDATE Or MCHT_PREV)
	MCHT_CALENDARDAY = (MCHT_CALENDAR Or &H0002)
	MCHT_CALENDARWEEKNUM = (MCHT_CALENDAR Or &H0003)
	MCHT_CALENDARCONTROL = &H00100000
	MCHT_CALENDARDATEMIN = (MCHT_CALENDAR Or &H0004)
	MCHT_CALENDARDATEMAX = (MCHT_CALENDAR Or &H0005)
End Enum
Public Type MCHITTESTINFO
	cbSize As Long
	pt As POINT
	uHit As MCHT_Flags ' out param
	st As SYSTEMTIME
	rc As RECT
	iOffset As Long
	iRow As Long
	iCol As Long
End Type

Public Type NMSELCHANGE
	nmhdr As NMHDR ' this must be first, so we don't break WM_NOTIFY
	stSelStart As SYSTEMTIME
	stSelEnd As SYSTEMTIME
End Type

Public Type NMDAYSTATE
	nmhdr As NMHDR ' this must be first, so we don't break WM_NOTIFY
	stStart As SYSTEMTIME
	cDayState As Long
	prgDayState As LongPtr ' points to cDayState MONTHDAYSTATEs
End Type
	
#End Region

#Region "NetAddress"
Public Const WC_NETADDRESS = "msctls_netaddress"
Public Declare PtrSafe Function InitNetworkAddressControl Lib "shell32" () As BOOL



Public Enum NET_ADDRESS_FORMAT
	NET_ADDRESS_FORMAT_UNSPECIFIED = 0
	NET_ADDRESS_DNS_NAME = 1
	NET_ADDRESS_IPV4 = 2
	NET_ADDRESS_IPV6 = 3
End Enum

Public Type IN_ADDR
	s_addr As Long
End Type
Public Type IN6_ADDR
	u(7) As Integer
End Type

Public Type SOCKADDR
	sa_family As Integer
    sa_data(13) As Byte
End Type
Public Type SOCKADDR_IN
    sin_family As Integer
    sin_port As Integer
    sin_addr As IN_ADDR
    sin_zero(7) As Byte
End Type
Public Type SOCKADDR_IN6
    sin6_family As Integer
    sin6_port As Integer
    sin6_flowinfo As Long
    sin6_addr As IN6_ADDR
    sin6_scope_id As Long
End Type

[Description("This type's data member is a union whose largest member is an Addressstring*256  and Port As String*5; but more commonly will be sockaddr_in.")]
Public Type NET_ADDRESS_INFO
	Format As NET_ADDRESS_FORMAT
    data(261) As Integer
End Type

Public Type NC_ADDRESS
    pAddrInfo As LongPtr 'Ptr to NET_ADDRESS_INFO
    PortNumber As Integer
    PrefixLength As Byte
End Type

Public Const NCM_GETADDRESS = (WM_USER + 1)
Public Function NetAddr_GetAddress(ByVal hwnd As LongPtr, ByVal fTip As BOOL, pv As NC_ADDRESS) As Long
    Return CLng(SendMessage(hwnd, NCM_GETADDRESS, fTip, pv))
End Function

Public Enum NET_STRING_Values
	NET_STRING_IPV4_ADDRESS = &H00000001
'  The string identifies an IPv4 Host/router using literal address.
'  (port or prefix not allowed)
	NET_STRING_IPV4_SERVICE = &H00000002
'  The string identifies an IPv4 service using literal address.
'  (port required; prefix not allowed)
	NET_STRING_IPV4_NETWORK = &H00000004
'  The string identifies an IPv4 network.
'  (prefix required; port not allowed)
	NET_STRING_IPV6_ADDRESS = &H00000008
'  The string identifies an IPv6 Host/router using literal address.
'  (port or prefix not allowed; scope-id allowed)
	NET_STRING_IPV6_ADDRESS_NO_SCOPE = &H00000010
'  The string identifies an IPv6 Host/router using literal address
'  where the interface context is already known.
'  (port or prefix not allowed; scope-id not allowed)
	NET_STRING_IPV6_SERVICE = &H00000020
'  The string identifies an IPv6 service using literal address.
'  (port required; prefix not allowed; scope-id allowed)
	NET_STRING_IPV6_SERVICE_NO_SCOPE = &H00000040
'  The string identifies an IPv6 service using literal address
'  where the interface context is already known.
'  (port required; prefix not allowed; scope-id not allowed)
	NET_STRING_IPV6_NETWORK = &H00000080
'  The string identifies an IPv6 network.
'  (prefix required; port or scope-id not allowed)
	NET_STRING_NAMED_ADDRESS = &H00000100
'  The string identifies an Internet Host using DNS.
'  (port or prefix or scope-id not allowed)
	NET_STRING_NAMED_SERVICE = &H00000200
'  The string identifies an Internet service using DNS.
'  (port required; prefix or scope-id not allowed)
	NET_STRING_IP_ADDRESS = (NET_STRING_IPV4_ADDRESS Or NET_STRING_IPV6_ADDRESS)
	NET_STRING_IP_ADDRESS_NO_SCOPE = (NET_STRING_IPV4_ADDRESS Or NET_STRING_IPV6_ADDRESS_NO_SCOPE)
	NET_STRING_IP_SERVICE = (NET_STRING_IPV4_SERVICE Or NET_STRING_IPV6_SERVICE)
	NET_STRING_IP_SERVICE_NO_SCOPE = (NET_STRING_IPV4_SERVICE Or NET_STRING_IPV6_SERVICE_NO_SCOPE)
	NET_STRING_IP_NETWORK = (NET_STRING_IPV4_NETWORK Or NET_STRING_IPV6_NETWORK)
	NET_STRING_ANY_ADDRESS = (NET_STRING_NAMED_ADDRESS Or NET_STRING_IP_ADDRESS)
	NET_STRING_ANY_ADDRESS_NO_SCOPE = (NET_STRING_NAMED_ADDRESS Or NET_STRING_IP_ADDRESS_NO_SCOPE)
	NET_STRING_ANY_SERVICE = (NET_STRING_NAMED_SERVICE Or NET_STRING_IP_SERVICE)
	NET_STRING_ANY_SERVICE_NO_SCOPE = (NET_STRING_NAMED_SERVICE Or NET_STRING_IP_SERVICE_NO_SCOPE)
End Enum
Public Const NCM_SETALLOWTYPE = (WM_USER + 2)
Public Function NetAddr_SetAllowType(ByVal hwnd As LongPtr, ByVal addrMask As NET_STRING_Values) As Long
    Return CLng(SendMessage(hwnd, NCM_SETALLOWTYPE, addrMask, ByVal 0))
End Function

Public Const NCM_GETALLOWTYPE = (WM_USER + 3)
Public Function NetAddr_GetAllowType(ByVal hwnd As LongPtr) As NET_STRING_Values
    Return CLng(SendMessage(hwnd, NCM_GETALLOWTYPE, 0, ByVal 0))
End Function

Public Const NCM_DISPLAYERRORTIP = (WM_USER + 4)
Public Function NetAddr_DisplayErrorTip(ByVal hwnd As LongPtr) As Long
    Return CLng(SendMessage(hwnd, NCM_DISPLAYERRORTIP, 0, ByVal 0))
End Function

#End Region



#Region "Pager"
Public Const WC_PAGESCROLLERA = "SysPager"
Public Const WC_PAGESCROLLERW = "SysPager"
Public Const WC_PAGESCROLLER = WC_PAGESCROLLERW

Public Enum PagerStyles
	PGS_VERT = &H0000
	PGS_HORZ = &H0001
	PGS_AUTOSCROLL = &H00000002
	PGS_DRAGNDROP = &H00000004
End Enum

Public Enum PagerButtonStates
	PGF_INVISIBLE = 0 ' Scroll button is not visible
	PGF_NORMAL = 1 ' Scroll button is in normal state
	PGF_GRAYED = 2 ' Scroll button is in grayed state
	PGF_DEPRESSED = 4 ' Scroll button is in depressed state
	PGF_HOT = 8 ' Scroll button is in hot state
End Enum

Public Enum PagerButton
	PGB_TOPORLEFT = 0
	PGB_BOTTOMORRIGHT = 1
End Enum

Public Const PGM_FIRST As Long = &H1400
Public Const PGM_SETCHILD As Long = (PGM_FIRST + 1)
Public Const PGM_RECALCSIZE As Long = (PGM_FIRST + 2)
Public Const PGM_FORWARDMOUSE As Long = (PGM_FIRST + 3)
Public Const PGM_SETBKCOLOR As Long = (PGM_FIRST + 4)
Public Const PGM_GETBKCOLOR As Long = (PGM_FIRST + 5)
Public Const PGM_SETBORDER As Long = (PGM_FIRST + 6)
Public Const PGM_GETBORDER As Long = (PGM_FIRST + 7)
Public Const PGM_SETPOS As Long = (PGM_FIRST + 8)
Public Const PGM_GETPOS As Long = (PGM_FIRST + 9)
Public Const PGM_SETBUTTONSIZE As Long = (PGM_FIRST + 10)
Public Const PGM_GETBUTTONSIZE As Long = (PGM_FIRST + 11)
Public Const PGM_GETBUTTONSTATE As Long = (PGM_FIRST + 12)
Public Const PGM_SETSCROLLINFO As Long = (PGM_FIRST + 13)

Public Enum PagerScrollFlags
	PGF_SCROLLUP = 1
	PGF_SCROLLDOWN = 2
	PGF_SCROLLLEFT = 4
	PGF_SCROLLRIGHT = 8
End Enum

Public Enum PagerCalcSizeFlags
	PGF_CALCWIDT = 1
	PGF_CALCHEIGHT = 2
End Enum

Public Enum PagerKeyDown
	PGK_SHIFT = 1
	PGK_CONTROL = 2
	PGK_MENU = 3
End Enum

Public Const PGN_FIRST As Long = (-900)
Public Const PGN_SCROLL  = (PGN_FIRST - 1)
Public Const PGN_CALCSIZE  = (PGN_FIRST - 2)
Public Const PGN_HOTITEMCHANGE  = (PGN_FIRST - 3)

[PackingAlignment(1)]
Public Type NMPGSCROLL
	hdr As NMHDR
	fwKeys As Integer
	rcParent As RECT ' Contains Parent Window Rect
	iDir As Long ' Scrolling Direction
	iXpos As Long ' Horizontal scroll position
	iYpos As Long ' Vertical scroll position
	iScroll As Long ' [in/out] Amount to scroll
End Type

Public Type NMPGCALCSIZE
	hdr As NMHDR
	dwFlag As PagerCalcSizeFlags
	iWidth As Long
	iHeight As Long
End Type

Public Type NMPGHOTITEM
	hdr As NMHDR
	idOld As Long
	idNew As Long
	dwFlags As HIC_FLAGS ' HICF_*
End Type
	
#End Region

#Region "Progress"
Public Const PROGRESS_CLASSA = "msctls_progress32"
Public Const PROGRESS_CLASSW = "msctls_progress32"
Public Const PROGRESS_CLASS = "msctls_progress32"

Public Enum ProgressStyles
	PBS_SMOOTH = &H01
    PBS_SHOWPOS = &H02 'UNDOCUMENTED
	PBS_VERTICAL = &H04
	PBS_MARQUEE = &H08
	PBS_SMOOTHREVERSE = &H10
End Enum

Public Const PBM_SETRANGE  = (WM_USER + 1)
Public Const PBM_SETPOS  = (WM_USER + 2)
Public Const PBM_DELTAPOS  = (WM_USER + 3)
Public Const PBM_SETSTEP  = (WM_USER + 4)
Public Const PBM_STEPIT  = (WM_USER + 5)
Public Const PBM_SETRANGE32  = (WM_USER + 6)  ' lParam = high, wParam = low
Public Const PBM_GETRANGE  = (WM_USER + 7)  ' wParam = return (TRUE ? low : high). lParam = PPBRANGE or NULL
Public Const PBM_GETPOS  = (WM_USER + 8)
Public Const PBM_SETBARCOLOR  = (WM_USER + 9)  ' lParam = bar color
Public Const PBM_SETMARQUEE  = (WM_USER + 10)
Public Const PBM_GETSTEP  = (WM_USER + 13)
Public Const PBM_GETBKCOLOR  = (WM_USER + 14)
Public Const PBM_GETBARCOLOR  = (WM_USER + 15)
Public Const PBM_SETSTATE  = (WM_USER + 16)  ' wParam = PBST_[State] (NORMAL, ERROR, PAUSED)
Public Const PBM_GETSTATE  = (WM_USER + 17)
Public Const PBM_SETBKCOLOR  = CCM_SETBKCOLOR  ' lParam = bkColor

Public Enum ProgressState
	PBST_NORMAL = &H001
	PBST_ERROR = &H002
	PBST_PAUSED = &H003
End Enum

Public Type PBRANGE
	iLow As Long
    iHigh As Long
End Type
#End Region

#Region "PropSheet"
Public Enum PSP_FLAGS
	PSP_DEFAULT = &H00000000
	PSP_DLGINDIRECT = &H00000001
	PSP_USEHICON = &H00000002
	PSP_USEICONID = &H00000004
	PSP_USETITLE = &H00000008
	PSP_RTLREADING = &H00000010
	PSP_HASHELP = &H00000020
	PSP_USEREFPARENT = &H00000040
	PSP_USECALLBACK = &H00000080
	PSP_PREMATURE = &H00000400
	PSP_HIDEHEADER = &H00000800
	PSP_USEHEADERTITLE = &H00001000
	PSP_USEHEADERSUBTITLE = &H00002000
	PSP_USEFUSIONCONTEXT = &H00004000
End Enum

' Public Enum PSPCALLBACKMESSAGES
' 	PSPCB_ADDREF = 0
' 	PSPCB_RELEASE = 1
' 	PSPCB_CREATE = 2
' End Enum

Public Enum PSCALLBACKMSG
    PSCB_INITIALIZED = 1
    PSCB_PRECREATE = 2
    PSCB_BUTTONPRESSED = 3
End Enum

Public Type PROPSHEETPAGE_V1
	dwSize As Long
    dwFlags As PSP_FLAGS
    hInstance As LongPtr
    pResource As LongPtr
    hIcon As LongPtr
    pszTitle As LongPtr
    pfnDlgProc As LongPtr
    lParam As LongPtr
    pfnCallback As LongPtr
    pcRefParent As LongPtr
End Type
Public Type PROPSHEETPAGE_V2
	dwSize As Long
    dwFlags As PSP_FLAGS
    hInstance As LongPtr
    pResource As LongPtr
    hIcon As LongPtr
    pszTitle As LongPtr
    pfnDlgProc As LongPtr
    lParam As LongPtr
    pfnCallback As LongPtr
    pcRefParent As LongPtr
    pszHeaderTitle As LongPtr
    pszHeaderSubTitle As LongPtr
End Type
Public Type PROPSHEETPAGE_V3
	dwSize As Long
    dwFlags As PSP_FLAGS
    hInstance As LongPtr
    pResource As LongPtr
    hIcon As LongPtr
    pszTitle As LongPtr
    pfnDlgProc As LongPtr
    lParam As LongPtr
    pfnCallback As LongPtr
    pcRefParent As LongPtr
    pszHeaderTitle As LongPtr
    pszHeaderSubTitle As LongPtr
    hActCtx As LongPtr
End Type
Public Type PROPSHEETPAGE_V4
	dwSize As Long
    dwFlags As PSP_FLAGS
    hInstance As LongPtr
    pResource As LongPtr
    hIcon As LongPtr
    pszTitle As LongPtr
    pfnDlgProc As LongPtr
    lParam As LongPtr
    pfnCallback As LongPtr
    pcRefParent As LongPtr
    pszHeaderTitle As LongPtr
    pszHeaderSubTitle As LongPtr
    hActCtx As LongPtr
    bmHeader As LongPtr
End Type
[Description("📝**NOTE:** This is V4 of the type (Windows Vista and newer). Use PROPSHEETPAGE_V3/V2/V1 for earlier versions.")]
Public Type PROPSHEETPAGEW
	dwSize As Long
    dwFlags As PSP_FLAGS
    hInstance As LongPtr
    pResource As LongPtr
    hIcon As LongPtr
    pszTitle As LongPtr
    pfnDlgProc As LongPtr
    lParam As LongPtr
    pfnCallback As LongPtr
    pcRefParent As LongPtr
    pszHeaderTitle As LongPtr
    pszHeaderSubTitle As LongPtr
    hActCtx As LongPtr
    bmHeader As LongPtr
End Type
[Description("📝**NOTE:** This is V4 of the type (Windows Vista and newer). Use PROPSHEETPAGE_V3/V2/V1 for earlier versions.")]
Public Type PROPSHEETPAGE
    dwSize As Long
    dwFlags As PSP_FLAGS
    hInstance As LongPtr
    pResource As LongPtr
    hIcon As LongPtr
    pszTitle As LongPtr
    pfnDlgProc As LongPtr
    lParam As LongPtr
    pfnCallback As LongPtr
    pcRefParent As LongPtr
    pszHeaderTitle As LongPtr
    pszHeaderSubTitle As LongPtr
    hActCtx As LongPtr
    bmHeader As LongPtr
End Type

Public Type PSHNOTIFY
	hdr As NMHDR
    lParam As LongPtr
End Type

Public Type PROPSHEETHEADER_V1
    dwSize As Long
    dwFlags As PropSheetHeaderFlags
    hwndParent As LongPtr
    hInstance As LongPtr
    hIcon As LongPtr
    pszCaption As LongPtr
    nPages As Long
    nStartPage As LongPtr
    ppsp As LongPtr
    pfnCallback As LongPtr
End Type
Public Type PROPSHEETHEADER_V2
    dwSize As Long
    dwFlags As PropSheetHeaderFlags
    hwndParent As LongPtr
    hInstance As LongPtr
    hIcon As LongPtr
    pszCaption As LongPtr
    nPages As Long
    nStartPage As LongPtr
    ppsp As LongPtr
    pfnCallback As LongPtr
    hbmWatermark As LongPtr
    hplWatermark As LongPtr
    hbmHeader As LongPtr
End Type
Public Type PROPSHEETHEADER
    dwSize As Long
    dwFlags As PropSheetHeaderFlags
    hwndParent As LongPtr
    hInstance As LongPtr
    hIcon As LongPtr
    pszCaption As LongPtr
    nPages As Long
    nStartPage As LongPtr
    ppsp As LongPtr
    pfnCallback As LongPtr
    hbmWatermark As LongPtr
    hplWatermark As LongPtr
    hbmHeader As LongPtr
End Type
Public Type PROPSHEETHEADERW
    dwSize As Long
    dwFlags As PropSheetHeaderFlags
    hwndParent As LongPtr
    hInstance As LongPtr
    hIcon As LongPtr
    pszCaption As LongPtr
    nPages As Long
    nStartPage As LongPtr
    ppsp As LongPtr
    pfnCallback As LongPtr
    hbmWatermark As LongPtr
    hplWatermark As LongPtr
    hbmHeader As LongPtr
End Type


Public Enum PSNOTIFYCODES
	PSN_FIRST = (-200)
	PSN_LAST = (-299)
	PSN_SETACTIVE = (-200)
	PSN_KILLACTIVE = (-201)
	PSN_APPLY = (-202)
	PSN_RESET = (-203)
	PSN_HELP = (-205)
	PSN_WIZBACK = (-206)
	PSN_WIZNEXT = (-207)
	PSN_WIZFINISH = (-208)
	PSN_QUERYCANCEL = (-209)
	PSN_GETOBJECT = (-210)
	PSN_TRANSLATEACCELERATOR = (-211)
	PSN_QUERYINITIALFOCUS = (-212)
End Enum

Public Enum PSNOTIFYRESULTS
	PSNRET_NOERROR = 0
	PSNRET_INVALID = 1
	PSNRET_INVALID_NOCHANGEPAGE = 2
	PSNRET_MESSAGEHANDLED = 3
End Enum

Public Enum PSMESSAGES
	PSM_SETCURSEL = (&H400 + 101)
	PSM_REMOVEPAGE = (&H400 + 102)
	PSM_ADDPAGE = (&H400 + 103)
	PSM_CHANGED = (&H400 + 104)
	PSM_RESTARTWINDOWS = (&H400 + 105)
	PSM_REBOOTSYSTEM = (&H400 + 106)
	PSM_CANCELTOCLOSE = (&H400 + 107)
	PSM_QUERYSIBLINGS = (&H400 + 108)
	PSM_UNCHANGED = (&H400 + 109)
	PSM_APPLY = (&H400 + 110)
	PSM_SETTITLEA = (&H400 + 111)
	PSM_SETTITLEW = (&H400 + 120)
	PSM_SETWIZBUTTONS = (&H400 + 112)
	PSM_PRESSBUTTON = (&H400 + 113)
	PSM_SETCURSELID = (&H400 + 114)
	PSM_SETFINISHTEXTA = (&H400 + 115)
	PSM_SETFINISHTEXTW = (&H400 + 121)
	PSM_GETTABCONTROL = (&H400 + 116)
	PSM_ISDIALOGMESSAGE = (&H400 + 117)
	PSM_GETCURRENTPAGEHWND = (&H400 + 118)
	PSM_INSERTPAGE = (&H400 + 119)
	PSM_SETHEADERTITLEA = (&H400 + 125)
	PSM_SETHEADERTITLEW = (&H400 + 126)
	PSM_SETHEADERSUBTITLEA = (&H400 + 127)
	PSM_SETHEADERSUBTITLEW = (&H400 + 128)
	PSM_HWNDTOINDEX = (&H400 + 129)
	PSM_INDEXTOHWND = (&H400 + 130)
	PSM_PAGETOINDEX = (&H400 + 131)
	PSM_INDEXTOPAGE = (&H400 + 132)
	PSM_IDTOINDEX = (&H400 + 133)
	PSM_INDEXTOID = (&H400 + 134)
	PSM_GETRESULT = (&H400 + 135)
	PSM_RECALCPAGESIZES = (&H400 + 136)
	PSM_SETNEXTTEXT = (&H400 + 137)
	PSM_SHOWWIZBUTTONS = (&H400 + 138)
	PSM_ENABLEWIZBUTTONS = (&H400 + 139)
	PSM_SETBUTTONTEXT = (&H400 + 140)
    
    PSM_SETTITLE = PSM_SETTITLEW
    PSM_SETFINISHTEXT = PSM_SETFINISHTEXTW
    PSM_SETHEADERTITLE = PSM_SETHEADERTITLEW
    PSM_SETHEADERSUBTITLE = PSM_SETHEADERSUBTITLEW
End Enum

Public Enum PropSheetHeaderFlags
	PSH_DEFAULT = &H00000000
	PSH_PROPTITLE = &H00000001
	PSH_USEHICON = &H00000002
	PSH_USEICONID = &H00000004
	PSH_PROPSHEETPAGE = &H00000008
	PSH_WIZARDHASFINISH = &H00000010
	PSH_WIZARD = &H00000020
	PSH_USEPSTARTPAGE = &H00000040
	PSH_NOAPPLYNOW = &H00000080
	PSH_USECALLBACK = &H00000100
	PSH_HASHELP = &H00000200
	PSH_MODELESS = &H00000400
	PSH_RTLREADING = &H00000800
	PSH_WIZARDCONTEXTHELP = &H00001000
' ----- New flags for wizard97 -----------
	PSH_WIZARD97 = &H01000000
	PSH_WATERMARK = &H00008000&
	PSH_USEHBMWATERMARK = &H00010000  ' user pass in a hbmWatermark instead of pszbmWatermark
	PSH_USEHPLWATERMARK = &H00020000  '
	PSH_STRETCHWATERMARK = &H00040000  ' stretchwatermark also applies for the header
	PSH_HEADER = &H00080000
	PSH_USEHBMHEADER = &H00100000
	PSH_USEPAGELANG = &H00200000  ' use frame dialog template matched to page
	PSH_WIZARD_LITE = &H00400000
	PSH_NOCONTEXTHELP = &H02000000
	PSH_AEROWIZARD = &H00004000
	PSH_RESIZABLE = &H04000000
	PSH_HEADERBITMAP = &H08000000
	PSH_NOMARGIN = &H10000000
End Enum


Public Enum PSWIZBUTTONS
	PSWIZB_BACK = &H00000001
	PSWIZB_NEXT = &H00000002
	PSWIZB_FINISH = &H00000004
	PSWIZB_DISABLEDFINISH = &H00000008
	PSWIZB_CANCEL = &H00000010
    PSWIZB_SHOW = 0
    PSWIZB_RESTORE = 1
End Enum

Public Enum PSWIZBUTTONFLAGS
    PSWIZBF_ELEVATIONREQUIRED = &H1
End Enum

Public Enum PSWIZFSB_FLAG
    PSWIZF_SETCOLOR = (-1)
End Enum

Public Enum PSBUTTONS
	PSBTN_BACK = 0
	PSBTN_NEXT = 1
	PSBTN_FINISH = 2
	PSBTN_OK = 3
	PSBTN_APPLYNOW = 4
	PSBTN_CANCEL = 5
	PSBTN_HELP = 6
	PSBTN_MAX = 6
End Enum

Public Const ID_PSRESTARTWINDOWS  = &H2
Public Const ID_PSREBOOTSYSTEM  = (ID_PSRESTARTWINDOWS Or &H1)
Public Const WIZ_CXDLG  = 276
Public Const WIZ_CYDLG  = 140
Public Const WIZ_CXBMP  = 80
Public Const WIZ_BODYX  = 92
Public Const WIZ_BODYCX  = 184
Public Const PROP_SM_CXDLG  = 212
Public Const PROP_SM_CYDLG  = 188
Public Const PROP_MED_CXDLG  = 227
Public Const PROP_MED_CYDLG  = 215
Public Const PROP_LG_CXDLG  = 252
Public Const PROP_LG_CYDLG  = 218

Public DeclareWide PtrSafe Function CreatePropertySheetPage Lib "comctl32" Alias "CreatePropertySheetPageW" (psp As Any) As LongPtr
Public Declare PtrSafe Function CreatePropertySheetPageW Lib "comctl32" (psp As Any) As LongPtr
Public Declare PtrSafe Function CreatePropertySheetPageA Lib "comctl32" (psp As Any) As LongPtr
Public Declare PtrSafe Function DestroyPropertySheetPage Lib "comctl32" (ByVal hPage As LongPtr) As Long
Public DeclareWide PtrSafe Function PropertySheet Lib "comctl32" Alias "PropertySheetW" (psp As Any) As LongPtr
Public Declare PtrSafe Function PropertySheetW Lib "comctl32" (psp As Any) As LongPtr
Public Declare PtrSafe Function PropertySheetA Lib "comctl32" (psp As Any) As LongPtr
#End Region

#Region "ReaderMode"
'Archaic; Removed from headers but listed as available in Vista, so included here

' typedef BOOL (CALLBACK *PFNREADERSCROLL)(struct tagReaderModeInfo*, int, int);
' typedef BOOL (CALLBACK *PFNREADERTRANSLATEDISPATCH)(LPMSG);

Public Type READERMODEINFO
    cbSize As Long
    hwnd As LongPtr
    fFlags As ComctlReaderModeFlags
    prc As RECT
    pfnScroll As LongPtr 'PFNREADERSCROLL
    pfnTranslateDispatch As LongPtr 'PFNREADERTRANSLATEDISPATCH
    lParam As LongPtr
End Type

Public Enum ComctlReaderModeFlags
    RMF_ZEROCURSOR = &H00000001
    RMF_VERTICALONLY = &H00000002
    RMF_HORIZONTALONLY = &H00000004
End Enum

Public Const RM_SCROLLUNIT = 20

Public Declare PtrSafe Sub DoReaderMode Lib "comctl32" Alias "#383" (prmi As READERMODEINFO)

Public Enum ComctlReaderModeResources
    IDC_VERTICALONLY = 109
    IDC_HORIZONTALONLY = 110
    IDC_MOVE2D = 111
    IDC_NORTH = 112
    IDC_SOUTH = 113
    IDC_EAST = 114
    IDC_WEST = 115
    IDC_NORTHEAST = 116
    IDC_NORTHWEST = 117
    IDC_SOUTHEAST = 118
    IDC_SOUTHWEST = 119
    IDB_2DSCROLL = 132
    IDB_VSCROLL = 133
    IDB_HSCROLL = 134
End Enum

#End Region



#Region "Rebar"
Public Const REBARCLASSNAME = "ReBarWindow32"

Public Const RB_INSERTBANDA  = (WM_USER + 1)
Public Const RB_DELETEBAND  = (WM_USER + 2)
Public Const RB_GETBARINFO  = (WM_USER + 3)
Public Const RB_SETBARINFO  = (WM_USER + 4)
Public Const RB_SETBANDINFOA  = (WM_USER + 6)
Public Const RB_SETPARENT  = (WM_USER + 7)
Public Const RB_HITTEST  = (WM_USER + 8)
Public Const RB_GETRECT  = (WM_USER + 9)
Public Const RB_INSERTBANDW  = (WM_USER + 10)
Public Const RB_SETBANDINFOW  = (WM_USER + 11)
Public Const RB_GETBANDCOUNT  = (WM_USER + 12)
Public Const RB_GETROWCOUNT  = (WM_USER + 13)
Public Const RB_GETROWHEIGHT  = (WM_USER + 14)
Public Const RB_GETOBJECT = (WM_USER + 15) 'UNDOCUMENTED
Public Const RB_IDTOINDEX  = (WM_USER + 16)  ' wParam == id
Public Const RB_GETTOOLTIPS  = (WM_USER + 17)
Public Const RB_SETTOOLTIPS  = (WM_USER + 18)
Public Const RB_SETBKCOLOR  = (WM_USER + 19)  ' sets the default BK color
Public Const RB_GETBKCOLOR  = (WM_USER + 20)  ' defaults to CLR_NONE
Public Const RB_SETTEXTCOLOR  = (WM_USER + 21)
Public Const RB_GETTEXTCOLOR  = (WM_USER + 22)  ' defaults to 0x00000000
Public Const RB_SIZETORECT  = (WM_USER + 23)  ' resize the rebar/break bands and such to this rect (lparam)
Public Const RB_SETCOLORSCHEME  = CCM_SETCOLORSCHEME  ' lParam is color scheme
Public Const RB_GETCOLORSCHEME  = CCM_GETCOLORSCHEME  ' fills in COLORSCHEME pointed to by lParam
Public Const RB_INSERTBAND  = RB_INSERTBANDW
Public Const RB_SETBANDINFO  = RB_SETBANDINFOW
Public Const RB_BEGINDRAG  = (WM_USER + 24)
Public Const RB_ENDDRAG  = (WM_USER + 25)
Public Const RB_DRAGMOVE  = (WM_USER + 26)
Public Const RB_GETBARHEIGHT  = (WM_USER + 27)
Public Const RB_GETBANDINFOW  = (WM_USER + 28)
Public Const RB_GETBANDINFOA  = (WM_USER + 29)
Public Const RB_GETBANDINFO  = RB_GETBANDINFOW
Public Const RB_MINIMIZEBAND  = (WM_USER + 30)
Public Const RB_MAXIMIZEBAND  = (WM_USER + 31)
Public Const RB_GETDROPTARGET  = (CCM_GETDROPTARGET)
Public Const RB_PRIV_RESIZE = (WM_USER + 33) 'UNDOCUMENTED: Avoids recursive RBResize
Public Const RB_GETBANDBORDERS  = (WM_USER + 34)  ' returns in lparam = lprc the amount of edges added to band wparam
Public Const RB_SHOWBAND  = (WM_USER + 35)  ' show/hide band
Public Const RB_SETPALETTE  = (WM_USER + 37)
Public Const RB_GETPALETTE  = (WM_USER + 38)
Public Const RB_MOVEBAND  = (WM_USER + 39)
Public Const RB_SETUNICODEFORMAT  = CCM_SETUNICODEFORMAT
Public Const RB_GETUNICODEFORMAT  = CCM_GETUNICODEFORMAT
Public Const RB_GETBANDMARGINS  = (WM_USER + 40)
Public Const RB_SETWINDOWTHEME  = CCM_SETWINDOWTHEME
Public Const RB_SETEXTENDEDSTYLE  = (WM_USER + 41)
Public Const RB_GETEXTENDEDSTYLE  = (WM_USER + 42)
Public Const RB_PUSHCHEVRON  = (WM_USER + 43)
Public Const RB_SETBANDWIDTH  = (WM_USER + 44)  ' set width for docked band

Public Const RBSTR_CHANGERECT = &H0001

Public Const RBN_FIRST As Long = (-831)
Public Const RBN_HEIGHTCHANGE  = (RBN_FIRST - 0)
Public Const RBN_GETOBJECT  = (RBN_FIRST - 1)
Public Const RBN_LAYOUTCHANGED  = (RBN_FIRST - 2)
Public Const RBN_AUTOSIZE  = (RBN_FIRST - 3)
Public Const RBN_BEGINDRAG  = (RBN_FIRST - 4)
Public Const RBN_ENDDRAG  = (RBN_FIRST - 5)
Public Const RBN_DELETINGBAND  = (RBN_FIRST - 6)  ' Uses NMREBAR
Public Const RBN_DELETEDBAND  = (RBN_FIRST - 7)  ' Uses NMREBAR
Public Const RBN_CHILDSIZE  = (RBN_FIRST - 8)
Public Const RBN_CHEVRONPUSHED  = (RBN_FIRST - 10)
Public Const RBN_SPLITTERDRAG  = (RBN_FIRST - 11)
Public Const RBN_MINMAX  = (RBN_FIRST - 21)
Public Const RBN_AUTOBREAK  = (RBN_FIRST - 22)



Public Enum ReBar_Styles
	RBS_TOOLTIPS = &H0100
	RBS_VARHEIGHT = &H0200
	RBS_BANDBORDERS = &H0400
	RBS_FIXEDORDER = &H0800
	RBS_REGISTERDROP = &H1000
	RBS_AUTOSIZE = &H2000
	RBS_VERTICALGRIPPER = &H4000 ' this always has the vertical gripper (default for horizontal mode)
	RBS_DBLCLKTOGGLE = &H8000&
End Enum

Public Enum ReBar_IM
	RBIM_IMAGELIST = &H00000001
End Enum

Public Type REBARINFO
	cbSize As Long
	fMask As ReBar_IM
	himl As LongPtr
End Type

Public Enum ReBar_BandStyles
	RBBS_BREAK = &H00000001 ' break to new line
	RBBS_FIXEDSIZE = &H00000002 ' band can't be sized
	RBBS_CHILDEDGE = &H00000004 ' edge around top & bottom of child window
	RBBS_HIDDEN = &H00000008 ' don't show
	RBBS_NOVERT = &H00000010 ' don't show when vertical
	RBBS_FIXEDBMP = &H00000020 ' bitmap doesn't move during band resize
	RBBS_VARIABLEHEIGHT = &H00000040 ' allow autosizing of this child vertically
	RBBS_GRIPPERALWAYS = &H00000080 ' always show the gripper
	RBBS_NOGRIPPER = &H00000100 ' never show the gripper
	RBBS_USECHEVRON = &H00000200
	RBBS_HIDETITLE = &H00000400
	RBBS_TOPALIGN = &H00000800
    RBBS_FIXEDHEADERSIZE = &H40000000 'UNDOCUMENTED
    RBBS_DRAGBREAK = &H80000000 'UNDOCUMENTED
End Enum

Public Enum ReBar_BandInfoMask
	RBBIM_STYLE = &H00000001
	RBBIM_COLORS = &H00000002
	RBBIM_TEXT = &H00000004
	RBBIM_IMAGE = &H00000008
	RBBIM_CHILD = &H00000010
	RBBIM_CHILDSIZE = &H00000020
	RBBIM_SIZE = &H00000040
	RBBIM_BACKGROUND = &H00000080
	RBBIM_ID = &H00000100
	RBBIM_IDEALSIZE = &H00000200
	RBBIM_LPARAM = &H00000400
	RBBIM_HEADERSIZE = &H00000800 ' control the size of the header
	RBBIM_CHEVRONLOCATION = &H00001000
	RBBIM_CHEVRONSTATE = &H00002000
End Enum

Public Type REBARBANDINFOA
	cbSize As Long
	fMask As ReBar_BandInfoMask
	fStyle As ReBar_BandStyles
	clrFore As Long
	clrBack As Long
	lpText As String
	cch As Long
	iImage As Long
	hwndChild As LongPtr
	cxMinChild As Long
	cyMinChild As Long
	cx As Long
	hbmBack As LongPtr
	wID As Long
	cyChild As Long
	cyMaxChild As Long
	cyIntegral As Long
	cxIdeal As Long
	lParam As LongPtr
	cxHeader As Long
	'# if(NTDDI_VERSION >=NTDDI_VISTA As 
	rcChevronLocation As RECT ' the rect is in client co-ord wrt hwndChild
	uChevronState As Long ' STATE_SYSTEM_*
End Type
Public Type REBARBANDINFOW
	cbSize As Long
	fMask As ReBar_BandInfoMask
	fStyle As ReBar_BandStyles
	clrFore As Long
	clrBack As Long
	lpText As LongPtr
	cch As Long
	iImage As Long
	hwndChild As LongPtr
	cxMinChild As Long
	cyMinChild As Long
	cx As Long
	hbmBack As LongPtr
	wID As Long
	cyChild As Long
	cyMaxChild As Long
	cyIntegral As Long
	cxIdeal As Long
	lParam As LongPtr
	cxHeader As Long
	'# if(NTDDI_VERSION >=NTDDI_VISTA As 
	rcChevronLocation As RECT ' the rect is in client co-ord wrt hwndChild
	uChevronState As Long ' STATE_SYSTEM_*
End Type
Public Type REBARBANDINFO
    cbSize As Long
    fMask As ReBar_BandInfoMask
    fStyle As ReBar_BandStyles
    clrFore As Long
    clrBack As Long
    lpText As LongPtr
    cch As Long
    iImage As Long
    hwndChild As LongPtr
    cxMinChild As Long
    cyMinChild As Long
    cx As Long
    hbmBack As LongPtr
    wID As Long
    cyChild As Long
    cyMaxChild As Long
    cyIntegral As Long
    cxIdeal As Long
    lParam As LongPtr
    cxHeader As Long
    '# if(NTDDI_VERSION >=NTDDI_VISTA As 
    rcChevronLocation As RECT ' the rect is in client co-ord wrt hwndChild
    uChevronState As Long ' STATE_SYSTEM_*
End Type
Public Type NMREBARCHILDSIZE
	hdr As NMHDR
	uBand As Long
	wID As Long
	rcChild As RECT
	rcBand As RECT
End Type

Public Enum NMREBARMasks
	RBNM_ID = &H00000001
	RBNM_STYLE = &H00000002
	RBNM_LPARAM = &H00000004
End Enum
Public Type NMREBAR
	hdr As NMHDR
	dwMask As NMREBARMasks ' RBNM_*
	uBand As Long
	fStyle As ReBar_Styles
	wID As Long
	lParam As LongPtr
End Type

Public Type NMRBAUTOSIZE
	hdr As NMHDR
	fChanged As BOOL
	rcTarget As RECT
	rcActual As RECT
End Type

Public Type NMREBARCHEVRON
	hdr As NMHDR
	uBand As Long
	wID As Long
	lParam As LongPtr
	rc As RECT
	lParamNM As LongPtr
End Type

Public Type NMREBARSPLITTER
	hdr As NMHDR
	rcSizing As RECT
End Type

Public Enum RBAB
	RBAB_AUTOSIZE = &H0001
	RBAB_ADDBAND = &H0002
End Enum
Public Type NMREBARAUTOBREAK
	hdr As NMHDR
	uBand As Long
	wID As Long
	lParam As LongPtr
	uMsg As Long
	fStyleCurrent As RBAB
	fAutoBreak As Long
End Type

Public Enum ReBar_HitTestFlags
	RBHT_NOWHERE = &H0001
	RBHT_CAPTION = &H0002
	RBHT_CLIENT = &H0003
	RBHT_GRABBER = &H0004
	RBHT_CHEVRON = &H0008
	RBHT_SPLITTER = &H0010
End Enum
Public Type RBHITTESTINFO
	pt As POINT
	flags As ReBar_HitTestFlags
	iBand As Long
End Type
#End Region

#Region "RichEdit"


Public Enum RichEdit_ParagraphFormatMask
	PFM_STARTINDENT = &H00000001
	PFM_RIGHTINDENT = &H00000002
	PFM_OFFSET = &H00000004
	PFM_ALIGNMENT = &H00000008
	PFM_TABSTOPS = &H00000010
	PFM_NUMBERING = &H00000020
	PFM_OFFSETINDENT = &H80000000
'  PARAFORMAT 2.0 masks and effects
	PFM_SPACEBEFORE = &H00000040
	PFM_SPACEAFTER = &H00000080
	PFM_LINESPACING = &H00000100
	PFM_STYLE = &H00000400
	PFM_BORDER = &H00000800  ' (*)
	PFM_SHADING = &H00001000  ' (*)
	PFM_NUMBERINGSTYLE = &H00002000  ' RE 3.0
	PFM_NUMBERINGTAB = &H00004000  ' RE 3.0
	PFM_NUMBERINGSTART = &H00008000&  ' RE 3.0
	PFM_RTLPARA = &H00010000
	PFM_KEEP = &H00020000  ' (*)
	PFM_KEEPNEXT = &H00040000  ' (*)
	PFM_PAGEBREAKBEFORE = &H00080000  ' (*)
	PFM_NOLINENUMBER = &H00100000  ' (*)
	PFM_NOWIDOWCONTROL = &H00200000  ' (*)
	PFM_DONOTHYPHEN = &H00400000  ' (*)
	PFM_SIDEBYSIDE = &H00800000  ' (*)
'  The following two paragraph-format properties are read only
	PFM_COLLAPSED = &H01000000  ' RE 3.0
	PFM_OUTLINELEVEL = &H02000000  ' RE 3.0
	PFM_BOX = &H04000000  ' RE 3.0
	PFM_RESERVED2 = &H08000000  ' RE 4.0
	PFM_TABLEROWDELIMITER = &H10000000  ' RE 4.0
	PFM_TEXTWRAPPINGBREAK = &H20000000  ' RE 3.0
	PFM_TABLE = &H40000000  ' RE 3.0
'  PARAFORMAT "ALL" masks
	PFM_ALL = (PFM_STARTINDENT Or PFM_RIGHTINDENT Or PFM_OFFSET Or PFM_TABSTOPS Or PFM_NUMBERING Or PFM_RTLPARA)
'  Note: PARAFORMAT has no effects (BiDi RichEdit 1.0 does have PFE_RTLPARA)
	PFM_EFFECTS = (PFM_RTLPARA Or PFM_KEEP Or PFM_KEEPNEXT Or PFM_TABLE Or	PFM_PAGEBREAKBEFORE Or PFM_NOLINENUMBER Or	PFM_NOWIDOWCONTROL Or PFM_DONOTHYPHEN Or PFM_SIDEBYSIDE Or	PFM_TABLE Or PFM_TABLEROWDELIMITER)
	PFM_ALL2 = (PFM_ALL Or PFM_EFFECTS Or PFM_SPACEBEFORE Or PFM_SPACEAFTER Or	PFM_LINESPACING Or PFM_STYLE Or PFM_SHADING Or PFM_BORDER Or	PFM_NUMBERINGTAB Or PFM_NUMBERINGSTART Or PFM_NUMBERINGSTYLE)
End Enum

Public Const MAX_TAB_STOPS  = 32

[PackingAlignment(4)]
Public Type PARAFORMAT
	cbSize As Long
	dwMask As RichEdit_ParagraphFormatMask
	wNumbering As Integer
	wEffects As Integer
	dxStartIndent As Long
	dxRightIndent As Long
	dxOffset As Long
	wAlignment As Integer
	cTabCount As Integer
	rgxTabs(0 To (MAX_TAB_STOPS - 1)) As Long
End Type


Public Enum tomOpenFlags
	tomRTF = 1
	tomText = 2
	tomHTML = 3
	tomWordDocument = 4
	tomCreateNew = 16
	tomCreateAlways = 32
	tomOpenExisting = 48
	tomOpenAlways = 64
	tomTruncateExisting = 80
	tomReadOnly = 256
	tomShareDenyRead = 512
	tomShareDenyWrite = 1024
	tomPasteFile = 4096
End Enum

Public Enum tomLineSpacingRules
	tomLineSpaceSingle = 0
	tomLineSpace1pt5 = 1
	tomLineSpaceDouble = 2
	tomLineSpaceAtLeast = 3
	tomLineSpaceExactly = 4
	tomLineSpaceMultiple = 5
End Enum

Public Enum tomAlign
	tomAlignLeft = 0
	tomAlignCenter = 1
	tomAlignRight = 2
	tomAlignJustify = 3
	tomAlignDecimal = 3
	tomAlignBar = 4
End Enum

Public Enum tomSelection
	tomNoSelection = 0
	tomSelectionIP = 1
	tomSelectionNormal = 2
	tomSelectionFrame = 3
	tomSelectionColumn = 4
	tomSelectionRow = 5
	tomSelectionBlock = 6
	tomSelectionInlineShape = 7
	tomSelectionShape = 8
End Enum

Public Enum tomBool
	tomFalse = 0
	tomTrue = &Hffffffff
	tomToggle = &Hff676982
End Enum

Public Enum tomColor
	tomAutoColor = &Hff676983
End Enum

Public Enum tomResetFlags
	tomDefault = &Hff676984
	tomUndefined = &Hff676981
End Enum

Public Enum tomMove
	tomBackward = &Hc0000001
	tomForward = &H3fffffff
End Enum

Public Enum tomExtend
	tomMove = 0
	tomExtend = 1
End Enum

Public Enum tomSelectionFlags
	tomSelStartActive = 1
	tomSelAtEOL = 2
	tomSelOvertype = 4
	tomSelActive = 8
	tomSelReplace = 16
End Enum

Public Enum tomStartEnd
	tomEnd = 0
	tomStart = 32
End Enum

Public Enum tomCollapse
	tomCollapseEnd = 0
	tomCollapseStart = 1
End Enum

Public Enum tomUnderline
	tomNone = 0
	tomSingle = 1
	tomWords = 2
	tomDouble = 3
	tomDotted = 4
End Enum

Public Enum tomTabSpace
	tomSpaces = 0
	tomDots = 1
	tomDashes = 2
	tomLines = 3
End Enum

Public Enum tomTabs
	tomTabBack = &Hfffffffd
	tomTabNext = &Hfffffffe
	tomTabHere = &Hffffffff
End Enum

Public Enum tomList
	tomListNone = 0
	tomListBullet = 1
	tomListNumberAsArabic = 2
	tomListNumberAsLCLetter = 3
	tomListNumberAsUCLetter = 4
	tomListNumberAsLCRoman = 5
	tomListNumberAsUCRoman = 6
	tomListNumberAsSequence = 7
	tomListParentheses = &H00010000
	tomListPeriod = &H00020000
	tomListPlain = &H00030000
End Enum

Public Enum tomUnits
	tomCharacter = 1
	tomWord = 2
	tomSentence = 3
	tomParagraph = 4
	tomLine = 5
	tomStory = 6
	tomScreen = 7
	tomSection = 8
	tomColumn = 9
	tomRow = 10
	tomWindow = 11
	tomCell = 12
	tomCharFormat = 13
	tomParaFormat = 14
	tomTable = 15
	tomObject = 16
End Enum

Public Enum tomFindFlags
	tomMatchWord = 2
	tomMatchCase = 4
	tomMatchPattern = 8
End Enum

Public Enum tomStories
	tomUnknownStory = 0
	tomMainTextStory = 1
	tomFootnotesStory = 2
	tomEndnotesStory = 3
	tomCommentsStory = 4
	tomTextFrameStory = 5
	tomEvenPagesHeaderStory = 6
	tomPrimaryHeaderStory = 7
	tomEvenPagesFooterStory = 8
	tomPrimaryFooterStory = 9
	tomFirstPageHeaderStory = 10
	tomFirstPageFooterStory = 11
End Enum

Public Enum tomAnimation
	tomNoAnimation = 0
	tomLasVegasLights = 1
	tomBlinkingBackground = 2
	tomSparkleText = 3
	tomMarchingBlackAnts = 4
	tomMarchingRedAnts = 5
	tomShimmer = 6
	tomWipeDown = 7
	tomWipeRight = 8
	tomAnimationMax = 8
End Enum

Public Enum tomCase
	tomLowerCase = 0
	tomUpperCase = 1
	tomTitleCase = 2
	tomSentenceCase = 4
	tomToggleCase = 5
End Enum

Public Enum REO_GETOBJ
	REO_GETOBJ_NO_INTERFACES = 0
	REO_GETOBJ_POLEOBJ = 1
	REO_GETOBJ_PSTG = 2
	REO_GETOBJ_POLESITE = 4
	REO_GETOBJ_ALL_INTERFACES = 7
End Enum

Public Enum REO_IOB
	REO_IOB_SELECTION = &Hffffffff
	REO_CP_SELECTION = &Hffffffff
	REO_IOB_USE_CP = &Hfffffffe
End Enum

Public Enum REO_FLAGS
	REO_NULL = (&H00000000)
	REO_READWRITEMASK = (&H000007FF)
	REO_CANROTATE = (&H00000080)
	REO_OWNERDRAWSELECT = (&H00000040)
	REO_DONTNEEDPALETTE = (&H00000020)
	REO_BLANK = (&H00000010)
	REO_DYNAMICSIZE = (&H00000008)
	REO_INVERTEDSELECT = (&H00000004)
	REO_BELOWBASELINE = (&H00000002)
	REO_RESIZABLE = (&H00000001)
	REO_USEASBACKGROUND = (&H00000400)
	REO_WRAPTEXTAROUND = (&H00000200)
	REO_ALIGNTORIGHT = (&H00000100)
	REO_LINK = (&H80000000)
	REO_STATIC = (&H40000000)
	REO_SELECTED = (&H08000000)
	REO_OPEN = (&H04000000)
	REO_INPLACEACTIVE = (&H02000000)
	REO_HILITED = (&H01000000)
	REO_LINKAVAILABLE = (&H00800000)
	REO_GETMETAFILE = (&H00400000)
End Enum

Public Enum RECO_FLAGS
	RECO_PASTE = 0
	RECO_DROP = 1
	RECO_COPY = 2
	RECO_CUT = 3
	RECO_DRAG = 4
End Enum

Public Type REOBJECT
	cbStruct As Long
	cp As Long
	clsid As UUID
	poleobj As IOleObject
	pstg As IStorage
	polesite As IOleClientSite
	sizel As SIZE
	DVASPECT As DVASPECT
	dwFlags As REO_FLAGS
	dwUser As Long
End Type

Public Type CHARRANGE
	start As Long
	End As Long
End Type

Public Enum TXTBACKSTYLE
	TXTBACK_TRANSPARENT = 0 '@emembackground should show through
	TXTBACK_OPAQUE = 1 '@ememerase background
End Enum

Public Enum TXTHITRESULT
	TXTHITRESULT_NOHIT = 0 '@ememno hit
	TXTHITRESULT_TRANSPARENT = 1 '@emem point is within the text's rectangle, but
	' in a transparent region
	TXTHITRESULT_CLOSE = 2 '@emempoint is close to the text
	TXTHITRESULT_HIT = 3 '@emem dead-on hit
End Enum

Public Enum TXTNATURALSIZE
	TXTNS_FITTOCONTENT2 = 0 '@emem Get size that fits indented content
	TXTNS_FITTOCONTENT = 1 '@emem Get size that fits content
	TXTNS_ROUNDTOLINE = 2 '@emem Round to nearest whole line
	TXTNS_FITTOCONTENT3 = 3 '@emem Get size that fits indented
	' content + trailing whitespace
	TXTNS_FITTOCONTENTWSP = 4 '@emem Get size that fits unindented
	' content + trailing whitespace
	TXTNS_INCLUDELASTLINE = &H40000000 '@emem In plain-text ctrl, inc height
	' of a final CR
	TXTNS_EMU = &H80000000 '@emem EMUs, not pixels are used as
	' measurement units (both ways)
End Enum

Public Enum TXTVIEW
	TXTVIEW_ACTIVE = 0
	TXTVIEW_INACTIVE = -1
End Enum

Public Type CHANGENOTIFY
    dwChangeType As Long
    pvCookieData As LongPtr
End Type

Public Const TXTBIT_RICHTEXT  = 1  ' rich-text control
Public Const TXTBIT_MULTILINE  = 2  ' single vs multi-line control
Public Const TXTBIT_READONLY  = 4  ' read only text
Public Const TXTBIT_SHOWACCELERATOR  = 8  ' underline accelerator character
Public Const TXTBIT_USEPASSWORD  = &H10  ' use password char to display text
Public Const TXTBIT_HIDESELECTION  = &H20  ' show selection when inactive
Public Const TXTBIT_SAVESELECTION  = &H40  ' remember selection when inactive
Public Const TXTBIT_AUTOWORDSEL  = &H80  ' auto-word selection
Public Const TXTBIT_VERTICAL  = &H100  ' vertical
Public Const TXTBIT_SELBARCHANGE  = &H200  ' notification that the selection bar width
'  has changed.
'  FUTURE: move this bit to the end to
'  maintain the division between
'  properties and notifications.
Public Const TXTBIT_WORDWRAP  = &H400  ' if set, then multi-line controls
'  should wrap words to fit the available
'  display
Public Const TXTBIT_ALLOWBEEP  = &H800  ' enable/disable beeping
Public Const TXTBIT_DISABLEDRAG  = &H1000  ' disable/enable dragging
Public Const TXTBIT_VIEWINSETCHANGE  = &H2000  ' the inset changed
Public Const TXTBIT_BACKSTYLECHANGE  = &H4000
Public Const TXTBIT_MAXLENGTHCHANGE  = &H8000&
Public Const TXTBIT_SCROLLBARCHANGE  = &H10000
Public Const TXTBIT_CHARFORMATCHANGE  = &H20000
Public Const TXTBIT_PARAFORMATCHANGE  = &H40000
Public Const TXTBIT_EXTENTCHANGE  = &H80000
Public Const TXTBIT_CLIENTRECTCHANGE  = &H100000  ' the client rectangle changed
Public Const TXTBIT_USECURRENTBKG  = &H200000  ' tells the renderer to use the current background
'  color rather than the system default for an entire line
Public Const TXTBIT_NOTHREADREFCOUNT  = &H400000  ' don't reference TLS data on behalf of this instance
Public Const TXTBIT_SHOWPASSWORD  = &H800000  ' Show password string
Public Const TXTBIT_D2DDWRITE  = &H1000000  ' Use D2D/DWrite for this instance (and not GDI/Uniscribe).
Public Const TXTBIT_D2DSIMPLETYPOGRAPHY  = &H2000000  ' Don't glyph all. Only valid if D2DDWRITE is set.
Public Const TXTBIT_D2DPIXELSNAPPED  = &H4000000  ' Don't do subpixel. Only valid if D2DDWRITE is set.
Public Const TXTBIT_D2DSUBPIXELLINES  = &H8000000  ' Don't pixel-snap text lines and underline, strikethrough
'   in the secondary text flow direction (usually vertical)
'   Only valid if D2DDWRITE is set and D2DPIXELSNAPPED is not set.
Public Const TXTBIT_FLASHLASTPASSWORDCHAR  = &H10000000  ' Show last password char momentarily
Public Const TXTBIT_ADVANCEDINPUT  = &H20000000  ' Use advanced input features.

Public Enum CFMT_Mask
	CFM_BOLD = &H00000001
	CFM_ITALIC = &H00000002
	CFM_UNDERLINE = &H00000004
	CFM_STRIKEOUT = &H00000008
	CFM_PROTECTED = &H00000010
	CFM_LINK = &H00000020  ' Exchange hyperlink extension
	CFM_SIZE = &H80000000
	CFM_COLOR = &H40000000
	CFM_FACE = &H20000000
	CFM_OFFSET = &H10000000
	CFM_CHARSET = &H08000000
	CFM_SMALLCAPS = &H00000040  ' (*)
	CFM_ALLCAPS = &H00000080  ' Displayed by 3.0
	CFM_HIDDEN = &H00000100  ' Hidden by 3.0
	CFM_OUTLINE = &H00000200  ' (*)
	CFM_SHADOW = &H00000400  ' (*)
	CFM_EMBOSS = &H00000800  ' (*)
	CFM_IMPRINT = &H00001000  ' (*)
	CFM_DISABLED = &H00002000
	CFM_REVISED = &H00004000
	CFM_REVAUTHOR = &H00008000&
	CFE_SUBSCRIPT = &H00010000  ' Superscript and subscript are
	CFE_SUPERSCRIPT = &H00020000  '    mutually exclusive
	CFM_ANIMATION = &H00040000  ' (*)
	CFM_STYLE = &H00080000  ' (*)
	CFM_KERNING = &H00100000
	CFM_SPACING = &H00200000  ' Displayed by 3.0
	CFM_WEIGHT = &H00400000
	CFM_UNDERLINETYPE = &H00800000  ' Many displayed by 3.0
	'(_RICHEDIT_VER  = >= &H0600)
	CFM_COOKIE = &H01000000  ' RE 6.0
	' = #endif
	CFM_LCID = &H02000000
	CFM_BACKCOLOR = &H04000000  ' Higher mask bits defined above
	CFM_SUBSCRIPT = (CFE_SUBSCRIPT Or CFE_SUPERSCRIPT)
	CFM_SUPERSCRIPT = CFM_SUBSCRIPT
	CFM_EFFECTS = (CFM_BOLD Or CFM_ITALIC Or CFM_UNDERLINE Or CFM_COLOR Or CFE_PROTECTED Or CFM_LINK)
	CFM_ALL = (CFM_EFFECTS Or CFM_SIZE Or CFM_FACE Or CFM_OFFSET Or CFM_CHARSET)
	CFM_EFFECTS2 = (CFM_EFFECTS Or CFM_DISABLED Or CFM_SMALLCAPS Or CFM_ALLCAPS Or CFM_OUTLINE Or CFM_SHADOW Or CFM_EMBOSS Or CFM_IMPRINT Or CFM_REVISED Or CFM_SUBSCRIPT Or CFM_SUPERSCRIPT Or CFM_BACKCOLOR)
	'(_RICHEDIT_VER  = >= &H0600)
	CFM_ALL2 = (CFM_ALL Or CFM_EFFECTS2 Or CFM_BACKCOLOR Or CFM_LCID Or	CFM_UNDERLINETYPE Or CFM_WEIGHT Or CFM_REVAUTHOR Or CFM_SPACING Or CFM_KERNING Or CFM_STYLE Or CFM_ANIMATION Or CFM_COOKIE)
End Enum

[PackingAlignment(4)]
Public Type CHARFORMATW
	cbSize As Long
	dwMask As CFMT_Mask
	dwEffects As CFMT_Effects
	yHeight As Long
	yOffset As Long
	crTextColor As Long
	bCharSet As Byte
	bPitchAndFamily As Byte
	szFaceName(0 To (32 - 1)) As Integer
End Type
[PackingAlignment(4)]
Public Type CHARFORMAT
    cbSize As Long
    dwMask As CFMT_Mask
    dwEffects As CFMT_Effects
    yHeight As Long
    yOffset As Long
    crTextColor As Long
    bCharSet As Byte
    bPitchAndFamily As Byte
    szFaceName(0 To (32 - 1)) As Integer
End Type


Public Const RICHEDIT60_CLASS = "RICHEDIT60W"
Public Const MSFTEDIT_CLASS	= "RICHEDIT50W"
Public Const RICHEDIT_CLASSW = "RichEdit20W"

Public Const EM_CANPASTE  = (WM_USER + 50)
Public Const EM_DISPLAYBAND= (WM_USER + 51)
Public Const EM_EXGETSEL  = (WM_USER + 52)
Public Const EM_EXLIMITTEXT= (WM_USER + 53)
Public Const EM_EXLINEFROMCHAR= (WM_USER + 54)
Public Const EM_EXSETSEL  = (WM_USER + 55)
Public Const EM_FINDTEXT  = (WM_USER + 56)
Public Const EM_FORMATRANGE= (WM_USER + 57)
Public Const EM_GETCHARFORMAT= (WM_USER + 58)
Public Const EM_GETEVENTMASK  = (WM_USER + 59)
Public Const EM_GETOLEINTERFACE= (WM_USER + 60)
Public Const EM_GETPARAFORMAT= (WM_USER + 61)
Public Const EM_GETSELTEXT= (WM_USER + 62)
Public Const EM_HIDESELECTION= (WM_USER + 63)
Public Const EM_PASTESPECIAL  = (WM_USER + 64)
Public Const EM_REQUESTRESIZE= (WM_USER + 65)
Public Const EM_SELECTIONTYPE= (WM_USER + 66)
Public Const EM_SETBKGNDCOLOR= (WM_USER + 67)
Public Const EM_SETCHARFORMAT= (WM_USER + 68)
Public Const EM_SETEVENTMASK  = (WM_USER + 69)
Public Const EM_SETOLECALLBACK= (WM_USER + 70)
Public Const EM_SETPARAFORMAT= (WM_USER + 71)
Public Const EM_SETTARGETDEVICE= (WM_USER + 72)
Public Const EM_STREAMIN  = (WM_USER + 73)
Public Const EM_STREAMOUT= (WM_USER + 74)
Public Const EM_GETTEXTRANGE  = (WM_USER + 75)
Public Const EM_FINDWORDBREAK= (WM_USER + 76)
Public Const EM_SETOPTIONS= (WM_USER + 77)
Public Const EM_GETOPTIONS= (WM_USER + 78)
Public Const EM_FINDTEXTEX= (WM_USER + 79)
Public Const EM_GETWORDBREAKPROCEX= (WM_USER + 80)
Public Const EM_SETWORDBREAKPROCEX= (WM_USER + 81)
'  RichEdit 2.0 messages
Public Const EM_SETUNDOLIMIT  = (WM_USER + 82)
Public Const EM_REDO  = (WM_USER + 84)
Public Const EM_CANREDO= (WM_USER + 85)
Public Const EM_GETUNDONAME= (WM_USER + 86)
Public Const EM_GETREDONAME= (WM_USER + 87)
Public Const EM_STOPGROUPTYPING= (WM_USER + 88)
Public Const EM_SETTEXTMODE= (WM_USER + 89)
Public Const EM_GETTEXTMODE= (WM_USER + 90)
Public Const EM_AUTOURLDETECT= (WM_USER + 91)
Public Const EM_GETAUTOURLDETECT  = (WM_USER + 92)
Public Const EM_SETPALETTE= (WM_USER + 93)
Public Const EM_GETTEXTEX= (WM_USER + 94)
Public Const EM_GETTEXTLENGTHEX= (WM_USER + 95)
Public Const EM_SHOWSCROLLBAR= (WM_USER + 96)
Public Const EM_SETTEXTEX= (WM_USER + 97)
'  East Asia specific messages
Public Const EM_SETPUNCTUATION= (WM_USER + 100)
Public Const EM_GETPUNCTUATION= (WM_USER + 101)
Public Const EM_SETWORDWRAPMODE= (WM_USER + 102)
Public Const EM_GETWORDWRAPMODE= (WM_USER + 103)
Public Const EM_SETIMECOLOR= (WM_USER + 104)
Public Const EM_GETIMECOLOR= (WM_USER + 105)
Public Const EM_SETIMEOPTIONS= (WM_USER + 106)
Public Const EM_GETIMEOPTIONS= (WM_USER + 107)
Public Const EM_CONVPOSITION  = (WM_USER + 108)
Public Const EM_SETLANGOPTIONS= (WM_USER + 120)
Public Const EM_GETLANGOPTIONS= (WM_USER + 121)
Public Const EM_GETIMECOMPMODE= (WM_USER + 122)
Public Const EM_FINDTEXTW= (WM_USER + 123)
Public Const EM_FINDTEXTEXW= (WM_USER + 124)
'  RE3.0 FE messages
Public Const EM_RECONVERSION  = (WM_USER + 125)
Public Const EM_SETIMEMODEBIAS= (WM_USER + 126)
Public Const EM_GETIMEMODEBIAS= (WM_USER + 127)
'  BiDi specific messages
Public Const EM_SETBIDIOPTIONS= (WM_USER + 200)
Public Const EM_GETBIDIOPTIONS= (WM_USER + 201)
Public Const EM_SETTYPOGRAPHYOPTIONS  = (WM_USER + 202)
Public Const EM_GETTYPOGRAPHYOPTIONS  = (WM_USER + 203)
'  Extended edit style specific messages
Public Const EM_SETEDITSTYLE  = (WM_USER + 204)
Public Const EM_GETEDITSTYLE  = (WM_USER + 205)
Public Const EM_OUTLINE= (WM_USER + 220)
'  Message for getting and restoring scroll pos
Public Const EM_GETSCROLLPOS  = (WM_USER + 221)
Public Const EM_SETSCROLLPOS  = (WM_USER + 222)
'  Change fontsize in current selection by wParam
Public Const EM_SETFONTSIZE= (WM_USER + 223)
Public Const EM_GETZOOM= (WM_USER + 224)
Public Const EM_SETZOOM= (WM_USER + 225)
Public Const EM_GETVIEWKIND= (WM_USER + 226)
Public Const EM_SETVIEWKIND= (WM_USER + 227)
'  RichEdit 4.0 messages
Public Const EM_GETPAGE= (WM_USER + 228)
Public Const EM_SETPAGE= (WM_USER + 229)
Public Const EM_GETHYPHENATEINFO  = (WM_USER + 230)
Public Const EM_SETHYPHENATEINFO  = (WM_USER + 231)
Public Const EM_GETPAGEROTATE= (WM_USER + 235)
Public Const EM_SETPAGEROTATE= (WM_USER + 236)
Public Const EM_GETCTFMODEBIAS= (WM_USER + 237)
Public Const EM_SETCTFMODEBIAS= (WM_USER + 238)
Public Const EM_GETCTFOPENSTATUS  = (WM_USER + 240)
Public Const EM_SETCTFOPENSTATUS  = (WM_USER + 241)
Public Const EM_GETIMECOMPTEXT= (WM_USER + 242)
Public Const EM_ISIME= (WM_USER + 243)
Public Const EM_GETIMEPROPERTY= (WM_USER + 244)
'  These messages control what rich edit does when it comes accross
'  OLE objects during RTF stream in.  Normally rich edit queries the client
'  application only after OleLoad has been called.  With these messages it is possible to
'  set the rich edit control to a mode where it will query the client application before
'  OleLoad is called
Public Const EM_GETQUERYRTFOBJ= (WM_USER + 269)
Public Const EM_SETQUERYRTFOBJ= (WM_USER + 270)
Public Const EM_INSERTTABLE= (WM_USER + 232)
Public Const EM_GETAUTOCORRECTPROC= (WM_USER + 233)
Public Const EM_SETAUTOCORRECTPROC= (WM_USER + 234)
Public Const EM_CALLAUTOCORRECTPROC= (WM_USER + 255)
Public Const EM_GETTABLEPARMS= (WM_USER + 265)
Public Const EM_SETEDITSTYLEEX= (WM_USER + 275)
Public Const EM_GETEDITSTYLEEX= (WM_USER + 276)
Public Const EM_GETSTORYTYPE= (WM_USER + 290)
Public Const EM_SETSTORYTYPE= (WM_USER + 291)
Public Const EM_GETELLIPSISMODE= (WM_USER + 305)
Public Const EM_SETELLIPSISMODE= (WM_USER + 306)
Public Const EM_SETTABLEPARMS= (WM_USER + 307)
Public Const EM_GETTOUCHOPTIONS= (WM_USER + 310)
Public Const EM_SETTOUCHOPTIONS= (WM_USER + 311)
Public Const EM_INSERTIMAGE  = (WM_USER + 314)
Public Const EM_SETUIANAME= (WM_USER + 320)
Public Const EM_GETELLIPSISSTATE= (WM_USER + 322)

Public Const EN_MSGFILTER  = &H0700
Public Const EN_REQUESTRESIZE  = &H0701
Public Const EN_SELCHANGE  = &H0702
Public Const EN_DROPFILES  = &H0703
Public Const EN_PROTECTED  = &H0704
Public Const EN_CORRECTTEXT  = &H0705  ' PenWin specific
Public Const EN_STOPNOUNDO  = &H0706
Public Const EN_IMECHANGE  = &H0707  ' East Asia specific
Public Const EN_SAVECLIPBOARD  = &H0708
Public Const EN_OLEOPFAILED  = &H0709
Public Const EN_OBJECTPOSITIONS  = &H070a
Public Const EN_LINK  = &H070b
Public Const EN_DRAGDROPDONE  = &H070c
Public Const EN_PARAGRAPHEXPANDED  = &H070d
Public Const EN_PAGECHANGE  = &H070e
Public Const EN_LOWFIRTF  = &H070f
Public Const EN_ALIGNLTR  = &H0710  ' BiDi specific notification
Public Const EN_ALIGNRTL  = &H0711  ' BiDi specific notification
'(_RICHEDIT_VER  = >= &H0800)
Public Const EN_CLIPFORMAT  = &H0712
Public Const EN_STARTCOMPOSITION  = &H0713
Public Const EN_ENDCOMPOSITION  = &H0714



Public Enum TextMode
	TM_PLAINTEXT = 1
	TM_RICHTEXT = 2 ' Default behavior
	TM_SINGLELEVELUNDO = 4
	TM_MULTILEVELUNDO = 8 ' Default behavior
	TM_SINGLECODEPAGE = 16
	TM_MULTICODEPAGE = 32 ' Default behavior
End Enum

Public Enum AutoURL_Flags
    AURL_ENABLEURL =	1
    AURL_ENABLEEMAILADDR	= 2
    AURL_ENABLETELNO	= 4
    AURL_ENABLEEAURLS	= 8
    AURL_ENABLEDRIVELETTERS =	16
    AURL_DISABLEMIXEDLGC	= 32	'/ / Disable mixed Latin Greek Cyrillic IDNs
End Enum

Public Enum RichEd_ExtendedEditStyles
     SES_EMULATESYSEDIT	= 1
     SES_BEEPONMAXTEXT	= 2
     SES_EXTENDBACKCOLOR = 4
     SES_MAPCPS	= 8		'/ / Obsolete (never used)
'#if (_RICHEDIT_VER >= = &H0500)
     SES_HYPERLINKTOOLTIPS =	8
'#endif
     SES_EMULATE10	= 16		'// Obsolete (never used)
'#if (_RICHEDIT_VER >= = &H0700)
     SES_DEFAULTLATINLIGA	= 16
'#endif
     SES_USECRLF = 32		'// Obsolete (never used)
'#if (_RICHEDIT_VER >= = &H0700)
     SES_NOFOCUSLINKNOTIFY	= 32
'#endif
     SES_USEAIMM = 64
     SES_NOIME	= 128

     SES_ALLOWBEEPS = 256
     SES_UPPERCASE	= 512
     SES_LOWERCASE	= 1024
     SES_NOINPUTSEQUENCECHK = 2048
     SES_BIDI = 4096
     SES_SCROLLONKILLFOCUS = 8192
     SES_XLTCRCRLFTOCR = 16384
     SES_DRAFTMODE = 32768

     SES_USECTF	= &H00010000
     SES_HIDEGRIDLINES	= &H00020000
     SES_USEATFONT	= &H00040000
     SES_CUSTOMLOOK	= &H00080000
     SES_LBSCROLLNOTIFY	= &H00100000
     SES_CTFALLOWEMBED	= &H00200000
     SES_CTFALLOWSMARTTAG	= &H00400000
     SES_CTFALLOWPROOFING	= &H00800000
'#If (_RICHEDIT_VER >= = &H0500)
     SES_LOGICALCARET	= &H01000000
     SES_WORDDRAGDROP	= &H02000000
     SES_SMARTDRAGDROP	= &H04000000
     SES_MULTISELECT	= &H08000000
     SES_CTFNOLOCK	= &H10000000
     SES_NOEALINEHEIGHTADJUST	= &H20000000
     SES_MAX	= &H20000000
End Enum

Public Enum RichEdit_LanguageOptions
    IMF_AUTOKEYBOARD	= &H0001
    IMF_AUTOFONT	= &H0002
    IMF_IMECANCELCOMPLETE	= &H0004	'// High completes comp string when aborting, low cancels
    IMF_IMEALWAYSSENDNOTIFY = &H0008
    IMF_AUTOFONTSIZEADJUST	= &H0010
    IMF_UIFONTS = &H0020
'#if (_RICHEDIT_VER >= = &H0800)
    IMF_NOIMPLICITLANG	= &H0040
'#endif
    IMF_DUALFONT	= &H0080
'#if (_RICHEDIT_VER >= = &H0800)
    IMF_NOKBDLIDFIXUP	= &H0200
'#endif
    IMF_NORTFFONTSUBSTITUTE = &H0400
'#if (_RICHEDIT_VER >= = &H0800)
    IMF_SPELLCHECKING	= &H0800
    IMF_TKBPREDICTION	= &H1000
'#endif
'#If (_RICHEDIT_VER >= = &H0810)
    IMF_IMEUIINTEGRATION = &H2000
End Enum

Public Enum RichEdit_IMECompModes
    ICM_NOTOPEN = &H0000
    ICM_LEVEL3	= &H0001
    ICM_LEVEL2	= &H0002
    ICM_LEVEL2_5	= &H0003
    ICM_LEVEL2_SUI	= &H0004
    ICM_CTF = &H0005
End Enum

Public Enum RichEdit_TypographyOptions
    TO_ADVANCEDTYPOGRAPHY	= &H0001
    TO_SIMPLELINEBREAK	= &H0002
    TO_DISABLECUSTOMTEXTOUT = &H0004
    TO_ADVANCEDLAYOUT	= &H0008
End Enum

Public Const EPR_0 = 0 ' Text flows left to right and top to bottom
Public Const EPR_27 = 2  ' Text flows top to bottom and right to left
Public Const EPR_180 = 2 ' Text flows right to left and bottom to top
Public Const EPR_90 = 3 ' Text flows bottom to top and left to right
' (_RICHEDIT_VER  = >= &H0800)
Public Const EPR_SE = 5

Public Enum RichEdit_CTFModeBias
    CTFMODEBIAS_DEFAULT = &H0000
    CTFMODEBIAS_FILENAME	= &H0001
    CTFMODEBIAS_NAME	= &H0002
    CTFMODEBIAS_READING = &H0003
    CTFMODEBIAS_DATETIME	= &H0004
    CTFMODEBIAS_CONVERSATION	= &H0005
    CTFMODEBIAS_NUMERIC = &H0006
    CTFMODEBIAS_HIRAGANA	= &H0007
    CTFMODEBIAS_KATAKANA	= &H0008
    CTFMODEBIAS_HANGUL	= &H0009
    CTFMODEBIAS_HALFWIDTHKATAKANA	= &H000A
    CTFMODEBIAS_FULLWIDTHALPHANUMERIC	= &H000B
    CTFMODEBIAS_HALFWIDTHALPHANUMERIC	= &H000C
End Enum

Public Const IMF_SMODE_PLAURALCLAUSE  = &H0001
Public Const IMF_SMODE_NONE = &H0002

Public Enum RichEdit_IMECTFlags
    ICT_RESULTREADSTR = 1
End Enum
Public Type IMECOMPTEXT
	cb As Long ' count of bytes in the output buffer.
	flags As RichEdit_IMECTFlags ' value specifying the composition string type.
End Type

Public Const EMO_EXIT  = 0  ' Enter normal mode,  lparam ignored
Public Const EMO_ENTER  = 1  ' Enter outline mode, lparam ignored
Public Const EMO_PROMOTE  = 2  ' LOWORD(lparam) == 0 ==>
'     promote  to body-text
'  LOWORD(lparam) != 0 ==>
'     promote/demote current selection
'     by indicated number of levels
Public Const EMO_EXPAND  = 3  ' HIWORD(lparam) = EMO_EXPANDSELECTION
'     -> expands selection to level
'     indicated in LOWORD(lparam)
'     LOWORD(lparam) = -1/+1 corresponds
'     to collapse/expand button presses
'     in winword (other values are
'     equivalent to having pressed these
'     buttons more than once)
'     HIWORD(lparam) = EMO_EXPANDDOCUMENT
'     -> expands whole document to
'     indicated level
Public Const EMO_MOVESELECTION  = 4  ' LOWORD(lparam) != 0 -> move current
'     selection up/down by indicated amount
Public Const EMO_GETVIEWMODE  = 5  ' Returns VM_NORMAL or VM_OUTLINE
'  EMO_EXPAND options
Public Const EMO_EXPANDSELECTION  = 0
Public Const EMO_EXPANDDOCUMENT  = 1
Public Const VM_NORMAL  = 4  ' Agrees with RTF \viewkindN
Public Const VM_OUTLINE  = 2
Public Const VM_PAGE  = 9  ' Screen page view (not print layout)

[PackingAlignment(4)]
Public Type TABLEROWPARMS							 ' EM_INSERTTABLE wparam is a (TABLEROWPARMS *)
	cbRow As Byte ' Count of bytes in this structure
	cbCell As Byte ' Count of bytes in TABLECELLPARMS
	cCell As Byte ' Count of cells
	cRow As Byte ' Count of rows
	dxCellMargin As Long ' Cell left/right margin (\trgaph)
	dxIndent As Long ' Row left (right if fRTL indent (similar to \trleft)
	dyHeight As Long ' Row height (\trrh)
    fBitfield As Long
	' nAlignment:3 As Long ' Row alignment (like PARAFORMAT::bAlignment, \trql, trqr, \trqc)
	' fRTL:1 As Long ' Display cells in RTL order (\rtlrow)
	' fKeep:1 As Long ' Keep row together (\trkeep}
	' fKeepFollow:1 As Long ' Keep row on same page as following row (\trkeepfollow)
	' fWrap:1 As Long ' Wrap text to right/left (depending on bAlignment)
	' ' (see \tdfrmtxtLeftN, \tdfrmtxtRightN)
	' fIdentCells:1 As Long ' lparam points at single struct valid for all cells
	cpStartRow As Long ' cp where to insert table (-1 for selection cp)
	'    (can be used for either TRD by EM_GETTABLEPARMS)
	bTableLevel As Byte ' Table nesting level (EM_GETTABLEPARMS only)
	iCell As Byte ' Index of cell to insert/delete (EM_SETTABLEPARMS only)
End Type

[PackingAlignment(4)]
Public Type TABLECELLPARMS							 ' EM_INSERTTABLE lparam is a (TABLECELLPARMS *)
	dxWidth As Long ' Cell width (\cellx)
    fBitfield As Integer
	' nVertAlign:2 As Long ' Vertical alignment (0/1/2 = top/center/bottom
	' '    \clvertalt (def), \clvertalc, \clvertalb)
	' fMergeTop:1 As Long ' Top cell for vertical merge (\clvmgf)
	' fMergePrev:1 As Long ' Merge with cell above (\clvmrg)
	' fVertical:1 As Long ' Display text top to bottom, right to left (\cltxtbrlv)
	' fMergeStart:1 As Long ' Start set of horizontally merged cells (\clmgf)
	' fMergeCont:1 As Long ' Merge with previous cell (\clmrg)
	wShading As Integer ' Shading in .01%        (\clshdng) e.g., 10000 flips fore/back
	dxBrdrLeft As Integer ' Left border width    (\clbrdrl\brdrwN) (in twips)
	dyBrdrTop As Integer ' Top border width     (\clbrdrt\brdrwN)
	dxBrdrRight As Integer ' Right border width    (\clbrdrr\brdrwN)
	dyBrdrBottom As Integer ' Bottom border width    (\clbrdrb\brdrwN)
	crBrdrLeft As Long ' Left border color    (\clbrdrl\brdrcf)
	crBrdrTop As Long ' Top border color     (\clbrdrt\brdrcf)
	crBrdrRight As Long ' Right border color    (\clbrdrr\brdrcf)
	crBrdrBottom As Long ' Bottom border color    (\clbrdrb\brdrcf)
	crBackPat As Long ' Background color     (\clcbpat)
	crForePat As Long ' Foreground color     (\clcfpat)
End Type

Public Const ATP_NOCHANGE  = 0
Public Const ATP_CHANGE  = 1
Public Const ATP_NODELIMITER  = 2
Public Const ATP_REPLACEALLTEXT  = 4

Public Enum RichEdit_ExtendedEditStylesEx
	SES_EX_NOTABLE = &H00000004
	SES_EX_NOMATH = &H00000040
	SES_EX_HANDLEFRIENDLYURL = &H00000100
	SES_EX_NOTHEMING = &H00080000
	SES_EX_NOACETATESELECTION = &H00100000
	SES_EX_USESINGLELINE = &H00200000
	SES_EX_MULTITOUCH = &H08000000  ' Only works under Win8+
	SES_EX_HIDETEMPFORMAT = &H10000000
	SES_EX_USEMOUSEWPARAM = &H20000000  ' Use wParam when handling WM_MOUSEMOVE message and do not call GetAsyncKeyState    4
End Enum

Public Const ELLIPSIS_MASK  = &H00000003  ' all meaningful bits
Public Const ELLIPSIS_NONE  = &H00000000  ' ellipsis disabled
Public Const ELLIPSIS_END  = &H00000001  ' ellipsis at the end (forced break)
Public Const ELLIPSIS_WORD  = &H00000003  ' ellipsis at the end (word break)

Public Enum RichEdit_TouchOptions
	RTO_SHOWHANDLES = 1
	RTO_DISABLEHANDLES = 2
	RTO_READINGMODE = 3
End Enum

Public Type RICHEDIT_IMAGE_PARAMETERS
	xWidth As Long ' Units are HIMETRIC
	yHeight As Long ' Units are HIMETRIC
	Ascent As Long ' Units are HIMETRIC
	Type As Long ' Valid values are TA_TOP, TA_BOTTOM and TA_BASELINE
	pwszAlternateText As LongPtr
	pIStream As IStream
End Type

Public Enum RichEdit_EndCompCodes
	ECN_ENDCOMPOSITION = &H0001
	ECN_NEWTEXT = &H0002
End Enum
Public Type ENDCOMPOSITIONNOTIFY
	nmhdr As NMHDR
	dwCode As RichEdit_EndCompCodes
End Type

Public Enum RichEdit_EventNotifiyMasks
	ENM_NONE = &H00000000
	ENM_CHANGE = &H00000001
	ENM_UPDATE = &H00000002
	ENM_SCROLL = &H00000004
	ENM_SCROLLEVENTS = &H00000008
	ENM_DRAGDROPDONE = &H00000010
	ENM_PARAGRAPHEXPANDED = &H00000020
	ENM_PAGECHANGE = &H00000040
	'(_RICHEDIT_VER  = >= &H0800)
	ENM_CLIPFORMAT = &H00000080

	ENM_KEYEVENTS = &H00010000
	ENM_MOUSEEVENTS = &H00020000
	ENM_REQUESTRESIZE = &H00040000
	ENM_SELCHANGE = &H00080000
	ENM_DROPFILES = &H00100000
	ENM_PROTECTED = &H00200000
	ENM_CORRECTTEXT = &H00400000  ' PenWin specific
	ENM_IMECHANGE = &H00800000  ' Used by RE1.0 compatibility
	ENM_LANGCHANGE = &H01000000
	ENM_OBJECTPOSITIONS = &H02000000
	ENM_LINK = &H04000000
	ENM_LOWFIRTF = &H08000000
	'(_RICHEDIT_VER  = >= &H0800)
	ENM_STARTCOMPOSITION = &H10000000
	ENM_ENDCOMPOSITION = &H20000000
	ENM_GROUPTYPINGCHANGE = &H40000000
	ENM_HIDELINKTOOLTIP = &H80000000
End Enum

Public Enum RichEdit_ControlStyles
	ES_SAVESEL = &H00008000&
	ES_SUNKEN = &H00004000
	ES_DISABLENOSCROLL = &H00002000
'  Same as WS_MAXIMIZE, but that doesn't make sense so we re-use the value
	ES_SELECTIONBAR = &H01000000
'  Same as ES_UPPERCASE, but re-used to completely disable OLE drag'n'drop
	ES_NOOLEDRAGDROP = &H00000008
'  Obsolete Edit Style
	ES_EX_NOCALLOLEINIT = &H00000000  ' Not supported in RE 2.0/3.0
'  These flags are used in FE Windows
	ES_VERTICAL = &H00400000  ' Not supported in RE 2.0/3.0
	ES_NOIME = &H00080000
	ES_SELFIME = &H00040000
End Enum

Public Enum RichEdit_ControlOptions
	ECO_AUTOWORDSELECTION = &H00000001
	ECO_AUTOVSCROLL = &H00000040
	ECO_AUTOHSCROLL = &H00000080
	ECO_NOHIDESEL = &H00000100
	ECO_READONLY = &H00000800
	ECO_WANTRETURN = &H00001000
	ECO_SAVESEL = &H00008000&
	ECO_SELECTIONBAR = &H01000000
	ECO_VERTICAL = &H00400000  ' FE specific
End Enum

Public Enum RichEdit_ECO_Ops
	ECOOP_SET = &H0001
	ECOOP_OR = &H0002
	ECOOP_AND = &H0003
	ECOOP_XOR = &H0004
End Enum

Public Enum RichEdit_WordBreakActions
	WB_CLASSIFY = 3
	WB_MOVEWORDLEFT = 4
	WB_MOVEWORDRIGHT = 5
	WB_LEFTBREAK = 6
	WB_RIGHTBREAK = 7
'  East Asia specific flags
	WB_MOVEWORDPREV = 4
	WB_MOVEWORDNEXT = 5
	WB_PREVBREAK = 6
	WB_NEXTBREAK = 7
End Enum

Public Const PC_FOLLOWING  = 1
Public Const PC_LEADING  = 2
Public Const PC_OVERFLOW  = 3
Public Const PC_DELIMITER  = 4
Public Const WBF_WORDWRAP  = &H010
Public Const WBF_WORDBREAK  = &H020
Public Const WBF_OVERFLOW  = &H040
Public Const WBF_LEVEL1  = &H080
Public Const WBF_LEVEL2  = &H100
Public Const WBF_CUSTOM  = &H200
'  East Asia specific flags
Public Const IMF_FORCENONE  = &H0001
Public Const IMF_FORCEENABLE  = &H0002
Public Const IMF_FORCEDISABLE  = &H0004
Public Const IMF_CLOSESTATUSWINDOW  = &H0008
Public Const IMF_VERTICAL  = &H0020
Public Const IMF_FORCEACTIVE  = &H0040
Public Const IMF_FORCEINACTIVE  = &H0080
Public Const IMF_FORCEREMEMBER  = &H0100
Public Const IMF_MULTIPLEEDIT  = &H0400


Public Const WBF_CLASS As Byte = &H0F
Public Const WBF_ISWHITE As Byte = &H10
Public Const WBF_BREAKLINE As Byte = &H20
Public Const WBF_BREAKAFTER As Byte = &H40


Public Enum CFMT_Effects
	CFE_BOLD = &H00000001
	CFE_ITALIC = &H00000002
	CFE_UNDERLINE = &H00000004
	CFE_STRIKEOUT = &H00000008
	CFE_PROTECTED = &H00000010
	CFE_LINK = &H00000020
	CFE_AUTOCOLOR = &H40000000
	CFE_SMALLCAPS = CFM_SMALLCAPS
	CFE_ALLCAPS = CFM_ALLCAPS
	CFE_HIDDEN = CFM_HIDDEN
	CFE_OUTLINE = CFM_OUTLINE
	CFE_SHADOW = CFM_SHADOW
	CFE_EMBOSS = CFM_EMBOSS
	CFE_IMPRINT = CFM_IMPRINT
	CFE_DISABLED = CFM_DISABLED
	CFE_REVISED = CFM_REVISED
'  CFE_AUTOCOLOR and CFE_AUTOBACKCOLOR correspond to CFM_COLOR and
'  CFM_BACKCOLOR, respectively, which control them
	CFE_AUTOBACKCOLOR = CFM_BACKCOLOR
	CFM_FONTBOUND = &H00100000
	CFM_LINKPROTECTED = &H00800000  ' Word hyperlink field
	CFM_EXTENDED = &H02000000
	CFM_MATHNOBUILDUP = &H08000000
	CFM_MATH = &H10000000
	CFM_MATHORDINARY = &H20000000
	CFM_ALLEFFECTS = (CFM_EFFECTS2 Or CFM_FONTBOUND Or CFM_EXTENDED Or CFM_MATHNOBUILDUP Or CFM_MATH Or CFM_MATHORDINARY)
	CFE_FONTBOUND = &H00100000  ' Font chosen by binder, not user
	CFE_LINKPROTECTED = &H00800000
	CFE_EXTENDED = &H02000000
	CFE_MATHNOBUILDUP = &H08000000
	CFE_MATH = &H10000000
	CFE_MATHORDINARY = &H20000000
End Enum

[PackingAlignment(4)]
Public Type CHARFORMATA
	cbSize As Long
	dwMask As CFMT_Mask
	dwEffects As CFMT_Effects
	yHeight As Long
	yOffset As Long
	crTextColor As Long
	bCharSet As Byte
	bPitchAndFamily As Byte
	szFaceName(0 To (32 - 1)) As Byte
End Type


[PackingAlignment(4)]
Public Type CHARFORMAT2W
	cbSize As Long
	dwMask As CFMT_Mask
	dwEffects As CFMT_Effects
	yHeight As Long
	yOffset As Long ' > 0 for superscript, < 0 for subscript 
	crTextColor As Long
	bCharSet As Byte
	bPitchAndFamily As Byte
	szFaceName(0 To (32 - 1)) As Integer
	wWeight As Integer ' Font weight (LOGFONT value)        
	sSpacing As Integer ' Amount to space between letters    
	crBackColor As Long ' Background color                 
	lcid As Long ' Locale ID                        
	'#if (_RICHEDIT_VER >== &H0500 
	dwCookie As Long ' Client cookie opaque to RichEdit
	sStyle As Integer ' Style handle                     
	wKerning As Integer ' Twip size above which to kern char pair
	bUnderlineType As Byte ' Underline type                    
	bAnimation As Byte ' Animated text like marching ants 
	bRevAuthor As Byte ' Revision author index            
	'#if (_RICHEDIT_VER >== &H0800 As 
	bUnderlineColor As Byte ' Underline color -- This would be a padding byte if not RichEd = &H800, so can be left in
End Type
[PackingAlignment(4)]
Public Type CHARFORMAT2
    cbSize As Long
    dwMask As CFMT_Mask
    dwEffects As CFMT_Effects
    yHeight As Long
    yOffset As Long ' > 0 for superscript, < 0 for subscript 
    crTextColor As Long
    bCharSet As Byte
    bPitchAndFamily As Byte
    szFaceName(0 To (32 - 1)) As Integer
    wWeight As Integer ' Font weight (LOGFONT value)        
    sSpacing As Integer ' Amount to space between letters    
    crBackColor As Long ' Background color                 
    lcid As Long ' Locale ID                        
    '#if (_RICHEDIT_VER >== &H0500 
    dwCookie As Long ' Client cookie opaque to RichEdit
    sStyle As Integer ' Style handle                     
    wKerning As Integer ' Twip size above which to kern char pair
    bUnderlineType As Byte ' Underline type                    
    bAnimation As Byte ' Animated text like marching ants 
    bRevAuthor As Byte ' Revision author index            
    '#if (_RICHEDIT_VER >== &H0800 As 
    bUnderlineColor As Byte ' Underline color -- This would be a padding byte if not RichEd = &H800, so can be left in
End Type

[PackingAlignment(4)]
Public Type CHARFORMAT2A
	cbSize As Long
	dwMask As CFMT_Mask
	dwEffects As CFMT_Effects
	yHeight As Long
	yOffset As Long ' > 0 for superscript, < 0 for subscript 
	crTextColor As Long
	bCharSet As Byte
	bPitchAndFamily As Byte
	szFaceName(0 To (32 - 1)) As Byte
	wWeight As Integer ' Font weight (LOGFONT value)        
	sSpacing As Integer ' Amount to space between letters    
	crBackColor As Long ' Background color                 
	lcid As Long ' Locale ID                        
	'#if (_RICHEDIT_VER >== &H0500 
	dwCookie As Long ' Client cookie opaque to RichEdit
	sStyle As Integer ' Style handle                     
	wKerning As Integer ' Twip size above which to kern char pair
	bUnderlineType As Byte ' Underline type                    
	bAnimation As Byte ' Animated text like marching ants 
	bRevAuthor As Byte ' Revision author index            
	'#if (_RICHEDIT_VER >== &H0800 As 
	bUnderlineColor As Byte ' Underline color -- This would be a padding byte if not RichEd = &H800, so can be left in
End Type

Public Enum RichEdit_UnderlineTypes
	CFU_CF1UNDERLINE = &HFF  ' Map charformat's bit underline to CF2
	CFU_INVERT = &HFE  ' For IME composition fake a selection
	CFU_UNDERLINETHICKLONGDASH = 18  ' (*) display as dash
	CFU_UNDERLINETHICKDOTTED = 17  ' (*) display as dot
	CFU_UNDERLINETHICKDASHDOTDOT = 16  ' (*) display as dash dot dot
	CFU_UNDERLINETHICKDASHDOT = 15  ' (*) display as dash dot
	CFU_UNDERLINETHICKDASH = 14  ' (*) display as dash
	CFU_UNDERLINELONGDASH = 13  ' (*) display as dash
	CFU_UNDERLINEHEAVYWAVE = 12  ' (*) display as wave
	CFU_UNDERLINEDOUBLEWAVE = 11  ' (*) display as wave
	CFU_UNDERLINEHAIRLINE = 10  ' (*) display as single
	CFU_UNDERLINETHICK = 9
	CFU_UNDERLINEWAVE = 8
	CFU_UNDERLINEDASHDOTDOT = 7
	CFU_UNDERLINEDASHDOT = 6
	CFU_UNDERLINEDASH = 5
	CFU_UNDERLINEDOTTED = 4
	CFU_UNDERLINEDOUBLE = 3  ' (*) display as single
	CFU_UNDERLINEWORD = 2  ' (*) display as single
	CFU_UNDERLINE = 1
	CFU_UNDERLINENONE = 0
End Enum

[Description("Note: These are the documented values, but some reports indicate variation between versions.")]
Public Enum RichEdit_UnderlineColors
    UnderlineColor_Black = &H00
    UnderlineColor_Blue = &H01
    UnderlineColor_Aqua = &H02
    UnderlineColor_Lime = &H03
    UnderlineColor_Fuchsia = &H04
    UnderlineColor_Red = &H05
    UnderlineColor_Yellow = &H06
    UnderlineColor_White = &H07
    UnderlineColor_Navy = &H08
    UnderlineColor_Teal = &H09
    UnderlineColor_Green = &H0A
    UnderlineColor_Purple = &H0B
    UnderlineColor_Maroon = &H0C
    UnderlineColor_Olive = &H0D
    UnderlineColor_DkGray = &H0E
    UnderlineColor_LtGray = &H0F
End Enum

Public Const yHeightCharPtsMost = 1638

Public Enum RichEdit_CharFmtFlags
	SCF_SELECTION = &H0001
	SCF_WORD = &H0002
	SCF_DEFAULT = &H0000  ' Set default charformat or paraformat
	SCF_ALL = &H0004  ' Not valid with SCF_SELECTION or SCF_WORD
	SCF_USEUIRULES = &H0008  ' Modifier for SCF_SELECTION; says that
'     format came from a toolbar, etc., and
'     hence UI formatting rules should be
'     used instead of literal formatting
	SCF_ASSOCIATEFONT = &H0010  ' Associate fontname with bCharSet (one
'     possible for each of Western, ME, FE,
'     Thai)
	SCF_NOKBUPDATE = &H0020  ' Do not update KB layout for this change
'     even if autokeyboard is on
	SCF_ASSOCIATEFONT2 = &H0040  ' Associate plane-2 (surrogate) font
	'(_RICHEDIT_VER  = >= &H0500)
	SCF_SMARTFONT = &H0080  ' Apply font only if it can handle script (5.0)
	SCF_CHARREPFROMLCID = &H0100  ' Get character repertoire from lcid (5.0)
	SPF_DONTSETDEFAULT = &H0002  ' Suppress setting default on empty control
	SPF_SETDEFAULT = &H0004  ' Set the default paraformat
End Enum

[PackingAlignment(4)]
Public Type TEXTRANGEA
	chrg As CHARRANGE
	lpstrText As String ' Allocated by caller, zero terminated by RichEdit 
End Type
[PackingAlignment(4)]
Public Type TEXTRANGEW
	chrg As CHARRANGE
	lpstrText As LongPtr ' Allocated by caller, zero terminated by RichEdit 
End Type

[PackingAlignment(4)]
Public Type EDITSTREAM
	dwCookie As LongPtr ' User value passed to callback as first parameter 
	dwError As Long ' Last error 
	pfnCallback As LongPtr
End Type

Public Enum RichEdit_StreamFormats
	SF_TEXT = &H0001
	SF_RTF = &H0002
	SF_RTFNOOBJS = &H0003  ' Write only
	SF_TEXTIZED = &H0004  ' Write only
	SF_UNICODE = &H0010  ' Unicode file (UCS2 little endian)
	SF_USECODEPAGE = &H0020  ' CodePage given by high word
	SF_NCRFORNONASCII = &H40  ' Output \uN for nonASCII
	SFF_WRITEXTRAPAR = &H80  ' Output \par at end
	SFF_SELECTION = &H8000&
'  Flag telling stream operations to ignore some FE control words
'  having to do with FE word breaking and horiz vs vertical text.
'  Not used in RichEdit 2.0 and later
	SFF_PLAINRTF = &H4000
'  Flag telling file stream output (SFF_SELECTION flag not set) to persist
'  \viewscaleN control word.
	SFF_PERSISTVIEWSCALE = &H2000
'  Flag telling file stream input with SFF_SELECTION flag not set not to
'  close the document
	SFF_KEEPDOCINFO = &H1000
'  Flag telling stream operations to output in Pocket Word format
	SFF_PWD = &H0800
'  3-bit field specifying the value of N - 1 to use for \rtfN or \pwdN
	SF_RTFVAL = &H0700
End Enum

[PackingAlignment(4)]
Public Type FINDTEXTA
	chrg As CHARRANGE
	lpstrText As String
End Type

[PackingAlignment(4)]
Public Type FINDTEXTW
	chrg As CHARRANGE
	lpstrText As LongPtr
End Type
[PackingAlignment(4)]
Public Type FINDTEXT
    chrg As CHARRANGE
    lpstrText As LongPtr
End Type

[PackingAlignment(4)]
Public Type FINDTEXTEXA
	chrg As CHARRANGE
	lpstrText As String
	chrgText As CHARRANGE
End Type
[PackingAlignment(4)]
Public Type FINDTEXTEXW
	chrg As CHARRANGE
	lpstrText As LongPtr
	chrgText As CHARRANGE
End Type
[PackingAlignment(4)]
Public Type FINDTEXTEX
    chrg As CHARRANGE
    lpstrText As LongPtr
    chrgText As CHARRANGE
End Type

[PackingAlignment(4)]
Public Type FORMATRANGE
	hdc As LongPtr
	hdcTarget As LongPtr
	rc As RECT
	rcPage As RECT
	chrg As CHARRANGE
End Type


Public Const lDefaultTab  = 720
Public Const MAX_TABLE_CELLS  = 63


[PackingAlignment(4)]
Public Type PARAFORMAT2
	cbSize As Long
	dwMask As RichEdit_ParagraphFormatMask
	wNumbering As Integer
	wEffects As Integer
	dxStartIndent As Long
	dxRightIndent As Long
	dxOffset As Long
	wAlignment As Integer
	cTabCount As Integer
	rgxTabs(0 To (MAX_TAB_STOPS - 1)) As Long
	dySpaceBefore As Long ' Vertical spacing before para         
	dySpaceAfter As Long ' Vertical spacing after para            
	dyLineSpacing As Long ' Line spacing depending on Rule        
	sStyle As Integer ' Style handle                         
	bLineSpacingRule As Byte ' Rule for line spacing (see tom.doc)    
	bOutlineLevel As Byte ' Outline Level                        
	wShadingWeight As Integer ' Shading in hundredths of a per cent    
	wShadingStyle As Integer ' Byte 0: style, nib 2: cfpat, 3: cbpat
	wNumberingStart As Integer ' Starting value for numbering             
	wNumberingStyle As Integer ' Alignment, Roman/Arabic, (), ), ., etc.
	wNumberingTab As Integer ' Space bet 1st indent and 1st-line text
	wBorderSpace As Integer ' Border-text spaces (nbl/bdr in pts)    
	wBorderWidth As Integer ' Pen widths (nbl/bdr in half twips)    
	wBorders As Integer ' Border styles (nibble/border)        
End Type


Public Enum RichEdit_ParagraphEffects
	PFE_RTLPARA = (PFM_RTLPARA >> 16)
	PFE_KEEP = (PFM_KEEP >> 16)  ' (*)
	PFE_KEEPNEXT = (PFM_KEEPNEXT >> 16)  ' (*)
	PFE_PAGEBREAKBEFORE = (PFM_PAGEBREAKBEFORE >> 16)  ' (*)
	PFE_NOLINENUMBER = (PFM_NOLINENUMBER >> 16)  ' (*)
	PFE_NOWIDOWCONTROL = (PFM_NOWIDOWCONTROL >> 16)  ' (*)
	PFE_DONOTHYPHEN = (PFM_DONOTHYPHEN >> 16)  ' (*)
	PFE_SIDEBYSIDE = (PFM_SIDEBYSIDE >> 16)  ' (*)
	PFE_TEXTWRAPPINGBREAK = (PFM_TEXTWRAPPINGBREAK >> 16)  ' (*)
'  The following four effects are read only
	PFE_COLLAPSED = (PFM_COLLAPSED >> 16)  ' (+)
	PFE_BOX = (PFM_BOX >> 16)  ' (+)
	PFE_TABLE = (PFM_TABLE >> 16)  ' Inside table row. RE 3.0
	PFE_TABLEROWDELIMITER = (PFM_TABLEROWDELIMITER >> 16)  ' Table row start. RE 4.0
End Enum

Public Enum RichEdit_ParagraphNumOpts
	PFN_ARABIC = 2  ' tomListNumberAsArabic:    0, 1, 2,    ...
	PFN_LCLETTER = 3  ' tomListNumberAsLCLetter: a, b, c,    ...
	PFN_UCLETTER = 4  ' tomListNumberAsUCLetter: A, B, C,    ...
	PFN_LCROMAN = 5  ' tomListNumberAsLCRoman:    i, ii, iii, ...
	PFN_UCROMAN = 6  ' tomListNumberAsUCRoman:    I, II, III, ...
'  PARAFORMAT2 wNumberingStyle options
	PFNS_PAREN = &H000  ' default, e.g.,                  1)
	PFNS_PARENS = &H100  ' tomListParentheses/256, e.g., (1)
	PFNS_PERIOD = &H200  ' tomListPeriod/256, e.g.,       1.
	PFNS_PLAIN = &H300  ' tomListPlain/256, e.g.,          1
	PFNS_NONUMBER = &H400  ' Used for continuation w/o number
	PFNS_NEWNUMBER = &H8000&  ' Start new number with wNumberingStart
'  (can be combined with other PFNS_xxx)
End Enum

Public Enum RichEdit_ParagraphAlign
	PFA_LEFT = 1
	PFA_RIGHT = 2
	PFA_CENTER = 3
'  PARAFORMAT2 alignment options
	PFA_JUSTIFY = 4  ' New paragraph-alignment option 2.0 (*)
	PFA_FULL_INTERWORD = 4  ' These are supported in 3.0 with advanced
End Enum

Public Type REQRESIZE
	nmhdr As NMHDR
	rc As RECT
End Type

[PackingAlignment(4)]
Public Type MSGFILTER
	nmhdr As NMHDR
	msg As Long
	wParam As LongPtr
	lParam As LongPtr
End Type

[PackingAlignment(4)]
Public Type SELCHANGE
	nmhdr As NMHDR
	chrg As CHARRANGE
	seltyp As Long
End Type

[PackingAlignment(4)]
Public Type CLIPBOARDFORMAT
	nmhdr As NMHDR
	cf As Integer
End Type

Public Enum RichEdit_SelFlags
	SEL_EMPTY = &H0000
	SEL_TEXT = &H0001
	SEL_OBJECT = &H0002
	SEL_MULTICHAR = &H0004
	SEL_MULTIOBJECT = &H0008
End Enum

Public Const GCM_RIGHTMOUSEDROP  = &H8000

[PackingAlignment(4)]
Public Type GETCONTEXTMENUEX
	chrg As CHARRANGE
	dwFlags As RichEdit_GCMFlags
	pt As POINT
	pvReserved As LongPtr
End Type
Public Enum RichEdit_GCMFlags
	GCMF_GRIPPER = &H00000001
	GCMF_SPELLING = &H00000002  ' pSpellingSuggestions is valid
'  and points to the list of spelling suggestions
	GCMF_TOUCHMENU = &H00004000
	GCMF_MOUSEMENU = &H00002000
End Enum

[PackingAlignment(4)]
Public Type ENDROPFILES
	nmhdr As NMHDR
    hDrop As LongPtr
    cp As Long
    fProtected As Long
End Type

[PackingAlignment(4)]
Public Type ENPROTECTED
	nmhdr As NMHDR
    msg As Long
    wParam As LongPtr
    lParam As LongPtr
    chrg As CHARRANGE
End Type

[PackingAlignment(4)]
Public Type ENSAVECLIPBOARD
	nmhdr As NMHDR
    cObjectCount As Long
    cch As Long
End Type

[PackingAlignment(4)]
Public Type ENOLEOPFAILED
	nmhdr As NMHDR
    iob As Long
    lOper As Long
    hr As Long
End Type

Public Const OLEOP_DOVERB = 1

[PackingAlignment(4)]
Public Type ENLINK
	nmhdr As NMHDR
    msg As Long
    wParam As LongPtr
    lParam As LongPtr
    chrg As CHARRANGE
End Type

[PackingAlignment(4)]
Public Type ENLOWFIRTF
	nmhdr As NMHDR
    szControl As LongPtr
End Type

[PackingAlignment(4)]
Public Type ENCORRECTTEXT
	nmhdr As NMHDR
    chrg As CHARRANGE
    seltyp As Integer
End Type

[PackingAlignment(4)]
Public Type PUNCUATION
	iSize As Long
    szPuncuation As String
End Type

[PackingAlignment(4)]
Public Type COMPCOLOR
	crText As Long
    crBackground As Long
    dwEffects As Long
End Type

Public Const CF_RTF  = "Rich Text Format"
Public Const CF_RTFNOOBJS  = "Rich Text Format Without Objects"
Public Const CF_RETEXTOBJ  = "RichEdit Text and Objects"

[PackingAlignment(4)]
Public Type REPASTESPECIAL
	dwAspect As Long
    dwParam As LongPtr
End Type

Public Enum UNDONAMEID
	UID_UNKNOWN = 0
	UID_TYPING = 1
	UID_DELETE = 2
	UID_DRAGDROP = 3
	UID_CUT = 4
	UID_PASTE = 5
	UID_AUTOTABLE = 6
End Enum

Public Enum RichEdit_SetTextFlags
	ST_DEFAULT = 0
	ST_KEEPUNDO = 1
	ST_SELECTION = 2
	ST_NEWCHARS = 4
	ST_UNICODE = 8
End Enum
[PackingAlignment(4)]
Public Type SETTEXTEX
	flags As RichEdit_SetTextFlags
    codepage As Long
End Type

Public Enum RichEdit_GetTextFlags
	GT_DEFAULT = 0
	GT_USECRLF = 1
	GT_SELECTION = 2
	GT_RAWTEXT = 4
	GT_NOHIDDENTEXT = 8
End Enum
[PackingAlignment(4)]
Public Type GETTEXTEX
    cb As Long
	flags As RichEdit_GetTextFlags
    codepage As Long
    lpDefaultChar As String
    lpUsedDefChar As LongPtr
End Type

Public Enum RichEdit_GetTextLengthExFlags
	GTL_DEFAULT = 0  ' Do default (return # of chars)
	GTL_USECRLF = 1  ' Compute answer using CRLFs for paragraphs
	GTL_PRECISE = 2  ' Compute a precise answer
	GTL_CLOSE = 4  ' Fast computation of a "close" answer
	GTL_NUMCHARS = 8  ' Return number of characters
	GTL_NUMByteS = 16  ' Return number of _bytes_
End Enum
[PackingAlignment(4)]
Public Type GETTEXTLENGTHEX
	flags As RichEdit_GetTextLengthExFlags
    codepage As Long
End Type


Public Enum RichEdit_BiDiOptMask
	BOM_DEFPARADIR = &H0001  ' Default paragraph direction (implies alignment) (obsolete)
	BOM_PLAINTEXT = &H0002  ' Use plain text layout (obsolete)
	BOM_NEUTRALOVERRIDE = &H0004  ' Override neutral layout (obsolete)
	BOM_CONTEXTREADING = &H0008  ' Context reading order
	BOM_CONTEXTALIGNMENT = &H0010  ' Context alignment
	BOM_LEGACYBIDICLASS = &H0040  ' Legacy Bidi classification (obsolete)
	'(_RICHEDIT_VER  = >= &H0600)
	BOM_UNICODEBIDI = &H0080  ' Use Unicode BiDi algorithm
End Enum
Public Enum RichEdit_BiDiOptEffects
	BOE_RTLDIR = &H0001  ' Default paragraph direction (implies alignment) (obsolete)
	BOE_PLAINTEXT = &H0002  ' Use plain text layout (obsolete)
	BOE_NEUTRALOVERRIDE = &H0004  ' Override neutral layout (obsolete)
	BOE_CONTEXTREADING = &H0008  ' Context reading order
	BOE_CONTEXTALIGNMENT = &H0010  ' Context alignment
'	(_RICHEDIT_VER  = >= &H0800)
	BOE_FORCERECALC = &H0020  ' Force recalc and redraw
	'#endif
	BOE_LEGACYBIDICLASS = &H0040  ' Legacy Bidi classification (obsolete)
	'(_RICHEDIT_VER  = >= &H0600)
	BOE_UNICODEBIDI = &H0080  ' Use Unicode BiDi algorithm
End Enum
[PackingAlignment(4)]
Public Type BIDIOPTIONS
	cbSize As Long
    wMask As Integer
    wEffects As Integer
End Type


Public Const WCH_EMBEDDING As Integer = &HFFFC

Public Enum KHYPH
	khyphNil ' No Hyphenation
	khyphNormal ' Normal Hyphenation
	khyphAddBefore ' Add letter before hyphen
	khyphChangeBefore ' Change letter before hyphen
	khyphDeleteBefore ' Delete letter before hyphen
	khyphChangeAfter ' Change letter after hyphen
	khyphDelAndChange ' Delete letter before hyphen and change
	' letter preceding hyphen
End Enum
[PackingAlignment(4)]
Public Type HYPHRESULT
	khyph As KHYPH ' Kind of hyphenation
	ichHyph As Long ' Character which was hyphenated
	chHyph As Integer ' Depending on hyphenation type, character added, changed, etc.
End Type
[PackingAlignment(4)]
Public Type HYPHENATEINFO
	cbSize As Integer ' Size of HYPHENATEINFO structure
	dxHyphenateZone As Integer ' If a space character is closer to the margin
	'    than this value, don't hyphenate (in TWIPs)
	pfnHyphenate As LongPtr
End Type

Public Const AURL_ENABLEEA  = 1  ' Deprecated: use AURL_ENABLEEAURLS
Public Const GCM_TOUCHMENU  = &H4000  ' Deprecated: Use GCMF_TOUCHMENU
Public Const GCM_MOUSEMENU  = &H2000  ' Deprecated: Use GCMF_MOUSEMENU


#End Region

#Region "ScrollBar"
Public Const WC_SCROLLBARA = "ScrollBar"
Public Const WC_SCROLLBARW = "ScrollBar"
Public Const WC_SCROLLBAR = WC_SCROLLBARW

Public Enum ScrollBarStyles
	SBS_HORZ = &H0000
	SBS_VERT = &H0001
	SBS_TOPALIGN = &H0002
	SBS_LEFTALIGN = &H0002
	SBS_BOTTOMALIGN = &H0004
	SBS_RIGHTALIGN = &H0004
	SBS_SIZEBOXTOPLEFTALIGN = &H0002
	SBS_SIZEBOXBOTTOMRIGHTALIGN = &H0004
	SBS_SIZEBOX = &H0008
	SBS_SIZEGRIP = &H0010
End Enum

Public Enum ScrollBarType
    SB_HORZ = 0
    SB_VERT = 1
    SB_CTL = 2
    SB_BOTH = 3
End Enum

Public Const SB_LINEUP  = 0
Public Const SB_LINELEFT  = 0
Public Const SB_LINEDOWN  = 1
Public Const SB_LINERIGHT  = 1
Public Const SB_PAGEUP  = 2
Public Const SB_PAGELEFT  = 2
Public Const SB_PAGEDOWN  = 3
Public Const SB_PAGERIGHT  = 3
Public Const SB_THUMBPOSITION  = 4
Public Const SB_THUMBTRACK  = 5
Public Const SB_TOP  = 6
Public Const SB_LEFT  = 6
Public Const SB_BOTTOM  = 7
Public Const SB_RIGHT  = 7
Public Const SB_ENDSCROLL  = 8

Public Const SBM_SETPOS  = &H00E0 /*not in win3.1 */
Public Const SBM_GETPOS  = &H00E1 /*not in win3.1 */
Public Const SBM_SETRANGE  = &H00E2 /*not in win3.1 */
Public Const SBM_SETRANGEREDRAW  = &H00E6 /*not in win3.1 */
Public Const SBM_GETRANGE  = &H00E3 /*not in win3.1 */
Public Const SBM_ENABLE_ARROWS  = &H00E4 /*not in win3.1 */
Public Const SBM_SETSCROLLINFO  = &H00E9
Public Const SBM_GETSCROLLINFO  = &H00EA
Public Const SBM_GETSCROLLBARINFO  = &H00EB


Public Enum ScrollInfoMask
    SIF_RANGE = &H0001
    SIF_PAGE = &H0002
    SIF_POS = &H0004
    SIF_DISABLENOSCROLL = &H0008
    SIF_TRACKPOS = &H0010
    SIF_RETURNOLDPOS = &H1000 'UNDOCUMENTED
    SIF_NOSCROLL = &H2000 ' UNDOCUMENTED
    SIF_ALL = (SIF_RANGE Or SIF_PAGE Or SIF_POS Or SIF_TRACKPOS)
End Enum

Public Type SCROLLINFO
	cbSize As Long
	fMask As ScrollInfoMask
	nMin As Long
	nMax As Long
	nPage As Long
	nPos As Long
	nTrackPos As Long
End Type

Public Enum ESB_Flags
	ESB_ENABLE_BOTH = &H0000
	ESB_DISABLE_BOTH = &H0003
	ESB_DISABLE_LEFT = &H0001
	ESB_DISABLE_RIGHT = &H0002
	ESB_DISABLE_UP = &H0001
	ESB_DISABLE_DOWN = &H0002
	ESB_DISABLE_LTUP = ESB_DISABLE_LEFT
	ESB_DISABLE_RTDN = ESB_DISABLE_RIGHT
End Enum

Public Enum SWEx_Flags
	SW_SCROLLCHILDREN = &H0001 /* Scroll children within *lprcScroll. */
	SW_INVALIDATE = &H0002 /* Invalidate after scrolling */
	SW_ERASE = &H0004 /* If SW_INVALIDATE, don't send WM_ERASEBACKGROUND */
	SW_SMOOTHSCROLL = &H0010 /* Use smooth scrolling */
End Enum

Public Const CCHILDREN_SCROLLBAR = 5
Public Type SCROLLBARINFO
	cbSize As Long
	rcScrollBar As RECT
	dxyLineButton As Long
	xyThumbTop As Long
	xyThumbBottom As Long
	reserved As Long
	rgstate(CCHILDREN_SCROLLBAR) As Long
End Type



Public Declare PtrSafe Function GetScrollBarInfo Lib "user32" (ByVal hWnd As LongPtr, ByVal idObject As CommonObjectIDs, ByRef psbi As SCROLLBARINFO) As Long
Public Declare PtrSafe Function GetScrollInfo Lib "user32" (ByVal hWnd As LongPtr, ByVal wBar As ScrollBarType, ByRef lpScrollInfo As SCROLLINFO) As Long
Public Declare PtrSafe Function SetScrollInfo Lib "user32" (ByVal hWnd As LongPtr, ByVal wBar As Long, ByRef lpScrollInfo As SCROLLINFO, ByVal fRedraw As Long) As Long
Public Declare PtrSafe Function EnableScrollBar Lib "user32" (ByVal hWnd As LongPtr, ByVal wSBFlags As ScrollBarType, ByVal wArrows As ESB_Flags) As Long
Public Declare PtrSafe Function ShowScrollBar Lib "user32" (ByVal hWnd As LongPtr, ByVal wBar As ScrollBarType, ByVal bShow As Long) As Long
Public Declare PtrSafe Function GetScrollRange Lib "user32" (ByVal hWnd As LongPtr, ByVal nBar As ScrollBarType, lpMinPos As Long, lpMaxPos As Long) As Long
Public Declare PtrSafe Function SetScrollRange Lib "user32" (ByVal hWnd As LongPtr, ByVal nBar As ScrollBarType, ByVal nMinPos As Long, ByVal nMaxPos As Long, ByVal fRedraw As Long) As Long
Public Declare PtrSafe Function GetScrollPos Lib "user32" (ByVal hWnd As LongPtr, ByVal nBar As ScrollBarType) As Long
Public Declare PtrSafe Function SetScrollPos Lib "user32" (ByVal hWnd As LongPtr, ByVal nBar As ScrollBarType, ByVal nPos As Long, ByVal fRedraw As Long) As Long
Public Declare PtrSafe Function ScrollWindow Lib "user32" (ByVal hWnd As LongPtr, ByVal XAmount As Long, ByVal YAmount As Long, lpRect As RECT, lpClipRect As RECT) As Long
Public Declare PtrSafe Function ScrollWindowEx Lib "user32" (ByVal hWnd As LongPtr, ByVal dx As Long, ByVal dy As Long, lprcScroll As RECT, lprcClip As RECT, ByVal hrgnUpdate As LongPtr, lprcUpdate As RECT, ByVal uFlags As SWEx_Flags) As Long
Public Declare PtrSafe Function ScrollDC Lib "user32" (ByVal hDC As LongPtr, ByVal dx As Long, ByVal dy As Long, lprcScroll As RECT, lprcClip As RECT, ByVal hrgnUpdate As LongPtr, lprcUpdate As RECT) As Long



'FLAT SCROLL BARS
Public Enum FlatScrollBarProps
	WSB_PROP_CYVSCROLL = &H00000001
	WSB_PROP_CXHSCROLL = &H00000002
	WSB_PROP_CYHSCROLL = &H00000004
	WSB_PROP_CXVSCROLL = &H00000008
	WSB_PROP_CXHTHUMB = &H00000010
	WSB_PROP_CYVTHUMB = &H00000020
	WSB_PROP_VBKGCOLOR = &H00000040
	WSB_PROP_HBKGCOLOR = &H00000080
	WSB_PROP_VSTYLE = &H00000100
	WSB_PROP_HSTYLE = &H00000200
	WSB_PROP_WINSTYLE = &H00000400
	WSB_PROP_PALETTE = &H00000800
	WSB_PROP_MASK = &H00000FFF
End Enum

Public Enum FlatScrollBarModes
	FSB_FLAT_MODE = 2
	FSB_ENCARTA_MODE = 1
	FSB_REGULAR_MODE = 0
End Enum

Public Declare PtrSafe Function FlatSB_EnableScrollBar Lib "comctl32" (ByVal hWnd As LongPtr, ByVal wSBFlags As ScrollBarType, ByVal wArrows As Long) As Long
Public Declare PtrSafe Function FlatSB_ShowScrollBar Lib "comctl32" (ByVal hWnd As LongPtr, ByVal wSBFlags As ScrollBarType, ByVal fShow As Long) As Long
Public Declare PtrSafe Function FlatSB_GetScrollRange Lib "comctl32" (ByVal hWnd As LongPtr, ByVal nBar As ScrollBarType, ByRef lpMinPos As Long, ByRef lpMaxPos As Long) As Long
Public Declare PtrSafe Function FlatSB_GetScrollInfo Lib "comctl32" (ByVal hWnd As LongPtr, ByVal fnbar As ScrollBarType, ByRef lpsi As SCROLLINFO) As Long
Public Declare PtrSafe Function FlatSB_GetScrollPos Lib "comctl32" (ByVal hWnd As LongPtr, ByVal nBar As ScrollBarType) As Long
Public Declare PtrSafe Function FlatSB_GetScrollProp Lib "comctl32" (ByVal hWnd As LongPtr, ByVal propIndex As FlatScrollBarProps, ByRef Value As LongPtr) As Long
Public Declare PtrSafe Function FlatSB_SetScrollPos Lib "comctl32" (ByVal hWnd As LongPtr, ByVal nBar As ScrollBarType, ByVal pos As Long, ByVal fRedraw As Long) As Long
Public Declare PtrSafe Function FlatSB_SetScrollInfo Lib "comctl32" (ByVal hWnd As LongPtr, ByVal nBar As ScrollBarType, ByRef psi As SCROLLINFO, ByVal fRedraw As Long) As Long
Public Declare PtrSafe Function FlatSB_SetScrollRange Lib "comctl32" (ByVal hWnd As LongPtr, ByVal nBar As ScrollBarType, ByVal min As Long, ByVal max As Long, ByVal fRedraw As Long) As Long
Public Declare PtrSafe Function FlatSB_SetScrollProp Lib "comctl32" (ByVal hWnd As LongPtr, ByVal index As FlatScrollBarProps, ByVal newValue As LongPtr, ByVal fRedraw As Long) As Long
Public Declare PtrSafe Function InitializeFlatSB Lib "comctl32" (ByVal hWnd As LongPtr) As Long
Public Declare PtrSafe Function UninitializeFlatSB Lib "comctl32" (ByVal hWnd As LongPtr) As Long
	
#End Region



#Region "Static"
Public Const WC_STATICA = "Static"
Public Const WC_STATICW = "Static"
Public Const WC_STATIC = WC_STATICW

Public Const STM_SETICON  = &H0170
Public Const STM_GETICON  = &H0171
Public Const STM_SETIMAGE  = &H0172
Public Const STM_GETIMAGE  = &H0173

Public Const STN_CLICKED  = 0
Public Const STN_DBLCLK  = 1
Public Const STN_ENABLE  = 2
Public Const STN_DISABLE  = 3

Public Enum StaticControlStyles
	SS_LEFT = &H00000000
	SS_CENTER = &H00000001
	SS_RIGHT = &H00000002
	SS_ICON = &H00000003
	SS_BLACKRECT = &H00000004
	SS_GRAYRECT = &H00000005
	SS_WHITERECT = &H00000006
	SS_BLACKFRAME = &H00000007
	SS_GRAYFRAME = &H00000008
	SS_WHITEFRAME = &H00000009
	SS_USERITEM = &H0000000A
	SS_SIMPLE = &H0000000B
	SS_LEFTNOWORDWRAP = &H0000000C
	SS_OWNERDRAW = &H0000000D
	SS_BITMAP = &H0000000E
	SS_ENHMETAFILE = &H0000000F
	SS_ETCHEDHORZ = &H00000010
	SS_ETCHEDVERT = &H00000011
	SS_ETCHEDFRAME = &H00000012
	SS_TYPEMASK = &H0000001F
	SS_REALSIZECONTROL = &H00000040
	SS_NOPREFIX = &H00000080 ' Don't do "&" character translation */
	SS_NOTIFY = &H00000100
	SS_CENTERIMAGE = &H00000200
	SS_RIGHTJUST = &H00000400
	SS_REALSIZEIMAGE = &H00000800
	SS_SUNKEN = &H00001000
	SS_EDITCONTROL = &H00002000
	SS_ENDELLIPSIS = &H00004000
	SS_PATHELLIPSIS = &H00008000&
	SS_WORDELLIPSIS = &H0000C000&
	SS_ELLIPSISMASK = &H0000C000&
End Enum
#End Region

#Region "StatusBar"
Public Const STATUSCLASSNAME = "msctls_statusbar32"

Public Const SB_SETTEXTA  = (WM_USER + 1)
Public Const SB_SETTEXTW  = (WM_USER + 11)
Public Const SB_GETTEXTA  = (WM_USER + 2)
Public Const SB_GETTEXTW  = (WM_USER + 13)
Public Const SB_GETTEXTLENGTHA  = (WM_USER + 3)
Public Const SB_GETTEXTLENGTHW  = (WM_USER + 12)

Public Const SB_SETPARTS  = (WM_USER + 4)
Public Const SB_SETBORDERS = (WM_USER + 5) 'UNDOCUMENTED
Public Const SB_GETPARTS  = (WM_USER + 6)
Public Const SB_GETBORDERS  = (WM_USER + 7)
Public Const SB_SETMINHEIGHT  = (WM_USER + 8)
Public Const SB_SIMPLE  = (WM_USER + 9)
Public Const SB_GETRECT  = (WM_USER + 10)
Public Const SB_ISSIMPLE  = (WM_USER + 14)
Public Const SB_SETICON  = (WM_USER + 15)
Public Const SB_SETTIPTEXTA  = (WM_USER + 16)
Public Const SB_SETTIPTEXTW  = (WM_USER + 17)
Public Const SB_GETTIPTEXTA  = (WM_USER + 18)
Public Const SB_GETTIPTEXTW  = (WM_USER + 19)
Public Const SB_GETICON  = (WM_USER + 20)
Public Const SB_SETUNICODEFORMAT  = CCM_SETUNICODEFORMAT
Public Const SB_GETUNICODEFORMAT  = CCM_GETUNICODEFORMAT
Public Const SB_SETBKCOLOR  = CCM_SETBKCOLOR  ' lParam = bkColor
Public Const SB_SIMPLEID  = &H00ff

Public Const SB_GETTEXT  = SB_GETTEXTW
Public Const SB_SETTEXT  = SB_SETTEXTW
Public Const SB_GETTEXTLENGTH  = SB_GETTEXTLENGTHW
Public Const SB_SETTIPTEXT  = SB_SETTIPTEXTW
Public Const SB_GETTIPTEXT  = SB_GETTIPTEXTW

Public Enum StatusBar_Ts
	SBT_OWNERDRAW = &H1000
	SBT_NOBORDERS = &H0100
	SBT_POPOUT = &H0200
	SBT_RTLREADING = &H0400
	SBT_TOOLTIPS = &H0800
	SBT_NOTABPARSING = &H0800
End Enum

Public Const SBN_FIRST As Long = (-880)
Public Const SBN_SIMPLEMODECHANGE = (SBN_FIRST - 0)

Public Enum StatusStyles
    SBARS_SIZEGRIP = &H0100
    SBARS_TOOLTIPS = &H0800
End Enum

Public Declare PtrSafe Sub DrawStatusTextA Lib "comctl32" (ByVal hDC As LongPtr, lprc As RECT, ByVal pszText As String, ByVal uFlags As StatusBar_Ts)
Public Declare PtrSafe Sub DrawStatusTextW Lib "comctl32" (ByVal hDC As LongPtr, lprc As RECT, ByVal pszText As LongPtr, ByVal uFlags As StatusBar_Ts)
Public DeclareWide PtrSafe Sub DrawStatusText Lib "comctl32" Alias "DrawStatusTextW" (ByVal hDC As LongPtr, lprc As RECT, ByVal pszText As String, ByVal uFlags As StatusBar_Ts)

Public Declare PtrSafe Function CreateStatusWindowA Lib "comctl32" (ByVal style As StatusStyles, ByVal lpszText As String, ByVal hwndParent As LongPtr, ByVal wID As Long) As LongPtr
Public Declare PtrSafe Function CreateStatusWindowW Lib "comctl32" (ByVal style As StatusStyles, ByVal lpszText As LongPtr, ByVal hwndParent As LongPtr, ByVal wID As Long) As LongPtr
Public DeclareWide PtrSafe Function CreateStatusWindow Lib "comctl32" Alias "CreateStatusWindowW" (ByVal style As StatusStyles, ByVal lpszText As String, ByVal hwndParent As LongPtr, ByVal wID As Long) As LongPtr
	
#End Region

#Region "SysLink"
Public Const WC_LINK = "SysLink"

Public Const MAX_LINKID_TEXT = 48
Public Const INVALID_LINK_INDEX As Long = (-1)
Public Const L_MAX_URL_LENGTH = 2048 + 32 + 6

Public Const LM_HITTEST  = (WM_USER + &H300)  ' wParam: n/a, lparam: PLHITTESTINFO, ret: BOOL
Public Const LM_GETIDEALHEIGHT  = (WM_USER + &H301)  ' wParam: cxMaxWidth, lparam: n/a, ret: cy
Public Const LM_SETITEM  = (WM_USER + &H302)  ' wParam: n/a, lparam: LITEM*, ret: BOOL
Public Const LM_GETITEM  = (WM_USER + &H303)  ' wParam: n/a, lparam: LITEM*, ret: BOOL
Public Const LM_GETIDEALSIZE  = (LM_GETIDEALHEIGHT)  ' wParam: cxMaxWidth, lparam: SIZE*, ret: cy


Public Enum LITEM_Mask
    LIF_ITEMINDEX = &H1
    LIF_STATE = &H2
    LIF_URL = &H8
    LIF_ITEMID = &H4
End Enum
Public Enum LITEM_State
    LIS_FOCUSED = &H1
    LIS_ENABLED = &H2
    LIS_VISITED = &H4
    LIS_HOTTRACK = &H8
    LIS_DEFAULTCOLORS = &H10
End Enum
Public Type LITEM
    Mask As LITEM_Mask
    iLink As Long
    State As LITEM_State
    StateMask As LITEM_State
    szID(0 To ((MAX_LINKID_TEXT) - 1)) As Integer
    szURL(0 To ((L_MAX_URL_LENGTH) - 1)) As Integer
End Type

Public Enum SysLinkStyles
	LWS_TRANSPARENT = &H0001
	LWS_IGNORERETURN = &H0002
	LWS_NOPREFIX = &H0004
	LWS_USEVISUALSTYLE = &H0008
	LWS_USECUSTOMTEXT = &H0010
	LWS_RIGHT = &H0020
End Enum

Public Type LHITTESTINFO
	pt As POINT
	item As LITEM
End Type

Public Type NMLINK
	hdr As NMHDR
	item As LITEM
End Type
	
#End Region

#Region "TabCtl"
Public Const WC_TABCONTROLA = "SysTabControl32"
Public Const WC_TABCONTROLW = "SysTabControl32"
Public Const WC_TABCONTROL = WC_TABCONTROLW

Public Const TCM_FIRST = &H1300                   '// Tab control messages
Public Const TCN_FIRST = H_MAX - 550
Public Enum TabItemFlags
    TCIF_TEXT = &H1
    TCIF_IMAGE = &H2
    TCIF_RTLREADING = &H4
    TCIF_PARAM = &H8
    TCIF_STATE = &H10
End Enum '
Public Enum TabExStyles
	'  EX styles for use with TCM_SETEXTENDEDSTYLE
	TCS_EX_FLATSEPARATORS = &H00000001
	TCS_EX_REGISTERDROP = &H00000002
End Enum
Public Type TCITEM
    Mask        As TabItemFlags
    dwState     As TabItemState
    dwStateMask As TabItemState
    pszText     As LongPtr
    cchTextMax  As Long
    iImage      As Long
    lParam      As LongPtr
End Type
Public Type TCITEMW
    Mask        As TabItemFlags
    dwState     As TabItemState
    dwStateMask As TabItemState
    pszText     As LongPtr
    cchTextMax  As Long
    iImage      As Long
    lParam      As LongPtr
End Type
Public Type TCITEMA
    Mask        As TabItemFlags
    dwState     As TabItemState
    dwStateMask As TabItemState
    pszText     As String
    cchTextMax  As Long
    iImage      As Long
    lParam      As LongPtr
End Type
Public Enum TabStyles
	TCS_SCROLLOPPOSITE = &H0001 ' assumes multiline tab
	TCS_BOTTOM = &H0002
	TCS_RIGHT = &H0002
	TCS_MULTISELECT = &H0004 ' allow multi-select in button mode
	TCS_FLATBUTTONS = &H0008
	TCS_FORCEICONLEFT = &H0010
	TCS_FORCELABELLEFT = &H0020
	TCS_HOTTRACK = &H0040
	TCS_VERTICAL = &H0080
	TCS_TABS = &H0000
	TCS_BUTTONS = &H0100
	TCS_SINGLELINE = &H0000
	TCS_MULTILINE = &H0200
	TCS_RIGHTJUSTIFY = &H0000
	TCS_FIXEDWIDTH = &H0400
	TCS_RAGGEDRIGHT = &H0800
	TCS_FOCUSONBUTTONDOWN = &H1000
	TCS_OWNERDRAWFIXED = &H2000
	TCS_TOOLTIPS = &H4000
	TCS_FOCUSNEVER = &H8000&
End Enum

Public Enum TabItemState
	TCIS_BUTTONPRESSED = &H0001
	TCIS_HIGHLIGHTED = &H0002
    TCIS_HIDDEN = &H0004 'UNDOCUMENTED
End Enum

Public Type TCITEMHEADER
    Mask As TabItemFlags
    lpReserved1 As Long
    lpReserved2 As Long
    pszText As LongPtr
    cchTextMax As Long
    iImage As Long
End Type
Public Type TCITEMHEADERW
    Mask As TabItemFlags
    lpReserved1 As Long
    lpReserved2 As Long
    pszText As LongPtr
    cchTextMax As Long
    iImage As Long
End Type
Public Type TCITEMHEADERA
    Mask As TabItemFlags
    lpReserved1 As Long
    lpReserved2 As Long
    pszText As String
    cchTextMax As Long
    iImage As Long
End Type

Public Const TCM_GETBKCOLOR = (TCM_FIRST + 0) 'UNDOCUMENTED
Public Const TCM_SETBKCOLOR = (TCM_FIRST + 1) 'UNDOCUMENTED
Public Const TCM_GETIMAGELIST = (TCM_FIRST + 2)
Public Const TCM_SETIMAGELIST = (TCM_FIRST + 3)
Public Const TCM_GETITEMCOUNT = (TCM_FIRST + 4)
Public Const TCM_GETITEMA = (TCM_FIRST + 5)
Public Const TCM_GETITEMW = (TCM_FIRST + 60)
Public Const TCM_GETITEM = TCM_GETITEMW
Public Const TCM_SETITEMA = (TCM_FIRST + 6)
Public Const TCM_SETITEMW = (TCM_FIRST + 61)
Public Const TCM_SETITEM = TCM_SETITEMW
Public Const TCM_INSERTITEMA = (TCM_FIRST + 7)
Public Const TCM_INSERTITEMW = (TCM_FIRST + 62)
Public Const TCM_INSERTITEM = TCM_INSERTITEMW
Public Const TCM_DELETEITEM = (TCM_FIRST + 8)
Public Const TCM_DELETEALLITEMS = (TCM_FIRST + 9)
Public Const TCM_GETITEMRECT = (TCM_FIRST + 10)
Public Const TCM_GETCURSEL = (TCM_FIRST + 11)
Public Const TCM_SETCURSEL = (TCM_FIRST + 12)
Public Const TCM_HITTEST = (TCM_FIRST + 13)
Public Const TCM_SETITEMEXTRA = (TCM_FIRST + 14)
Public Const TCM_ADJUSTRECT = (TCM_FIRST + 40)
Public Const TCM_SETITEMSIZE = (TCM_FIRST + 41)
Public Const TCM_REMOVEIMAGE = (TCM_FIRST + 42)
Public Const TCM_SETPADDING = (TCM_FIRST + 43)
Public Const TCM_GETROWCOUNT = (TCM_FIRST + 44)
Public Const TCM_GETTOOLTIPS = (TCM_FIRST + 45)
Public Const TCM_SETTOOLTIPS = (TCM_FIRST + 46)
Public Const TCM_GETCURFOCUS = (TCM_FIRST + 47)
Public Const TCM_SETCURFOCUS = (TCM_FIRST + 48)
Public Const TCM_SETMINTABWIDTH = (TCM_FIRST + 49)
Public Const TCM_DESELECTALL = (TCM_FIRST + 50)
Public Const TCM_HIGHLIGHTITEM = (TCM_FIRST + 51)
Public Const TCM_SETEXTENDEDSTYLE = (TCM_FIRST + 52)    ' // optional wParam
Public Const TCM_GETEXTENDEDSTYLE = (TCM_FIRST + 53)
Public Const TCM_SETUNICODEFORMAT = CCM_SETUNICODEFORMAT
Public Const TCM_GETUNICODEFORMAT = CCM_GETUNICODEFORMAT

Public Enum TabHitTestFlags
	TCHT_NOWHERE = &H0001
	TCHT_ONITEMICON = &H0002
	TCHT_ONITEMLABEL = &H0004
	TCHT_ONITEM = (TCHT_ONITEMICON Or TCHT_ONITEMLABEL)
End Enum

Public Type TCHITTESTINFO
    PT As POINT
    Flags As TabHitTestFlags
End Type

Public Const TCN_KEYDOWN = (TCN_FIRST - 0)
Public Const TCN_SELCHANGE = (TCN_FIRST - 1)
Public Const TCN_SELCHANGING = (TCN_FIRST - 2)
Public Const TCN_GETOBJECT = (TCN_FIRST - 3)
Public Const TCN_FOCUSCHANGE = (TCN_FIRST - 4)
'Alias TCKEYDOWN As NMTCKEYDOWN
[PackingAlignment(1)]
Public Type TCKEYDOWN
    hdr As NMHDR
    wVKey As Long
    Flags As Long
End Type
[PackingAlignment(1)]
Public Type NMTCKEYDOWN
    hdr As NMHDR
    wVKey As Long
    Flags As Long
End Type
'Alias TC_KEYDOWN As NMTCKEYDOWN
[PackingAlignment(1)]
Public Type TC_KEYDOWN
    hdr As NMHDR
    wVKey As Long
    Flags As Long
End Type
#End Region

#Region "TaskDialog"
Public Enum TDICONS
    TD_WARNING_ICON = -1 'exclamation point in a yellow 'yield' triangle (same image as IDI_EXCLAMATION)
    TD_ERROR_ICON = -2 'round red circle containg 'X' (same as IDI_HAND)
    TD_INFORMATION_ICON = -3 'round blue circle containing 'i' (same image as IDI_ASTERISK)
    TD_SHIELD_ICON = -4 'Vista's security shield
    TD_SHIELD_GRADIENT_ICON = -5 'same image as TD_SHIELD_ICON; main message text on gradient blue background
    TD_SHIELD_WARNING_ICON = -6 'exclamation point in yellow Shield shape; main message text on gradient orange background
    TD_SHIELD_ERROR_ICON = -7 'X contained within Shield shape; main message text on gradient red background
    TD_SHIELD_OK_ICON = -8 'Shield shape containing green checkmark; main message text on gradient green background
    TD_SHIELD_GRAY_ICON = -9 'same image as TD_SHIELD_ICON; main message text on medium gray background
    TD_NO_ICON = 0 'no icon; text on white background
End Enum

'taskdialog common button flags
Public Enum TASKDIALOG_COMMON_BUTTON_FLAGS
    TDCBF_OK_BUTTON = &H1&      'return value 1 (IDOK)
    TDCBF_YES_BUTTON = &H2&     'return value 6 (IDYES)
    TDCBF_NO_BUTTON = &H4&      'return value 7 (IDNO)
    TDCBF_CANCEL_BUTTON = &H8&  'return value 2 (IDCANCEL)
    TDCBF_RETRY_BUTTON = &H10&   'return value 4 (IDRETRY)
    TDCBF_CLOSE_BUTTON = &H20&   'return value 8 (IDCLOSE)
    
    TDCBF_ABORT_BUTTON = &H10000    'return value 3 (IDABORT)
    TDCBF_IGNORE_BUTTON = &H20000   'return value 5 (IDIGNORE)
    TDCBF_TRYAGAIN_BUTTON = &H40000 'return value 10 (IDTRYAGAIN)
    TDCBF_CONTINUE_BUTTON = &H80000 'return value 11 (IDCONTINUE)
    
    '// Note: Clicking the "Help" button will not close the dialog, but will
    '// raise the TaskDialogPage.Help event.
    TDCBF_HELP_BUTTON = &H100000
End Enum
Public Enum TDRESULT
    TD_OK = 1
    TD_CANCEL = 2
    TD_ABORT = 3
    TD_RETRY = 4
    TD_IGNORE = 5
    TD_YES = 6
    TD_NO = 7
    TD_CLOSE = 8
    'IDHELP is the corresponding value, but that button doesn't close the box and get returned
    TD_TRYAGAIN = 10
    TD_CONTINUE = 11
End Enum
Public Enum TASKDIALOG_FLAGS
    TDF_ENABLE_HYPERLINKS = &H1
    TDF_USE_HICON_MAIN = &H2
    TDF_USE_HICON_FOOTER = &H4
    TDF_ALLOW_DIALOG_CANCELLATION = &H8
    TDF_USE_COMMAND_LINKS = &H10
    TDF_USE_COMMAND_LINKS_NO_ICON = &H20
    TDF_EXPAND_FOOTER_AREA = &H40
    TDF_EXPANDED_BY_DEFAULT = &H80
    TDF_VERIFICATION_FLAG_CHECKED = &H100
    TDF_SHOW_PROGRESS_BAR = &H200
    TDF_SHOW_MARQUEE_PROGRESS_BAR = &H400
    TDF_CALLBACK_TIMER = &H800
    TDF_POSITION_RELATIVE_TO_WINDOW = &H1000
    TDF_RTL_LAYOUT = &H2000
    TDF_NO_DEFAULT_RADIO_BUTTON = &H4000
    TDF_CAN_BE_MINIMIZED = &H8000&
    TDF_NO_SET_FOREGROUND = &H10000
    TDF_SIZE_TO_CONTENT = &H1000000
End Enum
'TDF_INPUT_BOX:
'Creates a textbox for input. There are multiple ways to set its position:
'1) Default, at the bottom of the content in the whitespace before the gray area
'2) To the left of the buttons. Not compatible with the expanded-info or verify-checkbox styles.
'3) As a footer. Aligned to retain the footer icon, but have an inputbox next to it.
'
'Additional inputbox items:
'-Initial text can be set, and current text from an open dialog, with .InputText
'-Cue banner can be set, .InputCueBanner
'-Input box can be set as a password input with * masks, .InputIsPassword


Public Enum TASKDIALOG_MESSAGES
    TDM_NAVIGATE_PAGE = WM_USER + 101&
    TDM_CLICK_BUTTON = WM_USER + 102&                  '// wParam = Button ID
    TDM_SET_MARQUEE_PROGRESS_BAR = WM_USER + 103&      '// wParam = 0 (nonMarque) wParam != 0 (Marquee)
    TDM_SET_PROGRESS_BAR_STATE = WM_USER + 104&        '// wParam = new progress state
    TDM_SET_PROGRESS_BAR_RANGE = WM_USER + 105&        '// lParam = tdMAKELPARAM(nMinRange& nMaxRange)
    TDM_SET_PROGRESS_BAR_POS = WM_USER + 106&          '// wParam = new position
    TDM_SET_PROGRESS_BAR_MARQUEE = WM_USER + 107&      '// wParam = 0 (stop marquee), wParam != 0 (start marquee), lparam = speed (milliseconds between repaints)
    TDM_SET_ELEMENT_TEXT = WM_USER + 108&              '// wParam = element (TASKDIALOG_ELEMENTS), lParam = new element text (LPCWSTR)
    TDM_CLICK_RADIO_BUTTON = WM_USER + 110&            '// wParam = Radio Button ID
    TDM_ENABLE_BUTTON = WM_USER + 111&                 '// lParam = 0 (disable), lParam != 0 (enable), wParam = Button ID
    TDM_ENABLE_RADIO_BUTTON = WM_USER + 112&           '// lParam = 0 (disable), lParam != 0 (enable), wParam = Radio Button ID
    TDM_CLICK_VERIFICATION = WM_USER + 113&            '// wParam = 0 (unchecked), 1 (checked), lParam = 1 (set key focus)
    TDM_UPDATE_ELEMENT_TEXT = WM_USER + 114&           '// wParam = element (TASKDIALOG_ELEMENTS), lParam = new element text (LPCWSTR)
    TDM_SET_BUTTON_ELEVATION_REQUIRED_STATE = WM_USER + 115& '// wParam = Button ID, lParam = 0 (elevation not required)& lParam != 0 (elevation required)
    TDM_UPDATE_ICON = WM_USER + 116&                   '// wParam = icon element (TASKDIALOG_ICON_ELEMENTS), lParam = new icon (hIcon if TDF_USE_HICON_* was set, PCWSTR otherwise)
End Enum 'TASKDIALOG_MESSAGES;

Public Enum TASKDIALOG_NOTIFICATIONS
    TDN_CREATED = 0
    TDN_NAVIGATED = 1
    TDN_BUTTON_CLICKED = 2           '// wParam = Button ID
    TDN_HYPERLINK_CLICKED = 3        '// lParam = (LPCWSTR)pszHREF
    TDN_TIMER = 4                    '// wParam = Milliseconds since dialog created or timer reset
    TDN_DESTROYED = 5
    TDN_RADIO_BUTTON_CLICKED = 6     '// wParam = Radio Button ID
    TDN_DIALOG_CONSTRUCTED = 7
    TDN_VERIFICATION_CLICKED = 8     '// wParam = 1 if checkbox checked, 0 if not, lParam is unused and always 0
    TDN_HELP = 9
    TDN_EXPANDO_BUTTON_CLICKED = 10  '// wParam = 0 (dialog is now collapsed), wParam != 0 (dialog is now expanded)
End Enum 'TASKDIALOG_NOTIFICATIONS;

Public Enum TASKDIALOG_ELEMENTS
    TDE_CONTENT = 0
    TDE_EXPANDED_INFORMATION = 1
    TDE_FOOTER = 2
    TDE_MAIN_INSTRUCTION = 3
End Enum

Public Enum TASKDIALOG_ICON_ELEMENTS
    TDIE_ICON_MAIN = 0
    TDIE_ICON_FOOTER = 1
End Enum

[PackingAlignment(1)]
Public Type TASKDIALOG_BUTTON
    nButtonID As Long
    pszButtonText As LongPtr
End Type

[PackingAlignment(1)]
Public Type TASKDIALOGCONFIG
    cbSize As Long
    hWndParent As LongPtr
    hInstance As LongPtr
    dwFlags As TASKDIALOG_FLAGS
    dwCommonButtons As TASKDIALOG_COMMON_BUTTON_FLAGS
    pszWindowTitle As LongPtr
    /* [ TypeHint(DefIcons, TDICONS) ] */ pszMainIcon As LongPtr 'TDICONS
    pszMainInstruction As LongPtr
    pszContent As LongPtr
    cButtons As Long
    pButtons As LongPtr
    nDefaultButton As Long
    cRadioButtons As Long
    pRadioButtons As LongPtr
    nDefaultRadioButton As Long
    pszVerificationText As LongPtr
    pszExpandedInformation As LongPtr
    pszExpandedControlText As LongPtr
    pszCollapsedControlText As LongPtr
    /* [ TypeHint(DefIcons, TDICONS) ] */ pszFooterIcon As LongPtr 'TDICONS
    pszFooter As LongPtr
    pfCallback As LongPtr
    lpCallbackData As LongPtr
    CXWidth As Long
End Type

Public Declare PtrSafe Function TaskDialog Lib "comctl32" _
                                                    (ByVal hWndParent As LongPtr, _
                                                     ByVal hInstance As LongPtr, _
                                                     ByVal pszWindowTitle As LongPtr, _
                                                     ByVal pszMainInstruction As LongPtr, _
                                                     ByVal pszContent As LongPtr, _
                                                     ByVal dwCommonButtons As Long, _
                                                     ByVal pszIcon As LongPtr, _
                                                     pnButton As Long) As Long
                                                     
Public Declare PtrSafe Function TaskDialogIndirect Lib "comctl32" (pTaskConfig As TASKDIALOGCONFIG, _
                                                                Optional pnButton As Long, _
                                                                Optional pnRadioButton As Long, _
                                                                Optional pfVerificationFlagChecked As Long) As Long
#End Region

#Region "Toolbar"
Public Const TOOLBARCLASSNAME = "ToolbarWindow32"

Public Const TB_ENABLEBUTTON  = (WM_USER + 1)
Public Const TB_CHECKBUTTON  = (WM_USER + 2)
Public Const TB_PRESSBUTTON  = (WM_USER + 3)
Public Const TB_HIDEBUTTON  = (WM_USER + 4)
Public Const TB_INDETERMINATE  = (WM_USER + 5)
Public Const TB_MARKBUTTON  = (WM_USER + 6)
Public Const TB_ISBUTTONENABLED  = (WM_USER + 9)
Public Const TB_ISBUTTONCHECKED  = (WM_USER + 10)
Public Const TB_ISBUTTONPRESSED  = (WM_USER + 11)
Public Const TB_ISBUTTONHIDDEN  = (WM_USER + 12)
Public Const TB_ISBUTTONINDETERMINATE  = (WM_USER + 13)
Public Const TB_ISBUTTONHIGHLIGHTED  = (WM_USER + 14)
Public Const TB_SETSTATE  = (WM_USER + 17)
Public Const TB_GETSTATE  = (WM_USER + 18)
Public Const TB_ADDBITMAP  = (WM_USER + 19)
Public Const TB_ADDBUTTONSA  = (WM_USER + 20)
Public Const TB_INSERTBUTTONA  = (WM_USER + 21)
Public Const TB_DELETEBUTTON  = (WM_USER + 22)
Public Const TB_GETBUTTON  = (WM_USER + 23)
Public Const TB_BUTTONCOUNT  = (WM_USER + 24)
Public Const TB_COMMANDTOINDEX  = (WM_USER + 25)
Public Const TB_SAVERESTOREA  = (WM_USER + 26)
Public Const TB_SAVERESTOREW  = (WM_USER + 76)
Public Const TB_CUSTOMIZE  = (WM_USER + 27)
Public Const TB_ADDSTRINGA  = (WM_USER + 28)
Public Const TB_ADDSTRINGW  = (WM_USER + 77)
Public Const TB_GETITEMRECT  = (WM_USER + 29)
Public Const TB_BUTTONSTRUCTSIZE  = (WM_USER + 30)
Public Const TB_SETBUTTONSIZE  = (WM_USER + 31)
Public Const TB_SETBITMAPSIZE  = (WM_USER + 32)
Public Const TB_AUTOSIZE  = (WM_USER + 33)
Public Const TB_SETBUTTONTYPE = (WM_USER + 34) 'UNDOCUMENTED
Public Const TB_GETTOOLTIPS  = (WM_USER + 35)
Public Const TB_SETTOOLTIPS  = (WM_USER + 36)
Public Const TB_SETPARENT  = (WM_USER + 37)
Public Const TB_ADDBITMAP32 = (WM_USER + 38) 'UNDOCUMENTED
Public Const TB_SETROWS  = (WM_USER + 39)
Public Const TB_GETROWS  = (WM_USER + 40)
Public Const TB_SETCMDID  = (WM_USER + 42)
Public Const TB_CHANGEBITMAP  = (WM_USER + 43)
Public Const TB_GETBITMAP  = (WM_USER + 44)
Public Const TB_GETBUTTONTEXTA  = (WM_USER + 45)
Public Const TB_GETBUTTONTEXTW  = (WM_USER + 75)
Public Const TB_REPLACEBITMAP  = (WM_USER + 46)
Public Const TB_SETINDENT  = (WM_USER + 47)
Public Const TB_SETIMAGELIST  = (WM_USER + 48)
Public Const TB_GETIMAGELIST  = (WM_USER + 49)
Public Const TB_LOADIMAGES  = (WM_USER + 50)
Public Const TB_GETRECT  = (WM_USER + 51)  ' wParam is the Cmd instead of index
Public Const TB_SETHOTIMAGELIST  = (WM_USER + 52)
Public Const TB_GETHOTIMAGELIST  = (WM_USER + 53)
Public Const TB_SETDISABLEDIMAGELIST  = (WM_USER + 54)
Public Const TB_GETDISABLEDIMAGELIST  = (WM_USER + 55)
Public Const TB_SETSTYLE  = (WM_USER + 56)
Public Const TB_GETSTYLE  = (WM_USER + 57)
Public Const TB_GETBUTTONSIZE  = (WM_USER + 58)
Public Const TB_SETBUTTONWIDTH  = (WM_USER + 59)
Public Const TB_SETMAXTEXTROWS  = (WM_USER + 60)
Public Const TB_GETTEXTROWS  = (WM_USER + 61)
Public Const TB_GETBUTTONTEXT  = TB_GETBUTTONTEXTW
Public Const TB_SAVERESTORE  = TB_SAVERESTOREW
Public Const TB_ADDSTRING  = TB_ADDSTRINGW
Public Const TB_GETOBJECT  = (WM_USER + 62)  ' wParam == IID, lParam void **ppv
Public Const TB_GETHOTITEM  = (WM_USER + 71)
Public Const TB_SETHOTITEM  = (WM_USER + 72)  ' wParam == iHotItem
Public Const TB_SETANCHORHIGHLIGHT  = (WM_USER + 73)  ' wParam == TRUE/FALSE
Public Const TB_GETANCHORHIGHLIGHT  = (WM_USER + 74)
Public Const TB_MAPACCELERATORA  = (WM_USER + 78)  ' wParam == ch, lParam int * pidBtn
Public Const TB_GETINSERTMARK  = (WM_USER + 79)  ' lParam == LPTBINSERTMARK
Public Const TB_SETINSERTMARK  = (WM_USER + 80)  ' lParam == LPTBINSERTMARK
Public Const TB_INSERTMARKHITTEST  = (WM_USER + 81)  ' wParam == LPPOINT lParam == LPTBINSERTMARK
Public Const TB_MOVEBUTTON  = (WM_USER + 82)
Public Const TB_GETMAXSIZE  = (WM_USER + 83)  ' lParam == LPSIZE
Public Const TB_SETEXTENDEDSTYLE  = (WM_USER + 84)  ' For TBSTYLE_EX_*
Public Const TB_GETEXTENDEDSTYLE  = (WM_USER + 85)  ' For TBSTYLE_EX_*
Public Const TB_GETPADDING  = (WM_USER + 86)
Public Const TB_SETPADDING  = (WM_USER + 87)
Public Const TB_SETINSERTMARKCOLOR  = (WM_USER + 88)
Public Const TB_GETINSERTMARKCOLOR  = (WM_USER + 89)
Public Const TB_SETCOLORSCHEME  = CCM_SETCOLORSCHEME  ' lParam is color scheme
Public Const TB_GETCOLORSCHEME  = CCM_GETCOLORSCHEME  ' fills in COLORSCHEME pointed to by lParam
Public Const TB_SETUNICODEFORMAT  = CCM_SETUNICODEFORMAT
Public Const TB_GETUNICODEFORMAT  = CCM_GETUNICODEFORMAT
Public Const TB_MAPACCELERATORW  = (WM_USER + 90)  ' wParam == ch, lParam int * pidBtn
Public Const TB_MAPACCELERATOR  = TB_MAPACCELERATORW
Public Const TB_GETBUTTONINFOW  = (WM_USER + 63)
Public Const TB_SETBUTTONINFOW  = (WM_USER + 64)
Public Const TB_GETBUTTONINFOA  = (WM_USER + 65)
Public Const TB_SETBUTTONINFOA  = (WM_USER + 66)
Public Const TB_GETBUTTONINFO  = TB_GETBUTTONINFOW
Public Const TB_SETBUTTONINFO  = TB_SETBUTTONINFOW
Public Const TB_INSERTBUTTONW  = (WM_USER + 67)
Public Const TB_ADDBUTTONSW  = (WM_USER + 68)
Public Const TB_HITTEST  = (WM_USER + 69)
Public Const TB_INSERTBUTTON  = TB_INSERTBUTTONW
Public Const TB_ADDBUTTONS  = TB_ADDBUTTONSW
Public Const TB_SETDRAWTEXTFLAGS  = (WM_USER + 70)  ' wParam == mask lParam == bit values
Public Const TB_GETSTRINGW  = (WM_USER + 91)
Public Const TB_GETSTRINGA  = (WM_USER + 92)
Public Const TB_GETSTRING  = TB_GETSTRINGW
Public Const TB_SETBOUNDINGSIZE  = (WM_USER + 93)
Public Const TB_SETHOTITEM2  = (WM_USER + 94)  ' wParam == iHotItem,  lParam = dwFlags
Public Const TB_HASACCELERATOR  = (WM_USER + 95)  ' wParam == char, lParam = &iCount
Public Const TB_SETLISTGAP  = (WM_USER + 96)
Public Const TB_GETIMAGELISTCOUNT  = (WM_USER + 98)
Public Const TB_GETIDEALSIZE  = (WM_USER + 99)  ' wParam == fHeight, lParam = psize
'  before using WM_USER + 103, recycle old space above (WM_USER + 97)  'lol Microsoft didn't take their own advice
Public Const TB_TRANSLATEACCELERATOR  = CCM_TRANSLATEACCELERATOR
Public Const TB_GETMETRICS  = (WM_USER + 101)
Public Const TB_SETMETRICS  = (WM_USER + 102)
Public Const TB_GETITEMDROPDOWNRECT  = (WM_USER + 103)  ' Rect of item's drop down button
Public Const TB_SETPRESSEDIMAGELIST  = (WM_USER + 104)
Public Const TB_GETPRESSEDIMAGELIST  = (WM_USER + 105)
Public Const TB_SETWINDOWTHEME  = CCM_SETWINDOWTHEME

Public Const TBN_FIRST As Long = (-700)
Public Const TBN_GETBUTTONINFOA  = (TBN_FIRST - 0)
Public Const TBN_BEGINDRAG  = (TBN_FIRST - 1)
Public Const TBN_ENDDRAG  = (TBN_FIRST - 2)
Public Const TBN_BEGINADJUST  = (TBN_FIRST - 3)
Public Const TBN_ENDADJUST  = (TBN_FIRST - 4)
Public Const TBN_RESET  = (TBN_FIRST - 5)
Public Const TBN_QUERYINSERT  = (TBN_FIRST - 6)
Public Const TBN_QUERYDELETE  = (TBN_FIRST - 7)
Public Const TBN_TOOLBARCHANGE  = (TBN_FIRST - 8)
Public Const TBN_CUSTHELP  = (TBN_FIRST - 9)
Public Const TBN_DROPDOWN  = (TBN_FIRST - 10)
Public Const TBN_CLOSEUP = (TBN_FIRST - 11) 'UNDOCUMENTED
Public Const TBN_GETOBJECT  = (TBN_FIRST - 12)
Public Const TBN_HOTITEMCHANGE  = (TBN_FIRST - 13)
Public Const TBN_DRAGOUT  = (TBN_FIRST - 14)  ' this is sent when the user clicks down on a button then drags off the button
Public Const TBN_DELETINGBUTTON  = (TBN_FIRST - 15)  ' uses TBNOTIFY
Public Const TBN_GETDISPINFOA  = (TBN_FIRST - 16)  ' This is sent when the  toolbar needs  some display information
Public Const TBN_GETDISPINFOW  = (TBN_FIRST - 17)  ' This is sent when the  toolbar needs  some display information
Public Const TBN_GETINFOTIPA  = (TBN_FIRST - 18)
Public Const TBN_GETINFOTIPW  = (TBN_FIRST - 19)
Public Const TBN_GETBUTTONINFOW  = (TBN_FIRST - 20)
Public Const TBN_RESTORE  = (TBN_FIRST - 21)
Public Const TBN_SAVE  = (TBN_FIRST - 22)
Public Const TBN_INITCUSTOMIZE  = (TBN_FIRST - 23)
Public Const TBN_WRAPHOTITEM  = (TBN_FIRST - 24)
Public Const TBN_DUPACCELERATOR  = (TBN_FIRST - 25)
Public Const TBN_WRAPACCELERATOR  = (TBN_FIRST - 26)
Public Const TBN_DRAGOVER  = (TBN_FIRST - 27)
Public Const TBN_MAPACCELERATOR  = (TBN_FIRST - 28)


Public Enum Toolbar_ButtonStates
	TBSTATE_CHECKED = &H01
	TBSTATE_PRESSED = &H02
	TBSTATE_ENABLED = &H04
	TBSTATE_HIDDEN = &H08
	TBSTATE_INDETERMINATE = &H10
	TBSTATE_WRAP = &H20
	TBSTATE_ELLIPSES = &H40
	TBSTATE_MARKED = &H80
End Enum

Public Enum ToolbarStyles
	TBSTYLE_TOOLTIPS = &H0100
	TBSTYLE_WRAPABLE = &H0200
	TBSTYLE_ALTDRAG = &H0400
	TBSTYLE_FLAT = &H0800
	TBSTYLE_LIST = &H1000
	TBSTYLE_CUSTOMERASE = &H2000
	TBSTYLE_REGISTERDROP = &H4000
	TBSTYLE_TRANSPARENT = &H8000&
	TBSTYLE_EX_DRAWDDARROWS = &H00000001
	TBSTYLE_EX_MULTICOLUMN = &H00000002 ' conflicts w/ TBSTYLE_WRAPABLE
	TBSTYLE_EX_VERTICAL = &H00000004
	TBSTYLE_EX_MIXEDBUTTONS = &H00000008
	TBSTYLE_EX_HIDECLIPPEDBUTTONS = &H00000010 ' don't show partially obscured buttons
    TBSTYLE_EX_INVERTIBLEIMAGELIST = &H00000020 'UNDOCUMENTED: / / Image list may contain inverted 
    TBSTYLE_EX_FIXEDDROPDOWN = &H00000040 'UNDOCUMENTED: Only used in the taskbar
	TBSTYLE_EX_DOUBLEBUFFER = &H00000080 ' Double Buffer the toolbar
    TBSTYLE_EX_TRANSPARENTDEADAREA = &H00000100 'UNDOCUMENTED
    TBSTYLE_EX_TOOLTIPSEXCLUDETOOLBAR = &H00000200 'UNDOCUMENTED
End Enum

Public Enum ToolbarButtonStyles
	BTNS_BUTTON = &H0000
	BTNS_SEP = &H0001
	BTNS_CHECK = &H0002
	BTNS_GROUP = &H0004
	BTNS_CHECKGROUP = (BTNS_GROUP Or BTNS_CHECK)
	BTNS_DROPDOWN = &H0008
	BTNS_AUTOSIZE = &H0010 ' automatically calculate the cx of the button
	BTNS_NOPREFIX = &H0020 ' this button should not have accel prefix
	BTNS_SHOWTEXT = &H0040 ' ignored unless TBSTYLE_EX_MIXEDBUTTONS is set
	BTNS_WHOLEDROPDOWN = &H0080 ' draw drop-down arrow, but without split arrow section
End Enum

Public Enum ToolbarCustomDrawReturnFlags
	TBCDRF_NOEDGES = &H00010000 ' Don't draw button edges
	TBCDRF_HILITEHOTTRACK = &H00020000 ' Use color of the button bk when hottracked
	TBCDRF_NOOFFSET = &H00040000 ' Don't offset button if pressed
	TBCDRF_NOMARK = &H00080000 ' Don't draw default highlight of image/text for TBSTATE_MARKED
	TBCDRF_NOETCHEDEFFECT = &H00100000 ' Don't draw etched effect for disabled items
	TBCDRF_BLENDICON = &H00200000 ' Use ILD_BLEND50 on the icon image
	TBCDRF_NOBACKGROUND = &H00400000 ' Use ILD_BLEND50 on the icon image
	TBCDRF_USECDCOLORS = &H00800000 ' Use CustomDrawColors to RenderText regardless of VisualStyle
End Enum

Public Enum CreateMappedBitmapFlags
    CMB_DISCARDABLE = &H01 'UNDOCUMENTED
	CMB_MASKED = &H02
    CMB_DIBSECTION = &H04 'UNDOCUMENTED
End Enum

Public Enum Toolbar_InsertMarkFlags
	TBIMHT_AFTER = &H00000001 ' TRUE = insert After iButton, otherwise before
	TBIMHT_BACKGROUND = &H00000002 ' TRUE iff missed buttons completely
End Enum


Public Type TBBUTTON
	iBitmap As Long
    idCommand As Long
    fsState As Byte
    fsStyle As Byte
    #If Win64 Then
    	bReserved(5) As Byte
    #Else
        bReserved(1) As Byte
    #End If
    dwData As LongPtr
    iString As LongPtr
End Type

Public Type COLORMAP
	from As Long
    to As Long
End Type

Public Type NMTBCUSTOMDRAW
	nmcd As NMCUSTOMDRAW
    hbrMonoDither As LongPtr
    hbrLines As LongPtr
    hpenLines As LongPtr
    clrText As Long
    clrMark As Long
    clrTextHighlight As Long
    clrBtnFace As Long
    clrBtnHighlight As Long
    clrHighlightHotTrack As Long
    rcText As RECT
    nStringBkMode As Long
    nHLStringBkMode As Long
    iListGap As Long
End Type

Public Enum Toolbar_AddBitmapValues
	HINST_COMMCTRL = (-1)
	IDB_STD_SMALL_COLOR = 0
	IDB_STD_LARGE_COLOR = 1
	IDB_VIEW_SMALL_COLOR = 4
	IDB_VIEW_LARGE_COLOR = 5
	IDB_HIST_SMALL_COLOR = 8
	IDB_HIST_LARGE_COLOR = 9
	IDB_HIST_NORMAL = 12
	IDB_HIST_HOT = 13
	IDB_HIST_DISABLED = 14
	IDB_HIST_PRESSED = 15
End Enum
Public Enum Toolbar_StandardBitmaps
	STD_CUT = 0
	STD_COPY = 1
	STD_PASTE = 2
	STD_UNDO = 3
	STD_REDOW = 4
	STD_DELETE = 5
	STD_FILENEW = 6
	STD_FILEOPEN = 7
	STD_FILESAVE = 8
	STD_PRINTPRE = 9
	STD_PROPERTIES = 10
	STD_HELP = 11
	STD_FIND = 12
	STD_REPLACE = 13
	STD_PRINT = 14
	VIEW_LARGEICONS = 0
	VIEW_SMALLICONS = 1
	VIEW_LIST = 2
	VIEW_DETAILS = 3
	VIEW_SORTNAME = 4
	VIEW_SORTSIZE = 5
	VIEW_SORTDATE = 6
	VIEW_SORTTYPE = 7
	VIEW_PARENTFOLDER = 8
	VIEW_NETCONNECT = 9
	VIEW_NETDISCONNECT = 10
	VIEW_NEWFOLDER = 11
	VIEW_VIEWMENU = 12
	HIST_BACK = 0
	HIST_FORWARD = 1
	HIST_FAVORITES = 2
	HIST_ADDTOFAVORITES = 3
	HIST_VIEWTREE = 4
End Enum
Public Type TBADDBITMAP
	hInst As LongPtr
	nID As LongPtr
End Type

Public Type TBSAVEPARAMS
    hkr As LongPtr
    pszSubKey As LongPtr
    pszValueName As LongPtr
End Type
Public Type TBSAVEPARAMSW
	hkr As LongPtr
	pszSubKey As LongPtr
	pszValueName As LongPtr
End Type
Public Type TBSAVEPARAMSA
	hkr As LongPtr
	pszSubKey As String
	pszValueName As String
End Type

Public Type TBINSERTMARK
	iButton As Long
	dwFlags As Toolbar_InsertMarkFlags
End Type

Public Type TBREPLACEBITMAP
	hInstOld As LongPtr
	nIDOld As LongPtr
	hInstNew As LongPtr
	nIDNew As LongPtr
	nButtons As Long
End Type

Public Const TBBF_LARGE = &H0001

Public Enum Toolbar_ButtonInfoMask
	TBIF_IMAGE = &H00000001
	TBIF_TEXT = &H00000002
	TBIF_STATE = &H00000004
	TBIF_STYLE = &H00000008
	TBIF_LPARAM = &H00000010
	TBIF_COMMAND = &H00000020
	TBIF_SIZE = &H00000040
	TBIF_BYINDEX = &H80000000
End Enum


Public Enum TBM_Mask
	TBMF_PAD = &H00000001
	TBMF_BARPAD = &H00000002
	TBMF_BUTTONSPACING = &H00000004
End Enum

Public Type TBMETRICS
	cbSize As Long
	dwMask As TBM_Mask
	cxPad As Long ' PAD
	cyPad As Long
	cxBarPad As Long ' BARPAD
	cyBarPad As Long
	cxButtonSpacing As Long ' BUTTONSPACING
	cyButtonSpacing As Long
End Type

Public Enum ToolbarCustomizeReturnFlags
	TBNRF_HIDEHELP = &H00000001
	TBNRF_ENDCUSTOMIZE = &H00000002
End Enum

Public Enum Toolbar_NotifyFlags
	TBNF_IMAGE = &H00000001
	TBNF_TEXT = &H00000002
	TBNF_DI_SETITEM = &H10000000
End Enum

Public Enum ToolbarDropdownReturnValues
	TBDDRET_DEFAULT = 0
	TBDDRET_NODEFAULT = 1
	TBDDRET_TREATPRESSED = 2 ' Treat as a standard press button
End Enum

Public Type TBBUTTONINFO
    cbSize As Long
    dwMask As Toolbar_ButtonInfoMask
    idCommand As Long
    iImage As Long
    fsState As Byte
    fsStyle As Byte
    cx As Integer
    lParam As LongPtr
    pszText As LongPtr
    cchText As Long
End Type
Public Type TBBUTTONINFOW
	cbSize As Long
	dwMask As Toolbar_ButtonInfoMask
	idCommand As Long
	iImage As Long
	fsState As Byte
	fsStyle As Byte
	cx As Integer
	lParam As LongPtr
	pszText As LongPtr
	cchText As Long
End Type
Public Type TBBUTTONINFOA
	cbSize As Long
	dwMask As Toolbar_ButtonInfoMask
	idCommand As Long
	iImage As Long
	fsState As Byte
	fsStyle As Byte
	cx As Integer
	lParam As LongPtr
	pszText As String
	cchText As Long
End Type

Public Type NMTBHOTITEM
	hdr As NMHDR
	idOld As Long
	idNew As Long
	dwFlags As HIC_FLAGS ' HICF_*
End Type

Public Type NMTBSAVE
	hdr As NMHDR
	pData As LongPtr
	pCurrent As LongPtr
	cbData As Long
	iItem As Long
	cButtons As Long
	tbButton As TBBUTTON
End Type

Public Type NMTBRESTORE
    hdr As NMHDR
	pData As LongPtr
	pCurrent As LongPtr
	cbData As Long
	iItem As Long
	cButtons As Long
	cbBytesPerRecord As Long
	tbButton As TBBUTTON
End Type

Public Type NMTBGETINFOTIP
    hdr As NMHDR
    pszText As LongPtr
    cchTextMax As Long
    iItem As Long
    lParam As LongPtr
End Type
Public Type NMTBGETINFOTIPW
	hdr As NMHDR
	pszText As LongPtr
	cchTextMax As Long
	iItem As Long
	lParam As LongPtr
End Type
Public Type NMTBGETINFOTIPA
	hdr As NMHDR
	pszText As String
	cchTextMax As Long
	iItem As Long
	lParam As LongPtr
End Type

Public Type NMTBDISPINFO
    hdr As NMHDR
    dwMask As Long '[in] Specifies the values requested .[out] Client ask the data to be set for future use
    idCommand As Long ' [in] id of button we're requesting info for
    lParam As LongPtr ' [in] lParam of button
    iImage As Long ' [out] image index
    pszText As LongPtr ' [out] new text for item
    cchText As Long ' [in] size of buffer pointed to by pszText
End Type
Public Type NMTBDISPINFOW
	hdr As NMHDR
	dwMask As Long '[in] Specifies the values requested .[out] Client ask the data to be set for future use
	idCommand As Long ' [in] id of button we're requesting info for
	lParam As LongPtr ' [in] lParam of button
	iImage As Long ' [out] image index
	pszText As LongPtr ' [out] new text for item
	cchText As Long ' [in] size of buffer pointed to by pszText
End Type
Public Type NMTBDISPINFOA
	hdr As NMHDR
	dwMask As Long '[in] Specifies the values requested .[out] Client ask the data to be set for future use
	idCommand As Long ' [in] id of button we're requesting info for
	lParam As LongPtr ' [in] lParam of button
	iImage As Long ' [out] image index
	pszText As String ' [out] new text for item
	cchText As Long ' [in] size of buffer pointed to by pszText
End Type

Public Type NMTOOLBAR
	hdr As NMHDR
	iItem As Long
	tbButton As TBBUTTON
	cchText As Long
	pszText As LongPtr
End Type

'The notifications for the following are documented, and these structures appear on MSDN, but not in commctrl.h
Public Type NMTBDUPACCELERATOR
	hdr As NMHDR
	ch As Long
	fDup As Long
End Type

Public Type NMTBWRAPACCELERATOR
	hdr As NMHDR
	ch As Long
	iButton As Long
End Type
Public Type NMTBWRAPHOTITEM
	hdr As NMHDR
	iStart As Long
	iDir As Long
	nReason As HIC_FLAGS ' HICF_* flags
End Type

Public Type NMTBCUSTOMIZEDLG
	hdr As NMHDR
	hDlg As LongPtr
End Type

Public Declare PtrSafe Function CreateToolbarEx Lib "comctl32" (ByVal hWnd As LongPtr, ByVal ws As Long, ByVal wid As Long, ByVal nBitmaps As Long, ByVal hbmInst As LongPtr, ByVal wBMID As LongPtr, _
        ByRef lpButtons As TBBUTTON, ByVal iNumButtons As Long, ByVal dxButton As Long, ByVal dyButton As Long, ByVal dxBitmap As Long, ByVal dyBitmap As Long, ByVal uStructSize As Long) As LongPtr
        
Public Declare PtrSafe Function CreateMappedBitmap Lib "comctl32" (ByVal hInstance As LongPtr, ByVal idBitmap As LongPtr, ByVal wFlags As CreateMappedBitmapFlags, lpColorMap As COLORMAP, ByVal iNumMaps As Long) As LongPtr
	
#End Region


#Region "Tooltip"
Public Const TOOLTIPS_CLASS = "tooltips_class32"

Public Const TTM_ACTIVATE  = (WM_USER + 1)
Public Const TTM_SETDELAYTIME  = (WM_USER + 3)
Public Const TTM_ADDTOOLA  = (WM_USER + 4)
Public Const TTM_ADDTOOLW  = (WM_USER + 50)
Public Const TTM_DELTOOLA  = (WM_USER + 5)
Public Const TTM_DELTOOLW  = (WM_USER + 51)
Public Const TTM_NEWTOOLRECTA  = (WM_USER + 6)
Public Const TTM_NEWTOOLRECTW  = (WM_USER + 52)
Public Const TTM_RELAYEVENT  = (WM_USER + 7)  ' Win7: wParam = GetMessageExtraInfo() when relaying WM_MOUSEMOVE
Public Const TTM_GETTOOLINFOA  = (WM_USER + 8)
Public Const TTM_GETTOOLINFOW  = (WM_USER + 53)
Public Const TTM_SETTOOLINFOA  = (WM_USER + 9)
Public Const TTM_SETTOOLINFOW  = (WM_USER + 54)
Public Const TTM_HITTESTA  = (WM_USER + 10)
Public Const TTM_HITTESTW  = (WM_USER + 55)
Public Const TTM_GETTEXTA  = (WM_USER + 11)
Public Const TTM_GETTEXTW  = (WM_USER + 56)
Public Const TTM_UPDATETIPTEXTA  = (WM_USER + 12)
Public Const TTM_UPDATETIPTEXTW  = (WM_USER + 57)
Public Const TTM_GETTOOLCOUNT  = (WM_USER + 13)
Public Const TTM_ENUMTOOLSA  = (WM_USER + 14)
Public Const TTM_ENUMTOOLSW  = (WM_USER + 58)
Public Const TTM_GETCURRENTTOOLA  = (WM_USER + 15)
Public Const TTM_GETCURRENTTOOLW  = (WM_USER + 59)
Public Const TTM_WINDOWFROMPOINT  = (WM_USER + 16)
Public Const TTM_TRACKACTIVATE  = (WM_USER + 17)  ' wParam = TRUE/FALSE start end  lparam = LPTOOLINFO
Public Const TTM_TRACKPOSITION  = (WM_USER + 18)  ' lParam = dwPos
Public Const TTM_SETTIPBKCOLOR  = (WM_USER + 19)
Public Const TTM_SETTIPTEXTCOLOR  = (WM_USER + 20)
Public Const TTM_GETDELAYTIME  = (WM_USER + 21)
Public Const TTM_GETTIPBKCOLOR  = (WM_USER + 22)
Public Const TTM_GETTIPTEXTCOLOR  = (WM_USER + 23)
Public Const TTM_SETMAXTIPWIDTH  = (WM_USER + 24)
Public Const TTM_GETMAXTIPWIDTH  = (WM_USER + 25)
Public Const TTM_SETMARGIN  = (WM_USER + 26)  ' lParam = lprc
Public Const TTM_GETMARGIN  = (WM_USER + 27)  ' lParam = lprc
Public Const TTM_POP  = (WM_USER + 28)
Public Const TTM_UPDATE  = (WM_USER + 29)
Public Const TTM_GETBUBBLESIZE  = (WM_USER + 30)
Public Const TTM_ADJUSTRECT  = (WM_USER + 31)
Public Const TTM_SETTITLEA  = (WM_USER + 32)  ' wParam = TTI_*, lParam = char* szTitle
Public Const TTM_SETTITLEW  = (WM_USER + 33)  ' wParam = TTI_*, lParam = wchar* szTitle
Public Const TTM_POPUP  = (WM_USER + 34)
Public Const TTM_GETTITLE  = (WM_USER + 35)  ' wParam = 0, lParam = TTGETTITLE*
Public Const TTM_ADDTOOL  = TTM_ADDTOOLW
Public Const TTM_DELTOOL  = TTM_DELTOOLW
Public Const TTM_NEWTOOLRECT  = TTM_NEWTOOLRECTW
Public Const TTM_GETTOOLINFO  = TTM_GETTOOLINFOW
Public Const TTM_SETTOOLINFO  = TTM_SETTOOLINFOW
Public Const TTM_HITTEST  = TTM_HITTESTW
Public Const TTM_GETTEXT  = TTM_GETTEXTW
Public Const TTM_UPDATETIPTEXT  = TTM_UPDATETIPTEXTW
Public Const TTM_ENUMTOOLS  = TTM_ENUMTOOLSW
Public Const TTM_GETCURRENTTOOL  = TTM_GETCURRENTTOOLW
Public Const TTM_SETTITLE  = TTM_SETTITLEW
Public Const TTM_SETWINDOWTHEME = CCM_SETWINDOWTHEME

Public Const TTN_FIRST As Long = (-520)
Public Const TTN_GETDISPINFOA  = (TTN_FIRST - 0)
Public Const TTN_GETDISPINFOW  = (TTN_FIRST - 10)
Public Const TTN_SHOW  = (TTN_FIRST - 1)
Public Const TTN_POP  = (TTN_FIRST - 2)
Public Const TTN_LINKCLICK  = (TTN_FIRST - 3)
Public Const TTN_NEEDTEXT  = TTN_GETDISPINFOW
Public Const TTN_NEEDTEXTA  = TTN_GETDISPINFOA
Public Const TTN_NEEDTEXTW  = TTN_GETDISPINFOW

Public Enum Tooltip_Styles
	TTS_ALWAYSTIP = &H01
	TTS_NOPREFIX = &H02
	TTS_NOANIMATE = &H10
	TTS_NOFADE = &H20
	TTS_BALLOON = &H40
	TTS_CLOSE = &H80
	TTS_USEVISUALSTYLE = &H100
End Enum

Public Enum Tooltip_Flags
	TTF_IDISHWND = &H0001
	'  Use this to center around trackpoint in trackmode
	'  -OR- to center around tool in normal mode.
	'  Use TTF_ABSOLUTE to place the tip exactly at the track coords when
	'  in tracking mode.  TTF_ABSOLUTE can be used in conjunction with TTF_CENTERTIP
	'  to center the tip absolutely about the track point.
	TTF_CENTERTIP = &H0002
	TTF_RTLREADING = &H0004
	TTF_SUBCLASS = &H0010
	TTF_TRACK = &H0020
	TTF_ABSOLUTE = &H0080
	TTF_TRANSPARENT = &H0100
	TTF_DI_SETITEM = &H8000& ' valid only on the TTN_NEEDTEXT callback
End Enum

Public Enum Tooltip_DelayTimeFlags
	TTDT_AUTOMATIC = 0
	TTDT_RESHOW = 1
	TTDT_AUTOPOP = 2
	TTDT_INITIAL = 3
End Enum

Public Enum Tooltip_Icon
	TTI_NONE = 0
	TTI_INFO = 1
	TTI_WARNING = 2
	TTI_ERROR = 3
	TTI_INFO_LARGE = 4
	TTI_WARNING_LARGE = 5
	TTI_ERROR_LARGE = 6
End Enum


Public Type TOOLINFO
	cbSize As Long
	uFlags As Tooltip_Flags
	hwnd As LongPtr
	uId As LongPtr
	rect As RECT
	hinst As LongPtr
	lpszText As LongPtr
	lParam As LongPtr
	lpReserved As LongPtr
End Type
Public Type TOOLINFOW
    cbSize As Long
    uFlags As Tooltip_Flags
    hwnd As LongPtr
    uId As LongPtr
    rect As RECT
    hinst As LongPtr
    lpszText As LongPtr
    lParam As LongPtr
    lpReserved As LongPtr
End Type
Public Type TOOLINFOA
	cbSize As Long
	uFlags As Tooltip_Flags
	hwnd As LongPtr
	uId As LongPtr
	rect As RECT
	hinst As LongPtr
	lpszText As String
	lParam As LongPtr
	lpReserved As LongPtr
End Type

Public Type TTGETTITLE
	dwSize As Long
	uTitleBitmap As Long
	cch As Long
	pszTitle As LongPtr
End Type

Public Type TT_HITTESTINFO
	hwnd As LongPtr
	pt As POINT
	ti As TOOLINFO
End Type
Public Type TT_HITTESTINFOW
    hwnd As LongPtr
    pt As POINT
    ti As TOOLINFOW
End Type
Public Type TT_HITTESTINFOA
	hwnd As LongPtr
	pt As POINT
	ti As TOOLINFOA
End Type

Public Type NMTTDISPINFO
    hdr As NMHDR
    lpszText As LongPtr
    szText(0 To 79) As Integer
    hinst As LongPtr
    uFlags As Tooltip_Flags
    lParam As LongPtr
End Type
Public Type NMTTDISPINFOW
	hdr As NMHDR
	lpszText As LongPtr
	szText(0 To 79) As Integer
	hinst As LongPtr
	uFlags As Tooltip_Flags
	lParam As LongPtr
End Type
Public Type NMTTDISPINFOA
	hdr As NMHDR
	lpszText As String
	szText(0 To 79) As Byte
	hinst As LongPtr
	uFlags As Tooltip_Flags
	lParam As LongPtr
End Type

Public Type NMTTCUSTOMDRAW
	nmcd As NMCUSTOMDRAW
	uDrawFlags As DT_Flags
End Type
	
#End Region

#Region "Trackbar"
Public Const TRACKBAR_CLASS = "msctls_trackbar"

Public Const TBM_GETPOS  = (WM_USER)
Public Const TBM_GETRANGEMIN  = (WM_USER + 1)
Public Const TBM_GETRANGEMAX  = (WM_USER + 2)
Public Const TBM_GETTIC  = (WM_USER + 3)
Public Const TBM_SETTIC  = (WM_USER + 4)
Public Const TBM_SETPOS  = (WM_USER + 5)
Public Const TBM_SETRANGE  = (WM_USER + 6)
Public Const TBM_SETRANGEMIN  = (WM_USER + 7)
Public Const TBM_SETRANGEMAX  = (WM_USER + 8)
Public Const TBM_CLEARTICS  = (WM_USER + 9)
Public Const TBM_SETSEL  = (WM_USER + 10)
Public Const TBM_SETSELSTART  = (WM_USER + 11)
Public Const TBM_SETSELEND  = (WM_USER + 12)
Public Const TBM_GETPTICS  = (WM_USER + 14)
Public Const TBM_GETTICPOS  = (WM_USER + 15)
Public Const TBM_GETNUMTICS  = (WM_USER + 16)
Public Const TBM_GETSELSTART  = (WM_USER + 17)
Public Const TBM_GETSELEND  = (WM_USER + 18)
Public Const TBM_CLEARSEL  = (WM_USER + 19)
Public Const TBM_SETTICFREQ  = (WM_USER + 20)
Public Const TBM_SETPAGESIZE  = (WM_USER + 21)
Public Const TBM_GETPAGESIZE  = (WM_USER + 22)
Public Const TBM_SETLINESIZE  = (WM_USER + 23)
Public Const TBM_GETLINESIZE  = (WM_USER + 24)
Public Const TBM_GETTHUMBRECT  = (WM_USER + 25)
Public Const TBM_GETCHANNELRECT  = (WM_USER + 26)
Public Const TBM_SETTHUMBLENGTH  = (WM_USER + 27)
Public Const TBM_GETTHUMBLENGTH  = (WM_USER + 28)
Public Const TBM_SETTOOLTIPS  = (WM_USER + 29)
Public Const TBM_GETTOOLTIPS  = (WM_USER + 30)
Public Const TBM_SETTIPSIDE  = (WM_USER + 31)
Public Const TBM_SETBUDDY  = (WM_USER + 32)  ' wparam = BOOL fLeft; (or right)
Public Const TBM_GETBUDDY  = (WM_USER + 33)  ' wparam = BOOL fLeft; (or right)
Public Const TBM_SETPOSNOTIFY  = (WM_USER + 34)
Public Const TBM_SETUNICODEFORMAT  = CCM_SETUNICODEFORMAT
Public Const TBM_GETUNICODEFORMAT  = CCM_GETUNICODEFORMAT

Public Const TRBN_FIRST As Long = (-1501)
Public Const TRBN_THUMBPOSCHANGING = (TRBN_FIRST - 1)


Public Enum TrackBarStyles
	TBS_AUTOTICKS = &H0001
	TBS_VERT = &H0002
	TBS_HORZ = &H0000
	TBS_TOP = &H0004
	TBS_BOTTOM = &H0000
	TBS_LEFT = &H0004
	TBS_RIGHT = &H0000
	TBS_BOTH = &H0008
	TBS_NOTICKS = &H0010
	TBS_ENABLESELRANGE = &H0020
	TBS_FIXEDLENGTH = &H0040
	TBS_NOTHUMB = &H0080
	TBS_TOOLTIPS = &H0100
	TBS_REVERSED = &H0200
	TBS_DOWNISLEFT = &H0400
	TBS_NOTIFYBEFOREREMOVE = &H0800
	TBS_TRANSPARENTBKGND = &H1000
End Enum

Public Enum TrackBarTipSideFlags
	TBTS_TOP = 0
	TBTS_LEFT = 1
	TBTS_BOTTOM = 2
	TBTS_RIGHT = 3
End Enum

Public Enum TrackBarNotifications
	TB_LINEUP = 0
	TB_LINEDOWN = 1
	TB_PAGEUP = 2
	TB_PAGEDOWN = 3
	TB_THUMBPOSITION = 4
	TB_THUMBTRACK = 5
	TB_TOP = 6
	TB_BOTTOM = 7
	TB_ENDTRACK = 8
End Enum

Public Enum TrackBarItemSpecs
	TBCD_TICS = &H0001
	TBCD_THUMB = &H0002
	TBCD_CHANNEL = &H0003
End Enum

Public Type NMTRBTHUMBPOSCHANGING
	hdr As NMHDR
	dwPos As Long
	nReason As TrackBarNotifications
End Type
	
#End Region

#Region "TreeView"
Public Const IDD_TREEVIEW = 100

Public Enum TVHandles
  TVI_ROOT = &HFFFF0000
  TVI_FIRST = &HFFFF0001
  TVI_LAST = &HFFFF0002
  TVI_SORT = &HFFFF0003
End Enum

Public Const WC_TREEVIEWA As String = "SysTreeView32"
Public Const WC_TREEVIEWW As String = "SysTreeView32"
Public Const WC_TREEVIEW As String = WC_TREEVIEWW
' messages
Public Const I_CHILDRENCALLBACK = (-1)
Public Const I_CHILDRENAUTO = (-2)

Public Enum TVMessages
  TV_FIRST = &H1100
  
'#If UNICODE Then
  TVM_INSERTITEMW = (TV_FIRST + 50)
  TVM_INSERTITEM = TVM_INSERTITEMW
'#Else
  TVM_INSERTITEMA = (TV_FIRST + 0)
'#End If
  
  TVM_DELETEITEM = (TV_FIRST + 1)
  TVM_EXPAND = (TV_FIRST + 2)
  TVM_GETITEMRECT = (TV_FIRST + 4)
  TVM_GETCOUNT = (TV_FIRST + 5)
  TVM_GETINDENT = (TV_FIRST + 6)
  TVM_SETINDENT = (TV_FIRST + 7)
  TVM_GETIMAGELIST = (TV_FIRST + 8)
  TVM_SETIMAGELIST = (TV_FIRST + 9)
  TVM_GETNEXTITEM = (TV_FIRST + 10)
  TVM_SELECTITEM = (TV_FIRST + 11)
  
'#If UNICODE Then
  TVM_GETITEMW = (TV_FIRST + 62)
  TVM_SETITEMW = (TV_FIRST + 63)
  TVM_EDITLABELW = (TV_FIRST + 65)
  TVM_GETITEM = (TV_FIRST + 62)
  TVM_SETITEM = (TV_FIRST + 63)
  TVM_EDITLABEL = (TV_FIRST + 65)
'#Else
  TVM_GETITEMA = (TV_FIRST + 12)
  TVM_SETITEMA = (TV_FIRST + 13)
  TVM_EDITLABELA = (TV_FIRST + 14)
'#End If
  
  TVM_GETEDITCONTROL = (TV_FIRST + 15)
  TVM_GETVISIBLECOUNT = (TV_FIRST + 16)
  TVM_HITTEST = (TV_FIRST + 17)
  TVM_CREATEDRAGIMAGE = (TV_FIRST + 18)
  TVM_SORTCHILDREN = (TV_FIRST + 19)
  TVM_ENSUREVISIBLE = (TV_FIRST + 20)
  TVM_SORTCHILDRENCB = (TV_FIRST + 21)
  TVM_ENDEDITLABELNOW = (TV_FIRST + 22)
  
'#If UNICODE Then
  TVM_GETISEARCHSTRINGW = (TV_FIRST + 64)
  TVM_GETISEARCHSTRING = (TV_FIRST + 64)
'#Else
  TVM_GETISEARCHSTRINGA = (TV_FIRST + 23)
'#End If
  
  TVM_SETTOOLTIPS = (TV_FIRST + 24)
  TVM_GETTOOLTIPS = (TV_FIRST + 25)
  TVM_SETINSERTMARK = (TV_FIRST + 26)
  TVM_SETUNICODEFORMAT = CCM_SETUNICODEFORMAT
  TVM_GETUNICODEFORMAT = CCM_GETUNICODEFORMAT
  TVM_SETITEMHEIGHT = (TV_FIRST + 27)
  TVM_GETITEMHEIGHT = (TV_FIRST + 28)
  TVM_SETBKCOLOR = (TV_FIRST + 29)
  TVM_SETTEXTCOLOR = (TV_FIRST + 30)
  TVM_GETBKCOLOR = (TV_FIRST + 31)
  TVM_GETTEXTCOLOR = (TV_FIRST + 32)
  TVM_SETSCROLLTIME = (TV_FIRST + 33)
  TVM_GETSCROLLTIME = (TV_FIRST + 34)
  TVM_SETBORDER = (TV_FIRST + 35)

  TVM_SETINSERTMARKCOLOR = (TV_FIRST + 37)
  TVM_GETINSERTMARKCOLOR = (TV_FIRST + 38)
  '5.0
  TVM_GETITEMSTATE = (TV_FIRST + 39)
  TVM_SETLINECOLOR = (TV_FIRST + 40)
  TVM_GETLINECOLOR = (TV_FIRST + 41)
  TVM_MAPACCIDTOHTREEITEM = (TV_FIRST + 42)
  TVM_MAPHTREEITEMTOACCID = (TV_FIRST + 43)
  TVM_SETEXTENDEDSTYLE = (TV_FIRST + 44)
  TVM_GETEXTENDEDSTYLE = (TV_FIRST + 45)
  TVM_SETHOT = (TV_FIRST + 58)
  TVM_SETAUTOSCROLLINFO = (TV_FIRST + 59)
  '6.0
  TVM_GETSELECTEDCOUNT = (TV_FIRST + 70)
  TVM_SHOWINFOTIP = (TV_FIRST + 71)
  TVM_GETITEMPARTRECT = (TV_FIRST + 72)
    
End Enum   ' TVMessages

Public Enum TV_Styles
    TVS_HASBUTTONS = &H1
    TVS_HASLINES = &H2
    TVS_LINESATROOT = &H4
    TVS_EDITLABELS = &H8
    TVS_DISABLEDRAGDROP = &H10
    TVS_SHOWSELALWAYS = &H20
    TVS_RTLREADING = &H40
    TVS_NOTOOLTIPS = &H80
    TVS_CHECKBOXES = &H100
    TVS_TRACKSELECT = &H200
    TVS_SINGLEEXPAND = &H400
    TVS_INFOTIP = &H800
    TVS_FULLROWSELECT = &H1000
    TVS_NOSCROLL = &H2000
    TVS_NONEVENHEIGHT = &H4000
    TVS_NOHSCROLL = &H8000&
End Enum
Public Enum TV_Ex_Styles
    TVS_EX_NOSINGLECOLLAPSE = &H1
    TVS_EX_MULTISELECT = &H2
    TVS_EX_DOUBLEBUFFER = &H4
    TVS_EX_NOINDENTSTATE = &H8
    TVS_EX_RICHTOOLTIP = &H10
    TVS_EX_AUTOHSCROLL = &H20
    TVS_EX_FADEINOUTEXPANDOS = &H40
    TVS_EX_PARTIALCHECKBOXES = &H80
    TVS_EX_EXCLUSIONCHECKBOXES = &H100
    TVS_EX_DIMMEDCHECKBOXES = &H200
    TVS_EX_DRAWIMAGEASYNC = &H400
End Enum

Public Enum TVSB_Flags
    TVSBF_XBORDER = &H1
    TVSBF_YBORDER = &H2
End Enum
' TVM_GET/SETIMAGELIST wParam
Public Enum TVImageLists
    TVSIL_NORMAL = 0
    TVSIL_STATE = 2
End Enum

' TVM_GETNEXTITEM wParam
Public Enum TVM_GETNEXTITEM_wParam
  TVGN_ROOT = &H0
  TVGN_NEXT = &H1
  TVGN_PREVIOUS = &H2
  TVGN_PARENT = &H3
  TVGN_CHILD = &H4
  TVGN_FIRSTVISIBLE = &H5
  TVGN_NEXTVISIBLE = &H6
  TVGN_PREVIOUSVISIBLE = &H7
  TVGN_DROPHILITE = &H8
  TVGN_CARET = &H9
  TVGN_LASTVISIBLE = &HA
  TVGN_NEXTSELECTED = &HB
End Enum

Public Const TVSI_NOSINGLEEXPAND = &H8000

' TVM_GET/SETITEM lParam
Public Type TVITEM   'TVITEMW
  Mask As TVITEM_Mask
  hItem As LongPtr
  State As TVITEM_State
  StateMask As TVITEM_State
  pszText As LongPtr
  cchTextMax As Long
  iImage As Long
  iSelectedImage As Long
  cChildren As Long
  lParam As LongPtr
End Type
Public Type TVITEMW
  Mask As TVITEM_Mask
  hItem As LongPtr
  State As TVITEM_State
  StateMask As TVITEM_State
  pszText As LongPtr
  cchTextMax As Long
  iImage As Long
  iSelectedImage As Long
  cChildren As Long
  lParam As LongPtr
End Type
Public Type TVITEMA   ' was TV_ITEM
  Mask As TVITEM_Mask
  hItem As LongPtr
  State As TVITEM_State
  StateMask As TVITEM_State
  pszText As String    ' if a string, must be pre-allocated!!
  cchTextMax As Long
  iImage As Long
  iSelectedImage As Long
  cChildren As Long
  lParam As LongPtr
End Type

Public Type TVITEMEX 'TVITEMEXW
    Mask As TVITEM_Mask
    hItem As LongPtr
    State As TVITEM_State
    StateMask As TVITEM_State
    pszText As LongPtr
    cchTextMax As Long
    iImage As Long
    iSelectedImage As Long
    cChildren As Long
    lParam As LongPtr
    iIntegral As Long
    uStateEx As TVITEM_State_Ex
    hWnd As LongPtr
    iExpandedImage As Long
    iReserved As Long 'Win7
End Type
Public Type TVITEMEXW 'TVITEMEXW
    Mask As TVITEM_Mask
    hItem As LongPtr
    State As TVITEM_State
    StateMask As TVITEM_State
    pszText As LongPtr
    cchTextMax As Long
    iImage As Long
    iSelectedImage As Long
    cChildren As Long
    lParam As LongPtr
    iIntegral As Long
    uStateEx As TVITEM_State_Ex
    hWnd As LongPtr
    iExpandedImage As Long
    iReserved As Long 'Win7
End Type
Public Type TVITEMEXA
    Mask As TVITEM_Mask
    hItem As LongPtr
    State As TVITEM_State
    StateMask As TVITEM_State
    pszText As String
    cchTextMax As Long
    iImage As Long
    iSelectedImage As Long
    cChildren As Long
    lParam As LongPtr
    iIntegral As Long
    uStateEx As TVITEM_State_Ex
    hWnd As LongPtr
    iExpandedImage As Long
    iReserved As Long 'Win7
End Type

'TVINSERTSTRUCT is supposed to be a union where item is TVITEMA/W or EXA/EXW
'but VB doesn't support unions or 'As Any' in structs. Macros using these
'also had to be duplicated
[Description("**NOTE:** Use TVINSERTSTRUCTEX for TVITEMEX")]
Public Type TVINSERTSTRUCT
    hParent As LongPtr
    hInsertAfter As LongPtr
    [Description("**NOTE:** Use TVINSERTSTRUCTEX for TVITEMEX")]
    Item As TVITEM
End Type
Public Type TVINSERTSTRUCTEX
    hParent As LongPtr
    hInsertAfter As LongPtr
    Item As TVITEMEX
End Type
[Description("**NOTE:** Use TVINSERTSTRUCTEXW for TVITEMEXW")]
Public Type TVINSERTSTRUCTW
    hParent As LongPtr
    hInsertAfter As LongPtr
    Item As TVITEMW
End Type
Public Type TVINSERTSTRUCTEXW
    hParent As LongPtr
    hInsertAfter As LongPtr
    [Description("**NOTE:** Use TVINSERTSTRUCTEXW for TVITEMEXW")]
    Item As TVITEMEXW
End Type

Public Enum TVITEMPART
    TVGIPR_BUTTON = &H1
End Enum

Public Type TVGETITEMPARTRECTINFO
    hti As LongPtr
    prc As RECT
    partid As TVITEMPART
End Type

' TVITEM mask
Public Enum TVITEM_Mask
    TVIF_TEXT = &H1
    TVIF_IMAGE = &H2
    TVIF_PARAM = &H4
    TVIF_STATE = &H8
    TVIF_HANDLE = &H10
    TVIF_SELECTEDIMAGE = &H20
    TVIF_CHILDREN = &H40
    TVIF_INTEGRAL = &H80
    '6.0
    TVIF_STATEEX = &H100
    TVIF_EXPANDEDIMAGE = &H200
    TVIF_DI_SETITEM = &H1000
End Enum
' TVITEM state, stateMask
Public Enum TVITEM_State
    TVIS_SELECTED = &H2
    TVIS_CUT = &H4
    TVIS_DROPHILITED = &H8
    TVIS_BOLD = &H10
    TVIS_EXPANDED = &H20
    TVIS_EXPANDEDONCE = &H40
    TVIS_EXPANDPARTIAL = &H80
    TVIS_OVERLAYMASK = &HF00
    TVIS_STATEIMAGEMASK = &HF000&
    TVIS_USERMASK = &HF000&
End Enum
Public Enum TVITEM_State_Ex
    '6.0
    TVIS_EX_FLAT = &H1
    TVIS_EX_DISABLED = &H2
    TVIS_EX_ALL = &H2
    TVIS_EX_HWND = &H4 '?????
End Enum
' TVM_HITTEST lParam
Public Type TVHITTESTINFO   ' was TV_HITTESTINFO
  PT As POINT
  Flags As TVHT_flags
  hItem As LongPtr
End Type

Public Enum TVHT_flags
  TVHT_NOWHERE = &H1   ' In the client area, but below the last item
  TVHT_ONITEMICON = &H2
  TVHT_ONITEMLABEL = &H4
  TVHT_ONITEMINDENT = &H8
  TVHT_ONITEMBUTTON = &H10
  TVHT_ONITEMRIGHT = &H20
  TVHT_ONITEMSTATEICON = &H40
  TVHT_ONITEM = (TVHT_ONITEMICON Or TVHT_ONITEMLABEL Or TVHT_ONITEMSTATEICON)
  
  TVHT_ABOVE = &H100
  TVHT_BELOW = &H200
  TVHT_TORIGHT = &H400
  TVHT_TOLEFT = &H800
  
  ' user-defined
  TVHT_ONITEMLINE = (TVHT_ONITEM Or TVHT_ONITEMINDENT Or TVHT_ONITEMBUTTON Or TVHT_ONITEMRIGHT)
End Enum

' TVM_SORTCHILDRENCB lParam
Public Type TVSORTCB   ' was TV_SORTCB
  hParent As LongPtr
  lpfnCompare As LongPtr
  lParam As LongPtr
End Type
Public Enum TVM_EXPAND_wParam
  TVE_COLLAPSE = &H1
  TVE_EXPAND = &H2
  TVE_TOGGLE = &H3

  TVE_EXPANDPARTIAL = &H4000
  
  TVE_COLLAPSERESET = &H8000&
End Enum
Public Const TVC_UNKNOWN = &H0
Public Const TVC_BYMOUSE = &H1
Public Const TVC_BYKEYBOARD = &H2

' notifications
Public Enum TVNotifications
    TVN_FIRST = -400&   ' &HFFFFFE70   ' (0U-400U)
    TVN_LAST = -499&    ' &HFFFFFE0D    ' (0U-499U)
                                                        ' lParam points to:
    TVN_SELCHANGINGA = (TVN_FIRST - 1)          ' NMTREEVIEW
    TVN_SELCHANGEDA = (TVN_FIRST - 2)           ' NMTREEVIEW
    TVN_GETDISPINFOA = (TVN_FIRST - 3)            ' NMTVDISPINFO
    TVN_SETDISPINFOA = (TVN_FIRST - 4)            ' NMTVDISPINFO
    TVN_ITEMEXPANDINGA = (TVN_FIRST - 5)       ' NMTREEVIEW
    TVN_ITEMEXPANDEDA = (TVN_FIRST - 6)        ' NMTREEVIEW
    TVN_BEGINDRAGA = (TVN_FIRST - 7)              ' NMTREEVIEW
    TVN_BEGINRDRAGA = (TVN_FIRST - 8)            ' NMTREEVIEW
    TVN_DELETEITEMA = (TVN_FIRST - 9)             ' NMTREEVIEW
    TVN_BEGINLABELEDITA = (TVN_FIRST - 10)    ' NMTVDISPINFO
    TVN_ENDLABELEDITA = (TVN_FIRST - 11)       ' NMTVDISPINFO
    TVN_KEYDOWN = (TVN_FIRST - 12)                ' NMTVKEYDOWN

    TVN_SELCHANGINGW = (TVN_FIRST - 50)
    TVN_SELCHANGEDW = (TVN_FIRST - 51)
    TVN_GETDISPINFOW = (TVN_FIRST - 52)
    TVN_SETDISPINFOW = (TVN_FIRST - 53)
    TVN_ITEMEXPANDINGW = (TVN_FIRST - 54)
    TVN_ITEMEXPANDEDW = (TVN_FIRST - 55)
    TVN_BEGINDRAGW = (TVN_FIRST - 56)
    TVN_BEGINRDRAGW = (TVN_FIRST - 57)
    TVN_DELETEITEMW = (TVN_FIRST - 58)
    TVN_BEGINLABELEDITW = (TVN_FIRST - 59)
    TVN_ENDLABELEDITW = (TVN_FIRST - 60)
    TVN_GETINFOTIPA = (TVN_FIRST - 13)
    TVN_GETINFOTIPW = (TVN_FIRST - 14)
    TVN_SINGLEEXPAND = (TVN_FIRST - 15)
    TVN_ITEMCHANGINGA = (TVN_FIRST - 16)
    TVN_ITEMCHANGINGW = (TVN_FIRST - 17)
    TVN_ITEMCHANGEDA = (TVN_FIRST - 18)
    TVN_ITEMCHANGEDW = (TVN_FIRST - 19)
    TVN_ASYNCDRAW = (TVN_FIRST - 20)

    TVN_SELCHANGING = TVN_SELCHANGINGW
    TVN_GETDISPINFO = TVN_GETDISPINFOW
    TVN_SETDISPINFO = TVN_SETDISPINFOW
    TVN_ITEMEXPANDING = TVN_ITEMEXPANDINGW
    TVN_ITEMEXPANDED = TVN_ITEMEXPANDEDW
    TVN_BEGINDRAG = TVN_BEGINDRAGW
    TVN_BEGINRDRAG = TVN_BEGINRDRAGW
    TVN_DELETEITEM = TVN_DELETEITEMW
    TVN_BEGINLABELEDIT = TVN_BEGINLABELEDITW
    TVN_ENDLABELEDIT = TVN_ENDLABELEDITW
    TVN_GETINFOTIP = TVN_GETINFOTIPW
    TVN_ITEMCHANGING = TVN_ITEMCHANGINGW
    TVN_ITEMCHANGED = TVN_ITEMCHANGEDW
    
End Enum   ' Notifications

Public Const TVNRET_DEFAULT = &H0
Public Const TVNRET_SKIPOLD = &H1
Public Const TVNRET_SKIPNEW = &H2

' lParam for most treeview notification messages
Public Type NMTREEVIEW   ' was NM_TREEVIEW
  hdr As NMHDR
  ' Specifies a notification-specific action flag.
  ' Is TVC_* for TVN_SELCHANGING, TVN_SELCHANGED, TVN_SETDISPINFO
  ' Is TVE_* for TVN_ITEMEXPANDING, TVN_ITEMEXPANDED
  Action As Long
  itemOld As TVITEM
  itemNew As TVITEM
  ptDrag As POINT
End Type
Public Type NMTREEVIEWW   ' was NM_TREEVIEW
  hdr As NMHDR
  ' Specifies a notification-specific action flag.
  ' Is TVC_* for TVN_SELCHANGING, TVN_SELCHANGED, TVN_SETDISPINFO
  ' Is TVE_* for TVN_ITEMEXPANDING, TVN_ITEMEXPANDED
  Action As Long
  itemOld As TVITEMW
  itemNew As TVITEMW
  ptDrag As POINT
End Type
Public Type NMTREEVIEWA   ' was NM_TREEVIEW
  hdr As NMHDR
  ' Specifies a notification-specific action flag.
  ' Is TVC_* for TVN_SELCHANGING, TVN_SELCHANGED, TVN_SETDISPINFO
  ' Is TVE_* for TVN_ITEMEXPANDING, TVN_ITEMEXPANDED
  Action As Long
  itemOld As TVITEMA
  itemNew As TVITEMA
  ptDrag As POINT
End Type


Public Type NMTVSTATEIMAGECHANGING
    hdr As NMHDR
    hti As LongPtr
    iOldStateImageIndex As Long
    iNewStateImageIndex As Long
End Type
Public Type NMTVDISPINFO
    hdr As NMHDR
    Item As TVITEM
End Type
Public Type NMTVDISPINFOA
    hdr As NMHDR
    Item As TVITEMA
End Type
Public Type NMTVDISPINFOW
    hdr As NMHDR
    Item As TVITEMW
End Type
Public Type NMTVDISPINFOEX
    hdr As NMHDR
    Item As TVITEMEX
End Type
[PackingAlignment(1)]
Public Type NMTVKEYDOWN
    hdr As NMHDR
    wVKey As Integer
    Flags As Long
End Type
Public Const TVCDRF_NOIMAGES = &H10000
Public Type NMTVCUSTOMDRAW
    NMCD As NMCUSTOMDRAW
    ClrText As Long
    ClrTextBk As Long
    iLevel As Long
End Type
Public Type NMTVGETINFOTIP
    hdr As NMHDR
    pszText As LongPtr
    cchTextMax As Long
    hItem As LongPtr
    lParam As LongPtr
End Type
Public Type NMTVGETINFOTIPW
    hdr As NMHDR
    pszText As LongPtr
    cchTextMax As Long
    hItem As LongPtr
    lParam As LongPtr
End Type
Public Type NMTVGETINFOTIPA
    hdr As NMHDR
    pszText As String
    cchTextMax As Long
    hItem As LongPtr
    lParam As LongPtr
End Type
Public Type NMTVITEMCHANGE
    hdr As NMHDR
    uChanged As Long
    hItem As LongPtr
    uStateNew As TVITEM_State
    uStateOld As TVITEM_State
    lParam As LongPtr
End Type
Public Type NMTVASYNCDRAW
    hdr As NMHDR
    pimldp As IMAGELISTDRAWPARAMS
    hr As Long
    hItem As LongPtr
    lParam As LongPtr
    dwRetFlags As Long
    iRetImageIndex As Long
End Type
#End Region

#Region "UpDown"
Public Const UPDOWN_CLASS = "msctls_updown32"

Public Const UDN_FIRST As Long = (H_MAX - 721)
Public Const UDN_DELTAPOS As Long = (UDN_FIRST - 1)

Public Enum UpDownStyles
	UDS_WRAP = &H0001
	UDS_SETBUDDYINT = &H0002
	UDS_ALIGNRIGHT = &H0004
	UDS_ALIGNLEFT = &H0008
	UDS_AUTOBUDDY = &H0010
	UDS_ARROWKEYS = &H0020
	UDS_HORZ = &H0040
	UDS_NOTHOUSANDS = &H0080
	UDS_HOTTRACK = &H0100
End Enum


Public Const UDM_SETRANGE As Long = (WM_USER + 101)
Public Const UDM_GETRANGE As Long = (WM_USER + 102)
Public Const UDM_SETPOS As Long = (WM_USER + 103)
Public Const UDM_GETPOS As Long = (WM_USER + 104)
Public Const UDM_SETBUDDY As Long = (WM_USER + 105)
Public Const UDM_GETBUDDY As Long = (WM_USER + 106)
Public Const UDM_SETACCEL As Long = (WM_USER + 107)
Public Const UDM_GETACCEL As Long = (WM_USER + 108)
Public Const UDM_SETBASE As Long = (WM_USER + 109)
Public Const UDM_GETBASE As Long = (WM_USER + 110)
Public Const UDM_SETRANGE32 As Long = (WM_USER + 111)
Public Const UDM_GETRANGE32 As Long = (WM_USER + 112)
Public Const UDM_GETPOS32 As Long = (WM_USER + 114)
Public Const UDM_SETPOS32 As Long = (WM_USER + 113)
Public Const UDM_SETUNICODEFORMAT  = CCM_SETUNICODEFORMAT
Public Const UDM_GETUNICODEFORMAT  = CCM_GETUNICODEFORMAT



Public Type UDACCEL
	nSec As Long
	nInc As Long
End Type

Public Const UD_MAXVAL As Integer = &H7fff
Public Const UD_MINVAL As Integer = &H8000

Public Type NMUPDOWN
	hdr As NMHDR
	iPos As Long
	iDelta As Long
End Type

Public Declare PtrSafe Function CreateUpDownControl Lib "comctl32" (ByVal dwStyle As UpDownStyles, ByVal x As Long, ByVal y As Long, ByVal cx As Long, ByVal cy As Long, _
                                                                    ByVal hParent As LongPtr, ByVal nID As Long, ByVal hInst As LongPtr, ByVal hBuddy As LongPtr, _
                                                                    ByVal nUpper As Long, ByVal nLower As Long, ByVal nPos As Long) As LongPtr
                     	
#End Region

#Region "VisualStyles"
Public Const VSCLASS_AEROWIZARDSTYLE = "AEROWIZARDSTYLE"
Public Const VSCLASS_AEROWIZARD = "AEROWIZARD"

Public Const TMTVS_RESERVEDLOW  = 100000
Public Const TMTVS_RESERVEDHIGH  = 19999

Public Enum AEROWIZARDPARTS
	AW_TITLEBAR = 1
	AW_HEADERAREA = 2
	AW_CONTENTAREA = 3
	AW_COMMANDAREA = 4
	AW_BUTTON = 5
End Enum

Public Enum TITLEBARSTATES
	AW_S_TITLEBAR_ACTIVE = 1
	AW_S_TITLEBAR_INACTIVE = 2
End Enum

Public Enum HEADERAREASTATES
	AW_S_HEADERAREA_NOMARGIN = 1
End Enum

Public Enum CONTENTAREASTATES
	AW_S_CONTENTAREA_NOMARGIN = 1
End Enum

Public Const VSCLASS_BUTTONSTYLE = "BUTTONSTYLE"
Public Const VSCLASS_BUTTON = "BUTTON"

Public Enum BUTTONPARTS
	BP_PUSHBUTTON = 1
	BP_RADIOBUTTON = 2
	BP_CHECKBOX = 3
	BP_GROUPBOX = 4
	BP_USERBUTTON = 5
	BP_COMMANDLINK = 6
	BP_COMMANDLINKGLYPH = 7
	BP_RADIOBUTTON_HCDISABLED = 8
	BP_CHECKBOX_HCDISABLED = 9
	BP_GROUPBOX_HCDISABLED = 10
	BP_PUSHBUTTONDROPDOWN = 11
End Enum

Public Enum PUSHBUTTONSTATES
	PBS_NORMAL = 1
	PBS_HOT = 2
	PBS_PRESSED = 3
	PBS_DISABLED = 4
	PBS_DEFAULTED = 5
	PBS_DEFAULTED_ANIMATING = 6
End Enum

Public Enum RADIOBUTTONSTATES
	RBS_UNCHECKEDNORMAL = 1
	RBS_UNCHECKEDHOT = 2
	RBS_UNCHECKEDPRESSED = 3
	RBS_UNCHECKEDDISABLED = 4
	RBS_CHECKEDNORMAL = 5
	RBS_CHECKEDHOT = 6
	RBS_CHECKEDPRESSED = 7
	RBS_CHECKEDDISABLED = 8
End Enum

Public Enum CHECKBOXSTATES
	CBS_UNCHECKEDNORMAL = 1
	CBS_UNCHECKEDHOT = 2
	CBS_UNCHECKEDPRESSED = 3
	CBS_UNCHECKEDDISABLED = 4
	CBS_CHECKEDNORMAL = 5
	CBS_CHECKEDHOT = 6
	CBS_CHECKEDPRESSED = 7
	CBS_CHECKEDDISABLED = 8
	CBS_MIXEDNORMAL = 9
	CBS_MIXEDHOT = 10
	CBS_MIXEDPRESSED = 11
	CBS_MIXEDDISABLED = 12
	CBS_IMPLICITNORMAL = 13
	CBS_IMPLICITHOT = 14
	CBS_IMPLICITPRESSED = 15
	CBS_IMPLICITDISABLED = 16
	CBS_EXCLUDEDNORMAL = 17
	CBS_EXCLUDEDHOT = 18
	CBS_EXCLUDEDPRESSED = 19
	CBS_EXCLUDEDDISABLED = 20
End Enum

Public Enum GROUPBOXSTATES
	GBS_NORMAL = 1
	GBS_DISABLED = 2
End Enum

Public Enum COMMANDLINKSTATES
	CMDLS_NORMAL = 1
	CMDLS_HOT = 2
	CMDLS_PRESSED = 3
	CMDLS_DISABLED = 4
	CMDLS_DEFAULTED = 5
	CMDLS_DEFAULTED_ANIMATING = 6
End Enum

Public Enum COMMANDLINKGLYPHSTATES
	CMDLGS_NORMAL = 1
	CMDLGS_HOT = 2
	CMDLGS_PRESSED = 3
	CMDLGS_DISABLED = 4
	CMDLGS_DEFAULTED = 5
End Enum

Public Enum PUSHBUTTONDROPDOWNSTATES
	PBDDS_NORMAL = 1
	PBDDS_DISABLED = 2
End Enum

Public Const VSCLASS_COMBOBOXSTYLE = "COMBOBOXSTYLE"
Public Const VSCLASS_COMBOBOX = "COMBOBOX"

Public Enum COMBOBOXPARTS
	CP_DROPDOWNBUTTON = 1
	CP_BACKGROUND = 2
	CP_TRANSPARENTBACKGROUND = 3
	CP_BORDER = 4
	CP_READONLY = 5
	CP_DROPDOWNBUTTONRIGHT = 6
	CP_DROPDOWNBUTTONLEFT = 7
	CP_CUEBANNER = 8
	CP_DROPDOWNITEM = 9
End Enum

Public Enum COMBOBOXSTYLESTATES
	CBXS_NORMAL = 1
	CBXS_HOT = 2
	CBXS_PRESSED = 3
	CBXS_DISABLED = 4
End Enum

Public Enum DROPDOWNBUTTONRIGHTSTATES
	CBXSR_NORMAL = 1
	CBXSR_HOT = 2
	CBXSR_PRESSED = 3
	CBXSR_DISABLED = 4
End Enum

Public Enum DROPDOWNBUTTONLEFTSTATES
	CBXSL_NORMAL = 1
	CBXSL_HOT = 2
	CBXSL_PRESSED = 3
	CBXSL_DISABLED = 4
End Enum

Public Enum TRANSPARENTBACKGROUNDSTATES
	CBTBS_NORMAL = 1
	CBTBS_HOT = 2
	CBTBS_DISABLED = 3
	CBTBS_FOCUSED = 4
End Enum

Public Enum BORDERSTATES
	CBB_NORMAL = 1
	CBB_HOT = 2
	CBB_FOCUSED = 3
	CBB_DISABLED = 4
End Enum

Public Enum READONLYSTATES
	CBRO_NORMAL = 1
	CBRO_HOT = 2
	CBRO_PRESSED = 3
	CBRO_DISABLED = 4
End Enum

Public Enum CUEBANNERSTATES
	CBCB_NORMAL = 1
	CBCB_HOT = 2
	CBCB_PRESSED = 3
	CBCB_DISABLED = 4
End Enum

Public Enum DROPDOWNITEMSTATES
	CBDI_NORMAL = 1
	CBDI_HIGHLIGHTED = 2
End Enum

Public Const VSCLASS_COMMUNICATIONSSTYLE = "COMMUNICATIONSSTYLE"
Public Const VSCLASS_COMMUNICATIONS = "COMMUNICATIONS"

Public Enum COMMUNICATIONSPARTS
	CSST_TAB = 1
End Enum

Public Enum TABSTATES
	CSTB_NORMAL = 1
	CSTB_HOT = 2
	CSTB_SELECTED = 3
End Enum

Public Const VSCLASS_CONTROLPANELSTYLE = "CONTROLPANELSTYLE"
Public Const VSCLASS_CONTROLPANEL = "CONTROLPANEL"

Public Enum CONTROLPANELPARTS
	CPANEL_NAVIGATIONPANE = 1
	CPANEL_CONTENTPANE = 2
	CPANEL_NAVIGATIONPANELABEL = 3
	CPANEL_CONTENTPANELABEL = 4
	CPANEL_TITLE = 5
	CPANEL_BODYTEXT = 6
	CPANEL_HELPLINK = 7
	CPANEL_TASKLINK = 8
	CPANEL_GROUPTEXT = 9
	CPANEL_CONTENTLINK = 10
	CPANEL_SECTIONTITLELINK = 11
	CPANEL_LARGECOMMANDAREA = 12
	CPANEL_SMALLCOMMANDAREA = 13
	CPANEL_BUTTON = 14
	CPANEL_MESSAGETEXT = 15
	CPANEL_NAVIGATIONPANELINE = 16
	CPANEL_CONTENTPANELINE = 17
	CPANEL_BANNERAREA = 18
	CPANEL_BODYTITLE = 19
End Enum

Public Enum HELPLINKSTATES
	CPHL_NORMAL = 1
	CPHL_HOT = 2
	CPHL_PRESSED = 3
	CPHL_DISABLED = 4
End Enum

Public Enum TASKLINKSTATES
	CPTL_NORMAL = 1
	CPTL_HOT = 2
	CPTL_PRESSED = 3
	CPTL_DISABLED = 4
	CPTL_PAGE = 5
End Enum

Public Enum CONTENTLINKSTATES
	CPCL_NORMAL = 1
	CPCL_HOT = 2
	CPCL_PRESSED = 3
	CPCL_DISABLED = 4
End Enum

Public Enum SECTIONTITLELINKSTATES
	CPSTL_NORMAL = 1
	CPSTL_HOT = 2
End Enum

Public Const VSCLASS_DATEPICKERSTYLE = "DATEPICKERSTYLE"
Public Const VSCLASS_DATEPICKER = "DATEPICKER"

Public Enum DATEPICKERPARTS
	DP_DATETEXT = 1
	DP_DATEBORDER = 2
	DP_SHOWCALENDARBUTTONRIGHT = 3
End Enum

Public Enum DATETEXTSTATES
	DPDT_NORMAL = 1
	DPDT_DISABLED = 2
	DPDT_SELECTED = 3
End Enum

Public Enum DATEBORDERSTATES
	DPDB_NORMAL = 1
	DPDB_HOT = 2
	DPDB_FOCUSED = 3
	DPDB_DISABLED = 4
End Enum

Public Enum SHOWCALENDARBUTTONRIGHTSTATES
	DPSCBR_NORMAL = 1
	DPSCBR_HOT = 2
	DPSCBR_PRESSED = 3
	DPSCBR_DISABLED = 4
End Enum

Public Const VSCLASS_DRAGDROPSTYLE = "DRAGDROPSTYLE"
Public Const VSCLASS_DRAGDROP = "DRAGDROP"

Public Enum DRAGDROPPARTS
	DD_COPY = 1
	DD_MOVE = 2
	DD_UPDATEMETADATA = 3
	DD_CREATELINK = 4
	DD_WARNING = 5
	DD_NONE = 6
	DD_IMAGEBG = 7
	DD_TEXTBG = 8
End Enum

Public Enum COPYSTATES
	DDCOPY_HIGHLIGHT = 1
	DDCOPY_NOHIGHLIGHT = 2
End Enum

Public Enum MOVESTATES
	DDMOVE_HIGHLIGHT = 1
	DDMOVE_NOHIGHLIGHT = 2
End Enum

Public Enum UPDATEMETADATASTATES
	DDUPDATEMETADATA_HIGHLIGHT = 1
	DDUPDATEMETADATA_NOHIGHLIGHT = 2
End Enum

Public Enum CREATELINKSTATES
	DDCREATELINK_HIGHLIGHT = 1
	DDCREATELINK_NOHIGHLIGHT = 2
End Enum

Public Enum WARNINGSTATES
	DDWARNING_HIGHLIGHT = 1
	DDWARNING_NOHIGHLIGHT = 2
End Enum

Public Enum NONESTATES
	DDNONE_HIGHLIGHT = 1
	DDNONE_NOHIGHLIGHT = 2
End Enum

Public Const VSCLASS_EDITSTYLE = "EDITSTYLE"
Public Const VSCLASS_EDIT = "EDIT"

Public Enum EDITPARTS
	EP_EDITTEXT = 1
	EP_CARET = 2
	EP_BACKGROUND = 3
	EP_PASSWORD = 4
	EP_BACKGROUNDWITHBORDER = 5
	EP_EDITBORDER_NOSCROLL = 6
	EP_EDITBORDER_HSCROLL = 7
	EP_EDITBORDER_VSCROLL = 8
	EP_EDITBORDER_HVSCROLL = 9
End Enum

Public Enum EDITTEXTSTATES
	ETS_NORMAL = 1
	ETS_HOT = 2
	ETS_SELECTED = 3
	ETS_DISABLED = 4
	ETS_FOCUSED = 5
	ETS_READONLY = 6
	ETS_ASSIST = 7
	ETS_CUEBANNER = 8
End Enum

Public Enum BACKGROUNDSTATES
	EBS_NORMAL = 1
	EBS_HOT = 2
	EBS_DISABLED = 3
	EBS_FOCUSED = 4
	EBS_READONLY = 5
	EBS_ASSIST = 6
End Enum

Public Enum BACKGROUNDWITHBORDERSTATES
	EBWBS_NORMAL = 1
	EBWBS_HOT = 2
	EBWBS_DISABLED = 3
	EBWBS_FOCUSED = 4
End Enum

Public Enum EDITBORDER_NOSCROLLSTATES
	EPSN_NORMAL = 1
	EPSN_HOT = 2
	EPSN_FOCUSED = 3
	EPSN_DISABLED = 4
End Enum

Public Enum EDITBORDER_HSCROLLSTATES
	EPSH_NORMAL = 1
	EPSH_HOT = 2
	EPSH_FOCUSED = 3
	EPSH_DISABLED = 4
End Enum

Public Enum EDITBORDER_VSCROLLSTATES
	EPSV_NORMAL = 1
	EPSV_HOT = 2
	EPSV_FOCUSED = 3
	EPSV_DISABLED = 4
End Enum

Public Enum EDITBORDER_HVSCROLLSTATES
	EPSHV_NORMAL = 1
	EPSHV_HOT = 2
	EPSHV_FOCUSED = 3
	EPSHV_DISABLED = 4
End Enum

Public Const VSCLASS_EXPLORERBARSTYLE = "EXPLORERBARSTYLE"
Public Const VSCLASS_EXPLORERBAR = "EXPLORERBAR"

Public Enum EXPLORERBARPARTS
	EBP_HEADERBACKGROUND = 1
	EBP_HEADERCLOSE = 2
	EBP_HEADERPIN = 3
	EBP_IEBARMENU = 4
	EBP_NORMALGROUPBACKGROUND = 5
	EBP_NORMALGROUPCOLLAPSE = 6
	EBP_NORMALGROUPEXPAND = 7
	EBP_NORMALGROUPHEAD = 8
	EBP_SPECIALGROUPBACKGROUND = 9
	EBP_SPECIALGROUPCOLLAPSE = 10
	EBP_SPECIALGROUPEXPAND = 11
	EBP_SPECIALGROUPHEAD = 12
End Enum

Public Enum HEADERCLOSESTATES
	EBHC_NORMAL = 1
	EBHC_HOT = 2
	EBHC_PRESSED = 3
End Enum

Public Enum HEADERPINSTATES
	EBHP_NORMAL = 1
	EBHP_HOT = 2
	EBHP_PRESSED = 3
	EBHP_SELECTEDNORMAL = 4
	EBHP_SELECTEDHOT = 5
	EBHP_SELECTEDPRESSED = 6
End Enum

Public Enum IEBARMENUSTATES
	EBM_NORMAL = 1
	EBM_HOT = 2
	EBM_PRESSED = 3
End Enum

Public Enum NORMALGROUPCOLLAPSESTATES
	EBNGC_NORMAL = 1
	EBNGC_HOT = 2
	EBNGC_PRESSED = 3
End Enum

Public Enum NORMALGROUPEXPANDSTATES
	EBNGE_NORMAL = 1
	EBNGE_HOT = 2
	EBNGE_PRESSED = 3
End Enum

Public Enum SPECIALGROUPCOLLAPSESTATES
	EBSGC_NORMAL = 1
	EBSGC_HOT = 2
	EBSGC_PRESSED = 3
End Enum

Public Enum SPECIALGROUPEXPANDSTATES
	EBSGE_NORMAL = 1
	EBSGE_HOT = 2
	EBSGE_PRESSED = 3
End Enum

Public Const VSCLASS_FLYOUTSTYLE = "FLYOUTSTYLE"
Public Const VSCLASS_FLYOUT = "FLYOUT"

Public Enum FLYOUTPARTS
	FLYOUT_HEADER = 1
	FLYOUT_BODY = 2
	FLYOUT_LABEL = 3
	FLYOUT_LINK = 4
	FLYOUT_DIVIDER = 5
	FLYOUT_WINDOW = 6
	FLYOUT_LINKAREA = 7
	FLYOUT_LINKHEADER = 8
End Enum

Public Enum LABELSTATES
	FLS_NORMAL = 1
	FLS_SELECTED = 2
	FLS_EMPHASIZED = 3
	FLS_DISABLED = 4
End Enum

Public Enum LINKSTATES
	FLYOUTLINK_NORMAL = 1
	FLYOUTLINK_HOVER = 2
End Enum

Public Enum BODYSTATES
	FBS_NORMAL = 1
	FBS_EMPHASIZED = 2
End Enum

Public Enum LINKHEADERSTATES
	FLH_NORMAL = 1
	FLH_HOVER = 2
End Enum

Public Const VSCLASS_HEADERSTYLE = "HEADERSTYLE"
Public Const VSCLASS_HEADER = "HEADER"

Public Enum HEADERPARTS
	HP_HEADERITEM = 1
	HP_HEADERITEMLEFT = 2
	HP_HEADERITEMRIGHT = 3
	HP_HEADERSORTARROW = 4
	HP_HEADERDROPDOWN = 5
	HP_HEADERDROPDOWNFILTER = 6
	HP_HEADEROVERFLOW = 7
End Enum

Public Enum HEADERSTYLESTATES
	HBG_DETAILS = 1
	HBG_ICON = 2
End Enum

Public Enum HEADERITEMSTATES
	HIS_NORMAL = 1
	HIS_HOT = 2
	HIS_PRESSED = 3
	HIS_SORTEDNORMAL = 4
	HIS_SORTEDHOT = 5
	HIS_SORTEDPRESSED = 6
	HIS_ICONNORMAL = 7
	HIS_ICONHOT = 8
	HIS_ICONPRESSED = 9
	HIS_ICONSORTEDNORMAL = 10
	HIS_ICONSORTEDHOT = 11
	HIS_ICONSORTEDPRESSED = 12
End Enum

Public Enum HEADERITEMLEFTSTATES
	HILS_NORMAL = 1
	HILS_HOT = 2
	HILS_PRESSED = 3
End Enum

Public Enum HEADERITEMRIGHTSTATES
	HIRS_NORMAL = 1
	HIRS_HOT = 2
	HIRS_PRESSED = 3
End Enum

Public Enum HEADERSORTARROWSTATES
	HSAS_SORTEDUP = 1
	HSAS_SORTEDDOWN = 2
End Enum

Public Enum HEADERDROPDOWNSTATES
	HDDS_NORMAL = 1
	HDDS_SOFTHOT = 2
	HDDS_HOT = 3
End Enum

Public Enum HEADERDROPDOWNFILTERSTATES
	HDDFS_NORMAL = 1
	HDDFS_SOFTHOT = 2
	HDDFS_HOT = 3
End Enum

Public Enum HEADEROVERFLOWSTATES
	HOFS_NORMAL = 1
	HOFS_HOT = 2
End Enum

Public Const VSCLASS_LISTBOXSTYLE = "LISTBOXSTYLE"
Public Const VSCLASS_LISTBOX = "LISTBOX"

Public Enum LISTBOXPARTS
	LBCP_BORDER_HSCROLL = 1
	LBCP_BORDER_HVSCROLL = 2
	LBCP_BORDER_NOSCROLL = 3
	LBCP_BORDER_VSCROLL = 4
	LBCP_ITEM = 5
End Enum

Public Enum BORDER_HSCROLLSTATES
	LBPSH_NORMAL = 1
	LBPSH_FOCUSED = 2
	LBPSH_HOT = 3
	LBPSH_DISABLED = 4
End Enum

Public Enum BORDER_HVSCROLLSTATES
	LBPSHV_NORMAL = 1
	LBPSHV_FOCUSED = 2
	LBPSHV_HOT = 3
	LBPSHV_DISABLED = 4
End Enum

Public Enum BORDER_NOSCROLLSTATES
	LBPSN_NORMAL = 1
	LBPSN_FOCUSED = 2
	LBPSN_HOT = 3
	LBPSN_DISABLED = 4
End Enum

Public Enum BORDER_VSCROLLSTATES
	LBPSV_NORMAL = 1
	LBPSV_FOCUSED = 2
	LBPSV_HOT = 3
	LBPSV_DISABLED = 4
End Enum

Public Enum ITEMSTATES
	LBPSI_HOT = 1
	LBPSI_HOTSELECTED = 2
	LBPSI_SELECTED = 3
	LBPSI_SELECTEDNOTFOCUS = 4
End Enum

Public Const VSCLASS_LISTVIEWSTYLE = "LISTVIEWSTYLE"
Public Const VSCLASS_LISTVIEW = "LISTVIEW"

Public Enum LISTVIEWPARTS
	LVP_LISTITEM = 1
	LVP_LISTGROUP = 2
	LVP_LISTDETAIL = 3
	LVP_LISTSORTEDDETAIL = 4
	LVP_EMPTYTEXT = 5
	LVP_GROUPHEADER = 6
	LVP_GROUPHEADERLINE = 7
	LVP_EXPANDBUTTON = 8
	LVP_COLLAPSEBUTTON = 9
	LVP_COLUMNDETAIL = 10
End Enum

Public Enum LISTITEMSTATES
	LISS_NORMAL = 1
	LISS_HOT = 2
	LISS_SELECTED = 3
	LISS_DISABLED = 4
	LISS_SELECTEDNOTFOCUS = 5
	LISS_HOTSELECTED = 6
End Enum

Public Enum GROUPHEADERSTATES
	LVGH_OPEN = 1
	LVGH_OPENHOT = 2
	LVGH_OPENSELECTED = 3
	LVGH_OPENSELECTEDHOT = 4
	LVGH_OPENSELECTEDNOTFOCUSED = 5
	LVGH_OPENSELECTEDNOTFOCUSEDHOT = 6
	LVGH_OPENMIXEDSELECTION = 7
	LVGH_OPENMIXEDSELECTIONHOT = 8
	LVGH_CLOSE = 9
	LVGH_CLOSEHOT = 10
	LVGH_CLOSESELECTED = 11
	LVGH_CLOSESELECTEDHOT = 12
	LVGH_CLOSESELECTEDNOTFOCUSED = 13
	LVGH_CLOSESELECTEDNOTFOCUSEDHOT = 14
	LVGH_CLOSEMIXEDSELECTION = 15
	LVGH_CLOSEMIXEDSELECTIONHOT = 16
End Enum

Public Enum GROUPHEADERLINESTATES
	LVGHL_OPEN = 1
	LVGHL_OPENHOT = 2
	LVGHL_OPENSELECTED = 3
	LVGHL_OPENSELECTEDHOT = 4
	LVGHL_OPENSELECTEDNOTFOCUSED = 5
	LVGHL_OPENSELECTEDNOTFOCUSEDHOT = 6
	LVGHL_OPENMIXEDSELECTION = 7
	LVGHL_OPENMIXEDSELECTIONHOT = 8
	LVGHL_CLOSE = 9
	LVGHL_CLOSEHOT = 10
	LVGHL_CLOSESELECTED = 11
	LVGHL_CLOSESELECTEDHOT = 12
	LVGHL_CLOSESELECTEDNOTFOCUSED = 13
	LVGHL_CLOSESELECTEDNOTFOCUSEDHOT = 14
	LVGHL_CLOSEMIXEDSELECTION = 15
	LVGHL_CLOSEMIXEDSELECTIONHOT = 16
End Enum

Public Enum EXPANDBUTTONSTATES
	LVEB_NORMAL = 1
	LVEB_HOVER = 2
	LVEB_PUSHED = 3
End Enum

Public Enum COLLAPSEBUTTONSTATES
	LVCB_NORMAL = 1
	LVCB_HOVER = 2
	LVCB_PUSHED = 3
End Enum

Public Const VSCLASS_MENUSTYLE = "MENUSTYLE"
Public Const VSCLASS_MENU = "MENU"

Public Enum MENUPARTS
	MENU_MENUITEM_TMSCHEMA = 1
	MENU_MENUDROPDOWN_TMSCHEMA = 2
	MENU_MENUBARITEM_TMSCHEMA = 3
	MENU_MENUBARDROPDOWN_TMSCHEMA = 4
	MENU_CHEVRON_TMSCHEMA = 5
	MENU_SEPARATOR_TMSCHEMA = 6
	MENU_BARBACKGROUND = 7
	MENU_BARITEM = 8
	MENU_POPUPBACKGROUND = 9
	MENU_POPUPBORDERS = 10
	MENU_POPUPCHECK = 11
	MENU_POPUPCHECKBACKGROUND = 12
	MENU_POPUPGUTTER = 13
	MENU_POPUPITEM = 14
	MENU_POPUPSEPARATOR = 15
	MENU_POPUPSUBMENU = 16
	MENU_SYSTEMCLOSE = 17
	MENU_SYSTEMMAXIMIZE = 18
	MENU_SYSTEMMINIMIZE = 19
	MENU_SYSTEMRESTORE = 20
	MENU_POPUPSUBMENU_HCHOT = 21
	MENU_SYSTEMCLOSE_HCHOT = 22
	MENU_SYSTEMMAXIMIZE_HCHOT = 23
	MENU_SYSTEMMINIMIZE_HCHOT = 24
	MENU_SYSTEMRESTORE_HCHOT = 25
	MENU_POPUPITEMKBFOCUS = 26
	MENU_POPUPITEM_FOCUSABLE = 27
End Enum

Public Enum BARBACKGROUNDSTATES
	MB_ACTIVE = 1
	MB_INACTIVE = 2
End Enum

Public Enum BARITEMSTATES
	MBI_NORMAL = 1
	MBI_HOT = 2
	MBI_PUSHED = 3
	MBI_DISABLED = 4
	MBI_DISABLEDHOT = 5
	MBI_DISABLEDPUSHED = 6
End Enum

Public Enum POPUPCHECKSTATES
	MC_CHECKMARKNORMAL = 1
	MC_CHECKMARKDISABLED = 2
	MC_BULLETNORMAL = 3
	MC_BULLETDISABLED = 4
End Enum

Public Enum POPUPCHECKBACKGROUNDSTATES
	MCB_DISABLED = 1
	MCB_NORMAL = 2
	MCB_BITMAP = 3
End Enum

Public Enum POPUPITEMSTATES
	MPI_NORMAL = 1
	MPI_HOT = 2
	MPI_DISABLED = 3
	MPI_DISABLEDHOT = 4
End Enum

Public Enum POPUPSUBMENUSTATES
	MSM_NORMAL = 1
	MSM_DISABLED = 2
End Enum

Public Enum SYSTEMCLOSESTATES
	MSYSC_NORMAL = 1
	MSYSC_DISABLED = 2
End Enum

Public Enum SYSTEMMAXIMIZESTATES
	MSYSMX_NORMAL = 1
	MSYSMX_DISABLED = 2
End Enum

Public Enum SYSTEMMINIMIZESTATES
	MSYSMN_NORMAL = 1
	MSYSMN_DISABLED = 2
End Enum

Public Enum SYSTEMRESTORESTATES
	MSYSR_NORMAL = 1
	MSYSR_DISABLED = 2
End Enum

Public Enum MENU_POPUPSUBMENU_HCHOT
	MSMHC_HOT = 1
End Enum

Public Enum SYSTEMCLOSEHCHOTSTATES
	MSYSCHC_HOT = 1
End Enum

Public Enum SYSTEMMAXIMIZEHCHOTSTATES
	MSYSMXHC_HOT = 1
End Enum

Public Enum SYSTEMMINIMIZEHCHOTSTATES
	MSYSMNHC_HOT = 1
End Enum

Public Enum SYSTEMRESTOREHCHOTSTATES
	MSYSRHC_HOT = 1
End Enum

Public Enum POPUPITEMKBFOCUSSTATES
	MPIKBFOCUS_NORMAL = 1
End Enum

Public Enum POPUPITEMFOCUSABLESTATES
	MPIF_NORMAL = 1
	MPIF_HOT = 2
	MPIF_DISABLED = 3
	MPIF_DISABLEDHOT = 4
End Enum

Public Const VSCLASS_NAVIGATION = "NAVIGATION"

Public Enum NAVIGATIONPARTS
	NAV_BACKBUTTON = 1
	NAV_FORWARDBUTTON = 2
	NAV_MENUBUTTON = 3
End Enum

Public Enum NAV_BACKBUTTONSTATES
	NAV_BB_NORMAL = 1
	NAV_BB_HOT = 2
	NAV_BB_PRESSED = 3
	NAV_BB_DISABLED = 4
End Enum

Public Enum NAV_FORWARDBUTTONSTATES
	NAV_FB_NORMAL = 1
	NAV_FB_HOT = 2
	NAV_FB_PRESSED = 3
	NAV_FB_DISABLED = 4
End Enum

Public Enum NAV_MENUBUTTONSTATES
	NAV_MB_NORMAL = 1
	NAV_MB_HOT = 2
	NAV_MB_PRESSED = 3
	NAV_MB_DISABLED = 4
End Enum

Public Const VSCLASS_PROGRESSSTYLE = "PROGRESSSTYLE"
Public Const VSCLASS_PROGRESS = "PROGRESS"

Public Enum PROGRESSPARTS
	PP_BAR = 1
	PP_BARVERT = 2
	PP_CHUNK = 3
	PP_CHUNKVERT = 4
	PP_FILL = 5
	PP_FILLVERT = 6
	PP_PULSEOVERLAY = 7
	PP_MOVEOVERLAY = 8
	PP_PULSEOVERLAYVERT = 9
	PP_MOVEOVERLAYVERT = 10
	PP_TRANSPARENTBAR = 11
	PP_TRANSPARENTBARVERT = 12
End Enum

Public Enum TRANSPARENTBARSTATES
	PBBS_NORMAL = 1
	PBBS_PARTIAL = 2
End Enum

Public Enum TRANSPARENTBARVERTSTATES
	PBBVS_NORMAL = 1
	PBBVS_PARTIAL = 2
End Enum

Public Enum FILLSTATES
	PBFS_NORMAL = 1
	PBFS_ERROR = 2
	PBFS_PAUSED = 3
	PBFS_PARTIAL = 4
End Enum

Public Enum FILLVERTSTATES
	PBFVS_NORMAL = 1
	PBFVS_ERROR = 2
	PBFVS_PAUSED = 3
	PBFVS_PARTIAL = 4
End Enum

Public Const VSCLASS_REBARSTYLE = "REBARSTYLE"
Public Const VSCLASS_REBAR = "REBAR"

Public Enum REBARPARTS
	RP_GRIPPER = 1
	RP_GRIPPERVERT = 2
	RP_BAND = 3
	RP_CHEVRON = 4
	RP_CHEVRONVERT = 5
	RP_BACKGROUND = 6
	RP_SPLITTER = 7
	RP_SPLITTERVERT = 8
End Enum

Public Enum CHEVRONSTATES
	CHEVS_NORMAL = 1
	CHEVS_HOT = 2
	CHEVS_PRESSED = 3
End Enum

Public Enum CHEVRONVERTSTATES
	CHEVSV_NORMAL = 1
	CHEVSV_HOT = 2
	CHEVSV_PRESSED = 3
End Enum

Public Enum SPLITTERSTATES
	SPLITS_NORMAL = 1
	SPLITS_HOT = 2
	SPLITS_PRESSED = 3
End Enum

Public Enum SPLITTERVERTSTATES
	SPLITSV_NORMAL = 1
	SPLITSV_HOT = 2
	SPLITSV_PRESSED = 3
End Enum

Public Const VSCLASS_SCROLLBARSTYLE = "SCROLLBARSTYLE"
Public Const VSCLASS_SCROLLBAR = "SCROLLBAR"

Public Enum SCROLLBARPARTS
	SBP_ARROWBTN = 1
	SBP_THUMBBTNHORZ = 2
	SBP_THUMBBTNVERT = 3
	SBP_LOWERTRACKHORZ = 4
	SBP_UPPERTRACKHORZ = 5
	SBP_LOWERTRACKVERT = 6
	SBP_UPPERTRACKVERT = 7
	SBP_GRIPPERHORZ = 8
	SBP_GRIPPERVERT = 9
	SBP_SIZEBOX = 10
	SBP_SIZEBOXBKGND = 11
End Enum

Public Enum ARROWBTNSTATES
	ABS_UPNORMAL = 1
	ABS_UPHOT = 2
	ABS_UPPRESSED = 3
	ABS_UPDISABLED = 4
	ABS_DOWNNORMAL = 5
	ABS_DOWNHOT = 6
	ABS_DOWNPRESSED = 7
	ABS_DOWNDISABLED = 8
	ABS_LEFTNORMAL = 9
	ABS_LEFTHOT = 10
	ABS_LEFTPRESSED = 11
	ABS_LEFTDISABLED = 12
	ABS_RIGHTNORMAL = 13
	ABS_RIGHTHOT = 14
	ABS_RIGHTPRESSED = 15
	ABS_RIGHTDISABLED = 16
	ABS_UPHOVER = 17
	ABS_DOWNHOVER = 18
	ABS_LEFTHOVER = 19
	ABS_RIGHTHOVER = 20
End Enum

Public Enum SCROLLBARSTYLESTATES
	SCRBS_NORMAL = 1
	SCRBS_HOT = 2
	SCRBS_PRESSED = 3
	SCRBS_DISABLED = 4
	SCRBS_HOVER = 5
End Enum

Public Enum SIZEBOXSTATES
	SZB_RIGHTALIGN = 1
	SZB_LEFTALIGN = 2
	SZB_TOPRIGHTALIGN = 3
	SZB_TOPLEFTALIGN = 4
	SZB_HALFBOTTOMRIGHTALIGN = 5
	SZB_HALFBOTTOMLEFTALIGN = 6
	SZB_HALFTOPRIGHTALIGN = 7
	SZB_HALFTOPLEFTALIGN = 8
End Enum

Public Const VSCLASS_SPINSTYLE = "SPINSTYLE"
Public Const VSCLASS_SPIN = "SPIN"

Public Enum SPINPARTS
	SPNP_UP = 1
	SPNP_DOWN = 2
	SPNP_UPHORZ = 3
	SPNP_DOWNHORZ = 4
End Enum

Public Enum UPSTATES
	UPS_NORMAL = 1
	UPS_HOT = 2
	UPS_PRESSED = 3
	UPS_DISABLED = 4
End Enum

Public Enum DOWNSTATES
	DNS_NORMAL = 1
	DNS_HOT = 2
	DNS_PRESSED = 3
	DNS_DISABLED = 4
End Enum

Public Enum UPHORZSTATES
	UPHZS_NORMAL = 1
	UPHZS_HOT = 2
	UPHZS_PRESSED = 3
	UPHZS_DISABLED = 4
End Enum

Public Enum DOWNHORZSTATES
	DNHZS_NORMAL = 1
	DNHZS_HOT = 2
	DNHZS_PRESSED = 3
	DNHZS_DISABLED = 4
End Enum

Public Const VSCLASS_STATUSSTYLE = "STATUSSTYLE"
Public Const VSCLASS_STATUS = "STATUS"

Public Enum STATUSPARTS
	SP_PANE = 1
	SP_GRIPPERPANE = 2
	SP_GRIPPER = 3
End Enum

Public Const VSCLASS_TABSTYLE = "TABSTYLE"
Public Const VSCLASS_TAB = "TAB"

Public Enum TABPARTS
	TABP_TABITEM = 1
	TABP_TABITEMLEFTEDGE = 2
	TABP_TABITEMRIGHTEDGE = 3
	TABP_TABITEMBOTHEDGE = 4
	TABP_TOPTABITEM = 5
	TABP_TOPTABITEMLEFTEDGE = 6
	TABP_TOPTABITEMRIGHTEDGE = 7
	TABP_TOPTABITEMBOTHEDGE = 8
	TABP_PANE = 9
	TABP_BODY = 10
	TABP_AEROWIZARDBODY = 11
End Enum

Public Enum TABITEMSTATES
	TIS_NORMAL = 1
	TIS_HOT = 2
	TIS_SELECTED = 3
	TIS_DISABLED = 4
	TIS_FOCUSED = 5
End Enum

Public Enum TABITEMLEFTEDGESTATES
	TILES_NORMAL = 1
	TILES_HOT = 2
	TILES_SELECTED = 3
	TILES_DISABLED = 4
	TILES_FOCUSED = 5
End Enum

Public Enum TABITEMRIGHTEDGESTATES
	TIRES_NORMAL = 1
	TIRES_HOT = 2
	TIRES_SELECTED = 3
	TIRES_DISABLED = 4
	TIRES_FOCUSED = 5
End Enum

Public Enum TABITEMBOTHEDGESTATES
	TIBES_NORMAL = 1
	TIBES_HOT = 2
	TIBES_SELECTED = 3
	TIBES_DISABLED = 4
	TIBES_FOCUSED = 5
End Enum

Public Enum TOPTABITEMSTATES
	TTIS_NORMAL = 1
	TTIS_HOT = 2
	TTIS_SELECTED = 3
	TTIS_DISABLED = 4
	TTIS_FOCUSED = 5
End Enum

Public Enum TOPTABITEMLEFTEDGESTATES
	TTILES_NORMAL = 1
	TTILES_HOT = 2
	TTILES_SELECTED = 3
	TTILES_DISABLED = 4
	TTILES_FOCUSED = 5
End Enum

Public Enum TOPTABITEMRIGHTEDGESTATES
	TTIRES_NORMAL = 1
	TTIRES_HOT = 2
	TTIRES_SELECTED = 3
	TTIRES_DISABLED = 4
	TTIRES_FOCUSED = 5
End Enum

Public Enum TOPTABITEMBOTHEDGESTATES
	TTIBES_NORMAL = 1
	TTIBES_HOT = 2
	TTIBES_SELECTED = 3
	TTIBES_DISABLED = 4
	TTIBES_FOCUSED = 5
End Enum

Public Const VSCLASS_TASKDIALOGSTYLE = "TASKDIALOGSTYLE"
Public Const VSCLASS_TASKDIALOG = "TASKDIALOG"

Public Enum TASKDIALOGPARTS
	TDLG_PRIMARYPANEL = 1
	TDLG_MAININSTRUCTIONPANE = 2
	TDLG_MAINICON = 3
	TDLG_CONTENTPANE = 4
	TDLG_CONTENTICON = 5
	TDLG_EXPANDEDCONTENT = 6
	TDLG_COMMANDLINKPANE = 7
	TDLG_SECONDARYPANEL = 8
	TDLG_CONTROLPANE = 9
	TDLG_BUTTONSECTION = 10
	TDLG_BUTTONWRAPPER = 11
	TDLG_EXPANDOTEXT = 12
	TDLG_EXPANDOBUTTON = 13
	TDLG_VERIFICATIONTEXT = 14
	TDLG_FOOTNOTEPANE = 15
	TDLG_FOOTNOTEAREA = 16
	TDLG_FOOTNOTESEPARATOR = 17
	TDLG_EXPANDEDFOOTERAREA = 18
	TDLG_PROGRESSBAR = 19
	TDLG_IMAGEALIGNMENT = 20
	TDLG_RADIOBUTTONPANE = 21
End Enum

Public Enum CONTENTPANESTATES
	TDLGCPS_STANDALONE = 1
End Enum

Public Enum EXPANDOBUTTONSTATES
	TDLGEBS_NORMAL = 1
	TDLGEBS_HOVER = 2
	TDLGEBS_PRESSED = 3
	TDLGEBS_EXPANDEDNORMAL = 4
	TDLGEBS_EXPANDEDHOVER = 5
	TDLGEBS_EXPANDEDPRESSED = 6
	TDLGEBS_NORMALDISABLED = 7
	TDLGEBS_EXPANDEDDISABLED = 8
End Enum

Public Const VSCLASS_TEXTSTYLE = "TEXTSTYLE"

Public Enum TEXTSTYLEPARTS
	TEXT_MAININSTRUCTION = 1
	TEXT_INSTRUCTION = 2
	TEXT_BODYTITLE = 3
	TEXT_BODYTEXT = 4
	TEXT_SECONDARYTEXT = 5
	TEXT_HYPERLINKTEXT = 6
	TEXT_EXPANDED = 7
	TEXT_LABEL = 8
	TEXT_CONTROLLABEL = 9
End Enum

Public Enum HYPERLINKTEXTSTATES
	TS_HYPERLINK_NORMAL = 1
	TS_HYPERLINK_HOT = 2
	TS_HYPERLINK_PRESSED = 3
	TS_HYPERLINK_DISABLED = 4
End Enum

Public Enum CONTROLLABELSTATES
	TS_CONTROLLABEL_NORMAL = 1
	TS_CONTROLLABEL_DISABLED = 2
End Enum

Public Const VSCLASS_TOOLBARSTYLE = "TOOLBARSTYLE"
Public Const VSCLASS_TOOLBAR  = "TOOLBAR"

Public Enum TOOLBARPARTS
	TP_BUTTON = 1
	TP_DROPDOWNBUTTON = 2
	TP_SPLITBUTTON = 3
	TP_SPLITBUTTONDROPDOWN = 4
	TP_SEPARATOR = 5
	TP_SEPARATORVERT = 6
	TP_DROPDOWNBUTTONGLYPH = 7
End Enum

Public Enum TOOLBARSTYLESTATES
	TS_NORMAL = 1
	TS_HOT = 2
	TS_PRESSED = 3
	TS_DISABLED = 4
	TS_CHECKED = 5
	TS_HOTCHECKED = 6
	TS_NEARHOT = 7
	TS_OTHERSIDEHOT = 8
End Enum

Public Const VSCLASS_TOOLTIPSTYLE = "TOOLTIPSTYLE"
Public Const VSCLASS_TOOLTIP = "TOOLTIP"

Public Enum TOOLTIPPARTS
	TTP_STANDARD = 1
	TTP_STANDARDTITLE = 2
	TTP_BALLOON = 3
	TTP_BALLOONTITLE = 4
	TTP_CLOSE = 5
	TTP_BALLOONSTEM = 6
	TTP_WRENCH = 7
End Enum

Public Enum CLOSESTATES
	TTCS_NORMAL = 1
	TTCS_HOT = 2
	TTCS_PRESSED = 3
End Enum

Public Enum STANDARDSTATES
	TTSS_NORMAL = 1
	TTSS_LINK = 2
End Enum

Public Enum BALLOONSTATES
	TTBS_NORMAL = 1
	TTBS_LINK = 2
End Enum

Public Enum BALLOONSTEMSTATES
	TTBSS_POINTINGUPLEFTWALL = 1
	TTBSS_POINTINGUPCENTERED = 2
	TTBSS_POINTINGUPRIGHTWALL = 3
	TTBSS_POINTINGDOWNRIGHTWALL = 4
	TTBSS_POINTINGDOWNCENTERED = 5
	TTBSS_POINTINGDOWNLEFTWALL = 6
End Enum

Public Enum WRENCHSTATES
	TTWS_NORMAL = 1
	TTWS_HOT = 2
	TTWS_PRESSED = 3
End Enum

Public Const VSCLASS_TRACKBARSTYLE = "TRACKBARSTYLE"
Public Const VSCLASS_TRACKBAR = "TRACKBAR"

Public Enum TRACKBARPARTS
	TKP_TRACK = 1
	TKP_TRACKVERT = 2
	TKP_THUMB = 3
	TKP_THUMBBOTTOM = 4
	TKP_THUMBTOP = 5
	TKP_THUMBVERT = 6
	TKP_THUMBLEFT = 7
	TKP_THUMBRIGHT = 8
	TKP_TICS = 9
	TKP_TICSVERT = 10
End Enum

Public Enum TRACKBARSTYLESTATES
	TKS_NORMAL = 1
End Enum

Public Enum TRACKSTATES
	TRS_NORMAL = 1
End Enum

Public Enum TRACKVERTSTATES
	TRVS_NORMAL = 1
End Enum

Public Enum THUMBSTATES
	TUS_NORMAL = 1
	TUS_HOT = 2
	TUS_PRESSED = 3
	TUS_FOCUSED = 4
	TUS_DISABLED = 5
End Enum

Public Enum THUMBBOTTOMSTATES
	TUBS_NORMAL = 1
	TUBS_HOT = 2
	TUBS_PRESSED = 3
	TUBS_FOCUSED = 4
	TUBS_DISABLED = 5
End Enum

Public Enum THUMBTOPSTATES
	TUTS_NORMAL = 1
	TUTS_HOT = 2
	TUTS_PRESSED = 3
	TUTS_FOCUSED = 4
	TUTS_DISABLED = 5
End Enum

Public Enum THUMBVERTSTATES
	TUVS_NORMAL = 1
	TUVS_HOT = 2
	TUVS_PRESSED = 3
	TUVS_FOCUSED = 4
	TUVS_DISABLED = 5
End Enum

Public Enum THUMBLEFTSTATES
	TUVLS_NORMAL = 1
	TUVLS_HOT = 2
	TUVLS_PRESSED = 3
	TUVLS_FOCUSED = 4
	TUVLS_DISABLED = 5
End Enum

Public Enum THUMBRIGHTSTATES
	TUVRS_NORMAL = 1
	TUVRS_HOT = 2
	TUVRS_PRESSED = 3
	TUVRS_FOCUSED = 4
	TUVRS_DISABLED = 5
End Enum

Public Enum TICSSTATES
	TSS_NORMAL = 1
End Enum

Public Enum TICSVERTSTATES
	TSVS_NORMAL = 1
End Enum

Public Const VSCLASS_TREEVIEWSTYLE = "TREEVIEWSTYLE"
Public Const VSCLASS_TREEVIEW = "TREEVIEW"

Public Enum TREEVIEWPARTS
	TVP_TREEITEM = 1
	TVP_GLYPH = 2
	TVP_BRANCH = 3
	TVP_HOTGLYPH = 4
End Enum

Public Enum TREEITEMSTATES
	TREIS_NORMAL = 1
	TREIS_HOT = 2
	TREIS_SELECTED = 3
	TREIS_DISABLED = 4
	TREIS_SELECTEDNOTFOCUS = 5
	TREIS_HOTSELECTED = 6
End Enum

Public Enum GLYPHSTATES
	GLPS_CLOSED = 1
	GLPS_OPENED = 2
End Enum

Public Enum HOTGLYPHSTATES
	HGLPS_CLOSED = 1
	HGLPS_OPENED = 2
End Enum

Public Const VSCLASS_USERTILE = "USERTILE"

Public Enum USERTILEPARTS
	UTP_STROKEBACKGROUND = 1
	UTP_HOVERBACKGROUND = 2
End Enum

Public Enum HOVERBACKGROUNDSTATES
	UTS_NORMAL = 1
	UTS_HOT = 2
	UTS_PRESSED = 3
End Enum

Public Const VSCLASS_TEXTSELECTIONGRIPPER = "TEXTSELECTIONGRIPPER"

Public Enum TEXTSELECTIONGRIPPERPARTS
	TSGP_GRIPPER = 1
End Enum

Public Enum GRIPPERSTATES
	TSGS_NORMAL = 1
	TSGS_CENTERED = 2
End Enum

Public Const VSCLASS_WINDOWSTYLE = "WINDOWSTYLE"
Public Const VSCLASS_WINDOW = "WINDOW"

Public Enum WINDOWPARTS
	WP_CAPTION = 1
	WP_SMALLCAPTION = 2
	WP_MINCAPTION = 3
	WP_SMALLMINCAPTION = 4
	WP_MAXCAPTION = 5
	WP_SMALLMAXCAPTION = 6
	WP_FRAMELEFT = 7
	WP_FRAMERIGHT = 8
	WP_FRAMEBOTTOM = 9
	WP_SMALLFRAMELEFT = 10
	WP_SMALLFRAMERIGHT = 11
	WP_SMALLFRAMEBOTTOM = 12
	WP_SYSBUTTON = 13
	WP_MDISYSBUTTON = 14
	WP_MINBUTTON = 15
	WP_MDIMINBUTTON = 16
	WP_MAXBUTTON = 17
	WP_CLOSEBUTTON = 18
	WP_SMALLCLOSEBUTTON = 19
	WP_MDICLOSEBUTTON = 20
	WP_RESTOREBUTTON = 21
	WP_MDIRESTOREBUTTON = 22
	WP_HELPBUTTON = 23
	WP_MDIHELPBUTTON = 24
	WP_HORZSCROLL = 25
	WP_HORZTHUMB = 26
	WP_VERTSCROLL = 27
	WP_VERTTHUMB = 28
	WP_DIALOG = 29
	WP_CAPTIONSIZINGTEMPLATE = 30
	WP_SMALLCAPTIONSIZINGTEMPLATE = 31
	WP_FRAMELEFTSIZINGTEMPLATE = 32
	WP_SMALLFRAMELEFTSIZINGTEMPLATE = 33
	WP_FRAMERIGHTSIZINGTEMPLATE = 34
	WP_SMALLFRAMERIGHTSIZINGTEMPLATE = 35
	WP_FRAMEBOTTOMSIZINGTEMPLATE = 36
	WP_SMALLFRAMEBOTTOMSIZINGTEMPLATE = 37
	WP_FRAME = 38
	WP_BORDER = 39
End Enum

Public Enum FRAMESTATES
	FS_ACTIVE = 1
	FS_INACTIVE = 2
End Enum

Public Enum CAPTIONSTATES
	CS_ACTIVE = 1
	CS_INACTIVE = 2
	CS_DISABLED = 3
End Enum

Public Enum MAXCAPTIONSTATES
	MXCS_ACTIVE = 1
	MXCS_INACTIVE = 2
	MXCS_DISABLED = 3
End Enum

Public Enum MINCAPTIONSTATES
	MNCS_ACTIVE = 1
	MNCS_INACTIVE = 2
	MNCS_DISABLED = 3
End Enum

Public Enum HORZSCROLLSTATES
	HSS_NORMAL = 1
	HSS_HOT = 2
	HSS_PUSHED = 3
	HSS_DISABLED = 4
End Enum

Public Enum HORZTHUMBSTATES
	HTS_NORMAL = 1
	HTS_HOT = 2
	HTS_PUSHED = 3
	HTS_DISABLED = 4
End Enum

Public Enum VERTSCROLLSTATES
	VSS_NORMAL = 1
	VSS_HOT = 2
	VSS_PUSHED = 3
	VSS_DISABLED = 4
End Enum

Public Enum VERTTHUMBSTATES
	VTS_NORMAL = 1
	VTS_HOT = 2
	VTS_PUSHED = 3
	VTS_DISABLED = 4
End Enum

Public Enum SYSBUTTONSTATES
	SBS_NORMAL = 1
	SBS_HOT = 2
	SBS_PUSHED = 3
	SBS_DISABLED = 4
End Enum

Public Enum MINBUTTONSTATES
	MINBS_NORMAL = 1
	MINBS_HOT = 2
	MINBS_PUSHED = 3
	MINBS_DISABLED = 4
End Enum

Public Enum MAXBUTTONSTATES
	MAXBS_NORMAL = 1
	MAXBS_HOT = 2
	MAXBS_PUSHED = 3
	MAXBS_DISABLED = 4
End Enum

Public Enum RESTOREBUTTONSTATES
	RBS_NORMAL = 1
	RBS_HOT = 2
	RBS_PUSHED = 3
	RBS_DISABLED = 4
End Enum

Public Enum HELPBUTTONSTATES
	HBS_NORMAL = 1
	HBS_HOT = 2
	HBS_PUSHED = 3
	HBS_DISABLED = 4
End Enum

Public Enum CLOSEBUTTONSTATES
	CBS_NORMAL = 1
	CBS_HOT = 2
	CBS_PUSHED = 3
	CBS_DISABLED = 4
End Enum

Public Enum SMALLCLOSEBUTTONSTATES
	SCBS_NORMAL = 1
	SCBS_HOT = 2
	SCBS_PUSHED = 3
	SCBS_DISABLED = 4
End Enum

Public Enum FRAMEBOTTOMSTATES
	FRB_ACTIVE = 1
	FRB_INACTIVE = 2
End Enum

Public Enum FRAMELEFTSTATES
	FRL_ACTIVE = 1
	FRL_INACTIVE = 2
End Enum

Public Enum FRAMERIGHTSTATES
	FRR_ACTIVE = 1
	FRR_INACTIVE = 2
End Enum

Public Enum SMALLCAPTIONSTATES
	SCS_ACTIVE = 1
	SCS_INACTIVE = 2
	SCS_DISABLED = 3
End Enum

Public Enum SMALLFRAMEBOTTOMSTATES
	SFRB_ACTIVE = 1
	SFRB_INACTIVE = 2
End Enum

Public Enum SMALLFRAMELEFTSTATES
	SFRL_ACTIVE = 1
	SFRL_INACTIVE = 2
End Enum

Public Enum SMALLFRAMERIGHTSTATES
	SFRR_ACTIVE = 1
	SFRR_INACTIVE = 2
End Enum

Public Enum MDICLOSEBUTTONSTATES
	MDCL_NORMAL = 1
	MDCL_HOT = 2
	MDCL_PUSHED = 3
	MDCL_DISABLED = 4
End Enum

Public Enum MDIMINBUTTONSTATES
	MDMI_NORMAL = 1
	MDMI_HOT = 2
	MDMI_PUSHED = 3
	MDMI_DISABLED = 4
End Enum

Public Enum MDIRESTOREBUTTONSTATES
	MDRE_NORMAL = 1
	MDRE_HOT = 2
	MDRE_PUSHED = 3
	MDRE_DISABLED = 4
End Enum

Public Const MAX_THEMECOLOR  = 64
Public Const MAX_THEMESIZE  = 64

Public Enum TA_PROPERTY
	TAP_FLAGS = 0
	TAP_TRANSFORMCOUNT = 1
	TAP_STAGGERDELAY = 2
	TAP_STAGGERDELAYCAP = 3
	TAP_STAGGERDELAYFACTOR = 4
	TAP_ZORDER = 5
End Enum

Public Enum TA_PROPERTY_FLAG
	TAPF_NONE = &H0
	TAPF_HASSTAGGER = &H1
	TAPF_ISRTLAWARE = &H2
	TAPF_ALLOWCOLLECTION = &H4
	TAPF_HASBACKGROUND = &H8
	TAPF_HASPERSPECTIVE = &H10
End Enum

Public Enum TA_TRANSFORM_TYPE
	TATT_TRANSLATE_2D = 0
	TATT_SCALE_2D = 1
	TATT_OPACITY = 2
	TATT_CLIP = 3
End Enum

Public Enum TA_TRANSFORM_FLAG
	TATF_NONE = &H0
	TATF_TARGETVALUES_USER = &H1
	TATF_HASINITIALVALUES = &H2
	TATF_HASORIGINVALUES = &H4
End Enum

[PackingAlignment(8)]
Public Type TA_TRANSFORM
	eTransformType As TA_TRANSFORM_TYPE
	dwTimingFunctionId As Long
	dwStartTime As Long ' in milliseconds
	dwDurationTime As Long
	eFlags As TA_TRANSFORM_FLAG
End Type
[PackingAlignment(8)]
Public Type TA_TRANSFORM_2D
	header As TA_TRANSFORM
	rX As Single
	rY As Single
	rInitialX As Single
	rInitialY As Single
	rOriginX As Single
	rOriginY As Single
End Type
[PackingAlignment(8)]
Public Type TA_TRANSFORM_OPACITY
	header As TA_TRANSFORM
	rOpacity As Single
	rInitialOpacity As Single
End Type
[PackingAlignment(8)]
Public Type TA_TRANSFORM_CLIP
	header As TA_TRANSFORM
	rLeft As Single
	rTop As Single
	rRight As Single
	rBottom As Single
	rInitialLeft As Single
	rInitialTop As Single
	rInitialRight As Single
	rInitialBottom As Single
End Type

Public Enum TA_TIMINGFUNCTION_TYPE
	TTFT_UNDEFINED = 0
	TTFT_CUBIC_BEZIER = 1
End Enum

[PackingAlignment(8)]
Public Type TA_TIMINGFUNCTION
	eTimingFunctionType As TA_TIMINGFUNCTION_TYPE
End Type
[PackingAlignment(8)]
Public Type TA_CUBIC_BEZIER
	header As TA_TIMINGFUNCTION
	rX0 As Single
	rY0 As Single
	rX1 As Single
	rY1 As Single
End Type

Public Enum OTDEx_Flags
	OTD_FORCE_RECT_SIZING = &H00000001  ' make all parts size to rect
	OTD_NONCLIENT = &H00000002  ' set if hTheme to be used for nonclient area
End Enum

Public Enum DTGB_Flags
	DTBG_CLIPRECT = &H00000001  ' rcClip has been specified
	DTBG_DRAWSOLID = &H00000002  ' DEPRECATED: draw transparent/alpha images as solid
	DTBG_OMITBORDER = &H00000004  ' don't draw border of part
	DTBG_OMITCONTENT = &H00000008  ' don't draw content area of part
	DTBG_COMPUTINGREGION = &H00000010  ' TRUE if calling to compute region
	DTBG_MIRRORDC = &H00000020  ' assume the hdc is mirrorred and
'  flip images as appropriate (currently
'  only supported for bgtype=imagefile)
	DTBG_NOMIRROR = &H00000040  ' don't mirror the output, overrides everything else
End Enum

Public Type DTBGOPTS
	dwSize As Long ' size of the struct
	dwFlags As DTGB_Flags ' which options have been specified
	rcClip As RECT ' clipping rectangle
End Type

Public Const DTT_GRAYED = &h00000001          '// draw a grayed-out string (this is deprecated)

Public Enum THEMESIZE
    TS_MIN '// minimum size
    TS_TRUE '// size without stretching
    TS_DRAW '// size that theme mgr will use to draw part	
End Enum

Public Enum HTTB_Flags
	HTTB_BACKGROUNDSEG = &H00000000
'   Fixed border hit test option.  possible return values are:
'   HTCLIENT: hit test succeeded in the middle background segment
'   HTBORDER: hit test succeeded in any other background segment
	HTTB_FIXEDBORDER = &H00000002  ' Return code may be either HTCLIENT or HTBORDER.
'   Caption hit test option.  Possible return values are:
'   HTCAPTION: hit test succeeded in the top, top left, or top right background segments
'   HTNOWHERE or another return code, depending on absence or presence of accompanying flags, resp.
	HTTB_CAPTION = &H00000004
'   Resizing border hit test flags.  Possible return values are:
'   HTCLIENT: hit test succeeded in middle background segment
'   HTTOP, HTTOPLEFT, HTLEFT, HTRIGHT, etc:    hit test succeeded in the respective system resizing zone
'   HTBORDER: hit test failed in middle segment and resizing zones, but succeeded in a background border segment
	HTTB_RESIZINGBORDER_LEFT = &H00000010  ' Hit test left resizing border,
	HTTB_RESIZINGBORDER_TOP = &H00000020  ' Hit test top resizing border
	HTTB_RESIZINGBORDER_RIGHT = &H00000040  ' Hit test right resizing border
	HTTB_RESIZINGBORDER_BOTTOM = &H00000080  ' Hit test bottom resizing border
	HTTB_RESIZINGBORDER = (HTTB_RESIZINGBORDER_LEFT Or HTTB_RESIZINGBORDER_TOP	Or HTTB_RESIZINGBORDER_RIGHT Or HTTB_RESIZINGBORDER_BOTTOM)
'  Resizing border is specified as a template, not just window edges.
'  This option is mutually exclusive with HTTB_SYSTEMSIZINGWIDTH; HTTB_SIZINGTEMPLATE takes precedence
	HTTB_SIZINGTEMPLATE = &H00000100
'  Use system resizing border width rather than theme content margins.
'  This option is mutually exclusive with HTTB_SIZINGTEMPLATE, which takes precedence.
	HTTB_SYSTEMSIZINGMARGINS = &H00000200
End Enum

Public Type MARGINS
	cxLeftWidth As Long ' width of left border that retains its size
	cxRightWidth As Long ' width of right border that retains its size
	cyTopHeight As Long ' height of top border that retains its size
	cyBottomHeight As Long ' height of bottom border that retains its size
End Type

Public Const MAX_INTLIST_COUNT = 402
Public Type INTLIST
	iValueCount As Long ' number of values in iValues
	iValues(0 To (MAX_INTLIST_COUNT - 1)) As Long
End Type

Public Enum PROPERTYORIGIN
    PO_STATE '// property was found in the state section
    PO_PART '// property was found in the part section
    PO_CLASS '// property was found in the class section
    PO_GLOBAL ' // property was found in [globals] section
    PO_NOTFOUND  ' // property was not found
End Enum

Public Enum ETDT_Flags
	ETDT_DISABLE = &H00000001
	ETDT_ENABLE = &H00000002
	ETDT_USETABTEXTURE = &H00000004
	ETDT_ENABLETAB = (ETDT_ENABLE Or ETDT_USETABTEXTURE)
	ETDT_USEAEROWIZARDTABTEXTURE = &H00000008
	ETDT_ENABLEAEROWIZARDTAB = (ETDT_ENABLE Or ETDT_USEAEROWIZARDTABTEXTURE)
	ETDT_VALIDBITS = (ETDT_DISABLE Or ETDT_ENABLE Or ETDT_USETABTEXTURE Or ETDT_USEAEROWIZARDTABTEXTURE)
End Enum

Public Enum STAP_Flags
	STAP_ALLOW_NONCLIENT = (1 << 0)
	STAP_ALLOW_CONTROLS = (1 << 1)
	STAP_ALLOW_WEBCONTENT = (1 << 2)
	STAP_VALIDBITS = (STAP_ALLOW_NONCLIENT Or STAP_ALLOW_CONTROLS Or STAP_ALLOW_WEBCONTENT)
End Enum

Public Const SZ_THDOCPROP_DISPLAYNAME  = "DisplayName"
Public Const SZ_THDOCPROP_CANONICALNAME  = "ThemeName"
Public Const SZ_THDOCPROP_TOOLTIP  = "ToolTip"
Public Const SZ_THDOCPROP_AUTHOR  = "author"

Public Enum GBF_Flags
	GBF_DIRECT = &H00000001  ' direct dereferencing.
	GBF_COPY = &H00000002  ' create a copy of the bitmap
	GBF_VALIDBITS = (GBF_DIRECT Or GBF_COPY)
End Enum

Public Enum DTPB_Flags
	DTPB_WINDOWDC = &H00000001
	DTPB_USECTLCOLORSTATIC = &H00000002
	DTPB_USEERASEBKGND = &H00000004
End Enum

Public Enum WINDOWTHEMEATTRIBUTETYPE
	WTA_NONCLIENT = 1
End Enum

Public Enum WTNCA_Flags
	WTNCA_NODRAWCAPTION = &H00000001  ' don't draw the window caption
	WTNCA_NODRAWICON = &H00000002  ' don't draw the system icon
	WTNCA_NOSYSMENU = &H00000004  ' don't expose the system menu icon functionality
	WTNCA_NOMIRRORHELP = &H00000008  ' don't mirror the question mark, even in RTL layout
	WTNCA_VALIDBITS = (WTNCA_NODRAWCAPTION Or WTNCA_NODRAWICON Or WTNCA_NOSYSMENU Or WTNCA_NOMIRRORHELP)
End Enum
Public Type WTA_OPTIONS
	dwFlags As WTNCA_Flags ' values for each style option specified in the bitmask
	dwMask As WTNCA_Flags ' bitmask for flags that are changing
	' valid options are: WTNCA_NODRAWCAPTION, WTNCA_NODRAWICON, WTNCA_NOSYSMENU
End Type

Public Enum DTT_Flags
	DTT_TEXTCOLOR = (1& << 0)  ' crText has been specified
	DTT_BORDERCOLOR = (1& << 1)  ' crBorder has been specified
	DTT_SHADOWCOLOR = (1& << 2)  ' crShadow has been specified
	DTT_SHADOWTYPE = (1& << 3)  ' iTextShadowType has been specified
	DTT_SHADOWOFFSET = (1& << 4)  ' ptShadowOffset has been specified
	DTT_BORDERSIZE = (1& << 5)  ' iBorderSize has been specified
	DTT_FONTPROP = (1& << 6)  ' iFontPropId has been specified
	DTT_COLORPROP = (1& << 7)  ' iColorPropId has been specified
	DTT_STATEID = (1& << 8)  ' IStateId has been specified
	DTT_CALCRECT = (1& << 9)  ' Use pRect as and in/out parameter
	DTT_APPLYOVERLAY = (1& << 10)  ' fApplyOverlay has been specified
	DTT_GLOWSIZE = (1& << 11)  ' iGlowSize has been specified
	DTT_CALLBACK = (1& << 12)  ' pfnDrawTextCallback has been specified
	DTT_COMPOSITED = (1& << 13)  ' Draws text with antialiased alpha (needs a DIB section)
End Enum
Public Type DTTOPTS
	dwSize As Long ' size of the struct
	dwFlags As DTT_Flags ' which options have been specified
	crText As Long ' color to use for text fill
	crBorder As Long ' color to use for text outline
	crShadow As Long ' color to use for text shadow
	iTextShadowType As Long ' TST_SINGLE or TST_CONTINUOUS
	ptShadowOffset As POINT ' where shadow is drawn (relative to text)
	iBorderSize As Long ' Border radius around text
	iFontPropId As Long ' Font property to use for the text instead of TMT_FONT
	iColorPropId As Long ' Color property to use for the text instead of TMT_TEXTCOLOR
	iStateId As Long ' Alternate state id
	fApplyOverlay As Long ' Overlay text on top of any text effect?
	iGlowSize As Long ' Glow radious around text
	pfnDrawTextCallback As LongPtr ' Callback for DrawText
	lParam As LongPtr ' Parameter for callback
End Type

Public Enum BP_BUFFERFORMAT
    BPBF_COMPATIBLEBITMAP     '// Compatible bitmap
    BPBF_DIB                  '// Device-independent bitmap
    BPBF_TOPDOWNDIB           '// Top-down device-independent bitmap
    BPBF_TOPDOWNMONODIB       '// Top-down monochrome device-independent bitmap
End Enum

Public Const BPBF_COMPOSITED = BPBF_TOPDOWNDIB

Public Enum BP_ANIMATIONSTYLE
	BPAS_NONE = 0 ' No animation
	BPAS_LINEAR = 1 ' Linear fade animation
	BPAS_CUBIC = 2 ' Cubic fade animation
	BPAS_SINE = 3 ' Sinusoid fade animation
End Enum

Public Type BP_ANIMATIONPARAMS
	cbSize As Long
	dwFlags As Long ' BPAF_ flags
	style As BP_ANIMATIONSTYLE
	dwDuration As Long
End Type

Public Enum BPPF_Flags
	BPPF_ERASE = &H0001  ' Empty the buffer during BeginBufferedPaint()
	BPPF_NOCLIP = &H0002  ' Don't apply the target DC's clip region to the double buffer
	BPPF_NONCLIENT = &H0004  ' Using a non-client DC
End Enum
Public Type BP_PAINTPARAMS
	cbSize As Long
	dwFlags As BPPF_Flags
	prcExclude As LongPtr
	pBlendFunction As LongPtr
End Type

Public Type RGBQUAD
	rgbBlue As Byte
	rgbGreen As Byte
	rgbRed As Byte
	rgbReserved As Byte
End Type

Public Declare PtrSafe Function BeginPanningFeedback Lib "uxtheme" (ByVal hWnd As LongPtr) As Long
Public Declare PtrSafe Function UpdatePanningFeedback Lib "uxtheme" (ByVal hWnd As LongPtr, ByVal lTotalOverpanOffsetX As Long, ByVal lTotalOverpanOffsetY As Long, ByVal fInInertia As Long) As Long
Public Declare PtrSafe Function EndPanningFeedback Lib "uxtheme" (ByVal hWnd As LongPtr, ByVal fAnimateBack As Long) As Long
Public Declare PtrSafe Function GetThemeAnimationProperty Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal iStoryboardId As Long, ByVal iTargetId As Long, ByVal eProperty As TA_PROPERTY, pvProperty As Any, ByVal cbSize As Long, pcbSizeOut As Long) As Long
Public Declare PtrSafe Function GetThemeAnimationTransform Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal iStoryboardId As Long, ByVal iTargetId As Long, ByVal dwTransformIndex As Long, pTransform As TA_TRANSFORM, ByVal cbSize As Long, pcbSizeOut As Long) As Long
Public Declare PtrSafe Function GetThemeTimingFunction Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal iTimingFunctionId As Long, pTimingFunction As TA_TIMINGFUNCTION, ByVal cbSize As Long, pcbSizeOut As Long) As Long
Public Declare PtrSafe Function OpenThemeData Lib "uxtheme" (ByVal hWnd As LongPtr, ByVal pszClassList As LongPtr) As LongPtr
Public Declare PtrSafe Function OpenThemeDataForDpi Lib "uxtheme" (ByVal hWnd As LongPtr, ByVal pszClassList As LongPtr, ByVal dpi As Long) As LongPtr
Public Declare PtrSafe Function OpenThemeDataEx Lib "uxtheme" (ByVal hWnd As LongPtr, ByVal pszClassList As LongPtr, ByVal dwFlags As OTDEx_Flags) As LongPtr
Public Declare PtrSafe Function CloseThemeData Lib "uxtheme" (ByVal hTheme As LongPtr) As Long
Public Declare PtrSafe Function DrawThemeBackground Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal hDC As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, pRect As RECT, pClipRect As RECT) As Long
Public Declare PtrSafe Function DrawThemeBackgroundEx Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal hDC As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, pRect As RECT, pOptions As DTBGOPTS) As Long
Public Declare PtrSafe Function DrawThemeText Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal hDC As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, ByVal pszText As LongPtr, ByVal cchText As Long, ByVal dwTextFlags As Long, ByVal dwTextFlags2 As Long, pRect As RECT) As Long
Public Declare PtrSafe Function GetThemeBackgroundContentRect Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal hDC As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, pBoundingRect As RECT, pContentRect As RECT) As Long
Public Declare PtrSafe Function GetThemeBackgroundExtent Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal hDC As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, pContentRect As RECT, pExtentRect As RECT) As Long
Public Declare PtrSafe Function GetThemeBackgroundRegion Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal hDC As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, pRect As RECT, pRegion As LongPtr) As Long
Public Declare PtrSafe Function GetThemePartSize Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal hDC As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, prc As RECT, ByVal eSize As THEMESIZE, psz As SIZE) As Long
Public Declare PtrSafe Function GetThemeTextExtent Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal hDC As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, ByVal pszText As LongPtr, ByVal cchCharCount As Long, ByVal dwTextFlags As Long, pBoundingRect As RECT, pExtentRect As RECT) As Long
Public Declare PtrSafe Function GetThemeTextMetrics Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal hDC As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, ptm As TEXTMETRICW) As Long
Public Declare PtrSafe Function HitTestThemeBackground Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal hDC As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, pRect As RECT, ByVal hrgn As LongPtr, ptTest As POINT, pwHitTestCode As Integer) As Long
Public Declare PtrSafe Function DrawThemeIcon Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal hDC As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, pRect As RECT, ByVal himl As LongPtr, ByVal iImageIndex As Long) As Long
Public Declare PtrSafe Function DrawThemeEdge Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal hDC As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, pDestRect As RECT, ByVal uEdge As Long, ByVal uFlags As Long, pContentRect As RECT) As Long
Public Declare PtrSafe Function IsThemePartDefined Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long) As Long
Public Declare PtrSafe Function IsThemeBackgroundPartiallyTransparent Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long) As Long
Public Declare PtrSafe Function GetThemeColor Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, ByVal iPropId As Long, pColor As Long) As Long
Public Declare PtrSafe Function GetThemeMetric Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal hdc As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, ByVal iPropId As Long, piVal As Long) As Long
Public Declare PtrSafe Function GetThemeString Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, ByVal iPropId As Long, pszBuff As LongPtr, ByVal cchMaxBuffChars As Long) As Long
Public Declare PtrSafe Function GetThemeBool Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, ByVal iPropId As Long, pfVal As Long) As Long
Public Declare PtrSafe Function GetThemeInt Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, ByVal iPropId As Long, piVal As Long) As Long
Public Declare PtrSafe Function GetThemeEnumValue Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, ByVal iPropId As Long, piVal As Long) As Long
Public Declare PtrSafe Function GetThemePosition Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, ByVal iPropId As Long, pPoint As POINT) As Long
Public Declare PtrSafe Function GetThemeFont Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal hdc As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, ByVal iPropId As Long, ByVal pFont As LongPtr) As Long
Public Declare PtrSafe Function GetThemeRect Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, ByVal iPropId As Long, pRect As RECT) As Long
Public Declare PtrSafe Function GetThemeMargins Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal hDC As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, ByVal iPropId As Long, prc As RECT, pMargins As MARGINS) As Long
Public Declare PtrSafe Function GetThemeIntList Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, ByVal iPropId As Long, pIntList As INTLIST) As Long
Public Declare PtrSafe Function GetThemePropertyOrigin Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, ByVal iPropId As Long, pOrigin As PROPERTYORIGIN) As Long
Public Declare PtrSafe Function SetWindowTheme Lib "uxtheme" (ByVal hwnd As LongPtr, ByVal pszSubAppName As LongPtr, ByVal pszSubIdList As LongPtr) As Long
Public Declare PtrSafe Function GetThemeFileName Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, ByVal iPropId As Long, pszThemeFileName As LongPtr, ByVal cchMaxBuffChars As Long) As Long
Public Declare PtrSafe Function GetThemeSysColorBrush Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal iColorId As Long) As LongPtr
Public Declare PtrSafe Function GetThemeSysBool Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal iBoolId As Long) As Long
Public Declare PtrSafe Function GetThemeSysSize Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal iSizeId As Long) As Long
Public Declare PtrSafe Function GetThemeSysFont Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal iFontId As Long, ByVal plf As LongPtr) As Long
Public Declare PtrSafe Function GetThemeSysString Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal iStringId As Long, pszStringBuff As LongPtr, ByVal cchMaxStringChars As Long) As Long
Public Declare PtrSafe Function GetThemeSysInt Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal iIntId As Long, piValue As Long) As Long
Public Declare PtrSafe Function IsThemeActive Lib "uxtheme" () As Long
Public Declare PtrSafe Function IsAppThemed Lib "uxtheme" () As Long
Public Declare PtrSafe Function GetWindowTheme Lib "uxtheme" (ByVal hwnd As LongPtr) As LongPtr
Public Declare PtrSafe Function EnableThemeDialogTexture Lib "uxtheme" (ByVal hWnd As LongPtr, ByVal dwFlags As ETDT_Flags) As Long
Public Declare PtrSafe Function IsThemeDialogTextureEnabled Lib "uxtheme" (ByVal hwnd As LongPtr) As Long
Public Declare PtrSafe Function GetThemeAppProperties Lib "uxtheme" () As STAP_Flags
Public Declare PtrSafe Sub SetThemeAppProperties Lib "uxtheme" (ByVal dwFlags As STAP_Flags)
Public Declare PtrSafe Function GetCurrentThemeName Lib "uxtheme" (ByVal pszThemeFileName As LongPtr, ByVal cchMaxNameChars As Long, pszColorBuff As LongPtr, ByVal cchMaxColorChars As Long, pszSizeBuff As LongPtr, ByVal cchMaxSizeChars As Long) As Long
Public Declare PtrSafe Function GetThemeDocumentationProperty Lib "uxtheme" (ByVal pszThemeName As LongPtr, ByVal pszPropertyName As LongPtr, pszValueBuff As LongPtr, ByVal cchMaxValChars As Long) As Long
Public Declare PtrSafe Function DrawThemeParentBackground Lib "uxtheme" (ByVal hWnd As LongPtr, ByVal hDC As LongPtr, prc As RECT) As Long
Public Declare PtrSafe Function EnableTheming Lib "uxtheme" (ByVal fEnable As Long) As Long
Public Declare PtrSafe Function DrawThemeParentBackgroundEx Lib "uxtheme" (ByVal hWnd As LongPtr, ByVal hDC As LongPtr, ByVal dwFlags As DTPB_Flags, prc As RECT) As Long
Public Declare PtrSafe Function SetWindowThemeAttribute Lib "uxtheme" (ByVal hWnd As LongPtr, ByVal eAttribute As WINDOWTHEMEATTRIBUTETYPE, pvAttribute As Any, ByVal cbAttribute As Long) As Long
Public Declare PtrSafe Function DrawThemeTextEx Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal hDC As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, ByVal pszText As LongPtr, ByVal cchText As Long, ByVal dwTextFlags As Long, pRect As RECT, pOptions As DTTOPTS) As Long
Public Declare PtrSafe Function GetThemeBitmap Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, ByVal iPropId As Long, ByVal dwFlags As Long, phBitmap As LongPtr) As Long
Public Declare PtrSafe Function GetThemeStream Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, ByVal iPropId As Long, ppvStream As Any, pcbStream As Long, ByVal hInst As LongPtr) As Long
Public Declare PtrSafe Function BufferedPaintInit Lib "uxtheme" () As Long
Public Declare PtrSafe Function BufferedPaintUnInit Lib "uxtheme" () As Long
Public Declare PtrSafe Function BeginBufferedPaint Lib "uxtheme" (ByVal hdcTarget As LongPtr, prcTarget As RECT, ByVal dwFormat As BP_BUFFERFORMAT, pPaintParams As BP_PAINTPARAMS, phdc As LongPtr) As LongPtr
Public Declare PtrSafe Function EndBufferedPaint Lib "uxtheme" (ByVal hBufferedPaint As LongPtr, ByVal fUpdateTarget As Long) As Long
Public Declare PtrSafe Function GetBufferedPaintTargetRect Lib "uxtheme" (ByVal hBufferedPaint As LongPtr, prc As RECT) As Long
Public Declare PtrSafe Function GetBufferedPaintTargetDC Lib "uxtheme" (ByVal hBufferedPaint As LongPtr) As LongPtr
Public Declare PtrSafe Function GetBufferedPaintDC Lib "uxtheme" (ByVal hBufferedPaint As LongPtr) As LongPtr
Public Declare PtrSafe Function GetBufferedPaintBits Lib "uxtheme" (ByVal hBufferedPaint As LongPtr, ppbBuffer As RGBQUAD, pcxRow As Long) As Long
Public Declare PtrSafe Function BufferedPaintClear Lib "uxtheme" (ByVal hBufferedPaint As LongPtr, prc As RECT) As Long
Public Declare PtrSafe Function BufferedPaintSetAlpha Lib "uxtheme" (ByVal hBufferedPaint As LongPtr, prc As RECT, ByVal alpha As Byte) As Long
Public Declare PtrSafe Function BufferedPaintStopAllAnimations Lib "uxtheme" (ByVal hwnd As LongPtr) As Long
Public Declare PtrSafe Function BeginBufferedAnimation Lib "uxtheme" (ByVal hwnd As LongPtr, ByVal hdcTarget As LongPtr, prcTarget As RECT, ByVal dwFormat As BP_BUFFERFORMAT, pPaintParams As BP_PAINTPARAMS, pAnimationParams As BP_ANIMATIONPARAMS, phdcFrom As LongPtr, phdcTo As LongPtr) As LongPtr
Public Declare PtrSafe Function EndBufferedAnimation Lib "uxtheme" (ByVal hBufferedPaint As LongPtr, ByVal fUpdateTarget As Long) As Long
Public Declare PtrSafe Function BufferedPaintRenderAnimation Lib "uxtheme" (ByVal hwnd As LongPtr, ByVal hdcTarget As LongPtr) As Long
Public Declare PtrSafe Function IsCompositionActive Lib "uxtheme" () As Long
Public Declare PtrSafe Function GetThemeTransitionDuration Lib "uxtheme" (ByVal hTheme As LongPtr, ByVal iPartId As Long, ByVal iStateIdFrom As Long, ByVal iStateIdTo As Long, ByVal iPropId As Long, pdwDuration As Long) As Long


#End Region

#Region "Helpers"

Public Function Header_GetItemW(hwndHD As LongPtr, iItem As Long, phdi As HDITEMW) As Boolean
  Header_GetItemW = SendMessage(hwndHD, HDM_GETITEMW, iItem, phdi)
End Function
Public Function Header_SetItemW(hwndHD As LongPtr, i As Long, phdi As HDITEMW) As Boolean
  Header_SetItemW = SendMessageW(hwndHD, HDM_SETITEMW, ByVal i, phdi)
End Function

Public Function GetHDItemlParam(hwndHD As LongPtr, iItem As Long) As LongPtr
  Dim tHDI As HDITEMW
  tHDI.Mask = HDI_LPARAM
  Call SendMessage(hwndHD, HDM_GETITEMW, iItem, tHDI)
  GetHDItemlParam = tHDI.lParam
End Function

Public Function GetLVItemlParam(hwndLV As LongPtr, iItem As Long) As LongPtr
  Dim lvi As LVITEM
  
  lvi.Mask = LVIF_PARAM
  lvi.iItem = iItem
  If SendMessage(hwndLV, LVM_GETITEM, 0, lvi) Then
    GetLVItemlParam = lvi.lParam
  End If

End Function
Public Function GetTVItemlParam(hwndTV As LongPtr, hItem As LongPtr) As LongPtr
  Dim tVI As TVITEM
  
  tVI.hItem = hItem
  tVI.Mask = TVIF_PARAM
  
  If TreeView_GetItem(hwndTV, tVI) Then
    GetTVItemlParam = tVI.lParam
  End If

End Function

Public Function SetWindowThemeNonClientAttributes(hWnd As LongPtr, ByVal dwMask As WTNCA_Flags, ByVal dwAttributes As WTNCA_Flags) As Long
Dim wta As WTA_OPTIONS
wta.dwFlags = dwAttributes
wta.dwMask = dwMask
Return SetWindowThemeAttribute(hWnd, WTA_NONCLIENT, wta, LenB(wta))
End Function

Public Sub BufferedPaintMakeOpaque(hBufferedPaint As LongPtr, prc As RECT)
BufferedPaintSetAlpha(hBufferedPaint, prc, 255)
End Sub

Public Function CLSID_CBooleanControl() As UUID
'{0x1E8F0D70, 0x7399, 0x41BF, {0x85, 0x98, 0x79, 0x49, 0xA2, 0xDE, 0xC8, 0x98}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1E8F0D70, &H7399, &H41BF, &H85, &H98, &H79, &H49, &HA2, &HDE, &HC8, &H98)
 CLSID_CBooleanControl = iid
End Function
Public Function CLSID_CCustomDrawMultiValuePropertyControl() As UUID
'{0xE2183960, 0x9D58, 0x4E9C, {0x87, 0x8A, 0x4A, 0xCC, 0x06, 0xCA, 0x56, 0x4A}}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE2183960, &H9D58, &H4E9C, &H87, &H8A, &H4A, &HCC, &H6, &HCA, &H56, &H4A)
 CLSID_CCustomDrawMultiValuePropertyControl = iid
End Function
Public Function CLSID_CCustomDrawPercentFullControl() As UUID
'{0xAB517586, 0x73CF, 0x489c, 0x8D, 0x8C, 0x5A, 0xE0, 0xEA, 0xD0, 0x61, 0x3A}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAB517586, &H73CF, &H489C, &H8D, &H8C, &H5A, &HE0, &HEA, &HD0, &H61, &H3A)
 CLSID_CCustomDrawPercentFullControl = iid
End Function
Public Function CLSID_CCustomDrawProgressControl() As UUID
'{0x0d81ea0d, 0x13bf, 0x44B2, 0xAF, 0x1C, 0xFC, 0xDF, 0x6B, 0xE7, 0x92, 0x7C}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD81EA0D, &H13BF, &H44B2, &HAF, &H1C, &HFC, &HDF, &H6B, &HE7, &H92, &H7C)
 CLSID_CCustomDrawProgressControl = iid
End Function
Public Function CLSID_CHyperlinkControl() As UUID
'{0x15756BE1, 0xA4AD, 0x449C, 0xB5, 0x76, 0xDF, 0x3D, 0xF0, 0xE0, 0x68, 0xD3}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H15756BE1, &HA4AD, &H449C, &HB5, &H76, &HDF, &H3D, &HF0, &HE0, &H68, &HD3)
 CLSID_CHyperlinkControl = iid
End Function
Public Function CLSID_CIconListControl() As UUID
'{0x53A01E9D, 0x61CC, 0x4CB0, 0x83, 0xB1, 0x31, 0xBC, 0x8D, 0xF6, 0x31, 0x56}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H53A01E9D, &H61CC, &H4CB0, &H83, &HB1, &H31, &HBC, &H8D, &HF6, &H31, &H56)
 CLSID_CIconListControl = iid
End Function
Public Function CLSID_CInPlaceCalendarControl() As UUID
'{0x6A205B57, 0x2567, 0x4A2C, 0xB8, 0x81, 0xF7, 0x87, 0xFA, 0xB5, 0x79, 0xA3}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6A205B57, &H2567, &H4A2C, &HB8, &H81, &HF7, &H87, &HFA, &HB5, &H79, &HA3)
 CLSID_CInPlaceCalendarControl = iid
End Function
Public Function CLSID_CInPlaceDropListComboControl() As UUID
'{0x0EEA25CC, 0x4362, 0x4A12, 0x85, 0x0B, 0x86, 0xEE, 0x61, 0xB0, 0xD3, 0xEB}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HEEA25CC, &H4362, &H4A12, &H85, &HB, &H86, &HEE, &H61, &HB0, &HD3, &HEB)
 CLSID_CInPlaceDropListComboControl = iid
End Function
Public Function CLSID_CInPlaceEditBoxControl() As UUID
'{0xA9CF0EAE, 0x901A, 0x4739, 0xA4, 0x81, 0xE3, 0x5B, 0x73, 0xE4, 0x7F, 0x6D}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA9CF0EAE, &H901A, &H4739, &HA4, &H81, &HE3, &H5B, &H73, &HE4, &H7F, &H6D)
 CLSID_CInPlaceEditBoxControl = iid
End Function
Public Function CLSID_CInPlaceMLEditBoxControl() As UUID
'{0x8EE97210, 0xFD1F, 0x4B19, 0x91, 0xDA, 0x67, 0x91, 0x40, 0x05, 0xF0, 0x20}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8EE97210, &HFD1F, &H4B19, &H91, &HDA, &H67, &H91, &H40, &H5, &HF0, &H20)
 CLSID_CInPlaceMLEditBoxControl = iid
End Function
Public Function CLSID_CInPlaceMultiValuePropertyControl() As UUID
'{0x8E85D0CE, 0xDEAF, 0x4EA1, 0x94, 0x10, 0xFD, 0x1A, 0x21, 0x05, 0xCE, 0xB5}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8E85D0CE, &HDEAF, &H4EA1, &H94, &H10, &HFD, &H1A, &H21, &H5, &HCE, &HB5)
 CLSID_CInPlaceMultiValuePropertyControl = iid
End Function
Public Function CLSID_CRatingControl() As UUID
'{0x85e94d25, 0x0712, 0x47ed, 0x8C, 0xDE, 0xB0, 0x97, 0x11, 0x77, 0xC6, 0xA1}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H85E94D25, &H712, &H47ED, &H8C, &HDE, &HB0, &H97, &H11, &H77, &HC6, &HA1)
 CLSID_CRatingControl = iid
End Function
Public Function CLSID_CStaticPropertyControl() As UUID
'{0x527C9A9B, 0xB9A2, 0x44B0, 0x84, 0xF9, 0xF0, 0xDC, 0x11, 0xC2, 0xBC, 0xFB}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H527C9A9B, &HB9A2, &H44B0, &H84, &HF9, &HF0, &HDC, &H11, &HC2, &HBC, &HFB)
 CLSID_CStaticPropertyControl = iid
End Function
Public Function CLSID_CInPlaceTimeControl() As UUID
'{0x28F8A4AC, 0xBBB3, 0x4D9B, {0xB1, 0x77, 0x82, 0xBF, 0xC9, 0x14, 0xFA, 0x33}}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H28F8A4AC, &HBBB3, &H4D9B, &HB1, &H77, &H82, &HBF, &HC9, &H14, &HFA, &H33)
 CLSID_CInPlaceTimeControl = iid
End Function
#End Region

#Region "Macros"





Public Function Button_GetIdealSize(hWnd As LongPtr, psize As Long) As Long
Button_GetIdealSize = CLng(SendMessage(hWnd, BCM_GETIDEALSIZE, 0, psize))
End Function
Public Function Button_SetImageList(hWnd As LongPtr, pbuttonImagelist As LongPtr) As LongPtr
Button_SetImageList = SendMessage(hWnd, BCM_SETIMAGELIST, 0, ByVal pbuttonImagelist)
End Function
Public Function Button_GetImageList(hWnd As LongPtr, pbuttonImagelist As LongPtr) As LongPtr
Button_GetImageList = SendMessage(hWnd, BCM_GETIMAGELIST, 0, ByVal pbuttonImagelist)
End Function
Public Function Button_SetTextMargin(hWnd As LongPtr, pmargin As LongPtr) As Long
Button_SetTextMargin = CLng(SendMessage(hWnd, BCM_SETTEXTMARGIN, 0, ByVal pmargin))
End Function
Public Function Button_GetTextMargin(hWnd As LongPtr, pmargin As LongPtr) As Long
Button_GetTextMargin = CLng(SendMessage(hWnd, BCM_GETTEXTMARGIN, 0, pmargin))
End Function
Public Function Button_SetDropDownState(hWnd As LongPtr, fDropDown As Long) As Long
Button_SetDropDownState = CLng(SendMessage(hWnd, BCM_SETDROPDOWNSTATE, fDropDown, ByVal 0&))
End Function
Public Function Button_SetSplitInfo(hWnd As LongPtr, pInfo As BUTTON_SPLITINFO) As Long
Button_SetSplitInfo = CLng(SendMessage(hWnd, BCM_SETSPLITINFO, 0, pInfo))
End Function
Public Function Button_GetSplitInfo(hWnd As LongPtr, pInfo As BUTTON_SPLITINFO) As Long
Button_GetSplitInfo = CLng(SendMessage(hWnd, BCM_GETSPLITINFO, 0, pInfo))
End Function
Public Function Button_SetNote(hWnd As LongPtr, psz As LongPtr) As Long
Button_SetNote = CLng(SendMessage(hWnd, BCM_SETNOTE, 0, ByVal psz))
End Function
Public Function Button_GetNote(hWnd As LongPtr, pcc As Long, psz As LongPtr) As Long
Button_GetNote = CLng(SendMessage(hWnd, BCM_GETNOTE, pcc, ByVal psz))
End Function
Public Function Button_GetNoteLength(hWnd As LongPtr) As Long
Button_GetNoteLength = CLng(SendMessage(hWnd, BCM_GETNOTELENGTH, 0, ByVal 0&))
End Function
Public Function Button_SetElevationRequiredState(hWnd As LongPtr, fRequired As Long) As Long
Button_SetElevationRequiredState = CLng(SendMessage(hWnd, BCM_SETSHIELD, 0, ByVal fRequired))
End Function
Public Function Button_SetStyle(hWnd As LongPtr, dwStyle As ButtonStyles, fRedraw As Long) As Long
Button_SetStyle = CLng(SendMessage(hWnd, BM_SETSTYLE, LOWORD(dwStyle), ByVal MAKELPARAM(fRedraw, 0)))
End Function
Public Function Button_GetState(hWnd As LongPtr) As ButtonStates
Button_GetState = CLng(SendMessage(hWnd, BM_GETSTATE, 0, ByVal 0&))
End Function
Public Function Button_SetState(hWnd As LongPtr, State As ButtonStates) As Long
Button_SetState = CLng(SendMessage(hWnd, BM_SETSTATE, State, ByVal 0&))
End Function
Public Function Button_GetCheck(hWnd As LongPtr) As Long
Button_GetCheck = CLng(SendMessage(hWnd, BM_GETCHECK, 0, ByVal 0&))
End Function
Public Function Button_SetCheck(hWnd As LongPtr, check As Long) As Long
Button_SetCheck = CLng(SendMessage(hWnd, BM_SETCHECK, check, ByVal 0&))
End Function
Public Function SetButtonStyle(hWnd As LongPtr, dwNewStyle As ButtonStyles, Optional bAdd As Boolean = True) As Long
Dim dwStyle As Long
If bAdd Then
    dwStyle = CLng(GetWindowLong(hWnd, GWL_STYLE))
End If
dwStyle = dwStyle Or dwNewStyle
SetButtonStyle = CLng(SetWindowLong(hWnd, GWL_STYLE, dwStyle))
End Function

Public Function PropSheet_SetCurSel(hDlg As LongPtr, hPage As LongPtr, index As Long) As Long
	Return CLng(SendMessage(hDlg, PSM_SETCURSEL, index, ByVal hPage))
End Function
Public Function PropSheet_RemovePage(hDlg As LongPtr, hPage As LongPtr, index As Long) As Long
    Return CLng(SendMessage(hDlg, PSM_REMOVEPAGE, index, ByVal hPage))
End Function
Public Function PropSheet_AddPage(hDlg As LongPtr, hPage As LongPtr) As Long
    Return CLng(SendMessage(hDlg, PSM_ADDPAGE, 0, ByVal hPage))
End Function
Public Function PropSheet_Changed(hDlg As LongPtr, hWnd As LongPtr) As Long
    Return CLng(SendMessage(hDlg, PSM_CHANGED, hWnd, ByVal 0))
End Function
Public Function PropSheet_RestartWindows(hDlg As LongPtr) As Long
    Return CLng(SendMessage(hDlg, PSM_RESTARTWINDOWS, 0, ByVal 0))
End Function
Public Function PropSheet_RebootSystem(hDlg As LongPtr) As Long
    Return CLng(SendMessage(hDlg, PSM_REBOOTSYSTEM, 0, ByVal 0))
End Function
Public Function PropSheet_CancelToClose(hDlg As LongPtr) As Long
    Return CLng(PostMessage(hDlg, PSM_CANCELTOCLOSE, 0, ByVal 0))
End Function
Public Function PropSheet_QuerySiblings(hDlg As LongPtr, wParam As LongPtr, lParam As LongPtr) As Long
    Return CLng(SendMessage(hDlg, PSM_QUERYSIBLINGS, wParam, ByVal lParam))
End Function
Public Function PropSheet_Unchanged(hDlg As LongPtr, hWnd As LongPtr) As Long
    Return CLng(SendMessage(hDlg, PSM_UNCHANGED, hWnd, ByVal 0))
End Function
Public Function PropSheet_Apply(hDlg As LongPtr) As Long
    Return CLng(SendMessage(hDlg, PSM_APPLY, 0, ByVal 0))
End Function
Public Function PropSheet_SetTitle(hDlg As LongPtr, wStyle As Long, lpszText As LongPtr) As Long
    Return CLng(SendMessage(hDlg, PSM_SETTITLE, wStyle, ByVal lpszText))
End Function
Public Function PropSheet_SetWizButtons(hDlg As LongPtr, dwFlag As PSWIZBUTTONFLAGS, dwButtons As PSWIZBUTTONS) As Long
    Return CLng(PostMessage(hDlg, PSM_SETWIZBUTTONS, dwFlag, ByVal dwButtons))
End Function
Public Function PropSheet_PressButton(hDlg As LongPtr, iButton As PSBUTTONS) As Long
    Return CLng(PostMessage(hDlg, PSM_PRESSBUTTON, iButton, ByVal 0))
End Function
Public Function PropSheet_SetCurSelByID(hDlg As LongPtr, id As LongPtr) As Long
    Return CLng(SendMessage(hDlg, PSM_SETCURSELID, 0, ByVal id))
End Function
Public Function PropSheet_SetFinishText(hDlg As LongPtr, lpszText As LongPtr) As Long
    Return CLng(SendMessage(hDlg, PSM_SETFINISHTEXT, 0, ByVal lpszText))
End Function
Public Function PropSheet_GetTabControl(hDlg As LongPtr) As LongPtr
    Return SendMessage(hDlg, PSM_GETTABCONTROL, 0, ByVal 0)
End Function
Public Function PropSheet_IsDialogMessage(hDlg As LongPtr, pMsg As MSG) As BOOL
    Return CLng(SendMessage(hDlg, PSM_ISDIALOGMESSAGE, 0, pMsg))
End Function
Public Function PropSheet_GetCurrentPageHwnd(hDlg As LongPtr) As LongPtr
    Return SendMessage(hDlg, PSM_GETCURRENTPAGEHWND, 0, ByVal 0)
End Function
Public Function PropSheet_InsertPage(hDlg As LongPtr, index As Long, hPage As LongPtr) As Long
    Return CLng(SendMessage(hDlg, PSM_INSERTPAGE, index, ByVal hPage))
End Function
Public Function PropSheet_SetHeaderTitle(hDlg As LongPtr, index As Long, lpszText As LongPtr) As Long
    Return CLng(SendMessage(hDlg, PSM_SETHEADERTITLE, index, ByVal lpszText))
End Function
Public Function PropSheet_SetHeaderSubTitle(hDlg As LongPtr, index As Long, lpszText As LongPtr) As Long
    Return CLng(SendMessage(hDlg, PSM_SETHEADERSUBTITLE, index, ByVal lpszText))
End Function
Public Function PropSheet_HwndToIndex(hDlg As LongPtr, hWnd As LongPtr) As Long
    Return CLng(SendMessage(hDlg, PSM_HWNDTOINDEX, hWnd, ByVal 0))
End Function
Public Function PropSheet_IndexToHwnd(hDlg As LongPtr, i As Long) As LongPtr
    Return SendMessage(hDlg, PSM_INDEXTOHWND, i, ByVal 0)
End Function
Public Function PropSheet_PageToIndex(hDlg As LongPtr, hPage As LongPtr) As Long
    Return CLng(SendMessage(hDlg, PSM_PAGETOINDEX, 0, ByVal hPage))
End Function
Public Function PropSheet_IndexToPage(hDlg As LongPtr, i As Long) As LongPtr
    Return SendMessage(hDlg, PSM_INDEXTOPAGE, i, ByVal 0)
End Function
Public Function PropSheet_IdToIndex(hDlg As LongPtr, id As LongPtr) As Long
    Return CLng(SendMessage(hDlg, PSM_IDTOINDEX, 0, ByVal id))
End Function
Public Function PropSheet_IndexToId(hDlg As LongPtr, i As Long) As LongPtr
    Return SendMessage(hDlg, PSM_INDEXTOID, i, ByVal 0)
End Function
Public Function PropSheet_GetResult(hDlg As LongPtr) As LongPtr
    Return SendMessage(hDlg, PSM_GETRESULT, 0, ByVal 0)
End Function
Public Function PropSheet_RecalcPageSizes(hDlg As LongPtr) As Long
    Return CLng(SendMessage(hDlg, PSM_RECALCPAGESIZES, 0, ByVal 0))
End Function
Public Function PropSheet_SetNextText(hDlg As LongPtr, lpszText As LongPtr) As Long
    Return CLng(SendMessage(hDlg, PSM_SETNEXTTEXT, 0, ByVal lpszText))
End Function
Public Function PropSheet_ShowWizButtons(hDlg As LongPtr, dwFlag As PSWIZBUTTONS, dwButtons As PSWIZBUTTONS) As Long
    Return CLng(PostMessage(hDlg, PSM_SHOWWIZBUTTONS, dwFlag, ByVal dwFlag))
End Function
Public Function PropSheet_EnableWizButtons(hDlg As LongPtr, dwFlag As PSWIZBUTTONS, dwButtons As PSWIZBUTTONS) As Long
    Return CLng(PostMessage(hDlg, PSM_ENABLEWIZBUTTONS, dwFlag, ByVal dwFlag))
End Function
Public Function PropSheet_SetButtonText(hDlg As LongPtr, dwButton As PSBUTTONS, lpszText As LongPtr) As Long
    Return CLng(SendMessage(hDlg, PSM_SETBUTTONTEXT, dwButton, ByVal lpszText))
End Function




Public Function ImageList_AddIcon(himl As LongPtr, hIcon As LongPtr) As Long
  ImageList_AddIcon = ImageList_ReplaceIcon(himl, -1, hIcon)
End Function

Public Function ImageList_RemoveAll(himl As LongPtr) As Long
  ImageList_RemoveAll = ImageList_Remove(himl, -1)
End Function

' HINSTANCE hi - This parameter is not used and should always be zero.
Public Function ImageList_ExtractIcon(hi As LongPtr, himl As LongPtr, i As Long) As LongPtr
  ImageList_ExtractIcon = ImageList_GetIcon(himl, i, 0)
End Function

Public Function ImageList_LoadBitmap(hi As LongPtr, lpbmp As LongPtr, CX As Long, cGrow As Long, crMask As Long) As LongPtr
  ImageList_LoadBitmap = ImageList_LoadImage(hi, lpbmp, CX, cGrow, crMask, IMAGE_BITMAP, 0)
End Function


' ============================================================
' listview macros
Public Function ListView_ApproximateViewRect(hWnd As LongPtr, iWidth As Long, _
                                                                      iHeight As Long, iCount As Long) As LongPtr
  ListView_ApproximateViewRect = SendMessage(hWnd, _
                                                                          LVM_APPROXIMATEVIEWRECT, _
                                                                          ByVal iCount, _
                                                                          ByVal MAKELPARAM(iWidth, iHeight))
End Function
Public Function ListView_Arrange(hwndLV As LongPtr, code As LVA_Flags) As Boolean
  ListView_Arrange = SendMessage(hwndLV, LVM_ARRANGE, ByVal code, 0)
End Function
Public Function ListView_CreateDragImage(hWnd As LongPtr, i As Long, lpptUpLeft As POINT) As LongPtr
  ListView_CreateDragImage = SendMessage(hWnd, LVM_CREATEDRAGIMAGE, ByVal i, lpptUpLeft)
End Function
Public Function ListView_DeleteItem(hWnd As LongPtr, i As Long) As Boolean
  ListView_DeleteItem = SendMessage(hWnd, LVM_DELETEITEM, ByVal i, 0)
End Function
Public Function ListView_EditLabel(hwndLV As LongPtr, i As Long) As LongPtr
  ListView_EditLabel = SendMessage(hwndLV, LVM_EDITLABEL, ByVal i, 0)
End Function
Public Function ListView_GetBkColor(hWnd As LongPtr) As LongPtr
  ListView_GetBkColor = SendMessage(hWnd, LVM_GETBKCOLOR, 0, 0)
End Function
 
Public Function ListView_SetBkColor(hWnd As LongPtr, clrBk As Long) As Boolean
  ListView_SetBkColor = SendMessage(hWnd, LVM_SETBKCOLOR, 0, ByVal clrBk)
End Function
Public Function ListView_SetView(hWnd As LongPtr, iView As LV_VIEW) As LongPtr
  ListView_SetView = SendMessage(hWnd, LVM_SETVIEW, iView, ByVal 0&)
End Function
Public Function ListView_SetWorkAreas(hWnd As LongPtr, nWorkAreas As Long, prc() As RECT) As Boolean
  ListView_SetWorkAreas = SendMessage(hWnd, LVM_SETWORKAREAS, ByVal nWorkAreas, prc(0))
End Function

Public Function ListView_GetWorkAreas(hWnd As LongPtr, nWorkAreas As Long, prc() As RECT) As Boolean
  ListView_GetWorkAreas = SendMessage(hWnd, LVM_GETWORKAREAS, ByVal nWorkAreas, prc(0))
End Function

Public Function ListView_GetNumberOfWorkAreas(hWnd As LongPtr, pnWorkAreas As Long) As Boolean
  ListView_GetNumberOfWorkAreas = SendMessage(hWnd, LVM_GETNUMBEROFWORKAREAS, 0, pnWorkAreas)
End Function

Public Function ListView_GetSelectionMark(hWnd As LongPtr) As LongPtr
  ListView_GetSelectionMark = SendMessage(hWnd, LVM_GETSELECTIONMARK, 0, 0)
End Function

Public Function ListView_SetSelectionMark(hWnd As LongPtr, i As Long) As LongPtr
  ListView_SetSelectionMark = SendMessage(hWnd, LVM_SETSELECTIONMARK, 0, ByVal i)
End Function

Public Function ListView_SetHoverTime(hwndLV As LongPtr, dwHoverTimeMs As Long) As LongPtr
  ListView_SetHoverTime = SendMessage(hwndLV, LVM_SETHOVERTIME, 0, ByVal dwHoverTimeMs)
End Function

Public Function ListView_GetHoverTime(hwndLV As LongPtr) As LongPtr
  ListView_GetHoverTime = SendMessage(hwndLV, LVM_GETHOVERTIME, 0, 0)
End Function
Public Function ListView_GetStringWidth(hwndLV As LongPtr, psz As String) As LongPtr
  ListView_GetStringWidth = SendMessage(hwndLV, LVM_GETSTRINGWIDTH, 0, ByVal psz)
End Function
 Public Function ListView_GetSubItemRect(hWnd As LongPtr, iItem As Long, iSubItem As Long, _
                                                              code As LVIR_Flags, prc As RECT) As Boolean
  prc.Top = iSubItem
  prc.Left = code
  ListView_GetSubItemRect = SendMessage(hWnd, LVM_GETSUBITEMRECT, ByVal iItem, prc)
End Function
Public Function ListView_GetTextBkColor(hWnd As LongPtr) As LongPtr
  ListView_GetTextBkColor = SendMessage(hWnd, LVM_GETTEXTBKCOLOR, 0, 0)
End Function
 
Public Function ListView_SetTextBkColor(hWnd As LongPtr, ClrTextBk As Long) As Boolean
  ListView_SetTextBkColor = SendMessage(hWnd, LVM_SETTEXTBKCOLOR, 0, ByVal ClrTextBk)
End Function
Public Function ListView_GetTextColor(hWnd As LongPtr) As LongPtr
  ListView_GetTextColor = SendMessage(hWnd, LVM_GETTEXTCOLOR, 0, 0)
End Function
 
Public Function ListView_SetTextColor(hWnd As LongPtr, ClrText As Long) As Boolean
  ListView_SetTextColor = SendMessage(hWnd, LVM_SETTEXTCOLOR, 0, ByVal ClrText)
End Function
Public Function ListView_GetTopIndex(hwndLV As LongPtr) As LongPtr
  ListView_GetTopIndex = SendMessage(hwndLV, LVM_GETTOPINDEX, 0, 0)
End Function
 
Public Function ListView_SubItemHitTest(hWnd As LongPtr, plvhti As LVHITTESTINFO) As LongPtr
  ListView_SubItemHitTest = SendMessage(hWnd, LVM_SUBITEMHITTEST, 0, plvhti)
End Function


Public Function ListView_SetToolTips(hwndLV As LongPtr, hwndNewHwnd As LongPtr) As LongPtr
  ListView_SetToolTips = SendMessage(hwndLV, LVM_SETTOOLTIPS, ByVal hwndNewHwnd, 0)
End Function

Public Function ListView_GetToolTips(hwndLV As LongPtr) As LongPtr
  ListView_GetToolTips = SendMessage(hwndLV, LVM_GETTOOLTIPS, 0, 0)
End Function
Public Function ListView_GetISearchString(hwndLV As LongPtr, lpsz As String) As Boolean
  ListView_GetISearchString = SendMessage(hwndLV, LVM_GETISEARCHSTRING, 0, ByVal lpsz)
End Function


Public Function ListView_SetBkImage(hWnd As LongPtr, plvbki As LVBKIMAGE) As Boolean
  ListView_SetBkImage = SendMessage(hWnd, LVM_SETBKIMAGE, 0, plvbki)
End Function

Public Function ListView_GetBkImage(hWnd As LongPtr, plvbki As LVBKIMAGE) As Boolean
  ListView_GetBkImage = SendMessage(hWnd, LVM_GETBKIMAGE, 0, plvbki)
End Function
Public Function ListView_SetUnicodeFormat(hWnd As LongPtr, fUnicode As Boolean) As Boolean
  ListView_SetUnicodeFormat = SendMessage(hWnd, LVM_SETUNICODEFORMAT, ByVal fUnicode, 0)
End Function

Public Function ListView_GetUnicodeFormat(hWnd As LongPtr) As Boolean
  ListView_GetUnicodeFormat = SendMessage(hWnd, LVM_GETUNICODEFORMAT, 0, 0)
End Function

Public Function ListView_SetExtendedListViewStyleEx(hwndLV As LongPtr, dwMask As Long, dw As Long) As LongPtr
  ListView_SetExtendedListViewStyleEx = SendMessage(hwndLV, LVM_SETEXTENDEDLISTVIEWSTYLE, _
                                                                                    ByVal dwMask, ByVal dw)
End Function

Public Function ListView_SetColumnOrderArray(hWnd As LongPtr, iCount As Long, lpiArray As LongPtr) As Boolean
  ListView_SetColumnOrderArray = SendMessage(hWnd, LVM_SETCOLUMNORDERARRAY, ByVal iCount, lpiArray)
End Function

Public Function ListView_GetColumnOrderArray(hWnd As LongPtr, iCount As Long, lpiArray As LongPtr) As Boolean
  ListView_GetColumnOrderArray = SendMessage(hWnd, LVM_GETCOLUMNORDERARRAY, ByVal iCount, lpiArray)
End Function
Public Function ListView_SetImageList(hWnd As LongPtr, himl As LongPtr, iImageList As LV_ImageList) As LongPtr
  ListView_SetImageList = SendMessage(hWnd, LVM_SETIMAGELIST, ByVal iImageList, ByVal himl)
End Function
Public Function ListView_GetImageList(hWnd As LongPtr, iImageList As LV_ImageList) As LongPtr
  ListView_GetImageList = SendMessage(hWnd, LVM_GETIMAGELIST, ByVal iImageList, 0)
End Function
 
Public Function ListView_GetHeader(hWnd As LongPtr) As LongPtr
  ListView_GetHeader = SendMessage(hWnd, LVM_GETHEADER, 0, 0)
End Function
Public Function ListView_GetItem(hWnd As LongPtr, pItem As LVITEM) As Boolean
  ListView_GetItem = SendMessage(hWnd, LVM_GETITEM, 0, pItem)
End Function
 
Public Function ListView_SetItem(hWnd As LongPtr, pItem As LVITEM) As Boolean
  ListView_SetItem = SendMessage(hWnd, LVM_SETITEM, 0, pItem)
End Function
'
Public Function ListView_SetCallbackMask(hWnd As LongPtr, Mask As Long) As Boolean
  ListView_SetCallbackMask = SendMessage(hWnd, LVM_SETCALLBACKMASK, ByVal Mask, 0)
End Function
Public Function ListView_GetCallbackMask(hWnd As LongPtr) As LongPtr   ' LVStyles
  ListView_GetCallbackMask = SendMessage(hWnd, LVM_GETCALLBACKMASK, 0, 0)
End Function
Public Function ListView_GetColumn(hWnd As LongPtr, iCol As Long, pcol As LVCOLUMN) As Boolean
  ListView_GetColumn = SendMessage(hWnd, LVM_GETCOLUMN, ByVal iCol, pcol)
End Function
 
Public Function ListView_SetColumn(hWnd As LongPtr, iCol As Long, pcol As LVCOLUMN) As Boolean
  ListView_SetColumn = SendMessage(hWnd, LVM_SETCOLUMN, ByVal iCol, pcol)
End Function
Public Function ListView_GetCountPerPage(hwndLV As LongPtr) As LongPtr
  ListView_GetCountPerPage = SendMessage(hwndLV, LVM_GETCOUNTPERPAGE, 0, 0)
End Function
 
Public Function ListView_GetOrigin(hwndLV As LongPtr, ppt As POINT) As Boolean
  ListView_GetOrigin = SendMessage(hwndLV, LVM_GETORIGIN, 0, ppt)
End Function
Public Function ListView_GetEditControl(hwndLV As LongPtr) As LongPtr
  ListView_GetEditControl = SendMessage(hwndLV, LVM_GETEDITCONTROL, 0, 0)
End Function
Public Function ListView_GetExtendedListViewStyle(hwndLV As LongPtr) As LongPtr
  ListView_GetExtendedListViewStyle = SendMessage(hwndLV, LVM_GETEXTENDEDLISTVIEWSTYLE, 0, 0)
End Function
Public Function ListView_SetHotItem(hWnd As LongPtr, i As Long) As LongPtr
  ListView_SetHotItem = SendMessage(hWnd, LVM_SETHOTITEM, ByVal i, 0)
End Function
 
Public Function ListView_GetHotItem(hWnd As LongPtr) As LongPtr
  ListView_GetHotItem = SendMessage(hWnd, LVM_GETHOTITEM, 0, 0)
End Function
 
Public Function ListView_SetHotCursor(hWnd As LongPtr, hcur As LongPtr) As LongPtr
  ListView_SetHotCursor = SendMessage(hWnd, LVM_SETHOTCURSOR, 0, ByVal hcur)
End Function
 
Public Function ListView_GetHotCursor(hWnd As LongPtr) As LongPtr
  ListView_GetHotCursor = SendMessage(hWnd, LVM_GETHOTCURSOR, 0, 0)
End Function

Public Sub ListView_SetItemText(hwndLV As LongPtr, i As Long, iSubItem As Long, pszText As String)
  Dim lvi As LVITEM
  lvi.iSubItem = iSubItem
  lvi.pszText = StrPtr(pszText)
  lvi.cchTextMax = Len(pszText) + 1
  SendMessage hwndLV, LVM_SETITEMTEXT, ByVal i, lvi
End Sub
Public Function ListView_SetIconSpacing(hwndLV As LongPtr, CX As Long, CY As Long) As LongPtr
  ListView_SetIconSpacing = SendMessage(hwndLV, LVM_SETICONSPACING, 0, ByVal MAKELONG(CX, CY))
End Function
Public Sub ListView_SetItemCount(hwndLV As LongPtr, cItems As Long)
  SendMessage hwndLV, LVM_SETITEMCOUNT, ByVal cItems, 0
End Sub

Public Sub ListView_SetItemCountEx(hwndLV As LongPtr, cItems As Long, dwFlags As LVSIC_Flags)
  SendMessage hwndLV, LVM_SETITEMCOUNT, ByVal cItems, ByVal dwFlags
End Sub
'

' ListView_GetNextItem

Public Function ListView_GetNextItem(hWnd As LongPtr, i As Long, Flags As LVNI_Flags) As LongPtr
  ListView_GetNextItem = SendMessage(hWnd, LVM_GETNEXTITEM, ByVal i, ByVal Flags)    ' ByVal MAKELPARAM(flags, 0))
End Function

' Returns the index of the item that is selected and has the focus rectangle (user-defined)

Public Function ListView_GetSelectedItem(hwndLV As LongPtr) As LongPtr
  ListView_GetSelectedItem = ListView_GetNextItem(hwndLV, -1, LVNI_FOCUSED Or LVNI_SELECTED)
End Function
Public Function ListView_FindItem(hWnd As LongPtr, iStart As Long, plvfi As LVFINDINFOA) As LongPtr
  ListView_FindItem = SendMessage(hWnd, LVM_FINDITEM, ByVal iStart, plvfi)
End Function
Public Function ListView_FindItemW(hWnd As LongPtr, iStart As Long, plvfi As LVFINDINFOW) As LongPtr
  ListView_FindItemW = SendMessageW(hWnd, LVM_FINDITEM, ByVal iStart, plvfi)
End Function
Public Function ListView_GetItemRect(hWnd As LongPtr, i As Long, prc As RECT, code As LVIR_Flags) As Boolean
  prc.Left = code
  ListView_GetItemRect = SendMessage(hWnd, LVM_GETITEMRECT, ByVal i, prc)
End Function
Public Function ListView_GetCheckState(hwndLV As LongPtr, iIndex As Long) As LongPtr   ' updated
  Dim dwState As Long
  dwState = CLng(SendMessage(hwndLV, LVM_GETITEMSTATE, ByVal iIndex, ByVal LVIS_STATEIMAGEMASK))
  ListView_GetCheckState = (dwState \ 2 ^ 12) - 1
  '((((UINT)(SendMessage(hwndLV, LVM_GETITEMSTATE, ByVal i, LVIS_STATEIMAGEMASK))) >> 12) -1)
End Function
Public Function ListView_SetCheckState(hwndLV As LongPtr, i As Long, fCheck As Long) As LongPtr
'#define ListView_SetCheckState(hwndLV, i, fCheck) \
'  ListView_SetItemState(hwndLV, i, INDEXTOSTATEIMAGEMASK((fCheck)?2:1), LVIS_STATEIMAGEMASK)
ListView_SetCheckState = ListView_SetItemState(hwndLV, i, INDEXTOSTATEIMAGEMASK(CLng(IIf(fCheck, 2, 1))), LVIS_STATEIMAGEMASK)
End Function

Public Function ListView_GetItemCount(hWnd As LongPtr) As LongPtr
  ListView_GetItemCount = SendMessage(hWnd, LVM_GETITEMCOUNT, 0, 0)
End Function
Public Function ListView_GetItemPosition(hwndLV As LongPtr, i As Long, ppt As POINT) As Boolean
  ListView_GetItemPosition = SendMessage(hwndLV, LVM_GETITEMPOSITION, ByVal i, ppt)
End Function
Public Function ListView_SetItemPosition(hwndLV As LongPtr, i As Long, X As Long, Y As Long) As Boolean
  ListView_SetItemPosition = SendMessage(hwndLV, LVM_SETITEMPOSITION, ByVal i, ByVal MAKELPARAM(X, Y))
End Function
Public Sub ListView_SetItemPosition32(hwndLV As LongPtr, i As Long, X As Long, Y As Long)
  Dim ptNewPos As POINT
  ptNewPos.x = X
  ptNewPos.y = Y
  
  SendMessage hwndLV, LVM_SETITEMPOSITION32, ByVal i, ptNewPos
End Sub
Public Function ListView_SetSelectedItem(hwndLV As LongPtr, i As Long) As Boolean
  ListView_SetSelectedItem = ListView_SetItemState(hwndLV, i, LVIS_FOCUSED Or LVIS_SELECTED, _
                                                                                                     LVIS_FOCUSED Or LVIS_SELECTED)
End Function
Public Function ListView_Update(hwndLV As LongPtr, i As Long) As Boolean
  ListView_Update = SendMessage(hwndLV, LVM_UPDATE, ByVal i, 0)
End Function

Public Function ListView_GetItemSpacing(hwndLV As LongPtr, fSmall As Boolean) As LongPtr
  ListView_GetItemSpacing = SendMessage(hwndLV, LVM_GETITEMSPACING, ByVal fSmall, 0)
End Function
Public Function ListView_GetItemState(hwndLV As LongPtr, i As Long, Mask As LVITEM_state) As LongPtr   ' LVITEM_state
  ListView_GetItemState = SendMessage(hwndLV, LVM_GETITEMSTATE, ByVal i, ByVal Mask)
End Function
Public Function ListView_GetItemText(hwndLV As LongPtr, i As Long, iSubItem As Long, _
                                                     pszText As String, cchTextMax As Long) As Long
  Dim lvi As LVITEM
  lvi.iSubItem = iSubItem
  lvi.cchTextMax = cchTextMax
  lvi.pszText = StrPtr(pszText)
  Return CLng(SendMessage(hwndLV, LVM_GETITEMTEXT, ByVal i, lvi))
End Function


Public Function ListView_HitTest(hwndLV As LongPtr, pInfo As LVHITTESTINFO) As LongPtr
  ListView_HitTest = SendMessage(hwndLV, LVM_HITTEST, 0, pInfo)
End Function
 
Public Function ListView_InsertItem(hWnd As LongPtr, pItem As LVITEM) As LongPtr
  ListView_InsertItem = SendMessage(hWnd, LVM_INSERTITEM, 0, pItem)
End Function

Public Function ListView_DeleteColumn(hWnd As LongPtr, iCol As Long) As Boolean
  ListView_DeleteColumn = SendMessage(hWnd, LVM_DELETECOLUMN, ByVal iCol, 0)
End Function

Public Function ListView_EnsureVisible(hwndLV As LongPtr, i As Long, fPartialOK As Long) As Boolean
  ListView_EnsureVisible = SendMessage(hwndLV, LVM_ENSUREVISIBLE, ByVal i, ByVal fPartialOK)   ' ByVal MAKELPARAM(Abs(fPartialOK), 0))
End Function

Public Function ListView_InsertColumn(hWnd As LongPtr, iCol As Long, pcol As LVCOLUMN) As LongPtr
  ListView_InsertColumn = SendMessage(hWnd, LVM_INSERTCOLUMN, ByVal iCol, pcol)
End Function
Public Function ListView_Scroll(hwndLV As LongPtr, DX As Long, DY As Long) As Boolean
  ListView_Scroll = SendMessage(hwndLV, LVM_SCROLL, ByVal DX, ByVal DY)
End Function
 

 Public Function ListView_DeleteAllItems(hWnd As LongPtr) As Boolean
  ListView_DeleteAllItems = SendMessage(hWnd, LVM_DELETEALLITEMS, 0, 0)
End Function

Public Function ListView_GetColumnWidth(hWnd As LongPtr, iCol As Long) As LongPtr
  ListView_GetColumnWidth = SendMessage(hWnd, LVM_GETCOLUMNWIDTH, ByVal iCol, 0)
End Function
 
Public Function ListView_SetColumnWidth(hWnd As LongPtr, iCol As Long, CX As Long) As Boolean
  ListView_SetColumnWidth = SendMessage(hWnd, LVM_SETCOLUMNWIDTH, ByVal iCol, ByVal MAKELPARAM(CX, 0))
End Function
Public Function ListView_RedrawItems(hwndLV As LongPtr, iFirst As Long, iLast As Long) As Boolean
  ListView_RedrawItems = SendMessage(hwndLV, LVM_REDRAWITEMS, ByVal iFirst, ByVal iLast)
End Function

Public Function ListView_GetSelectedCount(hwndLV As LongPtr) As LongPtr
  ListView_GetSelectedCount = SendMessage(hwndLV, LVM_GETSELECTEDCOUNT, 0, 0)
End Function
Public Function ListView_GetView(hWnd As LongPtr) As LongPtr

ListView_GetView = SendMessage(hWnd, LVM_GETVIEW, 0, ByVal 0&)

End Function
Public Function ListView_GetViewRect(hWnd As LongPtr, prc As RECT) As Boolean
  ListView_GetViewRect = SendMessage(hWnd, LVM_GETVIEWRECT, 0, prc)
End Function
' ListView_SetItemState

Public Function ListView_SetItemState(hwndLV As LongPtr, i As Long, State As LVITEM_state, Mask As LVITEM_state) As Boolean
  Dim lvi As LVITEM
  lvi.State = State
  lvi.StateMask = Mask
  ListView_SetItemState = SendMessage(hwndLV, LVM_SETITEMSTATE, ByVal i, lvi)
End Function

' Selects all listview items. The item with the focus rectangle maintains it (user-defined).

Public Function ListView_SelectAll(hwndLV As LongPtr) As Boolean
  ListView_SelectAll = ListView_SetItemState(hwndLV, -1, LVIS_SELECTED, LVIS_SELECTED)
End Function
Public Function ListView_SelectNone(hwndLV As LongPtr) As Boolean
  Dim lv As LVITEM
   
   With lv
      .Mask = LVIF_STATE
      .State = 0
      .StateMask = LVIS_SELECTED
   End With
      
   ListView_SelectNone = SendMessage(hwndLV, LVM_SETITEMSTATE, -1, lv)

End Function
 
' Selects the specified item and gives it the focus rectangle.
' does not de-select any currently selected items (user-defined).

Public Function ListView_SetFocusedItem(hwndLV As LongPtr, i As Long) As Boolean
  ListView_SetFocusedItem = ListView_SetItemState(hwndLV, i, LVIS_FOCUSED Or LVIS_SELECTED, LVIS_FOCUSED Or LVIS_SELECTED)
End Function

Public Function ListView_SortItems(hwndLV As LongPtr, pfnCompare As LongPtr, lParamSort As LongPtr) As Boolean
  ListView_SortItems = SendMessage(hwndLV, LVM_SORTITEMS, ByVal lParamSort, ByVal pfnCompare)
End Function
Public Function ListView_SortItemsEx(hwndLV As LongPtr, pfnCompare As LongPtr, lParamSort As LongPtr) As Boolean
  ListView_SortItemsEx = SendMessage(hwndLV, LVM_SORTITEMSEX, ByVal lParamSort, ByVal pfnCompare)
End Function



Public Function ListView_SetExtendedStyle(hWnd As LongPtr, lST As LVStylesEx) As LongPtr
Dim lStyle As LongPtr

lStyle = SendMessage(hWnd, LVM_GETEXTENDEDLISTVIEWSTYLE, 0, 0)
lStyle = lStyle Or lST
Call SendMessage(hWnd, LVM_SETEXTENDEDLISTVIEWSTYLE, 0, ByVal lStyle)

End Function
Public Function ListView_GetStyle(hWnd As LongPtr) As LVStyles
ListView_GetStyle = CLng(GetWindowLong(hWnd, GWL_STYLE))
End Function
Public Function ListView_SetStyle(hWnd As LongPtr, dwStyle As LVStyles) As LongPtr
ListView_SetStyle = SetWindowLong(hWnd, GWL_STYLE, dwStyle)
End Function

'THE MACROS BELOW ARE ONLY FOR VISTA AND HIGHER
Public Function ListView_CancelEditLabel(hWnd As LongPtr) As LongPtr

ListView_CancelEditLabel = SendMessage(hWnd, LVM_CANCELEDITLABEL, 0, ByVal 0&)
End Function
Public Function ListView_EnableGroupView(hWnd As LongPtr, fEnable As Long) As LongPtr

ListView_EnableGroupView = SendMessage(hWnd, LVM_ENABLEGROUPVIEW, fEnable, ByVal 0&)
End Function
Public Function ListView_GetEmptyText(hWnd As LongPtr, cchText As Long, pszText As String) As LongPtr

ListView_GetEmptyText = SendMessage(hWnd, LVM_GETEMPTYTEXT, cchText, ByVal pszText)
End Function

Public Function ListView_GetFocusedGroup(hWnd As LongPtr) As LongPtr
'#define ListView_GetFocusedGroup(hwnd) \
'    SNDMSG((hwnd), LVM_GETFOCUSEDGROUP, 0, 0)
ListView_GetFocusedGroup = SendMessage(hWnd, LVM_GETFOCUSEDGROUP, 0, ByVal 0&)
End Function

Public Function ListView_GetFooterInfo(hWnd As LongPtr, plvfi As LongPtr) As LongPtr
'#define ListView_GetFooterInfo(hwnd, plvfi) \
'    (BOOL)SNDMSG((hwnd), LVM_GETFOOTERINFO, (WPARAM)(0), (LPARAM)(plvfi))
ListView_GetFooterInfo = SendMessage(hWnd, LVM_GETFOOTERINFO, 0, ByVal plvfi)
End Function
Public Function ListView_GetFooterItem(hWnd As LongPtr, iItem As Long, pfi As LVFOOTERITEM) As LongPtr
'#define ListView_GetFooterItem(hwnd, iItem, pfi) \
'    (BOOL)SNDMSG((hwnd), LVM_GETFOOTERITEM, (WPARAM)(iItem), (LPARAM)(pfi))
ListView_GetFooterItem = SendMessage(hWnd, LVM_GETFOOTERITEM, iItem, pfi)
End Function
Public Function ListView_GetFooterItemRect(hWnd As LongPtr, iItem As Long, prc As RECT) As LongPtr
'#define ListView_GetFooterItemRect(hwnd, iItem, prc) \
'    (BOOL)SNDMSG((hwnd), LVM_GETFOOTERITEMRECT, (WPARAM)(iItem), (LPARAM)(prc))
ListView_GetFooterItemRect = SendMessage(hWnd, LVM_GETFOOTERITEMRECT, iItem, prc)
End Function
Public Function ListView_GetFooterRect(hWnd As LongPtr, prc As RECT) As LongPtr
'#define ListView_GetFooterRect(hwnd, prc) \
'    (BOOL)SNDMSG((hwnd), LVM_GETFOOTERRECT, (WPARAM)(0), (LPARAM)(prc))
ListView_GetFooterRect = SendMessage(hWnd, LVM_GETFOOTERRECT, 0, prc)
End Function
Public Function ListView_GetGroupHeaderImageList(hWnd As LongPtr) As LongPtr
'#define ListView_GetGroupHeaderImageList(hwnd) \
'    (HIMAGELIST)SNDMSG((hwnd), LVM_GETIMAGELIST, (WPARAM)LVSIL_GROUPHEADER, 0L)
ListView_GetGroupHeaderImageList = SendMessage(hWnd, LVM_GETIMAGELIST, LVSIL_GROUPHEADER, ByVal 0&)
End Function
Public Function ListView_SetGroupHeaderImageList(hWnd As LongPtr, himl As LongPtr) As LongPtr
'#define ListView_GetGroupHeaderImageList(hwnd) \
'    (HIMAGELIST)SNDMSG((hwnd), LVM_GETIMAGELIST, (WPARAM)LVSIL_GROUPHEADER, 0L)
ListView_SetGroupHeaderImageList = SendMessage(hWnd, LVM_SETIMAGELIST, LVSIL_GROUPHEADER, ByVal himl)
End Function
Public Function ListView_GetGroupInfo(hWnd As LongPtr, iGroupId As Long, pgrp As LVGROUP) As LongPtr
'#define ListView_GetGroupInfo(hwnd, iGroupId, pgrp) \
'    SNDMSG((hwnd), LVM_GETGROUPINFO, (WPARAM)(iGroupId), (LPARAM)(pgrp))
ListView_GetGroupInfo = SendMessage(hWnd, LVM_GETGROUPINFO, iGroupId, pgrp)
End Function
Public Function ListView_SetGroupInfo(hWnd As LongPtr, iGroupId As Long, pgrp As LVGROUP) As LongPtr
'#define ListView_SetGroupInfo(hwnd, iGroupId, pgrp) \
'    SNDMSG((hwnd), LVM_SETGROUPINFO, (WPARAM)(iGroupId), (LPARAM)(pgrp))
ListView_SetGroupInfo = SendMessage(hWnd, LVM_SETGROUPINFO, iGroupId, pgrp)
End Function
Public Function ListView_GetGroupInfoByIndex(hWnd As LongPtr, iIndex As Long, pgrp As LVGROUP) As LongPtr
'#define ListView_GetGroupInfoByIndex(hwnd, iIndex, pgrp) \
'    SNDMSG((hwnd), LVM_GETGROUPINFOBYINDEX, (WPARAM)(iIndex), (LPARAM)(pgrp))
ListView_GetGroupInfoByIndex = SendMessage(hWnd, LVM_GETGROUPINFOBYINDEX, iIndex, pgrp)
End Function
Public Function ListView_SetGroupMetrics(hWnd As LongPtr, pGroupMetrics As LVGROUPMETRICS) As LongPtr
'#define ListView_SetGroupMetrics(hwnd, pGroupMetrics) \
'    SNDMSG((hwnd), LVM_SETGROUPMETRICS, 0, (LPARAM)(pGroupMetrics))
ListView_SetGroupMetrics = SendMessage(hWnd, LVM_SETGROUPMETRICS, 0, pGroupMetrics)
End Function
Public Function ListView_GetGroupMetrics(hWnd As LongPtr, pGroupMetrics As LVGROUPMETRICS) As LongPtr
'#define ListView_GetGroupMetrics(hwnd, pGroupMetrics) \
'    SNDMSG((hwnd), LVM_GETGROUPMETRICS, 0, (LPARAM)(pGroupMetrics))
ListView_GetGroupMetrics = SendMessage(hWnd, LVM_GETGROUPMETRICS, 0, pGroupMetrics)
End Function
Public Function ListView_GetGroupRect(hWnd As LongPtr, iGroup As Long, Item As LVGROUPRECT, rc As RECT) As LongPtr
        rc.Top = Item
        ListView_GetGroupRect = SendMessage(hWnd, LVM_GETGROUPRECT, iGroup, rc)
End Function
Public Function ListView_GetGroupCount(hWnd As LongPtr, iGroup As Long) As LongPtr
Dim LVG As LVGROUP
    LVG.Mask = LVGF_ITEMS
    LVG.cbSize = LenB(LVG)
    Call SendMessage(hWnd, LVM_GETGROUPINFO, iGroup, LVG)
ListView_GetGroupCount = LVG.cItems
End Function
Public Function ListView_GetGroupState(hWnd As LongPtr, dwGroupId As Long, dwMask As LVGROUPSTATE) As LongPtr
ListView_GetGroupState = SendMessage(hWnd, LVM_GETGROUPSTATE, dwGroupId, ByVal dwMask)
End Function

'#define ListView_SetGroupState(hwnd, dwGroupId, dwMask, dwState) \
'{ LVGROUP _macro_lvg;\
'  _macro_lvg.cbSize = sizeof(_macro_lvg);\
'  _macro_lvg.mask = LVGF_STATE;\
'  _macro_lvg.stateMask = dwMask;\
'  _macro_lvg.state = dwState;\
'  SNDMSG((hwnd), LVM_SETGROUPINFO, (WPARAM)(dwGroupId), (LPARAM)(LVGROUP *)&_macro_lvg);\
Public Function ListView_SetGroupState(hWnd As LongPtr, dwGroupId As Long, dwMask As LVGROUPSTATE, dwState As LVGROUPSTATE) As LongPtr
Dim LVG As LVGROUP
LVG.cbSize = LenB(LVG)
LVG.Mask = LVGF_STATE
LVG.StateMask = dwMask
LVG.State = dwState
ListView_SetGroupState = SendMessage(hWnd, LVM_SETGROUPINFO, dwGroupId, LVG)
End Function
Public Function ListView_GetInsertMark(hWnd As LongPtr, LVIM As LVINSERTMARK) As LongPtr
'#define ListView_GetInsertMark(hwnd, lvim) \
'    (BOOL)SNDMSG((hwnd), LVM_GETINSERTMARK, (WPARAM) 0, (LPARAM) (lvim))
ListView_GetInsertMark = SendMessage(hWnd, LVM_GETINSERTMARK, 0, LVIM)
End Function
Public Function ListView_SetInsertMark(hWnd As LongPtr, LVIM As LVINSERTMARK) As LongPtr
'#define ListView_SetInsertMark(hwnd, lvim) \
'    (BOOL)SNDMSG((hwnd), LVM_SETINSERTMARK, (WPARAM) 0, (LPARAM) (lvim))
ListView_SetInsertMark = SendMessage(hWnd, LVM_SETINSERTMARK, 0, LVIM)
End Function
Public Function ListView_GetInsertMarkColor(hWnd As LongPtr) As LongPtr
'#define ListView_GetInsertMarkColor(hwnd) \
'    (COLORREF)SNDMSG((hwnd), LVM_GETINSERTMARKCOLOR, (WPARAM)0, (LPARAM)0)
ListView_GetInsertMarkColor = SendMessage(hWnd, LVM_GETINSERTMARKCOLOR, 0, ByVal 0&)
End Function
Public Function ListView_SetInsertMarkColor(hWnd As LongPtr, Color As Long) As LongPtr
'#define ListView_SetInsertMarkColor(hwnd, color) \
'    (COLORREF)SNDMSG((hwnd), LVM_SETINSERTMARKCOLOR, (WPARAM)0, (LPARAM)(COLORREF)(color))
ListView_SetInsertMarkColor = SendMessage(hWnd, LVM_SETINSERTMARKCOLOR, 0, ByVal Color)
End Function
Public Function ListView_GetInsertMarkRect(hWnd As LongPtr, rc As RECT) As LongPtr
'#define ListView_GetInsertMarkRect(hwnd, rc) \
'    (int)SNDMSG((hwnd), LVM_GETINSERTMARKRECT, (WPARAM)0, (LPARAM)(LPRECT)(rc))
ListView_GetInsertMarkRect = SendMessage(hWnd, LVM_GETINSERTMARKRECT, 0, rc)
End Function
Public Function ListView_InsertMarkHitTest(hWnd As LongPtr, POINT As POINT, LVIM As LVINSERTMARK) As LongPtr
'#define ListView_InsertMarkHitTest(hwnd, point, lvim) \
'    (int)SNDMSG((hwnd), LVM_INSERTMARKHITTEST, (WPARAM)(LPPOINT)(point), (LPARAM)(LPLVINSERTMARK)(lvim))
ListView_InsertMarkHitTest = SendMessage(hWnd, LVM_INSERTMARKHITTEST, VarPtr(POINT), LVIM)
End Function
Public Function ListView_GetItemIndexRect(hWnd As LongPtr, lvii As LVITEMINDEX, iSubItem As Long, code As Long, prc As RECT) As LongPtr
'#define ListView_GetItemIndexRect(hwnd, plvii, iSubItem, code, prc) \
'        (BOOL)SNDMSG((hwnd), LVM_GETITEMINDEXRECT, (WPARAM)(LVITEMINDEX*)(plvii), \
'                ((prc) ? ((((LPRECT)(prc))->top = (iSubItem)), (((LPRECT)(prc))->left = (code)), (LPARAM)(prc)) : (LPARAM)(LPRECT)NULL))
prc.Top = iSubItem
prc.Left = code
ListView_GetItemIndexRect = SendMessage(hWnd, LVM_GETITEMINDEXRECT, VarPtr(lvii), prc)
End Function
Public Function ListView_GetNextItemIndex(hWnd As LongPtr, plvii As LVITEMINDEX, ByVal Flags As LVNI_Flags) As LongPtr
 '#define ListView_GetNextItemIndex(hwnd, plvii, flags) \
 '    (BOOL)SNDMSG((hwnd), LVM_GETNEXTITEMINDEX, (WPARAM)(LVITEMINDEX*)(plvii), MAKELPARAM((flags), 0))
 ListView_GetNextItemIndex = SendMessage(hWnd, LVM_GETNEXTITEMINDEX, VarPtr(plvii), ByVal Flags)
End Function
Public Function ListView_GetOutlineColor(hWnd As LongPtr) As LongPtr
'#define ListView_GetOutlineColor(hwnd) \
'    (COLORREF)SNDMSG((hwnd), LVM_GETOUTLINECOLOR, 0, 0)
ListView_GetOutlineColor = SendMessage(hWnd, LVM_GETOUTLINECOLOR, 0, ByVal 0&)
End Function
Public Function ListView_SetOutlineColor(hWnd As LongPtr, Color As Long) As LongPtr
'#define ListView_SetOutlineColor(hwnd, color) \
'    (COLORREF)SNDMSG((hwnd), LVM_SETOUTLINECOLOR, (WPARAM)0, (LPARAM)(COLORREF)(color))
ListView_SetOutlineColor = SendMessage(hWnd, LVM_SETOUTLINECOLOR, 0, ByVal Color)
End Function
Public Function ListView_GetSelectedColumn(hWnd As LongPtr) As LongPtr
'#define ListView_GetSelectedColumn(hwnd) \
'    (UINT)SNDMSG((hwnd), LVM_GETSELECTEDCOLUMN, 0, 0)
ListView_GetSelectedColumn = SendMessage(hWnd, LVM_GETSELECTEDCOLUMN, 0, ByVal 0&)
End Function
Public Function ListView_GetTileInfo(hWnd As LongPtr, pTI As LVTILEINFO) As LongPtr
'#define ListView_GetTileInfo(hwnd, pti) \
'    SNDMSG((hwnd), LVM_GETTILEINFO, 0, (LPARAM)(pti))
ListView_GetTileInfo = SendMessage(hWnd, LVM_GETTILEINFO, 0, pTI)
End Function
Public Function ListView_SetTileInfo(hWnd As LongPtr, pTI As LVTILEINFO) As LongPtr
'#define ListView_SetTileInfo(hwnd, pti) \
'    SNDMSG((hwnd), LVM_SETTILEINFO, 0, (LPARAM)(pti))
ListView_SetTileInfo = SendMessage(hWnd, LVM_SETTILEINFO, 0, pTI)
End Function
Public Function ListView_GetTileViewInfo(hWnd As LongPtr, ptvi As LVTILEVIEWINFO) As LongPtr
'#define ListView_GetTileViewInfo(hwnd, ptvi) \
'    SNDMSG((hwnd), LVM_GETTILEVIEWINFO, 0, (LPARAM)(ptvi))
ListView_GetTileViewInfo = SendMessage(hWnd, LVM_GETTILEVIEWINFO, 0, ptvi)
End Function
Public Function ListView_SetTileViewInfo(hWnd As LongPtr, ptvi As LVTILEVIEWINFO) As LongPtr
'#define ListView_SetTileViewInfo(hwnd, ptvi) \
'    SNDMSG((hwnd), LVM_SETTILEVIEWINFO, 0, (LPARAM)(ptvi))
ListView_SetTileViewInfo = SendMessage(hWnd, LVM_SETTILEVIEWINFO, 0, ptvi)
End Function
Public Function ListView_HasGroup(hWnd As LongPtr, dwGroupId As Long) As LongPtr
'#define ListView_HasGroup(hwnd, dwGroupId) \
'    SNDMSG((hwnd), LVM_HASGROUP, dwGroupId, 0)
ListView_HasGroup = SendMessage(hWnd, LVM_HASGROUP, dwGroupId, ByVal 0&)
End Function
Public Function ListView_HitTestEx(hwndLV As LongPtr, pInfo As LVHITTESTINFO) As LongPtr
'HitTestEx is used if you need the iGroup and iSubItem members filled
  ListView_HitTestEx = SendMessage(hwndLV, LVM_HITTEST, -1, pInfo)
End Function
Public Function ListView_InsertGroup(hWnd As LongPtr, Index As Long, pgrp As LVGROUP) As LongPtr
'#define ListView_InsertGroup(hwnd, index, pgrp) \
'    SNDMSG((hwnd), LVM_INSERTGROUP, (WPARAM)(index), (LPARAM)(pgrp))
ListView_InsertGroup = SendMessage(hWnd, LVM_INSERTGROUP, Index, pgrp)
End Function
Public Function ListView_InsertGroupSorted(hWnd As LongPtr, structInsert As LVINSERTGROUPSORTED) As LongPtr
'#define ListView_InsertGroupSorted(hwnd, structInsert) \
'    SNDMSG((hwnd), LVM_INSERTGROUPSORTED, (WPARAM)(structInsert), 0)
ListView_InsertGroupSorted = SendMessage(hWnd, LVM_INSERTGROUPSORTED, VarPtr(structInsert), ByVal 0&)
End Function
Public Function ListView_IsGroupViewEnabled(hWnd As LongPtr) As LongPtr
'#define ListView_IsGroupViewEnabled(hwnd) \
'    (BOOL)SNDMSG((hwnd), LVM_ISGROUPVIEWENABLED, 0, 0)
ListView_IsGroupViewEnabled = SendMessage(hWnd, LVM_ISGROUPVIEWENABLED, 0, ByVal 0&)
End Function
Public Function ListView_IsItemVisible(hWnd As LongPtr, Index As Long) As LongPtr
'#define ListView_IsItemVisible(hwnd, index) \
'    (UINT)SNDMSG((hwnd), LVM_ISITEMVISIBLE, (WPARAM)(index), (LPARAM)0)
ListView_IsItemVisible = SendMessage(hWnd, LVM_ISITEMVISIBLE, Index, ByVal 0&)
End Function
Public Function ListView_MapIDToIndex(hWnd As LongPtr, id As Long) As LongPtr
'#define ListView_MapIDToIndex(hwnd, id) \
'    (UINT)SNDMSG((hwnd), LVM_MAPIDTOINDEX, (WPARAM)(id), (LPARAM)0)
ListView_MapIDToIndex = SendMessage(hWnd, LVM_MAPIDTOINDEX, id, ByVal 0&)
End Function
Public Function ListView_MapIndexToID(hWnd As LongPtr, Index As Long) As LongPtr
'#define ListView_MapIndexToID(hwnd, index) \
'    (UINT)SNDMSG((hwnd), LVM_MAPINDEXTOID, (WPARAM)(index), (LPARAM)0)
ListView_MapIndexToID = SendMessage(hWnd, LVM_MAPINDEXTOID, Index, ByVal 0&)
End Function
Public Function ListView_MoveGroup(hWnd As LongPtr, iGroupId As Long, toIndex As Long) As LongPtr
'NOT IMPLEMENTED
'#define ListView_MoveGroup(hwnd, iGroupId, toIndex) \
'    SNDMSG((hwnd), LVM_MOVEGROUP, (WPARAM)(iGroupId), (LPARAM)(toIndex))
ListView_MoveGroup = SendMessage(hWnd, LVM_MOVEGROUP, iGroupId, ByVal toIndex)
End Function
Public Function ListView_MoveItemToGroup(hWnd As LongPtr, idItemFrom As Long, idGroupTo As Long) As LongPtr
'NOT IMPLEMENTED
'#define ListView_MoveItemToGroup(hwnd, idItemFrom, idGroupTo) \
'    SNDMSG((hwnd), LVM_MOVEITEMTOGROUP, (WPARAM)(idItemFrom), (LPARAM)(idGroupTo))
ListView_MoveItemToGroup = SendMessage(hWnd, LVM_MOVEITEMTOGROUP, idItemFrom, ByVal idGroupTo)
End Function
Public Function ListView_RemoveAllGroups(hWnd As LongPtr) As LongPtr
'#define ListView_RemoveAllGroups(hwnd) \
'    SNDMSG((hwnd), LVM_REMOVEALLGROUPS, 0, 0)
ListView_RemoveAllGroups = SendMessage(hWnd, LVM_REMOVEALLGROUPS, 0, ByVal 0&)
End Function
Public Function ListView_RemoveGroup(hWnd As LongPtr, iGroupId As Long) As LongPtr
'#define ListView_RemoveGroup(hwnd, iGroupId) \
'    SNDMSG((hwnd), LVM_REMOVEGROUP, (WPARAM)(iGroupId), 0)
ListView_RemoveGroup = SendMessage(hWnd, LVM_REMOVEGROUP, iGroupId, ByVal 0&)

End Function
Public Function ListView_SetInfoTip(hWnd As LongPtr, plvInfoTip As LVSETINFOTIP) As LongPtr
'#define ListView_SetInfoTip(hwndLV, plvInfoTip)\
'        (BOOL)SNDMSG((hwndLV), LVM_SETINFOTIP, (WPARAM)0, (LPARAM)(plvInfoTip))
ListView_SetInfoTip = SendMessage(hWnd, LVM_SETINFOTIP, 0, plvInfoTip)
End Function
Public Function ListView_SetItemIndexState(hwndLV As LongPtr, plvii As LVITEMINDEX, Data As Long, Mask As Long) As LongPtr
'#define ListView_SetItemIndexState(hwndLV, plvii, data, mask) \
'{ LV_ITEM _macro_lvi;\
'  _macro_lvi.stateMask = (mask);\
'  _macro_lvi.state = (data);\
'  SNDMSG((hwndLV), LVM_SETITEMINDEXSTATE, (WPARAM)(LVITEMINDEX*)(plvii), (LPARAM)(LV_ITEM *)&_macro_lvi);\}

Dim lvi As LVITEM
lvi.StateMask = Mask
lvi.State = Data
ListView_SetItemIndexState = SendMessage(hwndLV, LVM_SETITEMINDEXSTATE, VarPtr(plvii), lvi)
End Function
Public Function ListView_SetSelectedColumn(hWnd As LongPtr, iCol As Long) As LongPtr
'#define ListView_SetSelectedColumn(hwnd, iCol) \
'    SNDMSG((hwnd), LVM_SETSELECTEDCOLUMN, (WPARAM)(iCol), 0)
ListView_SetSelectedColumn = SendMessage(hWnd, LVM_SETSELECTEDCOLUMN, iCol, ByVal 0&)
End Function
'Public Function IID_IListViewFooter() As UUID
''{F0034DA8-8A22-4151-8F16-2EBA76565BCC}
'Static iid As UUID
' If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF0034DA8, CInt(&H8A22), CInt(&H4151), &H8F, &H16, &H2E, &HBA, &H76, &H56, &H5B, &HCC)
' IID_IListViewFooter = iid
'End Function
'

Public Function ListView_SetCheckStateEx(hwndLV As LongPtr, i As Long, nIndex As Long) As LongPtr
'#define ListView_SetCheckState(hwndLV, i, fCheck) \
'  ListView_SetItemState(hwndLV, i, INDEXTOSTATEIMAGEMASK((fCheck)?2:1), LVIS_STATEIMAGEMASK)
ListView_SetCheckStateEx = ListView_SetItemState(hwndLV, i, INDEXTOSTATEIMAGEMASK(nIndex), LVIS_STATEIMAGEMASK)
End Function



Public Function Header_GetItem(hwndHD As LongPtr, iItem As Long, phdi As HDITEM) As Boolean
  Header_GetItem = SendMessage(hwndHD, HDM_GETITEM, iItem, phdi)
End Function

Public Function Header_SetItem(hwndHD As LongPtr, i As Long, phdi As HDITEM) As Boolean
  Header_SetItem = SendMessage(hwndHD, HDM_SETITEMW, ByVal i, phdi)
End Function
 
Public Function Header_GetItemCount(hWnd As LongPtr) As Long

Header_GetItemCount = CLng(SendMessage(hWnd, HDM_GETITEMCOUNT, 0, 0))
End Function

Public Function Header_InsertItem(hWnd As LongPtr, i As Long, phdi As HDITEMW) As LongPtr
'#define Header_InsertItem(hwndHD, i, phdi) \
'    (int)SNDMSG((hwndHD), HDM_INSERTITEM, (WPARAM)(int)(i), (LPARAM)(const HD_ITEM *)(phdi))
Header_InsertItem = SendMessage(hWnd, HDM_INSERTITEM, i, phdi)
End Function
Public Function Header_DeleteItem(hWnd As LongPtr, i As Long) As LongPtr
'#define Header_DeleteItem(hwndHD, i) \
'    (BOOL)SNDMSG((hwndHD), HDM_DELETEITEM, (WPARAM)(int)(i), 0L)
Header_DeleteItem = SendMessage(hWnd, HDM_DELETEITEM, i, ByVal 0&)
End Function
Public Function Header_Layout(hWnd As LongPtr, playout As HDLAYOUT) As LongPtr
'#define Header_Layout(hwndHD, playout) \
'    (BOOL)SNDMSG((hwndHD), HDM_LAYOUT, 0, (LPARAM)(HD_LAYOUT *)(playout))
Header_Layout = SendMessage(hWnd, HDM_LAYOUT, 0, playout)
End Function
Public Function Header_GetItemRect(hWnd As LongPtr, iItem As Long, lpRC As RECT) As LongPtr
'#define Header_GetItemRect(hwnd, iItem, lprc) \
'        (BOOL)SNDMSG((hwnd), HDM_GETITEMRECT, (WPARAM)(iItem), (LPARAM)(lprc))
Header_GetItemRect = SendMessage(hWnd, HDM_GETITEMRECT, iItem, lpRC)
End Function
Public Function Header_SetImageList(hWnd As LongPtr, himl As LongPtr) As LongPtr
'#define Header_SetImageList(hwnd, himl) \
'        (HIMAGELIST)SNDMSG((hwnd), HDM_SETIMAGELIST, HDSIL_NORMAL, (LPARAM)(himl))
Header_SetImageList = SendMessage(hWnd, HDM_SETIMAGELIST, HDSIL_NORMAL, ByVal himl)
End Function
Public Function Header_SetStateImageList(hWnd As LongPtr, himl As LongPtr) As LongPtr
'#define Header_SetStateImageList(hwnd, himl) \
'        (HIMAGELIST)SNDMSG((hwnd), HDM_SETIMAGELIST, HDSIL_STATE, (LPARAM)(himl))
Header_SetStateImageList = SendMessage(hWnd, HDM_SETIMAGELIST, HDSIL_STATE, ByVal himl)
End Function
Public Function Header_GetImageList(hWnd As LongPtr) As LongPtr
'#define Header_GetImageList(hwnd) \
'        (HIMAGELIST)SNDMSG((hwnd), HDM_GETIMAGELIST, HDSIL_NORMAL, 0)
Header_GetImageList = SendMessage(hWnd, HDM_GETIMAGELIST, HDSIL_NORMAL, ByVal 0&)
End Function
Public Function Header_GetStateImageList(hWnd As LongPtr) As LongPtr
'#define Header_GetImageList(hwnd) \
'        (HIMAGELIST)SNDMSG((hwnd), HDM_GETIMAGELIST, HDSIL_STATE, 0)
Header_GetStateImageList = SendMessage(hWnd, HDM_GETIMAGELIST, HDSIL_STATE, ByVal 0&)
End Function
Public Function Header_OrderToIndex(hWnd As LongPtr, i As Long) As LongPtr
'#define Header_OrderToIndex(hwnd, i) \
'        (int)SNDMSG((hwnd), HDM_ORDERTOINDEX, (WPARAM)(i), 0)
Header_OrderToIndex = SendMessage(hWnd, HDM_ORDERTOINDEX, i, ByVal 0&)
End Function
Public Function Header_CreateDragImage(hWnd As LongPtr, i As Long) As LongPtr
'#define Header_CreateDragImage(hwnd, i) \
'        (HIMAGELIST)SNDMSG((hwnd), HDM_CREATEDRAGIMAGE, (WPARAM)(i), 0)
Header_CreateDragImage = SendMessage(hWnd, HDM_CREATEDRAGIMAGE, i, ByVal 0&)
End Function
Public Function Header_GetOrderArray(hWnd As LongPtr, iCount As Long, lpi As LongPtr) As LongPtr
'#define Header_GetOrderArray(hwnd, iCount, lpi) \
'        (BOOL)SNDMSG((hwnd), HDM_GETORDERARRAY, (WPARAM)(iCount), (LPARAM)(lpi))
Header_GetOrderArray = SendMessage(hWnd, HDM_GETORDERARRAY, iCount, lpi)
End Function
Public Function Header_SetOrderArray(hWnd As LongPtr, iCount As Long, lpi As LongPtr) As LongPtr
'#define Header_SetOrderArray(hwnd, iCount, lpi) \
'        (BOOL)SNDMSG((hwnd), HDM_SETORDERARRAY, (WPARAM)(iCount), (LPARAM)(lpi))
'// lparam = int array of size HDM_GETITEMCOUNT
'// the array specifies the order that all items should be displayed.
'// e.g.  { 2, 0, 1}
'// says the index 2 item should be shown in the 0ths position
'//      index 0 should be shown in the 1st position
'//      index 1 should be shown in the 2nd position
'

Header_SetOrderArray = SendMessage(hWnd, HDM_SETORDERARRAY, iCount, ByVal lpi)
End Function
Public Function Header_SetHotDivider(hWnd As LongPtr, fPos As Long, dw As Long) As LongPtr
'#define Header_SetHotDivider(hwnd, fPos, dw) \
'        (int)SNDMSG((hwnd), HDM_SETHOTDIVIDER, (WPARAM)(fPos), (LPARAM)(dw))
Header_SetHotDivider = SendMessage(hWnd, HDM_SETHOTDIVIDER, fPos, ByVal dw)
End Function
Public Function Header_SetBitmapMargin(hWnd As LongPtr, iWidth As Long) As LongPtr
'#define Header_SetBitmapMargin(hwnd, iWidth) \
'        (int)SNDMSG((hwnd), HDM_SETBITMAPMARGIN, (WPARAM)(iWidth), 0)
Header_SetBitmapMargin = SendMessage(hWnd, HDM_SETBITMAPMARGIN, iWidth, ByVal 0&)
End Function
Public Function Header_GetBitmapMargin(hWnd As LongPtr) As LongPtr
'#define Header_GetBitmapMargin(hwnd) \
'        (int)SNDMSG((hwnd), HDM_GETBITMAPMARGIN, 0, 0)
Header_GetBitmapMargin = SendMessage(hWnd, HDM_GETBITMAPMARGIN, 0, ByVal 0&)
End Function
Public Function Header_SetUnicodeFormat(hWnd As LongPtr, fUnicode As Long) As LongPtr
'#define Header_SetUnicodeFormat(hwnd, fUnicode)  \
'    (BOOL)SNDMSG((hwnd), HDM_SETUNICODEFORMAT, (WPARAM)(fUnicode), 0)
Header_SetUnicodeFormat = SendMessage(hWnd, HDM_SETUNICODEFORMAT, fUnicode, ByVal 0&)
End Function
Public Function Header_GetUnicodeFormat(hWnd As LongPtr) As LongPtr
'#define Header_GetUnicodeFormat(hwnd)  \
'    (BOOL)SNDMSG((hwnd), HDM_GETUNICODEFORMAT, 0, 0)
Header_GetUnicodeFormat = SendMessage(hWnd, HDM_GETUNICODEFORMAT, 0, ByVal 0&)
End Function
Public Function Header_SetFilterChangeTimeout(hWnd As LongPtr, i As Long) As LongPtr
'#define Header_SetFilterChangeTimeout(hwnd, i) \
'        (int)SNDMSG((hwnd), HDM_SETFILTERCHANGETIMEOUT, 0, (LPARAM)(i))
Header_SetFilterChangeTimeout = SendMessage(hWnd, HDM_SETFILTERCHANGETIMEOUT, 0, ByVal i)
End Function
Public Function Header_EditFilter(hWnd As LongPtr, i As Long, fDiscardChanges As Long) As LongPtr
'#define Header_EditFilter(hwnd, i, fDiscardChanges) \
'        (int)SNDMSG((hwnd), HDM_EDITFILTER, (WPARAM)(i), MAKELPARAM(fDiscardChanges, 0))
Header_EditFilter = SendMessage(hWnd, HDM_EDITFILTER, i, ByVal fDiscardChanges)
End Function
Public Function Header_ClearFilter(hWnd As LongPtr, i As Long) As LongPtr
'#define Header_ClearFilter(hwnd, i) \
'        (int)SNDMSG((hwnd), HDM_CLEARFILTER, (WPARAM)(i), 0)
Header_ClearFilter = SendMessage(hWnd, HDM_CLEARFILTER, i, ByVal 0&)
End Function
Public Function Header_ClearAllFilters(hWnd As LongPtr) As LongPtr
'#define Header_ClearAllFilters(hwnd) \
'        (int)SNDMSG((hwnd), HDM_CLEARFILTER, (WPARAM)-1, 0)
Header_ClearAllFilters = SendMessage(hWnd, HDM_CLEARFILTER, -1, ByVal 0&)
End Function
Public Function Header_GetItemDropDownRect(hWnd As LongPtr, iItem As Long, lpRC As RECT) As LongPtr
'#define Header_GetItemDropDownRect(hwnd, iItem, lprc) \
'        (BOOL)SNDMSG((hwnd), HDM_GETITEMDROPDOWNRECT, (WPARAM)(iItem), (LPARAM)(lprc))
Header_GetItemDropDownRect = SendMessage(hWnd, HDM_GETITEMDROPDOWNRECT, iItem, lpRC)
End Function
Public Function Header_GetOverflowRect(hWnd As LongPtr, lpRC As RECT) As LongPtr
'#define Header_GetOverflowRect(hwnd, lprc) \
'        (BOOL)SNDMSG((hwnd), HDM_GETOVERFLOWRECT, 0, (LPARAM)(lprc))
Header_GetOverflowRect = SendMessage(hWnd, HDM_GETOVERFLOWRECT, 0, lpRC)
End Function
Public Function Header_GetFocusedItem(hWnd As LongPtr) As LongPtr
'#define Header_GetFocusedItem(hwnd) \
'        (int)SNDMSG((hwnd), HDM_GETFOCUSEDITEM, (WPARAM)(0), (LPARAM)(0))
Header_GetFocusedItem = SendMessage(hWnd, HDM_GETFOCUSEDITEM, 0, ByVal 0&)
End Function
Public Function Header_SetFocusedItem(hWnd As LongPtr, iItem As Long) As LongPtr
'#define Header_SetFocusedItem(hwnd, iItem) \
'        (BOOL)SNDMSG((hwnd), HDM_SETFOCUSEDITEM, (WPARAM)(0), (LPARAM)(iItem))
Header_SetFocusedItem = SendMessage(hWnd, HDM_SETFOCUSEDITEM, 0, ByVal iItem)
End Function




Public Function TreeView_SetImageList(hwnd As LongPtr, himl As LongPtr, iImage As TVImageLists) As LongPtr
  TreeView_SetImageList = SendMessage(hwnd, TVM_SETIMAGELIST, ByVal iImage, ByVal himl)
End Function

Public Function TreeView_GetImageList(hwnd As LongPtr) As LongPtr
TreeView_GetImageList = SendMessage(hwnd, TVM_GETIMAGELIST, 0, ByVal 0&)
End Function

Public Function TreeView_GetIndent(hwnd As LongPtr) As Long
TreeView_GetIndent = CLng(SendMessage(hwnd, TVM_GETINDENT, 0, ByVal 0&))
End Function

Public Function TreeView_SetIndent(hwnd As LongPtr, indent As Long) As Long
TreeView_SetIndent = CLng(SendMessage(hwnd, TVM_SETINDENT, indent, ByVal 0&))
End Function

Public Function TreeView_GetISearchString(hwnd As LongPtr, lpsz As LongPtr) As Long
TreeView_GetISearchString = CLng(SendMessage(hwnd, TVM_GETISEARCHSTRING, 0, ByVal lpsz))
End Function

Public Function TreeView_SetToolTips(hwnd As LongPtr, hwndTT As LongPtr) As LongPtr
TreeView_SetToolTips = SendMessage(hwnd, TVM_SETTOOLTIPS, hwndTT, ByVal 0&)
End Function

Public Function TreeView_GetToolTips(hwnd As LongPtr) As LongPtr
TreeView_GetToolTips = SendMessage(hwnd, TVM_GETTOOLTIPS, 0, ByVal 0&)
End Function

Public Function TreeView_GetItemPartRect(hwnd As LongPtr, hItem As LongPtr, prc As RECT, partid As TVITEMPART) As Long
Dim tInfo As TVGETITEMPARTRECTINFO
tInfo.hti = hItem
tInfo.prc = prc
tInfo.partid = partid
TreeView_GetItemPartRect = CLng(SendMessage(hwnd, TVM_GETITEMPARTRECT, 0, tInfo))

End Function

Public Function TreeView_GetItemRect(hwnd As LongPtr, hItem As LongPtr, prc As RECT, Code As Long) As Long
TreeView_GetItemRect = CLng(SendMessage(hwnd, TVM_GETITEMRECT, Code, prc))
End Function

Public Function TreeView_GetLineColor(hwnd As LongPtr) As Long
    TreeView_GetLineColor = CLng(SendMessage(hwnd, TVM_GETLINECOLOR, 0, ByVal 0&))
End Function

Public Function TreeView_SetLineColor(hwnd As LongPtr, clr As Long) As Long
    TreeView_SetLineColor = CLng(SendMessage(hwnd, TVM_SETLINECOLOR, 0, ByVal clr))
End Function

Public Function TreeView_SetStyle(hwnd As LongPtr, dwStyle As TV_Styles) As Long
    Dim lStyle As LongPtr
    lStyle = GetWindowLong(hwnd, GWL_STYLE)
    lStyle = lStyle Or dwStyle
    TreeView_SetStyle = CLng(SetWindowLong(hwnd, GWL_STYLE, lStyle))

End Function

Public Function TreeView_SetExtendedStyle(hwnd As LongPtr, lST As TV_Ex_Styles) As Long
    Dim lStyle As LongPtr

    lStyle = SendMessage(hwnd, TVM_GETEXTENDEDSTYLE, 0, 0)
    lStyle = lStyle Or lST
    Call SendMessage(hwnd, TVM_SETEXTENDEDSTYLE, 0, ByVal lStyle)

End Function

' TreeView_GetNextItem

' Retrieves the tree-view item that bears the specified relationship to a specified item.
' Returns the handle to the item if successful or 0 otherwise.

Public Function TreeView_GetNextItem(hwnd As LongPtr, _
                                     hItem As LongPtr, _
                                     flag As TVM_GETNEXTITEM_wParam) As LongPtr
    TreeView_GetNextItem = SendMessage(hwnd, TVM_GETNEXTITEM, ByVal flag, ByVal hItem)
End Function

Public Function TreeView_GetNextSelected(hwnd As LongPtr, hItem As LongPtr) As LongPtr
    TreeView_GetNextSelected = TreeView_GetNextItem(hwnd, hItem, TVGN_NEXTSELECTED)
End Function
' Retrieves the first child item. The hitem parameter must be NULL.
' Returns the handle to the item if successful or 0 otherwise.

Public Function TreeView_GetChild(hwnd As LongPtr, hItem As LongPtr) As LongPtr
    TreeView_GetChild = TreeView_GetNextItem(hwnd, hItem, TVGN_CHILD)
End Function

' Retrieves the next sibling item.
' Returns the handle to the item if successful or 0 otherwise.

Public Function TreeView_GetNextSibling(hwnd As LongPtr, hItem As LongPtr) As LongPtr
    TreeView_GetNextSibling = TreeView_GetNextItem(hwnd, hItem, TVGN_NEXT)
End Function

Public Function TreeView_GetPrevSibling(hwnd As LongPtr, hItem As LongPtr) As LongPtr
  TreeView_GetPrevSibling = TreeView_GetNextItem(hwnd, hItem, TVGN_PREVIOUS)
End Function

Public Function TreeView_GetNextVisible(hwnd As LongPtr, hItem As LongPtr) As LongPtr
  TreeView_GetNextVisible = TreeView_GetNextItem(hwnd, hItem, TVGN_NEXTVISIBLE)
End Function

Public Function TreeView_GetPrevVisible(hwnd As LongPtr, hItem As LongPtr) As LongPtr
  TreeView_GetPrevVisible = TreeView_GetNextItem(hwnd, hItem, TVGN_PREVIOUSVISIBLE)
End Function

' Retrieves the parent of the specified item.
' Returns the handle to the item if successful or 0 otherwise.
Public Function TreeView_SelectDropTarget(hwnd As LongPtr, hItem As LongPtr) As Long
  TreeView_SelectDropTarget = TreeView_Select(hwnd, hItem, TVGN_DROPHILITE)
End Function

Public Function TreeView_SelectSetFirstVisible(hwnd As LongPtr, hItem As LongPtr) As Long
  TreeView_SelectSetFirstVisible = TreeView_Select(hwnd, hItem, TVGN_FIRSTVISIBLE)
End Function

Public Function TreeView_SetAutoScrollInfo(hwnd As LongPtr, uPixPerSec As Long, uUpdateTime As Long) As Long
TreeView_SetAutoScrollInfo = CLng(SendMessage(hwnd, TVM_SETAUTOSCROLLINFO, uPixPerSec, ByVal uUpdateTime))
End Function

'#define TreeView_SetBorder(hwnd, dwFlags, xBorder, yBorder) (int)SNDMSG ((hwnd), TVM_SETBORDER,(WPARAM) (dwFlags),
'MAKELPARAM (xBorder, yBorder))
Public Function TreeView_SetBorder(hwnd As LongPtr, dwFlags As TVSB_Flags, xBorder As Long, yBorder As Long) As Long
TreeView_SetBorder = CLng(SendMessage(hwnd, TVM_SETBORDER, dwFlags, ByVal MAKELPARAM(xBorder, yBorder)))
End Function

Public Function TreeView_SetHot(hwnd As LongPtr, hItem As LongPtr) As Long
TreeView_SetHot = CLng(SendMessage(hwnd, TVM_SETHOT, 0, ByVal hItem))
End Function

Public Function TreeView_SetTextColor(hwnd As LongPtr, clr As Long) As Long
TreeView_SetTextColor = CLng(SendMessage(hwnd, TVM_SETTEXTCOLOR, 0, ByVal clr))
End Function

Public Function TreeView_ShowInfoTip(hwnd As LongPtr, hItem As LongPtr) As Long
TreeView_ShowInfoTip = CLng(SendMessage(hwnd, TVM_SHOWINFOTIP, 0, ByVal hItem))
End Function

Public Function TreeView_GetParent(hwnd As LongPtr, hItem As LongPtr) As LongPtr
    TreeView_GetParent = TreeView_GetNextItem(hwnd, hItem, TVGN_PARENT)
End Function

Public Function TreeView_MapAccIDToHTREEITEM(hwnd As LongPtr, id As Long) As LongPtr
TreeView_MapAccIDToHTREEITEM = SendMessage(hwnd, TVM_MAPACCIDTOHTREEITEM, id, ByVal 0)
End Function

Public Function TreeView_MapHTREEITEMToAccID(hwnd As LongPtr, htreeitem As LongPtr) As Long
TreeView_MapHTREEITEMToAccID = CLng(SendMessage(hwnd, TVM_MAPHTREEITEMTOACCID, htreeitem, ByVal 0))
End Function

' Retrieves the currently selected item.
' Returns the handle to the item if successful or 0 otherwise.

Public Function TreeView_GetSelection(hwnd As LongPtr) As LongPtr
    TreeView_GetSelection = TreeView_GetNextItem(hwnd, 0, TVGN_CARET)
End Function

Public Function TreeView_InsertItem(hwnd As LongPtr, lpis As TVINSERTSTRUCT) As LongPtr
TreeView_InsertItem = SendMessage(hwnd, TVM_INSERTITEM, 0, lpis)
End Function

Public Function TreeView_InsertItemEx(hwnd As LongPtr, lpis As TVINSERTSTRUCTEX) As LongPtr
TreeView_InsertItemEx = SendMessage(hwnd, TVM_INSERTITEM, 0, lpis)
End Function
' Retrieves the topmost or very first item of the tree-view control.
' Returns the handle to the item if successful or 0 otherwise.

Public Function TreeView_GetRoot(hwnd As LongPtr) As LongPtr
    TreeView_GetRoot = TreeView_GetNextItem(hwnd, 0, TVGN_ROOT)
End Function

' Retrieves some or all of a tree-view item's attributes.
' Returns TRUE if successful or FALSE otherwise.

Public Function TreeView_GetItem(hwnd As LongPtr, pItem As TVITEM) As Boolean
    TreeView_GetItem = SendMessage(hwnd, TVM_GETITEM, 0, pItem)
End Function

Public Function TreeView_GetItemState(hwndTV As LongPtr, hti As LongPtr, Mask As TVITEM_State) As Long
    TreeView_GetItemState = CLng(SendMessage(hwndTV, TVM_GETITEMSTATE, hti, ByVal Mask))
End Function
' Sets some or all of a tree-view item's attributes.
' Old docs say returns zero if successful or - 1 otherwise.
' New docs say returns TRUE if successful, or FALSE otherwise

Public Function TreeView_SetItem(hwnd As LongPtr, pItem As TVITEM) As Boolean
    TreeView_SetItem = SendMessage(hwnd, TVM_SETITEM, 0, pItem)
End Function

Public Function TreeView_SetItemState(hwndTV As LongPtr, _
                                      hti As LongPtr, _
                                      data As TVITEM_State, _
                                      Mask As TVITEM_State) As Long
    Dim tVI As TVITEMEX
    tVI.Mask = TVIF_STATE Or TVIF_HANDLE
    tVI.hItem = hti
    tVI.StateMask = Mask
    tVI.State = data
    TreeView_SetItemState = CLng(SendMessage(hwndTV, TVM_SETITEM, 0, tVI))
End Function

Public Function TreeView_SetItemStateEx(hwndTV As LongPtr, _
                                        hti As LongPtr, _
                                        Mask As TVITEM_State_Ex) As Long
    Dim tVI As TVITEMEX
    tVI.Mask = TVIF_STATEEX
    tVI.hItem = hti
    tVI.uStateEx = Mask
    TreeView_SetItemStateEx = CLng(SendMessage(hwndTV, TVM_SETITEM, 0, tVI))
End Function

Public Function TreeView_SetCheckState(hwndTV As LongPtr, _
                                       hti As LongPtr, _
                                       fCheck As Long) As Long
    TreeView_SetCheckState = TreeView_SetItemState(hwndTV, hti, INDEXTOSTATEIMAGEMASK(CLng(IIf(fCheck, 2, 1))), TVIS_STATEIMAGEMASK)

End Function

Public Function TreeView_SetCheckStateEx(hwndTV As LongPtr, _
                                       hti As LongPtr, _
                                       fCheck As Long) As Long
    TreeView_SetCheckStateEx = TreeView_SetItemState(hwndTV, hti, INDEXTOSTATEIMAGEMASK(fCheck), TVIS_STATEIMAGEMASK)

End Function

Public Function TreeView_GetCheckState(hwndTV As LongPtr, hti As LongPtr) As Long
    TreeView_GetCheckState = STATEIMAGEMASKTOINDEX(CLng(SendMessage(hwndTV, TVM_GETITEMSTATE, hti, ByVal TVIS_STATEIMAGEMASK)))

End Function
' Determines the location of the specified point relative to the client area of a tree-view control.
' Returns the handle to the tree-view item that occupies the specified point or NULL if no item
' occupies the point.

Public Function TreeView_HitTest(hwnd As LongPtr, lpht As TVHITTESTINFO) As LongPtr
    TreeView_HitTest = SendMessage(hwnd, TVM_HITTEST, 0, lpht)
End Function
' Removes an item from a tree-view control.
' Returns TRUE if successful or FALSE otherwise.

Public Function TreeView_DeleteItem(hwnd As LongPtr, hItem As LongPtr) As Boolean
    TreeView_DeleteItem = SendMessage(hwnd, TVM_DELETEITEM, 0, ByVal hItem)
End Function

' Removes all items from a tree-view control.
' Returns TRUE if successful or FALSE otherwise.

Public Function TreeView_DeleteAllItems(hwnd As LongPtr) As Boolean
    TreeView_DeleteAllItems = SendMessage(hwnd, TVM_DELETEITEM, 0, ByVal TVI_ROOT)
End Function
' Creates a dragging bitmap for the specified item in a tree-view control, creates an image list
' for the bitmap, and adds the bitmap to the image list. An application can display the image
' when dragging the item by using the image list functions.
' Returns the handle of the image list to which the dragging bitmap was added if successful or
' NULL otherwise.

Public Function TreeView_CreateDragImage(hwnd As LongPtr, hItem As LongPtr) As LongPtr
    TreeView_CreateDragImage = SendMessage(hwnd, TVM_CREATEDRAGIMAGE, 0, ByVal hItem)
End Function

' Sorts the child items of the specified parent item in a tree-view control.
' Returns TRUE if successful or FALSE otherwise.
' fRecurse is reserved for future use and must be zero.
Public Function TreeView_EditLabel(hwnd As LongPtr, hItem As LongPtr) As LongPtr
    TreeView_EditLabel = SendMessage(hwnd, TVM_EDITLABEL, ByVal 0&, ByVal hItem)
End Function

Public Function TreeView_EndEditLabelNow(hwnd As LongPtr, fCancel As Long) As Long
    TreeView_EndEditLabelNow = CLng(SendMessage(hwnd, TVM_ENDEDITLABELNOW, fCancel, ByVal 0))
End Function

Public Function TreeView_GetFirstVisible(hwnd As LongPtr) As LongPtr
    TreeView_GetFirstVisible = TreeView_GetNextItem(hwnd, 0, TVGN_FIRSTVISIBLE)
End Function

Public Function TreeView_GetLastVisible(hwnd As LongPtr) As LongPtr   ' IE4
    TreeView_GetLastVisible = TreeView_GetNextItem(hwnd, 0, TVGN_LASTVISIBLE)
End Function

Public Function TreeView_GetBkColor(hwnd As LongPtr) As Long
    TreeView_GetBkColor = CLng(SendMessage(hwnd, TVM_GETBKCOLOR, 0, ByVal 0))
End Function

Public Function TreeView_SetInsertMark(hwnd As LongPtr, _
                                       hItem As LongPtr, _
                                       fAfter As Long) As Boolean   ' IE4
    TreeView_SetInsertMark = SendMessage(hwnd, TVM_SETINSERTMARK, ByVal fAfter, ByVal hItem)
End Function

Public Function TreeView_GetCount(hwnd As LongPtr) As Long
    TreeView_GetCount = CLng(SendMessage(hwnd, TVM_GETCOUNT, 0, ByVal 0&))
End Function

Public Function TreeView_GetDropHilight(hwnd As LongPtr) As LongPtr
    TreeView_GetDropHilight = TreeView_GetNextItem(hwnd, 0, TVGN_DROPHILITE)
End Function

Public Function TreeView_GetExtendedStyle(hwnd As LongPtr) As Long
    TreeView_GetExtendedStyle = CLng(SendMessage(hwnd, TVM_GETEXTENDEDSTYLE, 0, ByVal 0))
End Function

Public Function TreeView_SetUnicodeFormat(hwnd As LongPtr, _
                                          fUnicode As Long) As Boolean   ' IE4
    TreeView_SetUnicodeFormat = SendMessage(hwnd, TVM_SETUNICODEFORMAT, ByVal fUnicode, 0)
End Function

Public Function TreeView_GetUnicodeFormat(hwnd As LongPtr) As Boolean   ' IE4
    TreeView_GetUnicodeFormat = SendMessage(hwnd, TVM_GETUNICODEFORMAT, 0, 0)
End Function

' returns (int), old?
Public Function TreeView_SetItemHeight(hwnd As LongPtr, iHeight As Long) As Long   ' IE4
    TreeView_SetItemHeight = CLng(SendMessage(hwnd, TVM_SETITEMHEIGHT, ByVal iHeight, 0))
End Function

Public Function TreeView_GetTextColor(hwnd As LongPtr) As Long   ' IE4
    TreeView_GetTextColor = CLng(SendMessage(hwnd, TVM_GETTEXTCOLOR, 0, 0))
End Function

' returns (UINT), old?
Public Function TreeView_SetScrollTime(hwnd As LongPtr, uTime As Long) As Long   ' IE4
    TreeView_SetScrollTime = CLng(SendMessage(hwnd, TVM_SETSCROLLTIME, ByVal uTime, 0))
End Function

' returns (UINT)
Public Function TreeView_GetScrollTime(hwnd As LongPtr) As Long   ' IE4
    TreeView_GetScrollTime = CLng(SendMessage(hwnd, TVM_GETSCROLLTIME, 0, 0))
End Function

' returns (COLORREF), old?
Public Function TreeView_SetInsertMarkColor(hwnd As LongPtr, clr As Long) As Long   ' IE4
    TreeView_SetInsertMarkColor = CLng(SendMessage(hwnd, TVM_SETINSERTMARKCOLOR, 0, ByVal clr))
End Function

' returns (COLORREF)
Public Function TreeView_GetInsertMarkColor(hwnd As LongPtr) As Long   ' IE4
    TreeView_GetInsertMarkColor = CLng(SendMessage(hwnd, TVM_GETINSERTMARKCOLOR, 0, 0))
End Function
'
' ================================================================

' returns (int)
Public Function TreeView_GetItemHeight(hwnd As LongPtr) As Long   ' IE4
    TreeView_GetItemHeight = CLng(SendMessage(hwnd, TVM_GETITEMHEIGHT, 0, 0))
End Function

' returns (COLORREF), old?
Public Function TreeView_SetBkColor(hwnd As LongPtr, clr As Long) As Long   ' IE4
    TreeView_SetBkColor = CLng(SendMessage(hwnd, TVM_SETBKCOLOR, 0, ByVal clr))
End Function

' Retrieves the handle to the edit control being used to edit a tree-view item's text.
' Returns the handle to the edit control if successful or NULL otherwise.

Public Function TreeView_GetEditControl(hwnd As LongPtr) As LongPtr
    TreeView_GetEditControl = SendMessage(hwnd, TVM_GETEDITCONTROL, 0, 0)
End Function

' Returns the number of items that are fully visible in the client window of the tree-view control.

Public Function TreeView_GetVisibleCount(hwnd As LongPtr) As Long
    TreeView_GetVisibleCount = CLng(SendMessage(hwnd, TVM_GETVISIBLECOUNT, 0, 0))
End Function

Public Function TreeView_SortChildren(hwnd As LongPtr, _
                                      hItem As LongPtr, _
                                      fRecurse As Boolean) As Boolean
    TreeView_SortChildren = SendMessage(hwnd, TVM_SORTCHILDREN, ByVal fRecurse, ByVal hItem)
End Function

' Ensures that a tree-view item is visible, expanding the parent item or scrolling the tree-view
' control, if necessary.
' Returns TRUE if the system scrolled the items in the tree-view control to ensure that the
' specified item is visible. Otherwise, the macro returns FALSE.

Public Function TreeView_EnsureVisible(hwnd As LongPtr, hItem As LongPtr) As Boolean
    TreeView_EnsureVisible = SendMessage(hwnd, TVM_ENSUREVISIBLE, 0, ByVal hItem)
End Function
' Expands or collapses the list of child items, if any, associated with the specified parent item.
' Returns TRUE if successful or FALSE otherwise.
' (docs say TVM_EXPAND does not send the TVN_ITEMEXPANDING and
' TVN_ITEMEXPANDED notification messages to the parent window...?)

Public Function TreeView_Expand(hwnd As LongPtr, hItem As LongPtr, flag As TVM_EXPAND_wParam) As Boolean
    TreeView_Expand = SendMessage(hwnd, TVM_EXPAND, ByVal flag, ByVal hItem)
End Function

' Selects the specified tree-view item, scrolls the item into view, or redraws the item
' in the style used to indicate the target of a drag-and-drop operation.
' If hitem is NULL, the selection is removed from the currently selected item, if any.
' Returns TRUE if successful or FALSE otherwise.

Public Function TreeView_Select(hwnd As LongPtr, hItem As LongPtr, Code As Long) As Boolean
    TreeView_Select = SendMessage(hwnd, TVM_SELECTITEM, ByVal Code, ByVal hItem)
End Function

' Sets the selection to the specified item.
' Returns TRUE if successful or FALSE otherwise.

' If the specified item is already selected, a TVN_SELCHANGING *will not* be generated !!

' If the specified item is 0 (indicating to remove selection from any currrently selected item)
' and an item is selected, a TVN_SELCHANGING *will* be generated and the itemNew
' member of NMTREEVIEW will be 0 !!!

Public Function TreeView_SelectItem(hwnd As LongPtr, hItem As LongPtr) As Boolean
    TreeView_SelectItem = TreeView_Select(hwnd, hItem, TVGN_CARET)
End Function

' Sorts tree-view items using an application-defined callback function that compares the items.
' Returns TRUE if successful or FALSE otherwise.
' fRecurse is reserved for future use and must be zero.

Public Function TreeView_SortChildrenCB(hwnd As LongPtr, _
                                        psort As TVSORTCB, _
                                        fRecurse As Boolean) As Boolean
    TreeView_SortChildrenCB = SendMessage(hwnd, TVM_SORTCHILDRENCB, ByVal fRecurse, psort)
End Function
#End Region
End Module
#End If
' Module wdComDlg
        
' End Module
#End If