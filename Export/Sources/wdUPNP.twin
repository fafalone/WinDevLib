'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

'UPNP Automation
'
'upnp.h/.idl 100%
'upnphost.h/.idl 100%

[InterfaceId("ADDA3D55-6F72-4319-BFF9-18600A539B10")]
[OleAutomation(True)]
[COMExtensible(False)]
'[DualInterface]
[Description("IUPnPDeviceFinder Interface")]
Interface IUPnPDeviceFinder Extends IDispatch
    [DispId(&H600203E9), Description("method FindByType")]
    Function FindByType(ByVal bstrTypeURI As String, ByVal dwFlags As Long) As IUPnPDevices
    [DispId(&H600203EC), Description("method CreateAsyncFind")]
    Function CreateAsyncFind(ByVal bstrTypeURI As String, ByVal dwFlags As Long, ByVal punkDeviceFinderCallback As IUnknown) As Long
    [DispId(&H600203ED), Description("method StartAsyncFind")]
    Sub StartAsyncFind(ByVal lFindData As Long)
    [DispId(&H600203EE), Description("method CancelAsyncFind")]
    Sub CancelAsyncFind(ByVal lFindData As Long)
    [DispId(&H600203EB), Description("method FindByUDN")]
    Function FindByUDN(ByVal bstrUDN As String) As IUPnPDevice
End Interface

[InterfaceId("E3BF6178-694E-459F-A5A6-191EA0FFA1C7")]
[OleAutomation(True)]
Interface IUPnPAddressFamilyControl Extends stdole.IUnknown
    Sub SetAddressFamily(ByVal dwFlags As Long)
    Sub GetAddressFamily(ByRef pdwFlags As Long)
End Interface

[InterfaceId("0405AF4F-8B5C-447C-80F2-B75984A31F3C")]
[OleAutomation(True)]
Interface IUPnPHttpHeaderControl Extends stdole.IUnknown
    Sub AddRequestHeaders(ByVal bstrHttpHeaders As String)
End Interface

[InterfaceId("415A984A-88B3-49F3-92AF-0508BEDF0D6C")]
[OleAutomation(False)]
Interface IUPnPDeviceFinderCallback Extends stdole.IUnknown
    Sub DeviceAdded(ByVal lFindData As Long, ByVal pDevice As IUPnPDevice)
    Sub DeviceRemoved(ByVal lFindData As Long, ByVal bstrUDN As String)
    Sub SearchComplete(ByVal lFindData As Long)
End Interface

[InterfaceId("3F8C8E9E-9A7A-4DC8-BC41-FF31FA374956")]
[OleAutomation(True)]
[COMExtensible(False)]
'[DualInterface]
Interface IUPnPServices Extends IDispatch
    [DispId(&H600207D1), Description("property Count")]
    Property Get Count() As Long
    [Hidden, Restricted]
    [DispId(-4), Description("property _NewEnum")]
    Property Get _NewEnum() As IUnknown
    [DispId(0), Description("property Item")]
    Property Get Item(ByVal bstrServiceId As String) As IUPnPService
End Interface

[InterfaceId("A295019C-DC65-47DD-90DC-7FE918A1AB44")]
[OleAutomation(True)]
[COMExtensible(False)]
'[DualInterface]
Interface IUPnPService Extends IDispatch
    [DispId(&H600209C5), Description("method QueryStateVariable")]
    Function QueryStateVariable(ByVal bstrVariableName As String) As Variant
    [DispId(&H600209C6), Description("method InvokeAction")]
    Function InvokeAction(ByVal bstrActionName As String, ByVal vInActionArgs As Variant, ByRef pvOutActionArgs As Variant) As Variant
    [DispId(&H600209C7), Description("property ServiceTypeIdentifier")]
    Property Get ServiceTypeIdentifier() As String
    [DispId(&H600209C8), Description("method AddStateChangeCallback")]
    Sub AddCallback(ByVal pUnkCallback As IUnknown)
    [DispId(&H600209C9), Description("property Id")]
    Property Get id() As String
    [DispId(&H600209CA), Description("property LastTransportStatus")]
    Property Get LastTransportStatus() As Long
End Interface

[InterfaceId("4D65FD08-D13E-4274-9C8B-DD8D028C8644")]
[OleAutomation(True)]
Interface IUPnPAsyncResult Extends stdole.IUnknown
    [DispId(&H600213ED), Description("method AsyncOperationComplete")]
    Sub AsyncOperationComplete(ByVal ullRequestID As LongLong)
End Interface

[InterfaceId("098BDAF5-5EC1-49E7-A260-B3A11DD8680C")]
[OleAutomation(True)]
Interface IUPnPServiceAsync Extends stdole.IUnknown
    [DispId(&H600215E1), Description("method BeginInvokeAction")]
    Sub BeginInvokeAction(ByVal bstrActionName As String, ByVal vInActionArgs As Variant, ByVal pAsyncResult As IUPnPAsyncResult, ByRef pullRequestID As LongLong)
    [DispId(&H600215E2), Description("method EndInvokeAction")]
    Sub EndInvokeAction(ByVal ullRequestID As LongLong, ByRef pvOutActionArgs As Variant, ByRef pvRetVal As Variant)
    [DispId(&H600215E3), Description("method BeginQueryStateVariable")]
    Sub BeginQueryStateVariable(ByVal bstrVariableName As String, ByVal pAsyncResult As IUPnPAsyncResult, ByRef pullRequestID As LongLong)
    [DispId(&H600215E4), Description("method EndQueryStateVariable")]
    Sub EndQueryStateVariable(ByVal ullRequestID As LongLong, ByRef pValue As Variant)
    [DispId(&H600215E5), Description("method BeginSubscribeToEvents")]
    Sub BeginSubscribeToEvents(ByVal pUnkCallback As IUnknown, ByVal pAsyncResult As IUPnPAsyncResult, ByRef pullRequestID As LongLong)
    [DispId(&H600215E6), Description("method EndSubscribeToEvents")]
    Sub EndSubscribeToEvents(ByVal ullRequestID As LongLong)
    [DispId(&H600215E7), Description("method BeginSCPDDownload")]
    Sub BeginSCPDDownload(ByVal pAsyncResult As IUPnPAsyncResult, ByRef pullRequestID As LongLong)
    [DispId(&H600215E8), Description("method EndSCPDDownload")]
    Sub EndSCPDDownload(ByVal ullRequestID As LongLong, ByRef pbstrSCPDDoc As String)
    [DispId(&H600215E9), Description("method CancelAsyncOperation")]
    Sub CancelAsyncOperation(ByVal ullRequestID As LongLong)
End Interface

[InterfaceId("31FADCA9-AB73-464B-B67D-5C1D0F83C8B8")]
[OleAutomation(False)]
Interface IUPnPServiceCallback Extends stdole.IUnknown
    Sub StateVariableChanged(ByVal pus As IUPnPService, ByVal pcwszStateVarName As String, ByVal vaValue As Variant)
    Sub ServiceInstanceDied(ByVal pus As IUPnPService)
End Interface

[InterfaceId("38873B37-91BB-49F4-B249-2E8EFBB8A816")]
[OleAutomation(True)]
Interface IUPnPServiceEnumProperty Extends stdole.IUnknown
    Sub SetServiceEnumProperty(ByVal dwMask As Long)
End Interface

[InterfaceId("21905529-0A5E-4589-825D-7E6D87EA6998")]
[OleAutomation(True)]
Interface IUPnPServiceDocumentAccess Extends stdole.IUnknown
    Sub GetDocumentURL(ByRef pbstrDocUrl As String)
    Sub GetDocument(ByRef pbstrDoc As String)
End Interface

[InterfaceId("FDBC0C73-BDA3-4C66-AC4F-F2D96FDAD68C")]
[OleAutomation(True)]
[COMExtensible(False)]
'[DualInterface]
Interface IUPnPDevices Extends IDispatch
    [DispId(&H60020DAD), Description("property Count")]
    Property Get Count() As Long
    [Hidden, Restricted]
    [DispId(-4), Description("property _NewEnum")]
    Property Get _NewEnum() As IUnknown
    [DispId(0), Description("property Item")]
    Property Get Item(ByVal bstrUDN As String) As IUPnPDevice
End Interface

[InterfaceId("3D44D0D1-98C9-4889-ACD1-F9D674BF2221")]
[OleAutomation(True)]
[COMExtensible(False)]
'[DualInterface]
Interface IUPnPDevice Extends IDispatch
    [DispId(&H60020FA1), Description("denotes whether the device is the highest-level device in the device tree")]
    Property Get IsRootDevice() As Boolean
    [DispId(&H60020FA2), Description("returns the top device in the device tree")]
    Property Get RootDevice() As IUPnPDevice
    [DispId(&H60020FA3), Description("returns the parent of the current device")]
    Property Get ParentDevice() As IUPnPDevice
    [DispId(&H60020FA4), Description("denotes whether the current device contains child devices")]
    Property Get HasChildren() As Boolean
    [DispId(&H60020FA5), Description("returns a collection of the children of the current device")]
    Property Get children() As IUPnPDevices
    [DispId(&H60020FA6), Description("returns the UDN of the device")]
    Property Get UniqueDeviceName() As String
    [DispId(&H60020FA17), Description("returns the (optional) display name of the device")]
    Property Get FriendlyName() As String
    [DispId(&H60020FA8), Description("returns the device type URI")]
    Property Get type() As String
    [DispId(&H60020FA9), Description("obtains a presentation URL to a web page that can control the device")]
    Property Get PresentationURL() As String
    [DispId(&H60020FAA), Description("displayable manufacturer name")]
    Property Get ManufacturerName() As String
    [DispId(&H60020FAB), Description("URL to the manufacturer's website")]
    Property Get ManufacturerURL() As String
    [DispId(&H60020FAC), Description("a displayable string containing the model name")]
    Property Get ModelName() As String
    [DispId(&H60020FAD), Description("a displayable string containing the model number")]
    Property Get ModelNumber() As String
    [DispId(&H60020FAE), Description("displayable summary of the device's function")]
    Property Get Description() As String
    [DispId(&H60020FAF), Description("URL to a webpage containing model-specific information")]
    Property Get ModelURL() As String
    [DispId(&H60020FB0), Description("displayable product code")]
    Property Get UPC() As String
    [DispId(&H60020FB1), Description("displayable serial number")]
    Property Get SerialNumber() As String
    [DispId(&H60020FB2), Description("retrieves an url from which an icon of the specified format can be loaded")]
    Function IconUrl(ByVal bstrEncodingFormat As String, ByVal lSizeX As Long, ByVal lSizeY As Long, ByVal lBitDepth As Long) As String
    [DispId(&H60020FB3), Description("returns the collection of services exposed by the device")]
    Property Get Services() As IUPnPServices
End Interface

[InterfaceId("E7772804-3287-418E-9072-CF2B47238981")]
[OleAutomation(False)]
Interface IUPnPDeviceDocumentAccess Extends stdole.IUnknown
    Function GetDocumentURL() As String
End Interface

[InterfaceId("C4BC4050-6178-4BD1-A4B8-6398321F3247")]
[OleAutomation(False)]
Interface IUPnPDeviceDocumentAccessEx Extends stdole.IUnknown
    Function GetDocument() As String
End Interface

[InterfaceId("11D1C1B2-7DAA-4C9E-9595-7F82ED206D1E")]
[OleAutomation(True)]
[COMExtensible(False)]
'[DualInterface]
Interface IUPnPDescriptionDocument Extends IDispatch
    [DispId(-525), Description("the current status of the document's loading process")]
    Property Get ReadyState() As Long
    [DispId(&H60021195), Description("loads a document synchronously from an URL")]
    Sub Load(ByVal bstrURL As String)
    [DispId(&H60021196), Description("starts an asynchronous download, returning immediately")]
    Sub LoadAsync(ByVal bstrURL As String, ByVal pUnkCallback As IUnknown)
    [DispId(&H60021197), Description("the success or failure code of the completed load operation")]
    Property Get LoadResult() As Long
    [DispId(&H60021198), Description("stops an asynchronous loading operation")]
    Sub Abort()
    [DispId(&H60021199), Description("returns the root device of the loaded document's device tree")]
    Function RootDevice() As IUPnPDevice
    [DispId(&H6002119A), Description("returns a device by its unique device name (UDN)")]
    Function DeviceByUDN(ByVal bstrUDN As String) As IUPnPDevice
End Interface

[InterfaceId("983DFC0B-1796-44DF-8975-CA545B620EE5")]
[OleAutomation(False)]
Interface IUPnPDeviceFinderAddCallbackWithInterface Extends stdole.IUnknown
    Sub DeviceAddedWithInterface(ByVal lFindData As Long, ByVal pDevice As IUPnPDevice, ByRef pguidInterface As UUID)
End Interface

[InterfaceId("77394C69-5486-40D6-9BC3-4991983E02DA")]
[OleAutomation(False)]
Interface IUPnPDescriptionDocumentCallback Extends stdole.IUnknown
    Sub LoadComplete(ByVal hrLoadResult As Long /* HRESULT */)
End Interface

[CoClassId("E2085F28-FEB7-404A-B8E7-E659BDEAAA02")]
[COMCreatable]
[Description("UPnPDeviceFinder Class")]
CoClass UPnPDeviceFinder
    [Default] Interface IUPnPDeviceFinder
    Interface IUPnPAddressFamilyControl
    Interface IUPnPHttpHeaderControl
End CoClass

[CoClassId("B9E84FFD-AD3C-40A4-B835-0882EBCBAAA8")]
[COMCreatable]
[Description("UPnPDevices Class")]
CoClass UPnPDevices
    [Default] Interface IUPnPDevices
End CoClass

[CoClassId("A32552C5-BA61-457A-B59A-A2561E125E33")]
[COMCreatable]
[Description("UPnPDevice Class")]
CoClass UPnPDevice
    [Default] Interface IUPnPDevice
End CoClass

[CoClassId("C0BC4B4A-A406-4EFC-932F-B8546B8100CC")]
[COMCreatable]
[Description("UPnPServices Class")]
CoClass UPnPServices
    [Default] Interface IUPnPServices
    Interface IUPnPServiceEnumProperty
End CoClass

[CoClassId("C624BA95-FBCB-4409-8C03-8CCEEC533EF1")]
[COMCreatable]
[Description("UPnPService Class")]
CoClass UPnPService
    [Default] Interface IUPnPService
    Interface IUPnPServiceAsync
    Interface IUPnPServiceDocumentAccess
    Interface IUPnPHttpHeaderControl
End CoClass

[CoClassId("1D8A9B47-3A28-4CE2-8A4B-BD34E45BCEEB")]
[COMCreatable]
[Description("UPnPDescriptionDocument Class")]
CoClass UPnPDescriptionDocument
    [Default] Interface IUPnPDescriptionDocument
    Interface IUPnPHttpHeaderControl
End CoClass

[CoClassId("181B54FC-380B-4A75-B3F1-4AC45E9605B0")]
[COMCreatable]
[Description("UPnPDeviceFinderEx Class")]
CoClass UPnPDeviceFinderEx
    [Default] Interface IUPnPDeviceFinder
    Interface IUPnPAddressFamilyControl
    Interface IUPnPHttpHeaderControl
End CoClass

[CoClassId("33FD0563-D81A-4393-83CC-0195B1DA2F91")]
[COMCreatable]
[Description("UPnPDescriptionDocumentEx Class")]
CoClass UPnPDescriptionDocumentEx
    [Default] Interface IUPnPDescriptionDocument
    Interface IUPnPHttpHeaderControl
End CoClass





[InterfaceId("204810B4-73B2-11D4-BF42-00B0D0118B56")]
[OleAutomation(False)]
Interface IUPnPEventSink Extends stdole.IUnknown
    [Hidden]
    [Description("method OnStateChanged")]
    Sub OnStateChanged(ByVal cChanges As Long, ByRef rgdispidChanges As Long)
    [Description("method OnStateChangedSafe")]
    Sub OnStateChangedSafe(ByVal varsadispidChanges As Variant)
End Interface

[InterfaceId("204810B5-73B2-11D4-BF42-00B0D0118B56")]
[OleAutomation(False)]
Interface IUPnPEventSource Extends stdole.IUnknown
    [Description("method Advise")]
    Sub Advise(ByVal pesSubscriber As IUPnPEventSink)
    [Description("method Unadvise")]
    Sub Unadvise(ByVal pesSubscriber As IUPnPEventSink)
End Interface

[InterfaceId("204810B6-73B2-11D4-BF42-00B0D0118B56")]
[OleAutomation(False)]
Interface IUPnPRegistrar Extends stdole.IUnknown
    Function RegisterDevice(ByVal bstrXMLDesc As String, ByVal bstrProgIDDeviceControlClass As String, ByVal bstrInitString As String, ByVal bstrContainerId As String, ByVal bstrResourcePath As String, ByVal nLifeTime As Long) As String
    Function RegisterRunningDevice(ByVal bstrXMLDesc As String, ByVal punkDeviceControl As IUnknown, ByVal bstrInitString As String, ByVal bstrResourcePath As String, ByVal nLifeTime As Long) As String
    Sub RegisterDeviceProvider(ByVal bstrProviderName As String, ByVal bstrProgIDProviderClass As String, ByVal bstrInitString As String, ByVal bstrContainerId As String)
    Function GetUniqueDeviceName(ByVal bstrDeviceIdentifier As String, ByVal bstrTemplateUDN As String) As String
    Sub UnregisterDevice(ByVal bstrDeviceIdentifier As String, ByVal fPermanent As BOOL)
    Sub UnregisterDeviceProvider(ByVal bstrProviderName As String)
End Interface

[InterfaceId("204810B7-73B2-11D4-BF42-00B0D0118B56")]
[OleAutomation(False)]
Interface IUPnPReregistrar Extends stdole.IUnknown
    Sub ReregisterDevice(ByVal bstrDeviceIdentifier As String, ByVal bstrXMLDesc As String, ByVal bstrProgIDDeviceControlClass As String, ByVal bstrInitString As String, ByVal bstrContainerId As String, ByVal bstrResourcePath As String, ByVal nLifeTime As Long)
    Sub ReregisterRunningDevice(ByVal bstrDeviceIdentifier As String, ByVal bstrXMLDesc As String, ByVal punkDeviceControl As IUnknown, ByVal bstrInitString As String, ByVal bstrResourcePath As String, ByVal nLifeTime As Long)
End Interface

[InterfaceId("204810BA-73B2-11D4-BF42-00B0D0118B56")]
[OleAutomation(False)]
Interface IUPnPDeviceControl Extends stdole.IUnknown
    Sub Initialize(ByVal bstrXMLDesc As String, ByVal bstrDeviceIdentifier As String, ByVal bstrInitString As String)
    Function GetServiceObject(ByVal bstrUDN As String, ByVal bstrServiceId As String) As Object
End Interface

[InterfaceId("204810BB-73B2-11D4-BF42-00B0D0118B56")]
[OleAutomation(False)]
Interface IUPnPDeviceControlHttpHeaders Extends stdole.IUnknown
    Function GetAdditionalResponseHeaders() As String
End Interface

[InterfaceId("204810B8-73B2-11D4-BF42-00B0D0118B56")]
[OleAutomation(False)]
Interface IUPnPDeviceProvider Extends stdole.IUnknown
    Sub Start(ByVal bstrInitString As String)
    Sub Stop()
End Interface

[InterfaceId("C92EB863-0269-4AFF-9C72-75321BBA2952")]
[OleAutomation(False)]
Interface IUPnPRemoteEndpointInfo Extends stdole.IUnknown
    Sub GetDwordValue(ByVal bstrValueName As String, ByRef pdwValue As Long)
    Sub GetStringValue(ByVal bstrValueName As String, ByRef pbstrValue As String)
    Sub GetGuidValue(ByVal bstrValueName As String, ByRef pguidValue As UUID)
End Interface

[CoClassId("204810B9-73B2-11D4-BF42-00B0D0118B56")]
[COMCreatable]
CoClass UPnPRegistrar
    [Default] Interface stdole.IUnknown
End CoClass

[CoClassId("2E5E84E9-4049-4244-B728-2D24227157C7")]
[COMCreatable]
CoClass UPnPRemoteEndpointInfo
    [Default] Interface stdole.IUnknown
End CoClass



'natupnp.idl
[InterfaceId("9C416740-A34E-446F-BA06-ABD04C3149AE")]
[OleAutomation(False)]
[Description("This is for use with NATUPnP Type Library v1.0 (NATUPNPLib, included with Windows)")]
Interface INATExternalIPAddressCallback Extends IUnknown
    Sub NewExternalIPAddress(ByVal bstrNewExternalIPAddress As String)
End Interface


Module wdUPNP

Public Enum UPnPError
    UPNP_E_ROOT_ELEMENT_EXPECTED = &H80040200
    UPNP_E_DEVICE_ELEMENT_EXPECTED = &H80040201
    UPNP_E_SERVICE_ELEMENT_EXPECTED = &H80040202
    UPNP_E_SERVICE_NODE_INCOMPLETE = &H80040203
    UPNP_E_DEVICE_NODE_INCOMPLETE = &H80040204
    UPNP_E_ICON_ELEMENT_EXPECTED = &H80040205
    UPNP_E_ICON_NODE_INCOMPLETE = &H80040206
    UPNP_E_INVALID_ACTION = &H80040207
    UPNP_E_INVALID_ARGUMENTS = &H80040208
    UPNP_E_OUT_OF_SYNC = &H80040209
    UPNP_E_ACTION_REQUEST_FAILED = &H80040210
    UPNP_E_TRANSPORT_ERROR = &H80040211
    UPNP_E_VARIABLE_VALUE_UNKNOWN = &H80040212
    UPNP_E_INVALID_VARIABLE = &H80040213
    UPNP_E_DEVICE_ERROR = &H80040214
    UPNP_E_PROTOCOL_ERROR = &H80040215
    UPNP_E_ERROR_PROCESSING_RESPONSE = &H80040216
    UPNP_E_DEVICE_TIMEOUT = &H80040217
    UPNP_E_DEVICE_SPECIFIC_ERROR = &H80040300
    UPNP_E_INVALID_DOCUMENT = &H80040500
    UPNP_E_EVENT_SUBSCRIPTION_FAILED = &H80040501
    UPNP_E_UPNP_NOT_INSTALLED = &H1AD
    UPNP_E_ACTION_SPECIFIC_BASE = &H80040300
    UPNP_E_ACTION_SPECIFIC_MAX = (UPNP_E_ACTION_SPECIFIC_BASE + (FAULT_ACTION_SPECIFIC_MAX - FAULT_ACTION_SPECIFIC_BASE))
End Enum

Public Enum UPnPFault
    FAULT_INVALID_ACTION = 401
    FAULT_INVALID_ARG = 402
    FAULT_INVALID_SEQUENCE_NUMBER = 403
    FAULT_INVALID_VARIABLE = 404
    FAULT_DEVICE_INTERNAL_ERROR = 501
    FAULT_ACTION_SPECIFIC_BASE = 600
    FAULT_ACTION_SPECIFIC_MAX = 899
End Enum

Public Enum UPnPAddressFamily
    UPNP_ADDRESSFAMILY_IPv4 = &H1
    UPNP_ADDRESSFAMILY_IPv6 = &H2
    UPNP_ADDRESSFAMILY_BOTH = &H3
End Enum

Public Enum UPnPServiceDelayFlag
    UPNP_SERVICE_DELAY_SCPD_AND_SUBSCRIPTION = &H1
End Enum

Public Enum UPnPDispatchIDs
    DISPID_XOBJ_MIN = &H60020000&
    DISPID_XOBJ_MAX = &H6002FFFF
    DISPID_XOBJ_BASE = DISPID_XOBJ_MIN
    DISPID_UPNPFINDDEVICES = (DISPID_XOBJ_BASE + 1000)
    DISPID_UPNPFINDDEVICESCALLBACK = (DISPID_UPNPFINDDEVICES + 500)
    DISPID_UPNPSERVICES = (DISPID_UPNPFINDDEVICESCALLBACK + 500)
    DISPID_UPNPSERVICE = (DISPID_UPNPSERVICES + 500)
    DISPID_UPNPDEVICES = (DISPID_UPNPSERVICE + 1000)
    DISPID_UPNPDEVICE = (DISPID_UPNPDEVICES + 500)
    DISPID_UPNPDESCRIPTIONDOC = (DISPID_UPNPDEVICE + 500)
    DISPID_UPNPADDRESSFAMILY = (DISPID_UPNPDESCRIPTIONDOC + 100)
    DISPID_UPNPASYNCRESULT = (DISPID_UPNPADDRESSFAMILY + 500)
    DISPID_UPNPSERVICEASYNC = (DISPID_UPNPASYNCRESULT + 500)
    DISPID_UPNPFINDDEVICES_FINDBYTYPE = (DISPID_UPNPFINDDEVICES + 1)
    DISPID_UPNPFINDDEVICES_FINDBYDCPI = (DISPID_UPNPFINDDEVICES + 2)
    DISPID_UPNPFINDDEVICES_FINDBYUDN = (DISPID_UPNPFINDDEVICES + 3)
    DISPID_UPNPFINDDEVICES_CREATEASYNCFIND = (DISPID_UPNPFINDDEVICES + 4)
    DISPID_UPNPFINDDEVICES_STARTASYNCFIND = (DISPID_UPNPFINDDEVICES + 5)
    DISPID_UPNPFINDDEVICES_CANCELASYNCFIND = (DISPID_UPNPFINDDEVICES + 6)
    DISPID_UPNPFINDDEVICESCALLBACK_NEWDEVICE = (DISPID_UPNPFINDDEVICESCALLBACK + 1)
    DISPID_UPNPFINDDEVICESCALLBACK_SEARCHCOMPLETE = (DISPID_UPNPFINDDEVICESCALLBACK + 2)
    DISPID_UPNPSERVICES_COUNT = (DISPID_UPNPSERVICES + 1)
    DISPID_UPNPSERVICE_QUERYSTATEVARIABLE = (DISPID_UPNPSERVICE + 1)
    DISPID_UPNPSERVICE_INVOKEACTION = (DISPID_UPNPSERVICE + 2)
    DISPID_UPNPSERVICE_SERVICETYPEIDENTIFIER = (DISPID_UPNPSERVICE + 3)
    DISPID_UPNPSERVICE_ADDSTATECHANGECALLBACK = (DISPID_UPNPSERVICE + 4)
    DISPID_UPNPSERVICE_SERVICEID = (DISPID_UPNPSERVICE + 5)
    DISPID_UPNPSERVICE_LASTTRANSPORTSTATUS = (DISPID_UPNPSERVICE + 6)
    DISPID_UPNPSERVICEASYNC_BEGININVOKEACTION = (DISPID_UPNPSERVICEASYNC + 1)
    DISPID_UPNPSERVICEASYNC_ENDINVOKEACTION = (DISPID_UPNPSERVICEASYNC + 2)
    DISPID_UPNPSERVICEASYNC_BEGINQUERYSTATEVARIABLE = (DISPID_UPNPSERVICEASYNC + 3)
    DISPID_UPNPSERVICEASYNC_ENDQUERYSTATEVARIABLE = (DISPID_UPNPSERVICEASYNC + 4)
    DISPID_UPNPSERVICEASYNC_BEGINSUBSCRIBETOEVENTS = (DISPID_UPNPSERVICEASYNC + 5)
    DISPID_UPNPSERVICEASYNC_ENDSUBSCRIBETOEVENTS = (DISPID_UPNPSERVICEASYNC + 6)
    DISPID_UPNPSERVICEASYNC_BEGINSCPDDOWNLOAD = (DISPID_UPNPSERVICEASYNC + 7)
    DISPID_UPNPSERVICEASYNC_ENDSCPDDOWNLOAD = (DISPID_UPNPSERVICEASYNC + 8)
    DISPID_UPNPSERVICEASYNC_CANCELASYNCOPERATION = (DISPID_UPNPSERVICEASYNC + 9)
    DISPID_UPNPASYNCRESULT_ASYNCOPERATIONCOMPLETE = (DISPID_UPNPASYNCRESULT + 1)
    DISPID_UPNPDEVICES_COUNT = (DISPID_UPNPDEVICES + 1)
    DISPID_UPNPDEVICE_ISROOTDEVICE = (DISPID_UPNPDEVICE + 1)
    DISPID_UPNPDEVICE_ROOT = (DISPID_UPNPDEVICE + 2)
    DISPID_UPNPDEVICE_PARENT = (DISPID_UPNPDEVICE + 3)
    DISPID_UPNPDEVICE_HASCHILDREN = (DISPID_UPNPDEVICE + 4)
    DISPID_UPNPDEVICE_CHILDREN = (DISPID_UPNPDEVICE + 5)
    DISPID_UPNPDEVICE_UDN = (DISPID_UPNPDEVICE + 6)
    DISPID_UPNPDEVICE_FRIENDLYNAME = (DISPID_UPNPDEVICE + 7)
    DISPID_UPNPDEVICE_DEVICETYPE = (DISPID_UPNPDEVICE + 8)
    DISPID_UPNPDEVICE_PRESENTATIONURL = (DISPID_UPNPDEVICE + 9)
    DISPID_UPNPDEVICE_MANUFACTURERNAME = (DISPID_UPNPDEVICE + 10)
    DISPID_UPNPDEVICE_MANUFACTURERURL = (DISPID_UPNPDEVICE + 11)
    DISPID_UPNPDEVICE_MODELNAME = (DISPID_UPNPDEVICE + 12)
    DISPID_UPNPDEVICE_MODELNUMBER = (DISPID_UPNPDEVICE + 13)
    DISPID_UPNPDEVICE_DESCRIPTION = (DISPID_UPNPDEVICE + 14)
    DISPID_UPNPDEVICE_MODELURL = (DISPID_UPNPDEVICE + 15)
    DISPID_UPNPDEVICE_UPC = (DISPID_UPNPDEVICE + 16)
    DISPID_UPNPDEVICE_SERIALNUMBER = (DISPID_UPNPDEVICE + 17)
    DISPID_UPNPDEVICE_LOADSMALLICON = (DISPID_UPNPDEVICE + 18)
    DISPID_UPNPDEVICE_LOADICON = (DISPID_UPNPDEVICE + 19)
    DISPID_UPNPDEVICE_SERVICES = (DISPID_UPNPDEVICE + 20)
    DISPID_UPNPDESCRIPTIONDOC_LOAD = (DISPID_UPNPDESCRIPTIONDOC + 1)
    DISPID_UPNPDESCRIPTIONDOC_LOADASYNC = (DISPID_UPNPDESCRIPTIONDOC + 2)
    DISPID_UPNPDESCRIPTIONDOC_LOADERROR = (DISPID_UPNPDESCRIPTIONDOC + 3)
    DISPID_UPNPDESCRIPTIONDOC_ABORT = (DISPID_UPNPDESCRIPTIONDOC + 4)
    DISPID_UPNPDESCRIPTIONDOC_ROOTDEVICE = (DISPID_UPNPDESCRIPTIONDOC + 5)
    DISPID_UPNPDESCRIPTIONDOC_DEVICEBYUDN = (DISPID_UPNPDESCRIPTIONDOC + 6)
End Enum

Public Enum UPnPHostError
    UPNP_E_REQUIRED_ELEMENT_ERROR = &H8004A020 'MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0xA020)
    UPNP_E_DUPLICATE_NOT_ALLOWED = &H8004A021 '        MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0xA021)
    UPNP_E_DUPLICATE_SERVICE_ID = &H8004A022 '         MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0xA022)
    UPNP_E_INVALID_DESCRIPTION = &H8004A023 '          MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0xA023)
    UPNP_E_INVALID_SERVICE = &H8004A024 '              MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0xA024)
    UPNP_E_INVALID_ICON = &H8004A025 '                 MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0xA025)
    UPNP_E_INVALID_XML = &H8004A026 '                  MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0xA026)
    UPNP_E_INVALID_ROOT_NAMESPACE = &H8004A027 '       MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0xA027)
    UPNP_E_SUFFIX_TOO_LONG = &H8004A028 '              MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0xA028)
    UPNP_E_URLBASE_PRESENT = &H8004A029 '              MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0xA029)
    UPNP_E_VALUE_TOO_LONG = &H8004A030 '               MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0xA030)
    UPNP_E_DEVICE_RUNNING = &H8004A031 'MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0xA031)
    UPNP_E_DEVICE_NOTREGISTERED = &H8004A032 ' MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0xA032)
End Enum

Public Const REMOTE_ADDRESS_VALUE_NAME  = "RemoteAddress"
'  Address family value is a DWORD
Public Const ADDRESS_FAMILY_VALUE_NAME  = "AddressFamily"


End Module