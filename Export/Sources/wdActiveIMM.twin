'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

'ActiveIMM - dimm.h/.idl


[InterfaceId("08C03412-F96B-11d0-A475-00AA006BCC59")]
[OleAutomation(False)]
Interface IEnumRegisterWordA Extends IUnknown
    Sub Clone(ByRef ppEnum As IEnumRegisterWordA)
    Sub Next(ByVal ulCount As Long, ByRef rgRegisterWord As REGISTERWORDA, ByRef pcFetched As Long)
    Sub Reset()
    Sub Skip(ByVal ulCount As Long)
End Interface

[InterfaceId("4955DD31-B159-11d0-8FCF-00AA006BCC59")]
[OleAutomation(False)]
Interface IEnumRegisterWordW Extends IUnknown
    Sub Clone(ByRef ppEnum As IEnumRegisterWordW)
    Sub Next(ByVal ulCount As Long, ByRef rgRegisterWord As REGISTERWORDW, ByRef pcFetched As Long)
    Sub Reset()
    Sub Skip(ByVal ulCount As Long)
End Interface

[InterfaceId("09B5EAB0-F997-11d1-93D4-0060B067B86E")]
[OleAutomation(False)]
Interface IEnumInputContext Extends IUnknown
    Sub Clone(ByRef ppEnum As IEnumInputContext)
    Sub Next(ByVal ulCount As Long, rgInputContext As LongPtr, ByRef pcFetched As Long)
    Sub Reset()
    Sub Skip(ByVal ulCount As Long)
End Interface

[InterfaceId("B3458082-BD00-11d1-939B-0060B067B86E")]
[OleAutomation(False)]
Interface IActiveIMMRegistrar Extends IUnknown
    Sub RegisterIME(ByRef rclsid As UUID, ByVal lgid As Integer, ByVal pszIconFile As LongPtr, ByVal pszDesc As LongPtr)
    Sub UnregisterIME(ByRef rclsid As UUID)
End Interface

[InterfaceId("B5CF2CFA-8AEB-11d1-9364-0060B067B86E")]
[OleAutomation(False)]
Interface IActiveIMMMessagePumpOwner Extends IUnknown
    Sub Start()
    Sub End()
    Sub OnTranslateMessage(ByRef pMsg As MSG)
    Sub Pause(ByRef pdwCookie As Long)
    Sub Resume(ByVal dwCookie As Long)
End Interface

[InterfaceId("08C0E040-62D1-11d1-9326-0060B067B86E")]
[OleAutomation(False)]
Interface IActiveIMMApp Extends IUnknown
    Sub AssociateContext(ByVal hWnd As LongPtr, ByVal hIME As LongPtr, ByRef phPrev As LongPtr)
    Sub ConfigureIMEA(ByVal hKL As LongPtr, ByVal hWnd As LongPtr, ByVal dwMode As Long, ByRef pData As REGISTERWORDA)
    Sub ConfigureIMEW(ByVal hKL As LongPtr, ByVal hWnd As LongPtr, ByVal dwMode As Long, ByRef pData As REGISTERWORDW)
    Sub CreateContext(ByRef phIMC As LongPtr)
    Sub DestroyContext(ByVal hIME As LongPtr)
    Sub EnumRegisterWordA(ByVal hKL As LongPtr, ByVal szReading As LongPtr, ByVal dwStyle As Long, ByVal szRegister As LongPtr, pData As Any, ByRef pEnum As IEnumRegisterWordA)
    Sub EnumRegisterWordW(ByVal hKL As LongPtr, ByVal szReading As LongPtr, ByVal dwStyle As Long, ByVal szRegister As LongPtr, pData As Any, ByRef pEnum As IEnumRegisterWordW)
    Sub EscapeA(ByVal hKL As LongPtr, ByVal hIMC As LongPtr, ByVal uEscape As Long, pData As Any, ByRef plResult As LongPtr)
    Sub EscapeW(ByVal hKL As LongPtr, ByVal hIMC As LongPtr, ByVal uEscape As Long, pData As Any, ByRef plResult As LongPtr)
    Sub GetCandidateListA(ByVal hIMC As LongPtr, ByVal dwIndex As Long, ByVal uBufLen As Long, ByRef pCandList As CANDIDATELIST, ByRef puCopied As Long)
    Sub GetCandidateListW(ByVal hIMC As LongPtr, ByVal dwIndex As Long, ByVal uBufLen As Long, ByRef pCandList As CANDIDATELIST, ByRef puCopied As Long)
    Sub GetCandidateListCountA(ByVal hIMC As LongPtr, ByRef pdwListSize As Long, ByRef pdwBufLen As Long)
    Sub GetCandidateListCountW(ByVal hIMC As LongPtr, ByRef pdwListSize As Long, ByRef pdwBufLen As Long)
    Sub GetCandidateWindow(ByVal hIMC As LongPtr, ByVal dwIndex As Long, ByRef pCandidate As CANDIDATEFORM)
    Sub GetCompositionFontA(ByVal hIMC As LongPtr, ByRef plf As LOGFONTA)
    Sub GetCompositionFontW(ByVal hIMC As LongPtr, ByRef plf As LOGFONTW)
    Sub GetCompositionStringA(ByVal hIMC As LongPtr, ByVal dwIndex As Long, ByVal dwBufLen As Long, ByRef plCopied As Long, pBuf As Any)
    Sub GetCompositionStringW(ByVal hIMC As LongPtr, ByVal dwIndex As Long, ByVal dwBufLen As Long, ByRef plCopied As Long, pBuf As Any)
    Sub GetCompositionWindow(ByVal hIMC As LongPtr, ByRef pCompForm As COMPOSITIONFORM)
    Sub GetContext(ByVal hWnd As LongPtr, ByRef phIMC As LongPtr)
    Sub GetConversionListA(ByVal hKL As LongPtr, ByVal hIMC As LongPtr, ByVal pSrc As LongPtr, ByVal uBufLen As Long, ByVal uFlag As Long, ByRef pDst As CANDIDATELIST, ByRef puCopied As Long)
    Sub GetConversionListW(ByVal hKL As LongPtr, ByVal hIMC As LongPtr, ByVal pSrc As LongPtr, ByVal uBufLen As Long, ByVal uFlag As Long, ByRef pDst As CANDIDATELIST, ByRef puCopied As Long)
    Sub GetConversionStatus(ByVal hIMC As LongPtr, ByRef pfdwConversion As Long, ByRef pfdwSentence As Long)
    Sub GetDefaultIMEWnd(ByVal hWnd As LongPtr, ByRef phDefWnd As LongPtr)
    Sub GetDescriptionA(ByVal hKL As LongPtr, ByVal uBufLen As Long, ByVal szDescription As LongPtr, ByRef puCopied As Long)
    Sub GetDescriptionW(ByVal hKL As LongPtr, ByVal uBufLen As Long, ByVal szDescription As LongPtr, ByRef puCopied As Long)
    Sub GetGuideLineA(ByVal hIMC As LongPtr, ByVal dwIndex As Long, ByVal dwBufLen As Long, pBuf As Any, ByRef pdwResult As Long)
    Sub GetGuideLineW(ByVal hIMC As LongPtr, ByVal dwIndex As Long, ByVal dwBufLen As Long, pBuf As Any, ByRef pdwResult As Long)
    Sub GetIMEFileNameA(ByVal hKL As LongPtr, ByVal uBufLen As Long, ByVal szFileName As LongPtr, ByRef puCopied As Long)
    Sub GetIMEFileNameW(ByVal hKL As LongPtr, ByVal uBufLen As Long, ByVal szFileName As LongPtr, ByRef puCopied As Long)
    Sub GetOpenStatus(ByVal hIMC As LongPtr)
    Sub GetProperty(ByVal hKL As LongPtr, ByVal fdwIndex As Long, ByRef pdwProperty As Long)
    Sub GetRegisterWordStyleA(ByVal hKL As LongPtr, ByVal nItem As Long, ByRef pStyleBuf As STYLEBUFA, ByRef puCopied As Long)
    Sub GetRegisterWordStyleW(ByVal hKL As LongPtr, ByVal nItem As Long, ByRef pStyleBuf As STYLEBUFW, ByRef puCopied As Long)
    Sub GetStatusWindowPos(ByVal hIMC As LongPtr, ByRef pptPos As POINT)
    Sub GetVirtualKey(ByVal hWnd As LongPtr, ByRef puVirtualKey As Long)
    Sub InstallIMEA(ByVal szIMEFileName As LongPtr, ByVal szLayoutText As LongPtr, ByRef phKL As LongPtr)
    Sub InstallIMEW(ByVal szIMEFileName As LongPtr, ByVal szLayoutText As LongPtr, ByRef phKL As LongPtr)
    Sub IsIME(ByVal hKL As LongPtr)
    Sub IsUIMessageA(ByVal hWndIME As LongPtr, ByVal msg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr)
    Sub IsUIMessageW(ByVal hWndIME As LongPtr, ByVal msg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr)
    Sub NotifyIME(ByVal hIMC As LongPtr, ByVal dwAction As Long, ByVal dwIndex As Long, ByVal dwValue As Long)
    Sub RegisterWordA(ByVal hKL As LongPtr, ByVal szReading As LongPtr, ByVal dwStyle As Long, ByVal szRegister As LongPtr)
    Sub RegisterWordW(ByVal hKL As LongPtr, ByVal szReading As LongPtr, ByVal dwStyle As Long, ByVal szRegister As LongPtr)
    Sub ReleaseContext(ByVal hWnd As LongPtr, ByVal hIMC As LongPtr)
    Sub SetCandidateWindow(ByVal hIMC As LongPtr, ByRef pCandidate As CANDIDATEFORM)
    Sub SetCompositionFontA(ByVal hIMC As LongPtr, ByRef plf As LOGFONTA)
    Sub SetCompositionFontW(ByVal hIMC As LongPtr, ByRef plf As LOGFONTW)
    Sub SetCompositionStringA(ByVal hIMC As LongPtr, ByVal dwIndex As Long, pComp As Any, ByVal dwCompLen As Long, pRead As Any, ByVal dwReadLen As Long)
    Sub SetCompositionStringW(ByVal hIMC As LongPtr, ByVal dwIndex As Long, pComp As Any, ByVal dwCompLen As Long, pRead As Any, ByVal dwReadLen As Long)
    Sub SetCompositionWindow(ByVal hIMC As LongPtr, ByRef pCompForm As COMPOSITIONFORM)
    Sub SetConversionStatus(ByVal hIMC As LongPtr, ByVal fdwConversion As Long, ByVal fdwSentence As Long)
    Sub SetOpenStatus(ByVal hIMC As LongPtr, ByVal fOpen As BOOL)
    Sub SetStatusWindowPos(ByVal hIMC As LongPtr, ByRef pptPos As POINT)
    Sub SimulateHotKey(ByVal hWnd As LongPtr, ByVal dwHotKeyID As Long)
    Sub UnregisterWordA(ByVal hKL As LongPtr, ByVal szReading As LongPtr, ByVal dwStyle As Long, ByVal szUnregister As LongPtr)
    Sub UnregisterWordW(ByVal hKL As LongPtr, ByVal szReading As LongPtr, ByVal dwStyle As Long, ByVal szUnregister As LongPtr)
    Sub Activate(ByVal fRestoreLayout As BOOL)
    Sub Deactivate()
    Sub OnDefWindowProc(ByVal hWnd As LongPtr, ByVal Msg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr, ByRef plResult As LongPtr)
    Sub FilterClientWindows(ByRef aaClassList As Integer, ByVal uSize As Long)
    Sub GetCodePageA(ByVal hKL As LongPtr, ByRef uCodePage As Long)
    Sub GetLangId(ByVal hKL As LongPtr, ByRef plid As Integer)
    Sub AssociateContextEx(ByVal hWnd As LongPtr, ByVal hIMC As LongPtr, ByVal dwFlags As Long)
    Sub DisableIME(ByVal idThread As Long)
    Sub GetImeMenuItemsA(ByVal hIMC As LongPtr, ByVal dwFlags As Long, ByVal dwType As Long, ByRef pImeParentMenu As IMEMENUITEMINFOA, ByRef pImeMenu As IMEMENUITEMINFOA, ByVal dwSize As Long, ByRef pdwResult As Long)
    Sub GetImeMenuItemsW(ByVal hIMC As LongPtr, ByVal dwFlags As Long, ByVal dwType As Long, ByRef pImeParentMenu As IMEMENUITEMINFOW, ByRef pImeMenu As IMEMENUITEMINFOW, ByVal dwSize As Long, ByRef pdwResult As Long)
    Sub EnumInputContext(ByVal idThread As Long, ByRef ppEnum As IEnumInputContext)
End Interface

[InterfaceId("08C03411-F96B-11d0-A475-00AA006BCC59")]
[OleAutomation(False)]
Interface IActiveIMMIME Extends IUnknown
    Sub AssociateContext(ByVal hWnd As LongPtr, ByVal hIME As LongPtr, ByRef phPrev As LongPtr)
    Sub ConfigureIMEA(ByVal hKL As LongPtr, ByVal hWnd As LongPtr, ByVal dwMode As Long, ByRef pData As REGISTERWORDA)
    Sub ConfigureIMEW(ByVal hKL As LongPtr, ByVal hWnd As LongPtr, ByVal dwMode As Long, ByRef pData As REGISTERWORDW)
    Sub CreateContext(ByRef phIMC As LongPtr)
    Sub DestroyContext(ByVal hIME As LongPtr)
    Sub EnumRegisterWordA(ByVal hKL As LongPtr, ByVal szReading As LongPtr, ByVal dwStyle As Long, ByVal szRegister As LongPtr, pData As Any, ByRef pEnum As IEnumRegisterWordA)
    Sub EnumRegisterWordW(ByVal hKL As LongPtr, ByVal szReading As LongPtr, ByVal dwStyle As Long, ByVal szRegister As LongPtr, pData As Any, ByRef pEnum As IEnumRegisterWordW)
    Sub EscapeA(ByVal hKL As LongPtr, ByVal hIMC As LongPtr, ByVal uEscape As Long, pData As Any, ByRef plResult As LongPtr)
    Sub EscapeW(ByVal hKL As LongPtr, ByVal hIMC As LongPtr, ByVal uEscape As Long, pData As Any, ByRef plResult As LongPtr)
    Sub GetCandidateListA(ByVal hIMC As LongPtr, ByVal dwIndex As Long, ByVal uBufLen As Long, ByRef pCandList As CANDIDATELIST, ByRef puCopied As Long)
    Sub GetCandidateListW(ByVal hIMC As LongPtr, ByVal dwIndex As Long, ByVal uBufLen As Long, ByRef pCandList As CANDIDATELIST, ByRef puCopied As Long)
    Sub GetCandidateListCountA(ByVal hIMC As LongPtr, ByRef pdwListSize As Long, ByRef pdwBufLen As Long)
    Sub GetCandidateListCountW(ByVal hIMC As LongPtr, ByRef pdwListSize As Long, ByRef pdwBufLen As Long)
    Sub GetCandidateWindow(ByVal hIMC As LongPtr, ByVal dwIndex As Long, ByRef pCandidate As CANDIDATEFORM)
    Sub GetCompositionFontA(ByVal hIMC As LongPtr, ByRef plf As LOGFONTA)
    Sub GetCompositionFontW(ByVal hIMC As LongPtr, ByRef plf As LOGFONTW)
    Sub GetCompositionStringA(ByVal hIMC As LongPtr, ByVal dwIndex As Long, ByVal dwBufLen As Long, ByRef plCopied As Long, pBuf As Any)
    Sub GetCompositionStringW(ByVal hIMC As LongPtr, ByVal dwIndex As Long, ByVal dwBufLen As Long, ByRef plCopied As Long, pBuf As Any)
    Sub GetCompositionWindow(ByVal hIMC As LongPtr, ByRef pCompForm As COMPOSITIONFORM)
    Sub GetContext(ByVal hWnd As LongPtr, ByRef phIMC As LongPtr)
    Sub GetConversionListA(ByVal hKL As LongPtr, ByVal hIMC As LongPtr, ByVal pSrc As LongPtr, ByVal uBufLen As Long, ByVal uFlag As Long, ByRef pDst As CANDIDATELIST, ByRef puCopied As Long)
    Sub GetConversionListW(ByVal hKL As LongPtr, ByVal hIMC As LongPtr, ByVal pSrc As LongPtr, ByVal uBufLen As Long, ByVal uFlag As Long, ByRef pDst As CANDIDATELIST, ByRef puCopied As Long)
    Sub GetConversionStatus(ByVal hIMC As LongPtr, ByRef pfdwConversion As Long, ByRef pfdwSentence As Long)
    Sub GetDefaultIMEWnd(ByVal hWnd As LongPtr, ByRef phDefWnd As LongPtr)
    Sub GetDescriptionA(ByVal hKL As LongPtr, ByVal uBufLen As Long, ByVal szDescription As LongPtr, ByRef puCopied As Long)
    Sub GetDescriptionW(ByVal hKL As LongPtr, ByVal uBufLen As Long, ByVal szDescription As LongPtr, ByRef puCopied As Long)
    Sub GetGuideLineA(ByVal hIMC As LongPtr, ByVal dwIndex As Long, ByVal dwBufLen As Long, pBuf As Any, ByRef pdwResult As Long)
    Sub GetGuideLineW(ByVal hIMC As LongPtr, ByVal dwIndex As Long, ByVal dwBufLen As Long, pBuf As Any, ByRef pdwResult As Long)
    Sub GetIMEFileNameA(ByVal hKL As LongPtr, ByVal uBufLen As Long, ByVal szFileName As LongPtr, ByRef puCopied As Long)
    Sub GetIMEFileNameW(ByVal hKL As LongPtr, ByVal uBufLen As Long, ByVal szFileName As LongPtr, ByRef puCopied As Long)
    Sub GetOpenStatus(ByVal hIMC As LongPtr)
    Sub GetProperty(ByVal hKL As LongPtr, ByVal fdwIndex As Long, ByRef pdwProperty As Long)
    Sub GetRegisterWordStyleA(ByVal hKL As LongPtr, ByVal nItem As Long, ByRef pStyleBuf As STYLEBUFA, ByRef puCopied As Long)
    Sub GetRegisterWordStyleW(ByVal hKL As LongPtr, ByVal nItem As Long, ByRef pStyleBuf As STYLEBUFW, ByRef puCopied As Long)
    Sub GetStatusWindowPos(ByVal hIMC As LongPtr, ByRef pptPos As POINT)
    Sub GetVirtualKey(ByVal hWnd As LongPtr, ByRef puVirtualKey As Long)
    Sub InstallIMEA(ByVal szIMEFileName As LongPtr, ByVal szLayoutText As LongPtr, ByRef phKL As LongPtr)
    Sub InstallIMEW(ByVal szIMEFileName As LongPtr, ByVal szLayoutText As LongPtr, ByRef phKL As LongPtr)
    Sub IsIME(ByVal hKL As LongPtr)
    Sub IsUIMessageA(ByVal hWndIME As LongPtr, ByVal msg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr)
    Sub IsUIMessageW(ByVal hWndIME As LongPtr, ByVal msg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr)
    Sub NotifyIME(ByVal hIMC As LongPtr, ByVal dwAction As Long, ByVal dwIndex As Long, ByVal dwValue As Long)
    Sub RegisterWordA(ByVal hKL As LongPtr, ByVal szReading As LongPtr, ByVal dwStyle As Long, ByVal szRegister As LongPtr)
    Sub RegisterWordW(ByVal hKL As LongPtr, ByVal szReading As LongPtr, ByVal dwStyle As Long, ByVal szRegister As LongPtr)
    Sub ReleaseContext(ByVal hWnd As LongPtr, ByVal hIMC As LongPtr)
    Sub SetCandidateWindow(ByVal hIMC As LongPtr, ByRef pCandidate As CANDIDATEFORM)
    Sub SetCompositionFontA(ByVal hIMC As LongPtr, ByRef plf As LOGFONTA)
    Sub SetCompositionFontW(ByVal hIMC As LongPtr, ByRef plf As LOGFONTW)
    Sub SetCompositionStringA(ByVal hIMC As LongPtr, ByVal dwIndex As Long, pComp As Any, ByVal dwCompLen As Long, pRead As Any, ByVal dwReadLen As Long)
    Sub SetCompositionStringW(ByVal hIMC As LongPtr, ByVal dwIndex As Long, pComp As Any, ByVal dwCompLen As Long, pRead As Any, ByVal dwReadLen As Long)
    Sub SetCompositionWindow(ByVal hIMC As LongPtr, ByRef pCompForm As COMPOSITIONFORM)
    Sub SetConversionStatus(ByVal hIMC As LongPtr, ByVal fdwConversion As Long, ByVal fdwSentence As Long)
    Sub SetOpenStatus(ByVal hIMC As LongPtr, ByVal fOpen As BOOL)
    Sub SetStatusWindowPos(ByVal hIMC As LongPtr, ByRef pptPos As POINT)
    Sub SimulateHotKey(ByVal hWnd As LongPtr, ByVal dwHotKeyID As Long)
    Sub UnregisterWordA(ByVal hKL As LongPtr, ByVal szReading As LongPtr, ByVal dwStyle As Long, ByVal szUnregister As LongPtr)
    Sub UnregisterWordW(ByVal hKL As LongPtr, ByVal szReading As LongPtr, ByVal dwStyle As Long, ByVal szUnregister As LongPtr)
    ' ime helper methods
    Sub GenerateMessage(ByVal hIMC As LongPtr)
    ' HIMC and HIMCC management api's
    Sub LockIMC(ByVal hIMC As LongPtr, ByRef ppIMC As LongPtr)
    Sub UnlockIMC(ByVal hIMC As LongPtr)
    Sub GetIMCLockCount(ByVal hIMC As LongPtr, ByRef pdwLockCount As Long)
    Sub CreateIMCC(ByVal dwSize As Long, ByRef phIMCC As LongPtr)
    Sub DestroyIMCC(ByVal hIMCC As LongPtr)
    Sub LockIMCC(ByVal hIMCC As LongPtr, ByRef ppv As LongPtr)
    Sub UnlockIMCC(ByVal hIMCC As LongPtr)
    Sub ReSizeIMCC(ByVal hIMCC As LongPtr, ByVal dwSize As Long, ByRef phIMCC As LongPtr)
    Sub GetIMCCSize(ByVal hIMCC As LongPtr, ByRef pdwSize As Long)
    Sub GetIMCCLockCount(ByVal hIMCC As LongPtr, ByRef pdwLockCount As Long)
    ' hot key manipulation api's
    Sub GetHotKey(ByVal dwHotKeyID As Long, ByRef puModifiers As Long, ByRef puVKey As Long, ByRef phKL As LongPtr)
    Sub SetHotKey(ByVal dwHotKeyID As Long, ByVal uModifiers As Long, ByVal uVKey As Long, ByVal hKL As LongPtr)
    ' soft keyboard api's
    Sub CreateSoftKeyboard(ByVal uType As Long, ByVal hOwner As LongPtr, ByVal x As Long, ByVal y As Long, ByRef phSoftKbdWnd As LongPtr)
    Sub DestroySoftKeyboard(ByVal hSoftKbdWnd As LongPtr)
    Sub ShowSoftKeyboard(ByVal hSoftKbdWnd As LongPtr, ByVal nCmdShow As Long)
    Sub GetCodePageA(ByVal hKL As LongPtr, ByRef uCodePage As Long)
    Sub GetLangId(ByVal hKL As LongPtr, ByRef plid As Integer)
    Sub KeybdEvent(ByVal lgidIME As Integer, ByVal bVk As Byte, ByVal bScan As Byte, ByVal dwFlags As Long, ByVal dwExtraInfo As Long)
    Sub LockModal()
    Sub UnlockModal()
    ' win98/nt5 apis
    Sub AssociateContextEx(ByVal hWnd As LongPtr, ByVal hIMC As LongPtr, ByVal dwFlags As Long)
    Sub DisableIME(ByVal idThread As Long)
    Sub GetImeMenuItemsA(ByVal hIMC As LongPtr, ByVal dwFlags As Long, ByVal dwType As Long, ByRef pImeParentMenu As IMEMENUITEMINFOA, ByRef pImeMenu As IMEMENUITEMINFOA, ByVal dwSize As Long, ByRef pdwResult As Long)
    Sub GetImeMenuItemsW(ByVal hIMC As LongPtr, ByVal dwFlags As Long, ByVal dwType As Long, ByRef pImeParentMenu As IMEMENUITEMINFOW, ByRef pImeMenu As IMEMENUITEMINFOW, ByVal dwSize As Long, ByRef pdwResult As Long)
    Sub EnumInputContext(ByVal idThread As Long, ByRef ppEnum As IEnumInputContext)
    Sub RequestMessageA(ByVal hIMC As LongPtr, ByVal wParam As LongPtr, ByVal lParam As LongPtr, ByRef plResult As LongPtr)
    Sub RequestMessageW(ByVal hIMC As LongPtr, ByVal wParam As LongPtr, ByVal lParam As LongPtr, ByRef plResult As LongPtr)
    Sub SendIMCA(ByVal hWnd As LongPtr, ByVal uMsg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr, ByRef plResult As LongPtr)
    Sub SendIMCW(ByVal hWnd As LongPtr, ByVal uMsg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr, ByRef plResult As LongPtr)
    Sub IsSleeping()
End Interface

[InterfaceId("6FE20962-D077-11d0-8FE7-00AA006BCC59")]
[OleAutomation(False)]
Interface IActiveIME Extends IUnknown
    Sub Inquire(ByVal dwSystemInfoFlags As Long, ByRef pIMEInfo As IMEINFO, ByVal szWndClass As LongPtr, ByRef pdwPrivate As Long)
    Sub ConversionList(ByVal hIMC As LongPtr, ByVal szSource As LongPtr, ByVal uFlag As Long, ByVal uBufLen As Long, ByRef pDest As CANDIDATELIST, ByRef puCopied As Long)
    Sub Configure(ByVal hKL As LongPtr, ByVal hWnd As LongPtr, ByVal dwMode As Long, ByRef pRegisterWord As REGISTERWORDW)
    Sub Destroy(ByVal uReserved As Long)
    Sub Escape(ByVal hIMC As LongPtr, ByVal uEscape As Long, pData As Any, ByRef plResult As LongPtr)
    Sub SetActiveContext(ByVal hIMC As LongPtr, ByVal fFlag As Long)
    Sub ProcessKey(ByVal hIMC As LongPtr, ByVal uVirKey As Long, ByVal lParam As Long, ByVal pbKeyState As LongPtr)
    Sub Notify(ByVal hIMC As LongPtr, ByVal dwAction As Long, ByVal dwIndex As Long, ByVal dwValue As Long)
    Sub Select(ByVal hIMC As LongPtr, ByVal fSelect As Long)
    Sub SetCompositionString(ByVal hIMC As LongPtr, ByVal dwIndex As Long, pComp As Any, ByVal dwCompLen As Long, pRead As Any, ByVal dwReadLen As Long)
    Sub ToAsciiEx(ByVal uVirKey As Long, ByVal uScanCode As Long, ByVal pbKeyState As LongPtr, ByVal fuState As Long, ByVal hIMC As LongPtr, ByRef pdwTransBuf As Long, ByRef puSize As Long)
    Sub RegisterWord(ByVal szReading As LongPtr, ByVal dwStyle As Long, ByVal szString As LongPtr)
    Sub UnregisterWord(ByVal szReading As LongPtr, ByVal dwStyle As Long, ByVal szString As LongPtr)
    Sub GetRegisterWordStyle(ByVal nItem As Long, ByRef pStyleBuf As STYLEBUFW, ByRef puBufSize As Long)
    Sub EnumRegisterWord(ByVal szReading As LongPtr, ByVal dwStyle As Long, ByVal szRegister As LongPtr, pData As Any, ByRef ppEnum As IEnumRegisterWordW)
    Sub GetCodePageA(ByRef uCodePage As Long)
    Sub GetLangId(ByRef plid As Integer)
End Interface

[InterfaceId("e1c4bf0e-2d53-11d2-93e1-0060b067b86e")]
[OleAutomation(False)]
Interface IActiveIME2 Extends IActiveIME
    Sub Sleep()
    Sub Unsleep(ByVal fDead As Long)
End Interface


[CoClassId("4955DD33-B159-11d0-8FCF-00AA006BCC59")]
[Description("CLSID_CActiveIMM")]
CoClass CActiveIMM
  [Default] Interface IActiveIMMApp
  Interface IActiveIMMIME
  Interface IActiveIMMRegistrar
  Interface IActiveIMMMessagePumpOwner
End CoClass



Module wdActiveIMM

    
Public Function IID_IEnumRegisterWordA() As UUID
'{08C03412-F96B-11d0-A475-00AA006BCC59}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H08C03412, CInt(&HF96B), CInt(&H11d0), &HA4, &H75, &H00, &HAA, &H00, &H6B, &HCC, &H59)
 IID_IEnumRegisterWordA = iid
End Function
Public Function IID_IEnumRegisterWordW() As UUID
'{4955DD31-B159-11d0-8FCF-00AA006BCC59}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4955DD31, CInt(&HB159), CInt(&H11d0), &H8F, &HCF, &H00, &HAA, &H00, &H6B, &HCC, &H59)
 IID_IEnumRegisterWordW = iid
End Function
Public Function IID_IEnumInputContext() As UUID
'{09B5EAB0-F997-11d1-93D4-0060B067B86E}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H09B5EAB0, CInt(&HF997), CInt(&H11d1), &H93, &HD4, &H00, &H60, &HB0, &H67, &HB8, &H6E)
 IID_IEnumInputContext = iid
End Function
Public Function IID_IActiveIMMRegistrar() As UUID
'{B3458082-BD00-11d1-939B-0060B067B86E}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HB3458082, CInt(&HBD00), CInt(&H11d1), &H93, &H9B, &H00, &H60, &HB0, &H67, &HB8, &H6E)
 IID_IActiveIMMRegistrar = iid
End Function
Public Function IID_IActiveIMMMessagePumpOwner() As UUID
'{B5CF2CFA-8AEB-11d1-9364-0060B067B86E}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HB5CF2CFA, CInt(&H8AEB), CInt(&H11d1), &H93, &H64, &H00, &H60, &HB0, &H67, &HB8, &H6E)
 IID_IActiveIMMMessagePumpOwner = iid
End Function
Public Function IID_IActiveIMMApp() As UUID
'{08C0E040-62D1-11d1-9326-0060B067B86E}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H08C0E040, CInt(&H62D1), CInt(&H11d1), &H93, &H26, &H00, &H60, &HB0, &H67, &HB8, &H6E)
 IID_IActiveIMMApp = iid
End Function
Public Function IID_IActiveIMMIME() As UUID
'{08C03411-F96B-11d0-A475-00AA006BCC59}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H08C03411, CInt(&HF96B), CInt(&H11d0), &HA4, &H75, &H00, &HAA, &H00, &H6B, &HCC, &H59)
 IID_IActiveIMMIME = iid
End Function
Public Function IID_IActiveIME() As UUID
'{6FE20962-D077-11d0-8FE7-00AA006BCC59}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6FE20962, CInt(&HD077), CInt(&H11d0), &H8F, &HE7, &H00, &HAA, &H00, &H6B, &HCC, &H59)
 IID_IActiveIME = iid
End Function
Public Function IID_IActiveIME2() As UUID
'{e1c4bf0e-2d53-11d2-93e1-0060b067b86e}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He1c4bf0e, CInt(&H2d53), CInt(&H11d2), &H93, &He1, &H00, &H60, &Hb0, &H67, &Hb8, &H6e)
 IID_IActiveIME2 = iid
End Function
Public Function CLSID_CActiveIMM() As UUID
'{4955DD33-B159-11d0-8FCF-00AA006BCC59}
Static iid As UUID
	If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4955DD33, CInt(&HB159), CInt(&H11d0), &H8F, &HCF, &H00, &HAA, &H00, &H6B, &HCC, &H59)
	CLSID_CActiveIMM = iid
End Function

End Module