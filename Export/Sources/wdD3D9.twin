'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

'Direct3D 9

#If WDL_NO_DIRECTX = 0 Then

[InterfaceId("81BDCBCA-64D4-426D-AE8D-AD0147F4275C")]
[OleAutomation(False)]
[Description("Applications use the methods of the IDirect3D9 interface to create Microsoft Direct3D objects and set up the environment. This interface includes methods for enumerating and retrieving capabilities of the device.")]
Interface IDirect3D9 Extends stdole.IUnknown
    [Description("Registers a pluggable software device. Software devices provide software rasterization enabling applications to access a variety of software rasterizers.")]
    Sub RegisterSoftwareDevice(ByRef InitializeFunction As Any)
    [PreserveSig]
    [Description("Returns the number of adapters on the system.")]
    Function GetAdapterCount() As Long
    [Description("Describes the physical display adapters present in the system when the IDirect3D9 interface was instantiated.")]
    Sub GetAdapterIdentifier(ByVal Adapter As Long, ByVal flags As Long, ByRef identifier As D3DADAPTER_IDENTIFIER9)
    [PreserveSig]
    [Description("Returns the number of display modes available on this adapter.")]
    Function GetAdapterModeCount(ByVal Adapter As Long, ByVal Format As D3DFORMAT) As Long
    [Description("Queries the device to determine whether the specified adapter supports the requested format and display mode. This method could be used in a loop to enumerate all the available adapter modes.")]
    Sub EnumAdapterModes(ByVal Adapter As Long, ByVal Format As D3DFORMAT, ByVal mode As Long, ByRef DisplayMode As D3DDISPLAYMODE)
    [Description("Retrieves the current display mode of the adapter.")]
    Sub GetAdapterDisplayMode(ByVal Adapter As Long, ByRef DisplayMode As D3DDISPLAYMODE)
    [Description("Verifies whether a hardware accelerated device type can be used on this adapter.")]
    Sub CheckDeviceType(ByVal Adapter As Long, ByVal DeviceType As D3DDEVTYPE, ByVal DisplayFormat As D3DFORMAT, ByVal BackBufferFormat As D3DFORMAT, ByVal bWindowed As Long)
    [Description("Determines whether a surface format is available as a specified resource type and can be used as a texture, depth-stencil buffer, or render target, or any combination of the three, on a device representing this adapter.")]
    Sub CheckDeviceFormat(ByVal Adapter As Long, ByVal DeviceType As D3DDEVTYPE, ByVal AdapterFormat As D3DFORMAT, ByVal Usage As Long, ByVal RType As D3DRESOURCETYPE, ByVal CheckFormat As D3DFORMAT)
    [Description("Determines if a multisampling technique is available on this device.")]
    Sub CheckDeviceMultiSampleType(ByVal Adapter As Long, ByVal DeviceType As D3DDEVTYPE, ByVal SurfaceFormat As D3DFORMAT, ByVal Windowed As Long, ByVal MultiSampleType As D3DMULTISAMPLE_TYPE, ByRef pQualityLevels As Long)
    [Description("Determines whether a depth-stencil format is compatible with a render-target format in a particular display mode.")]
    Sub CheckDepthStencilMatch(ByVal Adapter As Long, ByVal DeviceType As D3DDEVTYPE, ByVal AdapterFormat As D3DFORMAT, ByVal RenderTargetFormat As D3DFORMAT, ByVal DepthStencilFormat As D3DFORMAT)
    [Description("Tests the device to see if it supports conversion from one display format to another.")]
    Sub CheckDeviceFormatConversion(ByVal Adapter As Long, ByVal DeviceType As D3DDEVTYPE, ByVal SourceFormat As D3DFORMAT, ByVal TargetFormat As D3DFORMAT)
    [Description("Retrieves device-specific information about a device.")]
    Sub GetDeviceCaps(ByVal Adapter As Long, ByVal DeviceType As D3DDEVTYPE, ByRef pCaps As D3DCAPS9)
    [PreserveSig]
    [Description("Returns the handle of the monitor associated with the Direct3D object.")]
    Function GetAdapterMonitor(ByVal Adapter As Long) As Long
    [Description("Creates a device to represent the display adapter.")]
    Function CreateDevice(ByVal Adapter As Long, ByVal DeviceType As D3DDEVTYPE, ByVal hFocusWindow As LongPtr, ByVal BehaviorFlags As D3DCREATE, ByRef pPresentationParameters As D3DPRESENT_PARAMETERS) As IDirect3DDevice9
End Interface

[InterfaceId("D0223B96-BF7A-43FD-92BD-A43B0D82B9EB")]
[OleAutomation(False)]
[Description("Applications use the methods of the IDirect3DDevice9 interface to perform DrawPrimitive-based rendering, create resources, work with system-level variables, adjust gamma ramp levels, work with palettes, and create shaders.")]
Interface IDirect3DDevice9 Extends stdole.IUnknown
    [Description("Reports the current cooperative-level status of the Direct3D device for a windowed or full-screen application.")]
    Sub TestCooperativeLevel()
    [PreserveSig]
    [Description("Returns an estimate of the amount of available texture memory.")]
    Function GetAvailableTextureMem() As Long
    [Description("Evicts all managed resources, including both Direct3D and driver-managed resources.")]
    Sub EvictManagedResources()
    [Description("Returns an interface to the instance of the Direct3D object that created the device.")]
    Function GetDirect3D() As IDirect3D9
    [Description("Retrieves the capabilities of the rendering device.")]
    Sub GetDeviceCaps(ByRef pCaps As D3DCAPS9)
    [Description("Retrieves the display mode's spatial resolution, color resolution, and refresh frequency.")]
    Sub GetDisplayMode(ByVal iSwapChain As Long, ByRef pMode As D3DDISPLAYMODE)
    [Description("Retrieves the creation parameters of the device.")]
    Sub GetCreationParameters(ByRef pParameters As D3DDEVICE_CREATION_PARAMETERS)
    [Description("Sets properties for the cursor.")]
    Sub SetCursorProperties(ByVal XHotSpot As Long, ByVal YHotSpot As Long, ByVal pCursorBitmap As IDirect3DSurface9)
    [PreserveSig]
    [Description("Sets the cursor position and update options.")]
    Sub SetCursorPosition(ByVal x As Long, ByVal y As Long, ByVal flags As D3D9SetCursorPosFlags)
    [PreserveSig]
    [Description("Displays or hides the cursor.")]
    Function ShowCursor(ByVal bShow As BOOL) As BOOL
    [Description("Creates an additional swap chain for rendering multiple views.")]
    Function CreateAdditionalSwapChain(ByRef pPresentationParameters As D3DPRESENT_PARAMETERS) As IDirect3DSwapChain9
    [Description("Gets a pointer to a swap chain.")]
    Sub GetSwapChain(ByVal iSwapChain As Long, ByRef ppSwapChain As IDirect3DSwapChain9)
    [PreserveSig]
    [Description("Gets the number of implicit swap chains.")]
    Function GetNumberOfSwapChains() As Long
    [Description("Resets the type, size, and format of the swap chain.")]
    Sub Reset(ByRef pPresentationParameters As D3DPRESENT_PARAMETERS)
    [Description("Presents the contents of the next buffer in the sequence of back buffers owned by the device.")]
    Sub Present(ByRef pSourceRect As Any, ByRef pDestRect As Any, ByVal hDestWindowOverride As LongPtr, ByRef pDirtyRegion As Any)
    [Description("Retrieves a back buffer from the device's swap chain.")]
    Function GetBackBuffer(ByVal iSwapChain As Long, ByVal BackBuffer As Long, ByVal type As D3DBACKBUFFER_TYPE) As IDirect3DSurface9
    [Description("Returns information describing the raster of the monitor on which the swap chain is presented.")]
    Sub GetRasterStatus(ByVal iSwapChain As Long, ByRef pRasterStatus As D3DRASTER_STATUS)
    [Description("This method allows the use of GDI dialog boxes in full-screen mode applications.")]
    Sub SetDialogBoxMode(ByVal bEnableDialogs As Long)
    [PreserveSig]
    [Description("Sets the gamma correction ramp for the implicit swap chain. This method will affect the entire screen (not just the active window if you are running in windowed mode).")]
    Sub SetGammaRamp(ByVal iSwapChain As Long, ByVal flags As D3D9SetGammaRampFlags, ByRef pRamp As D3DGAMMARAMP)
    [PreserveSig]
    [Description("Retrieves the gamma correction ramp for the swap chain.")]
    Sub GetGammaRamp(ByVal iSwapChain As Long, ByRef pRamp As D3DGAMMARAMP)
    [Description("Creates a texture resource.")]
    Sub CreateTexture(ByVal width As Long, ByVal Height As Long, ByVal Levels As Long, ByVal Usage As D3DUSAGE, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByRef ppTexture As IDirect3DTexture9, Optional ByVal pSharedHandle As LongPtr = 0)
    [Description("Creates a volume texture resource.")]
    Sub CreateVolumeTexture(ByVal width As Long, ByVal Height As Long, ByVal Depth As Long, ByVal Levels As Long, ByVal Usage As D3DUSAGE, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByRef ppVolumeTexture As IDirect3DVolumeTexture9, Optional ByVal pSharedHandle As LongPtr = 0)
    [Description("Creates a cube texture resource.")]
    Sub CreateCubeTexture(ByVal EdgeLength As Long, ByVal Levels As Long, ByVal Usage As D3DUSAGE, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByRef ppCubeTexture As IDirect3DCubeTexture9, Optional ByVal pSharedHandle As LongPtr = 0)
    [Description("Creates a vertex buffer.")]
    Sub CreateVertexBuffer(ByVal Length As Long, ByVal Usage As D3DUSAGE, ByVal FVF As D3DFVF, ByVal Pool As D3DPOOL, ByRef ppVertexBuffer As IDirect3DVertexBuffer9, Optional ByVal pSharedHandle As LongPtr = 0)
    [Description("Creates an index buffer.")]
    Sub CreateIndexBuffer(ByVal Length As Long, ByVal Usage As D3DUSAGE, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByRef ppIndexBuffer As IDirect3DIndexBuffer9, Optional ByVal pSharedHandle As LongPtr = 0)
    [Description("Creates a render-target surface.")]
    Sub CreateRenderTarget(ByVal width As Long, ByVal Height As Long, ByVal Format As D3DFORMAT, ByVal MultiSample As D3DMULTISAMPLE_TYPE, ByVal MultiSampleQuality As Long, ByVal Lockable As Long, ByRef ppSurface As IDirect3DSurface9, Optional ByVal pSharedHandle As LongPtr = 0)
    [Description("Creates a depth-stencil resource.")]
    Sub CreateDepthStencilSurface(ByVal width As Long, ByVal Height As Long, ByVal Format As D3DFORMAT, ByVal MultiSample As D3DMULTISAMPLE_TYPE, ByVal MultiSampleQuality As Long, ByVal Discard As Long, ByRef ppSurface As IDirect3DSurface9, Optional ByVal pSharedHandle As LongPtr = 0)
    [Description("Copies rectangular subsets of pixels from one surface to another.")]
    Sub UpdateSurface(ByVal pSourceSurface As IDirect3DSurface9, ByRef pSourceRect As Any, ByVal pDestinationSurface As IDirect3DSurface9, ByRef pDestinationPoint As Any)
    [Description("Updates the dirty portions of a texture.")]
    Sub UpdateTexture(ByVal pSourceTexture As IDirect3DBaseTexture9, ByVal pDestinationTexture As IDirect3DBaseTexture9)
    [Description("Copies the render-target data from device memory to system memory.")]
    Sub GetRenderTargetData(ByVal pRenderTarget As IDirect3DSurface9, ByVal pDestSurface As IDirect3DSurface9)
    [Description("Generates a copy of the device's front buffer and places that copy in a system memory buffer provided by the application.")]
    Sub GetFrontBufferData(ByVal iSwapChain As Long, ByVal pDestSurface As IDirect3DSurface9)
    [Description("Copy the contents of the source rectangle to the destination rectangle. The source rectangle can be stretched and filtered by the copy. This function is often used to change the aspect ratio of a video stream.")]
    Sub StretchRect(ByVal pSourceSurface As IDirect3DSurface9, ByRef pSourceRect As Any, ByVal pDestSurface As IDirect3DSurface9, ByRef pDestRect As Any, ByVal Filter As D3DTEXTUREFILTERTYPE)
    [Description("Allows an application to fill a rectangular area of a D3DPOOL_DEFAULT surface with a specified color.")]
    Sub ColorFill(ByVal pSurface As IDirect3DSurface9, ByRef pRect As Any, ByVal color As Long)
    [Description("Create an off-screen surface.")]
    Sub CreateOffscreenPlainSurface(ByVal width As Long, ByVal Height As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByRef ppSurface As IDirect3DSurface9, Optional ByVal pSharedHandle As Long = 0)
    [Description("Sets a new color buffer for the device.")]
    Sub SetRenderTarget(ByVal RenderTargetIndex As Long, ByVal pRenderTarget As IDirect3DSurface9)
    [Description("Retrieves a render-target surface.")]
    Function GetRenderTarget(ByVal RenderTargetIndex As Long) As IDirect3DSurface9
    [Description("Sets the depth stencil surface.")]
    Sub SetDepthStencilSurface(ByVal pNewZStencil As IDirect3DSurface9)
    [Description("Gets the depth-stencil surface owned by the Direct3DDevice object.")]
    Function GetDepthStencilSurface() As IDirect3DSurface9
    [Description("Begins a scene.")]
    Sub BeginScene()
    [Description("Ends a scene that was begun by calling IDirect3DDevice9.BeginScene.")]
    Sub EndScene()
    [Description("Clears one or more surfaces such as a render target, multiple render targets, a stencil buffer, and a depth buffer.")]
    Sub Clear(ByVal Count As Long, ByRef pRects As Any, ByVal flags As D3DCLEAR, ByVal color As Long, ByVal Z As Single, ByVal Stencil As Long)
    [Description("Sets a single device transformation-related state.")]
    Sub SetTransform(ByVal State As D3DTRANSFORMSTATETYPE, ByRef pMatrix As D3DMATRIX)
    [Description("Retrieves a matrix describing a transformation state.")]
    Sub GetTransform(ByVal State As D3DTRANSFORMSTATETYPE, ByRef pMatrix As D3DMATRIX)
    [Description("Multiplies a device's world, view, or projection matrices by a specified matrix.")]
    Sub MultiplyTransform(ByVal State As D3DTRANSFORMSTATETYPE, ByRef pMatrix As D3DMATRIX)
    [Description("Sets the viewport parameters for the device.")]
    Sub SetViewport(ByRef pViewport As D3DVIEWPORT9)
    [Description("Retrieves the viewport parameters currently set for the device.")]
    Sub GetViewport(ByRef pViewport As D3DVIEWPORT9)
    [Description("Sets the material properties for the device.")]
    Sub SetMaterial(ByRef pMaterial As D3DMATERIAL9)
    [Description("Retrieves the current material properties for the device.")]
    Sub GetMaterial(ByRef pMaterial As D3DMATERIAL9)
    [Description("Assigns a set of lighting properties for this device.")]
    Sub SetLight(ByVal index As Long, ByRef pLight As D3DLIGHT9)
    [Description("Retrieves a set of lighting properties that this device uses.")]
    Sub GetLight(ByVal index As Long, ByRef pLight As D3DLIGHT9)
    [Description("Enables or disables a set of lighting parameters within a device.")]
    Sub LightEnable(ByVal LightIndex As Long, ByVal bEnable As Long)
    [Description("Retrieves the activity status - enabled or disabled - for a set of lighting parameters within a device.")]
    Function GetLightEnable(ByVal index As Long) As Long
    [Description("Sets the coefficients of a user-defined clipping plane for the device.")]
    Sub SetClipPlane(ByVal index As Long, ByRef pPlane As Single)
    [Description("Retrieves the coefficients of a user-defined clipping plane for the device.")]
    Function GetClipPlane(ByVal index As Long) As Single
    [Description("Sets a single device render-state parameter.")]
    Sub SetRenderState(ByVal State As D3DRENDERSTATETYPE, ByVal Value As Long)
    [Description("Retrieves a render-state value for a device.")]
    Function GetRenderState(ByVal State As D3DRENDERSTATETYPE) As Long
    [Description("Creates a new state block that contains the values for all device states, vertex-related states, or pixel-related states.")]
    Function CreateStateBlock(ByVal type As D3DSTATEBLOCKTYPE) As IDirect3DStateBlock9
    [Description("Signals Direct3D to begin recording a device-state block.")]
    Sub BeginStateBlock()
    [Description("Signals Direct3D to stop recording a device-state block and retrieve a pointer to the state block interface.")]
    Function EndStateBlock() As IDirect3DStateBlock9
    [Description("Sets the clip status.")]
    Sub SetClipStatus(ByRef pClipStatus As D3DCLIPSTATUS9)
    [Description("Retrieves the clip status.")]
    Sub GetClipStatus(ByRef pClipStatus As D3DCLIPSTATUS9)
    [Description("Retrieves a texture assigned to a stage for a device.")]
    Function GetTexture(ByVal stage As Long) As IDirect3DBaseTexture9
    [Description("Assigns a texture to a stage for a device.")]
    Sub SetTexture(ByVal Sampler As Long, ByVal pTexture As IDirect3DBaseTexture9)
    [Description("Retrieves a state value for an assigned texture.")]
    Function GetTextureStageState(ByVal stage As Long, ByVal type As D3DTEXTURESTAGESTATETYPE) As Long
    [Description("Sets the state value for the currently assigned texture.")]
    Sub SetTextureStageState(ByVal stage As Long, ByVal type As D3DTEXTURESTAGESTATETYPE, ByVal Value As Long)
    [Description("Gets the sampler state value.")]
    Sub GetSamplerState(ByVal Sampler As Long, ByVal type As D3DSAMPLERSTATETYPE, ByRef pValue As Long)
    [Description("Sets the sampler state value.")]
    Sub SetSamplerState(ByVal Sampler As Long, ByVal type As D3DSAMPLERSTATETYPE, ByVal Value As Long)
    [Description("Reports the device's ability to render the current texture-blending operations and arguments in a single pass.")]
    Function ValidateDevice() As Long
    [Description("Sets palette entries.")]
    Sub SetPaletteEntries(ByVal PaletteNumber As Long, ByRef pEntries As PALETTEENTRY)
    [Description("Retrieves palette entries.")]
    Sub GetPaletteEntries(ByVal PaletteNumber As Long, ByRef pEntries As PALETTEENTRY)
    [Description("Sets the current texture palette.")]
    Sub SetCurrentTexturePalette(ByVal PaletteNumber As Long)
    [Description("Retrieves the current texture palette.")]
    Function GetCurrentTexturePalette() As Long
    [Description("Sets the scissor rectangle.")]
    Sub SetScissorRect(ByRef pRect As Any)
    [Description("Gets the scissor rectangle.")]
    Sub GetScissorRect(ByRef pRect As RECT)
    [Description("Use this method to switch between software and hardware vertex processing.")]
    Sub SetSoftwareVertexProcessing(ByVal bSoftware As BOOL)
    [PreserveSig]
    [Description("Gets the vertex processing (hardware or software) mode.")]
    Function GetSoftwareVertexProcessing() As BOOL
    [Description("Enable or disable N-patches.")]
    Sub SetNPatchMode(ByVal nSegments As Single)
    [PreserveSig]
    [Description("Gets the N-patch mode segments.")]
    Function GetNPatchMode() As Single
    [Description("Renders a sequence of nonindexed, geometric primitives of the specified type from the current set of data input streams.")]
    Sub DrawPrimitive(ByVal PrimitiveType As D3DPRIMITIVETYPE, ByVal startVertex As Long, ByVal PrimitiveCount As Long)
    [Description("Based on indexing, renders the specified geometric primitive into an array of vertices.")]
    Sub DrawIndexedPrimitive(ByVal type As D3DPRIMITIVETYPE, ByVal BaseVertexIndex As Long, ByVal MinIndex As Long, ByVal NumVertices As Long, ByVal StartIndex As Long, ByVal PrimitiveCount As Long)
    [Description("Renders data specified by a user memory pointer as a sequence of geometric primitives of the specified type.")]
    Sub DrawPrimitiveUP(ByVal PrimitiveType As D3DPRIMITIVETYPE, ByVal PrimitiveCount As Long, ByRef pVertexStreamZeroData As Any, ByVal VertexStreamZeroStride As Long)
    [Description("Renders the specified geometric primitive with data specified by a user memory pointer.")]
    Sub DrawIndexedPrimitiveUP(ByVal PrimitiveType As D3DPRIMITIVETYPE, ByVal MinVertexIndex As Long, ByVal NumVertices As Long, ByVal PrimitiveCount As Long, ByRef pIndexData As Any, ByVal IndexDataFormat As D3DFORMAT, ByRef pVertexStreamZeroData As Any, ByVal VertexStreamZeroStride As Long)
    [Description("Applies the vertex processing defined by the vertex shader to the set of input data streams, generating a single stream of interleaved vertex data to the destination vertex buffer.")]
    Sub ProcessVertices(ByVal SrcStartIndex As Long, ByVal DestIndex As Long, ByVal vertexCount As Long, ByVal pDestBuffer As IDirect3DVertexBuffer9, ByVal pVertexDecl As IDirect3DVertexDeclaration9, ByVal flags As Long)
    [Description("Create a vertex shader declaration from the device and the vertex elements.")]
    Function CreateVertexDeclaration(ByRef pVertexElements As D3DVERTEXELEMENT9) As IDirect3DVertexDeclaration9
    [Description("Sets a Vertex Declaration.")]
    Sub SetVertexDeclaration(ByVal pDecl As IDirect3DVertexDeclaration9)
    [Description("Gets a vertex shader declaration.")]
    Function GetVertexDeclaration() As IDirect3DVertexDeclaration9
    [Description("Sets the current vertex stream declaration.")]
    Sub SetFVF(ByVal FVF As D3DFVF)
    [Description("Gets the fixed vertex function declaration.")]
    Function GetFVF() As D3DFVF
    [Description("Creates a vertex shader.")]
    Function CreateVertexShader(ByRef pFunction As Any) As IDirect3DVertexShader9
    [Description("Sets the vertex shader.")]
    Sub SetVertexShader(ByVal pShader As IDirect3DVertexShader9)
    [Description("Retrieves the currently set vertex shader.")]
    Function GetVertexShader() As IDirect3DVertexShader9
    [Description("Sets a floating-point vertex shader constant.")]
    Sub SetVertexShaderConstantF(ByVal StartRegister As Long, ByRef pConstantData As Any, ByVal Vector4fCount As Long)
    [Description("Gets a floating-point vertex shader constant.")]
    Sub GetVertexShaderConstantF(ByVal StartRegister As Long, ByRef pConstantData As Single, ByVal Vector4fCount As Long)
    [Description("Sets an integer vertex shader constant.")]
    Sub SetVertexShaderConstantI(ByVal StartRegister As Long, ByRef pConstantData As Any, ByVal Vector4fCount As Long)
    [Description("Gets an integer vertex shader constant.")]
    Sub GetVertexShaderConstantI(ByVal StartRegister As Long, ByRef pConstantData As Long, ByVal Vector4fCount As Long)
    [Description("Sets a boolean vertex shader constant.")]
    Sub SetVertexShaderConstantB(ByVal StartRegister As Long, ByRef pConstantData As Any, ByVal Vector4fCount As Long)
    [Description("Gets a boolean vertex shader constant.")]
    Sub GetVertexShaderConstantB(ByVal StartRegister As Long, ByRef pConstantData As Long, ByVal Vector4fCount As Long)
    [Description("Binds a vertex buffer to a device data stream.")]
    Sub SetStreamSource(ByVal StreamNumber As Long, ByVal pStreamData As IDirect3DVertexBuffer9, ByVal OffsetInBytes As Long, ByVal stride As Long)
    [Description("Retrieves a vertex buffer bound to the specified data stream.")]
    Sub GetStreamSource(ByVal StreamNumber As Long, ByRef ppStreamData As IDirect3DVertexBuffer9, ByRef pOffsetInBytes As Long, ByRef pStride As Long)
    [Description("Sets the stream source frequency divider value. This may be used to draw several instances of geometry.")]
    Sub SetStreamSourceFreq(ByVal StreamNumber As Long, ByVal FrequencyParameter As Long)
    [Description("Gets the stream source frequency divider value.")]
    Function GetStreamSourceFreq(ByVal StreamNumber As Long) As Long
    [Description("Sets index data.")]
    Sub SetIndices(ByVal pIndexData As IDirect3DIndexBuffer9)
    [Description("Retrieves index data.")]
    Sub GetIndices(ByRef ppIndexData As IDirect3DIndexBuffer9, ByRef pBaseVertexIndex As Long)
    [Description("Creates a pixel shader.")]
    Function CreatePixelShader(ByRef pFunction As Any) As IDirect3DPixelShader9
    [Description("Sets the pixel shader.")]
    Sub SetPixelShader(ByVal pShader As IDirect3DPixelShader9)
    [Description("Retrieves the currently set pixel shader.")]
    Function GetPixelShader() As IDirect3DPixelShader9
    [Description("Sets a floating-point pixel shader constant.")]
    Sub SetPixelShaderConstantF(ByVal StartRegister As Long, ByRef pConstantData As Any, ByVal Vector4fCount As Long)
    [Description("Gets a floating-point pixel shader constant.")]
    Sub GetPixelShaderConstantF(ByVal StartRegister As Long, ByRef pConstantData As Single, ByVal Vector4fCount As Long)
    [Description("Sets an integer pixel shader constant.")]
    Sub SetPixelShaderConstantI(ByVal StartRegister As Long, ByRef pConstantData As Any, ByVal Vector4fCount As Long)
    [Description("Gets an integer pixel shader constant.")]
    Sub GetPixelShaderConstantI(ByVal StartRegister As Long, ByRef pConstantData As Long, ByVal Vector4fCount As Long)
    [Description("Sets a boolean pixel shader constant.")]
    Sub SetPixelShaderConstantB(ByVal StartRegister As Long, ByRef pConstantData As Any, ByVal Vector4fCount As Long)
    [Description("Gets a boolean pixel shader constant.")]
    Sub GetPixelShaderConstantB(ByVal StartRegister As Long, ByRef pConstantData As Long, ByVal Vector4fCount As Long)
    [Description("Draws a rectangular patch using the currently set streams.")]
    Sub DrawRectPatch(ByVal handle As Long, ByRef pNumSegs As Single, ByRef pRectPatchInfo As D3DRECTPATCH_INFO)
    [Description("Draws a triangular patch using the currently set streams.")]
    Sub DrawTriPatch(ByVal handle As Long, ByRef pNumSegs As Single, ByRef pTriPatchInfo As D3DTRIPATCH_INFO)
    [Description("Frees a cached high-order patch.")]
    Sub DeletePatch(ByVal handle As Long)
    [Description("Creates a status query.")]
    Function CreateQuery(ByVal type As D3DQUERYTYPE) As IDirect3DQuery9
End Interface

[InterfaceId("0CFBAF3A-9FF6-429A-99B3-A2796AF8B89B")]
[OleAutomation(False)]
[Description("Applications use the methods of the IDirect3DSurface9 interface to query and prepare surfaces.")]
Interface IDirect3DSurface9 Extends IDirect3DResource9
    [Description("Provides access to the parent cube texture or texture (mipmap) object, if this surface is a child level of a cube texture or a mipmap. This method can also provide access to the parent swap chain if the surface is a back-buffer child.")]
    Sub GetContainer(ByRef riid As UUID, ByRef ppContainer As Any)
    [Description("Retrieves a description of the surface.")]
    Sub GetDesc(ByRef pDesc As D3DSURFACE_DESC)
    [Description("Locks a rectangle on a surface.")]
    Sub LockRect(ByRef pLockedRect As D3DLOCKED_RECT, ByRef pRect As Any, ByVal flags As D3DLOCK)
    [Description("Unlocks a rectangle on a surface.")]
    Sub UnlockRect()
    [Description("Retrieves a device context.")]
    Function GetDC() As LongPtr
    [Description("Release a device context handle.")]
    Sub ReleaseDC(ByVal hDC As LongPtr)
End Interface

[InterfaceId("05EEC05D-8F7D-4362-B999-D1BAF357C704")]
[OleAutomation(False)]
[Description("Applications use the methods of the IDirect3DResource9 interface to query and prepare resources.")]
Interface IDirect3DResource9 Extends stdole.IUnknown
    [Description("Retrieves the device associated with a resource.")]
    Function GetDevice() As IDirect3DDevice9
    [Description("Associates data with the resource that is intended for use by the application, not by Direct3D. Data is passed by value, and multiple sets of data can be associated with a single resource.")]
    Sub SetPrivateData(ByRef refguid As UUID, ByRef data As Any, ByVal SizeOfData As Long, ByVal flags As D3DSPD)
    [Description("Copies the private data associated with the resource to a provided buffer.")]
    Sub GetPrivateData(ByRef refguid As UUID, ByRef data As Any, ByRef SizeOfData As Long)
    [Description("Frees the specified private data associated with this resource.")]
    Sub FreePrivateData(ByRef refguid As UUID)
    [PreserveSig]
    [Description("Assigns the priority of a resource for scheduling purposes.")]
    Function SetPriority(ByVal PriorityNew As D3D9_RESOURCE_PRIORITY) As Long
    [PreserveSig]
    [Description("Retrieves the priority for this resource.")]
    Function GetPriority() As D3D9_RESOURCE_PRIORITY
    [PreserveSig]
    [Description("Preloads a managed resource.")]
    Sub Preload()
    [PreserveSig]
    [Description("Returns the type of the resource.")]
    Function GetType() As D3DRESOURCETYPE
End Interface

[InterfaceId("794950F2-ADFC-458A-905E-10A10B0B503B")]
[OleAutomation(False)]
[Description("Applications use the methods of the IDirect3DSwapChain9 interface to manipulate a swap chain.")]
Interface IDirect3DSwapChain9 Extends stdole.IUnknown
    [Description("Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.")]
    Sub Present(ByRef pSourceRect As Any, ByRef pDestRect As Any, ByVal hDestWindowOverride As LongPtr, ByRef pDirtyRegion As Any, ByVal dwFlags As Long)
    [Description("Generates a copy of the swapchain's front buffer and places that copy in a system memory buffer provided by the application.")]
    Sub GetFrontBufferData(ByVal pDestSurface As IDirect3DSurface9)
    [Description("Retrieves a back buffer from the swap chain of the device.")]
    Function GetBackBuffer(ByVal BackBuffer As Long, ByVal type As D3DBACKBUFFER_TYPE) As IDirect3DSurface9
    [Description("Returns information describing the raster of the monitor on which the swap chain is presented.")]
    Sub GetRasterStatus(ByRef pRasterStatus As D3DRASTER_STATUS)
    [Description("Retrieves the display mode's spatial resolution, color resolution, and refresh frequency.")]
    Sub GetDisplayMode(ByRef pMode As D3DDISPLAYMODE)
    [Description("Retrieves the device associated with the swap chain.")]
    Function GetDevice() As IDirect3DDevice9
    [Description("Retrieves the presentation parameters associated with a swap chain.")]
    Function GetPresentParameters() As D3DPRESENT_PARAMETERS
End Interface

    
[InterfaceId("85C31227-3DE5-4F00-9B3A-F11AC38C18B5")]
[OleAutomation(False)]
[Description("Applications use the methods of the IDirect3DTexture9 interface to manipulate a texture resource.")]
Interface IDirect3DTexture9 Extends IDirect3DBaseTexture9
    [Description("Retrieves a level description of a texture resource.")]
    Sub GetLevelDesc(ByVal Level As Long, ByRef pDesc As D3DSURFACE_DESC)
    [Description("Retrieves the specified texture surface level.")]
    Function GetSurfaceLevel(ByVal Level As Long) As IDirect3DSurface9
    [Description("Locks a rectangle on a texture resource.")]
    Sub LockRect(ByVal Level As Long, ByRef pLockedRect As D3DLOCKED_RECT, ByRef pRect As Any, ByVal flags As D3DLOCK)
    [Description("Unlocks a rectangle on a texture resource.")]
    Sub UnlockRect(ByVal Level As Long)
    [Description("Adds a dirty region to a texture resource.")]
    Sub AddDirtyRect(ByRef pDirtyRect As Any)
End Interface

[InterfaceId("580CA87E-1D3C-4D54-991D-B7D3E3C298CE")]
[OleAutomation(False)]
[Description("Applications use the methods of the IDirect3DBaseTexture9 interface to manipulate texture resources including cube and volume textures.")]
Interface IDirect3DBaseTexture9 Extends IDirect3DResource9
    [PreserveSig]
    [Description("Sets the most detailed level-of-detail for a managed texture.")]
    Function SetLOD(ByVal LODNew As Long) As Long
    [PreserveSig]
    [Description("Returns a value clamped to the maximum level-of-detail set for a managed texture (this method is not supported for an unmanaged texture).")]
    Function GetLOD() As Long
    [PreserveSig]
    [Description("Returns the number of texture levels in a multilevel texture.")]
    Function GetLevelCount() As Long
    [Description("Set the filter type that is used for automatically generated mipmap sublevels.")]
    Sub SetAutoGenFilterType(ByVal FilterType As D3DTEXTUREFILTERTYPE)
    [PreserveSig]
    [Description("Get the filter type that is used for automatically generated mipmap sublevels.")]
    Function GetAutoGenFilterType() As D3DTEXTUREFILTERTYPE
    [PreserveSig]
    [Description("Generate mipmap sublevels.")]
    Sub GenerateMipSubLevels()
End Interface

[InterfaceId("2518526C-E789-4111-A7B9-47EF328D13E6")]
[OleAutomation(False)]
[Description("Applications use the methods of the IDirect3DVolumeTexture9 interface to manipulate a volume texture resource.")]
Interface IDirect3DVolumeTexture9 Extends IDirect3DBaseTexture9
    [Description("Retrieves a level description of a volume texture resource.")]
    Sub GetLevelDesc(ByVal Level As Long, ByRef pDesc As D3DVOLUME_DESC)
    [Description("Retrieves the specified volume texture level.")]
    Function GetVolumeLevel(ByVal Level As Long) As IDirect3DVolume9
    [Description("Locks a box on a volume texture resource.")]
    Sub LockBox(ByVal Level As Long, ByRef pLockedVolume As D3DLOCKED_BOX, ByRef pBox As Any, ByVal flags As D3DLOCK)
    [Description("Unlocks a box on a volume texture resource.")]
    Sub UnlockBox(ByVal Level As Long)
    [Description("Adds a dirty region to a volume texture resource.")]
    Sub AddDirtyBox(ByRef pDirtyBox As Any)
End Interface

[InterfaceId("24F416E6-1F67-4AA7-B88E-D33F6F3128A1")]
[OleAutomation(False)]
[Description("Applications use the methods of the IDirect3DVolume9 interface to manipulate volume resources.")]
Interface IDirect3DVolume9 Extends stdole.IUnknown
    [Description("Retrieves the device associated with a volume.")]
    Function GetDevice() As IDirect3DDevice9
    [Description("Associates data with the volume that is intended for use by the application, not by Direct3D.")]
    Sub SetPrivateData(refguid As UUID, ByRef pData As Any, ByVal SizeOfData As Long, ByVal flags As D3DSPD)
    [Description("Copies the private data associated with the volume to a provided buffer.")]
    Sub GetPrivateData(refguid As UUID, ByRef pData As Any, ByRef pSizeOfData As Long)
    [Description("Frees the specified private data associated with this volume.")]
    Sub FreePrivateData(refguid As UUID)
    [Description("Provides access to the parent volume texture object, if this surface is a child level of a volume texture.")]
    Function GetContainer(riid As UUID) As LongPtr
    [Description("Retrieves a description of the volume.")]
    Sub GetDesc(ByRef pDesc As D3DVOLUME_DESC)
    [Description("Locks a box on a volume resource.")]
    Sub LockBox(ByRef pLockedVolume As D3DLOCKED_BOX, ByRef pBox As Any, ByVal flags As D3DLOCK)
    [Description("Unlocks a box on a volume resource.")]
    Sub UnlockBox()
End Interface

[InterfaceId("FFF32F81-D953-473A-9223-93D652ABA93F")]
[OleAutomation(False)]
[Description("Applications use the methods of the IDirect3DCubeTexture9 interface to manipulate a cube texture resource.")]
Interface IDirect3DCubeTexture9 Extends IDirect3DBaseTexture9
    [Description("Retrieves a description of one face of the specified cube texture level.")]
    Sub GetLevelDesc(ByVal Level As Long, ByRef pDesc As D3DSURFACE_DESC)
    [Description("Retrieves a cube texture map surface.")]
    Sub GetCubeMapSurface(ByVal FaceType As D3DCUBEMAP_FACES, ByVal Level As Long, ByRef ppCubeMapSurface As IDirect3DSurface9)
    [Description("Locks a rectangle on a cube texture resource.")]
    Sub LockRect(ByVal FaceType As D3DCUBEMAP_FACES, ByVal Level As Long, ByRef pLockedRect As D3DLOCKED_RECT, ByRef pRect As Any, ByVal flags As D3DLOCK)
    [Description("Unlocks a rectangle on a cube texture resource.")]
    Sub UnlockRect(ByVal FaceType As D3DCUBEMAP_FACES, ByVal Level As Long)
    [Description("Adds a dirty region to a cube texture resource.")]
    Sub AddDirtyRect(ByVal FaceType As D3DCUBEMAP_FACES, ByRef pDirtyRect As Any)
End Interface

[InterfaceId("B64BB1B5-FD70-4DF6-BF91-19D0A12455E3")]
[OleAutomation(False)]
[Description("Applications use the methods of the IDirect3DVertexBuffer9 interface to manipulate vertex buffer resources.")]
Interface IDirect3DVertexBuffer9 Extends IDirect3DResource9
    [Description("Locks a range of vertex data and obtains a pointer to the vertex buffer memory.")]
    Sub Lock(ByVal OffsetToLock As Long, ByVal SizeToLock As Long, ByRef ppbData As Any, ByVal flags As D3DLOCK)
    [Description("Unlocks vertex data.")]
    Sub Unlock()
    [Description("Retrieves a description of the vertex buffer resource.")]
    Sub GetDesc(ByRef pDesc As D3DVERTEXBUFFER_DESC)
End Interface

[InterfaceId("7C9DD65E-D3F7-4529-ACEE-785830ACDE35")]
[OleAutomation(False)]
[Description("Applications use the methods of the IDirect3DIndexBuffer9 interface to manipulate an index buffer resource.")]
Interface IDirect3DIndexBuffer9 Extends IDirect3DResource9
    [Description("Locks a range of index data and obtains a pointer to the index buffer memory.")]
    Sub Lock(ByVal OffsetToLock As Long, ByVal SizeToLock As Long, ByRef ppbData As Any, ByVal flags As D3DLOCK)
    [Description("Unlocks index data.")]
    Sub Unlock()
    [Description("Retrieves a description of the index buffer resource.")]
    Sub GetDesc(ByRef pDesc As D3DINDEXBUFFER_DESC)
End Interface

[InterfaceId("B07C4FE5-310D-4BA8-A23C-4F0F206F218B")]
[OleAutomation(False)]
[Description("Applications use the methods of the IDirect3DStateBlock9 interface to encapsulate render states.")]
Interface IDirect3DStateBlock9 Extends stdole.IUnknown
    [Description("Gets the device.")]
    Function GetDevice() As IDirect3DDevice9
    [Description("Capture the current value of states that are included in a stateblock.")]
    Sub Capture()
    [Description("Apply the state block to the current device state.")]
    Sub Apply()
End Interface

[InterfaceId("DD13C59C-36FA-4098-A8FB-C7ED39DC8546")]
[OleAutomation(False)]
[Description("Applications use the methods of the IDirect3DVertexDeclaration9 interface to encapsulate the vertex shader declaration.")]
Interface IDirect3DVertexDeclaration9 Extends stdole.IUnknown
    [Description("Gets the current device.")]
    Function GetDevice() As IDirect3DDevice9
    [Description("Gets the vertex shader declaration.")]
    Sub GetDeclaration(ByRef pDecl As D3DVERTEXELEMENT9, ByRef pNumElements As Long)
End Interface

[InterfaceId("EFC5557E-6265-4613-8A94-43857889EB36")]
[OleAutomation(False)]
[Description("Applications use the methods of the IDirect3DVertexShader9 interface to encapsulate the functionality of a vertex shader.")]
Interface IDirect3DVertexShader9 Extends stdole.IUnknown
    [Description("Gets the device.")]
    Function GetDevice() As IDirect3DDevice9
    [Description("Gets a pointer to the shader data.")]
    Sub getFunction(ByRef pData As Any, ByRef pSizeOfData As Long)
End Interface

[InterfaceId("6D3BDBDC-5B02-4415-B852-CE5E8BCCB289")]
[OleAutomation(False)]
[Description("Applications use the methods of the IDirect3DPixelShader9 interface to encapsulate the functionality of a pixel shader.")]
Interface IDirect3DPixelShader9 Extends stdole.IUnknown
    [Description("Gets the device.")]
    Function GetDevice() As IDirect3DDevice9
    [Description("Gets a pointer to the shader data.")]
    Sub getFunction(ByRef pData As Any, ByRef pSizeOfData As Long)
End Interface

[InterfaceId("D9771460-A695-4F26-BBD3-27B840B541CC")]
[OleAutomation(False)]
[Description("Applications use the methods of the IDirect3DQuery9 interface to perform asynchronous queries on a driver.")]
Interface IDirect3DQuery9 Extends stdole.IUnknown
    [Description("Gets the device that is being queried.")]
    Function GetDevice() As IDirect3DDevice9
    [PreserveSig]
    [Description("Gets the query type.")]
    Function GetType() As D3DQUERYTYPE
    [PreserveSig]
    [Description("Gets the number of bytes in the query data.")]
    Function GetDataSize() As Long
    [Description("Issue a query.")]
    Sub Issue(ByVal dwIssueFlags As D3DISSUE)
    [Description("Polls a queried resource to get the query state or a query result.")]
    Sub GetData(ByRef pData As Any, ByVal dwSize As Long, ByVal dwGetDataFlags As Long)
End Interface

[InterfaceId("02177241-69FC-400C-8FF1-93A44DF6861D")]
[OleAutomation(False)]
Interface IDirect3D9Ex Extends stdole.IUnknown
    [Description("Registers a pluggable software device. Software devices provide software rasterization enabling applications to access a variety of software rasterizers.")]
    Sub RegisterSoftwareDevice(ByVal InitializeFunction As LongPtr)
    [PreserveSig]
    [Description("Returns the number of adapters on the system.")]
    Function GetAdapterCount() As Long
    [Description("Describes the physical display adapters present in the system when the IDirect3D9 interface was instantiated.")]
    Sub GetAdapterIdentifier(ByVal Adapter As Long, ByVal flags As Long, ByRef identifier As D3DADAPTER_IDENTIFIER9)
    [PreserveSig]
    [Description("Returns the number of display modes available on this adapter.")]
    Function GetAdapterModeCount(ByVal Adapter As Long, ByVal Format As D3DFORMAT) As Long
    [Description("Queries the device to determine whether the specified adapter supports the requested format and display mode. This method could be used in a loop to enumerate all the available adapter modes.")]
    Sub EnumAdapterModes(ByVal Adapter As Long, ByVal Format As D3DFORMAT, ByVal mode As Long, ByRef DisplayMode As D3DDISPLAYMODE)
    [Description("Retrieves the current display mode of the adapter.")]
    Sub GetAdapterDisplayMode(ByVal Adapter As Long, ByRef DisplayMode As D3DDISPLAYMODE)
    [Description("Verifies whether a hardware accelerated device type can be used on this adapter.")]
    Sub CheckDeviceType(ByVal Adapter As Long, ByVal DeviceType As D3DDEVTYPE, ByVal DisplayFormat As D3DFORMAT, ByVal BackBufferFormat As D3DFORMAT, ByVal bWindowed As Long)
    [Description("Determines whether a surface format is available as a specified resource type and can be used as a texture, depth-stencil buffer, or render target, or any combination of the three, on a device representing this adapter.")]
    Sub CheckDeviceFormat(ByVal Adapter As Long, ByVal DeviceType As D3DDEVTYPE, ByVal AdapterFormat As D3DFORMAT, ByVal Usage As Long, ByVal RType As D3DRESOURCETYPE, ByVal CheckFormat As D3DFORMAT)
    [Description("Determines if a multisampling technique is available on this device.")]
    Sub CheckDeviceMultiSampleType(ByVal Adapter As Long, ByVal DeviceType As D3DDEVTYPE, ByVal SurfaceFormat As D3DFORMAT, ByVal Windowed As Long, ByVal MultiSampleType As D3DMULTISAMPLE_TYPE, ByRef pQualityLevels As Long)
    [Description("Determines whether a depth-stencil format is compatible with a render-target format in a particular display mode.")]
    Sub CheckDepthStencilMatch(ByVal Adapter As Long, ByVal DeviceType As D3DDEVTYPE, ByVal AdapterFormat As D3DFORMAT, ByVal RenderTargetFormat As D3DFORMAT, ByVal DepthStencilFormat As D3DFORMAT)
    [Description("Tests the device to see if it supports conversion from one display format to another.")]
    Sub CheckDeviceFormatConversion(ByVal Adapter As Long, ByVal DeviceType As D3DDEVTYPE, ByVal SourceFormat As D3DFORMAT, ByVal TargetFormat As D3DFORMAT)
    [Description("Retrieves device-specific information about a device.")]
    Sub GetDeviceCaps(ByVal Adapter As Long, ByVal DeviceType As D3DDEVTYPE, ByRef pCaps As D3DCAPS9)
    [PreserveSig]
    [Description("Returns the handle of the monitor associated with the Direct3D object.")]
    Function GetAdapterMonitor(ByVal Adapter As Long) As Long
    [Description("Creates a device to represent the display adapter.")]
    Function CreateDevice(ByVal Adapter As Long, ByVal DeviceType As D3DDEVTYPE, ByVal hFocusWindow As LongPtr, ByVal BehaviorFlags As D3DCREATE, ByRef pPresentationParameters As D3DPRESENT_PARAMETERS) As IDirect3DDevice9
    [PreserveSig]
    Function GetAdapterModeCountEx(ByVal Adapter As Long, ByRef pFilter As D3DDISPLAYMODEFILTER) As Long
    Sub EnumAdapterModesEx(ByVal Adapter As Long, ByRef pFilter As D3DDISPLAYMODEFILTER, ByVal mode As Long, ByRef pMode As D3DDISPLAYMODEEX)
    Sub GetAdapterDisplayModeEx(ByVal Adapter As Long, ByRef pMode As D3DDISPLAYMODEEX, ByRef pRotation As D3DDISPLAYROTATION)
    Sub CreateDeviceEx(ByVal Adapter As Long, ByVal DeviceType As D3DDEVTYPE, ByVal hFocusWindow As LongPtr, ByVal BehaviorFlags As Long, ByRef pPresentationParameters As D3DPRESENT_PARAMETERS, ByRef pFullscreenDisplayMode As D3DDISPLAYMODEEX, ByRef ppReturnedDeviceInterface As IDirect3DDevice9Ex)
    Sub GetAdapterLuid(ByVal Adapter As Long, ByRef pLuid As LUID)
End Interface

[InterfaceId("B18B10CE-2649-405A-870F-95F777D4313A")]
[OleAutomation(False)]
Interface IDirect3DDevice9Ex Extends stdole.IUnknown
    [Description("Reports the current cooperative-level status of the Direct3D device for a windowed or full-screen application.")]
    Sub TestCooperativeLevel()
    [PreserveSig]
    [Description("Returns an estimate of the amount of available texture memory.")]
    Function GetAvailableTextureMem() As Long
    [Description("Evicts all managed resources, including both Direct3D and driver-managed resources.")]
    Sub EvictManagedResources()
    [Description("Returns an interface to the instance of the Direct3D object that created the device.")]
    Function GetDirect3D() As IDirect3D9
    [Description("Retrieves the capabilities of the rendering device.")]
    Sub GetDeviceCaps(ByRef pCaps As D3DCAPS9)
    [Description("Retrieves the display mode's spatial resolution, color resolution, and refresh frequency.")]
    Sub GetDisplayMode(ByVal iSwapChain As Long, ByRef pMode As D3DDISPLAYMODE)
    [Description("Retrieves the creation parameters of the device.")]
    Sub GetCreationParameters(ByRef pParameters As D3DDEVICE_CREATION_PARAMETERS)
    [Description("Sets properties for the cursor.")]
    Sub SetCursorProperties(ByVal XHotSpot As Long, ByVal YHotSpot As Long, ByVal pCursorBitmap As IDirect3DSurface9)
    [PreserveSig]
    [Description("Sets the cursor position and update options.")]
    Sub SetCursorPosition(ByVal x As Long, ByVal y As Long, ByVal flags As D3D9SetCursorPosFlags)
    [PreserveSig]
    [Description("Displays or hides the cursor.")]
    Function ShowCursor(ByVal bShow As Long) As Long
    [Description("Creates an additional swap chain for rendering multiple views.")]
    Function CreateAdditionalSwapChain(ByRef pPresentationParameters As D3DPRESENT_PARAMETERS) As IDirect3DSwapChain9
    [Description("Gets a pointer to a swap chain.")]
    Sub GetSwapChain(ByVal iSwapChain As Long, ByRef ppSwapChain As IDirect3DSwapChain9)
    [PreserveSig]
    [Description("Gets the number of implicit swap chains.")]
    Function GetNumberOfSwapChains() As Long
    [Description("Resets the type, size, and format of the swap chain.")]
    Sub Reset(ByRef pPresentationParameters As D3DPRESENT_PARAMETERS)
    [Description("Presents the contents of the next buffer in the sequence of back buffers owned by the device.")]
    Sub Present(ByRef pSourceRect As Any, ByRef pDestRect As Any, ByVal hDestWindowOverride As LongPtr, ByRef pDirtyRegion As Any)
    [Description("Retrieves a back buffer from the device's swap chain.")]
    Function GetBackBuffer(ByVal iSwapChain As Long, ByVal BackBuffer As Long, ByVal type As D3DBACKBUFFER_TYPE) As IDirect3DSurface9
    [Description("Returns information describing the raster of the monitor on which the swap chain is presented.")]
    Sub GetRasterStatus(ByVal iSwapChain As Long, ByRef pRasterStatus As D3DRASTER_STATUS)
    [Description("This method allows the use of GDI dialog boxes in full-screen mode applications.")]
    Sub SetDialogBoxMode(ByVal bEnableDialogs As Long)
    [PreserveSig]
    [Description("Sets the gamma correction ramp for the implicit swap chain. This method will affect the entire screen (not just the active window if you are running in windowed mode).")]
    Sub SetGammaRamp(ByVal iSwapChain As Long, ByVal flags As D3D9SetGammaRampFlags, ByRef pRamp As D3DGAMMARAMP)
    [PreserveSig]
    [Description("Retrieves the gamma correction ramp for the swap chain.")]
    Sub GetGammaRamp(ByVal iSwapChain As Long, ByRef pRamp As D3DGAMMARAMP)
    [Description("Creates a texture resource.")]
    Sub CreateTexture(ByVal width As Long, ByVal Height As Long, ByVal Levels As Long, ByVal Usage As D3DUSAGE, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByRef ppTexture As IDirect3DTexture9, Optional ByVal pSharedHandle As LongPtr = 0)
    [Description("Creates a volume texture resource.")]
    Sub CreateVolumeTexture(ByVal width As Long, ByVal Height As Long, ByVal Depth As Long, ByVal Levels As Long, ByVal Usage As D3DUSAGE, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByRef ppVolumeTexture As IDirect3DVolumeTexture9, Optional ByVal pSharedHandle As LongPtr = 0)
    [Description("Creates a cube texture resource.")]
    Sub CreateCubeTexture(ByVal EdgeLength As Long, ByVal Levels As Long, ByVal Usage As D3DUSAGE, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByRef ppCubeTexture As IDirect3DCubeTexture9, Optional ByVal pSharedHandle As LongPtr = 0)
    [Description("Creates a vertex buffer.")]
    Sub CreateVertexBuffer(ByVal Length As Long, ByVal Usage As D3DUSAGE, ByVal FVF As D3DFVF, ByVal Pool As D3DPOOL, ByRef ppVertexBuffer As IDirect3DVertexBuffer9, Optional ByVal pSharedHandle As LongPtr = 0)
    [Description("Creates an index buffer.")]
    Sub CreateIndexBuffer(ByVal Length As Long, ByVal Usage As D3DUSAGE, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByRef ppIndexBuffer As IDirect3DIndexBuffer9, Optional ByVal pSharedHandle As LongPtr = 0)
    [Description("Creates a render-target surface.")]
    Sub CreateRenderTarget(ByVal width As Long, ByVal Height As Long, ByVal Format As D3DFORMAT, ByVal MultiSample As D3DMULTISAMPLE_TYPE, ByVal MultiSampleQuality As Long, ByVal Lockable As Long, ByRef ppSurface As IDirect3DSurface9, Optional ByVal pSharedHandle As LongPtr = 0)
    [Description("Creates a depth-stencil resource.")]
    Sub CreateDepthStencilSurface(ByVal width As Long, ByVal Height As Long, ByVal Format As D3DFORMAT, ByVal MultiSample As D3DMULTISAMPLE_TYPE, ByVal MultiSampleQuality As Long, ByVal Discard As Long, ByRef ppSurface As IDirect3DSurface9, Optional ByVal pSharedHandle As LongPtr = 0)
    [Description("Copies rectangular subsets of pixels from one surface to another.")]
    Sub UpdateSurface(ByVal pSourceSurface As IDirect3DSurface9, ByRef pSourceRect As Any, ByVal pDestinationSurface As IDirect3DSurface9, ByRef pDestinationPoint As Any)
    [Description("Updates the dirty portions of a texture.")]
    Sub UpdateTexture(ByVal pSourceTexture As IDirect3DBaseTexture9, ByVal pDestinationTexture As IDirect3DBaseTexture9)
    [Description("Copies the render-target data from device memory to system memory.")]
    Sub GetRenderTargetData(ByVal pRenderTarget As IDirect3DSurface9, ByVal pDestSurface As IDirect3DSurface9)
    [Description("Generates a copy of the device's front buffer and places that copy in a system memory buffer provided by the application.")]
    Sub GetFrontBufferData(ByVal iSwapChain As Long, ByVal pDestSurface As IDirect3DSurface9)
    [Description("Copy the contents of the source rectangle to the destination rectangle. The source rectangle can be stretched and filtered by the copy. This function is often used to change the aspect ratio of a video stream.")]
    Sub StretchRect(ByVal pSourceSurface As IDirect3DSurface9, ByRef pSourceRect As Any, ByVal pDestSurface As IDirect3DSurface9, ByRef pDestRect As Any, ByVal Filter As D3DTEXTUREFILTERTYPE)
    [Description("Allows an application to fill a rectangular area of a D3DPOOL_DEFAULT surface with a specified color.")]
    Sub ColorFill(ByVal pSurface As IDirect3DSurface9, ByRef pRect As Any, ByVal color As Long)
    [Description("Create an off-screen surface.")]
    Sub CreateOffscreenPlainSurface(ByVal width As Long, ByVal Height As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByRef ppSurface As IDirect3DSurface9, Optional ByVal pSharedHandle As LongPtr = 0)
    [Description("Sets a new color buffer for the device.")]
    Sub SetRenderTarget(ByVal RenderTargetIndex As Long, ByVal pRenderTarget As IDirect3DSurface9)
    [Description("Retrieves a render-target surface.")]
    Function GetRenderTarget(ByVal RenderTargetIndex As Long) As IDirect3DSurface9
    [Description("Sets the depth stencil surface.")]
    Sub SetDepthStencilSurface(ByVal pNewZStencil As IDirect3DSurface9)
    [Description("Gets the depth-stencil surface owned by the Direct3DDevice object.")]
    Function GetDepthStencilSurface() As IDirect3DSurface9
    [Description("Begins a scene.")]
    Sub BeginScene()
    [Description("Ends a scene that was begun by calling IDirect3DDevice9.BeginScene.")]
    Sub EndScene()
    [Description("Clears one or more surfaces such as a render target, multiple render targets, a stencil buffer, and a depth buffer.")]
    Sub Clear(ByVal Count As Long, ByRef pRects As Any, ByVal flags As D3DCLEAR, ByVal color As Long, ByVal Z As Single, ByVal Stencil As Long)
    [Description("Sets a single device transformation-related state.")]
    Sub SetTransform(ByVal State As D3DTRANSFORMSTATETYPE, ByRef pMatrix As D3DMATRIX)
    [Description("Retrieves a matrix describing a transformation state.")]
    Sub GetTransform(ByVal State As D3DTRANSFORMSTATETYPE, ByRef pMatrix As D3DMATRIX)
    [Description("Multiplies a device's world, view, or projection matrices by a specified matrix.")]
    Sub MultiplyTransform(ByVal State As D3DTRANSFORMSTATETYPE, ByRef pMatrix As D3DMATRIX)
    [Description("Sets the viewport parameters for the device.")]
    Sub SetViewport(ByRef pViewport As D3DVIEWPORT9)
    [Description("Retrieves the viewport parameters currently set for the device.")]
    Sub GetViewport(ByRef pViewport As D3DVIEWPORT9)
    [Description("Sets the material properties for the device.")]
    Sub SetMaterial(ByRef pMaterial As D3DMATERIAL9)
    [Description("Retrieves the current material properties for the device.")]
    Sub GetMaterial(ByRef pMaterial As D3DMATERIAL9)
    [Description("Assigns a set of lighting properties for this device.")]
    Sub SetLight(ByVal index As Long, ByRef pLight As D3DLIGHT9)
    [Description("Retrieves a set of lighting properties that this device uses.")]
    Sub GetLight(ByVal index As Long, ByRef pLight As D3DLIGHT9)
    [Description("Enables or disables a set of lighting parameters within a device.")]
    Sub LightEnable(ByVal LightIndex As Long, ByVal bEnable As Long)
    [Description("Retrieves the activity status - enabled or disabled - for a set of lighting parameters within a device.")]
    Function GetLightEnable(ByVal index As Long) As Long
    [Description("Sets the coefficients of a user-defined clipping plane for the device.")]
    Sub SetClipPlane(ByVal index As Long, ByRef pPlane As Single)
    [Description("Retrieves the coefficients of a user-defined clipping plane for the device.")]
    Function GetClipPlane(ByVal index As Long) As Single
    [Description("Sets a single device render-state parameter.")]
    Sub SetRenderState(ByVal State As D3DRENDERSTATETYPE, ByVal Value As Long)
    [Description("Retrieves a render-state value for a device.")]
    Function GetRenderState(ByVal State As D3DRENDERSTATETYPE) As Long
    [Description("Creates a new state block that contains the values for all device states, vertex-related states, or pixel-related states.")]
    Function CreateStateBlock(ByVal type As D3DSTATEBLOCKTYPE) As IDirect3DStateBlock9
    [Description("Signals Direct3D to begin recording a device-state block.")]
    Sub BeginStateBlock()
    [Description("Signals Direct3D to stop recording a device-state block and retrieve a pointer to the state block interface.")]
    Function EndStateBlock() As IDirect3DStateBlock9
    [Description("Sets the clip status.")]
    Sub SetClipStatus(ByRef pClipStatus As D3DCLIPSTATUS9)
    [Description("Retrieves the clip status.")]
    Sub GetClipStatus(ByRef pClipStatus As D3DCLIPSTATUS9)
    [Description("Retrieves a texture assigned to a stage for a device.")]
    Function GetTexture(ByVal stage As Long) As IDirect3DBaseTexture9
    [Description("Assigns a texture to a stage for a device.")]
    Sub SetTexture(ByVal Sampler As Long, ByVal pTexture As IDirect3DBaseTexture9)
    [Description("Retrieves a state value for an assigned texture.")]
    Function GetTextureStageState(ByVal stage As Long, ByVal type As D3DTEXTURESTAGESTATETYPE) As Long
    [Description("Sets the state value for the currently assigned texture.")]
    Sub SetTextureStageState(ByVal stage As Long, ByVal type As D3DTEXTURESTAGESTATETYPE, ByVal Value As Long)
    [Description("Gets the sampler state value.")]
    Sub GetSamplerState(ByVal Sampler As Long, ByVal type As D3DSAMPLERSTATETYPE, ByRef pValue As Long)
    [Description("Sets the sampler state value.")]
    Sub SetSamplerState(ByVal Sampler As Long, ByVal type As D3DSAMPLERSTATETYPE, ByVal Value As Long)
    [Description("Reports the device's ability to render the current texture-blending operations and arguments in a single pass.")]
    Function ValidateDevice() As Long
    [Description("Sets palette entries.")]
    Sub SetPaletteEntries(ByVal PaletteNumber As Long, ByRef pEntries As PALETTEENTRY)
    [Description("Retrieves palette entries.")]
    Sub GetPaletteEntries(ByVal PaletteNumber As Long, ByRef pEntries As PALETTEENTRY)
    [Description("Sets the current texture palette.")]
    Sub SetCurrentTexturePalette(ByVal PaletteNumber As Long)
    [Description("Retrieves the current texture palette.")]
    Function GetCurrentTexturePalette() As Long
    [Description("Sets the scissor rectangle.")]
    Sub SetScissorRect(ByRef pRect As Any)
    [Description("Gets the scissor rectangle.")]
    Sub GetScissorRect(ByRef pRect As RECT)
    [Description("Use this method to switch between software and hardware vertex processing.")]
    Sub SetSoftwareVertexProcessing(ByVal bSoftware As Long)
    [PreserveSig]
    [Description("Gets the vertex processing (hardware or software) mode.")]
    Function GetSoftwareVertexProcessing() As Long
    [Description("Enable or disable N-patches.")]
    Sub SetNPatchMode(ByVal nSegments As Single)
    [PreserveSig]
    [Description("Gets the N-patch mode segments.")]
    Function GetNPatchMode() As Single
    [Description("Renders a sequence of nonindexed, geometric primitives of the specified type from the current set of data input streams.")]
    Sub DrawPrimitive(ByVal PrimitiveType As D3DPRIMITIVETYPE, ByVal startVertex As Long, ByVal PrimitiveCount As Long)
    [Description("Based on indexing, renders the specified geometric primitive into an array of vertices.")]
    Sub DrawIndexedPrimitive(ByVal type As D3DPRIMITIVETYPE, ByVal BaseVertexIndex As Long, ByVal MinIndex As Long, ByVal NumVertices As Long, ByVal StartIndex As Long, ByVal PrimitiveCount As Long)
    [Description("Renders data specified by a user memory pointer as a sequence of geometric primitives of the specified type.")]
    Sub DrawPrimitiveUP(ByVal PrimitiveType As D3DPRIMITIVETYPE, ByVal PrimitiveCount As Long, ByRef pVertexStreamZeroData As Any, ByVal VertexStreamZeroStride As Long)
    [Description("Renders the specified geometric primitive with data specified by a user memory pointer.")]
    Sub DrawIndexedPrimitiveUP(ByVal PrimitiveType As D3DPRIMITIVETYPE, ByVal MinVertexIndex As Long, ByVal NumVertices As Long, ByVal PrimitiveCount As Long, ByRef pIndexData As Any, ByVal IndexDataFormat As D3DFORMAT, ByRef pVertexStreamZeroData As Any, ByVal VertexStreamZeroStride As Long)
    [Description("Applies the vertex processing defined by the vertex shader to the set of input data streams, generating a single stream of interleaved vertex data to the destination vertex buffer.")]
    Sub ProcessVertices(ByVal SrcStartIndex As Long, ByVal DestIndex As Long, ByVal vertexCount As Long, ByVal pDestBuffer As IDirect3DVertexBuffer9, ByVal pVertexDecl As IDirect3DVertexDeclaration9, ByVal flags As Long)
    [Description("Create a vertex shader declaration from the device and the vertex elements.")]
    Function CreateVertexDeclaration(ByRef pVertexElements As D3DVERTEXELEMENT9) As IDirect3DVertexDeclaration9
    [Description("Sets a Vertex Declaration.")]
    Sub SetVertexDeclaration(ByVal pDecl As IDirect3DVertexDeclaration9)
    [Description("Gets a vertex shader declaration.")]
    Function GetVertexDeclaration() As IDirect3DVertexDeclaration9
    [Description("Sets the current vertex stream declaration.")]
    Sub SetFVF(ByVal FVF As D3DFVF)
    [Description("Gets the fixed vertex function declaration.")]
    Function GetFVF() As D3DFVF
    [Description("Creates a vertex shader.")]
    Function CreateVertexShader(ByRef pFunction As Any) As IDirect3DVertexShader9
    [Description("Sets the vertex shader.")]
    Sub SetVertexShader(ByVal pShader As IDirect3DVertexShader9)
    [Description("Retrieves the currently set vertex shader.")]
    Function GetVertexShader() As IDirect3DVertexShader9
    [Description("Sets a floating-point vertex shader constant.")]
    Sub SetVertexShaderConstantF(ByVal StartRegister As Long, ByRef pConstantData As Any, ByVal Vector4fCount As Long)
    [Description("Gets a floating-point vertex shader constant.")]
    Sub GetVertexShaderConstantF(ByVal StartRegister As Long, ByRef pConstantData As Single, ByVal Vector4fCount As Long)
    [Description("Sets an integer vertex shader constant.")]
    Sub SetVertexShaderConstantI(ByVal StartRegister As Long, ByRef pConstantData As Any, ByVal Vector4fCount As Long)
    [Description("Gets an integer vertex shader constant.")]
    Sub GetVertexShaderConstantI(ByVal StartRegister As Long, ByRef pConstantData As Long, ByVal Vector4fCount As Long)
    [Description("Sets a boolean vertex shader constant.")]
    Sub SetVertexShaderConstantB(ByVal StartRegister As Long, ByRef pConstantData As Any, ByVal Vector4fCount As Long)
    [Description("Gets a boolean vertex shader constant.")]
    Sub GetVertexShaderConstantB(ByVal StartRegister As Long, ByRef pConstantData As Long, ByVal Vector4fCount As Long)
    [Description("Binds a vertex buffer to a device data stream.")]
    Sub SetStreamSource(ByVal StreamNumber As Long, ByVal pStreamData As IDirect3DVertexBuffer9, ByVal OffsetInBytes As Long, ByVal stride As Long)
    [Description("Retrieves a vertex buffer bound to the specified data stream.")]
    Sub GetStreamSource(ByVal StreamNumber As Long, ByRef ppStreamData As IDirect3DVertexBuffer9, ByRef pOffsetInBytes As Long, ByRef pStride As Long)
    [Description("Sets the stream source frequency divider value. This may be used to draw several instances of geometry.")]
    Sub SetStreamSourceFreq(ByVal StreamNumber As Long, ByVal FrequencyParameter As Long)
    [Description("Gets the stream source frequency divider value.")]
    Function GetStreamSourceFreq(ByVal StreamNumber As Long) As Long
    [Description("Sets index data.")]
    Sub SetIndices(ByVal pIndexData As IDirect3DIndexBuffer9)
    [Description("Retrieves index data.")]
    Sub GetIndices(ByRef ppIndexData As IDirect3DIndexBuffer9, ByRef pBaseVertexIndex As Long)
    [Description("Creates a pixel shader.")]
    Function CreatePixelShader(ByRef pFunction As Any) As IDirect3DPixelShader9
    [Description("Sets the pixel shader.")]
    Sub SetPixelShader(ByVal pShader As IDirect3DPixelShader9)
    [Description("Retrieves the currently set pixel shader.")]
    Function GetPixelShader() As IDirect3DPixelShader9
    [Description("Sets a floating-point pixel shader constant.")]
    Sub SetPixelShaderConstantF(ByVal StartRegister As Long, ByRef pConstantData As Any, ByVal Vector4fCount As Long)
    [Description("Gets a floating-point pixel shader constant.")]
    Sub GetPixelShaderConstantF(ByVal StartRegister As Long, ByRef pConstantData As Single, ByVal Vector4fCount As Long)
    [Description("Sets an integer pixel shader constant.")]
    Sub SetPixelShaderConstantI(ByVal StartRegister As Long, ByRef pConstantData As Any, ByVal Vector4fCount As Long)
    [Description("Gets an integer pixel shader constant.")]
    Sub GetPixelShaderConstantI(ByVal StartRegister As Long, ByRef pConstantData As Long, ByVal Vector4fCount As Long)
    [Description("Sets a boolean pixel shader constant.")]
    Sub SetPixelShaderConstantB(ByVal StartRegister As Long, ByRef pConstantData As Any, ByVal Vector4fCount As Long)
    [Description("Gets a boolean pixel shader constant.")]
    Sub GetPixelShaderConstantB(ByVal StartRegister As Long, ByRef pConstantData As Long, ByVal Vector4fCount As Long)
    [Description("Draws a rectangular patch using the currently set streams.")]
    Sub DrawRectPatch(ByVal handle As Long, ByRef pNumSegs As Single, ByRef pRectPatchInfo As D3DRECTPATCH_INFO)
    [Description("Draws a triangular patch using the currently set streams.")]
    Sub DrawTriPatch(ByVal handle As Long, ByRef pNumSegs As Single, ByRef pTriPatchInfo As D3DTRIPATCH_INFO)
    [Description("Frees a cached high-order patch.")]
    Sub DeletePatch(ByVal handle As Long)
    [Description("Creates a status query.")]
    Function CreateQuery(ByVal type As D3DQUERYTYPE) As IDirect3DQuery9
    Sub SetConvolutionMonoKernel(ByVal width As Long, ByVal Height As Long, ByRef Rows As Single, ByRef Columns As Single)
    Sub ComposeRects(ByVal pSrc As IDirect3DSurface9, ByVal pDst As IDirect3DSurface9, ByVal pSrcRectDescs As IDirect3DVertexBuffer9, ByVal NumRects As Long, ByVal pDstRectDescs As IDirect3DVertexBuffer9, ByVal operation As D3DCOMPOSERECTSOP, ByVal Xoffset As Long, ByVal Yoffset As Long)
    Sub PresentEx(ByRef pSourceRect As RECT, ByRef pDestRect As RECT, ByVal hDestWindowOverride As LongPtr, ByRef pDirtyRegion As Any, ByVal dwFlags As Long)
    Sub GetGPUThreadPriority(ByRef pPriority As Long)
    Sub SetGPUThreadPriority(ByVal Priority As Long)
    Sub WaitForVBlank(ByVal iSwapChain As Long)
    Sub CheckResourceResidency(ByRef pResourceArray As IDirect3DResource9, ByVal NumResources As Long)
    Sub SetMaximumFrameLatency(ByVal MaxLatency As Long)
    Sub GetMaximumFrameLatency(ByRef pMaxLatency As Long)
    Sub CheckDeviceState(ByVal hDestinationWindow As LongPtr)
    Sub CreateRenderTargetEx(ByVal width As Long, ByVal Height As Long, ByVal Format As D3DFORMAT, ByVal MultiSample As D3DMULTISAMPLE_TYPE, ByVal MultiSampleQuality As Long, ByVal Lockable As BOOL, ByRef ppSurface As IDirect3DSurface9, ByVal pSharedHandle As LongPtr, ByVal Usage As Long)
    Sub CreateOffscreenPlainSurfaceEx(ByVal width As Long, ByVal Height As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByRef ppSurface As IDirect3DSurface9, ByVal pSharedHandle As LongPtr, ByVal Usage As Long)
    Sub CreateDepthStencilSurfaceEx(ByVal width As Long, ByVal Height As Long, ByVal Format As D3DFORMAT, ByVal MultiSample As D3DMULTISAMPLE_TYPE, ByVal MultiSampleQuality As Long, ByVal Discard As BOOL, ByRef ppSurface As IDirect3DSurface9, ByVal pSharedHandle As LongPtr, ByVal Usage As Long)
    Sub ResetEx(ByRef pPresentationParameters As D3DPRESENT_PARAMETERS, ByRef pFullscreenDisplayMode As D3DDISPLAYMODEEX)
    Sub GetDisplayModeEx(ByVal iSwapChain As Long, ByRef pMode As D3DDISPLAYMODEEX, ByRef pRotation As D3DDISPLAYROTATION)
End Interface

[InterfaceId("91886CAF-1C3D-4D2E-A0AB-3E4C7D8D3303")]
[OleAutomation(False)]
Interface IDirect3DSwapChain9Ex Extends stdole.IUnknown
    [Description("Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.")]
    Sub Present(ByRef pSourceRect As Any, ByRef pDestRect As Any, ByVal hDestWindowOverride As LongPtr, ByRef pDirtyRegion As Any, ByVal dwFlags As Long)
    [Description("Generates a copy of the swapchain's front buffer and places that copy in a system memory buffer provided by the application.")]
    Sub GetFrontBufferData(ByVal pDestSurface As IDirect3DSurface9)
    [Description("Retrieves a back buffer from the swap chain of the device.")]
    Function GetBackBuffer(ByVal BackBuffer As Long, ByVal type As D3DBACKBUFFER_TYPE) As IDirect3DSurface9
    [Description("Returns information describing the raster of the monitor on which the swap chain is presented.")]
    Sub GetRasterStatus(ByRef pRasterStatus As D3DRASTER_STATUS)
    [Description("Retrieves the display mode's spatial resolution, color resolution, and refresh frequency.")]
    Sub GetDisplayMode(ByRef pMode As D3DDISPLAYMODE)
    [Description("Retrieves the device associated with the swap chain.")]
    Function GetDevice() As IDirect3DDevice9
    [Description("Retrieves the presentation parameters associated with a swap chain.")]
    Function GetPresentParameters() As D3DPRESENT_PARAMETERS
    Sub GetLastPresentCount(ByRef pLastPresentCount As Long)
    Sub GetPresentStats(ByRef pPresentationStatistics As D3DPRESENTSTATS)
    Sub GetDisplayModeEx(ByRef pMode As D3DDISPLAYMODEEX, ByRef pRotation As D3DDISPLAYROTATION)
End Interface

[InterfaceId("187AEB13-AAF5-4C59-876D-E059088C0DF8")]
[OleAutomation(False)]
Interface IDirect3D9ExOverlayExtension Extends stdole.IUnknown
    Sub CheckDeviceOverlayType(ByVal Adapter As Long, ByVal DevType As D3DDEVTYPE, ByVal OverlayWidth As Long, ByVal OverlayHeight As Long, ByVal OverlayFormat As D3DFORMAT, ByRef pDisplayMode As D3DDISPLAYMODEEX, ByVal DisplayRotation As D3DDISPLAYROTATION, ByRef pOverlayCaps As D3DOVERLAYCAPS)
End Interface

[InterfaceId("26DC4561-A1EE-4AE7-96DA-118A36C0EC95")]
[OleAutomation(False)]
Interface IDirect3DDevice9Video Extends stdole.IUnknown
    Sub GetContentProtectionCaps(ByRef pCryptoType As UUID, ByRef pDecodeProfile As UUID, ByRef pCaps As D3DCONTENTPROTECTIONCAPS)
    Sub CreateAuthenticatedChannel(ByVal ChannelType As D3DAUTHENTICATEDCHANNELTYPE, ByRef ppAuthenticatedChannel As IDirect3DAuthenticatedChannel9, ByRef pChannelHandle As LongPtr)
    Sub CreateCryptoSession(ByRef pCryptoType As UUID, ByRef pDecodeProfile As UUID, ByRef ppCryptoSession As IDirect3DCryptoSession9, ByRef pCryptoHandle As LongPtr)
End Interface

[InterfaceId("FF24BEEE-DA21-4BEB-98B5-D2F899F98AF9")]
[OleAutomation(False)]
Interface IDirect3DAuthenticatedChannel9 Extends stdole.IUnknown
    Sub GetCertificateSize(ByRef pCertificateSize As Long)
    Sub GetCertificate(ByVal CertifacteSize As Long, ByRef ppCertificate As Any)
    Sub NegotiateKeyExchange(ByVal dataSize As Long, ByRef pData As Any)
    Sub Query(ByVal InputSize As Long, ByRef pInput As Any, ByVal OutputSize As Long, ByRef pOutput As Any)
    Sub Configure(ByVal InputSize As Long, ByRef pInput As Any, ByRef pOutput As D3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT)
End Interface

[InterfaceId("FA0AB799-7A9C-48CA-8C5B-237E71A54434")]
[OleAutomation(False)]
Interface IDirect3DCryptoSession9 Extends stdole.IUnknown
    Sub GetCertificateSize(ByRef pCertificateSize As Long)
    Sub GetCertificate(ByVal CertifacteSize As Long, ByRef ppCertificate As Any)
    Sub NegotiateKeyExchange(ByVal dataSize As Long, ByRef pData As Any)
    Sub EncryptionBlt(ByVal pSrcSurface As IDirect3DSurface9, ByVal pDstSurface As IDirect3DSurface9, ByVal DstSurfaceSize As Long, ByRef pIV As Any)
    Sub DecryptionBlt(ByVal pSrcSurface As IDirect3DSurface9, ByVal pDstSurface As IDirect3DSurface9, ByVal SrcSurfaceSize As Long, ByRef pEncryptedBlockInfo As D3DENCRYPTED_BLOCK_INFO, ByRef pContentKey As Any, ByRef pIV As Any)
    Sub GetSurfacePitch(ByVal pSrcSurface As IDirect3DSurface9, ByRef pSurfacePitch As Long)
    Sub StartSessionKeyRefresh(ByRef pRandomNumber As Any, ByVal RandomNumberSize As Long)
    Sub FinishSessionKeyRefresh()
    Sub GetEncryptionBltKey(ByRef pReadbackKey As Any, ByVal KeySize As Long)
End Interface

[InterfaceId("AB3C758F-093E-4356-B762-4DB18F1B3A01")]
[OleAutomation(False)]
Interface ID3DXConstantTable Extends IUnknown
    [PreserveSig]
    Function GetBufferPointer() As Long
    [PreserveSig]
    Function GetBufferSize() As Long
    Sub GetDesc(ByRef pDesc As D3DXCONSTANTTABLE_DESC)
    Sub GetConstantDesc(ByVal hConstant As LongPtr, ByRef pConstantDesc As D3DXCONSTANT_DESC, ByRef pCount As Long)
    [PreserveSig]
    Function GetSamplerIndex(ByVal hConstant As LongPtr) As Long
    [PreserveSig]
    Function GetConstant(ByVal hConstant As LongPtr, ByVal index As Long) As LongPtr
    [PreserveSig]
    Function GetConstantByName(ByVal hConstant As LongPtr, ByVal pName As LongPtr) As LongPtr
    [PreserveSig]
    Function GetConstantElement(ByVal hConstant As LongPtr, ByVal index As Long) As LongPtr
    Sub SetDefaults(ByVal pDevice As IDirect3DDevice9)
    Sub SetValue(ByVal pDevice As IDirect3DDevice9, ByVal hConstant As LongPtr, ByRef pData As Any, ByVal Bytes As Long)
    Sub SetBool(ByVal pDevice As IDirect3DDevice9, ByVal hConstant As LongPtr, ByVal b As Long)
    Sub SetBoolArray(ByVal pDevice As IDirect3DDevice9, ByVal hConstant As LongPtr, ByRef pb As Long, ByVal Count As Long)
    Sub SetInt(ByVal pDevice As IDirect3DDevice9, ByVal hConstant As LongPtr, ByVal n As Long)
    Sub SetIntArray(ByVal pDevice As IDirect3DDevice9, ByVal hConstant As LongPtr, ByRef pn As Long, ByVal Count As Long)
    Sub SetFloat(ByVal pDevice As IDirect3DDevice9, ByVal hConstant As LongPtr, ByVal f As Single)
    Sub SetFloatArray(ByVal pDevice As IDirect3DDevice9, ByVal hConstant As LongPtr, ByRef pf As Single, ByVal Count As Long)
    Sub SetVector(ByVal pDevice As IDirect3DDevice9, ByVal hConstant As LongPtr, ByRef pVector As D3DVECTOR4)
    Sub SetVectorArray(ByVal pDevice As IDirect3DDevice9, ByVal hConstant As LongPtr, ByRef pVector As D3DVECTOR4, ByVal Count As Long)
    Sub SetMatrix(ByVal pDevice As IDirect3DDevice9, ByVal hConstant As LongPtr, ByRef pMatrix As D3DMATRIX)
    Sub SetMatrixArray(ByVal pDevice As IDirect3DDevice9, ByVal hConstant As LongPtr, ByRef pMatrix As D3DMATRIX, ByVal Count As Long)
    Sub SetMatrixPointerArray(ByVal pDevice As IDirect3DDevice9, ByVal hConstant As LongPtr, ByRef ppMatrix As Any, ByVal Count As Long)
    Sub SetMatrixTranspose(ByVal pDevice As IDirect3DDevice9, ByVal hConstant As LongPtr, ByRef pMatrix As D3DMATRIX)
    Sub SetMatrixTransposeArray(ByVal pDevice As IDirect3DDevice9, ByVal hConstant As LongPtr, ByRef pMatrix As D3DMATRIX, ByVal Count As Long)
    Sub SetMatrixTransposePointerArray(ByVal pDevice As IDirect3DDevice9, ByVal hConstant As LongPtr, ByRef ppMatrix As Any, ByVal Count As Long)
End Interface

[InterfaceId("3E3D67F8-AA7A-405D-A857-BA01D4758426")]
[OleAutomation(False)]
Interface ID3DXTextureShader Extends stdole.IUnknown
    Sub GetFunction(ppFunction As ID3DXBuffer)
    Sub GetConstantBuffer(ppConstantBuffer As ID3DXBuffer)
    Sub GetDesc(pDesc As D3DXCONSTANTTABLE_DESC)
    Sub GetConstantDesc(ByVal hConstant As LongPtr, ByRef pConstantDesc As D3DXCONSTANT_DESC, ByRef pCount As Long)
    [PreserveSig] Function GetConstant(ByVal hConstant As LongPtr, ByVal Index As Long) As LongPtr
    [PreserveSig] Function GetConstantByName(ByVal hConstant As LongPtr, ByVal pName As LongPtr /* ANSI */) As LongPtr
    [PreserveSig] Function GetConstantElement(ByVal hConstant As LongPtr, ByVal Index As Long) As LongPtr
    Sub SetDefaults()
    Sub SetValue(ByVal hConstant As LongPtr, pData As Any, ByVal Bytes As Long)
    Sub SetBool(ByVal hConstant As LongPtr, ByVal b As BOOL)
    Sub SetBoolArray(ByVal hConstant As LongPtr, ByRef pb As BOOL, ByVal Count As Long)
    Sub SetInt(ByVal hConstant As LongPtr, ByVal n As Long)
    Sub SetIntArray(ByVal hConstant As LongPtr, ByRef pn As Long, ByVal Count As Long)
    Sub SetFloat(ByVal hConstant As LongPtr, ByVal f As Single)
    Sub SetFloatArray(ByVal hConstant As LongPtr, ByRef pf As Single, ByVal Count As Long)
    Sub SetVector(ByVal hConstant As LongPtr, ByRef pVector As D3DXVECTOR4)
    Sub SetVectorArray(ByVal hConstant As LongPtr, ByRef pVector As D3DXVECTOR4, ByVal Count As Long)
    Sub SetMatrix(ByVal hConstant As LongPtr, ByRef pMatrix As D3DXMATRIX)
    Sub SetMatrixArray(ByVal hConstant As LongPtr, ByRef pMatrix As D3DXMATRIX, ByVal Count As Long)
    Sub SetMatrixPointerArray(ByVal hConstant As LongPtr, ppMatrix As LongPtr, ByVal Count As Long)
    Sub SetMatrixTranspose(ByVal hConstant As LongPtr, ByRef pMatrix As D3DXMATRIX)
    Sub SetMatrixTransposeArray(ByVal hConstant As LongPtr, ByRef pMatrix As D3DXMATRIX, ByVal Count As Long)
    Sub SetMatrixTransposePointerArray(ByVal hConstant As LongPtr, ppMatrix As LongPtr, ByVal Count As Long)
End Interface





[InterfaceId("8BA5FB08-5195-40E2-AC58-0D989C3A0102")]
[OleAutomation(False)]
Interface ID3DXBuffer Extends IUnknown
    [PreserveSig] Function GetBufferPointer() As LongPtr
    [PreserveSig] Function GetBufferSize() As Long
End Interface

[InterfaceId("BA0B762D-7D28-43EC-B9DC-2F84443B0614")]
[OleAutomation(False)]
Interface ID3DXSprite Extends IUnknown
    Sub GetDevice(ByRef ppDevice As IDirect3DDevice9)
    Sub GetTransform(ByRef pTransform As D3DXMATRIX)
    Sub SetTransform(ByRef pTransform As D3DXMATRIX)
    Sub SetWorldViewRH(ByRef pWorld As D3DXMATRIX, ByRef pView As D3DXMATRIX)
    Sub SetWorldViewLH(ByRef pWorld As D3DXMATRIX, ByRef pView As D3DXMATRIX)
    Sub Begin(ByVal Flags As Long)
    Sub Draw(ByVal pTexture As IDirect3DTexture9, ByRef pSrcRect As RECT, ByRef pCenter As D3DXVECTOR3, ByRef pPosition As D3DXVECTOR3, ByVal Color As Long)
    Sub Flush()
    Sub End()
    Sub OnLostDevice()
    Sub OnResetDevice()
End Interface

[InterfaceId("D79DBB70-5F21-4D36-BBC2-FF525C213CDC")]
[OleAutomation(False)]
Interface ID3DXFont Extends IUnknown
    Sub GetDevice(ByRef ppDevice As IDirect3DDevice9)
    Sub GetDescA(ByRef pDesc As D3DXFONT_DESCA)
    Sub GetDescW(ByRef pDesc As D3DXFONT_DESCW)
    Function GetTextMetricsA(ByRef pTextMetrics As TEXTMETRICA) As BOOL
    Function GetTextMetricsW(ByRef pTextMetrics As TEXTMETRICW) As BOOL
    Function GetDC() As LongPtr
    Sub GetGlyphData(ByVal Glyph As Long, ByRef ppTexture As IDirect3DTexture9, ByRef pBlackBox As RECT, ByRef pCellInc As POINT)
    Sub PreloadCharacters(ByVal First As Long, ByVal Last As Long)
    Sub PreloadGlyphs(ByVal First As Long, ByVal Last As Long)
    Sub PreloadTextA(ByVal pString As String, ByVal Count As Long)
    Sub PreloadTextW(ByVal pString As String, ByVal Count As Long)
    Function DrawTextA(ByVal pSprite As ID3DXSprite, ByVal pString As String, ByVal Count As Long, ByRef pRect As RECT, ByVal Format As Long, ByVal Color As Long) As Long
    Function DrawTextW(ByVal pSprite As ID3DXSprite, ByVal pString As String, ByVal Count As Long, ByRef pRect As RECT, ByVal Format As Long, ByVal Color As Long) As Long
    Sub OnLostDevice()
    Sub OnResetDevice()
End Interface

[InterfaceId("6985F346-2C3D-43B3-BE8B-DAAE8A03D894")]
[OleAutomation(False)]
Interface ID3DXRenderToSurface Extends IUnknown
    Sub GetDevice(ByRef ppDevice As IDirect3DDevice9)
    Sub GetDesc(ByRef pDesc As D3DXRTS_DESC)
    Sub BeginScene(ByVal pSurface As IDirect3DSurface9, ByRef pViewport As D3DVIEWPORT9)
    Sub EndScene(ByVal MipFilter As Long)
    Sub OnLostDevice()
    Sub OnResetDevice()
End Interface

[InterfaceId("D379BA7F-9042-4ac4-9F5E-58192A4C6BD8")]
[OleAutomation(False)]
Interface ID3DXLine Extends IUnknown
    Sub GetDevice(ByRef ppDevice As IDirect3DDevice9)
    Sub Begin()
    Sub Draw(ByRef pVertexList As D3DXVECTOR2, ByVal dwVertexListCount As Long, ByVal Color As Long /*D3DCOLOR*/)
    Sub DrawTransform(ByRef pVertexList As D3DXVECTOR3, ByVal dwVertexListCount As Long, ByRef pTransform As D3DXMATRIX, ByVal Color As Long /*D3DCOLOR*/)
    Sub SetPattern(ByVal dwPattern As Long)
    [PreserveSig] Function GetPattern() As Long
    Sub SetPatternScale(ByVal fPatternScale As Single)
    [PreserveSig] Function GetPatternScale() As Single
    Sub SetWidth(ByVal fWidth As Single)
    [PreserveSig] Function GetWidth() As Single
    Sub SetAntialias(ByVal bAntialias As BOOL)
    [PreserveSig] Function GetAntialias() As BOOL
    Sub SetGLLines(ByVal bGLLines As BOOL)
    [PreserveSig] Function GetGLLines() As BOOL
    Sub End()
    Sub OnLostDevice()
    Sub OnResetDevice()
End Interface
 
[InterfaceId("313F1B4B-C7B0-4fa2-9D9D-8D380B64385E")]
Interface ID3DXRenderToEnvMap Extends IUnknown
    Sub GetDevice(ByRef ppDevice As IDirect3DDevice9)
    Sub GetDesc(ByRef pDesc As D3DXRTE_DESC)
    Sub BeginCube(ByVal pCubeTex As IDirect3DTexture9)
    Sub BeginSphere(ByVal pTex As IDirect3DTexture9)
    Sub BeginHemisphere(ByVal pTexZPos As IDirect3DTexture9, ByVal pTexZNeg As IDirect3DTexture9)
    Sub BeginParabolic(ByVal pTexZPos As IDirect3DTexture9, ByVal pTexZNeg As IDirect3DTexture9)
    Sub Face(ByVal Face As D3DCUBEMAP_FACES, ByVal MipFilter As Long)
    Sub End(ByVal MipFilter As Long)
    Sub OnLostDevice()
    Sub OnResetDevice()
End Interface

[InterfaceId("D3914005-8E8C-49D3-9A97-4B402FD89AAB")]
[OleAutomation(False)]
Interface ID3DXInclude Extends stdole.IUnknown
    Sub Open(ByVal IncludeType As D3DXINCLUDE_TYPE, ByVal pFilename As String /* ANSI */, ByVal pParentData As LongPtr, ppData As LongPtr, ByRef pBytes As LongPtr)
    Sub Close(ByVal pData As LongPtr)
End Interface

[InterfaceId("7ED943DD-52E8-40b5-A8D8-76685C406330")]
[OleAutomation(False)]
Interface ID3DXBaseMesh Extends stdole.IUnknown
    Sub DrawSubset(ByVal AttribId As Long)
    [PreserveSig] Function GetNumFaces() As Long
    [PreserveSig] Function GetNumVertices() As Long
    [PreserveSig] Function GetFVF() As Long
    Sub GetDeclaration(ByRef Declaration As D3DVERTEXELEMENT9)
    [PreserveSig] Function GetNumBytesPerVertex() As Long
    [PreserveSig] Function GetOptions() As Long
    Sub GetDevice(ByRef ppDevice As IDirect3DDevice9)
    Sub CloneMeshFVF(ByVal Options As Long, ByVal FVF As Long, ByVal pD3DDevice As IDirect3DDevice9, ByRef ppCloneMesh As ID3DXMesh)
    Sub CloneMesh(ByVal Options As Long, ByRef pDeclaration As D3DVERTEXELEMENT9, ByVal pD3DDevice As IDirect3DDevice9, ByRef ppCloneMesh As ID3DXMesh)
    Sub GetVertexBuffer(ByRef ppVB As IDirect3DVertexBuffer9)
    Sub GetIndexBuffer(ByRef ppIB As IDirect3DIndexBuffer9)
    Sub LockVertexBuffer(ByVal Flags As Long, ByRef ppData As LongPtr)
    Sub UnlockVertexBuffer()
    Sub LockIndexBuffer(ByVal Flags As Long, ByRef ppData As LongPtr)
    Sub UnlockIndexBuffer()
    Sub GetAttributeTable(ByRef pAttribTable As D3DXATTRIBUTERANGE, ByRef pAttribTableSize As Long)
    Sub ConvertPointRepsToAdjacency(ByRef pPRep As Long, ByRef pAdjacency As Long)
    Sub ConvertAdjacencyToPointReps(ByRef pAdjacency As Long, ByRef pPRep As Long)
    Sub GenerateAdjacency(ByVal Epsilon As Single, ByRef pAdjacency As Long)
    Sub UpdateSemantics(ByRef Declaration As D3DVERTEXELEMENT9)
End Interface

[InterfaceId("4020E5C2-1403-4929-883F-E2E849FAC195")]
[OleAutomation(False)]
Interface ID3DXMesh Extends ID3DXBaseMesh
    Sub LockAttributeBuffer(ByVal Flags As Long, ByRef ppData As LongPtr)
    Sub UnlockAttributeBuffer()
    Sub Optimize(ByVal Flags As Long, ByRef pAdjacencyIn As Long, ByRef pAdjacencyOut As Long, ByRef pFaceRemap As Long, ByRef ppVertexRemap As ID3DXBuffer, ByRef ppOptMesh As ID3DXMesh)
    Sub OptimizeInplace(ByVal Flags As Long, ByRef pAdjacencyIn As Long, ByRef pAdjacencyOut As Long, ByRef pFaceRemap As Long, ByRef ppVertexRemap As ID3DXBuffer)
    Sub SetAttributeTable(ByRef pAttribTable As D3DXATTRIBUTERANGE, ByVal cAttribTableSize As Long)
End Interface

[InterfaceId("8875769A-D579-4088-AAEB-534D1AD84E96")]
[OleAutomation(False)]
Interface ID3DXPMesh Extends ID3DXBaseMesh
    Sub ClonePMeshFVF(ByVal Options As Long, ByVal FVF As Long, ByVal pD3DDevice As IDirect3DDevice9, ByRef ppCloneMesh As ID3DXMesh)
    Sub ClonePMesh(ByVal Options As Long, ByRef pDeclaration As D3DVERTEXELEMENT9, ByVal pD3DDevice As IDirect3DDevice9, ByRef ppCloneMesh As ID3DXMesh)
    Sub SetNumFaces(ByVal Faces As Long)
    Sub SetNumVertices(ByVal Vertices As Long)
    [PreserveSig] Function GetMaxFaces() As Long
    [PreserveSig] Function GetMinFaces() As Long
    [PreserveSig] Function GetMaxVertices() As Long
    [PreserveSig] Function GetMinVertices() As Long
    Sub Save(ByVal pStream As IStream, ByRef pMaterials As D3DXMATERIAL, ByRef pEffectInstances As D3DXEFFECTINSTANCE, ByVal NumMaterials As Long)
    Sub Optimize(ByVal Flags As Long, ByRef pAdjacencyOut As Long, ByRef pFaceRemap As Long, ByRef ppVertexRemap As ID3DXBuffer, ByRef ppOptMesh As ID3DXMesh)
    Sub OptimizeBaseLOD(ByVal Flags As Long, ByRef pFaceRemap As Long)
    Sub TrimByFaces(ByVal NewFacesMin As Long, ByVal NewFacesMax As Long, ByRef rgiFaceRemap As Long, ByRef rgiVertRemap As Long)
    Sub TrimByVertices(ByVal NewVerticesMin As Long, ByVal NewVerticesMax As Long, ByRef rgiFaceRemap As Long, ByRef rgiVertRemap As Long)
    Sub GetAdjacency(ByRef pAdjacency As Long)
    Sub GenerateVertexHistory(ByRef pVertexHistory As Long)
End Interface

[InterfaceId("667EA4C7-F1CD-4386-B523-7C0290B83CC5")]
[OleAutomation(False)]
Interface ID3DXSPMesh Extends stdole.IUnknown
    [PreserveSig] Function GetNumFaces() As Long
    [PreserveSig] Function GetNumVertices() As Long
    [PreserveSig] Function GetFVF() As Long
    Sub GetDeclaration(ByRef Declaration As D3DVERTEXELEMENT9)
    [PreserveSig] Function GetOptions() As Long
    Sub GetDevice(ByRef ppDevice As IDirect3DDevice9)
    Sub CloneMeshFVF(ByVal Options As Long, ByVal FVF As Long, ByVal pD3DDevice As IDirect3DDevice9, ByRef pAdjacencyOut As Long, ByRef pVertexRemapOut As Long, ByRef ppCloneMesh As ID3DXMesh)
    Sub CloneMesh(ByVal Options As Long, ByRef pDeclaration As D3DVERTEXELEMENT9, ByVal pD3DDevice As IDirect3DDevice9, ByRef pAdjacencyOut As Long, ByRef pVertexRemapOut As Long, ByRef ppCloneMesh As ID3DXMesh)
    Sub ClonePMeshFVF(ByVal Options As Long, ByVal FVF As Long, ByVal pD3DDevice As IDirect3DDevice9, ByRef pVertexRemapOut As Long, ByRef pErrorsByFace As Single, ByRef ppCloneMesh As ID3DXMesh)
    Sub ClonePMesh(ByVal Options As Long, ByRef pDeclaration As D3DVERTEXELEMENT9, ByVal pD3DDevice As IDirect3DDevice9, ByRef pVertexRemapOut As Long, ByRef pErrorsbyFace As Single, ByRef ppCloneMesh As ID3DXMesh)
    Sub ReduceFaces(ByVal Faces As Long)
    Sub ReduceVertices(ByVal Vertices As Long)
    [PreserveSig] Function GetMaxFaces() As Long
    [PreserveSig] Function GetMaxVertices() As Long
    Sub GetVertexAttributeWeights(ByRef pVertexAttributeWeights As D3DXATTRIBUTEWEIGHTS)
    Sub GetVertexWeights(ByRef pVertexWeights As Single)
End Interface

[InterfaceId("3CE6CC22-DBF2-44F4-894D-F9C34A337139")]
[OleAutomation(False)]
Interface ID3DXPatchMesh Extends IUnknown
    ' Return creation parameters
    [PreserveSig] Function GetNumPatches() As Long
    [PreserveSig] Function GetNumVertices() As Long
    Sub GetDeclaration(ByRef Declaration As D3DVERTEXELEMENT9)
    [PreserveSig] Function GetControlVerticesPerPatch() As Long
    [PreserveSig] Function GetOptions() As Long
    Sub GetDevice(ByRef ppDevice As IDirect3DDevice9)
    Sub GetPatchInfo(ByRef PatchInfo As D3DXPATCHINFO)
    ' Control mesh access
    Sub GetVertexBuffer(ByRef ppVB As IDirect3DVertexBuffer9)
    Sub GetIndexBuffer(ByRef ppIB As IDirect3DIndexBuffer9)
    Sub LockVertexBuffer(ByVal flags As Long, ByRef ppData As LongPtr)
    Sub UnlockVertexBuffer()
    Sub LockIndexBuffer(ByVal flags As Long, ByRef ppData As LongPtr)
    Sub UnlockIndexBuffer()
    Sub LockAttributeBuffer(ByVal flags As Long, ByRef ppData As Long)
    Sub UnlockAttributeBuffer()
    ' Returns size of tessellated mesh given tessellation level
    ' For adaptive tessellation, set Adaptive to TRUE and TessellationLevel to max tessellation
    Sub GetTessSize(ByVal fTessLevel As Single, ByVal Adaptive As Long, ByRef NumTriangles As Long, ByRef NumVertices As Long)
    
    ' Generates adjacency information to optimize tessellation
    Sub GenerateAdjacency(ByVal Tolerance As Single)
    
    ' Creates new patchmesh with specified declaration
    ' Preserves adjacency if current mesh has it
    Sub CloneMesh(ByVal Options As Long, ByRef pDecl As D3DVERTEXELEMENT9, ByRef pMesh As ID3DXPatchMesh)
    
    ' Optimizes patchmesh for efficient tessellation
    ' Must be called again if vertices are changed
    Sub Optimize(ByVal flags As Long)

    ' Gets and sets displacement parameters
    ' Displacement maps can only be 2D textures
    Sub SetDisplaceParam( _
        ByVal Texture As IDirect3DBaseTexture9, _
        ByVal MinFilter As D3DTEXTUREFILTERTYPE, _
        ByVal MagFilter As D3DTEXTUREFILTERTYPE, _
        ByVal MipFilter As D3DTEXTUREFILTERTYPE, _
        ByVal Wrap As D3DTEXTUREADDRESS, _
        ByVal dwLODBias As Long)

    Sub GetDisplaceParam( _
        ByRef Texture As IDirect3DBaseTexture9, _
        ByRef MinFilter As D3DTEXTUREFILTERTYPE, _
        ByRef MagFilter As D3DTEXTUREFILTERTYPE, _
        ByRef MipFilter As D3DTEXTUREFILTERTYPE, _
        ByRef Wrap As D3DTEXTUREADDRESS, _
        ByRef dwLODBias As Long)
        
    ' Performs uniform tessellation based on tessellation level
    ' More efficient if Optimize() was called first
    Sub Tessellate(ByVal fTessLevel As Single, ByVal pMesh As ID3DXMesh)

    ' Performs adaptive tessellation based on Z-based criterion
    ' More efficient if Optimize() was called first
    Sub TessellateAdaptive(ByRef pTrans As D3DXVECTOR4, ByVal dwMaxTessLevel As Long, ByVal dwMinTessLevel As Long, ByVal pMesh As ID3DXMesh)
End Interface


[InterfaceId("11EAA540-F9A6-4D49-AE6A-E19221F70CC4")]
[OleAutomation(False)]
Interface ID3DXSkinInfo Extends IUnknown
    Sub SetBoneInfluence(ByVal bone As Long, ByVal numInfluences As Long, ByRef vertices As Long, ByRef weights As Single)
    Sub SetBoneVertexInfluence(ByVal boneNum As Long, ByVal influenceNum As Long, ByVal weight As Single)
    [PreserveSig] Function GetNumBoneInfluences(ByVal bone As Long) As Long
    Sub GetBoneInfluence(ByVal bone As Long, ByRef vertices As Long, ByRef weights As Single)
    Sub GetBoneVertexInfluence(ByVal boneNum As Long, ByVal influenceNum As Long, ByRef pWeight As Single, ByRef pVertexNum As Long)
    Sub GetMaxVertexInfluences(ByRef maxVertexInfluences As Long)
    [PreserveSig] Function GetNumBones() As Long
    Sub FindBoneVertexInfluenceIndex(ByVal boneNum As Long, ByVal vertexNum As Long, ByRef pInfluenceIndex As Long)
    Sub GetMaxFaceInfluences(ByVal pIB As IDirect3DIndexBuffer9, ByVal NumFaces As Long, ByRef maxFaceInfluences As Long)
    Sub SetMinBoneInfluence(ByVal MinInfl As Single)
    [PreserveSig] Function GetMinBoneInfluence() As Single
    Sub SetBoneName(ByVal Bone As Long, ByVal pName As LongPtr /* ANSI */)
    [PreserveSig] Function GetBoneName(ByVal Bone As Long) As LongPtr /* ANSI */
    Sub SetBoneOffsetMatrix(ByVal Bone As Long, ByRef pBoneTransform As D3DXMATRIX)
    [PreserveSig] Function GetBoneOffsetMatrix(ByVal Bone As Long) As D3DXMATRIX
    Sub Clone(ByRef ppSkinInfo As ID3DXSkinInfo)
    Sub Remap(ByVal NumVertices As Long, ByRef pVertexRemap As Long)
    Sub SetFVF(ByVal FVF As Long)
    Sub SetDeclaration(ByRef pDeclaration As D3DVERTEXELEMENT9)
    [PreserveSig] Function GetFVF() As Long
    Sub GetDeclaration(ByRef Declaration As D3DVERTEXELEMENT9)
    Sub UpdateSkinnedMesh(ByRef pBoneTransforms As D3DXMATRIX, ByRef pBoneInvTransposeTransforms As D3DXMATRIX, ByVal pVerticesSrc As LongPtr, ByVal pVerticesDst As LongPtr)
    Sub ConvertToBlendedMesh(ByVal pMesh As ID3DXMesh, ByVal Options As Long, ByRef pAdjacencyIn As Long, ByRef pAdjacencyOut As Long, ByRef pFaceRemap As Long, ByRef ppVertexRemap As ID3DXBuffer, ByRef pMaxFaceInfl As Long, ByRef pNumBoneCombinations As Long, ByRef ppBoneCombinationTable As ID3DXBuffer, ByRef ppMesh As ID3DXMesh)
    Sub ConvertToIndexedBlendedMesh(ByVal pMesh As ID3DXMesh, ByVal Options As Long, ByVal paletteSize As Long, ByRef pAdjacencyIn As Long, ByRef pAdjacencyOut As Long, ByRef pFaceRemap As Long, ByRef ppVertexRemap As ID3DXBuffer, ByRef pMaxVertexInfl As Long, ByRef pNumBoneCombinations As Long, ByRef ppBoneCombinationTable As ID3DXBuffer, ByRef ppMesh As ID3DXMesh)
End Interface

[InterfaceId("F1827E47-00A8-49CD-908C-9D11955F8728")]
[OleAutomation(False)]
Interface ID3DXPRTBuffer Extends IUnknown
    [PreserveSig] Function GetNumSamples() As Long
    [PreserveSig] Function GetNumCoeffs() As Long
    [PreserveSig] Function GetNumChannels() As Long
    [PreserveSig] Function IsTexture() As BOOL
    [PreserveSig] Function GetWidth() As Long
    [PreserveSig] Function GetHeight() As Long
    Sub Resize(ByVal NewSize As Long)
    Sub LockBuffer(ByVal Start As Long, ByVal NumSamples As Long, ByRef ppData As LongPtr)
    Sub UnlockBuffer()
    Sub ScaleBuffer(ByVal Scale As Single)
    Sub AddBuffer(ByVal pBuffer As ID3DXPRTBuffer)
    Sub AttachGH(ByVal pGH As ID3DXTextureGutterHelper)
    Sub ReleaseGH()
    Sub EvalGH()
    Sub ExtractTexture(ByVal Channel As Long, ByVal StartCoefficient As Long, ByVal NumCoefficients As Long, ByVal pTexture As IDirect3DTexture9)
    Sub ExtractToMesh(ByVal NumCoefficients As Long, ByVal Usage As D3DDECLUSAGE, ByVal UsageIndexStart As Long, ByVal pScene As ID3DXMesh)
End Interface

[InterfaceId("A758D465-FE8D-45AD-9CF0-D01E56266A07")]
[OleAutomation(False)]
Interface ID3DXPRTCompBuffer Extends IUnknown
    [PreserveSig] Function GetNumSamples() As Long
    [PreserveSig] Function GetNumCoeffs() As Long
    [PreserveSig] Function GetNumChannels() As Long
    [PreserveSig] Function IsTexture() As BOOL
    [PreserveSig] Function GetWidth() As Long
    [PreserveSig] Function GetHeight() As Long
    [PreserveSig] Function GetNumClusters() As Long
    [PreserveSig] Function GetNumPCA() As Long
    Sub NormalizeData()
    Sub ExtractBasis(ByVal Cluster As Long, ByRef pClusterBasis As Single)
    Sub ExtractClusterIDs(ByRef pClusterIDs As Long)
    Sub ExtractPCA(ByVal StartPCA As Long, ByVal NumExtract As Long, ByRef pPCACoefficients As Single)
    Sub ExtractTexture(ByVal StartPCA As Long, ByVal NumpPCA As Long, ByVal pTexture As IDirect3DTexture9)
    Sub ExtractToMesh(ByVal NumPCA As Long, ByVal Usage As D3DDECLUSAGE, ByVal UsageIndexStart As Long, ByVal pScene As ID3DXMesh)
End Interface

[InterfaceId("838F01EC-9729-4527-AADB-DF70ADE7FEA9")]
[OleAutomation(False)]
Interface ID3DXTextureGutterHelper
    [PreserveSig]
    Function GetWidth() As Long
    [PreserveSig]
    Function GetHeight() As Long

    Sub ApplyGuttersFloat(ByRef pDataIn As Single, ByVal NumCoeffs As Long, ByVal Width As Long, ByVal Height As Long)
    Sub ApplyGuttersTex(ByVal pTexture As IDirect3DTexture9)
    Sub ApplyGuttersPRT(ByVal pBuffer As ID3DXBuffer)
    Sub ResampleTex(ByVal pTextureIn As IDirect3DTexture9, ByVal pMeshIn As ID3DXMesh, ByVal Usage As D3DDECLUSAGE, ByVal UsageIndex As Long, ByVal pTextureOut As IDirect3DTexture9)
    [PreserveSig]
    Function GetFaceMap(ByRef pFaceData As Long) As Long
    [PreserveSig]
    Function GetBaryMap(ByRef pBaryData As D3DXVECTOR2) As Long
    [PreserveSig]
    Function GetTexelMap(ByRef pTexelData As D3DXVECTOR2) As Long
    [PreserveSig]
    Function GetGutterMap(ByRef pGutterData As Byte) As Long
    Sub SetFaceMap(ByRef pFaceData As Long)
    Sub SetBaryMap(ByRef pBaryData As D3DXVECTOR2)
    Sub SetTexelMap(ByRef pTexelData As D3DXVECTOR2)
    Sub SetGutterMap(ByRef pGutterData As Byte)
End Interface

[InterfaceId("683A4278-CD5F-4D24-90AD-C4E1B6855D53")]
[OleAutomation(False)]
Interface ID3DXPRTEngine
    Sub SetMeshMaterials(ByRef ppMaterials As LongPtr, ByVal NumMeshes As Long, ByVal NumChannels As Long, ByVal bSetAlbedo As BOOL, ByVal fLengthScale As Single)
    Sub SetPerVertexAlbedo(ByRef pDataIn As Any, ByVal NumChannels As Long, ByVal Stride As Long)
    Sub SetPerTexelAlbedo(ByVal pAlbedoTexture As IDirect3DTexture9, ByVal NumChannels As Long, ByVal pGH As ID3DXTextureGutterHelper)
    Sub GetVertexAlbedo(ByRef pVertColors As D3DXCOLOR, ByVal NumVerts As Long)
    Sub SetPerTexelNormal(ByVal pNormalTexture As IDirect3DTexture9)
    Sub ExtractPerVertexAlbedo(ByVal pMesh As ID3DXMesh, ByVal Usage As D3DDECLUSAGE, ByVal NumChannels As Long)
    Sub ResampleBuffer(ByVal pBufferIn As ID3DXBuffer, ByVal pBufferOut As ID3DXBuffer)
    Sub GetAdaptedMesh(ByVal pD3DDevice As IDirect3DDevice9, ByRef pFaceRemap As Long, ByRef pVertRemap As Long, ByRef pfVertWeights As Single, ByRef ppMesh As ID3DXMesh)
    [PreserveSig]
    Function GetNumVerts() As Long
    [PreserveSig]
    Function GetNumFaces() As Long
    Sub SetMinMaxIntersection(ByVal fMin As Single, ByVal fMax As Single)
    Sub RobustMeshRefine(ByVal MinEdgeLength As Single, ByVal MaxSubdiv As Long)
    Sub SetSamplingInfo(ByVal NumRays As Long, ByVal UseSphere As BOOL, ByVal UseCosine As BOOL, ByVal Adaptive As BOOL, ByVal AdaptiveThresh As Single)
    Sub ComputeDirectLightingSH([TypeHint(D3DXDefSHOrderValues)] ByVal SHOrder As Long, ByVal pDataOut As ID3DXBuffer)
    Sub ComputeDirectLightingSHAdaptive(ByVal SHOrder As Long, ByVal AdaptiveThresh As Single, ByVal MinEdgeLength As Single, ByVal MaxSubdiv As Long, ByVal pDataOut As ID3DXBuffer)
    Sub ComputeDirectLightingSHGPU(ByVal pD3DDevice As IDirect3DDevice9, ByVal Flags As D3DXSHGPUSIMOPT, [TypeHint(D3DXDefSHOrderValues)] ByVal SHOrder As Long, ByVal ZBias As Single, ByVal ZAngleBias As Single, ByVal pDataOut As ID3DXBuffer)
    Sub ComputeSS(ByVal pDataIn As ID3DXBuffer, ByVal pDataOut As ID3DXBuffer, ByVal pDataTotal As ID3DXBuffer)
    Sub ComputeSSAdaptive(ByVal pDataIn As ID3DXBuffer, ByVal AdaptiveThresh As Single, ByVal MinEdgeLength As Single, ByVal MaxSubdiv As Long, ByVal pDataOut As ID3DXBuffer, ByVal pDataTotal As ID3DXBuffer)
    Sub ComputeBounce(ByVal pDataIn As ID3DXBuffer, ByVal pDataOut As ID3DXBuffer, ByVal pDataTotal As ID3DXBuffer)
    Sub ComputeBounceAdaptive(ByVal pDataIn As ID3DXBuffer, ByVal AdaptiveThresh As Single, ByVal MinEdgeLength As Single, ByVal MaxSubdiv As Long, ByVal pDataOut As ID3DXBuffer, ByVal pDataTotal As ID3DXBuffer)
    Sub ComputeVolumeSamplesDirectSH(ByVal SHOrderIn As Long, [TypeHint(D3DXDefSHOrderValues)] ByVal SHOrderOut As Long, ByVal NumVolSamples As Long, ByRef pSampleLocs As D3DXVECTOR3, ByVal pDataOut As ID3DXBuffer)
    Sub ComputeVolumeSamples(ByVal pSurfDataIn As ID3DXBuffer, [TypeHint(D3DXDefSHOrderValues)] ByVal SHOrder As Long, ByVal NumVolSamples As Long, ByRef pSampleLocs As D3DXVECTOR3, ByVal pDataOut As ID3DXBuffer)
    Sub ComputeSurfSamplesDirectSH([TypeHint(D3DXDefSHOrderValues)] ByVal SHOrder As Long, ByVal NumSamples As Long, ByRef pSampleLocs As D3DXVECTOR3, ByRef pSampleNorms As D3DXVECTOR3, ByVal pDataOut As ID3DXBuffer)
    Sub ComputeSurfSamplesBounce(ByVal pSurfDataIn As ID3DXBuffer, ByVal NumSamples As Long, ByRef pSampleLocs As D3DXVECTOR3, ByRef pSampleNorms As D3DXVECTOR3, ByVal pDataOut As ID3DXBuffer, ByVal pDataTotal As ID3DXBuffer)
    Sub FreeSSData()
    Sub FreeBounceData()
    Sub ComputeLDPRTCoeffs(ByVal pDataIn As ID3DXBuffer, [TypeHint(D3DXDefSHOrderValues)] ByVal SHOrder As Long, ByRef pNormOut As D3DXVECTOR3, ByVal pDataOut As ID3DXBuffer)
    Sub ScaleMeshChunk(ByVal uMeshChunk As Long, ByVal fScale As Single, ByVal pDataOut As ID3DXBuffer)
    Sub MultiplyAlbedo(ByVal pDataOut As ID3DXBuffer)
    ' #If WDL_NO_DELEGATES Then
    Sub SetCallBack(ByVal pCB As LongPtr, ByVal Frequency As Single, ByVal lpUserContext As LongPtr)
    ' #Else
    ' Sub SetCallBack(ByVal pCB As D3DXSHPRTSIMCB, ByVal Frequency As Single, ByVal lpUserContext As LongPtr)
    ' #End If
    [PreserveSig]
    Function ShadowRayIntersects(ByRef pRayPos As D3DXVECTOR3, ByRef pRayDir As D3DXVECTOR3) As BOOL
    [PreserveSig]
    Function ClosestRayIntersects(ByRef pRayPos As D3DXVECTOR3, ByRef pRayDir As D3DXVECTOR3, ByRef pFaceIndex As Long, ByRef pU As Single, ByRef pV As Single, ByRef pDist As Single) As BOOL
End Interface


[InterfaceId("C7885BA7-F990-4fe7-922D-8515E477DD85")]
[OleAutomation(False)]
Interface ID3DXMatrixStack Extends IUnknown
    [Description("Pops the top of the stack, returns the current top *after* popping the top.")]
    Sub Pop()
    [Description("Pushes the stack by one, duplicating the current matrix.")]
    Sub Push()
    [Description("Loads identity in the current matrix.")]
    Sub LoadIdentity()
    [Description("Loads the given matrix into the current matrix")]
    Sub LoadMatrix(ByRef pM As D3DXMATRIX)
    [Description("Right-Multiplies the given matrix to the current matrix. (transformation is about the current world origin)")]
    Sub MultMatrix(ByRef pM As D3DXMATRIX)
    [Description("Left-Multiplies the given matrix to the current matrix (transformation is about the local origin of the object)")]
    Sub MultMatrixLocal(ByRef pM As D3DXMATRIX)
    [Description("Right multiply the current matrix with the computed rotation matrix, counterclockwise about the given axis with the given angle. (rotation is about the current world origin)")]
    Sub RotateAxis(ByRef pV As D3DXVECTOR3, ByVal Angle As Single)
    [Description("Left multiply the current matrix with the computed rotation matrix, counterclockwise about the given axis with the given angle. (rotation is about the local origin of the object)")]
    Sub RotateAxisLocal(ByRef pV As D3DXVECTOR3, ByVal Angle As Single)
    [Description("Right multiply the current matrix with the computed rotation matrix. All angles are counterclockwise. (rotation is about the current world origin) The rotation is composed of a yaw around the Y axis, a pitch around the X axis, and a roll around the Z axis.")]
    Sub RotateYawPitchRoll(ByVal Yaw As Single, ByVal Pitch As Single, ByVal Roll As Single)
    [Description("Left multiply the current matrix with the computed rotation matrix. All angles are counterclockwise. (rotation is about the local origin of the object) The rotation is composed of a yaw around the Y axis, a pitch around the X axis, and a roll around the Z axis.")]
    Sub RotateYawPitchRollLocal(ByVal Yaw As Single, ByVal Pitch As Single, ByVal Roll As Single)
    [Description("Right multiply the current matrix with the computed scale matrix. (transformation is about the current world origin)")]
    Sub Scale(ByVal x As Single, ByVal y As Single, ByVal z As Single)
    [Description("Left multiply the current matrix with the computed scale matrix. (transformation is about the local origin of the object)")]
    Sub ScaleLocal(ByVal x As Single, ByVal y As Single, ByVal z As Single)
    [Description("Right multiply the current matrix with the computed translation matrix. (transformation is about the current world origin)")]
    Sub Translate(ByVal x As Single, ByVal y As Single, ByVal z As Single)
    [Description("Left multiply the current matrix with the computed translation matrix. (transformation is about the local origin of the object)")]
    Sub TranslateLocal(ByVal x As Single, ByVal y As Single, ByVal z As Single)
    [Description("Obtain the current matrix at the top of the stack. Returns D3DXMATRIX*")]
    [PreserveSig] Function GetTop() As LongPtr ' D3DXMATRIX*
End Interface


































[InterfaceId("CEF08CF9-7B4F-4429-9624-2A690A933201")]
[OleAutomation(False)]
Interface ID3DXFile Extends IUnknown
    Sub CreateEnumObject(pSource As Any, ByVal LoadOptions As D3DXF_FILELOADOPTIONS, ByRef ppEnumObj As ID3DXFileEnumObject)
    Sub CreateSaveObject(pDestination As Any, ByVal SaveOptions As D3DXF_FILESAVEOPTIONS, ByVal Format As D3DXF_FILEFORMAT, ByRef ppSaveObj As ID3DXFileSaveObject)
    Sub RegisterTemplates(pData As Any, ByVal Size As LongPtr)
    Sub RegisterEnumTemplates(ByVal pEnumObj As ID3DXFileEnumObject)
End Interface

[InterfaceId("CEF08CFA-7B4F-4429-9624-2A690A933201")]
[OleAutomation(False)]
Interface ID3DXFileSaveObject Extends IUnknown
    Sub GetFile(ByRef ppFile As ID3DXFile)
    Sub AddDataObject(ByRef rguidTemplate As UUID, ByVal szName As LongPtr /* ANSI */, ByRef pGuid As UUID, ByVal cbSize As LongPtr, pData As Any, ByRef ppDataObj As ID3DXFileSaveData)
    Sub Save()
End Interface

[InterfaceId("CEF08CFB-7B4F-4429-9624-2A690A933201")]
[OleAutomation(False)]
Interface ID3DXFileSaveData Extends IUnknown
    Sub GetSave(ByRef ppSaveObj As ID3DXFileSaveObject)
    Sub GetName(ByVal pName As LongPtr /* ANSI */, ByRef pSize As LongPtr)
    Sub GetId(ByRef pGuid As UUID)
    Sub GetType(ByRef pType As UUID)
    Sub AddDataObject(ByRef rguidTemplate As UUID, ByVal szName As String, ByRef pGuid As UUID, ByVal cbSize As LongPtr, pData As Any, ByRef ppDataObj As ID3DXFileSaveData)
    Sub AddDataReference(ByVal szName As LongPtr /* ANSI */, ByRef pGuid As UUID)
End Interface

[InterfaceId("CEF08CFC-7B4F-4429-9624-2A690A933201")]
[OleAutomation(False)]
Interface ID3DXFileEnumObject Extends IUnknown
    Sub GetFile(ByRef ppFile As ID3DXFile)
    Sub GetChildren(ByRef pCount As LongPtr)
    Sub GetChild(ByVal Index As LongPtr, ByRef ppChild As ID3DXFileData)
    Sub GetDataObjectById(ByRef rguid As UUID, ByRef ppDataObj As ID3DXFileData)
    Sub GetDataObjectByName(ByVal szName As LongPtr /* ANSI */, ByRef ppDataObj As ID3DXFileData)
End Interface

[InterfaceId("CEF08CFD-7B4F-4429-9624-2A690A933201")]
[OleAutomation(False)]
Interface ID3DXFileData Extends IUnknown
    Sub GetEnum(ByRef ppEnumObj As ID3DXFileEnumObject)
    Sub GetName(ByVal pName As String, ByRef pSize As LongPtr)
    Sub GetId(ByRef pGuid As UUID)
    Sub Lock(ByRef pSize As LongPtr, ByRef ppData As LongPtr)
    Sub Unlock()
    Sub GetType(ByRef pType As UUID)
    [PreserveSig] Function IsReference() As BOOL
    Sub GetChildren(ByRef pCount As LongPtr)
    Sub GetChild(ByVal Index As LongPtr, ByRef ppChild As ID3DXFileData)
End Interface

Module wdD3D9

'd3d9types.h
' // maps unsigned 8 bits/channel to D3DCOLOR
' #define D3DCOLOR_ARGB(a,r,g,b) \
    ' ((D3DCOLOR)((((a)&0xff)<<24)|(((r)&0xff)<<16)|(((g)&0xff)<<8)|((b)&0xff)))
' #define D3DCOLOR_RGBA(r,g,b,a) D3DCOLOR_ARGB(a,r,g,b)
' #define D3DCOLOR_XRGB(r,g,b)   D3DCOLOR_ARGB(&Hff,r,g,b)

' #define D3DCOLOR_XYUV(y,u,v)   D3DCOLOR_ARGB(&Hff,y,u,v)
' #define D3DCOLOR_AYUV(a,y,u,v) D3DCOLOR_ARGB(a,y,u,v)

' // maps floating point channels (0.f to 1.f range) to D3DCOLOR
' #define D3DCOLOR_COLORVALUE(r,g,b,a) \
    ' D3DCOLOR_RGBA((DWORD)((r)*255.f),(DWORD)((g)*255.f),(DWORD)((b)*255.f),(DWORD)((a)*255.f))
    
    ' #define D3DTS_WORLDMATRIX(index) (D3DTRANSFORMSTATETYPE)(index + 256)
    ' #define D3DTS_WORLD  D3DTS_WORLDMATRIX(0)
    ' #define D3DTS_WORLD1 D3DTS_WORLDMATRIX(1)
    ' #define D3DTS_WORLD2 D3DTS_WORLDMATRIX(2)
    ' #define D3DTS_WORLD3 D3DTS_WORLDMATRIX(3)    
    
    
Public Type D3DRECT
    x1 As Long
    y1 As Long
    x2 As Long
    y2 As Long
End Type

Public Type D3DVIEWPORT9
    X As Long
    Y As Long '  /* Viewport Top left */
    Width As Long
    Height As Long '  /* Viewport Dimensions */
    MinZ As Single '   /* Min/max of clip Volume */
    MaxZ As Single
End Type
    
Public Const D3DMAXUSERCLIPPLANES = 32
    
Public Enum D3D9ClipPlanes
    D3DCLIPPLANE0 = (1 << 0)
    D3DCLIPPLANE1 = (1 << 1)
    D3DCLIPPLANE2 = (1 << 2)
    D3DCLIPPLANE3 = (1 << 3)
    D3DCLIPPLANE4 = (1 << 4)
    D3DCLIPPLANE5 = (1 << 5)
End Enum
    
Public Enum D3D9ClipStatus
    D3DCS_LEFT = &H00000001
    D3DCS_RIGHT = &H00000002
    D3DCS_TOP = &H00000004
    D3DCS_BOTTOM = &H00000008
    D3DCS_FRONT = &H00000010
    D3DCS_BACK = &H00000020
    D3DCS_PLANE0 = &H00000040
    D3DCS_PLANE1 = &H00000080
    D3DCS_PLANE2 = &H00000100
    D3DCS_PLANE3 = &H00000200
    D3DCS_PLANE4 = &H00000400
    D3DCS_PLANE5 = &H00000800
    D3DCS_ALL = (D3DCS_LEFT Or D3DCS_RIGHT Or D3DCS_TOP Or D3DCS_BOTTOM Or D3DCS_FRONT Or D3DCS_BACK Or D3DCS_PLANE0 Or D3DCS_PLANE1 Or D3DCS_PLANE2 Or D3DCS_PLANE3 Or D3DCS_PLANE4 Or D3DCS_PLANE5)
End Enum

Public Type D3DCLIPSTATUS9
    ClipUnion As D3D9ClipStatus
    ClipIntersection As D3D9ClipStatus
End Type

Public Type D3DMATERIAL9
    Diffuse As D3DCOLORVALUE ' /* Diffuse color RGBA */
    Ambient As D3DCOLORVALUE ' /* Ambient color RGB */
    Specular As D3DCOLORVALUE '  /* Specular 'shininess' */
    Emissive As D3DCOLORVALUE '  /* Emissive color RGB */
    Power As Single '   /* Sharpness if specular highlight */
End Type

Public Enum D3DLIGHTTYPE
    D3DLIGHT_POINT = 1
    D3DLIGHT_SPOT = 2
    D3DLIGHT_DIRECTIONAL = 3
    D3DLIGHT_FORCE_DWORD = &H7fffffff '* force 32-bit size enum  
End Enum

Public Type D3DLIGHT9
    Type As D3DLIGHTTYPE ' /* Type of light source */
    Diffuse As D3DCOLORVALUE ' /* Diffuse color of light */
    Specular As D3DCOLORVALUE ' /* Specular color of light */
    Ambient As D3DCOLORVALUE ' /* Ambient color of light */
    Position As D3DVECTOR '  /* Position in world space */
    Direction As D3DVECTOR '  /* Direction in world space */
    Range As Single '  /* Cutoff range */
    Falloff As Single '  /* Falloff */
    Attenuation0 As Single '  /* Constant attenuation */
    Attenuation1 As Single '  /* Linear attenuation */
    Attenuation2 As Single '  /* Quadratic attenuation */
    Theta As Single '  /* Inner angle of spotlight cone */
    Phi As Single '  /* Outer angle of spotlight cone */
End Type

Public Enum D3DCLEAR
    D3DCLEAR_TARGET = &H00000001 ' Clear target surface */
    D3DCLEAR_ZBUFFER = &H00000002 ' Clear target z buffer */
    D3DCLEAR_STENCIL = &H00000004 ' Clear stencil planes */
End Enum

Public Enum D3DSHADEMODE
    D3DSHADE_FLAT = 1
    D3DSHADE_GOURAUD = 2
    D3DSHADE_PHONG = 3
    D3DSHADE_FORCE_DWORD = &H7fffffff
End Enum

Public Enum D3DFILLMODE
    D3DFILL_POINT = 1
    D3DFILL_WIREFRAME = 2
    D3DFILL_SOLID = 3
    D3DFILL_FORCE_DWORD = &H7fffffff
End Enum

Public Enum D3DBLEND
    D3DBLEND_ZERO = 1
    D3DBLEND_ONE = 2
    D3DBLEND_SRCCOLOR = 3
    D3DBLEND_INVSRCCOLOR = 4
    D3DBLEND_SRCALPHA = 5
    D3DBLEND_INVSRCALPHA = 6
    D3DBLEND_DESTALPHA = 7
    D3DBLEND_INVDESTALPHA = 8
    D3DBLEND_DESTCOLOR = 9
    D3DBLEND_INVDESTCOLOR = 10
    D3DBLEND_SRCALPHASAT = 11
    D3DBLEND_BOTHSRCALPHA = 12
    D3DBLEND_BOTHINVSRCALPHA = 13
    D3DBLEND_BLENDFACTOR = 14
    D3DBLEND_INVBLENDFACTOR = 15
    D3DBLEND_SRCCOLOR2 = 16
    D3DBLEND_INVSRCCOLOR2 = 17
    D3DBLEND_FORCE_DWORD = &H7fffffff
End Enum

Public Enum D3DBLENDOP
    D3DBLENDOP_ADD = 1
    D3DBLENDOP_SUBTRACT = 2
    D3DBLENDOP_REVSUBTRACT = 3
    D3DBLENDOP_MIN = 4
    D3DBLENDOP_MAX = 5
    D3DBLENDOP_FORCE_DWORD = &H7fffffff
End Enum

Public Enum D3DTEXTUREADDRESS
    D3DTADDRESS_WRAP = 1
    D3DTADDRESS_MIRROR = 2
    D3DTADDRESS_CLAMP = 3
    D3DTADDRESS_BORDER = 4
    D3DTADDRESS_MIRRORONCE = 5
    D3DTADDRESS_FORCE_DWORD = &H7fffffff
End Enum

Public Enum D3DCULL
    D3DCULL_NONE = 1
    D3DCULL_CW = 2
    D3DCULL_CCW = 3
    D3DCULL_FORCE_DWORD = &H7fffffff
End Enum

Public Enum D3DCMPFUNC
    D3DCMP_NEVER = 1
    D3DCMP_LESS = 2
    D3DCMP_EQUAL = 3
    D3DCMP_LESSEQUAL = 4
    D3DCMP_GREATER = 5
    D3DCMP_NOTEQUAL = 6
    D3DCMP_GREATEREQUAL = 7
    D3DCMP_ALWAYS = 8
    D3DCMP_FORCE_DWORD = &H7fffffff
End Enum

Public Enum D3DSTENCILOP
    D3DSTENCILOP_KEEP = 1
    D3DSTENCILOP_ZERO = 2
    D3DSTENCILOP_REPLACE = 3
    D3DSTENCILOP_INCRSAT = 4
    D3DSTENCILOP_DECRSAT = 5
    D3DSTENCILOP_INVERT = 6
    D3DSTENCILOP_INCR = 7
    D3DSTENCILOP_DECR = 8
    D3DSTENCILOP_FORCE_DWORD = &H7fffffff
End Enum

Public Enum D3DFOGMODE
    D3DFOG_NONE = 0
    D3DFOG_EXP = 1
    D3DFOG_EXP2 = 2
    D3DFOG_LINEAR = 3
    D3DFOG_FORCE_DWORD = &H7fffffff
End Enum

Public Enum D3DZBUFFERTYPE
    D3DZB_FALSE = 0
    D3DZB_TRUE = 1
    D3DZB_USEW = 2
    D3DZB_FORCE_DWORD = &H7fffffff
End Enum

Public Enum D3DPRIMITIVETYPE
    D3DPT_POINTLIST = 1
    D3DPT_LINELIST = 2
    D3DPT_LINESTRIP = 3
    D3DPT_TRIANGLELIST = 4
    D3DPT_TRIANGLESTRIP = 5
    D3DPT_TRIANGLEFAN = 6
    D3DPT_FORCE_DWORD = &H7fffffff
End Enum

Public Enum D3DTRANSFORMSTATETYPE
    D3DTS_VIEW = 2
    D3DTS_PROJECTION = 3
    D3DTS_TEXTURE0 = 16
    D3DTS_TEXTURE1 = 17
    D3DTS_TEXTURE2 = 18
    D3DTS_TEXTURE3 = 19
    D3DTS_TEXTURE4 = 20
    D3DTS_TEXTURE5 = 21
    D3DTS_TEXTURE6 = 22
    D3DTS_TEXTURE7 = 23
    D3DTS_FORCE_DWORD = &H7fffffff
    D3DTS_WORLD = 0 + 256 'D3DTS_WORLDMATRIX(0)
    D3DTS_WORLD1 = 1 + 256 'D3DTS_WORLDMATRIX(1)
    D3DTS_WORLD2 = 2 + 256 'D3DTS_WORLDMATRIX(2)
    D3DTS_WORLD3 = 3 + 256 'D3DTS_WORLDMATRIX(3)
End Enum

Public Enum D3DRENDERSTATETYPE
    D3DRS_ZENABLE = 7 ' /* D3DZBUFFERTYPE (or TRUE/FALSE for legacy) */
    D3DRS_FILLMODE = 8 ' /* D3DFILLMODE */
    D3DRS_SHADEMODE = 9 ' /* D3DSHADEMODE */
    D3DRS_ZWRITEENABLE = 14 ' /* TRUE to enable z writes */
    D3DRS_ALPHATESTENABLE = 15 ' /* TRUE to enable alpha tests */
    D3DRS_LASTPIXEL = 16 ' /* TRUE for last-pixel on lines */
    D3DRS_SRCBLEND = 19 ' /* D3DBLEND */
    D3DRS_DESTBLEND = 20 ' /* D3DBLEND */
    D3DRS_CULLMODE = 22 ' /* D3DCULL */
    D3DRS_ZFUNC = 23 ' /* D3DCMPFUNC */
    D3DRS_ALPHAREF = 24 ' /* D3DFIXED */
    D3DRS_ALPHAFUNC = 25 ' /* D3DCMPFUNC */
    D3DRS_DITHERENABLE = 26 ' /* TRUE to enable dithering */
    D3DRS_ALPHABLENDENABLE = 27 ' /* TRUE to enable alpha blending */
    D3DRS_FOGENABLE = 28 ' /* TRUE to enable fog blending */
    D3DRS_SPECULARENABLE = 29 ' /* TRUE to enable specular */
    D3DRS_FOGCOLOR = 34 ' /* D3DCOLOR */
    D3DRS_FOGTABLEMODE = 35 ' /* D3DFOGMODE */
    D3DRS_FOGSTART = 36 ' /* Fog start (for both vertex and pixel fog) */
    D3DRS_FOGEND = 37 ' /* Fog end      */
    D3DRS_FOGDENSITY = 38 ' /* Fog density  */
    D3DRS_RANGEFOGENABLE = 48 ' /* Enables range-based fog */
    D3DRS_STENCILENABLE = 52 ' /* BOOL enable/disable stenciling */
    D3DRS_STENCILFAIL = 53 ' /* D3DSTENCILOP to do if stencil test fails */
    D3DRS_STENCILZFAIL = 54 ' /* D3DSTENCILOP to do if stencil test passes and Z test fails */
    D3DRS_STENCILPASS = 55 ' /* D3DSTENCILOP to do if both stencil and Z tests pass */
    D3DRS_STENCILFUNC = 56 ' /* D3DCMPFUNC fn.  Stencil Test passes if ((ref & mask) stencilfn (stencil & mask)) is true */
    D3DRS_STENCILREF = 57 ' /* Reference value used in stencil test */
    D3DRS_STENCILMASK = 58 ' /* Mask value used in stencil test */
    D3DRS_STENCILWRITEMASK = 59 ' /* Write mask applied to values written to stencil buffer */
    D3DRS_TEXTUREFACTOR = 60 ' /* D3DCOLOR used for multi-texture blend */
    D3DRS_WRAP0 = 128 ' /* wrap for 1st texture coord. set */
    D3DRS_WRAP1 = 129 ' /* wrap for 2nd texture coord. set */
    D3DRS_WRAP2 = 130 ' /* wrap for 3rd texture coord. set */
    D3DRS_WRAP3 = 131 ' /* wrap for 4th texture coord. set */
    D3DRS_WRAP4 = 132 ' /* wrap for 5th texture coord. set */
    D3DRS_WRAP5 = 133 ' /* wrap for 6th texture coord. set */
    D3DRS_WRAP6 = 134 ' /* wrap for 7th texture coord. set */
    D3DRS_WRAP7 = 135 ' /* wrap for 8th texture coord. set */
    D3DRS_CLIPPING = 136
    D3DRS_LIGHTING = 137
    D3DRS_AMBIENT = 139
    D3DRS_FOGVERTEXMODE = 140
    D3DRS_COLORVERTEX = 141
    D3DRS_LOCALVIEWER = 142
    D3DRS_NORMALIZENORMALS = 143
    D3DRS_DIFFUSEMATERIALSOURCE = 145
    D3DRS_SPECULARMATERIALSOURCE = 146
    D3DRS_AMBIENTMATERIALSOURCE = 147
    D3DRS_EMISSIVEMATERIALSOURCE = 148
    D3DRS_VERTEXBLEND = 151
    D3DRS_CLIPPLANEENABLE = 152
    D3DRS_POINTSIZE = 154 ' /* float point size */
    D3DRS_POINTSIZE_MIN = 155 ' /* float point size min threshold */
    D3DRS_POINTSPRITEENABLE = 156 ' /* BOOL point texture coord control */
    D3DRS_POINTSCALEENABLE = 157 ' /* BOOL point size scale enable */
    D3DRS_POINTSCALE_A = 158 ' /* float point attenuation A value */
    D3DRS_POINTSCALE_B = 159 ' /* float point attenuation B value */
    D3DRS_POINTSCALE_C = 160 ' /* float point attenuation C value */
    D3DRS_MULTISAMPLEANTIALIAS = 161 ' BOOL - set to do FSAA with multisample buffer
    D3DRS_MULTISAMPLEMASK = 162 ' DWORD - per-sample enable/disable
    D3DRS_PATCHEDGESTYLE = 163 ' Sets whether patch edges will use float style tessellation
    D3DRS_DEBUGMONITORTOKEN = 165 ' DEBUG ONLY - token to debug monitor
    D3DRS_POINTSIZE_MAX = 166 ' /* float point size max threshold */
    D3DRS_INDEXEDVERTEXBLENDENABLE = 167
    D3DRS_COLORWRITEENABLE = 168 ' per-channel write enable
    D3DRS_TWEENFACTOR = 170 ' float tween factor
    D3DRS_BLENDOP = 171 ' D3DBLENDOP setting
    D3DRS_POSITIONDEGREE = 172 ' NPatch position interpolation degree. D3DDEGREE_LINEAR or D3DDEGREE_CUBIC (default)
    D3DRS_NORMALDEGREE = 173 ' NPatch normal interpolation degree. D3DDEGREE_LINEAR (default) or D3DDEGREE_QUADRATIC
    D3DRS_SCISSORTESTENABLE = 174
    D3DRS_SLOPESCALEDEPTHBIAS = 175
    D3DRS_ANTIALIASEDLINEENABLE = 176
    D3DRS_MINTESSELLATIONLEVEL = 178
    D3DRS_MAXTESSELLATIONLEVEL = 179
    D3DRS_ADAPTIVETESS_X = 180
    D3DRS_ADAPTIVETESS_Y = 181
    D3DRS_ADAPTIVETESS_Z = 182
    D3DRS_ADAPTIVETESS_W = 183
    D3DRS_ENABLEADAPTIVETESSELLATION = 184
    D3DRS_TWOSIDEDSTENCILMODE = 185 ' /* BOOL enable/disable 2 sided stenciling */
    D3DRS_CCW_STENCILFAIL = 186 ' /* D3DSTENCILOP to do if ccw stencil test fails */
    D3DRS_CCW_STENCILZFAIL = 187 ' /* D3DSTENCILOP to do if ccw stencil test passes and Z test fails */
    D3DRS_CCW_STENCILPASS = 188 ' /* D3DSTENCILOP to do if both ccw stencil and Z tests pass */
    D3DRS_CCW_STENCILFUNC = 189 ' /* D3DCMPFUNC fn.  ccw Stencil Test passes if ((ref & mask) stencilfn (stencil & mask)) is true */
    D3DRS_COLORWRITEENABLE1 = 190 ' /* Additional ColorWriteEnables for the devices that support D3DPMISCCAPS_INDEPENDENTWRITEMASKS */
    D3DRS_COLORWRITEENABLE2 = 191 ' /* Additional ColorWriteEnables for the devices that support D3DPMISCCAPS_INDEPENDENTWRITEMASKS */
    D3DRS_COLORWRITEENABLE3 = 192 ' /* Additional ColorWriteEnables for the devices that support D3DPMISCCAPS_INDEPENDENTWRITEMASKS */
    D3DRS_BLENDFACTOR = 193 ' /* D3DCOLOR used for a constant blend factor during alpha blending for devices that support D3DPBLENDCAPS_BLENDFACTOR */
    D3DRS_SRGBWRITEENABLE = 194 ' /* Enable rendertarget writes to be DE-linearized to SRGB (for formats that expose D3DUSAGE_QUERY_SRGBWRITE) */
    D3DRS_DEPTHBIAS = 195
    D3DRS_WRAP8 = 198 ' /* Additional wrap states for vs_3_0+ attributes with D3DDECLUSAGE_TEXCOORD */
    D3DRS_WRAP9 = 199
    D3DRS_WRAP10 = 200
    D3DRS_WRAP11 = 201
    D3DRS_WRAP12 = 202
    D3DRS_WRAP13 = 203
    D3DRS_WRAP14 = 204
    D3DRS_WRAP15 = 205
    D3DRS_SEPARATEALPHABLENDENABLE = 206 ' /* TRUE to enable a separate blending function for the alpha channel */
    D3DRS_SRCBLENDALPHA = 207 ' /* SRC blend factor for the alpha channel when D3DRS_SEPARATEDESTALPHAENABLE is TRUE */
    D3DRS_DESTBLENDALPHA = 208 ' /* DST blend factor for the alpha channel when D3DRS_SEPARATEDESTALPHAENABLE is TRUE */
    D3DRS_BLENDOPALPHA = 209 ' /* Blending operation for the alpha channel when D3DRS_SEPARATEDESTALPHAENABLE is TRUE */
    D3DRS_FORCE_DWORD = &H7fffffff ' /* force 32-bit size enum */
End Enum

Public Const D3D_MAX_SIMULTANEOUS_RENDERTARGETS As Long = 4

Public Enum D3DMATERIALCOLORSOURCE
    D3DMCS_MATERIAL = 0 ' Color from material is used
    D3DMCS_COLOR1 = 1 ' Diffuse vertex color is used
    D3DMCS_COLOR2 = 2 ' Specular vertex color is used
    D3DMCS_FORCE_DWORD = &H7fffffff ' force 32-bit size enum
End Enum

Public Const D3DRENDERSTATE_WRAPBIAS As Long = 128

Public Enum D3D9WrapRenderStates
    D3DWRAP_U = &H00000001
    D3DWRAP_V = &H00000002
    D3DWRAP_W = &H00000004
End Enum

Public Enum D3D9WrapCoords
    D3DWRAPCOORD_0 = &H00000001 ' same as D3DWRAP_U
    D3DWRAPCOORD_1 = &H00000002 ' same as D3DWRAP_V
    D3DWRAPCOORD_2 = &H00000004 ' same as D3DWRAP_W
    D3DWRAPCOORD_3 = &H00000008
End Enum

Public Enum D3D9ColorWriteColors
    D3DCOLORWRITEENABLE_RED = (1 << 0)
    D3DCOLORWRITEENABLE_GREEN = (1 << 1)
    D3DCOLORWRITEENABLE_BLUE = (1 << 2)
    D3DCOLORWRITEENABLE_ALPHA = (1 << 3)
End Enum

Public Enum D3DTEXTURESTAGESTATETYPE
    D3DTSS_COLOROP = 1 ' /* D3DTEXTUREOP - per-stage blending controls for color channels */
    D3DTSS_COLORARG1 = 2 ' /* D3DTA_* (texture arg) */
    D3DTSS_COLORARG2 = 3 ' /* D3DTA_* (texture arg) */
    D3DTSS_ALPHAOP = 4 ' /* D3DTEXTUREOP - per-stage blending controls for alpha channel */
    D3DTSS_ALPHAARG1 = 5 ' /* D3DTA_* (texture arg) */
    D3DTSS_ALPHAARG2 = 6 ' /* D3DTA_* (texture arg) */
    D3DTSS_BUMPENVMAT00 = 7 ' /* float (bump mapping matrix) */
    D3DTSS_BUMPENVMAT01 = 8 ' /* float (bump mapping matrix) */
    D3DTSS_BUMPENVMAT10 = 9 ' /* float (bump mapping matrix) */
    D3DTSS_BUMPENVMAT11 = 10 ' /* float (bump mapping matrix) */
    D3DTSS_TEXCOORDINDEX = 11 ' /* identifies which set of texture coordinates index this texture */
    D3DTSS_BUMPENVLSCALE = 22 ' /* float scale for bump map luminance */
    D3DTSS_BUMPENVLOFFSET = 23 ' /* float offset for bump map luminance */
    D3DTSS_TEXTURETRANSFORMFLAGS = 24 ' /* D3DTEXTURETRANSFORMFLAGS controls texture transform */
    D3DTSS_COLORARG0 = 26 ' /* D3DTA_* third arg for triadic ops */
    D3DTSS_ALPHAARG0 = 27 ' /* D3DTA_* third arg for triadic ops */
    D3DTSS_RESULTARG = 28 ' /* D3DTA_* arg for result (CURRENT or TEMP) */
    D3DTSS_CONSTANT = 32 ' /* Per-stage constant D3DTA_CONSTANT */
    D3DTSS_FORCE_DWORD = &H7fffffff ' /* force 32-bit size enum */
End Enum

Public Enum D3DSAMPLERSTATETYPE
    D3DSAMP_ADDRESSU = 1 ' /* D3DTEXTUREADDRESS for U coordinate */
    D3DSAMP_ADDRESSV = 2 ' /* D3DTEXTUREADDRESS for V coordinate */
    D3DSAMP_ADDRESSW = 3 ' /* D3DTEXTUREADDRESS for W coordinate */
    D3DSAMP_BORDERCOLOR = 4 ' /* D3DCOLOR */
    D3DSAMP_MAGFILTER = 5 ' /* D3DTEXTUREFILTER filter to use for magnification */
    D3DSAMP_MINFILTER = 6 ' /* D3DTEXTUREFILTER filter to use for minification */
    D3DSAMP_MIPFILTER = 7 ' /* D3DTEXTUREFILTER filter to use between mipmaps during minification */
    D3DSAMP_MIPMAPLODBIAS = 8 ' /* float Mipmap LOD bias */
    D3DSAMP_MAXMIPLEVEL = 9 ' /* DWORD 0..(n-1) LOD index of largest map to use (0 == largest) */
    D3DSAMP_MAXANISOTROPY = 10 ' /* DWORD maximum anisotropy */
    D3DSAMP_SRGBTEXTURE = 11 /* Default = 0 (which means Gamma 1.0,
                                   no correction required.) else correct for
                                   Gamma = 2.2 */
    D3DSAMP_ELEMENTINDEX = 12 /* When multi-element texture is assigned to sampler, this
                                    indicates which element index to use.  Default = 0.  */
    D3DSAMP_DMAPOFFSET = 13 /* Offset in vertices in the pre-sampled displacement map.
                                    Only valid for D3DDMAPSAMPLER sampler  */
    D3DSAMP_FORCE_DWORD = &H7fffffff ' /* force 32-bit size enum */
End Enum

Public Const D3DDMAPSAMPLER  = 256
' Samplers used in vertex shaders
Public Const D3DVERTEXTEXTURESAMPLER0  = (D3DDMAPSAMPLER + 1)
Public Const D3DVERTEXTEXTURESAMPLER1  = (D3DDMAPSAMPLER + 2)
Public Const D3DVERTEXTEXTURESAMPLER2  = (D3DDMAPSAMPLER + 3)
Public Const D3DVERTEXTEXTURESAMPLER3  = (D3DDMAPSAMPLER + 4)

Public Enum D3D9TextCoordIndexFlags
    D3DTSS_TCI_PASSTHRU = &H00000000
    D3DTSS_TCI_CAMERASPACENORMAL = &H00010000
    D3DTSS_TCI_CAMERASPACEPOSITION = &H00020000
    D3DTSS_TCI_CAMERASPACEREFLECTIONVECTOR = &H00030000
    D3DTSS_TCI_SPHEREMAP = &H00040000
End Enum

Public Enum D3DTEXTUREOP
    '  Control
    D3DTOP_DISABLE = 1 ' disables stage
    D3DTOP_SELECTARG1 = 2 ' the default
    D3DTOP_SELECTARG2 = 3
    '  Modulate
    D3DTOP_MODULATE = 4 ' multiply args together
    D3DTOP_MODULATE2X = 5 ' multiply and  1 bit
    D3DTOP_MODULATE4X = 6 ' multiply and  2 bits
    '  Add
    D3DTOP_ADD = 7 ' add arguments together
    D3DTOP_ADDSIGNED = 8 ' add with -0.5 bias
    D3DTOP_ADDSIGNED2X = 9 ' as above but left  1 bit
    D3DTOP_SUBTRACT = 10 ' Arg1 - Arg2, with no saturation
    D3DTOP_ADDSMOOTH = 11 ' add 2 args, subtract product
    '  Arg1 + Arg2 - Arg1*Arg2
    '  = Arg1 + (1-Arg1)*Arg2
    '  Linear alpha blend: Arg1*(Alpha) + Arg2*(1-Alpha)
    D3DTOP_BLENDDIFFUSEALPHA = 12 ' iterated alpha
    D3DTOP_BLENDTEXTUREALPHA = 13 ' texture alpha
    D3DTOP_BLENDFACTORALPHA = 14 ' alpha from D3DRS_TEXTUREFACTOR
    '  Linear alpha blend with pre-multiplied arg1 input: Arg1 + Arg2*(1-Alpha)
    D3DTOP_BLENDTEXTUREALPHAPM = 15 ' texture alpha
    D3DTOP_BLENDCURRENTALPHA = 16 ' by alpha of current color
    '  Specular mapping
    D3DTOP_PREMODULATE = 17 ' modulate with next texture before use
    D3DTOP_MODULATEALPHA_ADDCOLOR = 18 ' Arg1.RGB + Arg1.A*Arg2.RGB
    '  COLOROP only
    D3DTOP_MODULATECOLOR_ADDALPHA = 19 ' Arg1.RGB*Arg2.RGB + Arg1.A
    '  COLOROP only
    D3DTOP_MODULATEINVALPHA_ADDCOLOR = 20 ' (1-Arg1.A)*Arg2.RGB + Arg1.RGB
    '  COLOROP only
    D3DTOP_MODULATEINVCOLOR_ADDALPHA = 21 ' (1-Arg1.RGB)*Arg2.RGB + Arg1.A
    '  COLOROP only
    '  Bump mapping
    D3DTOP_BUMPENVMAP = 22 ' per pixel env map perturbation
    D3DTOP_BUMPENVMAPLUMINANCE = 23 ' with luminance channel
    '  This can do either diffuse or specular bump mapping with correct input.
    '  Performs the function (Arg1.R*Arg2.R + Arg1.G*Arg2.G + Arg1.B*Arg2.B)
    '  where each component has been scaled and offset to make it signed.
    '  The result is replicated into all four (including alpha) channels.
    '  This is a valid COLOROP only.
    D3DTOP_DOTPRODUCT3 = 24
    '  Triadic ops
    D3DTOP_MULTIPLYADD = 25 ' Arg0 + Arg1*Arg2
    D3DTOP_LERP = 26 ' (Arg0)*Arg1 + (1-Arg0)*Arg2
    D3DTOP_FORCE_DWORD = &H7fffffff
End Enum

Public Enum D3D9TextureBlendOpFlags
    D3DTA_SELECTMASK = &H0000000f ' mask for arg selector
    D3DTA_DIFFUSE = &H00000000 ' select diffuse color (read only)
    D3DTA_CURRENT = &H00000001 ' select stage destination register (read/write)
    D3DTA_TEXTURE = &H00000002 ' select texture color (read only)
    D3DTA_TFACTOR = &H00000003 ' select D3DRS_TEXTUREFACTOR (read only)
    D3DTA_SPECULAR = &H00000004 ' select specular color (read only)
    D3DTA_TEMP = &H00000005 ' select temporary register color (read/write)
    D3DTA_CONSTANT = &H00000006 ' select texture stage constant
    D3DTA_COMPLEMENT = &H00000010 ' take 1.0 - x (read modifier)
    D3DTA_ALPHAREPLICATE = &H00000020 ' replicate alpha to color components (read modifier)
End Enum

Public Enum D3DTEXTUREFILTERTYPE
    D3DTEXF_NONE = 0 ' filtering disabled (valid for mip filter only)
    D3DTEXF_POINT = 1 ' nearest
    D3DTEXF_LINEAR = 2 ' linear interpolation
    D3DTEXF_ANISOTROPIC = 3 ' anisotropic
    D3DTEXF_PYRAMIDALQUAD = 6 ' 4-sample tent
    D3DTEXF_GAUSSIANQUAD = 7 ' 4-sample gaussian
    ' #if !defined(D3D_DISABLE_9EX)
    D3DTEXF_CONVOLUTIONMONO = 8 ' Convolution filter for monochrome textures
    ' #endif // !D3D_DISABLE_9EX
    D3DTEXF_FORCE_DWORD = &H7fffffff ' force 32-bit size enum
End Enum

Public Enum D3D9ProcessVerticiesFlags
    D3DPV_DONOTCOPYDATA = (1 << 0)
End Enum

Public Enum D3DFVF
    D3DFVF_RESERVED0 = &H001
    D3DFVF_POSITION_MASK = &H400E
    D3DFVF_XYZ = &H002
    D3DFVF_XYZRHW = &H004
    D3DFVF_XYZB1 = &H006
    D3DFVF_XYZB2 = &H008
    D3DFVF_XYZB3 = &H00a
    D3DFVF_XYZB4 = &H00c
    D3DFVF_XYZB5 = &H00e
    D3DFVF_XYZW = &H4002
    D3DFVF_NORMAL = &H010
    D3DFVF_PSIZE = &H020
    D3DFVF_DIFFUSE = &H040
    D3DFVF_SPECULAR = &H080
    D3DFVF_TEXCOUNT_MASK = &Hf00
    D3DFVF_TEXCOUNT_SHIFT = 8
    D3DFVF_TEX0 = &H000
    D3DFVF_TEX1 = &H100
    D3DFVF_TEX2 = &H200
    D3DFVF_TEX3 = &H300
    D3DFVF_TEX4 = &H400
    D3DFVF_TEX5 = &H500
    D3DFVF_TEX6 = &H600
    D3DFVF_TEX7 = &H700
    D3DFVF_TEX8 = &H800
    D3DFVF_LASTBETA_UBYTE4 = &H1000
    D3DFVF_LASTBETA_D3DCOLOR = &H8000&
    D3DFVF_RESERVED2 = &H6000 ' 2 reserved bits
End Enum

Public Enum D3DDECLUSAGE
    D3DDECLUSAGE_POSITION = 0
    D3DDECLUSAGE_BLENDWEIGHT = 1 ' 1
    D3DDECLUSAGE_BLENDINDICES = 2 ' 2
    D3DDECLUSAGE_NORMAL = 3 ' 3
    D3DDECLUSAGE_PSIZE = 4 ' 4
    D3DDECLUSAGE_TEXCOORD = 5 ' 5
    D3DDECLUSAGE_TANGENT = 6 ' 6
    D3DDECLUSAGE_BINORMAL = 7 ' 7
    D3DDECLUSAGE_TESSFACTOR = 8 ' 8
    D3DDECLUSAGE_POSITIONT = 9 ' 9
    D3DDECLUSAGE_COLOR = 10 ' 10
    D3DDECLUSAGE_FOG = 11 ' 11
    D3DDECLUSAGE_DEPTH = 12 ' 12
    D3DDECLUSAGE_SAMPLE = 13 ' 13
End Enum

Public Const MAXD3DDECLUSAGE  = D3DDECLUSAGE_SAMPLE
Public Const MAXD3DDECLUSAGEINDEX  = 15
Public Const MAXD3DDECLLENGTH  = 64  ' does not include "end" marker vertex element
Public Const MAXD3DDECLMETHOD  = D3DDECLMETHOD_LOOKUPPRESAMPLED


Public Enum D3DDECLMETHOD
    D3DDECLMETHOD_DEFAULT = 0
    D3DDECLMETHOD_PARTIALU = 1
    D3DDECLMETHOD_PARTIALV = 2
    D3DDECLMETHOD_CROSSUV = 3 ' Normal
    D3DDECLMETHOD_UV = 4
    D3DDECLMETHOD_LOOKUP = 5 ' Lookup a displacement map
    D3DDECLMETHOD_LOOKUPPRESAMPLED = 6 ' Lookup a pre-sampled displacement map
End Enum

Public Enum D3DDECLTYPE
    D3DDECLTYPE_FLOAT1 = 0 ' 1D float expanded to (value, 0., 0., 1.)
    D3DDECLTYPE_FLOAT2 = 1 ' 2D float expanded to (value, value, 0., 1.)
    D3DDECLTYPE_FLOAT3 = 2 ' 3D float expanded to (value, value, value, 1.)
    D3DDECLTYPE_FLOAT4 = 3 ' 4D float
    D3DDECLTYPE_D3DCOLOR = 4 ' 4D packed unsigned bytes mapped to 0. to 1. range
    '  Input is in D3DCOLOR format (ARGB) expanded to (R, G, B, A)
    D3DDECLTYPE_UBYTE4 = 5 ' 4D unsigned byte
    D3DDECLTYPE_SHORT2 = 6 ' 2D signed short expanded to (value, value, 0., 1.)
    D3DDECLTYPE_SHORT4 = 7 ' 4D signed short
    '  The following types are valid only with vertex shaders >= 2.0
    D3DDECLTYPE_UBYTE4N = 8 ' Each of 4 bytes is normalized by dividing to 255.0
    D3DDECLTYPE_SHORT2N = 9 ' 2D signed short normalized (v[0]/32767.0,v[1]/32767.0,0,1)
    D3DDECLTYPE_SHORT4N = 10 ' 4D signed short normalized (v[0]/32767.0,v[1]/32767.0,v[2]/32767.0,v[3]/32767.0)
    D3DDECLTYPE_USHORT2N = 11 ' 2D unsigned short normalized (v[0]/65535.0,v[1]/65535.0,0,1)
    D3DDECLTYPE_USHORT4N = 12 ' 4D unsigned short normalized (v[0]/65535.0,v[1]/65535.0,v[2]/65535.0,v[3]/65535.0)
    D3DDECLTYPE_UDEC3 = 13 ' 3D unsigned 10 10 10 format expanded to (value, value, value, 1)
    D3DDECLTYPE_DEC3N = 14 ' 3D signed 10 10 10 format normalized and expanded to (v[0]/511.0, v[1]/511.0, v[2]/511.0, 1)
    D3DDECLTYPE_FLOAT16_2 = 15 ' Two 16-bit floating point values, expanded to (value, value, 0, 1)
    D3DDECLTYPE_FLOAT16_4 = 16 ' Four 16-bit floating point values
    D3DDECLTYPE_UNUSED = 17 ' When the type field in a decl is unused.
End Enum

Public Const MAXD3DDECLTYPE = D3DDECLTYPE_UNUSED

Public Type D3DVERTEXELEMENT9
    Stream As Integer ' Stream index
    Offset As Integer ' Offset in the stream in bytes
    Type As Byte ' Data type
    Method As Byte ' Processing method
    Usage As Byte ' Semantics
    UsageIndex As Byte ' Semantic index
End Type

Public Const D3DDP_MAXTEXCOORD = 8

Public Enum D3D9StreamSrcFrqSettings
    D3DSTREAMSOURCE_INDEXEDDATA = (1& << 30)
    D3DSTREAMSOURCE_INSTANCEDATA = (2& << 30)
End Enum

Public Const D3DSI_OPCODE_MASK  = &H0000FFFF
Public Const D3DSI_INSTLENGTH_MASK  = &H0F000000
Public Const D3DSI_INSTLENGTH_SHIFT  = 24

Public Enum D3DSHADER_INSTRUCTION_OPCODE_TYPE
        D3DSIO_NOP = 0
        D3DSIO_MOV
        D3DSIO_ADD
        D3DSIO_SUB
        D3DSIO_MAD
        D3DSIO_MUL
        D3DSIO_RCP
        D3DSIO_RSQ
        D3DSIO_DP3
        D3DSIO_DP4
        D3DSIO_MIN
        D3DSIO_MAX
        D3DSIO_SLT
        D3DSIO_SGE
        D3DSIO_EXP
        D3DSIO_LOG
        D3DSIO_LIT
        D3DSIO_DST
        D3DSIO_LRP
        D3DSIO_FRC
        D3DSIO_M4x4
        D3DSIO_M4x3
        D3DSIO_M3x4
        D3DSIO_M3x3
        D3DSIO_M3x2
        D3DSIO_CALL
        D3DSIO_CALLNZ
        D3DSIO_LOOP
        D3DSIO_RET
        D3DSIO_ENDLOOP
        D3DSIO_LABEL
        D3DSIO_DCL
        D3DSIO_POW
        D3DSIO_CRS
        D3DSIO_SGN
        D3DSIO_ABS
        D3DSIO_NRM
        D3DSIO_SINCOS
        D3DSIO_REP
        D3DSIO_ENDREP
        D3DSIO_IF
        D3DSIO_IFC
        D3DSIO_ELSE
        D3DSIO_ENDIF
        D3DSIO_BREAK
        D3DSIO_BREAKC
        D3DSIO_MOVA
        D3DSIO_DEFB
        D3DSIO_DEFI

        D3DSIO_TEXCOORD = 64
        D3DSIO_TEXKILL
        D3DSIO_TEX
        D3DSIO_TEXBEM
        D3DSIO_TEXBEML
        D3DSIO_TEXREG2AR
        D3DSIO_TEXREG2GB
        D3DSIO_TEXM3x2PAD
        D3DSIO_TEXM3x2TEX
        D3DSIO_TEXM3x3PAD
        D3DSIO_TEXM3x3TEX
        D3DSIO_RESERVED0
        D3DSIO_TEXM3x3SPEC
        D3DSIO_TEXM3x3VSPEC
        D3DSIO_EXPP
        D3DSIO_LOGP
        D3DSIO_CND
        D3DSIO_DEF
        D3DSIO_TEXREG2RGB
        D3DSIO_TEXDP3TEX
        D3DSIO_TEXM3x2DEPTH
        D3DSIO_TEXDP3
        D3DSIO_TEXM3x3
        D3DSIO_TEXDEPTH
        D3DSIO_CMP
        D3DSIO_BEM
        D3DSIO_DP2ADD
        D3DSIO_DSX
        D3DSIO_DSY
        D3DSIO_TEXLDD
        D3DSIO_SETP
        D3DSIO_TEXLDL
        D3DSIO_BREAKP

        D3DSIO_PHASE = &HFFFD&
        D3DSIO_COMMENT = &HFFFE&
        D3DSIO_END = &HFFFF&

        D3DSIO_FORCE_DWORD = &H7fffffff ' force 32-bit size enum

End Enum

Public Const D3DSI_COISSUE  = &H40000000
' ---------------------------------------------------------------------
'  Opcode specific controls
Public Const D3DSP_OPCODESPECIFICCONTROL_MASK  = &H00ff0000
Public Const D3DSP_OPCODESPECIFICCONTROL_SHIFT  = 16
'  ps_2_0 texld controls
Public Const D3DSI_TEXLD_PROJECT  = (&H01 << D3DSP_OPCODESPECIFICCONTROL_SHIFT)
Public Const D3DSI_TEXLD_BIAS  = (&H02 << D3DSP_OPCODESPECIFICCONTROL_SHIFT)

Public Enum D3DSHADER_COMPARISON
    '  < = >
    D3DSPC_RESERVED0 = 0 ' 0 0 0
    D3DSPC_GT = 1 ' 0 0 1
    D3DSPC_EQ = 2 ' 0 1 0
    D3DSPC_GE = 3 ' 0 1 1
    D3DSPC_LT = 4 ' 1 0 0
    D3DSPC_NE = 5 ' 1 0 1
    D3DSPC_LE = 6 ' 1 1 0
    D3DSPC_RESERVED1 = 7 ' 1 1 1
End Enum

Public Const D3DSHADER_COMPARISON_SHIFT  = D3DSP_OPCODESPECIFICCONTROL_SHIFT
Public Const D3DSHADER_COMPARISON_MASK  = (&H7 << D3DSHADER_COMPARISON_SHIFT)
' ---------------------------------------------------------------------
'  Predication flags on instruction token
Public Const D3DSHADER_INSTRUCTION_PREDICATED  = (&H1 << 28)
' ---------------------------------------------------------------------
'  DCL Info Token Controls
'  For dcl info tokens requiring a semantic (usage + index)
Public Const D3DSP_DCL_USAGE_SHIFT  = 0
Public Const D3DSP_DCL_USAGE_MASK  = &H0000000f
Public Const D3DSP_DCL_USAGEINDEX_SHIFT  = 16
Public Const D3DSP_DCL_USAGEINDEX_MASK  = &H000f0000
'  DCL pixel shader sampler info token.
Public Const D3DSP_TEXTURETYPE_SHIFT  = 27
Public Const D3DSP_TEXTURETYPE_MASK  = &H78000000
Public Enum D3DSAMPLER_TEXTURE_TYPE
    D3DSTT_UNKNOWN = 0& << D3DSP_TEXTURETYPE_SHIFT ' uninitialized value
    D3DSTT_2D = 2& << D3DSP_TEXTURETYPE_SHIFT ' dcl_2d s# (for declaring a 2-D texture)
    D3DSTT_CUBE = 3& << D3DSP_TEXTURETYPE_SHIFT ' dcl_cube s# (for declaring a cube texture)
    D3DSTT_VOLUME = 4& << D3DSP_TEXTURETYPE_SHIFT ' dcl_volume s# (for declaring a volume texture)
    D3DSTT_FORCE_DWORD = &H7fffffff ' force 32-bit size enum
End Enum

Public Const D3DSP_REGNUM_MASK       = &H000007FF

Public Enum D3D9ParamWriteMask
    D3DSP_WRITEMASK_0 = &H00010000 ' Component 0 (X;Red)
    D3DSP_WRITEMASK_1 = &H00020000 ' Component 1 (Y;Green)
    D3DSP_WRITEMASK_2 = &H00040000 ' Component 2 (Z;Blue)
    D3DSP_WRITEMASK_3 = &H00080000 ' Component 3 (W;Alpha)
    D3DSP_WRITEMASK_ALL = &H000F0000 ' All Components
End Enum

Public Enum D3D9ParamModifiers
    '  destination parameter modifiers
    D3DSP_DSTMOD_SHIFT = 20
    D3DSP_DSTMOD_MASK = &H00F00000
    '  Bit masks for destination parameter modifiers
    D3DSPDM_NONE = (0& << D3DSP_DSTMOD_SHIFT) ' nop
    D3DSPDM_SATURATE = (1& << D3DSP_DSTMOD_SHIFT) ' clamp to 0. to 1. range
    D3DSPDM_PARTIALPRECISION = (2& << D3DSP_DSTMOD_SHIFT) ' Partial precision hint
    D3DSPDM_MSAMPCENTROID = (4& << D3DSP_DSTMOD_SHIFT) ' Relevant to multisampling only:
    '       When the pixel center is not covered, sample
    '       attribute or compute gradients/LOD
    '       using multisample "centroid" location.
    '       "Centroid" is some location within the covered
    '       region of the pixel.
End Enum

Public Enum D3D9DestinationParam
    '  destination parameter
    D3DSP_DSTSHIFT_SHIFT = 24
    D3DSP_DSTSHIFT_MASK = &H0F000000
End Enum

Public Enum D3D9DSourceParam
    D3DSP_REGTYPE_SHIFT = 28
    D3DSP_REGTYPE_SHIFT2 = 8
    D3DSP_REGTYPE_MASK = &H70000000
    D3DSP_REGTYPE_MASK2 = &H00001800
End Enum

Public Enum D3DSHADER_PARAM_REGISTER_TYPE
    D3DSPR_TEMP = 0 ' Temporary Register File
    D3DSPR_INPUT = 1 ' Input Register File
    D3DSPR_CONST = 2 ' Constant Register File
    D3DSPR_ADDR = 3 ' Address Register (VS)
    D3DSPR_TEXTURE = 3 ' Texture Register File (PS)
    D3DSPR_RASTOUT = 4 ' Rasterizer Register File
    D3DSPR_ATTROUT = 5 ' Attribute Output Register File
    D3DSPR_TEXCRDOUT = 6 ' Texture Coordinate Output Register File
    D3DSPR_OUTPUT = 6 ' Output register file for VS3.0+
    D3DSPR_CONSTINT = 7 ' Constant Integer Vector Register File
    D3DSPR_COLOROUT = 8 ' Color Output Register File
    D3DSPR_DEPTHOUT = 9 ' Depth Output Register File
    D3DSPR_SAMPLER = 10 ' Sampler State Register File
    D3DSPR_CONST2 = 11 ' Constant Register File  2048 - 4095
    D3DSPR_CONST3 = 12 ' Constant Register File  4096 - 6143
    D3DSPR_CONST4 = 13 ' Constant Register File  6144 - 8191
    D3DSPR_CONSTBOOL = 14 ' Constant Boolean register file
    D3DSPR_LOOP = 15 ' Loop counter register file
    D3DSPR_TEMPFLOAT16 = 16 ' 16-bit float temp register file
    D3DSPR_MISCTYPE = 17 ' Miscellaneous (single) registers.
    D3DSPR_LABEL = 18 ' Label
    D3DSPR_PREDICATE = 19 ' Predicate register
    D3DSPR_FORCE_DWORD = &H7fffffff ' force 32-bit size enum
End Enum

Public Enum D3DSHADER_MISCTYPE_OFFSETS
    D3DSMO_POSITION = 0 ' Input position x,y,z,rhw (PS)
    D3DSMO_FACE = 1 ' Floating point primitive area (PS)
End Enum

Public Enum D3DVS_RASTOUT_OFFSETS
    D3DSRO_POSITION = 0
    D3DSRO_FOG = 1
    D3DSRO_POINT_SIZE = 2
    D3DSRO_FORCE_DWORD = &H7fffffff ' force 32-bit size enum
End Enum

Public Const D3DVS_ADDRESSMODE_SHIFT  = 13
Public Const D3DVS_ADDRESSMODE_MASK  = (1& << D3DVS_ADDRESSMODE_SHIFT)

Public Enum D3DVS_ADDRESSMODE_TYPE
    D3DVS_ADDRMODE_ABSOLUTE = (0& << D3DVS_ADDRESSMODE_SHIFT)
    D3DVS_ADDRMODE_RELATIVE = (1& << D3DVS_ADDRESSMODE_SHIFT)
    D3DVS_ADDRMODE_FORCE_DWORD = &H7fffffff ' force 32-bit size enum
End Enum

Public Const D3DSHADER_ADDRESSMODE_SHIFT  = 13
Public Const D3DSHADER_ADDRESSMODE_MASK  = (1& << D3DSHADER_ADDRESSMODE_SHIFT)
Public Enum D3DSHADER_ADDRESSMODE_TYPE
    D3DSHADER_ADDRMODE_ABSOLUTE = (0& << D3DSHADER_ADDRESSMODE_SHIFT)
    D3DSHADER_ADDRMODE_RELATIVE = (1& << D3DSHADER_ADDRESSMODE_SHIFT)
    D3DSHADER_ADDRMODE_FORCE_DWORD = &H7fffffff ' force 32-bit size enum
End Enum

Public Enum D3D9SwizzleShift
    '  Source operand swizzle definitions
    ' 
    D3DVS_SWIZZLE_SHIFT = 16
    D3DVS_SWIZZLE_MASK = &H00FF0000
    '  The following bits define where to take component X from:
    D3DVS_X_X = (0& << D3DVS_SWIZZLE_SHIFT)
    D3DVS_X_Y = (1& << D3DVS_SWIZZLE_SHIFT)
    D3DVS_X_Z = (2& << D3DVS_SWIZZLE_SHIFT)
    D3DVS_X_W = (3& << D3DVS_SWIZZLE_SHIFT)
    '  The following bits define where to take component Y from:
    D3DVS_Y_X = (0& << (D3DVS_SWIZZLE_SHIFT + 2))
    D3DVS_Y_Y = (1& << (D3DVS_SWIZZLE_SHIFT + 2))
    D3DVS_Y_Z = (2& << (D3DVS_SWIZZLE_SHIFT + 2))
    D3DVS_Y_W = (3& << (D3DVS_SWIZZLE_SHIFT + 2))
    '  The following bits define where to take component Z from:
    D3DVS_Z_X = (0& << (D3DVS_SWIZZLE_SHIFT + 4))
    D3DVS_Z_Y = (1& << (D3DVS_SWIZZLE_SHIFT + 4))
    D3DVS_Z_Z = (2& << (D3DVS_SWIZZLE_SHIFT + 4))
    D3DVS_Z_W = (3& << (D3DVS_SWIZZLE_SHIFT + 4))
    '  The following bits define where to take component W from:
    D3DVS_W_X = (0& << (D3DVS_SWIZZLE_SHIFT + 6))
    D3DVS_W_Y = (1& << (D3DVS_SWIZZLE_SHIFT + 6))
    D3DVS_W_Z = (2& << (D3DVS_SWIZZLE_SHIFT + 6))
    D3DVS_W_W = (3& << (D3DVS_SWIZZLE_SHIFT + 6))
    '  Value when there is no swizzle (X is taken from X, Y is taken from Y,
    '  Z is taken from Z, W is taken from W
    ' 
    D3DVS_NOSWIZZLE = (D3DVS_X_X Or D3DVS_Y_Y Or D3DVS_Z_Z Or D3DVS_W_W)
    '  source parameter swizzle
    D3DSP_SWIZZLE_SHIFT = 16
    D3DSP_SWIZZLE_MASK = &H00FF0000
    D3DSP_NOSWIZZLE = ((0& << (D3DSP_SWIZZLE_SHIFT + 0&)) Or (1& << (D3DSP_SWIZZLE_SHIFT + 2&)) Or (2& << (D3DSP_SWIZZLE_SHIFT + 4&)) Or (3& << (D3DSP_SWIZZLE_SHIFT + 6&)))
    '  pixel-shader swizzle ops
    D3DSP_REPLICATERED = ((0& << (D3DSP_SWIZZLE_SHIFT + 0&)) Or (0& << (D3DSP_SWIZZLE_SHIFT + 2&)) Or (0& << (D3DSP_SWIZZLE_SHIFT + 4&)) Or (0& << (D3DSP_SWIZZLE_SHIFT + 6&)))
    D3DSP_REPLICATEGREEN = ((1& << (D3DSP_SWIZZLE_SHIFT + 0&)) Or (1& << (D3DSP_SWIZZLE_SHIFT + 2&)) Or (1& << (D3DSP_SWIZZLE_SHIFT + 4&)) Or (1& << (D3DSP_SWIZZLE_SHIFT + 6&)))
    D3DSP_REPLICATEBLUE = ((2& << (D3DSP_SWIZZLE_SHIFT + 0&)) Or (2& << (D3DSP_SWIZZLE_SHIFT + 2&)) Or (2& << (D3DSP_SWIZZLE_SHIFT + 4&)) Or (2& << (D3DSP_SWIZZLE_SHIFT + 6&)))
    D3DSP_REPLICATEALPHA = ((3& << (D3DSP_SWIZZLE_SHIFT + 0&)) Or (3& << (D3DSP_SWIZZLE_SHIFT + 2&)) Or (3& << (D3DSP_SWIZZLE_SHIFT + 4&)) Or (3& << (D3DSP_SWIZZLE_SHIFT + 6&)))
End Enum

Public Enum D3DSHADER_PARAM_SRCMOD_TYPE
    D3DSP_SRCMOD_SHIFT = 24
    D3DSP_SRCMOD_MASK = &H0F000000
    D3DSPSM_NONE = 0& << D3DSP_SRCMOD_SHIFT ' nop
    D3DSPSM_NEG = 1& << D3DSP_SRCMOD_SHIFT ' negate
    D3DSPSM_BIAS = 2& << D3DSP_SRCMOD_SHIFT ' bias
    D3DSPSM_BIASNEG = 3& << D3DSP_SRCMOD_SHIFT ' bias and negate
    D3DSPSM_SIGN = 4& << D3DSP_SRCMOD_SHIFT ' sign
    D3DSPSM_SIGNNEG = 5& << D3DSP_SRCMOD_SHIFT ' sign and negate
    D3DSPSM_COMP = 6& << D3DSP_SRCMOD_SHIFT ' complement
    D3DSPSM_X2 = 7& << D3DSP_SRCMOD_SHIFT ' *2
    D3DSPSM_X2NEG = 8& << D3DSP_SRCMOD_SHIFT ' *2 and negate
    D3DSPSM_DZ = 9& << D3DSP_SRCMOD_SHIFT ' divide through by z component
    D3DSPSM_DW = 10& << D3DSP_SRCMOD_SHIFT ' divide through by w component
    D3DSPSM_ABS = 11& << D3DSP_SRCMOD_SHIFT ' abs()
    D3DSPSM_ABSNEG = 12& << D3DSP_SRCMOD_SHIFT ' -abs()
    D3DSPSM_NOT = 13& << D3DSP_SRCMOD_SHIFT ' for predicate register: "!p0"
    D3DSPSM_FORCE_DWORD = &H7fffffff ' force 32-bit size enum
End Enum

Public Enum D3DSHADER_MIN_PRECISION
    D3DSP_MIN_PRECISION_SHIFT = 14
    D3DSP_MIN_PRECISION_MASK = &H0000C000&
    D3DMP_DEFAULT = 0 ' Default precision for the shader model
    D3DMP_16 = 1 ' 16 bit per component
    D3DMP_2_8 = 2 ' 10 bits (2.8) per component
End Enum

Public Function D3DPS_VERSION(ByVal _Major As Long, ByVal _Minor As Long) As Long
    Return (&HFFFF0000 Or ((_Major) << 8) Or (_Minor))
End Function
Public Function D3DVS_VERSION(ByVal _Major As Long, ByVal _Minor As Long) As Long
    Return (&HFFFF0000 Or ((_Major) << 8) Or (_Minor))
End Function

Public Function D3DSHADER_VERSION_MAJOR(ByVal _Version As Long) As Long
    Return (((_Version) >> 8) And &HFF)
End Function
Public Function D3DSHADER_VERSION_MINOR(ByVal _Version As Long) As Long
    Return (((_Version) >> 0) And &HFF)
End Function

Public Const D3DSI_COMMENTSIZE_SHIFT  = 16
Public Const D3DSI_COMMENTSIZE_MASK  = &H7FFF0000

Public Function D3DSHADER_COMMENT(ByVal _DWordSize As Long) As Long
    Return ((((_DWordSize) << D3DSI_COMMENTSIZE_SHIFT) And D3DSI_COMMENTSIZE_MASK) Or D3DSIO_COMMENT)
End Function

Public Const D3DPS_END  = &H0000FFFF
Public Const D3DVS_END  = &H0000FFFF

Public Enum D3DBASISTYPE
    D3DBASIS_BEZIER = 0
    D3DBASIS_BSPLINE = 1
    D3DBASIS_CATMULL_ROM = 2 /* In D3D8 this used to be D3DBASIS_INTERPOLATE */
    D3DBASIS_FORCE_DWORD = &H7fffffff
End Enum

Public Enum D3DDEGREETYPE
    D3DDEGREE_LINEAR = 1
    D3DDEGREE_QUADRATIC = 2
    D3DDEGREE_CUBIC = 3
    D3DDEGREE_QUINTIC = 5
    D3DDEGREE_FORCE_DWORD = &H7fffffff
End Enum

Public Enum D3DPATCHEDGESTYLE
    D3DPATCHEDGE_DISCRETE = 0
    D3DPATCHEDGE_CONTINUOUS = 1
    D3DPATCHEDGE_FORCE_DWORD = &H7fffffff
 End Enum

 Public Enum D3DSTATEBLOCKTYPE
     D3DSBT_ALL = 1 ' capture all state
     D3DSBT_PIXELSTATE = 2 ' capture pixel state
     D3DSBT_VERTEXSTATE = 3 ' capture vertex state
     D3DSBT_FORCE_DWORD = &H7fffffff
 End Enum
 
 Public Enum D3DVERTEXBLENDFLAGS
     D3DVBF_DISABLE = 0 ' Disable vertex blending
     D3DVBF_1WEIGHTS = 1 ' 2 matrix blending
     D3DVBF_2WEIGHTS = 2 ' 3 matrix blending
     D3DVBF_3WEIGHTS = 3 ' 4 matrix blending
     D3DVBF_TWEENING = 255 ' blending using D3DRS_TWEENFACTOR
     D3DVBF_0WEIGHTS = 256 ' one matrix is used with weight 1.0
     D3DVBF_FORCE_DWORD = &H7fffffff ' force 32-bit size enum
 End Enum
 
 Public Enum D3DTEXTURETRANSFORMFLAGS
     D3DTTFF_DISABLE = 0 ' texture coordinates are passed directly
     D3DTTFF_COUNT1 = 1 ' rasterizer should expect 1-D texture coords
     D3DTTFF_COUNT2 = 2 ' rasterizer should expect 2-D texture coords
     D3DTTFF_COUNT3 = 3 ' rasterizer should expect 3-D texture coords
     D3DTTFF_COUNT4 = 4 ' rasterizer should expect 4-D texture coords
     D3DTTFF_PROJECTED = 256 ' texcoords to be divided by COUNTth element
     D3DTTFF_FORCE_DWORD = &H7fffffff
 End Enum
 
 Public Const D3DFVF_TEXTUREFORMAT2  = 0  ' Two floating point values
 Public Const D3DFVF_TEXTUREFORMAT1  = 3  ' One floating point value
 Public Const D3DFVF_TEXTUREFORMAT3  = 1  ' Three floating point values
 Public Const D3DFVF_TEXTUREFORMAT4  = 2  ' Four floating point values
 
Public Function D3DFVF_TEXCOORDSIZE3(ByVal CoordIndex As Long) As Long
    Return (D3DFVF_TEXTUREFORMAT3 << (CoordIndex * 2 + 16))
End Function
[IgnoreWarnings(TB0025)]
Public Function D3DFVF_TEXCOORDSIZE2(ByVal CoordIndex As Long) As Long
    Return (D3DFVF_TEXTUREFORMAT2)
End Function
Public Function D3DFVF_TEXCOORDSIZE4(ByVal CoordIndex As Long) As Long
    Return (D3DFVF_TEXTUREFORMAT4 << (CoordIndex * 2 + 16))
End Function
Public Function D3DFVF_TEXCOORDSIZE1(ByVal CoordIndex As Long) As Long
    Return (D3DFVF_TEXTUREFORMAT1 << (CoordIndex * 2 + 16))
End Function

Public Enum D3DDEVTYPE
    D3DDEVTYPE_HAL = 1
    D3DDEVTYPE_REF = 2
    D3DDEVTYPE_SW = 3
    D3DDEVTYPE_NULLREF = 4
    D3DDEVTYPE_FORCE_DWORD = &H7fffffff
End Enum

Public Enum D3DMULTISAMPLE_TYPE
    D3DMULTISAMPLE_NONE = 0
    D3DMULTISAMPLE_NONMASKABLE = 1
    D3DMULTISAMPLE_2_SAMPLES = 2
    D3DMULTISAMPLE_3_SAMPLES = 3
    D3DMULTISAMPLE_4_SAMPLES = 4
    D3DMULTISAMPLE_5_SAMPLES = 5
    D3DMULTISAMPLE_6_SAMPLES = 6
    D3DMULTISAMPLE_7_SAMPLES = 7
    D3DMULTISAMPLE_8_SAMPLES = 8
    D3DMULTISAMPLE_9_SAMPLES = 9
    D3DMULTISAMPLE_10_SAMPLES = 10
    D3DMULTISAMPLE_11_SAMPLES = 11
    D3DMULTISAMPLE_12_SAMPLES = 12
    D3DMULTISAMPLE_13_SAMPLES = 13
    D3DMULTISAMPLE_14_SAMPLES = 14
    D3DMULTISAMPLE_15_SAMPLES = 15
    D3DMULTISAMPLE_16_SAMPLES = 16
    D3DMULTISAMPLE_FORCE_DWORD = &H7fffffff
End Enum

Public Type D3DDISPLAYMODE
    Width As Long
    Height As Long
    RefreshRate As Long
    Format As D3DFORMAT
End Type

Public Type D3DDEVICE_CREATION_PARAMETERS
    AdapterOrdinal As Long
    DeviceType As D3DDEVTYPE
    hFocusWindow As LongPtr
    BehaviorFlags As D3DCREATE
End Type

Public Enum D3DSWAPEFFECT
    D3DSWAPEFFECT_DISCARD = 1
    D3DSWAPEFFECT_FLIP = 2
    D3DSWAPEFFECT_COPY = 3
    ' #if !defined(D3D_DISABLE_9EX)
    D3DSWAPEFFECT_OVERLAY = 4
    D3DSWAPEFFECT_FLIPEX = 5
    ' #endif // !D3D_DISABLE_9EX
    D3DSWAPEFFECT_FORCE_DWORD = &H7fffffff
End Enum

Public Enum D3DPOOL
    D3DPOOL_DEFAULT = 0
    D3DPOOL_MANAGED = 1
    D3DPOOL_SYSTEMMEM = 2
    D3DPOOL_SCRATCH = 3
    D3DPOOL_FORCE_DWORD = &H7fffffff
End Enum

Public Const D3DPRESENT_RATE_DEFAULT = 0

Public Type D3DPRESENT_PARAMETERS
    BackBufferWidth As Long
    BackBufferHeight As Long
    BackBufferFormat As D3DFORMAT
    BackBufferCount As Long
    MultiSampleType As D3DMULTISAMPLE_TYPE
    MultiSampleQuality As Long
    SwapEffect As D3DSWAPEFFECT
    hDeviceWindow As LongPtr
    Windowed As BOOL
    EnableAutoDepthStencil As BOOL
    AutoDepthStencilFormat As D3DFORMAT
    Flags As D3DPRESENTFLAG
    '/* FullScreen_RefreshRateInHz must be zero for Windowed mode */
    FullScreen_RefreshRateInHz As Long
    PresentationInterval As Long
End Type

Public Enum D3DPRESENTFLAG
    D3DPRESENTFLAG_LOCKABLE_BACKBUFFER = &H00000001
    D3DPRESENTFLAG_DISCARD_DEPTHSTENCIL = &H00000002
    D3DPRESENTFLAG_DEVICECLIP = &H00000004
    D3DPRESENTFLAG_VIDEO = &H00000010
    ' /* D3D9Ex only -- */
    ' #if !defined(D3D_DISABLE_9EX)
    D3DPRESENTFLAG_NOAUTOROTATE = &H00000020
    D3DPRESENTFLAG_UNPRUNEDMODE = &H00000040
    D3DPRESENTFLAG_OVERLAY_LIMITEDRGB = &H00000080
    D3DPRESENTFLAG_OVERLAY_YCbCr_BT709 = &H00000100
    D3DPRESENTFLAG_OVERLAY_YCbCr_xvYCC = &H00000200
    D3DPRESENTFLAG_RESTRICTED_CONTENT = &H00000400
    D3DPRESENTFLAG_RESTRICT_SHARED_RESOURCE_DRIVER = &H00000800
End Enum

Public Type D3DGAMMARAMP
    red(0 To 255) As Integer
    green(0 To 255) As Integer
    blue(0 To 255) As Integer
End Type

Public Enum D3DBACKBUFFER_TYPE
    D3DBACKBUFFER_TYPE_MONO = 0
    D3DBACKBUFFER_TYPE_LEFT = 1
    D3DBACKBUFFER_TYPE_RIGHT = 2
    D3DBACKBUFFER_TYPE_FORCE_DWORD = &H7fffffff
End Enum

Public Enum D3DRESOURCETYPE
    D3DRTYPE_SURFACE = 1
    D3DRTYPE_VOLUME = 2
    D3DRTYPE_TEXTURE = 3
    D3DRTYPE_VOLUMETEXTURE = 4
    D3DRTYPE_CUBETEXTURE = 5
    D3DRTYPE_VERTEXBUFFER = 6
    D3DRTYPE_INDEXBUFFER = 7 'if this changes, change _D3DDEVINFO_RESOURCEMANAGER definition
    D3DRTYPE_FORCE_DWORD = &H7fffffff
End Enum

Public Enum D3DUSAGE
    D3DUSAGE_RENDERTARGET = (&H00000001)
    D3DUSAGE_DEPTHSTENCIL = (&H00000002)
    D3DUSAGE_DYNAMIC = (&H00000200)
    '  /* D3D9Ex only -- */
    ' #if !defined(D3D_DISABLE_9EX)
    D3DUSAGE_NONSECURE = (&H00800000)
    ' #endif // !D3D_DISABLE_9EX
    '  /* -- D3D9Ex only */
    '  When passed to CheckDeviceFormat, D3DUSAGE_AUTOGENMIPMAP may return
    '  D3DOK_NOAUTOGEN if the device doesn't support autogeneration for that format.
    '  D3DOK_NOAUTOGEN is a success code, not a failure code... the SUCCEEDED and FAILED macros
    '  will return true and false respectively for this code.
    D3DUSAGE_AUTOGENMIPMAP = (&H00000400)
    D3DUSAGE_DMAP = (&H00004000)
    '  The following usages are valid only for querying CheckDeviceFormat
    D3DUSAGE_QUERY_LEGACYBUMPMAP = (&H00008000&)
    D3DUSAGE_QUERY_SRGBREAD = (&H00010000)
    D3DUSAGE_QUERY_FILTER = (&H00020000)
    D3DUSAGE_QUERY_SRGBWRITE = (&H00040000)
    D3DUSAGE_QUERY_POSTPIXELSHADER_BLENDING = (&H00080000)
    D3DUSAGE_QUERY_VERTEXTEXTURE = (&H00100000)
    D3DUSAGE_QUERY_WRAPANDMIP = (&H00200000)
    '  /* Usages for Vertex/Index buffers */
    D3DUSAGE_WRITEONLY = (&H00000008)
    D3DUSAGE_SOFTWAREPROCESSING = (&H00000010)
    D3DUSAGE_DONOTCLIP = (&H00000020)
    D3DUSAGE_POINTS = (&H00000040)
    D3DUSAGE_RTPATCHES = (&H00000080)
    D3DUSAGE_NPATCHES = (&H00000100)
    '  /* D3D9Ex only -- */
    ' #if !defined(D3D_DISABLE_9EX)
    D3DUSAGE_TEXTAPI = (&H10000000)
    D3DUSAGE_RESTRICTED_CONTENT = (&H00000800)
    D3DUSAGE_RESTRICT_SHARED_RESOURCE = (&H00002000)
    D3DUSAGE_RESTRICT_SHARED_RESOURCE_DRIVER = (&H00001000)
    ' #endif // !D3D_DISABLE_9EX
    '  /* -- D3D9Ex only */
End Enum

Public Enum D3DCUBEMAP_FACES
    D3DCUBEMAP_FACE_POSITIVE_X = 0
    D3DCUBEMAP_FACE_NEGATIVE_X = 1
    D3DCUBEMAP_FACE_POSITIVE_Y = 2
    D3DCUBEMAP_FACE_NEGATIVE_Y = 3
    D3DCUBEMAP_FACE_POSITIVE_Z = 4
    D3DCUBEMAP_FACE_NEGATIVE_Z = 5
    D3DCUBEMAP_FACE_FORCE_DWORD = &H7fffffff
End Enum

Public Enum D3DLOCK
    D3DLOCK_READONLY = &H00000010
    D3DLOCK_DISCARD = &H00002000
    D3DLOCK_NOOVERWRITE = &H00001000
    D3DLOCK_NOSYSLOCK = &H00000800
    D3DLOCK_DONOTWAIT = &H00004000
    D3DLOCK_NO_DIRTY_UPDATE = &H00008000&
End Enum

Public Type D3DVERTEXBUFFER_DESC
    Format As D3DFORMAT
    type As D3DRESOURCETYPE
    Usage As Long
    Pool As D3DPOOL
    SIZE As Long
    FVF As Long
End Type

Public Type D3DINDEXBUFFER_DESC
    Format As D3DFORMAT
    type As D3DRESOURCETYPE
    Usage As D3DUSAGE
    Pool As D3DPOOL
    SIZE As Long
End Type

Public Type D3DSURFACE_DESC
    Format As D3DFORMAT
    type As D3DRESOURCETYPE
    Usage As D3DUSAGE
    Pool As D3DPOOL
    MultiSampleType As D3DMULTISAMPLE_TYPE
    MultiSampleQuality As Long
    width As Long
    Height As Long
End Type

Public Type D3DVOLUME_DESC
    Format As D3DFORMAT
    type As D3DRESOURCETYPE
    Usage As D3DUSAGE
    Pool As D3DPOOL
    width As Long
    Height As Long
    Depth As Long
End Type

Public Type D3DLOCKED_RECT
    pitch As Long
    pBits As LongPtr
End Type

Public Type D3DBOX
    Left As Long
    Top As Long
    Right As Long
    Bottom As Long
    front As Long
    back As Long
End Type

Public Type D3DLOCKED_BOX
    RowPitch As Long
    SlicePitch As Long
    pBits As LongPtr
End Type

Public Type D3DRANGE
    Offset As Long
    SIZE As Long
End Type

Public Type D3DRECTPATCH_INFO
    StartVertexOffsetWidth As Long
    StartVertexOffsetHeight As Long
    width As Long
    Height As Long
    stride As Long
    Basis As D3DBASISTYPE
    Degree As D3DDEGREETYPE
End Type

Public Type D3DTRIPATCH_INFO
    StartVertexOffset As Long
    NumVertices As Long
    Basis As D3DBASISTYPE
    Degree As D3DDEGREETYPE
End Type

Public Const MAX_DEVICE_IDENTIFIER_STRING = 512
Public Type D3DADAPTER_IDENTIFIER9
    Driver(0 To (MAX_DEVICE_IDENTIFIER_STRING - 1)) As Byte
    Description(0 To (MAX_DEVICE_IDENTIFIER_STRING - 1)) As Byte
    DeviceName(0 To 31) As Byte '  /* Device name for GDI (ex. \\.\DISPLAY1) */
    '#ifdef _WIN32
    DriverVersion As LARGE_INTEGER '   /* Defined for 32 bit components */
    '#else
    '    DWORD           DriverVersionLowPart; //  /* Defined for 16 bit driver components */
    '    DWORD           DriverVersionHighPart;
    '#endif
    VendorId As Long
    DeviceId As Long
    SubSysId As Long
    Revision As Long
    DeviceIdentifier As UUID
    WHQLLevel As Long
End Type

Public Type D3DRASTER_STATUS
    InVBlank As BOOL
    ScanLine As Long
End Type

Public Enum D3DDEBUGMONITORTOKENS
    D3DDMT_ENABLE = 0 ' enable debug monitor
    D3DDMT_DISABLE = 1 ' disable debug monitor
    D3DDMT_FORCE_DWORD = &H7fffffff
End Enum

Public Enum D3DQUERYTYPE
    D3DQUERYTYPE_VCACHE = 4 ' /* D3DISSUE_END */
    D3DQUERYTYPE_RESOURCEMANAGER = 5 ' /* D3DISSUE_END */
    D3DQUERYTYPE_VERTEXSTATS = 6 ' /* D3DISSUE_END */
    D3DQUERYTYPE_EVENT = 8 ' /* D3DISSUE_END */
    D3DQUERYTYPE_OCCLUSION = 9 ' /* D3DISSUE_BEGIN, D3DISSUE_END */
    D3DQUERYTYPE_TIMESTAMP = 10 ' /* D3DISSUE_END */
    D3DQUERYTYPE_TIMESTAMPDISJOINT = 11 ' /* D3DISSUE_BEGIN, D3DISSUE_END */
    D3DQUERYTYPE_TIMESTAMPFREQ = 12 ' /* D3DISSUE_END */
    D3DQUERYTYPE_PIPELINETIMINGS = 13 ' /* D3DISSUE_BEGIN, D3DISSUE_END */
    D3DQUERYTYPE_INTERFACETIMINGS = 14 ' /* D3DISSUE_BEGIN, D3DISSUE_END */
    D3DQUERYTYPE_VERTEXTIMINGS = 15 ' /* D3DISSUE_BEGIN, D3DISSUE_END */
    D3DQUERYTYPE_PIXELTIMINGS = 16 ' /* D3DISSUE_BEGIN, D3DISSUE_END */
    D3DQUERYTYPE_BANDWIDTHTIMINGS = 17 ' /* D3DISSUE_BEGIN, D3DISSUE_END */
    D3DQUERYTYPE_CACHEUTILIZATION = 18 ' /* D3DISSUE_BEGIN, D3DISSUE_END */
    '  /* D3D9Ex only -- */
    ' #if !defined(D3D_DISABLE_9EX)
    D3DQUERYTYPE_MEMORYPRESSURE = 19 ' /* D3DISSUE_BEGIN, D3DISSUE_END */
    ' #endif // !D3D_DISABLE_9EX
End Enum

Public Enum D3DISSUE
    D3DISSUE_END = (1 << 0) ' Tells the runtime to issue the end of a query, changing it's state to "non-signaled".
    D3DISSUE_BEGIN = (1 << 1) ' Tells the runtime to issue the beginng of a query.
End Enum

Public Enum D3D9GetDataFlags
    D3DGETDATA_FLUSH = 1 ' (1 << 0) // Tells the runtime to flush if the query is outstanding.
End Enum

Public Type D3DRESOURCESTATS
    ' Data collected since last Present()
    bThrashing As BOOL ' /* indicates if thrashing */
    ApproxBytesDownloaded As Long ' /* Approximate number of bytes downloaded by resource manager */
    NumEvicts As Long ' /* number of objects evicted */
    NumVidCreates As Long ' /* number of objects created in video memory */
    LastPri As Long ' /* priority of last object evicted */
    NumUsed As Long ' /* number of objects set to the device */
    NumUsedInVidMem As Long ' /* number of objects set to the device, which are already in video memory */
    ' Persistent data
    WorkingSet As Long ' /* number of objects in video memory */
    WorkingSetBytes As Long ' /* number of bytes in video memory */
    TotalManaged As Long ' /* total number of managed objects */
    TotalBytes As Long ' /* total number of bytes of managed objects */
End Type

Public Const D3DRTYPECOUNT As Long = 8
Public Type D3DDEVINFO_RESOURCEMANAGER
    '#ifndef WOW64_ENUM_WORKAROUND
    stats(0 To (D3DRTYPECOUNT - 1)) As D3DRESOURCESTATS
    '#else
    '    D3DRESOURCESTATS    stats[8];
    '#endif
End Type

Public Type D3DDEVINFO_D3DVERTEXSTATS
    NumRenderedTriangles As Long ' /* total number of triangles that are not clipped in this frame */
    NumExtraClippingTriangles As Long ' /* Number of new triangles generated by clipping */
End Type

Public Type D3DDEVINFO_VCACHE
    Pattern As Long ' /* bit pattern, return value must be FOUR_CC('C', 'A', 'C', 'H') */
    OptMethod As Long ' /* optimization method 0 means longest strips, 1 means vertex cache based */
    CacheSize As Long ' /* cache size to optimize for  (only required if type is 1) */
    MagicNumber As Long ' /* used to determine when to restart strips (only required if type is 1)*/
End Type

Public Type D3DDEVINFO_D3D9PIPELINETIMINGS
    VertexProcessingTimePercent As Single
    PixelProcessingTimePercent As Single
    OtherGPUProcessingTimePercent As Single
    GPUIdleTimePercent As Single
End Type

Public Type D3DDEVINFO_D3D9INTERFACETIMINGS
    WaitingForGPUToUseApplicationResourceTimePercent As Single
    WaitingForGPUToAcceptMoreCommandsTimePercent As Single
    WaitingForGPUToStayWithinLatencyTimePercent As Single
    WaitingForGPUExclusiveResourceTimePercent As Single
    WaitingForGPUOtherTimePercent As Single
End Type

Public Type D3DDEVINFO_D3D9STAGETIMINGS
    MemoryProcessingPercent As Single
    ComputationProcessingPercent As Single
End Type

Public Type D3DDEVINFO_D3D9BANDWIDTHTIMINGS
    MaxBandwidthUtilized As Single
    FrontEndUploadMemoryUtilizedPercent As Single
    VertexRateUtilizedPercent As Single
    TriangleSetupRateUtilizedPercent As Single
    FillRateUtilizedPercent As Single
End Type

Public Type D3DDEVINFO_D3D9CACHEUTILIZATION
    TextureCacheHitRate As Single
    PostTransformVertexCacheHitRate As Single
End Type

#If Win64 = 0 Then
[PackingAlignment(4)]
#End If
Public Type D3DMEMORYPRESSURE
    BytesEvictedFromProcess As LongLong
    SizeOfInefficientAllocation As LongLong
    LevelOfEfficiency As Long
End Type

Public Enum D3DCOMPOSERECTSOP
    D3DCOMPOSERECTS_COPY = 1
    D3DCOMPOSERECTS_OR = 2
    D3DCOMPOSERECTS_AND = 3
    D3DCOMPOSERECTS_NEG = 4
    D3DCOMPOSERECTS_FORCE_DWORD = 2147483647
End Enum

Public Type D3DCOMPOSERECTDESC
    x As Integer
    y As Integer
    width As Integer
    Height As Integer
End Type

Public Type D3DCOMPOSERECTDESTINATION
    SrcRectIndex As Integer ' Index of D3DCOMPOSERECTDESC
    Reserved As Integer ' For alignment
    X As Integer
    Y As Integer ' Top-left coordinates of the rect in the destination surface
End Type

Public Const D3DCOMPOSERECTS_MAXNUMRECTS  = &HFFFF
Public Const D3DCONVOLUTIONMONO_MAXWIDTH  = 7
Public Const D3DCONVOLUTIONMONO_MAXHEIGHT  = D3DCONVOLUTIONMONO_MAXWIDTH
Public Const D3DFMT_A1_SURFACE_MAXWIDTH  = 8192
Public Const D3DFMT_A1_SURFACE_MAXHEIGHT  = 2048

#If Win64 = 0 Then
[PackingAlignment(4)]
#End If
Public Type D3DPRESENTSTATS
    PresentCount As Long
    PresentRefreshCount As Long
    SyncRefreshCount As Long
    SyncQPCTime As LARGE_INTEGER
    SyncGPUTime As LARGE_INTEGER
End Type

Public Enum D3DSCANLINEORDERING
    D3DSCANLINEORDERING_UNKNOWN = 0
    D3DSCANLINEORDERING_PROGRESSIVE = 1
    D3DSCANLINEORDERING_INTERLACED = 2
End Enum

Public Type D3DDISPLAYMODEEX
    SIZE As Long
    width As Long
    Height As Long
    RefreshRate As Long
    Format As D3DFORMAT
    ScanlineOrdering As D3DSCANLINEORDERING
End Type

Public Type D3DDISPLAYMODEFILTER
    SIZE As Long
    Format As D3DFORMAT
    ScanlineOrdering As D3DSCANLINEORDERING
End Type

Public Enum D3DDISPLAYROTATION
    D3DDISPLAYROTATION_IDENTITY = 1 ' No rotation.
    D3DDISPLAYROTATION_90 = 2 ' Rotated 90 degrees.
    D3DDISPLAYROTATION_180 = 3 ' Rotated 180 degrees.
    D3DDISPLAYROTATION_270 = 4 ' Rotated 270 degrees.
End Enum

Public Enum D3D9_RESOURCE_PRIORITY
    D3D9_RESOURCE_PRIORITY_MINIMUM = &H28000000
    D3D9_RESOURCE_PRIORITY_LOW = &H50000000
    D3D9_RESOURCE_PRIORITY_NORMAL = &H78000000
    D3D9_RESOURCE_PRIORITY_HIGH = &Ha0000000
    D3D9_RESOURCE_PRIORITY_MAXIMUM = &Hc8000000
End Enum

Public Const D3D_OMAC_SIZE = 16
Public Type D3D_OMAC
    Omac(0 To (D3D_OMAC_SIZE - 1)) As Byte
End Type

Public Enum D3DAUTHENTICATEDCHANNELTYPE
    D3DAUTHENTICATEDCHANNEL_D3D9 = 1
    D3DAUTHENTICATEDCHANNEL_DRIVER_SOFTWARE = 2
    D3DAUTHENTICATEDCHANNEL_DRIVER_HARDWARE = 3
End Enum

Public Type D3DAUTHENTICATEDCHANNEL_QUERY_INPUT
    QueryType As UUID
    hChannel As LongPtr
    SequenceNumber As Long
End Type

Public Type D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    Omac As D3D_OMAC
    QueryType As UUID
    hChannel As LongPtr
    SequenceNumber As Long
    ReturnCode As Long /* HRESULT */
End Type

Public Type D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS
    'union
    '{
    '    struct
    '    {
    '        UINT ProtectionEnabled : 1;
    '        UINT OverlayOrFullscreenRequired : 1;
    '        UINT Reserved : 30;
    '    };
    Value As Long
    '};
End Type

Public Type D3DAUTHENTICATEDCHANNEL_QUERYPROTECTION_OUTPUT
    Output As D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    ProtectionFlags As D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS
End Type

Public Type D3DAUTHENTICATEDCHANNEL_QUERYCHANNELTYPE_OUTPUT
    Output As D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    ChannelType As D3DAUTHENTICATEDCHANNELTYPE
End Type

Public Type D3DAUTHENTICATEDCHANNEL_QUERYDEVICEHANDLE_OUTPUT
    Output As D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    DeviceHandle As LongPtr
End Type

Public Type D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_INPUT
    input As D3DAUTHENTICATEDCHANNEL_QUERY_INPUT
    DXVA2DecodeHandle As LongPtr
End Type

Public Type D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_OUTPUT
    Output As D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    DXVA2DecodeHandle As LongPtr
    CryptoSessionHandle As LongPtr
    DeviceHandle As LongPtr
End Type

Public Type D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESSCOUNT_OUTPUT
    Output As D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    NumRestrictedSharedResourceProcesses As Long
End Type

Public Type D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_INPUT
    input As D3DAUTHENTICATEDCHANNEL_QUERY_INPUT
    ProcessIndex As Long
End Type

Public Enum D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE
    PROCESSIDTYPE_UNKNOWN = 0
    PROCESSIDTYPE_DWM = 1
    PROCESSIDTYPE_HANDLE = 2
End Enum

Public Type D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_OUTPUT
    Output As D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    ProcessIndex As Long
    ProcessIdentifer As D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE
    processHandle As LongPtr
End Type

Public Type D3DAUTHENTICATEDCHANNEL_QUERYUNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT_OUTPUT
    Output As D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    NumUnrestrictedProtectedSharedResources As Long
End Type

Public Type D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_INPUT
    input As D3DAUTHENTICATEDCHANNEL_QUERY_INPUT
    DeviceHandle As LongPtr
    CryptoSessionHandle As LongPtr
End Type

Public Type D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_OUTPUT
    Output As D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    DeviceHandle As LongPtr
    CryptoSessionHandle As LongPtr
    NumOutputIDs As Long
End Type

Public Type D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_INPUT
    input As D3DAUTHENTICATEDCHANNEL_QUERY_INPUT
    DeviceHandle As LongPtr
    CryptoSessionHandle As LongPtr
    OutputIDIndex As Long
End Type

Public Type D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_OUTPUT
    Output As D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    DeviceHandle As LongPtr
    CryptoSessionHandle As LongPtr
    OutputIDIndex As Long
    OutputID As LongLong
End Type

Public Enum D3DBUSTYPE
    D3DBUSTYPE_OTHER = &H00000000
    D3DBUSTYPE_PCI = &H00000001
    D3DBUSTYPE_PCIX = &H00000002
    D3DBUSTYPE_PCIEXPRESS = &H00000003
    D3DBUSTYPE_AGP = &H00000004
    D3DBUSIMPL_MODIFIER_INSIDE_OF_CHIPSET = &H00010000
    D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = &H00020000
    D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = &H00030000
    D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR = &H00040000
    D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = &H00050000
    D3DBUSIMPL_MODIFIER_NON_STANDARD = &H80000000
End Enum

Public Type D3DAUTHENTICATEDCHANNEL_QUERYINFOBUSTYPE_OUTPUT
    Output As D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    BusType As D3DBUSTYPE
    bAccessibleInContiguousBlocks As BOOL
    bAccessibleInNonContiguousBlocks As BOOL
End Type

Public Type D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUIDCOUNT_OUTPUT
    Output As D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    NumEncryptionGuids As Long
End Type

Public Type D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_INPUT
    input As D3DAUTHENTICATEDCHANNEL_QUERY_INPUT
    EncryptionGuidIndex As Long
End Type

Public Type D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_OUTPUT
    Output As D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    EncryptionGuidIndex As Long
    EncryptionGuid As UUID
End Type

Public Type D3DAUTHENTICATEDCHANNEL_QUERYUNCOMPRESSEDENCRYPTIONLEVEL_OUTPUT
    Output As D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
    EncryptionGuid As UUID
End Type

Public Type D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT
    Omac As D3D_OMAC
    ConfigureType As UUID
    hChannel As LongPtr
    SequenceNumber As Long
End Type

Public Type D3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT
    Omac As D3D_OMAC
    ConfigureType As UUID
    hChannel As LongPtr
    SequenceNumber As Long
    ReturnCode As Long /* HRESULT */
End Type

Public Type D3DAUTHENTICATEDCHANNEL_CONFIGUREINITIALIZE
    Parameters As D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT
    StartSequenceQuery As Long
    StartSequenceConfigure As Long
End Type

Public Type D3DAUTHENTICATEDCHANNEL_CONFIGUREPROTECTION
    Parameters As D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT
    Protections As D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS
End Type

Public Type D3DAUTHENTICATEDCHANNEL_CONFIGURECRYPTOSESSION
    Parameters As D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT
    DXVA2DecodeHandle As LongPtr
    CryptoSessionHandle As LongPtr
    DeviceHandle As LongPtr
End Type

Public Type D3DAUTHENTICATEDCHANNEL_CONFIGURESHAREDRESOURCE
    Parameters As D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT
    ProcessIdentiferType As D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE
    processHandle As LongPtr
    AllowAccess As BOOL
End Type

Public Type D3DAUTHENTICATEDCHANNEL_CONFIGUREUNCOMPRESSEDENCRYPTION
    Parameters As D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT
    EncryptionGuid As UUID
End Type

Public Type D3DENCRYPTED_BLOCK_INFO
    NumEncryptedBytesAtBeginning As Long
    NumBytesInSkipPattern As Long
    NumBytesInEncryptPattern As Long
End Type

Public Type D3DAES_CTR_IV
    IV As LongLong
    Count As LongLong
End Type

Public Type D3DVSHADERCAPS2_0
    Caps As Long
    DynamicFlowControlDepth As Long
    NumTemps As Long
    StaticFlowControlDepth As Long
End Type

Public Const D3DVS20CAPS_PREDICATION  = (1 << 0)
Public Const D3DVS20_MAX_DYNAMICFLOWCONTROLDEPTH  = 24
Public Const D3DVS20_MIN_DYNAMICFLOWCONTROLDEPTH  = 0
Public Const D3DVS20_MAX_NUMTEMPS  = 32
Public Const D3DVS20_MIN_NUMTEMPS  = 12
Public Const D3DVS20_MAX_STATICFLOWCONTROLDEPTH  = 4
Public Const D3DVS20_MIN_STATICFLOWCONTROLDEPTH  = 1

Public Type D3DPSHADERCAPS2_0
    Caps As Long
    DynamicFlowControlDepth As Long
    NumTemps As Long
    StaticFlowControlDepth As Long
    NumInstructionSlots As Long
End Type

Public Enum D3D9Caps20
    D3DPS20CAPS_ARBITRARYSWIZZLE = (1 << 0)
    D3DPS20CAPS_GRADIENTINSTRUCTIONS = (1 << 1)
    D3DPS20CAPS_PREDICATION = (1 << 2)
    D3DPS20CAPS_NODEPENDENTREADLIMIT = (1 << 3)
    D3DPS20CAPS_NOTEXINSTRUCTIONLIMIT = (1 << 4)
End Enum

Public Const D3DPS20_MAX_DYNAMICFLOWCONTROLDEPTH As Long = 24
Public Const D3DPS20_MIN_DYNAMICFLOWCONTROLDEPTH As Long = 0
Public Const D3DPS20_MAX_NUMTEMPS As Long = 32
Public Const D3DPS20_MIN_NUMTEMPS As Long = 12
Public Const D3DPS20_MAX_STATICFLOWCONTROLDEPTH As Long = 4
Public Const D3DPS20_MIN_STATICFLOWCONTROLDEPTH As Long = 0
Public Const D3DPS20_MAX_NUMINSTRUCTIONSLOTS As Long = 512
Public Const D3DPS20_MIN_NUMINSTRUCTIONSLOTS As Long = 96
Public Const D3DMIN30SHADERINSTRUCTIONS As Long = 512
Public Const D3DMAX30SHADERINSTRUCTIONS As Long = 32768

Public Type D3DOVERLAYCAPS
    Caps As Long
    MaxOverlayDisplayWidth As Long
    MaxOverlayDisplayHeight As Long
End Type

Public Enum D3D9OverlayCapsFlags
    D3DOVERLAYCAPS_FULLRANGERGB = &H00000001
    D3DOVERLAYCAPS_LIMITEDRANGERGB = &H00000002
    D3DOVERLAYCAPS_YCbCr_BT601 = &H00000004
    D3DOVERLAYCAPS_YCbCr_BT709 = &H00000008
    D3DOVERLAYCAPS_YCbCr_BT601_xvYCC = &H00000010
    D3DOVERLAYCAPS_YCbCr_BT709_xvYCC = &H00000020
    D3DOVERLAYCAPS_STRETCHX = &H00000040
    D3DOVERLAYCAPS_STRETCHY = &H00000080
End Enum

Public Type D3DCONTENTPROTECTIONCAPS
    Caps As Long
    KeyExchangeType As UUID
    BufferAlignmentStart As Long
    BlockAlignmentSize As Long
    ProtectedMemorySize As LongLong
End Type

Public Enum D3D9ContentProtectionCapsFlags
    D3DCPCAPS_SOFTWARE = &H00000001
    D3DCPCAPS_HARDWARE = &H00000002
    D3DCPCAPS_PROTECTIONALWAYSON = &H00000004
    D3DCPCAPS_PARTIALDECRYPTION = &H00000008
    D3DCPCAPS_CONTENTKEY = &H00000010
    D3DCPCAPS_FRESHENSESSIONKEY = &H00000020
    D3DCPCAPS_ENCRYPTEDREADBACK = &H00000040
    D3DCPCAPS_ENCRYPTEDREADBACKKEY = &H00000080
    D3DCPCAPS_SEQUENTIAL_CTR_IV = &H00000100
    D3DCPCAPS_ENCRYPTSLICEDATAONLY = &H00000200
End Enum

Public Type D3DCAPS9
    /* Device Info */
   DeviceType As D3DDEVTYPE
   AdapterOrdinal As Long
   /* Caps from DX7 Draw */
   Caps As D3DCAPS
   Caps2 As D3DCAPS2
   Caps3 As D3DCAPS3
   PresentationIntervals As D3D9PresentIntervals
   /* Cursor Caps */
   CursorCaps As D3D9CursorCaps
   /* 3D Device Caps */
   DevCaps As D3D9DevCaps
   PrimitiveMiscCaps As D3D9PrimitiveMiscCaps
   RasterCaps As D3DPRASTERCAPS
   ZCmpCaps As D3DPCMPCAPS
   SrcBlendCaps As D3DPBLENDCAPS
   DestBlendCaps As D3DPBLENDCAPS
   AlphaCmpCaps As D3DPCMPCAPS
   ShadeCaps As D3DPSHADECAPS
   TextureCaps As D3DPTEXTURECAPS
   TextureFilterCaps As D3DPTFILTERCAPS ' D3DPTFILTERCAPS for IDirect3DTexture9's
   CubeTextureFilterCaps As D3DPTFILTERCAPS ' D3DPTFILTERCAPS for IDirect3DCubeTexture9's
   VolumeTextureFilterCaps As D3DPTFILTERCAPS ' D3DPTFILTERCAPS for IDirect3DVolumeTexture9's
   TextureAddressCaps As D3DPTADDRESSCAPS ' D3DPTADDRESSCAPS for IDirect3DTexture9's
   VolumeTextureAddressCaps As D3DPTADDRESSCAPS ' D3DPTADDRESSCAPS for IDirect3DVolumeTexture9's
   LineCaps As D3DLINECAPS ' D3DLINECAPS
   MaxTextureWidth As Long
   MaxTextureHeight As Long
   MaxVolumeExtent As Long
   MaxTextureRepeat As Long
   MaxTextureAspectRatio As Long
   MaxAnisotropy As Long
   MaxVertexW As Single
   GuardBandLeft As Single
   GuardBandTop As Single
   GuardBandRight As Single
   GuardBandBottom As Single
   ExtentsAdjust As Single
   StencilCaps As D3DSTENCILCAPS
   FVFCaps As D3DFVFCAPS
   TextureOpCaps As D3DTEXOPCAPS
   MaxTextureBlendStages As Long
   MaxSimultaneousTextures As Long
   VertexProcessingCaps As D3DVTXPCAPS
   MaxActiveLights As Long
   MaxUserClipPlanes As Long
   MaxVertexBlendMatrices As Long
   MaxVertexBlendMatrixIndex As Long
   MaxPointSize As Single
   MaxPrimitiveCount As Long ' max number of primitives per DrawPrimitive call
   MaxVertexIndex As Long
   MaxStreams As Long
   MaxStreamStride As Long ' max stride for SetStreamSource
   VertexShaderVersion As Long
   MaxVertexShaderConst As Long ' number of vertex shader constant registers
   PixelShaderVersion As Long
   PixelShader1xMaxValue As Single ' max value storable in registers of ps.1.x shaders
   ' Here are the DX9 specific ones
   DevCaps2 As D3DDEVCAPS2
   MaxNpatchTessellationLevel As Single
   Reserved5 As Long
   MasterAdapterOrdinal As Long ' ordinal of master adaptor for adapter group
   AdapterOrdinalInGroup As Long ' ordinal inside the adapter group
   NumberOfAdaptersInGroup As Long ' number of adapters in this adapter group (only if master)
   DeclTypes As D3DDTCAPS ' Data types, supported in vertex declarations
   NumSimultaneousRTs As Long ' Will be at least 1
   StretchRectFilterCaps As Long ' Filter caps supported by StretchRect
   VS20Caps As D3DVSHADERCAPS2_0
   PS20Caps As D3DPSHADERCAPS2_0
   VertexTextureFilterCaps As Long ' D3DPTFILTERCAPS for IDirect3DTexture9's for texture, used in vertex shaders
   MaxVShaderInstructionsExecuted As Long ' maximum number of vertex shader instructions that can be executed
   MaxPShaderInstructionsExecuted As Long ' maximum number of pixel shader instructions that can be executed
   MaxVertexShader30InstructionSlots As Long
   MaxPixelShader30InstructionSlots As Long
End Type

Public Enum D3DCAPS
    D3DCAPS_OVERLAY = &H00000800
    D3DCAPS_READ_SCANLINE = &H00020000
End Enum

Public Enum D3DCAPS2
    D3DCAPS2_FULLSCREENGAMMA = &H00020000
    D3DCAPS2_CANCALIBRATEGAMMA = &H00100000
    D3DCAPS2_RESERVED = &H02000000
    D3DCAPS2_CANMANAGERESOURCE = &H10000000
    D3DCAPS2_DYNAMICTEXTURES = &H20000000
    D3DCAPS2_CANAUTOGENMIPMAP = &H40000000
    ' #if !defined(D3D_DISABLE_9EX)
    D3DCAPS2_CANSHARERESOURCE = &H80000000
    ' #endif // !D3D_DISABLE_9EX
End Enum

Public Enum D3DCAPS3
    D3DCAPS3_RESERVED = &H8000001f
    '  Indicates that the device can respect the ALPHABLENDENABLE render state
    '  when fullscreen while using the FLIP or DISCARD swap effect.
    '  COPY and COPYVSYNC swap effects work whether or not this flag is set.
    D3DCAPS3_ALPHA_FULLSCREEN_FLIP_OR_DISCARD = &H00000020
    '  Indicates that the device can perform a gamma correction from
    '  a windowed back buffer containing linear content to the sRGB desktop.
    D3DCAPS3_LINEAR_TO_SRGB_PRESENTATION = &H00000080
    D3DCAPS3_COPY_TO_VIDMEM = &H00000100 ' Device can acclerate copies from sysmem to local vidmem */
    D3DCAPS3_COPY_TO_SYSTEMMEM = &H00000200 ' Device can acclerate copies from local vidmem to sysmem */
    D3DCAPS3_DXVAHD = &H00000400
    D3DCAPS3_DXVAHD_LIMITED = &H00000800
End Enum

Public Enum D3D9PresentIntervals
    D3DPRESENT_INTERVAL_DEFAULT = &H00000000
    D3DPRESENT_INTERVAL_ONE = &H00000001
    D3DPRESENT_INTERVAL_TWO = &H00000002
    D3DPRESENT_INTERVAL_THREE = &H00000004
    D3DPRESENT_INTERVAL_FOUR = &H00000008
    D3DPRESENT_INTERVAL_IMMEDIATE = &H80000000
End Enum

Public Enum D3D9CursorCaps
    '  Driver supports HW color cursor in at least hi-res modes(height >=400)
    D3DCURSORCAPS_COLOR = &H00000001
    '  Driver supports HW cursor also in low-res modes(height < 400)
    D3DCURSORCAPS_LOWRES = &H00000002
End Enum

Public Enum D3D9DevCaps
    D3DDEVCAPS_EXECUTESYSTEMMEMORY = &H00000010 ' Device can use execute buffers from system memory */
    D3DDEVCAPS_EXECUTEVIDEOMEMORY = &H00000020 ' Device can use execute buffers from video memory */
    D3DDEVCAPS_TLVERTEXSYSTEMMEMORY = &H00000040 ' Device can use TL buffers from system memory */
    D3DDEVCAPS_TLVERTEXVIDEOMEMORY = &H00000080 ' Device can use TL buffers from video memory */
    D3DDEVCAPS_TEXTURESYSTEMMEMORY = &H00000100 ' Device can texture from system memory */
    D3DDEVCAPS_TEXTUREVIDEOMEMORY = &H00000200 ' Device can texture from device memory */
    D3DDEVCAPS_DRAWPRIMTLVERTEX = &H00000400 ' Device can draw TLVERTEX primitives */
    D3DDEVCAPS_CANRENDERAFTERFLIP = &H00000800 ' Device can render without waiting for flip to complete */
    D3DDEVCAPS_TEXTURENONLOCALVIDMEM = &H00001000 ' Device can texture from nonlocal video memory */
    D3DDEVCAPS_DRAWPRIMITIVES2 = &H00002000 ' Device can support DrawPrimitives2 */
    D3DDEVCAPS_SEPARATETEXTUREMEMORIES = &H00004000 ' Device is texturing from separate memory pools */
    D3DDEVCAPS_DRAWPRIMITIVES2EX = &H00008000& ' Device can support Extended DrawPrimitives2 i.e. DX7 compliant driver*/
    D3DDEVCAPS_HWTRANSFORMANDLIGHT = &H00010000 ' Device can support transformation and lighting in hardware and DRAWPRIMITIVES2EX must be also */
    D3DDEVCAPS_CANBLTSYSTONONLOCAL = &H00020000 ' Device supports a Tex Blt from system memory to non-local vidmem */
    D3DDEVCAPS_HWRASTERIZATION = &H00080000 ' Device has HW acceleration for rasterization */
    D3DDEVCAPS_PUREDEVICE = &H00100000 ' Device supports D3DCREATE_PUREDEVICE */
    D3DDEVCAPS_QUINTICRTPATCHES = &H00200000 ' Device supports quintic Beziers and BSplines */
    D3DDEVCAPS_RTPATCHES = &H00400000 ' Device supports Rect and Tri patches */
    D3DDEVCAPS_RTPATCHHANDLEZERO = &H00800000 ' Indicates that RT Patches may be drawn efficiently using handle 0 */
    D3DDEVCAPS_NPATCHES = &H01000000 ' Device supports N-Patches */
End Enum

Public Enum D3D9PrimitiveMiscCaps
    D3DPMISCCAPS_MASKZ = &H00000002
    D3DPMISCCAPS_CULLNONE = &H00000010
    D3DPMISCCAPS_CULLCW = &H00000020
    D3DPMISCCAPS_CULLCCW = &H00000040
    D3DPMISCCAPS_COLORWRITEENABLE = &H00000080
    D3DPMISCCAPS_CLIPPLANESCALEDPOINTS = &H00000100 ' Device correctly clips scaled points to clip planes */
    D3DPMISCCAPS_CLIPTLVERTS = &H00000200 ' device will clip post-transformed vertex primitives */
    D3DPMISCCAPS_TSSARGTEMP = &H00000400 ' device supports D3DTA_TEMP for temporary register */
    D3DPMISCCAPS_BLENDOP = &H00000800 ' device supports D3DRS_BLENDOP */
    D3DPMISCCAPS_NULLREFERENCE = &H00001000 ' Reference Device that doesnt render */
    D3DPMISCCAPS_INDEPENDENTWRITEMASKS = &H00004000 ' Device supports independent write masks for MET or MRT */
    D3DPMISCCAPS_PERSTAGECONSTANT = &H00008000& ' Device supports per-stage constants */
    D3DPMISCCAPS_FOGANDSPECULARALPHA = &H00010000 ' Device supports separate fog and specular alpha (many devices
'                                                           use the specular alpha channel to store fog factor) */
    D3DPMISCCAPS_SEPARATEALPHABLEND = &H00020000 ' Device supports separate blend settings for the alpha channel */
    D3DPMISCCAPS_MRTINDEPENDENTBITDEPTHS = &H00040000 ' Device supports different bit depths for MRT */
    D3DPMISCCAPS_MRTPOSTPIXELSHADERBLENDING = &H00080000 ' Device supports post-pixel shader operations for MRT */
    D3DPMISCCAPS_FOGVERTEXCLAMPED = &H00100000 ' Device clamps fog blend factor per vertex */
    ' #if !defined(D3D_DISABLE_9EX)
    D3DPMISCCAPS_POSTBLENDSRGBCONVERT = &H00200000 ' Indicates device can perform conversion to sRGB after blending. */
    ' #endif // !D3D_DISABLE_9EX
End Enum

Public Enum D3DLINECAPS
    D3DLINECAPS_TEXTURE = &H00000001
    D3DLINECAPS_ZTEST = &H00000002
    D3DLINECAPS_BLEND = &H00000004
    D3DLINECAPS_ALPHACMP = &H00000008
    D3DLINECAPS_FOG = &H00000010
    D3DLINECAPS_ANTIALIAS = &H00000020
End Enum

Public Enum D3DPRASTERCAPS
    D3DPRASTERCAPS_DITHER = &H00000001
    D3DPRASTERCAPS_ZTEST = &H00000010
    D3DPRASTERCAPS_FOGVERTEX = &H00000080
    D3DPRASTERCAPS_FOGTABLE = &H00000100
    D3DPRASTERCAPS_MIPMAPLODBIAS = &H00002000
    D3DPRASTERCAPS_ZBUFFERLESSHSR = &H00008000&
    D3DPRASTERCAPS_FOGRANGE = &H00010000
    D3DPRASTERCAPS_ANISOTROPY = &H00020000
    D3DPRASTERCAPS_WBUFFER = &H00040000
    D3DPRASTERCAPS_WFOG = &H00100000
    D3DPRASTERCAPS_ZFOG = &H00200000
    D3DPRASTERCAPS_COLORPERSPECTIVE = &H00400000 ' Device iterates colors perspective correct */
    D3DPRASTERCAPS_SCISSORTEST = &H01000000
    D3DPRASTERCAPS_SLOPESCALEDEPTHBIAS = &H02000000
    D3DPRASTERCAPS_DEPTHBIAS = &H04000000
    D3DPRASTERCAPS_MULTISAMPLE_TOGGLE = &H08000000
End Enum

Public Enum D3DPCMPCAPS
    D3DPCMPCAPS_NEVER = &H00000001
    D3DPCMPCAPS_LESS = &H00000002
    D3DPCMPCAPS_EQUAL = &H00000004
    D3DPCMPCAPS_LESSEQUAL = &H00000008
    D3DPCMPCAPS_GREATER = &H00000010
    D3DPCMPCAPS_NOTEQUAL = &H00000020
    D3DPCMPCAPS_GREATEREQUAL = &H00000040
    D3DPCMPCAPS_ALWAYS = &H00000080
End Enum

Public Enum D3DPBLENDCAPS
    D3DPBLENDCAPS_ZERO = &H00000001
    D3DPBLENDCAPS_ONE = &H00000002
    D3DPBLENDCAPS_SRCCOLOR = &H00000004
    D3DPBLENDCAPS_INVSRCCOLOR = &H00000008
    D3DPBLENDCAPS_SRCALPHA = &H00000010
    D3DPBLENDCAPS_INVSRCALPHA = &H00000020
    D3DPBLENDCAPS_DESTALPHA = &H00000040
    D3DPBLENDCAPS_INVDESTALPHA = &H00000080
    D3DPBLENDCAPS_DESTCOLOR = &H00000100
    D3DPBLENDCAPS_INVDESTCOLOR = &H00000200
    D3DPBLENDCAPS_SRCALPHASAT = &H00000400
    D3DPBLENDCAPS_BOTHSRCALPHA = &H00000800
    D3DPBLENDCAPS_BOTHINVSRCALPHA = &H00001000
    D3DPBLENDCAPS_BLENDFACTOR = &H00002000 ' Supports both D3DBLEND_BLENDFACTOR and D3DBLEND_INVBLENDFACTOR */
    ' #if !defined(D3D_DISABLE_9EX)
    D3DPBLENDCAPS_SRCCOLOR2 = &H00004000
    D3DPBLENDCAPS_INVSRCCOLOR2 = &H00008000&
    ' #endif // !D3D_DISABLE_9EX
End Enum

Public Enum D3DPSHADECAPS
    D3DPSHADECAPS_COLORGOURAUDRGB = &H00000008
    D3DPSHADECAPS_SPECULARGOURAUDRGB = &H00000200
    D3DPSHADECAPS_ALPHAGOURAUDBLEND = &H00004000
    D3DPSHADECAPS_FOGGOURAUD = &H00080000
End Enum

Public Enum D3DPTEXTURECAPS
    D3DPTEXTURECAPS_PERSPECTIVE = &H00000001 ' /* Perspective-correct texturing is supported */
    D3DPTEXTURECAPS_POW2 = &H00000002 ' /* Power-of-2 texture dimensions are required - applies to non-Cube/Volume textures only. */
    D3DPTEXTURECAPS_ALPHA = &H00000004 ' /* Alpha in texture pixels is supported */
    D3DPTEXTURECAPS_SQUAREONLY = &H00000020 ' /* Only square textures are supported */
    D3DPTEXTURECAPS_TEXREPEATNOTSCALEDBYSIZE = &H00000040 ' /* Texture indices are not scaled by the texture size prior to interpolation */
    D3DPTEXTURECAPS_ALPHAPALETTE = &H00000080 ' /* Device can draw alpha from texture palettes */
    '  Device can use non-POW2 textures if:
    '   1) D3DTEXTURE_ADDRESS is set to CLAMP for this texture's stage
    '   2) D3DRS_WRAP(N) is zero for this texture's coordinates
    '   3) mip mapping is not enabled (use magnification filter only)
    D3DPTEXTURECAPS_NONPOW2CONDITIONAL = &H00000100
    D3DPTEXTURECAPS_PROJECTED = &H00000400 ' /* Device can do D3DTTFF_PROJECTED */
    D3DPTEXTURECAPS_CUBEMAP = &H00000800 ' /* Device can do cubemap textures */
    D3DPTEXTURECAPS_VOLUMEMAP = &H00002000 ' /* Device can do volume textures */
    D3DPTEXTURECAPS_MIPMAP = &H00004000 ' /* Device can do mipmapped textures */
    D3DPTEXTURECAPS_MIPVOLUMEMAP = &H00008000& ' /* Device can do mipmapped volume textures */
    D3DPTEXTURECAPS_MIPCUBEMAP = &H00010000 ' /* Device can do mipmapped cube maps */
    D3DPTEXTURECAPS_CUBEMAP_POW2 = &H00020000 ' /* Device requires that cubemaps be power-of-2 dimension */
    D3DPTEXTURECAPS_VOLUMEMAP_POW2 = &H00040000 ' /* Device requires that volume maps be power-of-2 dimension */
    D3DPTEXTURECAPS_NOPROJECTEDBUMPENV = &H00200000 ' /* Device does not support projected bump env lookup operation
    ' in programmable and fixed function pixel shaders */
End Enum

Public Enum D3DPTFILTERCAPS
    D3DPTFILTERCAPS_MINFPOINT = &H00000100 ' /* Min Filter */
    D3DPTFILTERCAPS_MINFLINEAR = &H00000200
    D3DPTFILTERCAPS_MINFANISOTROPIC = &H00000400
    D3DPTFILTERCAPS_MINFPYRAMIDALQUAD = &H00000800
    D3DPTFILTERCAPS_MINFGAUSSIANQUAD = &H00001000
    D3DPTFILTERCAPS_MIPFPOINT = &H00010000 ' /* Mip Filter */
    D3DPTFILTERCAPS_MIPFLINEAR = &H00020000
    '  /* D3D9Ex only -- */
    ' #if !defined(D3D_DISABLE_9EX)
    D3DPTFILTERCAPS_CONVOLUTIONMONO = &H00040000 ' /* Min and Mag for the convolution mono filter */
    ' #endif // !D3D_DISABLE_9EX
    '  /* -- D3D9Ex only */
    D3DPTFILTERCAPS_MAGFPOINT = &H01000000 ' /* Mag Filter */
    D3DPTFILTERCAPS_MAGFLINEAR = &H02000000
    D3DPTFILTERCAPS_MAGFANISOTROPIC = &H04000000
    D3DPTFILTERCAPS_MAGFPYRAMIDALQUAD = &H08000000
    D3DPTFILTERCAPS_MAGFGAUSSIANQUAD = &H10000000
End Enum

Public Enum D3DPTADDRESSCAPS
    D3DPTADDRESSCAPS_WRAP = &H00000001
    D3DPTADDRESSCAPS_MIRROR = &H00000002
    D3DPTADDRESSCAPS_CLAMP = &H00000004
    D3DPTADDRESSCAPS_BORDER = &H00000008
    D3DPTADDRESSCAPS_INDEPENDENTUV = &H00000010
    D3DPTADDRESSCAPS_MIRRORONCE = &H00000020
End Enum

Public Enum D3DSTENCILCAPS
    D3DSTENCILCAPS_KEEP = &H00000001
    D3DSTENCILCAPS_ZERO = &H00000002
    D3DSTENCILCAPS_REPLACE = &H00000004
    D3DSTENCILCAPS_INCRSAT = &H00000008
    D3DSTENCILCAPS_DECRSAT = &H00000010
    D3DSTENCILCAPS_INVERT = &H00000020
    D3DSTENCILCAPS_INCR = &H00000040
    D3DSTENCILCAPS_DECR = &H00000080
    D3DSTENCILCAPS_TWOSIDED = &H00000100
End Enum

Public Enum D3DTEXOPCAPS
    D3DTEXOPCAPS_DISABLE = &H00000001
    D3DTEXOPCAPS_SELECTARG1 = &H00000002
    D3DTEXOPCAPS_SELECTARG2 = &H00000004
    D3DTEXOPCAPS_MODULATE = &H00000008
    D3DTEXOPCAPS_MODULATE2X = &H00000010
    D3DTEXOPCAPS_MODULATE4X = &H00000020
    D3DTEXOPCAPS_ADD = &H00000040
    D3DTEXOPCAPS_ADDSIGNED = &H00000080
    D3DTEXOPCAPS_ADDSIGNED2X = &H00000100
    D3DTEXOPCAPS_SUBTRACT = &H00000200
    D3DTEXOPCAPS_ADDSMOOTH = &H00000400
    D3DTEXOPCAPS_BLENDDIFFUSEALPHA = &H00000800
    D3DTEXOPCAPS_BLENDTEXTUREALPHA = &H00001000
    D3DTEXOPCAPS_BLENDFACTORALPHA = &H00002000
    D3DTEXOPCAPS_BLENDTEXTUREALPHAPM = &H00004000
    D3DTEXOPCAPS_BLENDCURRENTALPHA = &H00008000&
    D3DTEXOPCAPS_PREMODULATE = &H00010000
    D3DTEXOPCAPS_MODULATEALPHA_ADDCOLOR = &H00020000
    D3DTEXOPCAPS_MODULATECOLOR_ADDALPHA = &H00040000
    D3DTEXOPCAPS_MODULATEINVALPHA_ADDCOLOR = &H00080000
    D3DTEXOPCAPS_MODULATEINVCOLOR_ADDALPHA = &H00100000
    D3DTEXOPCAPS_BUMPENVMAP = &H00200000
    D3DTEXOPCAPS_BUMPENVMAPLUMINANCE = &H00400000
    D3DTEXOPCAPS_DOTPRODUCT3 = &H00800000
    D3DTEXOPCAPS_MULTIPLYADD = &H01000000
    D3DTEXOPCAPS_LERP = &H02000000
End Enum

Public Enum D3DFVFCAPS
    D3DFVFCAPS_TEXCOORDCOUNTMASK = &H0000ffff& ' mask for texture coordinate count field */
    D3DFVFCAPS_DONOTSTRIPELEMENTS = &H00080000 ' Device prefers that vertex elements not be stripped */
    D3DFVFCAPS_PSIZE = &H00100000 ' Device can receive point size */
End Enum

Public Enum D3DVTXPCAPS
    D3DVTXPCAPS_TEXGEN = &H00000001 ' device can do texgen */
    D3DVTXPCAPS_MATERIALSOURCE7 = &H00000002 ' device can do DX7-level colormaterialsource ops */
    D3DVTXPCAPS_DIRECTIONALLIGHTS = &H00000008 ' device can do directional lights */
    D3DVTXPCAPS_POSITIONALLIGHTS = &H00000010 ' device can do positional lights (includes point and spot) */
    D3DVTXPCAPS_LOCALVIEWER = &H00000020 ' device can do local viewer */
    D3DVTXPCAPS_TWEENING = &H00000040 ' device can do vertex tweening */
    D3DVTXPCAPS_TEXGEN_SPHEREMAP = &H00000100 ' device supports D3DTSS_TCI_SPHEREMAP */
    D3DVTXPCAPS_NO_TEXGEN_NONLOCALVIEWER = &H00000200 ' device does not support TexGen in non-local viewer mode */
End Enum

Public Enum D3DDEVCAPS2
    D3DDEVCAPS2_STREAMOFFSET = &H00000001 ' Device supports offsets in streams. Must be set by DX9 drivers */
    D3DDEVCAPS2_DMAPNPATCH = &H00000002 ' Device supports displacement maps for N-Patches*/
    D3DDEVCAPS2_ADAPTIVETESSRTPATCH = &H00000004 ' Device supports adaptive tesselation of RT-patches*/
    D3DDEVCAPS2_ADAPTIVETESSNPATCH = &H00000008 ' Device supports adaptive tesselation of N-patches*/
    D3DDEVCAPS2_CAN_STRETCHRECT_FROM_TEXTURES = &H00000010 ' Device supports StretchRect calls with a texture as the source*/
    D3DDEVCAPS2_PRESAMPLEDDMAPNPATCH = &H00000020 ' Device supports presampled displacement maps for N-Patches */
    D3DDEVCAPS2_VERTEXELEMENTSCANSHARESTREAMOFFSET = &H00000040 ' Vertex elements in a vertex declaration can share the same stream offset */
End Enum

Public Enum D3DDTCAPS
    D3DDTCAPS_UBYTE4 = &H00000001
    D3DDTCAPS_UBYTE4N = &H00000002
    D3DDTCAPS_SHORT2N = &H00000004
    D3DDTCAPS_SHORT4N = &H00000008
    D3DDTCAPS_USHORT2N = &H00000010
    D3DDTCAPS_USHORT4N = &H00000020
    D3DDTCAPS_UDEC3 = &H00000040
    D3DDTCAPS_DEC3N = &H00000080
    D3DDTCAPS_FLOAT16_2 = &H00000100
    D3DDTCAPS_FLOAT16_4 = &H00000200
End Enum

Public Enum D3DSPD
    D3DSPD_NONE = 0
    D3DSPD_IUNKNOWN = 1
End Enum

Public Enum D3DCREATE
    D3DCREATE_FPU_PRESERVE = &H00000002
    D3DCREATE_MULTITHREADED = &H00000004
    D3DCREATE_PUREDEVICE = &H00000010
    D3DCREATE_SOFTWARE_VERTEXPROCESSING = &H00000020
    D3DCREATE_HARDWARE_VERTEXPROCESSING = &H00000040
    D3DCREATE_MIXED_VERTEXPROCESSING = &H00000080
    D3DCREATE_DISABLE_DRIVER_MANAGEMENT = &H00000100
    D3DCREATE_ADAPTERGROUP_DEVICE = &H00000200
    D3DCREATE_DISABLE_DRIVER_MANAGEMENT_EX = &H00000400
    '  This flag causes the D3D runtime not to alter the focus
    '  window in any way. Use with caution- the burden of supporting
    '  focus management events (alt-tab, etc.) falls on the
    '  application, and appropriate responses (switching display
    '  mode, etc.) should be coded.
    D3DCREATE_NOWINDOWCHANGES = &H00000800
    '  Disable multithreading for software vertex processing
    D3DCREATE_DISABLE_PSGP_THREADING = &H00002000
    '  This flag enables present statistics on device.
    D3DCREATE_ENABLE_PRESENTSTATS = &H00004000
    '  This flag disables printscreen support in the runtime for this device
    D3DCREATE_DISABLE_PRINTSCREEN = &H00008000&
    D3DCREATE_SCREENSAVER = &H10000000
End Enum

Public Enum D3D9SetGammaRampFlags
    D3DSGR_NO_CALIBRATION = &H00000000
    D3DSGR_CALIBRATE = &H00000001
End Enum

Public Enum D3D9SetCursorPosFlags
    D3DCURSOR_IMMEDIATE_UPDATE = &H00000001
End Enum

Public Enum D3DPRESENT
    D3DPRESENT_DONOTWAIT = &H00000001
    D3DPRESENT_LINEAR_CONTENT = &H00000002
    D3DPRESENT_DONOTFLIP = &H00000004
    D3DPRESENT_FLIPRESTART = &H00000008
    D3DPRESENT_VIDEO_RESTRICT_TO_MONITOR = &H00000010
    D3DPRESENT_UPDATEOVERLAYONLY = &H00000020
    D3DPRESENT_HIDEOVERLAY = &H00000040
    D3DPRESENT_UPDATECOLORKEY = &H00000080
    D3DPRESENT_FORCEIMMEDIATE = &H00000100
End Enum

Public Enum D3D9ERR
    D3D_OK = 0
    D3DERR_WRONGTEXTUREFORMAT = &H88760818 'MAKE_D3DHRESULT(2072)
    D3DERR_UNSUPPORTEDCOLOROPERATION = &H88760819
    D3DERR_UNSUPPORTEDCOLORARG = &H8876081A
    D3DERR_UNSUPPORTEDALPHAOPERATION = &H8876081B
    D3DERR_UNSUPPORTEDALPHAARG = &H8876081C
    D3DERR_TOOMANYOPERATIONS = &H8876081D
    D3DERR_CONFLICTINGTEXTUREFILTER = &H8876081E
    D3DERR_UNSUPPORTEDFACTORVALUE = &H8876081F
    D3DERR_CONFLICTINGRENDERSTATE = &H88760821
    D3DERR_UNSUPPORTEDTEXTUREFILTER = &H88760822
    D3DERR_CONFLICTINGTEXTUREPALETTE = &H88760826
    D3DERR_DRIVERINTERNALERROR = &H88760827
    D3DERR_NOTFOUND = &H88760866
    D3DERR_MOREDATA = &H88760867
    D3DERR_DEVICELOST = &H88760868
    D3DERR_DEVICENOTRESET = &H88760869
    D3DERR_NOTAVAILABLE = &H8876086A
    D3DERR_OUTOFVIDEOMEMORY = &H8876017C
    D3DERR_INVALIDDEVICE = &H8876086B
    D3DERR_INVALIDCALL = &H8876086C
    D3DERR_DRIVERINVALIDCALL = &H8876086D
    D3DERR_WASSTILLDRAWING = &H8876021C
    D3DOK_NOAUTOGEN = &H8876086F
    D3DERR_DEVICEREMOVED = &H88760870
    S_NOT_RESIDENT = &H8760875
    S_RESIDENT_IN_SHARED_MEMORY = &H8760876
    S_PRESENT_MODE_CHANGED = &H8760877
    S_PRESENT_OCCLUDED = &H8760878
    D3DERR_DEVICEHUNG = &H88760874
    D3DERR_UNSUPPORTEDOVERLAY = &H8876087b
    D3DERR_UNSUPPORTEDOVERLAYFORMAT = &H8876087c
    D3DERR_CANNOTPROTECTCONTENT = &H8876087d
    D3DERR_UNSUPPORTEDCRYPTO = &H8876087e
    D3DERR_PRESENT_STATISTICS_DISJOINT = &H88760884
End Enum


Public Const DIRECT3D_VERSION As Long = 2304
Public Const D3D_SDK_VERSION As Long = 32
Public Const D3D9b_SDK_VERSION As Long = 31
Public Const D3DADAPTER_DEFAULT As Long = 0
Public Const D3DENUM_WHQL_LEVEL As Long = 2
Public Const D3DENUM_NO_DRIVERVERSION As Long = 4
Public Const D3DPRESENT_BACK_BUFFERS_MAX As Long = 3
Public Const D3DPRESENT_BACK_BUFFERS_MAX_EX As Long = 30

[Description("Create an IDirect3D9 object and return an interface to it.")]
Public Declare PtrSafe Function Direct3DCreate9 Lib "D3d9.dll" (ByVal SDKVersion As Long, pD3D9 As IDirect3D9) As Long

Public Declare PtrSafe Function D3DPERF_BeginEvent Lib "D3d9.dll" (ByVal col As Long, ByVal wszName As String) As Long

Public Declare PtrSafe Function D3DPERF_EndEvent Lib "D3d9.dll" () As Long

Public Declare PtrSafe Sub D3DPERF_SetMarker Lib "D3d9.dll" (ByVal col As Long, ByVal wszName As String)

Public Declare PtrSafe Sub D3DPERF_SetRegion Lib "D3d9.dll" (ByVal col As Long, ByVal wszName As String)

Public Declare PtrSafe Function D3DPERF_QueryRepeatFrame Lib "D3d9.dll" () As BOOL

Public Declare PtrSafe Sub D3DPERF_SetOptions Lib "D3d9.dll" (ByVal dwOptions As Long)

Public Declare PtrSafe Function D3DPERF_GetStatus Lib "D3d9.dll" () As Long

 Public Declare PtrSafe Function Direct3DCreate9Ex Lib "D3d9.dll" (ByVal SDKVersion As Long, ByRef pd3dex As IDirect3D9Ex) As Long
 [PreserveSig(False)]
  Public Declare PtrSafe Function Direct3DCreate9Ex Lib "D3d9.dll" (ByVal SDKVersion As Long) As IDirect3D9Ex
 

Public Enum D3DXSHADER
    D3DXSHADER_DEBUG = (1 << 0)
    D3DXSHADER_SKIPVALIDATION = (1 << 1)
    D3DXSHADER_SKIPOPTIMIZATION = (1 << 2)
    D3DXSHADER_PACKMATRIX_ROWMAJOR = (1 << 3)
    D3DXSHADER_PACKMATRIX_COLUMNMAJOR = (1 << 4)
    D3DXSHADER_PARTIALPRECISION = (1 << 5)
    D3DXSHADER_FORCE_VS_SOFTWARE_NOOPT = (1 << 6)
    D3DXSHADER_FORCE_PS_SOFTWARE_NOOPT = (1 << 7)
    D3DXSHADER_NO_PRESHADER = (1 << 8)
    D3DXSHADER_AVOID_FLOW_CONTROL = (1 << 9)
    D3DXSHADER_PREFER_FLOW_CONTROL = (1 << 10)
    D3DXSHADER_ENABLE_BACKWARDS_COMPATIBILITY = (1 << 12)
    D3DXSHADER_IEEE_STRICTNESS = (1 << 13)
    D3DXSHADER_USE_LEGACY_D3DX9_31_DLL = (1& << 16)
'  optimization level flags
    D3DXSHADER_OPTIMIZATION_LEVEL0 = (1 << 14)
    D3DXSHADER_OPTIMIZATION_LEVEL1 = 0
    D3DXSHADER_OPTIMIZATION_LEVEL2 = ((1& << 14) Or (1& << 15))
    D3DXSHADER_OPTIMIZATION_LEVEL3 = (1& << 15)
End Enum
' ----------------------------------------------------------------------------
'  D3DXCONSTTABLE flags:
'  -------------------
Public Enum D3DXCONSTTABLE
    D3DXCONSTTABLE_LARGEADDRESSAWARE = (1& << 17)
End Enum

[Description("Describes preprocessor definitions used by an effect object.")]
Public Type D3DXMACRO
    Name As LongPtr
    Definition As LongPtr
End Type

[Description("Semantics map a parameter to vertex or pixel shader registers.")]
Public Type D3DXSEMANTIC
    Usage As Long
    UsageIndex As Long
End Type

[Description("Data type of the register.")]
Public Enum D3DXREGISTER_SET
    D3DXRS_BOOL
    D3DXRS_INT4
    D3DXRS_FLOAT4
    D3DXRS_SAMPLER
    D3DXRS_FORCE_DWORD = &H7fffffff
End Enum

[Description("The type of object.")]
Public Enum D3DXPARAMETER_CLASS
    D3DXPC_SCALAR
    D3DXPC_VECTOR
    D3DXPC_MATRIX_ROWS
    D3DXPC_MATRIX_COLUMNS
    D3DXPC_OBJECT
    D3DXPC_STRUCT
    D3DXPC_FORCE_DWORD = &H7fffffff
End Enum

[Description("Describes the data contained by the enumeration.")]
Public Enum D3DXPARAMETER_TYPE
    D3DXPT_VOID
    D3DXPT_BOOL
    D3DXPT_INT
    D3DXPT_FLOAT
    D3DXPT_STRING
    D3DXPT_TEXTURE
    D3DXPT_TEXTURE1D
    D3DXPT_TEXTURE2D
    D3DXPT_TEXTURE3D
    D3DXPT_TEXTURECUBE
    D3DXPT_SAMPLER
    D3DXPT_SAMPLER1D
    D3DXPT_SAMPLER2D
    D3DXPT_SAMPLER3D
    D3DXPT_SAMPLERCUBE
    D3DXPT_PIXELSHADER
    D3DXPT_VERTEXSHADER
    D3DXPT_PIXELFRAGMENT
    D3DXPT_VERTEXFRAGMENT
    D3DXPT_UNSUPPORTED
    D3DXPT_FORCE_DWORD = &H7fffffff
End Enum

[Description("Describes the location for the include file.")]
Public Enum D3DXINCLUDE_TYPE
    D3DXINC_LOCAL = 0
    D3DXINC_SYSTEM = 1
    D3DXINC_FORCE_DWORD = 2147483647
End Enum


[Description("A description of the constant table.")]
Public Type D3DXCONSTANTTABLE_DESC
    Creator As LongPtr
    Version As Long
    constants As Long
End Type

[Description("A description of a constant in a constant table.")]
Public Type D3DXCONSTANT_DESC
    Name As LongPtr
    RegisterSet As D3DXREGISTER_SET
    RegisterIndex As Long
    RegisterCount As Long
    Class As D3DXPARAMETER_CLASS
    Ttype As D3DXPARAMETER_TYPE
    Rows As Long
    Columns As Long
    Elements As Long
    StructMembers As Long
    Bytes As Long
    DefaultValue As LongPtr
End Type

[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXAssembleShaderFromFileA Lib "D3DX9_43.dll" (ByVal pSrcFile As String, ByRef pDefines As D3DXMACRO, ByVal pInclude As ID3DXInclude, ByVal Flags As D3DXSHADER, ByRef ppShader As ID3DXBuffer, ByRef ppErrorMsgs As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXAssembleShaderFromFileW Lib "D3DX9_43.dll" (ByVal pSrcFile As LongPtr, ByRef pDefines As D3DXMACRO, ByVal pInclude As ID3DXInclude, ByVal Flags As D3DXSHADER, ByRef ppShader As ID3DXBuffer, ByRef ppErrorMsgs As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXAssembleShaderFromFile Lib "D3DX9_43.dll" Alias "D3DXAssembleShaderFromFileW" (ByVal pSrcFile As String, ByRef pDefines As D3DXMACRO, ByVal pInclude As ID3DXInclude, ByVal Flags As D3DXSHADER, ByRef ppShader As ID3DXBuffer, ByRef ppErrorMsgs As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXAssembleShaderFromResourceA Lib "D3DX9_43.dll" (ByVal hSrcModule As LongPtr, ByVal pSrcResource As String, ByRef pDefines As D3DXMACRO, ByVal pInclude As ID3DXInclude, ByVal Flags As D3DXSHADER, ByRef ppShader As ID3DXBuffer, ByRef ppErrorMsgs As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXAssembleShaderFromResourceW Lib "D3DX9_43.dll" (ByVal hSrcModule As LongPtr, ByVal pSrcResource As LongPtr, ByRef pDefines As D3DXMACRO, ByVal pInclude As ID3DXInclude, ByVal Flags As D3DXSHADER, ByRef ppShader As ID3DXBuffer, ByRef ppErrorMsgs As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXAssembleShaderFromResource Lib "D3DX9_43.dll" Alias "D3DXAssembleShaderFromResourceW" (ByVal hSrcModule As LongPtr, ByVal pSrcResource As String, ByRef pDefines As D3DXMACRO, ByVal pInclude As ID3DXInclude, ByVal Flags As D3DXSHADER, ByRef ppShader As ID3DXBuffer, ByRef ppErrorMsgs As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXAssembleShader Lib "D3DX9_43.dll" (ByVal pSrcData As String, ByVal SrcDataLen As Long, ByRef pDefines As D3DXMACRO, ByVal pInclude As ID3DXInclude, ByVal Flags As D3DXSHADER, ByRef ppShader As ID3DXBuffer, ByRef ppErrorMsgs As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCompileShaderFromFileA Lib "D3DX9_43.dll" (ByVal pSrcFile As String, ByRef pDefines As D3DXMACRO, ByVal pInclude As ID3DXInclude, ByVal pFunctionName As String, ByVal pProfile As String, ByVal Flags As D3DXSHADER, ByRef ppShader As ID3DXBuffer, ByRef ppErrorMsgs As ID3DXBuffer, ByRef ppConstantTable As ID3DXConstantTable) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCompileShaderFromFileW Lib "D3DX9_43.dll" (ByVal pSrcFile As LongPtr, ByRef pDefines As D3DXMACRO, ByVal pInclude As ID3DXInclude, ByVal pFunctionName As LongPtr, ByVal pProfile As LongPtr, ByVal Flags As D3DXSHADER, ByRef ppShader As ID3DXBuffer, ByRef ppErrorMsgs As ID3DXBuffer, ByRef ppConstantTable As ID3DXConstantTable) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXCompileShaderFromFile Lib "D3DX9_43.dll" Alias "D3DXCompileShaderFromFileW" (ByVal pSrcFile As String, ByRef pDefines As D3DXMACRO, ByVal pInclude As ID3DXInclude, ByVal pFunctionName As String, ByVal pProfile As String, ByVal Flags As D3DXSHADER, ByRef ppShader As ID3DXBuffer, ByRef ppErrorMsgs As ID3DXBuffer, ByRef ppConstantTable As ID3DXConstantTable) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCompileShaderFromResourceA Lib "D3DX9_43.dll" (ByVal hSrcModule As LongPtr, ByVal pSrcResource As String, ByRef pDefines As D3DXMACRO, ByVal pInclude As ID3DXInclude, ByVal pFunctionName As String, ByVal pProfile As String, ByVal Flags As D3DXSHADER, ByRef ppShader As ID3DXBuffer, ByRef ppErrorMsgs As ID3DXBuffer, ByRef ppConstantTable As ID3DXConstantTable) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCompileShaderFromResourceW Lib "D3DX9_43.dll" (ByVal hSrcModule As LongPtr, ByVal pSrcResource As LongPtr, ByRef pDefines As D3DXMACRO, ByVal pInclude As ID3DXInclude, ByVal pFunctionName As LongPtr, ByVal pProfile As LongPtr, ByVal Flags As D3DXSHADER, ByRef ppShader As ID3DXBuffer, ByRef ppErrorMsgs As ID3DXBuffer, ByRef ppConstantTable As ID3DXConstantTable) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXCompileShaderFromResource Lib "D3DX9_43.dll" Alias "D3DXCompileShaderFromResourceW" (ByVal hSrcModule As LongPtr, ByVal pSrcResource As String, ByRef pDefines As D3DXMACRO, ByVal pInclude As ID3DXInclude, ByVal pFunctionName As String, ByVal pProfile As String, ByVal Flags As D3DXSHADER, ByRef ppShader As ID3DXBuffer, ByRef ppErrorMsgs As ID3DXBuffer, ByRef ppConstantTable As ID3DXConstantTable) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCompileShader Lib "D3DX9_43.dll" (ByVal pSrcData As String, ByVal SrcDataLen As Long, ByRef pDefines As D3DXMACRO, ByVal pInclude As ID3DXInclude, ByVal pFunctionName As String, ByVal pProfile As String, ByVal Flags As D3DXSHADER, ByRef ppShader As ID3DXBuffer, ByRef ppErrorMsgs As ID3DXBuffer, ByRef ppConstantTable As ID3DXConstantTable) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCompileShader Lib "D3DX9_43.dll" (ByVal pSrcData As LongPtr, ByVal SrcDataLen As Long, ByRef pDefines As D3DXMACRO, ByVal pInclude As ID3DXInclude, ByVal pFunctionName As LongPtr, ByVal pProfile As LongPtr, ByVal Flags As D3DXSHADER, ByRef ppShader As ID3DXBuffer, ByRef ppErrorMsgs As ID3DXBuffer, ByRef ppConstantTable As ID3DXConstantTable) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXDisassembleShader Lib "D3DX9_43.dll" (ByRef pShader As Long, ByVal EnableColorCode As BOOL, ByVal pComments As String, ByRef ppDisassembly As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXGetPixelShaderProfile Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9) As LongPtr /* ANSI */
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXGetVertexShaderProfile Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9) As LongPtr /* ANSI */
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXFindShaderComment Lib "D3DX9_43.dll" (ByRef pFunction As Long, ByVal FourCC As Long, ByRef ppData As LongPtr, ByRef pSizeInBytes As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXGetShaderSize Lib "D3DX9_43.dll" (ByRef pFunction As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXGetShaderVersion Lib "D3DX9_43.dll" (ByRef pFunction As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXGetShaderInputSemantics Lib "D3DX9_43.dll" (ByRef pFunction As Long, ByRef pSemantics As D3DXSEMANTIC, ByRef pCount As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXGetShaderOutputSemantics Lib "D3DX9_43.dll" (ByRef pFunction As Long, ByRef pSemantics As D3DXSEMANTIC, ByRef pCount As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXGetShaderSamplers Lib "D3DX9_43.dll" (ByRef pFunction As Long, ByRef pSamplers As LongPtr /* ANSI */, ByRef pCount As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXGetShaderConstantTable Lib "D3DX9_43.dll" (ByRef pFunction As Long, ByRef ppConstantTable As ID3DXConstantTable) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXGetShaderConstantTableEx Lib "D3DX9_43.dll" (ByRef pFunction As Long, ByVal Flags As D3DXCONSTTABLE, ByRef ppConstantTable As ID3DXConstantTable) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateTextureShader Lib "D3DX9_43.dll" (ByRef pFunction As Long, ByRef ppTextureShader As ID3DXTextureShader) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXPreprocessShaderFromFileA Lib "D3DX9_43.dll" (ByVal pSrcFile As String, ByRef pDefines As D3DXMACRO, ByVal pInclude As ID3DXInclude, ByRef ppShaderText As ID3DXBuffer, ByRef ppErrorMsgs As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXPreprocessShaderFromFileW Lib "D3DX9_43.dll" (ByVal pSrcFile As LongPtr, ByRef pDefines As D3DXMACRO, ByVal pInclude As ID3DXInclude, ByRef ppShaderText As ID3DXBuffer, ByRef ppErrorMsgs As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXPreprocessShaderFromFile Lib "D3DX9_43.dll" Alias "D3DXPreprocessShaderFromFileW" (ByVal pSrcFile As String, ByRef pDefines As D3DXMACRO, ByVal pInclude As ID3DXInclude, ByRef ppShaderText As ID3DXBuffer, ByRef ppErrorMsgs As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXPreprocessShaderFromResourceA Lib "D3DX9_43.dll" (ByVal hSrcModule As LongPtr, ByVal pSrcResource As String, ByRef pDefines As D3DXMACRO, ByVal pInclude As ID3DXInclude, ByRef ppShaderText As ID3DXBuffer, ByRef ppErrorMsgs As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXPreprocessShaderFromResourceW Lib "D3DX9_43.dll" (ByVal hSrcModule As LongPtr, ByVal pSrcResource As LongPtr, ByRef pDefines As D3DXMACRO, ByVal pInclude As ID3DXInclude, ByRef ppShaderText As ID3DXBuffer, ByRef ppErrorMsgs As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXPreprocessShaderFromResource Lib "D3DX9_43.dll" Alias "D3DXPreprocessShaderFromResourceW" (ByVal hSrcModule As LongPtr, ByVal pSrcResource As String, ByRef pDefines As D3DXMACRO, ByVal pInclude As ID3DXInclude, ByRef ppShaderText As ID3DXBuffer, ByRef ppErrorMsgs As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXPreprocessShader Lib "D3DX9_43.dll" (ByVal pSrcData As String, ByVal SrcDataSize As Long, ByRef pDefines As D3DXMACRO, ByVal pInclude As ID3DXInclude, ByRef ppShaderText As ID3DXBuffer, ByRef ppErrorMsgs As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXPreprocessShader Lib "D3DX9_43.dll" (ByVal pSrcData As LongPtr, ByVal SrcDataSize As Long, ByRef pDefines As D3DXMACRO, ByVal pInclude As ID3DXInclude, ByRef ppShaderText As ID3DXBuffer, ByRef ppErrorMsgs As ID3DXBuffer) As Long

Public Type D3DXSHADER_CONSTANTTABLE
    Size As Long ' sizeof(D3DXSHADER_CONSTANTTABLE)
    Creator As Long ' LPCSTR offset
    Version As Long ' shader version
    Constants As Long ' number of constants
    ConstantInfo As Long ' D3DXSHADER_CONSTANTINFO[Constants] offset
    Flags As Long ' flags shader was compiled with
    Target As Long ' LPCSTR offset 
End Type

Public Type D3DXSHADER_CONSTANTINFO
    Name As Long ' LPCSTR offset
    RegisterSet As Integer ' D3DXREGISTER_SET
    RegisterIndex As Integer ' register number
    RegisterCount As Integer ' number of registers
    Reserved As Integer ' reserved
    TypeInfo As Long ' D3DXSHADER_TYPEINFO offset
    DefaultValue As Long ' offset of default value
End Type

Public Type D3DXSHADER_TYPEINFO
    Class As Integer ' D3DXPARAMETER_CLASS
    Type As Integer ' D3DXPARAMETER_TYPE
    Rows As Integer ' number of rows (matrices)
    Columns As Integer ' number of columns (vectors and matrices)
    Elements As Integer ' array dimension
    StructMembers As Integer ' number of struct members
    StructMemberInfo As Long ' D3DXSHADER_STRUCTMEMBERINFO[Members] offset
End Type

Public Type D3DXSHADER_STRUCTMEMBERINFO
    Name As Long ' LPCSTR offset
    TypeInfo As Long ' D3DXSHADER_TYPEINFO offset
End Type



[Description("Describes a four-component vector.")]
Public Type D3DVECTOR4
    x As Single
    y As Single
    Z As Single
    W As Single
End Type




Public Function D3DAUTHENTICATEDQUERY_PROTECTION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha84eb584, &Hc495, &H48aa, &Hb9, &H4d, &H8b, &Hd2, &Hd6, &Hfb, &Hce, &H5)
D3DAUTHENTICATEDQUERY_PROTECTION = iid
End Function
Public Function D3DAUTHENTICATEDQUERY_CHANNELTYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hbc1b18a5, &Hb1fb, &H42ab, &Hbd, &H94, &Hb5, &H82, &H8b, &H4b, &Hf7, &Hbe)
D3DAUTHENTICATEDQUERY_CHANNELTYPE = iid
End Function
Public Function D3DAUTHENTICATEDQUERY_DEVICEHANDLE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hec1c539d, &H8cff, &H4e2a, &Hbc, &Hc4, &Hf5, &H69, &H2f, &H99, &Hf4, &H80)
D3DAUTHENTICATEDQUERY_DEVICEHANDLE = iid
End Function
Public Function D3DAUTHENTICATEDQUERY_CRYPTOSESSION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2634499e, &Hd018, &H4d74, &Hac, &H17, &H7f, &H72, &H40, &H59, &H52, &H8d)
D3DAUTHENTICATEDQUERY_CRYPTOSESSION = iid
End Function
Public Function D3DAUTHENTICATEDQUERY_RESTRICTEDSHAREDRESOURCEPROCESSCOUNT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hdb207b3, &H9450, &H46a6, &H82, &Hde, &H1b, &H96, &Hd4, &H4f, &H9c, &Hf2)
D3DAUTHENTICATEDQUERY_RESTRICTEDSHAREDRESOURCEPROCESSCOUNT = iid
End Function
Public Function D3DAUTHENTICATEDQUERY_RESTRICTEDSHAREDRESOURCEPROCESS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H649bbadb, &Hf0f4, &H4639, &Ha1, &H5b, &H24, &H39, &H3f, &Hc3, &Hab, &Hac)
D3DAUTHENTICATEDQUERY_RESTRICTEDSHAREDRESOURCEPROCESS = iid
End Function
Public Function D3DAUTHENTICATEDQUERY_UNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H12f0bd6, &He662, &H4474, &Hbe, &Hfd, &Haa, &H53, &He5, &H14, &H3c, &H6d)
D3DAUTHENTICATEDQUERY_UNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT = iid
End Function
Public Function D3DAUTHENTICATEDQUERY_OUTPUTIDCOUNT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2c042b5e, &H8c07, &H46d5, &Haa, &Hbe, &H8f, &H75, &Hcb, &Had, &H4c, &H31)
D3DAUTHENTICATEDQUERY_OUTPUTIDCOUNT = iid
End Function
Public Function D3DAUTHENTICATEDQUERY_OUTPUTID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H839ddca3, &H9b4e, &H41e4, &Hb0, &H53, &H89, &H2b, &Hd2, &Ha1, &H1e, &He7)
D3DAUTHENTICATEDQUERY_OUTPUTID = iid
End Function
Public Function D3DAUTHENTICATEDQUERY_ACCESSIBILITYATTRIBUTES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6214d9d2, &H432c, &H4abb, &H9f, &Hce, &H21, &H6e, &Hea, &H26, &H9e, &H3b)
D3DAUTHENTICATEDQUERY_ACCESSIBILITYATTRIBUTES = iid
End Function
Public Function D3DAUTHENTICATEDQUERY_ENCRYPTIONWHENACCESSIBLEGUIDCOUNT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb30f7066, &H203c, &H4b07, &H93, &Hfc, &Hce, &Haa, &Hfd, &H61, &H24, &H1e)
D3DAUTHENTICATEDQUERY_ENCRYPTIONWHENACCESSIBLEGUIDCOUNT = iid
End Function
Public Function D3DAUTHENTICATEDQUERY_ENCRYPTIONWHENACCESSIBLEGUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf83a5958, &He986, &H4bda, &Hbe, &Hb0, &H41, &H1f, &H6a, &H7a, &H1, &Hb7)
D3DAUTHENTICATEDQUERY_ENCRYPTIONWHENACCESSIBLEGUID = iid
End Function
Public Function D3DAUTHENTICATEDQUERY_CURRENTENCRYPTIONWHENACCESSIBLE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hec1791c7, &Hdad3, &H4f15, &H9e, &Hc3, &Hfa, &Ha9, &H3d, &H60, &Hd4, &Hf0)
D3DAUTHENTICATEDQUERY_CURRENTENCRYPTIONWHENACCESSIBLE = iid
End Function
Public Function D3DAUTHENTICATEDCONFIGURE_INITIALIZE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6114bdb, &H3523, &H470a, &H8d, &Hca, &Hfb, &Hc2, &H84, &H51, &H54, &Hf0)
D3DAUTHENTICATEDCONFIGURE_INITIALIZE = iid
End Function
Public Function D3DAUTHENTICATEDCONFIGURE_PROTECTION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H50455658, &H3f47, &H4362, &Hbf, &H99, &Hbf, &Hdf, &Hcd, &He9, &Hed, &H29)
D3DAUTHENTICATEDCONFIGURE_PROTECTION = iid
End Function
Public Function D3DAUTHENTICATEDCONFIGURE_CRYPTOSESSION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6346cc54, &H2cfc, &H4ad4, &H82, &H24, &Hd1, &H58, &H37, &Hde, &H77, &H0)
D3DAUTHENTICATEDCONFIGURE_CRYPTOSESSION = iid
End Function
Public Function D3DAUTHENTICATEDCONFIGURE_SHAREDRESOURCE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H772d047, &H1b40, &H48e8, &H9c, &Ha6, &Hb5, &Hf5, &H10, &Hde, &H9f, &H1)
D3DAUTHENTICATEDCONFIGURE_SHAREDRESOURCE = iid
End Function
Public Function D3DAUTHENTICATEDCONFIGURE_ENCRYPTIONWHENACCESSIBLE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H41fff286, &H6ae0, &H4d43, &H9d, &H55, &Ha4, &H6e, &H9e, &Hfd, &H15, &H8a)
D3DAUTHENTICATEDCONFIGURE_ENCRYPTIONWHENACCESSIBLE = iid
End Function

Public Function IID_IDirect3D9() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H81bdcbca, &H64d4, &H426d, &Hae, &H8d, &Had, &H1, &H47, &Hf4, &H27, &H5c)
IID_IDirect3D9 = iid
End Function
Public Function IID_IDirect3DDevice9() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd0223b96, &Hbf7a, &H43fd, &H92, &Hbd, &Ha4, &H3b, &Hd, &H82, &Hb9, &Heb)
IID_IDirect3DDevice9 = iid
End Function
Public Function IID_IDirect3DResource9() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5eec05d, &H8f7d, &H4362, &Hb9, &H99, &Hd1, &Hba, &Hf3, &H57, &Hc7, &H4)
IID_IDirect3DResource9 = iid
End Function
Public Function IID_IDirect3DBaseTexture9() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H580ca87e, &H1d3c, &H4d54, &H99, &H1d, &Hb7, &Hd3, &He3, &Hc2, &H98, &Hce)
IID_IDirect3DBaseTexture9 = iid
End Function
Public Function IID_IDirect3DTexture9() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H85c31227, &H3de5, &H4f00, &H9b, &H3a, &Hf1, &H1a, &Hc3, &H8c, &H18, &Hb5)
IID_IDirect3DTexture9 = iid
End Function
Public Function IID_IDirect3DCubeTexture9() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hfff32f81, &Hd953, &H473a, &H92, &H23, &H93, &Hd6, &H52, &Hab, &Ha9, &H3f)
IID_IDirect3DCubeTexture9 = iid
End Function
Public Function IID_IDirect3DVolumeTexture9() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2518526c, &He789, &H4111, &Ha7, &Hb9, &H47, &Hef, &H32, &H8d, &H13, &He6)
IID_IDirect3DVolumeTexture9 = iid
End Function
Public Function IID_IDirect3DVertexBuffer9() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb64bb1b5, &Hfd70, &H4df6, &Hbf, &H91, &H19, &Hd0, &Ha1, &H24, &H55, &He3)
IID_IDirect3DVertexBuffer9 = iid
End Function
Public Function IID_IDirect3DIndexBuffer9() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7c9dd65e, &Hd3f7, &H4529, &Hac, &Hee, &H78, &H58, &H30, &Hac, &Hde, &H35)
IID_IDirect3DIndexBuffer9 = iid
End Function
Public Function IID_IDirect3DSurface9() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hcfbaf3a, &H9ff6, &H429a, &H99, &Hb3, &Ha2, &H79, &H6a, &Hf8, &Hb8, &H9b)
IID_IDirect3DSurface9 = iid
End Function
Public Function IID_IDirect3DVolume9() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H24f416e6, &H1f67, &H4aa7, &Hb8, &H8e, &Hd3, &H3f, &H6f, &H31, &H28, &Ha1)
IID_IDirect3DVolume9 = iid
End Function
Public Function IID_IDirect3DSwapChain9() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H794950f2, &Hadfc, &H458a, &H90, &H5e, &H10, &Ha1, &Hb, &Hb, &H50, &H3b)
IID_IDirect3DSwapChain9 = iid
End Function
Public Function IID_IDirect3DVertexDeclaration9() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hdd13c59c, &H36fa, &H4098, &Ha8, &Hfb, &Hc7, &Hed, &H39, &Hdc, &H85, &H46)
IID_IDirect3DVertexDeclaration9 = iid
End Function
Public Function IID_IDirect3DVertexShader9() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hefc5557e, &H6265, &H4613, &H8a, &H94, &H43, &H85, &H78, &H89, &Heb, &H36)
IID_IDirect3DVertexShader9 = iid
End Function
Public Function IID_IDirect3DPixelShader9() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6d3bdbdc, &H5b02, &H4415, &Hb8, &H52, &Hce, &H5e, &H8b, &Hcc, &Hb2, &H89)
IID_IDirect3DPixelShader9 = iid
End Function
Public Function IID_IDirect3DStateBlock9() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb07c4fe5, &H310d, &H4ba8, &Ha2, &H3c, &H4f, &Hf, &H20, &H6f, &H21, &H8b)
IID_IDirect3DStateBlock9 = iid
End Function
Public Function IID_IDirect3DQuery9() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd9771460, &Ha695, &H4f26, &Hbb, &Hd3, &H27, &Hb8, &H40, &Hb5, &H41, &Hcc)
IID_IDirect3DQuery9 = iid
End Function
Public Function IID_HelperName() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He4a36723, &Hfdfe, &H4b22, &Hb1, &H46, &H3c, &H4, &Hc0, &H7f, &H4c, &Hc8)
IID_HelperName = iid
End Function
Public Function IID_IDirect3D9Ex() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H02177241, &H69FC, &H400C, &H8F, &HF1, &H93, &HA4, &H4D, &HF6, &H86, &H1D)
IID_IDirect3D9Ex = iid
End Function
Public Function IID_IDirect3DDevice9Ex() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb18b10ce, &H2649, &H405a, &H87, &Hf, &H95, &Hf7, &H77, &Hd4, &H31, &H3a)
IID_IDirect3DDevice9Ex = iid
End Function
Public Function IID_IDirect3DSwapChain9Ex() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H91886caf, &H1c3d, &H4d2e, &Ha0, &Hab, &H3e, &H4c, &H7d, &H8d, &H33, &H3)
IID_IDirect3DSwapChain9Ex = iid
End Function
Public Function IID_IDirect3D9ExOverlayExtension() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H187aeb13, &Haaf5, &H4c59, &H87, &H6d, &He0, &H59, &H8, &H8c, &Hd, &Hf8)
IID_IDirect3D9ExOverlayExtension = iid
End Function
Public Function IID_IDirect3DDevice9Video() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H26dc4561, &Ha1ee, &H4ae7, &H96, &Hda, &H11, &H8a, &H36, &Hc0, &Hec, &H95)
IID_IDirect3DDevice9Video = iid
End Function
Public Function IID_IDirect3DAuthenticatedChannel9() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hff24beee, &Hda21, &H4beb, &H98, &Hb5, &Hd2, &Hf8, &H99, &Hf9, &H8a, &Hf9)
IID_IDirect3DAuthenticatedChannel9 = iid
End Function
Public Function IID_IDirect3DCryptoSession9() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hfa0ab799, &H7a9c, &H48ca, &H8c, &H5b, &H23, &H7e, &H71, &Ha5, &H44, &H34)
IID_IDirect3DCryptoSession9 = iid
End Function

Public Function D3DCRYPTOTYPE_AES128_CTR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9b6bd711, &H4f74, &H41c9, &H9e, &H7b, &Hb, &He2, &Hd7, &Hd9, &H3b, &H4f)
D3DCRYPTOTYPE_AES128_CTR = iid
End Function
Public Function D3DCRYPTOTYPE_PROPRIETARY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hab4e9afd, &H1d1c, &H46e6, &Ha7, &H2f, &H8, &H69, &H91, &H7b, &Hd, &He8)
D3DCRYPTOTYPE_PROPRIETARY = iid
End Function
Public Function D3DKEYEXCHANGE_RSAES_OAEP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc1949895, &Hd72a, &H4a1d, &H8e, &H5d, &Hed, &H85, &H7d, &H17, &H15, &H20)
D3DKEYEXCHANGE_RSAES_OAEP = iid
End Function
Public Function D3DKEYEXCHANGE_DXVA() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H43d3775c, &H38e5, &H4924, &H8d, &H86, &Hd3, &Hfc, &Hcf, &H15, &H3e, &H9b)
D3DKEYEXCHANGE_DXVA = iid
End Function

'd3d9xcore.h

Public Const D3DX_VERSION  = &H0902
Public Const D3DX_SDK_VERSION  = 43

Public Declare PtrSafe Function D3DXCheckVersion Lib "D3DX9_43.dll" (ByVal D3DSdkVersion As Long, ByVal D3DXSdkVersion As Long) As BOOL
Public Declare PtrSafe Function D3DXDebugMute Lib "D3DX9_43.dll" (ByVal Mute As BOOL) As BOOL

Public Enum D3DXSPRITE
    D3DXSPRITE_DONOTSAVESTATE = (1 << 0)
    D3DXSPRITE_DONOTMODIFY_RENDERSTATE = (1 << 1)
    D3DXSPRITE_OBJECTSPACE = (1 << 2)
    D3DXSPRITE_BILLBOARD = (1 << 3)
    D3DXSPRITE_ALPHABLEND = (1 << 4)
    D3DXSPRITE_SORT_TEXTURE = (1 << 5)
    D3DXSPRITE_SORT_DEPTH_FRONTTOBACK = (1 << 6)
    D3DXSPRITE_SORT_DEPTH_BACKTOFRONT = (1 << 7)
    D3DXSPRITE_DO_NOT_ADDREF_TEXTURE = (1 << 8)
End Enum

Public Type D3DXFONT_DESCA
    Height As Long
    Width As Long
    Weight As Long
    MipLevels As Long
    Italic As BOOL
    CharSet As Byte
    OutputPrecision As Byte
    Quality As Byte
    PitchAndFamily As Byte
    FaceName(0 To (LF_FACESIZE - 1)) As Byte
End Type
Public Type D3DXFONT_DESCW
    Height As Long
    Width As Long
    Weight As Long
    MipLevels As Long
    Italic As BOOL
    CharSet As Byte
    OutputPrecision As Byte
    Quality As Byte
    PitchAndFamily As Byte
    FaceName(0 To (LF_FACESIZE - 1)) As Integer
End Type
'Alias D3DXFONT_DESC As D3DXFONT_DESCW
Public Type D3DXFONT_DESC
    Height As Long
    Width As Long
    Weight As Long
    MipLevels As Long
    Italic As BOOL
    CharSet As Byte
    OutputPrecision As Byte
    Quality As Byte
    PitchAndFamily As Byte
    FaceName(0 To (LF_FACESIZE - 1)) As Integer
End Type

Public Type D3DXRTS_DESC
    Width As Long
    Height As Long
    Format As D3DFORMAT
    DepthStencil As BOOL
    DepthStencilFormat As D3DFORMAT
End Type

Public Type D3DXRTE_DESC
    Size As Long
    MipLevels As Long
    Format As D3DFORMAT
    DepthStencil As BOOL
    DepthStencilFormat As D3DFORMAT
End Type

Public Declare PtrSafe Function D3DXGetDriverLevel Lib "d3dx9_43.dll" (ByVal pDevice As IDirect3DDevice9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateSprite Lib "d3dx9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByRef ppSprite As ID3DXSprite) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateFontA Lib "d3dx9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal Height As Long, ByVal Width As Long, ByVal Weight As Long, ByVal MipLevels As Long, ByVal Italic As Long, ByVal CharSet As Long, ByVal OutputPrecision As Long, ByVal Quality As Long, ByVal PitchAndFamily As Long, ByVal pFaceName As String, ByRef ppFont As ID3DXFont) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateFontW Lib "d3dx9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal Height As Long, ByVal Width As Long, ByVal Weight As Long, ByVal MipLevels As Long, ByVal Italic As Long, ByVal CharSet As Long, ByVal OutputPrecision As Long, ByVal Quality As Long, ByVal PitchAndFamily As Long, ByVal pFaceName As LongPtr, ByRef ppFont As ID3DXFont) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXCreateFont Lib "d3dx9_43.dll" Alias "D3DXCreateFontW" (ByVal pDevice As IDirect3DDevice9, ByVal Height As Long, ByVal Width As Long, ByVal Weight As Long, ByVal MipLevels As Long, ByVal Italic As Long, ByVal CharSet As Long, ByVal OutputPrecision As Long, ByVal Quality As Long, ByVal PitchAndFamily As Long, ByVal pFaceName As String, ByRef ppFont As ID3DXFont) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateFontIndirectA Lib "d3dx9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByRef pDesc As D3DXFONT_DESCA, ByRef ppFont As ID3DXFont) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateFontIndirectW Lib "d3dx9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByRef pDesc As D3DXFONT_DESCW, ByRef ppFont As ID3DXFont) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXCreateFontIndirect Lib "d3dx9_43.dll" Alias "D3DXCreateFontIndirectW" (ByVal pDevice As IDirect3DDevice9, ByRef pDesc As D3DXFONT_DESC, ByRef ppFont As ID3DXFont) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateRenderToSurface Lib "d3dx9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal Width As Long, ByVal Height As Long, ByVal Format As Long, ByVal DepthStencil As Long, ByVal DepthStencilFormat As Long, ByRef ppRenderToSurface As ID3DXRenderToSurface) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateRenderToEnvMap Lib "d3dx9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal Size As Long, ByVal MipLevels As Long, ByVal Format As Long, ByVal DepthStencil As Long, ByVal DepthStencilFormat As Long, ByRef ppRenderToEnvMap As ID3DXRenderToEnvMap) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateLine Lib "d3dx9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByRef ppLine As ID3DXLine) As Long

Public Function IID_ID3DXConstantTable() As UUID
'{AB3C758F-093E-4356-B762-4DB18F1B3A01}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAB3C758F, CInt(&H093E), CInt(&H4356), &HB7, &H62, &H4D, &HB1, &H8F, &H1B, &H3A, &H01)
 IID_ID3DXConstantTable = iid
End Function
Public Function IID_ID3DXTextureShader() As UUID
'{3E3D67F8-AA7A-405D-A857-BA01D4758426}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3E3D67F8, CInt(&HAA7A), CInt(&H405D), &HA8, &H57, &HBA, &H01, &HD4, &H75, &H84, &H26)
 IID_ID3DXTextureShader = iid
End Function
Public Function IID_ID3DXBuffer() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8ba5fb08, &H5195, &H40e2, &Hac, &H58, &Hd, &H98, &H9c, &H3a, &H1, &H2)
IID_ID3DXBuffer = iid
End Function
Public Function IID_ID3DXSprite() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hba0b762d, &H7d28, &H43ec, &Hb9, &Hdc, &H2f, &H84, &H44, &H3b, &H6, &H14)
IID_ID3DXSprite = iid
End Function
Public Function IID_ID3DXFont() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd79dbb70, &H5f21, &H4d36, &Hbb, &Hc2, &Hff, &H52, &H5c, &H21, &H3c, &Hdc)
IID_ID3DXFont = iid
End Function
Public Function IID_ID3DXRenderToSurface() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6985f346, &H2c3d, &H43b3, &Hbe, &H8b, &Hda, &Hae, &H8a, &H3, &Hd8, &H94)
IID_ID3DXRenderToSurface = iid
End Function
Public Function IID_ID3DXRenderToEnvMap() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H313f1b4b, &Hc7b0, &H4fa2, &H9d, &H9d, &H8d, &H38, &Hb, &H64, &H38, &H5e)
IID_ID3DXRenderToEnvMap = iid
End Function
Public Function IID_ID3DXLine() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd379ba7f, &H9042, &H4ac4, &H9f, &H5e, &H58, &H19, &H2a, &H4c, &H6b, &Hd8)
IID_ID3DXLine = iid
End Function


'd3d9x.h
Public Const D3DX_DEFAULT  = (-1)
Public Const D3DX_DEFAULT_NONPOW2  = (-2)
Public Const D3DX_DEFAULT_FLOAT  = FLT_MAX
Public Const D3DX_FROM_FILE  = (-3)
Public Const D3DFMT_FROM_FILE  = (-3)

Public Enum D3DXERR
    D3DXERR_CANNOTMODIFYINDEXBUFFER = &H88760B54 ' MAKE_DDHRESULT(2900)
    D3DXERR_INVALIDMESH = &H88760B55 ' MAKE_DDHRESULT(2901)
    D3DXERR_CANNOTATTRSORT = &H88760B56 ' MAKE_DDHRESULT(2902)
    D3DXERR_SKINNINGNOTSUPPORTED = &H88760B57 ' MAKE_DDHRESULT(2903)
    D3DXERR_TOOMANYINFLUENCES = &H88760B58 ' MAKE_DDHRESULT(2904)
    D3DXERR_INVALIDDATA = &H88760B59 ' MAKE_DDHRESULT(2905)
    D3DXERR_LOADEDMESHASNODATA = &H88760B5A ' MAKE_DDHRESULT(2906)
    D3DXERR_DUPLICATENAMEDFRAGMENT = &H88760B5B ' MAKE_DDHRESULT(2907)
    D3DXERR_CANNOTREMOVELASTITEM = &H88760B5C ' MAKE_DDHRESULT(2908)
End Enum

'd3d9xmath

Public Const D3DX_PI  = (3.14159265358979323846)
Public Const D3DX_1BYPI  = (1.0 / D3DX_PI)

Public Function D3DXToRadian(ByVal degree As Double) As Double
    Return ((degree) * (D3DX_PI / 180.0))
End Function
Public Function D3DXToDegree(ByVal radian As Double) As Double
    Return ((radian) * (180.0 / D3DX_PI))
End Function

Public Const D3DX_16F_DIG  = 3  ' # of decimal digits of precision
Public Const D3DX_16F_EPSILON  = 4.8875809e-4   ' smallest such that 1.0 + epsilon != 1.0
Public Const D3DX_16F_MANT_DIG  = 11  ' # of bits in mantissa
Public Const D3DX_16F_MAX  = 6.550400e+004  ' max value
Public Const D3DX_16F_MAX_10_EXP  = 4  ' max decimal exponent
Public Const D3DX_16F_MAX_EXP  = 15  ' max binary exponent
Public Const D3DX_16F_MIN  = 6.1035156e-5   ' min positive value
Public Const D3DX_16F_MIN_10_EXP  = (-4)  ' min decimal exponent
Public Const D3DX_16F_MIN_EXP  = (-14)  ' min binary exponent
Public Const D3DX_16F_RADIX  = 2  ' exponent radix
Public Const D3DX_16F_ROUNDS  = 1  ' addition rounding: near
Public Const D3DX_16F_SIGN_MASK  = &H8000
Public Const D3DX_16F_EXP_MASK  = &H7C00
Public Const D3DX_16F_FRAC_MASK  = &H03FF

Public Type D3DXFLOAT16
    value As Integer
End Type

Public Type D3DXVECTOR2
    x As Single
    y As Single
End Type

Public Type D3DXVECTOR2_16F
    x As D3DXFLOAT16
    y As D3DXFLOAT16
End Type

'Alias D3DXVECTOR3 As D3DVECTOR
Public Type D3DXVECTOR3
    x As Single
    y As Single
    z As Single
End Type

Public Type D3DXVECTOR3_16F
    x As D3DXFLOAT16
    y As D3DXFLOAT16
    z As D3DXFLOAT16
End Type

Public Type D3DXVECTOR4
    x As Single
    y As Single
    z As Single
    w As Single
End Type

Public Type D3DXVECTOR4_16F
    x As D3DXFLOAT16
    y As D3DXFLOAT16
    z As D3DXFLOAT16
    w As D3DXFLOAT16
End Type

'Alias D3DXMATRIX As D3DMATRIX
[Description("For an array version, use D3DMATRIXA")]
 Public Type D3DXMATRIX
'     m(0 To 3, 0 To 3) As Single
    m_11    As Single: m_12    As Single:   m_13    As Single:  m_14    As Single
    m_21    As Single: m_22    As Single:   m_23    As Single:  m_24    As Single
    m_31    As Single: m_32    As Single:   m_33    As Single:  m_34    As Single
    m_41    As Single: m_42    As Single:   m_43    As Single:  m_44    As Single
End Type
'Alias _D3DXMATRIXA16 As D3DXMATRIX
Public Type _D3DXMATRIXA16
'     m(0 To 3, 0 To 3) As Single
   m_11    As Single: m_12    As Single:   m_13    As Single:  m_14    As Single
   m_21    As Single: m_22    As Single:   m_23    As Single:  m_24    As Single
   m_31    As Single: m_32    As Single:   m_33    As Single:  m_34    As Single
   m_41    As Single: m_42    As Single:   m_43    As Single:  m_44    As Single
End Type

Public Type D3DXQUATERNION
    x As Single
    y As Single
    z As Single
    w As Single
End Type

Public Type D3DXPLANE
    a As Single
    b As Single
    c As Single
    d As Single
End Type

Public Type D3DXCOLOR
    r As Single
    g As Single
    b As Single
    a As Single
End Type

[Description("Converts an array 32-bit floats to 16-bit floats")]
Public Declare PtrSafe Function D3DXFloat32To16Array Lib "d3dx9_43.dll" (ByRef pOut As D3DXFLOAT16, ByRef pIn As Single, ByVal n As Long) As LongPtr

[Description("Converts an array 16-bit floats to 32-bit floats")]
Public Declare PtrSafe Function D3DXFloat16To32Array Lib "d3dx9_43.dll" (ByRef pOut As Single, ByRef pIn As D3DXFLOAT16, ByVal n As Long) As LongPtr

[Description("Normalizes a 2D vector")]
Public Declare PtrSafe Function D3DXVec2Normalize Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR2, ByRef pV As D3DXVECTOR2) As LongPtr

[Description("Hermite interpolation between position V1, tangent T1 (when s == 0) and position V2, tangent T2 (when s == 1)")]
Public Declare PtrSafe Function D3DXVec2Hermite Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR2, ByRef pV1 As D3DXVECTOR2, ByRef pT1 As D3DXVECTOR2, ByRef pV2 As D3DXVECTOR2, ByRef pT2 As D3DXVECTOR2, ByVal s As Single) As LongPtr

[Description("CatmullRom interpolation between V1 (when s == 0) and V2 (when s == 1)")]
Public Declare PtrSafe Function D3DXVec2CatmullRom Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR2, ByRef pV0 As D3DXVECTOR2, ByRef pV1 As D3DXVECTOR2, ByRef pV2 As D3DXVECTOR2, ByRef pV3 As D3DXVECTOR2, ByVal s As Single) As LongPtr

[Description("Barycentric coordinates. V1 + f(V2-V1) + g(V3-V1)")]
Public Declare PtrSafe Function D3DXVec2BaryCentric Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR2, ByRef pV1 As D3DXVECTOR2, ByRef pV2 As D3DXVECTOR2, ByRef pV3 As D3DXVECTOR2, ByVal f As Single, ByVal g As Single) As LongPtr

[Description("Transform (x, y, 0, 1) by matrix")]
Public Declare PtrSafe Function D3DXVec2Transform Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR4, ByRef pV As D3DXVECTOR2, ByRef pM As D3DXMATRIX) As LongPtr

[Description("Transform (x, y, 0, 1) by matrix, project result back into w=1")]
Public Declare PtrSafe Function D3DXVec2TransformCoord Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR2, ByRef pV As D3DXVECTOR2, ByRef pM As D3DXMATRIX) As LongPtr

[Description("Transform (x, y, 0, 0) by matrix")]
Public Declare PtrSafe Function D3DXVec2TransformNormal Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR2, ByRef pV As D3DXVECTOR2, ByRef pM As D3DXMATRIX) As LongPtr

[Description("Transform Array (x, y, 0, 1) by matrix")]
Public Declare PtrSafe Function D3DXVec2TransformArray Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR4, ByVal OutStride As Long, ByRef pV As D3DXVECTOR2, ByVal VStride As Long, ByRef pM As D3DXMATRIX, ByVal n As Long) As LongPtr

[Description("Transform Array (x, y, 0, 1) by matrix, project result back into w=1")]
Public Declare PtrSafe Function D3DXVec2TransformCoordArray Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR2, ByVal OutStride As Long, ByRef pV As D3DXVECTOR2, ByVal VStride As Long, ByRef pM As D3DXMATRIX, ByVal n As Long) As LongPtr

[Description("Transform Array (x, y, 0, 0) by matrix")]
Public Declare PtrSafe Function D3DXVec2TransformNormalArray Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR2, ByVal OutStride As Long, ByRef pV As D3DXVECTOR2, ByVal VStride As Long, ByRef pM As D3DXMATRIX, ByVal n As Long) As LongPtr

[Description("Normalizes a 3D vector")]
Public Declare PtrSafe Function D3DXVec3Normalize Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR3, ByRef pV As D3DXVECTOR3) As LongPtr

[Description("Hermite interpolation between position V1, tangent T1 (when s == 0) and position V2, tangent T2 (when s == 1)")]
Public Declare PtrSafe Function D3DXVec3Hermite Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR3, ByRef pV1 As D3DXVECTOR3, ByRef pT1 As D3DXVECTOR3, ByRef pV2 As D3DXVECTOR3, ByRef pT2 As D3DXVECTOR3, ByVal s As Single) As LongPtr

[Description("CatmullRom interpolation between V1 (when s == 0) and V2 (when s == 1)")]
Public Declare PtrSafe Function D3DXVec3CatmullRom Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR3, ByRef pV0 As D3DXVECTOR3, ByRef pV1 As D3DXVECTOR3, ByRef pV2 As D3DXVECTOR3, ByRef pV3 As D3DXVECTOR3, ByVal s As Single) As LongPtr

[Description("Barycentric coordinates. V1 + f(V2-V1) + g(V3-V1)")]
Public Declare PtrSafe Function D3DXVec3BaryCentric Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR3, ByRef pV1 As D3DXVECTOR3, ByRef pV2 As D3DXVECTOR3, ByRef pV3 As D3DXVECTOR3, ByVal f As Single, ByVal g As Single) As LongPtr

[Description("Transform (x, y, z, 1) by matrix")]
Public Declare PtrSafe Function D3DXVec3Transform Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR4, ByRef pV As D3DXVECTOR3, ByRef pM As D3DXMATRIX) As LongPtr

[Description("Transform (x, y, z, 1) by matrix, project result back into w=1")]
Public Declare PtrSafe Function D3DXVec3TransformCoord Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR3, ByRef pV As D3DXVECTOR3, ByRef pM As D3DXMATRIX) As LongPtr

[Description("Transform (x, y, z, 0) by matrix. If transforming a normal by a non-affine matrix, the matrix should be the transpose of the inverse of the matrix you would use to transform a coord.")]
Public Declare PtrSafe Function D3DXVec3TransformNormal Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR3, ByRef pV As D3DXVECTOR3, ByRef pM As D3DXMATRIX) As LongPtr

[Description("Transform Array (x, y, z, 1) by matrix")]
Public Declare PtrSafe Function D3DXVec3TransformArray Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR4, ByVal OutStride As Long, ByRef pV As D3DXVECTOR3, ByVal VStride As Long, ByRef pM As D3DXMATRIX, ByVal n As Long) As LongPtr

[Description("Transform Array (x, y, z, 1) by matrix, project result back into w=1")]
Public Declare PtrSafe Function D3DXVec3TransformCoordArray Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR3, ByVal OutStride As Long, ByRef pV As D3DXVECTOR3, ByVal VStride As Long, ByRef pM As D3DXMATRIX, ByVal n As Long) As LongPtr

[Description("Transform Array (x, y, z, 0) by matrix. If transforming a normal by a non-affine matrix, the matrix should be the transpose of the inverse of the matrix you would use to transform a coord.")]
Public Declare PtrSafe Function D3DXVec3TransformNormalArray Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR3, ByVal OutStride As Long, ByRef pV As D3DXVECTOR3, ByVal VStride As Long, ByRef pM As D3DXMATRIX, ByVal n As Long) As LongPtr

[Description("Project vector from object space into screen space")]
Public Declare PtrSafe Function D3DXVec3Project Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR3, ByRef pV As D3DXVECTOR3, ByRef pViewport As D3DVIEWPORT9, ByRef pProjection As D3DXMATRIX, ByRef pView As D3DXMATRIX, ByRef pWorld As D3DXMATRIX) As LongPtr

[Description("Project vector from screen space into object space")]
Public Declare PtrSafe Function D3DXVec3Unproject Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR3, ByRef pV As D3DXVECTOR3, ByRef pViewport As D3DVIEWPORT9, ByRef pProjection As D3DXMATRIX, ByRef pView As D3DXMATRIX, ByRef pWorld As D3DXMATRIX) As LongPtr

[Description("Project vector Array from object space into screen space")]
Public Declare PtrSafe Function D3DXVec3ProjectArray Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR3, ByVal OutStride As Long, ByRef pV As D3DXVECTOR3, ByVal VStride As Long, ByRef pViewport As D3DVIEWPORT9, ByRef pProjection As D3DXMATRIX, ByRef pView As D3DXMATRIX, ByRef pWorld As D3DXMATRIX, ByVal n As Long) As LongPtr

[Description("Project vector Array from screen space into object space")]
Public Declare PtrSafe Function D3DXVec3UnprojectArray Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR3, ByVal OutStride As Long, ByRef pV As D3DXVECTOR3, ByVal VStride As Long, ByRef pViewport As D3DVIEWPORT9, ByRef pProjection As D3DXMATRIX, ByRef pView As D3DXMATRIX, ByRef pWorld As D3DXMATRIX, ByVal n As Long) As LongPtr

[Description("Cross-product in 4 dimensions")]
Public Declare PtrSafe Function D3DXVec4Cross Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR4, ByRef pV1 As D3DXVECTOR4, ByRef pV2 As D3DXVECTOR4, ByRef pV3 As D3DXVECTOR4) As LongPtr

[Description("Normalizes a 4D vector")]
Public Declare PtrSafe Function D3DXVec4Normalize Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR4, ByRef pV As D3DXVECTOR4) As LongPtr

[Description("Hermite interpolation between position V1, tangent T1 (when s == 0) and position V2, tangent T2 (when s == 1)")]
Public Declare PtrSafe Function D3DXVec4Hermite Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR4, ByRef pV1 As D3DXVECTOR4, ByRef pT1 As D3DXVECTOR4, ByRef pV2 As D3DXVECTOR4, ByRef pT2 As D3DXVECTOR4, ByVal s As Single) As LongPtr

[Description("CatmullRom interpolation between V1 (when s == 0) and V2 (when s == 1)")]
Public Declare PtrSafe Function D3DXVec4CatmullRom Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR4, ByRef pV0 As D3DXVECTOR4, ByRef pV1 As D3DXVECTOR4, ByRef pV2 As D3DXVECTOR4, ByRef pV3 As D3DXVECTOR4, ByVal s As Single) As LongPtr

[Description("Barycentric coordinates. V1 + f(V2-V1) + g(V3-V1)")]
Public Declare PtrSafe Function D3DXVec4BaryCentric Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR4, ByRef pV1 As D3DXVECTOR4, ByRef pV2 As D3DXVECTOR4, ByRef pV3 As D3DXVECTOR4, ByVal f As Single, ByVal g As Single) As LongPtr

[Description("Transform vector by matrix")]
Public Declare PtrSafe Function D3DXVec4Transform Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR4, ByRef pV As D3DXVECTOR4, ByRef pM As D3DXMATRIX) As LongPtr

[Description("Transform vector array by matrix")]
Public Declare PtrSafe Function D3DXVec4TransformArray Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR4, ByVal OutStride As Long, ByRef pV As D3DXVECTOR4, ByVal VStride As Long, ByRef pM As D3DXMATRIX, ByVal n As Long) As LongPtr

[Description("Calculates the determinant of a matrix")]
Public Declare PtrSafe Function D3DXMatrixDeterminant Lib "d3dx9_43.dll" (ByRef pM As D3DXMATRIX) As Single

[Description("Decomposes a matrix into its scaling, rotation, and translation components")]
Public Declare PtrSafe Function D3DXMatrixDecompose Lib "d3dx9_43.dll" (ByRef pOutScale As D3DXVECTOR3, ByRef pOutRotation As D3DXQUATERNION, ByRef pOutTranslation As D3DXVECTOR3, ByRef pM As D3DXMATRIX) As Long

[Description("Transposes a matrix")]
Public Declare PtrSafe Function D3DXMatrixTranspose Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByRef pM As D3DXMATRIX) As LongPtr

[Description("Matrix multiplication. The result represents the transformation M2 followed by the transformation M1. (Out = M1 * M2)")]
Public Declare PtrSafe Function D3DXMatrixMultiply Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByRef pM1 As D3DXMATRIX, ByRef pM2 As D3DXMATRIX) As LongPtr

[Description("Matrix multiplication, followed by a transpose. (Out = T(M1 * M2))")]
Public Declare PtrSafe Function D3DXMatrixMultiplyTranspose Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByRef pM1 As D3DXMATRIX, ByRef pM2 As D3DXMATRIX) As LongPtr

[Description("Calculate inverse of matrix. Inversion may fail, in which case NULL will be returned. The determinant is also returned if pDeterminant is non-NULL.")]
Public Declare PtrSafe Function D3DXMatrixInverse Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByRef pDeterminant As Single, ByRef pM As D3DXMATRIX) As LongPtr

[Description("Build a matrix which scales by (sx, sy, sz)")]
Public Declare PtrSafe Function D3DXMatrixScaling Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByVal sx As Single, ByVal sy As Single, ByVal sz As Single) As LongPtr

[Description("Build a matrix which translates by (x, y, z)")]
Public Declare PtrSafe Function D3DXMatrixTranslation Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByVal x As Single, ByVal y As Single, ByVal z As Single) As LongPtr

[Description("Build a matrix which rotates around the X axis")]
Public Declare PtrSafe Function D3DXMatrixRotationX Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByVal Angle As Single) As LongPtr

[Description("Build a matrix which rotates around the Y axis")]
Public Declare PtrSafe Function D3DXMatrixRotationY Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByVal Angle As Single) As LongPtr

[Description("Build a matrix which rotates around the Z axis")]
Public Declare PtrSafe Function D3DXMatrixRotationZ Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByVal Angle As Single) As LongPtr

[Description("Build a matrix which rotates around an arbitrary axis")]
Public Declare PtrSafe Function D3DXMatrixRotationAxis Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByRef pV As D3DXVECTOR3, ByVal Angle As Single) As LongPtr

[Description("Build a matrix from a quaternion")]
Public Declare PtrSafe Function D3DXMatrixRotationQuaternion Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByRef pQ As D3DXQUATERNION) As LongPtr

[Description("Yaw around the Y axis, a pitch around the X axis, and a roll around the Z axis")]
Public Declare PtrSafe Function D3DXMatrixRotationYawPitchRoll Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByVal Yaw As Single, ByVal Pitch As Single, ByVal Roll As Single) As LongPtr

[Description("Build transformation matrix. NULL arguments are treated as identity. Mout = Msc-1 * Msr-1 * Ms * Msr * Msc * Mrc-1 * Mr * Mrc * Mt")]
Public Declare PtrSafe Function D3DXMatrixTransformation Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByRef pScalingCenter As D3DXVECTOR3, ByRef pScalingRotation As D3DXQUATERNION, ByRef pScaling As D3DXVECTOR3, ByRef pRotationCenter As D3DXVECTOR3, ByRef pRotation As D3DXQUATERNION, ByRef pTranslation As D3DXVECTOR3) As LongPtr

[Description("Build 2D transformation matrix in XY plane. NULL arguments are treated as identity. Mout = Msc-1 * Msr-1 * Ms * Msr * Msc * Mrc-1 * Mr * Mrc * Mt")]
Public Declare PtrSafe Function D3DXMatrixTransformation2D Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByRef pScalingCenter As D3DXVECTOR2, ByVal ScalingRotation As Single, ByRef pScaling As D3DXVECTOR2, ByRef pRotationCenter As D3DXVECTOR2, ByVal Rotation As Single, ByRef pTranslation As D3DXVECTOR2) As LongPtr

[Description("Build affine transformation matrix. NULL arguments are treated as identity. Mout = Ms * Mrc-1 * Mr * Mrc * Mt")]
Public Declare PtrSafe Function D3DXMatrixAffineTransformation Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByVal Scaling As Single, ByRef pRotationCenter As D3DXVECTOR3, ByRef pRotation As D3DXQUATERNION, ByRef pTranslation As D3DXVECTOR3) As LongPtr

[Description("Build 2D affine transformation matrix in XY plane. NULL arguments are treated as identity. Mout = Ms * Mrc-1 * Mr * Mrc * Mt")]
Public Declare PtrSafe Function D3DXMatrixAffineTransformation2D Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByVal Scaling As Single, ByRef pRotationCenter As D3DXVECTOR2, ByVal Rotation As Single, ByRef pTranslation As D3DXVECTOR2) As LongPtr

[Description("Build a lookat matrix (right-handed)")]
Public Declare PtrSafe Function D3DXMatrixLookAtRH Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByRef pEye As D3DXVECTOR3, ByRef pAt As D3DXVECTOR3, ByRef pUp As D3DXVECTOR3) As LongPtr

[Description("Build a lookat matrix (left-handed)")]
Public Declare PtrSafe Function D3DXMatrixLookAtLH Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByRef pEye As D3DXVECTOR3, ByRef pAt As D3DXVECTOR3, ByRef pUp As D3DXVECTOR3) As LongPtr

[Description("Build a perspective projection matrix (right-handed)")]
Public Declare PtrSafe Function D3DXMatrixPerspectiveRH Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByVal w As Single, ByVal h As Single, ByVal zn As Single, ByVal zf As Single) As LongPtr

[Description("Build a perspective projection matrix (left-handed)")]
Public Declare PtrSafe Function D3DXMatrixPerspectiveLH Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByVal w As Single, ByVal h As Single, ByVal zn As Single, ByVal zf As Single) As LongPtr

[Description("Build a perspective projection matrix (right-handed)")]
Public Declare PtrSafe Function D3DXMatrixPerspectiveFovRH Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByVal fovy As Single, ByVal Aspect As Single, ByVal zn As Single, ByVal zf As Single) As LongPtr

[Description("Build a perspective projection matrix (left-handed)")]
Public Declare PtrSafe Function D3DXMatrixPerspectiveFovLH Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByVal fovy As Single, ByVal Aspect As Single, ByVal zn As Single, ByVal zf As Single) As LongPtr

[Description("Build a perspective projection matrix (right-handed)")]
Public Declare PtrSafe Function D3DXMatrixPerspectiveOffCenterRH Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByVal l As Single, ByVal r As Single, ByVal b As Single, ByVal t As Single, ByVal zn As Single, ByVal zf As Single) As LongPtr

[Description("Build a perspective projection matrix (left-handed)")]
Public Declare PtrSafe Function D3DXMatrixPerspectiveOffCenterLH Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByVal l As Single, ByVal r As Single, ByVal b As Single, ByVal t As Single, ByVal zn As Single, ByVal zf As Single) As LongPtr

[Description("Build an ortho projection matrix (right-handed)")]
Public Declare PtrSafe Function D3DXMatrixOrthoRH Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByVal w As Single, ByVal h As Single, ByVal zn As Single, ByVal zf As Single) As LongPtr

[Description("Build an ortho projection matrix (left-handed)")]
Public Declare PtrSafe Function D3DXMatrixOrthoLH Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByVal w As Single, ByVal h As Single, ByVal zn As Single, ByVal zf As Single) As LongPtr

[Description("Build an ortho projection matrix (right-handed)")]
Public Declare PtrSafe Function D3DXMatrixOrthoOffCenterRH Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByVal l As Single, ByVal r As Single, ByVal b As Single, ByVal t As Single, ByVal zn As Single, ByVal zf As Single) As LongPtr

[Description("Build an ortho projection matrix (left-handed)")]
Public Declare PtrSafe Function D3DXMatrixOrthoOffCenterLH Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByVal l As Single, ByVal r As Single, ByVal b As Single, ByVal t As Single, ByVal zn As Single, ByVal zf As Single) As LongPtr

[Description("Build a matrix which flattens geometry into a plane, as if casting a shadow from a light")]
Public Declare PtrSafe Function D3DXMatrixShadow Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByRef pLight As D3DXVECTOR4, ByRef pPlane As D3DXPLANE) As LongPtr

[Description("Build a matrix which reflects the coordinate system about a plane")]
Public Declare PtrSafe Function D3DXMatrixReflect Lib "d3dx9_43.dll" (ByRef pOut As D3DXMATRIX, ByRef pPlane As D3DXPLANE) As LongPtr

[Description("Compute a quaternion's axis and angle of rotation. Expects unit quaternions.")]
Public Declare PtrSafe Sub D3DXQuaternionToAxisAngle Lib "d3dx9_43.dll" (ByRef pQ As D3DXQUATERNION, ByRef pAxis As D3DXVECTOR3, ByRef pAngle As Single)

[Description("Build a quaternion from a rotation matrix")]
Public Declare PtrSafe Function D3DXQuaternionRotationMatrix Lib "d3dx9_43.dll" (ByRef pOut As D3DXQUATERNION, ByRef pM As D3DXMATRIX) As LongPtr

[Description("Rotation about arbitrary axis")]
Public Declare PtrSafe Function D3DXQuaternionRotationAxis Lib "d3dx9_43.dll" (ByRef pOut As D3DXQUATERNION, ByRef pV As D3DXVECTOR3, ByVal Angle As Single) As LongPtr

[Description("Yaw around the Y axis, a pitch around the X axis, and a roll around the Z axis")]
Public Declare PtrSafe Function D3DXQuaternionRotationYawPitchRoll Lib "d3dx9_43.dll" (ByRef pOut As D3DXQUATERNION, ByVal Yaw As Single, ByVal Pitch As Single, ByVal Roll As Single) As LongPtr

[Description("Quaternion multiplication. The result represents the rotation Q2 followed by the rotation Q1. (Out = Q2 * Q1)")]
Public Declare PtrSafe Function D3DXQuaternionMultiply Lib "d3dx9_43.dll" (ByRef pOut As D3DXQUATERNION, ByRef pQ1 As D3DXQUATERNION, ByRef pQ2 As D3DXQUATERNION) As LongPtr

[Description("Normalizes a quaternion")]
Public Declare PtrSafe Function D3DXQuaternionNormalize Lib "d3dx9_43.dll" (ByRef pOut As D3DXQUATERNION, ByRef pQ As D3DXQUATERNION) As LongPtr

[Description("Conjugate and re-norm")]
Public Declare PtrSafe Function D3DXQuaternionInverse Lib "d3dx9_43.dll" (ByRef pOut As D3DXQUATERNION, ByRef pQ As D3DXQUATERNION) As LongPtr

[Description("Expects unit quaternions. if q = (cos(theta), sin(theta) * v); ln(q) = (0, theta * v)")]
Public Declare PtrSafe Function D3DXQuaternionLn Lib "d3dx9_43.dll" (ByRef pOut As D3DXQUATERNION, ByRef pQ As D3DXQUATERNION) As LongPtr

[Description("Expects pure quaternions. (w == 0) w is ignored in calculation. if q = (0, theta * v); exp(q) = (cos(theta), sin(theta) * v)")]
Public Declare PtrSafe Function D3DXQuaternionExp Lib "d3dx9_43.dll" (ByRef pOut As D3DXQUATERNION, ByRef pQ As D3DXQUATERNION) As LongPtr

[Description("Spherical linear interpolation between Q1 (t == 0) and Q2 (t == 1). Expects unit quaternions.")]
Public Declare PtrSafe Function D3DXQuaternionSlerp Lib "d3dx9_43.dll" (ByRef pOut As D3DXQUATERNION, ByRef pQ1 As D3DXQUATERNION, ByRef pQ2 As D3DXQUATERNION, ByVal t As Single) As LongPtr

[Description("Spherical quadrangle interpolation. Slerp(Slerp(Q1, C, t), Slerp(A, B, t), 2t(1-t))")]
Public Declare PtrSafe Function D3DXQuaternionSquad Lib "d3dx9_43.dll" (ByRef pOut As D3DXQUATERNION, ByRef pQ1 As D3DXQUATERNION, ByRef pA As D3DXQUATERNION, ByRef pB As D3DXQUATERNION, ByRef pC As D3DXQUATERNION, ByVal t As Single) As LongPtr

[Description("Setup control points for spherical quadrangle interpolation from Q1 to Q2. The control points are chosen to ensure continuity of tangents with adjacent segments.")]
Public Declare PtrSafe Sub D3DXQuaternionSquadSetup Lib "d3dx9_43.dll" (ByRef pAOut As D3DXQUATERNION, ByRef pBOut As D3DXQUATERNION, ByRef pCOut As D3DXQUATERNION, ByRef pQ0 As D3DXQUATERNION, ByRef pQ1 As D3DXQUATERNION, ByRef pQ2 As D3DXQUATERNION, ByRef pQ3 As D3DXQUATERNION)

[Description("Barycentric interpolation. Slerp(Slerp(Q1, Q2, f+g), Slerp(Q1, Q3, f+g), g/(f+g))")]
Public Declare PtrSafe Function D3DXQuaternionBaryCentric Lib "d3dx9_43.dll" (ByRef pOut As D3DXQUATERNION, ByRef pQ1 As D3DXQUATERNION, ByRef pQ2 As D3DXQUATERNION, ByRef pQ3 As D3DXQUATERNION, ByVal f As Single, ByVal g As Single) As LongPtr

[Description("Normalize plane (so that |a,b,c| == 1)")]
Public Declare PtrSafe Function D3DXPlaneNormalize Lib "d3dx9_43.dll" (ByRef pOut As D3DXPLANE, ByRef pP As D3DXPLANE) As LongPtr

[Description("Find the intersection between a plane and a line. If the line is parallel to the plane, NULL is returned.")]
Public Declare PtrSafe Function D3DXPlaneIntersectLine Lib "d3dx9_43.dll" (ByRef pOut As D3DXVECTOR3, ByRef pP As D3DXPLANE, ByRef pV1 As D3DXVECTOR3, ByRef pV2 As D3DXVECTOR3) As LongPtr

[Description("Construct a plane from a point and a normal")]
Public Declare PtrSafe Function D3DXPlaneFromPointNormal Lib "d3dx9_43.dll" (ByRef pOut As D3DXPLANE, ByRef pPoint As D3DXVECTOR3, ByRef pNormal As D3DXVECTOR3) As LongPtr

[Description("Construct a plane from 3 points")]
Public Declare PtrSafe Function D3DXPlaneFromPoints Lib "d3dx9_43.dll" (ByRef pOut As D3DXPLANE, ByRef pV1 As D3DXVECTOR3, ByRef pV2 As D3DXVECTOR3, ByRef pV3 As D3DXVECTOR3) As LongPtr

[Description("Transform a plane by a matrix. The vector (a,b,c) must be normal. M should be the inverse transpose of the transformation desired.")]
Public Declare PtrSafe Function D3DXPlaneTransform Lib "d3dx9_43.dll" (ByRef pOut As D3DXPLANE, ByRef pP As D3DXPLANE, ByRef pM As D3DXMATRIX) As LongPtr

[Description("Transform an array of planes by a matrix. The vectors (a,b,c) must be normal. M should be the inverse transpose of the transformation desired.")]
Public Declare PtrSafe Function D3DXPlaneTransformArray Lib "d3dx9_43.dll" (ByRef pOut As D3DXPLANE, ByVal OutStride As Long, ByRef pP As D3DXPLANE, ByVal PStride As Long, ByRef pM As D3DXMATRIX, ByVal n As Long) As LongPtr

[Description("Interpolate r,g,b between desaturated color and color. DesaturatedColor + s(Color - DesaturatedColor)")]
Public Declare PtrSafe Function D3DXColorAdjustSaturation Lib "d3dx9_43.dll" (ByRef pOut As D3DXCOLOR, pC As D3DXCOLOR, ByVal s As Single) As LongPtr

[Description("Interpolate r,g,b between 50% grey and color.  Grey + s(Color - Grey)")]
Public Declare PtrSafe Function D3DXColorAdjustContrast Lib "d3dx9_43.dll" (ByRef pOut As D3DXCOLOR, pC As D3DXCOLOR, ByVal c As Single) As LongPtr

[Description("Calculate Fresnel term given the cosine of theta (likely obtained by taking the dot of two normals), and the refraction index of the material.")]
Public Declare PtrSafe Function D3DXFresnelTerm Lib "d3dx9_43.dll" (ByVal CosTheta As Single, ByVal RefractionIndex As Single) As Single

Public Function IID_ID3DXMatrixStack() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc7885ba7, &Hf990, &H4fe7, &H92, &H2d, &H85, &H15, &He4, &H77, &Hdd, &H85)
IID_ID3DXMatrixStack = iid
End Function


Public Declare PtrSafe Function D3DXCreateMatrixStack Lib "d3dx9_43.dll" (ByVal Flags As Long, ppStack As ID3DXMatrixStack) As Long

Public Enum D3DXDefSHOrderValues
    D3DXSH_MINORDER = 2
    D3DXSH_MAXORDER = 6
End Enum

Public Declare PtrSafe Function D3DXSHEvalDirection Lib "d3dx9_43.dll" (ByRef pOut As Single, ByVal Order As Long, ByRef pDir As D3DXVECTOR3) As LongPtr
Public Declare PtrSafe Function D3DXSHRotate Lib "d3dx9_43.dll" (ByRef pOut As Single, ByVal Order As Long, ByRef pMatrix As D3DXMATRIX, ByRef pIn As Single) As LongPtr
Public Declare PtrSafe Function D3DXSHRotateZ Lib "d3dx9_43.dll" (ByRef pOut As Single, ByVal Order As Long, ByVal Angle As Single, ByRef pIn As Single) As LongPtr
Public Declare PtrSafe Function D3DXSHAdd Lib "d3dx9_43.dll" (ByRef pOut As Single, ByVal Order As Long, ByRef pA As Single, ByRef pB As Single) As LongPtr
Public Declare PtrSafe Function D3DXSHScale Lib "d3dx9_43.dll" (ByRef pOut As Single, ByVal Order As Long, ByRef pIn As Single, ByVal Scale As Single) As LongPtr
Public Declare PtrSafe Function D3DXSHDot Lib "d3dx9_43.dll" (ByVal Order As Long, ByRef pA As Single, ByRef pB As Single) As Single
Public Declare PtrSafe Function D3DXSHMultiply2 Lib "d3dx9_43.dll" (ByRef pOut As Single, ByRef pF As Single, ByRef pG As Single) As LongPtr
Public Declare PtrSafe Function D3DXSHMultiply3 Lib "d3dx9_43.dll" (ByRef pOut As Single, ByRef pF As Single, ByRef pG As Single) As LongPtr
Public Declare PtrSafe Function D3DXSHMultiply4 Lib "d3dx9_43.dll" (ByRef pOut As Single, ByRef pF As Single, ByRef pG As Single) As LongPtr
Public Declare PtrSafe Function D3DXSHMultiply5 Lib "d3dx9_43.dll" (ByRef pOut As Single, ByRef pF As Single, ByRef pG As Single) As LongPtr
Public Declare PtrSafe Function D3DXSHMultiply6 Lib "d3dx9_43.dll" (ByRef pOut As Single, ByRef pF As Single, ByRef pG As Single) As LongPtr
Public Declare PtrSafe Function D3DXSHEvalDirectionalLight Lib "d3dx9_43.dll" (ByVal Order As Long, ByRef pDir As D3DXVECTOR3, ByVal RIntensity As Single, ByVal GIntensity As Single, ByVal BIntensity As Single, ByRef pROut As Single, ByRef pGOut As Single, ByRef pBOut As Single) As Long
Public Declare PtrSafe Function D3DXSHEvalSphericalLight Lib "d3dx9_43.dll" (ByVal Order As Long, ByRef pPos As D3DXVECTOR3, ByVal Radius As Single, ByVal RIntensity As Single, ByVal GIntensity As Single, ByVal BIntensity As Single, ByRef pROut As Single, ByRef pGOut As Single, ByRef pBOut As Single) As Long
Public Declare PtrSafe Function D3DXSHEvalConeLight Lib "d3dx9_43.dll" (ByVal Order As Long, ByRef pDir As D3DXVECTOR3, ByVal Radius As Single, ByVal RIntensity As Single, ByVal GIntensity As Single, ByVal BIntensity As Single, ByRef pROut As Single, ByRef pGOut As Single, ByRef pBOut As Single) As Long
#If Win64 Then
Public Declare PtrSafe Function D3DXSHEvalHemisphereLight Lib "d3dx9_43.dll" (ByVal Order As Long, ByRef pDir As D3DXVECTOR3, Top As D3DXCOLOR, Bottom As D3DXCOLOR, ByRef pROut As Single, ByRef pGOut As Single, ByRef pBOut As Single) As Long
#Else
Public Declare PtrSafe Function D3DXSHEvalHemisphereLight Lib "d3dx9_43.dll" (ByVal Order As Long, ByRef pDir As D3DXVECTOR3, ByVal TopR As Single, ByVal TopG As Single, ByVal TopB As Single, ByVal TopA As Single, ByVal BottomR As Single, ByVal BottomG As Single, ByVal BottomB As Single, ByVal BottomA As Single, ByRef pROut As Single, ByRef pGOut As Single, ByRef pBOut As Single) As Long
#End If
Public Declare PtrSafe Function D3DXSHProjectCubeMap Lib "d3dx9_43.dll" (ByVal uOrder As Long, ByVal pCubeMap As LongPtr, ByRef pROut As Single, ByRef pGOut As Single, ByRef pBOut As Single) As Long


'd3d9xtex.h (DX SDK, missing from newer Windows SDKs)

Public Enum D3DX_FILTER
    D3DX_FILTER_NONE = (1 << 0)
    D3DX_FILTER_POINT = (2 << 0)
    D3DX_FILTER_LINEAR = (3 << 0)
    D3DX_FILTER_TRIANGLE = (4 << 0)
    D3DX_FILTER_BOX = (5 << 0)
    D3DX_FILTER_MIRROR_U = (1& << 16)
    D3DX_FILTER_MIRROR_V = (2& << 16)
    D3DX_FILTER_MIRROR_W = (4& << 16)
    D3DX_FILTER_MIRROR = (7& << 16)
    D3DX_FILTER_DITHER = (1& << 19)
    D3DX_FILTER_DITHER_DIFFUSION = (2& << 19)
    D3DX_FILTER_SRGB_IN = (1& << 21)
    D3DX_FILTER_SRGB_OUT = (2& << 21)
    D3DX_FILTER_SRGB = (3& << 21)
End Enum

Public Const D3DX_SKIP_DDS_MIP_LEVELS_MASK  = &H1F
Public Const D3DX_SKIP_DDS_MIP_LEVELS_SHIFT  = 26
[IgnoreWarnings(TB0021)]
Public Function D3DX_SKIP_DDS_MIP_LEVELS(ByVal levels As Long, ByVal filter As Long) As Long
    Return ((((levels) And D3DX_SKIP_DDS_MIP_LEVELS_MASK) << D3DX_SKIP_DDS_MIP_LEVELS_SHIFT) Or (If(filter = D3DX_DEFAULT, D3DX_FILTER_BOX, (filter))))
End Function

Public Enum D3DX_NORMALMAP
    D3DX_NORMALMAP_MIRROR_U = (1 << 16)
    D3DX_NORMALMAP_MIRROR_V = (2 << 16)
    D3DX_NORMALMAP_MIRROR = (3 << 16)
    D3DX_NORMALMAP_INVERTSIGN = (8 << 16)
    D3DX_NORMALMAP_COMPUTE_OCCLUSION = (16 << 16)
End Enum

Public Enum D3DX_CHANNEL
    D3DX_CHANNEL_RED = (1 << 0)
    D3DX_CHANNEL_BLUE = (1 << 1)
    D3DX_CHANNEL_GREEN = (1 << 2)
    D3DX_CHANNEL_ALPHA = (1 << 3)
    D3DX_CHANNEL_LUMINANCE = (1 << 4)
End Enum

Public Enum D3DXIMAGE_FILEFORMAT
    D3DXIFF_BMP = 0
    D3DXIFF_JPG = 1
    D3DXIFF_TGA = 2
    D3DXIFF_PNG = 3
    D3DXIFF_DDS = 4
    D3DXIFF_PPM = 5
    D3DXIFF_DIB = 6
    D3DXIFF_HDR = 7 'high dynamic range formats
    D3DXIFF_PFM = 8 '
    D3DXIFF_FORCE_DWORD = &H7fffffff
End Enum

Public Delegate Sub D3DXFILL2D (pOut As D3DXVECTOR4, pTexCoord As D3DXVECTOR2, pTexelSize As D3DXVECTOR2, ByVal pData As LongPtr)
Public Delegate Sub D3DXFILL3D (pOut As D3DXVECTOR4, pTexCoord As D3DXVECTOR3, pTexelSize As D3DXVECTOR3, ByVal pData As LongPtr)
    
Public Type D3DXIMAGE_INFO
    Width As Long
    Height As Long
    Depth As Long
    MipLevels As Long
    Format As D3DFORMAT
    ResourceType As D3DRESOURCETYPE
    ImageFileFormat As D3DXIMAGE_FILEFORMAT
End Type

[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXGetImageInfoFromFileA Lib "D3DX9_43.dll" (ByVal pSrcFile As String, pSrcInfo As D3DXIMAGE_INFO, pHResult As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXGetImageInfoFromFileW Lib "D3DX9_43.dll" (ByVal pSrcFile As LongPtr, pSrcInfo As D3DXIMAGE_INFO, pHResult As Long) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXGetImageInfoFromFile Lib "D3DX9_43.dll" Alias "D3DXGetImageInfoFromFileW" (ByVal pSrcFile As String, pSrcInfo As D3DXIMAGE_INFO, pHResult As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXGetImageInfoFromResourceA Lib "D3DX9_43.dll" (ByVal hSrcModule As LongPtr, ByVal pSrcResource As String, pSrcInfo As D3DXIMAGE_INFO, pHResult As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXGetImageInfoFromResourceW Lib "D3DX9_43.dll" (ByVal hSrcModule As LongPtr, ByVal pSrcResource As LongPtr, pSrcInfo As D3DXIMAGE_INFO, pHResult As Long) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXGetImageInfoFromResource Lib "D3DX9_43.dll" Alias "D3DXGetImageInfoFromResourceW" (ByVal hSrcModule As LongPtr, ByVal pSrcResource As String, pSrcInfo As D3DXIMAGE_INFO, pHResult As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXGetImageInfoFromFileInMemory Lib "D3DX9_43.dll" (pSrcData As Any, ByVal SrcDataSize As LongPtr, pSrcInfo As D3DXIMAGE_INFO, pHResult As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXLoadSurfaceFromFileA Lib "D3DX9_43.dll" (ByVal pDestSurface As IDirect3DSurface9, pDestPalette As PALETTEENTRY, pDestRect As RECT, ByVal pSrcFile As String, pSrcRect As RECT, ByVal Filter As D3DX_FILTER, ByVal ColorKey As Long, pSrcInfo As D3DXIMAGE_INFO) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXLoadSurfaceFromFileW Lib "D3DX9_43.dll" (ByVal pDestSurface As IDirect3DSurface9, pDestPalette As PALETTEENTRY, pDestRect As RECT, ByVal pSrcFile As LongPtr, pSrcRect As RECT, ByVal Filter As D3DX_FILTER, ByVal ColorKey As Long, pSrcInfo As D3DXIMAGE_INFO) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXLoadSurfaceFromFile Lib "D3DX9_43.dll" Alias "D3DXLoadSurfaceFromFileW" (ByVal pDestSurface As IDirect3DSurface9, pDestPalette As PALETTEENTRY, pDestRect As RECT, ByVal pSrcFile As String, pSrcRect As RECT, ByVal Filter As D3DX_FILTER, ByVal ColorKey As Long, pSrcInfo As D3DXIMAGE_INFO) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXLoadSurfaceFromResourceA Lib "D3DX9_43.dll" (ByVal pDestSurface As IDirect3DSurface9, pDestPalette As PALETTEENTRY, pDestRect As RECT, ByVal hSrcModule As LongPtr, ByVal pSrcResource As String, pSrcRect As RECT, ByVal Filter As D3DX_FILTER, ByVal ColorKey As Long, pSrcInfo As D3DXIMAGE_INFO) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXLoadSurfaceFromResourceW Lib "D3DX9_43.dll" (ByVal pDestSurface As IDirect3DSurface9, pDestPalette As PALETTEENTRY, pDestRect As RECT, ByVal hSrcModule As LongPtr, ByVal pSrcResource As LongPtr, pSrcRect As RECT, ByVal Filter As D3DX_FILTER, ByVal ColorKey As Long, pSrcInfo As D3DXIMAGE_INFO) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXLoadSurfaceFromResource Lib "D3DX9_43.dll" Alias "D3DXLoadSurfaceFromResourceW" (ByVal pDestSurface As IDirect3DSurface9, pDestPalette As PALETTEENTRY, pDestRect As RECT, ByVal hSrcModule As LongPtr, ByVal pSrcResource As String, pSrcRect As RECT, ByVal Filter As D3DX_FILTER, ByVal ColorKey As Long, pSrcInfo As D3DXIMAGE_INFO) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXLoadSurfaceFromFileInMemory Lib "D3DX9_43.dll" (ByVal pDestSurface As IDirect3DSurface9, pDestPalette As PALETTEENTRY, pDestRect As RECT, pSrcData As Any, ByVal SrcDataSize As Long, pSrcRect As RECT, ByVal Filter As D3DX_FILTER, ByVal ColorKey As Long, pSrcInfo As D3DXIMAGE_INFO) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXLoadSurfaceFromSurface Lib "D3DX9_43.dll" (ByVal pDestSurface As IDirect3DSurface9, pDestPalette As PALETTEENTRY, pDestRect As RECT, ByVal pSrcSurface As IDirect3DSurface9, pSrcPalette As PALETTEENTRY, pSrcRect As RECT, ByVal Filter As D3DX_FILTER, ByVal ColorKey As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXLoadSurfaceFromMemory Lib "D3DX9_43.dll" (ByVal pDestSurface As IDirect3DSurface9, pDestPalette As PALETTEENTRY, pDestRect As RECT, pSrcMemory As Any, ByVal SrcFormat As D3DFORMAT, ByVal SrcPitch As Long, pSrcPalette As PALETTEENTRY, pSrcRect As RECT, ByVal Filter As D3DX_FILTER, ByVal ColorKey As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXSaveSurfaceToFileA Lib "D3DX9_43.dll" (ByVal pDestFile As String, ByVal DestFormat As D3DXIMAGE_FILEFORMAT, ByVal pSrcSurfacr As IDirect3DSurface9, pSrcPalette As PALETTEENTRY, pSrcRect As RECT) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXSaveSurfaceToFileW Lib "D3DX9_43.dll" (ByVal pDestFile As LongPtr, ByVal DestFormat As D3DXIMAGE_FILEFORMAT, ByVal pSrcSurfacr As IDirect3DSurface9, pSrcPalette As PALETTEENTRY, pSrcRect As RECT) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXSaveSurfaceToFile Lib "D3DX9_43.dll" Alias "D3DXSaveSurfaceToFileW" (ByVal pDestFile As String, ByVal DestFormat As D3DXIMAGE_FILEFORMAT, ByVal pSrcSurfacr As IDirect3DSurface9, pSrcPalette As PALETTEENTRY, pSrcRect As RECT) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXSaveSurfaceToFileInMemory Lib "D3DX9_43.dll" (ppDestBuf As ID3DXBuffer, ByVal DestFormat As D3DXIMAGE_FILEFORMAT, ByVal pSrcSurfacr As IDirect3DSurface9, pSrcPalette As PALETTEENTRY, pSrcRect As RECT) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXLoadVolumeFromFileA Lib "D3DX9_43.dll" (ByVal pDestVolume As IDirect3DVolume9, ByRef pDestPalette As PALETTEENTRY, ByRef pDestBox As D3DBOX, ByVal pSrcFile As String, ByRef pSrcBox As D3DBOX, ByVal Filter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXLoadVolumeFromFileW Lib "D3DX9_43.dll" (ByVal pDestVolume As IDirect3DVolume9, ByRef pDestPalette As PALETTEENTRY, ByRef pDestBox As D3DBOX, ByVal pSrcFile As LongPtr, ByRef pSrcBox As D3DBOX, ByVal Filter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXLoadVolumeFromFile Lib "D3DX9_43.dll" Alias "D3DXLoadVolumeFromFileW" (ByVal pDestVolume As IDirect3DVolume9, ByRef pDestPalette As PALETTEENTRY, ByRef pDestBox As D3DBOX, ByVal pSrcFile As String, ByRef pSrcBox As D3DBOX, ByVal Filter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXLoadVolumeFromResourceA Lib "D3DX9_43.dll" (ByVal pDestVolume As IDirect3DVolume9, ByRef pDestPalette As PALETTEENTRY, ByRef pDestBox As D3DBOX, ByVal hSrcModule As LongPtr, ByVal pSrcResource As String, ByRef pSrcBox As D3DBOX, ByVal Filter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXLoadVolumeFromResourceW Lib "D3DX9_43.dll" (ByVal pDestVolume As IDirect3DVolume9, ByRef pDestPalette As PALETTEENTRY, ByRef pDestBox As D3DBOX, ByVal hSrcModule As LongPtr, ByVal pSrcResource As LongPtr, ByRef pSrcBox As D3DBOX, ByVal Filter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXLoadVolumeFromResource Lib "D3DX9_43.dll" Alias "D3DXLoadVolumeFromResourceW" (ByVal pDestVolume As IDirect3DVolume9, ByRef pDestPalette As PALETTEENTRY, ByRef pDestBox As D3DBOX, ByVal hSrcModule As LongPtr, ByVal pSrcResource As String, ByRef pSrcBox As D3DBOX, ByVal Filter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXLoadVolumeFromFileInMemory Lib "D3DX9_43.dll" (ByVal pDestVolume As IDirect3DVolume9, ByRef pDestPalette As PALETTEENTRY, ByRef pDestBox As D3DBOX, pSrcData As Any, ByVal SrcDataSize As Long, ByRef pSrcBox As D3DBOX, ByVal Filter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXLoadVolumeFromVolume Lib "D3DX9_43.dll" (ByVal pDestVolume As IDirect3DVolume9, ByRef pDestPalette As PALETTEENTRY, ByRef pDestBox As D3DBOX, ByVal pSrcVolume As IDirect3DVolume9, ByRef pSrcPalette As PALETTEENTRY, ByRef pSrcBox As D3DBOX, ByVal Filter As Long, ByVal ColorKey As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXLoadVolumeFromMemory Lib "D3DX9_43.dll" (ByVal pDestVolume As IDirect3DVolume9, ByRef pDestPalette As PALETTEENTRY, ByRef pDestBox As D3DBOX, ByVal pSrcMemory As LongPtr, ByVal SrcFormat As D3DFORMAT, ByVal SrcRowPitch As Long, ByVal SrcSlicePitch As Long, ByRef pSrcPalette As PALETTEENTRY, ByRef pSrcBox As D3DBOX, ByVal Filter As Long, ByVal ColorKey As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXSaveVolumeToFileA Lib "D3DX9_43.dll" (ByVal pDestFile As String, ByVal DestFormat As D3DXIMAGE_FILEFORMAT, ByVal pSrcVolume As IDirect3DVolume9, ByRef pSrcPalette As PALETTEENTRY, ByRef pSrcBox As D3DBOX) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXSaveVolumeToFileW Lib "D3DX9_43.dll" (ByVal pDestFile As LongPtr, ByVal DestFormat As D3DXIMAGE_FILEFORMAT, ByVal pSrcVolume As IDirect3DVolume9, ByRef pSrcPalette As PALETTEENTRY, ByRef pSrcBox As D3DBOX) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXSaveVolumeToFile Lib "D3DX9_43.dll" Alias "D3DXSaveVolumeToFileW" (ByVal pDestFile As String, ByVal DestFormat As D3DXIMAGE_FILEFORMAT, ByVal pSrcVolume As IDirect3DVolume9, ByRef pSrcPalette As PALETTEENTRY, ByRef pSrcBox As D3DBOX) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXSaveVolumeToFileInMemory Lib "D3DX9_43.dll" (ByRef ppDestBuf As ID3DXBuffer, ByVal DestFormat As D3DXIMAGE_FILEFORMAT, ByVal pSrcVolume As IDirect3DVolume9, ByRef pSrcPalette As PALETTEENTRY, ByRef pSrcBox As D3DBOX) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCheckTextureRequirements Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByRef pWidth As Long, ByRef pHeight As Long, ByRef pNumMipLevels As Long, ByVal Usage As Long, ByRef pFormat As D3DFORMAT, ByVal Pool As D3DPOOL) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCheckCubeTextureRequirements Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByRef pSize As Long, ByRef pNumMipLevels As Long, ByVal Usage As Long, ByRef pFormat As D3DFORMAT, ByVal Pool As D3DPOOL) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCheckVolumeTextureRequirements Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByRef pWidth As Long, ByRef pHeight As Long, ByRef pDepth As Long, ByRef pNumMipLevels As Long, ByVal Usage As Long, ByRef pFormat As D3DFORMAT, ByVal Pool As D3DPOOL) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateTexture Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal Width As Long, ByVal Height As Long, ByVal MipLevels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByRef ppTexture As IDirect3DTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateCubeTexture Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal Size As Long, ByVal MipLevels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByRef ppCubeTexture As IDirect3DCubeTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateVolumeTexture Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal Width As Long, ByVal Height As Long, ByVal Depth As Long, ByVal MipLevels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByRef ppVolumeTexture As IDirect3DVolumeTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateTextureFromFileA Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal pSrcFile As String, ByRef ppTexture As IDirect3DTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateTextureFromFileW Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal pSrcFile As LongPtr, ByRef ppTexture As IDirect3DTexture9) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXCreateTextureFromFile Lib "D3DX9_43.dll" Alias "D3DXCreateTextureFromFileW" (ByVal pDevice As IDirect3DDevice9, ByVal pSrcFile As String, ByRef ppTexture As IDirect3DTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateCubeTextureFromFileA Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal pSrcFile As String, ByRef ppCubeTexture As IDirect3DCubeTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateCubeTextureFromFileW Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal pSrcFile As LongPtr, ByRef ppCubeTexture As IDirect3DCubeTexture9) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXCreateCubeTextureFromFile Lib "D3DX9_43.dll" Alias "D3DXCreateCubeTextureFromFileW" (ByVal pDevice As IDirect3DDevice9, ByVal pSrcFile As String, ByRef ppCubeTexture As IDirect3DCubeTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateVolumeTextureFromFileA Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal pSrcFile As String, ByRef ppVolumeTexture As IDirect3DVolumeTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateVolumeTextureFromFileW Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal pSrcFile As LongPtr, ByRef ppVolumeTexture As IDirect3DVolumeTexture9) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXCreateVolumeTextureFromFile Lib "D3DX9_43.dll" Alias "D3DXCreateVolumeTextureFromFileW" (ByVal pDevice As IDirect3DDevice9, ByVal pSrcFile As String, ByRef ppVolumeTexture As IDirect3DVolumeTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateTextureFromResourceA Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal hSrcModule As LongPtr, ByVal pSrcResource As String, ByRef ppTexture As IDirect3DTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateTextureFromResourceW Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal hSrcModule As LongPtr, ByVal pSrcResource As LongPtr, ByRef ppTexture As IDirect3DTexture9) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXCreateTextureFromResource Lib "D3DX9_43.dll" Alias "D3DXCreateTextureFromResourceW" (ByVal pDevice As IDirect3DDevice9, ByVal hSrcModule As LongPtr, ByVal pSrcResource As String, ByRef ppTexture As IDirect3DTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateCubeTextureFromResourceA Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal hSrcModule As LongPtr, ByVal pSrcResource As String, ByRef ppCubeTexture As IDirect3DCubeTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateCubeTextureFromResourceW Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal hSrcModule As LongPtr, ByVal pSrcResource As LongPtr, ByRef ppCubeTexture As IDirect3DCubeTexture9) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXCreateCubeTextureFromResource Lib "D3DX9_43.dll" Alias "D3DXCreateCubeTextureFromResourceW" (ByVal pDevice As IDirect3DDevice9, ByVal hSrcModule As LongPtr, ByVal pSrcResource As String, ByRef ppCubeTexture As IDirect3DCubeTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateVolumeTextureFromResourceA Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal hSrcModule As LongPtr, ByVal pSrcResource As String, ByRef ppVolumeTexture As IDirect3DVolumeTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateVolumeTextureFromResourceW Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal hSrcModule As LongPtr, ByVal pSrcResource As LongPtr, ByRef ppVolumeTexture As IDirect3DVolumeTexture9) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXCreateVolumeTextureFromResource Lib "D3DX9_43.dll" Alias "D3DXCreateVolumeTextureFromResourceW" (ByVal pDevice As IDirect3DDevice9, ByVal hSrcModule As LongPtr, ByVal pSrcResource As String, ByRef ppVolumeTexture As IDirect3DVolumeTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateTextureFromFileExA Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal pSrcFile As String, ByVal Width As Long, ByVal Height As Long, ByVal MipLevels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByVal Filter As Long, ByVal MipFilter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO, ByRef pPalette As PALETTEENTRY, ByRef ppTexture As IDirect3DTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateTextureFromFileExW Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal pSrcFile As LongPtr, ByVal Width As Long, ByVal Height As Long, ByVal MipLevels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByVal Filter As Long, ByVal MipFilter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO, ByRef pPalette As PALETTEENTRY, ByRef ppTexture As IDirect3DTexture9) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXCreateTextureFromFileEx Lib "D3DX9_43.dll" Alias "D3DXCreateTextureFromFileExW" (ByVal pDevice As IDirect3DDevice9, ByVal pSrcFile As String, ByVal Width As Long, ByVal Height As Long, ByVal MipLevels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByVal Filter As Long, ByVal MipFilter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO, ByRef pPalette As PALETTEENTRY, ByRef ppTexture As IDirect3DTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateCubeTextureFromFileExA Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal pSrcFile As String, ByVal Size As Long, ByVal MipLevels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByVal Filter As Long, ByVal MipFilter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO, ByRef pPalette As PALETTEENTRY, ByRef ppCubeTexture As IDirect3DCubeTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateCubeTextureFromFileExW Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal pSrcFile As LongPtr, ByVal Size As Long, ByVal MipLevels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByVal Filter As Long, ByVal MipFilter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO, ByRef pPalette As PALETTEENTRY, ByRef ppCubeTexture As IDirect3DCubeTexture9) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXCreateCubeTextureFromFileEx Lib "D3DX9_43.dll" Alias "D3DXCreateCubeTextureFromFileExW" (ByVal pDevice As IDirect3DDevice9, ByVal pSrcFile As String, ByVal Size As Long, ByVal MipLevels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByVal Filter As Long, ByVal MipFilter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO, ByRef pPalette As PALETTEENTRY, ByRef ppCubeTexture As IDirect3DCubeTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateVolumeTextureFromFileExA Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal pSrcFile As String, ByVal Width As Long, ByVal Height As Long, ByVal Depth As Long, ByVal MipLevels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByVal Filter As Long, ByVal MipFilter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO, ByRef pPalette As PALETTEENTRY, ByRef ppVolumeTexture As IDirect3DVolumeTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateVolumeTextureFromFileExW Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal pSrcFile As LongPtr, ByVal Width As Long, ByVal Height As Long, ByVal Depth As Long, ByVal MipLevels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByVal Filter As Long, ByVal MipFilter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO, ByRef pPalette As PALETTEENTRY, ByRef ppVolumeTexture As IDirect3DVolumeTexture9) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXCreateVolumeTextureFromFileEx Lib "D3DX9_43.dll" Alias "D3DXCreateVolumeTextureFromFileExW" (ByVal pDevice As IDirect3DDevice9, ByVal pSrcFile As String, ByVal Width As Long, ByVal Height As Long, ByVal Depth As Long, ByVal MipLevels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByVal Filter As Long, ByVal MipFilter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO, ByRef pPalette As PALETTEENTRY, ByRef ppVolumeTexture As IDirect3DVolumeTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateTextureFromResourceExA Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal hSrcModule As LongPtr, ByVal pSrcResource As String, ByVal Width As Long, ByVal Height As Long, ByVal MipLevels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByVal Filter As Long, ByVal MipFilter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO, ByRef pPalette As PALETTEENTRY, ByRef ppTexture As IDirect3DTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateTextureFromResourceExW Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal hSrcModule As LongPtr, ByVal pSrcResource As LongPtr, ByVal Width As Long, ByVal Height As Long, ByVal MipLevels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByVal Filter As Long, ByVal MipFilter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO, ByRef pPalette As PALETTEENTRY, ByRef ppTexture As IDirect3DTexture9) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXCreateTextureFromResourceEx Lib "D3DX9_43.dll" Alias "D3DXCreateTextureFromResourceExW" (ByVal pDevice As IDirect3DDevice9, ByVal hSrcModule As LongPtr, ByVal pSrcResource As String, ByVal Width As Long, ByVal Height As Long, ByVal MipLevels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByVal Filter As Long, ByVal MipFilter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO, ByRef pPalette As PALETTEENTRY, ByRef ppTexture As IDirect3DTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateCubeTextureFromResourceExA Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal hSrcModule As LongPtr, ByVal pSrcResource As String, ByVal Size As Long, ByVal MipLevels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByVal Filter As Long, ByVal MipFilter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO, ByRef pPalette As PALETTEENTRY, ByRef ppCubeTexture As IDirect3DCubeTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateCubeTextureFromResourceExW Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal hSrcModule As LongPtr, ByVal pSrcResource As LongPtr, ByVal Size As Long, ByVal MipLevels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByVal Filter As Long, ByVal MipFilter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO, ByRef pPalette As PALETTEENTRY, ByRef ppCubeTexture As IDirect3DCubeTexture9) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXCreateCubeTextureFromResourceEx Lib "D3DX9_43.dll" Alias "D3DXCreateCubeTextureFromResourceExW" (ByVal pDevice As IDirect3DDevice9, ByVal hSrcModule As LongPtr, ByVal pSrcResource As String, ByVal Size As Long, ByVal MipLevels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByVal Filter As Long, ByVal MipFilter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO, ByRef pPalette As PALETTEENTRY, ByRef ppCubeTexture As IDirect3DCubeTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateVolumeTextureFromResourceExA Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal hSrcModule As LongPtr, ByVal pSrcResource As String, ByVal Width As Long, ByVal Height As Long, ByVal Depth As Long, ByVal MipLevels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByVal Filter As Long, ByVal MipFilter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO, ByRef pPalette As PALETTEENTRY, ByRef ppVolumeTexture As IDirect3DVolumeTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateVolumeTextureFromResourceExW Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal hSrcModule As LongPtr, ByVal pSrcResource As LongPtr, ByVal Width As Long, ByVal Height As Long, ByVal Depth As Long, ByVal MipLevels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByVal Filter As Long, ByVal MipFilter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO, ByRef pPalette As PALETTEENTRY, ByRef ppVolumeTexture As IDirect3DVolumeTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateVolumeTextureFromResourceEx Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal hSrcModule As LongPtr, ByVal pSrcResource As String, ByVal Width As Long, ByVal Height As Long, ByVal Depth As Long, ByVal MipLevels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByVal Filter As Long, ByVal MipFilter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO, ByRef pPalette As PALETTEENTRY, ByRef ppVolumeTexture As IDirect3DVolumeTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateTextureFromFileInMemory Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, pSrcData As Any, ByVal SrcDataSize As Long, ByRef ppTexture As IDirect3DTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateCubeTextureFromFileInMemory Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, pSrcData As Any, ByVal SrcDataSize As Long, ByRef ppCubeTexture As IDirect3DCubeTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateVolumeTextureFromFileInMemory Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, pSrcData As Any, ByVal SrcDataSize As Long, ByRef ppVolumeTexture As IDirect3DVolumeTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateTextureFromFileInMemoryEx Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, pSrcData As Any, ByVal SrcDataSize As Long, ByVal Width As Long, ByVal Height As Long, ByVal MipLevels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByVal Filter As Long, ByVal MipFilter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO, ByRef pPalette As PALETTEENTRY, ByRef ppTexture As IDirect3DTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateCubeTextureFromFileInMemoryEx Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, pSrcData As Any, ByVal SrcDataSize As Long, ByVal Size As Long, ByVal MipLevels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByVal Filter As Long, ByVal MipFilter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO, ByRef pPalette As PALETTEENTRY, ByRef ppCubeTexture As IDirect3DCubeTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateVolumeTextureFromFileInMemoryEx Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, pSrcData As Any, ByVal SrcDataSize As Long, ByVal Width As Long, ByVal Height As Long, ByVal Depth As Long, ByVal MipLevels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByVal Filter As Long, ByVal MipFilter As Long, ByVal ColorKey As Long, ByRef pSrcInfo As D3DXIMAGE_INFO, ByRef pPalette As PALETTEENTRY, ByRef ppVolumeTexture As IDirect3DVolumeTexture9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXSaveTextureToFileA Lib "D3DX9_43.dll" (ByVal pDestFile As String, ByVal DestFormat As D3DXIMAGE_FILEFORMAT, ByVal pSrcTexture As IDirect3DBaseTexture9, ByRef pSrcPalette As PALETTEENTRY) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXSaveTextureToFileW Lib "D3DX9_43.dll" (ByVal pDestFile As LongPtr, ByVal DestFormat As D3DXIMAGE_FILEFORMAT, ByVal pSrcTexture As IDirect3DBaseTexture9, ByRef pSrcPalette As PALETTEENTRY) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXSaveTextureToFile Lib "D3DX9_43.dll" Alias "D3DXSaveTextureToFileW" (ByVal pDestFile As String, ByVal DestFormat As D3DXIMAGE_FILEFORMAT, ByVal pSrcTexture As IDirect3DBaseTexture9, ByRef pSrcPalette As PALETTEENTRY) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXSaveTextureToFileInMemory Lib "D3DX9_43.dll" (ByRef ppDestBuf As LongPtr, ByVal DestFormat As D3DXIMAGE_FILEFORMAT, ByVal pSrcTexture As IDirect3DBaseTexture9, ByRef pSrcPalette As PALETTEENTRY) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXFilterTexture Lib "D3DX9_43.dll" (ByVal pBaseTexture As IDirect3DBaseTexture9, ByRef pPalette As PALETTEENTRY, ByVal SrcLevel As Long, ByVal Filter As Long) As Long
' Alias D3DXFilterCubeTexture As D3DXFilterTexture
' Alias D3DXFilterVolumeTexture As D3DXFilterTexture
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXFilterCubeTexture Lib "D3DX9_43.dll" Alias "D3DXFilterTexture" (ByVal pBaseTexture As IDirect3DBaseTexture9, ByRef pPalette As PALETTEENTRY, ByVal SrcLevel As Long, ByVal Filter As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXFilterVolumeTexture Lib "D3DX9_43.dll" Alias "D3DXFilterTexture" (ByVal pBaseTexture As IDirect3DBaseTexture9, ByRef pPalette As PALETTEENTRY, ByVal SrcLevel As Long, ByVal Filter As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXFillTexture Lib "D3DX9_43.dll" (ByVal pTexture As IDirect3DTexture9, ByVal pFunction As LongPtr, pData As Any) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXFillCubeTexture Lib "D3DX9_43.dll" (ByVal pCubeTexture As IDirect3DCubeTexture9, ByVal pFunction As LongPtr, pData As Any) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXFillVolumeTexture Lib "D3DX9_43.dll" (ByVal pVolumeTexture As IDirect3DVolumeTexture9, ByVal pFunction As LongPtr, pData As Any) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXFillTextureTX Lib "D3DX9_43.dll" (ByVal pTexture As IDirect3DTexture9, ByVal pTextureShader As ID3DXTextureShader) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXFillCubeTextureTX Lib "D3DX9_43.dll" (ByVal pCubeTexture As IDirect3DCubeTexture9, ByVal pTextureShader As ID3DXTextureShader) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXFillVolumeTextureTX Lib "D3DX9_43.dll" (ByVal pVolumeTexture As IDirect3DVolumeTexture9, ByVal pTextureShader As ID3DXTextureShader) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXComputeNormalMap Lib "D3DX9_43.dll" (ByVal pTexture As IDirect3DTexture9, ByVal pSrcTexture As IDirect3DTexture9, ByRef pSrcPalette As PALETTEENTRY, ByVal Flags As D3DX_NORMALMAP, ByVal Channel As Long, ByVal Amplitude As Single) As Long


'd3d9xshader.h
Public Function D3DXTX_VERSION(ByVal _Major As Long, ByVal _Minor As Long) As Long
    Return ((84& /* 'T' */ << 24) Or (88& /* 'X' */ << 16) Or ((_Major) << 8) Or (_Minor))
End Function


'd3dx9mesh.h

Public Function IID_ID3DXBaseMesh() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7ed943dd, &H52e8, &H40b5, &Ha8, &Hd8, &H76, &H68, &H5c, &H40, &H63, &H30)
IID_ID3DXBaseMesh = iid
End Function
Public Function IID_ID3DXMesh() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4020e5c2, &H1403, &H4929, &H88, &H3f, &He2, &He8, &H49, &Hfa, &Hc1, &H95)
IID_ID3DXMesh = iid
End Function
Public Function IID_ID3DXPMesh() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8875769a, &Hd579, &H4088, &Haa, &Heb, &H53, &H4d, &H1a, &Hd8, &H4e, &H96)
IID_ID3DXPMesh = iid
End Function
Public Function IID_ID3DXSPMesh() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H667ea4c7, &Hf1cd, &H4386, &Hb5, &H23, &H7c, &H2, &H90, &Hb8, &H3c, &Hc5)
IID_ID3DXSPMesh = iid
End Function
Public Function IID_ID3DXSkinInfo() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H11eaa540, &Hf9a6, &H4d49, &Hae, &H6a, &He1, &H92, &H21, &Hf7, &Hc, &Hc4)
IID_ID3DXSkinInfo = iid
End Function
Public Function IID_ID3DXPatchMesh() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3ce6cc22, &Hdbf2, &H44f4, &H89, &H4d, &Hf9, &Hc3, &H4a, &H33, &H71, &H39)
IID_ID3DXPatchMesh = iid
End Function


Public Enum D3DXPATCHMESHTYPE
    D3DXPATCHMESH_RECT = &H001
    D3DXPATCHMESH_TRI = &H002
    D3DXPATCHMESH_NPATCH = &H003
    D3DXPATCHMESH_FORCE_DWORD = &H7fffffff ' force 32-bit size enum */
End Enum

Public Enum D3DXMESH
    D3DXMESH_32BIT = &H001 ' If set, then use 32 bit indices, if not set use 16 bit indices.
    D3DXMESH_DONOTCLIP = &H002 ' Use D3DUSAGE_DONOTCLIP for VB & IB.
    D3DXMESH_POINTS = &H004 ' Use D3DUSAGE_POINTS for VB & IB.
    D3DXMESH_RTPATCHES = &H008 ' Use D3DUSAGE_RTPATCHES for VB & IB.
    D3DXMESH_NPATCHES = &H4000 ' Use D3DUSAGE_NPATCHES for VB & IB.
    D3DXMESH_VB_SYSTEMMEM = &H010 ' Use D3DPOOL_SYSTEMMEM for VB. Overrides D3DXMESH_MANAGEDVERTEXBUFFER
    D3DXMESH_VB_MANAGED = &H020 ' Use D3DPOOL_MANAGED for VB.
    D3DXMESH_VB_WRITEONLY = &H040 ' Use D3DUSAGE_WRITEONLY for VB.
    D3DXMESH_VB_DYNAMIC = &H080 ' Use D3DUSAGE_DYNAMIC for VB.
    D3DXMESH_VB_SOFTWAREPROCESSING = &H8000& ' Use D3DUSAGE_SOFTWAREPROCESSING for VB.
    D3DXMESH_IB_SYSTEMMEM = &H100 ' Use D3DPOOL_SYSTEMMEM for IB. Overrides D3DXMESH_MANAGEDINDEXBUFFER
    D3DXMESH_IB_MANAGED = &H200 ' Use D3DPOOL_MANAGED for IB.
    D3DXMESH_IB_WRITEONLY = &H400 ' Use D3DUSAGE_WRITEONLY for IB.
    D3DXMESH_IB_DYNAMIC = &H800 ' Use D3DUSAGE_DYNAMIC for IB.
    D3DXMESH_IB_SOFTWAREPROCESSING = &H10000 ' Use D3DUSAGE_SOFTWAREPROCESSING for IB.
    D3DXMESH_VB_SHARE = &H1000 ' Valid for Clone* calls only, forces cloned mesh/pmesh to share vertex buffer
    D3DXMESH_USEHWONLY = &H2000 ' Valid for ID3DXSkinInfo::ConvertToBlendedMesh
    '  Helper options
    D3DXMESH_SYSTEMMEM = &H110 ' D3DXMESH_VB_SYSTEMMEM | D3DXMESH_IB_SYSTEMMEM
    D3DXMESH_MANAGED = &H220 ' D3DXMESH_VB_MANAGED | D3DXMESH_IB_MANAGED
    D3DXMESH_WRITEONLY = &H440 ' D3DXMESH_VB_WRITEONLY | D3DXMESH_IB_WRITEONLY
    D3DXMESH_DYNAMIC = &H880 ' D3DXMESH_VB_DYNAMIC | D3DXMESH_IB_DYNAMIC
    D3DXMESH_SOFTWAREPROCESSING = &H18000 ' D3DXMESH_VB_SOFTWAREPROCESSING | D3DXMESH_IB_SOFTWAREPROCESSING
End Enum

Public Enum _D3DXPATCHMESH '(No non-underscore name defined)
    D3DXPATCHMESH_DEFAULT = 000
End Enum

Public Enum _D3DXMESHSIMP
    D3DXMESHSIMP_VERTEX = &H1
    D3DXMESHSIMP_FACE = &H2
End Enum

Public Enum D3DXCLEANTYPE
    D3DXCLEAN_BACKFACING = &H00000001
    D3DXCLEAN_BOWTIES = &H00000002
    '  Helper options
    D3DXCLEAN_SKINNING = D3DXCLEAN_BACKFACING ' Bowtie cleaning modifies geometry and breaks skinning
    D3DXCLEAN_OPTIMIZATION = D3DXCLEAN_BACKFACING
    D3DXCLEAN_SIMPLIFICATION = D3DXCLEAN_BACKFACING Or D3DXCLEAN_BOWTIES
End Enum

Public Enum _MAX_FVF_DECL_SIZE
    MAX_FVF_DECL_SIZE = MAXD3DDECLLENGTH + 1 ' +1 for END
End Enum

Public Enum D3DXTANGENT
    D3DXTANGENT_WRAP_U = &H01
    D3DXTANGENT_WRAP_V = &H02
    D3DXTANGENT_WRAP_UV = &H03
    D3DXTANGENT_DONT_NORMALIZE_PARTIALS = &H04
    D3DXTANGENT_DONT_ORTHOGONALIZE = &H08
    D3DXTANGENT_ORTHOGONALIZE_FROM_V = &H010
    D3DXTANGENT_ORTHOGONALIZE_FROM_U = &H020
    D3DXTANGENT_WEIGHT_BY_AREA = &H040
    D3DXTANGENT_WEIGHT_EQUAL = &H080
    D3DXTANGENT_WIND_CW = &H0100
    D3DXTANGENT_CALCULATE_NORMALS = &H0200
    D3DXTANGENT_GENERATE_IN_PLACE = &H0400
End Enum

Public Enum D3DXIMT
    D3DXIMT_WRAP_U = &H01
    D3DXIMT_WRAP_V = &H02
    D3DXIMT_WRAP_UV = &H03
End Enum

Public Enum D3DXUVATLAS
    D3DXUVATLAS_DEFAULT = &H00
    D3DXUVATLAS_GEODESIC_FAST = &H01
    D3DXUVATLAS_GEODESIC_QUALITY = &H02
End Enum

Public Type D3DXATTRIBUTERANGE
    AttribId As Long
    FaceStart As Long
    FaceCount As Long
    VertexStart As Long
    VertexCount As Long
End Type

Public Type D3DXMATERIAL
    MatD3D As D3DMATERIAL9
    pTextureFilename As String
End Type

Public Enum D3DXEFFECTDEFAULTTYPE
    D3DXEDT_STRING = &H1 ' pValue points to a null terminated ASCII string
    D3DXEDT_FLOATS = &H2 ' pValue points to an array of floats - number of floats is NumBytes / sizeof(float)
    D3DXEDT_DWORD = &H3 ' pValue points to a DWORD
    D3DXEDT_FORCEDWORD = &H7fffffff
End Enum

Public Type D3DXEFFECTDEFAULT
    pParamName As String
    Type As D3DXEFFECTDEFAULTTYPE ' type of the data pointed to by pValue
    NumBytes As Long ' size in bytes of the data pointed to by pValue
    pValue As LongPtr ' data for the default of the effect
End Type

Public Type D3DXEFFECTINSTANCE
    pEffectFilename As String
    NumDefaults As Long
    pDefaults As LongPtr 'LPD3DXEFFECTDEFAULT
End Type

Public Type D3DXATTRIBUTEWEIGHTS
    Position As Single
    Boundary As Single
    Normal As Single
    Diffuse As Single
    Specular As Single
    Texcoord(0 To 7) As Single
    Tangent As Single
    Binormal As Single
End Type

Public Enum _D3DXWELDEPSILONSFLAGS
    D3DXWELDEPSILONS_WELDALL = &H1 ' weld all vertices marked by adjacency as being overlapping
    D3DXWELDEPSILONS_WELDPARTIALMATCHES = &H2 ' if a given vertex component is within epsilon, modify partial matched
    '  vertices so that both components identical AND if all components "equal"
    '  remove one of the vertices
    D3DXWELDEPSILONS_DONOTREMOVEVERTICES = &H4 ' instructs weld to only allow modifications to vertices and not removal
    '  ONLY valid if D3DXWELDEPSILONS_WELDPARTIALMATCHES is set
    '  useful to modify vertices to be equal, but not allow vertices to be removed
    D3DXWELDEPSILONS_DONOTSPLIT = &H8 ' instructs weld to specify the D3DXMESHOPT_DONOTSPLIT flag when doing an Optimize(ATTR_SORT)
    '  if this flag is not set, all vertices that are in separate attribute groups
    '  will remain split and not welded.  Setting this flag can slow down software vertex processing
End Enum

Public Type D3DXWELDEPSILONS
    Position As Single ' NOTE: This does NOT replace the epsilon in GenerateAdjacency
    ' in general, it should be the same value or greater than the one passed to GeneratedAdjacency
    BlendWeights As Single
    Normal As Single
    PSize As Single
    Specular As Single
    Diffuse As Single
    Texcoord(0 To 7) As Single
    Tangent As Single
    Binormal As Single
    TessFactor As Single
End Type

Public Enum _D3DXMESHOPT
    D3DXMESHOPT_COMPACT = &H01000000
    D3DXMESHOPT_ATTRSORT = &H02000000
    D3DXMESHOPT_VERTEXCACHE = &H04000000
    D3DXMESHOPT_STRIPREORDER = &H08000000
    D3DXMESHOPT_IGNOREVERTS = &H10000000 ' optimize faces only, don't touch vertices
    D3DXMESHOPT_DONOTSPLIT = &H20000000 ' do not split vertices shared between attribute groups when attribute sorting
    D3DXMESHOPT_DEVICEINDEPENDENT = &H00400000 ' Only affects VCache.  uses a static known good cache size for all cards
    '  D3DXMESHOPT_SHAREVB has been removed, please use D3DXMESH_VB_SHARE instead
End Enum

Public Type D3DXBONECOMBINATION
    AttribId As Long
    FaceStart As Long
    FaceCount As Long
    VertexStart As Long
    VertexCount As Long
    BoneId As Long
End Type

Public Type D3DXPATCHINFO
    PatchType As D3DXPATCHMESHTYPE
    Degree As D3DDEGREETYPE
    Basis As D3DBASISTYPE
End Type

[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateMesh Lib "d3dx9_43.dll" (ByVal NumFaces As Long, ByVal NumVertices As Long, ByVal Options As D3DXMESH, ByRef pDeclaration As D3DVERTEXELEMENT9, ByVal pD3DDevice As IDirect3DDevice9, ByRef ppMesh As ID3DXMesh) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateMeshFVF Lib "d3dx9_43.dll" (ByVal NumFaces As Long, ByVal NumVertices As Long, ByVal Options As D3DXMESH, ByVal FVF As D3DFVF, ByVal pD3DDevice As IDirect3DDevice9, ByRef ppMesh As ID3DXMesh) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateSPMesh Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXMesh, ByRef pAdjacency As Long, ByRef pVertexAttributeWeights As D3DXATTRIBUTEWEIGHTS, ByRef pVertexWeights As Single, ByRef ppSMesh As ID3DXSPMesh) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCleanMesh Lib "d3dx9_43.dll" (ByVal CleanType As Long, ByVal pMeshIn As ID3DXMesh, ByRef pAdjacencyIn As Long, ByRef ppMeshOut As ID3DXMesh, ByRef pAdjacencyOut As Long, ByRef ppErrorsAndWarnings As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXValidMesh Lib "d3dx9_43.dll" (ByVal pMeshIn As ID3DXMesh, ByRef pAdjacency As Long, ByRef ppErrorsAndWarnings As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXGeneratePMesh Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXMesh, ByRef pAdjacency As Long, ByRef pVertexAttributeWeights As D3DXATTRIBUTEWEIGHTS, ByRef pVertexWeights As Single, ByVal MinValue As Long, ByVal Options As _D3DXMESHSIMP, ByRef ppPMesh As ID3DXPMesh) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXSimplifyMesh Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXMesh, ByRef pAdjacency As Long, ByRef pVertexAttributeWeights As D3DXATTRIBUTEWEIGHTS, ByRef pVertexWeights As Single, ByVal MinValue As Long, ByVal Options As _D3DXMESHSIMP, ByRef ppMesh As ID3DXMesh) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXComputeBoundingSphere Lib "d3dx9_43.dll" (ByRef pFirstPosition As D3DXVECTOR3, ByVal NumVertices As Long, ByVal dwStride As Long, ByRef pCenter As D3DXVECTOR3, ByRef pRadius As Single) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXComputeBoundingBox Lib "d3dx9_43.dll" (ByRef pFirstPosition As D3DXVECTOR3, ByVal NumVertices As Long, ByVal dwStride As Long, ByRef pMin As D3DXVECTOR3, ByRef pMax As D3DXVECTOR3) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXComputeNormals Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXBaseMesh, ByRef pAdjacency As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateBuffer Lib "d3dx9_43.dll" (ByVal NumBytes As Long, ByRef ppBuffer As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXLoadMeshFromXA Lib "d3dx9_43.dll" (ByVal pFilename As String, ByVal Options As D3DXMESH, ByVal pD3DDevice As IDirect3DDevice9, ByRef ppAdjacency As ID3DXBuffer, ByRef ppMaterials As ID3DXBuffer, ByRef ppEffectInstances As ID3DXBuffer, ByRef pNumMaterials As Long, ByRef ppMesh As ID3DXMesh) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXLoadMeshFromXW Lib "d3dx9_43.dll" (ByVal pFilename As LongPtr, ByVal Options As D3DXMESH, ByVal pD3DDevice As IDirect3DDevice9, ByRef ppAdjacency As ID3DXBuffer, ByRef ppMaterials As ID3DXBuffer, ByRef ppEffectInstances As ID3DXBuffer, ByRef pNumMaterials As Long, ByRef ppMesh As ID3DXMesh) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXLoadMeshFromX Lib "d3dx9_43.dll" Alias "D3DXLoadMeshFromXW" (ByVal pFilename As String, ByVal Options As D3DXMESH, ByVal pD3DDevice As IDirect3DDevice9, ByRef ppAdjacency As ID3DXBuffer, ByRef ppMaterials As ID3DXBuffer, ByRef ppEffectInstances As ID3DXBuffer, ByRef pNumMaterials As Long, ByRef ppMesh As ID3DXMesh) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXLoadMeshFromXInMemory Lib "d3dx9_43.dll" (ByVal Memory As LongPtr, ByVal SizeOfMemory As Long, ByVal Options As D3DXMESH, ByVal pD3DDevice As IDirect3DDevice9, ByRef ppAdjacency As ID3DXBuffer, ByRef ppMaterials As ID3DXBuffer, ByRef ppEffectInstances As ID3DXBuffer, ByRef pNumMaterials As Long, ByRef ppMesh As ID3DXMesh) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXLoadMeshFromXResource Lib "d3dx9_43.dll" (ByVal Module As LongPtr, ByVal Name As String, ByVal Type As String, ByVal Options As D3DXMESH, ByVal pD3DDevice As IDirect3DDevice9, ByRef ppAdjacency As ID3DXBuffer, ByRef ppMaterials As ID3DXBuffer, ByRef ppEffectInstances As ID3DXBuffer, ByRef pNumMaterials As Long, ByRef ppMesh As ID3DXMesh) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXSaveMeshToXA Lib "d3dx9_43.dll" (ByVal pFilename As String, ByVal pMesh As ID3DXMesh, ByRef pAdjacency As Long, ByRef pMaterials As D3DXMATERIAL, ByRef pEffectInstances As D3DXEFFECTINSTANCE, ByVal NumMaterials As Long, ByVal Format As D3DXF_FILEFORMAT) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXSaveMeshToXW Lib "d3dx9_43.dll" (ByVal pFilename As LongPtr, ByVal pMesh As ID3DXMesh, ByRef pAdjacency As Long, ByRef pMaterials As D3DXMATERIAL, ByRef pEffectInstances As D3DXEFFECTINSTANCE, ByVal NumMaterials As Long, ByVal Format As D3DXF_FILEFORMAT) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXSaveMeshToX Lib "d3dx9_43.dll" Alias "D3DXSaveMeshToXW" (ByVal pFilename As String, ByVal pMesh As ID3DXMesh, ByRef pAdjacency As Long, ByRef pMaterials As D3DXMATERIAL, ByRef pEffectInstances As D3DXEFFECTINSTANCE, ByVal NumMaterials As Long, ByVal Format As D3DXF_FILEFORMAT) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreatePMeshFromStream Lib "d3dx9_43.dll" (ByVal pStream As IStream, ByVal Options As Long, ByVal pD3DDevice As IDirect3DDevice9, ByRef ppMaterials As ID3DXBuffer, ByRef ppEffectInstances As ID3DXBuffer, ByRef pNumMaterials As Long, ByRef ppPMesh As ID3DXPMesh) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateSkinInfo Lib "d3dx9_43.dll" (ByVal NumVertices As Long, ByRef pDeclaration As D3DVERTEXELEMENT9, ByVal NumBones As Long, ByRef ppSkinInfo As ID3DXSkinInfo) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateSkinInfoFVF Lib "d3dx9_43.dll" (ByVal NumVertices As Long, ByVal FVF As D3DFVF, ByVal NumBones As Long, ByRef ppSkinInfo As ID3DXSkinInfo) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXLoadMeshFromXof Lib "d3dx9_43.dll" (ByVal pxofMesh As ID3DXFileData, ByVal Options As D3DXMESH, ByVal pD3DDevice As IDirect3DDevice9, ByRef ppAdjacency As ID3DXBuffer, ByRef ppMaterials As ID3DXBuffer, ByRef ppEffectInstances As ID3DXBuffer, ByRef pNumMaterials As Long, ByRef ppMesh As ID3DXMesh) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXLoadSkinMeshFromXof Lib "d3dx9_43.dll" (ByVal pxofMesh As ID3DXFileData, ByVal Options As D3DXMESH, ByVal pD3DDevice As IDirect3DDevice9, ByRef ppAdjacency As ID3DXBuffer, ByRef ppMaterials As ID3DXBuffer, ByRef ppEffectInstances As ID3DXBuffer, ByRef pMatOut As Long, ByRef ppSkinInfo As ID3DXSkinInfo, ByRef ppMesh As ID3DXMesh) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateSkinInfoFromBlendedMesh Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXBaseMesh, ByVal NumBones As Long, ByRef pBoneCombinationTable As D3DXBONECOMBINATION, ByRef ppSkinInfo As ID3DXSkinInfo) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXTessellateNPatches Lib "d3dx9_43.dll" (ByVal pMeshIn As ID3DXMesh, ByRef pAdjacencyIn As Long, ByVal NumSegs As Single, ByVal QuadraticInterpNormals As BOOL, ByRef ppMeshOut As ID3DXMesh, ByRef ppAdjacencyOut As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXGenerateOutputDecl Lib "d3dx9_43.dll" (ByRef pOutput As D3DVERTEXELEMENT9, ByRef pInput As D3DVERTEXELEMENT9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXLoadPatchMeshFromXof Lib "d3dx9_43.dll" (ByVal pXofObjMesh As ID3DXFileData, ByVal Options As Long, ByVal pD3DDevice As IDirect3DDevice9, ByRef ppMaterials As ID3DXBuffer, ByRef ppEffectInstances As ID3DXBuffer, ByRef pNumMaterials As Long, ByRef ppMesh As ID3DXPatchMesh) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXRectPatchSize Lib "d3dx9_43.dll" (ByRef pfNumSegs As Single, ByRef pdwTriangles As Long, ByRef pdwVertices As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXTriPatchSize Lib "d3dx9_43.dll" (ByRef pfNumSegs As Single, ByRef pdwTriangles As Long, ByRef pdwVertices As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXTessellateRectPatch Lib "d3dx9_43.dll" (ByVal pVB As IDirect3DVertexBuffer9, ByRef pNumSegs As Single, ByRef pdwInDecl As D3DVERTEXELEMENT9, ByRef pRectPatchInfo As D3DRECTPATCH_INFO, ByVal pMesh As ID3DXMesh) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXTessellateTriPatch Lib "d3dx9_43.dll" (ByVal pVB As IDirect3DVertexBuffer9, ByRef pNumSegs As Single, ByRef pInDecl As D3DVERTEXELEMENT9, ByRef pTriPatchInfo As D3DTRIPATCH_INFO, ByVal pMesh As ID3DXMesh) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateNPatchMesh Lib "d3dx9_43.dll" (ByVal pMeshSysMem As ID3DXMesh, ByRef pPatchMesh As ID3DXPatchMesh) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreatePatchMesh Lib "d3dx9_43.dll" (ByRef pInfo As D3DXPATCHINFO, ByVal dwNumPatches As Long, ByVal dwNumVertices As Long, ByVal dwOptions As Long, ByRef pDecl As D3DVERTEXELEMENT9, ByVal pD3DDevice As IDirect3DDevice9, ByRef pPatchMesh As ID3DXPatchMesh) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXValidPatchMesh Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXPatchMesh, ByRef dwcDegenerateVertices As Long, ByRef dwcDegeneratePatches As Long, ByRef ppErrorsAndWarnings As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXGetFVFVertexSize Lib "d3dx9_43.dll" (ByVal FVF As D3DFVF) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXGetDeclVertexSize Lib "d3dx9_43.dll" (ByRef pDecl As D3DVERTEXELEMENT9, ByVal Stream As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXGetDeclLength Lib "d3dx9_43.dll" (ByRef pDecl As D3DVERTEXELEMENT9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXDeclaratorFromFVF Lib "d3dx9_43.dll" (ByVal FVF As D3DFVF, ByRef pDeclarator As D3DVERTEXELEMENT9) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXFVFFromDeclarator Lib "d3dx9_43.dll" (ByRef pDeclarator As D3DVERTEXELEMENT9, ByRef pFVF As D3DFVF) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXWeldVertices Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXMesh, ByVal Flags As _D3DXWELDEPSILONSFLAGS, ByRef pEpsilons As D3DXWELDEPSILONS, ByRef pAdjacencyIn As Long, ByRef pAdjacencyOut As Long, ByRef pFaceRemap As Long, ByRef ppVertexRemap As ID3DXBuffer) As Long
Public Type D3DXINTERSECTINFO
    FaceIndex As Long ' index of face intersected
    U As Single ' Barycentric Hit Coordinates    
    V As Single ' Barycentric Hit Coordinates
    Dist As Single ' Ray-Intersection Parameter Distance
End Type
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXIntersect Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXBaseMesh, ByRef pRayPos As D3DXVECTOR3, ByRef pRayDir As D3DXVECTOR3, ByRef pHit As BOOL, ByRef pFaceIndex As Long, ByRef pU As Single, ByRef pV As Single, ByRef pDist As Single, ByRef ppAllHits As ID3DXBuffer, ByRef pCountOfHits As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXIntersectSubset Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXBaseMesh, ByVal AttribId As Long, ByRef pRayPos As D3DXVECTOR3, ByRef pRayDir As D3DXVECTOR3, ByRef pHit As BOOL, ByRef pFaceIndex As Long, ByRef pU As Single, ByRef pV As Single, ByRef pDist As Single, ByRef ppAllHits As ID3DXBuffer, ByRef pCountOfHits As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXSplitMesh Lib "d3dx9_43.dll" (ByVal pMeshIn As ID3DXMesh, ByRef pAdjacencyIn As Long, ByVal MaxSize As Long, ByVal Options As D3DXMESH, ByRef pMeshesOut As Long, ByRef ppMeshArrayOut As ID3DXBuffer, ByRef ppAdjacencyArrayOut As ID3DXBuffer, ByRef ppFaceRemapArrayOut As ID3DXBuffer, ByRef ppVertRemapArrayOut As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXIntersectTri Lib "d3dx9_43.dll" (ByRef p0 As D3DXVECTOR3, ByRef p1 As D3DXVECTOR3, ByRef p2 As D3DXVECTOR3, ByRef pRayPos As D3DXVECTOR3, ByRef pRayDir As D3DXVECTOR3, ByRef pU As Single, ByRef pV As Single, ByRef pDist As Single) As BOOL
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXSphereBoundProbe Lib "d3dx9_43.dll" (ByRef pCenter As D3DXVECTOR3, ByVal Radius As Single, ByRef pRayPosition As D3DXVECTOR3, ByRef pRayDirection As D3DXVECTOR3) As BOOL
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXBoxBoundProbe Lib "d3dx9_43.dll" (ByRef pMin As D3DXVECTOR3, ByRef pMax As D3DXVECTOR3, ByRef pRayPosition As D3DXVECTOR3, ByRef pRayDirection As D3DXVECTOR3) As BOOL
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXComputeTangentFrame Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXMesh, ByVal dwOptions As D3DXTANGENT) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXComputeTangentFrameEx Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXMesh, ByVal dwTextureInSemantic As Long, ByVal dwTextureInIndex As Long, ByVal dwUPartialOutSemantic As Long, ByVal dwUPartialOutIndex As Long, ByVal dwVPartialOutSemantic As Long, ByVal dwVPartialOutIndex As Long, ByVal dwNormalOutSemantic As Long, ByVal dwNormalOutIndex As Long, ByVal dwOptions As D3DXTANGENT, ByRef pdwAdjacency As Long, ByVal fPartialEdgeThreshold As Single, ByVal fSingularPointThreshold As Single, ByVal fNormalEdgeThreshold As Single, ByRef ppMeshOut As ID3DXMesh, ByRef ppVertexMapping As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXComputeTangent Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXMesh, ByVal TexStage As Long, ByVal TangentIndex As Long, ByVal BinormIndex As Long, ByVal Wrap As Long, pAdjacency As Long) As Long

Public Delegate Function D3DXUVATLASCB (ByVal fPercentDone As Single, ByVal lpUserContext As LongPtr) As Long
Public Delegate Function D3DXIMTSIGNALCALLBACK (uv As D3DXVECTOR2, ByVal uPrimitiveID As Long, ByVal uSignalDimension As Long, ByVal pUserData As LongPtr, pfSignalOut As Single) As Long
' #If WDL_NO_DELEGATES Then
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXUVAtlasCreate Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXMesh, ByVal uMaxChartNumber As Long, ByVal fMaxStretch As Single, ByVal uWidth As Long, ByVal uHeight As Long, ByVal fGutter As Single, ByVal dwTextureIndex As Long, ByRef pdwAdjacency As Long, ByRef pdwFalseEdgeAdjacency As Long, ByRef pfIMTArray As Single, ByVal pStatusCallback As LongPtr, ByVal fCallbackFrequency As Single, ByVal pUserContext As LongPtr, ByVal dwOptions As D3DXUVATLAS, ByRef ppMeshOut As ID3DXMesh, ByRef ppFacePartitioning As ID3DXBuffer, ByRef ppVertexRemapArray As ID3DXBuffer, ByRef pfMaxStretchOut As Single, ByRef puNumChartsOut As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXUVAtlasPartition Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXMesh, ByVal uMaxChartNumber As Long, ByVal fMaxStretch As Single, ByVal dwTextureIndex As Long, ByRef pdwAdjacency As Long, ByRef pdwFalseEdgeAdjacency As Long, ByRef pfIMTArray As Single, ByVal pStatusCallback As LongPtr, ByVal fCallbackFrequency As Single, ByVal pUserContext As LongPtr, ByVal dwOptions As D3DXUVATLAS, ByRef ppMeshOut As ID3DXMesh, ByRef ppFacePartitioning As ID3DXBuffer, ByRef ppVertexRemapArray As ID3DXBuffer, ByRef ppPartitionResultAdjacency As ID3DXBuffer, ByRef pfMaxStretchOut As Single, ByRef puNumChartsOut As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXUVAtlasPack Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXMesh, ByVal uWidth As Long, ByVal uHeight As Long, ByVal fGutter As Single, ByVal dwTextureIndex As Long, ByRef pdwPartitionResultAdjacency As Long, ByVal pStatusCallback As LongPtr, ByVal fCallbackFrequency As Single, ByVal pUserContext As LongPtr, ByVal dwOptions As Long, ByRef pFacePartitioning As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXComputeIMTFromPerVertexSignal Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXMesh, ByRef pfVertexSignal As Single, ByVal uSignalDimension As Long, ByVal uSignalStride As Long, ByVal dwOptions As D3DXIMT, ByVal pStatusCallback As LongPtr, ByVal pUserContext As LongPtr, ByRef ppIMTData As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXComputeIMTFromSignal Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXMesh, ByVal dwTextureIndex As Long, ByVal uSignalDimension As Long, ByVal fMaxUVDistance As Single, ByVal dwOptions As D3DXIMT, ByVal pSignalCallback As LongPtr, ByVal pUserData As LongPtr, ByVal pStatusCallback As LongPtr, ByVal pUserContext As LongPtr, ByRef ppIMTData As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXComputeIMTFromTexture Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXMesh, ByVal pTexture As IDirect3DTexture9, ByVal dwTextureIndex As Long, ByVal dwOptions As D3DXIMT, ByVal pStatusCallback As LongPtr, ByVal pUserContext As LongPtr, ByRef ppIMTData As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXComputeIMTFromPerTexelSignal Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXMesh, ByVal dwTextureIndex As Long, ByRef pfTexelSignal As Single, ByVal uWidth As Long, ByVal uHeight As Long, ByVal uSignalDimension As Long, ByVal uComponents As Long, ByVal dwOptions As D3DXIMT, ByVal pStatusCallback As LongPtr, ByVal pUserContext As LongPtr, ByRef ppIMTData As ID3DXBuffer) As Long
' #Else
' [UseGetLastError(False)]
' Public Declare PtrSafe Function D3DXUVAtlasCreate Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXMesh, ByVal uMaxChartNumber As Long, ByVal fMaxStretch As Single, ByVal uWidth As Long, ByVal uHeight As Long, ByVal fGutter As Single, ByVal dwTextureIndex As Long, ByRef pdwAdjacency As Long, ByRef pdwFalseEdgeAdjacency As Long, ByRef pfIMTArray As Single, ByVal pStatusCallback As D3DXUVATLASCB, ByVal fCallbackFrequency As Single, ByVal pUserContext As LongPtr, ByVal dwOptions As D3DXUVATLAS, ByRef ppMeshOut As ID3DXMesh, ByRef ppFacePartitioning As ID3DXBuffer, ByRef ppVertexRemapArray As ID3DXBuffer, ByRef pfMaxStretchOut As Single, ByRef puNumChartsOut As Long) As Long
' [UseGetLastError(False)]
' Public Declare PtrSafe Function D3DXUVAtlasPartition Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXMesh, ByVal uMaxChartNumber As Long, ByVal fMaxStretch As Single, ByVal dwTextureIndex As Long, ByRef pdwAdjacency As Long, ByRef pdwFalseEdgeAdjacency As Long, ByRef pfIMTArray As Single, ByVal pStatusCallback As D3DXUVATLASCB, ByVal fCallbackFrequency As Single, ByVal pUserContext As LongPtr, ByVal dwOptions As D3DXUVATLAS, ByRef ppMeshOut As ID3DXMesh, ByRef ppFacePartitioning As ID3DXBuffer, ByRef ppVertexRemapArray As ID3DXBuffer, ByRef ppPartitionResultAdjacency As ID3DXBuffer, ByRef pfMaxStretchOut As Single, ByRef puNumChartsOut As Long) As Long
' [UseGetLastError(False)]
' Public Declare PtrSafe Function D3DXUVAtlasPack Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXMesh, ByVal uWidth As Long, ByVal uHeight As Long, ByVal fGutter As Single, ByVal dwTextureIndex As Long, ByRef pdwPartitionResultAdjacency As Long, ByVal pStatusCallback As D3DXUVATLASCB, ByVal fCallbackFrequency As Single, ByVal pUserContext As LongPtr, ByVal dwOptions As Long, ByRef pFacePartitioning As ID3DXBuffer) As Long
' [UseGetLastError(False)]
' Public Declare PtrSafe Function D3DXComputeIMTFromPerVertexSignal Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXMesh, ByRef pfVertexSignal As Single, ByVal uSignalDimension As Long, ByVal uSignalStride As Long, ByVal dwOptions As D3DXIMT, ByVal pStatusCallback As D3DXUVATLASCB, ByVal pUserContext As LongPtr, ByRef ppIMTData As ID3DXBuffer) As Long
' [UseGetLastError(False)]
' Public Declare PtrSafe Function D3DXComputeIMTFromSignal Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXMesh, ByVal dwTextureIndex As Long, ByVal uSignalDimension As Long, ByVal fMaxUVDistance As Single, ByVal dwOptions As D3DXIMT, ByVal pSignalCallback As D3DXIMTSIGNALCALLBACK, ByVal pUserData As LongPtr, ByVal pStatusCallback As D3DXUVATLASCB, ByVal pUserContext As LongPtr, ByRef ppIMTData As ID3DXBuffer) As Long
' [UseGetLastError(False)]
' Public Declare PtrSafe Function D3DXComputeIMTFromTexture Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXMesh, ByVal pTexture As IDirect3DTexture9, ByVal dwTextureIndex As Long, ByVal dwOptions As D3DXIMT, ByVal pStatusCallback As D3DXUVATLASCB, ByVal pUserContext As LongPtr, ByRef ppIMTData As ID3DXBuffer) As Long
' [UseGetLastError(False)]
' Public Declare PtrSafe Function D3DXComputeIMTFromPerTexelSignal Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXMesh, ByVal dwTextureIndex As Long, ByRef pfTexelSignal As Single, ByVal uWidth As Long, ByVal uHeight As Long, ByVal uSignalDimension As Long, ByVal uComponents As Long, ByVal dwOptions As D3DXIMT, ByVal pStatusCallback As D3DXUVATLASCB, ByVal pUserContext As LongPtr, ByRef ppIMTData As ID3DXBuffer) As Long
' #End If

[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXConvertMeshSubsetToSingleStrip Lib "d3dx9_43.dll" (ByVal MeshIn As ID3DXBaseMesh, ByVal AttribId As Long, ByVal IBOptions As D3DXMESH, ByRef ppIndexBuffer As IDirect3DIndexBuffer9, ByRef pNumIndices As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXConvertMeshSubsetToStrips Lib "d3dx9_43.dll" (ByVal MeshIn As ID3DXBaseMesh, ByVal AttribId As Long, ByVal IBOptions As D3DXMESH, ByRef ppIndexBuffer As IDirect3DIndexBuffer9, ByRef pNumIndices As Long, ByRef ppStripLengths As ID3DXBuffer, ByRef pNumStrips As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXOptimizeFaces Lib "d3dx9_43.dll" (ByVal pbIndices As LongPtr, ByVal cFaces As Long, ByVal cVertices As Long, ByVal b32BitIndices As BOOL, ByRef pFaceRemap As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXOptimizeVertices Lib "d3dx9_43.dll" (ByVal pbIndices As LongPtr, ByVal cFaces As Long, ByVal cVertices As Long, ByVal b32BitIndices As BOOL, ByRef pVertexRemap As Long) As Long

Public Enum D3DXSHCOMPRESSQUALITYTYPE
    D3DXSHCQUAL_FASTLOWQUALITY = 1
    D3DXSHCQUAL_SLOWHIGHQUALITY = 2
    D3DXSHCQUAL_FORCE_DWORD = &H7fffffff
End Enum

Public Enum D3DXSHGPUSIMOPT
    D3DXSHGPUSIMOPT_SHADOWRES256 = 1
    D3DXSHGPUSIMOPT_SHADOWRES512 = 0
    D3DXSHGPUSIMOPT_SHADOWRES1024 = 2
    D3DXSHGPUSIMOPT_SHADOWRES2048 = 3
    D3DXSHGPUSIMOPT_HIGHQUALITY = 4
    D3DXSHGPUSIMOPT_FORCE_DWORD = &H7fffffff
End Enum

Public Type D3DXSHMATERIAL
    Diffuse As D3DCOLORVALUE ' Diffuse albedo of the surface.  (Ignored if object is a Mirror)
    bMirror As BOOL ' Must be set to FALSE.  bMirror == TRUE not currently supported
    bSubSurf As BOOL ' true if the object does subsurface scattering - can't do this and be a mirror
    ' subsurface scattering parameters
    RelativeIndexOfRefraction As Single
    Absorption As D3DCOLORVALUE
    ReducedScattering As D3DCOLORVALUE
End Type

Public Type D3DXSHPRTSPLITMESHVERTDATA
    uVertRemap As Long ' vertex in original mesh this corresponds to
    uSubCluster As Long ' cluster index relative to super cluster
    ucVertStatus As Byte ' 1 if vertex has valid data, 0 if it is "fill"
End Type

Public Type D3DXSHPRTSPLITMESHCLUSTERDATA
    uVertStart As Long ' initial index into remapped vertex array
    uVertLength As Long ' number of vertices in this super cluster
    uFaceStart As Long ' initial index into face array
    uFaceLength As Long ' number of faces in this super cluster
    uClusterStart As Long ' initial index into cluster array
    uClusterLength As Long ' number of clusters in this super cluster
End Type


Public Delegate Function D3DXSHPRTSIMCB (ByVal fPercentDone As Single, ByVal lpUserContext As LongPtr) As Long

Public Function IID_ID3DXPRTBuffer() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf1827e47, &Ha8, &H49cd, &H90, &H8c, &H9d, &H11, &H95, &H5f, &H87, &H28)
IID_ID3DXPRTBuffer = iid
End Function
Public Function IID_ID3DXPRTCompBuffer() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha758d465, &Hfe8d, &H45ad, &H9c, &Hf0, &Hd0, &H1e, &H56, &H26, &H6a, &H7)
IID_ID3DXPRTCompBuffer = iid
End Function
Public Function IID_ID3DXTextureGutterHelper() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H838f01ec, &H9729, &H4527, &Haa, &Hdb, &Hdf, &H70, &Had, &He7, &Hfe, &Ha9)
IID_ID3DXTextureGutterHelper = iid
End Function
Public Function IID_ID3DXPRTEngine() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H683a4278, &Hcd5f, &H4d24, &H90, &Had, &Hc4, &He1, &Hb6, &H85, &H5d, &H53)
IID_ID3DXPRTEngine = iid
End Function

[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreatePRTBuffer Lib "d3dx9_43.dll" (ByVal NumSamples As Long, ByVal NumCoeffs As Long, ByVal NumChannels As Long, ByRef ppBuffer As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreatePRTBufferTex Lib "d3dx9_43.dll" (ByVal Width As Long, ByVal Height As Long, ByVal NumCoeffs As Long, ByVal NumChannels As Long, ByRef ppBuffer As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXLoadPRTBufferFromFileA Lib "d3dx9_43.dll" (ByVal pFilename As String, ByRef ppBuffer As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXLoadPRTBufferFromFileW Lib "d3dx9_43.dll" (ByVal pFilename As LongPtr, ByRef ppBuffer As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXLoadPRTBufferFromFile Lib "d3dx9_43.dll" Alias "D3DXLoadPRTBufferFromFileW" (ByVal pFilename As String, ByRef ppBuffer As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXSavePRTBufferToFileA Lib "d3dx9_43.dll" (ByVal pFileName As String, ByVal pBuffer As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXLoadPRTCompBufferFromFileA Lib "d3dx9_43.dll" (ByVal pFilename As String, ByRef ppBuffer As ID3DXPRTCompBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXSavePRTCompBufferToFileA Lib "d3dx9_43.dll" (ByVal pFileName As String, ByVal pBuffer As ID3DXPRTCompBuffer) As Long
'#If WDL_NO_DELEGATES Then
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreatePRTCompBuffer Lib "d3dx9_43.dll" (ByVal Quality As D3DXSHCOMPRESSQUALITYTYPE, ByVal NumClusters As Long, ByVal NumPCA As Long, ByVal pCB As LongPtr, ByVal lpUserContext As LongPtr, ByVal pBufferIn As ID3DXBuffer, ByRef ppBufferOut As ID3DXPRTCompBuffer) As Long
' #Else
' [UseGetLastError(False)]
' Public Declare PtrSafe Function D3DXCreatePRTCompBuffer Lib "d3dx9_43.dll" (ByVal Quality As D3DXSHCOMPRESSQUALITYTYPE, ByVal NumClusters As Long, ByVal NumPCA As Long, ByVal pCB As D3DXSHPRTSIMCB, ByVal lpUserContext As LongPtr, ByVal pBufferIn As ID3DXBuffer, ByRef ppBufferOut As ID3DXPRTCompBuffer) As Long
' #End If
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateTextureGutterHelper Lib "d3dx9_43.dll" (ByVal Width As Long, ByVal Height As Long, ByVal pMesh As ID3DXMesh, ByVal GutterSize As Single, ByRef ppBuffer As ID3DXTextureGutterHelper) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreatePRTEngine Lib "d3dx9_43.dll" (ByVal pMesh As ID3DXMesh, ByRef pAdjacency As Long, ByVal ExtractUVs As BOOL, ByVal pBlockerMesh As ID3DXMesh, ByRef ppEngine As ID3DXPRTEngine) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXConcatenateMeshes Lib "d3dx9_43.dll" (ByRef ppMeshes As ID3DXMesh, ByVal NumMeshes As Long, ByVal Options As D3DXMESH, ByRef pGeomXForms As D3DXMATRIX, ByRef pTextureXForms As D3DXMATRIX, ByRef pDecl As D3DVERTEXELEMENT9, ByVal pD3DDevice As IDirect3DDevice9, ByRef ppMeshOut As ID3DXMesh) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXSHPRTCompSuperCluster Lib "d3dx9_43.dll" (ByRef pClusterIDs As Long, ByVal pScene As ID3DXMesh, ByVal MaxNumClusters As Long, ByVal NumClusters As Long, ByRef pSuperClusterIDs As Long, ByRef pNumSuperClusters As Long) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXSHPRTCompSplitMeshSC Lib "d3dx9_43.dll" (ByRef pClusterIDs As Long, ByVal NumVertices As Long, ByVal NumClusters As Long, ByRef pSuperClusterIDs As Long, ByVal NumSuperClusters As Long, pInputIB As Any, ByVal InputIBIs32Bit As BOOL, ByVal NumFaces As Long, ByRef ppIBData As ID3DXBuffer, ByRef pIBDataLength As Long, ByVal OutputIBIs32Bit As BOOL, ByRef ppFaceRemap As ID3DXBuffer, ByRef ppVertData As ID3DXBuffer, ByRef pVertDataLength As Long, ByRef pSCClusterList As Long, ByRef pSCData As D3DXSHPRTSPLITMESHCLUSTERDATA) As Long

Public Function DXFILEOBJ_XSkinMeshHeader() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3cf169ce, &Hff7c, &H44ab, &H93, &Hc0, &Hf7, &H8f, &H62, &Hd1, &H72, &He2)
DXFILEOBJ_XSkinMeshHeader = iid
End Function
Public Function DXFILEOBJ_VertexDuplicationIndices() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb8d65549, &Hd7c9, &H4995, &H89, &Hcf, &H53, &Ha9, &Ha8, &Hb0, &H31, &He3)
DXFILEOBJ_VertexDuplicationIndices = iid
End Function
Public Function DXFILEOBJ_FaceAdjacency() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha64c844a, &He282, &H4756, &H8b, &H80, &H25, &Hc, &Hde, &H4, &H39, &H8c)
DXFILEOBJ_FaceAdjacency = iid
End Function
Public Function DXFILEOBJ_SkinWeights() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6f0d123b, &Hbad2, &H4167, &Ha0, &Hd0, &H80, &H22, &H4f, &H25, &Hfa, &Hbb)
DXFILEOBJ_SkinWeights = iid
End Function
Public Function DXFILEOBJ_Patch() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha3eb5d44, &Hfc22, &H429d, &H9a, &Hfb, &H32, &H21, &Hcb, &H97, &H19, &Ha6)
DXFILEOBJ_Patch = iid
End Function
Public Function DXFILEOBJ_PatchMesh() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd02c95cc, &Hedba, &H4305, &H9b, &H5d, &H18, &H20, &Hd7, &H70, &H4b, &Hbf)
DXFILEOBJ_PatchMesh = iid
End Function
Public Function DXFILEOBJ_PatchMesh9() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb9ec94e1, &Hb9a6, &H4251, &Hba, &H18, &H94, &H89, &H3f, &H2, &Hc0, &Hea)
DXFILEOBJ_PatchMesh9 = iid
End Function
Public Function DXFILEOBJ_PMInfo() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb6c3e656, &Hec8b, &H4b92, &H9b, &H62, &H68, &H16, &H59, &H52, &H29, &H47)
DXFILEOBJ_PMInfo = iid
End Function
Public Function DXFILEOBJ_PMAttributeRange() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H917e0427, &Hc61e, &H4a14, &H9c, &H64, &Haf, &He6, &H5f, &H9e, &H98, &H44)
DXFILEOBJ_PMAttributeRange = iid
End Function
Public Function DXFILEOBJ_PMVSplitRecord() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H574ccc14, &Hf0b3, &H4333, &H82, &H2d, &H93, &He8, &Ha8, &Ha0, &H8e, &H4c)
DXFILEOBJ_PMVSplitRecord = iid
End Function
Public Function DXFILEOBJ_FVFData() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb6e70a0e, &H8ef9, &H4e83, &H94, &Had, &Hec, &Hc8, &Hb0, &Hc0, &H48, &H97)
DXFILEOBJ_FVFData = iid
End Function
Public Function DXFILEOBJ_VertexElement() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf752461c, &H1e23, &H48f6, &Hb9, &Hf8, &H83, &H50, &H85, &Hf, &H33, &H6f)
DXFILEOBJ_VertexElement = iid
End Function
Public Function DXFILEOBJ_DeclData() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hbf22e553, &H292c, &H4781, &H9f, &Hea, &H62, &Hbd, &H55, &H4b, &Hdd, &H93)
DXFILEOBJ_DeclData = iid
End Function
Public Function DXFILEOBJ_EffectFloats() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf1cfe2b3, &Hde3, &H4e28, &Haf, &Ha1, &H15, &H5a, &H75, &Ha, &H28, &H2d)
DXFILEOBJ_EffectFloats = iid
End Function
Public Function DXFILEOBJ_EffectString() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd55b097e, &Hbdb6, &H4c52, &Hb0, &H3d, &H60, &H51, &Hc8, &H9d, &He, &H42)
DXFILEOBJ_EffectString = iid
End Function
Public Function DXFILEOBJ_EffectDWord() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H622c0ed0, &H956e, &H4da9, &H90, &H8a, &H2a, &Hf9, &H4f, &H3c, &He7, &H16)
DXFILEOBJ_EffectDWord = iid
End Function
Public Function DXFILEOBJ_EffectParamFloats() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3014b9a0, &H62f5, &H478c, &H9b, &H86, &He4, &Hac, &H9f, &H4e, &H41, &H8b)
DXFILEOBJ_EffectParamFloats = iid
End Function
Public Function DXFILEOBJ_EffectParamString() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1dbc4c88, &H94c1, &H46ee, &H90, &H76, &H2c, &H28, &H81, &H8c, &H94, &H81)
DXFILEOBJ_EffectParamString = iid
End Function
Public Function DXFILEOBJ_EffectParamDWord() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He13963bc, &Hae51, &H4c5d, &Hb0, &Hf, &Hcf, &Ha3, &Ha9, &Hd9, &H7c, &He5)
DXFILEOBJ_EffectParamDWord = iid
End Function
Public Function DXFILEOBJ_EffectInstance() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He331f7e4, &H559, &H4cc2, &H8e, &H99, &H1c, &Hec, &H16, &H57, &H92, &H8f)
DXFILEOBJ_EffectInstance = iid
End Function
Public Function DXFILEOBJ_AnimTicksPerSecond() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9e415a43, &H7ba6, &H4a73, &H87, &H43, &Hb7, &H3d, &H47, &He8, &H84, &H76)
DXFILEOBJ_AnimTicksPerSecond = iid
End Function
Public Function DXFILEOBJ_CompressedAnimationSet() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7f9b00b3, &Hf125, &H4890, &H87, &H6e, &H1c, &H42, &Hbf, &H69, &H7c, &H4d)
DXFILEOBJ_CompressedAnimationSet = iid
End Function

Public Type XFILECOMPRESSEDANIMATIONSET
    CompressedBlockSize As Long
    TicksPerSec As Single
    PlaybackType As Long
    BufferLength As Long
End Type

'd3dx9xof.h

Public Enum D3DXF_FILEFORMAT
    D3DXF_FILEFORMAT_BINARY = 0
    D3DXF_FILEFORMAT_TEXT = 1
    D3DXF_FILEFORMAT_COMPRESSED = 2
End Enum

Public Enum D3DXF_FILESAVEOPTIONS
    D3DXF_FILESAVE_TOFILE = &H00
    D3DXF_FILESAVE_TOWFILE = &H01
End Enum

Public Enum D3DXF_FILELOADOPTIONS
    D3DXF_FILELOAD_FROMFILE = &H00
    D3DXF_FILELOAD_FROMWFILE = &H01
    D3DXF_FILELOAD_FROMRESOURCE = &H02
    D3DXF_FILELOAD_FROMMEMORY = &H03
End Enum

Public Type D3DXF_FILELOADRESOURCE
    hModule As LongPtr ' Desc
    lpName As String ' Desc
    lpType As String ' Desc
End Type

Public Type D3DXF_FILELOADMEMORY
    lpMemory As LongPtr 'LPCVOID ' Desc
    dSize As LongPtr ' Desc
End Type

Public Function IID_ID3DXFile() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hcef08cf9, &H7b4f, &H4429, &H96, &H24, &H2a, &H69, &H0a, &H93, &H32, &H01)
 IID_ID3DXFile = iid
End Function
Public Function IID_ID3DXFileSaveObject() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hcef08cfa, &H7b4f, &H4429, &H96, &H24, &H2a, &H69, &H0a, &H93, &H32, &H01)
 IID_ID3DXFileSaveObject = iid
End Function
Public Function IID_ID3DXFileSaveData() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hcef08cfb, &H7b4f, &H4429, &H96, &H24, &H2a, &H69, &H0a, &H93, &H32, &H01)
 IID_ID3DXFileSaveData = iid
End Function
Public Function IID_ID3DXFileEnumObject() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hcef08cfc, &H7b4f, &H4429, &H96, &H24, &H2a, &H69, &H0a, &H93, &H32, &H01)
 IID_ID3DXFileEnumObject = iid
End Function
Public Function IID_ID3DXFileData() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hcef08cfd, &H7b4f, &H4429, &H96, &H24, &H2a, &H69, &H0a, &H93, &H32, &H01)
 IID_ID3DXFileData = iid
End Function

[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXFileCreate Lib "D3DX9_43.dll" (lplpDirectXFile As ID3DXFile) As Long

Public Const D3DXFERR_BADOBJECT  = &H88760384 'MAKE_HRESULT(1, _FACD3DXF, 900)
Public Const D3DXFERR_BADVALUE  = &H88760385 'MAKE_HRESULT(1, _FACD3DXF, 901)
Public Const D3DXFERR_BADTYPE  = &H88760386 'MAKE_HRESULT(1, _FACD3DXF, 902)
Public Const D3DXFERR_NOTFOUND  = &H88760387 'MAKE_HRESULT(1, _FACD3DXF, 903)
Public Const D3DXFERR_NOTDONEYET  = &H88760388 'MAKE_HRESULT(1, _FACD3DXF, 904)
Public Const D3DXFERR_FILENOTFOUND  = &H88760389 'MAKE_HRESULT(1, _FACD3DXF, 905)
Public Const D3DXFERR_RESOURCENOTFOUND  = &H8876038A 'MAKE_HRESULT(1, _FACD3DXF, 906)
Public Const D3DXFERR_BADRESOURCE  = &H8876038B 'MAKE_HRESULT(1, _FACD3DXF, 907)
Public Const D3DXFERR_BADFILETYPE  = &H8876038C 'MAKE_HRESULT(1, _FACD3DXF, 908)
Public Const D3DXFERR_BADFILEVERSION  = &H8876038D 'MAKE_HRESULT(1, _FACD3DXF, 909)
Public Const D3DXFERR_BADFILEFLOATSIZE  = &H8876038E 'MAKE_HRESULT(1, _FACD3DXF, 910)
Public Const D3DXFERR_BADFILE  = &H8876038F 'MAKE_HRESULT(1, _FACD3DXF, 911)
Public Const D3DXFERR_PARSEERROR  = &H88760390 'MAKE_HRESULT(1, _FACD3DXF, 912)
Public Const D3DXFERR_BADARRAYSIZE  = &H88760391 'MAKE_HRESULT(1, _FACD3DXF, 913)
Public Const D3DXFERR_BADDATAREFERENCE  = &H88760392 'MAKE_HRESULT(1, _FACD3DXF, 914)
Public Const D3DXFERR_NOMOREOBJECTS  = &H88760393 'MAKE_HRESULT(1, _FACD3DXF, 915)
Public Const D3DXFERR_NOMOREDATA  = &H88760394 'MAKE_HRESULT(1, _FACD3DXF, 916)
Public Const D3DXFERR_BADCACHEFILE  = &H88760395 'MAKE_HRESULT(1, _FACD3DXF, 917) 

'd3d9xshape.h

[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreatePolygon Lib "D3DX9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal Length As Single, ByVal Sides As Long, ppMesh As ID3DXMesh, ppAdjacency As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateBox Lib "d3dx9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal Width As Single, ByVal Height As Single, ByVal Depth As Single, ByRef ppMesh As ID3DXMesh, ByRef ppAdjacency As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateCylinder Lib "d3dx9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal Radius1 As Single, ByVal Radius2 As Single, ByVal Length As Single, ByVal Slices As Long, ByVal Stacks As Long, ByRef ppMesh As ID3DXMesh, ByRef ppAdjacency As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateSphere Lib "d3dx9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal Radius As Single, ByVal Slices As Long, ByVal Stacks As Long, ByRef ppMesh As ID3DXMesh, ByRef ppAdjacency As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateTorus Lib "d3dx9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal InnerRadius As Single, ByVal OuterRadius As Single, ByVal Sides As Long, ByVal Rings As Long, ByRef ppMesh As ID3DXMesh, ByRef ppAdjacency As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateTeapot Lib "d3dx9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByRef ppMesh As ID3DXMesh, ByRef ppAdjacency As ID3DXBuffer) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateTextA Lib "d3dx9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal hDC As LongPtr, ByVal pText As String, ByVal Deviation As Single, ByVal Extrusion As Single, ByRef ppMesh As ID3DXMesh, ByRef ppAdjacency As ID3DXBuffer, ByRef pGlyphMetrics As GLYPHMETRICSFLOAT) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function D3DXCreateTextW Lib "d3dx9_43.dll" (ByVal pDevice As IDirect3DDevice9, ByVal hDC As LongPtr, ByVal pText As LongPtr, ByVal Deviation As Single, ByVal Extrusion As Single, ByRef ppMesh As ID3DXMesh, ByRef ppAdjacency As ID3DXBuffer, ByRef pGlyphMetrics As GLYPHMETRICSFLOAT) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function D3DXCreateText Lib "d3dx9_43.dll" Alias "D3DXCreateTextW" (ByVal pDevice As IDirect3DDevice9, ByVal hDC As LongPtr, ByVal pText As String, ByVal Deviation As Single, ByVal Extrusion As Single, ByRef ppMesh As ID3DXMesh, ByRef ppAdjacency As ID3DXBuffer, ByRef pGlyphMetrics As GLYPHMETRICSFLOAT) As Long





End Module

#End If