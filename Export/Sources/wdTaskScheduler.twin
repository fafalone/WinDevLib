'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

'WinDevLib - wdTaskScheduler :: Task Scheduler Interfaces (1.0 - 4.0)
'COMPLETE (tasksch.odl)

'-----------------------------------------
'1.0
[InterfaceId("148BD52B-A2AB-11CE-B11F-00AA00530503")]
[OleAutomation(False)]
Interface ITaskTrigger Extends stdole.IUnknown
    Sub SetTrigger(pTrigger As TASK_TRIGGER)
    Sub GetTrigger(pTrigger As TASK_TRIGGER)
    Function GetTriggerString() As LongPtr
End Interface

[InterfaceId("a6b952f0-a4b1-11d0-997d-00aa006887ec")]
[OleAutomation(False)]
Interface IScheduledWorkItem Extends stdole.IUnknown
    Function CreateTrigger(piNewTrigger As Integer) As ITaskTrigger
    Sub DeleteTrigger(ByVal iTrigger As Integer)
    Function GetTriggerCount() As Integer
    Function GetTrigger(ByVal iTrigger As Integer) As ITaskTrigger
    Function GetTriggerString(ByVal iTrigger As Integer) As LongPtr
    Sub GetRunTimes(pstBegin As SYSTEMTIME, pstEnd As SYSTEMTIME, pCount As Integer, rgstTaskTimes As LongPtr)
    Sub GetNextRunTime(pstNextRun As SYSTEMTIME)
    Sub SetIdleWait(ByVal wMinutes As Integer, ByVal wDeadlineMinutes As Integer)
    Sub GetIdleWait(pwMinutes As Integer, pwDeadlineMinutes As Integer)
    Sub Run()
    Sub Terminate()
    Sub EditWorkItem(ByVal hParent As LongPtr, ByVal dwReserved As Long)
    Sub GetMostRecentRunTime(pstLastRun As SYSTEMTIME)
    Function GetStatus() As SCHED_STATUS
    Function GetExitCode() As Long
    Sub SetComment(ByVal pwszComment As String)
    Function GetComment() As LongPtr
    Sub SetCreator(ByVal pwszCreator As String)
    Function GetCreator() As LongPtr
    Sub SetWorkItemData(ByVal cbData As Integer, rgbData As Any)
    Sub GetWorkItemData(pcbData As Integer, prgbData As Any)
    Sub SetErrorRetryCount(ByVal wRetryCount As Integer)
    Function GetErrorRetryCount() As Integer
    Sub SetErrorRetryInterval(ByVal wRetryInterval As Integer)
    Function GetErrorRetryInterval() As Integer
    Sub SetFlags(ByVal dwFlags As TASK_FLAGS)
    Function GetFlags() As TASK_FLAGS
    Sub SetAccountInformation(ByVal pwszAccountName As String, ByVal pwszPassword As String)
    Function GetAccountInformation() As LongPtr
End Interface
[InterfaceId("148BD524-A2AB-11CE-B11F-00AA00530503")]
[OleAutomation(False)]
Interface ITask Extends IScheduledWorkItem
    Sub SetApplicationName(ByVal pwszApplicationName As String)
    Function GetApplicationName() As LongPtr
    Sub SetParameters(ByVal pwszParameters As String)
    Function GetParameters() As LongPtr
    Sub SetWorkingDirectory(ByVal pwszWorkingDirectory As String)
    Function GetWorkingDirectory() As LongPtr
    Sub SetPriority(ByVal dwPriority As Long)
    Function GetPriority() As Long
    Sub SetTaskFlags(ByVal dwFlags As Long)
    Function GetTaskFlags() As Long
    Sub SetMaxRunTime(ByVal dwMaxRunTimeMS As Long)
    Function GetMaxRunTime() As Long
End Interface

[InterfaceId("148BD528-A2AB-11CE-B11F-00AA00530503")]
[OleAutomation(False)]
Interface IEnumWorkItems Extends stdole.IUnknown
    [PreserveSig] Function Next(ByVal celt As Long, rgpwszNames As LongPtr, pceltFetched As Long) As Long
    [PreserveSig] Function Skip(ByVal celt As Long) As Long
    Sub Reset()
    Function Clone() As IEnumWorkItems
End Interface
'Alias IEnumWorkItems As IEnumTasks
[InterfaceId("148BD528-A2AB-11CE-B11F-00AA00530503")]
[OleAutomation(False)]
Interface IEnumTasks Extends stdole.IUnknown
    [PreserveSig] Function Next(ByVal celt As Long, rgpwszNames As LongPtr, pceltFetched As Long) As Long
    [PreserveSig] Function Skip(ByVal celt As Long) As Long
    Sub Reset()
    Function Clone() As IEnumTasks
End Interface


[InterfaceId("148BD527-A2AB-11CE-B11F-00AA00530503")]
[OleAutomation(False)]
Interface ISchedulingAgent Extends stdole.IUnknown
    Sub SetTargetComputer(ByVal pwszComputer As String)
    Function GetTargetComputer() As LongPtr
    Function Enum() As IEnumWorkItems
    Function Activate(ByVal pwszName As String, riid As UUID) As ITask
    Sub Delete(ByVal pwszName As String)
    Function NewWorkItem(ByVal pszTaskName As String, rclsid As UUID, riid As UUID) As ITask
    Sub AddWorkItem(ByVal pszTaskName As String, ByVal pWorkItem As IScheduledWorkItem)
    Sub IsOfType(ByVal pszName As String, riid As UUID)
End Interface
'Alias ISchedulingAgent As ITaskScheduler
[InterfaceId("148BD527-A2AB-11CE-B11F-00AA00530503")]
[OleAutomation(False)]
Interface ITaskScheduler Extends stdole.IUnknown
    Sub SetTargetComputer(ByVal pwszComputer As String)
    Function GetTargetComputer() As LongPtr
    Function Enum() As IEnumWorkItems
    Function Activate(ByVal pwszName As String, riid As UUID) As ITask
    Sub Delete(ByVal pwszName As String)
    Function NewWorkItem(ByVal pszTaskName As String, rclsid As UUID, riid As UUID) As ITask
    Sub AddWorkItem(ByVal pszTaskName As String, ByVal pWorkItem As IScheduledWorkItem)
    [PreserveSig]
    Function IsOfType(ByVal pszName As String, riid As UUID) As Long
End Interface

[InterfaceId("4086658a-cbbb-11cf-b604-00c04fd8d565")]
[OleAutomation(False)]
Interface IProvideTaskPage Extends stdole.IUnknown
    Function GetPage(ByVal tpType As TASKPAGE, ByVal fPersistChanges As Long) As LongPtr
End Interface

'---------------------------------------------
'2.0/3.0
[InterfaceId("79184A66-8664-423F-97F1-637356A5D812")]
'[DualInterface, DispInterface ]
[Description("Container for ITaskFolders.")]
Interface ITaskFolderCollection Extends IDispatch
    [DispId(&H60020000)]
    [Description("Number of elements.")]
    Property Get Count() As Long
    [DispId(0)]
    [Description("Retrieve specific element.")]
    Property Get Item(ByVal index As Variant) As ITaskFolder
    [DispId(-4)]
    [Description("Create new enumerator.")]
    Property Get _NewEnum() As stdole.IUnknown
End Interface
[InterfaceId("8CFAC062-A080-4C15-9A88-AA7C2AF80DFC")]
'[DualInterface, DispInterface ]
[Description("Container (directory) for tasks.")]
Interface ITaskFolder Extends IDispatch
    [DispId(1)]
    [Description("Identifier for folder.")]
    Property Get Name() As String
    [DispId(0)]
    [Description("Complete name for folder, including parent folders.")]
    Property Get Path() As String
    [DispId(3)]
    [Description("Retrieve sub-folder by name.")]
    Function GetFolder(ByVal Path As String) As ITaskFolder
    [DispId(4)]
    [Description("Retrieve all sub-folders.")]
    Function GetFolders(ByVal flags As Long) As ITaskFolderCollection
    [DispId(5)]
    [Description("Make a new sub-folder.")]
    Function CreateFolder(ByVal subFolderName As String, Optional ByVal sddl As Variant) As ITaskFolder
    [DispId(6)]
    [Description("Erase existing folder.")]
    Sub DeleteFolder(ByVal subFolderName As String, ByVal flags As Long)
    [DispId(7)]
    [Description("Retrieve named task from folder.")]
    Function GetTask(ByVal Path As String) As IRegisteredTask
    [DispId(8)]
    [Description("Retrieve all tasks from folder.")]
    Function GetTasks(ByVal flags As Long) As IRegisteredTaskCollection
    [DispId(9)]
    [Description("Erase named task.")]
    Sub DeleteTask(ByVal Name As String, ByVal flags As Long)
    [DispId(10)]
    [Description("Create new task from XML.")]
    Function RegisterTask(ByVal path As String, ByVal XmlText As String, ByVal flags As TASK_CREATION, ByVal UserId As Variant, ByVal password As Variant, ByVal LogonType As TASK_LOGON_TYPE, Optional ByVal sddl As Variant) As IRegisteredTask
    [DispId(11)]
    [Description("Create new task.")]
    Function RegisterTaskDefinition(ByVal path As String, ByVal pDefinition As ITaskDefinition, ByVal flags As TASK_CREATION, ByVal UserId As Variant, ByVal password As Variant, ByVal LogonType As TASK_LOGON_TYPE, Optional ByVal sddl As Variant) As IRegisteredTask
    [DispId(12)]
    [Description("Retrieve SDDL form of folder's current security descriptor.")]
    Function GetSecurityDescriptor(ByVal securityInformation As SECURITY_INFORMATION) As String
    [DispId(13)]
    [Description("Change security descriptor of task folder.")]
    Sub SetSecurityDescriptor(ByVal sddl As String, ByVal flags As TASK_CREATION)
End Interface

[InterfaceId("9C86F320-DEE3-4DD1-B972-A303F26B061E")]
' [DualInterface, DispInterface ]
[Description("A task that has been registered with the Task Scheduler service.")]
Interface IRegisteredTask Extends IDispatch
    [DispId(1)]
    [Description("Unique identifier for the task")]
    Property Get Name() As String
    [DispId(0)]
    [Description("Folder and name of the task")]
    Property Get Path() As String
    [DispId(2)]
    [Description("Current status of the task (TASK_STATE)")]
    Property Get State() As TASK_STATE
    [DispId(3)]
    [Description("If false the task will not be allowed to run.")]
    Property Get Enabled() As Integer
    [DispId(3)]
    [Description("If false the task will not be allowed to run.")]
    Property Let Enabled(ByVal pEnabled As Integer)
    [DispId(5)]
    Function Run(ByVal params As Variant) As IRunningTask
    [DispId(6)]
    [Description("Start the task now, with various options.")]
    Function RunEx(ByVal params As Variant, ByVal flags As TASK_RUN_FLAGS, ByVal sessionId As Long, ByVal user As String) As IRunningTask
    [DispId(7)]
    [Description("Retrieve collection of running tasks.")]
    Function GetInstances(ByVal flags As Long) As IRunningTaskCollection
    [DispId(8)]
    [Description("Most recent time the task executed.")]
    Property Get LastRunTime() As Date
    [DispId(9)]
    [Description("Return code from the most recent time the task ran.")]
    Property Get LastTaskResult() As Long
    [DispId(11)]
    [Description("Number of times the task was unable to run.")]
    Property Get NumberOfMissedRuns() As Long
    [DispId(12)]
    [Description("Next time the task is scheduled to start.")]
    Property Get NextRunTime() As Date
    [DispId(13)]
    [Description("Retrieve editable copy of this task's definition.")]
    Property Get Definition() As ITaskDefinition
    [DispId(14)]
    [Description("Retrieve XML version of this task's definition.")]
    Property Get Xml() As String
    [DispId(15)]
    [Description("SDDL form of security descriptor currently applied to task.")]
    Function GetSecurityDescriptor(ByVal securityInformation As SECURITY_INFORMATION) As String
    [DispId(16)]
    [Description("SDDL form of security descriptor to be applied to task.")]
    Sub SetSecurityDescriptor(ByVal sddl As String, ByVal flags As TASK_CREATION)
    [DispId(17)]
    [Description("Cause all task's instances to exit.")]
    Sub Stop(ByVal flags As Long)
    [DispId(&H60020011)] /*, Hidden, Restricted*/
    [Description("Retrieve collection of scheduled execution times.")]
    Sub GetRunTimes(pstStart As SYSTEMTIME, pstEnd As SYSTEMTIME, pCount As Long, pRunTimes As LongPtr)
End Interface
[InterfaceId("86627EB4-42A7-41E4-A4D9-AC33A72F2D52")]
'[DualInterface, DispInterface ]
[Description("Group of IRegisteredTasks.")]
Interface IRegisteredTaskCollection Extends IDispatch
    [DispId(&H60020000)]
    [Description("Number of elements in collection.")]
    Property Get Count() As Long
    [DispId(0)]
    [Description("Retrieve specific element")]
    Property Get Item(ByVal index As Variant) As IRegisteredTask
    [DispId(-4)]
    [Description("Create new Enumerator.")]
    Property Get _NewEnum() As stdole.IUnknown
End Interface

[InterfaceId("F5BC8FC5-536D-4F77-B852-FBC1356FDEB6")]
'[DualInterface, DispInterface ]
[Description("Communicate with the Task Scheduler service.")]
Interface ITaskDefinition Extends IDispatch
    [DispId(1)]
    [Description("Information about the task.")]
    Property Get RegistrationInfo() As IRegistrationInfo
    [DispId(1)]
    [Description("Information about the task.")]
    Property Let RegistrationInfo(ByVal pRegistrationInfo As IRegistrationInfo)
    [DispId(2)]
    [Description("Conditions which cause the task to be started.")]
    Property Get Triggers() As ITriggerCollection
    [DispId(2)]
    [Description("Conditions which cause the task to be started.")]
    Property Let Triggers(ByVal pTriggers As ITriggerCollection)
    [DispId(7)]
    [Description("Control various aspects of the task execution.")]
    Property Get Settings() As ITaskSettings
    [DispId(7)]
    [Description("Control various aspects of the task execution.")]
    Property Let Settings(ByVal pSettings As ITaskSettings)
    [DispId(11)]
    [Description("Information to be used by third parties - ignored by service.")]
    Property Get Data() As String
    [DispId(11)]
    [Description("Information to be used by third parties - ignored by service.")]
    Property Let Data(ByVal pData As String)
    [DispId(12)]
    [Description("User or group associated with the task.")]
    Property Get Principal() As IPrincipal
    [DispId(12)]
    [Description("User or group associated with the task.")]
    Property Let Principal(ByVal pPrincipal As IPrincipal)
    [DispId(13)]
    [Description("Acts to be performed by the task.")]
    Property Get Actions() As IActionCollection
    [DispId(13)]
    [Description("Acts to be performed by the task.")]
    Property Let Actions(ByVal pActions As IActionCollection)
    [DispId(14)]
    [Description("XML version of the task.")]
    Property Get XmlText() As String
    [DispId(14)]
    [Description("XML version of the task.")]
    Property Let XmlText(ByVal pXmlText As String)
End Interface

[InterfaceId("653758FB-7B9A-4F1E-A471-BEEB8E9B834E")]
'[DualInterface, DispInterface ]
[Description("An instance of a task that is currently executing.")]
Interface IRunningTask Extends IDispatch
    [DispId(1)]
     [Description("Human-readable identifier for the task.")]
     Property Get Name() As String
     [DispId(0)]
     [Description("Identifies a specific occurrence of a running task.")]
     Property Get InstanceGuid() As String
     [DispId(2)]
     [Description("Folder the task resides in.")]
     Property Get Path() As String
     [DispId(3)]
     [Description("TASK_STATE Enum, current condition of task.")]
     Property Get State() As TASK_STATE
     [DispId(4)]
     [Description("The action that is executing now.")]
     Property Get CurrentAction() As String
     [DispId(5)]
     [Description("Cause the task instance to exit.")]
     Sub Stop()
     [DispId(6)]
     [Description("Get current status from Task Scheduler service.")]
     Sub Refresh()
     [DispId(7)]
     [Description("Process ID of the host which is running the task.")]
    Property Get EnginePID() As Long
End Interface
[InterfaceId("6A67614B-6828-4FEC-AA54-6D52E8F1F2DB")]
'[DualInterface, DispInterface ]
[Description("Group of tasks which are currently executing.")]
Interface IRunningTaskCollection Extends IDispatch
    [DispId(1)]
    [Description("Number of elements in collection.")]
    Property Get Count() As Long
    [DispId(0)]
    [Description("Retrieve specific element.")]
    Property Get Item(ByVal index As Variant) As IRunningTask
    [DispId(-4)]
    [Description("Create new Enumerator.")]
    Property Get _NewEnum() As stdole.IUnknown
End Interface

[InterfaceId("416D8B73-CB41-4EA1-805C-9BE9A5AC4A74")]
'[DualInterface, DispInterface ]
[Description("Information about the task")]
Interface IRegistrationInfo Extends IDispatch
    [DispId(1)]
    [Description("Explanation of the task's purpose")]
    Property Get Description() As String
    [DispId(1)]
    [Description("Explanation of the task's purpose")]
    Property Let Description(ByVal pDescription As String)
    [DispId(2)]
    [Description("Person who wrote the task")]
    Property Get Author() As String
    [DispId(2)]
    [Description("Person who wrote the task")]
    Property Let Author(ByVal pAuthor As String)
    [DispId(4)]
    [Description("Revision level of the task")]
    Property Get Version() As String
    [DispId(4)]
    [Description("Revision level of the task")]
    Property Let Version(ByVal pVersion As String)
    [DispId(5)]
    [Description("Date task was created or updated")]
    Property Get Date() As String
    [DispId(5)]
    [Description("Date task was created or updated")]
    Property Let Date(ByVal pDate As String)
    [DispId(6)]
    [Description("Web address for further information")]
    Property Get Documentation() As String
    [DispId(6)]
    [Description("Web address for further information")]
    Property Let Documentation(ByVal pDocumentation As String)
    [DispId(9)]
    [Description("XML version of the registration information")]
    Property Get XmlText() As String
    [DispId(9)]
    [Description("XML version of the registration information")]
    Property Let XmlText(ByVal pXmlText As String)
    [DispId(10)]
    [Description("Name for the task, including folders if applicable")]
    Property Get URI() As String
    [DispId(10)]
    [Description("Name for the task, including folders if applicable")]
    Property Let URI(ByVal pUri As String)
    [DispId(11)]
    [Description("SDDL form of security descriptor to be applied to task")]
    Property Get SecurityDescriptor() As Variant
    [DispId(11)]
    [Description("SDDL form of security descriptor to be applied to task")]
    Property Let SecurityDescriptor(ByVal pSddl As Variant)
    [DispId(12)]
    [Description("Generator of the task (Company name)")]
    Property Get Source() As String
    [DispId(12)]
    [Description("Generator of the task (Company name)")]
    Property Let Source(ByVal pSource As String)
End Interface

[InterfaceId("85DF5081-1B24-4F32-878A-D9D14DF4CB77")]
'[DualInterface, DispInterface ]
[Description("Container for ITriggers")]
Interface ITriggerCollection Extends IDispatch
    [DispId(1)]
    [Description("Number of elements")]
    Property Get Count() As Long
    [DispId(0)]
    [Description("Retrieve specific element")]
    Property Get Item(ByVal index As Variant) As ITrigger
    [DispId(-4)]
    [Description("Create new enumerator")]
    Property Get _NewEnum() As stdole.IUnknown
    [DispId(2)]
    [Description("Make new trigger")]
    Function Create(ByVal type As TASK_TRIGGER_TYPE2) As ITrigger
    [DispId(4)]
    [Description("Erase specific trigger")]
    Sub Remove(ByVal index As Variant)
    [DispId(5)]
    [Description("Erase all triggers")]
    Sub Clear()
End Interface
[InterfaceId("09941815-EA89-4B5B-89E0-2A773801FAC3")]
'[DualInterface, DispInterface ]
[Description("Specify when the task is to be started.")]
Interface ITrigger Extends IDispatch
    [DispId(1)]
    [Description("Specific kind of trigger")]
    Property Get Type() As TASK_TRIGGER_TYPE2
    [DispId(2)]
    [Description("Unique name for this trigger")]
    Property Get Id() As String
    [DispId(2)]
    [Description("Unique name for this trigger")]
    Property Let Id(ByVal pId As String)
    [DispId(3)]
    [Description("Specify that task should execute multiple times")]
    Property Get Repetition() As IRepetitionPattern
    [DispId(3)]
    [Description("Specify that task should execute multiple times")]
    Property Let Repetition(ByVal pRepeat As IRepetitionPattern)
    [DispId(4)]
    [Description("Amount of time task is allowed to execute")]
    Property Get ExecutionTimeLimit() As String
    [DispId(4)]
    [Description("Amount of time task is allowed to execute")]
    Property Let ExecutionTimeLimit(ByVal pTimeLimit As String)
    [DispId(5)]
    [Description("Earliest time task is allowed to run")]
    Property Get StartBoundary() As String
    [DispId(5)]
    [Description("Earliest time task is allowed to run")]
    Property Let StartBoundary(ByVal pStart As String)
    [DispId(6)]
    [Description("Latest time task is allowed to run")]
    Property Get EndBoundary() As String
    [DispId(6)]
    [Description("Latest time task is allowed to run")]
    Property Let EndBoundary(ByVal pEnd As String)
    [DispId(7)]
    [Description("If true, task will run in response to this trigger")]
    Property Get Enabled() As Boolean
    [DispId(7)]
    [Description("If true, task will run in response to this trigger")]
    Property Let Enabled(ByVal pEnabled As Boolean)
End Interface

[InterfaceId("7FB9ACF1-26BE-400E-85B5-294B9C75DFD6")]
'[DualInterface, DispInterface ]
[Description("Specify how often a task is to repeat.")]
Interface IRepetitionPattern Extends IDispatch
    [DispId(1)]
    [Description("Amount of time between repetitions")]
    Property Get Interval() As String
    [DispId(1)]
    [Description("Amount of time between repetitions")]
    Property Let Interval(ByVal pInterval As String)
    [DispId(2)]
    [Description("Amount of time to continue repeating")]
    Property Get Duration() As String
    [DispId(2)]
    [Description("Amount of time to continue repeating")]
    Property Let Duration(ByVal pDuration As String)
    [DispId(3)]
    [Description("Cease execution when duration expires")]
    Property Get StopAtDurationEnd() As Boolean
    [DispId(3)]
    [Description("Cease execution when duration expires")]
    Property Let StopAtDurationEnd(ByVal pStop As Boolean)
End Interface

[InterfaceId("8FD4711D-2D02-4C8C-87E3-EFF699DE127E")]
'[DualInterface, DispInterface ]
[Description("Control execution of the task.")]
Interface ITaskSettings Extends IDispatch
    [DispId(3)]
    [Description("Control whether the task can be started manually.")]
    Property Get AllowDemandStart() As Boolean
    [DispId(3)]
    [Description("Control whether the task can be started manually.")]
    Property Let AllowDemandStart(ByVal pAllowDemandStart As Boolean)
    [DispId(4)]
    [Description("Amount of time to wait before restarting a failed task.")]
    Property Get RestartInterval() As String
    [DispId(4)]
    [Description("Amount of time to wait before restarting a failed task.")]
    Property Let RestartInterval(ByVal pRestartInterval As String)
    [DispId(5)]
    [Description("Number of times to attempt to run a failed task.")]
    Property Get RestartCount() As Long
    [DispId(5)]
    [Description("Number of times to attempt to run a failed task.")]
    Property Let RestartCount(ByVal pRestartCount As Long)
    [DispId(6)]
    [Description("Specify what to do if the task starts while another instance is still running.")]
    Property Get MultipleInstances() As TASK_INSTANCES_POLICY
    [DispId(6)]
    [Description("Specify what to do if the task starts while another instance is still running.")]
    Property Let MultipleInstances(ByVal pPolicy As TASK_INSTANCES_POLICY)
    [DispId(7)]
    [Description("Cease execution if machine switches to battery power")]
    Property Get StopIfGoingOnBatteries() As Boolean
    [DispId(7)]
    [Description("Cease execution if machine switches to battery power")]
    Property Let StopIfGoingOnBatteries(ByVal pStopIfOnBatteries As Boolean)
    [DispId(8)]
    [Description("Do not start if machine is running on battery power")]
    Property Get DisallowStartIfOnBatteries() As Boolean
    [DispId(8)]
    [Description("Do not start if machine is running on battery power")]
    Property Let DisallowStartIfOnBatteries(ByVal pDisallowStartIfOnBatteries As Boolean)
    [DispId(9)]
    [Description("Allow task to be stopped with TerminateProcess()")]
    Property Get AllowHardTerminate() As Boolean
    [DispId(9)]
    [Description("Allow task to be stopped with TerminateProcess()")]
    Property Let AllowHardTerminate(ByVal pAllowHardTerminate As Boolean)
    [DispId(10)]
    [Description("Start task when machine is running if it was off at scheduled time")]
    Property Get StartWhenAvailable() As Boolean
    [DispId(10)]
    [Description("Start task when machine is running if it was off at scheduled time")]
    Property Let StartWhenAvailable(ByVal pStartWhenAvailable As Boolean)
    [DispId(11)]
    [Description("Task settings in XML format.")]
    Property Get XmlText() As String
    [DispId(11)]
    [Description("Task settings in XML format.")]
    Property Let XmlText(ByVal pXmlText As String)
    [DispId(12)]
    [Description("Only start task if machine is connected to network")]
    Property Get RunOnlyIfNetworkAvailable() As Boolean
    [DispId(12)]
    [Description("Only start task if machine is connected to network")]
    Property Let RunOnlyIfNetworkAvailable(ByVal pRunOnlyIfNetworkAvailable As Boolean)
    [DispId(14)]
    [Description("Control whether task is allowed to run")]
    Property Get ExecutionTimeLimit() As String
    [DispId(14)]
    [Description("Control whether task is allowed to run")]
    Property Let ExecutionTimeLimit(ByVal pTimeLimit As String)
    [DispId(14)]
    [Description("Control whether task is allowed to run")]
    Property Get Enabled() As Boolean
    [DispId(14)]
    [Description("Control whether task is allowed to run")]
    Property Let Enabled(ByVal pEnabled As Boolean)
    [DispId(15)]
    [Description("Amount of time to wait before deleting task after it is no longer scheduled to run")]
    Property Get DeleteExpiredTaskAfter() As String
    [DispId(15)]
    [Description("Amount of time to wait before deleting task after it is no longer scheduled to run")]
    Property Let DeleteExpiredTaskAfter(ByVal pExpirationDelay As String)
    [DispId(16)]
    [Description("Controls amount of CPU time and execution order of tasks")]
    Property Get Priority() As Long
    [DispId(16)]
    [Description("Controls amount of CPU time and execution order of tasks")]
    Property Let Priority(ByVal pPriority As Long)
    [DispId(17)]
    [Description("Specify whether task is compatible with previous versions")]
    Property Get Compatibility() As TASK_COMPATIBILITY
    [DispId(17)]
    [Description("Specify whether task is compatible with previous versions")]
    Property Let Compatibility(ByVal pCompatLevel As TASK_COMPATIBILITY)
    [DispId(18)]
    [Description("Do not show task in UI")]
    Property Get Hidden() As Boolean
    [DispId(18)]
    [Description("Do not show task in UI")]
    Property Let Hidden(ByVal pHidden As Boolean)
    [DispId(19)]
    [Description("Controls how long machine must be idle before starting task")]
    Property Get IdleSettings() As IIdleSettings
    [DispId(19)]
    [Description("Controls how long machine must be idle before starting task")]
    Property Let IdleSettings(ByVal pIdleSettings As IIdleSettings)
    [DispId(20)]
    [Description("Only run task if machine is in idle state")]
    Property Get RunOnlyIfIdle() As Boolean
    [DispId(20)]
    [Description("Only run task if machine is in idle state")]
    Property Let RunOnlyIfIdle(ByVal pRunOnlyIfIdle As Boolean)
    [DispId(21)]
    [Description("Wake machine from suspended power state to run task")]
    Property Get WakeToRun() As Boolean
    [DispId(21)]
    [Description("Wake machine from suspended power state to run task")]
    Property Let WakeToRun(ByVal pWakeToRun As Boolean)
    [DispId(22)]
    [Description("Network required to run task")]
    Property Get NetworkSettings() As INetworkSettings
    [DispId(22)]
    [Description("Network required to run task")]
    Property Let NetworkSettings(ByVal pNetworkSettings As INetworkSettings)
End Interface
[InterfaceId("2C05C3F0-6EED-4C05-A15F-ED7D7A98A369")]
'[DualInterface, DispInterface ]
[Description("Extended control execution of the task.")]
Interface ITaskSettings2 Extends IDispatch
    [DispId(30)]
    [Description("Do not start if target session is a RemoteApp Session.")]
    Property Get DisallowStartOnRemoteAppSession() As Boolean
    [DispId(30)]
    [Description("Do not start if target session is a RemoteApp Session.")]
    Property Let DisallowStartOnRemoteAppSession(ByVal pDisallowStart As Boolean)
    [DispId(31)]
    [Description("Use the Unified Scheduling Engine to run this task.")]
    Property Get UseUnifiedSchedulingEngine() As Boolean
    [DispId(31)]
    [Description("Use the Unified Scheduling Engine to run this task.")]
    Property Let UseUnifiedSchedulingEngine(ByVal pUseUnifiedEngine As Boolean)
End Interface
[InterfaceId("0AD9D0D7-0C7F-4EBB-9A5F-D1C648DCA528")]
'[DualInterface, DispInterface ]
[Description("Maintenance related task properties.")]
Interface ITaskSettings3 Extends ITaskSettings
    [DispId(30)]
    [Description("Do not start if target session is a RemoteApp Session.")]
    Property Get DisallowStartOnRemoteAppSession() As Boolean
    [DispId(30)]
    [Description("Do not start if target session is a RemoteApp Session.")]
    Property Let DisallowStartOnRemoteAppSession(ByVal pDisallowStart As Boolean)
    [DispId(31)]
    [Description("Use the Unified Scheduling Engine to run this task.")]
    Property Get UseUnifiedSchedulingEngine() As Boolean
    [DispId(31)]
    [Description("Use the Unified Scheduling Engine to run this task.")]
    Property Let UseUnifiedSchedulingEngine(ByVal pUseUnifiedEngine As Boolean)
    [DispId(40)]
    [Description("Returns current maintenance settings of the task. If the task has no maintenance settings, returns NULL.")]
    Property Get MaintenanceSettings() As IMaintenanceSettings
    [DispId(40)]
    [Description("Returns current maintenance settings of the task. If the task has no maintenance settings, returns NULL.")]
    Property Let MaintenanceSettings(ByVal pMaintenanceSettings As IMaintenanceSettings)
    [DispId(41)]
    [Description("Create new maintenance settings for the task. Old values are dropped.")]
    Function CreateMaintenanceSettings() As IMaintenanceSettings
    [DispId(42)]
    [Description("This task will appear disabled after system reboot.")]
    Property Get Volatile() As Boolean
    [DispId(42)]
    [Description("This task will appear disabled after system reboot.")]
    Property Let Volatile(ByVal Volatile As Boolean)
End Interface


[InterfaceId("84594461-0053-4342-A8FD-088FABF11F32")]
'[DualInterface, DispInterface ]
[Description("Parameters which specify idle state required for task to run.")]
Interface IIdleSettings Extends IDispatch
    [DispId(1)]
    [Description("Amount of time machine has been idle")]
    Property Get IdleDuration() As String
    [DispId(1)]
    [Description("Amount of time machine has been idle")]
    Property Let IdleDuration(ByVal pDelay As String)
    [DispId(2)]
    [Description("Amount of time to wait for machine to be idle for IdleDuration")]
    Property Get WaitTimeout() As String
    [DispId(2)]
    [Description("Amount of time to wait for machine to be idle for IdleDuration")]
    Property Let WaitTimeout(ByVal pTimeout As String)
    [DispId(3)]
    [Description("Cease execution when machine is no longer idle")]
    Property Get StopOnIdleEnd() As Boolean
    [DispId(3)]
    [Description("Cease execution when machine is no longer idle")]
    Property Let StopOnIdleEnd(ByVal pStop As Boolean)
    [DispId(4)]
    [Description("Run task when machine is idle again")]
    Property Get RestartOnIdle() As Boolean
    [DispId(4)]
    [Description("Run task when machine is idle again")]
    Property Let RestartOnIdle(ByVal pRestart As Boolean)
End Interface

[InterfaceId("9F7DEA84-C30B-4245-80B6-00E9F646F1B4")]
'[DualInterface, DispInterface ]
[Description("Specify network settings required to run task.")]
Interface INetworkSettings Extends IDispatch
    [DispId(1)]
    [Description("Human readable identifier")]
    Property Get Name() As String
    [DispId(1)]
    [Description("Human readable identifier")]
    Property Let Name(ByVal pName As String)
    [DispId(2)]
    [Description("Unique GUID")]
    Property Get Id() As String
    [DispId(2)]
    [Description("Unique GUID")]
    Property Let Id(ByVal pId As String)
End Interface

[InterfaceId("D98D51E5-C9B4-496A-A9C1-18980261CF0F")]
'[ DualInterface, DispInterface ]
[Description("User associated with task")]
Interface IPrincipal Extends IDispatch
    [DispId(1)]
    [Description("Required, unique per task")]
    Property Get Id() As String
    [DispId(1)]
    [Description("Required, unique per task")]
    Property Let Id(ByVal pId As String)
    [DispId(2)]
    [Description("Human-readable name")]
    Property Get DisplayName() As String
    [DispId(2)]
    [Description("Human-readable name")]
    Property Let DisplayName(ByVal pName As String)
    [DispId(3)]
    [Description("User's login id")]
    Property Get UserId() As String
    [DispId(3)]
    [Description("User's login id")]
    Property Let UserId(ByVal pId As String)
    [DispId(4)]
    [Description("Kind of login to be performed, TASK_LOGON_TYPE")]
    Property Get LogonType() As TASK_LOGON_TYPE
    [DispId(4)]
    [Description("Kind of login to be performed, TASK_LOGON_TYPE")]
    Property Let LogonType(ByVal pLogon As TASK_LOGON_TYPE)
    [DispId(5)]
    [Description("Name of a security group")]
    Property Get GroupId() As String
    [DispId(5)]
    [Description("Name of a security group")]
    Property Let GroupId(ByVal pId As String)
    [DispId(6)]
    [Description("TASK_RUNLEVEL_TYPE")]
    Property Get RunLevel() As TASK_RUNLEVEL_TYPE
    [DispId(6)]
    [Description("TASK_RUNLEVEL_TYPE")]
    Property Let RunLevel(ByVal pRunLevel As TASK_RUNLEVEL_TYPE)
End Interface

[InterfaceId("02820E19-7B98-4ED2-B2E8-FDCCCEFF619B")]
'[DualInterface, DispInterface ]
[Description("Container of task actions.")]
Interface IActionCollection Extends IDispatch
    [DispId(1)]
    [Description("Number of elements")]
    Property Get Count() As Long
    [DispId(0)]
    [Description("Retrieve specific element")]
    Property Get Item(ByVal index As Variant) As IAction
    [DispId(-4)]
    [Description("Create new enumerator")]
    Property Get _NewEnum() As stdole.IUnknown
    [DispId(2)]
    Property Get XmlText() As String
    [DispId(2)]
    Property Let XmlText(ByVal pXmlText As String)
    [DispId(3)]
    [Description("Make new action")]
    Function Create(ByVal type As TASK_ACTION_TYPE) As IAction
    [DispId(4)]
    [Description("Erase specific action")]
    Sub Remove(ByVal index As Variant)
    [DispId(5)]
    [Description("Erase all actions")]
    Sub Clear()
    [DispId(6)]
    [Description("ID of principal to be used")]
    Property Get Context() As String
    [DispId(6)]
    [Description("ID of principal to be used")]
    Property Let Context(ByVal pContext As String)
End Interface
[InterfaceId("BAE54997-48B1-4CBE-9965-D6BE263EBEA4")]
'[DualInterface, DispInterface ]
[Description("A single operation to be performed.")]
Interface IAction Extends IDispatch
    [DispId(1)]
    [Description("A Unique name for this action")]
    Property Get Id() As String
    [DispId(1)]
    [Description("A Unique name for this action")]
    Property Let Id(ByVal pId As String)
    [DispId(2)]
    [Description("The specific kind of action to be performed")]
    Property Get Type() As TASK_ACTION_TYPE
End Interface

[InterfaceId("2FABA4C7-4DA9-4013-9697-20CC3FD40F85")]
'[ DualInterface, DispInterface ]
[Description("Communicate with the Task Scheduler service.")]
Interface ITaskService Extends IDispatch
    [DispId(1)]
    [Description("Retrieve named folder.")]
    Function GetFolder(ByVal path As String) As ITaskFolder
    [DispId(2)]
    [Description("Retrieve collection of tasks currently executing.")]
    Function GetRunningTasks(ByVal flags As TASK_ENUM_FLAGS) As IRunningTaskCollection
    [DispId(3)]
    [Description("Create a new Task Definition object.")]
    Function NewTask(ByVal flags As Long) As ITaskDefinition
    [DispId(4)]
    [Description("Initiate communication with Task Scheduler Service.")]
    Sub Connect(Optional ByVal serverName As Variant, Optional ByVal user As Variant, Optional ByVal domain As Variant, Optional ByVal password As Variant)
    [DispId(5)]
    [Description("Returns true if communication has been initiated.")]
    Property Get Connected() As Boolean
    [DispId(0)]
    [Description("Name of machine this interface is communicating with.")]
    Property Get TargetServer() As String
    [DispId(6)]
    [Description("User name associated with current session.")]
    Property Get ConnectedUser() As String
    [DispId(7)]
    [Description("Domain of user associated with current session.")]
    Property Get ConnectedDomain() As String
    [DispId(8)]
    [Description("Latest revision server supports.")]
    Property Get HighestVersion() As Long
End Interface

[InterfaceId("839D7762-5121-4009-9234-4F0D19394F04")]
[OleAutomation(False)]
[Description("The COM task handler action interface.")]
Interface ITaskHandler Extends stdole.IUnknown
    [Description("Begin execution (spawn thread & return quickly).")]
    Sub Start(ByVal pHandlerService As stdole.IUnknown, ByVal data As String)
    [Description("Cease execution.")]
    Sub Stop(pRetCode As Long)
    [Description("Suspend execution until Resume() is called.")]
    Sub Pause()
    [Description("Start execution where it was when Pause() was called.")]
    Sub Resume()
End Interface

[InterfaceId("EAEC7A8F-27A0-4DDC-8675-14726A01A38A")]
[OleAutomation(False)]
[Description("Allow task handler to send status information to Task Scheduler.")]
Interface ITaskHandlerStatus Extends stdole.IUnknown
    [Description("Give current action status to Task Scheduler.")]
    Sub UpdateStatus(ByVal percentComplete As Integer, ByVal statusMessage As String)
    [Description("Inform the service that the task instance has finished.")]
    Sub TaskCompleted(ByVal taskErrCode As Long)
End Interface

[InterfaceId("3E4C9351-D966-4B8B-BB87-CEBA68BB0107")]
[OleAutomation(False)]
[Description("Allows Task Scheduler to share information with the task instance.")]
Interface ITaskVariables Extends IUnknown
    [Description("Retrieve information from task engine.")]
    Function GetInput() As String
    [Description("Send information to task engine.")]
    Sub SetOutput(ByVal input As String)
    [Description("Retrieve all output from all actions.")]
    Function GetContext() As String
End Interface

[InterfaceId("39038068-2B46-4AFD-8662-7BB6F868D221")]
'[DualInterface, DispInterface ]
[Description("Container for named strings.")]
Interface ITaskNamedValuePair Extends IDispatch
    [DispId(0)]
    [Description("Unique identifier for this pair.")]
    Property Get Name() As String
    [DispId(0)]
    [Description("Unique identifier for this pair.")]
    Property Let Name(ByVal pName As String)
    [DispId(1)]
    [Description("String associated with the name.")]
    Property Get Value() As String
    [DispId(1)]
    [Description("String associated with the name.")]
    Property Let Value(ByVal pValue As String)
End Interface
[InterfaceId("B4EF826B-63C3-46E4-A504-EF69E4F7EA4D")]
'[DualInterface, DispInterface ]
[Description("Group of ITaskNamedValuePairs.")]
Interface ITaskNamedValueCollection Extends IDispatch
    [DispId(1)]
    [Description("Number of elements.")]
    Property Get Count() As Long
    [DispId(0)]
    [Description("Access one ITaskNamedValuePair by index.")]
    Property Get Item(ByVal index As Variant) As ITaskNamedValuePair
    [DispId(-4)]
    Property Get _NewEnum() As stdole.IUnknown
    [DispId(2)]
    [Description("Create new ITaskNamedValuePair.")]
    Function Create(ByVal type As TASK_TRIGGER_TYPE2) As ITaskNamedValuePair
    [DispId(4)]
    [Description("Delete specific ITaskNamedValuePair.")]
    Sub Remove(ByVal index As Variant)
    [DispId(5)]
    [Description("Delete all ITaskNamedValuePairs.")]
    Sub Clear()
End Interface

[InterfaceId("D537D2B0-9FB3-4D34-9739-1FF5CE7B1EF3")]
'[ DualInterface, DispInterface ]
[Description("Run task when machine becomes idle.")]
Interface IIdleTrigger Extends ITrigger
End Interface

[InterfaceId("72DADE38-FAE4-4B3E-BAF4-5D009AF02B1C")]
'[ DualInterface, DispInterface ]
[Description("Run task when user logs on.")]
Interface ILogonTrigger Extends ITrigger
    [DispId(20)]
    [Description("Amount of time to wait before starting task")]
    Property Get Delay() As String
    [DispId(20)]
    [Description("Amount of time to wait before starting task")]
    Property Let Delay(ByVal pDelay As String)
    [DispId(21)]
    [Description("Run task when specific user logs on")]
    Property Get UserId() As String
    [DispId(21)]
    [Description("Run task when specific user logs on")]
    Property Let UserId(ByVal pId As String)
End Interface

[InterfaceId("754DA71B-4385-4475-9DD9-598294FA3641")]
'[DualInterface, DispInterface ]
[Description("Run task when login session state changes.")]
Interface ISessionStateChangeTrigger Extends ITrigger
    [DispId(20)]
    [Description("Amount of time to wait before starting task")]
    Property Get Delay() As String
    [DispId(20)]
    [Description("Amount of time to wait before starting task")]
    Property Let Delay(ByVal pDelay As String)
    [DispId(21)]
    [Description("Run task when specific user logs on")]
    Property Get UserId() As String
    [DispId(21)]
    [Description("Run task when specific user logs on")]
    Property Let UserId(ByVal pId As String)
    [DispId(22)]
    [Description("Specific type of state change")]
    Property Get StateChange() As TASK_SESSION_STATE_CHANGE_TYPE
    [DispId(22)]
    [Description("Specific type of state change")]
    Property Let StateChange(ByVal pType As TASK_SESSION_STATE_CHANGE_TYPE)
End Interface

[InterfaceId("D45B0167-9653-4EEF-B94F-0732CA7AF251")]
'[ DualInterface, DispInterface ]
[Description("Start task in response to an event log event.")]
Interface IEventTrigger Extends ITrigger
    [DispId(20)]
    [Description("Event query to identify events which will start task")]
    Property Get Subscription() As String
    [DispId(20)]
    [Description("Event query to identify events which will start task")]
    Property Let Subscription(ByVal pQuery As String)
    [DispId(21)]
    [Description("Amount of time to wait after event before starting task")]
    Property Get Delay() As String
    [DispId(21)]
    [Description("Amount of time to wait after event before starting task")]
    Property Let Delay(ByVal pDelay As String)
    [DispId(22)]
    [Description("Identify event properties to used by task")]
    Property Get ValueQueries() As ITaskNamedValueCollection
    [DispId(22)]
    [Description("Identify event properties to used by task")]
    Property Let ValueQueries(ByVal ppNamedXPaths As ITaskNamedValueCollection)
End Interface

[InterfaceId("B45747E0-EBA7-4276-9F29-85C5BB300006")]
'[DualInterface, DispInterface ]
[Description("Start task at a specific time.")]
Interface ITimeTrigger Extends ITrigger
    [DispId(20)]
    [Description("Maximum amount of time to delay execution")]
    Property Get RandomDelay() As String
    [DispId(20)]
    [Description("Maximum amount of time to delay execution")]
    Property Let RandomDelay(ByVal pRandomDelay As String)
End Interface

[InterfaceId("126C5CD8-B288-41D5-8DBF-E491446ADC5C")]
'[DualInterface, DispInterface ]
[Description("Run task every day, or every N days.")]
Interface IDailyTrigger Extends ITrigger
    [DispId(25)]
    [Description("Number of days between executions")]
    Property Get DaysInterval() As Integer
    [DispId(25)]
    [Description("Number of days between executions")]
    Property Let DaysInterval(ByVal pDays As Integer)
    [DispId(20)]
    [Description("Maximum amount of time to delay execution")]
    Property Get RandomDelay() As String
    [DispId(20)]
    [Description("Maximum amount of time to delay execution")]
    Property Let RandomDelay(ByVal pRandomDelay As String)
End Interface

[InterfaceId("5038FC98-82FF-436D-8728-A512A57C9DC1")]
'[ DualInterface, DispInterface ]
[Description("Run task every week, or every N weeks.")]
Interface IWeeklyTrigger Extends ITrigger
    [DispId(25)]
    [Description("Bit mask specifying which days to run")]
    Property Get DaysOfWeek() As Integer
    [DispId(25)]
    [Description("Bit mask specifying which days to run")]
    Property Let DaysOfWeek(ByVal pDays As Integer)
    [DispId(26)]
    [Description("Number of weeks between runs")]
    Property Get WeeksInterval() As Integer
    [DispId(26)]
    [Description("Number of weeks between runs")]
    Property Let WeeksInterval(ByVal pDays As Integer)
    [DispId(20)]
    [Description("Maximum amount of time to delay execution")]
    Property Get RandomDelay() As String
    [DispId(20)]
    [Description("Maximum amount of time to delay execution")]
    Property Let RandomDelay(ByVal pRandomDelay As String)
End Interface

[InterfaceId("97C45EF1-6B02-4A1A-9C0E-1EBFBA1500AC")]
'[ DualInterface, DispInterface ]
[Description("Run task on specific days each month.")]
Interface IMonthlyTrigger Extends ITrigger
    [DispId(25)]
    [Description("Bit mask specifying which days to run")]
    Property Get DaysOfMonth() As Long
    [DispId(25)]
    [Description("Bit mask specifying which days to run")]
    Property Let DaysOfMonth(ByVal pDays As Long)
    [DispId(26)]
    [Description("Bit mask specifying which months to run")]
    Property Get MonthsOfYear() As Integer
    [DispId(26)]
    [Description("Bit mask specifying which months to run")]
    Property Let MonthsOfYear(ByVal pMonths As Integer)
    [DispId(27)]
    [Description("Run on last day of month, regardless of numeric date")]
    Property Get RunOnLastDayOfMonth() As Integer
    [DispId(27)]
    [Description("Run on last day of month, regardless of numeric date")]
    Property Let RunOnLastDayOfMonth(ByVal pLastDay As Integer)
    [DispId(20)]
    [Description("Maximum amount of time to delay execution")]
    Property Get RandomDelay() As String
    [DispId(20)]
    [Description("Maximum amount of time to delay execution")]
    Property Let RandomDelay(ByVal pRandomDelay As String)
End Interface

[InterfaceId("77D025A3-90FA-43AA-B52E-CDA5499B946A")]
'[DualInterface, DispInterface ]
[Description("Run task on specific day of week, e.g. 'Second Tuesday in March'.")]
Interface IMonthlyDOWTrigger Extends ITrigger
    [DispId(25)]
    [Description("Bit mask specifying which days to run")]
    Property Get DaysOfWeek() As Integer
    [DispId(25)]
    [Description("Bit mask specifying which days to run")]
    Property Let DaysOfWeek(ByVal pDays As Integer)
    [DispId(26)]
    [Description("Bit mask specifying which weeks to run")]
    Property Get WeeksOfMonth() As Integer
    [DispId(26)]
    [Description("Bit mask specifying which weeks to run")]
    Property Let WeeksOfMonth(ByVal pWeeks As Integer)
    [DispId(27)]
    [Description("Bit mask specifying which months to run")]
    Property Get MonthsOfYear() As Integer
    [DispId(27)]
    [Description("Bit mask specifying which months to run")]
    Property Let MonthsOfYear(ByVal pMonths As Integer)
    [DispId(28)]
    [Description("Run during last week - regardless of whether it's the fourth or fifth week")]
    Property Get RunOnLastWeekOfMonth() As Integer
    [DispId(28)]
    [Description("Run during last week - regardless of whether it's the fourth or fifth week")]
    Property Let RunOnLastWeekOfMonth(ByVal pLastWeek As Integer)
    [DispId(20)]
    [Description("Maximum amount of time to delay execution")]
    Property Get RandomDelay() As String
    [DispId(20)]
    [Description("Maximum amount of time to delay execution")]
    Property Let RandomDelay(ByVal pRandomDelay As String)
End Interface

[InterfaceId("2A9C35DA-D357-41F4-BBC1-207AC1B1F3CB")]
'[DualInterface, DispInterface ]
[Description("Run task when machine starts up.")]
Interface IBootTrigger Extends ITrigger
    [DispId(20)]
    [Description("Amount of time to wait before starting task")]
    Property Get Delay() As String
    [DispId(20)]
    [Description("Amount of time to wait before starting task")]
    Property Let Delay(ByVal pDelay As String)
End Interface

[InterfaceId("4C8FEC3A-C218-4E0C-B23D-629024DB91A2")]
'[DualInterface, DispInterface ]
[Description("Run task as soon as it is registered.")]
Interface IRegistrationTrigger Extends ITrigger
    [DispId(20)]
    [Description("Amount of time to wait before starting task")]
    Property Get Delay() As String
    [DispId(20)]
    [Description("Amount of time to wait before starting task")]
    Property Let Delay(ByVal pDelay As String)
End Interface

[InterfaceId("4C3D624D-FD6B-49A3-B9B7-09CB3CD3F047")]
'[DualInterface, DispInterface ]
[Description("Run a program.")]
Interface IExecAction Extends IAction
    [DispId(10)]
    [Description("Program name")]
    Property Get Path() As String
    [DispId(10)]
    [Description("Program name")]
    Property Let Path(ByVal pPath As String)
    [DispId(11)]
    [Description("Command line parameters for the program")]
    Property Get Arguments() As String
    [DispId(11)]
    [Description("Command line parameters for the program")]
    Property Let Arguments(ByVal pArguments As String)
    [DispId(12)]
    [Description("Default directory for the program")]
    Property Get WorkingDirectory() As String
    [DispId(12)]
    [Description("Default directory for the program")]
    Property Let WorkingDirectory(ByVal pWorkingDirectory As String)
End Interface
[InterfaceId("F2A82542-BDA5-4E6B-9143-E2BF4F8987B6")]
'[DualInterface, DispInterface ]
[Description("Run a program, optionally hiding the window.")]
Interface IExecAction2 Extends IExecAction
    [DispId(13)]
    [Description("Hide the executable window")]
    Property Get HideAppWindow() As Boolean
    [DispId(13)]
    [Description("Hide the executable window")]
    Property Let HideAppWindow(ByVal pHideAppWindow As Boolean)
End Interface

[InterfaceId("505E9E68-AF89-46B8-A30F-56162A83D537")]
'[DualInterface, DispInterface ]
[Description("Show a message to the user.")]
Interface IShowMessageAction Extends IAction
    [DispId(10)]
    [Description("Subject of message")]
    Property Get Title() As String
    [DispId(10)]
    [Description("Subject of message")]
    Property Let Title(ByVal pTitle As String)
    [DispId(11)]
    [Description("Text of message")]
    Property Get MessageBody() As String
    [DispId(11)]
    [Description("Text of message")]
    Property Let MessageBody(ByVal pMessageBody As String)
End Interface

[InterfaceId("6D2FD252-75C5-4F66-90BA-2A7D8CC3039F")]
'[DualInterface, DispInterface ]
[Description("Execute a COM Task Handler.")]
Interface IComHandlerAction Extends IAction
    [DispId(10)]
    [Description("CLSID for handler")]
    Property Get ClassId() As String
    [DispId(10)]
    [Description("CLSID for handler")]
    Property Let ClassId(ByVal pClassId As String)
    [DispId(11)]
    [Description("Information to be passed to handler at startup")]
    Property Get Data() As String
    [DispId(11)]
    [Description("Information to be passed to handler at startup")]
    Property Let Data(ByVal pData As String)
End Interface

[InterfaceId("10F62C64-7E16-4314-A0C2-0C3683F99D40")]
'[ DualInterface, DispInterface ]
[Description("Send an email")]
Interface IEmailAction Extends IAction
    [DispId(10)]
    [Description("SMTP Server (required)")]
    Property Get Server() As String
    [DispId(10)]
    [Description("SMTP Server (required)")]
    Property Let Server(ByVal pServer As String)
    [DispId(11)]
    [Description("Title of email")]
    Property Get Subject() As String
    [DispId(11)]
    [Description("Title of email")]
    Property Let Subject(ByVal pSubject As String)
    [DispId(12)]
    [Description("Addresses for primary recipients of email")]
    Property Get To() As String
    [DispId(12)]
    [Description("Addresses for primary recipients of email")]
    Property Let To(ByVal pTo As String)
    [DispId(13)]
    [Description("Addresses for secondary recipients of email")]
    Property Get Cc() As String
    [DispId(13)]
    [Description("Addresses for secondary recipients of email")]
    Property Let Cc(ByVal pCc As String)
    [DispId(14)]
    [Description("Addresses for recipients of 'blind copies' of email")]
    Property Get Bcc() As String
    [DispId(14)]
    [Description("Addresses for recipients of 'blind copies' of email")]
    Property Let Bcc(ByVal pBcc As String)
    [DispId(15)]
    [Description("Address recipient should send replies to")]
    Property Get ReplyTo() As String
    [DispId(15)]
    [Description("Address recipient should send replies to")]
    Property Let ReplyTo(ByVal pReplyTo As String)
    [DispId(16)]
    [Description("Address to be used as the sender of the email")]
    Property Get From() As String
    [DispId(16)]
    [Description("Address to be used as the sender of the email")]
    Property Let From(ByVal pFrom As String)
    [DispId(17)]
    [Description("Extra data to be included in email header")]
    Property Get HeaderFields() As ITaskNamedValueCollection
    [DispId(17)]
    [Description("Extra data to be included in email header")]
    Property Let HeaderFields(ByVal pFields As ITaskNamedValueCollection)
    [DispId(18)]
    [Description("Text of the email")]
    Property Get Body() As String
    [DispId(18)]
    [Description("Text of the email")]
    Property Let Body(ByVal pBody As String)
    [DispId(19)]
    [Description("Filenames of attachements to email")]
    Property Get Attachments() As Variant()
    [DispId(19)]
    [Description("Filenames of attachements to email")]
    Property Let Attachments(pAttachments() As Variant) '//SAFEARRAY(VARIANT)
End Interface

[InterfaceId("248919AE-E345-4A6D-8AEB-E0D3165C904E")]
'[DualInterface, DispInterface ]
[Description("Extra settings for the user account used to execute the task as.")]
Interface IPrincipal2 Extends IDispatch
    [DispId(10)]
    [Description("Type of process token SID, TASK_PROCESSTOKENSID_TYPE.")]
    Property Get ProcessTokenSidType() As TASK_PROCESSTOKENSID
    [DispId(10)]
    [Description("Type of process token SID, TASK_PROCESSTOKENSID_TYPE.")]
    Property Let ProcessTokenSidType(ByVal pProcessTokenSidType As TASK_PROCESSTOKENSID)
    [DispId(11)]
    [Description("Number of required privileges.")]
    Property Get RequiredPrivilegeCount() As Long
    [DispId(11)]
    [Description("Number of required privileges.")]
    Property Get RequiredPrivilege(ByVal index As Long) As String
    [DispId(13)]
    [Description("Add new required privilege.")]
    Sub AddRequiredPrivilege(ByVal privilege As String)
End Interface

[InterfaceId("A6024FA8-9652-4ADB-A6BF-5CFCD877A7BA")]
'[DualInterface, DispInterface ]
[Description("Control the extended maintenance execution settings of the task.")]
Interface IMaintenanceSettings Extends IDispatch
    [DispId(34)]
    [Description("Set task maintenance periodicity requirement.")]
    Property Let Period(ByVal pTarget As String)
    [DispId(34)]
    [Description("Set task maintenance periodicity requirement.")]
    Property Get Period() As String
    [DispId(35)]
    [Description("Set task maintenance deadline requirement.")]
    Property Let Deadline(ByVal pTarget As String)
    [DispId(35)]
    [Description("Set task maintenance deadline requirement.")]
    Property Get Deadline() As String
    [DispId(36)]
    [Description("Set task maintenance exclusivity.")]
    Property Let Exclusive(ByVal target As Boolean)
    [DispId(36)]
    [Description("Set task maintenance exclusivity.")]
    Property Get Exclusive() As Boolean
End Interface

[InterfaceId("85788d00-6807-11d0-b810-00c04fd706ec")]
[OleAutomation(False)]
Interface IRunnableTask Extends stdole.IUnknown
    Sub Run()
    Sub Kill(ByVal bWait As Long)
    Sub Suspend()
    Sub IsRunning()
End Interface

[InterfaceId("6CCB7BE0-6807-11d0-B810-00C04FD706EC")]
[OleAutomation(False)]
Interface IShellTaskScheduler Extends stdole.IUnknown
    [PreserveSig] Function AddTask(ByVal prt As IRunnableTask, rtoid As UUID, ByVal lParam As LongPtr, ByVal dwPriority As Long) As Long
    [PreserveSig] Function RemoveTasks(rtoid As UUID, ByVal lParam As LongPtr, ByVal bWaitIfRunning As Long) As Long
    [PreserveSig] Function CountTasks(rtoid As UUID) As Long
    [PreserveSig] Function Status(ByVal dwReleaseStatus As Long, ByVal dwThreadTimeout As Long) As Long
End Interface

'CLSID_Task 
[CoClassId("148BD520-A2AB-11CE-B11F-00AA00530503")]
CoClass Task
	 [Default] Interface ITask
End CoClass

'CLSID_SchedulingAgent , CLSID_CTaskScheduler
[CoClassId("148BD52A-A2AB-11CE-B11F-00AA00530503")]
CoClass SchedulingAgent
	 [Default] Interface ISchedulingAgent
End CoClass
[CoClassId("148BD52A-A2AB-11CE-B11F-00AA00530503")]
CoClass CTaskScheduler
     [Default] Interface ITaskScheduler
End CoClass

'CLSID_TaskScheduler 
[CoClassId("0F87369F-A4E5-4CFC-BD3E-73E6154572DD")]
CoClass TaskScheduler
	 [Default] Interface ITaskService
End CoClass

'CLSID_TaskHandlerPS 
[CoClassId("F2A69DB7-DA2C-4352-9066-86FEE6DACAC9")]
CoClass TaskHandlerPS
	 [Default] Interface ITaskHandler
End CoClass

'CLSID_TaskHandlerStatusPS 
[CoClassId("9F15266D-D7BA-48F0-93C1-E6895F6FE5AC")]
CoClass TaskHandlerStatusPS
	 [Default] Interface ITaskHandlerStatus
     Interface ITaskVariables
End CoClass

'CLSID_ShellTaskScheduler 
[CoClassId("603D3800-BD81-11D0-A3A5-00C04FD706EC")]
CoClass ShellTaskScheduler
	 [Default] Interface IShellTaskScheduler
End CoClass

Module wdTaskScheduler

Public Enum TASK_DAYS
	TASK_SUNDAY = &H1
	TASK_MONDAY = &H2
	TASK_TUESDAY = &H4
	TASK_WEDNESDAY = &H8
	TASK_THURSDAY = &H10
	TASK_FRIDAY = &H20
	TASK_SATURDAY = &H40
End Enum
Public Enum TASK_WEEKS
	TASK_FIRST_WEEK = 1
	TASK_SECOND_WEEK = 2
	TASK_THIRD_WEEK = 3
	TASK_FOURTH_WEEK = 4
	TASK_LAST_WEEK = 5
End Enum
Public Enum TASK_MONTHS
	TASK_JANUARY = &H1
	TASK_FEBRUARY = &H2
	TASK_MARCH = &H4
	TASK_APRIL = &H8
	TASK_MAY = &H10
	TASK_JUNE = &H20
	TASK_JULY = &H40
	TASK_AUGUST = &H80
	TASK_SEPTEMBER = &H100
	TASK_OCTOBER = &H200
	TASK_NOVEMBER = &H400
	TASK_DECEMBER = &H800
End Enum

Public Enum TASK_FLAGS
	TASK_FLAG_INTERACTIVE = (&H1)
	TASK_FLAG_DELETE_WHEN_DONE = (&H2)
	TASK_FLAG_DISABLED = (&H4)
	TASK_FLAG_START_ONLY_IF_IDLE = (&H10)
	TASK_FLAG_KILL_ON_IDLE_END = (&H20)
	TASK_FLAG_DONT_START_IF_ON_BATTERIES = (&H40)
	TASK_FLAG_KILL_IF_GOING_ON_BATTERIES = (&H80)
	TASK_FLAG_RUN_ONLY_IF_DOCKED = (&H100)
	TASK_FLAG_HIDDEN = (&H200)
	TASK_FLAG_RUN_IF_CONNECTED_TO_INTERNET = (&H400)
	TASK_FLAG_RESTART_ON_IDLE_RESUME = (&H800)
	TASK_FLAG_SYSTEM_REQUIRED = (&H1000)
	TASK_FLAG_RUN_ONLY_IF_LOGGED_ON = (&H2000)
End Enum

Public Enum TASK_TRIGGER_FLAGS
	TASK_TRIGGER_FLAG_HAS_END_DATE = (&H1)
	TASK_TRIGGER_FLAG_KILL_AT_DURATION_END = (&H2)
	TASK_TRIGGER_FLAG_DISABLED = (&H4)
End Enum

Public Enum TASK_MAXS
	TASK_MAX_RUN_TIMES = 1440
End Enum

Public Enum TASK_TRIGGER_TYPE
	TASK_TIME_TRIGGER_ONCE = 0
	TASK_TIME_TRIGGER_DAILY = 1
	TASK_TIME_TRIGGER_WEEKLY = 2
	TASK_TIME_TRIGGER_MONTHLYDATE = 3
	TASK_TIME_TRIGGER_MONTHLYDOW = 4
	TASK_EVENT_TRIGGER_ON_IDLE = 5
	TASK_EVENT_TRIGGER_AT_SYSTEMSTART = 6
	TASK_EVENT_TRIGGER_AT_LOGON = 7
End Enum

'===================
'TRIGGER_TYPE_UNION
Public Type DAILY
	DaysInterval As Integer
	Reserved As Long
End Type
Public Type WEEKLY
	WeeksInterval As Integer
    rgfDaysOfTheWeek As Integer
    Reserved As Integer
End Type
Public Type MONTHLYDATE
	rgfDays As Long
    rgfMonths As Integer
End Type
Public Type MONTHLYDOW
	wWhichWeek As Integer
    rgfDaysOfTheWeek As Integer
    rgfMonths As Integer
End Type
Public Type TRIGGER_TYPE_UNION
	TimeUnion(5) As Byte 'Copy one of the preceeding 4 structures into this
End Type
'===================

Public Type TASK_TRIGGER
	cbTriggerSize As Integer
	Reserved1 As Integer
	wBeginYear As Integer
	wBeginMonth As Integer
	wBeginDay As Integer
	wEndYear As Integer
	wEndMonth As Integer
	wEndDay As Integer
	wStartHour As Integer
	wStartMinute As Integer
	MinutesDuration As Long
	MinutesInterval As Long
	rgFlags As TASK_TRIGGER_FLAGS
	TriggerType As TASK_TRIGGER_TYPE
	Type As TRIGGER_TYPE_UNION
	Reserved2 As Integer
	wRandomMinutesInterval As Integer
End Type

Public Enum TASKPAGE
	TASKPAGE_TASK = 0
	TASKPAGE_SCHEDULE = 1
	TASKPAGE_SETTINGS = 2
End Enum

Public Enum SCHED_STATUS
	SCHED_S_TASK_READY = &H00041300
	SCHED_S_TASK_RUNNING = &H00041301
	SCHED_S_TASK_DISABLED = &H00041302
	SCHED_S_TASK_HAS_NOT_RUN = &H00041303
	SCHED_S_TASK_NO_MORE_RUNS = &H00041304
	SCHED_S_TASK_NOT_SCHEDULED = &H00041305
	SCHED_S_TASK_TERMINATED = &H00041306
	SCHED_S_TASK_NO_VALID_TRIGGERS = &H00041307
	SCHED_S_EVENT_TRIGGER = &H00041308
End Enum

Public Enum SCHED_ERRORS
	SCHED_E_TRIGGER_NOT_FOUND = &H80041309
	SCHED_E_TASK_NOT_READY = &H8004130a
	SCHED_E_TASK_NOT_RUNNING = &H8004130b
	SCHED_E_SERVICE_NOT_INSTALLED = &H8004130c
	SCHED_E_CANNOT_OPEN_TASK = &H8004130d
	SCHED_E_INVALID_TASK = &H8004130e
	SCHED_E_ACCOUNT_INFORMATION_NOT_SET = &H8004130f
	SCHED_E_ACCOUNT_NAME_NOT_FOUND = &H80041310
	SCHED_E_ACCOUNT_DBASE_CORRUPT = &H80041311
	SCHED_E_NO_SECURITY_SERVICES = &H80041312
	SCHED_E_UNKNOWN_OBJECT_VERSION = &H80041313
	SCHED_E_UNSUPPORTED_ACCOUNT_OPTION = &H80041314
	SCHED_E_SERVICE_NOT_RUNNING = &H80041315
End Enum

'2.0/3.0
Public Enum TASK_LOGON_TYPE
	TASK_LOGON_NONE = 0
	TASK_LOGON_PASSWORD = 1
	TASK_LOGON_S4U = 2
	TASK_LOGON_INTERACTIVE_TOKEN = 3
	TASK_LOGON_GROUP = 4
	TASK_LOGON_SERVICE_ACCOUNT = 5
	TASK_LOGON_INTERACTIVE_TOKEN_OR_PASSWORD = 6
End Enum

Public Enum TASK_RUNLEVEL_TYPE
	TASK_RUNLEVEL_LUA = 0
	TASK_RUNLEVEL_HIGHEST = 1
End Enum

Public Enum TASK_STATE
	TASK_STATE_UNKNOWN = 0
	TASK_STATE_DISABLED = 1
	TASK_STATE_QUEUED = 2
	TASK_STATE_READY = 3
	TASK_STATE_RUNNING = 4
End Enum

Public Enum TASK_TRIGGER_TYPE2
	TASK_TRIGGER_EVENT = 0
	TASK_TRIGGER_TIME = 1
	TASK_TRIGGER_DAILY = 2
	TASK_TRIGGER_WEEKLY = 3
	TASK_TRIGGER_MONTHLY = 4
	TASK_TRIGGER_MONTHLYDOW = 5
	TASK_TRIGGER_IDLE = 6
	TASK_TRIGGER_REGISTRATION = 7
	TASK_TRIGGER_BOOT = 8
	TASK_TRIGGER_LOGON = 9
	TASK_TRIGGER_SESSION_STATE_CHANGE = 11
	TASK_TRIGGER_CUSTOM_TRIGGER_01 = 12
End Enum

Public Enum TASK_INSTANCES_POLICY
	TASK_INSTANCES_PARALLEL = 0
	TASK_INSTANCES_QUEUE = 1
	TASK_INSTANCES_IGNORE_NEW = 2
	TASK_INSTANCES_STOP_EXISTING = 3
End Enum

Public Enum TASK_COMPATIBILITY
	TASK_COMPATIBILITY_AT = 0
	TASK_COMPATIBILITY_V1 = 1
	TASK_COMPATIBILITY_V2 = 2
	TASK_COMPATIBILITY_V2_1 = 3
	TASK_COMPATIBILITY_V2_2 = 4
	TASK_COMPATIBILITY_V2_3 = 5
	TASK_COMPATIBILITY_V2_4 = 6
End Enum

Public Enum TASK_ACTION_TYPE
	TASK_ACTION_EXEC = 0
	TASK_ACTION_COM_HANDLER = 5
	TASK_ACTION_SEND_EMAIL = 6
	TASK_ACTION_SHOW_MESSAGE = 7
End Enum

Public Enum TASK_SESSION_STATE_CHANGE_TYPE
	TASK_CONSOLE_CONNECT = 1
	TASK_CONSOLE_DISCONNECT = 2
	TASK_REMOTE_CONNECT = 3
	TASK_REMOTE_DISCONNECT = 4
	TASK_SESSION_LOCK = 7
	TASK_SESSION_UNLOCK = 8
End Enum

Public Enum TASK_RUN_FLAGS
	TASK_RUN_NO_FLAGS = 0
	TASK_RUN_AS_SELF = 1
	TASK_RUN_IGNORE_CONSTRAINTS = 2
	TASK_RUN_USE_SESSION_ID = 4
	TASK_RUN_USER_SID = 8
End Enum

Public Enum TASK_ENUM_FLAGS
	TASK_ENUM_HIDDEN = 1
End Enum

Public Enum TASK_CREATION
	TASK_VALIDATE_ONLY = 1
	TASK_CREATE = 2
	TASK_UPDATE = 4
	TASK_CREATE_OR_UPDATE = 6
	TASK_DISABLE = 8
	TASK_DONT_ADD_PRINCIPAL_ACE = 16
	TASK_IGNORE_REGISTRATION_TRIGGERS = 32
End Enum

Public Enum TASK_PROCESSTOKENSID
	TASK_PROCESSTOKENSID_NONE = 0
	TASK_PROCESSTOKENSID_UNRESTRICTED = 1
	TASK_PROCESSTOKENSID_DEFAULT = 2
End Enum

Public Enum IRTIR_Values
	IRTIR_TASK_NOT_RUNNING = 0
	IRTIR_TASK_RUNNING = 1
	IRTIR_TASK_SUSPENDED = 2
	IRTIR_TASK_PENDING = 3
	IRTIR_TASK_FINISHED = 4
End Enum

Public Const sCLSID_Task = "new: {148BD520-A2AB-11CE-B11F-00AA00530503}"
Public Const sCLSID_SchedulingAgent = "new: {148BD52A-A2AB-11CE-B11F-00AA00530503}"

Public Const sCLSID_TaskScheduler = "new: {0F87369F-A4E5-4CFC-BD3E-73E6154572DD}"
Public Const sCLSID_TaskHandlerPS = "new: {F2A69DB7-DA2C-4352-9066-86FEE6DACAC9}"
Public Const sCLSID_TaskHandlerStatusPS = "new: {9F15266D-D7BA-48F0-93C1-E6895F6FE5AC}"
Public Const sCLSID_ShellTaskScheduler = "new: {603D3800-BD81-11D0-A3A5-00C04FD706EC}"


End Module