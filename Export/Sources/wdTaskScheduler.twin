
'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

'WinDevLib - wdTaskScheduler :: Task Scheduler Interfaces (1.0 - 4.0)
'COMPLETE (tasksch.odl)

'-----------------------------------------
'1.0
[ InterfaceId ("148BD52B-A2AB-11CE-B11F-00AA00530503") ]
[ OleAutomation (False) ]
Interface ITaskTrigger Extends stdole.IUnknown
    Sub SetTrigger(pTrigger As TASK_TRIGGER)
    Sub GetTrigger(pTrigger As TASK_TRIGGER)
    Function GetTriggerString() As LongPtr
End Interface

[ InterfaceId ("a6b952f0-a4b1-11d0-997d-00aa006887ec") ]
[ OleAutomation (False) ]
Interface IScheduledWorkItem Extends stdole.IUnknown
    Function CreateTrigger(piNewTrigger As Integer) As ITaskTrigger
    Sub DeleteTrigger(ByVal iTrigger As Integer)
    Function GetTriggerCount() As Integer
    Function GetTriggerString(ByVal iTrigger As Integer) As LongPtr
    Sub GetRunTimes(pstBegin As SYSTEMTIME, pstEnd As SYSTEMTIME, pCount As Integer, rgstTaskTimes As SYSTEMTIME)
    Sub GetNextRunTime(pstNextRun As SYSTEMTIME)
    Sub SetIdleWait(ByVal wMinutes As Integer, ByVal wDeadlineMinutes As Integer)
    Sub GetIdleWait(pwMinutes As Integer, pwDeadlineMinutes As Integer)
    Sub Run()
    Sub Terminate()
    Sub EditWorkItem(ByVal hParent As LongPtr, ByVal dwReserved As Long)
    Sub GetMostRecentRunTime(pstLastRun As SYSTEMTIME)
    Function GetStatus() As Long
    Function GetExitCode() As Long
    Sub SetComment(ByVal pwszComment As String)
    Function GetComment() As LongPtr
    Sub SetCreator(pwszCreator As String)
    Function GetCreator() As LongPtr
    Sub SetWorkItemData(ByVal cbData As Integer, rgbData As Byte)
    Sub GetWorkItemData(pcbData As Integer, prgbData As Byte)
    Sub SetErrorRetryCount(ByVal wRetryCount As Integer)
    Function GetErrorRetryCount() As Integer
    Sub SetFlags(ByVal dwFlags As Long)
    Function GetFlags() As Long
    Sub SetAccountInformation(ByVal pwszAccountName As String, ByVal pwszPassword As String)
    Function GetAccountInformation() As LongPtr
End Interface
[ InterfaceId ("148BD524-A2AB-11CE-B11F-00AA00530503") ]
[ OleAutomation (False) ]
Interface ITask Extends IScheduledWorkItem
    Sub SetApplicationName(ByVal pwszApplicationName As String)
    Function GetApplicationName() As LongPtr
    Sub SetParameters(ByVal pwszParameters As String)
    Function GetParameters() As LongPtr
    Sub SetWorkingDirectory(ByVal pwszWorkingDirectory As String)
    Function GetWorkingDirectory() As LongPtr
    Sub SetPriority(ByVal dwPriority As Long)
    Function GetPriority() As Long
    Sub SetTaskFlags(ByVal dwFlags As Long)
    Function GetTaskFlags() As Long
    Sub SetMaxRunTime(ByVal dwMaxRunTimeMS As Long)
    Function GetMaxRunTime() As Long
End Interface

[ InterfaceId ("148BD528-A2AB-11CE-B11F-00AA00530503") ]
[ OleAutomation (False) ]
Interface IEnumWorkItems Extends stdole.IUnknown
    [ PreserveSig ] Function Next(ByVal celt As Long, rgpwszNames As LongPtr, pceltFetched As Long) As Long
    [ PreserveSig ] Function Skip(ByVal celt As Long) As Long
    Sub Reset()
    Function Clone() As IEnumWorkItems
End Interface

[ InterfaceId ("148BD527-A2AB-11CE-B11F-00AA00530503") ]
[ OleAutomation (False) ]
Interface ISchedulingAgent Extends stdole.IUnknown
    Sub SetTargetComputer(ByVal pwszComputer As String)
    Function GetTargetComputer() As LongPtr
    Function Enum() As IEnumWorkItems
    Function Activate(ByVal pwszName As String, riid As UUID) As ITask
    Sub Delete(ByVal pwszName As String)
    Function NewWorkItem(ByVal pszTaskName As String, rclsid As UUID, riid As UUID) As ITask
    Sub AddWorkItem(ByVal pszTaskName As String, ByVal pWorkItem As IScheduledWorkItem)
    Sub IsOfType(ByVal pszName As String, riid As UUID)
End Interface

[ InterfaceId ("4086658a-cbbb-11cf-b604-00c04fd8d565") ]
[ OleAutomation (False) ]
Interface IProvideTaskPage Extends stdole.IUnknown
    Function GetPage(ByVal tpType As TASKPAGE, ByVal fPersistChanges As Long) As LongPtr
End Interface

'---------------------------------------------
'2.0/3.0
[ InterfaceId ("79184A66-8664-423F-97F1-637356A5D812") ]
[ OleAutomation (False) ]
Interface ITaskFolderCollection Extends IDispatch
    Property Get Count() As Long
    Property Get Item(ByVal index As Variant) As ITaskFolder
    Property Get _NewEnum() As stdole.IUnknown
End Interface
[ InterfaceId ("8CFAC062-A080-4C15-9A88-AA7C2AF80DFC") ]
[ OleAutomation (False) ]
Interface ITaskFolder Extends IDispatch
    Property Get Name() As String
    Property Get Path() As String
    Function GetFolder(ByVal Path As String) As ITaskFolder
    Function GetFolders(ByVal flags As Long) As ITaskFolderCollection
    Function CreateFolder(ByVal subFolderName As String, Optional ByVal sddl As Variant) As ITaskFolder
    Sub DeleteFolder(ByVal subFolderName As String, ByVal flags As Long)
    Function GetTask(ByVal Path As String) As IRegisteredTask
    Function GetTasks(ByVal flags As Long) As IRegisteredTaskCollection
    Sub DeleteTask(ByVal Name As String, ByVal flags As Long)
    Function RegisterTask(ByVal path As String, ByVal XmlText As String, ByVal flags As Long, ByVal UserId As Variant, ByVal password As Variant, ByVal LogonType As TASK_LOGON_TYPE, Optional ByVal sddl As Variant) As IRegisteredTask
    Function RegisterTaskDefinition(ByVal path As String, ByVal pDefinition As ITaskDefinition, ByVal flags As Long, ByVal UserId As Variant, ByVal password As Variant, ByVal LogonType As TASK_LOGON_TYPE, Optional ByVal sddl As Variant) As IRegisteredTask
    Function GetSecurityDescriptor(ByVal securityInformation As Long) As String
    Sub SetSecurityDescriptor(ByVal sddl As String, ByVal flags As Long)
End Interface

[ InterfaceId ("9C86F320-DEE3-4DD1-B972-A303F26B061E") ]
[ OleAutomation (False) ]
Interface IRegisteredTask Extends IDispatch
    Property Get Name() As String
    Property Get Path() As String
    Property Get State() As TASK_STATE
    Property Get Enabled() As Integer
    Property Let Enabled(ByVal pEnabled As Integer)
    Function Run(ByVal params As Variant) As IRunningTask
    Function RunEx(ByVal params As Variant, ByVal flags As Long, ByVal sessionId As Long, ByVal user As String) As IRunningTask
    Function GetInstances(ByVal flags As Long) As IRunningTaskCollection
    Property Get LastRunTime() As Date
    Property Get LastTaskResult() As Long
    Property Get NumberOfMissedRuns() As Long
    Property Get NextRunTime() As Date
    Property Get Definition() As ITaskDefinition
    Property Get Xml() As String
    Function GetSecurityDescriptor(ByVal securityInformation As Long) As String
    Sub SetSecurityDescriptor(ByVal sddl As String, ByVal flags As Long)
    Sub Stop(ByVal flags As Long)
    Sub GetRunTimes(pstStart As SYSTEMTIME, pstEnd As SYSTEMTIME, pCount As Long, pRunTimes As LongPtr)
End Interface
[ InterfaceId ("86627EB4-42A7-41E4-A4D9-AC33A72F2D52") ]
[ OleAutomation (False) ]
Interface IRegisteredTaskCollection Extends IDispatch
    Property Get Count() As Long
    Property Get Item(ByVal index As Variant) As IRegisteredTask
    Property Get _NewEnum() As stdole.IUnknown
End Interface

[ InterfaceId ("F5BC8FC5-536D-4F77-B852-FBC1356FDEB6") ]
[ OleAutomation (False) ]
Interface ITaskDefinition Extends IDispatch
    Property Get RegistrationInfo() As IRegistrationInfo
    Property Let RegistrationInfo(ByVal pRegistrationInfo As IRegistrationInfo)
    Property Get Triggers() As ITriggerCollection
    Property Let Triggers(ByVal pTriggers As ITriggerCollection)
    Property Get Settings() As ITaskSettings
    Property Let Settings(ByVal pSettings As ITaskSettings)
    Property Get Data() As String
    Property Let Data(ByVal pData As String)
    Property Get Principal() As IPrincipal
    Property Let Principal(ByVal pPrincipal As IPrincipal)
    Property Get Actions() As IActionCollection
    Property Let Actions(ByVal pActions As IActionCollection)
    Property Get XmlText() As String
    Property Let XmlText(ByVal pXmlText As String)
End Interface

[ InterfaceId ("653758FB-7B9A-4F1E-A471-BEEB8E9B834E") ]
[ OleAutomation (False) ]
Interface IRunningTask Extends IDispatch
    Property Get Name() As String
    Property Get InstanceGuid() As String
    Property Get Path() As String
    Property Get State() As TASK_STATE
    Property Get CurrentAction() As String
    Sub Stop()
    Sub Refresh()
    Property Get EnginePID() As Long
End Interface
[ InterfaceId ("6A67614B-6828-4FEC-AA54-6D52E8F1F2DB") ]
[ OleAutomation (False) ]
Interface IRunningTaskCollection Extends IDispatch
    Property Get Count() As Long
    Property Get Item(ByVal index As Variant) As IRunningTask
    Property Get _NewEnum() As stdole.IUnknown
End Interface

[ InterfaceId ("416D8B73-CB41-4EA1-805C-9BE9A5AC4A74") ]
[ OleAutomation (False) ]
Interface IRegistrationInfo Extends IDispatch
    Property Get Description() As String
    Property Let Description(ByVal pDescription As String)
    Property Get Author() As String
    Property Let Author(ByVal pAuthor As String)
    Property Get Version() As String
    Property Let Version(ByVal pVersion As String)
    Property Get Date() As String
    Property Let Date(ByVal pDate As String)
    Property Get Documentation() As String
    Property Let Documentation(ByVal pDocumentation As String)
    Property Get XmlText() As String
    Property Let XmlText(ByVal pXmlText As String)
    Property Get URI() As String
    Property Let URI(ByVal pUri As String)
    Property Get SecurityDescriptor() As Variant
    Property Let SecurityDescriptor(ByVal pSddl As Variant)
    Property Get Source() As String
    Property Let Source(ByVal pSource As String)
End Interface

[ InterfaceId ("85DF5081-1B24-4F32-878A-D9D14DF4CB77") ]
[ OleAutomation (False) ]
Interface ITriggerCollection Extends IDispatch
    Property Get Count() As Long
    Property Get Item(ByVal index As Variant) As ITrigger
    Property Get _NewEnum() As stdole.IUnknown
    Function Create(ByVal type As TASK_TRIGGER_TYPE2) As ITrigger
    Sub Remove(ByVal index As Variant)
    Sub Clear()
End Interface
[ InterfaceId ("09941815-EA89-4B5B-89E0-2A773801FAC3") ]
[ OleAutomation (False) ]
Interface ITrigger Extends IDispatch
    Property Get Type() As TASK_TRIGGER_TYPE2
    Property Get Id() As String
    Property Let Id(ByVal pId As String)
    Property Get Repetition() As IRepetitionPattern
    Property Let Repetition(ByVal pRepeat As IRepetitionPattern)
    Property Get ExecutionTimeLimit() As String
    Property Let ExecutionTimeLimit(ByVal pTimeLimit As String)
    Property Get StartBoundary() As String
    Property Let StartBoundary(ByVal pStart As String)
    Property Get EndBoundary() As String
    Property Let EndBoundary(ByVal pEnd As String)
    Property Get Enabled() As Integer
    Property Let Enabled(ByVal pEnabled As Integer)
End Interface

[ InterfaceId ("7FB9ACF1-26BE-400E-85B5-294B9C75DFD6") ]
[ OleAutomation (False) ]
Interface IRepetitionPattern Extends IDispatch
    Property Get Interval() As String
    Property Let Interval(ByVal pInterval As String)
    Property Get Duration() As String
    Property Let Duration(ByVal pDuration As String)
    Property Get StopAtDurationEnd() As Integer
    Property Let StopAtDurationEnd(ByVal pStop As Integer)
End Interface

[ InterfaceId ("8FD4711D-2D02-4C8C-87E3-EFF699DE127E") ]
[ OleAutomation (False) ]
Interface ITaskSettings Extends IDispatch
    Property Get AllowDemandStart() As Integer
    Property Let AllowDemandStart(ByVal pAllowDemandStart As Integer)
    Property Get RestartInterval() As String
    Property Let RestartInterval(ByVal pRestartInterval As String)
    Property Get RestartCount() As Long
    Property Let RestartCount(ByVal pRestartCount As Long)
    Property Get MultipleInstances() As TASK_INSTANCES_POLICY
    Property Let MultipleInstances(ByVal pPolicy As TASK_INSTANCES_POLICY)
    Property Get StopIfGoingOnBatteries() As Integer
    Property Let StopIfGoingOnBatteries(ByVal pStopIfOnBatteries As Integer)
    Property Get DisallowStartIfOnBatteries() As Integer
    Property Let DisallowStartIfOnBatteries(ByVal pDisallowStartIfOnBatteries As Integer)
    Property Get AllowHardTerminate() As Integer
    Property Let AllowHardTerminate(ByVal pAllowHardTerminate As Integer)
    Property Get StartWhenAvailable() As Integer
    Property Let StartWhenAvailable(ByVal pStartWhenAvailable As Integer)
    Property Get XmlText() As String
    Property Let XmlText(ByVal pXmlText As String)
    Property Get RunOnlyIfNetworkAvailable() As Integer
    Property Let RunOnlyIfNetworkAvailable(ByVal pRunOnlyIfNetworkAvailable As Integer)
    Property Get ExecutionTimeLimit() As String
    Property Let ExecutionTimeLimit(ByVal pTimeLimit As String)
    Property Get Enabled() As Integer
    Property Let Enabled(ByVal pEnabled As Integer)
    Property Get DeleteExpiredTaskAfter() As String
    Property Let DeleteExpiredTaskAfter(ByVal pExpirationDelay As String)
    Property Get Priority() As Long
    Property Let Priority(ByVal pPriority As Long)
    Property Get Hidden() As Integer
    Property Let Hidden(ByVal pHidden As Integer)
    Property Get IdleSettings() As IIdleSettings
    Property Let IdleSettings(ByVal pIdleSettings As IIdleSettings)
    Property Get RunOnlyIfIdle() As Integer
    Property Let RunOnlyIfIdle(ByVal pRunOnlyIfIdle As Integer)
    Property Get WakeToRun() As Integer
    Property Let WakeToRun(ByVal pWakeToRun As Integer)
    Property Get NetworkSettings() As INetworkSettings
    Property Let NetworkSettings(ByVal pNetworkSettings As INetworkSettings)
End Interface
[ InterfaceId ("2C05C3F0-6EED-4C05-A15F-ED7D7A98A369") ]
[ OleAutomation (False) ]
Interface ITaskSettings2 Extends IDispatch
    Property Get DisallowStartOnRemoteAppSession() As Integer
    Property Let DisallowStartOnRemoteAppSession(ByVal pDisallowStart As Integer)
    Property Get UseUnifiedSchedulingEngine() As Integer
    Property Let UseUnifiedSchedulingEngine(ByVal pUseUnifiedEngine As Integer)
End Interface
[ InterfaceId ("0AD9D0D7-0C7F-4EBB-9A5F-D1C648DCA528") ]
[ OleAutomation (False) ]
Interface ITaskSettings3 Extends ITaskSettings
    Property Get DisallowStartOnRemoteAppSession() As Integer
    Property Let DisallowStartOnRemoteAppSession(ByVal pDisallowStart As Integer)
    Property Get UseUnifiedSchedulingEngine() As Integer
    Property Let UseUnifiedSchedulingEngine(ByVal pUseUnifiedEngine As Integer)
    Property Get MaintenanceSettings() As IMaintenanceSettings
    Property Let MaintenanceSettings(ByVal pMaintenanceSettings As IMaintenanceSettings)
    Property Get Volatile() As Integer
    Property Let Volatile(ByVal pVolatile As Integer)
End Interface


[ InterfaceId ("84594461-0053-4342-A8FD-088FABF11F32") ]
[ OleAutomation (False) ]
Interface IIdleSettings Extends IDispatch
    Property Get IdleDuration() As String
    Property Let IdleDuration(ByVal pDelay As String)
    Property Get WaitTimeout() As String
    Property Let WaitTimeout(ByVal pTimeout As String)
    Property Get StopOnIdleEnd() As Integer
    Property Let StopOnIdleEnd(ByVal pStop As Integer)
    Property Get RestartOnIdle() As Integer
    Property Let RestartOnIdle(ByVal pRestart As Integer)
End Interface

[ InterfaceId ("9F7DEA84-C30B-4245-80B6-00E9F646F1B4") ]
[ OleAutomation (False) ]
Interface INetworkSettings Extends IDispatch
    Property Get Name() As String
    Property Let Name(ByVal pName As String)
    Property Get Id() As String
    Property Let Id(ByVal pId As String)
End Interface

[ InterfaceId ("D98D51E5-C9B4-496A-A9C1-18980261CF0F") ]
[ OleAutomation (False) ]
Interface IPrincipal Extends IDispatch
    Property Get Id() As String
    Property Let Id(ByVal pId As String)
    Property Get DisplayName() As String
    Property Let DisplayName(ByVal pName As String)
    Property Get UserId() As String
    Property Let UserId(ByVal pId As String)
    Property Get LogonType() As TASK_LOGON_TYPE
    Property Let LogonType(ByVal pLogon As TASK_LOGON_TYPE)
    Property Get GroupId() As String
    Property Let GroupId(ByVal pId As String)
    Property Get RunLevel() As TASK_RUNLEVEL
    Property Let RunLevel(ByVal pRunLevel As TASK_RUNLEVEL)
End Interface

[ InterfaceId ("02820E19-7B98-4ED2-B2E8-FDCCCEFF619B") ]
[ OleAutomation (False) ]
Interface IActionCollection Extends IDispatch
    Property Get Count() As Long
    Property Get Item(ByVal index As Variant) As IAction
    Property Get _NewEnum() As stdole.IUnknown
    Property Get XmlText() As String
    Property Let XmlText(ByVal pXmlText As String)
    Function Create(ByVal type As TASK_ACTION_TYPE) As IAction
    Sub Remove(ByVal index As Variant)
    Sub Clear()
    Property Get Context() As String
    Property Let Context(ByVal pContext As String)
End Interface
[ InterfaceId ("BAE54997-48B1-4CBE-9965-D6BE263EBEA4") ]
[ OleAutomation (False) ]
Interface IAction Extends IDispatch
    Property Get Id() As String
    Property Let Id(ByVal pId As String)
    Property Get Type() As TASK_ACTION_TYPE
End Interface

[ InterfaceId ("2FABA4C7-4DA9-4013-9697-20CC3FD40F85") ]
[ OleAutomation (False) ]
Interface ITaskService Extends IDispatch
    Function GetFolder(ByVal path As String) As ITaskFolder
    Function GetRunningTasks(ByVal flags As Long) As IRunningTaskCollection
    Function NewTask(ByVal flags As Long) As ITaskDefinition
    Sub Connect(Optional ByVal serverName As Variant, Optional ByVal user As Variant, Optional ByVal domain As Variant, Optional ByVal password As Variant)
    Property Get Connected() As Integer
    Property Get TargetServer() As String
    Property Get ConnectedUser() As String
    Property Get ConnectedDomain() As String
    Property Get HighestVersion() As Long
End Interface

[ InterfaceId ("839D7762-5121-4009-9234-4F0D19394F04") ]
[ OleAutomation (False) ]
Interface ITaskHandler Extends stdole.IUnknown
    Sub Start(ByVal pHandlerService As stdole.IUnknown, ByVal data As String)
    Sub Stop(pRetCode As Long)
    Sub Pause()
    Sub Resume()
End Interface

[ InterfaceId ("EAEC7A8F-27A0-4DDC-8675-14726A01A38A") ]
[ OleAutomation (False) ]
Interface ITaskHandlerStatus Extends stdole.IUnknown
    Sub UpdateStatus(ByVal percentComplete As Integer, ByVal statusMessage As String)
    Sub TaskCompleted(ByVal taskErrCode As Long)
End Interface

[ InterfaceId ("3E4C9351-D966-4B8B-BB87-CEBA68BB0107") ]
[ OleAutomation (False) ]
Interface ITaskVariables Extends IUnknown
    Function GetInput() As String
    Sub SetOutput(ByVal input As String)
    Function GetContext() As String
End Interface

[ InterfaceId ("39038068-2B46-4AFD-8662-7BB6F868D221") ]
[ OleAutomation (False) ]
Interface ITaskNamedValuePair Extends IDispatch
    Property Get Name() As String
    Property Let Name(ByVal pName As String)
    Property Get Value() As String
    Property Let Value(ByVal pValue As String)
End Interface
[ InterfaceId ("B4EF826B-63C3-46E4-A504-EF69E4F7EA4D") ]
[ OleAutomation (False) ]
Interface ITaskNamedValueCollection Extends IDispatch
    Property Get Count() As Long
    Property Get Item(ByVal index As Variant) As ITaskNamedValuePair
    Property Get _NewEnum() As stdole.IUnknown
    Function Create(ByVal type As TASK_TRIGGER_TYPE2) As ITaskNamedValuePair
    Sub Remove(ByVal index As Variant)
    Sub Clear()
End Interface

[ InterfaceId ("D537D2B0-9FB3-4D34-9739-1FF5CE7B1EF3") ]
[ OleAutomation (False) ]
Interface IIdleTrigger Extends ITrigger
End Interface

[ InterfaceId ("72DADE38-FAE4-4B3E-BAF4-5D009AF02B1C") ]
[ OleAutomation (False) ]
Interface ILogonTrigger Extends ITrigger
    Property Get Delay() As String
    Property Let Delay(ByVal pDelay As String)
    Property Get UserId() As String
    Property Let UserId(ByVal pId As String)
End Interface

[ InterfaceId ("754DA71B-4385-4475-9DD9-598294FA3641") ]
[ OleAutomation (False) ]
Interface ISessionStateChangeTrigger Extends ITrigger
    Property Get Delay() As String
    Property Let Delay(ByVal pDelay As String)
    Property Get UserId() As String
    Property Let UserId(ByVal pId As String)
    Property Get StateChange() As TASK_SESSION_STATE_CHANGE_TYPE
    Property Let StateChange(ByVal pType As TASK_SESSION_STATE_CHANGE_TYPE)
End Interface

[ InterfaceId ("D45B0167-9653-4EEF-B94F-0732CA7AF251") ]
[ OleAutomation (False) ]
Interface IEventTrigger Extends ITrigger
    Property Get Subscription() As String
    Property Let Subscription(ByVal pQuery As String)
    Property Get Delay() As String
    Property Let Delay(ByVal pDelay As String)
    Property Get ValueQueries() As ITaskNamedValueCollection
    Property Let ValueQueries(ByVal ppNamedXPaths As ITaskNamedValueCollection)
End Interface

[ InterfaceId ("B45747E0-EBA7-4276-9F29-85C5BB300006") ]
[ OleAutomation (False) ]
Interface ITimeTrigger Extends ITrigger
    Property Get RandomDelay() As String
    Property Let RandomDelay(ByVal pRandomDelay As String)
End Interface

[ InterfaceId ("126C5CD8-B288-41D5-8DBF-E491446ADC5C") ]
[ OleAutomation (False) ]
Interface IDailyTrigger Extends ITrigger
    Property Get DaysInterval() As Integer
    Property Let DaysInterval(ByVal pDays As Integer)
    Property Get RandomDelay() As String
    Property Let RandomDelay(ByVal pRandomDelay As String)
End Interface

[ InterfaceId ("5038FC98-82FF-436D-8728-A512A57C9DC1") ]
[ OleAutomation (False) ]
Interface IWeeklyTrigger Extends ITrigger
    Property Get DaysOfWeek() As Integer
    Property Let DaysOfWeek(ByVal pDays As Integer)
    Property Get WeeksInterval() As Integer
    Property Let WeeksInterval(ByVal pDays As Integer)
    Property Get RandomDelay() As String
    Property Let RandomDelay(ByVal pRandomDelay As String)
End Interface

[ InterfaceId ("97C45EF1-6B02-4A1A-9C0E-1EBFBA1500AC") ]
[ OleAutomation (False) ]
Interface IMonthlyTrigger Extends ITrigger
    Property Get DaysOfMonth() As Long
    Property Let DaysOfMonth(ByVal pDays As Long)
    Property Get MonthsOfYear() As Integer
    Property Let MonthsOfYear(ByVal pMonths As Integer)
    Property Get RunOnLastDayOfMonth() As Integer
    Property Let RunOnLastDayOfMonth(ByVal pLastDay As Integer)
    Property Get RandomDelay() As String
    Property Let RandomDelay(ByVal pRandomDelay As String)
End Interface

[ InterfaceId ("77D025A3-90FA-43AA-B52E-CDA5499B946A") ]
[ OleAutomation (False) ]
Interface IMonthlyDOWTrigger Extends ITrigger
    Property Get DaysOfWeek() As Integer
    Property Let DaysOfWeek(ByVal pDays As Integer)
    Property Get WeeksOfMonth() As Integer
    Property Let WeeksOfMonth(ByVal pWeeks As Integer)
    Property Get MonthsOfYear() As Integer
    Property Let MonthsOfYear(ByVal pMonths As Integer)
    Property Get RunOnLastWeekOfMonth() As Integer
    Property Let RunOnLastWeekOfMonth(ByVal pLastWeek As Integer)
    Property Get RandomDelay() As String
    Property Let RandomDelay(ByVal pRandomDelay As String)
End Interface

[ InterfaceId ("2A9C35DA-D357-41F4-BBC1-207AC1B1F3CB") ]
[ OleAutomation (False) ]
Interface IBootTrigger Extends ITrigger
    Property Get Delay() As String
    Property Let Delay(ByVal pDelay As String)
End Interface

[ InterfaceId ("4C8FEC3A-C218-4E0C-B23D-629024DB91A2") ]
[ OleAutomation (False) ]
Interface IRegistrationTrigger Extends ITrigger
    Property Get Delay() As String
    Property Let Delay(ByVal pDelay As String)
End Interface

[ InterfaceId ("4C3D624D-FD6B-49A3-B9B7-09CB3CD3F047") ]
[ OleAutomation (False) ]
Interface IExecAction Extends IAction
    Property Get Path() As String
    Property Let Path(ByVal pPath As String)
    Property Get Arguments() As String
    Property Let Arguments(ByVal pArguments As String)
    Property Get WorkingDirectory() As String
    Property Let WorkingDirectory(ByVal pWorkingDirectory As String)
End Interface
[ InterfaceId ("F2A82542-BDA5-4E6B-9143-E2BF4F8987B6") ]
[ OleAutomation (False) ]
Interface IExecAction2 Extends IExecAction
    Property Get HideAppWindow() As Integer
    Property Let HideAppWindow(ByVal pHideAppWindow As Integer)
End Interface

[ InterfaceId ("505E9E68-AF89-46B8-A30F-56162A83D537") ]
[ OleAutomation (False) ]
Interface IShowMessageAction Extends IAction
    Property Get Title() As String
    Property Let Title(ByVal pTitle As String)
    Property Get MessageBody() As String
    Property Let MessageBody(ByVal pMessageBody As String)
End Interface

[ InterfaceId ("6D2FD252-75C5-4F66-90BA-2A7D8CC3039F") ]
[ OleAutomation (False) ]
Interface IComHandlerAction Extends IAction
    Property Get ClassId() As String
    Property Let ClassId(ByVal pClassId As String)
    Property Get Data() As String
    Property Let Data(ByVal pData As String)
End Interface

[ InterfaceId ("10F62C64-7E16-4314-A0C2-0C3683F99D40") ]
[ OleAutomation (False) ]
Interface IEmailAction Extends IAction
    Property Get Server() As String
    Property Let Server(ByVal pServer As String)
    Property Get Subject() As String
    Property Let Subject(ByVal pSubject As String)
    Property Get To() As String
    Property Let To(ByVal pTo As String)
    Property Get Cc() As String
    Property Let Cc(ByVal pCc As String)
    Property Get Bcc() As String
    Property Let Bcc(ByVal pBcc As String)
    Property Get ReplyTo() As String
    Property Let ReplyTo(ByVal pReplyTo As String)
    Property Get From() As String
    Property Let From(ByVal pFrom As String)
    Property Get HeaderFields() As ITaskNamedValueCollection
    Property Let HeaderFields(ByVal pFields As ITaskNamedValueCollection)
    Property Get Body() As String
    Property Let Body(ByVal pBody As String)
    Property Get Attachments() As Variant()
    Property Let Attachments(pAttachments() As Variant) '//SAFEARRAY(VARIANT)
End Interface

[ InterfaceId ("248919AE-E345-4A6D-8AEB-E0D3165C904E") ]
[ OleAutomation (False) ]
Interface IPrincipal2 Extends IDispatch
    Property Get ProcessTokenSidType() As TASK_PROCESSTOKENSID
    Property Let ProcessTokenSidType(ByVal pProcessTokenSidType As TASK_PROCESSTOKENSID)
    Property Get RequiredPrivilegeCount() As Long
    Property Get RequiredPrivilege(ByVal index As Long) As String
    Sub AddRequiredPrivilege(ByVal privilege As String)
End Interface

[ InterfaceId ("A6024FA8-9652-4ADB-A6BF-5CFCD877A7BA") ]
[ OleAutomation (False) ]
Interface IMaintenanceSettings Extends IDispatch
    Property Let Period(ByVal pTarget As String)
    Property Get Period() As String
    Property Let Deadline(ByVal pTarget As String)
    Property Get Deadline() As String
    Property Let Exclusive(ByVal target As Integer)
    Property Get Exclusive() As Integer
End Interface

[ InterfaceId ("85788d00-6807-11d0-b810-00c04fd706ec") ]
[ OleAutomation (False) ]
Interface IRunnableTask Extends stdole.IUnknown
    Sub Run()
    Sub Kill(ByVal bWait As Long)
    Sub Suspend()
    Sub IsRunning()
End Interface

[ InterfaceId ("6CCB7BE0-6807-11d0-B810-00C04FD706EC") ]
[ OleAutomation (False) ]
Interface IShellTaskScheduler Extends stdole.IUnknown
    [ PreserveSig ] Function AddTask(ByVal prt As IRunnableTask, rtoid As UUID, ByVal lParam As LongPtr, ByVal dwPriority As Long) As Long
    [ PreserveSig ] Function RemoveTasks(rtoid As UUID, ByVal lParam As LongPtr, ByVal bWaitIfRunning As Long) As Long
    [ PreserveSig ] Function CountTasks(rtoid As UUID) As Long
    [ PreserveSig ] Function Status(ByVal dwReleaseStatus As Long, ByVal dwThreadTimeout As Long) As Long
End Interface

'CLSID_Task 
[ CoClassId ("148BD520-A2AB-11CE-B11F-00AA00530503") ]
CoClass Task
	 [ Default ] Interface ITask
End CoClass

'CLSID_SchedulingAgent 
[ CoClassId ("148BD52A-A2AB-11CE-B11F-00AA00530503") ]
CoClass SchedulingAgent
	 [ Default ] Interface ISchedulingAgent
End CoClass

'CLSID_TaskScheduler 
[ CoClassId ("0F87369F-A4E5-4CFC-BD3E-73E6154572DD") ]
CoClass TaskScheduler
	 [ Default ] Interface ITaskService
End CoClass

'CLSID_TaskHandlerPS 
[ CoClassId ("F2A69DB7-DA2C-4352-9066-86FEE6DACAC9") ]
CoClass TaskHandlerPS
	 [ Default ] Interface ITaskHandler
End CoClass

'CLSID_TaskHandlerStatusPS 
[ CoClassId ("9F15266D-D7BA-48F0-93C1-E6895F6FE5AC") ]
CoClass TaskHandlerStatusPS
	 [ Default ] Interface ITaskHandlerStatus
     Interface ITaskVariables
End CoClass

'CLSID_ShellTaskScheduler 
[ CoClassId ("603D3800-BD81-11D0-A3A5-00C04FD706EC") ]
CoClass ShellTaskScheduler
	 [ Default ] Interface IShellTaskScheduler
End CoClass

Module wdTaskScheduler

Public Enum TASK_DAYS
	TASK_SUNDAY = &H1
	TASK_MONDAY = &H2
	TASK_TUESDAY = &H4
	TASK_WEDNESDAY = &H8
	TASK_THURSDAY = &H10
	TASK_FRIDAY = &H20
	TASK_SATURDAY = &H40
End Enum
Public Enum TASK_WEEKS
	TASK_FIRST_WEEK = 1
	TASK_SECOND_WEEK = 2
	TASK_THIRD_WEEK = 3
	TASK_FOURTH_WEEK = 4
	TASK_LAST_WEEK = 5
End Enum
Public Enum TASK_MONTHS
	TASK_JANUARY = &H1
	TASK_FEBRUARY = &H2
	TASK_MARCH = &H4
	TASK_APRIL = &H8
	TASK_MAY = &H10
	TASK_JUNE = &H20
	TASK_JULY = &H40
	TASK_AUGUST = &H80
	TASK_SEPTEMBER = &H100
	TASK_OCTOBER = &H200
	TASK_NOVEMBER = &H400
	TASK_DECEMBER = &H800
End Enum

Public Enum TASK_FLAGS
	TASK_FLAG_INTERACTIVE = (&H1)
	TASK_FLAG_DELETE_WHEN_DONE = (&H2)
	TASK_FLAG_DISABLED = (&H4)
	TASK_FLAG_START_ONLY_IF_IDLE = (&H10)
	TASK_FLAG_KILL_ON_IDLE_END = (&H20)
	TASK_FLAG_DONT_START_IF_ON_BATTERIES = (&H40)
	TASK_FLAG_KILL_IF_GOING_ON_BATTERIES = (&H80)
	TASK_FLAG_RUN_ONLY_IF_DOCKED = (&H100)
	TASK_FLAG_HIDDEN = (&H200)
	TASK_FLAG_RUN_IF_CONNECTED_TO_INTERNET = (&H400)
	TASK_FLAG_RESTART_ON_IDLE_RESUME = (&H800)
	TASK_FLAG_SYSTEM_REQUIRED = (&H1000)
	TASK_FLAG_RUN_ONLY_IF_LOGGED_ON = (&H2000)
End Enum

Public Enum TASK_TRIGGER_FLAGS
	TASK_TRIGGER_FLAG_HAS_END_DATE = (&H1)
	TASK_TRIGGER_FLAG_KILL_AT_DURATION_END = (&H2)
	TASK_TRIGGER_FLAG_DISABLED = (&H4)
End Enum

Public Enum TASK_MAXS
	TASK_MAX_RUN_TIMES = 1440
End Enum

Public Enum TASK_TRIGGER_TYPE
	TASK_TIME_TRIGGER_ONCE = 0
	TASK_TIME_TRIGGER_DAILY = 1
	TASK_TIME_TRIGGER_WEEKLY = 2
	TASK_TIME_TRIGGER_MONTHLYDATE = 3
	TASK_TIME_TRIGGER_MONTHLYDOW = 4
	TASK_EVENT_TRIGGER_ON_IDLE = 5
	TASK_EVENT_TRIGGER_AT_SYSTEMSTART = 6
	TASK_EVENT_TRIGGER_AT_LOGON = 7
End Enum

'===================
'TRIGGER_TYPE_UNION
Public Type DAILY
	DaysInterval As Integer
	Reserved As Long
End Type
Public Type WEEKLY
	WeeksInterval As Integer
    rgfDaysOfTheWeek As Integer
    Reserved As Integer
End Type
Public Type MONTHLYDATE
	rgfDays As Long
    rgfMonths As Integer
End Type
Public Type MONTHLYDOW
	wWhichWeek As Integer
    rgfDaysOfTheWeek As Integer
    rgfMonths As Integer
End Type
Public Type TRIGGER_TYPE_UNION
	TimeUnion(5) As Byte 'Copy one of the preceeding 4 structures into this
End Type
'===================

Public Type TASK_TRIGGER
	cbTriggerSize As Integer
	Reserved1 As Integer
	wBeginYear As Integer
	wBeginMonth As Integer
	wBeginDay As Integer
	wEndYear As Integer
	wEndMonth As Integer
	wEndDay As Integer
	wStartHour As Integer
	wStartMinute As Integer
	MinutesDuration As Long
	MinutesInterval As Long
	rgFlags As TASK_TRIGGER_FLAGS
	TriggerType As TASK_TRIGGER_TYPE
	Type As TRIGGER_TYPE_UNION
	Reserved2 As Integer
	wRandomMinutesInterval As Integer
End Type

Public Enum TASKPAGE
	TASKPAGE_TASK = 0
	TASKPAGE_SCHEDULE = 1
	TASKPAGE_SETTINGS = 2
End Enum

Public Enum SCHED_STATUS
	SCHED_S_TASK_READY = &H00041300
	SCHED_S_TASK_RUNNING = &H00041301
	SCHED_S_TASK_DISABLED = &H00041302
	SCHED_S_TASK_HAS_NOT_RUN = &H00041303
	SCHED_S_TASK_NO_MORE_RUNS = &H00041304
	SCHED_S_TASK_NOT_SCHEDULED = &H00041305
	SCHED_S_TASK_TERMINATED = &H00041306
	SCHED_S_TASK_NO_VALID_TRIGGERS = &H00041307
	SCHED_S_EVENT_TRIGGER = &H00041308
End Enum

Public Enum SCHED_ERRORS
	SCHED_E_TRIGGER_NOT_FOUND = &H80041309
	SCHED_E_TASK_NOT_READY = &H8004130a
	SCHED_E_TASK_NOT_RUNNING = &H8004130b
	SCHED_E_SERVICE_NOT_INSTALLED = &H8004130c
	SCHED_E_CANNOT_OPEN_TASK = &H8004130d
	SCHED_E_INVALID_TASK = &H8004130e
	SCHED_E_ACCOUNT_INFORMATION_NOT_SET = &H8004130f
	SCHED_E_ACCOUNT_NAME_NOT_FOUND = &H80041310
	SCHED_E_ACCOUNT_DBASE_CORRUPT = &H80041311
	SCHED_E_NO_SECURITY_SERVICES = &H80041312
	SCHED_E_UNKNOWN_OBJECT_VERSION = &H80041313
	SCHED_E_UNSUPPORTED_ACCOUNT_OPTION = &H80041314
	SCHED_E_SERVICE_NOT_RUNNING = &H80041315
End Enum

'2.0/3.0
Public Enum TASK_LOGON_TYPE
	TASK_LOGON_NONE = 0
	TASK_LOGON_PASSWORD = 1
	TASK_LOGON_S4U = 2
	TASK_LOGON_INTERACTIVE_TOKEN = 3
	TASK_LOGON_GROUP = 4
	TASK_LOGON_SERVICE_ACCOUNT = 5
	TASK_LOGON_INTERACTIVE_TOKEN_OR_PASSWORD = 6
End Enum

Public Enum TASK_RUNLEVEL
	TASK_RUNLEVEL_LUA = 0
	TASK_RUNLEVEL_HIGHEST = 1
End Enum

Public Enum TASK_STATE
	TASK_STATE_UNKNOWN = 0
	TASK_STATE_DISABLED = 1
	TASK_STATE_QUEUED = 2
	TASK_STATE_READY = 3
	TASK_STATE_RUNNING = 4
End Enum

Public Enum TASK_TRIGGER_TYPE2
	TASK_TRIGGER_EVENT = 0
	TASK_TRIGGER_TIME = 1
	TASK_TRIGGER_DAILY = 2
	TASK_TRIGGER_WEEKLY = 3
	TASK_TRIGGER_MONTHLY = 4
	TASK_TRIGGER_MONTHLYDOW = 5
	TASK_TRIGGER_IDLE = 6
	TASK_TRIGGER_REGISTRATION = 7
	TASK_TRIGGER_BOOT = 8
	TASK_TRIGGER_LOGON = 9
	TASK_TRIGGER_SESSION_STATE_CHANGE = 11
	TASK_TRIGGER_CUSTOM_TRIGGER_01 = 12
End Enum

Public Enum TASK_INSTANCES_POLICY
	TASK_INSTANCES_PARALLEL = 0
	TASK_INSTANCES_QUEUE = 1
	TASK_INSTANCES_IGNORE_NEW = 2
	TASK_INSTANCES_STOP_EXISTING = 3
End Enum

Public Enum TASK_COMPATIBILITY
	TASK_COMPATIBILITY_AT = 0
	TASK_COMPATIBILITY_V1 = 1
	TASK_COMPATIBILITY_V2 = 2
	TASK_COMPATIBILITY_V2_1 = 3
	TASK_COMPATIBILITY_V2_2 = 4
	TASK_COMPATIBILITY_V2_3 = 5
	TASK_COMPATIBILITY_V2_4 = 6
End Enum

Public Enum TASK_ACTION_TYPE
	TASK_ACTION_EXEC = 0
	TASK_ACTION_COM_HANDLER = 5
	TASK_ACTION_SEND_EMAIL = 6
	TASK_ACTION_SHOW_MESSAGE = 7
End Enum

Public Enum TASK_SESSION_STATE_CHANGE_TYPE
	TASK_CONSOLE_CONNECT = 1
	TASK_CONSOLE_DISCONNECT = 2
	TASK_REMOTE_CONNECT = 3
	TASK_REMOTE_DISCONNECT = 4
	TASK_SESSION_LOCK = 7
	TASK_SESSION_UNLOCK = 8
End Enum

Public Enum TASK_RUN_FLAGS
	TASK_RUN_NO_FLAGS = 0
	TASK_RUN_AS_SELF = 1
	TASK_RUN_IGNORE_CONSTRAINTS = 2
	TASK_RUN_USE_SESSION_ID = 4
	TASK_RUN_USER_SID = 8
End Enum

Public Enum TASK_ENUM_FLAGS
	TASK_ENUM_HIDDEN = 1
End Enum

Public Enum TASK_CREATION
	TASK_VALIDATE_ONLY = 1
	TASK_CREATE = 2
	TASK_UPDATE = 4
	TASK_CREATE_OR_UPDATE = 6
	TASK_DISABLE = 8
	TASK_DONT_ADD_PRINCIPAL_ACE = 16
	TASK_IGNORE_REGISTRATION_TRIGGERS = 32
End Enum

Public Enum TASK_PROCESSTOKENSID
	TASK_PROCESSTOKENSID_NONE = 0
	TASK_PROCESSTOKENSID_UNRESTRICTED = 1
	TASK_PROCESSTOKENSID_DEFAULT = 2
End Enum

Public Enum IRTIR_Values
	IRTIR_TASK_NOT_RUNNING = 0
	IRTIR_TASK_RUNNING = 1
	IRTIR_TASK_SUSPENDED = 2
	IRTIR_TASK_PENDING = 3
	IRTIR_TASK_FINISHED = 4
End Enum

Public Const sCLSID_Task = "new: {148BD520-A2AB-11CE-B11F-00AA00530503}"
Public Const sCLSID_SchedulingAgent = "new: {148BD52A-A2AB-11CE-B11F-00AA00530503}"

Public Const sCLSID_TaskScheduler = "new: {0F87369F-A4E5-4CFC-BD3E-73E6154572DD}"
Public Const sCLSID_TaskHandlerPS = "new: {F2A69DB7-DA2C-4352-9066-86FEE6DACAC9}"
Public Const sCLSID_TaskHandlerStatusPS = "new: {9F15266D-D7BA-48F0-93C1-E6895F6FE5AC}"
Public Const sCLSID_ShellTaskScheduler = "new: {603D3800-BD81-11D0-A3A5-00C04FD706EC}"


End Module