'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

#If WDL_NO_DIRECTX = 0 Then

    
[InterfaceId("9B7E4C00-342C-4106-A19F-4F2704F689F0")]
[OleAutomation(False)]
Interface ID3D10DeviceChild Extends stdole.IUnknown
    [PreserveSig]
    Sub GetDevice(ByRef ppDevice As ID3D10Device)
    Sub GetPrivateData(ByRef guid As UUID, ByRef pDataSize As Long, ByRef pData As Any)
    Sub SetPrivateData(ByRef guid As UUID, ByVal dataSize As Long, ByRef pData As Any)
    Sub SetPrivateDataInterface(ByRef guid As UUID, ByVal pData As IUnknown)
End Interface

 
[InterfaceId("2B4B1CC8-A4AD-41F8-8322-CA86FC3EC675")]
[OleAutomation(False)]
Interface ID3D10DepthStencilState Extends ID3D10DeviceChild
    [PreserveSig]
    Sub GetDesc(ByRef pDesc As D3D10_DEPTH_STENCIL_DESC)
End Interface

[InterfaceId("EDAD8D19-8A35-4D6D-8566-2EA276CDE161")]
[OleAutomation(False)]
Interface ID3D10BlendState Extends ID3D10DeviceChild
    [PreserveSig]
    Sub GetDesc(ByRef pDesc As D3D10_BLEND_DESC)
End Interface

    
[InterfaceId("A2A07292-89AF-4345-BE2E-C53D9FBB6E9F")]
[OleAutomation(False)]
Interface ID3D10RasterizerState Extends ID3D10DeviceChild
    [PreserveSig]
    Sub GetDesc(ByRef pDesc As D3D10_RASTERIZER_DESC)
End Interface

    
[InterfaceId("9B7E4C01-342C-4106-A19F-4F2704F689F0")]
[OleAutomation(False)]
Interface ID3D10Resource Extends ID3D10DeviceChild
    [PreserveSig]
    Sub GetType(ByRef RType As D3D10_RESOURCE_DIMENSION)
    [PreserveSig]
    Sub SetEvictionPriority(ByVal EvictionPriority As Long)
    [PreserveSig]
    Function GetEvictionPriority() As Long
End Interface

[InterfaceId("9B7E4C02-342C-4106-A19F-4F2704F689F0")]
[OleAutomation(False)]
Interface ID3D10Buffer Extends ID3D10Resource
    Sub Map(ByVal MapType As D3D10_MAP, ByVal MapFlags As D3D10_MAP_FLAG, ByRef ppData As Any)
    [PreserveSig]
    Sub Unmap()
    [PreserveSig]
    Sub GetDesc(ByRef pDesc As D3D10_BUFFER_DESC)
End Interface

[InterfaceId("9B7E4C03-342C-4106-A19F-4F2704F689F0")]
[OleAutomation(False)]
Interface ID3D10Texture1D Extends ID3D10Resource
    Sub Map(ByVal Subresource As Long, ByVal MapType As D3D10_MAP, ByVal MapFlags As D3D10_MAP_FLAG, ByRef ppData As Any)
    [PreserveSig]
    Sub Unmap(ByVal Subresource As Long)
    [PreserveSig]
    Sub GetDesc(ByRef pDesc As D3D10_TEXTURE1D_DESC)
End Interface

[InterfaceId("9B7E4C04-342C-4106-A19F-4F2704F689F0")]
[OleAutomation(False)]
Interface ID3D10Texture2D Extends ID3D10Resource
    Sub Map(ByVal Subresource As Long, ByVal MapType As D3D10_MAP, ByVal MapFlags As D3D10_MAP_FLAG, ByRef pMappedTex2D As D3D10_MAPPED_TEXTURE2D)
    [PreserveSig]
    Sub Unmap(ByVal Subresource As Long)
    [PreserveSig]
    Sub GetDesc(ByRef pDesc As D3D10_TEXTURE2D_DESC)
End Interface

[InterfaceId("9B7E4C05-342C-4106-A19F-4F2704F689F0")]
[OleAutomation(False)]
Interface ID3D10Texture3D Extends ID3D10Resource
    Sub Map(ByVal Subresource As Long, ByVal MapType As D3D10_MAP, ByVal MapFlags As D3D10_MAP_FLAG, ByRef pMappedTex3D As D3D10_MAPPED_TEXTURE3D)
    [PreserveSig]
    Sub Unmap(ByVal Subresource As Long)
    [PreserveSig]
    Sub GetDesc(ByRef pDesc As D3D10_TEXTURE3D_DESC)
End Interface

[InterfaceId("C902B03F-60A7-49BA-9936-2A3AB37A7E33")]
[OleAutomation(False)]
Interface ID3D10View Extends ID3D10DeviceChild
    [PreserveSig]
    Sub GetResource(ByRef ppResource As ID3D10Resource)
End Interface

[InterfaceId("9B7E4C07-342C-4106-A19F-4F2704F689F0")]
[OleAutomation(False)]
Interface ID3D10ShaderResourceView Extends ID3D10View
    [PreserveSig]
    Sub GetDesc(ByRef pDesc As D3D10_SHADER_RESOURCE_VIEW_DESC)
End Interface

[InterfaceId("9B7E4C08-342C-4106-A19F-4F2704F689F0")]
[OleAutomation(False)]
Interface ID3D10RenderTargetView Extends ID3D10View
    [PreserveSig]
    Sub GetDesc(ByRef pDesc As D3D10_RENDER_TARGET_VIEW_DESC)
End Interface

[InterfaceId("9B7E4C09-342C-4106-A19F-4F2704F689F0")]
 [OleAutomation(False)]
 Interface ID3D10DepthStencilView Extends ID3D10View
     [PreserveSig]
     Sub GetDesc(ByRef pDesc As D3D10_DEPTH_STENCIL_VIEW_DESC)
 End Interface

 [InterfaceId("9B7E4C0A-342C-4106-A19F-4F2704F689F0")]
 [OleAutomation(False)]
 Interface ID3D10VertexShader Extends ID3D10DeviceChild
 End Interface

 [InterfaceId("6316BE88-54CD-4040-AB44-20461BC81F68")]
 [OleAutomation(False)]
 Interface ID3D10GeometryShader Extends ID3D10DeviceChild
 End Interface

 [InterfaceId("4968B601-9D00-4CDE-8346-8E7F675819B6")]
 [OleAutomation(False)]
 Interface ID3D10PixelShader Extends ID3D10DeviceChild
 End Interface

 [InterfaceId("9B7E4C0B-342C-4106-A19F-4F2704F689F0")]
 [OleAutomation(False)]
 Interface ID3D10InputLayout Extends ID3D10DeviceChild
 End Interface

 [InterfaceId("9B7E4C0C-342C-4106-A19F-4F2704F689F0")]
 [OleAutomation(False)]
 Interface ID3D10SamplerState Extends ID3D10DeviceChild
     [PreserveSig]
     Sub GetDesc(ByRef pDesc As D3D10_SAMPLER_DESC)
 End Interface
 
 [InterfaceId("9B7E4C0D-342C-4106-A19F-4F2704F689F0")]
 [OleAutomation(False)]
 Interface ID3D10Asynchronous Extends ID3D10DeviceChild
     [PreserveSig]
     Sub Begin()
     [PreserveSig]
     Sub end()
     Sub GetData(ByRef pData As Any, ByVal dataSize As Long, ByVal GetDataFlags As D3D10_ASYNC_GETDATA_FLAG)
     [PreserveSig]
     Function GetDataSize() As Long
 End Interface
 
 [InterfaceId("9B7E4C0E-342C-4106-A19F-4F2704F689F0")]
 [OleAutomation(False)]
 Interface ID3D10Query Extends ID3D10Asynchronous
     [PreserveSig]
     Sub GetDesc(ByRef pDesc As D3D10_QUERY_DESC)
 End Interface

 [InterfaceId("9B7E4C10-342C-4106-A19F-4F2704F689F0")]
 [OleAutomation(False)]
 Interface ID3D10Predicate Extends ID3D10Query
 End Interface

 [InterfaceId("9B7E4C11-342C-4106-A19F-4F2704F689F0")]
  [OleAutomation(False)]
  Interface ID3D10Counter Extends ID3D10Asynchronous
      [PreserveSig]
      Sub GetDesc(ByRef pDesc As D3D10_COUNTER_DESC)
  End Interface

  [InterfaceId("9B7E4C0F-342C-4106-A19F-4F2704F689F0")]
  [OleAutomation(False)]
  Interface ID3D10Device Extends stdole.IUnknown
      [PreserveSig]
      Sub VSSetConstantBuffers(ByVal StartSlot As Long, ByVal NumBuffers As Long, ByRef ppConstantBuffers As ID3D10Buffer)
      [PreserveSig]
      Sub PSSetShaderResources(ByVal StartSlot As Long, ByVal NumViews As Long, ByRef ppShaderResourceViews As ID3D10ShaderResourceView)
      [PreserveSig]
      Sub PSSetShader(ByVal pPixelShader As ID3D10PixelShader)
      [PreserveSig]
      Sub PSSetSamplers(ByVal StartSlot As Long, ByVal NumSamplers As Long, ByRef ppSamplers As ID3D10SamplerState)
      [PreserveSig]
      Sub VSSetShader(ByVal pVertexShader As ID3D10VertexShader)
      [PreserveSig]
      Sub DrawIndexed(ByVal indexCount As Long, ByVal StartIndexLocation As Long, ByVal BaseVertexLocation As Long)
      [PreserveSig]
      Sub Draw(ByVal vertexCount As Long, ByVal StartVertexLocation As Long)
      [PreserveSig]
      Sub PSSetConstantBuffers(ByVal StartSlot As Long, ByVal NumBuffers As Long, ByRef ppConstantBuffers As ID3D10Buffer)
      [PreserveSig]
      Sub IASetInputLayout(ByVal pInputLayout As ID3D10InputLayout)
      [PreserveSig]
      Sub IASetVertexBuffers(ByVal StartSlot As Long, ByVal NumBuffers As Long, ByRef ppVertexBuffers As ID3D10Buffer, ByRef pStrides As Long, ByRef pOffsets As Long)
      [PreserveSig]
      Sub IASetIndexBuffer(ByVal pIndexBuffer As ID3D10Buffer, ByVal Format As DXGI_FORMAT, ByVal Offset As Long)
      [PreserveSig]
      Sub DrawIndexedInstanced(ByVal IndexCountPerInstance As Long, ByVal InstanceCount As Long, ByVal StartIndexLocation As Long, ByVal BaseVertexLocation As Long, ByVal StartInstanceLocation As Long)
      [PreserveSig]
      Sub DrawInstanced(ByVal VertexCountPerInstance As Long, ByVal InstanceCount As Long, ByVal StartVertexLocation As Long, ByVal StartInstanceLocation As Long)
      [PreserveSig]
      Sub GSSetConstantBuffers(ByVal StartSlot As Long, ByVal NumBuffers As Long, ByRef ppConstantBuffers As ID3D10Buffer)
      [PreserveSig]
      Sub GSSetShader(ByVal pShader As ID3D10GeometryShader)
      [PreserveSig]
      Sub IASetPrimitiveTopology(ByVal Topology As D3D_PRIMITIVE_TOPOLOGY)
      [PreserveSig]
      Sub VSSetShaderResources(ByVal StartSlot As Long, ByVal NumViews As Long, ByRef ppShaderResourceViews As ID3D10ShaderResourceView)
      [PreserveSig]
      Sub VSSetSamplers(ByVal StartSlot As Long, ByVal NumSamplers As Long, ByRef ppSamplers As ID3D10SamplerState)
      [PreserveSig]
      Sub SetPredication(ByVal pPredicate As ID3D10Predicate, ByVal PredicateValue As BOOL)
      [PreserveSig]
      Sub GSSetShaderResources(ByVal StartSlot As Long, ByVal NumViews As Long, ByRef ppShaderResourceViews As ID3D10ShaderResourceView)
      [PreserveSig]
      Sub GSSetSamplers(ByVal StartSlot As Long, ByVal NumSamplers As Long, ByRef ppSamplers As ID3D10SamplerState)
      [PreserveSig]
      Sub OMSetRenderTargets(ByVal NumViews As Long, ByRef ppRenderTargetViews As ID3D10RenderTargetView, ByVal pDepthStencilView As ID3D10DepthStencilView)
      [PreserveSig]
      Sub OMSetBlendState(ByVal pBlendState As ID3D10BlendState, ByRef blendFactor As Single, ByVal SampleMask As Long)
      [PreserveSig]
      Sub OMSetDepthStencilState(ByVal pDepthStencilState As ID3D10DepthStencilState, ByVal StencilRef As Long)
      [PreserveSig]
      Sub SOSetTargets(ByVal NumBuffers As Long, ByRef ppSOTargets As ID3D10Buffer, ByRef pOffsets As Long)
      [PreserveSig]
      Sub DrawAuto()
      [PreserveSig]
      Sub RSSetState(ByVal pRasterizerState As ID3D10RasterizerState)
      [PreserveSig]
      Sub RSSetViewports(ByVal NumViewports As Long, ByRef pViewports As D3D10_VIEWPORT)
      [PreserveSig]
      Sub RSSetScissorRects(ByVal NumRects As Long, ByRef pRects As D3D10_RECT)
      [PreserveSig]
      Sub CopySubresourceRegion(ByVal pDstResource As ID3D10Resource, ByVal DstSubresource As Long, ByVal DstX As Long, ByVal DstY As Long, ByVal DstZ As Long, ByVal pSrcResource As ID3D10Resource, ByVal SrcSubresource As Long, ByRef pSrcBox As D3D10_BOX)
      [PreserveSig]
      Sub CopyResource(ByVal pDstResource As ID3D10Resource, ByVal pSrcResource As ID3D10Resource)
      [PreserveSig]
      Sub UpdateSubresource(ByVal pDstResource As ID3D10Resource, ByVal DstSubresource As Long, ByRef pDstBox As D3D10_BOX, ByRef pSrcData As Any, ByVal SrcRowPitch As Long, ByVal SrcDepthPitch As Long)
      [PreserveSig]
      Sub ClearRenderTargetView(ByVal pRenderTargetView As ID3D10RenderTargetView, ByRef ColorRGBA As Single)
      [PreserveSig]
      Sub ClearDepthStencilView(ByVal pDepthStencilView As ID3D10DepthStencilView, ByVal ClearFlags As Long, ByVal Depth As Single, ByVal Stencil As Byte)
      [PreserveSig]
      Sub GenerateMips(ByVal pShaderResourceView As ID3D10ShaderResourceView)
      [PreserveSig]
      Sub ResolveSubresource(ByVal pDstResource As ID3D10Resource, ByVal DstSubresource As Long, ByVal pSrcResource As ID3D10Resource, ByVal SrcSubresource As Long, ByVal Format As DXGI_FORMAT)
      [PreserveSig]
      Sub VSGetConstantBuffers(ByVal StartSlot As Long, ByVal NumBuffers As Long, ByRef ppConstantBuffers As ID3D10Buffer)
      [PreserveSig]
      Sub PSGetShaderResources(ByVal StartSlot As Long, ByVal NumViews As Long, ByRef ppShaderResourceViews As ID3D10ShaderResourceView)
      [PreserveSig]
      Sub PSGetShader(ByRef ppPixelShader As ID3D10PixelShader)
      [PreserveSig]
      Sub PSGetSamplers(ByVal StartSlot As Long, ByVal NumSamplers As Long, ByRef ppSamplers As ID3D10SamplerState)
      [PreserveSig]
      Sub VSGetShader(ByRef ppVertexShader As ID3D10VertexShader)
      [PreserveSig]
      Sub PSGetConstantBuffers(ByVal StartSlot As Long, ByVal NumBuffers As Long, ByRef ppConstantBuffers As ID3D10Buffer)
      [PreserveSig]
      Sub IAGetInputLayout(ByRef ppInputLayout As ID3D10InputLayout)
      [PreserveSig]
      Sub IAGetVertexBuffers(ByVal StartSlot As Long, ByVal NumBuffers As Long, ByRef ppVertexBuffers As ID3D10Buffer, ByRef pStrides As Long, ByRef pOffsets As Long)
      [PreserveSig]
      Sub IAGetIndexBuffer(ByRef pIndexBuffer As ID3D10Buffer, ByRef Format As DXGI_FORMAT, ByRef Offset As Long)
      [PreserveSig]
      Sub GSGetConstantBuffers(ByVal StartSlot As Long, ByVal NumBuffers As Long, ByRef ppConstantBuffers As ID3D10Buffer)
      [PreserveSig]
      Sub GSGetShader(ByRef ppGeometryShader As ID3D10GeometryShader)
      [PreserveSig]
      Sub IAGetPrimitiveTopology(ByRef pTopology As D3D_PRIMITIVE_TOPOLOGY)
      [PreserveSig]
      Sub VSGetShaderResources(ByVal StartSlot As Long, ByVal NumViews As Long, ByRef ppShaderResourceViews As ID3D10ShaderResourceView)
      [PreserveSig]
      Sub VSGetSamplers(ByVal StartSlot As Long, ByVal NumSamplers As Long, ByRef ppSamplers As ID3D10SamplerState)
      [PreserveSig]
      Sub GetPredication(ByRef ppPredicate As ID3D10Predicate, ByRef pPredicateValue As BOOL)
      [PreserveSig]
      Sub GSGetShaderResources(ByVal StartSlot As Long, ByVal NumViews As Long, ByRef ppShaderResourceViews As ID3D10ShaderResourceView)
      [PreserveSig]
      Sub GSGetSamplers(ByVal StartSlot As Long, ByVal NumSamplers As Long, ByRef ppSamplers As ID3D10SamplerState)
      [PreserveSig]
      Sub OMGetRenderTargets(ByVal NumViews As Long, ByRef ppRenderTargetViews As ID3D10RenderTargetView, ByRef ppDepthStencilView As ID3D10DepthStencilView)
      [PreserveSig]
      Sub OMGetBlendState(ByRef ppBlendState As ID3D10BlendState, ByRef blendFactor As Single, ByRef pSampleMask As Long)
      [PreserveSig]
      Sub OMGetDepthStencilState(ByRef ppDepthStencilState As ID3D10DepthStencilState, ByRef pStencilRef As Long)
      [PreserveSig]
      Sub SOGetTargets(ByVal NumBuffers As Long, ByRef ppSOTargets As ID3D10Buffer, ByRef pOffsets As Long)
      [PreserveSig]
      Sub RSGetState(ByRef ppRasterizerState As ID3D10RasterizerState)
      [PreserveSig]
      Sub RSGetViewports(ByRef NumViewports As Long, ByRef pViewports As D3D10_VIEWPORT)
      [PreserveSig]
      Sub RSGetScissorRects(ByRef NumRects As Long, ByRef pRects As D3D10_RECT)
      Sub GetDeviceRemovedReason()
      Sub SetExceptionMode(ByVal RaiseFlags As D3D10_RAISE_FLAG)
      [PreserveSig]
      Function GetExceptionMode() As D3D10_RAISE_FLAG
      Sub GetPrivateData(ByRef guid As UUID, ByRef pDataSize As Long, ByRef pData As Any)
      Sub SetPrivateData(ByRef guid As UUID, ByVal dataSize As Long, ByRef pData As Any)
      Sub SetPrivateDataInterface(ByRef guid As UUID, ByVal pData As IUnknown)
      [PreserveSig]
      Sub ClearState()
      [PreserveSig]
      Sub Flush()
      Sub CreateBuffer(ByRef pDesc As D3D10_BUFFER_DESC, ByRef pInitialData As D3D10_SUBRESOURCE_DATA, ByRef ppBuffer As ID3D10Buffer)
      Sub CreateTexture1D(ByRef pDesc As D3D10_TEXTURE1D_DESC, ByRef pInitialData As D3D10_SUBRESOURCE_DATA, ByRef ppTexture1D As ID3D10Texture1D)
      Sub CreateTexture2D(ByRef pDesc As D3D10_TEXTURE2D_DESC, ByRef pInitialData As D3D10_SUBRESOURCE_DATA, ByRef ppTexture2D As ID3D10Texture2D)
      Sub CreateTexture3D(ByRef pDesc As D3D10_TEXTURE3D_DESC, ByRef pInitialData As D3D10_SUBRESOURCE_DATA, ByRef ppTexture3D As ID3D10Texture3D)
      Sub CreateShaderResourceView(ByVal pResource As ID3D10Resource, ByRef pDesc As D3D10_SHADER_RESOURCE_VIEW_DESC, ByRef ppSRView As ID3D10ShaderResourceView)
      Sub CreateRenderTargetView(ByVal pResource As ID3D10Resource, ByRef pDesc As D3D10_RENDER_TARGET_VIEW_DESC, ByRef ppRTView As ID3D10RenderTargetView)
      Sub CreateDepthStencilView(ByVal pResource As ID3D10Resource, ByRef pDesc As D3D10_DEPTH_STENCIL_VIEW_DESC, ByRef ppDepthStencilView As ID3D10DepthStencilView)
      Sub CreateInputLayout(ByRef pInputElementDescs As D3D10_INPUT_ELEMENT_DESC, ByVal NumElements As Long, ByRef pShaderBytecodeWithInputSignature As Any, ByVal BytecodeLength As LongPtr, ByRef ppInputLayout As ID3D10InputLayout)
      Sub CreateVertexShader(ByRef pShaderBytecode As Any, ByVal BytecodeLength As LongPtr, ByRef ppVertexShader As ID3D10VertexShader)
      Sub CreateGeometryShader(ByRef pShaderBytecode As Any, ByVal BytecodeLength As LongPtr, ByRef ppGeometryShader As ID3D10GeometryShader)
      Sub CreateGeometryShaderWithStreamOutput(ByRef pShaderBytecode As Any, ByVal BytecodeLength As LongPtr, ByRef pSODeclaration As D3D10_SO_DECLARATION_ENTRY, ByVal NumEntries As Long, ByVal OutputStreamStride As Long, ByRef ppGeometryShader As ID3D10GeometryShader)
      Sub CreatePixelShader(ByRef pShaderBytecode As Any, ByVal BytecodeLength As LongPtr, ByRef ppPixelShader As ID3D10PixelShader)
      Sub CreateBlendState(ByRef pBlendStateDesc As D3D10_BLEND_DESC, ByRef ppBlendState As ID3D10BlendState)
      Sub CreateDepthStencilState(ByRef pDepthStencilDesc As D3D10_DEPTH_STENCIL_DESC, ByRef ppDepthStencilState As ID3D10DepthStencilState)
      Sub CreateRasterizerState(ByRef pRasterizerDesc As D3D10_RASTERIZER_DESC, ByRef ppRasterizerState As ID3D10RasterizerState)
      Sub CreateSamplerState(ByRef pSamplerDesc As D3D10_SAMPLER_DESC, ByRef ppSamplerState As ID3D10SamplerState)
      Sub CreateQuery(ByRef pQueryDesc As D3D10_QUERY_DESC, ByRef ppQuery As ID3D10Query)
      Sub CreatePredicate(ByRef pPredicateDesc As D3D10_QUERY_DESC, ByRef ppPredicate As ID3D10Predicate)
      Sub CreateCounter(ByRef pCounterDesc As D3D10_COUNTER_DESC, ByRef ppCounter As ID3D10Counter)
      Sub CheckFormatSupport(ByVal Format As DXGI_FORMAT, ByRef pFormatSupport As Long)
      Sub CheckMultisampleQualityLevels(ByVal Format As DXGI_FORMAT, ByVal SampleCount As Long, ByRef pNumQualityLevels As Long)
      [PreserveSig]
      Sub CheckCounterInfo(ByRef pCounterInfo As D3D10_COUNTER_INFO)
      Sub CheckCounter(ByRef pDesc As D3D10_COUNTER_DESC, ByRef pType As D3D10_COUNTER_TYPE, ByRef pActiveCounters As Long, ByVal szName As LongPtr /* ANSI */, ByRef pNameLength As Long, ByVal szUnits As LongPtr /* ANSI */, ByRef pUnitsLength As Long, ByVal szDescription As LongPtr /* ANSI */, ByRef pDescriptionLength As Long)
      [PreserveSig]
      Function GetCreationFlags() As D3D10_CREATE_DEVICE_FLAG
      Sub OpenSharedResource(ByVal hResource As LongPtr, ByRef ReturnedInterface As UUID, ByRef ppResource As LongPtr)
      [PreserveSig]
      Sub SetTextFilterSize(ByVal width As Long, ByVal Height As Long)
      [PreserveSig]
      Sub GetTextFilterSize(ByRef pwidth As Long, ByRef pheight As Long)
  End Interface
  
  [InterfaceId("9B7E4E00-342C-4106-A19F-4F2704F689F0")]
  [OleAutomation(False)]
  Interface ID3D10Multithread Extends IUnknown
      [PreserveSig] Sub Enter()
      [PreserveSig] Sub Leave()
      [PreserveSig] Function SetMultithreadProtected(ByVal bMTProtect As BOOL) As BOOL
      [PreserveSig] Function GetMultithreadProtected() As BOOL
  End Interface
 
  [InterfaceId("C530AD7D-9B16-4395-A979-BA2ECFF83ADD")]
  [OleAutomation(False)]
  Interface ID3D10ShaderReflectionType Extends Nothing
      [PreserveSig]
      Sub GetDesc(ByRef pDesc As D3D10_SHADER_TYPE_DESC)
      [PreserveSig]
      Function GetMemberTypeByIndex(ByVal Index As Long) As ID3D10ShaderReflectionType
      [PreserveSig]
      Function GetMemberTypeByName(ByVal Name As LongPtr) As ID3D10ShaderReflectionType
      [PreserveSig]
      Function GetMemberTypeName(ByVal Index As Long) As LongPtr
  End Interface

  [InterfaceId("1BF63C95-2650-405d-99C1-3636BD1DA0A1")]
  [OleAutomation(False)]
   Interface ID3D10ShaderReflectionVariable Extends Nothing
      Sub GetDesc(ByRef pDesc As D3D10_SHADER_VARIABLE_DESC)
      [PreserveSig] Function GetType() As ID3D10ShaderReflectionType
  End Interface

  [InterfaceId("66C66A94-DDDD-4b62-A66A-F0DA33C2B4D0")]
  [OleAutomation(False)]
   Interface ID3D10ShaderReflectionConstantBuffer Extends Nothing
      Sub GetDesc(ByRef pDesc As D3D10_SHADER_BUFFER_DESC)
      [PreserveSig] Function GetVariableByIndex(ByVal Index As Long) As ID3D10ShaderReflectionVariable
      [PreserveSig] Function GetVariableByName(ByVal Name As LongPtr) As ID3D10ShaderReflectionVariable
  End Interface

  [InterfaceId("D40E20B6-F8F7-42ad-AB20-4BAF8F15DFAA")]
  [OleAutomation(False)]
   Interface ID3D10ShaderReflection Extends IUnknown
      Sub GetDesc(ByRef pDesc As D3D10_SHADER_DESC)
      [PreserveSig] Function GetConstantBufferByIndex(ByVal Index As Long) As ID3D10ShaderReflectionConstantBuffer
      [PreserveSig] Function GetConstantBufferByName(ByVal Name As LongPtr) As ID3D10ShaderReflectionConstantBuffer
      Sub GetResourceBindingDesc(ByVal ResourceIndex As Long, ByRef pDesc As D3D10_SHADER_INPUT_BIND_DESC)
      Sub GetInputParameterDesc(ByVal ParameterIndex As Long, ByRef pDesc As D3D10_SIGNATURE_PARAMETER_DESC)
      Sub GetOutputParameterDesc(ByVal ParameterIndex As Long, ByRef pDesc As D3D10_SIGNATURE_PARAMETER_DESC)
  End Interface

  [InterfaceId("0803425A-57F5-4DD6-9465-A87570834A08")]
  [OleAutomation(False)]
  Interface ID3D10StateBlock Extends stdole.IUnknown
      Sub Capture()
      Sub Apply()
      Sub ReleaseAllDeviceObjects()
      Sub GetDevice(ByRef ppDevice As ID3D10Device)
  End Interface
  
  
  [InterfaceId("4E9E1DDC-CD9D-4772-A837-00180B9B88FD")]
  [OleAutomation(False)]
   Interface ID3D10EffectType Extends Nothing
      [PreserveSig] Function IsValid() As BOOL
      Sub GetDesc(ByRef pDesc As D3D10_EFFECT_TYPE_DESC)
      [PreserveSig] Function GetMemberTypeByIndex(ByVal Index As Long) As ID3D10EffectType
      [PreserveSig] Function GetMemberTypeByName(ByVal Name As LongPtr) As ID3D10EffectType
      [PreserveSig] Function GetMemberTypeBySemantic(ByVal Semantic As LongPtr) As ID3D10EffectType
      [PreserveSig] Function GetMemberName(ByVal Index As Long) As LongPtr
      [PreserveSig] Function GetMemberSemantic(ByVal Index As Long) As LongPtr
  End Interface
  
  [InterfaceId("AE897105-00E6-45bf-BB8E-281DD6DB8E1B")]
  [OleAutomation(False)]
  Interface ID3D10EffectVariable Extends Nothing
      [PreserveSig] Function IsValid() As BOOL
      [PreserveSig] Function GetType() As ID3D10EffectType
      Sub GetDesc(ByRef pDesc As D3D10_EFFECT_VARIABLE_DESC)
    
      [PreserveSig] Function GetAnnotationByIndex(ByVal Index As Long) As ID3D10EffectVariable
      [PreserveSig] Function GetAnnotationByName(ByVal Name As LongPtr) As ID3D10EffectVariable
    
      [PreserveSig] Function GetMemberByIndex(ByVal Index As Long) As ID3D10EffectVariable
      [PreserveSig] Function GetMemberByName(ByVal Name As LongPtr) As ID3D10EffectVariable
      [PreserveSig] Function GetMemberBySemantic(ByVal Semantic As LongPtr) As ID3D10EffectVariable
    
      [PreserveSig] Function GetElement(ByVal Index As Long) As ID3D10EffectVariable
      [PreserveSig] Function GetParentConstantBuffer() As ID3D10EffectConstantBuffer
    
      [PreserveSig] Function AsScalar() As ID3D10EffectScalarVariable
      [PreserveSig] Function AsVector() As ID3D10EffectVectorVariable
      [PreserveSig] Function AsMatrix() As ID3D10EffectMatrixVariable
      [PreserveSig] Function AsString() As ID3D10EffectStringVariable
      [PreserveSig] Function AsShaderResource() As ID3D10EffectShaderResourceVariable
      [PreserveSig] Function AsRenderTargetView() As ID3D10EffectRenderTargetViewVariable
      [PreserveSig] Function AsDepthStencilView() As ID3D10EffectDepthStencilViewVariable
      [PreserveSig] Function AsConstantBuffer() As ID3D10EffectConstantBuffer
      [PreserveSig] Function AsShader() As ID3D10EffectShaderVariable
      [PreserveSig] Function AsBlend() As ID3D10EffectBlendVariable
      [PreserveSig] Function AsDepthStencil() As ID3D10EffectDepthStencilVariable
      [PreserveSig] Function AsRasterizer() As ID3D10EffectRasterizerVariable
      [PreserveSig] Function AsSampler() As ID3D10EffectSamplerVariable
    
      Sub SetRawValue(pData As Any, ByVal Offset As Long, ByVal ByteCount As Long)
      Sub GetRawValue(pData As Any, ByVal Offset As Long, ByVal ByteCount As Long)
  End Interface
  
  [InterfaceId("00E48F7B-D2C8-49e8-A86C-022DEE53431F")]
  [OleAutomation(False)]
  Interface ID3D10EffectScalarVariable Extends ID3D10EffectVariable
      Sub SetFloat(ByVal Value As Single)
      Sub GetFloat(ByRef pValue As Single)
    
      Sub SetFloatArray(ByVal pData As LongPtr, ByVal Offset As Long, ByVal Count As Long)
      Sub GetFloatArray(ByVal pData As LongPtr, ByVal Offset As Long, ByVal Count As Long)
    
      Sub SetInt(ByVal Value As Long)
      Sub GetInt(ByRef pValue As Long)
    
      Sub SetIntArray(pData As Long, ByVal Offset As Long, ByVal Count As Long)
      Sub GetIntArray(pData As Long, ByVal Offset As Long, ByVal Count As Long)
    
      Sub SetBool(ByVal Value As BOOL)
      Sub GetBool(ByRef pValue As BOOL)
    
      Sub SetBoolArray(pData As BOOL, ByVal Offset As Long, ByVal Count As Long)
      Sub GetBoolArray(pData As BOOL, ByVal Offset As Long, ByVal Count As Long)
  End Interface
  
  [InterfaceId("62B98C44-1F82-4c67-BCD0-72CF8F217E81")]
  [OleAutomation(False)]
  Interface ID3D10EffectVectorVariable Extends ID3D10EffectVariable
      Sub SetBoolVector(ByRef pData As BOOL)
      Sub SetIntVector(ByRef pData As Long)
      Sub SetFloatVector(ByRef pData As Single)

      Sub GetBoolVector(ByRef pData As BOOL)
      Sub GetIntVector(ByRef pData As Long)
      Sub GetFloatVector(ByRef pData As Single)

      Sub SetBoolVectorArray(ByRef pData As BOOL, ByVal Offset As Long, ByVal Count As Long)
      Sub SetIntVectorArray(ByRef pData As Long, ByVal Offset As Long, ByVal Count As Long)
      Sub SetFloatVectorArray(ByRef pData As Single, ByVal Offset As Long, ByVal Count As Long)

      Sub GetBoolVectorArray(ByRef pData As BOOL, ByVal Offset As Long, ByVal Count As Long)
      Sub GetIntVectorArray(ByRef pData As Long, ByVal Offset As Long, ByVal Count As Long)
      Sub GetFloatVectorArray(ByRef pData As Single, ByVal Offset As Long, ByVal Count As Long)
  End Interface
  
  [InterfaceId("50666C24-B82F-4eed-A172-5B6E7E8522E0")]
  [OleAutomation(False)]
  Interface ID3D10EffectMatrixVariable Extends ID3D10EffectVariable
      Sub SetMatrix(ByRef pData As Single)
      Sub GetMatrix(ByRef pData As Single)
    
      Sub SetMatrixArray(ByRef pData As Single, ByVal Offset As Long, ByVal Count As Long)
      Sub GetMatrixArray(ByRef pData As Single, ByVal Offset As Long, ByVal Count As Long)
    
      Sub SetMatrixTranspose(ByRef pData As Single)
      Sub GetMatrixTranspose(ByRef pData As Single)
    
      Sub SetMatrixTransposeArray(ByRef pData As Single, ByVal Offset As Long, ByVal Count As Long)
      Sub GetMatrixTransposeArray(ByRef pData As Single, ByVal Offset As Long, ByVal Count As Long)
  End Interface
  
  ' ID3D10EffectStringVariable
  [InterfaceId("71417501-8DF9-4e0a-A78A-255F9756BAFF")]
  [OleAutomation(False)]
  Interface ID3D10EffectStringVariable Extends ID3D10EffectVariable
      Sub GetString(ByRef ppString As LongPtr)
      Sub GetStringArray(ByRef ppStrings As LongPtr, ByVal Offset As Long, ByVal Count As Long)
  End Interface

  ' ID3D10EffectShaderResourceVariable
  [InterfaceId("C0A7157B-D872-4b1d-8073-EFC2ACD4B1FC")]
  [OleAutomation(False)]
  Interface ID3D10EffectShaderResourceVariable Extends ID3D10EffectVariable
      Sub SetResource(ByVal pResource As ID3D10ShaderResourceView)
      Sub GetResource(ByRef ppResource As ID3D10ShaderResourceView)
      Sub SetResourceArray(ByRef ppResources As ID3D10ShaderResourceView, ByVal Offset As Long, ByVal Count As Long)
      Sub GetResourceArray(ByRef ppResources As ID3D10ShaderResourceView, ByVal Offset As Long, ByVal Count As Long)
  End Interface

  ' ID3D10EffectRenderTargetViewVariable
  [InterfaceId("28CA0CC3-C2C9-40bb-B57F-67B737122B17")]
  [OleAutomation(False)]
  Interface ID3D10EffectRenderTargetViewVariable Extends ID3D10EffectVariable
      Sub SetRenderTarget(ByVal pResource As ID3D10RenderTargetView)
      Sub GetRenderTarget(ByRef ppResource As ID3D10RenderTargetView)
      Sub SetRenderTargetArray(ByRef ppResources As ID3D10RenderTargetView, ByVal Offset As Long, ByVal Count As Long)
      Sub GetRenderTargetArray(ByRef ppResources As ID3D10RenderTargetView, ByVal Offset As Long, ByVal Count As Long)
  End Interface

  ' ID3D10EffectDepthStencilViewVariable
  [InterfaceId("3E02C918-CC79-4985-B622-2D92AD701623")]
  [OleAutomation(False)]
   Interface ID3D10EffectDepthStencilViewVariable Extends ID3D10EffectVariable
      Sub SetDepthStencil(ByVal pResource As ID3D10DepthStencilView)
      Sub GetDepthStencil(ByRef ppResource As ID3D10DepthStencilView)
      Sub SetDepthStencilArray(ByRef ppResources As ID3D10DepthStencilView, ByVal Offset As Long, ByVal Count As Long)
      Sub GetDepthStencilArray(ByRef ppResources As ID3D10DepthStencilView, ByVal Offset As Long, ByVal Count As Long)
  End Interface

  ' ID3D10EffectConstantBuffer
  [InterfaceId("56648F4D-CC8B-4444-A5AD-B5A3D76E91B3")]
  [OleAutomation(False)]
  Interface ID3D10EffectConstantBuffer Extends ID3D10EffectVariable
      Sub SetConstantBuffer(ByVal pConstantBuffer As ID3D10Buffer)
      Sub GetConstantBuffer(ByRef ppConstantBuffer As ID3D10Buffer)
      Sub SetTextureBuffer(ByVal pTextureBuffer As ID3D10ShaderResourceView)
      Sub GetTextureBuffer(ByRef ppTextureBuffer As ID3D10ShaderResourceView)
  End Interface
  
  ' ID3D10EffectShaderVariable
  [InterfaceId("80849279-C799-4797-8C33-0407A07D9E06")]
  [OleAutomation(False)]
  Interface ID3D10EffectShaderVariable Extends ID3D10EffectVariable
      Sub GetShaderDesc(ByVal ShaderIndex As Long, ByRef pDesc As D3D10_EFFECT_SHADER_DESC)
      Sub GetVertexShader(ByVal ShaderIndex As Long, ByRef ppVS As ID3D10VertexShader)
      Sub GetGeometryShader(ByVal ShaderIndex As Long, ByRef ppGS As ID3D10GeometryShader)
      Sub GetPixelShader(ByVal ShaderIndex As Long, ByRef ppPS As ID3D10PixelShader)
      Sub GetInputSignatureElementDesc(ByVal ShaderIndex As Long, ByVal Element As Long, ByRef pDesc As D3D10_SIGNATURE_PARAMETER_DESC)
      Sub GetOutputSignatureElementDesc(ByVal ShaderIndex As Long, ByVal Element As Long, ByRef pDesc As D3D10_SIGNATURE_PARAMETER_DESC)
  End Interface

  ' ID3D10EffectBlendVariable
  [InterfaceId("1FCD2294-DF6D-4eae-86B3-0E9160CFB07B")]
  [OleAutomation(False)]
   Interface ID3D10EffectBlendVariable Extends ID3D10EffectVariable
      Sub GetBlendState(ByVal Index As Long, ByRef ppBlendState As ID3D10BlendState)
      Sub GetBackingStore(ByVal Index As Long, ByRef pBlendDesc As D3D10_BLEND_DESC)
  End Interface

  ' ID3D10EffectDepthStencilVariable
  [InterfaceId("AF482368-330A-46a5-9A5C-01C71AF24C8D")]
  [OleAutomation(False)]
   Interface ID3D10EffectDepthStencilVariable Extends ID3D10EffectVariable
      Sub GetDepthStencilState(ByVal Index As Long, ByRef ppDepthStencilState As ID3D10DepthStencilState)
      Sub GetBackingStore(ByVal Index As Long, ByRef pDepthStencilDesc As D3D10_DEPTH_STENCIL_DESC)
  End Interface

  ' ID3D10EffectRasterizerVariable
  [InterfaceId("21AF9F0E-4D94-4ea9-9785-2CB76B8C0B34")]
  [OleAutomation(False)]
   Interface ID3D10EffectRasterizerVariable Extends ID3D10EffectVariable
      Sub GetRasterizerState(ByVal Index As Long, ByRef ppRasterizerState As ID3D10RasterizerState)
      Sub GetBackingStore(ByVal Index As Long, ByRef pRasterizerDesc As D3D10_RASTERIZER_DESC)
  End Interface

  ' ID3D10EffectSamplerVariable
  [InterfaceId("6530D5C7-07E9-4271-A418-E7CE4BD1E480")]
  [OleAutomation(False)]
   Interface ID3D10EffectSamplerVariable Extends ID3D10EffectVariable
      Sub GetSampler(ByVal Index As Long, ByRef ppSampler As ID3D10SamplerState)
      Sub GetBackingStore(ByVal Index As Long, ByRef pSamplerDesc As D3D10_SAMPLER_DESC)
  End Interface
  
  [InterfaceId("5CFBEB89-1A06-46e0-B282-E3F9BFA36A54")]
  [OleAutomation(False)]
   Interface ID3D10EffectPass Extends Nothing
      [PreserveSig] Function IsValid() As BOOL
      Sub GetDesc(ByRef pDesc As D3D10_PASS_DESC)
    
      Sub GetVertexShaderDesc(ByRef pDesc As D3D10_PASS_SHADER_DESC)
      Sub GetGeometryShaderDesc(ByRef pDesc As D3D10_PASS_SHADER_DESC)
      Sub GetPixelShaderDesc(ByRef pDesc As D3D10_PASS_SHADER_DESC)
    
      [PreserveSig] Function GetAnnotationByIndex(ByVal Index As Long) As ID3D10EffectVariable
      [PreserveSig] Function GetAnnotationByName(ByVal Name As LongPtr) As ID3D10EffectVariable
    
      Sub Apply(ByVal Flags As Long)
    
      Sub ComputeStateBlockMask(ByRef pStateBlockMask As D3D10_STATE_BLOCK_MASK)
  End Interface
  
  ' ID3D10EffectTechnique
  [InterfaceId("DB122CE8-D1C9-4292-B237-24ED3DE8B175")]
  [OleAutomation(False)]
   Interface ID3D10EffectTechnique Extends Nothing
      [PreserveSig] Function IsValid() As BOOL
      Sub GetDesc(ByRef pDesc As D3D10_TECHNIQUE_DESC)
    
      [PreserveSig] Function GetAnnotationByIndex(ByVal Index As Long) As ID3D10EffectVariable
      [PreserveSig] Function GetAnnotationByName(ByVal Name As LongPtr) As ID3D10EffectVariable
    
      [PreserveSig] Function GetPassByIndex(ByVal Index As Long) As ID3D10EffectPass
      [PreserveSig] Function GetPassByName(ByVal Name As LongPtr) As ID3D10EffectPass
    
      Sub ComputeStateBlockMask(ByRef pStateBlockMask As D3D10_STATE_BLOCK_MASK)
  End Interface

  ' ID3D10Effect
  [InterfaceId("51B0CA8B-EC0B-4519-870D-8EE1CB5017C7")]
  [OleAutomation(False)]
   Interface ID3D10Effect Extends IUnknown
      [PreserveSig] Function IsValid() As BOOL
      [PreserveSig] Function IsPool() As BOOL

      Sub GetDevice(ByRef ppDevice As ID3D10Device)
    
      Sub GetDesc(ByRef pDesc As D3D10_EFFECT_DESC)
    
      [PreserveSig] Function GetConstantBufferByIndex(ByVal Index As Long) As ID3D10EffectConstantBuffer
      [PreserveSig] Function GetConstantBufferByName(ByVal Name As LongPtr) As ID3D10EffectConstantBuffer
    
      [PreserveSig] Function GetVariableByIndex(ByVal Index As Long) As ID3D10EffectVariable
      [PreserveSig] Function GetVariableByName(ByVal Name As LongPtr) As ID3D10EffectVariable
      [PreserveSig] Function GetVariableBySemantic(ByVal Semantic As LongPtr) As ID3D10EffectVariable
    
      [PreserveSig] Function GetTechniqueByIndex(ByVal Index As Long) As ID3D10EffectTechnique
      [PreserveSig] Function GetTechniqueByName(ByVal Name As LongPtr) As ID3D10EffectTechnique
    
      Sub Optimize()
      [PreserveSig] Function IsOptimized() As BOOL
  End Interface
  
  ' ID3D10EffectPool
  [InterfaceId("9537AB04-3250-412e-8213-FCD2F8677933")]
  [OleAutomation(False)]
  Interface ID3D10EffectPool Extends IUnknown
      [PreserveSig] Function AsEffect() As ID3D10Effect
  End Interface
  
  
  [InterfaceId("EDAD8D99-8A35-4d6d-8566-2EA276CDE161")]
  [OleAutomation(False)]
   Interface ID3D10BlendState1 Extends ID3D10BlendState
      Sub GetDesc1(pDesc As D3D10_BLEND_DESC1)
  End Interface
      
  [InterfaceId("9B7E4C87-342C-4106-A19F-4F2704F689F0")]
  [OleAutomation(False)]
   Interface ID3D10ShaderResourceView1 Extends ID3D10ShaderResourceView
      Sub GetDesc1(pDesc As D3D10_SHADER_RESOURCE_VIEW_DESC1)
  End Interface
       
  [InterfaceId("9B7E4C8F-342C-4106-A19F-4F2704F689F0")]
  [OleAutomation(False)]
   Interface ID3D10Device1 Extends ID3D10Device
      Sub CreateShaderResourceView1(ByVal pResource As ID3D10Resource, ByRef pDesc As D3D10_SHADER_RESOURCE_VIEW_DESC1, ByRef ppSRView As ID3D10ShaderResourceView1)
      Sub CreateBlendState1(ByRef pBlendStateDesc As D3D10_BLEND_DESC1, ByRef ppBlendState As ID3D10BlendState1)
      [PreserveSig] Function GetFeatureLevel() As D3D10_FEATURE_LEVEL1
  End Interface
       
  [InterfaceId("C3457783-A846-47CE-9520-CEA6F66E7447")]
  [OleAutomation(False)]
   Interface ID3D10ShaderReflection1 Extends IUnknown

      Sub GetDesc(ByRef pDesc As D3D10_SHADER_DESC)
    
      [PreserveSig] Function GetConstantBufferByIndex(ByVal Index As Long) As ID3D10ShaderReflectionConstantBuffer
      [PreserveSig] Function GetConstantBufferByName(ByVal Name As LongPtr) As ID3D10ShaderReflectionConstantBuffer
    
      Sub GetResourceBindingDesc(ByVal ResourceIndex As Long, ByRef pDesc As D3D10_SHADER_INPUT_BIND_DESC)
    
      Sub GetInputParameterDesc(ByVal ParameterIndex As Long, ByRef pDesc As D3D10_SIGNATURE_PARAMETER_DESC)
      Sub GetOutputParameterDesc(ByVal ParameterIndex As Long, ByRef pDesc As D3D10_SIGNATURE_PARAMETER_DESC)

      [PreserveSig] Function GetVariableByName(ByVal Name As LongPtr) As ID3D10ShaderReflectionVariable

      Sub GetResourceBindingDescByName(ByVal Name As LongPtr, ByRef pDesc As D3D10_SHADER_INPUT_BIND_DESC)

      Sub GetMovInstructionCount(ByRef pCount As Long)
      Sub GetMovcInstructionCount(ByRef pCount As Long)
      Sub GetConversionInstructionCount(ByRef pCount As Long)
      Sub GetBitwiseInstructionCount(ByRef pCount As Long)
    
      Sub GetGSInputPrimitive(ByRef pPrim As D3D_PRIMITIVE)
      Sub IsLevel9Shader(ByRef pbLevel9Shader As BOOL)
      Sub IsSampleFrequencyShader(ByRef pbSampleFrequency As BOOL)
  End Interface
  
  ' ID3D10Debug
  [InterfaceId("9B7E4E01-342C-4106-A19F-4F2704F689F0")]
  [OleAutomation(False)]
  Interface ID3D10Debug Extends IUnknown
      Sub SetFeatureMask(ByVal Mask As D3D10DebugFeatureFlags)
      [PreserveSig] Function GetFeatureMask() As D3D10DebugFeatureFlags
      Sub SetPresentPerRenderOpDelay(ByVal Milliseconds As Long)
      [PreserveSig] Function GetPresentPerRenderOpDelay() As Long
      Sub SetSwapChain(ByVal pSwapChain As IDXGISwapChain)
      Sub GetSwapChain(ByRef ppSwapChain As IDXGISwapChain)
      Sub Validate()
  End Interface

  ' ID3D10SwitchToRef
  [InterfaceId("9B7E4E02-342C-4106-A19F-4F2704F689F0")]
  [OleAutomation(False)]
  Interface ID3D10SwitchToRef Extends IUnknown
      [PreserveSig] Function SetUseRef(ByVal UseRef As BOOL) As BOOL
      [PreserveSig] Function GetUseRef() As BOOL
  End Interface
  
  ' ID3D10InfoQueue
  [InterfaceId("1b940b17-2642-4d1f-ab1f-b99bad0c395f")]
  [OleAutomation(False)]
  Interface ID3D10InfoQueue Extends IUnknown
      '=========================================================================
      ' Methods for configuring how much data is stored in the queue.

      ' SetMessageCountLimit()
      ' This sets how many messages are stored.  When the queue is full,
      ' new messages coming in push old messages out.
      ' Passing -1 to SetMessageCountLimit means the queue has
      ' unlimited size (go until out of memory or ClearStoredMessages()).
      ' The default message count size is
      ' D3D10_INFO_QUEUE_DEFAULT_MESSAGE_COUNT_LIMIT
      ' Returns S_OK or E_INVALIDARG.
      Sub SetMessageCountLimit(ByVal MessageCountLimit As LongLong)

      ' ClearStoredMessages
      [PreserveSig] Sub ClearStoredMessages()

      '=========================================================================
      ' Methods for retrieving data or statistics from the queue.

      ' GetMessage()
      ' Retrieves messages, one at a time, from the queue which pass any
      ' retrieval filter currently defined.  If there is no retrieval filter,
      ' all messages can be retrieved.
      ' The MessageIndex parameter is a 0 based index into the results passing
      ' the filter.  The number of results is returned by
      ' GetNumStoredMessagesAllowedByRetrievalFilter().
      '
      ' Note this does not remove the message from the queue.
      '
      ' pMessageByteLength inputs the size of the buffer passed in via
      ' pMessage, and outputs the size of the message.  pMessage can be NULL
      ' when the size of the required buffer is being queried (return S_FALSE).
      '
      ' NOTE: The returned buffer pMessage is NOT just the size of D3D10_MESSAGE,
      ' it includes extra memory after the D3D10_MESSAGE for storing the string
      ' description, which is pointed to from within D3D10_MESSAGE.  Therefore
      ' applications should check the size needed for pMessage as described above.
      '
      ' Watch out for thread safety when making consecutive calls first to
      ' determine the buffer size required and then to pass in the buffer and
      ' retrieve the message, and also between calling
      ' GetNumStoredMessagesAllowedByRetrievalFilter() and enumerating through
      ' the results via GetMessagE().
      '
      ' Returns: S_OK, S_FALSE, E_INVALIDARG or E_OUTOFMEMORY.
      Sub GetMessage(ByVal MessageIndex As LongLong, ByRef pMessage As D3D10_MESSAGE, ByRef pMessageByteLength As LongPtr)

    ' GetNumMessagesAllowedByStorageFilter()
    ' Returns how many messages sent to the queue passed
    ' whatever storage filter was active upon receipt of
    ' the message.
    ' This can be a larger value than the message count limit,
    ' returned by GetMessageCountLimit(), since old messages are discarded
    ' when the queue is full to prevent overflow.
    [PreserveSig] Function GetNumMessagesAllowedByStorageFilter() As LongLong

    ' GetNumMessagesDeniedByStorageFilter()
    [PreserveSig] Function GetNumMessagesDeniedByStorageFilter() As LongLong

    ' GetNumStoredMessages()
    ' Returns how many messages are currently stored in the queue.
    [PreserveSig] Function GetNumStoredMessages() As LongLong

    ' GetNumStoredMessagesAllowedByRetrievalFilter()
    ' Returns how many messages that are currently in the queue
    ' pass any retrieval filter that is currently set.
    ' The MessageIndex parameter to GetMessage() indexes
    ' an array of this many results.
    [PreserveSig] Function GetNumStoredMessagesAllowedByRetrievalFilter() As LongLong

    ' GetNumMessagesDiscardedByMessageCountLimit()
    [PreserveSig] Function GetNumMessagesDiscardedByMessageCountLimit() As LongLong

    ' GetMessageCountLimit
    ' This is how many messages can be stored in the queue.
    ' When the queue is full, new messages coming in push old messages out.
    ' -1 means there is no limit.
    [PreserveSig] Function GetMessageCountLimit() As LongLong

'=========================================================================
' Methods for filtering what gets stored in the queue

    ' AddStorageFilterEntries()
    ' Adds to the existing entries at top of stack
    ' Returns: S_OK, E_INVALIDARG or E_OUTOFMEMORY.
    Sub AddStorageFilterEntries(ByRef pFilter As D3D10_INFO_QUEUE_FILTER)

    ' GetStorageFilter()
    ' Gets all entries at top of stack.
    ' The application must allocate the output buffer.  The size required can be
    ' queried by passing null for pFilter and looking at the returned
    ' pFilterByteLength (HRESULT is S_FALSE). Note that D3D10_INFO_QUEUE_FILTER contains
    ' pointers - these will point to locations within the same
    ' contiguous buffer - *pFilterByteLength is the total storage needed
    ' contiguous buffer - *pFilterByteLength is the total storage needed for all
    ' data.  So the application needs to only allocate/free the memory for pFilter.
    ' Returns S_OK, S_FALSE, E_INVALIDARG or E_OUTOFMEMORY
    Sub GetStorageFilter(ByRef pFilter As D3D10_INFO_QUEUE_FILTER, ByRef pFilterByteLength As LongPtr)

    ' ClearStorageFilter()
    ' Clears filter at the top of the stack (if there is one)
    [PreserveSig] Sub ClearStorageFilter()

    ' PushEmptyStorageFilter()
    ' Push an empty storage filter on the stack to allow local filtering changes.
    ' For convenience, this is automatically called by SetStorageFilter()
    ' if the stack is empty.  Thus if the stack is not needed, filters can be
    ' defined without ever bothering to push or pop.
    ' Returns S_OK or E_OUTOFMEMORY
    Sub PushEmptyStorageFilter()

    ' PushCopyOfStorageFilter()
    ' Push a copy of the current filter so that local modifications can be made
    ' starting from what currently exists.
    ' Returns S_OK or E_OUTOFMEMORY
    Sub PushCopyOfStorageFilter()

    ' PushStorageFilter()
    ' Push a filter passed as a parameter onto the stack.  This is
    ' just a helper for calling PushEmptyStorageFilter() followed
    ' by AddStorageFilterEntries()
    ' Returns S_OK, E_INVALIDARG or E_OUTOFMEMORY.
    Sub PushStorageFilter(ByRef pFilter As D3D10_INFO_QUEUE_FILTER)

    ' PopStorageFilter()
    ' Pop the current storage filter off the stack (if there is one)
    [PreserveSig] Sub PopStorageFilter()

    ' GetStorageFilterStackSize()
    [PreserveSig] Function GetStorageFilterStackSize() As Long

    '=========================================================================
    ' Methods for filtering what gets read out of the queue by GetMessage().

    ' AddRetrievalFilterEntries()
    ' Adds to the existing entries at top of stack
    ' Returns: S_OK, E_INVALIDARG or E_OUTOFMEMORY.
    Sub AddRetrievalFilterEntries(ByRef pFilter As D3D10_INFO_QUEUE_FILTER)

' GetRetrievalFilter()
' Gets all entries at top of stack.
   ' The application must allocate the output buffer.  The size required can be
   ' queried by passing null for pFilter and looking at the returned
   ' pFilterByteLength (HRESULT is S_FALSE).  Note that D3D10_INFO_QUEUE_FILTER contains
   ' pointers - these will point to locations within the same
   ' contiguous buffer - *pFilterByteLength is the total storage needed for all
   ' data.  So the application needs to only allocate/free the memory for pFilter.
   ' Returns S_OK, S_FALSE, E_INVALIDARG or E_OUTOFMEMORY
   Sub GetRetrievalFilter(ByRef pFilter As D3D10_INFO_QUEUE_FILTER, ByRef pFilterByteLength As LongPtr)

   ' ClearRetrievalFilter()
   ' Clears filter at the top of the stack (if there is one)
   [PreserveSig] Sub ClearRetrievalFilter()

   ' PushEmptyRetrievalFilter()
   ' Push an empty storage filter on the stack to allow local filtering changes.
   ' For convenience, this is automatically called by SetRetrievalFilter()
   ' if the stack is empty.  Thus if the stack is not needed, filters can be
   ' defined without ever bothering to push or pop.
   ' Returns S_OK or E_OUTOFMEMORY
   Sub PushEmptyRetrievalFilter()

   ' PushCopyOfRetrievalFilter()
   ' Push a copy of the current filter so that local modifications can be made
   ' starting from what currently exists.
   ' Returns S_OK or E_OUTOFMEMORY
   Sub PushCopyOfRetrievalFilter()

   ' PushRetrievalFilter()
   ' Push a filter passed as a parameter onto the stack.  This is
   ' just a helper for calling PushEmptyRetrievalFilter() followed
   ' by AddRetrievalFilterEntries()
   ' Returns S_OK, E_INVALIDARG or E_OUTOFMEMORY.
   Sub PushRetrievalFilter(ByRef pFilter As D3D10_INFO_QUEUE_FILTER)

   ' PopRetrievalFilter()
   ' Pop the current storage filter off the stack (if there is one)
   [PreserveSig] Sub PopRetrievalFilter()

   ' GetRetrievalFilterStackSize()
   [PreserveSig] Function GetRetrievalFilterStackSize() As Long
   '=========================================================================
   '  Methods for adding entries to the queue.

   ' AddMessage()
   ' This is used by D3D10 components to log messages.  Nothing stops
   ' applications from calling this, but it isn't particularly useful.
   ' If an application wishes to insert custom strings into the queue,
   ' AddApplicationMessage() below is suggested.  See below.
   '
   ' Returns S_OK, E_INVALIDARG or E_OUTOFMEMORY
   Sub AddMessage(ByVal Category As D3D10_MESSAGE_CATEGORY, ByVal Severity As D3D10_MESSAGE_SEVERITY, ByVal ID As D3D10_MESSAGE_ID, ByVal pDescription As LongPtr)

   ' AddApplicationMessage()
   ' This is a convenience for applications that want
   ' to insert strings of their own into the queue, perhaps to log issues
   ' of its own, or to mark out points in time in the queue.  This
   ' has the same effect as calling AddMessage() above with the
   ' following settings:
   '          Category = D3D10_MESSAGE_CATEGORY_APPLICATION_DEFINED
   '          Severity = <app selects from D3D10_MESSAGE_SEVERITY>
   '          ID       = D3D10_MESSAGE_ID_STRING_FROM_APPLICATION
   '          pDescription = <application provided string>
   '
   ' Returns S_OK, E_INVALIDARG or E_OUTOFMEMORY
   Sub AddApplicationMessage(ByVal Severity As D3D10_MESSAGE_SEVERITY, ByVal pDescription As LongPtr)

   '=========================================================================
   '  Methods for breaking on errors that pass the storage filter.
   Sub SetBreakOnCategory(ByVal Category As D3D10_MESSAGE_CATEGORY, ByVal bEnable As BOOL)
   Sub SetBreakOnSeverity(ByVal Severity As D3D10_MESSAGE_SEVERITY, ByVal bEnable As BOOL)
   Sub SetBreakOnID(ByVal ID As D3D10_MESSAGE_ID, ByVal bEnable As BOOL)
    [PreserveSig] Function GetBreakOnCategory(ByVal Category As D3D10_MESSAGE_CATEGORY) As BOOL
    [PreserveSig] Function GetBreakOnSeverity(ByVal Severity As D3D10_MESSAGE_SEVERITY) As BOOL
    [PreserveSig] Function GetBreakOnID(ByVal ID As D3D10_MESSAGE_ID) As BOOL

    '=========================================================================
    '  Methods for globally muting debug spte from the InfoQueue
    Sub SetMuteDebugOutput(ByVal bMute As BOOL)
    [PreserveSig] Function GetMuteDebugOutput() As BOOL
End Interface

Module wdD3D10

    Public Const D3D10_16BIT_INDEX_STRIP_CUT_VALUE = &Hffff
    Public Const D3D10_32BIT_INDEX_STRIP_CUT_VALUE = &Hffffffff
    Public Const D3D10_8BIT_INDEX_STRIP_CUT_VALUE = &Hff
    Public Const D3D10_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9
    Public Const D3D10_CLIP_OR_CULL_DISTANCE_COUNT = 8
    Public Const D3D10_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2
    Public Const D3D10_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14
    Public Const D3D10_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4
    Public Const D3D10_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32
    Public Const D3D10_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15
    Public Const D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4
    Public Const D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15
    Public Const D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1
    Public Const D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1
    Public Const D3D10_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64
    Public Const D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4
    Public Const D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1
    Public Const D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1
    Public Const D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1
    Public Const D3D10_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32
    Public Const D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1
    Public Const D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128
    Public Const D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1
    Public Const D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1
    Public Const D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128
    Public Const D3D10_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1
    Public Const D3D10_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16
    Public Const D3D10_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1
    Public Const D3D10_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1
    Public Const D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT = 16
    Public Const D3D10_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32
    Public Const D3D10_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4
    Public Const D3D10_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32
    Public Const D3D10_COMMONSHADER_TEMP_REGISTER_COUNT = 4096
    Public Const D3D10_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3
    Public Const D3D10_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3
    Public Const D3D10_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10
    Public Const D3D10_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = -10
    Public Const D3D10_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = -8
    Public Const D3D10_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7
    Public Const D3D10_DEFAULT_BLEND_FACTOR_ALPHA  As Single = (1.0!)
    Public Const D3D10_DEFAULT_BLEND_FACTOR_BLUE  As Single = (1.0!)
    Public Const D3D10_DEFAULT_BLEND_FACTOR_GREEN  As Single = (1.0!)
    Public Const D3D10_DEFAULT_BLEND_FACTOR_RED  As Single = (1.0!)
    Public Const D3D10_DEFAULT_BORDER_COLOR_COMPONENT  As Single = (0.0!)
    Public Const D3D10_DEFAULT_DEPTH_BIAS = 0
    Public Const D3D10_DEFAULT_DEPTH_BIAS_CLAMP  As Single = (0.0!)
    Public Const D3D10_DEFAULT_MAX_ANISOTROPY  As Single = (16.0!)
    Public Const D3D10_DEFAULT_MIP_LOD_BIAS  As Single = (0.0!)
    Public Const D3D10_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0
    Public Const D3D10_DEFAULT_SAMPLE_MASK = &Hffffffff
    Public Const D3D10_DEFAULT_SCISSOR_ENDX = 0
    Public Const D3D10_DEFAULT_SCISSOR_ENDY = 0
    Public Const D3D10_DEFAULT_SCISSOR_STARTX = 0
    Public Const D3D10_DEFAULT_SCISSOR_STARTY = 0
    Public Const D3D10_DEFAULT_SLOPE_SCALED_DEPTH_BIAS  As Single = (0.0!)
    Public Const D3D10_DEFAULT_STENCIL_READ_MASK = &Hff
    Public Const D3D10_DEFAULT_STENCIL_REFERENCE = 0
    Public Const D3D10_DEFAULT_STENCIL_WRITE_MASK = &Hff
    Public Const D3D10_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = 0
    Public Const D3D10_DEFAULT_VIEWPORT_HEIGHT = 0
    Public Const D3D10_DEFAULT_VIEWPORT_MAX_DEPTH  As Single = (0.0!)
    Public Const D3D10_DEFAULT_VIEWPORT_MIN_DEPTH  As Single = (0.0!)
    Public Const D3D10_DEFAULT_VIEWPORT_TOPLEFTX = 0
    Public Const D3D10_DEFAULT_VIEWPORT_TOPLEFTY = 0
    Public Const D3D10_DEFAULT_VIEWPORT_WIDTH = 0
    Public Const D3D10_FLOAT16_FUSED_TOLERANCE_IN_ULP  As Single = (0.6!)
    Public Const D3D10_FLOAT32_MAX  As Single = (3.402823466e+38!)
    Public Const D3D10_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP  As Single = (0.6!)
    Public Const D3D10_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR  As Single = (2.4!)
    Public Const D3D10_FLOAT_TO_SRGB_EXPONENT_NUMERATOR  As Single = (1.0!)
    Public Const D3D10_FLOAT_TO_SRGB_OFFSET  As Single = (0.055!)
    Public Const D3D10_FLOAT_TO_SRGB_SCALE_1  As Single = (12.92!)
    Public Const D3D10_FLOAT_TO_SRGB_SCALE_2  As Single = (1.055!)
    Public Const D3D10_FLOAT_TO_SRGB_THRESHOLD  As Single = (0.0031308!)
    Public Const D3D10_FTOI_INSTRUCTION_MAX_INPUT  As Single = (2147483647.999!)
    Public Const D3D10_FTOI_INSTRUCTION_MIN_INPUT  As Single = (-2147483648.999!)
    Public Const D3D10_FTOU_INSTRUCTION_MAX_INPUT  As Single = (4294967295.999!)
    Public Const D3D10_FTOU_INSTRUCTION_MIN_INPUT  As Single = (0.0!)
    Public Const D3D10_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = 1
    Public Const D3D10_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = 32
    Public Const D3D10_GS_INPUT_PRIM_CONST_REGISTER_COUNT = 1
    Public Const D3D10_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = 2
    Public Const D3D10_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = 1
    Public Const D3D10_GS_INPUT_REGISTER_COMPONENTS = 4
    Public Const D3D10_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32
    Public Const D3D10_GS_INPUT_REGISTER_COUNT = 16
    Public Const D3D10_GS_INPUT_REGISTER_READS_PER_INST = 2
    Public Const D3D10_GS_INPUT_REGISTER_READ_PORTS = 1
    Public Const D3D10_GS_INPUT_REGISTER_VERTICES = 6
    Public Const D3D10_GS_OUTPUT_ELEMENTS = 32
    Public Const D3D10_GS_OUTPUT_REGISTER_COMPONENTS = 4
    Public Const D3D10_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32
    Public Const D3D10_GS_OUTPUT_REGISTER_COUNT = 32
    Public Const D3D10_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = 0
    Public Const D3D10_IA_DEFAULT_PRIMITIVE_TOPOLOGY = 0
    Public Const D3D10_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = 0
    Public Const D3D10_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = 1
    Public Const D3D10_IA_INSTANCE_ID_BIT_COUNT = 32
    Public Const D3D10_IA_INTEGER_ARITHMETIC_BIT_COUNT = 32
    Public Const D3D10_IA_PRIMITIVE_ID_BIT_COUNT = 32
    Public Const D3D10_IA_VERTEX_ID_BIT_COUNT = 32
    Public Const D3D10_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 16
    Public Const D3D10_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 64
    Public Const D3D10_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 16
    Public Const D3D10_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = &Hffffffff
    Public Const D3D10_INTEGER_DIVIDE_BY_ZERO_REMAINDER = &Hffffffff
    Public Const D3D10_LINEAR_GAMMA  As Single = (1.0!)
    Public Const D3D10_MAX_BORDER_COLOR_COMPONENT  As Single = (1.0!)
    Public Const D3D10_MAX_DEPTH  As Single = (1.0!)
    Public Const D3D10_MAX_MAXANISOTROPY = 16
    Public Const D3D10_MAX_MULTISAMPLE_SAMPLE_COUNT = 32
    Public Const D3D10_MAX_POSITION_VALUE  As Single = (3.402823466e+34!)
    Public Const D3D10_MAX_TEXTURE_DIMENSION_2_TO_EXP = 17
    Public Const D3D10_MIN_BORDER_COLOR_COMPONENT  As Single = (0.0!)
    Public Const D3D10_MIN_DEPTH  As Single = (0.0!)
    Public Const D3D10_MIN_MAXANISOTROPY = 0
    Public Const D3D10_MIP_LOD_BIAS_MAX  As Single = (15.99!)
    Public Const D3D10_MIP_LOD_BIAS_MIN  As Single = (-16.0!)
    Public Const D3D10_MIP_LOD_FRACTIONAL_BIT_COUNT = 6
    Public Const D3D10_MIP_LOD_RANGE_BIT_COUNT = 8
    Public Const D3D10_MULTISAMPLE_ANTIALIAS_LINE_WIDTH  As Single = (1.4!)
    Public Const D3D10_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = 0
    Public Const D3D10_PIXEL_ADDRESS_RANGE_BIT_COUNT = 13
    Public Const D3D10_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15
    Public Const D3D10_PS_FRONTFACING_DEFAULT_VALUE = &HFFFFFFFF
    Public Const D3D10_PS_FRONTFACING_FALSE_VALUE = &H00000000
    Public Const D3D10_PS_FRONTFACING_TRUE_VALUE = &HFFFFFFFF
    Public Const D3D10_PS_INPUT_REGISTER_COMPONENTS = 4
    Public Const D3D10_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32
    Public Const D3D10_PS_INPUT_REGISTER_COUNT = 32
    Public Const D3D10_PS_INPUT_REGISTER_READS_PER_INST = 2
    Public Const D3D10_PS_INPUT_REGISTER_READ_PORTS = 1
    Public Const D3D10_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT  As Single = (0.0!)
    Public Const D3D10_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1
    Public Const D3D10_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32
    Public Const D3D10_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1
    Public Const D3D10_PS_OUTPUT_REGISTER_COMPONENTS = 4
    Public Const D3D10_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32
    Public Const D3D10_PS_OUTPUT_REGISTER_COUNT = 8
    Public Const D3D10_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT  As Single = (0.5!)
    Public Const D3D10_REQ_BLEND_OBJECT_COUNT_PER_CONTEXT = 4096
    Public Const D3D10_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27
    Public Const D3D10_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096
    Public Const D3D10_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_CONTEXT = 4096
    Public Const D3D10_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32
    Public Const D3D10_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32
    Public Const D3D10_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 8192
    Public Const D3D10_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024
    Public Const D3D10_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096
    Public Const D3D10_REQ_MAXANISOTROPY = 16
    Public Const D3D10_REQ_MIP_LEVELS = 14
    Public Const D3D10_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048
    Public Const D3D10_REQ_RASTERIZER_OBJECT_COUNT_PER_CONTEXT = 4096
    Public Const D3D10_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 8192
    Public Const D3D10_REQ_RESOURCE_SIZE_IN_MEGABYTES = 128
    Public Const D3D10_REQ_RESOURCE_VIEW_COUNT_PER_CONTEXT_2_TO_EXP = 20
    Public Const D3D10_REQ_SAMPLER_OBJECT_COUNT_PER_CONTEXT = 4096
    Public Const D3D10_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 512
    Public Const D3D10_REQ_TEXTURE1D_U_DIMENSION = 8192
    Public Const D3D10_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 512
    Public Const D3D10_REQ_TEXTURE2D_U_OR_V_DIMENSION = 8192
    Public Const D3D10_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048
    Public Const D3D10_REQ_TEXTURECUBE_DIMENSION = 8192
    Public Const D3D10_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0
    Public Const D3D10_SHADER_MAJOR_VERSION = 4
    Public Const D3D10_SHADER_MINOR_VERSION = 0
    Public Const D3D10_SHIFT_INSTRUCTION_PAD_VALUE = 0
    Public Const D3D10_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5
    Public Const D3D10_SIMULTANEOUS_RENDER_TARGET_COUNT = 8
    Public Const D3D10_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048
    Public Const D3D10_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 256
    Public Const D3D10_SO_BUFFER_SLOT_COUNT = 4
    Public Const D3D10_SO_DDI_REGISTER_INDEX_DENOTING_GAP = &Hffffffff
    Public Const D3D10_SO_MULTIPLE_BUFFER_ELEMENTS_PER_BUFFER = 1
    Public Const D3D10_SO_SINGLE_BUFFER_COMPONENT_LIMIT = 64
    Public Const D3D10_SRGB_GAMMA  As Single = (2.2!)
    Public Const D3D10_SRGB_TO_FLOAT_DENOMINATOR_1  As Single = (12.92!)
    Public Const D3D10_SRGB_TO_FLOAT_DENOMINATOR_2  As Single = (1.055!)
    Public Const D3D10_SRGB_TO_FLOAT_EXPONENT  As Single = (2.4!)
    Public Const D3D10_SRGB_TO_FLOAT_OFFSET  As Single = (0.055!)
    Public Const D3D10_SRGB_TO_FLOAT_THRESHOLD  As Single = (0.04045!)
    Public Const D3D10_SRGB_TO_FLOAT_TOLERANCE_IN_ULP  As Single = (0.5!)
    Public Const D3D10_STANDARD_COMPONENT_BIT_COUNT = 32
    Public Const D3D10_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64
    Public Const D3D10_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4
    Public Const D3D10_STANDARD_PIXEL_COMPONENT_COUNT = 128
    Public Const D3D10_STANDARD_PIXEL_ELEMENT_COUNT = 32
    Public Const D3D10_STANDARD_VECTOR_SIZE = 4
    Public Const D3D10_STANDARD_VERTEX_ELEMENT_COUNT = 16
    Public Const D3D10_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64
    Public Const D3D10_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8
    Public Const D3D10_SUBTEXEL_FRACTIONAL_BIT_COUNT = 6
    Public Const D3D10_TEXEL_ADDRESS_RANGE_BIT_COUNT = 18
    Public Const D3D10_UNBOUND_MEMORY_ACCESS_RESULT = 0
    Public Const D3D10_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15
    Public Const D3D10_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16
    Public Const D3D10_VIEWPORT_BOUNDS_MAX = 16383
    Public Const D3D10_VIEWPORT_BOUNDS_MIN = -16384
    Public Const D3D10_VS_INPUT_REGISTER_COMPONENTS = 4
    Public Const D3D10_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32
    Public Const D3D10_VS_INPUT_REGISTER_COUNT = 16
    Public Const D3D10_VS_INPUT_REGISTER_READS_PER_INST = 2
    Public Const D3D10_VS_INPUT_REGISTER_READ_PORTS = 1
    Public Const D3D10_VS_OUTPUT_REGISTER_COMPONENTS = 4
    Public Const D3D10_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32
    Public Const D3D10_VS_OUTPUT_REGISTER_COUNT = 16
    Public Const D3D10_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = 10
    Public Const D3D10_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 25
    Public Const D3D10_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = 25
    Public Const D3D_MAJOR_VERSION = 10
    Public Const D3D_MINOR_VERSION = 0
    Public Const D3D_SPEC_DATE_DAY = 8
    Public Const D3D_SPEC_DATE_MONTH = 8
    Public Const D3D_SPEC_DATE_YEAR = 2006
    
    Public Const  _FACD3D10 = &H879
    Public Const  _FACD3D10DEBUG = _FACD3D10 + 1
    
    Public Enum D3D10_INPUT_CLASSIFICATION
        D3D10_INPUT_PER_VERTEX_DATA = 0
        D3D10_INPUT_PER_INSTANCE_DATA = 1
    End Enum
    
    Public Const D3D10_APPEND_ALIGNED_ELEMENT = &Hffffffff
    

    Public Type D3D10_INPUT_ELEMENT_DESC
        semanticName As LongPtr
        semanticIndex As Long
        Format As DXGI_FORMAT
        inputSlot As Long
        alignedByteOffset As Long
        InputSlotClass As D3D10_INPUT_CLASSIFICATION
        InstanceDataStepRate As Long
    End Type

    Public Enum D3D10_FILL_MODE
        D3D10_FILL_WIREFRAME = 2
        D3D10_FILL_SOLID = 3
    End Enum

    ' Alias D3D10_PRIMITIVE_TOPOLOGY As D3D_PRIMITIVE_TOPOLOGY
    ' Alias D3D10_PRIMITIVE As D3D_PRIMITIVE


    Public Enum D3D10_CULL_MODE
        D3D10_CULL_NONE = 1
        D3D10_CULL_FRONT = 2
        D3D10_CULL_BACK = 3
    End Enum

    Public Type D3D10_SO_DECLARATION_ENTRY
        semanticName As LongPtr
        semanticIndex As Long
        StartComponent As Byte
        ComponentCount As Byte
        OutputSlot As Byte
    End Type

    Public Type D3D10_VIEWPORT
        TopLeftX As Long
        TopLeftY As Long
        width As Long
        Height As Long
        MinDepth As Single
        MaxDepth As Single
    End Type

    Public Enum D3D10_RESOURCE_DIMENSION
        D3D10_RESOURCE_DIMENSION_UNKNOWN = 0
        D3D10_RESOURCE_DIMENSION_BUFFER = 1
        D3D10_RESOURCE_DIMENSION_TEXTURE1D = 2
        D3D10_RESOURCE_DIMENSION_TEXTURE2D = 3
        D3D10_RESOURCE_DIMENSION_TEXTURE3D = 4
    End Enum

    Public Enum D3D10_DSV_DIMENSION
        D3D10_DSV_DIMENSION_UNKNOWN = 0
        D3D10_DSV_DIMENSION_TEXTURE1D = 1
        D3D10_DSV_DIMENSION_TEXTURE1DARRAY = 2
        D3D10_DSV_DIMENSION_TEXTURE2D = 3
        D3D10_DSV_DIMENSION_TEXTURE2DARRAY = 4
        D3D10_DSV_DIMENSION_TEXTURE2DMS = 5
        D3D10_DSV_DIMENSION_TEXTURE2DMSARRAY = 6
    End Enum

    Public Enum D3D10_RTV_DIMENSION
        D3D10_RTV_DIMENSION_UNKNOWN = 0
        D3D10_RTV_DIMENSION_BUFFER = 1
        D3D10_RTV_DIMENSION_TEXTURE1D = 2
        D3D10_RTV_DIMENSION_TEXTURE1DARRAY = 3
        D3D10_RTV_DIMENSION_TEXTURE2D = 4
        D3D10_RTV_DIMENSION_TEXTURE2DARRAY = 5
        D3D10_RTV_DIMENSION_TEXTURE2DMS = 6
        D3D10_RTV_DIMENSION_TEXTURE2DMSARRAY = 7
        D3D10_RTV_DIMENSION_TEXTURE3D = 8
    End Enum

    Public Enum D3D10_USAGE
        D3D10_USAGE_DEFAULT = 0
        D3D10_USAGE_IMMUTABLE = 1
        D3D10_USAGE_DYNAMIC = 2
        D3D10_USAGE_STAGING = 3
    End Enum
    
    Public Enum D3D10_BIND_FLAG
        D3D10_BIND_VERTEX_BUFFER = &H00000001
        D3D10_BIND_INDEX_BUFFER = &H00000002
        D3D10_BIND_CONSTANT_BUFFER = &H00000004
        D3D10_BIND_SHADER_RESOURCE = &H00000008
        D3D10_BIND_STREAM_OUTPUT = &H00000010
        D3D10_BIND_RENDER_TARGET = &H00000020
        D3D10_BIND_DEPTH_STENCIL = &H00000040
    End Enum
    
    Public Enum D3D10_CPU_ACCESS_FLAG
        D3D10_CPU_ACCESS_WRITE = &H00010000
        D3D10_CPU_ACCESS_READ = &H00020000
    End Enum
    
    Public Enum D3D10_RESOURCE_MISC_FLAG
        D3D10_RESOURCE_MISC_GENERATE_MIPS = &H00000001
        D3D10_RESOURCE_MISC_SHARED = &H00000002
        D3D10_RESOURCE_MISC_TEXTURECUBE = &H00000004
        D3D10_RESOURCE_MISC_SHARED_KEYEDMUTEX = &H00000010
        D3D10_RESOURCE_MISC_GDI_COMPATIBLE = &H00000020
    End Enum
    
    Public Enum D3D10_MAP
        D3D10_MAP_READ = 1
        D3D10_MAP_WRITE = 2
        D3D10_MAP_READ_WRITE = 3
        D3D10_MAP_WRITE_DISCARD = 4
        D3D10_MAP_WRITE_NO_OVERWRITE = 5
    End Enum
    
    Public Enum D3D10_MAP_FLAG
        D3D10_MAP_FLAG_DO_NOT_WAIT = &H00100000
    End Enum
    
    Public Enum D3D10_RAISE_FLAG
        D3D10_RAISE_FLAG_DRIVER_INTERNAL_ERROR = &H1
    End Enum
    
    Public Enum D3D10_CLEAR_FLAG
        D3D10_CLEAR_DEPTH = &H01
        D3D10_CLEAR_STENCIL = &H02
    End Enum
    
    Public Type D3D10_RECT
        Left As Long
        Top As Long
        Right As Long
        Bottom As Long
    End Type
    'Alias D3D10_RECT As RECT
    
    Public Type D3D10_BOX
        left As Long
        top As Long
        front As Long
        right As Long
        bottom As Long
        back As Long
    End Type
    
    Public Enum D3D10_COMPARISON_FUNC
        D3D10_COMPARISON_NEVER = 1
        D3D10_COMPARISON_LESS = 2
        D3D10_COMPARISON_EQUAL = 3
        D3D10_COMPARISON_LESS_EQUAL = 4
        D3D10_COMPARISON_GREATER = 5
        D3D10_COMPARISON_NOT_EQUAL = 6
        D3D10_COMPARISON_GREATER_EQUAL = 7
        D3D10_COMPARISON_ALWAYS = 8
    End Enum

    Public Enum D3D10_DEPTH_WRITE_MASK
        D3D10_DEPTH_WRITE_MASK_ZERO = 0
        D3D10_DEPTH_WRITE_MASK_ALL = 1
    End Enum

    Public Enum D3D10_STENCIL_OP
        D3D10_STENCIL_OP_KEEP = 1
        D3D10_STENCIL_OP_ZERO = 2
        D3D10_STENCIL_OP_REPLACE = 3
        D3D10_STENCIL_OP_INCR_SAT = 4
        D3D10_STENCIL_OP_DECR_SAT = 5
        D3D10_STENCIL_OP_INVERT = 6
        D3D10_STENCIL_OP_INCR = 7
        D3D10_STENCIL_OP_DECR = 8
    End Enum

    Public Type D3D10_DEPTH_STENCILOP_DESC
        StencilFailOp As D3D10_STENCIL_OP
        StencilDepthFailOp As D3D10_STENCIL_OP
        StencilPassOp As D3D10_STENCIL_OP
        StencilFunc As D3D10_COMPARISON_FUNC
    End Type

    Public Type D3D10_DEPTH_STENCIL_DESC
        DepthEnable As BOOL
        DepthWriteMask As D3D10_DEPTH_WRITE_MASK
        DepthFunc As D3D10_COMPARISON_FUNC
        StencilEnable As BOOL
        StencilReadMask As Byte
        StencilWriteMask As Byte
        FrontFace As D3D10_DEPTH_STENCILOP_DESC
        BackFace As D3D10_DEPTH_STENCILOP_DESC
    End Type
    
    Public Enum D3D10_BLEND
        D3D10_BLEND_ZERO = 1
        D3D10_BLEND_ONE = 2
        D3D10_BLEND_SRC_COLOR = 3 ' PS output oN.rgb (N is current RT being blended)
        D3D10_BLEND_INV_SRC_COLOR = 4 ' 1.0f - PS output oN.rgb
        D3D10_BLEND_SRC_ALPHA = 5 ' PS output oN.a
        D3D10_BLEND_INV_SRC_ALPHA = 6 ' 1.0f - PS output oN.a
        D3D10_BLEND_DEST_ALPHA = 7 ' RT(N).a (N is current RT being blended)
        D3D10_BLEND_INV_DEST_ALPHA = 8 ' 1.0f - RT(N).a
        D3D10_BLEND_DEST_COLOR = 9 ' RT(N).rgb
        D3D10_BLEND_INV_DEST_COLOR = 10 ' 1.0f - RT(N).rgb
        D3D10_BLEND_SRC_ALPHA_SAT = 11 ' (f,f,f,1), f = min(1 - RT(N).a, oN.a)
        '  12 reserved (was BOTHSRCALPHA)
        '  13 reserved (was BOTHSRCALPHA)
        D3D10_BLEND_BLEND_FACTOR = 14
        D3D10_BLEND_INV_BLEND_FACTOR = 15
        D3D10_BLEND_SRC1_COLOR = 16 ' PS output o1.rgb
        D3D10_BLEND_INV_SRC1_COLOR = 17 ' 1.0f - PS output o1.rgb
        D3D10_BLEND_SRC1_ALPHA = 18 ' PS output o1.a
        D3D10_BLEND_INV_SRC1_ALPHA = 19 ' 1.0f - PS output o1.a
    End Enum
    
    Public Enum D3D10_BLEND_OP
        D3D10_BLEND_OP_ADD = 1
        D3D10_BLEND_OP_SUBTRACT = 2
        D3D10_BLEND_OP_REV_SUBTRACT = 3
        D3D10_BLEND_OP_MIN = 4 ' min semantics are like min shader instruction
        D3D10_BLEND_OP_MAX = 5 ' max semantics are like max shader instruction
    End Enum
    
    Public Enum D3D10_COLOR_WRITE_ENABLE
        D3D10_COLOR_WRITE_ENABLE_RED = 1
        D3D10_COLOR_WRITE_ENABLE_GREEN = 2
        D3D10_COLOR_WRITE_ENABLE_BLUE = 4
        D3D10_COLOR_WRITE_ENABLE_ALPHA = 8
        D3D10_COLOR_WRITE_ENABLE_ALL = (D3D10_COLOR_WRITE_ENABLE_RED Or D3D10_COLOR_WRITE_ENABLE_GREEN Or D3D10_COLOR_WRITE_ENABLE_BLUE Or D3D10_COLOR_WRITE_ENABLE_ALPHA)
    End Enum
    
    Public Type D3D10_BLEND_DESC
        AlphaToCoverageEnable As BOOL ' relevant to multisample antialiasing only
        BlendEnable(0 To (D3D10_SIMULTANEOUS_RENDER_TARGET_COUNT - 1)) As BOOL
        SrcBlend As D3D10_BLEND ' same for all RenderTargets
        DestBlend As D3D10_BLEND ' same for all RenderTargets
        BlendOp As D3D10_BLEND_OP ' same for all RenderTargets
        SrcBlendAlpha As D3D10_BLEND ' same for all RenderTargets
        DestBlendAlpha As D3D10_BLEND ' same for all RenderTargets
        BlendOpAlpha As D3D10_BLEND_OP ' same for all RenderTargets
        RenderTargetWriteMask(0 To (D3D10_SIMULTANEOUS_RENDER_TARGET_COUNT - 1)) As Byte
    End Type
    
    Public Type D3D10_RASTERIZER_DESC
        FillMode As D3D10_FILL_MODE
        CullMode As D3D10_CULL_MODE
        FrontCounterClockwise As BOOL
        DepthBias As Long
        DepthBiasClamp As Single
        SlopeScaledDepthBias As Single
        DepthClipEnable As BOOL
        ScissorEnable As BOOL
        MultisampleEnable As BOOL
        AntialiasedLineEnable As BOOL
    End Type
    
    Public Function D3D10CalcSubresource(ByVal MipSlice As Long, ByVal ArraySlice As Long, ByVal MipLevels As Long) As Long
        Return MipSlice + ArraySlice * MipLevels
    End Function
    
    Public Type D3D10_SUBRESOURCE_DATA
        pSysMem As LongPtr
        SysMemPitch As Long
        SysMemSlicePitch As Long
    End Type
    
    Public Type D3D10_BUFFER_DESC
        ByteWidth As Long
        Usage As D3D10_USAGE
        BindFlags As D3D10_BIND_FLAG
        CPUAccessFlags As D3D10_CPU_ACCESS_FLAG
        MiscFlags As D3D10_RESOURCE_MISC_FLAG
    End Type
    
    Public Type D3D10_TEXTURE1D_DESC
        Width As Long
        MipLevels As Long
        ArraySize As Long
        Format As DXGI_FORMAT
        Usage As D3D10_USAGE
        BindFlags As D3D10_BIND_FLAG
        CPUAccessFlags As D3D10_CPU_ACCESS_FLAG
        MiscFlags As D3D10_RESOURCE_MISC_FLAG
    End Type
    
    Public Type D3D10_TEXTURE2D_DESC
        Width As Long
        Height As Long
        MipLevels As Long
        ArraySize As Long
        Format As DXGI_FORMAT
        SampleDesc As DXGI_SAMPLE_DESC
        Usage As D3D10_USAGE
        BindFlags As D3D10_BIND_FLAG
        CPUAccessFlags As D3D10_CPU_ACCESS_FLAG
        MiscFlags As D3D10_RESOURCE_MISC_FLAG
    End Type
    
    Public Type D3D10_MAPPED_TEXTURE2D
        pData As LongPtr
        RowPitch As Long
    End Type
    
    Public Type D3D10_TEXTURE3D_DESC
        Width As Long
        Height As Long
        Depth As Long
        MipLevels As Long
        Format As DXGI_FORMAT
        Usage As D3D10_USAGE
        BindFlags As D3D10_BIND_FLAG
        CPUAccessFlags As D3D10_CPU_ACCESS_FLAG
        MiscFlags As D3D10_RESOURCE_MISC_FLAG
    End Type
    
    Public Type D3D10_MAPPED_TEXTURE3D
        pData As LongPtr
        RowPitch As Long
        DepthPitch As Long
    End Type
    
    Public Enum D3D10_TEXTURECUBE_FACE
        D3D10_TEXTURECUBE_FACE_POSITIVE_X = 0
        D3D10_TEXTURECUBE_FACE_NEGATIVE_X = 1
        D3D10_TEXTURECUBE_FACE_POSITIVE_Y = 2
        D3D10_TEXTURECUBE_FACE_NEGATIVE_Y = 3
        D3D10_TEXTURECUBE_FACE_POSITIVE_Z = 4
        D3D10_TEXTURECUBE_FACE_NEGATIVE_Z = 5
    End Enum
    
    Public Type D3D10_BUFFER_SRV
        ' union
        ' {
            ' UINT FirstElement;
            ' UINT ElementOffset;
        ' };
        ' union
        ' {
            ' UINT NumElements;
            ' UINT ElementWidth; 
        ' };
        FirstOrNumElements As Long
        ElementOffsetOrWidth As Long
    End Type

    Public Type D3D10_TEX1D_SRV
        MostDetailedMip As Long
        MipLevels As Long
    End Type

    Public Type D3D10_TEX1D_ARRAY_SRV
        MostDetailedMip As Long
        MipLevels As Long
        FirstArraySlice As Long
        ArraySize As Long
    End Type

    Public Type D3D10_TEX2D_SRV
        MostDetailedMip As Long
        MipLevels As Long
    End Type

    Public Type D3D10_TEX2D_ARRAY_SRV
        MostDetailedMip As Long
        MipLevels As Long
        FirstArraySlice As Long
        ArraySize As Long
    End Type

    Public Type D3D10_TEX3D_SRV
        MostDetailedMip As Long
        MipLevels As Long
    End Type

    Public Type D3D10_TEXCUBE_SRV
        MostDetailedMip As Long
        MipLevels As Long
    End Type

    Public Type D3D10_TEX2DMS_SRV
        UnusedField_NothingToDefine As Long
    End Type

    Public Type D3D10_TEX2DMS_ARRAY_SRV
        FirstArraySlice As Long
        ArraySize As Long
    End Type

    Public Type D3D10_SHADER_RESOURCE_VIEW_DESC
        Format As DXGI_FORMAT
        ViewDimension As D3D_SRV_DIMENSION
        ' union
        ' {
            ' D3D10_BUFFER_SRV Buffer;
            ' D3D10_TEX1D_SRV Texture1D;
            ' D3D10_TEX1D_ARRAY_SRV Texture1DArray;
            ' D3D10_TEX2D_SRV Texture2D;
            ' D3D10_TEX2D_ARRAY_SRV Texture2DArray;
            ' D3D10_TEX2DMS_SRV Texture2DMS;
            ' D3D10_TEX2DMS_ARRAY_SRV Texture2DMSArray;
            ' D3D10_TEX3D_SRV Texture3D;
            ' D3D10_TEXCUBE_SRV TextureCube;
        ' };
        u(0 To 15) As Byte
    End Type

    Public Type D3D10_BUFFER_RTV
        ' union
        ' {
            ' UINT FirstElement;
            ' UINT ElementOffset;
        ' };
        ' union
        ' {
            ' UINT NumElements;
            ' UINT ElementWidth; 
        ' };
        FirstOrNumElements As Long
        ElementOffsetOrWidth As Long
    End Type

    Public Type D3D10_TEX1D_RTV
        MipSlice As Long
    End Type

    Public Type D3D10_TEX1D_ARRAY_RTV
        MipSlice As Long
        FirstArraySlice As Long
        ArraySize As Long
    End Type

    Public Type D3D10_TEX2D_RTV
        MipSlice As Long
    End Type

    Public Type D3D10_TEX2DMS_RTV
        UnusedField_NothingToDefine As Long
    End Type

    Public Type D3D10_TEX2D_ARRAY_RTV
        MipSlice As Long
        FirstArraySlice As Long
        ArraySize As Long
    End Type

    Public Type D3D10_TEX2DMS_ARRAY_RTV
        FirstArraySlice As Long
        ArraySize As Long
    End Type

    Public Type D3D10_TEX3D_RTV
        MipSlice As Long
        FirstWSlice As Long
        WSize As Long
    End Type

    Public Type D3D10_RENDER_TARGET_VIEW_DESC
        Format As DXGI_FORMAT
        ViewDimension As D3D10_RTV_DIMENSION
        ' union
        ' {
            ' D3D10_BUFFER_RTV Buffer;
            ' D3D10_TEX1D_RTV Texture1D;
            ' D3D10_TEX1D_ARRAY_RTV Texture1DArray;
            ' D3D10_TEX2D_RTV Texture2D;
            ' D3D10_TEX2D_ARRAY_RTV Texture2DArray;
            ' D3D10_TEX2DMS_RTV Texture2DMS;
            ' D3D10_TEX2DMS_ARRAY_RTV Texture2DMSArray;
            ' D3D10_TEX3D_RTV Texture3D;
        ' };
        u(0 To 11) As Byte
    End Type

    Public Type D3D10_TEX1D_DSV
        MipSlice As Long
    End Type

    Public Type D3D10_TEX1D_ARRAY_DSV
        MipSlice As Long
        FirstArraySlice As Long
        ArraySize As Long
    End Type

    Public Type D3D10_TEX2D_DSV
        MipSlice As Long
    End Type

    Public Type D3D10_TEX2D_ARRAY_DSV
        MipSlice As Long
        FirstArraySlice As Long
        ArraySize As Long
    End Type

    Public Type D3D10_TEX2DMS_DSV
        UnusedField_NothingToDefine As Long
    End Type

    Public Type D3D10_TEX2DMS_ARRAY_DSV
        FirstArraySlice As Long
        ArraySize As Long
    End Type

    Public Type D3D10_DEPTH_STENCIL_VIEW_DESC
        Format As DXGI_FORMAT
        ViewDimension As D3D10_DSV_DIMENSION
        ' union
        ' {
            ' D3D10_TEX1D_DSV Texture1D;
            ' D3D10_TEX1D_ARRAY_DSV Texture1DArray;
            ' D3D10_TEX2D_DSV Texture2D;
            ' D3D10_TEX2D_ARRAY_DSV Texture2DArray;
            ' D3D10_TEX2DMS_DSV Texture2DMS;
            ' D3D10_TEX2DMS_ARRAY_DSV Texture2DMSArray;
        ' };
        u(0 To 11) As Byte
    End Type
    
    Public Enum D3D10_FILTER
        '  Bits used in defining enumeration of valid filters:
        '  bits [1:0] - mip: 0 == point, 1 == linear, 2,3 unused
        '  bits [3:2] - mag: 0 == point, 1 == linear, 2,3 unused
        '  bits [5:4] - min: 0 == point, 1 == linear, 2,3 unused
        '  bit  [6]   - aniso
        '  bit  [7]   - comparison
        '  bit  [31]  - mono 1-bit (narrow-purpose filter)
        D3D10_FILTER_MIN_MAG_MIP_POINT = &H00000000
        D3D10_FILTER_MIN_MAG_POINT_MIP_LINEAR = &H00000001
        D3D10_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = &H00000004
        D3D10_FILTER_MIN_POINT_MAG_MIP_LINEAR = &H00000005
        D3D10_FILTER_MIN_LINEAR_MAG_MIP_POINT = &H00000010
        D3D10_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = &H00000011
        D3D10_FILTER_MIN_MAG_LINEAR_MIP_POINT = &H00000014
        D3D10_FILTER_MIN_MAG_MIP_LINEAR = &H00000015
        D3D10_FILTER_ANISOTROPIC = &H00000055
        D3D10_FILTER_COMPARISON_MIN_MAG_MIP_POINT = &H00000080
        D3D10_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = &H00000081
        D3D10_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = &H00000084
        D3D10_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = &H00000085
        D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = &H00000090
        D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = &H00000091
        D3D10_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = &H00000094
        D3D10_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = &H00000095
        D3D10_FILTER_COMPARISON_ANISOTROPIC = &H000000d5
        D3D10_FILTER_TEXT_1BIT = &H80000000 ' Only filter for R1_UNORM format
    End Enum
    
    Public Enum D3D10_FILTER_TYPE
        D3D10_FILTER_TYPE_POINT = 0
        D3D10_FILTER_TYPE_LINEAR = 1
    End Enum
    
    Public Const D3D10_FILTER_TYPE_MASK As Long = &H00000003
    Public Const D3D10_MIN_FILTER_SHIFT As Long = 4
    Public Const D3D10_MAG_FILTER_SHIFT As Long = 2
    Public Const D3D10_MIP_FILTER_SHIFT As Long = 0
    Public Const D3D10_COMPARISON_FILTERING_BIT As Long = &H00000080
    Public Const D3D10_ANISOTROPIC_FILTERING_BIT As Long = &H00000040
    Public Const D3D10_TEXT_1BIT_BIT As Long = &H80000000

    ' Encodes a basic filter (min, mag, mip, comparison)
    Public Function D3D10_ENCODE_BASIC_FILTER(ByVal min As Long, ByVal mag As Long, ByVal mip As Long, ByVal bComparison As Boolean) As D3D10_FILTER
        Return CType(Of D3D10_FILTER)(If(bComparison, D3D10_COMPARISON_FILTERING_BIT, 0&) Or _
                (((min) And D3D10_FILTER_TYPE_MASK) << D3D10_MIN_FILTER_SHIFT) Or _
                (((mag) & D3D10_FILTER_TYPE_MASK) << D3D10_MAG_FILTER_SHIFT) Or _
                (((mip) & D3D10_FILTER_TYPE_MASK) << D3D10_MIP_FILTER_SHIFT))
    End Function

    ' Encodes an anisotropic filter (with comparison flag)
    Public Function D3D10_ENCODE_ANISOTROPIC_FILTER(ByVal bComparison As Boolean) As D3D10_FILTER
        Return CType(Of D3D10_FILTER)(D3D10_ANISOTROPIC_FILTERING_BIT Or _ 
            D3D10_ENCODE_BASIC_FILTER(D3D10_FILTER_TYPE_LINEAR, D3D10_FILTER_TYPE_LINEAR, D3D10_FILTER_TYPE_LINEAR, bComparison))
    End Function

    ' Decodes the MIN filter from a D3D10 filter value
    Public Function D3D10_DECODE_MIN_FILTER(ByVal d3d10Filter As Long) As D3D10_FILTER_TYPE
        Return CType(Of D3D10_FILTER_TYPE)(((d3d10Filter >> D3D10_MIN_FILTER_SHIFT) And D3D10_FILTER_TYPE_MASK))
    End Function

    ' Decodes the MAG filter from a D3D10 filter value
    Public Function D3D10_DECODE_MAG_FILTER(ByVal d3d10Filter As Long) As D3D10_FILTER_TYPE
        Return CType(Of D3D10_FILTER_TYPE)(((d3d10Filter >> D3D10_MAG_FILTER_SHIFT) And D3D10_FILTER_TYPE_MASK))
    End Function

    ' Decodes the MIP filter from a D3D10 filter value
    Public Function D3D10_DECODE_MIP_FILTER(ByVal d3d10Filter As Long) As D3D10_FILTER_TYPE
        Return CType(Of D3D10_FILTER_TYPE)(((d3d10Filter >> D3D10_MIP_FILTER_SHIFT) And D3D10_FILTER_TYPE_MASK))
    End Function

    ' Checks if the filter is a comparison filter
    Public Function D3D10_DECODE_IS_COMPARISON_FILTER(ByVal d3d10Filter As Long) As Boolean
        Return ((d3d10Filter And D3D10_COMPARISON_FILTERING_BIT) <> 0)
    End Function

    ' Checks if the filter is an anisotropic filter
    Public Function D3D10_DECODE_IS_ANISOTROPIC_FILTER(ByVal d3d10Filter As Long) As Boolean
        If (d3d10Filter And D3D10_ANISOTROPIC_FILTERING_BIT) = 0 Then
        Return False
        Else
            Return (D3D10_DECODE_MIN_FILTER(d3d10Filter) = D3D10_FILTER_TYPE_LINEAR) And (D3D10_DECODE_MAG_FILTER(d3d10Filter) = D3D10_FILTER_TYPE_LINEAR) And (D3D10_DECODE_MIP_FILTER(d3d10Filter) = D3D10_FILTER_TYPE_LINEAR)
        End If
    End Function

    ' Checks if the filter is a 1-bit text filter
    Public Function D3D10_DECODE_IS_TEXT_1BIT_FILTER(ByVal d3d10Filter As Long) As Boolean
        Return (d3d10Filter = D3D10_TEXT_1BIT_BIT)
    End Function
    
    Public Enum D3D10_TEXTURE_ADDRESS_MODE
        D3D10_TEXTURE_ADDRESS_WRAP = 1
        D3D10_TEXTURE_ADDRESS_MIRROR = 2
        D3D10_TEXTURE_ADDRESS_CLAMP = 3
        D3D10_TEXTURE_ADDRESS_BORDER = 4
        D3D10_TEXTURE_ADDRESS_MIRROR_ONCE = 5
    End Enum

    Public Type D3D10_SAMPLER_DESC
        Filter As D3D10_FILTER
        AddressU As D3D10_TEXTURE_ADDRESS_MODE
        AddressV As D3D10_TEXTURE_ADDRESS_MODE
        AddressW As D3D10_TEXTURE_ADDRESS_MODE
        MipLODBias As Single
        MaxAnisotropy As Long
        ComparisonFunc As D3D10_COMPARISON_FUNC
        BorderColor(0 To 3) As Single
        MinLOD As Single
        MaxLOD As Single
    End Type
       
    Public Enum D3D10_FORMAT_SUPPORT
        D3D10_FORMAT_SUPPORT_BUFFER = &H00000001
        D3D10_FORMAT_SUPPORT_IA_VERTEX_BUFFER = &H00000002
        D3D10_FORMAT_SUPPORT_IA_INDEX_BUFFER = &H00000004
        D3D10_FORMAT_SUPPORT_SO_BUFFER = &H00000008
        D3D10_FORMAT_SUPPORT_TEXTURE1D = &H00000010
        D3D10_FORMAT_SUPPORT_TEXTURE2D = &H00000020
        D3D10_FORMAT_SUPPORT_TEXTURE3D = &H00000040
        D3D10_FORMAT_SUPPORT_TEXTURECUBE = &H00000080
        D3D10_FORMAT_SUPPORT_SHADER_LOAD = &H00000100
        D3D10_FORMAT_SUPPORT_SHADER_SAMPLE = &H00000200
        D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON = &H00000400
        D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT = &H00000800
        D3D10_FORMAT_SUPPORT_MIP = &H00001000
        D3D10_FORMAT_SUPPORT_MIP_AUTOGEN = &H00002000
        D3D10_FORMAT_SUPPORT_RENDER_TARGET = &H00004000
        D3D10_FORMAT_SUPPORT_BLENDABLE = &H00008000&
        D3D10_FORMAT_SUPPORT_DEPTH_STENCIL = &H00010000
        D3D10_FORMAT_SUPPORT_CPU_LOCKABLE = &H00020000
        D3D10_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE = &H00040000
        D3D10_FORMAT_SUPPORT_DISPLAY = &H00080000
        D3D10_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT = &H00100000
        D3D10_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET = &H00200000
        D3D10_FORMAT_SUPPORT_MULTISAMPLE_LOAD = &H00400000
        D3D10_FORMAT_SUPPORT_SHADER_GATHER = &H00800000
        D3D10_FORMAT_SUPPORT_BACK_BUFFER_CAST = &H01000000
    End Enum
    
    Public Enum D3D10_ASYNC_GETDATA_FLAG
        D3D10_ASYNC_GETDATA_DONOTFLUSH = 1
    End Enum

    Public Enum D3D10_QUERY
        D3D10_QUERY_EVENT = 0
        D3D10_QUERY_OCCLUSION = 1
        D3D10_QUERY_TIMESTAMP = 2
        D3D10_QUERY_TIMESTAMP_DISJOINT = 3
        D3D10_QUERY_PIPELINE_STATISTICS = 4
        D3D10_QUERY_OCCLUSION_PREDICATE = 5
        D3D10_QUERY_SO_STATISTICS = 6
        D3D10_QUERY_SO_OVERFLOW_PREDICATE = 7
    End Enum

    Public Enum D3D10_QUERY_MISC_FLAG
        D3D10_QUERY_MISC_PREDICATEHINT = 1
    End Enum

    Public Type D3D10_QUERY_DESC
        Query As D3D10_QUERY
        MiscFlags As D3D10_QUERY_MISC_FLAG
    End Type
     
    Public Type D3D10_QUERY_DATA_TIMESTAMP_DISJOINT
        Frequency As LongLong
        Disjoint As BOOL
    End Type
    
    Public Type D3D10_QUERY_DATA_PIPELINE_STATISTICS
        IAVertices As LongLong
        IAPrimitives As LongLong
        VSInvocations As LongLong
        GSInvocations As LongLong
        GSPrimitives As LongLong
        CInvocations As LongLong
        CPrimitives As LongLong
        PSInvocations As LongLong
    End Type
    
    Public Type D3D10_QUERY_DATA_SO_STATISTICS
        NumPrimitivesWritten As LongLong
        PrimitivesStorageNeeded As LongLong
    End Type
    
    Public Enum D3D10_COUNTER
        D3D10_COUNTER_GPU_IDLE = 0
        D3D10_COUNTER_VERTEX_PROCESSING
        D3D10_COUNTER_GEOMETRY_PROCESSING
        D3D10_COUNTER_PIXEL_PROCESSING
        D3D10_COUNTER_OTHER_GPU_PROCESSING
        D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION
        D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION
        D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION
        D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION
        D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION
        D3D10_COUNTER_VS_MEMORY_LIMITED
        D3D10_COUNTER_VS_COMPUTATION_LIMITED
        D3D10_COUNTER_GS_MEMORY_LIMITED
        D3D10_COUNTER_GS_COMPUTATION_LIMITED
        D3D10_COUNTER_PS_MEMORY_LIMITED
        D3D10_COUNTER_PS_COMPUTATION_LIMITED
        D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE
        D3D10_COUNTER_TEXTURE_CACHE_HIT_RATE
        D3D10_COUNTER_DEVICE_DEPENDENT_0 = &H40000000 ' DO NOT define any more D3D10_COUNTER values after this.
    End Enum
    
    Public Enum D3D10_COUNTER_TYPE
        D3D10_COUNTER_TYPE_FLOAT32
        D3D10_COUNTER_TYPE_UINT16
        D3D10_COUNTER_TYPE_UINT32
        D3D10_COUNTER_TYPE_UINT64
    End Enum
    
    Public Type D3D10_COUNTER_DESC
        Counter As D3D10_COUNTER
        MiscFlags As Long
    End Type
    
    Public Type D3D10_COUNTER_INFO
        LastDeviceDependentCounter As D3D10_COUNTER
        NumSimultaneousCounters As Long
        NumDetectableParallelUnits As Byte
    End Type
    
    Public Enum D3D10_CREATE_DEVICE_FLAG
        D3D10_CREATE_DEVICE_SINGLETHREADED = &H1
        D3D10_CREATE_DEVICE_DEBUG = &H2
        D3D10_CREATE_DEVICE_SWITCH_TO_REF = &H4
        D3D10_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = &H8
        D3D10_CREATE_DEVICE_ALLOW_NULL_FROM_MAP = &H10
        D3D10_CREATE_DEVICE_BGRA_SUPPORT = &H20
        D3D10_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = &H0080
        D3D10_CREATE_DEVICE_STRICT_VALIDATION = &H0200
        D3D10_CREATE_DEVICE_DEBUGGABLE = &H0400
    End Enum
    
    Public Const D3D10_SDK_VERSION = 29
    
    Public Function IID_ID3D10DeviceChild() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B7E4C00, &H342C, &H4106, &HA1, &H9F, &H4F, &H27, &H04, &HF6, &H89, &HF0)
    IID_ID3D10DeviceChild = iid
    End Function
    Public Function IID_ID3D10DepthStencilState() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2B4B1CC8, &HA4AD, &H41f8, &H83, &H22, &HCA, &H86, &HFC, &H3E, &HC6, &H75)
    IID_ID3D10DepthStencilState = iid
    End Function
    Public Function IID_ID3D10BlendState() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HEDAD8D19, &H8A35, &H4d6d, &H85, &H66, &H2E, &HA2, &H76, &HCD, &HE1, &H61)
    IID_ID3D10BlendState = iid
    End Function
    Public Function IID_ID3D10RasterizerState() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA2A07292, &H89AF, &H4345, &HBE, &H2E, &HC5, &H3D, &H9F, &HBB, &H6E, &H9F)
    IID_ID3D10RasterizerState = iid
    End Function
    Public Function IID_ID3D10Resource() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B7E4C01, &H342C, &H4106, &HA1, &H9F, &H4F, &H27, &H04, &HF6, &H89, &HF0)
    IID_ID3D10Resource = iid
    End Function
    Public Function IID_ID3D10Buffer() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B7E4C02, &H342C, &H4106, &HA1, &H9F, &H4F, &H27, &H04, &HF6, &H89, &HF0)
    IID_ID3D10Buffer = iid
    End Function
    Public Function IID_ID3D10Texture1D() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B7E4C03, &H342C, &H4106, &HA1, &H9F, &H4F, &H27, &H04, &HF6, &H89, &HF0)
    IID_ID3D10Texture1D = iid
    End Function
    Public Function IID_ID3D10Texture2D() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B7E4C04, &H342C, &H4106, &HA1, &H9F, &H4F, &H27, &H04, &HF6, &H89, &HF0)
    IID_ID3D10Texture2D = iid
    End Function
    Public Function IID_ID3D10Texture3D() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B7E4C05, &H342C, &H4106, &HA1, &H9F, &H4F, &H27, &H04, &HF6, &H89, &HF0)
    IID_ID3D10Texture3D = iid
    End Function
    Public Function IID_ID3D10View() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC902B03F, &H60A7, &H49BA, &H99, &H36, &H2A, &H3A, &HB3, &H7A, &H7E, &H33)
    IID_ID3D10View = iid
    End Function
    Public Function IID_ID3D10ShaderResourceView() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B7E4C07, &H342C, &H4106, &HA1, &H9F, &H4F, &H27, &H04, &HF6, &H89, &HF0)
    IID_ID3D10ShaderResourceView = iid
    End Function
    Public Function IID_ID3D10RenderTargetView() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B7E4C08, &H342C, &H4106, &HA1, &H9F, &H4F, &H27, &H04, &HF6, &H89, &HF0)
    IID_ID3D10RenderTargetView = iid
    End Function
    Public Function IID_ID3D10DepthStencilView() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B7E4C09, &H342C, &H4106, &HA1, &H9F, &H4F, &H27, &H04, &HF6, &H89, &HF0)
    IID_ID3D10DepthStencilView = iid
    End Function
    Public Function IID_ID3D10VertexShader() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B7E4C0A, &H342C, &H4106, &HA1, &H9F, &H4F, &H27, &H04, &HF6, &H89, &HF0)
    IID_ID3D10VertexShader = iid
    End Function
    Public Function IID_ID3D10GeometryShader() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6316BE88, &H54CD, &H4040, &HAB, &H44, &H20, &H46, &H1B, &HC8, &H1F, &H68)
    IID_ID3D10GeometryShader = iid
    End Function
    Public Function IID_ID3D10PixelShader() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4968B601, &H9D00, &H4cde, &H83, &H46, &H8E, &H7F, &H67, &H58, &H19, &HB6)
    IID_ID3D10PixelShader = iid
    End Function
    Public Function IID_ID3D10InputLayout() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B7E4C0B, &H342C, &H4106, &HA1, &H9F, &H4F, &H27, &H04, &HF6, &H89, &HF0)
    IID_ID3D10InputLayout = iid
    End Function
    Public Function IID_ID3D10SamplerState() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B7E4C0C, &H342C, &H4106, &HA1, &H9F, &H4F, &H27, &H04, &HF6, &H89, &HF0)
    IID_ID3D10SamplerState = iid
    End Function
    Public Function IID_ID3D10Asynchronous() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B7E4C0D, &H342C, &H4106, &HA1, &H9F, &H4F, &H27, &H04, &HF6, &H89, &HF0)
    IID_ID3D10Asynchronous = iid
    End Function
    Public Function IID_ID3D10Query() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B7E4C0E, &H342C, &H4106, &HA1, &H9F, &H4F, &H27, &H04, &HF6, &H89, &HF0)
    IID_ID3D10Query = iid
    End Function
    Public Function IID_ID3D10Predicate() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B7E4C10, &H342C, &H4106, &HA1, &H9F, &H4F, &H27, &H04, &HF6, &H89, &HF0)
    IID_ID3D10Predicate = iid
    End Function
    Public Function IID_ID3D10Counter() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B7E4C11, &H342C, &H4106, &HA1, &H9F, &H4F, &H27, &H04, &HF6, &H89, &HF0)
    IID_ID3D10Counter = iid
    End Function
    Public Function IID_ID3D10Device() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B7E4C0F, &H342C, &H4106, &HA1, &H9F, &H4F, &H27, &H04, &HF6, &H89, &HF0)
    IID_ID3D10Device = iid
    End Function
    Public Function IID_ID3D10Multithread() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B7E4E00, &H342C, &H4106, &HA1, &H9F, &H4F, &H27, &H04, &HF6, &H89, &HF0)
    IID_ID3D10Multithread = iid
    End Function
    
    
    ' D3D10Misc.h
    Public Enum D3D10_DRIVER_TYPE
        D3D10_DRIVER_TYPE_HARDWARE = 0
        D3D10_DRIVER_TYPE_REFERENCE = 1
        D3D10_DRIVER_TYPE_NULL = 2
        D3D10_DRIVER_TYPE_SOFTWARE = 3
        D3D10_DRIVER_TYPE_WARP = 5
    End Enum
    
    Public Function GUID_DeviceType() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd722fb4d, &H7a68, &H437a, &Hb2, &H0c, &H58, &H04, &Hee, &H24, &H94, &Ha6)
    GUID_DeviceType = iid
    End Function
    
    [UseGetLastError(False)]
    Public Declare PtrSafe Function D3D10CreateDevice Lib "d3d10.dll" (ByVal pAdapter As IDXGIAdapter, ByVal DriverType As D3D10_DRIVER_TYPE, ByVal Software As LongPtr, ByVal flags As D3D10_CREATE_DEVICE_FLAG, ByVal SDKVersion As Long, ByRef ppDevice As ID3D10Device) As Long
    [UseGetLastError(False)]
    Public Declare PtrSafe Function D3D10CreateDeviceAndSwapChain Lib "d3d10.dll" (ByVal pAdapter As IDXGIAdapter, ByVal DriverType As D3D10_DRIVER_TYPE, ByVal Software As LongPtr, ByVal flags As D3D10_CREATE_DEVICE_FLAG, ByVal SDKVersion As Long, ByRef pSwapChainDesc As DXGI_SWAP_CHAIN_DESC, ByRef ppSwapChain As IDXGISwapChain, ByRef ppDevice As ID3D10Device) As Long
    [UseGetLastError(False)]
    Public Declare PtrSafe Function D3D10CreateBlob Lib "d3d10.dll" (ByVal NumBytes As LongPtr, ByVal ppBuffer As ID3D10Blob) As Long
    
    
    ' D3D10Shader.h
    Public Function D3D10_TX_VERSION(ByVal Major As Long, ByVal Minor As Long) As Long
        Return (AscW("T") << 24&) Or (AscW("X") << 16) Or (Major << 8) Or Minor
    End Function
    
    ' Public Enum D3D10ShaderFlags
    ' D3D10_SHADER_DEBUG = (1 << 0)
    ' D3D10_SHADER_SKIP_VALIDATION = (1 << 1)
    ' D3D10_SHADER_SKIP_OPTIMIZATION = (1 << 2)
    ' D3D10_SHADER_PACK_MATRIX_ROW_MAJOR = (1 << 3)
    ' D3D10_SHADER_PACK_MATRIX_COLUMN_MAJOR = (1 << 4)
    ' D3D10_SHADER_PARTIAL_PRECISION = (1 << 5)
    ' D3D10_SHADER_FORCE_VS_SOFTWARE_NO_OPT = (1 << 6)
    ' D3D10_SHADER_FORCE_PS_SOFTWARE_NO_OPT = (1 << 7)
    ' D3D10_SHADER_NO_PRESHADER = (1 << 8)
    ' D3D10_SHADER_AVOID_FLOW_CONTROL = (1 << 9)
    ' D3D10_SHADER_PREFER_FLOW_CONTROL = (1 << 10)
    ' D3D10_SHADER_ENABLE_STRICTNESS = (1 << 11)
    ' D3D10_SHADER_ENABLE_BACKWARDS_COMPATIBILITY = (1 << 12)
    ' D3D10_SHADER_IEEE_STRICTNESS = (1 << 13)
    ' D3D10_SHADER_WARNINGS_ARE_ERRORS = (1& << 18)
    ' D3D10_SHADER_RESOURCES_MAY_ALIAS = (1& << 19)
    ' D3D10_ENABLE_UNBOUNDED_DESCRIPTOR_TABLES = (1& << 20)
    ' D3D10_ALL_RESOURCES_BOUND = (1& << 21)
    ' D3D10_SHADER_DEBUG_NAME_FOR_SOURCE = (1& << 22)
    ' D3D10_SHADER_DEBUG_NAME_FOR_BINARY = (1& << 23)
' '  optimization level flags
    ' D3D10_SHADER_OPTIMIZATION_LEVEL0 = (1& << 14)
    ' D3D10_SHADER_OPTIMIZATION_LEVEL1 = 0
    ' D3D10_SHADER_OPTIMIZATION_LEVEL2 = ((1& << 14) Or (1& << 15))
    ' D3D10_SHADER_OPTIMIZATION_LEVEL3 = (1& << 15)
' '  Force root signature flags. (Passed in Flags2)
    ' D3D10_SHADER_FLAGS2_FORCE_ROOT_SIGNATURE_LATEST = 0
    ' D3D10_SHADER_FLAGS2_FORCE_ROOT_SIGNATURE_1_0 = (1 << 4)
    ' D3D10_SHADER_FLAGS2_FORCE_ROOT_SIGNATURE_1_1 = (1 << 5)
    ' End Enum
    
    
    'Alias D3D10_PRIMITIVE_TOPOLOGY D3D_PRIMITIVE_TOPOLOGY
    ' typedef D3D_SHADER_MACRO D3D10_SHADER_MACRO;
    Public Type D3D10_SHADER_MACRO
        Name As LongPtr
        Definition As LongPtr
    End Type
    ' typedef D3D10_SHADER_MACRO* LPD3D10_SHADER_MACRO;


    ' typedef D3D_SHADER_VARIABLE_CLASS D3D10_SHADER_VARIABLE_CLASS;
    ' typedef D3D10_SHADER_VARIABLE_CLASS* LPD3D10_SHADER_VARIABLE_CLASS;

    ' typedef D3D_SHADER_VARIABLE_FLAGS D3D10_SHADER_VARIABLE_FLAGS;
    ' typedef D3D10_SHADER_VARIABLE_FLAGS* LPD3D10_SHADER_VARIABLE_FLAGS;

    ' typedef D3D_SHADER_VARIABLE_TYPE D3D10_SHADER_VARIABLE_TYPE;
    ' typedef D3D10_SHADER_VARIABLE_TYPE* LPD3D10_SHADER_VARIABLE_TYPE;

    ' typedef D3D_SHADER_INPUT_FLAGS D3D10_SHADER_INPUT_FLAGS;
    ' typedef D3D10_SHADER_INPUT_FLAGS* LPD3D10_SHADER_INPUT_FLAGS;

    ' typedef D3D_SHADER_INPUT_TYPE D3D10_SHADER_INPUT_TYPE;
    ' typedef D3D10_SHADER_INPUT_TYPE* LPD3D10_SHADER_INPUT_TYPE;

    ' typedef D3D_SHADER_CBUFFER_FLAGS D3D10_SHADER_CBUFFER_FLAGS;
    ' typedef D3D10_SHADER_CBUFFER_FLAGS* LPD3D10_SHADER_CBUFFER_FLAGS;

    ' typedef D3D_CBUFFER_TYPE D3D10_CBUFFER_TYPE;
    ' typedef D3D10_CBUFFER_TYPE* LPD3D10_CBUFFER_TYPE;

    ' typedef D3D_NAME D3D10_NAME;

    ' typedef D3D_RESOURCE_RETURN_TYPE D3D10_RESOURCE_RETURN_TYPE;

    ' typedef D3D_REGISTER_COMPONENT_TYPE D3D10_REGISTER_COMPONENT_TYPE;

    ' typedef D3D_INCLUDE_TYPE D3D10_INCLUDE_TYPE;
    
    Public Type D3D10_SHADER_DESC
        Version As Long ' Shader version
        Creator As LongPtr ' Creator string
        Flags As D3D10_SHADER_FLAGS ' Shader compilation/parse flags
        ConstantBuffers As Long ' Number of constant buffers
        BoundResources As Long ' Number of bound resources
        InputParameters As Long ' Number of parameters in the input signature
        OutputParameters As Long ' Number of parameters in the output signature
        InstructionCount As Long ' Number of emitted instructions
        TempRegisterCount As Long ' Number of temporary registers used 
        TempArrayCount As Long ' Number of temporary arrays used
        DefCount As Long ' Number of constant defines 
        DclCount As Long ' Number of declarations (input + output)
        TextureNormalInstructions As Long ' Number of non-categorized texture instructions
        TextureLoadInstructions As Long ' Number of texture load instructions
        TextureCompInstructions As Long ' Number of texture comparison instructions
        TextureBiasInstructions As Long ' Number of texture bias instructions
        TextureGradientInstructions As Long ' Number of texture gradient instructions
        FloatInstructionCount As Long ' Number of floating point arithmetic instructions used
        IntInstructionCount As Long ' Number of signed integer arithmetic instructions used
        UintInstructionCount As Long ' Number of unsigned integer arithmetic instructions used
        StaticFlowControlCount As Long ' Number of static flow control instructions used
        DynamicFlowControlCount As Long ' Number of dynamic flow control instructions used
        MacroInstructionCount As Long ' Number of macro instructions used
        ArrayInstructionCount As Long ' Number of array instructions used
        CutInstructionCount As Long ' Number of cut instructions used
        EmitInstructionCount As Long ' Number of emit instructions used
        GSOutputTopology As D3D_PRIMITIVE_TOPOLOGY ' Geometry shader output topology
        GSMaxOutputVertexCount As Long ' Geometry shader maximum output vertex count
    End Type
    
    Public Type D3D10_SHADER_BUFFER_DESC
        Name As LongPtr ' Name of the constant buffer
        Type As D3D_CBUFFER_TYPE ' Indicates that this is a CBuffer or TBuffer
        Variables As Long ' Number of member variables
        Size As Long ' Size of CB (in bytes)
        uFlags As D3D_SHADER_CBUFFER_FLAGS ' Buffer description flags
    End Type
    
    Public Type D3D10_SHADER_VARIABLE_DESC
        Name As LongPtr ' Name of the variable
        StartOffset As Long ' Offset in constant buffer's backing store
        Size As Long ' Size of variable (in bytes)
        uFlags As D3D_SHADER_VARIABLE_FLAGS ' Variable flags 10
        DefaultValue As LongPtr ' Raw pointer to default value
    End Type
    
    Public Type D3D10_SHADER_TYPE_DESC
        Class As D3D_SHADER_VARIABLE_CLASS ' Variable class (e.g. object, matrix, etc.) D3D10_SHADER_VARIABLE_CLASS
        Type As D3D_SHADER_VARIABLE_TYPE ' Variable type (e.g. float, sampler, etc.) D3D10_SHADER_VARIABLE_TYPE
        Rows As Long ' Number of rows (for matrices, 1 for other numeric, 0 if not applicable)
        Columns As Long ' Number of columns (for vectors & matrices, 1 for other numeric, 0 if not applicable)
        Elements As Long ' Number of elements (0 if not an array)
        Members As Long ' Number of members (0 if not a structure)
        Offset As Long ' Offset from the start of structure (0 if not a structure member) 
    End Type
    
    Public Type D3D10_SHADER_INPUT_BIND_DESC
        Name As LongPtr ' Name of the resource
        Type As D3D_SHADER_INPUT_TYPE ' Type of resource (e.g. texture, cbuffer, etc.) D3D10_SHADER_INPUT_TYPE
        BindPoint As Long ' Starting bind point
        BindCount As Long ' Number of contiguous bind points (for arrays)
        uFlags As D3D_SHADER_INPUT_FLAGS ' Input binding flags
        ReturnType As D3D_RESOURCE_RETURN_TYPE ' Return type (if texture) D3D10_RESOURCE_RETURN_TYPE
        Dimension As D3D_SRV_DIMENSION ' Dimension (if texture)D3D10_SRV_DIMENSION
        NumSamples As Long ' Number of samples (0 if not MS texture)
    End Type
    
    Public Type D3D10_SIGNATURE_PARAMETER_DESC
        SemanticName As LongPtr ' Name of the semantic
        SemanticIndex As Long ' Index of the semantic
        Register As Long ' Number of member variables
        SystemValueType As D3D_NAME ' A predefined system value, or D3D10_NAME_UNDEFINED if not applicable D3D10_NAME
        ComponentType As D3D_REGISTER_COMPONENT_TYPE ' Scalar type (e.g. uint, float, etc.) D3D10_REGISTER_COMPONENT_TYPE
        Mask As Byte ' Mask to indicate which components of the register
                     ' are used (combination of D3D10_COMPONENT_MASK values)
        ReadWriteMask As Byte   ' Mask to indicate whether a given component is 
                                ' never written (if this is an output signature) or
                                ' always read (if this is an input signature).
                                ' (combination of D3D10_COMPONENT_MASK values)
    End Type
    
    Public Function IID_ID3D10ShaderReflectionType() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc530ad7d, &H9b16, &H4395, &Ha9, &H79, &Hba, &H2e, &Hcf, &Hf8, &H3a, &Hdd)
    IID_ID3D10ShaderReflectionType = iid
    End Function
    Public Function IID_ID3D10ShaderReflectionVariable() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1bf63c95, &H2650, &H405d, &H99, &Hc1, &H36, &H36, &Hbd, &H1d, &Ha0, &Ha1)
    IID_ID3D10ShaderReflectionVariable = iid
    End Function
    Public Function IID_ID3D10ShaderReflectionConstantBuffer() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H66c66a94, &Hdddd, &H4b62, &Ha6, &H6a, &Hf0, &Hda, &H33, &Hc2, &Hb4, &Hd0)
    IID_ID3D10ShaderReflectionConstantBuffer = iid
    End Function
    Public Function IID_ID3D10ShaderReflection() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd40e20b6, &Hf8f7, &H42ad, &Hab, &H20, &H4b, &Haf, &H8f, &H15, &Hdf, &Haa)
    IID_ID3D10ShaderReflection = iid
    End Function
    
    [UseGetLastError(False)]
    Declare PtrSafe Function D3D10CompileShader Lib "d3d10.dll" (ByVal pSrcData As String, ByVal SrcDataSize As LongPtr, ByVal pFileName As String, pDefines As D3D10_SHADER_MACRO, ByVal pInclude As ID3DInclude, ByVal pFunctionName As String, ByVal pProfile As String, ByVal Flags As Long, ByRef ppShader As ID3D10Blob, ByRef ppErrorMsgs As ID3D10Blob) As Long

    [UseGetLastError(False)]
    Declare PtrSafe Function D3D10DisassembleShader Lib "d3d10.dll" (ByVal pShader As LongPtr, ByVal BytecodeLength As LongPtr, ByVal EnableColorCode As BOOL, ByVal pComments As String, ByRef ppDisassembly As ID3D10Blob) As Long

    Declare PtrSafe Function D3D10GetPixelShaderProfile Lib "d3d10.dll" (ByVal pDevice As ID3D10Device) As String
    
    Declare PtrSafe Function D3D10GetVertexShaderProfile Lib "d3d10.dll" (ByVal pDevice As ID3D10Device) As String

    Declare PtrSafe Function D3D10GetGeometryShaderProfile Lib "d3d10.dll" (ByVal pDevice As ID3D10Device) As String

    [UseGetLastError(False)]
    Declare PtrSafe Function D3D10ReflectShader Lib "d3d10.dll" (pShaderBytecode As Any, ByVal BytecodeLength As LongPtr, ByRef ppReflector As ID3D10ShaderReflection) As Long

    [UseGetLastError(False)]
    Declare PtrSafe Function D3D10PreprocessShader Lib "d3d10.dll" (ByVal pSrcData As String, ByVal SrcDataSize As LongPtr, ByVal pFileName As String, pDefines As D3D10_SHADER_MACRO, ByVal pInclude As ID3DInclude, ByRef ppShaderText As ID3D10Blob, ByRef ppErrorMsgs As ID3D10Blob) As Long

    [UseGetLastError(False)]
    Declare PtrSafe Function D3D10GetInputSignatureBlob Lib "d3d10.dll" (pShaderBytecode As Any, ByVal BytecodeLength As LongPtr, ByRef ppSignatureBlob As ID3D10Blob) As Long

    [UseGetLastError(False)]
    Declare PtrSafe Function D3D10GetOutputSignatureBlob Lib "d3d10.dll" (pShaderBytecode As Any, ByVal BytecodeLength As LongPtr, ByRef ppSignatureBlob As ID3D10Blob) As Long

    [UseGetLastError(False)]
    Declare PtrSafe Function D3D10GetInputAndOutputSignatureBlob Lib "d3d10.dll" (pShaderBytecode As Any, ByVal BytecodeLength As LongPtr, ByRef ppSignatureBlob As ID3D10Blob) As Long

    [UseGetLastError(False)]
    Declare PtrSafe Function D3D10GetShaderDebugInfo Lib "d3d10.dll" (pShaderBytecode As Any, ByVal BytecodeLength As LongPtr, ByRef ppDebugInfo As ID3D10Blob) As Long
    
    'd3d10effect.h
    
    Public Enum D3D10_DEVICE_STATE_TYPES
        D3D10_DST_SO_BUFFERS = 1 ' Single-value state (atomical gets/sets)
        D3D10_DST_OM_RENDER_TARGETS = 2 ' Single-value state (atomical gets/sets)
        D3D10_DST_OM_DEPTH_STENCIL_STATE = 3 ' Single-value state
        D3D10_DST_OM_BLEND_STATE = 4 ' Single-value state
        D3D10_DST_VS = 5 ' Single-value state
        D3D10_DST_VS_SAMPLERS = 6 ' Count: D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT
        D3D10_DST_VS_SHADER_RESOURCES = 7 ' Count: D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT
        D3D10_DST_VS_CONSTANT_BUFFERS = 8 ' Count:
        D3D10_DST_GS = 9 ' Single-value state
        D3D10_DST_GS_SAMPLERS = 10 ' Count: D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT
        D3D10_DST_GS_SHADER_RESOURCES = 11 ' Count: D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT
        D3D10_DST_GS_CONSTANT_BUFFERS = 12 ' Count: D3D10_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT
        D3D10_DST_PS = 13 ' Single-value state
        D3D10_DST_PS_SAMPLERS = 14 ' Count: D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT
        D3D10_DST_PS_SHADER_RESOURCES = 15 ' Count: D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT
        D3D10_DST_PS_CONSTANT_BUFFERS = 16 ' Count: D3D10_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT
        D3D10_DST_IA_VERTEX_BUFFERS = 17 ' Count: D3D10_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT
        D3D10_DST_IA_INDEX_BUFFER = 18 ' Single-value state
        D3D10_DST_IA_INPUT_LAYOUT = 19 ' Single-value state
        D3D10_DST_IA_PRIMITIVE_TOPOLOGY = 20 ' Single-value state
        D3D10_DST_RS_VIEWPORTS = 21 ' Single-value state (atomical gets/sets)
        D3D10_DST_RS_SCISSOR_RECTS = 22 ' Single-value state (atomical gets/sets)
        D3D10_DST_RS_RASTERIZER_STATE = 23 ' Single-value state
        D3D10_DST_PREDICATION = 24 ' Single-value state
    End Enum
    
    Public Function D3D10_BYTES_FROM_BITS(ByVal x As Long) As Long: Return ((x + 7) \ 8): End Function
    
    Public Type D3D10_STATE_BLOCK_MASK
        VS As Byte
        VSSamplers(0 To 1) As Byte
        VSShaderResources(0 To 15) As Byte
        VSConstantBuffers(0 To 1) As Byte
        GS As Byte
        GSSamplers(0 To 1) As Byte
        GSShaderResources(0 To 15) As Byte
        GSConstantBuffers(0 To 1) As Byte
        PS As Byte
        PSSamplers(0 To 1) As Byte
        PSShaderResources(0 To 15) As Byte
        PSConstantBuffers(0 To 1) As Byte
        IAVertexBuffers(0 To 1) As Byte
        IAIndexBuffer As Byte
        IAInputLayout As Byte
        IAPrimitiveTopology As Byte
        OMRenderTargets As Byte
        OMDepthStencilState As Byte
        OMBlendState As Byte
        RSViewports As Byte
        RSScissorRects As Byte
        RSRasterizerState As Byte
        SOBuffers As Byte
        Predication As Byte
    End Type
    
    [UseGetLastError(False)]
    Public Declare PtrSafe Function D3D10StateBlockMaskUnion Lib "d3d10.dll" (pA As D3D10_STATE_BLOCK_MASK, pB As D3D10_STATE_BLOCK_MASK, pResult As D3D10_STATE_BLOCK_MASK) As Long
    [UseGetLastError(False)]
    Public Declare PtrSafe Function D3D10StateBlockMaskIntersect Lib "d3d10.dll" (pA As D3D10_STATE_BLOCK_MASK, pB As D3D10_STATE_BLOCK_MASK, pResult As D3D10_STATE_BLOCK_MASK) As Long
    [UseGetLastError(False)]
    Public Declare PtrSafe Function D3D10StateBlockMaskDifference Lib "d3d10.dll" (pA As D3D10_STATE_BLOCK_MASK, pB As D3D10_STATE_BLOCK_MASK, pResult As D3D10_STATE_BLOCK_MASK) As Long
    [UseGetLastError(False)]
    Public Declare PtrSafe Function D3D10StateBlockMaskEnableCapture Lib "d3d10.dll" (pMask As D3D10_STATE_BLOCK_MASK, ByVal StateType As D3D10_DEVICE_STATE_TYPES, ByVal RangeStart As Long, ByVal RangeLength As Long) As Long
    [UseGetLastError(False)]
    Public Declare PtrSafe Function D3D10StateBlockMaskDisableCapture Lib "d3d10.dll" (pMask As D3D10_STATE_BLOCK_MASK, ByVal StateType As D3D10_DEVICE_STATE_TYPES, ByVal RangeStart As Long, ByVal RangeLength As Long) As Long
    [UseGetLastError(False)]
    Public Declare PtrSafe Function D3D10StateBlockMaskEnableAll Lib "d3d10.dll" (pMask As D3D10_STATE_BLOCK_MASK) As Long
    [UseGetLastError(False)]
    Public Declare PtrSafe Function D3D10StateBlockMaskDisableAll Lib "d3d10.dll" (pMask As D3D10_STATE_BLOCK_MASK) As Long
    Public Declare PtrSafe Function D3D10StateBlockMaskGetSetting Lib "d3d10.dll" (pMask As D3D10_STATE_BLOCK_MASK, ByVal StateType As D3D10_DEVICE_STATE_TYPES, ByVal Entry As Long) As BOOL
    [UseGetLastError(False)]
    Public Declare PtrSafe Function D3D10CreateStateBlock Lib "d3d10.dll" (ByVal pDevice As ID3D10Device, pStateBlockMask As D3D10_STATE_BLOCK_MASK, ppStateBlock As ID3D10StateBlock) As Long
    
    Public Enum D3D10EffectCompileFlags
        D3D10_EFFECT_COMPILE_CHILD_EFFECT = (1 << 0)
        D3D10_EFFECT_COMPILE_ALLOW_SLOW_OPS = (1 << 1)
        D3D10_EFFECT_SINGLE_THREADED = (1 << 3)
    End Enum
    
    Public Enum D3D10EffectVariableFlags
        D3D10_EFFECT_VARIABLE_POOLED = (1 << 0)
        D3D10_EFFECT_VARIABLE_ANNOTATION = (1 << 1)
        D3D10_EFFECT_VARIABLE_EXPLICIT_BIND_POINT = (1 << 2)
    End Enum
    
    Public Type D3D10_EFFECT_TYPE_DESC
        TypeName As LongPtr ' Name of the type 
                            ' (e.g. "float4" or "MyStruct")
        Class As D3D_SHADER_VARIABLE_CLASS ' (e.g. scalar, vector, object, etc.) D3D10_SHADER_VARIABLE_CLASS
        Type As D3D_SHADER_VARIABLE_TYPE ' (e.g. float, texture, vertexshader, etc.) D3D10_SHADER_VARIABLE_TYPE
        Elements As Long ' Number of elements in this type
                        ' (0 if not an array)
        Members As Long ' Number of members
                        ' (0 if not a structure)
        Rows As Long    ' Number of rows in this type
                        ' (0 if not a numeric primitive)
        Columns As Long ' Number of columns in this type
                        ' (0 if not a numeric primitive)
        PackedSize As Long   ' Number of bytes required to represent
                             ' this data type, when tightly packed
        UnpackedSize As Long ' Number of bytes occupied by this data
                             ' type, when laid out in a constant buffer
        Stride As Long  ' Number of bytes to seek between elements,
                        ' when laid out in a constant buffer
    End Type
    
    Public Type D3D10_EFFECT_VARIABLE_DESC
        Name As LongPtr             ' Name of this variable, annotation, 
                                    ' or structure member
        Semantic As LongPtr         ' Semantic string of this variable
                                    ' or structure member (NULL for
                                    ' annotations or if not present)
        Flags As Long               ' D3D10_EFFECT_VARIABLE_* flags
        Annotations As Long         ' Number of annotations on this variable
                                    ' (always 0 for annotations)
        BufferOffset As Long        ' Offset into containing cbuffer or tbuffer
                                    ' (always 0 for annotations or variables
                                    ' not in constant buffers)
        ExplicitBindPoint As Long   ' Used if the variable has been explicitly bound
                                    ' using the register keyword. Check Flags for
                                    ' D3D10_EFFECT_VARIABLE_EXPLICIT_BIND_POINT;
    End Type
    
    Public Type D3D10_EFFECT_SHADER_DESC
        pInputSignature As LongPtr  'Const BYTE * ' Passed into CreateInputLayout,
                                    ' valid on VS and GS only
        IsInline As BOOL ' Is this an anonymous shader variable
                         ' resulting from an inline shader assignment?
                         ' -- The following fields are not valid after Optimize() --
        pBytecode As LongPtr 'Const BYTE * ' Shader bytecode
        BytecodeLength As Long
        SODecl As LongPtr 'LPCSTR ' Stream out declaration string (for GS with SO)
        NumInputSignatureEntries As Long ' Number of entries in the input signature
        NumOutputSignatureEntries As Long ' Number of entries in the output signature
    End Type
    
    Public Type D3D10_PASS_DESC
        Name As LongPtr  '  Name of this pass (NULL if not anonymous)    
        Annotations As Long ' Number of annotations on this pass
        pIAInputSignature As Byte   ' Signature from VS or GS (if there is no VS)
                                    ' or NULL if neither exists
        IAInputSignatureSize As LongPtr ' Singature size in bytes                                
        StencilRef As Long ' Specified in SetDepthStencilState()
        SampleMask As Long ' Specified in SetBlendState()
        BlendFactor(0 To 3) As Single ' Specified in SetBlendState()
    End Type
    
    Public Type D3D10_PASS_SHADER_DESC
        pShaderVariable As ID3D10EffectShaderVariable   ' The variable that this shader came from.
                                                        ' If this is an inline shader assignment,
                                                        '   the returned interface will be an
                                                        '   anonymous shader variable, which is
                                                        '   not retrievable any other way.  It's
                                                        '   name in the variable description will
                                                        '   be "$Anonymous".
                                                        ' If there is no assignment of this type in
                                                        '   the pass block, pShaderVariable != NULL,
                                                        '   but pShaderVariable->IsValid() == FALSE.
        ShaderIndex As Long ' The element of pShaderVariable (if an array)
                            ' or 0 if not applicable
    End Type
    
    Public Type D3D10_TECHNIQUE_DESC
        Name As LongPtr  'LPCSTR ' Name of this technique (NULL if not anonymous)
        Passes As Long ' Number of passes contained within
        Annotations As Long ' Number of annotations on this technique
    End Type
    
    Public Type D3D10_EFFECT_DESC
        IsChildEffect As BOOL ' TRUE if this is a child effect, 
                              ' FALSE if this is standalone or an effect pool.
        ConstantBuffers As Long ' Number of constant buffers in this effect,
                                ' excluding the effect pool.
        SharedConstantBuffers As Long   ' Number of constant buffers shared in this
                                        ' effect's pool.
        GlobalVariables As Long ' Number of global variables in this effect,
                                ' excluding the effect pool.
        SharedGlobalVariables As Long ' Number of global variables shared in this
                                      ' effect's pool.
        Techniques As Long  ' Number of techniques in this effect,
                            ' excluding the effect pool.
    End Type
    
    Public Declare PtrSafe Function D3D10CompileEffectFromMemory Lib "d3d10.dll" (pData As Any, ByVal DataLength As LongPtr, ByVal pSrcFileName As String, pDefines As D3D10_SHADER_MACRO, ByVal pInclude As ID3DInclude, ByVal HLSLFlags As D3D10_SHADER_FLAGS, [TypeHint(D3D10EffectCompileFlags, D3D10EffectVariableFlags)] ByVal FXFlags As Long, ByRef ppCompiledEffect As ID3D10Blob, ByRef ppErrors As ID3D10Blob) As Long

    Public Declare PtrSafe Function D3D10CreateEffectFromMemory Lib "d3d10.dll" (pData As Any, ByVal DataLength As LongPtr, [TypeHint(D3D10EffectCompileFlags, D3D10EffectVariableFlags)] ByVal FXFlags As Long, ByVal pDevice As ID3D10Device, ByVal pEffectPool As ID3D10EffectPool, ByRef ppEffect As ID3D10Effect) As Long

    Public Declare PtrSafe Function D3D10CreateEffectPoolFromMemory Lib "d3d10.dll" (pData As Any, ByVal DataLength As LongPtr, [TypeHint(D3D10EffectCompileFlags, D3D10EffectVariableFlags)] ByVal FXFlags As Long, ByVal pDevice As ID3D10Device, ByRef ppEffectPool As ID3D10EffectPool) As Long

    Public Declare PtrSafe Function D3D10DisassembleEffect Lib "d3d10.dll" (ByVal pEffect As ID3D10Effect, ByVal EnableColorCode As BOOL, ByRef ppDisassembly As ID3D10Blob) As Long
    
    Public Function IID_ID3D10EffectPool() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9537ab04, &H3250, &H412e, &H82, &H13, &Hfc, &Hd2, &Hf8, &H67, &H79, &H33)
    IID_ID3D10EffectPool = iid
    End Function
    Public Function IID_ID3D10Effect() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H51b0ca8b, &Hec0b, &H4519, &H87, &Hd, &H8e, &He1, &Hcb, &H50, &H17, &Hc7)
    IID_ID3D10Effect = iid
    End Function
    Public Function IID_ID3D10EffectTechnique() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hdb122ce8, &Hd1c9, &H4292, &Hb2, &H37, &H24, &Hed, &H3d, &He8, &Hb1, &H75)
    IID_ID3D10EffectTechnique = iid
    End Function
    Public Function IID_ID3D10EffectPass() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5cfbeb89, &H1a06, &H46e0, &Hb2, &H82, &He3, &Hf9, &Hbf, &Ha3, &H6a, &H54)
    IID_ID3D10EffectPass = iid
    End Function
    Public Function IID_ID3D10EffectSamplerVariable() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6530d5c7, &H7e9, &H4271, &Ha4, &H18, &He7, &Hce, &H4b, &Hd1, &He4, &H80)
    IID_ID3D10EffectSamplerVariable = iid
    End Function
    Public Function IID_ID3D10EffectRasterizerVariable() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H21af9f0e, &H4d94, &H4ea9, &H97, &H85, &H2c, &Hb7, &H6b, &H8c, &Hb, &H34)
    IID_ID3D10EffectRasterizerVariable = iid
    End Function
    Public Function IID_ID3D10EffectDepthStencilVariable() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Haf482368, &H330a, &H46a5, &H9a, &H5c, &H1, &Hc7, &H1a, &Hf2, &H4c, &H8d)
    IID_ID3D10EffectDepthStencilVariable = iid
    End Function
    Public Function IID_ID3D10EffectBlendVariable() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1fcd2294, &Hdf6d, &H4eae, &H86, &Hb3, &He, &H91, &H60, &Hcf, &Hb0, &H7b)
    IID_ID3D10EffectBlendVariable = iid
    End Function
    Public Function IID_ID3D10EffectShaderVariable() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H80849279, &Hc799, &H4797, &H8c, &H33, &H4, &H7, &Ha0, &H7d, &H9e, &H6)
    IID_ID3D10EffectShaderVariable = iid
    End Function
    Public Function IID_ID3D10EffectConstantBuffer() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H56648f4d, &Hcc8b, &H4444, &Ha5, &Had, &Hb5, &Ha3, &Hd7, &H6e, &H91, &Hb3)
    IID_ID3D10EffectConstantBuffer = iid
    End Function
    Public Function IID_ID3D10EffectDepthStencilViewVariable() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3e02c918, &Hcc79, &H4985, &Hb6, &H22, &H2d, &H92, &Had, &H70, &H16, &H23)
    IID_ID3D10EffectDepthStencilViewVariable = iid
    End Function
    Public Function IID_ID3D10EffectRenderTargetViewVariable() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H28ca0cc3, &Hc2c9, &H40bb, &Hb5, &H7f, &H67, &Hb7, &H37, &H12, &H2b, &H17)
    IID_ID3D10EffectRenderTargetViewVariable = iid
    End Function
    Public Function IID_ID3D10EffectScalarVariable() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He48f7b, &Hd2c8, &H49e8, &Ha8, &H6c, &H2, &H2d, &Hee, &H53, &H43, &H1f)
    IID_ID3D10EffectScalarVariable = iid
    End Function
    Public Function IID_ID3D10EffectVectorVariable() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H62b98c44, &H1f82, &H4c67, &Hbc, &Hd0, &H72, &Hcf, &H8f, &H21, &H7e, &H81)
    IID_ID3D10EffectVectorVariable = iid
    End Function
    Public Function IID_ID3D10EffectMatrixVariable() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H50666c24, &Hb82f, &H4eed, &Ha1, &H72, &H5b, &H6e, &H7e, &H85, &H22, &He0)
    IID_ID3D10EffectMatrixVariable = iid
    End Function
    Public Function IID_ID3D10EffectStringVariable() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H71417501, &H8df9, &H4e0a, &Ha7, &H8a, &H25, &H5f, &H97, &H56, &Hba, &Hff)
    IID_ID3D10EffectStringVariable = iid
    End Function
    Public Function IID_ID3D10EffectShaderResourceVariable() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc0a7157b, &Hd872, &H4b1d, &H80, &H73, &Hef, &Hc2, &Hac, &Hd4, &Hb1, &Hfc)
    IID_ID3D10EffectShaderResourceVariable = iid
    End Function
    Public Function IID_ID3D10EffectType() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4e9e1ddc, &Hcd9d, &H4772, &Ha8, &H37, &H0, &H18, &Hb, &H9b, &H88, &Hfd)
    IID_ID3D10EffectType = iid
    End Function
    Public Function IID_ID3D10EffectVariable() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hae897105, &He6, &H45bf, &Hbb, &H8e, &H28, &H1d, &Hd6, &Hdb, &H8e, &H1b)
    IID_ID3D10EffectVariable = iid
    End Function
    Public Function IID_ID3D10StateBlock() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H803425a, &H57f5, &H4dd6, &H94, &H65, &Ha8, &H75, &H70, &H83, &H4a, &H8)
    IID_ID3D10StateBlock = iid
    End Function
    
    'd3d10_1.h
    
    Public Const D3D10_1_DEFAULT_SAMPLE_MASK  = (&Hffffffff)
    Public Const D3D10_1_FLOAT16_FUSED_TOLERANCE_IN_ULP As Single = (0.6!)
    Public Const D3D10_1_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP As Single = (0.6!)
    Public Const D3D10_1_GS_INPUT_REGISTER_COUNT  = (32)
    Public Const D3D10_1_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT  = (32)
    Public Const D3D10_1_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS  = (128)
    Public Const D3D10_1_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT  = (32)
    Public Const D3D10_1_PS_OUTPUT_MASK_REGISTER_COMPONENTS  = (1)
    Public Const D3D10_1_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT  = (32)
    Public Const D3D10_1_PS_OUTPUT_MASK_REGISTER_COUNT  = (1)
    Public Const D3D10_1_SHADER_MAJOR_VERSION  = (4)
    Public Const D3D10_1_SHADER_MINOR_VERSION  = (1)
    Public Const D3D10_1_SO_BUFFER_MAX_STRIDE_IN_BYTES  = (2048)
    Public Const D3D10_1_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES  = (256)
    Public Const D3D10_1_SO_BUFFER_SLOT_COUNT  = (4)
    Public Const D3D10_1_SO_MULTIPLE_BUFFER_ELEMENTS_PER_BUFFER  = (1)
    Public Const D3D10_1_SO_SINGLE_BUFFER_COMPONENT_LIMIT  = (64)
    Public Const D3D10_1_STANDARD_VERTEX_ELEMENT_COUNT  = (32)
    Public Const D3D10_1_SUBPIXEL_FRACTIONAL_BIT_COUNT  = (8)
    Public Const D3D10_1_VS_INPUT_REGISTER_COUNT  = (32)
    Public Const D3D10_1_VS_OUTPUT_REGISTER_COUNT  = (32)
    
    Public Enum D3D10_FEATURE_LEVEL1
        D3D10_FEATURE_LEVEL_10_0 = &Ha000&
        D3D10_FEATURE_LEVEL_10_1 = &Ha100&
        D3D10_FEATURE_LEVEL_9_1 = &H9100&
        D3D10_FEATURE_LEVEL_9_2 = &H9200&
        D3D10_FEATURE_LEVEL_9_3 = &H9300&
    End Enum
    
    Public Type D3D10_RENDER_TARGET_BLEND_DESC1
        BlendEnable As BOOL
        SrcBlend As D3D10_BLEND
        DestBlend As D3D10_BLEND
        BlendOp As D3D10_BLEND_OP
        SrcBlendAlpha As D3D10_BLEND
        DestBlendAlpha As D3D10_BLEND
        BlendOpAlpha As D3D10_BLEND_OP
        RenderTargetWriteMask As Byte
    End Type
    
    Public Type D3D10_BLEND_DESC1
        AlphaToCoverageEnable As BOOL
        IndependentBlendEnable As BOOL
        RenderTarget(0 To 7) As D3D10_RENDER_TARGET_BLEND_DESC1
    End Type
    
    Public Type D3D10_TEXCUBE_ARRAY_SRV1
        MostDetailedMip As Long
        MipLevels As Long
        First2DArrayFace As Long
        NumCubes As Long
    End Type
    
    Public Type D3D10_SHADER_RESOURCE_VIEW_DESC1
        Format As DXGI_FORMAT
        ViewDimension As D3D_SRV_DIMENSION 'D3D10_SRV_DIMENSION1
        ' union 
            ' {
            ' D3D10_BUFFER_SRV Buffer;
            ' D3D10_TEX1D_SRV Texture1D;
            ' D3D10_TEX1D_ARRAY_SRV Texture1DArray;
            ' D3D10_TEX2D_SRV Texture2D;
            ' D3D10_TEX2D_ARRAY_SRV Texture2DArray;
            ' D3D10_TEX2DMS_SRV Texture2DMS;
            ' D3D10_TEX2DMS_ARRAY_SRV Texture2DMSArray;
            ' D3D10_TEX3D_SRV Texture3D;
            ' D3D10_TEXCUBE_SRV TextureCube;
            ' D3D10_TEXCUBE_ARRAY_SRV1 TextureCubeArray;
            ' }     ;
        u(15) As Byte
    End Type
    'Alias D3D10_SRV_DIMENSION1 'D3D10_SRV_DIMENSION1
    
    Public Enum D3D10_STANDARD_MULTISAMPLE_QUALITY_LEVELS
        D3D10_STANDARD_MULTISAMPLE_PATTERN = &Hffffffff
        D3D10_CENTER_MULTISAMPLE_PATTERN = &Hfffffffe
    End Enum
    
    Public Declare PtrSafe Function D3D10CreateDevice1 Lib "d3d10_1.dll" (ByVal pAdapter As IDXGIAdapter, ByVal DriverType As D3D10_DRIVER_TYPE, ByVal Software As LongPtr, _
            ByVal Flags As D3D10_CREATE_DEVICE_FLAG, ByVal HardwareLevel As D3D10_FEATURE_LEVEL1, ByVal SDKVersion As Long, ByRef ppDevice As ID3D10Device1) As Long

    Public Declare PtrSafe Function D3D10CreateDeviceAndSwapChain1 Lib "d3d10_1.dll" (ByVal pAdapter As IDXGIAdapter, _
            ByVal DriverType As D3D10_DRIVER_TYPE, ByVal Software As LongPtr, ByVal Flags As D3D10_CREATE_DEVICE_FLAG, ByVal HardwareLevel As D3D10_FEATURE_LEVEL1, _
            ByVal SDKVersion As Long, ByRef pSwapChainDesc As DXGI_SWAP_CHAIN_DESC, ByRef ppSwapChain As IDXGISwapChain, ByRef ppDevice As ID3D10Device1) As Long
    
    Public Delegate Function FN_D3D10_CREATE_DEVICE1 (ByVal pAdapter As IDXGIAdapter, ByVal DriverType As D3D10_DRIVER_TYPE, ByVal Software As LongPtr, _
            ByVal Flags As D3D10_CREATE_DEVICE_FLAG, ByVal HardwareLevel As D3D10_FEATURE_LEVEL1, ByVal SDKVersion As Long, ByRef ppDevice As ID3D10Device1) As Long

    Public Delegate Function FN_D3D10_CREATE_DEVICE_AND_SWAP_CHAIN1 (ByVal pAdapter As IDXGIAdapter, _
            ByVal DriverType As D3D10_DRIVER_TYPE, ByVal Software As LongPtr, ByVal Flags As D3D10_CREATE_DEVICE_FLAG, ByVal HardwareLevel As D3D10_FEATURE_LEVEL1, _
            ByVal SDKVersion As Long, ByRef pSwapChainDesc As DXGI_SWAP_CHAIN_DESC, ByRef ppSwapChain As IDXGISwapChain, ByRef ppDevice As ID3D10Device1) As Long
       
    Public Function IID_ID3D10BlendState1() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HEDAD8D99, &H8A35, &H4d6d, &H85, &H66, &H2E, &HA2, &H76, &HCD, &HE1, &H61)
    IID_ID3D10BlendState1 = iid
    End Function
    Public Function IID_ID3D10ShaderResourceView1() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B7E4C87, &H342C, &H4106, &HA1, &H9F, &H4F, &H27, &H04, &HF6, &H89, &HF0)
    IID_ID3D10ShaderResourceView1 = iid
    End Function
    Public Function IID_ID3D10Device1() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B7E4C8F, &H342C, &H4106, &HA1, &H9F, &H4F, &H27, &H04, &HF6, &H89, &HF0)
    IID_ID3D10Device1 = iid
    End Function
    
    'd3d10_1shader.h
    
    Public Enum D3D10_SHADER_DEBUG_REGTYPE
        D3D10_SHADER_DEBUG_REG_INPUT = 0
        D3D10_SHADER_DEBUG_REG_OUTPUT = 1
        D3D10_SHADER_DEBUG_REG_CBUFFER = 2
        D3D10_SHADER_DEBUG_REG_TBUFFER = 3
        D3D10_SHADER_DEBUG_REG_TEMP = 4
        D3D10_SHADER_DEBUG_REG_TEMPARRAY = 5
        D3D10_SHADER_DEBUG_REG_TEXTURE = 6
        D3D10_SHADER_DEBUG_REG_SAMPLER = 7
        D3D10_SHADER_DEBUG_REG_IMMEDIATECBUFFER = 8
        D3D10_SHADER_DEBUG_REG_LITERAL = 9
        D3D10_SHADER_DEBUG_REG_UNUSED = 10
        D3D11_SHADER_DEBUG_REG_INTERFACE_POINTERS = 11
        D3D11_SHADER_DEBUG_REG_UAV = 12
        D3D10_SHADER_DEBUG_REG_FORCE_DWORD = &H7fffffff
    End Enum
    
    Public Enum D3D10_SHADER_DEBUG_SCOPETYPE
        D3D10_SHADER_DEBUG_SCOPE_GLOBAL = 0
        D3D10_SHADER_DEBUG_SCOPE_BLOCK = 1
        D3D10_SHADER_DEBUG_SCOPE_FORLOOP = 2
        D3D10_SHADER_DEBUG_SCOPE_STRUCT = 3
        D3D10_SHADER_DEBUG_SCOPE_FUNC_PARAMS = 4
        D3D10_SHADER_DEBUG_SCOPE_STATEBLOCK = 5
        D3D10_SHADER_DEBUG_SCOPE_NAMESPACE = 6
        D3D10_SHADER_DEBUG_SCOPE_ANNOTATION = 7
        D3D10_SHADER_DEBUG_SCOPE_FORCE_DWORD = &H7fffffff
    End Enum
    
    Public Enum D3D10_SHADER_DEBUG_VARTYPE
        D3D10_SHADER_DEBUG_VAR_VARIABLE = 0
        D3D10_SHADER_DEBUG_VAR_FUNCTION = 1
        D3D10_SHADER_DEBUG_VAR_FORCE_DWORD = &H7fffffff
    End Enum
    
    Public Type D3D10_SHADER_DEBUG_TOKEN_INFO
        File As Long ' offset into file list
        Line As Long ' line #
        Column As Long ' column #
        TokenLength As Long
        TokenId As Long ' offset to LPCSTR of length TokenLength in string datastore
    End Type
    
    Public Type D3D10_SHADER_DEBUG_VAR_INFO
        ' Index into token list for declaring identifier
        TokenId As Long
        Type As D3D_SHADER_VARIABLE_TYPE 'D3D10_SHADER_VARIABLE_TYPE
        ' register and component for this variable, only valid/necessary for arrays
        Register As Long
        Component As Long
        ' gives the original variable that declared this variable
        ScopeVar As Long
        ' this variable's offset in its ScopeVar
        ScopeVarOffset As Long
    End Type
    
    Public Type D3D10_SHADER_DEBUG_INPUT_INFO
        ' index into array of variables of variable to initialize
        Var As Long
        ' input, cbuffer, tbuffer
        InitialRegisterSet As D3D10_SHADER_DEBUG_REGTYPE
        ' set to cbuffer or tbuffer slot, geometry shader input primitive #,
        ' identifying register for indexable temp, or -1
        InitialBank As Long
        ' -1 if temp, otherwise gives register in register set
        InitialRegister As Long
        ' -1 if temp, otherwise gives component
        InitialComponent As Long
        ' initial value if literal
        InitialValue As Long
    End Type
    
    Public Type D3D10_SHADER_DEBUG_SCOPEVAR_INFO
        ' Index into variable token
        TokenId As Long
        VarType As D3D10_SHADER_DEBUG_VARTYPE ' variable or function (different namespaces)
        Class As D3D_SHADER_VARIABLE_CLASS 'D3D10_SHADER_VARIABLE_CLASS
        Rows As Long ' number of rows (matrices)
        Columns As Long ' number of columns (vectors and matrices)
        ' In an array of structures, one struct member scope is provided, and
        ' you'll have to add the array stride times the index to the variable
        ' index you find, then find that variable in this structure's list of
        ' variables.
        ' gives a scope to look up struct members. -1 if not a struct
        StructMemberScope As Long
        ' number of array indices
        uArrayIndices As Long ' a[3][2][1] has 3 indices
        ' maximum array index for each index
        ' offset to UINT[uArrayIndices] in UINT datastore
        ArrayElements As Long ' a[3][2][1] has {3, 2, 1}
        ' how many variables each array index moves
        ' offset to UINT[uArrayIndices] in UINT datastore
        ArrayStrides As Long ' a[3][2][1] has {2, 1, 1}
        uVariables As Long
        ' index of the first variable, later variables are offsets from this one
        uFirstVariable As Long
    End Type
    
    Public Type D3D10_SHADER_DEBUG_SCOPE_INFO
        ScopeType As D3D10_SHADER_DEBUG_SCOPETYPE
        Name As Long ' offset to name of scope in strings list
        uNameLen As Long ' length of name string
        uVariables As Long
        VariableData As Long ' Offset to UINT[uVariables] indexing the Scope Variable list
    End Type
    
    Public Type D3D10_SHADER_DEBUG_OUTPUTVAR
        ' index variable being written to, if -1 it's not going to a variable
        Var As Long
        ' range data that the compiler expects to be true
        uValueMax As Long: uValueMin As Long
        iValueMax As Long: iValueMin As Long
        fValueMax As Single: fValueMin As Single
        bInfPossible As BOOL: bNaNPossible As BOOL
    End Type
    
    Public Type D3D10_SHADER_DEBUG_OUTPUTREG_INFO
        ' Only temp, indexable temp, and output are valid here
        OutputRegisterSet As D3D10_SHADER_DEBUG_REGTYPE
        ' -1 means no output
        OutputReg As Long
        ' if a temp array, identifier for which one
        TempArrayReg As Long
        ' -1 means masked out
        OutputComponents(0 To 3) As Long
        OutputVars(0 To 3) As D3D10_SHADER_DEBUG_OUTPUTVAR
        ' when indexing the output, get the value of this register, then add
        ' that to uOutputReg. If uIndexReg is -1, then there is no index.
        ' find the variable whose register is the sum (by looking in the ScopeVar)
        ' and component matches, then set it. This should only happen for indexable
        ' temps and outputs.
        IndexReg As Long
        IndexComp As Long
    End Type
    
    Public Type D3D10_SHADER_DEBUG_INST_INFO
        Id As Long ' Which instruction this is in the bytecode
        Opcode As Long ' instruction type
        ' 0, 1, or 2
        uOutputs As Long
        ' up to two outputs per instruction
        pOutputs(0 To 1) As D3D10_SHADER_DEBUG_OUTPUTREG_INFO
        ' index into the list of tokens for this instruction's token
        TokenId As Long
        ' how many function calls deep this instruction is
        NestingLevel As Long
        ' list of scopes from outer-most to inner-most
        ' Number of scopes
        Scopes As Long
        ScopeInfo As Long ' Offset to UINT[uScopes] specifying indices of the ScopeInfo Array
        ' list of variables accessed by this instruction
        ' Number of variables
        AccessedVars As Long
        AccessedVarsInfo As Long ' Offset to UINT[AccessedVars] specifying indices of the ScopeVariableInfo Array
    End Type
    
    Public Type D3D10_SHADER_DEBUG_FILE_INFO
        FileName As Long ' Offset to LPCSTR for file name
        FileNameLen As Long ' Length of file name
        FileData As Long ' Offset to LPCSTR of length FileLen
        FileLen As Long ' Length of file
    End Type
    
    Public Type D3D10_SHADER_DEBUG_INFO
        Size As Long ' sizeof(D3D10_SHADER_DEBUG_INFO)
        Creator As Long ' Offset to LPCSTR for compiler version
        EntrypointName As Long ' Offset to LPCSTR for Entry point name
        ShaderTarget As Long ' Offset to LPCSTR for shader target
        CompileFlags As Long ' flags used to compile
        Files As Long ' number of included files
        FileInfo As Long ' Offset to D3D10_SHADER_DEBUG_FILE_INFO[Files]
        Instructions As Long ' number of instructions
        InstructionInfo As Long ' Offset to D3D10_SHADER_DEBUG_INST_INFO[Instructions]
        Variables As Long ' number of variables
        VariableInfo As Long ' Offset to D3D10_SHADER_DEBUG_VAR_INFO[Variables]
        InputVariables As Long ' number of variables to initialize before running
        InputVariableInfo As Long ' Offset to D3D10_SHADER_DEBUG_INPUT_INFO[InputVariables]
        Tokens As Long ' number of tokens to initialize
        TokenInfo As Long ' Offset to D3D10_SHADER_DEBUG_TOKEN_INFO[Tokens]
        Scopes As Long ' number of scopes
        ScopeInfo As Long ' Offset to D3D10_SHADER_DEBUG_SCOPE_INFO[Scopes]
        ScopeVariables As Long ' number of variables declared
        ScopeVariableInfo As Long ' Offset to D3D10_SHADER_DEBUG_SCOPEVAR_INFO[Scopes]
        UintOffset As Long ' Offset to the UINT datastore, all UINT offsets are from this offset
        StringOffset As Long ' Offset to the string datastore, all string offsets are from this offset
    End Type
    
    Public Function IID_ID3D10ShaderReflection1() As UUID
    '{C3457783-A846-47CE-9520-CEA6F66E7447}
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC3457783, CInt(&HA846), CInt(&H47CE), &H95, &H20, &HCE, &HA6, &HF6, &H6E, &H74, &H47)
     IID_ID3D10ShaderReflection1 = iid
    End Function
    
    
    'd3d10sdklayers.h
    
    Public Const D3D10_SDK_LAYERS_VERSION = 11

    ' //==================================================================================================================================
    ' //
    ' // Debugging Layer
    ' //
    ' //==================================================================================================================================
    Public Enum D3D10DebugFeatureFlags
        D3D10_DEBUG_FEATURE_FLUSH_PER_RENDER_OP = &H1
        D3D10_DEBUG_FEATURE_FINISH_PER_RENDER_OP = &H2
        D3D10_DEBUG_FEATURE_PRESENT_PER_RENDER_OP = &H4
    End Enum
    
    Public Function DXGI_DEBUG_D3D10() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H243b4c52, &H3606, &H4d3a, &H99, &Hd7, &Ha7, &He7, &Hb3, &H3e, &Hd7, &H6)
    DXGI_DEBUG_D3D10 = iid
    End Function
    Public Const D3D10_REGKEY_PATH  = "Software\Microsoft\Direct3D"
    Public Const D3D10_MUTE_DEBUG_OUTPUT  = "MuteDebugOutput"
    Public Const D3D10_ENABLE_BREAK_ON_MESSAGE  = "EnableBreakOnMessage"
    Public Const D3D10_INFOQUEUE_STORAGE_FILTER_OVERRIDE  = "InfoQueueStorageFilterOverride"
    Public Const D3D10_MUTE_CATEGORY  = "Mute_CATEGORY_%s"
    Public Const D3D10_MUTE_SEVERITY  = "Mute_SEVERITY_%s"
    Public Const D3D10_MUTE_ID_STRING  = "Mute_ID_%s"
    Public Const D3D10_MUTE_ID_DECIMAL  = "Mute_ID_%d"
    Public Const D3D10_UNMUTE_SEVERITY_INFO  = "Unmute_SEVERITY_INFO"
    Public Const D3D10_BREAKON_CATEGORY  = "BreakOn_CATEGORY_%s"
    Public Const D3D10_BREAKON_SEVERITY  = "BreakOn_SEVERITY_%s"
    Public Const D3D10_BREAKON_ID_STRING  = "BreakOn_ID_%s"
    Public Const D3D10_BREAKON_ID_DECIMAL  = "BreakOn_ID_%d"
    Public Const D3D10_APPSIZE_STRING  = "Size"
    Public Const D3D10_APPNAME_STRING  = "Name"
    
    Public Enum D3D10_MESSAGE_CATEGORY
        D3D10_MESSAGE_CATEGORY_APPLICATION_DEFINED
        D3D10_MESSAGE_CATEGORY_MISCELLANEOUS
        D3D10_MESSAGE_CATEGORY_INITIALIZATION
        D3D10_MESSAGE_CATEGORY_CLEANUP
        D3D10_MESSAGE_CATEGORY_COMPILATION
        D3D10_MESSAGE_CATEGORY_STATE_CREATION
        D3D10_MESSAGE_CATEGORY_STATE_SETTING
        D3D10_MESSAGE_CATEGORY_STATE_GETTING
        D3D10_MESSAGE_CATEGORY_RESOURCE_MANIPULATION
        D3D10_MESSAGE_CATEGORY_EXECUTION
        D3D10_MESSAGE_CATEGORY_SHADER
    End Enum
    
    Public Enum D3D10_MESSAGE_SEVERITY
        D3D10_MESSAGE_SEVERITY_CORRUPTION
        D3D10_MESSAGE_SEVERITY_ERROR
        D3D10_MESSAGE_SEVERITY_WARNING
        D3D10_MESSAGE_SEVERITY_INFO
        D3D10_MESSAGE_SEVERITY_MESSAGE
    End Enum
    
    Public Enum D3D10_MESSAGE_ID
        D3D10_MESSAGE_ID_UNKNOWN = 0

        ' //--------------------------------------------------------------------------
        ' // Messages Used by Core
        ' // Message IDs generated from core are at the beginning
        ' // since the core changes less frequently than the debug layer.

        ' // hazard checking
        D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD
        D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD
        D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD
        D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD
        D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD
        D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD
        D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD
        D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD
        D3D10_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD
        D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD

        ' // End of Messages used by Core
        ' // ------------------------------------------------------------------------
        D3D10_MESSAGE_ID_STRING_FROM_APPLICATION
        D3D10_MESSAGE_ID_CORRUPTED_THIS
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER1
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER2
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER3
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER4
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER5
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER6
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER7
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER8
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER9
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER10
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER11
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER12
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER13
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER14
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER15
        D3D10_MESSAGE_ID_CORRUPTED_MULTITHREADING
        D3D10_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY

        D3D10_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT
        D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT
        D3D10_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT
        D3D10_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT
        D3D10_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT
        D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT
        D3D10_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT
        D3D10_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT
        D3D10_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT
        D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT
        D3D10_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT
        D3D10_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT
        D3D10_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT
        D3D10_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT
        D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT
        D3D10_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT
        D3D10_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT
        D3D10_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT
        D3D10_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT
        D3D10_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT
        D3D10_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT

        D3D10_MESSAGE_ID_GETPRIVATEDATA_MOREDATA
        D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA
        D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN
        D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS
        D3D10_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS
        D3D10_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY

        D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT
        D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES
        D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE
        D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS
        D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS
        D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS
        D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS
        D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS
        D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA
        D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS
        D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS
        D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS
        D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN
        D3D10_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN
        D3D10_MESSAGE_ID_CREATEBUFFER_NULLDESC
        D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS
        D3D10_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION

        D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT
        D3D10_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT
        D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES
        D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE
        D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS
        D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS
        D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS
        D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS
        D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS
        D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA
        D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS
        D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS
        D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS
        D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN
        D3D10_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN
        D3D10_MESSAGE_ID_CREATETEXTURE1D_NULLDESC
        D3D10_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION

        D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT
        D3D10_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT
        D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES
        D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE
        D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS
        D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS
        D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS
        D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS
        D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS
        D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA
        D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS
        D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS
        D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS
        D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN
        D3D10_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN
        D3D10_MESSAGE_ID_CREATETEXTURE2D_NULLDESC
        D3D10_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION

        D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT
        D3D10_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT
        D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES
        D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE
        D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS
        D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS
        D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS
        D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS
        D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS
        D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA
        D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS
        D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS
        D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS
        D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN
        D3D10_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN
        D3D10_MESSAGE_ID_CREATETEXTURE3D_NULLDESC
        D3D10_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION

        D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT
        D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC
        D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT
        D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS
        D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE
        D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS
        D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN
        D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN

        D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT
        D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT
        D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC
        D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT
        D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS
        D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE
        D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS
        D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN
        D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN

        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN

        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC

        D3D10_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY
        D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE
        D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE

        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE

        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE

        D3D10_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY
        D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE
        D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE

        D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE
        D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE
        D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP
        D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS
        D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS
        D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC

        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC

        D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC

        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC

        D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY
        D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS
        D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG
        D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC

        D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED
        D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED

        D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER
        D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE
        D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY

        D3D10_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER
        D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID
        D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE
        D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED

        D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY

        D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER
        D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY

        D3D10_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY

        D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY

        D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER
        D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY

        D3D10_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY

        D3D10_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER
        D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED

        D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY

        D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER
        D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY

        D3D10_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY

        D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT

        D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR

        D3D10_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH
        D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH
        D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID

        D3D10_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY

        D3D10_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY

        D3D10_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY

        D3D10_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY

        D3D10_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY

        D3D10_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY

        D3D10_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY

        D3D10_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY

        D3D10_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY

        D3D10_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY

        D3D10_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY

        D3D10_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY

        D3D10_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY

        D3D10_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID

        D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE
        D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE
        D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX
        D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE
        D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE
        D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE

        D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE
        D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE
        D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE

        D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE
        D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX
        D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE

        D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID
        D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID
        D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID
        D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID
        D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID

        D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE
        D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS
        D3D10_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED
        D3D10_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN
        D3D10_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED

        D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE
        D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE
        D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS
        D3D10_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED
        D3D10_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN
        D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE
        D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED

        D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE
        D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE
        D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS
        D3D10_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED
        D3D10_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN
        D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE
        D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED

        D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE
        D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE
        D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS
        D3D10_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED
        D3D10_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN
        D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE
        D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED

        D3D10_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED
        D3D10_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED

        D3D10_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS
        D3D10_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN
        D3D10_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN

        D3D10_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE
        D3D10_MESSAGE_ID_REF_THREADING_MODE
        D3D10_MESSAGE_ID_REF_UMDRIVER_EXCEPTION
        D3D10_MESSAGE_ID_REF_KMDRIVER_EXCEPTION
        D3D10_MESSAGE_ID_REF_HARDWARE_EXCEPTION
        D3D10_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE
        D3D10_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER
        D3D10_MESSAGE_ID_REF_OUT_OF_MEMORY
        D3D10_MESSAGE_ID_REF_INFO

        ' //drawtime validation
        D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW
        D3D10_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW
        D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW
        D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW

        D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW
        D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW

        D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET
        D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND
        D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX
        D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE
        D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK
        D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE
        D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS

        D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET
        D3D10_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET
        D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET
        D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL
        D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET
        D3D10_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET
        D3D10_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH
        D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL
        D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL
        D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET
        D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID
        D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL
        D3D10_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH
        D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH
        D3D10_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT
        D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET
        D3D10_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED
        D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY
        D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED
        D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED
        D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED
        D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED
        D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED
        D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED
        D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED
        D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED
        D3D10_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE
        D3D10_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER
        D3D10_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING
        D3D10_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0
        D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT
        D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT
        D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT

        D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN
        D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN
        D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN

        D3D10_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC
        D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH
        D3D10_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW
        D3D10_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS
        D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH

        D3D10_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY
        D3D10_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY

        D3D10_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN
        D3D10_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN
        D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER
        D3D10_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED
        D3D10_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER
        D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN
        D3D10_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN
        D3D10_MESSAGE_ID_CREATECOUNTER_NULLDESC
        D3D10_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER
        D3D10_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER
        D3D10_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE
        D3D10_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED
        D3D10_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION
        D3D10_MESSAGE_ID_QUERY_BEGIN_DUPLICATE
        D3D10_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS
        D3D10_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION
        D3D10_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS
        D3D10_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN
        D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE
        D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS
        D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL

        D3D10_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH
        D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED
        D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN
        D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE
        D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT
        D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH

        D3D10_MESSAGE_ID_LIVE_OBJECT_SUMMARY
        D3D10_MESSAGE_ID_LIVE_BUFFER
        D3D10_MESSAGE_ID_LIVE_TEXTURE1D
        D3D10_MESSAGE_ID_LIVE_TEXTURE2D
        D3D10_MESSAGE_ID_LIVE_TEXTURE3D
        D3D10_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW
        D3D10_MESSAGE_ID_LIVE_RENDERTARGETVIEW
        D3D10_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW
        D3D10_MESSAGE_ID_LIVE_VERTEXSHADER
        D3D10_MESSAGE_ID_LIVE_GEOMETRYSHADER
        D3D10_MESSAGE_ID_LIVE_PIXELSHADER
        D3D10_MESSAGE_ID_LIVE_INPUTLAYOUT
        D3D10_MESSAGE_ID_LIVE_SAMPLER
        D3D10_MESSAGE_ID_LIVE_BLENDSTATE
        D3D10_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE
        D3D10_MESSAGE_ID_LIVE_RASTERIZERSTATE
        D3D10_MESSAGE_ID_LIVE_QUERY
        D3D10_MESSAGE_ID_LIVE_PREDICATE
        D3D10_MESSAGE_ID_LIVE_COUNTER
        D3D10_MESSAGE_ID_LIVE_DEVICE
        D3D10_MESSAGE_ID_LIVE_SWAPCHAIN
    
        D3D10_MESSAGE_ID_D3D10_MESSAGES_END

        ' //10on9 messages:
        D3D10_MESSAGE_ID_D3D10L9_MESSAGES_START = &H00100000
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED
        D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE
        D3D10_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED
        D3D10_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS
        D3D10_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS
        D3D10_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS
        D3D10_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND
        D3D10_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D
        D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE
        D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE
        D3D10_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS
        D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS
        D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX
        D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS
        D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED
        D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS
        D3D10_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY
        D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK
        D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE
        D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE
        D3D10_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE
        D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX
        D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO
        D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES
        D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET
        D3D10_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER
        D3D10_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE
        D3D10_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS
        D3D10_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT
        D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS
        D3D10_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES
        D3D10_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED
        D3D10_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED
        D3D10_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED
        D3D10_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED
        D3D10_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE
        D3D10_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED
        D3D10_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3
        D3D10_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED
        D3D10_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO
        D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION
        D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED
        D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR
        D3D10_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA
        D3D10_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED
        D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT
        D3D10_MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES
        D3D10_MESSAGE_ID_D3D10L9_MESSAGES_END
    End Enum
    
    Public Type D3D10_MESSAGE
        Category As D3D10_MESSAGE_CATEGORY
        Severity As D3D10_MESSAGE_SEVERITY
        ID As D3D10_MESSAGE_ID
        pDescription As LongPtr
        DescriptionByteLength As LongPtr
    End Type
    
    Public Type D3D10_INFO_QUEUE_FILTER_DESC
        NumCategories As Long
        pCategoryList As LongPtr 'D3D10_MESSAGE_CATEGORY*
        NumSeverities As Long
        pSeverityList As LongPtr 'D3D10_MESSAGE_SEVERITY*
        NumIDs As Long
        pIDList As LongPtr 'D3D10_MESSAGE_ID*
    End Type
    
    Public Type D3D10_INFO_QUEUE_FILTER
        AllowList As D3D10_INFO_QUEUE_FILTER_DESC
        DenyList As D3D10_INFO_QUEUE_FILTER_DESC
    End Type
    
    Public Const D3D10_INFO_QUEUE_DEFAULT_MESSAGE_COUNT_LIMIT = 1024
    
    Public Function IID_ID3D10Debug() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B7E4E01, &H342C, &H4106, &HA1, &H9F, &H4F, &H27, &H04, &HF6, &H89, &HF0)
    IID_ID3D10Debug = iid
    End Function
    Public Function IID_ID3D10SwitchToRef() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B7E4E02, &H342C, &H4106, &HA1, &H9F, &H4F, &H27, &H04, &HF6, &H89, &HF0)
    IID_ID3D10SwitchToRef = iid
    End Function
    Public Function IID_ID3D10InfoQueue() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b940b17, &H2642, &H4d1f, &Hab, &H1f, &Hb9, &H9b, &Had, &H0c, &H39, &H5f)
    IID_ID3D10InfoQueue = iid
    End Function
        
End Module

#End If