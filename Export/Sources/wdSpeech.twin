'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

'wdSpeech - Microsoft Speech API v5.4


    [InterfaceId("259684DC-37C3-11D2-9603-00C04F8EE628")]
    ' [ Restricted ]
    [Description("ISpNotifySink Interface")]
    [OleAutomation(False)]
    Interface ISpNotifySink Extends stdole.IUnknown
        Sub Notify()
    End Interface


    [InterfaceId("ACA16614-5D3D-11D2-960E-00C04F8EE628")]
    ' [ Restricted ]
    [Description("ISpNotifyTranslator Interface")]
    [OleAutomation(False)]
    Interface ISpNotifyTranslator Extends ISpNotifySink
        Sub InitWindowMessage(ByVal hWnd As LongPtr, ByVal Msg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr)
        Sub InitCallback(ByVal pfnCallback As LongPtr, ByVal wParam As LongPtr, ByVal lParam As LongPtr)
        Sub InitSpNotifyCallback(ByVal pSpCallback As LongPtr, ByVal wParam As LongPtr, ByVal lParam As LongPtr)
        Sub InitWin32Event(ByVal hEvent As LongPtr, ByVal fCloseHandleOnRelease As Long)
        Sub Wait(ByVal dwMilliseconds As Long)
        [PreserveSig]
        Function GetEventHandle() As LongPtr
    End Interface

    [InterfaceId("14056581-E16C-11D2-BB90-00C04F8EE6C0")]
    ' [ Restricted ]
    [Description("ISpDataKey Interface")]
    [OleAutomation(False)]
    Interface ISpDataKey Extends stdole.IUnknown
        Sub SetData(ByVal pszValueName As LongPtr, ByVal cbData As Long, ByRef pData As Byte)
        Sub GetData(ByVal pszValueName As LongPtr, ByRef pcbData As Long, ByRef pData As Byte)
        Sub SetStringValue(ByVal pszValueName As LongPtr, ByVal pszValue As LongPtr)
        Sub GetStringValue(ByVal pszValueName As LongPtr, ByRef ppszValue As LongPtr)
        Sub SetDWORD(ByVal pszValueName As LongPtr, ByVal dwValue As Long)
        Sub GetDWORD(ByVal pszValueName As LongPtr, ByRef pdwValue As Long)
        Sub OpenKey(ByVal pszSubKeyName As LongPtr, ByRef ppSubKey As ISpDataKey)
        Sub CreateKey(ByVal pszSubKey As LongPtr, ByRef ppSubKey As ISpDataKey)
        Sub DeleteKey(ByVal pszSubKey As LongPtr)
        Sub DeleteValue(ByVal pszValueName As LongPtr)
        Sub EnumKeys(ByVal Index As Long, ByRef ppszSubKeyName As LongPtr)
        Sub EnumValues(ByVal Index As Long, ByRef ppszValueName As LongPtr)
    End Interface

    [InterfaceId("2D3D3845-39AF-4850-BBF9-40B49780011D")]
    ' [ Restricted ]
    [Description("ISpObjectTokenCategory")]
    [OleAutomation(False)]
    Interface ISpObjectTokenCategory Extends ISpDataKey
        Sub SetId(ByVal pszCategoryId As LongPtr, ByVal fCreateIfNotExist As Long)
        Sub GetId(ByRef ppszCoMemCategoryId As LongPtr)
        Sub GetDataKey(ByVal spdkl As SPDATAKEYLOCATION, ByRef ppDataKey As ISpDataKey)
        Sub EnumTokens(ByVal pzsReqAttribs As LongPtr, ByVal pszOptAttribs As LongPtr, ByRef ppEnum As IEnumSpObjectTokens)
        Sub SetDefaultTokenId(ByVal pszTokenId As LongPtr)
        Sub GetDefaultTokenId(ByRef ppszCoMemTokenId As LongPtr)
    End Interface

    [InterfaceId("06B64F9E-7FDA-11D2-B4F2-00C04F797396")]
    ' [ Restricted ]
    [Description("IEnumSpObjectTokens Interface")]
    [OleAutomation(False)]
    Interface IEnumSpObjectTokens Extends stdole.IUnknown
        Sub Next(ByVal celt As Long, ByRef pelt As ISpObjectToken, ByRef pceltFetched As Long)
        Sub Skip(ByVal celt As Long)
        Sub Reset()
        Sub Clone(ByRef ppEnum As IEnumSpObjectTokens)
        Sub Item(ByVal Index As Long, ByRef ppToken As ISpObjectToken)
        Sub GetCount(ByRef pCount As Long)
    End Interface

    [InterfaceId("14056589-E16C-11D2-BB90-00C04F8EE6C0")]
    ' [ Restricted ]
    [Description("ISpObjectToken Interface")]
    [OleAutomation(False)]
    Interface ISpObjectToken Extends ISpDataKey
        Sub SetId(ByVal pszCategoryId As LongPtr, ByVal pszTokenId As LongPtr, ByVal fCreateIfNotExist As Long)
        Sub GetId(ByRef ppszCoMemTokenId As LongPtr)
        Sub GetCategory(ByRef ppTokenCategory As ISpObjectTokenCategory)
        Sub CreateInstance(ByVal pUnkOuter As IUnknown, ByVal dwClsContext As Long, ByRef riid As UUID, ByRef ppvObject As Any)
        Sub GetStorageFileName(ByRef clsidCaller As UUID, ByVal pszValueName As LongPtr, ByVal pszFileNameSpecifier As LongPtr, ByVal nFolder As Long, ByRef ppszFilePath As LongPtr)
        Sub RemoveStorageFileName(ByRef clsidCaller As UUID, ByVal pszKeyName As LongPtr, ByVal fDeleteFile As Long)
        Sub Remove(ByRef pclsidCaller As UUID)
        Sub IsUISupported(ByVal pszTypeOfUI As LongPtr, ByRef pvExtraData As Any, ByVal cbExtraData As Long, ByVal punkObject As IUnknown, ByRef pfSupported As Long)
        Sub DisplayUI(ByVal hWndParent As LongPtr, ByVal pszTitle As LongPtr, ByVal pszTypeOfUI As LongPtr, ByRef pvExtraData As Any, ByVal cbExtraData As Long, ByVal punkObject As IUnknown)
        Sub MatchesAttributes(ByVal pszAttributes As LongPtr, ByRef pfMatches As Long)
    End Interface


    [InterfaceId("93384E18-5014-43D5-ADBB-A78E055926BD")]
    ' [ Restricted ]
    [Description("ISpResourceManager Interface")]
    [OleAutomation(False)]
    Interface ISpResourceManager Extends IServiceProvider
        Sub SetObject(ByRef guidServiceId As UUID, ByVal punkObject As IUnknown)
        Sub GetObject(ByRef guidServiceId As UUID, ByRef ObjectCLSID As UUID, ByRef ObjectIID As UUID, ByVal fReleaseWhenLastExternalRefReleased As Long, ByRef ppObject As Any)
    End Interface

    [InterfaceId("BED530BE-2606-4F4D-A1C0-54C5CDA5566F")]
    ' [ Restricted ]
    [Description("ISpStreamFormat Interface")]
    [OleAutomation(False)]
    Interface ISpStreamFormat Extends IStream
        Sub GetFormat(ByRef pguidFormatId As UUID, ByRef ppCoMemWaveFormatEx As WAVEFORMATEX)
    End Interface

    [InterfaceId("678A932C-EA71-4446-9B41-78FDA6280A29")]
    ' [ Restricted ]
    [Description("ISpStreamFormatConverter Interface")]
    [OleAutomation(False)]
    Interface ISpStreamFormatConverter Extends ISpStreamFormat
        Sub SetBaseStream(ByVal pStream As ISpStreamFormat, ByVal fSetFormatToBaseStreamFormat As Long, ByVal fWriteToBaseStream As Long)
        Sub GetBaseStream(ByRef ppStream As ISpStreamFormat)
        Sub SetFormat(ByRef rguidFormatIdOfConvertedStream As UUID, ByRef pWaveFormatExOfConvertedStream As WAVEFORMATEX)
        Sub ResetSeekPosition()
        Sub ScaleConvertedToBaseOffset(ByVal ullOffsetConvertedStream As LongLong, ByRef pullOffsetBaseStream As LongLong)
        Sub ScaleBaseToConvertedOffset(ByVal ullOffsetBaseStream As LongLong, ByRef pullOffsetConvertedStream As LongLong)
    End Interface
    
    [InterfaceId("5EFF4AEF-8487-11D2-961C-00C04F8EE628")]
    ' [ Restricted ]
    [Description("ISpNotifySource Interface")]
    [OleAutomation(False)]
    Interface ISpNotifySource Extends stdole.IUnknown
        Sub SetNotifySink(ByVal pNotifySink As ISpNotifySink)
        Sub SetNotifyWindowMessage(ByVal hWnd As LongPtr, ByVal Msg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr)
        Sub SetNotifyCallbackFunction(ByVal pfnCallback As LongPtr, ByVal wParam As LongPtr, ByVal lParam As LongPtr)
        Sub SetNotifyCallbackInterface(ByRef pSpCallback As Any, ByVal wParam As LongPtr, ByVal lParam As LongPtr)
        Sub SetNotifyWin32Event()
        Sub WaitForNotifyEvent(ByVal dwMilliseconds As Long)
        [PreserveSig]
        Function GetNotifyEventHandle() As LongPtr
    End Interface
    [InterfaceId("BE7A9CCE-5F9E-11D2-960F-00C04F8EE628")]
    ' [ Restricted ]
    [Description("ISpEventSource Interface")]
    [OleAutomation(False)]
    Interface ISpEventSource Extends ISpNotifySource
        Sub SetInterest(ByVal ullEventInterest As LongLong, ByVal ullQueuedInterest As LongLong)
        Sub GetEvents(ByVal ulCount As Long, ByRef pEventArray As SPEVENT, ByRef pulFetched As Long)
        Sub GetInfo(ByRef pInfo As SPEVENTSOURCEINFO)
    End Interface
    [InterfaceId("2373A435-6A4B-429e-A6AC-D4231A61975B")]
    [OleAutomation(False)]
    Interface ISpEventSource2 Extends ISpEventSource
        Sub GetEventsEx(ByVal ulCount As Long, pEventArray As SPEVENTEX, pulFetched As Long)
    End Interface

    [InterfaceId("C8D7C7E2-0DDE-44b7-AFE3-B0C991FBEB5E")]
    [OleAutomation(False)]
    Interface ISpDisplayAlternates Extends stdole.IUnknown
        Sub GetDisplayAlternates(pPhrase As SPDISPLAYPHRASE, ByVal cRequestCount As Long, ppCoMemPhrases As SPDISPLAYPHRASE, pcPhrasesReturned As Long)
        Sub SetFullStopTrailSpace(ByVal ulTrailSpace As Long)
    End Interface


    [InterfaceId("BE7A9CC9-5F9E-11D2-960F-00C04F8EE628")]
    ' [ Restricted ]
    [Description("ISpEventSink Interface")]
    [OleAutomation(False)]
    Interface ISpEventSink Extends stdole.IUnknown
        Sub AddEvents(ByRef pEventArray As SPEVENT, ByVal ulCount As Long)
        Sub GetEventInterest(ByRef pullEventInterest As LongLong)
    End Interface

    [InterfaceId("5B559F40-E952-11D2-BB91-00C04F8EE6C0")]
    ' [ Restricted ]
    [Description("ISpObjectWithToken Interface")]
    [OleAutomation(False)]
    Interface ISpObjectWithToken Extends stdole.IUnknown
        Sub SetObjectToken(ByVal pToken As ISpObjectToken)
        Sub GetObjectToken(ByRef ppToken As ISpObjectToken)
    End Interface

    [InterfaceId("C05C768F-FAE8-4EC2-8E07-338321C12452")]
    ' [ Restricted ]
    [Description("ISpAudio Interface")]
    [OleAutomation(False)]
    Interface ISpAudio Extends ISpStreamFormat
        Sub SetState(ByVal NewState As SPAUDIOSTATE, ByVal ullReserved As LongLong)
        Sub SetFormat(ByRef rguidFmtId As UUID, ByRef pWaveFormatEx As WAVEFORMATEX)
        Sub GetStatus(ByRef pStatus As SPAUDIOSTATUS)
        Sub SetBufferInfo(ByRef pBuffInfo As SPAUDIOBUFFERINFO)
        Sub GetBufferInfo(ByRef pBuffInfo As SPAUDIOBUFFERINFO)
        Sub GetDefaultFormat(ByRef pFormatId As UUID, ByRef ppCoMemWaveFormatEx As WAVEFORMATEX)
        [PreserveSig]
        Sub EventHandle()
        Sub GetVolumeLevel(ByRef pLevel As Long)
        Sub SetVolumeLevel(ByVal Level As Long)
        Sub GetBufferNotifySize(ByRef pcbSize As Long)
        Sub SetBufferNotifySize(ByVal cbSize As Long)
    End Interface
    
    [InterfaceId("15806F6E-1D70-4B48-98E6-3B1A007509AB")]
    ' [ Restricted ]
    [Description("ISpMMSysAudio Interface")]
    [OleAutomation(False)]
    Interface ISpMMSysAudio Extends ISpAudio
        Sub GetDeviceId(ByRef puDeviceId As Long)
        Sub SetDeviceId(ByVal uDeviceId As Long)
        Sub GetMMHandle(ByRef pHandle As LongPtr)
        Sub GetLineId(ByRef puLineId As Long)
        Sub SetLineId(ByVal uLineId As Long)
    End Interface


    [InterfaceId("12E3CCA9-7518-44C5-A5E7-BA5A79CB929E")]
    ' [ Restricted ]
    [Description("ISpStream Interface")]
    [OleAutomation(False)]
    Interface ISpStream Extends ISpStreamFormat
        Sub SetBaseStream(ByVal pStream As IStream, ByRef rguidFormat As UUID, ByRef pWaveFormatEx As WAVEFORMATEX)
        Sub GetBaseStream(ByRef ppStream As IStream)
        Sub BindToFile(ByVal pszFileName As LongPtr, ByVal eMode As SPFILEMODE, ByRef pFormatId As UUID, ByRef pWaveFormatEx As WAVEFORMATEX, ByVal ullEventInterest As LongLong)
        Sub Close()
    End Interface

    [InterfaceId("6C44DF74-72B9-4992-A1EC-EF996E0422D4")]
    ' [ Restricted ]
    [Description("ISpVoice Interface")]
    [OleAutomation(False)]
    Interface ISpVoice Extends ISpEventSource
        Sub SetOutput(ByVal pUnkOutput As IUnknown, ByVal fAllowFormatChanges As Long)
        Sub GetOutputObjectToken(ByRef ppObjectToken As ISpObjectToken)
        Sub GetOutputStream(ByRef ppStream As ISpStreamFormat)
        Sub Pause()
        Sub Resume()
        Sub SetVoice(ByVal pToken As ISpObjectToken)
        Sub GetVoice(ByRef ppToken As ISpObjectToken)
        Sub Speak(ByVal pwcs As LongPtr, ByVal dwFlags As SPEAKFLAGS, ByRef pulStreamNumber As Long)
        Sub SpeakStream(ByVal pStream As IStream, ByVal dwFlags As SPEAKFLAGS, ByRef pulStreamNumber As Long)
        Sub GetStatus(ByRef pStatus As SPVOICESTATUS, ByRef ppszLastBookmark As LongPtr)
        Sub Skip(ByVal pItemType As LongPtr, ByVal lNumItems As Long, ByRef pulNumSkipped As Long)
        Sub SetPriority(ByVal ePriority As SPVPRIORITY)
        Sub GetPriority(ByRef pePriority As SPVPRIORITY)
        Sub SetAlertBoundary(ByVal eBoundary As SPEVENTENUM)
        Sub GetAlertBoundary(ByRef peBoundary As SPEVENTENUM)
        Sub SetRate(ByVal RateAdjust As Long)
        Sub GetRate(ByRef pRateAdjust As Long)
        Sub SetVolume(ByVal usVolume As Integer)
        Sub GetVolume(ByRef pusVolume As Integer)
        Sub WaitUntilDone(ByVal msTimeout As Long)
        Sub SetSyncSpeakTimeout(ByVal msTimeout As Long)
        Sub GetSyncSpeakTimeout(ByRef pmsTimeout As Long)
        [PreserveSig]
        Function SpeakCompleteEvent() As LongPtr
        Sub IsUISupported(ByVal pszTypeOfUI As LongPtr, ByRef pvExtraData As Any, ByVal cbExtraData As Long, ByRef pfSupported As Long)
        Sub DisplayUI(ByVal hWndParent As LongPtr, ByVal pszTitle As LongPtr, ByVal pszTypeOfUI As LongPtr, ByRef pvExtraData As Any, ByVal cbExtraData As Long)
    End Interface

    [InterfaceId("B2745EFD-42CE-48CA-81F1-A96E02538A90")]
    ' [ Restricted ]
    [Description("ISpPhoneticAlphabetSelection Interface")]
    [OleAutomation(False)]
    Interface ISpPhoneticAlphabetSelection Extends stdole.IUnknown
        Sub IsAlphabetUPS(ByRef pfIsUPS As Long)
        Sub SetAlphabetToUPS(ByVal fForceUPS As Long)
    End Interface

    [InterfaceId("F740A62F-7C15-489E-8234-940A33D9272D")]
    ' [ Restricted ]
    [Description("ISpRecoContext Interface")]
    [OleAutomation(False)]
    Interface ISpRecoContext Extends ISpEventSource
        Sub GetRecognizer(ByRef ppRecognizer As ISpRecognizer)
        Sub CreateGrammar(ByVal ullGrammarID As LongLong, ByRef ppGrammar As ISpRecoGrammar)
        Sub GetStatus(ByRef pStatus As SPRECOCONTEXTSTATUS)
        Sub GetMaxAlternates(ByRef pcAlternates As Long)
        Sub SetMaxAlternates(ByVal cAlternates As Long)
        Sub SetAudioOptions(ByVal Options As SPAUDIOOPTIONS, ByRef pAudioFormatId As UUID, ByRef pWaveFormatEx As WAVEFORMATEX)
        Sub GetAudioOptions(ByRef pOptions As SPAUDIOOPTIONS, ByRef pAudioFormatId As UUID, ByRef ppCoMemWFEX As WAVEFORMATEX)
        Sub DeserializeResult(ByRef pSerializedResult As SPSERIALIZEDRESULT, ByRef ppResult As ISpRecoResult)
        Sub Bookmark(ByVal Options As SPBOOKMARKOPTIONS, ByVal ullStreamPosition As LongLong, ByVal lparamEvent As LongPtr)
        Sub SetAdaptationData(ByVal pAdaptationData As LongPtr, ByVal cch As Long)
        Sub Pause(ByVal dwReserved As Long)
        Sub Resume(ByVal dwReserved As Long)
        Sub SetVoice(ByVal pVoice As ISpVoice, ByVal fAllowFormatChanges As Long)
        Sub GetVoice(ByRef ppVoice As ISpVoice)
        Sub SetVoicePurgeEvent(ByVal ullEventInterest As LongLong)
        Sub GetVoicePurgeEvent(ByRef pullEventInterest As LongLong)
        Sub SetContextState(ByVal eContextState As SPCONTEXTSTATE)
        Sub GetContextState(ByRef peContextState As SPCONTEXTSTATE)
    End Interface

    [InterfaceId("5B4FB971-B115-4DE1-AD97-E482E3BF6EE4")]
    ' [ Restricted ]
    [Description("ISpProperties Interface")]
    [OleAutomation(False)]
    Interface ISpProperties Extends stdole.IUnknown
        Sub SetPropertyNum(ByVal pName As LongPtr, ByVal lValue As Long)
        Sub GetPropertyNum(ByVal pName As LongPtr, ByRef plValue As Long)
        Sub SetPropertyString(ByVal pName As LongPtr, ByVal pValue As LongPtr)
        Sub GetPropertyString(ByVal pName As LongPtr, ByRef ppCoMemValue As LongPtr)
    End Interface

    [InterfaceId("C2B5F241-DAA0-4507-9E16-5A1EAA2B7A5C")]
    ' [ Restricted ]
    [Description("ISpRecognizer Interface")]
    [OleAutomation(False)]
    Interface ISpRecognizer Extends ISpProperties
        Sub SetRecognizer(ByVal pRecognizer As ISpObjectToken)
        Sub GetRecognizer(ByRef ppRecognizer As ISpObjectToken)
        Sub SetInput(ByVal pUnkInput As IUnknown, ByVal fAllowFormatChanges As Long)
        Sub GetInputObjectToken(ByRef ppToken As ISpObjectToken)
        Sub GetInputStream(ByRef ppStream As ISpStreamFormat)
        Sub CreateRecoContext(ByRef ppNewCtxt As ISpRecoContext)
        Sub GetRecoProfile(ByRef ppToken As ISpObjectToken)
        Sub SetRecoProfile(ByVal pToken As ISpObjectToken)
        Sub IsSharedInstance()
        Sub GetRecoState(ByRef pState As SPRECOSTATE)
        Sub SetRecoState(ByVal NewState As SPRECOSTATE)
        Sub GetStatus(ByRef pStatus As SPRECOGNIZERSTATUS)
        Sub GetFormat(ByVal WaveFormatType As SPWAVEFORMATTYPE, ByRef pFormatId As UUID, ByRef ppCoMemWFEX As WAVEFORMATEX)
        Sub IsUISupported(ByVal pszTypeOfUI As LongPtr, ByRef pvExtraData As Any, ByVal cbExtraData As Long, ByRef pfSupported As Long)
        Sub DisplayUI(ByVal hWndParent As LongPtr, ByVal pszTitle As LongPtr, ByVal pszTypeOfUI As LongPtr, ByRef pvExtraData As Any, ByVal cbExtraData As Long)
        Sub EmulateRecognition(ByVal pPhrase As ISpPhrase)
    End Interface

    [InterfaceId("1A5C0354-B621-4B5A-8791-D306ED379E53")]
    ' [ Restricted ]
    [Description("ISpPhrase Interface")]
    [OleAutomation(False)]
    Interface ISpPhrase Extends stdole.IUnknown
        Sub GetPhrase(ByRef ppCoMemPhrase As SPPHRASE)
        Sub GetSerializedPhrase(ByRef ppCoMemPhrase As SPSERIALIZEDPHRASE)
        Sub GetText(ByVal ulStart As Long, ByVal ulCount As Long, ByVal fUseTextReplacements As Long, ByRef ppszCoMemText As LongPtr, Optional ByRef pbDisplayAttributes As Byte)
        Sub Discard(ByVal dwValueTypes As Long)
    End Interface
    [InterfaceId("F264DA52-E457-4696-B856-A737B717AF79")]
    [OleAutomation(False)]
    Interface ISpPhrase2 Extends ISpPhrase
        Sub GetXMLResult(ppszCoMemXMLResult As LongPtr, ByVal Options As SPXMLRESULTOPTIONS)
        Sub GetXMLErrorInfo(pSemanticErrorInfo As SPSEMANTICERRORINFO)
        Sub GetAudio(ByVal ulStartElement As Long, ByVal cElements As Long, ppStream As ISpStreamFormat)
    End Interface


    [InterfaceId("8137828F-591A-4A42-BE58-49EA7EBAAC68")]
    ' [ Restricted ]
    [Description("ISpGrammarBuilder Interface")]
    [OleAutomation(False)]
    Interface ISpGrammarBuilder Extends stdole.IUnknown
        Sub ResetGrammar(ByVal NewLanguage As Integer)
        Sub GetRule(ByVal pszRuleName As LongPtr, ByVal dwRuleId As Long, ByVal dwAttributes As Long, ByVal fCreateIfNotExist As Long, ByRef phInitialState As LongPtr)
        Sub ClearRule(ByVal hState As LongPtr)
        Sub CreateNewState(ByVal hState As LongPtr, ByRef phState As LongPtr)
        Sub AddWordTransition(ByVal hFromState As LongPtr, ByVal hToState As LongPtr, ByVal psz As LongPtr, ByVal pszSeparators As LongPtr, ByVal eWordType As SPGRAMMARWORDTYPE, ByVal Weight As Single, ByRef pPropInfo As SPPROPERTYINFO)
        Sub AddRuleTransition(ByVal hFromState As LongPtr, ByVal hToState As LongPtr, ByVal hRule As LongPtr, ByVal Weight As Single, ByRef pPropInfo As SPPROPERTYINFO)
        Sub AddResource(ByVal hRuleState As LongPtr, ByVal pszResourceName As LongPtr, ByVal pszResourceValue As LongPtr)
        Sub Commit(ByVal dwReserved As Long)
    End Interface
    [InterfaceId("8AB10026-20CC-4b20-8C22-A49C9BA78F60")]
    [OleAutomation(False)]
    Interface ISpGrammarBuilder2 Extends stdole.IUnknown
        Sub AddTextSubset(ByVal hFromState As LongPtr, ByVal hToState As LongPtr, ByVal psz As LongPtr, ByVal eMatchMode As SPMATCHINGMODE)
        Sub SetPhoneticAlphabet(ByVal phoneticAlphabet As PHONETICALPHABET)
    End Interface

    [InterfaceId("2177DB29-7F45-47D0-8554-067E91C80502")]
    ' [ Restricted ]
    [Description("ISpRecoGrammar Interface")]
    [OleAutomation(False)]
    Interface ISpRecoGrammar Extends ISpGrammarBuilder
        Sub GetGrammarId(ByRef pullGrammarId As LongLong)
        Sub GetRecoContext(ByRef ppRecoCtxt As ISpRecoContext)
        Sub LoadCmdFromFile(ByVal pszFileName As LongPtr, ByVal Options As SPLOADOPTIONS)
        Sub LoadCmdFromObject(ByRef rcid As UUID, ByVal pszGrammarName As LongPtr, ByVal Options As SPLOADOPTIONS)
        Sub LoadCmdFromResource(ByVal hModule As LongPtr, ByVal pszResourceName As LongPtr, ByVal pszResourceType As LongPtr, ByVal wLanguage As Integer, ByVal Options As SPLOADOPTIONS)
        Sub LoadCmdFromMemory(ByRef pGrammar As SPBINARYGRAMMAR, ByVal Options As SPLOADOPTIONS)
        Sub LoadCmdFromProprietaryGrammar(ByRef rguidParam As UUID, ByVal pszStringParam As LongPtr, ByRef pvDataPrarm As Any, ByVal cbDataSize As Long, ByVal Options As SPLOADOPTIONS)
        Sub SetRuleState(ByVal pszName As LongPtr, ByRef pReserved As Any, ByVal NewState As SPRULESTATE)
        Sub SetRuleIdState(ByVal ulRuleId As Long, ByVal NewState As SPRULESTATE)
        Sub LoadDictation(ByVal pszTopicName As LongPtr, ByVal Options As SPLOADOPTIONS)
        Sub UnloadDictation()
        Sub SetDictationState(ByVal NewState As SPRULESTATE)
        Sub SetWordSequenceData(ByRef pText As Integer, ByVal cchText As Long, ByRef pInfo As SPTEXTSELECTIONINFO)
        Sub SetTextSelection(ByRef pInfo As SPTEXTSELECTIONINFO)
        Sub IsPronounceable(ByVal pszWord As LongPtr, ByRef pWordPronounceable As SPWORDPRONOUNCEABLE)
        Sub SetGrammarState(ByVal eGrammarState As SPGRAMMARSTATE)
        Sub SaveCmd(ByVal pStream As IStream, Optional ByRef ppszCoMemErrorText As LongPtr)
        Sub GetGrammarState(ByRef peGrammarState As SPGRAMMARSTATE)
    End Interface


    [InterfaceId("20B053BE-E235-43CD-9A2A-8D17A48B7842")]
    ' [ Restricted ]
    [Description("ISpRecoResult Interface")]
    [OleAutomation(False)]
    Interface ISpRecoResult Extends ISpPhrase
        Sub GetResultTimes(ByRef pTimes As SPRECORESULTTIMES)
        Sub GetAlternates(ByVal ulStartElement As Long, ByVal cElements As Long, ByVal ulRequestCount As Long, ByRef ppPhrases As ISpPhraseAlt, ByRef pcPhrasesReturned As Long)
        Sub GetAudio(ByVal ulStartElement As Long, ByVal cElements As Long, ByRef ppStream As ISpStreamFormat)
        Sub SpeakAudio(ByVal ulStartElement As Long, ByVal cElements As Long, ByVal dwFlags As Long, ByRef pulStreamNumber As Long)
        Sub Serialize(ByRef ppCoMemSerializedResult As SPSERIALIZEDRESULT)
        Sub ScaleAudio(ByRef pAudioFormatId As UUID, ByRef pWaveFormatEx As WAVEFORMATEX)
        Sub GetRecoContext(ByRef ppRecoContext As ISpRecoContext)
    End Interface
    [InterfaceId("27CAC6C4-88F2-41f2-8817-0C95E59F1E6E")]
    [OleAutomation(False)]
    Interface ISpRecoResult2 Extends ISpRecoResult
        Sub CommitAlternate(ByVal pPhraseAlt As ISpPhraseAlt, ppNewResult As ISpRecoResult)
        Sub CommitText(ByVal ulStartElement As Long, ByVal cElements As Long, ByVal pszCorrectedData As LongPtr, ByVal eCommitFlags As SPCOMMITFLAGS)
        Sub SetTextFeedback(ByVal pszFeedback As LongPtr, ByVal fSuccessful As BOOL)
    End Interface

    [InterfaceId("8FCEBC98-4E49-4067-9C6C-D86A0E092E3D")]
    ' [ Restricted ]
    [Description("ISpPhraseAlt Interface")]
    [OleAutomation(False)]
    Interface ISpPhraseAlt Extends ISpPhrase
        Sub GetAltInfo(ByRef ppParent As ISpPhrase, ByRef pulStartElementInParent As Long, ByRef pcElementsInParent As Long, ByRef pcElementsInAlt As Long)
        Sub Commit()
    End Interface

    [InterfaceId("BEAD311C-52FF-437F-9464-6B21054CA73D")]
    ' [ Restricted ]
    [Description("ISpRecoContext2 Interface")]
    [OleAutomation(False)]
    Interface ISpRecoContext2 Extends stdole.IUnknown
        Sub SetGrammarOptions(ByVal eGrammarOptions As Long)
        Sub GetGrammarOptions(ByRef peGrammarOptions As Long)
        Sub SetAdaptationData2(ByVal pAdaptationData As LongPtr, ByVal cch As Long, ByVal pTopicName As LongPtr, ByVal eAdaptationSettings As Long, ByVal eRelevance As SPADAPTATIONRELEVANCE)
    End Interface

    [InterfaceId("8FC6D974-C81E-4098-93C5-0147F61ED4D3")]
    ' [ Restricted ]
    [Description("ISpRecognizer2 Interface")]
    [OleAutomation(False)]
    Interface ISpRecognizer2 Extends stdole.IUnknown
        Sub EmulateRecognitionEx(ByVal pPhrase As ISpPhrase, ByVal dwCompareFlags As Long)
        Sub SetTrainingState(ByVal fDoingTraining As Long, ByVal fAdaptFromTrainingData As Long)
        Sub ResetAcousticModelAdaptation()
    End Interface

    [InterfaceId("DF1B943C-5838-4AA2-8706-D7CD5B333499")]
    ' [ Restricted ]
    [Description("ISpRecognizer3 Interface")]
    [OleAutomation(False)]
    Interface ISpRecognizer3 Extends stdole.IUnknown
        Sub GetCategory(ByVal categoryType As SPCATEGORYTYPE, ByRef ppCategory As ISpRecoCategory)
        Sub SetActiveCategory(ByVal pCategory As ISpRecoCategory)
        Sub GetActiveCategory(ByRef ppCategory As ISpRecoCategory)
    End Interface

    [InterfaceId("DA0CD0F9-14A2-4F09-8C2A-85CC48979345")]
    ' [ Restricted ]
    [Description("ISpRecoCategory Interface")]
    [OleAutomation(False)]
    Interface ISpRecoCategory Extends stdole.IUnknown
        Sub GetType(ByRef peCategoryType As SPCATEGORYTYPE)
    End Interface

    [InterfaceId("21B501A0-0EC7-46C9-92C3-A2BC784C54B9")]
    ' [ Restricted ]
    [Description("ISpSerializeState Interface")]
    [OleAutomation(False)]
    Interface ISpSerializeState Extends stdole.IUnknown
        Sub GetSerializedState(ByRef ppbData As Byte, ByRef pulSize As Long, ByVal dwReserved As Long)
        Sub SetSerializedState(ByRef pbData As Byte, ByVal ulSize As Long, ByVal dwReserved As Long)
    End Interface

    [InterfaceId("10F63BCE-201A-11D3-AC70-00C04F8EE6C0")]
    [OleAutomation(False)]
    Interface ISpTranscript Extends stdole.IUnknown
        Sub GetTranscript(ppszTranscript As LongPtr)
        Sub AppendTranscript(ByVal pszTranscript As LongPtr)
    End Interface

    [InterfaceId("C360CE4B-76D1-4214-AD68-52657D5083DA")]
    [OleAutomation(False)]
    Interface ISpEnginePronunciation Extends stdole.IUnknown
        Sub Normalize(ByVal pszWord As LongPtr, ByVal pszLeftContext As LongPtr, ByVal pszRightContext As LongPtr, ByVal LandID As Long, pNormalizationList As SPNORMALIZATIONLIST)
        Sub GetPronunciations(ByVal pszWord As LongPtr, ByVal pszLeftContext As LongPtr, ByVal pszRightContext As LongPtr, ByVal LandID As Long, pEnginePronunciationList As SPWORDPRONUNCIATIONLIST)
    End Interface


    [InterfaceId("DA41A7C2-5383-4DB2-916B-6C1719E3DB58")]
    ' [ Restricted ]
    [Description("ISpLexicon Interface")]
    [OleAutomation(False)]
    Interface ISpLexicon Extends stdole.IUnknown
        Sub GetPronunciations(ByVal pszWord As LongPtr, ByVal LangId As Integer, ByVal dwFlags As Long, ByRef pWordPronunciationList As SPWORDPRONUNCIATIONLIST)
        Sub AddPronunciation(ByVal pszWord As LongPtr, ByVal LangId As Integer, ByVal ePartOfSpeech As SPPARTOFSPEECH, ByVal pszPronunciation As LongPtr)
        Sub RemovePronunciation(ByVal pszWord As LongPtr, ByVal LangId As Integer, ByVal ePartOfSpeech As SPPARTOFSPEECH, ByVal pszPronunciation As LongPtr)
        Sub GetGeneration(ByRef pdwGeneration As Long)
        Sub GetGenerationChange(ByVal dwFlags As Long, ByRef pdwGeneration As Long, ByRef pWordList As SPWORDLIST)
        Sub GetWords(ByVal dwFlags As Long, ByRef pdwGeneration As Long, ByRef pdwCookie As Long, ByRef pWordList As SPWORDLIST)
    End Interface

    [InterfaceId("8565572F-C094-41CC-B56E-10BD9C3FF044")]
    [OleAutomation(False)]
    Interface ISpContainerLexicon Extends ISpLexicon
        Sub AddLexicon(ByVal pAddLexicon As ISpLexicon, ByVal dwFlags As Long)
    End Interface
    
    [InterfaceId("3DF681E2-EA56-11D9-8BDE-F66BAD1E3F3A")]
    ' [ Restricted ]
    [Description("ISpShortcut Interface")]
    [OleAutomation(False)]
    Interface ISpShortcut Extends stdole.IUnknown
        Sub AddShortcut(ByVal pszDisplay As LongPtr, ByVal LangId As Integer, ByVal pszSpoken As LongPtr, ByVal shType As SPSHORTCUTTYPE)
        Sub RemoveShortcut(ByVal pszDisplay As LongPtr, ByVal LangId As Integer, ByVal pszSpoken As LongPtr, ByVal shType As SPSHORTCUTTYPE)
        Sub GetShortcuts(ByVal LangId As Integer, ByRef pShortcutpairList As SPSHORTCUTPAIRLIST)
        Sub GetGeneration(ByRef pdwGeneration As Long)
        Sub GetWordsFromGenerationChange(ByRef pdwGeneration As Long, ByRef pWordList As SPWORDLIST)
        Sub GetWords(ByRef pdwGeneration As Long, ByRef pdwCookie As Long, ByRef pWordList As SPWORDLIST)
        Sub GetShortcutsForGeneration(ByRef pdwGeneration As Long, ByRef pdwCookie As Long, ByRef pShortcutpairList As SPSHORTCUTPAIRLIST)
        Sub GetGenerationChange(ByRef pdwGeneration As Long, ByRef pShortcutpairList As SPSHORTCUTPAIRLIST)
    End Interface
    [InterfaceId("8445C581-0CAC-4A38-ABFE-9B2CE2826455")]
    ' [ Restricted ]
    [Description("ISpPhoneConverter Interface")]
    [OleAutomation(False)]
    Interface ISpPhoneConverter Extends ISpObjectWithToken
        Sub PhoneToId(ByVal pszPhone As LongPtr, ByRef pId As Integer)
        Sub IdToPhone(ByVal pId As LongPtr, ByRef pszPhone As Integer)
    End Interface


    [InterfaceId("133ADCD4-19B4-4020-9FDC-842E78253B17")]
    ' [ Restricted ]
    [Description("ISpPhoneticAlphabetConverter Interface")]
    [OleAutomation(False)]
    Interface ISpPhoneticAlphabetConverter Extends stdole.IUnknown
        Sub GetLangId(ByRef pLangID As Integer)
        Sub SetLangId(ByVal LangId As Integer)
        Sub SAPI2UPS(ByRef pszSAPIId As Integer, ByRef pszUPSId As Integer, ByVal cMaxLength As Long)
        Sub UPS2SAPI(ByRef pszUPSId As Integer, ByRef pszSAPIId As Integer, ByVal cMaxLength As Long)
        Sub GetMaxConvertLength(ByVal cSrcLength As Long, ByVal bSAPI2UPS As Long, ByRef pcMaxDestLength As Long)
    End Interface

    [InterfaceId("AE39362B-45A8-4074-9B9E-CCF49AA2D0B6")]
    ' [ Restricted ]
    [Description("ISpXMLRecoResult Interface")]
    [OleAutomation(False)]
    Interface ISpXMLRecoResult Extends ISpRecoResult
        Sub GetXMLResult(ByRef ppszCoMemXMLResult As LongPtr, ByVal Options As SPXMLRESULTOPTIONS)
        Sub GetXMLErrorInfo(ByRef pSemanticErrorInfo As SPSEMANTICERRORINFO)
    End Interface

    [InterfaceId("4B37BC9E-9ED6-44A3-93D3-18F022B79EC3")]
    ' [ Restricted ]
    [Description("ISpRecoGrammar2 Interface")]
    [OleAutomation(False)]
    Interface ISpRecoGrammar2 Extends stdole.IUnknown
        Sub GetRules(ByRef ppCoMemRules As SPRULE, ByRef puNumRules As Long)
        Sub LoadCmdFromFile2(ByVal pszFileName As LongPtr, ByVal Options As SPLOADOPTIONS, ByVal pszSharingUri As LongPtr, ByVal pszBaseUri As LongPtr)
        Sub LoadCmdFromMemory2(ByRef pGrammar As SPBINARYGRAMMAR, ByVal Options As SPLOADOPTIONS, ByVal pszSharingUri As LongPtr, ByVal pszBaseUri As LongPtr)
        Sub SetRulePriority(ByVal pszRuleName As LongPtr, ByVal ulRuleId As Long, ByVal nRulePriority As Long)
        Sub SetRuleWeight(ByVal pszRuleName As LongPtr, ByVal ulRuleId As Long, ByVal flWeight As Single)
        Sub SetDictationWeight(ByVal flWeight As Single)
        Sub SetGrammarLoader(ByVal pLoader As ISpeechResourceLoader)
        Sub SetSMLSecurityManager(ByVal pSMLSecurityManager As IInternetSecurityManager)
    End Interface






'Automation:

    [InterfaceId("CE17C09B-4EFA-44D5-A4C9-59D9585AB0CD")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechDataKey Interface")]
    Interface ISpeechDataKey Extends stdole.IDispatch
        [DispId(1)]
        [Description("SetBinaryValue")]
        Sub SetBinaryValue(ByVal ValueName As String, ByVal Value As Variant)
        [DispId(2)]
        [Description("GetBinaryValue")]
        Function GetBinaryValue(ByVal ValueName As String) As Variant
        [DispId(3)]
        [Description("SetStringValue")]
        Sub SetStringValue(ByVal ValueName As String, ByVal Value As String)
        [DispId(4)]
        [Description("GetStringValue")]
        Function GetStringValue(ByVal ValueName As String) As String
        [DispId(5)]
        [Description("SetLongValue")]
        Sub SetLongValue(ByVal ValueName As String, ByVal Value As Long)
        [DispId(6)]
        [Description("GetlongValue")]
        Function GetLongValue(ByVal ValueName As String) As Long
        [DispId(7)]
        [Description("OpenKey")]
        Function OpenKey(ByVal SubKeyName As String) As ISpeechDataKey
        [DispId(8)]
        [Description("CreateKey")]
        Function CreateKey(ByVal SubKeyName As String) As ISpeechDataKey
        [DispId(9)]
        [Description("DeleteKey")]
        Sub DeleteKey(ByVal SubKeyName As String)
        [DispId(10)]
        [Description("DeleteValue")]
        Sub DeleteValue(ByVal ValueName As String)
        [DispId(11)]
        [Description("EnumKeys")]
        Function EnumKeys(ByVal Index As Long) As String
        [DispId(12)]
        [Description("EnumValues")]
        Function EnumValues(ByVal Index As Long) As String
    End Interface

    [InterfaceId("C74A3ADC-B727-4500-A84A-B526721C8B8C")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechObjectToken Interface")]
    Interface ISpeechObjectToken Extends stdole.IDispatch
        [DispId(1)]
        [Description("Id")]
        Property Get Id() As String
        [DispId(2), Hidden]
        [Description("DataKey")]
        Property Get DataKey() As ISpeechDataKey
        [DispId(3)]
        [Description("Category")]
        Property Get Category() As ISpeechObjectTokenCategory
        [DispId(4)]
        [Description("GetDescription")]
        Function GetDescription(Optional ByVal Locale As Long = 0) As String
        [DispId(5), Hidden]
        [Description("SetId")]
        Sub SetId(ByVal Id As String, Optional ByVal CategoryID As String = "", Optional ByVal CreateIfNotExist As Boolean = False)
        [DispId(6)]
        [Description("GetAttribute")]
        Function GetAttribute(ByVal AttributeName As String) As String
        [DispId(7)]
        [Description("CreateInstance")]
        Function CreateInstance(Optional ByVal pUnkOuter As IUnknown, Optional ByVal ClsContext As SpeechTokenContext = 23) As IUnknown
        [DispId(8), Hidden]
        [Description("Remove")]
        Sub Remove(ByVal ObjectStorageCLSID As String)
        [DispId(9), Hidden]
        [Description("GetStorageFileName")]
        Function GetStorageFileName(ByVal ObjectStorageCLSID As String, ByVal KeyName As String, ByVal FileName As String, ByVal Folder As SpeechTokenShellFolder) As String
        [DispId(10), Hidden]
        [Description("RemoveStorageFileName")]
        Sub RemoveStorageFileName(ByVal ObjectStorageCLSID As String, ByVal KeyName As String, ByVal DeleteFile As Boolean)
        [DispId(11), Hidden]
        [Description("IsUISupported")]
        Function IsUISupported(ByVal TypeOfUI As String, Optional ByRef ExtraData As Variant = Empty, Optional ByVal Object As IUnknown) As Boolean
        [DispId(12), Hidden]
        [Description("DisplayUI")]
        Sub DisplayUI(ByVal hWnd As Long, ByVal Title As String, ByVal TypeOfUI As String, Optional ByRef ExtraData As Variant = Empty, Optional ByVal Object As IUnknown)
        [DispId(13)]
        [Description("MatchesAttributes")]
        Function MatchesAttributes(ByVal Attributes As String) As Boolean
    End Interface

    [InterfaceId("CA7EAC50-2D01-4145-86D4-5AE7D70F4469")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechObjectTokenCategory Interface")]
    Interface ISpeechObjectTokenCategory Extends stdole.IDispatch
        [DispId(1)]
        [Description("Id")]
        Property Get Id() As String
        [DispId(2)]
        [Description("Default")]
        Property Let Default(ByVal TokenId As String)
        [DispId(2)]
        [Description("Default")]
        Property Get Default() As String
        [DispId(3)]
        [Description("SetId")]
        Sub SetId(ByVal Id As String, Optional ByVal CreateIfNotExist As Boolean = False)
        [DispId(4), Hidden]
        [Description("GetDataKey")]
        Function GetDataKey(Optional ByVal Location As SpeechDataKeyLocation = 0) As ISpeechDataKey
        [DispId(5)]
        [Description("EnumerateTokens")]
        Function EnumerateTokens(Optional ByVal RequiredAttributes As String = "", Optional ByVal OptionalAttributes As String = "") As ISpeechObjectTokens
    End Interface

    [InterfaceId("9285B776-2E7B-4BC0-B53E-580EB6FA967F")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechObjectTokens Interface")]
    Interface ISpeechObjectTokens Extends stdole.IDispatch
        [DispId(1)]
        [Description("Count")]
        Property Get Count() As Long
        [DispId(0)]
        [Description("Item")]
        Function Item(ByVal Index As Long) As ISpeechObjectToken
        [DispId(-4), Restricted]
        [Description("Enumerates the tokens")]
        Property Get _NewEnum() As IUnknown
    End Interface

    [InterfaceId("11B103D8-1142-4EDF-A093-82FB3915F8CC")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechAudioBufferInfo Interface")]
    Interface ISpeechAudioBufferInfo Extends stdole.IDispatch
        [DispId(1)]
        [Description("MinNotification")]
        Property Get MinNotification() As Long
        [DispId(1)]
        [Description("MinNotification")]
        Property Let MinNotification(ByVal MinNotification As Long)
        [DispId(2)]
        [Description("BufferSize")]
        Property Get BufferSize() As Long
        [DispId(2)]
        [Description("BufferSize")]
        Property Let BufferSize(ByVal BufferSize As Long)
        [DispId(3)]
        [Description("EventBias")]
        Property Get EventBias() As Long
        [DispId(3)]
        [Description("EventBias")]
        Property Let EventBias(ByVal EventBias As Long)
    End Interface

    [InterfaceId("C62D9C91-7458-47F6-862D-1EF86FB0B278")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechAudioStatus Interface")]
    Interface ISpeechAudioStatus Extends stdole.IDispatch
        [DispId(1)]
        [Description("FreeBufferSpace")]
        Property Get FreeBufferSpace() As Long
        [DispId(2)]
        [Description("NonBlockingIO")]
        Property Get NonBlockingIO() As Long
        [DispId(3)]
        [Description("State")]
        Property Get State() As SpeechAudioState
        [DispId(4)]
        [Description("CurrentSeekPosition")]
        Property Get CurrentSeekPosition() As Variant
        [DispId(5)]
        [Description("CurrentDevicePosition")]
        Property Get CurrentDevicePosition() As Variant
    End Interface

    [InterfaceId("E6E9C590-3E18-40E3-8299-061F98BDE7C7")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechAudioFormat Interface")]
    Interface ISpeechAudioFormat Extends stdole.IDispatch
        [DispId(1)]
        [Description("Type")]
        Property Get Type() As SpeechAudioFormatType
        [DispId(1)]
        [Description("Type")]
        Property Let Type(ByVal AudioFormat As SpeechAudioFormatType)
        [DispId(2), Hidden]
        [Description("Guid")]
        Property Get Guid() As String
        [DispId(2), Hidden]
        [Description("Guid")]
        Property Let Guid(ByVal Guid As String)
        [DispId(3), Hidden]
        [Description("GetWaveFormatEx")]
        Function GetWaveFormatEx() As ISpeechWaveFormatEx
        [DispId(4), Hidden]
        [Description("SetWaveFormatEx")]
        Sub SetWaveFormatEx(ByVal SpeechWaveFormatEx As ISpeechWaveFormatEx)
    End Interface

    [InterfaceId("7A1EF0D5-1581-4741-88E4-209A49F11A10")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechWaveFormatEx Interface")]
    Interface ISpeechWaveFormatEx Extends stdole.IDispatch
        [DispId(1)]
        [Description("FormatTag")]
        Property Get FormatTag() As Integer
        [DispId(1)]
        [Description("FormatTag")]
        Property Let FormatTag(ByVal FormatTag As Integer)
        [DispId(2)]
        [Description("Channels")]
        Property Get Channels() As Integer
        [DispId(2)]
        [Description("Channels")]
        Property Let Channels(ByVal Channels As Integer)
        [DispId(3)]
        [Description("SamplesPerSec")]
        Property Get SamplesPerSec() As Long
        [DispId(3)]
        [Description("SamplesPerSec")]
        Property Let SamplesPerSec(ByVal SamplesPerSec As Long)
        [DispId(4)]
        [Description("AvgBytesPerSec")]
        Property Get AvgBytesPerSec() As Long
        [DispId(4)]
        [Description("AvgBytesPerSec")]
        Property Let AvgBytesPerSec(ByVal AvgBytesPerSec As Long)
        [DispId(5)]
        [Description("BlockAlign")]
        Property Get BlockAlign() As Integer
        [DispId(5)]
        [Description("BlockAlign")]
        Property Let BlockAlign(ByVal BlockAlign As Integer)
        [DispId(6)]
        [Description("BitsPerSample")]
        Property Get BitsPerSample() As Integer
        [DispId(6)]
        [Description("BitsPerSample")]
        Property Let BitsPerSample(ByVal BitsPerSample As Integer)
        [DispId(7)]
        [Description("ExtraData")]
        Property Get ExtraData() As Variant
        [DispId(7)]
        [Description("ExtraData")]
        Property Let ExtraData(ByVal ExtraData As Variant)
    End Interface

    [InterfaceId("6450336F-7D49-4CED-8097-49D6DEE37294")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechBaseStream Interface")]
    Interface ISpeechBaseStream Extends stdole.IDispatch
        [DispId(1)]
        [Description("Format")]
        Property Get Format() As ISpeechAudioFormat
        [DispId(1)]
        [Description("Format")]
        Property Set Format(ByVal AudioFormat As ISpeechAudioFormat)
        [DispId(2)]
        [Description("Read")]
        Function Read(ByRef Buffer As Variant, ByVal NumberOfBytes As Long) As Long
        [DispId(3)]
        [Description("Write")]
        Function Write(ByVal Buffer As Variant) As Long
        [DispId(4)]
        [Description("Seek")]
        Function Seek(ByVal Position As Variant, Optional ByVal Origin As SpeechStreamSeekPositionType = 0) As Variant
    End Interface

    [InterfaceId("AF67F125-AB39-4E93-B4A2-CC2E66E182A7")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechFileStream Interface")]
    Interface ISpeechFileStream Extends ISpeechBaseStream
        [DispId(100)]
        [Description("Open")]
        Sub Open(ByVal FileName As String, Optional ByVal FileMode As SpeechStreamFileMode = 0, Optional ByVal DoEvents As Boolean = False)
        [DispId(101)]
        [Description("Close")]
        Sub Close()
    End Interface

    [InterfaceId("EEB14B68-808B-4ABE-A5EA-B51DA7588008")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechMemoryStream Interface")]
    Interface ISpeechMemoryStream Extends ISpeechBaseStream
        [DispId(100)]
        [Description("SetData")]
        Sub SetData(ByVal Data As Variant)
        [DispId(101)]
        [Description("GetData")]
        Function GetData() As Variant
    End Interface

    [InterfaceId("1A9E9F4F-104F-4DB8-A115-EFD7FD0C97AE")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechCustomStream Interface")]
    Interface ISpeechCustomStream Extends ISpeechBaseStream
        [DispId(100)]
        [Description("BaseStream")]
        Property Get BaseStream() As IUnknown
        [DispId(100)]
        [Description("BaseStream")]
        Property Set BaseStream(ByVal pUnkStream As IUnknown)
    End Interface

    [InterfaceId("CFF8E175-019E-11D3-A08E-00C04F8EF9B5")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechAudio Interface")]
    Interface ISpeechAudio Extends ISpeechBaseStream
        [DispId(200)]
        [Description("Status")]
        Property Get Status() As ISpeechAudioStatus
        [DispId(201)]
        [Description("BufferInfo")]
        Property Get BufferInfo() As ISpeechAudioBufferInfo
        [DispId(202)]
        [Description("DefaultFormat")]
        Property Get DefaultFormat() As ISpeechAudioFormat
        [DispId(203)]
        [Description("Volume")]
        Property Get Volume() As Long
        [DispId(203)]
        [Description("Volume")]
        Property Let Volume(ByVal Volume As Long)
        [DispId(204)]
        [Description("BufferNotifySize")]
        Property Get BufferNotifySize() As Long
        [DispId(204)]
        [Description("BufferNotifySize")]
        Property Let BufferNotifySize(ByVal BufferNotifySize As Long)
        [DispId(205), Hidden]
        [Description("EventHandle")]
        Property Get EventHandle() As Long
        [DispId(206), Hidden]
        [Description("SetState")]
        Sub SetState(ByVal State As SpeechAudioState)
    End Interface

    [InterfaceId("3C76AF6D-1FD7-4831-81D1-3B71D5A13C44")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechMMSysAudio Interface")]
    Interface ISpeechMMSysAudio Extends ISpeechAudio
        [DispId(300)]
        [Description("DeviceId")]
        Property Get DeviceId() As Long
        [DispId(300)]
        [Description("DeviceId")]
        Property Let DeviceId(ByVal DeviceId As Long)
        [DispId(301)]
        [Description("LineId")]
        Property Get LineId() As Long
        [DispId(301)]
        [Description("LineId")]
        Property Let LineId(ByVal LineId As Long)
        [DispId(302), Hidden]
        [Description("MMHandle")]
        Property Get MMHandle() As Long
    End Interface

    [InterfaceId("269316D8-57BD-11D2-9EEE-00C04F797396")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechVoice Interface")]
    Interface ISpeechVoice Extends stdole.IDispatch
        [DispId(1)]
        [Description("Status")]
        Property Get Status() As ISpeechVoiceStatus
        [DispId(2)]
        [Description("Voice")]
        Property Get Voice() As ISpeechObjectToken
        [DispId(2)]
        [Description("Voice")]
        Property Set Voice(ByVal Voice As ISpeechObjectToken)
        [DispId(3)]
        [Description("Gets the audio output object")]
        Property Get AudioOutput() As ISpeechObjectToken
        [DispId(3)]
        [Description("Gets the audio output object")]
        Property Set AudioOutput(ByVal AudioOutput As ISpeechObjectToken)
        [DispId(4)]
        [Description("Gets the audio output stream")]
        Property Get AudioOutputStream() As ISpeechBaseStream
        [DispId(4)]
        [Description("Gets the audio output stream")]
        Property Set AudioOutputStream(ByVal AudioOutputStream As ISpeechBaseStream)
        [DispId(5)]
        [Description("Rate")]
        Property Get Rate() As Long
        [DispId(5)]
        [Description("Rate")]
        Property Let Rate(ByVal Rate As Long)
        [DispId(6)]
        [Description("Volume")]
        Property Get Volume() As Long
        [DispId(6)]
        [Description("Volume")]
        Property Let Volume(ByVal Volume As Long)
        [DispId(7), Hidden]
        [Description("AllowAudioOutputFormatChangesOnNextSet")]
        Property Let AllowAudioOutputFormatChangesOnNextSet(ByVal Allow As Boolean)
        [DispId(7), Hidden]
        [Description("AllowAudioOutputFormatChangesOnNextSet")]
        Property Get AllowAudioOutputFormatChangesOnNextSet() As Boolean
        [DispId(8)]
        [Description("EventInterests")]
        Property Get EventInterests() As SpeechVoiceEvents
        [DispId(8)]
        [Description("EventInterests")]
        Property Let EventInterests(ByVal EventInterestFlags As SpeechVoiceEvents)
        [DispId(9)]
        [Description("Priority")]
        Property Let Priority(ByVal Priority As SpeechVoicePriority)
        [DispId(9)]
        [Description("Priority")]
        Property Get Priority() As SpeechVoicePriority
        [DispId(10)]
        [Description("AlertBoundary")]
        Property Let AlertBoundary(ByVal Boundary As SpeechVoiceEvents)
        [DispId(10)]
        [Description("AlertBoundary")]
        Property Get AlertBoundary() As SpeechVoiceEvents
        [DispId(11)]
        [Description("SyncSpeakTimeout")]
        Property Let SynchronousSpeakTimeout(ByVal msTimeout As Long)
        [DispId(11)]
        [Description("SyncSpeakTimeout")]
        Property Get SynchronousSpeakTimeout() As Long
        [DispId(12)]
        [Description("Speak")]
        Function Speak(ByVal Text As String, Optional ByVal Flags As SpeechVoiceSpeakFlags = 0) As Long
        [DispId(13)]
        [Description("SpeakStream")]
        Function SpeakStream(ByVal Stream As ISpeechBaseStream, Optional ByVal Flags As SpeechVoiceSpeakFlags = 0) As Long
        [DispId(14)]
        [Description("Pauses the voices rendering.")]
        Sub Pause()
        [DispId(15)]
        [Description("Resumes the voices rendering.")]
        Sub Resume()
        [DispId(16)]
        [Description("Skips rendering the specified number of items.")]
        Function Skip(ByVal Type As String, ByVal NumItems As Long) As Long
        [DispId(17)]
        [Description("GetVoices")]
        Function GetVoices(Optional ByVal RequiredAttributes As String = "", Optional ByVal OptionalAttributes As String = "") As ISpeechObjectTokens
        [DispId(18)]
        [Description("GetAudioOutputs")]
        Function GetAudioOutputs(Optional ByVal RequiredAttributes As String = "", Optional ByVal OptionalAttributes As String = "") As ISpeechObjectTokens
        [DispId(19)]
        [Description("WaitUntilDone")]
        Function WaitUntilDone(ByVal msTimeout As Long) As Boolean
        [DispId(20), Hidden]
        [Description("SpeakCompleteEvent")]
        Function SpeakCompleteEvent() As Long
        [DispId(21)]
        [Description("IsUISupported")]
        Function IsUISupported(ByVal TypeOfUI As String, Optional ByRef ExtraData As Variant = Empty) As Boolean
        [DispId(22)]
        [Description("DisplayUI")]
        Sub DisplayUI(ByVal hWndParent As Long, ByVal Title As String, ByVal TypeOfUI As String, Optional ByRef ExtraData As Variant = Empty)
    End Interface

    [InterfaceId("8BE47B07-57F6-11D2-9EEE-00C04F797396")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechVoiceStatus Interface")]
    Interface ISpeechVoiceStatus Extends stdole.IDispatch
        [DispId(1)]
        [Description("CurrentStreamNumber")]
        Property Get CurrentStreamNumber() As Long
        [DispId(2)]
        [Description("LastStreamNumberQueued")]
        Property Get LastStreamNumberQueued() As Long
        [DispId(3)]
        [Description("LastHResult")]
        Property Get LastHResult() As Long
        [DispId(4)]
        [Description("RunningState")]
        Property Get RunningState() As SpeechRunState
        [DispId(5)]
        [Description("InputWordPosition")]
        Property Get InputWordPosition() As Long
        [DispId(6)]
        [Description("InputWordLength")]
        Property Get InputWordLength() As Long
        [DispId(7)]
        [Description("InputSentencePosition")]
        Property Get InputSentencePosition() As Long
        [DispId(8)]
        [Description("InputSentenceLength")]
        Property Get InputSentenceLength() As Long
        [DispId(9)]
        [Description("LastBookmark")]
        Property Get LastBookmark() As String
        [DispId(10), Hidden]
        [Description("LastBookmarkId")]
        Property Get LastBookmarkId() As Long
        [DispId(11)]
        [Description("PhonemeId")]
        Property Get PhonemeId() As Integer
        [DispId(12)]
        [Description("VisemeId")]
        Property Get VisemeId() As Integer
    End Interface

    [InterfaceId("2D5F1C0C-BD75-4B08-9478-3B11FEA2586C")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechRecognizer Interface")]
    Interface ISpeechRecognizer Extends stdole.IDispatch
        [DispId(1)]
        [Description("Recognizer")]
        Property Set Recognizer(ByVal Recognizer As ISpeechObjectToken)
        [DispId(1)]
        [Description("Recognizer")]
        Property Get Recognizer() As ISpeechObjectToken
        [DispId(2), Hidden]
        [Description("AllowAudioInputFormatChangesOnNextSet")]
        Property Let AllowAudioInputFormatChangesOnNextSet(ByVal Allow As Boolean)
        [DispId(2), Hidden]
        [Description("AllowAudioInputFormatChangesOnNextSet")]
        Property Get AllowAudioInputFormatChangesOnNextSet() As Boolean
        [DispId(3)]
        [Description("AudioInput")]
        Property Set AudioInput(Optional ByVal AudioInput As ISpeechObjectToken)
        [DispId(3)]
        [Description("AudioInput")]
        Property Get AudioInput() As ISpeechObjectToken
        [DispId(4)]
        [Description("AudioInputStream")]
        Property Set AudioInputStream(Optional ByVal AudioInputStream As ISpeechBaseStream)
        [DispId(4)]
        [Description("AudioInputStream")]
        Property Get AudioInputStream() As ISpeechBaseStream
        [DispId(5)]
        [Description("IsShared")]
        Property Get IsShared() As Boolean
        [DispId(6)]
        [Description("State")]
        Property Let State(ByVal State As SpeechRecognizerState)
        [DispId(6)]
        [Description("State")]
        Property Get State() As SpeechRecognizerState
        [DispId(7)]
        [Description("Status")]
        Property Get Status() As ISpeechRecognizerStatus
        [DispId(8)]
        [Description("Profile")]
        Property Set Profile(Optional ByVal Profile As ISpeechObjectToken)
        [DispId(8)]
        [Description("Profile")]
        Property Get Profile() As ISpeechObjectToken
        [DispId(9)]
        [Description("EmulateRecognition")]
        Sub EmulateRecognition(ByVal TextElements As Variant, Optional ByRef ElementDisplayAttributes As Variant = Empty, Optional ByVal LanguageId As Long = 0)
        [DispId(10)]
        [Description("CreateRecoContext")]
        Function CreateRecoContext() As ISpeechRecoContext
        [DispId(11)]
        [Description("GetFormat")]
        Function GetFormat(ByVal Type As SpeechFormatType) As ISpeechAudioFormat
        [DispId(12), Hidden]
        [Description("SetPropertyNumber")]
        Function SetPropertyNumber(ByVal Name As String, ByVal Value As Long) As Boolean
        [DispId(13), Hidden]
        [Description("GetPropertyNumber")]
        Function GetPropertyNumber(ByVal Name As String, ByRef Value As Long) As Boolean
        [DispId(14), Hidden]
        [Description("SetPropertyString")]
        Function SetPropertyString(ByVal Name As String, ByVal Value As String) As Boolean
        [DispId(15), Hidden]
        [Description("GetPropertyString")]
        Function GetPropertyString(ByVal Name As String, ByRef Value As String) As Boolean
        [DispId(16)]
        [Description("IsUISupported")]
        Function IsUISupported(ByVal TypeOfUI As String, Optional ByRef ExtraData As Variant = Empty) As Boolean
        [DispId(17)]
        [Description("DisplayUI")]
        Sub DisplayUI(ByVal hWndParent As Long, ByVal Title As String, ByVal TypeOfUI As String, Optional ByRef ExtraData As Variant = Empty)
        [DispId(18)]
        [Description("GetRecognizers")]
        Function GetRecognizers(Optional ByVal RequiredAttributes As String = "", Optional ByVal OptionalAttributes As String = "") As ISpeechObjectTokens
        [DispId(19)]
        [Description("GetAudioInputs")]
        Function GetAudioInputs(Optional ByVal RequiredAttributes As String = "", Optional ByVal OptionalAttributes As String = "") As ISpeechObjectTokens
        [DispId(20)]
        [Description("GetProfiles")]
        Function GetProfiles(Optional ByVal RequiredAttributes As String = "", Optional ByVal OptionalAttributes As String = "") As ISpeechObjectTokens
    End Interface

    [InterfaceId("BFF9E781-53EC-484E-BB8A-0E1B5551E35C")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechRecognizerStatus Interface")]
    Interface ISpeechRecognizerStatus Extends stdole.IDispatch
        [DispId(1)]
        [Description("AudioStatus")]
        Property Get AudioStatus() As ISpeechAudioStatus
        [DispId(2)]
        [Description("CurrentStreamPosition")]
        Property Get CurrentStreamPosition() As Variant
        [DispId(3)]
        [Description("CurrentStreamNumber")]
        Property Get CurrentStreamNumber() As Long
        [DispId(4)]
        [Description("NumberOfActiveRules")]
        Property Get NumberOfActiveRules() As Long
        [DispId(5)]
        [Description("ClsidEngine")]
        Property Get ClsidEngine() As String
        [DispId(6)]
        [Description("SupportedLanguages")]
        Property Get SupportedLanguages() As Variant
    End Interface

    [InterfaceId("580AA49D-7E1E-4809-B8E2-57DA806104B8")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechRecoContext Interface")]
    Interface ISpeechRecoContext Extends stdole.IDispatch
        [DispId(1)]
        [Description("Recognizer")]
        Property Get Recognizer() As ISpeechRecognizer
        [DispId(2)]
        [Description("AudioInInterferenceStatus")]
        Property Get AudioInputInterferenceStatus() As SpeechInterference
        [DispId(3)]
        [Description("RequestedUIType")]
        Property Get RequestedUIType() As String
        [DispId(4)]
        [Description("Voice")]
        Property Set Voice(ByVal Voice As ISpeechVoice)
        [DispId(4)]
        [Description("Voice")]
        Property Get Voice() As ISpeechVoice
        [DispId(5), Hidden]
        [Description("AllowVoiceFormatMatchingOnNextSet")]
        Property Let AllowVoiceFormatMatchingOnNextSet(ByVal pAllow As Boolean)
        [DispId(5), Hidden]
        [Description("AllowVoiceFormatMatchingOnNextSet")]
        Property Get AllowVoiceFormatMatchingOnNextSet() As Boolean
        [DispId(6)]
        [Description("VoicePurgeEvent")]
        Property Let VoicePurgeEvent(ByVal EventInterest As SpeechRecoEvents)
        [DispId(6)]
        [Description("VoicePurgeEvent")]
        Property Get VoicePurgeEvent() As SpeechRecoEvents
        [DispId(7)]
        [Description("EventInterests")]
        Property Let EventInterests(ByVal EventInterest As SpeechRecoEvents)
        [DispId(7)]
        [Description("EventInterests")]
        Property Get EventInterests() As SpeechRecoEvents
        [DispId(8)]
        [Description("CmdMaxAlternates")]
        Property Let CmdMaxAlternates(ByVal MaxAlternates As Long)
        [DispId(8)]
        [Description("CmdMaxAlternates")]
        Property Get CmdMaxAlternates() As Long
        [DispId(9)]
        [Description("State")]
        Property Let State(ByVal State As SpeechRecoContextState)
        [DispId(9)]
        [Description("State")]
        Property Get State() As SpeechRecoContextState
        [DispId(10)]
        [Description("RetainedAudio")]
        Property Let RetainedAudio(ByVal Option As SpeechRetainedAudioOptions)
        [DispId(10)]
        [Description("RetainedAudio")]
        Property Get RetainedAudio() As SpeechRetainedAudioOptions
        [DispId(11)]
        [Description("RetainedAudioFormat")]
        Property Set RetainedAudioFormat(ByVal Format As ISpeechAudioFormat)
        [DispId(11)]
        [Description("RetainedAudioFormat")]
        Property Get RetainedAudioFormat() As ISpeechAudioFormat
        [DispId(12)]
        [Description("Pause")]
        Sub Pause()
        [DispId(13)]
        [Description("Resume")]
        Sub Resume()
        [DispId(14)]
        [Description("CreateGrammar")]
        Function CreateGrammar(Optional ByVal GrammarId As Variant = 0) As ISpeechRecoGrammar
        [DispId(15)]
        [Description("CreateResultFromMemory")]
        Function CreateResultFromMemory(ByRef ResultBlock As Variant) As ISpeechRecoResult
        [DispId(16)]
        [Description("Bookmark")]
        Sub Bookmark(ByVal Options As SpeechBookmarkOptions, ByVal StreamPos As Variant, ByVal BookmarkId As Variant)
        [DispId(17)]
        [Description("SetAdaptationData")]
        Sub SetAdaptationData(ByVal AdaptationString As String)
    End Interface

    [InterfaceId("B6D6F79F-2158-4E50-B5BC-9A9CCD852A09")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechRecoGrammar Interface")]
    Interface ISpeechRecoGrammar Extends stdole.IDispatch
        [DispId(1)]
        [Description("Id")]
        Property Get Id() As Variant
        [DispId(2)]
        [Description("RecoContext")]
        Property Get RecoContext() As ISpeechRecoContext
        [DispId(3)]
        [Description("State")]
        Property Let State(ByVal State As SpeechGrammarState)
        [DispId(3)]
        [Description("State")]
        Property Get State() As SpeechGrammarState
        [DispId(4)]
        [Description("Rules")]
        Property Get Rules() As ISpeechGrammarRules
        [DispId(5)]
        [Description("Reset")]
        Sub Reset(Optional ByVal NewLanguage As Long = 0)
        [DispId(7)]
        [Description("CmdLoadFromFile")]
        Sub CmdLoadFromFile(ByVal FileName As String, Optional ByVal LoadOption As SpeechLoadOption = 0)
        [DispId(8)]
        [Description("CmdLoadFromObject")]
        Sub CmdLoadFromObject(ByVal ClassId As String, ByVal GrammarName As String, Optional ByVal LoadOption As SpeechLoadOption = 0)
        [DispId(9)]
        [Description("CmdLoadFromResource")]
        Sub CmdLoadFromResource(ByVal hModule As Long, ByVal ResourceName As Variant, ByVal ResourceType As Variant, ByVal LanguageId As Long, Optional ByVal LoadOption As SpeechLoadOption = 0)
        [DispId(10)]
        [Description("CmdLoadFromMemory")]
        Sub CmdLoadFromMemory(ByVal GrammarData As Variant, Optional ByVal LoadOption As SpeechLoadOption = 0)
        [DispId(11)]
        [Description("CmdLoadFromProprietaryGrammar")]
        Sub CmdLoadFromProprietaryGrammar(ByVal ProprietaryGuid As String, ByVal ProprietaryString As String, ByVal ProprietaryData As Variant, Optional ByVal LoadOption As SpeechLoadOption = 0)
        [DispId(12)]
        [Description("CmdSetRuleState")]
        Sub CmdSetRuleState(ByVal Name As String, ByVal State As SpeechRuleState)
        [DispId(13)]
        [Description("CmdSetRuleIdState")]
        Sub CmdSetRuleIdState(ByVal RuleId As Long, ByVal State As SpeechRuleState)
        [DispId(14)]
        [Description("DictationLoad")]
        Sub DictationLoad(Optional ByVal TopicName As String = "", Optional ByVal LoadOption As SpeechLoadOption = 0)
        [DispId(15)]
        [Description("DictationUnload")]
        Sub DictationUnload()
        [DispId(16)]
        [Description("DictationSetState")]
        Sub DictationSetState(ByVal State As SpeechRuleState)
        [DispId(17)]
        [Description("SetWordSequenceData")]
        Sub SetWordSequenceData(ByVal Text As String, ByVal TextLength As Long, ByVal Info As ISpeechTextSelectionInformation)
        [DispId(18)]
        [Description("SetTextSelection")]
        Sub SetTextSelection(ByVal Info As ISpeechTextSelectionInformation)
        [DispId(19)]
        [Description("IsPronounceable")]
        Function IsPronounceable(ByVal Word As String) As SpeechWordPronounceable
    End Interface

    [InterfaceId("6FFA3B44-FC2D-40D1-8AFC-32911C7F1AD1")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechGrammarRules Interface")]
    Interface ISpeechGrammarRules Extends stdole.IDispatch
        [DispId(1)]
        [Description("Count")]
        Property Get Count() As Long
        [DispId(6)]
        [Description("FindRule")]
        Function FindRule(ByVal RuleNameOrId As Variant) As ISpeechGrammarRule
        [DispId(0)]
        [Description("Item")]
        Function Item(ByVal Index As Long) As ISpeechGrammarRule
        [DispId(-4), Restricted]
        [Description("Enumerates the alternates")]
        Property Get _NewEnum() As IUnknown
        [DispId(2)]
        [Description("Dynamic")]
        Property Get Dynamic() As Boolean
        [DispId(3)]
        [Description("Add")]
        Function Add(ByVal RuleName As String, ByVal Attributes As SpeechRuleAttributes, Optional ByVal RuleId As Long = 0) As ISpeechGrammarRule
        [DispId(4)]
        [Description("Commit")]
        Sub Commit()
        [DispId(5)]
        [Description("CommitAndSave")]
        Function CommitAndSave(ByRef ErrorText As String) As Variant
    End Interface

    [InterfaceId("AFE719CF-5DD1-44F2-999C-7A399F1CFCCC")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechGrammarRule Interface")]
    Interface ISpeechGrammarRule Extends stdole.IDispatch
        [DispId(1)]
        [Description("RuleAttributes")]
        Property Get Attributes() As SpeechRuleAttributes
        [DispId(2)]
        [Description("InitialState")]
        Property Get InitialState() As ISpeechGrammarRuleState
        [DispId(3)]
        [Description("Name")]
        Property Get Name() As String
        [DispId(4)]
        [Description("Id")]
        Property Get Id() As Long
        [DispId(5)]
        [Description("Clear")]
        Sub Clear()
        [DispId(6)]
        [Description("AddResource")]
        Sub AddResource(ByVal ResourceName As String, ByVal ResourceValue As String)
        [DispId(7)]
        [Description("AddState")]
        Function AddState() As ISpeechGrammarRuleState
    End Interface

    [InterfaceId("D4286F2C-EE67-45AE-B928-28D695362EDA")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechGrammarRuleState Interface")]
    Interface ISpeechGrammarRuleState Extends stdole.IDispatch
        [DispId(1)]
        [Description("Rule")]
        Property Get Rule() As ISpeechGrammarRule
        [DispId(2)]
        [Description("Transitions")]
        Property Get Transitions() As ISpeechGrammarRuleStateTransitions
        [DispId(3)]
        [Description("AddWordTransition")]
        Sub AddWordTransition(ByVal DestState As ISpeechGrammarRuleState, ByVal Words As String, Optional ByVal Separators As String = "", Optional ByVal Type As SpeechGrammarWordType = 1, Optional ByVal PropertyName As String = "", Optional ByVal PropertyId As Long = 0, Optional ByRef PropertyValue As Variant = Empty, Optional ByVal Weight As Single = 1)
        [DispId(4)]
        [Description("AddRuleTransition")]
        Sub AddRuleTransition(ByVal DestinationState As ISpeechGrammarRuleState, ByVal Rule As ISpeechGrammarRule, Optional ByVal PropertyName As String = "", Optional ByVal PropertyId As Long = 0, Optional ByRef PropertyValue As Variant = Empty, Optional ByVal Weight As Single = 1)
        [DispId(5)]
        [Description("AddSpecialTransition")]
        Sub AddSpecialTransition(ByVal DestinationState As ISpeechGrammarRuleState, ByVal Type As SpeechSpecialTransitionType, Optional ByVal PropertyName As String = "", Optional ByVal PropertyId As Long = 0, Optional ByRef PropertyValue As Variant = Empty, Optional ByVal Weight As Single = 1)
    End Interface

    [InterfaceId("EABCE657-75BC-44A2-AA7F-C56476742963")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechGrammarRuleStateTransitions Interface")]
    Interface ISpeechGrammarRuleStateTransitions Extends stdole.IDispatch
        [DispId(1)]
        [Description("Count")]
        Property Get Count() As Long
        [DispId(0)]
        [Description("Item")]
        Function Item(ByVal Index As Long) As ISpeechGrammarRuleStateTransition
        [DispId(-4), Restricted]
        [Description("Enumerates the transitions")]
        Property Get _NewEnum() As IUnknown
    End Interface

    [InterfaceId("CAFD1DB1-41D1-4A06-9863-E2E81DA17A9A")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechGrammarRuleStateTransition Interface")]
    Interface ISpeechGrammarRuleStateTransition Extends stdole.IDispatch
        [DispId(1)]
        [Description("Type")]
        Property Get Type() As SpeechGrammarRuleStateTransitionType
        [DispId(2)]
        [Description("Text")]
        Property Get Text() As String
        [DispId(3)]
        [Description("Rule")]
        Property Get Rule() As ISpeechGrammarRule
        [DispId(4)]
        [Description("Weight")]
        Property Get Weight() As Variant
        [DispId(5)]
        [Description("PropertyName")]
        Property Get PropertyName() As String
        [DispId(6)]
        [Description("PropertyId")]
        Property Get PropertyId() As Long
        [DispId(7)]
        [Description("PropertyValue")]
        Property Get PropertyValue() As Variant
        [DispId(8)]
        [Description("NextState")]
        Property Get NextState() As ISpeechGrammarRuleState
    End Interface

    [InterfaceId("3B9C7E7A-6EEE-4DED-9092-11657279ADBE")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechTextSelectionInformation Interface")]
    Interface ISpeechTextSelectionInformation Extends stdole.IDispatch
        [DispId(1)]
        [Description("ActiveOffset")]
        Property Let ActiveOffset(ByVal ActiveOffset As Long)
        [DispId(1)]
        [Description("ActiveOffset")]
        Property Get ActiveOffset() As Long
        [DispId(2)]
        [Description("ActiveLength")]
        Property Let ActiveLength(ByVal ActiveLength As Long)
        [DispId(2)]
        [Description("ActiveLength")]
        Property Get ActiveLength() As Long
        [DispId(3)]
        [Description("SelectionOffset")]
        Property Let SelectionOffset(ByVal SelectionOffset As Long)
        [DispId(3)]
        [Description("SelectionOffset")]
        Property Get SelectionOffset() As Long
        [DispId(4)]
        [Description("SelectionLength")]
        Property Let SelectionLength(ByVal SelectionLength As Long)
        [DispId(4)]
        [Description("SelectionLength")]
        Property Get SelectionLength() As Long
    End Interface

    [InterfaceId("ED2879CF-CED9-4EE6-A534-DE0191D5468D")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechRecoResult Interface")]
    Interface ISpeechRecoResult Extends stdole.IDispatch
        [DispId(1)]
        [Description("RecoContext")]
        Property Get RecoContext() As ISpeechRecoContext
        [DispId(2)]
        [Description("Times")]
        Property Get Times() As ISpeechRecoResultTimes
        [DispId(3)]
        [Description("AudioFormat")]
        Property Set AudioFormat(ByVal Format As ISpeechAudioFormat)
        [DispId(3)]
        [Description("AudioFormat")]
        Property Get AudioFormat() As ISpeechAudioFormat
        [DispId(4)]
        [Description("PhraseInfo")]
        Property Get PhraseInfo() As ISpeechPhraseInfo
        [DispId(5)]
        [Description("Alternates")]
        Function Alternates(ByVal RequestCount As Long, Optional ByVal StartElement As Long = 0, Optional ByVal Elements As Long = -1) As ISpeechPhraseAlternates
        [DispId(6)]
        [Description("Audio")]
        Function Audio(Optional ByVal StartElement As Long = 0, Optional ByVal Elements As Long = -1) As ISpeechMemoryStream
        [DispId(7)]
        [Description("SpeakAudio")]
        Function SpeakAudio(Optional ByVal StartElement As Long = 0, Optional ByVal Elements As Long = -1, Optional ByVal Flags As SpeechVoiceSpeakFlags = 0) As Long
        [DispId(8)]
        [Description("SaveToMemory")]
        Function SaveToMemory() As Variant
        [DispId(9)]
        [Description("DiscardResultInfo")]
        Sub DiscardResultInfo(ByVal ValueTypes As SpeechDiscardType)
    End Interface

    [InterfaceId("62B3B8FB-F6E7-41BE-BDCB-056B1C29EFC0")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechRecoResultTimes Interface")]
    Interface ISpeechRecoResultTimes Extends stdole.IDispatch
        [DispId(1)]
        [Description("StreamTime")]
        Property Get StreamTime() As Variant
        [DispId(2)]
        [Description("Length")]
        Property Get Length() As Variant
        [DispId(3)]
        [Description("TickCount")]
        Property Get TickCount() As Long
        [DispId(4)]
        [Description("Start")]
        Property Get OffsetFromStart() As Variant
    End Interface

    [InterfaceId("961559CF-4E67-4662-8BF0-D93F1FCD61B3")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechPhraseInfo Interface")]
    Interface ISpeechPhraseInfo Extends stdole.IDispatch
        [DispId(1)]
        [Description("LanguageId")]
        Property Get LanguageId() As Long
        [DispId(2)]
        [Description("GrammarId")]
        Property Get GrammarId() As Variant
        [DispId(3)]
        [Description("StartTime")]
        Property Get StartTime() As Variant
        [DispId(4)]
        [Description("AudioStreamPosition")]
        Property Get AudioStreamPosition() As Variant
        [DispId(5)]
        [Description("AudioSizeBytes")]
        Property Get AudioSizeBytes() As Long
        [DispId(6)]
        [Description("RetainedSizeBytes")]
        Property Get RetainedSizeBytes() As Long
        [DispId(7)]
        [Description("AudioSizeTime")]
        Property Get AudioSizeTime() As Long
        [DispId(8)]
        [Description("Rule")]
        Property Get Rule() As ISpeechPhraseRule
        [DispId(9)]
        [Description("Properties")]
        Property Get Properties() As ISpeechPhraseProperties
        [DispId(10)]
        [Description("Elements")]
        Property Get Elements() As ISpeechPhraseElements
        [DispId(11)]
        [Description("Replacements")]
        Property Get Replacements() As ISpeechPhraseReplacements
        [DispId(12)]
        [Description("EngineId")]
        Property Get EngineId() As String
        [DispId(13)]
        [Description("EnginePrivateData")]
        Property Get EnginePrivateData() As Variant
        [DispId(14)]
        [Description("SaveToMemory")]
        Function SaveToMemory() As Variant
        [DispId(15)]
        [Description("GetText")]
        Function GetText(Optional ByVal StartElement As Long = 0, Optional ByVal Elements As Long = -1, Optional ByVal UseReplacements As Boolean = True) As String
        [DispId(16)]
        [Description("DisplayAttributes")]
        Function GetDisplayAttributes(Optional ByVal StartElement As Long = 0, Optional ByVal Elements As Long = -1, Optional ByVal UseReplacements As Boolean = True) As SpeechDisplayAttributes
    End Interface

    [InterfaceId("A7BFE112-A4A0-48D9-B602-C313843F6964")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechPhraseRule Interface")]
    Interface ISpeechPhraseRule Extends stdole.IDispatch
        [DispId(1)]
        [Description("Name")]
        Property Get Name() As String
        [DispId(2)]
        [Description("Id")]
        Property Get Id() As Long
        [DispId(3)]
        [Description("FirstElement")]
        Property Get FirstElement() As Long
        [DispId(4)]
        [Description("NumElements")]
        Property Get NumberOfElements() As Long
        [DispId(5)]
        [Description("Parent")]
        Property Get Parent() As ISpeechPhraseRule
        [DispId(6)]
        [Description("Children")]
        Property Get Children() As ISpeechPhraseRules
        [DispId(7)]
        [Description("Confidence")]
        Property Get Confidence() As SpeechEngineConfidence
        [DispId(8)]
        [Description("EngineConfidence")]
        Property Get EngineConfidence() As Single
    End Interface

    [InterfaceId("9047D593-01DD-4B72-81A3-E4A0CA69F407")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechPhraseRules Interface")]
    Interface ISpeechPhraseRules Extends stdole.IDispatch
        [DispId(1)]
        [Description("Count")]
        Property Get Count() As Long
        [DispId(0)]
        [Description("Item")]
        Function Item(ByVal Index As Long) As ISpeechPhraseRule
        [DispId(-4), Restricted]
        [Description("Enumerates the Rules")]
        Property Get _NewEnum() As IUnknown
    End Interface

    [InterfaceId("08166B47-102E-4B23-A599-BDB98DBFD1F4")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechPhraseProperties Interface")]
    Interface ISpeechPhraseProperties Extends stdole.IDispatch
        [DispId(1)]
        [Description("Count")]
        Property Get Count() As Long
        [DispId(0)]
        [Description("Item")]
        Function Item(ByVal Index As Long) As ISpeechPhraseProperty
        [DispId(-4), Restricted]
        [Description("Enumerates the alternates")]
        Property Get _NewEnum() As IUnknown
    End Interface

    [InterfaceId("CE563D48-961E-4732-A2E1-378A42B430BE")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechPhraseProperty Interface")]
    Interface ISpeechPhraseProperty Extends stdole.IDispatch
        [DispId(1)]
        [Description("Name")]
        Property Get Name() As String
        [DispId(2)]
        [Description("Id")]
        Property Get Id() As Long
        [DispId(3)]
        [Description("Value")]
        Property Get Value() As Variant
        [DispId(4)]
        [Description("FirstElement")]
        Property Get FirstElement() As Long
        [DispId(5)]
        [Description("NumberOfElements")]
        Property Get NumberOfElements() As Long
        [DispId(6)]
        [Description("EngineConfidence")]
        Property Get EngineConfidence() As Single
        [DispId(7)]
        [Description("Confidence")]
        Property Get Confidence() As SpeechEngineConfidence
        [DispId(8)]
        [Description("Parent")]
        Property Get Parent() As ISpeechPhraseProperty
        [DispId(9)]
        [Description("Children")]
        Property Get Children() As ISpeechPhraseProperties
    End Interface

    [InterfaceId("0626B328-3478-467D-A0B3-D0853B93DDA3")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechPhraseElements Interface")]
    Interface ISpeechPhraseElements Extends stdole.IDispatch
        [DispId(1)]
        [Description("Count")]
        Property Get Count() As Long
        [DispId(0)]
        [Description("Item")]
        Function Item(ByVal Index As Long) As ISpeechPhraseElement
        [DispId(-4), Restricted]
        [Description("Enumerates the tokens")]
        Property Get _NewEnum() As IUnknown
    End Interface

    [InterfaceId("E6176F96-E373-4801-B223-3B62C068C0B4")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechPhraseElement Interface")]
    Interface ISpeechPhraseElement Extends stdole.IDispatch
        [DispId(1)]
        [Description("AudioTimeOffset")]
        Property Get AudioTimeOffset() As Long
        [DispId(2)]
        [Description("AudioSizeTime")]
        Property Get AudioSizeTime() As Long
        [DispId(3)]
        [Description("AudioStreamOffset")]
        Property Get AudioStreamOffset() As Long
        [DispId(4)]
        [Description("AudioSizeBytes")]
        Property Get AudioSizeBytes() As Long
        [DispId(5)]
        [Description("RetainedStreamOffset")]
        Property Get RetainedStreamOffset() As Long
        [DispId(6)]
        [Description("RetainedSizeBytes")]
        Property Get RetainedSizeBytes() As Long
        [DispId(7)]
        [Description("DisplayText")]
        Property Get DisplayText() As String
        [DispId(8)]
        [Description("LexicalForm")]
        Property Get LexicalForm() As String
        [DispId(9)]
        [Description("Pronunciation")]
        Property Get Pronunciation() As Variant
        [DispId(10)]
        [Description("DisplayAttributes")]
        Property Get DisplayAttributes() As SpeechDisplayAttributes
        [DispId(11)]
        [Description("RequiredConfidence")]
        Property Get RequiredConfidence() As SpeechEngineConfidence
        [DispId(12)]
        [Description("ActualConfidence")]
        Property Get ActualConfidence() As SpeechEngineConfidence
        [DispId(13)]
        [Description("EngineConfidence")]
        Property Get EngineConfidence() As Single
    End Interface

    [InterfaceId("38BC662F-2257-4525-959E-2069D2596C05")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechPhraseReplacements Interface")]
    Interface ISpeechPhraseReplacements Extends stdole.IDispatch
        [DispId(1)]
        [Description("Count")]
        Property Get Count() As Long
        [DispId(0)]
        [Description("Item")]
        Function Item(ByVal Index As Long) As ISpeechPhraseReplacement
        [DispId(-4), Restricted]
        [Description("Enumerates the tokens")]
        Property Get _NewEnum() As IUnknown
    End Interface

    [InterfaceId("2890A410-53A7-4FB5-94EC-06D4998E3D02")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechPhraseReplacement Interface")]
    Interface ISpeechPhraseReplacement Extends stdole.IDispatch
        [DispId(1)]
        [Description("DisplayAttributes")]
        Property Get DisplayAttributes() As SpeechDisplayAttributes
        [DispId(2)]
        [Description("Text")]
        Property Get Text() As String
        [DispId(3)]
        [Description("FirstElement")]
        Property Get FirstElement() As Long
        [DispId(4)]
        [Description("NumElements")]
        Property Get NumberOfElements() As Long
    End Interface

    [InterfaceId("B238B6D5-F276-4C3D-A6C1-2974801C3CC2")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechPhraseAlternates Interface")]
    Interface ISpeechPhraseAlternates Extends stdole.IDispatch
        [DispId(1)]
        [Description("Count")]
        Property Get Count() As Long
        [DispId(0)]
        [Description("Item")]
        Function Item(ByVal Index As Long) As ISpeechPhraseAlternate
        [DispId(-4), Restricted]
        [Description("Enumerates the alternates")]
        Property Get _NewEnum() As IUnknown
    End Interface

    [InterfaceId("27864A2A-2B9F-4CB8-92D3-0D2722FD1E73")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechPhraseAlternate Interface")]
    Interface ISpeechPhraseAlternate Extends stdole.IDispatch
        [DispId(1)]
        [Description("RecoResult")]
        Property Get RecoResult() As ISpeechRecoResult
        [DispId(2)]
        [Description("StartElementInResult")]
        Property Get StartElementInResult() As Long
        [DispId(3)]
        [Description("NumberOfElementsInResult")]
        Property Get NumberOfElementsInResult() As Long
        [DispId(4)]
        [Description("Phrase")]
        Property Get PhraseInfo() As ISpeechPhraseInfo
        [DispId(5)]
        [Description("Commit")]
        Sub Commit()
    End Interface

    [InterfaceId("8E0A246D-D3C8-45DE-8657-04290C458C3C")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechRecoResult2 Interface")]
    Interface ISpeechRecoResult2 Extends ISpeechRecoResult
        [DispId(12)]
        [Description("DiscardResultInfo")]
        Sub SetTextFeedback(ByVal Feedback As String, ByVal WasSuccessful As Boolean)
    End Interface

    [InterfaceId("3DA7627A-C7AE-4B23-8708-638C50362C25")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechLexicon Interface")]
    Interface ISpeechLexicon Extends stdole.IDispatch
        [DispId(1), Hidden]
        [Description("GenerationId")]
        Property Get GenerationId() As Long
        [DispId(2)]
        [Description("GetWords")]
        Function GetWords(Optional ByVal Flags As SpeechLexiconType = 3, Optional ByRef GenerationId As Long = 0) As ISpeechLexiconWords
        [DispId(3)]
        [Description("AddPronunciation")]
        Sub AddPronunciation(ByVal bstrWord As String, ByVal LangId As Long, Optional ByVal PartOfSpeech As SpeechPartOfSpeech = 0, Optional ByVal bstrPronunciation As String = "")
        [DispId(4), Hidden]
        [Description("AddPronunciationByPhoneIds")]
        Sub AddPronunciationByPhoneIds(ByVal bstrWord As String, ByVal LangId As Long, Optional ByVal PartOfSpeech As SpeechPartOfSpeech = 0, Optional ByRef PhoneIds As Variant = Empty)
        [DispId(5)]
        [Description("RemovePronunciation")]
        Sub RemovePronunciation(ByVal bstrWord As String, ByVal LangId As Long, Optional ByVal PartOfSpeech As SpeechPartOfSpeech = 0, Optional ByVal bstrPronunciation As String = "")
        [DispId(6), Hidden]
        [Description("RemovePronunciationByPhoneIds")]
        Sub RemovePronunciationByPhoneIds(ByVal bstrWord As String, ByVal LangId As Long, Optional ByVal PartOfSpeech As SpeechPartOfSpeech = 0, Optional ByRef PhoneIds As Variant = Empty)
        [DispId(7)]
        [Description("GetPronunciations")]
        Function GetPronunciations(ByVal bstrWord As String, Optional ByVal LangId As Long = 0, Optional ByVal TypeFlags As SpeechLexiconType = 3) As ISpeechLexiconPronunciations
        [DispId(8), Hidden]
        [Description("GetGenerationChange")]
        Function GetGenerationChange(ByRef GenerationId As Long) As ISpeechLexiconWords
    End Interface

    [InterfaceId("8D199862-415E-47D5-AC4F-FAA608B424E6")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechLexiconWords Interface")]
    Interface ISpeechLexiconWords Extends stdole.IDispatch
        [DispId(1)]
        [Description("Count")]
        Property Get Count() As Long
        [DispId(0)]
        [Description("Item")]
        Function Item(ByVal Index As Long) As ISpeechLexiconWord
        [DispId(-4), Restricted]
        [Description("Enumerates the tokens")]
        Property Get _NewEnum() As IUnknown
    End Interface

    [InterfaceId("4E5B933C-C9BE-48ED-8842-1EE51BB1D4FF")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechLexiconWord Interface")]
    Interface ISpeechLexiconWord Extends stdole.IDispatch
        [DispId(1)]
        Property Get LangId() As Long
        [DispId(2)]
        Property Get Type() As SpeechWordType
        [DispId(3)]
        Property Get Word() As String
        [DispId(4)]
        Property Get Pronunciations() As ISpeechLexiconPronunciations
    End Interface

    [InterfaceId("72829128-5682-4704-A0D4-3E2BB6F2EAD3")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechLexiconPronunciations Interface")]
    Interface ISpeechLexiconPronunciations Extends stdole.IDispatch
        [DispId(1)]
        [Description("Count")]
        Property Get Count() As Long
        [DispId(0)]
        [Description("Item")]
        Function Item(ByVal Index As Long) As ISpeechLexiconPronunciation
        [DispId(-4), Restricted]
        [Description("Enumerates the tokens")]
        Property Get _NewEnum() As IUnknown
    End Interface

    [InterfaceId("95252C5D-9E43-4F4A-9899-48EE73352F9F")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechLexiconPronunciation Interface")]
    Interface ISpeechLexiconPronunciation Extends stdole.IDispatch
        [DispId(1)]
        [Description("Type")]
        Property Get Type() As SpeechLexiconType
        [DispId(2)]
        [Description("LangId")]
        Property Get LangId() As Long
        [DispId(3)]
        [Description("PartOfSpeech")]
        Property Get PartOfSpeech() As SpeechPartOfSpeech
        [DispId(4)]
        [Description("PhoneIds")]
        Property Get PhoneIds() As Variant
        [DispId(5)]
        [Description("Symbolic")]
        Property Get Symbolic() As String
    End Interface

    [InterfaceId("AAEC54AF-8F85-4924-944D-B79D39D72E19")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechXMLRecoResult Interface")]
    Interface ISpeechXMLRecoResult Extends ISpeechRecoResult
        [DispId(10)]
        [Description("GetXMLResult")]
        Function GetXMLResult(ByVal Options As SPXMLRESULTOPTIONS) As String
        [DispId(11)]
        [Description("GetXMLErrorInfo")]
        Function GetXMLErrorInfo(ByRef LineNumber As Long, ByRef ScriptLine As String, ByRef Source As String, ByRef Description As String, ByRef ResultCode As Long) As Boolean
    End Interface

    [InterfaceId("6D60EB64-ACED-40A6-BBF3-4E557F71DEE2")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechRecoResultDispatch Interface")]
    Interface ISpeechRecoResultDispatch Extends stdole.IDispatch
        [DispId(1)]
        [Description("RecoContext")]
        Property Get RecoContext() As ISpeechRecoContext
        [DispId(2)]
        [Description("Times")]
        Property Get Times() As ISpeechRecoResultTimes
        [DispId(3)]
        [Description("AudioFormat")]
        Property Set AudioFormat(ByVal Format As ISpeechAudioFormat)
        [DispId(3)]
        [Description("AudioFormat")]
        Property Get AudioFormat() As ISpeechAudioFormat
        [DispId(4)]
        [Description("PhraseInfo")]
        Property Get PhraseInfo() As ISpeechPhraseInfo
        [DispId(5)]
        [Description("Alternates")]
        Function Alternates(ByVal RequestCount As Long, Optional ByVal StartElement As Long = 0, Optional ByVal Elements As Long = -1) As ISpeechPhraseAlternates
        [DispId(6)]
        [Description("Audio")]
        Function Audio(Optional ByVal StartElement As Long = 0, Optional ByVal Elements As Long = -1) As ISpeechMemoryStream
        [DispId(7)]
        [Description("SpeakAudio")]
        Function SpeakAudio(Optional ByVal StartElement As Long = 0, Optional ByVal Elements As Long = -1, Optional ByVal Flags As SpeechVoiceSpeakFlags = 0) As Long
        [DispId(8)]
        [Description("SaveToMemory")]
        Function SaveToMemory() As Variant
        [DispId(9)]
        [Description("DiscardResultInfo")]
        Sub DiscardResultInfo(ByVal ValueTypes As SpeechDiscardType)
        [DispId(10)]
        [Description("GetXMLResult")]
        Function GetXMLResult(ByVal Options As SPXMLRESULTOPTIONS) As String
        [DispId(11)]
        [Description("GetXMLErrorInfo")]
        Function GetXMLErrorInfo(ByRef LineNumber As Long, ByRef ScriptLine As String, ByRef Source As String, ByRef Description As String, ByRef ResultCode As Long /* HRESULT */) As Boolean
        [DispId(12)]
        [Description("SetTextFeedback")]
        Sub SetTextFeedback(ByVal Feedback As String, ByVal WasSuccessful As Boolean)
    End Interface

    [InterfaceId("3B151836-DF3A-4E0A-846C-D2ADC9334333")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechPhraseInfoBuilder Interface")]
    Interface ISpeechPhraseInfoBuilder Extends stdole.IDispatch
        [DispId(1)]
        [Description("RestorePhraseFromMemory")]
        Function RestorePhraseFromMemory(ByRef PhraseInMemory As Variant) As ISpeechPhraseInfo
    End Interface

    [InterfaceId("C3E4F353-433F-43D6-89A1-6A62A7054C3D")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechPhoneConverter Interface")]
    Interface ISpeechPhoneConverter Extends stdole.IDispatch
        [DispId(1)]
        [Description("LanguageId")]
        Property Get LanguageId() As Long
        [DispId(1)]
        [Description("LanguageId")]
        Property Let LanguageId(ByVal LanguageId As Long)
        [DispId(2)]
        [Description("PhoneToId")]
        Function PhoneToId(ByVal Phonemes As String) As Variant
        [DispId(3)]
        [Description("IdToPhone")]
        Function IdToPhone(ByVal IdArray As Variant) As String
    End Interface

    [InterfaceId("B9AC5783-FCD0-4B21-B119-B4F8DA8FD2C3")]
    [/* DualInterface, */COMExtensible]
    [Description("ISpeechResourceLoader Interface")]
    Interface ISpeechResourceLoader Extends stdole.IDispatch
        [DispId(1)]
        Sub LoadResource(ByVal bstrResourceUri As String, ByVal fAlwaysReload As Boolean, ByRef pStream As IUnknown, ByRef pbstrMIMEType As String, ByRef pfModified As Boolean, ByRef pbstrRedirectUrl As String)
        [DispId(2)]
        Sub GetLocalCopy(ByVal bstrResourceUri As String, ByRef pbstrLocalPath As String, ByRef pbstrMIMEType As String, ByRef pbstrRedirectUrl As String)
        [DispId(3)]
        Sub ReleaseLocalCopy(ByVal pbstrLocalPath As String)
    End Interface

'The following interfaces are DISPINTERFACE-only, which is not supported yet.
/*
    [ InterfaceId ("7B8FCB42-0E9D-4F00-A048-7B04D6179D3D") ]
    [ DispInterface, COMExtensible]
    Interface _ISpeechRecoContextEvents Extends stdole.IDispatch
        [ DispId (1) ]
        [ Description ("StartStream") ]
        Sub StartStream(ByVal StreamNumber As Long, ByVal StreamPosition As Variant)
        [ DispId (2) ]
        [ Description ("EndStream") ]
        Sub EndStream(ByVal StreamNumber As Long, ByVal StreamPosition As Variant, ByVal StreamReleased As Boolean)
        [ DispId (3) ]
        [ Description ("Bookmark") ]
        Sub Bookmark(ByVal StreamNumber As Long, ByVal StreamPosition As Variant, ByVal BookmarkId As Variant, ByVal Options As SpeechBookmarkOptions)
        [ DispId (4) ]
        [ Description ("SoundStart") ]
        Sub SoundStart(ByVal StreamNumber As Long, ByVal StreamPosition As Variant)
        [ DispId (5) ]
        [ Description ("SoundEnd") ]
        Sub SoundEnd(ByVal StreamNumber As Long, ByVal StreamPosition As Variant)
        [ DispId (6) ]
        [ Description ("PhraseStart") ]
        Sub PhraseStart(ByVal StreamNumber As Long, ByVal StreamPosition As Variant)
        [ DispId (7) ]
        [ Description ("Recognition") ]
        Sub Recognition(ByVal StreamNumber As Long, ByVal StreamPosition As Variant, ByVal RecognitionType As SpeechRecognitionType, ByVal Result As ISpeechRecoResult)
        [ DispId (8) ]
        [ Description ("Hypothesis") ]
        Sub Hypothesis(ByVal StreamNumber As Long, ByVal StreamPosition As Variant, ByVal Result As ISpeechRecoResult)
        [ DispId (9) ]
        [ Description ("PropertyNumberChange") ]
        Sub PropertyNumberChange(ByVal StreamNumber As Long, ByVal StreamPosition As Variant, ByVal PropertyName As String, ByVal NewNumberValue As Long)
        [ DispId (10) ]
        [ Description ("PropertyStringChange") ]
        Sub PropertyStringChange(ByVal StreamNumber As Long, ByVal StreamPosition As Variant, ByVal PropertyName As String, ByVal NewStringValue As String)
        [ DispId (11) ]
        [ Description ("FalseRecognition") ]
        Sub FalseRecognition(ByVal StreamNumber As Long, ByVal StreamPosition As Variant, ByVal Result As ISpeechRecoResult)
        [ DispId (12) ]
        [ Description ("Interference") ]
        Sub Interference(ByVal StreamNumber As Long, ByVal StreamPosition As Variant, ByVal Interference As SpeechInterference)
        [ DispId (13) ]
        [ Description ("RequestUI") ]
        Sub RequestUI(ByVal StreamNumber As Long, ByVal StreamPosition As Variant, ByVal UIType As String)
        [ DispId (14) ]
        [ Description ("RecognizerStateChange") ]
        Sub RecognizerStateChange(ByVal StreamNumber As Long, ByVal StreamPosition As Variant, ByVal NewState As SpeechRecognizerState)
        [ DispId (15) ]
        [ Description ("Adaptation") ]
        Sub Adaptation(ByVal StreamNumber As Long, ByVal StreamPosition As Variant)
        [ DispId (16) ]
        [ Description ("RecognitionForOtherContext") ]
        Sub RecognitionForOtherContext(ByVal StreamNumber As Long, ByVal StreamPosition As Variant)
        [ DispId (17) ]
        [ Description ("AudioLevel") ]
        Sub AudioLevel(ByVal StreamNumber As Long, ByVal StreamPosition As Variant, ByVal AudioLevel As Long)
        [ DispId (18) ]
        [ Description ("EnginePrivate") ]
        Sub EnginePrivate(ByVal StreamNumber As Long, ByVal StreamPosition As Variant, ByVal EngineData As Variant)
    End Interface


    [ InterfaceId ("A372ACD1-3BEF-4BBD-8FFB-CB3E2B416AF8") ]
    [ DispInterface, COMExtensible]
    Interface _ISpeechVoiceEvents Extends stdole.IDispatch
        [ DispId (1) ]
        [ Description ("StartStream") ]
        Sub StartStream(ByVal StreamNumber As Long, ByVal StreamPosition As Variant)
        [ DispId (2) ]
        [ Description ("EndStream") ]
        Sub EndStream(ByVal StreamNumber As Long, ByVal StreamPosition As Variant)
        [ DispId (3) ]
        [ Description ("VoiceChange") ]
        Sub VoiceChange(ByVal StreamNumber As Long, ByVal StreamPosition As Variant, ByVal VoiceObjectToken As ISpeechObjectToken)
        [ DispId (4) ]
        [ Description ("Bookmark") ]
        Sub Bookmark(ByVal StreamNumber As Long, ByVal StreamPosition As Variant, ByVal Bookmark As String, ByVal BookmarkId As Long)
        [ DispId (5) ]
        [ Description ("Word") ]
        Sub Word(ByVal StreamNumber As Long, ByVal StreamPosition As Variant, ByVal CharacterPosition As Long, ByVal Length As Long)
        [ DispId (7) ]
        [ Description ("Sentence") ]
        Sub Sentence(ByVal StreamNumber As Long, ByVal StreamPosition As Variant, ByVal CharacterPosition As Long, ByVal Length As Long)
        [ DispId (6) ]
        [ Description ("Phoneme") ]
        Sub Phoneme(ByVal StreamNumber As Long, ByVal StreamPosition As Variant, ByVal Duration As Long, ByVal NextPhoneId As Integer, ByVal Feature As SpeechVisemeFeature, ByVal CurrentPhoneId As Integer)
        [ DispId (8) ]
        [ Description ("Viseme") ]
        Sub Viseme(ByVal StreamNumber As Long, ByVal StreamPosition As Variant, ByVal Duration As Long, ByVal NextVisemeId As SpeechVisemeType, ByVal Feature As SpeechVisemeFeature, ByVal CurrentVisemeId As SpeechVisemeType)
        [ DispId (9) ]
        [ Description ("AudioLevel") ]
        Sub AudioLevel(ByVal StreamNumber As Long, ByVal StreamPosition As Variant, ByVal AudioLevel As Long)
        [ DispId (10) ]
        [ Description ("EnginePrivate") ]
        Sub EnginePrivate(ByVal StreamNumber As Long, ByVal StreamPosition As Long, ByVal EngineData As Variant)
    End Interface
*/
 
#Region "Coclasses"

    [CoClassId("E2AE5372-5D40-11D2-960E-00C04F8EE628")]
    [Hidden, Restricted, COMCreatable]
    [Description("SpNotify")]
    CoClass SpNotifyTranslator
        [Default] Interface ISpNotifyTranslator
    End CoClass


    [CoClassId("A910187F-0C7A-45AC-92CC-59EDAFB77B53")]
    [COMCreatable]
    [Description("SpObjectTokenCategory Class")]
    CoClass SpObjectTokenCategory
        [Default] Interface ISpeechObjectTokenCategory
        Interface ISpObjectTokenCategory
    End CoClass


    [CoClassId("EF411752-3736-4CB4-9C8C-8EF4CCB58EFE")]
    [COMCreatable]
    [Description("SpObjectToken Class")]
    CoClass SpObjectToken
        [Default] Interface ISpeechObjectToken
        Interface ISpObjectToken
    End CoClass

    [CoClassId("96749373-3391-11D2-9EE3-00C04F797396")]
    [Hidden, Restricted, COMCreatable]
    [Description("SpResourceManger")]
    CoClass SpResourceManager
        [Default] Interface ISpResourceManager
    End CoClass


    [CoClassId("EF411752-3736-4CB4-9C8C-8EF4CCB58EFE")]
    [COMCreatable]
    [Description("SpObjectToken Class")]
    CoClass SpObjectToken
        [Default] Interface ISpeechObjectToken
        Interface ISpObjectToken
    End CoClass

    [CoClassId("96749373-3391-11D2-9EE3-00C04F797396")]
    [Hidden, Restricted, COMCreatable]
    [Description("SpResourceManger")]
    CoClass SpResourceManager
        [Default] Interface ISpResourceManager
    End CoClass

    [CoClassId("7013943A-E2EC-11D2-A086-00C04F8EF9B5")]
    [Hidden, Restricted, COMCreatable]
    [Description("FormatConverter Class")]
    CoClass SpStreamFormatConverter
        [Default] Interface ISpStreamFormatConverter
    End CoClass

    [CoClassId("AB1890A0-E91F-11D2-BB91-00C04F8EE6C0")]
    [Hidden, Restricted, COMCreatable]
    [Description("SpMMAudioEnum Class")]
    CoClass SpMMAudioEnum
        [Default] Interface IEnumSpObjectTokens
    End CoClass

    [CoClassId("CF3D2E50-53F2-11D2-960C-00C04F8EE628")]
    [COMCreatable]
    [Description("SpMMAudioIn Class")]
    CoClass SpMMAudioIn
        [Default] Interface ISpeechMMSysAudio
        Interface ISpEventSource
        Interface ISpEventSink
        Interface ISpObjectWithToken
        Interface ISpMMSysAudio
    End CoClass


    [CoClassId("A8C680EB-3D32-11D2-9EE7-00C04F797396")]
    [COMCreatable]
    [Description("SpMMAudioOut Class")]
    CoClass SpMMAudioOut
        [Default] Interface ISpeechMMSysAudio
        Interface ISpEventSource
        Interface ISpEventSink
        Interface ISpObjectWithToken
        Interface ISpMMSysAudio
    End CoClass

    [CoClassId("715D9C59-4442-11D2-9605-00C04F8EE628")]
    [Hidden, Restricted, COMCreatable]
    [Description("SpStream Class")]
    CoClass SpStream
        [Default] Interface ISpStream
    End CoClass

    [CoClassId("96749377-3391-11D2-9EE3-00C04F797396")]
    [COMCreatable]
    [Description("SpVoice Class")]
    CoClass SpVoice
        [Default] Interface ISpeechVoice
        Interface ISpVoice
        Interface ISpPhoneticAlphabetSelection
        '[ Default, Source ] Interface _ISpeechVoiceEvents
    End CoClass

    [CoClassId("47206204-5ECA-11D2-960F-00C04F8EE628")]
    [COMCreatable]
    [Description("SpSharedRecoContext Class")]
    CoClass SpSharedRecoContext
        [Default] Interface ISpeechRecoContext
        Interface ISpRecoContext
        Interface ISpRecoContext2
        Interface ISpPhoneticAlphabetSelection
        '[ Default, Source ] Interface _ISpeechRecoContextEvents
    End CoClass

    [CoClassId("41B89B6B-9399-11D2-9623-00C04F8EE628")]
    [COMCreatable]
    [Description("SpInprocRecognizer Class")]
    CoClass SpInprocRecognizer
        [Default] Interface ISpeechRecognizer
        Interface ISpRecognizer
        Interface ISpRecognizer2
        Interface ISpRecognizer3
        Interface ISpSerializeState
    End CoClass

    [CoClassId("3BEE4890-4FE9-4A37-8C1E-5E7E12791C1F")]
    [COMCreatable]
    [Description("SpSharedRecognizer Class")]
    CoClass SpSharedRecognizer
        [Default] Interface ISpeechRecognizer
        Interface ISpRecognizer
        Interface ISpRecognizer2
        Interface ISpRecognizer3
        Interface ISpSerializeState
    End CoClass

    [CoClassId("0655E396-25D0-11D3-9C26-00C04F8EF87C")]
    [COMCreatable]
    [Description("SpLexicon Class")]
    CoClass SpLexicon
        [Default] Interface ISpeechLexicon
        Interface ISpLexicon
        Interface ISpPhoneticAlphabetSelection
    End CoClass

    [CoClassId("C9E37C15-DF92-4727-85D6-72E5EEB6995A")]
    [COMCreatable]
    [Description("SpUnCompressedLexicon Class")]
    CoClass SpUnCompressedLexicon
        [Default] Interface ISpeechLexicon
        Interface ISpLexicon
        Interface ISpObjectWithToken
        Interface ISpPhoneticAlphabetSelection
    End CoClass

    [CoClassId("90903716-2F42-11D3-9C26-00C04F8EF87C")]
    [Hidden, Restricted, COMCreatable]
    [Description("SpCompressedLexicon Class")]
    CoClass SpCompressedLexicon
        [Default] Interface ISpLexicon
        Interface ISpObjectWithToken
    End CoClass

    [CoClassId("0D722F1A-9FCF-4E62-96D8-6DF8F01A26AA")]
    [COMCreatable]
    [Description("SpShortcut Class")]
    CoClass SpShortcut
        [Default] Interface ISpShortcut
        Interface ISpObjectWithToken
    End CoClass

    [CoClassId("9185F743-1143-4C28-86B5-BFF14F20E5C8")]
    [COMCreatable]
    [Description("SpPhoneConverter Class")]
    CoClass SpPhoneConverter
        [Default] Interface ISpeechPhoneConverter
        Interface ISpPhoneConverter
        Interface ISpPhoneticAlphabetSelection
    End CoClass

    [CoClassId("4F414126-DFE3-4629-99EE-797978317EAD")]
    [COMCreatable]
    [Description("SpPhoneticAlphabetConverter Class")]
    CoClass SpPhoneticAlphabetConverter
        [Default] Interface ISpPhoneticAlphabetConverter
    End CoClass

    [CoClassId("455F24E9-7396-4A16-9715-7C0FDBE3EFE3")]
    [Hidden, Restricted, COMCreatable]
    [Description("SpNullPhoneConverter Class")]
    CoClass SpNullPhoneConverter
        [Default] Interface ISpPhoneConverter
    End CoClass

    [CoClassId("0F92030A-CBFD-4AB8-A164-FF5985547FF6")]
    [COMCreatable]
    [Description("SpTextSelectionInformation Class")]
    CoClass SpTextSelectionInformation
        [Default] Interface ISpeechTextSelectionInformation
    End CoClass

    [CoClassId("C23FC28D-C55F-4720-8B32-91F73C2BD5D1")]
    [COMCreatable]
    [Description("SpPhraseInfoBuilder Class")]
    CoClass SpPhraseInfoBuilder
        [Default] Interface ISpeechPhraseInfoBuilder
    End CoClass

    [CoClassId("9EF96870-E160-4792-820D-48CF0649E4EC")]
    [COMCreatable]
    [Description("SpAudioFormat Class")]
    CoClass SpAudioFormat
        [Default] Interface ISpeechAudioFormat
    End CoClass

    [CoClassId("C79A574C-63BE-44B9-801F-283F87F898BE")]
    [COMCreatable]
    [Description("SpWaveFormatEx Class")]
    CoClass SpWaveFormatEx
        [Default] Interface ISpeechWaveFormatEx
    End CoClass

    [CoClassId("73AD6842-ACE0-45E8-A4DD-8795881A2C2A")]
    [COMCreatable]
    [Description("SpInProcRecoContext Class")]
    CoClass SpInProcRecoContext
        [Default] Interface ISpeechRecoContext
        Interface ISpRecoContext
        Interface ISpRecoContext2
        Interface ISpPhoneticAlphabetSelection
        '[ Default, Source ] Interface _ISpeechRecoContextEvents
    End CoClass

    [CoClassId("8DBEF13F-1948-4AA8-8CF0-048EEBED95D8")]
    [COMCreatable]
    [Description("SpCustomStream Class")]
    CoClass SpCustomStream
        [Default] Interface ISpeechCustomStream
        Interface ISpStream
    End CoClass

    [CoClassId("947812B3-2AE1-4644-BA86-9E90DED7EC91")]
    [COMCreatable]
    [Description("SpFileStream Class")]
    CoClass SpFileStream
        [Default] Interface ISpeechFileStream
        Interface ISpStream
    End CoClass

    [CoClassId("5FB7EF7D-DFF4-468A-B6B7-2FCBD188F994")]
    [COMCreatable]
    [Description("SpMemoryStream Class")]
    CoClass SpMemoryStream
        [Default] Interface ISpeechMemoryStream
        Interface ISpStream
    End CoClass




#End Region



Module wdSpeech

Public Const Speech_Default_Weight As Single = 1 '// DEFAULT_WEIGHT;
Public Const Speech_Max_Word_Length = 128 '// SP_MAX_WORD_LENGTH;
Public Const Speech_Max_Pron_Length = 384' / SP_MAX_PRON_LENGTH;
Public Const Speech_StreamPos_Asap = 0 '// SP_STREAMPOS_ASAP;
Public Const Speech_StreamPos_RealTime = -1 ', //SP_STREAMPOS_REALTIME;
Public Const SpeechAllElements = -1 ', //SPPR_ALL_ELEMENTS;

    '//--- Root of registry entries for speech use
Public Const SpeechRegistryUserRoot = "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Speech"
Public Const SpeechRegistryLocalMachineRoot = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech"

    '//--- Object Token Categories for speech resource management
Public Const SpeechCategoryAudioOut = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\AudioOutput"
Public Const SpeechCategoryAudioIn = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\AudioInput"
Public Const SpeechCategoryVoices = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Voices"
Public Const SpeechCategoryRecognizers = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Recognizers"
Public Const SpeechCategoryAppLexicons = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\AppLexicons"
Public Const SpeechCategoryPhoneConverters = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\PhoneConverters"
Public Const SpeechCategoryRecoProfiles = "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Speech\RecoProfiles"

    '//--- User Lexicon Token Id
Public Const SpeechTokenIdUserLexicon = "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Speech\CurrentUserLexicon"

    '//--- Standard token values
Public Const SpeechTokenValueCLSID = "CLSID"
Public Const SpeechTokenKeyFiles = "Files"
Public Const SpeechTokenKeyUI = "UI"
Public Const SpeechTokenKeyAttributes = "Attributes"

    '//--- Standard voice category values
Public Const SpeechVoiceCategoryTTSRate = "DefaultTTSRate"

    '//--- Standard SR Engine properties
Public Const SpeechPropertyResourceUsage = "ResourceUsage"
Public Const SpeechPropertyHighConfidenceThreshold = "HighConfidenceThreshold"
Public Const SpeechPropertyNormalConfidenceThreshold = "NormalConfidenceThreshold"
Public Const SpeechPropertyLowConfidenceThreshold = "LowConfidenceThreshold"
Public Const SpeechPropertyResponseSpeed = "ResponseSpeed"
Public Const SpeechPropertyComplexResponseSpeed = "ComplexResponseSpeed"
Public Const SpeechPropertyAdaptationOn = "AdaptationOn"

    '//--- Standard SAPI Recognition Topics
Public Const SpeechDictationTopicSpelling = "Spelling"

    '//--- Special Tags used in SR grammars
Public Const SpeechGrammarTagWildcard = "..."
Public Const SpeechGrammarTagDictation = "*"
Public Const SpeechGrammarTagUnlimitedDictation = "*+"

    '//--- TokenUI constants
Public Const SpeechEngineProperties = "EngineProperties"
Public Const SpeechAddRemoveWord = "AddRemoveWord"
Public Const SpeechUserTraining = "UserTraining"
Public Const SpeechMicTraining = "MicTraining"
Public Const SpeechRecoProfileProperties = "RecoProfileProperties"
Public Const SpeechAudioProperties = "AudioProperties"
Public Const SpeechAudioVolume = "AudioVolume"

    '//--- ISpeechVoice::Skip constant
Public Const SpeechVoiceSkipTypeSentence = "Sentence"

    ' // The SpeechAudioFormat object includes a guid that can be used to set the format to 
    ' //  a custom value.
Public Const SpeechAudioFormatGUIDWave = "{C31ADBAE-527F-4ff5-A230-F62BB61FF70C}"
Public Const SpeechAudioFormatGUIDText = "{7CEEF9F9-3D13-11d2-9EE7-00C04F797396}"

Public Const SP_LOW_CONFIDENCE As Byte = 255
Public Const SP_NORMAL_CONFIDENCE As Byte = 0
Public Const SP_HIGH_CONFIDENCE As Byte = 1

' // CFG default weight
' // MIDL does not support floating point in the RHS.  
' // Thus, using 1.0 instead of 1 resulted in unexpected behavior in the resulting Type library.
Public Const DEFAULT_WEIGHT As Single = 1

' // Lexicon word and pronunciation limits
Public Const SP_MAX_WORD_LENGTH As Long = 128
Public Const SP_MAX_PRON_LENGTH As Long = 384

' //#If _SAPI_BUILD_VER >= 0x053
' // Flag used in EmulateRecognitionEx to indicate re-sending an existing result
Public Const SP_EMULATE_RESULT As Long = &H40000000

'//--- TokenUI constants
Public Const SPDUI_EngineProperties   = "EngineProperties"
Public Const SPDUI_AddRemoveWord      = "AddRemoveWord"
Public Const SPDUI_UserTraining       = "UserTraining"
Public Const SPDUI_MicTraining        = "MicTraining"
Public Const SPDUI_RecoProfileProperties = "RecoProfileProperties"
Public Const SPDUI_AudioProperties    = "AudioProperties"
Public Const SPDUI_AudioVolume        = "AudioVolume"
Public Const SPDUI_UserEnrollment     = "UserEnrollment"
Public Const SPDUI_ShareData          = "ShareData"

'// new for Vista.  Nothing prevents use downlevel if an engine exposes them
Public Const SPDUI_Tutorial           = "Tutorial"

'//--- Root of registry entries for speech use
Public Const SPREG_USER_ROOT          = "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Speech"
Public Const SPREG_LOCAL_MACHINE_ROOT = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech"

'//--- Categories for speech resource management
Public Const SPCAT_AUDIOOUT         = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\AudioOutput"
Public Const SPCAT_AUDIOIN          = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\AudioInput"
Public Const SPCAT_VOICES           = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Voices"
Public Const SPCAT_RECOGNIZERS      = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Recognizers"
Public Const SPCAT_APPLEXICONS      = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\AppLexicons"
Public Const SPCAT_PHONECONVERTERS  = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\PhoneConverters"
Public Const SPCAT_TEXTNORMALIZERS  = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\TextNormalizers"
Public Const SPCAT_RECOPROFILES     = "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Speech\RecoProfiles"

'//--- Specific token ids of interest
Public Const SPMMSYS_AUDIO_IN_TOKEN_ID        = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\AudioInput\TokenEnums\MMAudioIn\"
Public Const SPMMSYS_AUDIO_OUT_TOKEN_ID       = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\AudioOutput\TokenEnums\MMAudioOut\"
Public Const SPCURRENT_USER_LEXICON_TOKEN_ID  = "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Speech\CurrentUserLexicon"
'// Shortcuts only supported on Vista and above
Public Const SPCURRENT_USER_SHORTCUT_TOKEN_ID  = "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Speech\CurrentUserShortcut"

'//--- Standard token values
Public Const SPTOKENVALUE_CLSID = "CLSID"
Public Const SPTOKENKEY_FILES = "Files"
Public Const SPTOKENKEY_UI = "UI"
Public Const SPTOKENKEY_ATTRIBUTES = "Attributes"

Public Const SPTOKENKEY_RETAINEDAUDIO = "SecondsPerRetainedAudioEvent"
Public Const SPTOKENKEY_AUDIO_LATENCY_WARNING = "LatencyWarningThreshold"
Public Const SPTOKENKEY_AUDIO_LATENCY_TRUNCATE = "LatencyTruncateThreshold"
Public Const SPTOKENKEY_AUDIO_LATENCY_UPDATE_INTERVAL = "LatencyUpdateInterval"


'//--- Standard voice category values
Public Const SPVOICECATEGORY_TTSRATE = "DefaultTTSRate"

'//--- Standard SR Engine properties
Public Const SPPROP_RESOURCE_USAGE              = "ResourceUsage"
Public Const SPPROP_HIGH_CONFIDENCE_THRESHOLD   = "HighConfidenceThreshold"
Public Const SPPROP_NORMAL_CONFIDENCE_THRESHOLD = "NormalConfidenceThreshold"
Public Const SPPROP_LOW_CONFIDENCE_THRESHOLD    = "LowConfidenceThreshold"
Public Const SPPROP_RESPONSE_SPEED              = "ResponseSpeed"
Public Const SPPROP_COMPLEX_RESPONSE_SPEED      = "ComplexResponseSpeed"
Public Const SPPROP_ADAPTATION_ON               = "AdaptationOn"

'// new for Vista, but nothing prevents engines that run downlevel from supporting these
Public Const SPPROP_PERSISTED_BACKGROUND_ADAPTATION = "PersistedBackgroundAdaptation"
Public Const SPPROP_PERSISTED_LANGUAGE_MODEL_ADAPTATION = "PersistedLanguageModelAdaptation"
Public Const SPPROP_UX_IS_LISTENING             = "UXIsListening"

'//--- Standard SAPI Recognition Topics
Public Const SPTOPIC_SPELLING = "Spelling"

'// CFG Wildcard token
Public Const SPWILDCARD = "..."

'// CFG Dication token
Public Const SPDICTATION    = "*"
Public Const SPINFDICTATION = "*+"


'// Registry key that stores a list of object token CLSIDs marked as safe to instantiate from HKCU
Public Const SPREG_SAFE_USER_TOKENS       = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\UserTokens"

' Public Const SPFEI_FLAGCHECK As LongLong = ((1 << SPEI_RESERVED1) Or (1 << SPEI_RESERVED2))
Public Const SPFEI_FLAGCHECK As LongLong = ((1& << 30) Or (1& << 33))
Public Const SPFEI_ALL_TTS_EVENTS As LongLong = (&H000000000000FFFE& Or SPFEI_FLAGCHECK)
Public Const SPFEI_ALL_SR_EVENTS As LongLong = (&H003FFFFC00000000 Or SPFEI_FLAGCHECK)
Public Const SPFEI_ALL_EVENTS As LongLong = &HEFFFFFFFFFFFFFFF

Public Const SP_MAX_LANGIDS = 20'        // Engine can support up to 20 languages at once

Public Const SP_STREAMPOS_ASAPS As LongLong = 0
Public Const SP_STREAMPOS_REALTIMES As LongLong = -1

Public Const SPRULETRANS_TEXTBUFFER As LongPtr = (-1)
Public Const SPRULETRANS_WILDCARD As LongPtr = (-2)
Public Const SPRULETRANS_DICTATION As LongPtr = (-3)


Public Function IID_ISpeechDataKey() As UUID
'{CE17C09B-4EFA-44d5-A4C9-59D9585AB0CD}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HCE17C09B, CInt(&H4EFA), CInt(&H44d5), &HA4, &HC9, &H59, &HD9, &H58, &H5A, &HB0, &HCD)
IID_ISpeechDataKey = iid
End Function
Public Function IID_ISpeechObjectToken() As UUID
'{C74A3ADC-B727-4500-A84A-B526721C8B8C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC74A3ADC, CInt(&HB727), CInt(&H4500), &HA8, &H4A, &HB5, &H26, &H72, &H1C, &H8B, &H8C)
IID_ISpeechObjectToken = iid
End Function
Public Function IID_ISpeechObjectTokens() As UUID
'{9285B776-2E7B-4bc0-B53E-580EB6FA967F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9285B776, CInt(&H2E7B), CInt(&H4bc0), &HB5, &H3E, &H58, &H0E, &HB6, &HFA, &H96, &H7F)
IID_ISpeechObjectTokens = iid
End Function
Public Function IID_ISpeechObjectTokenCategory() As UUID
'{CA7EAC50-2D01-4145-86D4-5AE7D70F4469}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HCA7EAC50, CInt(&H2D01), CInt(&H4145), &H86, &HD4, &H5A, &HE7, &HD7, &H0F, &H44, &H69)
IID_ISpeechObjectTokenCategory = iid
End Function
Public Function IID_ISpeechAudioFormat() As UUID
'{E6E9C590-3E18-40e3-8299-061F98BDE7C7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE6E9C590, CInt(&H3E18), CInt(&H40e3), &H82, &H99, &H06, &H1F, &H98, &HBD, &HE7, &HC7)
IID_ISpeechAudioFormat = iid
End Function
Public Function IID_ISpeechBaseStream() As UUID
'{6450336F-7D49-4ced-8097-49D6DEE37294}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6450336F, CInt(&H7D49), CInt(&H4ced), &H80, &H97, &H49, &HD6, &HDE, &HE3, &H72, &H94)
IID_ISpeechBaseStream = iid
End Function
Public Function IID_ISpeechAudio() As UUID
'{CFF8E175-019E-11d3-A08E-00C04F8EF9B5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HCFF8E175, CInt(&H019E), CInt(&H11d3), &HA0, &H8E, &H00, &HC0, &H4F, &H8E, &HF9, &HB5)
IID_ISpeechAudio = iid
End Function
Public Function IID_ISpeechMMSysAudio() As UUID
'{3C76AF6D-1FD7-4831-81D1-3B71D5A13C44}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3C76AF6D, CInt(&H1FD7), CInt(&H4831), &H81, &HD1, &H3B, &H71, &HD5, &HA1, &H3C, &H44)
IID_ISpeechMMSysAudio = iid
End Function
Public Function IID_ISpeechFileStream() As UUID
'{AF67F125-AB39-4e93-B4A2-CC2E66E182A7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HAF67F125, CInt(&HAB39), CInt(&H4e93), &HB4, &HA2, &HCC, &H2E, &H66, &HE1, &H82, &HA7)
IID_ISpeechFileStream = iid
End Function
Public Function IID_ISpeechCustomStream() As UUID
'{1A9E9F4F-104F-4db8-A115-EFD7FD0C97AE}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1A9E9F4F, CInt(&H104F), CInt(&H4db8), &HA1, &H15, &HEF, &HD7, &HFD, &H0C, &H97, &HAE)
IID_ISpeechCustomStream = iid
End Function
Public Function IID_ISpeechMemoryStream() As UUID
'{EEB14B68-808B-4abe-A5EA-B51DA7588008}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEEB14B68, CInt(&H808B), CInt(&H4abe), &HA5, &HEA, &HB5, &H1D, &HA7, &H58, &H80, &H08)
IID_ISpeechMemoryStream = iid
End Function
Public Function IID_ISpeechAudioStatus() As UUID
'{C62D9C91-7458-47f6-862D-1EF86FB0B278}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC62D9C91, CInt(&H7458), CInt(&H47f6), &H86, &H2D, &H1E, &HF8, &H6F, &HB0, &HB2, &H78)
IID_ISpeechAudioStatus = iid
End Function
Public Function IID_ISpeechAudioBufferInfo() As UUID
'{11B103D8-1142-4edf-A093-82FB3915F8CC}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H11B103D8, CInt(&H1142), CInt(&H4edf), &HA0, &H93, &H82, &HFB, &H39, &H15, &HF8, &HCC)
IID_ISpeechAudioBufferInfo = iid
End Function
Public Function IID_ISpeechWaveFormatEx() As UUID
'{7A1EF0D5-1581-4741-88E4-209A49F11A10}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7A1EF0D5, CInt(&H1581), CInt(&H4741), &H88, &HE4, &H20, &H9A, &H49, &HF1, &H1A, &H10)
IID_ISpeechWaveFormatEx = iid
End Function
Public Function IID_ISpeechVoice() As UUID
'{269316D8-57BD-11D2-9EEE-00C04F797396}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H269316D8, CInt(&H57BD), CInt(&H11D2), &H9E, &HEE, &H00, &HC0, &H4F, &H79, &H73, &H96)
IID_ISpeechVoice = iid
End Function
Public Function IID_ISpeechVoiceStatus() As UUID
'{8BE47B07-57F6-11d2-9EEE-00C04F797396}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8BE47B07, CInt(&H57F6), CInt(&H11d2), &H9E, &HEE, &H00, &HC0, &H4F, &H79, &H73, &H96)
IID_ISpeechVoiceStatus = iid
End Function
Public Function IID_ISpeechVoiceEvents() As UUID
'{A372ACD1-3BEF-4bbd-8FFB-CB3E2B416AF8}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA372ACD1, CInt(&H3BEF), CInt(&H4bbd), &H8F, &HFB, &HCB, &H3E, &H2B, &H41, &H6A, &HF8)
 IID_ISpeechVoiceEvents = iid
End Function
Public Function IID_ISpeechRecoContextEvents() As UUID
'{7B8FCB42-0E9D-4f00-A048-7B04D6179D3D}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7B8FCB42, CInt(&H0E9D), CInt(&H4f00), &HA0, &H48, &H7B, &H04, &HD6, &H17, &H9D, &H3D)
 IID_ISpeechRecoContextEvents = iid
End Function
Public Function IID_ISpeechRecognizer() As UUID
'{2D5F1C0C-BD75-4b08-9478-3B11FEA2586C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2D5F1C0C, CInt(&HBD75), CInt(&H4b08), &H94, &H78, &H3B, &H11, &HFE, &HA2, &H58, &H6C)
IID_ISpeechRecognizer = iid
End Function
Public Function IID_ISpeechRecognizerStatus() As UUID
'{BFF9E781-53EC-484e-BB8A-0E1B5551E35C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBFF9E781, CInt(&H53EC), CInt(&H484e), &HBB, &H8A, &H0E, &H1B, &H55, &H51, &HE3, &H5C)
IID_ISpeechRecognizerStatus = iid
End Function
Public Function IID_ISpeechRecoContext() As UUID
'{580AA49D-7E1E-4809-B8E2-57DA806104B8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H580AA49D, CInt(&H7E1E), CInt(&H4809), &HB8, &HE2, &H57, &HDA, &H80, &H61, &H04, &HB8)
IID_ISpeechRecoContext = iid
End Function
Public Function IID_ISpeechRecoGrammar() As UUID
'{B6D6F79F-2158-4e50-B5BC-9A9CCD852A09}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB6D6F79F, CInt(&H2158), CInt(&H4e50), &HB5, &HBC, &H9A, &H9C, &HCD, &H85, &H2A, &H09)
IID_ISpeechRecoGrammar = iid
End Function
Public Function IID_ISpeechGrammarRule() As UUID
'{AFE719CF-5DD1-44f2-999C-7A399F1CFCCC}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HAFE719CF, CInt(&H5DD1), CInt(&H44f2), &H99, &H9C, &H7A, &H39, &H9F, &H1C, &HFC, &HCC)
IID_ISpeechGrammarRule = iid
End Function
Public Function IID_ISpeechGrammarRules() As UUID
'{6FFA3B44-FC2D-40d1-8AFC-32911C7F1AD1}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6FFA3B44, CInt(&HFC2D), CInt(&H40d1), &H8A, &HFC, &H32, &H91, &H1C, &H7F, &H1A, &HD1)
IID_ISpeechGrammarRules = iid
End Function
Public Function IID_ISpeechGrammarRuleState() As UUID
'{D4286F2C-EE67-45ae-B928-28D695362EDA}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD4286F2C, CInt(&HEE67), CInt(&H45ae), &HB9, &H28, &H28, &HD6, &H95, &H36, &H2E, &HDA)
IID_ISpeechGrammarRuleState = iid
End Function
Public Function IID_ISpeechGrammarRuleStateTransitions() As UUID
'{EABCE657-75BC-44a2-AA7F-C56476742963}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEABCE657, CInt(&H75BC), CInt(&H44a2), &HAA, &H7F, &HC5, &H64, &H76, &H74, &H29, &H63)
IID_ISpeechGrammarRuleStateTransitions = iid
End Function
Public Function IID_ISpeechGrammarRuleStateTransition() As UUID
'{CAFD1DB1-41D1-4a06-9863-E2E81DA17A9A}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HCAFD1DB1, CInt(&H41D1), CInt(&H4a06), &H98, &H63, &HE2, &HE8, &H1D, &HA1, &H7A, &H9A)
IID_ISpeechGrammarRuleStateTransition = iid
End Function
Public Function IID_ISpeechTextSelectionInformation() As UUID
'{3B9C7E7A-6EEE-4DED-9092-11657279ADBE}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3B9C7E7A, CInt(&H6EEE), CInt(&H4DED), &H90, &H92, &H11, &H65, &H72, &H79, &HAD, &HBE)
IID_ISpeechTextSelectionInformation = iid
End Function
Public Function IID_ISpeechRecoResult() As UUID
'{ED2879CF-CED9-4ee6-A534-DE0191D5468D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HED2879CF, CInt(&HCED9), CInt(&H4ee6), &HA5, &H34, &HDE, &H01, &H91, &HD5, &H46, &H8D)
IID_ISpeechRecoResult = iid
End Function
Public Function IID_ISpeechXMLRecoResult() As UUID
'{AAEC54AF-8F85-4924-944D-B79D39D72E19}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HAAEC54AF, CInt(&H8F85), CInt(&H4924), &H94, &H4D, &HB7, &H9D, &H39, &HD7, &H2E, &H19)
IID_ISpeechXMLRecoResult = iid
End Function
Public Function IID_ISpeechRecoResult2() As UUID
'{8E0A246D-D3C8-45de-8657-04290C458C3C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8E0A246D, CInt(&HD3C8), CInt(&H45de), &H86, &H57, &H04, &H29, &H0C, &H45, &H8C, &H3C)
IID_ISpeechRecoResult2 = iid
End Function
Public Function IID_ISpeechRecoResultDispatch() As UUID
'{6D60EB64-ACED-40a6-BBF3-4E557F71DEE2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6D60EB64, CInt(&HACED), CInt(&H40a6), &HBB, &HF3, &H4E, &H55, &H7F, &H71, &HDE, &HE2)
IID_ISpeechRecoResultDispatch = iid
End Function
Public Function IID_ISpeechPhraseInfoBuilder() As UUID
'{3B151836-DF3A-4E0A-846C-D2ADC9334333}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3B151836, CInt(&HDF3A), CInt(&H4E0A), &H84, &H6C, &HD2, &HAD, &HC9, &H33, &H43, &H33)
IID_ISpeechPhraseInfoBuilder = iid
End Function
Public Function IID_ISpeechRecoResultTimes() As UUID
'{62B3B8FB-F6E7-41be-BDCB-056B1C29EFC0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H62B3B8FB, CInt(&HF6E7), CInt(&H41be), &HBD, &HCB, &H05, &H6B, &H1C, &H29, &HEF, &HC0)
IID_ISpeechRecoResultTimes = iid
End Function
Public Function IID_ISpeechPhraseAlternate() As UUID
'{27864A2A-2B9F-4cb8-92D3-0D2722FD1E73}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H27864A2A, CInt(&H2B9F), CInt(&H4cb8), &H92, &HD3, &H0D, &H27, &H22, &HFD, &H1E, &H73)
IID_ISpeechPhraseAlternate = iid
End Function
Public Function IID_ISpeechPhraseAlternates() As UUID
'{B238B6D5-F276-4c3d-A6C1-2974801C3CC2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB238B6D5, CInt(&HF276), CInt(&H4c3d), &HA6, &HC1, &H29, &H74, &H80, &H1C, &H3C, &HC2)
IID_ISpeechPhraseAlternates = iid
End Function
Public Function IID_ISpeechPhraseInfo() As UUID
'{961559CF-4E67-4662-8BF0-D93F1FCD61B3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H961559CF, CInt(&H4E67), CInt(&H4662), &H8B, &HF0, &HD9, &H3F, &H1F, &HCD, &H61, &HB3)
IID_ISpeechPhraseInfo = iid
End Function
Public Function IID_ISpeechPhraseElement() As UUID
'{E6176F96-E373-4801-B223-3B62C068C0B4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE6176F96, CInt(&HE373), CInt(&H4801), &HB2, &H23, &H3B, &H62, &HC0, &H68, &HC0, &HB4)
IID_ISpeechPhraseElement = iid
End Function
Public Function IID_ISpeechPhraseElements() As UUID
'{0626B328-3478-467d-A0B3-D0853B93DDA3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H0626B328, CInt(&H3478), CInt(&H467d), &HA0, &HB3, &HD0, &H85, &H3B, &H93, &HDD, &HA3)
IID_ISpeechPhraseElements = iid
End Function
Public Function IID_ISpeechPhraseReplacement() As UUID
'{2890A410-53A7-4fb5-94EC-06D4998E3D02}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2890A410, CInt(&H53A7), CInt(&H4fb5), &H94, &HEC, &H06, &HD4, &H99, &H8E, &H3D, &H02)
IID_ISpeechPhraseReplacement = iid
End Function
Public Function IID_ISpeechPhraseReplacements() As UUID
'{38BC662F-2257-4525-959E-2069D2596C05}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H38BC662F, CInt(&H2257), CInt(&H4525), &H95, &H9E, &H20, &H69, &HD2, &H59, &H6C, &H05)
IID_ISpeechPhraseReplacements = iid
End Function
Public Function IID_ISpeechPhraseProperty() As UUID
'{CE563D48-961E-4732-A2E1-378A42B430BE}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HCE563D48, CInt(&H961E), CInt(&H4732), &HA2, &HE1, &H37, &H8A, &H42, &HB4, &H30, &HBE)
IID_ISpeechPhraseProperty = iid
End Function
Public Function IID_ISpeechPhraseProperties() As UUID
'{08166B47-102E-4b23-A599-BDB98DBFD1F4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H08166B47, CInt(&H102E), CInt(&H4b23), &HA5, &H99, &HBD, &HB9, &H8D, &HBF, &HD1, &HF4)
IID_ISpeechPhraseProperties = iid
End Function
Public Function IID_ISpeechPhraseRule() As UUID
'{A7BFE112-A4A0-48d9-B602-C313843F6964}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA7BFE112, CInt(&HA4A0), CInt(&H48d9), &HB6, &H02, &HC3, &H13, &H84, &H3F, &H69, &H64)
IID_ISpeechPhraseRule = iid
End Function
Public Function IID_ISpeechPhraseRules() As UUID
'{9047D593-01DD-4b72-81A3-E4A0CA69F407}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9047D593, CInt(&H01DD), CInt(&H4b72), &H81, &HA3, &HE4, &HA0, &HCA, &H69, &HF4, &H07)
IID_ISpeechPhraseRules = iid
End Function
Public Function IID_ISpeechLexicon() As UUID
'{3DA7627A-C7AE-4b23-8708-638C50362C25}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3DA7627A, CInt(&HC7AE), CInt(&H4b23), &H87, &H08, &H63, &H8C, &H50, &H36, &H2C, &H25)
IID_ISpeechLexicon = iid
End Function
Public Function IID_ISpeechLexiconWords() As UUID
'{8D199862-415E-47d5-AC4F-FAA608B424E6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8D199862, CInt(&H415E), CInt(&H47d5), &HAC, &H4F, &HFA, &HA6, &H08, &HB4, &H24, &HE6)
IID_ISpeechLexiconWords = iid
End Function
Public Function IID_ISpeechLexiconWord() As UUID
'{4E5B933C-C9BE-48ed-8842-1EE51BB1D4FF}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4E5B933C, CInt(&HC9BE), CInt(&H48ed), &H88, &H42, &H1E, &HE5, &H1B, &HB1, &HD4, &HFF)
IID_ISpeechLexiconWord = iid
End Function
Public Function IID_ISpeechLexiconPronunciations() As UUID
'{72829128-5682-4704-A0D4-3E2BB6F2EAD3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H72829128, CInt(&H5682), CInt(&H4704), &HA0, &HD4, &H3E, &H2B, &HB6, &HF2, &HEA, &HD3)
IID_ISpeechLexiconPronunciations = iid
End Function
Public Function IID_ISpeechLexiconPronunciation() As UUID
'{95252C5D-9E43-4f4a-9899-48EE73352F9F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H95252C5D, CInt(&H9E43), CInt(&H4f4a), &H98, &H99, &H48, &HEE, &H73, &H35, &H2F, &H9F)
IID_ISpeechLexiconPronunciation = iid
End Function
Public Function IID_ISpeechPhoneConverter() As UUID
'{C3E4F353-433F-43d6-89A1-6A62A7054C3D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC3E4F353, CInt(&H433F), CInt(&H43d6), &H89, &HA1, &H6A, &H62, &HA7, &H05, &H4C, &H3D)
IID_ISpeechPhoneConverter = iid
End Function
Public Function IID_ISpNotifySource() As UUID
'{5EFF4AEF-8487-11D2-961C-00C04F8EE628}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5EFF4AEF, CInt(&H8487), CInt(&H11D2), &H96, &H1C, &H00, &HC0, &H4F, &H8E, &HE6, &H28)
IID_ISpNotifySource = iid
End Function
Public Function IID_ISpNotifySink() As UUID
'{259684DC-37C3-11D2-9603-00C04F8EE628}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H259684DC, CInt(&H37C3), CInt(&H11D2), &H96, &H03, &H00, &HC0, &H4F, &H8E, &HE6, &H28)
IID_ISpNotifySink = iid
End Function
Public Function IID_ISpNotifyTranslator() As UUID
'{ACA16614-5D3D-11D2-960E-00C04F8EE628}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HACA16614, CInt(&H5D3D), CInt(&H11D2), &H96, &H0E, &H00, &HC0, &H4F, &H8E, &HE6, &H28)
IID_ISpNotifyTranslator = iid
End Function
Public Function IID_ISpDataKey() As UUID
'{14056581-E16C-11D2-BB90-00C04F8EE6C0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H14056581, CInt(&HE16C), CInt(&H11D2), &HBB, &H90, &H00, &HC0, &H4F, &H8E, &HE6, &HC0)
IID_ISpDataKey = iid
End Function
Public Function IID_ISpRegDataKey() As UUID
'{92A66E2B-C830-4149-83DF-6FC2BA1E7A5B}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H92A66E2B, CInt(&HC830), CInt(&H4149), &H83, &HDF, &H6F, &HC2, &HBA, &H1E, &H7A, &H5B)
IID_ISpRegDataKey = iid
End Function
Public Function IID_ISpObjectTokenCategory() As UUID
'{2D3D3845-39AF-4850-BBF9-40B49780011D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2D3D3845, CInt(&H39AF), CInt(&H4850), &HBB, &HF9, &H40, &HB4, &H97, &H80, &H01, &H1D)
IID_ISpObjectTokenCategory = iid
End Function
Public Function IID_ISpObjectToken() As UUID
'{14056589-E16C-11D2-BB90-00C04F8EE6C0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H14056589, CInt(&HE16C), CInt(&H11D2), &HBB, &H90, &H00, &HC0, &H4F, &H8E, &HE6, &HC0)
IID_ISpObjectToken = iid
End Function
Public Function IID_ISpObjectTokenInit() As UUID
'{B8AAB0CF-346F-49D8-9499-C8B03F161D51}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB8AAB0CF, CInt(&H346F), CInt(&H49D8), &H94, &H99, &HC8, &HB0, &H3F, &H16, &H1D, &H51)
IID_ISpObjectTokenInit = iid
End Function
Public Function IID_IEnumSpObjectTokens() As UUID
'{06B64F9E-7FDA-11D2-B4F2-00C04F797396}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H06B64F9E, CInt(&H7FDA), CInt(&H11D2), &HB4, &HF2, &H00, &HC0, &H4F, &H79, &H73, &H96)
IID_IEnumSpObjectTokens = iid
End Function
Public Function IID_ISpObjectWithToken() As UUID
'{5B559F40-E952-11D2-BB91-00C04F8EE6C0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5B559F40, CInt(&HE952), CInt(&H11D2), &HBB, &H91, &H00, &HC0, &H4F, &H8E, &HE6, &HC0)
IID_ISpObjectWithToken = iid
End Function
Public Function IID_ISpResourceManager() As UUID
'{93384E18-5014-43D5-ADBB-A78E055926BD}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H93384E18, CInt(&H5014), CInt(&H43D5), &HAD, &HBB, &HA7, &H8E, &H05, &H59, &H26, &HBD)
IID_ISpResourceManager = iid
End Function
Public Function IID_ISpEventSource() As UUID
'{BE7A9CCE-5F9E-11D2-960F-00C04F8EE628}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBE7A9CCE, CInt(&H5F9E), CInt(&H11D2), &H96, &H0F, &H00, &HC0, &H4F, &H8E, &HE6, &H28)
IID_ISpEventSource = iid
End Function
Public Function IID_ISpEventSource2() As UUID
'{2373A435-6A4B-429e-A6AC-D4231A61975B}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2373A435, CInt(&H6A4B), CInt(&H429e), &HA6, &HAC, &HD4, &H23, &H1A, &H61, &H97, &H5B)
IID_ISpEventSource2 = iid
End Function
Public Function IID_ISpEventSink() As UUID
'{BE7A9CC9-5F9E-11D2-960F-00C04F8EE628}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBE7A9CC9, CInt(&H5F9E), CInt(&H11D2), &H96, &H0F, &H00, &HC0, &H4F, &H8E, &HE6, &H28)
IID_ISpEventSink = iid
End Function
Public Function IID_ISpStreamFormat() As UUID
'{BED530BE-2606-4F4D-A1C0-54C5CDA5566F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBED530BE, CInt(&H2606), CInt(&H4F4D), &HA1, &HC0, &H54, &HC5, &HCD, &HA5, &H56, &H6F)
IID_ISpStreamFormat = iid
End Function
Public Function IID_ISpStream() As UUID
'{12E3CCA9-7518-44C5-A5E7-BA5A79CB929E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H12E3CCA9, CInt(&H7518), CInt(&H44C5), &HA5, &HE7, &HBA, &H5A, &H79, &HCB, &H92, &H9E)
IID_ISpStream = iid
End Function
Public Function IID_ISpStreamFormatConverter() As UUID
'{678A932C-EA71-4446-9B41-78FDA6280A29}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H678A932C, CInt(&HEA71), CInt(&H4446), &H9B, &H41, &H78, &HFD, &HA6, &H28, &H0A, &H29)
IID_ISpStreamFormatConverter = iid
End Function
Public Function IID_ISpAudio() As UUID
'{C05C768F-FAE8-4EC2-8E07-338321C12452}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC05C768F, CInt(&HFAE8), CInt(&H4EC2), &H8E, &H07, &H33, &H83, &H21, &HC1, &H24, &H52)
IID_ISpAudio = iid
End Function
Public Function IID_ISpMMSysAudio() As UUID
'{15806F6E-1D70-4B48-98E6-3B1A007509AB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H15806F6E, CInt(&H1D70), CInt(&H4B48), &H98, &HE6, &H3B, &H1A, &H00, &H75, &H09, &HAB)
IID_ISpMMSysAudio = iid
End Function
Public Function IID_ISpTranscript() As UUID
'{10F63BCE-201A-11D3-AC70-00C04F8EE6C0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H10F63BCE, CInt(&H201A), CInt(&H11D3), &HAC, &H70, &H00, &HC0, &H4F, &H8E, &HE6, &HC0)
IID_ISpTranscript = iid
End Function
Public Function IID_ISpLexicon() As UUID
'{DA41A7C2-5383-4DB2-916B-6C1719E3DB58}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDA41A7C2, CInt(&H5383), CInt(&H4DB2), &H91, &H6B, &H6C, &H17, &H19, &HE3, &HDB, &H58)
IID_ISpLexicon = iid
End Function
Public Function IID_ISpContainerLexicon() As UUID
'{8565572F-C094-41CC-B56E-10BD9C3FF044}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8565572F, CInt(&HC094), CInt(&H41CC), &HB5, &H6E, &H10, &HBD, &H9C, &H3F, &HF0, &H44)
IID_ISpContainerLexicon = iid
End Function
Public Function IID_ISpShortcut() As UUID
'{3DF681E2-EA56-11D9-8BDE-F66BAD1E3F3A}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3DF681E2, CInt(&HEA56), CInt(&H11D9), &H8B, &HDE, &HF6, &H6B, &HAD, &H1E, &H3F, &H3A)
IID_ISpShortcut = iid
End Function
Public Function IID_ISpPhoneConverter() As UUID
'{8445C581-0CAC-4A38-ABFE-9B2CE2826455}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8445C581, CInt(&H0CAC), CInt(&H4A38), &HAB, &HFE, &H9B, &H2C, &HE2, &H82, &H64, &H55)
IID_ISpPhoneConverter = iid
End Function
Public Function IID_ISpPhoneticAlphabetConverter() As UUID
'{133ADCD4-19B4-4020-9FDC-842E78253B17}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H133ADCD4, CInt(&H19B4), CInt(&H4020), &H9F, &HDC, &H84, &H2E, &H78, &H25, &H3B, &H17)
IID_ISpPhoneticAlphabetConverter = iid
End Function
Public Function IID_ISpPhoneticAlphabetSelection() As UUID
'{B2745EFD-42CE-48ca-81F1-A96E02538A90}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB2745EFD, CInt(&H42CE), CInt(&H48ca), &H81, &HF1, &HA9, &H6E, &H02, &H53, &H8A, &H90)
IID_ISpPhoneticAlphabetSelection = iid
End Function
Public Function IID_ISpVoice() As UUID
'{6C44DF74-72B9-4992-A1EC-EF996E0422D4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6C44DF74, CInt(&H72B9), CInt(&H4992), &HA1, &HEC, &HEF, &H99, &H6E, &H04, &H22, &HD4)
IID_ISpVoice = iid
End Function
Public Function IID_ISpPhrase() As UUID
'{1A5C0354-B621-4b5a-8791-D306ED379E53}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1A5C0354, CInt(&HB621), CInt(&H4b5a), &H87, &H91, &HD3, &H06, &HED, &H37, &H9E, &H53)
IID_ISpPhrase = iid
End Function
Public Function IID_ISpPhraseAlt() As UUID
'{8FCEBC98-4E49-4067-9C6C-D86A0E092E3D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8FCEBC98, CInt(&H4E49), CInt(&H4067), &H9C, &H6C, &HD8, &H6A, &H0E, &H09, &H2E, &H3D)
IID_ISpPhraseAlt = iid
End Function
Public Function IID_ISpPhrase2() As UUID
'{F264DA52-E457-4696-B856-A737B717AF79}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF264DA52, CInt(&HE457), CInt(&H4696), &HB8, &H56, &HA7, &H37, &HB7, &H17, &HAF, &H79)
IID_ISpPhrase2 = iid
End Function
Public Function IID_ISpRecoResult() As UUID
'{20B053BE-E235-43cd-9A2A-8D17A48B7842}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H20B053BE, CInt(&HE235), CInt(&H43cd), &H9A, &H2A, &H8D, &H17, &HA4, &H8B, &H78, &H42)
IID_ISpRecoResult = iid
End Function
Public Function IID_ISpRecoResult2() As UUID
'{27CAC6C4-88F2-41f2-8817-0C95E59F1E6E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H27CAC6C4, CInt(&H88F2), CInt(&H41f2), &H88, &H17, &H0C, &H95, &HE5, &H9F, &H1E, &H6E)
IID_ISpRecoResult2 = iid
End Function
Public Function IID_ISpXMLRecoResult() As UUID
'{AE39362B-45A8-4074-9B9E-CCF49AA2D0B6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HAE39362B, CInt(&H45A8), CInt(&H4074), &H9B, &H9E, &HCC, &HF4, &H9A, &HA2, &HD0, &HB6)
IID_ISpXMLRecoResult = iid
End Function
Public Function IID_ISpGrammarBuilder() As UUID
'{8137828F-591A-4A42-BE58-49EA7EBAAC68}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8137828F, CInt(&H591A), CInt(&H4A42), &HBE, &H58, &H49, &HEA, &H7E, &HBA, &HAC, &H68)
IID_ISpGrammarBuilder = iid
End Function
Public Function IID_ISpRecoGrammar() As UUID
'{2177DB29-7F45-47D0-8554-067E91C80502}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2177DB29, CInt(&H7F45), CInt(&H47D0), &H85, &H54, &H06, &H7E, &H91, &HC8, &H05, &H02)
IID_ISpRecoGrammar = iid
End Function
Public Function IID_ISpGrammarBuilder2() As UUID
'{8AB10026-20CC-4b20-8C22-A49C9BA78F60}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8AB10026, CInt(&H20CC), CInt(&H4b20), &H8C, &H22, &HA4, &H9C, &H9B, &HA7, &H8F, &H60)
IID_ISpGrammarBuilder2 = iid
End Function
Public Function IID_ISpRecoGrammar2() As UUID
'{4B37BC9E-9ED6-44a3-93D3-18F022B79EC3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4B37BC9E, CInt(&H9ED6), CInt(&H44a3), &H93, &HD3, &H18, &HF0, &H22, &HB7, &H9E, &HC3)
IID_ISpRecoGrammar2 = iid
End Function
Public Function IID_ISpeechResourceLoader() As UUID
'{B9AC5783-FCD0-4b21-B119-B4F8DA8FD2C3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB9AC5783, CInt(&HFCD0), CInt(&H4b21), &HB1, &H19, &HB4, &HF8, &HDA, &H8F, &HD2, &HC3)
IID_ISpeechResourceLoader = iid
End Function
Public Function IID_ISpRecoContext() As UUID
'{F740A62F-7C15-489E-8234-940A33D9272D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF740A62F, CInt(&H7C15), CInt(&H489E), &H82, &H34, &H94, &H0A, &H33, &HD9, &H27, &H2D)
IID_ISpRecoContext = iid
End Function
Public Function IID_ISpRecoContext2() As UUID
'{BEAD311C-52FF-437f-9464-6B21054CA73D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBEAD311C, CInt(&H52FF), CInt(&H437f), &H94, &H64, &H6B, &H21, &H05, &H4C, &HA7, &H3D)
IID_ISpRecoContext2 = iid
End Function
Public Function IID_ISpProperties() As UUID
'{5B4FB971-B115-4DE1-AD97-E482E3BF6EE4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5B4FB971, CInt(&HB115), CInt(&H4DE1), &HAD, &H97, &HE4, &H82, &HE3, &HBF, &H6E, &HE4)
IID_ISpProperties = iid
End Function
Public Function IID_ISpRecognizer() As UUID
'{C2B5F241-DAA0-4507-9E16-5A1EAA2B7A5C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC2B5F241, CInt(&HDAA0), CInt(&H4507), &H9E, &H16, &H5A, &H1E, &HAA, &H2B, &H7A, &H5C)
IID_ISpRecognizer = iid
End Function
Public Function IID_ISpSerializeState() As UUID
'{21B501A0-0EC7-46c9-92C3-A2BC784C54B9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H21B501A0, CInt(&H0EC7), CInt(&H46c9), &H92, &HC3, &HA2, &HBC, &H78, &H4C, &H54, &HB9)
IID_ISpSerializeState = iid
End Function
Public Function IID_ISpRecognizer2() As UUID
'{8FC6D974-C81E-4098-93C5-0147F61ED4D3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8FC6D974, CInt(&HC81E), CInt(&H4098), &H93, &HC5, &H01, &H47, &HF6, &H1E, &HD4, &HD3)
IID_ISpRecognizer2 = iid
End Function
Public Function IID_ISpRecoCategory() As UUID
'{DA0CD0F9-14A2-4f09-8C2A-85CC48979345}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDA0CD0F9, CInt(&H14A2), CInt(&H4f09), &H8C, &H2A, &H85, &HCC, &H48, &H97, &H93, &H45)
IID_ISpRecoCategory = iid
End Function
Public Function IID_ISpRecognizer3() As UUID
'{DF1B943C-5838-4AA2-8706-D7CD5B333499}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDF1B943C, CInt(&H5838), CInt(&H4AA2), &H87, &H06, &HD7, &HCD, &H5B, &H33, &H34, &H99)
IID_ISpRecognizer3 = iid
End Function
Public Function IID_ISpEnginePronunciation() As UUID
'{C360CE4B-76D1-4214-AD68-52657D5083DA}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC360CE4B, CInt(&H76D1), CInt(&H4214), &HAD, &H68, &H52, &H65, &H7D, &H50, &H83, &HDA)
IID_ISpEnginePronunciation = iid
End Function
Public Function IID_ISpDisplayAlternates() As UUID
'{C8D7C7E2-0DDE-44b7-AFE3-B0C991FBEB5E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC8D7C7E2, CInt(&H0DDE), CInt(&H44b7), &HAF, &HE3, &HB0, &HC9, &H91, &HFB, &HEB, &H5E)
IID_ISpDisplayAlternates = iid
End Function
























    Public Enum SpeechDataKeyLocation
        SDKLDefaultLocation = 0
        SDKLCurrentUser = 1
        SDKLLocalMachine = 2
        SDKLCurrentConfig = 5
    End Enum


    Public Enum SpeechTokenContext
        STCInprocServer = 1
        STCInprocHandler = 2
        STCLocalServer = 4
        STCRemoteServer = 16
        STCAll = 23
    End Enum

    Public Enum SpeechTokenShellFolder
        STSF_AppData = 26
        STSF_LocalAppData = 28
        STSF_CommonAppData = 35
        STSF_FlagCreate = 32768
    End Enum

    Public Enum SpeechAudioState
        SASClosed = 0
        SASStop = 1
        SASPause = 2
        SASRun = 3
    End Enum


    Public Enum SpeechAudioFormatType
        SAFTDefault = -1
        SAFTNoAssignedFormat = 0
        SAFTText = 1
        SAFTNonStandardFormat = 2
        SAFTExtendedAudioFormat = 3
        SAFT8kHz8BitMono = 4
        SAFT8kHz8BitStereo = 5
        SAFT8kHz16BitMono = 6
        SAFT8kHz16BitStereo = 7
        SAFT11kHz8BitMono = 8
        SAFT11kHz8BitStereo = 9
        SAFT11kHz16BitMono = 10
        SAFT11kHz16BitStereo = 11
        SAFT12kHz8BitMono = 12
        SAFT12kHz8BitStereo = 13
        SAFT12kHz16BitMono = 14
        SAFT12kHz16BitStereo = 15
        SAFT16kHz8BitMono = 16
        SAFT16kHz8BitStereo = 17
        SAFT16kHz16BitMono = 18
        SAFT16kHz16BitStereo = 19
        SAFT22kHz8BitMono = 20
        SAFT22kHz8BitStereo = 21
        SAFT22kHz16BitMono = 22
        SAFT22kHz16BitStereo = 23
        SAFT24kHz8BitMono = 24
        SAFT24kHz8BitStereo = 25
        SAFT24kHz16BitMono = 26
        SAFT24kHz16BitStereo = 27
        SAFT32kHz8BitMono = 28
        SAFT32kHz8BitStereo = 29
        SAFT32kHz16BitMono = 30
        SAFT32kHz16BitStereo = 31
        SAFT44kHz8BitMono = 32
        SAFT44kHz8BitStereo = 33
        SAFT44kHz16BitMono = 34
        SAFT44kHz16BitStereo = 35
        SAFT48kHz8BitMono = 36
        SAFT48kHz8BitStereo = 37
        SAFT48kHz16BitMono = 38
        SAFT48kHz16BitStereo = 39
        SAFTTrueSpeech_8kHz1BitMono = 40
        SAFTCCITT_ALaw_8kHzMono = 41
        SAFTCCITT_ALaw_8kHzStereo = 42
        SAFTCCITT_ALaw_11kHzMono = 43
        SAFTCCITT_ALaw_11kHzStereo = 44
        SAFTCCITT_ALaw_22kHzMono = 45
        SAFTCCITT_ALaw_22kHzStereo = 46
        SAFTCCITT_ALaw_44kHzMono = 47
        SAFTCCITT_ALaw_44kHzStereo = 48
        SAFTCCITT_uLaw_8kHzMono = 49
        SAFTCCITT_uLaw_8kHzStereo = 50
        SAFTCCITT_uLaw_11kHzMono = 51
        SAFTCCITT_uLaw_11kHzStereo = 52
        SAFTCCITT_uLaw_22kHzMono = 53
        SAFTCCITT_uLaw_22kHzStereo = 54
        SAFTCCITT_uLaw_44kHzMono = 55
        SAFTCCITT_uLaw_44kHzStereo = 56
        SAFTADPCM_8kHzMono = 57
        SAFTADPCM_8kHzStereo = 58
        SAFTADPCM_11kHzMono = 59
        SAFTADPCM_11kHzStereo = 60
        SAFTADPCM_22kHzMono = 61
        SAFTADPCM_22kHzStereo = 62
        SAFTADPCM_44kHzMono = 63
        SAFTADPCM_44kHzStereo = 64
        SAFTGSM610_8kHzMono = 65
        SAFTGSM610_11kHzMono = 66
        SAFTGSM610_22kHzMono = 67
        SAFTGSM610_44kHzMono = 68
    End Enum


    Public Enum SpeechStreamSeekPositionType
        SSSPTRelativeToStart = 0
        SSSPTRelativeToCurrentPosition = 1
        SSSPTRelativeToEnd = 2
    End Enum

    Public Enum SpeechStreamFileMode
        SSFMOpenForRead = 0
        SSFMOpenReadWrite = 1
        SSFMCreate = 2
        SSFMCreateForWrite = 3
    End Enum


    Public Enum SpeechRunState
        SRSEDone = 1
        SRSEIsSpeaking = 2
    End Enum

    Public Enum SpeechVoiceEvents
        SVEStartInputStream = 2
        SVEEndInputStream = 4
        SVEVoiceChange = 8
        SVEBookmark = 16
        SVEWordBoundary = 32
        SVEPhoneme = 64
        SVESentenceBoundary = 128
        SVEViseme = 256
        SVEAudioLevel = 512
        SVEPrivate = 32768
        SVEAllEvents = 33790
    End Enum

    Public Enum SpeechVoicePriority
        SVPNormal = 0
        SVPAlert = 1
        SVPOver = 2
    End Enum

    Public Enum SpeechVoiceSpeakFlags
        SVSFDefault = 0
        SVSFlagsAsync = 1
        SVSFPurgeBeforeSpeak = 2
        SVSFIsFilename = 4
        SVSFIsXML = 8
        SVSFIsNotXML = 16
        SVSFPersistXML = 32
        SVSFNLPSpeakPunc = 64
        SVSFParseSapi = 128
        SVSFParseSsml = 256
        SVSFParseAutodetect = 0
        SVSFNLPMask = 64
        SVSFParseMask = 384
        SVSFVoiceMask = 511
        SVSFUnusedFlags = -512
    End Enum


    Public Enum SpeechVisemeFeature
        SVF_None = 0
        SVF_Stressed = 1
        SVF_Emphasis = 2
    End Enum

    Public Enum SpeechVisemeType
        SVP_0 = 0
        SVP_1 = 1
        SVP_2 = 2
        SVP_3 = 3
        SVP_4 = 4
        SVP_5 = 5
        SVP_6 = 6
        SVP_7 = 7
        SVP_8 = 8
        SVP_9 = 9
        SVP_10 = 10
        SVP_11 = 11
        SVP_12 = 12
        SVP_13 = 13
        SVP_14 = 14
        SVP_15 = 15
        SVP_16 = 16
        SVP_17 = 17
        SVP_18 = 18
        SVP_19 = 19
        SVP_20 = 20
        SVP_21 = 21
    End Enum


    Public Enum SpeechRecognizerState
        SRSInactive = 0
        SRSActive = 1
        SRSActiveAlways = 2
        SRSInactiveWithPurge = 3
    End Enum


    Public Enum SpeechInterference
        SINone = 0
        SINoise = 1
        SINoSignal = 2
        SITooLoud = 3
        SITooQuiet = 4
        SITooFast = 5
        SITooSlow = 6
    End Enum


Public Enum SpeechRecoEvents
    SREStreamEnd = &H00000001&
    SRESoundStart = &H00000002&
    SRESoundEnd = &H00000004&
    SREPhraseStart = &H00000008&
    SRERecognition = &H00000010&
    SREHypothesis = &H00000020&
    SREBookmark = &H00000040&
    SREPropertyNumChange = &H00000080&
    SREPropertyStringChange = &H00000100&
    SREFalseRecognition = &H00000200&
    SREInterference = &H00000400&
    SRERequestUI = &H00000800&
    SREStateChange = &H00001000&
    SREAdaptation = &H00002000&
    SREStreamStart = &H00004000&
    SRERecoOtherContext = &H00008000&
    SREAudioLevel = &H00010000&
    SREPrivate = &H00040000&
    SREAllEvents = &H0005FFFF&
End Enum



    Public Enum SpeechGrammarRuleStateTransitionType
        SGRSTTEpsilon = 0
        SGRSTTWord = 1
        SGRSTTRule = 2
        SGRSTTDictation = 3
        SGRSTTWildcard = 4
        SGRSTTTextBuffer = 5
    End Enum

    Public Enum SpeechGrammarWordType
        SGDisplay = 0
        SGLexical = 1
        SGPronounciation = 2
        SGLexicalNoSpecialChars = 3
    End Enum


    Public Enum SpeechRuleAttributes
        SRATopLevel = 1
        SRADefaultToActive = 2
        SRAExport = 4
        SRAImport = 8
        SRAInterpreter = 16
        SRADynamic = 32
        SRARoot = 64
    End Enum

    Public Enum SpeechSpecialTransitionType
        SSTTWildcard = 1
        SSTTDictation = 2
        SSTTTextBuffer = 3
    End Enum

    Public Enum SpeechLoadOption
        SLOStatic = 0
        SLODynamic = 1
    End Enum


    Public Enum SpeechGrammarState
        SGSEnabled = 1
        SGSDisabled = 0
        SGSExclusive = 3
    End Enum

    Public Enum SpeechRuleState
        SGDSInactive = 0
        SGDSActive = 1
        SGDSActiveWithAutoPause = 3
        SGDSActiveUserDelimited = 4
    End Enum

    Public Enum SpeechRecoContextState
        SRCS_Disabled = 0
        SRCS_Enabled = 1
    End Enum

    Public Enum SpeechRetainedAudioOptions
        SRAONone = 0
        SRAORetainAudio = 1
    End Enum

    Public Enum SpeechWordPronounceable
        SWPUnknownWordUnpronounceable = 0
        SWPUnknownWordPronounceable = 1
        SWPKnownWordPronounceable = 2
    End Enum

    Public Enum SpeechEngineConfidence
        SECLowConfidence = -1
        SECNormalConfidence = 0
        SECHighConfidence = 1
    End Enum


    Public Enum SpeechDisplayAttributes
        SDA_No_Trailing_Space = 0
        SDA_One_Trailing_Space = 2
        SDA_Two_Trailing_Spaces = 4
        SDA_Consume_Leading_Spaces = 8
    End Enum

    Public Enum SpeechDiscardType
        SDTProperty = 1
        SDTReplacement = 2
        SDTRule = 4
        SDTDisplayText = 8
        SDTLexicalForm = 16
        SDTPronunciation = 32
        SDTAudio = 64
        SDTAlternates = 128
        SDTAll = 255
    End Enum

    Public Enum SpeechBookmarkOptions
        SBONone = 0
        SBOPause = 1
    End Enum

    Public Enum SpeechFormatType
        SFTInput = 0
        SFTSREngine = 1
    End Enum

    Public Enum SpeechRecognitionType
        SRTStandard = 0
        SRTAutopause = 1
        SRTEmulated = 2
        SRTSMLTimeout = 4
        SRTExtendableParse = 8
        SRTReSent = 16
    End Enum

    Public Enum SpeechLexiconType
        SLTUser = 1
        SLTApp = 2
    End Enum

    Public Enum SpeechWordType
        SWTAdded = 1
        SWTDeleted = 2
    End Enum

    Public Enum SpeechPartOfSpeech
        SPSNotOverriden = -1
        SPSUnknown = 0
        SPSNoun = 4096
        SPSVerb = 8192
        SPSModifier = 12288
        SPSFunction = 16384
        SPSInterjection = 20480
        SPSLMA = 28672
        SPSSuppressWord = 61440
    End Enum


    Public Enum DISPID_SpeechDataKey
        DISPID_SDKSetBinaryValue = 1
        DISPID_SDKGetBinaryValue = 2
        DISPID_SDKSetStringValue = 3
        DISPID_SDKGetStringValue = 4
        DISPID_SDKSetLongValue = 5
        DISPID_SDKGetlongValue = 6
        DISPID_SDKOpenKey = 7
        DISPID_SDKCreateKey = 8
        DISPID_SDKDeleteKey = 9
        DISPID_SDKDeleteValue = 10
        DISPID_SDKEnumKeys = 11
        DISPID_SDKEnumValues = 12
    End Enum

    Public Enum DISPID_SpeechObjectToken
        DISPID_SOTId = 1
        DISPID_SOTDataKey = 2
        DISPID_SOTCategory = 3
        DISPID_SOTGetDescription = 4
        DISPID_SOTSetId = 5
        DISPID_SOTGetAttribute = 6
        DISPID_SOTCreateInstance = 7
        DISPID_SOTRemove = 8
        DISPID_SOTGetStorageFileName = 9
        DISPID_SOTRemoveStorageFileName = 10
        DISPID_SOTIsUISupported = 11
        DISPID_SOTDisplayUI = 12
        DISPID_SOTMatchesAttributes = 13
    End Enum

    Public Enum DISPID_SpeechObjectTokens
        DISPID_SOTsCount = 1
        DISPID_SOTsItem = 0
        DISPID_SOTs_NewEnum = -4
    End Enum

    Public Enum DISPID_SpeechObjectTokenCategory
        DISPID_SOTCId = 1
        DISPID_SOTCDefault = 2
        DISPID_SOTCSetId = 3
        DISPID_SOTCGetDataKey = 4
        DISPID_SOTCEnumerateTokens = 5
    End Enum

    Public Enum DISPID_SpeechAudioFormat
        DISPID_SAFType = 1
        DISPID_SAFGuid = 2
        DISPID_SAFGetWaveFormatEx = 3
        DISPID_SAFSetWaveFormatEx = 4
    End Enum

    Public Enum DISPID_SpeechBaseStream
        DISPID_SBSFormat = 1
        DISPID_SBSRead = 2
        DISPID_SBSWrite = 3
        DISPID_SBSSeek = 4
    End Enum

    Public Enum DISPID_SpeechAudio
        DISPID_SAStatus = 200
        DISPID_SABufferInfo = 201
        DISPID_SADefaultFormat = 202
        DISPID_SAVolume = 203
        DISPID_SABufferNotifySize = 204
        DISPID_SAEventHandle = 205
        DISPID_SASetState = 206
    End Enum

    Public Enum DISPID_SpeechMMSysAudio
        DISPID_SMSADeviceId = 300
        DISPID_SMSALineId = 301
        DISPID_SMSAMMHandle = 302
    End Enum

    Public Enum DISPID_SpeechFileStream
        DISPID_SFSOpen = 100
        DISPID_SFSClose = 101
    End Enum

    Public Enum DISPID_SpeechCustomStream
        DISPID_SCSBaseStream = 100
    End Enum

    Public Enum DISPID_SpeechMemoryStream
        DISPID_SMSSetData = 100
        DISPID_SMSGetData = 101
    End Enum

    Public Enum DISPID_SpeechAudioStatus
        DISPID_SASFreeBufferSpace = 1
        DISPID_SASNonBlockingIO = 2
        DISPID_SASState = 3
        DISPID_SASCurrentSeekPosition = 4
        DISPID_SASCurrentDevicePosition = 5
    End Enum

    Public Enum DISPID_SpeechAudioBufferInfo
        DISPID_SABIMinNotification = 1
        DISPID_SABIBufferSize = 2
        DISPID_SABIEventBias = 3
    End Enum

    Public Enum DISPID_SpeechWaveFormatEx
        DISPID_SWFEFormatTag = 1
        DISPID_SWFEChannels = 2
        DISPID_SWFESamplesPerSec = 3
        DISPID_SWFEAvgBytesPerSec = 4
        DISPID_SWFEBlockAlign = 5
        DISPID_SWFEBitsPerSample = 6
        DISPID_SWFEExtraData = 7
    End Enum

    Public Enum DISPID_SpeechVoice
        DISPID_SVStatus = 1
        DISPID_SVVoice = 2
        DISPID_SVAudioOutput = 3
        DISPID_SVAudioOutputStream = 4
        DISPID_SVRate = 5
        DISPID_SVVolume = 6
        DISPID_SVAllowAudioOuputFormatChangesOnNextSet = 7
        DISPID_SVEventInterests = 8
        DISPID_SVPriority = 9
        DISPID_SVAlertBoundary = 10
        DISPID_SVSyncronousSpeakTimeout = 11
        DISPID_SVSpeak = 12
        DISPID_SVSpeakStream = 13
        DISPID_SVPause = 14
        DISPID_SVResume = 15
        DISPID_SVSkip = 16
        DISPID_SVGetVoices = 17
        DISPID_SVGetAudioOutputs = 18
        DISPID_SVWaitUntilDone = 19
        DISPID_SVSpeakCompleteEvent = 20
        DISPID_SVIsUISupported = 21
        DISPID_SVDisplayUI = 22
    End Enum

    Public Enum DISPID_SpeechVoiceStatus
        DISPID_SVSCurrentStreamNumber = 1
        DISPID_SVSLastStreamNumberQueued = 2
        DISPID_SVSLastResult = 3
        DISPID_SVSRunningState = 4
        DISPID_SVSInputWordPosition = 5
        DISPID_SVSInputWordLength = 6
        DISPID_SVSInputSentencePosition = 7
        DISPID_SVSInputSentenceLength = 8
        DISPID_SVSLastBookmark = 9
        DISPID_SVSLastBookmarkId = 10
        DISPID_SVSPhonemeId = 11
        DISPID_SVSVisemeId = 12
    End Enum

    Public Enum DISPID_SpeechVoiceEvent
        DISPID_SVEStreamStart = 1
        DISPID_SVEStreamEnd = 2
        DISPID_SVEVoiceChange = 3
        DISPID_SVEBookmark = 4
        DISPID_SVEWord = 5
        DISPID_SVEPhoneme = 6
        DISPID_SVESentenceBoundary = 7
        DISPID_SVEViseme = 8
        DISPID_SVEAudioLevel = 9
        DISPID_SVEEnginePrivate = 10
    End Enum

    Public Enum DISPID_SpeechRecognizer
        DISPID_SRRecognizer = 1
        DISPID_SRAllowAudioInputFormatChangesOnNextSet = 2
        DISPID_SRAudioInput = 3
        DISPID_SRAudioInputStream = 4
        DISPID_SRIsShared = 5
        DISPID_SRState = 6
        DISPID_SRStatus = 7
        DISPID_SRProfile = 8
        DISPID_SREmulateRecognition = 9
        DISPID_SRCreateRecoContext = 10
        DISPID_SRGetFormat = 11
        DISPID_SRSetPropertyNumber = 12
        DISPID_SRGetPropertyNumber = 13
        DISPID_SRSetPropertyString = 14
        DISPID_SRGetPropertyString = 15
        DISPID_SRIsUISupported = 16
        DISPID_SRDisplayUI = 17
        DISPID_SRGetRecognizers = 18
        DISPID_SVGetAudioInputs = 19
        DISPID_SVGetProfiles = 20
    End Enum

    Public Enum SpeechEmulationCompareFlags
        SECFIgnoreCase = 1
        SECFIgnoreKanaType = 65536
        SECFIgnoreWidth = 131072
        SECFNoSpecialChars = 536870912
        SECFEmulateResult = 1073741824
        SECFDefault = 196609
    End Enum

    Public Enum DISPID_SpeechRecognizerStatus
        DISPID_SRSAudioStatus = 1
        DISPID_SRSCurrentStreamPosition = 2
        DISPID_SRSCurrentStreamNumber = 3
        DISPID_SRSNumberOfActiveRules = 4
        DISPID_SRSClsidEngine = 5
        DISPID_SRSSupportedLanguages = 6
    End Enum

    Public Enum DISPID_SpeechRecoContext
        DISPID_SRCRecognizer = 1
        DISPID_SRCAudioInInterferenceStatus = 2
        DISPID_SRCRequestedUIType = 3
        DISPID_SRCVoice = 4
        DISPID_SRAllowVoiceFormatMatchingOnNextSet = 5
        DISPID_SRCVoicePurgeEvent = 6
        DISPID_SRCEventInterests = 7
        DISPID_SRCCmdMaxAlternates = 8
        DISPID_SRCState = 9
        DISPID_SRCRetainedAudio = 10
        DISPID_SRCRetainedAudioFormat = 11
        DISPID_SRCPause = 12
        DISPID_SRCResume = 13
        DISPID_SRCCreateGrammar = 14
        DISPID_SRCCreateResultFromMemory = 15
        DISPID_SRCBookmark = 16
        DISPID_SRCSetAdaptationData = 17
    End Enum

    Public Enum DISPIDSPRG
        DISPID_SRGId = 1
        DISPID_SRGRecoContext = 2
        DISPID_SRGState = 3
        DISPID_SRGRules = 4
        DISPID_SRGReset = 5
        DISPID_SRGCommit = 6
        DISPID_SRGCmdLoadFromFile = 7
        DISPID_SRGCmdLoadFromObject = 8
        DISPID_SRGCmdLoadFromResource = 9
        DISPID_SRGCmdLoadFromMemory = 10
        DISPID_SRGCmdLoadFromProprietaryGrammar = 11
        DISPID_SRGCmdSetRuleState = 12
        DISPID_SRGCmdSetRuleIdState = 13
        DISPID_SRGDictationLoad = 14
        DISPID_SRGDictationUnload = 15
        DISPID_SRGDictationSetState = 16
        DISPID_SRGSetWordSequenceData = 17
        DISPID_SRGSetTextSelection = 18
        DISPID_SRGIsPronounceable = 19
    End Enum

    Public Enum DISPID_SpeechRecoContextEvents
        DISPID_SRCEStartStream = 1
        DISPID_SRCEEndStream = 2
        DISPID_SRCEBookmark = 3
        DISPID_SRCESoundStart = 4
        DISPID_SRCESoundEnd = 5
        DISPID_SRCEPhraseStart = 6
        DISPID_SRCERecognition = 7
        DISPID_SRCEHypothesis = 8
        DISPID_SRCEPropertyNumberChange = 9
        DISPID_SRCEPropertyStringChange = 10
        DISPID_SRCEFalseRecognition = 11
        DISPID_SRCEInterference = 12
        DISPID_SRCERequestUI = 13
        DISPID_SRCERecognizerStateChange = 14
        DISPID_SRCEAdaptation = 15
        DISPID_SRCERecognitionForOtherContext = 16
        DISPID_SRCEAudioLevel = 17
        DISPID_SRCEEnginePrivate = 18
    End Enum

    Public Enum DISPID_SpeechGrammarRule
        DISPID_SGRAttributes = 1
        DISPID_SGRInitialState = 2
        DISPID_SGRName = 3
        DISPID_SGRId = 4
        DISPID_SGRClear = 5
        DISPID_SGRAddResource = 6
        DISPID_SGRAddState = 7
    End Enum

    Public Enum DISPID_SpeechGrammarRules
        DISPID_SGRsCount = 1
        DISPID_SGRsDynamic = 2
        DISPID_SGRsAdd = 3
        DISPID_SGRsCommit = 4
        DISPID_SGRsCommitAndSave = 5
        DISPID_SGRsFindRule = 6
        DISPID_SGRsItem = 0
        DISPID_SGRs_NewEnum = -4
    End Enum

    Public Enum DISPID_SpeechGrammarRuleState
        DISPID_SGRSRule = 1
        DISPID_SGRSTransitions = 2
        DISPID_SGRSAddWordTransition = 3
        DISPID_SGRSAddRuleTransition = 4
        DISPID_SGRSAddSpecialTransition = 5
    End Enum

    Public Enum DISPID_SpeechGrammarRuleStateTransitions
        DISPID_SGRSTsCount = 1
        DISPID_SGRSTsItem = 0
        DISPID_SGRSTs_NewEnum = -4
    End Enum

    Public Enum DISPID_SpeechGrammarRuleStateTransition
        DISPID_SGRSTType = 1
        DISPID_SGRSTText = 2
        DISPID_SGRSTRule = 3
        DISPID_SGRSTWeight = 4
        DISPID_SGRSTPropertyName = 5
        DISPID_SGRSTPropertyId = 6
        DISPID_SGRSTPropertyValue = 7
        DISPID_SGRSTNextState = 8
    End Enum

    Public Enum DISPIDSPTSI
        DISPIDSPTSI_ActiveOffset = 1
        DISPIDSPTSI_ActiveLength = 2
        DISPIDSPTSI_SelectionOffset = 3
        DISPIDSPTSI_SelectionLength = 4
    End Enum

    Public Enum DISPID_SpeechRecoResult
        DISPID_SRRRecoContext = 1
        DISPID_SRRTimes = 2
        DISPID_SRRAudioFormat = 3
        DISPID_SRRPhraseInfo = 4
        DISPID_SRRAlternates = 5
        DISPID_SRRAudio = 6
        DISPID_SRRSpeakAudio = 7
        DISPID_SRRSaveToMemory = 8
        DISPID_SRRDiscardResultInfo = 9
    End Enum

    Public Enum DISPID_SpeechXMLRecoResult
        DISPID_SRRGetXMLResult = 10
        DISPID_SRRGetXMLErrorInfo = 11
    End Enum

    Public Enum SPXMLRESULTOPTIONS
        SPXRO_SML = 0
        SPXRO_Alternates_SML = 1
    End Enum

    Public Enum DISPID_SpeechRecoResult2
        DISPID_SRRSetTextFeedback = 12
    End Enum

    Public Enum DISPID_SpeechPhraseBuilder
        DISPID_SPPBRestorePhraseFromMemory = 1
    End Enum

    Public Enum DISPID_SpeechRecoResultTimes
        DISPID_SRRTStreamTime = 1
        DISPID_SRRTLength = 2
        DISPID_SRRTTickCount = 3
        DISPID_SRRTOffsetFromStart = 4
    End Enum

    Public Enum DISPID_SpeechPhraseAlternate
        DISPID_SPARecoResult = 1
        DISPID_SPAStartElementInResult = 2
        DISPID_SPANumberOfElementsInResult = 3
        DISPID_SPAPhraseInfo = 4
        DISPID_SPACommit = 5
    End Enum

    Public Enum DISPID_SpeechPhraseAlternates
        DISPID_SPAsCount = 1
        DISPID_SPAsItem = 0
        DISPID_SPAs_NewEnum = -4
    End Enum

    Public Enum DISPID_SpeechPhraseInfo
        DISPID_SPILanguageId = 1
        DISPID_SPIGrammarId = 2
        DISPID_SPIStartTime = 3
        DISPID_SPIAudioStreamPosition = 4
        DISPID_SPIAudioSizeBytes = 5
        DISPID_SPIRetainedSizeBytes = 6
        DISPID_SPIAudioSizeTime = 7
        DISPID_SPIRule = 8
        DISPID_SPIProperties = 9
        DISPID_SPIElements = 10
        DISPID_SPIReplacements = 11
        DISPID_SPIEngineId = 12
        DISPID_SPIEnginePrivateData = 13
        DISPID_SPISaveToMemory = 14
        DISPID_SPIGetText = 15
        DISPID_SPIGetDisplayAttributes = 16
    End Enum

    Public Enum DISPID_SpeechPhraseElement
        DISPID_SPEAudioTimeOffset = 1
        DISPID_SPEAudioSizeTime = 2
        DISPID_SPEAudioStreamOffset = 3
        DISPID_SPEAudioSizeBytes = 4
        DISPID_SPERetainedStreamOffset = 5
        DISPID_SPERetainedSizeBytes = 6
        DISPID_SPEDisplayText = 7
        DISPID_SPELexicalForm = 8
        DISPID_SPEPronunciation = 9
        DISPID_SPEDisplayAttributes = 10
        DISPID_SPERequiredConfidence = 11
        DISPID_SPEActualConfidence = 12
        DISPID_SPEEngineConfidence = 13
    End Enum

    Public Enum DISPID_SpeechPhraseElements
        DISPID_SPEsCount = 1
        DISPID_SPEsItem = 0
        DISPID_SPEs_NewEnum = -4
    End Enum

    Public Enum DISPID_SpeechPhraseReplacement
        DISPID_SPRDisplayAttributes = 1
        DISPID_SPRText = 2
        DISPID_SPRFirstElement = 3
        DISPID_SPRNumberOfElements = 4
    End Enum

    Public Enum DISPID_SpeechPhraseReplacements
        DISPID_SPRsCount = 1
        DISPID_SPRsItem = 0
        DISPID_SPRs_NewEnum = -4
    End Enum

    Public Enum DISPID_SpeechPhraseProperty
        DISPID_SPPName = 1
        DISPID_SPPId = 2
        DISPID_SPPValue = 3
        DISPID_SPPFirstElement = 4
        DISPID_SPPNumberOfElements = 5
        DISPID_SPPEngineConfidence = 6
        DISPID_SPPConfidence = 7
        DISPID_SPPParent = 8
        DISPID_SPPChildren = 9
    End Enum

    Public Enum DISPID_SpeechPhraseProperties
        DISPID_SPPsCount = 1
        DISPID_SPPsItem = 0
        DISPID_SPPs_NewEnum = -4
    End Enum

    Public Enum DISPID_SpeechPhraseRule
        DISPID_SPRuleName = 1
        DISPID_SPRuleId = 2
        DISPID_SPRuleFirstElement = 3
        DISPID_SPRuleNumberOfElements = 4
        DISPID_SPRuleParent = 5
        DISPID_SPRuleChildren = 6
        DISPID_SPRuleConfidence = 7
        DISPID_SPRuleEngineConfidence = 8
    End Enum

    Public Enum DISPID_SpeechPhraseRules
        DISPID_SPRulesCount = 1
        DISPID_SPRulesItem = 0
        DISPID_SPRules_NewEnum = -4
    End Enum

    Public Enum DISPID_SpeechLexicon
        DISPID_SLGenerationId = 1
        DISPID_SLGetWords = 2
        DISPID_SLAddPronunciation = 3
        DISPID_SLAddPronunciationByPhoneIds = 4
        DISPID_SLRemovePronunciation = 5
        DISPID_SLRemovePronunciationByPhoneIds = 6
        DISPID_SLGetPronunciations = 7
        DISPID_SLGetGenerationChange = 8
    End Enum

    Public Enum DISPID_SpeechLexiconWords
        DISPID_SLWsCount = 1
        DISPID_SLWsItem = 0
        DISPID_SLWs_NewEnum = -4
    End Enum

    Public Enum DISPID_SpeechLexiconWord
        DISPID_SLWLangId = 1
        DISPID_SLWType = 2
        DISPID_SLWWord = 3
        DISPID_SLWPronunciations = 4
    End Enum

    Public Enum DISPID_SpeechLexiconProns
        DISPID_SLPsCount = 1
        DISPID_SLPsItem = 0
        DISPID_SLPs_NewEnum = -4
    End Enum

    Public Enum DISPID_SpeechLexiconPronunciation
        DISPID_SLPType = 1
        DISPID_SLPLangId = 2
        DISPID_SLPPartOfSpeech = 3
        DISPID_SLPPhoneIds = 4
        DISPID_SLPSymbolic = 5
    End Enum

    Public Enum DISPID_SpeechPhoneConverter
        DISPID_SPCLangId = 1
        DISPID_SPCPhoneToId = 2
        DISPID_SPCIdToPhone = 3
    End Enum

    Public Enum SPDATAKEYLOCATION
        SPDKL_DefaultLocation = 0
        SPDKL_CurrentUser = 1
        SPDKL_LocalMachine = 2
        SPDKL_CurrentConfig = 5
    End Enum

    Public Type SPEVENT
        eEventId As Integer
        elParamType As Integer
        ulStreamNum As Long
        ullAudioStreamOffset As LongLong
        wParam As LongPtr
        lParam As LongPtr
    End Type

    Public Type SPEVENTSOURCEINFO
        ullEventInterest As LongLong
        ullQueuedInterest As LongLong
        ulCount As Long
    End Type

    Public Enum SPAUDIOSTATE
        SPAS_CLOSED = 0
        SPAS_STOP = 1
        SPAS_PAUSE = 2
        SPAS_RUN = 3
    End Enum

    Public Type SPAUDIOSTATUS
        cbFreeBuffSpace As Long
        cbNonBlockingIO As Long
        State As SPAUDIOSTATE
        CurSeekPos As LongLong
        CurDevicePos As LongLong
        dwAudioLevel As Long
        dwReserved2 As Long
    End Type

    Public Type SPAUDIOBUFFERINFO
        ulMsMinNotification As Long
        ulMsBufferSize As Long
        ulMsEventBias As Long
    End Type

    Public Enum SPFILEMODE
        SPFM_OPEN_READONLY = 0
        SPFM_OPEN_READWRITE = 1
        SPFM_CREATE = 2
        SPFM_CREATE_ALWAYS = 3
        SPFM_NUM_MODES = 4
    End Enum

    Public Type SPVOICESTATUS
        ulCurrentStream As Long
        ulLastStreamQueued As Long
        hrLastResult As Long /* HRESULT */
        dwRunningState As Long
        ulInputWordPos As Long
        ulInputWordLen As Long
        ulInputSentPos As Long
        ulInputSentLen As Long
        lBookmarkId As Long
        PhonemeId As Integer
        VisemeId As SPVISEMES
        dwReserved1 As Long
        dwReserved2 As Long
    End Type

    Public Enum SPVISEMES
        SP_VISEME_0 = 0
        SP_VISEME_1 = 1
        SP_VISEME_2 = 2
        SP_VISEME_3 = 3
        SP_VISEME_4 = 4
        SP_VISEME_5 = 5
        SP_VISEME_6 = 6
        SP_VISEME_7 = 7
        SP_VISEME_8 = 8
        SP_VISEME_9 = 9
        SP_VISEME_10 = 10
        SP_VISEME_11 = 11
        SP_VISEME_12 = 12
        SP_VISEME_13 = 13
        SP_VISEME_14 = 14
        SP_VISEME_15 = 15
        SP_VISEME_16 = 16
        SP_VISEME_17 = 17
        SP_VISEME_18 = 18
        SP_VISEME_19 = 19
        SP_VISEME_20 = 20
        SP_VISEME_21 = 21
    End Enum

    Public Enum SPVPRIORITY
        SPVPRI_NORMAL = 0
        SPVPRI_ALERT = 1
        SPVPRI_OVER = 2
    End Enum

    Public Enum SPEVENTENUM
        SPEI_UNDEFINED = 0
        SPEI_START_INPUT_STREAM = 1
        SPEI_END_INPUT_STREAM = 2
        SPEI_VOICE_CHANGE = 3
        SPEI_TTS_BOOKMARK = 4
        SPEI_WORD_BOUNDARY = 5
        SPEI_PHONEME = 6
        SPEI_SENTENCE_BOUNDARY = 7
        SPEI_VISEME = 8
        SPEI_TTS_AUDIO_LEVEL = 9
        SPEI_TTS_PRIVATE = 15
        SPEI_MIN_TTS = 1
        SPEI_MAX_TTS = 15
        SPEI_END_SR_STREAM = 34
        SPEI_SOUND_START = 35
        SPEI_SOUND_END = 36
        SPEI_PHRASE_START = 37
        SPEI_RECOGNITION = 38
        SPEI_HYPOTHESIS = 39
        SPEI_SR_BOOKMARK = 40
        SPEI_PROPERTY_NUM_CHANGE = 41
        SPEI_PROPERTY_STRING_CHANGE = 42
        SPEI_FALSE_RECOGNITION = 43
        SPEI_INTERFERENCE = 44
        SPEI_REQUEST_UI = 45
        SPEI_RECO_STATE_CHANGE = 46
        SPEI_ADAPTATION = 47
        SPEI_START_SR_STREAM = 48
        SPEI_RECO_OTHER_CONTEXT = 49
        SPEI_SR_AUDIO_LEVEL = 50
        SPEI_SR_RETAINEDAUDIO = 51
        SPEI_SR_PRIVATE = 52
        SPEI_ACTIVE_CATEGORY_CHANGED = 53
        SPEI_RESERVED5 = 54
        SPEI_RESERVED6 = 55
        SPEI_MIN_SR = 34
        SPEI_MAX_SR = 55
        SPEI_RESERVED1 = 30
        SPEI_RESERVED2 = 33
        SPEI_RESERVED3 = 63
    End Enum

    Public Enum SPRECOSTATE
        SPRST_INACTIVE = 0
        SPRST_ACTIVE = 1
        SPRST_ACTIVE_ALWAYS = 2
        SPRST_INACTIVE_WITH_PURGE = 3
        SPRST_NUM_STATES = 4
    End Enum

    Public Type SPRECOGNIZERSTATUS
        AudioStatus As SPAUDIOSTATUS
        ullRecognitionStreamPos As LongLong
        ulStreamNumber As Long
        ulNumActive As Long
        ClsidEngine As UUID
        cLangIDs As Long
        aLangID(0 To 19) As Integer
        ullRecognitionStreamTime As LongLong
    End Type

    Public Enum SPWAVEFORMATTYPE
        SPWF_INPUT = 0
        SPWF_SRENGINE = 1
    End Enum

    Public Type SPPHRASE
        cbSize As Long
        LangId As Integer
        wHomophoneGroupId As Integer
        ullGrammarID As LongLong
        ftStartTime As LongLong
        ullAudioStreamPosition As LongLong
        ulAudioSizeBytes As Long
        ulRetainedSizeBytes As Long
        ulAudioSizeTime As Long
        Rule As SPPHRASERULE
        pProperties As LongPtr
        pElements As LongPtr
        cReplacements As Long
        pReplacements As LongPtr
        SREngineID As UUID
        ulSREnginePrivateDataSize As Long
        pSREnginePrivateData As LongPtr
        pSML As LongPtr
        pSemanticErrorInfo As LongPtr
        SemanticTagFormat As SPSEMANTICFORMAT
    End Type

    Public Type SPPHRASERULE
        pszName As LongPtr
        ulId As Long
        ulFirstElement As Long
        ulCountOfElements As Long
        pNextSibling As LongPtr
        pFirstChild As LongPtr
        SREngineConfidence As Single
        Confidence As Byte
    End Type

    Public Type SPPHRASEPROPERTY
        pszName As LongPtr
        IdOrTypeUnion As Long
        pszValue As LongPtr
        vValue As Variant
        ulFirstElement As Long
        ulCountOfElements As Long
        pNextSibling As LongPtr
        pFirstChild As LongPtr
        SREngineConfidence As Single
        Confidence As Byte
    End Type

    Public Type SPPHRASEELEMENT
        ulAudioTimeOffset As Long
        ulAudioSizeTime As Long
        ulAudioStreamOffset As Long
        ulAudioSizeBytes As Long
        ulRetainedStreamOffset As Long
        ulRetainedSizeBytes As Long
        pszDisplayText As LongPtr
        pszLexicalForm As LongPtr
        pszPronunciation As LongPtr
        bDisplayAttributes As Byte
        RequiredConfidence As Byte
        ActualConfidence As Byte
        reserved As Byte
        SREngineConfidence As Single
    End Type

    Public Type SPPHRASEREPLACEMENT
        bDisplayAttributes As Byte
        pszReplacementText As LongPtr
        ulFirstElement As Long
        ulCountOfElements As Long
    End Type

    Public Type SPSEMANTICERRORINFO
        ulLineNumber As Long
        pszScriptLine As LongPtr
        pszSource As LongPtr
        pszDescription As LongPtr
        hrResultCode As Long /* HRESULT */
    End Type

    Public Enum SPSEMANTICFORMAT
        SPSMF_SAPI_PROPERTIES = 0
        SPSMF_SRGS_SEMANTICINTERPRETATION_MS = 1
        SPSMF_SRGS_SAPIPROPERTIES = 2
        SPSMF_UPS = 4
        SPSMF_SRGS_SEMANTICINTERPRETATION_W3C = 8
    End Enum

    Public Type SPSERIALIZEDPHRASE
        ulSerializedSize As Long
    End Type

    
    Public Enum SPGRAMMARWORDTYPE
        SPWT_DISPLAY = 0
        SPWT_LEXICAL = 1
        SPWT_PRONUNCIATION = 2
        SPWT_LEXICAL_NO_SPECIAL_CHARS = 3
    End Enum

    Public Type SPPROPERTYINFO
        pszName As LongPtr
        ulId As Long
        pszValue As LongPtr
        vValue As Variant
    End Type

    Public Enum SPLOADOPTIONS
        SPLO_STATIC = 0
        SPLO_DYNAMIC = 1
    End Enum

    Public Type SPBINARYGRAMMAR
        ulTotalSerializedSize As Long
    End Type

    Public Enum SPRULESTATE
        SPRS_INACTIVE = 0
        SPRS_ACTIVE = 1
        SPRS_ACTIVE_WITH_AUTO_PAUSE = 3
        SPRS_ACTIVE_USER_DELIMITED = 4
    End Enum

    Public Type SPTEXTSELECTIONINFO
        ulStartActiveOffset As Long
        cchActiveChars As Long
        ulStartSelection As Long
        cchSelection As Long
    End Type

    Public Enum SPWORDPRONOUNCEABLE
        SPWP_UNKNOWN_WORD_UNPRONOUNCEABLE = 0
        SPWP_UNKNOWN_WORD_PRONOUNCEABLE = 1
        SPWP_KNOWN_WORD_PRONOUNCEABLE = 2
    End Enum

    Public Enum SPGRAMMARSTATE
        SPGS_DISABLED = 0
        SPGS_ENABLED = 1
        SPGS_EXCLUSIVE = 3
    End Enum

    Public Type SPRECOCONTEXTSTATUS
        eInterference As SPINTERFERENCE
        szRequestTypeOfUI(0 To 254) As Integer
        dwReserved1 As Long
        dwReserved2 As Long
    End Type

    Public Enum SPINTERFERENCE
        SPINTERFERENCE_NONE = 0
        SPINTERFERENCE_NOISE = 1
        SPINTERFERENCE_NOSIGNAL = 2
        SPINTERFERENCE_TOOLOUD = 3
        SPINTERFERENCE_TOOQUIET = 4
        SPINTERFERENCE_TOOFAST = 5
        SPINTERFERENCE_TOOSLOW = 6
        SPINTERFERENCE_LATENCY_WARNING = 7
        SPINTERFERENCE_LATENCY_TRUNCATE_BEGIN = 8
        SPINTERFERENCE_LATENCY_TRUNCATE_END = 9
    End Enum

    Public Enum SPAUDIOOPTIONS
        SPAO_NONE = 0
        SPAO_RETAIN_AUDIO = 1
    End Enum

    Public Type SPSERIALIZEDRESULT
        ulSerializedSize As Long
    End Type

    Public Type SPRECORESULTTIMES
        ftStreamTime As FILETIME
        ullLength As LongLong
        dwTickCount As Long
        ullStart As LongLong
    End Type

    Public Enum SPBOOKMARKOPTIONS
        SPBO_NONE = 0
        SPBO_PAUSE = 1
        SPBO_AHEAD = 2
        SPBO_TIME_UNITS = 4
    End Enum

    Public Enum SPCONTEXTSTATE
        SPCS_DISABLED = 0
        SPCS_ENABLED = 1
    End Enum

    Public Enum SPADAPTATIONRELEVANCE
        SPAR_Unknown = 0
        SPAR_Low = 1
        SPAR_Medium = 2
        SPAR_High = 3
    End Enum

    Public Enum SPCATEGORYTYPE
        SPCT_COMMAND = 0
        SPCT_DICTATION = 1
        SPCT_SLEEP = 2
        SPCT_SUB_COMMAND = 3
        SPCT_SUB_DICTATION = 4
    End Enum

    Public Type SPWORDPRONUNCIATIONLIST
        ulSize As Long
        pvBuffer As LongPtr
        pFirstWordPronunciation As LongPtr
    End Type

    Public Type SPWORDPRONUNCIATION
        pNextWordPronunciation As LongPtr
        eLexiconType As SPLEXICONTYPE
        LangId As Integer
        wPronunciationFlags As Integer
        ePartOfSpeech As SPPARTOFSPEECH
        szPronunciation(0 To 0) As Integer
    End Type

    Public Enum SPLEXICONTYPE
        eLEXTYPE_USER = 1
        eLEXTYPE_APP = 2
        eLEXTYPE_VENDORLEXICON = 4
        eLEXTYPE_LETTERTOSOUND = 8
        eLEXTYPE_MORPHOLOGY = 16
        eLEXTYPE_RESERVED4 = 32
        eLEXTYPE_USER_SHORTCUT = 64
        eLEXTYPE_RESERVED6 = 128
        eLEXTYPE_RESERVED7 = 256
        eLEXTYPE_RESERVED8 = 512
        eLEXTYPE_RESERVED9 = 1024
        eLEXTYPE_RESERVED10 = 2048
        eLEXTYPE_PRIVATE1 = 4096
        eLEXTYPE_PRIVATE2 = 8192
        eLEXTYPE_PRIVATE3 = 16384
        eLEXTYPE_PRIVATE4 = 32768
        eLEXTYPE_PRIVATE5 = 65536
        eLEXTYPE_PRIVATE6 = 131072
        eLEXTYPE_PRIVATE7 = 262144
        eLEXTYPE_PRIVATE8 = 524288
        eLEXTYPE_PRIVATE9 = 1048576
        eLEXTYPE_PRIVATE10 = 2097152
        eLEXTYPE_PRIVATE11 = 4194304
        eLEXTYPE_PRIVATE12 = 8388608
        eLEXTYPE_PRIVATE13 = 16777216
        eLEXTYPE_PRIVATE14 = 33554432
        eLEXTYPE_PRIVATE15 = 67108864
        eLEXTYPE_PRIVATE16 = 134217728
        eLEXTYPE_PRIVATE17 = 268435456
        eLEXTYPE_PRIVATE18 = 536870912
        eLEXTYPE_PRIVATE19 = 1073741824
        eLEXTYPE_PRIVATE20 = -2147483648
    End Enum

    Public Enum SPPARTOFSPEECH
        SPPS_NotOverriden = -1
        SPPS_Unknown = 0
        SPPS_Noun = 4096
        SPPS_Verb = 8192
        SPPS_Modifier = 12288
        SPPS_Function = 16384
        SPPS_Interjection = 20480
        SPPS_Noncontent = 24576
        SPPS_LMA = 28672
        SPPS_SuppressWord = 61440
    End Enum

    Public Type SPWORDLIST
        ulSize As Long
        pvBuffer As LongPtr
        pFirstWord As LongPtr
    End Type

    Public Type SPWORD
        pNextWord As LongPtr
        LangId As Integer
        wReserved As Integer
        eWordType As SPWORDTYPE
        pszWord As LongPtr
        pFirstWordPronunciation As LongPtr
    End Type

    Public Enum SPWORDTYPE
        eWORDTYPE_ADDED = 1
        eWORDTYPE_DELETED = 2
    End Enum


    Public Enum SPSHORTCUTTYPE
        SPSHT_NotOverriden = -1
        SPSHT_Unknown = 0
        SPSHT_EMAIL = 4096
        SPSHT_OTHER = 8192
        SPPS_RESERVED1 = 12288
        SPPS_RESERVED2 = 16384
        SPPS_RESERVED3 = 20480
        SPPS_RESERVED4 = 61440
    End Enum

    Public Type SPSHORTCUTPAIRLIST
        ulSize As Long
        pvBuffer As LongPtr
        pFirstShortcutPair As LongPtr
    End Type

    Public Type SPSHORTCUTPAIR
        pNextSHORTCUTPAIR As LongPtr
        LangId As Integer
        shType As SPSHORTCUTTYPE
        pszDisplay As LongPtr
        pszSpoken As LongPtr
    End Type


    Public Type SPRULE
        pszRuleName As LongPtr
        ulRuleId As Long
        dwAttributes As Long
    End Type
    
Public Enum SPEAKFLAGS
	'     //--- SpVoice flags
	    SPF_DEFAULT = 0',             // Synchronous, no purge, xml auto detect
	    SPF_ASYNC = (1 << 0)',     // Asynchronous call
	    SPF_PURGEBEFORESPEAK = (1 << 1)',     // Purge current data prior to speaking this
	    SPF_IS_FILENAME = (1 << 2)',     // The string passed to Speak() Is a file name
	    SPF_IS_XML = (1 << 3)',     // The input text will be parsed for XML markup
	    SPF_IS_NOT_XML = (1 << 4)',     // The input text will Not be parsed for XML markup
	    SPF_PERSIST_XML = (1 << 5)',     // Persists XML global state changes
	' 
	'     //--- Normalizer flags
	     SPF_NLP_SPEAK_PUNC = (1 << 6)',     // The normalization processor should speak the punctuation
	' 
	' //#if _SAPI_BUILD_VER >= 0x053
	'     //--- TTS Format
	    SPF_PARSE_SAPI = (1 << 7)',     // Force XML parsing As MS SAPI
	    SPF_PARSE_SSML = (1 << 8)',     // Force XML parsing As W3C SSML
	    SPF_PARSE_AUTODETECT = 0',             // No set flag in bits 7 Or 8 results in autodetection
	' //#endif // _SAPI_BUILD_VER >= 0x053
	' 
	'     //--- Masks
	    SPF_NLP_MASK = (SPF_NLP_SPEAK_PUNC)
	' //#if _SAPI_BUILD_VER >= 0x053
	    SPF_PARSE_MASK = (SPF_PARSE_SAPI Or SPF_PARSE_SSML)
	    SPF_VOICE_MASK = (SPF_ASYNC Or SPF_PURGEBEFORESPEAK Or SPF_IS_FILENAME Or SPF_IS_XML Or SPF_IS_NOT_XML Or SPF_NLP_MASK Or SPF_PERSIST_XML Or SPF_PARSE_MASK)
	
	     SPF_UNUSED_FLAGS = Not (SPF_VOICE_MASK)
End Enum

Public Enum SPMATCHINGMODE
	AllWords = 0
	Subsequence = 1
	OrderedSubset = 3
	SubsequenceContentRequired = 5
	OrderedSubsetContentRequired = 7
End Enum

Public Enum PHONETICALPHABET
	PA_Ipa = 0
	PA_Ups = 1
	PA_Sapi = 2
End Enum

Public Type SPEVENTEX
	eEventId As Integer 'SPEVENTENUM
	elParamType As Integer 'SPEVENTLPARAMTYPE
	ulStreamNum As Long ' Input stream number this event is associated with
	ullAudioStreamOffset As LongLong
	wParam As LongPtr
	lParam As LongPtr
	ullAudioTimeOffset As LongLong
End Type

Public Enum SPCOMMITFLAGS
	SPCF_NONE = 0
	SPCF_ADD_TO_USER_LEXICON = 1 '(1 << 0),
	SPCF_DEFINITE_CORRECTION = 2 '(1 << 1)
End Enum

Public Type SPNORMALIZATIONLIST
	ulSize As Long
	ppszzNormalizedList As LongPtr
End Type

Public Type SPDISPLAYTOKEN
	pszLexical As LongPtr
	pszDisplay As LongPtr
	bDisplayAttributes As Byte
End Type
Public Type SPDISPLAYPHRASE
	ulNumTokens As Long
	pTokens As SPDISPLAYTOKEN
End Type

Public Function CLSID_SpNotifyTranslator() As UUID
'{E2AE5372-5D40-11D2-960E-00C04F8EE628}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE2AE5372, CInt(&H5D40), CInt(&H11D2), &H96, &H0E, &H00, &HC0, &H4F, &H8E, &HE6, &H28)
 CLSID_SpNotifyTranslator = iid
End Function
Public Function CLSID_SpObjectTokenCategory() As UUID
'{A910187F-0C7A-45AC-92CC-59EDAFB77B53}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA910187F, CInt(&H0C7A), CInt(&H45AC), &H92, &HCC, &H59, &HED, &HAF, &HB7, &H7B, &H53)
 CLSID_SpObjectTokenCategory = iid
End Function
Public Function CLSID_SpObjectToken() As UUID
'{EF411752-3736-4CB4-9C8C-8EF4CCB58EFE}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HEF411752, CInt(&H3736), CInt(&H4CB4), &H9C, &H8C, &H8E, &HF4, &HCC, &HB5, &H8E, &HFE)
 CLSID_SpObjectToken = iid
End Function
Public Function CLSID_SpResourceManager() As UUID
'{96749373-3391-11D2-9EE3-00C04F797396}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H96749373, CInt(&H3391), CInt(&H11D2), &H9E, &HE3, &H00, &HC0, &H4F, &H79, &H73, &H96)
 CLSID_SpResourceManager = iid
End Function
Public Function CLSID_SpStreamFormatConverter() As UUID
'{7013943A-E2EC-11D2-A086-00C04F8EF9B5}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7013943A, CInt(&HE2EC), CInt(&H11D2), &HA0, &H86, &H00, &HC0, &H4F, &H8E, &HF9, &HB5)
 CLSID_SpStreamFormatConverter = iid
End Function
Public Function CLSID_SpMMAudioEnum() As UUID
'{AB1890A0-E91F-11D2-BB91-00C04F8EE6C0}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAB1890A0, CInt(&HE91F), CInt(&H11D2), &HBB, &H91, &H00, &HC0, &H4F, &H8E, &HE6, &HC0)
 CLSID_SpMMAudioEnum = iid
End Function
Public Function CLSID_SpMMAudioIn() As UUID
'{CF3D2E50-53F2-11D2-960C-00C04F8EE628}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HCF3D2E50, CInt(&H53F2), CInt(&H11D2), &H96, &H0C, &H00, &HC0, &H4F, &H8E, &HE6, &H28)
 CLSID_SpMMAudioIn = iid
End Function
Public Function CLSID_SpMMAudioOut() As UUID
'{A8C680EB-3D32-11D2-9EE7-00C04F797396}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA8C680EB, CInt(&H3D32), CInt(&H11D2), &H9E, &HE7, &H00, &HC0, &H4F, &H79, &H73, &H96)
 CLSID_SpMMAudioOut = iid
End Function
Public Function CLSID_SpStream() As UUID
'{715D9C59-4442-11D2-9605-00C04F8EE628}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H715D9C59, CInt(&H4442), CInt(&H11D2), &H96, &H05, &H00, &HC0, &H4F, &H8E, &HE6, &H28)
 CLSID_SpStream = iid
End Function
Public Function CLSID_SpVoice() As UUID
'{96749377-3391-11D2-9EE3-00C04F797396}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H96749377, CInt(&H3391), CInt(&H11D2), &H9E, &HE3, &H00, &HC0, &H4F, &H79, &H73, &H96)
 CLSID_SpVoice = iid
End Function
Public Function CLSID_SpSharedRecoContext() As UUID
'{47206204-5ECA-11D2-960F-00C04F8EE628}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H47206204, CInt(&H5ECA), CInt(&H11D2), &H96, &H0F, &H00, &HC0, &H4F, &H8E, &HE6, &H28)
 CLSID_SpSharedRecoContext = iid
End Function
Public Function CLSID_SpInprocRecognizer() As UUID
'{41B89B6B-9399-11D2-9623-00C04F8EE628}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H41B89B6B, CInt(&H9399), CInt(&H11D2), &H96, &H23, &H00, &HC0, &H4F, &H8E, &HE6, &H28)
 CLSID_SpInprocRecognizer = iid
End Function
Public Function CLSID_SpSharedRecognizer() As UUID
'{3BEE4890-4FE9-4A37-8C1E-5E7E12791C1F}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3BEE4890, CInt(&H4FE9), CInt(&H4A37), &H8C, &H1E, &H5E, &H7E, &H12, &H79, &H1C, &H1F)
 CLSID_SpSharedRecognizer = iid
End Function
Public Function CLSID_SpLexicon() As UUID
'{0655E396-25D0-11D3-9C26-00C04F8EF87C}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0655E396, CInt(&H25D0), CInt(&H11D3), &H9C, &H26, &H00, &HC0, &H4F, &H8E, &HF8, &H7C)
 CLSID_SpLexicon = iid
End Function
Public Function CLSID_SpUnCompressedLexicon() As UUID
'{C9E37C15-DF92-4727-85D6-72E5EEB6995A}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC9E37C15, CInt(&HDF92), CInt(&H4727), &H85, &HD6, &H72, &HE5, &HEE, &HB6, &H99, &H5A)
 CLSID_SpUnCompressedLexicon = iid
End Function
Public Function CLSID_SpCompressedLexicon() As UUID
'{90903716-2F42-11D3-9C26-00C04F8EF87C}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H90903716, CInt(&H2F42), CInt(&H11D3), &H9C, &H26, &H00, &HC0, &H4F, &H8E, &HF8, &H7C)
 CLSID_SpCompressedLexicon = iid
End Function
Public Function CLSID_SpShortcut() As UUID
'{0D722F1A-9FCF-4E62-96D8-6DF8F01A26AA}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0D722F1A, CInt(&H9FCF), CInt(&H4E62), &H96, &HD8, &H6D, &HF8, &HF0, &H1A, &H26, &HAA)
 CLSID_SpShortcut = iid
End Function
Public Function CLSID_SpPhoneConverter() As UUID
'{9185F743-1143-4C28-86B5-BFF14F20E5C8}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9185F743, CInt(&H1143), CInt(&H4C28), &H86, &HB5, &HBF, &HF1, &H4F, &H20, &HE5, &HC8)
 CLSID_SpPhoneConverter = iid
End Function
Public Function CLSID_SpPhoneticAlphabetConverter() As UUID
'{4F414126-DFE3-4629-99EE-797978317EAD}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4F414126, CInt(&HDFE3), CInt(&H4629), &H99, &HEE, &H79, &H79, &H78, &H31, &H7E, &HAD)
 CLSID_SpPhoneticAlphabetConverter = iid
End Function
Public Function CLSID_SpNullPhoneConverter() As UUID
'{455F24E9-7396-4A16-9715-7C0FDBE3EFE3}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H455F24E9, CInt(&H7396), CInt(&H4A16), &H97, &H15, &H7C, &H0F, &HDB, &HE3, &HEF, &HE3)
 CLSID_SpNullPhoneConverter = iid
End Function
Public Function CLSID_SpTextSelectionInformation() As UUID
'{0F92030A-CBFD-4AB8-A164-FF5985547FF6}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0F92030A, CInt(&HCBFD), CInt(&H4AB8), &HA1, &H64, &HFF, &H59, &H85, &H54, &H7F, &HF6)
 CLSID_SpTextSelectionInformation = iid
End Function
Public Function CLSID_SpPhraseInfoBuilder() As UUID
'{C23FC28D-C55F-4720-8B32-91F73C2BD5D1}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC23FC28D, CInt(&HC55F), CInt(&H4720), &H8B, &H32, &H91, &HF7, &H3C, &H2B, &HD5, &HD1)
 CLSID_SpPhraseInfoBuilder = iid
End Function
Public Function CLSID_SpAudioFormat() As UUID
'{9EF96870-E160-4792-820D-48CF0649E4EC}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9EF96870, CInt(&HE160), CInt(&H4792), &H82, &H0D, &H48, &HCF, &H06, &H49, &HE4, &HEC)
 CLSID_SpAudioFormat = iid
End Function
Public Function CLSID_SpWaveFormatEx() As UUID
'{C79A574C-63BE-44b9-801F-283F87F898BE}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC79A574C, CInt(&H63BE), CInt(&H44b9), &H80, &H1F, &H28, &H3F, &H87, &HF8, &H98, &HBE)
 CLSID_SpWaveFormatEx = iid
End Function
Public Function CLSID_SpInProcRecoContext() As UUID
'{73AD6842-ACE0-45E8-A4DD-8795881A2C2A}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H73AD6842, CInt(&HACE0), CInt(&H45E8), &HA4, &HDD, &H87, &H95, &H88, &H1A, &H2C, &H2A)
 CLSID_SpInProcRecoContext = iid
End Function
Public Function CLSID_SpCustomStream() As UUID
'{8DBEF13F-1948-4aa8-8CF0-048EEBED95D8}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8DBEF13F, CInt(&H1948), CInt(&H4aa8), &H8C, &HF0, &H04, &H8E, &HEB, &HED, &H95, &HD8)
 CLSID_SpCustomStream = iid
End Function
Public Function CLSID_SpFileStream() As UUID
'{947812B3-2AE1-4644-BA86-9E90DED7EC91}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H947812B3, CInt(&H2AE1), CInt(&H4644), &HBA, &H86, &H9E, &H90, &HDE, &HD7, &HEC, &H91)
 CLSID_SpFileStream = iid
End Function
Public Function CLSID_SpMemoryStream() As UUID
'{5FB7EF7D-DFF4-468a-B6B7-2FCBD188F994}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5FB7EF7D, CInt(&HDFF4), CInt(&H468a), &HB6, &HB7, &H2F, &HCB, &HD1, &H88, &HF9, &H94)
 CLSID_SpMemoryStream = iid
End Function
End Module