'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

'dinput.h

#If WDL_NO_DIRECTX = 0 Then
    

[InterfaceId("E7E1F7C0-88D2-11D0-9AD0-00A0C9A06E35")]
[OleAutomation(False)]
Interface IDirectInputEffect Extends IUnknown
    Sub Initialize(ByVal hInstance As LongPtr, ByVal dwVersion As Long, ByRef rguid As UUID)
    Sub GetEffectGuid(ByRef pguid As UUID)
    Sub GetParameters(ByRef peff As DIEFFECT, ByVal dwFlags As DIEPFLAGS)
    Sub SetParameters(ByRef peff As DIEFFECT, ByVal dwFlags As DIEPFLAGS)
    Sub Start(ByVal dwIterations As Long, ByVal dwFlags As DIESFLAGS)
    Sub Stop()
    Sub GetEffectStatus(ByRef pdwFlags As DIEGESFLAGS)
    Sub Download()
    Sub Unload()
    Sub Escape(ByRef pesc As DIEFFESCAPE)
End Interface

[InterfaceId("5944E681-C92E-11CF-BFC7-444553540000")]
[OleAutomation(False)]
Interface IDirectInputDeviceW Extends IUnknown
    Sub GetCapabilities(ByRef lpDIDevCaps As DIDEVCAPS)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumObjects(ByVal lpCallback As LongPtr, pvRef As Any, ByVal dwFlags As DIDFTFLAGS)
    ' #Else
    ' Sub EnumObjects(ByVal lpCallback As DIENUMDEVICEOBJECTSCALLBACKW, pvRef As Any, ByVal dwFlags As DIDFTFLAGS)
    ' #End If
    Sub GetProperty(ByRef rguidProp As GUID, ByRef pdiph As DIPROPHEADER)
    Sub SetProperty(ByRef rguidProp As GUID, ByRef pdiph As DIPROPHEADER)
    Sub Acquire()
    Sub Unacquire()
    Sub GetDeviceState(ByVal cbData As Long, lpvData As Any)
    Sub GetDeviceData(ByVal cbObjectData As Long, ByRef rgdod As DIDEVICEOBJECTDATA, ByRef pdwInOut As Long, ByVal dwFlags As DIDGDDFLAGS)
    Sub SetDataFormat(ByRef lpdf As DIDATAFORMAT)
    Sub SetEventNotification(ByVal hEvent As LongPtr)
    Sub SetCooperativeLevel(ByVal hwnd As LongPtr, ByVal dwFlags As DISCLFLAGS)
    Sub GetObjectInfo(ByRef pdidoi As DIDEVICEOBJECTINSTANCEW, ByVal dwObj As Long, ByVal dwHow As DIPHFLAGS)
    Sub GetDeviceInfo(ByRef pdidi As DIDEVICEINSTANCEW)
    Sub RunControlPanel(ByVal hwndOwner As LongPtr, ByVal dwFlags As Long)
    Sub Initialize(ByVal hinst As LongPtr, ByVal dwVersion As Long, ByRef rguid As GUID)
End Interface
[InterfaceId("5944E680-C92E-11CF-BFC7-444553540000")]
[OleAutomation(False)]
Interface IDirectInputDeviceA Extends IUnknown
    Sub GetCapabilities(ByRef lpDIDevCaps As DIDEVCAPS)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumObjects(ByVal lpCallback As LongPtr, pvRef As Any, ByVal dwFlags As DIDFTFLAGS)
    ' #Else
    ' Sub EnumObjects(ByVal lpCallback As DIENUMDEVICEOBJECTSCALLBACKA, pvRef As Any, ByVal dwFlags As DIDFTFLAGS)
    ' #End If
    Sub GetProperty(ByRef rguidProp As GUID, ByRef pdiph As DIPROPHEADER)
    Sub SetProperty(ByRef rguidProp As GUID, ByRef pdiph As DIPROPHEADER)
    Sub Acquire()
    Sub Unacquire()
    Sub GetDeviceState(ByVal cbData As Long, lpvData As Any)
    Sub GetDeviceData(ByVal cbObjectData As Long, ByRef rgdod As DIDEVICEOBJECTDATA, ByRef pdwInOut As Long, ByVal dwFlags As DIDGDDFLAGS)
    Sub SetDataFormat(ByRef lpdf As DIDATAFORMAT)
    Sub SetEventNotification(ByVal hEvent As LongPtr)
    Sub SetCooperativeLevel(ByVal hwnd As LongPtr, ByVal dwFlags As DISCLFLAGS)
    Sub GetObjectInfo(ByRef pdidoi As DIDEVICEOBJECTINSTANCEA, ByVal dwObj As Long, ByVal dwHow As DIPHFLAGS)
    Sub GetDeviceInfo(ByRef pdidi As DIDEVICEINSTANCEA)
    Sub RunControlPanel(ByVal hwndOwner As LongPtr, ByVal dwFlags As Long)
    Sub Initialize(ByVal hinst As LongPtr, ByVal dwVersion As Long, ByRef rguid As GUID)
End Interface
'Alias IDirectInputDevice As IDirectInputDeviceW
[InterfaceId("5944E681-C92E-11CF-BFC7-444553540000")]
[OleAutomation(False)]
Interface IDirectInputDevice Extends IUnknown
    Sub GetCapabilities(ByRef lpDIDevCaps As DIDEVCAPS)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumObjects(ByVal lpCallback As LongPtr, pvRef As Any, ByVal dwFlags As DIDFTFLAGS)
    ' #Else
    ' Sub EnumObjects(ByVal lpCallback As DIENUMDEVICEOBJECTSCALLBACKW, pvRef As Any, ByVal dwFlags As DIDFTFLAGS)
    ' #End If
    Sub GetProperty(ByRef rguidProp As GUID, ByRef pdiph As DIPROPHEADER)
    Sub SetProperty(ByRef rguidProp As GUID, ByRef pdiph As DIPROPHEADER)
    Sub Acquire()
    Sub Unacquire()
    Sub GetDeviceState(ByVal cbData As Long, lpvData As Any)
    Sub GetDeviceData(ByVal cbObjectData As Long, ByRef rgdod As DIDEVICEOBJECTDATA, ByRef pdwInOut As Long, ByVal dwFlags As DIDGDDFLAGS)
    Sub SetDataFormat(ByRef lpdf As DIDATAFORMAT)
    Sub SetEventNotification(ByVal hEvent As LongPtr)
    Sub SetCooperativeLevel(ByVal hwnd As LongPtr, ByVal dwFlags As DISCLFLAGS)
    Sub GetObjectInfo(ByRef pdidoi As DIDEVICEOBJECTINSTANCEW, ByVal dwObj As Long, ByVal dwHow As DIPHFLAGS)
    Sub GetDeviceInfo(ByRef pdidi As DIDEVICEINSTANCEW)
    Sub RunControlPanel(ByVal hwndOwner As LongPtr, ByVal dwFlags As Long)
    Sub Initialize(ByVal hinst As LongPtr, ByVal dwVersion As Long, ByRef rguid As GUID)
End Interface


[InterfaceId("5944E683-C92E-11CF-BFC7-444553540000")]
[OleAutomation(False)]
Interface IDirectInputDevice2W Extends IDirectInputDeviceW
    Sub CreateEffect(ByRef rguid As GUID, ByRef lpeff As DIEFFECT, ByRef ppdeff As IDirectInputEffect, ByVal punkOuter As IUnknown)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumEffects(ByVal lpCallback As LongPtr, ByVal pvRef As LongPtr, ByVal dwFlags As DIEFTFLAGS)
    ' #Else
    ' Sub EnumEffects(ByVal lpCallback As DIENUMEFFECTSCALLBACKW, ByVal pvRef As LongPtr, ByVal dwFlags As DIEFTFLAGS)
    ' #End If
    Sub GetEffectInfo(ByRef pdei As DIEFFECTINFOW, ByRef guidEffect As GUID)
    Sub GetForceFeedbackState(ByRef pdwOut As DIGFFSFLAGS)
    Sub SendForceFeedbackCommand(ByVal dwFlags As DISFFCFLAGS)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumCreatedEffectObjects(ByVal lpCallback As LongPtr, ByVal pvRef As LongPtr, ByVal fl As Long)
    ' #Else
    ' Sub EnumCreatedEffectObjects(ByVal lpCallback As DIENUMCREATEDEFFECTOBJECTSCALLBACK, ByVal pvRef As LongPtr, ByVal fl As Long)
    ' #End If
    Sub Escape(ByRef pesc As DIEFFESCAPE)
    Sub Poll()
    Sub SendDeviceData(ByVal cbObjectData As Long, ByRef rgdod As DIDEVICEOBJECTDATA, ByRef pdwInOut As Long, ByVal fl As DISDDFLAGS)
End Interface
[InterfaceId("5944E682-C92E-11CF-BFC7-444553540000")]
[OleAutomation(False)]
Interface IDirectInputDevice2A Extends IDirectInputDeviceA
    Sub CreateEffect(ByRef rguid As GUID, ByRef lpeff As DIEFFECT, ByRef ppdeff As IDirectInputEffect, ByVal punkOuter As IUnknown)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumEffects(ByVal lpCallback As LongPtr, ByVal pvRef As LongPtr, ByVal dwFlags As DIEFTFLAGS)
    ' #Else
    ' Sub EnumEffects(ByVal lpCallback As DIENUMEFFECTSCALLBACKA, ByVal pvRef As LongPtr, ByVal dwFlags As DIEFTFLAGS)
    ' #End If
    Sub GetEffectInfo(ByRef pdei As DIEFFECTINFOA, ByRef guidEffect As GUID)
    Sub GetForceFeedbackState(ByRef pdwOut As DIGFFSFLAGS)
    Sub SendForceFeedbackCommand(ByVal dwFlags As DISFFCFLAGS)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumCreatedEffectObjects(ByVal lpCallback As LongPtr, ByVal pvRef As LongPtr, ByVal fl As Long)
    ' #Else
    ' Sub EnumCreatedEffectObjects(ByVal lpCallback As DIENUMCREATEDEFFECTOBJECTSCALLBACK, ByVal pvRef As LongPtr, ByVal fl As Long)
    ' #End If
    Sub Escape(ByRef pesc As DIEFFESCAPE)
    Sub Poll()
    Sub SendDeviceData(ByVal cbObjectData As Long, ByRef rgdod As DIDEVICEOBJECTDATA, ByRef pdwInOut As Long, ByVal fl As DISDDFLAGS)
End Interface
'Alias IDirectInputDevice2 As IDirectInputDevice2W
[InterfaceId("5944E683-C92E-11CF-BFC7-444553540000")]
[OleAutomation(False)]
Interface IDirectInputDevice2 Extends IDirectInputDevice
    Sub CreateEffect(ByRef rguid As GUID, ByRef lpeff As DIEFFECT, ByRef ppdeff As IDirectInputEffect, ByVal punkOuter As IUnknown)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumEffects(ByVal lpCallback As LongPtr, ByVal pvRef As LongPtr, ByVal dwFlags As DIEFTFLAGS)
    ' #Else
    ' Sub EnumEffects(ByVal lpCallback As DIENUMEFFECTSCALLBACK, ByVal pvRef As LongPtr, ByVal dwFlags As DIEFTFLAGS)
    ' #End If
    Sub GetEffectInfo(ByRef pdei As DIEFFECTINFO, ByRef guidEffect As GUID)
    Sub GetForceFeedbackState(ByRef pdwOut As DIGFFSFLAGS)
    Sub SendForceFeedbackCommand(ByVal dwFlags As DISFFCFLAGS)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumCreatedEffectObjects(ByVal lpCallback As LongPtr, ByVal pvRef As LongPtr, ByVal fl As Long)
    ' #Else
    ' Sub EnumCreatedEffectObjects(ByVal lpCallback As DIENUMCREATEDEFFECTOBJECTSCALLBACK, ByVal pvRef As LongPtr, ByVal fl As Long)
    ' #End If
    Sub Escape(ByRef pesc As DIEFFESCAPE)
    Sub Poll()
    Sub SendDeviceData(ByVal cbObjectData As Long, ByRef rgdod As DIDEVICEOBJECTDATA, ByRef pdwInOut As Long, ByVal fl As DISDDFLAGS)
End Interface


[InterfaceId("57D7C6BD-2356-11D3-8E9D-00C04F6844AE")]
[OleAutomation(False)]
Interface IDirectInputDevice7W Extends IDirectInputDevice2W
    ' #If WDL_NO_DELEGATES Then
    Sub EnumEffectsInFile(ByVal lpszFileName As LongPtr, ByVal pec As LongPtr, ByVal pvRef As LongPtr, ByVal dwFlags As DIFEFFLAGS)
    ' #Else
    ' Sub EnumEffectsInFile(ByVal lpszFileName As LongPtr, ByVal pec As DIENUMEFFECTSINFILECALLBACK, ByVal pvRef As LongPtr, ByVal dwFlags As DIFEFFLAGS)
    ' #End If
    Sub WriteEffectToFile(ByVal lpszFileName As LongPtr, ByVal dwEntries As Long, ByRef rgDiFileEft As DIFILEEFFECT, ByVal dwFlags As DIFEFFLAGS)
End Interface
[InterfaceId("57D7C6BC-2356-11D3-8E9D-00C04F6844AE")]
[OleAutomation(False)]
Interface IDirectInputDevice7A Extends IDirectInputDevice2A
    ' #If WDL_NO_DELEGATES Then
    Sub EnumEffectsInFile(ByVal lpszFileName As LongPtr, ByVal pec As LongPtr, ByVal pvRef As LongPtr, ByVal dwFlags As DIFEFFLAGS)
    ' #Else
    ' Sub EnumEffectsInFile(ByVal lpszFileName As LongPtr, ByVal pec As DIENUMEFFECTSINFILECALLBACK, ByVal pvRef As LongPtr, ByVal dwFlags As DIFEFFLAGS)
    ' #End If
    Sub WriteEffectToFile(ByVal lpszFileName As LongPtr, ByVal dwEntries As Long, ByRef rgDiFileEft As DIFILEEFFECT, ByVal dwFlags As DIFEFFLAGS)
End Interface
'Alias IDirectInputDevice7 as IDirectInputDevice7W
[InterfaceId("57D7C6BD-2356-11D3-8E9D-00C04F6844AE")]
[OleAutomation(False)]
Interface IDirectInputDevice7 Extends IDirectInputDevice2
    ' #If WDL_NO_DELEGATES Then
    Sub EnumEffectsInFile(ByVal lpszFileName As String, ByVal pec As LongPtr, ByVal pvRef As LongPtr, ByVal dwFlags As DIFEFFLAGS)
    ' #Else
    ' Sub EnumEffectsInFile(ByVal lpszFileName As String, ByVal pec As DIENUMEFFECTSINFILECALLBACK, ByVal pvRef As LongPtr, ByVal dwFlags As DIFEFFLAGS)
    ' #End If
    Sub WriteEffectToFile(ByVal lpszFileName As String, ByVal dwEntries As Long, ByRef rgDiFileEft As DIFILEEFFECT, ByVal dwFlags As DIFEFFLAGS)
End Interface


[InterfaceId("54D41081-DC15-4833-A41B-748F73A38179")]
[OleAutomation(False)]
Interface IDirectInputDevice8W Extends IUnknown
    Sub GetCapabilities(ByRef lpDIDevCaps As DIDEVCAPS)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumObjects(ByVal lpCallback As LongPtr, pvRef As Any, ByVal dwFlags As DIDFTFLAGS)
    ' #Else
    ' Sub EnumObjects(ByVal lpCallback As DIENUMDEVICEOBJECTSCALLBACKW, pvRef As Any, ByVal dwFlags As DIDFTFLAGS)
    ' #End If
    Sub GetProperty(ByRef rguidProp As GUID, ByRef pdiph As DIPROPHEADER)
    Sub SetProperty(ByRef rguidProp As GUID, ByRef pdiph As DIPROPHEADER)
    Sub Acquire()
    Sub Unacquire()
    Sub GetDeviceState(ByVal cbData As Long, lpvData As Any)
    Sub GetDeviceData(ByVal cbObjectData As Long, ByRef rgdod As DIDEVICEOBJECTDATA, ByRef pdwInOut As Long, ByVal dwFlags As DIDGDDFLAGS)
    Sub SetDataFormat(ByRef lpdf As DIDATAFORMAT)
    Sub SetEventNotification(ByVal hEvent As LongPtr)
    Sub SetCooperativeLevel(ByVal hwnd As LongPtr, ByVal dwFlags As DISCLFLAGS)
    Sub GetObjectInfo(ByRef pdidoi As DIDEVICEOBJECTINSTANCEW, ByVal dwObj As Long, ByVal dwHow As DIPHFLAGS)
    Sub GetDeviceInfo(ByRef pdidi As DIDEVICEINSTANCEW)
    Sub RunControlPanel(ByVal hwndOwner As LongPtr, ByVal dwFlags As Long)
    Sub Initialize(ByVal hinst As LongPtr, ByVal dwVersion As Long, ByRef rguid As GUID)
    Sub CreateEffect(ByRef rguid As GUID, ByRef lpeff As DIEFFECT, ByRef ppdeff As IDirectInputEffect, ByVal punkOuter As IUnknown)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumEffects(ByVal lpCallback As LongPtr, ByVal pvRef As LongPtr, ByVal dwFlags As DIEFTFLAGS)
    ' #Else
    ' Sub EnumEffects(ByVal lpCallback As DIENUMEFFECTSCALLBACK, ByVal pvRef As LongPtr, ByVal dwFlags As DIEFTFLAGS)
    ' #End If
    Sub GetEffectInfo(ByRef pdei As DIEFFECTINFOW, ByRef guidEffect As GUID)
    Sub GetForceFeedbackState(ByRef pdwOut As DIGFFSFLAGS)
    Sub SendForceFeedbackCommand(ByVal dwFlags As DISFFCFLAGS)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumCreatedEffectObjects(ByVal lpCallback As LongPtr, ByVal pvRef As LongPtr, ByVal fl As Long)
    ' #Else
    ' Sub EnumCreatedEffectObjects(ByVal lpCallback As DIENUMCREATEDEFFECTOBJECTSCALLBACK, ByVal pvRef As LongPtr, ByVal fl As Long)
    ' #End If
    Sub Escape(ByRef pesc As DIEFFESCAPE)
    Sub Poll()
    Sub SendDeviceData(ByVal cbObjectData As Long, ByRef rgdod As DIDEVICEOBJECTDATA, ByRef pdwInOut As Long, ByVal fl As Long)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumEffectsInFile(ByVal lpszFileName As LongPtr, ByVal pec As LongPtr, ByVal pvRef As LongPtr, ByVal dwFlags As DIFEFFLAGS)
    ' #Else
    ' Sub EnumEffectsInFile(ByVal lpszFileName As LongPtr, ByVal pec As DIENUMEFFECTSINFILECALLBACK, ByVal pvRef As LongPtr, ByVal dwFlags As DIFEFFLAGS)
    ' #End If
    Sub WriteEffectToFile(ByVal lpszFileName As LongPtr, ByVal dwEntries As Long, ByRef rgDiFileEft As DIFILEEFFECT, ByVal dwFlags As DIFEFFLAGS)
    Sub BuildActionMap(ByRef lpdiaf As DIACTIONFORMATW, ByVal lpszUserName As LongPtr, ByVal dwFlags As DIDBAMFLAGS)
    Sub SetActionMap(ByRef lpdiaf As DIACTIONFORMATW, ByVal lpszUserName As LongPtr, ByVal dwFlags As DIDSAMFLAGS)
    Sub GetImageInfo(ByRef lpdiDevImageInfoHeader As DIDEVICEIMAGEINFOHEADERW)
End Interface
[InterfaceId("54D41080-DC15-4833-A41B-748F73A38179")]
[OleAutomation(False)]
Interface IDirectInputDevice8A Extends IUnknown
    Sub GetCapabilities(ByRef lpDIDevCaps As DIDEVCAPS)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumObjects(ByVal lpCallback As LongPtr, pvRef As Any, ByVal dwFlags As DIDFTFLAGS)
    ' #Else
    ' Sub EnumObjects(ByVal lpCallback As DIENUMDEVICEOBJECTSCALLBACKA, pvRef As Any, ByVal dwFlags As DIDFTFLAGS)
    ' #End If
    Sub GetProperty(ByRef rguidProp As GUID, ByRef pdiph As DIPROPHEADER)
    Sub SetProperty(ByRef rguidProp As GUID, ByRef pdiph As DIPROPHEADER)
    Sub Acquire()
    Sub Unacquire()
    Sub GetDeviceState(ByVal cbData As Long, lpvData As Any)
    Sub GetDeviceData(ByVal cbObjectData As Long, ByRef rgdod As DIDEVICEOBJECTDATA, ByRef pdwInOut As Long, ByVal dwFlags As DIDGDDFLAGS)
    Sub SetDataFormat(ByRef lpdf As DIDATAFORMAT)
    Sub SetEventNotification(ByVal hEvent As LongPtr)
    Sub SetCooperativeLevel(ByVal hwnd As LongPtr, ByVal dwFlags As DISCLFLAGS)
    Sub GetObjectInfo(ByRef pdidoi As DIDEVICEOBJECTINSTANCEA, ByVal dwObj As Long, ByVal dwHow As DIPHFLAGS)
    Sub GetDeviceInfo(ByRef pdidi As DIDEVICEINSTANCEW)
    Sub RunControlPanel(ByVal hwndOwner As LongPtr, ByVal dwFlags As Long)
    Sub Initialize(ByVal hinst As LongPtr, ByVal dwVersion As Long, ByRef rguid As GUID)
    Sub CreateEffect(ByRef rguid As GUID, ByRef lpeff As DIEFFECT, ByRef ppdeff As IDirectInputEffect, ByVal punkOuter As IUnknown)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumEffects(ByVal lpCallback As LongPtr, ByVal pvRef As LongPtr, ByVal dwFlags As DIEFTFLAGS)
    ' #Else
    ' Sub EnumEffects(ByVal lpCallback As DIENUMEFFECTSCALLBACK, ByVal pvRef As LongPtr, ByVal dwFlags As DIEFTFLAGS)
    ' #End If
    Sub GetEffectInfo(ByRef pdei As DIEFFECTINFOW, ByRef guidEffect As GUID)
    Sub GetForceFeedbackState(ByRef pdwOut As DIGFFSFLAGS)
    Sub SendForceFeedbackCommand(ByVal dwFlags As DISFFCFLAGS)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumCreatedEffectObjects(ByVal lpCallback As LongPtr, ByVal pvRef As LongPtr, ByVal fl As Long)
    ' #Else
    ' Sub EnumCreatedEffectObjects(ByVal lpCallback As DIENUMCREATEDEFFECTOBJECTSCALLBACK, ByVal pvRef As LongPtr, ByVal fl As Long)
    ' #End If
    Sub Escape(ByRef pesc As DIEFFESCAPE)
    Sub Poll()
    Sub SendDeviceData(ByVal cbObjectData As Long, ByRef rgdod As DIDEVICEOBJECTDATA, ByRef pdwInOut As Long, ByVal fl As Long)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumEffectsInFile(ByVal lpszFileName As LongPtr, ByVal pec As LongPtr, ByVal pvRef As LongPtr, ByVal dwFlags As DIFEFFLAGS)
    ' #Else
    ' Sub EnumEffectsInFile(ByVal lpszFileName As LongPtr, ByVal pec As DIENUMEFFECTSINFILECALLBACK, ByVal pvRef As LongPtr, ByVal dwFlags As DIFEFFLAGS)
    ' #End If
    Sub WriteEffectToFile(ByVal lpszFileName As LongPtr, ByVal dwEntries As Long, ByRef rgDiFileEft As DIFILEEFFECT, ByVal dwFlags As DIFEFFLAGS)
    Sub BuildActionMap(ByRef lpdiaf As DIACTIONFORMATA, ByVal lpszUserName As LongPtr, ByVal dwFlags As DIDBAMFLAGS)
    Sub SetActionMap(ByRef lpdiaf As DIACTIONFORMATA, ByVal lpszUserName As LongPtr, ByVal dwFlags As DIDSAMFLAGS)
    Sub GetImageInfo(ByRef lpdiDevImageInfoHeader As DIDEVICEIMAGEINFOHEADERA)
End Interface
'Alias IDirectInputDevice8 As IDirectInputDevice8W
[InterfaceId("54D41081-DC15-4833-A41B-748F73A38179")]
[OleAutomation(False)]
Interface IDirectInputDevice8 Extends IUnknown
    Sub GetCapabilities(ByRef lpDIDevCaps As DIDEVCAPS)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumObjects(ByVal lpCallback As LongPtr, pvRef As Any, ByVal dwFlags As DIDFTFLAGS)
    ' #Else
    ' Sub EnumObjects(ByVal lpCallback As DIENUMDEVICEOBJECTSCALLBACKW, pvRef As Any, ByVal dwFlags As DIDFTFLAGS)
    ' #End If
    Sub GetProperty(ByRef rguidProp As GUID, ByRef pdiph As DIPROPHEADER)
    Sub SetProperty(ByRef rguidProp As GUID, ByRef pdiph As DIPROPHEADER)
    Sub Acquire()
    Sub Unacquire()
    Sub GetDeviceState(ByVal cbData As Long, lpvData As Any)
    Sub GetDeviceData(ByVal cbObjectData As Long, ByRef rgdod As DIDEVICEOBJECTDATA, ByRef pdwInOut As Long, ByVal dwFlags As DIDGDDFLAGS)
    Sub SetDataFormat(ByRef lpdf As DIDATAFORMAT)
    Sub SetEventNotification(ByVal hEvent As LongPtr)
    Sub SetCooperativeLevel(ByVal hwnd As LongPtr, ByVal dwFlags As DISCLFLAGS)
    Sub GetObjectInfo(ByRef pdidoi As DIDEVICEOBJECTINSTANCEW, ByVal dwObj As Long, ByVal dwHow As DIPHFLAGS)
    Sub GetDeviceInfo(ByRef pdidi As DIDEVICEINSTANCEW)
    Sub RunControlPanel(ByVal hwndOwner As LongPtr, ByVal dwFlags As Long)
    Sub Initialize(ByVal hinst As LongPtr, ByVal dwVersion As Long, ByRef rguid As GUID)
    Sub CreateEffect(ByRef rguid As GUID, ByRef lpeff As DIEFFECT, ByRef ppdeff As IDirectInputEffect, ByVal punkOuter As IUnknown)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumEffects(ByVal lpCallback As LongPtr, ByVal pvRef As LongPtr, ByVal dwFlags As DIEFTFLAGS)
    ' #Else
    ' Sub EnumEffects(ByVal lpCallback As DIENUMEFFECTSCALLBACK, ByVal pvRef As LongPtr, ByVal dwFlags As DIEFTFLAGS)
    ' #End If
    Sub GetEffectInfo(ByRef pdei As DIEFFECTINFOW, ByRef guidEffect As GUID)
    Sub GetForceFeedbackState(ByRef pdwOut As DIGFFSFLAGS)
    Sub SendForceFeedbackCommand(ByVal dwFlags As DISFFCFLAGS)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumCreatedEffectObjects(ByVal lpCallback As LongPtr, ByVal pvRef As LongPtr, ByVal fl As Long)
    ' #Else
    ' Sub EnumCreatedEffectObjects(ByVal lpCallback As DIENUMCREATEDEFFECTOBJECTSCALLBACK, ByVal pvRef As LongPtr, ByVal fl As Long)
    ' #End If
    Sub Escape(ByRef pesc As DIEFFESCAPE)
    Sub Poll()
    Sub SendDeviceData(ByVal cbObjectData As Long, ByRef rgdod As DIDEVICEOBJECTDATA, ByRef pdwInOut As Long, ByVal fl As Long)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumEffectsInFile(ByVal lpszFileName As LongPtr, ByVal pec As LongPtr, ByVal pvRef As LongPtr, ByVal dwFlags As DIFEFFLAGS)
    ' #Else
    ' Sub EnumEffectsInFile(ByVal lpszFileName As LongPtr, ByVal pec As DIENUMEFFECTSINFILECALLBACK, ByVal pvRef As LongPtr, ByVal dwFlags As DIFEFFLAGS)
    ' #End If
    Sub WriteEffectToFile(ByVal lpszFileName As LongPtr, ByVal dwEntries As Long, ByRef rgDiFileEft As DIFILEEFFECT, ByVal dwFlags As DIFEFFLAGS)
    Sub BuildActionMap(ByRef lpdiaf As DIACTIONFORMATW, ByVal lpszUserName As LongPtr, ByVal dwFlags As DIDBAMFLAGS)
    Sub SetActionMap(ByRef lpdiaf As DIACTIONFORMATW, ByVal lpszUserName As LongPtr, ByVal dwFlags As DIDSAMFLAGS)
    Sub GetImageInfo(ByRef lpdiDevImageInfoHeader As DIDEVICEIMAGEINFOHEADERW)
End Interface

[InterfaceId("89521361-AA8A-11CF-BFC7-444553540000")]
[OleAutomation(False)]
Interface IDirectInputW Extends IUnknown
    Sub CreateDevice(ByRef rguid As GUID, lplpDirectInputDevice As IDirectInputDeviceW, ByVal pUnkOuter As IUnknown)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumDevices(ByVal dwDevType As Long, ByVal lpCallback As LongPtr, ByVal pvRef As LongPtr, ByVal dwFlags As DIENUMDEVICESFLAGS)
    ' #Else
    ' Sub EnumDevices(ByVal dwDevType As Long, ByVal lpCallback As DIENUMDEVICESCALLBACKW, ByVal pvRef As LongPtr, ByVal dwFlags As DIENUMDEVICESFLAGS)
    ' #End If
    Sub GetDeviceStatus(ByRef rguidInstance As GUID)
    Sub RunControlPanel(ByVal hwndOwner As LongPtr, ByVal dwFlags As Long)
    Sub Initialize(ByVal hinst As LongPtr, ByVal dwVersion As Long)
End Interface
[InterfaceId("89521360-AA8A-11CF-BFC7-444553540000")]
[OleAutomation(False)]
Interface IDirectInputA Extends IUnknown
    Sub CreateDevice(ByRef rguid As GUID, lplpDirectInputDevice As IDirectInputDeviceA, ByVal pUnkOuter As IUnknown)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumDevices(ByVal dwDevType As Long, ByVal lpCallback As LongPtr, ByVal pvRef As LongPtr, ByVal dwFlags As DIENUMDEVICESFLAGS)
    ' #Else
    ' Sub EnumDevices(ByVal dwDevType As Long, ByVal lpCallback As DIENUMDEVICESCALLBACKA, ByVal pvRef As LongPtr, ByVal dwFlags As DIENUMDEVICESFLAGS)
    ' #End If
    Sub GetDeviceStatus(ByRef rguidInstance As GUID)
    Sub RunControlPanel(ByVal hwndOwner As LongPtr, ByVal dwFlags As Long)
    Sub Initialize(ByVal hinst As LongPtr, ByVal dwVersion As Long)
End Interface
[InterfaceId("89521361-AA8A-11CF-BFC7-444553540000")]
[OleAutomation(False)]
Interface IDirectInput Extends IUnknown
    Sub CreateDevice(ByRef rguid As GUID, lplpDirectInputDevice As IDirectInputDevice, ByVal pUnkOuter As IUnknown)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumDevices(ByVal dwDevType As Long, ByVal lpCallback As LongPtr, ByVal pvRef As LongPtr, ByVal dwFlags As DIENUMDEVICESFLAGS)
    ' #Else
    ' Sub EnumDevices(ByVal dwDevType As Long, ByVal lpCallback As DIENUMDEVICESCALLBACK, ByVal pvRef As LongPtr, ByVal dwFlags As DIENUMDEVICESFLAGS)
    ' #End If
    Sub GetDeviceStatus(ByRef rguidInstance As GUID)
    Sub RunControlPanel(ByVal hwndOwner As LongPtr, ByVal dwFlags As Long)
    Sub Initialize(ByVal hinst As LongPtr, ByVal dwVersion As Long)
End Interface

[InterfaceId("5944E663-AA8A-11CF-BFC7-444553540000")]
[OleAutomation(False)]
Interface IDirectInput2W Extends IDirectInputW
    Sub FindDevice(ByRef rguidClass As GUID, ByVal ptszName As LongPtr, ByRef pguidInstance As GUID)
End Interface
[InterfaceId("5944E662-AA8A-11CF-BFC7-444553540000")]
[OleAutomation(False)]
Interface IDirectInput2A Extends IDirectInputA
    Sub FindDevice(ByRef rguidClass As GUID, ByVal ptszName As LongPtr, ByRef pguidInstance As GUID)
End Interface
[InterfaceId("5944E663-AA8A-11CF-BFC7-444553540000")]
[OleAutomation(False)]
Interface IDirectInput2 Extends IDirectInput
    Sub FindDevice(ByRef rguidClass As GUID, ByVal ptszName As LongPtr, ByRef pguidInstance As GUID)
End Interface

[InterfaceId("9A4CB685-236D-11D3-8E9D-00C04F6844AE")]
[OleAutomation(False)]
Interface IDirectInput7W Extends IDirectInput2W
    Sub CreateDeviceEx(ByRef rguid As GUID, ByRef riid As GUID, ByRef pvOut As Any, ByVal pUnkOuter As LongPtr)
End Interface
[InterfaceId("9A4CB684-236D-11D3-8E9D-00C04F6844AE")]
[OleAutomation(False)]
Interface IDirectInput7A Extends IDirectInput2A
    Sub CreateDeviceEx(ByRef rguid As GUID, ByRef riid As GUID, ByRef pvOut As Any, ByVal pUnkOuter As IUnknown)
End Interface
[InterfaceId("9A4CB685-236D-11D3-8E9D-00C04F6844AE")]
[OleAutomation(False)]
Interface IDirectInput7 Extends IDirectInput2
    Sub CreateDeviceEx(ByRef rguid As GUID, ByRef riid As GUID, ByRef pvOut As Any, ByVal pUnkOuter As IUnknown)
End Interface

[InterfaceId("BF798031-483A-4DA2-AA99-5D64ED369700")]
[OleAutomation(False)]
Interface IDirectInput8W Extends IUnknown
    Sub CreateDevice(ByRef rguid As GUID, ByRef lplpDirectInputDevice As IDirectInputDevice8W, ByVal pUnkOuter As LongPtr)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumDevices(ByVal dwDevType As Long, ByVal lpCallback As LongPtr, ByVal pvRef As LongPtr, ByVal dwFlags As DIENUMDEVICESFLAGS)
    ' #Else
    ' Sub EnumDevices(ByVal dwDevType As Long, ByVal lpCallback As DIENUMDEVICESCALLBACKW, ByVal pvRef As LongPtr, ByVal dwFlags As DIENUMDEVICESFLAGS)
    ' #End If
    Sub GetDeviceStatus(ByRef rguidInstance As GUID)
    Sub RunControlPanel(ByVal hwndOwner As LongPtr, ByVal dwFlags As Long)
    Sub Initialize(ByVal hinst As LongPtr, ByVal dwVersion As Long)
    Sub FindDevice(ByRef rguidClass As GUID, ByVal ptszName As LongPtr, ByRef pguidInstance As GUID)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumDevicesBySemantics(ByVal ptszUserName As LongPtr, ByRef lpdiActionFormat As DIACTIONFORMATW, ByVal lpCallback As LongPtr, ByVal pvRef As LongPtr, ByVal dwFlags As DIEDBSFLFLAGS)
    ' #Else
    ' Sub EnumDevicesBySemantics(ByVal ptszUserName As LongPtr, ByRef lpdiActionFormat As DIACTIONFORMATW, ByVal lpCallback As DIENUMDEVICESBYSEMANTICSCBW, ByVal pvRef As LongPtr, ByVal dwFlags As DIEDBSFLFLAGS)
    ' #End If
    Sub ConfigureDevices(ByVal lpdiCallback As LongPtr, ByRef lpdiCDParams As DICONFIGUREDEVICESPARAMSW, ByVal dwFlags As Long, ByVal pvRefData As LongPtr)
End Interface
[InterfaceId("BF798031-483A-4DA2-AA99-5D64ED369700")]
[OleAutomation(False)]
Interface IDirectInput8A Extends IUnknown
    Sub CreateDevice(ByRef rguid As GUID, ByRef lplpDirectInputDevice As IDirectInputDevice8A, ByVal pUnkOuter As LongPtr)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumDevices(ByVal dwDevType As Long, ByVal lpCallback As LongPtr, ByVal pvRef As LongPtr, ByVal dwFlags As DIENUMDEVICESFLAGS)
    ' #Else
    ' Sub EnumDevices(ByVal dwDevType As Long, ByVal lpCallback As DIENUMDEVICESCALLBACKA, ByVal pvRef As LongPtr, ByVal dwFlags As DIENUMDEVICESFLAGS)
    ' #End If
    Sub GetDeviceStatus(ByRef rguidInstance As GUID)
    Sub RunControlPanel(ByVal hwndOwner As LongPtr, ByVal dwFlags As Long)
    Sub Initialize(ByVal hinst As LongPtr, ByVal dwVersion As Long)
    Sub FindDevice(ByRef rguidClass As GUID, ByVal ptszName As LongPtr, ByRef pguidInstance As GUID)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumDevicesBySemantics(ByVal ptszUserName As LongPtr, ByRef lpdiActionFormat As DIACTIONFORMATA, ByVal lpCallback As LongPtr, ByVal pvRef As LongPtr, ByVal dwFlags As DIEDBSFLFLAGS)
    ' #Else
    ' Sub EnumDevicesBySemantics(ByVal ptszUserName As LongPtr, ByRef lpdiActionFormat As DIACTIONFORMATA, ByVal lpCallback As DIENUMDEVICESBYSEMANTICSCBA, ByVal pvRef As LongPtr, ByVal dwFlags As DIEDBSFLFLAGS)
    ' #End If
    Sub ConfigureDevices(ByVal lpdiCallback As LongPtr, ByRef lpdiCDParams As DICONFIGUREDEVICESPARAMSA, ByVal dwFlags As Long, ByVal pvRefData As LongPtr)
End Interface
[InterfaceId("BF798031-483A-4DA2-AA99-5D64ED369700")]
[OleAutomation(False)]
Interface IDirectInput8 Extends IUnknown
    Sub CreateDevice(ByRef rguid As GUID, ByRef lplpDirectInputDevice As IDirectInputDevice8, ByVal pUnkOuter As LongPtr)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumDevices(ByVal dwDevType As Long, ByVal lpCallback As LongPtr, ByVal pvRef As LongPtr, ByVal dwFlags As DIENUMDEVICESFLAGS)
    ' #Else
    ' Sub EnumDevices(ByVal dwDevType As Long, ByVal lpCallback As DIENUMDEVICESCALLBACK, ByVal pvRef As LongPtr, ByVal dwFlags As DIENUMDEVICESFLAGS)
    ' #End If
    Sub GetDeviceStatus(ByRef rguidInstance As GUID)
    Sub RunControlPanel(ByVal hwndOwner As LongPtr, ByVal dwFlags As Long)
    Sub Initialize(ByVal hinst As LongPtr, ByVal dwVersion As Long)
    Sub FindDevice(ByRef rguidClass As GUID, ByVal ptszName As LongPtr, ByRef pguidInstance As GUID)
    ' #If WDL_NO_DELEGATES Then
    Sub EnumDevicesBySemantics(ByVal ptszUserName As LongPtr, ByRef lpdiActionFormat As DIACTIONFORMAT, ByVal lpCallback As LongPtr, ByVal pvRef As LongPtr, ByVal dwFlags As DIEDBSFLFLAGS)
    ' #Else
    ' Sub EnumDevicesBySemantics(ByVal ptszUserName As LongPtr, ByRef lpdiActionFormat As DIACTIONFORMAT, ByVal lpCallback As DIENUMDEVICESBYSEMANTICSCB, ByVal pvRef As LongPtr, ByVal dwFlags As DIEDBSFLFLAGS)
    ' #End If
    Sub ConfigureDevices(ByVal lpdiCallback As LongPtr, ByRef lpdiCDParams As DICONFIGUREDEVICESPARAMS, ByVal dwFlags As Long, ByVal pvRefData As LongPtr)
End Interface
Module wdDirectInput

Public Const DIRECTINPUT_HEADER_VERSION  = &H0800
Public Const DIRECTINPUT_VERSION  = DIRECTINPUT_HEADER_VERSION

Public Function CLSID_DirectInput() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H25E609E0, &HB259, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
CLSID_DirectInput = iid
End Function
Public Function CLSID_DirectInputDevice() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H25E609E1, &HB259, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
CLSID_DirectInputDevice = iid
End Function
Public Function CLSID_DirectInput8() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H25E609E4, &HB259, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
CLSID_DirectInput8 = iid
End Function
Public Function CLSID_DirectInputDevice8() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H25E609E5, &HB259, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
CLSID_DirectInputDevice8 = iid
End Function
Public Function IID_IDirectInputA() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H89521360, &HAA8A, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
IID_IDirectInputA = iid
End Function
Public Function IID_IDirectInputW() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H89521361, &HAA8A, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
IID_IDirectInputW = iid
End Function
Public Function IID_IDirectInput2A() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5944E662, &HAA8A, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
IID_IDirectInput2A = iid
End Function
Public Function IID_IDirectInput2W() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5944E663, &HAA8A, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
IID_IDirectInput2W = iid
End Function
Public Function IID_IDirectInput7A() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9A4CB684, &H236D, &H11D3, &H8E, &H9D, &H00, &HC0, &H4F, &H68, &H44, &HAE)
IID_IDirectInput7A = iid
End Function
Public Function IID_IDirectInput7W() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9A4CB685, &H236D, &H11D3, &H8E, &H9D, &H00, &HC0, &H4F, &H68, &H44, &HAE)
IID_IDirectInput7W = iid
End Function
Public Function IID_IDirectInput8A() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBF798030, &H483A, &H4DA2, &HAA, &H99, &H5D, &H64, &HED, &H36, &H97, &H00)
IID_IDirectInput8A = iid
End Function
Public Function IID_IDirectInput8W() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBF798031, &H483A, &H4DA2, &HAA, &H99, &H5D, &H64, &HED, &H36, &H97, &H00)
IID_IDirectInput8W = iid
End Function
Public Function IID_IDirectInputDeviceA() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5944E680, &HC92E, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
IID_IDirectInputDeviceA = iid
End Function
Public Function IID_IDirectInputDeviceW() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5944E681, &HC92E, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
IID_IDirectInputDeviceW = iid
End Function
Public Function IID_IDirectInputDevice2A() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5944E682, &HC92E, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
IID_IDirectInputDevice2A = iid
End Function
Public Function IID_IDirectInputDevice2W() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5944E683, &HC92E, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
IID_IDirectInputDevice2W = iid
End Function
Public Function IID_IDirectInputDevice7A() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57D7C6BC, &H2356, &H11D3, &H8E, &H9D, &H00, &HC0, &H4F, &H68, &H44, &HAE)
IID_IDirectInputDevice7A = iid
End Function
Public Function IID_IDirectInputDevice7W() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57D7C6BD, &H2356, &H11D3, &H8E, &H9D, &H00, &HC0, &H4F, &H68, &H44, &HAE)
IID_IDirectInputDevice7W = iid
End Function
Public Function IID_IDirectInputDevice8A() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H54D41080, &HDC15, &H4833, &HA4, &H1B, &H74, &H8F, &H73, &HA3, &H81, &H79)
IID_IDirectInputDevice8A = iid
End Function
Public Function IID_IDirectInputDevice8W() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H54D41081, &HDC15, &H4833, &HA4, &H1B, &H74, &H8F, &H73, &HA3, &H81, &H79)
IID_IDirectInputDevice8W = iid
End Function
Public Function IID_IDirectInputEffect() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE7E1F7C0, &H88D2, &H11D0, &H9A, &HD0, &H00, &HA0, &HC9, &HA0, &H6E, &H35)
IID_IDirectInputEffect = iid
End Function
Public Function GUID_XAxis() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA36D02E0, &HC9F3, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
GUID_XAxis = iid
End Function
Public Function GUID_YAxis() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA36D02E1, &HC9F3, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
GUID_YAxis = iid
End Function
Public Function GUID_ZAxis() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA36D02E2, &HC9F3, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
GUID_ZAxis = iid
End Function
Public Function GUID_RxAxis() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA36D02F4, &HC9F3, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
GUID_RxAxis = iid
End Function
Public Function GUID_RyAxis() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA36D02F5, &HC9F3, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
GUID_RyAxis = iid
End Function
Public Function GUID_RzAxis() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA36D02E3, &HC9F3, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
GUID_RzAxis = iid
End Function
Public Function GUID_Slider() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA36D02E4, &HC9F3, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
GUID_Slider = iid
End Function
Public Function GUID_Button() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA36D02F0, &HC9F3, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
GUID_Button = iid
End Function
Public Function GUID_Key() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H55728220, &HD33C, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
GUID_Key = iid
End Function
Public Function GUID_POV() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA36D02F2, &HC9F3, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
GUID_POV = iid
End Function
Public Function GUID_Unknown() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA36D02F3, &HC9F3, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
GUID_Unknown = iid
End Function
Public Function GUID_SysMouse() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6F1D2B60, &HD5A0, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
GUID_SysMouse = iid
End Function
Public Function GUID_SysKeyboard() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6F1D2B61, &HD5A0, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
GUID_SysKeyboard = iid
End Function
Public Function GUID_Joystick() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6F1D2B70, &HD5A0, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
GUID_Joystick = iid
End Function
Public Function GUID_SysMouseEm() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6F1D2B80, &HD5A0, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
GUID_SysMouseEm = iid
End Function
Public Function GUID_SysMouseEm2() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6F1D2B81, &HD5A0, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
GUID_SysMouseEm2 = iid
End Function
Public Function GUID_SysKeyboardEm() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6F1D2B82, &HD5A0, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
GUID_SysKeyboardEm = iid
End Function
Public Function GUID_SysKeyboardEm2() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6F1D2B83, &HD5A0, &H11CF, &HBF, &HC7, &H44, &H45, &H53, &H54, &H00, &H00)
GUID_SysKeyboardEm2 = iid
End Function
Public Function GUID_ConstantForce() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H13541C20, &H8E33, &H11D0, &H9A, &HD0, &H00, &HA0, &HC9, &HA0, &H6E, &H35)
GUID_ConstantForce = iid
End Function
Public Function GUID_RampForce() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H13541C21, &H8E33, &H11D0, &H9A, &HD0, &H00, &HA0, &HC9, &HA0, &H6E, &H35)
GUID_RampForce = iid
End Function
Public Function GUID_Square() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H13541C22, &H8E33, &H11D0, &H9A, &HD0, &H00, &HA0, &HC9, &HA0, &H6E, &H35)
GUID_Square = iid
End Function
Public Function GUID_Sine() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H13541C23, &H8E33, &H11D0, &H9A, &HD0, &H00, &HA0, &HC9, &HA0, &H6E, &H35)
GUID_Sine = iid
End Function
Public Function GUID_Triangle() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H13541C24, &H8E33, &H11D0, &H9A, &HD0, &H00, &HA0, &HC9, &HA0, &H6E, &H35)
GUID_Triangle = iid
End Function
Public Function GUID_SawtoothUp() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H13541C25, &H8E33, &H11D0, &H9A, &HD0, &H00, &HA0, &HC9, &HA0, &H6E, &H35)
GUID_SawtoothUp = iid
End Function
Public Function GUID_SawtoothDown() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H13541C26, &H8E33, &H11D0, &H9A, &HD0, &H00, &HA0, &HC9, &HA0, &H6E, &H35)
GUID_SawtoothDown = iid
End Function
Public Function GUID_Spring() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H13541C27, &H8E33, &H11D0, &H9A, &HD0, &H00, &HA0, &HC9, &HA0, &H6E, &H35)
GUID_Spring = iid
End Function
Public Function GUID_Damper() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H13541C28, &H8E33, &H11D0, &H9A, &HD0, &H00, &HA0, &HC9, &HA0, &H6E, &H35)
GUID_Damper = iid
End Function
Public Function GUID_Inertia() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H13541C29, &H8E33, &H11D0, &H9A, &HD0, &H00, &HA0, &HC9, &HA0, &H6E, &H35)
GUID_Inertia = iid
End Function
Public Function GUID_Friction() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H13541C2A, &H8E33, &H11D0, &H9A, &HD0, &H00, &HA0, &HC9, &HA0, &H6E, &H35)
GUID_Friction = iid
End Function
Public Function GUID_CustomForce() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H13541C2B, &H8E33, &H11D0, &H9A, &HD0, &H00, &HA0, &HC9, &HA0, &H6E, &H35)
GUID_CustomForce = iid
End Function
    
Public Enum DIEFTFLAGS
    DIEFT_ALL = &H00000000
    DIEFT_CONSTANTFORCE = &H00000001
    DIEFT_RAMPFORCE = &H00000002
    DIEFT_PERIODIC = &H00000003
    DIEFT_CONDITION = &H00000004
    DIEFT_CUSTOMFORCE = &H00000005
    DIEFT_HARDWARE = &H000000FF
    DIEFT_FFATTACK = &H00000200
    DIEFT_FFFADE = &H00000400
    DIEFT_SATURATION = &H00000800
    DIEFT_POSNEGCOEFFICIENTS = &H00001000
    DIEFT_POSNEGSATURATION = &H00002000
    DIEFT_DEADBAND = &H00004000
    DIEFT_STARTDELAY = &H00008000&
End Enum
Public Function DIEFT_GETTYPE(ByVal n As Integer) As Byte: Return LOBYTE(n): End Function

Public Enum CONST_DINPUT
    DIPROPRANGE_NOMIN = (&H80000000)
    DIPROPRANGE_NOMAX = (&H7FFFFFFF)
    DI_DEGREES = 100
    DI_FFNOMINALMAX = 10000
    DI_SECONDS = 1000000
    DIPROPAXISMODE_ABS = 0
    DIPROPAXISMODE_REL = 1
    DIPROPAUTOCENTER_OFF = 0
    DIPROPAUTOCENTER_ON = 1
    DIPROPCALIBRATIONMODE_COOKED = 0
    DIPROPCALIBRATIONMODE_RAW = 1
    MAXCPOINTSNUM = 8
End Enum

Public Type DICONSTANTFORCE
    lMagnitude As Long
End Type
Public Type DIRAMPFORCE
    lStart As Long
    lEnd As Long
End Type

Public Type DIPERIODIC
    dwMagnitude As Long
    lOffset As Long
    dwPhase As Long
    dwPeriod As Long
End Type

Public Type DICONDITION
    lOffset As Long
    lPositiveCoefficient As Long
    lNegativeCoefficient As Long
    dwPositiveSaturation As Long
    dwNegativeSaturation As Long
    lDeadBand As Long
End Type

Public Type DICUSTOMFORCE
    cChannels As Long
    dwSamplePeriod As Long
    cSamples As Long
    rglForceData As LongPtr 'LPLONG
End Type

Public Type DIENVELOPE
    dwSize As Long '* sizeof(DIENVELOPE)    
    dwAttackLevel As Long
    dwAttackTime As Long '* Microseconds          
    dwFadeLevel As Long
    dwFadeTime As Long '* Microseconds          
End Type

Public Type DIEFFECT_DX5
    dwSize As Long ' sizeof(DIEFFECT_DX5) */
    dwFlags As DIEFFFLAGS ' DIEFF_*              */
    dwDuration As Long ' Microseconds         */
    dwSamplePeriod As Long ' Microseconds         */
    dwGain As Long
    dwTriggerButton As Long ' or DIEB_NOTRIGGER    */
    dwTriggerRepeatInterval As Long ' Microseconds         */
    cAxes As Long ' Number of axes       */
    rgdwAxes As LongPtr ' Array of axes        */
    rglDirection As LongPtr ' Array of directions  */
    lpEnvelope As LongPtr 'LPDIENVELOPE ' Optional             */
    cbTypeSpecificParams As Long ' Size of params       */
    lpvTypeSpecificParams As LongPtr ' Pointer to params    */
    dwStartDelay As Long /* Microseconds         */
End Type
Public Type DIEFFECT
    dwSize As Long ' sizeof(DIEFFECT)     */
    dwFlags As DIEFFFLAGS ' DIEFF_*              */
    dwDuration As Long ' Microseconds         */
    dwSamplePeriod As Long ' Microseconds         */
    dwGain As Long
    dwTriggerButton As Long ' or DIEB_NOTRIGGER    */
    dwTriggerRepeatInterval As Long ' Microseconds         */
    cAxes As Long ' Number of axes       */
    rgdwAxes As LongPtr ' Array of axes        */
    rglDirection As LongPtr ' Array of directions  */
    lpEnvelope As LongPtr 'LPDIENVELOPE ' Optional             */
    cbTypeSpecificParams As Long ' Size of params       */
    lpvTypeSpecificParams As LongPtr ' Pointer to params    */
    '#if(DIRECTINPUT_VERSION >= 0x0600)
    dwStartDelay As Long ' Microseconds
    '#endif /* DIRECTINPUT_VERSION >= 0x0600 */
End Type

Public Type DIFILEEFFECT
    dwSize As Long
    GuidEffect As UUID
    lpDiEffect As LongPtr 'LPCDIEFFECT
    szFriendlyName(0 To (MAX_PATH - 1)) As Byte
End Type

Public Delegate Function DIENUMEFFECTSINFILECALLBACK (dife As DIFILEEFFECT, ByVal pvRef As LongPtr) As BOOL


Public Enum DIEFFFLAGS
    DIEFF_OBJECTIDS = &H00000001
    DIEFF_OBJECTOFFSETS = &H00000002
    DIEFF_CARTESIAN = &H00000010
    DIEFF_POLAR = &H00000020
    DIEFF_SPHERICAL = &H00000040
End Enum

Public Enum DIEPFLAGS
    DIEP_DURATION = &H00000001
    DIEP_SAMPLEPERIOD = &H00000002
    DIEP_GAIN = &H00000004
    DIEP_TRIGGERBUTTON = &H00000008
    DIEP_TRIGGERREPEATINTERVAL = &H00000010
    DIEP_AXES = &H00000020
    DIEP_DIRECTION = &H00000040
    DIEP_ENVELOPE = &H00000080
    DIEP_TYPESPECIFICPARAMS = &H00000100
' #if(DIRECTINPUT_VERSION >= 0x0600)
    DIEP_STARTDELAY = &H00000200
    DIEP_ALLPARAMS_DX5 = &H000001FF
    DIEP_ALLPARAMS = &H000003FF
' #else /* DIRECTINPUT_VERSION < 0x0600 */
    ' DIEP_ALLPARAMS = &H000001FF
' #endif /* DIRECTINPUT_VERSION < 0x0600 */
    DIEP_START = &H20000000
    DIEP_NORESTART = &H40000000
    DIEP_NODOWNLOAD = &H80000000
    DIEB_NOTRIGGER = &HFFFFFFFF
End Enum

Public Enum DIESFLAGS
    DIES_SOLO = &H00000001
    DIES_NODOWNLOAD = &H80000000
End Enum

Public Enum DIEGESFLAGS
    DIEGES_PLAYING = &H00000001
    DIEGES_EMULATED = &H00000002
End Enum

Public Type DIEFFESCAPE
    dwSize As Long
    dwCommand As Long
    lpvInBuffer As LongPtr
    cbInBuffer As Long
    lpvOutBuffer As LongPtr
    cbOutBuffer As Long
End Type

Public Enum DI8DEVICETYPE
    DI8DEVCLASS_ALL = 0
    DI8DEVCLASS_DEVICE = 1
    DI8DEVCLASS_POINTER = 2
    DI8DEVCLASS_KEYBOARD = 3
    DI8DEVCLASS_GAMECTRL = 4
    DI8DEVTYPE_DEVICE = &H11
    DI8DEVTYPE_MOUSE = &H12
    DI8DEVTYPE_KEYBOARD = &H13
    DI8DEVTYPE_JOYSTICK = &H14
    DI8DEVTYPE_GAMEPAD = &H15
    DI8DEVTYPE_DRIVING = &H16
    DI8DEVTYPE_FLIGHT = &H17
    DI8DEVTYPE_1STPERSON = &H18
    DI8DEVTYPE_DEVICECTRL = &H19
    DI8DEVTYPE_SCREENPOINTER = &H1A
    DI8DEVTYPE_REMOTE = &H1B
    DI8DEVTYPE_SUPPLEMENTAL = &H1C
    DIDEVTYPE_HID = &H00010000
End Enum
Public Enum DI8DEVICESUBTYPE
    DI8DEVTYPEMOUSE_UNKNOWN = 1
    DI8DEVTYPEMOUSE_TRADITIONAL = 2
    DI8DEVTYPEMOUSE_FINGERSTICK = 3
    DI8DEVTYPEMOUSE_TOUCHPAD = 4
    DI8DEVTYPEMOUSE_TRACKBALL = 5
    DI8DEVTYPEMOUSE_ABSOLUTE = 6
    DI8DEVTYPEKEYBOARD_UNKNOWN = 0
    DI8DEVTYPEKEYBOARD_PCXT = 1
    DI8DEVTYPEKEYBOARD_OLIVETTI = 2
    DI8DEVTYPEKEYBOARD_PCAT = 3
    DI8DEVTYPEKEYBOARD_PCENH = 4
    DI8DEVTYPEKEYBOARD_NOKIA1050 = 5
    DI8DEVTYPEKEYBOARD_NOKIA9140 = 6
    DI8DEVTYPEKEYBOARD_NEC98 = 7
    DI8DEVTYPEKEYBOARD_NEC98LAPTOP = 8
    DI8DEVTYPEKEYBOARD_NEC98106 = 9
    DI8DEVTYPEKEYBOARD_JAPAN106 = 10
    DI8DEVTYPEKEYBOARD_JAPANAX = 11
    DI8DEVTYPEKEYBOARD_J3100 = 12
    DI8DEVTYPE_LIMITEDGAMESUBTYPE = 1
    DI8DEVTYPEJOYSTICK_LIMITED = DI8DEVTYPE_LIMITEDGAMESUBTYPE
    DI8DEVTYPEJOYSTICK_STANDARD = 2
    DI8DEVTYPEGAMEPAD_LIMITED = DI8DEVTYPE_LIMITEDGAMESUBTYPE
    DI8DEVTYPEGAMEPAD_STANDARD = 2
    DI8DEVTYPEGAMEPAD_TILT = 3
    DI8DEVTYPEDRIVING_LIMITED = DI8DEVTYPE_LIMITEDGAMESUBTYPE
    DI8DEVTYPEDRIVING_COMBINEDPEDALS = 2
    DI8DEVTYPEDRIVING_DUALPEDALS = 3
    DI8DEVTYPEDRIVING_THREEPEDALS = 4
    DI8DEVTYPEDRIVING_HANDHELD = 5
    DI8DEVTYPEFLIGHT_LIMITED = DI8DEVTYPE_LIMITEDGAMESUBTYPE
    DI8DEVTYPEFLIGHT_STICK = 2
    DI8DEVTYPEFLIGHT_YOKE = 3
    DI8DEVTYPEFLIGHT_RC = 4
    DI8DEVTYPE1STPERSON_LIMITED = DI8DEVTYPE_LIMITEDGAMESUBTYPE
    DI8DEVTYPE1STPERSON_UNKNOWN = 2
    DI8DEVTYPE1STPERSON_SIXDOF = 3
    DI8DEVTYPE1STPERSON_SHOOTER = 4
    DI8DEVTYPESCREENPTR_UNKNOWN = 2
    DI8DEVTYPESCREENPTR_LIGHTGUN = 3
    DI8DEVTYPESCREENPTR_LIGHTPEN = 4
    DI8DEVTYPESCREENPTR_TOUCH = 5
    DI8DEVTYPEREMOTE_UNKNOWN = 2
    DI8DEVTYPEDEVICECTRL_UNKNOWN = 2
    DI8DEVTYPEDEVICECTRL_COMMSSELECTION = 3
    DI8DEVTYPEDEVICECTRL_COMMSSELECTION_HARDWIRED = 4
    DI8DEVTYPESUPPLEMENTAL_UNKNOWN = 2
    DI8DEVTYPESUPPLEMENTAL_2NDHANDCONTROLLER = 3
    DI8DEVTYPESUPPLEMENTAL_HEADTRACKER = 4
    DI8DEVTYPESUPPLEMENTAL_HANDTRACKER = 5
    DI8DEVTYPESUPPLEMENTAL_SHIFTSTICKGATE = 6
    DI8DEVTYPESUPPLEMENTAL_SHIFTER = 7
    DI8DEVTYPESUPPLEMENTAL_THROTTLE = 8
    DI8DEVTYPESUPPLEMENTAL_SPLITTHROTTLE = 9
    DI8DEVTYPESUPPLEMENTAL_COMBINEDPEDALS = 10
    DI8DEVTYPESUPPLEMENTAL_DUALPEDALS = 11
    DI8DEVTYPESUPPLEMENTAL_THREEPEDALS = 12
    DI8DEVTYPESUPPLEMENTAL_RUDDERPEDALS = 13
End Enum

[IgnoreWarnings(TB0021)]
Public Function GET_DIDEVICE_TYPE(ByVal dwDevType As Integer) As DI8DEVICETYPE: Return LOBYTE(dwDevType): End Function
[IgnoreWarnings(TB0021)]
Public Function GET_DIDEVICE_SUBTYPE(ByVal dwDevType As Integer) As DI8DEVICESUBTYPE: Return HIBYTE(dwDevType): End Function
    
Public Type DIDEVCAPS_DX3
    dwSize As Long
    dwFlags As Long
    dwDevType As Long
    dwAxes As Long
    dwButtons As Long
    dwPOVs As Long
End Type
    
Public Type DIDEVCAPS
    dwSize As Long
    dwFlags As DIDEVCAPSFLAGS
    dwDevType As Long
    dwAxes As Long
    dwButtons As Long
    dwPOVs As Long
    '#if(DIRECTINPUT_VERSION >= 0x0500)
    dwFFSamplePeriod As Long
    dwFFMinTimeResolution As Long
    dwFirmwareRevision As Long
    dwHardwareRevision As Long
    dwFFDriverVersion As Long
    '#endif /* DIRECTINPUT_VERSION >= 0x0500 */
End Type

Public Enum DIDEVCAPSFLAGS
    DIDC_POLLEDDEVICE = &H00000002
    DIDC_EMULATED = &H00000004
    DIDC_POLLEDDATAFORMAT = &H00000008
' #if(DIRECTINPUT_VERSION >= 0x0500)
    DIDC_FORCEFEEDBACK = &H00000100
    DIDC_FFATTACK = &H00000200
    DIDC_FFFADE = &H00000400
    DIDC_SATURATION = &H00000800
    DIDC_POSNEGCOEFFICIENTS = &H00001000
    DIDC_POSNEGSATURATION = &H00002000
    DIDC_DEADBAND = &H00004000
' #endif /* DIRECTINPUT_VERSION >= 0x0500 */
    DIDC_STARTDELAY = &H00008000&
' #if(DIRECTINPUT_VERSION >= 0x050a)
    DIDC_ALIAS = &H00010000
    DIDC_PHANTOM = &H00020000
' #endif /* DIRECTINPUT_VERSION >= 0x050a */
' #if(DIRECTINPUT_VERSION >= 0x0800)
    DIDC_HIDDEN = &H00040000
    
    'Undocumented:
    DIDC_FFFLAGS = &H0000FF00&
    /*
    * Flags in the upper word mark devices normally excluded from enumeration.
    * To force enumeration of the device, you must pass the appropriate
    * DIEDFL_* flag.
    */
    DIDC_EXCLUDEMASK = &H00FF0000
    DIDC_RANDOM = &H80000000  '
End Enum

Public Enum DIDFTFLAGS
    DIDFT_ALL = &H00000000
    DIDFT_RELAXIS = &H00000001
    DIDFT_ABSAXIS = &H00000002
    DIDFT_AXIS = &H00000003
    DIDFT_PSHBUTTON = &H00000004
    DIDFT_TGLBUTTON = &H00000008
    DIDFT_BUTTON = &H0000000C
    DIDFT_POV = &H00000010
    DIDFT_COLLECTION = &H00000040
    DIDFT_NODATA = &H00000080
    DIDFT_ANYINSTANCE = &H00FFFF00
    DIDFT_FFACTUATOR = &H01000000
    DIDFT_FFEFFECTTRIGGER = &H02000000
' #if(DIRECTINPUT_VERSION >= 0x050a)
    DIDFT_OUTPUT = &H10000000
    DIDFT_VENDORDEFINED = &H04000000
    DIDFT_ALIAS = &H08000000
    DIDFT_OPTIONAL = &H80000000
    DIDFT_NOCOLLECTION = &H00FFFF00
    DIDFT_INSTANCEMASK = DIDFT_ANYINSTANCE
    
 
    DIDFT_BESTFIT = &H40000000  '
    DIDFT_RANDOM = &H20000000  '
End Enum

Public Function DIDFT_MAKEINSTANCE(ByVal n As Long) As Integer
    Return CInt(n) << 8
End Function

[IgnoreWarnings(TB0018)]
Public Function DIDFT_GETTYPE(ByVal n As Long) As Byte
    Return n And &HFF
End Function

Public Function DIDFT_GETINSTANCE(ByVal n As Long) As Integer
    Return CInt(n >> 8) And &HFFFF
End Function

Public Function DIDFT_ENUMCOLLECTION(ByVal n As Long) As Integer
    Return CInt(n) << 8
End Function

Public Type DIOBJECTDATAFORMAT
    pguid As LongPtr 'UUID*
    dwOfs As Long
    dwType As Long
    dwFlags As Long
End Type
Public Type DIDATAFORMAT
    dwSize As Long
    dwObjSize As Long
    dwFlags As Long
    dwDataSize As Long
    dwNumObjs As Long
    rgodf As LongPtr 'LPDIOBJECTDATAFORMAT
End Type

Public Enum DIDATAFORMATFLAGS
    DIDF_ABSAXIS = &H00000001
    DIDF_RELAXIS = &H00000002
End Enum

' extern const DIDATAFORMAT c_dfDIMouse;

' #if(DIRECTINPUT_VERSION >= 0x0700)
' extern const DIDATAFORMAT c_dfDIMouse2;
' #endif /* DIRECTINPUT_VERSION >= 0x0700 */

' extern const DIDATAFORMAT c_dfDIKeyboard;

' #if(DIRECTINPUT_VERSION >= 0x0500)
' extern const DIDATAFORMAT c_dfDIJoystick;
Public Declare PtrSafe Function GetdfDIJoystick Lib "dinput8.dll" () As LongPtr
' extern const DIDATAFORMAT c_dfDIJoystick2;

Public Type DIACTIONA
    uAppData As LongPtr
    dwSemantic As Long
    dwFlags As Long
    'union {
    '           LPCSTR     lptszActionName;
    '           UINT        uResIdString;
    '       };
    lptszActionName_uResIdString As LongPtr
    guidInstance As UUID
    dwObjID As Long
    dwHow As Long
End Type
Public Type DIACTIONW
    uAppData As LongPtr
    dwSemantic As Long
    dwFlags As Long
    'union {
    '           LPCWSTR     lptszActionName;
    '           UINT        uResIdString;
    '       };
    lptszActionName_uResIdString As LongPtr
    guidInstance As UUID
    dwObjID As Long
    dwHow As Long
End Type
'Alias DIACTION As DIACTIONW
Public Type DIACTION
    uAppData As LongPtr
    dwSemantic As Long
    dwFlags As Long
    'union {
    '           LPCWSTR     lptszActionName;
    '           UINT        uResIdString;
    '       };
    lptszActionName_uResIdString As LongPtr
    guidInstance As UUID
    dwObjID As Long
    dwHow As Long
End Type

Public Enum DIAFLAGS
    DIA_FORCEFEEDBACK = &H00000001
    DIA_APPMAPPED = &H00000002
    DIA_APPNOMAP = &H00000004
    DIA_NORANGE = &H00000008
    DIA_APPFIXED = &H00000010
End Enum

Public Enum DIAHFLAGS
    DIAH_UNMAPPED = &H00000000
    DIAH_USERCONFIG = &H00000001
    DIAH_APPREQUESTED = &H00000002
    DIAH_HWAPP = &H00000004
    DIAH_HWDEFAULT = &H00000008
    DIAH_DEFAULT = &H00000020
    DIAH_ERROR = &H80000000
End Enum

Public Type DIACTIONFORMATA
    dwSize As Long
    dwActionSize As Long
    dwDataSize As Long
    dwNumActions As Long
    rgoAction As LongPtr 'LPDIACTIONA
    guidActionMap As UUID
    dwGenre As Long
    dwBufferSize As Long
    lAxisMin As Long
    lAxisMax As Long
    hInstString As LongPtr
    ftTimeStamp As FILETIME
    dwCRC As Long
    tszActionMap(0 To (MAX_PATH - 1)) As Byte
End Type
Public Type DIACTIONFORMATW
    dwSize As Long
    dwActionSize As Long
    dwDataSize As Long
    dwNumActions As Long
    rgoAction As LongPtr 'LPDIACTIONW
    guidActionMap As UUID
    dwGenre As Long
    dwBufferSize As Long
    lAxisMin As Long
    lAxisMax As Long
    hInstString As LongPtr
    ftTimeStamp As FILETIME
    dwCRC As Long
    tszActionMap(0 To (MAX_PATH - 1)) As Integer
End Type
'Alias DIACTIONFORMAT As DIACTIONFORMATW
Public Type DIACTIONFORMAT
    dwSize As Long
    dwActionSize As Long
    dwDataSize As Long
    dwNumActions As Long
    rgoAction As LongPtr 'LPDIACTIONW
    guidActionMap As UUID
    dwGenre As Long
    dwBufferSize As Long
    lAxisMin As Long
    lAxisMax As Long
    hInstString As LongPtr
    ftTimeStamp As FILETIME
    dwCRC As Long
    tszActionMap(0 To (MAX_PATH - 1)) As Integer
End Type

Public Enum DIAFTSFLAGS
    DIAFTS_NEWDEVICELOW = &HFFFFFFFF
    DIAFTS_NEWDEVICEHIGH = &HFFFFFFFF
    DIAFTS_UNUSEDDEVICELOW = &H00000000
    DIAFTS_UNUSEDDEVICEHIGH = &H00000000
End Enum

Public Enum DIDBAMFLAGS
    DIDBAM_DEFAULT = &H00000000
    DIDBAM_PRESERVE = &H00000001
    DIDBAM_INITIALIZE = &H00000002
    DIDBAM_HWDEFAULTS = &H00000004
End Enum

Public Enum DIDSAMFLAGS
    DIDSAM_DEFAULT = &H00000000
    DIDSAM_NOUSER = &H00000001
    DIDSAM_FORCESAVE = &H00000002
End Enum

Public Enum DICDFLAGS
    DICD_DEFAULT = &H00000000
    DICD_EDIT = &H00000001
End Enum

Public Type DICOLORSET
    dwSize As Long
    cTextFore As D3DCOLOR
    cTextHighlight As D3DCOLOR
    cCalloutLine As D3DCOLOR
    cCalloutHighlight As D3DCOLOR
    cBorder As D3DCOLOR
    cControlFill As D3DCOLOR
    cHighlightFill As D3DCOLOR
    cAreaFill As D3DCOLOR
End Type

Public Type DICONFIGUREDEVICESPARAMSA
    dwSize As Long
    dwcUsers As Long
    lptszUserNames As String
    dwcFormats As Long
    lprgFormats As LongPtr 'LPDIACTIONFORMATA
    hwnd As LongPtr
    dics As DICOLORSET
    lpUnkDDSTarget As IUnknown
End Type
Public Type DICONFIGUREDEVICESPARAMSW
    dwSize As Long
    dwcUsers As Long
    lptszUserNames As LongPtr
    dwcFormats As Long
    lprgFormats As LongPtr 'LPDIACTIONFORMATW
    hwnd As LongPtr
    dics As DICOLORSET
    lpUnkDDSTarget As IUnknown
End Type
'Alias DICONFIGUREDEVICESPARAMS As DICONFIGUREDEVICESPARAMSW
Public Type DICONFIGUREDEVICESPARAMS
    dwSize As Long
    dwcUsers As Long
    lptszUserNames As LongPtr
    dwcFormats As Long
    lprgFormats As LongPtr 'LPDIACTIONFORMATW
    hwnd As LongPtr
    dics As DICOLORSET
    lpUnkDDSTarget As IUnknown
End Type

Public Enum DIDIFTFLAGS
    DIDIFT_CONFIGURATION = &H00000001
    DIDIFT_OVERLAY = &H00000002
End Enum

Public Enum DIDALFLAGS
    DIDAL_CENTERED = &H00000000
    DIDAL_LEFTALIGNED = &H00000001
    DIDAL_RIGHTALIGNED = &H00000002
    DIDAL_MIDDLE = &H00000000
    DIDAL_TOPALIGNED = &H00000004
    DIDAL_BOTTOMALIGNED = &H00000008
End Enum

Public Type DIDEVICEIMAGEINFOA
    tszImagePath(0 To (MAX_PATH - 1)) As Byte
    dwFlags As DIDIFTFLAGS
    ' These are valid if DIDIFT_OVERLAY is present in dwFlags.
    dwViewID As Long
    rcOverlay As RECT
    dwObjID As Long
    dwcValidPts As Long
    rgptCalloutLine(0 To 4) As POINT
    rcCalloutRect As RECT
    dwTextAlign As DIDALFLAGS
End Type
Public Type DIDEVICEIMAGEINFOW
    tszImagePath(0 To (MAX_PATH - 1)) As Integer
    dwFlags As DIDIFTFLAGS
    ' These are valid if DIDIFT_OVERLAY is present in dwFlags.
    dwViewID As Long
    rcOverlay As RECT
    dwObjID As Long
    dwcValidPts As Long
    rgptCalloutLine(0 To 4) As POINT
    rcCalloutRect As RECT
    dwTextAlign As DIDALFLAGS
End Type
'Alias DIDEVICEIMAGEINFO As DIDEVICEIMAGEINFOW
Public Type DIDEVICEIMAGEINFO
    tszImagePath(0 To (MAX_PATH - 1)) As Integer
    dwFlags As DIDIFTFLAGS
    ' These are valid if DIDIFT_OVERLAY is present in dwFlags.
    dwViewID As Long
    rcOverlay As RECT
    dwObjID As Long
    dwcValidPts As Long
    rgptCalloutLine(0 To 4) As POINT
    rcCalloutRect As RECT
    dwTextAlign As DIDALFLAGS
End Type

Public Type DIDEVICEIMAGEINFOHEADERA
    dwSize As Long
    dwSizeImageInfo As Long
    dwcViews As Long
    dwcButtons As Long
    dwcAxes As Long
    dwcPOVs As Long
    dwBufferSize As Long
    dwBufferUsed As Long
    lprgImageInfoArray As LongPtr 'LPDIDEVICEIMAGEINFOA
End Type
Public Type DIDEVICEIMAGEINFOHEADERW
    dwSize As Long
    dwSizeImageInfo As Long
    dwcViews As Long
    dwcButtons As Long
    dwcAxes As Long
    dwcPOVs As Long
    dwBufferSize As Long
    dwBufferUsed As Long
    lprgImageInfoArray As LongPtr 'LPDIDEVICEIMAGEINFOW
End Type
'Alias DIDEVICEIMAGEINFOHEADER As DIDEVICEIMAGEINFOHEADERW
Public Type DIDEVICEIMAGEINFOHEADER
    dwSize As Long
    dwSizeImageInfo As Long
    dwcViews As Long
    dwcButtons As Long
    dwcAxes As Long
    dwcPOVs As Long
    dwBufferSize As Long
    dwBufferUsed As Long
    lprgImageInfoArray As LongPtr 'LPDIDEVICEIMAGEINFOW
End Type

Public Type DIDEVICEOBJECTINSTANCE_DX3A
    dwSize As Long
    guidType As UUID
    dwOfs As Long
    dwType As Long
    dwFlags As Long
    tszName(0 To (MAX_PATH - 1)) As Byte
End Type
Public Type DIDEVICEOBJECTINSTANCE_DX3W
    dwSize As Long
    guidType As UUID
    dwOfs As Long
    dwType As Long
    dwFlags As Long
    tszName(0 To (MAX_PATH - 1)) As Integer
End Type
'Alias DIDEVICEOBJECTINSTANCE_DX3 As DIDEVICEOBJECTINSTANCE_DX3W
Public Type DIDEVICEOBJECTINSTANCE_DX3
    dwSize As Long
    guidType As UUID
    dwOfs As Long
    dwType As Long
    dwFlags As Long
    tszName(0 To (MAX_PATH - 1)) As Integer
End Type

Public Type DIDEVICEOBJECTINSTANCEA
    dwSize As Long
    guidType As UUID
    dwOfs As Long
    dwType As Long
    dwFlags As DIDEVICEOBJINSTANCEFLAGS
    tszName(0 To (MAX_PATH - 1)) As Byte
    '#if(DIRECTINPUT_VERSION >= 0x0500)
    dwFFMaxForce As Long
    dwFFForceResolution As Long
    wCollectionNumber As Integer
    wDesignatorIndex As Integer
    wUsagePage As Integer
    wUsage As Integer
    dwDimension As Long
    wExponent As Integer
    wReportId As Integer
    '#endif /* DIRECTINPUT_VERSION >= 0x0500 */
End Type
Public Type DIDEVICEOBJECTINSTANCEW
    dwSize As Long
    guidType As UUID
    dwOfs As Long
    dwType As Long
    dwFlags As DIDEVICEOBJINSTANCEFLAGS
    tszName(0 To (MAX_PATH - 1)) As Integer
    '#if(DIRECTINPUT_VERSION >= 0x0500)
    dwFFMaxForce As Long
    dwFFForceResolution As Long
    wCollectionNumber As Integer
    wDesignatorIndex As Integer
    wUsagePage As Integer
    wUsage As Integer
    dwDimension As Long
    wExponent As Integer
    wReportId As Integer
    '#endif /* DIRECTINPUT_VERSION >= 0x0500 */
End Type
'Alias DIDEVICEOBJECTINSTANCE As DIDEVICEOBJECTINSTANCEW
Public Type DIDEVICEOBJECTINSTANCE
    dwSize As Long
    guidType As UUID
    dwOfs As Long
    dwType As Long
    dwFlags As DIDEVICEOBJINSTANCEFLAGS
    tszName(0 To (MAX_PATH - 1)) As Integer
    '#if(DIRECTINPUT_VERSION >= 0x0500)
    dwFFMaxForce As Long
    dwFFForceResolution As Long
    wCollectionNumber As Integer
    wDesignatorIndex As Integer
    wUsagePage As Integer
    wUsage As Integer
    dwDimension As Long
    wExponent As Integer
    wReportId As Integer
    '#endif /* DIRECTINPUT_VERSION >= 0x0500 */
End Type

Public Delegate Function DIENUMDEVICEOBJECTSCALLBACKA (lpdidoInst As DIDEVICEOBJECTINSTANCEA, ByVal Context As LongPtr) As BOOL
Public Delegate Function DIENUMDEVICEOBJECTSCALLBACKW (lpdidoInst As DIDEVICEOBJECTINSTANCEW, ByVal Context As LongPtr) As BOOL
Public Delegate Function DIENUMDEVICEOBJECTSCALLBACK (lpdidoInst As DIDEVICEOBJECTINSTANCE, ByVal Context As LongPtr) As BOOL


Public Enum DIDEVICEOBJINSTANCEFLAGS
    DIDOI_FFACTUATOR = &H00000001
    DIDOI_FFEFFECTTRIGGER = &H00000002
    DIDOI_POLLED = &H00008000&
    DIDOI_ASPECTPOSITION = &H00000100
    DIDOI_ASPECTVELOCITY = &H00000200
    DIDOI_ASPECTACCEL = &H00000300
    DIDOI_ASPECTFORCE = &H00000400
    DIDOI_ASPECTMASK = &H00000F00
' #endif /* DIRECTINPUT_VERSION >= 0x0500 */
' #if(DIRECTINPUT_VERSION >= 0x050a)
    DIDOI_GUIDISUSAGE = &H00010000
    'Undocumented:
    DIDOI_NOTINPUT = &H80000000
    DIDOI_ASPECTUNKNOWN = &H00000000
    DIDOI_RANDOM = &H80000000
End Enum

Public Type DIPROPHEADER
    dwSize As Long
    dwHeaderSize As Long
    dwObj As Long
    dwHow As DIPHFLAGS
End Type

Public Enum DIPHFLAGS
    DIPH_DEVICE = 0
    DIPH_BYOFFSET = 1
    DIPH_BYID = 2
    
' #if(DIRECTINPUT_VERSION >= 0x050a)
    DIPH_BYUSAGE = 3
End Enum

Public Function DIMAKEUSAGEDWORD(ByVal Usage As Integer, ByVal UsagePage As Integer) As Long: Return MAKELONG(Usage, UsagePage): End Function

Public Type DIPROPDWORD
    diph As DIPROPHEADER
    dwData As Long
End Type
    
Public Type DIPROPPOINTER
    diph As DIPROPHEADER
    uData As LongPtr
End Type

Public Type DIPROPRANGE
    diph As DIPROPHEADER
    lMin As Long
    lMax As Long
End Type

Public Type DIPROPCAL
    diph As DIPROPHEADER
    lMin As Long
    lCenter As Long
    lMax As Long
End Type

Public Type DIPROPCALPOV
    diph As DIPROPHEADER
    lMin(0 To 4) As Long
    lMax(0 To 4) As Long
End Type

Public Type DIPROPGUIDANDPATH
    diph As DIPROPHEADER
    guidClass As UUID
    wszPath(0 To (MAX_PATH - 1)) As Integer
End Type

Public Type DIPROPSTRING
    diph As DIPROPHEADER
    wsz(0 To (MAX_PATH - 1)) As Integer
End Type
    
Public Type CPOINT
    lP As Long ' raw value
    dwLog As Long ' logical_value / max_logical_value * 10000
End Type

Public Type DIPROPCPOINTS
    diph As DIPROPHEADER
    dwCPointsNum As Long
    cp(0 To (MAXCPOINTSNUM - 1)) As CPOINT
End Type

' #define MAKEDIPROP(prop)    (*(const GUID *)(prop))
' #else
' #define MAKEDIPROP(prop)    ((REFGUID)(prop))
' #endif

' #define DIPROP_BUFFERSIZE       MAKEDIPROP(1)
Public Enum DInputPropIDs
    DIPROP_BUFFERSIZE = 1
    DIPROP_AXISMODE = 2
    DIPROP_GRANULARITY = 3
    DIPROP_RANGE = 4
    DIPROP_DEADZONE = 5
    DIPROP_SATURATION = 6
    DIPROP_FFGAIN = 7
    DIPROP_FFLOAD = 8
    DIPROP_AUTOCENTER = 9
    DIPROP_CALIBRATIONMODE = 10
    DIPROP_CALIBRATION = 11
    DIPROP_GUIDANDPATH = 12
    DIPROP_INSTANCENAME = 13
    DIPROP_PRODUCTNAME = 14
    DIPROP_JOYSTICKID = 15
    DIPROP_GETPORTDISPLAYNAME = 16
    DIPROP_PHYSICALRANGE = 18
    DIPROP_LOGICALRANGE = 19
    DIPROP_KEYNAME = 20
    DIPROP_CPOINTS = 21
    DIPROP_APPDATA = 22
    DIPROP_SCANCODE = 23
    DIPROP_VIDPID = 24
    DIPROP_USERNAME = 25
    DIPROP_TYPENAME = 26
End Enum

Public Type DIDEVICEOBJECTDATA_DX3
    dwOfs As Long
    dwData As Long
    dwTimeStamp As Long
    dwSequence As Long
End Type

Public Type DIDEVICEOBJECTDATA
    dwOfs As Long
    dwData As Long
    dwTimeStamp As Long
    dwSequence As Long
    '#if(DIRECTINPUT_VERSION >= 0x0800)
    uAppData As LongPtr
    '#endif /* DIRECTINPUT_VERSION >= 0x0800 */
End Type

Public Enum DIDGDDFLAGS
    DIGDD_DEFAULT = 0
    DIGDD_PEEK = 1
    DIGDD_RESIDUAL = 2 'Undocumented
    DIGDD_VALID = 3 'Undocumented
End Enum
' #define DISEQUENCE_COMPARE(dwSequence1, cmp, dwSequence2) \
' ((int)((dwSequence1) - (dwSequence2)) cmp 0)
Public Enum DISCLFLAGS
    DISCL_EXCLUSIVE = &H00000001
    DISCL_NONEXCLUSIVE = &H00000002
    DISCL_FOREGROUND = &H00000004
    DISCL_BACKGROUND = &H00000008
    DISCL_NOWINKEY = &H00000010
End Enum

Public Type DIDEVICEINSTANCE_DX3A
    dwSize As Long
    guidInstance As UUID
    guidProduct As UUID
    dwDevType As Long
    tszInstanceName(0 To (MAX_PATH - 1)) As Byte
    tszProductName(0 To (MAX_PATH - 1)) As Byte
End Type
Public Type DIDEVICEINSTANCE_DX3W
    dwSize As Long
    guidInstance As UUID
    guidProduct As UUID
    dwDevType As Long
    tszInstanceName(0 To (MAX_PATH - 1)) As Integer
    tszProductName(0 To (MAX_PATH - 1)) As Integer
End Type
'Alias DIDEVICEINSTANCE_DX3 as DIDEVICEINSTANCE_DX3W
Public Type DIDEVICEINSTANCE_DX3
    dwSize As Long
    guidInstance As UUID
    guidProduct As UUID
    dwDevType As Long
    tszInstanceName(0 To (MAX_PATH - 1)) As Integer
    tszProductName(0 To (MAX_PATH - 1)) As Integer
End Type

Public Type DIDEVICEINSTANCEA
    dwSize As Long
    guidInstance As UUID
    guidProduct As UUID
    dwDevType As Long
    tszInstanceName(0 To (MAX_PATH - 1)) As Byte
    tszProductName(0 To (MAX_PATH - 1)) As Byte
    '#if(DIRECTINPUT_VERSION >= 0x0500)
    guidFFDriver As UUID
    wUsagePage As Integer
    wUsage As Integer
    '#endif /* DIRECTINPUT_VERSION >= 0x0500 */
End Type
Public Type DIDEVICEINSTANCEW
    dwSize As Long
    guidInstance As UUID
    guidProduct As UUID
    dwDevType As Long
    tszInstanceName(0 To (MAX_PATH - 1)) As Integer
    tszProductName(0 To (MAX_PATH - 1)) As Integer
    '#if(DIRECTINPUT_VERSION >= 0x0500)
    guidFFDriver As UUID
    wUsagePage As Integer
    wUsage As Integer
    '#endif /* DIRECTINPUT_VERSION >= 0x0500 */
End Type
'Alias DIDEVICEINSTANCE As DIDEVICEINSTANCEW
Public Type DIDEVICEINSTANCE
    dwSize As Long
    guidInstance As UUID
    guidProduct As UUID
    dwDevType As Long
    tszInstanceName(0 To (MAX_PATH - 1)) As Integer
    tszProductName(0 To (MAX_PATH - 1)) As Integer
    '#if(DIRECTINPUT_VERSION >= 0x0500)
    guidFFDriver As UUID
    wUsagePage As Integer
    wUsage As Integer
    '#endif /* DIRECTINPUT_VERSION >= 0x0500 */
End Type

Public Enum DISFFCFLAGS
    DISFFC_RESET = &H00000001
    DISFFC_STOPALL = &H00000002
    DISFFC_PAUSE = &H00000004
    DISFFC_CONTINUE = &H00000008
    DISFFC_SETACTUATORSON = &H00000010
    DISFFC_SETACTUATORSOFF = &H00000020
    DISFFC_FORCERESET = &H80000000 'Undocumented
End Enum

Public Enum DIGFFSFLAGS
    DIGFFS_EMPTY = &H00000001
    DIGFFS_STOPPED = &H00000002
    DIGFFS_PAUSED = &H00000004
    DIGFFS_ACTUATORSON = &H00000010
    DIGFFS_ACTUATORSOFF = &H00000020
    DIGFFS_POWERON = &H00000040
    DIGFFS_POWEROFF = &H00000080
    DIGFFS_SAFETYSWITCHON = &H00000100
    DIGFFS_SAFETYSWITCHOFF = &H00000200
    DIGFFS_USERFFSWITCHON = &H00000400
    DIGFFS_USERFFSWITCHOFF = &H00000800
    DIGFFS_RANDOM = &H40000000 'Undocumented
    DIGFFS_DEVICELOST = &H80000000
End Enum

Public Type DIEFFECTINFOA
    dwSize As Long
    guid As UUID
    dwEffType As DIEFTFLAGS
    dwStaticParams As DIEPFLAGS
    dwDynamicParams As DIEPFLAGS
    tszName(0 To (MAX_PATH - 1)) As Byte
End Type
Public Type DIEFFECTINFOW
    dwSize As Long
    guid As UUID
    dwEffType As DIEFTFLAGS
    dwStaticParams As DIEPFLAGS
    dwDynamicParams As DIEPFLAGS
    tszName(0 To (MAX_PATH - 1)) As Integer
End Type
'Alias DIEFFECTINFO As DIEFFECTINFOW
Public Type DIEFFECTINFO
    dwSize As Long
    guid As UUID
    dwEffType As DIEFTFLAGS
    dwStaticParams As DIEPFLAGS
    dwDynamicParams As DIEPFLAGS
    tszName(0 To (MAX_PATH - 1)) As Integer
End Type

Public Enum DISDDFLAGS
    DISDD_DEFAULT = 0
    DISDD_CONTINUE = 1
End Enum

Public Delegate Function DIENUMEFFECTSCALLBACKA (lpdidoInst As DIEFFECTINFOA, ByVal Context As LongPtr) As BOOL
Public Delegate Function DIENUMEFFECTSCALLBACKW (lpdidoInst As DIEFFECTINFOW, ByVal Context As LongPtr) As BOOL
Public Delegate Function DIENUMEFFECTSCALLBACK (lpdidoInst As DIEFFECTINFO, ByVal Context As LongPtr) As BOOL
        
Public Delegate Function DIENUMCREATEDEFFECTOBJECTSCALLBACK (ByVal dif As IDirectInputEffect, ByVal Context As LongPtr) As BOOL

Public Enum DIFEFFLAGS
    DIFEF_DEFAULT = &H00000000
    DIFEF_INCLUDENONSTANDARD = &H00000001
    DIFEF_MODIFYIFNEEDED = &H00000010
End Enum
    
Public Type DIMOUSESTATE
    lX As Long
    lY As Long
    lZ As Long
    rgbButtons(0 To 3) As Byte
End Type
Public Type DIMOUSESTATE2
    lX As Long
    lY As Long
    lZ As Long
    rgbButtons(0 To 7) As Byte
End Type

' #define DIMOFS_X        FIELD_OFFSET(DIMOUSESTATE, lX)
' #define DIMOFS_Y        FIELD_OFFSET(DIMOUSESTATE, lY)
' #define DIMOFS_Z        FIELD_OFFSET(DIMOUSESTATE, lZ)
' #define DIMOFS_BUTTON0 (FIELD_OFFSET(DIMOUSESTATE, rgbButtons) + 0)
' #define DIMOFS_BUTTON1 (FIELD_OFFSET(DIMOUSESTATE, rgbButtons) + 1)
' #define DIMOFS_BUTTON2 (FIELD_OFFSET(DIMOUSESTATE, rgbButtons) + 2)
' #define DIMOFS_BUTTON3 (FIELD_OFFSET(DIMOUSESTATE, rgbButtons) + 3)
' #if (DIRECTINPUT_VERSION >= 0x0700)
' #define DIMOFS_BUTTON4 (FIELD_OFFSET(DIMOUSESTATE2, rgbButtons) + 4)
' #define DIMOFS_BUTTON5 (FIELD_OFFSET(DIMOUSESTATE2, rgbButtons) + 5)
' #define DIMOFS_BUTTON6 (FIELD_OFFSET(DIMOUSESTATE2, rgbButtons) + 6)
' #define DIMOFS_BUTTON7 (FIELD_OFFSET(DIMOUSESTATE2, rgbButtons) + 7)
Public Enum DIMOUSEOFS
    DIMOFS_X = 0
    DIMOFS_Y = 4
    DIMOFS_Z = 8
    DIMOFS_BUTTON0 = 12
    DIMOFS_BUTTON1 = 13
    DIMOFS_BUTTON2 = 14
    DIMOFS_BUTTON3 = 15
    DIMOFS_BUTTON4 = 16
    DIMOFS_BUTTON5 = 17
    DIMOFS_BUTTON6 = 18
    DIMOFS_BUTTON7 = 19
End Enum

Public Enum DIKEYFLAGS
    DIK_ESCAPE = &H01
    DIK_1 = &H02
    DIK_2 = &H03
    DIK_3 = &H04
    DIK_4 = &H05
    DIK_5 = &H06
    DIK_6 = &H07
    DIK_7 = &H08
    DIK_8 = &H09
    DIK_9 = &H0A
    DIK_0 = &H0B
    DIK_MINUS = &H0C /* - on main keyboard */
    DIK_EQUALS = &H0D
    DIK_BACK = &H0E /* backspace */
    DIK_TAB = &H0F
    DIK_Q = &H10
    DIK_W = &H11
    DIK_E = &H12
    DIK_R = &H13
    DIK_T = &H14
    DIK_Y = &H15
    DIK_U = &H16
    DIK_I = &H17
    DIK_O = &H18
    DIK_P = &H19
    DIK_LBRACKET = &H1A
    DIK_RBRACKET = &H1B
    DIK_RETURN = &H1C /* Enter on main keyboard */
    DIK_LCONTROL = &H1D
    DIK_A = &H1E
    DIK_S = &H1F
    DIK_D = &H20
    DIK_F = &H21
    DIK_G = &H22
    DIK_H = &H23
    DIK_J = &H24
    DIK_K = &H25
    DIK_L = &H26
    DIK_SEMICOLON = &H27
    DIK_APOSTROPHE = &H28
    DIK_GRAVE = &H29 /* accent grave */
    DIK_LSHIFT = &H2A
    DIK_BACKSLASH = &H2B
    DIK_Z = &H2C
    DIK_X = &H2D
    DIK_C = &H2E
    DIK_V = &H2F
    DIK_B = &H30
    DIK_N = &H31
    DIK_M = &H32
    DIK_COMMA = &H33
    DIK_PERIOD = &H34 /* . on main keyboard */
    DIK_SLASH = &H35 /* / on main keyboard */
    DIK_RSHIFT = &H36
DIK_MULTIPLY = &H37 /* * on numeric keypad */
    DIK_LMENU = &H38 /* left Alt */
    DIK_SPACE = &H39
    DIK_CAPITAL = &H3A
    DIK_F1 = &H3B
    DIK_F2 = &H3C
    DIK_F3 = &H3D
    DIK_F4 = &H3E
    DIK_F5 = &H3F
    DIK_F6 = &H40
    DIK_F7 = &H41
    DIK_F8 = &H42
    DIK_F9 = &H43
    DIK_F10 = &H44
    DIK_NUMLOCK = &H45
    DIK_SCROLL = &H46 /* Scroll Lock */
    DIK_NUMPAD7 = &H47
    DIK_NUMPAD8 = &H48
    DIK_NUMPAD9 = &H49
    DIK_SUBTRACT = &H4A /* - on numeric keypad */
    DIK_NUMPAD4 = &H4B
    DIK_NUMPAD5 = &H4C
    DIK_NUMPAD6 = &H4D
    DIK_ADD = &H4E /* + on numeric keypad */
    DIK_NUMPAD1 = &H4F
    DIK_NUMPAD2 = &H50
    DIK_NUMPAD3 = &H51
    DIK_NUMPAD0 = &H52
    DIK_DECIMAL = &H53 /* . on numeric keypad */
    DIK_OEM_102 = &H56 /* <> or \| on RT 102-key keyboard (Non-U.S.) */
    DIK_F11 = &H57
    DIK_F12 = &H58
    DIK_F13 = &H64 /*                     (NEC PC98) */
    DIK_F14 = &H65 /*                     (NEC PC98) */
    DIK_F15 = &H66 /*                     (NEC PC98) */
    DIK_F16 = &H67  '
    DIK_F17 = &H68  '
    DIK_F18 = &H69  '
    DIK_F19 = &H6A  '
    DIK_F20 = &H6B  '
    DIK_F21 = &H6C  '
    DIK_F22 = &H6D  '
    DIK_F23 = &H6E  '
    DIK_F24 = &H76  '
    DIK_SHARP = &H84 /* Hash-mark */
    DIK_KANA = &H70 /* (Japanese keyboard)            */
    DIK_ABNT_C1 = &H73 /* /? on Brazilian keyboard */
    DIK_CONVERT = &H79 /* (Japanese keyboard)            */
    DIK_NOCONVERT = &H7B /* (Japanese keyboard)            */
    DIK_YEN = &H7D /* (Japanese keyboard)            */
    DIK_ABNT_C2 = &H7E /* Numpad . on Brazilian keyboard */
    DIK_NUMPADEQUALS = &H8D /* = on numeric keypad (NEC PC98) */
    DIK_PREVTRACK = &H90 /* Previous Track (DIK_CIRCUMFLEX on Japanese keyboard) */
    DIK_AT = &H91 /*                     (NEC PC98) */
    DIK_COLON = &H92 /*                     (NEC PC98) */
    DIK_UNDERLINE = &H93 /*                     (NEC PC98) */
    DIK_KANJI = &H94 /* (Japanese keyboard)            */
    DIK_STOP = &H95 /*                     (NEC PC98) */
    DIK_AX = &H96 /*                     (Japan AX) */
    DIK_UNLABELED = &H97 /*                        (J3100) */
    DIK_NEXTTRACK = &H99 /* Next Track */
    DIK_NUMPADENTER = &H9C /* Enter on numeric keypad */
    DIK_RCONTROL = &H9D
    DIK_MUTE = &HA0 /* Mute */
    DIK_CALCULATOR = &HA1 /* Calculator */
    DIK_PLAYPAUSE = &HA2 /* Play / Pause */
    DIK_MEDIASTOP = &HA4 /* Media Stop */
    DIK_VOLUMEDOWN = &HAE /* Volume - */
    DIK_VOLUMEUP = &HB0 /* Volume + */
    DIK_WEBHOME = &HB2 /* Web home */
    DIK_NUMPADCOMMA = &HB3 /* , on numeric keypad (NEC PC98) */
    DIK_DIVIDE = &HB5 /* / on numeric keypad */
    DIK_SYSRQ = &HB7
    DIK_RMENU = &HB8 /* right Alt */
    DIK_PAUSE = &HC5 /* Pause */
    DIK_HOME = &HC7 /* Home on arrow keypad */
    DIK_UP = &HC8 /* UpArrow on arrow keypad */
    DIK_PRIOR = &HC9 /* PgUp on arrow keypad */
    DIK_LEFT = &HCB /* LeftArrow on arrow keypad */
    DIK_RIGHT = &HCD /* RightArrow on arrow keypad */
    DIK_END = &HCF /* End on arrow keypad */
    DIK_DOWN = &HD0 /* DownArrow on arrow keypad */
    DIK_NEXT = &HD1 /* PgDn on arrow keypad */
    DIK_INSERT = &HD2 /* Insert on arrow keypad */
    DIK_DELETE = &HD3 /* Delete on arrow keypad */
    DIK_LWIN = &HDB /* Left Windows key */
    DIK_RWIN = &HDC /* Right Windows key */
    DIK_APPS = &HDD /* AppMenu key */
    DIK_POWER = &HDE /* System Power */
    DIK_SLEEP = &HDF /* System Sleep */
    DIK_WAKE = &HE3 /* System Wake */
    DIK_WEBSEARCH = &HE5 /* Web Search */
    DIK_WEBFAVORITES = &HE6 /* Web Favorites */
    DIK_WEBREFRESH = &HE7 /* Web Refresh */
    DIK_WEBSTOP = &HE8 /* Web Stop */
    DIK_WEBFORWARD = &HE9 /* Web Forward */
    DIK_WEBBACK = &HEA /* Web Back */
    DIK_MYCOMPUTER = &HEB /* My Computer */
    DIK_MAIL = &HEC /* Mail */
    DIK_MEDIASELECT = &HED /* Media Select */

/*
 *  Alternate names for keys, to facilitate transition from DOS.
 */
    DIK_BACKSPACE = DIK_BACK /* backspace */
    DIK_NUMPADSTAR = DIK_MULTIPLY /* * on numeric keypad */
    DIK_LALT = DIK_LMENU /* left Alt */
    DIK_CAPSLOCK = DIK_CAPITAL /* CapsLock */
    DIK_NUMPADMINUS = DIK_SUBTRACT /* - on numeric keypad */
    DIK_NUMPADPLUS = DIK_ADD /* + on numeric keypad */
    DIK_NUMPADPERIOD = DIK_DECIMAL /* . on numeric keypad */
    DIK_NUMPADSLASH = DIK_DIVIDE /* / on numeric keypad */
    DIK_RALT = DIK_RMENU /* right Alt */
    DIK_UPARROW = DIK_UP /* UpArrow on arrow keypad */
    DIK_PGUP = DIK_PRIOR /* PgUp on arrow keypad */
    DIK_LEFTARROW = DIK_LEFT /* LeftArrow on arrow keypad */
    DIK_RIGHTARROW = DIK_RIGHT /* RightArrow on arrow keypad */
    DIK_DOWNARROW = DIK_DOWN /* DownArrow on arrow keypad */
    DIK_PGDN = DIK_NEXT /* PgDn on arrow keypad */

/*
 *  Alternate names for keys originally not used on US keyboards.
 */
    DIK_CIRCUMFLEX = DIK_PREVTRACK /* Japanese keyboard */
End Enum

Public Type DIJOYSTATE
    lX As Long ' x-axis position              */
    lY As Long ' y-axis position              */
    lZ As Long ' z-axis position              */
    lRx As Long ' x-axis rotation              */
    lRy As Long ' y-axis rotation              */
    lRz As Long ' z-axis rotation              */
    rglSlider(0 To 1) As Long ' extra axes positions         */
    rgdwPOV(0 To 3) As Long ' POV directions               */
    rgbButtons(0 To 31) As Byte ' 32 buttons                   */
End Type

Public Type DIJOYSTATE2
    lX As Long ' x-axis position              */
    lY As Long ' y-axis position              */
    lZ As Long ' z-axis position              */
    lRx As Long ' x-axis rotation              */
    lRy As Long ' y-axis rotation              */
    lRz As Long ' z-axis rotation              */
    rglSlider(0 To 1) As Long ' extra axes positions         */
    rgdwPOV(0 To 3) As Long ' POV directions               */
    rgbButtons(0 To 127) As Byte ' 128 buttons                  */
    lVX As Long ' x-axis velocity              */
    lVY As Long ' y-axis velocity              */
    lVZ As Long ' z-axis velocity              */
    lVRx As Long ' x-axis angular velocity      */
    lVRy As Long ' y-axis angular velocity      */
    lVRz As Long ' z-axis angular velocity      */
    rglVSlider(0 To 1) As Long ' extra axes velocities        */
    lAX As Long ' x-axis acceleration          */
    lAY As Long ' y-axis acceleration          */
    lAZ As Long ' z-axis acceleration          */
    lARx As Long ' x-axis angular acceleration  */
    lARy As Long ' y-axis angular acceleration  */
    lARz As Long ' z-axis angular acceleration  */
    rglASlider(0 To 1) As Long ' extra axes accelerations     */
    lFX As Long ' x-axis force                 */
    lFY As Long ' y-axis force                 */
    lFZ As Long ' z-axis force                 */
    lFRx As Long ' x-axis torque                */
    lFRy As Long ' y-axis torque                */
    lFRz As Long ' z-axis torque                */
    rglFSlider(0 To 1) As Long ' extra axes forces            */
End Type

Public Enum DIJOYSTICKOFS
    DIJOFS_X = 0
    DIJOFS_Y = 4
    DIJOFS_Z = 8
    DIJOFS_RX = 12
    DIJOFS_RY = 16
    DIJOFS_RZ = 20
    DIJOFS_SLIDER0 = 24
    DIJOFS_SLIDER1 = 28
    DIJOFS_POV0 = 32
    DIJOFS_POV1 = 36
    DIJOFS_POV2 = 40
    DIJOFS_POV3 = 44
    DIJOFS_BUTTON0 = 48
    DIJOFS_BUTTON1 = 49
    DIJOFS_BUTTON2 = 50
    DIJOFS_BUTTON3 = 51
    DIJOFS_BUTTON4 = 52
    DIJOFS_BUTTON5 = 53
    DIJOFS_BUTTON6 = 54
    DIJOFS_BUTTON7 = 55
    DIJOFS_BUTTON8 = 56
    DIJOFS_BUTTON9 = 57
    DIJOFS_BUTTON10 = 58
    DIJOFS_BUTTON11 = 59
    DIJOFS_BUTTON12 = 60
    DIJOFS_BUTTON13 = 61
    DIJOFS_BUTTON14 = 62
    DIJOFS_BUTTON15 = 63
    DIJOFS_BUTTON16 = 64
    DIJOFS_BUTTON17 = 65
    DIJOFS_BUTTON18 = 66
    DIJOFS_BUTTON19 = 67
    DIJOFS_BUTTON20 = 68
    DIJOFS_BUTTON21 = 69
    DIJOFS_BUTTON22 = 70
    DIJOFS_BUTTON23 = 71
    DIJOFS_BUTTON24 = 72
    DIJOFS_BUTTON25 = 73
    DIJOFS_BUTTON26 = 74
    DIJOFS_BUTTON27 = 75
    DIJOFS_BUTTON28 = 76
    DIJOFS_BUTTON29 = 77
    DIJOFS_BUTTON30 = 78
    DIJOFS_BUTTON31 = 79
End Enum

Public Function DIJOFS_SLIDER(ByVal n As Long) As Long: Return 24 + (n * LenB(Of Long)): End Function
Public Function DIJOFS_POV(ByVal n As Long) As Long: Return 32 + (n * LenB(Of Long)): End Function
Public Function DIJOFS_BUTTON(ByVal n As Long) As Long: Return 48 + (n): End Function
       
Public Enum DIENUMFLAGS
    DIENUM_STOP = 0
    DIENUM_CONTINUE = 1
End Enum
    
Public Delegate Function DIENUMDEVICESCALLBACKA (lpddi As DIDEVICEINSTANCEA, ByVal pvRef As LongPtr) As BOOL
Public Delegate Function DIENUMDEVICESCALLBACKW (lpddi As DIDEVICEINSTANCEW, ByVal pvRef As LongPtr) As BOOL
Public Delegate Function DIENUMDEVICESCALLBACK (lpddi As DIDEVICEINSTANCE, ByVal pvRef As LongPtr) As BOOL
    
Public Delegate Function DICONFIGUREDEVICESCALLBACK (ByVal punk As IUnknown, ByVal pvRef As LongPtr) As BOOL

Public Enum DIENUMDEVICESFLAGS
    DIEDFL_ALLDEVICES = &H00000000
    DIEDFL_ATTACHEDONLY = &H00000001
' #if(DIRECTINPUT_VERSION >= 0x0500)
    DIEDFL_FORCEFEEDBACK = &H00000100
' #endif /* DIRECTINPUT_VERSION >= 0x0500 */
' #if(DIRECTINPUT_VERSION >= 0x050a)
    DIEDFL_INCLUDEALIASES = &H00010000
    DIEDFL_INCLUDEPHANTOMS = &H00020000
' #endif /* DIRECTINPUT_VERSION >= 0x050a */
' #if(DIRECTINPUT_VERSION >= 0x0800)
    DIEDFL_INCLUDEHIDDEN = &H00040000
End Enum
    
Public Delegate Function DIENUMDEVICESBYSEMANTICSCBA (lpddi As DIDEVICEINSTANCEA, ByVal lpdid As IDirectInputDevice8A, ByVal dwFlags As DIEDBSFLAGS, ByVal dwRemaining As Long, ByVal pvRef As LongPtr) As BOOL
Public Delegate Function DIENUMDEVICESBYSEMANTICSCBW (lpddi As DIDEVICEINSTANCEW, ByVal lpdid As IDirectInputDevice8W, ByVal dwFlags As DIEDBSFLAGS, ByVal dwRemaining As Long, ByVal pvRef As LongPtr) As BOOL
Public Delegate Function DIENUMDEVICESBYSEMANTICSCB (lpddi As DIDEVICEINSTANCE, ByVal lpdid As IDirectInputDevice8, ByVal dwFlags As DIEDBSFLAGS, ByVal dwRemaining As Long, ByVal pvRef As LongPtr) As BOOL

Public Enum DIEDBSFLAGS
    DIEDBS_MAPPEDPRI1 = &H00000001
    DIEDBS_MAPPEDPRI2 = &H00000002
    DIEDBS_RECENTDEVICE = &H00000010
    DIEDBS_NEWDEVICE = &H00000020
End Enum

Public Enum DIEDBSFLFLAGS
    DIEDBSFL_ATTACHEDONLY = &H00000000
    DIEDBSFL_THISUSER = &H00000010
    DIEDBSFL_FORCEFEEDBACK = DIEDFL_FORCEFEEDBACK
    DIEDBSFL_AVAILABLEDEVICES = &H00001000
    DIEDBSFL_MULTIMICEKEYBOARDS = &H00002000
    DIEDBSFL_NONGAMINGDEVICES = &H00004000
    DIEDBSFL_VALID = &H00007110
End Enum

[Description("WARNING: Correctness not verified.")]
Public Function c_dfDIMouse() As DIDATAFORMAT
    Dim c_rgodfDIMouse(0 To 6) As DIOBJECTDATAFORMAT

    ' Initialize the object data format array
    With c_rgodfDIMouse(0)
        .pguid = VarPtr(GUID_XAxis)
        .dwOfs = DIMOFS_X  ' FIELD_OFFSET(DIMOUSESTATE, lX)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE
        .dwFlags = 0
    End With

    With c_rgodfDIMouse(1)
        .pguid = VarPtr(GUID_YAxis)
        .dwOfs = DIMOFS_Y  ' FIELD_OFFSET(DIMOUSESTATE, lY)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE
        .dwFlags = 0
    End With

    With c_rgodfDIMouse(2)
        .pguid = VarPtr(GUID_ZAxis)
        .dwOfs = DIMOFS_Z  ' FIELD_OFFSET(DIMOUSESTATE, lZ)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = 0
    End With

    With c_rgodfDIMouse(3)
        .pguid = 0  ' NULL
        .dwOfs = DIMOFS_BUTTON0 ' FIELD_OFFSET(DIMOUSESTATE, rgbButtons(0))
        .dwType = DIDFT_BUTTON Or DIDFT_ANYINSTANCE
        .dwFlags = 0
    End With

    With c_rgodfDIMouse(4)
        .pguid = 0  ' NULL
        .dwOfs = DIMOFS_BUTTON1  ' FIELD_OFFSET(DIMOUSESTATE, rgbButtons(1))
        .dwType = DIDFT_BUTTON Or DIDFT_ANYINSTANCE
        .dwFlags = 0
    End With

    With c_rgodfDIMouse(5)
        .pguid = 0  ' NULL
        .dwOfs = DIMOFS_BUTTON2  ' FIELD_OFFSET(DIMOUSESTATE, rgbButtons(2))
        .dwType = DIDFT_BUTTON Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = 0
    End With

    With c_rgodfDIMouse(6)
        .pguid = 0  ' NULL
        .dwOfs = DIMOFS_BUTTON3  ' FIELD_OFFSET(DIMOUSESTATE, rgbButtons(3))
        .dwType = DIDFT_BUTTON Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = 0
    End With

    ' Initialize the data format structure
    With c_dfDIMouse
        .dwSize = LenB(Of DIDATAFORMAT)
        .dwObjSize = LenB(Of DIOBJECTDATAFORMAT)
        .dwFlags = DIDF_RELAXIS
        .dwDataSize = LenB(Of DIMOUSESTATE)
        .dwNumObjs = 7
        .rgodf = VarPtr(c_rgodfDIMouse(0))
    End With
End Function
[Description("WARNING: Correctness not verified.")]
Public Function c_dfDIMouse2() As DIDATAFORMAT
    Dim c_rgodfDIMouse2(0 To 10) As DIOBJECTDATAFORMAT

    ' Initialize the object data format array
    With c_rgodfDIMouse2(0)
        .pguid = VarPtr(GUID_XAxis)
        .dwOfs = DIMOFS_X  ' FIELD_OFFSET(DIMOUSESTATE2, lX)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE
        .dwFlags = 0
    End With

    With c_rgodfDIMouse2(1)
        .pguid = VarPtr(GUID_YAxis)
        .dwOfs = DIMOFS_Y  ' FIELD_OFFSET(DIMOUSESTATE2, lY)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE
        .dwFlags = 0
    End With

    With c_rgodfDIMouse2(2)
        .pguid = VarPtr(GUID_ZAxis)
        .dwOfs = DIMOFS_Z  ' FIELD_OFFSET(DIMOUSESTATE2, lZ)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = 0
    End With

    With c_rgodfDIMouse2(3)
        .pguid = 0  ' NULL
        .dwOfs = DIMOFS_BUTTON0  ' FIELD_OFFSET(DIMOUSESTATE2, rgbButtons(0))
        .dwType = DIDFT_BUTTON Or DIDFT_ANYINSTANCE
        .dwFlags = 0
    End With

    With c_rgodfDIMouse2(4)
        .pguid = 0  ' NULL
        .dwOfs = DIMOFS_BUTTON1  ' FIELD_OFFSET(DIMOUSESTATE2, rgbButtons(1))
        .dwType = DIDFT_BUTTON Or DIDFT_ANYINSTANCE
        .dwFlags = 0
    End With

    With c_rgodfDIMouse2(5)
        .pguid = 0  ' NULL
        .dwOfs = DIMOFS_BUTTON2  ' FIELD_OFFSET(DIMOUSESTATE2, rgbButtons(2))
        .dwType = DIDFT_BUTTON Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = 0
    End With

    With c_rgodfDIMouse2(6)
        .pguid = 0  ' NULL
        .dwOfs = DIMOFS_BUTTON3  ' FIELD_OFFSET(DIMOUSESTATE2, rgbButtons(3))
        .dwType = DIDFT_BUTTON Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = 0
    End With

    With c_rgodfDIMouse2(7)
        .pguid = 0  ' NULL
        .dwOfs = DIMOFS_BUTTON4  ' FIELD_OFFSET(DIMOUSESTATE2, rgbButtons(4))
        .dwType = DIDFT_BUTTON Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = 0
    End With

    With c_rgodfDIMouse2(8)
        .pguid = 0  ' NULL
        .dwOfs = DIMOFS_BUTTON5 ' FIELD_OFFSET(DIMOUSESTATE2, rgbButtons(5))
        .dwType = DIDFT_BUTTON Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = 0
    End With

    With c_rgodfDIMouse2(9)
        .pguid = 0  ' NULL
        .dwOfs = DIMOFS_BUTTON6  ' FIELD_OFFSET(DIMOUSESTATE2, rgbButtons(6))
        .dwType = DIDFT_BUTTON Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = 0
    End With

    With c_rgodfDIMouse2(10)
        .pguid = 0  ' NULL
        .dwOfs = DIMOFS_BUTTON7  ' FIELD_OFFSET(DIMOUSESTATE2, rgbButtons(7))
        .dwType = DIDFT_BUTTON Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = 0
    End With

    ' Initialize the data format structure
    With c_dfDIMouse2
        .dwSize = LenB(Of DIDATAFORMAT)
        .dwObjSize = LenB(Of DIOBJECTDATAFORMAT)
        .dwFlags = DIDF_RELAXIS
        .dwDataSize = LenB(Of DIMOUSESTATE2)
        .dwNumObjs = 11
        .rgodf = VarPtr(c_rgodfDIMouse2(0))
    End With
End Function
[Description("WARNING: Correctness not verified.")]
Public Function c_dfDIKeyboard() As DIDATAFORMAT
    Dim c_rgodfDIKeyboard(0 To 255) As DIOBJECTDATAFORMAT

    ' Initialize the object data format array using a loop
    ' Equivalent to MAKEODF macro: each entry represents a keyboard key
    For i As Long = 0 To 255
        With c_rgodfDIKeyboard(i)
            .pguid = VarPtr(GUID_Key)
            .dwOfs = i  ' byte offset for this key
            .dwType = DIDFT_BUTTON Or DIDFT_MAKEINSTANCE(i) Or &H80000000
            .dwFlags = 0
        End With
    Next i
    With c_dfDIKeyboard
        .dwSize = LenB(Of DIDATAFORMAT)
        .dwObjSize = LenB(Of DIOBJECTDATAFORMAT)
        .dwFlags = DIDF_RELAXIS
        .dwDataSize = 256  ' 256 bytes for keyboard state
        .dwNumObjs = 256   ' 256 keys total
        .rgodf = VarPtr(c_rgodfDIKeyboard(0))
    End With
End Function
[Description("WARNING: Correctness not verified.")]
Public Function c_dfDIJoystick() As DIDATAFORMAT
    Dim c_rgodfDIJoy(0 To 43) As DIOBJECTDATAFORMAT
    Dim i As Long

    ' Initialize axes - MAKEVAL macro equivalents
    ' X Axis
    With c_rgodfDIJoy(0)
        .pguid = VarPtr(GUID_XAxis)
        .dwOfs = 0      ' FIELD_OFFSET(DIJOYSTATE, lX)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTPOSITION
    End With

    ' Y Axis
    With c_rgodfDIJoy(1)
        .pguid = VarPtr(GUID_YAxis)
        .dwOfs = 4      ' FIELD_OFFSET(DIJOYSTATE, lY)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTPOSITION
    End With

    ' Z Axis
    With c_rgodfDIJoy(2)
        .pguid = VarPtr(GUID_ZAxis)
        .dwOfs = 8      ' FIELD_OFFSET(DIJOYSTATE, lZ)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTPOSITION
    End With

    ' Rx Axis
    With c_rgodfDIJoy(3)
        .pguid = VarPtr(GUID_RxAxis)
        .dwOfs = 12     ' FIELD_OFFSET(DIJOYSTATE, lRx)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTPOSITION
    End With

    ' Ry Axis
    With c_rgodfDIJoy(4)
        .pguid = VarPtr(GUID_RyAxis)
        .dwOfs = 16     ' FIELD_OFFSET(DIJOYSTATE, lRy)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTPOSITION
    End With

    ' Rz Axis
    With c_rgodfDIJoy(5)
        .pguid = VarPtr(GUID_RzAxis)
        .dwOfs = 20     ' FIELD_OFFSET(DIJOYSTATE, lRz)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTPOSITION
    End With

    ' Slider 0
    With c_rgodfDIJoy(6)
        .pguid = VarPtr(GUID_Slider)
        .dwOfs = 24     ' FIELD_OFFSET(DIJOYSTATE, rglSlider(0))
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTPOSITION
    End With

    ' Slider 1
    With c_rgodfDIJoy(7)
        .pguid = VarPtr(GUID_Slider)
        .dwOfs = 28     ' FIELD_OFFSET(DIJOYSTATE, rglSlider(1))
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTPOSITION
    End With

    ' POV 0
    With c_rgodfDIJoy(8)
        .pguid = VarPtr(GUID_POV)
        .dwOfs = 32     ' FIELD_OFFSET(DIJOYSTATE, rgdwPOV(0))
        .dwType = DIDFT_POV Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTUNKNOWN
    End With

    ' POV 1
    With c_rgodfDIJoy(9)
        .pguid = VarPtr(GUID_POV)
        .dwOfs = 36     ' FIELD_OFFSET(DIJOYSTATE, rgdwPOV(1))
        .dwType = DIDFT_POV Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTUNKNOWN
    End With

    ' POV 2
    With c_rgodfDIJoy(10)
        .pguid = VarPtr(GUID_POV)
        .dwOfs = 40     ' FIELD_OFFSET(DIJOYSTATE, rgdwPOV(2))
        .dwType = DIDFT_POV Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTUNKNOWN
    End With

    ' POV 3
    With c_rgodfDIJoy(11)
        .pguid = VarPtr(GUID_POV)
        .dwOfs = 44     ' FIELD_OFFSET(DIJOYSTATE, rgdwPOV(3))
        .dwType = DIDFT_POV Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTUNKNOWN
    End With

    ' Initialize buttons 0-31 using a loop - MAKEBTN macro equivalents
    For i = 0 To 31
        With c_rgodfDIJoy(12 + i)  ' Buttons start at index 12
            .pguid = 0  ' NULL
            .dwOfs = 48 + i         ' FIELD_OFFSET(DIJOYSTATE, rgbButtons(i))
            .dwType = DIDFT_BUTTON Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
            .dwFlags = DIDOI_ASPECTUNKNOWN
        End With
    Next i

    ' Initialize the data format structure
    With c_dfDIJoystick
        .dwSize = LenB(Of DIDATAFORMAT)
        .dwObjSize = LenB(Of DIOBJECTDATAFORMAT)
        .dwFlags = DIDF_ABSAXIS
        .dwDataSize = LenB(Of DIJOYSTATE)
        .dwNumObjs = 44  ' 6 axes + 2 sliders + 4 POVs + 32 buttons
        .rgodf = VarPtr(c_rgodfDIJoy(0))
    End With
End Function
[Description("WARNING: Correctness not verified.")]
Public Function c_dfDIJoystick2() As DIDATAFORMAT
    Dim c_rgodfDIJoy2(0 To 163) As DIOBJECTDATAFORMAT  ' 164 total entries 
    Dim i As Long
    Dim index As Long

    index = 0

    ' MAKEVALS(l, POSITION) - Position axes (8 entries)
    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_XAxis)
        .dwOfs = 0      ' FIELD_OFFSET(DIJOYSTATE2, lX)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTPOSITION
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_YAxis)
        .dwOfs = 4      ' FIELD_OFFSET(DIJOYSTATE2, lY)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTPOSITION
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_ZAxis)
        .dwOfs = 8      ' FIELD_OFFSET(DIJOYSTATE2, lZ)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTPOSITION
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_RxAxis)
        .dwOfs = 12     ' FIELD_OFFSET(DIJOYSTATE2, lRx)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTPOSITION
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_RyAxis)
        .dwOfs = 16     ' FIELD_OFFSET(DIJOYSTATE2, lRy)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTPOSITION
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_RzAxis)
        .dwOfs = 20     ' FIELD_OFFSET(DIJOYSTATE2, lRz)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTPOSITION
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_Slider)
        .dwOfs = 24     ' FIELD_OFFSET(DIJOYSTATE2, rglSlider(0))
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTPOSITION
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_Slider)
        .dwOfs = 28     ' FIELD_OFFSET(DIJOYSTATE2, rglSlider(1))
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTPOSITION
    End With
    index = index + 1

    ' MAKEPOV entries (4 entries)
    For i = 0 To 3
        With c_rgodfDIJoy2(index)
            .pguid = VarPtr(GUID_POV)
            .dwOfs = 32 + (i * 4)   ' FIELD_OFFSET(DIJOYSTATE2, rgdwPOV(i))
            .dwType = DIDFT_POV Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
            .dwFlags = DIDOI_ASPECTUNKNOWN
        End With
        index = index + 1
    Next i

    ' MAKEBTNS entries - 8 groups of 16 buttons (128 buttons total)
    For i = 0 To 127
        With c_rgodfDIJoy2(index)
            .pguid = 0  ' NULL
            .dwOfs = 48 + i         ' FIELD_OFFSET(DIJOYSTATE2, rgbButtons(i))
            .dwType = DIDFT_BUTTON Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
            .dwFlags = DIDOI_ASPECTUNKNOWN
        End With
        index = index + 1
    Next i

    ' MAKEVALS(lV, VELOCITY) - Velocity axes (8 entries)
    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_XAxis)
        .dwOfs = 176    ' FIELD_OFFSET(DIJOYSTATE2, lVX)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTVELOCITY
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_YAxis)
        .dwOfs = 180    ' FIELD_OFFSET(DIJOYSTATE2, lVY)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTVELOCITY
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_ZAxis)
        .dwOfs = 184    ' FIELD_OFFSET(DIJOYSTATE2, lVZ)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTVELOCITY
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_RxAxis)
        .dwOfs = 188    ' FIELD_OFFSET(DIJOYSTATE2, lVRx)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTVELOCITY
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_RyAxis)
        .dwOfs = 192    ' FIELD_OFFSET(DIJOYSTATE2, lVRy)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTVELOCITY
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_RzAxis)
        .dwOfs = 196    ' FIELD_OFFSET(DIJOYSTATE2, lVRz)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTVELOCITY
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_Slider)
        .dwOfs = 200    ' FIELD_OFFSET(DIJOYSTATE2, rglVSlider(0))
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTVELOCITY
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_Slider)
        .dwOfs = 204    ' FIELD_OFFSET(DIJOYSTATE2, rglVSlider(1))
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTVELOCITY
    End With
    index = index + 1

    ' MAKEVALS(lA, ACCEL) - Acceleration axes (8 entries)
    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_XAxis)
        .dwOfs = 208    ' FIELD_OFFSET(DIJOYSTATE2, lAX)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTACCEL
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_YAxis)
        .dwOfs = 212    ' FIELD_OFFSET(DIJOYSTATE2, lAY)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTACCEL
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_ZAxis)
        .dwOfs = 216    ' FIELD_OFFSET(DIJOYSTATE2, lAZ)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTACCEL
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_RxAxis)
        .dwOfs = 220    ' FIELD_OFFSET(DIJOYSTATE2, lARx)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTACCEL
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_RyAxis)
        .dwOfs = 224    ' FIELD_OFFSET(DIJOYSTATE2, lARy)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTACCEL
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_RzAxis)
        .dwOfs = 228    ' FIELD_OFFSET(DIJOYSTATE2, lARz)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTACCEL
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_Slider)
        .dwOfs = 232    ' FIELD_OFFSET(DIJOYSTATE2, rglASlider(0))
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTACCEL
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_Slider)
        .dwOfs = 236    ' FIELD_OFFSET(DIJOYSTATE2, rglASlider(1))
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTACCEL
    End With
    index = index + 1

    ' MAKEVALS(lF, FORCE) - Force axes (8 entries)
    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_XAxis)
        .dwOfs = 240    ' FIELD_OFFSET(DIJOYSTATE2, lFX)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTFORCE
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_YAxis)
        .dwOfs = 244    ' FIELD_OFFSET(DIJOYSTATE2, lFY)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTFORCE
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_ZAxis)
        .dwOfs = 248    ' FIELD_OFFSET(DIJOYSTATE2, lFZ)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTFORCE
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_RxAxis)
        .dwOfs = 252    ' FIELD_OFFSET(DIJOYSTATE2, lFRx)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTFORCE
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_RyAxis)
        .dwOfs = 256    ' FIELD_OFFSET(DIJOYSTATE2, lFRy)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTFORCE
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_RzAxis)
        .dwOfs = 260    ' FIELD_OFFSET(DIJOYSTATE2, lFRz)
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTFORCE
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_Slider)
        .dwOfs = 264    ' FIELD_OFFSET(DIJOYSTATE2, rglFSlider(0))
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTFORCE
    End With
    index = index + 1

    With c_rgodfDIJoy2(index)
        .pguid = VarPtr(GUID_Slider)
        .dwOfs = 268    ' FIELD_OFFSET(DIJOYSTATE2, rglFSlider(1))
        .dwType = DIDFT_AXIS Or DIDFT_ANYINSTANCE Or DIDFT_OPTIONAL
        .dwFlags = DIDOI_ASPECTFORCE
    End With

    ' Initialize the data format structure
    With c_dfDIJoystick2
        .dwSize = LenB(Of DIDATAFORMAT)
        .dwObjSize = LenB(Of DIOBJECTDATAFORMAT)
        .dwFlags = DIDF_ABSAXIS
        .dwDataSize = LenB(Of DIJOYSTATE2)
        .dwNumObjs = 164  ' 8+4+128+8+8+8 = 164 total entries
        .rgodf = VarPtr(c_rgodfDIJoy2(0))
    End With
End Function

[UseGetLastError(False)]
Public Declare PtrSafe Function DirectInput8Create Lib "dinput8.dll" (ByVal hinst As LongPtr, ByVal dwVersion As Long, riidltf As UUID, ppvOut As Any, ByVal punkOuter As IUnknown) As Long

[UseGetLastError(False)]
Public Declare PtrSafe Function DirectInputCreateA Lib "dinput.dll" (ByVal hinst As LongPtr, ByVal dwVersion As Long, ppvOut As IDirectInputA, ByVal punkOuter As IUnknown) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function DirectInputCreateW Lib "dinput.dll" (ByVal hinst As LongPtr, ByVal dwVersion As Long, ppvOut As IDirectInputW, ByVal punkOuter As IUnknown) As Long
[UseGetLastError(False)]
Public DeclareWide PtrSafe Function DirectInputCreate Lib "dinput.dll" Alias "DirectInputCreateW" (ByVal hinst As LongPtr, ByVal dwVersion As Long, ppvOut As IDirectInput, ByVal punkOuter As IUnknown) As Long

[UseGetLastError(False)]
Public Declare PtrSafe Function DirectInputCreateEx Lib "dinput.dll" (ByVal hinst As LongPtr, ByVal dwVersion As Long, riidltf As UUID, ppvOut As Any, ByVal punkOuter As IUnknown) As Long

Public Enum DINPUTERR
    /*
    *  The operation completed successfully.
    */
    DI_OK = S_OK

    /*
    *  The device exists but is not currently attached.
    */
    DI_NOTATTACHED = S_FALSE

    /*
    *  The device buffer overflowed.  Some input was lost.
    */
    DI_BUFFEROVERFLOW = S_FALSE

    /*
    *  The change in device properties had no effect.
    */
    DI_PROPNOEFFECT = S_FALSE

    /*
    *  The operation had no effect.
    */
    DI_NOEFFECT = S_FALSE

    /*
    *  The device is a polled device.  As a result, device buffering
    *  will not collect any data and event notifications will not be
    *  signalled until GetDeviceState is called.
    */
    DI_POLLEDDEVICE = &H00000002

    /*
    *  The parameters of the effect were successfully updated by
    *  IDirectInputEffect::SetParameters, but the effect was not
    *  downloaded because the device is not exclusively acquired
    *  or because the DIEP_NODOWNLOAD flag was passed.
    */
    DI_DOWNLOADSKIPPED = &H00000003

    /*
    *  The parameters of the effect were successfully updated by
    *  IDirectInputEffect::SetParameters, but in order to change
    *  the parameters, the effect needed to be restarted.
    */
    DI_EFFECTRESTARTED = &H00000004

    /*
    *  The parameters of the effect were successfully updated by
    *  IDirectInputEffect::SetParameters, but some of them were
    *  beyond the capabilities of the device and were truncated.
    */
    DI_TRUNCATED = &H00000008

    /*
    *  The settings have been successfully applied but could not be 
    *  persisted. 
    */
    DI_SETTINGSNOTSAVED = &H0000000B

    /*
    *  Equal to DI_EFFECTRESTARTED | DI_TRUNCATED.
    */
    DI_TRUNCATEDANDRESTARTED = &H0000000C

    /*
    *  A SUCCESS code indicating that settings cannot be modified.
    */
    DI_WRITEPROTECT = &H00000013

    /*
    *  The application requires a newer version of DirectInput.
    */
    DIERR_OLDDIRECTINPUTVERSION = &H8007047E ' MAKE_HRESULT(SEVERITY_ERROR, FACILITY_WIN32, ERROR_OLD_WIN_VERSION)

    /*
    *  The application was written for an unsupported prerelease version
    *  of DirectInput.
    */
    DIERR_BETADIRECTINPUTVERSION = &H80070481 ' MAKE_HRESULT(SEVERITY_ERROR, FACILITY_WIN32, ERROR_RMODE_APP)

    /*
    *  The object could not be created due to an incompatible driver version
    *  or mismatched or incomplete driver components.
    */
    DIERR_BADDRIVERVER = &H80070077 ' MAKE_HRESULT(SEVERITY_ERROR, FACILITY_WIN32, ERROR_BAD_DRIVER_LEVEL)

    /*
    * The device or device instance or effect is not registered with DirectInput.
    */
    DIERR_DEVICENOTREG = REGDB_E_CLASSNOTREG

    /*
    * The requested object does not exist.
    */
    DIERR_NOTFOUND = &H80070002 '   MAKE_HRESULT(SEVERITY_ERROR, FACILITY_WIN32, ERROR_FILE_NOT_FOUND)

    /*
    * The requested object does not exist.
    */
    DIERR_OBJECTNOTFOUND = &H80070002 '  MAKE_HRESULT(SEVERITY_ERROR, FACILITY_WIN32, ERROR_FILE_NOT_FOUND)

    /*
    * An invalid parameter was passed to the returning function,
    * or the object was not in a state that admitted the function
    * to be called.
    */
    DIERR_INVALIDPARAM = E_INVALIDARG

    /*
    * The specified interface is not supported by the object
    */
    DIERR_NOINTERFACE = E_NOINTERFACE

    /*
    * An undetermined error occured inside the DInput subsystem
    */
    DIERR_GENERIC = E_FAIL

    /*
    * The DInput subsystem couldn't allocate sufficient memory to complete the
    * caller's request.
    */
    DIERR_OUTOFMEMORY = E_OUTOFMEMORY

    /*
    * The function called is not supported at this time
    */
    DIERR_UNSUPPORTED = E_NOTIMPL

    /*
    * This object has not been initialized
    */
    DIERR_NOTINITIALIZED = &H80070015& 'MAKE_HRESULT(SEVERITY_ERROR, FACILITY_WIN32, ERROR_NOT_READY)

    /*
    * This object is already initialized
    */
    DIERR_ALREADYINITIALIZED = &H800704DF 'MAKE_HRESULT(SEVERITY_ERROR, FACILITY_WIN32, ERROR_ALREADY_INITIALIZED)

    /*
    * This object does not support aggregation
    */
    DIERR_NOAGGREGATION = CLASS_E_NOAGGREGATION

    /*
    * Another app has a higher priority level, preventing this call from
    * succeeding.
    */
    DIERR_OTHERAPPHASPRIO = E_ACCESSDENIED

    /*
    * Access to the device has been lost.  It must be re-acquired.
    */
    DIERR_INPUTLOST = &H8007001E& 'MAKE_HRESULT(SEVERITY_ERROR, FACILITY_WIN32, ERROR_READ_FAULT)

    /*
    * The operation cannot be performed while the device is acquired.
    */
    DIERR_ACQUIRED = &H800700AA ' MAKE_HRESULT(SEVERITY_ERROR, FACILITY_WIN32, ERROR_BUSY)

    /*
    * The operation cannot be performed unless the device is acquired.
    */
    DIERR_NOTACQUIRED = &H8007000C 'MAKE_HRESULT(SEVERITY_ERROR, FACILITY_WIN32, ERROR_INVALID_ACCESS)

    /*
    * The specified property cannot be changed.
    */
    DIERR_READONLY = E_ACCESSDENIED

    /*
    * The device already has an event notification associated with it.
    */
    DIERR_HANDLEEXISTS = E_ACCESSDENIED

    /*
     * Unable to IDirectInputJoyConfig_Acquire because the user
     * does not have sufficient privileges to change the joystick
     * configuration.
     */
    DIERR_INSUFFICIENTPRIVS = &H80040200

    /*
     * The device is full.
     */
    DIERR_DEVICEFULL = &H80040201

    /*
     * Not all the requested information fit into the buffer.
     */
    DIERR_MOREDATA = &H80040202

    /*
     * The effect is not downloaded.
     */
    DIERR_NOTDOWNLOADED = &H80040203

    /*
     *  The device cannot be reinitialized because there are still effects
     *  attached to it.
     */
    DIERR_HASEFFECTS = &H80040204

    /*
     *  The operation cannot be performed unless the device is acquired
     *  in DISCL_EXCLUSIVE mode.
     */
    DIERR_NOTEXCLUSIVEACQUIRED = &H80040205

    /*
     *  The effect could not be downloaded because essential information
     *  is missing.  For example, no axes have been associated with the
     *  effect, or no type-specific information has been created.
     */
    DIERR_INCOMPLETEEFFECT = &H80040206

    /*
     *  Attempted to read buffered device data from a device that is
     *  not buffered.
     */
    DIERR_NOTBUFFERED = &H80040207

    /*
     *  An attempt was made to modify parameters of an effect while it is
     *  playing.  Not all hardware devices support altering the parameters
     *  of an effect while it is playing.
     */
    DIERR_EFFECTPLAYING = &H80040208

    /*
     *  The operation could not be completed because the device is not
     *  plugged in.
     */
    DIERR_UNPLUGGED = &H80040209

    /*
     *  SendDeviceData failed because more information was requested
     *  to be sent than can be sent to the device.  Some devices have
     *  restrictions on how much data can be sent to them.  (For example,
     *  there might be a limit on the number of buttons that can be
     *  pressed at once.)
     */
    DIERR_REPORTFULL = &H8004020A


    /*
     *  A mapper file function failed because reading or writing the user or IHV 
     *  settings file failed.
     */
    DIERR_MAPFILEFAIL = &H8004020B
    
End Enum

Public Enum DIKEYBOARDFLAGS
    DIKEYBOARD_ESCAPE = &H81000401
    DIKEYBOARD_1 = &H81000402
    DIKEYBOARD_2 = &H81000403
    DIKEYBOARD_3 = &H81000404
    DIKEYBOARD_4 = &H81000405
    DIKEYBOARD_5 = &H81000406
    DIKEYBOARD_6 = &H81000407
    DIKEYBOARD_7 = &H81000408
    DIKEYBOARD_8 = &H81000409
    DIKEYBOARD_9 = &H8100040A
    DIKEYBOARD_0 = &H8100040B
    DIKEYBOARD_MINUS = &H8100040C /* - on main keyboard */
    DIKEYBOARD_EQUALS = &H8100040D
    DIKEYBOARD_BACK = &H8100040E /* backspace */
    DIKEYBOARD_TAB = &H8100040F
    DIKEYBOARD_Q = &H81000410
    DIKEYBOARD_W = &H81000411
    DIKEYBOARD_E = &H81000412
    DIKEYBOARD_R = &H81000413
    DIKEYBOARD_T = &H81000414
    DIKEYBOARD_Y = &H81000415
    DIKEYBOARD_U = &H81000416
    DIKEYBOARD_I = &H81000417
    DIKEYBOARD_O = &H81000418
    DIKEYBOARD_P = &H81000419
    DIKEYBOARD_LBRACKET = &H8100041A
    DIKEYBOARD_RBRACKET = &H8100041B
    DIKEYBOARD_RETURN = &H8100041C /* Enter on main keyboard */
    DIKEYBOARD_LCONTROL = &H8100041D
    DIKEYBOARD_A = &H8100041E
    DIKEYBOARD_S = &H8100041F
    DIKEYBOARD_D = &H81000420
    DIKEYBOARD_F = &H81000421
    DIKEYBOARD_G = &H81000422
    DIKEYBOARD_H = &H81000423
    DIKEYBOARD_J = &H81000424
    DIKEYBOARD_K = &H81000425
    DIKEYBOARD_L = &H81000426
    DIKEYBOARD_SEMICOLON = &H81000427
    DIKEYBOARD_APOSTROPHE = &H81000428
    DIKEYBOARD_GRAVE = &H81000429 /* accent grave */
    DIKEYBOARD_LSHIFT = &H8100042A
    DIKEYBOARD_BACKSLASH = &H8100042B
    DIKEYBOARD_Z = &H8100042C
    DIKEYBOARD_X = &H8100042D
    DIKEYBOARD_C = &H8100042E
    DIKEYBOARD_V = &H8100042F
    DIKEYBOARD_B = &H81000430
    DIKEYBOARD_N = &H81000431
    DIKEYBOARD_M = &H81000432
    DIKEYBOARD_COMMA = &H81000433
    DIKEYBOARD_PERIOD = &H81000434 /* . on main keyboard */
    DIKEYBOARD_SLASH = &H81000435 /* / on main keyboard */
    DIKEYBOARD_RSHIFT = &H81000436
    DIKEYBOARD_MULTIPLY = &H81000437 /* * on numeric keypad */
    DIKEYBOARD_LMENU = &H81000438 /* left Alt */
    DIKEYBOARD_SPACE = &H81000439
    DIKEYBOARD_CAPITAL = &H8100043A
    DIKEYBOARD_F1 = &H8100043B
    DIKEYBOARD_F2 = &H8100043C
    DIKEYBOARD_F3 = &H8100043D
    DIKEYBOARD_F4 = &H8100043E
    DIKEYBOARD_F5 = &H8100043F
    DIKEYBOARD_F6 = &H81000440
    DIKEYBOARD_F7 = &H81000441
    DIKEYBOARD_F8 = &H81000442
    DIKEYBOARD_F9 = &H81000443
    DIKEYBOARD_F10 = &H81000444
    DIKEYBOARD_NUMLOCK = &H81000445
    DIKEYBOARD_SCROLL = &H81000446 /* Scroll Lock */
    DIKEYBOARD_NUMPAD7 = &H81000447
    DIKEYBOARD_NUMPAD8 = &H81000448
    DIKEYBOARD_NUMPAD9 = &H81000449
    DIKEYBOARD_SUBTRACT = &H8100044A /* - on numeric keypad */
    DIKEYBOARD_NUMPAD4 = &H8100044B
    DIKEYBOARD_NUMPAD5 = &H8100044C
    DIKEYBOARD_NUMPAD6 = &H8100044D
    DIKEYBOARD_ADD = &H8100044E /* + on numeric keypad */
    DIKEYBOARD_NUMPAD1 = &H8100044F
    DIKEYBOARD_NUMPAD2 = &H81000450
    DIKEYBOARD_NUMPAD3 = &H81000451
    DIKEYBOARD_NUMPAD0 = &H81000452
    DIKEYBOARD_DECIMAL = &H81000453 /* . on numeric keypad */
    DIKEYBOARD_OEM_102 = &H81000456 /* <> or \| on RT 102-key keyboard (Non-U.S.) */
    DIKEYBOARD_F11 = &H81000457
    DIKEYBOARD_F12 = &H81000458
    DIKEYBOARD_F13 = &H81000464 /*                     (NEC PC98) */
    DIKEYBOARD_F14 = &H81000465 /*                     (NEC PC98) */
    DIKEYBOARD_F15 = &H81000466 /*                     (NEC PC98) */
    DIKEYBOARD_KANA = &H81000470 /* (Japanese keyboard)            */
    DIKEYBOARD_ABNT_C1 = &H81000473 /* /? on Brazilian keyboard */
    DIKEYBOARD_CONVERT = &H81000479 /* (Japanese keyboard)            */
    DIKEYBOARD_NOCONVERT = &H8100047B /* (Japanese keyboard)            */
    DIKEYBOARD_YEN = &H8100047D /* (Japanese keyboard)            */
    DIKEYBOARD_ABNT_C2 = &H8100047E /* Numpad . on Brazilian keyboard */
    DIKEYBOARD_NUMPADEQUALS = &H8100048D /* = on numeric keypad (NEC PC98) */
    DIKEYBOARD_PREVTRACK = &H81000490 /* Previous Track (DIK_CIRCUMFLEX on Japanese keyboard) */
    DIKEYBOARD_AT = &H81000491 /*                     (NEC PC98) */
    DIKEYBOARD_COLON = &H81000492 /*                     (NEC PC98) */
    DIKEYBOARD_UNDERLINE = &H81000493 /*                     (NEC PC98) */
    DIKEYBOARD_KANJI = &H81000494 /* (Japanese keyboard)            */
    DIKEYBOARD_STOP = &H81000495 /*                     (NEC PC98) */
    DIKEYBOARD_AX = &H81000496 /*                     (Japan AX) */
    DIKEYBOARD_UNLABELED = &H81000497 /*                        (J3100) */
    DIKEYBOARD_NEXTTRACK = &H81000499 /* Next Track */
    DIKEYBOARD_NUMPADENTER = &H8100049C /* Enter on numeric keypad */
    DIKEYBOARD_RCONTROL = &H8100049D
    DIKEYBOARD_MUTE = &H810004A0 /* Mute */
    DIKEYBOARD_CALCULATOR = &H810004A1 /* Calculator */
    DIKEYBOARD_PLAYPAUSE = &H810004A2 /* Play / Pause */
    DIKEYBOARD_MEDIASTOP = &H810004A4 /* Media Stop */
    DIKEYBOARD_VOLUMEDOWN = &H810004AE /* Volume - */
    DIKEYBOARD_VOLUMEUP = &H810004B0 /* Volume + */
    DIKEYBOARD_WEBHOME = &H810004B2 /* Web home */
    DIKEYBOARD_NUMPADCOMMA = &H810004B3 /* , on numeric keypad (NEC PC98) */
    DIKEYBOARD_DIVIDE = &H810004B5 /* / on numeric keypad */
    DIKEYBOARD_SYSRQ = &H810004B7
    DIKEYBOARD_RMENU = &H810004B8 /* right Alt */
    DIKEYBOARD_PAUSE = &H810004C5 /* Pause */
    DIKEYBOARD_HOME = &H810004C7 /* Home on arrow keypad */
    DIKEYBOARD_UP = &H810004C8 /* UpArrow on arrow keypad */
    DIKEYBOARD_PRIOR = &H810004C9 /* PgUp on arrow keypad */
    DIKEYBOARD_LEFT = &H810004CB /* LeftArrow on arrow keypad */
    DIKEYBOARD_RIGHT = &H810004CD /* RightArrow on arrow keypad */
    DIKEYBOARD_END = &H810004CF /* End on arrow keypad */
    DIKEYBOARD_DOWN = &H810004D0 /* DownArrow on arrow keypad */
    DIKEYBOARD_NEXT = &H810004D1 /* PgDn on arrow keypad */
    DIKEYBOARD_INSERT = &H810004D2 /* Insert on arrow keypad */
    DIKEYBOARD_DELETE = &H810004D3 /* Delete on arrow keypad */
    DIKEYBOARD_LWIN = &H810004DB /* Left Windows key */
    DIKEYBOARD_RWIN = &H810004DC /* Right Windows key */
    DIKEYBOARD_APPS = &H810004DD /* AppMenu key */
    DIKEYBOARD_POWER = &H810004DE /* System Power */
    DIKEYBOARD_SLEEP = &H810004DF /* System Sleep */
    DIKEYBOARD_WAKE = &H810004E3 /* System Wake */
    DIKEYBOARD_WEBSEARCH = &H810004E5 /* Web Search */
    DIKEYBOARD_WEBFAVORITES = &H810004E6 /* Web Favorites */
    DIKEYBOARD_WEBREFRESH = &H810004E7 /* Web Refresh */
    DIKEYBOARD_WEBSTOP = &H810004E8 /* Web Stop */
    DIKEYBOARD_WEBFORWARD = &H810004E9 /* Web Forward */
    DIKEYBOARD_WEBBACK = &H810004EA /* Web Back */
    DIKEYBOARD_MYCOMPUTER = &H810004EB /* My Computer */
    DIKEYBOARD_MAIL = &H810004EC /* Mail */
    DIKEYBOARD_MEDIASELECT = &H810004ED /* Media Select */
    
End Enum

Public Enum DIMOUSEFLAGS
    DIMOUSE_XAXISAB = (&H82000200 Or DIMOFS_X)  ' X Axis-absolute: Some mice natively report absolute coordinates  */
    DIMOUSE_YAXISAB = (&H82000200 Or DIMOFS_Y)  ' Y Axis-absolute: Some mice natively report absolute coordinates */
    DIMOUSE_XAXIS = (&H82000300 Or DIMOFS_X)  ' X Axis */
    DIMOUSE_YAXIS = (&H82000300 Or DIMOFS_Y)  ' Y Axis */
    DIMOUSE_WHEEL = (&H82000300 Or DIMOFS_Z)  ' Z Axis */
    DIMOUSE_BUTTON0 = (&H82000400 Or DIMOFS_BUTTON0)  ' Button 0 */
    DIMOUSE_BUTTON1 = (&H82000400 Or DIMOFS_BUTTON1)  ' Button 1 */
    DIMOUSE_BUTTON2 = (&H82000400 Or DIMOFS_BUTTON2)  ' Button 2 */
    DIMOUSE_BUTTON3 = (&H82000400 Or DIMOFS_BUTTON3)  ' Button 3 */
    DIMOUSE_BUTTON4 = (&H82000400 Or DIMOFS_BUTTON4)  ' Button 4 */
    DIMOUSE_BUTTON5 = (&H82000400 Or DIMOFS_BUTTON5)  ' Button 5 */
    DIMOUSE_BUTTON6 = (&H82000400 Or DIMOFS_BUTTON6)  ' Button 6 */
    DIMOUSE_BUTTON7 = (&H82000400 Or DIMOFS_BUTTON7)  ' Button 7 */
End Enum

Public Enum DIVOICEFLAGS
    DIVOICE_CHANNEL1 = &H83000401
    DIVOICE_CHANNEL2 = &H83000402
    DIVOICE_CHANNEL3 = &H83000403
    DIVOICE_CHANNEL4 = &H83000404
    DIVOICE_CHANNEL5 = &H83000405
    DIVOICE_CHANNEL6 = &H83000406
    DIVOICE_CHANNEL7 = &H83000407
    DIVOICE_CHANNEL8 = &H83000408
    DIVOICE_TEAM = &H83000409
    DIVOICE_ALL = &H8300040A
    DIVOICE_RECORDMUTE = &H8300040B
    DIVOICE_PLAYBACKMUTE = &H8300040C
    DIVOICE_TRANSMIT = &H8300040D
    DIVOICE_VOICECOMMAND = &H83000410
End Enum

Public Enum DIGENRE
    DIVIRTUAL_DRIVING_RACE = &H01000000
    DIAXIS_DRIVINGR_STEER = &H01008A01
    DIAXIS_DRIVINGR_ACCELERATE = &H01039202
    DIAXIS_DRIVINGR_BRAKE = &H01041203
    DIBUTTON_DRIVINGR_SHIFTUP = &H01000C01
    DIBUTTON_DRIVINGR_SHIFTDOWN = &H01000C02
    DIBUTTON_DRIVINGR_VIEW = &H01001C03
    DIBUTTON_DRIVINGR_MENU = &H010004FD
    DIAXIS_DRIVINGR_ACCEL_AND_BRAKE = &H01014A04
    DIHATSWITCH_DRIVINGR_GLANCE = &H01004601
    DIBUTTON_DRIVINGR_BRAKE = &H01004C04
    DIBUTTON_DRIVINGR_DASHBOARD = &H01004405
    DIBUTTON_DRIVINGR_AIDS = &H01004406
    DIBUTTON_DRIVINGR_MAP = &H01004407
    DIBUTTON_DRIVINGR_BOOST = &H01004408
    DIBUTTON_DRIVINGR_PIT = &H01004409
    DIBUTTON_DRIVINGR_ACCELERATE_LINK = &H0103D4E0
    DIBUTTON_DRIVINGR_STEER_LEFT_LINK = &H0100CCE4
    DIBUTTON_DRIVINGR_STEER_RIGHT_LINK = &H0100CCEC
    DIBUTTON_DRIVINGR_GLANCE_LEFT_LINK = &H0107C4E4
    DIBUTTON_DRIVINGR_GLANCE_RIGHT_LINK = &H0107C4EC
    DIBUTTON_DRIVINGR_DEVICE = &H010044FE
    DIBUTTON_DRIVINGR_PAUSE = &H010044FC
    /*--- Driving Simulator - Combat
    Combat from within a vehicle is primary objective  ---*/
    DIVIRTUAL_DRIVING_COMBAT = &H02000000
    DIAXIS_DRIVINGC_STEER = &H02008A01
    DIAXIS_DRIVINGC_ACCELERATE = &H02039202
    DIAXIS_DRIVINGC_BRAKE = &H02041203
    DIBUTTON_DRIVINGC_FIRE = &H02000C01
    DIBUTTON_DRIVINGC_WEAPONS = &H02000C02
    DIBUTTON_DRIVINGC_TARGET = &H02000C03
    DIBUTTON_DRIVINGC_MENU = &H020004FD
    DIAXIS_DRIVINGC_ACCEL_AND_BRAKE = &H02014A04
    DIHATSWITCH_DRIVINGC_GLANCE = &H02004601
    DIBUTTON_DRIVINGC_SHIFTUP = &H02004C04
    DIBUTTON_DRIVINGC_SHIFTDOWN = &H02004C05
    DIBUTTON_DRIVINGC_DASHBOARD = &H02004406
    DIBUTTON_DRIVINGC_AIDS = &H02004407
    DIBUTTON_DRIVINGC_BRAKE = &H02004C08
    DIBUTTON_DRIVINGC_FIRESECONDARY = &H02004C09
    DIBUTTON_DRIVINGC_ACCELERATE_LINK = &H0203D4E0
    DIBUTTON_DRIVINGC_STEER_LEFT_LINK = &H0200CCE4
    DIBUTTON_DRIVINGC_STEER_RIGHT_LINK = &H0200CCEC
    DIBUTTON_DRIVINGC_GLANCE_LEFT_LINK = &H0207C4E4
    DIBUTTON_DRIVINGC_GLANCE_RIGHT_LINK = &H0207C4EC
    DIBUTTON_DRIVINGC_DEVICE = &H020044FE
    DIBUTTON_DRIVINGC_PAUSE = &H020044FC
 
    DIVIRTUAL_DRIVING_TANK = &H03000000
    DIAXIS_DRIVINGT_STEER = &H03008A01
    DIAXIS_DRIVINGT_BARREL = &H03010202
    DIAXIS_DRIVINGT_ACCELERATE = &H03039203
    DIAXIS_DRIVINGT_ROTATE = &H03020204
    DIBUTTON_DRIVINGT_FIRE = &H03000C01
    DIBUTTON_DRIVINGT_WEAPONS = &H03000C02
    DIBUTTON_DRIVINGT_TARGET = &H03000C03
    DIBUTTON_DRIVINGT_MENU = &H030004FD
    DIHATSWITCH_DRIVINGT_GLANCE = &H03004601
    DIAXIS_DRIVINGT_BRAKE = &H03045205
    DIAXIS_DRIVINGT_ACCEL_AND_BRAKE = &H03014A06
    DIBUTTON_DRIVINGT_VIEW = &H03005C04
    DIBUTTON_DRIVINGT_DASHBOARD = &H03005C05
    DIBUTTON_DRIVINGT_BRAKE = &H03004C06
    DIBUTTON_DRIVINGT_FIRESECONDARY = &H03004C07
    DIBUTTON_DRIVINGT_ACCELERATE_LINK = &H0303D4E0
    DIBUTTON_DRIVINGT_STEER_LEFT_LINK = &H0300CCE4
    DIBUTTON_DRIVINGT_STEER_RIGHT_LINK = &H0300CCEC
    DIBUTTON_DRIVINGT_BARREL_UP_LINK = &H030144E0
    DIBUTTON_DRIVINGT_BARREL_DOWN_LINK = &H030144E8
    DIBUTTON_DRIVINGT_ROTATE_LEFT_LINK = &H030244E4
    DIBUTTON_DRIVINGT_ROTATE_RIGHT_LINK = &H030244EC
    DIBUTTON_DRIVINGT_GLANCE_LEFT_LINK = &H0307C4E4
    DIBUTTON_DRIVINGT_GLANCE_RIGHT_LINK = &H0307C4EC
    DIBUTTON_DRIVINGT_DEVICE = &H030044FE
    DIBUTTON_DRIVINGT_PAUSE = &H030044FC
 
    DIVIRTUAL_FLYING_CIVILIAN = &H04000000
    DIAXIS_FLYINGC_BANK = &H04008A01
    DIAXIS_FLYINGC_PITCH = &H04010A02
    DIAXIS_FLYINGC_THROTTLE = &H04039203
    DIBUTTON_FLYINGC_VIEW = &H04002401
    DIBUTTON_FLYINGC_DISPLAY = &H04002402
    DIBUTTON_FLYINGC_GEAR = &H04002C03
    DIBUTTON_FLYINGC_MENU = &H040004FD
    DIHATSWITCH_FLYINGC_GLANCE = &H04004601
    DIAXIS_FLYINGC_BRAKE = &H04046A04
    DIAXIS_FLYINGC_RUDDER = &H04025205
    DIAXIS_FLYINGC_FLAPS = &H04055A06
    DIBUTTON_FLYINGC_FLAPSUP = &H04006404
    DIBUTTON_FLYINGC_FLAPSDOWN = &H04006405
    DIBUTTON_FLYINGC_BRAKE_LINK = &H04046CE0
    DIBUTTON_FLYINGC_FASTER_LINK = &H0403D4E0
    DIBUTTON_FLYINGC_SLOWER_LINK = &H0403D4E8
    DIBUTTON_FLYINGC_GLANCE_LEFT_LINK = &H0407C4E4
    DIBUTTON_FLYINGC_GLANCE_RIGHT_LINK = &H0407C4EC
    DIBUTTON_FLYINGC_GLANCE_UP_LINK = &H0407C4E0
    DIBUTTON_FLYINGC_GLANCE_DOWN_LINK = &H0407C4E8
    DIBUTTON_FLYINGC_DEVICE = &H040044FE
    DIBUTTON_FLYINGC_PAUSE = &H040044FC
 
    DIVIRTUAL_FLYING_MILITARY = &H05000000
    DIAXIS_FLYINGM_BANK = &H05008A01
    DIAXIS_FLYINGM_PITCH = &H05010A02
    DIAXIS_FLYINGM_THROTTLE = &H05039203
    DIBUTTON_FLYINGM_FIRE = &H05000C01
    DIBUTTON_FLYINGM_WEAPONS = &H05000C02
    DIBUTTON_FLYINGM_TARGET = &H05000C03
    DIBUTTON_FLYINGM_MENU = &H050004FD
    DIHATSWITCH_FLYINGM_GLANCE = &H05004601
    DIBUTTON_FLYINGM_COUNTER = &H05005C04
    DIAXIS_FLYINGM_RUDDER = &H05024A04
    DIAXIS_FLYINGM_BRAKE = &H05046205
    DIBUTTON_FLYINGM_VIEW = &H05006405
    DIBUTTON_FLYINGM_DISPLAY = &H05006406
    DIAXIS_FLYINGM_FLAPS = &H05055206
    DIBUTTON_FLYINGM_FLAPSUP = &H05005407
    DIBUTTON_FLYINGM_FLAPSDOWN = &H05005408
    DIBUTTON_FLYINGM_FIRESECONDARY = &H05004C09
    DIBUTTON_FLYINGM_GEAR = &H0500640A
    DIBUTTON_FLYINGM_BRAKE_LINK = &H050464E0
    DIBUTTON_FLYINGM_FASTER_LINK = &H0503D4E0
    DIBUTTON_FLYINGM_SLOWER_LINK = &H0503D4E8
    DIBUTTON_FLYINGM_GLANCE_LEFT_LINK = &H0507C4E4
    DIBUTTON_FLYINGM_GLANCE_RIGHT_LINK = &H0507C4EC
    DIBUTTON_FLYINGM_GLANCE_UP_LINK = &H0507C4E0
    DIBUTTON_FLYINGM_GLANCE_DOWN_LINK = &H0507C4E8
    DIBUTTON_FLYINGM_DEVICE = &H050044FE
    DIBUTTON_FLYINGM_PAUSE = &H050044FC
 
    DIVIRTUAL_FLYING_HELICOPTER = &H06000000
    DIAXIS_FLYINGH_BANK = &H06008A01
    DIAXIS_FLYINGH_PITCH = &H06010A02
    DIAXIS_FLYINGH_COLLECTIVE = &H06018A03
    DIBUTTON_FLYINGH_FIRE = &H06001401
    DIBUTTON_FLYINGH_WEAPONS = &H06001402
    DIBUTTON_FLYINGH_TARGET = &H06001403
    DIBUTTON_FLYINGH_MENU = &H060004FD
    DIHATSWITCH_FLYINGH_GLANCE = &H06004601
    DIAXIS_FLYINGH_TORQUE = &H06025A04
    DIAXIS_FLYINGH_THROTTLE = &H0603DA05
    DIBUTTON_FLYINGH_COUNTER = &H06005404
    DIBUTTON_FLYINGH_VIEW = &H06006405
    DIBUTTON_FLYINGH_GEAR = &H06006406
    DIBUTTON_FLYINGH_FIRESECONDARY = &H06004C07
    DIBUTTON_FLYINGH_FASTER_LINK = &H0603DCE0
    DIBUTTON_FLYINGH_SLOWER_LINK = &H0603DCE8
    DIBUTTON_FLYINGH_GLANCE_LEFT_LINK = &H0607C4E4
    DIBUTTON_FLYINGH_GLANCE_RIGHT_LINK = &H0607C4EC
    DIBUTTON_FLYINGH_GLANCE_UP_LINK = &H0607C4E0
    DIBUTTON_FLYINGH_GLANCE_DOWN_LINK = &H0607C4E8
    DIBUTTON_FLYINGH_DEVICE = &H060044FE
    DIBUTTON_FLYINGH_PAUSE = &H060044FC
 
    DIVIRTUAL_SPACESIM = &H07000000
    DIAXIS_SPACESIM_LATERAL = &H07008201
    DIAXIS_SPACESIM_MOVE = &H07010202
    DIAXIS_SPACESIM_THROTTLE = &H07038203
    DIBUTTON_SPACESIM_FIRE = &H07000401
    DIBUTTON_SPACESIM_WEAPONS = &H07000402
    DIBUTTON_SPACESIM_TARGET = &H07000403
    DIBUTTON_SPACESIM_MENU = &H070004FD
    DIHATSWITCH_SPACESIM_GLANCE = &H07004601
    DIAXIS_SPACESIM_CLIMB = &H0701C204
    DIAXIS_SPACESIM_ROTATE = &H07024205
    DIBUTTON_SPACESIM_VIEW = &H07004404
    DIBUTTON_SPACESIM_DISPLAY = &H07004405
    DIBUTTON_SPACESIM_RAISE = &H07004406
    DIBUTTON_SPACESIM_LOWER = &H07004407
    DIBUTTON_SPACESIM_GEAR = &H07004408
    DIBUTTON_SPACESIM_FIRESECONDARY = &H07004409
    DIBUTTON_SPACESIM_LEFT_LINK = &H0700C4E4
    DIBUTTON_SPACESIM_RIGHT_LINK = &H0700C4EC
    DIBUTTON_SPACESIM_FORWARD_LINK = &H070144E0
    DIBUTTON_SPACESIM_BACKWARD_LINK = &H070144E8
    DIBUTTON_SPACESIM_FASTER_LINK = &H0703C4E0
    DIBUTTON_SPACESIM_SLOWER_LINK = &H0703C4E8
    DIBUTTON_SPACESIM_TURN_LEFT_LINK = &H070244E4
    DIBUTTON_SPACESIM_TURN_RIGHT_LINK = &H070244EC
    DIBUTTON_SPACESIM_GLANCE_LEFT_LINK = &H0707C4E4
    DIBUTTON_SPACESIM_GLANCE_RIGHT_LINK = &H0707C4EC
    DIBUTTON_SPACESIM_GLANCE_UP_LINK = &H0707C4E0
    DIBUTTON_SPACESIM_GLANCE_DOWN_LINK = &H0707C4E8
    DIBUTTON_SPACESIM_DEVICE = &H070044FE
    DIBUTTON_SPACESIM_PAUSE = &H070044FC
 
    DIVIRTUAL_FIGHTING_HAND2HAND = &H08000000
    DIAXIS_FIGHTINGH_LATERAL = &H08008201
    DIAXIS_FIGHTINGH_MOVE = &H08010202
    DIBUTTON_FIGHTINGH_PUNCH = &H08000401
    DIBUTTON_FIGHTINGH_KICK = &H08000402
    DIBUTTON_FIGHTINGH_BLOCK = &H08000403
    DIBUTTON_FIGHTINGH_CROUCH = &H08000404
    DIBUTTON_FIGHTINGH_JUMP = &H08000405
    DIBUTTON_FIGHTINGH_SPECIAL1 = &H08000406
    DIBUTTON_FIGHTINGH_SPECIAL2 = &H08000407
    DIBUTTON_FIGHTINGH_MENU = &H080004FD
    DIBUTTON_FIGHTINGH_SELECT = &H08004408
    DIHATSWITCH_FIGHTINGH_SLIDE = &H08004601
    DIBUTTON_FIGHTINGH_DISPLAY = &H08004409
    DIAXIS_FIGHTINGH_ROTATE = &H08024203
    DIBUTTON_FIGHTINGH_DODGE = &H0800440A
    DIBUTTON_FIGHTINGH_LEFT_LINK = &H0800C4E4
    DIBUTTON_FIGHTINGH_RIGHT_LINK = &H0800C4EC
    DIBUTTON_FIGHTINGH_FORWARD_LINK = &H080144E0
    DIBUTTON_FIGHTINGH_BACKWARD_LINK = &H080144E8
    DIBUTTON_FIGHTINGH_DEVICE = &H080044FE
    DIBUTTON_FIGHTINGH_PAUSE = &H080044FC
 
    DIVIRTUAL_FIGHTING_FPS = &H09000000
    DIAXIS_FPS_ROTATE = &H09008201
    DIAXIS_FPS_MOVE = &H09010202
    DIBUTTON_FPS_FIRE = &H09000401
    DIBUTTON_FPS_WEAPONS = &H09000402
    DIBUTTON_FPS_APPLY = &H09000403
    DIBUTTON_FPS_SELECT = &H09000404
    DIBUTTON_FPS_CROUCH = &H09000405
    DIBUTTON_FPS_JUMP = &H09000406
    DIAXIS_FPS_LOOKUPDOWN = &H09018203
    DIBUTTON_FPS_STRAFE = &H09000407
    DIBUTTON_FPS_MENU = &H090004FD
    DIHATSWITCH_FPS_GLANCE = &H09004601
    DIBUTTON_FPS_DISPLAY = &H09004408
    DIAXIS_FPS_SIDESTEP = &H09024204
    DIBUTTON_FPS_DODGE = &H09004409
    DIBUTTON_FPS_GLANCEL = &H0900440A
    DIBUTTON_FPS_GLANCER = &H0900440B
    DIBUTTON_FPS_FIRESECONDARY = &H0900440C
    DIBUTTON_FPS_ROTATE_LEFT_LINK = &H0900C4E4
    DIBUTTON_FPS_ROTATE_RIGHT_LINK = &H0900C4EC
    DIBUTTON_FPS_FORWARD_LINK = &H090144E0
    DIBUTTON_FPS_BACKWARD_LINK = &H090144E8
    DIBUTTON_FPS_GLANCE_UP_LINK = &H0901C4E0
    DIBUTTON_FPS_GLANCE_DOWN_LINK = &H0901C4E8
    DIBUTTON_FPS_STEP_LEFT_LINK = &H090244E4
    DIBUTTON_FPS_STEP_RIGHT_LINK = &H090244EC
    DIBUTTON_FPS_DEVICE = &H090044FE
    DIBUTTON_FPS_PAUSE = &H090044FC
 
    DIVIRTUAL_FIGHTING_THIRDPERSON = &H0A000000
    DIAXIS_TPS_TURN = &H0A020201
    DIAXIS_TPS_MOVE = &H0A010202
    DIBUTTON_TPS_RUN = &H0A000401
    DIBUTTON_TPS_ACTION = &H0A000402
    DIBUTTON_TPS_SELECT = &H0A000403
    DIBUTTON_TPS_USE = &H0A000404
    DIBUTTON_TPS_JUMP = &H0A000405
    DIBUTTON_TPS_MENU = &H0A0004FD
    DIHATSWITCH_TPS_GLANCE = &H0A004601
    DIBUTTON_TPS_VIEW = &H0A004406
    DIBUTTON_TPS_STEPLEFT = &H0A004407
    DIBUTTON_TPS_STEPRIGHT = &H0A004408
    DIAXIS_TPS_STEP = &H0A00C203
    DIBUTTON_TPS_DODGE = &H0A004409
    DIBUTTON_TPS_INVENTORY = &H0A00440A
    DIBUTTON_TPS_TURN_LEFT_LINK = &H0A0244E4
    DIBUTTON_TPS_TURN_RIGHT_LINK = &H0A0244EC
    DIBUTTON_TPS_FORWARD_LINK = &H0A0144E0
    DIBUTTON_TPS_BACKWARD_LINK = &H0A0144E8
    DIBUTTON_TPS_GLANCE_UP_LINK = &H0A07C4E0
    DIBUTTON_TPS_GLANCE_DOWN_LINK = &H0A07C4E8
    DIBUTTON_TPS_GLANCE_LEFT_LINK = &H0A07C4E4
    DIBUTTON_TPS_GLANCE_RIGHT_LINK = &H0A07C4EC
    DIBUTTON_TPS_DEVICE = &H0A0044FE
    DIBUTTON_TPS_PAUSE = &H0A0044FC
 
    DIVIRTUAL_STRATEGY_ROLEPLAYING = &H0B000000
    DIAXIS_STRATEGYR_LATERAL = &H0B008201
    DIAXIS_STRATEGYR_MOVE = &H0B010202
    DIBUTTON_STRATEGYR_GET = &H0B000401
    DIBUTTON_STRATEGYR_APPLY = &H0B000402
    DIBUTTON_STRATEGYR_SELECT = &H0B000403
    DIBUTTON_STRATEGYR_ATTACK = &H0B000404
    DIBUTTON_STRATEGYR_CAST = &H0B000405
    DIBUTTON_STRATEGYR_CROUCH = &H0B000406
    DIBUTTON_STRATEGYR_JUMP = &H0B000407
    DIBUTTON_STRATEGYR_MENU = &H0B0004FD
    DIHATSWITCH_STRATEGYR_GLANCE = &H0B004601
    DIBUTTON_STRATEGYR_MAP = &H0B004408
    DIBUTTON_STRATEGYR_DISPLAY = &H0B004409
    DIAXIS_STRATEGYR_ROTATE = &H0B024203
    DIBUTTON_STRATEGYR_LEFT_LINK = &H0B00C4E4
    DIBUTTON_STRATEGYR_RIGHT_LINK = &H0B00C4EC
    DIBUTTON_STRATEGYR_FORWARD_LINK = &H0B0144E0
    DIBUTTON_STRATEGYR_BACK_LINK = &H0B0144E8
    DIBUTTON_STRATEGYR_ROTATE_LEFT_LINK = &H0B0244E4
    DIBUTTON_STRATEGYR_ROTATE_RIGHT_LINK = &H0B0244EC
    DIBUTTON_STRATEGYR_DEVICE = &H0B0044FE
    DIBUTTON_STRATEGYR_PAUSE = &H0B0044FC
 
    DIVIRTUAL_STRATEGY_TURN = &H0C000000
    DIAXIS_STRATEGYT_LATERAL = &H0C008201
    DIAXIS_STRATEGYT_MOVE = &H0C010202
    DIBUTTON_STRATEGYT_SELECT = &H0C000401
    DIBUTTON_STRATEGYT_INSTRUCT = &H0C000402
    DIBUTTON_STRATEGYT_APPLY = &H0C000403
    DIBUTTON_STRATEGYT_TEAM = &H0C000404
    DIBUTTON_STRATEGYT_TURN = &H0C000405
    DIBUTTON_STRATEGYT_MENU = &H0C0004FD
    DIBUTTON_STRATEGYT_ZOOM = &H0C004406
    DIBUTTON_STRATEGYT_MAP = &H0C004407
    DIBUTTON_STRATEGYT_DISPLAY = &H0C004408
    DIBUTTON_STRATEGYT_LEFT_LINK = &H0C00C4E4
    DIBUTTON_STRATEGYT_RIGHT_LINK = &H0C00C4EC
    DIBUTTON_STRATEGYT_FORWARD_LINK = &H0C0144E0
    DIBUTTON_STRATEGYT_BACK_LINK = &H0C0144E8
    DIBUTTON_STRATEGYT_DEVICE = &H0C0044FE
    DIBUTTON_STRATEGYT_PAUSE = &H0C0044FC
 
    DIVIRTUAL_SPORTS_HUNTING = &H0D000000
    DIAXIS_HUNTING_LATERAL = &H0D008201
    DIAXIS_HUNTING_MOVE = &H0D010202
    DIBUTTON_HUNTING_FIRE = &H0D000401
    DIBUTTON_HUNTING_AIM = &H0D000402
    DIBUTTON_HUNTING_WEAPON = &H0D000403
    DIBUTTON_HUNTING_BINOCULAR = &H0D000404
    DIBUTTON_HUNTING_CALL = &H0D000405
    DIBUTTON_HUNTING_MAP = &H0D000406
    DIBUTTON_HUNTING_SPECIAL = &H0D000407
    DIBUTTON_HUNTING_MENU = &H0D0004FD
    DIHATSWITCH_HUNTING_GLANCE = &H0D004601
    DIBUTTON_HUNTING_DISPLAY = &H0D004408
    DIAXIS_HUNTING_ROTATE = &H0D024203
    DIBUTTON_HUNTING_CROUCH = &H0D004409
    DIBUTTON_HUNTING_JUMP = &H0D00440A
    DIBUTTON_HUNTING_FIRESECONDARY = &H0D00440B
    DIBUTTON_HUNTING_LEFT_LINK = &H0D00C4E4
    DIBUTTON_HUNTING_RIGHT_LINK = &H0D00C4EC
    DIBUTTON_HUNTING_FORWARD_LINK = &H0D0144E0
    DIBUTTON_HUNTING_BACK_LINK = &H0D0144E8
    DIBUTTON_HUNTING_ROTATE_LEFT_LINK = &H0D0244E4
    DIBUTTON_HUNTING_ROTATE_RIGHT_LINK = &H0D0244EC
    DIBUTTON_HUNTING_DEVICE = &H0D0044FE
    DIBUTTON_HUNTING_PAUSE = &H0D0044FC
 
    DIVIRTUAL_SPORTS_FISHING = &H0E000000
    DIAXIS_FISHING_LATERAL = &H0E008201
    DIAXIS_FISHING_MOVE = &H0E010202
    DIBUTTON_FISHING_CAST = &H0E000401
    DIBUTTON_FISHING_TYPE = &H0E000402
    DIBUTTON_FISHING_BINOCULAR = &H0E000403
    DIBUTTON_FISHING_BAIT = &H0E000404
    DIBUTTON_FISHING_MAP = &H0E000405
    DIBUTTON_FISHING_MENU = &H0E0004FD
    DIHATSWITCH_FISHING_GLANCE = &H0E004601
    DIBUTTON_FISHING_DISPLAY = &H0E004406
    DIAXIS_FISHING_ROTATE = &H0E024203
    DIBUTTON_FISHING_CROUCH = &H0E004407
    DIBUTTON_FISHING_JUMP = &H0E004408
    DIBUTTON_FISHING_LEFT_LINK = &H0E00C4E4
    DIBUTTON_FISHING_RIGHT_LINK = &H0E00C4EC
    DIBUTTON_FISHING_FORWARD_LINK = &H0E0144E0
    DIBUTTON_FISHING_BACK_LINK = &H0E0144E8
    DIBUTTON_FISHING_ROTATE_LEFT_LINK = &H0E0244E4
    DIBUTTON_FISHING_ROTATE_RIGHT_LINK = &H0E0244EC
    DIBUTTON_FISHING_DEVICE = &H0E0044FE
    DIBUTTON_FISHING_PAUSE = &H0E0044FC
 
    DIVIRTUAL_SPORTS_BASEBALL_BAT = &H0F000000
    DIAXIS_BASEBALLB_LATERAL = &H0F008201
    DIAXIS_BASEBALLB_MOVE = &H0F010202
    DIBUTTON_BASEBALLB_SELECT = &H0F000401
    DIBUTTON_BASEBALLB_NORMAL = &H0F000402
    DIBUTTON_BASEBALLB_POWER = &H0F000403
    DIBUTTON_BASEBALLB_BUNT = &H0F000404
    DIBUTTON_BASEBALLB_STEAL = &H0F000405
    DIBUTTON_BASEBALLB_BURST = &H0F000406
    DIBUTTON_BASEBALLB_SLIDE = &H0F000407
    DIBUTTON_BASEBALLB_CONTACT = &H0F000408
    DIBUTTON_BASEBALLB_MENU = &H0F0004FD
    DIBUTTON_BASEBALLB_NOSTEAL = &H0F004409
    DIBUTTON_BASEBALLB_BOX = &H0F00440A
    DIBUTTON_BASEBALLB_LEFT_LINK = &H0F00C4E4
    DIBUTTON_BASEBALLB_RIGHT_LINK = &H0F00C4EC
    DIBUTTON_BASEBALLB_FORWARD_LINK = &H0F0144E0
    DIBUTTON_BASEBALLB_BACK_LINK = &H0F0144E8
    DIBUTTON_BASEBALLB_DEVICE = &H0F0044FE
    DIBUTTON_BASEBALLB_PAUSE = &H0F0044FC
 
    DIVIRTUAL_SPORTS_BASEBALL_PITCH = &H10000000
    DIAXIS_BASEBALLP_LATERAL = &H10008201
    DIAXIS_BASEBALLP_MOVE = &H10010202
    DIBUTTON_BASEBALLP_SELECT = &H10000401
    DIBUTTON_BASEBALLP_PITCH = &H10000402
    DIBUTTON_BASEBALLP_BASE = &H10000403
    DIBUTTON_BASEBALLP_THROW = &H10000404
    DIBUTTON_BASEBALLP_FAKE = &H10000405
    DIBUTTON_BASEBALLP_MENU = &H100004FD
    DIBUTTON_BASEBALLP_WALK = &H10004406
    DIBUTTON_BASEBALLP_LOOK = &H10004407
    DIBUTTON_BASEBALLP_LEFT_LINK = &H1000C4E4
    DIBUTTON_BASEBALLP_RIGHT_LINK = &H1000C4EC
    DIBUTTON_BASEBALLP_FORWARD_LINK = &H100144E0
    DIBUTTON_BASEBALLP_BACK_LINK = &H100144E8
    DIBUTTON_BASEBALLP_DEVICE = &H100044FE
    DIBUTTON_BASEBALLP_PAUSE = &H100044FC
 
    DIVIRTUAL_SPORTS_BASEBALL_FIELD = &H11000000
    DIAXIS_BASEBALLF_LATERAL = &H11008201
    DIAXIS_BASEBALLF_MOVE = &H11010202
    DIBUTTON_BASEBALLF_NEAREST = &H11000401
    DIBUTTON_BASEBALLF_THROW1 = &H11000402
    DIBUTTON_BASEBALLF_THROW2 = &H11000403
    DIBUTTON_BASEBALLF_BURST = &H11000404
    DIBUTTON_BASEBALLF_JUMP = &H11000405
    DIBUTTON_BASEBALLF_DIVE = &H11000406
    DIBUTTON_BASEBALLF_MENU = &H110004FD
    DIBUTTON_BASEBALLF_SHIFTIN = &H11004407
    DIBUTTON_BASEBALLF_SHIFTOUT = &H11004408
    DIBUTTON_BASEBALLF_AIM_LEFT_LINK = &H1100C4E4
    DIBUTTON_BASEBALLF_AIM_RIGHT_LINK = &H1100C4EC
    DIBUTTON_BASEBALLF_FORWARD_LINK = &H110144E0
    DIBUTTON_BASEBALLF_BACK_LINK = &H110144E8
    DIBUTTON_BASEBALLF_DEVICE = &H110044FE
    DIBUTTON_BASEBALLF_PAUSE = &H110044FC
 
    DIVIRTUAL_SPORTS_BASKETBALL_OFFENSE = &H12000000
    DIAXIS_BBALLO_LATERAL = &H12008201
    DIAXIS_BBALLO_MOVE = &H12010202
    DIBUTTON_BBALLO_SHOOT = &H12000401
    DIBUTTON_BBALLO_DUNK = &H12000402
    DIBUTTON_BBALLO_PASS = &H12000403
    DIBUTTON_BBALLO_FAKE = &H12000404
    DIBUTTON_BBALLO_SPECIAL = &H12000405
    DIBUTTON_BBALLO_PLAYER = &H12000406
    DIBUTTON_BBALLO_BURST = &H12000407
    DIBUTTON_BBALLO_CALL = &H12000408
    DIBUTTON_BBALLO_MENU = &H120004FD
    DIHATSWITCH_BBALLO_GLANCE = &H12004601
    DIBUTTON_BBALLO_SCREEN = &H12004409
    DIBUTTON_BBALLO_PLAY = &H1200440A
    DIBUTTON_BBALLO_JAB = &H1200440B
    DIBUTTON_BBALLO_POST = &H1200440C
    DIBUTTON_BBALLO_TIMEOUT = &H1200440D
    DIBUTTON_BBALLO_SUBSTITUTE = &H1200440E
    DIBUTTON_BBALLO_LEFT_LINK = &H1200C4E4
    DIBUTTON_BBALLO_RIGHT_LINK = &H1200C4EC
    DIBUTTON_BBALLO_FORWARD_LINK = &H120144E0
    DIBUTTON_BBALLO_BACK_LINK = &H120144E8
    DIBUTTON_BBALLO_DEVICE = &H120044FE
    DIBUTTON_BBALLO_PAUSE = &H120044FC
 
    DIVIRTUAL_SPORTS_BASKETBALL_DEFENSE = &H13000000
    DIAXIS_BBALLD_LATERAL = &H13008201
    DIAXIS_BBALLD_MOVE = &H13010202
    DIBUTTON_BBALLD_JUMP = &H13000401
    DIBUTTON_BBALLD_STEAL = &H13000402
    DIBUTTON_BBALLD_FAKE = &H13000403
    DIBUTTON_BBALLD_SPECIAL = &H13000404
    DIBUTTON_BBALLD_PLAYER = &H13000405
    DIBUTTON_BBALLD_BURST = &H13000406
    DIBUTTON_BBALLD_PLAY = &H13000407
    DIBUTTON_BBALLD_MENU = &H130004FD
    DIHATSWITCH_BBALLD_GLANCE = &H13004601
    DIBUTTON_BBALLD_TIMEOUT = &H13004408
    DIBUTTON_BBALLD_SUBSTITUTE = &H13004409
    DIBUTTON_BBALLD_LEFT_LINK = &H1300C4E4
    DIBUTTON_BBALLD_RIGHT_LINK = &H1300C4EC
    DIBUTTON_BBALLD_FORWARD_LINK = &H130144E0
    DIBUTTON_BBALLD_BACK_LINK = &H130144E8
    DIBUTTON_BBALLD_DEVICE = &H130044FE
    DIBUTTON_BBALLD_PAUSE = &H130044FC
 
    DIVIRTUAL_SPORTS_FOOTBALL_FIELD = &H14000000
    DIBUTTON_FOOTBALLP_PLAY = &H14000401
    DIBUTTON_FOOTBALLP_SELECT = &H14000402
    DIBUTTON_FOOTBALLP_HELP = &H14000403
    DIBUTTON_FOOTBALLP_MENU = &H140004FD
    DIBUTTON_FOOTBALLP_DEVICE = &H140044FE
    DIBUTTON_FOOTBALLP_PAUSE = &H140044FC
 
    DIVIRTUAL_SPORTS_FOOTBALL_QBCK = &H15000000
    DIAXIS_FOOTBALLQ_LATERAL = &H15008201
    DIAXIS_FOOTBALLQ_MOVE = &H15010202
    DIBUTTON_FOOTBALLQ_SELECT = &H15000401
    DIBUTTON_FOOTBALLQ_SNAP = &H15000402
    DIBUTTON_FOOTBALLQ_JUMP = &H15000403
    DIBUTTON_FOOTBALLQ_SLIDE = &H15000404
    DIBUTTON_FOOTBALLQ_PASS = &H15000405
    DIBUTTON_FOOTBALLQ_FAKE = &H15000406
    DIBUTTON_FOOTBALLQ_MENU = &H150004FD
    DIBUTTON_FOOTBALLQ_FAKESNAP = &H15004407
    DIBUTTON_FOOTBALLQ_MOTION = &H15004408
    DIBUTTON_FOOTBALLQ_AUDIBLE = &H15004409
    DIBUTTON_FOOTBALLQ_LEFT_LINK = &H1500C4E4
    DIBUTTON_FOOTBALLQ_RIGHT_LINK = &H1500C4EC
    DIBUTTON_FOOTBALLQ_FORWARD_LINK = &H150144E0
    DIBUTTON_FOOTBALLQ_BACK_LINK = &H150144E8
    DIBUTTON_FOOTBALLQ_DEVICE = &H150044FE
    DIBUTTON_FOOTBALLQ_PAUSE = &H150044FC
 
    DIVIRTUAL_SPORTS_FOOTBALL_OFFENSE = &H16000000
    DIAXIS_FOOTBALLO_LATERAL = &H16008201
    DIAXIS_FOOTBALLO_MOVE = &H16010202
    DIBUTTON_FOOTBALLO_JUMP = &H16000401
    DIBUTTON_FOOTBALLO_LEFTARM = &H16000402
    DIBUTTON_FOOTBALLO_RIGHTARM = &H16000403
    DIBUTTON_FOOTBALLO_THROW = &H16000404
    DIBUTTON_FOOTBALLO_SPIN = &H16000405
    DIBUTTON_FOOTBALLO_MENU = &H160004FD
    DIBUTTON_FOOTBALLO_JUKE = &H16004406
    DIBUTTON_FOOTBALLO_SHOULDER = &H16004407
    DIBUTTON_FOOTBALLO_TURBO = &H16004408
    DIBUTTON_FOOTBALLO_DIVE = &H16004409
    DIBUTTON_FOOTBALLO_ZOOM = &H1600440A
    DIBUTTON_FOOTBALLO_SUBSTITUTE = &H1600440B
    DIBUTTON_FOOTBALLO_LEFT_LINK = &H1600C4E4
    DIBUTTON_FOOTBALLO_RIGHT_LINK = &H1600C4EC
    DIBUTTON_FOOTBALLO_FORWARD_LINK = &H160144E0
    DIBUTTON_FOOTBALLO_BACK_LINK = &H160144E8
    DIBUTTON_FOOTBALLO_DEVICE = &H160044FE
    DIBUTTON_FOOTBALLO_PAUSE = &H160044FC
 
    DIVIRTUAL_SPORTS_FOOTBALL_DEFENSE = &H17000000
    DIAXIS_FOOTBALLD_LATERAL = &H17008201
    DIAXIS_FOOTBALLD_MOVE = &H17010202
    DIBUTTON_FOOTBALLD_PLAY = &H17000401
    DIBUTTON_FOOTBALLD_SELECT = &H17000402
    DIBUTTON_FOOTBALLD_JUMP = &H17000403
    DIBUTTON_FOOTBALLD_TACKLE = &H17000404
    DIBUTTON_FOOTBALLD_FAKE = &H17000405
    DIBUTTON_FOOTBALLD_SUPERTACKLE = &H17000406
    DIBUTTON_FOOTBALLD_MENU = &H170004FD
    DIBUTTON_FOOTBALLD_SPIN = &H17004407
    DIBUTTON_FOOTBALLD_SWIM = &H17004408
    DIBUTTON_FOOTBALLD_BULLRUSH = &H17004409
    DIBUTTON_FOOTBALLD_RIP = &H1700440A
    DIBUTTON_FOOTBALLD_AUDIBLE = &H1700440B
    DIBUTTON_FOOTBALLD_ZOOM = &H1700440C
    DIBUTTON_FOOTBALLD_SUBSTITUTE = &H1700440D
    DIBUTTON_FOOTBALLD_LEFT_LINK = &H1700C4E4
    DIBUTTON_FOOTBALLD_RIGHT_LINK = &H1700C4EC
    DIBUTTON_FOOTBALLD_FORWARD_LINK = &H170144E0
    DIBUTTON_FOOTBALLD_BACK_LINK = &H170144E8
    DIBUTTON_FOOTBALLD_DEVICE = &H170044FE
    DIBUTTON_FOOTBALLD_PAUSE = &H170044FC
 
    DIVIRTUAL_SPORTS_GOLF = &H18000000
    DIAXIS_GOLF_LATERAL = &H18008201
    DIAXIS_GOLF_MOVE = &H18010202
    DIBUTTON_GOLF_SWING = &H18000401
    DIBUTTON_GOLF_SELECT = &H18000402
    DIBUTTON_GOLF_UP = &H18000403
    DIBUTTON_GOLF_DOWN = &H18000404
    DIBUTTON_GOLF_TERRAIN = &H18000405
    DIBUTTON_GOLF_FLYBY = &H18000406
    DIBUTTON_GOLF_MENU = &H180004FD
    DIHATSWITCH_GOLF_SCROLL = &H18004601
    DIBUTTON_GOLF_ZOOM = &H18004407
    DIBUTTON_GOLF_TIMEOUT = &H18004408
    DIBUTTON_GOLF_SUBSTITUTE = &H18004409
    DIBUTTON_GOLF_LEFT_LINK = &H1800C4E4
    DIBUTTON_GOLF_RIGHT_LINK = &H1800C4EC
    DIBUTTON_GOLF_FORWARD_LINK = &H180144E0
    DIBUTTON_GOLF_BACK_LINK = &H180144E8
    DIBUTTON_GOLF_DEVICE = &H180044FE
    DIBUTTON_GOLF_PAUSE = &H180044FC
 
    DIVIRTUAL_SPORTS_HOCKEY_OFFENSE = &H19000000
    DIAXIS_HOCKEYO_LATERAL = &H19008201
    DIAXIS_HOCKEYO_MOVE = &H19010202
    DIBUTTON_HOCKEYO_SHOOT = &H19000401
    DIBUTTON_HOCKEYO_PASS = &H19000402
    DIBUTTON_HOCKEYO_BURST = &H19000403
    DIBUTTON_HOCKEYO_SPECIAL = &H19000404
    DIBUTTON_HOCKEYO_FAKE = &H19000405
    DIBUTTON_HOCKEYO_MENU = &H190004FD
    DIHATSWITCH_HOCKEYO_SCROLL = &H19004601
    DIBUTTON_HOCKEYO_ZOOM = &H19004406
    DIBUTTON_HOCKEYO_STRATEGY = &H19004407
    DIBUTTON_HOCKEYO_TIMEOUT = &H19004408
    DIBUTTON_HOCKEYO_SUBSTITUTE = &H19004409
    DIBUTTON_HOCKEYO_LEFT_LINK = &H1900C4E4
    DIBUTTON_HOCKEYO_RIGHT_LINK = &H1900C4EC
    DIBUTTON_HOCKEYO_FORWARD_LINK = &H190144E0
    DIBUTTON_HOCKEYO_BACK_LINK = &H190144E8
    DIBUTTON_HOCKEYO_DEVICE = &H190044FE
    DIBUTTON_HOCKEYO_PAUSE = &H190044FC
 
    DIVIRTUAL_SPORTS_HOCKEY_DEFENSE = &H1A000000
    DIAXIS_HOCKEYD_LATERAL = &H1A008201
    DIAXIS_HOCKEYD_MOVE = &H1A010202
    DIBUTTON_HOCKEYD_PLAYER = &H1A000401
    DIBUTTON_HOCKEYD_STEAL = &H1A000402
    DIBUTTON_HOCKEYD_BURST = &H1A000403
    DIBUTTON_HOCKEYD_BLOCK = &H1A000404
    DIBUTTON_HOCKEYD_FAKE = &H1A000405
    DIBUTTON_HOCKEYD_MENU = &H1A0004FD
    DIHATSWITCH_HOCKEYD_SCROLL = &H1A004601
    DIBUTTON_HOCKEYD_ZOOM = &H1A004406
    DIBUTTON_HOCKEYD_STRATEGY = &H1A004407
    DIBUTTON_HOCKEYD_TIMEOUT = &H1A004408
    DIBUTTON_HOCKEYD_SUBSTITUTE = &H1A004409
    DIBUTTON_HOCKEYD_LEFT_LINK = &H1A00C4E4
    DIBUTTON_HOCKEYD_RIGHT_LINK = &H1A00C4EC
    DIBUTTON_HOCKEYD_FORWARD_LINK = &H1A0144E0
    DIBUTTON_HOCKEYD_BACK_LINK = &H1A0144E8
    DIBUTTON_HOCKEYD_DEVICE = &H1A0044FE
    DIBUTTON_HOCKEYD_PAUSE = &H1A0044FC
 
    DIVIRTUAL_SPORTS_HOCKEY_GOALIE = &H1B000000
    DIAXIS_HOCKEYG_LATERAL = &H1B008201
    DIAXIS_HOCKEYG_MOVE = &H1B010202
    DIBUTTON_HOCKEYG_PASS = &H1B000401
    DIBUTTON_HOCKEYG_POKE = &H1B000402
    DIBUTTON_HOCKEYG_STEAL = &H1B000403
    DIBUTTON_HOCKEYG_BLOCK = &H1B000404
    DIBUTTON_HOCKEYG_MENU = &H1B0004FD
    DIHATSWITCH_HOCKEYG_SCROLL = &H1B004601
    DIBUTTON_HOCKEYG_ZOOM = &H1B004405
    DIBUTTON_HOCKEYG_STRATEGY = &H1B004406
    DIBUTTON_HOCKEYG_TIMEOUT = &H1B004407
    DIBUTTON_HOCKEYG_SUBSTITUTE = &H1B004408
    DIBUTTON_HOCKEYG_LEFT_LINK = &H1B00C4E4
    DIBUTTON_HOCKEYG_RIGHT_LINK = &H1B00C4EC
    DIBUTTON_HOCKEYG_FORWARD_LINK = &H1B0144E0
    DIBUTTON_HOCKEYG_BACK_LINK = &H1B0144E8
    DIBUTTON_HOCKEYG_DEVICE = &H1B0044FE
    DIBUTTON_HOCKEYG_PAUSE = &H1B0044FC
 
    DIVIRTUAL_SPORTS_BIKING_MOUNTAIN = &H1C000000
    DIAXIS_BIKINGM_TURN = &H1C008201
    DIAXIS_BIKINGM_PEDAL = &H1C010202
    DIBUTTON_BIKINGM_JUMP = &H1C000401
    DIBUTTON_BIKINGM_CAMERA = &H1C000402
    DIBUTTON_BIKINGM_SPECIAL1 = &H1C000403
    DIBUTTON_BIKINGM_SELECT = &H1C000404
    DIBUTTON_BIKINGM_SPECIAL2 = &H1C000405
    DIBUTTON_BIKINGM_MENU = &H1C0004FD
    DIHATSWITCH_BIKINGM_SCROLL = &H1C004601
    DIBUTTON_BIKINGM_ZOOM = &H1C004406
    DIAXIS_BIKINGM_BRAKE = &H1C044203
    DIBUTTON_BIKINGM_LEFT_LINK = &H1C00C4E4
    DIBUTTON_BIKINGM_RIGHT_LINK = &H1C00C4EC
    DIBUTTON_BIKINGM_FASTER_LINK = &H1C0144E0
    DIBUTTON_BIKINGM_SLOWER_LINK = &H1C0144E8
    DIBUTTON_BIKINGM_BRAKE_BUTTON_LINK = &H1C0444E8
    DIBUTTON_BIKINGM_DEVICE = &H1C0044FE
    DIBUTTON_BIKINGM_PAUSE = &H1C0044FC
 
    DIVIRTUAL_SPORTS_SKIING = &H1D000000
    DIAXIS_SKIING_TURN = &H1D008201
    DIAXIS_SKIING_SPEED = &H1D010202
    DIBUTTON_SKIING_JUMP = &H1D000401
    DIBUTTON_SKIING_CROUCH = &H1D000402
    DIBUTTON_SKIING_CAMERA = &H1D000403
    DIBUTTON_SKIING_SPECIAL1 = &H1D000404
    DIBUTTON_SKIING_SELECT = &H1D000405
    DIBUTTON_SKIING_SPECIAL2 = &H1D000406
    DIBUTTON_SKIING_MENU = &H1D0004FD
    DIHATSWITCH_SKIING_GLANCE = &H1D004601
    DIBUTTON_SKIING_ZOOM = &H1D004407
    DIBUTTON_SKIING_LEFT_LINK = &H1D00C4E4
    DIBUTTON_SKIING_RIGHT_LINK = &H1D00C4EC
    DIBUTTON_SKIING_FASTER_LINK = &H1D0144E0
    DIBUTTON_SKIING_SLOWER_LINK = &H1D0144E8
    DIBUTTON_SKIING_DEVICE = &H1D0044FE
    DIBUTTON_SKIING_PAUSE = &H1D0044FC
 
    DIVIRTUAL_SPORTS_SOCCER_OFFENSE = &H1E000000
    DIAXIS_SOCCERO_LATERAL = &H1E008201
    DIAXIS_SOCCERO_MOVE = &H1E010202
    DIAXIS_SOCCERO_BEND = &H1E018203
    DIBUTTON_SOCCERO_SHOOT = &H1E000401
    DIBUTTON_SOCCERO_PASS = &H1E000402
    DIBUTTON_SOCCERO_FAKE = &H1E000403
    DIBUTTON_SOCCERO_PLAYER = &H1E000404
    DIBUTTON_SOCCERO_SPECIAL1 = &H1E000405
    DIBUTTON_SOCCERO_SELECT = &H1E000406
    DIBUTTON_SOCCERO_MENU = &H1E0004FD
    DIHATSWITCH_SOCCERO_GLANCE = &H1E004601
    DIBUTTON_SOCCERO_SUBSTITUTE = &H1E004407
    DIBUTTON_SOCCERO_SHOOTLOW = &H1E004408
    DIBUTTON_SOCCERO_SHOOTHIGH = &H1E004409
    DIBUTTON_SOCCERO_PASSTHRU = &H1E00440A
    DIBUTTON_SOCCERO_SPRINT = &H1E00440B
    DIBUTTON_SOCCERO_CONTROL = &H1E00440C
    DIBUTTON_SOCCERO_HEAD = &H1E00440D
    DIBUTTON_SOCCERO_LEFT_LINK = &H1E00C4E4
    DIBUTTON_SOCCERO_RIGHT_LINK = &H1E00C4EC
    DIBUTTON_SOCCERO_FORWARD_LINK = &H1E0144E0
    DIBUTTON_SOCCERO_BACK_LINK = &H1E0144E8
    DIBUTTON_SOCCERO_DEVICE = &H1E0044FE
    DIBUTTON_SOCCERO_PAUSE = &H1E0044FC
 
    DIVIRTUAL_SPORTS_SOCCER_DEFENSE = &H1F000000
    DIAXIS_SOCCERD_LATERAL = &H1F008201
    DIAXIS_SOCCERD_MOVE = &H1F010202
    DIBUTTON_SOCCERD_BLOCK = &H1F000401
    DIBUTTON_SOCCERD_STEAL = &H1F000402
    DIBUTTON_SOCCERD_FAKE = &H1F000403
    DIBUTTON_SOCCERD_PLAYER = &H1F000404
    DIBUTTON_SOCCERD_SPECIAL = &H1F000405
    DIBUTTON_SOCCERD_SELECT = &H1F000406
    DIBUTTON_SOCCERD_SLIDE = &H1F000407
    DIBUTTON_SOCCERD_MENU = &H1F0004FD
    DIHATSWITCH_SOCCERD_GLANCE = &H1F004601
    DIBUTTON_SOCCERD_FOUL = &H1F004408
    DIBUTTON_SOCCERD_HEAD = &H1F004409
    DIBUTTON_SOCCERD_CLEAR = &H1F00440A
    DIBUTTON_SOCCERD_GOALIECHARGE = &H1F00440B
    DIBUTTON_SOCCERD_SUBSTITUTE = &H1F00440C
    DIBUTTON_SOCCERD_LEFT_LINK = &H1F00C4E4
    DIBUTTON_SOCCERD_RIGHT_LINK = &H1F00C4EC
    DIBUTTON_SOCCERD_FORWARD_LINK = &H1F0144E0
    DIBUTTON_SOCCERD_BACK_LINK = &H1F0144E8
    DIBUTTON_SOCCERD_DEVICE = &H1F0044FE
    DIBUTTON_SOCCERD_PAUSE = &H1F0044FC
 
    DIVIRTUAL_SPORTS_RACQUET = &H20000000
    DIAXIS_RACQUET_LATERAL = &H20008201
    DIAXIS_RACQUET_MOVE = &H20010202
    DIBUTTON_RACQUET_SWING = &H20000401
    DIBUTTON_RACQUET_BACKSWING = &H20000402
    DIBUTTON_RACQUET_SMASH = &H20000403
    DIBUTTON_RACQUET_SPECIAL = &H20000404
    DIBUTTON_RACQUET_SELECT = &H20000405
    DIBUTTON_RACQUET_MENU = &H200004FD
    DIHATSWITCH_RACQUET_GLANCE = &H20004601
    DIBUTTON_RACQUET_TIMEOUT = &H20004406
    DIBUTTON_RACQUET_SUBSTITUTE = &H20004407
    DIBUTTON_RACQUET_LEFT_LINK = &H2000C4E4
    DIBUTTON_RACQUET_RIGHT_LINK = &H2000C4EC
    DIBUTTON_RACQUET_FORWARD_LINK = &H200144E0
    DIBUTTON_RACQUET_BACK_LINK = &H200144E8
    DIBUTTON_RACQUET_DEVICE = &H200044FE
    DIBUTTON_RACQUET_PAUSE = &H200044FC
 
    DIVIRTUAL_ARCADE_SIDE2SIDE = &H21000000
    DIAXIS_ARCADES_LATERAL = &H21008201
    DIAXIS_ARCADES_MOVE = &H21010202
    DIBUTTON_ARCADES_THROW = &H21000401
    DIBUTTON_ARCADES_CARRY = &H21000402
    DIBUTTON_ARCADES_ATTACK = &H21000403
    DIBUTTON_ARCADES_SPECIAL = &H21000404
    DIBUTTON_ARCADES_SELECT = &H21000405
    DIBUTTON_ARCADES_MENU = &H210004FD
    DIHATSWITCH_ARCADES_VIEW = &H21004601
    DIBUTTON_ARCADES_LEFT_LINK = &H2100C4E4
    DIBUTTON_ARCADES_RIGHT_LINK = &H2100C4EC
    DIBUTTON_ARCADES_FORWARD_LINK = &H210144E0
    DIBUTTON_ARCADES_BACK_LINK = &H210144E8
    DIBUTTON_ARCADES_VIEW_UP_LINK = &H2107C4E0
    DIBUTTON_ARCADES_VIEW_DOWN_LINK = &H2107C4E8
    DIBUTTON_ARCADES_VIEW_LEFT_LINK = &H2107C4E4
    DIBUTTON_ARCADES_VIEW_RIGHT_LINK = &H2107C4EC
    DIBUTTON_ARCADES_DEVICE = &H210044FE
    DIBUTTON_ARCADES_PAUSE = &H210044FC
 
    DIVIRTUAL_ARCADE_PLATFORM = &H22000000
    DIAXIS_ARCADEP_LATERAL = &H22008201
    DIAXIS_ARCADEP_MOVE = &H22010202
    DIBUTTON_ARCADEP_JUMP = &H22000401
    DIBUTTON_ARCADEP_FIRE = &H22000402
    DIBUTTON_ARCADEP_CROUCH = &H22000403
    DIBUTTON_ARCADEP_SPECIAL = &H22000404
    DIBUTTON_ARCADEP_SELECT = &H22000405
    DIBUTTON_ARCADEP_MENU = &H220004FD
    DIHATSWITCH_ARCADEP_VIEW = &H22004601
    DIBUTTON_ARCADEP_FIRESECONDARY = &H22004406
    DIBUTTON_ARCADEP_LEFT_LINK = &H2200C4E4
    DIBUTTON_ARCADEP_RIGHT_LINK = &H2200C4EC
    DIBUTTON_ARCADEP_FORWARD_LINK = &H220144E0
    DIBUTTON_ARCADEP_BACK_LINK = &H220144E8
    DIBUTTON_ARCADEP_VIEW_UP_LINK = &H2207C4E0
    DIBUTTON_ARCADEP_VIEW_DOWN_LINK = &H2207C4E8
    DIBUTTON_ARCADEP_VIEW_LEFT_LINK = &H2207C4E4
    DIBUTTON_ARCADEP_VIEW_RIGHT_LINK = &H2207C4EC
    DIBUTTON_ARCADEP_DEVICE = &H220044FE
    DIBUTTON_ARCADEP_PAUSE = &H220044FC
 
    DIVIRTUAL_CAD_2DCONTROL = &H23000000
    DIAXIS_2DCONTROL_LATERAL = &H23008201
    DIAXIS_2DCONTROL_MOVE = &H23010202
    DIAXIS_2DCONTROL_INOUT = &H23018203
    DIBUTTON_2DCONTROL_SELECT = &H23000401
    DIBUTTON_2DCONTROL_SPECIAL1 = &H23000402
    DIBUTTON_2DCONTROL_SPECIAL = &H23000403
    DIBUTTON_2DCONTROL_SPECIAL2 = &H23000404
    DIBUTTON_2DCONTROL_MENU = &H230004FD
    DIHATSWITCH_2DCONTROL_HATSWITCH = &H23004601
    DIAXIS_2DCONTROL_ROTATEZ = &H23024204
    DIBUTTON_2DCONTROL_DISPLAY = &H23004405
    DIBUTTON_2DCONTROL_DEVICE = &H230044FE
    DIBUTTON_2DCONTROL_PAUSE = &H230044FC
 
    DIVIRTUAL_CAD_3DCONTROL = &H24000000
    DIAXIS_3DCONTROL_LATERAL = &H24008201
    DIAXIS_3DCONTROL_MOVE = &H24010202
    DIAXIS_3DCONTROL_INOUT = &H24018203
    DIBUTTON_3DCONTROL_SELECT = &H24000401
    DIBUTTON_3DCONTROL_SPECIAL1 = &H24000402
    DIBUTTON_3DCONTROL_SPECIAL = &H24000403
    DIBUTTON_3DCONTROL_SPECIAL2 = &H24000404
    DIBUTTON_3DCONTROL_MENU = &H240004FD
    DIHATSWITCH_3DCONTROL_HATSWITCH = &H24004601
    DIAXIS_3DCONTROL_ROTATEX = &H24034204
    DIAXIS_3DCONTROL_ROTATEY = &H2402C205
    DIAXIS_3DCONTROL_ROTATEZ = &H24024206
    DIBUTTON_3DCONTROL_DISPLAY = &H24004405
    DIBUTTON_3DCONTROL_DEVICE = &H240044FE
    DIBUTTON_3DCONTROL_PAUSE = &H240044FC
 
    DIVIRTUAL_CAD_FLYBY = &H25000000
    DIAXIS_CADF_LATERAL = &H25008201
    DIAXIS_CADF_MOVE = &H25010202
    DIAXIS_CADF_INOUT = &H25018203
    DIBUTTON_CADF_SELECT = &H25000401
    DIBUTTON_CADF_SPECIAL1 = &H25000402
    DIBUTTON_CADF_SPECIAL = &H25000403
    DIBUTTON_CADF_SPECIAL2 = &H25000404
    DIBUTTON_CADF_MENU = &H250004FD
    DIHATSWITCH_CADF_HATSWITCH = &H25004601
    DIAXIS_CADF_ROTATEX = &H25034204
    DIAXIS_CADF_ROTATEY = &H2502C205
    DIAXIS_CADF_ROTATEZ = &H25024206
    DIBUTTON_CADF_DISPLAY = &H25004405
    DIBUTTON_CADF_DEVICE = &H250044FE
    DIBUTTON_CADF_PAUSE = &H250044FC
 
    DIVIRTUAL_CAD_MODEL = &H26000000
    DIAXIS_CADM_LATERAL = &H26008201
    DIAXIS_CADM_MOVE = &H26010202
    DIAXIS_CADM_INOUT = &H26018203
    DIBUTTON_CADM_SELECT = &H26000401
    DIBUTTON_CADM_SPECIAL1 = &H26000402
    DIBUTTON_CADM_SPECIAL = &H26000403
    DIBUTTON_CADM_SPECIAL2 = &H26000404
    DIBUTTON_CADM_MENU = &H260004FD
    DIHATSWITCH_CADM_HATSWITCH = &H26004601
    DIAXIS_CADM_ROTATEX = &H26034204
    DIAXIS_CADM_ROTATEY = &H2602C205
    DIAXIS_CADM_ROTATEZ = &H26024206
    DIBUTTON_CADM_DISPLAY = &H26004405
    DIBUTTON_CADM_DEVICE = &H260044FE
    DIBUTTON_CADM_PAUSE = &H260044FC
 
    DIVIRTUAL_REMOTE_CONTROL = &H27000000
    DIAXIS_REMOTE_SLIDER = &H27050201
    DIBUTTON_REMOTE_MUTE = &H27000401
    DIBUTTON_REMOTE_SELECT = &H27000402
    DIBUTTON_REMOTE_PLAY = &H27002403
    DIBUTTON_REMOTE_CUE = &H27002404
    DIBUTTON_REMOTE_REVIEW = &H27002405
    DIBUTTON_REMOTE_CHANGE = &H27002406
    DIBUTTON_REMOTE_RECORD = &H27002407
    DIBUTTON_REMOTE_MENU = &H270004FD
    DIAXIS_REMOTE_SLIDER2 = &H27054202
    DIBUTTON_REMOTE_TV = &H27005C08
    DIBUTTON_REMOTE_CABLE = &H27005C09
    DIBUTTON_REMOTE_CD = &H27005C0A
    DIBUTTON_REMOTE_VCR = &H27005C0B
    DIBUTTON_REMOTE_TUNER = &H27005C0C
    DIBUTTON_REMOTE_DVD = &H27005C0D
    DIBUTTON_REMOTE_ADJUST = &H27005C0E
    DIBUTTON_REMOTE_DIGIT0 = &H2700540F
    DIBUTTON_REMOTE_DIGIT1 = &H27005410
    DIBUTTON_REMOTE_DIGIT2 = &H27005411
    DIBUTTON_REMOTE_DIGIT3 = &H27005412
    DIBUTTON_REMOTE_DIGIT4 = &H27005413
    DIBUTTON_REMOTE_DIGIT5 = &H27005414
    DIBUTTON_REMOTE_DIGIT6 = &H27005415
    DIBUTTON_REMOTE_DIGIT7 = &H27005416
    DIBUTTON_REMOTE_DIGIT8 = &H27005417
    DIBUTTON_REMOTE_DIGIT9 = &H27005418
    DIBUTTON_REMOTE_DEVICE = &H270044FE
    DIBUTTON_REMOTE_PAUSE = &H270044FC
 
    DIVIRTUAL_BROWSER_CONTROL = &H28000000
    DIAXIS_BROWSER_LATERAL = &H28008201
    DIAXIS_BROWSER_MOVE = &H28010202
    DIBUTTON_BROWSER_SELECT = &H28000401
    DIAXIS_BROWSER_VIEW = &H28018203
    DIBUTTON_BROWSER_REFRESH = &H28000402
    DIBUTTON_BROWSER_MENU = &H280004FD
    DIBUTTON_BROWSER_SEARCH = &H28004403
    DIBUTTON_BROWSER_STOP = &H28004404
    DIBUTTON_BROWSER_HOME = &H28004405
    DIBUTTON_BROWSER_FAVORITES = &H28004406
    DIBUTTON_BROWSER_NEXT = &H28004407
    DIBUTTON_BROWSER_PREVIOUS = &H28004408
    DIBUTTON_BROWSER_HISTORY = &H28004409
    DIBUTTON_BROWSER_PRINT = &H2800440A
    DIBUTTON_BROWSER_DEVICE = &H280044FE
    DIBUTTON_BROWSER_PAUSE = &H280044FC
    /*--- Driving Simulator - Giant Walking Robot
    Walking tank with weapons  ---*/
    DIVIRTUAL_DRIVING_MECHA = &H29000000
    DIAXIS_MECHA_STEER = &H29008201
    DIAXIS_MECHA_TORSO = &H29010202
    DIAXIS_MECHA_ROTATE = &H29020203
    DIAXIS_MECHA_THROTTLE = &H29038204
    DIBUTTON_MECHA_FIRE = &H29000401
    DIBUTTON_MECHA_WEAPONS = &H29000402
    DIBUTTON_MECHA_TARGET = &H29000403
    DIBUTTON_MECHA_REVERSE = &H29000404
    DIBUTTON_MECHA_ZOOM = &H29000405
    DIBUTTON_MECHA_JUMP = &H29000406
    DIBUTTON_MECHA_MENU = &H290004FD
    DIBUTTON_MECHA_CENTER = &H29004407
    DIHATSWITCH_MECHA_GLANCE = &H29004601
    DIBUTTON_MECHA_VIEW = &H29004408
    DIBUTTON_MECHA_FIRESECONDARY = &H29004409
    DIBUTTON_MECHA_LEFT_LINK = &H2900C4E4
    DIBUTTON_MECHA_RIGHT_LINK = &H2900C4EC
    DIBUTTON_MECHA_FORWARD_LINK = &H290144E0
    DIBUTTON_MECHA_BACK_LINK = &H290144E8
    DIBUTTON_MECHA_ROTATE_LEFT_LINK = &H290244E4
    DIBUTTON_MECHA_ROTATE_RIGHT_LINK = &H290244EC
    DIBUTTON_MECHA_FASTER_LINK = &H2903C4E0
    DIBUTTON_MECHA_SLOWER_LINK = &H2903C4E8
    DIBUTTON_MECHA_DEVICE = &H290044FE
    DIBUTTON_MECHA_PAUSE = &H290044FC
    /*
    *  "ANY" semantics can be used as a last resort to get mappings for actions 
    *  that match nothing in the chosen virtual genre.  These semantics will be 
    *  mapped at a lower priority that virtual genre semantics.  Also, hardware 
    *  vendors will not be able to provide sensible mappings for these unless 
    *  they provide application specific mappings.
    */
    DIAXIS_ANY_X_1 = &HFF00C201
    DIAXIS_ANY_X_2 = &HFF00C202
    DIAXIS_ANY_Y_1 = &HFF014201
    DIAXIS_ANY_Y_2 = &HFF014202
    DIAXIS_ANY_Z_1 = &HFF01C201
    DIAXIS_ANY_Z_2 = &HFF01C202
    DIAXIS_ANY_R_1 = &HFF024201
    DIAXIS_ANY_R_2 = &HFF024202
    DIAXIS_ANY_U_1 = &HFF02C201
    DIAXIS_ANY_U_2 = &HFF02C202
    DIAXIS_ANY_V_1 = &HFF034201
    DIAXIS_ANY_V_2 = &HFF034202
    DIAXIS_ANY_A_1 = &HFF03C201
    DIAXIS_ANY_A_2 = &HFF03C202
    DIAXIS_ANY_B_1 = &HFF044201
    DIAXIS_ANY_B_2 = &HFF044202
    DIAXIS_ANY_C_1 = &HFF04C201
    DIAXIS_ANY_C_2 = &HFF04C202
    DIAXIS_ANY_S_1 = &HFF054201
    DIAXIS_ANY_S_2 = &HFF054202
    DIAXIS_ANY_1 = &HFF004201
    DIAXIS_ANY_2 = &HFF004202
    DIAXIS_ANY_3 = &HFF004203
    DIAXIS_ANY_4 = &HFF004204
    DIPOV_ANY_1 = &HFF004601
    DIPOV_ANY_2 = &HFF004602
    DIPOV_ANY_3 = &HFF004603
    DIPOV_ANY_4 = &HFF004604
End Enum

Public Function DIBUTTON_ANY(ByVal Instance As Long) As Long: Return (&HFF004400 Or Instance): End Function
    

Public Const JOY_PASSDRIVERDATA = &H10000000

Public Delegate Sub pfnShowJoyCPL (ByVal hwnd As LongPtr)
[IgnoreWarnings(TB0026)]
Public Sub ShowJoyCPL(ByVal hwnd As LongPtr)
    Dim hCPL As LongPtr = LoadLibrary("joy.cpl")
    Dim pfn As pfnShowJoyCPL = GetProcAddress(hCPL, "ShowJoyCPL")
    If pfn Then pfn(hwnd)
End Sub

/*
* Hardware Setting indicating that the device is a headtracker
*/
Public Const JOY_HWS_ISHEADTRACKER       = &H02000000

/*
* Hardware Setting indicating that the VxD is used to replace
* the standard analog polling
*/
Public Const JOY_HWS_ISGAMEPORTDRIVER    = &H04000000

/*
* Hardware Setting indicating that the driver needs a standard
* gameport in order to communicate with the device.
*/
Public Const JOY_HWS_ISANALOGPORTDRIVER  = &H08000000

/*
* Hardware Setting indicating that VJoyD should not load this
* driver, it will be loaded externally and will register with
* VJoyD of it's own accord.
*/
Public Const JOY_HWS_AUTOLOAD            = &H10000000

/*
* Hardware Setting indicating that the driver acquires any
* resources needed without needing a devnode through VJoyD.
*/
Public Const JOY_HWS_NODEVNODE           = &H20000000


/*
* Hardware Setting indicating that the device is a gameport bus
*/
Public Const JOY_HWS_ISGAMEPORTBUS       = &H80000000
Public Const JOY_HWS_GAMEPORTBUSBUSY     = &H00000001

/*
* Usage Setting indicating that the settings are volatile and
* should be removed if still present on a reboot.
*/
Public Const JOY_US_VOLATILE             = &H00000008
End Module

#End If