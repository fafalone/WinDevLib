'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

'Direct3D8

'd3d8.h
'd3d8types.h
'd3d8caps.h

#If WDL_NO_DIRECTX = 0 Then


[InterfaceId("1DD9E8DA-1C77-4d40-B0CF-98FEFDFF9512")]
[OleAutomation(False)]
Interface IDirect3D8 Extends IUnknown
    Sub RegisterSoftwareDevice(ByVal pInitializeFunction As LongPtr)
    [PreserveSig] Function GetAdapterCount() As Long
    Sub GetAdapterIdentifier(ByVal Adapter As Long, ByVal Flags As D3D8EnumAdaptersFlags, ByRef pIdentifier As D3DADAPTER_IDENTIFIER8)
    [PreserveSig] Function GetAdapterModeCount(ByVal Adapter As Long) As Long
    Sub EnumAdapterModes(ByVal Adapter As Long, [TypeHint(D3D8CURRENTMODEDEFAULT)] ByVal Mode As Long, ByRef pMode As D3DDISPLAYMODE)
    Sub GetAdapterDisplayMode(ByVal Adapter As Long, ByRef pMode As D3DDISPLAYMODE)
    Sub CheckDeviceType(ByVal Adapter As Long, ByVal CheckType As D3DDEVTYPE, ByVal DisplayFormat As D3DFORMAT, ByVal BackBufferFormat As D3DFORMAT, ByVal Windowed As BOOL)
    Sub CheckDeviceFormat(ByVal Adapter As Long, ByVal DeviceType As D3DDEVTYPE, ByVal AdapterFormat As D3DFORMAT, ByVal Usage As D3DUSAGE, ByVal RType As D3DRESOURCETYPE, ByVal CheckFormat As D3DFORMAT)
    Sub CheckDeviceMultiSampleType(ByVal Adapter As Long, ByVal DeviceType As D3DDEVTYPE, ByVal SurfaceFormat As D3DFORMAT, ByVal Windowed As BOOL, ByVal MultiSampleType As D3DMULTISAMPLE_TYPE)
    Sub CheckDepthStencilMatch(ByVal Adapter As Long, ByVal DeviceType As D3DDEVTYPE, ByVal AdapterFormat As D3DFORMAT, ByVal RenderTargetFormat As D3DFORMAT, ByVal DepthStencilFormat As D3DFORMAT)
    Sub GetDeviceCaps(ByVal Adapter As Long, ByVal DeviceType As D3DDEVTYPE, ByRef pCaps As D3DCAPS8)
    [PreserveSig] Function GetAdapterMonitor(ByVal Adapter As Long) As LongPtr
    Sub CreateDevice(ByVal Adapter As Long, ByVal DeviceType As D3DDEVTYPE, ByVal hFocusWindow As LongPtr, ByVal BehaviorFlags As D3DCREATE, ByRef pPresentationParameters As D3DPRESENT_PARAMETERS, ByRef ppReturnedDeviceInterface As IDirect3DDevice8)
End Interface

[InterfaceId("7385E5DF-8FE8-41D5-86B6-D7B48547B6CF")]
[OleAutomation(False)]
Interface IDirect3DDevice8 Extends IUnknown
    Sub TestCooperativeLevel()
    [PreserveSig] Function GetAvailableTextureMem() As Long
    Sub ResourceManagerDiscardBytes(ByVal Bytes As Long)
    Sub GetDirect3D(ByRef ppD3D8 As IDirect3D8)
    Sub GetDeviceCaps(ByRef pCaps As D3DCAPS8)
    Sub GetDisplayMode(ByRef pMode As D3DDISPLAYMODE)
    Sub GetCreationParameters(ByRef pParameters As D3DDEVICE_CREATION_PARAMETERS)
    Sub SetCursorProperties(ByVal XHotSpot As Long, ByVal YHotSpot As Long, ByRef pCursorBitmap As IDirect3DSurface8)
    [PreserveSig] Sub SetCursorPosition(ByVal X As Long, ByVal Y As Long, ByVal Flags As Long)
    [PreserveSig] Function ShowCursor(ByVal bShow As BOOL) As BOOL
    Sub CreateAdditionalSwapChain(ByRef pPresentationParameters As D3DPRESENT_PARAMETERS, ByRef pSwapChain As IDirect3DSwapChain8)
    Sub Reset(ByRef pPresentationParameters As D3DPRESENT_PARAMETERS)
    Sub Present(ByRef pSourceRect As RECT, ByRef pDestRect As RECT, ByVal hDestWindowOverride As LongPtr, ByRef pDirtyRegion As RGNDATA)
    Sub GetBackBuffer(ByVal BackBuffer As Long, ByVal Type As D3DBACKBUFFER_TYPE, ByRef ppBackBuffer As IDirect3DSurface8)
    Sub GetRasterStatus(ByRef pRasterStatus As D3DRASTER_STATUS)
    [PreserveSig] Sub SetGammaRamp(ByVal Flags As Long, ByRef pRamp As D3DGAMMARAMP)
    [PreserveSig] Sub GetGammaRamp(ByRef pRamp As D3DGAMMARAMP)
    Sub CreateTexture(ByVal Width As Long, ByVal Height As Long, ByVal Levels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByRef ppTexture As IDirect3DTexture8)
    Sub CreateVolumeTexture(ByVal Width As Long, ByVal Height As Long, ByVal Depth As Long, ByVal Levels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByRef ppVolumeTexture As IDirect3DVolumeTexture8)
    Sub CreateCubeTexture(ByVal EdgeLength As Long, ByVal Levels As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByRef ppCubeTexture As IDirect3DCubeTexture8)
    Sub CreateVertexBuffer(ByVal Length As Long, ByVal Usage As Long, ByVal FVF As Long, ByVal Pool As D3DPOOL, ByRef ppVertexBuffer As IDirect3DVertexBuffer8)
    Sub CreateIndexBuffer(ByVal Length As Long, ByVal Usage As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByRef ppIndexBuffer As IDirect3DIndexBuffer8)
    Sub CreateRenderTarget(ByVal Width As Long, ByVal Height As Long, ByVal Format As D3DFORMAT, ByVal MultiSample As D3DMULTISAMPLE_TYPE, ByVal Lockable As BOOL, ByRef ppSurface As IDirect3DSurface8)
    Sub CreateDepthStencilSurface(ByVal Width As Long, ByVal Height As Long, ByVal Format As D3DFORMAT, ByVal MultiSample As D3DMULTISAMPLE_TYPE, ByRef ppSurface As IDirect3DSurface8)
    Sub CreateImageSurface(ByVal Width As Long, ByVal Height As Long, ByVal Format As D3DFORMAT, ByRef ppSurface As IDirect3DSurface8)
    Sub CopyRects(ByRef pSourceSurface As IDirect3DSurface8, ByRef pSourceRectsArray As RECT, ByVal cRects As Long, ByRef pDestinationSurface As IDirect3DSurface8, ByRef pDestPointsArray As POINT)
    Sub UpdateTexture(ByRef pSourceTexture As IDirect3DBaseTexture8, ByRef pDestinationTexture As IDirect3DBaseTexture8)
    Sub GetFrontBuffer(ByRef pDestSurface As IDirect3DSurface8)
    Sub SetRenderTarget(ByRef pRenderTarget As IDirect3DSurface8, ByRef pNewZStencil As IDirect3DSurface8)
    Sub GetRenderTarget(ByRef ppRenderTarget As IDirect3DSurface8)
    Sub GetDepthStencilSurface(ByRef ppZStencilSurface As IDirect3DSurface8)
    Sub BeginScene()
    Sub EndScene()
    Sub Clear(ByVal Count As Long, ByRef pRects As D3DRECT, ByVal Flags As Long, ByVal Color As Long, ByVal Z As Single, ByVal Stencil As Long)
    Sub SetTransform(ByVal State As D3DTRANSFORMSTATETYPE, ByRef pMatrix As D3DMATRIX)
    Sub GetTransform(ByVal State As D3DTRANSFORMSTATETYPE, ByRef pMatrix As D3DMATRIX)
    Sub MultiplyTransform(ByVal State As D3DTRANSFORMSTATETYPE, ByRef pMatrix As D3DMATRIX)
    Sub SetViewport(ByRef pViewport As D3DVIEWPORT8)
    Sub GetViewport(ByRef pViewport As D3DVIEWPORT8)
    Sub SetMaterial(ByRef pMaterial As D3DMATERIAL8)
    Sub GetMaterial(ByRef pMaterial As D3DMATERIAL8)
    Sub SetLight(ByVal Index As Long, ByRef pLight As D3DLIGHT8)
    Sub GetLight(ByVal Index As Long, ByRef pLight As D3DLIGHT8)
    Sub LightEnable(ByVal Index As Long, ByVal Enable As BOOL)
    Sub GetLightEnable(ByVal Index As Long, ByRef pEnable As BOOL)
    Sub SetClipPlane(ByVal Index As Long, ByRef pPlane As Single)
    Sub GetClipPlane(ByVal Index As Long, ByRef pPlane As Single)
    Sub SetRenderState(ByVal State As D3DRENDERSTATETYPE, ByVal Value As Long)
    Sub GetRenderState(ByVal State As D3DRENDERSTATETYPE, ByRef pValue As Long)
    Sub BeginStateBlock()
    Sub EndStateBlock(ByRef pToken As Long)
    Sub ApplyStateBlock(ByVal Token As Long)
    Sub CaptureStateBlock(ByVal Token As Long)
    Sub DeleteStateBlock(ByVal Token As Long)
    Sub CreateStateBlock(ByVal Type As D3DSTATEBLOCKTYPE, ByRef pToken As Long)
    Sub SetClipStatus(ByRef pClipStatus As D3DCLIPSTATUS8)
    Sub GetClipStatus(ByRef pClipStatus As D3DCLIPSTATUS8)
    Sub GetTexture(ByVal Stage As Long, ByRef ppTexture As IDirect3DBaseTexture8)
    Sub SetTexture(ByVal Stage As Long, ByRef pTexture As IDirect3DBaseTexture8)
    Sub GetTextureStageState(ByVal Stage As Long, ByVal Type As D3DTEXTURESTAGESTATETYPE, ByRef pValue As Long)
    Sub SetTextureStageState(ByVal Stage As Long, ByVal Type As D3DTEXTURESTAGESTATETYPE, ByVal Value As Long)
    Sub ValidateDevice(ByRef pNumPasses As Long)
    Sub GetInfo(ByVal DevInfoID As Long, pDevInfoStruct As Any, ByVal DevInfoStructSize As Long)
    Sub SetPaletteEntries(ByVal PaletteNumber As Long, ByRef pEntries As PALETTEENTRY)
    Sub GetPaletteEntries(ByVal PaletteNumber As Long, ByRef pEntries As PALETTEENTRY)
    Sub SetCurrentTexturePalette(ByVal PaletteNumber As Long)
    Sub GetCurrentTexturePalette(ByRef PaletteNumber As Long)
    Sub DrawPrimitive(ByVal PrimitiveType As D3DPRIMITIVETYPE, ByVal StartVertex As Long, ByVal PrimitiveCount As Long)
    Sub DrawIndexedPrimitive(ByVal PrimitiveType As D3DPRIMITIVETYPE, ByVal minIndex As Long, ByVal NumVertices As Long, ByVal startIndex As Long, ByVal primCount As Long)
    Sub DrawPrimitiveUP(ByVal PrimitiveType As D3DPRIMITIVETYPE, ByVal PrimitiveCount As Long, ByVal pVertexStreamZeroData As LongPtr, ByVal VertexStreamZeroStride As Long)
    Sub DrawIndexedPrimitiveUP(ByVal PrimitiveType As D3DPRIMITIVETYPE, ByVal MinVertexIndex As Long, ByVal NumVertexIndices As Long, ByVal PrimitiveCount As Long, pIndexData As Any, ByVal IndexDataFormat As D3DFORMAT, pVertexStreamZeroData As Any, ByVal VertexStreamZeroStride As Long)
    Sub ProcessVertices(ByVal SrcStartIndex As Long, ByVal DestIndex As Long, ByVal VertexCount As Long, ByRef pDestBuffer As IDirect3DVertexBuffer8, ByVal Flags As Long)
    Sub CreateVertexShader(pDeclaration As Long, pFunction As Long, ByRef pHandle As Long, ByVal Usage As Long)
    Sub SetVertexShader(ByVal Handle As Long)
    Sub GetVertexShader(ByRef pHandle As Long)
    Sub DeleteVertexShader(ByVal Handle As Long)
    Sub SetVertexShaderConstant(ByVal Register As Long, pConstantData As Any, ByVal ConstantCount As Long)
    Sub GetVertexShaderConstant(ByVal Register As Long, pConstantData As Any, ByVal ConstantCount As Long)
    Sub GetVertexShaderDeclaration(ByVal Handle As Long, pData As Any, ByRef pSizeOfData As Long)
    Sub GetVertexShaderFunction(ByVal Handle As Long, pData As Any, ByRef pSizeOfData As Long)
    Sub SetStreamSource(ByVal StreamNumber As Long, ByRef pStreamData As IDirect3DVertexBuffer8, ByVal Stride As Long)
    Sub GetStreamSource(ByVal StreamNumber As Long, ByRef ppStreamData As IDirect3DVertexBuffer8, ByRef pStride As Long)
    Sub SetIndices(ByRef pIndexData As IDirect3DIndexBuffer8, ByVal BaseVertexIndex As Long)
    Sub GetIndices(ByRef ppIndexData As IDirect3DIndexBuffer8, ByRef pBaseVertexIndex As Long)
    Sub CreatePixelShader(pFunction As Long, ByRef pHandle As Long)
    Sub SetPixelShader(ByVal Handle As Long)
    Sub GetPixelShader(ByRef pHandle As Long)
    Sub DeletePixelShader(ByVal Handle As Long)
    Sub SetPixelShaderConstant(ByVal Register As Long, pConstantData As Any, ByVal ConstantCount As Long)
    Sub GetPixelShaderConstant(ByVal Register As Long, pConstantData As Any, ByVal ConstantCount As Long)
    Sub GetPixelShaderFunction(ByVal Handle As Long, pData As Any, ByRef pSizeOfData As Long)
    Sub DrawRectPatch(ByVal Handle As Long, pNumSegs As Single, ByRef pRectPatchInfo As D3DRECTPATCH_INFO)
    Sub DrawTriPatch(ByVal Handle As Long, pNumSegs As Single, ByRef pTriPatchInfo As D3DTRIPATCH_INFO)
    Sub DeletePatch(ByVal Handle As Long)
End Interface

[InterfaceId("928C088B-76B9-4C6B-A536-A590853876CD")]
[OleAutomation(False)]
Interface IDirect3DSwapChain8 Extends IUnknown
    Sub Present(ByRef pSourceRect As RECT, ByRef pDestRect As RECT, ByVal hDestWindowOverride As LongPtr, ByRef pDirtyRegion As RGNDATA)
    Sub GetBackBuffer(ByVal BackBuffer As Long, ByVal Type As D3DBACKBUFFER_TYPE, ByRef ppBackBuffer As IDirect3DSurface8)
End Interface

[InterfaceId("1B36BB7B-09B7-410a-B445-7D1430D7B33F")]
[OleAutomation(False)]
Interface IDirect3DResource8 Extends IUnknown
    Sub GetDevice(ByRef ppDevice As IDirect3DDevice8)
    Sub SetPrivateData(ByRef refguid As UUID, pData As Any, ByVal SizeOfData As Long, ByVal Flags As Long)
    Sub GetPrivateData(ByRef refguid As UUID, pData As Any, ByRef pSizeOfData As Long)
    Sub FreePrivateData(ByRef refguid As UUID)
    [PreserveSig] Function SetPriority(ByVal PriorityNew As Long) As Long
    [PreserveSig] Function GetPriority() As Long
    [PreserveSig] Sub PreLoad()
    [PreserveSig] Function GetType() As D3DRESOURCETYPE
End Interface

[InterfaceId("B4211CFA-51B9-4a9f-AB78-DB99B2BB678E")]
[OleAutomation(False)]
Interface IDirect3DBaseTexture8 Extends IDirect3DResource8
    Sub GetDevice(ByRef ppDevice As IDirect3DDevice8)
    Sub SetPrivateData(ByRef refguid As UUID, pData As Any, ByVal SizeOfData As Long, ByVal Flags As Long)
    Sub GetPrivateData(ByRef refguid As UUID, pData As Any, ByRef pSizeOfData As Long)
    Sub FreePrivateData(ByRef refguid As UUID)
    [PreserveSig] Function SetPriority(ByVal PriorityNew As Long) As Long
    [PreserveSig] Function GetPriority() As Long
    [PreserveSig] Sub PreLoad()
    [PreserveSig] Function GetType() As D3DRESOURCETYPE
    [PreserveSig] Function SetLOD(ByVal LODNew As Long) As Long
    [PreserveSig] Function GetLOD() As Long
    [PreserveSig] Function GetLevelCount() As Long
End Interface

[InterfaceId("E4CDD575-2866-4f01-B12E-7EECE1EC9358")]
[OleAutomation(False)]
Interface IDirect3DTexture8 Extends IDirect3DBaseTexture8
    Sub GetDevice(ByRef ppDevice As IDirect3DDevice8)
    Sub SetPrivateData(ByRef refguid As UUID, pData As Any, ByVal SizeOfData As Long, ByVal Flags As Long)
    Sub GetPrivateData(ByRef refguid As UUID, pData As Any, ByRef pSizeOfData As Long)
    Sub FreePrivateData(ByRef refguid As UUID)
    [PreserveSig] Function SetPriority(ByVal PriorityNew As Long) As Long
    [PreserveSig] Function GetPriority() As Long
    [PreserveSig] Sub PreLoad()
    [PreserveSig] Function GetType() As D3DRESOURCETYPE
    [PreserveSig] Function SetLOD(ByVal LODNew As Long) As Long
    [PreserveSig] Function GetLOD() As Long
    [PreserveSig] Function GetLevelCount() As Long
    Sub GetLevelDesc(ByVal Level As Long, ByRef pDesc As D3DSURFACE_DESC)
    Sub GetSurfaceLevel(ByVal Level As Long, ByRef ppSurfaceLevel As IDirect3DSurface8)
    Sub LockRect(ByVal Level As Long, ByRef pLockedRect As D3DLOCKED_RECT, ByRef pRect As RECT, ByVal Flags As Long)
    Sub UnlockRect(ByVal Level As Long)
    Sub AddDirtyRect(ByRef pDirtyRect As RECT)
End Interface

[InterfaceId("4B8AAAFA-140F-42ba-9131-597EAFAA2EAD")]
[OleAutomation(False)]
Interface IDirect3DVolumeTexture8 Extends IDirect3DBaseTexture8
    Sub GetDevice(ByRef ppDevice As IDirect3DDevice8)
    Sub SetPrivateData(ByRef refguid As UUID, pData As Any, ByVal SizeOfData As Long, ByVal Flags As Long)
    Sub GetPrivateData(ByRef refguid As UUID, pData As Any, ByRef pSizeOfData As Long)
    Sub FreePrivateData(ByRef refguid As UUID)
    [PreserveSig] Function SetPriority(ByVal PriorityNew As Long) As Long
    [PreserveSig] Function GetPriority() As Long
    [PreserveSig] Sub PreLoad()
    [PreserveSig] Function GetType() As D3DRESOURCETYPE
    [PreserveSig] Function SetLOD(ByVal LODNew As Long) As Long
    [PreserveSig] Function GetLOD() As Long
    [PreserveSig] Function GetLevelCount() As Long
    Sub GetLevelDesc(ByVal Level As Long, ByRef pDesc As D3DVOLUME_DESC)
    Sub GetVolumeLevel(ByVal Level As Long, ByRef ppVolumeLevel As IDirect3DVolume8)
    Sub LockBox(ByVal Level As Long, ByRef pLockedVolume As D3DLOCKED_BOX, ByRef pBox As D3DBOX, ByVal Flags As Long)
    Sub UnlockBox(ByVal Level As Long)
    Sub AddDirtyBox(ByRef pDirtyBox As D3DBOX)
End Interface

[InterfaceId("3EE5B968-2ACA-4c34-8BB5-7E0C3D19B750")]
[OleAutomation(False)]
Interface IDirect3DCubeTexture8 Extends IDirect3DBaseTexture8
    Sub GetDevice(ByRef ppDevice As IDirect3DDevice8)
    Sub SetPrivateData(ByRef refguid As UUID, pData As Any, ByVal SizeOfData As Long, ByVal Flags As Long)
    Sub GetPrivateData(ByRef refguid As UUID, pData As Any, ByRef pSizeOfData As Long)
    Sub FreePrivateData(ByRef refguid As UUID)
    [PreserveSig] Function SetPriority(ByVal PriorityNew As Long) As Long
    [PreserveSig] Function GetPriority() As Long
    [PreserveSig] Sub PreLoad()
    [PreserveSig] Function GetType() As D3DRESOURCETYPE
    [PreserveSig] Function SetLOD(ByVal LODNew As Long) As Long
    [PreserveSig] Function GetLOD() As Long
    [PreserveSig] Function GetLevelCount() As Long
    Sub GetLevelDesc(ByVal Level As Long, ByRef pDesc As D3DSURFACE_DESC)
    Sub GetCubeMapSurface(ByVal FaceType As D3DCUBEMAP_FACES, ByVal Level As Long, ByRef ppCubeMapSurface As IDirect3DSurface8)
    Sub LockRect(ByVal FaceType As D3DCUBEMAP_FACES, ByVal Level As Long, ByRef pLockedRect As D3DLOCKED_RECT, ByRef pRect As RECT, ByVal Flags As Long)
    Sub UnlockRect(ByVal FaceType As D3DCUBEMAP_FACES, ByVal Level As Long)
    Sub AddDirtyRect(ByVal FaceType As D3DCUBEMAP_FACES, ByRef pDirtyRect As RECT)
End Interface

[InterfaceId("8AEEEAC7-05F9-44d4-B591-000B0DF1CB95")]
[OleAutomation(False)]
Interface IDirect3DVertexBuffer8 Extends IDirect3DResource8
    Sub GetDevice(ByRef ppDevice As IDirect3DDevice8)
    Sub SetPrivateData(ByRef refguid As UUID, pData As Any, ByVal SizeOfData As Long, ByVal Flags As Long)
    Sub GetPrivateData(ByRef refguid As UUID, pData As Any, ByRef pSizeOfData As Long)
    Sub FreePrivateData(ByRef refguid As UUID)
    [PreserveSig] Function SetPriority(ByVal PriorityNew As Long) As Long
    [PreserveSig] Function GetPriority() As Long
    [PreserveSig] Sub PreLoad()
    [PreserveSig] Function GetType() As D3DRESOURCETYPE
    Sub Lock(ByVal OffsetToLock As Long, ByVal SizeToLock As Long, ByRef ppbData As LongPtr, ByVal Flags As Long)
    Sub Unlock()
    Sub GetDesc(ByRef pDesc As D3DVERTEXBUFFER_DESC)
End Interface


[InterfaceId("0E689C9A-053D-44a0-9D92-DB0E3D750F86")]
[OleAutomation(False)]
Interface IDirect3DIndexBuffer8 Extends IDirect3DResource8
    Sub GetDevice(ByRef ppDevice As IDirect3DDevice8)
    Sub SetPrivateData(ByRef refguid As UUID, pData As Any, ByVal SizeOfData As Long, ByVal Flags As Long)
    Sub GetPrivateData(ByRef refguid As UUID, pData As Any, ByRef pSizeOfData As Long)
    Sub FreePrivateData(ByRef refguid As UUID)
    [PreserveSig] Function SetPriority(ByVal PriorityNew As Long) As Long
    [PreserveSig] Function GetPriority() As Long
    [PreserveSig] Sub PreLoad()
    [PreserveSig] Function GetType() As D3DRESOURCETYPE
    Sub Lock(ByVal OffsetToLock As Long, ByVal SizeToLock As Long, ByRef ppbData As LongPtr, ByVal Flags As Long)
    Sub Unlock()
    Sub GetDesc(ByRef pDesc As D3DINDEXBUFFER_DESC)
End Interface

[InterfaceId("B96EEBCA-B326-4ea5-882F-2FF5BAE021DD")]
[OleAutomation(False)]
Interface IDirect3DSurface8 Extends IUnknown
    Sub GetDevice(ByRef ppDevice As IDirect3DDevice8)
    Sub SetPrivateData(ByRef refguid As UUID, pData As Any, ByVal SizeOfData As Long, ByVal Flags As Long)
    Sub GetPrivateData(ByRef refguid As UUID, pData As Any, ByRef pSizeOfData As Long)
    Sub FreePrivateData(ByRef refguid As UUID)
    Sub GetContainer(ByRef riid As UUID, ByRef ppContainer As LongPtr)
    Sub GetDesc(ByRef pDesc As D3DSURFACE_DESC)
    Sub LockRect(ByRef pLockedRect As D3DLOCKED_RECT, ByRef pRect As RECT, ByVal Flags As Long)
    Sub UnlockRect()
End Interface

[InterfaceId("BD7349F5-14F1-42e4-9C79-972380DB40C0")]
[OleAutomation(False)]
Interface IDirect3DVolume8 Extends IUnknown
    Sub GetDevice(ByRef ppDevice As IDirect3DDevice8)
    Sub SetPrivateData(ByRef refguid As UUID, pData As Any, ByVal SizeOfData As Long, ByVal Flags As Long)
    Sub GetPrivateData(ByRef refguid As UUID, pData As Any, ByRef pSizeOfData As Long)
    Sub FreePrivateData(ByRef refguid As UUID)
    Sub GetContainer(ByRef riid As UUID, ByRef ppContainer As LongPtr)
    Sub GetDesc(ByRef pDesc As D3DVOLUME_DESC)
    Sub LockBox(ByRef pLockedVolume As D3DLOCKED_BOX, ByRef pBox As D3DBOX, ByVal Flags As Long)
    Sub UnlockBox()
End Interface




#If WDL_QUALIFY Then
[MustBeQualified]
#End If
Module wdD3D8

'd3d8types.h (most already defined from d3d9types.h)

Public Function D3DCOLOR_ARGB(a As Long, r As Long, g As Long, b As Long) As Long
    Return ((a And &HFF) << 24) Or ((r And &HFF) << 16) Or ((g And &HFF) << 8) Or (b And &HFF)
End Function

Public Function D3DCOLOR_RGBA(r As Long, g As Long, b As Long, a As Long) As Long
    Return D3DCOLOR_ARGB(a, r, g, b)
End Function

Public Function D3DCOLOR_XRGB(r As Long, g As Long, b As Long) As Long
    Return D3DCOLOR_ARGB(&HFF, r, g, b)
End Function

Public Function D3DCOLOR_COLORVALUE(r As Single, g As Single, b As Single, a As Single) As Long
    Return D3DCOLOR_RGBA(CLng(r * 255!), CLng(g * 255!), CLng(b * 255!), CLng(a * 255!))
End Function

Public Type D3DVIEWPORT8
    X As Long
    Y As Long '* Viewport Top left */
    Width As Long
    Height As Long '* Viewport Dimensions */
    MinZ As Single '* Min/max of clip Volume */
    MaxZ As Single
End Type

Public Type D3DCLIPSTATUS8
    ClipUnion As Long
    ClipIntersection As Long
End Type

Public Type D3DMATERIAL8
    Diffuse As D3DCOLORVALUE '* Diffuse color RGBA */
    Ambient As D3DCOLORVALUE '* Ambient color RGB */
    Specular As D3DCOLORVALUE '* Specular 'shininess' */
    Emissive As D3DCOLORVALUE '* Emissive color RGB */
    Power As Single '* Sharpness if specular highlight */
End Type

Public Type D3DLIGHT8
    Type As D3DLIGHTTYPE /* Type of light source */
    Diffuse As D3DCOLORVALUE /* Diffuse color of light */
    Specular As D3DCOLORVALUE /* Specular color of light */
    Ambient As D3DCOLORVALUE /* Ambient color of light */
    Position As D3DVECTOR /* Position in world space */
    Direction As D3DVECTOR /* Direction in world space */
    Range As Single /* Cutoff range */
    Falloff As Single /* Falloff */
    Attenuation0 As Single /* Constant attenuation */
    Attenuation1 As Single /* Linear attenuation */
    Attenuation2 As Single /* Quadratic attenuation */
    Theta As Single /* Inner angle of spotlight cone */
    Phi As Single /* Outer angle of spotlight cone */
End Type

Public Type D3DLINEPATTERN
    wRepeatFactor As Integer
    wLinePattern As Integer
End Type

Public Enum D3DVSD_TOKENTYPE
    D3DVSD_TOKEN_NOP = 0 ' NOP or extension
    D3DVSD_TOKEN_STREAM ' stream selector
    D3DVSD_TOKEN_STREAMDATA ' stream data definition (map to vertex input memory)
    D3DVSD_TOKEN_TESSELLATOR ' vertex input memory from tessellator
    D3DVSD_TOKEN_CONSTMEM ' constant memory from shader
    D3DVSD_TOKEN_EXT ' extension
    D3DVSD_TOKEN_END = 7 ' end-of-array (requires all DWORD bits to be 1)
    D3DVSD_FORCE_DWORD = &H7fffffff ' force 32-bit size enum
End Enum

Public Enum D3DVSD
    D3DVSD_TOKENTYPESHIFT = 29
    D3DVSD_TOKENTYPEMASK = (7 << D3DVSD_TOKENTYPESHIFT)
    D3DVSD_STREAMNUMBERSHIFT = 0
    D3DVSD_STREAMNUMBERMASK = (&HF << D3DVSD_STREAMNUMBERSHIFT)
    D3DVSD_DATALOADTYPESHIFT = 28
    D3DVSD_DATALOADTYPEMASK = (&H1 << D3DVSD_DATALOADTYPESHIFT)
    D3DVSD_DATATYPESHIFT = 16
    D3DVSD_DATATYPEMASK = (&HF << D3DVSD_DATATYPESHIFT)
    D3DVSD_SKIPCOUNTSHIFT = 16
    D3DVSD_SKIPCOUNTMASK = (&HF << D3DVSD_SKIPCOUNTSHIFT)
    D3DVSD_VERTEXREGSHIFT = 0
    D3DVSD_VERTEXREGMASK = (&H1F << D3DVSD_VERTEXREGSHIFT)
    D3DVSD_VERTEXREGINSHIFT = 20
    D3DVSD_VERTEXREGINMASK = (&HF << D3DVSD_VERTEXREGINSHIFT)
    D3DVSD_CONSTCOUNTSHIFT = 25
    D3DVSD_CONSTCOUNTMASK = (&HF << D3DVSD_CONSTCOUNTSHIFT)
    D3DVSD_CONSTADDRESSSHIFT = 0
    D3DVSD_CONSTADDRESSMASK = (&H7F& << D3DVSD_CONSTADDRESSSHIFT)
    D3DVSD_CONSTRSSHIFT = 16
    D3DVSD_CONSTRSMASK = (&H1FFF& << D3DVSD_CONSTRSSHIFT)
    D3DVSD_EXTCOUNTSHIFT = 24
    D3DVSD_EXTCOUNTMASK = (&H1F& << D3DVSD_EXTCOUNTSHIFT)
    D3DVSD_EXTINFOSHIFT = 0
    D3DVSD_EXTINFOMASK = (&HFFFFFF& << D3DVSD_EXTINFOSHIFT)
End Enum

Public Const D3DVSD_STREAMTESSSHIFT As Long = 28
Public Const D3DVSD_STREAMTESSMASK As Long = (1 << D3DVSD_STREAMTESSSHIFT)

' === Functions ===

Public Function D3DVSD_MAKETOKENTYPE(tokenType As Long) As Long
    Return (tokenType << D3DVSD_TOKENTYPESHIFT) And D3DVSD_TOKENTYPEMASK
End Function

' Set current stream
Public Function D3DVSD_STREAM(StreamNumber As Long) As Long
    Return D3DVSD_MAKETOKENTYPE(D3DVSD_TOKEN_STREAM) Or StreamNumber
End Function

' Set tessellator stream
Public Function D3DVSD_STREAM_TESS() As Long
    Return D3DVSD_MAKETOKENTYPE(D3DVSD_TOKEN_STREAM) Or D3DVSD_STREAMTESSMASK
End Function

' Bind vertex register to element from stream
Public Function D3DVSD_REG(VertexRegister As Long, Type As Long) As Long
    Return D3DVSD_MAKETOKENTYPE(D3DVSD_TOKEN_STREAMDATA) Or (Type << D3DVSD_DATATYPESHIFT) Or VertexRegister
End Function

' Skip DWORDs in vertex
Public Function D3DVSD_SKIP(DWORDCount As Long) As Long
    Return D3DVSD_MAKETOKENTYPE(D3DVSD_TOKEN_STREAMDATA) Or &H10000000 Or (DWORDCount << D3DVSD_SKIPCOUNTSHIFT)
End Function

' Load data into shader constant memory
Public Function D3DVSD_CONST(ConstantAddress As Long, Count As Long) As Long
    Return D3DVSD_MAKETOKENTYPE(D3DVSD_TOKEN_CONSTMEM) Or (Count << D3DVSD_CONSTCOUNTSHIFT) Or ConstantAddress
End Function

' Enable tessellator-generated normals
Public Function D3DVSD_TESSNORMAL(VertexRegisterIn As Long, VertexRegisterOut As Long) As Long
    Return D3DVSD_MAKETOKENTYPE(D3DVSD_TOKEN_TESSELLATOR) Or (VertexRegisterIn << D3DVSD_VERTEXREGINSHIFT) Or (2 << D3DVSD_DATATYPESHIFT) Or VertexRegisterOut
End Function

' Enable tessellator-generated surface parameters
Public Function D3DVSD_TESSUV(VertexRegister As Long) As Long
    Return D3DVSD_MAKETOKENTYPE(D3DVSD_TOKEN_TESSELLATOR) Or &H10000000 Or (1 << D3DVSD_DATATYPESHIFT) Or VertexRegister
End Function

Public Const D3DVSD_END   = &HFFFFFFFF
'  Generates NOP token
Public Const D3DVSD_NOP   = &H00000000

Public Enum D3DVSDT
    D3DVSDT_FLOAT1 = &H00  ' 1D float expanded to (value, 0., 0., 1.)
    D3DVSDT_FLOAT2 = &H01  ' 2D float expanded to (value, value, 0., 1.)
    D3DVSDT_FLOAT3 = &H02  ' 3D float expanded to (value, value, value, 1.)
    D3DVSDT_FLOAT4 = &H03  ' 4D float
    D3DVSDT_D3DCOLOR = &H04  ' 4D packed unsigned bytes mapped to 0. to 1. range
'  Input is in D3DCOLOR format (ARGB) expanded to (R, G, B, A)
    D3DVSDT_UBYTE4 = &H05  ' 4D unsigned byte
    D3DVSDT_SHORT2 = &H06  ' 2D signed short expanded to (value, value, 0., 1.)
    D3DVSDT_SHORT4 = &H07  ' 4D signed short
End Enum

Public Enum D3DVSDE
    D3DVSDE_POSITION = 0
    D3DVSDE_BLENDWEIGHT = 1
    D3DVSDE_BLENDINDICES = 2
    D3DVSDE_NORMAL = 3
    D3DVSDE_PSIZE = 4
    D3DVSDE_DIFFUSE = 5
    D3DVSDE_SPECULAR = 6
    D3DVSDE_TEXCOORD0 = 7
    D3DVSDE_TEXCOORD1 = 8
    D3DVSDE_TEXCOORD2 = 9
    D3DVSDE_TEXCOORD3 = 10
    D3DVSDE_TEXCOORD4 = 11
    D3DVSDE_TEXCOORD5 = 12
    D3DVSDE_TEXCOORD6 = 13
    D3DVSDE_TEXCOORD7 = 14
    D3DVSDE_POSITION2 = 15
    D3DVSDE_NORMAL2 = 16
End Enum
 
Public Enum D3DSHADER_PARAM_DSTMOD_TYPE
    D3DSPDM_NONE = 0 << D3DSP_DSTMOD_SHIFT ' nop
    D3DSPDM_SATURATE = 1 << D3DSP_DSTMOD_SHIFT ' clamp to 0. to 1. range
    D3DSPDM_FORCE_DWORD = &h7fffffff ' force 32-bit size enum
End Enum

Public Enum D3D8SHADER_PARAM_REGISTER_TYPE
    D3D8SPR_TEMP = 0 << D3DSP_REGTYPE_SHIFT ' Temporary Register File
    D3D8SPR_INPUT = 1 << D3DSP_REGTYPE_SHIFT ' Input Register File
    D3D8SPR_CONST = 2 << D3DSP_REGTYPE_SHIFT ' Constant Register File
    D3D8SPR_ADDR = 3 << D3DSP_REGTYPE_SHIFT ' Address Register (VS)
    D3D8SPR_TEXTURE = 3 << D3DSP_REGTYPE_SHIFT ' Texture Register File (PS)
    D3D8SPR_RASTOUT = 4 << D3DSP_REGTYPE_SHIFT ' Rasterizer Register File
    D3D8SPR_ATTROUT = 5 << D3DSP_REGTYPE_SHIFT ' Attribute Output Register File
    D3D8SPR_TEXCRDOUT = 6 << D3DSP_REGTYPE_SHIFT ' Texture Coordinate Output Register File
    D3D8SPR_FORCE_DWORD = &H7fffffff ' force 32-bit size enum
End Enum

Public Const D3DPRESENT_RATE_UNLIMITED = &H7fffffff

Public Type D3DADAPTER_IDENTIFIER8
    Driver(0 To (MAX_DEVICE_IDENTIFIER_STRING - 1)) As Byte
    Description(0 To (MAX_DEVICE_IDENTIFIER_STRING - 1)) As Byte
    '#ifdef _WIN32
    DriverVersion As LARGE_INTEGER /* Defined for 32 bit components */
    '#else
    '    DWORD           DriverVersionLowPart;     /* Defined for 16 bit driver components */
    '    DWORD           DriverVersionHighPart;
    '#endif
    VendorId As Long
    DeviceId As Long
    SubSysId As Long
    Revision As Long
    DeviceIdentifier As UUID
    WHQLLevel As Long
End Type

Public Const D3DDEVINFOID_RESOURCEMANAGER  = 5  '* Used with D3DDEVINFO_RESOURCEMANAGER */
Public Const D3DDEVINFOID_VERTEXSTATS  = 6  '* Used with D3DDEVINFO_D3DVERTEXSTATS */



'd3d8caps.h

Public Type D3DCAPS8
   DeviceType As D3DDEVTYPE
   AdapterOrdinal As Long
   /* Caps from DX7 Draw */
   Caps As D3DCAPS
   Caps2 As D3DCAPS2
   Caps3 As D3DCAPS3
   PresentationIntervals As Long
   /* Cursor Caps */
   CursorCaps As Long
   /* 3D Device Caps */
   DevCaps As Long
   PrimitiveMiscCaps As Long
   RasterCaps As Long
   ZCmpCaps As Long
   SrcBlendCaps As Long
   DestBlendCaps As Long
   AlphaCmpCaps As Long
   ShadeCaps As Long
   TextureCaps As Long
   TextureFilterCaps As Long ' D3DPTFILTERCAPS for IDirect3DTexture8's
   CubeTextureFilterCaps As Long ' D3DPTFILTERCAPS for IDirect3DCubeTexture8's
   VolumeTextureFilterCaps As Long ' D3DPTFILTERCAPS for IDirect3DVolumeTexture8's
   TextureAddressCaps As Long ' D3DPTADDRESSCAPS for IDirect3DTexture8's
   VolumeTextureAddressCaps As Long ' D3DPTADDRESSCAPS for IDirect3DVolumeTexture8's
   LineCaps As Long ' D3DLINECAPS
   MaxTextureWidth As Long
   MaxTextureHeight As Long
   MaxVolumeExtent As Long
   MaxTextureRepeat As Long
   MaxTextureAspectRatio As Long
   MaxAnisotropy As Long
   MaxVertexW As Single
   GuardBandLeft As Single
   GuardBandTop As Single
   GuardBandRight As Single
   GuardBandBottom As Single
   ExtentsAdjust As Single
   StencilCaps As Long
   FVFCaps As Long
   TextureOpCaps As Long
   MaxTextureBlendStages As Long
   MaxSimultaneousTextures As Long
   VertexProcessingCaps As Long
   MaxActiveLights As Long
   MaxUserClipPlanes As Long
   MaxVertexBlendMatrices As Long
   MaxVertexBlendMatrixIndex As Long
   MaxPointSize As Single
   MaxPrimitiveCount As Long ' max number of primitives per DrawPrimitive call
   MaxVertexIndex As Long
   MaxStreams As Long
   MaxStreamStride As Long ' max stride for SetStreamSource
   VertexShaderVersion As Long
   MaxVertexShaderConst As Long ' number of vertex shader constant registers
   PixelShaderVersion As Long
   MaxPixelShaderValue As Single ' max value of pixel shader arithmetic component
End Type


'd3d8.h

Public Function IID_IDirect3D8() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1dd9e8da, &H1c77, &H4d40, &Hb0, &Hcf, &H98, &Hfe, &Hfd, &Hff, &H95, &H12)
IID_IDirect3D8 = iid
End Function
Public Function IID_IDirect3DDevice8() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7385e5df, &H8fe8, &H41d5, &H86, &Hb6, &Hd7, &Hb4, &H85, &H47, &Hb6, &Hcf)
IID_IDirect3DDevice8 = iid
End Function
Public Function IID_IDirect3DResource8() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b36bb7b, &H9b7, &H410a, &Hb4, &H45, &H7d, &H14, &H30, &Hd7, &Hb3, &H3f)
IID_IDirect3DResource8 = iid
End Function
Public Function IID_IDirect3DBaseTexture8() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb4211cfa, &H51b9, &H4a9f, &Hab, &H78, &Hdb, &H99, &Hb2, &Hbb, &H67, &H8e)
IID_IDirect3DBaseTexture8 = iid
End Function
Public Function IID_IDirect3DTexture8() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He4cdd575, &H2866, &H4f01, &Hb1, &H2e, &H7e, &Hec, &He1, &Hec, &H93, &H58)
IID_IDirect3DTexture8 = iid
End Function
Public Function IID_IDirect3DCubeTexture8() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3ee5b968, &H2aca, &H4c34, &H8b, &Hb5, &H7e, &H0c, &H3d, &H19, &Hb7, &H50)
IID_IDirect3DCubeTexture8 = iid
End Function
Public Function IID_IDirect3DVolumeTexture8() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4b8aaafa, &H140f, &H42ba, &H91, &H31, &H59, &H7e, &Haf, &Haa, &H2e, &Had)
IID_IDirect3DVolumeTexture8 = iid
End Function
Public Function IID_IDirect3DVertexBuffer8() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8aeeeac7, &H05f9, &H44d4, &Hb5, &H91, &H00, &H0b, &H0d, &Hf1, &Hcb, &H95)
IID_IDirect3DVertexBuffer8 = iid
End Function
Public Function IID_IDirect3DIndexBuffer8() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0e689c9a, &H053d, &H44a0, &H9d, &H92, &Hdb, &H0e, &H3d, &H75, &H0f, &H86)
IID_IDirect3DIndexBuffer8 = iid
End Function
Public Function IID_IDirect3DSurface8() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb96eebca, &Hb326, &H4ea5, &H88, &H2f, &H2f, &Hf5, &Hba, &He0, &H21, &Hdd)
IID_IDirect3DSurface8 = iid
End Function
Public Function IID_IDirect3DVolume8() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hbd7349f5, &H14f1, &H42e4, &H9c, &H79, &H97, &H23, &H80, &Hdb, &H40, &Hc0)
IID_IDirect3DVolume8 = iid
End Function
Public Function IID_IDirect3DSwapChain8() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H928c088b, &H76b9, &H4c6b, &Ha5, &H36, &Ha5, &H90, &H85, &H38, &H76, &Hcd)
IID_IDirect3DSwapChain8 = iid
End Function


Public Declare PtrSafe Function Direct3DCreate8 Lib "d3d8.dll" (ByVal SDKVersion As Long) As IDirect3D8

Public Enum D3DSPDFLAGS
    D3DSPD_IUNKNOWN = &H00000001
End Enum

Public Enum D3D8CURRENTMODEDEFAULT
    D3DCURRENT_DISPLAY_MODE = &H00EFFFFF
End Enum

Public Enum D3D8EnumAdaptersFlags
    D3DENUM_NO_WHQL_LEVEL = &H00000002
End Enum




End Module

#End If