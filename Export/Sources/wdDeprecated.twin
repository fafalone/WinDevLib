'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

'shdeprecated.h - Select interfaces still in undocumented use beyond Vista

[InterfaceId("F46EDB3B-BC2F-11d0-9412-00AA00A3EBD3")]
[OleAutomation(False)]
Interface ITravelEntry Extends IUnknown
    Sub Invoke(ByVal punk As IUnknown)
    Sub Update(ByVal punk As IUnknown, ByVal fIsLocalAnchor As BOOL)
    Sub GetPidl(ppidl As LongPtr)
End Interface

[InterfaceId("66A9CB08-4802-11d2-A561-00A0C92DBFE8")]
[OleAutomation(False)]
Interface ITravelLog Extends IUnknown
    Sub AddEntry(ByVal punk As IUnknown, ByVal fIsLocalAnchor As BOOL)
    Sub UpdateEntry(ByVal punk As IUnknown, ByVal fIsLocalAnchor As BOOL)
    Sub UpdateExternal(ByVal punk As IUnknown, ByVal punkHLBrowseContext As IUnknown)
    Sub Travel(ByVal punk As IUnknown, ByVal iOffset As TravelLogNavConsts)
    Sub GetTravelEntry(ByVal punk As IUnknown, ByVal iOffset As TravelLogNavConsts, ppte As ITravelEntry)
    Sub FindTravelEntry(ByVal punk As IUnknown, ByVal pidl As LongPtr, ppte As ITravelEntry)
    Sub GetToolTipText(ByVal punk As IUnknown, ByVal iOffset As TravelLogNavConsts, ByVal idsTemplate As Long, ByVal pwzText As LongPtr, ByVal cchText As Long)
    Sub InsertMenuEntries(ByVal punk As IUnknown, ByVal hmenu As LongPtr, ByVal nPos As Long, ByVal idFirst As Long, ByVal idLast As Long, ByVal dwFLags As TravelLogMenuFlags)
    Sub Clone(pptl As ITravelLog)
    Sub CountEntries(ByVal punk As IUnknown)
    Sub Revert()
End Interface

[InterfaceId("2f0dd58c-f789-4f14-99fb-9293b3c9c212")]
[OleAutomation(False)]
Interface IExpDispSupportXP Extends IUnknown
    Sub FindCIE4ConnectionPoint(riid As UUID, ppccp As Any)
    Sub OnTranslateAccelerator(pMsg As MSG, ByVal grfModifiers As KEYMODIFIERS)
    Sub OnInvoke(ByVal dispidMember As Long, iid As UUID, ByVal lcid As Long, [TypeHint(DispatchTypes)] ByVal wFlags As Integer, pdispparams As DISPPARAMS, pvarResult As Variant, pexcepinfo As EXCEPINFO, puArgErr As Long)
End Interface
[InterfaceId("0D7D1D00-6FC0-11D0-A974-00C04FD705A2")]
[OleAutomation(False)]
Interface IExpDispSupport Extends IUnknown
    Sub FindCIE4ConnectionPoint(riid As UUID, ppccp As IConnectionPoint)
    Sub OnTranslateAccelerator(pMsg As MSG, ByVal grfModifiers As KEYMODIFIERS)
    Sub OnInvoke(ByVal dispidMember As Long, iid As UUID, ByVal lcid As Long, [TypeHint(DispatchTypes)] ByVal wFlags As Integer, pdispparams As DISPPARAMS, pvarResult As Variant, pexcepinfo As EXCEPINFO, puArgErr As Long)
        
End Interface

[InterfaceId("02ba3b52-0547-11d1-b833-00c04fc9b31f")]
[OleAutomation(False)]
Interface IBrowserService Extends IUnknown
    Sub GetParentSite(ppipsite As IOleInPlaceSite)
    Sub SetTitle(ByVal psv As IShellView, ByVal pszName As LongPtr)
    Sub GetTitle(ByVal psv As IShellView, ByVal pszName As LongPtr, ByVal cchName As Long)
    Sub GetOleObject(ppobjv As IOleObject)
    Sub GetTravelLog(pptl As ITravelLog)
    Sub ShowControlWindow(ByVal id As GCW_IDs, ByVal fShow As BOOL)
    Sub IsControlWindowShown(ByVal id As GCW_IDs, pfShown As BOOL)
    Sub IEGetDisplayName(ByVal pidl As LongPtr, ByVal pwszName As LongPtr, ByVal uFlags As SHGDNF)
    Sub IEParseDisplayName(ByVal uiCP As Long, ByVal pwszPath As LongPtr, ppidlOut As LongPtr)
    Sub DisplayParseError(ByVal hres As Long, ByVal pwszPath As LongPtr)
    Sub NavigateToPidl(ByVal pidl As LongPtr, [TypeHint(HLNF, BrowserServiceFlags)] ByVal grfHLNF As Long)
    Sub SetNavigateState(ByVal bnstate As BNSTATE)
    Sub GetNavigateState(pbnstate As BNSTATE)
    Sub NotifyRedirect(ByVal psv As IShellView, ByVal pidl As LongPtr, pfDidBrowse As BOOL)
    Sub UpdateWindowList()
    Sub UpdateBackForwardState()
    Sub SetFlags(ByVal dwFlags As BrowserServiceFlags, ByVal dwFlagMask As BrowserServiceFlags)
    Sub GetFlags(pdwFlags As BrowserServiceFlags)
    Sub CanNavigateNow()
    Sub GetPidl(ppidl As LongPtr)
    Sub SetReferrer(ByVal pidl As LongPtr)
    '[PreserveSig] Function GetBrowserIndex() As Long
    Sub GetBrowserIndex()
    Sub GetBrowserByIndex(ByVal dwID As Long, ppunk As IUnknown)
    Sub GetHistoryObject(ppole As IOleObject, pstm As IStream, ppbc As IBindCtx)
    Sub SetHistoryObject(ByVal pole As IOleObject, ByVal fIsLocalAnchor As BOOL)
    Sub CacheOLEServer(ByVal pole As IOleObject)
    Sub GetSetCodePage(pvarIn As Variant, pvarOut As Variant)
    Sub OnHttpEquiv(ByVal psv As IShellView, ByVal fDone As BOOL, pvarargIn As Variant, pvarargOut As Variant)
    Sub GetPalette(hpal As LongPtr)
    Sub RegisterWindow(ByVal fForceRegister As BOOL, ByVal swc As ShellWindowTypeConstants)
End Interface

[InterfaceId("5836FB00-8187-11CF-A12B-00AA004AE837")]
[OleAutomation(False)]
Interface IShellService Extends IUnknown
    Sub SetOwner(ByVal punkOwner As IUnknown)
End Interface

[InterfaceId("68BD21CC-438B-11d2-A560-00A0C92DBFE8")]
[OleAutomation(False)]
Interface IBrowserService2 Extends IBrowserService
    [PreserveSig] Function WndProcBS(ByVal hwnd As LongPtr, ByVal uMsg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr) As LongPtr
    Sub SetAsDefFolderSettings()
    Sub GetViewRect(prc As RECT)
    Sub OnSize(ByVal wParam As LongPtr)
    Sub OnCreate(ByVal pcs As LongPtr /*CREATESTRUCTW*/)
    [PreserveSig] Function OnCommand(ByVal wParam As LongPtr, ByVal lParam As LongPtr) As LongPtr
    Sub OnDestroy()
    [PreserveSig] Function OnNotify(pnm As NMHDR) As LongPtr
    Sub OnSetFocus()
    Sub OnFrameWindowActivateBS(ByVal fActive As BOOL)
    Sub ReleaseShellView()
    Sub ActivatePendingView()
    Sub CreateViewWindow(ByVal psvNew As IShellView, ByVal psvOld As IShellView, prcView As RECT, phwnd As LongPtr)
    Sub CreateBrowserPropSheetExt(riid As UUID, ppv As Any)
    Sub GetViewWindow(phwndView As LongPtr)
    Sub GetBaseBrowserData(pbbd As BASEBROWSERDATA)
    [PreserveSig] Function PutBaseBrowserData() As LongPtr
    Sub InitializeTravelLog(ByVal ptl As ITravelLog, ByVal dw As Long)
    Sub SetTopBrowser()
    [PreserveSig] Function Offline(ByVal iCmd As Long) As Long
    Sub AllowViewResize(ByVal f As BOOL)
    Sub SetActivateState(ByVal u As Long)
    Sub UpdateSecureLockIcon(eSecureLock As Long)
    Sub InitializeDownloadManager()
    Sub InitializeTransitionSite()
    Sub _Initialize(ByVal hwnd As LongPtr, ByVal pauto As IUnknown)
    Sub _CancelPendingNavigationAsync()
    Sub _CancelPendingView()
    Sub _MaySaveChanges()
    Sub _PauseOrResumeView(ByVal fPaused As BOOL)
    Sub _DisableModeless()
    Sub _NavigateToPidl2(ByVal pidl As LongPtr, [TypeHint(HLNF, BrowserServiceFlags)] ByVal grfHLNF As Long, ByVal dwFlags As Long)
    Sub _TryShell2Rename(ByVal psv As IShellView, ByVal pidlNew As LongPtr)
    Sub _SwitchActivationNow()
    Sub _ExecChildren(ByVal punkBar As IUnknown, ByVal fBroadcast As BOOL, pguidCmdGroup As UUID, ByVal nCmdId As Long, ByVal nCmdexecopt As Long, pvarargIn As Variant, pvarargOut As Variant)
    Sub _SendChildren(ByVal hwndBar As LongPtr, ByVal fBroadcast As BOOL, ByVal uMsg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr)
    Sub GetFolderSetData(pfsd As FOLDERSETDATA)
    Sub _OnFocusChange(ByVal itb As Long)
    Sub v_ShowHideChildWindows(ByVal fChildOnly As BOOL)
    [PreserveSig] Function _get_itbLastFocus() As Long
    Sub _put_itbLastFocus(ByVal itbLastFocus As Long)
    Sub _UIActivateView(ByVal uState As SVUIA_STATUS)
    Sub _GetViewBorderRect(prc As RECT)
    Sub _UpdateViewRectSize()
    Sub _ResizeNextBorder(ByVal itb As Long)
    Sub _ResizeView()
    Sub _GetEffectiveClientArea(lprectBorder As RECT, ByVal hmon As LongPtr)
    [PreserveSig] Function v_GetViewStream(ByVal pidl As LongPtr, ByVal grfMode As Long, ByVal pwszName As LongPtr) As IStream
    [PreserveSig] Function ForwardViewMsg(ByVal uMsg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr) As LongPtr
    Sub SetAcceleratorMenu(ByVal hacc As LongPtr)
    [PreserveSig] Function _GetToolbarCount() As Long
    [PreserveSig] Function _GetToolbarItem(ByVal itb As Long) As LongPtr
    Sub _SaveToolbars(ByVal pstm As IStream)
    Sub _LoadToolbars(ByVal pstm As IStream)
    Sub _CloseAndReleaseToolbars(ByVal fClose As BOOL)
    Sub v_MayGetNextToolbarFocus(lpMsg As MSG, ByVal itbNext As Long, ByVal citb As Long, pptbi As TOOLBARITEM, phwnd As LongPtr)
    Sub _ResizeNextBorderHelper(ByVal itb As Long, ByVal bUseMonitor As BOOL)
    [PreserveSig] Function _FindTBar(ByVal punkSrc As IUnknown) As Long
    Sub _SetFocus(pbti As TOOLBARITEM, ByVal hwnd As LongPtr, lpMsg As MSG)
    Sub v_MayTranslateAccelerator(pMsg As MSG)
    Sub _GetBorderDWHelper(ByVal punkSrc As IUnknown, lprectBorder As RECT, ByVal bUseMonitor As BOOL)
    Sub v_CheckZoneCrossing(ByVal pidl As LongPtr)
End Interface

[InterfaceId("27D7CE21-762D-48F3-86F3-40E2FD3749C4")]
[OleAutomation(False)]
Interface IBrowserService3 Extends IBrowserService2
    Sub _PositionViewWindow(ByVal hwnd As LongPtr, prc As RECT)
    Sub IEParseDisplayNameEx(ByVal uiCP As Long, ByVal pwszPath As LongPtr, ByVal dwFLags As IEPDNFLAGS, ppidlOut As LongPtr)
End Interface

[InterfaceId("639f1bff-e135-4096-abd8-e0f504d649a4")]
[OleAutomation(False)]
Interface IBrowserService4 Extends IBrowserService3
    Sub ActivateView(ByVal fPendingView As BOOL)
    Sub SaveViewState()
    Sub _ResizeAllBorders()
End Interface

 
    
#If WDL_QUALIFY Then
[MustBeQualified]
#End If
Module wdDeprecated

    Public Enum TravelLogNavConsts
        TLOG_BACK = -1
        TLOG_CURRENT = 0
        TLOG_FORE = 1
    End Enum
    Public Enum TravelLogMenuFlags
        TLMENUF_INCLUDECURRENT = &H00000001
        TLMENUF_CHECKCURRENT = (TLMENUF_INCLUDECURRENT Or &H00000002)
        TLMENUF_BACK = &H00000010  ' Default
        TLMENUF_FORE = &H00000020
        TLMENUF_BACKANDFORTH = (TLMENUF_BACK Or TLMENUF_FORE Or TLMENUF_INCLUDECURRENT)
    End Enum
    
    Public Enum BNSTATE
        BNS_NORMAL = 0
        BNS_BEGIN_NAVIGATE = 1
        BNS_NAVIGATE = 2
    End Enum
    
    Public Enum SHELLBROWSERSHOWCONTROL
        SBSC_HIDE = 0
        SBSC_SHOW = 1
        SBSC_TOGGLE = 2
        SBSC_QUERY = 3
    End Enum
    
    Public Enum BrowserServiceFlags
        BSF_REGISTERASDROPTARGET = &H00000001
        BSF_THEATERMODE = &H00000002
        BSF_NOLOCALFILEWARNING = &H00000010
        BSF_UISETBYAUTOMATION = &H00000100
        BSF_RESIZABLE = &H00000200
        BSF_CANMAXIMIZE = &H00000400
        BSF_TOPBROWSER = &H00000800
        BSF_NAVNOHISTORY = &H00001000
        BSF_HTMLNAVCANCELED = &H00002000
        BSF_DONTSHOWNAVCANCELPAGE = &H00004000
        BSF_SETNAVIGATABLECODEPAGE = &H00008000&
        BSF_DELEGATEDNAVIGATION = &H00010000
        BSF_TRUSTEDFORACTIVEX = &H00020000
        BSF_MERGEDMENUS = &H00040000
        BSF_FEEDNAVIGATION = &H00080000
        BSF_FEEDSUBSCRIBED = &H00100000
        HLNF_CALLERUNTRUSTED = &H00200000  ' The navigate was possibly initiated by a web page by scripting code already on the system
        HLNF_TRUSTEDFORACTIVEX = &H00400000  ' The navigate should allow ActiveX prompts.
        HLNF_DISABLEWINDOWRESTRICTIONS = &H00800000  ' New window is created by url in zone that has the window restrictions security mitigation disabled
        HLNF_TRUSTFIRSTDOWNLOAD = &H01000000  ' New window is result of user initiated action.  Trust it if it immediatly trys to download.
        HLNF_UNTRUSTEDFORDOWNLOAD = &H02000000  ' Trident is navigating to an untrusted non-html file.  If we try to download it, do not.
        SHHLNF_NOAUTOSELECT = &H04000000  ' This navigate should not automatically select History ShellFolder
        SHHLNF_WRITENOHISTORY = &H08000000  ' This navigate should not go in the History ShellFolder
        HLNF_EXTERNALNAVIGATE = &H10000000
        HLNF_ALLOW_AUTONAVIGATE = &H20000000
        HLNF_NEWWINDOWSMANAGED = &H80000000  ' If this navigate results in a new window, it should be subject to popup manager.
    End Enum
    
    Public Enum SECURELOCKCODE
        SECURELOCK_NOCHANGE = -1
        SECURELOCK_SET_UNSECURE = 0
        SECURELOCK_SET_MIXED = (SECURELOCK_SET_UNSECURE + 1)
        SECURELOCK_SET_SECUREUNKNOWNBIT = (SECURELOCK_SET_MIXED + 1)
        SECURELOCK_SET_SECURE40BIT = (SECURELOCK_SET_SECUREUNKNOWNBIT + 1)
        SECURELOCK_SET_SECURE56BIT = (SECURELOCK_SET_SECURE40BIT + 1)
        SECURELOCK_SET_FORTEZZA = (SECURELOCK_SET_SECURE56BIT + 1)
        SECURELOCK_SET_SECURE128BIT = (SECURELOCK_SET_FORTEZZA + 1)
        SECURELOCK_FIRSTSUGGEST = (SECURELOCK_SET_SECURE128BIT + 1)
        SECURELOCK_SUGGEST_UNSECURE = SECURELOCK_FIRSTSUGGEST
        SECURELOCK_SUGGEST_MIXED = (SECURELOCK_SUGGEST_UNSECURE + 1)
        SECURELOCK_SUGGEST_SECUREUNKNOWNBIT = (SECURELOCK_SUGGEST_MIXED + 1)
        SECURELOCK_SUGGEST_SECURE40BIT = (SECURELOCK_SUGGEST_SECUREUNKNOWNBIT + 1)
        SECURELOCK_SUGGEST_SECURE56BIT = (SECURELOCK_SUGGEST_SECURE40BIT + 1)
        SECURELOCK_SUGGEST_FORTEZZA = (SECURELOCK_SUGGEST_SECURE56BIT + 1)
        SECURELOCK_SUGGEST_SECURE128BIT = (SECURELOCK_SUGGEST_FORTEZZA + 1)
    End Enum
    
    Public Type BASEBROWSERDATAXP
        hwnd As LongPtr
        ptl As ITravelLog
        phlf As IHlinkFrame
        pautoWB2 As IWebBrowser2
        pautoEDS As IExpDispSupportXP
        pautoSS As IShellService
        eSecureLockIcon As Long
        fCreatingViewWindow As Long ':1
        uActivateState As Long
        pidlViewState As LongPtr
        pctView As IOleCommandTarget
        pidlCur As LongPtr
        psv As IShellView
        psf As IShellFolder
        hwndView As LongPtr
        pszTitleCur As LongPtr
        pidlPending As LongPtr
        psvPending As IShellView
        psfPending As IShellFolder
        hwndViewPending As LongPtr
        pszTitlePending As LongPtr
        fIsViewMSHTML As BOOL
        fPrivacyImpacted As BOOL
        clsidView As UUID
        clsidViewPending As UUID
        hwndFrame As LongPtr
    End Type
    Public Type BASEBROWSERDATALH
        hwnd As LongPtr
        ptl As ITravelLog
        phlf As IHlinkFrame
        pautoWB2 As IWebBrowser2
        pautoEDS As IExpDispSupport
        pautoSS As IShellService
        eSecureLockIcon As Long
        fCreatingViewWindoW As Long ' : 1;
        uActivateState As Long
        pidlViewState As LongPtr
        pctView As IOleCommandTarget
        pidlCur As LongPtr
        psv As IShellView
        psf As IShellFolder
        hwndView As LongPtr
        pszTitleCur As LongPtr
        pidlPending As LongPtr
        psvPending As IShellView
        psfPending As IShellFolder
        hwndViewPending As LongPtr
        pszTitlePending As LongPtr
        fIsViewMSHTML As BOOL
        fPrivacyImpacted As BOOL
        clsidView As UUID
        clsidViewPending As UUID
        hwndFrame As LongPtr
        lPhishingFilterStatus As Long
    End Type
    'Alias BASEBROWSERDATA As BASEBROWSERDATALH
    Public Type BASEBROWSERDATA
        hwnd As LongPtr
        ptl As ITravelLog
        phlf As IHlinkFrame
        pautoWB2 As IWebBrowser2
        pautoEDS As IExpDispSupport
        pautoSS As IShellService
        eSecureLockIcon As Long
        fCreatingViewWindoW As Long ' : 1;
        uActivateState As Long
        pidlViewState As LongPtr
        pctView As IOleCommandTarget
        pidlCur As LongPtr
        psv As IShellView
        psf As IShellFolder
        hwndView As LongPtr
        pszTitleCur As LongPtr
        pidlPending As LongPtr
        psvPending As IShellView
        psfPending As IShellFolder
        hwndViewPending As LongPtr
        pszTitlePending As LongPtr
        fIsViewMSHTML As BOOL
        fPrivacyImpacted As BOOL
        clsidView As UUID
        clsidViewPending As UUID
        hwndFrame As LongPtr
        lPhishingFilterStatus As Long
    End Type
    Public Enum FolderSetViewPriorityFlags
        VIEW_PRIORITY_RESTRICTED = &H00000070  ' a shell restriction is in place that forces this view to be the one we use
        VIEW_PRIORITY_CACHEHIT = &H00000050  ' we have registry info for the view, so the user has been there before
        VIEW_PRIORITY_STALECACHEHIT = &H00000045  ' we have stale registry info for the view, so we fall back to the 'all folders like this' default
        VIEW_PRIORITY_USEASDEFAULT = &H00000043  ' 'Use As Default' is more important than shellext, but less than a stale cache
        VIEW_PRIORITY_SHELLEXT = &H00000040  ' next we let the shell extension have its say
        VIEW_PRIORITY_CACHEMISS = &H00000030  ' if we have a cache miss, then we fall back to the 'all folders like this' default
        VIEW_PRIORITY_INHERIT = &H00000020  ' then try to inherit the view from the previous window
        VIEW_PRIORITY_SHELLEXT_ASBACKUP = &H0015  ' If classic view state is enabled we want the shell to default to an inheritted view
        VIEW_PRIORITY_DESPERATE = &H00000010  ' just pick the last view that the window supports
        VIEW_PRIORITY_NONE = &H00000000  ' dont have a view yet
    End Enum
    Public Type FOLDERSETDATA
         fs As FOLDERSETTINGS
         vidRestore As UUID 'SHELLVIEWID
        dwViewPriority As FolderSetViewPriorityFlags
    End Type
    Public Type TOOLBARITEM
        ptbar As IDockingWindow
        rcBorderTool As BORDERWIDTHS
        pwszItem As LongPtr
        fShow As BOOL
        hMon As LongPtr 'HMONITOR
    End Type
    Public Const ITB_VIEW = -1
    
    Public Enum IEPDNFLAGS
        IEPDN_BINDINGUI = &H1
    End Enum
        
        
End Module