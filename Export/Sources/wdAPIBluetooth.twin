'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

'bluetoothapis.h - 100%

'bthsdpdef.h - 100%
'bthdef.h - 90% (Macros not done)

#If WINDEVLIB_LITE = 0 Then
Module wdAPIBluetooth

#Region "bthsdpdef.h"
Public Type SDP_LARGE_INTEGER_16
    LowPart As LongLong
    HighPart As LongLong
End Type
Public Type SDP_ULARGE_INTEGER_16
    LowPart As LongLong
    HighPart As LongLong
End Type

Public Enum NodeContainerType
    NodeContainerTypeSequence = 0
    NodeContainerTypeAlternative = 1
End Enum

Public Enum SDP_TYPE
    SDP_TYPE_NIL = &H00
    SDP_TYPE_UINT = &H01
    SDP_TYPE_INT = &H02
    SDP_TYPE_UUID = &H03
    SDP_TYPE_STRING = &H04
    SDP_TYPE_BOOLEAN = &H05
    SDP_TYPE_SEQUENCE = &H06
    SDP_TYPE_ALTERNATIVE = &H07
    SDP_TYPE_URL = &H08
    SDP_TYPE_CONTAINER = &H20
End Enum
Public Enum SDP_SPECIFICTYPE
    SDP_ST_NONE = &H0000
    SDP_ST_UINT8 = &H0010
    SDP_ST_UINT16 = &H0110
    SDP_ST_UINT32 = &H0210
    SDP_ST_UINT64 = &H0310
    SDP_ST_UINT128 = &H0410
    SDP_ST_INT8 = &H0020
    SDP_ST_INT16 = &H0120
    SDP_ST_INT32 = &H0220
    SDP_ST_INT64 = &H0320
    SDP_ST_INT128 = &H0420
    SDP_ST_UUID16 = &H0130
    SDP_ST_UUID32 = &H0220
    SDP_ST_UUID128 = &H0430
End Enum

Public Type SdpAttributeRange
    minAttribute As Integer
    maxAttribute As Integer
End Type

Public Type SdpQueryUuidUnion
    ' typedef
    ' #ifdef MIDL_PASS 
          ' [switch_type(unsigned short)]
    ' #endif
    ' union SdpQueryUuidUnion {
    ' #ifdef MIDL_PASS 
        ' [case(SDP_ST_UUID128)]
    ' #endif
           ' GUID uuid128;

    ' #ifdef MIDL_PASS 
        ' [case(SDP_ST_UUID32)] 
    ' #endif // _NTDDK_
           ' ULONG uuid32;

    ' #ifdef MIDL_PASS 
        ' [case(SDP_ST_UUID16)]
    ' #endif // _NTDDK_
            ' USHORT uuid16;
    ' } SdpQueryUuidUnion;
    u(15) As Byte
End Type
Public Type SdpQueryUuid
    u As SdpQueryUuidUnion
    uuidType As Integer
End Type




#End Region
#Region "bthdef.h"

Public Const BTH_MAJORVERSION  = 2
Public Const BTH_MINORVERSION  = 1 'Vista+. 0 for XP

Public Function GUID_BTHPORT_DEVICE_INTERFACE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H850302a, &Hb344, &H4fda, &H9b, &He9, &H90, &H57, &H6b, &H8d, &H46, &Hf0)
GUID_BTHPORT_DEVICE_INTERFACE = iid
End Function
Public Function GUID_BTH_RFCOMM_SERVICE_DEVICE_INTERFACE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb142fc3e, &Hfa4e, &H460b, &H8a, &Hbc, &H07, &H2b, &H62, &H8b, &H3c, &H70)
GUID_BTH_RFCOMM_SERVICE_DEVICE_INTERFACE = iid
End Function
Public Function GUID_BLUETOOTH_RADIO_IN_RANGE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hea3b5b82, &H26ee, &H450e, &Hb0, &Hd8, &Hd2, &H6f, &He3, &H0a, &H38, &H69)
GUID_BLUETOOTH_RADIO_IN_RANGE = iid
End Function
Public Function GUID_BLUETOOTH_RADIO_OUT_OF_RANGE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He28867c9, &Hc2aa, &H4ced, &Hb9, &H69, &H45, &H70, &H86, &H60, &H37, &Hc4)
GUID_BLUETOOTH_RADIO_OUT_OF_RANGE = iid
End Function
Public Function GUID_BLUETOOTH_L2CAP_EVENT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7eae4030, &Hb709, &H4aa8, &Hac, &H55, &He9, &H53, &H82, &H9c, &H9d, &Haa)
GUID_BLUETOOTH_L2CAP_EVENT = iid
End Function
Public Function GUID_BLUETOOTH_HCI_EVENT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hfc240062, &H1541, &H49be, &Hb4, &H63, &H84, &Hc4, &Hdc, &Hd7, &Hbf, &H7f)
GUID_BLUETOOTH_HCI_EVENT = iid
End Function
Public Function GUID_BLUETOOTH_AUTHENTICATION_REQUEST() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5DC9136D, &H996C, &H46DB, &H84, &HF5, &H32, &HC0, &HA3, &HF4, &H73, &H52)
GUID_BLUETOOTH_AUTHENTICATION_REQUEST = iid
End Function
Public Function GUID_BLUETOOTH_KEYPRESS_EVENT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD668DFCD, &H0F4E, &H4EFC, &HBF, &HE0, &H39, &H2E, &HEE, &HC5, &H10, &H9C)
GUID_BLUETOOTH_KEYPRESS_EVENT = iid
End Function
Public Function GUID_BLUETOOTH_HCI_VENDOR_EVENT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H547247e6, &H45bb, &H4c33, &Haf, &H8c, &Hc0, &H0e, &Hfe, &H15, &Ha7, &H1d)
GUID_BLUETOOTH_HCI_VENDOR_EVENT = iid
End Function
Public Function Bluetooth_Base_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000000, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
Bluetooth_Base_UUID = iid
End Function

Public Const SDP_PROTOCOL_UUID16  = (&H0001)
Public Const UDP_PROTOCOL_UUID16  = (&H0002)
Public Const RFCOMM_PROTOCOL_UUID16  = (&H0003)
Public Const TCP_PROTOCOL_UUID16  = (&H0004)
Public Const TCSBIN_PROTOCOL_UUID16  = (&H0005)
Public Const TCSAT_PROTOCOL_UUID16  = (&H0006)
Public Const ATT_PROTOCOL_UUID16  = (&H0007)
Public Const OBEX_PROTOCOL_UUID16  = (&H0008)
Public Const IP_PROTOCOL_UUID16  = (&H0009)
Public Const FTP_PROTOCOL_UUID16  = (&H000A)
Public Const HTTP_PROTOCOL_UUID16  = (&H000C)
Public Const WSP_PROTOCOL_UUID16  = (&H000E)
Public Const BNEP_PROTOCOL_UUID16  = (&H000F)
Public Const UPNP_PROTOCOL_UUID16  = (&H0010)
Public Const HID_PROTOCOL_UUID16  = (&H0011)
Public Const HCCC_PROTOCOL_UUID16  = (&H0012)
Public Const HCDC_PROTOCOL_UUID16  = (&H0014)
Public Const HCN_PROTOCOL_UUID16  = (&H0016)
Public Const AVCTP_PROTOCOL_UUID16  = (&H0017)
Public Const AVDTP_PROTOCOL_UUID16  = (&H0019)
Public Const CMPT_PROTOCOL_UUID16  = (&H001B)
Public Const UDI_C_PLANE_PROTOCOL_UUID16  = (&H001D)
Public Const L2CAP_PROTOCOL_UUID16  = (&H0100)

Public Function SDP_PROTOCOL_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, SDP_PROTOCOL_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
SDP_PROTOCOL_UUID = iid
End Function
Public Function UDP_PROTOCOL_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, UDP_PROTOCOL_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
UDP_PROTOCOL_UUID = iid
End Function
Public Function RFCOMM_PROTOCOL_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, RFCOMM_PROTOCOL_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
RFCOMM_PROTOCOL_UUID = iid
End Function
Public Function TCP_PROTOCOL_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, TCP_PROTOCOL_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
TCP_PROTOCOL_UUID = iid
End Function
Public Function TCSBIN_PROTOCOL_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, TCSBIN_PROTOCOL_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
TCSBIN_PROTOCOL_UUID = iid
End Function
Public Function TCSAT_PROTOCOL_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, TCSAT_PROTOCOL_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
TCSAT_PROTOCOL_UUID = iid
End Function
Public Function ATT_PROTOCOL_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, ATT_PROTOCOL_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
ATT_PROTOCOL_UUID = iid
End Function
Public Function OBEX_PROTOCOL_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, OBEX_PROTOCOL_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
OBEX_PROTOCOL_UUID = iid
End Function
Public Function IP_PROTOCOL_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, IP_PROTOCOL_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
IP_PROTOCOL_UUID = iid
End Function
Public Function FTP_PROTOCOL_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, FTP_PROTOCOL_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
FTP_PROTOCOL_UUID = iid
End Function
Public Function HTTP_PROTOCOL_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, HTTP_PROTOCOL_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
HTTP_PROTOCOL_UUID = iid
End Function
Public Function WSP_PROTOCOL_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, WSP_PROTOCOL_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
WSP_PROTOCOL_UUID = iid
End Function
Public Function BNEP_PROTOCOL_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, BNEP_PROTOCOL_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
BNEP_PROTOCOL_UUID = iid
End Function
Public Function UPNP_PROTOCOL_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, UPNP_PROTOCOL_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
UPNP_PROTOCOL_UUID = iid
End Function
Public Function HID_PROTOCOL_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, HID_PROTOCOL_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
HID_PROTOCOL_UUID = iid
End Function
Public Function HCCC_PROTOCOL_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, HCCC_PROTOCOL_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
HCCC_PROTOCOL_UUID = iid
End Function
Public Function HCDC_PROTOCOL_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, HCDC_PROTOCOL_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
HCDC_PROTOCOL_UUID = iid
End Function
Public Function HCN_PROTOCOL_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, HCN_PROTOCOL_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
HCN_PROTOCOL_UUID = iid
End Function
Public Function AVCTP_PROTOCOL_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, AVCTP_PROTOCOL_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
AVCTP_PROTOCOL_UUID = iid
End Function
Public Function AVDTP_PROTOCOL_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, AVDTP_PROTOCOL_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
AVDTP_PROTOCOL_UUID = iid
End Function
Public Function CMPT_PROTOCOL_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, CMPT_PROTOCOL_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
CMPT_PROTOCOL_UUID = iid
End Function
Public Function UDI_C_PLANE_PROTOCOL_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, UDI_C_PLANE_PROTOCOL_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
UDI_C_PLANE_PROTOCOL_UUID = iid
End Function
Public Function L2CAP_PROTOCOL_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, L2CAP_PROTOCOL_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
L2CAP_PROTOCOL_UUID = iid
End Function


Public Const ServiceDiscoveryServerServiceClassID_UUID16  = (&H1000)
Public Const BrowseGroupDescriptorServiceClassID_UUID16  = (&H1001)
Public Const PublicBrowseGroupServiceClassID_UUID16  = (&H1002)
Public Const SerialPortServiceClassID_UUID16  = (&H1101)
Public Const LANAccessUsingPPPServiceClassID_UUID16  = (&H1102)
Public Const DialupNetworkingServiceClassID_UUID16  = (&H1103)
Public Const IrMCSyncServiceClassID_UUID16  = (&H1104)
Public Const OBEXObjectPushServiceClassID_UUID16  = (&H1105)
Public Const OBEXFileTransferServiceClassID_UUID16  = (&H1106)
Public Const IrMcSyncCommandServiceClassID_UUID16  = (&H1107)
Public Const HeadsetServiceClassID_UUID16  = (&H1108)
Public Const CordlessTelephonyServiceClassID_UUID16  = (&H1109)
Public Const AudioSourceServiceClassID_UUID16  = (&H110A)
Public Const AudioSinkServiceClassID_UUID16  = (&H110B)
Public Const AVRemoteControlTargetServiceClassID_UUID16  = (&H110C)
Public Const AVRemoteControlServiceClassID_UUID16  = (&H110E)
Public Const AVRemoteControlControllerServiceClass_UUID16  = (&H110F)
Public Const IntercomServiceClassID_UUID16  = (&H1110)
Public Const FaxServiceClassID_UUID16  = (&H1111)
Public Const HeadsetAudioGatewayServiceClassID_UUID16  = (&H1112)
Public Const WAPServiceClassID_UUID16  = (&H1113)
Public Const WAPClientServiceClassID_UUID16  = (&H1114)
Public Const PANUServiceClassID_UUID16  = (&H1115)
Public Const NAPServiceClassID_UUID16  = (&H1116)
Public Const GNServiceClassID_UUID16  = (&H1117)
Public Const DirectPrintingServiceClassID_UUID16  = (&H1118)
Public Const ReferencePrintingServiceClassID_UUID16  = (&H1119)
Public Const ImagingResponderServiceClassID_UUID16  = (&H111B)
Public Const ImagingAutomaticArchiveServiceClassID_UUID16  = (&H111C)
Public Const ImagingReferenceObjectsServiceClassID_UUID16  = (&H111D)
Public Const HandsfreeServiceClassID_UUID16  = (&H111E)
Public Const HandsfreeAudioGatewayServiceClassID_UUID16  = (&H111F)
Public Const DirectPrintingReferenceObjectsServiceClassID_UUID16  = (&H1120)
Public Const ReflectsUIServiceClassID_UUID16  = (&H1121)
Public Const PrintingStatusServiceClassID_UUID16  = (&H1123)
Public Const HumanInterfaceDeviceServiceClassID_UUID16  = (&H1124)
Public Const HCRPrintServiceClassID_UUID16  = (&H1126)
Public Const HCRScanServiceClassID_UUID16  = (&H1127)
Public Const CommonISDNAccessServiceClassID_UUID16  = (&H1128)
Public Const VideoConferencingGWServiceClassID_UUID16  = (&H1129)
Public Const UDIMTServiceClassID_UUID16  = (&H112A)
Public Const UDITAServiceClassID_UUID16  = (&H112B)
Public Const AudioVideoServiceClassID_UUID16  = (&H112C)
Public Const SimAccessServiceClassID_UUID16  = (&H112D)
Public Const PhonebookAccessPceServiceClassID_UUID16  = (&H112E)
Public Const PhonebookAccessPseServiceClassID_UUID16  = (&H112F)
Public Const HeadsetHSServiceClassID_UUID16  = (&H1131)
Public Const MessageAccessServerServiceClassID_UUID16  = (&H1132)
Public Const MessageNotificationServerServiceClassID_UUID16  = (&H1133)
Public Const GNSSServerServiceClassID_UUID16  = (&H1136)
Public Const ThreeDimensionalDisplayServiceClassID_UUID16  = (&H1137)
Public Const ThreeDimensionalGlassesServiceClassID_UUID16  = (&H1138)
Public Const MPSServiceClassID_UUID16  = (&H113B)
Public Const CTNAccessServiceClassID_UUID16  = (&H113C)
Public Const CTNNotificationServiceClassID_UUID16  = (&H113D)
Public Const PnPInformationServiceClassID_UUID16  = (&H1200)
Public Const GenericNetworkingServiceClassID_UUID16  = (&H1201)
Public Const GenericFileTransferServiceClassID_UUID16  = (&H1202)
Public Const GenericAudioServiceClassID_UUID16  = (&H1203)
Public Const GenericTelephonyServiceClassID_UUID16  = (&H1204)
Public Const UPnpServiceClassID_UUID16  = (&H1205)
Public Const UPnpIpServiceClassID_UUID16  = (&H1206)
Public Const ESdpUpnpIpPanServiceClassID_UUID16  = (&H1300)
Public Const ESdpUpnpIpLapServiceClassID_UUID16  = (&H1301)
Public Const ESdpUpnpL2capServiceClassID_UUID16  = (&H1302)
Public Const VideoSourceServiceClassID_UUID16  = (&H1303)
Public Const VideoSinkServiceClassID_UUID16  = (&H1304)
Public Const HealthDeviceProfileSourceServiceClassID_UUID16  = (&H1401)
Public Const HealthDeviceProfileSinkServiceClassID_UUID16  = (&H1402)

Public Function ServiceDiscoveryServerServiceClassID_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, ServiceDiscoveryServerServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
ServiceDiscoveryServerServiceClassID_UUID = iid
End Function
Public Function BrowseGroupDescriptorServiceClassID_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, BrowseGroupDescriptorServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
BrowseGroupDescriptorServiceClassID_UUID = iid
End Function
Public Function PublicBrowseGroupServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, PublicBrowseGroupServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
PublicBrowseGroupServiceClass_UUID = iid
End Function
Public Function SerialPortServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, SerialPortServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
SerialPortServiceClass_UUID = iid
End Function
Public Function LANAccessUsingPPPServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, LANAccessUsingPPPServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
LANAccessUsingPPPServiceClass_UUID = iid
End Function
Public Function DialupNetworkingServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, DialupNetworkingServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
DialupNetworkingServiceClass_UUID = iid
End Function
Public Function IrMCSyncServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, IrMCSyncServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
IrMCSyncServiceClass_UUID = iid
End Function
Public Function OBEXObjectPushServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, OBEXObjectPushServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
OBEXObjectPushServiceClass_UUID = iid
End Function
Public Function OBEXFileTransferServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, OBEXFileTransferServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
OBEXFileTransferServiceClass_UUID = iid
End Function
Public Function IrMCSyncCommandServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, IrMcSyncCommandServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
IrMCSyncCommandServiceClass_UUID = iid
End Function
Public Function HeadsetServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, HeadsetServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
HeadsetServiceClass_UUID = iid
End Function
Public Function CordlessTelephonyServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, CordlessTelephonyServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
CordlessTelephonyServiceClass_UUID = iid
End Function
Public Function AudioSourceServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, AudioSourceServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
AudioSourceServiceClass_UUID = iid
End Function
Public Function AudioSinkServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, AudioSinkServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
AudioSinkServiceClass_UUID = iid
End Function
Public Function AVRemoteControlTargetServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, AVRemoteControlTargetServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
AVRemoteControlTargetServiceClass_UUID = iid
End Function
Public Function AVRemoteControlServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, AVRemoteControlServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
AVRemoteControlServiceClass_UUID = iid
End Function
Public Function AVRemoteControlControllerServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, AVRemoteControlControllerServiceClass_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
AVRemoteControlControllerServiceClass_UUID = iid
End Function
Public Function IntercomServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, IntercomServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
IntercomServiceClass_UUID = iid
End Function
Public Function FaxServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, FaxServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
FaxServiceClass_UUID = iid
End Function
Public Function HeadsetAudioGatewayServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, HeadsetAudioGatewayServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
HeadsetAudioGatewayServiceClass_UUID = iid
End Function
Public Function WAPServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, WAPServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
WAPServiceClass_UUID = iid
End Function
Public Function WAPClientServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, WAPClientServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
WAPClientServiceClass_UUID = iid
End Function
Public Function PANUServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, PANUServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
PANUServiceClass_UUID = iid
End Function
Public Function NAPServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, NAPServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
NAPServiceClass_UUID = iid
End Function
Public Function GNServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, GNServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
GNServiceClass_UUID = iid
End Function
Public Function DirectPrintingServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, DirectPrintingServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
DirectPrintingServiceClass_UUID = iid
End Function
Public Function ReferencePrintingServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, ReferencePrintingServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
ReferencePrintingServiceClass_UUID = iid
End Function
Public Function ImagingResponderServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, ImagingResponderServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
ImagingResponderServiceClass_UUID = iid
End Function
Public Function ImagingAutomaticArchiveServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, ImagingAutomaticArchiveServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
ImagingAutomaticArchiveServiceClass_UUID = iid
End Function
Public Function ImagingReferenceObjectsServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, ImagingReferenceObjectsServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
ImagingReferenceObjectsServiceClass_UUID = iid
End Function
Public Function HandsfreeServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, HandsfreeServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
HandsfreeServiceClass_UUID = iid
End Function
Public Function HandsfreeAudioGatewayServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, HandsfreeAudioGatewayServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
HandsfreeAudioGatewayServiceClass_UUID = iid
End Function
Public Function DirectPrintingReferenceObjectsServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, DirectPrintingReferenceObjectsServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
DirectPrintingReferenceObjectsServiceClass_UUID = iid
End Function
Public Function ReflectedUIServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, ReflectsUIServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
ReflectedUIServiceClass_UUID = iid
End Function
Public Function PrintingStatusServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, PrintingStatusServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
PrintingStatusServiceClass_UUID = iid
End Function
Public Function HumanInterfaceDeviceServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, HumanInterfaceDeviceServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
HumanInterfaceDeviceServiceClass_UUID = iid
End Function
Public Function HCRPrintServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, HCRPrintServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
HCRPrintServiceClass_UUID = iid
End Function
Public Function HCRScanServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, HCRScanServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
HCRScanServiceClass_UUID = iid
End Function
Public Function CommonISDNAccessServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, CommonISDNAccessServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
CommonISDNAccessServiceClass_UUID = iid
End Function
Public Function VideoConferencingGWServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, VideoConferencingGWServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
VideoConferencingGWServiceClass_UUID = iid
End Function
Public Function UDIMTServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, UDIMTServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
UDIMTServiceClass_UUID = iid
End Function
Public Function UDITAServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, UDITAServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
UDITAServiceClass_UUID = iid
End Function
Public Function AudioVideoServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, AudioVideoServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
AudioVideoServiceClass_UUID = iid
End Function
Public Function SimAccessServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, SimAccessServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
SimAccessServiceClass_UUID = iid
End Function
Public Function PhonebookAccessPceServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, PhonebookAccessPceServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
PhonebookAccessPceServiceClass_UUID = iid
End Function
Public Function PhonebookAccessPseServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, PhonebookAccessPseServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
PhonebookAccessPseServiceClass_UUID = iid
End Function
Public Function HeadsetHSServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, HeadsetHSServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
HeadsetHSServiceClass_UUID = iid
End Function
Public Function MessageAccessServerServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, MessageAccessServerServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
MessageAccessServerServiceClass_UUID = iid
End Function
Public Function MessageNotificationServerServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, MessageNotificationServerServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
MessageNotificationServerServiceClass_UUID = iid
End Function
Public Function GNSSServerServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, GNSSServerServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
GNSSServerServiceClass_UUID = iid
End Function
Public Function ThreeDimensionalDisplayServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, ThreeDimensionalDisplayServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
ThreeDimensionalDisplayServiceClass_UUID = iid
End Function
Public Function ThreeDimensionalGlassesServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, ThreeDimensionalGlassesServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
ThreeDimensionalGlassesServiceClass_UUID = iid
End Function
Public Function MPSServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, MPSServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
MPSServiceClass_UUID = iid
End Function
Public Function CTNAccessServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, CTNAccessServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
CTNAccessServiceClass_UUID = iid
End Function
Public Function CTNNotificationServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, CTNNotificationServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
CTNNotificationServiceClass_UUID = iid
End Function
Public Function PnPInformationServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, PnPInformationServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
PnPInformationServiceClass_UUID = iid
End Function
Public Function GenericNetworkingServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, GenericNetworkingServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
GenericNetworkingServiceClass_UUID = iid
End Function
Public Function GenericFileTransferServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, GenericFileTransferServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
GenericFileTransferServiceClass_UUID = iid
End Function
Public Function GenericAudioServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, GenericAudioServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
GenericAudioServiceClass_UUID = iid
End Function
Public Function GenericTelephonyServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, GenericTelephonyServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
GenericTelephonyServiceClass_UUID = iid
End Function
Public Function UPnpServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, UPnpServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
UPnpServiceClass_UUID = iid
End Function
Public Function UPnpIpServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, UPnpIpServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
UPnpIpServiceClass_UUID = iid
End Function
Public Function ESdpUpnpIpPanServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, ESdpUpnpIpPanServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
ESdpUpnpIpPanServiceClass_UUID = iid
End Function
Public Function ESdpUpnpIpLapServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, ESdpUpnpIpLapServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
ESdpUpnpIpLapServiceClass_UUID = iid
End Function
Public Function ESdpUpnpL2capServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, ESdpUpnpL2capServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
ESdpUpnpL2capServiceClass_UUID = iid
End Function
Public Function VideoSourceServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, VideoSourceServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
VideoSourceServiceClass_UUID = iid
End Function
Public Function VideoSinkServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, VideoSinkServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
VideoSinkServiceClass_UUID = iid
End Function
Public Function HealthDeviceProfileSourceServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, HealthDeviceProfileSourceServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
HealthDeviceProfileSourceServiceClass_UUID = iid
End Function
Public Function HealthDeviceProfileSinkServiceClass_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, HealthDeviceProfileSinkServiceClassID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
HealthDeviceProfileSinkServiceClass_UUID = iid
End Function



Public Const AdvancedAudioDistributionProfileID_UUID16  = (&H110D)
Public Const ImagingServiceProfileID_UUID16  = (&H111A)
Public Const BasicPrintingProfileID_UUID16  = (&H1122)
Public Const HardcopyCableReplacementProfileID_UUID16  = (&H1125)
Public Const PhonebookAccessProfileID_UUID16  = (&H1130)
Public Const MessageAccessProfileID_UUID16  = (&H1134)
Public Const GNSSProfileID_UUID16  = (&H1135)
Public Const ThreeDimensionalSynchronizationProfileID_UUID16  = (&H1139)
Public Const MPSProfileID_UUID16  = (&H113A)
Public Const CTNProfileID_UUID16  = (&H113E)
Public Const VideoDistributionProfileID_UUID16  = (&H1305)
Public Const HealthDeviceProfileID_UUID16  = (&H1400)

Public Function AdvancedAudioDistributionProfile_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, AdvancedAudioDistributionProfileID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
AdvancedAudioDistributionProfile_UUID = iid
End Function
Public Function ImagingServiceProfile_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, ImagingServiceProfileID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
ImagingServiceProfile_UUID = iid
End Function
Public Function BasicPrintingProfile_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, BasicPrintingProfileID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
BasicPrintingProfile_UUID = iid
End Function
Public Function HardcopyCableReplacementProfile_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, HardcopyCableReplacementProfileID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
HardcopyCableReplacementProfile_UUID = iid
End Function
Public Function PhonebookAccessProfile_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, PhonebookAccessProfileID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
PhonebookAccessProfile_UUID = iid
End Function
Public Function MessageAccessProfile_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, MessageAccessProfileID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
MessageAccessProfile_UUID = iid
End Function
Public Function GNSSProfile_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, GNSSProfileID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
GNSSProfile_UUID = iid
End Function
Public Function ThreeDimensionalSynchronizationProfile_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, ThreeDimensionalSynchronizationProfileID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
ThreeDimensionalSynchronizationProfile_UUID = iid
End Function
Public Function MPSProfile_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, MPSProfileID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
MPSProfile_UUID = iid
End Function
Public Function CTNProfile_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, CTNProfileID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
CTNProfile_UUID = iid
End Function
Public Function VideoDistributionProfile_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, VideoDistributionProfileID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
VideoDistributionProfile_UUID = iid
End Function
Public Function HealthDeviceProfile_UUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, HealthDeviceProfileID_UUID16, &H0000, &H1000, &H80, &H00, &H00, &H80, &H5F, &H9B, &H34, &HFB)
HealthDeviceProfile_UUID = iid
End Function

Public Function VideoConferencingServiceClass_UUID() As UUID
VideoConferencingServiceClass_UUID = AVRemoteControlControllerServiceClass_UUID
End Function
Public Const VideoConferencingServiceClassID_UUID16 = AVRemoteControlControllerServiceClass_UUID16
 
' //
' // Fixing typos introduced in previous releases
' //
Public Function HN_PROTOCOL_UUID() As UUID
HN_PROTOCOL_UUID = HCN_PROTOCOL_UUID
End Function
Public Function BasicPringingServiceClass_UUID() As UUID
BasicPringingServiceClass_UUID = BasicPrintingProfile_UUID
End Function
' //
' // Fixing naming inconsistencies in UUID16 list
' //
Public Const CommonISDNAccessServiceClass_UUID16 = CommonISDNAccessServiceClassID_UUID16
Public Const VideoConferencingGWServiceClass_UUID16 = VideoConferencingGWServiceClassID_UUID16
Public Const UDIMTServiceClass_UUID16 = UDIMTServiceClassID_UUID16
Public Const UDITAServiceClass_UUID16 = UDITAServiceClassID_UUID16
Public Const AudioVideoServiceClass_UUID16 = AudioVideoServiceClassID_UUID16
 

' //
' // Fixing naming inconsistencies in profile list
' //
Public Const CordlessServiceClassID_UUID16 = CordlessTelephonyServiceClassID_UUID16
Public Const AudioSinkSourceServiceClassID_UUID16 = AudioSinkServiceClassID_UUID16
Public Const AdvancedAudioDistributionServiceClassID_UUID16 = AdvancedAudioDistributionProfileID_UUID16
Public Const ImagingServiceClassID_UUID16 = ImagingServiceProfileID_UUID16
Public Const BasicPrintingServiceClassID_UUID16 = BasicPrintingProfileID_UUID16
Public Const HardcopyCableReplacementServiceClassID_UUID16 = HardcopyCableReplacementProfileID_UUID16

 
Public Function AdvancedAudioDistributionServiceClass_UUID() As UUID
    AdvancedAudioDistributionServiceClass_UUID = AdvancedAudioDistributionProfile_UUID
End Function
Public Function ImagingServiceClass_UUID() As UUID
     ImagingServiceClass_UUID = ImagingServiceProfile_UUID
End Function
Public Function BasicPrintingServiceClass_UUID() As UUID
    BasicPrintingServiceClass_UUID = BasicPrintingProfile_UUID
End Function
Public Function HardcopyCableReplacementServiceClass_UUID() As UUID
	HardcopyCableReplacementServiceClass_UUID = HardcopyCableReplacementProfile_UUID
End Function
Public Function VideoDistributionServiceClass_UUID() As UUID
    VideoDistributionServiceClass_UUID = VideoDistributionProfile_UUID
End Function

Public Const BTH_MAX_NAME_SIZE  = (248)
Public Const BTH_MAX_PIN_SIZE  = (16)
Public Const BTH_LINK_KEY_LENGTH  = (16)

Public Enum BTH_MFG_Codes
    BTH_MFG_ERICSSON = (0)
    BTH_MFG_NOKIA = (1)
    BTH_MFG_INTEL = (2)
    BTH_MFG_IBM = (3)
    BTH_MFG_TOSHIBA = (4)
    BTH_MFG_3COM = (5)
    BTH_MFG_MICROSOFT = (6)
    BTH_MFG_LUCENT = (7)
    BTH_MFG_MOTOROLA = (8)
    BTH_MFG_INFINEON = (9)
    BTH_MFG_CSR = (10)
    BTH_MFG_SILICONWAVE = (11)
    BTH_MFG_DIGIANSWER = (12)
    BTH_MFG_TI = (13)
    BTH_MFG_PARTHUS = (14)
    BTH_MFG_BROADCOM = (15)
    BTH_MFG_MITEL = (16)
    BTH_MFG_WIDCOMM = (17)
    BTH_MFG_ZEEVO = (18)
    BTH_MFG_ATMEL = (19)
    BTH_MFG_MITSIBUSHI = (20)
    BTH_MFG_RTX_TELECOM = (21)
    BTH_MFG_KC_TECHNOLOGY = (22)
    BTH_MFG_NEWLOGIC = (23)
    BTH_MFG_TRANSILICA = (24)
    BTH_MFG_ROHDE_SCHWARZ = (25)
    BTH_MFG_TTPCOM = (26)
    BTH_MFG_SIGNIA = (27)
    BTH_MFG_CONEXANT = (28)
    BTH_MFG_QUALCOMM = (29)
    BTH_MFG_INVENTEL = (30)
    BTH_MFG_AVM_BERLIN = (31)
    BTH_MFG_BANDSPEED = (32)
    BTH_MFG_MANSELLA = (33)
    BTH_MFG_NEC = (34)
    BTH_MFG_WAVEPLUS_TECHNOLOGY_CO = (35)
    BTH_MFG_ALCATEL = (36)
    BTH_MFG_PHILIPS_SEMICONDUCTOR = (37)
    BTH_MFG_C_TECHNOLOGIES = (38)
    BTH_MFG_OPEN_INTERFACE = (39)
    BTH_MFG_RF_MICRO_DEVICES = (40)
    BTH_MFG_HITACHI = (41)
    BTH_MFG_SYMBOL_TECHNOLOGIES = (42)
    BTH_MFG_TENOVIS = (43)
    BTH_MFG_MACRONIX_INTERNATIONAL = (44)
    BTH_MFG_MARVELL = (72)
    BTH_MFG_APPLE = (76)
    BTH_MFG_NORDIC_SEMICONDUCTORS_ASA = (89)
    BTH_MFG_ARUBA_NETWORKS = (283)
    BTH_MFG_INTERNAL_USE = (65535)
End Enum

Public Enum BTH_COD
    [_]
End Enum
Public Enum BTH_LAP
    [_]
End Enum

Public Const BTH_ADDR_NULL As LongLong = 0

Public Const NAP_MASK  As LongLong = &HFFFF00000000
Public Const SAP_MASK As LongLong = &H0000FFFFFFFF^

Public Const NAP_BIT_OFFSET  = (8 * 4)
Public Const SAP_BIT_OFFSET  = (0)

' #define GET_NAP(_bth_addr)  ((USHORT) (((_bth_addr) & NAP_MASK) >> NAP_BIT_OFFSET))
' #define GET_SAP(_bth_addr)  ((ULONG)  (((_bth_addr) & SAP_MASK) >> SAP_BIT_OFFSET))

' #define SET_NAP(_nap) (((ULONGLONG) ((USHORT) (_nap))) << NAP_BIT_OFFSET)
' #define SET_SAP(_sap) (((ULONGLONG) ((ULONG)  (_sap))) << SAP_BIT_OFFSET)

' #define SET_NAP_SAP(_nap, _sap) (SET_NAP(_nap) | SET_SAP(_sap))

Public Const COD_FORMAT_BIT_OFFSET  = (0)
Public Const COD_MINOR_BIT_OFFSET  = (2)
Public Const COD_MAJOR_BIT_OFFSET  = (8 * 1)
Public Const COD_SERVICE_BIT_OFFSET  = (8 * 1 + 5)
Public Const COD_FORMAT_MASK  = (&H000003)
Public Const COD_MINOR_MASK  = (&H0000FC)
Public Const COD_MAJOR_MASK  = (&H001F00)
Public Const COD_SERVICE_MASK  = (&HFFE000)

' #define GET_COD_FORMAT(_cod)    ( (_cod) & COD_FORMAT_MASK   >> COD_FORMAT_BIT_OFFSET)
' #define GET_COD_MINOR(_cod)     (((_cod) & COD_MINOR_MASK)   >> COD_MINOR_BIT_OFFSET)
' #define GET_COD_MAJOR(_cod)     (((_cod) & COD_MAJOR_MASK)   >> COD_MAJOR_BIT_OFFSET)
' #define GET_COD_SERVICE(_cod)   (((_cod) & COD_SERVICE_MASK) >> COD_SERVICE_BIT_OFFSET)

' #define SET_COD_MINOR(_cod, _minor) (_cod) = ((_cod) & ~COD_MINOR_MASK) | ((_minor) << COD_MINOR_BIT_OFFSET)
' #define SET_COD_MAJOR(_cod, _major) (_cod) = ((_cod) & ~COD_MAJOR_MASK) | ((_major) << COD_MAJOR_BIT_OFFSET)
' #define SET_COD_SERVICE(_cod, _service) (_cod) = ((_cod) & ~COD_SERVICE_MASK) | ((_service) << COD_SERVICE_BIT_OFFSET)

Public Enum BthCodServiceFlags
    COD_VERSION = (&H0)
    COD_SERVICE_LIMITED = (&H0001)
    COD_SERVICE_LE_AUDIO = (&H0002)
    COD_SERVICE_POSITIONING = (&H0008)
    COD_SERVICE_NETWORKING = (&H0010)
    COD_SERVICE_RENDERING = (&H0020)
    COD_SERVICE_CAPTURING = (&H0040)
    COD_SERVICE_OBJECT_XFER = (&H0080)
    COD_SERVICE_AUDIO = (&H0100)
    COD_SERVICE_TELEPHONY = (&H0200)
    COD_SERVICE_INFORMATION = (&H0400)
    COD_SERVICE_VALID_MASK = (COD_SERVICE_LIMITED Or COD_SERVICE_LE_AUDIO Or COD_SERVICE_POSITIONING Or COD_SERVICE_NETWORKING Or COD_SERVICE_RENDERING Or COD_SERVICE_CAPTURING Or COD_SERVICE_OBJECT_XFER Or COD_SERVICE_AUDIO Or COD_SERVICE_TELEPHONY Or COD_SERVICE_INFORMATION)
    COD_SERVICE_MAX_COUNT = (10)
End Enum

Public Enum BthMajorClassCodes
    COD_MAJOR_MISCELLANEOUS = (&H00)
    COD_MAJOR_COMPUTER = (&H01)
    COD_MAJOR_PHONE = (&H02)
    COD_MAJOR_LAN_ACCESS = (&H03)
    COD_MAJOR_AUDIO = (&H04)
    COD_MAJOR_PERIPHERAL = (&H05)
    COD_MAJOR_IMAGING = (&H06)
    COD_MAJOR_WEARABLE = (&H07)
    COD_MAJOR_TOY = (&H08)
    COD_MAJOR_HEALTH = (&H09)
    COD_MAJOR_UNCLASSIFIED = (&H1F)
End Enum
Public Enum BthMinorClassCodes
    COD_COMPUTER_MINOR_UNCLASSIFIED = (&H00)
    COD_COMPUTER_MINOR_DESKTOP = (&H01)
    COD_COMPUTER_MINOR_SERVER = (&H02)
    COD_COMPUTER_MINOR_LAPTOP = (&H03)
    COD_COMPUTER_MINOR_HANDHELD = (&H04)
    COD_COMPUTER_MINOR_PALM = (&H05)
    COD_COMPUTER_MINOR_WEARABLE = (&H06)
    COD_PHONE_MINOR_UNCLASSIFIED = (&H00)
    COD_PHONE_MINOR_CELLULAR = (&H01)
    COD_PHONE_MINOR_CORDLESS = (&H02)
    COD_PHONE_MINOR_SMART = (&H03)
    COD_PHONE_MINOR_WIRED_MODEM = (&H04)
    COD_AUDIO_MINOR_UNCLASSIFIED = (&H00)
    COD_AUDIO_MINOR_HEADSET = (&H01)
    COD_AUDIO_MINOR_HANDS_FREE = (&H02)
    COD_AUDIO_MINOR_HEADSET_HANDS_FREE = (&H03)
    COD_AUDIO_MINOR_MICROPHONE = (&H04)
    COD_AUDIO_MINOR_LOUDSPEAKER = (&H05)
    COD_AUDIO_MINOR_HEADPHONES = (&H06)
    COD_AUDIO_MINOR_PORTABLE_AUDIO = (&H07)
    COD_AUDIO_MINOR_CAR_AUDIO = (&H08)
    COD_AUDIO_MINOR_SET_TOP_BOX = (&H09)
    COD_AUDIO_MINOR_HIFI_AUDIO = (&H0A)
    COD_AUDIO_MINOR_VCR = (&H0B)
    COD_AUDIO_MINOR_VIDEO_CAMERA = (&H0C)
    COD_AUDIO_MINOR_CAMCORDER = (&H0D)
    COD_AUDIO_MINOR_VIDEO_MONITOR = (&H0E)
    COD_AUDIO_MINOR_VIDEO_DISPLAY_LOUDSPEAKER = (&H0F)
    COD_AUDIO_MINOR_VIDEO_DISPLAY_CONFERENCING = (&H10)
    COD_AUDIO_MINOR_RESERVED = (&H11)
    COD_AUDIO_MINOR_GAMING_TOY = (&H12)
    COD_PERIPHERAL_MINOR_KEYBOARD_MASK = (&H10)
    COD_PERIPHERAL_MINOR_POINTER_MASK = (&H20)
    COD_PERIPHERAL_MINOR_NO_CATEGORY = (&H00)
    COD_PERIPHERAL_MINOR_JOYSTICK = (&H01)
    COD_PERIPHERAL_MINOR_GAMEPAD = (&H02)
    COD_PERIPHERAL_MINOR_REMOTE_CONTROL = (&H03)
    COD_PERIPHERAL_MINOR_SENSING = (&H04)
    COD_IMAGING_MINOR_DISPLAY_MASK = (&H04)
    COD_IMAGING_MINOR_CAMERA_MASK = (&H08)
    COD_IMAGING_MINOR_SCANNER_MASK = (&H10)
    COD_IMAGING_MINOR_PRINTER_MASK = (&H20)
    COD_WEARABLE_MINOR_WRIST_WATCH = (&H01)
    COD_WEARABLE_MINOR_PAGER = (&H02)
    COD_WEARABLE_MINOR_JACKET = (&H03)
    COD_WEARABLE_MINOR_HELMET = (&H04)
    COD_WEARABLE_MINOR_GLASSES = (&H05)
    COD_TOY_MINOR_ROBOT = (&H01)
    COD_TOY_MINOR_VEHICLE = (&H02)
    COD_TOY_MINOR_DOLL_ACTION_FIGURE = (&H03)
    COD_TOY_MINOR_CONTROLLER = (&H04)
    COD_TOY_MINOR_GAME = (&H05)
    COD_HEALTH_MINOR_BLOOD_PRESSURE_MONITOR = (&H01)
    COD_HEALTH_MINOR_THERMOMETER = (&H02)
    COD_HEALTH_MINOR_WEIGHING_SCALE = (&H03)
    COD_HEALTH_MINOR_GLUCOSE_METER = (&H04)
    COD_HEALTH_MINOR_PULSE_OXIMETER = (&H05)
    COD_HEALTH_MINOR_HEART_PULSE_MONITOR = (&H06)
    COD_HEALTH_MINOR_HEALTH_DATA_DISPLAY = (&H07)
    COD_HEALTH_MINOR_STEP_COUNTER = (&H08)
End Enum

Public Const COD_LAN_ACCESS_BIT_OFFSET  = (5)
Public Const COD_LAN_MINOR_MASK  = (&H00001C)
Public Const COD_LAN_ACCESS_MASK  = (&H0000E0)

' #define GET_COD_LAN_MINOR(_cod)         (((_cod) & COD_LAN_MINOR_MASK) >> COD_MINOR_BIT_OFFSET)
' #define GET_COD_LAN_ACCESS(_cod)         (((_cod) & COD_LAN_ACCESS_MASK) >> COD_LAN_ACCESS_BIT_OFFSET)

Public Enum BthLanAccessPctCodes
    COD_LAN_MINOR_UNCLASSIFIED = (&H00)
    COD_LAN_ACCESS_0_USED = (&H00)
    COD_LAN_ACCESS_17_USED = (&H01)
    COD_LAN_ACCESS_33_USED = (&H02)
    COD_LAN_ACCESS_50_USED = (&H03)
    COD_LAN_ACCESS_67_USED = (&H04)
    COD_LAN_ACCESS_83_USED = (&H05)
    COD_LAN_ACCESS_99_USED = (&H06)
    COD_LAN_ACCESS_FULL = (&H07)
End Enum

Public Enum BthEirCodes
    BTH_EIR_FLAGS_ID = (&H01)
    BTH_EIR_16_UUIDS_PARTIAL_ID = (&H02)
    BTH_EIR_16_UUIDS_COMPLETE_ID = (&H03)
    BTH_EIR_32_UUIDS_PARTIAL_ID = (&H04)
    BTH_EIR_32_UUIDS_COMPLETE_ID = (&H05)
    BTH_EIR_128_UUIDS_PARTIAL_ID = (&H06)
    BTH_EIR_128_UUIDS_COMPLETE_ID = (&H07)
    BTH_EIR_LOCAL_NAME_PARTIAL_ID = (&H08)
    BTH_EIR_LOCAL_NAME_COMPLETE_ID = (&H09)
    BTH_EIR_TX_POWER_LEVEL_ID = (&H0A)
    BTH_EIR_OOB_OPT_DATA_LEN_ID = (&H0B)  ' OOB only.
    BTH_EIR_OOB_BD_ADDR_ID = (&H0C)  ' OOB only.
    BTH_EIR_OOB_COD_ID = (&H0D)  ' OOB only.
    BTH_EIR_OOB_SP_HASH_ID = (&H0E)  ' OOB only.
    BTH_EIR_OOB_SP_RANDOMIZER_ID = (&H0F)  ' OOB only.
    BTH_EIR_MANUFACTURER_ID = (&HFF)
End Enum

Public Const BTH_EIR_SIZE = (240)

' #define LAP_GIAC_INIT                   { 0x33, 0x8B, 0x9E }
' #define LAP_LIAC_INIT                   { 0x00, 0x8B, 0x9E }

Public Const LAP_GIAC_VALUE  = (&H009E8B33)
'  Limited Inquiry Access Code.
Public Const LAP_LIAC_VALUE  = (&H009E8B00)
Public Const BTH_ADDR_IAC_FIRST  = (&H9E8B00)
Public Const BTH_ADDR_IAC_LAST  = (&H9E8B3f)
Public Const BTH_ADDR_LIAC  = (&H9E8B00)
Public Const BTH_ADDR_GIAC  = (&H9E8B33)

'Alias BTHSTATUS As Byte
' #define BTH_ERROR(_btStatus)   ((_btStatus) != BTH_ERROR_SUCCESS)
' #define BTH_SUCCESS(_btStatus) ((_btStatus) == BTH_ERROR_SUCCESS)

Public Enum BthErrorCodes
    BTH_ERROR_SUCCESS = (&H00)
    BTH_ERROR_UNKNOWN_HCI_COMMAND = (&H01)
    BTH_ERROR_NO_CONNECTION = (&H02)
    BTH_ERROR_HARDWARE_FAILURE = (&H03)
    BTH_ERROR_PAGE_TIMEOUT = (&H04)
    BTH_ERROR_AUTHENTICATION_FAILURE = (&H05)
    BTH_ERROR_KEY_MISSING = (&H06)
    BTH_ERROR_MEMORY_FULL = (&H07)
    BTH_ERROR_CONNECTION_TIMEOUT = (&H08)
    BTH_ERROR_MAX_NUMBER_OF_CONNECTIONS = (&H09)
    BTH_ERROR_MAX_NUMBER_OF_SCO_CONNECTIONS = (&H0a)
    BTH_ERROR_ACL_CONNECTION_ALREADY_EXISTS = (&H0b)
    BTH_ERROR_COMMAND_DISALLOWED = (&H0c)
    BTH_ERROR_HOST_REJECTED_LIMITED_RESOURCES = (&H0d)
    BTH_ERROR_HOST_REJECTED_SECURITY_REASONS = (&H0e)
    BTH_ERROR_HOST_REJECTED_PERSONAL_DEVICE = (&H0f)
    BTH_ERROR_HOST_TIMEOUT = (&H10)
    BTH_ERROR_UNSUPPORTED_FEATURE_OR_PARAMETER = (&H11)
    BTH_ERROR_INVALID_HCI_PARAMETER = (&H12)
    BTH_ERROR_REMOTE_USER_ENDED_CONNECTION = (&H13)
    BTH_ERROR_REMOTE_LOW_RESOURCES = (&H14)
    BTH_ERROR_REMOTE_POWERING_OFF = (&H15)
    BTH_ERROR_LOCAL_HOST_TERMINATED_CONNECTION = (&H16)
    BTH_ERROR_REPEATED_ATTEMPTS = (&H17)
    BTH_ERROR_PAIRING_NOT_ALLOWED = (&H18)
    BTH_ERROR_UKNOWN_LMP_PDU = (&H19)
    BTH_ERROR_UNSUPPORTED_REMOTE_FEATURE = (&H1a)
    BTH_ERROR_SCO_OFFSET_REJECTED = (&H1b)
    BTH_ERROR_SCO_INTERVAL_REJECTED = (&H1c)
    BTH_ERROR_SCO_AIRMODE_REJECTED = (&H1d)
    BTH_ERROR_INVALID_LMP_PARAMETERS = (&H1e)
    BTH_ERROR_UNSPECIFIED_ERROR = (&H1f)
    BTH_ERROR_UNSUPPORTED_LMP_PARM_VALUE = (&H20)
    BTH_ERROR_ROLE_CHANGE_NOT_ALLOWED = (&H21)
    BTH_ERROR_LMP_RESPONSE_TIMEOUT = (&H22)
    BTH_ERROR_LMP_TRANSACTION_COLLISION = (&H23)
    BTH_ERROR_LMP_PDU_NOT_ALLOWED = (&H24)
    BTH_ERROR_ENCRYPTION_MODE_NOT_ACCEPTABLE = (&H25)
    BTH_ERROR_UNIT_KEY_NOT_USED = (&H26)
    BTH_ERROR_QOS_IS_NOT_SUPPORTED = (&H27)
    BTH_ERROR_INSTANT_PASSED = (&H28)
    BTH_ERROR_PAIRING_WITH_UNIT_KEY_NOT_SUPPORTED = (&H29)
    BTH_ERROR_DIFFERENT_TRANSACTION_COLLISION = (&H2a)
    BTH_ERROR_QOS_UNACCEPTABLE_PARAMETER = (&H2c)
    BTH_ERROR_QOS_REJECTED = (&H2d)
    BTH_ERROR_CHANNEL_CLASSIFICATION_NOT_SUPPORTED = (&H2e)
    BTH_ERROR_INSUFFICIENT_SECURITY = (&H2f)
    BTH_ERROR_PARAMETER_OUT_OF_MANDATORY_RANGE = (&H30)
    BTH_ERROR_ROLE_SWITCH_PENDING = (&H32)
    BTH_ERROR_RESERVED_SLOT_VIOLATION = (&H34)
    BTH_ERROR_ROLE_SWITCH_FAILED = (&H35)
    BTH_ERROR_EXTENDED_INQUIRY_RESPONSE_TOO_LARGE = (&H36)
    BTH_ERROR_SECURE_SIMPLE_PAIRING_NOT_SUPPORTED_BY_HOST = (&H37)
    BTH_ERROR_HOST_BUSY_PAIRING = (&H38)
    BTH_ERROR_CONNECTION_REJECTED_DUE_TO_NO_SUITABLE_CHANNEL_FOUND = (&H39)
    BTH_ERROR_CONTROLLER_BUSY = (&H3a)
    BTH_ERROR_UNACCEPTABLE_CONNECTION_INTERVAL = (&H3b)
    BTH_ERROR_DIRECTED_ADVERTISING_TIMEOUT = (&H3c)
    BTH_ERROR_CONNECTION_TERMINATED_DUE_TO_MIC_FAILURE = (&H3d)
    BTH_ERROR_CONNECTION_FAILED_TO_BE_ESTABLISHED = (&H3e)
    BTH_ERROR_MAC_CONNECTION_FAILED = (&H3f)
    BTH_ERROR_COARSE_CLOCK_ADJUSTMENT_REJECTED = (&H40)
    BTH_ERROR_TYPE_0_SUBMAP_NOT_DEFINED = (&H41)
    BTH_ERROR_UNKNOWN_ADVERTISING_IDENTIFIER = (&H42)
    BTH_ERROR_LIMIT_REACHED = (&H43)
    BTH_ERROR_OPERATION_CANCELLED_BY_HOST = (&H44)
    BTH_ERROR_PACKET_TOO_LONG = (&H45)
    BTH_ERROR_UNSPECIFIED = (&HFF)
End Enum

Public Const L2CAP_MIN_MTU  = (48)
Public Const L2CAP_MAX_MTU  = (&HFFFF)
Public Const L2CAP_DEFAULT_MTU  = (672)
'  Max l2cap signal size (48) - size of signal header (4)
Public Const MAX_L2CAP_PING_DATA_LENGTH  = (44)
Public Const MAX_L2CAP_INFO_DATA_LENGTH  = (44)
'  the following structures provide information about
'  disocvered remote radios.
Public Enum BthBdiFlags
    BDIF_ADDRESS = (&H00000001)
    BDIF_COD = (&H00000002)
    BDIF_NAME = (&H00000004)
    BDIF_PAIRED = (&H00000008)
    BDIF_PERSONAL = (&H00000010)
    BDIF_CONNECTED = (&H00000020)
'  Support added in KB942567
' #if (NTDDI_VERSION > NTDDI_VISTASP1 || \
'     (NTDDI_VERSION == NTDDI_VISTASP1 && defined(VISTA_KB942567)))
    BDIF_SHORT_NAME = (&H00000040)
    BDIF_VISIBLE = (&H00000080)
    BDIF_SSP_SUPPORTED = (&H00000100)
    BDIF_SSP_PAIRED = (&H00000200)
    BDIF_SSP_MITM_PROTECTED = (&H00000400)
    BDIF_RSSI = (&H00001000)
    BDIF_EIR = (&H00002000)
' #if (NTDDI_VERSION >= NTDDI_WIN8) // >= WIN8
    BDIF_BR = (&H00004000)
    BDIF_LE = (&H00008000&)
    BDIF_LE_PAIRED = (&H00010000)
    BDIF_LE_PERSONAL = (&H00020000)
    BDIF_LE_MITM_PROTECTED = (&H00040000)
    BDIF_LE_PRIVACY_ENABLED = (&H00080000)
    BDIF_LE_RANDOM_ADDRESS_TYPE = (&H00100000)
' #if (NTDDI_VERSION >= NTDDI_WIN10) // >= WIN10
    BDIF_LE_DISCOVERABLE = (&H00200000)
    BDIF_LE_NAME = (&H00400000)
    BDIF_LE_VISIBLE = (&H00800000)
' #if (NTDDI_VERSION >= NTDDI_WIN10_RS2) // >= WIN10_RS2
    BDIF_LE_CONNECTED = (&H01000000)
    BDIF_LE_CONNECTABLE = (&H02000000)
    BDIF_BR_SECURE_CONNECTION_PAIRED = (&H08000000)
    BDIF_LE_SECURE_CONNECTION_PAIRED = (&H10000000)
    BDIF_DEBUGKEY = (&H20000000)
    BDIF_LE_DEBUGKEY = (&H40000000)
' #if (NTDDI_VERSION >= NTDDI_WIN10_19H1) // >= NTDDI_WIN10_19H1
    BDIF_TX_POWER = (&H80000000)
End Enum

Public Type BTH_DEVICE_INFO
    ' Combination BDIF_Xxx flags
    flags As BthBdiFlags
    ' Address of remote device.
    address As LongLong 'BTH_ADDR
    ' Class Of Device.
    classOfDevice As BTH_COD
    ' name of the device
    name(0 To (BTH_MAX_NAME_SIZE - 1)) As Byte
End Type

Public Type BTH_RADIO_IN_RANGE
    ' Information about the remote radio
    deviceInfo As BTH_DEVICE_INFO
    ' The previous flags value for the BTH_DEVICE_INFO.  The receiver of this
    ' notification can compare the deviceInfo.flags and previousDeviceFlags
    ' to determine what has changed about this remote radio.
    ' For instance, if BDIF_NAME is set in deviceInfo.flags and not in
    ' previousDeviceFlags, the remote radio's has just been retrieved.
    previousDeviceFlags As Long
End Type

Public Type BTH_L2CAP_EVENT_INFO
    ' Remote radio address which the L2CAP event is associated with
    bthAddress As LongLong 'BTH_ADDR
    ' The PSM that is either being connected to or disconnected from
    psm As Integer
    ' If != 0, then the channel has just been established.  If == 0, then the
    ' channel has been destroyed.  Notifications for a destroyed channel will
    ' only be sent for channels successfully established.
    connected As Byte
    ' If != 0, then the local host iniated the l2cap connection.  If == 0, then
    ' the remote host initated the connection.  This field is only valid if
    ' connect is != 0.
    initiated As Byte
End Type

Public Enum BthHciConnectionTypes
    HCI_CONNECTION_TYPE_ACL = (1)
    HCI_CONNECTION_TYPE_SCO = (2)
    HCI_CONNECTION_TYPE_LE = (3)
'  Fix typos
    HCI_CONNNECTION_TYPE_ACL = HCI_CONNECTION_TYPE_ACL
    HCI_CONNNECTION_TYPE_SCO = HCI_CONNECTION_TYPE_SCO
End Enum
Public Type BTH_HCI_EVENT_INFO
    ' Remote radio address which the HCI event is associated with
    bthAddress As LongLong 'BTH_ADDR
    ' HCI_CONNNECTION_TYPE_XXX value
    /* [TypeHint(BthHciConnectionTypes)] */ connectionType As Byte
    ' If != 0, then the underlying connection to the remote radio has just
    ' been estrablished.  If == 0, then the underlying conneciton has just been
    ' destroyed.
    connected As Byte
End Type

Public Enum IO_CAPABILITY
    IoCaps_DisplayOnly = &H00
    IoCaps_DisplayYesNo = &H01
    IoCaps_KeyboardOnly = &H02
    IoCaps_NoInputNoOutput = &H03
    IoCaps_Undefined = &Hff
End Enum
Public Enum AUTHENTICATION_REQUIREMENTS
    MITMProtectionNotRequired = &H00
    MITMProtectionRequired = &H01
    MITMProtectionNotRequiredBonding = &H02
    MITMProtectionRequiredBonding = &H03
    MITMProtectionNotRequiredGeneralBonding = &H04
    MITMProtectionRequiredGeneralBonding = &H05
    MITMProtectionNotDefined = &Hff
End Enum

Public Function IsMITMProtectionRequired(ByVal requirements As AUTHENTICATION_REQUIREMENTS) As Boolean
    Return ((MITMProtectionRequired = requirements) Or (MITMProtectionRequiredBonding = requirements) Or (MITMProtectionRequiredGeneralBonding = requirements))
End Function

Public Const BTH_MAX_SERVICE_NAME_SIZE  = (256)
Public Const MAX_UUIDS_IN_QUERY  = (12)
Public Const BTH_VID_DEFAULT_VALUE  = (&HFFFF)
Public Const SDP_ERROR_INVALID_SDP_VERSION  = (&H0001)
Public Const SDP_ERROR_INVALID_RECORD_HANDLE  = (&H0002)
Public Const SDP_ERROR_INVALID_REQUEST_SYNTAX  = (&H0003)
Public Const SDP_ERROR_INVALID_PDU_SIZE  = (&H0004)
Public Const SDP_ERROR_INVALID_CONTINUATION_STATE  = (&H0005)
Public Const SDP_ERROR_INSUFFICIENT_RESOURCES  = (&H0006)

Public Const SDP_ERROR_SUCCESS As Integer = &H0000
'  The SDP PDU or parameters other than the SDP stream response was not correct
Public Const SDP_ERROR_SERVER_INVALID_RESPONSE As Integer = &H0100
'  The SDP response stream did not parse correctly.
Public Const SDP_ERROR_SERVER_RESPONSE_DID_NOT_PARSE As Integer = &H0200
'  The SDP response stream was successfully parsed, but did not match the
'  required format for the query.
Public Const SDP_ERROR_SERVER_BAD_FORMAT As Integer = &H0300
'  SDP was unable to send a continued query back to the server
Public Const SDP_ERROR_COULD_NOT_SEND_CONTINUE As Integer = &H0400
'  Server sent a response that was too large to fit in the caller's buffer.
Public Const SDP_ERROR_RESPONSE_TOO_LARGE As Integer = &H0500

Public Enum BthSdpAttribs
    SDP_ATTRIB_RECORD_HANDLE = (&H0000)
    SDP_ATTRIB_CLASS_ID_LIST = (&H0001)
    SDP_ATTRIB_RECORD_STATE = (&H0002)
    SDP_ATTRIB_SERVICE_ID = (&H0003)
    SDP_ATTRIB_PROTOCOL_DESCRIPTOR_LIST = (&H0004)
    SDP_ATTRIB_BROWSE_GROUP_LIST = (&H0005)
    SDP_ATTRIB_LANG_BASE_ATTRIB_ID_LIST = (&H0006)
    SDP_ATTRIB_INFO_TIME_TO_LIVE = (&H0007)
    SDP_ATTRIB_AVAILABILITY = (&H0008)
    SDP_ATTRIB_PROFILE_DESCRIPTOR_LIST = (&H0009)
    SDP_ATTRIB_DOCUMENTATION_URL = (&H000A)
    SDP_ATTRIB_CLIENT_EXECUTABLE_URL = (&H000B)
    SDP_ATTRIB_ICON_URL = (&H000C)
    SDP_ATTRIB_ADDITIONAL_PROTOCOL_DESCRIPTOR_LIST = (&H000D)
    SDP_ATTRIB_PROFILE_SPECIFIC = (&H0200)
    LANG_BASE_LANGUAGE_INDEX = (&H0000)
    LANG_BASE_ENCODING_INDEX = (&H0001)
    LANG_BASE_OFFSET_INDEX = (&H0002)
    LANG_DEFAULT_ID = (&H0100)
    LANGUAGE_EN_US = (&H656E)
    ENCODING_UTF_8 = (&H006A)
    STRING_NAME_OFFSET = (&H0000)
    STRING_DESCRIPTION_OFFSET = (&H0001)
    STRING_PROVIDER_NAME_OFFSET = (&H0002)
    SDP_ATTRIB_SDP_VERSION_NUMBER_LIST = (&H0200)
    SDP_ATTRIB_SDP_DATABASE_STATE = (&H0201)
    SDP_ATTRIB_BROWSE_GROUP_ID = (&H0200)
    SDP_ATTRIB_CORDLESS_EXTERNAL_NETWORK = (&H0301)
    SDP_ATTRIB_FAX_CLASS_1_SUPPORT = (&H0302)
    SDP_ATTRIB_FAX_CLASS_2_0_SUPPORT = (&H0303)
    SDP_ATTRIB_FAX_CLASS_2_SUPPORT = (&H0304)
    SDP_ATTRIB_FAX_AUDIO_FEEDBACK_SUPPORT = (&H0305)
    SDP_ATTRIB_HEADSET_REMOTE_AUDIO_VOLUME_CONTROL = (&H0302)
    SDP_ATTRIB_LAN_LPSUBNET = (&H0200)
    SDP_ATTRIB_OBJECT_PUSH_SUPPORTED_FORMATS_LIST = (&H0303)
    SDP_ATTRIB_SYNCH_SUPPORTED_DATA_STORES_LIST = (&H0301)
'   this is in the assigned numbers doc, but it does not show up in any profile
    SDP_ATTRIB_SERVICE_VERSION = (&H0300)
    SDP_ATTRIB_PAN_NETWORK_ADDRESS = (&H0306)
    SDP_ATTRIB_PAN_WAP_GATEWAY = (&H0307)
    SDP_ATTRIB_PAN_HOME_PAGE_URL = (&H0308)
    SDP_ATTRIB_PAN_WAP_STACK_TYPE = (&H0309)
    SDP_ATTRIB_PAN_SECURITY_DESCRIPTION = (&H030A)
    SDP_ATTRIB_PAN_NET_ACCESS_TYPE = (&H030B)
    SDP_ATTRIB_PAN_MAX_NET_ACCESS_RATE = (&H030C)
    SDP_ATTRIB_IMAGING_SUPPORTED_CAPABILITIES = (&H0310)
    SDP_ATTRIB_IMAGING_SUPPORTED_FEATURES = (&H0311)
    SDP_ATTRIB_IMAGING_SUPPORTED_FUNCTIONS = (&H0312)
    SDP_ATTRIB_IMAGING_TOTAL_DATA_CAPACITY = (&H0313)
    SDP_ATTRIB_DI_SPECIFICATION_ID = (&H0200)
    SDP_ATTRIB_DI_VENDOR_ID = (&H0201)
    SDP_ATTRIB_DI_PRODUCT_ID = (&H0202)
    SDP_ATTRIB_DI_VERSION = (&H0203)
    SDP_ATTRIB_DI_PRIMARY_RECORD = (&H0204)
    SDP_ATTRIB_DI_VENDOR_ID_SOURCE = (&H0205)
    SDP_ATTRIB_HID_DEVICE_RELEASE_NUMBER = (&H0200)
    SDP_ATTRIB_HID_PARSER_VERSION = (&H0201)
    SDP_ATTRIB_HID_DEVICE_SUBCLASS = (&H0202)
    SDP_ATTRIB_HID_COUNTRY_CODE = (&H0203)
    SDP_ATTRIB_HID_VIRTUAL_CABLE = (&H0204)
    SDP_ATTRIB_HID_RECONNECT_INITIATE = (&H0205)
    SDP_ATTRIB_HID_DESCRIPTOR_LIST = (&H0206)
    SDP_ATTRIB_HID_LANG_ID_BASE_LIST = (&H0207)
    SDP_ATTRIB_HID_SDP_DISABLE = (&H0208)
    SDP_ATTRIB_HID_BATTERY_POWER = (&H0209)
    SDP_ATTRIB_HID_REMOTE_WAKE = (&H020A)
    SDP_ATTRIB_HID_PROFILE_VERSION = (&H020B)
    SDP_ATTRIB_HID_SUPERVISION_TIMEOUT = (&H020C)
    SDP_ATTRIB_HID_NORMALLY_CONNECTABLE = (&H020D)
    SDP_ATTRIB_HID_BOOT_DEVICE = (&H020E)
    SDP_ATTRIB_HID_SSR_HOST_MAX_LATENCY = (&H020F)
    SDP_ATTRIB_HID_SSR_HOST_MIN_TIMEOUT = (&H0210)
    SDP_ATTRIB_A2DP_SUPPORTED_FEATURES = (&H0311)
    SDP_ATTRIB_AVRCP_SUPPORTED_FEATURES = (&H0311)
    SDP_ATTRIB_HFP_SUPPORTED_FEATURES = (&H0311)
End Enum

Public Enum BthSdpProtocolSpecificAttribs
    AVRCP_SUPPORTED_FEATURES_CATEGORY_1 = (&H0001)
    AVRCP_SUPPORTED_FEATURES_CATEGORY_2 = (&H0002)
    AVRCP_SUPPORTED_FEATURES_CATEGORY_3 = (&H0004)
    AVRCP_SUPPORTED_FEATURES_CATEGORY_4 = (&H0008)
    AVRCP_SUPPORTED_FEATURES_CT_BROWSING = (&H0040)
    AVRCP_SUPPORTED_FEATURES_CT_COVER_ART_IMAGE_PROPERTIES = (&H0080)
    AVRCP_SUPPORTED_FEATURES_CT_COVER_ART_IMAGE = (&H0100)
    AVRCP_SUPPORTED_FEATURES_CT_COVER_ART_LINKED_THUMBNAIL = (&H0200)
    AVRCP_SUPPORTED_FEATURES_TG_PLAYER_APPLICATION_SETTINGS = (&H0010)
    AVRCP_SUPPORTED_FEATURES_TG_GROUP_NAVIGATION = (&H0020)
    AVRCP_SUPPORTED_FEATURES_TG_BROWSING = (&H0040)
    AVRCP_SUPPORTED_FEATURES_TG_MULTIPLE_PLAYER_APPLICATIONS = (&H0080)
    AVRCP_SUPPORTED_FEATURES_TG_COVER_ART = (&H0100)
    A2DP_SINK_SUPPORTED_FEATURES_HEADPHONE = (&H0001)
    A2DP_SINK_SUPPORTED_FEATURES_SPEAKER = (&H0002)
    A2DP_SINK_SUPPORTED_FEATURES_RECORDER = (&H0004)
    A2DP_SINK_SUPPORTED_FEATURES_AMPLIFIER = (&H0008)
    A2DP_SOURCE_SUPPORTED_FEATURES_PLAYER = (&H0001)
    A2DP_SOURCE_SUPPORTED_FEATURES_MICROPHONE = (&H0002)
    A2DP_SOURCE_SUPPORTED_FEATURES_TUNER = (&H0004)
    A2DP_SOURCE_SUPPORTED_FEATURES_MIXER = (&H0008)
    CORDLESS_EXTERNAL_NETWORK_PSTN = (&H01)
    CORDLESS_EXTERNAL_NETWORK_ISDN = (&H02)
    CORDLESS_EXTERNAL_NETWORK_GSM = (&H03)
    CORDLESS_EXTERNAL_NETWORK_CDMA = (&H04)
    CORDLESS_EXTERNAL_NETWORK_ANALOG_CELLULAR = (&H05)
    CORDLESS_EXTERNAL_NETWORK_PACKET_SWITCHED = (&H06)
    CORDLESS_EXTERNAL_NETWORK_OTHER = (&H07)
    OBJECT_PUSH_FORMAT_VCARD_2_1 = (&H01)
    OBJECT_PUSH_FORMAT_VCARD_3_0 = (&H02)
    OBJECT_PUSH_FORMAT_VCAL_1_0 = (&H03)
    OBJECT_PUSH_FORMAT_ICAL_2_0 = (&H04)
    OBJECT_PUSH_FORMAT_VNOTE = (&H05)
    OBJECT_PUSH_FORMAT_VMESSAGE = (&H06)
    OBJECT_PUSH_FORMAT_ANY = (&HFF)
    SYNCH_DATA_STORE_PHONEBOOK = (&H01)
    SYNCH_DATA_STORE_CALENDAR = (&H03)
    SYNCH_DATA_STORE_NOTES = (&H05)
    SYNCH_DATA_STORE_MESSAGES = (&H06)
    DI_VENDOR_ID_SOURCE_BLUETOOTH_SIG = (&H0001)
    DI_VENDOR_ID_SOURCE_USB_IF = (&H0002)
    PSM_SDP = (&H0001)
    PSM_RFCOMM = (&H0003)
    PSM_TCS_BIN = (&H0005)
    PSM_TCS_BIN_CORDLESS = (&H0007)
    PSM_BNEP = (&H000F)
    PSM_HID_CONTROL = (&H0011)
    PSM_HID_INTERRUPT = (&H0013)
    PSM_UPNP = (&H0015)
    PSM_AVCTP = (&H0017)
    PSM_AVDTP = (&H0019)
    PSM_AVCTP_BROWSE = (&H001B)
    PSM_UDI_C_PLANE = (&H001D)
    PSM_ATT = (&H001F)
    PSM_3DSP = (&H0021)
    PSM_LE_IPSP = (&H0023)
End Enum

Public Const STR_ADDR_FMTA  = "(%02x:%02x:%02x:%02x:%02x:%02x)"
Public Const STR_ADDR_FMTW  = "(%02x:%02x:%02x:%02x:%02x:%02x)"
Public Const STR_ADDR_SHORT_FMTA  = "%04x%08x"
Public Const STR_ADDR_SHORT_FMTW  = "%04x%08x"
Public Const STR_USBHCI_CLASS_HARDWAREIDA  = "USB\Class_E0&SubClass_01&Prot_01"
Public Const STR_USBHCI_CLASS_HARDWAREIDW  = "USB\Class_E0&SubClass_01&Prot_01"
' #if defined(UNICODE) || defined(BTH_KERN)
Public Const STR_ADDR_FMT  = STR_ADDR_FMTW
Public Const STR_ADDR_SHORT_FMT  = STR_ADDR_SHORT_FMTW
Public Const STR_USBHCI_CLASS_HARDWAREID  = STR_USBHCI_CLASS_HARDWAREIDW

' #define GET_BITS(field,offset,mask)         ( ( (field) >> (offset) ) & (mask) )
' #define GET_BIT(field,offset)               ( GET_BITS(field,offset,0x1) )

' #define LMP_3_SLOT_PACKETS(x)               (GET_BIT(x, 0))
' #define LMP_5_SLOT_PACKETS(x)               (GET_BIT(x, 1))
' #define LMP_ENCRYPTION(x)                   (GET_BIT(x, 2))
' #define LMP_SLOT_OFFSET(x)                  (GET_BIT(x, 3))
' #define LMP_TIMING_ACCURACY(x)              (GET_BIT(x, 4))
' #define LMP_SWITCH(x)                       (GET_BIT(x, 5))
' #define LMP_HOLD_MODE(x)                    (GET_BIT(x, 6))
' #define LMP_SNIFF_MODE(x)                   (GET_BIT(x, 7))
' #define LMP_PARK_MODE(x)                    (GET_BIT(x, 8))
' #define LMP_RSSI(x)                         (GET_BIT(x, 9))
' #define LMP_CHANNEL_QUALITY_DRIVEN_MODE(x)  (GET_BIT(x,10))
' #define LMP_SCO_LINK(x)                     (GET_BIT(x,11))
' #define LMP_HV2_PACKETS(x)                  (GET_BIT(x,12))
' #define LMP_HV3_PACKETS(x)                  (GET_BIT(x,13))
' #define LMP_MU_LAW_LOG(x)                   (GET_BIT(x,14))
' #define LMP_A_LAW_LOG(x)                    (GET_BIT(x,15))
' #define LMP_CVSD(x)                         (GET_BIT(x,16))
' #define LMP_PAGING_SCHEME(x)                (GET_BIT(x,17))
' #define LMP_POWER_CONTROL(x)                (GET_BIT(x,18))
' #define LMP_TRANSPARENT_SCO_DATA(x)         (GET_BIT(x,19))
' #define LMP_FLOW_CONTROL_LAG(x)             (GET_BITS(x,20,0x3))
' #define LMP_BROADCAST_ENCRYPTION(x)         (GET_BIT(x,23))
' #define LMP_ENHANCED_DATA_RATE_ACL_2MBPS_MODE(x) (GET_BIT(x,25))
' #define LMP_ENHANCED_DATA_RATE_ACL_3MBPS_MODE(x) (GET_BIT(x,26))
' #define LMP_ENHANCED_INQUIRY_SCAN(x)        (GET_BIT(x,27))
' #define LMP_INTERLACED_INQUIRY_SCAN(x)      (GET_BIT(x,28))
' #define LMP_INTERLACED_PAGE_SCAN(x)         (GET_BIT(x,29))
' #define LMP_RSSI_WITH_INQUIRY_RESULTS(x)    (GET_BIT(x,30))
' #define LMP_ESCO_LINK(x)                    (GET_BIT(x,31))
' #define LMP_EV4_PACKETS(x)                  (GET_BIT(x,32))
' #define LMP_EV5_PACKETS(x)                  (GET_BIT(x,33))
' #define LMP_AFH_CAPABLE_SLAVE(x)            (GET_BIT(x,35))
' #define LMP_AFH_CLASSIFICATION_SLAVE(x)     (GET_BIT(x,36))
' #define LMP_BR_EDR_NOT_SUPPORTED(x)         (GET_BIT(x,37))
' #define LMP_LE_SUPPORTED(x)                 (GET_BIT(x,38))
' #define LMP_3SLOT_EDR_ACL_PACKETS(x)        (GET_BIT(x,39))
' #define LMP_5SLOT_EDR_ACL_PACKETS(x)        (GET_BIT(x,40))
' #define LMP_SNIFF_SUBRATING(x)              (GET_BIT(x,41))
' #define LMP_PAUSE_ENCRYPTION(x)             (GET_BIT(x,42))
' #define LMP_AFH_CAPABLE_MASTER(x)           (GET_BIT(x,43))
' #define LMP_AFH_CLASSIFICATION_MASTER(x)    (GET_BIT(x,44))
' #define LMP_EDR_ESCO_2MBPS_MODE(x)          (GET_BIT(x,45))
' #define LMP_EDR_ESCO_3MBPS_MODE(x)          (GET_BIT(x,46))
' #define LMP_3SLOT_EDR_ESCO_PACKETS(x)       (GET_BIT(x,47))
' #define LMP_EXTENDED_INQUIRY_RESPONSE(x)    (GET_BIT(x,48))
' #define LMP_SIMULT_LE_BR_TO_SAME_DEV(x)     (GET_BIT(x,49))
' #define LMP_SECURE_SIMPLE_PAIRING(x)        (GET_BIT(x,51))
' #define LMP_ENCAPSULATED_PDU(x)             (GET_BIT(x,52))
' #define LMP_ERRONEOUS_DATA_REPORTING(x)     (GET_BIT(x,53))
' #define LMP_NON_FLUSHABLE_PACKET_BOUNDARY_FLAG(x) (GET_BIT(x,54))
' #define LMP_LINK_SUPERVISION_TIMEOUT_CHANGED_EVENT(x) (GET_BIT(x,56))
' #define LMP_INQUIRY_RESPONSE_TX_POWER_LEVEL(x)(GET_BIT(x,57))
' #define LMP_EXTENDED_FEATURES(x)            (GET_BIT(x,63))
#End Region

#Region "bluetoothapis.h"

Public Const BLUETOOTH_MAX_NAME_SIZE  = (248)
Public Const BLUETOOTH_MAX_PASSKEY_SIZE  = (16)
Public Const BLUETOOTH_MAX_PASSKEY_BUFFER_SIZE  = (BLUETOOTH_MAX_PASSKEY_SIZE + 1)
Public Const BLUETOOTH_MAX_SERVICE_NAME_SIZE  = (256)
Public Const BLUETOOTH_DEVICE_NAME_SIZE  = (256)

'Alias BTH_ADDR As LongLong
Public Type BLUETOOTH_ADDRESS
    ' union {
   ullLong As LongLong 'BTH_ADDR '  easier to compare again BLUETOOTH_NULL_ADDRESS
'    rgBytes(0 To 5) As Byte '  easier to format when broken out
   '}
End Type
'Alias BLUETOOTH_ADDRESS_STRUCT As BLUETOOTH_ADDRESS
Public Type BLUETOOTH_ADDRESS_STRUCT
    ' union {
   ullLong As LongLong 'BTH_ADDR '  easier to compare again BLUETOOTH_NULL_ADDRESS
'    rgBytes(0 To 5) As Byte '  easier to format when broken out
   '}
End Type

Public Const BLUETOOTH_NULL_ADDRESS As LongLong = 0

Public Type BLUETOOTH_LOCAL_SERVICE_INFO
    Enabled As BOOL '  If TRUE, the enable the services
    btAddr As BLUETOOTH_ADDRESS '  If service is to be advertised for a particular remote device
    szName(0 To (BLUETOOTH_MAX_SERVICE_NAME_SIZE - 1)) As Integer '  SDP Service Name to be advertised.
    szDeviceString(0 To (BLUETOOTH_DEVICE_NAME_SIZE - 1)) As Integer '  Local device name (if any) like COM4 or LPT1
End Type
'Alias BLUETOOTH_LOCAL_SERVICE_INFO_STRUCT As BLUETOOTH_LOCAL_SERVICE_INFO
Public Type BLUETOOTH_LOCAL_SERVICE_INFO_STRUCT
    Enabled As BOOL '  If TRUE, the enable the services
    btAddr As BLUETOOTH_ADDRESS '  If service is to be advertised for a particular remote device
    szName(0 To (BLUETOOTH_MAX_SERVICE_NAME_SIZE - 1)) As Integer '  SDP Service Name to be advertised.
    szDeviceString(0 To (BLUETOOTH_DEVICE_NAME_SIZE - 1)) As Integer '  Local device name (if any) like COM4 or LPT1
End Type

Public Type BLUETOOTH_FIND_RADIO_PARAMS
    dwSize As Long '  IN  sizeof this structure
End Type

Public Declare PtrSafe Function BluetoothFindFirstRadio Lib "bthprops.cpl" (pbtfrp As BLUETOOTH_FIND_RADIO_PARAMS, phRadio As LongPtr) As LongPtr
Public Declare PtrSafe Function BluetoothFindNextRadio Lib "bthprops.cpl" (ByVal hFind As LongPtr, phRadio As LongPtr) As BOOL
Public Declare PtrSafe Function BluetoothFindRadioClose Lib "bthprops.cpl" (ByVal hFind As LongPtr) As BOOL

Public Type BLUETOOTH_RADIO_INFO
    dwSize As Long ' Size, in bytes, of this entire data structure
    address As BLUETOOTH_ADDRESS ' Address of the local radio
    szName(0 To (BLUETOOTH_MAX_NAME_SIZE - 1)) As Integer ' Name of the local radio
    ulClassofDevice As Long ' Class of device for the local radio
    lmpSubversion As Integer ' lmpSubversion, manufacturer specifc.
    manufacturer As Integer ' Manufacturer of the radio, BTH_MFG_Xxx value.  For the most up to date
    ' list, goto the Bluetooth specification website and get the Bluetooth
    ' assigned numbers document.
End Type

Public Declare PtrSafe Function BluetoothGetRadioInfo Lib "bthprops.cpl" (ByVal hRadio As LongPtr, pRadioInfo As BLUETOOTH_RADIO_INFO) As Long

Public Type BLUETOOTH_DEVICE_INFO
    ' _Field_range_(==, sizeof(BLUETOOTH_DEVICE_INFO_STRUCT))
    dwSize As Long '  size, in bytes, of this structure - must be the sizeof(BLUETOOTH_DEVICE_INFO)
    Address As BLUETOOTH_ADDRESS '  Bluetooth address
    ulClassofDevice As Long '  Bluetooth "Class of Device"
    fConnected As BOOL '  Device connected/in use
    fRemembered As BOOL '  Device remembered
    fAuthenticated As BOOL '  Device authenticated/paired/bonded
    stLastSeen As SYSTEMTIME '  Last time the device was seen
    stLastUsed As SYSTEMTIME '  Last time the device was used for other than RNR, inquiry, or SDP
    szName(0 To (BLUETOOTH_MAX_NAME_SIZE - 1)) As Integer '  Name of the device
End Type
'Alias BLUETOOTH_DEVICE_INFO_STRUCT As BLUETOOTH_DEVICE_INFO_STRUCT 
Public Type BLUETOOTH_DEVICE_INFO_STRUCT
    ' _Field_range_(==, sizeof(BLUETOOTH_DEVICE_INFO_STRUCT))
    dwSize As Long '  size, in bytes, of this structure - must be the sizeof(BLUETOOTH_DEVICE_INFO)
    Address As BLUETOOTH_ADDRESS '  Bluetooth address
    ulClassofDevice As Long '  Bluetooth "Class of Device"
    fConnected As BOOL '  Device connected/in use
    fRemembered As BOOL '  Device remembered
    fAuthenticated As BOOL '  Device authenticated/paired/bonded
    stLastSeen As SYSTEMTIME '  Last time the device was seen
    stLastUsed As SYSTEMTIME '  Last time the device was used for other than RNR, inquiry, or SDP
    szName(0 To (BLUETOOTH_MAX_NAME_SIZE - 1)) As Integer '  Name of the device
End Type

Public Enum BLUETOOTH_AUTHENTICATION_METHOD
    BLUETOOTH_AUTHENTICATION_METHOD_LEGACY = &H1
    BLUETOOTH_AUTHENTICATION_METHOD_OOB = 0
    BLUETOOTH_AUTHENTICATION_METHOD_NUMERIC_COMPARISON = 1
    BLUETOOTH_AUTHENTICATION_METHOD_PASSKEY_NOTIFICATION = 2
    BLUETOOTH_AUTHENTICATION_METHOD_PASSKEY = 3
End Enum
Public Enum BLUETOOTH_IO_CAPABILITY
    BLUETOOTH_IO_CAPABILITY_DISPLAYONLY = &H00
    BLUETOOTH_IO_CAPABILITY_DISPLAYYESNO = &H01
    BLUETOOTH_IO_CAPABILITY_KEYBOARDONLY = &H02
    BLUETOOTH_IO_CAPABILITY_NOINPUTNOOUTPUT = &H03
    BLUETOOTH_IO_CAPABILITY_UNDEFINED = &Hff
End Enum
Public Enum BLUETOOTH_AUTHENTICATION_REQUIREMENTS
    BLUETOOTH_MITM_ProtectionNotRequired = 0
    BLUETOOTH_MITM_ProtectionRequired = &H1
    BLUETOOTH_MITM_ProtectionNotRequiredBonding = &H2
    BLUETOOTH_MITM_ProtectionRequiredBonding = &H3
    BLUETOOTH_MITM_ProtectionNotRequiredGeneralBonding = &H4
    BLUETOOTH_MITM_ProtectionRequiredGeneralBonding = &H5
    BLUETOOTH_MITM_ProtectionNotDefined = &Hff
End Enum

Public Type BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS
    deviceInfo As BLUETOOTH_DEVICE_INFO
    authenticationMethod As BLUETOOTH_AUTHENTICATION_METHOD
    ioCapability As BLUETOOTH_IO_CAPABILITY
    authenticationRequirements As BLUETOOTH_AUTHENTICATION_REQUIREMENTS
    'union{
    '    ULONG   Numeric_Value;
    '    ULONG   Passkey;
    '};
    ValueOrPasskey As Long
End Type

Public Type BLUETOOTH_DEVICE_SEARCH_PARAMS
    dwSize As Long '  IN  sizeof this structure
    fReturnAuthenticated As BOOL '  IN  return authenticated devices
    fReturnRemembered As BOOL '  IN  return remembered devices
    fReturnUnknown As BOOL '  IN  return unknown devices
    fReturnConnected As BOOL '  IN  return connected devices
    fIssueInquiry As BOOL '  IN  issue a new inquiry
    cTimeoutMultiplier As Byte '  IN  timeout for the inquiry
    hRadio As LongPtr '  IN  handle to radio to enumerate - NULL == all radios will be searched
End Type

Public Declare PtrSafe Function BluetoothFindFirstDevice Lib "bthprops.cpl" (pbtsp As BLUETOOTH_DEVICE_SEARCH_PARAMS, pbtdi As BLUETOOTH_DEVICE_INFO) As LongPtr
Public Declare PtrSafe Function BluetoothFindNextDevice Lib "bthprops.cpl" (ByVal hFind As LongPtr, pbtdi As BLUETOOTH_DEVICE_INFO) As BOOL
Public Declare PtrSafe Function BluetoothFindDeviceClose Lib "bthprops.cpl" (ByVal hFind As LongPtr) As BOOL
Public Declare PtrSafe Function BluetoothGetDeviceInfo Lib "bthprops.cpl" (ByVal hRadio As LongPtr, pbtdi As BLUETOOTH_DEVICE_INFO) As Long
Public Declare PtrSafe Function BluetoothUpdateDeviceRecord Lib "bthprops.cpl" (pbtdi As BLUETOOTH_DEVICE_INFO) As Long
Public Declare PtrSafe Function BluetoothRemoveDevice Lib "bthprops.cpl" (pAddress As BLUETOOTH_ADDRESS) As Long

Public Type BLUETOOTH_COD_PAIRS
    ulCODMask As Long '  ClassOfDevice mask to compare
    pcszDescription As LongPtr '  Descriptive string of mask
End Type

' typedef BOOL (WINAPI *PFN_DEVICE_CALLBACK)(LPVOID pvParam, const BLUETOOTH_DEVICE_INFO * pDevice);
Public Delegate Function BthDeviceCallback (ByVal pvParam As LongPtr, pDevice As BLUETOOTH_DEVICE_INFO) As BOOL

' Public Type BLUETOOTH_SELECT_DEVICE_PARAMS
'     dwSize As Long '  IN  sizeof this structure
'     cNumOfClasses As Long '  IN  Number in prgClassOfDevice - if ZERO search for all devices
'     prgClassOfDevices As BLUETOOTH_COD_PAIRS  '  IN  Array of CODs to find.
'     pszInfo As LongPtr '  IN  If not NULL, sets the "information" text
'     hwndParent As LongPtr '  IN  parent window - NULL == no parent
'     fForceAuthentication As BOOL '  IN  If TRUE, authenication will be forced before returning
'     fShowAuthenticated As BOOL '  IN  If TRUE, authenticated devices will be shown in the picker
'     fShowRemembered As BOOL '  IN  If TRUE, remembered devices will be shown in the picker
'     fShowUnknown As BOOL '  IN  If TRUE, unknown devices that are not authenticated or "remember" will be shown.
'     fAddNewDeviceWizard As BOOL '  IN  If TRUE, invokes the add new device wizard.
'     fSkipServicesPage As BOOL '  IN  If TRUE, skips the "Services" page in the wizard.
'     pfnDeviceCallback As BthDeviceCallback '  IN  If non-NULL, a callback that will be called for each device. If the
'     '      the callback returns TRUE, the item will be added. If the callback is
'     '      is FALSE, the item will not be shown.
'     pvParam As LongPtr '  IN  Parameter to be passed to pfnDeviceCallback as the pvParam.
'     cNumDevices As Long '  IN  number calles wants - ZERO == no limit.
'     '  OUT the number of devices returned.
'     pDevices As LongPtr 'PBLUETOOTH_DEVICE_INFO '  OUT pointer to an array for BLUETOOTH_DEVICE_INFOs.
'     '      call BluetoothSelectDevicesFree() to free
' End Type
Public Type BLUETOOTH_SELECT_DEVICE_PARAMS
    dwSize As Long '  IN  sizeof this structure
    cNumOfClasses As Long '  IN  Number in prgClassOfDevice - if ZERO search for all devices
    prgClassOfDevices As BLUETOOTH_COD_PAIRS  '  IN  Array of CODs to find.
    pszInfo As LongPtr '  IN  If not NULL, sets the "information" text
    hwndParent As LongPtr '  IN  parent window - NULL == no parent
    fForceAuthentication As BOOL '  IN  If TRUE, authenication will be forced before returning
    fShowAuthenticated As BOOL '  IN  If TRUE, authenticated devices will be shown in the picker
    fShowRemembered As BOOL '  IN  If TRUE, remembered devices will be shown in the picker
    fShowUnknown As BOOL '  IN  If TRUE, unknown devices that are not authenticated or "remember" will be shown.
    fAddNewDeviceWizard As BOOL '  IN  If TRUE, invokes the add new device wizard.
    fSkipServicesPage As BOOL '  IN  If TRUE, skips the "Services" page in the wizard.
    pfnDeviceCallback As LongPtr '  IN  If non-NULL, a callback that will be called for each device. If the
    '      the callback returns TRUE, the item will be added. If the callback is
    '      is FALSE, the item will not be shown.
    pvParam As LongPtr '  IN  Parameter to be passed to pfnDeviceCallback as the pvParam.
    cNumDevices As Long '  IN  number calles wants - ZERO == no limit.
    '  OUT the number of devices returned.
    pDevices As LongPtr 'PBLUETOOTH_DEVICE_INFO '  OUT pointer to an array for BLUETOOTH_DEVICE_INFOs.
    '      call BluetoothSelectDevicesFree() to free
End Type

Public Declare PtrSafe Function BluetoothSelectDevices Lib "bthprops.cpl" (pbtsdp As BLUETOOTH_SELECT_DEVICE_PARAMS) As BOOL
Public Declare PtrSafe Function BluetoothSelectDevicesFree Lib "bthprops.cpl" (pbtsdp As BLUETOOTH_SELECT_DEVICE_PARAMS) As BOOL

Public Declare PtrSafe Function BluetoothDisplayDeviceProperties Lib "bthprops.cpl" (ByVal hwndParent As LongPtr, pbtdi As BLUETOOTH_DEVICE_INFO) As BOOL

Public DeclareWide PtrSafe Function BluetoothAuthenticateDevice Lib "bthprops.cpl" (ByVal hwndParent As LongPtr, ByVal hRadio As LongPtr, pbtdi As BLUETOOTH_DEVICE_INFO, ByVal pszPasskey As String, ByVal ulPasskeyLength As Long) As Long
Public DeclareWide PtrSafe Function BluetoothAuthenticateDevice Lib "bthprops.cpl" (ByVal hwndParent As LongPtr, ByVal hRadio As LongPtr, pbtdi As BLUETOOTH_DEVICE_INFO, ByVal pszPasskey As LongPtr, ByVal ulPasskeyLength As Long) As Long

Public Type BLUETOOTH_PIN_INFO
    pin(0 To (BTH_MAX_PIN_SIZE - 1)) As Byte
    pinLength As Byte
End Type
Public Type BLUETOOTH_OOB_DATA_INFO
    C(0 To 15) As Byte
    R(0 To 15) As Byte
End Type
Public Type BLUETOOTH_NUMERIC_COMPARISON_INFO
    NumericValue As Long
End Type
Public Type BLUETOOTH_PASSKEY_INFO
    passkey As Long
End Type

Public Declare PtrSafe Function BluetoothAuthenticateDeviceEx Lib "bthprops.cpl" (ByVal hwndParentIn As LongPtr, ByVal hRadioIn As LongPtr, pbtdiInout As BLUETOOTH_DEVICE_INFO, pbtOobData As BLUETOOTH_OOB_DATA_INFO, ByVal authenticationRequirement As AUTHENTICATION_REQUIREMENTS) As Long
Public Declare PtrSafe Function BluetoothAuthenticateMultipleDevices Lib "bthprops.cpl" (ByVal hwndParentIn As LongPtr, ByVal hRadioIn As LongPtr, ByVal cDevices As Long, rgbtdi As BLUETOOTH_DEVICE_INFO) As Long

Public Enum BthServicesEnableFlags
    BLUETOOTH_SERVICE_DISABLE = &H00
    BLUETOOTH_SERVICE_ENABLE = &H01
    BLUETOOTH_SERVICE_MASK = (BLUETOOTH_SERVICE_DISABLE Or BLUETOOTH_SERVICE_ENABLE)
End Enum

Public Declare PtrSafe Function BluetoothSetServiceState Lib "bthprops.cpl" (ByVal hRadio As LongPtr, pbtdi As BLUETOOTH_DEVICE_INFO, pGuidService As UUID, ByVal dwServiceFlags As BthServicesEnableFlags) As Long
Public Declare PtrSafe Function BluetoothEnumerateInstalledServices Lib "bthprops.cpl" (ByVal hRadio As LongPtr, pbtdi As BLUETOOTH_DEVICE_INFO, pcServiceInout As Long, pGuidServices As UUID) As Long
Public Declare PtrSafe Function BluetoothEnableDiscovery Lib "bthprops.cpl" (ByVal hRadio As LongPtr, ByVal fEnabled As BOOL) As BOOL
Public Declare PtrSafe Function BluetoothIsDiscoverable Lib "bthprops.cpl" (ByVal hRadio As LongPtr) As BOOL
Public Declare PtrSafe Function BluetoothEnableIncomingConnections Lib "bthprops.cpl" (ByVal hRadio As LongPtr, ByVal fEnabled As BOOL) As BOOL
Public Declare PtrSafe Function BluetoothIsConnectable Lib "bthprops.cpl" (ByVal hRadio As LongPtr) As BOOL

' typedef BOOL (CALLBACK *PFN_AUTHENTICATION_CALLBACK)(LPVOID pvParam, PBLUETOOTH_DEVICE_INFO pDevice);
Public Delegate Function BthAuthenticationCallback (ByVal pvParam As LongPtr, pDevice As BLUETOOTH_DEVICE_INFO) As BOOL
' Public Declare PtrSafe Function BluetoothRegisterForAuthentication Lib "bthprops.cpl" (pbtdi As BLUETOOTH_DEVICE_INFO, phRegHandle As LongPtr, ByVal pfnCallback As BthAuthenticationCallback, ByVal pvParam As LongPtr) As Long
Public Declare PtrSafe Function BluetoothRegisterForAuthentication Lib "bthprops.cpl" (pbtdi As BLUETOOTH_DEVICE_INFO, phRegHandle As LongPtr, ByVal pfnCallback As LongPtr, ByVal pvParam As LongPtr) As Long
' typedef BOOL (CALLBACK *PFN_AUTHENTICATION_CALLBACK_EX)(_In_opt_ LPVOID pvParam, _In_ PBLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS pAuthCallbackParams);
Public Delegate Function BthAuthenticationCallbackEx (ByVal pvParam As LongPtr, pAuthCallbackParams As BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS) As BOOL
' Public Declare PtrSafe Function BluetoothRegisterForAuthenticationEx Lib "bthprops.cpl" (pbtdiIn As BLUETOOTH_DEVICE_INFO, phRegHandleOut As LongPtr, ByVal pfnCallbackIn As BthAuthenticationCallback, ByVal pvParam As LongPtr) As Long
Public Declare PtrSafe Function BluetoothRegisterForAuthenticationEx Lib "bthprops.cpl" (pbtdiIn As BLUETOOTH_DEVICE_INFO, phRegHandleOut As LongPtr, ByVal pfnCallbackIn As LongPtr, ByVal pvParam As LongPtr) As Long
Public Declare PtrSafe Function BluetoothUnregisterAuthentication Lib "bthprops.cpl" (ByVal hRegHandle As LongPtr) As BOOL
Public Declare PtrSafe Function BluetoothSendAuthenticationResponse Lib "bthprops.cpl" (ByVal hRadio As LongPtr, pbtdi As BLUETOOTH_DEVICE_INFO, ByVal pszPasskey As LongPtr) As Long

Public Type BLUETOOTH_AUTHENTICATE_RESPONSE
    bthAddressRemote As BLUETOOTH_ADDRESS
    authMethod As BLUETOOTH_AUTHENTICATION_METHOD
    'union{
    '    BLUETOOTH_PIN_INFO pinInfo;
    '    BLUETOOTH_OOB_DATA_INFO oobInfo;
    '    BLUETOOTH_NUMERIC_COMPARISON_INFO numericCompInfo;
    '    BLUETOOTH_PASSKEY_INFO passkeyInfo;
    '};
    u(7) As Long
    negativeResponse As Byte
End Type
Public Declare PtrSafe Function BluetoothSendAuthenticationResponseEx Lib "bthprops.cpl" (ByVal hRadioIn As LongPtr, pauthResponse As BLUETOOTH_AUTHENTICATE_RESPONSE) As Long

Public Type SDP_ELEMENT_DATA
    ' Enumeration of SDP element types.  Generic element types will have a
    ' specificType value other then SDP_ST_NONE.  The generic types are:
    ' o SDP_TYPE_UINT
    ' o SDP_TYPE_INT
    ' o SDP_TYPE_UUID
    type As SDP_TYPE
    ' Specific types for the generic SDP element types.
    specificType As SDP_SPECIFICTYPE
    
    ' //
    ' // Union of all possible data types.  type and specificType will indicate
    ' // which field is valid.  For types which do not have a valid specificType,
    ' // specific type will be SDP_ST_NONE.
    ' //
    ' union {
        ' // type == SDP_TYPE_INT
        ' SDP_LARGE_INTEGER_16 int128;        // specificType == SDP_ST_INT128
        ' LONGLONG int64;                     // specificType == SDP_ST_INT64
        ' LONG int32;                         // specificType == SDP_ST_INT32
        ' SHORT int16;                        // specificType == SDP_ST_INT16
        ' CHAR int8;                          // specificType == SDP_ST_INT8

        ' // type == SDP_TYPE_UINT
        ' SDP_ULARGE_INTEGER_16 uint128;      // specificType == SDP_ST_UINT128
        ' ULONGLONG uint64;                   // specificType == SDP_ST_UINT64
        ' ULONG uint32;                       // specificType == SDP_ST_UINT32
        ' USHORT uint16;                      // specificType == SDP_ST_UINT16
        ' UCHAR uint8;                        // specificType == SDP_ST_UINT8

        ' // type == SDP_TYPE_BOOLEAN
        ' UCHAR booleanVal;

        ' // type == SDP_TYPE_UUID
        ' GUID uuid128;                       // specificType == SDP_ST_UUID128
        ' ULONG uuid32;                       // specificType == SDP_ST_UUID32
        ' USHORT uuid16;                      // specificType == SDP_ST_UUID32

        ' // type == SDP_TYPE_STRING
        ' struct {
            ' // raw string buffer, may not be encoded as ANSI, use
            ' // BluetoothSdpGetString to convert the value if it is described
            ' // by the base language attribute ID list
            ' LPBYTE value;

            ' // raw length of the string, may not be NULL terminuated
            ' ULONG length;
        ' } string;

        ' // type == SDP_TYPE_URL
        ' struct {
            ' LPBYTE value;
            ' ULONG length;
        ' } url;

        ' // type == SDP_TYPE_SEQUENCE
        ' struct {
            ' // raw sequence, starts at sequence element header
            ' LPBYTE value;

            ' // raw sequence length
            ' ULONG length;
        ' } sequence;

        ' // type == SDP_TYPE_ALTERNATIVE
        ' struct {
            ' // raw alternative, starts at alternative element header
            ' LPBYTE value;

            ' // raw alternative length
            ' ULONG length;
        ' } alternative;

    ' } data;
    data(15) As Byte
End Type

Public Declare PtrSafe Function BluetoothSdpGetElementData Lib "bthprops.cpl" (pSdpStream As Any, ByVal cbSdpStreamLength As Long, pData As SDP_ELEMENT_DATA) As Long
Public Declare PtrSafe Function BluetoothSdpGetContainerElementData Lib "bthprops.cpl" (pContainerStream As Any, ByVal cbContainerLength As Long, pElement As LongPtr, pData As SDP_ELEMENT_DATA) As Long
Public Declare PtrSafe Function BluetoothSdpGetAttributeValue Lib "bthprops.cpl" (pRecordStream As Any, ByVal cbRecordLength As Long, [TypeHint(BthSdpAttribs)] ByVal usAttributeId As Integer, pAttributeData As SDP_ELEMENT_DATA) As Long
Public Type SDP_STRING_TYPE_DATA
    ' How the string is encoded according to ISO 639:1988 (E/F): "Code
    ' for the representation of names of languages".
    encoding As Integer
    ' MIBE number from IANA database
    mibeNum As Integer
    ' The base attribute where the string is to be found in the record
    attributeId As Integer
End Type
Public Declare PtrSafe Function BluetoothSdpGetString Lib "bthprops.cpl" (pRecordStream As Any, ByVal cbRecordLength As Long, pStringData As SDP_STRING_TYPE_DATA, ByVal usStringOffset As Integer, ByVal pszString As LongPtr, pcchStringLength As Long) As Long

' typedef BOOL (CALLBACK *PFN_BLUETOOTH_ENUM_ATTRIBUTES_CALLBACK)(
' _In_ ULONG   uAttribId,
' _In_reads_bytes_(cbStreamSize) LPBYTE  pValueStream,
' _In_ ULONG   cbStreamSize,
' _In_opt_ LPVOID  pvParam
' );
Public Delegate Function BluetoothEnumAttributesCallback (ByVal uAttribId As Long, ByVal pValueStream As LongPtr, ByVal cbStreamSize As Long, ByVal pvParam As LongPtr) As BOOL
' Public Declare PtrSafe Function BluetoothSdpEnumAttributes Lib "bthprops.cpl" (pSDPStream As Any, ByVal cbStreamSize As Long, ByVal pfnCallback As BluetoothEnumAttributesCallback, ByVal pvParam As LongPtr) As BOOL
Public Declare PtrSafe Function BluetoothSdpEnumAttributes Lib "bthprops.cpl" (pSDPStream As Any, ByVal cbStreamSize As Long, ByVal pfnCallback As LongPtr, ByVal pvParam As LongPtr) As BOOL
' Public Declare PtrSafe Function BluetoothEnumAttributes Lib "bthprops.cpl" Alias "BluetoothSdpEnumAttributes" (pSDPStream As Any, ByVal cbStreamSize As Long, ByVal pfnCallback As BluetoothEnumAttributesCallback, ByVal pvParam As LongPtr) As BOOL
Public Declare PtrSafe Function BluetoothEnumAttributes Lib "bthprops.cpl" Alias "BluetoothSdpEnumAttributes" (pSDPStream As Any, ByVal cbStreamSize As Long, ByVal pfnCallback As LongPtr, ByVal pvParam As LongPtr) As BOOL

Public Declare PtrSafe Function BluetoothSetLocalServiceInfo Lib "bthprops.cpl" (ByVal hRadioIn As LongPtr, pClassGuid As UUID, ByVal ulInstance As Long, pServiceInfoIn As BLUETOOTH_LOCAL_SERVICE_INFO) As Long

Public Declare PtrSafe Function BluetoothIsVersionAvailable Lib "bthprops.cpl" (ByVal MajorVersion As Byte, ByVal MinorVersion As Byte) As BOOL


#End Region

End Module
#End If