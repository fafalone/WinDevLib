
'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

'WinDevLib - structuredquery.idl and related
[ InterfaceId ("a0ffbc28-5482-4366-be27-3e81e78e06c2") ]
[ OleAutomation (False) ]
Interface ISearchFolderItemFactory Extends stdole.IUnknown
    Sub SetDisplayName(ByVal pszDisplayName As LongPtr)
    Sub SetFolderIdType(ftid As UUID)
    Sub SetFolderLogicalViewMode(ByVal flvm As FOLDERLOGICALVIEWMODE)
    Sub SetIconSize(ByVal iIconSize As Long)
    Sub SetVisibleColumns(ByVal cVisibleColumn As Long, rgKey As PROPERTYKEY)
    Sub SetSortColumns(ByVal cSortColumns As Long, rgSortColumns As SORTCOLUMN)
    Sub SetGroupColumn(KeyGroup As PROPERTYKEY)
    Sub SetStacks(ByVal cStackKeys As Long, rgStackKeys As PROPERTYKEY)
    Sub SetScope(ByVal psiaScope As IShellItemArray)
    Sub SetCondition(ByVal pCondition As ICondition)
    Sub GetShellItem(riid As UUID, ppv As Any)
    Sub GetIDList(ppidl As LongPtr)
End Interface

[ InterfaceId ("4FDEF69C-DBC9-454e-9910-B34F3C64B510") ]
[ OleAutomation (False) ]
Interface IRichChunk Extends stdole.IUnknown
    Sub GetData(pLength As Long, ppsz As LongPtr, pValue As Variant)
End Interface

[ InterfaceId ("0FC988D4-C935-4b97-A973-46282EA175C8") ]
[ OleAutomation (False) ]
Interface ICondition Extends IPersistStream
    Function GetConditionType() As CONDITION_TYPE
    Sub GetSubConditions(riid As UUID, ppv As Any)
    Sub GetComparisonInfo(ppszPropertyName As LongPtr, pcop As CONDITION_OPERATION, ppropvar As Variant)
    Function GetValueType() As LongPtr
    Function GetValueNormalization() As LongPtr
    Sub GetInputTerms(ppPropertyTerm As IRichChunk, ppOperationTerm As IRichChunk, ppValueTerm As IRichChunk)
    Function Clone() As ICondition
End Interface

[ InterfaceId ("0DB8851D-2E5B-47eb-9208-D28C325A01D7") ]
[ OleAutomation (False) ]
Interface ICondition2 Extends ICondition
    Sub GetLocale(ppszLocaleName As LongPtr)
    Sub GetLeafConditionInfo(ppropkey As PROPERTYKEY, pcop As CONDITION_OPERATION, ppropvar As Variant)
End Interface

[ InterfaceId ("A5EFE073-B16F-474f-9F3E-9F8B497A3E08") ]
[ OleAutomation (False) ]
Interface IConditionFactory Extends stdole.IUnknown
    Sub MakeNot(ByVal pcSub As ICondition, ByVal fSimplify As Long, ppcResult As ICondition)
    Function MakeAndOr(ByVal ct As CONDITION_TYPE, ByVal peuSubs As IEnumUnknown, ByVal fSimplify As Long) As ICondition
    Sub MakeLeaf(ByVal pszPropertyName As LongPtr, ByVal cop As CONDITION_OPERATION, ByVal pszValueType As LongPtr, ppropvar As Variant, ByVal pPropertyNameTerm As IRichChunk, ByVal pOperationTerm As IRichChunk, ByVal pValueTerm As IRichChunk, ByVal fExpand As Long, ppcResult As ICondition)
    Sub Resolve(ByVal pc As ICondition, ByVal sqro As STRUCTURED_QUERY_RESOLVE_OPTION, pstReferenceTime As SYSTEMTIME, ppcResolved As ICondition)
End Interface

[ InterfaceId ("71D222E1-432F-429e-8C13-B6DAFDE5077A") ]
[ OleAutomation (False) ]
Interface IConditionFactory2 Extends IConditionFactory
    Sub CreateTrueFalse(ByVal fVal As Long, ByVal cco As CONDITION_CREATION_OPTIONS, riid As UUID, ppv As Any)
    Sub CreateNegation(ByVal pcSub As ICondition, ByVal cco As CONDITION_CREATION_OPTIONS, riid As UUID, ppv As Any)
    Sub CreateCompoundFromObjectArray(ByVal ct As CONDITION_TYPE, ByVal poaSubs As IObjectArray, ByVal cco As CONDITION_CREATION_OPTIONS, riid As UUID, ppv As Any)
    Sub CreateCompoundFromArray(ByVal ct As CONDITION_TYPE, ppcondSubs As ICondition, ByVal cSubs As Long, ByVal cco As CONDITION_CREATION_OPTIONS, riid As UUID, ppv As Any)
    Sub CreateStringLeaf(propkey As PROPERTYKEY, ByVal cop As CONDITION_OPERATION, ByVal pszValue As LongPtr, ByVal pszLocaleName As LongPtr, ByVal cco As CONDITION_CREATION_OPTIONS, riid As UUID, ppv As Any)
    Sub CreateIntegerLeaf(propkey As PROPERTYKEY, ByVal cop As CONDITION_OPERATION, ByVal lValue As Long, ByVal cco As CONDITION_CREATION_OPTIONS, riid As UUID, ppv As Any)
    Sub CreateBooleanLeaf(propkey As PROPERTYKEY, ByVal cop As CONDITION_OPERATION, ByVal fValue As Long, ByVal cco As CONDITION_CREATION_OPTIONS, riid As UUID, ppv As Any)
    Sub CreateLeaf(propkey As PROPERTYKEY, ByVal cop As CONDITION_OPERATION, propvar As Variant, ByVal pszSemanticType As LongPtr, ByVal pszLocaleName As LongPtr, ByVal pPropertyNameTree As IRichChunk, ByVal pOperationTerm As IRichChunk, ByVal pValueTerm As IRichChunk, ByVal cco As CONDITION_CREATION_OPTIONS, riid As UUID, ppv As Any)
    Sub ResolveCondition(ByVal pc As ICondition, ByVal sqro As STRUCTURED_QUERY_RESOLVE_OPTION, pstReferenceTime As SYSTEMTIME, riid As UUID, ppv As Any)
End Interface

[ InterfaceId ("2EBDEE67-3505-43f8-9946-EA44ABC8E5B0") ]
[ OleAutomation (False) ]
Interface IQueryParser Extends stdole.IUnknown
    Function Parse(ByVal pszInputString As LongPtr, ByVal pCustomProperties As IEnumUnknown) As IQuerySolution
    Sub SetOption(ByVal option As STRUCTURED_QUERY_SINGLE_OPTION, pOptionValue As Variant)
    Function GetOption(ByVal option As STRUCTURED_QUERY_SINGLE_OPTION) As Variant
    Sub SetMultiOption(ByVal option As STRUCTURED_QUERY_MULTIOPTION, ByVal pszOptionKey As LongPtr, pOptionValue As Variant)
    Function GetSchemaProvider() As ISchemaProvider
    Sub RestateToString(ByVal pCondition As ICondition, ByVal fUseEnglish As Long, ppszQueryString As LongPtr)
    Function ParsePropertyValue(ByVal pszPropertyName As LongPtr, ByVal pszInputString As LongPtr) As IQuerySolution
    Sub RestatePropertyValueToString(ByVal pCondition As ICondition, ByVal fUseEnglish As Long, ppszPropertyName As LongPtr, ppszQueryString As LongPtr)
End Interface

[ InterfaceId ("D6EBC66B-8921-4193-AFDD-A1789FB7FF57") ]
[ OleAutomation (False) ]
Interface IQuerySolution Extends IConditionFactory
    Sub GetQuery(ppQueryNode As ICondition, ppMainType As IEntity)
    Sub GetErrors(riid As UUID, ppParseErrors As Any)
    Sub GetLexicalData(ppszInputString As LongPtr, ppTokens As ITokenCollection, plcid As Long, ppWordBreaker As IUnknownUnrestricted)
    
End Interface

[ InterfaceId ("92D2CC58-4386-45a3-B98C-7E0CE64A4117") ]
[ OleAutomation (False) ]
Interface IConditionGenerator Extends stdole.IUnknown
    Sub Initialize(ByVal pSchemaProvider As ISchemaProvider)
    Sub RecognizeNamedEntities(ByVal pszInputString As LongPtr, ByVal lcidUserLocale As Long, ByVal pTokenCollection As ITokenCollection, pNamedEntities As INamedEntityCollector)
    Function GenerateForLeaf(ByVal pConditionFactory As IConditionFactory, ByVal pszPropertyName As LongPtr, ByVal cop As CONDITION_OPERATION, ByVal pszValueType As LongPtr, ByVal pszValue As LongPtr, ByVal pszValue2 As LongPtr, ByVal pPropertyNameTree As IRichChunk, ByVal pOperationTerm As IRichChunk, ByVal pValueTerm As IRichChunk, ByVal automaticWildcard As Long, pNoStringQuery As Long) As ICondition
    Function DefaultPhrase(ByVal pszValueType As LongPtr, ppropvar As Variant, ByVal fUseEnglish As Long) As LongPtr
End Interface

[ InterfaceId ("6BF0A714-3C18-430b-8B5D-83B1C234D3DB") ]
[ OleAutomation (False) ]
Interface IInterval Extends stdole.IUnknown
    Sub GetLimits(pilkLower As INTERVAL_LIMIT_KIND, ppropvarLower As Variant, pilkUpper As INTERVAL_LIMIT_KIND, ppropvarUpper As Variant)
End Interface

[ InterfaceId ("780102B0-C43B-4876-BC7B-5E9BA5C88794") ]
[ OleAutomation (False) ]
Interface IMetaData Extends stdole.IUnknown
    Sub GetData(pkey As PROPERTYKEY, ppszValue As LongPtr)
End Interface

[ InterfaceId ("24264891-E80B-4fd3-B7CE-4FF2FAE8931F") ]
[ OleAutomation (False) ]
Interface IEntity Extends stdole.IUnknown
    Function Name() As LongPtr
    Function Base() As IEntity
    Sub Relationships(riid As UUID, pRelationships As Any)
    Function GetRelationship(ByVal pszRelationName As LongPtr) As IRelationship
    Sub MetaData(riid As UUID, pMetaData As Any)
    Sub NamedEntities(riid As UUID, pNamedEntities As Any)
    Function GetNamedEntity(ByVal pszValue As LongPtr) As INamedEntity
    Function DefaultPhrase() As LongPtr
End Interface

[ InterfaceId ("2769280B-5108-498c-9C7F-A51239B63147") ]
[ OleAutomation (False) ]
Interface IRelationship Extends stdole.IUnknown
    Function Name() As LongPtr
    Function IsReal() As Long
    Function Destination() As IEntity
    Sub MetaData(riid As UUID, pMetaData As Any)
    Function DefaultPhrase() As LongPtr
End Interface

[ InterfaceId ("ABDBD0B1-7D54-49fb-AB5C-BFF4130004CD") ]
[ OleAutomation (False) ]
Interface INamedEntity Extends stdole.IUnknown
    Function GetValue() As LongPtr
    Function DefaultPhrase() As LongPtr
End Interface

[ InterfaceId ("8CF89BCB-394C-49b2-AE28-A59DD4ED7F68") ]
[ OleAutomation (False) ]
Interface ISchemaProvider Extends stdole.IUnknown
    Sub Entities(riid As UUID, pEntities As Any)
    Function RootEntity() As IEntity
    Function GetEntity(ByVal pszEntityName As LongPtr) As IEntity
    Sub MetaData(riid As UUID, pMetaData As Any)
    Sub Localize(ByVal lcid As Long, ByVal pSchemaLocalizerSupport As ISchemaLocalizerSupport)
    Sub SaveBinary(ByVal pszSchemaBinaryPath As LongPtr)
    Sub LookupAuthoredNamedEntity(ByVal pEntity As IEntity, ByVal pszInputString As LongPtr, ByVal pTokenCollection As ITokenCollection, ByVal cTokensBegin As Long, pcTokensLength As Long, ppszValue As LongPtr)
End Interface

[ InterfaceId ("22D8B4F2-F577-4adb-A335-C2AE88416FAB") ]
[ OleAutomation (False) ]
Interface ITokenCollection Extends stdole.IUnknown
    Sub NumberOfTokens(pCount As Long)
    Sub GetToken(ByVal i As Long, pBegin As Long, pLength As Long, ppsz As LongPtr)
End Interface

[ InterfaceId ("AF2440F6-8AFC-47d0-9A7F-396A0ACFB43D") ]
[ OleAutomation (False) ]
Interface INamedEntityCollector Extends stdole.IUnknown
    Sub Add(ByVal beginSpan As Long, ByVal EndSpan As Long, ByVal beginActual As Long, ByVal EndActual As Long, ByVal pType As IEntity, ByVal pszValue As LongPtr, ByVal certainty As NAMED_ENTITY_CERTAINTY)
End Interface

[ InterfaceId ("CA3FDCA2-BFBE-4eed-90D7-0CAEF0A1BDA1") ]
[ OleAutomation (False) ]
Interface ISchemaLocalizerSupport Extends stdole.IUnknown
    Function Localize(ByVal pszGlobalString As LongPtr) As LongPtr 'ppszLocalString
End Interface

[ InterfaceId ("A879E3C4-AF77-44fb-8F37-EBD1487CF920") ]
[ OleAutomation (False) ]
Interface IQueryParserManager Extends stdole.IUnknown
    Sub CreateLoadedParser(ByVal pszCatalog As LongPtr, ByVal langidForKeywords As Integer, riid As UUID, ppQueryParser As Any)
    Sub InitializeOptions(ByVal fUnderstandNQS As Long, ByVal fAutoWildcard As Long, ByVal pQueryParser As IQueryParser)
    Sub SetOption(ByVal option As QUERY_PARSER_MANAGER_OPTION, pOptionValue As Variant)
End Interface

'SearchAPI
    [ InterfaceId ("89BCB740-6119-101A-BCB7-00DD010655AF") ]
    [ OleAutomation (False) ]
    Interface IFilter Extends stdole.IUnknown
        [ PreserveSig ]
        Function Init(ByVal grfFlags As Long, ByVal cAttributes As Long, ByRef aAttributes As FULLPROPSPEC, ByRef pFlags As Long) As Long
        [ PreserveSig ]
        Function GetChunk(ByRef pStat As STAT_CHUNK) As Long
        [ PreserveSig ]
        Function GetText(ByRef pcwcBuffer As Long, ByRef awcBuffer As Integer) As Long
        [ PreserveSig ]
        Function GetValue(ByRef ppPropValue As Variant) As Long
    #If Win64 Then
        [ PreserveSig ]
        Function BindRegion(ByRef origPos As FILTERREGION, ByRef riid As UUID, ByRef ppunk As Any) As Long
    #Else
        [ PreserveSig ]
        Function BindRegion(ByVal origPosChunk As Long, ByVal origPosStart As Long, ByVal origPosExtent As Long, ByRef riid As UUID, ByRef ppunk As Any) As Long
    #End If
    End Interface

    [ InterfaceId ("C7310722-AC80-11D1-8DF3-00C04FB6EF4F") ]
    [ Description ("ILoadFilter Interface") ]
    [ OleAutomation (False) ]
    Interface ILoadFilter Extends stdole.IUnknown
        Sub LoadIFilter(ByVal pwcsPath As LongPtr, ByRef pFilteredSources As FILTERED_DATA_SOURCES, ByVal pUnkOuter As IUnknown, ByVal fUseDefault As Long, ByRef pFilterClsid As UUID, ByRef SearchDecSize As Long, ByRef pwcsSearchDesc As LongPtr, ByRef ppIFilt As IFilter)
        Sub LoadIFilterFromStorage(ByVal pStg As IStorage, ByVal pUnkOuter As IUnknown, ByVal pwcsOverride As LongPtr, ByVal fUseDefault As Long, ByRef pFilterClsid As UUID, ByRef SearchDecSize As Long, ByRef pwcsSearchDesc As LongPtr, ByRef ppIFilt As IFilter)
        Sub LoadIFilterFromStream(ByVal pStm As IStream, ByRef pFilteredSources As FILTERED_DATA_SOURCES, ByVal pUnkOuter As IUnknown, ByVal fUseDefault As Long, ByRef pFilterClsid As UUID, ByRef SearchDecSize As Long, ByRef pwcsSearchDesc As LongPtr, ByRef ppIFilt As IFilter)
    End Interface

    [ InterfaceId ("40BDBD34-780B-48D3-9BB6-12EBD4AD2E75") ]
    [ Description ("ILoadFilterWithPrivateComActivation Interface") ]
    [ OleAutomation (False) ]
    Interface ILoadFilterWithPrivateComActivation Extends ILoadFilter
        Sub LoadIFilterWithPrivateComActivation(ByRef filteredSources As FILTERED_DATA_SOURCES, ByVal useDefault As Long, ByRef filterClsid As UUID, ByVal isFilterPrivateComActivated As Long, ByRef filterObj As IFilter)
    End Interface

    [ InterfaceId ("0B63E318-9CCC-11D0-BCDB-00805FCCCE04") ]
    [ Description ("URL Accessor Interface") ]
    [ OleAutomation (False) ]
    Interface IUrlAccessor Extends stdole.IUnknown
        Sub AddRequestParameter(ByRef pSpec As PROPSPEC, ByRef pVar As Variant)
        Sub GetDocFormat(ByRef wszDocFormat As Integer, ByVal dwSize As Long, ByRef pdwLength As Long)
        Sub GetCLSID(ByRef pclsid As UUID)
        Sub GetHost(ByRef wszHost As Integer, ByVal dwSize As Long, ByRef pdwLength As Long)
        [ PreserveSig ]
        Function IsDirectory() As Long
        Sub GetSize(ByRef pllSize As LongLong)
        Sub GetLastModified(ByRef pftLastModified As FILETIME)
        Sub GetFileName(ByRef wszFileName As Integer, ByVal dwSize As Long, ByRef pdwLength As Long)
        Sub GetSecurityDescriptor(ByRef psd As Byte, ByVal dwSize As Long, ByRef pdwLength As Long)
        Sub GetRedirectedURL(ByRef wszRedirectedURL As Integer, ByVal dwSize As Long, ByRef pdwLength As Long)
        Sub GetSecurityProvider(ByRef pSPClsid As UUID)
        Sub BindToStream(ByRef ppStream As IStream)
        Sub BindToFilter(ByRef ppFilter As IFilter)
    End Interface

    [ InterfaceId ("C7310734-AC80-11D1-8DF3-00C04FB6EF4F") ]
    [ Description ("URL Accessor Interface") ]
    [ OleAutomation (False) ]
    Interface IUrlAccessor2 Extends IUrlAccessor
        Sub GetDisplayUrl(ByRef wszDocUrl As Integer, ByVal dwSize As Long, ByRef pdwLength As Long)
        [ PreserveSig ]
        Function IsDocument() As Long
        Sub GetCodePage(ByRef wszCodePage As Integer, ByVal dwSize As Long, ByRef pdwLength As Long)
    End Interface
    
    [ InterfaceId ("6FBC7005-0455-4874-B8FF-7439450241A3") ]
    [ Description ("URL Accessor Interface") ]
    [ OleAutomation (False) ]
    Interface IUrlAccessor3 Extends IUrlAccessor2
        Sub GetImpersonationSidBlobs(ByVal pcwszURL As LongPtr, ByRef pcSidCount As Long, ByRef ppSidBlobs As LongPtr)
    End Interface

    [ InterfaceId ("5CC51041-C8D2-41D7-BCA3-9E9E286297DC") ]
    [ Description ("URL Accessor Interface") ]
    [ OleAutomation (False) ]
    Interface IUrlAccessor4 Extends IUrlAccessor3
        Sub ShouldIndexItemContent(ByVal pfIndexContent As Long)
        Sub ShouldIndexProperty(ByRef key As PROPERTYKEY, ByVal pfIndexProperty As Long)
    End Interface

    [ InterfaceId ("C73106E1-AC80-11D1-8DF3-00C04FB6EF4F") ]
    [ Description ("Search Protocol Handler Thread Context Interface") ]
    [ OleAutomation (False) ]
    Interface ISearchProtocolThreadContext Extends stdole.IUnknown
        Sub ThreadInit()
        Sub ThreadShutdown()
        Sub ThreadIdle(ByVal dwTimeElaspedSinceLastCallInMS As Long)
    End Interface

    [ InterfaceId ("C731065D-AC80-11D1-8DF3-00C04FB6EF4F") ]
    [ Description ("Opportunistic Locking Status") ]
    [ OleAutomation (False) ]
    Interface IOpLockStatus Extends stdole.IUnknown
        Sub IsOplockValid(ByVal pfIsOplockValid As Long)
        Sub IsOplockBroken(ByVal pfIsOplockBroken As Long)
        Sub GetOplockEventHandle(ByRef phOplockEv As LongPtr)
    End Interface
    
    [ InterfaceId ("C73106BA-AC80-11D1-8DF3-00C04FB6EF4F") ]
    [ Description ("Protocol Handler Interface") ]
    [ OleAutomation (False) ]
    Interface ISearchProtocol Extends stdole.IUnknown
        Sub Init(ByRef pTimeoutInfo As TIMEOUT_INFO, ByVal pProtocolHandlerSite As IProtocolHandlerSite, ByRef pProxyInfo As PROXY_INFO)
        Sub CreateAccessor(ByVal pcwszURL As LongPtr, ByRef pAuthenticationInfo As AUTHENTICATION_INFO, ByRef pIncrementalAccessInfo As INCREMENTAL_ACCESS_INFO, ByRef pItemInfo As ITEM_INFO, ByRef ppAccessor As IUrlAccessor)
        Sub CloseAccessor(ByVal pAccessor As IUrlAccessor)
        Sub Shutdown()
    End Interface

    [ InterfaceId ("7789F0B2-B5B2-4722-8B65-5DBD150697A9") ]
    [ Description ("Protocol Handler Interface") ]
    [ OleAutomation (False) ]
    Interface ISearchProtocol2 Extends ISearchProtocol
        Sub CreateAccessorEx(ByVal pcwszURL As LongPtr, ByRef pAuthenticationInfo As AUTHENTICATION_INFO, ByRef pIncrementalAccessInfo As INCREMENTAL_ACCESS_INFO, ByRef pItemInfo As ITEM_INFO, ByRef pUserData As BLOB, ByRef ppAccessor As IUrlAccessor)
    End Interface

    [ InterfaceId ("0B63E385-9CCC-11D0-BCDB-00805FCCCE04") ]
    [ Description ("Protocol Handler Site Interface") ]
    [ OleAutomation (False) ]
    Interface IProtocolHandlerSite Extends stdole.IUnknown
        Sub GetFilter(ByRef pclsidObj As UUID, ByVal pcwszContentType As LongPtr, ByVal pcwszExtension As LongPtr, ByRef ppFilter As IFilter)
    End Interface

    [ InterfaceId ("04C18CCF-1F57-4CBD-88CC-3900F5195CE3") ]
    [ OleAutomation (False) ]
    Interface ISearchRoot Extends stdole.IUnknown
        Property Let Schedule(ByVal ppszTaskArg As LongPtr)
        Property Get Schedule() As LongPtr
        Property Let RootURL(ByVal ppszURL As LongPtr)
        Property Get RootURL() As LongPtr
        Property Let IsHierarchical(ByVal pfIsHierarchical As Long)
        Property Get IsHierarchical() As Long
        Property Let ProvidesNotifications(ByVal pfProvidesNotifications As Long)
        Property Get ProvidesNotifications() As Long
        Property Let UseNotificationsOnly(ByVal pfUseNotificationsOnly As Long)
        Property Get UseNotificationsOnly() As Long
        Property Let EnumerationDepth(ByVal pdwDepth As Long)
        Property Get EnumerationDepth() As Long
        Property Let HostDepth(ByVal pdwDepth As Long)
        Property Get HostDepth() As Long
        Property Let FollowDirectories(ByVal pfFollowDirectories As Long)
        Property Get FollowDirectories() As Long
        Property Let AuthenticationType(ByVal pAuthType As AUTH_TYPE)
        Property Get AuthenticationType() As AUTH_TYPE
        Property Let user(ByVal ppszUser As LongPtr)
        Property Get user() As LongPtr
        Property Let password(ByVal ppszPassword As LongPtr)
        Property Get password() As LongPtr
    End Interface

    [ InterfaceId ("AB310581-AC80-11D1-8DF3-00C04FB6EF52") ]
    [ OleAutomation (False) ]
    Interface IEnumSearchRoots Extends stdole.IUnknown
        Sub Next(ByVal celt As Long, ByRef rgelt As ISearchRoot, ByRef pceltFetched As Long)
        Sub Skip(ByVal celt As Long)
        Sub Reset()
        Function Clone() As IEnumSearchRoots
    End Interface
    
    [ InterfaceId ("AB310581-AC80-11D1-8DF3-00C04FB6EF53") ]
    [ OleAutomation (False) ]
    Interface ISearchScopeRule Extends stdole.IUnknown
        Property Get PatternOrURL() As LongPtr
        Property Get IsIncluded() As Long
        Property Get IsDefault() As Long
        Property Get FollowFlags() As Long
    End Interface

    [ InterfaceId ("AB310581-AC80-11D1-8DF3-00C04FB6EF54") ]
    [ OleAutomation (False) ]
    Interface IEnumSearchScopeRules Extends stdole.IUnknown
        Sub Next(ByVal celt As Long, ByRef pprgelt As ISearchScopeRule, ByRef pceltFetched As Long)
        Sub Skip(ByVal celt As Long)
        Sub Reset()
        Function Clone() As IEnumSearchScopeRules
    End Interface
    
    [ InterfaceId ("AB310581-AC80-11D1-8DF3-00C04FB6EF55") ]
    [ OleAutomation (False) ]
    Interface ISearchCrawlScopeManager Extends stdole.IUnknown
        Sub AddDefaultScopeRule(ByVal pszUrl As LongPtr, ByVal fInclude As Long, ByVal fFollowFlags As Long)
        Sub AddRoot(ByVal pSearchRoot As ISearchRoot)
        Sub RemoveRoot(ByVal pszUrl As LongPtr)
        Function EnumerateRoots() As IEnumSearchRoots
        Sub AddHierarchicalScope(ByVal pszUrl As LongPtr, ByVal fInclude As Long, ByVal fDefault As Long, ByVal fOverrideChildren As Long)
        Sub AddUserScopeRule(ByVal pszUrl As LongPtr, ByVal fInclude As Long, ByVal fOverrideChildren As Long, ByVal fFollowFlags As Long)
        Sub RemoveScopeRule(ByVal pszRule As LongPtr)
        Function EnumerateScopeRules() As IEnumSearchScopeRules
        Function HasParentScopeRule(ByVal pszUrl As LongPtr) As Long
        Function HasChildScopeRule(ByVal pszUrl As LongPtr) As Long
        Function IncludedInCrawlScope(ByVal pszUrl As LongPtr) As Long
        Sub IncludedInCrawlScopeEx(ByVal pszUrl As LongPtr, ByVal pfIsIncluded As Long, ByRef pReason As CLUSION_REASON)
        Sub RevertToDefaultScopes()
        Sub SaveAll()
        Function GetParentScopeVersionId(ByVal pszUrl As LongPtr) As Long
        Sub RemoveDefaultScopeRule(ByVal pszUrl As LongPtr)
    End Interface

    [ InterfaceId ("6292F7AD-4E19-4717-A534-8FC22BCD5CCD") ]
    [ OleAutomation (False) ]
    Interface ISearchCrawlScopeManager2 Extends ISearchCrawlScopeManager
        Sub GetVersion(ByRef plVersion As Long, ByRef phFileMapping As LongPtr)
    End Interface
    
    [ InterfaceId ("AB310581-AC80-11D1-8DF3-00C04FB6EF58") ]
    [ OleAutomation (False) ]
    Interface ISearchItemsChangedSink Extends stdole.IUnknown
        Sub StartedMonitoringScope(ByVal pszUrl As LongPtr)
        Sub StoppedMonitoringScope(ByVal pszUrl As LongPtr)
        Sub OnItemsChanged(ByVal dwNumberOfChanges As Long, ByRef rgDataChangeEntries As SEARCH_ITEM_CHANGE, ByRef rgdwDocIds As Long, ByRef rghrCompletionCodes As Long)
    End Interface

    [ InterfaceId ("A2FFDF9B-4758-4F84-B729-DF81A1A0612F") ]
    [ OleAutomation (False) ]
    Interface ISearchPersistentItemsChangedSink Extends stdole.IUnknown
        Sub StartedMonitoringScope(ByVal pszUrl As LongPtr)
        Sub StoppedMonitoringScope(ByVal pszUrl As LongPtr)
        Sub OnItemsChanged(ByVal dwNumberOfChanges As Long, ByRef DataChangeEntries As SEARCH_ITEM_PERSISTENT_CHANGE, ByRef hrCompletionCodes As Long)
    End Interface

    [ InterfaceId ("AB310581-AC80-11D1-8DF3-00C04FB6EF65") ]
    [ OleAutomation (False) ]
    Interface ISearchViewChangedSink Extends stdole.IUnknown
        Sub OnChange(ByRef pdwDocID As Long, ByRef pChange As SEARCH_ITEM_CHANGE, ByVal pfInView As Long)
    End Interface
    
    [ InterfaceId ("B5702E61-E75C-4B64-82A1-6CB4F832FCCF") ]
    [ Description ("Search Inline Notification Site Client Interface") ]
    [ OleAutomation (False) ]
    Interface ISearchNotifyInlineSite Extends stdole.IUnknown
        Sub OnItemIndexedStatusChange(ByVal sipStatus As SEARCH_INDEXING_PHASE, ByVal dwNumEntries As Long, ByRef rgItemStatusEntries As SEARCH_ITEM_INDEXING_STATUS)
        Sub OnCatalogStatusChange(ByRef guidCatalogResetSignature As UUID, ByRef guidCheckPointSignature As UUID, ByVal dwLastCheckPointNumber As Long)
    End Interface

    [ InterfaceId ("AB310581-AC80-11D1-8DF3-00C04FB6EF50") ]
    [ OleAutomation (False) ]
    Interface ISearchCatalogManager Extends stdole.IUnknown
        Property Get Name() As LongPtr
        Function GetParameter(ByVal pszName As LongPtr) As Variant
        Sub SetParameter(ByVal pszName As LongPtr, ByRef pValue As Variant)
        Sub GetCatalogStatus(ByRef pStatus As CatalogStatus, ByRef pPausedReason As CatalogPausedReason)
        Sub Reset()
        Sub Reindex()
        Sub ReindexMatchingURLs(ByVal pszPattern As LongPtr)
        Sub ReindexSearchRoot(ByVal pszRootURL As LongPtr)
        Property Let ConnectTimeout(ByVal pdwConnectTimeout As Long)
        Property Get ConnectTimeout() As Long
        Property Let DataTimeout(ByVal pdwDataTimeout As Long)
        Property Get DataTimeout() As Long
        Function NumberOfItems() As Long
        Sub NumberOfItemsToIndex(ByRef plIncrementalCount As Long, ByRef plNotificationQueue As Long, ByRef plHighPriorityQueue As Long)
        Function URLBeingIndexed() As LongPtr
        Function GetURLIndexingState(ByVal pszUrl As LongPtr) As Long
        Function GetPersistentItemsChangedSink() As ISearchPersistentItemsChangedSink
        Sub RegisterViewForNotification(ByVal pszView As LongPtr, ByVal pViewChangedSink As ISearchViewChangedSink, ByRef pdwCookie As Long)
        Sub GetItemsChangedSink(ByVal pISearchNotifyInlineSite As ISearchNotifyInlineSite, ByRef riid As UUID, ByRef ppv As Any, ByRef pGUIDCatalogResetSignature As UUID, ByRef pGUIDCheckPointSignature As UUID, ByRef pdwLastCheckPointNumber As Long)
        Sub UnregisterViewForNotification(ByVal dwCookie As Long)
        Sub SetExtensionClusion(ByVal pszExtension As LongPtr, ByVal fExclude As Long)
        Function EnumerateExcludedExtensions() As IEnumString
        Function GetQueryHelper() As ISearchQueryHelper
        Property Let DiacriticSensitivity(ByVal pfDiacriticSensitive As Long)
        Property Get DiacriticSensitivity() As Long
        Function GetCrawlScopeManager() As ISearchCrawlScopeManager
    End Interface
    [ InterfaceId ("7AC3286D-4D1D-4817-84FC-C1C85E3AF0D9") ]
    [ OleAutomation (False) ]
    Interface ISearchCatalogManager2 Extends ISearchCatalogManager
        Sub PrioritizeMatchingURLs(ByVal pszPattern As LongPtr, ByVal dwPrioritizeFlags As PRIORITIZE_FLAGS)
    End Interface
    
    
    [ InterfaceId ("AB310581-AC80-11D1-8DF3-00C04FB6EF63") ]
    [ OleAutomation (False) ]
    Interface ISearchQueryHelper Extends stdole.IUnknown
        Property Get ConnectionString() As LongPtr
        Property Let QueryContentLocale(ByVal pLcid As Long)
        Property Get QueryContentLocale() As Long
        Property Let QueryKeywordLocale(ByVal pLcid As Long)
        Property Get QueryKeywordLocale() As Long
        Property Let QueryTermExpansion(ByVal pExpandTerms As SEARCH_TERM_EXPANSION)
        Property Get QueryTermExpansion() As SEARCH_TERM_EXPANSION
        Property Let QuerySyntax(ByVal pQuerySyntax As SEARCH_QUERY_SYNTAX)
        Property Get QuerySyntax() As SEARCH_QUERY_SYNTAX
        Property Let QueryContentProperties(ByVal ppszContentProperties As LongPtr)
        Property Get QueryContentProperties() As LongPtr
        Property Let QuerySelectColumns(ByVal ppszSelectColumns As LongPtr)
        Property Get QuerySelectColumns() As LongPtr
        Property Let QueryWhereRestrictions(ByVal ppszRestrictions As LongPtr)
        Property Get QueryWhereRestrictions() As LongPtr
        Property Let QuerySorting(ByVal ppszSorting As LongPtr)
        Property Get QuerySorting() As LongPtr
        Function GenerateSQLFromUserQuery(ByVal pszQuery As LongPtr) As LongPtr
        Sub WriteProperties(ByVal itemID As Long, ByVal dwNumberOfColumns As Long, ByRef pColumns As PROPERTYKEY, ByRef pValues As SEARCH_COLUMN_PROPERTIES, ByRef pftGatherModifiedTime As FILETIME)
        Property Let QueryMaxResults(ByVal pcMaxResults As Long)
        Property Get QueryMaxResults() As Long
    End Interface
    
    [ InterfaceId ("42811652-079D-481B-87A2-09A69ECC5F44") ]
    [ OleAutomation (False) ]
    Interface IRowsetPrioritization Extends stdole.IUnknown
        Sub SetScopePriority(ByVal Priority As PRIORITY_LEVEL, ByVal scopeStatisticsEventFrequency As Long)
        Sub GetScopePriority(ByRef Priority As PRIORITY_LEVEL, ByRef scopeStatisticsEventFrequency As Long)
        Sub GetScopeStatistics(ByRef indexedDocumentCount As Long, ByRef oustandingAddCount As Long, ByRef oustandingModifyCount As Long)
    End Interface
    
    [ InterfaceId ("1551AEA5-5D66-4B11-86F5-D5634CB211B9") ]
    [ OleAutomation (False) ]
    Interface IRowsetEvents Extends stdole.IUnknown
        Sub OnNewItem(ByRef itemID As Variant, ByVal newItemState As ROWSETEVENT_ITEMSTATE)
        Sub OnChangedItem(ByRef itemID As Variant, ByVal rowsetItemState As ROWSETEVENT_ITEMSTATE, ByVal changedItemState As ROWSETEVENT_ITEMSTATE)
        Sub OnDeletedItem(ByRef itemID As Variant, ByVal deletedItemState As ROWSETEVENT_ITEMSTATE)
        Sub OnRowsetEvent(ByVal eventType As ROWSETEVENT_TYPE, ByRef EventData As Variant)
    End Interface

    [ InterfaceId ("AB310581-AC80-11D1-8DF3-00C04FB6EF69") ]
    [ OleAutomation (False) ]
    Interface ISearchManager Extends stdole.IUnknown
        Sub GetIndexerVersionStr(ByRef ppszVersionString As LongPtr)
        Sub GetIndexerVersion(ByRef pdwMajor As Long, ByRef pdwMinor As Long)
        Function GetParameter(ByVal pszName As LongPtr) As Variant
        Sub SetParameter(ByVal pszName As LongPtr, ByRef pValue As Variant)
        Property Get ProxyName() As LongPtr
        Property Get BypassList() As LongPtr
        Sub SetProxy(ByVal sUseProxy As PROXY_ACCESS, ByVal fLocalByPassProxy As Long, ByVal dwPortNumber As Long, ByVal pszProxyName As LongPtr, ByVal pszByPassList As LongPtr)
        Function GetCatalog(ByVal pszCatalog As LongPtr) As ISearchCatalogManager
        Property Get UserAgent() As LongPtr
        Property Let UserAgent(ByVal ppszUserAgent As LongPtr)
        Property Get UseProxy() As PROXY_ACCESS
        Property Get LocalBypass() As Long
        Property Get PortNumber() As Long
    End Interface

    [ InterfaceId ("DBAB3F73-DB19-4A79-BFC0-A61A93886DDF") ]
    [ OleAutomation (False) ]
    Interface ISearchManager2 Extends ISearchManager
        Sub CreateCatalog(ByVal pszCatalog As LongPtr, ByRef ppCatalogManager As ISearchCatalogManager)
        Sub DeleteCatalog(ByVal pszCatalog As LongPtr)
    End Interface

    [ InterfaceId ("24C3CBAA-EBC1-491A-9EF1-9F6D8DEB1B8F") ]
    [ OleAutomation (False) ]
    Interface ISearchLanguageSupport Extends stdole.IUnknown
        Sub SetDiacriticSensitivity(ByVal fDiacriticSensitive As Long)
        Function GetDiacriticSensitivity() As Long
        Sub LoadWordBreaker(ByVal lcid As Long, ByRef riid As UUID, ByRef ppWordBreaker As Any, ByRef pLcidUsed As Long)
        Sub LoadStemmer(ByVal lcid As Long, ByRef riid As UUID, ByRef ppStemmer As Any, ByRef pLcidUsed As Long)
        Sub IsPrefixNormalized(ByVal pwcsQueryToken As LongPtr, ByVal cwcQueryToken As Long, ByVal pwcsDocumentToken As Long, ByVal cwcDocumentToken As Long, ByRef pulPrefixLength As Long)
    End Interface
    
    [ InterfaceId ("CC906FF0-C058-101A-B554-08002B33B0E6") ]
    [ OleAutomation (False) ]
    Interface IPhraseSink Extends stdole.IUnknown
    	Sub PutSmallPhrase(ByVal pwcNoun As LongPtr, ByVal cwcNoun As Long, ByVal pwcModifier As LongPtr, ByVal cwcModifier As Long, ByVal ulAttachmentType As Long)
        Sub PutPhrase(ByVal pwcPhrase As LongPtr, ByVal cwcPhrase As Long)
    End Interface
    
    [ InterfaceId ("CC907054-C058-101A-B554-08002B33B0E6") ]
    [ OleAutomation (False) ]
    Interface IWordSink Extends stdole.IUnknown
    	Sub PutWord(ByVal cwc As Long, ByVal pwcInBuf As LongPtr, ByVal cwcSrcLen As Long, ByVal cwcSrcPos As Long)
        Sub PutAltWord(ByVal cwc As Long, ByVal pwcInBuf As LongPtr, ByVal cwcSrcLen As Long, ByVal cwcSrcPos As Long)
        Sub StartAltPhrase()
        Sub EndAltPhrase()
        Sub PutBreak(ByVal breakType As WORDREP_BREAK_TYPE)
    End Interface
    
    [ InterfaceId ("D53552C8-77E3-101A-B552-08002B33B0E6") ]
    [ OleAutomation (False) ]
    Interface IWordBreaker Extends stdole.IUnknown
    	Sub Init(ByVal fQuery As Long, ByVal ulMaxTokenSize As Long, pfLicense As Long)
        Sub BreakText(pTextSource As TEXT_SOURCE, ByVal pWordSink As IWordSink, ByVal pPhraseSink As IPhraseSink)
        Sub ComposePhrase(ByVal pwcNoun As LongPtr, ByVal cwcNoun As LongPtr, ByVal pwcModifier As LongPtr, ByVal cwcModifier As Long, ByVal ulAttachmentType As Long, pwcPhrase As LongPtr, pcwcPhrase As Long)
        Sub GetLicenseToUse(ppwcsLicene As LongPtr)
    End Interface
    
    [ InterfaceId ("fe77c330-7f42-11ce-be57-00aa0051fe20") ]
    [ OleAutomation (False) ]
    Interface IWordFormSink Extends stdole.IUnknown
    	Sub PutAltWord(ByVal pwcInBuf As LongPtr, ByVal cwc As Long)
        Sub PutWord(ByVal pwcInBuf As LongPtr, ByVal cwc As Long)
    End Interface
    
    [ InterfaceId ("efbaf140-7f42-11ce-be57-00aa0051fe20") ]
    [ OleAutomation (False) ]
    Interface IStemmer Extends stdole.IUnknown
    	Sub Init(ByVal ulMaxTokenSize As Long, pfLicense As Long)
        Sub GenerateWordForms(ByVal pwcInBuf As LongPtr, ByVal cwc As Long, ByVal pStemSink As IWordFormSink)
        Sub GetLicenseToUse(ppwcsLicene As LongPtr)
    End Interface
    
    'CLSID_ConditionFactory 
    [ CoClassId ("E03E85B0-7BE3-4000-BA98-6C13DE9FA486") ]
    CoClass ConditionFactory
        [ Default ] Interface IConditionFactory
    End CoClass
    'CLSID_SearchFolderItemFactory 
    [ CoClassId ("14010e02-bbbd-41f0-88e3-eda371216584") ]
    CoClass SearchFolderItemFactory
        [ Default ] Interface ISearchFolderItemFactory
    End CoClass
    'CLSID_QueryParserManager 
    [ CoClassId ("5088B39A-29B4-4d9d-8245-4EE289222F66") ]
    CoClass QueryParserManager
        [ Default ] Interface IQueryParserManager
    End CoClass
    'CLSID_QueryParser 
    [ CoClassId ("B72F8FD8-0FAB-4dd9-BDBF-245A6CE1485B") ]
    CoClass QueryParser
        [ Default ] Interface IQueryParser
    End CoClass
    'CLSID_NegationCondition 
    [ CoClassId ("8DE9C74C-605A-4acd-BEE3-2B222AA2D23D") ]
    CoClass NegationCondition
        [ Default ] Interface ICondition
    End CoClass
    'CLSID_CompoundCondition 
    [ CoClassId ("116F8D13-101E-4fa5-84D4-FF8279381935") ]
    CoClass CompoundCondition
        [ Default ] Interface ICondition
    End CoClass
    'CLSID_LeafCondition 
    [ CoClassId ("52F15C89-5A17-48e1-BBCD-46A3F89C7CC2") ]
    CoClass LeafCondition
        [ Default ] Interface ICondition
    End CoClass
    'CLSID_Interval 
    [ CoClassId ("D957171F-4BF9-4de2-BCD5-C70A7CA55836") ]
    CoClass Interval
        [ Default ] Interface IInterval
    End CoClass
        
    [ CoClassId ("7D096C5F-AC08-4F1F-BEB7-5C22C517CE39") ]
    [ COMCreatable ]
    [ Description ("ISearchManager Implementation Class") ]
    CoClass CSearchManager
        [ Default ] Interface ISearchManager
    End CoClass

    [ CoClassId ("30766BD2-EA1C-4F28-BF27-0B44E2F68DB7") ]
    [ COMCreatable ]
    [ Description ("ISearchRoot Implementation Class") ]
    CoClass CSearchRoot
        [ Default ] Interface ISearchRoot
    End CoClass

    [ CoClassId ("E63DE750-3BD7-4BE5-9C84-6B4281988C44") ]
    [ COMCreatable ]
    [ Description ("ISearchScopeRule Implementation Class") ]
    CoClass CSearchScopeRule
        [ Default ] Interface ISearchScopeRule
    End CoClass

    [ CoClassId ("9E175B8D-F52A-11D8-B9A5-505054503030") ]
    [ COMCreatable ]
    CoClass FilterRegistration
        [ Default ] Interface ILoadFilter
        Interface ILoadFilterWithPrivateComActivation
    End CoClass
    
Module wdSearch
	
Public Type TEXT_SOURCE
	pfnFillTextBuffer As LongPtr
	awcBuffer As LongPtr
	iEnd As Long
	iCur As Long
End Type


Public Enum WORDREP_BREAK_TYPE
	WORDREP_BREAK_EOW = 0
	WORDREP_BREAK_EOS = 1
	WORDREP_BREAK_EOP = 2
	WORDREP_BREAK_EOC = 3
End Enum

Public Enum STRUCTURED_QUERY_RESOLVE_OPTION
	SQRO_DEFAULT = &H00000000 ' None of the below.
	SQRO_DONT_RESOLVE_DATETIME = &H00000001
	SQRO_ALWAYS_ONE_INTERVAL = &H00000002
	SQRO_DONT_SIMPLIFY_CONDITION_TREES = &H00000004
	SQRO_DONT_MAP_RELATIONS = &H00000008
	SQRO_DONT_RESOLVE_RANGES = &H00000010
	SQRO_DONT_REMOVE_UNRESTRICTED_KEYWORDS = &H00000020 ' An unrestricted keyword is a keyword that is not associated with a value to make a real condition.
	SQRO_DONT_SPLIT_WORDS = &H00000040 ' If this flag is set, groups of words that are not separated by whitespace
	'  will be kept together and it is up to the consumer of the parse result to do any
	'  additional separation. (Note that it is possible through this interface to obtain
	'  how the input string was broken into words as well as the word breaker used.)
	'  If this flag is not set, then each word will end up in a separate condition tree node.
	SQRO_IGNORE_PHRASE_ORDER = &H00000080 ' If this flag is set, a full-text query for a phrase will disregard the order of the words in the phrase.
                                        ' In this case, the query from:"foo bar" will behave like from:(foo bar).
	SQRO_ADD_VALUE_TYPE_FOR_PLAIN_VALUES = &H00000100 ' Normally only unresolved named entities have a semantic type but this flag causes a semantic type
                                                        ' to be added for leaves with a numeric, Boolean, date/time or string value.
	SQRO_ADD_ROBUST_ITEM_NAME = &H00000200 ' Work around known issues in word breakers, adding conditions on PKEY_ItemNameDisplay as needed.
End Enum

Public Enum STRUCTURED_QUERY_SYNTAX
	SQS_NO_SYNTAX
	SQS_ADVANCED_QUERY_SYNTAX
	SQS_NATURAL_QUERY_SYNTAX
End Enum

Public Enum CONDITION_TYPE
	CT_AND_CONDITION   '// AND of subconditions
	CT_OR_CONDITION    '// OR of subconditions
	CT_NOT_CONDITION   '// NOT of a single subcondition
	CT_LEAF_CONDITION  '// No subcondition: property, operation, value.
End Enum

Public Enum CONDITION_CREATION_OPTIONS
	CONDITION_CREATION_DEFAULT = &H00000000
	CONDITION_CREATION_NONE = &H00000000
	CONDITION_CREATION_SIMPLIFY = &H00000001
	CONDITION_CREATION_VECTOR_AND = &H00000002
	CONDITION_CREATION_VECTOR_OR = &H00000004
	CONDITION_CREATION_VECTOR_LEAF = &H00000008
	CONDITION_CREATION_USE_CONTENT_LOCALE = &H00000010
End Enum

Public Enum STRUCTURED_QUERY_SINGLE_OPTION
	SQSO_SCHEMA ' The value should be VT_LPWSTR and the path to a file containing a schema binary.

	SQSO_LOCALE_WORD_BREAKING ' The value must be VT_EMPTY (the default) or a VT_UI4 that is an LCID. It is used
							   ' as the locale of contents (not keywords) in the query to be searched for, when no
							   ' other information is available. The default value is the current keyboard locale.
							   ' Retrieving the value always returns a VT_UI4.

	SQSO_WORD_BREAKER ' This option is used to override the default word breaker used when identifying keywords
							 ' in queries. The default word breaker is chosen according to the language of the keywords
							 ' (cf. SQSO_LANGUAGE_KEYWORDS below). When setting this option, the value should be VT_EMPTY
							 ' for using the default word breaker, or a VT_UNKNOWN with an object supporting
							 ' the IWordBreaker interface. Retrieving the option always returns a VT_UNKNOWN with an object
							 ' supporting the IWordBreaker interface.

	SQSO_NATURAL_SYNTAX ' The value should be VT_EMPTY or VT_BOOL with VARIANT_TRUE to allow natural query
							 ' syntax (the default) or VT_BOOL with VARIANT_FALSE to allow only advanced query syntax.
							 ' Retrieving the option always returns a VT_BOOL.
							 ' This option is now deprecated, use SQSO_SYNTAX.

	SQSO_AUTOMATIC_WILDCARD ' The value should be VT_BOOL with VARIANT_TRUE to generate query expressions
							 ' as if each word in the query had a star appended to it (unless followed by punctuation
							 ' other than a parenthesis), or VT_EMPTY or VT_BOOL with VARIANT_FALSE to
							 ' use the words as they are (the default). A word-wheeling application
							 ' will generally want to set this option to true.
							 ' Retrieving the option always returns a VT_BOOL.

	SQSO_TRACE_LEVEL ' Reserved. The value should be VT_EMPTY (the default) or VT_I4.
							 ' Retrieving the option always returns a VT_I4.

	SQSO_LANGUAGE_KEYWORDS ' The value must be a VT_UI4 that is a LANGID. It defaults to the default user UI language.

	SQSO_SYNTAX ' The value must be a VT_UI4 that is a STRUCTURED_QUERY_SYNTAX value.
							 ' It defaults to SQS_NATURAL_QUERY_SYNTAX.

	SQSO_TIME_ZONE ' The value must be a VT_BLOB that is a copy of a TIME_ZONE_INFORMATION structure.
							 ' It defaults to the current time zone.

	SQSO_IMPLICIT_CONNECTOR ' This setting decides what connector should be assumed between conditions when none is specified.
							 ' The value must be a VT_UI4 that is a CONDITION_TYPE. Only CT_AND_CONDITION and CT_OR_CONDITION
							 ' are valid. It defaults to CT_AND_CONDITION.

	SQSO_CONNECTOR_CASE ' This setting decides whether there are special requirements on the case of connector keywords (such
							 ' as AND or OR). The value must be a VT_UI4 that is a CASE_REQUIREMENT value.
							 ' It defaults to CASE_REQUIREMENT_UPPER_IF_AQS.
End Enum

Public Enum STRUCTURED_QUERY_MULTIOPTION
	SQMO_VIRTUAL_PROPERTY   ' The key should be property name P. The value should be a
							 ' VT_UNKNOWN with an IEnumVARIANT which has two values: a VT_BSTR that is another
							 ' property name Q and a VT_I4 that is a CONDITION_OPERATION cop. A predicate with
							 ' property name P, some operation and a value V will then be replaced by a predicate
							 ' with property name Q, operation cop and value V before further processing happens.

	SQMO_DEFAULT_PROPERTY   ' The key should be a value type name V. The value should be a
							 ' VT_LPWSTR with a property name P. A predicate with no property name and a value of type
							 ' V (or any subtype of V) will then use property P.

	SQMO_GENERATOR_FOR_TYPE ' The key should be a value type name V. The value should be a
							 ' VT_UNKNOWN with a IConditionGenerator G. The GenerateForLeaf method of
							 ' G will then be applied to any predicate with value type V and if it returns a query
							 ' expression, that will be used. If it returns NULL, normal processing will be used
							 ' instead.

	SQMO_MAP_PROPERTY       ' The key should be a property name P. The value should be a VT_VECTOR|VT_LPWSTR,
							 ' where each string is a property name. The count must be at least one. This "map" will be
							 ' added to those of the loaded schema and used during resolution. A second call with the
							 ' same key will replace the current map. If the value is VT_NULL, the map will be removed.
End Enum

Public Enum STRUCTURED_QUERY_PARSE_ERROR
	SQPE_NONE
	SQPE_EXTRA_OPENING_PARENTHESIS ' A spurious (
	SQPE_EXTRA_CLOSING_PARENTHESIS ' A spurious )
	SQPE_IGNORED_MODIFIER ' A spurious NOT, <, >=, etc.
	SQPE_IGNORED_CONNECTOR ' A spurious AND or OR.
	SQPE_IGNORED_KEYWORD ' A spurious property.
	SQPE_UNHANDLED ' Something else.
End Enum

Public Enum CASE_REQUIREMENT
	CASE_REQUIREMENT_ANY ' Keywords are recognized regardless of case.
	CASE_REQUIREMENT_UPPER_IF_AQS ' Keywords are recognized only if uppercase, when AQS is the syntax, regardless of case otherwise.
End Enum

Public Enum INTERVAL_LIMIT_KIND
	ILK_EXPLICIT_INCLUDED
	ILK_EXPLICIT_EXCLUDED
	ILK_NEGATIVE_INFINITY
	ILK_POSITIVE_INFINITY
End Enum

Public Enum QUERY_PARSER_MANAGER_OPTION
	QPMO_SCHEMA_BINARY_NAME                 ' The value must be VT_LPWSTR and be the name of the file containing a schema binary.
											 ' The default value depends on the catalog. For the SystemIndex catalog it is
											 ' "StructuredQuerySchema.bin".

	QPMO_PRELOCALIZED_SCHEMA_BINARY_PATH     ' The value must be either a VT_BOOL or a VT_LPWSTR. If it is a VT_BOOL and the value
											 ' IS VARIANT_FALSE, a prelocalized schema binary path will not be used. If it is VARIANT_TRUE,
											 ' a default prelocalized schema binary path will be used, depending on the catalog.
											 ' If it is a VT_LPWSTR, the value should be a full folder part (though an LCID may be
											 ' appended to it according to the QPMO_APPEND_LCID_TO_LOCALIZED_PATH setting).
											 ' The default is VT_BOOL with VARIANT_TRUE; the actual path is
											 ' "%COMMONAPPDATA%\Microsoft\Windows" (note though that environment variables in the
											 ' given string will not be expanded).

	QPMO_UNLOCALIZED_SCHEMA_BINARY_PATH      ' The value must be VT_LPWSTR and be the full path of a folder in which an unlocalized
											 ' schema binary resides and can be read.
											 ' The default value is the expansion of "%SYSTEMROOT%\System32" (note though
											 ' that environment variables in the given string will not be expanded).

	QPMO_LOCALIZED_SCHEMA_BINARY_PATH        ' The value must be VT_LPWSTR and be the full path of a folder in which a localized
											 ' schema binary can be read, or written as necessary.
											 ' The default value is "%LOCALAPPDATA%\Microsoft\Windows" (note though
											 ' that environment variables in the given string will not be expanded).

	QPMO_APPEND_LCID_TO_LOCALIZED_PATH       ' The value must be a VT_BOOL. If it is VARIANT_TRUE, then the path(s) for localized
											 ' binary will have "\<LCID>" appended to it, e.g., "\1042". The default is VARIANT_TRUE.

	QPMO_LOCALIZER_SUPPORT                   ' The value must be a VT_UNKNOWN with an object supporting ISchemaLocalizerSupport.
											 ' It will be used instead of the default localizer support object which expects "global"
											 ' mnemonics to be on the form "@foo.dll,-12345" and will return the resourec with ID 12345
End Enum

Public Enum NAMED_ENTITY_CERTAINTY
	NEC_LOW    '// It could be this named entity but additional evidence advisable.
	NEC_MEDIUM '// It quite likely is this named entity; it is OK to use it.
	NEC_HIGH   '// It almost certainly is this named entity; it should be ok to toss other possibilities.
End Enum


Public Type FULLPROPSPEC
	guidPropSet As UUID
	psProperty As PROPSPEC
End Type

Public Enum IFILTER_INIT
	IFILTER_INIT_CANON_PARAGRAPHS = 1
	IFILTER_INIT_HARD_LINE_BREAKS = 2
	IFILTER_INIT_CANON_HYPHENS = 4
	IFILTER_INIT_CANON_SPACES = 8
	IFILTER_INIT_APPLY_INDEX_ATTRIBUTES = 16
	IFILTER_INIT_APPLY_OTHER_ATTRIBUTES = 32
	IFILTER_INIT_APPLY_CRAWL_ATTRIBUTES = 256
	IFILTER_INIT_INDEXING_ONLY = 64
	IFILTER_INIT_SEARCH_LINKS = 128
	IFILTER_INIT_FILTER_OWNED_VALUE_OK = 512
	IFILTER_INIT_FILTER_AGGRESSIVE_BREAK = 1024
	IFILTER_INIT_DISABLE_EMBEDDED = 2048
	IFILTER_INIT_EMIT_FORMATTING = 4096
End Enum

Public Enum IFILTER_FLAGS
	IFILTER_FLAGS_OLE_PROPERTIES = 1
End Enum

Public Enum CHUNKSTATE
	CHUNK_TEXT = &H1
	CHUNK_VALUE = &H2
	CHUNK_FILTER_OWNED_VALUE = &H4
End Enum

Public Enum CHUNK_BREAKTYPE
	CHUNK_NO_BREAK = 0
	CHUNK_EOW = 1
	CHUNK_EOS = 2
	CHUNK_EOP = 3
	CHUNK_EOC = 4
End Enum

Public Type FILTERREGION
	idChunk As Long
	cwcStart As Long
	cwcExtent As Long
End Type

Public Type STAT_CHUNK
	idChunk As Long
	breakType As CHUNK_BREAKTYPE
	flags As CHUNKSTATE
	locale As Long
	attribute As FULLPROPSPEC
	idChunkSource As Long
	cwcStartSource As Long
	cwcLenSource As Long
End Type

Public Type FILTERED_DATA_SOURCES
	pwcsExtension As LongPtr ' file extension
	pwcsMime As LongPtr ' mime type string
	pClsid As LongPtr
	pwcsOverride As LongPtr
End Type

Public Type BLOB
	cbSize As Long
	pBlobData As LongPtr
End Type


[ PackingAlignment (8) ]
Public Type TIMEOUT_INFO
	dwSize As Long '  Actual size of structure (bytes)
	dwConnectTimeout As Long '  Timeout for connection (seconds)
	dwDataTimeout As Long '  Timeout for data (seconds)
End Type

Public Enum PROXY_ACCESS
	PROXY_ACCESS_PRECONFIG = 0
	PROXY_ACCESS_DIRECT = 1
	PROXY_ACCESS_PROXY = 2
End Enum

[ PackingAlignment (8) ]
Public Type PROXY_INFO
	dwSize As Long '  Actual size of structure (bytes)
	pcwszUserAgent As LongPtr '
	paUseProxy As PROXY_ACCESS '
	fLocalBypass As Long '  Bypass proxy for local address
	dwPortNumber As Long
	pcwszProxyName As LongPtr
	pcwszBypassList As LongPtr
End Type

Public Enum AUTH_TYPE
	eAUTH_TYPE_ANONYMOUS = 0
	eAUTH_TYPE_NTLM = 1
	eAUTH_TYPE_BASIC = 2
End Enum

[ PackingAlignment (8) ]
Public Type AUTHENTICATION_INFO
	dwSize As Long '  Actual size of structure (bytes)
	atAuthenticationType As AUTH_TYPE '  Anonymous, Basic, or NTLM
	pcwszUser As LongPtr
	pcwszPassword As LongPtr
End Type

[ PackingAlignment (8) ]
Public Type INCREMENTAL_ACCESS_INFO
	dwSize As Long '  Actual size of structure (bytes)
	ftLastModifiedTime As FILETIME
End Type

[ PackingAlignment (8) ]
Public Type ITEM_INFO
	dwSize As Long '  Actual size of structure (bytes)
	pcwszFromEMail As LongPtr
	pcwszApplicationName As LongPtr
	pcwszCatalogName As LongPtr
	pcwszContentClass As LongPtr
End Type

Public Enum FOLLOW_FLAGS
	' 
	'  Whether or not to index complex URLs (contains '?')
	' 
	FF_INDEXCOMPLEXURLS = &H00000001
	' 
	'  Suppress indexing this URL (i.e., follow but do not index)
	' 
	FF_SUPPRESSINDEXING = &H00000002
End Enum

Public Enum CLUSION_REASON
	' 
	'  By unknown scope - i.e., there is no scope that would include or
	'  exclude this URL so it is by default excluded
	' 
	CLUSIONREASON_UNKNOWNSCOPE = 0
	' 
	'  By default rule
	' 
	CLUSIONREASON_DEFAULT = 1
	' 
	'  By a user rule
	' 
	CLUSIONREASON_USER = 2
	' 
	'  By group policy
	' 
	CLUSIONREASON_GROUPPOLICY = 3
End Enum

Public Enum SEARCH_KIND_OF_CHANGE
	SEARCH_CHANGE_ADD = 0
	SEARCH_CHANGE_DELETE = 1
	SEARCH_CHANGE_MODIFY = 2
	' 
	'  Item has been moved or renamed
	' 
	SEARCH_CHANGE_MOVE_RENAME = 3
	' 
	'  This is a directory--optimization since crawl needs to define it
	' 
	SEARCH_CHANGE_SEMANTICS_DIRECTORY = &H40000
	' 
	'  Only index directory properties
	' 
	SEARCH_CHANGE_SEMANTICS_SHALLOW = &H80000
	' 
	'  Update security only--optimization
	' 
	SEARCH_CHANGE_SEMANTICS_UPDATE_SECURITY = &H400000
End Enum

Public Enum SEARCH_NOTIFICATION_PRIORITY
	SEARCH_NORMAL_PRIORITY = 0
	SEARCH_HIGH_PRIORITY = 1
End Enum

Public Type SEARCH_ITEM_CHANGE
	Change As SEARCH_KIND_OF_CHANGE
	' High priority is done before normal priority is done before incrementals
	Priority As SEARCH_NOTIFICATION_PRIORITY
	pUserData As LongPtr
	lpwszURL As LongPtr
	lpwszOldURL As LongPtr 'valid only for moves
End Type

Public Type SEARCH_ITEM_PERSISTENT_CHANGE
	Change As SEARCH_KIND_OF_CHANGE
	URL As LongPtr
	OldURL As LongPtr 'valid only for moves
	' High priority is done before normal priority is done before incrementals
	Priority As SEARCH_NOTIFICATION_PRIORITY
End Type

Public Enum SEARCH_INDEXING_PHASE
	SEARCH_INDEXING_PHASE_GATHERER = 0
	SEARCH_INDEXING_PHASE_QUERYABLE = 1
	SEARCH_INDEXING_PHASE_PERSISTED = 2
End Enum

Public Type SEARCH_ITEM_INDEXING_STATUS
	dwDocID As Long
	hrIndexingStatus As Long
End Type

Public Enum CatalogStatus
	' 
	'  No indexing is needed
	' 
	CATALOG_STATUS_IDLE = 0
	' 
	'  Indexer is paused, queries are still OK
	' 
	CATALOG_STATUS_PAUSED = 1
	' 
	'  Indexer is recovering--no indexing or querying
	' 
	CATALOG_STATUS_RECOVERING = 2
	' 
	'  Indexer is doing a full crawl and indexing everything
	' 
	CATALOG_STATUS_FULL_CRAWL = 3
	' 
	'  Indexer is checking to see if anything needs to be indexed because it has changed
	' 
	CATALOG_STATUS_INCREMENTAL_CRAWL = 4
	' 
	'  Indexer is processing notification queue which is done before resuming any crawl.
	' 
	CATALOG_STATUS_PROCESSING_NOTIFICATIONS = 5
	' 
	'  Indexer is shutting down and is not indexing and can't be queried.
	' 
	CATALOG_STATUS_SHUTTING_DOWN = 6
End Enum

Public Enum CatalogPausedReason
	' 
	'  Not paused
	' 
	CATALOG_PAUSED_REASON_NONE = 0
	' 
	'  Paused due to high I/O
	' 
	CATALOG_PAUSED_REASON_HIGH_IO = 1
	' 
	'  Paused due to high CPU usage
	' 
	CATALOG_PAUSED_REASON_HIGH_CPU = 2
	' 
	'  Paused due to high NTF rate
	' 
	CATALOG_PAUSED_REASON_HIGH_NTF_RATE = 3
	' 
	'  Paused due to low battery
	' 
	CATALOG_PAUSED_REASON_LOW_BATTERY = 4
	' 
	'  Paused due to low memory
	' 
	CATALOG_PAUSED_REASON_LOW_MEMORY = 5
	' 
	'  Paused due to low disk space
	' 
	CATALOG_PAUSED_REASON_LOW_DISK = 6
	' 
	'  Paused due to need for delayed recovery
	' 
	CATALOG_PAUSED_REASON_DELAYED_RECOVERY = 7
	' 
	'  Paused due to user activity on the machine
	' 
	CATALOG_PAUSED_REASON_USER_ACTIVE = 8
	' 
	'  Paused by external request
	' 
	CATALOG_PAUSED_REASON_EXTERNAL = 9
	' 
	'  Paused by upgrading
	' 
	CATALOG_PAUSED_REASON_UPGRADING = 10
End Enum

Public Enum PRIORITIZE_FLAGS
	'  In prioritization, kick off a retry of items that have failed indexing with the
	'  requested pattern.
	PRIORITIZE_FLAG_RETRYFAILEDITEMS = &H00000001
	'  Valid only in combination with PRIORITIZE_FLAG_RETRYFAILEDITEMS.
	'  Normally, items are no longer retried after a series of failed indexing attempts.
	'  This flag indicates that those items should also be re-attempted.
	PRIORITIZE_FLAG_IGNOREFAILURECOUNT = &H00000002
End Enum

Public Enum SEARCH_TERM_EXPANSION
	'  No Expansion
	SEARCH_TERM_NO_EXPANSION = 0
	'  All search terms become <term>*
	SEARCH_TERM_PREFIX_ALL = 1
	'  Stem expansion is applied to all terms
	SEARCH_TERM_STEM_ALL = 2
End Enum

Public Enum SEARCH_QUERY_SYNTAX
	'  No query syntax in user input
	SEARCH_NO_QUERY_SYNTAX = 0
	'  Understand AQS (from:chris)
	SEARCH_ADVANCED_QUERY_SYNTAX = 1
	'  Understand NQS (mail from chris) in addition to AQS.
	'  NOTE: This is not enough to allow a semantic canvas.  For
	'  that I think people either have to host our query control
	'  or go to SemThing directly.
	SEARCH_NATURAL_QUERY_SYNTAX = 2
End Enum

Public Type SEARCH_COLUMN_PROPERTIES
	Value As Variant
	lcid As Long
End Type

Public Enum PRIORITY_LEVEL
	PRIORITY_LEVEL_FOREGROUND = 0 ' process items in the scope first as quickly as possible
	PRIORITY_LEVEL_HIGH = 1 ' process items in the scope first at the normal rate
	PRIORITY_LEVEL_LOW = 2 ' process items in this scope before those at the normal rate, but after any other prioritization requests
	PRIORITY_LEVEL_DEFAULT = 3 ' process items at the normal indexer rate
End Enum

Public Enum ROWSETEVENT_ITEMSTATE
	ROWSETEVENT_ITEMSTATE_NOTINROWSET = 0 ' The item is definitely not in the rowset
	ROWSETEVENT_ITEMSTATE_INROWSET = 1 ' The item is definitely contained within the rowset
	ROWSETEVENT_ITEMSTATE_UNKNOWN = 2 ' The item MAY be in the rowset
End Enum

Public Enum ROWSETEVENT_TYPE
	ROWSETEVENT_TYPE_DATAEXPIRED = 0 ' Sent when the data backing the rowset has expired.  A new rowset should be requested
	ROWSETEVENT_TYPE_FOREGROUNDLOST = 1 ' Sent when a request for foreground prioritization has been automatically downgraded to high
	ROWSETEVENT_TYPE_SCOPESTATISTICS = 2 ' Sent on an interval of roughly scopeStatisticsEventFrequency when there is a statistics change. Also sent once when all stats go to zero.
End Enum

Public Const sCLSID_ConditionFactory = "new: {E03E85B0-7BE3-4000-BA98-6C13DE9FA486}"
Public Const sCLSID_SearchFolderItemFactory = "new: {14010e02-bbbd-41f0-88e3-eda371216584}"
Public Const sCLSID_QueryParserManager = "new: {5088B39A-29B4-4d9d-8245-4EE289222F66}"
Public Const sCLSID_QueryParser = "new: {B72F8FD8-0FAB-4dd9-BDBF-245A6CE1485B}"
Public Const sCLSID_NegationCondition = "new: {8DE9C74C-605A-4acd-BEE3-2B222AA2D23D}"
Public Const sCLSID_CompoundCondition = "new: {116F8D13-101E-4fa5-84D4-FF8279381935}"
Public Const sCLSID_LeafCondition = "new: {52F15C89-5A17-48e1-BBCD-46A3F89C7CC2}"
Public Const sCLSID_Interval = "new: {D957171F-4BF9-4de2-BCD5-C70A7CA55836}"

Public Const sCLSID_CSearchManager = "new: {7D096C5F-AC08-4F1F-BEB7-5C22C517CE39"
Public Const sCLSID_CSearchRoot = "new: {30766BD2-EA1C-4F28-BF27-0B44E2F68DB7}"
Public Const sCLSID_CSearchScopeRule = "new: {E63DE750-3BD7-4BE5-9C84-6B4281988C44}"
Public Const sCLSID_FilterRegistration = "new: {9E175B8D-F52A-11D8-B9A5-505054503030}"



End Module