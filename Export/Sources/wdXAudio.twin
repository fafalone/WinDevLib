'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

'WinDevLib - wdXAudio :: XAudio2

' xapo.h - 100%
' xapobase.h - minimal; mostly language-unsupported
' xaudio2.h - 100%
' xaudio2fx.h - 100%
' x3daudio.h - 100%
' hrtfapoapi.h - 100%

#If WDL_NO_DIRECTX = 0 Then

[InterfaceId("A410B984-9839-4819-A0BE-2856AE6B3ADB")]
[OleAutomation(False)]
Interface IXAPO Extends IUnknown
    Sub GetRegistrationProperties(ByRef ppRegistrationProperties As LongPtr)
    Sub IsInputFormatSupported(ByRef pOutputFormat As WAVEFORMATEX, ByRef pRequestedInputFormat As WAVEFORMATEX, ByRef ppSupportedInputFormat As LongPtr)
    Sub IsOutputFormatSupported(ByRef pInputFormat As WAVEFORMATEX, ByRef pRequestedOutputFormat As WAVEFORMATEX, ByRef ppSupportedOutputFormat As LongPtr)
    Sub Initialize(pData As Any, ByVal DataByteSize As Long)
    [PreserveSig]
    Sub Reset()
    Sub LockForProcess(ByVal InputLockedParameterCount As Long, ByRef pInputLockedParameters As XAPO_LOCKFORPROCESS_PARAMETERS, ByVal OutputLockedParameterCount As Long, ByRef pOutputLockedParameters As XAPO_LOCKFORPROCESS_PARAMETERS)
    [PreserveSig]
    Sub UnlockForProcess()
    [PreserveSig]
    Sub Process(ByVal InputProcessParameterCount As Long, ByRef pInputProcessParameters As XAPO_PROCESS_BUFFER_PARAMETERS, ByVal OutputProcessParameterCount As Long, ByRef pOutputProcessParameters As XAPO_PROCESS_BUFFER_PARAMETERS, ByVal IsEnabled As BOOL)
    [PreserveSig]
    Function CalcInputFrames(ByVal OutputFrameCount As Long) As Long
    [PreserveSig]
    Function CalcOutputFrames(ByVal InputFrameCount As Long) As Long
End Interface

[InterfaceId("26D95C66-80F2-499A-AD54-5AE7F01C6D98")]
[OleAutomation(False)]
Interface IXAPOParameters Extends IUnknown
    [PreserveSig]
    Sub SetParameters(pParameters As Any, ByVal ParameterByteSize As Long)
    [PreserveSig]
    Sub GetParameters(pParameters As Any, ByVal ParameterByteSize As Long)
End Interface

#If WDL_XAUDIO8 = 0 Then
[InterfaceId("2B02E3CF-2E0B-4ec3-BE45-1B2A3FE7210D")]
#Else
[InterfaceId("60d8dac8-5aa1-4e8e-b597-2f5e2883d484")]
#End If
[OleAutomation(False)]
Interface IXAudio2 Extends IUnknown
    Sub RegisterForCallbacks(ByVal pCallback As IXAudio2EngineCallback)
    [PreserveSig]
    Sub UnregisterForCallbacks(ByVal pCallback As IXAudio2EngineCallback)
    Sub CreateSourceVoice(ByRef ppSourceVoice As IXAudio2SourceVoice, ByRef pSourceFormat As WAVEFORMATEX, ByVal Flags As Long, ByVal MaxFrequencyRatio As Single, ByVal pCallback As IXAudio2VoiceCallback, ByRef pSendList As XAUDIO2_VOICE_SENDS, ByRef pEffectChain As XAUDIO2_EFFECT_CHAIN)
    Sub CreateSubmixVoice(ByRef ppSubmixVoice As IXAudio2SubmixVoice, ByVal InputChannels As Long, ByVal InputSampleRate As Long, ByVal Flags As Long, ByVal ProcessingStage As Long, ByRef pSendList As XAUDIO2_VOICE_SENDS, ByRef pEffectChain As XAUDIO2_EFFECT_CHAIN)
    Sub CreateMasteringVoice(ByRef ppMasteringVoice As IXAudio2MasteringVoice, ByVal InputChannels As Long, ByVal InputSampleRate As Long, ByVal Flags As Long, ByVal szDeviceId As LongPtr, ByRef pEffectChain As XAUDIO2_EFFECT_CHAIN, Optional ByVal StreamCategory As AUDIO_STREAM_CATEGORY = AudioCategory_GameEffects)
    Sub StartEngine()
    [PreserveSig]
    Sub StopEngine()
    Sub CommitChanges(ByVal OperationSet As Long)
    [PreserveSig]
    Sub GetPerformanceData(ByRef pPerfData As XAUDIO2_PERFORMANCE_DATA)
    [PreserveSig]
    Sub SetDebugConfiguration(ByRef pDebugConfiguration As XAUDIO2_DEBUG_CONFIGURATION, ByVal pReserved As LongPtr)
End Interface
[InterfaceId("84ac29bb-d619-44d2-b197-e4acf7df3ed6")]
[OleAutomation(False)]
Interface IXAudio2Extension Extends IUnknown
    [PreserveSig] Sub GetProcessingQuantum(ByRef quantumNumerator As Long, ByRef quantumDenominator As Long)
    [PreserveSig] Sub GetProcessor(ByRef processor As XAUDIO2_PROCESSOR)
End Interface

' [InterfaceId("unknown")]
[OleAutomation(False)]
Interface IXAudio2Voice Extends Nothing
    [PreserveSig] Sub GetVoiceDetails(ByRef pVoiceDetails As XAUDIO2_VOICE_DETAILS)
    Sub SetOutputVoices(ByRef pSendList As XAUDIO2_VOICE_SENDS)
    Sub SetEffectChain(ByRef pEffectChain As XAUDIO2_EFFECT_CHAIN)
    Sub EnableEffect(ByVal EffectIndex As Long, ByVal OperationSet As XAudio2OpSet)
    Sub DisableEffect(ByVal EffectIndex As Long, ByVal OperationSet As XAudio2OpSet)
    [PreserveSig] Sub GetEffectState(ByVal EffectIndex As Long, ByRef pEnabled As BOOL)
    Sub SetEffectParameters(ByVal EffectIndex As Long, pParameters As Any, ByVal ParametersByteSize As Long, ByVal OperationSet As XAudio2OpSet)
    Sub GetEffectParameters(ByVal EffectIndex As Long, pParameters As Any, ByVal ParametersByteSize As Long)
    Sub SetFilterParameters(ByRef pParameters As XAUDIO2_FILTER_PARAMETERS, ByVal OperationSet As XAudio2OpSet)
    [PreserveSig] Sub GetFilterParameters(ByRef pParameters As XAUDIO2_FILTER_PARAMETERS)
    Sub SetOutputFilterParameters(ByVal pDestinationVoice As IXAudio2Voice, ByRef pParameters As XAUDIO2_FILTER_PARAMETERS, ByVal OperationSet As XAudio2OpSet)
    [PreserveSig] Sub GetOutputFilterParameters(ByVal pDestinationVoice As IXAudio2Voice, ByRef pParameters As XAUDIO2_FILTER_PARAMETERS)
    Sub SetVolume(ByVal Volume As Single, ByVal OperationSet As XAudio2OpSet)
    [PreserveSig] Sub GetVolume(ByRef pVolume As Single)
    Sub SetChannelVolumes(ByVal Channels As Long, pVolumes As Single, ByVal OperationSet As XAudio2OpSet)
    [PreserveSig] Sub GetChannelVolumes(ByVal Channels As Long, pVolumes As Single)
    Sub SetOutputMatrix(ByVal pDestinationVoice As IXAudio2Voice, ByVal SourceChannels As Long, ByVal DestinationChannels As Long, pLevelMatrix As Single, ByVal OperationSet As XAudio2OpSet)
    [PreserveSig] Sub GetOutputMatrix(ByVal pDestinationVoice As IXAudio2Voice, ByVal SourceChannels As Long, ByVal DestinationChannels As Long, pLevelMatrix As Single)
    [PreserveSig] Sub DestroyVoice()
End Interface

' [InterfaceId("unknown")]
[OleAutomation(False)]
Interface IXAudio2SourceVoice Extends IXAudio2Voice
    Sub Start(ByVal Flags As Long, ByVal OperationSet As XAudio2OpSet)
    Sub Stop(ByVal Flags As Long, ByVal OperationSet As XAudio2OpSet)
    Sub SubmitSourceBuffer(ByRef pBuffer As XAUDIO2_BUFFER, ByRef pBufferWMA As XAUDIO2_BUFFER_WMA)
    Sub FlushSourceBuffers()
    Sub Discontinuity()
    Sub ExitLoop(ByVal OperationSet As XAudio2OpSet)
    [PreserveSig] Sub GetState(ByRef pVoiceState As XAUDIO2_VOICE_STATE, ByVal Flags As Long)
    Sub SetFrequencyRatio(ByVal Ratio As Single, ByVal OperationSet As XAudio2OpSet)
    [PreserveSig] Sub GetFrequencyRatio(ByRef pRatio As Single)
    Sub SetSourceSampleRate(ByVal NewSourceSampleRate As Long)
End Interface

' [InterfaceId("unknown")]
[OleAutomation(False)]
Interface IXAudio2SubmixVoice Extends IXAudio2Voice
    'No methods
End Interface

' [InterfaceId("unknown")]
[OleAutomation(False)]
Interface IXAudio2MasteringVoice Extends IXAudio2Voice
    Sub GetChannelMask(pChannelMask As Long)
End Interface


' [InterfaceId("unknown")]
[Description("WARNING: A v-table swap is likely required because these methods require [PreserveSig] which is currently unsupported for Impleents.")]
[OleAutomation(False)]
Interface IXAudio2EngineCallback Extends Nothing
    Sub OnProcessingPassStart()
    Sub OnProcessingPassEnd()
    Sub OnCriticalError(ByVal Error As Long)
End Interface

' [InterfaceId("unknown")]
[Description("WARNING: A v-table swap is likely required because these methods require [PreserveSig] which is currently unsupported for Impleents.")]
[OleAutomation(False)]
Interface IXAudio2VoiceCallback Extends Nothing
    Sub OnVoiceProcessingPassStart(ByVal BytesRequired As Long)
    Sub OnVoiceProcessingPassEnd()
    Sub OnStreamEnd()
    Sub OnBufferStart(ByVal pBufferContext As LongPtr)
    Sub OnBufferEnd(ByVal pBufferContext As LongPtr)
    Sub OnLoopEnd(ByVal pBufferContext As LongPtr)
    Sub OnVoiceError(ByVal pBufferContext As LongPtr, ByVal Error As Long)
End Interface

[InterfaceId("15B3CD66-E9DE-4464-B6E6-2BC3CF63D455")]
[OleAutomation(False)]
Interface IXAPOHrtfParameters Extends IUnknown
    Sub SetSourcePosition(ByRef position As HrtfPosition)
    Sub SetSourceOrientation(ByRef orientation As HrtfOrientation)
    Sub SetSourceGain(ByVal gain As Single)
    Sub SetEnvironment(ByVal environment As HrtfEnvironment)
End Interface



Module wdXAudio

Public Const XAPO_E_FORMAT_UNSUPPORTED = &H88970001 ' MAKE_HRESULT(SEVERITY_ERROR, FACILITY_XAPO, 0x01) // requested audio format unsupported
    
'  supported number of channels (samples per frame) range
Public Const XAPO_MIN_CHANNELS  = 1
Public Const XAPO_MAX_CHANNELS  = 64
'  supported framerate range
Public Const XAPO_MIN_FRAMERATE  = 1000
Public Const XAPO_MAX_FRAMERATE  = 200000
'  unicode string length, including terminator, used with XAPO_REGISTRATION_PROPERTIES
Public Const XAPO_REGISTRATION_STRING_LENGTH  = 256

Public Enum XAPOFlags
    ' // XAPO property flags, used with XAPO_REGISTRATION_PROPERTIES.Flags:
    ' // Number of channels of input and output buffers must match,
    ' // applies to XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS.pFormat.
    XAPO_FLAG_CHANNELS_MUST_MATCH = &H00000001
'  Framerate of input and output buffers must match,
'  applies to XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS.pFormat.
    XAPO_FLAG_FRAMERATE_MUST_MATCH = &H00000002
'  Bit depth of input and output buffers must match,
'  applies to XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS.pFormat.
'  Container size of input and output buffers must also match if
'  XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS.pFormat is WAVEFORMATEXTENSIBLE.
    XAPO_FLAG_BITSPERSAMPLE_MUST_MATCH = &H00000004
'  Number of input and output buffers must match,
'  applies to XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS.
'  Also, XAPO_REGISTRATION_PROPERTIES.MinInputBufferCount must
'  equal XAPO_REGISTRATION_PROPERTIES.MinOutputBufferCount and
'  XAPO_REGISTRATION_PROPERTIES.MaxInputBufferCount must equal
'  XAPO_REGISTRATION_PROPERTIES.MaxOutputBufferCount when used.
    XAPO_FLAG_BUFFERCOUNT_MUST_MATCH = &H00000008
'  XAPO must be run in-place.  Use this flag only if your DSP
'  implementation cannot process separate input and output buffers.
'  If set, the following flags must also be set:
'      XAPO_FLAG_CHANNELS_MUST_MATCH
'      XAPO_FLAG_FRAMERATE_MUST_MATCH
'      XAPO_FLAG_BITSPERSAMPLE_MUST_MATCH
'      XAPO_FLAG_BUFFERCOUNT_MUST_MATCH
'      XAPO_FLAG_INPLACE_SUPPORTED
'  Multiple input and output buffers may be used with in-place XAPOs,
'  though the input buffer count must equal the output buffer count.
'  When multiple input/output buffers are used, the XAPO may assume
'  input buffer [N] equals output buffer [N] for in-place processing.
    XAPO_FLAG_INPLACE_REQUIRED = &H00000020
'  XAPO may be run in-place.  If the XAPO is used in a chain
'  such that the requirements for XAPO_FLAG_INPLACE_REQUIRED are met,
'  XAudio2 will ensure the XAPO is run in-place.  If not met, XAudio2
'  will still run the XAPO albeit with separate input and output buffers.
'  For example, consider an effect which may be ran in stereo->5.1 mode or
'  mono->mono mode.  When set to stereo->5.1, it will be run with separate
'  input and output buffers as format conversion is not permitted in-place.
'  However, if configured to run mono->mono, the same XAPO can be run
'  in-place.  Thus the same implementation may be conveniently reused
'  for various input/output configurations, while taking advantage of
'  in-place processing when possible.
    XAPO_FLAG_INPLACE_SUPPORTED = &H00000010
End Enum

Public Type XAPO_REGISTRATION_PROPERTIES
    clsid As UUID ' COM class ID, used with CoCreate
    FriendlyName(0 To (XAPO_REGISTRATION_STRING_LENGTH - 1)) As Integer ' friendly name unicode string
    CopyrightInfo(0 To (XAPO_REGISTRATION_STRING_LENGTH - 1)) As Integer ' copyright information unicode string
    MajorVersion As Long ' major version
    MinorVersion As Long ' minor version
    Flags As XAPOFlags ' XAPO property flags, describes supported input/output configuration
    MinInputBufferCount As Long ' minimum number of input buffers required for processing, can be 0
    MaxInputBufferCount As Long ' maximum number of input buffers supported for processing, must be >= MinInputBufferCount
    MinOutputBufferCount As Long ' minimum number of output buffers required for processing, can be 0, must match MinInputBufferCount when XAPO_FLAG_BUFFERCOUNT_MUST_MATCH used
    MaxOutputBufferCount As Long ' maximum number of output buffers supported for processing, must be >= MinOutputBufferCount, must match MaxInputBufferCount when XAPO_FLAG_BUFFERCOUNT_MUST_MATCH used
End Type

[PackingAlignment(1)]
Public Type XAPO_LOCKFORPROCESS_PARAMETERS
    pFormat As LongPtr 'const WAVEFORMATEX * ' buffer audio format
    MaxFrameCount As Long ' maximum number of frames in respective buffer that IXAPO::Process would have to handle, irrespective of dynamic variable settings, can be 0
End Type

Public Enum XAPO_BUFFER_FLAGS
    XAPO_BUFFER_SILENT   ' silent data should be assumed, respective memory may be uninitialized
    XAPO_BUFFER_VALID   ' arbitrary data should be assumed (may or may not be silent frames), respective memory initialized
End Enum

Public Type XAPO_PROCESS_BUFFER_PARAMETERS
    pBuffer As LongPtr 'void ' audio data buffer, must be non-NULL
    BufferFlags As XAPO_BUFFER_FLAGS ' describes assumed content of pBuffer, does not affect ValidFrameCount
    ValidFrameCount As Long ' number of frames of valid data, must be within respective [0, XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS.MaxFrameCount], always XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS.MaxFrameCount for CBR/user-defined XAPOs, does not affect BufferFlags
End Type

Public Declare PtrSafe Function XAPOAlloc Lib "ole32" Alias "CoTaskMemAlloc" (ByVal cb As LongPtr) As LongPtr
Public Declare PtrSafe Sub XAPOFree Lib "ole32" Alias "CoTaskMemFree" (ByVal pv As LongPtr)

Public Const XAPOBASE_DEFAULT_FORMAT_TAG  = WAVE_FORMAT_IEEE_FLOAT  ' 32-bit float only, applies to WAVEFORMATEX.wFormatTag or WAVEFORMATEXTENSIBLE.SubFormat when used
Public Const XAPOBASE_DEFAULT_FORMAT_MIN_CHANNELS  = XAPO_MIN_CHANNELS  ' minimum channel count, applies to WAVEFORMATEX.nChannels
Public Const XAPOBASE_DEFAULT_FORMAT_MAX_CHANNELS  = XAPO_MAX_CHANNELS  ' maximum channel count, applies to WAVEFORMATEX.nChannels
Public Const XAPOBASE_DEFAULT_FORMAT_MIN_FRAMERATE  = XAPO_MIN_FRAMERATE  ' minimum framerate, applies to WAVEFORMATEX.nSamplesPerSec
Public Const XAPOBASE_DEFAULT_FORMAT_MAX_FRAMERATE  = XAPO_MAX_FRAMERATE  ' maximum framerate, applies to WAVEFORMATEX.nSamplesPerSec
Public Const XAPOBASE_DEFAULT_FORMAT_BITSPERSAMPLE  = 32  ' 32-bit float only, applies to WAVEFORMATEX.wBitsPerSample and WAVEFORMATEXTENSIBLE.wValidBitsPerSample when used
'  default XAPO property flags supported, applies to XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS
Public Const XAPOBASE_DEFAULT_FLAG  = (XAPO_FLAG_CHANNELS_MUST_MATCH Or XAPO_FLAG_FRAMERATE_MUST_MATCH Or XAPO_FLAG_BITSPERSAMPLE_MUST_MATCH Or XAPO_FLAG_BUFFERCOUNT_MUST_MATCH Or XAPO_FLAG_INPLACE_SUPPORTED)
'  default number of input and output buffers supported, applies to XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS
Public Const XAPOBASE_DEFAULT_BUFFER_COUNT  = 1


'XAudio2.h

#If WDL_XAUDIO8 = 0 Then
Public Const XAUDIO2_DLL_A  = "xaudio2_9.dll"
Public Const XAUDIO2_DLL_W  = "xaudio2_9.dll"
Public Const XAUDIO2D_DLL_A  = "xaudio2_9d.dll"
Public Const XAUDIO2D_DLL_W  = "xaudio2_9d.dll"
#Else
Public Const XAUDIO2_DLL_A  = "xaudio2_8.dll"
Public Const XAUDIO2_DLL_W  = L "xaudio2_8.dll"
Public Const XAUDIO2D_DLL_A  = "xaudio2_8.dll"
Public Const XAUDIO2D_DLL_W  = L "xaudio2_8.dll"
#End If
Public Const XAUDIO2_DLL  = XAUDIO2_DLL_W
Public Const XAUDIO2D_DLL  = XAUDIO2D_DLL_W

Public Const XAUDIO2_MAX_BUFFER_BYTES  = &H80000000  ' Maximum bytes allowed in a source buffer
Public Const XAUDIO2_MAX_QUEUED_BUFFERS  = 64  ' Maximum buffers allowed in a voice queue
Public Const XAUDIO2_MAX_BUFFERS_SYSTEM  = 2  ' Maximum buffers allowed for system threads (Xbox 360 only)
Public Const XAUDIO2_MAX_AUDIO_CHANNELS  = 64  ' Maximum channels in an audio stream
Public Const XAUDIO2_MIN_SAMPLE_RATE  = 1000  ' Minimum audio sample rate supported
Public Const XAUDIO2_MAX_SAMPLE_RATE  = 200000  ' Maximum audio sample rate supported
Public Const XAUDIO2_MAX_VOLUME_LEVEL As Single = 16777216.0!  ' Maximum acceptable volume level (2^24)
Public Const XAUDIO2_MIN_FREQ_RATIO As Single = (1 / 1024.0!)  ' Minimum SetFrequencyRatio argument
Public Const XAUDIO2_MAX_FREQ_RATIO As Single = 1024.0!  ' Maximum MaxFrequencyRatio argument
Public Const XAUDIO2_DEFAULT_FREQ_RATIO As Single = 2.0!  ' Default MaxFrequencyRatio argument
Public Const XAUDIO2_MAX_FILTER_ONEOVERQ As Single = 1.5!  ' Maximum XAUDIO2_FILTER_PARAMETERS.OneOverQ
Public Const XAUDIO2_MAX_FILTER_FREQUENCY As Single = 1.0!  ' Maximum XAUDIO2_FILTER_PARAMETERS.Frequency
Public Const XAUDIO2_MAX_LOOP_COUNT  = 254  ' Maximum non-infinite XAUDIO2_BUFFER.LoopCount
Public Const XAUDIO2_MAX_INSTANCES  = 8  ' Maximum simultaneous XAudio2 objects on Xbox 360
'  For XMA voices on Xbox 360 there is an additional restriction on the MaxFrequencyRatio
'  argument and the voice's sample rate: the product of these numbers cannot exceed 600000
'  for one-channel voices or 300000 for voices with more than one channel.
Public Const XAUDIO2_MAX_RATIO_TIMES_RATE_XMA_MONO  = 600000
Public Const XAUDIO2_MAX_RATIO_TIMES_RATE_XMA_MULTICHANNEL  = 300000
'  Numeric values with special meanings
Public Enum XAudio2OpSet
    XAUDIO2_COMMIT_NOW = 0  ' Used as an OperationSet argument
    XAUDIO2_COMMIT_ALL = 0  ' Used in IXAudio2::CommitChanges
End Enum
Public Const XAUDIO2_INVALID_OPSET  = (-1)  ' Not allowed for OperationSet arguments
Public Const XAUDIO2_NO_LOOP_REGION  = 0  ' Used in XAUDIO2_BUFFER.LoopCount
Public Const XAUDIO2_LOOP_INFINITE  = 255  ' Used in XAUDIO2_BUFFER.LoopCount
Public Const XAUDIO2_DEFAULT_CHANNELS  = 0  ' Used in CreateMasteringVoice
Public Const XAUDIO2_DEFAULT_SAMPLERATE  = 0  ' Used in CreateMasteringVoice

Public Enum XAudio2Flags
    XAUDIO2_DEBUG_ENGINE = &H0001  ' Used in XAudio2Create
    XAUDIO2_VOICE_NOPITCH = &H0002  ' Used in IXAudio2::CreateSourceVoice
    XAUDIO2_VOICE_NOSRC = &H0004  ' Used in IXAudio2::CreateSourceVoice
    XAUDIO2_VOICE_USEFILTER = &H0008  ' Used in IXAudio2::CreateSource/SubmixVoice
    XAUDIO2_PLAY_TAILS = &H0020  ' Used in IXAudio2SourceVoice::Stop
    XAUDIO2_END_OF_STREAM = &H0040  ' Used in XAUDIO2_BUFFER.Flags
    XAUDIO2_SEND_USEFILTER = &H0080  ' Used in XAUDIO2_SEND_DESCRIPTOR.Flags
    XAUDIO2_VOICE_NOSAMPLESPLAYED = &H0100  ' Used in IXAudio2SourceVoice::GetState
    XAUDIO2_STOP_ENGINE_WHEN_IDLE = &H2000  ' Used in XAudio2Create to force the engine to Stop when no source voices are Started, and Start when a voice is Started
    XAUDIO2_1024_QUANTUM = &H8000&  ' Used in XAudio2Create to specify nondefault processing quantum of 21.33 ms (1024 samples at 48KHz)
    XAUDIO2_NO_VIRTUAL_AUDIO_CLIENT = &H10000  ' Used in CreateMasteringVoice to create a virtual audio client
End Enum

Public Const XAUDIO2_DEFAULT_FILTER_TYPE  = LowPassFilter
Public Const XAUDIO2_DEFAULT_FILTER_FREQUENCY  = XAUDIO2_MAX_FILTER_FREQUENCY
Public Const XAUDIO2_DEFAULT_FILTER_ONEOVERQ  = 1.0
'  Internal XAudio2 constants
'  The audio frame quantum can be calculated by reducing the fraction:
'      SamplesPerAudioFrame / SamplesPerSecond
Public Const XAUDIO2_QUANTUM_NUMERATOR  = 1  ' On Windows, XAudio2 processes audio
Public Const XAUDIO2_QUANTUM_DENOMINATOR  = 100  '  in 10ms chunks (= 1/100 seconds)
Public Const XAUDIO2_QUANTUM_MS As Single = (1000.0! * XAUDIO2_QUANTUM_NUMERATOR / XAUDIO2_QUANTUM_DENOMINATOR)
'  XAudio2 error codes
Public Const FACILITY_XAUDIO2  = &H896
Public Const XAUDIO2_E_INVALID_CALL  = (&H88960001)  ' An API call or one of its arguments was illegal
Public Const XAUDIO2_E_XMA_DECODER_ERROR  = (&H88960002)  ' The XMA hardware suffered an unrecoverable error
Public Const XAUDIO2_E_XAPO_CREATION_FAILED  = (&H88960003)  ' XAudio2 failed to initialize an XAPO effect
Public Const XAUDIO2_E_DEVICE_INVALIDATED  = (&H88960004)  ' An audio device became unusable (unplugged, etc)

Public Enum XAUDIO2_PROCESSOR
    Processor1 = &H00000001
    Processor2 = &H00000002
    Processor3 = &H00000004
    Processor4 = &H00000008
    Processor5 = &H00000010
    Processor6 = &H00000020
    Processor7 = &H00000040
    Processor8 = &H00000080
    Processor9 = &H00000100
    Processor10 = &H00000200
    Processor11 = &H00000400
    Processor12 = &H00000800
    Processor13 = &H00001000
    Processor14 = &H00002000
    Processor15 = &H00004000
    Processor16 = &H00008000&
    Processor17 = &H00010000
    Processor18 = &H00020000
    Processor19 = &H00040000
    Processor20 = &H00080000
    Processor21 = &H00100000
    Processor22 = &H00200000
    Processor23 = &H00400000
    Processor24 = &H00800000
    Processor25 = &H01000000
    Processor26 = &H02000000
    Processor27 = &H04000000
    Processor28 = &H08000000
    Processor29 = &H10000000
    Processor30 = &H20000000
    Processor31 = &H40000000
    Processor32 = &H80000000
    XAUDIO2_ANY_PROCESSOR = &Hffffffff
    XAUDIO2_USE_DEFAULT_PROCESSO = &H00000000
    XAUDIO2_DEFAULT_PROCESSOR = Processor1
End Enum

Public Type XAUDIO2_VOICE_DETAILS
    CreationFlags As Long ' Flags the voice was created with.
    ActiveFlags As Long ' Flags currently active.
    InputChannels As Long ' Channels in the voice's input audio.
    InputSampleRate As Long ' Sample rate of the voice's input audio.
End Type

[PackingAlignment(1)]
Public Type XAUDIO2_SEND_DESCRIPTOR
    Flags As XAudio2Flags ' Either 0 or XAUDIO2_SEND_USEFILTER.
    pOutputVoice As IXAudio2Voice ' This send's destination voice.
End Type

[PackingAlignment(1)]
Public Type XAUDIO2_VOICE_SENDS
    SendCount As Long ' Number of sends from this voice.
    pSends As LongPtr 'XAUDIO2_SEND_DESCRIPTOR * ' Array of SendCount send descriptors.
End Type

[PackingAlignment(1)]
Public Type XAUDIO2_EFFECT_DESCRIPTOR
    pEffect As IUnknown ' Pointer to the effect object's IUnknown interface.
    InitialState As BOOL ' TRUE if the effect should begin in the enabled state.
    OutputChannels As Long ' How many output channels the effect should produce.
End Type

[PackingAlignment(1)]
Public Type XAUDIO2_EFFECT_CHAIN
    EffectCount As Long ' Number of effects in this voice's effect chain.
    pEffectDescriptors As LongPtr 'XAUDIO2_EFFECT_DESCRIPTOR* ' Array of effect descriptors.
End Type




Public Enum XAUDIO2_FILTER_TYPE
    LowPassFilter = 0 ' Attenuates frequencies above the cutoff frequency (state-variable filter).
    BandPassFilter = 1 ' Attenuates frequencies outside a given range      (state-variable filter).
    HighPassFilter = 2 ' Attenuates frequencies below the cutoff frequency (state-variable filter).
    NotchFilter = 3 ' Attenuates frequencies inside a given range       (state-variable filter).
    LowPassOnePoleFilter = 4 ' Attenuates frequencies above the cutoff frequency (one-pole filter, XAUDIO2_FILTER_PARAMETERS.OneOverQ has no effect)
    HighPassOnePoleFilter = 5 ' Attenuates frequencies below the cutoff frequency (one-pole filter, XAUDIO2_FILTER_PARAMETERS.OneOverQ has no effect)
End Enum

Public Type XAUDIO2_FILTER_PARAMETERS
    Type As XAUDIO2_FILTER_TYPE ' Filter type.
    Frequency As Single ' Filter coefficient.
                        '  must be >= 0 and <= XAUDIO2_MAX_FILTER_FREQUENCY
                        '  See XAudio2CutoffFrequencyToRadians() for state-variable filter types and
                        '  XAudio2CutoffFrequencyToOnePoleCoefficient() for one-pole filter types.
    OneOverQ As Single  ' Reciprocal of the filter's quality factor Q;
                        '  must be > 0 and <= XAUDIO2_MAX_FILTER_ONEOVERQ.
                        '  Has no effect for one-pole filters.
End Type

[PackingAlignment(1)]
Public Type XAUDIO2_BUFFER
    Flags As XAudio2Flags ' Either 0 or XAUDIO2_END_OF_STREAM.
    AudioBytes As Long ' Size of the audio data buffer in bytes.
    pAudioData As LongPtr 'const Byte* ' Pointer to the audio data buffer.
    PlayBegin As Long ' First sample in this buffer to be played.
    PlayLength As Long ' Length of the region to be played in samples,
    '  or 0 to play the whole buffer.
    LoopBegin As Long ' First sample of the region to be looped.
    LoopLength As Long ' Length of the desired loop region in samples,
    '  or 0 to loop the entire buffer.
    LoopCount As Long ' Number of times to repeat the loop region,
    '  or XAUDIO2_LOOP_INFINITE to loop forever.
    pContext As LongPtr 'void ' Context value to be passed back in callbacks.
End Type

[PackingAlignment(1)]
Public Type XAUDIO2_BUFFER_WMA
    pDecodedPacketCumulativeBytes As LongPtr 'const Long * ' Decoded packet's cumulative size array.
                                            '  Each element is the number of bytes accumulated
                                            '  when the corresponding XWMA packet is decoded in
                                            '  order.  The array must have PacketCount elements.
    PacketCount As Long ' Number of XWMA packets submitted. Must be >= 1 and
                        '  divide evenly into XAUDIO2_BUFFER.AudioBytes.
End Type

[PackingAlignment(1)]
Public Type XAUDIO2_VOICE_STATE
    pCurrentBufferContext As LongPtr 'void ' The pContext value provided in the XAUDIO2_BUFFER
                                            '  that is currently being processed, or NULL if
                                            '  there are no buffers in the queue.
    BuffersQueued As Long   ' Number of buffers currently queued on the voice
                            '  (including the one that is being processed).
    SamplesPlayed As LongLong   ' Total number of samples produced by the voice since
                                '  it began processing the current audio stream.
                                '  If XAUDIO2_VOICE_NOSAMPLESPLAYED is specified
                                '  in the call to IXAudio2SourceVoice::GetState,
                                '  this member will not be calculated, saving CPU.
End Type

[PackingAlignment(1)]
Public Type XAUDIO2_PERFORMANCE_DATA
    ' CPU usage information
    AudioCyclesSinceLastQuery As LongLong ' CPU cycles spent on audio processing since the
                                         '  last call to StartEngine or GetPerformanceData.
    TotalCyclesSinceLastQuery As LongLong ' Total CPU cycles elapsed since the last call
                                          '  (only counts the CPU XAudio2 is running on).
    MinimumCyclesPerQuantum As Long ' Fewest CPU cycles spent processing any one
                                    '  audio quantum since the last call.
    MaximumCyclesPerQuantum As Long ' Most CPU cycles spent processing any one
                                    '  audio quantum since the last call.
                                    ' Memory usage information
    MemoryUsageInBytes As Long ' Total heap space currently in use.
                                ' Audio latency and glitching information
    CurrentLatencyInSamples As Long ' Minimum delay from when a sample is read from a
                                    '  source buffer to when it reaches the speakers.
    GlitchesSinceEngineStarted As Long ' Audio dropouts since the engine was started.
                                       ' Data about XAudio2's current workload
    ActiveSourceVoiceCount As Long ' Source voices currently playing.
    TotalSourceVoiceCount As Long ' Source voices currently existing.
    ActiveSubmixVoiceCount As Long ' Submix voices currently playing/existing.
    ActiveResamplerCount As Long ' Resample xAPOs currently active.
    ActiveMatrixMixCount As Long ' MatrixMix xAPOs currently active.
    ' Usage of the hardware XMA decoder (Xbox 360 only)
    ActiveXmaSourceVoices As Long ' Number of source voices decoding XMA data.
    ActiveXmaStreams As Long ' A voice can use more than one XMA stream.
End Type

Public Type XAUDIO2_DEBUG_CONFIGURATION
    TraceMask As Long ' Bitmap of enabled debug message types.
    BreakMask As Long ' Message types that will break into the debugger.
    LogThreadID As BOOL ' Whether to log the thread ID with each message.
    LogFileline As BOOL ' Whether to log the source file and line number.
    LogFunctionName As BOOL ' Whether to log the function name.
    LogTiming As BOOL ' Whether to log message timestamps.
End Type

Public Enum XAudio2LogFlags
    XAUDIO2_LOG_ERRORS = &H0001  ' For handled errors with serious effects.
    XAUDIO2_LOG_WARNINGS = &H0002  ' For handled errors that may be recoverable.
    XAUDIO2_LOG_INFO = &H0004  ' Informational chit-chat (e.g. state changes).
    XAUDIO2_LOG_DETAIL = &H0008  ' More detailed chit-chat.
    XAUDIO2_LOG_API_CALLS = &H0010  ' Public API function entries and exits.
    XAUDIO2_LOG_FUNC_CALLS = &H0020  ' Internal function entries and exits.
    XAUDIO2_LOG_TIMING = &H0040  ' Delays detected and other timing data.
    XAUDIO2_LOG_LOCKS = &H0080  ' Usage of critical sections and mutexes.
    XAUDIO2_LOG_MEMORY = &H0100  ' Memory heap usage information.
    XAUDIO2_LOG_STREAMING = &H1000  ' Audio streaming information.
End Enum
    
#If (WINDEVLIB_LITE = 0) Then
#If (WDL_NO_MATH = 0) Then
Public Function XAudio2DecibelsToAmplitudeRatio(ByVal Decibels As Single) As Single
    Return CSng((10! ^ (Decibels \ 20!)))
End Function
Public Function XAudio2AmplitudeRatioToDecibels(ByVal Volume As Single) As Single
    If (Volume = 0) Then
        Return -1! * FLT_MAX
    End If
    Return 20 * Log10f(Volume)
End Function
Public Function XAudio2SemitonesToFrequencyRatio(ByVal Semitones As Single) As Single
    ' // FrequencyRatio = 2 ^ Octaves
    ' //                = 2 ^ (Semitones / 12)
    Return CSng((2! ^ (Semitones \ 12!)))
End Function
Public Function XAudio2FrequencyRatioToSemitones(ByVal FrequencyRatio As Single) As Single
    ' // Semitones = 12 * log2(FrequencyRatio)
    ' //           = 12 * log2(10) * log10(FrequencyRatio)
    Return 39.86313713864835! * Log10f(FrequencyRatio)
End Function
Public Function XAudio2CutoffFrequencyToRadians(ByVal CutoffFrequency As Single, ByVal SampleRate As Long) As Single
    If (CLng((CutoffFrequency * 6)) >= SampleRate) Then
        Return XAUDIO2_MAX_FILTER_FREQUENCY
    End If
    Return 2.0! * CSng(Sin(M_PI * CutoffFrequency \ CSng(SampleRate)))
End Function
Public Function XAudio2RadiansToCutoffFrequency(ByVal Radians As Single, ByVal SampleRate As Single) As Single
    Return CSng(SampleRate * Asin(Radians \ 2.0!) \ M_PI)
End Function
Public Function XAudio2CutoffFrequencyToOnePoleCoefficient(ByVal CutoffFrequency As Single, ByVal SampleRate As Long) As Single
    If (CLng((CutoffFrequency)) >= SampleRate) Then
        Return XAUDIO2_MAX_FILTER_FREQUENCY
    End If
    Return CSng(1.0! - Pow(1.0! - 2.0! * CutoffFrequency \ SampleRate, 2.0!))
End Function
#End If

[UseGetLastError(False)]
#If WDL_XAUDIO8 Then
Public Declare PtrSafe Function XAudio2CreateWithVersionInfo Lib "xaudio2_8.dll" (ppXAudio2 As IXAudio2, Optional ByVal Flags As XAudio2Flags = 0, Optional ByVal XAudio2Processor As XAUDIO2_PROCESSOR = XAUDIO2_DEFAULT_PROCESSOR, Optional ByVal ntddiVersion As Long = NTDDI_WIN10) As Long
#Else
Public Declare PtrSafe Function XAudio2CreateWithVersionInfo Lib "xaudio2_9d.dll" (ppXAudio2 As IXAudio2, Optional ByVal Flags As XAudio2Flags = 0, Optional ByVal XAudio2Processor As XAUDIO2_PROCESSOR = XAUDIO2_DEFAULT_PROCESSOR, Optional ByVal ntddiVersion As Long = NTDDI_WIN10) As Long
#End If

Private Delegate Function XAudio2CreateWithVersionInfoFunc (ppXAudio2 As IXAudio2, ByVal Flags As XAudio2Flags, ByVal XAudio2Processor As XAUDIO2_PROCESSOR, ByVal ntddiVersion As Long) As Long
Private Delegate Function XAudio2CreateInfoFunc (ppXAudio2 As IXAudio2, ByVal Flags As XAudio2Flags, ByVal XAudio2Processor As XAUDIO2_PROCESSOR) As Long

Public Function XAudio2Create(ppXAudio2 As IXAudio2, Optional ByVal Flags As XAudio2Flags = 0, Optional ByVal XAudio2Processor As XAUDIO2_PROCESSOR = XAUDIO2_DEFAULT_PROCESSOR) As Long
    Static s_dllInstance As LongPtr
    Static s_pfnAudio2CreateWithVersion As XAudio2CreateWithVersionInfoFunc
    Static s_pfnAudio2Create As XAudio2CreateInfoFunc
    If s_dllInstance = 0 Then
        s_dllInstance = LoadLibraryEx(XAUDIO2_DLL, 0, LOAD_LIBRARY_SEARCH_SYSTEM32)
        If s_dllInstance = 0 Then
            Return HRESULT_FROM_WIN32(Err.LastDllError)
        End If
        s_pfnAudio2CreateWithVersion = CType(Of XAudio2CreateWithVersionInfoFunc)(GetProcAddress(s_dllInstance, "XAudio2CreateWithVersionInfo"))
        If s_pfnAudio2CreateWithVersion = 0 Then
            s_pfnAudio2Create = CType(Of XAudio2CreateInfoFunc)(GetProcAddress(s_dllInstance, "XAudio2Create"))
            If s_pfnAudio2Create = 0 Then
                Return HRESULT_FROM_WIN32(Err.LastDllError)
            End If
        End If
    End If
    
    #If WDL_XAUDIO8 Then
    Const ntddi As Long = NTDDI_WIN8
    ' #ElseIf WINDEVLIB_XAUDIORS5 Then
    ' Const ntddi As Long = NTDDI_WIN10
    #Else
    Const ntddi As Long = NTDDI_WIN10_RS5
    #End If
    If s_pfnAudio2CreateWithVersion Then
        Return s_pfnAudio2CreateWithVersion(ppXAudio2, Flags, XAudio2Processor, ntddi)
    End If
    Return s_pfnAudio2Create(ppXAudio2, Flags, XAudio2Processor)
End Function

'xaudio2fx.h
[UseGetLastError(False)]
#If WDL_XAUDIO8 Then
Public Declare PtrSafe Function CreateAudioVolumeMeter Lib "xaudio2_8.dll" (ppApo As IUnknown) as Long
Public Declare PtrSafe Function CreateAudioReverb Lib "xaudio2_8.dll" (ppApo As IUnknown) as Long
#Else
Public Declare PtrSafe Function CreateAudioVolumeMeter Lib "xaudio2_9d.dll" (ppApo As IUnknown) As Long
Public Declare PtrSafe Function CreateAudioReverb Lib "xaudio2_9d.dll" (ppApo As IUnknown) As Long
#End If

Public Function XAudio2CreateVolumeMeter(ppApo As IUnknown, ByVal Flags As Long) As Long
    UNREFERENCED_PARAMETER(Flags)
    Return CreateAudioVolumeMeter(ppApo)
End Function
Public Function XAudio2CreateReverb(ppApo As IUnknown, ByVal Flags As Long) As Long
    UNREFERENCED_PARAMETER(Flags)
    Return CreateAudioReverb(ppApo)
End Function

[PackingAlignment(1)]
Public Type XAUDIO2FX_VOLUMEMETER_LEVELS
    pPeakLevels As LongPtr 'float* Peak levels table: receives maximum absolute level for each channel
                           ' over a processing pass; may be NULL if pRMSLevls != NULL,
                           ' otherwise must have at least ChannelCount elements.
    pRMSLevels As LongPtr  'float* Root mean square levels table: receives RMS level for each channel
                           ' over a processing pass; may be NULL if pPeakLevels != NULL,
                           ' otherwise must have at least ChannelCount elements.
    ChannelCount As Long   ' Number of channels being processed by the volume meter APO
End Type

Public Const XAUDIO2FX_REVERB_MIN_FRAMERATE  = 20000
Public Const XAUDIO2FX_REVERB_MAX_FRAMERATE  = 48000

[Description("IMPORTANT: For Windows 10+ only. For Windows 8, use XAUDIO2FX_REVERB_PARAMETERS_Win8")]
[PackingAlignment(1)]
Public Type XAUDIO2FX_REVERB_PARAMETERS
    ' ratio of wet (processed) signal to dry (original) signal
    WetDryMix As Single ' [0, 100] (percentage)
    ' Delay times
    ReflectionsDelay As Long ' [0, 300] in ms
    ReverbDelay As Byte ' [0, 85] in ms
    RearDelay As Byte ' 7.1: [0, 20] in ms, all other: [0, 5] in ms
    '#if(_WIN32_WINNT >= _WIN32_WINNT_WIN10)
    SideDelay As Byte ' 7.1: [0, 5] in ms, all other: not used, but still validated
    '#endif
    ' Indexed parameters
    PositionLeft As Byte ' [0, 30] no units
    PositionRight As Byte ' [0, 30] no units, ignored when configured to mono
    PositionMatrixLeft As Byte ' [0, 30] no units
    PositionMatrixRight As Byte ' [0, 30] no units, ignored when configured to mono
    EarlyDiffusion As Byte ' [0, 15] no units
    LateDiffusion As Byte ' [0, 15] no units
    LowEQGain As Byte ' [0, 12] no units
    LowEQCutoff As Byte ' [0, 9] no units
    HighEQGain As Byte ' [0, 8] no units
    HighEQCutoff As Byte ' [0, 14] no units
    ' Direct parameters
    RoomFilterFreq As Single ' [20, 20000] in Hz
    RoomFilterMain As Single ' [-100, 0] in dB
    RoomFilterHF As Single ' [-100, 0] in dB
    ReflectionsGain As Single ' [-100, 20] in dB
    ReverbGain As Single ' [-100, 20] in dB
    DecayTime As Single ' [0.1, inf] in seconds
    Density As Single ' [0, 100] (percentage)
    RoomSize As Single ' [1, 100] in feet
    ' component control
    DisableLateField As BOOL ' TRUE to disable late field reflections
End Type
[PackingAlignment(1)]
Public Type XAUDIO2FX_REVERB_PARAMETERS_Win8
    ' ratio of wet (processed) signal to dry (original) signal
    WetDryMix As Single ' [0, 100] (percentage)
    ' Delay times
    ReflectionsDelay As Long ' [0, 300] in ms
    ReverbDelay As Byte ' [0, 85] in ms
    RearDelay As Byte ' 7.1: [0, 20] in ms, all other: [0, 5] in ms
    '#if(_WIN32_WINNT >= _WIN32_WINNT_WIN10)
    ' SideDelay As Byte ' 7.1: [0, 5] in ms, all other: not used, but still validated
    '#endif
    ' Indexed parameters
    PositionLeft As Byte ' [0, 30] no units
    PositionRight As Byte ' [0, 30] no units, ignored when configured to mono
    PositionMatrixLeft As Byte ' [0, 30] no units
    PositionMatrixRight As Byte ' [0, 30] no units, ignored when configured to mono
    EarlyDiffusion As Byte ' [0, 15] no units
    LateDiffusion As Byte ' [0, 15] no units
    LowEQGain As Byte ' [0, 12] no units
    LowEQCutoff As Byte ' [0, 9] no units
    HighEQGain As Byte ' [0, 8] no units
    HighEQCutoff As Byte ' [0, 14] no units
    ' Direct parameters
    RoomFilterFreq As Single ' [20, 20000] in Hz
    RoomFilterMain As Single ' [-100, 0] in dB
    RoomFilterHF As Single ' [-100, 0] in dB
    ReflectionsGain As Single ' [-100, 20] in dB
    ReverbGain As Single ' [-100, 20] in dB
    DecayTime As Single ' [0.1, inf] in seconds
    Density As Single ' [0, 100] (percentage)
    RoomSize As Single ' [1, 100] in feet
    ' component control
    DisableLateField As BOOL ' TRUE to disable late field reflections
End Type

Public Const XAUDIO2FX_REVERB_MIN_WET_DRY_MIX As Single = 0.0!
Public Const XAUDIO2FX_REVERB_MIN_REFLECTIONS_DELAY  = 0
Public Const XAUDIO2FX_REVERB_MIN_REVERB_DELAY  = 0
Public Const XAUDIO2FX_REVERB_MIN_REAR_DELAY  = 0
Public Const XAUDIO2FX_REVERB_MIN_7POINT1_SIDE_DELAY  = 0
Public Const XAUDIO2FX_REVERB_MIN_7POINT1_REAR_DELAY  = 0
Public Const XAUDIO2FX_REVERB_MIN_POSITION  = 0
Public Const XAUDIO2FX_REVERB_MIN_DIFFUSION  = 0
Public Const XAUDIO2FX_REVERB_MIN_LOW_EQ_GAIN  = 0
Public Const XAUDIO2FX_REVERB_MIN_LOW_EQ_CUTOFF  = 0
Public Const XAUDIO2FX_REVERB_MIN_HIGH_EQ_GAIN  = 0
Public Const XAUDIO2FX_REVERB_MIN_HIGH_EQ_CUTOFF  = 0
Public Const XAUDIO2FX_REVERB_MIN_ROOM_FILTER_FREQ As Single = 20.0!
Public Const XAUDIO2FX_REVERB_MIN_ROOM_FILTER_MAIN As Single = -100.0!
Public Const XAUDIO2FX_REVERB_MIN_ROOM_FILTER_HF As Single = -100.0!
Public Const XAUDIO2FX_REVERB_MIN_REFLECTIONS_GAIN As Single = -100.0!
Public Const XAUDIO2FX_REVERB_MIN_REVERB_GAIN As Single = -100.0!
Public Const XAUDIO2FX_REVERB_MIN_DECAY_TIME As Single = 0.1!
Public Const XAUDIO2FX_REVERB_MIN_DENSITY As Single = 0.0!
Public Const XAUDIO2FX_REVERB_MIN_ROOM_SIZE As Single = 0.0!
Public Const XAUDIO2FX_REVERB_MAX_WET_DRY_MIX As Single = 100.0!
Public Const XAUDIO2FX_REVERB_MAX_REFLECTIONS_DELAY  = 300
Public Const XAUDIO2FX_REVERB_MAX_REVERB_DELAY  = 85
Public Const XAUDIO2FX_REVERB_MAX_REAR_DELAY  = 5
Public Const XAUDIO2FX_REVERB_MAX_7POINT1_SIDE_DELAY  = 5
Public Const XAUDIO2FX_REVERB_MAX_7POINT1_REAR_DELAY  = 20
Public Const XAUDIO2FX_REVERB_MAX_POSITION  = 30
Public Const XAUDIO2FX_REVERB_MAX_DIFFUSION  = 15
Public Const XAUDIO2FX_REVERB_MAX_LOW_EQ_GAIN  = 12
Public Const XAUDIO2FX_REVERB_MAX_LOW_EQ_CUTOFF  = 9
Public Const XAUDIO2FX_REVERB_MAX_HIGH_EQ_GAIN  = 8
Public Const XAUDIO2FX_REVERB_MAX_HIGH_EQ_CUTOFF  = 14
Public Const XAUDIO2FX_REVERB_MAX_ROOM_FILTER_FREQ As Single = 20000.0!
Public Const XAUDIO2FX_REVERB_MAX_ROOM_FILTER_MAIN As Single = 0.0!
Public Const XAUDIO2FX_REVERB_MAX_ROOM_FILTER_HF As Single = 0.0!
Public Const XAUDIO2FX_REVERB_MAX_REFLECTIONS_GAIN As Single = 20.0!
Public Const XAUDIO2FX_REVERB_MAX_REVERB_GAIN As Single = 20.0!
Public Const XAUDIO2FX_REVERB_MAX_DENSITY As Single = 100.0!
Public Const XAUDIO2FX_REVERB_MAX_ROOM_SIZE As Single = 100.0!
Public Const XAUDIO2FX_REVERB_DEFAULT_WET_DRY_MIX As Single = 100.0!
Public Const XAUDIO2FX_REVERB_DEFAULT_REFLECTIONS_DELAY  = 5
Public Const XAUDIO2FX_REVERB_DEFAULT_REVERB_DELAY  = 5
Public Const XAUDIO2FX_REVERB_DEFAULT_REAR_DELAY  = 5
Public Const XAUDIO2FX_REVERB_DEFAULT_7POINT1_SIDE_DELAY  = 5
Public Const XAUDIO2FX_REVERB_DEFAULT_7POINT1_REAR_DELAY  = 20
Public Const XAUDIO2FX_REVERB_DEFAULT_POSITION  = 6
Public Const XAUDIO2FX_REVERB_DEFAULT_POSITION_MATRIX  = 27
Public Const XAUDIO2FX_REVERB_DEFAULT_EARLY_DIFFUSION  = 8
Public Const XAUDIO2FX_REVERB_DEFAULT_LATE_DIFFUSION  = 8
Public Const XAUDIO2FX_REVERB_DEFAULT_LOW_EQ_GAIN  = 8
Public Const XAUDIO2FX_REVERB_DEFAULT_LOW_EQ_CUTOFF  = 4
Public Const XAUDIO2FX_REVERB_DEFAULT_HIGH_EQ_GAIN  = 8
Public Const XAUDIO2FX_REVERB_DEFAULT_HIGH_EQ_CUTOFF  = 4
Public Const XAUDIO2FX_REVERB_DEFAULT_ROOM_FILTER_FREQ As Single = 5000.0!
Public Const XAUDIO2FX_REVERB_DEFAULT_ROOM_FILTER_MAIN As Single = 0.0!
Public Const XAUDIO2FX_REVERB_DEFAULT_ROOM_FILTER_HF As Single = 0.0!
Public Const XAUDIO2FX_REVERB_DEFAULT_REFLECTIONS_GAIN As Single = 0.0!
Public Const XAUDIO2FX_REVERB_DEFAULT_REVERB_GAIN As Single = 0.0!
Public Const XAUDIO2FX_REVERB_DEFAULT_DECAY_TIME As Single = 1.0!
Public Const XAUDIO2FX_REVERB_DEFAULT_DENSITY As Single = 100.0!
Public Const XAUDIO2FX_REVERB_DEFAULT_ROOM_SIZE As Single = 100.0!
Public Const XAUDIO2FX_REVERB_DEFAULT_DISABLE_LATE_FIELD  = False

Public Type XAUDIO2FX_REVERB_I3DL2_PARAMETERS
    ' ratio of wet (processed) signal to dry (original) signal
    WetDryMix As Single ' [0, 100] (percentage)
    ' Standard I3DL2 parameters
    Room As Long ' [-10000, 0] in mB (hundredths of decibels)
    RoomHF As Long ' [-10000, 0] in mB (hundredths of decibels)
    RoomRolloffFactor As Single ' [0.0, 10.0]
    DecayTime As Single ' [0.1, 20.0] in seconds
    DecayHFRatio As Single ' [0.1, 2.0]
    Reflections As Long ' [-10000, 1000] in mB (hundredths of decibels)
    ReflectionsDelay As Single ' [0.0, 0.3] in seconds
    Reverb As Long ' [-10000, 2000] in mB (hundredths of decibels)
    ReverbDelay As Single ' [0.0, 0.1] in seconds
    Diffusion As Single ' [0.0, 100.0] (percentage)
    Density As Single ' [0.0, 100.0] (percentage)
    HFReference As Single ' [20.0, 20000.0] in Hz
End Type
#If WDL_NO_MATH = 0 Then
Public Sub ReverbConvertI3DL2ToNative(pI3DL2 As XAUDIO2FX_REVERB_I3DL2_PARAMETERS, pNative As XAUDIO2FX_REVERB_PARAMETERS, Optional ByVal sevenDotOneReverb As Boolean = True)
    Dim reflectionsDelay As Single
    Dim reverbDelay As Single
    
    If sevenDotOneReverb Then
        pNative.RearDelay = XAUDIO2FX_REVERB_DEFAULT_7POINT1_REAR_DELAY ' // 20 
    Else
        pNative.RearDelay = XAUDIO2FX_REVERB_DEFAULT_REAR_DELAY ' // 5 
    End If
    pNative.SideDelay = XAUDIO2FX_REVERB_DEFAULT_7POINT1_SIDE_DELAY
    
    pNative.PositionLeft = XAUDIO2FX_REVERB_DEFAULT_POSITION  ' 6
    pNative.PositionRight = XAUDIO2FX_REVERB_DEFAULT_POSITION ' 6
    pNative.PositionMatrixLeft = XAUDIO2FX_REVERB_DEFAULT_POSITION_MATRIX ' 27
    pNative.PositionMatrixRight = XAUDIO2FX_REVERB_DEFAULT_POSITION_MATRIX ' 27
    pNative.RoomSize = XAUDIO2FX_REVERB_DEFAULT_ROOM_SIZE ' 100
    pNative.LowEQCutoff = 4
    pNative.HighEQCutoff = 6

    ' The rest of the I3DL2 parameters map to the native property Set
    pNative.RoomFilterMain = CSng(pI3DL2.Room / 100.0!)
    pNative.RoomFilterHF = CSng(pI3DL2.RoomHF / 100.0!)
    
    Dim index As Long
    If (pI3DL2.DecayHFRatio >= 1.0!) Then
        index = CLng((-4.0 * Log10(pI3DL2.DecayHFRatio)))
        If (index < -8) Then index = -8
        pNative.LowEQGain = CByte(If((index < 0), index + 8, 8))
        pNative.HighEQGain = 8
        pNative.DecayTime = pI3DL2.DecayTime * pI3DL2.DecayHFRatio
    Else
        index = CLng((4.0 * Log10(pI3DL2.DecayHFRatio)))
        If (index < -8) Then index = -8
        pNative.LowEQGain = 8
        pNative.HighEQGain = CByte(If((index < 0), index + 8, 8))
        pNative.DecayTime = pI3DL2.DecayTime
    End If
    
    reflectionsDelay = CSng(pI3DL2.ReflectionsDelay * 1000.0!)
    If (reflectionsDelay >= XAUDIO2FX_REVERB_MAX_REFLECTIONS_DELAY) Then
        reflectionsDelay = (XAUDIO2FX_REVERB_MAX_REFLECTIONS_DELAY - 1)
    ElseIf (reflectionsDelay <= 1) Then
        reflectionsDelay = 1
    End If
    pNative.ReflectionsDelay = CLng(reflectionsDelay)
    
    reverbDelay = CSng(pI3DL2.ReverbDelay * 1000.0!)
    If (reverbDelay >= XAUDIO2FX_REVERB_MAX_REVERB_DELAY) Then
        reverbDelay = (XAUDIO2FX_REVERB_MAX_REVERB_DELAY - 1)
    End If
    pNative.ReverbDelay = CByte(reverbDelay)
    
    pNative.ReflectionsGain = CSng(pI3DL2.Reflections / 100.0!)
    pNative.ReverbGain = CSng(pI3DL2.Reverb / 100.0!)
    pNative.EarlyDiffusion = CByte(15.0! * pI3DL2.Diffusion / 100.0!)
    pNative.LateDiffusion = pNative.EarlyDiffusion
    pNative.Density = pI3DL2.Density
    pNative.RoomFilterFreq = pI3DL2.HFReference

    pNative.WetDryMix = pI3DL2.WetDryMix
    pNative.DisableLateField = CFALSE
    
End Sub
#End If

Public Function XAUDIO2FX_I3DL2_PRESET_DEFAULT() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_DEFAULT: .WetDryMix = 100: .Room = -10000: .RoomHF = 0: .RoomRolloffFactor = 0.0!: .DecayTime = 1.00!: .DecayHFRatio = 0.50!: .Reflections = -10000: .ReflectionsDelay = 0.020!: .Reverb = -10000: .ReverbDelay = 0.040!: .Diffusion = 100.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_GENERIC() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_GENERIC: .WetDryMix = 100: .Room = -1000: .RoomHF = -100: .RoomRolloffFactor = 0.0!: .DecayTime = 1.49!: .DecayHFRatio = 0.83!: .Reflections = -2602: .ReflectionsDelay = 0.007!: .Reverb = 200: .ReverbDelay = 0.011!: .Diffusion = 100.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_PADDEDCELL() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_PADDEDCELL: .WetDryMix = 100: .Room = -1000: .RoomHF = -6000: .RoomRolloffFactor = 0.0!: .DecayTime = 0.17!: .DecayHFRatio = 0.10!: .Reflections = -1204: .ReflectionsDelay = 0.001!: .Reverb = 207: .ReverbDelay = 0.002!: .Diffusion = 100.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_ROOM() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_ROOM: .WetDryMix = 100: .Room = -1000: .RoomHF = -454: .RoomRolloffFactor = 0.0!: .DecayTime = 0.40!: .DecayHFRatio = 0.83!: .Reflections = -1646: .ReflectionsDelay = 0.002!: .Reverb = 53: .ReverbDelay = 0.003!: .Diffusion = 100.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_BATHROOM() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_BATHROOM: .WetDryMix = 100: .Room = -1000: .RoomHF = -1200: .RoomRolloffFactor = 0.0!: .DecayTime = 1.49!: .DecayHFRatio = 0.54!: .Reflections = -370: .ReflectionsDelay = 0.007!: .Reverb = 1030: .ReverbDelay = 0.011!: .Diffusion = 100.0!: .Density = 60.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_LIVINGROOM() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_LIVINGROOM: .WetDryMix = 100: .Room = -1000: .RoomHF = -6000: .RoomRolloffFactor = 0.0!: .DecayTime = 0.50!: .DecayHFRatio = 0.10!: .Reflections = -1376: .ReflectionsDelay = 0.003!: .Reverb = -1104: .ReverbDelay = 0.004!: .Diffusion = 100.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_STONEROOM() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_STONEROOM: .WetDryMix = 100: .Room = -1000: .RoomHF = -300: .RoomRolloffFactor = 0.0!: .DecayTime = 2.31!: .DecayHFRatio = 0.64!: .Reflections = -711: .ReflectionsDelay = 0.012!: .Reverb = 83: .ReverbDelay = 0.017!: .Diffusion = 100.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_AUDITORIUM() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_AUDITORIUM: .WetDryMix = 100: .Room = -1000: .RoomHF = -476: .RoomRolloffFactor = 0.0!: .DecayTime = 4.32!: .DecayHFRatio = 0.59!: .Reflections = -789: .ReflectionsDelay = 0.020!: .Reverb = -289: .ReverbDelay = 0.030!: .Diffusion = 100.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_CONCERTHALL() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_CONCERTHALL: .WetDryMix = 100: .Room = -1000: .RoomHF = -500: .RoomRolloffFactor = 0.0!: .DecayTime = 3.92!: .DecayHFRatio = 0.70!: .Reflections = -1230: .ReflectionsDelay = 0.020!: .Reverb = -2: .ReverbDelay = 0.029!: .Diffusion = 100.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_CAVE() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_CAVE: .WetDryMix = 100: .Room = -1000: .RoomHF = 0: .RoomRolloffFactor = 0.0!: .DecayTime = 2.91!: .DecayHFRatio = 1.30!: .Reflections = -602: .ReflectionsDelay = 0.015!: .Reverb = -302: .ReverbDelay = 0.022!: .Diffusion = 100.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_ARENA() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_ARENA: .WetDryMix = 100: .Room = -1000: .RoomHF = -698: .RoomRolloffFactor = 0.0!: .DecayTime = 7.24!: .DecayHFRatio = 0.33!: .Reflections = -1166: .ReflectionsDelay = 0.020!: .Reverb = 16: .ReverbDelay = 0.030!: .Diffusion = 100.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_HANGAR() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_HANGAR: .WetDryMix = 100: .Room = -1000: .RoomHF = -1000: .RoomRolloffFactor = 0.0!: .DecayTime = 10.05!: .DecayHFRatio = 0.23!: .Reflections = -602: .ReflectionsDelay = 0.020!: .Reverb = 198: .ReverbDelay = 0.030!: .Diffusion = 100.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_CARPETEDHALLWAY() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_CARPETEDHALLWAY: .WetDryMix = 100: .Room = -1000: .RoomHF = -4000: .RoomRolloffFactor = 0.0!: .DecayTime = 0.30!: .DecayHFRatio = 0.10!: .Reflections = -1831: .ReflectionsDelay = 0.002!: .Reverb = -1630: .ReverbDelay = 0.030!: .Diffusion = 100.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_HALLWAY() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_HALLWAY: .WetDryMix = 100: .Room = -1000: .RoomHF = -300: .RoomRolloffFactor = 0.0!: .DecayTime = 1.49!: .DecayHFRatio = 0.59!: .Reflections = -1219: .ReflectionsDelay = 0.007!: .Reverb = 441: .ReverbDelay = 0.011!: .Diffusion = 100.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_STONECORRIDOR() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_STONECORRIDOR: .WetDryMix = 100: .Room = -1000: .RoomHF = -237: .RoomRolloffFactor = 0.0!: .DecayTime = 2.70!: .DecayHFRatio = 0.79!: .Reflections = -1214: .ReflectionsDelay = 0.013!: .Reverb = 395: .ReverbDelay = 0.020!: .Diffusion = 100.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_ALLEY() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_ALLEY: .WetDryMix = 100: .Room = -1000: .RoomHF = -270: .RoomRolloffFactor = 0.0!: .DecayTime = 1.49!: .DecayHFRatio = 0.86!: .Reflections = -1204: .ReflectionsDelay = 0.007!: .Reverb = -4: .ReverbDelay = 0.011!: .Diffusion = 100.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_FOREST() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_FOREST: .WetDryMix = 100: .Room = -1000: .RoomHF = -3300: .RoomRolloffFactor = 0.0!: .DecayTime = 1.49!: .DecayHFRatio = 0.54!: .Reflections = -2560: .ReflectionsDelay = 0.162!: .Reverb = -613: .ReverbDelay = 0.088!: .Diffusion = 79.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_CITY() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_CITY: .WetDryMix = 100: .Room = -1000: .RoomHF = -800: .RoomRolloffFactor = 0.0!: .DecayTime = 1.49!: .DecayHFRatio = 0.67!: .Reflections = -2273: .ReflectionsDelay = 0.007!: .Reverb = -2217: .ReverbDelay = 0.011!: .Diffusion = 50.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_MOUNTAINS() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_MOUNTAINS: .WetDryMix = 100: .Room = -1000: .RoomHF = -2500: .RoomRolloffFactor = 0.0!: .DecayTime = 1.49!: .DecayHFRatio = 0.21!: .Reflections = -2780: .ReflectionsDelay = 0.300!: .Reverb = -2014: .ReverbDelay = 0.100!: .Diffusion = 27.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_QUARRY() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_QUARRY: .WetDryMix = 100: .Room = -1000: .RoomHF = -1000: .RoomRolloffFactor = 0.0!: .DecayTime = 1.49!: .DecayHFRatio = 0.83!: .Reflections = -10000: .ReflectionsDelay = 0.061!: .Reverb = 500: .ReverbDelay = 0.025!: .Diffusion = 100.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_PLAIN() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_PLAIN: .WetDryMix = 100: .Room = -1000: .RoomHF = -2000: .RoomRolloffFactor = 0.0!: .DecayTime = 1.49!: .DecayHFRatio = 0.50!: .Reflections = -2466: .ReflectionsDelay = 0.179!: .Reverb = -2514: .ReverbDelay = 0.100!: .Diffusion = 21.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_PARKINGLOT() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_PARKINGLOT: .WetDryMix = 100: .Room = -1000: .RoomHF = 0: .RoomRolloffFactor = 0.0!: .DecayTime = 1.65!: .DecayHFRatio = 1.50!: .Reflections = -1363: .ReflectionsDelay = 0.008!: .Reverb = -1153: .ReverbDelay = 0.012!: .Diffusion = 100.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_SEWERPIPE() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_SEWERPIPE: .WetDryMix = 100: .Room = -1000: .RoomHF = -1000: .RoomRolloffFactor = 0.0!: .DecayTime = 2.81!: .DecayHFRatio = 0.14!: .Reflections = 429: .ReflectionsDelay = 0.014!: .Reverb = 648: .ReverbDelay = 0.021!: .Diffusion = 80.0!: .Density = 60.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_UNDERWATER() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_UNDERWATER: .WetDryMix = 100: .Room = -1000: .RoomHF = -4000: .RoomRolloffFactor = 0.0!: .DecayTime = 1.49!: .DecayHFRatio = 0.10!: .Reflections = -449: .ReflectionsDelay = 0.007!: .Reverb = 1700: .ReverbDelay = 0.011!: .Diffusion = 100.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_SMALLROOM() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_SMALLROOM: .WetDryMix = 100: .Room = -1000: .RoomHF = -600: .RoomRolloffFactor = 0.0!: .DecayTime = 1.10!: .DecayHFRatio = 0.83!: .Reflections = -400: .ReflectionsDelay = 0.005!: .Reverb = 500: .ReverbDelay = 0.010!: .Diffusion = 100.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_MEDIUMROOM() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_MEDIUMROOM: .WetDryMix = 100: .Room = -1000: .RoomHF = -600: .RoomRolloffFactor = 0.0!: .DecayTime = 1.30!: .DecayHFRatio = 0.83!: .Reflections = -1000: .ReflectionsDelay = 0.010!: .Reverb = -200: .ReverbDelay = 0.020!: .Diffusion = 100.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_LARGEROOM() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_LARGEROOM: .WetDryMix = 100: .Room = -1000: .RoomHF = -600: .RoomRolloffFactor = 0.0!: .DecayTime = 1.50!: .DecayHFRatio = 0.83!: .Reflections = -1600: .ReflectionsDelay = 0.020!: .Reverb = -1000: .ReverbDelay = 0.040!: .Diffusion = 100.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_MEDIUMHALL() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_MEDIUMHALL: .WetDryMix = 100: .Room = -1000: .RoomHF = -600: .RoomRolloffFactor = 0.0!: .DecayTime = 1.80!: .DecayHFRatio = 0.70!: .Reflections = -1300: .ReflectionsDelay = 0.015!: .Reverb = -800: .ReverbDelay = 0.030!: .Diffusion = 100.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_LARGEHALL() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_LARGEHALL: .WetDryMix = 100: .Room = -1000: .RoomHF = -600: .RoomRolloffFactor = 0.0!: .DecayTime = 1.80!: .DecayHFRatio = 0.70!: .Reflections = -2000: .ReflectionsDelay = 0.030!: .Reverb = -1400: .ReverbDelay = 0.060!: .Diffusion = 100.0!: .Density = 100.0!: .HFReference = 5000.0!: End With
End Function
Public Function XAUDIO2FX_I3DL2_PRESET_PLATE() As XAUDIO2FX_REVERB_I3DL2_PARAMETERS
With XAUDIO2FX_I3DL2_PRESET_PLATE: .WetDryMix = 100: .Room = -1000: .RoomHF = -200: .RoomRolloffFactor = 0.0!: .DecayTime = 1.30!: .DecayHFRatio = 0.90!: .Reflections = 0: .ReflectionsDelay = 0.002!: .Reverb = 0: .ReverbDelay = 0.010!: .Diffusion = 100.0!: .Density = 75.0!: .HFReference = 5000.0!: End With
End Function
#End If

'x3daudio.h

Public Enum SPEAKER_GEOMETRY
    SPEAKER_MONO = SPEAKER_FRONT_CENTER
    SPEAKER_STEREO = (SPEAKER_FRONT_LEFT Or SPEAKER_FRONT_RIGHT)
    SPEAKER_2POINT1 = (SPEAKER_FRONT_LEFT Or SPEAKER_FRONT_RIGHT Or SPEAKER_LOW_FREQUENCY)
    SPEAKER_SURROUND = (SPEAKER_FRONT_LEFT Or SPEAKER_FRONT_RIGHT Or SPEAKER_FRONT_CENTER Or SPEAKER_BACK_CENTER)
    SPEAKER_QUAD = (SPEAKER_FRONT_LEFT Or SPEAKER_FRONT_RIGHT Or SPEAKER_BACK_LEFT Or SPEAKER_BACK_RIGHT)
    SPEAKER_4POINT1 = (SPEAKER_FRONT_LEFT Or SPEAKER_FRONT_RIGHT Or SPEAKER_LOW_FREQUENCY Or SPEAKER_BACK_LEFT Or SPEAKER_BACK_RIGHT)
    SPEAKER_5POINT1 = (SPEAKER_FRONT_LEFT Or SPEAKER_FRONT_RIGHT Or SPEAKER_FRONT_CENTER Or SPEAKER_LOW_FREQUENCY Or SPEAKER_BACK_LEFT Or SPEAKER_BACK_RIGHT)
    SPEAKER_7POINT1 = (SPEAKER_FRONT_LEFT Or SPEAKER_FRONT_RIGHT Or SPEAKER_FRONT_CENTER Or SPEAKER_LOW_FREQUENCY Or SPEAKER_BACK_LEFT Or SPEAKER_BACK_RIGHT Or SPEAKER_FRONT_LEFT_OF_CENTER Or SPEAKER_FRONT_RIGHT_OF_CENTER)
    SPEAKER_5POINT1_SURROUND = (SPEAKER_FRONT_LEFT Or SPEAKER_FRONT_RIGHT Or SPEAKER_FRONT_CENTER Or SPEAKER_LOW_FREQUENCY Or SPEAKER_SIDE_LEFT Or SPEAKER_SIDE_RIGHT)
    SPEAKER_7POINT1_SURROUND = (SPEAKER_FRONT_LEFT Or SPEAKER_FRONT_RIGHT Or SPEAKER_FRONT_CENTER Or SPEAKER_LOW_FREQUENCY Or SPEAKER_BACK_LEFT Or SPEAKER_BACK_RIGHT Or SPEAKER_SIDE_LEFT Or SPEAKER_SIDE_RIGHT)
End Enum

Public Const X3DAUDIO_HANDLE_BYTESIZE  = 20
'  float math constants
Public Const X3DAUDIO_PI As Single = 3.141592654!
Public Const X3DAUDIO_2PI As Single = 6.283185307!
'  speed of sound in meters per second for dry air at approximately 20C, used with X3DAudioInitialize
Public Const X3DAUDIO_SPEED_OF_SOUND As Single = 343.5!

Public Enum X3DAudioControlFlags
    X3DAUDIO_CALCULATE_MATRIX = &H00000001  ' enable matrix coefficient table calculation
    X3DAUDIO_CALCULATE_DELAY = &H00000002  ' enable delay time array calculation (stereo final mix only)
    X3DAUDIO_CALCULATE_LPF_DIRECT = &H00000004  ' enable LPF direct-path coefficient calculation
    X3DAUDIO_CALCULATE_LPF_REVERB = &H00000008  ' enable LPF reverb-path coefficient calculation
    X3DAUDIO_CALCULATE_REVERB = &H00000010  ' enable reverb send level calculation
    X3DAUDIO_CALCULATE_DOPPLER = &H00000020  ' enable doppler shift factor calculation
    X3DAUDIO_CALCULATE_EMITTER_ANGLE = &H00000040  ' enable emitter-to-listener interior angle calculation
    X3DAUDIO_CALCULATE_ZEROCENTER = &H00010000  ' do not position to front center speaker, signal positioned to remaining speakers instead, front center destination channel will be zero in returned matrix coefficient table, valid only for matrix calculations with final mix formats that have a front center channel
    X3DAUDIO_CALCULATE_REDIRECT_TO_LFE = &H00020000  ' apply equal mix of all source channels to LFE destination channel, valid only for matrix calculations with sources that have no LFE channel and final mix formats that have an LFE channel
End Enum

Public Type XMFLOAT3
    x As Single
    y As Single
    z As Single
End Type
'Alias X3DAUDIO_VECTOR As XMFLOAT3
Public Type X3DAUDIO_VECTOR
    x As Single
    y As Single
    z As Single
End Type

Public Type X3DAUDIO_DISTANCE_CURVE_POINT
    Distance As Single  ' normalized distance, must be within [0.0f, 1.0f]
    DSPSetting As Single  ' DSP setting
End Type

[PackingAlignment(1)]
Public Type X3DAUDIO_DISTANCE_CURVE
    pPoints As LongPtr 'X3DAUDIO_DISTANCE_CURVE_POINT* ' distance curve point array, must have at least PointCount elements with no duplicates and be sorted in ascending order with respect to Distance
    PointCount As Long ' number of distance curve points, must be >= 2 as all distance curves must have at least two endpoints, defining DSP settings at 0.0f and 1.0f normalized distance
End Type

Public Type X3DAUDIO_CONE
    InnerAngle As Single ' inner cone angle in radians, must be within [0.0f, X3DAUDIO_2PI]
    OuterAngle As Single ' outer cone angle in radians, must be within [InnerAngle, X3DAUDIO_2PI]
    InnerVolume As Single ' volume level scaler on/within inner cone, used only for matrix calculations, must be within [0.0f, 2.0f] when used
    OuterVolume As Single ' volume level scaler on/beyond outer cone, used only for matrix calculations, must be within [0.0f, 2.0f] when used
    InnerLPF As Single ' LPF (both direct and reverb paths) coefficient subtrahend on/within inner cone, used only for LPF (both direct and reverb paths) calculations, must be within [0.0f, 1.0f] when used
    OuterLPF As Single ' LPF (both direct and reverb paths) coefficient subtrahend on/beyond outer cone, used only for LPF (both direct and reverb paths) calculations, must be within [0.0f, 1.0f] when used
    InnerReverb As Single ' reverb send level scaler on/within inner cone, used only for reverb calculations, must be within [0.0f, 2.0f] when used
    OuterReverb As Single ' reverb send level scaler on/beyond outer cone, used only for reverb calculations, must be within [0.0f, 2.0f] when used
End Type

Public Function X3DAudioDefault_DirectionalCone() As X3DAUDIO_CONE
    With X3DAudioDefault_DirectionalCone
        .InnerAngle = CSng(X3DAUDIO_PI / 2)
        .OuterAngle = X3DAUDIO_PI
        .InnerVolume = 1.0!
        .OuterVolume = 0.708!
        .InnerLPF = 0.0!
        .OuterLPF = 0.25!
        .InnerReverb = 0.708!
        .OuterReverb = 1.0!
    End With
End Function

[PackingAlignment(1)]
Public Type X3DAUDIO_LISTENER
    OrientFront As X3DAUDIO_VECTOR ' orientation of front direction, used only for matrix and delay calculations or listeners with cones for matrix, LPF (both direct and reverb paths), and reverb calculations, must be normalized when used
    OrientTop As X3DAUDIO_VECTOR ' orientation of top direction, used only for matrix and delay calculations, must be orthonormal with OrientFront when used
    Position As X3DAUDIO_VECTOR ' position in user-defined world units, does not affect Velocity
    Velocity As X3DAUDIO_VECTOR ' velocity vector in user-defined world units/second, used only for doppler calculations, does not affect Position
    pCone As LongPtr 'X3DAUDIO_CONE* ' sound cone, used only for matrix, LPF (both direct and reverb paths), and reverb calculations, NULL specifies omnidirectionality
End Type

[PackingAlignment(1)]
Public Type X3DAUDIO_EMITTER
    pCone As LongPtr 'X3DAUDIO_CONE* ' sound cone, used only with single-channel emitters for matrix, LPF (both direct and reverb paths), and reverb calculations, NULL specifies omnidirectionality
    OrientFront As X3DAUDIO_VECTOR ' orientation of front direction, used only for emitter angle calculations or with multi-channel emitters for matrix calculations or single-channel emitters with cones for matrix, LPF (both direct and reverb paths), and reverb calculations, must be normalized when used
    OrientTop As X3DAUDIO_VECTOR ' orientation of top direction, used only with multi-channel emitters for matrix calculations, must be orthonormal with OrientFront when used
    Position As X3DAUDIO_VECTOR ' position in user-defined world units, does not affect Velocity
    Velocity As X3DAUDIO_VECTOR ' velocity vector in user-defined world units/second, used only for doppler calculations, does not affect Position
    InnerRadius As Single ' inner radius, must be within [0.0f, FLT_MAX]
    InnerRadiusAngle As Single ' inner radius angle, must be within [0.0f, X3DAUDIO_PI/4.0)
    ChannelCount As Long ' number of sound channels, must be > 0
    ChannelRadius As Single ' channel radius, used only with multi-channel emitters for matrix calculations, must be >= 0.0f when used
    pChannelAzimuths As LongPtr 'FLOAT32* ' channel azimuth array, used only with multi-channel emitters for matrix calculations, contains positions of each channel expressed in radians along the channel radius with respect to the front orientation vector in the plane orthogonal to the top orientation vector, or X3DAUDIO_2PI to specify an LFE channel, must have at least ChannelCount elements, all within [0.0f, X3DAUDIO_2PI] when used
    pVolumeCurve As LongPtr 'X3DAUDIO_DISTANCE_CURVE* ' volume level distance curve, used only for matrix calculations, NULL specifies a default curve that conforms to the inverse square law, calculated in user-defined world units with distances <= CurveDistanceScaler clamped to no attenuation
    pLFECurve As LongPtr 'X3DAUDIO_DISTANCE_CURVE* ' LFE level distance curve, used only for matrix calculations, NULL specifies a default curve that conforms to the inverse square law, calculated in user-defined world units with distances <= CurveDistanceScaler clamped to no attenuation
    pLPFDirectCurve As LongPtr 'X3DAUDIO_DISTANCE_CURVE* ' LPF direct-path coefficient distance curve, used only for LPF direct-path calculations, NULL specifies the default curve: [0.0f,1.0f], [1.0f,0.75f]
    pLPFReverbCurve As LongPtr 'X3DAUDIO_DISTANCE_CURVE* ' LPF reverb-path coefficient distance curve, used only for LPF reverb-path calculations, NULL specifies the default curve: [0.0f,0.75f], [1.0f,0.75f]
    pReverbCurve As LongPtr 'X3DAUDIO_DISTANCE_CURVE* ' reverb send level distance curve, used only for reverb calculations, NULL specifies the default curve: [0.0f,1.0f], [1.0f,0.0f]
    CurveDistanceScaler As Single ' curve distance scaler, used to scale normalized distance curves to user-defined world units and/or exaggerate their effect, used only for matrix, LPF (both direct and reverb paths), and reverb calculations, must be within [FLT_MIN, FLT_MAX] when used
    DopplerScaler As Single ' doppler shift scaler, used to exaggerate doppler shift effect, used only for doppler calculations, must be within [0.0f, FLT_MAX] when used
End Type

[PackingAlignment(1)]
Public Type X3DAUDIO_DSP_SETTINGS
    pMatrixCoefficients As LongPtr 'FLOAT32* ' [inout] matrix coefficient table, receives an array representing the volume level used to send from source channel S to destination channel D, stored as pMatrixCoefficients[SrcChannelCount * D + S], must have at least SrcChannelCount*DstChannelCount elements
    pDelayTimes As LongPtr 'FLOAT32* ' [inout] delay time array, receives delays for each destination channel in milliseconds, must have at least DstChannelCount elements (stereo final mix only)
    SrcChannelCount As Long ' [in] number of source channels, must equal number of channels in respective emitter
    DstChannelCount As Long ' [in] number of destination channels, must equal number of channels of the final mix
    LPFDirectCoefficient As Single ' [out] LPF direct-path coefficient
    LPFReverbCoefficient As Single ' [out] LPF reverb-path coefficient
    ReverbLevel As Single ' [out] reverb send level
    DopplerFactor As Single ' [out] doppler shift factor, scales resampler ratio for doppler shift effect, where the effective frequency = DopplerFactor * original frequency
    EmitterToListenerAngle As Single ' [out] emitter-to-listener interior angle, expressed in radians with respect to the emitter's front orientation
    EmitterToListenerDistance As Single ' [out] distance in user-defined world units from the emitter base to listener position, always calculated
    EmitterVelocityComponent As Single ' [out] component of emitter velocity vector projected onto emitter->listener vector in user-defined world units/second, calculated only for doppler
    ListenerVelocityComponent As Single ' [out] component of listener velocity vector projected onto emitter->listener vector in user-defined world units/second, calculated only for doppler
End Type

[UseGetLastError(False)]
#If WDL_XAUDIO8 Then
Public Declare PtrSafe Function X3DAudioInitialize Lib "xaudio2_8.dll" (ByVal SpeakerChannelMask As Long, ByVal SpeedOfSound As Single, Instance As Byte) as Long
Public Declare PtrSafe Sub X3DAudioCalculate Lib "xaudio2_8.dlll" (Instance As Byte, pListener As X3DAUDIO_LISTENER, pEmitter As X3DAUDIO_EMITTER, [TypeHint(X3DAudioControlFlags)] ByVal Flags As Long, pDSPSettings As X3DAUDIO_DSP_SETTINGS)
#Else
Public Declare PtrSafe Function X3DAudioInitialize Lib "xaudio2_9d.dll" (ByVal SpeakerChannelMask As Long, ByVal SpeedOfSound As Single, Instance As Byte) As Long
Public Declare PtrSafe Sub X3DAudioCalculate Lib "xaudio2_9d.dll" (Instance As Byte, pListener As X3DAUDIO_LISTENER, pEmitter As X3DAUDIO_EMITTER, [TypeHint(X3DAudioControlFlags)] ByVal Flags As Long, pDSPSettings As X3DAUDIO_DSP_SETTINGS)
#End If
  
'hrtfapoapi.h

Public Const HRTF_MAX_GAIN_LIMIT As Single = 12.0!
Public Const HRTF_MIN_GAIN_LIMIT As Single = -96.0!
Public Const HRTF_MIN_UNITY_GAIN_DISTANCE As Single = 0.05!
Public Const HRTF_DEFAULT_UNITY_GAIN_DISTANCE  As Single = 1.0!
#If WINDEVLIB_LITE Then
Public Const HRTF_DEFAULT_CUTOFF_DISTANCE As Single = 3.402823466e+38!   ' max value
#Else
Public Const HRTF_DEFAULT_CUTOFF_DISTANCE As Single = FLT_MAX
#End If
 
Public Type HrtfPosition
    x As Single
    y As Single
    z As Single
End Type

Public Type HrtfOrientation
    element(0 To 8) As Single
End Type

Public Enum HrtfDirectivityType
    ' ! The sound emission is in all directions.
    HrtfOmniDirectional = 0
    ' ! The sound emission is a cardiod shape.
    HrtfCardioid
    ' ! The sound emission is a cone.
    HrtfCone
End Enum

Public Enum HrtfEnvironment
    ' ! A small room.
    HrtfSmall = 0
    ' ! A medium-sized room.
    HrtfMedium = 1
    ' ! A large enclosed space.
    HrtfLarge = 2
    ' ! An outdoor space.
    HrtfOutdoors = 3
End Enum

Public Type HrtfDirectivity
    '! Indicates the type of directivity.
    type As HrtfDirectivityType
    '! A normalized value between zero and one. Specifies the amount of linear interpolation between omnidirectional sound and the full directivity pattern, where 0 is fully omnidirectional and 1 is fully directional.
    scaling As Single
End Type

Public Type HrtfDirectivityCardioid
    '! Descriptor for the cardioid pattern. The type parameter must be set to HrtfDirectivityType.Cardioid.
    directivity As HrtfDirectivity
    '! Order controls the shape of the cardioid. The higher order the shape, the narrower it is. Must be greater than 0 and less than or equal to 32.
    order As Single
End Type

Public Type HrtfDirectivityCone
    '! Descriptor for the cone pattern. The type parameter must be set to HrtfDirectivityType.Cone.
    directivity As HrtfDirectivity
    '! Angle, in radians, that defines the inner cone. Must be between 0 and 2 * pi.
    innerAngle As Single
    '! Angle, in radians, that defines the outer cone. Must be between 0 and 2 * pi.
    outerAngle As Single
End Type

Public Enum HrtfDistanceDecayType
    ' ! Simulates natural decay with distance, as constrained by minimum and maximum gain distance limits. Drops to silence at rolloff distance.
    NaturalDecay = 0
    ' ! Used to set up a custom gain curve, within the maximum and minimum gain limit.
    CustomDecay
End Enum

Public Type HrtfDistanceDecay
    '! The type of decay behavior, natural or custom.
    type As HrtfDistanceDecayType
    '! The maximum gain limit applied at any distance. Applies to both natural and custom decay. This value is specified in dB, with a range from -96 to 12 inclusive. The default value is 12 dB.
    maxGain As Single
    '! The minimum gain limit applied at any distance. Applies to both natural and custom decay. This value is specified in dB, with a range from -96 to 12 inclusive. The default value is -96 dB.
    minGain As Single
    '! The distance at which the gain is 0dB. Applies to natural decay only. This value is specified in meters, with a range from 0.05 to infinity (FLT_MAX). The default value is 1 meter.
    unityGainDistance As Single
    '! The distance at which output is silent. Applies to natural decay only. This value is specified in meters, with a range from zero (non-inclusive) to infinity (FLT_MAX). The default value is infinity.
    cutoffDistance As Single
End Type

Public Type HrtfApoInit
    '! The decay type. If you pass in nullptr, the default value will be used. The default is natural decay.
    distanceDecay As LongPtr 'HrtfDistanceDecay
    '! The directivity type. If you pass in nullptr, the default value will be used. The default directivity is omni-directional.
    directivity As LongPtr 'HrtfDirectivity
End Type

[UseGetLastError(False)]
Public Declare PtrSafe Function CreateHrtfApo Lib "HrtfApo.dll" (Init As HrtfApoInit, xApo As IXAPO) As Long












Public Function IID_IXAPO() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA410B984, &H9839, &H4819, &HA0, &HBE, &H28, &H56, &HAE, &H6B, &H3A, &HDB)
IID_IXAPO = iid
End Function
Public Function IID_IXAPOParameters() As UUID
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H26D95C66, &H80F2, &H499A, &HAD, &H54, &H5A, &HE7, &HF0, &H1C, &H6D, &H98)
IID_IXAPOParameters = iid
End Function

#If WDL_XAUDIO8 = 0 Then
Public Function IID_IXAudio2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2B02E3CF, &H2E0B, &H4ec3, &HBE, &H45, &H1B, &H2A, &H3F, &HE7, &H21, &H0D)
IID_IXAudio2 = iid
End Function
Public Function IID_IXAudio2Extension() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H84ac29bb, &Hd619, &H44d2, &Hb1, &H97, &He4, &Hac, &Hf7, &Hdf, &H3e, &Hd6)
IID_IXAudio2Extension = iid
End Function
#Else
Public Function IID_IXAudio2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H60d8dac8, &H5aa1, &H4e8e, &Hb5, &H97, &H2f, &H5e, &H28, &H83, &Hd4, &H84)
IID_IXAudio2 = iid
End Function
#End If

Public Function CLSID_AudioVolumeMeter() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4FC3B166, &H972A, &H40CF, &HBC, &H37, &H7D, &HB0, &H3D, &HB2, &HFB, &HA3)
CLSID_AudioVolumeMeter = iid
End Function
Public Function CLSID_AudioReverb() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC2633B16, &H471B, &H4498, &HB8, &HC5, &H4F, &H09, &H59, &HE2, &HEC, &H09)
CLSID_AudioReverb = iid
End Function

End Module

#End If