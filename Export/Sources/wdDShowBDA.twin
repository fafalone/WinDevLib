'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************


'DirectShow Broadcast/Tuner/related


'bdatypes.h
'bdaiface_enums.h
'bdaiface.h/bdaiface.idl 
' mpeg2structs.h/Mpeg2Structs.idl
' Mpeg2Bits.h
' Mpeg2Data.h/Mpeg2Data.idl 
'Mpeg2PsiParser.idl
'AtscPsipParser.idl

'Note: Base tuner interfaces are in VBx/tB compatible "Microsoft Tuner v1.0 Type Library"

#If WDL_NO_DIRECTX = 0 Then


[InterfaceId("FD501041-8EBE-11CE-8183-00AA00577DA2")]
[OleAutomation(False)]
Interface IBDA_NetworkProvider Extends stdole.IUnknown
    Sub PutSignalSource(ByVal ulSignalSource As Long)
    Sub GetSignalSource(ByRef pulSignalSource As Long)
    Sub GetNetworkType(ByRef pguidNetworkType As UUID)
    Sub PutTuningSpace(ByRef guidTuningSpace As UUID)
    Sub GetTuningSpace(ByRef pguidTuingSpace As UUID)
    Sub RegisterDeviceFilter(ByVal pUnkFilterControl As IUnknown, ByRef ppvRegisitrationContext As Long)
    Sub UnRegisterDeviceFilter(ByVal pvRegistrationContext As Long)
End Interface

[InterfaceId("71985F43-1CA1-11D3-9CC8-00C04F7971E0")]
[OleAutomation(False)]
Interface IBDA_EthernetFilter Extends stdole.IUnknown
    Sub GetMulticastListSize(ByRef pulcbAddresses As Long)
    Sub PutMulticastList(ByVal ulcbAddresses As Long, ByRef pAddressList As Byte)
    Sub GetMulticastList(ByRef pulcbAddresses As Long, ByRef pAddressList As Byte)
    Sub PutMulticastMode(ByVal ulModeMask As Long)
    Sub GetMulticastMode(ByRef pulModeMask As Long)
End Interface

[InterfaceId("71985F44-1CA1-11D3-9CC8-00C04F7971E0")]
[OleAutomation(False)]
Interface IBDA_IPV4Filter Extends stdole.IUnknown
    Sub GetMulticastListSize(ByRef pulcbAddresses As Long)
    Sub PutMulticastList(ByVal ulcbAddresses As Long, ByRef pAddressList As Byte)
    Sub GetMulticastList(ByRef pulcbAddresses As Long, ByRef pAddressList As Byte)
    Sub PutMulticastMode(ByVal ulModeMask As Long)
    Sub GetMulticastMode(ByRef pulModeMask As Long)
End Interface

[InterfaceId("E1785A74-2A23-4FB3-9245-A8F88017EF33")]
[OleAutomation(False)]
Interface IBDA_IPV6Filter Extends stdole.IUnknown
    Sub GetMulticastListSize(ByRef pulcbAddresses As Long)
    Sub PutMulticastList(ByVal ulcbAddresses As Long, ByRef pAddressList As Byte)
    Sub GetMulticastList(ByRef pulcbAddresses As Long, ByRef pAddressList As Byte)
    Sub PutMulticastMode(ByVal ulModeMask As Long)
    Sub GetMulticastMode(ByRef pulModeMask As Long)
End Interface

[InterfaceId("FD0A5AF3-B41D-11D2-9C95-00C04F7971E0")]
[OleAutomation(False)]
Interface IBDA_DeviceControl Extends stdole.IUnknown
    Sub StartChanges()
    Sub CheckChanges()
    Sub CommitChanges()
    Sub GetChangeState(ByRef pState As Long)
End Interface

[InterfaceId("0DED49D5-A8B7-4D5D-97A1-12B0C195874D")]
[OleAutomation(False)]
Interface IBDA_PinControl Extends stdole.IUnknown
    Sub GetPinID(ByRef pulPinID As Long)
    Sub GetPinType(ByRef pulPinType As Long)
    Sub RegistrationContext(ByRef pulRegistrationCtx As Long)
End Interface

[InterfaceId("D2F1644B-B409-11D2-BC69-00A0C9EE9E16")]
[OleAutomation(False)]
Interface IBDA_SignalProperties Extends stdole.IUnknown
    Sub PutNetworkType(ByRef guidNetworkType As UUID)
    Sub GetNetworkType(ByRef pguidNetworkType As UUID)
    Sub PutSignalSource(ByVal ulSignalSource As Long)
    Sub GetSignalSource(ByRef pulSignalSource As Long)
    Sub PutTuningSpace(ByRef guidTuningSpace As UUID)
    Sub GetTuningSpace(ByRef pguidTuingSpace As UUID)
End Interface

[InterfaceId("1347D106-CF3A-428A-A5CB-AC0D9A2A4338")]
[OleAutomation(False)]
Interface IBDA_SignalStatistics Extends stdole.IUnknown
    Sub put_SignalStrength(ByVal lDbStrength As Long)
    Sub get_SignalStrength(ByRef plDbStrength As Long)
    Sub put_SignalQuality(ByVal lPercentQuality As Long)
    Sub get_SignalQuality(ByRef plPercentQuality As Long)
    Sub put_SignalPresent(ByVal fPresent As Boolean)
    Sub get_SignalPresent(ByRef pfPresent As Boolean)
    Sub put_SignalLocked(ByVal fLocked As Boolean)
    Sub get_SignalLocked(ByRef pfLocked As Boolean)
    Sub put_SampleTime(ByVal lmsSampleTime As Long)
    Sub get_SampleTime(ByRef plmsSampleTime As Long)
End Interface

[InterfaceId("79B56888-7FEA-4690-B45D-38FD3C7849BE")]
[OleAutomation(False)]
Interface IBDA_Topology Extends stdole.IUnknown
    Sub GetNodeTypes(ByRef pulcNodeTypes As Long, ByVal ulcNodeTypesMax As Long, ByRef rgulNodeTypes As Long)
    Sub GetNodeDescriptors(ByRef ulcNodeDescriptors As Long, ByVal ulcNodeDescriptorsMax As Long, ByRef rgNodeDescriptors As BDANODE_DESCRIPTOR)
    Sub GetNodeInterfaces(ByVal ulNodeType As Long, ByRef pulcInterfaces As Long, ByVal ulcInterfacesMax As Long, ByRef rgguidInterfaces As UUID)
    Sub GetPinTypes(ByRef pulcPinTypes As Long, ByVal ulcPinTypesMax As Long, ByRef rgulPinTypes As Long)
    Sub GetTemplateConnections(ByRef pulcConnections As Long, ByVal ulcConnectionsMax As Long, ByRef rgConnections As BDA_TEMPLATE_CONNECTION)
    Sub CreatePin(ByVal ulPinType As Long, ByRef pulPinID As Long)
    Sub DeletePin(ByVal ulPinId As Long)
    Sub SetMediaType(ByVal ulPinId As Long, ByRef pMediaType As AM_MEDIA_TYPE)
    Sub SetMedium(ByVal ulPinId As Long, ByRef pmedium As REGPINMEDIUM)
    Sub CreateTopology(ByVal ulInputPinId As Long, ByVal ulOutputPinId As Long)
    Sub GetControlNode(ByVal ulInputPinId As Long, ByVal ulOutputPinId As Long, ByVal ulNodeType As Long, ByRef ppControlNode As IUnknown)
End Interface

[InterfaceId("71985F46-1CA1-11D3-9CC8-00C04F7971E0")]
[OleAutomation(False)]
Interface IBDA_VoidTransform Extends stdole.IUnknown
    Sub Start()
    Sub Stop()
End Interface

[InterfaceId("DDF15B0D-BD25-11D2-9CA0-00C04F7971E0")]
[OleAutomation(False)]
Interface IBDA_NullTransform Extends stdole.IUnknown
    Sub Start()
    Sub Stop()
End Interface

[InterfaceId("71985F47-1CA1-11D3-9CC8-00C04F7971E0")]
[OleAutomation(False)]
Interface IBDA_FrequencyFilter Extends stdole.IUnknown
    Sub put_Autotune(ByVal ulTransponder As Long)
    Sub get_Autotune(ByRef pulTransponder As Long)
    Sub put_Frequency(ByVal ulFrequency As Long)
    Sub get_Frequency(ByRef pulFrequency As Long)
    Sub put_Polarity(ByVal Polarity As Polarisation)
    Sub get_Polarity(ByRef pPolarity As Polarisation)
    Sub put_Range(ByVal ulRange As Long)
    Sub get_Range(ByRef pulRange As Long)
    Sub put_Bandwidth(ByVal ulBandwidth As Long)
    Sub get_Bandwidth(ByRef pulBandwidth As Long)
    Sub put_FrequencyMultiplier(ByVal ulMultiplier As Long)
    Sub get_FrequencyMultiplier(ByRef pulMultiplier As Long)
End Interface

[InterfaceId("992CF102-49F9-4719-A664-C4F23E2408F4")]
[OleAutomation(False)]
Interface IBDA_LNBInfo Extends stdole.IUnknown
    Sub put_LocalOscilatorFrequencyLowBand(ByVal ulLOFLow As Long)
    Sub get_LocalOscilatorFrequencyLowBand(ByRef pulLOFLow As Long)
    Sub put_LocalOscilatorFrequencyHighBand(ByVal ulLOFHigh As Long)
    Sub get_LocalOscilatorFrequencyHighBand(ByRef pulLOFHigh As Long)
    Sub put_HighLowSwitchFrequency(ByVal ulSwitchFrequency As Long)
    Sub get_HighLowSwitchFrequency(ByRef pulSwitchFrequency As Long)
End Interface

[InterfaceId("F84E2AB0-3C6B-45E3-A0FC-8669D4B81F11")]
[OleAutomation(False)]
Interface IBDA_DiseqCommand Extends stdole.IUnknown
    Sub put_EnableDiseqCommands(ByVal bEnable As Boolean)
    Sub put_DiseqLNBSource(ByVal ulLNBSource As Long)
    Sub put_DiseqUseToneBurst(ByVal bUseToneBurst As Boolean)
    Sub put_DiseqRepeats(ByVal ulRepeats As Long)
    Sub put_DiseqSendCommand(ByVal ulRequestId As Long, ByVal ulcbCommandLen As Long, ByRef pbCommand As Byte)
    Sub get_DiseqResponse(ByVal ulRequestId As Long, ByRef pulcbResponseLen As Long, ByRef pbResponse As Byte)
End Interface

[InterfaceId("DDF15B12-BD25-11D2-9CA0-00C04F7971E0")]
[OleAutomation(False)]
Interface IBDA_AutoDemodulate Extends stdole.IUnknown
    Sub put_AutoDemodulate()
End Interface

[InterfaceId("34518D13-1182-48E6-B28F-B24987787326")]
[OleAutomation(False)]
Interface IBDA_AutoDemodulateEx Extends IBDA_AutoDemodulate
    Sub get_SupportedDeviceNodeTypes(ByVal ulcDeviceNodeTypesMax As Long, ByRef pulcDeviceNodeTypes As Long, ByRef pguidDeviceNodeTypes As UUID)
    Sub get_SupportedVideoFormats(ByRef pulAMTunerModeType As Long, ByRef pulAnalogVideoStandard As Long)
    Sub get_AuxInputCount(ByRef pulCompositeCount As Long, ByRef pulSvideoCount As Long)
End Interface

[InterfaceId("EF30F379-985B-4D10-B640-A79D5E04E1E0")]
[OleAutomation(False)]
Interface IBDA_DigitalDemodulator Extends stdole.IUnknown
    Sub put_ModulationType(ByRef pModulationType As ModulationType)
    Sub get_ModulationType(ByRef pModulationType As ModulationType)
    Sub put_InnerFECMethod(ByRef pFECMethod As FECMethod)
    Sub get_InnerFECMethod(ByRef pFECMethod As FECMethod)
    Sub put_InnerFECRate(ByRef pFECRate As BinaryConvolutionCodeRate)
    Sub get_InnerFECRate(ByRef pFECRate As BinaryConvolutionCodeRate)
    Sub put_OuterFECMethod(ByRef pFECMethod As FECMethod)
    Sub get_OuterFECMethod(ByRef pFECMethod As FECMethod)
    Sub put_OuterFECRate(ByRef pFECRate As BinaryConvolutionCodeRate)
    Sub get_OuterFECRate(ByRef pFECRate As BinaryConvolutionCodeRate)
    Sub put_SymbolRate(ByRef pSymbolRate As Long)
    Sub get_SymbolRate(ByRef pSymbolRate As Long)
    Sub put_SpectralInversion(ByRef pSpectralInversion As SpectralInversion)
    Sub get_SpectralInversion(ByRef pSpectralInversion As SpectralInversion)
End Interface

[InterfaceId("525ED3EE-5CF3-4E1E-9A06-5368A84F9A6E")]
[OleAutomation(False)]
Interface IBDA_DigitalDemodulator2 Extends IBDA_DigitalDemodulator
    Sub put_GuardInterval(ByRef pGuardInterval As GuardInterval)
    Sub get_GuardInterval(ByRef pGuardInterval As GuardInterval)
    Sub put_TransmissionMode(ByRef pTransmissionMode As TransmissionMode)
    Sub get_TransmissionMode(ByRef pTransmissionMode As TransmissionMode)
    Sub put_RollOff(ByRef pRollOff As RollOff)
    Sub get_RollOff(ByRef pRollOff As RollOff)
    Sub put_Pilot(ByRef pPilot As Pilot)
    Sub get_Pilot(ByRef pPilot As Pilot)
End Interface

[InterfaceId("13F19604-7D32-4359-93A2-A05205D90AC9")]
[OleAutomation(False)]
Interface IBDA_DigitalDemodulator3 Extends IBDA_DigitalDemodulator2
    Sub put_SignalTimeouts(ByRef pSignalTimeouts As BDA_SIGNAL_TIMEOUTS)
    Sub get_SignalTimeouts(ByRef pSignalTimeouts As BDA_SIGNAL_TIMEOUTS)
    Sub put_PLPNumber(ByRef pPLPNumber As Long)
    Sub get_PLPNumber(ByRef pPLPNumber As Long)
End Interface

    
[InterfaceId("4B2BD7EA-8347-467B-8DBF-62F784929CC3")]
[OleAutomation(False)]
[Description("ICCSubStreamFiltering Interface")]
Interface ICCSubStreamFiltering Extends stdole.IUnknown
    [Description("property SubstreamTypes")]
    Property Get SubstreamTypes() As Long
    [Description("property SubstreamTypes")]
    Property Let SubstreamTypes(ByVal pTypes As Long)
End Interface

[InterfaceId("3F4DC8E2-4050-11D3-8F4B-00C04F7971E2")]
[OleAutomation(False)]
[Description("Not supported - Use IBDA_IPSinkInfo instead")]
Interface IBDA_IPSinkControl Extends stdole.IUnknown
    Sub GetMulticastList(ByRef pulcbSize As Long, ByRef pbBuffer As LongPtr)
    Sub GetAdapterIPAddress(ByRef pulcbSize As Long, ByRef pbBuffer As LongPtr)
End Interface

[InterfaceId("A750108F-492E-4D51-95F7-649B23FF7AD7")]
[OleAutomation(False)]
Interface IBDA_IPSinkInfo Extends stdole.IUnknown
    Sub get_MulticastList(ByRef pulcbAddresses As Long, ByRef ppbAddressList As LongPtr)
    Sub get_AdapterIPAddress(ByRef pbstrBuffer As String)
    Sub get_AdapterDescription(ByRef pbstrBuffer As String)
End Interface

[InterfaceId("AFB6C2A2-2C41-11D3-8A60-0000F81E0E4A")]
[OleAutomation(False)]
Interface IEnumPIDMap Extends stdole.IUnknown
    Sub Next(ByVal cRequest As Long, ByRef pPIDMap As PID_MAP, ByRef pcReceived As Long)
    Sub Skip(ByVal cRecords As Long)
    Sub Reset()
    Sub Clone(ByRef ppIEnumPIDMap As IEnumPIDMap)
End Interface

[InterfaceId("AFB6C2A1-2C41-11D3-8A60-0000F81E0E4A")]
[OleAutomation(False)]
Interface IMPEG2PIDMap Extends stdole.IUnknown
    Sub MapPID(ByVal culPID As Long, ByRef pulPID As Long, ByVal MediaSampleContent As MEDIA_SAMPLE_CONTENT)
    Sub UnmapPID(ByVal culPID As Long, ByRef pulPID As Long)
    Sub EnumPIDMap(ByRef pIEnumPIDMap As IEnumPIDMap)
End Interface

[InterfaceId("06FB45C1-693C-4EA7-B79F-7A6A54D8DEF2")]
[OleAutomation(False)]
[Description("IFrequencyMap Interface")]
Interface IFrequencyMap Extends stdole.IUnknown
    [Description("method get_FrequencyMapping")]
    Sub get_FrequencyMapping(ByRef ulCount As Long, ByRef ppulList As LongPtr)
    [Description("method put_FrequencyMapping")]
    Sub put_FrequencyMapping(ByVal ulCount As Long, ByRef pList As Long)
    [Description("method get_CountryCode")]
    Sub get_CountryCode(ByRef pulCountryCode As Long)
    [Description("method put_CountryCode")]
    Sub put_CountryCode(ByVal ulCountryCode As Long)
    [Description("method get_DefaultFrequencyMapping")]
    Sub get_DefaultFrequencyMapping(ByVal ulCountryCode As Long, ByRef pulCount As Long, ByRef ppulList As LongPtr)
    [Description("method get_CountryCodeList")]
    Sub get_CountryCodeList(ByRef pulCount As Long, ByRef ppulList As LongPtr)
End Interface

[InterfaceId("D806973D-3EBE-46DE-8FBB-6358FE784208")]
[OleAutomation(False)]
[Description("IBDA_EasMessage Interface")]
Interface IBDA_EasMessage Extends stdole.IUnknown
    [Description("method get_EasMessage")]
    Sub get_EasMessage(ByVal ulEventID As Long, ByRef ppEASObject As IUnknown)
End Interface

[InterfaceId("8E882535-5F86-47AB-86CF-C281A72A0549")]
[OleAutomation(False)]
[Description("IBDA_TransportStreamInfo Interface")]
Interface IBDA_TransportStreamInfo Extends stdole.IUnknown
    [Description("method get_PatTableTickCount")]
    Sub get_PatTableTickCount(ByRef pPatTickCount As Long)
End Interface

[InterfaceId("CD51F1E0-7BE9-4123-8482-A2A796C0A6B0")]
[OleAutomation(False)]
[Description("IBDA_ConditionalAccess Interface")]
Interface IBDA_ConditionalAccess Extends stdole.IUnknown
    [Description("method get_SmartCardStatus")]
    Sub get_SmartCardStatus(ByRef pCardStatus As SmartCardStatusType, ByRef pCardAssociation As SmartCardAssociationType, ByRef pbstrCardError As String, ByRef pfOOBLocked As Boolean)
    [Description("method get_SmartCardInfo")]
    Sub get_SmartCardInfo(ByRef pbstrCardName As String, ByRef pbstrCardManufacturer As String, ByRef pfDaylightSavings As Boolean, ByRef pbyRatingRegion As Byte, ByRef plTimeZoneOffsetMinutes As Long, ByRef pbstrLanguage As String, ByRef pEALocationCode As EALocationCodeType)
    [Description("method get_SmartCardApplications")]
    Sub get_SmartCardApplications(ByRef pulcApplications As Long, ByVal ulcApplicationsMax As Long, ByRef rgApplications As SmartCardApplication)
    [Description("method get_Entitlement")]
    Sub get_Entitlement(ByVal usVirtualChannel As Integer, ByRef pEntitlement As EntitlementType)
    [Description("method TuneByChannel")]
    Sub TuneByChannel(ByVal usVirtualChannel As Integer)
    [Description("method SetProgram")]
    Sub SetProgram(ByVal usProgramNumber As Integer)
    [Description("method AddProgram")]
    Sub AddProgram(ByVal usProgramNumber As Integer)
    [Description("method RemoveProgram")]
    Sub RemoveProgram(ByVal usProgramNumber As Integer)
    [Description("method GetModuleUI")]
    Sub GetModuleUI(ByVal byDialogNumber As Byte, ByRef pbstrUrl As String)
    [Description("method InformUIClosed")]
    Sub InformUIClosed(ByVal byDialogNumber As Byte, ByVal CloseReason As UICloseReasonType)
End Interface

[InterfaceId("20E80CB5-C543-4C1B-8EB3-49E719EEE7D4")]
[OleAutomation(False)]
[Description("IBDA_DiagnosticProperties Interface")]
Interface IBDA_DiagnosticProperties Extends IPropertyBag
End Interface

[InterfaceId("F98D88B0-1992-4CD6-A6D9-B9AFAB99330D")]
[OleAutomation(False)]
[Description("IBDA_DRM Interface")]
Interface IBDA_DRM Extends stdole.IUnknown
    Sub GetDRMPairingStatus(ByRef pdwStatus As Long, ByRef phError As Long /* HRESULT */)
    Sub PerformDRMPairing(ByVal fSync As BOOL)
End Interface

[InterfaceId("7F0B3150-7B81-4AD4-98E3-7E9097094301")]
[OleAutomation(False)]
[Description("IBDA_NameValueService Interface")]
Interface IBDA_NameValueService Extends stdole.IUnknown
    [Description("method GetNameByIndex")]
    Sub GetValueNameByIndex(ByVal ulIndex As Long, ByRef pBstrName As String)
    [Description("method GetValue")]
    Sub GetValue(ByVal bstrName As String, ByVal bstrLanguage As String, ByRef pbstrValue As String)
    [Description("method SetValue")]
    Sub SetValue(ByVal ulDialogRequest As Long, ByVal bstrLanguage As String, ByVal bstrName As String, ByVal bstrValue As String, ByVal ulReserved As Long)
End Interface

[InterfaceId("497C3418-23CB-44BA-BB62-769F506FCEA7")]
[OleAutomation(False)]
[Description("IBDA_ConditionalAccessEx Interface")]
Interface IBDA_ConditionalAccessEx Extends stdole.IUnknown
    [Description("method CheckEntitlementToken")]
    Sub CheckEntitlementToken(ByVal ulDialogRequest As Long, ByVal bstrLanguage As String, ByVal RequestType As BDA_CONDITIONALACCESS_REQUESTTYPE, ByVal ulcbEntitlementTokenLen As Long, ByRef pbEntitlementToken As Byte, ByRef pulDescrambleStatus As Long)
    [Description("method SetCaptureToken")]
    Sub SetCaptureToken(ByVal ulcbCaptureTokenLen As Long, ByRef pbCaptureToken As Byte)
    [Description("method OpenBroadcastMmi")]
    Sub OpenBroadcastMmi(ByVal ulDialogRequest As Long, ByVal bstrLanguage As String, ByVal eventId As Long)
    [Description("method CloseMmiDialog")]
    Sub CloseMmiDialog(ByVal ulDialogRequest As Long, ByVal bstrLanguage As String, ByVal ulDialogNumber As Long, ByVal ReasonCode As BDA_CONDITIONALACCESS_MMICLOSEREASON, ByRef pulSessionResult As Long)
    [Description("method CreateDialogRequestNumber")]
    Sub CreateDialogRequestNumber(ByRef pulDialogRequestNumber As Long)
End Interface

[InterfaceId("5E68C627-16C2-4E6C-B1E2-D00170CDAA0F")]
[OleAutomation(False)]
[Description("IBDA_ISDBConditionalAccess Interface")]
Interface IBDA_ISDBConditionalAccess Extends stdole.IUnknown
    [Description("method SetIsdbCasRequest")]
    Sub SetIsdbCasRequest(ByVal ulRequestId As Long, ByVal ulcbRequestBufferLen As Long, ByRef pbRequestBuffer As Byte)
End Interface

[InterfaceId("207C413F-00DC-4C61-BAD6-6FEE1FF07064")]
[OleAutomation(False)]
[Description("IBDA_EventingService Interface")]
Interface IBDA_EventingService Extends stdole.IUnknown
    [Description("method CompleteEvent")]
    Sub CompleteEvent(ByVal ulEventID As Long, ByVal ulEventResult As Long)
End Interface

[InterfaceId("7DEF4C09-6E66-4567-A819-F0E17F4A81AB")]
[OleAutomation(False)]
[Description("IBDA_AUX Interface")]
Interface IBDA_AUX Extends stdole.IUnknown
    [Description("method QueryCapabilities")]
    Sub QueryCapabilities(ByRef pdwNumAuxInputsBSTR As Long)
    [Description("method EnumCapability")]
    Sub EnumCapability(ByVal dwIndex As Long, ByRef dwInputId As Long, ByRef pConnectorType As UUID, ByRef ConnTypeNum As Long, ByRef NumVideoStds As Long, ByRef AnalogStds As Currency)
End Interface

[InterfaceId("3A8BAD59-59FE-4559-A0BA-396CFAA98AE3")]
[OleAutomation(False)]
[Description("IBDA_ Encoder Interface")]
Interface IBDA_Encoder Extends stdole.IUnknown
    [Description("method QueryCapabilities")]
    Sub QueryCapabilities(ByRef NumAudioFmts As Long, ByRef NumVideoFmts As Long)
    [Description("method EnumAudioCapability")]
    Sub EnumAudioCapability(ByVal FmtIndex As Long, ByRef MethodID As Long, ByRef AlgorithmType As Long, ByRef SamplingRate As Long, ByRef BitDepth As Long, ByRef NumChannels As Long)
    [Description("method EnumVideoCapability")]
    Sub EnumVideoCapability(ByVal FmtIndex As Long, ByRef MethodID As Long, ByRef AlgorithmType As Long, ByRef VerticalSize As Long, ByRef HorizontalSize As Long, ByRef AspectRatio As Long, ByRef FrameRateCode As Long, ByRef ProgressiveSequence As Long)
    [Description("method SetParameters")]
    Sub SetParameters(ByVal AudioBitrateMode As Long, ByVal AudioBitrate As Long, ByVal AudioMethodID As Long, ByVal AudioProgram As Long, ByVal VideoBitrateMode As Long, ByVal VideoBitrate As Long, ByVal VideoMethodID As Long)
    [Description("method GetState")]
    Sub GetState(ByRef AudioBitrateMax As Long, ByRef AudioBitrateMin As Long, ByRef AudioBitrateMode As Long, ByRef AudioBitrateStepping As Long, ByRef AudioBitrate As Long, ByRef AudioMethodID As Long, ByRef AvailableAudioPrograms As Long, ByRef AudioProgram As Long, ByRef VideoBitrateMax As Long, ByRef VideoBitrateMin As Long, ByRef VideoBitrateMode As Long, ByRef VideoBitrate As Long, ByRef VideoBitrateStepping As Long, ByRef VideoMethodID As Long, ByRef SignalSourceID As Long, ByRef SignalFormat As Currency, ByRef SignalLock As BOOL, ByRef SignalLevel As Long, ByRef SignalToNoiseRatio As Long)
End Interface

    
[InterfaceId("138ADC7E-58AE-437F-B0B4-C9FE19D5B4AC")]
[OleAutomation(False)]
[Description("IBDA_ FDC Interface")]
Interface IBDA_FDC Extends stdole.IUnknown
    [Description("method GetStatus")]
    Sub GetStatus(ByRef CurrentBitrate As Long, ByRef CarrierLock As BOOL, ByRef CurrentFrequency As Long, ByRef CurrentSpectrumInversion As BOOL, ByRef CurrentPIDList As String, ByRef CurrentTIDList As String, ByRef Overflow As BOOL)
    [Description("method RequestTables")]
    Sub RequestTables(ByVal TableIDs As String)
    [Description("method AddPid")]
    Sub AddPid(ByVal PidsToAdd As String, ByRef RemainingFilterEntries As Long)
    [Description("method RemovePid")]
    Sub RemovePid(ByVal PidsToRemove As String)
    [Description("method AddTid")]
    Sub AddTid(ByVal TidsToAdd As String, ByRef CurrentTIDList As String)
    [Description("method RemoveTid")]
    Sub RemoveTid(ByVal TidsToRemove As String)
    [Description("method GetTableSection")]
    Sub GetTableSection(ByRef pid As Long, ByVal MaxBufferSize As Long, ByRef ActualSize As Long, ByRef SecBuffer As Byte)
End Interface

[InterfaceId("C0AFCB73-23E7-4BC6-BAFA-FDC167B4719F")]
[OleAutomation(False)]
[Description("IBDA_ GuideDataDeliveryService Interface")]
Interface IBDA_GuideDataDeliveryService Extends stdole.IUnknown
    [Description("method GetGuideDataType")]
    Sub GetGuideDataType(ByRef pguidDataType As UUID)
    [Description("method GetGuideData")]
    Sub GetGuideData(ByRef pulcbBufferLen As Long, ByRef pbBuffer As Byte, ByRef pulGuideDataPercentageProgress As Long)
    [Description("method RequestGuideDataUpdate")]
    Sub RequestGuideDataUpdate()
    [Description("method GetTuneXmlFromServiceIdx ")]
    Sub GetTuneXmlFromServiceIdx(ByVal ul64ServiceIdx As Currency, ByRef pbstrTuneXml As String)
    [Description("method GetServices")]
    Sub GetServices(ByRef pulcbBufferLen As Long, ByRef pbBuffer As Byte)
    [Description("method GetServiceInfoFromTuneXml")]
    Sub GetServiceInfoFromTuneXml(ByVal bstrTuneXml As String, ByRef pbstrServiceDescription As String)
End Interface

[InterfaceId("BFF6B5BB-B0AE-484C-9DCA-73528FB0B46E")]
[OleAutomation(False)]
[Description("IBDA_DRMService Interface")]
Interface IBDA_DRMService Extends stdole.IUnknown
    [Description("method SetDRM")]
    Sub SetDRM(ByRef puuidNewDrm As UUID)
    [Description("method GetDRMStatus")]
    Sub GetDRMStatus(ByRef pbstrDrmUuidList As String, ByRef DRMuuid As UUID)
End Interface

[InterfaceId("4BE6FA3D-07CD-4139-8B80-8C18BA3AEC88")]
[OleAutomation(False)]
[Description("IBDA_WMDRMSession Interface")]
Interface IBDA_WMDRMSession Extends stdole.IUnknown
    [Description("method GetStatus")]
    Sub GetStatus(ByRef MaxCaptureToken As Long, ByRef MaxStreamingPid As Long, ByRef MaxLicense As Long, ByRef MinSecurityLevel As Long, ByRef RevInfoSequenceNumber As Long, ByRef RevInfoIssuedTime As Currency, ByRef RevInfoTTL As Long, ByRef RevListVersion As Long, ByRef ulState As Long)
    [Description("method SetRevInfo ")]
    Sub SetRevInfo(ByVal ulRevInfoLen As Long, ByRef pbRevInfo As Byte)
    [Description("method SetCrl ")]
    Sub SetCrl(ByVal ulCrlLen As Long, ByRef pbCrlLen As Byte)
    [Description("method TransactMessage")]
    Sub TransactMessage(ByVal ulcbRequest As Long, ByRef pbRequest As Byte, ByRef pulcbResponse As Long, ByRef pbResponse As Byte)
    [Description("method GetLicense")]
    Sub GetLicense(ByRef uuidKey As UUID, ByRef pulPackageLen As Long, ByRef pbPackage As Byte)
    [Description("method ReissueLicense")]
    Sub ReissueLicense(ByRef uuidKey As UUID)
    [Description("method RenewLicense")]
    Sub RenewLicense(ByVal ulInXmrLicenseLen As Long, ByRef pbInXmrLicense As Byte, ByVal ulEntitlementTokenLen As Long, ByRef pbEntitlementToken As Byte, ByRef pulDescrambleStatus As Long, ByRef pulOutXmrLicenseLen As Long, ByRef pbOutXmrLicense As Byte)
    [Description("method GetKeyInfo")]
    Sub GetKeyInfo(ByRef pulKeyInfoLen As Long, ByRef pbKeyInfo As Byte)
End Interface

[InterfaceId("86D979CF-A8A7-4F94-B5FB-14C0ACA68FE6")]
[OleAutomation(False)]
[Description("IBDA_WMDRMTuner Interface")]
Interface IBDA_WMDRMTuner Extends stdole.IUnknown
    [Description("method PurchaseEntitlement ")]
    Sub PurchaseEntitlement(ByVal ulDialogRequest As Long, ByVal bstrLanguage As String, ByVal ulPurchaseTokenLen As Long, ByRef pbPurchaseToken As Byte, ByRef pulDescrambleStatus As Long, ByRef pulCaptureTokenLen As Long, ByRef pbCaptureToken As Byte)
    [Description("method CancelCaptureToken ")]
    Sub CancelCaptureToken(ByVal ulCaptureTokenLen As Long, ByRef pbCaptureToken As Byte)
    [Description("method SetPidProtection")]
    Sub SetPidProtection(ByVal ulPID As Long, ByRef uuidKey As UUID)
    [Description("method GetPidProtection ")]
    Sub GetPidProtection(ByVal pulPID As Long, ByRef uuidKey As UUID)
    [Description("method SetSyncValue ")]
    Sub SetSyncValue(ByVal ulSyncValue As Long)
    [Description("method GetStartCodeProfile ")]
    Sub GetStartCodeProfile(ByRef pulStartCodeProfileLen As Long, ByRef pbStartCodeProfile As Byte)
End Interface

[InterfaceId("1F9BC2A5-44A3-4C52-AAB1-0BBCE5A1381D")]
[OleAutomation(False)]
[Description("IBDA_DRIDRMService Interface")]
Interface IBDA_DRIDRMService Extends stdole.IUnknown
    [Description("method SetDRM")]
    Sub SetDRM(ByVal bstrNewDrm As String)
    [Description("method GetDRMStatus")]
    Sub GetDRMStatus(ByRef pbstrDrmUuidList As String, ByRef DRMuuid As UUID)
    [Description("method GetPairingStatus")]
    Sub GetPairingStatus(ByRef penumPairingStatus As BDA_DrmPairingError)
End Interface

[InterfaceId("05C690F8-56DB-4BB2-B053-79C12098BB26")]
[OleAutomation(False)]
[Description("IBDA_DRIWMDRMSession Interface")]
Interface IBDA_DRIWMDRMSession Extends stdole.IUnknown
    [Description("method AcknowledgeLicense")]
    Sub AcknowledgeLicense(ByVal hrLicenseAck As Long /* HRESULT */)
    [Description("method ProcessLicenseChallenge")]
    Sub ProcessLicenseChallenge(ByVal dwcbLicenseMessage As Long, ByRef pbLicenseMessage As Byte, ByRef pdwcbLicenseResponse As Long, ByRef ppbLicenseResponse As LongPtr)
    [Description("method ProcessRegistrationChallenge")]
    Sub ProcessRegistrationChallenge(ByVal dwcbRegistrationMessage As Long, ByRef pbRegistrationMessage As Byte, ByRef pdwcbRegistrationResponse As Long, ByRef ppbRegistrationResponse As LongPtr)
    [Description("method SetRevInfo ")]
    Sub SetRevInfo(ByVal dwRevInfoLen As Long, ByRef pbRevInfo As Byte, ByRef pdwResponse As Long)
    [Description("method SetCrl ")]
    Sub SetCrl(ByVal dwCrlLen As Long, ByRef pbCrlLen As Byte, ByRef pdwResponse As Long)
    [Description("method GetHMSAssociationData ")]
    Sub GetHMSAssociationData()
    [Description("method GetLastCardeaError ")]
    Sub GetLastCardeaError(ByRef pdwError As Long)
End Interface

[InterfaceId("942AAFEC-4C05-4C74-B8EB-8706C2A4943F")]
[OleAutomation(False)]
[Description("IBDA_MUX Interface")]
Interface IBDA_MUX Extends stdole.IUnknown
    [Description("method SetPidList")]
    Sub SetPidList(ByVal ulPidListCount As Long, ByRef pbPidListBuffer As BDA_MUX_PIDLISTITEM)
    [Description("method GetPidList")]
    Sub GetPidList(ByRef pulPidListCount As Long, ByRef pbPidListBuffer As BDA_MUX_PIDLISTITEM)
End Interface

[InterfaceId("1DCFAFE9-B45E-41B3-BB2A-561EB129AE98")]
[OleAutomation(False)]
[Description("IBDA_TransportStreamSelector Interface")]
Interface IBDA_TransportStreamSelector Extends stdole.IUnknown
    [Description("method SetTSID")]
    Sub SetTSID(ByVal usTSID As Integer)
    [Description("method GetTSInformation")]
    Sub GetTSInformation(ByRef pulTSInformationBufferLen As Long, ByRef pbTSInformationBuffer As Byte)
End Interface

[InterfaceId("53B14189-E478-4B7A-A1FF-506DB4B99DFE")]
[OleAutomation(False)]
[Description("IBDA_UserActivityService Interface")]
Interface IBDA_UserActivityService Extends stdole.IUnknown
    [Description("method SetCurrentTunerUseReason")]
    Sub SetCurrentTunerUseReason(ByVal dwUseReason As Long)
    [Description("method GetUserActivityInterval")]
    Sub GetUserActivityInterval(ByRef pdwActivityInterval As Long)
    [Description("method UserActivityDetected")]
    Sub UserActivityDetected()
End Interface

[InterfaceId("1F0E5357-AF43-44E6-8547-654C645145D2")]
[OleAutomation(False)]
[Description("IESEvent Interface")]
Interface IESEvent Extends stdole.IUnknown
    Function GetEventId() As Long
    Function GetEventType() As UUID
    Sub SetCompletionStatus(ByVal dwResult As Long)
    Function GetData() As Byte()
    Function GetStringData() As String
End Interface

[InterfaceId("ABD414BF-CFE5-4E5E-AF5B-4B4E49C5BFEB")]
[OleAutomation(False)]
[Description("Eventing out-going client interface")]
Interface IESEvents Extends stdole.IUnknown
    #If Win64 Then
    Sub OnESEventReceived(guidEventType As UUID)
    #Else
    Sub OnESEventReceived(ByVal guidEventType1 As Long, ByVal guidEventType2 As Long, ByVal guidEventType3 As Long, ByVal guidEventType4 As Long, ByVal pESEvent As IESEvent)
	#End If
End Interface

[InterfaceId("3B21263F-26E8-489D-AAC4-924F7EFD9511")]
[OleAutomation(False)]
[Description("Broadcast Event Service Firing/Reflecting Interface")]
Interface IBroadcastEvent Extends stdole.IUnknown
    #If Win64 Then
    Sub Fire(EventId As UUID)
    #Else
    Sub Fire(ByVal EventId1 As Long, ByVal EventId2 As Long, ByVal EventId3 As Long, ByVal EventId4 As Long)
	#End If
End Interface

[InterfaceId("3D9E3887-1929-423F-8021-43682DE95448")]
[OleAutomation(False)]
[Description("Enhanced Broadcast Event Service Firing/Reflecting Interface")]
Interface IBroadcastEventEx Extends IBroadcastEvent
    #If Win64 Then
    Sub FireEx(EventId As UUID, ByVal param1 As Long, ByVal param2 As Long, ByVal param3 As Long, ByVal Param4 As Long)
    #Else
    Sub FireEx(ByVal EventId1 As Long, ByVal EventId2 As Long, ByVal EventId3 As Long, ByVal EventId4 As Long, ByVal param1 As Long, ByVal param2 As Long, ByVal param3 As Long, ByVal Param4 As Long)
	#End If
End Interface


[InterfaceId("BDCDD913-9ECD-4FB2-81AE-ADF747EA75A5")]
[OleAutomation(False)]
Interface IMpeg2TableFilter Extends stdole.IUnknown
    Sub AddPid(ByVal P As Integer)
    Sub AddTable(ByVal P As Integer, ByVal T As Byte)
    Sub AddExtension(ByVal P As Integer, ByVal T As Byte, ByVal e As Integer)
    Sub RemovePid(ByVal P As Integer)
    Sub RemoveTable(ByVal P As Integer, ByVal T As Byte)
    Sub RemoveExtension(ByVal P As Integer, ByVal T As Byte, ByVal e As Integer)
End Interface

[InterfaceId("9B396D40-F380-4E3C-A514-1A82BF6EBFE6")]
[OleAutomation(False)]
Interface IMpeg2Data Extends stdole.IUnknown
    Sub GetSection(ByVal pid As Integer, ByVal tid As Byte, ByRef pFilter As MPEG2_FILTER, ByVal dwTimeout As Long, ByRef ppSectionList As ISectionList)
    Sub GetTable(ByVal pid As Integer, ByVal tid As Byte, ByRef pFilter As MPEG2_FILTER, ByVal dwTimeout As Long, ByRef ppSectionList As ISectionList)
    Sub GetStreamOfSections(ByVal pid As Integer, ByVal tid As Byte, ByRef pFilter As MPEG2_FILTER, ByVal hDataReadyEvent As LongPtr, ByRef ppMpegStream As IMpeg2Stream)
End Interface

[InterfaceId("AFEC1EB5-2A64-46C6-BF4B-AE3CCB6AFDB0")]
[OleAutomation(False)]
Interface ISectionList Extends stdole.IUnknown
    Sub Initialize(ByVal RequestType As MPEG_REQUEST_TYPE, ByVal pMpeg2Data As IMpeg2Data, ByRef pContext As MPEG_CONTEXT, ByVal pid As Integer, ByVal tid As Byte, ByRef pFilter As MPEG2_FILTER, ByVal timeout As Long, ByVal hDoneEvent As LongPtr)
    Sub InitializeWithRawSections(ByRef pmplSections As MPEG_PACKET_LIST)
    Sub CancelPendingRequest()
    Sub GetNumberOfSections(ByRef pCount As Integer)
    Sub GetSectionData(ByVal SectionNumber As Integer, ByRef pdwRawPacketLength As Long, ByRef ppSection As LongPtr)
    Sub GetProgramIdentifier(ByRef ppid As Integer)
    Sub GetTableIdentifier(ByRef pTableId As Byte)
End Interface

[InterfaceId("400CC286-32A0-4CE4-9041-39571125A635")]
[OleAutomation(False)]
Interface IMpeg2Stream Extends stdole.IUnknown
    Sub Initialize(ByVal RequestType As MPEG_REQUEST_TYPE, ByVal pMpeg2Data As IMpeg2Data, ByRef pContext As MPEG_CONTEXT, ByVal pid As Integer, ByVal tid As Byte, ByRef pFilter As MPEG2_FILTER, ByVal hDataReadyEvent As LongPtr)
    Sub SupplyDataBuffer(ByRef pStreamBuffer As MPEG_STREAM_BUFFER)
End Interface

[CoClassId("73DA5D04-4347-45D3-A9DC-FAE9DDBE558D")]
[COMCreatable]
CoClass SectionList
    [Default] Interface ISectionList
End CoClass

[CoClassId("F91D96C7-8509-4D0B-AB26-A0DD10904BB7")]
[COMCreatable]
CoClass Mpeg2Stream
    [Default] Interface IMpeg2Stream
End CoClass

[CoClassId("C666E115-BB62-4027-A113-82D643FE2D99")]
[COMCreatable]
CoClass Mpeg2Data
    [Default] Interface IMpeg2Data
End CoClass

[InterfaceId("6A5918F8-A77A-4F61-AED0-5702BDCDA3E6")]
[OleAutomation(False)]
Interface IGenericDescriptor Extends stdole.IUnknown
    Sub Initialize(ByRef pbDesc As Byte, ByVal bCount As Long)
    Sub GetTag(ByRef pbVal As Byte)
    Sub GetLength(ByRef pbVal As Byte)
    Sub GetBody(ByRef ppbVal As LongPtr)
End Interface

[InterfaceId("BF02FB7E-9792-4E10-A68D-033A2CC246A5")]
[OleAutomation(False)]
Interface IGenericDescriptor2 Extends IGenericDescriptor
    Sub Initialize(ByRef pbDesc As Byte, ByVal wCount As Integer)
    Sub GetLength(ByRef pwVal As Integer)
End Interface


[InterfaceId("6623B511-4B5F-43C3-9A01-E8FF84188060")]
[OleAutomation(False)]
Interface IPAT Extends stdole.IUnknown
    Sub Initialize(ByVal pSectionList As ISectionList, ByVal pMPEGData As IMpeg2Data)
    Sub GetTransportStreamId(ByRef pwVal As Integer)
    Sub GetVersionNumber(ByRef pbVal As Byte)
    Sub GetCountOfRecords(ByRef pdwVal As Long)
    Sub GetRecordProgramNumber(ByVal dwIndex As Long, ByRef pwVal As Integer)
    Sub GetRecordProgramMapPid(ByVal dwIndex As Long, ByRef pwVal As Integer)
    Sub FindRecordProgramMapPid(ByVal wProgramNumber As Integer, ByRef pwVal As Integer)
    Sub RegisterForNextTable(ByVal hNextTableAvailable As LongPtr)
    Sub GetNextTable(ByRef ppPAT As IPAT)
    Sub RegisterForWhenCurrent(ByVal hNextTableIsCurrent As LongPtr)
    Sub ConvertNextToCurrent()
End Interface

[InterfaceId("7C6995FB-2A31-4BD7-953E-B1AD7FB7D31C")]
[OleAutomation(False)]
Interface ICAT Extends stdole.IUnknown
    Sub Initialize(ByVal pSectionList As ISectionList, ByVal pMPEGData As IMpeg2Data)
    Sub GetVersionNumber(ByRef pbVal As Byte)
    Sub GetCountOfTableDescriptors(ByRef pdwVal As Long)
    Sub GetTableDescriptorByIndex(ByVal dwIndex As Long, ByRef ppDescriptor As IGenericDescriptor)
    Sub GetTableDescriptorByTag(ByVal bTag As Byte, ByRef pdwCookie As Long, ByRef ppDescriptor As IGenericDescriptor)
    Sub RegisterForNextTable(ByVal hNextTableAvailable As LongPtr)
    Sub GetNextTable(ByVal dwTimeout As Long, ByRef ppCAT As ICAT)
    Sub RegisterForWhenCurrent(ByVal hNextTableIsCurrent As LongPtr)
    Sub ConvertNextToCurrent()
End Interface

[InterfaceId("01F3B398-9527-4736-94DB-5195878E97A8")]
[OleAutomation(False)]
Interface IPMT Extends stdole.IUnknown
    Sub Initialize(ByVal pSectionList As ISectionList, ByVal pMPEGData As IMpeg2Data)
    Sub GetProgramNumber(ByRef pwVal As Integer)
    Sub GetVersionNumber(ByRef pbVal As Byte)
    Sub GetPcrPid(ByRef pPidVal As Integer)
    Sub GetCountOfTableDescriptors(ByRef pdwVal As Long)
    Sub GetTableDescriptorByIndex(ByVal dwIndex As Long, ByRef ppDescriptor As IGenericDescriptor)
    Sub GetTableDescriptorByTag(ByVal bTag As Byte, ByRef pdwCookie As Long, ByRef ppDescriptor As IGenericDescriptor)
    Sub GetCountOfRecords(ByRef pwVal As Integer)
    Sub GetRecordStreamType(ByVal dwRecordIndex As Long, ByRef pbVal As Byte)
    Sub GetRecordElementaryPid(ByVal dwRecordIndex As Long, ByRef pPidVal As Integer)
    Sub GetRecordCountOfDescriptors(ByVal dwRecordIndex As Long, ByRef pdwVal As Long)
    Sub GetRecordDescriptorByIndex(ByVal dwRecordIndex As Long, ByVal dwDescIndex As Long, ByRef ppDescriptor As IGenericDescriptor)
    Sub GetRecordDescriptorByTag(ByVal dwRecordIndex As Long, ByVal bTag As Byte, ByRef pdwCookie As Long, ByRef ppDescriptor As IGenericDescriptor)
    Sub QueryServiceGatewayInfo(ByRef ppDSMCCList As DSMCC_ELEMENT, ByRef puiCount As Long)
    Sub QueryMPEInfo(ByRef ppMPEList As LongPtr, ByRef puiCount As Long)
    Sub RegisterForNextTable(ByVal hNextTableAvailable As LongPtr)
    Sub GetNextTable(ByRef ppPMT As IPMT)
    Sub RegisterForWhenCurrent(ByVal hNextTableIsCurrent As LongPtr)
    Sub ConvertNextToCurrent()
End Interface

[InterfaceId("D19BDB43-405B-4A7C-A791-C89110C33165")]
[OleAutomation(False)]
Interface ITSDT Extends stdole.IUnknown
    Sub Initialize(ByVal pSectionList As ISectionList, ByVal pMPEGData As IMpeg2Data)
    Sub GetVersionNumber(ByRef pbVal As Byte)
    Sub GetCountOfTableDescriptors(ByRef pdwVal As Long)
    Sub GetTableDescriptorByIndex(ByVal dwIndex As Long, ByRef ppDescriptor As IGenericDescriptor)
    Sub GetTableDescriptorByTag(ByVal bTag As Byte, ByRef pdwCookie As Long, ByRef ppDescriptor As IGenericDescriptor)
    Sub RegisterForNextTable(ByVal hNextTableAvailable As LongPtr)
    Sub GetNextTable(ByRef ppTSDT As ITSDT)
    Sub RegisterForWhenCurrent(ByVal hNextTableIsCurrent As LongPtr)
    Sub ConvertNextToCurrent()
End Interface

[InterfaceId("919F24C5-7B14-42AC-A4B0-2AE08DAF00AC")]
[OleAutomation(False)]
Interface IPSITables Extends stdole.IUnknown
    Sub GetTable(ByVal dwTSID As Long, ByVal dwTID_PID As Long, ByVal dwHashedVer As Long, ByVal dwPara4 As Long, ByRef ppIUnknown As IUnknown)
End Interface


[InterfaceId("B2C98995-5EB2-4FB1-B406-F3E8E2026A9A")]
[OleAutomation(False)]
Interface IAtscPsipParser Extends stdole.IUnknown
    Sub Initialize(ByVal punkMpeg2Data As IUnknown)
    Sub GetPAT(ByRef ppPAT As IPAT)
    Sub GetCAT(ByVal dwTimeout As Long, ByRef ppCAT As ICAT)
    Sub GetPMT(ByVal pid As Integer, ByRef pwProgramNumber As Integer, ByRef ppPMT As IPMT)
    Sub GetTSDT(ByRef ppTSDT As ITSDT)
    Sub GetMGT(ByRef ppMGT As IATSC_MGT)
    Sub GetVCT(ByVal TableId As Byte, ByVal fGetNextTable As BOOL, ByRef ppVCT As IATSC_VCT)
    Sub GetEIT(ByVal pid As Integer, ByRef pwSourceId As Integer, ByVal dwTimeout As Long, ByRef ppEIT As IATSC_EIT)
    Sub GetETT(ByVal pid As Integer, ByRef wSourceId As Integer, ByRef pwEventId As Integer, ByRef ppETT As IATSC_ETT)
    Sub GetSTT(ByRef ppSTT As IATSC_STT)
    Sub GetEAS(ByVal pid As Integer, ByRef ppEAS As ISCTE_EAS)
End Interface

[InterfaceId("8877DABD-C137-4073-97E3-779407A5D87A")]
[OleAutomation(False)]
Interface IATSC_MGT Extends stdole.IUnknown
    Sub Initialize(ByVal pSectionList As ISectionList, ByVal pMPEGData As IMpeg2Data)
    Sub GetVersionNumber(ByRef pbVal As Byte)
    Sub GetProtocolVersion(ByRef pbVal As Byte)
    Sub GetCountOfRecords(ByRef pdwVal As Long)
    Sub GetRecordType(ByVal dwRecordIndex As Long, ByRef pwVal As Integer)
    Sub GetRecordTypePid(ByVal dwRecordIndex As Long, ByRef pPidVal As Integer)
    Sub GetRecordVersionNumber(ByVal dwRecordIndex As Long, ByRef pbVal As Byte)
    Sub GetRecordCountOfDescriptors(ByVal dwRecordIndex As Long, ByRef pdwVal As Long)
    Sub GetRecordDescriptorByIndex(ByVal dwRecordIndex As Long, ByVal dwIndex As Long, ByRef ppDescriptor As IGenericDescriptor)
    Sub GetRecordDescriptorByTag(ByVal dwRecordIndex As Long, ByVal bTag As Byte, ByRef pdwCookie As Long, ByRef ppDescriptor As IGenericDescriptor)
    Sub GetCountOfTableDescriptors(ByRef pdwVal As Long)
    Sub GetTableDescriptorByIndex(ByVal dwIndex As Long, ByRef ppDescriptor As IGenericDescriptor)
    Sub GetTableDescriptorByTag(ByVal bTag As Byte, ByRef pdwCookie As Long, ByRef ppDescriptor As IGenericDescriptor)
End Interface

[InterfaceId("26879A18-32F9-46C6-91F0-FB6479270E8C")]
[OleAutomation(False)]
Interface IATSC_VCT Extends stdole.IUnknown
    Sub Initialize(ByVal pSectionList As ISectionList, ByVal pMPEGData As IMpeg2Data)
    Sub GetVersionNumber(ByRef pbVal As Byte)
    Sub GetTransportStreamId(ByRef pwVal As Integer)
    Sub GetProtocolVersion(ByRef pbVal As Byte)
    Sub GetCountOfRecords(ByRef pdwVal As Long)
    Sub GetRecordName(ByVal dwRecordIndex As Long, ByRef pwsName As String)
    Sub GetRecordMajorChannelNumber(ByVal dwRecordIndex As Long, ByRef pwVal As Integer)
    Sub GetRecordMinorChannelNumber(ByVal dwRecordIndex As Long, ByRef pwVal As Integer)
    Sub GetRecordModulationMode(ByVal dwRecordIndex As Long, ByRef pbVal As Byte)
    Sub GetRecordCarrierFrequency(ByVal dwRecordIndex As Long, ByRef pdwVal As Long)
    Sub GetRecordTransportStreamId(ByVal dwRecordIndex As Long, ByRef pwVal As Integer)
    Sub GetRecordProgramNumber(ByVal dwRecordIndex As Long, ByRef pwVal As Integer)
    Sub GetRecordEtmLocation(ByVal dwRecordIndex As Long, ByRef pbVal As Byte)
    Sub GetRecordIsAccessControlledBitSet(ByVal dwRecordIndex As Long, ByRef pfVal As BOOL)
    Sub GetRecordIsHiddenBitSet(ByVal dwRecordIndex As Long, ByRef pfVal As BOOL)
    Sub GetRecordIsPathSelectBitSet(ByVal dwRecordIndex As Long, ByRef pfVal As BOOL)
    Sub GetRecordIsOutOfBandBitSet(ByVal dwRecordIndex As Long, ByRef pfVal As BOOL)
    Sub GetRecordIsHideGuideBitSet(ByVal dwRecordIndex As Long, ByRef pfVal As BOOL)
    Sub GetRecordServiceType(ByVal dwRecordIndex As Long, ByRef pbVal As Byte)
    Sub GetRecordSourceId(ByVal dwRecordIndex As Long, ByRef pwVal As Integer)
    Sub GetRecordCountOfDescriptors(ByVal dwRecordIndex As Long, ByRef pdwVal As Long)
    Sub GetRecordDescriptorByIndex(ByVal dwRecordIndex As Long, ByVal dwIndex As Long, ByRef ppDescriptor As IGenericDescriptor)
    Sub GetRecordDescriptorByTag(ByVal dwRecordIndex As Long, ByVal bTag As Byte, ByRef pdwCookie As Long, ByRef ppDescriptor As IGenericDescriptor)
    Sub GetCountOfTableDescriptors(ByRef pdwVal As Long)
    Sub GetTableDescriptorByIndex(ByVal dwIndex As Long, ByRef ppDescriptor As IGenericDescriptor)
    Sub GetTableDescriptorByTag(ByVal bTag As Byte, ByRef pdwCookie As Long, ByRef ppDescriptor As IGenericDescriptor)
End Interface

[InterfaceId("D7C212D7-76A2-4B4B-AA56-846879A80096")]
[OleAutomation(False)]
Interface IATSC_EIT Extends stdole.IUnknown
    Sub Initialize(ByVal pSectionList As ISectionList, ByVal pMPEGData As IMpeg2Data)
    Sub GetVersionNumber(ByRef pbVal As Byte)
    Sub GetSourceId(ByRef pwVal As Integer)
    Sub GetProtocolVersion(ByRef pbVal As Byte)
    Sub GetCountOfRecords(ByRef pdwVal As Long)
    Sub GetRecordEventId(ByVal dwRecordIndex As Long, ByRef pwVal As Integer)
    Sub GetRecordStartTime(ByVal dwRecordIndex As Long, ByRef pmdtVal As MPEG_DATE_AND_TIME)
    Sub GetRecordEtmLocation(ByVal dwRecordIndex As Long, ByRef pbVal As Byte)
    Sub GetRecordDuration(ByVal dwRecordIndex As Long, ByRef pmdVal As MPEG_DURATION)
    Sub GetRecordTitleText(ByVal dwRecordIndex As Long, ByRef pdwLength As Long, ByRef ppText As LongPtr)
    Sub GetRecordCountOfDescriptors(ByVal dwRecordIndex As Long, ByRef pdwVal As Long)
    Sub GetRecordDescriptorByIndex(ByVal dwRecordIndex As Long, ByVal dwIndex As Long, ByRef ppDescriptor As IGenericDescriptor)
    Sub GetRecordDescriptorByTag(ByVal dwRecordIndex As Long, ByVal bTag As Byte, ByRef pdwCookie As Long, ByRef ppDescriptor As IGenericDescriptor)
End Interface

[InterfaceId("5A142CC9-B8CF-4A86-A040-E9CADF3EF3E7")]
[OleAutomation(False)]
Interface IATSC_ETT Extends stdole.IUnknown
    Sub Initialize(ByVal pSectionList As ISectionList, ByVal pMPEGData As IMpeg2Data)
    Sub GetVersionNumber(ByRef pbVal As Byte)
    Sub GetProtocolVersion(ByRef pbVal As Byte)
    Sub GetEtmId(ByRef pdwVal As Long)
    Sub GetExtendedMessageText(ByRef pdwLength As Long, ByRef ppText As LongPtr)
End Interface

[InterfaceId("6BF42423-217D-4D6F-81E1-3A7B360EC896")]
[OleAutomation(False)]
Interface IATSC_STT Extends stdole.IUnknown
    Sub Initialize(ByVal pSectionList As ISectionList, ByVal pMPEGData As IMpeg2Data)
    Sub GetProtocolVersion(ByRef pbVal As Byte)
    Sub GetSystemTime(ByRef pmdtSystemTime As MPEG_DATE_AND_TIME)
    Sub GetGpsUtcOffset(ByRef pbVal As Byte)
    Sub GetDaylightSavings(ByRef pwVal As Integer)
    Sub GetCountOfTableDescriptors(ByRef pdwVal As Long)
    Sub GetTableDescriptorByIndex(ByVal dwIndex As Long, ByRef ppDescriptor As IGenericDescriptor)
    Sub GetTableDescriptorByTag(ByVal bTag As Byte, ByRef pdwCookie As Long, ByRef ppDescriptor As IGenericDescriptor)
End Interface

[InterfaceId("1FF544D6-161D-4FAE-9FAA-4F9F492AE999")]
[OleAutomation(False)]
Interface ISCTE_EAS Extends stdole.IUnknown
    Sub Initialize(ByVal pSectionList As ISectionList, ByVal pMPEGData As IMpeg2Data)
    Sub GetVersionNumber(ByRef pbVal As Byte)
    Sub GetSequencyNumber(ByRef pbVal As Byte)
    Sub GetProtocolVersion(ByRef pbVal As Byte)
    Sub GetEASEventID(ByRef pwVal As Integer)
    Sub GetOriginatorCode(ByRef pbVal As Byte)
    Sub GetEASEventCodeLen(ByRef pbVal As Byte)
    Sub GetEASEventCode(ByRef pbVal As Byte)
    Sub GetRawNatureOfActivationTextLen(ByRef pbVal As Byte)
    Sub GetRawNatureOfActivationText(ByRef pbVal As Byte)
    Sub GetNatureOfActivationText(ByVal bstrIS0639code As String, ByRef pbstrString As String)
    Sub GetTimeRemaining(ByRef pbVal As Byte)
    Sub GetStartTime(ByRef pdwVal As Long)
    Sub GetDuration(ByRef pwVal As Integer)
    Sub GetAlertPriority(ByRef pbVal As Byte)
    Sub GetDetailsOOBSourceID(ByRef pwVal As Integer)
    Sub GetDetailsMajor(ByRef pwVal As Integer)
    Sub GetDetailsMinor(ByRef pwVal As Integer)
    Sub GetDetailsAudioOOBSourceID(ByRef pwVal As Integer)
    Sub GetAlertText(ByVal bstrIS0639code As String, ByRef pbstrString As String)
    Sub GetRawAlertTextLen(ByRef pwVal As Integer)
    Sub GetRawAlertText(ByRef pbVal As Byte)
    Sub GetLocationCount(ByRef pbVal As Byte)
    Sub GetLocationCodes(ByVal bIndex As Byte, ByRef pbState As Byte, ByRef pbCountySubdivision As Byte, ByRef pwCounty As Integer)
    Sub GetExceptionCount(ByRef pbVal As Byte)
    Sub GetExceptionService(ByVal bIndex As Byte, ByRef pbIBRef As Byte, ByRef pwFirst As Integer, ByRef pwSecond As Integer)
    Sub GetCountOfTableDescriptors(ByRef pdwVal As Long)
    Sub GetTableDescriptorByIndex(ByVal dwIndex As Long, ByRef ppDescriptor As IGenericDescriptor)
    Sub GetTableDescriptorByTag(ByVal bTag As Byte, ByRef pdwCookie As Long, ByRef ppDescriptor As IGenericDescriptor)
End Interface

[InterfaceId("FF76E60C-0283-43EA-BA32-B422238547EE")]
[OleAutomation(False)]
Interface IAtscContentAdvisoryDescriptor Extends stdole.IUnknown
    Sub GetTag(ByRef pbVal As Byte)
    Sub GetLength(ByRef pbVal As Byte)
    Sub GetRatingRegionCount(ByRef pbVal As Byte)
    Sub GetRecordRatingRegion(ByVal bIndex As Byte, ByRef pbVal As Byte)
    Sub GetRecordRatedDimensions(ByVal bIndex As Byte, ByRef pbVal As Byte)
    Sub GetRecordRatingDimension(ByVal bIndexOuter As Byte, ByVal bIndexInner As Byte, ByRef pbVal As Byte)
    Sub GetRecordRatingValue(ByVal bIndexOuter As Byte, ByVal bIndexInner As Byte, ByRef pbVal As Byte)
    Sub GetRecordRatingDescriptionText(ByVal bIndex As Byte, ByRef pbLength As Byte, ByRef ppText As LongPtr)
End Interface

[InterfaceId("40834007-6834-46F0-BD45-D5F6A6BE258C")]
[OleAutomation(False)]
Interface ICaptionServiceDescriptor Extends stdole.IUnknown
    Sub GetNumberOfServices(ByRef pbVal As Byte)
    Sub GetLanguageCode(ByVal bIndex As Byte, ByRef LangCode As Byte)
    Sub GetCaptionServiceNumber(ByVal bIndex As Byte, ByRef pbVal As Byte)
    Sub GetCCType(ByVal bIndex As Byte, ByRef pbVal As Byte)
    Sub GetEasyReader(ByVal bIndex As Byte, ByRef pbVal As Byte)
    Sub GetWideAspectRatio(ByVal bIndex As Byte, ByRef pbVal As Byte)
End Interface

[InterfaceId("58C3C827-9D91-4215-BFF3-820A49F0904C")]
[OleAutomation(False)]
Interface IServiceLocationDescriptor Extends stdole.IUnknown
    Sub GetPCR_PID(ByRef pwVal As Integer)
    Sub GetNumberOfElements(ByRef pbVal As Byte)
    Sub GetElementStreamType(ByVal bIndex As Byte, ByRef pbVal As Byte)
    Sub GetElementPID(ByVal bIndex As Byte, ByRef pwVal As Integer)
    Sub GetElementLanguageCode(ByVal bIndex As Byte, ByRef LangCode As Byte)
End Interface







Module wdDShowBDA

Public Const BDA_PLP_ID_NOT_SET As Long = -1

Public Const MPEG2_FILTER_VERSION_1_SIZE  = 124
Public Const MPEG2_FILTER_VERSION_2_SIZE  = 133

Public Const MIN_DIMENSION = 1

Public Type BDA_TEMPLATE_CONNECTION
	FromNodeType As Long
	FromNodePinType As Long
	ToNodeType As Long
	ToNodePinType As Long
End Type

Public Type BDA_TEMPLATE_PIN_JOINT
	uliTemplateConnection As Long
	ulcInstancesMax As Long
End Type

Public Enum BDA_EVENT_ID
    BDA_EVENT_SIGNAL_LOSS = 0
    BDA_EVENT_SIGNAL_LOCK
    BDA_EVENT_DATA_START
    BDA_EVENT_DATA_STOP
    BDA_EVENT_CHANNEL_ACQUIRED
    BDA_EVENT_CHANNEL_LOST
    BDA_EVENT_CHANNEL_SOURCE_CHANGED
    BDA_EVENT_CHANNEL_ACTIVATED
    BDA_EVENT_CHANNEL_DEACTIVATED
    BDA_EVENT_SUBCHANNEL_ACQUIRED
    BDA_EVENT_SUBCHANNEL_LOST
    BDA_EVENT_SUBCHANNEL_SOURCE_CHANGED
    BDA_EVENT_SUBCHANNEL_ACTIVATED
    BDA_EVENT_SUBCHANNEL_DEACTIVATED
    BDA_EVENT_ACCESS_GRANTED
    BDA_EVENT_ACCESS_DENIED
    BDA_EVENT_OFFER_EXTENDED
    BDA_EVENT_PURCHASE_COMPLETED
    BDA_EVENT_SMART_CARD_INSERTED
    BDA_EVENT_SMART_CARD_REMOVED
End Enum

Public Type KS_BDA_FRAME_INFO
	ExtendedHeaderSize As Long 'Size of this extended header
	dwFrameFlags As Long
	ulEvent As Long
	ulChannelNumber As Long
	ulSubchannelNumber As Long
	ulReason As Long
End Type

Public Type BDA_ETHERNET_ADDRESS
	rgbAddress(0 To 5) As Byte
End Type

Public Type BDA_ETHERNET_ADDRESS_LIST
	ulcAddresses As Long
	rgAddressl(0 To (MIN_DIMENSION - 1)) As BDA_ETHERNET_ADDRESS
End Type

Public Enum BDA_MULTICAST_MODE
	BDA_PROMISCUOUS_MULTICAST = 0
	BDA_FILTERED_MULTICAST = 1
	BDA_NO_MULTICAST = 2
End Enum

Public Type BDA_IPv4_ADDRESS
	rgbAddress(0 To 3) As Byte
End Type

Public Type BDA_IPv4_ADDRESS_LIST
	ulcAddresses As Long
	rgAddressl(0 To (MIN_DIMENSION - 1)) As BDA_IPv4_ADDRESS
End Type

Public Type BDA_IPv6_ADDRESS
	rgbAddress(0 To 5) As Byte
End Type

Public Type BDA_IPv6_ADDRESS_LIST
	ulcAddresses As Long
	rgAddressl(0 To (MIN_DIMENSION - 1)) As BDA_IPv6_ADDRESS
End Type

Public Enum BDA_SIGNAL_STATE
	BDA_SIGNAL_UNAVAILABLE = 0
	BDA_SIGNAL_INACTIVE = 1
	BDA_SIGNAL_ACTIVE = 2
End Enum

Public Enum BDA_CHANGE_STATE
	BDA_CHANGES_COMPLETE = 0
	BDA_CHANGES_PENDING = 1
End Enum

Public Type BDANODE_DESCRIPTOR
    ulBdaNodeType As Long ' The node type as it is used
    ' in the BDA template topology
    guidFunction As UUID ' GUID from BdaMedia.h describing
    ' the node's function (e.g.
    ' KSNODE_BDA_RF_TUNER)
    guidName As UUID ' GUID that can be use to look up
    ' a displayable name for the node.
End Type

Public Type BDA_TABLE_SECTION
	ulPrimarySectionId As Long
	ulSecondarySectionId As Long
	ulcbSectionLength As Long
	argbSectionData(0 To (MIN_DIMENSION - 1)) As Long
End Type

Public Type BDA_DISEQC_SEND
	ulRequestId As Long
	ulPacketLength As Long
	argbPacketData(0 To 7) As Byte
End Type

Public Type BDA_DISEQC_RESPONSE
	ulRequestId As Long
	ulPacketLength As Long
	argbPacketData(0 To 7) As Byte
End Type

Public Enum MEDIA_SAMPLE_CONTENT
    MEDIA_TRANSPORT_PACKET   '  complete TS packet e.g. pass-through mode
    MEDIA_ELEMENTARY_STREAM   '  PES payloads; audio/video only
    MEDIA_MPEG2_PSI   '  PAT, PMT, CAT, Private
    MEDIA_TRANSPORT_PAYLOAD   '  gathered TS packet payloads (PES packets, etc...)
End Enum

Public Type PID_MAP
	ulPID As Long
	MediaSampleContent As MEDIA_SAMPLE_CONTENT
End Type

Public Type BDA_PID_MAP
	MediaSampleContent As MEDIA_SAMPLE_CONTENT
	ulcPIDs As Long
	aulPIDs(0 To (MIN_DIMENSION - 1)) As Long
End Type

Public Type BDA_PID_UNMAP
	ulcPIDs As Long
	aulPIDs(0 To (MIN_DIMENSION - 1)) As Long
End Type

Public Type BDA_CA_MODULE_UI
	ulFormat As Long
	ulbcDesc As Long
	ulDesc(0 To (MIN_DIMENSION - 1)) As Long
End Type

Public Type BDA_PROGRAM_PID_LIST
	ulProgramNumber As Long
	ulcPIDs As Long
	ulPID(0 To (MIN_DIMENSION - 1)) As Long
End Type

Public Type BDA_DRM_DRMSTATUS
	lResult As Long
	DRMuuid As UUID
	ulDrmUuidListStringSize As Long
	argbDrmUuidListString(0 To (MIN_DIMENSION - 1)) As UUID
End Type

Public Type BDA_WMDRM_STATUS
	lResult As Long
	ulMaxCaptureTokenSize As Long
	uMaxStreamingPid As Long
	ulMaxLicense As Long
	ulMinSecurityLevel As Long
	ulRevInfoSequenceNumber As Long
	ulRevInfoIssuedTime As Currency
	ulRevListVersion As Long
	ulRevInfoTTL As Long
	ulState As Long
End Type

Public Type BDA_WMDRM_KEYINFOLIST
	lResult As Long
	ulKeyuuidBufferLen As Long
	argKeyuuidBuffer(0 To 0) As UUID
End Type

Public Type BDA_BUFFER
	lResult As Long
	ulBufferSize As Long
	argbBuffer(0 To 0) As Byte
End Type

Public Type BDA_WMDRM_RENEWLICENSE
	lResult As Long
	ulDescrambleStatus As Long
	ulXmrLicenseOutputLength As Long
	argbXmrLicenceOutputBuffer(0 To 0) As Byte
End Type

Public Type BDA_WMDRMTUNER_PIDPROTECTION
	lResult As Long
	uuidKeyID As UUID
End Type

Public Type BDA_WMDRMTUNER_PURCHASEENTITLEMENT
	lResult As Long
	ulDescrambleStatus As Long
	ulCaptureTokenLength As Long
	argbCaptureTokenBuffer(0 To 0) As Byte
End Type

Public Type BDA_TUNER_TUNERSTATE
	lResult As Long
	ulTuneLength As Long
	argbTuneData(0 To 0) As Byte
End Type

Public Type BDA_TUNER_DIAGNOSTICS
	lResult As Long
	ulSignalLevel As Long
	ulSignalLevelQuality As Long
	ulSignalNoiseRatio As Long
End Type

Public Type BDA_STRING
	lResult As Long
	ulStringSize As Long
	argbString(0 To 0) As Byte
End Type

Public Type BDA_SCAN_CAPABILTIES
	lResult As Long
	ul64AnalogStandardsSupported As Currency
End Type

Public Type BDA_SCAN_STATE
	lResult As Long
	ulSignalLock As Long
	ulSecondsLeft As Long
	ulCurrentFrequency As Long
End Type

Public Type BDA_SCAN_START
	lResult As Long
	LowerFrequency As Long
	HigerFrequency As Long
End Type

Public Type BDA_GDDS_DATATYPE
	lResult As Long
	uuidDataType As UUID
End Type

Public Type BDA_GDDS_DATA
	lResult As Long
	ulDataLength As Long
	ulPercentageProgress As Long
	argbData(0 To 0) As Byte
End Type

Public Type BDA_USERACTIVITY_INTERVAL
	lResult As Long
	ulActivityInterval As Long
End Type

Public Type BDA_CAS_CHECK_ENTITLEMENTTOKEN
	lResult As Long
	ulDescrambleStatus As Long
End Type

Public Type BDA_CAS_CLOSE_MMIDIALOG
	lResult As Long
	SessionResult As Long
End Type

Public Type BDA_CAS_REQUESTTUNERDATA
	ucRequestPriority As Byte
	ucRequestReason As Byte
	ucRequestConsequences As Byte
	ulEstimatedTime As Long
End Type

Public Type BDA_CAS_OPENMMIDATA
	ulDialogNumber As Long
	ulDialogRequest As Long
	uuidDialogType As UUID
	usDialogDataLength As Integer
	argbDialogData(0 To 0) As Byte
End Type

Public Type BDA_CAS_CLOSEMMIDATA
	ulDialogNumber As Long
End Type

Public Enum ISDBCAS_REQUEST_ID
	ISDBCAS_REQUEST_ID_EMG = 56
	ISDBCAS_REQUEST_ID_EMD = 58
End Enum

[PackingAlignment(1)]
Public Type BDA_ISDBCAS_REQUESTHEADER
	bInstruction As Byte
	bReserved(0 To 2) As Byte
	ulDataLength As Long
	argbIsdbCommand(0 To 0) As Byte
End Type

[PackingAlignment(1)]
Public Type BDA_ISDBCAS_RESPONSEDATA
	lResult As Long
	ulRequestId As Long
	ulIsdbStatus As Long
	ulIsdbDataSize As Long
	argbIsdbCommandData(0 To 0) As Byte
End Type

Public Type BDA_ISDBCAS_EMG_REQ
	bCLA As Byte
	bINS As Byte
	bP1 As Byte
	bP2 As Byte
	bLC As Byte
	bCardId(0 To 5) As Byte
	bProtocol As Byte
	bCABroadcasterGroupId As Byte
	bMessageControl As Byte
	bMessageCode(0 To 0) As Byte
End Type

Public Enum MUX_PID_TYPE
	PID_OTHER = -1
	PID_ELEMENTARY_STREAM = 0
	PID_MPEG2_SECTION_PSI_SI = 1
End Enum

Public Type BDA_MUX_PIDLISTITEM
	usPIDNumber As Integer
	usProgramNumber As Integer
	ePIDType As MUX_PID_TYPE
End Type

[PackingAlignment(1)]
Public Type BDA_TS_SELECTORINFO
	bTSInfolength As Byte
	bReserved(0 To 1) As Byte
	guidNetworkType As UUID
	bTSIDCount As Byte
	usTSID(0 To 0) As Integer
End Type

Public Type BDA_TS_SELECTORINFO_ISDBS_EXT
	bTMCC(0 To 47) As Byte
End Type

 
Public Type BDA_DVBT2_L1_SIGNALLING_DATA
	L1Pre_TYPE As Byte
	L1Pre_BWT_S1_S2 As Byte
	L1Pre_REPETITION_GUARD_PAPR As Byte
	L1Pre_MOD_COD_FEC As Byte
	L1Pre_POSTSIZE_INFO_PILOT(0 To 4) As Byte
	L1Pre_TX_ID_AVAIL As Byte
	L1Pre_CELL_ID(0 To 1) As Byte
	L1Pre_NETWORK_ID(0 To 1) As Byte
	L1Pre_T2SYSTEM_ID(0 To 1) As Byte
	L1Pre_NUM_T2_FRAMES As Byte
	L1Pre_NUM_DATA_REGENFLAG_L1POSTEXT(0 To 1) As Byte
	L1Pre_NUMRF_CURRENTRF_RESERVED(0 To 1) As Byte
	L1Pre_CRC32(0 To 3) As Byte
	L1PostData(0 To 0) As Byte
End Type

Public Type BDA_RATING_PINRESET
	bPinLength As Byte
	argbNewPin(0 To 0) As Byte
End Type

Public Enum DVBSystemType
    DVB_Cable
    DVB_Terrestrial
    DVB_Satellite
    ISDB_Terrestrial
    ISDB_Satellite
End Enum

Public Enum BDA_Channel
    BDA_UNDEFINED_CHANNEL = -1
End Enum

Public Enum ComponentCategory
    CategoryNotSet = -1
    CategoryOther = 0
    CategoryVideo
    CategoryAudio
    CategoryText
    CategorySubtitles
    CategoryCaptions
    CategorySuperimpose
    CategoryData
    CATEGORY_COUNT
End Enum

Public Enum ComponentStatus
    StatusActive
    StatusInactive
    StatusUnavailable
End Enum

Public Enum MPEG2StreamType
    BDA_UNITIALIZED_MPEG2STREAMTYPE = -1
    MPEG2StreamType_Reserved1 = &H00
    ISO_IEC_11172_2_VIDEO = &H01
    ISO_IEC_13818_2_VIDEO = &H02
    ISO_IEC_11172_3_AUDIO = &H03
    ISO_IEC_13818_3_AUDIO = &H04
    ISO_IEC_13818_1_PRIVATE_SECTION = &H05
    ISO_IEC_13818_1_PES = &H06
    ISO_IEC_13522_MHEG = &H07
    ANNEX_A_DSM_CC = &H08
    ITU_T_REC_H_222_1 = &H09
    ISO_IEC_13818_6_TYPE_A = &H0A
    ISO_IEC_13818_6_TYPE_B = &H0B
    ISO_IEC_13818_6_TYPE_C = &H0C
    ISO_IEC_13818_6_TYPE_D = &H0D
    ISO_IEC_13818_1_AUXILIARY = &H0E
    ISO_IEC_13818_7_AUDIO = &H0F
    ISO_IEC_14496_2_VISUAL = &H10
    ISO_IEC_14496_3_AUDIO = &H11
    ISO_IEC_14496_1_IN_PES = &H12
    ISO_IEC_14496_1_IN_SECTION = &H13
    ISO_IEC_13818_6_DOWNLOAD = &H14
    METADATA_IN_PES = &H15
    METADATA_IN_SECTION = &H16
    METADATA_IN_DATA_CAROUSEL = &H17
    METADATA_IN_OBJECT_CAROUSEL = &H18
    METADATA_IN_DOWNLOAD_PROTOCOL = &H19
    IRPM_STREAMM = &H1A
    ITU_T_H264 = &H1B
    ISO_IEC_13818_1_RESERVED = &H1C ' continues until 0x7F
    USER_PRIVATE = &H10 ' standard says 0x80, retaining for backwards compatibility
    HEVC_VIDEO_OR_TEMPORAL_VIDEO = &H24
    HEVC_TEMPORAL_VIDEO_SUBSET = &H25
    MPEG_H_AUDIO = &H2D ' used for single-stream delivery or for the main stream in case of multi-stream delivery.
    MPEG_H_AUDIO_MS = &H2E ' used for additional (auxiliary) stream in case of MPEG-H multi-stream delivery.
    ISO_IEC_USER_PRIVATE = &H80
    DOLBY_AC3_AUDIO = &H81
    DOLBY_DIGITAL_PLUS_AUDIO_ATSC = &H87
End Enum

Public Type MPEG2_TRANSPORT_STRIDE
	dwOffset As Long
	dwPacketLength As Long
	dwStride As Long
End Type

Public Enum ATSCComponentTypeFlags
	ATSCCT_AC3 = 1
End Enum

Public Enum BinaryConvolutionCodeRate
    BDA_BCC_RATE_NOT_SET = -1
    BDA_BCC_RATE_NOT_DEFINED = 0
    BDA_BCC_RATE_1_2   ' 1/2
    BDA_BCC_RATE_2_3   ' 2/3
    BDA_BCC_RATE_3_4   ' 3/4
    BDA_BCC_RATE_3_5   ' 3/5
    BDA_BCC_RATE_4_5   ' 4/5
    BDA_BCC_RATE_5_6   ' 5/6
    BDA_BCC_RATE_5_11   ' 5/11
    BDA_BCC_RATE_7_8   ' 7/8
    BDA_BCC_RATE_1_4   ' 1/4
    BDA_BCC_RATE_1_3   ' 1/3
    BDA_BCC_RATE_2_5   ' 2/5
    BDA_BCC_RATE_6_7   ' 6/7
    BDA_BCC_RATE_8_9  ' 8/9
    BDA_BCC_RATE_9_10   ' 9/10
    BDA_BCC_RATE_MAX
End Enum

Public Enum FECMethod
    BDA_FEC_METHOD_NOT_SET = -1
    BDA_FEC_METHOD_NOT_DEFINED = 0
    BDA_FEC_VITERBI   ' FEC is a Viterbi Binary Convolution.
    BDA_FEC_RS_204_188   ' The FEC is Reed-Solomon 204/188 (outer FEC)
    BDA_FEC_LDPC   ' Low Density Parity Check error correction code
    BDA_FEC_BCH   ' Bose-Chaudhuri-Hocquenghem multiple error correction binary block code
    BDA_FEC_RS_147_130   ' The FEC is Reed-Solomon 147/130 (outer FEC) DirecTV-DSS
    BDA_FEC_MAX
End Enum

Public Enum ModulationType
    BDA_MOD_NOT_SET = -1
    BDA_MOD_NOT_DEFINED = 0
    BDA_MOD_16QAM = 1
    BDA_MOD_32QAM
    BDA_MOD_64QAM
    BDA_MOD_80QAM
    BDA_MOD_96QAM
    BDA_MOD_112QAM
    BDA_MOD_128QAM
    BDA_MOD_160QAM
    BDA_MOD_192QAM
    BDA_MOD_224QAM
    BDA_MOD_256QAM
    BDA_MOD_320QAM
    BDA_MOD_384QAM
    BDA_MOD_448QAM
    BDA_MOD_512QAM
    BDA_MOD_640QAM
    BDA_MOD_768QAM
    BDA_MOD_896QAM
    BDA_MOD_1024QAM
    BDA_MOD_QPSK ' Quadrature Phase Shift Keying (including backwards compatible mode)
    BDA_MOD_BPSK ' Binary Phase Shift Keying
    BDA_MOD_OQPSK ' Offset QPSK
    BDA_MOD_8VSB ' 8-Level Vestigial Sideband
    BDA_MOD_16VSB ' 16-Level Vestigial Sideband
    BDA_MOD_ANALOG_AMPLITUDE ' std am
    BDA_MOD_ANALOG_FREQUENCY ' std fm
    BDA_MOD_8PSK ' 8 Phase Shift Keying (including backwards compatible mode)
    BDA_MOD_RF ' analog TV (Video standards such as NTSC/PAL/SECAM specified in IAnalogLocator VideoStandard property)
    BDA_MOD_16APSK ' DVB-S2 modulation 16-Level APSK
    BDA_MOD_32APSK ' DVB-S2 modulation 32-Level APSK
    BDA_MOD_NBC_QPSK ' Non-Backwards Compatible Quadrature Phase Shift Keying
    BDA_MOD_NBC_8PSK ' Non-Backwards Compatible 8 Phase Shift Keying
    BDA_MOD_DIRECTV ' DIRECTV DSS
    BDA_MOD_ISDB_T_TMCC ' Automatic demodulation by Transmission and Multiplexing Configuration Control signal for ISDB-T
    BDA_MOD_ISDB_S_TMCC ' Automatic demodulation by Transmission and Multiplexing Configuration Control signal for ISDB-S
    BDA_MOD_MAX
End Enum

Public Enum ScanModulationTypes
    BDA_SCAN_MOD_16QAM = &H00000001
    BDA_SCAN_MOD_32QAM = &H00000002
    BDA_SCAN_MOD_64QAM = &H00000004
    BDA_SCAN_MOD_80QAM = &H00000008
    BDA_SCAN_MOD_96QAM = &H00000010
    BDA_SCAN_MOD_112QAM = &H00000020
    BDA_SCAN_MOD_128QAM = &H00000040
    BDA_SCAN_MOD_160QAM = &H00000080
    BDA_SCAN_MOD_192QAM = &H00000100
    BDA_SCAN_MOD_224QAM = &H00000200
    BDA_SCAN_MOD_256QAM = &H00000400
    BDA_SCAN_MOD_320QAM = &H00000800
    BDA_SCAN_MOD_384QAM = &H00001000
    BDA_SCAN_MOD_448QAM = &H00002000
    BDA_SCAN_MOD_512QAM = &H00004000
    BDA_SCAN_MOD_640QAM = &H00008000&
    BDA_SCAN_MOD_768QAM = &H00010000
    BDA_SCAN_MOD_896QAM = &H00020000
    BDA_SCAN_MOD_1024QAM = &H00040000
    BDA_SCAN_MOD_QPSK = &H00080000
    BDA_SCAN_MOD_BPSK = &H00100000
    BDA_SCAN_MOD_OQPSK = &H00200000
    BDA_SCAN_MOD_8VSB = &H00400000
    BDA_SCAN_MOD_16VSB = &H00800000
    BDA_SCAN_MOD_AM_RADIO = &H01000000
    BDA_SCAN_MOD_FM_RADIO = &H02000000
    BDA_SCAN_MOD_8PSK = &H04000000
    BDA_SCAN_MOD_RF = &H08000000 ' analog TV
    ScanModulationTypesMask_MCE_DigitalCable = BDA_MOD_64QAM Or BDA_MOD_256QAM
    ScanModulationTypesMask_MCE_TerrestrialATSC = BDA_MOD_8VSB
    ScanModulationTypesMask_MCE_AnalogTv = BDA_MOD_RF
    ScanModulationTypesMask_MCE_All_TV = &Hffffffff
    ScanModulationTypesMask_DVBC = BDA_MOD_64QAM Or BDA_SCAN_MOD_128QAM Or BDA_MOD_256QAM
    BDA_SCAN_MOD_16APSK = &H10000000
    BDA_SCAN_MOD_32APSK = &H20000000
End Enum

Public Enum SpectralInversion
    BDA_SPECTRAL_INVERSION_NOT_SET = -1
    BDA_SPECTRAL_INVERSION_NOT_DEFINED = 0
    BDA_SPECTRAL_INVERSION_AUTOMATIC
    BDA_SPECTRAL_INVERSION_NORMAL
    BDA_SPECTRAL_INVERSION_INVERTED
    BDA_SPECTRAL_INVERSION_MAX
End Enum

Public Enum Polarisation
    BDA_POLARISATION_NOT_SET = -1
    BDA_POLARISATION_NOT_DEFINED = 0
    BDA_POLARISATION_LINEAR_H  ' Linear horizontal polarisation
    BDA_POLARISATION_LINEAR_V   ' Linear vertical polarisation
    BDA_POLARISATION_CIRCULAR_L   ' Circular left polarisation
    BDA_POLARISATION_CIRCULAR_R   ' Circular right polarisation
    BDA_POLARISATION_MAX
End Enum

Public Enum LNB_Source
    BDA_LNB_SOURCE_NOT_SET = -1
    BDA_LNB_SOURCE_NOT_DEFINED = 0
    BDA_LNB_SOURCE_A = 1 '
    BDA_LNB_SOURCE_B = 2 '
    BDA_LNB_SOURCE_C = 3 '
    BDA_LNB_SOURCE_D = 4 '
    BDA_LNB_SOURCE_MAX
End Enum

Public Enum GuardInterval
    BDA_GUARD_NOT_SET = -1
    BDA_GUARD_NOT_DEFINED = 0
    BDA_GUARD_1_32 = 1 ' Guard interval is 1/32
    BDA_GUARD_1_16   ' Guard interval is 1/16
    BDA_GUARD_1_8   ' Guard interval is 1/8
    BDA_GUARD_1_4   ' Guard interval is 1/4
    BDA_GUARD_1_128   ' Guard interval is 1/128 (DVB-T2)
    BDA_GUARD_19_128   ' Guard interval is 19/128 (DVB-T2)
    BDA_GUARD_19_256   ' Guard interval is 19/256 (DVB-T2)
    BDA_GUARD_MAX
End Enum

Public Enum HierarchyAlpha
    BDA_HALPHA_NOT_SET = -1
    BDA_HALPHA_NOT_DEFINED = 0
    BDA_HALPHA_1 = 1 ' Hierarchy alpha is 1.
    BDA_HALPHA_2   ' Hierarchy alpha is 2.
    BDA_HALPHA_4    ' Hierarchy alpha is 4.
    BDA_HALPHA_MAX
End Enum

Public Enum TransmissionMode
    BDA_XMIT_MODE_NOT_SET = -1
    BDA_XMIT_MODE_NOT_DEFINED = 0
    BDA_XMIT_MODE_2K = 1 ' Transmission uses 1705 carriers (use a 2K FFT)
    BDA_XMIT_MODE_8K   ' Transmission uses 6817 carriers (use an 8K FFT)
    BDA_XMIT_MODE_4K
    BDA_XMIT_MODE_2K_INTERLEAVED
    BDA_XMIT_MODE_4K_INTERLEAVED
    BDA_XMIT_MODE_1K   'DVB-T2 (use 1K FFT)
    BDA_XMIT_MODE_16K   'DVB-T2 (use 16K FFT)
    BDA_XMIT_MODE_32K  'DVB-T2 (use 32K FFT)
    BDA_XMIT_MODE_MAX
End Enum

Public Enum RollOff
    BDA_ROLL_OFF_NOT_SET = -1
    BDA_ROLL_OFF_NOT_DEFINED = 0
    BDA_ROLL_OFF_20 = 1 ' .20 Roll Off (DVB-S2 Only)
    BDA_ROLL_OFF_25 = 2 ' .25 Roll Off (DVB-S2 Only)
    BDA_ROLL_OFF_35 = 3 ' .35 Roll Off (DVB-S2 Only)
    BDA_ROLL_OFF_MAX = 4
End Enum

Public Enum Pilot
    BDA_PILOT_NOT_SET = -1
    BDA_PILOT_NOT_DEFINED = 0
    BDA_PILOT_OFF = 1 ' Pilot Off (DVB-S2 Only)
    BDA_PILOT_ON = 2 ' Pilot On  (DVB-S2 Only)
    BDA_PILOT_MAX = 3
End Enum

Public Type BDA_SIGNAL_TIMEOUTS
    ulCarrierTimeoutMs As Long
    ulScanningTimeoutMs As Long
    ulTuningTimeoutMs As Long
End Type

Public Enum BDA_Frequency
	BDA_FREQUENCY_NOT_SET = -1
	BDA_FREQUENCY_NOT_DEFINED = 0
End Enum

Public Enum BDA_Range
	BDA_RANGE_NOT_SET = -1
	BDA_RANGE_NOT_DEFINED = 0
End Enum

Public Enum BDA_Channel_Bandwidth
	BDA_CHAN_BANDWITH_NOT_SET = -1
	BDA_CHAN_BANDWITH_NOT_DEFINED = 0
End Enum

Public Enum BDA_Frequency_Multiplier
	BDA_FREQUENCY_MULTIPLIER_NOT_SET = -1
	BDA_FREQUENCY_MULTIPLIER_NOT_DEFINED = 0
End Enum

Public Enum BDA_Comp_Flags
    '  equiv comparison rule overrides, default behavior is type specific
    BDACOMP_NOT_DEFINED = &H00000000
    BDACOMP_EXCLUDE_TS_FROM_TR = &H00000001 ' never put TS in TR equiv comparison
    BDACOMP_INCLUDE_LOCATOR_IN_TR = &H00000002 ' always include loc in TR equiv comparison
    BDACOMP_INCLUDE_COMPONENTS_IN_TR = &H00000004 ' always include components in TR equiv comparison
End Enum

Public Enum ApplicationTypeType
    SCTE28_ConditionalAccess = 0
    SCTE28_POD_Host_Binding_Information
    SCTE28_IPService
    SCTE28_NetworkInterface_SCTE55_2
    SCTE28_NetworkInterface_SCTE55_1
    SCTE28_CopyProtection
    SCTE28_Diagnostic
    SCTE28_Undesignated
    SCTE28_Reserved
End Enum

Public Enum BDA_CONDITIONALACCESS_REQUESTTYPE
	CONDITIONALACCESS_ACCESS_UNSPECIFIED = 0
	CONDITIONALACCESS_ACCESS_NOT_POSSIBLE = 1
	CONDITIONALACCESS_ACCESS_POSSIBLE = 2
	CONDITIONALACCESS_ACCESS_POSSIBLE_NO_STREAMING_DISRUPTION = 3
End Enum

Public Enum BDA_CONDITIONALACCESS_MMICLOSEREASON
	CONDITIONALACCESS_UNSPECIFIED = 0
	CONDITIONALACCESS_CLOSED_ITSELF = 1
	CONDITIONALACCESS_TUNER_REQUESTED_CLOSE = 2
	CONDITIONALACCESS_DIALOG_TIMEOUT = 3
	CONDITIONALACCESS_DIALOG_FOCUS_CHANGE = 4
	CONDITIONALACCESS_DIALOG_USER_DISMISSED = 5
	CONDITIONALACCESS_DIALOG_USER_NOT_AVAILABLE = 6
End Enum

Public Enum BDA_CONDITIONALACCESS_SESSION_RESULT
	CONDITIONALACCESS_SUCCESSFULL = 0
	CONDITIONALACCESS_ENDED_NOCHANGE = 1
	CONDITIONALACCESS_ABORTED = 2
End Enum

Public Enum BDA_DISCOVERY_STATE
	BDA_DISCOVERY_UNSPECIFIED = 0
	BDA_DISCOVERY_REQUIRED = 1
	BDA_DISCOVERY_COMPLETE = 2
End Enum

Public Enum SmartCardStatusType
	CardInserted = 0
	CardRemoved = 1
	CardError = 2
	CardDataChanged = 3
	CardFirmwareUpgrade = 4
End Enum

Public Enum SmartCardAssociationType
	NotAssociated = 0
	Associated = 1
	AssociationUnknown = 2
End Enum

Public Enum LocationCodeSchemeType
	SCTE_18 = 0
End Enum

Public Type EALocationCodeType
	LocationCodeScheme As LocationCodeSchemeType
	state_code As Byte
	county_subdivision As Byte
	county_code As Integer
End Type

Public Enum EntitlementType
	EntitlementTypeEntitled = 0
	EntitlementTypeNotEntitled = 1
	EntitlementTypeTechnicalFailure = 2
End Enum

Public Enum UICloseReasonType
	UICloseReasonTypeNotReady = 0
	UICloseReasonTypeUserClosed = 1
	UICloseReasonTypeSystemClosed = 2
	UICloseReasonTypeDeviceClosed = 3
	UICloseReasonTypeErrorClosed = 4
End Enum

Public Type SmartCardApplication
	ApplicationType As ApplicationTypeType
	ApplicationVersion As Integer
	pbstrApplicationName As String
	pbstrApplicationURL As String
End Type

Public Enum BDA_DrmPairingError
	BDA_DrmPairing_Succeeded = 0
	BDA_DrmPairing_HardwareFailure = 1
	BDA_DrmPairing_NeedRevocationData = 2
	BDA_DrmPairing_NeedIndiv = 3
	BDA_DrmPairing_Other = 4
	BDA_DrmPairing_DrmInitFailed = 5
	BDA_DrmPairing_DrmNotPaired = 6
	BDA_DrmPairing_DrmRePairSoon = 7
	BDA_DrmPairing_Aborted = 8
	BDA_DrmPairing_NeedSDKUpdate = 9
End Enum

Public Enum KSPROPERTY_IPSINK
	KSPROPERTY_IPSINK_MULTICASTLIST = 0
	KSPROPERTY_IPSINK_ADAPTER_DESCRIPTION = 1
	KSPROPERTY_IPSINK_ADAPTER_ADDRESS = 2
End Enum

Public Enum PBDAEncoderDataTypes
	PBDA_Encoder_Audio_AlgorithmType_MPEG1LayerII = 0
	PBDA_Encoder_Audio_AlgorithmType_AC3 = 1
	PBDA_Encoder_Video_MPEG2PartII = 0
	PBDA_Encoder_Video_MPEG4Part10 = 1
	PBDA_Encoder_Video_AVC = 1
	PBDA_Encoder_Video_H264 = 1
End Enum

Public Enum PBDAEncoderBitrateModes
	PBDA_Encoder_BitrateMode_Constant = 1
	PBDA_Encoder_BitrateMode_Variable = 2
	PBDA_Encoder_BitrateMode_Average = 3
End Enum



'mpeg2structs.h/.idl

Public Type PID_BITS
    'WORD Reserved : 3;
    'WORD ProgramId : 13;
    Bits As Integer
End Type

Public Type MPEG_HEADER_BITS
    Bits As Integer
End Type

Public Type MPEG_HEADER_VERSION_BITS
    Bits As Byte
End Type

Public Enum MPEG_CURRENT_NEXT_BIT
    MPEG_SECTION_IS_NEXT = 0
    MPEG_SECTION_IS_CURRENT = 1
End Enum

Public Type TID_EXTENSION
    wTidExt As Integer
    wCount As Integer
End Type

[PackingAlignment(1)]
Public Type SECTION
    TableId As Byte
    'union
    '{
    '    MPEG_HEADER_BITS_MIDL S;
    '    WORD                  W;
    '}       Header;
    Header As Integer
    SectionData(0 To 0) As Byte ' Array size is Header.S.SectionLength
End Type

[PackingAlignment(1)]
Public Type LONG_SECTION
    TableId As Byte
    'union
    '{
    '    MPEG_HEADER_BITS_MIDL S;
    '    WORD                  W;
    '}       Header;
    Header As Integer
    TableIdExtension As Integer
    'union
    '{
    '    MPEG_HEADER_VERSION_BITS_MIDL S;
    '    BYTE                          B;
    '}       Version;
    Version As Byte
    SectionNumber As Byte
    LastSectionNumber As Byte
    RemainingData(0 To 0) As Byte ' Array size is Header.S.SectionLength - 5 
End Type

[PackingAlignment(1)]
Public Type DSMCC_SECTION
    TableId As Byte
    'union
    '{
    '    MPEG_HEADER_BITS_MIDL S;
    '    WORD                  W;
    '}       Header;
    Header As Integer
    TableIdExtension As Integer
    'union
    '{
    '    MPEG_HEADER_VERSION_BITS_MIDL S;
    '    BYTE                          B;
    '}       Version;
    Version As Byte
    SectionNumber As Byte
    LastSectionNumber As Byte
    ProtocolDiscriminator As Byte
    DsmccType As Byte
    MessageId As Integer
    TransactionId As Long
    Reserved As Byte
    AdaptationLength As Byte
    MessageLength As Integer
    RemainingData(0 To 0) As Byte
End Type

[PackingAlignment(1)]
Public Type MPEG_RQST_PACKET
    dwLength As Long
    'PSECTION pSection;
    pSection As LongPtr
End Type

[PackingAlignment(1)]
Public Type MPEG_PACKET_LIST
    wPacketCount As Integer
    '[size_is(wPacketCount)] PMPEG_RQST_PACKET PacketList[];
    PacketList As LongPtr
End Type

[PackingAlignment(1)]
Public Type DSMCC_FILTER_OPTIONS
    fSpecifyProtocol As BOOL ' If true, Protocol should be set to desired value
    Protocol As Byte
    fSpecifyType As BOOL ' If true, Type should be set to desired value
    Type As Byte
    fSpecifyMessageId As BOOL ' If true, MessageId should be set to desired value
    MessageId As Integer
    fSpecifyTransactionId As BOOL ' If true, TransactionId (or DownloadId for DDB msgs) should be set to desired value
    fUseTrxIdMessageIdMask As BOOL ' If false, TransactionId is filtered as is.
    ' If true, TransactionId is masked to look
    ' for any version of message with associated
    ' message identifier. See DVB - Data
    ' Broadcasting Guidlines 4.6.5. (Assignment
    ' and use of transactionId values).
    TransactionId As Long
    fSpecifyModuleVersion As BOOL ' If true, ModuleVersion should be set to the desired value
    ModuleVersion As Byte
    fSpecifyBlockNumber As BOOL ' If true, BlockNumber should be set to desired value
    BlockNumber As Integer
    fGetModuleCall As BOOL ' If true, NumberOfBlocksInModule should be set
    NumberOfBlocksInModule As Integer
End Type

[PackingAlignment(1)]
Public Type ATSC_FILTER_OPTIONS
    fSpecifyEtmId As BOOL ' If true, EtmId should be set to desired value
    EtmId As Long
End Type

[PackingAlignment(1)]
Public Type DVB_EIT_FILTER_OPTIONS
    fSpecifySegment As BOOL ' If true, bSegment should be set to desired value
    bSegment As Byte
End Type


[PackingAlignment(1)]
Public Type MPEG2_FILTER
    bVersionNumber As Byte ' Must be set to 1 or more to match filter definition
    wFilterSize As Integer ' Size of total filter structure. Version 1 filter is 73 bytes.
    fUseRawFilteringBits As BOOL ' If true, Filter and Mask fields should be set to desired value, all other
    ' fields with be ignored.
    Filter(0 To 15) As Byte ' Bits with values to compare against for a match.
    Mask(0 To 15) As Byte ' Bits set to 0 are bits that are compared to those in the filter, those
    ' bits set to 1 are ignored.
    fSpecifyTableIdExtension As BOOL ' If true, TableIdExtension should be set to desired value (false = don't care)
    TableIdExtension As Integer
    fSpecifyVersion As BOOL ' If true, Version should be set to desired value (false = don't care)
    Version As Byte
    fSpecifySectionNumber As BOOL ' If true, SectionNumber should be set to desired value (false = don't care)
    SectionNumber As Byte
    fSpecifyCurrentNext As BOOL ' If true, fNext should be set to desired value (false = don't care)
    fNext As BOOL ' If true, next table is queried. Else, current
    fSpecifyDsmccOptions As BOOL ' If true, Dsmcc should be set with desired filter options
    Dsmcc As DSMCC_FILTER_OPTIONS
    fSpecifyAtscOptions As BOOL ' If true, Atsc should be set with desired filter options
    Atsc As ATSC_FILTER_OPTIONS
End Type
[PackingAlignment(1)]
Public Type MPEG2_FILTER2
    'union
    '{
    '    struct
    '    {
    '        BYTE  bVersionNumber;
    '        WORD  wFilterSize;
    '        BOOL  fUseRawFilteringBits;
    '        BYTE  Filter[16];
    '        BYTE  Mask[16];
    '        BOOL  fSpecifyTableIdExtension;
    '        WORD  TableIdExtension;
    '        BOOL  fSpecifyVersion;
    '        BYTE  Version;
    '        BOOL  fSpecifySectionNumber;
    '        BYTE  SectionNumber;
    '        BOOL  fSpecifyCurrentNext;
    '        BOOL  fNext;
    '        BOOL  fSpecifyDsmccOptions;
    '        DSMCC_FILTER_OPTIONS Dsmcc;
    '        BOOL  fSpecifyAtscOptions;
    '        ATSC_FILTER_OPTIONS Atsc;
    '    };
    '    BYTE bVersion1Bytes[124];
    '};
    bVersion1Bytes As MPEG2_FILTER
    ' Version 1 - 124 bytes
    fSpecifyDvbEitOptions As BOOL ' Set true for DVB/ISDB EIT. The table is handled segment basis.
    ' If true, DvbEit should be set with desired filter options
    DvbEit As DVB_EIT_FILTER_OPTIONS
    ' Version 2 - 133 bytes
End Type

[PackingAlignment(1)]
Public Type MPEG_STREAM_BUFFER
    hr As Long
    dwDataBufferSize As Long
    dwSizeOfDataRead As Long
    pDataBuffer As LongPtr
End Type

[PackingAlignment(1)]
Public Type MPEG_TIME
    Hours As Byte ' Legal Range: 0 to 23
    Minutes As Byte ' Legal Range: 0 to 59
    Seconds As Byte ' Legal Range: 0 to 59
End Type

'Alias MPEG_TIME As MPEG_DURATION
[PackingAlignment(1)]
Public Type MPEG_DURATION
    Hours As Byte ' Legal Range: 0 to 23
    Minutes As Byte ' Legal Range: 0 to 59
    Seconds As Byte ' Legal Range: 0 to 59
End Type

[PackingAlignment(1)]
Public Type MPEG_DATE
    Date As Byte ' Legal Range: 1 to 31
    Month As Byte ' Legal Range: 1 to 12
    Year As Integer ' Legal Range: 1900 to 2100 
End Type

[PackingAlignment(1)]
Public Type MPEG_DATE_AND_TIME
    D As MPEG_DATE
    T As MPEG_TIME
End Type

Public Enum MPEG_CONTEXT_TYPE
    MPEG_CONTEXT_BCS_DEMUX
    MPEG_CONTEXT_WINSOCK
End Enum

Public Type MPEG_BCS_DEMUX
    AVMGraphId As Long
End Type

Public Type MPEG_WINSOCK
    AVMGraphId As Long
End Type

Public Type MPEG_CONTEXT
    Type As MPEG_CONTEXT_TYPE
    'union
    '{
    '    MPEG_BCS_DEMUX      Demux;
    '    MPEG_WINSOCK        Winsock;
    '} U;
    U As Long
End Type

Public Enum MPEG_REQUEST_TYPE
    MPEG_RQST_UNKNOWN = 0
    MPEG_RQST_GET_SECTION
    MPEG_RQST_GET_SECTION_ASYNC
    MPEG_RQST_GET_TABLE
    MPEG_RQST_GET_TABLE_ASYNC
    MPEG_RQST_GET_SECTIONS_STREAM
    MPEG_RQST_GET_PES_STREAM
    MPEG_RQST_GET_TS_STREAM
    MPEG_RQST_START_MPE_STREAM
End Enum

[PackingAlignment(1)]
Public Type MPEG_SERVICE_REQUEST
    Type As MPEG_REQUEST_TYPE
    Context As MPEG_CONTEXT
    Pid As Integer
    TableId As Byte
    Filter As MPEG2_FILTER
    Flags As Long
End Type

[PackingAlignment(1)]
Public Type MPEG_SERVICE_RESPONSE
    IPAddress As Long
    Port As Integer
End Type

[PackingAlignment(1)]
Public Type DSMCC_ELEMENT
    pid As Integer
    bComponentTag As Byte
    dwCarouselId As Long
    dwTransactionId As Long
    pNext As LongPtr
End Type

[PackingAlignment(1)]
Public Type MPE_ELEMENT
    pid As Integer
    bComponentTag As Byte
    pNext As LongPtr
End Type

[PackingAlignment(1)]
Public Type MPEG_STREAM_FILTER
    wPidValue As Integer ' PID value
    dwFilterSize As Long ' size of filter in bits
    fCrcEnabled As BOOL ' enable/disable CRC check 
    rgchFilter(0 To 15) As Byte ' filter data
    rgchMask(0 To 15) As Byte ' filter mask
End Type


' mpeg2data.h/.idl'

Public Enum DShowMpeg2DefTID
    MPEG_PAT_TID = &H00
    MPEG_CAT_TID = &H01
    MPEG_PMT_TID = &H02
    MPEG_TSDT_TID = &H03
    ATSC_MGT_TID = &HC7
    ATSC_VCT_TERR_TID = &HC8
    ATSC_VCT_CABL_TID = &HC9
    ATSC_EIT_TID = &HCB
    ATSC_ETT_TID = &HCC
    ATSC_RRT_TID = &HCA
    ATSC_STT_TID = &HCD
    ATSC_PIT_TID = &HD0
    DVB_NIT_ACTUAL_TID = &H40
    DVB_NIT_OTHER_TID = &H41
    DVB_SDT_ACTUAL_TID = &H42
    DVB_SDT_OTHER_TID = &H46
    DVB_BAT_TID = &H4A
    DVB_EIT_ACTUAL_TID = &H4E
    DVB_EIT_OTHER_TID = &H4F
    DVB_RST_TID = &H71
    DVB_TDT_TID = &H70
    DVB_ST_PID_16 = &H0010
    DVB_ST_PID_17 = &H0011
    DVB_ST_PID_18 = &H0012
    DVB_ST_PID_19 = &H0013
    DVB_ST_PID_20 = &H0014
    DVB_ST_TID = &H72
    ISDB_ST_TID = &H72
    DVB_TOT_TID = &H73
    DVB_DIT_TID = &H7E
    DVB_SIT_TID = &H7F
    ISDB_EMM_TID = &H85
    ISDB_BIT_TID = &HC4
    ISDB_NBIT_MSG_TID = &HC5
    ISDB_NBIT_REF_TID = &HC6
    ISDB_LDT_TID = &HC7
    ISDB_SDTT_TID = &HC3
    ISDB_CDT_TID = &HC8
    SCTE_EAS_TID = &HD8
End Enum
Public Enum DShowMpeg2DefPID
    MPEG_PAT_PID = &H0000
    MPEG_CAT_PID = &H0001
    MPEG_TSDT_PID = &H0002
    ATSC_MGT_PID = &H1FFB
    ATSC_VCT_PID = &H1FFB
    ATSC_RRT_PID = &H1FFB
    ATSC_STT_PID = &H1FFB
    DVB_NIT_PID = &H0010
    DVB_SDT_PID = &H0011
    DVB_BAT_PID = &H0011
    DVB_EIT_PID = &H0012
    DVB_RST_PID = &H0013
    DVB_TDT_PID = &H0014
    DVB_ST_PID_16 = &H0010
    DVB_ST_PID_17 = &H0011
    DVB_ST_PID_18 = &H0012
    DVB_ST_PID_19 = &H0013
    DVB_ST_PID_20 = &H0014
    DVB_TOT_PID = &H0014
    DVB_DIT_PID = &H001E
    DVB_SIT_PID = &H001F
    ISDB_BIT_PID = &H0024
    ISDB_NBIT_PID = &H0025
    ISDB_LDT_PID = &H0025
    ISDB_SDTT_PID = &H0023
    ISDB_SDTT_ALT_PID = &H0028
    ISDB_CDT_PID = &H0029
    SCTE_EAS_IB_PID = &H1FFB
    SCTE_EAS_OOB_PID = &H1FFC
End Enum

Public Type Mpeg2TableSampleHdr
    SectionCount As Byte
    Reserved(0 To 2) As Byte
    SectionOffsets(0 To 0) As Long
End Type



' atscpsipparser_h


Public Enum BDAATSCEtmLocs
    ATSC_ETM_LOCATION_NOT_PRESENT = &H00
    ATSC_ETM_LOCATION_IN_PTC_FOR_PSIP = &H01
    ATSC_ETM_LOCATION_IN_PTC_FOR_EVENT = &H02
    ATSC_ETM_LOCATION_RESERVED = &H03
End Enum

Public Type DShowBDAProgramElement
    wProgramNumber As Integer
    wProgramMapPID As Integer
End Type




Public Function CLSID_BroadcastEventService() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0B3FFB92, &H0919, &H4934, &H9D, &H5B, &H61, &H9C, &H71, &H9D, &H02, &H02)
CLSID_BroadcastEventService = iid
End Function
Public Function SID_SBroadcastEventService() As UUID
    Return CLSID_BroadcastEventService
End Function



Public Function CLSID_Mpeg2TableFilter() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H752845f1, &H758f, &H4c83, &Ha0, &H43, &H42, &H70, &Hc5, &H93, &H30, &H8e)
CLSID_Mpeg2TableFilter = iid
End Function
Public Function Mpeg2DataLib() As UUID
'{DBAF6C1B-B6A4-4898-AE65-204F0D9509A1}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HDBAF6C1B, CInt(&HB6A4), CInt(&H4898), &HAE, &H65, &H20, &H4F, &H0D, &H95, &H09, &HA1)
 Mpeg2DataLib = iid
End Function
Public Function PBDA_AUX_CONNECTOR_TYPE_SVideo() As UUID
Static iid As UUID
	If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha0e905f4, &H24c9, &H4a54, &Hb7, &H61, &H21, &H33, &H55, &Hef, &Hc1, &H3A)
PBDA_AUX_CONNECTOR_TYPE_SVideo = iid
End Function
Public Function PBDA_AUX_CONNECTOR_TYPE_Composite() As UUID
Static iid As UUID
	If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf6298b4c, &Hc725, &H4d42, &H84, &H9b, &H41, &H0b, &Hbb, &H14, &Hea, &H62)
PBDA_AUX_CONNECTOR_TYPE_Composite = iid
End Function
Public Function CLSID_PBDA_AUX_DATA_TYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hfd456373, &H3323, &H4090, &Had, &Hca, &H8e, &Hd4, &H5f, &H55, &Hcf, &H10)
CLSID_PBDA_AUX_DATA_TYPE = iid
End Function
Public Function CLSID_PBDA_GDDS_DATA_TYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC80C0DF3, &H6052, &H4c16, &H9F, &H56, &HC4, &H4C, &H21, &HF7, &H3C, &H45)
CLSID_PBDA_GDDS_DATA_TYPE = iid
End Function
Public Function CLSID_PBDA_Encoder_DATA_TYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H728fd6bc, &H5546, &H4716, &Hb1, &H03, &Hf8, &H99, &Hf5, &Ha1, &Hfa, &H68)
CLSID_PBDA_Encoder_DATA_TYPE = iid
End Function
Public Function CLSID_PBDA_FDC_DATA_TYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He7dbf9a0, &H22ab, &H4047, &H8e, &H67, &Hef, &H9a, &Hd5, &H4, &He7, &H29)
CLSID_PBDA_FDC_DATA_TYPE = iid
End Function


Public Function IID_IBDA_NetworkProvider() As UUID
'{fd501041-8ebe-11ce-8183-00aa00577da2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hfd501041, CInt(&H8ebe), CInt(&H11ce), &H81, &H83, &H00, &Haa, &H00, &H57, &H7d, &Ha2)
IID_IBDA_NetworkProvider = iid
End Function
Public Function IID_IBDA_EthernetFilter() As UUID
'{71985F43-1CA1-11d3-9CC8-00C04F7971E0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H71985F43, CInt(&H1CA1), CInt(&H11d3), &H9C, &HC8, &H00, &HC0, &H4F, &H79, &H71, &HE0)
IID_IBDA_EthernetFilter = iid
End Function
Public Function IID_IBDA_IPV4Filter() As UUID
'{71985F44-1CA1-11d3-9CC8-00C04F7971E0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H71985F44, CInt(&H1CA1), CInt(&H11d3), &H9C, &HC8, &H00, &HC0, &H4F, &H79, &H71, &HE0)
IID_IBDA_IPV4Filter = iid
End Function
Public Function IID_IBDA_IPV6Filter() As UUID
'{E1785A74-2A23-4fb3-9245-A8F88017EF33}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE1785A74, CInt(&H2A23), CInt(&H4fb3), &H92, &H45, &HA8, &HF8, &H80, &H17, &HEF, &H33)
IID_IBDA_IPV6Filter = iid
End Function
Public Function IID_IBDA_DeviceControl() As UUID
'{FD0A5AF3-B41D-11d2-9C95-00C04F7971E0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFD0A5AF3, CInt(&HB41D), CInt(&H11d2), &H9C, &H95, &H00, &HC0, &H4F, &H79, &H71, &HE0)
IID_IBDA_DeviceControl = iid
End Function
Public Function IID_IBDA_PinControl() As UUID
'{0DED49D5-A8B7-4d5d-97A1-12B0C195874D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H0DED49D5, CInt(&HA8B7), CInt(&H4d5d), &H97, &HA1, &H12, &HB0, &HC1, &H95, &H87, &H4D)
IID_IBDA_PinControl = iid
End Function
Public Function IID_IBDA_SignalProperties() As UUID
'{D2F1644B-B409-11d2-BC69-00A0C9EE9E16}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD2F1644B, CInt(&HB409), CInt(&H11d2), &HBC, &H69, &H00, &HA0, &HC9, &HEE, &H9E, &H16)
IID_IBDA_SignalProperties = iid
End Function
Public Function IID_IBDA_SignalStatistics() As UUID
'{1347D106-CF3A-428a-A5CB-AC0D9A2A4338}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1347D106, CInt(&HCF3A), CInt(&H428a), &HA5, &HCB, &HAC, &H0D, &H9A, &H2A, &H43, &H38)
IID_IBDA_SignalStatistics = iid
End Function
Public Function IID_IBDA_Topology() As UUID
'{79B56888-7FEA-4690-B45D-38FD3C7849BE}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H79B56888, CInt(&H7FEA), CInt(&H4690), &HB4, &H5D, &H38, &HFD, &H3C, &H78, &H49, &HBE)
IID_IBDA_Topology = iid
End Function
Public Function IID_IBDA_VoidTransform() As UUID
'{71985F46-1CA1-11d3-9CC8-00C04F7971E0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H71985F46, CInt(&H1CA1), CInt(&H11d3), &H9C, &HC8, &H00, &HC0, &H4F, &H79, &H71, &HE0)
IID_IBDA_VoidTransform = iid
End Function
Public Function IID_IBDA_NullTransform() As UUID
'{DDF15B0D-BD25-11d2-9CA0-00C04F7971E0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDDF15B0D, CInt(&HBD25), CInt(&H11d2), &H9C, &HA0, &H00, &HC0, &H4F, &H79, &H71, &HE0)
IID_IBDA_NullTransform = iid
End Function
Public Function IID_IBDA_FrequencyFilter() As UUID
'{71985F47-1CA1-11d3-9CC8-00C04F7971E0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H71985F47, CInt(&H1CA1), CInt(&H11d3), &H9C, &HC8, &H00, &HC0, &H4F, &H79, &H71, &HE0)
IID_IBDA_FrequencyFilter = iid
End Function
Public Function IID_IBDA_LNBInfo() As UUID
'{992CF102-49F9-4719-A664-C4F23E2408F4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H992CF102, CInt(&H49F9), CInt(&H4719), &HA6, &H64, &HC4, &HF2, &H3E, &H24, &H08, &HF4)
IID_IBDA_LNBInfo = iid
End Function
Public Function IID_IBDA_DiseqCommand() As UUID
'{F84E2AB0-3C6B-45e3-A0FC-8669D4B81F11}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF84E2AB0, CInt(&H3C6B), CInt(&H45e3), &HA0, &HFC, &H86, &H69, &HD4, &HB8, &H1F, &H11)
IID_IBDA_DiseqCommand = iid
End Function
Public Function IID_IBDA_AutoDemodulate() As UUID
'{DDF15B12-BD25-11d2-9CA0-00C04F7971E0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDDF15B12, CInt(&HBD25), CInt(&H11d2), &H9C, &HA0, &H00, &HC0, &H4F, &H79, &H71, &HE0)
IID_IBDA_AutoDemodulate = iid
End Function
Public Function IID_IBDA_AutoDemodulateEx() As UUID
'{34518D13-1182-48e6-B28F-B24987787326}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H34518D13, CInt(&H1182), CInt(&H48e6), &HB2, &H8F, &HB2, &H49, &H87, &H78, &H73, &H26)
IID_IBDA_AutoDemodulateEx = iid
End Function
Public Function IID_IBDA_DigitalDemodulator() As UUID
'{EF30F379-985B-4d10-B640-A79D5E04E1E0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEF30F379, CInt(&H985B), CInt(&H4d10), &HB6, &H40, &HA7, &H9D, &H5E, &H04, &HE1, &HE0)
IID_IBDA_DigitalDemodulator = iid
End Function
Public Function IID_IBDA_DigitalDemodulator2() As UUID
'{525ED3EE-5CF3-4e1e-9A06-5368A84F9A6E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H525ED3EE, CInt(&H5CF3), CInt(&H4e1e), &H9A, &H06, &H53, &H68, &HA8, &H4F, &H9A, &H6E)
IID_IBDA_DigitalDemodulator2 = iid
End Function
Public Function IID_IBDA_DigitalDemodulator3() As UUID
'{13F19604-7D32-4359-93A2-A05205D90AC9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H13F19604, CInt(&H7D32), CInt(&H4359), &H93, &HA2, &HA0, &H52, &H05, &HD9, &H0A, &HC9)
IID_IBDA_DigitalDemodulator3 = iid
End Function
Public Function IID_ICCSubStreamFiltering() As UUID
'{4B2BD7EA-8347-467b-8DBF-62F784929CC3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4B2BD7EA, CInt(&H8347), CInt(&H467b), &H8D, &HBF, &H62, &HF7, &H84, &H92, &H9C, &HC3)
IID_ICCSubStreamFiltering = iid
End Function
Public Function IID_IBDA_IPSinkControl() As UUID
'{3F4DC8E2-4050-11d3-8F4B-00C04F7971E2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3F4DC8E2, CInt(&H4050), CInt(&H11d3), &H8F, &H4B, &H00, &HC0, &H4F, &H79, &H71, &HE2)
IID_IBDA_IPSinkControl = iid
End Function
Public Function IID_IBDA_IPSinkInfo() As UUID
'{A750108F-492E-4d51-95F7-649B23FF7AD7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA750108F, CInt(&H492E), CInt(&H4d51), &H95, &HF7, &H64, &H9B, &H23, &HFF, &H7A, &HD7)
IID_IBDA_IPSinkInfo = iid
End Function
Public Function IID_IFrequencyMap() As UUID
'{06FB45C1-693C-4ea7-B79F-7A6A54D8DEF2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H06FB45C1, CInt(&H693C), CInt(&H4ea7), &HB7, &H9F, &H7A, &H6A, &H54, &HD8, &HDE, &HF2)
IID_IFrequencyMap = iid
End Function
Public Function SID_BDA_EasMessage() As UUID
Return IID_IBDA_EasMessage
End Function
Public Function IID_IBDA_EasMessage() As UUID
'{D806973D-3EBE-46de-8FBB-6358FE784208}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD806973D, CInt(&H3EBE), CInt(&H46de), &H8F, &HBB, &H63, &H58, &HFE, &H78, &H42, &H08)
IID_IBDA_EasMessage = iid
End Function
Public Function SID_BDA_TransportStreamInfo() As UUID
    Return IID_IBDA_TransportStreamInfo
End Function
Public Function IID_IBDA_TransportStreamInfo() As UUID
'{8E882535-5F86-47AB-86CF-C281A72A0549}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8E882535, CInt(&H5F86), CInt(&H47AB), &H86, &HCF, &HC2, &H81, &HA7, &H2A, &H05, &H49)
IID_IBDA_TransportStreamInfo = iid
End Function
Public Function SID_BDA_ConditionalAccess() As UUID
'{CD51F1E0-7BE9-4123-8482-A2A796C0A6B0}
Return IID_IBDA_ConditionalAccess
End Function
Public Function IID_IBDA_ConditionalAccess() As UUID
'{CD51F1E0-7BE9-4123-8482-A2A796C0A6B0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HCD51F1E0, CInt(&H7BE9), CInt(&H4123), &H84, &H82, &HA2, &HA7, &H96, &HC0, &HA6, &HB0)
IID_IBDA_ConditionalAccess = iid
End Function
Public Function SID_BDA_DiagnosticProperties() As UUID
    Return IID_IBDA_DiagnosticProperties
End Function
Public Function IID_IBDA_DiagnosticProperties() As UUID
'{20e80cb5-c543-4c1b-8eb3-49e719eee7d4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H20e80cb5, CInt(&Hc543), CInt(&H4c1b), &H8e, &Hb3, &H49, &He7, &H19, &Hee, &He7, &Hd4)
IID_IBDA_DiagnosticProperties = iid
End Function
Public Function SID_BDA_DRM() As UUID
    Return IID_IBDA_DRM
End Function
Public Function IID_IBDA_DRM() As UUID
'{F98D88B0-1992-4cd6-A6D9-B9AFAB99330D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF98D88B0, CInt(&H1992), CInt(&H4cd6), &HA6, &HD9, &HB9, &HAF, &HAB, &H99, &H33, &H0D)
IID_IBDA_DRM = iid
End Function
Public Function SID_BDA_NameValueService() As UUID
    Return IID_IBDA_NameValueService
End Function
Public Function IID_IBDA_NameValueService() As UUID
'{7F0B3150-7B81-4ad4-98E3-7E9097094301}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7F0B3150, CInt(&H7B81), CInt(&H4ad4), &H98, &HE3, &H7E, &H90, &H97, &H09, &H43, &H01)
IID_IBDA_NameValueService = iid
End Function
Public Function SID_BDA_ConditionalAccessEx() As UUID
Return IID_IBDA_ConditionalAccessEx
End Function
Public Function IID_IBDA_ConditionalAccessEx() As UUID
'{497C3418-23CB-44ba-BB62-769F506FCEA7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H497C3418, CInt(&H23CB), CInt(&H44ba), &HBB, &H62, &H76, &H9F, &H50, &H6F, &HCE, &HA7)
IID_IBDA_ConditionalAccessEx = iid
End Function
Public Function SID_BDA_ISDBConditionalAccess() As UUID
Return IID_IBDA_ISDBConditionalAccess
End Function
Public Function IID_IBDA_ISDBConditionalAccess() As UUID
'{5E68C627-16C2-4e6c-B1E2-D00170CDAA0F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5E68C627, CInt(&H16C2), CInt(&H4e6c), &HB1, &HE2, &HD0, &H01, &H70, &HCD, &HAA, &H0F)
IID_IBDA_ISDBConditionalAccess = iid
End Function
Public Function SID_BDA_EventingService() As UUID
Return IID_IBDA_EventingService
End Function
Public Function IID_IBDA_EventingService() As UUID
'{207C413F-00DC-4c61-BAD6-6FEE1FF07064}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H207C413F, CInt(&H00DC), CInt(&H4c61), &HBA, &HD6, &H6F, &HEE, &H1F, &HF0, &H70, &H64)
IID_IBDA_EventingService = iid
End Function
Public Function SID_BDA_AUX() As UUID
    Return IID_IBDA_AUX
End Function
Public Function IID_IBDA_AUX() As UUID
'{7DEf4C09-6E66-4567-A819-F0E17F4A81AB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7DEf4C09, CInt(&H6E66), CInt(&H4567), &HA8, &H19, &HF0, &HE1, &H7F, &H4A, &H81, &HAB)
IID_IBDA_AUX = iid
End Function
Public Function SID_BDA_Encoder() As UUID
    Return IID_IBDA_Encoder
End Function
Public Function IID_IBDA_Encoder() As UUID
'{3a8bad59-59fe-4559-a0ba-396cfaa98ae3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3a8bad59, CInt(&H59fe), CInt(&H4559), &Ha0, &Hba, &H39, &H6c, &Hfa, &Ha9, &H8a, &He3)
IID_IBDA_Encoder = iid
End Function
Public Function SID_BDA_FDC() As UUID
    Return IID_IBDA_FDC
End Function
Public Function IID_IBDA_FDC() As UUID
'{138adc7e-58ae-437f-b0b4-c9fe19d5b4ac}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H138adc7e, CInt(&H58ae), CInt(&H437f), &Hb0, &Hb4, &Hc9, &Hfe, &H19, &Hd5, &Hb4, &Hac)
IID_IBDA_FDC = iid
End Function
Public Function SID_BDA_GuideDataDeliveryService() As UUID
    Return IID_IBDA_GuideDataDeliveryService
End Function
Public Function IID_IBDA_GuideDataDeliveryService() As UUID
'{C0AFCB73-23E7-4bc6-BAFA-FDC167B4719F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC0AFCB73, CInt(&H23E7), CInt(&H4bc6), &HBA, &HFA, &HFD, &HC1, &H67, &HB4, &H71, &H9F)
IID_IBDA_GuideDataDeliveryService = iid
End Function
Public Function SID_BDA_DRMService() As UUID
    Return IID_IBDA_DRMService
End Function
Public Function IID_IBDA_DRMService() As UUID
'{BFF6B5BB-B0AE-484c-9DCA-73528FB0B46E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBFF6B5BB, CInt(&HB0AE), CInt(&H484c), &H9D, &HCA, &H73, &H52, &H8F, &HB0, &HB4, &H6E)
IID_IBDA_DRMService = iid
End Function
Public Function SID_BDA_WMDRMSession() As UUID
    Return IID_IBDA_WMDRMSession
End Function
Public Function IID_IBDA_WMDRMSession() As UUID
'{4BE6FA3D-07CD-4139-8B80-8C18BA3AEC88}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4BE6FA3D, CInt(&H07CD), CInt(&H4139), &H8B, &H80, &H8C, &H18, &HBA, &H3A, &HEC, &H88)
IID_IBDA_WMDRMSession = iid
End Function
Public Function SID_BDA_WMDRMTuner() As UUID
    Return IID_IBDA_WMDRMTuner
End Function
Public Function IID_IBDA_WMDRMTuner() As UUID
'{86D979CF-A8A7-4f94-B5FB-14C0ACA68FE6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H86D979CF, CInt(&HA8A7), CInt(&H4f94), &HB5, &HFB, &H14, &HC0, &HAC, &HA6, &H8F, &HE6)
IID_IBDA_WMDRMTuner = iid
End Function
Public Function SID_BDA_DRIDRMService() As UUID
    Return IID_IBDA_DRIDRMService
End Function
Public Function IID_IBDA_DRIDRMService() As UUID
'{1F9BC2A5-44A3-4c52-AAB1-0BBCE5A1381D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1F9BC2A5, CInt(&H44A3), CInt(&H4c52), &HAA, &HB1, &H0B, &HBC, &HE5, &HA1, &H38, &H1D)
IID_IBDA_DRIDRMService = iid
End Function
Public Function SID_BDA_DRIWMDRMSession() As UUID
    Return IID_IBDA_DRIWMDRMSession
End Function
Public Function IID_IBDA_DRIWMDRMSession() As UUID
'{05C690F8-56DB-4bb2-B053-79C12098BB26}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H05C690F8, CInt(&H56DB), CInt(&H4bb2), &HB0, &H53, &H79, &HC1, &H20, &H98, &HBB, &H26)
IID_IBDA_DRIWMDRMSession = iid
End Function
Public Function SID_BDA_MUX() As UUID
    Return IID_IBDA_MUX
End Function
Public Function IID_IBDA_MUX() As UUID
'{942AAFEC-4C05-4c74-B8EB-8706C2A4943F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H942AAFEC, CInt(&H4C05), CInt(&H4c74), &HB8, &HEB, &H87, &H06, &HC2, &HA4, &H94, &H3F)
IID_IBDA_MUX = iid
End Function
Public Function SID_BDA_TransportStreamSelector() As UUID
    Return IID_IBDA_TransportStreamSelector
End Function
Public Function IID_IBDA_TransportStreamSelector() As UUID
'{1DCFAFE9-B45E-41b3-BB2A-561EB129AE98}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1DCFAFE9, CInt(&HB45E), CInt(&H41b3), &HBB, &H2A, &H56, &H1E, &HB1, &H29, &HAE, &H98)
IID_IBDA_TransportStreamSelector = iid
End Function
Public Function SID_BDA_UserActivityService() As UUID
    Return IID_IBDA_UserActivityService
End Function
Public Function IID_IBDA_UserActivityService() As UUID
'{53B14189-E478-4b7a-A1FF-506DB4B99DFE}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H53B14189, CInt(&HE478), CInt(&H4b7a), &HA1, &HFF, &H50, &H6D, &HB4, &HB9, &H9D, &HFE)
IID_IBDA_UserActivityService = iid
End Function
Public Function IID_IESEvent() As UUID
'{1F0E5357-AF43-44e6-8547-654C645145D2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1F0E5357, CInt(&HAF43), CInt(&H44e6), &H85, &H47, &H65, &H4C, &H64, &H51, &H45, &HD2)
IID_IESEvent = iid
End Function
Public Function IID_IESEvents() As UUID
'{ABD414BF-CFE5-4e5e-AF5B-4B4E49C5BFEB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HABD414BF, CInt(&HCFE5), CInt(&H4e5e), &HAF, &H5B, &H4B, &H4E, &H49, &HC5, &HBF, &HEB)
IID_IESEvents = iid
End Function
Public Function IID_IBroadcastEvent() As UUID
'{3B21263F-26E8-489d-AAC4-924F7EFD9511}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3B21263F, CInt(&H26E8), CInt(&H489d), &HAA, &HC4, &H92, &H4F, &H7E, &HFD, &H95, &H11)
IID_IBroadcastEvent = iid
End Function
Public Function IID_IBroadcastEventEx() As UUID
'{3d9e3887-1929-423f-8021-43682de95448}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3d9e3887, CInt(&H1929), CInt(&H423f), &H80, &H21, &H43, &H68, &H2d, &He9, &H54, &H48)
IID_IBroadcastEventEx = iid
End Function
Public Function IID_IMpeg2TableFilter() As UUID
'{BDCDD913-9ECD-4fb2-81AE-ADF747EA75A5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBDCDD913, CInt(&H9ECD), CInt(&H4fb2), &H81, &HAE, &HAD, &HF7, &H47, &HEA, &H75, &HA5)
IID_IMpeg2TableFilter = iid
End Function
Public Function IID_IMpeg2Data() As UUID
'{9B396D40-F380-4e3c-A514-1A82BF6EBFE6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9B396D40, CInt(&HF380), CInt(&H4e3c), &HA5, &H14, &H1A, &H82, &HBF, &H6E, &HBF, &HE6)
IID_IMpeg2Data = iid
End Function
Public Function IID_ISectionList() As UUID
'{AFEC1EB5-2A64-46c6-BF4B-AE3CCB6AFDB0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HAFEC1EB5, CInt(&H2A64), CInt(&H46c6), &HBF, &H4B, &HAE, &H3C, &HCB, &H6A, &HFD, &HB0)
IID_ISectionList = iid
End Function
Public Function IID_IMpeg2Stream() As UUID
'{400CC286-32A0-4ce4-9041-39571125A635}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H400CC286, CInt(&H32A0), CInt(&H4ce4), &H90, &H41, &H39, &H57, &H11, &H25, &HA6, &H35)
IID_IMpeg2Stream = iid
End Function
Public Function IID_IGenericDescriptor() As UUID
'{6A5918F8-A77A-4f61-AED0-5702BDCDA3E6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6A5918F8, CInt(&HA77A), CInt(&H4f61), &HAE, &HD0, &H57, &H02, &HBD, &HCD, &HA3, &HE6)
IID_IGenericDescriptor = iid
End Function
Public Function IID_IGenericDescriptor2() As UUID
'{BF02FB7E-9792-4e10-A68D-033A2CC246A5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBF02FB7E, CInt(&H9792), CInt(&H4e10), &HA6, &H8D, &H03, &H3A, &H2C, &HC2, &H46, &HA5)
IID_IGenericDescriptor2 = iid
End Function
Public Function IID_IPAT() As UUID
'{6623B511-4B5F-43c3-9A01-E8FF84188060}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6623B511, CInt(&H4B5F), CInt(&H43c3), &H9A, &H01, &HE8, &HFF, &H84, &H18, &H80, &H60)
IID_IPAT = iid
End Function
Public Function IID_ICAT() As UUID
'{7C6995FB-2A31-4bd7-953E-B1AD7FB7D31C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7C6995FB, CInt(&H2A31), CInt(&H4bd7), &H95, &H3E, &HB1, &HAD, &H7F, &HB7, &HD3, &H1C)
IID_ICAT = iid
End Function
Public Function IID_IPMT() As UUID
'{01F3B398-9527-4736-94DB-5195878E97A8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H01F3B398, CInt(&H9527), CInt(&H4736), &H94, &HDB, &H51, &H95, &H87, &H8E, &H97, &HA8)
IID_IPMT = iid
End Function
Public Function IID_ITSDT() As UUID
'{D19BDB43-405B-4a7c-A791-C89110C33165}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD19BDB43, CInt(&H405B), CInt(&H4a7c), &HA7, &H91, &HC8, &H91, &H10, &HC3, &H31, &H65)
IID_ITSDT = iid
End Function
Public Function IID_IPSITables() As UUID
'{919F24C5-7B14-42ac-A4B0-2AE08DAF00AC}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H919F24C5, CInt(&H7B14), CInt(&H42ac), &HA4, &HB0, &H2A, &HE0, &H8D, &HAF, &H00, &HAC)
IID_IPSITables = iid
End Function
Public Function IID_IAtscPsipParser() As UUID
'{"B2C98995-5EB2-4fb1-B406-F3E8E2026A9A}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB2C98995, CInt(&H5EB2), CInt(&H4fb1), &HB4, &H06, &HF3, &HE8, &HE2, &H02, &H6A, &H9A)
IID_IAtscPsipParser = iid
End Function
Public Function IID_IATSC_MGT() As UUID
'{"8877dabd-c137-4073-97e3-779407a5d87a}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8877dabd, CInt(&Hc137), CInt(&H4073), &H97, &He3, &H77, &H94, &H07, &Ha5, &Hd8, &H7a)
IID_IATSC_MGT = iid
End Function
Public Function IID_IATSC_VCT() As UUID
'{"26879a18-32f9-46c6-91f0-fb6479270e8c}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H26879a18, CInt(&H32f9), CInt(&H46c6), &H91, &Hf0, &Hfb, &H64, &H79, &H27, &H0e, &H8c)
IID_IATSC_VCT = iid
End Function
Public Function IID_IATSC_EIT() As UUID
'{"d7c212d7-76a2-4b4b-aa56-846879a80096}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hd7c212d7, CInt(&H76a2), CInt(&H4b4b), &Haa, &H56, &H84, &H68, &H79, &Ha8, &H00, &H96)
IID_IATSC_EIT = iid
End Function
Public Function IID_IATSC_ETT() As UUID
'{"5a142cc9-b8cf-4a86-a040-e9cadf3ef3e7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5a142cc9, CInt(&Hb8cf), CInt(&H4a86), &Ha0, &H40, &He9, &Hca, &Hdf, &H3e, &Hf3, &He7)
IID_IATSC_ETT = iid
End Function
Public Function IID_IATSC_STT() As UUID
'{"6bf42423-217d-4d6f-81e1-3a7b360ec896}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6bf42423, CInt(&H217d), CInt(&H4d6f), &H81, &He1, &H3a, &H7b, &H36, &H0e, &Hc8, &H96)
IID_IATSC_STT = iid
End Function
Public Function IID_ISCTE_EAS() As UUID
'{"1FF544D6-161D-4fae-9FAA-4F9F492AE999}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1FF544D6, CInt(&H161D), CInt(&H4fae), &H9F, &HAA, &H4F, &H9F, &H49, &H2A, &HE9, &H99)
IID_ISCTE_EAS = iid
End Function
Public Function IID_IAtscContentAdvisoryDescriptor() As UUID
'{"FF76E60C-0283-43ea-BA32-B422238547EE}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFF76E60C, CInt(&H0283), CInt(&H43ea), &HBA, &H32, &HB4, &H22, &H23, &H85, &H47, &HEE)
IID_IAtscContentAdvisoryDescriptor = iid
End Function
Public Function IID_ICaptionServiceDescriptor() As UUID
'{"40834007-6834-46f0-BD45-D5F6A6BE258C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H40834007, CInt(&H6834), CInt(&H46f0), &HBD, &H45, &HD5, &HF6, &HA6, &HBE, &H25, &H8C)
IID_ICaptionServiceDescriptor = iid
End Function
Public Function IID_IServiceLocationDescriptor() As UUID
'{"58C3C827-9D91-4215-BFF3-820A49F0904C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H58C3C827, CInt(&H9D91), CInt(&H4215), &HBF, &HF3, &H82, &H0A, &H49, &HF0, &H90, &H4C)
IID_IServiceLocationDescriptor = iid
End Function


End Module

#End If