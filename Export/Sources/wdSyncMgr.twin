
'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

[ InterfaceId ("a7f337a3-d20b-45cb-9ed7-87d094ca5045") ]
[ OleAutomation (False) ]
Interface ISyncMgrHandlerCollection Extends stdole.IUnknown
    Sub GetHandlerEnumerator(ppEnum As IEnumString)
    Sub BindToHandler(ByVal pszHandlerId As LongPtr, riid As UUID, ppv As Any)
End Interface

[ InterfaceId ("4ff1d798-ecf7-4524-aa81-1e362a0aef3a") ]
[ OleAutomation (False) ]
Interface ISyncMgrHandlerInfo Extends stdole.IUnknown
    Sub GetType(pnType As SYNCMGR_HANDLER_TYPE)
    Sub GetTypeLabel(ppszTypeLabel As LongPtr)
    Sub	GetComment(ppszComment As LongPtr)
    Sub GetLastSyncTime(pftLastSync As FILETIME)
    Sub IsActive()
    Sub IsEnabled()
    Sub IsConnected()
End Interface

[ InterfaceId ("04ec2e43-ac77-49f9-9b98-0307ef7a72a2") ]
[ OleAutomation (False) ]
Interface ISyncMgrHandler Extends stdole.IUnknown
    Sub	GetName(ppszName As LongPtr)
    Sub GetHandlerInfo(ppHandlerInfo As ISyncMgrHandlerInfo)
    Sub GetObject(rguidObjectId As UUID, riid As UUID, ppv As Any)
    Sub GetCapabilities(pmCapabilities As SYNCMGR_HANDLER_CAPABILITIES)
    Sub GetPolicies(pmPolicies As SYNCMGR_HANDLER_POLICIES)
    Sub Activate(ByVal fActivate As BOOL)
    Sub Enable(ByVal fEnable As BOOL)
    Sub Synchronize(ByVal ppszItemIDs As LongPtr, ByVal cItems As Long, ByVal hwndOwner As LongPtr, ByVal pSessionCreator As ISyncMgrSessionCreator, ByVal punk As stdole.IUnknown)
End Interface

[ InterfaceId ("90701133-be32-4129-a65c-99e616cafff4") ]
[ OleAutomation (False) ]
Interface ISyncMgrSyncItemContainer Extends stdole.IUnknown
    Sub GetSyncItem(ByVal pszItemId As LongPtr, ppItem As ISyncMgrSyncItem)
    Sub GetSyncItemEnumerator(ppEnum As IEnumSyncMgrSyncItems)
    Sub GetSyncItemCount(pcItems As Long)
End Interface

[ InterfaceId ("b20b24ce-2593-4f04-bd8b-7ad6c45051cd") ]
[ OleAutomation (False) ]
Interface ISyncMgrSyncItem Extends stdole.IUnknown
    Sub GetItemId(pszItemID As LongPtr)
    Sub	GetName(ppszName As LongPtr)
    Sub GetItemInfo(ppHandlerInfo As ISyncMgrSyncItemInfo)
    Sub GetObject(rguidObjectId As UUID, riid As UUID, ppv As Any)
    Sub GetCapabilities(pmCapabilities As SYNCMGR_HANDLER_CAPABILITIES)
    Sub GetPolicies(pmPolicies As SYNCMGR_HANDLER_POLICIES)
    Sub Enable(ByVal fEnable As BOOL)
    Sub Delete()
End Interface

[ InterfaceId ("e7fd9502-be0c-4464-90a1-2b5277031232") ]
[ OleAutomation (False) ]
Interface ISyncMgrSyncItemInfo Extends stdole.IUnknown
    Sub GetTypeLabel(ppszTypeLabel As LongPtr)
    Sub	GetComment(ppszComment As LongPtr)
    Sub GetLastSyncTime(pftLastSync As FILETIME)
    Sub IsEnabled()
    Sub IsConnected()
End Interface

[ InterfaceId ("54b3abf3-f085-4181-b546-e29c403c726b") ]
[ OleAutomation (False) ]
Interface IEnumSyncMgrSyncItems Extends stdole.IUnknown
    Sub Next(ByVal celt As Long, rgelt As ISyncMgrSyncItem, pceltFetched As Long)
    Sub Skip(ByVal celt As Long)
    Sub Reset()
    Sub Clone(ppEnum As IEnumSyncMgrSyncItems)
End Interface

[ InterfaceId ("17f48517-f305-4321-a08d-b25a834918fd") ]
[ OleAutomation (False) ]
Interface ISyncMgrSessionCreator Extends stdole.IUnknown
    Sub CreateSession(ByVal pszHandlerId As LongPtr, ByVal pszItemIDs As LongPtr, ByVal cItems As Long, ppCallback As ISyncMgrSyncCallback)
End Interface

[ InterfaceId ("884ccd87-b139-4937-a4ba-4f8e19513fbe") ]
[ OleAutomation (False) ]
Interface ISyncMgrSyncCallback Extends stdole.IUnknown
    Sub ReportProgress(ByVal pszItemId As LongPtr, ByVal pszProgressText As LongPtr, ByVal nStatus As SYNCMGR_PROGRESS_STATUS, ByVal uCurrentStep As Long, ByVal uMaxStep As Long, pnCancelRequest As SYNCMGR_CANCEL_REQUEST)
    Sub SetHandlerProgressText(ByVal pszProgressText As LongPtr, pnCancelRequest As SYNCMGR_CANCEL_REQUEST)
    Sub ReportEvent(ByVal pszItemId As LongPtr, ByVal nLevel As SYNCMGR_EVENT_LEVEL, ByVal nFlags As SYNCMGR_EVENT_FLAGS, ByVal pszName As LongPtr, ByVal pszDescription As LongPtr, ByVal pszLinkText As LongPtr, ByVal pszLinkReference As LongPtr, ByVal pszContext As LongPtr, pguidEventId As UUID)
    Sub CanContinue(ByVal pszItemId As LongPtr)
    Sub QueryForAdditionalItems(ppEnumItemIDs As IEnumString, ppenumPunks As IEnumUnknown)
    Sub AddItemToSession(ByVal pszItemId As LongPtr)
    Sub AddIUnknownToSession(ByVal punk As stdole.IUnknown)
    Sub ProposeItem(ByVal pNewItem As ISyncMgrSyncItem)
    Sub CommitItem(ByVal pszItemId As LongPtr)
    Sub ReportManualSync()
End Interface

[ InterfaceId ("fc7cfa47-dfe1-45b5-a049-8cfd82bec271") ]
[ OleAutomation (False) ]
Interface ISyncMgrUIOperation Extends stdole.IUnknown
    Sub Run(ByVal hwndOwner As LongPtr)
End Interface

[ InterfaceId ("64522e52-848b-4015-89ce-5a36f00b94ff") ]
[ OleAutomation (False) ]
Interface ISyncMgrEventLinkUIOperation Extends ISyncMgrUIOperation
    Sub Init(rguidEventId As UUID, ByVal pEvent As ISyncMgrEvent)
End Interface

[ InterfaceId ("459a6c84-21d2-4ddc-8a53-f023a46066f2") ]
[ OleAutomation (False) ]
Interface ISyncMgrScheduleWizardUIOperation Extends ISyncMgrUIOperation
    Sub InitWizard(ByVal pszHandlerID As LongPtr)
End Interface

[ InterfaceId ("2b90f17e-5a3e-4b33-bb7f-1bc48056b94d") ]
[ OleAutomation (False) ]
Interface ISyncMgrSyncResult Extends stdole.IUnknown
    Sub Result(ByVal nStatus As SYNCMGR_PROGRESS_STATUS, ByVal cError As Long, ByVal cConflicts As Long)
End Interface

[ InterfaceId ("9B63616C-36B2-46BC-959F-C1593952D19B") ]
[ OleAutomation (False) ]
Interface ISyncMgrControl Extends stdole.IUnknown
    Sub StartHandlerSync(ByVal pszHandlerID As LongPtr, ByVal hwndOwner As LongPtr, ByVal punk As stdole.IUnknown, ByVal nSyncControlFlags As SYNCMGR_SYNC_CONTROL_FLAGS, ByVal pResult As ISyncMgrSyncResult)
    Sub StartItemSync(ByVal pszHandlerID As LongPtr, ByVal pszItemIDs As LongPtr, ByVal cItems As Long, ByVal hwndOwner As LongPtr, ByVal punk As stdole.IUnknown, ByVal nSyncControlFlags As SYNCMGR_SYNC_CONTROL_FLAGS, ByVal pResult As ISyncMgrSyncResult)
    Sub StartSyncAll(ByVal hwndOwner As LongPtr)
    Sub StopHandlerSync(ByVal pszHandlerID As LongPtr)
    Sub StopItemSync(ByVal pszHandlerID As LongPtr, ByVal pszItemIDs As LongPtr, ByVal cItems As Long)
    Sub StopSyncAll()
    Sub UpdateHandlerCollection(rclsidCollectionID As UUID, ByVal nControlFlags As SYNCMGR_CONTROL_FLAGS)
    Sub UpdateHandler(ByVal pszHandlerID As LongPtr, ByVal nControlFlags As SYNCMGR_CONTROL_FLAGS)
    Sub UpdateItem(ByVal pszHandlerID As LongPtr, ByVal pszItemID As LongPtr, ByVal nControlFlags As SYNCMGR_CONTROL_FLAGS)
    Sub UpdateEvents(ByVal pszHandlerID As LongPtr, ByVal pszItemID As LongPtr, ByVal nControlFlags As SYNCMGR_CONTROL_FLAGS)
    Sub UpdateConflict(ByVal pszHandlerID As LongPtr, ByVal pszItemID As LongPtr, ByVal pConflict As ISyncMgrConflict, ByVal nReason As SYNCMGR_UPDATE_REASON)
    Sub UpdateConflicts(ByVal pszHandlerID As LongPtr, ByVal pszItemID As LongPtr, ByVal nControlFlags As SYNCMGR_CONTROL_FLAGS)
    Sub ActivateHandler(ByVal fActivate As Long, ByVal pszHandlerID As LongPtr, ByVal hwndOwner As LongPtr, ByVal nControlFlags As SYNCMGR_CONTROL_FLAGS)
    Sub EnableHandler(ByVal fEnable As Long, ByVal pszHandlerID As LongPtr, ByVal hwndOwner As LongPtr, ByVal nControlFlags As SYNCMGR_CONTROL_FLAGS)
    Sub EnableItem(ByVal fEnable As Long, ByVal pszHandlerID As LongPtr, ByVal pszItemID As LongPtr, ByVal hwndOwner As LongPtr, ByVal nControlFlags As SYNCMGR_CONTROL_FLAGS)
End Interface

[ InterfaceId ("37e412f9-016e-44c2-81ff-db3add774266") ]
[ OleAutomation (False) ]
Interface ISyncMgrEventStore Extends stdole.IUnknown
    Sub GetEventEnumerator(ppEnum As IEnumSyncMgrEvents)
    Sub GetEventCount(pcEvents As Long)
    Sub GetEvent(rguidEventID As UUID, ppEvent As ISyncMgrEvent)
    Sub RemoveEvent(pguidEventIDs As UUID, ByVal cEvents As Long)
End Interface

[ InterfaceId ("fee0ef8b-46bd-4db4-b7e6-ff2c687313bc") ]
[ OleAutomation (False) ]
Interface ISyncMgrEvent Extends stdole.IUnknown
    Sub GetEventID(pguidEventID As UUID)
    Sub GetHandlerID(pszHandlerID As LongPtr)
    Sub GetItemID(pszItemID As LongPtr)
    Sub GetLevel(pnLevel As SYNCMGR_EVENT_LEVEL)
    Sub GetFlags(pnFlags As SYNCMGR_EVENT_FLAGS)
    Sub GetTime(pftCreationTime As FILETIME)
    Sub	GetName(ppszName As LongPtr)
    Sub GetDescription(ppszDescription As LongPtr)
    Sub	GetLinkText(ppszLinkText As LongPtr)
    Sub GetLinkReference(ppszLinkReference As LongPtr)
    Sub GetContext(ppszContext As LongPtr)
End Interface
[ InterfaceId ("c81a1d4e-8cf7-4683-80e0-bcae88d677b6") ]
[ OleAutomation (False) ]
Interface IEnumSyncMgrEvents Extends stdole.IUnknown
    Sub Next(ByVal celt As Long, rgelt As ISyncMgrEvent, pceltFetched As Long)
    Sub Skip(ByVal celt As Long)
    Sub Reset()
    Sub Clone(ppEnum As IEnumSyncMgrEvents)
End Interface

[ InterfaceId ("cf8fc579-c396-4774-85f1-d908a831156e") ]
[ OleAutomation (False) ]
Interface ISyncMgrConflictStore Extends stdole.IUnknown
    Sub EnumConflicts(ByVal pszHandlerID As LongPtr, ByVal pszItemID As LongPtr, ppEnum As IEnumSyncMgrConflict)
    Sub BindToConflict(pConflictIdInfo As SYNCMGR_CONFLICT_ID_INFO, riid As UUID, ppv As Any)
    Sub RemoveConflicts(rgConflictIdInfo As SYNCMGR_CONFLICT_ID_INFO, ByVal cConflicts As Long)
    Sub GetCount(ByVal pszHandlerID As LongPtr, ByVal pszItemID As LongPtr, pnConflicts As Long)
End Interface

[ InterfaceId ("82705914-dda3-4893-ba99-49de6c8c8036") ]
[ OleAutomation (False) ]
Interface IEnumSyncMgrConflict Extends stdole.IUnknown
    Sub Next(ByVal celt As Long, rgelt As ISyncMgrConflict, pceltFetched As Long)
    Sub Skip(ByVal celt As Long)
    Sub Reset()
    Sub Clone(ppEnum As IEnumSyncMgrConflict)
End Interface

[ InterfaceId ("9c204249-c443-4ba4-85ed-c972681db137") ]
[ OleAutomation (False) ]
Interface ISyncMgrConflict Extends stdole.IUnknown
    /* Get a conflict Property (see propkey.h for PKEY types).
    // PKEY_ItemNameDisplay - Name of the conflict
    // PKEY_Sync_ConflictDescription - Summary of the conflict
    // PKEY_Sync_HandlerID - Sync handler that created the conflict
    // PKEY_Sync_ItemID - The sync item that created the conflict
    // PKEY_DateModified - The time the conflict was detected */
    Sub GetProperty(propkey As PROPERTYKEY, ppropvar As Variant)
    Sub GetConflictIdInfo(pConflictIdInfo As SYNCMGR_CONFLICT_ID_INFO)
    Sub GetItemsArray(ppArray As ISyncMgrConflictItems)
    Sub Resolve(ByVal pResolveInfo As ISyncMgrConflictResolveInfo)
    Sub GetResolutionHandler(riid As UUID, ppvResolutionHandler As Any)
End Interface

[ InterfaceId ("40A3D052-8BFF-4c4b-A338-D4A395700DE9") ]
[ OleAutomation (False) ]
Interface ISyncMgrResolutionHandler Extends stdole.IUnknown
    Sub QueryAbilities(pdwAbilities As SYNCMGR_RESOLUTION_ABILITIES)
    Sub KeepOther(ByVal psiOther As IShellItem, pFeedback As SYNCMGR_RESOLUTION_FEEDBACK)
    Sub KeepRecent(pFeedback As SYNCMGR_RESOLUTION_FEEDBACK)
    Sub RemoveFromSyncSet(pFeedback As SYNCMGR_RESOLUTION_FEEDBACK)
    Sub KeepItems(ByVal pArray As ISyncMgrConflictResolutionItems, pFeedback As SYNCMGR_RESOLUTION_FEEDBACK)
End Interface

[ InterfaceId ("0b4f5353-fd2b-42cd-8763-4779f2d508a3") ]
[ OleAutomation (False) ]
Interface ISyncMgrConflictPresenter Extends stdole.IUnknown
    Sub PresentConflict(ByVal pConflict As ISyncMgrConflict, ByVal pResolveInfo As ISyncMgrConflictResolveInfo)
End Interface

[ InterfaceId ("c405a219-25a2-442e-8743-b845a2cee93f") ]
[ OleAutomation (False) ]
Interface ISyncMgrConflictResolveInfo Extends stdole.IUnknown
    Sub GetIterationInfo(pnCurrentConflict As Long, pcConflicts As Long, pcRemainingForApplyToAll As Long)
    Sub GetPresenterNextStep(pnPresenterNextStep As SYNCMGR_PRESENTER_NEXT_STEP)
    Sub GetPresenterChoice(pnPresenterChoice As SYNCMGR_PRESENTER_CHOICE, pfApplyToAll As BOOL)
    Sub GetItemChoice(ByVal iChoice As Long, piChoiceIndex As Long)
    Sub SetPresenterNextStep(ByVal nPresenterNextStep As SYNCMGR_PRESENTER_NEXT_STEP)
    Sub SetPresenterChoice(ByVal nPresenterChoice As SYNCMGR_PRESENTER_CHOICE, ByVal fApplyToAll As BOOL)
    Sub SetItemChoices(prgiConflictItemIndexes As Long, ByVal cChoices As Long)
End Interface

[ InterfaceId ("59287f5e-bc81-4fca-a7f1-e5a8ecdb1d69") ]
[ OleAutomation (False) ]
Interface ISyncMgrConflictFolder Extends stdole.IUnknown
    Sub GetConflictIDList(ByVal pConflict As ISyncMgrConflict, ppidlConflict As LongPtr)
End Interface

[ InterfaceId ("9C7EAD52-8023-4936-A4DB-D2A9A99E436A") ]
[ OleAutomation (False) ]
Interface ISyncMgrConflictItems Extends stdole.IUnknown
    Sub GetCount(pCount As Long)
    Sub GetItem(ByVal iIndex As Long, pItemInfo As CONFIRM_CONFLICT_ITEM)
End Interface

[ InterfaceId ("458725B9-129D-4135-A998-9CEAFEC27007") ]
[ OleAutomation (False) ]
Interface ISyncMgrConflictResolutionItems Extends stdole.IUnknown
    Sub GetCount(pCount As Long)
    Sub GetItem(ByVal iIndex As Long, pItemInfo As CONFIRM_CONFLICT_RESULT_INFO)
End Interface

[ InterfaceId ("14cc750c-7b0b-43dc-910e-b687f84e7c3b") ]
[ OleAutomation (False) ]
Interface ITransferConfirmation Extends stdole.IUnknown
	Sub Confirm()
    Sub ConfirmConflict(pConflictParams As CONFIRM_CONFLICT_PARAMS, ByVal pConflictItems As ISyncMgrConflictItems, pConflictResult As CONFIRM_CONFLICT_RESULT, ppConflictItems As ISyncMgrConflictResolutionItems)
End Interface


[ CoClassId ("1202db60-1dac-42c5-aed5-1abdd432248e") ]
CoClass SyncMgrClient
[ Default ] Interface ISyncMgrSessionCreator
End CoClass

[ CoClassId ("1a1f4206-0688-4e7f-be03-d82ec69df9a5") ]
CoClass SyncMgrControl
[ Default ] Interface ISyncMgrControl
End CoClass

[ CoClassId ("8d8b8e30-c451-421b-8553-d2976afa648c") ]
CoClass SyncMgrScheduleWizard
[ Default ] Interface ISyncMgrScheduleWizardUIOperation
End CoClass

[ CoClassId ("9c73f5e5-7ae7-4e32-a8e8-8d23b85255bf") ]
CoClass SyncMgrFolder
[ Default ] Interface IShellFolder2
End CoClass

[ CoClassId ("2e9e59c0-b437-4981-a647-9c34b9b90891") ]
CoClass SyncSetupFolder
[ Default ] Interface IShellFolder2
End CoClass

[ CoClassId ("289978ac-a101-4341-a817-21eba7fd046d") ]
CoClass ConflictFolder
[ Default ] Interface IShellFolder2
End CoClass

[ CoClassId ("71d99464-3b6b-475c-b241-e15883207529") ]
CoClass SyncResultsFolder
[ Default ] Interface IShellFolder2
End CoClass

[ CoClassId ("7a0f6ab7-ed84-46b6-b47e-02aa159a152b") ]
CoClass SimpleConflictPresenter
[ Default ] Interface ISyncMgrConflictPresenter
End CoClass

[ CoClassId ("6b831e4f-a50d-45fc-842f-16ce27595359") ]
CoClass TransferConfirmationUI
[ Default ] Interface ITransferConfirmation
End CoClass


'LEGACY SYNC MANAGER
[ InterfaceId ("6295DF41-35EE-11D1-8707-00C04FD93327") ]
[ OleAutomation (False) ]
Interface ISyncMgrSynchronizeCallback Extends stdole.IUnknown
    Sub ShowPropertiesCompleted(ByVal hr As Long /* HRESULT */)
    Sub PrepareForSyncCompleted(ByVal hr As Long /* HRESULT */)
    Sub SynchronizeCompleted(ByVal hr As Long /* HRESULT */)
    Sub ShowErrorCompleted(ByVal hr As Long /* HRESULT */, ByVal cItems As Long, ByRef pItemIDs As UUID)
    Sub EnableModeless(ByVal fEnable As BOOL)
    Sub Progress(ByRef itemID As UUID, ByRef pSyncProgressItem As SYNCMGRPROGRESSITEM)
    Sub LogError(ByVal dwErrorLevel As Long, ByVal pszErrorText As LongPtr, ByRef pSyncLogError As SYNCMGRLOGERRORINFO)
    Sub DeleteLogError(ByRef ErrorID As UUID, ByVal dwReserved As Long)
    Sub EstablishConnection(ByVal pwszConnection As LongPtr, ByVal dwReserved As Long)
End Interface

[ InterfaceId ("6295DF2A-35EE-11D1-8707-00C04FD93327") ]
[ OleAutomation (False) ]
Interface ISyncMgrEnumItems Extends stdole.IUnknown
    Sub Next(ByVal celt As Long, ByRef rgelt As SYNCMGRITEM, ByRef pceltFetched As Long)
    Sub Skip(ByVal celt As Long)
    Sub Reset()
    Sub Clone(ByRef ppenum As ISyncMgrEnumItems)
End Interface

[ InterfaceId ("6295DF40-35EE-11D1-8707-00C04FD93327") ]
[ OleAutomation (False) ]
Interface ISyncMgrSynchronize Extends stdole.IUnknown
    Sub Initialize(ByVal dwReserved As Long, ByVal dwSyncMgrFlags As SYNCMGRFLAG, ByVal cbCookie As Long, ByRef lpCookie As Byte)
    Sub GetHandlerInfo(ByRef ppSyncMgrHandlerInfo As LongPtr)
    Sub EnumSyncMgrItems(ByRef ppSyncMgrEnumItems As ISyncMgrEnumItems)
    Sub GetItemObject(ByRef itemID As UUID, ByRef riid As UUID, ByRef ppv As Any)
    Sub ShowProperties(ByVal hwndParent As LongPtr, ByRef itemID As UUID)
    Sub SetProgressCallback(ByVal lpCallBack As ISyncMgrSynchronizeCallback)
    Sub PrepareForSync(ByVal cbNumItems As Long, ByRef pItemIDs As UUID, ByVal hwndParent As LongPtr, ByVal dwReserved As Long)
    Sub Synchronize(ByVal hwndParent As LongPtr)
    Sub SetItemStatus(ByRef pItemId As UUID, ByVal dwSyncMgrStatus As Long)
    Sub ShowError(ByVal hwndParent As LongPtr, ByRef ErrorID As UUID)
End Interface

[ InterfaceId ("6295DF2C-35EE-11D1-8707-00C04FD93327") ]
[ OleAutomation (False) ]
Interface ISyncMgrSynchronizeInvoke Extends stdole.IUnknown
    Sub UpdateItems(ByVal dwInvokeFlags As SYNCMGRINVOKEFLAGS, ByRef clsid As UUID, ByVal cbCookie As Long, ByRef pCookie As Byte)
    Sub UpdateAll()
End Interface


[ InterfaceId ("6295DF42-35EE-11D1-8707-00C04FD93327") ]
[ OleAutomation (False) ]
Interface ISyncMgrRegister Extends stdole.IUnknown
    Sub RegisterSyncMgrHandler(ByRef clsidHandler As UUID, ByVal pwszDescription As LongPtr, ByVal dwSyncMgrRegisterFlags As SYNCMGRREGISTERFLAGS)
    Sub UnregisterSyncMgrHandler(ByRef clsidHandler As UUID, ByVal dwReserved As Long)
    Sub GetHandlerRegistrationInfo(ByRef clsidHandler As UUID, ByRef pdwSyncMgrRegisterFlags As SYNCMGRREGISTERFLAGS)
End Interface


[ CoClassId ("6295DF27-35EE-11D1-8707-00C04FD93327") ]
[ COMCreatable ]
CoClass SyncMgr
    [ Default ] Interface ISyncMgrSynchronizeInvoke
End CoClass


Module wdSyncMgr

Public Const MAX_SYNCMGR_ID = 64
Public Const MAX_SYNCMGR_PROGRESSTEXT = 260
Public Const MAX_SYNCMGR_NAME = 128


Public Enum SYNCMGR_HANDLER_CAPABILITIES
	SYNCMGR_HCM_NONE = &H00000000
	SYNCMGR_HCM_PROVIDES_ICON = &H00000001
	SYNCMGR_HCM_EVENT_STORE = &H00000002
	SYNCMGR_HCM_CONFLICT_STORE = &H00000004
	SYNCMGR_HCM_SUPPORTS_CONCURRENT_SESSIONS = &H00000010
	SYNCMGR_HCM_CAN_BROWSE_CONTENT = &H00010000
	SYNCMGR_HCM_CAN_SHOW_SCHEDULE = &H00020000
	SYNCMGR_HCM_QUERY_BEFORE_ACTIVATE = &H00100000
	SYNCMGR_HCM_QUERY_BEFORE_DEACTIVATE = &H00200000
	SYNCMGR_HCM_QUERY_BEFORE_ENABLE = &H00400000
	SYNCMGR_HCM_QUERY_BEFORE_DISABLE = &H00800000
	SYNCMGR_HCM_VALID_MASK = &H00f30017
End Enum

Public Enum SYNCMGR_HANDLER_POLICIES
	SYNCMGR_HPM_NONE = &H00000000
	'  These policies prevent tasks from showing up in the UI.
	SYNCMGR_HPM_PREVENT_ACTIVATE = &H00000001
	SYNCMGR_HPM_PREVENT_DEACTIVATE = &H00000002
	SYNCMGR_HPM_PREVENT_ENABLE = &H00000004
	SYNCMGR_HPM_PREVENT_DISABLE = &H00000008
	SYNCMGR_HPM_PREVENT_START_SYNC = &H00000010
	SYNCMGR_HPM_PREVENT_STOP_SYNC = &H00000020
	SYNCMGR_HPM_DISABLE_ENABLE = &H00000100
	SYNCMGR_HPM_DISABLE_DISABLE = &H00000200
	SYNCMGR_HPM_DISABLE_START_SYNC = &H00000400
	SYNCMGR_HPM_DISABLE_STOP_SYNC = &H00000800
	SYNCMGR_HPM_DISABLE_BROWSE = &H00001000
	SYNCMGR_HPM_DISABLE_SCHEDULE = &H00002000
	SYNCMGR_HPM_HIDDEN_BY_DEFAULT = &H00010000
	SYNCMGR_HPM_BACKGROUND_SYNC_ONLY = (SYNCMGR_HPM_PREVENT_START_SYNC Or SYNCMGR_HPM_PREVENT_STOP_SYNC)
	SYNCMGR_HPM_VALID_MASK = &H00012f3f
End Enum

Public Enum SYNCMGR_HANDLER_TYPE
	SYNCMGR_HT_UNSPECIFIED = 0 ' All handlers that do not specify or do not fit
	'    in the rest of the options should use this value.
	SYNCMGR_HT_APPLICATION = 1 ' Handler is an application.
	SYNCMGR_HT_DEVICE = 2 ' Handler syncs with a device.
	SYNCMGR_HT_FOLDER = 3 ' Handler syncs with local or remote folders.
	SYNCMGR_HT_SERVICE = 4 ' Handler syncs with a web service.
	SYNCMGR_HT_COMPUTER = 5 ' Handler syncs with a computer.
	SYNCMGR_HT_MIN = 0
	SYNCMGR_HT_MAX = SYNCMGR_HT_COMPUTER
End Enum

Public Enum SYNCMGR_ITEM_CAPABILITIES
	SYNCMGR_ICM_NONE = &H00000000
	SYNCMGR_ICM_PROVIDES_ICON = &H00000001
	SYNCMGR_ICM_EVENT_STORE = &H00000002
	SYNCMGR_ICM_CONFLICT_STORE = &H00000004
	SYNCMGR_ICM_CAN_DELETE = &H00000010
	SYNCMGR_ICM_CAN_BROWSE_CONTENT = &H00010000
	SYNCMGR_ICM_QUERY_BEFORE_ENABLE = &H00100000
	SYNCMGR_ICM_QUERY_BEFORE_DISABLE = &H00200000
	SYNCMGR_ICM_QUERY_BEFORE_DELETE = &H00400000
	SYNCMGR_ICM_VALID_MASK = &H00710017
End Enum

Public Enum SYNCMGR_ITEM_POLICIES
	SYNCMGR_IPM_NONE = &H00000000
	SYNCMGR_IPM_PREVENT_ENABLE = &H00000001
	SYNCMGR_IPM_PREVENT_DISABLE = &H00000002
	SYNCMGR_IPM_PREVENT_START_SYNC = &H00000004
	SYNCMGR_IPM_PREVENT_STOP_SYNC = &H00000008
	SYNCMGR_IPM_DISABLE_ENABLE = &H00000010
	SYNCMGR_IPM_DISABLE_DISABLE = &H00000020
	SYNCMGR_IPM_DISABLE_START_SYNC = &H00000040
	SYNCMGR_IPM_DISABLE_STOP_SYNC = &H00000080
	SYNCMGR_IPM_DISABLE_BROWSE = &H00000100
	SYNCMGR_IPM_DISABLE_DELETE = &H00000200
	SYNCMGR_IPM_HIDDEN_BY_DEFAULT = &H00010000
	SYNCMGR_IPM_VALID_MASK = &H000102ff
End Enum

Public Enum SYNCMGR_PROGRESS_STATUS
	SYNCMGR_PS_UPDATING = 1
	SYNCMGR_PS_UPDATING_INDETERMINATE = 2
	SYNCMGR_PS_SUCCEEDED = 3
	SYNCMGR_PS_FAILED = 4
	SYNCMGR_PS_CANCELED = 5
	SYNCMGR_PS_DISCONNECTED = 6
	SYNCMGR_PS_MAX = SYNCMGR_PS_DISCONNECTED
End Enum

Public Enum SYNCMGR_CANCEL_REQUEST
	SYNCMGR_CR_NONE = 0
	SYNCMGR_CR_CANCEL_ITEM = 1
	SYNCMGR_CR_CANCEL_ALL = 2
	SYNCMGR_CR_MAX = SYNCMGR_CR_CANCEL_ALL
End Enum

Public Enum SYNCMGR_EVENT_LEVEL
	SYNCMGR_EL_INFORMATION = 1
	SYNCMGR_EL_WARNING = 2
	SYNCMGR_EL_ERROR = 3
	SYNCMGR_EL_MAX = SYNCMGR_EL_ERROR
End Enum

Public Enum SYNCMGR_EVENT_FLAGS
	SYNCMGR_EF_NONE = &H00000000
	SYNCMGR_EF_VALID = &H00000000
End Enum

Public Enum SYNCMGR_CONTROL_FLAGS
	SYNCMGR_CF_NONE = &H00000000
	SYNCMGR_CF_NOWAIT = &H00000000
	SYNCMGR_CF_WAIT = &H00000001
	SYNCMGR_CF_NOUI = &H00000002
	SYNCMGR_CF_VALID = &H00000003
End Enum

Public Enum SYNCMGR_SYNC_CONTROL_FLAGS
	SYNCMGR_SCF_NONE = &H00000000
	'  Normally sync requests are queued if a synchronization is currently in
	'  progress.  If this flag is specified, however, only items that are not
	'  currently syncing will be synced again once the current sync session
	'  has completed.
	SYNCMGR_SCF_IGNORE_IF_ALREADY_SYNCING = &H00000001
	SYNCMGR_SCF_VALID = &H00000001
End Enum

Public Enum SYNCMGR_UPDATE_REASON
	SYNCMGR_UR_ADDED = 0
	SYNCMGR_UR_CHANGED = 1
	SYNCMGR_UR_REMOVED = 2
	SYNCMGR_UR_MAX = SYNCMGR_UR_REMOVED
End Enum

Public Type SYNCMGR_CONFLICT_ID_INFO
    pblobID As LongPtr
    pblobExtra As LongPtr
End Type

Public Enum SYNCMGR_CONFLICT_ITEM_TYPE
	SYNCMGR_CIT_UPDATED = &H00000001 ' This conflict item was updated
	SYNCMGR_CIT_DELETED = &H00000002 ' This conflict item was deleted
End Enum

Public Enum SYNCMGR_RESOLUTION_ABILITIES
	SYNCMGR_RA_KEEPOTHER = &H00000001
	SYNCMGR_RA_KEEPRECENT = &H00000002
	SYNCMGR_RA_REMOVEFROMSYNCSET = &H00000004
	SYNCMGR_RA_KEEP_SINGLE = &H00000008
	SYNCMGR_RA_KEEP_MULTIPLE = &H00000010
	SYNCMGR_RA_VALID = &H0000001f
End Enum

Public Enum SYNCMGR_RESOLUTION_FEEDBACK
    SYNCMGR_RF_CONTINUE
    SYNCMGR_RF_REFRESH
    SYNCMGR_RF_CANCEL
End Enum

Public Enum SYNCMGR_PRESENTER_NEXT_STEP
	'  Returned to indicate that the conflict has been resolved and subsequent
	'  selected conflicts should continue to be resolved.
	SYNCMGR_PNS_CONTINUE
	'  Returned to indicate that the default conflict presenter should be used.
	SYNCMGR_PNS_DEFAULT
	'  Returned to indicate the conflict resolution should be canceled.  No
	'  more conflicts will resolved if this is returned.
	SYNCMGR_PNS_CANCEL
End Enum

Public Enum SYNCMGR_PRESENTER_CHOICE
	'  Returned if the user is skipping this conflict or if conflict
	'  resolution is being canceled.
	SYNCMGR_PC_NO_CHOICE
	'  Returned if the user chose to keep only one item.
	SYNCMGR_PC_KEEP_ONE
	'  Returned if the user chose to keep multiple items.
	SYNCMGR_PC_KEEP_MULTIPLE
	'  Returned if the user chose to keep the most recent item.
	SYNCMGR_PC_KEEP_RECENT
	'  Returned if the item is to be removed from the sync set.
	SYNCMGR_PC_REMOVE_FROM_SYNC_SET
	'  Returned if the item is not being resolved but is instead being skipped
	'  so that it can be resolved at another time.
	SYNCMGR_PC_SKIP
End Enum

Public Type CONFIRM_CONFLICT_ITEM
	pShellItem As IShellItem2 ' the item
	pszOriginalName As LongPtr ' If NULL then IShellItem's display name will be used
	pszAlternateName As LongPtr ' If multiple items will be kept then this item must be renamed to
	' pszAlternateName. User may or may not have an ability to change the name.
	pszLocationShort As LongPtr ' the string presented to the user the represents the "location"
	pszLocationFull As LongPtr ' longer version of the above
	nType As SYNCMGR_CONFLICT_ITEM_TYPE ' Type of the item - updated or deleted
End Type

Public Type CONFIRM_CONFLICT_RESULT_INFO
	pszNewName As LongPtr ' Item's new name or NULL if item has not been renamed
	iItemIndex As Long ' Item index
End Type

Public Type CONFIRM_CONFLICT_PARAMS
    hwndOwner As LongPtr
    dwFlags As Long
    dwOperation As CONFIRMDIALOGOPERATIONTYPE
    cCurrentItem As Long
    cTotalItems As Long
    cRemaining As Long
    cOtherRemainingResolvableError As Long
End Type

Public Type CONFIRM_CONFLICT_RESULT
	resultCode As CONFIRMCONFLICTDLGRESULT
    fApplyToAll As BOOL
End Type

Public Enum CONFIRMCONFLICTDLGRESULT
	CCDLG_NONE = &H0000
    CCDLG_OVERWRITE = &H0001
    CCDLG_KEEPORIGINAL = &H0002
    CCDLG_COPYWITHALTNAME = &H0004
    CCDLG_SKIPCURRENT = &H0008
    CCDLG_CANCELALL = &H0010
    CCDLG_APPLYALL = &H0020
End Enum

Public Enum CONFIRMDIALOGOPERATIONTYPE
    CCDLG_FILEMOVE = 1
    CCDLG_FILECOPY = 2
    CCDLG_SYNCCONFLICT = 3
End Enum

'Defined here so they're available in Lite Mode
Private Declare PtrSafe Sub CoTaskMemFree Lib "ole32" (ByVal pv As LongPtr)
Private Declare PtrSafe Sub ZeroMemory Lib "kernel32" Alias "RtlZeroMemory" (Destination As Any, ByVal Length As LongPtr)
Public Sub FreeConfirmConflictItem(pcci As CONFIRM_CONFLICT_ITEM)
    Set pcci.pShellItem = Nothing
    CoTaskMemFree (pcci.pszOriginalName)
    CoTaskMemFree (pcci.pszAlternateName)
    CoTaskMemFree (pcci.pszLocationShort)
    CoTaskMemFree (pcci.pszLocationFull)
    ZeroMemory (pcci, LenB(pcci))
End Sub



'LEGACY SYNC MANAGER

Public Const MAX_SYNCMGRITEMNAME = 128

Public Enum SyncManagerStatusHResults
    S_SYNCMGR_MISSINGITEMS = &H40201
    S_SYNCMGR_RETRYSYNC = &H40202
    S_SYNCMGR_CANCELITEM = &H40203
    S_SYNCMGR_CANCELALL = &H40204
    S_SYNCMGR_ITEMDELETED = &H40210
    S_SYNCMGR_ENUMITEMS = &H40211
End Enum
    
Public Enum SYNCMGRPROGRESSITEMMASK
    SYNCMGRPROGRESSITEM_STATUSTEXT = &H0001
    SYNCMGRPROGRESSITEM_STATUSTYPE = &H0002
    SYNCMGRPROGRESSITEM_PROGVALUE = &H0004
    SYNCMGRPROGRESSITEM_MAXVALUE = &H0008
End Enum

Public Enum SYNCMGRSTATUS
    SYNCMGRSTATUS_STOPPED = &H0000
    SYNCMGRSTATUS_SKIPPED = &H0001
    SYNCMGRSTATUS_PENDING = &H0002
    SYNCMGRSTATUS_UPDATING = &H0003
    SYNCMGRSTATUS_SUCCEEDED = &H0004
    SYNCMGRSTATUS_FAILED = &H0005
    SYNCMGRSTATUS_PAUSED = &H0006
    SYNCMGRSTATUS_RESUMING = &H0007
    SYNCMGRSTATUS_UPDATING_INDETERMINATE = &H0008 ' for marquee progress
    SYNCMGRSTATUS_DELETED = &H0100 ' send to indicate to item that the item has been deleted.
    '  This flag is deprecated.
End Enum

Public Type SYNCMGRPROGRESSITEM
    cbSize As Long
    mask As SYNCMGRPROGRESSITEMMASK
    lpcStatusText As LongPtr
    dwStatusType As SYNCMGRSTATUS ' SYNCMGRSTATUS
    iProgValue As Long
    iMaxValue As Long
End Type

Public Enum SYNCMGRLOGLEVEL
    SYNCMGRLOGLEVEL_INFORMATION = &H0001
    SYNCMGRLOGLEVEL_WARNING = &H0002
    SYNCMGRLOGLEVEL_ERROR = &H0003
    SYNCMGRLOGLEVEL_LOGLEVELMAX = &H0003
End Enum

Public Enum SYNCMGRERRORINFOMASK
    SYNCMGRLOGERROR_ERRORFLAGS = &H0001
    SYNCMGRLOGERROR_ERRORID = &H0002
    SYNCMGRLOGERROR_ITEMID = &H0004
End Enum

Public Enum SYNCMGRERRORFLAGS ' flags that apply to the error.
    SYNCMGRERRORFLAG_ENABLEJUMPTEXT = &H01 ' ShowErrors should be called on this item.
End Enum

Public Type SYNCMGRLOGERRORINFO
    cbSize As Long
    mask As SYNCMGRERRORINFOMASK
    dwSyncMgrErrorFlags As SYNCMGRERRORFLAGS
    ErrorID As UUID
    ItemID As UUID
End Type

Public Enum SYNCMGRITEMFLAGS ' flags for this SyncMgr Item
    SYNCMGRITEM_HASPROPERTIES = &H0001 ' have a properties dialog for this item
    SYNCMGRITEM_TEMPORARY = &H0002 ' remove any stored preferences for this item
    SYNCMGRITEM_ROAMINGUSER = &H0004 ' This item should roam with the User
    SYNCMGRITEM_LASTUPDATETIME = &H0008 ' Indicates lastUpdateTime Field is valid
    SYNCMGRITEM_MAYDELETEITEM = &H0010 ' Deprecated Option.
    SYNCMGRITEM_HIDDEN = &H0020 ' Suggests the Item should not be displayed by default
    SYNCMGRITEM_ITEMFLAGMASK = &H007F
End Enum

Public Enum SYNCMGRITEMSTATE
    SYNCMGRITEMSTATE_UNCHECKED = &H0000
    SYNCMGRITEMSTATE_CHECKED = &H0001
End Enum

Public Type SYNCMGRITEM
    cbSize As Long
    dwFlags As SYNCMGRITEMFLAGS
    ItemID As UUID
    dwItemState As SYNCMGRITEMSTATE
    hIcon As LongPtr
    wszItemName(0 To (MAX_SYNCMGRITEMNAME - 1)) As Integer
    ftLastUpdate As FILETIME
End Type

Public Enum SYNCMGRFLAG ' flags for Synchronization Event
    SYNCMGRFLAG_CONNECT = &H0001 ' Sync was invoked by a network connect
    SYNCMGRFLAG_PENDINGDISCONNECT = &H0002 ' Sync was invoked by a pending network disconnect
    SYNCMGRFLAG_MANUAL = &H0003 ' Sync was invoked manually
    SYNCMGRFLAG_IDLE = &H0004 ' Sync was invoked by an idle event
    SYNCMGRFLAG_INVOKE = &H0005 ' Sync was programmatically invoked by handler
    SYNCMGRFLAG_SCHEDULED = &H0006 ' Sync was invoked by a scheduled update
    SYNCMGRFLAG_EVENTMASK = &H00FF
    SYNCMGRFLAG_SETTINGS = &H0100 ' Sync was invoked for configuration only
    SYNCMGRFLAG_MAYBOTHERUSER = &H0200 ' Interaction with the user is permitted
End Enum

Public Enum SYNCMGRHANDLERFLAGS ' flags that apply to this handler.
    SYNCMGRHANDLER_HASPROPERTIES = &H0001 ' have a properties dialog for this handler
    SYNCMGRHANDLER_MAYESTABLISHCONNECTION = &H0002 ' may call callback EstablishConnection method
    SYNCMGRHANDLER_ALWAYSLISTHANDLER = &H0004 ' Show Handler in Choice even if not items
    SYNCMGRHANDLER_HIDDEN = &H0008 ' don't display handler (or item) in UI
    SYNCMGRHANDLERFLAG_MASK = &H000f
End Enum

Public Const MAX_SYNCMGRHANDLERNAME = 32
Public Type SYNCMGRHANDLERINFO
    cbSize As Long
    hIcon As LongPtr
    SyncMgrHandlerFlags As Long
    wszHandlerName(0 To (MAX_SYNCMGRHANDLERNAME - 1)) As Integer
End Type

Public Enum SYNCMGRINVOKEFLAGS ' flags for how SyncMgr should be invoked.
    SYNCMGRINVOKE_STARTSYNC = &H02 ' Immediately start the sync without displaying choices
    SYNCMGRINVOKE_MINIMIZED = &H04 ' Dialog should be minimized by default
End Enum

Public Enum SYNCMGRREGISTERFLAGS
    SYNCMGRREGISTERFLAG_CONNECT = &H0001 ' Register to receive Connect Events
    SYNCMGRREGISTERFLAG_PENDINGDISCONNECT = &H0002 ' Register to receive PendingDisconnect Events
    SYNCMGRREGISTERFLAG_IDLE = &H0004 ' Register to receive Idle Events
End Enum

End Module