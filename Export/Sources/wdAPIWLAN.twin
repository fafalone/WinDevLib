'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

'WLAN API

'l2cnm.h - 100%
'wlantypes.h - 100%
'windot11.h - minimal; as-needed
'ndis\objectheader.h - 100%
'eaptypes.h - 100%
'wlanapi.h - 100%

#If WINDEVLIB_LITE = 0 Then
Module wdAPIWLAN

	Public Const L2_PROFILE_MAX_NAME_LENGTH = 256
    
    Public Enum L2NotificationCodes
        L2_NOTIFICATION_SOURCE_NONE = 0
        L2_NOTIFICATION_SOURCE_DOT3_AUTO_CONFIG = &H00000001
        L2_NOTIFICATION_SOURCE_SECURITY = &H00000002
        L2_NOTIFICATION_SOURCE_ONEX = &H00000004
        L2_NOTIFICATION_SOURCE_WLAN_ACM = &H00000008
        L2_NOTIFICATION_SOURCE_WLAN_MSM = &H00000010
        L2_NOTIFICATION_SOURCE_WLAN_SECURITY = &H00000020
        L2_NOTIFICATION_SOURCE_WLAN_IHV = &H00000040
        L2_NOTIFICATION_SOURCE_WLAN_HNWK = &H00000080
        L2_NOTIFICATION_SOURCE_WCM = &H00000100
        L2_NOTIFICATION_SOURCE_WCM_CSP = &H00000200
        L2_NOTIFICATION_SOURCE_WFD = &H00000400
        L2_NOTIFICATION_SOURCE_WLAN_DEVICE_SERVICE = &H00000800
        L2_NOTIFICATION_SOURCE_ALL = &H0000FFFF&
        L2_NOTIFICATION_CODE_PUBLIC_BEGIN = &H00000000
        L2_NOTIFICATION_CODE_GROUP_SIZE = &H00001000
        L2_NOTIFICATION_CODE_V2_BEGIN = (L2_NOTIFICATION_CODE_PUBLIC_BEGIN + L2_NOTIFICATION_CODE_GROUP_SIZE)
    End Enum
    
    Public Enum L2ReasonCodes
        L2_REASON_CODE_GROUP_SIZE = &H10000
        L2_REASON_CODE_GEN_BASE = &H10000
        L2_REASON_CODE_DOT11_AC_BASE = (L2_REASON_CODE_GEN_BASE + L2_REASON_CODE_GROUP_SIZE)
        L2_REASON_CODE_DOT11_MSM_BASE = (L2_REASON_CODE_DOT11_AC_BASE + L2_REASON_CODE_GROUP_SIZE)
        L2_REASON_CODE_DOT11_SECURITY_BASE = (L2_REASON_CODE_DOT11_MSM_BASE + L2_REASON_CODE_GROUP_SIZE)
        L2_REASON_CODE_ONEX_BASE = (L2_REASON_CODE_DOT11_SECURITY_BASE + L2_REASON_CODE_GROUP_SIZE)
        L2_REASON_CODE_DOT3_AC_BASE = (L2_REASON_CODE_ONEX_BASE + L2_REASON_CODE_GROUP_SIZE)
        L2_REASON_CODE_DOT3_MSM_BASE = (L2_REASON_CODE_DOT3_AC_BASE + L2_REASON_CODE_GROUP_SIZE)
        L2_REASON_CODE_PROFILE_BASE = (L2_REASON_CODE_DOT3_MSM_BASE + L2_REASON_CODE_GROUP_SIZE)
        L2_REASON_CODE_IHV_BASE = (L2_REASON_CODE_PROFILE_BASE + L2_REASON_CODE_GROUP_SIZE)
        L2_REASON_CODE_WIMAX_BASE = (L2_REASON_CODE_IHV_BASE + L2_REASON_CODE_GROUP_SIZE)
        L2_REASON_CODE_RESERVED_BASE = (L2_REASON_CODE_WIMAX_BASE + L2_REASON_CODE_GROUP_SIZE)
    '  the common reason codes
        L2_REASON_CODE_SUCCESS = 0
    '  general reason code
        L2_REASON_CODE_UNKNOWN = (L2_REASON_CODE_GEN_BASE + 1)
    '  common profile section missing
        L2_REASON_CODE_PROFILE_MISSING = &H00000001
    End Enum
    
    Public Type L2_NOTIFICATION_DATA
        NotificationSource As Long
        NotificationCode As Long
        InterfaceGuid As UUID
        dwDataSize As Long
        '#ifdef __midl
        '    [unique, size_is(dwDataSize)] PBYTE pData;
        '#else
        pData As LongPtr
        '#endif
    End Type
    
    Public Enum DOT11_BSS_TYPE
        dot11_BSS_type_infrastructure = 1
        dot11_BSS_type_independent = 2
        dot11_BSS_type_any = 3
    End Enum
    
    Public Const DOT11_SSID_MAX_LENGTH = 32
	Public Type DOT11_SSID
		uSSIDLength As Long
		ucSSID(0 To (DOT11_SSID_MAX_LENGTH - 1)) As Byte
	End Type
        
    Public Enum DOT11_AUTH_ALGORITHM
        DOT11_AUTH_ALGO_80211_OPEN = 1
        DOT11_AUTH_ALGO_80211_SHARED_KEY = 2
        DOT11_AUTH_ALGO_WPA = 3
        DOT11_AUTH_ALGO_WPA_PSK = 4
        DOT11_AUTH_ALGO_WPA_NONE = 5 ' used in NatSTA only
        DOT11_AUTH_ALGO_RSNA = 6
        DOT11_AUTH_ALGO_RSNA_PSK = 7
        DOT11_AUTH_ALGO_WPA3 = 8 ' means WPA3 Enterprise 192 bits
        ' #if (NTDDI_VERSION >= NTDDI_WIN10_FE)
        DOT11_AUTH_ALGO_WPA3_ENT_192 = DOT11_AUTH_ALGO_WPA3
        ' #endif
        DOT11_AUTH_ALGO_WPA3_SAE = 9
        ' #if (NTDDI_VERSION >= NTDDI_WIN10_VB)
        DOT11_AUTH_ALGO_OWE = 10
        ' #endif
        ' #if (NTDDI_VERSION >= NTDDI_WIN10_FE)
        DOT11_AUTH_ALGO_WPA3_ENT = 11
        ' #endif
        DOT11_AUTH_ALGO_IHV_START = &H80000000
        DOT11_AUTH_ALGO_IHV_END = &Hffffffff
        
        
        
        DOT11_AUTH_ALGORITHM_OPEN_SYSTEM = DOT11_AUTH_ALGO_80211_OPEN
        DOT11_AUTH_ALGORITHM_SHARED_KEY = DOT11_AUTH_ALGO_80211_SHARED_KEY
        DOT11_AUTH_ALGORITHM_WPA = DOT11_AUTH_ALGO_WPA
        DOT11_AUTH_ALGORITHM_WPA_PSK = DOT11_AUTH_ALGO_WPA_PSK
        DOT11_AUTH_ALGORITHM_WPA_NONE = DOT11_AUTH_ALGO_WPA_NONE
        DOT11_AUTH_ALGORITHM_RSNA = DOT11_AUTH_ALGO_RSNA
        DOT11_AUTH_ALGORITHM_RSNA_PSK = DOT11_AUTH_ALGO_RSNA_PSK
        DOT11_AUTH_ALGORITHM_WPA3 = DOT11_AUTH_ALGO_WPA3
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_FE)
        DOT11_AUTH_ALGORITHM_WPA3_ENT_192 = DOT11_AUTH_ALGO_WPA3_ENT_192
    ' #endif
        DOT11_AUTH_ALGORITHM_WPA3_SAE = DOT11_AUTH_ALGO_WPA3_SAE
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_VB)
        DOT11_AUTH_ALGORITHM_OWE = DOT11_AUTH_ALGO_OWE
    ' #endif
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_FE)
        DOT11_AUTH_ALGORITHM_WPA3_ENT = DOT11_AUTH_ALGO_WPA3_ENT
    End Enum
    
    Public Enum DOT11_CIPHER_ALGORITHM
        DOT11_CIPHER_ALGO_NONE = &H00
        DOT11_CIPHER_ALGO_WEP40 = &H01
        DOT11_CIPHER_ALGO_TKIP = &H02
        DOT11_CIPHER_ALGO_CCMP = &H04
        DOT11_CIPHER_ALGO_WEP104 = &H05
        DOT11_CIPHER_ALGO_BIP = &H06 ' BIP-CMAC-128
        DOT11_CIPHER_ALGO_GCMP = &H08 ' GCMP-128
        DOT11_CIPHER_ALGO_GCMP_256 = &H09 ' GCMP-256
        DOT11_CIPHER_ALGO_CCMP_256 = &H0a ' CCMP-256
        DOT11_CIPHER_ALGO_BIP_GMAC_128 = &H0b ' BIP-GMAC-128
        DOT11_CIPHER_ALGO_BIP_GMAC_256 = &H0c ' BIP-GMAC-256
        DOT11_CIPHER_ALGO_BIP_CMAC_256 = &H0d ' BIP-CMAC-256
        DOT11_CIPHER_ALGO_WPA_USE_GROUP = &H100
        DOT11_CIPHER_ALGO_RSN_USE_GROUP = &H100
        DOT11_CIPHER_ALGO_WEP = &H101
        DOT11_CIPHER_ALGO_IHV_START = &H80000000
        DOT11_CIPHER_ALGO_IHV_END = &Hffffffff
    End Enum
    
    Public Type DOT11_AUTH_CIPHER_PAIR
        AuthAlgoId As DOT11_AUTH_ALGORITHM
        CipherAlgoId As DOT11_CIPHER_ALGORITHM
    End Type
    
    Public Const DOT11_OI_MAX_LENGTH  = 5  ' See 802.11-2012 Section 8.4.1.31
    Public Const DOT11_OI_MIN_LENGTH  = 3  ' See 802.11-2012 Section 8.4.1.31
    
	Public Type DOT11_OI
		OILength As Integer ' Must be between DOT11_OI_MIN_LENGTH and DOT11_OI_MAX_LENGTH
		OI(0 To (DOT11_OI_MAX_LENGTH - 1)) As Byte
	End Type
        
    Public Type DOT11_ACCESSNETWORKOPTIONS ' 802.11-2012 Figure 8-352
        AccessNetworkType As Byte ' 802.11-2012 Table 8-174
        Internet As Byte ' 1 = Internet connectivity
        ASRA As Byte ' Additional Step Required for Access
        ESR As Byte ' Emergency Services Reachable
        UESA As Byte ' Unauthenticated Emergency Services Available
    End Type
    
    Public Type DOT11_VENUEINFO ' 802.11-2012 Figure 8-72
        VenueGroup As Byte ' 802.11-2012 Table 8-52
        VenueType As Byte ' 802.11-2012 Table 8-53
    End Type
    
    Public Enum DOT11_PHY_TYPE
        dot11_phy_type_unknown = 0
        dot11_phy_type_any = dot11_phy_type_unknown
        dot11_phy_type_fhss = 1
        dot11_phy_type_dsss = 2
        dot11_phy_type_irbaseband = 3
        dot11_phy_type_ofdm = 4 ' 11a
        dot11_phy_type_hrdsss = 5 ' 11b
        dot11_phy_type_erp = 6 ' 11g
        dot11_phy_type_ht = 7 ' 11n
        dot11_phy_type_vht = 8 ' 11ac
        dot11_phy_type_dmg = 9 ' 11ad
        dot11_phy_type_he = 10 ' 11ax
        dot11_phy_type_eht = 11 ' 11be
        dot11_phy_type_IHV_start = &H80000000
        dot11_phy_type_IHV_end = &Hffffffff
    End Enum
    
    Public Type DOT11_MAC_ADDRESS
        ucDot11MacAddress(0 To 5) As Byte
    End Type
    
    Public Type NDIS_OBJECT_HEADER
        Type As Byte
        Revision As Byte
        Size As Integer
    End Type
    Public Const NDIS_OBJECT_REVISION_1 = 1
    
    
    
    Public Enum EapPropertyFlags
        eapPropCipherSuiteNegotiation = &H00000001
        eapPropMutualAuth = &H00000002
        eapPropIntegrity = &H00000004
        eapPropReplayProtection = &H00000008
        eapPropConfidentiality = &H00000010
        eapPropKeyDerivation = &H00000020
        eapPropKeyStrength64 = &H00000040
        eapPropKeyStrength128 = &H00000080
        eapPropKeyStrength256 = &H00000100
        eapPropKeyStrength512 = &H00000200
        eapPropKeyStrength1024 = &H00000400
        eapPropDictionaryAttackResistance = &H00000800
        eapPropFastReconnect = &H00001000
        eapPropCryptoBinding = &H00002000
        eapPropSessionIndependence = &H00004000
        eapPropFragmentation = &H00008000&
        eapPropChannelBinding = &H00010000
        eapPropNap = &H00020000
        eapPropStandalone = &H00040000
        eapPropMppeEncryption = &H00080000
        eapPropTunnelMethod = &H00100000
        eapPropSupportsConfig = &H00200000
        eapPropCertifiedMethod = &H00400000
        eapPropHiddenMethod = &H00800000
        eapPropMachineAuth = &H01000000
        eapPropUserAuth = &H02000000
        eapPropIdentityPrivacy = &H04000000
        eapPropMethodChaining = &H08000000
        eapPropSharedStateEquivalence = &H10000000
        eapPropReserved = &H80000000
    End Enum
    
    Public Const EAP_VALUENAME_PROPERTIES = "Properties"
    
    Public Enum EAP_SESSIONID
        [_]
    End Enum
    
    Public Type EAP_TYPE
        type As Byte
        dwVendorId As Long
        dwVendorType As Long
    End Type
    
    Public Type EAP_METHOD_TYPE
        eapType As EAP_TYPE
        dwAuthorId As Long
    End Type
    
    Public Type EAP_METHOD_INFO
        eaptype As EAP_METHOD_TYPE
        pwszAuthorName As LongPtr
        pwszFriendlyName As LongPtr
        eapProperties As Long
        pInnerMethodInfo As LongPtr '*struct _EAP_METHOD_INFO
    End Type
    
    Public Type EAP_METHOD_INFO_EX
        eaptype As EAP_METHOD_TYPE
        pwszAuthorName As LongPtr
        pwszFriendlyName As LongPtr
        eapProperties As Long
        pInnerMethodInfoArray As LongPtr '*struct _EAP_METHOD_INFO_ARRAY_EX
    End Type
    
    Public Type EAP_METHOD_INFO_ARRAY
        dwNumberOfMethods As Long
        pEapMethods As LongPtr '*EAP_METHOD_INFO
    End Type
    
    Public Type EAP_METHOD_INFO_ARRAY_EX
        dwNumberOfMethods As Long
        pEapMethods As LongPtr '*EAP_METHOD_INFO_EX
    End Type
    
    Public Type EAP_ERROR
        dwWinError As Long
        type As EAP_METHOD_TYPE
        dwReasonCode As Long
        rootCauseGuid As UUID
        repairGuid As UUID
        helpLinkGuid As UUID
        pRootCauseString As LongPtr
        pRepairString As LongPtr
    End Type
    
    Public Enum EAP_ATTRIBUTE_TYPE
        eatMinimum = 0                'Undefined
        eatUserName                   'Value field is a Pointer
        eatUserPassword               'Value field is a Pointer
        eatMD5CHAPPassword            'Value field is a Pointer
        eatNASIPAddress               'Value field is a 32 bit integral value
        eatNASPort                    'Value field is a 32 bit integral value
        eatServiceType                'Value field is a 32 bit integral value
        eatFramedProtocol             'Value field is a 32 bit integral value
        eatFramedIPAddress            'Value field is a 32 bit integral value
        eatFramedIPNetmask            'Value field is a 32 bit integral value
        eatFramedRouting = 10         'Value field Is a 32 bit integral value
        eatFilterId                   'Value field is a Pointer
        eatFramedMTU                  'Value field is a 32 bit integral value
        eatFramedCompression          'Value field is a 32 bit integral value
        eatLoginIPHost                'Value field is a 32 bit integral value
        eatLoginService               'Value field is a 32 bit integral value
        eatLoginTCPPort               'Value field is a 32 bit integral value
        eatUnassigned17               'Undefined
        eatReplyMessage               'Value field is a Pointer
        eatCallbackNumber             'Value field is a Pointer
        eatCallbackId = 20             'Value field Is a Pointer
        eatUnassigned21               'Undefined
        eatFramedRoute                'Value field is a Pointer
        eatFramedIPXNetwork           'Value field is a 32 bit integral value
        eatState                      'Value field is a Pointer
        eatClass                      'Value field is a Pointer
        eatVendorSpecific             'Value field is a Pointer
        eatSessionTimeout             'Value field is a 32 bit integral value
        eatIdleTimeout                'Value field is a 32 bit integral value
        eatTerminationAction          'Value field is a 32 bit integral value
        eatCalledStationId = 30       'Value field Is a Pointer
        eatCallingStationId           'Value field is a Pointer
        eatNASIdentifier              'Value field is a Pointer
        eatProxyState                 'Value field is a Pointer
        eatLoginLATService            'Value field is a Pointer
        eatLoginLATNode               'Value field is a Pointer
        eatLoginLATGroup              'Value field is a Pointer
        eatFramedAppleTalkLink        'Value field is a 32 bit integral value
        eatFramedAppleTalkNetwork     'Value field is a 32 bit integral value
        eatFramedAppleTalkZone        'Value field is a Pointer
        eatAcctStatusType = 40        'Value field Is a 32 bit integral value
        eatAcctDelayTime              'Value field is a 32 bit integral value
        eatAcctInputOctets            'Value field is a 32 bit integral value
        eatAcctOutputOctets           'Value field is a 32 bit integral value
        eatAcctSessionId              'Value field is a Pointer
        eatAcctAuthentic              'Value field is a 32 bit integral value
        eatAcctSessionTime            'Value field is a 32 bit integral value
        eatAcctInputPackets           'Value field is a 32 bit integral value
        eatAcctOutputPackets          'Value field is a 32 bit integral value
        eatAcctTerminateCause         'Value field is a 32 bit integral value
        eatAcctMultiSessionId = 50    'Value field Is a Pointer
        eatAcctLinkCount              'Value field is a 32 bit integral value
        eatAcctEventTimeStamp = 55    'Value field Is a 32 bit integral value
        eatMD5CHAPChallenge = 60      'Value field Is a Pointer
        eatNASPortType                'Value field is a 32 bit integral value
        eatPortLimit                  'Value field is a 32 bit integral value
        eatLoginLATPort               'Value field is a Pointer
        eatTunnelType                 'Value field is a 32 bit integral value
        eatTunnelMediumType           'Value field is a 32 bit integral value
        eatTunnelClientEndpoint       'Value field is a Pointer
        eatTunnelServerEndpoint       'Value field is a Pointer
        eatARAPPassword = 70          'Value field Is a Pointer
        eatARAPFeatures               'Value field is a Pointer
        eatARAPZoneAccess             'Value field is a 32 bit integral value
        eatARAPSecurity               'Value field is a 32 bit integral value
        eatARAPSecurityData           'Value field is a Pointer
        eatPasswordRetry              'Value field is a 32 bit integral value
        eatPrompt                     'Value field is a 32 bit integral value
        eatConnectInfo                'Value field is a Pointer
        eatConfigurationToken         'Value field is a Pointer
        eatEAPMessage                 'Value field is a Pointer
        eatSignature = 80             'Value field Is a Pointer
        eatARAPChallengeResponse = 84 'Value field Is a Pointer
        eatAcctInterimInterval = 85   'Value field Is a 32 bit integral value
        eatNASIPv6Address = 95  'Value field Is a Pointer
        eatFramedInterfaceId 'Value field is a Pointer
        eatFramedIPv6Prefix 'Value field is a Pointer
        eatLoginIPv6Host 'Value field is a Pointer
        eatFramedIPv6Route 'Value field is a Pointer
        eatFramedIPv6Pool 'Value field is a Pointer
        eatARAPGuestLogon = 8096      'Value field Is a 32 bit integral value
        eatCertificateOID             'Value field is a Pointer
        eatEAPConfiguration           'Value field is a Pointer
        eatPEAPEmbeddedEAPTypeId      'Value field is a 32 bit integral value
        eatPEAPFastRoamedSession = 8100   'Value field Is a 32 bit integral value
        eatFastRoamedSession = 8100       'Value field Is a 32 bit integral value
        eatEAPTLV = 8102              'Value field Is a Pointer
        eatCredentialsChanged        'Value field is a Integer with boolean
                                       'semantics
        eatInnerEapMethodType         'Value field is a pointer
                                       'EapMethodType of the inner method in
                                       'case of Tunnelled method
        eatClearTextPassword = 8107   'Value field Is a pointer
                                       'Clear text password that can be used
                                       'by certain password based eap methods
                                       'to authenticate a user.
        eatQuarantineSoH = 8150 'Value field Is a pointer
        eatCertificateThumbprint = 8250 'Value field Is a pointer
        eatPeerId = 9000  'Value field Is a pointer
        eatServerId                          'Value field is a pointer
        eatMethodId                          'Value field is a pointer
        eatEMSK                               'Value field is a pointer
        eatSessionId                               'Value field is a pointer
        eatReserved = &HFFFFFFFF       'Undefined
    End Enum
    
    Public Type EAP_ATTRIBUTE
        eaType As EAP_ATTRIBUTE_TYPE
        dwLength As Long
        pValue As LongPtr
    End Type
    
    Public Type EAP_ATTRIBUTES
        dwNumberOfAttributes As Long
        pAttribs As LongPtr '*EAP_ATTRIBUTE
    End Type
    
    
    Public Enum Eap_Flags
        EAP_FLAG_Reserved1 = &H00000001
        EAP_FLAG_NON_INTERACTIVE = &H00000002
    '  The user data was obtained from Winlogon
        EAP_FLAG_LOGON = &H00000004
    '  Show the Credentails UI before authenticating even if cached creds are present
        EAP_FLAG_PREVIEW = &H00000008
        EAP_FLAG_Reserved2 = &H00000010
    '  Authentication is for machine, i.e. not for user. Not setting this flag means
    '  it is user authentication.
        EAP_FLAG_MACHINE_AUTH = &H00000020
    '  Request to provide guest access
        EAP_FLAG_GUEST_ACCESS = &H00000040
        EAP_FLAG_Reserved3 = &H00000080
        EAP_FLAG_Reserved4 = &H00000100
    '  Indicates this is the first call after m/c resumed from hibernation.
        EAP_FLAG_RESUME_FROM_HIBERNATE = &H00000200
        EAP_FLAG_Reserved5 = &H00000400
        EAP_FLAG_Reserved6 = &H00000800
    '  Should have this or make it reserved?
        EAP_FLAG_FULL_AUTH = &H00001000
    ' /   New EapHost Flags
    '  Prefer Credentails passed in BeginSession instead of other form of
    '  credentials, even if config says use certain way of cred retrieval. If this fails, fallback to
    '  Method specific credentail retrieval
        EAP_FLAG_PREFER_ALT_CREDENTIALS = &H00002000
        EAP_FLAG_Reserved7 = &H00004000
    '  To inform the cause of reauth is a NAP callback
        EAP_PEER_FLAG_HEALTH_STATE_CHANGE = &H00008000&
    '  Continue authentication with information available. If can not proceed, fail
    '  the authentication
        EAP_FLAG_SUPRESS_UI = &H00010000
    '  Pre logon scenario like PLAP
        EAP_FLAG_PRE_LOGON = &H00020000
    '  User Authentication. For legacy Methods not setting EAP_FLAG_MACHINE_AUTH
    '  also means user authentication.
        EAP_FLAG_USER_AUTH = &H00040000
    '  Config can be viewed but not updated
        EAP_FLAG_CONFG_READONLY = &H00080000
        EAP_FLAG_Reserved8 = &H00100000
        EAP_FLAG_Reserved9 = &H00400000
        EAP_FLAG_VPN = &H00800000
        EAP_FLAG_ONLY_EAP_TLS = &H01000000
        EAP_FLAG_SERVER_VALIDATION_REQUIRED = &H02000000
    End Enum
    
    Public Enum EapInputFieldFlags
        EAP_CONFIG_INPUT_FIELD_PROPS_DEFAULT = &H00000000
        EAP_CONFIG_INPUT_FIELD_PROPS_NON_DISPLAYABLE = &H00000001
    '  This specifies that supplicant should cache this field data
        EAP_CONFIG_INPUT_FIELD_PROPS_NON_PERSIST = &H00000002
    End Enum
    
    Public Enum EapUIInputFieldFlags
        EAP_UI_INPUT_FIELD_PROPS_DEFAULT = EAP_CONFIG_INPUT_FIELD_PROPS_DEFAULT
    '  To qualify certain entry data on UI is non-displayable (e.g. password)
        EAP_UI_INPUT_FIELD_PROPS_NON_DISPLAYABLE = EAP_CONFIG_INPUT_FIELD_PROPS_NON_DISPLAYABLE
    '  This specifies that supplicant should cache this field data
        EAP_UI_INPUT_FIELD_PROPS_NON_PERSIST = &H00000002
    '  This specifies that following field is read only (non-editable)
        EAP_UI_INPUT_FIELD_PROPS_READ_ONLY = &H00000004
    End Enum
    
    Public Enum EAP_CONFIG_INPUT_FIELD_TYPE
        EapConfigInputUsername
        EapConfigInputPassword
        EapConfigInputNetworkUsername
        EapConfigInputNetworkPassword
        EapConfigInputPin
        EapConfigInputPSK
        EapConfigInputEdit
        EapConfigSmartCardUsername
        EapConfigSmartCardError
    End Enum
    
    Public Const EAP_CREDENTIAL_VERSION  = 1
    Public Const EAP_INTERACTIVE_UI_DATA_VERSION  = 1
    Public Const EAPHOST_PEER_API_VERSION  = 1
    Public Const EAPHOST_METHOD_API_VERSION  = 1
    Public Const MAX_EAP_CONFIG_INPUT_FIELD_LENGTH  = 256
    Public Const MAX_EAP_CONFIG_INPUT_FIELD_VALUE_LENGTH  = 1024
    
    Public Type EAP_CONFIG_INPUT_FIELD_DATA
        dwSize As Long
        Type As EAP_CONFIG_INPUT_FIELD_TYPE
        dwFlagProps As Long
        pwszLabel As LongPtr
        pwszData As LongPtr
        dwMinDataLength As Long
        dwMaxDataLength As Long
    End Type
    
    Public Type EAP_CONFIG_INPUT_FIELD_ARRAY
        dwVersion As Long ' used for versioning
        dwNumberOfFields As Long
        pFields As LongPtr '*EAP_CONFIG_INPUT_FIELD_DATA
    End Type
    
    Public Enum EAP_INTERACTIVE_UI_DATA_TYPE
        EapCredReq   ' Credential request during retry
        EapCredResp  ' Credential response during retry
        EapCredExpiryReq  ' Credential request during cred expiry
        EapCredExpiryResp   ' Credential response during cred expiry
        EapCredLogonReq   ' Initial credential request during auth
        EapCredLogonResp   ' Initial credential response during auth
    End Enum
    
    ' Alias EAP_CONFIG_INPUT_FIELD_ARRAY EAP_CRED_REQ;
    ' Alias EAP_CONFIG_INPUT_FIELD_ARRAY EAP_CRED_RESP;
    ' Alias EAP_CONFIG_INPUT_FIELD_ARRAY EAP_CRED_LOGON_REQ;
    ' Alias EAP_CONFIG_INPUT_FIELD_ARRAY EAP_CRED_LOGON_RESP;
    Public Type EAP_CRED_REQ
        dwVersion As Long ' used for versioning
        dwNumberOfFields As Long
        pFields As LongPtr '*EAP_CONFIG_INPUT_FIELD_DATA
    End Type
    Public Type EAP_CRED_RESP
        dwVersion As Long ' used for versioning
        dwNumberOfFields As Long
        pFields As LongPtr '*EAP_CONFIG_INPUT_FIELD_DATA
    End Type
    Public Type EAP_CRED_LOGON_REQ
        dwVersion As Long ' used for versioning
        dwNumberOfFields As Long
        pFields As LongPtr '*EAP_CONFIG_INPUT_FIELD_DATA
    End Type
    Public Type EAP_CRED_LOGON_RESP
        dwVersion As Long ' used for versioning
        dwNumberOfFields As Long
        pFields As LongPtr '*EAP_CONFIG_INPUT_FIELD_DATA
    End Type
    
    Public Type EAP_CRED_EXPIRY_REQ
        curCreds As EAP_CONFIG_INPUT_FIELD_ARRAY
        newCreds As EAP_CONFIG_INPUT_FIELD_ARRAY
    End Type
    
    ' typedef union {
       ' EAP_CRED_REQ*  credData;
       ' EAP_CRED_EXPIRY_REQ* credExpiryData;
       ' EAP_CRED_LOGON_REQ* credLogonData;
    ' } EAP_UI_DATA_FORMAT;
    Public Type EAP_UI_DATA_FORMAT
        cred_Data As LongPtr
    End Type
    
    Public Type EAP_INTERACTIVE_UI_DATA
        'specifies version of data structure. It must be 0.
        dwVersion As Long
        'specifies size of the entire structure.
        dwSize As Long
        ' this determines what kind of interactive data is passed.
        dwDataType As EAP_INTERACTIVE_UI_DATA_TYPE
        ' specifies size of the data pointed by pbUiByte.
        cbUiData As Long
        ' pointer to a data blob of a type determined by dwDataType above.
        ' This can be of type EAP_CRED_REQ/EAP_CRED_RESP or
        ' EAP_CRED_EXPIRY_REQ/EAP_CRED_EXPIRY_RESP or
        ' EAP_CRED_LOGON_REQ/EAP_CRED_LOGON_RESP depending on uiDataType above
        pbUiData As EAP_UI_DATA_FORMAT
    End Type
    
    Public Enum EAP_METHOD_PROPERTY_TYPE
        emptPropCipherSuiteNegotiation = 0     'value field Is boolean
        emptPropMutualAuth                     'value field is boolean
        emptPropIntegrity                      'value field is boolean
        emptPropReplayProtection               'value field is boolean
        emptPropConfidentiality                'value field is boolean
        emptPropKeyDerivation                  'value field is boolean
        emptPropKeyStrength64                  'value field is boolean
        emptPropKeyStrength128                 'value field is boolean
        emptPropKeyStrength256                 'value field is boolean
        emptPropKeyStrength512                 'value field is boolean
        emptPropKeyStrength1024                'value field is boolean
        emptPropDictionaryAttackResistance     'value field is boolean
        emptPropFastReconnect                  'value field is boolean
        emptPropCryptoBinding                  'value field is boolean
        emptPropSessionIndependence            'value field is boolean
        emptPropFragmentation                  'value field is boolean
        emptPropChannelBinding                 'value field is boolean
        emptPropNap                            'value field is boolean
        emptPropStandalone                     'value field is boolean
        emptPropMppeEncryption                 'value field is boolean
        emptPropTunnelMethod                   'value field is boolean
        emptPropSupportsConfig                 'value field is boolean
        emptPropCertifiedMethod                'value field is boolean
        emptPropHiddenMethod                   'value field is boolean
        emptPropMachineAuth                    'value field is boolean
        emptPropUserAuth                       'value field is boolean
        emptPropIdentityPrivacy                'value field is boolean
        emptPropMethodChaining                 'value field is boolean
        emptPropSharedStateEquivalence         'value field is boolean
        emptLegacyMethodPropertyFlag = 31      'value field Is dword
        emptPropVendorSpecific = 255           'value field Is string
    End Enum
    
    Public Enum EAP_METHOD_PROPERTY_VALUE_TYPE
        empvtBool = 0 ' value type is boolean
        empvtDword  ' value type is dword
        empvtString  ' value type is string
    End Enum
    
    Public Type EAP_METHOD_PROPERTY_VALUE_BOOL
        length As Long
        value As BOOL
    End Type
    
    Public Type EAP_METHOD_PROPERTY_VALUE_DWORD
        length As Long
        value As Long
    End Type
    
    Public Type EAP_METHOD_PROPERTY_VALUE_STRING
        length As Long
        value As LongPtr
    End Type
    
    ' typedef union _EAP_METHOD_PROPERTY_VALUE {
    ' EAP_METHOD_PROPERTY_VALUE_BOOL empvBool;      // value is boolean type
    ' EAP_METHOD_PROPERTY_VALUE_DWORD empvDword;    // value is dword type
    ' EAP_METHOD_PROPERTY_VALUE_STRING empvString;   // value is string type
' } EAP_METHOD_PROPERTY_VALUE;
	Public Type EAP_METHOD_PROPERTY_VALUE
        #If Win64 Then
        empv(16) As Byte
        #Else
        empv(7) As Byte
        #End If
    End Type

    Public Type EAP_METHOD_PROPERTY
        ' specifies the method property type
        eapMethodPropertyType As EAP_METHOD_PROPERTY_TYPE
        ' specifies the data type of value
        eapMethodPropertyValueType As EAP_METHOD_PROPERTY_VALUE_TYPE
        ' specifies the value of the method property
        eapMethodPropertyValue As EAP_METHOD_PROPERTY_VALUE
    End Type
    
    Public Type EAP_METHOD_PROPERTY_ARRAY
        ' specifies the number of method properties in array
        dwNumberOfProperties As Long
        ' specifies the array of method property
        pMethodProperty As LongPtr '*EAP_METHOD_PROPERTY
    End Type
    
    Public Type EAPHOST_IDENTITY_UI_PARAMS
        ' The following parameters are passed by supplicant to eaphost
        eapMethodType As EAP_METHOD_TYPE
        dwFlags As Long
        dwSizeofConnectionData As Long
        pConnectionData As LongPtr '*Byte
        dwSizeofUserData As Long
        pUserData As LongPtr '*Byte
        ' The following parameters are returned by eaphost to supplicant
        dwSizeofUserDataOut As Long
        pUserDataOut As LongPtr '*Byte
        pwszIdentity As LongPtr
        dwError As Long
        pEapError As LongPtr '*EAP_ERROR
    End Type
    
    Public Type EAPHOST_INTERACTIVE_UI_PARAMS
        ' The following parameters are passed by supplicant to eaphost
        dwSizeofContextData As Long
        pContextData As LongPtr '*Byte
        ' The following parameters are returned by eaphost to supplicant
        dwSizeofInteractiveUIData As Long
        pInteractiveUIData As LongPtr '*Byte
        dwError As Long
        pEapError As LongPtr '*EAP_ERROR
    End Type
    
    Public Enum EapCredentialType
        EAP_EMPTY_CREDENTIAL = 0
        EAP_USERNAME_PASSWORD_CREDENTIAL
        EAP_WINLOGON_CREDENTIAL
        EAP_CERTIFICATE_CREDENTIAL
        EAP_SIM_CREDENTIAL
    End Enum
    
    Public Type EapUsernamePasswordCredential
        username As LongPtr
        password As LongPtr
    End Type
    
    Public Const CERTIFICATE_HASH_LENGTH = 20
    Public Type EapCertificateCredential
        certHash(0 To (CERTIFICATE_HASH_LENGTH - 1)) As Byte
        password As LongPtr
    End Type
    
    Public Type EapSimCredential
        iccID As LongPtr
    End Type
    
    ' typedef union {
         ' EapUsernamePasswordCredential username_password;
         ' EapCertificateCredential certificate;
         ' EapSimCredential sim;
    ' } EapCredentialTypeData;
    Public Type EapCredentialTypeData
        #If Win64 Then
        data(31) As Byte
        #Else
        data(23) As Byte
        #End If
    End Type
    
    Public Type EapCredential
        credType As EapCredentialType
        credData As EapCredentialTypeData
    End Type
    
    Public Const FACILITY_EAP_MESSAGE  = &H0842  ' 66L + MessageId bit
    '  Errors common across different groups.
    Public Const _EAP_CERT_FIRST  = (+ &H0)
    Public Const _EAP_CERT_LAST  = (+ &HF)
    Public Const _EAP_CERT_NOT_FOUND  = (+ &H1)
    Public Const _EAP_CERT_INVALID  = (+ &H2)
    Public Const _EAP_CERT_EXPIRED  = (+ &H3)
    Public Const _EAP_CERT_REVOKED  = (+ &H4)
    Public Const _EAP_CERT_OTHER_ERROR  = (+ &H5)
    Public Const _EAP_CERT_REJECTED  = (+ &H6)
    Public Const _EAP_CERT_NAME_REQUIRED  = (+ &H7)
    Public Const _EAP_GENERAL_FIRST  = (+ &H10)  ' (+16)
    Public Const _EAP_GENERAL_LAST  = (+ &H3F)  ' (+31)
    
    
    Public Const EAP_GROUP_MASK  = &H0000FF00
    Public Const EAP_E_EAPHOST_FIRST  = &H80420000
    Public Const EAP_E_EAPHOST_LAST  = &H804200FF
    Public Const EAP_I_EAPHOST_FIRST  = &H80420000
    Public Const EAP_I_EAPHOST_LAST  = &H804200FF
    '  Cert-Store can't be accessed on either authenticator or peer
    Public Const EAP_E_CERT_STORE_INACCESSIBLE  = &H80420010  ' (EAP_E_EAPHOST_FIRST + _EAP_GENERAL_FIRST + 0)
    '  Requested EAP-method is not installed
    Public Const EAP_E_EAPHOST_METHOD_NOT_INSTALLED  = &H80420011  ' (EAP_E_EAPHOST_FIRST + _EAP_GENERAL_FIRST + 1)
    Public Const EAP_E_EAPHOST_THIRDPARTY_METHOD_HOST_RESET  = &H80420012  ' (EAP_E_EAPHOST_FIRST + _EAP_GENERAL_FIRST + 2)
    '  EAPHost not able to communicate with EAPQEC on a NAP enabled client
    Public Const EAP_E_EAPHOST_EAPQEC_INACCESSIBLE  = &H80420013  ' (EAP_E_EAPHOST_FIRST + _EAP_GENERAL_FIRST + 3)
    '  EAPHost returns this error, if the authenticator fails the authentication after peer sent its identity
    Public Const EAP_E_EAPHOST_IDENTITY_UNKNOWN  = &H80420014  ' (EAP_E_EAPHOST_FIRST + _EAP_GENERAL_FIRST + 4)
    '  EAPHost returns this error on authentication failure.
    Public Const EAP_E_AUTHENTICATION_FAILED  = &H80420015  ' (EAP_E_EAPHOST_FIRST + _EAP_GENERAL_FIRST + 5)
    '  EAPHost returns this error, when the client & the server aren't configured with compatible EAP-types.
    Public Const EAP_I_EAPHOST_EAP_NEGOTIATION_FAILED  = &H40420016  ' (EAP_I_EAPHOST_FIRST + _EAP_GENERAL_FIRST + 6)
    '  EAPMethod received an EAP packet that can not be processed
    Public Const EAP_E_EAPHOST_METHOD_INVALID_PACKET  = &H80420017  ' (EAP_E_EAPHOST_FIRST + _EAP_GENERAL_FIRST + 7)
    '  EAPHost received a packet that can not be processed.
    Public Const EAP_E_EAPHOST_REMOTE_INVALID_PACKET  = &H80420018  ' (EAP_E_EAPHOST_FIRST + _EAP_GENERAL_FIRST + 8)
    '  EAPHost ConfigSchema validation failed
    Public Const EAP_E_EAPHOST_XML_MALFORMED  = &H80420019  ' (EAP_E_EAPHOST_FIRST + _EAP_GENERAL_FIRST + 9)
    ' Method doesn't support SSO for the provided config
    Public Const EAP_E_METHOD_CONFIG_DOES_NOT_SUPPORT_SSO  = &H8042001A  ' (EAP_E_EAPHOST_FIRST + _EAP_GENERAL_FIRST + A)
    '  EAPHost returns this error, when a configured EAP-method does not support a requested operation (procedure call)
    Public Const EAP_E_EAPHOST_METHOD_OPERATION_NOT_SUPPORTED  = &H80420020  ' (EAP_E_EAPHOST_FIRST + _EAP_GENERAL_FIRST + 10)
    Public Const EAP_E_USER_FIRST  = &H80420100
    Public Const EAP_E_USER_LAST  = &H804201FF
    Public Const EAP_I_USER_FIRST  = &H40420100
    Public Const EAP_I_USER_LAST  = &H404201FF
    '  EAPHost could not find user-certificate for authentication
    Public Const EAP_E_USER_CERT_NOT_FOUND  = &H80420100  ' (EAP_E_USER_FIRST + _EAP_CERT_FIRST + _EAP_CERT_NOT_FOUND)
    '  user-cert being user for authentication does not have proper usage (EKU) set
    Public Const EAP_E_USER_CERT_INVALID  = &H80420101  ' (EAP_E_USER_FIRST + _EAP_CERT_FIRST + _EAP_CERT_INVALID)
    '  EAPhost found user-cert which has expired already
    Public Const EAP_E_USER_CERT_EXPIRED  = &H80420102  ' (EAP_E_USER_FIRST + _EAP_CERT_FIRST + _EAP_CERT_EXPIRED)
    '  user-cert being used for authentication has been revoked
    Public Const EAP_E_USER_CERT_REVOKED  = &H80420103  ' (EAP_E_USER_FIRST + _EAP_CERT_FIRST + _EAP_CERT_REVOKED)
    '  unknown error occured with user-cert being used for authentication
    Public Const EAP_E_USER_CERT_OTHER_ERROR  = &H80420104  ' (EAP_E_USER_FIRST + _EAP_CERT_FIRST + _EAP_CERT_OTHER_ERROR)
    '  Authenticator rejected user-cert for authentication
    Public Const EAP_E_USER_CERT_REJECTED  = &H80420105  ' (EAP_E_USER_FIRST + _EAP_CERT_FIRST + _EAP_CERT_REJECTED)
    '  Received EAP-Failure after Identity exchange:  There is likely a problem with the authenticating user's account.
    Public Const EAP_I_USER_ACCOUNT_OTHER_ERROR  = &H40420110  ' (EAP_I_USER_FIRST + _EAP_GENERAL_FIRST + 0
    '  Authenticator rejected user credentials for authentication
    Public Const EAP_E_USER_CREDENTIALS_REJECTED  = &H80420111  ' (EAP_E_USER_FIRST + _EAP_GENERAL_FIRST + 1)
    '  Authenticator rejected user credentials for authentication
    Public Const EAP_E_USER_NAME_PASSWORD_REJECTED  = &H80420112  ' (EAP_E_USER_FIRST + _EAP_GENERAL_FIRST + 2)
    ' No Smart Card Reader Present
    Public Const EAP_E_NO_SMART_CARD_READER  = &H80420113  ' (EAP_E_USER_FIRST + _EAP_GENERAL_FIRST + 3)
    Public Const EAP_E_SERVER_FIRST  = &H80420200
    Public Const EAP_E_SERVER_LAST  = &H804202FF
    '  EAPHost could not find server-certificate for authentication
    Public Const EAP_E_SERVER_CERT_NOT_FOUND  = &H80420200  ' (EAP_E_SERVER_FIRST + _EAP_CERT_FIRST + _EAP_CERT_NOT_FOUND)
    '  server-cert being user for authentication does not have proper usage (EKU) set
    Public Const EAP_E_SERVER_CERT_INVALID  = &H80420201  ' (EAP_E_SERVER_FIRST + _EAP_CERT_FIRST + _EAP_CERT_INVALID)
    '  EAPhost found server-cert which has expired already
    Public Const EAP_E_SERVER_CERT_EXPIRED  = &H80420202  ' (EAP_E_SERVER_FIRST + _EAP_CERT_FIRST + _EAP_CERT_EXPIRED)
    '  server-cert being used for authentication has been revoked
    Public Const EAP_E_SERVER_CERT_REVOKED  = &H80420203  ' (EAP_E_SERVER_FIRST + _EAP_CERT_FIRST + _EAP_CERT_REVOKED)
    '  unknown error occured with server-cert being used for authentication
    Public Const EAP_E_SERVER_CERT_OTHER_ERROR  = &H80420204  ' (EAP_E_SERVER_FIRST + _EAP_CERT_FIRST + _EAP_CERT_OTHER_ERROR)
    Public Const EAP_E_USER_ROOT_CERT_FIRST  = &H80420300
    Public Const EAP_E_USER_ROOT_CERT_LAST  = &H804203FF
    '  EAPHost could not find a certificate in trusted-root cert-store for user cert velidation
    Public Const EAP_E_USER_ROOT_CERT_NOT_FOUND  = &H80420300  ' (EAP_E_USER_ROOT_CERT_FIRST + _EAP_CERT_FIRST + _EAP_CERT_NOT_FOUND)
    '  The authentication failed because the root certificate used for this network is invalid
    Public Const EAP_E_USER_ROOT_CERT_INVALID  = &H80420301  ' (EAP_E_USER_ROOT_CERT_FIRST + _EAP_CERT_FIRST + _EAP_CERT_INVALID)
    '  Trusted root certificate needed for user-cert validation has been expired.
    Public Const EAP_E_USER_ROOT_CERT_EXPIRED  = &H80420302  ' (EAP_E_USER_ROOT_CERT_FIRST + _EAP_CERT_FIRST + _EAP_CERT_EXPIRED)
    Public Const EAP_E_SERVER_ROOT_CERT_FIRST  = &H80420400
    Public Const EAP_E_SERVER_ROOT_CERT_LAST  = &H804204FF
    '  EAPHost could not find a Root certificate in trusted-root cert-store for server cert velidation
    Public Const EAP_E_SERVER_ROOT_CERT_NOT_FOUND  = &H80420400  ' (EAP_E_SERVER_ROOT_CERT_FIRST + _EAP_CERT_FIRST + _EAP_CERT_NOT_FOUND)
    '  The authentication failed because the server certificate required for this network on the server computer is invalid
    Public Const EAP_E_SERVER_ROOT_CERT_INVALID  = &H80420401  ' (EAP_E_SERVER_ROOT_CERT_FIRST + _EAP_CERT_FIRST + _EAP_CERT_INVALID)
    '  The authentication failed because the certificate on the server computer does not have a server name specified
    Public Const EAP_E_SERVER_ROOT_CERT_NAME_REQUIRED  = &H80420406  ' (EAP_E_SERVER_ROOT_CERT_FIRST + _EAP_CERT_FIRST + _EAP_CERT_NAME_REQUIRED)
    '  The authentication failed because there is no valid SIM for authentication
    Public Const EAP_E_SIM_NOT_VALID  = &H80420500
    '  Alternate names for certain errors.
    Public Const EAP_METHOD_INVALID_PACKET  = EAP_E_EAPHOST_METHOD_INVALID_PACKET
    Public Const EAP_INVALID_PACKET  = EAP_E_EAPHOST_REMOTE_INVALID_PACKET
    
    
	Public Const WLAN_API_VERSION_1_0  = &H00000001
	Public Const WLAN_API_VERSION_2_0  = &H00000002
	Public Const WLAN_API_VERSION  = WLAN_API_VERSION_2_0
	Public Const WLAN_MAX_NAME_LENGTH  = L2_PROFILE_MAX_NAME_LENGTH
        
	Public Enum WlanProfileFlags
		WLAN_PROFILE_GROUP_POLICY = &H00000001
		WLAN_PROFILE_USER = &H00000002
		WLAN_PROFILE_GET_PLAINTEXT_KEY = &H00000004
	'  the following flags are only used for WlanSaveTemporaryProfile API
		WLAN_PROFILE_CONNECTION_MODE_SET_BY_CLIENT = &H00010000
		WLAN_PROFILE_CONNECTION_MODE_AUTO = &H00020000
	End Enum
    
	Public Enum WlanEAPHostDataStgFlags
        WLAN_SET_EAPHOST_DATA_ALL_USERS = &H00000001
    End Enum
    
    Public Type WLAN_PROFILE_INFO
        strProfileName(0 To (WLAN_MAX_NAME_LENGTH - 1)) As Integer
        dwFlags As WlanProfileFlags
    End Type
    
    Public Type DOT11_NETWORK
        dot11Ssid As DOT11_SSID
        dot11BssType As DOT11_BSS_TYPE
    End Type
    
    Public Const DOT11_PSD_IE_MAX_DATA_SIZE  = 240
    '  the maximum number of PSD IE data entries
    Public Const DOT11_PSD_IE_MAX_ENTRY_NUMBER  = 5
    
    ' typedef struct _WLAN_RAW_DATA {
    ' // size of the data blob
    ' DWORD dwDataSize;
' #ifdef __midl
    ' [unique, size_is(dwDataSize)] BYTE DataBlob[*];
' #else
    ' BYTE DataBlob[1];
' #endif
' } WLAN_RAW_DATA, *PWLAN_RAW_DATA;

' typedef struct _WLAN_RAW_DATA_LIST {
    ' DWORD dwTotalSize;
    ' DWORD dwNumberOfItems;
    ' struct {
        ' // the beginning of the data blob
        ' // the offset is w.r.t. the beginning of the entry
        ' DWORD dwDataOffset;
        ' // size of the data blob
        ' DWORD dwDataSize;
    ' } DataList[1];
' } WLAN_RAW_DATA_LIST,
    [Description("⚠️ **WARNING:** Variable C-style array with guessed max needed buffer. LenB is invalid.")]
	Public Type WLAN_RAW_DATA
		' size of the data blob
		dwDataSize As Long
		DataBlob(4095) As Byte
	End Type
    
    Public Type DataListWLAN
        ' the beginning of the data blob
        ' the offset is w.r.t. the beginning of the entry
        dwDataOffset As Long
        ' size of the data blob
        dwDataSize As Long
    End Type
    [Description("⚠️ **WARNING:** Header only. Followed by a C-style variable array of descriptors (you can use DataListWLAN) and raw bytes.")]
    Public Type WLAN_RAW_DATA_LIST
        dwTotalSize As Long
        dwNumberOfItems As Long
    End Type
    
    Public Enum WLAN_CONNECTION_MODE
        wlan_connection_mode_profile = 0
        wlan_connection_mode_temporary_profile = 1
        wlan_connection_mode_discovery_secure = 2
        wlan_connection_mode_discovery_unsecure = 3
        wlan_connection_mode_auto = 4
        wlan_connection_mode_invalid = 5
    End Enum
    
    Public Enum WLAN_REASON_CODE
        WLAN_REASON_CODE_SUCCESS = L2_REASON_CODE_SUCCESS
    '  general codes
        WLAN_REASON_CODE_UNKNOWN = L2_REASON_CODE_UNKNOWN
        WLAN_REASON_CODE_RANGE_SIZE = L2_REASON_CODE_GROUP_SIZE
        WLAN_REASON_CODE_BASE = L2_REASON_CODE_DOT11_AC_BASE
    '  range for Auto Config
        WLAN_REASON_CODE_AC_BASE = L2_REASON_CODE_DOT11_AC_BASE
        WLAN_REASON_CODE_AC_CONNECT_BASE = (WLAN_REASON_CODE_AC_BASE + WLAN_REASON_CODE_RANGE_SIZE / 2)
        WLAN_REASON_CODE_AC_END = (WLAN_REASON_CODE_AC_BASE + WLAN_REASON_CODE_RANGE_SIZE - 1)
    '  range for profile manager
    '  it has profile adding failure reason codes, but may not have
    '  connection reason codes
        WLAN_REASON_CODE_PROFILE_BASE = L2_REASON_CODE_PROFILE_BASE
        WLAN_REASON_CODE_PROFILE_CONNECT_BASE = (WLAN_REASON_CODE_PROFILE_BASE + WLAN_REASON_CODE_RANGE_SIZE / 2)
        WLAN_REASON_CODE_PROFILE_END = (WLAN_REASON_CODE_PROFILE_BASE + WLAN_REASON_CODE_RANGE_SIZE - 1)
    '  range for MSM
        WLAN_REASON_CODE_MSM_BASE = L2_REASON_CODE_DOT11_MSM_BASE
        WLAN_REASON_CODE_MSM_CONNECT_BASE = (WLAN_REASON_CODE_MSM_BASE + WLAN_REASON_CODE_RANGE_SIZE / 2)
        WLAN_REASON_CODE_MSM_END = (WLAN_REASON_CODE_MSM_BASE + WLAN_REASON_CODE_RANGE_SIZE - 1)
    '  range for MSMSEC
        WLAN_REASON_CODE_MSMSEC_BASE = L2_REASON_CODE_DOT11_SECURITY_BASE
        WLAN_REASON_CODE_MSMSEC_CONNECT_BASE = (WLAN_REASON_CODE_MSMSEC_BASE + WLAN_REASON_CODE_RANGE_SIZE / 2)
        WLAN_REASON_CODE_MSMSEC_END = (WLAN_REASON_CODE_MSMSEC_BASE + WLAN_REASON_CODE_RANGE_SIZE - 1)
    '  range for codes reserved for system usage
        WLAN_REASON_CODE_RESERVED_BASE = L2_REASON_CODE_RESERVED_BASE
        WLAN_REASON_CODE_RESERVED_END = (WLAN_REASON_CODE_RESERVED_BASE + WLAN_REASON_CODE_RANGE_SIZE - 1)
    '  AC network incompatible reason codes
        WLAN_REASON_CODE_NETWORK_NOT_COMPATIBLE = (WLAN_REASON_CODE_AC_BASE + 1)
        WLAN_REASON_CODE_PROFILE_NOT_COMPATIBLE = (WLAN_REASON_CODE_AC_BASE + 2)
    '  AC connect reason code
        WLAN_REASON_CODE_NO_AUTO_CONNECTION = (WLAN_REASON_CODE_AC_CONNECT_BASE + 1)
        WLAN_REASON_CODE_NOT_VISIBLE = (WLAN_REASON_CODE_AC_CONNECT_BASE + 2)
        WLAN_REASON_CODE_GP_DENIED = (WLAN_REASON_CODE_AC_CONNECT_BASE + 3)
        WLAN_REASON_CODE_USER_DENIED = (WLAN_REASON_CODE_AC_CONNECT_BASE + 4)
        WLAN_REASON_CODE_BSS_TYPE_NOT_ALLOWED = (WLAN_REASON_CODE_AC_CONNECT_BASE + 5)
        WLAN_REASON_CODE_IN_FAILED_LIST = (WLAN_REASON_CODE_AC_CONNECT_BASE + 6)
        WLAN_REASON_CODE_IN_BLOCKED_LIST = (WLAN_REASON_CODE_AC_CONNECT_BASE + 7)
        WLAN_REASON_CODE_SSID_LIST_TOO_LONG = (WLAN_REASON_CODE_AC_CONNECT_BASE + 8)
        WLAN_REASON_CODE_CONNECT_CALL_FAIL = (WLAN_REASON_CODE_AC_CONNECT_BASE + 9)
        WLAN_REASON_CODE_SCAN_CALL_FAIL = (WLAN_REASON_CODE_AC_CONNECT_BASE + 10)
        WLAN_REASON_CODE_NETWORK_NOT_AVAILABLE = (WLAN_REASON_CODE_AC_CONNECT_BASE + 11)
        WLAN_REASON_CODE_PROFILE_CHANGED_OR_DELETED = (WLAN_REASON_CODE_AC_CONNECT_BASE + 12)
        WLAN_REASON_CODE_KEY_MISMATCH = (WLAN_REASON_CODE_AC_CONNECT_BASE + 13)
        WLAN_REASON_CODE_USER_NOT_RESPOND = (WLAN_REASON_CODE_AC_CONNECT_BASE + 14)
        WLAN_REASON_CODE_AP_PROFILE_NOT_ALLOWED_FOR_CLIENT = (WLAN_REASON_CODE_AC_CONNECT_BASE + 15)
        WLAN_REASON_CODE_AP_PROFILE_NOT_ALLOWED = (WLAN_REASON_CODE_AC_CONNECT_BASE + 16)
        WLAN_REASON_CODE_HOTSPOT2_PROFILE_DENIED = (WLAN_REASON_CODE_AC_CONNECT_BASE + 17)
    '  Profile validation errors
        WLAN_REASON_CODE_INVALID_PROFILE_SCHEMA = (WLAN_REASON_CODE_PROFILE_BASE + 1)
        WLAN_REASON_CODE_PROFILE_MISSING = (WLAN_REASON_CODE_PROFILE_BASE + 2)
        WLAN_REASON_CODE_INVALID_PROFILE_NAME = (WLAN_REASON_CODE_PROFILE_BASE + 3)
        WLAN_REASON_CODE_INVALID_PROFILE_TYPE = (WLAN_REASON_CODE_PROFILE_BASE + 4)
        WLAN_REASON_CODE_INVALID_PHY_TYPE = (WLAN_REASON_CODE_PROFILE_BASE + 5)
        WLAN_REASON_CODE_MSM_SECURITY_MISSING = (WLAN_REASON_CODE_PROFILE_BASE + 6)
        WLAN_REASON_CODE_IHV_SECURITY_NOT_SUPPORTED = (WLAN_REASON_CODE_PROFILE_BASE + 7)
        WLAN_REASON_CODE_IHV_OUI_MISMATCH = (WLAN_REASON_CODE_PROFILE_BASE + 8)
    '  IHV OUI not present but there is IHV settings in profile
        WLAN_REASON_CODE_IHV_OUI_MISSING = (WLAN_REASON_CODE_PROFILE_BASE + 9)
    '  IHV OUI is present but there is no IHV settings in profile
        WLAN_REASON_CODE_IHV_SETTINGS_MISSING = (WLAN_REASON_CODE_PROFILE_BASE + 10)
    '  both/conflict MSMSec and IHV security settings exist in profile
        WLAN_REASON_CODE_CONFLICT_SECURITY = (WLAN_REASON_CODE_PROFILE_BASE + 11)
    '  no IHV or MSMSec security settings in profile
        WLAN_REASON_CODE_SECURITY_MISSING = (WLAN_REASON_CODE_PROFILE_BASE + 12)
        WLAN_REASON_CODE_INVALID_BSS_TYPE = (WLAN_REASON_CODE_PROFILE_BASE + 13)
        WLAN_REASON_CODE_INVALID_ADHOC_CONNECTION_MODE = (WLAN_REASON_CODE_PROFILE_BASE + 14)
        WLAN_REASON_CODE_NON_BROADCAST_SET_FOR_ADHOC = (WLAN_REASON_CODE_PROFILE_BASE + 15)
        WLAN_REASON_CODE_AUTO_SWITCH_SET_FOR_ADHOC = (WLAN_REASON_CODE_PROFILE_BASE + 16)
        WLAN_REASON_CODE_AUTO_SWITCH_SET_FOR_MANUAL_CONNECTION = (WLAN_REASON_CODE_PROFILE_BASE + 17)
        WLAN_REASON_CODE_IHV_SECURITY_ONEX_MISSING = (WLAN_REASON_CODE_PROFILE_BASE + 18)
        WLAN_REASON_CODE_PROFILE_SSID_INVALID = (WLAN_REASON_CODE_PROFILE_BASE + 19)
        WLAN_REASON_CODE_TOO_MANY_SSID = (WLAN_REASON_CODE_PROFILE_BASE + 20)
        WLAN_REASON_CODE_IHV_CONNECTIVITY_NOT_SUPPORTED = (WLAN_REASON_CODE_PROFILE_BASE + 21)
        WLAN_REASON_CODE_BAD_MAX_NUMBER_OF_CLIENTS_FOR_AP = (WLAN_REASON_CODE_PROFILE_BASE + 22)
        WLAN_REASON_CODE_INVALID_CHANNEL = (WLAN_REASON_CODE_PROFILE_BASE + 23)
        WLAN_REASON_CODE_OPERATION_MODE_NOT_SUPPORTED = (WLAN_REASON_CODE_PROFILE_BASE + 24)
        WLAN_REASON_CODE_AUTO_AP_PROFILE_NOT_ALLOWED = (WLAN_REASON_CODE_PROFILE_BASE + 25)
        WLAN_REASON_CODE_AUTO_CONNECTION_NOT_ALLOWED = (WLAN_REASON_CODE_PROFILE_BASE + 26)
        WLAN_REASON_CODE_HOTSPOT2_PROFILE_NOT_ALLOWED = (WLAN_REASON_CODE_PROFILE_BASE + 27)
    '  MSM network incompatible reasons
        WLAN_REASON_CODE_UNSUPPORTED_SECURITY_SET_BY_OS = (WLAN_REASON_CODE_MSM_BASE + 1)
        WLAN_REASON_CODE_UNSUPPORTED_SECURITY_SET = (WLAN_REASON_CODE_MSM_BASE + 2)
        WLAN_REASON_CODE_BSS_TYPE_UNMATCH = (WLAN_REASON_CODE_MSM_BASE + 3)
        WLAN_REASON_CODE_PHY_TYPE_UNMATCH = (WLAN_REASON_CODE_MSM_BASE + 4)
        WLAN_REASON_CODE_DATARATE_UNMATCH = (WLAN_REASON_CODE_MSM_BASE + 5)
    '  MSM connection failure reasons, to be defined
    '  failure reason codes
    '  user called to disconnect
        WLAN_REASON_CODE_USER_CANCELLED = (WLAN_REASON_CODE_MSM_CONNECT_BASE + 1)
    '  got disconnect while associating
        WLAN_REASON_CODE_ASSOCIATION_FAILURE = (WLAN_REASON_CODE_MSM_CONNECT_BASE + 2)
    '  timeout for association
        WLAN_REASON_CODE_ASSOCIATION_TIMEOUT = (WLAN_REASON_CODE_MSM_CONNECT_BASE + 3)
    '  pre-association security completed with failure
        WLAN_REASON_CODE_PRE_SECURITY_FAILURE = (WLAN_REASON_CODE_MSM_CONNECT_BASE + 4)
    '  fail to start post-association security
        WLAN_REASON_CODE_START_SECURITY_FAILURE = (WLAN_REASON_CODE_MSM_CONNECT_BASE + 5)
    '  post-association security completed with failure
        WLAN_REASON_CODE_SECURITY_FAILURE = (WLAN_REASON_CODE_MSM_CONNECT_BASE + 6)
    '  security watchdog timeout
        WLAN_REASON_CODE_SECURITY_TIMEOUT = (WLAN_REASON_CODE_MSM_CONNECT_BASE + 7)
    '  got disconnect from driver when roaming
        WLAN_REASON_CODE_ROAMING_FAILURE = (WLAN_REASON_CODE_MSM_CONNECT_BASE + 8)
    '  failed to start security for roaming
        WLAN_REASON_CODE_ROAMING_SECURITY_FAILURE = (WLAN_REASON_CODE_MSM_CONNECT_BASE + 9)
    '  failed to start security for adhoc-join
        WLAN_REASON_CODE_ADHOC_SECURITY_FAILURE = (WLAN_REASON_CODE_MSM_CONNECT_BASE + 10)
    '  got disconnection from driver
        WLAN_REASON_CODE_DRIVER_DISCONNECTED = (WLAN_REASON_CODE_MSM_CONNECT_BASE + 11)
    '  driver operation failed
        WLAN_REASON_CODE_DRIVER_OPERATION_FAILURE = (WLAN_REASON_CODE_MSM_CONNECT_BASE + 12)
    '  Ihv service is not available
        WLAN_REASON_CODE_IHV_NOT_AVAILABLE = (WLAN_REASON_CODE_MSM_CONNECT_BASE + 13)
    '  Response from ihv timed out
        WLAN_REASON_CODE_IHV_NOT_RESPONDING = (WLAN_REASON_CODE_MSM_CONNECT_BASE + 14)
    '  Timed out waiting for driver to disconnect
        WLAN_REASON_CODE_DISCONNECT_TIMEOUT = (WLAN_REASON_CODE_MSM_CONNECT_BASE + 15)
    '  An internal error prevented the operation from being completed.
        WLAN_REASON_CODE_INTERNAL_FAILURE = (WLAN_REASON_CODE_MSM_CONNECT_BASE + 16)
    '  UI Request timed out.
        WLAN_REASON_CODE_UI_REQUEST_TIMEOUT = (WLAN_REASON_CODE_MSM_CONNECT_BASE + 17)
    '  Roaming too often, post security is not completed after 5 times.
        WLAN_REASON_CODE_TOO_MANY_SECURITY_ATTEMPTS = (WLAN_REASON_CODE_MSM_CONNECT_BASE + 18)
    '  Failed to start AP
        WLAN_REASON_CODE_AP_STARTING_FAILURE = (WLAN_REASON_CODE_MSM_CONNECT_BASE + 19)
    '  Failed to connect because no connectable Access Point was visible
        WLAN_REASON_CODE_NO_VISIBLE_AP = (WLAN_REASON_CODE_MSM_CONNECT_BASE + 20)
    '  MSMSEC reason codes
        WLAN_REASON_CODE_MSMSEC_MIN = WLAN_REASON_CODE_MSMSEC_BASE
    '  Key index specified is not valid
        WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_KEY_INDEX = (WLAN_REASON_CODE_MSMSEC_BASE + 1)
    '  Key required, PSK present
        WLAN_REASON_CODE_MSMSEC_PROFILE_PSK_PRESENT = (WLAN_REASON_CODE_MSMSEC_BASE + 2)
    '  Invalid key length
        WLAN_REASON_CODE_MSMSEC_PROFILE_KEY_LENGTH = (WLAN_REASON_CODE_MSMSEC_BASE + 3)
    '  Invalid PSK length
        WLAN_REASON_CODE_MSMSEC_PROFILE_PSK_LENGTH = (WLAN_REASON_CODE_MSMSEC_BASE + 4)
    '  No auth/cipher specified
        WLAN_REASON_CODE_MSMSEC_PROFILE_NO_AUTH_CIPHER_SPECIFIED = (WLAN_REASON_CODE_MSMSEC_BASE + 5)
    '  Too many auth/cipher specified
        WLAN_REASON_CODE_MSMSEC_PROFILE_TOO_MANY_AUTH_CIPHER_SPECIFIED = (WLAN_REASON_CODE_MSMSEC_BASE + 6)
    '  Profile contains duplicate auth/cipher
        WLAN_REASON_CODE_MSMSEC_PROFILE_DUPLICATE_AUTH_CIPHER = (WLAN_REASON_CODE_MSMSEC_BASE + 7)
    '  Profile raw data is invalid (1x or key data)
        WLAN_REASON_CODE_MSMSEC_PROFILE_RAWDATA_INVALID = (WLAN_REASON_CODE_MSMSEC_BASE + 8)
    '  Invalid auth/cipher combination
        WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_AUTH_CIPHER = (WLAN_REASON_CODE_MSMSEC_BASE + 9)
    '  802.1x disabled when it's required to be enabled
        WLAN_REASON_CODE_MSMSEC_PROFILE_ONEX_DISABLED = (WLAN_REASON_CODE_MSMSEC_BASE + 10)
    '  802.1x enabled when it's required to be disabled
        WLAN_REASON_CODE_MSMSEC_PROFILE_ONEX_ENABLED = (WLAN_REASON_CODE_MSMSEC_BASE + 11)
        WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_PMKCACHE_MODE = (WLAN_REASON_CODE_MSMSEC_BASE + 12)
        WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_PMKCACHE_SIZE = (WLAN_REASON_CODE_MSMSEC_BASE + 13)
        WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_PMKCACHE_TTL = (WLAN_REASON_CODE_MSMSEC_BASE + 14)
        WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_PREAUTH_MODE = (WLAN_REASON_CODE_MSMSEC_BASE + 15)
        WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_PREAUTH_THROTTLE = (WLAN_REASON_CODE_MSMSEC_BASE + 16)
    '  PreAuth enabled when PMK cache is disabled
        WLAN_REASON_CODE_MSMSEC_PROFILE_PREAUTH_ONLY_ENABLED = (WLAN_REASON_CODE_MSMSEC_BASE + 17)
    '  Capability matching failed at network
        WLAN_REASON_CODE_MSMSEC_CAPABILITY_NETWORK = (WLAN_REASON_CODE_MSMSEC_BASE + 18)
    '  Capability matching failed at NIC
        WLAN_REASON_CODE_MSMSEC_CAPABILITY_NIC = (WLAN_REASON_CODE_MSMSEC_BASE + 19)
    '  Capability matching failed at profile
        WLAN_REASON_CODE_MSMSEC_CAPABILITY_PROFILE = (WLAN_REASON_CODE_MSMSEC_BASE + 20)
    '  Network does not support specified discovery type
        WLAN_REASON_CODE_MSMSEC_CAPABILITY_DISCOVERY = (WLAN_REASON_CODE_MSMSEC_BASE + 21)
    '  Passphrase contains invalid character
        WLAN_REASON_CODE_MSMSEC_PROFILE_PASSPHRASE_CHAR = (WLAN_REASON_CODE_MSMSEC_BASE + 22)
    '  Key material contains invalid character
        WLAN_REASON_CODE_MSMSEC_PROFILE_KEYMATERIAL_CHAR = (WLAN_REASON_CODE_MSMSEC_BASE + 23)
    '  Wrong key type specified for the auth/cipher pair
        WLAN_REASON_CODE_MSMSEC_PROFILE_WRONG_KEYTYPE = (WLAN_REASON_CODE_MSMSEC_BASE + 24)
    '  "Mixed cell" suspected (AP not beaconing privacy, we have privacy enabled profile)
        WLAN_REASON_CODE_MSMSEC_MIXED_CELL = (WLAN_REASON_CODE_MSMSEC_BASE + 25)
    '  Auth timers or number of timeouts in profile is incorrect
        WLAN_REASON_CODE_MSMSEC_PROFILE_AUTH_TIMERS_INVALID = (WLAN_REASON_CODE_MSMSEC_BASE + 26)
    '  Group key update interval in profile is incorrect
        WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_GKEY_INTV = (WLAN_REASON_CODE_MSMSEC_BASE + 27)
    '  "Transition network" suspected, trying legacy 802.11 security
        WLAN_REASON_CODE_MSMSEC_TRANSITION_NETWORK = (WLAN_REASON_CODE_MSMSEC_BASE + 28)
    '  Key contains characters which do not map to ASCII
        WLAN_REASON_CODE_MSMSEC_PROFILE_KEY_UNMAPPED_CHAR = (WLAN_REASON_CODE_MSMSEC_BASE + 29)
    '  Capability matching failed at profile (auth not found)
        WLAN_REASON_CODE_MSMSEC_CAPABILITY_PROFILE_AUTH = (WLAN_REASON_CODE_MSMSEC_BASE + 30)
    '  Capability matching failed at profile (cipher not found)
        WLAN_REASON_CODE_MSMSEC_CAPABILITY_PROFILE_CIPHER = (WLAN_REASON_CODE_MSMSEC_BASE + 31)
    '  Safe mode value is invalid
        WLAN_REASON_CODE_MSMSEC_PROFILE_SAFE_MODE = (WLAN_REASON_CODE_MSMSEC_BASE + 32)
    '  Profile requires safe mode, not supported by NIC
        WLAN_REASON_CODE_MSMSEC_CAPABILITY_PROFILE_SAFE_MODE_NIC = (WLAN_REASON_CODE_MSMSEC_BASE + 33)
    '  Profile requires safe mode, not supported by network
        WLAN_REASON_CODE_MSMSEC_CAPABILITY_PROFILE_SAFE_MODE_NW = (WLAN_REASON_CODE_MSMSEC_BASE + 34)
    '  Profile has unsupported auth
        WLAN_REASON_CODE_MSMSEC_PROFILE_UNSUPPORTED_AUTH = (WLAN_REASON_CODE_MSMSEC_BASE + 35)
    '  Profile has unsupported cipher
        WLAN_REASON_CODE_MSMSEC_PROFILE_UNSUPPORTED_CIPHER = (WLAN_REASON_CODE_MSMSEC_BASE + 36)
    ' If Network requires MFP and NIC does not suppport MFP
        WLAN_REASON_CODE_MSMSEC_CAPABILITY_MFP_NW_NIC = (WLAN_REASON_CODE_MSMSEC_BASE + 37)
    '  Failed to queue UI request
        WLAN_REASON_CODE_MSMSEC_UI_REQUEST_FAILURE = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 1)
    '  802.1x authentication did not start within configured time
        WLAN_REASON_CODE_MSMSEC_AUTH_START_TIMEOUT = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 2)
    '  802.1x authentication did not complete within configured time
        WLAN_REASON_CODE_MSMSEC_AUTH_SUCCESS_TIMEOUT = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 3)
    '  Dynamic key exchange did not start within configured time
        WLAN_REASON_CODE_MSMSEC_KEY_START_TIMEOUT = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 4)
    '  Dynamic key exchange did not succeed within configured time
        WLAN_REASON_CODE_MSMSEC_KEY_SUCCESS_TIMEOUT = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 5)
    '  Message 3 of 4 way handshake has no key data (RSN/WPA)
        WLAN_REASON_CODE_MSMSEC_M3_MISSING_KEY_DATA = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 6)
    '  Message 3 of 4 way handshake has no IE (RSN/WPA)
        WLAN_REASON_CODE_MSMSEC_M3_MISSING_IE = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 7)
    '  Message 3 of 4 way handshake has no Group Key (RSN)
        WLAN_REASON_CODE_MSMSEC_M3_MISSING_GRP_KEY = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 8)
    '  Matching security capabilities of IE in M3 failed (RSN/WPA)
        WLAN_REASON_CODE_MSMSEC_PR_IE_MATCHING = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 9)
    '  Matching security capabilities of Secondary IE in M3 failed (RSN)
        WLAN_REASON_CODE_MSMSEC_SEC_IE_MATCHING = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 10)
    '  Required a pairwise key but AP configured only group keys
        WLAN_REASON_CODE_MSMSEC_NO_PAIRWISE_KEY = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 11)
    '  Message 1 of group key handshake has no key data (RSN/WPA)
        WLAN_REASON_CODE_MSMSEC_G1_MISSING_KEY_DATA = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 12)
    '  Message 1 of group key handshake has no group key
        WLAN_REASON_CODE_MSMSEC_G1_MISSING_GRP_KEY = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 13)
    '  AP reset secure bit after connection was secured
        WLAN_REASON_CODE_MSMSEC_PEER_INDICATED_INSECURE = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 14)
    '  802.1x indicated there is no authenticator but profile requires 802.1x
        WLAN_REASON_CODE_MSMSEC_NO_AUTHENTICATOR = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 15)
    '  Plumbing settings to NIC failed
        WLAN_REASON_CODE_MSMSEC_NIC_FAILURE = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 16)
    '  Operation was cancelled by caller
        WLAN_REASON_CODE_MSMSEC_CANCELLED = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 17)
    '  Key was in incorrect format
        WLAN_REASON_CODE_MSMSEC_KEY_FORMAT = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 18)
    '  Security downgrade detected
        WLAN_REASON_CODE_MSMSEC_DOWNGRADE_DETECTED = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 19)
    '  PSK mismatch suspected
        WLAN_REASON_CODE_MSMSEC_PSK_MISMATCH_SUSPECTED = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 20)
    '  Forced failure because connection method was not secure
        WLAN_REASON_CODE_MSMSEC_FORCED_FAILURE = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 21)
    '  Message 3 of 4 way handshake contains too many RSN IE (RSN)
        WLAN_REASON_CODE_MSMSEC_M3_TOO_MANY_RSNIE = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 22)
    '  Message 2 of 4 way handshake has no key data (RSN Adhoc)
        WLAN_REASON_CODE_MSMSEC_M2_MISSING_KEY_DATA = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 23)
    '  Message 2 of 4 way handshake has no IE (RSN Adhoc)
        WLAN_REASON_CODE_MSMSEC_M2_MISSING_IE = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 24)
        WLAN_REASON_CODE_MSMSEC_AUTH_WCN_COMPLETED = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 25)
    '  Message 3 of 4 way handshake has no Mgmt Group Key (RSN)
        WLAN_REASON_CODE_MSMSEC_M3_MISSING_MGMT_GRP_KEY = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 26)
    '  Message 1 of group key handshake has no group mgmt key
        WLAN_REASON_CODE_MSMSEC_G1_MISSING_MGMT_GRP_KEY = (WLAN_REASON_CODE_MSMSEC_CONNECT_BASE + 27)
        WLAN_REASON_CODE_MSMSEC_MAX = WLAN_REASON_CODE_MSMSEC_END
    End Enum
    
    Public Enum WlanAvailableNetworkFlags
        WLAN_AVAILABLE_NETWORK_CONNECTED = &H00000001  ' This network is currently connected
        WLAN_AVAILABLE_NETWORK_HAS_PROFILE = &H00000002  ' There is a profile for this network
        WLAN_AVAILABLE_NETWORK_CONSOLE_USER_PROFILE = &H00000004  ' The profile is the active console user's per user profile
        WLAN_AVAILABLE_NETWORK_INTERWORKING_SUPPORTED = &H00000008  ' Interworking is supported
        WLAN_AVAILABLE_NETWORK_HOTSPOT2_ENABLED = &H00000010  ' Hotspot2 is enabled
        WLAN_AVAILABLE_NETWORK_ANQP_SUPPORTED = &H00000020  ' ANQP is supported
        WLAN_AVAILABLE_NETWORK_HOTSPOT2_DOMAIN = &H00000040  ' Domain network
        WLAN_AVAILABLE_NETWORK_HOTSPOT2_ROAMING = &H00000080  ' Roaming network
        WLAN_AVAILABLE_NETWORK_AUTO_CONNECT_FAILED = &H00000100  ' This network failed to connect
    End Enum
    
    Public Enum WlanAvailableNetworkListFlags
        WLAN_AVAILABLE_NETWORK_INCLUDE_ALL_ADHOC_PROFILES = &H00000001
    '  include all hidden network profiles in the available network list, regardless they are visible or not
        WLAN_AVAILABLE_NETWORK_INCLUDE_ALL_MANUAL_HIDDEN_PROFILES = &H00000002
    End Enum
    
    Public Const DOT11_RATE_SET_MAX_LENGTH = 126
    Public Type WLAN_RATE_SET
        uRateSetLength As Long
        usRateSet(0 To (DOT11_RATE_SET_MAX_LENGTH - 1)) As Integer
    End Type
    Public Enum WLAN_SIGNAL_QUALITY
        [_]
    End Enum
    Public Const WLAN_MAX_PHY_TYPE_NUMBER = 8
	Public Type WLAN_AVAILABLE_NETWORK
		strProfileName (0 To (WLAN_MAX_NAME_LENGTH - 1)) As Integer
		dot11Ssid As DOT11_SSID
		dot11BssType As DOT11_BSS_TYPE
		uNumberOfBssids As Long
		bNetworkConnectable As BOOL
		wlanNotConnectableReason As WLAN_REASON_CODE
		uNumberOfPhyTypes As Long
		dot11PhyTypes (0 To (WLAN_MAX_PHY_TYPE_NUMBER - 1)) As DOT11_PHY_TYPE
		' bMorePhyTypes is set to TRUE if the PHY types for the network
		' exceeds WLAN_MAX_PHY_TYPE_NUMBER.
		' In this case, uNumerOfPhyTypes is WLAN_MAX_PHY_TYPE_NUMBER and the
		' first WLAN_MAX_PHY_TYPE_NUMBER PHY types are returned.
		bMorePhyTypes As BOOL
		wlanSignalQuality As WLAN_SIGNAL_QUALITY
		bSecurityEnabled As BOOL
		dot11DefaultAuthAlgorithm As DOT11_AUTH_ALGORITHM
		dot11DefaultCipherAlgorithm As DOT11_CIPHER_ALGORITHM
		dwFlags As WlanAvailableNetworkFlags
		dwReserved As Long
	End Type
    Public Const DOT11_HESSID_LENGTH = 6
    Public Type WLAN_AVAILABLE_NETWORK_V2
        strProfileName(0 To (WLAN_MAX_NAME_LENGTH - 1)) As Integer
        dot11Ssid As DOT11_SSID
        dot11BssType As DOT11_BSS_TYPE
        uNumberOfBssids As Long
        bNetworkConnectable As BOOL
        wlanNotConnectableReason As WLAN_REASON_CODE
        uNumberOfPhyTypes As Long
        dot11PhyTypes(0 To (WLAN_MAX_PHY_TYPE_NUMBER - 1)) As DOT11_PHY_TYPE
        ' bMorePhyTypes is set to TRUE if the PHY types for the network
        ' exceeds WLAN_MAX_PHY_TYPE_NUMBER.
        ' In this case, uNumerOfPhyTypes is WLAN_MAX_PHY_TYPE_NUMBER and the
        ' first WLAN_MAX_PHY_TYPE_NUMBER PHY types are returned.
        bMorePhyTypes As BOOL
        wlanSignalQuality As WLAN_SIGNAL_QUALITY
        bSecurityEnabled As BOOL
        dot11DefaultAuthAlgorithm As DOT11_AUTH_ALGORITHM
        dot11DefaultCipherAlgorithm As DOT11_CIPHER_ALGORITHM
        dwFlags As Long
        ' V2 fields
        AccessNetworkOptions As DOT11_ACCESSNETWORKOPTIONS
        dot11HESSID(0 To (DOT11_HESSID_LENGTH - 1)) As Byte 'DOT11_HESSID
        VenueInfo As DOT11_VENUEINFO
        dwReserved As Long
    End Type
    [Description("See source for description of usCapabilityInformation.")]
    Public Type WLAN_BSS_ENTRY
        dot11Ssid As DOT11_SSID
        uPhyId As Long
        dot11Bssid As DOT11_MAC_ADDRESS
        dot11BssType As DOT11_BSS_TYPE
        dot11BssPhyType As DOT11_PHY_TYPE
        lRssi As Long
        uLinkQuality As Long
        bInRegDomain As Byte
        usBeaconPeriod As Integer
        ullTimestamp As LongLong
        ullHostTimestamp As LongLong
        [Description("See source for description of usCapabilityInformation.")]
        usCapabilityInformation As Integer
        ' usCapabilityInformation: The value of the Capability Information field from the 802.11 Beacon or 
        '                          Probe Response frame received by the wireless LAN interface. This value 
        '                          is a set of bit flags defining the capability.
        ' This member can be one or more of the following values.
        ' ESS        bit 0
            ' An extended service set. A set of one or more interconnected basic service sets (BSSs) and 
            ' integrated local area networks (LANs) that appears as a single BSS to the logical link control 
            ' layer at any station associated with one of those BSSs.
            ' An AP set the ESS subfield to 1 and the IBSS subfield to 0 within transmitted Beacon or Probe 
            ' Response frames. A peer station within an IBSS (ad hoc network) sets the ESS subfield to 0 and 
            ' the IBSS subfield to 1 in transmitted Beacon or Probe Response frames.
        ' IBSS  bit 1
            ' An independent basic service set. A BSS that forms a self-contained network, and in which no 
            ' access to a distribution system (DS) is available (an ad hoc network).
            ' An AP sets the ESS subfield to 1 and the IBSS subfield to 0 within transmitted Beacon or Probe 
            ' Response frames. A peer station within an IBSS (ad hoc network) sets the ESS subfield to 0 and 
            ' the IBSS subfield to 1 in transmitted Beacon or Probe Response frames.
        ' CF-Pollable  bit 2
            ' A value that indicates if the AP or peer station is pollable.
        ' CF Poll Request  bit 3
            ' A value that indicates how the AP or peer station handles poll requests.
        ' Privacy  bit 4
            ' A value that indicates if encryption is required for all data frames.
            ' An AP sets the Privacy subfield to 1 within transmitted Beacon and Probe Response frames if WEP, 
            ' WPA, or WPA2 encryption is required for all data type frames exchanged within the BSS. If WEP, WPA, 
            ' or WPA2 encryption is not required, the Privacy subfield is set to 0.
            ' A peer station within and IBSS sets the Privacy subfield to 1 within transmitted Beacon and Probe 
            ' Response frames if WEP, WPA, or WPA2 encryption is required for all data type frames exchanged 
            ' within the IBSS. If WEP, WPA, or WPA2 encryption is not required, the Privacy subfield is set to 0.
        ulChCenterFrequency As Long
        wlanRateSet As WLAN_RATE_SET
        ' the beginning of the IE blob
        ' the offset is w.r.t. the beginning of the entry
        ulIeOffset As Long
        ' size of the IE blob
        ulIeSize As Long
    End Type
    
    [Description("⚠️ **WARNING:** Cannot be used as-is due to SAFEARRAY substitution; fill number info, redim, then copy into (0). " & vbCrLf & "Also available is a buffered custom version supporting up to 512 networks: WLAN_BSS_LIST_buf ")]
    Public Type WLAN_BSS_LIST
        ' The total size of the data in BYTE
        dwTotalSize As Long
        dwNumberOfItems As Long
        wlanBssEntries() As WLAN_BSS_ENTRY
    End Type
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array. LenB is invalid.")]
    Public Type WLAN_BSS_LIST_buf
        ' The total size of the data in BYTE
        dwTotalSize As Long
        dwNumberOfItems As Long
        wlanBssEntries(523) As WLAN_BSS_ENTRY
    End Type
    
    Public Enum WLAN_INTERFACE_STATE
        wlan_interface_state_not_ready
        wlan_interface_state_connected
        wlan_interface_state_ad_hoc_network_formed
        wlan_interface_state_disconnecting
        wlan_interface_state_disconnected
        wlan_interface_state_associating
        wlan_interface_state_discovering
        wlan_interface_state_authenticating
    End Enum
    
    Public Enum WLAN_ADHOC_NETWORK_STATE
        wlan_adhoc_network_state_formed = 0
        wlan_adhoc_network_state_connected
    End Enum
    
    Public Type WLAN_INTERFACE_INFO
        InterfaceGuid As UUID
        strInterfaceDescription(0 To (WLAN_MAX_NAME_LENGTH - 1)) As Integer
        isState As WLAN_INTERFACE_STATE
    End Type
    
    Public Type WLAN_ASSOCIATION_ATTRIBUTES
        dot11Ssid As DOT11_SSID
        dot11BssType As DOT11_BSS_TYPE
        dot11Bssid As DOT11_MAC_ADDRESS
        dot11PhyType As DOT11_PHY_TYPE
        uDot11PhyIndex As Long
        wlanSignalQuality As WLAN_SIGNAL_QUALITY
        ulRxRate As Long
        ulTxRate As Long
    End Type
    
    Public Type WLAN_SECURITY_ATTRIBUTES
        bSecurityEnabled As BOOL
        bOneXEnabled As BOOL
        dot11AuthAlgorithm As DOT11_AUTH_ALGORITHM
        dot11CipherAlgorithm As DOT11_CIPHER_ALGORITHM
    End Type
    
    Public Type WLAN_QOS_CAPABILITIES
        bMSCSSupported As BOOL
        bDSCPToUPMappingSupported As BOOL
        bSCSSupported As BOOL
        bDSCPPolicySupported As BOOL
    End Type
    
    Public Type WLAN_CONNECTION_QOS_INFO
        peerCapabilities As WLAN_QOS_CAPABILITIES
        bMSCSConfigured As BOOL
        bDSCPToUPMappingConfigured As BOOL
        ulNumConfiguredSCSStreams As Long
        ulNumConfiguredDSCPPolicies As Long
    End Type
    
    Public Type WLAN_QOS_INFO
        ' QoS capabilities of interface
        interfaceCapabilities As WLAN_QOS_CAPABILITIES
        ' bConnected indicates whether or not there is an established connection and therefore whether the connection
        ' QoS info is present in connectionQoSInfo.
        bConnected As BOOL
        ' QoS info of the current connection. Meaningful only if bConnected is true; otherwise, if bConnected is false,
        ' connectionQoSInfo will be zeroed and should be ignored.
        connectionQoSInfo As WLAN_CONNECTION_QOS_INFO
    End Type
    
    Public Type WLAN_CONNECTION_ATTRIBUTES
        isState As WLAN_INTERFACE_STATE
        wlanConnectionMode As WLAN_CONNECTION_MODE
        strProfileName(0 To (WLAN_MAX_NAME_LENGTH - 1)) As Integer
        wlanAssociationAttributes As WLAN_ASSOCIATION_ATTRIBUTES
        wlanSecurityAttributes As WLAN_SECURITY_ATTRIBUTES
    End Type
    
    Public Type WLAN_REALTIME_CONNECTION_QUALITY_LINK_INFO
        ucLinkID As Byte
        ulChannelCenterFrequencyMhz As Long
        ulBandwidth As Long
        lRssi As Long
        wlanRateSet As WLAN_RATE_SET
    End Type
    
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid." & vbCrLf & "Also available is a custom SAFEARRAY version if needed for larger versions: WLAN_REALTIME_CONNECTION_QUALITY_sa")]
    Public Type WLAN_REALTIME_CONNECTION_QUALITY
        dot11PhyType As DOT11_PHY_TYPE
        ulLinkQuality As Long
        ulRxRate As Long
        ulTxRate As Long
        bIsMLOConnection As BOOL
        ulNumLinks As Long
        ' Array of size ulNumLinks
        linksInfo(0 To 512) As WLAN_REALTIME_CONNECTION_QUALITY_LINK_INFO
    End Type
    
    [Description("⚠️ **WARNING:** Cannot be used as-is due to SAFEARRAY substitution; fill number info, redim, then copy into (0).")]
    Public Type WLAN_REALTIME_CONNECTION_QUALITY_sa
        dot11PhyType As DOT11_PHY_TYPE
        ulLinkQuality As Long
        ulRxRate As Long
        ulTxRate As Long
        bIsMLOConnection As BOOL
        ulNumLinks As Long
        ' Array of size ulNumLinks
        linksInfo() As WLAN_REALTIME_CONNECTION_QUALITY_LINK_INFO
    End Type
        
    Public Enum DOT11_RADIO_STATE
        dot11_radio_state_unknown = 0
        dot11_radio_state_on
        dot11_radio_state_off
    End Enum
    
    Public Const WLAN_MAX_PHY_INDEX = 64
	Public Type WLAN_PHY_RADIO_STATE
		dwPhyIndex As Long
		dot11SoftwareRadioState As DOT11_RADIO_STATE
		dot11HardwareRadioState As DOT11_RADIO_STATE
	End Type
    Public Type WLAN_RADIO_STATE
        dwNumberOfPhys As Long
        PhyRadioState(0 To (WLAN_MAX_PHY_INDEX - 1)) As WLAN_PHY_RADIO_STATE
    End Type
    
    Public Enum WLAN_OPERATIONAL_STATE
        wlan_operational_state_unknown = 0
        wlan_operational_state_off
        wlan_operational_state_on
        wlan_operational_state_going_off
        wlan_operational_state_going_on
    End Enum
        
    Public Enum WLAN_INTERFACE_TYPE
        wlan_interface_type_emulated_802_11 = 0
        wlan_interface_type_native_802_11
        wlan_interface_type_invalid
    End Enum
    
    Public Type WLAN_INTERFACE_CAPABILITY
        interfaceType As WLAN_INTERFACE_TYPE
        bDot11DSupported As BOOL
        dwMaxDesiredSsidListSize As Long
        dwMaxDesiredBssidListSize As Long
        dwNumberOfSupportedPhys As Long
        dot11PhyTypes(0 To (WLAN_MAX_PHY_INDEX - 1)) As DOT11_PHY_TYPE
    End Type
    
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid." & vbCrLf & "Also available is a custom SAFEARRAY version if needed for larger versions: WLAN_AUTH_CIPHER_PAIR_LIST_sa")]
    Public Type WLAN_AUTH_CIPHER_PAIR_LIST
        dwNumberOfItems As Long
        '#ifdef __midl
        '    [unique, size_is(dwNumberOfItems)] DOT11_AUTH_CIPHER_PAIR pAuthCipherPairList[*];
        '#else
        pAuthCipherPairList(0 To 1023) As DOT11_AUTH_CIPHER_PAIR
        '#endif
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is due to SAFEARRAY substitution; fill number info, redim, then copy into (0).")]
    Public Type WLAN_AUTH_CIPHER_PAIR_LIST_sa
        dwNumberOfItems As Long
        '#ifdef __midl
        '    [unique, size_is(dwNumberOfItems)] DOT11_AUTH_CIPHER_PAIR pAuthCipherPairList[*];
        '#else
        pAuthCipherPairList() As DOT11_AUTH_CIPHER_PAIR
        '#endif
    End Type
    
    Public Type DOT11_COUNTRY_OR_REGION_STRING
        s(2) As Byte
    End Type
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid.")]
    Public Type WLAN_COUNTRY_OR_REGION_STRING_LIST
        dwNumberOfItems As Long
        '#ifdef __midl
        '    [unique, size_is(dwNumberOfItems)] DOT11_COUNTRY_OR_REGION_STRING pCountryOrRegionStringList[*];
        '#else
        pCountryOrRegionStringList(0 To 255) As DOT11_COUNTRY_OR_REGION_STRING
        '#endif
    End Type
    
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid." & vbCrLf & "Also available is a custom SAFEARRAY version if needed for larger versions: WLAN_PROFILE_INFO_LIST_sa")]
    Public Type WLAN_PROFILE_INFO_LIST
        dwNumberOfItems As Long
        dwIndex As Long
        '#ifdef __midl
        '    [unique, size_is(dwNumberOfItems)] WLAN_PROFILE_INFO ProfileInfo[*];
        '#else
        ProfileInfo(0 To 512) As WLAN_PROFILE_INFO
        '#endif
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is due to SAFEARRAY substitution; fill number info, redim, then copy into (0).")]
    Public Type WLAN_PROFILE_INFO_LIST_sa
        dwNumberOfItems As Long
        dwIndex As Long
        '#ifdef __midl
        '    [unique, size_is(dwNumberOfItems)] WLAN_PROFILE_INFO ProfileInfo[*];
        '#else
        ProfileInfo() As WLAN_PROFILE_INFO
        '#endif
    End Type
    
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid." & vbCrLf & "Also available is a custom SAFEARRAY version if needed for larger versions: WLAN_AVAILABLE_NETWORK_LIST_sa")]
    Public Type WLAN_AVAILABLE_NETWORK_LIST
        dwNumberOfItems As Long
        dwIndex As Long
        '#ifdef __midl
        '   [unique, size_is(dwNumberOfItems)] WLAN_AVAILABLE_NETWORK Network[*];
        '#else
        Network(0 To 511) As WLAN_AVAILABLE_NETWORK
        '#endif
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is due to SAFEARRAY substitution; fill number info, redim, then copy into (0).")]
    Public Type WLAN_AVAILABLE_NETWORK_LIST_sa
        dwNumberOfItems As Long
        dwIndex As Long
        '#ifdef __midl
        '   [unique, size_is(dwNumberOfItems)] WLAN_AVAILABLE_NETWORK Network[*];
        '#else
        Network() As WLAN_AVAILABLE_NETWORK
        '#endif
    End Type
    
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid." & vbCrLf & "Also available is a custom SAFEARRAY version if needed for larger versions: WLAN_AVAILABLE_NETWORK_LIST_V2_sa")]
    Public Type WLAN_AVAILABLE_NETWORK_LIST_V2
        dwNumberOfItems As Long
        dwIndex As Long
        Network(0 To 511) As WLAN_AVAILABLE_NETWORK_V2
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is due to SAFEARRAY substitution; fill number info, redim, then copy into (0).")]
    Public Type WLAN_AVAILABLE_NETWORK_LIST_V2_sa
        dwNumberOfItems As Long
        dwIndex As Long
        Network() As WLAN_AVAILABLE_NETWORK_V2
    End Type
    
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid." & vbCrLf & "Also available is a custom SAFEARRAY version if needed for larger versions: WLAN_INTERFACE_INFO_LIST_sa")]
    Public Type WLAN_INTERFACE_INFO_LIST
        dwNumberOfItems As Long
        dwIndex As Long
        InterfaceInfo(0 To 511) As WLAN_INTERFACE_INFO
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is due to SAFEARRAY substitution; fill number info, redim, then copy into (0).")]
    Public Type WLAN_INTERFACE_INFO_LIST_sa
        dwNumberOfItems As Long
        dwIndex As Long
        InterfaceInfo() As WLAN_INTERFACE_INFO
    End Type
    
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid." & vbCrLf & "Also available is a custom SAFEARRAY version if needed for larger versions: DOT11_NETWORK_LIST_sa")]
    Public Type DOT11_NETWORK_LIST
        dwNumberOfItems As Long
        dwIndex As Long
        Network(0 To 511) As DOT11_NETWORK
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is due to SAFEARRAY substitution; fill number info, redim, then copy into (0).")]
    Public Type DOT11_NETWORK_LIST_sa
        dwNumberOfItems As Long
        dwIndex As Long
        Network() As DOT11_NETWORK
    End Type
    
    Public Enum WLAN_POWER_SETTING
        wlan_power_setting_no_saving = 0
        wlan_power_setting_low_saving
        wlan_power_setting_medium_saving
        wlan_power_setting_maximum_saving
        wlan_power_setting_invalid
    End Enum
    
    Public Enum WlanConnectionFlags
	' // Wlan connection flags used in WLAN_CONNECTION_PARAMETERS
	' // The network to be connected is a hidden network
	' // This flag cannnot be set if the network to connected is an ad hoc network
        WLAN_CONNECTION_HIDDEN_NETWORK = &H00000001
    '  Only join an ad hoc network, do not form it if it doesn't exist
    '  This flag cannnot be set if the network to connected is not an ad hoc network
        WLAN_CONNECTION_ADHOC_JOIN_ONLY = &H00000002
    '  Ignore the privacy bit for the association. This is used to support easy config.
    '  This flag is valid only for wlan_connection_mode_temporary_profile and infrastructure networks.
        WLAN_CONNECTION_IGNORE_PRIVACY_BIT = &H00000004
    '  Exempt EAPOL traffic from encryption/decryption. This is used to
    '  support an application that needs to send EAPOL traffic in non-802.1x WEP
    '  networks. This flag is valid only for wlan_connection_mode_temporary_profile
    '  in infrastructure networks when using authentication algorithm Open and
    '  Cipher WEP with 802.1x disabled
        WLAN_CONNECTION_EAPOL_PASSTHROUGH = &H00000008
    '  Automatically persist discovery profile on successful connection completion.
    '  This flag is only valid for wlan_connection_mode_discovery_secure or
    '  wlan_connection_mode_discovery_unsecure. The profile will be saved as an all
    '  user profile, with the name generated from the SSID using WlanUtf8SsidToDisplayName.
    '  If there is already a profile with the same name, a number will be appended
    '  to the end of the profile name. The profile will be saved with manual connection mode,
    '  unless WLAN_CONNECTION_PERSIST_DISCOVERY_PROFILE_CONNECTION_MODE_AUTO is also specified.
        WLAN_CONNECTION_PERSIST_DISCOVERY_PROFILE = &H00000010
    '  To be used in conjunction with WLAN_CONNECTION_PERSIST_DISCOVERY_PROFILE. The
    '  discovery profile will be persisted with automatic connection mode.
        WLAN_CONNECTION_PERSIST_DISCOVERY_PROFILE_CONNECTION_MODE_AUTO = &H00000020
    '  To be used in conjunction with WLAN_CONNECTION_PERSIST_DISCOVERY_PROFILE. The
    '  discovery profile will be persisted and attempt to overwrite an existing profile
    '  with the same name.
        WLAN_CONNECTION_PERSIST_DISCOVERY_PROFILE_OVERWRITE_EXISTING = &H00000040
    End Enum
    
    Public Type WLAN_CONNECTION_PARAMETERS
        wlanConnectionMode As WLAN_CONNECTION_MODE
        strProfile As LongPtr
        pDot11Ssid As LongPtr 'PDOT11_SSID
        pDesiredBssidList As LongPtr 'PDOT11_BSSID_LIST
        dot11BssType As DOT11_BSS_TYPE
        dwFlags As WlanConnectionFlags
    End Type
    Public Type WLAN_CONNECTION_PARAMETERS_V2
        wlanConnectionMode As WLAN_CONNECTION_MODE
        strProfile As LongPtr
        pDot11Ssid As LongPtr 'PDOT11_SSID
        pDot11Hessid As LongPtr 'PDOT11_HESSID
        pDesiredBssidList As LongPtr 'PDOT11_BSSID_LIST
        dot11BssType As DOT11_BSS_TYPE
        dwFlags As WlanConnectionFlags
        pDot11AccessNetworkOptions As LongPtr 'PDOT11_ACCESSNETWORKOPTIONS
    End Type
    
    Public Const DOT11_BSSID_LIST_REVISION_1 = 1
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid." & vbCrLf & "Also available is a custom SAFEARRAY version if needed for larger versions: DOT11_BSSID_LIST_sa")]
    Public Type DOT11_BSSID_LIST
		Header As NDIS_OBJECT_HEADER
		uNumOfEntries As Long
		uTotalNumOfEntries As Long
		BSSIDs(0 To 511) As DOT11_MAC_ADDRESS
	End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is due to SAFEARRAY substitution; fill number info, redim, then copy into (0).")]
    Public Type DOT11_BSSID_LIST_sa
        Header As NDIS_OBJECT_HEADER
        uNumOfEntries As Long
        uTotalNumOfEntries As Long
        BSSIDs() As DOT11_MAC_ADDRESS
    End Type
    
    Public Type WLAN_MSM_NOTIFICATION_DATA
        wlanConnectionMode As WLAN_CONNECTION_MODE
        strProfileName(0 To (WLAN_MAX_NAME_LENGTH - 1)) As Integer
        dot11Ssid As DOT11_SSID
        dot11BssType As DOT11_BSS_TYPE
        dot11MacAddr As DOT11_MAC_ADDRESS
        bSecurityEnabled As BOOL
        bFirstPeer As BOOL
        bLastPeer As BOOL
        wlanReasonCode As WLAN_REASON_CODE
    End Type
    
    Public Enum WlanConnectionNotificationFlags
        WLAN_CONNECTION_NOTIFICATION_ADHOC_NETWORK_FORMED = &H00000001  ' Formed ad hoc network
        WLAN_CONNECTION_NOTIFICATION_CONSOLE_USER_PROFILE = &H00000004  ' The profile is the active console user's per user profile
    End Enum
    
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid." & vbCrLf & "Also available is a custom SAFEARRAY version if needed for larger versions: WLAN_CONNECTION_NOTIFICATION_DATA_sa")]
    Public Type WLAN_CONNECTION_NOTIFICATION_DATA
        wlanConnectionMode As WLAN_CONNECTION_MODE
        strProfileName(0 To (WLAN_MAX_NAME_LENGTH - 1)) As Integer
        dot11Ssid As DOT11_SSID
        dot11BssType As DOT11_BSS_TYPE
        bSecurityEnabled As BOOL
        wlanReasonCode As WLAN_REASON_CODE
        dwFlags As WlanConnectionNotificationFlags
        strProfileXml(0 To 4095) As Integer
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is due to SAFEARRAY substitution; fill number info, redim, then copy into (0).")]
    Public Type WLAN_CONNECTION_NOTIFICATION_DATA_sa
        wlanConnectionMode As WLAN_CONNECTION_MODE
        strProfileName(0 To (WLAN_MAX_NAME_LENGTH - 1)) As Integer
        dot11Ssid As DOT11_SSID
        dot11BssType As DOT11_BSS_TYPE
        bSecurityEnabled As BOOL
        wlanReasonCode As WLAN_REASON_CODE
        dwFlags As WlanConnectionNotificationFlags
        strProfileXml() As Integer
    End Type
    
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid." & vbCrLf & "Also available is a custom SAFEARRAY version if needed for larger versions: WLAN_DEVICE_SERVICE_NOTIFICATION_DATA_sa")]
    Public Type WLAN_DEVICE_SERVICE_NOTIFICATION_DATA
        DeviceService As UUID
        dwOpCode As Long
        dwDataSize As Long
        DataBlob(0 To 4095) As Byte
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is due to SAFEARRAY substitution; fill number info, redim, then copy into (0).")]
    Public Type WLAN_DEVICE_SERVICE_NOTIFICATION_DATA_sa
        DeviceService As UUID
        dwOpCode As Long
        dwDataSize As Long
        DataBlob() As Byte
    End Type
    
    Public Enum WlanNotificationSourcesMSM
        WLAN_NOTIFICATION_SOURCE_NONE = L2_NOTIFICATION_SOURCE_NONE
        WLAN_NOTIFICATION_SOURCE_ALL = L2_NOTIFICATION_SOURCE_ALL
        WLAN_NOTIFICATION_SOURCE_ACM = L2_NOTIFICATION_SOURCE_WLAN_ACM
        WLAN_NOTIFICATION_SOURCE_MSM = L2_NOTIFICATION_SOURCE_WLAN_MSM
        WLAN_NOTIFICATION_SOURCE_SECURITY = L2_NOTIFICATION_SOURCE_WLAN_SECURITY
        WLAN_NOTIFICATION_SOURCE_IHV = L2_NOTIFICATION_SOURCE_WLAN_IHV
        WLAN_NOTIFICATION_SOURCE_HNWK = L2_NOTIFICATION_SOURCE_WLAN_HNWK
        WLAN_NOTIFICATION_SOURCE_ONEX = L2_NOTIFICATION_SOURCE_ONEX
        WLAN_NOTIFICATION_SOURCE_DEVICE_SERVICE = L2_NOTIFICATION_SOURCE_WLAN_DEVICE_SERVICE
    End Enum
    
    Public Enum WLAN_NOTIFICATION_ACM
		wlan_notification_acm_start = L2_NOTIFICATION_CODE_PUBLIC_BEGIN
		wlan_notification_acm_autoconf_enabled
		wlan_notification_acm_autoconf_disabled
		wlan_notification_acm_background_scan_enabled
		wlan_notification_acm_background_scan_disabled
		wlan_notification_acm_bss_type_change
		wlan_notification_acm_power_setting_change
		wlan_notification_acm_scan_complete
		wlan_notification_acm_scan_fail
		wlan_notification_acm_connection_start
		wlan_notification_acm_connection_complete
		wlan_notification_acm_connection_attempt_fail
		wlan_notification_acm_filter_list_change
		wlan_notification_acm_interface_arrival
		wlan_notification_acm_interface_removal
		wlan_notification_acm_profile_change
		wlan_notification_acm_profile_name_change
		wlan_notification_acm_profiles_exhausted
		wlan_notification_acm_network_not_available
		wlan_notification_acm_network_available
		wlan_notification_acm_disconnecting
		wlan_notification_acm_disconnected
		wlan_notification_acm_adhoc_network_state_change
		wlan_notification_acm_profile_unblocked
		wlan_notification_acm_screen_power_change
		wlan_notification_acm_profile_blocked
		wlan_notification_acm_scan_list_refresh
		wlan_notification_acm_operational_state_change
		wlan_notification_acm_end
    End Enum
    
    Public Enum WLAN_NOTIFICATION_MSM
        wlan_notification_msm_start = L2_NOTIFICATION_CODE_PUBLIC_BEGIN
        wlan_notification_msm_associating
        wlan_notification_msm_associated
        wlan_notification_msm_authenticating
        wlan_notification_msm_connected
        wlan_notification_msm_roaming_start
        wlan_notification_msm_roaming_end
        wlan_notification_msm_radio_state_change
        wlan_notification_msm_signal_quality_change
        wlan_notification_msm_disassociating
        wlan_notification_msm_disconnected
        wlan_notification_msm_peer_join
        wlan_notification_msm_peer_leave
        wlan_notification_msm_adapter_removal
        wlan_notification_msm_adapter_operation_mode_change
        wlan_notification_msm_link_degraded
        wlan_notification_msm_link_improved
        wlan_notification_msm_end
    End Enum
    
    Public Enum WLAN_NOTIFICATION_SECURITY
        wlan_notification_security_start = L2_NOTIFICATION_CODE_PUBLIC_BEGIN
        wlan_notification_security_end
    End Enum
    
    'Alias WLAN_NOTIFICATION_DATA As L2_NOTIFICATION_DATA
    Public Type WLAN_NOTIFICATION_DATA
        NotificationSource As Long
        NotificationCode As Long
        InterfaceGuid As UUID
        dwDataSize As Long
        '#ifdef __midl
        '    [unique, size_is(dwDataSize)] PBYTE pData;
        '#else
        pData As LongPtr
        '#endif
    End Type
    
    ' // the callback function for notifications
    ' typedef VOID (WINAPI *WLAN_NOTIFICATION_CALLBACK) (PWLAN_NOTIFICATION_DATA, PVOID);
    
    Public Enum WLAN_OPCODE_VALUE_TYPE
        wlan_opcode_value_type_query_only = 0
        wlan_opcode_value_type_set_by_group_policy
        wlan_opcode_value_type_set_by_user
        wlan_opcode_value_type_invalid
    End Enum
    
    Public Enum WLAN_INTF_OPCODE
		wlan_intf_opcode_autoconf_start = &H000000000
		wlan_intf_opcode_autoconf_enabled
		wlan_intf_opcode_background_scan_enabled
		wlan_intf_opcode_media_streaming_mode
		wlan_intf_opcode_radio_state
		wlan_intf_opcode_bss_type
		wlan_intf_opcode_interface_state
		wlan_intf_opcode_current_connection
		wlan_intf_opcode_channel_number
		wlan_intf_opcode_supported_infrastructure_auth_cipher_pairs
		wlan_intf_opcode_supported_adhoc_auth_cipher_pairs
		wlan_intf_opcode_supported_country_or_region_string_list
		wlan_intf_opcode_current_operation_mode
		wlan_intf_opcode_supported_safe_mode
		wlan_intf_opcode_certified_safe_mode
		wlan_intf_opcode_hosted_network_capable
		wlan_intf_opcode_management_frame_protection_capable
		wlan_intf_opcode_secondary_sta_interfaces
		wlan_intf_opcode_secondary_sta_synchronized_connections
		wlan_intf_opcode_realtime_connection_quality
		wlan_intf_opcode_qos_info
		wlan_intf_opcode_autoconf_end = &H0fffffff
		wlan_intf_opcode_msm_start = &H10000100
		wlan_intf_opcode_statistics
		wlan_intf_opcode_rssi
		wlan_intf_opcode_msm_end = &H1fffffff
		wlan_intf_opcode_security_start = &H20010000
		wlan_intf_opcode_security_end = &H2fffffff
		wlan_intf_opcode_ihv_start = &H30000000
		wlan_intf_opcode_ihv_end = &H3fffffff
	End Enum
    
    Public Enum WLAN_AUTOCONF_OPCODE
        wlan_autoconf_opcode_start = 0
        wlan_autoconf_opcode_show_denied_networks
        wlan_autoconf_opcode_power_setting
        wlan_autoconf_opcode_only_use_gp_profiles_for_allowed_networks
        wlan_autoconf_opcode_allow_explicit_creds
        wlan_autoconf_opcode_block_period
        wlan_autoconf_opcode_allow_virtual_station_extensibility
        wlan_autoconf_opcode_end
    End Enum
    
    Public Enum WLAN_IHV_CONTROL_TYPE
        wlan_ihv_control_type_service
        wlan_ihv_control_type_driver
    End Enum
    
    Public Enum WLAN_FILTER_LIST_TYPE
        wlan_filter_list_type_gp_permit
        wlan_filter_list_type_gp_deny
        wlan_filter_list_type_user_permit
        wlan_filter_list_type_user_deny
    End Enum
    
    Public Type WLAN_PHY_FRAME_STATISTICS
        ' TX counters (MSDU/MMPDU)
        ullTransmittedFrameCount As LongLong
        ullMulticastTransmittedFrameCount As LongLong
        ullFailedCount As LongLong
        ullRetryCount As LongLong
        ullMultipleRetryCount As LongLong
        ullMaxTXLifetimeExceededCount As LongLong
        ' TX counters (MPDU)
        ullTransmittedFragmentCount As LongLong
        ullRTSSuccessCount As LongLong
        ullRTSFailureCount As LongLong
        ullACKFailureCount As LongLong
        ' RX counters (MSDU/MMPDU)
        ullReceivedFrameCount As LongLong
        ullMulticastReceivedFrameCount As LongLong
        ullPromiscuousReceivedFrameCount As LongLong
        ullMaxRXLifetimeExceededCount As LongLong
        ' RX counters (MPDU)
        ullFrameDuplicateCount As LongLong
        ullReceivedFragmentCount As LongLong
        ullPromiscuousReceivedFragmentCount As LongLong
        ullFCSErrorCount As LongLong
    End Type
    
    Public Type WLAN_MAC_FRAME_STATISTICS
        ullTransmittedFrameCount As LongLong
        ullReceivedFrameCount As LongLong
        ullWEPExcludedCount As LongLong
        ullTKIPLocalMICFailures As LongLong
        ullTKIPReplays As LongLong
        ullTKIPICVErrorCount As LongLong
        ullCCMPReplays As LongLong
        ullCCMPDecryptErrors As LongLong
        ullWEPUndecryptableCount As LongLong
        ullWEPICVErrorCount As LongLong
        ullDecryptSuccessCount As LongLong
        ullDecryptFailureCount As LongLong
    End Type
    
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid." & vbCrLf & "Also available is a custom SAFEARRAY version if needed for larger versions: WLAN_STATISTICS_sa")]
    Public Type WLAN_STATISTICS
        ullFourWayHandshakeFailures As LongLong
        ullTKIPCounterMeasuresInvoked As LongLong
        ullReserved As LongLong
        MacUcastCounters As WLAN_MAC_FRAME_STATISTICS
        MacMcastCounters As WLAN_MAC_FRAME_STATISTICS
        dwNumberOfPhys As Long
        PhyCounters(0 To (WLAN_MAX_PHY_INDEX - 1)) As WLAN_PHY_FRAME_STATISTICS
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is due to SAFEARRAY substitution; fill number info, redim, then copy into (0).")]
    Public Type WLAN_STATISTICS_sa
        ullFourWayHandshakeFailures As LongLong
        ullTKIPCounterMeasuresInvoked As LongLong
        ullReserved As LongLong
        MacUcastCounters As WLAN_MAC_FRAME_STATISTICS
        MacMcastCounters As WLAN_MAC_FRAME_STATISTICS
        dwNumberOfPhys As Long
        PhyCounters() As WLAN_PHY_FRAME_STATISTICS
    End Type
    
    Public Enum WlanAccessRights
        WLAN_READ_ACCESS = (STANDARD_RIGHTS_READ Or FILE_READ_DATA)
        WLAN_EXECUTE_ACCESS = (WLAN_READ_ACCESS Or STANDARD_RIGHTS_EXECUTE Or FILE_EXECUTE)
        WLAN_WRITE_ACCESS = (WLAN_READ_ACCESS Or WLAN_EXECUTE_ACCESS Or STANDARD_RIGHTS_WRITE Or FILE_WRITE_DATA Or DELETE Or WRITE_DAC)
    End Enum
    
    Public Enum WLAN_SECURABLE_OBJECT
		wlan_secure_permit_list = 0
		wlan_secure_deny_list
		wlan_secure_ac_enabled
		wlan_secure_bc_scan_enabled
		wlan_secure_bss_type
		wlan_secure_show_denied
		wlan_secure_interface_properties
		wlan_secure_ihv_control
		wlan_secure_all_user_profiles_order
		wlan_secure_add_new_all_user_profiles
		wlan_secure_add_new_per_user_profiles
		wlan_secure_media_streaming_mode_enabled
		wlan_secure_current_operation_mode
		wlan_secure_get_plaintext_key
		wlan_secure_hosted_network_elevated_access
		wlan_secure_virtual_station_extensibility
		wlan_secure_wfd_elevated_access
     
    	WLAN_SECURABLE_OBJECT_COUNT
    End Enum
    
    [Description("⚠️ **WARNING:** Buffered array substituted for variable C-style array; LenB is invalid." & vbCrLf & "Also available is a custom SAFEARRAY version if needed for larger versions: WLAN_DEVICE_SERVICE_GUID_LIST_sa")]
    Public Type WLAN_DEVICE_SERVICE_GUID_LIST
        dwNumberOfItems As Long
        dwIndex As Long
        DeviceService(0 To 127) As UUID
    End Type
    [Description("⚠️ **WARNING:** Cannot be used as-is due to SAFEARRAY substitution; fill number info, redim, then copy into (0).")]
    Public Type WLAN_DEVICE_SERVICE_GUID_LIST_sa
        dwNumberOfItems As Long
        dwIndex As Long
        DeviceService() As UUID
    End Type
    
    Public Const WFD_API_VERSION_1_0  = &H00000001
    ' #if ( _WIN32_WINNT >= _WIN32_WINNT_WIN8 )
    Public Const WFD_API_SUPPORTED = 1
    Public Const WFD_API_VERSION  = WFD_API_VERSION_1_0
    
	Public Enum WFD_ROLE_TYPE
		WFD_ROLE_TYPE_NONE = &H00
		WFD_ROLE_TYPE_DEVICE = &H01
		WFD_ROLE_TYPE_GROUP_OWNER = &H02
		WFD_ROLE_TYPE_CLIENT = &H04
		WFD_ROLE_TYPE_MAX = &H05
	End Enum
        
    Public Type WFD_GROUP_ID
        DeviceAddress As DOT11_MAC_ADDRESS
        GroupSSID As DOT11_SSID
    End Type
    
    
    Public Declare PtrSafe Function WlanOpenHandle Lib "Wlanapi.dll" (ByVal dwClientVersion As Long, ByVal pReserved As LongPtr, pdwNegotiatedVersion As Long, phClientHandle As LongPtr) As Long
    Public Declare PtrSafe Function WlanCloseHandle Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, ByVal pReserved As LongPtr) As Long
    Public Declare PtrSafe Function WlanEnumInterfaces Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, ByVal pReserved As LongPtr, ppInterfaceList As LongPtr) As Long
    Public Declare PtrSafe Function WlanSetAutoConfigParameter Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, ByVal OpCode As WLAN_AUTOCONF_OPCODE, ByVal dwDataSize As Long, pData As Any, ByVal pReserved As LongPtr) As Long
    Public Declare PtrSafe Function WlanQueryAutoConfigParameter Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, ByVal OpCode As WLAN_AUTOCONF_OPCODE, ByVal pReserved As LongPtr, pdwDataSize As Long, ppData As LongPtr, Optional pWlanOpcodeValueType As WLAN_OPCODE_VALUE_TYPE) As Long
    Public Declare PtrSafe Function WlanGetInterfaceCapability Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pInterfaceGuid As UUID, ByVal pReserved As LongPtr, ppCapability As LongPtr) As Long
    Public Declare PtrSafe Function WlanSetInterface Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pInterfaceGuid As UUID, ByVal OpCode As WLAN_INTF_OPCODE, ByVal dwDataSize As Long, pData As Any, ByVal pReserved As LongPtr) As Long
    Public Declare PtrSafe Function WlanQueryInterface Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pInterfaceGuid As UUID, ByVal OpCode As WLAN_INTF_OPCODE, ByVal pReserved As LongPtr, pdwDataSize As Long, ppData As LongPtr, Optional pWlanOpcodeValueType As WLAN_OPCODE_VALUE_TYPE) As Long
    Public Declare PtrSafe Function WlanIhvControl Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pInterfaceGuid As UUID, ByVal Type As WLAN_IHV_CONTROL_TYPE, ByVal dwInBufferSize As Long, pInBuffer As Any, ByVal dwOutBufferSize As Long, pOutBuffer As Any, pdwBytesReturned As Long) As Long
    Public Declare PtrSafe Function WlanScan Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pInterfaceGuid As UUID, pDot11Ssid As DOT11_SSID, pIeData As Any, ByVal pReserved As LongPtr) As Long
    Public Declare PtrSafe Function WlanGetAvailableNetworkList Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pInterfaceGuid As UUID, ByVal dwFlags As WlanAvailableNetworkFlags, ByVal pReserved As LongPtr, ppAvailableNetworkList As LongPtr) As Long
    Public Declare PtrSafe Function WlanGetAvailableNetworkList2 Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pInterfaceGuid As UUID, ByVal dwFlags As WlanAvailableNetworkFlags, ByVal pReserved As LongPtr, ppAvailableNetworkList As LongPtr) As Long
    Public Declare PtrSafe Function WlanGetNetworkBssList Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pInterfaceGuid As UUID, pDot11Ssid As DOT11_SSID, ByVal dot11BssType As DOT11_BSS_TYPE, ByVal bSecurityEnabled As BOOL, ByVal pReserved As LongPtr, ppWlanBssList As LongPtr) As Long
    Public Declare PtrSafe Function WlanConnect Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pInterfaceGuid As UUID, pConnectionParameters As WLAN_CONNECTION_PARAMETERS, ByVal pReserved As LongPtr) As Long
    Public Declare PtrSafe Function WlanConnect2 Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pInterfaceGuid As UUID, pConnectionParameters As WLAN_CONNECTION_PARAMETERS_V2, ByVal pReserved As LongPtr) As Long
    Public Declare PtrSafe Function WlanDisconnect Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pInterfaceGuid As UUID, ByVal pReserved As LongPtr) As Long
    Public Declare PtrSafe Function WlanRegisterNotification Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, ByVal dwNotifSource As WlanNotificationSourcesMSM, ByVal bIgnoreDuplicate As BOOL, ByVal funcCallback As LongPtr, ByVal pCallbackContext As LongPtr, ByVal pReserved As LongPtr, Optional pdwPrevNotifSource As WlanNotificationSourcesMSM) As Long
    Public Declare PtrSafe Function WlanGetProfile Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pInterfaceGuid As UUID, ByVal strProfileName As LongPtr, ByVal pReserved As LongPtr, pstrProfileXml As LongPtr, Optional pdwFlags As WlanProfileFlags, Optional pdwGrantedAccess As WlanAccessRights) As Long
	#If Win64 Then
    Public Declare PtrSafe Function WlanSetProfileEapUserData Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pInterfaceGuid As UUID, ByVal strProfileName As LongPtr, eapType As EAP_METHOD_TYPE, ByVal dwFlags As WlanEAPHostDataStgFlags, ByVal dwEapUserDataSize As Long, pbEapUserData As Any, ByVal pReserved As LongPtr) As Long
    #Else
    Public Declare PtrSafe Function WlanSetProfileEapUserData Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pInterfaceGuid As UUID, ByVal strProfileName As LongPtr, ByVal eapTypeType As Long, ByVal eapTypedwVendorId As Long, ByVal eapTypedwVendorType As Long, ByVal dwAuthorId As Long, ByVal dwFlags As WlanEAPHostDataStgFlags, ByVal dwEapUserDataSize As Long, pbEapUserData As Any, ByVal pReserved As LongPtr) As Long
    #End If
    Public Declare PtrSafe Function WlanSetProfileEapXmlUserData Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pInterfaceGuid As UUID, ByVal strProfileName As LongPtr, ByVal dwFlags As WlanEAPHostDataStgFlags, ByVal strEapXmlUserData As LongPtr, ByVal pReserved As LongPtr) As Long
    Public Declare PtrSafe Function WlanSetProfile Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pInterfaceGuid As UUID, ByVal dwFlags As WlanProfileFlags, ByVal strProfileXml As LongPtr, ByVal strAllUserProfileSecurity As LongPtr, ByVal bOverwrite As BOOL, ByVal pReserved As LongPtr, pdwReasonCode As WLAN_REASON_CODE) As Long
    Public Declare PtrSafe Function WlanDeleteProfile Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pInterfaceGuid As UUID, ByVal strProfileName As LongPtr, ByVal pReserved As LongPtr) As Long
    Public Declare PtrSafe Function WlanRenameProfile Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pInterfaceGuid As UUID, ByVal strOldProfileName As LongPtr, ByVal strNewProfileName As LongPtr, ByVal pReserved As LongPtr) As Long
    Public Declare PtrSafe Function WlanGetProfileList Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pInterfaceGuid As UUID, ByVal pReserved As LongPtr, ppProfileList As LongPtr) As Long
    Public Declare PtrSafe Function WlanSetProfileList Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pInterfaceGuid As UUID, ByVal dwItems As Long, strProfileNames As LongPtr, ByVal pReserved As LongPtr) As Long
    Public Declare PtrSafe Function WlanSetProfilePosition Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pInterfaceGuid As UUID, ByVal strProfileName As LongPtr, ByVal dwPosition As Long, ByVal pReserved As LongPtr) As Long
    Public Declare PtrSafe Function WlanSetProfileCustomUserData Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pInterfaceGuid As UUID, ByVal strProfileName As LongPtr, ByVal dwDataSize As Long, pData As Any, ByVal pReserved As LongPtr) As Long
    Public Declare PtrSafe Function WlanGetProfileCustomUserData Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pInterfaceGuid As UUID, ByVal strProfileName As LongPtr, ByVal pReserved As LongPtr, pdwDataSize As Long, ppData As LongPtr) As Long
    Public Declare PtrSafe Function WlanSetFilterList Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, ByVal wlanFilterListType As WLAN_FILTER_LIST_TYPE, pNetworkList As Any, ByVal pReserved As LongPtr) As Long
    Public Declare PtrSafe Function WlanGetFilterList Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, ByVal wlanFilterListType As WLAN_FILTER_LIST_TYPE, ByVal pReserved As LongPtr, ppNetworkList As LongPtr) As Long
    Public Declare PtrSafe Function WlanSetPsdIEDataList Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, ByVal strFormat As LongPtr, pPsdIEDataList As Any, ByVal pReserved As LongPtr) As Long
    Public Declare PtrSafe Function WlanSaveTemporaryProfile Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pInterfaceGuid As UUID, ByVal strProfileName As LongPtr, ByVal strAllUserProfileSecurity As LongPtr, ByVal dwFlags As WlanProfileFlags, ByVal bOverwrite As BOOL, ByVal pReserved As LongPtr) As Long
    Public Declare PtrSafe Function WlanDeviceServiceCommand Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pInterfaceGuid As UUID, pDeviceServiceGuid As UUID, ByVal dwOpCode As Long, ByVal dwInBufferSize As Long, pInBuffer As Any, ByVal dwOutBufferSize As Long, pOutBuffer As Any, pdwBytesReturned As Long) As Long
    Public Declare PtrSafe Function WlanGetSupportedDeviceServices Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pInterfaceGuid As UUID, ppDevSvcGuidList As LongPtr) As Long
    Public Declare PtrSafe Function WlanRegisterDeviceServiceNotification Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pDevSvcGuidList As Any) As Long
    Public Declare PtrSafe Function WlanExtractPsdIEDataList Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, ByVal dwIeDataSize As Long, pRawIeData As Any, ByVal strFormat As LongPtr, ByVal pReserved As LongPtr, ppPsdIEDataList As LongPtr) As Long
    Public DeclareWide PtrSafe Function WlanReasonCodeToString Lib "Wlanapi.dll" (ByVal dwReasonCode As WLAN_REASON_CODE, ByVal dwBufferSize As Long, ByVal pStringBuffer As String, ByVal pReserved As LongPtr) As Long
    Public Declare PtrSafe Function WlanAllocateMemory Lib "Wlanapi.dll" (ByVal dwMemorySize As Long) As LongPtr
    Public Declare PtrSafe Sub WlanFreeMemory Lib "Wlanapi.dll" (ByVal pMemory As LongPtr)
    Public Declare PtrSafe Function WlanSetSecuritySettings Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, ByVal SecurableObject As WLAN_SECURABLE_OBJECT, ByVal strModifiedSDDL As LongPtr) As Long
    Public Declare PtrSafe Function WlanGetSecuritySettings Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, ByVal SecurableObject As WLAN_SECURABLE_OBJECT, pValueType As WLAN_OPCODE_VALUE_TYPE, pstrCurrentSDDL As LongPtr, pdwGrantedAccess As WlanAccessRights) As Long
    
    Public Const WLAN_UI_API_VERSION  = 1
    '  earliest version supported
    Public Const WLAN_UI_API_INITIAL_VERSION  = 1
    
    Public Enum WL_DISPLAY_PAGES
        WLConnectionPage
        WLSecurityPage
        WLAdvPage
    End Enum
    
    Public Declare PtrSafe Function WlanUIEditProfile Lib "Wlanui.dll" (ByVal dwClientVersion As Long, ByVal wstrProfileName As LongPtr, pInterfaceGuid As UUID, ByVal hWnd As LongPtr, ByVal wlStartPage As WL_DISPLAY_PAGES, ByVal pReserved As LongPtr, Optional WlanReasonCode As WLAN_REASON_CODE) As Long
    
    Public Enum WLAN_HOSTED_NETWORK_STATE
        wlan_hosted_network_unavailable
        wlan_hosted_network_idle
        wlan_hosted_network_active
    End Enum
    
    Public Enum WLAN_HOSTED_NETWORK_REASON
        wlan_hosted_network_reason_success = 0
        wlan_hosted_network_reason_unspecified
        wlan_hosted_network_reason_bad_parameters
        wlan_hosted_network_reason_service_shutting_down
        wlan_hosted_network_reason_insufficient_resources
        wlan_hosted_network_reason_elevation_required
        wlan_hosted_network_reason_read_only
        wlan_hosted_network_reason_persistence_failed
        wlan_hosted_network_reason_crypt_error
        wlan_hosted_network_reason_impersonation
        wlan_hosted_network_reason_stop_before_start

        wlan_hosted_network_reason_interface_available
        wlan_hosted_network_reason_interface_unavailable
        wlan_hosted_network_reason_miniport_stopped
        wlan_hosted_network_reason_miniport_started
        wlan_hosted_network_reason_incompatible_connection_started
        wlan_hosted_network_reason_incompatible_connection_stopped
        wlan_hosted_network_reason_user_action
        wlan_hosted_network_reason_client_abort
        wlan_hosted_network_reason_ap_start_failed

        wlan_hosted_network_reason_peer_arrived
        wlan_hosted_network_reason_peer_departed
        wlan_hosted_network_reason_peer_timeout
        wlan_hosted_network_reason_gp_denied
        wlan_hosted_network_reason_service_unavailable
        wlan_hosted_network_reason_device_change
        wlan_hosted_network_reason_properties_change
        wlan_hosted_network_reason_virtual_station_blocking_use
        wlan_hosted_network_reason_service_available_on_virtual_station
    End Enum
    
    Public Enum WLAN_HOSTED_NETWORK_PEER_AUTH_STATE
        wlan_hosted_network_peer_state_invalid
        wlan_hosted_network_peer_state_authenticated
    End Enum
    
    Public Declare PtrSafe Function WlanHostedNetworkStartUsing Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pFailReason As WLAN_HOSTED_NETWORK_REASON, ByVal pvReserved As LongPtr) As Long
    Public Declare PtrSafe Function WlanHostedNetworkStopUsing Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pFailReason As WLAN_HOSTED_NETWORK_REASON, ByVal pvReserved As LongPtr) As Long
    Public Declare PtrSafe Function WlanHostedNetworkForceStart Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pFailReason As WLAN_HOSTED_NETWORK_REASON, ByVal pvReserved As LongPtr) As Long
    Public Declare PtrSafe Function WlanHostedNetworkForceStop Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pFailReason As WLAN_HOSTED_NETWORK_REASON, ByVal pvReserved As LongPtr) As Long
          
    Public Type WLAN_HOSTED_NETWORK_PEER_STATE
        PeerMacAddress As DOT11_MAC_ADDRESS
        PeerAuthState As WLAN_HOSTED_NETWORK_PEER_AUTH_STATE
    End Type
    
    Public Type WLAN_HOSTED_NETWORK_RADIO_STATE
        dot11SoftwareRadioState As DOT11_RADIO_STATE
        dot11HardwareRadioState As DOT11_RADIO_STATE
    End Type
    
    Public Enum WLAN_HOSTED_NETWORK_NOTIFICATION_CODE
        wlan_hosted_network_state_change = L2_NOTIFICATION_CODE_V2_BEGIN
        wlan_hosted_network_peer_state_change
        wlan_hosted_network_radio_state_change
    End Enum
    
    Public Type WLAN_HOSTED_NETWORK_STATE_CHANGE
        OldState As WLAN_HOSTED_NETWORK_STATE
        NewState As WLAN_HOSTED_NETWORK_STATE
        StateChangeReason As WLAN_HOSTED_NETWORK_REASON
    End Type
    
    Public Type WLAN_HOSTED_NETWORK_DATA_PEER_STATE_CHANGE
        OldState As WLAN_HOSTED_NETWORK_PEER_STATE
        NewState As WLAN_HOSTED_NETWORK_PEER_STATE
        PeerStateChangeReason As WLAN_HOSTED_NETWORK_REASON
    End Type
    
    Public Enum WLAN_HOSTED_NETWORK_OPCODE
        wlan_hosted_network_opcode_connection_settings
        wlan_hosted_network_opcode_security_settings
        wlan_hosted_network_opcode_station_profile
        wlan_hosted_network_opcode_enable
    End Enum
    
    Public Type WLAN_HOSTED_NETWORK_CONNECTION_SETTINGS
        hostedNetworkSSID As DOT11_SSID
        dwMaxNumberOfPeers As Long
    End Type
    
    Public Type WLAN_HOSTED_NETWORK_SECURITY_SETTINGS
        dot11AuthAlgo As DOT11_AUTH_ALGORITHM
        dot11CipherAlgo As DOT11_CIPHER_ALGORITHM
    End Type
    
    Public Declare PtrSafe Function WlanHostedNetworkQueryProperty Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, ByVal OpCode As WLAN_HOSTED_NETWORK_OPCODE, pdwDataSize As Long, ppData As LongPtr, pWlanOpcodeValueType As WLAN_OPCODE_VALUE_TYPE, ByVal pvReserved As LongPtr) As Long
    Public Declare PtrSafe Function WlanHostedNetworkSetProperty Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, ByVal OpCode As WLAN_HOSTED_NETWORK_OPCODE, ByVal dwDataSize As Long, pvData As Any, pFailReason As WLAN_HOSTED_NETWORK_REASON, ByVal pvReserved As LongPtr) As Long
    Public Declare PtrSafe Function WlanHostedNetworkInitSettings Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pFailReason As WLAN_HOSTED_NETWORK_REASON, ByVal pvReserved As LongPtr) As Long
    Public Declare PtrSafe Function WlanHostedNetworkRefreshSecuritySettings Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pFailReason As WLAN_HOSTED_NETWORK_REASON, ByVal pvReserved As LongPtr) As Long
       
    [Description("⚠️ **WARNING:** Cannot be used as-is due to SAFEARRAY substitution; fill number info, redim, then copy into (0). " & vbCrLf & "Also available is a buffered custom version supporting up to 512 networks: WLAN_HOSTED_NETWORK_STATUS_buf ")]
    Public Type WLAN_HOSTED_NETWORK_STATUS
        HostedNetworkState As WLAN_HOSTED_NETWORK_STATE
        IPDeviceID As UUID
        wlanHostedNetworkBSSID As DOT11_MAC_ADDRESS
        dot11PhyType As DOT11_PHY_TYPE
        ulChannelFrequency As Long
        dwNumberOfPeers As Long
        PeerList() As WLAN_HOSTED_NETWORK_PEER_STATE
    End Type
    
    Public Type WLAN_HOSTED_NETWORK_STATUS_buf
        HostedNetworkState As WLAN_HOSTED_NETWORK_STATE
        IPDeviceID As UUID
        wlanHostedNetworkBSSID As DOT11_MAC_ADDRESS
        dot11PhyType As DOT11_PHY_TYPE
        ulChannelFrequency As Long
        dwNumberOfPeers As Long
        PeerList(511) As WLAN_HOSTED_NETWORK_PEER_STATE
    End Type
    
    Public Declare PtrSafe Function WlanHostedNetworkQueryStatus Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, ppWlanHostedNetworkStatus As LongPtr, ByVal pvReserved As LongPtr) As Long
    Public Declare PtrSafe Function WlanHostedNetworkSetSecondaryKey Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, ByVal dwKeyLength As Long, pucKeyData As Any, ByVal bIsPassPhrase As BOOL, ByVal bPersistent As BOOL, pFailReason As WLAN_HOSTED_NETWORK_REASON, ByVal pvReserved As LongPtr) As Long
    Public Declare PtrSafe Function WlanHostedNetworkQuerySecondaryKey Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pdwKeyLength As Long, ppucKeyData As LongPtr, pbIsPassPhrase As BOOL, pbPersistent As BOOL, pFailReason As WLAN_HOSTED_NETWORK_REASON, ByVal pvReserved As LongPtr) As Long
    Public Declare PtrSafe Function WlanRegisterVirtualStationNotification Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, ByVal bRegister As BOOL, ByVal pReserved As LongPtr) As Long
    
    Public Declare PtrSafe Function WFDOpenHandle Lib "Wlanapi.dll" (ByVal dwClientVersion As Long, pdwNegotiatedVersion As Long, phClientHandle As LongPtr) As Long
    Public Declare PtrSafe Function WFDCloseHandle Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr) As Long
    ' typedef VOID (WINAPI *WFD_OPEN_SESSION_COMPLETE_CALLBACK) (
    ' _In_ HANDLE         hSessionHandle,
    ' _In_ PVOID          pvContext,
    ' _In_ GUID           guidSessionInterface,
    ' _In_ DWORD          dwError,
    ' _In_ DWORD          dwReasonCode
    ' );
    Public Declare PtrSafe Function WFDStartOpenSession Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pDeviceAddress As DOT11_MAC_ADDRESS, ByVal pvContext As LongPtr, ByVal pfnCallback As LongPtr, phSessionHandle As LongPtr) As Long
    Public Declare PtrSafe Function WFDCancelOpenSession Lib "Wlanapi.dll" (ByVal hSessionHandle As LongPtr) As Long
    Public Declare PtrSafe Function WFDOpenLegacySession Lib "Wlanapi.dll" (ByVal hClientHandle As LongPtr, pLegacyMacAddress As DOT11_MAC_ADDRESS, phSessionHandle As LongPtr, pGuidSessionInterface As UUID) As Long
    Public Declare PtrSafe Function WFDCloseSession Lib "Wlanapi.dll" (ByVal hSessionHandle As LongPtr) As Long
    Public Declare PtrSafe Function WFDUpdateDeviceVisibility Lib "Wlanapi.dll" (pDeviceAddress As DOT11_MAC_ADDRESS) As Long
    
    Public Function GUID_DEVINTERFACE_WIFIDIRECT_DEVICE() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H439b20af, &H8955, &H405b, &H99, &Hf0, &Ha6, &H2a, &Hf0, &Hc6, &H8d, &H43)
     GUID_DEVINTERFACE_WIFIDIRECT_DEVICE = iid
    End Function
    Public Function GUID_AEPSERVICE_WIFIDIRECT_DEVICE() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hcc29827c, &H9caf, &H4928, &H99, &Ha9, &H18, &Hf7, &Hc2, &H38, &H13, &H89)
      GUID_AEPSERVICE_WIFIDIRECT_DEVICE = iid
    End Function
    Public Function GUID_DEVINTERFACE_ASP_INFRA_DEVICE() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hff823995, &H7a72, &H4c80, &H87, &H57, &Hc6, &H7e, &He1, &H3d, &H1a, &H49)
     GUID_DEVINTERFACE_ASP_INFRA_DEVICE = iid
    End Function
    Public Function DEVPKEY_WiFiDirect_DeviceAddress() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H01)
    DEVPKEY_WiFiDirect_DeviceAddress = pkk
    End Function
    Public Function DEVPKEY_WiFiDirect_InterfaceAddress() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H02)
    DEVPKEY_WiFiDirect_InterfaceAddress = pkk
    End Function
    Public Function DEVPKEY_WiFiDirect_InterfaceGuid() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H03)
    DEVPKEY_WiFiDirect_InterfaceGuid = pkk
    End Function
    Public Function DEVPKEY_WiFiDirect_GroupId() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H04)
    DEVPKEY_WiFiDirect_GroupId = pkk
    End Function
    Public Function DEVPKEY_WiFiDirect_IsConnected() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H05)
    DEVPKEY_WiFiDirect_IsConnected = pkk
    End Function
    Public Function DEVPKEY_WiFiDirect_IsVisible() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H06)
    DEVPKEY_WiFiDirect_IsVisible = pkk
    End Function
    Public Function DEVPKEY_WiFiDirect_IsLegacyDevice() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H07)
    DEVPKEY_WiFiDirect_IsLegacyDevice = pkk
    End Function
    Public Function DEVPKEY_WiFiDirect_MiracastVersion() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H08)
    DEVPKEY_WiFiDirect_MiracastVersion = pkk
    End Function
    Public Function DEVPKEY_WiFiDirect_IsMiracastLCPSupported() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H09)
    DEVPKEY_WiFiDirect_IsMiracastLCPSupported = pkk
    End Function
    Public Function DEVPKEY_WiFiDirect_Services() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H0A)
    DEVPKEY_WiFiDirect_Services = pkk
    End Function
    Public Function DEVPKEY_WiFiDirect_SupportedChannelList() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H0B)
    DEVPKEY_WiFiDirect_SupportedChannelList = pkk
    End Function
    Public Function DEVPKEY_WiFiDirect_InformationElements() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H0C)
    DEVPKEY_WiFiDirect_InformationElements = pkk
    End Function
    Public Function DEVPKEY_WiFiDirect_DeviceAddressCopy() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H0D)
    DEVPKEY_WiFiDirect_DeviceAddressCopy = pkk
    End Function
    Public Function DEVPKEY_WiFiDirect_IsRecentlyAssociated() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H0E)
    DEVPKEY_WiFiDirect_IsRecentlyAssociated = pkk
    End Function
    Public Function DEVPKEY_WiFiDirect_Service_Aeps() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H0F)
    DEVPKEY_WiFiDirect_Service_Aeps = pkk
    End Function
    Public Function DEVPKEY_WiFiDirect_NoMiracastAutoProject() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H10)
    DEVPKEY_WiFiDirect_NoMiracastAutoProject = pkk
    End Function
    Public Function DEVPKEY_InfraCast_Supported() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H11)
    DEVPKEY_InfraCast_Supported = pkk
    End Function
    Public Function DEVPKEY_InfraCast_StreamSecuritySupported() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H12)
    DEVPKEY_InfraCast_StreamSecuritySupported = pkk
    End Function
    Public Function DEVPKEY_InfraCast_AccessPointBssid() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H13)
    DEVPKEY_InfraCast_AccessPointBssid = pkk
    End Function
    Public Function DEVPKEY_InfraCast_SinkHostName() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H14)
    DEVPKEY_InfraCast_SinkHostName = pkk
    End Function
    Public Function DEVPKEY_InfraCast_ChallengeAep() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H15)
    DEVPKEY_InfraCast_ChallengeAep = pkk
    End Function
    Public Function DEVPKEY_WiFiDirect_IsDMGCapable() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H16)
    DEVPKEY_WiFiDirect_IsDMGCapable = pkk
    End Function
    Public Function DEVPKEY_InfraCast_DevnodeAep() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H17)
    DEVPKEY_InfraCast_DevnodeAep = pkk
    End Function
    Public Function DEVPKEY_WiFiDirect_FoundWsbService() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H18)
    DEVPKEY_WiFiDirect_FoundWsbService = pkk
    End Function
    Public Function DEVPKEY_InfraCast_HostName_ResolutionMode() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H19)
    DEVPKEY_InfraCast_HostName_ResolutionMode = pkk
    End Function
    Public Function DEVPKEY_InfraCast_SinkIpAddress() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H1A)
    DEVPKEY_InfraCast_SinkIpAddress = pkk
    End Function
    Public Function DEVPKEY_WiFiDirect_TransientAssociation() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H1B)
    DEVPKEY_WiFiDirect_TransientAssociation = pkk
    End Function
    Public Function DEVPKEY_WiFiDirect_LinkQuality() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H1C)
    DEVPKEY_WiFiDirect_LinkQuality = pkk
    End Function
    Public Function DEVPKEY_InfraCast_PinSupported() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H1D)
    DEVPKEY_InfraCast_PinSupported = pkk
    End Function
    Public Function DEVPKEY_InfraCast_RtspTcpConnectionParametersSupported() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H1E)
    DEVPKEY_InfraCast_RtspTcpConnectionParametersSupported = pkk
    End Function
    Public Function DEVPKEY_WiFiDirect_Miracast_SessionMgmtControlPort() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H1F)
    DEVPKEY_WiFiDirect_Miracast_SessionMgmtControlPort = pkk
    End Function
    Public Function DEVPKEY_WiFiDirect_RtspTcpConnectionParametersSupported() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1506935d, &He3e7, &H450f, &H86, &H37, &H82, &H23, &H3e, &Hbe, &H5f, &H6E, &H20)
    DEVPKEY_WiFiDirect_RtspTcpConnectionParametersSupported = pkk
    End Function
    Public Function DEVPKEY_WiFiDirectServices_ServiceAddress() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H31b37743, &H7c5e, &H4005, &H93, &He6, &He9, &H53, &Hf9, &H2b, &H82, &He9, &H02)
    DEVPKEY_WiFiDirectServices_ServiceAddress = pkk
    End Function
    Public Function DEVPKEY_WiFiDirectServices_ServiceName() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H31b37743, &H7c5e, &H4005, &H93, &He6, &He9, &H53, &Hf9, &H2b, &H82, &He9, &H03)
    DEVPKEY_WiFiDirectServices_ServiceName = pkk
    End Function
    Public Function DEVPKEY_WiFiDirectServices_ServiceInformation() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H31b37743, &H7c5e, &H4005, &H93, &He6, &He9, &H53, &Hf9, &H2b, &H82, &He9, &H04)
    DEVPKEY_WiFiDirectServices_ServiceInformation = pkk
    End Function
    Public Function DEVPKEY_WiFiDirectServices_AdvertisementId() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H31b37743, &H7c5e, &H4005, &H93, &He6, &He9, &H53, &Hf9, &H2b, &H82, &He9, &H05)
    DEVPKEY_WiFiDirectServices_AdvertisementId = pkk
    End Function
    Public Function DEVPKEY_WiFiDirectServices_ServiceConfigMethods() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H31b37743, &H7c5e, &H4005, &H93, &He6, &He9, &H53, &Hf9, &H2b, &H82, &He9, &H06)
    DEVPKEY_WiFiDirectServices_ServiceConfigMethods = pkk
    End Function
    Public Function DEVPKEY_WiFiDirectServices_RequestServiceInformation() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H31b37743, &H7c5e, &H4005, &H93, &He6, &He9, &H53, &Hf9, &H2b, &H82, &He9, &H07)
    DEVPKEY_WiFiDirectServices_RequestServiceInformation = pkk
    End Function
    Public Function DEVPKEY_WiFi_InterfaceGuid() As PROPERTYKEY
    Static pkk As PROPERTYKEY
     If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hef1167eb, &Hcbfc, &H4341, &Ha5, &H68, &Ha7, &Hc9, &H1a, &H68, &H98, &H2c, &H02)
       DEVPKEY_WiFi_InterfaceGuid = pkk
    End Function
    
    Public Function GUID_EapHost_Default() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000000, &H0000, &H0000, 0, 0, 0, 0, 0, 0, 0, 0)
    GUID_EapHost_Default = iid
    End Function
    Public Function GUID_EapHost_Cause_MethodDLLNotFound() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, 1)
    GUID_EapHost_Cause_MethodDLLNotFound = iid
    End Function
    Public Function GUID_EapHost_Repair_ContactSysadmin() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, 2)
    GUID_EapHost_Repair_ContactSysadmin = iid
    End Function
    Public Function GUID_EapHost_Cause_CertStoreInaccessible() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, 4)
    GUID_EapHost_Cause_CertStoreInaccessible = iid
    End Function
    Public Function GUID_EapHost_Cause_Generic_AuthFailure() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 1, 4)
    GUID_EapHost_Cause_Generic_AuthFailure = iid
    End Function
    Public Function GUID_EapHost_Cause_IdentityUnknown() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 2, 4)
    GUID_EapHost_Cause_IdentityUnknown = iid
    End Function
    Public Function GUID_EapHost_Cause_SimNotValid() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 3, 4)
    GUID_EapHost_Cause_SimNotValid = iid
    End Function
    Public Function GUID_EapHost_Cause_Server_CertExpired() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, 5)
    GUID_EapHost_Cause_Server_CertExpired = iid
    End Function
    Public Function GUID_EapHost_Cause_Server_CertInvalid() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, 6)
    GUID_EapHost_Cause_Server_CertInvalid = iid
    End Function
    Public Function GUID_EapHost_Cause_Server_CertNotFound() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, 7)
    GUID_EapHost_Cause_Server_CertNotFound = iid
    End Function
    Public Function GUID_EapHost_Cause_Server_CertRevoked() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, 8)
    GUID_EapHost_Cause_Server_CertRevoked = iid
    End Function
    Public Function GUID_EapHost_Cause_Server_CertOtherError() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 1, 8)
    GUID_EapHost_Cause_Server_CertOtherError = iid
    End Function
    Public Function GUID_EapHost_Cause_User_CertExpired() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, 9)
    GUID_EapHost_Cause_User_CertExpired = iid
    End Function
    Public Function GUID_EapHost_Cause_User_CertInvalid() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &HA)
    GUID_EapHost_Cause_User_CertInvalid = iid
    End Function
    Public Function GUID_EapHost_Cause_User_CertNotFound() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &HB)
    GUID_EapHost_Cause_User_CertNotFound = iid
    End Function
    Public Function GUID_EapHost_Cause_User_CertOtherError() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &HC)
    GUID_EapHost_Cause_User_CertOtherError = iid
    End Function
    Public Function GUID_EapHost_Cause_User_CertRejected() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &HD)
    GUID_EapHost_Cause_User_CertRejected = iid
    End Function
    Public Function GUID_EapHost_Cause_User_CertRevoked() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &HE)
    GUID_EapHost_Cause_User_CertRevoked = iid
    End Function
    Public Function GUID_EapHost_Cause_User_Account_OtherProblem() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 1, &HE)
    GUID_EapHost_Cause_User_Account_OtherProblem = iid
    End Function
    Public Function GUID_EapHost_Cause_User_CredsRejected() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 2, &HE)
    GUID_EapHost_Cause_User_CredsRejected = iid
    End Function
    Public Function GUID_EapHost_Cause_User_Root_CertExpired() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &HF)
    GUID_EapHost_Cause_User_Root_CertExpired = iid
    End Function
    Public Function GUID_EapHost_Cause_User_Root_CertInvalid() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &H10)
    GUID_EapHost_Cause_User_Root_CertInvalid = iid
    End Function
    Public Function GUID_EapHost_Cause_User_Root_CertNotFound() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &H11)
    GUID_EapHost_Cause_User_Root_CertNotFound = iid
    End Function
    Public Function GUID_EapHost_Cause_Server_Root_CertNameRequired() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &H12)
    GUID_EapHost_Cause_Server_Root_CertNameRequired = iid
    End Function
    Public Function GUID_EapHost_Cause_Server_Root_CertNotFound() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 1, &H12)
    GUID_EapHost_Cause_Server_Root_CertNotFound = iid
    End Function
    Public Function GUID_EapHost_Cause_ThirdPartyMethod_Host_Reset() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 2, &H12)
    GUID_EapHost_Cause_ThirdPartyMethod_Host_Reset = iid
    End Function
    Public Function GUID_EapHost_Cause_EapQecInaccessible() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 3, &H12)
    GUID_EapHost_Cause_EapQecInaccessible = iid
    End Function
    Public Function GUID_EapHost_Repair_Server_ClientSelectServerCert() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &H18)
    GUID_EapHost_Repair_Server_ClientSelectServerCert = iid
    End Function
    Public Function GUID_EapHost_Repair_User_AuthFailure() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &H19)
    GUID_EapHost_Repair_User_AuthFailure = iid
    End Function
    Public Function GUID_EapHost_Repair_User_GetNewCert() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &H1A)
    GUID_EapHost_Repair_User_GetNewCert = iid
    End Function
    Public Function GUID_EapHost_Repair_User_SelectValidCert() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &H1B)
    GUID_EapHost_Repair_User_SelectValidCert = iid
    End Function
    Public Function GUID_EapHost_Repair_Retry_Authentication() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 1, &H1B)
    GUID_EapHost_Repair_Retry_Authentication = iid
    End Function
    Public Function GUID_EapHost_Cause_EapNegotiationFailed() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &H1C)
    GUID_EapHost_Cause_EapNegotiationFailed = iid
    End Function
    Public Function GUID_EapHost_Cause_XmlMalformed() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &H1D)
    GUID_EapHost_Cause_XmlMalformed = iid
    End Function
    Public Function GUID_EapHost_Cause_MethodDoesNotSupportOperation() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &H1E)
    GUID_EapHost_Cause_MethodDoesNotSupportOperation = iid
    End Function
    Public Function GUID_EapHost_Repair_ContactAdmin_AuthFailure() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &H1F)
    GUID_EapHost_Repair_ContactAdmin_AuthFailure = iid
    End Function
    Public Function GUID_EapHost_Repair_ContactAdmin_IdentityUnknown() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &H20)
    GUID_EapHost_Repair_ContactAdmin_IdentityUnknown = iid
    End Function
    Public Function GUID_EapHost_Repair_ContactAdmin_NegotiationFailed() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &H21)
    GUID_EapHost_Repair_ContactAdmin_NegotiationFailed = iid
    End Function
    Public Function GUID_EapHost_Repair_ContactAdmin_MethodNotFound() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &H22)
    GUID_EapHost_Repair_ContactAdmin_MethodNotFound = iid
    End Function
    Public Function GUID_EapHost_Repair_RestartNap() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &H23)
    GUID_EapHost_Repair_RestartNap = iid
    End Function
    Public Function GUID_EapHost_Repair_ContactAdmin_CertStoreInaccessible() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &H24)
    GUID_EapHost_Repair_ContactAdmin_CertStoreInaccessible = iid
    End Function
    Public Function GUID_EapHost_Repair_ContactAdmin_InvalidUserAccount() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &H25)
    GUID_EapHost_Repair_ContactAdmin_InvalidUserAccount = iid
    End Function
    Public Function GUID_EapHost_Repair_ContactAdmin_RootCertInvalid() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &H26)
    GUID_EapHost_Repair_ContactAdmin_RootCertInvalid = iid
    End Function
    Public Function GUID_EapHost_Repair_ContactAdmin_RootCertNotFound() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &H27)
    GUID_EapHost_Repair_ContactAdmin_RootCertNotFound = iid
    End Function
    Public Function GUID_EapHost_Repair_ContactAdmin_RootExpired() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &H28)
    GUID_EapHost_Repair_ContactAdmin_RootExpired = iid
    End Function
    Public Function GUID_EapHost_Repair_ContactAdmin_CertNameAbsent() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &H29)
    GUID_EapHost_Repair_ContactAdmin_CertNameAbsent = iid
    End Function
    Public Function GUID_EapHost_Repair_ContactAdmin_NoSmartCardReader() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &H2A)
    GUID_EapHost_Repair_ContactAdmin_NoSmartCardReader = iid
    End Function
    Public Function GUID_EapHost_Cause_No_SmartCardReader_Found() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &H2B)
    GUID_EapHost_Cause_No_SmartCardReader_Found = iid
    End Function
    Public Function GUID_EapHost_Repair_ContactAdmin_InvalidUserCert() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &H2C)
    GUID_EapHost_Repair_ContactAdmin_InvalidUserCert = iid
    End Function
    Public Function GUID_EapHost_Repair_Method_Not_Support_Sso() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &H2D)
    GUID_EapHost_Repair_Method_Not_Support_Sso = iid
    End Function
    Public Function GUID_EapHost_Repair_No_ValidSim_Found() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9612fc67, &H6150, &H4209, &Ha8, &H5e, &Ha8, &Hd8, 0, 0, 0, &H2E)
    GUID_EapHost_Repair_No_ValidSim_Found = iid
    End Function
    Public Function GUID_EapHost_Help_ObtainingCerts() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf535eea3, &H1bdd, &H46ca, &Ha2, &Hfc, &Ha6, &H65, &H59, &H39, &Hb7, &He8)
    GUID_EapHost_Help_ObtainingCerts = iid
    End Function
    Public Function GUID_EapHost_Help_Troubleshooting() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H33307acf, &H0698, &H41ba, &Hb0, &H14, &Hea, &H0a, &H2e, &Hb8, &Hd0, &Ha8)
    GUID_EapHost_Help_Troubleshooting = iid
    End Function
    Public Function GUID_EapHost_Cause_Method_Config_Does_Not_Support_Sso() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hda18bd32, &H004F, &H41fa, &Hae, &H08, &H0b, &Hc8, &H5e, &H58, &H45, &Hac)
    GUID_EapHost_Cause_Method_Config_Does_Not_Support_Sso = iid
    End Function
    
End Module
#End If