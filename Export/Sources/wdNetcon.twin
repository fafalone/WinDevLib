'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

'WinDevLib - wdNetcon :: Network Connections


    [InterfaceId("C08956A0-1CD3-11D1-B1C5-00805FC1270E")]
    [OleAutomation(False)]
    Interface IEnumNetConnection Extends stdole.IUnknown
        [PreserveSig]
        Function Next(ByVal celt As Long, ByRef rgelt As INetConnection, ByRef pceltFetched As Long) As Long
        Sub Skip(ByVal celt As Long)
        Sub Reset()
        Sub Clone(ByRef ppenum As IEnumNetConnection)
    End Interface

    [InterfaceId("C08956A1-1CD3-11D1-B1C5-00805FC1270E")]
    [OleAutomation(False)]
    Interface INetConnection Extends stdole.IUnknown
        [PreserveSig]
        Function Connect() As Long
        [PreserveSig]
        Function Disconnect() As Long
        [PreserveSig]
        Function Delete() As Long
        [PreserveSig]
        Function Duplicate(ByVal pszwDuplicateName As LongPtr, ByRef ppCon As INetConnection) As Long
        [PreserveSig]
        Function GetProperties(ByRef ppProps As LongPtr) As Long
        [PreserveSig]
        Function GetUiObjectClassId(ByRef pclsid As UUID) As Long
        [PreserveSig]
        Function Rename(ByVal pszwNewName As LongPtr) As Long
    End Interface


    [InterfaceId("C08956A2-1CD3-11D1-B1C5-00805FC1270E")]
    [OleAutomation(False)]
    Interface INetConnectionManager Extends stdole.IUnknown
        Sub EnumConnections(ByVal flags As NETCONMGR_ENUM_FLAGS, ByRef ppenum As IEnumNetConnection)
    End Interface

    [InterfaceId("C08956A3-1CD3-11D1-B1C5-00805FC1270E")]
    [OleAutomation(False)]
    Interface INetConnectionConnectUi Extends stdole.IUnknown
        Sub SetConnection(ByVal pCon As INetConnection)
        [PreserveSig]
        Function Connect(ByVal hwndParent As LongPtr, ByVal dwFlags As Long) As Long
        [PreserveSig]
        Function Disconnect(ByVal hwndParent As LongPtr, ByVal dwFlags As Long) As Long
    End Interface

    [InterfaceId("C08956B0-1CD3-11D1-B1C5-00805FC1270E")]
    [OleAutomation(False)]
    Interface IEnumNetSharingPortMapping Extends stdole.IUnknown
        [PreserveSig]
        Function Next(ByVal celt As Long, ByRef rgvar As Variant, ByRef pceltFetched As Long) As Long
        Sub Skip(ByVal celt As Long)
        Sub Reset()
        Sub Clone(ByRef ppenum As IEnumNetSharingPortMapping)
    End Interface


   [InterfaceId("24B7E9B5-E38F-4685-851B-00892CF5F940")]
    '[ DualInterface]
    [OleAutomation(False)]
    Interface INetSharingPortMappingProps Extends IDispatch
        [DispId(1)]
        [Description("property Name")]
        Property Get Name() As String
        [DispId(2)]
        [Description("property IPProtocol")]
        Property Get IPProtocol() As Byte
        [DispId(3)]
        [Description("property ExternalPort")]
        Property Get ExternalPort() As Long
        [DispId(4)]
        [Description("property InternalPort")]
        Property Get InternalPort() As Long
        [DispId(5)]
        [Description("property Options")]
        Property Get Options() As Long
        [DispId(6)]
        [Description("property TargetName")]
        Property Get TargetName() As String
        [DispId(7)]
        [Description("property TargetIPAddress")]
        Property Get TargetIPAddress() As String
        [DispId(8)]
        [Description("property Enabled")]
        Property Get Enabled() As Boolean
    End Interface

    [InterfaceId("C08956B1-1CD3-11D1-B1C5-00805FC1270E")]
    '[ DualInterface]
    [OleAutomation(False)]
    Interface INetSharingPortMapping Extends IDispatch
        [DispId(1)]
        [Description("method Disable")]
        Sub Disable()
        [DispId(2)]
        [Description("method Enable")]
        Sub Enable()
        [DispId(3)]
        [Description("property Properties")]
        Property Get Properties() As INetSharingPortMappingProps
        [DispId(4)]
        [Description("method Delete")]
        Sub Delete()
    End Interface

    [InterfaceId("02E4A2DE-DA20-4E34-89C8-AC22275A010B")]
    '[ DualInterface]
    [Description("INetSharingPortMappingCollection Interface")]
    [OleAutomation(False)]
    Interface INetSharingPortMappingCollection Extends IDispatch
        [DispId(0), Restricted]
        [Description("property _NewEnum:  gets item enumerator")]
        Property Get _NewEnum() As IUnknown
        [DispId(1)]
        [Description("property Count")]
        Property Get Count() As Long
    End Interface

    [InterfaceId("F4277C95-CE5B-463D-8167-5662D9BCAA72")]
    '[ DualInterface]
    [Description("INetConnectionProps Interface")]
    [OleAutomation(False)]
    Interface INetConnectionProps Extends IDispatch
        [DispId(1)]
        [Description("property Guid")]
        Property Get guid() As String
        [DispId(2)]
        [Description("property Name")]
        Property Get Name() As String
        [DispId(3)]
        [Description("property DeviceName")]
        Property Get DeviceName() As String
        [DispId(4)]
        [Description("property Status")]
        Property Get Status() As NETCON_STATUS
        [DispId(5)]
        [Description("property MediaType")]
        Property Get MediaType() As NETCON_MEDIATYPE
        [DispId(6)]
        [Description("property Characteristics")]
        Property Get Characteristics() As Long
    End Interface

    [InterfaceId("C08956B6-1CD3-11D1-B1C5-00805FC1270E")]
    '[ DualInterface]
    [OleAutomation(False)]
    Interface INetSharingConfiguration Extends IDispatch
        [DispId(1)]
        [Description("property SharingEnabled")]
        Property Get SharingEnabled() As Boolean
        [DispId(2)]
        [Description("property SharingConnectionType")]
        Property Get SHARINGCONNECTIONTYPE() As SHARINGCONNECTIONTYPE
        [DispId(3)]
        [Description("method DisableSharing")]
        Sub DisableSharing()
        [DispId(4)]
        [Description("method EnableSharing")]
        Sub EnableSharing(ByVal type As SHARINGCONNECTIONTYPE)
        [DispId(5)]
        [Description("property InternetFirewallEnabled")]
        Property Get InternetFirewallEnabled() As Boolean
        [DispId(6)]
        [Description("method DisableInternetFirewall")]
        Sub DisableInternetFirewall()
        [DispId(7)]
        [Description("method EnableInternetFirewall")]
        Sub EnableInternetFirewall()
        [DispId(8)]
        [Description("EnumPortMappings")]
        Property Get EnumPortMappings(ByVal flags As SHARINGCONNECTION_ENUM_FLAGS) As INetSharingPortMappingCollection
        [DispId(9)]
        [Description("method AddPortMapping")]
        Function AddPortMapping(ByVal bstrName As String, ByVal ucIPProtocol As Byte, ByVal usExternalPort As Integer, ByVal usInternalPort As Integer, ByVal dwOptions As Long, ByVal bstrTargetNameOrIPAddress As String, ByVal eTargetType As ICS_TARGETTYPE) As INetSharingPortMapping
        [DispId(10)]
        [Description("method RemovePortMapping")]
        Sub RemovePortMapping(ByVal pMapping As INetSharingPortMapping)
    End Interface

    [InterfaceId("33C4643C-7811-46FA-A89A-768597BD7223")]
    '[ DualInterface]
    [Description("INetSharingEveryConnectionCollection Interface")]
    [OleAutomation(False)]
    Interface INetSharingEveryConnectionCollection Extends IDispatch
        [DispId(0), Restricted]
        [Description("property _NewEnum:  gets item enumerator")]
        Property Get _NewEnum() As IUnknown
        [DispId(1)]
        [Description("property Count")]
        Property Get Count() As Long
    End Interface

    [InterfaceId("7D7A6355-F372-4971-A149-BFC927BE762A")]
    '[ DualInterface]
    [Description("INetSharingPublicConnectionCollection Interface")]
    [OleAutomation(False)]
    Interface INetSharingPublicConnectionCollection Extends IDispatch
        [DispId(0), Restricted]
        [Description("property _NewEnum:  gets item enumerator")]
        Property Get _NewEnum() As IUnknown
        [DispId(1)]
        [Description("property Count")]
        Property Get Count() As Long
    End Interface

    [InterfaceId("38AE69E0-4409-402A-A2CB-E965C727F840")]
    '[ DualInterface]
    [Description("INetSharingPrivateConnectionCollection Interface")]
    [OleAutomation(False)]
    Interface INetSharingPrivateConnectionCollection Extends IDispatch
        [DispId(0), Restricted]
        [Description("property _NewEnum:  gets item enumerator")]
        Property Get _NewEnum() As IUnknown
        [DispId(1)]
        [Description("property Count")]
        Property Get Count() As Long
    End Interface

    [InterfaceId("C08956B7-1CD3-11D1-B1C5-00805FC1270E")]
    '[ DualInterface]
    [OleAutomation(False)]
    Interface INetSharingManager Extends IDispatch
        [DispId(1)]
        [Description("property SharingInstalled")]
        Property Get SharingInstalled() As Integer
        [DispId(2)]
        [Description("EnumPublicConnections")]
        Property Get EnumPublicConnections(ByVal flags As SHARINGCONNECTION_ENUM_FLAGS) As INetSharingPublicConnectionCollection
        [DispId(3)]
        [Description("EnumPrivateConnections")]
        Property Get EnumPrivateConnections(ByVal flags As SHARINGCONNECTION_ENUM_FLAGS) As INetSharingPrivateConnectionCollection
        [DispId(6)]
        [Description("INetSharingConfigurationForINetConnection")]
        Property Get INetSharingConfigurationForINetConnection(ByVal pNetConnection As LongPtr) As INetSharingConfiguration
        [DispId(7)]
        [Description("EnumEveryConnection")]
        Property Get EnumEveryConnection() As INetSharingEveryConnectionCollection
        [DispId(8)]
        [Description("NetConnectionProps")]
        Property Get NetConnectionProps(ByVal pNetConnection As LongPtr) As INetConnectionProps
    End Interface

    'CLSID_NetSharingManager 
    [CoClassId("5C63C1AD-3956-4FF8-8486-40034758315B")]
    CoClass NetSharingManager
        [Default] Interface INetSharingManager
    End CoClass
    'CLSID_ConnectionManager 
    [CoClassId("BA126AD1-2166-11D1-B1D0-00805FC1270E")]
    CoClass ConnectionManager
        [Default] Interface INetConnectionManager
    End CoClass
    
    
#If WDL_QUALIFY Then
[MustBeQualified]
#End If
Module wdNetcon

Public Enum NETCON_CHARACTERISTIC_FLAGS
	NCCF_NONE = &H0000 ' No special characteristics
	NCCF_ALL_USERS = &H0001 ' Connection is available to all users
	NCCF_ALLOW_DUPLICATION = &H0002 ' Connection is duplicable
	NCCF_ALLOW_REMOVAL = &H0004 ' Connection is removable
	NCCF_ALLOW_RENAME = &H0008 ' Connection can be renamed
	NCCF_INCOMING_ONLY = &H0020 ' Direction is "incoming" only
	NCCF_OUTGOING_ONLY = &H0040 ' Direction is "outgoing" only
	NCCF_BRANDED = &H0080 ' Icons are branded
	NCCF_SHARED = &H0100 ' Connection is shared
	NCCF_BRIDGED = &H0200 ' Connection is bridged
	NCCF_FIREWALLED = &H0400 ' Connection is firewalled
	NCCF_DEFAULT = &H0800 ' This is the default connection
	NCCF_HOMENET_CAPABLE = &H1000 ' The device supports home networking
	NCCF_SHARED_PRIVATE = &H2000 ' The connection is private (part of ICS)
	NCCF_QUARANTINED = &H4000 ' Connection is quarantined
	NCCF_RESERVED = &H8000& ' Unused
	NCCF_HOSTED_NETWORK = &H00010000 ' Connection is used as Hosted Network
	NCCF_VIRTUAL_STATION = &H00020000 ' Connection is used as Virtual WiFi Station
	NCCF_WIFI_DIRECT = &H00040000 ' Connection is a Wi-Fi Direct network
	NCCF_BLUETOOTH_MASK = &H000F0000 ' Bluetooth Characteristics
	NCCF_LAN_MASK = &H00F00000 ' LAN Characteristics
End Enum

Public Enum NETCON_STATUS
	NCS_DISCONNECTED
	NCS_CONNECTING
	NCS_CONNECTED
	NCS_DISCONNECTING
	NCS_HARDWARE_NOT_PRESENT
	NCS_HARDWARE_DISABLED
	NCS_HARDWARE_MALFUNCTION
	NCS_MEDIA_DISCONNECTED
	NCS_AUTHENTICATING
	NCS_AUTHENTICATION_SUCCEEDED
	NCS_AUTHENTICATION_FAILED
	NCS_INVALID_ADDRESS
	NCS_CREDENTIALS_REQUIRED
	NCS_ACTION_REQUIRED
	NCS_ACTION_REQUIRED_RETRY
	NCS_CONNECT_FAILED
End Enum

Public Enum NETCON_TYPE
	NCT_DIRECT_CONNECT 'deprecated and will be removed
	NCT_INBOUND = 1
	NCT_INTERNET
	NCT_LAN
	NCT_PHONE
	NCT_TUNNEL
	NCT_BRIDGE
End Enum

Public Enum NETCON_MEDIATYPE
	NCM_NONE
	NCM_DIRECT '// deprecated and will be removed
	NCM_ISDN = 2
	NCM_LAN
	NCM_PHONE
	NCM_TUNNEL
	NCM_PPPOE
	NCM_BRIDGE
	NCM_SHAREDACCESSHOST_LAN
	NCM_SHAREDACCESSHOST_RAS
End Enum

Public Type NETCON_PROPERTIES
	guidId As UUID
	pszwName As LongPtr '[string] LPWSTR
	pszwDeviceName As LongPtr '[string] LPWSTR
	Status As NETCON_STATUS
	MediaType As NETCON_MEDIATYPE
	dwCharacter As Long
	clsidThisObject As UUID
	clsidUiObject As UUID
End Type

Public Enum NETCONMGR_ENUM_FLAGS
	NCME_DEFAULT = &H0
	NCME_HIDDEN = &H1
End Enum

Public Enum NETCONUI_CONNECT_FLAGS
	NCUC_DEFAULT = &H0000
	NCUC_NO_UI = &H0001
	NCUC_ENABLE_DISABLE = &H0002
End Enum

Public Enum SHARINGCONNECTIONTYPE
	ICSSHARINGTYPE_PUBLIC = &H0
	ICSSHARINGTYPE_PRIVATE = 1
End Enum

Public Enum SHARINGCONNECTION_ENUM_FLAGS
	ICSSC_DEFAULT = &H0
	ICSSC_ENABLED = 1
End Enum

Public Enum ICS_TARGETTYPE
	ICSTT_NAME = &H0
	ICSTT_IPADDRESS = 1
End Enum

Public Const sCLSID_NetSharingManager = "new: {5C63C1AD-3956-4FF8-8486-40034758315B}"
Public Const sCLSID_ConnectionManager = "new: {BA126AD1-2166-11D1-B1D0-00805FC1270E}"

Public Function CLSID_NetSharingManager() As UUID
'{5C63C1AD-3956-4FF8-8486-40034758315B}
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5C63C1AD, CInt(&H3956), CInt(&H4FF8), &H84, &H86, &H40, &H03, &H47, &H58, &H31, &H5B)
    CLSID_NetSharingManager = iid
End Function
Public Function CLSID_ConnectionManager() As UUID
'{BA126AD1-2166-11D1-B1D0-00805FC1270E}
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBA126AD1, CInt(&H2166), CInt(&H11D1), &HB1, &HD0, &H00, &H80, &H5F, &HC1, &H27, &H0E)
    CLSID_ConnectionManager = iid
End Function
    
End Module