'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************


[InterfaceId("4F62C8DA-9C53-4B22-93DF-927A862BBB03")]
[OleAutomation(False)]
Interface IManipulationEvents Extends stdole.IUnknown
    Sub ManipulationStarted(ByVal x As Single, ByVal y As Single)
    Sub ManipulationDelta(ByVal x As Single, ByVal y As Single, ByVal translationDeltaX As Single, ByVal translationDeltaY As Single, ByVal scaleDelta As Single, ByVal expansionDelta As Single, ByVal rotationDelta As Single, ByVal cumulativeTranslationX As Single, ByVal cumulativeTranslationY As Single, ByVal cumulativeScale As Single, ByVal cumulativeExpansion As Single, ByVal cumulativeRotation As Single)
    Sub ManipulationCompleted(ByVal x As Single, ByVal y As Single, ByVal cumulativeTranslationX As Single, ByVal cumulativeTranslationY As Single, ByVal cumulativeScale As Single, ByVal cumulativeExpansion As Single, ByVal cumulativeRotation As Single)
End Interface

[InterfaceId("18B00C6D-C5EE-41B1-90A9-9D4A929095AD")]
[OleAutomation(False)]
Interface IInertiaProcessor Extends stdole.IUnknown
    Sub get_InitialOriginX(ByRef x As Single)
    Sub put_InitialOriginX(ByVal x As Single)
    Sub get_InitialOriginY(ByRef y As Single)
    Sub put_InitialOriginY(ByVal y As Single)
    Sub get_InitialVelocityX(ByRef x As Single)
    Sub put_InitialVelocityX(ByVal x As Single)
    Sub get_InitialVelocityY(ByRef y As Single)
    Sub put_InitialVelocityY(ByVal y As Single)
    Sub get_InitialAngularVelocity(ByRef velocity As Single)
    Sub put_InitialAngularVelocity(ByVal velocity As Single)
    Sub get_InitialExpansionVelocity(ByRef velocity As Single)
    Sub put_InitialExpansionVelocity(ByVal velocity As Single)
    Sub get_InitialRadius(ByRef radius As Single)
    Sub put_InitialRadius(ByVal radius As Single)
    Sub get_BoundaryLeft(ByRef Left As Single)
    Sub put_BoundaryLeft(ByVal Left As Single)
    Sub get_BoundaryTop(ByRef Top As Single)
    Sub put_BoundaryTop(ByVal Top As Single)
    Sub get_BoundaryRight(ByRef Right As Single)
    Sub put_BoundaryRight(ByVal Right As Single)
    Sub get_BoundaryBottom(ByRef Bottom As Single)
    Sub put_BoundaryBottom(ByVal Bottom As Single)
    Sub get_ElasticMarginLeft(ByRef Left As Single)
    Sub put_ElasticMarginLeft(ByVal Left As Single)
    Sub get_ElasticMarginTop(ByRef Top As Single)
    Sub put_ElasticMarginTop(ByVal Top As Single)
    Sub get_ElasticMarginRight(ByRef Right As Single)
    Sub put_ElasticMarginRight(ByVal Right As Single)
    Sub get_ElasticMarginBottom(ByRef Bottom As Single)
    Sub put_ElasticMarginBottom(ByVal Bottom As Single)
    Sub get_DesiredDisplacement(ByRef displacement As Single)
    Sub put_DesiredDisplacement(ByVal displacement As Single)
    Sub get_DesiredRotation(ByRef rotation As Single)
    Sub put_DesiredRotation(ByVal rotation As Single)
    Sub get_DesiredExpansion(ByRef expansion As Single)
    Sub put_DesiredExpansion(ByVal expansion As Single)
    Sub get_DesiredDeceleration(ByRef deceleration As Single)
    Sub put_DesiredDeceleration(ByVal deceleration As Single)
    Sub get_DesiredAngularDeceleration(ByRef deceleration As Single)
    Sub put_DesiredAngularDeceleration(ByVal deceleration As Single)
    Sub get_DesiredExpansionDeceleration(ByRef deceleration As Single)
    Sub put_DesiredExpansionDeceleration(ByVal deceleration As Single)
    Sub get_InitialTimestamp(ByRef timestamp As Long)
    Sub put_InitialTimestamp(ByVal timestamp As Long)
    Sub Reset()
    Sub Process(ByVal completed As Long)
    Sub ProcessTime(ByVal timestamp As Long, ByVal completed As Long)
    Sub Complete()
    Sub CompleteTime(ByVal timestamp As Long)
End Interface

[InterfaceId("A22AC519-8300-48A0-BEF4-F1BE8737DBA4")]
[OleAutomation(False)]
Interface IManipulationProcessor Extends stdole.IUnknown
    Sub get_SupportedManipulations(ByRef manipulations As MANIPULATION_PROCESSOR_MANIPULATIONS)
    Sub put_SupportedManipulations(ByVal manipulations As MANIPULATION_PROCESSOR_MANIPULATIONS)
    Sub get_PivotPointX(ByRef pivotPointX As Single)
    Sub put_PivotPointX(ByVal pivotPointX As Single)
    Sub get_PivotPointY(ByRef pivotPointY As Single)
    Sub put_PivotPointY(ByVal pivotPointY As Single)
    Sub get_PivotRadius(ByRef pivotRadius As Single)
    Sub put_PivotRadius(ByVal pivotRadius As Single)
    Sub CompleteManipulation()
    Sub ProcessDown(ByVal manipulatorId As Long, ByVal x As Single, ByVal y As Single)
    Sub ProcessMove(ByVal manipulatorId As Long, ByVal x As Single, ByVal y As Single)
    Sub ProcessUp(ByVal manipulatorId As Long, ByVal x As Single, ByVal y As Single)
    Sub ProcessDownWithTime(ByVal manipulatorId As Long, ByVal x As Single, ByVal y As Single, ByVal timestamp As Long)
    Sub ProcessMoveWithTime(ByVal manipulatorId As Long, ByVal x As Single, ByVal y As Single, ByVal timestamp As Long)
    Sub ProcessUpWithTime(ByVal manipulatorId As Long, ByVal x As Single, ByVal y As Single, ByVal timestamp As Long)
    Sub GetVelocityX(ByRef velocityX As Single)
    Sub GetVelocityY(ByRef velocityY As Single)
    Sub GetExpansionVelocity(ByRef expansionVelocity As Single)
    Sub GetAngularVelocity(ByRef angularVelocity As Single)
    Sub get_MinimumScaleRotateRadius(ByRef minRadius As Single)
    Sub put_MinimumScaleRotateRadius(ByVal minRadius As Single)
End Interface

'CLSID_InertiaProcessor 
[CoClassId("abb27087-4ce0-4e58-a0cb-e24df96814be")]
CoClass InertiaProcessor
	 [Default] Interface IInertiaProcessor
     Interface IManipulationEvents
End CoClass

'CLSID_ManipulationProcessor 
[CoClassId("597D4FB0-47FD-4aff-89B9-C6CFAE8CF08E")]
CoClass ManipulationProcessor
	 [Default] Interface IManipulationProcessor
     Interface IManipulationEvents
End CoClass

Module wdManipulations

Public Enum MANIPULATION_PROCESSOR_MANIPULATIONS
    MANIPULATION_NONE = 0                                ' &H00000000&
    MANIPULATION_TRANSLATE_X = 1                         ' &H00000001&
    MANIPULATION_TRANSLATE_Y = 2                         ' &H00000002&
    MANIPULATION_SCALE = 4                               ' &H00000004&
    MANIPULATION_ROTATE = 8                              ' &H00000008&
    MANIPULATION_ALL = 15
End Enum

Public Const sCLSID_InertiaProcessor = "new: {abb27087-4ce0-4e58-a0cb-e24df96814be}"
Public Const sCLSID_ManipulationProcessor = "new: {597D4FB0-47FD-4aff-89B9-C6CFAE8CF08E}"

End Module