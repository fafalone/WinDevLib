'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

'WinDevLib - wdCoreAudio :: Core Audio Interfaces, exp_audio.idl and mCoreAudio.bas

' AudioAPOTypes.h - Verified 100%
' audioclient.h/.idl - Verified 100%
' audioclientactivationparams.h - Verified 100%
' audioendpoints.h/.idl - Verified 100%
' audioenginebaseapo.h/.idl - Verified 100%
' audioengineendpoint.h/.idl - Verified 100%
' audiomediatype.h/.idl - Verified 100%
' audiopolicy.h/.idl - Verified 100%
' audiosessiontypes.h - Verified 100%
' audiostatemonitorapi.h - Verified 100%
' devicetopology.h/.idl - Verified 100%
' endpointvolume.h - Verified 100%
' mmdeviceapi.h - Verified 100%
' spatialaudioclient.h - Verified 100%
' spatialaudiohrtf.h - Verified 100%
' spatialaudiometadata.h - Verified 100%

#Region "Interfaces"
[InterfaceId("7991EEC9-7E89-4D85-8390-6C703CEC60C0")]
[OleAutomation(False)]
Interface IMMNotificationClient Extends stdole.IUnknown
    Sub OnDeviceStateChanged(ByVal pwstrDeviceId As LongPtr, ByVal dwNewState As DEVICE_STATE)
    Sub OnDeviceAdded(ByVal pwstrDeviceId As LongPtr)
    Sub OnDeviceRemoved(ByVal pwstrDeviceId As LongPtr)
    Sub OnDefaultDeviceChanged(ByVal flow As EDataFlow, ByVal role As ERole, ByVal pwstrDefaultDeviceId As LongPtr)
    #If Win64 Then
    Sub OnPropertyValueChanged(ByVal pwstrDeviceId As LongPtr, pK As PROPERTYKEY)
    #Else
    Sub OnPropertyValueChanged(ByVal pwstrDeviceId As LongPtr, ByVal key As Long, ByVal w12 As Long, ByVal b0123 As Long, ByVal b4567 As Long, ByVal pid As Long)
    #End If
End Interface

[InterfaceId("D666063F-1587-4E43-81F1-B948E807363F")]
[OleAutomation(False)]
Interface IMMDevice Extends stdole.IUnknown
    [PreserveSig] Function Activate(iid As UUID, ByVal dwClsCtx As CLSCTX, pActivationParams As Variant, ppInterface As Any) As Long
    [PreserveSig] Function OpenPropertyStore(ByVal stgmAccess As STGM, ppProperties As IPropertyStore) As Long
    [PreserveSig] Function GetId(ppstrId As LongPtr) As Long
    [PreserveSig] Function GetState(pdwState As DEVICE_STATE) As Long
End Interface

[InterfaceId("0BD7A1BE-7A1A-44DB-8397-CC5392387B5E")]
[OleAutomation(False)]
Interface IMMDeviceCollection Extends stdole.IUnknown
    [PreserveSig] Function GetCount(pcDevices As Long) As Long
    [PreserveSig] Function Item(ByVal nDevice As Long, ppDevice As IMMDevice) As Long
End Interface

[InterfaceId("1BE09788-6894-4089-8586-9A2A6C265AC5")]
[OleAutomation(False)]
Interface IMMEndpoint Extends stdole.IUnknown
    [PreserveSig] Function GetDataFlow(pDataFlow As EDataFlow) As Long
End Interface

[InterfaceId("A95664D2-9614-4F35-A746-DE8DB63617E6")]
[OleAutomation(False)]
Interface IMMDeviceEnumerator Extends stdole.IUnknown
    [PreserveSig] Function EnumAudioEndpoints(ByVal dataFlow As EDataFlow, ByVal dwStateMask As DEVICE_STATE, ppDevices As IMMDeviceCollection) As Long
    [PreserveSig] Function GetDefaultAudioEndpoint(ByVal dataFlow As EDataFlow, ByVal role As ERole, ppEndpoint As IMMDevice) As Long
    [PreserveSig] Function GetDevice(ByVal pwstrId As LongPtr, ppDevice As IMMDevice) As Long
    [PreserveSig] Function RegisterEndpointNotificationCallback(ByVal pClient As IMMNotificationClient) As Long
    [PreserveSig] Function UnregisterEndpointNotificationCallback(ByVal pClient As IMMNotificationClient) As Long
End Interface

[InterfaceId("3B0D0EA4-D0A9-4B0E-935B-09516746FAC0")]
[OleAutomation(False)]
Interface IMMDeviceActivator Extends stdole.IUnknown
    [PreserveSig] Function Activate(iid As UUID, ByVal pDevice As IMMDevice, pActivationParams As Variant, ppInterface As Any) As Long
End Interface

[InterfaceId("41D949AB-9862-444A-80F6-C261334DA5EB")]
[OleAutomation(False)]
Interface IActivateAudioInterfaceCompletionHandler Extends stdole.IUnknown
    Sub ActivateCompleted(ByVal activateOperation As IActivateAudioInterfaceAsyncOperation)
End Interface

[InterfaceId("72A22D78-CDE4-431D-B8CC-843A71199B6D")]
[OleAutomation(False)]
Interface IActivateAudioInterfaceAsyncOperation Extends stdole.IUnknown
    Sub GetActivateResult(activateResult As Long, activatedInterface As stdole.IUnknown)
End Interface

[InterfaceId("657804FA-D6AD-4496-8A60-352752AF4F89")]
[OleAutomation(False)]
Interface IAudioEndpointVolumeCallback Extends stdole.IUnknown
    Sub OnNotify(pNotify As AUDIO_VOLUME_NOTIFICATION_DATA)
End Interface

[InterfaceId("5CDF2C82-841E-4546-9722-0CF74078229A")]
[Description("AudioEndpointVolume interface")]
[OleAutomation(False)]
Interface IAudioEndpointVolume Extends stdole.IUnknown
    [PreserveSig] Function RegisterControlChangeNotify(ByVal pNotify As IAudioEndpointVolumeCallback) As Long
    [PreserveSig] Function UnregisterControlChangeNotify(ByVal pNotify As IAudioEndpointVolumeCallback) As Long
    [PreserveSig] Function GetChannelCount(pnChannelCount As Long) As Long
    [PreserveSig] Function SetMasterVolumeLevel(ByVal fLevelDB As Single, pguidEventContext As UUID) As Long
    [PreserveSig] Function SetMasterVolumeLevelScalar(ByVal fLevel As Single, pguidEventContext As UUID) As Long
    [PreserveSig] Function GetMasterVolumeLevel(pfLevelDB As Single) As Long
    [PreserveSig] Function GetMasterVolumeLevelScalar(pfLevel As Single) As Long
    [PreserveSig] Function SetChannelVolumeLevel(ByVal nChannel As Long, ByVal fLevelDB As Single, pguidEventContext As UUID) As Long
    [PreserveSig] Function SetChannelVolumeLevelScalar(ByVal nChannel As Long, ByVal fLevel As Single, pguidEventContext As UUID) As Long
    [PreserveSig] Function GetChannelVolumeLevel(ByVal nChannel As Long, pfLevelDB As Single) As Long
    [PreserveSig] Function GetChannelVolumeLevelScalar(ByVal nChannel As Long, pfLevel As Single) As Long
    [PreserveSig] Function SetMute(ByVal bMute As BOOL, pguidEventContext As UUID) As Long
    [PreserveSig] Function GetMute(pbMute As BOOL) As Long
    [PreserveSig] Function GetVolumeStepInfo(pnStep As Long, pnStepCount As Long) As Long
    [PreserveSig] Function VolumeStepUp(pguidEventContext As UUID) As Long
    [PreserveSig] Function VolumeStepDown(pguidEventContext As UUID) As Long
    [PreserveSig] Function QueryHardwareSupport(pdwHardwareSupportMask As ENDPOINT_HARDWARE_SUPPORT) As Long
    [PreserveSig] Function GetVolumeRange(pflVolumeMindB As Single, pflVolumeMaxdB As Single, pflVolumeIncrementdB As Single) As Long
End Interface

[InterfaceId("66E11784-F695-4F28-A505-A7080081A78F")]
[OleAutomation(False)]
Interface IAudioEndpointVolumeEx Extends IAudioEndpointVolume
    [PreserveSig] Function GetVolumeRangeChannel(ByVal iChannel As Long, pflVolumeMindB As Single, pflVolumeMaxdB As Single, pflVolumeIncrementdB As Single) As Long
End Interface

[InterfaceId("C02216F6-8C67-4B5B-9D00-D008E73E0064")]
[OleAutomation(False)]
Interface IAudioMeterInformation Extends stdole.IUnknown
    Sub GetPeakValue(pfPeak As Single)
    Sub GetMeteringChannelCount(pnChannelCount As Long)
    Sub GetChannelsPeakValues(ByVal u32ChannelCount As Long, afPeakValues As Single)
    Sub QueryHardwareSupport(pdwHardwareSupportMask As ENDPOINT_HARDWARE_SUPPORT)
End Interface

[InterfaceId("784CFD40-9F89-456E-A1A6-873B006A664E")]
[OleAutomation(False)]
Interface IAudioEndpointFormatControl Extends stdole.IUnknown
    [PreserveSig] Function ResetToDefault(ByVal ResetFlags As AudioEndpointFmtCtlFlags) As Long
End Interface

'devicetopology.h
[InterfaceId("28F54685-06FD-11D2-B27A-00A0C9223196")]
[OleAutomation(False)]
Interface IKsControl Extends stdole.IUnknown
    Sub KsProperty(property As KSIDENTIFIER, ByVal PropertyLength As Long, PropertyData As Any, ByVal DataLength As Long, BytesReturned As Long)
    Sub KsMethod(method As KSIDENTIFIER, ByVal MethodLength As Long, MethodData As Any, ByVal DataLength As Long, BytesReturned As Long)
    Sub KsEvent(event As KSIDENTIFIER, ByVal EventLength As Long, EventData As Any, ByVal DataLength As Long, BytesReturned As Long)
End Interface

[InterfaceId("7FB7B48F-531D-44A2-BCB3-5AD5A134B3DC")]
[OleAutomation(False)]
Interface IAudioVolumeLevel Extends IPerChannelDbLevel
End Interface

[InterfaceId("BB11C46F-EC28-493C-B88A-5DB88062CE98")]
[OleAutomation(False)]
Interface IAudioChannelConfig Extends stdole.IUnknown
    [PreserveSig] Function SetChannelConfig(ByVal dwConfig As Long, pguidEventContext As UUID) As Long
    Function GetChannelConfig() As Long
End Interface

[InterfaceId("7D8B1437-DD53-4350-9C1B-1EE2890BD938")]
[OleAutomation(False)]
Interface IAudioLoudness Extends stdole.IUnknown
    [PreserveSig] Function GetEnabled(pbEnabled As BOOL) As Long
    [PreserveSig] Function SetEnabled(ByVal bEnabled As BOOL, pguidEventContext As UUID) As Long
End Interface

[InterfaceId("4F03DC02-5E6E-4653-8F72-A030C123D598")]
[OleAutomation(False)]
Interface IAudioInputSelector Extends stdole.IUnknown
    [PreserveSig] Function GetSelection(pdIdSelected As Long) As Long
    [PreserveSig] Function SetSelection(ByVal nIdSelect As Long, pguidEventContext As UUID) As Long
End Interface

[InterfaceId("BB515F69-94A7-429e-8B9C-271B3F11A3AB")]
[OleAutomation(False)]
Interface IAudioOutputSelector Extends stdole.IUnknown
    [PreserveSig] Function GetSelection(pdIdSelected As Long) As Long
    [PreserveSig] Function SetSelection(ByVal nIdSelect As Long, pguidEventContext As UUID) As Long
End Interface

[InterfaceId("DF45AEEA-B74A-4B6B-AFAD-2366B6AA012E")]
[OleAutomation(False)]
Interface IAudioMute Extends stdole.IUnknown
    [PreserveSig] Function SetMute(ByVal bMute As BOOL, pguidEventContext As UUID) As Long
    [PreserveSig] Function GetMute(pbMute As BOOL) As Long
End Interface

[InterfaceId("C2F8E001-F205-4BC9-99BC-C13B1E048CCB")]
[OleAutomation(False)]
Interface IPerChannelDbLevel Extends stdole.IUnknown
    [PreserveSig] Function GetChannelCount(pcChannels As Long) As Long
    [PreserveSig] Function GetLevelRange(ByVal nChannel As Long, pfMinLevelDB As Single, pfMaxLevelDB As Single, pfStepping As Single) As Long
    [PreserveSig] Function GetLevel(ByVal nChannel As Long, pfLevelDB As Single) As Long
    [PreserveSig] Function SetLevel(ByVal nChannel As Long, ByVal fLevelDB As Single, pguidEventContext As UUID) As Long
    [PreserveSig] Function SetLevelAllChannels(ByVal aLevelsDB As LongPtr, ByVal cChannels As Long, pguidEventContext As UUID) As Long
End Interface

[InterfaceId("A2B1A1D9-4DB3-425D-A2B2-BD335CB3E2E5")]
[OleAutomation(False)]
Interface IAudioBass Extends IPerChannelDbLevel
End Interface

[InterfaceId("5E54B6D7-B44B-40D9-9A9E-E691D9CE6EDF")]
[OleAutomation(False)]
Interface IAudioMidrange Extends IPerChannelDbLevel
End Interface

[InterfaceId("0A717812-694E-4907-B74B-BAFA5CFDCA7B")]
[OleAutomation(False)]
Interface IAudioTreble Extends IPerChannelDbLevel
End Interface

[InterfaceId("85401FD4-6DE4-4b9d-9869-2D6753A82F3C")]
[OleAutomation(False)]
Interface IAudioAutoGainControl Extends stdole.IUnknown
    [PreserveSig] Function GetEnabled(pbEnabled As Long) As Long
    [PreserveSig] Function SetEnabled(ByVal bEnabled As Long, pguidEventContext As UUID) As Long
End Interface

[InterfaceId("DD79923C-0599-45e0-B8B6-C8DF7DB6E796")]
[OleAutomation(False)]
Interface IAudioPeakMeter Extends stdole.IUnknown
    [PreserveSig] Function GetChannelCount(pcChannels As Long) As Long
    [PreserveSig] Function GetLevel(ByVal nChannel As Long, pfLevel As Single) As Long
End Interface

[InterfaceId("3B22BCBF-2586-4af0-8583-205D391B807C")]
[OleAutomation(False)]
Interface IDeviceSpecificProperty Extends stdole.IUnknown
    [PreserveSig] Function GetType(pVType As Integer) As Long
    [PreserveSig] Function GetValue(pvValue As Any, pcbValue As Long) As Long
    [PreserveSig] Function SetValue(pvValue As Any, ByVal cbValue As Long, pguidEventContext As UUID) As Long
    [PreserveSig] Function Get4BRange(plMin As Long, plMax As Long, plStepping As Long) As Long
End Interface

[InterfaceId("3CB4A69D-BB6F-4D2B-95B7-452D2C155DB5")]
[OleAutomation(False)]
Interface IKsFormatSupport Extends stdole.IUnknown
    [PreserveSig] Function IsFormatSupported(pksFormat As KSDATAFORMAT, ByVal cbFormat As Long, pbSupported As Long) As Long
    [PreserveSig] Function GetDevicePreferredFormat(ppKsFormat As KSDATAFORMAT) As Long
End Interface

[InterfaceId("4509F757-2D46-4637-8E62-CE7DB944F57B")]
[OleAutomation(False)]
Interface IKsJackDescription Extends stdole.IUnknown
    [PreserveSig] Function GetJackCount(pcJacks As Long) As Long
    [PreserveSig] Function GetJackDescription(ByVal nJack As Long, pDescription As KSJACK_DESCRIPTION) As Long
End Interface
[InterfaceId("478F3A9B-E0C9-4827-9228-6F5505FFE76A")]
[OleAutomation(False)]
Interface IKsJackDescription2 Extends stdole.IUnknown
    [PreserveSig] Function GetJackCount(pcJacks As Long) As Long
    [PreserveSig] Function GetJackDescription2(ByVal nJack As Long, pDescription As KSJACK_DESCRIPTION2) As Long
End Interface

[InterfaceId("E3F6778B-6660-4CC8-A291-ECC4192D9967")]
[OleAutomation(False)]
Interface IKsJackDescription3 Extends IUnknown
    Sub GetJackCount(pcJacks As Long)
    Sub GetJackdescription3(ByVal nJack As Long, pDescription3 As KSJACK_DESCRIPTION3)
End Interface


[InterfaceId("D9BD72ED-290F-4581-9FF3-61027A8FE532")]
[OleAutomation(False)]
Interface IKsJackSinkInformation Extends stdole.IUnknown
    [PreserveSig] Function GetJackSinkInformation(pJackSinkInformation As KSJACK_SINK_INFORMATION) As Long
End Interface

[InterfaceId("C99AF463-D629-4EC4-8C00-E54D68154248")]
[OleAutomation(False)]
Interface IKsJackContainerId Extends stdole.IUnknown
    [PreserveSig] Function GetJackContainerId(pJackContainerId As UUID) As Long
End Interface

[InterfaceId("6DAA848C-5EB0-45CC-AEA5-998A2CDA1FFB")]
[OleAutomation(False)]
Interface IPartsList Extends stdole.IUnknown
    [PreserveSig] Function GetCount(pCount As Long) As Long
    [PreserveSig] Function GetPart(ByVal nIndex As Long, ppPart As IPart) As Long
End Interface

[InterfaceId("AE2DE0E4-5BCA-4F2D-AA46-5D13F8FDB3A9")]
[OleAutomation(False)]
Interface IPart Extends stdole.IUnknown
    [PreserveSig] Function GetName(ppwstrName As LongPtr) As Long
    [PreserveSig] Function GetLocalId(pnId As Long) As Long
    [PreserveSig] Function GetGlobalId(ppwstrGlobalId As LongPtr) As Long
    [PreserveSig] Function GetPartType(pPartType As PartType) As Long
    [PreserveSig] Function GetSubType(pSubType As UUID) As Long
    [PreserveSig] Function GetControlInterfaceCount(pCount As Long) As Long
    [PreserveSig] Function GetControlInterface(ByVal nIndex As Long, ppInterfaceDesc As IControlInterface) As Long
    [PreserveSig] Function EnumPartsIncoming(ppParts As IPartsList) As Long
    [PreserveSig] Function EnumPartsOutgoing(ppParts As IPartsList) As Long
    [PreserveSig] Function GetTopologyObject(ppTopology As IDeviceTopology) As Long
    [PreserveSig] Function Activate(ByVal dwClsContext As Long, refiid As UUID, ppvObject As Any) As Long
    [PreserveSig] Function RegisterControlChangeCallback(riid As UUID, ByVal pNotify As IControlChangeNotify) As Long
    [PreserveSig] Function UnregisterControlChangeCallback(ByVal pNotify As IControlChangeNotify) As Long
End Interface

[InterfaceId("9c2c4058-23f5-41de-877a-df3af236a09e")]
[OleAutomation(False)]
Interface IConnector Extends stdole.IUnknown
    [PreserveSig] Function GetType(pType As ConnectorType) As Long
    [PreserveSig] Function GetDataFlow(pFlow As DataFlow) As Long
    [PreserveSig] Function ConnectTo(ByVal pConnectTo As IConnector) As Long
    [PreserveSig] Function Disconnect() As Long
    [PreserveSig] Function IsConnected(pbConnected As Long) As Long
    [PreserveSig] Function GetConnectedTo(ppConTo As IConnector) As Long
    [PreserveSig] Function GetConnectorIdConnectedTo(ppwstrConnectorId As LongPtr) As Long
    [PreserveSig] Function GetDeviceIdConnectedTo(ppwstrDeviceId As LongPtr) As Long
End Interface

[InterfaceId("82149A85-DBA6-4487-86BB-EA8F7FEFCC71")]
[OleAutomation(False)]
Interface ISubunit Extends stdole.IUnknown
End Interface

[InterfaceId("45d37c3f-5140-444a-ae24-400789f3cbf3")]
[OleAutomation(False)]
Interface IControlInterface Extends stdole.IUnknown
    [PreserveSig] Function GetName(ppwstrName As LongPtr) As Long
    [PreserveSig] Function GetIID(pIID As UUID) As Long
End Interface

[InterfaceId("A09513ED-C709-4d21-BD7B-5F34C47F3947")]
[OleAutomation(False)]
Interface IControlChangeNotify Extends stdole.IUnknown
    Sub OnNotify(ByVal dwSenderProcessId As Long, pguidEventContext As UUID)
End Interface

[InterfaceId("2A07407E-6497-4A18-9787-32F79BD0D98F")]
[OleAutomation(False)]
Interface IDeviceTopology Extends stdole.IUnknown
    [PreserveSig] Function GetConnectorCount(pCount As Long) As Long
    [PreserveSig] Function GetConnector(ByVal nIndex As Long, ppConnector As IConnector) As Long
    [PreserveSig] Function GetSubunitCount(pCount As Long) As Long
    [PreserveSig] Function GetSubunit(ByVal nIndex As Long, ppSubunit As ISubunit) As Long
    [PreserveSig] Function GetPartById(ByVal nID As Long, ppPart As IPart) As Long
    [PreserveSig] Function GetDeviceId(ppwstrDeviceId As LongPtr) As Long
    [PreserveSig] Function GetSignalPath(ByVal pIPartFrom As IPart, ByVal pIPartTo As IPart, ByVal bRejectMixedPaths As Long, ppParts As IPartsList) As Long
End Interface
'End devicetopology.h



[InterfaceId("1CB9AD4C-DBFA-4c32-B178-C2F568A703B2")]
[OleAutomation(False)]
Interface IAudioClient Extends stdole.IUnknown
    [PreserveSig] Function Initialize(ByVal ShareMode As AUDCLNT_SHAREMODE, ByVal StreamFlags As Long, ByVal hnsBufferDuration As LongLong, ByVal hnsPeriodicity As LongLong, pFormat As Any, ByVal pAudioSessionGuid As LongPtr) As Long
    [PreserveSig] Function GetBufferSize(pNumBufferFrames As Long) As Long
    [PreserveSig] Function GetStreamLatency(phnsLatency As LongLong) As Long
    [PreserveSig] Function GetCurrentPadding(pNumPaddingFrames As Long) As Long
    [PreserveSig] Function IsFormatSupported(ByVal ShareMode As AUDCLNT_SHAREMODE, pFormat As Any, ppClosestMatch As LongPtr) As Long
    [PreserveSig] Function GetMixFormat(ppDeviceFormat As LongPtr) As Long
    [PreserveSig] Function GetDevicePeriod(phnsDefaultDevicePeriod As LongLong, phnsMinimumDevicePeriod As LongLong) As Long
    [PreserveSig] Function Start() As Long
    [PreserveSig] Function Stop() As Long
    [PreserveSig] Function Reset() As Long
    [PreserveSig] Function SetEventHandle(ByVal eventHandle As LongPtr) As Long
    [PreserveSig] Function GetService(riid As UUID, ppv As Any) As Long
End Interface
[InterfaceId("726778CD-F60A-4eda-82DE-E47610CD78AA")]
[OleAutomation(False)]
Interface IAudioClient2 Extends IAudioClient
    [PreserveSig] Function IsOffloadCapable(ByVal Category As AUDIO_STREAM_CATEGORY, pbOffloadCapable As Long) As Long
    [PreserveSig] Function SetClientProperties(pProperties As AudioClientProperties) As Long
    [PreserveSig] Function GetBufferSizeLimits(pFormat As Any, ByVal bEventDriven As Long, phnsMinBufferDuration As LongLong, phnsMaxBufferDuration As LongLong) As Long
End Interface
[InterfaceId("7ED4EE07-8E67-4CD4-8C1A-2B7A5987AD42")]
[OleAutomation(False)]
Interface IAudioClient3 Extends IAudioClient2
    [PreserveSig] Function GetSharedModeEnginePeriod(pFormat As Any, pDefaultPeriodInFrames As Long, pFundamentalPeriodInFrames As Long, pMinPeriodInFrames As Long, pMaxPeriodInFrames As Long) As Long
    [PreserveSig] Function GetCurrentSharedModeEnginePeriod(ppFormat As LongPtr, pCurrentPeriodInFrames As Long) As Long
    [PreserveSig] Function InitializeSharedAudioStream(ByVal StreamFlags As AUDCLNT_STREAMFLAGS, ByVal PeriodInFrames As Long, pFormat As Any, ByVal pAudioSessionGuid As LongPtr) As Long
End Interface

[InterfaceId("F294ACFC-3146-4483-A7BF-ADDCA7C260E2")]
[OleAutomation(False)]
Interface IAudioRenderClient Extends stdole.IUnknown
    [PreserveSig] Function GetBuffer(ByVal NumFramesRequested As Long, ppData As LongPtr) As Long
    [PreserveSig] Function ReleaseBuffer(ByVal NumFramesWritten As Long, ByVal dwFlags As Long) As Long
End Interface

[InterfaceId("C8ADBD64-E71E-48a0-A4DE-185C395CD317")]
[OleAutomation(False)]
Interface IAudioCaptureClient Extends stdole.IUnknown
    [PreserveSig] Function GetBuffer(ppData As LongPtr, pNumFramesTotal As Long, pdwFlags As Long, pu64DevicePosition As LongLong, pu64QPCPosition As LongLong) As Long
    [PreserveSig] Function ReleaseBuffer(ByVal NumFramesRead As Long) As Long
    [PreserveSig] Function GetNextPacketSize(pNumFramesInNextPacket As Long) As Long
End Interface

[InterfaceId("CD63314F-3FBA-4a1b-812C-EF96358728E7")]
[OleAutomation(False)]
Interface IAudioClock Extends stdole.IUnknown
    [PreserveSig] Function GetFrequency(pu64Frequency As LongLong) As Long
    [PreserveSig] Function GetPosition(pu64Position As LongLong, pu64QPCPosition As LongLong) As Long
    [PreserveSig] Function GetCharacteristics(pdwCharacteristics As Long) As Long
End Interface

[InterfaceId("6f49ff73-6727-49ac-a008-d98cf5e70048")]
[OleAutomation(False)]
Interface IAudioClock2 Extends stdole.IUnknown
    [PreserveSig] Function GetDevicePosition(DevicePosition As LongLong, QPCPosition As LongLong) As Long
End Interface

[InterfaceId("f6e4c0a0-46d9-4fb8-be21-57a3ef2b626c")]
[OleAutomation(False)]
Interface IAudioClockAdjustment Extends stdole.IUnknown
    [PreserveSig] Function SetSampleRate(ByVal flSampleRate As Single) As Long
End Interface

[InterfaceId("87CE5498-68D6-44E5-9215-6DA47EF883D8")]
[OleAutomation(False)]
Interface ISimpleAudioVolume Extends stdole.IUnknown
    [PreserveSig] Function SetMasterVolume(ByVal fLevel As Single, EventContext As UUID) As Long
    [PreserveSig] Function GetMasterVolume(pfLevel As Single) As Long
    [PreserveSig] Function SetMute(ByVal bMute As BOOL, EventContext As UUID) As Long
    [PreserveSig] Function GetMute(pbMute As BOOL) As Long
End Interface

[InterfaceId("93014887-242D-4068-8A15-CF5E93B90FE3")]
[OleAutomation(False)]
Interface IAudioStreamVolume Extends stdole.IUnknown
    [PreserveSig] Function GetChannelCount(pdwCount As Long) As Long
    [PreserveSig] Function SetChannelVolume(ByVal dwIndex As Long, ByVal fLevel As Single) As Long
    [PreserveSig] Function GetChannelVolume(ByVal dwIndex As Long, pfLevel As Single) As Long
    [PreserveSig] Function SetAllVolumes(ByVal dwCount As Long, pfVolumes As Single) As Long
    [PreserveSig] Function GetAllVolumes(ByVal dwCount As Long, pfVolumes As Single) As Long
End Interface

[InterfaceId("28724C91-DF35-4856-9F76-D6A26413F3DF")]
[OleAutomation(False)]
Interface IAudioAmbisonicsControl Extends IUnknown
    Sub SetData(pAmbisonicsParams As AMBISONICS_PARAMS, ByVal cbAmbisonicsParams As Long)
    Sub SetHeadTracking(ByVal bEnableHeadTracking As BOOL)
    Sub GetHeadTracking(pbEnableHeadTracking As BOOL)
    Sub SetRotation(ByVal X As Single, ByVal Y As Single, ByVal Z As Single, ByVal W As Single)
End Interface


[InterfaceId("1C158861-B533-4B30-B1CF-E853E51C59B8")]
[OleAutomation(False)]
Interface IChannelAudioVolume Extends stdole.IUnknown
    [PreserveSig] Function GetChannelCount(pdwCount As Long) As Long
    [PreserveSig] Function SetChannelVolume(ByVal dwIndex As Long, ByVal fLevel As Single, EventContext As UUID) As Long
    [PreserveSig] Function GetChannelVolume(ByVal dwIndex As Long, pfLevel As Single) As Long
    [PreserveSig] Function SetAllVolumes(ByVal dwCount As Long, pfVolumes As Single, EventContext As UUID) As Long
    [PreserveSig] Function GetAllVolumes(ByVal dwCount As Long, pfVolumes As Single) As Long
End Interface

[InterfaceId("24918ACC-64B3-37C1-8CA9-74A66E9957A8")]
[OleAutomation(False)]
Interface IAudioSessionEvents Extends stdole.IUnknown
    Sub OnDisplayNameChanged(ByVal lpszNewDisplayName As LongPtr, EventContext As UUID)
    Sub OnIconPathChanged(ByVal lpszNewIconPath As LongPtr, EventContext As UUID)
    Sub OnSimpleVolumeChanged(ByVal NewVolume As Single, ByVal NewMute As Long, EventContext As UUID)
    Sub OnChannelVolumeChanged(ByVal ChannelCount As Long, ByVal NewChannelVolumeArray As LongPtr, ByVal ChangedChannel As Long, EventContext As UUID)
    Sub OnGroupingParamChanged(NewGroupingParam As UUID, EventContext As UUID)
    Sub OnStateChanged(ByVal NewState As AudioSessionState)
    Sub OnSessionDisconnected(ByVal DisconnectReason As AudioSessionDisconnectReason)
End Interface

[InterfaceId("F4B1A599-7266-4319-A8CA-E70ACB11E8CD")]
[OleAutomation(False)]
Interface IAudioSessionControl Extends stdole.IUnknown
    [PreserveSig] Function GetState(pRetVal As AudioSessionState) As Long
    [PreserveSig] Function GetDisplayName(pRetVal As LongPtr) As Long
    [PreserveSig] Function SetDisplayName(ByVal value As LongPtr, EventContext As UUID) As Long
    [PreserveSig] Function GetIconPath(pRetVal As LongPtr) As Long
    [PreserveSig] Function SetIconPath(ByVal value As LongPtr, EventContext As UUID) As Long
    [PreserveSig] Function GetGroupingParam(pRetVal As UUID) As Long
    [PreserveSig] Function SetGroupingParam(Override As UUID, EventContext As UUID) As Long
    [PreserveSig] Function RegisterAudioSessionNotification(ByVal NewNotifications As IAudioSessionEvents) As Long
    [PreserveSig] Function UnregisterAudioSessionNotification(ByVal NewNotifications As IAudioSessionEvents) As Long
End Interface
[InterfaceId("bfb7ff88-7239-4fc9-8fa2-07c950be9c6d")]
[OleAutomation(False)]
Interface IAudioSessionControl2 Extends IAudioSessionControl
    [PreserveSig] Function GetSessionIdentifier(pRetVal As LongPtr) As Long
    [PreserveSig] Function GetSessionInstanceIdentifier(pRetVal As LongPtr) As Long
    [PreserveSig] Function GetProcessId(pRetVal As Long) As Long
    [PreserveSig] Function IsSystemSoundsSession() As Long
    [PreserveSig] Function SetDuckingPreference(ByVal optOut As Long) As Long
End Interface

[InterfaceId("BFA971F1-4D5E-40BB-935E-967039BFBEE4")]
[OleAutomation(False)]
Interface IAudioSessionManager Extends stdole.IUnknown
    [PreserveSig] Function GetAudioSessionControl(AudioSessionGuid As UUID, ByVal streamFlags As Long, SessionControl As IAudioSessionControl) As Long
    [PreserveSig] Function GetSimpleAudioVolume(AudioSessionGuid As UUID, ByVal streamFlags As Long, AudioVolume As ISimpleAudioVolume) As Long
End Interface
[InterfaceId("77AA99A0-1BD6-484F-8BC7-2C654C9A9B6F")]
[OleAutomation(False)]
Interface IAudioSessionManager2 Extends IAudioSessionManager
    Function GetSessionEnumerator() As IAudioSessionEnumerator
    [PreserveSig] Function RegisterSessionNotification(ByVal SessionNotifation As IAudioSessionNotification) As Long
    [PreserveSig] Function UnregisterSessionNotification(ByVal SessionNotifation As IAudioSessionNotification) As Long
    [PreserveSig] Function RegisterDuckNotification(ByVal lpszSessionId As LongPtr, ByVal duckNotification As IAudioVolumeDuckNotification) As Long
    [PreserveSig] Function UnregisterDuckNotification(ByVal duckNotification As IAudioVolumeDuckNotification) As Long
End Interface

[InterfaceId("C3B284D4-6D39-4359-B3CF-B56DDB3BB39C")]
[OleAutomation(False)]
Interface IAudioVolumeDuckNotification Extends stdole.IUnknown
    Sub OnVolumeDuckNotification(ByVal SessionId As LongPtr, ByVal countCommunicationSessions As Long)
    Sub OnVolumeUnduckNotification(ByVal SessionId As LongPtr)
End Interface

[InterfaceId("641DD20B-4D41-49CC-ABA3-174B9477BB08")]
[OleAutomation(False)]
Interface IAudioSessionNotification Extends stdole.IUnknown
    Sub OnSessionCreated(ByVal NewSession As IAudioSessionControl)
End Interface

[InterfaceId("E2F5BB11-0570-40CA-ACDD-3AA01277DEE8")]
[OleAutomation(False)]
Interface IAudioSessionEnumerator Extends stdole.IUnknown
    [PreserveSig] Function GetCount(SessionCount As Long) As Long
    [PreserveSig] Function GetSession(ByVal SessionCount As Long, Session As IAudioSessionControl) As Long
End Interface



 

[InterfaceId("5FA00F27-ADD6-499a-8A9D-6B98521FA75B")]
[OleAutomation(False)]
Interface IAudioSystemEffects Extends stdole.IUnknown
    'Sub Initialize(ByVal cbDataSize As Long, pbyData As Byte) '??????????
End Interface
[InterfaceId("BAFE99D2-7436-44CE-9E0E-4D89AFBFFF56")]
[OleAutomation(False)]
Interface IAudioSystemEffects2 Extends IAudioSystemEffects
    Sub GetEffectsList(ppEffectsIds As UUID, pcEffects As Long, ByVal Event As LongPtr)
End Interface





[InterfaceId("30A99515-1527-4451-AF9F-00C5F0234DAF")]
[OleAutomation(False)]
Interface IAudioEndpoint Extends IUnknown
    Sub GetFrameFormat(ppFormat As LongPtr)
    Sub GetFramesPerPacket(pFramesPerPacket As Long)
    Sub GetLatency(pLatency As LongLong)
    Sub SetStreamFlags(ByVal streamFlags As AUDCLNT_STREAMFLAGS)
    Sub SetEventHandle(ByVal eventHandle As LongPtr)
End Interface

[InterfaceId("DFD2005F-A6E5-4d39-A265-939ADA9FBB4D")]
[OleAutomation(False)]
Interface IAudioEndpointRT Extends IUnknown
    [PreserveSig] Sub GetCurrentPadding(pPadding As LongLong, pAeCurrentPosition As AE_CURRENT_POSITION)
    [PreserveSig] Sub ProcessingComplete()
    Sub SetPinInactive()
    Sub SetPinActive()
End Interface

[InterfaceId("8026AB61-92B2-43c1-A1DF-5C37EBD08D82")]
[OleAutomation(False)]
Interface IAudioInputEndpointRT Extends IUnknown
    [PreserveSig] Sub GetInputDataPointer(pConnectionProperty As APO_CONNECTION_PROPERTY, pAeTimeStamp As AE_CURRENT_POSITION)
    [PreserveSig] Sub ReleaseInputDataPointer(ByVal u32FrameCount As Long, ByVal pDataPointer As LongPtr)
    [PreserveSig] Sub PulseEndpoint()
End Interface

[InterfaceId("8FA906E4-C31C-4e31-932E-19A66385E9AA")]
[OleAutomation(False)]
Interface IAudioOutputEndpointRT Extends IUnknown
    [PreserveSig] Function GetOutputDataPointer(ByVal u32FrameCount As Long, pAeTimeStamp As AE_CURRENT_POSITION) As LongPtr
    [PreserveSig] Sub ReleaseOutputDataPointer(pConnectionProperty As APO_CONNECTION_PROPERTY)
    [PreserveSig] Sub PulseEndpoint()
End Interface

[InterfaceId("D4952F5A-A0B2-4cc4-8B82-9358488DD8AC")]
[OleAutomation(False)]
Interface IAudioDeviceEndpoint Extends IUnknown
    Sub SetBuffer(ByVal MaxPeriod As LongLong, ByVal u32LatencyCoefficient As Long)
    Sub GetRTCaps(pbIsRTCapable As BOOL)
    Sub GetEventDrivenCapable(pbisEventCapable As BOOL)
    Sub WriteExclusiveModeParametersToSharedMemory(ByVal hTargetProcess As LongPtr, ByVal hnsPeriod As LongLong, ByVal hnsBufferDuration As LongLong, ByVal u32LatencyCoefficient As Long, pu32SharedMemorySize As Long, phSharedMemory As LongPtr)
End Interface

[InterfaceId("64F1DD49-71CA-4281-8672-3A9EDDD1D0B6")]
[OleAutomation(False)]
Interface IAudioEndpointOffloadStreamVolume Extends stdole.IUnknown
    Sub GetVolumeChannelCount(pu32ChannelCount As Long)
    Sub SetChannelVolumes(ByVal u32ChannelCount As Long, pf32Volumes As Single, ByVal u32CurveType As AUDIO_CURVE_TYPE, pCurveDuration As LongLong)
    Sub GetChannelVolumes(ByVal u32ChannelCount As Long, pf32Volumes As Single)
End Interface

[InterfaceId("DFE21355-5EC2-40E0-8D6B-710AC3C00249")]
[OleAutomation(False)]
Interface IAudioEndpointOffloadStreamMute Extends stdole.IUnknown
    Sub SetMute(ByVal bMute As Byte)
    Sub GetMute(pbMute As Byte)
End Interface

[InterfaceId("E1546DCE-9DD1-418B-9AB2-348CED161C86")]
[OleAutomation(False)]
Interface IAudioEndpointOffloadStreamMeter Extends stdole.IUnknown
    Sub GetMeterChannelCount(pu32ChannelCount As Long)
    Sub GetMeteringData(ByVal u32ChannelCount As Long, pf32PeakValues As Single)
End Interface

[InterfaceId("F8520DD3-8F9D-4437-9861-62F584C33DD6")]
[OleAutomation(False)]
Interface IAudioEndpointLastBufferControl Extends stdole.IUnknown
    [PreserveSig] Function IsLastBufferControlSupported() As Long
    Sub ReleaseOutputDataPointerForLastBuffer(pConnectionProperty As APO_CONNECTION_PROPERTY)
End Interface

[InterfaceId("076A6922-D802-4F83-BAF6-409D9CA11BFE")]
[OleAutomation(False)]
Interface IAudioLfxControl Extends stdole.IUnknown
    Sub SetLocalEffectsState(ByVal bEnabled As BOOL)
    Sub GetLocalEffectsState(pbEnabled As BOOL)
End Interface

[InterfaceId("EDDCE3E4-F3C1-453a-B461-223563CBD886")]
[OleAutomation(False)]
Interface IHardwareAudioEngineBase Extends stdole.IUnknown
    Sub GetAvailableOffloadConnectorCount(ByVal pwstrDeviceId As LongPtr, ByVal uConnectorId As Long, pAvailableConnectInstanceCount As Long)
    Sub GetEngineFormat(ByVal pDevice As IMMDevice, ByVal bRequestDeviceFormat As Long, ppwfxFormat As LongPtr)
    Sub SetEngineDeviceFormat(ByVal pDevice As IMMDevice, ByVal pwfxFormat As LongPtr)
    Sub SetGfxState(ByVal pDevice As IMMDevice, ByVal bEnable As Long)
    Sub GetGfxState(ByVal pDevice As IMMDevice, pbEnable As Long)
End Interface

[InterfaceId("C684B72A-6DF4-4774-BDF9-76B77509B653")]
[OleAutomation(False)]
Interface IAudioEndpointControl Extends stdole.IUnknown
    Sub Start()
    Sub Reset()
    Sub Stop()
End Interface




[InterfaceId("f8679f50-850a-41cf-9c72-430f290290c8")]
[OleAutomation(False)]
Interface IPolicyConfig Extends stdole.IUnknown
    Sub GetMixFormat(ByVal lpszDeviceID As LongPtr, pFormat As LongPtr)
    Sub GetDeviceFormat(ByVal lpszDeviceID As LongPtr, ByVal bDefault As Long, pFormat As LongPtr)
    Sub ResetDeviceFormat(ByVal lpszDeviceID As LongPtr)
    Sub SetDeviceFormat(ByVal lpszDeviceID As LongPtr, pEndpointFormat As Any, pMixFormat As Any)
    Sub GetProcessingPeriod(ByVal lpszDeviceID As LongPtr, ByVal bDefault As Long, hnsDefaultDevicePeriod As LongLong, hnsMinimumDevicePeriod As LongLong)
    Sub SetProcessingPeriod(ByVal lpszDeviceID As LongPtr, hnsDevicePeriod As LongLong)
    Sub GetShareMode(ByVal lpszDeviceID As LongPtr, pMode As DeviceShareMode)
    Sub SetShareMode(ByVal lpszDeviceID As LongPtr, pMode As DeviceShareMode)
    Sub GetPropertyValue(ByVal lpszDeviceID As LongPtr, key As PROPERTYKEY, pValue As Variant)
    Sub SetPropertyValue(ByVal lpszDeviceID As LongPtr, key As PROPERTYKEY, pValue As Variant)
    Sub SetDefaultEndpoint(ByVal lpszDeviceID As LongPtr, ByVal role As ERole)
    Sub SetEndpointVisibility(ByVal lpszDeviceID As LongPtr, ByVal bVisible As Long)
End Interface
[InterfaceId("568B9108-44BF-40B4-9006-86AFE5B5A620")]
[OleAutomation(False)]
Interface IPolicyConfigVista Extends stdole.IUnknown
    Sub GetMixFormat(ByVal lpszDeviceID As LongPtr, pFormat As LongPtr)
    Sub GetDeviceFormat(ByVal lpszDeviceID As LongPtr, ByVal bDefault As Long, pFormat As LongPtr)
    Sub ResetDeviceFormat(ByVal lpszDeviceID As LongPtr)
    Sub SetDeviceFormat(ByVal lpszDeviceID As LongPtr, pEndpointFormat As Any, pMixFormat As Any)
    Sub GetProcessingPeriod(ByVal lpszDeviceID As LongPtr, ByVal bDefault As Long, hnsDefaultDevicePeriod As LongLong, hnsMinimumDevicePeriod As LongLong)
    Sub SetProcessingPeriod(ByVal lpszDeviceID As LongPtr, hnsDevicePeriod As LongLong)
    Sub GetShareMode(ByVal lpszDeviceID As LongPtr, pMode As DeviceShareMode)
    Sub SetShareMode(ByVal lpszDeviceID As LongPtr, pMode As DeviceShareMode)
    Sub GetPropertyValue(ByVal lpszDeviceID As LongPtr, key As PROPERTYKEY, pValue As Variant)
    Sub SetPropertyValue(ByVal lpszDeviceID As LongPtr, key As PROPERTYKEY, pValue As Variant)
    Sub SetDefaultEndpoint(ByVal lpszDeviceID As LongPtr, ByVal role As ERole)
    Sub SetEndpointVisibility(ByVal lpszDeviceID As LongPtr, ByVal bVisible As Long)
End Interface


[InterfaceId("f4ae25b5-aaa3-437d-b6b3-dbbe2d0e9549")]
[OleAutomation(False)]
Interface IAcousticEchoCancellationControl Extends IUnknown
    Sub SetEchoCancellationRenderEndpoint(ByVal endpoint As LongPtr /*String*/)
End Interface

[InterfaceId("DCDAA858-895A-4A22-A5EB-67BDA506096D")]
[OleAutomation(False)]
Interface IAudioFormatEnumerator Extends stdole.IUnknown
    Sub GetCount(count As Long)
    Sub GetFormat(ByVal index As Long, format As LongPtr)
End Interface

[InterfaceId("CCE0B8F2-8D4D-4EFB-A8CF-3D6ECF1C30E0")]
[OleAutomation(False)]
Interface ISpatialAudioObjectBase Extends stdole.IUnknown
    Sub GetBuffer(buffer As LongPtr, bufferLength As Long)
    Sub SetEndOfStream(ByVal frameCount As Long)
    Sub IsActive(isActive As BOOL)
    Sub GetAudioObjectType(audioObjectType As AudioObjectType)
End Interface

[InterfaceId("DDE28967-521B-46E5-8F00-BD6F2BC8AB1D")]
[OleAutomation(False)]
Interface ISpatialAudioObject Extends ISpatialAudioObjectBase
    Sub SetPosition(ByVal x As Single, ByVal y As Single, ByVal z As Single)
    Sub SetVolume(ByVal volume As Single)
End Interface

[InterfaceId("FEAAF403-C1D8-450D-AA05-E0CCEE7502A8")]
[OleAutomation(False)]
Interface ISpatialAudioObjectRenderStreamBase Extends stdole.IUnknown
    Sub GetAvailableDynamicObjectCount(value As Long)
    Sub GetService(riid As UUID, service As Any)
    Sub Start()
    Sub Stop()
    Sub Reset()
    Sub BeginUpdatingAudioObjects(availableDynamicObjectCount As Long, frameCountPerBuffer As Long)
    Sub EndUpdatingAudioObjects()
End Interface

[InterfaceId("BAB5F473-B423-477B-85F5-B5A332A04153")]
[OleAutomation(False)]
Interface ISpatialAudioObjectRenderStream Extends ISpatialAudioObjectRenderStreamBase
    Sub ActivateSpatialAudioObject(ByVal type As AudioObjectType, audioObject As ISpatialAudioObject)
End Interface

[InterfaceId("DDDF83E6-68D7-4C70-883F-A1836AFB4A50")]
[OleAutomation(False)]
Interface ISpatialAudioObjectRenderStreamNotify Extends IUnknown
    Sub OnAvailableDynamicObjectCountChange(ByVal sender As ISpatialAudioObjectRenderStreamBase, ByVal hnsComplianceDeadlineTime As LongLong, ByVal availableDynamicObjectCountChange As Long)
End Interface

[InterfaceId("BBF8E066-AAAA-49BE-9A4D-FD2A858EA27F")]
[OleAutomation(False)]
Interface ISpatialAudioClient Extends stdole.IUnknown
    Sub GetStaticObjectPosition(ByVal type As AudioObjectType, ByVal x As Single, ByVal y As Single, ByVal z As Single)
    Sub GetNativeStaticObjectTypeMask(mask As AudioObjectType)
    Sub GetMaxDynamicObjectCount(value As Long)
    Sub GetSupportedAudioObjectFormatEnumerator(enumerator As IAudioFormatEnumerator)
    Sub GetMaxFrameCount(objectFormat As WAVEFORMATEX, frameCountPerBuffer As Long)
    [PreserveSig] Function IsAudioObjectFormatSupported(objectFormat As WAVEFORMATEX) As Long
    [PreserveSig] Function IsSpatialAudioStreamAvailable(streamUuid As UUID, Optional auxiliaryInfo As Variant) As Long
    Sub ActivateSpatialAudioStream(activationParams As Variant, riid As UUID, stream As Any)
End Interface
[InterfaceId("caabe452-a66a-4bee-a93e-e320463f6a53")]
[OleAutomation(False)]
Interface ISpatialAudioClient2 Extends ISpatialAudioClient
    Sub IsOffloadCapable(ByVal category As AUDIO_STREAM_CATEGORY, isOffloadCapable As BOOL)
    Sub GetMaxFrameCountForCategory(ByVal category As AUDIO_STREAM_CATEGORY, ByVal isOffloadCapable As BOOL, objectFormat As WAVEFORMATEX, frameCountPerBuffer As Long)
End Interface

[InterfaceId("D7436ADE-1978-4E14-ABA0-555BD8EB83B4")]
[OleAutomation(False)]
Interface ISpatialAudioObjectForHrtf Extends ISpatialAudioObjectBase
    Sub SetPosition(ByVal x As Single, ByVal y As Single, ByVal z As Single)
    Sub SetGain(ByVal gain As Single)
    Sub SetOrientation(orientation As LongPtr)
    Sub SetEnvironment(ByVal environment As SpatialAudioHrtfEnvironmentType)
    Sub SetDistanceDecay(distanceDecay As SpatialAudioHrtfDistanceDecay)
    Sub SetDirectivity(directivity As SpatialAudioHrtfDirectivityUnion)
End Interface

[InterfaceId("E08DEEF9-5363-406E-9FDC-080EE247BBE0")]
[OleAutomation(False)]
Interface ISpatialAudioObjectRenderStreamForHrtf Extends ISpatialAudioObjectRenderStreamBase
    Sub ActivateSpatialAudioObjectForHrtf(ByVal type As AudioObjectType, audioObject As ISpatialAudioObjectForHrtf)
End Interface

[InterfaceId("BCD7C78F-3098-4F22-B547-A2F25A381269")]
[OleAutomation(False)]
Interface ISpatialAudioMetadataItems Extends stdole.IUnknown
    Sub GetFrameCount(frameCount As Integer)
    Sub GetItemCount(itemCount As Integer)
    Sub GetMaxItemCount(maxItemCount As Integer)
    Sub GetMaxValueBufferLength(maxValueBufferLength As Long)
    Sub GetInfo(info As SpatialAudioMetadataItemsInfo)
End Interface

[InterfaceId("1B17CA01-2955-444D-A430-537DC589A844")]
[OleAutomation(False)]
Interface ISpatialAudioMetadataWriter Extends stdole.IUnknown
    Sub Open(ByVal metadataItems As ISpatialAudioMetadataItems)
    Sub WriteNextItem(ByVal frameOffset As Integer)
    Sub WriteNextItemCommand(ByVal commandID As Byte, valueBuffer As Any, ByVal valueBufferLength As Long)
    Sub Close()
End Interface

[InterfaceId("B78E86A2-31D9-4C32-94D2-7DF40FC7EBEC")]
[OleAutomation(False)]
Interface ISpatialAudioMetadataReader Extends stdole.IUnknown
    Sub Open(ByVal metadataItems As ISpatialAudioMetadataItems)
    Sub ReadNextItem(commandCount As Byte, frameOffset As Integer)
    Sub ReadNextItemCommand(commandID As Byte, valueBuffer As Any, ByVal maxValueBufferLength As Long, valueBufferLength As Long)
    Sub Close()
End Interface

[InterfaceId("D224B233-E251-4FD0-9CA2-D5ECF9A68404")]
[OleAutomation(False)]
Interface ISpatialAudioMetadataCopier Extends stdole.IUnknown
    Sub Open(ByVal metadataItems As ISpatialAudioMetadataItems)
    Sub CopyMetadataForFrames(ByVal copyFrameCount As Integer, ByVal copyMode As SpatialAudioMetadataCopyMode, ByVal dstMetadataItems As ISpatialAudioMetadataItems, itemsCopied As Integer)
    Sub Close()
End Interface

[InterfaceId("42640A16-E1BD-42D9-9FF6-031AB71A2DBA")]
[OleAutomation(False)]
Interface ISpatialAudioMetadataItemsBuffer Extends stdole.IUnknown
    Sub AttachToBuffer(buffer As Byte, ByVal bufferLength As Long)
    Sub AttachToPopulatedBuffer(buffer As Byte, ByVal bufferLength As Long)
    Sub DetachBuffer()
End Interface

[InterfaceId("777D4A3B-F6FF-4A26-85DC-68D7CDEDA1D4")]
[OleAutomation(False)]
Interface ISpatialAudioMetadataClient Extends stdole.IUnknown
    Sub ActivateSpatialAudioMetadataItems(ByVal maxItemCount As Integer, ByVal frameCount As Integer, metadataItemsBuffer As ISpatialAudioMetadataItemsBuffer, metadataItems As ISpatialAudioMetadataItems)
    Sub GetSpatialAudioMetadataItemsBufferLength(ByVal maxItemCount As Integer, bufferLength As Long)
    Sub ActivateSpatialAudioMetadataWriter(ByVal overflowMode As SpatialAudioMetadataWriterOverflowMode, metadataWriter As ISpatialAudioMetadataWriter)
    Sub ActivateSpatialAudioMetadataCopier(metadataCopier As ISpatialAudioMetadataCopier)
    Sub ActivateSpatialAudioMetadataReader(metadataReader As ISpatialAudioMetadataReader)
End Interface

[InterfaceId("0DF2C94B-F5F9-472D-AF6B-C46E0AC9CD05")]
[OleAutomation(False)]
Interface ISpatialAudioObjectForMetadataCommands Extends ISpatialAudioObjectBase
    Sub WriteNextMetadataCommand(ByVal commandID As Byte, valueBuffer As Any, ByVal valueBufferLength As Long)
End Interface

[InterfaceId("DDEA49FF-3BC0-4377-8AAD-9FBCFD808566")]
[OleAutomation(False)]
Interface ISpatialAudioObjectForMetadataItems Extends ISpatialAudioObjectBase
    Sub GetSpatialAudioMetadataItems(netadataItems As ISpatialAudioMetadataItems)
End Interface

[InterfaceId("BBC9C907-48D5-4A2E-A0C7-F7F0D67C1FB1")]
[OleAutomation(False)]
Interface ISpatialAudioObjectRenderStreamForMetadata Extends ISpatialAudioObjectRenderStreamBase
    Sub ActivateSpatialAudioObjectForMetadataCommands(ByVal type As AudioObjectType, audioObject As ISpatialAudioObjectForMetadataCommands)
    Sub ActivateSpatialAudioObjectForMetadataItems(ByVal type As AudioObjectType, audioObject As ISpatialAudioObjectForMetadataItems)
End Interface


[InterfaceId("C789D381-A28C-4168-B28F-D3A837924DC3")]
[OleAutomation(False)]
Interface IAudioClientDuckingControl Extends stdole.IUnknown
    Sub SetDuckingOptionsForCurrentStream(ByVal Options As AUDIO_DUCKING_OPTIONS)
End Interface

[InterfaceId("A7A7EF10-1F49-45E0-AD35-612057CC8F74")]
[OleAutomation(False)]
Interface IAudioViewManagerService Extends stdole.IUnknown
    Sub SetAudioStreamWindow(ByVal hwnd As Long)
End Interface

[InterfaceId("A5DED44F-3C5D-4B2B-BD1E-5DC1EE20BBF6")]
[OleAutomation(False)]
Interface IAudioEffectsChangedNotificationClient Extends stdole.IUnknown
    Sub OnAudioEffectsChanged()
End Interface

[InterfaceId("4460B3AE-4B44-4527-8676-7548A8ACD260")]
[OleAutomation(False)]
Interface IAudioEffectsManager Extends stdole.IUnknown
    Sub RegisterAudioEffectsChangedNotificationCallback(ByVal client As IAudioEffectsChangedNotificationClient)
    Sub UnregisterAudioEffectsChangedNotificationCallback(ByVal client As IAudioEffectsChangedNotificationClient)
    Sub GetAudioEffects(ByRef effects As LongPtr, ByRef numEffects As Long)
    #If Win64 Then
    Sub SetAudioEffectState(ByRef effectId As UUID, ByVal State As AUDIO_EFFECT_STATE)
    #Else
    Sub SetAudioEffectState(ByVal effectId1 As Long, ByVal effectId2 As Long, ByVal effectId3 As Long, ByVal effectId4 As Long, ByVal State As AUDIO_EFFECT_STATE)
    #End If
End Interface

[InterfaceId("4E997F73-B71F-4798-873B-ED7DFCF15B4D")]
[OleAutomation(False)]
Interface IAudioMediaType Extends stdole.IUnknown
    Sub IsCompressedFormat(ByRef pfCompressed As BOOL)
    Sub IsEqual(ByVal pIAudioType As IAudioMediaType, ByRef pdwFlags As Long)
    [PreserveSig]
    Function GetAudioFormat() As WAVEFORMATEX
    Sub GetUncompressedAudioFormat(ByRef pUncompressedAudioFormat As UNCOMPRESSEDAUDIOFORMAT)
End Interface

[InterfaceId("9E1D6A6D-DDBC-4E95-A4C7-AD64BA37846C")]
[OleAutomation(False)]
Interface IAudioProcessingObjectRT Extends stdole.IUnknown
    [PreserveSig]
    Sub APOProcess(ByVal u32NumInputConnections As Long, ByRef ppInputConnections As APO_CONNECTION_PROPERTY, ByVal u32NumOutputConnections As Long, ByRef ppOutputConnections As APO_CONNECTION_PROPERTY)
    [PreserveSig]
    Function CalcInputFrames(ByVal u32OutputFrameCount As Long) As Long
    [PreserveSig]
    Function CalcOutputFrames(ByVal u32InputFrameCount As Long) As Long
End Interface

[InterfaceId("7BA1DB8F-78AD-49CD-9591-F79D80A17C81")]
[OleAutomation(False)]
Interface IAudioProcessingObjectVBR Extends stdole.IUnknown
    Sub CalcMaxInputFrames(ByVal u32MaxOutputFrameCount As Long, ByRef pu32InputFrameCount As Long)
    Sub CalcMaxOutputFrames(ByVal u32MaxInputFrameCount As Long, ByRef pu32OutputFrameCount As Long)
End Interface

[InterfaceId("0E5ED805-ABA6-49C3-8F9A-2B8C889C4FA8")]
[OleAutomation(False)]
Interface IAudioProcessingObjectConfiguration Extends stdole.IUnknown
    Sub LockForProcess(ByVal u32NumInputConnections As Long, ByRef ppInputConnections As APO_CONNECTION_DESCRIPTOR, ByVal u32NumOutputConnections As Long, ByRef ppOutputConnections As APO_CONNECTION_DESCRIPTOR)
    Sub UnlockForProcess()
End Interface

[InterfaceId("FD7F2B29-24D0-4B5C-B177-592C39F9CA10")]
[OleAutomation(False)]
Interface IAudioProcessingObject Extends stdole.IUnknown
    Sub Reset()
    Sub GetLatency(ByVal pTime As LongLong)
    Sub GetRegistrationProperties(ByRef ppRegProps As APO_REG_PROPERTIES)
    Sub Initialize(ByVal cbDataSize As Long, ByRef pbyData As Byte)
    Sub IsInputFormatSupported(ByVal pOppositeFormat As IAudioMediaType, ByVal pRequestedInputFormat As IAudioMediaType, ByRef ppSupportedInputFormat As IAudioMediaType)
    Sub IsOutputFormatSupported(ByVal pOppositeFormat As IAudioMediaType, ByVal pRequestedOutputFormat As IAudioMediaType, ByRef ppSupportedOutputFormat As IAudioMediaType)
    Sub GetInputChannelCount(ByRef pu32ChannelCount As Long)
End Interface

[InterfaceId("98F37DAC-D0B6-49F5-896A-AA4D169A4C48")]
[OleAutomation(False)]
Interface IAudioDeviceModulesClient Extends stdole.IUnknown
    Sub SetAudioDeviceModulesManager(ByVal pAudioDeviceModulesManager As IUnknown)
End Interface

[InterfaceId("B1176E34-BB7F-4F05-BEBD-1B18A534E097")]
[OleAutomation(False)]
Interface IAudioSystemEffectsCustomFormats Extends stdole.IUnknown
    Sub GetFormatCount(ByRef pcFormats As Long)
    Sub GetFormat(ByVal nFormat As Long, ByRef ppFormat As IAudioMediaType)
    Sub GetFormatRepresentation(ByVal nFormat As Long, ByRef ppwstrFormatRep As LongPtr)
End Interface

[InterfaceId("4CEB0AAB-FA19-48ED-A857-87771AE1B768")]
[OleAutomation(False)]
Interface IApoAuxiliaryInputConfiguration Extends stdole.IUnknown
    Sub AddAuxiliaryInput(ByVal dwInputId As Long, ByVal cbDataSize As Long, ByRef pbyData As Byte, ByRef pInputConnection As APO_CONNECTION_DESCRIPTOR)
    Sub RemoveAuxiliaryInput(ByVal dwInputId As Long)
    Sub IsInputFormatSupported(ByVal pRequestedInputFormat As IAudioMediaType, ByRef ppSupportedInputFormat As IAudioMediaType)
End Interface

[InterfaceId("F851809C-C177-49A0-B1B2-B66F017943AB")]
[OleAutomation(False)]
Interface IApoAuxiliaryInputRT Extends stdole.IUnknown
    [PreserveSig]
    Sub AcceptInput(ByVal dwInputId As Long, ByRef pInputConnection As APO_CONNECTION_PROPERTY)
End Interface

[InterfaceId("25385759-3236-4101-A943-25693DFB5D2D")]
[OleAutomation(False)]
Interface IApoAcousticEchoCancellation Extends stdole.IUnknown
'no members
End Interface
[InterfaceId("F235855F-F06D-45B3-A63F-EE4B71509DC2")]
Interface IApoAcousticEchoCancellation2 Extends IApoAcousticEchoCancellation
    Sub GetDesiredReferenceStreamProperties(pProperties As APO_REFERENCE_STREAM_PROPERTIES)
End Interface


[InterfaceId("20049D40-56D5-400E-A2EF-385599FEED49")]
[OleAutomation(False)]
Interface IAudioSystemEffectsPropertyChangeNotificationClient Extends stdole.IUnknown
    #If Win64 Then
    Sub OnPropertyChanged(ByVal type As AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE, ByRef key As PROPERTYKEY)
    #Else
    Sub OnPropertyChanged(ByVal type As AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE, ByVal keyg1 As Long, ByVal keyg2 As Long, ByVal keyg3 As Long, ByVal keyg4 As Long, ByVal keypid As Long)
    #End If
End Interface

[InterfaceId("302AE7F9-D7E0-43E4-971B-1F8293613D2A")]
[OleAutomation(False)]
Interface IAudioSystemEffectsPropertyStore Extends stdole.IUnknown
    Sub OpenDefaultPropertyStore(ByVal stgmAccess As STGM, ByRef propStore As IPropertyStore)
    Sub OpenUserPropertyStore(ByVal stgmAccess As STGM, ByRef propStore As IPropertyStore)
    Sub OpenVolatilePropertyStore(ByVal stgmAccess As STGM, ByRef propStore As IPropertyStore)
    Sub ResetUserPropertyStore()
    Sub ResetVolatilePropertyStore()
    Sub RegisterPropertyChangeNotification(ByVal CallBack As IAudioSystemEffectsPropertyChangeNotificationClient)
    Sub UnregisterPropertyChangeNotification(ByVal CallBack As IAudioSystemEffectsPropertyChangeNotificationClient)
End Interface
                                            
[InterfaceId("63BD8738-E30D-4C77-BF5C-834E87C657E2")]
[OleAutomation(False)]
Interface IAudioStateMonitor Extends stdole.IUnknown
    Sub RegisterCallback(ByVal callback As LongPtr, ByVal context As LongPtr, registration As LongLong)
    [PreserveSig] Sub UnregisterCallback(ByVal registration As LongLong)
    [PreserveSig] Function GetSoundLevel() As AudioStateMonitorSoundLevel
End Interface

#End Region

#Region "Coclasses"
'CLSID_MMDeviceEnumerator 
[CoClassId("BCDE0395-E52F-467C-8E3D-C4579291692E")]
CoClass MMDeviceEnumerator
	 [Default] Interface IMMDeviceEnumerator
End CoClass

'CLSID_DeviceTopology 
[CoClassId("1DF639D0-5EC1-47AA-9379-828DC1AA8C59")]
CoClass DeviceTopology
	 [Default] Interface IDeviceTopology
     Interface IPartsList

     ' device control interfaces
     Interface IAudioVolumeLevel
     Interface IAudioLoudness
     'Interface IAudioSpeakerMap
     Interface IAudioInputSelector
     Interface IAudioMute
     Interface IAudioBass
     Interface IAudioMidrange
     Interface IAudioTreble
     Interface IAudioAutoGainControl
     Interface IAudioOutputSelector
     Interface IAudioPeakMeter
     Interface IDeviceSpecificProperty
     Interface IKsFormatSupport
End CoClass

'CLSID_PolicyConfigClient 
[CoClassId("870af99c-171d-4f9e-af0d-e63df40c2bc9")]
CoClass PolicyConfigClient
	 [Default] Interface IPolicyConfig
End CoClass

'CLSID_CPolicyConfigVistaClient : VISTA ONLY, Win7+ uses PolicyConfigClient
[CoClassId("294935CE-F637-4E7C-A41B-AB255460B862")]
[Description("For Windows Vista ONLY; for Win7 use PolicyConfigClient")]
CoClass CPolicyConfigVistaClient
	 [Default] Interface IPolicyConfigVista
End CoClass
#End Region

#Region "MainDefs"

Module wdCoreAudio

Public DeclareWide PtrSafe Function ActivateAudioInterfaceAsync Lib "mmdevapi.dll" (ByVal deviceInterfacePath As String, ByRef riid As UUID, ByRef activationParams As Variant, ByVal completionHandler As IActivateAudioInterfaceCompletionHandler, ByRef activationOperation As IActivateAudioInterfaceAsyncOperation) As Long

Public Const DEVTOPO_HARDWARE_INITIATED_EVENTCONTEXT = &H64726148 'draH'

Public Enum SpatialAudioMetadataWriterOverflowMode
	SpatialAudioMetadataWriterOverflow_Fail = 0 ' Overflow will fail
	SpatialAudioMetadataWriterOverflow_MergeWithNew = 1 ' Overflow will succeed, will merge overflow item with previous item and adopt frame offset of newest item
	SpatialAudioMetadataWriterOverflow_MergeWithLast = 2 ' Overflow will succeed, will merge overflow item with previous item and keep existing frame offset
End Enum

Public Enum SpatialAudioMetadataCopyMode
	SpatialAudioMetadataCopy_Overwrite = 0 ' Creates a direct copy of the specfied frameCount in destination buffer, overwrites any previous data
	SpatialAudioMetadataCopy_Append = 1 ' Normal append - will fail is resulting metadataBuffer has too many items
	SpatialAudioMetadataCopy_AppendMergeWithLast = 2 ' Appends, if overflow occurs, extra items are merged into last item adopting last merged items offset
	SpatialAudioMetadataCopy_AppendMergeWithFirst = 3 ' Appends, if overflow occurs, extra items are merged assigning the offset of the first non-overflow item offset
End Enum



[PackingAlignment(1)]
Public Type SpatialAudioMetadataItemsInfo
	FrameCount As Integer ' total frame count that defines valid item offsets
	ItemCount As Integer ' Current number of items stored
	MaxItemCount As Integer ' Max number of items allowed (defined at creation time)
	MaxValueBufferLength As Long ' Size of largest command value defined by metadataFormat
End Type

[PackingAlignment(1)]
Public Type SpatialAudioObjectRenderStreamForMetadataActivationParams
	ObjectFormat As LongPtr 'WAVEFORMATEX const ' Format descriptor for a single spatial audio objects. All objects must have the same format and must be of type WAVEFORMATEX or WAVEFORMATEXTENSIBLE.
	StaticObjectTypeMask As AudioObjectType ' (static channel bed mask) mask of static audio object type that are allowed
	MinDynamicObjectCount As Long ' Minimum number of dynamic audio objects. If at least this count cannot be granted, no dynamic objects will be granted.
	MaxDynamicObjectCount As Long ' Maximum number of dynamic audio objects that can be activated via ISpatialAudioObjectRenderStreamForMetadata.
	Category As AUDIO_STREAM_CATEGORY ' Specifies the category of the audio stream and its spatial audio objects.
	EventHandle As LongPtr ' event that will signal the need for more audio data. This handle will be duplicated internally before getting used
	MetadataFormatId As UUID ' Specifies the metadataFormat that for the currently active spatial rendering engine
	MaxMetadataItemCount As Integer ' Maximum number of metadata Items Per FrameCount
	MetadataActivationParams As LongPtr 'PROPVARIANT const
	NotifyObject As ISpatialAudioObjectRenderStreamNotify
End Type

[PackingAlignment(1)]
Public Type SpatialAudioObjectRenderStreamForMetadataActivationParams2
	ObjectFormat As LongPtr 'WAVEFORMATEX const ' Format descriptor for a single spatial audio objects. All objects must have the same format and must be of type WAVEFORMATEX or WAVEFORMATEXTENSIBLE.
	StaticObjectTypeMask As AudioObjectType ' (static channel bed mask) mask of static audio object type that are allowed
	MinDynamicObjectCount As Long ' Minimum number of dynamic audio objects. If at least this count cannot be granted, no dynamic objects will be granted.
	MaxDynamicObjectCount As Long ' Maximum number of dynamic audio objects that can be activated via ISpatialAudioObjectRenderStreamForMetadata.
	Category As AUDIO_STREAM_CATEGORY ' Specifies the category of the audio stream and its spatial audio objects.
	EventHandle As LongPtr ' event that will signal the need for more audio data. This handle will be duplicated internally before getting used
	MetadataFormatId As UUID ' Specifies the metadataFormat that for the currently active spatial rendering engine
	MaxMetadataItemCount As Integer ' Maximum number of metadata Items Per FrameCount
	MetadataActivationParams As LongPtr 'PROPVARIANT const
	NotifyObject As ISpatialAudioObjectRenderStreamNotify
    Options As SPATIAL_AUDIO_STREAM_OPTIONS
End Type

Public Type SpatialAudioClientActivationParams
	tracingContextId As UUID
	appId As UUID
	majorVersion As Long
	minorVersion1 As Long
	minorVersion2 As Long
	minorVersion3 As Long
End Type

Public Enum SpatialAudioHrtfDirectivityType
	SpatialAudioHrtfDirectivity_OmniDirectional = 0 ' The sound emission is in all directions.
	SpatialAudioHrtfDirectivity_Cardioid = 1 ' The sound emission is a cardiod shape.
	SpatialAudioHrtfDirectivity_Cone = 2 ' The sound emission is a cone.
End Enum

Public Enum SpatialAudioHrtfEnvironmentType
	SpatialAudioHrtfEnvironment_Small = 0 ' A small room.
	SpatialAudioHrtfEnvironment_Medium = 1 ' A medium-sized room.
	SpatialAudioHrtfEnvironment_Large = 2 ' A large enclosed space.
	SpatialAudioHrtfEnvironment_Outdoors = 3 ' An outdoor space.
	SpatialAudioHrtfEnvironment_Average = 4 ' Reserved. Do not use.
End Enum

Public Enum SpatialAudioHrtfDistanceDecayType
	SpatialAudioHrtfDistanceDecay_NaturalDecay = 0 ' Simulates natural decay with distance, as constrained by minimum and maximum gain distance limits. Drops to silence at rolloff distance.
	SpatialAudioHrtfDistanceDecay_CustomDecay = 1 ' Used to set up a custom gain curve, within the maximum and minimum gain limit.
End Enum

Public Type SpatialAudioHrtfDirectivity
	Type As SpatialAudioHrtfDirectivityType ' Indicates the type of directivity.
	Scaling As Single ' A normalized value between zero and one. Specifies the amount of linear interpolation between omnidirectional sound and the full directivity pattern, where 0 is fully omnidirectional and 1 is fully directional.
End Type

Public Type SpatialAudioHrtfDirectivityCardioid
	directivity As SpatialAudioHrtfDirectivity
	Order As Single
End Type

Public Type SpatialAudioHrtfDirectivityCone
	directivity As SpatialAudioHrtfDirectivity
	InnerAngle As Single
	OuterAngle As Single
End Type

Public Type SpatialAudioHrtfDistanceDecay
	Type As SpatialAudioHrtfDistanceDecayType ' The Type of decay behavior, natural or custom.
	MaxGain As Single ' The maximum gain limit applied at any distance. Applies to both natural and custom decay. This value is specified in dB, with a range from -96 to 12 inclusive. The default value is 12 dB.
	MinGain As Single ' The minimum gain limit applied at any distance. Applies to both natural and custom decay. This value is specified in dB, with a range from -96 to 12 inclusive. The default value is -96 dB.
	UnityGainDistance As Single ' The distance at which the gain is 0dB. Applies to natural decay only. This value is specified in meters, with a range from 0.05 to infinity (FLT_MAX). The default value is 1 meter.
	CutoffDistance As Single ' The distance at which output is silent. Applies to natural decay only. This value is specified in meters, with a range from zero (non-inclusive) to infinity (FLT_MAX). The default value is INFINITY.
End Type

Public Type SpatialAudioHrtfOrientation
    value(8) As Single
End Type

Public Type SpatialAudioHrtfDirectivityUnion
    union(15) As Byte
End Type

[PackingAlignment(1)]
Public Type SpatialAudioHrtfActivationParams
	ObjectFormat As LongPtr ' Format descriptor for a single spatial audio objects. All objects must have the same format and must be of type WAVEFORMATEX or WAVEFORMATEXTENSIBLE.
	StaticObjectTypeMask As AudioObjectType ' (static channel bed mask) mask of static audio object type that are allowed
	MinDynamicObjectCount As Long ' Minimum number of dynamic audio objects. If at least this count cannot be granted, no dynamic objects will be granted.
	MaxDynamicObjectCount As Long ' Maximum number of dynamic audio objects that can be activated via ISpatialAudioObjectRenderStreamForMetadata.
	Category As AUDIO_STREAM_CATEGORY ' Specifies the category of an audio stream and its spatial audio objects.
	EventHandle As LongPtr ' event that will signal the need for more audio data. This handle will be duplicated internally before getting used
	NotifyObject As ISpatialAudioObjectRenderStreamNotify ' Notification sink (can be nullptr)
	DistanceDecay As LongPtr ' Optional Distance Decay Settings - All dynamic objects from this stream will default to this setting  (nullptr if unused)
	Directivity As LongPtr ' Optional Directivity - All dynamic objects from this stream will default to this value   (nullptr if unused)
	Environment As LongPtr ' Optional Environment - All dynamic objects from this stream will default to this value  (nullptr if unused)
	Orientation As LongPtr ' Optional Orientation - All dynamic objects from this stream will default to this value  (nullptr if unused)
End Type

[PackingAlignment(1)]
Public Type SpatialAudioHrtfActivationParams2
	ObjectFormat As LongPtr ' Format descriptor for a single spatial audio objects. All objects must have the same format and must be of type WAVEFORMATEX or WAVEFORMATEXTENSIBLE.
	StaticObjectTypeMask As AudioObjectType ' (static channel bed mask) mask of static audio object type that are allowed
	MinDynamicObjectCount As Long ' Minimum number of dynamic audio objects. If at least this count cannot be granted, no dynamic objects will be granted.
	MaxDynamicObjectCount As Long ' Maximum number of dynamic audio objects that can be activated via ISpatialAudioObjectRenderStreamForMetadata.
	Category As AUDIO_STREAM_CATEGORY ' Specifies the category of an audio stream and its spatial audio objects.
	EventHandle As LongPtr ' event that will signal the need for more audio data. This handle will be duplicated internally before getting used
	NotifyObject As ISpatialAudioObjectRenderStreamNotify ' Notification sink (can be nullptr)
	DistanceDecay As LongPtr ' Optional Distance Decay Settings - All dynamic objects from this stream will default to this setting  (nullptr if unused)
	Directivity As LongPtr ' Optional Directivity - All dynamic objects from this stream will default to this value   (nullptr if unused)
	Environment As LongPtr ' Optional Environment - All dynamic objects from this stream will default to this value  (nullptr if unused)
	Orientation As LongPtr ' Optional Orientation - All dynamic objects from this stream will default to this value  (nullptr if unused)
    options As SPATIAL_AUDIO_STREAM_OPTIONS
End Type


Public Enum AudioObjectType
	AudioObjectType_None = 0
	AudioObjectType_Dynamic = 1 << 0
	AudioObjectType_FrontLeft = 1 << 1 ' SPEAKER_FRONT_LEFT is the WAVEFORMATEXTENSIBLE channel mask equivalent
	AudioObjectType_FrontRight = 1 << 2 ' SPEAKER_FRONT_RIGHT is the WAVEFORMATEXTENSIBLE channel mask equivalent
	AudioObjectType_FrontCenter = 1 << 3 ' SPEAKER_FRONT_CENTER is the WAVEFORMATEXTENSIBLE channel mask equivalent
	AudioObjectType_LowFrequency = 1 << 4 ' SPEAKER_LOW_FREQUENCY  is the WAVEFORMATEXTENSIBLE channel mask equivalent - This audio object is not spatialized and therefore doesn't count against spatial audio object resource limits
	AudioObjectType_SideLeft = 1 << 5 ' SPEAKER_SIDE_LEFT is the WAVEFORMATEXTENSIBLE channel mask equivalent
	AudioObjectType_SideRight = 1 << 6 ' SPEAKER_SIDE_RIGHT is the WAVEFORMATEXTENSIBLE channel mask equivalent
	AudioObjectType_BackLeft = 1 << 7 ' SPEAKER_BACK_LEFT is the WAVEFORMATEXTENSIBLE channel mask equivalent
	AudioObjectType_BackRight = 1 << 8 ' SPEAKER_BACK_RIGHT is the WAVEFORMATEXTENSIBLE channel mask equivalent
	AudioObjectType_TopFrontLeft = 1 << 9 ' SPEAKER_TOP_FRONT_LEFT is the WAVEFORMATEXTENSIBLE channel mask equivalent
	AudioObjectType_TopFrontRight = 1 << 10 ' SPEAKER_TOP_FRONT_RIGHT is the WAVEFORMATEXTENSIBLE channel mask equivalent
	AudioObjectType_TopBackLeft = 1 << 11 ' SPEAKER_TOP_BACK_LEFT is the WAVEFORMATEXTENSIBLE channel mask equivalent
	AudioObjectType_TopBackRight = 1 << 12 ' SPEAKER_TOP_BACK_RIGHT is the WAVEFORMATEXTENSIBLE channel mask equivalent
	AudioObjectType_BottomFrontLeft = 1 << 13
	AudioObjectType_BottomFrontRight = 1 << 14
	AudioObjectType_BottomBackLeft = 1 << 15
	AudioObjectType_BottomBackRight = 1& << 16
	AudioObjectType_BackCenter = 1& << 17
End Enum

Public Enum SPATIAL_AUDIO_STREAM_OPTIONS
	SPATIAL_AUDIO_STREAM_OPTIONS_NONE = &H00
	SPATIAL_AUDIO_STREAM_OPTIONS_OFFLOAD = &H01
End Enum


Public Type SpatialAudioObjectRenderStreamActivationParams
	ObjectFormat As LongPtr 'WAVEFORMATEX const ' Format descriptor for a single spatial audio objects. All objects must have the same format and must be of type WAVEFORMATEX or WAVEFORMATEXTENSIBLE. 
	StaticObjectTypeMask As AudioObjectType ' (static channel bed mask) mask of static audio object type that are allowed
	MinDynamicObjectCount As Long ' Minimum number of dynamic audio objects. If at least this count cannot be granted, stream activation will fail with SPTLAUDCLNT_E_NO_MORE_OBJECTS.
	MaxDynamicObjectCount As Long ' Maximum number of dynamic audio objects that can be activated via ISpatialAudioObjectRenderStream
	Category As AUDIO_STREAM_CATEGORY ' Specifies the category of the audio stream and its spatial audio objects
	EventHandle As LongPtr ' Event that will signal the need for more audio data. This handle will be duplicated internally before getting used. This handle must be unique across stream instances.
	NotifyObject As ISpatialAudioObjectRenderStreamNotify
End Type

[PackingAlignment(1)]
Public Type SpatialAudioObjectRenderStreamActivationParams2
	ObjectFormat As LongPtr 'WAVEFORMATEX const ' Format descriptor for a single spatial audio objects. All objects must have the same format and must be of type WAVEFORMATEX or WAVEFORMATEXTENSIBLE. 
	StaticObjectTypeMask As AudioObjectType ' (static channel bed mask) mask of static audio object type that are allowed
	MinDynamicObjectCount As Long ' Minimum number of dynamic audio objects. If at least this count cannot be granted, stream activation will fail with SPTLAUDCLNT_E_NO_MORE_OBJECTS.
	MaxDynamicObjectCount As Long ' Maximum number of dynamic audio objects that can be activated via ISpatialAudioObjectRenderStream
	Category As AUDIO_STREAM_CATEGORY ' Specifies the category of the audio stream and its spatial audio objects
	EventHandle As LongPtr ' Event that will signal the need for more audio data. This handle will be duplicated internally before getting used. This handle must be unique across stream instances.
	NotifyObject As ISpatialAudioObjectRenderStreamNotify
	Options As SPATIAL_AUDIO_STREAM_OPTIONS
End Type

Public Enum AUDCLNT_RETURNCODES
	AUDCLNT_E_NOT_INITIALIZED = &H88890001
	AUDCLNT_E_ALREADY_INITIALIZED = &H88890002
	AUDCLNT_E_WRONG_ENDPOINT_TYPE = &H88890003
	AUDCLNT_E_DEVICE_INVALIDATED = &H88890004
	AUDCLNT_E_NOT_STOPPED = &H88890005
	AUDCLNT_E_BUFFER_TOO_LARGE = &H88890006
	AUDCLNT_E_OUT_OF_ORDER = &H88890007
	AUDCLNT_E_UNSUPPORTED_FORMAT = &H88890008
	AUDCLNT_E_INVALID_SIZE = &H88890009
	AUDCLNT_E_DEVICE_IN_USE = &H8889000A
	AUDCLNT_E_BUFFER_OPERATION_PENDING = &H8889000B
	AUDCLNT_E_THREAD_NOT_REGISTERED = &H8889000C
	AUDCLNT_E_EXCLUSIVE_MODE_NOT_ALLOWED = &H8889000E
	AUDCLNT_E_ENDPOINT_CREATE_FAILED = &H8889000F
	AUDCLNT_E_SERVICE_NOT_RUNNING = &H88890010
	AUDCLNT_E_EVENTHANDLE_NOT_EXPECTED = &H88890011
	AUDCLNT_E_EXCLUSIVE_MODE_ONLY = &H88890012
	AUDCLNT_E_BUFDURATION_PERIOD_NOT_EQUAL = &H88890013
	AUDCLNT_E_EVENTHANDLE_NOT_SET = &H88890014
	AUDCLNT_E_INCORRECT_BUFFER_SIZE = &H88890015
	AUDCLNT_E_BUFFER_SIZE_ERROR = &H88890016
	AUDCLNT_E_CPUUSAGE_EXCEEDED = &H88890017
	AUDCLNT_E_BUFFER_ERROR = &H88890018
	AUDCLNT_E_BUFFER_SIZE_NOT_ALIGNED = &H88890019
	AUDCLNT_E_INVALID_DEVICE_PERIOD = &H88890020
	AUDCLNT_E_INVALID_STREAM_FLAG = &H88890021
	AUDCLNT_E_ENDPOINT_OFFLOAD_NOT_CAPABLE = &H88890022
	AUDCLNT_E_OUT_OF_OFFLOAD_RESOURCES = &H88890023
	AUDCLNT_E_OFFLOAD_MODE_ONLY = &H88890024
	AUDCLNT_E_NONOFFLOAD_MODE_ONLY = &H88890025
	AUDCLNT_E_RESOURCES_INVALIDATED = &H88890026
	AUDCLNT_E_RAW_MODE_UNSUPPORTED = &H88890027
	AUDCLNT_E_ENGINE_PERIODICITY_LOCKED = &H88890028
	AUDCLNT_E_ENGINE_FORMAT_LOCKED = &H88890029
	AUDCLNT_S_BUFFER_EMPTY = &H08890001
	AUDCLNT_S_THREAD_ALREADY_REGISTERED = &H08890002
	AUDCLNT_S_POSITION_STALLED = &H08890003
End Enum

Public Enum SPTLAUDCLNT_RETURNCODES
	SPTLAUDCLNT_E_DESTROYED = &H88890100
	SPTLAUDCLNT_E_OUT_OF_ORDER = &H88890101
	SPTLAUDCLNT_E_RESOURCES_INVALIDATED = &H88890102
	SPTLAUDCLNT_E_NO_MORE_OBJECTS = &H88890103
	SPTLAUDCLNT_E_PROPERTY_NOT_SUPPORTED = &H88890104
	SPTLAUDCLNT_E_ERRORS_IN_OBJECT_CALLS = &H88890105
	SPTLAUDCLNT_E_METADATA_FORMAT_NOT_SUPPORTED = &H88890106
	SPTLAUDCLNT_E_STREAM_NOT_AVAILABLE = &H88890107
	SPTLAUDCLNT_E_INVALID_LICENSE = &H88890108
	SPTLAUDCLNT_E_STREAM_NOT_STOPPED = &H8889010a
	SPTLAUDCLNT_E_STATIC_OBJECT_NOT_AVAILABLE = &H8889010b
	SPTLAUDCLNT_E_OBJECT_ALREADY_ACTIVE = &H8889010c
	SPTLAUDCLNT_E_INTERNAL = &H8889010d
End Enum

Public Enum SPTLAUDCLNT_MD_RETURNCODES
	SPTLAUD_MD_CLNT_E_COMMAND_NOT_FOUND = &H88890200
	SPTLAUD_MD_CLNT_E_OBJECT_NOT_INITIALIZED = &H88890201
	SPTLAUD_MD_CLNT_E_INVALID_ARGS = &H88890202
	SPTLAUD_MD_CLNT_E_METADATA_FORMAT_NOT_FOUND = &H88890203
	SPTLAUD_MD_CLNT_E_VALUE_BUFFER_INCORRECT_SIZE = &H88890204
	SPTLAUD_MD_CLNT_E_MEMORY_BOUNDS = &H88890205
	SPTLAUD_MD_CLNT_E_NO_MORE_COMMANDS = &H88890206
	SPTLAUD_MD_CLNT_E_BUFFER_ALREADY_ATTACHED = &H88890207
	SPTLAUD_MD_CLNT_E_BUFFER_NOT_ATTACHED = &H88890208
	SPTLAUD_MD_CLNT_E_FRAMECOUNT_OUT_OF_RANGE = &H88890209
	SPTLAUD_MD_CLNT_E_NO_ITEMS_FOUND = &H88890210
	SPTLAUD_MD_CLNT_E_ITEM_COPY_OVERFLOW = &H88890211
	SPTLAUD_MD_CLNT_E_NO_ITEMS_OPEN = &H88890212
	SPTLAUD_MD_CLNT_E_ITEMS_ALREADY_OPEN = &H88890213
	SPTLAUD_MD_CLNT_E_ATTACH_FAILED_INTERNAL_BUFFER = &H88890214
	SPTLAUD_MD_CLNT_E_DETACH_FAILED_INTERNAL_BUFFER = &H88890215
	SPTLAUD_MD_CLNT_E_NO_BUFFER_ATTACHED = &H88890216
	SPTLAUD_MD_CLNT_E_NO_MORE_ITEMS = &H88890217
	SPTLAUD_MD_CLNT_E_FRAMEOFFSET_OUT_OF_RANGE = &H88890218
	SPTLAUD_MD_CLNT_E_ITEM_MUST_HAVE_COMMANDS = &H88890219
	SPTLAUD_MD_CLNT_E_NO_ITEMOFFSET_WRITTEN = &H88890220
	SPTLAUD_MD_CLNT_E_NO_ITEMS_WRITTEN = &H88890221
	SPTLAUD_MD_CLNT_E_COMMAND_ALREADY_WRITTEN = &H88890222
	SPTLAUD_MD_CLNT_E_FORMAT_MISMATCH = &H88890223
	SPTLAUD_MD_CLNT_E_BUFFER_STILL_ATTACHED = &H88890224
	SPTLAUD_MD_CLNT_E_ITEMS_LOCKED_FOR_WRITING = &H88890225
End Enum

Public Enum AUDCLNT_STREAMFLAGS
    AUDCLNT_STREAMFLAGS_CROSSPROCESS = &H00010000
    AUDCLNT_STREAMFLAGS_LOOPBACK = &H00020000
    AUDCLNT_STREAMFLAGS_EVENTCALLBACK = &H00040000
    AUDCLNT_STREAMFLAGS_NOPERSIST = &H00080000
    AUDCLNT_STREAMFLAGS_RATEADJUST = &H00100000
    AUDCLNT_STREAMFLAGS_SRC_DEFAULT_QUALITY = &H08000000
    AUDCLNT_STREAMFLAGS_AUTOCONVERTPCM = &H80000000
End Enum

Public Enum AUDCLNT_SESSIONFLAGS
	AUDCLNT_SESSIONFLAGS_EXPIREWHENUNOWNED = &H10000000
	AUDCLNT_SESSIONFLAGS_DISPLAY_HIDE = &H20000000
	AUDCLNT_SESSIONFLAGS_DISPLAY_HIDEWHENEXPIRED = &H40000000
End Enum

Public Enum DEVICE_STATE
	DEVICE_STATE_ACTIVE = &H00000001
	DEVICE_STATE_DISABLED = &H00000002
	DEVICE_STATE_NOTPRESENT = &H00000004
	DEVICE_STATE_UNPLUGGED = &H00000008
	DEVICE_STATEMASK_ALL = &H0000000f
End Enum

Public Enum ENDPOINT_SYSFX_STATUS
	ENDPOINT_SYSFX_ENABLED = &H00000000 ' System Effects are enabled.")
	ENDPOINT_SYSFX_DISABLED = &H00000001 ' System Effects are disabled.")
End Enum

Public Type DIRECTX_AUDIO_ACTIVATION_PARAMS
	cbDirectXAudioActivationParams As Long
	guidAudioSession As UUID
	dwAudioStreamFlags As AUDCLNT_STREAMFLAGS
End Type

Public Enum EDataFlow
	eRender
	eCapture
	eAll
	EDataFlow_enum_count
End Enum

Public Enum ERole
    eConsole
    eMultimedia
    eCommunications
    ERole_enum_count
End Enum

Public Enum EndpointFormFactor
    RemoteNetworkDevice '// = 0
    Speakers
    LineLevel
    Headphones
    Microphone
    Headset
    Handset
    UnknownDigitalPassthrough
    SPDIF
    DigitalAudioDisplayDevice
    UnknownFormFactor
    EndpointFormFactor_enum_count
    HDMI = DigitalAudioDisplayDevice
End Enum

Public Type AudioExtensionParams
	AddPageParam As LongPtr
	pEndpoint As IMMDevice
	pPnpInterface As IMMDevice
	pPnpDevnode As IMMDevice
End Type

Public Type AUDIO_VOLUME_NOTIFICATION_DATA
	guidEventContext As UUID ' Context associated with the originator of the event.
	bMuted As BOOL
	fMasterVolume As Single
	nChannels As Long
	afChannelVolumes(0 To 127) As Single
End Type

Public Enum KsDataFormatAttribs
    KSDATAFORMAT_BIT_TEMPORAL_COMPRESSION = 0
    KSDATAFORMAT_TEMPORAL_COMPRESSION = (1 << KSDATAFORMAT_BIT_TEMPORAL_COMPRESSION)
    KSDATAFORMAT_BIT_ATTRIBUTES = 1
    KSDATAFORMAT_ATTRIBUTES = (1 << KSDATAFORMAT_BIT_ATTRIBUTES)
End Enum
Public Type KSDATAFORMAT
	FormatSize As Long
	Flags As KsDataFormatAttribs
	SampleSize As Long
	Reserved As Long
	MajorFormat As UUID
	SubFormat As UUID
	Specifier As UUID
End Type

Public Type KSIDENTIFIER
' typedef struct {
'   union {
'     struct {
'       GUID  Set;
'       ULONG Id;
'       ULONG Flags;
'     } _IDENTIFIER;
'     struct {
'       GUID  Set;
'       ULONG Id;
'       ULONG Flags;
'     };
'     LONGLONG Alignment;
'   };
' } KSIDENTIFIER, *PKSIDENTIFIER;
    unsupported_union(23) As Byte
End Type
'Alias KSPROPERTY As KSIDENTIFIER
Public Type KSPROPERTY
' typedef struct {
'   union {
'     struct {
'       GUID  Set;
'       ULONG Id;
'       ULONG Flags;
'     } _IDENTIFIER;
'     struct {
'       GUID  Set;
'       ULONG Id;
'       ULONG Flags;
'     };
'     LONGLONG Alignment;
'   };
' } KSIDENTIFIER, *PKSIDENTIFIER;
    unsupported_union(23) As Byte
End Type
Public Enum EPcxConnectionType
	eConnTypeUnknown
	eConnType3Point5mm
	eConnTypeQuarter
	eConnTypeAtapiInternal
	eConnTypeRCA
	eConnTypeOptical
	eConnTypeOtherDigital
	eConnTypeOtherAnalog
	eConnTypeMultichannelAnalogDIN
	eConnTypeXlrProfessional
	eConnTypeRJ11Modem
	eConnTypeCombination
End Enum

Public Enum EPcxGeoLocation
    eGeoLocRear = &H1
    eGeoLocFront
    eGeoLocLeft
    eGeoLocRight
    eGeoLocTop
    eGeoLocBottom
    eGeoLocRearPanel
    eGeoLocRiser
    eGeoLocInsideMobileLid
    eGeoLocDrivebay
    eGeoLocHDMI
    eGeoLocOutsideMobileLid
    eGeoLocATAPI
    eGeoLocNotApplicable
    eGeoLocReserved6
End Enum

Public Enum EPcxGenLocation
    eGenLocPrimaryBox = 0
    eGenLocInternal
    eGenLocSeparate
    eGenLocOther
End Enum

Public Enum EPxcPortConnection
    ePortConnJack = 0
    ePortConnIntegratedDevice
    ePortConnBothIntegratedAndJack
    ePortConnUnknown
End Enum

Public Type KSJACK_DESCRIPTION
	ChannelMapping As Long
	Color As Long ' use RGB() macro to generate these
	ConnectionType As EPcxConnectionType
	GeoLocation As EPcxGeoLocation
	GenLocation As EPcxGenLocation
	PortConnection As EPxcPortConnection
	IsConnected As BOOL
End Type

Public Enum KSJACK_SINK_CONNECTIONTYPE
	KSJACK_SINK_CONNECTIONTYPE_HDMI = 0 ' HDMI
	KSJACK_SINK_CONNECTIONTYPE_DISPLAYPORT = 1 ' DisplayPort
End Enum

Public Const MAX_SINK_DESCRIPTION_NAME_LENGTH = 32

Public Type KSJACK_SINK_INFORMATION
	ConnType As KSJACK_SINK_CONNECTIONTYPE ' Connection Type
	ManufacturerId As Integer ' Sink manufacturer ID
	ProductId As Integer ' Sink product ID
	AudioLatency As Integer ' Sink audio latency
	HDCPCapable As BOOL ' HDCP Support
	AICapable As BOOL ' ACP Packet, ISRC1, and ISRC2 Support
	SinkDescriptionLength As Byte ' Monitor/Sink name length
	SinkDescription(0 To (MAX_SINK_DESCRIPTION_NAME_LENGTH - 1)) As Integer ' Monitor/Sink name
	PortId As LUID ' Video port identifier
End Type

Public Enum JackDesc2Caps
    JACKDESC2_PRESENCE_DETECT_CAPABILITY = &H1
    JACKDESC2_DYNAMIC_FORMAT_CHANGE_CAPABILITY = &h2
End Enum
Public Type KSJACK_DESCRIPTION2
	DeviceStateInfo As Long ' Top 16 bits: Report current device state, active, streaming, idle, or hardware not ready
	                        ' Bottom 16 bits: detailed reason to further explain state in top 16 bits
	JackCapabilities As JackDesc2Caps ' Report jack capabilities such as jack presence detection capability 
	                         ' or dynamic format changing capability
End Type

Public Type KSJACK_DESCRIPTION3
	ConfigId As Long ' Driver defined bitmask or enum describing the current configuration, changing this value causes
	' audioendpointbuilder to refresh the cache to ensure that the published endpoint matches the current config.
End Type

Public Enum DataFlow
    In
    Out
End Enum

Public Enum PartType
    Connector
    Subunit
End Enum

Public Enum ConnectorType
    Unknown_Connector
    Physical_Internal '// Tangible connector inside the device or PC. i.e. you have to open the case (of the PC or device) to see it
    Physical_External '// Tangible connector external to the device of PC, i.e. a jack
    Software_IO       ' // Connector that you can send/receive data to/from
    Software_Fixed    ' // Connector that is for topology parsing only.  Is involved in a permanent connection to another Fixed connector.
    Network           ' // A connector over IP
End Enum

Public Enum AMBISONICS_TYPE
    AMBISONICS_TYPE_FULL3D = 0
End Enum
Public Enum AMBISONICS_CHANNEL_ORDERING
    AMBISONICS_CHANNEL_ORDERING_ACN = 0
End Enum
Public Enum AMBISONICS_NORMALIZATION
    AMBISONICS_NORMALIZATION_SN3D = 0
    AMBISONICS_NORMALIZATION_N3D = 1
End Enum
Public Const AMBISONICS_PARAM_VERSION_1 = 1
Public Type AMBISONICS_PARAMS
    u32Size As Long
    u32Version As Long
    u32Type As AMBISONICS_TYPE
    u32ChannelOrdering As AMBISONICS_CHANNEL_ORDERING
    u32Normalization As AMBISONICS_NORMALIZATION
    u32Order As Long
    u32NumChannels As Long
    pu32ChannelMap As LongPtr
End Type




Public Enum WAV_FORMAT_IDS
    WAVE_FORMAT_UNKNOWN = &H0000 /* Microsoft Corporation */
    WAVE_FORMAT_PCM = &H0001
    WAVE_FORMAT_ADPCM = &H0002 /* Microsoft Corporation */
    WAVE_FORMAT_IEEE_FLOAT = &H0003 /* Microsoft Corporation */
    WAVE_FORMAT_VSELP = &H0004 /* Compaq Computer Corp. */
    WAVE_FORMAT_IBM_CVSD = &H0005 /* IBM Corporation */
    WAVE_FORMAT_ALAW = &H0006 /* Microsoft Corporation */
    WAVE_FORMAT_MULAW = &H0007 /* Microsoft Corporation */
    WAVE_FORMAT_DTS = &H0008 /* Microsoft Corporation */
    WAVE_FORMAT_DRM = &H0009 /* Microsoft Corporation */
    WAVE_FORMAT_WMAVOICE9 = &H000A /* Microsoft Corporation */
    WAVE_FORMAT_WMAVOICE10 = &H000B /* Microsoft Corporation */
    WAVE_FORMAT_OKI_ADPCM = &H0010 /* OKI */
    WAVE_FORMAT_DVI_ADPCM = &H0011 /* Intel Corporation */
    WAVE_FORMAT_IMA_ADPCM = (WAVE_FORMAT_DVI_ADPCM) /* Intel Corporation */
    WAVE_FORMAT_MEDIASPACE_ADPCM = &H0012 /* Videologic */
    WAVE_FORMAT_SIERRA_ADPCM = &H0013 /* Sierra Semiconductor Corp */
    WAVE_FORMAT_G723_ADPCM = &H0014 /* Antex Electronics Corporation */
    WAVE_FORMAT_DIGISTD = &H0015 /* DSP Solutions, Inc. */
    WAVE_FORMAT_DIGIFIX = &H0016 /* DSP Solutions, Inc. */
    WAVE_FORMAT_DIALOGIC_OKI_ADPCM = &H0017 /* Dialogic Corporation */
    WAVE_FORMAT_MEDIAVISION_ADPCM = &H0018 /* Media Vision, Inc. */
    WAVE_FORMAT_CU_CODEC = &H0019 /* Hewlett-Packard Company */
    WAVE_FORMAT_HP_DYN_VOICE = &H001A /* Hewlett-Packard Company */
    WAVE_FORMAT_YAMAHA_ADPCM = &H0020 /* Yamaha Corporation of America */
    WAVE_FORMAT_SONARC = &H0021 /* Speech Compression */
    WAVE_FORMAT_DSPGROUP_TRUESPEECH = &H0022 /* DSP Group, Inc */
    WAVE_FORMAT_ECHOSC1 = &H0023 /* Echo Speech Corporation */
    WAVE_FORMAT_AUDIOFILE_AF36 = &H0024 /* Virtual Music, Inc. */
    WAVE_FORMAT_APTX = &H0025 /* Audio Processing Technology */
    WAVE_FORMAT_AUDIOFILE_AF10 = &H0026 /* Virtual Music, Inc. */
    WAVE_FORMAT_PROSODY_1612 = &H0027 /* Aculab plc */
    WAVE_FORMAT_LRC = &H0028 /* Merging Technologies S.A. */
    WAVE_FORMAT_DOLBY_AC2 = &H0030 /* Dolby Laboratories */
    WAVE_FORMAT_GSM610 = &H0031 /* Microsoft Corporation */
    WAVE_FORMAT_MSNAUDIO = &H0032 /* Microsoft Corporation */
    WAVE_FORMAT_ANTEX_ADPCME = &H0033 /* Antex Electronics Corporation */
    WAVE_FORMAT_CONTROL_RES_VQLPC = &H0034 /* Control Resources Limited */
    WAVE_FORMAT_DIGIREAL = &H0035 /* DSP Solutions, Inc. */
    WAVE_FORMAT_DIGIADPCM = &H0036 /* DSP Solutions, Inc. */
    WAVE_FORMAT_CONTROL_RES_CR10 = &H0037 /* Control Resources Limited */
    WAVE_FORMAT_NMS_VBXADPCM = &H0038 /* Natural MicroSystems */
    WAVE_FORMAT_CS_IMAADPCM = &H0039 /* Crystal Semiconductor IMA ADPCM */
    WAVE_FORMAT_ECHOSC3 = &H003A /* Echo Speech Corporation */
    WAVE_FORMAT_ROCKWELL_ADPCM = &H003B /* Rockwell International */
    WAVE_FORMAT_ROCKWELL_DIGITALK = &H003C /* Rockwell International */
    WAVE_FORMAT_XEBEC = &H003D /* Xebec Multimedia Solutions Limited */
    WAVE_FORMAT_G721_ADPCM = &H0040 /* Antex Electronics Corporation */
    WAVE_FORMAT_G728_CELP = &H0041 /* Antex Electronics Corporation */
    WAVE_FORMAT_MSG723 = &H0042 /* Microsoft Corporation */
    WAVE_FORMAT_INTEL_G723_1 = &H0043 /* Intel Corp. */
    WAVE_FORMAT_INTEL_G729 = &H0044 /* Intel Corp. */
    WAVE_FORMAT_SHARP_G726 = &H0045 /* Sharp */
    WAVE_FORMAT_MPEG = &H0050 /* Microsoft Corporation */
    WAVE_FORMAT_RT24 = &H0052 /* InSoft, Inc. */
    WAVE_FORMAT_PAC = &H0053 /* InSoft, Inc. */
    WAVE_FORMAT_MPEGLAYER3 = &H0055 /* ISO/MPEG Layer3 Format Tag */
    WAVE_FORMAT_LUCENT_G723 = &H0059 /* Lucent Technologies */
    WAVE_FORMAT_CIRRUS = &H0060 /* Cirrus Logic */
    WAVE_FORMAT_ESPCM = &H0061 /* ESS Technology */
    WAVE_FORMAT_VOXWARE = &H0062 /* Voxware Inc */
    WAVE_FORMAT_CANOPUS_ATRAC = &H0063 /* Canopus, co., Ltd. */
    WAVE_FORMAT_G726_ADPCM = &H0064 /* APICOM */
    WAVE_FORMAT_G722_ADPCM = &H0065 /* APICOM */
    WAVE_FORMAT_DSAT = &H0066 /* Microsoft Corporation */
    WAVE_FORMAT_DSAT_DISPLAY = &H0067 /* Microsoft Corporation */
    WAVE_FORMAT_VOXWARE_BYTE_ALIGNED = &H0069 /* Voxware Inc */
    WAVE_FORMAT_VOXWARE_AC8 = &H0070 /* Voxware Inc */
    WAVE_FORMAT_VOXWARE_AC10 = &H0071 /* Voxware Inc */
    WAVE_FORMAT_VOXWARE_AC16 = &H0072 /* Voxware Inc */
    WAVE_FORMAT_VOXWARE_AC20 = &H0073 /* Voxware Inc */
    WAVE_FORMAT_VOXWARE_RT24 = &H0074 /* Voxware Inc */
    WAVE_FORMAT_VOXWARE_RT29 = &H0075 /* Voxware Inc */
    WAVE_FORMAT_VOXWARE_RT29HW = &H0076 /* Voxware Inc */
    WAVE_FORMAT_VOXWARE_VR12 = &H0077 /* Voxware Inc */
    WAVE_FORMAT_VOXWARE_VR18 = &H0078 /* Voxware Inc */
    WAVE_FORMAT_VOXWARE_TQ40 = &H0079 /* Voxware Inc */
    WAVE_FORMAT_VOXWARE_SC3 = &H007A /* Voxware Inc */
    WAVE_FORMAT_VOXWARE_SC3_1 = &H007B /* Voxware Inc */
    WAVE_FORMAT_SOFTSOUND = &H0080 /* Softsound, Ltd. */
    WAVE_FORMAT_VOXWARE_TQ60 = &H0081 /* Voxware Inc */
    WAVE_FORMAT_MSRT24 = &H0082 /* Microsoft Corporation */
    WAVE_FORMAT_G729A = &H0083 /* AT&T Labs, Inc. */
    WAVE_FORMAT_MVI_MVI2 = &H0084 /* Motion Pixels */
    WAVE_FORMAT_DF_G726 = &H0085 /* DataFusion Systems (Pty) (Ltd) */
    WAVE_FORMAT_DF_GSM610 = &H0086 /* DataFusion Systems (Pty) (Ltd) */
    WAVE_FORMAT_ISIAUDIO = &H0088 /* Iterated Systems, Inc. */
    WAVE_FORMAT_ONLIVE = &H0089 /* OnLive! Technologies, Inc. */
    WAVE_FORMAT_MULTITUDE_FT_SX20 = &H008A /* Multitude Inc. */
    WAVE_FORMAT_INFOCOM_ITS_G721_ADPCM = &H008B /* Infocom */
    WAVE_FORMAT_CONVEDIA_G729 = &H008C /* Convedia Corp. */
    WAVE_FORMAT_CONGRUENCY = &H008D /* Congruency Inc. */
    WAVE_FORMAT_SBC24 = &H0091 /* Siemens Business Communications Sys */
    WAVE_FORMAT_DOLBY_AC3_SPDIF = &H0092 /* Sonic Foundry */
    WAVE_FORMAT_MEDIASONIC_G723 = &H0093 /* MediaSonic */
    WAVE_FORMAT_PROSODY_8KBPS = &H0094 /* Aculab plc */
    WAVE_FORMAT_ZYXEL_ADPCM = &H0097 /* ZyXEL Communications, Inc. */
    WAVE_FORMAT_PHILIPS_LPCBB = &H0098 /* Philips Speech Processing */
    WAVE_FORMAT_PACKED = &H0099 /* Studer Professional Audio AG */
    WAVE_FORMAT_MALDEN_PHONYTALK = &H00A0 /* Malden Electronics Ltd. */
    WAVE_FORMAT_RACAL_RECORDER_GSM = &H00A1 /* Racal recorders */
    WAVE_FORMAT_RACAL_RECORDER_G720_A = &H00A2 /* Racal recorders */
    WAVE_FORMAT_RACAL_RECORDER_G723_1 = &H00A3 /* Racal recorders */
    WAVE_FORMAT_RACAL_RECORDER_TETRA_ACELP = &H00A4 /* Racal recorders */
    WAVE_FORMAT_NEC_AAC = &H00B0 /* NEC Corp. */
    WAVE_FORMAT_RAW_AAC1 = &H00FF /* For Raw AAC, with format block AudioSpecificConfig() (as defined by MPEG-4), that follows WAVEFORMATEX */
    WAVE_FORMAT_RHETOREX_ADPCM = &H0100 /* Rhetorex Inc. */
    WAVE_FORMAT_IRAT = &H0101 /* BeCubed Software Inc. */
    WAVE_FORMAT_VIVO_G723 = &H0111 /* Vivo Software */
    WAVE_FORMAT_VIVO_SIREN = &H0112 /* Vivo Software */
    WAVE_FORMAT_PHILIPS_CELP = &H0120 /* Philips Speech Processing */
    WAVE_FORMAT_PHILIPS_GRUNDIG = &H0121 /* Philips Speech Processing */
    WAVE_FORMAT_DIGITAL_G723 = &H0123 /* Digital Equipment Corporation */
    WAVE_FORMAT_SANYO_LD_ADPCM = &H0125 /* Sanyo Electric Co., Ltd. */
    WAVE_FORMAT_SIPROLAB_ACEPLNET = &H0130 /* Sipro Lab Telecom Inc. */
    WAVE_FORMAT_SIPROLAB_ACELP4800 = &H0131 /* Sipro Lab Telecom Inc. */
    WAVE_FORMAT_SIPROLAB_ACELP8V3 = &H0132 /* Sipro Lab Telecom Inc. */
    WAVE_FORMAT_SIPROLAB_G729 = &H0133 /* Sipro Lab Telecom Inc. */
    WAVE_FORMAT_SIPROLAB_G729A = &H0134 /* Sipro Lab Telecom Inc. */
    WAVE_FORMAT_SIPROLAB_KELVIN = &H0135 /* Sipro Lab Telecom Inc. */
    WAVE_FORMAT_VOICEAGE_AMR = &H0136 /* VoiceAge Corp. */
    WAVE_FORMAT_G726ADPCM = &H0140 /* Dictaphone Corporation */
    WAVE_FORMAT_DICTAPHONE_CELP68 = &H0141 /* Dictaphone Corporation */
    WAVE_FORMAT_DICTAPHONE_CELP54 = &H0142 /* Dictaphone Corporation */
    WAVE_FORMAT_QUALCOMM_PUREVOICE = &H0150 /* Qualcomm, Inc. */
    WAVE_FORMAT_QUALCOMM_HALFRATE = &H0151 /* Qualcomm, Inc. */
    WAVE_FORMAT_TUBGSM = &H0155 /* Ring Zero Systems, Inc. */
    WAVE_FORMAT_MSAUDIO1 = &H0160 /* Microsoft Corporation */
    WAVE_FORMAT_WMAUDIO2 = &H0161 /* Microsoft Corporation */
    WAVE_FORMAT_WMAUDIO3 = &H0162 /* Microsoft Corporation */
    WAVE_FORMAT_WMAUDIO_LOSSLESS = &H0163 /* Microsoft Corporation */
    WAVE_FORMAT_WMASPDIF = &H0164 /* Microsoft Corporation */
    WAVE_FORMAT_UNISYS_NAP_ADPCM = &H0170 /* Unisys Corp. */
    WAVE_FORMAT_UNISYS_NAP_ULAW = &H0171 /* Unisys Corp. */
    WAVE_FORMAT_UNISYS_NAP_ALAW = &H0172 /* Unisys Corp. */
    WAVE_FORMAT_UNISYS_NAP_16K = &H0173 /* Unisys Corp. */
    WAVE_FORMAT_SYCOM_ACM_SYC008 = &H0174 /* SyCom Technologies */
    WAVE_FORMAT_SYCOM_ACM_SYC701_G726L = &H0175 /* SyCom Technologies */
    WAVE_FORMAT_SYCOM_ACM_SYC701_CELP54 = &H0176 /* SyCom Technologies */
    WAVE_FORMAT_SYCOM_ACM_SYC701_CELP68 = &H0177 /* SyCom Technologies */
    WAVE_FORMAT_KNOWLEDGE_ADVENTURE_ADPCM = &H0178 /* Knowledge Adventure, Inc. */
    WAVE_FORMAT_FRAUNHOFER_IIS_MPEG2_AAC = &H0180 /* Fraunhofer IIS */
    WAVE_FORMAT_DTS_DS = &H0190 /* Digital Theatre Systems, Inc. */
    WAVE_FORMAT_CREATIVE_ADPCM = &H0200 /* Creative Labs, Inc */
    WAVE_FORMAT_CREATIVE_FASTSPEECH8 = &H0202 /* Creative Labs, Inc */
    WAVE_FORMAT_CREATIVE_FASTSPEECH10 = &H0203 /* Creative Labs, Inc */
    WAVE_FORMAT_UHER_ADPCM = &H0210 /* UHER informatic GmbH */
    WAVE_FORMAT_ULEAD_DV_AUDIO = &H0215 /* Ulead Systems, Inc. */
    WAVE_FORMAT_ULEAD_DV_AUDIO_1 = &H0216 /* Ulead Systems, Inc. */
    WAVE_FORMAT_QUARTERDECK = &H0220 /* Quarterdeck Corporation */
    WAVE_FORMAT_ILINK_VC = &H0230 /* I-link Worldwide */
    WAVE_FORMAT_RAW_SPORT = &H0240 /* Aureal Semiconductor */
    WAVE_FORMAT_ESST_AC3 = &H0241 /* ESS Technology, Inc. */
    WAVE_FORMAT_GENERIC_PASSTHRU = &H0249
    WAVE_FORMAT_IPI_HSX = &H0250 /* Interactive Products, Inc. */
    WAVE_FORMAT_IPI_RPELP = &H0251 /* Interactive Products, Inc. */
    WAVE_FORMAT_CS2 = &H0260 /* Consistent Software */
    WAVE_FORMAT_SONY_SCX = &H0270 /* Sony Corp. */
    WAVE_FORMAT_SONY_SCY = &H0271 /* Sony Corp. */
    WAVE_FORMAT_SONY_ATRAC3 = &H0272 /* Sony Corp. */
    WAVE_FORMAT_SONY_SPC = &H0273 /* Sony Corp. */
    WAVE_FORMAT_TELUM_AUDIO = &H0280 /* Telum Inc. */
    WAVE_FORMAT_TELUM_IA_AUDIO = &H0281 /* Telum Inc. */
    WAVE_FORMAT_NORCOM_VOICE_SYSTEMS_ADPCM = &H0285 /* Norcom Electronics Corp. */
    WAVE_FORMAT_FM_TOWNS_SND = &H0300 /* Fujitsu Corp. */
    WAVE_FORMAT_MICRONAS = &H0350 /* Micronas Semiconductors, Inc. */
    WAVE_FORMAT_MICRONAS_CELP833 = &H0351 /* Micronas Semiconductors, Inc. */
    WAVE_FORMAT_BTV_DIGITAL = &H0400 /* Brooktree Corporation */
    WAVE_FORMAT_INTEL_MUSIC_CODER = &H0401 /* Intel Corp. */
    WAVE_FORMAT_INDEO_AUDIO = &H0402 /* Ligos */
    WAVE_FORMAT_QDESIGN_MUSIC = &H0450 /* QDesign Corporation */
    WAVE_FORMAT_ON2_VP7_AUDIO = &H0500 /* On2 Technologies */
    WAVE_FORMAT_ON2_VP6_AUDIO = &H0501 /* On2 Technologies */
    WAVE_FORMAT_VME_VMPCM = &H0680 /* AT&T Labs, Inc. */
    WAVE_FORMAT_TPC = &H0681 /* AT&T Labs, Inc. */
    WAVE_FORMAT_LIGHTWAVE_LOSSLESS = &H08AE /* Clearjump */
    WAVE_FORMAT_OLIGSM = &H1000 /* Ing C. Olivetti & C., S.p.A. */
    WAVE_FORMAT_OLIADPCM = &H1001 /* Ing C. Olivetti & C., S.p.A. */
    WAVE_FORMAT_OLICELP = &H1002 /* Ing C. Olivetti & C., S.p.A. */
    WAVE_FORMAT_OLISBC = &H1003 /* Ing C. Olivetti & C., S.p.A. */
    WAVE_FORMAT_OLIOPR = &H1004 /* Ing C. Olivetti & C., S.p.A. */
    WAVE_FORMAT_LH_CODEC = &H1100 /* Lernout & Hauspie */
    WAVE_FORMAT_LH_CODEC_CELP = &H1101 /* Lernout & Hauspie */
    WAVE_FORMAT_LH_CODEC_SBC8 = &H1102 /* Lernout & Hauspie */
    WAVE_FORMAT_LH_CODEC_SBC12 = &H1103 /* Lernout & Hauspie */
    WAVE_FORMAT_LH_CODEC_SBC16 = &H1104 /* Lernout & Hauspie */
    WAVE_FORMAT_NORRIS = &H1400 /* Norris Communications, Inc. */
    WAVE_FORMAT_ISIAUDIO_2 = &H1401 /* ISIAudio */
    WAVE_FORMAT_SOUNDSPACE_MUSICOMPRESS = &H1500 /* AT&T Labs, Inc. */
    WAVE_FORMAT_MPEG_ADTS_AAC = &H1600 /* Microsoft Corporation */
    WAVE_FORMAT_MPEG_RAW_AAC = &H1601 /* Microsoft Corporation */
    WAVE_FORMAT_MPEG_LOAS = &H1602 /* Microsoft Corporation (MPEG-4 Audio Transport Streams (LOAS/LATM) */
    WAVE_FORMAT_NOKIA_MPEG_ADTS_AAC = &H1608 /* Microsoft Corporation */
    WAVE_FORMAT_NOKIA_MPEG_RAW_AAC = &H1609 /* Microsoft Corporation */
    WAVE_FORMAT_VODAFONE_MPEG_ADTS_AAC = &H160A /* Microsoft Corporation */
    WAVE_FORMAT_VODAFONE_MPEG_RAW_AAC = &H160B /* Microsoft Corporation */
    WAVE_FORMAT_MPEG_HEAAC = &H1610 /* Microsoft Corporation (MPEG-2 AAC or MPEG-4 HE-AAC v1/v2 streams with any payload (ADTS, ADIF, LOAS/LATM, RAW). Format block includes MP4 AudioSpecificConfig() -- see HEAACWAVEFORMAT below */
    WAVE_FORMAT_VOXWARE_RT24_SPEECH = &H181C /* Voxware Inc. */
    WAVE_FORMAT_SONICFOUNDRY_LOSSLESS = &H1971 /* Sonic Foundry */
    WAVE_FORMAT_INNINGS_TELECOM_ADPCM = &H1979 /* Innings Telecom Inc. */
    WAVE_FORMAT_LUCENT_SX8300P = &H1C07 /* Lucent Technologies */
    WAVE_FORMAT_LUCENT_SX5363S = &H1C0C /* Lucent Technologies */
    WAVE_FORMAT_CUSEEME = &H1F03 /* CUSeeMe */
    WAVE_FORMAT_NTCSOFT_ALF2CM_ACM = &H1FC4 /* NTCSoft */
    WAVE_FORMAT_DVM = &H2000 /* FAST Multimedia AG */
    WAVE_FORMAT_DTS2 = &H2001
    WAVE_FORMAT_MAKEAVIS = &H3313
    WAVE_FORMAT_DIVIO_MPEG4_AAC = &H4143 /* Divio, Inc. */
    WAVE_FORMAT_NOKIA_ADAPTIVE_MULTIRATE = &H4201 /* Nokia */
    WAVE_FORMAT_DIVIO_G726 = &H4243 /* Divio, Inc. */
    WAVE_FORMAT_LEAD_SPEECH = &H434C /* LEAD Technologies */
    WAVE_FORMAT_LEAD_VORBIS = &H564C /* LEAD Technologies */
    WAVE_FORMAT_WAVPACK_AUDIO = &H5756 /* xiph.org */
    WAVE_FORMAT_ALAC = &H6C61 /* Apple Lossless */
    WAVE_FORMAT_OGG_VORBIS_MODE_1 = &H674F /* Ogg Vorbis */
    WAVE_FORMAT_OGG_VORBIS_MODE_2 = &H6750 /* Ogg Vorbis */
    WAVE_FORMAT_OGG_VORBIS_MODE_3 = &H6751 /* Ogg Vorbis */
    WAVE_FORMAT_OGG_VORBIS_MODE_1_PLUS = &H676F /* Ogg Vorbis */
    WAVE_FORMAT_OGG_VORBIS_MODE_2_PLUS = &H6770 /* Ogg Vorbis */
    WAVE_FORMAT_OGG_VORBIS_MODE_3_PLUS = &H6771 /* Ogg Vorbis */
    WAVE_FORMAT_3COM_NBX = &H7000 /* 3COM Corp. */
    WAVE_FORMAT_OPUS = &H704F /* Opus */
    WAVE_FORMAT_FAAD_AAC = &H706D
    WAVE_FORMAT_AMR_NB = &H7361 /* AMR Narrowband */
    WAVE_FORMAT_AMR_WB = &H7362 /* AMR Wideband */
    WAVE_FORMAT_AMR_WP = &H7363 /* AMR Wideband Plus */
    WAVE_FORMAT_GSM_AMR_CBR = &H7A21 /* GSMA/3GPP */
    WAVE_FORMAT_GSM_AMR_VBR_SID = &H7A22 /* GSMA/3GPP */
    WAVE_FORMAT_COMVERSE_INFOSYS_G723_1 = &HA100& /* Comverse Infosys */
    WAVE_FORMAT_COMVERSE_INFOSYS_AVQSBC = &HA101& /* Comverse Infosys */
    WAVE_FORMAT_COMVERSE_INFOSYS_SBC = &HA102& /* Comverse Infosys */
    WAVE_FORMAT_SYMBOL_G729_A = &HA103& /* Symbol Technologies */
    WAVE_FORMAT_VOICEAGE_AMR_WB = &HA104& /* VoiceAge Corp. */
    WAVE_FORMAT_INGENIENT_G726 = &HA105& /* Ingenient Technologies, Inc. */
    WAVE_FORMAT_MPEG4_AAC = &HA106& /* ISO/MPEG-4 */
    WAVE_FORMAT_ENCORE_G726 = &HA107& /* Encore Software */
    WAVE_FORMAT_ZOLL_ASAO = &HA108& /* ZOLL Medical Corp. */
    WAVE_FORMAT_SPEEX_VOICE = &HA109& /* xiph.org */
    WAVE_FORMAT_VIANIX_MASC = &HA10A& /* Vianix LLC */
    WAVE_FORMAT_WM9_SPECTRUM_ANALYZER = &HA10B& /* Microsoft */
    WAVE_FORMAT_WMF_SPECTRUM_ANAYZER = &HA10C& /* Microsoft */
    WAVE_FORMAT_GSM_610 = &HA10D&
    WAVE_FORMAT_GSM_620 = &HA10E&
    WAVE_FORMAT_GSM_660 = &HA10F&
    WAVE_FORMAT_GSM_690 = &HA110&
    WAVE_FORMAT_GSM_ADAPTIVE_MULTIRATE_WB = &HA111&
    WAVE_FORMAT_POLYCOM_G722 = &HA112& /* Polycom */
    WAVE_FORMAT_POLYCOM_G728 = &HA113& /* Polycom */
    WAVE_FORMAT_POLYCOM_G729_A = &HA114& /* Polycom */
    WAVE_FORMAT_POLYCOM_SIREN = &HA115& /* Polycom */
    WAVE_FORMAT_GLOBAL_IP_ILBC = &HA116& /* Global IP */
    WAVE_FORMAT_RADIOTIME_TIME_SHIFT_RADIO = &HA117& /* RadioTime */
    WAVE_FORMAT_NICE_ACA = &HA118& /* Nice Systems */
    WAVE_FORMAT_NICE_ADPCM = &HA119& /* Nice Systems */
    WAVE_FORMAT_VOCORD_G721 = &HA11A& /* Vocord Telecom */
    WAVE_FORMAT_VOCORD_G726 = &HA11B& /* Vocord Telecom */
    WAVE_FORMAT_VOCORD_G722_1 = &HA11C& /* Vocord Telecom */
    WAVE_FORMAT_VOCORD_G728 = &HA11D& /* Vocord Telecom */
    WAVE_FORMAT_VOCORD_G729 = &HA11E& /* Vocord Telecom */
    WAVE_FORMAT_VOCORD_G729_A = &HA11F& /* Vocord Telecom */
    WAVE_FORMAT_VOCORD_G723_1 = &HA120& /* Vocord Telecom */
    WAVE_FORMAT_VOCORD_LBC = &HA121& /* Vocord Telecom */
    WAVE_FORMAT_NICE_G728 = &HA122& /* Nice Systems */
    WAVE_FORMAT_FRACE_TELECOM_G729 = &HA123& /* France Telecom */
    WAVE_FORMAT_CODIAN = &HA124& /* CODIAN */
    WAVE_FORMAT_DOLBY_AC4 = &HAC40& /* Dolby AC-4 */
    WAVE_FORMAT_FLAC = &HF1AC& /* flac.sourceforge.net */
    WAVE_FORMAT_EXTENSIBLE = &HFFFE& /* Microsoft */
End Enum
Public Enum SPEAKER_POSITIONS
    SPEAKER_FRONT_LEFT = &H1
    SPEAKER_FRONT_RIGHT = &H2
    SPEAKER_FRONT_CENTER = &H4
    SPEAKER_LOW_FREQUENCY = &H8
    SPEAKER_BACK_LEFT = &H10
    SPEAKER_BACK_RIGHT = &H20
    SPEAKER_FRONT_LEFT_OF_CENTER = &H40
    SPEAKER_FRONT_RIGHT_OF_CENTER = &H80
    SPEAKER_BACK_CENTER = &H100
    SPEAKER_SIDE_LEFT = &H200
    SPEAKER_SIDE_RIGHT = &H400
    SPEAKER_TOP_CENTER = &H800
    SPEAKER_TOP_FRONT_LEFT = &H1000
    SPEAKER_TOP_FRONT_CENTER = &H2000
    SPEAKER_TOP_FRONT_RIGHT = &H4000
    SPEAKER_TOP_BACK_LEFT = &H8000&
    SPEAKER_TOP_BACK_CENTER = &H10000
    SPEAKER_TOP_BACK_RIGHT = &H20000
'  Bit mask locations reserved for future use
    SPEAKER_RESERVED = &H7FFC0000
'  Used to specify that any possible permutation of speaker configurations
    SPEAKER_ALL = &H80000000
End Enum

[PackingAlignment(1)]
Public Type WAVEFORMATEX
	/* [ TypeHint(WAV_FORMAT_IDS) ] */ wFormatTag As Integer '* format type */
	nChannels As Integer '* number of channels (i.e. mono, stereo...) */
	nSamplesPerSec As Long '* sample rate */
	nAvgBytesPerSec As Long '* for buffer estimation */
	nBlockAlign As Integer '* block size of data */
	wBitsPerSample As Integer '* Number of bits per sample of mono data */
	cbSize As Integer '* The count in bytes of the size of
	               'As extra information (after cbSize)
End Type
[PackingAlignment(1)]
Public Type WAVEFORMATEXTENSIBLE
	Format As WAVEFORMATEX
    wValidBitsPerSample As Integer
	dwChannelMask As SPEAKER_POSITIONS
	SubFormat As UUID
End Type

Public Enum ACM_MPEG_Layers
    ACM_MPEG_LAYER1 = (&H0001)
    ACM_MPEG_LAYER2 = (&H0002)
    ACM_MPEG_LAYER3 = (&H0004)
End Enum
Public Enum ACM_MPEG_HeadMode
    ACM_MPEG_STEREO = (&H0001)
    ACM_MPEG_JOINTSTEREO = (&H0002)
    ACM_MPEG_DUALCHANNEL = (&H0004)
    ACM_MPEG_SINGLECHANNEL = (&H0008)
End Enum
Public Enum ACM_MPEG_HeadFlags
    ACM_MPEG_PRIVATEBIT = (&H0001)
    ACM_MPEG_COPYRIGHT = (&H0002)
    ACM_MPEG_ORIGINALHOME = (&H0004)
    ACM_MPEG_PROTECTIONBIT = (&H0008)
    ACM_MPEG_ID_MPEG1 = (&H0010)
End Enum

[PackingAlignment(1)]
Public Type MPEG1WAVEFORMAT
    wfx As WAVEFORMATEX
    /* [TypeHint(ACM_MPEG_Layers)] */ fwHeadLayer As Integer
    dwHeadBitrate As Long
    /* [TypeHint(ACM_MPEG_HeadMode)] */ fwHeadMode As Integer
    fwHeadModeExt As Integer
    wHeadEmphasis As Integer
    /* [TypeHint(ACM_MPEG_HeadFlags)] */ fwHeadFlags As Integer
    dwPTSLow As Long
    dwPTSHigh As Long
End Type

Public Const MPEGLAYER3_WFX_EXTRA_BYTES = 12

[PackingAlignment(1)]
Public Type MPEGLAYER3WAVEFORMAT
    wfx As WAVEFORMATEX
    /* [TypeHint(MpegLayer3Ids)] */ wID As Integer
    fdwFlags As MpegLayer3Flags
    nBlockSize As Integer
    nFramesPerBlock As Integer
    nCodecDelay As Integer
End Type

Public Enum MpegLayer3Ids
    MPEGLAYER3_ID_UNKNOWN = 0
    MPEGLAYER3_ID_MPEG = 1
    MPEGLAYER3_ID_CONSTANTFRAMESIZE = 2
End Enum
Public Enum MpegLayer3Flags
    MPEGLAYER3_FLAG_PADDING_ISO = &H00000000
    MPEGLAYER3_FLAG_PADDING_ON = &H00000001
    MPEGLAYER3_FLAG_PADDING_OFF = &H00000002
End Enum

[PackingAlignment(1)]
Public Type HEAACWAVEINFO
    ' Defines core AAC properties. See description above. WAVEFORMATEX is of size 18 bytes.
    wfx As WAVEFORMATEX
    ' Defines the payload type
    ' 0-RAW.  The stream contains raw_data_block() elements only.
    ' 1-ADTS. The stream contains an adts_sequence(), as defined by MPEG-2.
    ' 2-ADIF. The stream contains an adif_sequence(), as defined by MPEG-2.
    ' 3-LOAS. The stream contains an MPEG-4 audio transport stream with a
    '         synchronization layer LOAS and a multiplex layer LATM.
    ' All other codes are reserved.
    wPayloadType As Integer
    ' This is the 8-bit field audioProfileLevelIndication available in the
    ' MPEG-4 object descriptor.  It is an indication (as defined in MPEG-4 audio)
    ' of the audio profile and level required to process the content associated
    ' with this stream. For example values 0x28-0x2B correspond to AAC Profile,
    ' values 0x2C-0x2F correspond to HE-AAC profile and 0x30-0x33 for HE-AAC v2 profile.
    ' If unknown, set to zero or 0xFE ("no audio profile specified").
    wAudioProfileLevelIndication As Integer
    ' Defines the data that follows this structure. Currently only one data type is supported:
    ' 0- AudioSpecificConfig() (as defined by MPEG-4 Audio, ISO/IEC 14496-3) will follow this structure.
    '    wfx.cbSize will indicate the total length including AudioSpecificConfig().
    '    Use HEAACWAVEFORMAT to gain easy access to the address of the first byte of
    '    AudioSpecificConfig() for parsing.
    '    Typical values for the size of AudioSpecificConfig (ASC) are:
    '    - 2 bytes for AAC or HE-AAC v1/v2 with implicit signaling of SBR,
    '    - 5 bytes for HE-AAC v1 with explicit signaling of SBR,
    '    - 7 bytes for HE-AAC v2 with explicit signaling of SBR and PS.
    '    The size may be longer than 7 bytes if the 4-bit channelConfiguration field in ASC is zero,
    '    which means program_config_element() is present in ASC.
    ' All other codes are reserved.
    wStructType As Integer
    ' Set these to zero
    wReserved1 As Integer
    dwReserved2 As Long
End Type

[PackingAlignment(1), Description("WARNING: Buffer substituted for variable C-style array.")]
Public Type HEAACWAVEFORMAT
    wfInfo As HEAACWAVEINFO ' This structure has a size of 30 bytes
    pbAudioSpecificConfig(0 To 4095) As Byte ' First byte of AudioSpecificConfig()
End Type

Public Const MM_MSFT_ACM_WMAUDIO  = 39
Public Const WMAUDIO_BITS_PER_SAMPLE  = 16  ' just an uncompressed size...
Public Const WMAUDIO_MAX_CHANNELS  = 2
'   Windows Media Audio V1 (a.k.a. "MSAudio")
'       for WAVE_FORMAT_MSAUDIO1        (0x0160)
Public Const MM_MSFT_ACM_MSAUDIO1  = 39

Public Type MSAUDIO1WAVEFORMAT
    wfx As WAVEFORMATEX
    wSamplesPerBlock As Integer ' only counting "new" samples "= half of what will be used due to overlapping
    wEncodeOptions As Integer
End Type

Public Const MSAUDIO1_BITS_PER_SAMPLE  = WMAUDIO_BITS_PER_SAMPLE
Public Const MSAUDIO1_MAX_CHANNELS  = WMAUDIO_MAX_CHANNELS
Public Const MSAUDIO1_WFX_EXTRA_BYTES  = 4 ' (LenB(Of MSAUDIO1WAVEFORMAT) - LenB(Of WAVEFORMATEX))

Public Const MM_MSFT_ACM_WMAUDIO2  = 101

[PackingAlignment(1)]
Public Type WMAUDIO2WAVEFORMAT
    wfx As WAVEFORMATEX
    dwSamplesPerBlock As Long ' only counting "new" samples "= half of what will be used due to overlapping
    wEncodeOptions As Integer
    dwSuperBlockAlign As Long ' the big size...  should be multiples of wfx.nBlockAlign.
End Type

Public Const WMAUDIO2_BITS_PER_SAMPLE  = WMAUDIO_BITS_PER_SAMPLE
Public Const WMAUDIO2_MAX_CHANNELS  = WMAUDIO_MAX_CHANNELS
Public Const WMAUDIO2_WFX_EXTRA_BYTES  = 10 '(sizeof(WMAUDIO2WAVEFORMAT) - sizeof(WAVEFORMATEX))

[PackingAlignment(1)]
Public Type WMAUDIO3WAVEFORMAT
    wfx As WAVEFORMATEX
    wValidBitsPerSample As Integer ' bits of precision 
    dwChannelMask As Long ' which channels are present in stream
    dwReserved1 As Long
    dwReserved2 As Long
    wEncodeOptions As Integer
    wReserved3 As Integer
End Type


Public Function KSDATAFORMAT_SUBTYPE_PCM() As UUID
'{00000001-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000001, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 KSDATAFORMAT_SUBTYPE_PCM = iid
End Function
Public Function KSDATAFORMAT_SUBTYPE_IEEE_FLOAT() As UUID
'{00000003-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000003, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 KSDATAFORMAT_SUBTYPE_IEEE_FLOAT = iid
End Function
Public Function KSDATAFORMAT_SUBTYPE_WAVEFORMATEX() As UUID
'{00000000-0000-0010-8000-00aa00389b71}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000000, CInt(&H0000), CInt(&H0010), &H80, &H00, &H00, &Haa, &H00, &H38, &H9b, &H71)
 KSDATAFORMAT_SUBTYPE_WAVEFORMATEX = iid
End Function

Public Enum AUDCLNT_BUFFERFLAGS
	AUDCLNT_BUFFERFLAGS_DATA_DISCONTINUITY = &H01
	AUDCLNT_BUFFERFLAGS_SILENT = &H02
	AUDCLNT_BUFFERFLAGS_TIMESTAMP_ERROR = &H04
End Enum

Public Enum AUDCLNT_STREAMOPTIONS
    AUDCLNT_STREAMOPTIONS_NONE = &H00
    AUDCLNT_STREAMOPTIONS_RAW = &H01
    AUDCLNT_STREAMOPTIONS_MATCH_FORMAT = &H02
    AUDCLNT_STREAMOPTIONS_AMBISONICS = &H04
    ' #if(NTDDI_VERSION > NTDDI_WIN11_ZN)
    AUDCLNT_STREAMOPTIONS_POST_VOLUME_LOOPBACK = &H08
    ' #endif
End Enum

Public Enum AudioSessionState
	AudioSessionStateInactive = 0
	AudioSessionStateActive = 1
	AudioSessionStateExpired = 2
End Enum

Public Enum AUDCLNT_SHAREMODE
	AUDCLNT_SHAREMODE_SHARED
	AUDCLNT_SHAREMODE_EXCLUSIVE
End Enum

Public Enum AUDIO_STREAM_CATEGORY
	AudioCategory_Other = 0
	AudioCategory_ForegroundOnlyMedia = 1
	AudioCategory_BackgroundCapableMedia = 2
	AudioCategory_Communications = 3
	AudioCategory_Alerts = 4
	AudioCategory_SoundEffects = 5
	AudioCategory_GameEffects = 6
	AudioCategory_GameMedia = 7
	AudioCategory_GameChat = 8
	AudioCategory_Speech = 9
	AudioCategory_Movie = 10
	AudioCategory_Media = 11
    AudioCategory_FarFieldSpeech = 12
    AudioCategory_UniformSpeech = 13
    AudioCategory_VoiceTyping = 14
End Enum

Public Type AudioClientProperties
	cbSize As Long
	bIsOffload As Long
	eCategory As AUDIO_STREAM_CATEGORY
	Options As AUDCLNT_STREAMOPTIONS
End Type

Public Type AudioClient3ActivationParams
	tracingContextId As UUID
End Type

Public Enum AudioSessionDisconnectReason
	DisconnectReasonDeviceRemoval
	DisconnectReasonServerShutdown
	DisconnectReasonFormatChanged
	DisconnectReasonSessionLogoff
	DisconnectReasonSessionDisconnected
	DisconnectReasonExclusiveModeOverride
End Enum

Public Enum EndpointConnectorType
	eHostProcessConnector
	eOffloadConnector
	eLoopbackConnector
	eKeywordDetectorConnector
	eConnectorCount
End Enum

Public Type AUDIO_ENDPOINT_SHARED_CREATE_PARAMS
	' The size of the structure.
	u32Size As Long
	' SessionId
	u32TSSessionId As Long
	' Target endpoint connector type
	targetEndpointConnectorType As EndpointConnectorType
	' The format of the endpoint.
	wfxDeviceFormat As WAVEFORMATEX
End Type

Public Enum AE_POSITION_FLAGS
	'  POSITION_INVALID means that the position is invalid
	'  and should not be used.
	POSITION_INVALID = 0
	'  Position is valid. However there has been
	'  a disruption such as a glitch or state transition.
	'  This position is not correlated with the previous one.
	POSITION_DISCONTINUOUS = 1
	'  Position is valid. The previous packet
	'  and this packet aligns perfectly on the timeline.
	POSITION_CONTINUOUS = 2
	'  The QPC value associated with this position is not accurate
	'  within 300 Microseconds.
	POSITION_QPC_ERROR = 4
End Enum

Public Type AE_CURRENT_POSITION
	' Device position in frames.
	u64DevicePosition As LongLong
	' Stream position in frames used for capture to determine starting point.
	u64StreamPosition As LongLong
	' Current amount of padding (in frames) between the current position and the stream fill point.
	u64PaddingFrames As LongLong
	' Translated QPC Timer value taken at the time the frame position was checked.
	hnsQPCPosition As LongLong
	' Calculated value of the data rate at the point when position was set.
	f32FramesPerSecond As Double
	' Indicates the validity of the position information.
	Flag As AE_POSITION_FLAGS
End Type

Public Enum APO_BUFFER_FLAGS
	BUFFER_INVALID = 0
	BUFFER_VALID = 1
	BUFFER_SILENT = 2
End Enum

Public Type APO_CONNECTION_PROPERTY
	pBuffer As LongPtr
	u32ValidFrameCount As Long
	u32BufferFlags As APO_BUFFER_FLAGS
	u32Signature As Long
End Type

Public Enum APO_REFERENCE_STREAM_PROPERTIES
    APO_REFERENCE_STREAM_PROPERTIES_NONE = &H00
    APO_REFERENCE_STREAM_PROPERTIES_POST_VOLUME_LOOPBACK = &H01
End Enum

Public Enum AUDIO_CURVE_TYPE
	AUDIO_CURVE_TYPE_NONE = 0
	AUDIO_CURVE_TYPE_WINDOWS_FADE = 1
End Enum

Public Enum DeviceShareMode
	Shared
    Exclusive
End Enum


Public Const sCLSID_MMDeviceEnumerator = "new: {BCDE0395-E52F-467C-8E3D-C4579291692E}"
Public Const sCLSID_DeviceTopology = "new: {1DF639D0-5EC1-47AA-9379-828DC1AA8C59}"
Public Const sCLSID_PolicyConfigClient = "new: {870af99c-171d-4f9e-af0d-e63df40c2bc9}"
Public Const sCLSID_CPolicyConfigVistaClient = "new: {294935CE-F637-4E7C-A41B-AB255460B862}" 'VISTA ONLY


Public Const AUDIOCLOCK_CHARACTERISTIC_FIXED_FREQ = &H1

Public Enum APO_ERR
	'  Error Codes for APO,
	'  The facility code for APOs is 0x87D.,
	' ,
	'  The object has already been initialized.,
	APOERR_ALREADY_INITIALIZED = (&H887D0001)
	'  Object/structure is not initialized.,
	APOERR_NOT_INITIALIZED = (&H887D0002)
	'  a pin supporting the format cannot be found.,
	APOERR_FORMAT_NOT_SUPPORTED = (&H887D0003)
	'  Invalid CLSID in an APO Initialization structure,
	APOERR_INVALID_APO_CLSID = (&H887D0004)
	'  Buffers overlap on an APO that does not accept in-place buffers.,
	APOERR_BUFFERS_OVERLAP = (&H887D0005)
	'  APO is already in an unlocked state,
	APOERR_ALREADY_UNLOCKED = (&H887D0006)
	'  number of input or output connections not valid on this APO,
	APOERR_NUM_CONNECTIONS_INVALID = (&H887D0007)
	'  Output maxFrameCount not large enough.,
	APOERR_INVALID_OUTPUT_MAXFRAMECOUNT = (&H887D0008)
	'  Invalid connection format for this operation,
	APOERR_INVALID_CONNECTION_FORMAT = (&H887D0009)
	'  APO is locked ready to process and can not be changed,
	APOERR_APO_LOCKED = (&H887D000A)
	'  Invalid coefficient count,
	APOERR_INVALID_COEFFCOUNT = (&H887D000B)
	'  Invalid coefficient,
	APOERR_INVALID_COEFFICIENT = (&H887D000C)
	'  an invalid curve parameter was specified,
	APOERR_INVALID_CURVE_PARAM = (&H887D000D)
	'  Invalid auxiliary input index,
	APOERR_INVALID_INPUTID = (&H887D000E)
End Enum


Public Enum AUDIO_DUCKING_OPTIONS
    AUDIO_DUCKING_OPTIONS_DEFAULT = 0
    AUDIO_DUCKING_OPTIONS_DO_NOT_DUCK_OTHER_STREAMS = 1
End Enum

Public Enum AUDIO_EFFECT_STATE
    AUDIO_EFFECT_STATE_OFF = 0
    AUDIO_EFFECT_STATE_ON = 1
End Enum

Public Type AUDIO_EFFECT
    id As UUID
    canSetState As BOOL
    State As AUDIO_EFFECT_STATE
End Type

Public Const VIRTUAL_AUDIO_DEVICE_PROCESS_LOOPBACK = "VAD\Process_Loopback"

Public Enum PROCESS_LOOPBACK_MODE
    PROCESS_LOOPBACK_MODE_INCLUDE_TARGET_PROCESS_TREE = 0
    PROCESS_LOOPBACK_MODE_EXCLUDE_TARGET_PROCESS_TREE = 1
End Enum

Public Type AUDIOCLIENT_PROCESS_LOOPBACK_PARAMS
    TargetProcessId As Long
    ProcessLoopbackMode As PROCESS_LOOPBACK_MODE
End Type

Public Enum AUDIOCLIENT_ACTIVATION_TYPE
    AUDIOCLIENT_ACTIVATION_TYPE_DEFAULT = 0
    AUDIOCLIENT_ACTIVATION_TYPE_PROCESS_LOOPBACK = 1
End Enum

Public Type AUDIOCLIENT_ACTIVATION_PARAMS
    ActivationType As AUDIOCLIENT_ACTIVATION_TYPE
    ProcessLoopbackParams As AUDIOCLIENT_PROCESS_LOOPBACK_PARAMS
End Type

Public Type APO_CONNECTION_PROPERTY_V2
    Property As APO_CONNECTION_PROPERTY
    u64QPCTime As LongLong
End Type

Public Type UNCOMPRESSEDAUDIOFORMAT
    guidFormatType As UUID
    dwSamplesPerFrame As Long
    dwBytesPerSampleContainer As Long
    dwValidBitsPerSample As Long
    fFramesPerSecond As Single
    dwChannelMask As Long
End Type

Public Enum AMT_EQ_FMT
    AUDIOMEDIATYPE_EQUAL_FORMAT_TYPES = 2
    AUDIOMEDIATYPE_EQUAL_FORMAT_DATA = 4
    AUDIOMEDIATYPE_EQUAL_FORMAT_USER_DATA = 8
End Enum

Public Enum APO_CONNECTION_BUFFER_TYPE
    APO_CONNECTION_BUFFER_TYPE_ALLOCATED = 0
    APO_CONNECTION_BUFFER_TYPE_EXTERNAL = 1
    APO_CONNECTION_BUFFER_TYPE_DEPENDANT = 2
End Enum

Public Type APO_CONNECTION_DESCRIPTOR
    type As APO_CONNECTION_BUFFER_TYPE
    pBuffer As LongPtr
    u32MaxFrameCount As Long
    pFormat As IAudioMediaType
    u32Signature As Long
End Type
            
Public Enum APO_FLAG
	'  No flags set
	APO_FLAG_NONE = &H00000000
	'  APO can perform in-place processing. This allows the processor to
	'  connect a common buffer on input and output.
	APO_FLAG_INPLACE = &H00000001
	'  Samples Per Frame of input and output connections must match.
	APO_FLAG_SAMPLESPERFRAME_MUST_MATCH = &H00000002
	'  Frames per second of input and output connections must match
	APO_FLAG_FRAMESPERSECOND_MUST_MATCH = &H00000004
	'  Bits per sample AND bytes per sample containter of input and output
	'  connections must match.
	APO_FLAG_BITSPERSAMPLE_MUST_MATCH = &H00000008
	'  APO is a mix APO. This flag should be set only for the mixer APO.
	APO_FLAG_MIXER = &H00000010
	'  standard flags for default APOs
	APO_FLAG_DEFAULT = (APO_FLAG_SAMPLESPERFRAME_MUST_MATCH Or APO_FLAG_FRAMESPERSECOND_MUST_MATCH Or APO_FLAG_BITSPERSAMPLE_MUST_MATCH)
End Enum


Public Type APO_REG_PROPERTIES
    clsid As UUID
    flags As APO_FLAG
    szFriendlyName(0 To 255) As Integer
    szCopyrightInfo(0 To 255) As Integer
    u32MajorVersion As Long
    u32MinorVersion As Long
    u32MinInputConnections As Long
    u32MaxInputConnections As Long
    u32MinOutputConnections As Long
    u32MaxOutputConnections As Long
    u32MaxInstances As Long
    u32NumAPOInterfaces As Long
    iidAPOInterfaceList(0 To 255) As UUID
End Type

Public Type APOInitBaseStruct
    cbSize As Long
    clsid As UUID
End Type

Public Enum AUDIO_FLOW_TYPE
    AUDIO_FLOW_PULL = 0
    AUDIO_FLOW_PUSH = 1
End Enum

Public Enum EAudioConstriction
    eAudioConstrictionOff = 0
    eAudioConstriction48_16 = 1
    eAudioConstriction44_16 = 2
    eAudioConstriction14_14 = 3
    eAudioConstrictionMute = 4
End Enum

Public Enum AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE
    AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_DEFAULT = 0
    AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_USER = 1
    AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_VOLATILE = 2
    AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_ENUM_COUNT = 3
End Enum



Public Type APOInitSystemEffects
    APOInit As APOInitBaseStruct
    pAPOEndpointProperties As IPropertyStore
    pAPOSystemEffectsProperties As IPropertyStore
    pReserved As LongPtr
    pDeviceCollection As IMMDeviceCollection
End Type

Public Type APOInitSystemEffects2
    APOInit As APOInitBaseStruct
    pAPOEndpointProperties As IPropertyStore
    pAPOSystemEffectsProperties As IPropertyStore
    pReserved As LongPtr
    pDeviceCollection As IMMDeviceCollection
    nSoftwareIoDeviceInCollection As Long
    nSoftwareIoConnectorIndex As Long
    AudioProcessingMode As UUID
    InitializeForDiscoveryOnly As BOOL
End Type

Public Type AudioFXExtensionParams
    AddPageParam As LongPtr
    pwstrEndpointID As LongPtr
    pFxProperties As IPropertyStore
End Type
   
Public Enum ENDPOINT_HARDWARE_SUPPORT
    ENDPOINT_HARDWARE_SUPPORT_VOLUME = &H00000001
    ENDPOINT_HARDWARE_SUPPORT_MUTE = &H00000002
    ENDPOINT_HARDWARE_SUPPORT_METER = &H00000004
End Enum

Public Delegate Sub AudioStateMonitorCallback (ByVal audioStateMonitor As IAudioStateMonitor, ByVal context As LongPtr)

Public Enum AudioStateMonitorSoundLevel
    ASMSL_Muted
    ASMSL_Low
    ASMSL_Full
End Enum

Public Declare PtrSafe Function CreateRenderAudioStateMonitor Lib "Windows.Media.MediaControl.dll" (audioStateMonitor As IAudioStateMonitor) As Long
Public Declare PtrSafe Function CreateRenderAudioStateMonitorForCategory Lib "Windows.Media.MediaControl.dll" (ByVal category As AUDIO_STREAM_CATEGORY, audioStateMonitor As IAudioStateMonitor) As Long
Public Declare PtrSafe Function CreateRenderAudioStateMonitorForCategoryAndDeviceRole Lib "Windows.Media.MediaControl.dll" (ByVal category As AUDIO_STREAM_CATEGORY, ByVal role As ERole, audioStateMonitor As IAudioStateMonitor) As Long
Public DeclareWide PtrSafe Function CreateRenderAudioStateMonitorForCategoryAndDeviceId Lib "Windows.Media.MediaControl.dll" (ByVal category As AUDIO_STREAM_CATEGORY, ByVal deviceId As String, audioStateMonitor As IAudioStateMonitor) As Long
Public DeclareWide PtrSafe Function CreateRenderAudioStateMonitorForCategoryAndDeviceId Lib "Windows.Media.MediaControl.dll" (ByVal category As AUDIO_STREAM_CATEGORY, ByVal deviceId As LongPtr, audioStateMonitor As IAudioStateMonitor) As Long

Public Declare PtrSafe Function CreateCaptureAudioStateMonitor Lib "Windows.Media.MediaControl.dll" (audioStateMonitor As IAudioStateMonitor) As Long
Public Declare PtrSafe Function CreateCaptureAudioStateMonitorForCategory Lib "Windows.Media.MediaControl.dll" (ByVal category As AUDIO_STREAM_CATEGORY, audioStateMonitor As IAudioStateMonitor) As Long
Public Declare PtrSafe Function CreateCaptureAudioStateMonitorForCategoryAndDeviceRole Lib "Windows.Media.MediaControl.dll" (ByVal category As AUDIO_STREAM_CATEGORY, ByVal role As ERole, audioStateMonitor As IAudioStateMonitor) As Long
Public DeclareWide PtrSafe Function CreateCaptureAudioStateMonitorForCategoryAndDeviceId Lib "Windows.Media.MediaControl.dll" (ByVal category As AUDIO_STREAM_CATEGORY, ByVal deviceId As String, audioStateMonitor As IAudioStateMonitor) As Long
Public DeclareWide PtrSafe Function CreateCaptureAudioStateMonitorForCategoryAndDeviceId Lib "Windows.Media.MediaControl.dll" (ByVal category As AUDIO_STREAM_CATEGORY, ByVal deviceId As LongPtr, audioStateMonitor As IAudioStateMonitor) As Long

Public Const SPATIAL_AUDIO_STANDARD_COMMANDS_START  = 200  ' 200 and above is reserved
Public Const SPATIAL_AUDIO_POSITION  = (SPATIAL_AUDIO_STANDARD_COMMANDS_START)
Public Const SPATIAL_AUDIO_POSITION_BYTE_COUNT  = (4 * 3)  ' 3 (XYZ) 32-Bit Floats
#End Region

#Region "mCoreAudio-Defs"

' //,
' // Signatures for data structures.,
' //,

Public Const APO_CONNECTION_DESCRIPTOR_SIGNATURE = &H41434453
Public Const APO_CONNECTION_PROPERTY_SIGNATURE = &H41435053
Public Const APO_CONNECTION_PROPERTY_V2_SIGNATURE = &H41435032

' Min and max framerates for the engine,
Public Const AUDIO_MIN_FRAMERATE As Single = 10.0     '// Minimum frame rate for APOs,
Public Const AUDIO_MAX_FRAMERATE As Single = 384000.0 '// Maximum frame rate for APOs,

' Min and max # of channels (samples per frame) for the APOs,
Public Const AUDIO_MIN_CHANNELS                    = 1    '// Current minimum number of channels for APOs,
Public Const AUDIO_MAX_CHANNELS                    = 4096 '// Current maximum number of channels for APOs,

Public Enum AudioEndpointFmtCtlFlags
    ENDPOINT_FORMAT_RESET_MIX_ONLY = 1
End Enum

Public Function DEVINTERFACE_AUDIO_RENDER() As UUID
'{E6327CAD-DCEC-4949-AE8A-991E976A79D2}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE6327CAD, CInt(&HDCEC), CInt(&H4949), &HAE, &H8A, &H99, &H1E, &H97, &H6A, &H79, &HD2)
 DEVINTERFACE_AUDIO_RENDER = iid
End Function
Public Function DEVINTERFACE_AUDIO_CAPTURE() As UUID
'{2EEF81BE-33FA-4800-9670-1CD474972C3F}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2EEF81BE, CInt(&H33FA), CInt(&H4800), &H96, &H70, &H1C, &HD4, &H74, &H97, &H2C, &H3F)
 DEVINTERFACE_AUDIO_CAPTURE = iid
End Function
Public Function DEVINTERFACE_MIDI_OUTPUT() As UUID
'{6DC23320-AB33-4CE4-80D4-BBB3EBBF2814}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6DC23320, CInt(&HAB33), CInt(&H4CE4), &H80, &HD4, &HBB, &HB3, &HEB, &HBF, &H28, &H14)
 DEVINTERFACE_MIDI_OUTPUT = iid
End Function
Public Function DEVINTERFACE_MIDI_INPUT() As UUID
'{504BE32C-CCF6-4D2C-B73F-6F8B3747E22B}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H504BE32C, CInt(&HCCF6), CInt(&H4D2C), &HB7, &H3F, &H6F, &H8B, &H37, &H47, &HE2, &H2B)
 DEVINTERFACE_MIDI_INPUT = iid
End Function
Public Function EVENTCONTEXT_VOLUMESLIDER() As UUID
'{E2C2E9DE-09B1-4B04-84E5-07931225EE04}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE2C2E9DE, CInt(&H9B1), CInt(&H4B04), &H84, &HE5, &H7, &H93, &H12, &H25, &HEE, &H4)
 EVENTCONTEXT_VOLUMESLIDER = iid
End Function

Public Function IID_IMMNotificationClient() As UUID
'{7991EEC9-7E89-4D85-8390-6C703CEC60C0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7991EEC9, CInt(&H7E89), CInt(&H4D85), &H83, &H90, &H6C, &H70, &H3C, &HEC, &H60, &HC0)
IID_IMMNotificationClient = iid
End Function
Public Function IID_IMMDevice() As UUID
'{D666063F-1587-4E43-81F1-B948E807363F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD666063F, CInt(&H1587), CInt(&H4E43), &H81, &HF1, &HB9, &H48, &HE8, &H7, &H36, &H3F)
IID_IMMDevice = iid
End Function
Public Function IID_IMMDeviceCollection() As UUID
'{0BD7A1BE-7A1A-44DB-8397-CC5392387B5E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBD7A1BE, CInt(&H7A1A), CInt(&H44DB), &H83, &H97, &HCC, &H53, &H92, &H38, &H7B, &H5E)
IID_IMMDeviceCollection = iid
End Function
Public Function IID_IMMEndpoint() As UUID
'{1BE09788-6894-4089-8586-9A2A6C265AC5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1BE09788, CInt(&H6894), CInt(&H4089), &H85, &H86, &H9A, &H2A, &H6C, &H26, &H5A, &HC5)
IID_IMMEndpoint = iid
End Function
Public Function IID_IMMDeviceEnumerator() As UUID
'{A95664D2-9614-4F35-A746-DE8DB63617E6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA95664D2, CInt(&H9614), CInt(&H4F35), &HA7, &H46, &HDE, &H8D, &HB6, &H36, &H17, &HE6)
IID_IMMDeviceEnumerator = iid
End Function
Public Function IID_IMMDeviceActivator() As UUID
'{3B0D0EA4-D0A9-4B0E-935B-09516746FAC0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3B0D0EA4, CInt(&HD0A9), CInt(&H4B0E), &H93, &H5B, &H9, &H51, &H67, &H46, &HFA, &HC0)
IID_IMMDeviceActivator = iid
End Function
Public Function IID_IActivateAudioInterfaceCompletionHandler() As UUID
'{41D949AB-9862-444A-80F6-C261334DA5EB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H41D949AB, CInt(&H9862), CInt(&H444A), &H80, &HF6, &HC2, &H61, &H33, &H4D, &HA5, &HEB)
IID_IActivateAudioInterfaceCompletionHandler = iid
End Function
Public Function IID_IActivateAudioInterfaceAsyncOperation() As UUID
'{72A22D78-CDE4-431D-B8CC-843A71199B6D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H72A22D78, CInt(&HCDE4), CInt(&H431D), &HB8, &HCC, &H84, &H3A, &H71, &H19, &H9B, &H6D)
IID_IActivateAudioInterfaceAsyncOperation = iid
End Function
Public Function IID_IAudioEndpointVolumeCallback() As UUID
'{657804FA-D6AD-4496-8A60-352752AF4F89}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H657804FA, CInt(&HD6AD), CInt(&H4496), &H8A, &H60, &H35, &H27, &H52, &HAF, &H4F, &H89)
IID_IAudioEndpointVolumeCallback = iid
End Function
Public Function IID_IAudioEndpointVolume() As UUID
'{5CDF2C82-841E-4546-9722-0CF74078229A}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5CDF2C82, CInt(&H841E), CInt(&H4546), &H97, &H22, &HC, &HF7, &H40, &H78, &H22, &H9A)
IID_IAudioEndpointVolume = iid
End Function
Public Function IID_IAudioEndpointVolumeEx() As UUID
'{66E11784-F695-4F28-A505-A7080081A78F}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H66E11784, CInt(&HF695), CInt(&H4F28), &HA5, &H5, &HA7, &H8, &H0, &H81, &HA7, &H8F)
 IID_IAudioEndpointVolumeEx = iid
End Function
Public Function IID_IAudioMeterInformation() As UUID
'{C02216F6-8C67-4B5B-9D00-D008E73E0064}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC02216F6, CInt(&H8C67), CInt(&H4B5B), &H9D, &H0, &HD0, &H8, &HE7, &H3E, &H0, &H64)
IID_IAudioMeterInformation = iid
End Function
Public Function IID_IAudioEndpointFormatControl() As UUID
'{784CFD40-9F89-456E-A1A6-873B006A664E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H784CFD40, CInt(&H9F89), CInt(&H456E), &HA1, &HA6, &H87, &H3B, &H0, &H6A, &H66, &H4E)
IID_IAudioEndpointFormatControl = iid
End Function
Public Function IID_IKsControl() As UUID
'{28F54685-06FD-11D2-B27A-00A0C9223196}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H28F54685, CInt(&H6FD), CInt(&H11D2), &HB2, &H7A, &H0, &HA0, &HC9, &H22, &H31, &H96)
IID_IKsControl = iid
End Function
Public Function IID_IAudioVolumeLevel() As UUID
'{7FB7B48F-531D-44A2-BCB3-5AD5A134B3DC}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7FB7B48F, CInt(&H531D), CInt(&H44A2), &HBC, &HB3, &H5A, &HD5, &HA1, &H34, &HB3, &HDC)
IID_IAudioVolumeLevel = iid
End Function
Public Function IID_IAudioChannelConfig() As UUID
'{BB11C46F-EC28-493C-B88A-5DB88062CE98}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBB11C46F, CInt(&HEC28), CInt(&H493C), &HB8, &H8A, &H5D, &HB8, &H80, &H62, &HCE, &H98)
IID_IAudioChannelConfig = iid
End Function
Public Function IID_IAudioLoudness() As UUID
'{7D8B1437-DD53-4350-9C1B-1EE2890BD938}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7D8B1437, CInt(&HDD53), CInt(&H4350), &H9C, &H1B, &H1E, &HE2, &H89, &HB, &HD9, &H38)
IID_IAudioLoudness = iid
End Function
Public Function IID_IAudioInputSelector() As UUID
'{4F03DC02-5E6E-4653-8F72-A030C123D598}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4F03DC02, CInt(&H5E6E), CInt(&H4653), &H8F, &H72, &HA0, &H30, &HC1, &H23, &HD5, &H98)
IID_IAudioInputSelector = iid
End Function
Public Function IID_IAudioOutputSelector() As UUID
'{BB515F69-94A7-429e-8B9C-271B3F11A3AB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBB515F69, CInt(&H94A7), CInt(&H429E), &H8B, &H9C, &H27, &H1B, &H3F, &H11, &HA3, &HAB)
IID_IAudioOutputSelector = iid
End Function
Public Function IID_IAudioMute() As UUID
'{DF45AEEA-B74A-4B6B-AFAD-2366B6AA012E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDF45AEEA, CInt(&HB74A), CInt(&H4B6B), &HAF, &HAD, &H23, &H66, &HB6, &HAA, &H1, &H2E)
IID_IAudioMute = iid
End Function
Public Function IID_IPerChannelDbLevel() As UUID
'{C2F8E001-F205-4BC9-99BC-C13B1E048CCB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC2F8E001, CInt(&HF205), CInt(&H4BC9), &H99, &HBC, &HC1, &H3B, &H1E, &H4, &H8C, &HCB)
IID_IPerChannelDbLevel = iid
End Function
Public Function IID_IAudioBass() As UUID
'{A2B1A1D9-4DB3-425D-A2B2-BD335CB3E2E5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA2B1A1D9, CInt(&H4DB3), CInt(&H425D), &HA2, &HB2, &HBD, &H33, &H5C, &HB3, &HE2, &HE5)
IID_IAudioBass = iid
End Function
Public Function IID_IAudioMidrange() As UUID
'{5E54B6D7-B44B-40D9-9A9E-E691D9CE6EDF}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5E54B6D7, CInt(&HB44B), CInt(&H40D9), &H9A, &H9E, &HE6, &H91, &HD9, &HCE, &H6E, &HDF)
IID_IAudioMidrange = iid
End Function
Public Function IID_IAudioTreble() As UUID
'{0A717812-694E-4907-B74B-BAFA5CFDCA7B}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA717812, CInt(&H694E), CInt(&H4907), &HB7, &H4B, &HBA, &HFA, &H5C, &HFD, &HCA, &H7B)
IID_IAudioTreble = iid
End Function
Public Function IID_IAudioAutoGainControl() As UUID
'{85401FD4-6DE4-4b9d-9869-2D6753A82F3C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H85401FD4, CInt(&H6DE4), CInt(&H4B9D), &H98, &H69, &H2D, &H67, &H53, &HA8, &H2F, &H3C)
IID_IAudioAutoGainControl = iid
End Function
Public Function IID_IAudioPeakMeter() As UUID
'{DD79923C-0599-45e0-B8B6-C8DF7DB6E796}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDD79923C, CInt(&H599), CInt(&H45E0), &HB8, &HB6, &HC8, &HDF, &H7D, &HB6, &HE7, &H96)
IID_IAudioPeakMeter = iid
End Function
Public Function IID_IDeviceSpecificProperty() As UUID
'{3B22BCBF-2586-4af0-8583-205D391B807C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3B22BCBF, CInt(&H2586), CInt(&H4AF0), &H85, &H83, &H20, &H5D, &H39, &H1B, &H80, &H7C)
IID_IDeviceSpecificProperty = iid
End Function
Public Function IID_IKsFormatSupport() As UUID
'{3CB4A69D-BB6F-4D2B-95B7-452D2C155DB5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3CB4A69D, CInt(&HBB6F), CInt(&H4D2B), &H95, &HB7, &H45, &H2D, &H2C, &H15, &H5D, &HB5)
IID_IKsFormatSupport = iid
End Function
Public Function IID_IKsJackDescription() As UUID
'{4509F757-2D46-4637-8E62-CE7DB944F57B}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4509F757, CInt(&H2D46), CInt(&H4637), &H8E, &H62, &HCE, &H7D, &HB9, &H44, &HF5, &H7B)
IID_IKsJackDescription = iid
End Function
Public Function IID_IKsJackDescription2() As UUID
'{478F3A9B-E0C9-4827-9228-6F5505FFE76A}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H478F3A9B, CInt(&HE0C9), CInt(&H4827), &H92, &H28, &H6F, &H55, &H5, &HFF, &HE7, &H6A)
IID_IKsJackDescription2 = iid
End Function
Public Function IID_IKsJackSinkInformation() As UUID
'{D9BD72ED-290F-4581-9FF3-61027A8FE532}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD9BD72ED, CInt(&H290F), CInt(&H4581), &H9F, &HF3, &H61, &H2, &H7A, &H8F, &HE5, &H32)
IID_IKsJackSinkInformation = iid
End Function
Public Function IID_IKsJackContainerId() As UUID
'{C99AF463-D629-4EC4-8C00-E54D68154248}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC99AF463, CInt(&HD629), CInt(&H4EC4), &H8C, &H0, &HE5, &H4D, &H68, &H15, &H42, &H48)
IID_IKsJackContainerId = iid
End Function
Public Function IID_IPartsList() As UUID
'{6DAA848C-5EB0-45CC-AEA5-998A2CDA1FFB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6DAA848C, CInt(&H5EB0), CInt(&H45CC), &HAE, &HA5, &H99, &H8A, &H2C, &HDA, &H1F, &HFB)
IID_IPartsList = iid
End Function
Public Function IID_IPart() As UUID
'{AE2DE0E4-5BCA-4F2D-AA46-5D13F8FDB3A9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HAE2DE0E4, CInt(&H5BCA), CInt(&H4F2D), &HAA, &H46, &H5D, &H13, &HF8, &HFD, &HB3, &HA9)
IID_IPart = iid
End Function
Public Function IID_IConnector() As UUID
'{9c2c4058-23f5-41de-877a-df3af236a09e}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9C2C4058, CInt(&H23F5), CInt(&H41DE), &H87, &H7A, &HDF, &H3A, &HF2, &H36, &HA0, &H9E)
IID_IConnector = iid
End Function
Public Function IID_ISubunit() As UUID
'{82149A85-DBA6-4487-86BB-EA8F7FEFCC71}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H82149A85, CInt(&HDBA6), CInt(&H4487), &H86, &HBB, &HEA, &H8F, &H7F, &HEF, &HCC, &H71)
IID_ISubunit = iid
End Function
Public Function IID_IControlInterface() As UUID
'{45d37c3f-5140-444a-ae24-400789f3cbf3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H45D37C3F, CInt(&H5140), CInt(&H444A), &HAE, &H24, &H40, &H7, &H89, &HF3, &HCB, &HF3)
IID_IControlInterface = iid
End Function
Public Function IID_IControlChangeNotify() As UUID
'{A09513ED-C709-4d21-BD7B-5F34C47F3947}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA09513ED, CInt(&HC709), CInt(&H4D21), &HBD, &H7B, &H5F, &H34, &HC4, &H7F, &H39, &H47)
IID_IControlChangeNotify = iid
End Function
Public Function IID_IDeviceTopology() As UUID
'{2A07407E-6497-4A18-9787-32F79BD0D98F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2A07407E, CInt(&H6497), CInt(&H4A18), &H97, &H87, &H32, &HF7, &H9B, &HD0, &HD9, &H8F)
IID_IDeviceTopology = iid
End Function
Public Function IID_IAudioClient() As UUID
'{1CB9AD4C-DBFA-4c32-B178-C2F568A703B2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1CB9AD4C, CInt(&HDBFA), CInt(&H4C32), &HB1, &H78, &HC2, &HF5, &H68, &HA7, &H3, &HB2)
IID_IAudioClient = iid
End Function
Public Function IID_IAudioClient2() As UUID
'{726778CD-F60A-4eda-82DE-E47610CD78AA}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H726778CD, CInt(&HF60A), CInt(&H4EDA), &H82, &HDE, &HE4, &H76, &H10, &HCD, &H78, &HAA)
IID_IAudioClient2 = iid
End Function
Public Function IID_IAudioClient3() As UUID
'{7ED4EE07-8E67-4CD4-8C1A-2B7A5987AD42}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7ED4EE07, CInt(&H8E67), CInt(&H4CD4), &H8C, &H1A, &H2B, &H7A, &H59, &H87, &HAD, &H42)
IID_IAudioClient3 = iid
End Function
Public Function IID_IAudioRenderClient() As UUID
'{F294ACFC-3146-4483-A7BF-ADDCA7C260E2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF294ACFC, CInt(&H3146), CInt(&H4483), &HA7, &HBF, &HAD, &HDC, &HA7, &HC2, &H60, &HE2)
IID_IAudioRenderClient = iid
End Function
Public Function IID_IAudioCaptureClient() As UUID
'{C8ADBD64-E71E-48a0-A4DE-185C395CD317}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC8ADBD64, CInt(&HE71E), CInt(&H48A0), &HA4, &HDE, &H18, &H5C, &H39, &H5C, &HD3, &H17)
IID_IAudioCaptureClient = iid
End Function
Public Function IID_IAudioClock() As UUID
'{CD63314F-3FBA-4a1b-812C-EF96358728E7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HCD63314F, CInt(&H3FBA), CInt(&H4A1B), &H81, &H2C, &HEF, &H96, &H35, &H87, &H28, &HE7)
IID_IAudioClock = iid
End Function
Public Function IID_IAudioClock2() As UUID
'{6f49ff73-6727-49ac-a008-d98cf5e70048}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6F49FF73, CInt(&H6727), CInt(&H49AC), &HA0, &H8, &HD9, &H8C, &HF5, &HE7, &H0, &H48)
IID_IAudioClock2 = iid
End Function
Public Function IID_IAudioClockAdjustment() As UUID
'{f6e4c0a0-46d9-4fb8-be21-57a3ef2b626c}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF6E4C0A0, CInt(&H46D9), CInt(&H4FB8), &HBE, &H21, &H57, &HA3, &HEF, &H2B, &H62, &H6C)
IID_IAudioClockAdjustment = iid
End Function
Public Function IID_ISimpleAudioVolume() As UUID
'{87CE5498-68D6-44E5-9215-6DA47EF883D8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H87CE5498, CInt(&H68D6), CInt(&H44E5), &H92, &H15, &H6D, &HA4, &H7E, &HF8, &H83, &HD8)
IID_ISimpleAudioVolume = iid
End Function
Public Function IID_IAudioStreamVolume() As UUID
'{93014887-242D-4068-8A15-CF5E93B90FE3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H93014887, CInt(&H242D), CInt(&H4068), &H8A, &H15, &HCF, &H5E, &H93, &HB9, &HF, &HE3)
IID_IAudioStreamVolume = iid
End Function
Public Function IID_IChannelAudioVolume() As UUID
'{1C158861-B533-4B30-B1CF-E853E51C59B8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1C158861, CInt(&HB533), CInt(&H4B30), &HB1, &HCF, &HE8, &H53, &HE5, &H1C, &H59, &HB8)
IID_IChannelAudioVolume = iid
End Function
Public Function IID_IAudioSessionEvents() As UUID
'{24918ACC-64B3-37C1-8CA9-74A66E9957A8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H24918ACC, CInt(&H64B3), CInt(&H37C1), &H8C, &HA9, &H74, &HA6, &H6E, &H99, &H57, &HA8)
IID_IAudioSessionEvents = iid
End Function
Public Function IID_IAudioSessionControl() As UUID
'{F4B1A599-7266-4319-A8CA-E70ACB11E8CD}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF4B1A599, CInt(&H7266), CInt(&H4319), &HA8, &HCA, &HE7, &HA, &HCB, &H11, &HE8, &HCD)
IID_IAudioSessionControl = iid
End Function
Public Function IID_IAudioSessionControl2() As UUID
'{bfb7ff88-7239-4fc9-8fa2-07c950be9c6d}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBFB7FF88, CInt(&H7239), CInt(&H4FC9), &H8F, &HA2, &H7, &HC9, &H50, &HBE, &H9C, &H6D)
IID_IAudioSessionControl2 = iid
End Function
Public Function IID_IAudioSessionManager() As UUID
'{BFA971F1-4D5E-40BB-935E-967039BFBEE4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBFA971F1, CInt(&H4D5E), CInt(&H40BB), &H93, &H5E, &H96, &H70, &H39, &HBF, &HBE, &HE4)
IID_IAudioSessionManager = iid
End Function
Public Function IID_IAudioVolumeDuckNotification() As UUID
'{C3B284D4-6D39-4359-B3CF-B56DDB3BB39C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC3B284D4, CInt(&H6D39), CInt(&H4359), &HB3, &HCF, &HB5, &H6D, &HDB, &H3B, &HB3, &H9C)
IID_IAudioVolumeDuckNotification = iid
End Function
Public Function IID_IAudioSessionNotification() As UUID
'{641DD20B-4D41-49CC-ABA3-174B9477BB08}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H641DD20B, CInt(&H4D41), CInt(&H49CC), &HAB, &HA3, &H17, &H4B, &H94, &H77, &HBB, &H8)
IID_IAudioSessionNotification = iid
End Function
Public Function IID_IAudioSessionEnumerator() As UUID
'{E2F5BB11-0570-40CA-ACDD-3AA01277DEE8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE2F5BB11, CInt(&H570), CInt(&H40CA), &HAC, &HDD, &H3A, &HA0, &H12, &H77, &HDE, &HE8)
IID_IAudioSessionEnumerator = iid
End Function
Public Function IID_IAudioSessionManager2() As UUID
'{77AA99A0-1BD6-484F-8BC7-2C654C9A9B6F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H77AA99A0, CInt(&H1BD6), CInt(&H484F), &H8B, &HC7, &H2C, &H65, &H4C, &H9A, &H9B, &H6F)
IID_IAudioSessionManager2 = iid
End Function
Public Function IID_IAudioLfxControl() As UUID
'{076A6922-D802-4F83-BAF6-409D9CA11BFE}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H76A6922, CInt(&HD802), CInt(&H4F83), &HBA, &HF6, &H40, &H9D, &H9C, &HA1, &H1B, &HFE)
IID_IAudioLfxControl = iid
End Function
Public Function IID_IAudioEndpointLastBufferControl() As UUID
'{F8520DD3-8F9D-4437-9861-62F584C33DD6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF8520DD3, CInt(&H8F9D), CInt(&H4437), &H98, &H61, &H62, &HF5, &H84, &HC3, &H3D, &HD6)
IID_IAudioEndpointLastBufferControl = iid
End Function
Public Function IID_IAudioSystemEffects() As UUID
'{5FA00F27-ADD6-499a-8A9D-6B98521FA75B}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5FA00F27, CInt(&HADD6), CInt(&H499A), &H8A, &H9D, &H6B, &H98, &H52, &H1F, &HA7, &H5B)
IID_IAudioSystemEffects = iid
End Function
Public Function IID_IAudioSystemEffects2() As UUID
'{BAFE99D2-7436-44CE-9E0E-4D89AFBFFF56}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBAFE99D2, CInt(&H7436), CInt(&H44CE), &H9E, &HE, &H4D, &H89, &HAF, &HBF, &HFF, &H56)
IID_IAudioSystemEffects2 = iid
End Function
Public Function IID_IAudioEndpointOffloadStreamVolume() As UUID
'{64F1DD49-71CA-4281-8672-3A9EDDD1D0B6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H64F1DD49, CInt(&H71CA), CInt(&H4281), &H86, &H72, &H3A, &H9E, &HDD, &HD1, &HD0, &HB6)
IID_IAudioEndpointOffloadStreamVolume = iid
End Function
Public Function IID_IAudioEndpointOffloadStreamMute() As UUID
'{DFE21355-5EC2-40E0-8D6B-710AC3C00249}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDFE21355, CInt(&H5EC2), CInt(&H40E0), &H8D, &H6B, &H71, &HA, &HC3, &HC0, &H2, &H49)
IID_IAudioEndpointOffloadStreamMute = iid
End Function
Public Function IID_IAudioEndpointOffloadStreamMeter() As UUID
'{E1546DCE-9DD1-418B-9AB2-348CED161C86}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE1546DCE, CInt(&H9DD1), CInt(&H418B), &H9A, &HB2, &H34, &H8C, &HED, &H16, &H1C, &H86)
IID_IAudioEndpointOffloadStreamMeter = iid
End Function
Public Function IID_IHardwareAudioEngineBase() As UUID
'{EDDCE3E4-F3C1-453a-B461-223563CBD886}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEDDCE3E4, CInt(&HF3C1), CInt(&H453A), &HB4, &H61, &H22, &H35, &H63, &HCB, &HD8, &H86)
IID_IHardwareAudioEngineBase = iid
End Function
Public Function IID_ISpatialAudioMetadataWriter() As UUID
'{1B17CA01-2955-444D-A430-537DC589A844}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1B17CA01, CInt(&H2955), CInt(&H444D), &HA4, &H30, &H53, &H7D, &HC5, &H89, &HA8, &H44)
IID_ISpatialAudioMetadataWriter = iid
End Function
Public Function IID_ISpatialAudioMetadataReader() As UUID
'{B78E86A2-31D9-4C32-94D2-7DF40FC7EBEC}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB78E86A2, CInt(&H31D9), CInt(&H4C32), &H94, &HD2, &H7D, &HF4, &H0F, &HC7, &HEB, &HEC)
IID_ISpatialAudioMetadataReader = iid
End Function
Public Function IID_ISpatialAudioMetadataCopier() As UUID
'{D224B233-E251-4FD0-9CA2-D5ECF9A68404}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD224B233, CInt(&HE251), CInt(&H4FD0), &H9C, &HA2, &HD5, &HEC, &HF9, &HA6, &H84, &H04)
IID_ISpatialAudioMetadataCopier = iid
End Function
Public Function IID_ISpatialAudioMetadataItemsBuffer() As UUID
'{42640A16-E1BD-42D9-9FF6-031AB71A2DBA}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H42640A16, CInt(&HE1BD), CInt(&H42D9), &H9F, &HF6, &H03, &H1A, &HB7, &H1A, &H2D, &HBA)
IID_ISpatialAudioMetadataItemsBuffer = iid
End Function
Public Function IID_ISpatialAudioMetadataClient() As UUID
'{777D4A3B-F6FF-4A26-85DC-68D7CDEDA1D4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H777D4A3B, CInt(&HF6FF), CInt(&H4A26), &H85, &HDC, &H68, &HD7, &HCD, &HED, &HA1, &HD4)
IID_ISpatialAudioMetadataClient = iid
End Function
Public Function IID_ISpatialAudioObjectForMetadataCommands() As UUID
'{0DF2C94B-F5F9-472D-AF6B-C46E0AC9CD05}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H0DF2C94B, CInt(&HF5F9), CInt(&H472D), &HAF, &H6B, &HC4, &H6E, &H0A, &HC9, &HCD, &H05)
IID_ISpatialAudioObjectForMetadataCommands = iid
End Function
Public Function IID_ISpatialAudioObjectForMetadataItems() As UUID
'{DDEA49FF-3BC0-4377-8AAD-9FBCFD808566}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDDEA49FF, CInt(&H3BC0), CInt(&H4377), &H8A, &HAD, &H9F, &HBC, &HFD, &H80, &H85, &H66)
IID_ISpatialAudioObjectForMetadataItems = iid
End Function
Public Function IID_ISpatialAudioObjectRenderStreamForMetadata() As UUID
'{BBC9C907-48D5-4A2E-A0C7-F7F0D67C1FB1}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBBC9C907, CInt(&H48D5), CInt(&H4A2E), &HA0, &HC7, &HF7, &HF0, &HD6, &H7C, &H1F, &HB1)
IID_ISpatialAudioObjectRenderStreamForMetadata = iid
End Function
Public Function IID_IAudioFormatEnumerator() As UUID
'{DCDAA858-895A-4A22-A5EB-67BDA506096D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDCDAA858, CInt(&H895A), CInt(&H4A22), &HA5, &HEB, &H67, &HBD, &HA5, &H06, &H09, &H6D)
IID_IAudioFormatEnumerator = iid
End Function
Public Function IID_ISpatialAudioObjectBase() As UUID
'{CCE0B8F2-8D4D-4EFB-A8CF-3D6ECF1C30E0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HCCE0B8F2, CInt(&H8D4D), CInt(&H4EFB), &HA8, &HCF, &H3D, &H6E, &HCF, &H1C, &H30, &HE0)
IID_ISpatialAudioObjectBase = iid
End Function
Public Function IID_ISpatialAudioObject() As UUID
'{DDE28967-521B-46E5-8F00-BD6F2BC8AB1D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDDE28967, CInt(&H521B), CInt(&H46E5), &H8F, &H00, &HBD, &H6F, &H2B, &HC8, &HAB, &H1D)
IID_ISpatialAudioObject = iid
End Function
Public Function IID_ISpatialAudioObjectRenderStream() As UUID
'{BAB5F473-B423-477B-85F5-B5A332A04153}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBAB5F473, CInt(&HB423), CInt(&H477B), &H85, &HF5, &HB5, &HA3, &H32, &HA0, &H41, &H53)
IID_ISpatialAudioObjectRenderStream = iid
End Function
Public Function IID_ISpatialAudioObjectRenderStreamNotify() As UUID
'{DDDF83E6-68D7-4C70-883F-A1836AFB4A50}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDDDF83E6, CInt(&H68D7), CInt(&H4C70), &H88, &H3F, &HA1, &H83, &H6A, &HFB, &H4A, &H50)
IID_ISpatialAudioObjectRenderStreamNotify = iid
End Function
Public Function IID_ISpatialAudioClient() As UUID
'{BBF8E066-AAAA-49BE-9A4D-FD2A858EA27F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBBF8E066, CInt(&HAAAA), CInt(&H49BE), &H9A, &H4D, &HFD, &H2A, &H85, &H8E, &HA2, &H7F)
IID_ISpatialAudioClient = iid
End Function
Public Function IID_ISpatialAudioClient2() As UUID
'{caabe452-a66a-4bee-a93e-e320463f6a53}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hcaabe452, CInt(&Ha66a), CInt(&H4bee), &Ha9, &H3e, &He3, &H20, &H46, &H3f, &H6a, &H53)
IID_ISpatialAudioClient2 = iid
End Function
Public Function IID_ISpatialAudioObjectForHrtf() As UUID
'{D7436ADE-1978-4E14-ABA0-555BD8EB83B4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD7436ADE, CInt(&H1978), CInt(&H4E14), &HAB, &HA0, &H55, &H5B, &HD8, &HEB, &H83, &HB4)
IID_ISpatialAudioObjectForHrtf = iid
End Function
Public Function IID_ISpatialAudioObjectRenderStreamForHrtf() As UUID
'{E08DEEF9-5363-406E-9FDC-080EE247BBE0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE08DEEF9, CInt(&H5363), CInt(&H406E), &H9F, &HDC, &H08, &H0E, &HE2, &H47, &HBB, &HE0)
IID_ISpatialAudioObjectRenderStreamForHrtf = iid
End Function
Public Function IID_ISpatialAudioMetadataItems() As UUID
'{BCD7C78F-3098-4F22-B547-A2F25A381269}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBCD7C78F, CInt(&H3098), CInt(&H4F22), &HB5, &H47, &HA2, &HF2, &H5A, &H38, &H12, &H69)
IID_ISpatialAudioMetadataItems = iid
End Function
Public Function IID_IAcousticEchoCancellationControl() As UUID
'{f4ae25b5-aaa3-437d-b6b3-dbbe2d0e9549}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hf4ae25b5, CInt(&Haaa3), CInt(&H437d), &Hb6, &Hb3, &Hdb, &Hbe, &H2d, &H0e, &H95, &H49)
IID_IAcousticEchoCancellationControl = iid
End Function
Public Function IID_IAudioClientDuckingControl() As UUID
'{C789D381-A28C-4168-B28F-D3A837924DC3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC789D381, CInt(&HA28C), CInt(&H4168), &HB2, &H8F, &HD3, &HA8, &H37, &H92, &H4D, &HC3)
IID_IAudioClientDuckingControl = iid
End Function
Public Function IID_IAudioViewManagerService() As UUID
'{A7A7EF10-1F49-45E0-AD35-612057CC8F74}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA7A7EF10, CInt(&H1F49), CInt(&H45E0), &HAD, &H35, &H61, &H20, &H57, &HCC, &H8F, &H74)
IID_IAudioViewManagerService = iid
End Function
Public Function IID_IAudioEffectsChangedNotificationClient() As UUID
'{A5DED44F-3C5D-4B2B-BD1E-5DC1EE20BBF6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA5DED44F, CInt(&H3C5D), CInt(&H4B2B), &HBD, &H1E, &H5D, &HC1, &HEE, &H20, &HBB, &HF6)
IID_IAudioEffectsChangedNotificationClient = iid
End Function
Public Function IID_IAudioEffectsManager() As UUID
'{4460B3AE-4B44-4527-8676-7548A8ACD260}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4460B3AE, CInt(&H4B44), CInt(&H4527), &H86, &H76, &H75, &H48, &HA8, &HAC, &HD2, &H60)
IID_IAudioEffectsManager = iid
End Function
Public Function IID_IAudioMediaType() As UUID
'{4E997F73-B71F-4798-873B-ED7DFCF15B4D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4E997F73, CInt(&HB71F), CInt(&H4798), &H87, &H3B, &HED, &H7D, &HFC, &HF1, &H5B, &H4D)
IID_IAudioMediaType = iid
End Function
Public Function IID_IAudioProcessingObjectRT() As UUID
'{9E1D6A6D-DDBC-4E95-A4C7-AD64BA37846C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9E1D6A6D, CInt(&HDDBC), CInt(&H4E95), &HA4, &HC7, &HAD, &H64, &HBA, &H37, &H84, &H6C)
IID_IAudioProcessingObjectRT = iid
End Function
Public Function IID_IAudioProcessingObjectVBR() As UUID
'{7ba1db8f-78ad-49cd-9591-f79d80a17c81}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7ba1db8f, CInt(&H78ad), CInt(&H49cd), &H95, &H91, &Hf7, &H9d, &H80, &Ha1, &H7c, &H81)
IID_IAudioProcessingObjectVBR = iid
End Function
Public Function IID_IAudioProcessingObjectConfiguration() As UUID
'{0E5ED805-ABA6-49c3-8F9A-2B8C889C4FA8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H0E5ED805, CInt(&HABA6), CInt(&H49c3), &H8F, &H9A, &H2B, &H8C, &H88, &H9C, &H4F, &HA8)
IID_IAudioProcessingObjectConfiguration = iid
End Function
Public Function IID_IAudioProcessingObject() As UUID
'{FD7F2B29-24D0-4b5c-B177-592C39F9CA10}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFD7F2B29, CInt(&H24D0), CInt(&H4b5c), &HB1, &H77, &H59, &H2C, &H39, &HF9, &HCA, &H10)
IID_IAudioProcessingObject = iid
End Function
Public Function IID_IAudioDeviceModulesClient() As UUID
'{98F37DAC-D0B6-49F5-896A-AA4D169A4C48}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H98F37DAC, CInt(&HD0B6), CInt(&H49F5), &H89, &H6A, &HAA, &H4D, &H16, &H9A, &H4C, &H48)
IID_IAudioDeviceModulesClient = iid
End Function
Public Function IID_IAudioSystemEffectsCustomFormats() As UUID
'{B1176E34-BB7F-4f05-BEBD-1B18A534E097}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB1176E34, CInt(&HBB7F), CInt(&H4f05), &HBE, &HBD, &H1B, &H18, &HA5, &H34, &HE0, &H97)
IID_IAudioSystemEffectsCustomFormats = iid
End Function
Public Function IID_IApoAuxiliaryInputConfiguration() As UUID
'{4CEB0AAB-FA19-48ED-A857-87771AE1B768}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4CEB0AAB, CInt(&HFA19), CInt(&H48ED), &HA8, &H57, &H87, &H77, &H1A, &HE1, &HB7, &H68)
IID_IApoAuxiliaryInputConfiguration = iid
End Function
Public Function IID_IApoAuxiliaryInputRT() As UUID
'{F851809C-C177-49A0-B1B2-B66F017943AB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF851809C, CInt(&HC177), CInt(&H49A0), &HB1, &HB2, &HB6, &H6F, &H01, &H79, &H43, &HAB)
IID_IApoAuxiliaryInputRT = iid
End Function
Public Function IID_IApoAcousticEchoCancellation() As UUID
'{25385759-3236-4101-A943-25693DFB5D2D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H25385759, CInt(&H3236), CInt(&H4101), &HA9, &H43, &H25, &H69, &H3D, &HFB, &H5D, &H2D)
IID_IApoAcousticEchoCancellation = iid
End Function
Public Function IID_IApoAcousticEchoCancellation2() As UUID
'{F235855F-F06D-45B3-A63F-EE4B71509DC2}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF235855F, CInt(&HF06D), CInt(&H45B3), &HA6, &H3F, &HEE, &H4B, &H71, &H50, &H9D, &HC2)
 IID_IApoAcousticEchoCancellation2 = iid
End Function
Public Function IID_IAudioSystemEffectsPropertyChangeNotificationClient() As UUID
'{20049D40-56D5-400E-A2EF-385599FEED49}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H20049D40, CInt(&H56D5), CInt(&H400E), &HA2, &HEF, &H38, &H55, &H99, &HFE, &HED, &H49)
IID_IAudioSystemEffectsPropertyChangeNotificationClient = iid
End Function
Public Function IID_IAudioSystemEffectsPropertyStore() As UUID
'{302AE7F9-D7E0-43E4-971B-1F8293613D2A}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H302AE7F9, CInt(&HD7E0), CInt(&H43E4), &H97, &H1B, &H1F, &H82, &H93, &H61, &H3D, &H2A)
IID_IAudioSystemEffectsPropertyStore = iid
End Function
Public Function IID_IAudioEndpoint() As UUID
'{30A99515-1527-4451-AF9F-00C5F0234DAF}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H30A99515, CInt(&H1527), CInt(&H4451), &HAF, &H9F, &H00, &HC5, &HF0, &H23, &H4D, &HAF)
IID_IAudioEndpoint = iid
End Function
Public Function IID_IAudioEndpointRT() As UUID
'{DFD2005F-A6E5-4d39-A265-939ADA9FBB4D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDFD2005F, CInt(&HA6E5), CInt(&H4d39), &HA2, &H65, &H93, &H9A, &HDA, &H9F, &HBB, &H4D)
IID_IAudioEndpointRT = iid
End Function
Public Function IID_IAudioInputEndpointRT() As UUID
'{8026AB61-92B2-43c1-A1DF-5C37EBD08D82}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8026AB61, CInt(&H92B2), CInt(&H43c1), &HA1, &HDF, &H5C, &H37, &HEB, &HD0, &H8D, &H82)
IID_IAudioInputEndpointRT = iid
End Function
Public Function IID_IAudioOutputEndpointRT() As UUID
'{8FA906E4-C31C-4e31-932E-19A66385E9AA}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8FA906E4, CInt(&HC31C), CInt(&H4e31), &H93, &H2E, &H19, &HA6, &H63, &H85, &HE9, &HAA)
IID_IAudioOutputEndpointRT = iid
End Function
Public Function IID_IAudioDeviceEndpoint() As UUID
'{D4952F5A-A0B2-4cc4-8B82-9358488DD8AC}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD4952F5A, CInt(&HA0B2), CInt(&H4cc4), &H8B, &H82, &H93, &H58, &H48, &H8D, &HD8, &HAC)
IID_IAudioDeviceEndpoint = iid
End Function
Public Function IID_IAudioEndpointControl() As UUID
'{C684B72A-6DF4-4774-BDF9-76B77509B653}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC684B72A, CInt(&H6DF4), CInt(&H4774), &HBD, &HF9, &H76, &HB7, &H75, &H09, &HB6, &H53)
IID_IAudioEndpointControl = iid
End Function
Public Function IID_IAudioAmbisonicsControl() As UUID
'{28724C91-DF35-4856-9F76-D6A26413F3DF}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H28724C91, CInt(&HDF35), CInt(&H4856), &H9F, &H76, &HD6, &HA2, &H64, &H13, &HF3, &HDF)
 IID_IAudioAmbisonicsControl = iid
End Function

Public Function PKEY_AudioEndpoint_FormFactor() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1DA5D803, &HD492, &H4EDD, &H8C, &H23, &HE0, &HC0, &HFF, &HEE, &H7F, &HE, 0)
PKEY_AudioEndpoint_FormFactor = pkk
End Function
Public Function PKEY_AudioEndpoint_ControlPanelPageProvider() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1DA5D803, &HD492, &H4EDD, &H8C, &H23, &HE0, &HC0, &HFF, &HEE, &H7F, &HE, 1)
PKEY_AudioEndpoint_ControlPanelPageProvider = pkk
End Function
Public Function PKEY_AudioEndpoint_Association() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1DA5D803, &HD492, &H4EDD, &H8C, &H23, &HE0, &HC0, &HFF, &HEE, &H7F, &HE, 2)
PKEY_AudioEndpoint_Association = pkk
End Function
Public Function PKEY_AudioEndpoint_PhysicalSpeakers() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1DA5D803, &HD492, &H4EDD, &H8C, &H23, &HE0, &HC0, &HFF, &HEE, &H7F, &HE, 3)
PKEY_AudioEndpoint_PhysicalSpeakers = pkk
End Function
Public Function PKEY_AudioEndpoint_GUID() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1DA5D803, &HD492, &H4EDD, &H8C, &H23, &HE0, &HC0, &HFF, &HEE, &H7F, &HE, 4)
PKEY_AudioEndpoint_GUID = pkk
End Function
Public Function PKEY_AudioEndpoint_Disable_SysFx() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1DA5D803, &HD492, &H4EDD, &H8C, &H23, &HE0, &HC0, &HFF, &HEE, &H7F, &HE, 5)
PKEY_AudioEndpoint_Disable_SysFx = pkk
End Function
Public Function PKEY_AudioEndpoint_FullRangeSpeakers() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1DA5D803, &HD492, &H4EDD, &H8C, &H23, &HE0, &HC0, &HFF, &HEE, &H7F, &HE, 6)
PKEY_AudioEndpoint_FullRangeSpeakers = pkk
End Function
Public Function PKEY_AudioEndpoint_Supports_EventDriven_Mode() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1DA5D803, &HD492, &H4EDD, &H8C, &H23, &HE0, &HC0, &HFF, &HEE, &H7F, &HE, 7)
PKEY_AudioEndpoint_Supports_EventDriven_Mode = pkk
End Function
Public Function PKEY_AudioEndpoint_JackSubType() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1DA5D803, &HD492, &H4EDD, &H8C, &H23, &HE0, &HC0, &HFF, &HEE, &H7F, &HE, 8)
PKEY_AudioEndpoint_JackSubType = pkk
End Function
Public Function PKEY_AudioEndpoint_Default_VolumeInDb() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1DA5D803, &HD492, &H4EDD, &H8C, &H23, &HE0, &HC0, &HFF, &HEE, &H7F, &HE, 9)
PKEY_AudioEndpoint_Default_VolumeInDb = pkk
End Function
Public Function PKEY_AudioEngine_DeviceFormat() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HF19F064D, &H82C, &H4E27, &HBC, &H73, &H68, &H82, &HA1, &HBB, &H8E, &H4C, 0)
PKEY_AudioEngine_DeviceFormat = pkk
End Function
Public Function PKEY_AudioEngine_OEMFormat() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HE4870E26, &H3CC5, &H4CD2, &HBA, &H46, &HCA, &HA, &H9A, &H70, &HED, &H4, 3)
PKEY_AudioEngine_OEMFormat = pkk
End Function
Public Function PKEY_AudioEndpointLogo_IconEffects() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HF1AB780D, &H2010, &H4ED3, &HA3, &HA6, &H8B, &H87, &HF0, &HF0, &HC4, &H76, 0)
PKEY_AudioEndpointLogo_IconEffects = pkk
End Function
Public Function PKEY_AudioEndpointLogo_IconPath() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HF1AB780D, &H2010, &H4ED3, &HA3, &HA6, &H8B, &H87, &HF0, &HF0, &HC4, &H76, 1)
PKEY_AudioEndpointLogo_IconPath = pkk
End Function
Public Function PKEY_AudioEndpointSettings_MenuText() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H14242002, &H320, &H4DE4, &H95, &H55, &HA7, &HD8, &H2B, &H73, &HC2, &H86, 0)
PKEY_AudioEndpointSettings_MenuText = pkk
End Function
Public Function PKEY_AudioEndpointSettings_LaunchContract() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H14242002, &H320, &H4DE4, &H95, &H55, &HA7, &HD8, &H2B, &H73, &HC2, &H86, 1)
PKEY_AudioEndpointSettings_LaunchContract = pkk
End Function

[Description("Not a mistake.")]
Public Function PKEY_FX_EffectPack_Schema_V1() As UUID
'{7abf23d9-727e-4d0b-86a3-dd501d260001}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7abf23d9, CInt(&H727e), CInt(&H4d0b), &H86, &Ha3, &Hdd, &H50, &H1d, &H26, &H00, &H01)
 PKEY_FX_EffectPack_Schema_V1 = iid
End Function

Public Function PKEY_FX_Association() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 0)
PKEY_FX_Association = pkk
End Function
Public Function PKEY_FX_PreMixEffectClsid() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 1)
PKEY_FX_PreMixEffectClsid = pkk
End Function
Public Function PKEY_FX_PostMixEffectClsid() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 2)
PKEY_FX_PostMixEffectClsid = pkk
End Function
Public Function PKEY_FX_UserInterfaceClsid() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 3)
PKEY_FX_UserInterfaceClsid = pkk
End Function
Public Function PKEY_FX_FriendlyName() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 4)
PKEY_FX_FriendlyName = pkk
End Function
Public Function PKEY_FX_StreamEffectClsid() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 5)
PKEY_FX_StreamEffectClsid = pkk
End Function
Public Function PKEY_FX_ModeEffectClsid() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 6)
PKEY_FX_ModeEffectClsid = pkk
End Function
Public Function PKEY_FX_EndpointEffectClsid() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 7)
PKEY_FX_EndpointEffectClsid = pkk
End Function
Public Function PKEY_FX_KeywordDetector_StreamEffectClsid() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 8)
PKEY_FX_KeywordDetector_StreamEffectClsid = pkk
End Function
Public Function PKEY_FX_KeywordDetector_ModeEffectClsid() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 9)
PKEY_FX_KeywordDetector_ModeEffectClsid = pkk
End Function
Public Function PKEY_FX_KeywordDetector_EndpointEffectClsid() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 10)
PKEY_FX_KeywordDetector_EndpointEffectClsid = pkk
End Function
Public Function PKEY_FX_Offload_StreamEffectClsid() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 11)
PKEY_FX_Offload_StreamEffectClsid = pkk
End Function
Public Function PKEY_FX_Offload_ModeEffectClsid() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 12)
PKEY_FX_Offload_ModeEffectClsid = pkk
End Function
Public Function PKEY_CompositeFX_StreamEffectClsid() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 13)
PKEY_CompositeFX_StreamEffectClsid = pkk
End Function
Public Function PKEY_CompositeFX_ModeEffectClsid() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 14)
PKEY_CompositeFX_ModeEffectClsid = pkk
End Function
Public Function PKEY_CompositeFX_EndpointEffectClsid() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 15)
PKEY_CompositeFX_EndpointEffectClsid = pkk
End Function
Public Function PKEY_CompositeFX_KeywordDetector_StreamEffectClsid() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 16)
PKEY_CompositeFX_KeywordDetector_StreamEffectClsid = pkk
End Function
Public Function PKEY_CompositeFX_KeywordDetector_ModeEffectClsid() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 17)
PKEY_CompositeFX_KeywordDetector_ModeEffectClsid = pkk
End Function
Public Function PKEY_CompositeFX_KeywordDetector_EndpointEffectClsid() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 18)
PKEY_CompositeFX_KeywordDetector_EndpointEffectClsid = pkk
End Function
Public Function PKEY_CompositeFX_Offload_StreamEffectClsid() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 19)
PKEY_CompositeFX_Offload_StreamEffectClsid = pkk
End Function
Public Function PKEY_CompositeFX_Offload_ModeEffectClsid() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 20)
PKEY_CompositeFX_Offload_ModeEffectClsid = pkk
End Function
Public Function PKEY_FX_SupportAppLauncher() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 21)
PKEY_FX_SupportAppLauncher = pkk
End Function
Public Function PKEY_FX_SupportedFormats() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 22)
PKEY_FX_SupportedFormats = pkk
End Function
Public Function PKEY_FX_Enumerator() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 23)
PKEY_FX_Enumerator = pkk
End Function
Public Function PKEY_FX_VersionMajor() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 24)
PKEY_FX_VersionMajor = pkk
End Function
Public Function PKEY_FX_VersionMinor() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 25)
PKEY_FX_VersionMinor = pkk
End Function
Public Function PKEY_FX_Author() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 26)
PKEY_FX_Author = pkk
End Function
Public Function PKEY_FX_ObjectId() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 27)
PKEY_FX_ObjectId = pkk
End Function
Public Function PKEY_FX_State() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 28)
PKEY_FX_State = pkk
End Function
Public Function PKEY_FX_EffectPackSchema_Version() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 29)
PKEY_FX_EffectPackSchema_Version = pkk
End Function
Public Function PKEY_FX_ApplyToBluetooth() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 30)
PKEY_FX_ApplyToBluetooth = pkk
End Function
Public Function PKEY_FX_ApplyToUsb() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 31)
PKEY_FX_ApplyToUsb = pkk
End Function
Public Function PKEY_FX_ApplyToRender() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 32)
PKEY_FX_ApplyToRender = pkk
End Function
Public Function PKEY_FX_ApplyToCapture() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 33)
PKEY_FX_ApplyToCapture = pkk
End Function
Public Function PKEY_FX_RequestSetAsDefault() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 34)
PKEY_FX_RequestSetAsDefault = pkk
End Function
Public Function PKEY_FX_RequestSetAsDefaultPriority() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HD04E05A6, &H594B, &H4fb6, &HA8, &H0D, &H01, &HAF, &H5E, &HED, &H7D, &H1D, 35)
PKEY_FX_RequestSetAsDefaultPriority = pkk
End Function
Public Function PKEY_SFX_ProcessingModes_Supported_For_Streaming() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd3993a3f, &H99c2, &H4402, &Hb5, &Hec, &Ha9, &H2a, &H3, &H67, &H66, &H4b, 5)
PKEY_SFX_ProcessingModes_Supported_For_Streaming = pkk
End Function
Public Function PKEY_MFX_ProcessingModes_Supported_For_Streaming() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd3993a3f, &H99c2, &H4402, &Hb5, &Hec, &Ha9, &H2a, &H3, &H67, &H66, &H4b, 6)
PKEY_MFX_ProcessingModes_Supported_For_Streaming = pkk
End Function
Public Function PKEY_EFX_ProcessingModes_Supported_For_Streaming() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd3993a3f, &H99c2, &H4402, &Hb5, &Hec, &Ha9, &H2a, &H3, &H67, &H66, &H4b, 7)
PKEY_EFX_ProcessingModes_Supported_For_Streaming = pkk
End Function
Public Function PKEY_SFX_KeywordDetector_ProcessingModes_Supported_For_Streaming() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd3993a3f, &H99c2, &H4402, &Hb5, &Hec, &Ha9, &H2a, &H3, &H67, &H66, &H4b, 8)
PKEY_SFX_KeywordDetector_ProcessingModes_Supported_For_Streaming = pkk
End Function
Public Function PKEY_MFX_KeywordDetector_ProcessingModes_Supported_For_Streaming() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd3993a3f, &H99c2, &H4402, &Hb5, &Hec, &Ha9, &H2a, &H3, &H67, &H66, &H4b, 9)
PKEY_MFX_KeywordDetector_ProcessingModes_Supported_For_Streaming = pkk
End Function
Public Function PKEY_EFX_KeywordDetector_ProcessingModes_Supported_For_Streaming() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd3993a3f, &H99c2, &H4402, &Hb5, &Hec, &Ha9, &H2a, &H3, &H67, &H66, &H4b, 10)
PKEY_EFX_KeywordDetector_ProcessingModes_Supported_For_Streaming = pkk
End Function
Public Function PKEY_SFX_Offload_ProcessingModes_Supported_For_Streaming() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd3993a3f, &H99c2, &H4402, &Hb5, &Hec, &Ha9, &H2a, &H3, &H67, &H66, &H4b, 11)
PKEY_SFX_Offload_ProcessingModes_Supported_For_Streaming = pkk
End Function
Public Function PKEY_MFX_Offload_ProcessingModes_Supported_For_Streaming() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd3993a3f, &H99c2, &H4402, &Hb5, &Hec, &Ha9, &H2a, &H3, &H67, &H66, &H4b, 12)
PKEY_MFX_Offload_ProcessingModes_Supported_For_Streaming = pkk
End Function
Public Function PKEY_APO_SWFallback_ProcessingModes() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &Hd3993a3f, &H99c2, &H4402, &Hb5, &Hec, &Ha9, &H2a, &H3, &H67, &H66, &H4b, 13)
PKEY_APO_SWFallback_ProcessingModes = pkk
End Function


Public Function DEVINTERFACE_AUDIOENDPOINTPLUGIN() As UUID
'{9F2F7B66-65AC-4FA6-8AE4-123C78B89313}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9F2F7B66, CInt(&H65AC), CInt(&H4FA6), &H8A, &HE4, &H12, &H3C, &H78, &HB8, &H93, &H13)
 DEVINTERFACE_AUDIOENDPOINTPLUGIN = iid
End Function
Public Function DEVPKEY_AudioEndpointPlugin_FactoryCLSID() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H12d83bd7, &Hcf12, &H46be, &H85, &H40, &H81, &H27, &H10, &Hd3, &H2, &H1c, 1)
DEVPKEY_AudioEndpointPlugin_FactoryCLSID = pkk
End Function
Public Function DEVPKEY_AudioEndpointPlugin_DataFlow() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H12d83bd7, &Hcf12, &H46be, &H85, &H40, &H81, &H27, &H10, &Hd3, &H2, &H1c, 2)
DEVPKEY_AudioEndpointPlugin_DataFlow = pkk
End Function
Public Function DEVPKEY_AudioEndpointPlugin_PnPInterface() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H12d83bd7, &Hcf12, &H46be, &H85, &H40, &H81, &H27, &H10, &Hd3, &H2, &H1c, 3)
DEVPKEY_AudioEndpointPlugin_PnPInterface = pkk
End Function
Public Function DEVPKEY_AudioEndpointPlugin2_FactoryCLSID() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H12d83bd7, &Hcf12, &H46be, &H85, &H40, &H81, &H27, &H10, &Hd3, &H2, &H1c, 4)
DEVPKEY_AudioEndpointPlugin2_FactoryCLSID = pkk
End Function

Public Function CLSID_MMDeviceEnumerator() As UUID
'{BCDE0395-E52F-467C-8E3D-C4579291692E}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBCDE0395, CInt(&HE52F), CInt(&H467C), &H8E, &H3D, &HC4, &H57, &H92, &H91, &H69, &H2E)
 CLSID_MMDeviceEnumerator = iid
End Function
Public Function CLSID_DeviceTopology() As UUID
'{1DF639D0-5EC1-47AA-9379-828DC1AA8C59}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1DF639D0, CInt(&H5EC1), CInt(&H47AA), &H93, &H79, &H82, &H8D, &HC1, &HAA, &H8C, &H59)
 CLSID_DeviceTopology = iid
End Function
Public Function CLSID_PolicyConfigClient() As UUID
'{870af99c-171d-4f9e-af0d-e63df40c2bc9}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H870af99c, CInt(&H171d), CInt(&H4f9e), &Haf, &H0d, &He6, &H3d, &Hf4, &H0c, &H2b, &Hc9)
 CLSID_PolicyConfigClient = iid
End Function
Public Function CLSID_CPolicyConfigClient() As UUID
'{870af99c-171d-4f9e-af0d-e63df40c2bc9}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H870af99c, CInt(&H171d), CInt(&H4f9e), &Haf, &H0d, &He6, &H3d, &Hf4, &H0c, &H2b, &Hc9)
 CLSID_CPolicyConfigClient = iid
End Function
Public Function CLSID_CPolicyConfigVistaClient() As UUID
'{294935CE-F637-4E7C-A41B-AB255460B862}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H294935CE, CInt(&HF637), CInt(&H4E7C), &HA4, &H1B, &HAB, &H25, &H54, &H60, &HB8, &H62)
 CLSID_CPolicyConfigVistaClient = iid
End Function


Public Function GetCAStatusStr(lStatus As DEVICE_STATE) As String
Select Case lStatus
    Case DEVICE_STATE_ACTIVE: GetCAStatusStr = "Active"
    Case DEVICE_STATE_DISABLED: GetCAStatusStr = "Disabled"
    Case DEVICE_STATE_NOTPRESENT: GetCAStatusStr = "Not present"
    Case DEVICE_STATE_UNPLUGGED: GetCAStatusStr = "Unplugged"
    Case Else: GetCAStatusStr = "<invalid>"
End Select
End Function
Public Function GetCARoleStr(rl As ERole) As String
Select Case rl
    Case eCommunications: GetCARoleStr = "Communications"
    Case eConsole: GetCARoleStr = "Console"
    Case eMultimedia: GetCARoleStr = "Multimedia"
End Select
End Function
Public Function GetCAFlowStr(fl As EDataFlow) As String
Select Case fl
    Case eCapture: GetCAFlowStr = "Capture"
    Case eRender: GetCAFlowStr = "Render"
    Case eAll: GetCAFlowStr = "All"
End Select
End Function
#End Region
End Module