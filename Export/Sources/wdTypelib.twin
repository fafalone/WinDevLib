'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************


[InterfaceId("00000001-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IClassFactory Extends stdole.IUnknown
        Sub CreateInstance(ByVal pUnkOuter As stdole.IUnknown, ByRef riid As UUID, ByRef ppvObject As Any)
        Sub LockServer(ByVal fLock As BOOL)
End Interface

[InterfaceId("B196B28F-BAB4-101A-B69C-00AA00341D07")]
[OleAutomation(False)]
Interface IClassFactory2 Extends IClassFactory
        Sub GetLicInfo(ByRef pLicInfo As LICINFO)
        Sub RequestLicKey(ByVal dwReserved As Long, ByRef pBstrKey As String)
        Sub CreateInstanceLic(ByVal pUnkOuter As stdole.IUnknown, ByVal pUnkReserved As stdole.IUnknown, ByRef riid As UUID, ByVal bstrKey As String, ByRef ppvObj As Any)
End Interface

[InterfaceId("00020401-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface ITypeInfo Extends stdole.IUnknown
        Function GetTypeAttr() As LongPtr
        Function GetTypeComp() As ITypeComp
        Function GetFuncDesc(ByVal index As Long) As LongPtr
        Function GetVarDesc(ByVal index As Long) As LongPtr
        Function GetNames(ByVal memid As Long, ByRef rgBstrNames As String, ByVal cMaxNames As Long) As Long
        Function GetRefTypeOfImplType(ByVal index As Long) As Long
        Function GetImplTypeFlags(ByVal index As Long) As Long
        Sub GetIDsOfNames(ByRef rgszNames As String, ByVal cNames As Long, ByRef pMemId As Long)
        Sub Invoke(ByVal pvInstance As stdole.IDispatch, ByVal memid As Long, [TypeHint(DispatchTypes)] ByVal wFlags As Integer, ByRef pDispParams As DISPPARAMS, ByVal pVarResult As LongPtr, ByRef pExcepInfo As EXCEPINFO, ByRef puArgErr As Long)
        Sub GetDocumentation(ByVal memid As Long, ByRef pBstrName As String, ByRef pBstrDocString As String, ByRef pdwHelpContext As Long, ByRef pBstrHelpFile As String)
        Sub GetDllEntry(ByVal memid As Long, ByVal invkind As INVOKEKIND, ByRef pBstrDllName As String, ByRef pBstrName As String, ByRef pwOrdinal As Integer)
        Function GetRefTypeInfo(ByVal hRefType As Long) As ITypeInfo
        Function AddressOfMember(ByVal memid As Long, ByVal invkind As INVOKEKIND) As LongPtr
        Function CreateInstance(ByRef pUnkOuter As Any, ByRef riid As UUID) As IDispatch
        Sub GetMops(ByVal memid As Long, ByRef pBstrMops As String)
        Function GetContainingTypeLib(ByRef ppTLib As ITypeLib) As Long
        [PreserveSig]
        Sub ReleaseTypeAttr(ByVal pTypeAttr As LongPtr)
        [PreserveSig]
        Sub ReleaseFuncDesc(ByVal pFuncDesc As LongPtr)
        [PreserveSig]
        Sub ReleaseVarDesc(ByVal pVarDesc As LongPtr)
End Interface

[InterfaceId("00020412-0000-0000-C000-000000000046")]
[Description("ITypeInfo2 interface")]
[OleAutomation(False)]
Interface ITypeInfo2 Extends ITypeInfo
        Function GetTypeKind() As TYPEKIND
        Function GetTypeFlags() As TYPEFLAGS
        Function GetFuncIndexOfMemId(ByVal memid As Long, ByVal invkind As INVOKEKIND) As Long
        Function GetVarIndexOfMemId(ByVal memid As Long) As Long
        Function GetCustData(ByRef iid As UUID) As Variant
        Function GetFuncCustData(ByVal index As Long, ByRef riid As UUID) As Variant
        Function GetParamCustData(ByVal indexFunc As Long, ByVal indexParam As Long, ByRef riid As UUID) As Variant
        Function GetVarCustData(ByVal index As Long, ByRef riid As UUID) As Variant
        Function GetImplTypeCustData(ByVal index As Long, ByRef riid As UUID) As Variant
        Sub GetDocumentation2(ByVal memid As Long, ByVal lcid As Long, ByRef pbstrHelpString As String, ByRef pdwHelpStringContext As Long, ByRef pbstrHelpStringDll As String)
        Sub GetAllCustData(ByRef pCustData As CUSTDATA)
        Sub GetAllFuncCustData(ByVal index As Long, ByRef pCustData As CUSTDATA)
        Sub GetAllParamCustData(ByVal indexFunc As Long, ByVal indexParam As Long, ByRef pCustData As CUSTDATA)
        Sub GetAllVarCustData(ByVal index As Long, ByRef pCustData As CUSTDATA)
        Sub GetAllImplTypeCustData(ByVal index As Long, ByRef pCustData As CUSTDATA)
End Interface

[InterfaceId("00020402-0000-0000-C000-000000000046")]
[Description("ITypeLib interface")]
[OleAutomation(False)]
Interface ITypeLib Extends stdole.IUnknown
        [PreserveSig] Function GetTypeInfoCount() As Long
        Function GetTypeInfo(ByVal index As Long) As ITypeInfo
        Function GetTypeInfoType(ByVal index As Long) As TYPEKIND
        Function GetTypeInfoOfIID(ByRef iid As UUID) As ITypeInfo
        Function GetLibAttr() As LongPtr
        Function GetTypeComp() As ITypeComp
        Sub GetDocumentation(ByVal index As Long, ByRef pBstrName As String, ByRef pBstrDocString As String, ByRef pdwHelpContext As Long, ByRef pBstrHelpFile As String)
        Function IsName(ByVal szNameBuf As String, ByVal lHashVal As Long) As Long
        Sub FindName(ByVal szNameBuf As String, ByVal lHashVal As Long, ByRef ppTInfo As ITypeInfo, ByRef rgMemId As Long, ByRef pcFound As Integer)
        [PreserveSig]
        Sub ReleaseTLibAttr(ByVal pTLibAttr As LongPtr)
End Interface

[InterfaceId("00020411-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface ITypeLib2 Extends ITypeLib
        Function GetCustData(ByRef iid As UUID) As Variant
        Sub GetLibStatistics(ByRef pcUniqueNames As Long, ByRef pcchUniqueNames As Long)
        Sub GetDocumentation2(ByVal index As Long, ByVal lcid As Long, ByRef pbstrHelpString As String, ByRef pdwHelpStringContext As Long, ByRef pbstrHelpStringDll As String)
        Sub GetAllCustData(ByRef pCustData As CUSTDATA)
End Interface

[InterfaceId("00020403-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface ITypeComp Extends stdole.IUnknown
        Sub Bind(ByVal szName As String, ByVal lHashVal As Long, ByVal wFlags As Integer, ByRef ppTInfo As ITypeInfo, ByRef pDescKind As DESCKIND, ByVal pBindPtr As LongPtr)
        Sub BindType(ByVal szName As String, ByVal lHashVal As Long, ByRef ppTInfo As ITypeInfo, ByRef ppTComp As ITypeComp)
End Interface

[InterfaceId("B196B283-BAB4-101A-B69C-00AA00341D07")]
[OleAutomation(False)]
Interface IProvideClassInfo Extends stdole.IUnknown
        Function GetClassInfo() As ITypeInfo
End Interface

[InterfaceId("B196B284-BAB4-101A-B69C-00AA00341D07")]
[OleAutomation(False)]
Interface IConnectionPointContainer Extends stdole.IUnknown
    Function EnumConnectionPoints() As IEnumConnectionPoints
    Function FindConnectionPoint(ByRef riid As UUID) As IConnectionPoint
End Interface

[InterfaceId("B196B286-BAB4-101A-B69C-00AA00341D07")]
[OleAutomation(False)]
Interface IConnectionPoint Extends stdole.IUnknown
    Sub GetConnectionInterface(ByRef piid As UUID)
    Function GetConnectionPointContainer() As IConnectionPointContainer
    Function Advise(ByVal pUnkSink As stdole.IUnknown) As Long
    Sub Unadvise(ByVal dwCookie As Long)
    Function EnumConnections() As IEnumConnections
End Interface

[InterfaceId("B196B287-BAB4-101A-B69C-00AA00341D07")]
[OleAutomation(False)]
Interface IEnumConnections Extends stdole.IUnknown
    [PreserveSig]
    Function Next(ByVal cConnections As Long, ByRef rgcd As CONNECTDATA, Optional ByRef lpcFetched As Long = 0) As Long
    Sub Skip(ByVal cConnections As Long)
    Sub Reset()
    Function Clone() As IEnumConnections
End Interface

[InterfaceId("B196B285-BAB4-101A-B69C-00AA00341D07")]
[OleAutomation(False)]
Interface IEnumConnectionPoints Extends stdole.IUnknown
    [PreserveSig]
    Function Next(ByVal cConnections As Long, ByRef rgpcn As IConnectionPoint, Optional ByRef lpcFetched As Long = 0) As Long
    Sub Skip(ByVal cConnections As Long)
    Sub Reset()
    Function Clone() As IEnumConnectionPoints
End Interface

[InterfaceId("00020405-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface ICreateTypeInfo Extends stdole.IUnknown
    Sub SetGuid(ByRef guid As UUID)
    Sub SetTypeFlags(ByVal uTypeFlags As TYPEFLAGS)
    Sub SetDocString(ByVal pStrDoc As String)
    Sub SetHelpContext(ByVal dwHelpContext As Long)
    Sub SetVersion(ByVal wMajorVerNum As Integer, ByVal wMinorVerNum As Integer)
    Sub AddRefTypeInfo(ByVal pTInfo As ITypeInfo, ByRef phRefType As Long)
    Sub AddFuncDesc(ByVal index As Long, ByRef pFuncDesc As FUNCDESC)
    Sub AddImplType(ByVal index As Long, ByVal hRefType As Long)
    Sub SetImplTypeFlags(ByVal index As Long, ByVal implTypeFlags As IMPLTYPE)
    Sub SetAlignment(ByVal cbAlignment As Integer)
    Sub SetSchema(ByVal pStrSchema As String)
    Sub AddVarDesc(ByVal index As Long, ByRef pVarDesc As VARDESC)
    Sub SetFuncAndParamNames(ByVal index As Long, ByRef rgszNames As String, ByVal cNames As Long)
    Sub SetVarName(ByVal index As Long, ByVal szName As String)
    Sub SetTypeDescAlias(ByRef pTDescAlias As TYPEDESC)
    Sub DefineFuncAsDllEntry(ByVal index As Long, ByVal szDllName As String, ByVal szProcName As String)
    Sub SetFuncDocString(ByVal index As Long, ByVal szDocString As String)
    Sub SetVarDocString(ByVal index As Long, ByVal szDocString As String)
    Sub SetFuncHelpContext(ByVal index As Long, ByVal dwHelpContext As Long)
    Sub SetVarHelpContext(ByVal index As Long, ByVal dwHelpContext As Long)
    Sub SetMops(ByVal index As Long, ByVal bstrMops As String)
    Sub SetTypeIdldesc(ByRef pIdlDesc As IDLDESC)
    Sub LayOut()
End Interface

[InterfaceId("0002040E-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface ICreateTypeInfo2 Extends ICreateTypeInfo
    Sub DeleteFuncDesc(ByVal index As Long)
    Sub DeleteFuncDescByMemId(ByVal memid As Long, ByVal invkind As INVOKEKIND)
    Sub DeleteVarDesc(ByVal index As Long)
    Sub DeleteVarDescByMemId(ByVal memid As Long)
    Sub DeleteImplType(ByVal index As Long)
    Sub SetCustData(ByRef guid As UUID, ByRef pVarVal As Variant)
    Sub SetFuncCustData(ByVal index As Long, ByRef guid As UUID, ByRef pVarVal As Variant)
    Sub SetParamCustData(ByVal indexFunc As Long, ByVal indexParam As Long, ByRef guid As UUID, ByRef pVarVal As Variant)
    Sub SetVarCustData(ByVal index As Long, ByRef guid As UUID, ByRef pVarVal As Variant)
    Sub SetImplTypeCustData(ByVal index As Long, ByRef guid As UUID, ByRef pVarVal As Variant)
    Sub SetHelpStringContext(ByVal dwHelpStringContext As Long)
    Sub SetFuncHelpStringContext(ByVal index As Long, ByVal dwHelpStringContext As Long)
    Sub SetVarHelpStringContext(ByVal index As Long, ByVal dwHelpStringContext As Long)
    Sub Invalidate()
    Sub SetName(ByVal szName As String)
End Interface

[InterfaceId("00020406-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface ICreateTypeLib Extends stdole.IUnknown
    Sub CreateTypeInfo(ByVal szName As String, ByVal tkind As TYPEKIND, ByRef ppCTInfo As ICreateTypeInfo)
    Sub SetName(ByVal szName As String)
    Sub SetVersion(ByVal wMajorVerNum As Integer, ByVal wMinorVerNum As Integer)
    Sub SetGuid(ByRef guid As UUID)
    Sub SetDocString(ByVal szDoc As String)
    Sub SetHelpFileName(ByVal szHelpFileName As String)
    Sub SetHelpContext(ByVal dwHelpContext As Long)
    Sub SetLcid(ByVal lcid As Long)
    Sub SetLibFlags(ByVal uLibFlags As LIBFLAGS)
    Sub SaveAllChanges()
End Interface

[InterfaceId("0002040F-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface ICreateTypeLib2 Extends ICreateTypeLib
    Sub DeleteTypeInfo(ByVal szName As String)
    Sub SetCustData(ByRef guid As UUID, ByRef pVarVal As Variant)
    Sub SetHelpStringContext(ByVal dwHelpStringContext As Long)
    Sub SetHelpStringDll(ByVal szFileName As String)
End Interface

[InterfaceId("0000002D-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface ITypeMarshal Extends stdole.IUnknown
    Property Get SIZE(ByRef pvType As Any, ByVal dwDestContext As Long, ByRef pvDestContext As Any) As Long
    Function Marshal(ByRef pvType As Any, ByVal dwDestContext As Long, ByRef pvDestContext As Any, ByVal cbBufferLength As Long, ByRef pBuffer As Any) As Long
    Function Unmarshal(ByRef pvType As Any, ByVal dwFlags As Long, ByVal cbBufferLength As Long, ByRef pBuffer As Any) As Long
    Sub Free(ByRef pvType As Any)
End Interface

[InterfaceId("0000002E-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface ITypeFactory Extends IUnknownUnrestricted
    Sub CreateFromTypeInfo(ByVal pTypeInfo As ITypeInfo, ByRef riid As UUID, ByRef ppv As Any)
End Interface



[InterfaceId("00020410-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface ITypeChangeEvents Extends stdole.IUnknown
    Sub RequestTypeChange(ByVal CHANGEKIND As CHANGEKIND, ByVal pTInfoBefore As ITypeInfo, ByVal pstrName As LongPtr, ByRef pfCancel As Long)
    Sub AfterTypeChange(ByVal CHANGEKIND As CHANGEKIND, ByVal pTInfoAfter As ITypeInfo, ByVal pstrName As LongPtr)
End Interface

[InterfaceId("ED6A8A2A-B160-4E77-8F73-AA7435CD5C27")]
[OleAutomation(False)]
Interface ITypeLibRegistrationReader Extends stdole.IUnknown
    Sub EnumTypeLibRegistrations(ByRef ppEnumUnknown As IEnumUnknown)
End Interface

[InterfaceId("76A3E735-02DF-4A12-98EB-043AD3600AF3")]
[OleAutomation(False)]
Interface ITypeLibRegistration Extends stdole.IUnknown
    Sub GetGUID(ByRef pGUID As UUID)
    Sub GetVersion(ByRef pVersion As String)
    Sub GetLcid(ByRef pLcid As Long)
    Sub GetWin32Path(ByRef pWin32Path As String)
    Sub GetWin64Path(ByRef pWin64Path As String)
    Sub GetDisplayName(ByRef pDisplayName As String)
    Sub GetFlags(ByRef pFlags As Long)
    Sub GetHelpDir(ByRef pHelpDir As String)
End Interface

[InterfaceId("00020400-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IDispatchUnrestricted Extends IUnknownUnrestricted
        Function GetTypeInfoCount() As Long
        Function GetTypeInfo(Optional ByVal itinfo As Long = 0, Optional ByVal lcid As Long = 0) As ITypeInfo
    [PreserveSig] Function GetIDsOfNames(ByRef riid As UUID, ByRef rgszNames As LongPtr, ByVal cNames As Long, ByVal lcid As Long, ByRef rgdispid As Long) As Long
    [PreserveSig] Function Invoke(ByVal dispidMember As Long, ByRef riid As UUID, ByVal lcid As Long, [TypeHint(DispatchTypes)] ByVal wFlags As Integer, ByRef pDispParams As DISPPARAMS, ByVal pVarResult As LongPtr, ByRef pExcepInfo As EXCEPINFO, ByRef puArgErr As Long) As Long
End Interface

[InterfaceId("00020400-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IDispatchUnrestricted2 Extends stdole.IUnknown
        Function GetTypeInfoCount() As Long
        Function GetTypeInfo(Optional ByVal itinfo As Long = 0, Optional ByVal lcid As Long = 0) As ITypeInfo
    [PreserveSig] Function GetIDsOfNames(ByRef riid As UUID, ByRef rgszNames As LongPtr, ByVal cNames As Long, ByVal lcid As Long, ByRef rgdispid As Long) As Long
    [PreserveSig] Function Invoke(ByVal dispidMember As Long, ByRef riid As UUID, ByVal lcid As Long, [TypeHint(DispatchTypes)] ByVal wFlags As Integer, ByRef pDispParams As DISPPARAMS, ByVal pVarResult As LongPtr, ByRef pExcepInfo As EXCEPINFO, ByRef puArgErr As Long) As Long
End Interface

[InterfaceId("A6EF9860-C720-11d0-9337-00A0C90DCAA9")]
[OleAutomation(False)]
Interface IDispatchEx Extends IDispatch
    Sub GetDispID(ByVal bstrName As String, ByVal grfdex As DispExInputFlags, pid As Long)
    Sub InvokeEx(ByVal id As Long, ByVal lcid As Long, [TypeHint(DispatchTypes)] ByVal wFlags As Integer, pdp As DISPPARAMS, pvarRes As Variant, pei As EXCEPINFO, ByVal pspCaller As IServiceProvider)
    Sub DeleteMemberByName(ByVal bstrName As String, ByVal grfdex As Long)
    Sub DeleteMemberByDispID(ByVal id As Long)
    Sub GetMemberProperties(ByVal id As Long, ByVal grfdexFetch As DispExOutputFlags, pgrfdex As DispExOutputFlags)
    Sub GetMemberName(ByVal id As Long, pbstrName As String)
    Sub GetNextDispID(ByVal grfdex As DispExGetNextFlags, ByVal id As Long, pid As Long)
    Sub GetNameSpaceParent(ppunk As IUnknown)
End Interface

[InterfaceId("A6EF9861-C720-11d0-9337-00A0C90DCAA9")]
[OleAutomation(False)]
Interface IDispError Extends IUnknown
    #If Win64 Then
    Sub QueryErrorInfo(guidErrorType As UUID, ppde As IDispError)
    #Else
    Sub QueryErrorInfo(ByVal guidErrorType1 As Long, ByVal guidErrorType2 As Long, ByVal guidErrorType3 As Long, ByVal guidErrorType4 As Long, ppde As IDispError)
    #End If
    Sub GetNext(ppde As IDispError)
    Sub GetHresult(phr As Long)
    Sub GetSource(pbstrSource As String)
    Sub GetHelpInfo(pbstrFilename As String, pdwContext As Long)
    Sub GetDescription(pbstrDescription As String)
End Interface

[InterfaceId("A6EF9862-C720-11d0-9337-00A0C90DCAA9")]
[OleAutomation(False)]
Interface IVariantChangeType Extends IUnknown
    Sub ChangeType(pvarDst As Variant, pvarSrc As Variant, ByVal lcid As Long, ByVal vtNew As Integer)
End Interface

[InterfaceId("CA04B7E6-0D21-11d1-8CC5-00C04FC2B085")]
[OleAutomation(False)]
Interface IObjectIdentity Extends IUnknown
    Sub IsEqualObject(ByVal punk As IUnknown)
End Interface

[InterfaceId("c5598e60-b307-11d1-b27d-006008c3fbfb")]
[OleAutomation(False)]
Interface ICanHandleException Extends IUnknown
    Sub CanHandleException(pExcepInfo As EXCEPINFO, pvar As Variant)
End Interface

[InterfaceId("10E2414A-EC59-49d2-BC51-5ADD2C36FEBC")]
[OleAutomation(False)]
Interface IProvideRuntimeContext Extends IUnknown
    Sub GetCurrentSourceContext(pdwContext As LongPtr, pfExecuting As Boolean)
End Interface



Module wdTypelib
Public Type DISPPARAMS
    rgvarg As LongPtr
    rgdispidNamedArgs As LongPtr
    cArgs As Long
    cNamedArgs As Long
End Type

Public Enum DispExInputFlags
    fdexNameCaseSensitive = &H00000001
    fdexNameEnsure = &H00000002
    fdexNameImplicit = &H00000004
    fdexNameCaseInsensitive = &H00000008
    fdexNameInternal = &H00000010
    fdexNameNoDynamicProperties = &H00000020
End Enum
Public Enum DispExOutputFlags
    fdexPropCanGet = &H00000001
    fdexPropCannotGet = &H00000002
    fdexPropCanPut = &H00000004
    fdexPropCannotPut = &H00000008
    fdexPropCanPutRef = &H00000010
    fdexPropCannotPutRef = &H00000020
    fdexPropNoSideEffects = &H00000040
    fdexPropDynamicType = &H00000080
    fdexPropCanCall = &H00000100
    fdexPropCannotCall = &H00000200
    fdexPropCanConstruct = &H00000400
    fdexPropCannotConstruct = &H00000800
    fdexPropCanSourceEvents = &H00001000
    fdexPropCannotSourceEvents = &H00002000
    grfdexPropCanAll = (fdexPropCanGet Or fdexPropCanPut Or fdexPropCanPutRef Or fdexPropCanCall Or fdexPropCanConstruct Or fdexPropCanSourceEvents)
    grfdexPropCannotAll = (fdexPropCannotGet Or fdexPropCannotPut Or fdexPropCannotPutRef Or fdexPropCannotCall Or fdexPropCannotConstruct Or fdexPropCannotSourceEvents)
    grfdexPropExtraAll = (fdexPropNoSideEffects Or fdexPropDynamicType)
    grfdexPropAll = (grfdexPropCanAll Or grfdexPropCannotAll Or grfdexPropExtraAll)
End Enum
Public Enum DispExGetNextFlags
    fdexEnumDefault = &H00000001
    fdexEnumAll = &H00000002
End Enum

Public Enum DispatchTypes
    DISPATCH_METHOD = &H1
    DISPATCH_PROPERTYGET = &H2
    DISPATCH_PROPERTYPUT = &H4
    DISPATCH_PROPERTYPUTREF = &H8
    DISPATCH_CONSTRUCT = &H4000
End Enum

Public Type LICINFO
    cbLicInfo As Long
    fRuntimeKeyAvail As Long
    fLicVerified As Long
End Type

Public Type CONNECTDATA
    pUnk As Object
    dwCookie As Long
End Type

Public Enum IMPLTYPE
    IMPLTYPEFLAG_FDEFAULT = (&H1)
    IMPLTYPEFLAG_FSOURCE = (&H2)
    IMPLTYPEFLAG_FRESTRICTED = (&H4)
    IMPLTYPEFLAG_FDEFAULTVTABLE = (&H8)
End Enum

Public Enum TYPEKIND
    TKIND_ENUM = 0
    TKIND_RECORD = 1
    TKIND_MODULE = 2
    TKIND_INTERFACE = 3
    TKIND_DISPATCH = 4
    TKIND_COCLASS = 5
    TKIND_ALIAS = 6
    TKIND_UNION = 7
    TKIND_MAX = 8
End Enum

Public Enum VARKIND
    VAR_PERINSTANCE = 0
    VAR_STATIC = 1
    VAR_CONST = 2
    VAR_DISPATCH = 3
End Enum

Public Enum VARFLAGS
    VARFLAG_FREADONLY = &H1
    VARFLAG_FSOURCE = &H2
    VARFLAG_FBINDABLE = &H4
    VARFLAG_FREQUESTEDIT = &H8
    VARFLAG_FDISPLAYBIND = &H10
    VARFLAG_FDEFAULTBIND = &H20
    VARFLAG_FHIDDEN = &H40
    VARFLAG_FRESTRICTED = &H80
    VARFLAG_FDEFAULTCOLLELEM = &H100
    VARFLAG_FUIDEFAULT = &H200
    VARFLAG_FNONBROWSABLE = &H400
    VARFLAG_FREPLACEABLE = &H800
    VARFLAG_FIMMEDIATEBIND = &H1000
End Enum

Public Enum CALLCONV
    CC_FASTCALL = 0
    CC_CDECL = 1
    CC_MSCPASCAL = 2
    CC_PASCAL = 2
    CC_MACPASCAL = 3
    CC_STDCALL = 4
    CC_FPFASTCALL = 5
    CC_SYSCALL = 6
    CC_MPWCDECL = 7
    CC_MPWPASCAL = 8
    CC_MAX = 9
End Enum

Public Enum FUNCKIND
    FUNC_VIRTUAL = 0
    FUNC_PUREVIRTUAL = 1
    FUNC_NONVIRTUAL = 2
    FUNC_STATIC = 3
    FUNC_DISPATCH = 4
End Enum

Public Enum FUNCFLAGS
    FUNCFLAG_FRESTRICTED = &H1
    FUNCFLAG_FSOURCE = &H2
    FUNCFLAG_FBINDABLE = &H4
    FUNCFLAG_FREQUESTEDIT = &H8
    FUNCFLAG_FDISPLAYBIND = &H10
    FUNCFLAG_FDEFAULTBIND = &H20
    FUNCFLAG_FHIDDEN = &H40
    FUNCFLAG_FUSESGETLASTERROR = &H80
    FUNCFLAG_FDEFAULTCOLLELEM = &H100
    FUNCFLAG_FUIDEFAULT = &H200
    FUNCFLAG_FNONBROWSABLE = &H400
    FUNCFLAG_FREPLACEABLE = &H800
    FUNCFLAG_FIMMEDIATEBIND = &H1000
End Enum

Public Enum INVOKEKIND
    INVOKE_FUNC = 1
    INVOKE_PROPERTYGET = 2
    INVOKE_PROPERTYPUT = 4
    INVOKE_PROPERTYPUTREF = 8
End Enum

Public Type PARAMDESC
    pPARAMDESCEX As LongPtr
    wParamFlags As Integer
End Type

Public Enum PARAMFLAG
    PARAMFLAG_NONE = &H00
    PARAMFLAG_FIN = &H01
    PARAMFLAG_FOUT = &H02
    PARAMFLAG_FLCID = &H04
    PARAMFLAG_FRETVAL = &H08
    PARAMFLAG_FOPT = &H10
    PARAMFLAG_FHASDEFAULT = &H20
    PARAMFLAG_FHASCUSTDATA = &H40
End Enum

Public Type TYPEDESC
    pTypeDesc As LongPtr
    vt As Integer
End Type

Public Type ELEMDESC
    tdesc As TYPEDESC
    paramdesc As PARAMDESC
End Type

Public Enum IDL_FLAGS
    IDLFLAG_NONE = (PARAMFLAG_NONE)
    IDLFLAG_FIN = (PARAMFLAG_FIN)
    IDLFLAG_FOUT = (PARAMFLAG_FOUT)
    IDLFLAG_FLCID = (PARAMFLAG_FLCID)
    IDLFLAG_FRETVAL = (PARAMFLAG_FRETVAL)
End Enum
Public Type IDLDESC
    dwReserved As LongPtr
    wIDLFlags As Integer
End Type

Public Type TYPEATTR
    iid As UUID
    lcid As Long
    dwReserved As Long
    memidConstructor As Long
    memidDestructor As Long
    lpstrSchema As LongPtr
    cbSizeInstance As Long
    TYPEKIND As TYPEKIND
    cFuncs As Integer
    cVars As Integer
    cImplTypes As Integer
    cbSizeVft As Integer
    cbAlignment As Integer
    wTypeFlags As Integer
    wMajorVerNum As Integer
    wMinorVerNum As Integer
    tdescAlias As TYPEDESC
    idldescType As IDLDESC
End Type

Public Type FUNCDESC
    memid As Long
    lprgscode As LongPtr
    lprgELEMDESCParam As LongPtr
    FUNCKIND As FUNCKIND
    invkind As INVOKEKIND
    callconv As CALLCONV
    cParams As Integer
    cParamsOpt As Integer
    oVft As Integer
    cScodes As Integer
    elemdescFunc As ELEMDESC
    wFuncFlags As Integer
End Type

Public Type VARDESC
    memid As Long
    lpstrSchema As LongPtr
    oInst_varValue As LongPtr
    elemdescVar As ELEMDESC
    wVarFlags As Integer
    VARKIND As VARKIND
End Type

Public Type CUSTDATAITEM
    iid As UUID
    varValue As Variant
End Type

Public Type CUSTDATA
    cCustData As Long
    prgCustData As LongPtr
End Type

Public Enum LIBFLAGS
    LIBFLAG_FRESTRICTED = &H1
    LIBFLAG_FCONTROL = &H2
    LIBFLAG_FHIDDEN = &H4
    LIBFLAG_FHASDISKIMAGE = &H8
End Enum
    
Public Enum TYPEFLAGS
    TYPEFLAG_FAPPOBJECT = &H01
    TYPEFLAG_FCANCREATE = &H02
    TYPEFLAG_FLICENSED = &H04
    TYPEFLAG_FPREDECLID = &H08
    TYPEFLAG_FHIDDEN = &H10
    TYPEFLAG_FCONTROL = &H20
    TYPEFLAG_FDUAL = &H40
    TYPEFLAG_FNONEXTENSIBLE = &H80
    TYPEFLAG_FOLEAUTOMATION = &H100
    TYPEFLAG_FRESTRICTED = &H200
    TYPEFLAG_FAGGREGATABLE = &H400
    TYPEFLAG_FREPLACEABLE = &H800
    TYPEFLAG_FDISPATCHABLE = &H1000
    TYPEFLAG_FREVERSEBIND = &H2000
    TYPEFLAG_FPROXY = &H4000
End Enum

Public Type TLIBATTR
    iid As UUID
    lcid As Long
    SYSKIND As SYSKIND
    wMajorVerNum As Integer
    wMinorVerNum As Integer
    /* [ TypeHint(LIBFLAGS) ] */ wLibFlags As Integer
End Type

Public Enum SYSKIND
    SYS_WIN16 = 0
    SYS_WIN32
    SYS_MAC
    SYS_WIN64
End Enum

Public Enum DESCKIND
    DESCKIND_MAX = 5
    DESCKIND_IMPLICITAPPOBJ = 4
    DESCKIND_TYPECOMP = 3
    DESCKIND_VARDESC = 2
    DESCKIND_FUNCDESC = 1
    DESCKIND_NONE = 0
End Enum

Public Enum CHANGEKIND
    CHANGEKIND_ADDMEMBER = 0
    CHANGEKIND_DELETEMEMBER = 1
    CHANGEKIND_SETNAMES = 2
    CHANGEKIND_SETDOCUMENTATION = 3
    CHANGEKIND_GENERAL = 4
    CHANGEKIND_INVALIDATE = 5
    CHANGEKIND_CHANGEFAILED = 6
    CHANGEKIND_MAX = 7
End Enum

End Module