
'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

'WinDevLib :: wdSensors : Sensor and location APIs


[InterfaceId("BD77DB67-45A8-42DC-8D00-6DCF15F8377A")]
[OleAutomation(False)]
Interface ISensorManager Extends stdole.IUnknown
    Sub GetSensorsByCategory(ByRef sensorCategory As UUID, ByRef ppSensorsFound As ISensorCollection)
    Sub GetSensorsByType(ByRef sensorType As UUID, ByRef ppSensorsFound As ISensorCollection)
    Sub GetSensorByID(ByRef sensorID As UUID, ByRef ppSensor As ISensor)
    Sub SetEventSink(ByVal pEvents As ISensorManagerEvents)
    Sub RequestPermissions(ByVal hParent As LongPtr, ByVal pSensors As ISensorCollection, ByVal fModal As BOOL)
End Interface

[InterfaceId("D5FB0A7F-E74E-44F5-8E02-4806863A274F")]
[OleAutomation(False)]
Interface ILocationPermissions Extends stdole.IUnknown
    Sub GetGlobalLocationPermission(ByRef pfEnabled As BOOL)
    Sub CheckLocationCapability(ByVal dwClientThreadId As Long)
End Interface

[InterfaceId("23571E11-E545-4DD8-A337-B89BF44B10DF")]
[OleAutomation(False)]
Interface ISensorCollection Extends stdole.IUnknown
    Sub GetAt(ByVal ulIndex As Long, ByRef ppSensor As ISensor)
    Sub GetCount(ByRef pCount As Long)
    Sub Add(ByVal pSensor As ISensor)
    Sub Remove(ByVal pSensor As ISensor)
    Sub RemoveByID(ByRef sensorID As UUID)
    Sub Clear()
End Interface

[InterfaceId("5FA08F80-2657-458E-AF75-46F73FA6AC5C")]
[OleAutomation(False)]
Interface ISensor Extends stdole.IUnknown
    Sub GetId(ByRef pid As UUID)
    Sub GetCategory(ByRef pSensorCategory As UUID)
    Sub GetType(ByRef pSensorType As UUID)
    Sub GetFriendlyName(ByRef pFriendlyName As String)
    Sub GetProperty(ByRef key As PROPERTYKEY, ByRef pProperty As Variant)
    Sub GetProperties(ByVal pKeys As IPortableDeviceKeyCollection, ByRef ppProperties As IPortableDeviceValues)
    Sub GetSupportedDataFields(ByRef ppDataFields As IPortableDeviceKeyCollection)
    Sub SetProperties(ByVal pProperties As IPortableDeviceValues, ByRef ppResults As IPortableDeviceValues)
    Sub SupportsDataField(ByRef key As PROPERTYKEY, ByRef pIsSupported As Boolean)
    Sub GetState(ByRef pState As SensorState)
    Sub GetData(ByRef ppDataReport As ISensorDataReport)
    Sub SupportsEvent(ByRef eventGuid As UUID, ByRef pIsSupported As Boolean)
    Sub GetEventInterest(ByRef ppValues As LongPtr, ByRef pCount As Long)
    Sub SetEventInterest(ByRef pValues As UUID, ByVal Count As Long)
    Sub SetEventSink(ByVal pEvents As ISensorEvents)
End Interface

[InterfaceId("0AB9DF9B-C4B5-4796-8898-0470706A2E1D")]
[OleAutomation(False)]
Interface ISensorDataReport Extends stdole.IUnknown
    Sub GetTimestamp(ByRef pTimeStamp As SYSTEMTIME)
    Sub GetSensorValue(ByRef pkey As PROPERTYKEY, ByRef pValue As Variant)
    Sub GetSensorValues(ByVal pKeys As IPortableDeviceKeyCollection, ByRef ppValues As IPortableDeviceValues)
End Interface

[InterfaceId("9B3B0B86-266A-4AAD-B21F-FDE5501001B7")]
[OleAutomation(False)]
Interface ISensorManagerEvents Extends stdole.IUnknown
    Sub OnSensorEnter(ByVal pSensor As ISensor, ByVal State As SensorState)
End Interface

[InterfaceId("5D8DCC91-4641-47E7-B7C3-B74F48A6C391")]
[OleAutomation(False)]
Interface ISensorEvents Extends stdole.IUnknown
    Sub OnStateChanged(ByVal pSensor As ISensor, ByVal State As SensorState)
    Sub OnDataUpdated(ByVal pSensor As ISensor, ByVal pNewData As ISensorDataReport)
    Sub OnEvent(ByVal pSensor As ISensor, ByRef eventId As UUID, ByVal pEventData As IPortableDeviceValues)
    Sub OnLeave(ByRef id As UUID)
End Interface

[CoClassId("77A1C827-FCD2-4689-8915-9D613CC5FA3E")]
[COMCreatable]
CoClass SensorManager
    [Default] Interface ISensorManager
End CoClass

[CoClassId("79C43ADB-A429-469F-AA39-2F2B74B75937")]
[COMCreatable]
CoClass SensorCollection
    [Default] Interface ISensorCollection
End CoClass

[CoClassId("E97CED00-523A-4133-BF6F-D3A2DAE7F6BA")]
[COMCreatable]
CoClass Sensor
    [Default] Interface ISensor
End CoClass

[CoClassId("4EA9D6EF-694B-4218-8816-CCDA8DA74BBA")]
[COMCreatable]
CoClass SensorDataReport
    [Default] Interface ISensorDataReport
End CoClass

[InterfaceId("C8B7F7EE-75D0-4DB9-B62D-7A0F369CA456")]
[OleAutomation(False)]
Interface ILocationReport Extends stdole.IUnknown
    Function GetSensorID() As UUID
    Function GetTimestamp() As SYSTEMTIME
    Function GetValue(ByRef pkey As PROPERTYKEY) As Variant
End Interface

[InterfaceId("7FED806D-0EF8-4F07-80AC-36A0BEAE3134")]
[OleAutomation(False)]
Interface ILatLongReport Extends ILocationReport
    Function GetLatitude() As Double
    Function GetLongitude() As Double
    Function GetErrorRadius() As Double
    Function GetAltitude() As Double
    Function GetAltitudeError() As Double
End Interface

[InterfaceId("C0B19F70-4ADF-445D-87F2-CAD8FD711792")]
[OleAutomation(False)]
Interface ICivicAddressReport Extends ILocationReport
    Function GetAddressLine1() As String
    Function GetAddressLine2() As String
    Function GetCity() As String
    Function GetStateProvince() As String
    Function GetPostalCode() As String
    Function GetCountryRegion() As String
    Function GetDetailLevel() As Long
End Interface

[InterfaceId("AB2ECE69-56D9-4F28-B525-DE1B0EE44237")]
[OleAutomation(False)]
Interface ILocation Extends stdole.IUnknown
    Sub RegisterForReport(ByVal pEvents As ILocationEvents, ByRef reportType As UUID, ByVal dwRequestedReportInterval As Long)
    Sub UnregisterForReport(ByRef reportType As UUID)
    Function GetReport(ByRef reportType As UUID) As ILocationReport
    Function GetReportStatus(ByRef reportType As UUID) As LOCATION_REPORT_STATUS
    Function GetReportInterval(ByRef reportType As UUID) As Long
    Sub SetReportInterval(ByRef reportType As UUID, ByVal millisecondsRequested As Long)
    Function GetDesiredAccuracy(ByRef reportType As UUID) As LOCATION_DESIRED_ACCURACY
    Sub SetDesiredAccuracy(ByRef reportType As UUID, ByVal desiredAccuracy As LOCATION_DESIRED_ACCURACY)
    Sub RequestPermissions(ByVal hParent As LongPtr, ByRef pReportTypes As UUID, ByVal Count As Long, ByVal fModal As BOOL)
End Interface

[InterfaceId("193E7729-AB6B-4B12-8617-7596E1BB191C")]
[OleAutomation(False)]
Interface ILocationPower Extends stdole.IUnknown
    Sub Connect()
    Sub Disconnect()
End Interface

[InterfaceId("A65AF77E-969A-4A2E-8ACA-33BB7CBB1235")]
[OleAutomation(False)]
Interface IDefaultLocation Extends stdole.IUnknown
    Sub SetReport(ByRef reportType As UUID, ByVal pLocationReport As ILocationReport)
    Function GetReport(ByRef reportType As UUID) As ILocationReport
End Interface

[InterfaceId("CAE02BBF-798B-4508-A207-35A7906DC73D")]
[OleAutomation(False)]
Interface ILocationEvents Extends stdole.IUnknown
    Sub OnLocationChanged(ByRef reportType As UUID, ByVal pLocationReport As ILocationReport)
    Sub OnStatusChanged(ByRef reportType As UUID, ByVal newStatus As LOCATION_REPORT_STATUS)
End Interface

[InterfaceId("8AE32723-389B-4A11-9957-5BDD48FC9617")]
[OleAutomation(False)]
Interface IDispLatLongReport Extends stdole.IDispatch
    Property Get Latitude() As Double
    Property Get Longitude() As Double
    Property Get ErrorRadius() As Double
    Property Get Altitude() As Double
    Property Get AltitudeError() As Double
    Property Get timestamp() As Date
End Interface

[InterfaceId("16FF1A34-9E30-42C3-B44D-E22513B5767A")]
[OleAutomation(False)]
Interface IDispCivicAddressReport Extends stdole.IDispatch
    Property Get AddressLine1() As String
    Property Get AddressLine2() As String
    Property Get City() As String
    Property Get StateProvince() As String
    Property Get PostalCode() As String
    Property Get CountryRegion() As String
    Property Get DetailLevel() As Long
    Property Get timestamp() As Date
End Interface

[InterfaceId("2DAEC322-90B2-47E4-BB08-0DA841935A6B")]
[OleAutomation(False)]
Interface ILocationReportFactory Extends stdole.IDispatch
    Sub ListenForReports(ByVal requestedReportInterval As Long)
    Sub StopListeningForReports()
    Property Get Status() As Long
    Property Get ReportInterval() As Long
    Property Let ReportInterval(ByVal pMilliseconds As Long)
    Property Get desiredAccuracy() As Long
    Property Let desiredAccuracy(ByVal pDesiredAccuracy As Long)
    Sub RequestPermissions(ByRef hwnd As Long)
End Interface

[InterfaceId("3F0804CB-B114-447D-83DD-390174EBB082")]
[OleAutomation(False)]
Interface ILatLongReportFactory Extends ILocationReportFactory
    Property Get LatLongReport() As IDispLatLongReport
End Interface

[InterfaceId("BF773B93-C64F-4BEE-BEB2-67C0B8DF66E0")]
[OleAutomation(False)]
Interface ICivicAddressReportFactory Extends ILocationReportFactory
    Property Get CivicAddressReport() As IDispCivicAddressReport
End Interface

[CoClassId("E5B8E079-EE6D-4E33-A438-C87F2E959254")]
[COMCreatable]
CoClass Location
    [Default] Interface ILocation
End CoClass

[CoClassId("8B7FBFE0-5CD7-494A-AF8C-283A65707506")]
[COMCreatable]
CoClass DefaultLocation
    [Default] Interface IDefaultLocation
End CoClass

[CoClassId("ED81C073-1F84-4CA8-A161-183C776BC651")]
[COMCreatable]
CoClass LatLongReport
    [Default] Interface ILatLongReport
End CoClass

[CoClassId("D39E7BDD-7D05-46B8-8721-80CF035F57D7")]
[COMCreatable]
CoClass CivicAddressReport
    [Default] Interface ICivicAddressReport
End CoClass

[InterfaceId("16EE6CB7-AB3C-424B-849F-269BE551FCBC")]
[OleAutomation(False)]
Interface ILatLongReportFactoryEvents Extends stdole.IDispatch
End Interface

[InterfaceId("C96039FF-72EC-4617-89BD-84D88BEDC722")]
[OleAutomation(False)]
Interface ICivicAddressReportFactoryEvents Extends stdole.IDispatch
End Interface

[CoClassId("9DCC3CC8-8609-4863-BAD4-03601F4C65E8")]
[COMCreatable]
CoClass LatLongReportFactory
    [Default] Interface ILatLongReportFactory
End CoClass

[CoClassId("2A11F42C-3E81-4AD4-9CBE-45579D89671A")]
[COMCreatable]
CoClass CivicAddressReportFactory
    [Default] Interface ICivicAddressReportFactory
End CoClass

[CoClassId("7A7C3277-8F84-4636-95B2-EBB5507FF77E")]
[COMCreatable]
CoClass DispLatLongReport
    [Default] Interface IDispLatLongReport
End CoClass

[CoClassId("4C596AEC-8544-4082-BA9F-EB0A7D8E65C6")]
[COMCreatable]
CoClass DispCivicAddressReport
    [Default] Interface IDispCivicAddressReport
End CoClass

Module wdSensors

Public Enum SensorState
    SENSOR_STATE_MIN = 0
    SENSOR_STATE_READY = 1
    SENSOR_STATE_NOT_AVAILABLE = 2
    SENSOR_STATE_NO_DATA = 3
    SENSOR_STATE_INITIALIZING = 4
    SENSOR_STATE_ACCESS_DENIED = 5
    SENSOR_STATE_ERROR = 6
    SENSOR_STATE_MAX = 7
End Enum

Public Enum SensorConnectionType
    SENSOR_CONNECTION_TYPE_PC_INTEGRATED = 0
    SENSOR_CONNECTION_TYPE_PC_ATTACHED = 1
    SENSOR_CONNECTION_TYPE_PC_EXTERNAL = 2
End Enum

Public Enum LOCATION_DESIRED_ACCURACY
    LOCATION_DESIRED_ACCURACY_DEFAULT = 0
    LOCATION_DESIRED_ACCURACY_HIGH = 1
End Enum

Public Enum LOCATION_POSITION_SOURCE
    LOCATION_POSITION_SOURCE_CELLULAR = 0
    LOCATION_POSITION_SOURCE_SATELLITE = 1
    LOCATION_POSITION_SOURCE_WIFI = 2
    LOCATION_POSITION_SOURCE_IPADDRESS = 3
    LOCATION_POSITION_SOURCE_UNKNOWN = 4
End Enum

Public Enum SimpleDeviceOrientation
    SIMPLE_DEVICE_ORIENTATION_NOT_ROTATED = 0
    SIMPLE_DEVICE_ORIENTATION_ROTATED_90 = 1
    SIMPLE_DEVICE_ORIENTATION_ROTATED_180 = 2
    SIMPLE_DEVICE_ORIENTATION_ROTATED_270 = 3
    SIMPLE_DEVICE_ORIENTATION_ROTATED_FACE_UP = 4
    SIMPLE_DEVICE_ORIENTATION_ROTATED_FACE_DOWN = 5
End Enum

Public Enum MagnetometerAccuracy
    MAGNETOMETER_ACCURACY_UNKNOWN = 0
    MAGNETOMETER_ACCURACY_UNRELIABLE = 1
    MAGNETOMETER_ACCURACY_APPROXIMATE = 2
    MAGNETOMETER_ACCURACY_HIGH = 3
End Enum

Public Enum LOCATION_REPORT_STATUS
    REPORT_NOT_SUPPORTED = 0
    REPORT_ERROR = 1
    REPORT_ACCESS_DENIED = 2
    REPORT_INITIALIZING = 3
    REPORT_RUNNING = 4
End Enum


End Module