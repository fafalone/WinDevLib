'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

'DXVA, DXVA2, DXVA-HD, and EVR9 (evr9.h)

#If WDL_NO_DIRECTX = 0 Then

[InterfaceId("694036AC-542A-4A3A-9A32-53BC20002C1B")]
[OleAutomation(False)]
Interface IDirect3DVideoDevice9 Extends IUnknown
    Sub CreateSurface(ByVal Width As Long, ByVal Height As Long, ByVal BackBuffers As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByVal Usage As Long, ByRef ppSurface As IDirect3DSurface9, ByRef pSharedHandle As LongPtr)
    Sub GetDXVACompressedBufferInfo(ByRef pGuid As UUID, ByRef pUncompData As DXVAUncompDataInfo, ByRef pNumBuffers As Long, ByRef pBufferInfo As DXVACompBufferInfo)
    Sub GetDXVAGuids(ByRef pNumGuids As Long, ByRef pGuids As UUID)
    Sub GetDXVAInternalInfo(ByRef pGuid As UUID, ByRef pUncompData As DXVAUncompDataInfo, ByRef pMemoryUsed As Long)
    Sub GetUncompressedDXVAFormats(ByRef pGuid As UUID, ByRef pNumFormats As Long, ByRef pFormats As D3DFORMAT)
    Sub CreateDXVADevice(ByRef pGuid As UUID, ByRef pUncompData As DXVAUncompDataInfo, pData As Any, ByVal DataSize As Long, ByRef ppDXVADevice As IDirect3DDXVADevice9)
End Interface

[InterfaceId("9F00C3D3-5AB6-465F-B955-9F0EBB2C5606")]
[OleAutomation(False)]
Interface IDirect3DDXVADevice9 Extends IUnknown
    [Description("Begins a frame")]
    Sub BeginFrame(ByVal pDstSurface As IDirect3DSurface9, ByVal SizeInputData As Long, pInputData As Any, ByRef pSizeOutputData As Long, pOutputData As Any)
    Sub EndFrame(ByVal SizeMiscData As Long, pMiscData As Any)
    Sub Execute(ByVal FunctionNum As Long, pInputData As Any, ByVal InputSize As Long, OuputData As Any, ByVal OutputSize As Long, ByVal NumBuffers As Long, ByRef pBufferInfo As DXVABufferInfo)
    Sub QueryStatus(ByVal pSurface As IDirect3DSurface9, ByVal Flags As Long)
End Interface


[InterfaceId("A0CADE0F-06D5-4CF4-A1C7-F3CDD725AA75")]
 [OleAutomation(False)]
 Interface IDirect3DDeviceManager9 Extends stdole.IUnknown
     Sub ResetDevice(ByVal pDevice As IDirect3DDevice9, ByVal resetToken As Long)
     Sub OpenDeviceHandle(ByRef phDevice As LongPtr)
     Sub CloseDeviceHandle(ByVal hDevice As LongPtr)
     Sub TestDevice(ByVal hDevice As LongPtr)
     Sub LockDevice(ByVal hDevice As LongPtr, ByRef ppDevice As IDirect3DDevice9, ByVal fBlock As BOOL)
     Sub UnlockDevice(ByVal hDevice As LongPtr, ByVal fSaveState As BOOL)
     Sub GetVideoService(ByVal hDevice As LongPtr, ByRef riid As UUID, ByRef ppService As Any)
 End Interface

 [InterfaceId("FC51A550-D5E7-11D9-AF55-00054E43FF02")]
 [OleAutomation(False)]
 Interface IDirectXVideoAccelerationService Extends stdole.IUnknown
     Sub CreateSurface(ByVal width As Long, ByVal Height As Long, ByVal BackBuffers As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByVal Usage As Long, ByVal DxvaType As DXVA2RenderTargets, ByRef ppSurface As IDirect3DSurface9, ByVal pSharedHandle As LongPtr)
 End Interface

 [InterfaceId("FC51A551-D5E7-11D9-AF55-00054E43FF02")]
 [OleAutomation(False)]
 Interface IDirectXVideoDecoderService Extends IDirectXVideoAccelerationService
     Sub GetDecoderDeviceGuids(ByRef pCount As Long, ByRef pGuids As LongPtr)
     Sub GetDecoderRenderTargets(ByRef guid As UUID, ByRef pCount As Long, ByRef pFormats As LongPtr)
     Sub GetDecoderConfigurations(ByRef guid As UUID, ByRef pVideoDesc As DXVA2_VideoDesc, ByVal pReserved As LongPtr, ByRef pCount As Long, ByRef ppConfigs As LongPtr)
     Sub CreateVideoDecoder(ByRef guid As UUID, ByRef pVideoDesc As DXVA2_VideoDesc, ByRef pConfig As DXVA2_ConfigPictureDecode, ByRef ppDecoderRenderTargets As IDirect3DSurface9, ByVal NumRenderTargets As Long, ByRef ppDecode As IDirectXVideoDecoder)
 End Interface

 [InterfaceId("FC51A552-D5E7-11D9-AF55-00054E43FF02")]
 [OleAutomation(False)]
 Interface IDirectXVideoProcessorService Extends IDirectXVideoAccelerationService
     Sub RegisterVideoProcessorSoftwareDevice(ByVal pCallbacks As LongPtr)
     Sub GetVideoProcessorDeviceGuids(ByRef pVideoDesc As DXVA2_VideoDesc, ByRef pCount As Long, ByRef pGuids As LongPtr)
     Sub GetVideoProcessorRenderTargets(ByRef VideoProcDeviceGuid As UUID, ByRef pVideoDesc As DXVA2_VideoDesc, ByRef pCount As Long, ByRef pFormats As LongPtr)
     Sub GetVideoProcessorSubStreamFormats(ByRef VideoProcDeviceGuid As UUID, ByRef pVideoDesc As DXVA2_VideoDesc, ByVal RenderTargetFormat As D3DFORMAT, ByRef pCount As Long, ByRef pFormats As LongPtr)
     Sub GetVideoProcessorCaps(ByRef VideoProcDeviceGuid As UUID, ByRef pVideoDesc As DXVA2_VideoDesc, ByVal RenderTargetFormat As D3DFORMAT, ByRef pCaps As DXVA2_VideoProcessorCaps)
     Sub GetProcAmpRange(ByRef VideoProcDeviceGuid As UUID, ByRef pVideoDesc As DXVA2_VideoDesc, ByVal RenderTargetFormat As D3DFORMAT, ByVal ProcAmpCap As Long, ByRef pRange As DXVA2_ValueRange)
     Sub GetFilterPropertyRange(ByRef VideoProcDeviceGuid As UUID, ByRef pVideoDesc As DXVA2_VideoDesc, ByVal RenderTargetFormat As D3DFORMAT, ByVal FilterSetting As Long, ByRef pRange As DXVA2_ValueRange)
     Sub CreateVideoProcessor(ByRef VideoProcDeviceGuid As UUID, ByRef pVideoDesc As DXVA2_VideoDesc, ByVal RenderTargetFormat As D3DFORMAT, ByVal MaxNumSubStreams As Long, ByRef ppVidProcess As IDirectXVideoProcessor)
 End Interface

 [InterfaceId("F2B0810A-FD00-43C9-918C-DF94E2D8EF7D")]
 [OleAutomation(False)]
 Interface IDirectXVideoDecoder Extends stdole.IUnknown
     Sub GetVideoDecoderService(ByRef ppService As IDirectXVideoDecoderService)
     Sub GetCreationParameters(ByRef pDeviceGuid As Any, ByRef pVideoDesc As Any, ByRef pConfig As Any, ByRef pDecoderRenderTargets As LongPtr, ByRef pNumSurfaces As Long)
     Sub GetBuffer(ByVal BufferType As Long, ByRef ppBuffer As LongPtr, ByRef pBufferSize As Long)
     Sub ReleaseBuffer(ByVal BufferType As Long)
     Sub BeginFrame(ByVal pRenderTarget As IDirect3DSurface9, ByRef pvPVPData As Any)
     Sub EndFrame(ByRef pHandleComplete As LongPtr)
     Sub Execute(ByRef pExecuteParams As DXVA2_DecodeExecuteParams)
 End Interface

 [InterfaceId("8C3A39F0-916E-4690-804F-4C8001355D25")]
 [OleAutomation(False)]
 Interface IDirectXVideoProcessor Extends stdole.IUnknown
     Sub GetVideoProcessorService(ByRef ppService As IDirectXVideoProcessorService)
     Sub GetCreationParameters(ByRef pDeviceGuid As Any, ByRef pVideoDesc As Any, ByRef pRenderTargetFormat As D3DFORMAT, ByRef pMaxNumSubStreams As Long)
     Sub GetVideoProcessorCaps(ByRef pCaps As DXVA2_VideoProcessorCaps)
     Sub GetProcAmpRange(ByVal ProcAmpCap As Long, ByRef pRange As DXVA2_ValueRange)
     Sub GetFilterPropertyRange(ByVal FilterSetting As Long, ByRef pRange As DXVA2_ValueRange)
     Sub VideoProcessBlt(ByVal pRenderTarget As IDirect3DSurface9, ByRef pBltParams As DXVA2_VideoProcessBltParams, ByRef pSamples As DXVA2_VideoSample, ByVal NumSamples As Long, ByRef pHandleComplete As LongPtr)
 End Interface



 [InterfaceId("B7F916DD-DB3B-49C1-84D7-E45EF99EC726")]
 [OleAutomation(False)]
 Interface IDirectXVideoMemoryConfiguration Extends stdole.IUnknown
     Sub GetAvailableSurfaceTypeByIndex(ByVal dwTypeIndex As Long, ByRef pdwType As DXVA2_SurfaceType)
     Sub SetSurfaceType(ByVal dwType As DXVA2_SurfaceType)
 End Interface

 
 
 [InterfaceId("95F12DFD-D77E-49BE-815F-57D579634D6D")]
 [OleAutomation(False)]
 [Description("DXVA-HD Device Interface")]
 Interface IDXVAHD_Device Extends stdole.IUnknown
     Sub CreateVideoSurface(ByVal width As Long, ByVal Height As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByVal Usage As Long, ByVal type As DXVAHD_SURFACE_TYPE, ByVal NumSurfaces As Long, ByRef ppSurfaces As IDirect3DSurface9, ByRef pSharedHandle As LongPtr)
     Sub GetVideoProcessorDeviceCaps(ByRef pCaps As DXVAHD_VPDEVCAPS)
     Sub GetVideoProcessorOutputFormats(ByVal Count As Long, ByRef pFormats As D3DFORMAT)
     Sub GetVideoProcessorInputFormats(ByVal Count As Long, ByRef pFormats As D3DFORMAT)
     Sub GetVideoProcessorCaps(ByVal Count As Long, ByRef pCaps As DXVAHD_VPCAPS)
     Sub GetVideoProcessorCustomRates(ByRef pVPGuid As UUID, ByVal Count As Long, ByRef pRates As DXVAHD_CUSTOM_RATE_DATA)
     Sub GetVideoProcessorFilterRange(ByVal Filter As DXVAHD_FILTER, ByRef pRange As DXVAHD_FILTER_RANGE_DATA)
     Sub CreateVideoProcessor(ByRef pVPGuid As UUID, ByRef ppVideoProcessor As IDXVAHD_VideoProcessor)
 End Interface

 [InterfaceId("95F4EDF4-6E03-4CD7-BE1B-3075D665AA52")]
 [OleAutomation(False)]
 [Description("DXVA-HD Video Processor Interface")]
 Interface IDXVAHD_VideoProcessor Extends stdole.IUnknown
     Sub SetVideoProcessBltState(ByVal State As DXVAHD_BLT_STATE, ByVal dataSize As Long, ByRef pData As Any)
     Sub GetVideoProcessBltState(ByVal State As DXVAHD_BLT_STATE, ByVal dataSize As Long, ByRef pData As Any)
     Sub SetVideoProcessStreamState(ByVal StreamNumber As Long, ByVal State As DXVAHD_STREAM_STATE, ByVal dataSize As Long, ByRef pData As Any)
     Sub GetVideoProcessStreamState(ByVal StreamNumber As Long, ByVal State As DXVAHD_STREAM_STATE, ByVal dataSize As Long, ByRef pData As Any)
     Sub VideoProcessBltHD(ByVal pOutputSurface As IDirect3DSurface9, ByVal OutputFrame As Long, ByVal StreamCount As Long, ByRef pStreams As DXVAHD_STREAM_DATA)
 End Interface
 
 [InterfaceId("D0CFE38B-93E7-4772-8957-0400C49A4485")]
 [OleAutomation(False)]
 Interface IEVRVideoStreamControl Extends stdole.IUnknown
     Sub SetStreamActiveState(ByVal fActive As BOOL)
     Sub GetStreamActiveState(ByRef lpfActive As BOOL)
 End Interface

 [InterfaceId("6AB0000C-FECE-4D1F-A2AC-A9573530656E")]
 [OleAutomation(False)]
 Interface IMFVideoProcessor Extends stdole.IUnknown
     Sub GetAvailableVideoProcessorModes(ByRef lpdwNumProcessingModes As Long, ByRef ppVideoProcessingModes As LongPtr)
     Sub GetVideoProcessorCaps(ByRef lpVideoProcessorMode As UUID, ByRef lpVideoProcessorCaps As DXVA2_VideoProcessorCaps)
     Sub GetVideoProcessorMode(ByRef lpMode As UUID)
     Sub SetVideoProcessorMode(ByRef lpMode As UUID)
     Sub GetProcAmpRange(ByVal dwProperty As DXVA2_ProcAmp, ByRef pPropRange As DXVA2_ValueRange)
     Sub GetProcAmpValues(ByVal dwFlags As DXVA2_ProcAmp, ByRef values As DXVA2_ProcAmpValues)
     Sub SetProcAmpValues(ByVal dwFlags As DXVA2_ProcAmp, ByRef pValues As DXVA2_ProcAmpValues)
     Sub GetFilteringRange(ByVal dwProperty As DXVA2_ImageFilters, ByRef pPropRange As DXVA2_ValueRange)
     Sub GetFilteringValue(ByVal dwProperty As DXVA2_ImageFilters, ByRef pValue As DXVA2_Fixed32)
     Sub SetFilteringValue(ByVal dwProperty As DXVA2_ImageFilters, ByRef pValue As DXVA2_Fixed32)
     Sub GetBackgroundColor(ByRef lpClrBkg As Long)
     Sub SetBackgroundColor(ByVal ClrBkg As Long)
 End Interface
 
 [InterfaceId("814C7B20-0FDB-4EEC-AF8F-F957C8F69EDC")]
 [OleAutomation(False)]
 Interface IMFVideoMixerBitmap Extends stdole.IUnknown
     Sub SetAlphaBitmap(ByRef pBmpParms As MFVideoAlphaBitmap)
     Sub ClearAlphaBitmap()
     Sub UpdateAlphaBitmapParameters(ByRef pBmpParms As MFVideoAlphaBitmapParams)
     Sub GetAlphaBitmapParameters(ByRef pBmpParms As MFVideoAlphaBitmapParams)
 End Interface
 

Module wdDXVA
    
Public Type DXVA2_ExtendedFormat
    'union
    '{
    '    struct
    '    {
    '        UINT SampleFormat : 8;
    '        UINT VideoChromaSubsampling : 4;
    '        UINT NominalRange : 3;
    '        UINT VideoTransferMatrix : 3;
    '        UINT VideoLighting : 4;
    '        UINT VideoPrimaries : 5;
    '        UINT VideoTransferFunction : 5;
    '    };
    value As Long
    '};
End Type

Public Enum DXVA2_SampleFormat
    DXVA2_SampleFormatMask = &Hff
    DXVA2_SampleUnknown = 0
    DXVA2_SampleProgressiveFrame = 2
    DXVA2_SampleFieldInterleavedEvenFirst = 3
    DXVA2_SampleFieldInterleavedOddFirst = 4
    DXVA2_SampleFieldSingleEven = 5
    DXVA2_SampleFieldSingleOdd = 6
    DXVA2_SampleSubStream = 7
End Enum

Public Enum DXVA2_VideoChromaSubSampling
    DXVA2_VideoChromaSubsamplingMask = &Hf
    DXVA2_VideoChromaSubsampling_Unknown = 0
    DXVA2_VideoChromaSubsampling_ProgressiveChroma = &H8
    DXVA2_VideoChromaSubsampling_Horizontally_Cosited = &H4
    DXVA2_VideoChromaSubsampling_Vertically_Cosited = &H2
    DXVA2_VideoChromaSubsampling_Vertically_AlignedChromaPlanes = &H1
    DXVA2_VideoChromaSubsampling_MPEG2 = (DXVA2_VideoChromaSubsampling_Horizontally_Cosited Or DXVA2_VideoChromaSubsampling_Vertically_AlignedChromaPlanes)
    DXVA2_VideoChromaSubsampling_MPEG1 = DXVA2_VideoChromaSubsampling_Vertically_AlignedChromaPlanes
    DXVA2_VideoChromaSubsampling_DV_PAL = (DXVA2_VideoChromaSubsampling_Horizontally_Cosited Or DXVA2_VideoChromaSubsampling_Vertically_Cosited)
    DXVA2_VideoChromaSubsampling_Cosited = ((DXVA2_VideoChromaSubsampling_Horizontally_Cosited Or DXVA2_VideoChromaSubsampling_Vertically_Cosited) Or DXVA2_VideoChromaSubsampling_Vertically_AlignedChromaPlanes)
End Enum

Public Enum DXVA2_NominalRange
    DXVA2_NominalRangeMask = &H7
    DXVA2_NominalRange_Unknown = 0
    DXVA2_NominalRange_Normal = 1
    DXVA2_NominalRange_Wide = 2
    DXVA2_NominalRange_0_255 = 1
    DXVA2_NominalRange_16_235 = 2
    DXVA2_NominalRange_48_208 = 3
End Enum

Public Enum DXVA2_VideoTransferMatrix
    DXVA2_VideoTransferMatrixMask = &H7
    DXVA2_VideoTransferMatrix_Unknown = 0
    DXVA2_VideoTransferMatrix_BT709 = 1
    DXVA2_VideoTransferMatrix_BT601 = 2
    DXVA2_VideoTransferMatrix_SMPTE240M = 3
End Enum

Public Enum DXVA2_VideoLighting
    DXVA2_VideoLightingMask = &Hf
    DXVA2_VideoLighting_Unknown = 0
    DXVA2_VideoLighting_bright = 1
    DXVA2_VideoLighting_office = 2
    DXVA2_VideoLighting_dim = 3
    DXVA2_VideoLighting_dark = 4
End Enum

Public Enum DXVA2_VideoPrimaries
    DXVA2_VideoPrimariesMask = &H1f
    DXVA2_VideoPrimaries_Unknown = 0
    DXVA2_VideoPrimaries_reserved = 1
    DXVA2_VideoPrimaries_BT709 = 2
    DXVA2_VideoPrimaries_BT470_2_SysM = 3
    DXVA2_VideoPrimaries_BT470_2_SysBG = 4
    DXVA2_VideoPrimaries_SMPTE170M = 5
    DXVA2_VideoPrimaries_SMPTE240M = 6
    DXVA2_VideoPrimaries_EBU3213 = 7
    DXVA2_VideoPrimaries_SMPTE_C = 8
End Enum

Public Enum DXVA2_VideoTransferFunction
    DXVA2_VideoTransFuncMask = &H1f
    DXVA2_VideoTransFunc_Unknown = 0
    DXVA2_VideoTransFunc_10 = 1
    DXVA2_VideoTransFunc_18 = 2
    DXVA2_VideoTransFunc_20 = 3
    DXVA2_VideoTransFunc_22 = 4
    DXVA2_VideoTransFunc_709 = 5
    DXVA2_VideoTransFunc_240M = 6
    DXVA2_VideoTransFunc_sRGB = 7
    DXVA2_VideoTransFunc_28 = 8
    ' 
    '  Deprecated labels - please use the ones in the DXVA2_VideoTransferFunction enum.
    ' 
    DXVA2_VideoTransFunc_22_709 = DXVA2_VideoTransFunc_709
    DXVA2_VideoTransFunc_22_240M = DXVA2_VideoTransFunc_240M
    DXVA2_VideoTransFunc_22_8bit_sRGB = DXVA2_VideoTransFunc_sRGB
End Enum

Public Type DXVA2_Frequency
    Numerator As Long
    Denominator As Long
End Type

Public Type DXVA2_VideoDesc
    SampleWidth As Long
    SampleHeight As Long
    SampleFormat As DXVA2_ExtendedFormat
    Format As D3DFORMAT
    InputSampleFreq As DXVA2_Frequency
    OutputFrameFreq As DXVA2_Frequency
    UABProtectionLevel As Long
    Reserved As Long
End Type

Public Enum DXVA2_DeinterlaceTech
    DXVA2_DeinterlaceTech_Unknown = 0
    DXVA2_DeinterlaceTech_BOBLineReplicate = &H1
    DXVA2_DeinterlaceTech_BOBVerticalStretch = &H2
    DXVA2_DeinterlaceTech_BOBVerticalStretch4Tap = &H4
    DXVA2_DeinterlaceTech_MedianFiltering = &H8
    DXVA2_DeinterlaceTech_EdgeFiltering = &H10
    DXVA2_DeinterlaceTech_FieldAdaptive = &H20
    DXVA2_DeinterlaceTech_PixelAdaptive = &H40
    DXVA2_DeinterlaceTech_MotionVectorSteered = &H80
    DXVA2_DeinterlaceTech_InverseTelecine = &H100
    DXVA2_DeinterlaceTech_Mask = &H1ff
End Enum

Public Enum DXVA2_ImageFilters
    DXVA2_NoiseFilterLumaLevel = 1
    DXVA2_NoiseFilterLumaThreshold = 2
    DXVA2_NoiseFilterLumaRadius = 3
    DXVA2_NoiseFilterChromaLevel = 4
    DXVA2_NoiseFilterChromaThreshold = 5
    DXVA2_NoiseFilterChromaRadius = 6
    DXVA2_DetailFilterLumaLevel = 7
    DXVA2_DetailFilterLumaThreshold = 8
    DXVA2_DetailFilterLumaRadius = 9
    DXVA2_DetailFilterChromaLevel = 10
    DXVA2_DetailFilterChromaThreshold = 11
    DXVA2_DetailFilterChromaRadius = 12
End Enum

Public Enum DXVA2_NoiseFilterTech
    DXVA2_NoiseFilterTech_Unsupported = 0
    DXVA2_NoiseFilterTech_Unknown = &H1
    DXVA2_NoiseFilterTech_Median = &H2
    DXVA2_NoiseFilterTech_Temporal = &H4
    DXVA2_NoiseFilterTech_BlockNoise = &H8
    DXVA2_NoiseFilterTech_MosquitoNoise = &H10
    DXVA2_NoiseFilterTech_Mask = &H1f
End Enum

Public Enum DXVA2_DetailFilterTech
    DXVA2_DetailFilterTech_Unsupported = 0
    DXVA2_DetailFilterTech_Unknown = &H1
    DXVA2_DetailFilterTech_Edge = &H2
    DXVA2_DetailFilterTech_Sharpening = &H4
    DXVA2_DetailFilterTech_Mask = &H7
End Enum

Public Enum DXVA2_ProcAmp
    DXVA2_ProcAmp_None = 0
    DXVA2_ProcAmp_Brightness = &H1
    DXVA2_ProcAmp_Contrast = &H2
    DXVA2_ProcAmp_Hue = &H4
    DXVA2_ProcAmp_Saturation = &H8
    DXVA2_ProcAmp_Mask = &Hf
End Enum

Public Enum DXVA2_VideoProcess
    DXVA2_VideoProcess_None = 0
    DXVA2_VideoProcess_YUV2RGB = &H1
    DXVA2_VideoProcess_StretchX = &H2
    DXVA2_VideoProcess_StretchY = &H4
    DXVA2_VideoProcess_AlphaBlend = &H8
    DXVA2_VideoProcess_SubRects = &H10
    DXVA2_VideoProcess_SubStreams = &H20
    DXVA2_VideoProcess_SubStreamsExtended = &H40
    DXVA2_VideoProcess_YUV2RGBExtended = &H80
    DXVA2_VideoProcess_AlphaBlendExtended = &H100
    DXVA2_VideoProcess_Constriction = &H200
    DXVA2_VideoProcess_NoiseFilter = &H400
    DXVA2_VideoProcess_DetailFilter = &H800
    DXVA2_VideoProcess_PlanarAlpha = &H1000
    DXVA2_VideoProcess_LinearScaling = &H2000
    DXVA2_VideoProcess_GammaCompensated = &H4000
    DXVA2_VideoProcess_MaintainsOriginalFieldData = &H8000&
    DXVA2_VideoProcess_Mask = &Hffff&
End Enum

Public Enum DXVA2_VPDev
    DXVA2_VPDev_HardwareDevice = &H1
    DXVA2_VPDev_EmulatedDXVA1 = &H2
    DXVA2_VPDev_SoftwareDevice = &H4
    DXVA2_VPDev_Mask = &H7
End Enum

Public Enum DXVA2_SampleData
    DXVA2_SampleData_RFF = &H1
    DXVA2_SampleData_TFF = &H2
    DXVA2_SampleData_RFF_TFF_Present = &H4
    DXVA2_SampleData_Mask = &Hffff&
End Enum

Public Enum DXVA2_DestData
    DXVA2_DestData_RFF = &H1
    DXVA2_DestData_TFF = &H2
    DXVA2_DestData_RFF_TFF_Present = &H4
    DXVA2_DestData_Mask = &Hffff&
End Enum

Public Type DXVA2_VideoProcessorCaps
    DeviceCaps As DXVA2_VPDev
    InputPool As D3DPOOL
    NumForwardRefSamples As Long
    NumBackwardRefSamples As Long
    Reserved As Long
    DeinterlaceTechnology As DXVA2_DeinterlaceTech
    ProcAmpControlCaps As Long
    VideoProcessorOperations As DXVA2_VideoProcess
    NoiseFilterTechnology As DXVA2_NoiseFilterTech
    DetailFilterTechnology As DXVA2_DetailFilterTech
End Type

Public Type DXVA2_AYUVSample8
    cr As Byte
    cb As Byte
    y As Byte
    Alpha As Byte
End Type

Public Type DXVA2_AYUVSample16
    cr As Integer
    cb As Integer
    y As Integer
    Alpha As Integer
End Type

Public Type DXVA2_VideoSample
    Start As LongLong
    End As LongLong
    SampleFormat As DXVA2_ExtendedFormat
    SrcSurface As IDirect3DSurface9
    srcRect As RECT
    dstRect As RECT
    Pal(0 To 15) As DXVA2_AYUVSample8
    PlanarAlpha As Long
    SampleData As DXVA2_SampleData
End Type

Public Type DXVA2_ValueRange
    minValue As Long
    maxValue As Long
    defaultValue As Long
    StepSize As Long
End Type

Public Type DXVA2_ProcAmpValues
    Brightness As Long
    Contrast As Long
    Hue As Long
    Saturation As Long
End Type

Public Type DXVA2_FilterValues
    Level As Long
    Threshold As Long
    radius As Long
End Type

Public Type DXVA2_VideoProcessBltParams
    TargetFrame As LongLong
    TargetRect As RECT
    ConstrictionSize As SIZE
    StreamingFlags As Long
    BackgroundColor As DXVA2_AYUVSample16
    DestFormat As DXVA2_ExtendedFormat
    ProcAmpValues As DXVA2_ProcAmpValues
    Alpha As Long
    NoiseFilterLuma As DXVA2_FilterValues
    NoiseFilterChroma As DXVA2_FilterValues
    DetailFilterLuma As DXVA2_FilterValues
    DetailFilterChroma As DXVA2_FilterValues
    DestData As DXVA2_DestData
End Type

Public Enum DXVA2BufferTypes
    DXVA2_PictureParametersBufferType = 0
    DXVA2_MacroBlockControlBufferType = 1
    DXVA2_ResidualDifferenceBufferType = 2
    DXVA2_DeblockingControlBufferType = 3
    DXVA2_InverseQuantizationMatrixBufferType = 4
    DXVA2_SliceControlBufferType = 5
    DXVA2_BitStreamDateBufferType = 6
    DXVA2_MotionVectorBuffer = 7
    DXVA2_FilmGrainBuffer = 8
End Enum

Public Enum DXVA2RenderTargets
    DXVA2_VideoDecoderRenderTarget = 0
    DXVA2_VideoProcessorRenderTarget = 1
    DXVA2_VideoSoftwareRenderTarget = 2
End Enum

Public Type DXVA2_ConfigPictureDecode
    guidConfigBitstreamEncryption As UUID
    guidConfigMBcontrolEncryption As UUID
    guidConfigResidDiffEncryption As UUID
    ConfigBitstreamRaw As Long
    ConfigMBcontrolRasterOrder As Long
    ConfigResidDiffHost As Long
    ConfigSpatialResid8 As Long
    ConfigResid8Subtraction As Long
    ConfigSpatialHost8or9Clipping As Long
    ConfigSpatialResidInterleaved As Long
    ConfigIntraResidUnsigned As Long
    ConfigResidDiffAccelerator As Long
    ConfigHostInverseScan As Long
    ConfigSpecificIDCT As Long
    Config4GroupedCoefs As Long
    ConfigMinRenderTargetBuffCount As Integer
    ConfigDecoderSpecific As Integer
End Type

Public Type DXVA2_DecodeBufferDesc
    CompressedBufferType As DXVA2BufferTypes
    BufferIndex As Long
    DataOffset As Long
    dataSize As Long
    FirstMBaddress As Long
    NumMBsInBuffer As Long
    width As Long
    Height As Long
    stride As Long
    ReservedBits As Long
    pvPVPState As LongPtr
End Type

Public Type DXVA2_AES_CTR_IV
    IV As LongLong
    Count As LongLong
End Type

Public Type DXVA2_DecodeExtensionData
    Function As Long
    pPrivateInputData As LongPtr
    PrivateInputDataSize As Long
    pPrivateOutputData As LongPtr
    PrivateOutputDataSize As Long
End Type

Public Enum DXVA2DecodeFlags
    DXVA2_DECODE_GET_DRIVER_HANDLE = &H725
    '  DXVA2_DECODE_SPECIFY_ENCRYPTED_BLOCKS is an extension function that that allows
    '  the decoder to specify which portions of the compressed buffers are encrypted.
    '  If this fucntion is not used to specify this information, it is assumed that
    '  the entire buffer is encrypted.
    '      pPrivateInputData = D3DENCRYPTED_BLOCK_INFO*;
    '      PrivateInputDataSize = sizeof(D3DENCRYPTED_BLOCK_INFO);
    '      pPrivateOutputData = NULL;
    '      PrivateOutputDataSize = 0;
    DXVA2_DECODE_SPECIFY_ENCRYPTED_BLOCKS = &H724
End Enum

Public Type DXVA2_DecodeExecuteParams
    NumCompBuffers As Long
    pCompressedBuffers As LongPtr 'DXVA2_DecodeBufferDesc*
    pExtensionData As LongPtr 'DXVA2_DecodeExtensionData*
End Type

Public Enum DXVA2_SurfaceType
    DXVA2_SurfaceType_DecoderRenderTarget = 0
    DXVA2_SurfaceType_ProcessorRenderTarget = 1
    DXVA2_SurfaceType_D3DRenderTargetTexture = 2
End Enum

Public Enum DXVAHD_FRAME_FORMAT
    DXVAHD_FRAME_FORMAT_PROGRESSIVE = 0
    DXVAHD_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST = 1
    DXVAHD_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST = 2
End Enum

Public Enum DXVAHD_DEVICE_USAGE
    DXVAHD_DEVICE_USAGE_PLAYBACK_NORMAL = 0
    DXVAHD_DEVICE_USAGE_OPTIMAL_SPEED = 1
    DXVAHD_DEVICE_USAGE_OPTIMAL_QUALITY = 2
End Enum

Public Enum DXVAHD_SURFACE_TYPE
    DXVAHD_SURFACE_TYPE_VIDEO_INPUT = 0
    DXVAHD_SURFACE_TYPE_VIDEO_INPUT_PRIVATE = 1
    DXVAHD_SURFACE_TYPE_VIDEO_OUTPUT = 2
End Enum

Public Enum DXVAHD_DEVICE_TYPE
    DXVAHD_DEVICE_TYPE_HARDWARE = 0
    DXVAHD_DEVICE_TYPE_SOFTWARE = 1
    DXVAHD_DEVICE_TYPE_REFERENCE = 2
    DXVAHD_DEVICE_TYPE_OTHER = 3
End Enum

Public Enum DXVAHD_DEVICE_CAPS
    DXVAHD_DEVICE_CAPS_LINEAR_SPACE = 1
    DXVAHD_DEVICE_CAPS_xvYCC = 2
    DXVAHD_DEVICE_CAPS_RGB_RANGE_CONVERSION = 4
    DXVAHD_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION = 8
End Enum

Public Enum DXVAHD_FEATURE_CAPS
    DXVAHD_FEATURE_CAPS_ALPHA_FILL = 1
    DXVAHD_FEATURE_CAPS_CONSTRICTION = 2
    DXVAHD_FEATURE_CAPS_LUMA_KEY = 4
    DXVAHD_FEATURE_CAPS_ALPHA_PALETTE = 8
End Enum
 
Public Enum DXVAHD_FILTER_CAPS
    DXVAHD_FILTER_CAPS_BRIGHTNESS = &H1
    DXVAHD_FILTER_CAPS_CONTRAST = &H2
    DXVAHD_FILTER_CAPS_HUE = &H4
    DXVAHD_FILTER_CAPS_SATURATION = &H8
    DXVAHD_FILTER_CAPS_NOISE_REDUCTION = &H10
    DXVAHD_FILTER_CAPS_EDGE_ENHANCEMENT = &H20
    DXVAHD_FILTER_CAPS_ANAMORPHIC_SCALING = &H40
End Enum

Public Enum DXVAHD_INPUT_FORMAT_CAPS
    DXVAHD_INPUT_FORMAT_CAPS_RGB_INTERLACED = &H1
    DXVAHD_INPUT_FORMAT_CAPS_RGB_PROCAMP = &H2
    DXVAHD_INPUT_FORMAT_CAPS_RGB_LUMA_KEY = &H4
    DXVAHD_INPUT_FORMAT_CAPS_PALETTE_INTERLACED = &H8
End Enum

Public Enum DXVAHD_PROCESSOR_CAPS
    DXVAHD_PROCESSOR_CAPS_DEINTERLACE_BLEND = &H1
    DXVAHD_PROCESSOR_CAPS_DEINTERLACE_BOB = &H2
    DXVAHD_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE = &H4
    DXVAHD_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION = &H8
    DXVAHD_PROCESSOR_CAPS_INVERSE_TELECINE = &H10
    DXVAHD_PROCESSOR_CAPS_FRAME_RATE_CONVERSION = &H20
End Enum

Public Enum DXVAHD_ITELECINE_CAPS
    DXVAHD_ITELECINE_CAPS_32 = &H1
    DXVAHD_ITELECINE_CAPS_22 = &H2
    DXVAHD_ITELECINE_CAPS_2224 = &H4
    DXVAHD_ITELECINE_CAPS_2332 = &H8
    DXVAHD_ITELECINE_CAPS_32322 = &H10
    DXVAHD_ITELECINE_CAPS_55 = &H20
    DXVAHD_ITELECINE_CAPS_64 = &H40
    DXVAHD_ITELECINE_CAPS_87 = &H80
    DXVAHD_ITELECINE_CAPS_222222222223 = &H100
    DXVAHD_ITELECINE_CAPS_OTHER = &H80000000
End Enum

Public Enum DXVAHD_FILTER
    DXVAHD_FILTER_BRIGHTNESS = 0
    DXVAHD_FILTER_CONTRAST = 1
    DXVAHD_FILTER_HUE = 2
    DXVAHD_FILTER_SATURATION = 3
    DXVAHD_FILTER_NOISE_REDUCTION = 4
    DXVAHD_FILTER_EDGE_ENHANCEMENT = 5
    DXVAHD_FILTER_ANAMORPHIC_SCALING = 6
End Enum

Public Enum DXVAHD_BLT_STATE
    DXVAHD_BLT_STATE_TARGET_RECT = 0
    DXVAHD_BLT_STATE_BACKGROUND_COLOR = 1
    DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE = 2
    DXVAHD_BLT_STATE_ALPHA_FILL = 3
    DXVAHD_BLT_STATE_CONSTRICTION = 4
    DXVAHD_BLT_STATE_PRIVATE = 1000
End Enum

Public Enum DXVAHD_ALPHA_FILL_MODE
    DXVAHD_ALPHA_FILL_MODE_OPAQUE = 0
    DXVAHD_ALPHA_FILL_MODE_BACKGROUND = 1
    DXVAHD_ALPHA_FILL_MODE_DESTINATION = 2
    DXVAHD_ALPHA_FILL_MODE_SOURCE_STREAM = 3
End Enum

Public Enum DXVAHD_STREAM_STATE
    DXVAHD_STREAM_STATE_D3DFORMAT = 0
    DXVAHD_STREAM_STATE_FRAME_FORMAT = 1
    DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE = 2
    DXVAHD_STREAM_STATE_OUTPUT_RATE = 3
    DXVAHD_STREAM_STATE_SOURCE_RECT = 4
    DXVAHD_STREAM_STATE_DESTINATION_RECT = 5
    DXVAHD_STREAM_STATE_ALPHA = 6
    DXVAHD_STREAM_STATE_PALETTE = 7
    DXVAHD_STREAM_STATE_LUMA_KEY = 8
    DXVAHD_STREAM_STATE_ASPECT_RATIO = 9
    DXVAHD_STREAM_STATE_FILTER_BRIGHTNESS = 100
    DXVAHD_STREAM_STATE_FILTER_CONTRAST = 101
    DXVAHD_STREAM_STATE_FILTER_HUE = 102
    DXVAHD_STREAM_STATE_FILTER_SATURATION = 103
    DXVAHD_STREAM_STATE_FILTER_NOISE_REDUCTION = 104
    DXVAHD_STREAM_STATE_FILTER_EDGE_ENHANCEMENT = 105
    DXVAHD_STREAM_STATE_FILTER_ANAMORPHIC_SCALING = 106
    DXVAHD_STREAM_STATE_PRIVATE = 1000
End Enum

Public Enum DXVAHD_OUTPUT_RATE
    DXVAHD_OUTPUT_RATE_NORMAL = 0
    DXVAHD_OUTPUT_RATE_HALF = 1
    DXVAHD_OUTPUT_RATE_CUSTOM = 2
End Enum

Public Type DXVAHD_RATIONAL
    Numerator As Long
    Denominator As Long
End Type

Public Type DXVAHD_COLOR_RGBA
    r As Single
    g As Single
    b As Single
    a As Single
End Type

Public Type DXVAHD_COLOR_YCbCrA
    y As Single
    cb As Single
    cr As Single
    a As Single
End Type

' typedef union _DXVAHD_COLOR
' {
    ' DXVAHD_COLOR_RGBA   RGB;
    ' DXVAHD_COLOR_YCbCrA YCbCr;
' } DXVAHD_COLOR;
Public Type DXVAHD_COLOR
    RorY As Single
    GorCb As Single
    BorCr As Single
    A As Single
End Type

Public Type DXVAHD_CONTENT_DESC
    InputFrameFormat As DXVAHD_FRAME_FORMAT
    InputFrameRate As DXVAHD_RATIONAL
    InputWidth As Long
    InputHeight As Long
    OutputFrameRate As DXVAHD_RATIONAL
    OutputWidth As Long
    OutputHeight As Long
End Type

Public Type DXVAHD_VPDEVCAPS
    DeviceType As DXVAHD_DEVICE_TYPE
    DeviceCaps As DXVAHD_DEVICE_CAPS ' DXVAHD_DEVICE_CAPS
    FeatureCaps As DXVAHD_FEATURE_CAPS ' DXVAHD_FEATURE_CAPS
    FilterCaps As DXVAHD_FILTER_CAPS ' DXVAHD_FILTER_CAPS
    InputFormatCaps As DXVAHD_INPUT_FORMAT_CAPS ' DXVAHD_INPUT_FORMAT_CAPS
    InputPool As D3DPOOL
    OutputFormatCount As Long
    InputFormatCount As Long
    VideoProcessorCount As Long
    MaxInputStreams As Long
    MaxStreamStates As Long
End Type

Public Type DXVAHD_VPCAPS
    VPGuid As UUID
    PastFrames As Long
    FutureFrames As Long
    ProcessorCaps As DXVAHD_PROCESSOR_CAPS ' DXVAHD_PROCESSOR_CAPS
    ITelecineCaps As DXVAHD_ITELECINE_CAPS ' DXVAHD_ITELECINE_CAPS
    CustomRateCount As Long
End Type

Public Type DXVAHD_CUSTOM_RATE_DATA
    CustomRate As DXVAHD_RATIONAL
    OutputFrames As Long
    InputInterlaced As BOOL
    InputFramesOrFields As Long
End Type

Public Type DXVAHD_FILTER_RANGE_DATA
    Minimum As Long
    Maximum As Long
    Default As Long
    Multiplier As Single
End Type

Public Type DXVAHD_BLT_STATE_TARGET_RECT_DATA
    Enable As BOOL
    TargetRect As RECT
End Type

Public Type DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA
    YCbCr As BOOL
    BackgroundColor As DXVAHD_COLOR
End Type

Public Type DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA
    'union
    '{
    '    struct
    '    {
    '        UINT Usage : 1; // 0:Playback,     1:Processing
    '        UINT RGB_Range : 1; // 0:Full(0-255),  1:Limited(16-235)
    '        UINT YCbCr_Matrix : 1; // 0:BT.601(SDTV), 1:BT.709(HDTV)
    '        UINT YCbCr_xvYCC : 1; // 0:Conventional, 1:Extended(xvYCC)
    '        UINT Reserved : 28;
    '    };
    Value As Long
    ' };
End Type

Public Type DXVAHD_BLT_STATE_ALPHA_FILL_DATA
    mode As DXVAHD_ALPHA_FILL_MODE
    StreamNumber As Long
End Type

Public Type DXVAHD_BLT_STATE_CONSTRICTION_DATA
    Enable As BOOL
    SIZE As SIZE
End Type

Public Type DXVAHD_BLT_STATE_PRIVATE_DATA
    guid As UUID
    dataSize As Long
    pData As LongPtr
End Type

Public Type DXVAHD_STREAM_STATE_D3DFORMAT_DATA
    Format As D3DFORMAT
End Type

Public Type DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA
    FrameFormat As DXVAHD_FRAME_FORMAT
End Type

Public Type DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA
    'union
    '{
    '    struct
    '    {
    '        UINT Type : 1; // 0:Video,        1:Graphics
    '        UINT RGB_Range : 1; // 0:Full(0-255),  1:Limited(16-235)
    '        UINT YCbCr_Matrix : 1; // 0:BT.601(SDTV), 1:BT.709(HDTV)
    '        UINT YCbCr_xvYCC : 1; // 0:Conventional, 1:Extended(xvYCC)
    '        UINT Reserved : 28;
    '    };
    Value As Long
    '};
End Type

Public Type DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA
    RepeatFrame As BOOL
    OutputRate As DXVAHD_OUTPUT_RATE
    CustomRate As DXVAHD_RATIONAL
End Type

Public Type DXVAHD_STREAM_STATE_SOURCE_RECT_DATA
    Enable As BOOL
    sourceRect As RECT
End Type

Public Type DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA
    Enable As BOOL
    DestinationRect As RECT
End Type

Public Type DXVAHD_STREAM_STATE_ALPHA_DATA
    Enable As BOOL
    Alpha As Single
End Type

Public Type DXVAHD_STREAM_STATE_PALETTE_DATA
    Count As Long
    pEntries As LongPtr
End Type

Public Type DXVAHD_STREAM_STATE_LUMA_KEY_DATA
    Enable As BOOL
    Lower As Single
    Upper As Single
End Type

Public Type DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA
    Enable As BOOL
    SourceAspectRatio As DXVAHD_RATIONAL
    DestinationAspectRatio As DXVAHD_RATIONAL
End Type

Public Type DXVAHD_STREAM_STATE_FILTER_DATA
    Enable As BOOL
    Level As Long
End Type

Public Type DXVAHD_STREAM_STATE_PRIVATE_DATA
    guid As UUID
    dataSize As Long
    pData As LongPtr
End Type

Public Type DXVAHD_STREAM_DATA
    Enable As BOOL
    OutputIndex As Long
    InputFrameOrField As Long
    PastFrames As Long
    FutureFrames As Long
    ppPastSurfaces As LongPtr ' IDirect3DSurface9**
    pInputSurface As IDirect3DSurface9
    ppFutureSurfaces As LongPtr ' IDirect3DSurface9**
End Type

Public Type DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA
    Enable As BOOL
    ITelecineFlags As DXVAHD_ITELECINE_CAPS
    frames As Long
    InputField As Long
End Type

Public Type DXVAHDETW_CREATEVIDEOPROCESSOR
    pObject As LongLong
    pD3D9Ex As LongLong
    VPGuid As UUID
End Type

Public Type DXVAHDETW_VIDEOPROCESSBLTSTATE
    pObject As LongLong
    State As DXVAHD_BLT_STATE
    dataSize As Long
    SetState As BOOL
End Type

Public Type DXVAHDETW_VIDEOPROCESSSTREAMSTATE
    pObject As LongLong
    StreamNumber As Long
    State As DXVAHD_STREAM_STATE
    dataSize As Long
    SetState As BOOL
End Type

Public Type DXVAHDETW_VIDEOPROCESSBLTHD
    pObject As LongLong
    pOutputSurface As LongLong
    TargetRect As RECT
    OutputFormat As D3DFORMAT
    ColorSpace As Long
    OutputFrame As Long
    StreamCount As Long
    Enter As BOOL
End Type

Public Type DXVAHDETW_VIDEOPROCESSBLTHD_STREAM
    pObject As LongLong
    pInputSurface As LongLong
    sourceRect As RECT
    DestinationRect As RECT
    InputFormat As D3DFORMAT
    FrameFormat As DXVAHD_FRAME_FORMAT
    ColorSpace As Long
    StreamNumber As Long
    OutputIndex As Long
    InputFrameOrField As Long
    PastFrames As Long
    FutureFrames As Long
End Type

Public Type DXVAHDETW_DESTROYVIDEOPROCESSOR
    pObject As LongLong
End Type


Public Delegate Function PDXVAHDSW_CreateDevice (ByVal pD3DDevice As IDirect3DDevice9Ex, phDevice As LongPtr) As Long
Public Delegate Function PDXVAHDSW_ProposeVideoPrivateFormat (ByVal hDevice As LongPtr, pFormat As D3DFORMAT) As Long
Public Delegate Function PDXVAHDSW_GetVideoProcessorDeviceCaps (ByVal hDevice As LongPtr, pContentDesc As DXVAHD_CONTENT_DESC, ByVal Usage As DXVAHD_DEVICE_USAGE, pCaps As DXVAHD_VPDEVCAPS) As Long
Public Delegate Function PDXVAHDSW_GetVideoProcessorOutputFormats (ByVal hDevice As LongPtr, pContentDesc As DXVAHD_CONTENT_DESC, ByVal Usage As DXVAHD_DEVICE_USAGE, ByVal Count As Long, pFormats As D3DFORMAT) As Long
Public Delegate Function PDXVAHDSW_GetVideoProcessorInputFormats (ByVal hDevice As LongPtr, pContentDesc As DXVAHD_CONTENT_DESC, ByVal Usage As DXVAHD_DEVICE_USAGE, ByVal Count As Long, pFormats As D3DFORMAT) As Long
Public Delegate Function PDXVAHDSW_GetVideoProcessorCaps (ByVal hDevice As LongPtr, pContentDesc As DXVAHD_CONTENT_DESC, ByVal Usage As DXVAHD_DEVICE_USAGE, ByVal Count As Long, pCaps As DXVAHD_VPDEVCAPS) As Long
Public Delegate Function PDXVAHDSW_GetVideoProcessorCustomRates (ByVal hDevice As LongPtr, pVPGuid As UUID, ByVal Count As Long, pRates As DXVAHD_CUSTOM_RATE_DATA) As Long
Public Delegate Function PDXVAHDSW_GetVideoProcessorFilterRange (ByVal hDevice As LongPtr, ByVal Filter As DXVAHD_FILTER, oRange As DXVAHD_FILTER_RANGE_DATA) As Long
Public Delegate Function PDXVAHDSW_DestroyDevice (ByVal hDevice As LongPtr) As Long
Public Delegate Function PDXVAHDSW_CreateVideoProcessor (ByVal hDevice As LongPtr, pVPGuid As UUID, phVideoProcessor As LongPtr) As Long
Public Delegate Function PDXVAHDSW_SetVideoProcessBltState (ByVal hVideoProcessor As LongPtr, ByVal State As DXVAHD_BLT_STATE, ByVal DataSize As Long, pData As Any) As Long
Public Delegate Function PDXVAHDSW_GetVideoProcessBltStatePrivate (ByVal hVideoProcessor As LongPtr, pData As DXVAHD_BLT_STATE_PRIVATE_DATA) As Long
Public Delegate Function PDXVAHDSW_SetVideoProcessStreamState (ByVal hVideoProcessor As LongPtr, ByVal StreamNumber As Long, ByVal State As DXVAHD_STREAM_STATE, ByVal DataSize As Long, pData As Any) As Long
Public Delegate Function PDXVAHDSW_GetVideoProcessStreamStatePrivate (ByVal hVideoProcessor As LongPtr, ByVal StreamNumber As Long, pData As DXVAHD_STREAM_STATE_PRIVATE_DATA) As Long
Public Delegate Function PDXVAHDSW_VideoProcessBltHD (ByVal hVideoProcessor As LongPtr, ByVal pOutputSurface As IDirect3DSurface9, ByVal OutputFrame As Long, ByVal StreamCount As Long, pStreams As DXVAHD_STREAM_DATA) As Long
Public Delegate Function PDXVAHDSW_DestroyVideoProcessor (ByVal hVideoProcessor As LongPtr) As Long

' #If WDL_NO_DELEGATES Then
Public Type DXVAHDSW_CALLBACKS
    CreateDevice As LongPtr
    ProposeVideoPrivateFormat As LongPtr
    GetVideoProcessorDeviceCaps As LongPtr
    GetVideoProcessorOutputFormats As LongPtr
    GetVideoProcessorInputFormats As LongPtr
    GetVideoProcessorCaps As LongPtr
    GetVideoProcessorCustomRates As LongPtr
    GetVideoProcessorFilterRange As LongPtr
    DestroyDevice As LongPtr
    CreateVideoProcessor As LongPtr
    SetVideoProcessBltState As LongPtr
    GetVideoProcessBltStatePrivate As LongPtr
    SetVideoProcessStreamState As LongPtr
    GetVideoProcessStreamStatePrivate As LongPtr
    VideoProcessBltHD As LongPtr
    DestroyVideoProcessor As LongPtr
End Type
' #Else
' Public Type DXVAHDSW_CALLBACKS
    ' CreateDevice As PDXVAHDSW_CreateDevice
    ' ProposeVideoPrivateFormat As PDXVAHDSW_ProposeVideoPrivateFormat
    ' GetVideoProcessorDeviceCaps As PDXVAHDSW_GetVideoProcessorDeviceCaps
    ' GetVideoProcessorOutputFormats As PDXVAHDSW_GetVideoProcessorOutputFormats
    ' GetVideoProcessorInputFormats As PDXVAHDSW_GetVideoProcessorInputFormats
    ' GetVideoProcessorCaps As PDXVAHDSW_GetVideoProcessorCaps
    ' GetVideoProcessorCustomRates As PDXVAHDSW_GetVideoProcessorCustomRates
    ' GetVideoProcessorFilterRange As PDXVAHDSW_GetVideoProcessorFilterRange
    ' DestroyDevice As PDXVAHDSW_DestroyDevice
    ' CreateVideoProcessor As PDXVAHDSW_CreateVideoProcessor
    ' SetVideoProcessBltState As PDXVAHDSW_SetVideoProcessBltState
    ' GetVideoProcessBltStatePrivate As PDXVAHDSW_GetVideoProcessBltStatePrivate
    ' SetVideoProcessStreamState As PDXVAHDSW_SetVideoProcessStreamState
    ' GetVideoProcessStreamStatePrivate As PDXVAHDSW_GetVideoProcessStreamStatePrivate
    ' VideoProcessBltHD As PDXVAHDSW_VideoProcessBltHD
    ' DestroyVideoProcessor As PDXVAHDSW_DestroyVideoProcessor
' End Type
' #End If

Public Delegate Function PDXVAHDSW_Plugin (ByVal Size As Long, pCallbacks As DXVAHDSW_CALLBACKS) As Long





Public Type MFVideoAlphaBitmapParams
    dwFlags As Long
    clrSrcKey As Long
    rcSrc As RECT
    nrcDest As MFVideoNormalizedRect
    fAlpha As Single
    dwFilterMode As D3DTEXTUREFILTERTYPE
End Type

Public Type MFVideoAlphaBitmap
    GetBitmapFromDC As BOOL
    'union
    '{
    '    HDC hdc;
    '    IDirect3DSurface9* pDDS;
    '}     bitmap;
    bitmap As LongPtr
    params As MFVideoAlphaBitmapParams
End Type

Public Enum MFVideoAlphaBitmapFlags
    MFVideoAlphaBitmap_EntireDDS = &H1
    MFVideoAlphaBitmap_SrcColorKey = &H2
    MFVideoAlphaBitmap_SrcRect = &H4
    MFVideoAlphaBitmap_DestRect = &H8
    MFVideoAlphaBitmap_FilterMode = &H10
    MFVideoAlphaBitmap_Alpha = &H20
    MFVideoAlphaBitmap_BitMask = &H3f
End Enum

    Public Const DXVA2_E_NOT_INITIALIZED  = (&H80041000)
    Public Const DXVA2_E_NEW_VIDEO_DEVICE  = (&H80041001)
    Public Const DXVA2_E_VIDEO_DEVICE_LOCKED  = (&H80041002)
    Public Const DXVA2_E_NOT_AVAILABLE  = (&H80041003)
    
    Public Const MAX_SUBSTREAMS = 15
    Public Const MAX_DEINTERLACE_SURFACES = 32
    
    
    Public Declare PtrSafe Function DXVAHD_CreateDevice Lib "dxva2.dll" (ByVal pD3DDevice As IDirect3DDevice9Ex, ByRef pContentDesc As DXVAHD_CONTENT_DESC, ByVal Usage As DXVAHD_DEVICE_USAGE, ByRef pPlugin As Any, ByRef ppDevice As IDXVAHD_Device) As Long
    Public Delegate Function PDXVAHD_CreateDevice (ByVal pD3DDevice As IDirect3DDevice9Ex, ByRef pContentDesc As DXVAHD_CONTENT_DESC, ByVal Usage As DXVAHD_DEVICE_USAGE, ByRef pPlugin As Any, ByRef ppDevice As IDXVAHD_Device) As Long
    [PreserveSig(False)]
    Public Declare PtrSafe Function DXVAHD_CreateDevice Lib "dxva2.dll" (ByVal pD3DDevice As IDirect3DDevice9Ex, ByRef pContentDesc As DXVAHD_CONTENT_DESC, ByVal Usage As DXVAHD_DEVICE_USAGE, ByRef pPlugin As Any) As IDXVAHD_Device
    Public Declare PtrSafe Function DXVA2CreateDirect3DDeviceManager9 Lib "dxva2.dll" (pResetToken As Long, ppDeviceManager As IDirect3DDeviceManager9) As Long
    Public Declare PtrSafe Function DXVA2CreateVideoService Lib "dxva2.dll" (ByVal pDD As IDirect3DDevice9, riid As UUID, ppv As Any) As Long
    
    Public Type DXVA2_Fixed32
        '      union { 
        '          struct { 
        '              USHORT  Fraction; 
        '              SHORT   Value; 
        '       }; 
        '          LONG ll; 
        '       }; 
        Fraction As Integer
        Value As Integer
    End Type
 
    Public Function DXVA2FloatToFixed(ByVal float As Single) As Long
        Dim fixed As DXVA2_Fixed32
        Dim fr As Long = CLng(float * &H10000&)
        Dim v As Long = CLng(float * &H10000&)
        fixed.Fraction = LOWORD(fr)
        fixed.Value = HIWORD(v)
        CopyMemory DXVA2FloatToFixed, fixed, 4
    End Function
    
    [Description("When you have a Long representing a DXVA2_Fixed32, pass VarPtr(Long) to this function.")]
    Public Function DXVA2FixedToFloat(fixed As DXVA2_Fixed32) As Single
        Return CSng(fixed.Value + fixed.Fraction / &H10000)
    End Function
 
    Private Function DXVA2_Fixed32TransparentAlpha() As DXVA2_Fixed32: End Function
' __inline const DXVA2_Fixed32 DXVA2_Fixed32TransparentAlpha()
' {
    ' DXVA2_Fixed32 _fixed_ = {0, 0};
    ' return _fixed_;
' }
Private Function DXVA2_Fixed32OpaqueAlpha() As DXVA2_Fixed32
    DXVA2_Fixed32OpaqueAlpha.Value = 1
End Function
' __inline const DXVA2_Fixed32 DXVA2_Fixed32OpaqueAlpha()
' {
    ' DXVA2_Fixed32 _fixed_ = {0, 1};
    ' return _fixed_;
' }


Public Const PHYSICAL_MONITOR_DESCRIPTION_SIZE = 128
Public Type PHYSICAL_MONITOR
    hPhysicalMonitor As LongPtr
    szPhysicalMonitorDescription(0 To (PHYSICAL_MONITOR_DESCRIPTION_SIZE - 1)) As Integer
End Type

Public Declare PtrSafe Function GetNumberOfPhysicalMonitorsFromHMONITOR Lib "dxva2.dll" (ByVal hMonitor As LongPtr, pdwNumberOfPhysicalMonitors As Long) As BOOL
Public Declare PtrSafe Function GetNumberOfPhysicalMonitorsFromIDirect3DDevice9 Lib "dxva2.dll" (ByVal pDirect3DDevice9 As IDirect3DDevice9, pdwNumberOfPhysicalMonitors As Long) As Long
Public Declare PtrSafe Function GetPhysicalMonitorsFromHMONITOR Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal dwPhysicalMonitorArraySize As Long, pPhysicalMonitorArray As PHYSICAL_MONITOR) As Long
Public Declare PtrSafe Function GetPhysicalMonitorsFromIDirect3DDevice9 Lib "dxva2.dll" (ByVal pDirect3DDevice9 As IDirect3DDevice9, ByVal dwPhysicalMonitorArraySize As Long, pPhysicalMonitorArray As PHYSICAL_MONITOR) As Long
Public Declare PtrSafe Function DestroyPhysicalMonitor Lib "dxva2.dll" (ByVal hMonitor As LongPtr) As BOOL
Public Declare PtrSafe Function DestroyPhysicalMonitors Lib "dxva2.dll" (ByVal dwPhysicalMonitorArraySize As Long, pPhysicalMonitorArray As PHYSICAL_MONITOR) As Long

Public Enum DXVA2_MC_CAP_FLAGS
    MC_CAPS_NONE = &H00000000
    MC_CAPS_MONITOR_TECHNOLOGY_TYPE = &H00000001
    MC_CAPS_BRIGHTNESS = &H00000002
    MC_CAPS_CONTRAST = &H00000004
    MC_CAPS_COLOR_TEMPERATURE = &H00000008
    MC_CAPS_RED_GREEN_BLUE_GAIN = &H00000010
    MC_CAPS_RED_GREEN_BLUE_DRIVE = &H00000020
    MC_CAPS_DEGAUSS = &H00000040
    MC_CAPS_DISPLAY_AREA_POSITION = &H00000080
    MC_CAPS_DISPLAY_AREA_SIZE = &H00000100
    MC_CAPS_RESTORE_FACTORY_DEFAULTS = &H00000400
    MC_CAPS_RESTORE_FACTORY_COLOR_DEFAULTS = &H00000800
    MC_RESTORE_FACTORY_DEFAULTS_ENABLES_MONITOR_SETTINGS = &H00001000
End Enum

Public Enum DXVA2_MC_ColorTemps
    MC_SUPPORTED_COLOR_TEMPERATURE_NONE = &H00000000
    MC_SUPPORTED_COLOR_TEMPERATURE_4000K = &H00000001
    MC_SUPPORTED_COLOR_TEMPERATURE_5000K = &H00000002
    MC_SUPPORTED_COLOR_TEMPERATURE_6500K = &H00000004
    MC_SUPPORTED_COLOR_TEMPERATURE_7500K = &H00000008
    MC_SUPPORTED_COLOR_TEMPERATURE_8200K = &H00000010
    MC_SUPPORTED_COLOR_TEMPERATURE_9300K = &H00000020
    MC_SUPPORTED_COLOR_TEMPERATURE_10000K = &H00000040
    MC_SUPPORTED_COLOR_TEMPERATURE_11500K = &H00000080
End Enum

Public Enum MC_DISPLAY_TECHNOLOGY_TYPE
    MC_SHADOW_MASK_CATHODE_RAY_TUBE
    MC_APERTURE_GRILL_CATHODE_RAY_TUBE
    MC_THIN_FILM_TRANSISTOR
    MC_LIQUID_CRYSTAL_ON_SILICON
    MC_PLASMA
    MC_ORGANIC_LIGHT_EMITTING_DIODE
    MC_ELECTROLUMINESCENT
    MC_MICROELECTROMECHANICAL
    MC_FIELD_EMISSION_DEVICE
End Enum

Public Enum MC_DRIVE_TYPE
    MC_RED_DRIVE
    MC_GREEN_DRIVE
    MC_BLUE_DRIVE
End Enum

Public Enum MC_GAIN_TYPE
    MC_RED_GAIN
    MC_GREEN_GAIN
    MC_BLUE_GAIN
End Enum

Public Enum MC_POSITION_TYPE
    MC_HORIZONTAL_POSITION
    MC_VERTICAL_POSITION
End Enum

Public Enum MC_SIZE_TYPE
    MC_WIDTH
    MC_HEIGHT
End Enum

Public Enum MC_COLOR_TEMPERATURE
    MC_COLOR_TEMPERATURE_UNKNOWN
    MC_COLOR_TEMPERATURE_4000K
    MC_COLOR_TEMPERATURE_5000K
    MC_COLOR_TEMPERATURE_6500K
    MC_COLOR_TEMPERATURE_7500K
    MC_COLOR_TEMPERATURE_8200K
    MC_COLOR_TEMPERATURE_9300K
    MC_COLOR_TEMPERATURE_10000K
    MC_COLOR_TEMPERATURE_11500K
End Enum

Public Declare PtrSafe Function GetMonitorCapabilities Lib "dxva2.dll" (ByVal hMonitor As LongPtr, pdwMonitorCapabilities As DXVA2_MC_CAP_FLAGS, pdwSupportedColorTemperatures As DXVA2_MC_ColorTemps) As BOOL
Public Declare PtrSafe Function SaveCurrentMonitorSettings Lib "dxva2.dll" (ByVal hMonitor As LongPtr) As BOOL
Public Declare PtrSafe Function GetMonitorTechnologyType Lib "dxva2.dll" (ByVal hMonitor As LongPtr, pdtyDisplayTechnologyType As MC_DISPLAY_TECHNOLOGY_TYPE) As BOOL
Public Declare PtrSafe Function GetMonitorBrightness Lib "dxva2.dll" (ByVal hMonitor As LongPtr, pdwMinimumBrightness As Long, pdwCurrentBrightness As Long, pdwMaximumBrightness As Long) As BOOL
Public Declare PtrSafe Function GetMonitorContrast Lib "dxva2.dll" (ByVal hMonitor As LongPtr, pdwMinimumContrast As Long, pdwCurrentContrast As Long, pdwMaximumContrast As Long) As BOOL
Public Declare PtrSafe Function GetMonitorColorTemperature Lib "dxva2.dll" (ByVal hMonitor As LongPtr, pctCurrentColorTemperature As MC_COLOR_TEMPERATURE) As BOOL
Public Declare PtrSafe Function GetMonitorRedGreenOrBlueDrive Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal dtDriveType As MC_DRIVE_TYPE, pdwMinimumDrive As Long, pdwCurrentDrive As Long, pdwMaximumDrive As Long) As BOOL
Public Declare PtrSafe Function GetMonitorRedGreenOrBlueGain Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal gtGainType As MC_GAIN_TYPE, pdwMinimumGain As Long, pdwCurrentGain As Long, pdwMaximumGain As Long) As BOOL
Public Declare PtrSafe Function SetMonitorBrightness Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal dwNewBrightness As Long) As BOOL
Public Declare PtrSafe Function SetMonitorContrast Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal dwNewContrast As Long) As BOOL
Public Declare PtrSafe Function SetMonitorColorTemperature Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal ctCurrentColorTemperature As MC_COLOR_TEMPERATURE) As BOOL
Public Declare PtrSafe Function SetMonitorRedGreenOrBlueDrive Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal dtDriveType As MC_DRIVE_TYPE, ByVal dwNewDrive As Long) As BOOL
Public Declare PtrSafe Function SetMonitorRedGreenOrBlueGain Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal gtGainType As MC_GAIN_TYPE, ByVal dwNewGain As Long) As BOOL
Public Declare PtrSafe Function DegaussMonitor Lib "dxva2.dll" (ByVal hMonitor As LongPtr) As BOOL
Public Declare PtrSafe Function GetMonitorDisplayAreaSize Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal stSizeType As MC_SIZE_TYPE, pdwMinimumWidthOrHeight As Long, pdwCurrentWidthOrHeight As Long, pdwMaximumWidthOrHeight As Long) As BOOL
Public Declare PtrSafe Function GetMonitorDisplayAreaPosition Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal ptPositionType As MC_POSITION_TYPE, pdwMinimumPosition As Long, pdwCurrentPosition As Long, pdwMaximumPosition As Long) As BOOL
Public Declare PtrSafe Function SetMonitorDisplayAreaSize Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal stSizeType As MC_SIZE_TYPE, ByVal dwNewDisplayAreaWidthOrHeight As Long) As BOOL
Public Declare PtrSafe Function SetMonitorDisplayAreaPosition Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal ptPositionType As MC_POSITION_TYPE, ByVal dwNewPosition As Long) As BOOL
Public Declare PtrSafe Function RestoreMonitorFactoryColorDefaults Lib "dxva2.dll" (ByVal hMonitor As LongPtr) As BOOL
Public Declare PtrSafe Function RestoreMonitorFactoryDefaults Lib "dxva2.dll" (ByVal hMonitor As LongPtr) As BOOL

[PackingAlignment(1)]
Public Type MC_TIMING_REPORT
    dwHorizontalFrequencyInHZ As Long
    dwVerticalFrequencyInHZ As Long
    bTimingStatusByte As Byte
End Type

Public Enum MC_VCP_CODE_TYPE
    MC_MOMENTARY
    MC_SET_PARAMETER
End Enum

Public Declare PtrSafe Function GetVCPFeatureAndVCPFeatureReply Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal bVCPCode As Byte, pvct As MC_VCP_CODE_TYPE, pdwCurrentValue As Long, pdwMaximumValue As Long) As BOOL
Public Declare PtrSafe Function SetVCPFeature Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal bVCPCode As Byte, ByVal dwNewValue As Long) As BOOL
Public Declare PtrSafe Function SaveCurrentSettings Lib "dxva2.dll" (ByVal hMonitor As LongPtr) As BOOL
Public Declare PtrSafe Function GetCapabilitiesStringLength Lib "dxva2.dll" (ByVal hMonitor As LongPtr, pdwCapabilitiesStringLengthInCharacters As Long) As BOOL
Public Declare PtrSafe Function CapabilitiesRequestAndCapabilitiesReply Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal pszASCIICapabilitiesString As String, ByVal dwCapabilitiesStringLengthInCharacters As Long) As BOOL
Public Declare PtrSafe Function GetTimingReport Lib "dxva2.dll" (ByVal hMonitor As LongPtr, pmtrMonitorTimingReport As MC_TIMING_REPORT) As BOOL




'dxva9typ.h

Public Function DXVABit(ByVal __x As Long) As Long
    Return (1 << __x)
End Function
Public Type DXVA_AYUVsample2
    bCrValue As Byte
    bCbValue As Byte
    bY_Value As Byte
    bSampleAlpha8 As Byte
End Type

Public Function DXVAp_ModeMPEG2_A() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be0A, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
DXVAp_ModeMPEG2_A = iid
End Function
Public Function DXVAp_ModeMPEG2_C() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be0C, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
DXVAp_ModeMPEG2_C = iid
End Function
Public Function DXVAp_NoEncrypt() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81beD0, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
DXVAp_NoEncrypt = iid
End Function

Public Type DXVA_BufferDescription
    dwTypeIndex As Long
    dwBufferIndex As Long
    dwDataOffset As Long
    dwDataSize As Long
    dwFirstMBaddress As Long
    dwNumMBsInBuffer As Long
    dwWidth As Long
    dwHeight As Long
    dwStride As Long
    dwReservedBits As Long
End Type

Public Enum DXVA_ConfigQueryOrReplyFunc
    DXVA_QUERYORREPLYFUNCFLAG_DECODER_PROBE_QUERY = &HFFFFF1
    DXVA_QUERYORREPLYFUNCFLAG_DECODER_LOCK_QUERY = &HFFFFF5
    DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_OK_COPY = &HFFFFF8
    DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_OK_PLUS = &HFFFFF9
    DXVA_QUERYORREPLYFUNCFLAG_ACCEL_LOCK_OK_COPY = &HFFFFFC
    DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_FALSE_PLUS = &HFFFFFB
    DXVA_QUERYORREPLYFUNCFLAG_ACCEL_LOCK_FALSE_PLUS = &HFFFFFF
    DXVA_PICTURE_DECODE_BUFFER = 1
    DXVA_MACROBLOCK_CONTROL_BUFFER = 2
    DXVA_RESIDUAL_DIFFERENCE_BUFFER = 3
    DXVA_DEBLOCKING_CONTROL_BUFFER = 4
    DXVA_INVERSE_QUANTIZATION_MATRIX_BUFFER = 5
    DXVA_SLICE_CONTROL_BUFFER = 6
    DXVA_BITSTREAM_DATA_BUFFER = 7
    DXVA_AYUV_BUFFER = 8
    DXVA_IA44_SURFACE_BUFFER = 9
    DXVA_DPXD_SURFACE_BUFFER = 10
    DXVA_HIGHLIGHT_BUFFER = 11
    DXVA_DCCMD_SURFACE_BUFFER = 12
    DXVA_ALPHA_BLEND_COMBINATION_BUFFER = 13
    DXVA_PICTURE_RESAMPLE_BUFFER = 14
    DXVA_READ_BACK_BUFFER = 15
    /* H.264/AVC Additional buffer types */
    DXVA_MOTION_VECTOR_BUFFER = 16
    DXVA_FILM_GRAIN_BUFFER = 17
    DXVA_NUM_TYPES_COMP_BUFFERS = 18
End Enum

Public Type DXVA_ConfigPictureDecode
    ' Operation Indicated
    dwFunction As DXVA_ConfigQueryOrReplyFunc
    ' Alignment
    dwReservedBits(0 To 2) As Long
    ' Encryption GUIDs
    guidConfigBitstreamEncryption As UUID
    guidConfigMBcontrolEncryption As UUID
    guidConfigResidDiffEncryption As UUID
    ' Bitstream Processing Indicator
    bConfigBitstreamRaw As Byte
    ' Macroblock Control Config
    bConfigMBcontrolRasterOrder As Byte
    ' Host Resid Diff Config
    bConfigResidDiffHost As Byte
    bConfigSpatialResid8 As Byte
    bConfigResid8Subtraction As Byte
    bConfigSpatialHost8or9Clipping As Byte
    bConfigSpatialResidInterleaved As Byte
    bConfigIntraResidUnsigned As Byte
    ' Accelerator Resid Diff Config
    bConfigResidDiffAccelerator As Byte
    bConfigHostInverseScan As Byte
    bConfigSpecificIDCT As Byte
    bConfig4GroupedCoefs As Byte
End Type

Public Type DXVA_PictureParameters
    wDecodedPictureIndex As Integer
    wDeblockedPictureIndex As Integer
    wForwardRefPictureIndex As Integer
    wBackwardRefPictureIndex As Integer
    wPicWidthInMBminus1 As Integer
    wPicHeightInMBminus1 As Integer
    bMacroblockWidthMinus1 As Byte
    bMacroblockHeightMinus1 As Byte
    bBlockWidthMinus1 As Byte
    bBlockHeightMinus1 As Byte
    bBPPminus1 As Byte
    bPicStructure As Byte
    bSecondField As Byte
    bPicIntra As Byte
    bPicBackwardPrediction As Byte
    bBidirectionalAveragingMode As Byte
    bMVprecisionAndChromaRelation As Byte
    bChromaFormat As Byte
    bPicScanFixed As Byte
    bPicScanMethod As Byte
    bPicReadbackRequests As Byte
    bRcontrol As Byte
    bPicSpatialResid8 As Byte
    bPicOverflowBlocks As Byte
    bPicExtrapolation As Byte
    bPicDeblocked As Byte
    bPicDeblockConfined As Byte
    bPic4MVallowed As Byte
    bPicOBMC As Byte
    bPicBinPB As Byte
    bMV_RPS As Byte
    bReservedBits As Byte
    wBitstreamFcodes As Integer
    wBitstreamPCEelements As Integer
    bBitstreamConcealmentNeed As Byte
    bBitstreamConcealmentMethod As Byte
End Type

Public Type DXVAUncompDataInfo
    UncompWidth As Long '* Width of uncompressed data  
    UncompHeight As Long '* Height of uncompressed data  
    UncompFormat As D3DFORMAT '* Format of uncompressed data  
End Type

Public Type DXVACompBufferInfo
    NumCompBuffers As Long /* Number of buffers reqd for compressed data */
    WidthToCreate As Long /* Width of surface to create */
    HeightToCreate As Long /* Height of surface to create */
    BytesToAllocate As Long /* Total number of bytes used by each surface */
    Usage As Long /* Usage used to create the compressed buffer */
    Pool As D3DPOOL /* Pool where the compressed buffer belongs */
    Format As D3DFORMAT /* Format used to create the compressed buffer */
End Type

Public Type DXVABufferInfo
    pCompSurface As LongPtr /* Pointer to buffer containing compressed data */
    DataOffset As Long /* Offset of relevant data from the beginning of buffer */
    DataSize As Long /* Size of relevant data */
End Type

Public Enum DXVA_SampleFormat
    DXVA_SampleFormatMask = &HFF ' 8 bits used for DXVA Sample format
    DXVA_SampleUnknown = 0
    DXVA_SamplePreviousFrame = 1
    DXVA_SampleProgressiveFrame = 2
    DXVA_SampleFieldInterleavedEvenFirst = 3
    DXVA_SampleFieldInterleavedOddFirst = 4
    DXVA_SampleFieldSingleEven = 5
    DXVA_SampleFieldSingleOdd = 6
    DXVA_SampleSubStream = 7
End Enum

 
Public Function DXVA_ExtractSampleFormat(sf As Long) As Long
    Return sf And DXVA_SampleFormatMask
End Function
Public Function DXVA_ExtractExtColorData(sf As Long, Mask As Long, Shift As Long) As Long
    Return (sf And Mask) >> Shift
End Function
Public Function DXVABitMask(n As Long) As Long
    Return Not ((Not 0) << n)
End Function
 
Public Const DXVA_ExtColorData_ShiftBase As Long = 8
Public Function DXVAColorMask(bits As Long, base As Long) As Long
    Return DXVABitMask(bits) << base
End Function

Public Enum DXVA_VideoTransferFunction
    DXVA_VideoTransFuncShift = (DXVA_ExtColorData_ShiftBase + 19)
    DXVA_VideoTransFuncMask = &HF8000000 'DXVAColorMask(5, DXVA_VideoTransFuncShift)
    DXVA_VideoTransFunc_Unknown = 0
    DXVA_VideoTransFunc_10 = 1
    DXVA_VideoTransFunc_18 = 2
    DXVA_VideoTransFunc_20 = 3
    DXVA_VideoTransFunc_22 = 4
    DXVA_VideoTransFunc_22_709 = 5
    DXVA_VideoTransFunc_22_240M = 6
    DXVA_VideoTransFunc_22_8bit_sRGB = 7
    DXVA_VideoTransFunc_28 = 8
End Enum

Public Enum DXVA_VideoPrimaries
    DXVA_VideoPrimariesShift = (DXVA_ExtColorData_ShiftBase + 14)
    DXVA_VideoPrimariesMask = &H7C00000 'DXVAColorMask(5, DXVA_VideoPrimariesShift)
    DXVA_VideoPrimaries_Unknown = 0
    DXVA_VideoPrimaries_reserved = 1
    DXVA_VideoPrimaries_BT709 = 2
    DXVA_VideoPrimaries_BT470_2_SysM = 3
    DXVA_VideoPrimaries_BT470_2_SysBG = 4
    DXVA_VideoPrimaries_SMPTE170M = 5
    DXVA_VideoPrimaries_SMPTE240M = 6
    DXVA_VideoPrimaries_EBU3213 = 7
    DXVA_VideoPrimaries_SMPTE_C = 8
End Enum

Public Enum DXVA_VideoLighting
    DXVA_VideoLightingShift = (DXVA_ExtColorData_ShiftBase + 10)
    DXVA_VideoLightingMask = &H3C0000 'DXVAColorMask(4, DXVA_VideoLightingShift)
    DXVA_VideoLighting_Unknown = 0
    DXVA_VideoLighting_bright = 1
    DXVA_VideoLighting_office = 2
    DXVA_VideoLighting_dim = 3
    DXVA_VideoLighting_dark = 4
End Enum

Public Enum DXVA_VideoTransferMatrix
    DXVA_VideoTransferMatrixShift = (DXVA_ExtColorData_ShiftBase + 7)
    DXVA_VideoTransferMatrixMask = &H38000 ' DXVAColorMask(3, DXVA_VideoTransferMatrixShift)
    DXVA_VideoTransferMatrix_Unknown = 0
    DXVA_VideoTransferMatrix_BT709 = 1
    DXVA_VideoTransferMatrix_BT601 = 2
    DXVA_VideoTransferMatrix_SMPTE240M = 3
End Enum

Public Enum DXVA_NominalRange
    DXVA_NominalRangeShift = (DXVA_ExtColorData_ShiftBase + 4)
    DXVA_NominalRangeMask = &H7000 'DXVAColorMask(3, DXVA_NominalRangeShift)
    DXVA_NominalRange_Unknown = 0
    DXVA_NominalRange_Normal = 1
    DXVA_NominalRange_Wide = 2
    DXVA_NominalRange_0_255 = 1
    DXVA_NominalRange_16_235 = 2
    DXVA_NominalRange_48_208 = 3
End Enum

Public Enum DXVA_VideoChromaSubsampling
    DXVA_VideoChromaSubsamplingShift = (DXVA_ExtColorData_ShiftBase + 0)
    DXVA_VideoChromaSubsamplingMask = &HF00 ' DXVAColorMask(4, DXVA_VideoChromaSubsamplingShift)
    DXVA_VideoChromaSubsampling_Unknown = 0
    DXVA_VideoChromaSubsampling_ProgressiveChroma = &H8
    DXVA_VideoChromaSubsampling_Horizontally_Cosited = &H4
    DXVA_VideoChromaSubsampling_Vertically_Cosited = &H2
    DXVA_VideoChromaSubsampling_Vertically_AlignedChromaPlanes = &H1
    '  4:2:0 variations
    DXVA_VideoChromaSubsampling_MPEG2 = DXVA_VideoChromaSubsampling_Horizontally_Cosited Or DXVA_VideoChromaSubsampling_Vertically_AlignedChromaPlanes
    DXVA_VideoChromaSubsampling_MPEG1 = DXVA_VideoChromaSubsampling_Vertically_AlignedChromaPlanes
    DXVA_VideoChromaSubsampling_DV_PAL = DXVA_VideoChromaSubsampling_Horizontally_Cosited Or DXVA_VideoChromaSubsampling_Vertically_Cosited
    '  4:4:4, 4:2:2, 4:1:1
    DXVA_VideoChromaSubsampling_Cosited = DXVA_VideoChromaSubsampling_Horizontally_Cosited Or DXVA_VideoChromaSubsampling_Vertically_Cosited Or DXVA_VideoChromaSubsampling_Vertically_AlignedChromaPlanes
End Enum

Public Type DXVA_ExtendedFormat
    ' UINT                        SampleFormat : 8;           // See DXVA_SampleFormat
    ' UINT                        VideoChromaSubsampling : 4; // See DXVA_VideoChromaSubSampling
    ' DXVA_NominalRange           NominalRange : 3;           // See DXVA_NominalRange
    ' DXVA_VideoTransferMatrix    VideoTransferMatrix : 3;    // See DXVA_VideoTransferMatrix
    ' DXVA_VideoLighting          VideoLighting : 4;          // See DXVA_VideoLighting
    ' DXVA_VideoPrimaries         VideoPrimaries : 5;         // See DXVA_VideoPrimaries
    ' DXVA_VideoTransferFunction  VideoTransferFunction : 5;  // See DXVA_VideoTransferFunction
    SampleFormat As Byte
    OtherBits(2) As Byte
End Type

Public Function DXVAp_DeinterlaceBobDevice() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H335aa36e, &H7884, &H43a4, &H9c, &H91, &H7f, &H87, &Hfa, &Hf3, &He3, &H7e)
DXVAp_DeinterlaceBobDevice = iid
End Function
Public Function DXVAp_DeinterlaceContainerDevice() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0e85cb93, &H3046, &H4ff0, &Hae, &Hcc, &Hd5, &H8c, &Hb5, &Hf0, &H35, &Hfd)
DXVAp_DeinterlaceContainerDevice = iid
End Function
Public Function DXVA_DeinterlaceBobDevice() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H335aa36e, &H7884, &H43a4, &H9c, &H91, &H7f, &H87, &Hfa, &Hf3, &He3, &H7e)
 DXVA_DeinterlaceBobDevice = iid
End Function
Public Function DXVA_DeinterlaceContainerDevice() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0e85cb93, &H3046, &H4ff0, &Hae, &Hcc, &Hd5, &H8c, &Hb5, &Hf0, &H35, &Hfd)
 DXVA_DeinterlaceContainerDevice = iid
End Function

Public Type DXVA_Frequency
    Numerator As Long
    Denominator As Long
End Type

Public Type DXVA_VideoDesc
    Size As Long
    SampleWidth As Long
    SampleHeight As Long
    SampleFormat As Long ' also contains extend color data
    d3dFormat As D3DFORMAT
    InputSampleFreq As DXVA_Frequency
    OutputFrameFreq As DXVA_Frequency
End Type

Public Enum DXVA_VideoProcessCaps
    DXVA_VideoProcess_None = &H0000
    DXVA_VideoProcess_YUV2RGB = &H0001
    DXVA_VideoProcess_StretchX = &H0002
    DXVA_VideoProcess_StretchY = &H0004
    DXVA_VideoProcess_AlphaBlend = &H0008
    DXVA_VideoProcess_SubRects = &H0010
    DXVA_VideoProcess_SubStreams = &H0020
    DXVA_VideoProcess_SubStreamsExtended = &H0040
    DXVA_VideoProcess_YUV2RGBExtended = &H0080
    DXVA_VideoProcess_AlphaBlendExtended = &H0100
End Enum

Public Enum DXVA_DeinterlaceTech
    '  the algorithm is unknown or proprietary
    DXVA_DeinterlaceTech_Unknown = &H0000
    '  the algorithm creates the missing lines by repeating
    '  the line either above or below it - this method will look very jaggy and
    '  isn't recommended
    DXVA_DeinterlaceTech_BOBLineReplicate = &H0001
    '  The algorithm creates the missing lines by vertically stretching each
    '  video field by a factor of two by averaging two lines
    DXVA_DeinterlaceTech_BOBVerticalStretch = &H0002
    '  or using a [-1, 9, 9, -1]/16 filter across four lines.
    DXVA_DeinterlaceTech_BOBVerticalStretch4Tap = &H0100
    '  the pixels in the missing line are recreated by a median filtering operation
    DXVA_DeinterlaceTech_MedianFiltering = &H0004
    '  the pixels in the missing line are recreated by an edge filter.
    '  In this process, spatial directional filters are applied to determine
    '  the orientation of edges in the picture content, and missing
    '  pixels are created by filtering along (rather than across) the
    '  detected edges.
    DXVA_DeinterlaceTech_EdgeFiltering = &H0010
    '  the pixels in the missing line are recreated by switching on a field by
    '  field basis between using either spatial or temporal interpolation
    '  depending on the amount of motion.
    DXVA_DeinterlaceTech_FieldAdaptive = &H0020
    '  the pixels in the missing line are recreated by switching on a pixel by pixel
    '  basis between using either spatial or temporal interpolation depending on
    '  the amount of motion..
    DXVA_DeinterlaceTech_PixelAdaptive = &H0040
    '  Motion Vector Steering  identifies objects within a sequence of video
    '  fields.  The missing pixels are recreated after first aligning the
    '  movement axes of the individual objects in the scene to make them
    '  parallel with the time axis.
    DXVA_DeinterlaceTech_MotionVectorSteered = &H0080
End Enum

Public Type DXVA_VideoSample
    rtStart As LongLong 'REFERENCE_TIME
    rtEnd As LongLong 'REFERENCE_TIME
    SampleFormat As DXVA_SampleFormat ' only lower 8 bits used
    lpDDSSrcSurface As LongPtr
End Type

Public Enum DXVA_SampleFlags
    DXVA_SampleFlagsMask = &HF 'DXVABit(3) Or DXVABit(2) Or DXVABit(1) Or DXVABit(0)
    DXVA_SampleFlag_Palette_Changed = &H0001
    DXVA_SampleFlag_SrcRect_Changed = &H0002
    DXVA_SampleFlag_DstRect_Changed = &H0004
    DXVA_SampleFlag_ColorData_Changed = &H0008
End Enum

Public Enum DXVA_DestinationFlags
    DXVA_DestinationFlagMask = &HF 'DXVABit(3) Or DXVABit(2) Or DXVABit(1) Or DXVABit(0)
    DXVA_DestinationFlag_Background_Changed = &H0001
    DXVA_DestinationFlag_TargetRect_Changed = &H0002
    DXVA_DestinationFlag_ColorData_Changed = &H0004
    DXVA_DestinationFlag_Alpha_Changed = &H0008
End Enum

Public Type DXVA_VideoSample2
    #If Win64 Then
    Size As Long
    Reserved As Long
    #End If
    rtStart As LongLong 'REFERENCE_TIME
    rtEnd As LongLong 'REFERENCE_TIME
    SampleFormat As Long ' cast to DXVA_ExtendedFormat, or use Extract macros
    SampleFlags As Long
    lpDDSSrcSurface As LongPtr
    rcSrc As RECT
    rcDst As RECT
    Palette(0 To 15) As DXVA_AYUVsample2
End Type

Public Type DXVA_DeinterlaceCaps
    Size As Long
    NumPreviousOutputFrames As Long
    InputPool As Long
    NumForwardRefSamples As Long
    NumBackwardRefSamples As Long
    d3dOutputFormat As D3DFORMAT
    VideoProcessingCaps As DXVA_VideoProcessCaps
    DeinterlaceTechnology As DXVA_DeinterlaceTech
End Type

#If Win64 Then
Public Type DXVA_VideoSample32
    rtStart As LongLong 'REFERENCE_TIME
    rtEnd As LongLong 'REFERENCE_TIME
    SampleFormat As Long
    SampleFlags As Long
    lpDDSSrcSurface As Long ' 32 bit pointer size
    rcSrc As RECT
    rcDst As RECT
    Palette(0 To 15) As DXVA_AYUVsample2
    ' DWORD Pad;
    ' 4 bytes of padding added by the compiler to align the struct to 8 bytes.
End Type
Public Type DXVA_DeinterlaceBltEx32
    Size As Long
    BackgroundColor As DXVA_AYUVsample2
    rcTarget As RECT
    rtTarget As LongLong 'REFERENCE_TIME
    NumSourceSurfaces As Long
    Alpha As Single
    Source(0 To (MAX_DEINTERLACE_SURFACES - 1)) As DXVA_VideoSample32
    DestinationFormat As Long
    DestinationFlags As Long
End Type
#End If

Public Type DXVA_DeinterlaceBlt
    Size As Long
    Reserved As Long
    rtTarget As LongLong ' REFERENCE_TIME
    DstRect As RECT
    SrcRect As RECT
    NumSourceSurfaces As Long
    Alpha As Single
    Source(0 To (MAX_DEINTERLACE_SURFACES - 1)) As DXVA_VideoSample
End Type

Public Const DXVA_DeinterlaceBltFnCode = 1

    Public Type DXVA_DeinterlaceBltEx
        Size As Long
        BackgroundColor As DXVA_AYUVsample2
        rcTarget As RECT
        rtTarget As LongLong 'REFERENCE_TIME
        NumSourceSurfaces As Long
        Alpha As Single
        Source(0 To (MAX_DEINTERLACE_SURFACES - 1)) As DXVA_VideoSample2
        DestinationFormat As Long
        DestinationFlags As Long
    End Type

    Public Const DXVA_DeinterlaceBltExFnCode = 2
    
    Public Const MAX_DEINTERLACE_DEVICE_GUIDS = 32
    
    Public Type DXVA_DeinterlaceQueryAvailableModes
        Size As Long
        NumGuids As Long
        Guids(0 To (MAX_DEINTERLACE_DEVICE_GUIDS - 1)) As UUID
    End Type
        
    Public Const DXVA_DeinterlaceQueryAvailableModesFnCode = 1
    
    Public Type DXVA_DeinterlaceQueryModeCaps
        Size As Long
        Guid As UUID
        VideoDesc As DXVA_VideoDesc
    End Type
    
    Public Const DXVA_DeinterlaceQueryModeCapsFnCode = 2
    
    Public Function DXVA_ProcAmpControlDevice() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9f200913, &H2ffd, &H4056, &H9f, &H1e, &He1, &Hb5, &H08, &Hf2, &H2d, &Hcf)
    DXVA_ProcAmpControlDevice = iid
    End Function
        
    Public Enum DXVA_ProcAmpControlProp
        DXVA_ProcAmp_None = &H0000
        DXVA_ProcAmp_Brightness = &H0001
        DXVA_ProcAmp_Contrast = &H0002
        DXVA_ProcAmp_Hue = &H0004
        DXVA_ProcAmp_Saturation = &H0008
    End Enum
    
    Public Type DXVA_ProcAmpControlCaps
        Size As Long
        InputPool As Long
        d3dOutputFormat As D3DFORMAT
        ProcAmpControlProps As Long ' see DXVA_ProcAmpControlProp
        VideoProcessingCaps As Long ' see DXVA_VideoProcessCaps
    End Type
    
    Public Const DXVA_ProcAmpControlQueryCapsFnCode = 3
    
    Public Type DXVA_ProcAmpControlQueryRange
        Size As Long
        ProcAmpControlProp As DXVA_ProcAmpControlProp
        VideoDesc As DXVA_VideoDesc
    End Type
    
    Public Type DXVA_VideoPropertyRange
        MinValue As Single
        MaxValue As Single
        DefaultValue As Single
        StepSize As Single
    End Type
    
    Public Const DXVA_ProcAmpControlQueryRangeFnCode = 4
    
    Public Type DXVA_ProcAmpControlBlt
        Size As Long
        DstRect As RECT
        SrcRect As RECT
        Alpha As Single
        Brightness As Single
        Contrast As Single
        Hue As Single
        Saturation As Single
    End Type
    
    Public Const DXVA_ProcAmpControlBltFnCode = 1
    
    
    Public Function DXVA_COPPDevice() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd2457add, &H8999, &H45ed, &H8a, &H8a, &Hd1, &Haa, &H04, &H7b, &Ha4, &Hd5)
    DXVA_COPPDevice = iid
    End Function
        
    Public Const DXVA_COPPGetCertificateLengthFnCode  = &H01
    Public Const DXVA_COPPKeyExchangeFnCode  = &H02
    
    Public Type DXVA_COPPSignature
        Signature(0 To 255) As Byte
    End Type
    
    Public Const DXVA_COPPSequenceStartFnCode  = &H03
        
    Public Type DXVA_COPPCommand
        macKDI As UUID
        guidCommandID As UUID
        dwSequence As Long
        cbSizeData As Long
        CommandData(0 To 4055) As Byte
    End Type
        
    Public Const DXVA_COPPCommandFnCode = 4
    
    Public Function DXVA_COPPSetProtectionLevel() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9bb9327c, &H4eb5, &H4727, &H9f, &H00, &Hb4, &H2b, &H09, &H19, &Hc0, &Hda)
    DXVA_COPPSetProtectionLevel = iid
    End Function
    
    Public Type DXVA_COPPSetProtectionLevelCmdData
        ProtType As Long
        ProtLevel As Long
        ExtendedInfoChangeMask As Long
        ExtendedInfoData As Long
    End Type
    
    Public Enum COPP_HDCP_Protection_Level
        COPP_HDCP_Level0 = 0
        COPP_HDCP_LevelMin = COPP_HDCP_Level0
        COPP_HDCP_Level1 = 1
        COPP_HDCP_LevelMax = COPP_HDCP_Level1
        COPP_HDCP_ForceDWORD = &H7fffffff
    End Enum
    
    Public Enum COPP_CGMSA_Protection_Level
        COPP_CGMSA_Disabled = 0
        COPP_CGMSA_LevelMin = COPP_CGMSA_Disabled
        COPP_CGMSA_CopyFreely = 1
        COPP_CGMSA_CopyNoMore = 2
        COPP_CGMSA_CopyOneGeneration = 3
        COPP_CGMSA_CopyNever = 4
        COPP_CGMSA_RedistributionControlRequired = &H08
        COPP_CGMSA_LevelMax = (COPP_CGMSA_RedistributionControlRequired + COPP_CGMSA_CopyNever)
        COPP_CGMSA_ForceDWORD = &H7fffffff
    End Enum
    
    Public Enum COPP_ACP_Protection_Level
        COPP_ACP_Level0 = 0
        COPP_ACP_LevelMin = COPP_ACP_Level0
        COPP_ACP_Level1 = 1
        COPP_ACP_Level2 = 2
        COPP_ACP_Level3 = 3
        COPP_ACP_LevelMax = COPP_ACP_Level3
        COPP_ACP_ForceDWORD = &H7fffffff
    End Enum
    
    Public Const COPP_NoProtectionLevelAvailable  = -1
    Public Const COPP_DefaultProtectionLevel  = 0
    
    Public Enum COPP_ProtectionType
        COPP_ProtectionType_Unknown = &H80000000
        COPP_ProtectionType_None = &H00000000
        COPP_ProtectionType_HDCP = &H00000001
        COPP_ProtectionType_ACP = &H00000002
        COPP_ProtectionType_CGMSA = &H00000004
        COPP_ProtectionType_DPCP = &H00000010
        COPP_ProtectionType_Mask = &H80000017
        COPP_ProtectionType_Reserved = &H7FFFFFF8
    End Enum
    
    Public Function DXVA_COPPSetSignaling() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9a631a5, &Hd684, &H4c60, &H8e, &H4d, &Hd3, &Hbb, &Hf, &Hb, &He3, &Hee)
    DXVA_COPPSetSignaling = iid
    End Function
    
    Public Type DXVA_COPPSetSignalingCmdData
        ActiveTVProtectionStandard As COPP_TVProtectionStandard ' See COPP_TVProtectionStandard
        AspectRatioChangeMask1 As Long
        AspectRatioData1 As COPP_ImageAspectRatio_EN300294 ' See COPP_ImageAspectRatio_EN300294 for ETSI EN 300 294 values
        AspectRatioChangeMask2 As Long
        AspectRatioData2 As Long
        AspectRatioChangeMask3 As Long
        AspectRatioData3 As Long
        ExtendedInfoChangeMask(0 To 3) As Long
        ExtendedInfoData(0 To 3) As Long
        Reserved As Long
    End Type
    
    Public Enum COPP_TVProtectionStandard
        COPP_ProtectionStandard_Unknown = &H80000000
        COPP_ProtectionStandard_None = &H00000000
        COPP_ProtectionStandard_IEC61880_525i = &H00000001
        COPP_ProtectionStandard_IEC61880_2_525i = &H00000002
        COPP_ProtectionStandard_IEC62375_625p = &H00000004
        COPP_ProtectionStandard_EIA608B_525 = &H00000008
        COPP_ProtectionStandard_EN300294_625i = &H00000010
        COPP_ProtectionStandard_CEA805A_TypeA_525p = &H00000020
        COPP_ProtectionStandard_CEA805A_TypeA_750p = &H00000040
        COPP_ProtectionStandard_CEA805A_TypeA_1125i = &H00000080
        COPP_ProtectionStandard_CEA805A_TypeB_525p = &H00000100
        COPP_ProtectionStandard_CEA805A_TypeB_750p = &H00000200
        COPP_ProtectionStandard_CEA805A_TypeB_1125i = &H00000400
        COPP_ProtectionStandard_ARIBTRB15_525i = &H00000800
        COPP_ProtectionStandard_ARIBTRB15_525p = &H00001000
        COPP_ProtectionStandard_ARIBTRB15_750p = &H00002000
        COPP_ProtectionStandard_ARIBTRB15_1125i = &H00004000
        COPP_ProtectionStandard_Mask = &H80007FFF
        COPP_ProtectionStandard_Reserved = &H7FFF8000
    End Enum
    
    Public Enum COPP_ImageAspectRatio_EN300294
        COPP_AspectRatio_EN300294_FullFormat4by3 = 0
        COPP_AspectRatio_EN300294_Box14by9Center = 1
        COPP_AspectRatio_EN300294_Box14by9Top = 2
        COPP_AspectRatio_EN300294_Box16by9Center = 3
        COPP_AspectRatio_EN300294_Box16by9Top = 4
        COPP_AspectRatio_EN300294_BoxGT16by9Center = 5
        COPP_AspectRatio_EN300294_FullFormat4by3ProtectedCenter = 6
        COPP_AspectRatio_EN300294_FullFormat16by9Anamorphic = 7
        COPP_AspectRatio_ForceDWORD = &H7fffffff
        COPP_ImageAspectRatio_EN300294_Mask = &H00000007
    End Enum
    
    Public Type DXVA_COPPStatusInput
        rApp As UUID '   16 bytes
        guidStatusRequestID As UUID '   16 bytes
        dwSequence As Long '    4 bytes
        cbSizeData As Long '    4 bytes
        StatusData(0 To 4055) As Byte ' 4056 bytes (4056+4+4+16+16 = 4096)
    End Type
    
    Public Type DXVA_COPPStatusOutput
        macKDI As UUID '   16 bytes
        cbSizeData As Long '    4 bytes
        COPPStatus(0 To 4075) As Byte ' 4076 bytes (4076+16+4 = 4096)
    End Type
    
    Public Enum COPP_StatusFlags
        COPP_StatusNormal = &H00
        COPP_LinkLost = &H01
        COPP_RenegotiationRequired = &H02
        COPP_StatusFlagsReserved = &HFFFFFFFC
    End Enum
    
    Public Type DXVA_COPPStatusData
        rApp As UUID
        dwFlags As COPP_StatusFlags ' See COPP_StatusFlags above
        dwData As Long
        ExtendedInfoValidMask As Long
        ExtendedInfoData As Long
    End Type
    
    Public Type DXVA_COPPStatusDisplayData
        rApp As UUID
        dwFlags As COPP_StatusFlags ' See COPP_StatusFlags above
        DisplayWidth As Long
        DisplayHeight As Long
        Format As Long ' also contains extended color data
        d3dFormat As D3DFORMAT
        FreqNumerator As Long
        FreqDenominator As Long
    End Type
    
    Public Enum COPP_StatusHDCPFlags
        COPP_HDCPRepeater = &H01
        COPP_HDCPFlagsReserved = &HFFFFFFFE
    End Enum
    
    Public Type DXVA_COPPStatusHDCPKeyData
        rApp As UUID
        dwFlags As COPP_StatusFlags ' See COPP_StatusFlags above
        dwHDCPFlags As COPP_StatusHDCPFlags ' See COPP_StatusHDCPFlags above
        BKey As UUID ' Lower 40 bits
        Reserved1 As UUID
        Reserved2 As UUID
    End Type
    
    Public Const DXVA_COPPQueryStatusFnCode = 5
    
    Public Function DXVA_COPPQueryConnectorType() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H81d0bfd5, &H6afe, &H48c2, &H99, &Hc0, &H95, &Ha0, &H8f, &H97, &Hc5, &Hda)
    DXVA_COPPQueryConnectorType = iid
    End Function
    
    Public Enum COPP_ConnectorType
        COPP_ConnectorType_Unknown = -1
        COPP_ConnectorType_VGA = 0
        COPP_ConnectorType_SVideo = 1
        COPP_ConnectorType_CompositeVideo = 2
        COPP_ConnectorType_ComponentVideo = 3
        COPP_ConnectorType_DVI = 4
        COPP_ConnectorType_HDMI = 5
        COPP_ConnectorType_LVDS = 6
        COPP_ConnectorType_TMDS = 7
        COPP_ConnectorType_D_JPN = 8
        COPP_ConnectorType_SDI = 9
        COPP_ConnectorType_DisplayPortExternal = 10
        COPP_ConnectorType_DisplayPortEmbedded = 11
        COPP_ConnectorType_UDIExternal = 12
        COPP_ConnectorType_UDIEmbedded = 13
        COPP_ConnectorType_Internal = &H80000000 ' can be combined with the other connector types
        COPP_ConnectorType_ForceDWORD = &H7fffffff /* force 32-bit size enum */
    End Enum
    
    Public Function DXVA_COPPQueryProtectionType() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H38f2a801, &H9a6c, &H48bb, &H91, &H07, &Hb6, &H69, &H6e, &H6f, &H17, &H97)
    DXVA_COPPQueryProtectionType = iid
    End Function
    Public Function DXVA_COPPQueryLocalProtectionLevel() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb2075857, &H3eda, &H4d5d, &H88, &Hdb, &H74, &H8f, &H8c, &H1a, &H05, &H49)
    DXVA_COPPQueryLocalProtectionLevel = iid
    End Function
    Public Function DXVA_COPPQueryGlobalProtectionLevel() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1957210a, &H7766, &H452a, &Hb9, &H9a, &Hd2, &H7a, &Hed, &H54, &Hf0, &H3a)
    DXVA_COPPQueryGlobalProtectionLevel = iid
    End Function
    Public Function DXVA_COPPQueryDisplayData() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd7bf1ba3, &Had13, &H4f8e, &Haf, &H98, &H0d, &Hcb, &H3c, &Ha2, &H04, &Hcc)
    DXVA_COPPQueryDisplayData = iid
    End Function
    Public Function DXVA_COPPQueryHDCPKeyData() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hdb59d74, &Ha992, &H492e, &Ha0, &Hbd, &Hc2, &H3f, &Hda, &H56, &H4e, &H0)
    DXVA_COPPQueryHDCPKeyData = iid
    End Function
    Public Function DXVA_COPPQueryBusData() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc6f4d673, &H6174, &H4184, &H8e, &H35, &Hf6, &Hdb, &H52, &H0, &Hbc, &Hba)
    DXVA_COPPQueryBusData = iid
    End Function
    
    Public Enum COPP_BusType
        COPP_BusType_Unknown = 0
        COPP_BusType_PCI = 1
        COPP_BusType_PCIX = 2
        COPP_BusType_PCIExpress = 3
        COPP_BusType_AGP = 4
        COPP_BusType_Integrated = &H80000000 ' can be combined with the other bus types
        COPP_BusType_ForceDWORD = &H7fffffff ' force 32-bit size enum */
    End Enum
    
    Public Function DXVA_COPPQuerySignaling() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6629a591, &H3b79, &H4cf3, &H92, &H4a, &H11, &He8, &He7, &H81, &H16, &H71)
    DXVA_COPPQuerySignaling = iid
    End Function
    
    Public Type DXVA_COPPStatusSignalingCmdData
        rApp As UUID
        dwFlags As COPP_StatusFlags ' See COPP_StatusFlags above
        AvailableTVProtectionStandards As COPP_TVProtectionStandard ' See COPP_TVProtectionStandard
        ActiveTVProtectionStandard As COPP_TVProtectionStandard ' See COPP_TVProtectionStandard
        TVType As Long
        AspectRatioValidMask1 As Long
        AspectRatioData1 As COPP_ImageAspectRatio_EN300294 ' See COPP_AspectRatio_EN300294 for ETSI EN 300 294 values
        AspectRatioValidMask2 As Long
        AspectRatioData2 As Long
        AspectRatioValidMask3 As Long
        AspectRatioData3 As Long
        ExtendedInfoValidMask(0 To 3) As Long
        ExtendedInfoData(0 To 3) As Long
    End Type
    
    #Region "dxva.h"
    'dxva.h
    Public Function DXVA_ModeNone() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be00, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeNone = iid
    End Function
    Public Function DXVA_ModeH261_A() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be01, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeH261_A = iid
    End Function
    Public Function DXVA_ModeH261_B() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be02, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeH261_B = iid
    End Function
    Public Function DXVA_ModeH263_A() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be03, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeH263_A = iid
    End Function
    Public Function DXVA_ModeH263_B() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be04, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeH263_B = iid
    End Function
    Public Function DXVA_ModeH263_C() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be05, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeH263_C = iid
    End Function
    Public Function DXVA_ModeH263_D() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be06, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeH263_D = iid
    End Function
    Public Function DXVA_ModeH263_E() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be07, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeH263_E = iid
    End Function
    Public Function DXVA_ModeH263_F() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be08, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeH263_F = iid
    End Function
    Public Function DXVA_ModeMPEG1_A() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be09, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeMPEG1_A = iid
    End Function
    Public Function DXVA_ModeMPEG1_VLD() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6f3ec719, &H3735, &H42cc, &H80, &H63, &H65, &Hcc, &H3c, &Hb3, &H66, &H16)
    DXVA_ModeMPEG1_VLD = iid
    End Function
    Public Function DXVA_ModeMPEG2_A() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be0A, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeMPEG2_A = iid
    End Function
    Public Function DXVA_ModeMPEG2_B() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be0B, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeMPEG2_B = iid
    End Function
    Public Function DXVA_ModeMPEG2_C() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be0C, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeMPEG2_C = iid
    End Function
    Public Function DXVA_ModeMPEG2_D() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be0D, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeMPEG2_D = iid
    End Function
    Public Function DXVA_ModeMPEG2and1_VLD() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H86695f12, &H340e, &H4f04, &H9f, &Hd3, &H92, &H53, &Hdd, &H32, &H74, &H60)
    DXVA_ModeMPEG2and1_VLD = iid
    End Function
    Public Function DXVA_ModeH264_A() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be64, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeH264_A = iid
    End Function
    Public Function DXVA_ModeH264_B() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be65, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeH264_B = iid
    End Function
    Public Function DXVA_ModeH264_C() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be66, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeH264_C = iid
    End Function
    Public Function DXVA_ModeH264_D() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be67, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeH264_D = iid
    End Function
    Public Function DXVA_ModeH264_E() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be68, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeH264_E = iid
    End Function
    Public Function DXVA_ModeH264_F() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be69, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeH264_F = iid
    End Function
    Public Function DXVA_ModeH264_VLD_WithFMOASO_NoFGT() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd5f04ff9, &H3418, &H45d8, &H95, &H61, &H32, &Ha7, &H6a, &Hae, &H2d, &Hdd)
    DXVA_ModeH264_VLD_WithFMOASO_NoFGT = iid
    End Function
    Public Function DXVA_ModeH264_VLD_Stereo_Progressive_NoFGT() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd79be8da, &H0cf1, &H4c81, &Hb8, &H2a, &H69, &Ha4, &He2, &H36, &Hf4, &H3d)
    DXVA_ModeH264_VLD_Stereo_Progressive_NoFGT = iid
    End Function
    Public Function DXVA_ModeH264_VLD_Stereo_NoFGT() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf9aaccbb, &Hc2b6, &H4cfc, &H87, &H79, &H57, &H07, &Hb1, &H76, &H05, &H52)
    DXVA_ModeH264_VLD_Stereo_NoFGT = iid
    End Function
    Public Function DXVA_ModeH264_VLD_Multiview_NoFGT() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H705b9d82, &H76cf, &H49d6, &Hb7, &He6, &Hac, &H88, &H72, &Hdb, &H01, &H3c)
    DXVA_ModeH264_VLD_Multiview_NoFGT = iid
    End Function
    Public Function DXVA_ModeWMV8_A() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be80, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeWMV8_A = iid
    End Function
    Public Function DXVA_ModeWMV8_B() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be81, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeWMV8_B = iid
    End Function
    Public Function DXVA_ModeWMV9_A() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be90, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeWMV9_A = iid
    End Function
    Public Function DXVA_ModeWMV9_B() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be91, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeWMV9_B = iid
    End Function
    Public Function DXVA_ModeWMV9_C() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be94, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeWMV9_C = iid
    End Function
    Public Function DXVA_ModeVC1_A() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81beA0, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeVC1_A = iid
    End Function
    Public Function DXVA_ModeVC1_B() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81beA1, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeVC1_B = iid
    End Function
    Public Function DXVA_ModeVC1_C() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81beA2, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeVC1_C = iid
    End Function
    Public Function DXVA_ModeVC1_D() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81beA3, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeVC1_D = iid
    End Function
    Public Function DXVA_ModeVC1_D2010() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81beA4, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_ModeVC1_D2010 = iid
    End Function
    Public Function DXVA_ModeMPEG4pt2_VLD_Simple() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hefd64d74, &Hc9e8, &H41d7, &Ha5, &He9, &He9, &Hb0, &He3, &H9f, &Ha3, &H19)
    DXVA_ModeMPEG4pt2_VLD_Simple = iid
    End Function
    Public Function DXVA_ModeMPEG4pt2_VLD_AdvSimple_NoGMC() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hed418a9f, &H010d, &H4eda, &H9a, &He3, &H9a, &H65, &H35, &H8d, &H8d, &H2e)
    DXVA_ModeMPEG4pt2_VLD_AdvSimple_NoGMC = iid
    End Function
    Public Function DXVA_ModeMPEG4pt2_VLD_AdvSimple_GMC() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hab998b5b, &H4258, &H44a9, &H9f, &Heb, &H94, &He5, &H97, &Ha6, &Hba, &Hae)
    DXVA_ModeMPEG4pt2_VLD_AdvSimple_GMC = iid
    End Function
    Public Function DXVA_ModeHEVC_VLD_Main() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5b11d51b, &H2f4c, &H4452, &Hbc, &Hc3, &H09, &Hf2, &Ha1, &H16, &H0c, &Hc0)
    DXVA_ModeHEVC_VLD_Main = iid
    End Function
    Public Function DXVA_ModeHEVC_VLD_Main10() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H107af0e0, &Hef1a, &H4d19, &Hab, &Ha8, &H67, &Ha1, &H63, &H07, &H3d, &H13)
    DXVA_ModeHEVC_VLD_Main10 = iid
    End Function
    Public Function DXVA_ModeHEVC_VLD_Monochrome() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0685b993, &H3d8c, &H43a0, &H8b, &H28, &Hd7, &H4c, &H2d, &H68, &H99, &Ha4)
    DXVA_ModeHEVC_VLD_Monochrome = iid
    End Function
    Public Function DXVA_ModeHEVC_VLD_Monochrome10() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H142a1d0f, &H69dd, &H4ec9, &H85, &H91, &Hb1, &H2f, &Hfc, &Hb9, &H1a, &H29)
    DXVA_ModeHEVC_VLD_Monochrome10 = iid
    End Function
    Public Function DXVA_ModeHEVC_VLD_Main12() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1a72925f, &H0c2c, &H4f15, &H96, &Hfb, &Hb1, &H7d, &H14, &H73, &H60, &H3f)
    DXVA_ModeHEVC_VLD_Main12 = iid
    End Function
    Public Function DXVA_ModeHEVC_VLD_Main10_422() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0bac4fe5, &H1532, &H4429, &Ha8, &H54, &Hf8, &H4d, &He0, &H49, &H53, &Hdb)
    DXVA_ModeHEVC_VLD_Main10_422 = iid
    End Function
    Public Function DXVA_ModeHEVC_VLD_Main12_422() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H55bcac81, &Hf311, &H4093, &Ha7, &Hd0, &H1c, &Hbc, &H0b, &H84, &H9b, &Hee)
    DXVA_ModeHEVC_VLD_Main12_422 = iid
    End Function
    Public Function DXVA_ModeHEVC_VLD_Main_444() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4008018f, &Hf537, &H4b36, &H98, &Hcf, &H61, &Haf, &H8a, &H2c, &H1a, &H33)
    DXVA_ModeHEVC_VLD_Main_444 = iid
    End Function
    Public Function DXVA_ModeHEVC_VLD_Main10_Ext() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9cc55490, &He37c, &H4932, &H86, &H84, &H49, &H20, &Hf9, &Hf6, &H40, &H9c)
    DXVA_ModeHEVC_VLD_Main10_Ext = iid
    End Function
    Public Function DXVA_ModeHEVC_VLD_Main10_444() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0dabeffa, &H4458, &H4602, &Hbc, &H03, &H07, &H95, &H65, &H9d, &H61, &H7c)
    DXVA_ModeHEVC_VLD_Main10_444 = iid
    End Function
    Public Function DXVA_ModeHEVC_VLD_Main12_444() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9798634d, &Hfe9d, &H48e5, &Hb4, &Hda, &Hdb, &Hec, &H45, &Hb3, &Hdf, &H01)
    DXVA_ModeHEVC_VLD_Main12_444 = iid
    End Function
    Public Function DXVA_ModeHEVC_VLD_Main16() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha4fbdbb0, &Ha113, &H482b, &Ha2, &H32, &H63, &H5c, &Hc0, &H69, &H7f, &H6d)
    DXVA_ModeHEVC_VLD_Main16 = iid
    End Function
    Public Function DXVA_ModeVP9_VLD_Profile0() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H463707f8, &Ha1d0, &H4585, &H87, &H6d, &H83, &Haa, &H6d, &H60, &Hb8, &H9e)
    DXVA_ModeVP9_VLD_Profile0 = iid
    End Function
    Public Function DXVA_ModeVP9_VLD_10bit_Profile2() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha4c749ef, &H6ecf, &H48aa, &H84, &H48, &H50, &Ha7, &Ha1, &H16, &H5f, &Hf7)
    DXVA_ModeVP9_VLD_10bit_Profile2 = iid
    End Function
    Public Function DXVA_ModeVP8_VLD() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H90b899ea, &H3a62, &H4705, &H88, &Hb3, &H8d, &Hf0, &H4b, &H27, &H44, &He7)
    DXVA_ModeVP8_VLD = iid
    End Function
    Public Function DXVA_ModeAV1_VLD_Profile0() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb8be4ccb, &Hcf53, &H46ba, &H8d, &H59, &Hd6, &Hb8, &Ha6, &Hda, &H5d, &H2a)
    DXVA_ModeAV1_VLD_Profile0 = iid
    End Function
    Public Function DXVA_ModeAV1_VLD_Profile1() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6936ff0f, &H45b1, &H4163, &H9c, &Hc1, &H64, &H6e, &Hf6, &H94, &H61, &H08)
    DXVA_ModeAV1_VLD_Profile1 = iid
    End Function
    Public Function DXVA_ModeAV1_VLD_Profile2() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0c5f2aa1, &He541, &H4089, &Hbb, &H7b, &H98, &H11, &H0a, &H19, &Hd7, &Hc8)
    DXVA_ModeAV1_VLD_Profile2 = iid
    End Function
    Public Function DXVA_ModeAV1_VLD_12bit_Profile2() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H17127009, &Ha00f, &H4ce1, &H99, &H4e, &Hbf, &H40, &H81, &Hf6, &Hf3, &Hf0)
    DXVA_ModeAV1_VLD_12bit_Profile2 = iid
    End Function
    Public Function DXVA_ModeAV1_VLD_12bit_Profile2_420() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2d80bed6, &H9cac, &H4835, &H9e, &H91, &H32, &H7b, &Hbc, &H4f, &H9e, &He8)
    DXVA_ModeAV1_VLD_12bit_Profile2_420 = iid
    End Function
    Public Function DXVA_ModeMJPEG_VLD_420() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H725cb506, &H0c29, &H43c4, &H94, &H40, &H8e, &H93, &H97, &H90, &H3a, &H04)
    DXVA_ModeMJPEG_VLD_420 = iid
    End Function
    Public Function DXVA_ModeMJPEG_VLD_422() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5b77b9cd, &H1a35, &H4c30, &H9f, &Hd8, &Hef, &H4b, &H60, &Hc0, &H35, &Hdd)
    DXVA_ModeMJPEG_VLD_422 = iid
    End Function
    Public Function DXVA_ModeMJPEG_VLD_444() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd95161f9, &H0d44, &H47e6, &Hbc, &Hf5, &H1b, &Hfb, &Hfb, &H26, &H8f, &H97)
    DXVA_ModeMJPEG_VLD_444 = iid
    End Function
    Public Function DXVA_ModeMJPEG_VLD_4444() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc91748d5, &Hfd18, &H4aca, &H9d, &Hb3, &H3a, &H66, &H34, &Hab, &H54, &H7d)
    DXVA_ModeMJPEG_VLD_4444 = iid
    End Function
    Public Function DXVA_ModeJPEG_VLD_420() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hcf782c83, &Hbef5, &H4a2c, &H87, &Hcb, &H60, &H19, &He7, &Hb1, &H75, &Hac)
    DXVA_ModeJPEG_VLD_420 = iid
    End Function
    Public Function DXVA_ModeJPEG_VLD_422() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf04df417, &Heee2, &H4067, &Ha7, &H78, &Hf3, &H5c, &H15, &Hab, &H97, &H21)
    DXVA_ModeJPEG_VLD_422 = iid
    End Function
    Public Function DXVA_ModeJPEG_VLD_444() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4cd00e17, &H89ba, &H48ef, &Hb9, &Hf9, &Hed, &Hcb, &H82, &H71, &H3f, &H65)
    DXVA_ModeJPEG_VLD_444 = iid
    End Function
    Public Function DXVA_NoEncrypt() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81beD0, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
    DXVA_NoEncrypt = iid
    End Function
    Public Function DXVA_ModeWMV8_PostProc() As UUID: Return DXVA_ModeWMV8_A: End Function
    Public Function DXVA_ModeWMV8_MoComp() As UUID: Return DXVA_ModeWMV8_B: End Function

    Public Function DXVA_ModeWMV9_PostProc() As UUID: Return DXVA_ModeWMV9_A: End Function
    Public Function DXVA_ModeWMV9_MoComp() As UUID: Return DXVA_ModeWMV9_B: End Function
    Public Function DXVA_ModeWMV9_IDCT() As UUID: Return DXVA_ModeWMV9_C: End Function

    Public Function DXVA_ModeVC1_PostProc() As UUID: Return DXVA_ModeVC1_A: End Function
    Public Function DXVA_ModeVC1_MoComp() As UUID: Return DXVA_ModeVC1_B: End Function
    Public Function DXVA_ModeVC1_IDCT() As UUID: Return DXVA_ModeVC1_C: End Function
    Public Function DXVA_ModeVC1_VLD() As UUID: Return DXVA_ModeVC1_D: End Function

    Public Function DXVA_ModeH264_MoComp_NoFGT() As UUID: Return DXVA_ModeH264_A: End Function
    Public Function DXVA_ModeH264_MoComp_FGT() As UUID: Return DXVA_ModeH264_B: End Function
    Public Function DXVA_ModeH264_IDCT_NoFGT() As UUID: Return DXVA_ModeH264_C: End Function
    Public Function DXVA_ModeH264_IDCT_FGT() As UUID: Return DXVA_ModeH264_D: End Function
    Public Function DXVA_ModeH264_VLD_NoFGT() As UUID: Return DXVA_ModeH264_E: End Function
    Public Function DXVA_ModeH264_VLD_FGT() As UUID: Return DXVA_ModeH264_F: End Function
    
    Public Enum DxvaRestrictedModes
        DXVA_RESTRICTED_MODE_UNRESTRICTED = &HFFFF&
        DXVA_RESTRICTED_MODE_H261_A = 1
        DXVA_RESTRICTED_MODE_H261_B = 2
        DXVA_RESTRICTED_MODE_H263_A = 3
        DXVA_RESTRICTED_MODE_H263_B = 4
        DXVA_RESTRICTED_MODE_H263_C = 5
        DXVA_RESTRICTED_MODE_H263_D = 6
        DXVA_RESTRICTED_MODE_H263_E = 7
        DXVA_RESTRICTED_MODE_H263_F = 8
        DXVA_RESTRICTED_MODE_MPEG1_A = 9
        DXVA_RESTRICTED_MODE_MPEG2_A = &HA
        DXVA_RESTRICTED_MODE_MPEG2_B = &HB
        DXVA_RESTRICTED_MODE_MPEG2_C = &HC
        DXVA_RESTRICTED_MODE_MPEG2_D = &HD
        DXVA_RESTRICTED_MODE_MPEG1_VLD = &H10
        DXVA_RESTRICTED_MODE_MPEG2and1_VLD = &H11
        DXVA_RESTRICTED_MODE_H264_A = &H64
        DXVA_RESTRICTED_MODE_H264_B = &H65
        DXVA_RESTRICTED_MODE_H264_C = &H66
        DXVA_RESTRICTED_MODE_H264_D = &H67
        DXVA_RESTRICTED_MODE_H264_E = &H68
        DXVA_RESTRICTED_MODE_H264_F = &H69
        DXVA_RESTRICTED_MODE_H264_VLD_WITHFMOASO_NOFGT = &H70
        DXVA_RESTRICTED_MODE_H264_VLD_STEREO_PROGRESSIVE_NOFGT = &H71
        DXVA_RESTRICTED_MODE_H264_VLD_STEREO_NOFGT = &H72
        DXVA_RESTRICTED_MODE_H264_VLD_MULTIVIEW_NOFGT = &H73
        DXVA_RESTRICTED_MODE_WMV8_A = &H80
        DXVA_RESTRICTED_MODE_WMV8_B = &H81
        DXVA_RESTRICTED_MODE_WMV9_A = &H90
        DXVA_RESTRICTED_MODE_WMV9_B = &H91
        DXVA_RESTRICTED_MODE_WMV9_C = &H94
        DXVA_RESTRICTED_MODE_VC1_A = &HA0
        DXVA_RESTRICTED_MODE_VC1_B = &HA1
        DXVA_RESTRICTED_MODE_VC1_C = &HA2
        DXVA_RESTRICTED_MODE_VC1_D = &HA3
        DXVA_RESTRICTED_MODE_VC1_D2010 = &HA4
        DXVA_RESTRICTED_MODE_MPEG4PT2_VLD_SIMPLE = &HB0
        DXVA_RESTRICTED_MODE_MPEG4PT2_VLD_ADV_SIMPLE_NOGMC = &HB1
        DXVA_RESTRICTED_MODE_MPEG4PT2_VLD_ADV_SIMPLE_GMC = &HB2
        DXVA_RESTRICTED_MODE_WMV8_POSTPROC = DXVA_RESTRICTED_MODE_WMV8_A
        DXVA_RESTRICTED_MODE_WMV8_MOCOMP = DXVA_RESTRICTED_MODE_WMV8_B
        DXVA_RESTRICTED_MODE_WMV9_POSTPROC = DXVA_RESTRICTED_MODE_WMV9_A
        DXVA_RESTRICTED_MODE_WMV9_MOCOMP = DXVA_RESTRICTED_MODE_WMV9_B
        DXVA_RESTRICTED_MODE_WMV9_IDCT = DXVA_RESTRICTED_MODE_WMV9_C
        DXVA_RESTRICTED_MODE_VC1_POSTPROC = DXVA_RESTRICTED_MODE_VC1_A
        DXVA_RESTRICTED_MODE_VC1_MOCOMP = DXVA_RESTRICTED_MODE_VC1_B
        DXVA_RESTRICTED_MODE_VC1_IDCT = DXVA_RESTRICTED_MODE_VC1_C
        DXVA_RESTRICTED_MODE_VC1_VLD = DXVA_RESTRICTED_MODE_VC1_D
        DXVA_RESTRICTED_MODE_H264_MOCOMP_NOFGT = DXVA_RESTRICTED_MODE_H264_A
        DXVA_RESTRICTED_MODE_H264_MOCOMP_FGT = DXVA_RESTRICTED_MODE_H264_B
        DXVA_RESTRICTED_MODE_H264_IDCT_NOFGT = DXVA_RESTRICTED_MODE_H264_C
        DXVA_RESTRICTED_MODE_H264_IDCT_FGT = DXVA_RESTRICTED_MODE_H264_D
        DXVA_RESTRICTED_MODE_H264_VLD_NOFGT = DXVA_RESTRICTED_MODE_H264_E
        DXVA_RESTRICTED_MODE_H264_VLD_FGT = DXVA_RESTRICTED_MODE_H264_F
    End Enum
     
    
    Public Enum Dxva_bDXVA_Func
        DXVA_PICTURE_DECODING_FUNCTION = 1
        DXVA_ALPHA_BLEND_DATA_LOAD_FUNCTION = 2
        DXVA_ALPHA_BLEND_COMBINATION_FUNCTION = 3
        DXVA_PICTURE_RESAMPLE_FUNCTION = 4
        DXVA_DEBLOCKING_FILTER_FUNCTION = 5
        DXVA_FILM_GRAIN_SYNTHESIS_FUNCTION = 6
        DXVA_STATUS_REPORTING_FUNCTION = 7
    End Enum
    
    Public Enum DxvaExecuteReturns
        DXVA_EXECUTE_RETURN_OK = 0
        DXVA_EXECUTE_RETURN_DATA_ERROR_MINOR = 1
        DXVA_EXECUTE_RETURN_DATA_ERROR_SIGNIF = 2
        DXVA_EXECUTE_RETURN_DATA_ERROR_SEVERE = 3
        DXVA_EXECUTE_RETURN_OTHER_ERROR_SEVERE = 4
    End Enum
    
    [PackingAlignment(1)]
    Public Type DXVA_ConnectMode
        guidMode As UUID
        wRestrictedMode As Integer
    End Type
    
 
    'todo
    ' #define readDXVA_QueryOrReplyFuncFlag(ptr)        ((*(ptr)) >> 8)

    ' #define readDXVA_QueryOrReplyFuncFlag_ACCEL(ptr)  (((*(ptr)) >> 11) & 1)
    ' #define readDXVA_QueryOrReplyFuncFlag_LOCK(ptr)   (((*(ptr)) >> 10) & 1)
    ' #define readDXVA_QueryOrReplyFuncFlag_BAD(ptr)    (((*(ptr)) >>  9) & 1)
    ' #define readDXVA_QueryOrReplyFuncFlag_PLUS(ptr)   (((*(ptr)) >>  8) & 1)

    ' #define readDXVA_QueryOrReplyFuncFunc(ptr)        ((*(ptr)) & 0xFF)

    ' #define writeDXVA_QueryOrReplyFunc(ptr, flg, fnc) ((*(ptr)) = ((flg) << 8) | (fnc))

    ' #define setDXVA_QueryOrReplyFuncFlag(ptr, flg) ((*(ptr)) |= ((flg) << 8))
    ' #define setDXVA_QueryOrReplyFuncFunc(ptr, fnc) ((*(ptr)) |= (fnc));
    
    Public Enum DXVA_EncryptProtocolFunc
        DXVA_ENCRYPTPROTOCOLFUNCFLAG_HOST = &HFFFF00
        DXVA_ENCRYPTPROTOCOLFUNCFLAG_ACCEL = &HFFFF08
    End Enum
    
    'TODO
    ' #define readDXVA_EncryptProtocolFuncFlag(ptr)        ((*(ptr)) >> 8)
    ' #define readDXVA_EncryptProtocolFuncFlag_ACCEL(ptr)  (((*(ptr)) >> 11) & 1)

    ' #define readDXVA_EncryptProtocolFuncFunc(ptr)        ((*(ptr)) & 0xFF)

    ' #define writeDXVA_EncryptProtocolFunc(ptr, flg, fnc) ((*(ptr)) = ((flg) << 8) | (fnc))

    ' #define setDXVA_EncryptProtocolFuncFlag(ptr, flg) ((*(ptr)) |= ((flg) << 8))
    ' #define setDXVA_EncryptProtocolFuncFunc(ptr, fnc) ((*(ptr)) |= (fnc));
    
    Public Type DXVA_EncryptProtocolHeader
        dwFunction As DXVA_EncryptProtocolFunc
        ReservedBits(0 To 2) As Long
        guidEncryptProtocol As UUID
    End Type
 
    Public Type DXVA_PicResample
        wPicResampleSourcePicIndex As Integer
        wPicResampleDestPicIndex As Integer
        wPicResampleRcontrol As Integer
        bPicResampleExtrapWidth As Byte
        bPicResampleExtrapHeight As Byte
        dwPicResampleSourceWidth As Long
        dwPicResampleSourceHeight As Long
        dwPicResampleDestWidth As Long
        dwPicResampleDestHeight As Long
        dwPicResampleFullDestWidth As Long
        dwPicResampleFullDestHeight As Long
    End Type
    
    Public Enum DxvaChromaFormats
        DXVA_CHROMA_FORMAT_420 = 1
        DXVA_CHROMA_FORMAT_422 = 2
        DXVA_CHROMA_FORMAT_444 = 3
    End Enum
    
    Public Enum DxvaPictureStructs
        DXVA_PICTURE_STRUCTURE_TOP_FIELD = 1
        DXVA_PICTURE_STRUCTURE_BOTTOM_FIELD = 2
        DXVA_PICTURE_STRUCTURE_FRAME = 3
    End Enum
    
    Public Enum DxvaBiDiAvg
        DXVA_BIDIRECTIONAL_AVERAGING_MPEG2_ROUND = 0
        DXVA_BIDIRECTIONAL_AVERAGING_H263_TRUNC = 1
    End Enum
    
    Public Enum DxvaMvPrecisAndCR
        DXVA_MV_PRECISION_AND_CHROMA_RELATION_MPEG2 = 0
        DXVA_MV_PRECISION_AND_CHROMA_RELATION_H263 = 1
        DXVA_MV_PRECISION_AND_CHROMA_RELATION_H261 = 2
    End Enum
    
    Public Enum DxvaScanMethods
        DXVA_SCAN_METHOD_ZIG_ZAG = 0
        DXVA_SCAN_METHOD_ALTERNATE_VERTICAL = 1
        DXVA_SCAN_METHOD_ALTERNATE_HORIZONTAL = 2
        DXVA_SCAN_METHOD_ARBITRARY = 3
    End Enum
    
    Public Enum DxvaBitstrmConcealmentNeed
        DXVA_BITSTREAM_CONCEALMENT_NEED_UNLIKELY = 0
        DXVA_BITSTREAM_CONCEALMENT_NEED_MILD = 1
        DXVA_BITSTREAM_CONCEALMENT_NEED_LIKELY = 2
        DXVA_BITSTREAM_CONCEALMENT_NEED_SEVERE = 3
    End Enum
    
    Public Enum DxvaBitstrmConcealmentMethod
        DXVA_BITSTREAM_CONCEALMENT_METHOD_UNSPECIFIED = 0
        DXVA_BITSTREAM_CONCEALMENT_METHOD_INTRA = 1
        DXVA_BITSTREAM_CONCEALMENT_METHOD_FORWARD = 2
        DXVA_BITSTREAM_CONCEALMENT_METHOD_BACKWARD = 3
    End Enum
    
    Public Type DXVA_TCoef4Group
        TCoefIDX(0 To 3) As Byte
        TCoefValue(0 To 3) As Integer
    End Type
    
    Public Type DXVA_TCoefSingle
        wIndexWithEOB As Integer
        TCoefValue As Integer
    End Type
    
    'TODO:
    ' /* Macros for Reading EOB and Index Values */

    ' #define readDXVA_TCoefSingleIDX(ptr) ((ptr)->wIndexWithEOB >> 1)
    ' #define readDXVA_TCoefSingleEOB(ptr) ((ptr)->wIndexWithEOB & 1)

    ' /* Macro for Writing EOB and Index Values */

    ' #define writeDXVA_TCoefSingleIndexWithEOB(ptr, idx, eob) ((ptr)->wIndexWithEOB = ((idx) << 1) | (eob))
    ' #define setDXVA_TCoefSingleIDX(ptr, idx) ((ptr)->wIndexWithEOB |= ((idx) << 1))
    ' #define setDXVA_TCoefSingleEOB(ptr)      ((ptr)->wIndexWithEOB |= 1)
    
    Public Enum DxvaUsualBlockConsts
        DXVA_USUAL_BLOCK_WIDTH = 8
        DXVA_USUAL_BLOCK_HEIGHT = 8
        DXVA_USUAL_BLOCK_SIZE = (DXVA_USUAL_BLOCK_WIDTH * DXVA_USUAL_BLOCK_HEIGHT)
    End Enum
    
    ' typedef SHORT       DXVA_Sample16[DXVA_USUAL_BLOCK_SIZE];
    ' typedef signed char DXVA_Sample8 [DXVA_USUAL_BLOCK_SIZE];

    ' /* Deblocking Filter Control Structure */

    ' typedef BYTE DXVA_DeblockingEdgeControl;
    'Alias DXVA_DeblockingEdgeControl As Byte
    ' typedef DXVA_DeblockingEdgeControl * LPDXVA_DeblockingEdgeControl;
    
    'TODO:
    ' /* Macros for Reading STRENGTH and FilterOn */

    ' #define readDXVA_EdgeFilterStrength(ptr) ((*(ptr)) >> 1)
    ' #define readDXVA_EdgeFilterOn(ptr)       ((*(ptr)) & 1)

    ' /* Macro for Writing STRENGTH and FilterOn */

    ' #define writeDXVA_DeblockingEdgeControl(ptr, str, fon) ((*(ptr)) = ((str) << 1) | (fon))
    ' #define setDXVA_EdgeFilterStrength(ptr, str)           ((*(ptr)) |= ((str) << 1))
    ' #define setDXVA_EdgeFilterOn(ptr)                      ((*(ptr)) |= 1)
    
    
    Public Type DXVA_MVvalue
        horz As Integer
        vert As Integer
    End Type
    
    [Description("IMPORTANT: Dimension order reversed per C-VBx/tB difference.")]
    Public Type DXVA_QmatrixData
        bNewQmatrix(0 To 3) As Byte
        [Description("IMPORTANT: Dimension order reversed per C-VBx/tB difference.")]
        Qmatrix(0 To ((DXVA_USUAL_BLOCK_WIDTH * DXVA_USUAL_BLOCK_HEIGHT) - 1), 0 To 3) As Integer
    End Type
    
    [PackingAlignment(1)]
    Public Type DXVA_SliceInfo
        wHorizontalPosition As Integer
        wVerticalPosition As Integer
        dwSliceBitsInBuffer As Long
        dwSliceDataLocation As Long
        bStartCodeBitOffset As Byte
        bReservedBits As Byte
        wMBbitOffset As Integer
        wNumberMBsInSlice As Integer
        wQuantizerScaleCode As Integer
        wBadSliceChopping As Integer
    End Type
    
    Public Const DXVA_NumMV_OBMC_off_BinPBwith4MV_off  = 4
    Public Const DXVA_NumMV_OBMC_off_BinPBwith4MV_on  = (4 + 1)
    Public Const DXVA_NumMV_OBMC_on__BinPB_off  = (10)
    Public Const DXVA_NumMV_OBMC_on__BinPB_on  = (11) /* not current standards */
    Public Const DXVA_NumBlocksPerMB_420  = (4 + 2 + 0)
    Public Const DXVA_NumBlocksPerMB_422  = (4 + 2 + 2)
    Public Const DXVA_NumBlocksPerMB_444  = (4 + 4 + 4)
    
    Public Type DXVA_MBctrl_I_HostResidDiff_1
        wMBaddress As Integer
        wMBtype As Integer
        dwMB_SNL As Long
        wPatternCode As Integer
        wPC_Overflow As Integer  ' zero if not overflow format
        dwReservedBits2 As Long
    End Type
    
    Public Type DXVA_MBctrl_I_OffHostIDCT_1
        wMBaddress As Integer
        wMBtype As Integer
        dwMB_SNL As Long
        wPatternCode As Integer
        bNumCoef(0 To (DXVA_NumBlocksPerMB_420 - 1)) As Byte
    End Type
    
    Public Type DXVA_MBctrl_P_HostResidDiff_1
        wMBaddress As Integer
        wMBtype As Integer
        dwMB_SNL As Long
        wPatternCode As Integer
        wPC_Overflow As Integer ' zero if not overflow format  
        dwReservedBits2 As Long
        MVector(0 To (DXVA_NumMV_OBMC_off_BinPBwith4MV_off - 1)) As DXVA_MVvalue
    End Type
    
    Public Type DXVA_MBctrl_P_OffHostIDCT_1
        wMBaddress As Integer
        wMBtype As Integer
        dwMB_SNL As Long
        wPatternCode As Integer
        bNumCoef(0 To (DXVA_NumBlocksPerMB_420 - 1)) As Byte
        MVector(0 To (DXVA_NumMV_OBMC_off_BinPBwith4MV_off - 1)) As DXVA_MVvalue
    End Type
    
    [PackingAlignment(1)]
    Public Type DXVA_ConfigAlphaLoad
        ' Operation Indicated
        dwFunction As DXVA_ConfigQueryOrReplyFunc
        ' Alignment
        dwReservedBits(0 To 2) As Long
        /* [TypeHint(DxvaConfigDataType)] */ bConfigDataType As Byte
    End Type
    
    Public Enum DxvaConfigDataType
        DXVA_CONFIG_DATA_TYPE_IA44 = 0
        DXVA_CONFIG_DATA_TYPE_AI44 = 1
        DXVA_CONFIG_DATA_TYPE_DPXD = 2
        DXVA_CONFIG_DATA_TYPE_AYUV = 3
    End Enum
    
    [PackingAlignment(1)]
    Public Type DXVA_ConfigAlphaCombine
        ' Operation Indicated
        dwFunction As DXVA_ConfigQueryOrReplyFunc
        ' Alignment
        dwReservedBits(0 To 2) As Long
        /* [TypeHint(DxvaConfigBlendType)] */ bConfigBlendType As Byte
        bConfigPictureResizing As Byte
        bConfigOnlyUsePicDestRectArea As Byte
        bConfigGraphicResizing As Byte
        bConfigWholePlaneAlpha As Byte
    End Type
    
    Public Enum DxvaConfigBlendType
        DXVA_CONFIG_BLEND_TYPE_FRONT_BUFFER = 0
        DXVA_CONFIG_BLEND_TYPE_BACK_HARDWARE = 1
    End Enum
    
    'TODO
    ' typedef BYTE DXVA_IA44sample, *LPDXVA_IA44sample;

    ' #define readDXVA_IA44index(ptr) (((*(ptr)) & 0xF0) >> 4)
    ' #define readDXVA_IA44alpha(ptr)  ((*(ptr)) & 0x0F)

    ' #define writeDXVA_IA44(ptr, idx, alpha) ((*(ptr)) = (((idx) << 4) | (alpha)))

    ' #define setDXVA_IA44index(ptr, idx)    ((*(ptr)) |= ((idx) << 4))
    ' #define setDXVA_IA44alpha(ptr, alpha)  ((*(ptr)) |= (alpha))

    ' /* Macros for AI44 alpha blending surface samples */

    ' typedef BYTE DXVA_AI44sample, *LPDXVA_AI44sample;
    'Alias DXVA_AI44sample As Byte
    ' #define readDXVA_AI44index(ptr)  ((*(ptr)) & 0x0F)
    ' #define readDXVA_AI44alpha(ptr) (((*(ptr)) & 0xF0) >> 4)

    ' #define writeDXVA_AI44(ptr, idx, alpha) ((*(ptr)) = (((alpha) << 4) | (idx)))

    ' #define setDXVA_AI44index(ptr, idx)    ((*(ptr)) |= (idx))
    ' #define setDXVA_AI44alpha(ptr, alpha)  ((*(ptr)) |= ((alpha) << 4))
    
    [PackingAlignment(1)]
    Public Type DXVA_Highlight
        wHighlightActive As Integer
        wHighlightIndices As Integer
        wHighlightAlphas As Integer
        HighlightRect As RECT
    End Type
    
    ' typedef BYTE DXVA_DPXD,  *LPDXVA_DPXD;
    'Alias DXVA_DPXD As Byte
    ' typedef WORD DXVA_DCCMD, *LPDXVA_DCCMD;
    'Alias DXVA_DCCMD As Integer
    
    Public Type DXVA_BlendCombination
        wPictureSourceIndex As Integer
        wBlendedDestinationIndex As Integer
        PictureSourceRect16thPel As RECT
        PictureDestinationRect As RECT
        GraphicSourceRect As RECT
        GraphicDestinationRect As RECT
        wBlendDelay As Integer
        bBlendOn As Byte
        bWholePlaneAlpha As Byte
        OutsideYUVcolor As DXVA_AYUVsample2
    End Type
    
    Public Type DXVA_PicEntry_H264
        ' union {
          ' struct {
            ' UCHAR  Index7Bits      : 7;
            ' UCHAR  AssociatedFlag  : 1;
          ' };
          ' UCHAR  bPicEntry;
        ' };
        u As Byte
    End Type
    
    [Description("IMPORTANT: Array dimensions swapped vs C per VBx/tB ordering difference.")]
    [PackingAlignment(1)]
    Public Type DXVA_PicParams_H264
        wFrameWidthInMbsMinus1 As Integer
        wFrameHeightInMbsMinus1 As Integer
        CurrPic As DXVA_PicEntry_H264  ' flag is bot field flag
        num_ref_frames As Byte
        'union {
        '  struct {
        '    USHORT  field_pic_flag                 : 1;
        '    USHORT  MbaffFrameFlag                 : 1;
        '    USHORT  residual_colour_transform_flag : 1;
        '    USHORT  sp_for_switch_flag             : 1;
        '    USHORT  chroma_format_idc              : 2;
        '    USHORT  RefPicFlag                     : 1;
        '    USHORT  constrained_intra_pred_flag    : 1;
        '    USHORT  weighted_pred_flag             : 1;
        '    USHORT  weighted_bipred_idc            : 2;
        '    USHORT  MbsConsecutiveFlag             : 1;
        '    USHORT  frame_mbs_only_flag            : 1;
        '    USHORT  transform_8x8_mode_flag        : 1;
        '    USHORT  MinLumaBipredSize8x8Flag       : 1;
        '    USHORT  IntraPicFlag                   : 1;
        '  };
        '  USHORT  wBitFields;
        '};
        wBitFields As Integer
        bit_depth_luma_minus8 As Byte
        bit_depth_chroma_minus8 As Byte
        Reserved16Bits As Integer
        StatusReportFeedbackNumber As Long
        RefFrameList(0 To 15) As DXVA_PicEntry_H264  'flag LT
        CurrFieldOrderCnt(0 To 1) As Long
        [Description("IMPORTANT: Array dimensions swapped vs C per VBx/tB ordering difference.")]
        FieldOrderCntList(0 To 1, 0 To 15) As Long
        pic_init_qs_minus26 As Byte
        chroma_qp_index_offset As Byte' also used for QScb
        second_chroma_qp_index_offset As Byte ' also for QScr
        ContinuationFlag As Byte
        ' remainder for parsing
        pic_init_qp_minus26 As Byte
        num_ref_idx_l0_active_minus1 As Byte
        num_ref_idx_l1_active_minus1 As Byte
        Reserved8BitsA As Byte
        FrameNumList(0 To 15) As Integer
        UsedForReferenceFlags As Long
        NonExistingFrameFlags As Integer
        frame_num As Integer
        log2_max_frame_num_minus4 As Byte
        pic_order_cnt_type As Byte
        log2_max_pic_order_cnt_lsb_minus4 As Byte
        delta_pic_order_always_zero_flag As Byte
        direct_8x8_inference_flag As Byte
        entropy_coding_mode_flag As Byte
        pic_order_present_flag As Byte
        num_slice_groups_minus1 As Byte
        slice_group_map_type As Byte
        deblocking_filter_control_present_flag As Byte
        redundant_pic_cnt_present_flag As Byte
        Reserved8BitsB As Byte
        slice_group_change_rate_minus1 As Integer
        SliceGroupMap(809) As Byte ' 4b/sgmu, Size BT.601
    End Type
    
    [Description("IMPORTANT: Array dimensions swapped vs C per VBx/tB ordering difference.")]
    Public Type DXVA_Qmatrix_H264
        [Description("IMPORTANT: Array dimensions swapped vs C per VBx/tB ordering difference.")]
        bScalingLists4x4(0 To 15, 0 To 5) As Byte
        [Description("IMPORTANT: Array dimensions swapped vs C per VBx/tB ordering difference.")]
        bScalingLists8x8(0 To 63, 0 To 1) As Byte
    End Type
    
    [PackingAlignment(1)]
    Public Type DXVA_Slice_H264_Short
        BSNALunitDataLocation As Long ' type 1..5 */
        SliceBytesInBuffer As Long ' for off-host parse */
        wBadSliceChopping As Integer ' for off-host parse */
    End Type
    
    [Description("IMPORTANT: Array dimensions reversed vs C per VBx/tB ordering difference.")]
    [PackingAlignment(1)]
    Public Type DXVA_Slice_H264_Long
        BSNALunitDataLocation As Long ' type 1..5 */
        SliceBytesInBuffer As Long ' for off-host parse */
        wBadSliceChopping As Integer ' for off-host parse */
        first_mb_in_slice As Integer
        NumMbsForSlice As Integer
        BitOffsetToSliceData As Integer ' after CABAC alignment */
        slice_type As Byte
        luma_log2_weight_denom As Byte
        chroma_log2_weight_denom As Byte
        num_ref_idx_l0_active_minus1 As Byte
        num_ref_idx_l1_active_minus1 As Byte
        slice_alpha_c0_offset_div2 As Byte
        slice_beta_offset_div2 As Byte
        Reserved8Bits As Byte
        [Description("IMPORTANT: Array dimensions reversed vs C per VBx/tB ordering difference.")]
        RefPicList(0 To 31, 0 To 1) As DXVA_PicEntry_H264 ' L0 & L1 */
        [Description("IMPORTANT: Array dimensions reversed vs C per VBx/tB ordering difference.")]
        Weights(0 To 1, 0 To 3, 0 To 31, 0 To 1) As Integer ' L0 & L1; Y, Cb, Cr */
        slice_qs_delta As Byte
        ' rest off-host parse */
        slice_qp_delta As Byte
        redundant_pic_cnt As Byte
        direct_spatial_mv_pred_flag As Byte
        cabac_init_idc As Byte
        disable_deblocking_filter_idc As Byte
        slice_id As Integer
    End Type
    
    [PackingAlignment(1)]
    Public Type DXVA_MBctrl_H264
        'union {
        '  struct {
        '    UINT  bSliceID                : 8;   /* 1 byte */
        '    UINT  MbType5Bits             : 5;
        '    UINT  IntraMbFlag             : 1;
        '    UINT  mb_field_decoding_flag  : 1;
        '    UINT  transform_size_8x8_flag : 1;   /* 2 bytes */
        '    UINT  HostResidDiff           : 1;
        '    UINT  DcBlockCodedCrFlag      : 1;
        '    UINT  DcBlockCodedCbFlag      : 1;
        '    UINT  DcBlockCodedYFlag       : 1;
        '    UINT  FilterInternalEdgesFlag : 1;
        '    UINT  FilterLeftMbEdgeFlag    : 1;
        '    UINT  FilterTopMbEdgeFlag     : 1;
        '    UINT  ReservedBit             : 1;
        '    UINT  bMvQuantity             : 8;   /* 4 bytes */
        '  };
        '  UINT  dwMBtype;                    /* 4 bytes so far */
        '};
        dwMBtype As Long
        CurrMbAddr As Integer ' 6 bytes so far  
        wPatternCode(0 To 2) As Integer ' YCbCr, 16 4x4 blks, 1b each  
        ' 12 bytes so far  
        bQpPrime(0 To 2) As Byte ' Y, Cb, Cr, need just 7b QpY  
        bMBresidDataQuantity As Byte
        dwMBdataLocation As Long ' offset into resid buffer  
        ' 20 bytes so far */
        '  union {
        '    struct {
        '/* start here for Intra MB's  (9 useful bytes in branch) */
        '      USHORT LumaIntraPredModes[4];/* 16 blocks, 4b each */
        '                                      /* 28 bytes so far */
        '      union {
        '        struct {
        '          UCHAR  intra_chroma_pred_mode : 2;
        '          UCHAR  IntraPredAvailFlags    : 5;
        '          UCHAR  ReservedIntraBit       : 1;
        '        };
        '        UCHAR  bMbIntraStruct;        /* 29 bytes so far */
        '      };
        '      UCHAR ReservedIntra24Bits[3];   /* 32 bytes total  */
        '    };
        '    struct {
        '/* start here for non-Intra MB's (12 bytes in branch)    */
        '      UCHAR  bSubMbShapes;          /* 4 subMbs, 2b each */
        '      UCHAR  bSubMbPredModes;       /* 4 subMBs, 2b each */
        '                                      /* 22 bytes so far */
        '      USHORT wMvBuffOffset;     /* offset into MV buffer */
        '      UCHAR  bRefPicSelect[2][4];     /* 32 bytes total */
        '    };
        '  };
        u(11) As Byte
    End Type
    
    Public Type DXVA_DeblockIndexAB_H264
        bIndexAinternal As Byte ' 6b - could get from MB CC */
        bIndexBinternal As Byte ' 6b - could get from MB CC */
        bIndexAleft0 As Byte
        bIndexBleft0 As Byte
        bIndexAleft1 As Byte
        bIndexBleft1 As Byte
        bIndexAtop0 As Byte
        bIndexBtop0 As Byte
        bIndexAtop1 As Byte
        bIndexBtop1 As Byte
    End Type
    
    Public Type DXVA_Deblock_H264
        CurrMbAddr As Integer ' dup info */   /* 2 bytes so far */
        'union {
        '  struct {
        '    UCHAR  ReservedBit                : 1;
        '    UCHAR  FieldModeCurrentMbFlag     : 1; /* dup info */
        '    UCHAR  FieldModeLeftMbFlag        : 1;
        '    UCHAR  FieldModeAboveMbFlag       : 1;
        '    UCHAR  FilterInternal8x8EdgesFlag : 1;
        '    UCHAR  FilterInternal4x4EdgesFlag : 1;
        '    UCHAR  FilterLeftMbEdgeFlag       : 1;
        '    UCHAR  FilterTopMbEdgeFlag        : 1;
        '  };
        '  UCHAR  FirstByte;
        '};
        FirstByte As Byte
        Reserved8Bits As Byte ' 4 bytes so far
        bbSLongernalLeftVert As Byte ' 2 bits per bS
        bbSinternalMidVert As Byte
        bbSinternalRightVert As Byte
        bbSLongernalTopHorz As Byte ' 8 bytes so far
        bbSinternalMidHorz As Byte
        bbSinternalBotHorz As Byte ' 10 bytes so far */
        wbSLeft0 As Integer ' 4 bits per bS (1 wasted) */
        wbSLeft1 As Integer ' 4 bits per bS (1 wasted) */
        wbSTop0 As Integer ' 4 bits per bS (1 wasted) */
        wbSTop1 As Integer ' 4b (2 wasted)  18 bytes so far*/
        IndexAB(0 To 2) As DXVA_DeblockIndexAB_H264 ' Y, Cb, Cr */
    End Type
    
    [Description("IMPORTANT: Array dimensions reversed vs C per VBx/tB ordering difference.")]
    [PackingAlignment(1)]
    Public Type DXVA_FilmGrainCharacteristics
        wFrameWidthInMbsMinus1 As Integer
        wFrameHeightInMbsMinus1 As Integer
        InPic As DXVA_PicEntry_H264 ' flag is bot field flag */
        OutPic As DXVA_PicEntry_H264 ' flag is field pic flag */
        PicOrderCnt_offset As Integer
        CurrPicOrderCnt As Long
        StatusReportFeedbackNumber As Long
        model_id As Byte
        separate_colour_description_present_flag As Byte
        film_grain_bit_depth_luma_minus8 As Byte
        film_grain_bit_depth_chroma_minus8 As Byte
        film_grain_full_range_flag As Byte
        film_grain_colour_primaries As Byte
        film_grain_transfer_characteristics As Byte
        film_grain_matrix_coefficients As Byte
        blending_mode_id As Byte
        log2_scale_factor As Byte
        comp_model_present_flag(0 To 3) As Byte
        num_intensity_intervals_minus1(0 To 3) As Byte
        num_model_values_minus1(0 To 3) As Byte
        [Description("IMPORTANT: Array dimensions reversed vs C per VBx/tB ordering difference.")]
        intensity_interval_lower_bound(0 To 2, 0 To 15) As Byte
        [Description("IMPORTANT: Array dimensions reversed vs C per VBx/tB ordering difference.")]
        intensity_interval_upper_bound(0 To 2, 0 To 15) As Byte
        [Description("IMPORTANT: Array dimensions reversed vs C per VBx/tB ordering difference.")]
        comp_model_value(0 To 7, 0 To 15, 0 To 2) As Integer
    End Type
    
    Public Type DXVA_Status_H264
        StatusReportFeedbackNumber As Long
        CurrPic As DXVA_PicEntry_H264 ' flag is bot field flag  
        field_pic_flag As Byte
        bDXVA_Func As Byte
        bBufType As Byte
        bStatus As Byte
        bReserved8Bits As Byte
        wNumMbsAffected As Integer
    End Type
    
    [Description("IMPORTANT: Array dimensions reversed vs C per VBx/tB ordering difference.")]
    [PackingAlignment(1)]
    Public Type DXVA_PicParams_H264_MVC
        wFrameWidthInMbsMinus1 As Integer
        wFrameHeightInMbsMinus1 As Integer
        CurrPic As DXVA_PicEntry_H264 ' flag is bot field flag  
        num_ref_frames As Byte
        'union {
        '  struct {
        '    USHORT  field_pic_flag                 : 1;
        '    USHORT  MbaffFrameFlag                 : 1;
        '    USHORT  residual_colour_transform_flag : 1;
        '    USHORT  sp_for_switch_flag             : 1;
        '    USHORT  chroma_format_idc              : 2;
        '    USHORT  RefPicFlag                     : 1;
        '    USHORT  constrained_intra_pred_flag    : 1;
        '    USHORT  weighted_pred_flag             : 1;
        '    USHORT  weighted_bipred_idc            : 2;
        '    USHORT  MbsConsecutiveFlag             : 1;
        '    USHORT  frame_mbs_only_flag            : 1;
        '    USHORT  transform_8x8_mode_flag        : 1;
        '    USHORT  MinLumaBipredSize8x8Flag       : 1;
        '    USHORT  IntraPicFlag                   : 1;
        '  };
        '  USHORT  wBitFields;
        '};
        wBitFields As Integer
        bit_depth_luma_minus8 As Byte
        bit_depth_chroma_minus8 As Byte
        Reserved16Bits As Integer
        StatusReportFeedbackNumber As Long
        RefFrameList(0 To 15) As DXVA_PicEntry_H264 ' flag LT */
        CurrFieldOrderCnt(0 To 1) As Long
        [Description("IMPORTANT: Array dimensions reversed vs C per VBx/tB ordering difference.")]
        FieldOrderCntList(0 To 1, 0 To 15) As Long
        pic_init_qs_minus26 As Byte
        chroma_qp_index_offset As Byte ' also used for QScb */
        second_chroma_qp_index_offset As Byte ' also for QScr */
        ContinuationFlag As Byte
        ' remainder for parsing
        pic_init_qp_minus26 As Byte
        num_ref_idx_l0_active_minus1 As Byte
        num_ref_idx_l1_active_minus1 As Byte
        Reserved8BitsA As Byte
        FrameNumList(0 To 15) As Integer
        UsedForReferenceFlags As Long
        NonExistingFrameFlags As Integer
        frame_num As Integer
        log2_max_frame_num_minus4 As Byte
        pic_order_cnt_type As Byte
        log2_max_pic_order_cnt_lsb_minus4 As Byte
        delta_pic_order_always_zero_flag As Byte
        direct_8x8_inference_flag As Byte
        entropy_coding_mode_flag As Byte
        pic_order_present_flag As Byte
        num_slice_groups_minus1 As Byte
        slice_group_map_type As Byte
        deblocking_filter_control_present_flag As Byte
        redundant_pic_cnt_present_flag As Byte
        Reserved8BitsB As Byte
        slice_group_change_rate_minus1 As Integer
        ' SliceGroupMap is not needed for MVC, as MVC is for high profile only */
        ' Following are H.264 MVC Specific parameters */
        num_views_minus1 As Byte
        view_id(0 To 15) As Integer
        num_anchor_refs_l0(0 To 15) As Byte
        [Description("IMPORTANT: Array dimensions reversed vs C per VBx/tB ordering difference.")]
        anchor_ref_l0(0 To 15, 0 To 15) As Integer
        num_anchor_refs_l1(0 To 15) As Byte
        [Description("IMPORTANT: Array dimensions reversed vs C per VBx/tB ordering difference.")]
        anchor_ref_l1(0 To 15, 0 To 15) As Integer
        num_non_anchor_refs_l0(0 To 15) As Byte
        [Description("IMPORTANT: Array dimensions reversed vs C per VBx/tB ordering difference.")]
        non_anchor_ref_l0(0 To 15, 0 To 15) As Integer
        num_non_anchor_refs_l1(0 To 15) As Byte
        [Description("IMPORTANT: Array dimensions reversed vs C per VBx/tB ordering difference.")]
        non_anchor_ref_l1(0 To 15, 0 To 15) As Integer
        curr_view_id As Integer
        anchor_pic_flag As Byte
        inter_view_flag As Byte
        ViewIDList(0 To 15) As Integer
    End Type
    
    Public Type DXVA_Status_VC1
        StatusReportFeedbackNumber As Integer
        wDecodedPictureIndex As Integer
        wDeblockedPictureIndex As Integer
        bPicStructure As Byte
        bBufType As Byte
        bStatus As Byte
        bReserved8Bits As Byte
        wNumMbsAffected As Integer
    End Type
    
    [Description("IMPORTANT: Array dimensions reversed vs C per VBx/tB ordering difference.")]
    [PackingAlignment(1)]
    Public Type DXVA_PicParams_MPEG4_PART2
        short_video_header As Byte
        vop_coding_type As Byte
        vop_quant As Byte
        wDecodedPictureIndex As Integer
        wDeblockedPictureIndex As Integer
        wForwardRefPictureIndex As Integer
        wBackwardRefPictureIndex As Integer
        vop_time_increment_resolution As Integer
        TRB(0 To 1) As Long
        TRD(0 To 1) As Long
        'union {
        '    struct {
        '        USHORT  unPicPostProc                 : 2;
        '        USHORT  interlaced                    : 1;
        '        USHORT  quant_type                    : 1;
        '        USHORT  quarter_sample                : 1;
        '        USHORT  resync_marker_disable         : 1;
        '        USHORT  data_partitioned              : 1;
        '        USHORT  reversible_vlc                : 1;
        '        USHORT  reduced_resolution_vop_enable : 1;
        '        USHORT  vop_coded                     : 1;
        '        USHORT  vop_rounding_type             : 1;
        '        USHORT  intra_dc_vlc_thr              : 3;
        '        USHORT  top_field_first               : 1;
        '        USHORT  alternate_vertical_scan_flag  : 1;
        '    };
        wPicFlagBitFields As Integer
        '};
        profile_and_level_indication As Byte
        video_object_layer_verid As Byte
        vop_width As Integer
        vop_height As Integer
        'union {
        '    struct {
        '        USHORT  sprite_enable               : 2;
        '        USHORT  no_of_sprite_warping_points : 6;
        '        USHORT  sprite_warping_accuracy     : 2;
        '    };
        wSpriteBitFields As Integer
        '};
        [Description("IMPORTANT: Array dimensions reversed vs C per VBx/tB ordering difference.")]
        warping_mv(0 To 1, 0 To 3) As Integer
        'union {
        '    struct {
        '        UCHAR  vop_fcode_forward   : 3;
        '        UCHAR  vop_fcode_backward  : 3;
        '    };
        wFcodeBitFields As Byte
        '};
        StatusReportFeedbackNumber As Integer
        Reserved16BitsA As Integer
        Reserved16BitsB As Integer
    End Type
    
    [PackingAlignment(1)]
    Public Type DXVA_PicEntry_HEVC
        ' union 
        ' { 
            ' struct 
            ' { 
                ' UCHAR Index7Bits : 7; 
                ' UCHAR AssociatedFlag : 1; 
            ' }; 
            ' UCHAR bPicEntry; 
        ' }; 
        u As Byte
    End Type
    
    [PackingAlignment(1)]
    Public Type DXVA_PicParams_HEVC
        PicWidthInMinCbsY As Integer
        PicHeightInMinCbsY As Integer
        'union {
        '    struct {
        '        USHORT  chroma_format_idc                       : 2;
        '        USHORT  separate_colour_plane_flag              : 1;
        '        USHORT  bit_depth_luma_minus8                   : 3;
        '        USHORT  bit_depth_chroma_minus8                 : 3;
        '        USHORT  log2_max_pic_order_cnt_lsb_minus4       : 4;
        '        USHORT  NoPicReorderingFlag                     : 1;
        '        USHORT  NoBiPredFlag                            : 1;
        '        USHORT  ReservedBits1                            : 1;
        '    };
        wFormatAndSequenceInfoFlags As Integer
        '};
        CurrPic As DXVA_PicEntry_HEVC
        sps_max_dec_pic_buffering_minus1 As Byte
        log2_min_luma_coding_block_size_minus3 As Byte
        log2_diff_max_min_luma_coding_block_size As Byte
        log2_min_transform_block_size_minus2 As Byte
        log2_diff_max_min_transform_block_size As Byte
        max_transform_hierarchy_depth_inter As Byte
        max_transform_hierarchy_depth_intra As Byte
        num_short_term_ref_pic_sets As Byte
        num_long_term_ref_pics_sps As Byte
        num_ref_idx_l0_default_active_minus1 As Byte
        num_ref_idx_l1_default_active_minus1 As Byte
        init_qp_minus26 As Byte
        ucNumDeltaPocsOfRefRpsIdx As Byte
        wNumBitsForShortTermRPSInSlice As Integer
        ReservedBits2 As Integer
        'union {
        '    struct {
        '        UINT32  scaling_list_enabled_flag                    : 1;
        '        UINT32  amp_enabled_flag                            : 1;
        '        UINT32  sample_adaptive_offset_enabled_flag         : 1;
        '        UINT32  pcm_enabled_flag                            : 1;
        '        UINT32  pcm_sample_bit_depth_luma_minus1            : 4;
        '        UINT32  pcm_sample_bit_depth_chroma_minus1          : 4;
        '        UINT32  log2_min_pcm_luma_coding_block_size_minus3  : 2;
        '        UINT32  log2_diff_max_min_pcm_luma_coding_block_size : 2;
        '        UINT32  pcm_loop_filter_disabled_flag                : 1;
        '        UINT32  long_term_ref_pics_present_flag             : 1;
        '        UINT32  sps_temporal_mvp_enabled_flag               : 1;
        '        UINT32  strong_intra_smoothing_enabled_flag         : 1;
        '        UINT32  dependent_slice_segments_enabled_flag       : 1;
        '        UINT32  output_flag_present_flag                    : 1;
        '        UINT32  num_extra_slice_header_bits                 : 3;
        '        UINT32  sign_data_hiding_enabled_flag               : 1;
        '        UINT32  cabac_init_present_flag                     : 1;
        '        UINT32  ReservedBits3                               : 5;
        '    };
        dwCodingParamToolFlags As Long
        '};
        'union {
        '    struct {
        '        UINT32  constrained_intra_pred_flag                 : 1;
        '        UINT32  transform_skip_enabled_flag                 : 1;
        '        UINT32  cu_qp_delta_enabled_flag                    : 1;
        '        UINT32  pps_slice_chroma_qp_offsets_present_flag    : 1;
        '        UINT32  weighted_pred_flag                          : 1;
        '        UINT32  weighted_bipred_flag                        : 1;
        '        UINT32  transquant_bypass_enabled_flag              : 1;
        '        UINT32  tiles_enabled_flag                          : 1;
        '        UINT32  entropy_coding_sync_enabled_flag            : 1;
        '        UINT32  uniform_spacing_flag                        : 1;
        '        UINT32  loop_filter_across_tiles_enabled_flag       : 1;
        '        UINT32  pps_loop_filter_across_slices_enabled_flag  : 1;
        '        UINT32  deblocking_filter_override_enabled_flag     : 1;
        '        UINT32  pps_deblocking_filter_disabled_flag         : 1;
        '        UINT32  lists_modification_present_flag             : 1;
        '        UINT32  slice_segment_header_extension_present_flag : 1;
        '        UINT32  IrapPicFlag                                 : 1;
        '        UINT32  IdrPicFlag                                  : 1;
        '        UINT32  IntraPicFlag                                : 1;
        '        UINT32  ReservedBits4                               : 13;
        '    };
        dwCodingSettingPicturePropertyFlags As Long
        '};
        pps_cb_qp_offset As Byte
        pps_cr_qp_offset As Byte
        num_tile_columns_minus1 As Byte
        num_tile_rows_minus1 As Byte
        column_width_minus1(0 To 18) As Integer
        row_height_minus1(0 To 20) As Integer
        diff_cu_qp_delta_depth As Byte
        pps_beta_offset_div2 As Byte
        pps_tc_offset_div2 As Byte
        log2_parallel_merge_level_minus2 As Byte
        CurrPicOrderCntVal As Long
        RefPicList(0 To 14) As DXVA_PicEntry_HEVC
        ReservedBits5 As Byte
        PicOrderCntValList(0 To 14) As Long
        RefPicSetStCurrBefore(0 To 7) As Byte
        RefPicSetStCurrAfter(0 To 7) As Byte
        RefPicSetLtCurr(0 To 7) As Byte
        ReservedBits6 As Integer
        ReservedBits7 As Integer
        StatusReportFeedbackNumber As Long
    End Type
    
    [PackingAlignment(1)]
    Public Type DXVA_PicParams_HEVC_RangeExt
        params As DXVA_PicParams_HEVC
        'union {
        '    struct {
        '        USHORT transform_skip_rotation_enabled_flag    : 1;
        '        USHORT transform_skip_context_enabled_flag     : 1;
        '        USHORT implicit_rdpcm_enabled_flag             : 1;
        '        USHORT explicit_rdpcm_enabled_flag             : 1;
        '        USHORT extended_precision_processing_flag      : 1;
        '        USHORT intra_smoothing_disabled_flag           : 1;
        '        USHORT persistent_rice_adaptation_enabled_flag : 1;
        '        USHORT high_precision_offsets_enabled_flag     : 1;
        '        USHORT cabac_bypass_alignment_enabled_flag     : 1;
        '        USHORT cross_component_prediction_enabled_flag : 1;
        '        USHORT chroma_qp_offset_list_enabled_flag      : 1;
        '        USHORT ReservedBits8                           : 5;
        '    };
        dwRangeExtensionFlags As Integer
        '};
        diff_cu_chroma_qp_offset_depth As Byte
        log2_sao_offset_scale_luma As Byte
        log2_sao_offset_scale_chroma As Byte
        log2_max_transform_skip_block_size_minus2 As Byte
        cb_qp_offset_list(0 To 5) As Byte
        cr_qp_offset_list(0 To 5) As Byte
        chroma_qp_offset_list_len_minus1 As Byte
        ReservedBits9 As Integer
    End Type
    
    
    [PackingAlignment(1)]
    Public Type DXVA_Qmatrix_HEVC
        ucScalingLists0(0 To 15, 0 To 5) As Byte
        ucScalingLists1(0 To 63, 0 To 5) As Byte
        ucScalingLists2(0 To 63, 0 To 5) As Byte
        ucScalingLists3(0 To 63, 0 To 1) As Byte
        ucScalingListDCCoefSizeID2(0 To 5) As Byte
        ucScalingListDCCoefSizeID3(0 To 1) As Byte
    End Type
    
    [PackingAlignment(1)]
    Public Type DXVA_Slice_HEVC_Short
        BSNALunitDataLocation As Long
        SliceBytesInBuffer As Long
        wBadSliceChopping As Integer
    End Type
    
    
    [PackingAlignment(1)]
    Public Type DXVA_Status_HEVC
        StatusReportFeedbackNumber As Integer
        CurrPic As DXVA_PicEntry_HEVC
        bBufType As Byte
        bStatus As Byte
        bReserved8Bits As Byte
        wNumMbsAffected As Integer
    End Type
    
    
    [PackingAlignment(1)]
    Public Type DXVA_PicEntry_VPx
        ' union 
        ' { 
            ' struct 
            ' { 
                ' UCHAR Index7Bits : 7; 
                ' UCHAR AssociatedFlag : 1; 
            ' }; 
            ' UCHAR bPicEntry; 
        ' }; 
        u As Byte
    End Type
    
    [Description("IMPORTANT: Array dimensions reversed vs C per VBx/tB ordering difference.")]
    [PackingAlignment(1)]
    Public Type DXVA_segmentation_VP9
        'union {
        '    struct {
        '        UCHAR enabled : 1;
        '        UCHAR update_map : 1;
        '        UCHAR temporal_update : 1;
        '        UCHAR abs_delta : 1;
        '        UCHAR ReservedSegmentFlags4Bits : 4;
        '    };
        wSegmentInfoFlags As Byte
        '};
        tree_probs(0 To 6) As Byte
        pred_probs(0 To 2) As Byte
        [Description("IMPORTANT: Array dimensions reversed vs C per VBx/tB ordering difference.")]
        feature_data(0 To 3, 0 To 7) As Integer
        feature_mask(0 To 7) As Byte
    End Type
    
    Public Type DXVA_PicParams_VP9
        CurrPic As DXVA_PicEntry_VPx
        profile As Byte
        'union {
        '    struct {
        '        USHORT frame_type : 1;
        '        USHORT show_frame : 1;
        '        USHORT error_resilient_mode : 1;
        '        USHORT subsampling_x : 1;
        '        USHORT subsampling_y : 1;
        '        USHORT extra_plane : 1;
        '        USHORT refresh_frame_context : 1;
        '        USHORT frame_parallel_decoding_mode : 1;
        '        USHORT intra_only : 1;
        '        USHORT frame_context_idx : 2;
        '        USHORT reset_frame_context : 2;
        '        USHORT allow_high_precision_mv : 1;
        '        USHORT ReservedFormatInfo2Bits : 2;
        '    };
        wFormatAndPictureInfoFlags As Integer
        '};
        width As Long
        height As Long
        BitDepthMinus8Luma As Byte
        BitDepthMinus8Chroma As Byte
        interp_filter As Byte
        Reserved8Bits As Byte
        ref_frame_map(0 To 7) As DXVA_PicEntry_VPx
        ref_frame_coded_width(0 To 7) As Long
        ref_frame_coded_height(0 To 7) As Long
        frame_refs(0 To 2) As DXVA_PicEntry_VPx
        ref_frame_sign_bias(0 To 3) As Byte
        filter_level As Byte
        sharpness_level As Byte
        'union {
        '    struct {
        '        UCHAR mode_ref_delta_enabled : 1;
        '        UCHAR mode_ref_delta_update : 1;
        '        UCHAR use_prev_in_find_mv_refs : 1;
        '        UCHAR ReservedControlInfo5Bits : 5;
        '    };
        wControlInfoFlags As Byte
        '};
        ref_deltas(0 To 3) As Byte
        mode_deltas(0 To 1) As Byte
        base_qindex As Integer
        y_dc_delta_q As Byte
        uv_dc_delta_q As Byte
        uv_ac_delta_q As Byte
        stVP9Segments As DXVA_segmentation_VP9
        log2_tile_cols As Byte
        log2_tile_rows As Byte
        uncompressed_header_size_byte_aligned As Integer
        first_partition_size As Integer
        Reserved16Bits As Integer
        Reserved32Bits As Long
        StatusReportFeedbackNumber As Long
    End Type
    
    Public Type DXVA_segmentation_VP8
        'union {
        '    struct {
        '        UCHAR segmentation_enabled : 1;
        '        UCHAR update_mb_segmentation_map : 1;
        '        UCHAR update_mb_segmentation_data : 1;
        '        UCHAR mb_segement_abs_delta : 1;
        '        UCHAR ReservedSegmentFlags4Bits : 4;
        '    };
        wSegmentFlags As Byte
        '};
        segment_feature_data(0 To 3, 0 To 1) As Byte
        mb_segment_tree_probs(0 To 2) As Byte
    End Type
    
    [Description("IMPORTANT: Array dimensions reversed vs C per VBx/tB ordering difference.")]
    [PackingAlignment(1)]
    Public Type DXVA_PicParams_VP8
        first_part_size As Long
        width As Long
        height As Long
        CurrPic As DXVA_PicEntry_VPx
        'union {
        '    struct {
        '        UCHAR frame_type : 1;
        '        UCHAR version : 3;
        '        UCHAR show_frame : 1;
        '        UCHAR clamp_type : 1;
        '        UCHAR ReservedFrameTag3Bits : 2;
        '    };
        wFrameTagFlags As Byte
        '};
        stVP8Segments As DXVA_segmentation_VP8
        filter_type As Byte
        filter_level As Byte
        sharpness_level As Byte
        mode_ref_lf_delta_enabled As Byte
        mode_ref_lf_delta_update As Byte
        ref_lf_deltas(0 To 3) As Byte
        mode_lf_deltas(0 To 3) As Byte
        log2_nbr_of_dct_partitions As Byte
        base_qindex As Byte
        y1dc_delta_q As Byte
        y2dc_delta_q As Byte
        y2ac_delta_q As Byte
        uvdc_delta_q As Byte
        uvac_delta_q As Byte
        alt_fb_idx As DXVA_PicEntry_VPx
        gld_fb_idx As DXVA_PicEntry_VPx
        lst_fb_idx As DXVA_PicEntry_VPx
        ref_frame_sign_bias_golden As Byte
        ref_frame_sign_bias_altref As Byte
        refresh_entropy_probs As Byte
        [Description("IMPORTANT: Array dimensions reversed vs C per VBx/tB ordering difference.")]
        vp8_coef_update_probs(0 To 10, 0 To 2, 0 To 7, 0 To 3) As Byte
        mb_no_coeff_skip As Byte
        prob_skip_false As Byte
        prob_intra As Byte
        prob_last As Byte
        prob_golden As Byte
        intra_16x16_prob(0 To 3) As Byte
        intra_chroma_prob(0 To 2) As Byte
        [Description("IMPORTANT: Array dimensions reversed vs C per VBx/tB ordering difference.")]
        vp8_mv_update_probs(0 To 18, 0 To 1) As Byte
        ReservedBits1 As Integer
        ReservedBits2 As Integer
        ReservedBits3 As Integer
        StatusReportFeedbackNumber As Long
    End Type
    
    [PackingAlignment(1)]
    Public Type DXVA_Slice_VPx_Short
        BSNALunitDataLocation As Long
        SliceBytesInBuffer As Long
        wBadSliceChopping As Integer
    End Type
    
    [PackingAlignment(1)]
    Public Type DXVA_Status_VPx
        StatusReportFeedbackNumber As Long
        CurrPic As DXVA_PicEntry_VPx
        bBufType As Byte
        bStatus As Byte
        bReserved8Bits As Byte
        wNumMbsAffected As Integer
    End Type
    
    [PackingAlignment(1)]
    Public Type DXVA_PicEntry_AV1
        width As Long
        height As Long
        ' Global motion parameters
        wmmat(0 To 5) As Long
        'union {
        '    struct {
        '        UCHAR wminvalid : 1;
        '        UCHAR wmtype : 2;
        '        UCHAR Reserved : 5;
        '    };
        GlobalMotionFlags As Byte
        '} DUMMYUNIONNAME;
        Index As Byte
        Reserved16Bits As Integer
    End Type
    
    [Description("IMPORTANT: Array dimensions reversed vs C per VBx/tB ordering difference.\" & vbcrlf & "If anyone ever uses this, please tell me, you'll make my whole year.")]
    [PackingAlignment(1)]
    Public Type DXVA_PicParams_AV1
        width As Long
        height As Long
        max_width As Long
        max_height As Long
        CurrPicTextureIndex As Byte
        superres_denom As Byte
        bitdepth As Byte
        seq_profile As Byte
        ' Tiles:
        'struct {
        '    UCHAR cols;
        '    UCHAR rows;
        '    USHORT context_update_id;
        '    USHORT widths[64];
        '    USHORT heights[64];
        '} tiles;
        tiles_cols As Byte
        tiles_rows As Byte
        tiles_context_update_id As Integer
        tiles_widths(0 To 63) As Integer
        tiles_heights(0 To 63) As Integer
        ' Coding Tools
        'union {
        '    struct {
        '        UINT use_128x128_superblock : 1;
        '        UINT intra_edge_filter : 1;
        '        UINT interintra_compound : 1;
        '        UINT masked_compound : 1;
        '        UINT warped_motion : 1;
        '        UINT dual_filter : 1;
        '        UINT jnt_comp : 1;
        '        UINT screen_content_tools : 1;
        '        UINT integer_mv : 1;
        '        UINT cdef : 1;
        '        UINT restoration : 1;
        '        UINT film_grain : 1;
        '        UINT intrabc : 1;
        '        UINT high_precision_mv : 1;
        '        UINT switchable_motion_mode : 1;
        '        UINT filter_intra : 1;
        '        UINT disable_frame_end_update_cdf : 1;
        '        UINT disable_cdf_update : 1;
        '        UINT reference_mode : 1;
        '        UINT skip_mode : 1;
        '        UINT reduced_tx_set : 1;
        '        UINT superres : 1;
        '        UINT tx_mode : 2;
        '        UINT use_ref_frame_mvs : 1;
        '        UINT enable_ref_frame_mvs : 1;
        '        UINT reference_frame_update : 1;
        '        UINT Reserved : 5;
        '    };
        CodingParamToolFlags As Long
        '} coding;
        ' Format & Picture Info flags
        'union {
        '    struct {
        '        UCHAR frame_type : 2;
        '        UCHAR show_frame : 1;
        '        UCHAR showable_frame : 1;
        '        UCHAR subsampling_x : 1;
        '        UCHAR subsampling_y : 1;
        '        UCHAR mono_chrome : 1;
        '        UCHAR Reserved : 1;
        '    };
        FormatAndPictureInfoFlags As Byte
        '} format;
        ' References
        primary_ref_frame As Byte
        order_hint As Byte
        order_hint_bits As Byte
        frame_refs(0 To 6) As DXVA_PicEntry_AV1
        RefFrameMapTextureIndex(0 To 7) As Byte
        '    struct {
        loop_filter_filter_level(0 To 1) As Byte
        loop_filter_filter_level_u As Byte
        loop_filter_filter_level_v As Byte
        loop_filter_sharpness_level As Byte
        'union {
        '    struct {
        '        UCHAR mode_ref_delta_enabled : 1;
        '        UCHAR mode_ref_delta_update : 1;
        '        UCHAR delta_lf_multi : 1;
        '        UCHAR delta_lf_present : 1;
        '        UCHAR Reserved : 4;
        '    };
        loop_filter_ControlFlags As Byte
        '} DUMMYUNIONNAME;
        loop_filter_ref_deltas(0 To 7) As Byte
        loop_filter_mode_deltas(0 To 1) As Byte
        loop_filter_delta_lf_res As Byte
        loop_filter_frame_restoration_type(0 To 2) As Byte
        loop_filter_log2_restoration_unit_size(0 To 2) As Integer
        loop_filter_Reserved16Bits As Integer
        '} loop_filter;
        ' struct {}
        'union {
        '    struct {
        '        UCHAR delta_q_present : 1;
        '        UCHAR delta_q_res : 2;
        '        UCHAR Reserved : 5;
        '    };
        quantization_ControlFlags As Byte
        '} DUMMYUNIONNAME;
        quantization_base_qindex As Byte
        quantization_y_dc_delta_q As Byte
        quantization_u_dc_delta_q As Byte
        quantization_v_dc_delta_q As Byte
        quantization_u_ac_delta_q As Byte
        quantization_v_ac_delta_q As Byte
        ' using_qmatrix:
        quantization_qm_y As Byte
        quantization_qm_u As Byte
        quantization_qm_v As Byte
        quantization_Reserved16Bits As Integer
        ' } quantization;
        
        
        ' // Cdef parameters  WTF!!!!!
        ' struct {
            ' union {
                ' struct {
                    ' UCHAR damping : 2;
                    ' UCHAR bits : 2;
                    ' UCHAR Reserved : 4;
                ' };
                ' UCHAR ControlFlags;
            ' } DUMMYUNIONNAME;

            ' union {
                ' struct {
                    ' UCHAR primary : 6;
                    ' UCHAR secondary : 2;
                ' };
                ' UCHAR combined;
            ' } y_strengths[8];

            ' union {
                ' struct {
                    ' UCHAR primary : 6;
                    ' UCHAR secondary : 2;
                ' };
                ' UCHAR combined;
            ' } uv_strengths[8];

        ' } cdef;
        cdef_ControlFlags As Byte
        cdef_y_strengths0_combined As Byte
        cdef_y_strengths1_combined As Byte
        cdef_y_strengths2_combined As Byte
        cdef_y_strengths3_combined As Byte
        cdef_y_strengths4_combined As Byte
        cdef_y_strengths5_combined As Byte
        cdef_y_strengths6_combined As Byte
        cdef_y_strengths7_combined As Byte
        cdef_uv_strengths0_combined As Byte
        cdef_uv_strengths1_combined As Byte
        cdef_uv_strengths2_combined As Byte
        cdef_uv_strengths3_combined As Byte
        cdef_uv_strengths4_combined As Byte
        cdef_uv_strengths5_combined As Byte
        cdef_uv_strengths6_combined As Byte
        cdef_uv_strengths7_combined As Byte
        
        interp_filter As Byte
        
        ' // Segmentation  'MORE WTF!
        ' struct {
            ' union {
                ' struct {
                    ' UCHAR enabled : 1;
                    ' UCHAR update_map : 1;
                    ' UCHAR update_data : 1;
                    ' UCHAR temporal_update : 1;
                    ' UCHAR Reserved : 4;
                ' };
                ' UCHAR ControlFlags;
            ' } DUMMYUNIONNAME;
            ' UCHAR Reserved24Bits[3];

            ' union {
                ' struct {
                    ' UCHAR alt_q : 1;
                    ' UCHAR alt_lf_y_v : 1;
                    ' UCHAR alt_lf_y_h : 1;
                    ' UCHAR alt_lf_u : 1;
                    ' UCHAR alt_lf_v : 1;
                    ' UCHAR ref_frame : 1;
                    ' UCHAR skip : 1;
                    ' UCHAR globalmv : 1;
                ' };
                ' UCHAR mask;
            ' } feature_mask[8];

            ' SHORT feature_data[8][8];

        ' } segmentation;
        segmentation_ControlFlags As Byte
        segmentation_Reserved24Bits(0 To 2) As Byte
        segmentation_feature_mask0_mask As Byte
        segmentation_feature_mask1_mask As Byte
        segmentation_feature_mask2_mask As Byte
        segmentation_feature_mask3_mask As Byte
        segmentation_feature_mask4_mask As Byte
        segmentation_feature_mask5_mask As Byte
        segmentation_feature_mask6_mask As Byte
        segmentation_feature_mask7_mask As Byte
        segmentation_feature_data(0 To 7, 0 To 7) As Integer
        
        
        'struct {
        'union {
        '    struct {
        '        USHORT apply_grain : 1;
        '        USHORT scaling_shift_minus8 : 2;
        '        USHORT chroma_scaling_from_luma : 1;
        '        USHORT ar_coeff_lag : 2;
        '        USHORT ar_coeff_shift_minus6 : 2;
        '        USHORT grain_scale_shift : 2;
        '        USHORT overlap_flag : 1;
        '        USHORT clip_to_restricted_range : 1;
        '        USHORT matrix_coeff_is_identity : 1;
        '        USHORT Reserved : 3;
        '    };
        film_grain_ControlFlags As Integer
        '} DUMMYUNIONNAME;
        film_grain_grain_seed As Integer
        film_grain_scaling_points_y(0 To 1, 0 To 13) As Byte
        film_grain_num_y_points As Byte
        film_grain_scaling_points_cb(0 To 1, 0 To 9) As Byte
        film_grain_num_cb_points As Byte
        film_grain_scaling_points_cr(0 To 1, 0 To 9) As Byte
        film_grain_num_cr_points As Byte
        film_grain_ar_coeffs_y(0 To 23) As Byte
        film_grain_ar_coeffs_cb(0 To 24) As Byte
        film_grain_ar_coeffs_cr(0 To 24) As Byte
        film_grain_cb_mult As Byte
        film_grain_cb_luma_mult As Byte
        film_grain_cr_mult As Byte
        film_grain_cr_luma_mult As Byte
        film_grain_Reserved8Bits As Byte
        film_grain_cb_offset As Integer
        film_grain_cr_offset As Integer
        ' } film_grain;
        
        Reserved32Bits As Long
        StatusReportFeedbackNumber As Long
    End Type
    
    ' [PackingAlignment(1)]
    ' Type DXVA_PicParams_AV1_Tiles
    '     cols As Byte
    '     rows As Byte
    '     context_update_id As Integer
    '     widths(0 To 63) As Integer
    '     heights(0 To 63) As Integer
    ' End Type

    ' [PackingAlignment(1)]
    ' Type DXVA_PicParams_AV1_CodingTools
    '     ' VB6 doesn't support bitfields, so we use a Long and access bits programmatically
    '     CodingParamToolFlags As Long
    ' End Type

    ' [PackingAlignment(1)]
    ' Type DXVA_PicParams_AV1_Format
    '     ' VB6 doesn't support bitfields, so we use a Byte and access bits programmatically
    '     FormatAndPictureInfoFlags As Byte
    ' End Type

    ' [PackingAlignment(1)]
    ' Type DXVA_PicParams_AV1_LoopFilter_Control
    '     ControlFlags As Byte
    ' End Type

    ' [PackingAlignment(1)]
    ' Type DXVA_PicParams_AV1_LoopFilter
    '     filter_level(0 To 1) As Byte
    '     filter_level_u As Byte
    '     filter_level_v As Byte
    '     sharpness_level As Byte
    '     Control As DXVA_PicParams_AV1_LoopFilter_Control
    '     ref_deltas(0 To 7) As Byte  ' VB6 uses Byte for CHAR
    '     mode_deltas(0 To 1) As Byte
    '     delta_lf_res As Byte
    '     frame_restoration_type(0 To 2) As Byte
    '     log2_restoration_unit_size(0 To 2) As Integer
    '     Reserved16Bits As Integer
    ' End Type

    ' [PackingAlignment(1)]
    ' Type DXVA_PicParams_AV1_Quantization_Control
    '     ControlFlags As Byte
    ' End Type

    ' [PackingAlignment(1)]
    ' Type DXVA_PicParams_AV1_Quantization
    '     Control As DXVA_PicParams_AV1_Quantization_Control
    '     base_qindex As Byte
    '     y_dc_delta_q As Byte
    '     u_dc_delta_q As Byte
    '     v_dc_delta_q As Byte
    '     u_ac_delta_q As Byte
    '     v_ac_delta_q As Byte
    '     qm_y As Byte
    '     qm_u As Byte
    '     qm_v As Byte
    '     Reserved16Bits As Integer
    ' End Type

    ' [PackingAlignment(1)]
    ' Type DXVA_PicParams_AV1_Cdef_Control
    '     ControlFlags As Byte
    ' End Type

    ' [PackingAlignment(1)]
    ' Type DXVA_PicParams_AV1_Cdef_Strength
    '     combined As Byte  ' Contains both primary and secondary strength values
    ' End Type

    ' [PackingAlignment(1)]
    ' Type DXVA_PicParams_AV1_Cdef
    '     Control As DXVA_PicParams_AV1_Cdef_Control
    '     y_strengths(0 To 7) As DXVA_PicParams_AV1_Cdef_Strength
    '     uv_strengths(0 To 7) As DXVA_PicParams_AV1_Cdef_Strength
    ' End Type

    ' [PackingAlignment(1)]
    ' Type DXVA_PicParams_AV1_Segmentation_Control
    '     ControlFlags As Byte
    ' End Type

    ' [PackingAlignment(1)]
    ' Type DXVA_PicParams_AV1_Segmentation_FeatureMask
    '     mask As Byte
    ' End Type

    ' [PackingAlignment(1)]
    ' Type DXVA_PicParams_AV1_Segmentation
    '     Control As DXVA_PicParams_AV1_Segmentation_Control
    '     Reserved24Bits(0 To 2) As Byte
    '     feature_mask(0 To 7) As DXVA_PicParams_AV1_Segmentation_FeatureMask
    '     feature_data(0 To 7, 0 To 7) As Integer
    ' End Type

    ' [PackingAlignment(1)]
    ' Type DXVA_PicParams_AV1_FilmGrain_Control
    '     ControlFlags As Integer
    ' End Type

    ' [PackingAlignment(1)]
    ' Type DXVA_PicParams_AV1_FilmGrain
    '     Control As DXVA_PicParams_AV1_FilmGrain_Control
    '     grain_seed As Integer
    '     scaling_points_y(0 To 13, 0 To 1) As Byte
    '     num_y_points As Byte
    '     scaling_points_cb(0 To 9, 0 To 1) As Byte
    '     num_cb_points As Byte
    '     scaling_points_cr(0 To 9, 0 To 1) As Byte
    '     num_cr_points As Byte
    '     ar_coeffs_y(0 To 23) As Byte
    '     ar_coeffs_cb(0 To 24) As Byte
    '     ar_coeffs_cr(0 To 24) As Byte
    '     cb_mult As Byte
    '     cb_luma_mult As Byte
    '     cr_mult As Byte
    '     cr_luma_mult As Byte
    '     Reserved8Bits As Byte
    '     cb_offset As Integer
    '     cr_offset As Integer
    ' End Type

    ' [PackingAlignment(1)]
    ' Type DXVA_PicParams_AV1
    '     width As Long
    '     height As Long
    '     max_width As Long
    '     max_height As Long
        
    '     CurrPicTextureIndex As Byte
    '     superres_denom As Byte
    '     bitdepth As Byte
    '     seq_profile As Byte
        
    '     ' Tiles
    '     tiles As DXVA_PicParams_AV1_Tiles
        
    '     ' Coding Tools
    '     coding As DXVA_PicParams_AV1_CodingTools
        
    '     ' Format & Picture Info flags
    '     format As DXVA_PicParams_AV1_Format
        
    '     ' References
    '     primary_ref_frame As Byte
    '     order_hint As Byte
    '     order_hint_bits As Byte
        
    '     frame_refs(0 To 6) As DXVA_PicEntry_AV1
    '     RefFrameMapTextureIndex(0 To 7) As Byte
        
    '     ' Loop filter parameters
    '     loop_filter As DXVA_PicParams_AV1_LoopFilter
        
    '     ' Quantization
    '     quantization As DXVA_PicParams_AV1_Quantization
        
    '     ' Cdef parameters
    '     cdef As DXVA_PicParams_AV1_Cdef
        
    '     interp_filter As Byte
        
    '     ' Segmentation
    '     segmentation As DXVA_PicParams_AV1_Segmentation
        
    '     ' Film grain
    '     film_grain As DXVA_PicParams_AV1_FilmGrain
        
    '     Reserved32Bits As Long
    '     StatusReportFeedbackNumber As Long
    ' End Type
       
    Public Type DXVA_Tile_AV1
        DataOffset As Long
        DataSize As Long
        row As Integer
        column As Integer
        Reserved16Bits As Integer
        anchor_frame As Byte
        Reserved8Bits As Byte
    End Type
    
    Public Type DXVA_Status_AV1
        StatusReportFeedbackNumber As Long
        CurrPic As DXVA_PicEntry_AV1
        BufType As Byte
        Status As Byte
        Reserved8Bits As Byte
        NumMbsAffected As Integer
    End Type
    
    Public Type DXVA_PicParams_MJPEG
        width As Long
        height As Long
        numComponents As Byte
        bitDepth As Byte
        reserved16Bits As Integer
        quantizationTableSelector(0 To 3) As Byte
        scanOffset(0 To 3) As Long
        scanSize(0 To 3) As Long
        componentIdentifier(0 To 3) As Byte
        restartInterval As Integer
        reserved16Bits2 As Integer
        reserved32Bits As Long
        statusReportFeedbackNumber As Long
    End Type
    
    Public Type DXVA_QMatrix_MJPEG
        quantvals(0 To 64, 0 To 3) As Integer
    End Type
    
    Public Type DXVA_HuffmanTable_MJPEG
        bits_ac(0 To 15, 0 To 3) As Byte
        table_ac(0 To 255, 0 To 3) As Byte
        bits_dc(0 To 15, 0 To 3) As Byte
        table_dc(0 To 255, 0 To 3) As Byte
    End Type
    
    
    'TODO:
    ' /*
    ' * Other forms of pictures are constructed in the obvious way
    ' * from the above by adjusting the number of residual difference
    ' * blocks, the number of motion vectors per macroblock, etc.
    ' */

   ' #define readDXVA_MBskipsFollowing(ptr)       (((ptr)->dwMB_SNL & 0xFF000000) >> 24)
   ' #define readDXVA_MBdataLocation(ptr)         (((ptr)->dwMB_SNL & 0x00FFFFFF))

   ' #define writeDXVA_MB_SNL(ptr, skips, dloc)   ((ptr)->dwMB_SNL = (((skips) << 24) | (dloc)))
   ' #define setDXVA_MBskipsFollowing(ptr, skips) ((ptr)->dwMB_SNL |= ((skips) << 24))
   ' #define setDXVA_MBdataLocation(ptr, dloc)    ((ptr)->dwMB_SNL |= (dloc))

   ' #define readDXVA_MvertFieldSel_3(ptr)    (((ptr)->wMBtype & 0x8000) >> 15)
   ' #define readDXVA_MvertFieldSel_2(ptr)    (((ptr)->wMBtype & 0x4000) >> 14)
   ' #define readDXVA_MvertFieldSel_1(ptr)    (((ptr)->wMBtype & 0x2000) >> 13)
   ' #define readDXVA_MvertFieldSel_0(ptr)    (((ptr)->wMBtype & 0x1000) >> 12)
   ' #define readDXVA_ReservedBits(ptr)       (((ptr)->wMBtype & 0x0800) >> 11)
   ' #define readDXVA_HostResidDiff(ptr)      (((ptr)->wMBtype & 0x0400) >> 10)
   ' #define readDXVA_MotionType(ptr)         (((ptr)->wMBtype & 0x0300) >>  8)
   ' #define readDXVA_MBscanMethod(ptr)       (((ptr)->wMBtype & 0x00C0) >>  6)
   ' #define readDXVA_FieldResidual(ptr)      (((ptr)->wMBtype & 0x0020) >>  5)
   ' #define readDXVA_H261LoopFilter(ptr)     (((ptr)->wMBtype & 0x0010) >>  4)
   ' #define readDXVA_Motion4MV(ptr)          (((ptr)->wMBtype & 0x0008) >>  3)
   ' #define readDXVA_MotionBackward(ptr)     (((ptr)->wMBtype & 0x0004) >>  2)
   ' #define readDXVA_MotionForward(ptr)      (((ptr)->wMBtype & 0x0002) >>  1)
   ' #define readDXVA_IntraMacroblock(ptr)    (((ptr)->wMBtype & 0x0001))

   ' #define setDXVA_MvertFieldSel_3(ptr)     ((ptr)->wMBtype |= 0x8000)
   ' #define setDXVA_MvertFieldSel_2(ptr)     ((ptr)->wMBtype |= 0x4000)
   ' #define setDXVA_MvertFieldSel_1(ptr)     ((ptr)->wMBtype |= 0x2000)
   ' #define setDXVA_MvertFieldSel_0(ptr)     ((ptr)->wMBtype |= 0x1000)
   ' #define setDXVA_ReservedBits(ptr)        ((ptr)->wMBtype |= 0x0800)
   ' #define setDXVA_HostResidDiff(ptr)       ((ptr)->wMBtype |= 0x0400)
   ' #define setDXVA_MotionType(ptr, value)   ((ptr)->wMBtype |= ((value) << 8))
   ' #define setDXVA_MBscanMethod(ptr, value) ((ptr)->wMBtype |= ((value) << 6))
   ' #define setDXVA_FieldResidual(ptr)       ((ptr)->wMBtype |= 0x0020)
   ' #define setDXVA_H261LoopFilter(ptr)      ((ptr)->wMBtype |= 0x0010)
   ' #define setDXVA_Motion4MV(ptr)           ((ptr)->wMBtype |= 0x0008)
   ' #define setDXVA_MotionBackward(ptr)      ((ptr)->wMBtype |= 0x0004)
   ' #define setDXVA_MotionForward(ptr)       ((ptr)->wMBtype |= 0x0002)
   ' #define setDXVA_IntraMacroblock(ptr)     ((ptr)->wMBtype |= 0x0001)

   ' #define readDXVA_Y___0coded(ptr)        (((ptr)->wPatternCode & 0x0800) >> 11)
   ' #define readDXVA_Y___1coded(ptr)        (((ptr)->wPatternCode & 0x0400) >> 10)
   ' #define readDXVA_Y___2coded(ptr)        (((ptr)->wPatternCode & 0x0200) >>  9)
   ' #define readDXVA_Y___3coded(ptr)        (((ptr)->wPatternCode & 0x0100) >>  8)
   ' #define readDXVA_Cb__4coded(ptr)        (((ptr)->wPatternCode & 0x0080) >>  7)
   ' #define readDXVA_Cr__5coded(ptr)        (((ptr)->wPatternCode & 0x0040) >>  6)
   ' #define readDXVA_Cb__6coded(ptr)        (((ptr)->wPatternCode & 0x0020) >>  5)
   ' #define readDXVA_Cr__7coded(ptr)        (((ptr)->wPatternCode & 0x0010) >>  4)
   ' #define readDXVA_Cb__8coded(ptr)        (((ptr)->wPatternCode & 0x0008) >>  3)
   ' #define readDXVA_Cb__9coded(ptr)        (((ptr)->wPatternCode & 0x0004) >>  2)
   ' #define readDXVA_Cr_10coded(ptr)        (((ptr)->wPatternCode & 0x0002) >>  1)
   ' #define readDXVA_Cr_11coded(ptr)        (((ptr)->wPatternCode & 0x0001))

   ' #define readDXVA_Y___0oflow(ptr)        (((ptr)->wPC_Overflow & 0x0800) >> 11)
   ' #define readDXVA_Y___1oflow(ptr)        (((ptr)->wPC_Overflow & 0x0400) >> 10)
   ' #define readDXVA_Y___2oflow(ptr)        (((ptr)->wPC_Overflow & 0x0200) >>  9)
   ' #define readDXVA_Y___3oflow(ptr)        (((ptr)->wPC_Overflow & 0x0100) >>  8)
   ' #define readDXVA_Cb__4oflow(ptr)        (((ptr)->wPC_Overflow & 0x0080) >>  7)
   ' #define readDXVA_Cr__5oflow(ptr)        (((ptr)->wPC_Overflow & 0x0040) >>  6)
   ' #define readDXVA_Cb__6oflow(ptr)        (((ptr)->wPC_Overflow & 0x0020) >>  5)
   ' #define readDXVA_Cr__7oflow(ptr)        (((ptr)->wPC_Overflow & 0x0010) >>  4)
   ' #define readDXVA_Cb__8oflow(ptr)        (((ptr)->wPC_Overflow & 0x0008) >>  3)
   ' #define readDXVA_Cb__9oflow(ptr)        (((ptr)->wPC_Overflow & 0x0004) >>  2)
   ' #define readDXVA_Cr_10oflow(ptr)        (((ptr)->wPC_Overflow & 0x0002) >>  1)
   ' #define readDXVA_Cr_11oflow(ptr)        (((ptr)->wPC_Overflow & 0x0001))
    
    
    
    
    
    
    
   Public Function IID_IDirect3DVideoDevice9() As UUID
   Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H694036ac, &H542a, &H4a3a, &H9a, &H32, &H53, &Hbc, &H20, &H0, &H2c, &H1b)
   IID_IDirect3DVideoDevice9 = iid
   End Function
   Public Function IID_IDirect3DDXVADevice9() As UUID
   Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9f00c3d3, &H5ab6, &H465f, &Hb9, &H55, &H9f, &He, &Hbb, &H2c, &H56, &H6)
   IID_IDirect3DDXVADevice9 = iid
   End Function
   
    
    
    
    
    
    #End Region
End Module

#End If