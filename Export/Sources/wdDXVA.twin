'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

'DXVA2, DXVA-HD, and EVR9 (evr9.h)

[InterfaceId("A0CADE0F-06D5-4CF4-A1C7-F3CDD725AA75")]
 [OleAutomation(False)]
 Interface IDirect3DDeviceManager9 Extends stdole.IUnknown
     Sub ResetDevice(ByVal pDevice As IDirect3DDevice9, ByVal resetToken As Long)
     Sub OpenDeviceHandle(ByRef phDevice As LongPtr)
     Sub CloseDeviceHandle(ByVal hDevice As LongPtr)
     Sub TestDevice(ByVal hDevice As LongPtr)
     Sub LockDevice(ByVal hDevice As LongPtr, ByRef ppDevice As IDirect3DDevice9, ByVal fBlock As BOOL)
     Sub UnlockDevice(ByVal hDevice As LongPtr, ByVal fSaveState As BOOL)
     Sub GetVideoService(ByVal hDevice As LongPtr, ByRef riid As UUID, ByRef ppService As Any)
 End Interface

 [InterfaceId("FC51A550-D5E7-11D9-AF55-00054E43FF02")]
 [OleAutomation(False)]
 Interface IDirectXVideoAccelerationService Extends stdole.IUnknown
     Sub CreateSurface(ByVal width As Long, ByVal Height As Long, ByVal BackBuffers As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByVal Usage As Long, ByVal DxvaType As DXVA2RenderTargets, ByRef ppSurface As IDirect3DSurface9, ByVal pSharedHandle As LongPtr)
 End Interface

 [InterfaceId("FC51A551-D5E7-11D9-AF55-00054E43FF02")]
 [OleAutomation(False)]
 Interface IDirectXVideoDecoderService Extends IDirectXVideoAccelerationService
     Sub GetDecoderDeviceGuids(ByRef pCount As Long, ByRef pGuids As LongPtr)
     Sub GetDecoderRenderTargets(ByRef guid As UUID, ByRef pCount As Long, ByRef pFormats As LongPtr)
     Sub GetDecoderConfigurations(ByRef guid As UUID, ByRef pVideoDesc As DXVA2_VideoDesc, ByVal pReserved As LongPtr, ByRef pCount As Long, ByRef ppConfigs As LongPtr)
     Sub CreateVideoDecoder(ByRef guid As UUID, ByRef pVideoDesc As DXVA2_VideoDesc, ByRef pConfig As DXVA2_ConfigPictureDecode, ByRef ppDecoderRenderTargets As IDirect3DSurface9, ByVal NumRenderTargets As Long, ByRef ppDecode As IDirectXVideoDecoder)
 End Interface

 [InterfaceId("FC51A552-D5E7-11D9-AF55-00054E43FF02")]
 [OleAutomation(False)]
 Interface IDirectXVideoProcessorService Extends IDirectXVideoAccelerationService
     Sub RegisterVideoProcessorSoftwareDevice(ByVal pCallbacks As LongPtr)
     Sub GetVideoProcessorDeviceGuids(ByRef pVideoDesc As DXVA2_VideoDesc, ByRef pCount As Long, ByRef pGuids As LongPtr)
     Sub GetVideoProcessorRenderTargets(ByRef VideoProcDeviceGuid As UUID, ByRef pVideoDesc As DXVA2_VideoDesc, ByRef pCount As Long, ByRef pFormats As LongPtr)
     Sub GetVideoProcessorSubStreamFormats(ByRef VideoProcDeviceGuid As UUID, ByRef pVideoDesc As DXVA2_VideoDesc, ByVal RenderTargetFormat As D3DFORMAT, ByRef pCount As Long, ByRef pFormats As LongPtr)
     Sub GetVideoProcessorCaps(ByRef VideoProcDeviceGuid As UUID, ByRef pVideoDesc As DXVA2_VideoDesc, ByVal RenderTargetFormat As D3DFORMAT, ByRef pCaps As DXVA2_VideoProcessorCaps)
     Sub GetProcAmpRange(ByRef VideoProcDeviceGuid As UUID, ByRef pVideoDesc As DXVA2_VideoDesc, ByVal RenderTargetFormat As D3DFORMAT, ByVal ProcAmpCap As Long, ByRef pRange As DXVA2_ValueRange)
     Sub GetFilterPropertyRange(ByRef VideoProcDeviceGuid As UUID, ByRef pVideoDesc As DXVA2_VideoDesc, ByVal RenderTargetFormat As D3DFORMAT, ByVal FilterSetting As Long, ByRef pRange As DXVA2_ValueRange)
     Sub CreateVideoProcessor(ByRef VideoProcDeviceGuid As UUID, ByRef pVideoDesc As DXVA2_VideoDesc, ByVal RenderTargetFormat As D3DFORMAT, ByVal MaxNumSubStreams As Long, ByRef ppVidProcess As IDirectXVideoProcessor)
 End Interface

 [InterfaceId("F2B0810A-FD00-43C9-918C-DF94E2D8EF7D")]
 [OleAutomation(False)]
 Interface IDirectXVideoDecoder Extends stdole.IUnknown
     Sub GetVideoDecoderService(ByRef ppService As IDirectXVideoDecoderService)
     Sub GetCreationParameters(ByRef pDeviceGuid As Any, ByRef pVideoDesc As Any, ByRef pConfig As Any, ByRef pDecoderRenderTargets As LongPtr, ByRef pNumSurfaces As Long)
     Sub GetBuffer(ByVal BufferType As Long, ByRef ppBuffer As LongPtr, ByRef pBufferSize As Long)
     Sub ReleaseBuffer(ByVal BufferType As Long)
     Sub BeginFrame(ByVal pRenderTarget As IDirect3DSurface9, ByRef pvPVPData As Any)
     Sub EndFrame(ByRef pHandleComplete As LongPtr)
     Sub Execute(ByRef pExecuteParams As DXVA2_DecodeExecuteParams)
 End Interface

 [InterfaceId("8C3A39F0-916E-4690-804F-4C8001355D25")]
 [OleAutomation(False)]
 Interface IDirectXVideoProcessor Extends stdole.IUnknown
     Sub GetVideoProcessorService(ByRef ppService As IDirectXVideoProcessorService)
     Sub GetCreationParameters(ByRef pDeviceGuid As Any, ByRef pVideoDesc As Any, ByRef pRenderTargetFormat As D3DFORMAT, ByRef pMaxNumSubStreams As Long)
     Sub GetVideoProcessorCaps(ByRef pCaps As DXVA2_VideoProcessorCaps)
     Sub GetProcAmpRange(ByVal ProcAmpCap As Long, ByRef pRange As DXVA2_ValueRange)
     Sub GetFilterPropertyRange(ByVal FilterSetting As Long, ByRef pRange As DXVA2_ValueRange)
     Sub VideoProcessBlt(ByVal pRenderTarget As IDirect3DSurface9, ByRef pBltParams As DXVA2_VideoProcessBltParams, ByRef pSamples As DXVA2_VideoSample, ByVal NumSamples As Long, ByRef pHandleComplete As LongPtr)
 End Interface



 [InterfaceId("B7F916DD-DB3B-49C1-84D7-E45EF99EC726")]
 [OleAutomation(False)]
 Interface IDirectXVideoMemoryConfiguration Extends stdole.IUnknown
     Sub GetAvailableSurfaceTypeByIndex(ByVal dwTypeIndex As Long, ByRef pdwType As DXVA2_SurfaceType)
     Sub SetSurfaceType(ByVal dwType As DXVA2_SurfaceType)
 End Interface

 
 
 [InterfaceId("95F12DFD-D77E-49BE-815F-57D579634D6D")]
 [OleAutomation(False)]
 [Description("DXVA-HD Device Interface")]
 Interface IDXVAHD_Device Extends stdole.IUnknown
     Sub CreateVideoSurface(ByVal width As Long, ByVal Height As Long, ByVal Format As D3DFORMAT, ByVal Pool As D3DPOOL, ByVal Usage As Long, ByVal type As DXVAHD_SURFACE_TYPE, ByVal NumSurfaces As Long, ByRef ppSurfaces As IDirect3DSurface9, ByRef pSharedHandle As LongPtr)
     Sub GetVideoProcessorDeviceCaps(ByRef pCaps As DXVAHD_VPDEVCAPS)
     Sub GetVideoProcessorOutputFormats(ByVal Count As Long, ByRef pFormats As D3DFORMAT)
     Sub GetVideoProcessorInputFormats(ByVal Count As Long, ByRef pFormats As D3DFORMAT)
     Sub GetVideoProcessorCaps(ByVal Count As Long, ByRef pCaps As DXVAHD_VPCAPS)
     Sub GetVideoProcessorCustomRates(ByRef pVPGuid As UUID, ByVal Count As Long, ByRef pRates As DXVAHD_CUSTOM_RATE_DATA)
     Sub GetVideoProcessorFilterRange(ByVal Filter As DXVAHD_FILTER, ByRef pRange As DXVAHD_FILTER_RANGE_DATA)
     Sub CreateVideoProcessor(ByRef pVPGuid As UUID, ByRef ppVideoProcessor As IDXVAHD_VideoProcessor)
 End Interface

 [InterfaceId("95F4EDF4-6E03-4CD7-BE1B-3075D665AA52")]
 [OleAutomation(False)]
 [Description("DXVA-HD Video Processor Interface")]
 Interface IDXVAHD_VideoProcessor Extends stdole.IUnknown
     Sub SetVideoProcessBltState(ByVal State As DXVAHD_BLT_STATE, ByVal dataSize As Long, ByRef pData As Any)
     Sub GetVideoProcessBltState(ByVal State As DXVAHD_BLT_STATE, ByVal dataSize As Long, ByRef pData As Any)
     Sub SetVideoProcessStreamState(ByVal StreamNumber As Long, ByVal State As DXVAHD_STREAM_STATE, ByVal dataSize As Long, ByRef pData As Any)
     Sub GetVideoProcessStreamState(ByVal StreamNumber As Long, ByVal State As DXVAHD_STREAM_STATE, ByVal dataSize As Long, ByRef pData As Any)
     Sub VideoProcessBltHD(ByVal pOutputSurface As IDirect3DSurface9, ByVal OutputFrame As Long, ByVal StreamCount As Long, ByRef pStreams As DXVAHD_STREAM_DATA)
 End Interface
 
 [InterfaceId("D0CFE38B-93E7-4772-8957-0400C49A4485")]
 [OleAutomation(False)]
 Interface IEVRVideoStreamControl Extends stdole.IUnknown
     Sub SetStreamActiveState(ByVal fActive As BOOL)
     Sub GetStreamActiveState(ByRef lpfActive As BOOL)
 End Interface

 [InterfaceId("6AB0000C-FECE-4D1F-A2AC-A9573530656E")]
 [OleAutomation(False)]
 Interface IMFVideoProcessor Extends stdole.IUnknown
     Sub GetAvailableVideoProcessorModes(ByRef lpdwNumProcessingModes As Long, ByRef ppVideoProcessingModes As LongPtr)
     Sub GetVideoProcessorCaps(ByRef lpVideoProcessorMode As UUID, ByRef lpVideoProcessorCaps As DXVA2_VideoProcessorCaps)
     Sub GetVideoProcessorMode(ByRef lpMode As UUID)
     Sub SetVideoProcessorMode(ByRef lpMode As UUID)
     Sub GetProcAmpRange(ByVal dwProperty As DXVA2_ProcAmp, ByRef pPropRange As DXVA2_ValueRange)
     Sub GetProcAmpValues(ByVal dwFlags As DXVA2_ProcAmp, ByRef values As DXVA2_ProcAmpValues)
     Sub SetProcAmpValues(ByVal dwFlags As DXVA2_ProcAmp, ByRef pValues As DXVA2_ProcAmpValues)
     Sub GetFilteringRange(ByVal dwProperty As DXVA2_ImageFilters, ByRef pPropRange As DXVA2_ValueRange)
     Sub GetFilteringValue(ByVal dwProperty As DXVA2_ImageFilters, ByRef pValue As DXVA2_Fixed32)
     Sub SetFilteringValue(ByVal dwProperty As DXVA2_ImageFilters, ByRef pValue As DXVA2_Fixed32)
     Sub GetBackgroundColor(ByRef lpClrBkg As Long)
     Sub SetBackgroundColor(ByVal ClrBkg As Long)
 End Interface
 
 [InterfaceId("814C7B20-0FDB-4EEC-AF8F-F957C8F69EDC")]
 [OleAutomation(False)]
 Interface IMFVideoMixerBitmap Extends stdole.IUnknown
     Sub SetAlphaBitmap(ByRef pBmpParms As MFVideoAlphaBitmap)
     Sub ClearAlphaBitmap()
     Sub UpdateAlphaBitmapParameters(ByRef pBmpParms As MFVideoAlphaBitmapParams)
     Sub GetAlphaBitmapParameters(ByRef pBmpParms As MFVideoAlphaBitmapParams)
 End Interface
 

Module wdDXVA
    
Public Type DXVA2_ExtendedFormat
    'union
    '{
    '    struct
    '    {
    '        UINT SampleFormat : 8;
    '        UINT VideoChromaSubsampling : 4;
    '        UINT NominalRange : 3;
    '        UINT VideoTransferMatrix : 3;
    '        UINT VideoLighting : 4;
    '        UINT VideoPrimaries : 5;
    '        UINT VideoTransferFunction : 5;
    '    };
    value As Long
    '};
End Type

Public Enum DXVA2_SampleFormat
    DXVA2_SampleFormatMask = &Hff
    DXVA2_SampleUnknown = 0
    DXVA2_SampleProgressiveFrame = 2
    DXVA2_SampleFieldInterleavedEvenFirst = 3
    DXVA2_SampleFieldInterleavedOddFirst = 4
    DXVA2_SampleFieldSingleEven = 5
    DXVA2_SampleFieldSingleOdd = 6
    DXVA2_SampleSubStream = 7
End Enum

Public Enum DXVA2_VideoChromaSubSampling
    DXVA2_VideoChromaSubsamplingMask = &Hf
    DXVA2_VideoChromaSubsampling_Unknown = 0
    DXVA2_VideoChromaSubsampling_ProgressiveChroma = &H8
    DXVA2_VideoChromaSubsampling_Horizontally_Cosited = &H4
    DXVA2_VideoChromaSubsampling_Vertically_Cosited = &H2
    DXVA2_VideoChromaSubsampling_Vertically_AlignedChromaPlanes = &H1
    DXVA2_VideoChromaSubsampling_MPEG2 = (DXVA2_VideoChromaSubsampling_Horizontally_Cosited Or DXVA2_VideoChromaSubsampling_Vertically_AlignedChromaPlanes)
    DXVA2_VideoChromaSubsampling_MPEG1 = DXVA2_VideoChromaSubsampling_Vertically_AlignedChromaPlanes
    DXVA2_VideoChromaSubsampling_DV_PAL = (DXVA2_VideoChromaSubsampling_Horizontally_Cosited Or DXVA2_VideoChromaSubsampling_Vertically_Cosited)
    DXVA2_VideoChromaSubsampling_Cosited = ((DXVA2_VideoChromaSubsampling_Horizontally_Cosited Or DXVA2_VideoChromaSubsampling_Vertically_Cosited) Or DXVA2_VideoChromaSubsampling_Vertically_AlignedChromaPlanes)
End Enum

Public Enum DXVA2_NominalRange
    DXVA2_NominalRangeMask = &H7
    DXVA2_NominalRange_Unknown = 0
    DXVA2_NominalRange_Normal = 1
    DXVA2_NominalRange_Wide = 2
    DXVA2_NominalRange_0_255 = 1
    DXVA2_NominalRange_16_235 = 2
    DXVA2_NominalRange_48_208 = 3
End Enum

Public Enum DXVA2_VideoTransferMatrix
    DXVA2_VideoTransferMatrixMask = &H7
    DXVA2_VideoTransferMatrix_Unknown = 0
    DXVA2_VideoTransferMatrix_BT709 = 1
    DXVA2_VideoTransferMatrix_BT601 = 2
    DXVA2_VideoTransferMatrix_SMPTE240M = 3
End Enum

Public Enum DXVA2_VideoLighting
    DXVA2_VideoLightingMask = &Hf
    DXVA2_VideoLighting_Unknown = 0
    DXVA2_VideoLighting_bright = 1
    DXVA2_VideoLighting_office = 2
    DXVA2_VideoLighting_dim = 3
    DXVA2_VideoLighting_dark = 4
End Enum

Public Enum DXVA2_VideoPrimaries
    DXVA2_VideoPrimariesMask = &H1f
    DXVA2_VideoPrimaries_Unknown = 0
    DXVA2_VideoPrimaries_reserved = 1
    DXVA2_VideoPrimaries_BT709 = 2
    DXVA2_VideoPrimaries_BT470_2_SysM = 3
    DXVA2_VideoPrimaries_BT470_2_SysBG = 4
    DXVA2_VideoPrimaries_SMPTE170M = 5
    DXVA2_VideoPrimaries_SMPTE240M = 6
    DXVA2_VideoPrimaries_EBU3213 = 7
    DXVA2_VideoPrimaries_SMPTE_C = 8
End Enum

Public Enum DXVA2_VideoTransferFunction
    DXVA2_VideoTransFuncMask = &H1f
    DXVA2_VideoTransFunc_Unknown = 0
    DXVA2_VideoTransFunc_10 = 1
    DXVA2_VideoTransFunc_18 = 2
    DXVA2_VideoTransFunc_20 = 3
    DXVA2_VideoTransFunc_22 = 4
    DXVA2_VideoTransFunc_709 = 5
    DXVA2_VideoTransFunc_240M = 6
    DXVA2_VideoTransFunc_sRGB = 7
    DXVA2_VideoTransFunc_28 = 8
    ' 
    '  Deprecated labels - please use the ones in the DXVA2_VideoTransferFunction enum.
    ' 
    DXVA2_VideoTransFunc_22_709 = DXVA2_VideoTransFunc_709
    DXVA2_VideoTransFunc_22_240M = DXVA2_VideoTransFunc_240M
    DXVA2_VideoTransFunc_22_8bit_sRGB = DXVA2_VideoTransFunc_sRGB
End Enum

Public Type DXVA2_Frequency
    Numerator As Long
    Denominator As Long
End Type

Public Type DXVA2_VideoDesc
    SampleWidth As Long
    SampleHeight As Long
    SampleFormat As DXVA2_ExtendedFormat
    Format As D3DFORMAT
    InputSampleFreq As DXVA2_Frequency
    OutputFrameFreq As DXVA2_Frequency
    UABProtectionLevel As Long
    Reserved As Long
End Type

Public Enum DXVA2_DeinterlaceTech
    DXVA2_DeinterlaceTech_Unknown = 0
    DXVA2_DeinterlaceTech_BOBLineReplicate = &H1
    DXVA2_DeinterlaceTech_BOBVerticalStretch = &H2
    DXVA2_DeinterlaceTech_BOBVerticalStretch4Tap = &H4
    DXVA2_DeinterlaceTech_MedianFiltering = &H8
    DXVA2_DeinterlaceTech_EdgeFiltering = &H10
    DXVA2_DeinterlaceTech_FieldAdaptive = &H20
    DXVA2_DeinterlaceTech_PixelAdaptive = &H40
    DXVA2_DeinterlaceTech_MotionVectorSteered = &H80
    DXVA2_DeinterlaceTech_InverseTelecine = &H100
    DXVA2_DeinterlaceTech_Mask = &H1ff
End Enum

Public Enum DXVA2_ImageFilters
    DXVA2_NoiseFilterLumaLevel = 1
    DXVA2_NoiseFilterLumaThreshold = 2
    DXVA2_NoiseFilterLumaRadius = 3
    DXVA2_NoiseFilterChromaLevel = 4
    DXVA2_NoiseFilterChromaThreshold = 5
    DXVA2_NoiseFilterChromaRadius = 6
    DXVA2_DetailFilterLumaLevel = 7
    DXVA2_DetailFilterLumaThreshold = 8
    DXVA2_DetailFilterLumaRadius = 9
    DXVA2_DetailFilterChromaLevel = 10
    DXVA2_DetailFilterChromaThreshold = 11
    DXVA2_DetailFilterChromaRadius = 12
End Enum

Public Enum DXVA2_NoiseFilterTech
    DXVA2_NoiseFilterTech_Unsupported = 0
    DXVA2_NoiseFilterTech_Unknown = &H1
    DXVA2_NoiseFilterTech_Median = &H2
    DXVA2_NoiseFilterTech_Temporal = &H4
    DXVA2_NoiseFilterTech_BlockNoise = &H8
    DXVA2_NoiseFilterTech_MosquitoNoise = &H10
    DXVA2_NoiseFilterTech_Mask = &H1f
End Enum

Public Enum DXVA2_DetailFilterTech
    DXVA2_DetailFilterTech_Unsupported = 0
    DXVA2_DetailFilterTech_Unknown = &H1
    DXVA2_DetailFilterTech_Edge = &H2
    DXVA2_DetailFilterTech_Sharpening = &H4
    DXVA2_DetailFilterTech_Mask = &H7
End Enum

Public Enum DXVA2_ProcAmp
    DXVA2_ProcAmp_None = 0
    DXVA2_ProcAmp_Brightness = &H1
    DXVA2_ProcAmp_Contrast = &H2
    DXVA2_ProcAmp_Hue = &H4
    DXVA2_ProcAmp_Saturation = &H8
    DXVA2_ProcAmp_Mask = &Hf
End Enum

Public Enum DXVA2_VideoProcess
    DXVA2_VideoProcess_None = 0
    DXVA2_VideoProcess_YUV2RGB = &H1
    DXVA2_VideoProcess_StretchX = &H2
    DXVA2_VideoProcess_StretchY = &H4
    DXVA2_VideoProcess_AlphaBlend = &H8
    DXVA2_VideoProcess_SubRects = &H10
    DXVA2_VideoProcess_SubStreams = &H20
    DXVA2_VideoProcess_SubStreamsExtended = &H40
    DXVA2_VideoProcess_YUV2RGBExtended = &H80
    DXVA2_VideoProcess_AlphaBlendExtended = &H100
    DXVA2_VideoProcess_Constriction = &H200
    DXVA2_VideoProcess_NoiseFilter = &H400
    DXVA2_VideoProcess_DetailFilter = &H800
    DXVA2_VideoProcess_PlanarAlpha = &H1000
    DXVA2_VideoProcess_LinearScaling = &H2000
    DXVA2_VideoProcess_GammaCompensated = &H4000
    DXVA2_VideoProcess_MaintainsOriginalFieldData = &H8000&
    DXVA2_VideoProcess_Mask = &Hffff&
End Enum

Public Enum DXVA2_VPDev
    DXVA2_VPDev_HardwareDevice = &H1
    DXVA2_VPDev_EmulatedDXVA1 = &H2
    DXVA2_VPDev_SoftwareDevice = &H4
    DXVA2_VPDev_Mask = &H7
End Enum

Public Enum DXVA2_SampleData
    DXVA2_SampleData_RFF = &H1
    DXVA2_SampleData_TFF = &H2
    DXVA2_SampleData_RFF_TFF_Present = &H4
    DXVA2_SampleData_Mask = &Hffff&
End Enum

Public Enum DXVA2_DestData
    DXVA2_DestData_RFF = &H1
    DXVA2_DestData_TFF = &H2
    DXVA2_DestData_RFF_TFF_Present = &H4
    DXVA2_DestData_Mask = &Hffff&
End Enum

Public Type DXVA2_VideoProcessorCaps
    DeviceCaps As DXVA2_VPDev
    InputPool As D3DPOOL
    NumForwardRefSamples As Long
    NumBackwardRefSamples As Long
    Reserved As Long
    DeinterlaceTechnology As DXVA2_DeinterlaceTech
    ProcAmpControlCaps As Long
    VideoProcessorOperations As DXVA2_VideoProcess
    NoiseFilterTechnology As DXVA2_NoiseFilterTech
    DetailFilterTechnology As DXVA2_DetailFilterTech
End Type

Public Type DXVA2_AYUVSample8
    cr As Byte
    cb As Byte
    y As Byte
    Alpha As Byte
End Type

Public Type DXVA2_AYUVSample16
    cr As Integer
    cb As Integer
    y As Integer
    Alpha As Integer
End Type

Public Type DXVA2_VideoSample
    Start As LongLong
    End As LongLong
    SampleFormat As DXVA2_ExtendedFormat
    SrcSurface As IDirect3DSurface9
    srcRect As RECT
    dstRect As RECT
    Pal(0 To 15) As DXVA2_AYUVSample8
    PlanarAlpha As Long
    SampleData As DXVA2_SampleData
End Type

Public Type DXVA2_ValueRange
    minValue As Long
    maxValue As Long
    defaultValue As Long
    StepSize As Long
End Type

Public Type DXVA2_ProcAmpValues
    Brightness As Long
    Contrast As Long
    Hue As Long
    Saturation As Long
End Type

Public Type DXVA2_FilterValues
    Level As Long
    Threshold As Long
    radius As Long
End Type

Public Type DXVA2_VideoProcessBltParams
    TargetFrame As LongLong
    TargetRect As RECT
    ConstrictionSize As SIZE
    StreamingFlags As Long
    BackgroundColor As DXVA2_AYUVSample16
    DestFormat As DXVA2_ExtendedFormat
    ProcAmpValues As DXVA2_ProcAmpValues
    Alpha As Long
    NoiseFilterLuma As DXVA2_FilterValues
    NoiseFilterChroma As DXVA2_FilterValues
    DetailFilterLuma As DXVA2_FilterValues
    DetailFilterChroma As DXVA2_FilterValues
    DestData As DXVA2_DestData
End Type

Public Enum DXVA2BufferTypes
    DXVA2_PictureParametersBufferType = 0
    DXVA2_MacroBlockControlBufferType = 1
    DXVA2_ResidualDifferenceBufferType = 2
    DXVA2_DeblockingControlBufferType = 3
    DXVA2_InverseQuantizationMatrixBufferType = 4
    DXVA2_SliceControlBufferType = 5
    DXVA2_BitStreamDateBufferType = 6
    DXVA2_MotionVectorBuffer = 7
    DXVA2_FilmGrainBuffer = 8
End Enum

Public Enum DXVA2RenderTargets
    DXVA2_VideoDecoderRenderTarget = 0
    DXVA2_VideoProcessorRenderTarget = 1
    DXVA2_VideoSoftwareRenderTarget = 2
End Enum

Public Type DXVA2_ConfigPictureDecode
    guidConfigBitstreamEncryption As UUID
    guidConfigMBcontrolEncryption As UUID
    guidConfigResidDiffEncryption As UUID
    ConfigBitstreamRaw As Long
    ConfigMBcontrolRasterOrder As Long
    ConfigResidDiffHost As Long
    ConfigSpatialResid8 As Long
    ConfigResid8Subtraction As Long
    ConfigSpatialHost8or9Clipping As Long
    ConfigSpatialResidInterleaved As Long
    ConfigIntraResidUnsigned As Long
    ConfigResidDiffAccelerator As Long
    ConfigHostInverseScan As Long
    ConfigSpecificIDCT As Long
    Config4GroupedCoefs As Long
    ConfigMinRenderTargetBuffCount As Integer
    ConfigDecoderSpecific As Integer
End Type

Public Type DXVA2_DecodeBufferDesc
    CompressedBufferType As DXVA2BufferTypes
    BufferIndex As Long
    DataOffset As Long
    dataSize As Long
    FirstMBaddress As Long
    NumMBsInBuffer As Long
    width As Long
    Height As Long
    stride As Long
    ReservedBits As Long
    pvPVPState As LongPtr
End Type

Public Type DXVA2_AES_CTR_IV
    IV As LongLong
    Count As LongLong
End Type

Public Type DXVA2_DecodeExtensionData
    Function As Long
    pPrivateInputData As LongPtr
    PrivateInputDataSize As Long
    pPrivateOutputData As LongPtr
    PrivateOutputDataSize As Long
End Type

Public Enum DXVA2DecodeFlags
    DXVA2_DECODE_GET_DRIVER_HANDLE = &H725
    '  DXVA2_DECODE_SPECIFY_ENCRYPTED_BLOCKS is an extension function that that allows
    '  the decoder to specify which portions of the compressed buffers are encrypted.
    '  If this fucntion is not used to specify this information, it is assumed that
    '  the entire buffer is encrypted.
    '      pPrivateInputData = D3DENCRYPTED_BLOCK_INFO*;
    '      PrivateInputDataSize = sizeof(D3DENCRYPTED_BLOCK_INFO);
    '      pPrivateOutputData = NULL;
    '      PrivateOutputDataSize = 0;
    DXVA2_DECODE_SPECIFY_ENCRYPTED_BLOCKS = &H724
End Enum

Public Type DXVA2_DecodeExecuteParams
    NumCompBuffers As Long
    pCompressedBuffers As LongPtr 'DXVA2_DecodeBufferDesc*
    pExtensionData As LongPtr 'DXVA2_DecodeExtensionData*
End Type

Public Enum DXVA2_SurfaceType
    DXVA2_SurfaceType_DecoderRenderTarget = 0
    DXVA2_SurfaceType_ProcessorRenderTarget = 1
    DXVA2_SurfaceType_D3DRenderTargetTexture = 2
End Enum

Public Enum DXVAHD_FRAME_FORMAT
    DXVAHD_FRAME_FORMAT_PROGRESSIVE = 0
    DXVAHD_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST = 1
    DXVAHD_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST = 2
End Enum

Public Enum DXVAHD_DEVICE_USAGE
    DXVAHD_DEVICE_USAGE_PLAYBACK_NORMAL = 0
    DXVAHD_DEVICE_USAGE_OPTIMAL_SPEED = 1
    DXVAHD_DEVICE_USAGE_OPTIMAL_QUALITY = 2
End Enum

Public Enum DXVAHD_SURFACE_TYPE
    DXVAHD_SURFACE_TYPE_VIDEO_INPUT = 0
    DXVAHD_SURFACE_TYPE_VIDEO_INPUT_PRIVATE = 1
    DXVAHD_SURFACE_TYPE_VIDEO_OUTPUT = 2
End Enum

Public Enum DXVAHD_DEVICE_TYPE
    DXVAHD_DEVICE_TYPE_HARDWARE = 0
    DXVAHD_DEVICE_TYPE_SOFTWARE = 1
    DXVAHD_DEVICE_TYPE_REFERENCE = 2
    DXVAHD_DEVICE_TYPE_OTHER = 3
End Enum

Public Enum DXVAHD_DEVICE_CAPS
    DXVAHD_DEVICE_CAPS_LINEAR_SPACE = 1
    DXVAHD_DEVICE_CAPS_xvYCC = 2
    DXVAHD_DEVICE_CAPS_RGB_RANGE_CONVERSION = 4
    DXVAHD_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION = 8
End Enum

Public Enum DXVAHD_FEATURE_CAPS
    DXVAHD_FEATURE_CAPS_ALPHA_FILL = 1
    DXVAHD_FEATURE_CAPS_CONSTRICTION = 2
    DXVAHD_FEATURE_CAPS_LUMA_KEY = 4
    DXVAHD_FEATURE_CAPS_ALPHA_PALETTE = 8
End Enum
 
Public Enum DXVAHD_FILTER_CAPS
    DXVAHD_FILTER_CAPS_BRIGHTNESS = &H1
    DXVAHD_FILTER_CAPS_CONTRAST = &H2
    DXVAHD_FILTER_CAPS_HUE = &H4
    DXVAHD_FILTER_CAPS_SATURATION = &H8
    DXVAHD_FILTER_CAPS_NOISE_REDUCTION = &H10
    DXVAHD_FILTER_CAPS_EDGE_ENHANCEMENT = &H20
    DXVAHD_FILTER_CAPS_ANAMORPHIC_SCALING = &H40
End Enum

Public Enum DXVAHD_INPUT_FORMAT_CAPS
    DXVAHD_INPUT_FORMAT_CAPS_RGB_INTERLACED = &H1
    DXVAHD_INPUT_FORMAT_CAPS_RGB_PROCAMP = &H2
    DXVAHD_INPUT_FORMAT_CAPS_RGB_LUMA_KEY = &H4
    DXVAHD_INPUT_FORMAT_CAPS_PALETTE_INTERLACED = &H8
End Enum

Public Enum DXVAHD_PROCESSOR_CAPS
    DXVAHD_PROCESSOR_CAPS_DEINTERLACE_BLEND = &H1
    DXVAHD_PROCESSOR_CAPS_DEINTERLACE_BOB = &H2
    DXVAHD_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE = &H4
    DXVAHD_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION = &H8
    DXVAHD_PROCESSOR_CAPS_INVERSE_TELECINE = &H10
    DXVAHD_PROCESSOR_CAPS_FRAME_RATE_CONVERSION = &H20
End Enum

Public Enum DXVAHD_ITELECINE_CAPS
    DXVAHD_ITELECINE_CAPS_32 = &H1
    DXVAHD_ITELECINE_CAPS_22 = &H2
    DXVAHD_ITELECINE_CAPS_2224 = &H4
    DXVAHD_ITELECINE_CAPS_2332 = &H8
    DXVAHD_ITELECINE_CAPS_32322 = &H10
    DXVAHD_ITELECINE_CAPS_55 = &H20
    DXVAHD_ITELECINE_CAPS_64 = &H40
    DXVAHD_ITELECINE_CAPS_87 = &H80
    DXVAHD_ITELECINE_CAPS_222222222223 = &H100
    DXVAHD_ITELECINE_CAPS_OTHER = &H80000000
End Enum

Public Enum DXVAHD_FILTER
    DXVAHD_FILTER_BRIGHTNESS = 0
    DXVAHD_FILTER_CONTRAST = 1
    DXVAHD_FILTER_HUE = 2
    DXVAHD_FILTER_SATURATION = 3
    DXVAHD_FILTER_NOISE_REDUCTION = 4
    DXVAHD_FILTER_EDGE_ENHANCEMENT = 5
    DXVAHD_FILTER_ANAMORPHIC_SCALING = 6
End Enum

Public Enum DXVAHD_BLT_STATE
    DXVAHD_BLT_STATE_TARGET_RECT = 0
    DXVAHD_BLT_STATE_BACKGROUND_COLOR = 1
    DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE = 2
    DXVAHD_BLT_STATE_ALPHA_FILL = 3
    DXVAHD_BLT_STATE_CONSTRICTION = 4
    DXVAHD_BLT_STATE_PRIVATE = 1000
End Enum

Public Enum DXVAHD_ALPHA_FILL_MODE
    DXVAHD_ALPHA_FILL_MODE_OPAQUE = 0
    DXVAHD_ALPHA_FILL_MODE_BACKGROUND = 1
    DXVAHD_ALPHA_FILL_MODE_DESTINATION = 2
    DXVAHD_ALPHA_FILL_MODE_SOURCE_STREAM = 3
End Enum

Public Enum DXVAHD_STREAM_STATE
    DXVAHD_STREAM_STATE_D3DFORMAT = 0
    DXVAHD_STREAM_STATE_FRAME_FORMAT = 1
    DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE = 2
    DXVAHD_STREAM_STATE_OUTPUT_RATE = 3
    DXVAHD_STREAM_STATE_SOURCE_RECT = 4
    DXVAHD_STREAM_STATE_DESTINATION_RECT = 5
    DXVAHD_STREAM_STATE_ALPHA = 6
    DXVAHD_STREAM_STATE_PALETTE = 7
    DXVAHD_STREAM_STATE_LUMA_KEY = 8
    DXVAHD_STREAM_STATE_ASPECT_RATIO = 9
    DXVAHD_STREAM_STATE_FILTER_BRIGHTNESS = 100
    DXVAHD_STREAM_STATE_FILTER_CONTRAST = 101
    DXVAHD_STREAM_STATE_FILTER_HUE = 102
    DXVAHD_STREAM_STATE_FILTER_SATURATION = 103
    DXVAHD_STREAM_STATE_FILTER_NOISE_REDUCTION = 104
    DXVAHD_STREAM_STATE_FILTER_EDGE_ENHANCEMENT = 105
    DXVAHD_STREAM_STATE_FILTER_ANAMORPHIC_SCALING = 106
    DXVAHD_STREAM_STATE_PRIVATE = 1000
End Enum

Public Enum DXVAHD_OUTPUT_RATE
    DXVAHD_OUTPUT_RATE_NORMAL = 0
    DXVAHD_OUTPUT_RATE_HALF = 1
    DXVAHD_OUTPUT_RATE_CUSTOM = 2
End Enum

Public Type DXVAHD_RATIONAL
    Numerator As Long
    Denominator As Long
End Type

Public Type DXVAHD_COLOR_RGBA
    r As Single
    g As Single
    b As Single
    a As Single
End Type

Public Type DXVAHD_COLOR_YCbCrA
    y As Single
    cb As Single
    cr As Single
    a As Single
End Type

' typedef union _DXVAHD_COLOR
' {
    ' DXVAHD_COLOR_RGBA   RGB;
    ' DXVAHD_COLOR_YCbCrA YCbCr;
' } DXVAHD_COLOR;
Public Type DXVAHD_COLOR
    RorY As Single
    GorCb As Single
    BorCr As Single
    A As Single
End Type

Public Type DXVAHD_CONTENT_DESC
    InputFrameFormat As DXVAHD_FRAME_FORMAT
    InputFrameRate As DXVAHD_RATIONAL
    InputWidth As Long
    InputHeight As Long
    OutputFrameRate As DXVAHD_RATIONAL
    OutputWidth As Long
    OutputHeight As Long
End Type

Public Type DXVAHD_VPDEVCAPS
    DeviceType As DXVAHD_DEVICE_TYPE
    DeviceCaps As DXVAHD_DEVICE_CAPS ' DXVAHD_DEVICE_CAPS
    FeatureCaps As DXVAHD_FEATURE_CAPS ' DXVAHD_FEATURE_CAPS
    FilterCaps As DXVAHD_FILTER_CAPS ' DXVAHD_FILTER_CAPS
    InputFormatCaps As DXVAHD_INPUT_FORMAT_CAPS ' DXVAHD_INPUT_FORMAT_CAPS
    InputPool As D3DPOOL
    OutputFormatCount As Long
    InputFormatCount As Long
    VideoProcessorCount As Long
    MaxInputStreams As Long
    MaxStreamStates As Long
End Type

Public Type DXVAHD_VPCAPS
    VPGuid As UUID
    PastFrames As Long
    FutureFrames As Long
    ProcessorCaps As DXVAHD_PROCESSOR_CAPS ' DXVAHD_PROCESSOR_CAPS
    ITelecineCaps As DXVAHD_ITELECINE_CAPS ' DXVAHD_ITELECINE_CAPS
    CustomRateCount As Long
End Type

Public Type DXVAHD_CUSTOM_RATE_DATA
    CustomRate As DXVAHD_RATIONAL
    OutputFrames As Long
    InputInterlaced As BOOL
    InputFramesOrFields As Long
End Type

Public Type DXVAHD_FILTER_RANGE_DATA
    Minimum As Long
    Maximum As Long
    Default As Long
    Multiplier As Single
End Type

Public Type DXVAHD_BLT_STATE_TARGET_RECT_DATA
    Enable As BOOL
    TargetRect As RECT
End Type

Public Type DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA
    YCbCr As BOOL
    BackgroundColor As DXVAHD_COLOR
End Type

Public Type DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA
    'union
    '{
    '    struct
    '    {
    '        UINT Usage : 1; // 0:Playback,     1:Processing
    '        UINT RGB_Range : 1; // 0:Full(0-255),  1:Limited(16-235)
    '        UINT YCbCr_Matrix : 1; // 0:BT.601(SDTV), 1:BT.709(HDTV)
    '        UINT YCbCr_xvYCC : 1; // 0:Conventional, 1:Extended(xvYCC)
    '        UINT Reserved : 28;
    '    };
    Value As Long
    ' };
End Type

Public Type DXVAHD_BLT_STATE_ALPHA_FILL_DATA
    mode As DXVAHD_ALPHA_FILL_MODE
    StreamNumber As Long
End Type

Public Type DXVAHD_BLT_STATE_CONSTRICTION_DATA
    Enable As BOOL
    SIZE As SIZE
End Type

Public Type DXVAHD_BLT_STATE_PRIVATE_DATA
    guid As UUID
    dataSize As Long
    pData As LongPtr
End Type

Public Type DXVAHD_STREAM_STATE_D3DFORMAT_DATA
    Format As D3DFORMAT
End Type

Public Type DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA
    FrameFormat As DXVAHD_FRAME_FORMAT
End Type

Public Type DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA
    'union
    '{
    '    struct
    '    {
    '        UINT Type : 1; // 0:Video,        1:Graphics
    '        UINT RGB_Range : 1; // 0:Full(0-255),  1:Limited(16-235)
    '        UINT YCbCr_Matrix : 1; // 0:BT.601(SDTV), 1:BT.709(HDTV)
    '        UINT YCbCr_xvYCC : 1; // 0:Conventional, 1:Extended(xvYCC)
    '        UINT Reserved : 28;
    '    };
    Value As Long
    '};
End Type

Public Type DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA
    RepeatFrame As BOOL
    OutputRate As DXVAHD_OUTPUT_RATE
    CustomRate As DXVAHD_RATIONAL
End Type

Public Type DXVAHD_STREAM_STATE_SOURCE_RECT_DATA
    Enable As BOOL
    sourceRect As RECT
End Type

Public Type DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA
    Enable As BOOL
    DestinationRect As RECT
End Type

Public Type DXVAHD_STREAM_STATE_ALPHA_DATA
    Enable As BOOL
    Alpha As Single
End Type

Public Type DXVAHD_STREAM_STATE_PALETTE_DATA
    Count As Long
    pEntries As LongPtr
End Type

Public Type DXVAHD_STREAM_STATE_LUMA_KEY_DATA
    Enable As BOOL
    Lower As Single
    Upper As Single
End Type

Public Type DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA
    Enable As BOOL
    SourceAspectRatio As DXVAHD_RATIONAL
    DestinationAspectRatio As DXVAHD_RATIONAL
End Type

Public Type DXVAHD_STREAM_STATE_FILTER_DATA
    Enable As BOOL
    Level As Long
End Type

Public Type DXVAHD_STREAM_STATE_PRIVATE_DATA
    guid As UUID
    dataSize As Long
    pData As LongPtr
End Type

Public Type DXVAHD_STREAM_DATA
    Enable As BOOL
    OutputIndex As Long
    InputFrameOrField As Long
    PastFrames As Long
    FutureFrames As Long
    ppPastSurfaces As LongPtr ' IDirect3DSurface9**
    pInputSurface As IDirect3DSurface9
    ppFutureSurfaces As LongPtr ' IDirect3DSurface9**
End Type

Public Type DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA
    Enable As BOOL
    ITelecineFlags As DXVAHD_ITELECINE_CAPS
    frames As Long
    InputField As Long
End Type

Public Type DXVAHDETW_CREATEVIDEOPROCESSOR
    pObject As LongLong
    pD3D9Ex As LongLong
    VPGuid As UUID
End Type

Public Type DXVAHDETW_VIDEOPROCESSBLTSTATE
    pObject As LongLong
    State As DXVAHD_BLT_STATE
    dataSize As Long
    SetState As BOOL
End Type

Public Type DXVAHDETW_VIDEOPROCESSSTREAMSTATE
    pObject As LongLong
    StreamNumber As Long
    State As DXVAHD_STREAM_STATE
    dataSize As Long
    SetState As BOOL
End Type

Public Type DXVAHDETW_VIDEOPROCESSBLTHD
    pObject As LongLong
    pOutputSurface As LongLong
    TargetRect As RECT
    OutputFormat As D3DFORMAT
    ColorSpace As Long
    OutputFrame As Long
    StreamCount As Long
    Enter As BOOL
End Type

Public Type DXVAHDETW_VIDEOPROCESSBLTHD_STREAM
    pObject As LongLong
    pInputSurface As LongLong
    sourceRect As RECT
    DestinationRect As RECT
    InputFormat As D3DFORMAT
    FrameFormat As DXVAHD_FRAME_FORMAT
    ColorSpace As Long
    StreamNumber As Long
    OutputIndex As Long
    InputFrameOrField As Long
    PastFrames As Long
    FutureFrames As Long
End Type

Public Type DXVAHDETW_DESTROYVIDEOPROCESSOR
    pObject As LongLong
End Type


Public Delegate Function PDXVAHDSW_CreateDevice (ByVal pD3DDevice As IDirect3DDevice9Ex, phDevice As LongPtr) As Long
Public Delegate Function PDXVAHDSW_ProposeVideoPrivateFormat (ByVal hDevice As LongPtr, pFormat As D3DFORMAT) As Long
Public Delegate Function PDXVAHDSW_GetVideoProcessorDeviceCaps (ByVal hDevice As LongPtr, pContentDesc As DXVAHD_CONTENT_DESC, ByVal Usage As DXVAHD_DEVICE_USAGE, pCaps As DXVAHD_VPDEVCAPS) As Long
Public Delegate Function PDXVAHDSW_GetVideoProcessorOutputFormats (ByVal hDevice As LongPtr, pContentDesc As DXVAHD_CONTENT_DESC, ByVal Usage As DXVAHD_DEVICE_USAGE, ByVal Count As Long, pFormats As D3DFORMAT) As Long
Public Delegate Function PDXVAHDSW_GetVideoProcessorInputFormats (ByVal hDevice As LongPtr, pContentDesc As DXVAHD_CONTENT_DESC, ByVal Usage As DXVAHD_DEVICE_USAGE, ByVal Count As Long, pFormats As D3DFORMAT) As Long
Public Delegate Function PDXVAHDSW_GetVideoProcessorCaps (ByVal hDevice As LongPtr, pContentDesc As DXVAHD_CONTENT_DESC, ByVal Usage As DXVAHD_DEVICE_USAGE, ByVal Count As Long, pCaps As DXVAHD_VPDEVCAPS) As Long
Public Delegate Function PDXVAHDSW_GetVideoProcessorCustomRates (ByVal hDevice As LongPtr, pVPGuid As UUID, ByVal Count As Long, pRates As DXVAHD_CUSTOM_RATE_DATA) As Long
Public Delegate Function PDXVAHDSW_GetVideoProcessorFilterRange (ByVal hDevice As LongPtr, ByVal Filter As DXVAHD_FILTER, oRange As DXVAHD_FILTER_RANGE_DATA) As Long
Public Delegate Function PDXVAHDSW_DestroyDevice (ByVal hDevice As LongPtr) As Long
Public Delegate Function PDXVAHDSW_CreateVideoProcessor (ByVal hDevice As LongPtr, pVPGuid As UUID, phVideoProcessor As LongPtr) As Long
Public Delegate Function PDXVAHDSW_SetVideoProcessBltState (ByVal hVideoProcessor As LongPtr, ByVal State As DXVAHD_BLT_STATE, ByVal DataSize As Long, pData As Any) As Long
Public Delegate Function PDXVAHDSW_GetVideoProcessBltStatePrivate (ByVal hVideoProcessor As LongPtr, pData As DXVAHD_BLT_STATE_PRIVATE_DATA) As Long
Public Delegate Function PDXVAHDSW_SetVideoProcessStreamState (ByVal hVideoProcessor As LongPtr, ByVal StreamNumber As Long, ByVal State As DXVAHD_STREAM_STATE, ByVal DataSize As Long, pData As Any) As Long
Public Delegate Function PDXVAHDSW_GetVideoProcessStreamStatePrivate (ByVal hVideoProcessor As LongPtr, ByVal StreamNumber As Long, pData As DXVAHD_STREAM_STATE_PRIVATE_DATA) As Long
Public Delegate Function PDXVAHDSW_VideoProcessBltHD (ByVal hVideoProcessor As LongPtr, ByVal pOutputSurface As IDirect3DSurface9, ByVal OutputFrame As Long, ByVal StreamCount As Long, pStreams As DXVAHD_STREAM_DATA) As Long
Public Delegate Function PDXVAHDSW_DestroyVideoProcessor (ByVal hVideoProcessor As LongPtr) As Long

' #If WINDEVLIB_NO_DELEGATES Then
Public Type DXVAHDSW_CALLBACKS
    CreateDevice As LongPtr
    ProposeVideoPrivateFormat As LongPtr
    GetVideoProcessorDeviceCaps As LongPtr
    GetVideoProcessorOutputFormats As LongPtr
    GetVideoProcessorInputFormats As LongPtr
    GetVideoProcessorCaps As LongPtr
    GetVideoProcessorCustomRates As LongPtr
    GetVideoProcessorFilterRange As LongPtr
    DestroyDevice As LongPtr
    CreateVideoProcessor As LongPtr
    SetVideoProcessBltState As LongPtr
    GetVideoProcessBltStatePrivate As LongPtr
    SetVideoProcessStreamState As LongPtr
    GetVideoProcessStreamStatePrivate As LongPtr
    VideoProcessBltHD As LongPtr
    DestroyVideoProcessor As LongPtr
End Type
' #Else
' Public Type DXVAHDSW_CALLBACKS
    ' CreateDevice As PDXVAHDSW_CreateDevice
    ' ProposeVideoPrivateFormat As PDXVAHDSW_ProposeVideoPrivateFormat
    ' GetVideoProcessorDeviceCaps As PDXVAHDSW_GetVideoProcessorDeviceCaps
    ' GetVideoProcessorOutputFormats As PDXVAHDSW_GetVideoProcessorOutputFormats
    ' GetVideoProcessorInputFormats As PDXVAHDSW_GetVideoProcessorInputFormats
    ' GetVideoProcessorCaps As PDXVAHDSW_GetVideoProcessorCaps
    ' GetVideoProcessorCustomRates As PDXVAHDSW_GetVideoProcessorCustomRates
    ' GetVideoProcessorFilterRange As PDXVAHDSW_GetVideoProcessorFilterRange
    ' DestroyDevice As PDXVAHDSW_DestroyDevice
    ' CreateVideoProcessor As PDXVAHDSW_CreateVideoProcessor
    ' SetVideoProcessBltState As PDXVAHDSW_SetVideoProcessBltState
    ' GetVideoProcessBltStatePrivate As PDXVAHDSW_GetVideoProcessBltStatePrivate
    ' SetVideoProcessStreamState As PDXVAHDSW_SetVideoProcessStreamState
    ' GetVideoProcessStreamStatePrivate As PDXVAHDSW_GetVideoProcessStreamStatePrivate
    ' VideoProcessBltHD As PDXVAHDSW_VideoProcessBltHD
    ' DestroyVideoProcessor As PDXVAHDSW_DestroyVideoProcessor
' End Type
' #End If

Public Delegate Function PDXVAHDSW_Plugin (ByVal Size As Long, pCallbacks As DXVAHDSW_CALLBACKS) As Long





Public Type MFVideoAlphaBitmapParams
    dwFlags As Long
    clrSrcKey As Long
    rcSrc As RECT
    nrcDest As MFVideoNormalizedRect
    fAlpha As Single
    dwFilterMode As D3DTEXTUREFILTERTYPE
End Type

Public Type MFVideoAlphaBitmap
    GetBitmapFromDC As BOOL
    'union
    '{
    '    HDC hdc;
    '    IDirect3DSurface9* pDDS;
    '}     bitmap;
    bitmap As LongPtr
    params As MFVideoAlphaBitmapParams
End Type

Public Enum MFVideoAlphaBitmapFlags
    MFVideoAlphaBitmap_EntireDDS = &H1
    MFVideoAlphaBitmap_SrcColorKey = &H2
    MFVideoAlphaBitmap_SrcRect = &H4
    MFVideoAlphaBitmap_DestRect = &H8
    MFVideoAlphaBitmap_FilterMode = &H10
    MFVideoAlphaBitmap_Alpha = &H20
    MFVideoAlphaBitmap_BitMask = &H3f
End Enum

    Public Const DXVA2_E_NOT_INITIALIZED  = (&H80041000)
    Public Const DXVA2_E_NEW_VIDEO_DEVICE  = (&H80041001)
    Public Const DXVA2_E_VIDEO_DEVICE_LOCKED  = (&H80041002)
    Public Const DXVA2_E_NOT_AVAILABLE  = (&H80041003)
    
    Public Const MAX_SUBSTREAMS = 15
    Public Const MAX_DEINTERLACE_SURFACES = 32
    
    
    Public Declare PtrSafe Function DXVAHD_CreateDevice Lib "dxva2.dll" (ByVal pD3DDevice As IDirect3DDevice9Ex, ByRef pContentDesc As DXVAHD_CONTENT_DESC, ByVal Usage As DXVAHD_DEVICE_USAGE, ByRef pPlugin As Any, ByRef ppDevice As IDXVAHD_Device) As Long
    Public Delegate Function PDXVAHD_CreateDevice (ByVal pD3DDevice As IDirect3DDevice9Ex, ByRef pContentDesc As DXVAHD_CONTENT_DESC, ByVal Usage As DXVAHD_DEVICE_USAGE, ByRef pPlugin As Any, ByRef ppDevice As IDXVAHD_Device) As Long
    [PreserveSig(False)]
    Public Declare PtrSafe Function DXVAHD_CreateDevice Lib "dxva2.dll" (ByVal pD3DDevice As IDirect3DDevice9Ex, ByRef pContentDesc As DXVAHD_CONTENT_DESC, ByVal Usage As DXVAHD_DEVICE_USAGE, ByRef pPlugin As Any) As IDXVAHD_Device
    Public Declare PtrSafe Function DXVA2CreateDirect3DDeviceManager9 Lib "dxva2.dll" (pResetToken As Long, ppDeviceManager As IDirect3DDeviceManager9) As Long
    Public Declare PtrSafe Function DXVA2CreateVideoService Lib "dxva2.dll" (ByVal pDD As IDirect3DDevice9, riid As UUID, ppv As Any) As Long
    
    Public Type DXVA2_Fixed32
        '      union { 
        '          struct { 
        '              USHORT  Fraction; 
        '              SHORT   Value; 
        '       }; 
        '          LONG ll; 
        '       }; 
        Fraction As Integer
        Value As Integer
    End Type
 
    Public Function DXVA2FloatToFixed(ByVal float As Single) As Long
        Dim fixed As DXVA2_Fixed32
        Dim fr As Long = CLng(float * &H10000&)
        Dim v As Long = CLng(float * &H10000&)
        fixed.Fraction = LOWORD(fr)
        fixed.Value = HIWORD(v)
        CopyMemory DXVA2FloatToFixed, fixed, 4
    End Function
    
    [Description("When you have a Long representing a DXVA2_Fixed32, pass VarPtr(Long) to this function.")]
    Public Function DXVA2FixedToFloat(fixed As DXVA2_Fixed32) As Single
        Return CSng(fixed.Value + fixed.Fraction / &H10000)
    End Function
 
    Private Function DXVA2_Fixed32TransparentAlpha() As DXVA2_Fixed32: End Function
' __inline const DXVA2_Fixed32 DXVA2_Fixed32TransparentAlpha()
' {
    ' DXVA2_Fixed32 _fixed_ = {0, 0};
    ' return _fixed_;
' }
Private Function DXVA2_Fixed32OpaqueAlpha() As DXVA2_Fixed32
    DXVA2_Fixed32OpaqueAlpha.Value = 1
End Function
' __inline const DXVA2_Fixed32 DXVA2_Fixed32OpaqueAlpha()
' {
    ' DXVA2_Fixed32 _fixed_ = {0, 1};
    ' return _fixed_;
' }


Public Const PHYSICAL_MONITOR_DESCRIPTION_SIZE = 128
Public Type PHYSICAL_MONITOR
    hPhysicalMonitor As LongPtr
    szPhysicalMonitorDescription(0 To (PHYSICAL_MONITOR_DESCRIPTION_SIZE - 1)) As Integer
End Type

Public Declare PtrSafe Function GetNumberOfPhysicalMonitorsFromHMONITOR Lib "dxva2.dll" (ByVal hMonitor As LongPtr, pdwNumberOfPhysicalMonitors As Long) As BOOL
Public Declare PtrSafe Function GetNumberOfPhysicalMonitorsFromIDirect3DDevice9 Lib "dxva2.dll" (ByVal pDirect3DDevice9 As IDirect3DDevice9, pdwNumberOfPhysicalMonitors As Long) As Long
Public Declare PtrSafe Function GetPhysicalMonitorsFromHMONITOR Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal dwPhysicalMonitorArraySize As Long, pPhysicalMonitorArray As PHYSICAL_MONITOR) As Long
Public Declare PtrSafe Function GetPhysicalMonitorsFromIDirect3DDevice9 Lib "dxva2.dll" (ByVal pDirect3DDevice9 As IDirect3DDevice9, ByVal dwPhysicalMonitorArraySize As Long, pPhysicalMonitorArray As PHYSICAL_MONITOR) As Long
Public Declare PtrSafe Function DestroyPhysicalMonitor Lib "dxva2.dll" (ByVal hMonitor As LongPtr) As BOOL
Public Declare PtrSafe Function DestroyPhysicalMonitors Lib "dxva2.dll" (ByVal dwPhysicalMonitorArraySize As Long, pPhysicalMonitorArray As PHYSICAL_MONITOR) As Long

Public Enum DXVA2_MC_CAP_FLAGS
    MC_CAPS_NONE = &H00000000
    MC_CAPS_MONITOR_TECHNOLOGY_TYPE = &H00000001
    MC_CAPS_BRIGHTNESS = &H00000002
    MC_CAPS_CONTRAST = &H00000004
    MC_CAPS_COLOR_TEMPERATURE = &H00000008
    MC_CAPS_RED_GREEN_BLUE_GAIN = &H00000010
    MC_CAPS_RED_GREEN_BLUE_DRIVE = &H00000020
    MC_CAPS_DEGAUSS = &H00000040
    MC_CAPS_DISPLAY_AREA_POSITION = &H00000080
    MC_CAPS_DISPLAY_AREA_SIZE = &H00000100
    MC_CAPS_RESTORE_FACTORY_DEFAULTS = &H00000400
    MC_CAPS_RESTORE_FACTORY_COLOR_DEFAULTS = &H00000800
    MC_RESTORE_FACTORY_DEFAULTS_ENABLES_MONITOR_SETTINGS = &H00001000
End Enum

Public Enum DXVA2_MC_ColorTemps
    MC_SUPPORTED_COLOR_TEMPERATURE_NONE = &H00000000
    MC_SUPPORTED_COLOR_TEMPERATURE_4000K = &H00000001
    MC_SUPPORTED_COLOR_TEMPERATURE_5000K = &H00000002
    MC_SUPPORTED_COLOR_TEMPERATURE_6500K = &H00000004
    MC_SUPPORTED_COLOR_TEMPERATURE_7500K = &H00000008
    MC_SUPPORTED_COLOR_TEMPERATURE_8200K = &H00000010
    MC_SUPPORTED_COLOR_TEMPERATURE_9300K = &H00000020
    MC_SUPPORTED_COLOR_TEMPERATURE_10000K = &H00000040
    MC_SUPPORTED_COLOR_TEMPERATURE_11500K = &H00000080
End Enum

Public Enum MC_DISPLAY_TECHNOLOGY_TYPE
    MC_SHADOW_MASK_CATHODE_RAY_TUBE
    MC_APERTURE_GRILL_CATHODE_RAY_TUBE
    MC_THIN_FILM_TRANSISTOR
    MC_LIQUID_CRYSTAL_ON_SILICON
    MC_PLASMA
    MC_ORGANIC_LIGHT_EMITTING_DIODE
    MC_ELECTROLUMINESCENT
    MC_MICROELECTROMECHANICAL
    MC_FIELD_EMISSION_DEVICE
End Enum

Public Enum MC_DRIVE_TYPE
    MC_RED_DRIVE
    MC_GREEN_DRIVE
    MC_BLUE_DRIVE
End Enum

Public Enum MC_GAIN_TYPE
    MC_RED_GAIN
    MC_GREEN_GAIN
    MC_BLUE_GAIN
End Enum

Public Enum MC_POSITION_TYPE
    MC_HORIZONTAL_POSITION
    MC_VERTICAL_POSITION
End Enum

Public Enum MC_SIZE_TYPE
    MC_WIDTH
    MC_HEIGHT
End Enum

Public Enum MC_COLOR_TEMPERATURE
    MC_COLOR_TEMPERATURE_UNKNOWN
    MC_COLOR_TEMPERATURE_4000K
    MC_COLOR_TEMPERATURE_5000K
    MC_COLOR_TEMPERATURE_6500K
    MC_COLOR_TEMPERATURE_7500K
    MC_COLOR_TEMPERATURE_8200K
    MC_COLOR_TEMPERATURE_9300K
    MC_COLOR_TEMPERATURE_10000K
    MC_COLOR_TEMPERATURE_11500K
End Enum

Public Declare PtrSafe Function GetMonitorCapabilities Lib "dxva2.dll" (ByVal hMonitor As LongPtr, pdwMonitorCapabilities As DXVA2_MC_CAP_FLAGS, pdwSupportedColorTemperatures As DXVA2_MC_ColorTemps) As BOOL
Public Declare PtrSafe Function SaveCurrentMonitorSettings Lib "dxva2.dll" (ByVal hMonitor As LongPtr) As BOOL
Public Declare PtrSafe Function GetMonitorTechnologyType Lib "dxva2.dll" (ByVal hMonitor As LongPtr, pdtyDisplayTechnologyType As MC_DISPLAY_TECHNOLOGY_TYPE) As BOOL
Public Declare PtrSafe Function GetMonitorBrightness Lib "dxva2.dll" (ByVal hMonitor As LongPtr, pdwMinimumBrightness As Long, pdwCurrentBrightness As Long, pdwMaximumBrightness As Long) As BOOL
Public Declare PtrSafe Function GetMonitorContrast Lib "dxva2.dll" (ByVal hMonitor As LongPtr, pdwMinimumContrast As Long, pdwCurrentContrast As Long, pdwMaximumContrast As Long) As BOOL
Public Declare PtrSafe Function GetMonitorColorTemperature Lib "dxva2.dll" (ByVal hMonitor As LongPtr, pctCurrentColorTemperature As MC_COLOR_TEMPERATURE) As BOOL
Public Declare PtrSafe Function GetMonitorRedGreenOrBlueDrive Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal dtDriveType As MC_DRIVE_TYPE, pdwMinimumDrive As Long, pdwCurrentDrive As Long, pdwMaximumDrive As Long) As BOOL
Public Declare PtrSafe Function GetMonitorRedGreenOrBlueGain Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal gtGainType As MC_GAIN_TYPE, pdwMinimumGain As Long, pdwCurrentGain As Long, pdwMaximumGain As Long) As BOOL
Public Declare PtrSafe Function SetMonitorBrightness Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal dwNewBrightness As Long) As BOOL
Public Declare PtrSafe Function SetMonitorContrast Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal dwNewContrast As Long) As BOOL
Public Declare PtrSafe Function SetMonitorColorTemperature Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal ctCurrentColorTemperature As MC_COLOR_TEMPERATURE) As BOOL
Public Declare PtrSafe Function SetMonitorRedGreenOrBlueDrive Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal dtDriveType As MC_DRIVE_TYPE, ByVal dwNewDrive As Long) As BOOL
Public Declare PtrSafe Function SetMonitorRedGreenOrBlueGain Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal gtGainType As MC_GAIN_TYPE, ByVal dwNewGain As Long) As BOOL
Public Declare PtrSafe Function DegaussMonitor Lib "dxva2.dll" (ByVal hMonitor As LongPtr) As BOOL
Public Declare PtrSafe Function GetMonitorDisplayAreaSize Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal stSizeType As MC_SIZE_TYPE, pdwMinimumWidthOrHeight As Long, pdwCurrentWidthOrHeight As Long, pdwMaximumWidthOrHeight As Long) As BOOL
Public Declare PtrSafe Function GetMonitorDisplayAreaPosition Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal ptPositionType As MC_POSITION_TYPE, pdwMinimumPosition As Long, pdwCurrentPosition As Long, pdwMaximumPosition As Long) As BOOL
Public Declare PtrSafe Function SetMonitorDisplayAreaSize Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal stSizeType As MC_SIZE_TYPE, ByVal dwNewDisplayAreaWidthOrHeight As Long) As BOOL
Public Declare PtrSafe Function SetMonitorDisplayAreaPosition Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal ptPositionType As MC_POSITION_TYPE, ByVal dwNewPosition As Long) As BOOL
Public Declare PtrSafe Function RestoreMonitorFactoryColorDefaults Lib "dxva2.dll" (ByVal hMonitor As LongPtr) As BOOL
Public Declare PtrSafe Function RestoreMonitorFactoryDefaults Lib "dxva2.dll" (ByVal hMonitor As LongPtr) As BOOL

[PackingAlignment(1)]
Public Type MC_TIMING_REPORT
    dwHorizontalFrequencyInHZ As Long
    dwVerticalFrequencyInHZ As Long
    bTimingStatusByte As Byte
End Type

Public Enum MC_VCP_CODE_TYPE
    MC_MOMENTARY
    MC_SET_PARAMETER
End Enum

Public Declare PtrSafe Function GetVCPFeatureAndVCPFeatureReply Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal bVCPCode As Byte, pvct As MC_VCP_CODE_TYPE, pdwCurrentValue As Long, pdwMaximumValue As Long) As BOOL
Public Declare PtrSafe Function SetVCPFeature Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal bVCPCode As Byte, ByVal dwNewValue As Long) As BOOL
Public Declare PtrSafe Function SaveCurrentSettings Lib "dxva2.dll" (ByVal hMonitor As LongPtr) As BOOL
Public Declare PtrSafe Function GetCapabilitiesStringLength Lib "dxva2.dll" (ByVal hMonitor As LongPtr, pdwCapabilitiesStringLengthInCharacters As Long) As BOOL
Public Declare PtrSafe Function CapabilitiesRequestAndCapabilitiesReply Lib "dxva2.dll" (ByVal hMonitor As LongPtr, ByVal pszASCIICapabilitiesString As String, ByVal dwCapabilitiesStringLengthInCharacters As Long) As BOOL
Public Declare PtrSafe Function GetTimingReport Lib "dxva2.dll" (ByVal hMonitor As LongPtr, pmtrMonitorTimingReport As MC_TIMING_REPORT) As BOOL




'dxva9typ.h

Public Function DXVABit(ByVal __x As Long) As Long
    Return (1 << __x)
End Function
Public Type DXVA_AYUVsample2
    bCrValue As Byte
    bCbValue As Byte
    bY_Value As Byte
    bSampleAlpha8 As Byte
End Type

Public Function DXVAp_ModeMPEG2_A() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be0A, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
DXVAp_ModeMPEG2_A = iid
End Function
Public Function DXVAp_ModeMPEG2_C() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81be0C, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
DXVAp_ModeMPEG2_C = iid
End Function
Public Function DXVAp_NoEncrypt() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1b81beD0, &Ha0c7, &H11d3, &Hb9, &H84, &H00, &Hc0, &H4f, &H2e, &H73, &Hc5)
DXVAp_NoEncrypt = iid
End Function

Public Type DXVA_BufferDescription
    dwTypeIndex As Long
    dwBufferIndex As Long
    dwDataOffset As Long
    dwDataSize As Long
    dwFirstMBaddress As Long
    dwNumMBsInBuffer As Long
    dwWidth As Long
    dwHeight As Long
    dwStride As Long
    dwReservedBits As Long
End Type

Public Enum DXVA_ConfigQueryOrReplyFunc
    DXVA_QUERYORREPLYFUNCFLAG_DECODER_PROBE_QUERY = &HFFFFF1
    DXVA_QUERYORREPLYFUNCFLAG_DECODER_LOCK_QUERY = &HFFFFF5
    DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_OK_COPY = &HFFFFF8
    DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_OK_PLUS = &HFFFFF9
    DXVA_QUERYORREPLYFUNCFLAG_ACCEL_LOCK_OK_COPY = &HFFFFFC
    DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_FALSE_PLUS = &HFFFFFB
    DXVA_QUERYORREPLYFUNCFLAG_ACCEL_LOCK_FALSE_PLUS = &HFFFFFF
    DXVA_PICTURE_DECODE_BUFFER = 1
    DXVA_MACROBLOCK_CONTROL_BUFFER = 2
    DXVA_RESIDUAL_DIFFERENCE_BUFFER = 3
    DXVA_DEBLOCKING_CONTROL_BUFFER = 4
    DXVA_INVERSE_QUANTIZATION_MATRIX_BUFFER = 5
    DXVA_SLICE_CONTROL_BUFFER = 6
    DXVA_BITSTREAM_DATA_BUFFER = 7
    DXVA_AYUV_BUFFER = 8
    DXVA_IA44_SURFACE_BUFFER = 9
    DXVA_DPXD_SURFACE_BUFFER = 10
    DXVA_HIGHLIGHT_BUFFER = 11
    DXVA_DCCMD_SURFACE_BUFFER = 12
    DXVA_ALPHA_BLEND_COMBINATION_BUFFER = 13
    DXVA_PICTURE_RESAMPLE_BUFFER = 14
    DXVA_READ_BACK_BUFFER = 15
End Enum

Public Type DXVA_ConfigPictureDecode
    ' Operation Indicated
    dwFunction As DXVA_ConfigQueryOrReplyFunc
    ' Alignment
    dwReservedBits(0 To 2) As Long
    ' Encryption GUIDs
    guidConfigBitstreamEncryption As UUID
    guidConfigMBcontrolEncryption As UUID
    guidConfigResidDiffEncryption As UUID
    ' Bitstream Processing Indicator
    bConfigBitstreamRaw As Byte
    ' Macroblock Control Config
    bConfigMBcontrolRasterOrder As Byte
    ' Host Resid Diff Config
    bConfigResidDiffHost As Byte
    bConfigSpatialResid8 As Byte
    bConfigResid8Subtraction As Byte
    bConfigSpatialHost8or9Clipping As Byte
    bConfigSpatialResidInterleaved As Byte
    bConfigIntraResidUnsigned As Byte
    ' Accelerator Resid Diff Config
    bConfigResidDiffAccelerator As Byte
    bConfigHostInverseScan As Byte
    bConfigSpecificIDCT As Byte
    bConfig4GroupedCoefs As Byte
End Type

Public Type DXVA_PictureParameters
    wDecodedPictureIndex As Integer
    wDeblockedPictureIndex As Integer
    wForwardRefPictureIndex As Integer
    wBackwardRefPictureIndex As Integer
    wPicWidthInMBminus1 As Integer
    wPicHeightInMBminus1 As Integer
    bMacroblockWidthMinus1 As Byte
    bMacroblockHeightMinus1 As Byte
    bBlockWidthMinus1 As Byte
    bBlockHeightMinus1 As Byte
    bBPPminus1 As Byte
    bPicStructure As Byte
    bSecondField As Byte
    bPicIntra As Byte
    bPicBackwardPrediction As Byte
    bBidirectionalAveragingMode As Byte
    bMVprecisionAndChromaRelation As Byte
    bChromaFormat As Byte
    bPicScanFixed As Byte
    bPicScanMethod As Byte
    bPicReadbackRequests As Byte
    bRcontrol As Byte
    bPicSpatialResid8 As Byte
    bPicOverflowBlocks As Byte
    bPicExtrapolation As Byte
    bPicDeblocked As Byte
    bPicDeblockConfined As Byte
    bPic4MVallowed As Byte
    bPicOBMC As Byte
    bPicBinPB As Byte
    bMV_RPS As Byte
    bReservedBits As Byte
    wBitstreamFcodes As Integer
    wBitstreamPCEelements As Integer
    bBitstreamConcealmentNeed As Byte
    bBitstreamConcealmentMethod As Byte
End Type

Public Type DXVAUncompDataInfo
    UncompWidth As Long '* Width of uncompressed data  
    UncompHeight As Long '* Height of uncompressed data  
    UncompFormat As D3DFORMAT '* Format of uncompressed data  
End Type

Public Type DXVACompBufferInfo
    NumCompBuffers As Long /* Number of buffers reqd for compressed data */
    WidthToCreate As Long /* Width of surface to create */
    HeightToCreate As Long /* Height of surface to create */
    BytesToAllocate As Long /* Total number of bytes used by each surface */
    Usage As Long /* Usage used to create the compressed buffer */
    Pool As D3DPOOL /* Pool where the compressed buffer belongs */
    Format As D3DFORMAT /* Format used to create the compressed buffer */
End Type

Public Type DXVABufferInfo
    pCompSurface As LongPtr /* Pointer to buffer containing compressed data */
    DataOffset As Long /* Offset of relevant data from the beginning of buffer */
    DataSize As Long /* Size of relevant data */
End Type

Public Enum DXVA_SampleFormat
    DXVA_SampleFormatMask = &HFF ' 8 bits used for DXVA Sample format
    DXVA_SampleUnknown = 0
    DXVA_SamplePreviousFrame = 1
    DXVA_SampleProgressiveFrame = 2
    DXVA_SampleFieldInterleavedEvenFirst = 3
    DXVA_SampleFieldInterleavedOddFirst = 4
    DXVA_SampleFieldSingleEven = 5
    DXVA_SampleFieldSingleOdd = 6
    DXVA_SampleSubStream = 7
End Enum

 
Public Function DXVA_ExtractSampleFormat(sf As Long) As Long
    Return sf And DXVA_SampleFormatMask
End Function
Public Function DXVA_ExtractExtColorData(sf As Long, Mask As Long, Shift As Long) As Long
    Return (sf And Mask) >> Shift
End Function
Public Function DXVABitMask(n As Long) As Long
    Return Not ((Not 0) << n)
End Function
 
Public Const DXVA_ExtColorData_ShiftBase As Long = 8
Public Function DXVAColorMask(bits As Long, base As Long) As Long
    Return DXVABitMask(bits) << base
End Function

Public Enum DXVA_VideoTransferFunction
    DXVA_VideoTransFuncShift = (DXVA_ExtColorData_ShiftBase + 19)
    DXVA_VideoTransFuncMask = &HF8000000 'DXVAColorMask(5, DXVA_VideoTransFuncShift)
    DXVA_VideoTransFunc_Unknown = 0
    DXVA_VideoTransFunc_10 = 1
    DXVA_VideoTransFunc_18 = 2
    DXVA_VideoTransFunc_20 = 3
    DXVA_VideoTransFunc_22 = 4
    DXVA_VideoTransFunc_22_709 = 5
    DXVA_VideoTransFunc_22_240M = 6
    DXVA_VideoTransFunc_22_8bit_sRGB = 7
    DXVA_VideoTransFunc_28 = 8
End Enum

Public Enum DXVA_VideoPrimaries
    DXVA_VideoPrimariesShift = (DXVA_ExtColorData_ShiftBase + 14)
    DXVA_VideoPrimariesMask = &H7C00000 'DXVAColorMask(5, DXVA_VideoPrimariesShift)
    DXVA_VideoPrimaries_Unknown = 0
    DXVA_VideoPrimaries_reserved = 1
    DXVA_VideoPrimaries_BT709 = 2
    DXVA_VideoPrimaries_BT470_2_SysM = 3
    DXVA_VideoPrimaries_BT470_2_SysBG = 4
    DXVA_VideoPrimaries_SMPTE170M = 5
    DXVA_VideoPrimaries_SMPTE240M = 6
    DXVA_VideoPrimaries_EBU3213 = 7
    DXVA_VideoPrimaries_SMPTE_C = 8
End Enum

Public Enum DXVA_VideoLighting
    DXVA_VideoLightingShift = (DXVA_ExtColorData_ShiftBase + 10)
    DXVA_VideoLightingMask = &H3C0000 'DXVAColorMask(4, DXVA_VideoLightingShift)
    DXVA_VideoLighting_Unknown = 0
    DXVA_VideoLighting_bright = 1
    DXVA_VideoLighting_office = 2
    DXVA_VideoLighting_dim = 3
    DXVA_VideoLighting_dark = 4
End Enum

Public Enum DXVA_VideoTransferMatrix
    DXVA_VideoTransferMatrixShift = (DXVA_ExtColorData_ShiftBase + 7)
    DXVA_VideoTransferMatrixMask = &H38000 ' DXVAColorMask(3, DXVA_VideoTransferMatrixShift)
    DXVA_VideoTransferMatrix_Unknown = 0
    DXVA_VideoTransferMatrix_BT709 = 1
    DXVA_VideoTransferMatrix_BT601 = 2
    DXVA_VideoTransferMatrix_SMPTE240M = 3
End Enum

Public Enum DXVA_NominalRange
    DXVA_NominalRangeShift = (DXVA_ExtColorData_ShiftBase + 4)
    DXVA_NominalRangeMask = &H7000 'DXVAColorMask(3, DXVA_NominalRangeShift)
    DXVA_NominalRange_Unknown = 0
    DXVA_NominalRange_Normal = 1
    DXVA_NominalRange_Wide = 2
    DXVA_NominalRange_0_255 = 1
    DXVA_NominalRange_16_235 = 2
    DXVA_NominalRange_48_208 = 3
End Enum

Public Enum DXVA_VideoChromaSubsampling
    DXVA_VideoChromaSubsamplingShift = (DXVA_ExtColorData_ShiftBase + 0)
    DXVA_VideoChromaSubsamplingMask = &HF00 ' DXVAColorMask(4, DXVA_VideoChromaSubsamplingShift)
    DXVA_VideoChromaSubsampling_Unknown = 0
    DXVA_VideoChromaSubsampling_ProgressiveChroma = &H8
    DXVA_VideoChromaSubsampling_Horizontally_Cosited = &H4
    DXVA_VideoChromaSubsampling_Vertically_Cosited = &H2
    DXVA_VideoChromaSubsampling_Vertically_AlignedChromaPlanes = &H1
    '  4:2:0 variations
    DXVA_VideoChromaSubsampling_MPEG2 = DXVA_VideoChromaSubsampling_Horizontally_Cosited Or DXVA_VideoChromaSubsampling_Vertically_AlignedChromaPlanes
    DXVA_VideoChromaSubsampling_MPEG1 = DXVA_VideoChromaSubsampling_Vertically_AlignedChromaPlanes
    DXVA_VideoChromaSubsampling_DV_PAL = DXVA_VideoChromaSubsampling_Horizontally_Cosited Or DXVA_VideoChromaSubsampling_Vertically_Cosited
    '  4:4:4, 4:2:2, 4:1:1
    DXVA_VideoChromaSubsampling_Cosited = DXVA_VideoChromaSubsampling_Horizontally_Cosited Or DXVA_VideoChromaSubsampling_Vertically_Cosited Or DXVA_VideoChromaSubsampling_Vertically_AlignedChromaPlanes
End Enum

Public Type DXVA_ExtendedFormat
    ' UINT                        SampleFormat : 8;           // See DXVA_SampleFormat
    ' UINT                        VideoChromaSubsampling : 4; // See DXVA_VideoChromaSubSampling
    ' DXVA_NominalRange           NominalRange : 3;           // See DXVA_NominalRange
    ' DXVA_VideoTransferMatrix    VideoTransferMatrix : 3;    // See DXVA_VideoTransferMatrix
    ' DXVA_VideoLighting          VideoLighting : 4;          // See DXVA_VideoLighting
    ' DXVA_VideoPrimaries         VideoPrimaries : 5;         // See DXVA_VideoPrimaries
    ' DXVA_VideoTransferFunction  VideoTransferFunction : 5;  // See DXVA_VideoTransferFunction
    SampleFormat As Byte
    OtherBits(2) As Byte
End Type

Public Function DXVAp_DeinterlaceBobDevice() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H335aa36e, &H7884, &H43a4, &H9c, &H91, &H7f, &H87, &Hfa, &Hf3, &He3, &H7e)
DXVAp_DeinterlaceBobDevice = iid
End Function
Public Function DXVAp_DeinterlaceContainerDevice() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0e85cb93, &H3046, &H4ff0, &Hae, &Hcc, &Hd5, &H8c, &Hb5, &Hf0, &H35, &Hfd)
DXVAp_DeinterlaceContainerDevice = iid
End Function
Public Function DXVA_DeinterlaceBobDevice() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H335aa36e, &H7884, &H43a4, &H9c, &H91, &H7f, &H87, &Hfa, &Hf3, &He3, &H7e)
 DXVA_DeinterlaceBobDevice = iid
End Function
Public Function DXVA_DeinterlaceContainerDevice() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H0e85cb93, &H3046, &H4ff0, &Hae, &Hcc, &Hd5, &H8c, &Hb5, &Hf0, &H35, &Hfd)
 DXVA_DeinterlaceContainerDevice = iid
End Function

Public Type DXVA_Frequency
    Numerator As Long
    Denominator As Long
End Type

Public Type DXVA_VideoDesc
    Size As Long
    SampleWidth As Long
    SampleHeight As Long
    SampleFormat As Long ' also contains extend color data
    d3dFormat As D3DFORMAT
    InputSampleFreq As DXVA_Frequency
    OutputFrameFreq As DXVA_Frequency
End Type

Public Enum DXVA_VideoProcessCaps
    DXVA_VideoProcess_None = &H0000
    DXVA_VideoProcess_YUV2RGB = &H0001
    DXVA_VideoProcess_StretchX = &H0002
    DXVA_VideoProcess_StretchY = &H0004
    DXVA_VideoProcess_AlphaBlend = &H0008
    DXVA_VideoProcess_SubRects = &H0010
    DXVA_VideoProcess_SubStreams = &H0020
    DXVA_VideoProcess_SubStreamsExtended = &H0040
    DXVA_VideoProcess_YUV2RGBExtended = &H0080
    DXVA_VideoProcess_AlphaBlendExtended = &H0100
End Enum

Public Enum DXVA_DeinterlaceTech
    '  the algorithm is unknown or proprietary
    DXVA_DeinterlaceTech_Unknown = &H0000
    '  the algorithm creates the missing lines by repeating
    '  the line either above or below it - this method will look very jaggy and
    '  isn't recommended
    DXVA_DeinterlaceTech_BOBLineReplicate = &H0001
    '  The algorithm creates the missing lines by vertically stretching each
    '  video field by a factor of two by averaging two lines
    DXVA_DeinterlaceTech_BOBVerticalStretch = &H0002
    '  or using a [-1, 9, 9, -1]/16 filter across four lines.
    DXVA_DeinterlaceTech_BOBVerticalStretch4Tap = &H0100
    '  the pixels in the missing line are recreated by a median filtering operation
    DXVA_DeinterlaceTech_MedianFiltering = &H0004
    '  the pixels in the missing line are recreated by an edge filter.
    '  In this process, spatial directional filters are applied to determine
    '  the orientation of edges in the picture content, and missing
    '  pixels are created by filtering along (rather than across) the
    '  detected edges.
    DXVA_DeinterlaceTech_EdgeFiltering = &H0010
    '  the pixels in the missing line are recreated by switching on a field by
    '  field basis between using either spatial or temporal interpolation
    '  depending on the amount of motion.
    DXVA_DeinterlaceTech_FieldAdaptive = &H0020
    '  the pixels in the missing line are recreated by switching on a pixel by pixel
    '  basis between using either spatial or temporal interpolation depending on
    '  the amount of motion..
    DXVA_DeinterlaceTech_PixelAdaptive = &H0040
    '  Motion Vector Steering  identifies objects within a sequence of video
    '  fields.  The missing pixels are recreated after first aligning the
    '  movement axes of the individual objects in the scene to make them
    '  parallel with the time axis.
    DXVA_DeinterlaceTech_MotionVectorSteered = &H0080
End Enum

Public Type DXVA_VideoSample
    rtStart As LongLong 'REFERENCE_TIME
    rtEnd As LongLong 'REFERENCE_TIME
    SampleFormat As DXVA_SampleFormat ' only lower 8 bits used
    lpDDSSrcSurface As LongPtr
End Type

Public Enum DXVA_SampleFlags
    DXVA_SampleFlagsMask = &HF 'DXVABit(3) Or DXVABit(2) Or DXVABit(1) Or DXVABit(0)
    DXVA_SampleFlag_Palette_Changed = &H0001
    DXVA_SampleFlag_SrcRect_Changed = &H0002
    DXVA_SampleFlag_DstRect_Changed = &H0004
    DXVA_SampleFlag_ColorData_Changed = &H0008
End Enum

Public Enum DXVA_DestinationFlags
    DXVA_DestinationFlagMask = &HF 'DXVABit(3) Or DXVABit(2) Or DXVABit(1) Or DXVABit(0)
    DXVA_DestinationFlag_Background_Changed = &H0001
    DXVA_DestinationFlag_TargetRect_Changed = &H0002
    DXVA_DestinationFlag_ColorData_Changed = &H0004
    DXVA_DestinationFlag_Alpha_Changed = &H0008
End Enum

Public Type DXVA_VideoSample2
    #If Win64 Then
    Size As Long
    Reserved As Long
    #End If
    rtStart As LongLong 'REFERENCE_TIME
    rtEnd As LongLong 'REFERENCE_TIME
    SampleFormat As Long ' cast to DXVA_ExtendedFormat, or use Extract macros
    SampleFlags As Long
    lpDDSSrcSurface As LongPtr
    rcSrc As RECT
    rcDst As RECT
    Palette(0 To 15) As DXVA_AYUVsample2
End Type

Public Type DXVA_DeinterlaceCaps
    Size As Long
    NumPreviousOutputFrames As Long
    InputPool As Long
    NumForwardRefSamples As Long
    NumBackwardRefSamples As Long
    d3dOutputFormat As D3DFORMAT
    VideoProcessingCaps As DXVA_VideoProcessCaps
    DeinterlaceTechnology As DXVA_DeinterlaceTech
End Type

#If Win64 Then
Public Type DXVA_VideoSample32
    rtStart As LongLong 'REFERENCE_TIME
    rtEnd As LongLong 'REFERENCE_TIME
    SampleFormat As Long
    SampleFlags As Long
    lpDDSSrcSurface As Long ' 32 bit pointer size
    rcSrc As RECT
    rcDst As RECT
    Palette(0 To 15) As DXVA_AYUVsample2
    ' DWORD Pad;
    ' 4 bytes of padding added by the compiler to align the struct to 8 bytes.
End Type
Public Type DXVA_DeinterlaceBltEx32
    Size As Long
    BackgroundColor As DXVA_AYUVsample2
    rcTarget As RECT
    rtTarget As LongLong 'REFERENCE_TIME
    NumSourceSurfaces As Long
    Alpha As Single
    Source(0 To (MAX_DEINTERLACE_SURFACES - 1)) As DXVA_VideoSample32
    DestinationFormat As Long
    DestinationFlags As Long
End Type
#End If

Public Type DXVA_DeinterlaceBlt
    Size As Long
    Reserved As Long
    rtTarget As LongLong ' REFERENCE_TIME
    DstRect As RECT
    SrcRect As RECT
    NumSourceSurfaces As Long
    Alpha As Single
    Source(0 To (MAX_DEINTERLACE_SURFACES - 1)) As DXVA_VideoSample
End Type

Public Const DXVA_DeinterlaceBltFnCode = 1

    Public Type DXVA_DeinterlaceBltEx
        Size As Long
        BackgroundColor As DXVA_AYUVsample2
        rcTarget As RECT
        rtTarget As LongLong 'REFERENCE_TIME
        NumSourceSurfaces As Long
        Alpha As Single
        Source(0 To (MAX_DEINTERLACE_SURFACES - 1)) As DXVA_VideoSample2
        DestinationFormat As Long
        DestinationFlags As Long
    End Type

    Public Const DXVA_DeinterlaceBltExFnCode = 2
    
    Public Const MAX_DEINTERLACE_DEVICE_GUIDS = 32
    
    Public Type DXVA_DeinterlaceQueryAvailableModes
        Size As Long
        NumGuids As Long
        Guids(0 To (MAX_DEINTERLACE_DEVICE_GUIDS - 1)) As UUID
    End Type
        
    Public Const DXVA_DeinterlaceQueryAvailableModesFnCode = 1
    
    Public Type DXVA_DeinterlaceQueryModeCaps
        Size As Long
        Guid As UUID
        VideoDesc As DXVA_VideoDesc
    End Type
    
    Public Const DXVA_DeinterlaceQueryModeCapsFnCode = 2
    
    Public Function DXVA_ProcAmpControlDevice() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9f200913, &H2ffd, &H4056, &H9f, &H1e, &He1, &Hb5, &H08, &Hf2, &H2d, &Hcf)
    DXVA_ProcAmpControlDevice = iid
    End Function
        
    Public Enum DXVA_ProcAmpControlProp
        DXVA_ProcAmp_None = &H0000
        DXVA_ProcAmp_Brightness = &H0001
        DXVA_ProcAmp_Contrast = &H0002
        DXVA_ProcAmp_Hue = &H0004
        DXVA_ProcAmp_Saturation = &H0008
    End Enum
    
    Public Type DXVA_ProcAmpControlCaps
        Size As Long
        InputPool As Long
        d3dOutputFormat As D3DFORMAT
        ProcAmpControlProps As Long ' see DXVA_ProcAmpControlProp
        VideoProcessingCaps As Long ' see DXVA_VideoProcessCaps
    End Type
    
    Public Const DXVA_ProcAmpControlQueryCapsFnCode = 3
    
    Public Type DXVA_ProcAmpControlQueryRange
        Size As Long
        ProcAmpControlProp As DXVA_ProcAmpControlProp
        VideoDesc As DXVA_VideoDesc
    End Type
    
    Public Type DXVA_VideoPropertyRange
        MinValue As Single
        MaxValue As Single
        DefaultValue As Single
        StepSize As Single
    End Type
    
    Public Const DXVA_ProcAmpControlQueryRangeFnCode = 4
    
    Public Type DXVA_ProcAmpControlBlt
        Size As Long
        DstRect As RECT
        SrcRect As RECT
        Alpha As Single
        Brightness As Single
        Contrast As Single
        Hue As Single
        Saturation As Single
    End Type
    
    Public Const DXVA_ProcAmpControlBltFnCode = 1
    
    
    Public Function DXVA_COPPDevice() As UUID
    Static iid As UUID
        If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd2457add, &H8999, &H45ed, &H8a, &H8a, &Hd1, &Haa, &H04, &H7b, &Ha4, &Hd5)
    DXVA_COPPDevice = iid
    End Function
        
    Public Const DXVA_COPPGetCertificateLengthFnCode  = &H01
    Public Const DXVA_COPPKeyExchangeFnCode  = &H02
    
    Public Type DXVA_COPPSignature
        Signature(0 To 255) As Byte
    End Type
    
    Public Const DXVA_COPPSequenceStartFnCode  = &H03
        
    Public Type DXVA_COPPCommand
        macKDI As UUID
        guidCommandID As UUID
        dwSequence As Long
        cbSizeData As Long
        CommandData(0 To 4055) As Byte
    End Type
        
    Public Const DXVA_COPPCommandFnCode = 4
    
    Public Function DXVA_COPPSetProtectionLevel() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9bb9327c, &H4eb5, &H4727, &H9f, &H00, &Hb4, &H2b, &H09, &H19, &Hc0, &Hda)
    DXVA_COPPSetProtectionLevel = iid
    End Function
    
    Public Type DXVA_COPPSetProtectionLevelCmdData
        ProtType As Long
        ProtLevel As Long
        ExtendedInfoChangeMask As Long
        ExtendedInfoData As Long
    End Type
    
    Public Enum COPP_HDCP_Protection_Level
        COPP_HDCP_Level0 = 0
        COPP_HDCP_LevelMin = COPP_HDCP_Level0
        COPP_HDCP_Level1 = 1
        COPP_HDCP_LevelMax = COPP_HDCP_Level1
        COPP_HDCP_ForceDWORD = &H7fffffff
    End Enum
    
    Public Enum COPP_CGMSA_Protection_Level
        COPP_CGMSA_Disabled = 0
        COPP_CGMSA_LevelMin = COPP_CGMSA_Disabled
        COPP_CGMSA_CopyFreely = 1
        COPP_CGMSA_CopyNoMore = 2
        COPP_CGMSA_CopyOneGeneration = 3
        COPP_CGMSA_CopyNever = 4
        COPP_CGMSA_RedistributionControlRequired = &H08
        COPP_CGMSA_LevelMax = (COPP_CGMSA_RedistributionControlRequired + COPP_CGMSA_CopyNever)
        COPP_CGMSA_ForceDWORD = &H7fffffff
    End Enum
    
    Public Enum COPP_ACP_Protection_Level
        COPP_ACP_Level0 = 0
        COPP_ACP_LevelMin = COPP_ACP_Level0
        COPP_ACP_Level1 = 1
        COPP_ACP_Level2 = 2
        COPP_ACP_Level3 = 3
        COPP_ACP_LevelMax = COPP_ACP_Level3
        COPP_ACP_ForceDWORD = &H7fffffff
    End Enum
    
    Public Const COPP_NoProtectionLevelAvailable  = -1
    Public Const COPP_DefaultProtectionLevel  = 0
    
    Public Enum COPP_ProtectionType
        COPP_ProtectionType_Unknown = &H80000000
        COPP_ProtectionType_None = &H00000000
        COPP_ProtectionType_HDCP = &H00000001
        COPP_ProtectionType_ACP = &H00000002
        COPP_ProtectionType_CGMSA = &H00000004
        COPP_ProtectionType_Mask = &H80000007
        COPP_ProtectionType_Reserved = &H7FFFFFF8
    End Enum
    
    Public Function DXVA_COPPSetSignaling() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9a631a5, &Hd684, &H4c60, &H8e, &H4d, &Hd3, &Hbb, &Hf, &Hb, &He3, &Hee)
    DXVA_COPPSetSignaling = iid
    End Function
    
    Public Type DXVA_COPPSetSignalingCmdData
        ActiveTVProtectionStandard As COPP_TVProtectionStandard ' See COPP_TVProtectionStandard
        AspectRatioChangeMask1 As Long
        AspectRatioData1 As COPP_ImageAspectRatio_EN300294 ' See COPP_ImageAspectRatio_EN300294 for ETSI EN 300 294 values
        AspectRatioChangeMask2 As Long
        AspectRatioData2 As Long
        AspectRatioChangeMask3 As Long
        AspectRatioData3 As Long
        ExtendedInfoChangeMask(0 To 3) As Long
        ExtendedInfoData(0 To 3) As Long
        Reserved As Long
    End Type
    
    Public Enum COPP_TVProtectionStandard
        COPP_ProtectionStandard_Unknown = &H80000000
        COPP_ProtectionStandard_None = &H00000000
        COPP_ProtectionStandard_IEC61880_525i = &H00000001
        COPP_ProtectionStandard_IEC61880_2_525i = &H00000002
        COPP_ProtectionStandard_IEC62375_625p = &H00000004
        COPP_ProtectionStandard_EIA608B_525 = &H00000008
        COPP_ProtectionStandard_EN300294_625i = &H00000010
        COPP_ProtectionStandard_CEA805A_TypeA_525p = &H00000020
        COPP_ProtectionStandard_CEA805A_TypeA_750p = &H00000040
        COPP_ProtectionStandard_CEA805A_TypeA_1125i = &H00000080
        COPP_ProtectionStandard_CEA805A_TypeB_525p = &H00000100
        COPP_ProtectionStandard_CEA805A_TypeB_750p = &H00000200
        COPP_ProtectionStandard_CEA805A_TypeB_1125i = &H00000400
        COPP_ProtectionStandard_ARIBTRB15_525i = &H00000800
        COPP_ProtectionStandard_ARIBTRB15_525p = &H00001000
        COPP_ProtectionStandard_ARIBTRB15_750p = &H00002000
        COPP_ProtectionStandard_ARIBTRB15_1125i = &H00004000
        COPP_ProtectionStandard_Mask = &H80007FFF
        COPP_ProtectionStandard_Reserved = &H7FFF8000
    End Enum
    
    Public Enum COPP_ImageAspectRatio_EN300294
        COPP_AspectRatio_EN300294_FullFormat4by3 = 0
        COPP_AspectRatio_EN300294_Box14by9Center = 1
        COPP_AspectRatio_EN300294_Box14by9Top = 2
        COPP_AspectRatio_EN300294_Box16by9Center = 3
        COPP_AspectRatio_EN300294_Box16by9Top = 4
        COPP_AspectRatio_EN300294_BoxGT16by9Center = 5
        COPP_AspectRatio_EN300294_FullFormat4by3ProtectedCenter = 6
        COPP_AspectRatio_EN300294_FullFormat16by9Anamorphic = 7
        COPP_AspectRatio_ForceDWORD = &H7fffffff
        COPP_ImageAspectRatio_EN300294_Mask = &H00000007
    End Enum
    
    Public Type DXVA_COPPStatusInput
        rApp As UUID '   16 bytes
        guidStatusRequestID As UUID '   16 bytes
        dwSequence As Long '    4 bytes
        cbSizeData As Long '    4 bytes
        StatusData(0 To 4055) As Byte ' 4056 bytes (4056+4+4+16+16 = 4096)
    End Type
    
    Public Type DXVA_COPPStatusOutput
        macKDI As UUID '   16 bytes
        cbSizeData As Long '    4 bytes
        COPPStatus(0 To 4075) As Byte ' 4076 bytes (4076+16+4 = 4096)
    End Type
    
    Public Enum COPP_StatusFlags
        COPP_StatusNormal = &H00
        COPP_LinkLost = &H01
        COPP_RenegotiationRequired = &H02
        COPP_StatusFlagsReserved = &HFFFFFFFC
    End Enum
    
    Public Type DXVA_COPPStatusData
        rApp As UUID
        dwFlags As COPP_StatusFlags ' See COPP_StatusFlags above
        dwData As Long
        ExtendedInfoValidMask As Long
        ExtendedInfoData As Long
    End Type
    
    Public Type DXVA_COPPStatusDisplayData
        rApp As UUID
        dwFlags As COPP_StatusFlags ' See COPP_StatusFlags above
        DisplayWidth As Long
        DisplayHeight As Long
        Format As Long ' also contains extended color data
        d3dFormat As D3DFORMAT
        FreqNumerator As Long
        FreqDenominator As Long
    End Type
    
    Public Enum COPP_StatusHDCPFlags
        COPP_HDCPRepeater = &H01
        COPP_HDCPFlagsReserved = &HFFFFFFFE
    End Enum
    
    Public Type DXVA_COPPStatusHDCPKeyData
        rApp As UUID
        dwFlags As COPP_StatusFlags ' See COPP_StatusFlags above
        dwHDCPFlags As COPP_StatusHDCPFlags ' See COPP_StatusHDCPFlags above
        BKey As UUID ' Lower 40 bits
        Reserved1 As UUID
        Reserved2 As UUID
    End Type
    
    Public Const DXVA_COPPQueryStatusFnCode = 5
    
    Public Function DXVA_COPPQueryConnectorType() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H81d0bfd5, &H6afe, &H48c2, &H99, &Hc0, &H95, &Ha0, &H8f, &H97, &Hc5, &Hda)
    DXVA_COPPQueryConnectorType = iid
    End Function
    
    Public Enum COPP_ConnectorType
        COPP_ConnectorType_Unknown = -1
        COPP_ConnectorType_VGA = 0
        COPP_ConnectorType_SVideo = 1
        COPP_ConnectorType_CompositeVideo = 2
        COPP_ConnectorType_ComponentVideo = 3
        COPP_ConnectorType_DVI = 4
        COPP_ConnectorType_HDMI = 5
        COPP_ConnectorType_LVDS = 6
        COPP_ConnectorType_TMDS = 7
        COPP_ConnectorType_D_JPN = 8
        COPP_ConnectorType_Internal = &H80000000 ' can be combined with the other connector types
        COPP_ConnectorType_ForceDWORD = &H7fffffff ' force 32-bit size enum */
    End Enum
    
    Public Function DXVA_COPPQueryProtectionType() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H38f2a801, &H9a6c, &H48bb, &H91, &H07, &Hb6, &H69, &H6e, &H6f, &H17, &H97)
    DXVA_COPPQueryProtectionType = iid
    End Function
    Public Function DXVA_COPPQueryLocalProtectionLevel() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb2075857, &H3eda, &H4d5d, &H88, &Hdb, &H74, &H8f, &H8c, &H1a, &H05, &H49)
    DXVA_COPPQueryLocalProtectionLevel = iid
    End Function
    Public Function DXVA_COPPQueryGlobalProtectionLevel() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1957210a, &H7766, &H452a, &Hb9, &H9a, &Hd2, &H7a, &Hed, &H54, &Hf0, &H3a)
    DXVA_COPPQueryGlobalProtectionLevel = iid
    End Function
    Public Function DXVA_COPPQueryDisplayData() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd7bf1ba3, &Had13, &H4f8e, &Haf, &H98, &H0d, &Hcb, &H3c, &Ha2, &H04, &Hcc)
    DXVA_COPPQueryDisplayData = iid
    End Function
    Public Function DXVA_COPPQueryHDCPKeyData() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hdb59d74, &Ha992, &H492e, &Ha0, &Hbd, &Hc2, &H3f, &Hda, &H56, &H4e, &H0)
    DXVA_COPPQueryHDCPKeyData = iid
    End Function
    Public Function DXVA_COPPQueryBusData() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc6f4d673, &H6174, &H4184, &H8e, &H35, &Hf6, &Hdb, &H52, &H0, &Hbc, &Hba)
    DXVA_COPPQueryBusData = iid
    End Function
    
    Public Enum COPP_BusType
        COPP_BusType_Unknown = 0
        COPP_BusType_PCI = 1
        COPP_BusType_PCIX = 2
        COPP_BusType_PCIExpress = 3
        COPP_BusType_AGP = 4
        COPP_BusType_Integrated = &H80000000 ' can be combined with the other bus types
        COPP_BusType_ForceDWORD = &H7fffffff ' force 32-bit size enum */
    End Enum
    
    Public Function DXVA_COPPQuerySignaling() As UUID
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6629a591, &H3b79, &H4cf3, &H92, &H4a, &H11, &He8, &He7, &H81, &H16, &H71)
    DXVA_COPPQuerySignaling = iid
    End Function
    
    Public Type DXVA_COPPStatusSignalingCmdData
        rApp As UUID
        dwFlags As COPP_StatusFlags ' See COPP_StatusFlags above
        AvailableTVProtectionStandards As COPP_TVProtectionStandard ' See COPP_TVProtectionStandard
        ActiveTVProtectionStandard As COPP_TVProtectionStandard ' See COPP_TVProtectionStandard
        TVType As Long
        AspectRatioValidMask1 As Long
        AspectRatioData1 As COPP_ImageAspectRatio_EN300294 ' See COPP_AspectRatio_EN300294 for ETSI EN 300 294 values
        AspectRatioValidMask2 As Long
        AspectRatioData2 As Long
        AspectRatioValidMask3 As Long
        AspectRatioData3 As Long
        ExtendedInfoValidMask(0 To 3) As Long
        ExtendedInfoData(0 To 3) As Long
    End Type
    
    
    
    
    
    
    
    'BREAK LINE 750
    
End Module