
'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

'WinDevLib - wdCOM :: Misc COM component stuff

[InterfaceId("75121952-E0D0-43E5-9380-1D80483ACF72")]
[OleAutomation(False)]
Interface ICreateObject Extends stdole.IUnknown
    Sub CreateObject(ByRef clsid As UUID, ByVal pUnkOuter As IUnknown, ByRef riid As UUID, ByRef ppv As Any)
End Interface

[InterfaceId("00000002-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IMalloc Extends stdole.IUnknown
    [PreserveSig]
    Function Alloc(ByVal cb As LongPtr) As LongPtr
    [PreserveSig]
    Function Realloc(ByRef pv As Any, ByVal cb As LongPtr) As LongPtr
    [PreserveSig]
    Sub Free(ByVal pv As LongPtr) 'As Long
    [PreserveSig]
    Function GetSize(ByVal pv As LongPtr) As LongPtr
    [PreserveSig]
    Function DidAlloc(ByVal pv As LongPtr) As Long
    [PreserveSig]
    Sub HeapMinimize()
End Interface

[InterfaceId("00000003-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IMarshal Extends stdole.IUnknown
        Sub GetUnmarshalClass(ByRef riid As UUID, ByRef pv As Any, ByVal dwDestContext As MSHCTX, ByRef pvDestContext As Any, ByVal MSHLFLAGS As MSHLFLAGS, ByRef pCid As UUID)
        Function GetMarshalSizeMax(ByRef riid As UUID, ByRef pv As Any, ByVal dwDestContext As MSHCTX, ByRef pvDestContext As Any, ByVal MSHLFLAGS As MSHLFLAGS) As Long
        Sub MarshalInterface(ByVal pStm As IStream, ByRef riid As UUID, ByRef pv As Any, ByVal dwDestContext As MSHCTX, ByRef pvDestContext As Any, ByVal MSHLFLAGS As MSHLFLAGS)
        Sub UnmarshalInterface(ByVal pStm As IStream, ByRef riid As UUID, ByRef ppv As Any)
        Sub ReleaseMarshalData(ByVal pStm As IStream)
        Sub DisconnectObject(ByVal dwReserved As Long)
End Interface

[InterfaceId("ECC8691B-C1DB-4DC0-855E-65F6C551AF49")]
[OleAutomation(False)]
Interface INoMarshal Extends IUnknown
End Interface

[InterfaceId("94EA2B94-E9CC-49E0-C0FF-EE64CA8F5B90")]
[OleAutomation(False)]
Interface IAgileObject Extends IUnknown
End Interface

[InterfaceId("00000017-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IActivationFilter Extends IUnknown
    Sub HandleActivation(ByVal dwActivationType As Long, ByRef rclsid As UUID, ByRef pReplacementClsId As UUID)
End Interface

[InterfaceId("000001CF-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IMarshal2 Extends IMarshal
End Interface

[InterfaceId("00000021-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IInternalUnknown Extends IUnknown
    Sub QueryInternalInterface(riid As UUID, ppv As Any)
End Interface

[InterfaceId("D5F56B60-593B-101A-B569-08002B2DBF7A")]
[OleAutomation(False)]
Interface IRpcChannelBuffer Extends IUnknown
    Sub GetBuffer(ByRef pMessage As RPCOLEMESSAGE, ByRef riid As UUID)
    Sub SendReceive(ByRef pMessage As RPCOLEMESSAGE, ByRef pStatus As Long)
    Sub FreeBuffer(ByRef pMessage As RPCOLEMESSAGE)
    Sub GetDestCtx(ByRef pdwDestContext As Long, ByRef ppvDestContext As LongPtr)
    Sub IsConnected()
End Interface

[InterfaceId("594F31D0-7F19-11D0-B194-00A0C90DC8BF")]
[OleAutomation(False)]
Interface IRpcChannelBuffer2 Extends IRpcChannelBuffer
    Sub GetProtocolVersion(ByRef pdwVersion As Long)
End Interface

[InterfaceId("A5029FB6-3C34-11D1-9C99-00C04FB998AA")]
[OleAutomation(False)]
Interface IAsyncRpcChannelBuffer Extends IRpcChannelBuffer2
    Sub Send(ByRef pMsg As RPCOLEMESSAGE, ByVal pSync As ISynchronize, ByRef pulStatus As Long)
    Sub Receive(ByRef pMsg As RPCOLEMESSAGE, ByRef pulStatus As Long)
    Sub GetDestCtxEx(ByRef pMsg As RPCOLEMESSAGE, ByRef pdwDestContext As Long, ByRef ppvDestContext As LongPtr)
End Interface

[InterfaceId("25B15600-0115-11D0-BF0D-00AA00B8DFD2")]
[OleAutomation(False)]
Interface IRpcChannelBuffer3 Extends IRpcChannelBuffer2
    Sub Send(ByRef pMsg As RPCOLEMESSAGE, ByRef pulStatus As Long)
    Sub Receive(ByRef pMsg As RPCOLEMESSAGE, ByVal ulSize As Long, ByRef pulStatus As Long)
    Sub Cancel(ByRef pMsg As RPCOLEMESSAGE)
    Sub GetCallContext(ByRef pMsg As RPCOLEMESSAGE, ByRef riid As UUID, ByRef pInterface As LongPtr)
    Sub GetDestCtxEx(ByRef pMsg As RPCOLEMESSAGE, ByRef pdwDestContext As Long, ByRef ppvDestContext As LongPtr)
    Sub GetState(ByRef pMsg As RPCOLEMESSAGE, ByRef pState As Long)
    Sub RegisterAsync(ByRef pMsg As RPCOLEMESSAGE, ByVal pAsyncMgr As IAsyncManager)
End Interface

[InterfaceId("58A08519-24C8-4935-B482-3FD823333A4F")]
[OleAutomation(False)]
Interface IRpcSyntaxNegotiate Extends IUnknown
    Sub NegotiateSyntax(ByRef pMsg As RPCOLEMESSAGE)
End Interface

[InterfaceId("D5F56A34-593B-101A-B569-08002B2DBF7A")]
[OleAutomation(False)]
Interface IRpcProxyBuffer Extends IUnknown
    Sub Connect(ByVal pRpcChannelBuffer As IRpcChannelBuffer)
    [PreserveSig] Sub Disconnect()
End Interface

[InterfaceId("D5F56AFC-593B-101A-B569-08002B2DBF7A")]
[OleAutomation(False)]
Interface IRpcStubBuffer Extends IUnknown
    Sub Connect(ByVal pUnkServer As IUnknown)
    [PreserveSig] Sub Disconnect()
    Sub Invoke(ByRef prpcmsg As RPCOLEMESSAGE, ByVal pRpcChannelBuffer As IRpcChannelBuffer)
    [PreserveSig] Function IsIIDSupported(ByRef riid As UUID) As IRpcStubBuffer
    [PreserveSig] Function CountRefs() As Long
    Sub DebugServerQueryInterface(ppv As Any)
    [PreserveSig] Sub DebugServerRelease(ByVal pv As LongPtr)
End Interface

[InterfaceId("D5F569D0-593B-101A-B569-08002B2DBF7A")]
[OleAutomation(False)]
Interface IPSFactoryBuffer Extends IUnknown
    Sub CreateProxy(ByVal pUnkOuter As IUnknown, ByRef riid As UUID, ByRef ppProxy As IRpcProxyBuffer, ByRef ppv As LongPtr)
    Sub CreateStub(ByRef riid As UUID, ByVal pUnkServer As IUnknown, ByRef ppStub As IRpcStubBuffer)
End Interface

[InterfaceId("1008C4A0-7613-11CF-9AF1-0020AF6E72F4")]
[OleAutomation(False)]
Interface IChannelHook Extends IUnknown
    [PreserveSig] Sub ClientGetSize(ByRef uExtent As UUID, ByRef riid As UUID, ByRef pDataSize As Long)
    [PreserveSig] Sub ClientFillBuffer(ByRef uExtent As UUID, ByRef riid As UUID, ByRef pDataSize As Long, pDataBuffer As Any)
    [PreserveSig] Sub ClientNotify(ByRef uExtent As UUID, ByRef riid As UUID, ByVal cbDataSize As Long, pDataBuffer As Any, ByVal lDataRep As Long, ByVal hrFault As Long)
    [PreserveSig] Sub ServerNotify(ByRef uExtent As UUID, ByRef riid As UUID, ByVal cbDataSize As Long, pDataBuffer As Any, ByVal lDataRep As Long)
    [PreserveSig] Sub ServerGetSize(ByRef uExtent As UUID, ByRef riid As UUID, ByVal hrFault As Long, ByRef pDataSize As Long)
    [PreserveSig] Sub ServerFillBuffer(ByRef uExtent As UUID, ByRef riid As UUID, ByRef pDataSize As Long, pDataBuffer As Any, ByVal hrFault As Long)
End Interface

[InterfaceId("0000015B-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IGlobalOptions Extends IUnknown
    [PreserveSig] Function Set(ByVal dwProperty As GLOBALOPT_PROPERTIES, ByVal dwValue As LongPtr) As Long
    [PreserveSig] Function Query(ByVal dwProperty As GLOBALOPT_PROPERTIES, pdwValue As LongPtr) As Long
End Interface

[InterfaceId("00000144-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IRpcOptions Extends IUnknown
    Sub Set(ByVal pPrx As IUnknown, ByVal dwProperty As RPCOPT_PROPERTIES, ByVal dwValue As LongPtr)
    Sub Query(ByVal pPrx As IUnknown, ByVal dwProperty As RPCOPT_PROPERTIES, ByRef pdwValue As LongPtr)
End Interface

[InterfaceId("00000022-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface ISurrogate Extends IUnknown
    Sub LoadDllServer(ByRef Clsid As UUID)
    Sub FreeSurrogate()
End Interface

[InterfaceId("00000030-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface ISynchronize Extends IUnknown
    Sub Wait(ByVal dwFlags As Long, ByVal dwMilliseconds As Long)
    Sub Signal()
    Sub Reset()
End Interface

[InterfaceId("00000031-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface ISynchronizeHandle Extends IUnknown
    Sub GetHandle(ByRef ph As LongPtr)
End Interface

[InterfaceId("00000032-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface ISynchronizeEvent Extends ISynchronizeHandle
    Sub SetEventHandle(ByVal ph As LongPtr)
End Interface

[InterfaceId("00000033-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface ISynchronizeContainer Extends IUnknown
    Sub AddSynchronize(ByVal pSync As ISynchronize)
    Sub WaitMultiple(ByVal dwFlags As Long, ByVal dwTimeOut As Long, ByRef ppSync As ISynchronize)
End Interface

[InterfaceId("00000025-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface ISynchronizeMutex Extends ISynchronize
    Sub ReleaseMutex()
End Interface

[InterfaceId("00000029-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface ICancelMethodCalls Extends IUnknown
    Sub Cancel(ByVal ulSeconds As Long) 'HRESULT
    Sub TestCancel() 'HRESULT
End Interface

[InterfaceId("0000002A-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IAsyncManager Extends IUnknown
    Sub CompleteCall(ByVal Result As Long)
    Sub GetCallContext(ByRef riid As UUID, ByRef pInterface As Any)
    Sub GetState(ByRef pulStateFlags As Long)
End Interface

[InterfaceId("1C733A30-2A1C-11CE-ADE5-00AA0044773D")]
[OleAutomation(False)]
Interface ICallFactory Extends IUnknown
    Sub CreateCall(ByRef riid As UUID, ByRef pCtrlUnk As IUnknown, ByRef riid2 As UUID, ByRef ppv As IUnknown)
End Interface

[InterfaceId("00000149-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IRpcHelper Extends IUnknown
    Sub GetDCOMProtocolVersion(ByRef pComVersion As Long)
    Sub GetIIDFromOBJREF(ByVal pObjRef As Any, ByRef piid As LongPtr)
End Interface

[InterfaceId("EB0CB9E8-7996-11D2-872E-0000F8080859")]
[OleAutomation(False)]
Interface IReleaseMarshalBuffers Extends IUnknown
    Sub ReleaseMarshalBuffer(ByRef pMsg As RPCOLEMESSAGE, dwFlags As Long, ByRef pChnl As IUnknown)
End Interface

[InterfaceId("0000002B-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IWaitMultiple Extends IUnknown
    Sub WaitMultiple(ByVal timeout As Long, ByRef pSync As ISynchronize)
    Sub AddSynchronize(ByVal pSync As ISynchronize)
End Interface

[InterfaceId("00000147-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IAddrTrackingControl Extends IUnknown
    Sub EnableCOMDynamicAddrTracking()
    Sub DisableCOMDynamicAddrTracking()
End Interface

[InterfaceId("00000148-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IAddrExclusionControl Extends IUnknown
    Sub GetCurrentAddrExclusionList(ByRef riid As UUID, ByRef ppEnumerator As Any)
    Sub UpdateAddrExclusionList(ByRef pEnumerator As IUnknown)
End Interface

[InterfaceId("DB2F3ACA-2F86-11d1-8E04-00C04FB9989A")]
[OleAutomation(False)]
Interface IPipeByte Extends IUnknown
    Sub Pull(buf As Byte, ByVal cRequest As Long, pcReturned As Long)
    Sub Push(buf As Byte, ByVal cSent As Long)
End Interface
[InterfaceId("DB2F3ACC-2F86-11d1-8E04-00C04FB9989A")]
[OleAutomation(False)]
Interface IPipeLong Extends IUnknown
    Sub Pull(buf As Long, ByVal cRequest As Long, pcReturned As Long)
    Sub Push(buf As Long, ByVal cSent As Long)
End Interface
[InterfaceId("DB2F3ACE-2F86-11d1-8E04-00C04FB9989A")]
[OleAutomation(False)]
Interface IPipeDouble Extends IUnknown
    Sub Pull(buf As Double, ByVal cRequest As Long, pcReturned As Long)
    Sub Push(buf As Double, ByVal cSent As Long)
End Interface



[InterfaceId("0000000A-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface ILockBytes Extends stdole.IUnknown
        Function ReadAt(ByVal ulOffset As LongLong, ByRef pv As Any, ByVal cb As Long) As Long
        Function WriteAt(ByVal ulOffset As LongLong, ByRef pv As Any, ByVal cb As Long) As Long
        Sub Flush()
        Sub SetSize(ByVal cb As LongLong)
        Sub LockRegion(ByVal libOffset As LongLong, ByVal cb As LongLong, ByVal dwLockType As Long)
        Sub UnlockRegion(ByVal libOffset As LongLong, ByVal cb As LongLong, ByVal dwLockType As Long)
        Sub Stat(ByRef pstatstg As STATSTG, Optional ByVal grfStatFlag As STATFLAG = 0)
End Interface

[InterfaceId("99CAF010-415E-11CF-8814-00AA00B569F5")]
[OleAutomation(False)]
Interface IFillLockBytes Extends stdole.IUnknown
        Function FillAppend(ByRef pv As Any, ByVal cb As Long) As Long
        Function FillAt(ByVal ulOffset As LongLong, ByRef pv As Any, ByVal cb As Long) As Long
        Sub SetFillSize(ByVal ulSize As LongLong)
        Sub Terminate(ByVal bCanceled As BOOL)
End Interface
    
[InterfaceId("0E6D4D90-6738-11CF-9608-00AA00680DB4")]
[OleAutomation(False)]
Interface ILayoutStorage Extends stdole.IUnknown
        Sub LayoutScript(ByRef pStorageLayout As StorageLayout, ByVal nEntries As Long, ByVal glfInterleavedFlag As Long)
        Sub BeginMonitor()
        Sub EndMonitor()
        Sub ReLayoutDocfile(ByVal pwcsNewDfName As String)
        Sub ReLayoutDocfileOnILockBytes(ByVal pILockBytes As ILockBytes)
End Interface

[InterfaceId("1CF2B120-547D-101B-8E65-08002B2BD119")]
[OleAutomation(False)]
Interface IErrorInfo Extends stdole.IUnknown
    Sub GetGUID(ByRef pGUID As UUID)
    Function GetSource() As String
    Function GetDescription() As String
    Function GetHelpFile() As String
    Function GetHelpContext() As Long
End Interface

[InterfaceId("22F03340-547D-101B-8E65-08002B2BD119")]
[OleAutomation(False)]
Interface ICreateErrorInfo Extends stdole.IUnknown
    Sub SetGuid(ByRef rguid As UUID)
    Sub SetSource(ByVal szSource As String)
    Sub SetDescription(ByVal szDescription As String)
    Sub SetHelpFile(ByVal szHelpFile As String)
    Sub SetHelpContext(ByVal dwHelpContext As Long)
End Interface

[InterfaceId("DF0B3D60-548F-101B-8E65-08002B2BD119")]
[OleAutomation(False)]
Interface ISupportErrorInfo Extends stdole.IUnknown
    Sub InterfaceSupportsErrorInfo(ByRef riid As UUID)
End Interface

[InterfaceId("0000002F-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IRecordInfo Extends stdole.IUnknown
    Sub RecordInit(ByRef pvNew As Any)
    Sub RecordClear(ByRef pvExisting As Any)
    Sub RecordCopy(ByRef pvExisting As Any, ByRef pvNew As Any)
    Sub GetGUID(ByRef pGUID As UUID)
    Function GetName() As String
    Function GetSize() As Long
    Function GetTypeInfo() As ITypeInfo
    Function GetField(ByRef pvData As Any, ByVal szFieldName As String) As Variant
    Sub GetFieldNoCopy(ByRef pvData As Any, ByVal szFieldName As String, ByRef pvarField As Variant, ByRef ppvDataCArray As Any)
    Sub PutField(ByVal wFlags As INVOKEKIND, ByRef pvData As Any, ByVal szFieldName As String, ByRef pvarField As Variant)
    Sub PutFieldNoCopy(ByVal wFlags As INVOKEKIND, ByRef pvData As Any, ByVal szFieldName As String, ByRef pvarField As Variant)
    Sub GetFieldNames(ByRef pcNames As Long, ByRef rgBstrNames As String)
    [PreserveSig]
    Function IsMatchingType(ByVal pRecordInfo As IRecordInfo) As Long
    [PreserveSig]
    Function RecordCreate() As Long
    Sub RecordCreateCopy(ByRef pvSource As Any, ByRef ppvDest As Any)
    Sub RecordDestroy(ByRef pvRecord As Any)
End Interface

[InterfaceId("0000010D-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IViewObject Extends stdole.IUnknown
    Sub Draw(ByVal dwDrawAspect As DVASPECT, ByVal lindex As Long, ByRef pvAspect As Any, ByRef ptd As Any, ByVal hdcTargetDev As LongPtr, ByVal hdcDraw As LongPtr, ByRef lprcBounds As RECT, ByRef lprcWBounds As RECT, ByVal pfnContinue As LongPtr, ByVal dwContinue As Long)
    Sub GetColorSet(ByVal dwDrawAspect As DVASPECT, ByVal lindex As Long, ByRef pvAspect As Any, ByRef ptd As Any, ByVal hicTargetDev As LongPtr, ByRef ppColorSet As LongPtr)
    Function Freeze(ByVal dwDrawAspect As DVASPECT, ByVal lindex As Long, ByRef pvAspect As Any) As Long
    Sub Unfreeze(ByVal dwFreeze As Long)
    Sub SetAdvise(ByVal aspects As DVASPECT, ByVal ADVF As ADVF, ByVal pIAdviseSink As LongPtr)
    Sub GetAdvise(ByRef pAspects As DVASPECT, ByRef pAdvf As ADVF, ByRef pIAdviseSink As LongPtr)
End Interface
[InterfaceId("00000127-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IViewObject2 Extends IViewObject
    Sub GetExtent(ByVal dwDrawAspect As DVASPECT, ByVal lindex As Long, ByRef ptd As DVTARGETDEVICE, ByRef lpSIZE As SIZE)
End Interface
[InterfaceId("3AF24292-0C96-11CE-A0CF-00AA00600AB8")]
[OleAutomation(False)]
Interface IViewObjectEx Extends IViewObject2
    Sub GetRect(ByVal dwAspect As DVASPECT, pRect As RECT)
    Sub GetViewStatus(pdwStatus As VIEWSTATUS)
    Sub QueryHitPoint(ByVal dwAspect As DVASPECT, pRectBounds As RECT, ByVal ptlLoc As LongLong, ByVal lCloseHint As Long, pHitResult As HITRESULT)
    Sub QueryHitRect(ByVal dwAspect As DVASPECT, pRectBounds As RECT, pRectLoc As RECT, ByVal lCloseHint As Long, pHitResult As HITRESULT)
    Sub GetNaturalExtent(ByVal dwAspect As DVASPECT, ByVal lindex As Long, ptd As DVTARGETDEVICE, ByVal hicTargetDev As LongPtr, pExtentInfo As DVEXTENTINFO, pSizel As SIZE)
End Interface


[InterfaceId("CB728B20-F786-11CE-92AD-00AA00A74CD0")]
[Description("IProfferService")]
[OleAutomation(False)]
Interface IProfferService Extends stdole.IUnknown
    Function ProfferService(ByRef rguidService As UUID, ByVal pSP As IServiceProvider) As Long
    Sub RevokeService(ByVal dwCookie As Long)
End Interface

[InterfaceId("4A073526-6103-4E21-B7BC-F519D1524E5D")]
[Description("IProfferService")]
[OleAutomation(False)]
Interface IGetServiceIds Extends IUnknown
    Sub GetServiceIds(serviceIdCount As Long, serviceIds As LongPtr)
End Interface
    
    
[InterfaceId("0000013D-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IClientSecurity Extends stdole.IUnknown
    Sub QueryBlanket(ByVal pProxy As stdole.IUnknown, pAuthnSvc As RPC_AUTHN, pAuthzSvc As RPC_AUTHZ, pServerPrincName As LongPtr, pAuthnLevel As RPC_AUTHN_LVL, pImpLevel As RPC_IMP_LVL, pAuthInfo As Any, pCapabilities As EOLE_AUTHENTICATION_CAPABILITIES)
    Sub SetBlanket(ByVal pProxy As stdole.IUnknown, ByVal AuthnSvc As RPC_AUTHN, ByVal AuthzSvc As RPC_AUTHZ, ByVal pServerPrincName As LongPtr, ByVal AuthnLevel As RPC_AUTHN_LVL, ByVal ImpLevel As RPC_IMP_LVL, pAuthInfo As Any, ByVal Capabilities As EOLE_AUTHENTICATION_CAPABILITIES)
    Function CopyProxy(ByVal pProxy As stdole.IUnknown) As stdole.IUnknown
End Interface

[InterfaceId("0000013E-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IServerSecurity Extends stdole.IUnknown
    Sub QueryBlanket(pAuthnSvc As RPC_AUTHN, pAuthzSvc As RPC_AUTHZ, pServerPrincName As LongPtr, pAuthnLevel As RPC_AUTHN_LVL, pImpLevel As RPC_IMP_LVL, pPrivs As LongPtr, pCapabilities As EOLE_AUTHENTICATION_CAPABILITIES)
    Sub ImpersonateClient()
    Sub RevertToSelf()
    Sub IsImpersonating() 'BOOL [ PreserveSig ] when Implements-compat
End Interface

[InterfaceId("00000140-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IClassActivator Extends stdole.IUnknown
    Sub GetClassObject(rclsid As UUID, ByVal dwClassContext As Long, ByVal locale As Long, riid As UUID, ppv As Any)
End Interface

[InterfaceId("a9d758a0-4617-11cf-95fc-00aa00680db4")]
[OleAutomation(False)]
Interface IProgressNotify Extends stdole.IUnknown
    Sub OnProgress(ByVal dwProgressCurrent As Long, ByVal dwProgressMaximum As Long, ByVal fAccurate As BOOL, ByVal fOwner As BOOL)
End Interface

[InterfaceId("0000001d-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IMallocSpy Extends stdole.IUnknown
    [PreserveSig] Function PreAlloc(ByVal cbRequest As LongPtr) As LongPtr
    [PreserveSig] Function PostAlloc(pActual As Any) As LongPtr
    [PreserveSig] Function PreFree(pRequest As Any, ByVal fSpyed As BOOL) As LongPtr
    [PreserveSig] Sub PostFree(ByVal fSpyed As BOOL)
    [PreserveSig] Function PreRealloc(pRequest As Any, ByVal cbRequest As LongPtr, ppNewRequest As LongPtr, ByVal fSpyed As BOOL) As LongPtr
    [PreserveSig] Function PostRealloc(pActual As Any, ByVal fSpyed As BOOL) As LongPtr
    [PreserveSig] Function PreGetSize(pRequest As Any, ByVal fSpyed As BOOL) As LongPtr
    [PreserveSig] Function PostGetSize(ByVal cbActual As LongPtr, ByVal fSpyed As BOOL) As LongPtr
    [PreserveSig] Function PreDidAlloc(pRequest As Any, ByVal fSpyed As BOOL) As LongPtr
    [PreserveSig] Function PostDidAlloc(pRequest As Any, ByVal fSpyed As BOOL, ByVal fActual As Long) As Long
    [PreserveSig] Sub PreHeapMinimize()
    [PreserveSig] Sub PostHeapMinimize()
End Interface

[InterfaceId("00000018-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IStdMarshalInfo Extends stdole.IUnknown
    Sub GetClassForHandler(ByVal dwDestContext As Long, pvDestContext As Any, pClsid As UUID)
End Interface

[InterfaceId("00000019-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IExternalConnection Extends stdole.IUnknown
    Sub AddConnection(ByVal extconn As Long, ByVal reserved As Long)
    Sub ReleaseConnection(ByVal extconn As Long, ByVal reserved As Long, ByVal fLastReleaseCloses As Long)
End Interface

[InterfaceId("969dc708-5c76-11d1-8d86-0000f804b057")]
[OleAutomation(False)]
Interface IThumbnailExtractor Extends stdole.IUnknown
    Sub ExtractThumbnail(ByVal pStg As IStorage, ByVal ulLength As Long, ByVal ulHeight As Long, pulOutputLength As Long, pulOutputHeight As Long, phOutputBitmap As LongPtr)
    Sub OnFileUpdated(ByVal pStg As IStorage)
End Interface

[InterfaceId("000001da-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IContextCallback Extends stdole.IUnknown
    Sub ContextCallback(pParam As ComCallData, riid As UUID, ByVal iMethod As Long, ByVal pUnk As IUnknown)
End Interface

[InterfaceId("8FA7728F-B69B-4EE5-99F2-E2AA021BEF28")]
[OleAutomation(False)]
'[ DualInterface ]
Interface IActCtx Extends IDispatch
    [DispId(1)] Property Get Manifest() As LongPtr
    [DispId(1)] Property Let Manifest(ByVal newVal As LongPtr)
    [DispId(2)] Property Get ManifestText() As LongPtr
    [DispId(2)] Property Let ManifestText(ByVal bstrTextualManifest As LongPtr)
    [DispId(3)] Property Get ManifestURL() As LongPtr
    [DispId(3)] Property Let ManifestURL(ByVal bstrURL As LongPtr)
    [DispId(4)] Function CreateObject(ByVal ObjectReference As LongPtr, Optional pvarLocation As Variant) As IDispatch
    [DispId(5)] Function GetObject(Optional pvarMoniker As Variant, Optional pvarProgID As Variant) As IDispatch
End Interface

[CoClassId("8143C9AA-38F8-4729-B935-DF6823C616C6")]
CoClass CActCtx
    [Default] Interface IActCtx
End CoClass

[Description("CLSID_ContextSwitcher")]
[CoClassId("0000034e-0000-0000-c000-000000000046")]
CoClass ContextSwitcher
    [Default] Interface IContextCallback
End CoClass

[CoClassId("cefc65d8-66d8-11d1-8d8c-0000f804b057")]
CoClass ThumbnailFCNHandler
    [Default] Interface IThumbnailExtractor
End CoClass



'callobj.idl
[InterfaceId("D573B4B0-894E-11d2-B8B6-00C04FB9618A")]
[OleAutomation(False)]
Interface ICallFrame Extends IUnknown
    Sub GetInfo(ByRef pInfo As CALLFRAMEINFO)
    Sub GetIIDAndMethod(ByRef pIID As UUID, ByRef piMethod As Long)
    Sub GetNames(ByRef pwszInterface As LongPtr, ByRef pwszMethod As LongPtr)
    [PreserveSig] Function GetStackLocation() As LongPtr
    [PreserveSig] Sub SetStackLocation(ByVal pvStack As LongPtr)
    [PreserveSig] Sub SetReturnValue(ByVal hr As Long)
    [PreserveSig] Function GetReturnValue() As Long
    Sub GetParamInfo(ByVal iparam As Long, ByRef pInfo As CALLFRAMEPARAMINFO)
    Sub SetParam(ByVal iparam As Long, ByRef pvar As Variant)
    Sub GetParam(ByVal iparam As Long, ByRef pvar As Variant)
    Sub Copy(ByVal copyControl As CALLFRAME_COPY, ByVal pWalker As ICallFrameWalker, ByRef ppFrame As ICallFrame)
    Sub Free(ByVal pframeArgsDest As ICallFrame, ByVal pWalkerDestFree As ICallFrameWalker, ByVal pWalkerCopy As ICallFrameWalker, ByVal freeFlags As Long, ByVal pWalkerFree As ICallFrameWalker, ByVal nullFlags As Long)
    Sub FreeParam(ByVal iparam As Long, ByVal freeFlags As Long, ByVal pWalkerFree As ICallFrameWalker, ByVal nullFlags As Long)
    Sub WalkFrame(ByVal walkWhat As Long, ByVal pWalker As ICallFrameWalker)
    Sub GetMarshalSizeMax(ByRef pmshlContext As CALLFRAME_MARSHALCONTEXT, ByVal mshlflags As MSHLFLAGS, ByRef pcbBufferNeeded As Long)
    Sub Marshal(ByRef pmshlContext As CALLFRAME_MARSHALCONTEXT, ByVal mshlflags As MSHLFLAGS, pBuffer As Any, ByVal cbBuffer As Long, ByRef pcbBufferUsed As Long, ByRef pdataRep As RPCOLEDATAREP, ByRef prpcFlags As Long)
    Sub Unmarshal(pBuffer As Any, ByVal cbBuffer As Long, ByVal dataRep As RPCOLEDATAREP, ByRef pcontext As CALLFRAME_MARSHALCONTEXT, ByRef pcbUnmarshalled As Long)
    Sub ReleaseMarshalData(ByVal pBuffer As LongPtr, ByVal cbBuffer As Long, ByVal ibFirstRelease As Long, ByVal dataRep As RPCOLEDATAREP, ByRef pcontext As CALLFRAME_MARSHALCONTEXT)
    Sub Invoke CDecl(ByVal pvReceiver As LongPtr, ByVal ParamArray args As Any())
End Interface

[InterfaceId("D573B4B1-894E-11d2-B8B6-00C04FB9618A")]
[OleAutomation(False)]
Interface ICallIndirect Extends IUnknown
    Sub CallIndirect(ByRef phrReturn As Long, ByVal iMethod As Long, pvArgs As Any, ByRef cbArgs As Long)
    Sub GetMethodInfo(ByVal iMethod As Long, ByRef pInfo As CALLFRAMEINFO, ByRef pwszMethod As LongPtr)
    Sub GetStackSize(ByVal iMethod As Long, ByRef cbArgs As Long)
    Sub GetIID(ByRef piid As UUID, ByRef pfDerivesFromIDispatch As BOOL, ByRef pcMethod As Long, ByRef pwszInterface As LongPtr)
End Interface

[InterfaceId("60C7CA75-896D-11d2-B8B6-00C04FB9618A")]
[OleAutomation(False)]
Interface ICallInterceptor Extends ICallIndirect
    Sub RegisterSink(ByVal psink As ICallFrameEvents)
    Sub GetRegisteredSink(ByRef ppsink As ICallFrameEvents)
End Interface

[InterfaceId("FD5E0843-FC91-11d0-97D7-00C04FB9618A")]
[OleAutomation(False)]
Interface ICallFrameEvents Extends IUnknown
    Sub OnCall(ByVal pFrame As ICallFrame)
End Interface

[InterfaceId("5333B003-2E42-11d2-B89D-00C04FB9618A")]
[OleAutomation(False)]
Interface ICallUnmarshal Extends IUnknown
    Sub Unmarshal(ByVal iMethod As Long, ByVal pBuffer As LongPtr, ByVal cbBuffer As Long, ByVal fForceBufferCopy As BOOL, ByVal dataRep As RPCOLEDATAREP, ByRef pcontext As CALLFRAME_MARSHALCONTEXT, ByRef pcbUnmarshalled As Long, ByRef ppFrame As ICallFrame)
    Sub ReleaseMarshalData(ByVal iMethod As Long, ByVal pBuffer As LongPtr, ByVal cbBuffer As Long, ByVal ibFirstRelease As Long, ByVal dataRep As RPCOLEDATAREP, ByRef pcontext As CALLFRAME_MARSHALCONTEXT)
End Interface

[InterfaceId("08B23919-392D-11d2-B8A4-00C04FB9618A")]
[OleAutomation(False)]
Interface ICallFrameWalker Extends IUnknown
    Sub OnWalkInterface(ByRef iid As UUID, ByVal ppvInterface As LongPtr, ByVal fIn As BOOL, ByVal fOut As BOOL)
End Interface

[InterfaceId("D1FB5A79-7706-11d1-ADBA-00C04FC2ADC0")]
[OleAutomation(False)]
Interface IInterfaceRelated Extends IUnknown
    Sub SetIID(ByRef iid As UUID)
    Sub GetIID(ByRef piid As UUID)
End Interface

[InterfaceId("15B51D8B-9BF6-11d1-B888-00C04FB9618A")]
[OleAutomation(False)]
Interface ICallFrameAPIs Extends Nothing
    Sub CoGetInterceptor(ByRef iidIntercepted As UUID, ByVal punkOuter As IUnknown, ByRef iid As UUID, ByRef ppv As Any)
    Sub CoGetInterceptorFromTypeInfo(ByRef iidIntercepted As UUID, ByVal punkOuter As IUnknown, ByVal typeInfo As ITypeInfo, ByRef iid As UUID, ByRef ppv As Any)
End Interface

[InterfaceId("000001D5-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IProcessLock Extends IUnknown
    [PreserveSig] Function AddRefOnProcess() As Long
    [PreserveSig] Function ReleaseRefOnProcess() As Long
End Interface

[InterfaceId("000001D4-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface ISurrogateService Extends IUnknown
    Sub Init(ByRef rguidProcessID As UUID, ByVal pProcessLock As IProcessLock, ByRef pfApplicationAware As BOOL)
    Sub ApplicationLaunch(ByRef rguidApplID As UUID, ByVal appType As ApplicationType)
    Sub ApplicationFree(ByRef rguidApplID As UUID)
    Sub CatalogRefresh(ByVal ulReserved As Long)
    Sub ProcessShutdown(ByVal shutdownType As ShutdownType)
End Interface

[InterfaceId("00000034-0000-0000-C000-000000000046")]
[OleAutomation(False)]
Interface IInitializeSpy Extends IUnknown
    Sub PreInitialize(ByVal dwCoInit As Long, ByVal dwCurThreadAptRefs As Long)
    Sub PostInitialize(ByVal hrCoInit As Long, ByVal dwCoInit As Long, ByVal dwNewThreadAptRefs As Long)
    Sub PreUninitialize(ByVal dwCurThreadAptRefs As Long)
    Sub PostUninitialize(ByVal dwNewThreadAptRefs As Long)
End Interface

[InterfaceId("A2F05A09-27A2-42B5-BC0E-AC163EF49D9B")]
[OleAutomation(False)]
Interface IApartmentShutdown Extends IUnknown
    [PreserveSig] Sub OnUninitialize(ByVal ui64ApartmentIdentifier As Currency)
End Interface




Module wdCOM
    
Public Type RPCOLEMESSAGE
    reserved1 As LongPtr
    dataRepresentation As RPCOLEDATAREP
    Buffer As LongPtr
    cbBuffer As Long
    iMethod As Long
    reserved2(0 To 4) As LongPtr
    rpcFlags As Long
End Type

Public Type SChannelHookCallInfo
    iid As UUID
    cbSize As Long
    uCausality As UUID
    dwServerPid As Long
    iMethod As Long
    pObject As LongPtr
End Type

Public Enum RPCOPT_PROPERTIES
    COMBND_RPCTIMEOUT = &H01 ' Rpc transport-specific timeout.
    COMBND_SERVER_LOCALITY = &H02 ' server locality
    COMBND_RESERVED1 = &H04 ' Reserved
    COMBND_RESERVED2 = &H05 ' Reserved
    COMBND_RESERVED3 = &H08 ' Reserved
    COMBND_RESERVED4 = &H10 ' Reserved
End Enum

Public Enum RPCOPT_SERVER_LOCALITY_VALUES
    SERVER_LOCALITY_PROCESS_LOCAL = 0
    SERVER_LOCALITY_MACHINE_LOCAL = 1
    SERVER_LOCALITY_REMOTE = 2
End Enum

Public Enum GLOBALOPT_PROPERTIES
    COMGLB_EXCEPTION_HANDLING = 1 'defines COM exception handling behavior
    COMGLB_APPID = 2 'sets the AppID for the process
    COMGLB_RPC_THREADPOOL_SETTING = 3 ' sets the ThreadPool behavior of RPC runtime in the process.
    COMGLB_RO_SETTINGS = 4 ' miscellaneous settings.
    COMGLB_UNMARSHALING_POLICY = 5 ' policy applied to CoUnmarshalInterface
    COMGLB_PROPERTIES_RESERVED1 = 6
    COMGLB_PROPERTIES_RESERVED2 = 7
    COMGLB_PROPERTIES_RESERVED3 = 8
End Enum

Public Enum GLOBALOPT_EH_VALUES
    COMGLB_EXCEPTION_HANDLE = 0
    COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 1
    COMGLB_EXCEPTION_DONOT_HANDLE = COMGLB_EXCEPTION_DONOT_HANDLE_FATAL ' Alias for compatibility
    COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 2
End Enum

Public Enum GLOBALOPT_RO_FLAGS
    '  Remove touch messages from the message queue in the STA modal loop.
    COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES = &H1
    '  Flags that control the behavior of input message removal in
    '  the STA modal loop when the thread's message queue is attached.
    COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES = &H2
    COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = &H4
    '  Flag to opt-in to the fast rundown option.
    COMGLB_FAST_RUNDOWN = &H8
    '  Reserved
    COMGLB_RESERVED1 = &H10
    COMGLB_RESERVED2 = &H20
    COMGLB_RESERVED3 = &H40
    '  Flag to opt-in to pointer message re-ordering when
    '  queues are attached.
    COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES = &H80
    COMGLB_RESERVED4 = &H100
    COMGLB_RESERVED5 = &H200
    COMGLB_RESERVED6 = &H400
End Enum

Public Enum GLOBALOPT_UNMARSHALING_POLICY_VALUES
    COMGLB_UNMARSHALING_POLICY_NORMAL = 0
    COMGLB_UNMARSHALING_POLICY_STRONG = 1
    COMGLB_UNMARSHALING_POLICY_HYBRID = 2
End Enum

Public Enum DCOM_CALL_STATE
    DCOM_NONE = &H0
    DCOM_CALL_COMPLETE = &H1
    DCOM_CALL_CANCELED = &H2
End Enum

Public Type ContextProperty
    policyId As UUID
    flags As Long 'CPFLAGS
    pUnk As IUnknown
End Type


[Description("WARNING: Header only. Some union options contain a variable C-style array. ")]
Public Type OBJREF
    signature As Long
    flags As COMObjRefFlags
    iid As UUID
    ' union {
        ' struct {
            ' STDOBJREF       std;
            ' DUALSTRINGARRAY saResAddr;
        ' } u_standard;
        ' struct {
            ' STDOBJREF       std;
            ' CLSID           clsid;
            ' DUALSTRINGARRAY saResAddr;
        ' } u_handler;
        ' struct {
            ' CLSID           clsid;
            ' unsigned long   cbExtension;
            ' unsigned long   size;
            ' ULONGLONG pData;
        ' } u_custom;
    ' } u_objref;
    u_objref(3) As LongLong
End Type
Public Type OBJREF_u_standard
    std As STDOBJREF
    saResAddr As DUALSTRINGARRAY
End Type
Public Type OBJREF_u_handler
    std As STDOBJREF
    clsid As UUID
    saResAddr As DUALSTRINGARRAY
End Type
Public Type OBJREF_u_custom
    clsid As UUID
    cbExtension As Long
    size As Long
    pData As LongLong
End Type
Public Const OBJREF_SIGNATURE = (&H574f454d)
Public Enum COMObjRefFlags
    OBJREF_STANDARD = (&H1)
    OBJREF_HANDLER = (&H2)
    OBJREF_CUSTOM = (&H4)
    OBJREF_EXTENDED = (&H8)
End Enum

[Description("WARNING: Header only. aStringArray is a variable C-style array ")]
Public Type DUALSTRINGARRAY
    wNumEntries As Integer
    wSecurityOffset As Integer
    aStringArray(0 To 0) As Integer
End Type


Public Type STDOBJREF
    flags As Long
    cPublicRefs As Long
    oxid As LongLong 'OXID
    oid As LongLong 'OID
    ipid As UUID 'IPID
End Type
Public Type IPID
    offset As Integer
    page As Integer
    pid As Integer
    tid As Integer
    seq(0 To 7) As Byte
End Type
Public Enum IPIDFlags
    IPIDF_CONNECTING = &H1
    IPIDF_DISCONNECTED = &H2
    IPIDF_SERVERENTRY = &H4
    IPIDF_NOPING = &H8
    IPIDF_COPY = &H10
    IPIDF_VACANT = &H80
    IPIDF_NONNDRSTUB = &H100
    IPIDF_NONNDRPROXY = &H200
    IPIDF_NOTIFYACT = &H400
    IPIDF_TRIED_ASYNC = &H800
    IPIDF_ASYNC_SERVER = &H1000
    IPIDF_DEACTIVATED = &H2000
    IPIDF_WEAKREFCACHE = &H4000
    IPIDF_STRONGREFCACHE = &H8000&
    IPIDF_UNSECURECALLSALLOWED = &H10000
End Enum
Public Type REMQIRESULT
    hResult As Long
    std As STDOBJREF
End Type
Public Type REMINTERFACEREF
    ipid As IPID
    cPublicRefs As Long
    cPrivateRefs As Long
End Type

Public Type ComCallData
	dwDispid As Long
	dwReserved As Long
	pUserDefined As LongPtr
End Type


Public Enum VIEWSTATUS
    VIEWSTATUS_OPAQUE = 1
    VIEWSTATUS_SOLIDBKGND = 2
    VIEWSTATUS_DVASPECTOPAQUE = 4
    VIEWSTATUS_DVASPECTTRANSPARENT = 8
    VIEWSTATUS_SURFACE = 16
    VIEWSTATUS_3DSURFACE = 32
End Enum

Public Enum HITRESULT
    HITRESULT_OUTSIDE = 0
    HITRESULT_TRANSPARENT = 1
    HITRESULT_CLOSE = 2
    HITRESULT_HIT = 3
End Enum

Public Enum DVEXTENTMODE
    DVEXTENT_CONTENT = 0
    DVEXTENT_INTEGRAL = 1
End Enum

Public Type DVEXTENTINFO
    cb As Long
    dwExtentMode As DVEXTENTMODE
    sizelProposed As SIZE
End Type

Public Enum DVASPECTINFOFLAG
    DVASPECTINFOFLAG_CANOPTIMIZE = 1
End Enum

Public Type DVASPECTINFO
    cb As Long
    dwFlags As DVASPECTINFOFLAG
End Type

Public Enum EXTCONN
	EXTCONN_STRONG = &H0001 ' strong connection
	EXTCONN_WEAK = &H0002 ' weak connection (table, container)
	EXTCONN_CALLABLE = &H0004 ' table .vs. callable
End Enum


Public Enum MSHCTX
    MSHCTX_LOCAL = 0
    MSHCTX_NOSHAREDMEM = 1
    MSHCTX_DIFFERENTMACHINE = 2
    MSHCTX_INPROC = 3
    MSHCTX_CROSSCTX = 4
End Enum

Public Enum MSHLFLAGS
    MSHLFLAGS_NORMAL = 0
    MSHLFLAGS_TABLESTRONG = 1
    MSHLFLAGS_TABLEWEAK = 2
    MSHLFLAGS_NOPING = 3
End Enum

Public Type StorageLayout
    LayoutType As STGTY
    pwcsElementName As LongPtr
    cOffset As LongLong
    cBytes As LongLong
End Type

Public Enum RPC_AUTHN
	RPC_C_AUTHN_NONE = 0
	RPC_C_AUTHN_DCE_PRIVATE = 1
	RPC_C_AUTHN_DCE_PUBLIC = 2
	RPC_C_AUTHN_DEC_PUBLIC = 4
	RPC_C_AUTHN_GSS_NEGOTIATE = 9
	RPC_C_AUTHN_WINNT = 10
	RPC_C_AUTHN_GSS_SCHANNEL = 14
	RPC_C_AUTHN_GSS_KERBEROS = 16
	RPC_C_AUTHN_DPA = 17
	RPC_C_AUTHN_MSN = 18
	RPC_C_AUTHN_DIGEST = 21
	RPC_C_AUTHN_KERNEL = 20
	RPC_C_AUTHN_NEGO_EXTENDER = 30
	RPC_C_AUTHN_PKU2U = 31
	RPC_C_AUTHN_LIVE_SSP = 32
	RPC_C_AUTHN_LIVEXP_SSP = 35
	RPC_C_AUTHN_CLOUD_AP = 36
	RPC_C_AUTHN_MSONLINE = 82
	RPC_C_AUTHN_MQ = 100
	RPC_C_AUTHN_DEFAULT = &HFFFFFFFF
End Enum

Public Enum RPC_AUTHZ
	RPC_C_AUTHZ_NONE = 0
	RPC_C_AUTHZ_NAME = 1
	RPC_C_AUTHZ_DCE = 2
	RPC_C_AUTHZ_DEFAULT = &Hffffffff
End Enum

Public Enum RPC_AUTHN_LVL
	RPC_C_AUTHN_LEVEL_DEFAULT = 0
	RPC_C_AUTHN_LEVEL_NONE = 1
	RPC_C_AUTHN_LEVEL_CONNECT = 2
	RPC_C_AUTHN_LEVEL_CALL = 3
	RPC_C_AUTHN_LEVEL_PKT = 4
	RPC_C_AUTHN_LEVEL_PKT_INTEGRITY = 5
	RPC_C_AUTHN_LEVEL_PKT_PRIVACY = 6
End Enum

Public Enum EOLE_AUTHENTICATION_CAPABILITIES
	EOAC_NONE = 0
	EOAC_MUTUAL_AUTH = &H1
	EOAC_STATIC_CLOAKING = &H20
	EOAC_DYNAMIC_CLOAKING = &H40
	EOAC_ANY_AUTHORITY = &H80
	EOAC_MAKE_FULLSIC = &H100
	EOAC_DEFAULT = &H800
	EOAC_SECURE_REFS = &H2
	EOAC_ACCESS_CONTROL = &H4
	EOAC_APPID = &H8
	EOAC_DYNAMIC = &H10
	EOAC_REQUIRE_FULLSIC = &H200
	EOAC_AUTO_IMPERSONATE = &H400
	EOAC_DISABLE_AAA = &H1000
	EOAC_NO_CUSTOM_MARSHAL = &H2000
	EOAC_RESERVED1 = &H4000
End Enum

Public Enum RPC_IMP_LVL
	RPC_C_IMP_LEVEL_ANONYMOUS = 1
	RPC_C_IMP_LEVEL_IDENTIFY = 2
	RPC_C_IMP_LEVEL_IMPERSONATE = 3
	RPC_C_IMP_LEVEL_DELEGATE = 4
End Enum
    

'callobj.h
Public Type CALLFRAMEINFO
    iMethod As Long
    fHasInValues As BOOL
    fHasInOutValues As BOOL
    fHasOutValues As BOOL
    fDerivesFromIDispatch As BOOL
    cInInterfacesMax As Long
    cInOutInterfacesMax As Long
    cOutInterfacesMax As Long
    cTopLevelInInterfaces As Long
    iid As UUID
    cMethod As Long
    cParams As Long
End Type
Public Type CALLFRAMEPARAMINFO
    fIn As Byte
    fOut As Byte
    stackOffset As Long
    cbParam As Long
End Type

Public Enum CALLFRAME_COPY
    CALLFRAME_COPY_NESTED = 1
    CALLFRAME_COPY_INDEPENDENT = 2
End Enum

Public Enum CALLFRAME_FREE
    CALLFRAME_FREE_NONE = 0
    CALLFRAME_FREE_IN = 1
    CALLFRAME_FREE_INOUT = 2
    CALLFRAME_FREE_OUT = 4
    CALLFRAME_FREE_TOP_INOUT = 8
    CALLFRAME_FREE_TOP_OUT = 16
    CALLFRAME_FREE_ALL = 31
End Enum

Public Enum CALLFRAME_NULL
    CALLFRAME_NULL_NONE = 0
    CALLFRAME_NULL_INOUT = 2
    CALLFRAME_NULL_OUT = 4
    CALLFRAME_NULL_ALL = 6
End Enum

Public Enum CALLFRAME_WALK
    CALLFRAME_WALK_IN = 1
    CALLFRAME_WALK_INOUT = 2
    CALLFRAME_WALK_OUT = 4
End Enum

Public Type CALLFRAME_MARSHALCONTEXT
    fIn As Byte
    dwDestContext As Long
    pvDestContext As LongPtr
    punkReserved As IUnknown
    guidTransferSyntax As UUID
End Type

Public Const CALLFRAME_E_ALREADYINVOKED  = &H8004d090
Public Const CALLFRAME_E_COULDNTMAKECALL  = &H8004d091

Public Enum ApplicationType
    ServerApplication
    LibraryApplication
End Enum
Public Enum ShutdownType
    IdleShutdown
    ForcedShutdown
End Enum

Public Function IID_IProcessLock() As UUID
'{000001d5-0000-0000-C000-000000000046}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H000001d5, CInt(&H0000), CInt(&H0000), &HC0, &H00, &H00, &H00, &H00, &H00, &H00, &H46)
 IID_IProcessLock = iid
End Function
Public Function IID_ISurrogateService() As UUID
'{000001d4-0000-0000-C000-000000000046}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H000001d4, CInt(&H0000), CInt(&H0000), &HC0, &H00, &H00, &H00, &H00, &H00, &H00, &H46)
 IID_ISurrogateService = iid
End Function
Public Function IID_IInitializeSpy() As UUID
'{00000034-0000-0000-C000-000000000046}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000034, CInt(&H0000), CInt(&H0000), &HC0, &H00, &H00, &H00, &H00, &H00, &H00, &H46)
 IID_IInitializeSpy = iid
End Function
Public Function IID_IApartmentShutdown() As UUID
'{A2F05A09-27A2-42B5-BC0E-AC163EF49D9B}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA2F05A09, CInt(&H27A2), CInt(&H42B5), &HBC, &H0E, &HAC, &H16, &H3E, &HF4, &H9D, &H9B)
 IID_IApartmentShutdown = iid
End Function
Public Function IID_ICallFrame() As UUID
'{D573B4B0-894E-11d2-B8B6-00C04FB9618A}
Static iid As UUID
    If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD573B4B0, CInt(&H894E), CInt(&H11d2), &HB8, &HB6, &H00, &HC0, &H4F, &HB9, &H61, &H8A)
    IID_ICallFrame = iid
End Function
Public Function IID_ICallIndirect() As UUID
'{D573B4B1-894E-11d2-B8B6-00C04FB9618A}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD573B4B1, CInt(&H894E), CInt(&H11d2), &HB8, &HB6, &H00, &HC0, &H4F, &HB9, &H61, &H8A)
 IID_ICallIndirect = iid
End Function
Public Function IID_ICallInterceptor() As UUID
'{60C7CA75-896D-11d2-B8B6-00C04FB9618A}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H60C7CA75, CInt(&H896D), CInt(&H11d2), &HB8, &HB6, &H00, &HC0, &H4F, &HB9, &H61, &H8A)
 IID_ICallInterceptor = iid
End Function
Public Function IID_ICallFrameEvents() As UUID
'{FD5E0843-FC91-11d0-97D7-00C04FB9618A}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HFD5E0843, CInt(&HFC91), CInt(&H11d0), &H97, &HD7, &H00, &HC0, &H4F, &HB9, &H61, &H8A)
 IID_ICallFrameEvents = iid
End Function
Public Function IID_ICallUnmarshal() As UUID
'{5333B003-2E42-11d2-B89D-00C04FB9618A}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5333B003, CInt(&H2E42), CInt(&H11d2), &HB8, &H9D, &H00, &HC0, &H4F, &HB9, &H61, &H8A)
 IID_ICallUnmarshal = iid
End Function
Public Function IID_ICallFrameWalker() As UUID
'{08B23919-392D-11d2-B8A4-00C04FB9618A}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H08B23919, CInt(&H392D), CInt(&H11d2), &HB8, &HA4, &H00, &HC0, &H4F, &HB9, &H61, &H8A)
 IID_ICallFrameWalker = iid
End Function
Public Function IID_IInterfaceRelated() As UUID
'{D1FB5A79-7706-11d1-ADBA-00C04FC2ADC0}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD1FB5A79, CInt(&H7706), CInt(&H11d1), &HAD, &HBA, &H00, &HC0, &H4F, &HC2, &HAD, &HC0)
 IID_IInterfaceRelated = iid
End Function
Public Function IID_ICallFrameAPIs() As UUID
'{15B51D8B-9BF6-11d1-B888-00C04FB9618A}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H15B51D8B, CInt(&H9BF6), CInt(&H11d1), &HB8, &H88, &H00, &HC0, &H4F, &HB9, &H61, &H8A)
 IID_ICallFrameAPIs = iid
End Function
Public Function IID_IRpcChannelBuffer() As UUID
'{D5F56B60-593B-101A-B569-08002B2DBF7A}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD5F56B60, CInt(&H593B), CInt(&H101A), &HB5, &H69, &H08, &H00, &H2B, &H2D, &HBF, &H7A)
IID_IRpcChannelBuffer = iid
End Function
Public Function IID_IRpcChannelBuffer2() As UUID
'{594f31d0-7f19-11d0-b194-00a0c90dc8bf}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H594f31d0, CInt(&H7f19), CInt(&H11d0), &Hb1, &H94, &H00, &Ha0, &Hc9, &H0d, &Hc8, &Hbf)
IID_IRpcChannelBuffer2 = iid
End Function
Public Function IID_IAsyncRpcChannelBuffer() As UUID
'{a5029fb6-3c34-11d1-9c99-00c04fb998aa}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Ha5029fb6, CInt(&H3c34), CInt(&H11d1), &H9c, &H99, &H00, &Hc0, &H4f, &Hb9, &H98, &Haa)
IID_IAsyncRpcChannelBuffer = iid
End Function
Public Function IID_IRpcChannelBuffer3() As UUID
'{25B15600-0115-11d0-BF0D-00AA00B8DFD2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H25B15600, CInt(&H0115), CInt(&H11d0), &HBF, &H0D, &H00, &HAA, &H00, &HB8, &HDF, &HD2)
IID_IRpcChannelBuffer3 = iid
End Function
Public Function IID_IRpcSyntaxNegotiate() As UUID
'{58a08519-24c8-4935-b482-3fd823333a4f}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H58a08519, CInt(&H24c8), CInt(&H4935), &Hb4, &H82, &H3f, &Hd8, &H23, &H33, &H3a, &H4f)
IID_IRpcSyntaxNegotiate = iid
End Function
Public Function IID_IRpcProxyBuffer() As UUID
'{D5F56A34-593B-101A-B569-08002B2DBF7A}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD5F56A34, CInt(&H593B), CInt(&H101A), &HB5, &H69, &H08, &H00, &H2B, &H2D, &HBF, &H7A)
IID_IRpcProxyBuffer = iid
End Function
Public Function IID_IRpcStubBuffer() As UUID
'{D5F56AFC-593B-101A-B569-08002B2DBF7A}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD5F56AFC, CInt(&H593B), CInt(&H101A), &HB5, &H69, &H08, &H00, &H2B, &H2D, &HBF, &H7A)
IID_IRpcStubBuffer = iid
End Function
Public Function IID_IPSFactoryBuffer() As UUID
'{D5F569D0-593B-101A-B569-08002B2DBF7A}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD5F569D0, CInt(&H593B), CInt(&H101A), &HB5, &H69, &H08, &H00, &H2B, &H2D, &HBF, &H7A)
IID_IPSFactoryBuffer = iid
End Function
Public Function IID_IChannelHook() As UUID
'{1008c4a0-7613-11cf-9af1-0020af6e72f4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1008c4a0, CInt(&H7613), CInt(&H11cf), &H9a, &Hf1, &H00, &H20, &Haf, &H6e, &H72, &Hf4)
IID_IChannelHook = iid
End Function
Public Function IID_IRpcOptions() As UUID
'{00000144-0000-0000-C000-000000000046}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H00000144, CInt(&H0000), CInt(&H0000), &HC0, &H00, &H00, &H00, &H00, &H00, &H00, &H46)
IID_IRpcOptions = iid
End Function
Public Function IID_ISynchronize() As UUID
'{00000030-0000-0000-C000-000000000046}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H00000030, CInt(&H0000), CInt(&H0000), &HC0, &H00, &H00, &H00, &H00, &H00, &H00, &H46)
IID_ISynchronize = iid
End Function
Public Function IID_ISynchronizeHandle() As UUID
'{00000031-0000-0000-C000-000000000046}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H00000031, CInt(&H0000), CInt(&H0000), &HC0, &H00, &H00, &H00, &H00, &H00, &H00, &H46)
IID_ISynchronizeHandle = iid
End Function
Public Function IID_ISynchronizeEvent() As UUID
'{00000032-0000-0000-C000-000000000046}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H00000032, CInt(&H0000), CInt(&H0000), &HC0, &H00, &H00, &H00, &H00, &H00, &H00, &H46)
IID_ISynchronizeEvent = iid
End Function
Public Function IID_ISynchronizeContainer() As UUID
'{00000033-0000-0000-C000-000000000046}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H00000033, CInt(&H0000), CInt(&H0000), &HC0, &H00, &H00, &H00, &H00, &H00, &H00, &H46)
IID_ISynchronizeContainer = iid
End Function
Public Function IID_ISynchronizeMutex() As UUID
'{00000025-0000-0000-C000-000000000046}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H00000025, CInt(&H0000), CInt(&H0000), &HC0, &H00, &H00, &H00, &H00, &H00, &H00, &H46)
IID_ISynchronizeMutex = iid
End Function
Public Function IID_ICancelMethodCalls() As UUID
'{00000029-0000-0000-C000-000000000046}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H00000029, CInt(&H0000), CInt(&H0000), &HC0, &H00, &H00, &H00, &H00, &H00, &H00, &H46)
IID_ICancelMethodCalls = iid
End Function
Public Function IID_IAsyncManager() As UUID
'{0000002A-0000-0000-C000-000000000046}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H0000002A, CInt(&H0000), CInt(&H0000), &HC0, &H00, &H00, &H00, &H00, &H00, &H00, &H46)
IID_IAsyncManager = iid
End Function
Public Function IID_ICallFactory() As UUID
'{1c733a30-2a1c-11ce-ade5-00aa0044773d}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1c733a30, CInt(&H2a1c), CInt(&H11ce), &Had, &He5, &H00, &Haa, &H00, &H44, &H77, &H3d)
IID_ICallFactory = iid
End Function
Public Function IID_IReleaseMarshalBuffers() As UUID
'{eb0cb9e8-7996-11d2-872e-0000f8080859}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Heb0cb9e8, CInt(&H7996), CInt(&H11d2), &H87, &H2e, &H00, &H00, &Hf8, &H08, &H08, &H59)
IID_IReleaseMarshalBuffers = iid
End Function
Public Function IID_IWaitMultiple() As UUID
'{0000002B-0000-0000-C000-000000000046}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H0000002B, CInt(&H0000), CInt(&H0000), &HC0, &H00, &H00, &H00, &H00, &H00, &H00, &H46)
IID_IWaitMultiple = iid
End Function
Public Function IID_IAddrTrackingControl() As UUID
'{00000147-0000-0000-C000-000000000046}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H00000147, CInt(&H0000), CInt(&H0000), &HC0, &H00, &H00, &H00, &H00, &H00, &H00, &H46)
IID_IAddrTrackingControl = iid
End Function
Public Function IID_IAddrExclusionControl() As UUID
'{00000148-0000-0000-C000-000000000046}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H00000148, CInt(&H0000), CInt(&H0000), &HC0, &H00, &H00, &H00, &H00, &H00, &H00, &H46)
IID_IAddrExclusionControl = iid
End Function
Public Function IID_IPipeByte() As UUID
'{DB2F3ACA-2F86-11d1-8E04-00C04FB9989A}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HDB2F3ACA, CInt(&H2F86), CInt(&H11d1), &H8E, &H04, &H00, &HC0, &H4F, &HB9, &H98, &H9A)
 IID_IPipeByte = iid
End Function
Public Function IID_IPipeLong() As UUID
'{DB2F3ACC-2F86-11d1-8E04-00C04FB9989A}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HDB2F3ACC, CInt(&H2F86), CInt(&H11d1), &H8E, &H04, &H00, &HC0, &H4F, &HB9, &H98, &H9A)
 IID_IPipeLong = iid
End Function
Public Function IID_IPipeDouble() As UUID
'{DB2F3ACE-2F86-11d1-8E04-00C04FB9989A}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HDB2F3ACE, CInt(&H2F86), CInt(&H11d1), &H8E, &H04, &H00, &HC0, &H4F, &HB9, &H98, &H9A)
 IID_IPipeDouble = iid
End Function
Public Function IID_IInternalUnknown() As UUID
'{00000021-0000-0000-C000-000000000046}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H00000021, CInt(&H0000), CInt(&H0000), &HC0, &H00, &H00, &H00, &H00, &H00, &H00, &H46)
 IID_IInternalUnknown = iid
End Function
Public Function IID_INoMarshal() As UUID
'{ecc8691b-c1db-4dc0-855e-65f6c551af49}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hecc8691b, CInt(&Hc1db), CInt(&H4dc0), &H85, &H5e, &H65, &Hf6, &Hc5, &H51, &Haf, &H49)
IID_INoMarshal = iid
End Function
Public Function IID_IAgileObject() As UUID
'{94ea2b94-e9cc-49e0-c0ff-ee64ca8f5b90}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H94ea2b94, CInt(&He9cc), CInt(&H49e0), &Hc0, &Hff, &Hee, &H64, &Hca, &H8f, &H5b, &H90)
IID_IAgileObject = iid
End Function
Public Function IID_IActivationFilter() As UUID
'{00000017-0000-0000-C000-000000000046}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H00000017, CInt(&H0000), CInt(&H0000), &HC0, &H00, &H00, &H00, &H00, &H00, &H00, &H46)
IID_IActivationFilter = iid
End Function
Public Function IID_IMarshal2() As UUID
'{000001cf-0000-0000-C000-000000000046}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H000001cf, CInt(&H0000), CInt(&H0000), &HC0, &H00, &H00, &H00, &H00, &H00, &H00, &H46)
IID_IMarshal2 = iid
End Function


[UseGetLastError(False)]
Public Declare PtrSafe Function CoGetInterceptor Lib "ole32" (iidIntercepted As UUID, ByVal punkOuter As IUnknown, iid As UUID, ppv As Any) As Long
[UseGetLastError(False)]
Public Declare PtrSafe Function CoGetInterceptorFromTypeInfo Lib "ole32" (iidIntercepted As UUID, ByVal punkOuter As IUnknown, ByVal typeinfo As ITypeInfo, iid As UUID, ppv As Any) As Long

    
End Module