'*****************************************************************************************
'This file is a part of WinDevLib - Windows Development Library for twinBASIC
'https://github.com/fafalone/WinDevLib
'Code ported by Jon Johnson. 
'"Windows" is a trademark of the Microsoft Corporation.
'Certain Description attributes (c) Microsoft, taken from SDK headers and official docs.
'Licensed under Creative Commons CC0 1.0 Universal
'*****************************************************************************************

'This file covers Cryptography and Certificate APIs.
'wincrypt.h - Covered 100%
'dpapi.h - Covered 100%
'wincred.h - covered 100%
'wintrust.h - Covered 99%
'cryptui.h - Covered 100%
'bcrypt.h - Covered 100%
'ncrypt.h - Covered 100%

#If WINDEVLIB_LITE = 0 Then
Module wdAPICrypto

	#Region "advapi32"
    Public Enum CRYPT_AT_FLAGS
        AT_KEYEXCHANGE = 1
        AT_SIGNATURE = 2
        CERT_NCRYPT_KEY_SPEC = &HFFFFFFFF
    End Enum

    Public Enum CRYPT_SIG_FLAGS
        CRYPT_NOHASHOID = &H00000001
        CRYPT_TYPE2_FORMAT = &H00000002  ' Not supported
        CRYPT_X931_FORMAT = &H00000004  ' Not supported
    End Enum

    'wincrypt.h has 100% coverage through the end of advapi32.dll definitions; line 1568 of SDK v10.0.25309.0
    'Further defs are in the crypt32 region. Includes bcrypt.h and ncrypt.h are 100% covered in their respective regions.

    [IgnoreWarnings(TB0021)]
    Public Function GET_ALG_CLASS(ByVal x As Long) As AlgorithmClasses: Return (x And (7 << 13)): End Function
    [IgnoreWarnings(TB0021)]
    Public Function GET_ALG_TYPE(ByVal x As Long) As AlgorithmTypes: Return (x And (15 << 9)): End Function
    [IgnoreWarnings(TB0021)]
    Public Function GET_ALG_SID(ByVal x As Long) As AlgorithmSubIDs: Return (x And (511)): End Function


    Public Enum AlgorithmClasses
        ALG_CLASS_ANY = (0)
        ALG_CLASS_SIGNATURE = (1 << 13)
        ALG_CLASS_MSG_ENCRYPT = (2 << 13)
        ALG_CLASS_DATA_ENCRYPT = (3 << 13)
        ALG_CLASS_HASH = (4 << 13)
        ALG_CLASS_KEY_EXCHANGE = (5 << 13)
        ALG_CLASS_ALL = (7 << 13)
    End Enum

    Public Enum AlgorithmTypes
        ALG_TYPE_ANY = (0)
        ALG_TYPE_DSS = (1 << 9)
        ALG_TYPE_RSA = (2 << 9)
        ALG_TYPE_BLOCK = (3 << 9)
        ALG_TYPE_STREAM = (4 << 9)
        ALG_TYPE_DH = (5 << 9)
        ALG_TYPE_SECURECHANNEL = (6 << 9)
        ALG_TYPE_ECDH = (7 << 9)
        ALG_TYPE_THIRDPARTY = (8 << 9)
    End Enum

    Public Enum AlgorithmSubIDs
        ALG_SID_ANY = (0)
    ' Generic ThirdParty sub-ids
        ALG_SID_THIRDPARTY_ANY = (0)
    ' Some RSA sub-ids
        ALG_SID_RSA_ANY = 0
        ALG_SID_RSA_PKCS = 1
        ALG_SID_RSA_MSATWORK = 2
        ALG_SID_RSA_ENTRUST = 3
        ALG_SID_RSA_PGP = 4
    ' Some DSS sub-ids
        ALG_SID_DSS_ANY = 0
        ALG_SID_DSS_PKCS = 1
        ALG_SID_DSS_DMS = 2
        ALG_SID_ECDSA = 3
    ' Block cipher sub ids
    ' DES sub_ids
        ALG_SID_DES = 1
        ALG_SID_3DES = 3
        ALG_SID_DESX = 4
        ALG_SID_IDEA = 5
        ALG_SID_CAST = 6
        ALG_SID_SAFERSK64 = 7
        ALG_SID_SAFERSK128 = 8
        ALG_SID_3DES_112 = 9
        ALG_SID_CYLINK_MEK = 12
        ALG_SID_RC5 = 13
        ALG_SID_AES_128 = 14
        ALG_SID_AES_192 = 15
        ALG_SID_AES_256 = 16
        ALG_SID_AES = 17
    ' Fortezza sub-ids
        ALG_SID_SKIPJACK = 10
        ALG_SID_TEK = 11
    ' RC2 sub-ids
        ALG_SID_RC2 = 2
    ' Stream cipher sub-ids
        ALG_SID_RC4 = 1
        ALG_SID_SEAL = 2
    ' Diffie-Hellman sub-ids
        ALG_SID_DH_SANDF = 1
        ALG_SID_DH_EPHEM = 2
        ALG_SID_AGREED_KEY_ANY = 3
        ALG_SID_KEA = 4
        ALG_SID_ECDH = 5
        ALG_SID_ECDH_EPHEM = 6
    ' Hash sub ids
        ALG_SID_MD2 = 1
        ALG_SID_MD4 = 2
        ALG_SID_MD5 = 3
        ALG_SID_SHA = 4
        ALG_SID_SHA1 = 4
        ALG_SID_MAC = 5
        ALG_SID_RIPEMD = 6
        ALG_SID_RIPEMD160 = 7
        ALG_SID_SSL3SHAMD5 = 8
        ALG_SID_HMAC = 9
        ALG_SID_TLS1PRF = 10
        ALG_SID_HASH_REPLACE_OWF = 11
        ALG_SID_SHA_256 = 12
        ALG_SID_SHA_384 = 13
        ALG_SID_SHA_512 = 14
    ' secure channel sub ids
        ALG_SID_SSL3_MASTER = 1
        ALG_SID_SCHANNEL_MASTER_HASH = 2
        ALG_SID_SCHANNEL_MAC_KEY = 3
        ALG_SID_PCT1_MASTER = 4
        ALG_SID_SSL2_MASTER = 5
        ALG_SID_TLS1_MASTER = 6
        ALG_SID_SCHANNEL_ENC_KEY = 7
        ALG_SID_ECMQV = 1
        ALG_SID_EXAMPLE = 80
    End Enum

    Public Enum Crypt_KP_Mode
        CRYPT_MODE_CBCI = 6 ' ANSI CBC Interleaved
        CRYPT_MODE_CFBP = 7 ' ANSI CFB Pipelined
        CRYPT_MODE_OFBP = 8 ' ANSI OFB Pipelined
        CRYPT_MODE_CBCOFM = 9 ' ANSI CBC + OF Masking
        CRYPT_MODE_CBCOFMI = 10 ' ANSI CBC + OFM Interleaved
    End Enum

    Public Enum ALG_ID
        CALG_MD2 = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_MD2)
        CALG_MD4 = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_MD4)
        CALG_MD5 = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_MD5)
        CALG_SHA = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_SHA)
        CALG_SHA1 = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_SHA1)
        CALG_MAC = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_MAC) ' Deprecated. Don't use.
        CALG_RSA_SIGN = (ALG_CLASS_SIGNATURE Or ALG_TYPE_RSA Or ALG_SID_RSA_ANY)
        CALG_DSS_SIGN = (ALG_CLASS_SIGNATURE Or ALG_TYPE_DSS Or ALG_SID_DSS_ANY)
        CALG_NO_SIGN = (ALG_CLASS_SIGNATURE Or ALG_TYPE_ANY Or ALG_SID_ANY)
        CALG_RSA_KEYX = (ALG_CLASS_KEY_EXCHANGE Or ALG_TYPE_RSA Or ALG_SID_RSA_ANY)
        CALG_DES = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_DES)
        CALG_3DES_112 = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_3DES_112)
        CALG_3DES = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_3DES)
        CALG_DESX = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_DESX)
        CALG_RC2 = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_RC2)
        CALG_RC4 = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_STREAM Or ALG_SID_RC4)
        CALG_SEAL = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_STREAM Or ALG_SID_SEAL)
        CALG_DH_SF = (ALG_CLASS_KEY_EXCHANGE Or ALG_TYPE_DH Or ALG_SID_DH_SANDF)
        CALG_DH_EPHEM = (ALG_CLASS_KEY_EXCHANGE Or ALG_TYPE_DH Or ALG_SID_DH_EPHEM)
        CALG_AGREEDKEY_ANY = (ALG_CLASS_KEY_EXCHANGE Or ALG_TYPE_DH Or ALG_SID_AGREED_KEY_ANY)
        CALG_KEA_KEYX = (ALG_CLASS_KEY_EXCHANGE Or ALG_TYPE_DH Or ALG_SID_KEA)
        CALG_HUGHES_MD5 = (ALG_CLASS_KEY_EXCHANGE Or ALG_TYPE_ANY Or ALG_SID_MD5)
        CALG_SKIPJACK = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_SKIPJACK)
        CALG_TEK = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_TEK)
        CALG_CYLINK_MEK = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_CYLINK_MEK) ' Deprecated. Do not use
        CALG_SSL3_SHAMD5 = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_SSL3SHAMD5)
        CALG_SSL3_MASTER = (ALG_CLASS_MSG_ENCRYPT Or ALG_TYPE_SECURECHANNEL Or ALG_SID_SSL3_MASTER)
        CALG_SCHANNEL_MASTER_HASH = (ALG_CLASS_MSG_ENCRYPT Or ALG_TYPE_SECURECHANNEL Or ALG_SID_SCHANNEL_MASTER_HASH)
        CALG_SCHANNEL_MAC_KEY = (ALG_CLASS_MSG_ENCRYPT Or ALG_TYPE_SECURECHANNEL Or ALG_SID_SCHANNEL_MAC_KEY)
        CALG_SCHANNEL_ENC_KEY = (ALG_CLASS_MSG_ENCRYPT Or ALG_TYPE_SECURECHANNEL Or ALG_SID_SCHANNEL_ENC_KEY)
        CALG_PCT1_MASTER = (ALG_CLASS_MSG_ENCRYPT Or ALG_TYPE_SECURECHANNEL Or ALG_SID_PCT1_MASTER)
        CALG_SSL2_MASTER = (ALG_CLASS_MSG_ENCRYPT Or ALG_TYPE_SECURECHANNEL Or ALG_SID_SSL2_MASTER)
        CALG_TLS1_MASTER = (ALG_CLASS_MSG_ENCRYPT Or ALG_TYPE_SECURECHANNEL Or ALG_SID_TLS1_MASTER)
        CALG_RC5 = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_RC5)
        CALG_HMAC = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_HMAC)
        CALG_TLS1PRF = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_TLS1PRF)
        CALG_HASH_REPLACE_OWF = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_HASH_REPLACE_OWF)
        CALG_AES_128 = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_AES_128)
        CALG_AES_192 = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_AES_192)
        CALG_AES_256 = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_AES_256)
        CALG_AES = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_AES)
        CALG_SHA_256 = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_SHA_256)
        CALG_SHA_384 = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_SHA_384)
        CALG_SHA_512 = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_SHA_512)
        CALG_ECDH = (ALG_CLASS_KEY_EXCHANGE Or ALG_TYPE_DH Or ALG_SID_ECDH)
        CALG_ECDH_EPHEM = (ALG_CLASS_KEY_EXCHANGE Or ALG_TYPE_ECDH Or ALG_SID_ECDH_EPHEM)
        CALG_ECMQV = (ALG_CLASS_KEY_EXCHANGE Or ALG_TYPE_ANY Or ALG_SID_ECMQV)
        CALG_ECDSA = (ALG_CLASS_SIGNATURE Or ALG_TYPE_DSS Or ALG_SID_ECDSA)
        CALG_NULLCIPHER = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_ANY Or 0)
        CALG_THIRDPARTY_KEY_EXCHANGE = (ALG_CLASS_KEY_EXCHANGE Or ALG_TYPE_THIRDPARTY Or ALG_SID_THIRDPARTY_ANY)
        CALG_THIRDPARTY_SIGNATURE = (ALG_CLASS_SIGNATURE Or ALG_TYPE_THIRDPARTY Or ALG_SID_THIRDPARTY_ANY)
        CALG_THIRDPARTY_CIPHER = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_THIRDPARTY Or ALG_SID_THIRDPARTY_ANY)
        CALG_THIRDPARTY_HASH = (ALG_CLASS_HASH Or ALG_TYPE_THIRDPARTY Or ALG_SID_THIRDPARTY_ANY)
    End Enum

    Public Const CRYPT_FIRST  = 1
    Public Const CRYPT_NEXT  = 2
    Public Const CRYPT_SGC_ENUM  = 4


    Public Enum CryptImplTypes
        CRYPT_IMPL_HARDWARE = 1
        CRYPT_IMPL_SOFTWARE = 2
        CRYPT_IMPL_MIXED = 3
        CRYPT_IMPL_UNKNOWN = 4
        CRYPT_IMPL_REMOVABLE = 8
    End Enum


    Public Enum CryptKeyStorageFlags
        CRYPT_SEC_DESCR = &H00000001
        CRYPT_PSTORE = &H00000002
        CRYPT_UI_PROMPT = &H00000004
    End Enum

    Public Enum CryptProtocolFlags
        CRYPT_FLAG_PCT1 = &H0001
        CRYPT_FLAG_SSL2 = &H0002
        CRYPT_FLAG_SSL3 = &H0004
        CRYPT_FLAG_TLS1 = &H0008
        CRYPT_FLAG_IPSEC = &H0010
        CRYPT_FLAG_SIGNING = &H0020
    End Enum

    Public Enum CryptSCGFlags
        CRYPT_SGC = &H0001
        CRYPT_FASTSGC = &H0002
    End Enum


    Public Enum CryptProviders
        PROV_RSA_FULL = 1
        PROV_RSA_SIG = 2
        PROV_DSS = 3
        PROV_FORTEZZA = 4
        PROV_MS_EXCHANGE = 5
        PROV_SSL = 6
        PROV_STT_MER = 7
        PROV_STT_ACQ = 8
        PROV_STT_BRND = 9
        PROV_STT_ROOT = 10
        PROV_STT_ISS = 11
        PROV_RSA_SCHANNEL = 12
        PROV_DSS_DH = 13
        PROV_EC_ECDSA_SIG = 14
        PROV_EC_ECNRA_SIG = 15
        PROV_EC_ECDSA_FULL = 16
        PROV_EC_ECNRA_FULL = 17
        PROV_DH_SCHANNEL = 18
        PROV_SPYRUS_LYNKS = 20
        PROV_RNG = 21
        PROV_INTEL_SEC = 22
        PROV_REPLACE_OWF = 23
        PROV_RSA_AES = 24
    End Enum

    Public Const SIGNATURE_RESOURCE_NUMBER = &H29A

    Public Type VTableProvStruc
        Version As Long
        FuncVerifyImage As LongPtr 'FARPROC
        FuncReturnhWnd As LongPtr 'FARPROC
        dwProvType As CryptProviders
        pbContextInfo As LongPtr 'BYTE*
        cbContextInfo As Long
        pszProvName As LongPtr 'ANSI
    End Type

    Public Enum Crypt_AC_Flags
        CRYPT_VERIFYCONTEXT = &HF0000000
        CRYPT_NEWKEYSET = &H00000008
        CRYPT_DELETEKEYSET = &H00000010
        CRYPT_MACHINE_KEYSET = &H00000020
        CRYPT_SILENT = &H00000040
        CRYPT_DEFAULT_CONTAINER_OPTIONAL = &H00000080
    End Enum

    Public Enum CryptKeyFlags
        CRYPT_EXPORTABLE = &H00000001
        CRYPT_USER_PROTECTED = &H00000002
        CRYPT_CREATE_SALT = &H00000004
        CRYPT_UPDATE_KEY = &H00000008
        CRYPT_NO_SALT = &H00000010
        CRYPT_PREGEN = &H00000040
        CRYPT_RECIPIENT = &H00000010
        CRYPT_INITIATOR = &H00000040
        CRYPT_ONLINE = &H00000080
        CRYPT_SF = &H00000100
        CRYPT_CREATE_IV = &H00000200
        CRYPT_KEK = &H00000400
        CRYPT_SERVER = &H00000400
        CRYPT_DATA_KEY = &H00000800
        CRYPT_VOLATILE = &H00001000
        CRYPT_SGCKEY = &H00002000
        CRYPT_USER_PROTECTED_STRONG = &H00100000
        CRYPT_ARCHIVABLE = &H00004000
        CRYPT_FORCE_KEY_PROTECTION_HIGH = &H00008000&
        RSA1024BIT_KEY = &H0400000
        CRYPT_IPSEC_HMAC_KEY = &H00000100
        KEY_LENGTH_MASK = &HFFFF0000
    End Enum

    Public Enum CryptCreateHashFlags
        CRYPT_SECRETDIGEST = &H00000001
    End Enum
    
    Public Enum CryptHashDataFlags
        CRYPT_OWF_REPL_LM_HASH = &H00000001
        CRYPT_USERDATA = &H1
    End Enum

    Public Enum CryptHashParams
        HP_ALGID = &H0001  ' Hash algorithm
        HP_HASHVAL = &H0002  ' Hash value
        HP_HASHSIZE = &H0004  ' Hash value size
        HP_HMAC_INFO = &H0005  ' information for creating an HMAC
        HP_TLS1PRF_LABEL = &H0006  ' label for TLS1 PRF
        HP_TLS1PRF_SEED = &H0007  ' seed for TLS1 PRF
    End Enum

    Public Enum CryptProvParams
        PP_ENUMALGS = 1
        PP_ENUMCONTAINERS = 2
        PP_IMPTYPE = 3
        PP_NAME = 4
        PP_VERSION = 5
        PP_CONTAINER = 6
        PP_CHANGE_PASSWORD = 7
        PP_KEYSET_SEC_DESCR = 8  ' get/set security descriptor of keyset
        PP_CERTCHAIN = 9  ' for retrieving certificates from tokens
        PP_KEY_TYPE_SUBTYPE = 10
        PP_PROVTYPE = 16
        PP_KEYSTORAGE = 17
        PP_APPLI_CERT = 18
        PP_SYM_KEYSIZE = 19
        PP_SESSION_KEYSIZE = 20
        PP_UI_PROMPT = 21
        PP_ENUMALGS_EX = 22
        PP_ENUMMANDROOTS = 25
        PP_ENUMELECTROOTS = 26
        PP_KEYSET_TYPE = 27
        PP_ADMIN_PIN = 31
        PP_KEYEXCHANGE_PIN = 32
        PP_SIGNATURE_PIN = 33
        PP_SIG_KEYSIZE_INC = 34
        PP_KEYX_KEYSIZE_INC = 35
        PP_UNIQUE_CONTAINER = 36
        PP_SGC_INFO = 37
        PP_USE_HARDWARE_RNG = 38
        PP_KEYSPEC = 39
        PP_ENUMEX_SIGNING_PROT = 40
        PP_CRYPT_COUNT_KEY_USE = 41
        PP_USER_CERTSTORE = 42
        PP_SMARTCARD_READER = 43
        PP_SMARTCARD_GUID = 45
        PP_ROOT_CERTSTORE = 46
        PP_SMARTCARD_READER_ICON = 47
        PP_CLIENT_HWND = 1
        PP_CONTEXT_INFO = 11
        PP_KEYEXCHANGE_KEYSIZE = 12
        PP_SIGNATURE_KEYSIZE = 13
        PP_KEYEXCHANGE_ALG = 14
        PP_SIGNATURE_ALG = 15
        PP_DELETEKEY = 24
    ' #if (NTDDI_VERSION >= NTDDI_VISTA)
        PP_PIN_PROMPT_STRING = 44
        PP_SECURE_KEYEXCHANGE_PIN = 47
        PP_SECURE_SIGNATURE_PIN = 48
    ' #endif //(NTDDI_VERSION >= NTDDI_VISTA)
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_RS5)
        PP_DISMISS_PIN_UI_SEC = 49
        PP_IS_PFX_EPHEMERAL = 50
    End Enum

    Public Enum CryptKeyBlobTypes
        SIMPLEBLOB = &H1
        PUBLICKEYBLOB = &H6
        PRIVATEKEYBLOB = &H7
        PLAINTEXTKEYBLOB = &H8
        OPAQUEKEYBLOB = &H9
        PUBLICKEYBLOBEX = &HA
        SYMMETRICWRAPKEYBLOB = &HB
        KEYSTATEBLOB = &HC
    End Enum


    Public Enum CryptExportKeyFlags
        CRYPT_Y_ONLY = &H00000001
        CRYPT_SSL2_FALLBACK = &H00000002
        CRYPT_DESTROYKEY = &H00000004
        CRYPT_OAEP = &H00000040  ' used with RSA encryptions/decryptions
    '  CryptExportKey, CryptImportKey,
    '  CryptEncrypt and CryptDecrypt
        CRYPT_BLOB_VER3 = &H00000080  ' export version 3 of a blob type
        CRYPT_DECRYPT_RSA_NO_PADDING_CHECK = &H20
    End Enum



    Public Enum CryptDefaultProviders
        CRYPT_MACHINE_DEFAULT = &H00000001
        CRYPT_USER_DEFAULT = &H00000002
        CRYPT_DELETE_DEFAULT = &H00000004
    End Enum

    Public Enum CryptHashSessionFlags
        CRYPT_LITTLE_ENDIAN = &H00000001
    End Enum

    Public Type CMS_DH_KEY_INFO
        dwVersion As Long ' sizeof(CMS_DH_KEY_INFO)
        Algid As ALG_ID ' algorithmm id for the key to be converted
        pszContentEncObjId As String ' pointer to OID to hash in with Z
        PubInfo As CRYPT_DATA_BLOB ' OPTIONAL - public information
        pReserved As LongPtr '*void ' reserved - should be NULL
    End Type

    Public Enum CryptKeyParams
        KP_IV = 1  ' Initialization vector
        KP_SALT = 2  ' Salt value
        KP_PADDING = 3  ' Padding values
        KP_MODE = 4  ' Mode of the cipher
        KP_MODE_BITS = 5  ' Number of bits to feedback
        KP_PERMISSIONS = 6  ' Key permissions DWORD
        KP_ALGID = 7  ' Key algorithm
        KP_BLOCKLEN = 8  ' Block size of the cipher
        KP_KEYLEN = 9  ' Length of key in bits
        KP_SALT_EX = 10  ' Length of salt in bytes
        KP_P = 11  ' DSS/Diffie-Hellman P value
        KP_G = 12  ' DSS/Diffie-Hellman G value
        KP_Q = 13  ' DSS Q value
        KP_X = 14  ' Diffie-Hellman X value
        KP_Y = 15  ' Y value
        KP_RA = 16  ' Fortezza RA value
        KP_RB = 17  ' Fortezza RB value
        KP_INFO = 18  ' for putting information into an RSA envelope
        KP_EFFECTIVE_KEYLEN = 19  ' setting and getting RC2 effective key length
        KP_SCHANNEL_ALG = 20  ' for setting the Secure Channel algorithms
        KP_CLIENT_RANDOM = 21  ' for setting the Secure Channel client random data
        KP_SERVER_RANDOM = 22  ' for setting the Secure Channel server random data
        KP_RP = 23
        KP_PRECOMP_MD5 = 24
        KP_PRECOMP_SHA = 25
        KP_CERTIFICATE = 26  ' for setting Secure Channel certificate data (PCT1)
        KP_CLEAR_KEY = 27  ' for setting Secure Channel clear key data (PCT1)
        KP_PUB_EX_LEN = 28
        KP_PUB_EX_VAL = 29
        KP_KEYVAL = 30
        KP_ADMIN_PIN = 31
        KP_KEYEXCHANGE_PIN = 32
        KP_SIGNATURE_PIN = 33
        KP_PREHASH = 34
    ' #if (NTDDI_VERSION >= NTDDI_WS03)
        KP_ROUNDS = 35
    ' #endif //(NTDDI_VERSION >= NTDDI_WS03)
        KP_OAEP_PARAMS = 36  ' for setting OAEP params on RSA keys
        KP_CMS_KEY_INFO = 37
        KP_CMS_DH_KEY_INFO = 38
        KP_PUB_PARAMS = 39  ' for setting public parameters
        KP_VERIFY_PARAMS = 40  ' for verifying DSA and DH parameters
        KP_HIGHEST_VERSION = 41  ' for TLS protocol version setting
    ' #if (NTDDI_VERSION >= NTDDI_WS03)
        KP_GET_USE_COUNT = 42  ' for use with PP_CRYPT_COUNT_KEY_USE contexts
    ' #endif //(NTDDI_VERSION >= NTDDI_WS03)
        KP_PIN_ID = 43
        KP_PIN_INFO = 44
    End Enum
    Public Enum CryptKeyPadding
        PKCS5_PADDING = 1  ' PKCS 5 (sec 6.2) padding method
        RANDOM_PADDING = 2
        ZERO_PADDING = 3
    End Enum
    Public Enum CryptKeyMode
        CRYPT_MODE_CBC = 1  ' Cipher block chaining
        CRYPT_MODE_ECB = 2  ' Electronic code book
        CRYPT_MODE_OFB = 3  ' Output feedback mode
        CRYPT_MODE_CFB = 4  ' Cipher feedback mode
        CRYPT_MODE_CTS = 5  ' Ciphertext stealing mode
    End Enum
    Public Enum CryptKeyPermissions
        CRYPT_ENCRYPT = &H0001  ' Allow encryption
        CRYPT_DECRYPT = &H0002  ' Allow decryption
        CRYPT_EXPORT = &H0004  ' Allow key to be exported
        CRYPT_READ = &H0008  ' Allow parameters to be read
        CRYPT_WRITE = &H0010  ' Allow parameters to be set
        CRYPT_MAC = &H0020  ' Allow MACs to be used with key
        CRYPT_EXPORT_KEY = &H0040  ' Allow key to be used for exporting keys
        CRYPT_IMPORT_KEY = &H0080  ' Allow key to be used for importing keys
        CRYPT_ARCHIVE = &H0100  ' Allow key to be exported at creation only
    End Enum

    Public Enum CryptOperationResult
        CRYPT_FAILED = CFALSE
        CRYPT_SUCCEED = CTRUE
    End Enum

    Public Type PUBKEY
        magic As Long
        bitlen As Long ' # of bits in modulus
    End Type
    'Alias  DHPUBKEY, DSSPUBKEY, KEAPUBKEY, TEKPUBKEY As PUBKEY
    Public Type DHPUBKEY
        magic As Long
        bitlen As Long ' # of bits in modulus
    End Type
    Public Type DSSPUBKEY
        magic As Long
        bitlen As Long ' # of bits in modulus
    End Type
    Public Type KEAPUBKEY
        magic As Long
        bitlen As Long ' # of bits in modulus
    End Type
    Public Type TEKPUBKEY
        magic As Long
        bitlen As Long ' # of bits in modulus
    End Type

    Public Type DSSSEED
        counter As Long
        seed(0 To 19) As Byte
    End Type

    Public Type PUBKEYVER3
        magic As Long
        bitlenP As Long ' # of bits in prime modulus
        bitlenQ As Long ' # of bits in prime q, 0 if not available
        bitlenJ As Long ' # of bits in (p-1)/q, 0 if not available
        DSSSeed As DSSSEED
    End Type
    'Alias DHPUBKEY_VER3, DSSPUBKEY_VER3 As PUBKEYVER3
    Public Type DHPUBKEY_VER3
        magic As Long
        bitlenP As Long ' # of bits in prime modulus
        bitlenQ As Long ' # of bits in prime q, 0 if not available
        bitlenJ As Long ' # of bits in (p-1)/q, 0 if not available
        DSSSeed As DSSSEED
    End Type
    Public Type DSSPUBKEY_VER3
        magic As Long
        bitlenP As Long ' # of bits in prime modulus
        bitlenQ As Long ' # of bits in prime q, 0 if not available
        bitlenJ As Long ' # of bits in (p-1)/q, 0 if not available
        DSSSeed As DSSSEED
    End Type

    Public Type PRIVKEYVER3
        magic As Long
        bitlenP As Long ' # of bits in prime modulus
        bitlenQ As Long ' # of bits in prime q, 0 if not available
        bitlenJ As Long ' # of bits in (p-1)/q, 0 if not available
        bitlenX As Long ' # of bits in X
        DSSSeed As DSSSEED
    End Type
    'Alias DHPRIVKEY_VER3, DSSPRIVKEY_VER3 As PRIVKEYVER3
    Public Type DSSPRIVKEY_VER3
        magic As Long
        bitlenP As Long ' # of bits in prime modulus
        bitlenQ As Long ' # of bits in prime q, 0 if not available
        bitlenJ As Long ' # of bits in (p-1)/q, 0 if not available
        bitlenX As Long ' # of bits in X
        DSSSeed As DSSSEED
    End Type
    Public Type DHPRIVKEY_VER3
        magic As Long
        bitlenP As Long ' # of bits in prime modulus
        bitlenQ As Long ' # of bits in prime q, 0 if not available
        bitlenJ As Long ' # of bits in (p-1)/q, 0 if not available
        bitlenX As Long ' # of bits in X
        DSSSeed As DSSSEED
    End Type

    Public Type KEY_TYPE_SUBTYPE
        dwKeySpec As CRYPT_AT_FLAGS
        Type As UUID
        Subtype As UUID
    End Type

    Public Type CERT_FORTEZZA_DATA_PROP
        SerialNumber(0 To 7) As Byte
        CertIndex As Long
        CertLabel(0 To 35) As Byte
    End Type

    Public Type CRYPT_RC4_KEY_STATE
        Key(0 To 15) As Byte
        SBox(0 To 255) As Byte
        i As Byte
        j As Byte
    End Type

    Public Type CRYPT_DES_KEY_STATE
        Key(0 To 7) As Byte
        IV(0 To 7) As Byte
        Feedback(0 To 7) As Byte
    End Type

    Public Type CRYPT_3DES_KEY_STATE
        Key(0 To 23) As Byte
        IV(0 To 7) As Byte
        Feedback(0 To 7) As Byte
    End Type

    [Description("Note: 2d array notations reversed in according with C vs VB differences.")]
    Public Type CRYPT_AES_128_KEY_STATE
        Key(0 To 31) As Byte
        IV(0 To 15) As Byte
        EncryptionState(15, 10) As Byte ' 14 rounds + 1
        DecryptionState(15, 10) As Byte
        Feedback(0 To 15) As Byte
    End Type
    [Description("Note: 2d array notations reversed in according with C vs VB differences.")]
    Public Type CRYPT_AES_256_KEY_STATE
        Key(0 To 31) As Byte
        IV(0 To 15) As Byte
        EncryptionState(15, 14) As Byte ' 14 rounds + 1
        DecryptionState(15, 14) As Byte
        Feedback(0 To 15) As Byte
    End Type

    Public Declare PtrSafe Function CryptAcquireContextA Lib "advapi32" (hProv As LongPtr, ByVal pszContainer As LongPtr, ByVal pszProvider As LongPtr, ByVal dwProvType As CryptProviders, ByVal dwFlags As Crypt_AC_Flags) As BOOL
    Public DeclareWide PtrSafe Function CryptAcquireContext Lib "advapi32" Alias "CryptAcquireContextW" (hProv As LongPtr, ByVal pszContainer As String, ByVal pszProvider As String, ByVal dwProvType As CryptProviders, ByVal dwFlags As Crypt_AC_Flags) As BOOL
    Public Declare PtrSafe Function CryptAcquireContextW Lib "advapi32" (hProv As LongPtr, ByVal pszContainer As LongPtr, ByVal pszProvider As LongPtr, ByVal dwProvType As CryptProviders, ByVal dwFlags As Crypt_AC_Flags) As BOOL
    Public Declare PtrSafe Function CryptReleaseContext Lib "advapi32" (ByVal hProv As LongPtr, ByVal dwFlags As Long) As BOOL
    Public Declare PtrSafe Function CryptGenKey Lib "advapi32" (ByVal hProv As LongPtr, ByVal Algid As ALG_ID, ByVal dwFlags As CryptKeyFlags, phkey As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptEncrypt Lib "advapi32" (ByVal hKey As LongPtr, ByVal hHash As LongPtr, ByVal Final As BOOL, ByVal dwFlags As Long, pbData As Any, pdwDataLen As Long, ByVal dwBufLen As Long) As BOOL
    Public Declare PtrSafe Function CryptDecrypt Lib "advapi32" (ByVal hKey As LongPtr, ByVal hHash As LongPtr, ByVal Final As BOOL, ByVal dwFlags As Long, pbData As Any, pdwDataLen As Long) As BOOL
    Public Declare PtrSafe Function CryptGetProvParam Lib "advapi32" (ByVal hProv As LongPtr, ByVal dwParam As CryptProvParams, ByRef pbData As Any, ByRef pdwDataLen As Long, ByVal dwFlags As Long) As BOOL
    Public Declare PtrSafe Function CryptSetProvParam Lib "advapi32" (ByVal hProv As LongPtr, ByVal dwParam As CryptProvParams, ByRef pbData As Any, ByVal dwFlags As Long) As BOOL
    Public Declare PtrSafe Function CryptHashSessionKey Lib "advapi32" (ByVal hHash As LongPtr, ByVal hKey As LongPtr, ByVal dwFlags As CryptHashSessionFlags) As BOOL
    Public Declare PtrSafe Function CryptSignHashA Lib "advapi32" (ByVal hHash As LongPtr, ByVal dwKeySpec As CRYPT_AT_FLAGS, ByVal szDescription As String, ByVal dwFlags As CRYPT_SIG_FLAGS, pbSignature As Any, pdwSigLen As Long) As BOOL
    Public Declare PtrSafe Function CryptSignHashW Lib "advapi32" (ByVal hHash As LongPtr, ByVal dwKeySpec As CRYPT_AT_FLAGS, ByVal szDescription As LongPtr, ByVal dwFlags As CRYPT_SIG_FLAGS, pbSignature As Any, pdwSigLen As Long) As BOOL
    Public DeclareWide PtrSafe Function CryptSignHash Lib "advapi32" Alias "CryptSignHashW" (ByVal hHash As LongPtr, ByVal dwKeySpec As CRYPT_AT_FLAGS, ByVal szDescription As String, ByVal dwFlags As CRYPT_SIG_FLAGS, pbSignature As Any, pdwSigLen As Long) As BOOL
    Public Declare PtrSafe Function CryptVerifySignatureA Lib "advapi32" (ByVal hHash As LongPtr, pbSignature As Any, ByVal dwSigLen As Long, ByVal hPubKey As LongPtr, ByVal szDescription As String, ByVal dwFlags As CRYPT_SIG_FLAGS) As BOOL
    Public Declare PtrSafe Function CryptVerifySignatureW Lib "advapi32" (ByVal hHash As LongPtr, pbSignature As Any, ByVal dwSigLen As Long, ByVal hPubKey As LongPtr, ByVal szDescription As LongPtr, ByVal dwFlags As CRYPT_SIG_FLAGS) As BOOL
    Public DeclareWide PtrSafe Function CryptVerifySignature Lib "advapi32" Alias "CryptVerifySignatureW" (ByVal hHash As LongPtr, pbSignature As Any, ByVal dwSigLen As Long, ByVal hPubKey As LongPtr, ByVal szDescription As String, ByVal dwFlags As CRYPT_SIG_FLAGS) As BOOL
    Public Declare PtrSafe Function CryptGetUserKey Lib "advapi32" (ByVal hProv As LongPtr, ByVal dwKeySpec As CRYPT_AT_FLAGS, phUserKey As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function RtlGenRandom Lib "advapi32" Alias "SystemFunction036" (RandomBuffer As Any, ByVal RandomBufferLength As Long) As Long
    Public Declare PtrSafe Function CryptGenRandom Lib "advapi32" (ByVal hProv As LongPtr, ByVal dwLen As Long, pbBuffer As Any) As BOOL
    Public Declare PtrSafe Function CryptCreateHash Lib "advapi32" (ByVal hProv As LongPtr, ByVal Algid As ALG_ID, ByVal hKey As LongPtr, ByVal dwFlags As CryptCreateHashFlags, phHash As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptDestroyHash Lib "advapi32" (ByVal hHash As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptHashData Lib "advapi32" (ByVal hHash As LongPtr, pbData As Any, ByVal dwDataLen As Long, ByVal dwFlags As CryptHashDataFlags) As BOOL
    Public Declare PtrSafe Function CryptGetHashParam Lib "advapi32" (ByVal hHash As LongPtr, ByVal dwParam As CryptHashParams, pbData As Any, ByRef pcbData As Long, ByVal dwFlags As Long) As BOOL
    Public Declare PtrSafe Function CryptSetHashParam Lib "advapi32" (ByVal hHash As LongPtr, ByVal dwParam As CryptHashParams, pbData As Any, ByVal dwFlags As Long) As Long
    Public Declare PtrSafe Function CryptImportKey Lib "advapi32" (ByVal hProv As LongPtr, pbData As Any, ByVal dwDataLen As Long, ByVal hPubKey As LongPtr, ByVal dwFlags As CryptKeyFlags, phKey As LongPtr) As Long
    Public Declare PtrSafe Function CryptExportKey Lib "advapi32" (ByVal hProv As LongPtr, ByVal hExpKey As LongPtr, ByVal dwBlobType As CryptKeyBlobTypes, ByVal dwFlags As CryptExportKeyFlags, pbData As Any, pdwDataLen As Long) As BOOL
    Public Declare PtrSafe Function CryptDeriveKey Lib "advapi32" (ByVal hProv As LongPtr, ByVal Algid As ALG_ID, ByVal hBaseData As LongPtr, ByVal dwFlags As CryptKeyFlags, ByRef phKey As LongPtr) As Long
    Public Declare PtrSafe Function CryptDestroyKey Lib "advapi32" (ByVal hKey As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptGetKeyParam Lib "advapi32" (ByVal hKey As LongPtr, ByVal dwParam As CryptKeyParams, pbData As Any, pdwDataLen As Long, ByVal dwFlags As Long) As BOOL
    Public Declare PtrSafe Function CryptSetKeyParam Lib "advapi32" (ByVal hKey As LongPtr, ByVal dwParam As CryptKeyParams, pbData As Any, [TypeHint(CryptKeyFlags)] ByVal dwFlags As Long) As BOOL
    Public Declare PtrSafe Function CryptEnumProvidersA Lib "advapi32" (ByVal dwIndex As Long, pdwReserved As Long, ByVal dwFlags As Long, pdwProvType As CryptProviders, ByVal szProvName As String, pcbProvName As Long) As BOOL
    Public Declare PtrSafe Function CryptEnumProvidersW Lib "advapi32" (ByVal dwIndex As Long, pdwReserved As Long, ByVal dwFlags As Long, pdwProvType As CryptProviders, ByVal szProvName As LongPtr, pcbProvName As Long) As BOOL
    Public DeclareWide PtrSafe Function CryptEnumProviders Lib "advapi32" Alias "CryptEnumProvidersW" (ByVal dwIndex As Long, pdwReserved As Long, ByVal dwFlags As Long, pdwProvType As CryptProviders, ByVal szProvName As String, pcbProvName As Long) As BOOL
    Public Declare PtrSafe Function CryptEnumProviderTypesA Lib "advapi32" (ByVal dwIndex As Long, pdwReserved As Long, ByVal dwFlags As Long, pdwProvType As CryptProviders, ByVal szTypeName As String, pcbTypeName As Long) As BOOL
    Public Declare PtrSafe Function CryptEnumProviderTypesW Lib "advapi32" (ByVal dwIndex As Long, pdwReserved As Long, ByVal dwFlags As Long, pdwProvType As CryptProviders, ByVal szTypeName As LongPtr, pcbTypeName As Long) As BOOL
    Public DeclareWide PtrSafe Function CryptEnumProviderTypes Lib "advapi32" Alias "CryptEnumProviderTypesW" (ByVal dwIndex As Long, pdwReserved As Long, ByVal dwFlags As Long, pdwProvType As CryptProviders, ByVal szPrszTypeNameovName As String, pcbTypeName As Long) As BOOL
    Public Declare PtrSafe Function CryptDuplicateKey Lib "advapi32" (ByVal hKey As LongPtr, pdwReserved As Long, ByVal dwFlags As Long, phKey As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptDuplicateHash Lib "advapi32" (ByVal hHash As LongPtr, pdwReserved As Long, ByVal dwFlags As Long, phHash As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptGetDefaultProviderA Lib "advapi32" (ByVal dwProvType As CryptProviders, pdwReserved As Long, ByVal dwFlags As CryptDefaultProviders, ByVal pszProvName As String, pcbProvName As Long) As BOOL
    Public Declare PtrSafe Function CryptGetDefaultProviderW Lib "advapi32" (ByVal dwProvType As CryptProviders, pdwReserved As Long, ByVal dwFlags As CryptDefaultProviders, ByVal pszProvName As LongPtr, pcbProvName As Long) As BOOL
    Public DeclareWide PtrSafe Function CryptGetDefaultProvider Lib "advapi32" Alias "CryptGetDefaultProviderW" (ByVal dwProvType As CryptProviders, pdwReserved As Long, ByVal dwFlags As CryptDefaultProviders, ByVal pszProvName As String, pcbProvName As Long) As BOOL
    Public Declare PtrSafe Function CryptSetProviderA Lib "advapi32" (ByVal pszProvName As String, ByVal dwProvType As CryptProviders) As BOOL
    Public Declare PtrSafe Function CryptSetProviderW Lib "advapi32" (ByVal pszProvName As LongPtr, ByVal dwProvType As CryptProviders) As BOOL
    Public DeclareWide PtrSafe Function CryptSetProvider Lib "advapi32" Alias "CryptSetProviderW" (ByVal pszProvName As String, ByVal dwProvType As CryptProviders) As BOOL
    Public Declare PtrSafe Function CryptSetProviderExA Lib "advapi32" (ByVal pszProvName As String, ByVal dwProvType As CryptProviders, pdwReserved As Long, ByVal dwFlags As CryptDefaultProviders) As BOOL
    Public Declare PtrSafe Function CryptSetProviderExW Lib "advapi32" (ByVal pszProvName As LongPtr, ByVal dwProvType As CryptProviders, pdwReserved As Long, ByVal dwFlags As CryptDefaultProviders) As BOOL
    Public DeclareWide PtrSafe Function CryptSetProviderEx Lib "advapi32" Alias "CryptSetProviderExW" (ByVal pszProvName As String, ByVal dwProvType As CryptProviders, pdwReserved As Long, ByVal dwFlags As CryptDefaultProviders) As BOOL
    Public Declare PtrSafe Function CryptContextAddRef Lib "advapi32" (ByVal hProv As LongPtr, pdwReserved As Long, ByVal dwFlags As Long) As BOOL


    Public Function RCRYPT_SUCCEEDED(ByVal rt As Long) As Boolean: Return (rt = CRYPT_SUCCEED): End Function
    Public Function RCRYPT_FAILED(ByVal rt As Long) As Boolean: Return (rt = CRYPT_FAILED): End Function

    #End Region

    #Region "wincred"
    'wincred.h, 100% coverage

    Public Const CRED_MAX_STRING_LENGTH  = 256
    '  Maximum length of the UserName field.  The worst case is <User>@<DnsDomain>
    Public Const CRED_MAX_USERNAME_LENGTH  = (256 + 1 + 256)
    '  Maximum length of the TargetName field for CRED_TYPE_GENERIC (in characters)
    Public Const CRED_MAX_GENERIC_TARGET_NAME_LENGTH  = 32767
    '  Maximum length of the TargetName field for CRED_TYPE_DOMAIN_* (in characters)
    '       Largest one is <DfsRoot>\<DfsShare>
    Public Const CRED_MAX_DOMAIN_TARGET_NAME_LENGTH  = (256 + 1 + 80)
    '  Maximum length of a target namespace
    Public Const CRED_MAX_TARGETNAME_NAMESPACE_LENGTH  = (256)
    '  Maximum length of a target attribute
    Public Const CRED_MAX_TARGETNAME_ATTRIBUTE_LENGTH  = (256)
    '  Maximum size of the Credential Attribute Value field (in bytes)
    Public Const CRED_MAX_VALUE_SIZE  = (256)
    '  Maximum number of attributes per credential
    Public Const CRED_MAX_ATTRIBUTES  = 64

    Public Type CREDENTIAL_ATTRIBUTEA
        Keyword As String
        Flags As Long
        ValueSize As Long
        Value As LongPtr 'LPBYTE
    End Type
    Public Type CREDENTIAL_ATTRIBUTEW
        Keyword As LongPtr
        Flags As Long
        ValueSize As Long
        Value As LongPtr 'LPBYTE
    End Type
    'Alias CREDENTIAL_ATTRIBUTE As CREDENTIAL_ATTRIBUTEW
    Public Type CREDENTIAL_ATTRIBUTE
        Keyword As LongPtr
        Flags As Long
        ValueSize As Long
        Value As LongPtr 'LPBYTE
    End Type

    Public Const CRED_SESSION_WILDCARD_NAME_W  = "*Session"
    Public Const CRED_SESSION_WILDCARD_NAME_A  = "*Session"
    Public Const CRED_UNIVERSAL_WILDCARD_W  = "*"
    Public Const CRED_UNIVERSAL_WILDCARD_A  = "*"
    Public Const CRED_SESSION_WILDCARD_NAME_LENGTH  = (Len(CRED_SESSION_WILDCARD_NAME_A) - 1)
    Public Const CRED_TARGETNAME_DOMAIN_NAMESPACE_W  = "Domain"
    Public Const CRED_TARGETNAME_DOMAIN_NAMESPACE_A  = "Domain"
    Public Const CRED_TARGETNAME_DOMAIN_NAMESPACE_LENGTH  = (Len(CRED_TARGETNAME_DOMAIN_NAMESPACE_A) - 1)
    ' Public Const CRED_UNIVERSAL_WILDCARD_W  = "*"
    ' Public Const CRED_UNIVERSAL_WILDCARD_A  = "*"
    Public Const CRED_TARGETNAME_LEGACYGENERIC_NAMESPACE_W  = "LegacyGeneric"
    Public Const CRED_TARGETNAME_LEGACYGENERIC_NAMESPACE_A  = "LegacyGeneric"
    Public Const CRED_TARGETNAME_LEGACYGENERIC_NAMESPACE_LENGTH  = (Len(CRED_TARGETNAME_LEGACYGENERIC_NAMESPACE_A) - 1)
    Public Const CRED_TARGETNAME_NAMESPACE_SEPERATOR_W  = ":"
    Public Const CRED_TARGETNAME_NAMESPACE_SEPERATOR_A  = ":"
    Public Const CRED_TARGETNAME_ATTRIBUTE_SEPERATOR_W  = "="
    Public Const CRED_TARGETNAME_ATTRIBUTE_SEPERATOR_A  = "="
    Public Const CRED_TARGETNAME_DOMAIN_EXTENDED_USERNAME_SEPARATOR_W  = "|"
    Public Const CRED_TARGETNAME_DOMAIN_EXTENDED_USERNAME_SEPARATOR_A  = "|"
    Public Const CRED_TARGETNAME_ATTRIBUTE_TARGET_W  = "target"
    Public Const CRED_TARGETNAME_ATTRIBUTE_TARGET_A  = "target"
    Public Const CRED_TARGETNAME_ATTRIBUTE_TARGET_LENGTH  = (Len(CRED_TARGETNAME_ATTRIBUTE_TARGET_A) - 1)
    Public Const CRED_TARGETNAME_ATTRIBUTE_NAME_W  = "name"
    Public Const CRED_TARGETNAME_ATTRIBUTE_NAME_A  = "name"
    Public Const CRED_TARGETNAME_ATTRIBUTE_NAME_LENGTH  = (Len(CRED_TARGETNAME_ATTRIBUTE_NAME_A) - 1)
    Public Const CRED_TARGETNAME_ATTRIBUTE_BATCH_W  = "batch"
    Public Const CRED_TARGETNAME_ATTRIBUTE_BATCH_A  = "batch"
    Public Const CRED_TARGETNAME_ATTRIBUTE_BATCH_LENGTH  = (Len(CRED_TARGETNAME_ATTRIBUTE_BATCH_A) - 1)
    Public Const CRED_TARGETNAME_ATTRIBUTE_INTERACTIVE_W  = "interactive"
    Public Const CRED_TARGETNAME_ATTRIBUTE_INTERACTIVE_A  = "interactive"
    Public Const CRED_TARGETNAME_ATTRIBUTE_INTERACTIVE_LENGTH  = (Len(CRED_TARGETNAME_ATTRIBUTE_INTERACTIVE_A) - 1)
    Public Const CRED_TARGETNAME_ATTRIBUTE_SERVICE_W  = "service"
    Public Const CRED_TARGETNAME_ATTRIBUTE_SERVICE_A  = "service"
    Public Const CRED_TARGETNAME_ATTRIBUTE_SERVICE_LENGTH  = (Len(CRED_TARGETNAME_ATTRIBUTE_SERVICE_A) - 1)
    Public Const CRED_TARGETNAME_ATTRIBUTE_NETWORK_W  = "network"
    Public Const CRED_TARGETNAME_ATTRIBUTE_NETWORK_A  = "network"
    Public Const CRED_TARGETNAME_ATTRIBUTE_NETWORK_LENGTH  = (Len(CRED_TARGETNAME_ATTRIBUTE_NETWORK_A) - 1)
    Public Const CRED_TARGETNAME_ATTRIBUTE_NETWORKCLEARTEXT_W  = "networkcleartext"
    Public Const CRED_TARGETNAME_ATTRIBUTE_NETWORKCLEARTEXT_A  = "networkcleartext"
    Public Const CRED_TARGETNAME_ATTRIBUTE_NETWORKCLEARTEXT_LENGTH  = (Len(CRED_TARGETNAME_ATTRIBUTE_NETWORKCLEARTEXT_A) - 1)
    Public Const CRED_TARGETNAME_ATTRIBUTE_REMOTEINTERACTIVE_W  = "remoteinteractive"
    Public Const CRED_TARGETNAME_ATTRIBUTE_REMOTEINTERACTIVE_A  = "remoteinteractive"
    Public Const CRED_TARGETNAME_ATTRIBUTE_REMOTEINTERACTIVE_LENGTH  = (Len(CRED_TARGETNAME_ATTRIBUTE_REMOTEINTERACTIVE_A) - 1)
    Public Const CRED_TARGETNAME_ATTRIBUTE_CACHEDINTERACTIVE_W  = "cachedinteractive"
    Public Const CRED_TARGETNAME_ATTRIBUTE_CACHEDINTERACTIVE_A  = "cachedinteractive"
    Public Const CRED_TARGETNAME_ATTRIBUTE_CACHEDINTERACTIVE_LENGTH  = (Len(CRED_TARGETNAME_ATTRIBUTE_CACHEDINTERACTIVE_A) - 1)

    Public Const CRED_SESSION_WILDCARD_NAME  = CRED_SESSION_WILDCARD_NAME_W
    Public Const CRED_TARGETNAME_DOMAIN_NAMESPACE  = CRED_TARGETNAME_DOMAIN_NAMESPACE_W
    Public Const CRED_UNIVERSAL_WILDCARD  = CRED_UNIVERSAL_WILDCARD_W
    Public Const CRED_TARGETNAME_NAMESPACE_SEPERATOR  = CRED_TARGETNAME_NAMESPACE_SEPERATOR_W
    Public Const CRED_TARGETNAME_ATTRIBUTE_SEPERATOR  = CRED_TARGETNAME_ATTRIBUTE_SEPERATOR_W
    Public Const CRED_TARGETNAME_ATTRIBUTE_NAME  = CRED_TARGETNAME_ATTRIBUTE_NAME_W
    Public Const CRED_TARGETNAME_ATTRIBUTE_TARGET  = CRED_TARGETNAME_ATTRIBUTE_TARGET_W
    Public Const CRED_TARGETNAME_ATTRIBUTE_BATCH  = CRED_TARGETNAME_ATTRIBUTE_BATCH_W
    Public Const CRED_TARGETNAME_ATTRIBUTE_INTERACTIVE  = CRED_TARGETNAME_ATTRIBUTE_INTERACTIVE_W
    Public Const CRED_TARGETNAME_ATTRIBUTE_SERVICE  = CRED_TARGETNAME_ATTRIBUTE_SERVICE_W
    Public Const CRED_TARGETNAME_ATTRIBUTE_NETWORK  = CRED_TARGETNAME_ATTRIBUTE_NETWORK_W
    Public Const CRED_TARGETNAME_ATTRIBUTE_NETWORKCLEARTEXT  = CRED_TARGETNAME_ATTRIBUTE_NETWORKCLEARTEXT_W
    Public Const CRED_TARGETNAME_ATTRIBUTE_REMOTEINTERACTIVE  = CRED_TARGETNAME_ATTRIBUTE_REMOTEINTERACTIVE_W
    Public Const CRED_TARGETNAME_ATTRIBUTE_CACHEDINTERACTIVE  = CRED_TARGETNAME_ATTRIBUTE_CACHEDINTERACTIVE_W

    Public Const CRED_LOGON_TYPES_MASK = &HF000

    Public Enum WinCredFlags
        CRED_FLAGS_PASSWORD_FOR_CERT = &H0001
        CRED_FLAGS_PROMPT_NOW = &H0002
        CRED_FLAGS_USERNAME_TARGET = &H0004
        CRED_FLAGS_OWF_CRED_BLOB = &H0008
        CRED_FLAGS_REQUIRE_CONFIRMATION = &H0010
    '   Valid only for return and only with CredReadDomainCredentials().
    '   Indicates credential was returned due to wildcard match
    '   of targetname with credential.
        CRED_FLAGS_WILDCARD_MATCH = &H0020
    '  Valid only for return
    '  Indicates that the credential is VSM protected
        CRED_FLAGS_VSM_PROTECTED = &H0040
        CRED_FLAGS_NGC_CERT = &H0080
    '  Mask of all valid flags
        CRED_FLAGS_VALID_FLAGS = &HF0FF&
        CRED_FLAGS_VALID_INPUT_FLAGS = &HF09F&
    End Enum

    Public Enum WinCredTypes
        CRED_TYPE_GENERIC = 1
        CRED_TYPE_DOMAIN_PASSWORD = 2
        CRED_TYPE_DOMAIN_CERTIFICATE = 3
        CRED_TYPE_DOMAIN_VISIBLE_PASSWORD = 4
        CRED_TYPE_GENERIC_CERTIFICATE = 5
        CRED_TYPE_DOMAIN_EXTENDED = 6
        CRED_TYPE_MAXIMUM = 7  ' Maximum supported cred type
        CRED_TYPE_MAXIMUM_EX = (CRED_TYPE_MAXIMUM + 1000)  ' Allow new applications to run on old OSes
    End Enum

    Public Const CRED_MAX_CREDENTIAL_BLOB_SIZE = (5 * 512)

    Public Enum WinCredPersist
        CRED_PERSIST_NONE = 0
        CRED_PERSIST_SESSION = 1
        CRED_PERSIST_LOCAL_MACHINE = 2
        CRED_PERSIST_ENTERPRISE = 3
    End Enum

    Public Type CREDENTIALA
        Flags As WinCredFlags
        Type As WinCredTypes
        TargetName As String
        Comment As String
        LastWritten As FILETIME
        CredentialBlobSize As Long
        CredentialBlob As LongPtr 'LPBYTE
        Persist As WinCredPersist
        AttributeCount As Long
        Attributes As LongPtr 'PCREDENTIAL_ATTRIBUTEA
        TargetAlias As String
        UserName As String
    End Type
    Public Type CREDENTIALW
        Flags As WinCredFlags
        Type As WinCredTypes
        TargetName As LongPtr
        Comment As LongPtr
        LastWritten As FILETIME
        CredentialBlobSize As Long
        CredentialBlob As LongPtr 'LPBYTE
        Persist As WinCredPersist
        AttributeCount As Long
        Attributes As LongPtr 'PCREDENTIAL_ATTRIBUTEA
        TargetAlias As LongPtr
        UserName As LongPtr
    End Type
    'Alias CREDENTIAL as CREDENTIALW
    Public Type CREDENTIAL
        Flags As WinCredFlags
        Type As WinCredTypes
        TargetName As LongPtr
        Comment As LongPtr
        LastWritten As FILETIME
        CredentialBlobSize As Long
        CredentialBlob As LongPtr 'LPBYTE
        Persist As WinCredPersist
        AttributeCount As Long
        Attributes As LongPtr 'PCREDENTIAL_ATTRIBUTEA
        TargetAlias As LongPtr
        UserName As LongPtr
    End Type

    Public Enum WinCredTargetFlags
        CRED_TI_SERVER_FORMAT_UNKNOWN = &H0001  ' Don't know if server name is DNS or netbios format
        CRED_TI_DOMAIN_FORMAT_UNKNOWN = &H0002  ' Don't know if domain name is DNS or netbios format
        CRED_TI_ONLY_PASSWORD_REQUIRED = &H0004  ' Server only requires a password and not a username
        CRED_TI_USERNAME_TARGET = &H0008  ' TargetName is username
        CRED_TI_CREATE_EXPLICIT_CRED = &H0010  ' When creating a cred, create one named TargetInfo->TargetName
        CRED_TI_WORKGROUP_MEMBER = &H0020  ' Indicates the machine is a member of a workgroup
        CRED_TI_DNSTREE_IS_DFS_SERVER = &H0040  ' used to tell credman that the DNSTreeName could be DFS server
        CRED_TI_VALID_FLAGS = &HF07F&
    End Enum

    Public Type CREDENTIAL_TARGET_INFORMATIONA
        TargetName As String
        NetbiosServerName As String
        DnsServerName As String
        NetbiosDomainName As String
        DnsDomainName As String
        DnsTreeName As String
        PackageName As String
        Flags As WinCredTargetFlags
        CredTypeCount As Long
        CredTypes As LongPtr 'PWinCredTypes
    End Type
    Public Type CREDENTIAL_TARGET_INFORMATIONW
        TargetName As LongPtr
        NetbiosServerName As LongPtr
        DnsServerName As LongPtr
        NetbiosDomainName As LongPtr
        DnsDomainName As LongPtr
        DnsTreeName As LongPtr
        PackageName As LongPtr
        Flags As WinCredTargetFlags
        CredTypeCount As Long
        CredTypes As LongPtr 'PWinCredTypes
    End Type
    'Alias CREDENTIAL_TARGET_INFORMATION as CREDENTIAL_TARGET_INFORMATIONW
    Public Type CREDENTIAL_TARGET_INFORMATION
        TargetName As LongPtr
        NetbiosServerName As LongPtr
        DnsServerName As LongPtr
        NetbiosDomainName As LongPtr
        DnsDomainName As LongPtr
        DnsTreeName As LongPtr
        PackageName As LongPtr
        Flags As WinCredTargetFlags
        CredTypeCount As Long
        CredTypes As LongPtr 'PWinCredTypes
    End Type

    Public Const CERT_HASH_LENGTH = 20
    Public Type CERT_CREDENTIAL_INFO
        cbSize As Long
        rgbHashOfCert(0 To (CERT_HASH_LENGTH - 1)) As Byte
    End Type

    Public Type USERNAME_TARGET_CREDENTIAL_INFO
        UserName As LongPtr
    End Type

    Public Type BINARY_BLOB_CREDENTIAL_INFO
        cbBlob As Long
        pbBlob As LongPtr 'LPBYTE
    End Type

    Public Enum CRED_MARSHAL_TYPE
        CertCredential = 1
        UsernameTargetCredential
        BinaryBlobCredential
        UsernameForPackedCredentials = 4 ' internal only, reserved
        BinaryBlobForSystem = 5 ' internal only, via CredProtectEx
    End Enum

    Public Enum CRED_PROTECTION_TYPE
        CredUnprotected
        CredUserProtection
        CredTrustedProtection
        CredForSystemProtection
    End Enum

    Public Enum WinCredPackingFlags
        CRED_PACK_PROTECTED_CREDENTIALS = &H1
        CRED_PACK_WOW_BUFFER = &H2
        CRED_PACK_GENERIC_CREDENTIALS = &H4
        CRED_PACK_ID_PROVIDER_CREDENTIALS = &H8
    End Enum

    Public Type CREDUI_INFOA
        cbSize As Long
        hwndParent As LongPtr
        pszMessageText As String
        pszCaptionText As String
        hbmBanner As LongPtr
    End Type
    Public Type CREDUI_INFOW
        cbSize As Long
        hwndParent As LongPtr
        pszMessageText As LongPtr
        pszCaptionText As LongPtr
        hbmBanner As LongPtr
    End Type
    'Alias CREDUI_INFO As CREDUI_INFOW
    Public Type CREDUI_INFO
        cbSize As Long
        hwndParent As LongPtr
        pszMessageText As LongPtr
        pszCaptionText As LongPtr
        hbmBanner As LongPtr
    End Type

    Public Const CREDUI_MAX_MESSAGE_LENGTH  = 1024
    Public Const CREDUI_MAX_CAPTION_LENGTH  = 128
    Public Const CREDUI_MAX_GENERIC_TARGET_LENGTH  = CRED_MAX_GENERIC_TARGET_NAME_LENGTH
    Public Const CREDUI_MAX_DOMAIN_TARGET_LENGTH  = CRED_MAX_DOMAIN_TARGET_NAME_LENGTH
    '   Username can be in <domain>\<user> or <user>@<domain>
    '   Length in characters, not including NULL termination.
    Public Const CREDUI_MAX_USERNAME_LENGTH  = CRED_MAX_USERNAME_LENGTH
    Public Const CREDUI_MAX_PASSWORD_LENGTH  = (512 / 2)
    '   Packed credential returned by SspiEncodeAuthIdentityAsStrings().
    '   Length in characters, not including NULL termination.
    Public Const CREDUI_MAX_PACKED_CREDENTIALS_LENGTH  = ((MAXUSHORT / 2) - 2)
    '  maximum length in bytes for binary credential blobs
    Public Const CREDUI_MAX_CREDENTIALS_BLOB_SIZE  = (MAXUSHORT)

    Public Enum WinCredPromptFlags
        CREDUI_FLAGS_INCORRECT_PASSWORD = &H00001  ' indicates the username is valid, but password is not
        CREDUI_FLAGS_DO_NOT_PERSIST = &H00002  ' Do not show "Save" checkbox, and do not persist credentials
        CREDUI_FLAGS_REQUEST_ADMINISTRATOR = &H00004  ' Populate list box with admin accounts
        CREDUI_FLAGS_EXCLUDE_CERTIFICATES = &H00008  ' do not include certificates in the drop list
        CREDUI_FLAGS_REQUIRE_CERTIFICATE = &H00010
        CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX = &H00040
        CREDUI_FLAGS_ALWAYS_SHOW_UI = &H00080
        CREDUI_FLAGS_REQUIRE_SMARTCARD = &H00100
        CREDUI_FLAGS_PASSWORD_ONLY_OK = &H00200
        CREDUI_FLAGS_VALIDATE_USERNAME = &H00400
        CREDUI_FLAGS_COMPLETE_USERNAME = &H00800  '
        CREDUI_FLAGS_PERSIST = &H01000  ' Do not show "Save" checkbox, but persist credentials anyway
        CREDUI_FLAGS_SERVER_CREDENTIAL = &H04000
        CREDUI_FLAGS_EXPECT_CONFIRMATION = &H20000  ' do not persist unless caller later confirms credential via CredUIConfirmCredential() api
        CREDUI_FLAGS_GENERIC_CREDENTIALS = &H40000  ' Credential is a generic credential
        CREDUI_FLAGS_USERNAME_TARGET_CREDENTIALS = &H80000  ' Credential has a username as the target
        CREDUI_FLAGS_KEEP_USERNAME = &H100000  ' don't allow the user to change the supplied username
    
        CREDUI_FLAGS_PROMPT_VALID = (CREDUI_FLAGS_INCORRECT_PASSWORD Or CREDUI_FLAGS_DO_NOT_PERSIST Or CREDUI_FLAGS_REQUEST_ADMINISTRATOR Or CREDUI_FLAGS_EXCLUDE_CERTIFICATES Or CREDUI_FLAGS_REQUIRE_CERTIFICATE Or CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX Or CREDUI_FLAGS_ALWAYS_SHOW_UI Or CREDUI_FLAGS_REQUIRE_SMARTCARD Or CREDUI_FLAGS_PASSWORD_ONLY_OK Or CREDUI_FLAGS_VALIDATE_USERNAME Or CREDUI_FLAGS_COMPLETE_USERNAME Or CREDUI_FLAGS_PERSIST Or CREDUI_FLAGS_SERVER_CREDENTIAL Or CREDUI_FLAGS_EXPECT_CONFIRMATION Or CREDUI_FLAGS_GENERIC_CREDENTIALS Or CREDUI_FLAGS_USERNAME_TARGET_CREDENTIALS Or CREDUI_FLAGS_KEEP_USERNAME)
    End Enum


    Public Enum CredUiWriteFlags
        CRED_PRESERVE_CREDENTIAL_BLOB = &H1
    End Enum

    Public Enum WinCredEnumFlags
        CRED_ENUMERATE_ALL_CREDENTIALS = &H1
    End Enum

    Public Enum WinCredReadDomainFlags
        CRED_CACHE_TARGET_INFORMATION = &H1
    End Enum

    Public Enum WinCredGetTargetFlags
        CRED_ALLOW_NAME_RESOLUTION = &H1
    End Enum

    Public Enum WinCredProtectExFlags
        CRED_PROTECT_AS_SELF = &H1
        CRED_PROTECT_TO_SYSTEM = &H2
        CRED_PROTECT_VALID_FLAGS = (CRED_PROTECT_AS_SELF Or CRED_PROTECT_TO_SYSTEM)
    End Enum

    Public Enum WinCredUnprotectExFlags
        CRED_UNPROTECT_AS_SELF = &H1
        CRED_UNPROTECT_ALLOW_TO_SYSTEM = &H2
        CRED_UNPROTECT_VALID_FLAGS = (CRED_UNPROTECT_AS_SELF Or CRED_UNPROTECT_ALLOW_TO_SYSTEM)
    End Enum

    Public Declare PtrSafe Function CredWriteA Lib "advapi32" (Credential As CREDENTIALA, ByVal dwFlags As CredUiWriteFlags) As BOOL
    Public Declare PtrSafe Function CredWriteW Lib "advapi32" (Credential As CREDENTIALW, ByVal dwFlags As CredUiWriteFlags) As BOOL
    Public DeclareWide PtrSafe Function CredWrite Lib "advapi32" Alias "CredWriteW" (Credential As CREDENTIAL, ByVal dwFlags As CredUiWriteFlags) As BOOL
    Public Declare PtrSafe Function CredReadA Lib "advapi32" (ByVal TargetName As String, ByVal nType As WinCredTypes, ByVal Flags As Long, Credential As LongPtr) As BOOL
    Public Declare PtrSafe Function CredReadW Lib "advapi32" (ByVal TargetName As LongPtr, ByVal nType As WinCredTypes, ByVal Flags As Long, Credential As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function CredRead Lib "advapi32" Alias "CredReadW" (ByVal TargetName As String, ByVal nType As WinCredTypes, ByVal Flags As Long, Credential As LongPtr) As BOOL
    Public Declare PtrSafe Function CredEnumerateA Lib "advapi32" (ByVal Filter As String, ByVal Flags As WinCredEnumFlags, Count As Long, Credential As LongPtr) As BOOL
    Public Declare PtrSafe Function CredEnumerateW Lib "advapi32" (ByVal Filter As LongPtr, ByVal Flags As WinCredEnumFlags, Count As Long, Credential As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function CredEnumerate Lib "advapi32" Alias "CredEnumerateW" (ByVal Filter As String, ByVal Flags As WinCredEnumFlags, Count As Long, Credential As LongPtr) As BOOL
    Public Declare PtrSafe Function CredWriteDomainCredentialsA Lib "advapi32" (TargetInfo As CREDENTIAL_TARGET_INFORMATIONA, Credential As CREDENTIALA, ByVal dwFlags As CredUiWriteFlags) As BOOL
    Public Declare PtrSafe Function CredWriteDomainCredentialsW Lib "advapi32" (TargetInfo As CREDENTIAL_TARGET_INFORMATIONW, Credential As CREDENTIALW, ByVal dwFlags As CredUiWriteFlags) As BOOL
    Public DeclareWide PtrSafe Function CredWriteDomainCredentials Lib "advapi32" Alias "CredWriteDomainCredentialsW" (TargetInfo As CREDENTIAL_TARGET_INFORMATION, Credential As CREDENTIAL, ByVal dwFlags As CredUiWriteFlags) As BOOL
    Public Declare PtrSafe Function CredReadDomainCredentialsA Lib "advapi32" (TargetInfo As CREDENTIAL_TARGET_INFORMATIONA, ByVal Flags As WinCredReadDomainFlags, Count As Long, Credential As LongPtr) As BOOL
    Public Declare PtrSafe Function CredReadDomainCredentialsW Lib "advapi32" (TargetInfo As CREDENTIAL_TARGET_INFORMATIONW, ByVal Flags As WinCredReadDomainFlags, Count As Long, Credential As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function CredReadDomainCredentials Lib "advapi32" Alias "CredReadDomainCredentialsW" (TargetInfo As CREDENTIAL_TARGET_INFORMATION, ByVal Flags As WinCredReadDomainFlags, Count As Long, Credential As LongPtr) As BOOL
    Public Declare PtrSafe Function CredDeleteA Lib "advapi32" (ByVal TargetName As String, ByVal nType As WinCredTypes, ByVal Flags As Long) As BOOL
    Public Declare PtrSafe Function CredDeleteW Lib "advapi32" (ByVal TargetName As LongPtr, ByVal nType As WinCredTypes, ByVal Flags As Long) As BOOL
    Public DeclareWide PtrSafe Function CredDelete Lib "advapi32" Alias "CredDeleteW" (ByVal TargetName As String, ByVal nType As WinCredTypes, ByVal Flags As Long) As BOOL
    Public Declare PtrSafe Function CredRenameA Lib "advapi32" (ByVal OldTargetName As String, ByVal NewTargetName As String, ByVal nType As WinCredTypes, ByVal Flags As Long) As BOOL
    Public Declare PtrSafe Function CredRenameW Lib "advapi32" (ByVal OldTargetName As LongPtr, ByVal NewTargetName As LongPtr, ByVal nType As WinCredTypes, ByVal Flags As Long) As BOOL
    Public DeclareWide PtrSafe Function CredRename Lib "advapi32" Alias "CredRenameW" (ByVal OldTargetName As String, ByVal NewTargetName As String, ByVal nType As WinCredTypes, ByVal Flags As Long) As BOOL
    Public Declare PtrSafe Function CredGetTargetInfoA Lib "advapi32" (ByVal TargetName As String, ByVal Flags As WinCredGetTargetFlags, TargetInfo As CREDENTIAL_TARGET_INFORMATIONA) As BOOL
    Public Declare PtrSafe Function CredGetTargetInfoW Lib "advapi32" (ByVal TargetName As LongPtr, ByVal Flags As WinCredGetTargetFlags, TargetInfo As CREDENTIAL_TARGET_INFORMATIONW) As BOOL
    Public DeclareWide PtrSafe Function CredGetTargetInfo Lib "advapi32" Alias "CredGetTargetInfoW" (ByVal TargetName As String, ByVal Flags As WinCredGetTargetFlags, TargetInfo As CREDENTIAL_TARGET_INFORMATION) As BOOL
    Public Declare PtrSafe Function CredMarshalCredentialA Lib "advapi32" (ByVal CredType As CRED_MARSHAL_TYPE, Credential As Any, MarshaledCredential As String) As BOOL
    Public Declare PtrSafe Function CredMarshalCredentialW Lib "advapi32" (ByVal CredType As CRED_MARSHAL_TYPE, Credential As Any, MarshaledCredential As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function CredMarshalCredential Lib "advapi32" Alias "CredMarshalCredentialW" (ByVal CredType As CRED_MARSHAL_TYPE, Credential As Any, MarshaledCredential As String) As BOOL
    Public Declare PtrSafe Function CredUnmarshalCredentialA Lib "advapi32" (ByVal MarshaledCredential As String, CredType As CRED_MARSHAL_TYPE, Credential As LongPtr) As BOOL
    Public Declare PtrSafe Function CredUnmarshalCredentialW Lib "advapi32" (ByVal MarshaledCredential As LongPtr, CredType As CRED_MARSHAL_TYPE, Credential As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function CredUnmarshalCredential Lib "advapi32" Alias "CredUnmarshalCredentialW" (ByVal MarshaledCredential As String, CredType As CRED_MARSHAL_TYPE, Credential As LongPtr) As BOOL
    Public Declare PtrSafe Function CredIsMarshaledCredentialA Lib "advapi32" (ByVal MarshaledCredential As String) As BOOL
    Public Declare PtrSafe Function CredIsMarshaledCredentialW Lib "advapi32" (ByVal MarshaledCredential As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function CredIsMarshaledCredential Lib "advapi32" Alias "CredIsMarshaledCredentialW" (ByVal MarshaledCredential As String) As BOOL
    Public Declare PtrSafe Function CredUnPackAuthenticationBufferA Lib "credui" (ByVal dwFlags As WinCredPackingFlags, pAuthBuffer As Any, ByVal cbAuthBuffer As Long, ByVal pszUserName As String, pcchlMaxUserName As Long, ByVal pszDomainName As String, pcchMaxDomainName As Long, ByVal pszPassword As String, pcchMaxPassword As Long) As BOOL
    Public Declare PtrSafe Function CredUnPackAuthenticationBufferW Lib "credui" (ByVal dwFlags As WinCredPackingFlags, pAuthBuffer As Any, ByVal cbAuthBuffer As Long, ByVal pszUserName As LongPtr, pcchlMaxUserName As Long, ByVal pszDomainName As LongPtr, pcchMaxDomainName As Long, ByVal pszPassword As LongPtr, pcchMaxPassword As Long) As BOOL
    Public DeclareWide PtrSafe Function CredUnPackAuthenticationBuffer Lib "credui" Alias "CredUnPackAuthenticationBufferW" (ByVal dwFlags As WinCredPackingFlags, pAuthBuffer As Any, ByVal cbAuthBuffer As Long, ByVal pszUserName As String, pcchlMaxUserName As Long, ByVal pszDomainName As String, pcchMaxDomainName As Long, ByVal pszPassword As String, pcchMaxPassword As Long) As BOOL
    Public Declare PtrSafe Function CredPackAuthenticationBufferA Lib "credui" (ByVal dwFlags As WinCredPackingFlags, ByVal pszUserName As String, ByVal pszPassword As String, pPackedCredentials As Any, pcbPackedCredentials As Long) As BOOL
    Public Declare PtrSafe Function CredPackAuthenticationBufferW Lib "credui" (ByVal dwFlags As WinCredPackingFlags, ByVal pszUserName As LongPtr, ByVal pszPassword As LongPtr, pPackedCredentials As Any, pcbPackedCredentials As Long) As BOOL
    Public DeclareWide PtrSafe Function CredPackAuthenticationBuffer Lib "credui" Alias "CredPackAuthenticationBufferW" (ByVal dwFlags As WinCredPackingFlags, ByVal pszUserName As String, ByVal pszPassword As String, pPackedCredentials As Any, pcbPackedCredentials As Long) As BOOL
    Public Declare PtrSafe Function CredProtectA Lib "advapi32" (ByVal fAsSelf As BOOL, ByVal pszCredentials As String, ByVal cchCredentials As Long, ByVal pszProtectedCredentials As String, pcchMaxChars As Long, ProtectionType As CRED_PROTECTION_TYPE) As BOOL
    Public Declare PtrSafe Function CredProtectW Lib "advapi32" (ByVal fAsSelf As BOOL, ByVal pszCredentials As LongPtr, ByVal cchCredentials As Long, ByVal pszProtectedCredentials As LongPtr, pcchMaxChars As Long, ProtectionType As CRED_PROTECTION_TYPE) As BOOL
    Public DeclareWide PtrSafe Function CredProtect Lib "advapi32" Alias "CredProtectW" (ByVal fAsSelf As BOOL, ByVal pszCredentials As String, ByVal cchCredentials As Long, ByVal pszProtectedCredentials As String, pcchMaxChars As Long, ProtectionType As CRED_PROTECTION_TYPE) As BOOL
    Public DeclareWide PtrSafe Function CredProtectEx Lib "sechost" (ByVal Flags As WinCredProtectExFlags, ByVal pszCredentials As String, ByVal cchCredentials As Long, ByVal pszProtectedCredentials As String, pcchMaxChars As Long, ProtectionType As CRED_PROTECTION_TYPE) As BOOL
    Public Declare PtrSafe Function CredUnprotectA Lib "advapi32" (ByVal fAsSelf As BOOL, ByVal pszProtectedCredentials As String, ByVal cchProtectedCredentials As Long, ByVal pszCredentials As String, pcchMaxChars As Long) As BOOL
    Public Declare PtrSafe Function CredUnprotectW Lib "advapi32" (ByVal fAsSelf As BOOL, ByVal pszProtectedCredentials As LongPtr, ByVal cchProtectedCredentials As Long, ByVal pszCredentials As LongPtr, pcchMaxChars As Long) As BOOL
    Public DeclareWide PtrSafe Function CredUnprotect Lib "advapi32" Alias "CredUnprotectW" (ByVal fAsSelf As BOOL, ByVal pszProtectedCredentials As String, ByVal cchProtectedCredentials As Long, ByVal pszCredentials As String, pcchMaxChars As Long) As BOOL
    Public DeclareWide PtrSafe Function CredUnprotectEx Lib "sechost" (ByVal Flags As WinCredUnprotectExFlags, ByVal pszProtectedCredentials As String, ByVal cchProtectedCredentials As Long, ByVal pszCredentials As String, pcchMaxChars As Long) As BOOL
    Public Declare PtrSafe Function CredIsProtectedA Lib "advapi32" (ByVal pszCredentials As String, ProtectionType As CRED_PROTECTION_TYPE) As BOOL
    Public Declare PtrSafe Function CredIsProtectedW Lib "advapi32" (ByVal pszCredentials As LongPtr, ProtectionType As CRED_PROTECTION_TYPE) As BOOL
    Public DeclareWide PtrSafe Function CredIsProtected Lib "advapi32" Alias "CredIsProtectedW" (ByVal pszCredentials As String, ProtectionType As CRED_PROTECTION_TYPE) As BOOL
    Public Declare PtrSafe Function CredFindBestCredentialA Lib "advapi32" (ByVal TargetName As String, ByVal nType As WinCredTypes, ByVal Flags As Long, Credential As LongPtr) As BOOL
    Public Declare PtrSafe Function CredFindBestCredentialW Lib "advapi32" (ByVal TargetName As LongPtr, ByVal nType As WinCredTypes, ByVal Flags As Long, Credential As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function CredFindBestCredential Lib "advapi32" Alias "CredFindBestCredentialW" (ByVal TargetName As String, ByVal nType As WinCredTypes, ByVal Flags As Long, Credential As LongPtr) As BOOL
    Public Declare PtrSafe Function CredGetSessionTypes Lib "advapi32" (ByVal MaximumPersistCount As Long, MaximumPersist As Long) As BOOL
    Public Declare PtrSafe Sub CredFree Lib "advapi32" (ByVal Buffer As LongPtr)
    Public Declare PtrSafe Function CredUIPromptForCredentialsA Lib "credui.dll" (pUiInfo As CREDUI_INFOA, ByVal pszTargetName As String, ByVal pContext As LongPtr, ByVal dwAuthError As Long, ByVal pszUserName As String, ByVal ulUserNameBufferSize As Long, ByVal pszPassword As String, ByVal ulPasswordBufferSize As Long, save As BOOL, ByVal dwFlags As WinCredPromptFlags) As Long
    Public Declare PtrSafe Function CredUIPromptForCredentialsW Lib "credui.dll" (pUiInfo As CREDUI_INFOW, ByVal pszTargetName As LongPtr, ByVal pContext As LongPtr, ByVal dwAuthError As Long, ByVal pszUserName As LongPtr, ByVal ulUserNameBufferSize As Long, ByVal pszPassword As LongPtr, ByVal ulPasswordBufferSize As Long, save As BOOL, ByVal dwFlags As WinCredPromptFlags) As Long
    Public DeclareWide PtrSafe Function CredUIPromptForCredentials Lib "credui.dll" Alias "CredUIPromptForCredentialsW" (pUiInfo As CREDUI_INFO, ByVal pszTargetName As String, ByVal pContext As LongPtr, ByVal dwAuthError As Long, ByVal pszUserName As String, ByVal ulUserNameBufferSize As Long, ByVal pszPassword As String, ByVal ulPasswordBufferSize As Long, save As BOOL, ByVal dwFlags As WinCredPromptFlags) As Long
    Public Declare PtrSafe Function CredUIPromptForWindowsCredentialsA Lib "credui.dll" (pUiInfo As CREDUI_INFOA, ByVal dwAuthError As Long, pulAuthPackage As Long, pvInAuthBuffer As Any, ByVal ulInAuthBufferSize As Long, ppvOutAuthBuffer As LongPtr, pulOutAuthBufferSize As Long, pfSave As BOOL, ByVal dwFlags As CREDENTIAL_USAGE_SCENARIO) As Long
    Public Declare PtrSafe Function CredUIPromptForWindowsCredentialsW Lib "credui.dll" (pUiInfo As CREDUI_INFOW, ByVal dwAuthError As Long, pulAuthPackage As Long, pvInAuthBuffer As Any, ByVal ulInAuthBufferSize As Long, ppvOutAuthBuffer As LongPtr, pulOutAuthBufferSize As Long, pfSave As BOOL, ByVal dwFlags As CREDENTIAL_USAGE_SCENARIO) As Long
    Public DeclareWide PtrSafe Function CredUIPromptForWindowsCredentials Lib "credui.dll" Alias "CredUIPromptForWindowsCredentialsW" (pUiInfo As CREDUI_INFO, ByVal dwAuthError As Long, pulAuthPackage As Long, pvInAuthBuffer As Any, ByVal ulInAuthBufferSize As Long, ppvOutAuthBuffer As LongPtr, pulOutAuthBufferSize As Long, pfSave As BOOL, ByVal dwFlags As CREDENTIAL_USAGE_SCENARIO) As Long
    Public Declare PtrSafe Function CredUIParseUserNameA Lib "credui.dll" (ByVal userName As String, ByVal user As String, ByVal userBufferSize As Long, ByVal domain As String, ByVal domainBufferSize As Long) As Long
    Public Declare PtrSafe Function CredUIParseUserNameW Lib "credui.dll" (ByVal userName As LongPtr, ByVal user As LongPtr, ByVal userBufferSize As Long, ByVal domain As LongPtr, ByVal domainBufferSize As Long) As Long
    Public DeclareWide PtrSafe Function CredUIParseUserName Lib "credui.dll" Alias "CredUIParseUserNameW" (ByVal userName As String, ByVal user As String, ByVal userBufferSize As Long, ByVal domain As String, ByVal domainBufferSize As Long) As Long
    Public Declare PtrSafe Function CredUICmdLinePromptForCredentialsA Lib "credui.dll" (ByVal pszTargetName As String, ByVal pContext As LongPtr, ByVal dwAuthError As Long, ByVal UserName As String, ByVal ulUserNameBufferSize As Long, ByVal pszPassword As String, ByVal ulPasswordBufferSize As Long, pfSave As BOOL, ByVal dwFlags As WinCredPromptFlags) As Long
    Public Declare PtrSafe Function CredUICmdLinePromptForCredentialsW Lib "credui.dll" (ByVal pszTargetName As LongPtr, ByVal pContext As LongPtr, ByVal dwAuthError As Long, ByVal UserName As LongPtr, ByVal ulUserNameBufferSize As Long, ByVal pszPassword As LongPtr, ByVal ulPasswordBufferSize As Long, pfSave As BOOL, ByVal dwFlags As WinCredPromptFlags) As Long
    Public DeclareWide PtrSafe Function CredUICmdLinePromptForCredentials Lib "credui.dll" Alias "CredUICmdLinePromptForCredentialsW" (ByVal pszTargetName As String, ByVal pContext As LongPtr, ByVal dwAuthError As Long, ByVal UserName As String, ByVal ulUserNameBufferSize As Long, ByVal pszPassword As String, ByVal ulPasswordBufferSize As Long, pfSave As BOOL, ByVal dwFlags As WinCredPromptFlags) As Long
    Public Declare PtrSafe Function CredUIConfirmCredentialsA Lib "credui.dll" (ByVal pszTargetName As String, ByVal bConfirm As BOOL) As Long
    Public Declare PtrSafe Function CredUIConfirmCredentialsW Lib "credui.dll" (ByVal pszTargetName As LongPtr, ByVal bConfirm As BOOL) As Long
    Public DeclareWide PtrSafe Function CredUIConfirmCredentials Lib "credui.dll" Alias "CredUIConfirmCredentialsW" (ByVal pszTargetName As String, ByVal bConfirm As BOOL) As Long
    Public DeclareWide PtrSafe Function CredUIStoreSSOCredW Lib "credui.dll" (ByVal pszRealm As String, ByVal pszUsername As String, ByVal pszPassword As String, ByVal bPersist As BOOL) As Long
    Public DeclareWide PtrSafe Function CredUIStoreSSOCredW Lib "credui.dll" (ByVal pszRealm As LongPtr, ByVal pszUsername As LongPtr, ByVal pszPassword As LongPtr, ByVal bPersist As BOOL) As Long
    Public DeclareWide PtrSafe Function CredUIReadSSOCredW Lib "credui.dll" (ByVal pszRealm As String, ppszUsername As LongPtr) As Long
    Public DeclareWide PtrSafe Function CredUIReadSSOCredW Lib "credui.dll" (ByVal pszRealm As LongPtr, ppszUsername As LongPtr) As Long
    
    		
	#End Region
	
    #Region "crypt32"
    'wincrypt.h has 100% coverage through the end of advapi32.dll definitions; line 1568 of SDK v10.0.25309.0
    'in the advapi32->crypto region. Includes bcrypt.h and ncrypt.h are 100% covered in their respective regions.

    Public Type CRYPT_OBJID_TABLE
        dwAlgId As ALG_ID
        pszObjId As LongPtr
    End Type

    Public Type CRYPT_HASH_INFO
        HashAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        Hash As CRYPT_HASH_BLOB
    End Type




    Public Enum CRYPT_STRING_OPTIONS
        CRYPT_STRING_BASE64HEADER = &H00000000
        CRYPT_STRING_BASE64 = &H00000001
        CRYPT_STRING_BINARY = &H00000002
        CRYPT_STRING_BASE64REQUESTHEADER = &H00000003
        CRYPT_STRING_HEX = &H00000004
        CRYPT_STRING_HEXASCII = &H00000005
        CRYPT_STRING_BASE64_ANY = &H00000006
        CRYPT_STRING_ANY = &H00000007
        CRYPT_STRING_HEX_ANY = &H00000008
        CRYPT_STRING_BASE64X509CRLHEADER = &H00000009
        CRYPT_STRING_HEXADDR = &H0000000a
        CRYPT_STRING_HEXASCIIADDR = &H0000000b
        CRYPT_STRING_HEXRAW = &H0000000c
        CRYPT_STRING_BASE64URI = &H0000000d
        CRYPT_STRING_ENCODEMASK = &H000000ff
        CRYPT_STRING_RESERVED100 = &H00000100
        CRYPT_STRING_RESERVED200 = &H00000200
        CRYPT_STRING_PERCENTESCAPE = &H08000000  ' base64 formats only
        CRYPT_STRING_HASHDATA = &H10000000
        CRYPT_STRING_STRICT = &H20000000
        CRYPT_STRING_NOCRLF = &H40000000
        CRYPT_STRING_NOCR = &H80000000
    End Enum

    Public Enum CRYPT_QUERY_OBJ_TYPE
        CERT_QUERY_OBJECT_FILE = &H00000001
        CERT_QUERY_OBJECT_BLOB = &H00000002
    End Enum
    Public Enum CRYPT_QUERY_CONTENT_TYPE
        CERT_QUERY_CONTENT_CERT = 1
    ' encoded single CTL
        CERT_QUERY_CONTENT_CTL = 2
    ' encoded single CRL
        CERT_QUERY_CONTENT_CRL = 3
    ' serialized store
        CERT_QUERY_CONTENT_SERIALIZED_STORE = 4
    ' serialized single certificate
        CERT_QUERY_CONTENT_SERIALIZED_CERT = 5
    ' serialized single CTL
        CERT_QUERY_CONTENT_SERIALIZED_CTL = 6
    ' serialized single CRL
        CERT_QUERY_CONTENT_SERIALIZED_CRL = 7
    ' a PKCS#7 signed message
        CERT_QUERY_CONTENT_PKCS7_SIGNED = 8
    ' a PKCS#7 message, such as enveloped message.  But it is not a signed message,
        CERT_QUERY_CONTENT_PKCS7_UNSIGNED = 9
    ' a PKCS7 signed message embedded in a file
        CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED = 10
    ' an encoded PKCS#10
        CERT_QUERY_CONTENT_PKCS10 = 11
    ' an encoded PFX BLOB
        CERT_QUERY_CONTENT_PFX = 12
    ' an encoded CertificatePair (contains forward and/or reverse cross certs)
        CERT_QUERY_CONTENT_CERT_PAIR = 13
    ' an encoded PFX BLOB, which was loaded to phCertStore
        CERT_QUERY_CONTENT_PFX_AND_LOAD = 14
    End Enum
    Public Enum CRYPT_QUERY_CONTENT_FLAGS
        CERT_QUERY_CONTENT_FLAG_CERT = (1 << CERT_QUERY_CONTENT_CERT)
    ' encoded single CTL
        CERT_QUERY_CONTENT_FLAG_CTL = (1 << CERT_QUERY_CONTENT_CTL)
    ' encoded single CRL
        CERT_QUERY_CONTENT_FLAG_CRL = (1 << CERT_QUERY_CONTENT_CRL)
    ' serialized store
        CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE = (1 << CERT_QUERY_CONTENT_SERIALIZED_STORE)
    ' serialized single certificate
        CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT = (1 << CERT_QUERY_CONTENT_SERIALIZED_CERT)
    ' serialized single CTL
        CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL = (1 << CERT_QUERY_CONTENT_SERIALIZED_CTL)
    ' serialized single CRL
        CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL = (1 << CERT_QUERY_CONTENT_SERIALIZED_CRL)
    ' an encoded PKCS#7 signed message
        CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED = (1 << CERT_QUERY_CONTENT_PKCS7_SIGNED)
    ' an encoded PKCS#7 message.  But it is not a signed message
        CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED = (1 << CERT_QUERY_CONTENT_PKCS7_UNSIGNED)
    ' the content includes an embedded PKCS7 signed message
        CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED = (1 << CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED)
    ' an encoded PKCS#10
        CERT_QUERY_CONTENT_FLAG_PKCS10 = (1 << CERT_QUERY_CONTENT_PKCS10)
    ' an encoded PFX BLOB
        CERT_QUERY_CONTENT_FLAG_PFX = (1 << CERT_QUERY_CONTENT_PFX)
    ' an encoded CertificatePair (contains forward and/or reverse cross certs)
        CERT_QUERY_CONTENT_FLAG_CERT_PAIR = (1 << CERT_QUERY_CONTENT_CERT_PAIR)
    ' an encoded PFX BLOB, and we do want to load it (not included in
    ' CERT_QUERY_CONTENT_FLAG_ALL)
        CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD = (1 << CERT_QUERY_CONTENT_PFX_AND_LOAD)
    ' content can be any type
        CERT_QUERY_CONTENT_FLAG_ALL = (CERT_QUERY_CONTENT_FLAG_CERT Or CERT_QUERY_CONTENT_FLAG_CTL Or CERT_QUERY_CONTENT_FLAG_CRL Or CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE Or CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT Or CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL Or CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL Or CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED Or CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED Or CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED Or CERT_QUERY_CONTENT_FLAG_PKCS10 Or CERT_QUERY_CONTENT_FLAG_PFX Or CERT_QUERY_CONTENT_FLAG_CERT_PAIR)
    ' content types allowed for Issuer certificates
        CERT_QUERY_CONTENT_FLAG_ALL_ISSUER_CERT = (CERT_QUERY_CONTENT_FLAG_CERT Or CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE Or CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT Or CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED Or CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED)
    End Enum
    Public Enum CRYPT_QUERY_FORMAT
        CERT_QUERY_FORMAT_BINARY = 1
    ' the content is base64 encoded
        CERT_QUERY_FORMAT_BASE64_ENCODED = 2
    ' the content is ascii hex encoded with "{ASN}" prefix
        CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED = 3
    End Enum
    Public Enum CRYPT_QUERY_FORMAT_TYPE_FLAGS
        CERT_QUERY_FORMAT_FLAG_BINARY = (1 << CERT_QUERY_FORMAT_BINARY)
    ' the content is base64 encoded
        CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED = (1 << CERT_QUERY_FORMAT_BASE64_ENCODED)
    ' the content is ascii hex encoded with "{ASN}" prefix
        CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED = (1 << CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED)
    ' the content can be of any format
        CERT_QUERY_FORMAT_FLAG_ALL = (CERT_QUERY_FORMAT_FLAG_BINARY Or CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED Or CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED)
    End Enum

    Public Enum CRYPT_CERT_ENCODING_TYPE
        CRYPT_ASN_ENCODING = &H00000001
        CRYPT_NDR_ENCODING = &H00000002
        X509_ASN_ENCODING = &H00000001
        X509_NDR_ENCODING = &H00000002
        PKCS_7_ASN_ENCODING = &H00010000
        PKCS_7_NDR_ENCODING = &H00020000
        CRYPT_MATCH_ANY_ENCODING_TYPE = -1
    End Enum

    Public Enum CERT_STORE_CLOSE_FLAGS
        CERT_CLOSE_STORE_FORCE_FLAG = &H00000001
        CERT_CLOSE_STORE_CHECK_FLAG = &H00000002
    End Enum

    Public Enum CRYPT_CMSG_PARAM_TYPE
        CMSG_TYPE_PARAM = 1
        CMSG_CONTENT_PARAM = 2
        CMSG_BARE_CONTENT_PARAM = 3
        CMSG_INNER_CONTENT_TYPE_PARAM = 4
        CMSG_SIGNER_COUNT_PARAM = 5
        CMSG_SIGNER_INFO_PARAM = 6
        CMSG_SIGNER_CERT_INFO_PARAM = 7
        CMSG_SIGNER_HASH_ALGORITHM_PARAM = 8
        CMSG_SIGNER_AUTH_ATTR_PARAM = 9
        CMSG_SIGNER_UNAUTH_ATTR_PARAM = 10
        CMSG_CERT_COUNT_PARAM = 11
        CMSG_CERT_PARAM = 12
        CMSG_CRL_COUNT_PARAM = 13
        CMSG_CRL_PARAM = 14
        CMSG_ENVELOPE_ALGORITHM_PARAM = 15
        CMSG_RECIPIENT_COUNT_PARAM = 17
        CMSG_RECIPIENT_INDEX_PARAM = 18
        CMSG_RECIPIENT_INFO_PARAM = 19
        CMSG_HASH_ALGORITHM_PARAM = 20
        CMSG_HASH_DATA_PARAM = 21
        CMSG_COMPUTED_HASH_PARAM = 22
        CMSG_ENCRYPT_PARAM = 26
        CMSG_ENCRYPTED_DIGEST = 27
        CMSG_ENCODED_SIGNER = 28
        CMSG_ENCODED_MESSAGE = 29
        CMSG_VERSION_PARAM = 30
        CMSG_ATTR_CERT_COUNT_PARAM = 31
        CMSG_ATTR_CERT_PARAM = 32
        CMSG_CMS_RECIPIENT_COUNT_PARAM = 33
        CMSG_CMS_RECIPIENT_INDEX_PARAM = 34
        CMSG_CMS_RECIPIENT_ENCRYPTED_KEY_INDEX_PARAM = 35
        CMSG_CMS_RECIPIENT_INFO_PARAM = 36
        CMSG_UNPROTECTED_ATTR_PARAM = 37
        CMSG_SIGNER_CERT_ID_PARAM = 38
        CMSG_CMS_SIGNER_INFO_PARAM = 39
    End Enum

    Public Type CRYPTOAPI_BLOB
        cbData As Long
        pbData As LongPtr
    End Type
    'Alias CRYPT_INTEGER_BLOB As CRYPTOAPI_BLOB
    'Alias CRYPT_UINT_BLOB As CRYPTOAPI_BLOB
    'Alias CRYPT_OBJID_BLOB As CRYPTOAPI_BLOB
    'Alias CERT_NAME_BLOB As CRYPTOAPI_BLOB
    'Alias CERT_RDN_VALUE_BLOB As CRYPTOAPI_BLOB
    'Alias CERT_BLOB As CRYPTOAPI_BLOB
    'Alias CRL_BLOB As CRYPTOAPI_BLOB
    'Alias DATA_BLOB As CRYPTOAPI_BLOB
    'Alias CRYPT_DATA_BLOB As CRYPTOAPI_BLOB
    'Alias CRYPT_HASH_BLOB As CRYPTOAPI_BLOB
    'Alias CRYPT_DIGEST_BLOB As CRYPTOAPI_BLOB
    'Alias CRYPT_DER_BLOB As CRYPTOAPI_BLOB
    'Alias CRYPT_ATTR_BLOB As CRYPTOAPI_BLOB
    Public Type CRYPT_INTEGER_BLOB
        cbData As Long
        pbData As LongPtr
    End Type
    Public Type CRYPT_UINT_BLOB
        cbData As Long
        pbData As LongPtr
    End Type
    Public Type CRYPT_OBJID_BLOB
        cbData As Long
        pbData As LongPtr
    End Type
    Public Type CERT_NAME_BLOB
        cbData As Long
        pbData As LongPtr
    End Type
    Public Type CERT_RDN_VALUE_BLOB
        cbData As Long
        pbData As LongPtr
    End Type
    Public Type CERT_BLOB
        cbData As Long
        pbData As LongPtr
    End Type
    Public Type CRL_BLOB
        cbData As Long
        pbData As LongPtr
    End Type
    Public Type DATA_BLOB
        cbData As Long
        pbData As LongPtr
    End Type
    Public Type CRYPT_DATA_BLOB
        cbData As Long
        pbData As LongPtr
    End Type
    Public Type CRYPT_HASH_BLOB
        cbData As Long
        pbData As LongPtr
    End Type
    Public Type CRYPT_DIGEST_BLOB
        cbData As Long
        pbData As LongPtr
    End Type
    Public Type CRYPT_DER_BLOB
        cbData As Long
        pbData As LongPtr
    End Type
    Public Type CRYPT_ATTR_BLOB
        cbData As Long
        pbData As LongPtr
    End Type


    Public Type CRYPT_ALGORITHM_IDENTIFIER
        pszObjId As String
        Parameters As CRYPT_OBJID_BLOB
    End Type

    Public Const szOID_RSA  = "1.2.840.113549"
    Public Const szOID_PKCS  = "1.2.840.113549.1"
    Public Const szOID_RSA_HASH  = "1.2.840.113549.2"
    Public Const szOID_RSA_ENCRYPT  = "1.2.840.113549.3"
    Public Const szOID_PKCS_1  = "1.2.840.113549.1.1"
    Public Const szOID_PKCS_2  = "1.2.840.113549.1.2"
    Public Const szOID_PKCS_3  = "1.2.840.113549.1.3"
    Public Const szOID_PKCS_4  = "1.2.840.113549.1.4"
    Public Const szOID_PKCS_5  = "1.2.840.113549.1.5"
    Public Const szOID_PKCS_6  = "1.2.840.113549.1.6"
    Public Const szOID_PKCS_7  = "1.2.840.113549.1.7"
    Public Const szOID_PKCS_8  = "1.2.840.113549.1.8"
    Public Const szOID_PKCS_9  = "1.2.840.113549.1.9"
    Public Const szOID_PKCS_10  = "1.2.840.113549.1.10"
    Public Const szOID_PKCS_12  = "1.2.840.113549.1.12"
    Public Const szOID_RSA_RSA  = "1.2.840.113549.1.1.1"
    Public Const szOID_RSA_MD2RSA  = "1.2.840.113549.1.1.2"
    Public Const szOID_RSA_MD4RSA  = "1.2.840.113549.1.1.3"
    Public Const szOID_RSA_MD5RSA  = "1.2.840.113549.1.1.4"
    Public Const szOID_RSA_SHA1RSA  = "1.2.840.113549.1.1.5"
    Public Const szOID_RSA_SETOAEP_RSA  = "1.2.840.113549.1.1.6"
    Public Const szOID_RSAES_OAEP  = "1.2.840.113549.1.1.7"
    Public Const szOID_RSA_MGF1  = "1.2.840.113549.1.1.8"
    Public Const szOID_RSA_PSPECIFIED  = "1.2.840.113549.1.1.9"
    Public Const szOID_RSA_SSA_PSS  = "1.2.840.113549.1.1.10"
    Public Const szOID_RSA_SHA256RSA  = "1.2.840.113549.1.1.11"
    Public Const szOID_RSA_SHA384RSA  = "1.2.840.113549.1.1.12"
    Public Const szOID_RSA_SHA512RSA  = "1.2.840.113549.1.1.13"
    Public Const szOID_RSA_DH  = "1.2.840.113549.1.3.1"
    Public Const szOID_RSA_data  = "1.2.840.113549.1.7.1"
    Public Const szOID_RSA_signedData  = "1.2.840.113549.1.7.2"
    Public Const szOID_RSA_envelopedData  = "1.2.840.113549.1.7.3"
    Public Const szOID_RSA_signEnvData  = "1.2.840.113549.1.7.4"
    Public Const szOID_RSA_digestedData  = "1.2.840.113549.1.7.5"
    Public Const szOID_RSA_hashedData  = "1.2.840.113549.1.7.5"
    Public Const szOID_RSA_encryptedData  = "1.2.840.113549.1.7.6"
    Public Const szOID_RSA_emailAddr  = "1.2.840.113549.1.9.1"
    Public Const szOID_RSA_unstructName  = "1.2.840.113549.1.9.2"
    Public Const szOID_RSA_contentType  = "1.2.840.113549.1.9.3"
    Public Const szOID_RSA_messageDigest  = "1.2.840.113549.1.9.4"
    Public Const szOID_RSA_signingTime  = "1.2.840.113549.1.9.5"
    Public Const szOID_RSA_counterSign  = "1.2.840.113549.1.9.6"
    Public Const szOID_RSA_challengePwd  = "1.2.840.113549.1.9.7"
    Public Const szOID_RSA_unstructAddr  = "1.2.840.113549.1.9.8"
    Public Const szOID_RSA_extCertAttrs  = "1.2.840.113549.1.9.9"
    Public Const szOID_RSA_certExtensions  = "1.2.840.113549.1.9.14"
    Public Const szOID_RSA_SMIMECapabilities  = "1.2.840.113549.1.9.15"
    Public Const szOID_RSA_preferSignedData  = "1.2.840.113549.1.9.15.1"
    Public Const szOID_TIMESTAMP_TOKEN  = "1.2.840.113549.1.9.16.1.4"
    Public Const szOID_RFC3161_counterSign  = "1.3.6.1.4.1.311.3.3.1"
    Public Const szOID_RFC3161v21_counterSign  = "1.3.6.1.4.1.311.3.3.2"
    Public Const szOID_RFC3161v21_thumbprints  = "1.3.6.1.4.1.311.3.3.3"
    Public Const szOID_RSA_SMIMEalg  = "1.2.840.113549.1.9.16.3"
    Public Const szOID_RSA_SMIMEalgESDH  = "1.2.840.113549.1.9.16.3.5"
    Public Const szOID_RSA_SMIMEalgCMS3DESwrap  = "1.2.840.113549.1.9.16.3.6"
    Public Const szOID_RSA_SMIMEalgCMSRC2wrap  = "1.2.840.113549.1.9.16.3.7"
    Public Const szOID_RSA_MD2  = "1.2.840.113549.2.2"
    Public Const szOID_RSA_MD4  = "1.2.840.113549.2.4"
    Public Const szOID_RSA_MD5  = "1.2.840.113549.2.5"
    Public Const szOID_RSA_RC2CBC  = "1.2.840.113549.3.2"
    Public Const szOID_RSA_RC4  = "1.2.840.113549.3.4"
    Public Const szOID_RSA_DES_EDE3_CBC  = "1.2.840.113549.3.7"
    Public Const szOID_RSA_RC5_CBCPad  = "1.2.840.113549.3.9"
    Public Const szOID_ANSI_X942  = "1.2.840.10046"
    Public Const szOID_ANSI_X942_DH  = "1.2.840.10046.2.1"
    Public Const szOID_X957  = "1.2.840.10040"
    Public Const szOID_X957_DSA  = "1.2.840.10040.4.1"
    Public Const szOID_X957_SHA1DSA  = "1.2.840.10040.4.3"
    '  iso(1) member-body(2) us(840) 10045 keyType(2) unrestricted(1)
    Public Const szOID_ECC_PUBLIC_KEY  = "1.2.840.10045.2.1"
    '  iso(1) member-body(2) us(840) 10045 curves(3) prime(1) 7
    Public Const szOID_ECC_CURVE_P256  = "1.2.840.10045.3.1.7"
    '  iso(1) identified-organization(3) certicom(132) curve(0) 34
    Public Const szOID_ECC_CURVE_P384  = "1.3.132.0.34"
    '  iso(1) identified-organization(3) certicom(132) curve(0) 35
    Public Const szOID_ECC_CURVE_P521  = "1.3.132.0.35"
    '  Generic ECC Curve OIDS
    Public Const szOID_ECC_CURVE_BRAINPOOLP160R1  = "1.3.36.3.3.2.8.1.1.1"
    Public Const szOID_ECC_CURVE_BRAINPOOLP160T1  = "1.3.36.3.3.2.8.1.1.2"
    Public Const szOID_ECC_CURVE_BRAINPOOLP192R1  = "1.3.36.3.3.2.8.1.1.3"
    Public Const szOID_ECC_CURVE_BRAINPOOLP192T1  = "1.3.36.3.3.2.8.1.1.4"
    Public Const szOID_ECC_CURVE_BRAINPOOLP224R1  = "1.3.36.3.3.2.8.1.1.5"
    Public Const szOID_ECC_CURVE_BRAINPOOLP224T1  = "1.3.36.3.3.2.8.1.1.6"
    Public Const szOID_ECC_CURVE_BRAINPOOLP256R1  = "1.3.36.3.3.2.8.1.1.7"
    Public Const szOID_ECC_CURVE_BRAINPOOLP256T1  = "1.3.36.3.3.2.8.1.1.8"
    Public Const szOID_ECC_CURVE_BRAINPOOLP320R1  = "1.3.36.3.3.2.8.1.1.9"
    Public Const szOID_ECC_CURVE_BRAINPOOLP320T1  = "1.3.36.3.3.2.8.1.1.10"
    Public Const szOID_ECC_CURVE_BRAINPOOLP384R1  = "1.3.36.3.3.2.8.1.1.11"
    Public Const szOID_ECC_CURVE_BRAINPOOLP384T1  = "1.3.36.3.3.2.8.1.1.12"
    Public Const szOID_ECC_CURVE_BRAINPOOLP512R1  = "1.3.36.3.3.2.8.1.1.13"
    Public Const szOID_ECC_CURVE_BRAINPOOLP512T1  = "1.3.36.3.3.2.8.1.1.14"
    Public Const szOID_ECC_CURVE_EC192WAPI  = "1.2.156.11235.1.1.2.1"
    Public Const szOID_CN_ECDSA_SHA256  = "1.2.156.11235.1.1.1"
    Public Const szOID_ECC_CURVE_NISTP192  = "1.2.840.10045.3.1.1"
    Public Const szOID_ECC_CURVE_NISTP224  = "1.3.132.0.33"
    Public Const szOID_ECC_CURVE_NISTP256  = szOID_ECC_CURVE_P256
    Public Const szOID_ECC_CURVE_NISTP384  = szOID_ECC_CURVE_P384
    Public Const szOID_ECC_CURVE_NISTP521  = szOID_ECC_CURVE_P521
    Public Const szOID_ECC_CURVE_SECP160K1  = "1.3.132.0.9"
    Public Const szOID_ECC_CURVE_SECP160R1  = "1.3.132.0.8"
    Public Const szOID_ECC_CURVE_SECP160R2  = "1.3.132.0.30"
    Public Const szOID_ECC_CURVE_SECP192K1  = "1.3.132.0.31"
    Public Const szOID_ECC_CURVE_SECP192R1  = szOID_ECC_CURVE_NISTP192
    Public Const szOID_ECC_CURVE_SECP224K1  = "1.3.132.0.32"
    Public Const szOID_ECC_CURVE_SECP224R1  = szOID_ECC_CURVE_NISTP224
    Public Const szOID_ECC_CURVE_SECP256K1  = "1.3.132.0.10"
    Public Const szOID_ECC_CURVE_SECP256R1  = szOID_ECC_CURVE_P256
    Public Const szOID_ECC_CURVE_SECP384R1  = szOID_ECC_CURVE_P384
    Public Const szOID_ECC_CURVE_SECP521R1  = szOID_ECC_CURVE_P521
    Public Const szOID_ECC_CURVE_WTLS7  = szOID_ECC_CURVE_SECP160R2
    Public Const szOID_ECC_CURVE_WTLS9  = "2.23.43.1.4.9"
    Public Const szOID_ECC_CURVE_WTLS12  = szOID_ECC_CURVE_NISTP224
    Public Const szOID_ECC_CURVE_X962P192V1  = "1.2.840.10045.3.1.1"
    Public Const szOID_ECC_CURVE_X962P192V2  = "1.2.840.10045.3.1.2"
    Public Const szOID_ECC_CURVE_X962P192V3  = "1.2.840.10045.3.1.3"
    Public Const szOID_ECC_CURVE_X962P239V1  = "1.2.840.10045.3.1.4"
    Public Const szOID_ECC_CURVE_X962P239V2  = "1.2.840.10045.3.1.5"
    Public Const szOID_ECC_CURVE_X962P239V3  = "1.2.840.10045.3.1.6"
    Public Const szOID_ECC_CURVE_X962P256V1  = szOID_ECC_CURVE_P256
    '  iso(1) member-body(2) us(840) 10045 signatures(4) sha1(1)
    Public Const szOID_ECDSA_SHA1  = "1.2.840.10045.4.1"
    '  iso(1) member-body(2) us(840) 10045 signatures(4) specified(3)
    Public Const szOID_ECDSA_SPECIFIED  = "1.2.840.10045.4.3"
    '  iso(1) member-body(2) us(840) 10045 signatures(4) specified(3) 2
    Public Const szOID_ECDSA_SHA256  = "1.2.840.10045.4.3.2"
    '  iso(1) member-body(2) us(840) 10045 signatures(4) specified(3) 3
    Public Const szOID_ECDSA_SHA384  = "1.2.840.10045.4.3.3"
    '  iso(1) member-body(2) us(840) 10045 signatures(4) specified(3) 4
    Public Const szOID_ECDSA_SHA512  = "1.2.840.10045.4.3.4"
    '  NIST AES CBC Algorithms
    '  joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101) csor(3) nistAlgorithms(4)  aesAlgs(1) }
    Public Const szOID_NIST_AES128_CBC  = "2.16.840.1.101.3.4.1.2"
    Public Const szOID_NIST_AES192_CBC  = "2.16.840.1.101.3.4.1.22"
    Public Const szOID_NIST_AES256_CBC  = "2.16.840.1.101.3.4.1.42"
    '  For the above Algorithms, the AlgorithmIdentifier parameters must be
    '  present and the parameters field MUST contain an AES-IV:
    '   AES-IV ::= OCTET STRING (SIZE(16))
    '  NIST AES WRAP Algorithms
    Public Const szOID_NIST_AES128_WRAP  = "2.16.840.1.101.3.4.1.5"
    Public Const szOID_NIST_AES192_WRAP  = "2.16.840.1.101.3.4.1.25"
    Public Const szOID_NIST_AES256_WRAP  = "2.16.840.1.101.3.4.1.45"
    '       x9-63-scheme OBJECT IDENTIFIER ::= { iso(1)
    '          identified-organization(3) tc68(133) country(16) x9(840)
    '          x9-63(63) schemes(0) }
    '  ECDH single pass ephemeral-static KeyAgreement KeyEncryptionAlgorithm
    Public Const szOID_DH_SINGLE_PASS_STDDH_SHA1_KDF  = "1.3.133.16.840.63.0.2"
    Public Const szOID_DH_SINGLE_PASS_STDDH_SHA256_KDF  = "1.3.132.1.11.1"
    Public Const szOID_DH_SINGLE_PASS_STDDH_SHA384_KDF  = "1.3.132.1.11.2"
    '  For the above KeyEncryptionAlgorithm the following wrap algorithms are
    '  supported:
    '   szOID_RSA_SMIMEalgCMS3DESwrap
    '   szOID_RSA_SMIMEalgCMSRC2wrap
    '   szOID_NIST_AES128_WRAP
    '   szOID_NIST_AES192_WRAP
    '   szOID_NIST_AES256_WRAP
    '  ITU-T UsefulDefinitions
    Public Const szOID_DS  = "2.5"
    Public Const szOID_DSALG  = "2.5.8"
    Public Const szOID_DSALG_CRPT  = "2.5.8.1"
    Public Const szOID_DSALG_HASH  = "2.5.8.2"
    Public Const szOID_DSALG_SIGN  = "2.5.8.3"
    Public Const szOID_DSALG_RSA  = "2.5.8.1.1"
    '  NIST OSE Implementors' Workshop (OIW)
    '  http://nemo.ncsl.nist.gov/oiw/agreements/stable/OSI/12s_9506.w51
    '  http://nemo.ncsl.nist.gov/oiw/agreements/working/OSI/12w_9503.w51
    Public Const szOID_OIW  = "1.3.14"
    '  NIST OSE Implementors' Workshop (OIW) Security SIG algorithm identifiers
    Public Const szOID_OIWSEC  = "1.3.14.3.2"
    Public Const szOID_OIWSEC_md4RSA  = "1.3.14.3.2.2"
    Public Const szOID_OIWSEC_md5RSA  = "1.3.14.3.2.3"
    Public Const szOID_OIWSEC_md4RSA2  = "1.3.14.3.2.4"
    Public Const szOID_OIWSEC_desECB  = "1.3.14.3.2.6"
    Public Const szOID_OIWSEC_desCBC  = "1.3.14.3.2.7"
    Public Const szOID_OIWSEC_desOFB  = "1.3.14.3.2.8"
    Public Const szOID_OIWSEC_desCFB  = "1.3.14.3.2.9"
    Public Const szOID_OIWSEC_desMAC  = "1.3.14.3.2.10"
    Public Const szOID_OIWSEC_rsaSign  = "1.3.14.3.2.11"
    Public Const szOID_OIWSEC_dsa  = "1.3.14.3.2.12"
    Public Const szOID_OIWSEC_shaDSA  = "1.3.14.3.2.13"
    Public Const szOID_OIWSEC_mdc2RSA  = "1.3.14.3.2.14"
    Public Const szOID_OIWSEC_shaRSA  = "1.3.14.3.2.15"
    Public Const szOID_OIWSEC_dhCommMod  = "1.3.14.3.2.16"
    Public Const szOID_OIWSEC_desEDE  = "1.3.14.3.2.17"
    Public Const szOID_OIWSEC_sha  = "1.3.14.3.2.18"
    Public Const szOID_OIWSEC_mdc2  = "1.3.14.3.2.19"
    Public Const szOID_OIWSEC_dsaComm  = "1.3.14.3.2.20"
    Public Const szOID_OIWSEC_dsaCommSHA  = "1.3.14.3.2.21"
    Public Const szOID_OIWSEC_rsaXchg  = "1.3.14.3.2.22"
    Public Const szOID_OIWSEC_keyHashSeal  = "1.3.14.3.2.23"
    Public Const szOID_OIWSEC_md2RSASign  = "1.3.14.3.2.24"
    Public Const szOID_OIWSEC_md5RSASign  = "1.3.14.3.2.25"
    Public Const szOID_OIWSEC_sha1  = "1.3.14.3.2.26"
    Public Const szOID_OIWSEC_dsaSHA1  = "1.3.14.3.2.27"
    Public Const szOID_OIWSEC_dsaCommSHA1  = "1.3.14.3.2.28"
    Public Const szOID_OIWSEC_sha1RSASign  = "1.3.14.3.2.29"
    '  NIST OSE Implementors' Workshop (OIW) Directory SIG algorithm identifiers
    Public Const szOID_OIWDIR  = "1.3.14.7.2"
    Public Const szOID_OIWDIR_CRPT  = "1.3.14.7.2.1"
    Public Const szOID_OIWDIR_HASH  = "1.3.14.7.2.2"
    Public Const szOID_OIWDIR_SIGN  = "1.3.14.7.2.3"
    Public Const szOID_OIWDIR_md2  = "1.3.14.7.2.2.1"
    Public Const szOID_OIWDIR_md2RSA  = "1.3.14.7.2.3.1"
    '  INFOSEC Algorithms
    '  joint-iso-ccitt(2) country(16) us(840) organization(1) us-government(101) dod(2) id-infosec(1)
    Public Const szOID_INFOSEC  = "2.16.840.1.101.2.1"
    Public Const szOID_INFOSEC_sdnsSignature  = "2.16.840.1.101.2.1.1.1"
    Public Const szOID_INFOSEC_mosaicSignature  = "2.16.840.1.101.2.1.1.2"
    Public Const szOID_INFOSEC_sdnsConfidentiality  = "2.16.840.1.101.2.1.1.3"
    Public Const szOID_INFOSEC_mosaicConfidentiality  = "2.16.840.1.101.2.1.1.4"
    Public Const szOID_INFOSEC_sdnsIntegrity  = "2.16.840.1.101.2.1.1.5"
    Public Const szOID_INFOSEC_mosaicIntegrity  = "2.16.840.1.101.2.1.1.6"
    Public Const szOID_INFOSEC_sdnsTokenProtection  = "2.16.840.1.101.2.1.1.7"
    Public Const szOID_INFOSEC_mosaicTokenProtection  = "2.16.840.1.101.2.1.1.8"
    Public Const szOID_INFOSEC_sdnsKeyManagement  = "2.16.840.1.101.2.1.1.9"
    Public Const szOID_INFOSEC_mosaicKeyManagement  = "2.16.840.1.101.2.1.1.10"
    Public Const szOID_INFOSEC_sdnsKMandSig  = "2.16.840.1.101.2.1.1.11"
    Public Const szOID_INFOSEC_mosaicKMandSig  = "2.16.840.1.101.2.1.1.12"
    Public Const szOID_INFOSEC_SuiteASignature  = "2.16.840.1.101.2.1.1.13"
    Public Const szOID_INFOSEC_SuiteAConfidentiality  = "2.16.840.1.101.2.1.1.14"
    Public Const szOID_INFOSEC_SuiteAIntegrity  = "2.16.840.1.101.2.1.1.15"
    Public Const szOID_INFOSEC_SuiteATokenProtection  = "2.16.840.1.101.2.1.1.16"
    Public Const szOID_INFOSEC_SuiteAKeyManagement  = "2.16.840.1.101.2.1.1.17"
    Public Const szOID_INFOSEC_SuiteAKMandSig  = "2.16.840.1.101.2.1.1.18"
    Public Const szOID_INFOSEC_mosaicUpdatedSig  = "2.16.840.1.101.2.1.1.19"
    Public Const szOID_INFOSEC_mosaicKMandUpdSig  = "2.16.840.1.101.2.1.1.20"
    Public Const szOID_INFOSEC_mosaicUpdatedInteg  = "2.16.840.1.101.2.1.1.21"
    '  NIST Hash Algorithms
    '  joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101) csor(3) nistalgorithm(4) hashalgs(2)
    Public Const szOID_NIST_sha256  = "2.16.840.1.101.3.4.2.1"
    Public Const szOID_NIST_sha384  = "2.16.840.1.101.3.4.2.2"
    Public Const szOID_NIST_sha512  = "2.16.840.1.101.3.4.2.3"

    Public Type CRYPT_BIT_BLOB
        cbData As Long
        pbData As LongPtr 'BYTE*
        cUnusedBits As Long
    End Type

    Public Type CERT_PUBLIC_KEY_INFO
        Algorithm As CRYPT_ALGORITHM_IDENTIFIER
        PublicKey As CRYPT_BIT_BLOB
    End Type

    Public Const CERT_RSA_PUBLIC_KEY_OBJID  = szOID_RSA_RSA
    Public Const CERT_DEFAULT_OID_PUBLIC_KEY_SIGN  = szOID_RSA_RSA
    Public Const CERT_DEFAULT_OID_PUBLIC_KEY_XCHG  = szOID_RSA_RSA

    Public Enum CryptEccPrivateKeyInfoVersions
        CRYPT_ECC_PRIVATE_KEY_INFO_v1 = 1
    End Enum
    Public Type CRYPT_ECC_PRIVATE_KEY_INFO
        dwVersion As CryptEccPrivateKeyInfoVersions ' ecPrivKeyVer1(1)
        PrivateKey As CRYPT_DER_BLOB ' d
        szCurveOid As LongPtr ' Optional
        PublicKey As CRYPT_BIT_BLOB ' Optional (x, y)
    End Type
    Public Type CRYPT_PRIVATE_KEY_INFO
        Version As Long
        Algorithm As CRYPT_ALGORITHM_IDENTIFIER
        PrivateKey As CRYPT_DER_BLOB
        pAttributes As LongPtr 'PCRYPT_ATTRIBUTES
    End Type
    Public Type CRYPT_ENCRYPTED_PRIVATE_KEY_INFO
        EncryptionAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        EncryptedPrivateKey As CRYPT_DATA_BLOB
    End Type

    Public Type CRYPT_PKCS8_IMPORT_PARAMS
        PrivateKey As CRYPT_DIGEST_BLOB ' PKCS8 blob
        pResolvehCryptProvFunc As LongPtr 'PCRYPT_RESOLVE_HCRYPTPROV_FUNC ' optional
        pVoidResolveFunc As LongPtr ' optional
        pDecryptPrivateKeyFunc As LongPtr 'PCRYPT_DECRYPT_PRIVATE_KEY_FUNC
        pVoidDecryptFunc As LongPtr
    End Type
    Public Type CRYPT_PKCS8_EXPORT_PARAMS
        hCryptProv As LongPtr 'HCRYPTPROV
        dwKeySpec As Long
        pszPrivateKeyObjId As LongPtr
        pEncryptPrivateKeyFunc As LongPtr 'PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC
        pVoidEncryptFunc As LongPtr
    End Type



    Public Type CERT_EXTENSION
        pszObjId As String
        fCritical As BOOL
        Value As CRYPT_OBJID_BLOB
    End Type

    Public Enum CRYPT_CERT_VERSION
        CERT_V1 = 0
        CERT_V2 = 1
        CERT_V3 = 2
    End Enum

    Public Type CERT_INFO
        dwVersion As CRYPT_CERT_VERSION
        SerialNumber As CRYPT_INTEGER_BLOB
        SignatureAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        Issuer As CERT_NAME_BLOB
        NotBefore As FILETIME
        NotAfter As FILETIME
        Subject As CERT_NAME_BLOB
        SubjectPublicKeyInfo As CERT_PUBLIC_KEY_INFO
        IssuerUniqueId As CRYPT_BIT_BLOB
        SubjectUniqueId As CRYPT_BIT_BLOB
        cExtension As Long
        rgExtension As LongPtr 'PCERT_EXTENSION
    End Type

    Public Type CRYPT_ATTRIBUTE_TYPE_VALUE
        pszObjId As String
        Value As CRYPT_OBJID_BLOB
    End Type
    Public Type CRYPT_ATTRIBUTE
        pszObjId As String
        cValue As Long
        rgValue As LongPtr 'PCRYPT_ATTR_BLOB
    End Type
    Public Type CRYPT_ATTRIBUTES
        cAttr As Long
        rgAttr As LongPtr ' PCRYPT_ATTRIBUTE
    End Type
    'Alias CMSG_ATTR As CRYPT_ATTRIBUTES
    Public Type CMSG_ATTR
        cAttr As Long
        rgAttr As LongPtr ' PCRYPT_ATTRIBUTE
    End Type

    Public Type CERT_ISSUER_SERIAL_NUMBER
        Issuer As CERT_NAME_BLOB
        SerialNumber As CRYPT_INTEGER_BLOB
    End Type

    Public Enum CRYPT_CERT_ID_OPTON
        CERT_ID_ISSUER_SERIAL_NUMBER = 1
        CERT_ID_KEY_IDENTIFIER = 2
        CERT_ID_SHA1_HASH = 3
    End Enum

    Public Type CERT_ID
        dwIdChoice As CRYPT_CERT_ID_OPTON
        ' union {
            ' // CERT_ID_ISSUER_SERIAL_NUMBER
            ' CERT_ISSUER_SERIAL_NUMBER   IssuerSerialNumber;
            ' // CERT_ID_KEY_IDENTIFIER
            ' CRYPT_HASH_BLOB             KeyId;
            ' // CERT_ID_SHA1_HASH
            ' CRYPT_HASH_BLOB             HashId;
        ' } DUMMYUNIONNAME;
        #If Win64 Then
            data(15) As Byte
        #Else
            data(7) As Byte
        #End If
    End Type

    [Description("Note: If you wish the API to be handled as if CMSG_SIGNER_ENCODE_INFO_HAS_CMS_FIELDS was FALSE, exclude the last 3 fields from the size provided in .cbSize.")]
    Public Type CMSG_SIGNER_ENCODE_INFO
        cbSize As Long
        pCertInfo As LongPtr 'PCERT_INFO
        ' NCryptIsKeyHandle() is called to determine the union choice.
        '    union {
        '        HCRYPTPROV                  hCryptProv;
        '        NCRYPT_KEY_HANDLE           hNCryptKey;
        '#ifdef CMSG_SIGNER_ENCODE_INFO_HAS_IUM_FIELDS
        '       BCRYPT_KEY_HANDLE           hBCryptKey;
        '#endif
        '   } DUMMYUNIONNAME;
        hCryptKeyOrProv As LongPtr
        ' not applicable for hNCryptKey choice
        dwKeySpec As CRYPT_AT_FLAGS
        HashAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        pvHashAuxInfo As LongPtr '*void
        cAuthAttr As Long
        rgAuthAttr As LongPtr 'PCRYPT_ATTRIBUTE
        cUnauthAttr As Long
        rgUnauthAttr As LongPtr 'PCRYPT_ATTRIBUTE
        '#ifdef CMSG_SIGNER_ENCODE_INFO_HAS_CMS_FIELDS
        SignerId As CERT_ID
        ' This is also referred to as the SignatureAlgorithm
        HashEncryptionAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        pvHashEncryptionAuxInfo As LongPtr '*void
        '#endif
    End Type

    [Description("Note: If you wish the API to be handled as if CMSG_SIGNED_ENCODE_INFO_HAS_CMS_FIELDS was FALSE, exclude the last 2 fields from the size provided in .cbSize (8 bytes on x86, 16 on x64 including padding).")]
    Public Type CMSG_SIGNED_ENCODE_INFO
        cbSize As Long
        cSigners As Long
        rgSigners As LongPtr 'PCMSG_SIGNER_ENCODE_INFO
        cCertEncoded As Long
        rgCertEncoded As LongPtr 'PCERT_BLOB
        cCrlEncoded As Long
        rgCrlEncoded As LongPtr 'PCRL_BLOB
        '#ifdef CMSG_SIGNED_ENCODE_INFO_HAS_CMS_FIELDS
        cAttrCertEncoded As Long
        rgAttrCertEncoded As LongPtr 'PCERT_BLOB
        '#endif
    End Type

    [Description("Note: If you wish the API to be handled as if CMSG_ENVELOPED_ENCODE_INFO_HAS_CMS_FIELDS was FALSE, exclude the last 9 fields from the size provided in .cbSize. Padding must be accounted for.")]
    Public Type CMSG_ENVELOPED_ENCODE_INFO
        cbSize As Long
        hCryptProv As LongPtr 'HCRYPTPROV_LEGACY
        ContentEncryptionAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        pvEncryptionAuxInfo As LongPtr '*void
        cRecipients As Long
        ' The following array may only be used for transport recipients identified
        ' by their IssuereAndSerialNumber. If rgpRecipients != NULL, then,
        ' the rgCmsRecipients must be NULL.
        rgpRecipients As LongPtr 'PCERT_INFO
        '#ifdef CMSG_ENVELOPED_ENCODE_INFO_HAS_CMS_FIELDS
        ' If rgCmsRecipients != NULL, then, the above rgpRecipients must be
        ' NULL.
        rgCmsRecipients As LongPtr 'PCMSG_RECIPIENT_ENCODE_INFO
        cCertEncoded As Long
        rgCertEncoded As LongPtr 'PCERT_BLOB
        cCrlEncoded As Long
        rgCrlEncoded As LongPtr 'PCRL_BLOB
        cAttrCertEncoded As Long
        rgAttrCertEncoded As LongPtr 'PCERT_BLOB
        cUnprotectedAttr As Long
        rgUnprotectedAttr As LongPtr 'PCRYPT_ATTRIBUTE
        '#endif
    End Type

    Public Type CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO
        cbSize As Long
        KeyEncryptionAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        pvKeyEncryptionAuxInfo As LongPtr 'void*
        hCryptProv As LongPtr 'HCRYPTPROV_LEGACY
        RecipientPublicKey As CRYPT_BIT_BLOB
        RecipientId As CERT_ID
    End Type

    Public Type CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO
        cbSize As Long
        RecipientPublicKey As CRYPT_BIT_BLOB
        RecipientId As CERT_ID
        ' Following fields are optional and only applicable to KEY_IDENTIFIER
        ' CERT_IDs.
        Date As FILETIME
        pOtherAttr As LongPtr 'PCRYPT_ATTRIBUTE_TYPE_VALUE
    End Type

    Public Enum CryptCMsgKeyAgreeRecipientEncInfoKeyChoice
        CMSG_KEY_AGREE_EPHEMERAL_KEY_CHOICE = 1
        CMSG_KEY_AGREE_STATIC_KEY_CHOICE = 2
    End Enum
    Public Type CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO
        cbSize As Long
        KeyEncryptionAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        pvKeyEncryptionAuxInfo As LongPtr 'void*
        KeyWrapAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        pvKeyWrapAuxInfo As LongPtr 'void*
        ' The following hCryptProv and dwKeySpec must be specified for the
        ' CMSG_KEY_AGREE_STATIC_KEY_CHOICE.
        ' For CMSG_KEY_AGREE_EPHEMERAL_KEY_CHOICE, dwKeySpec isn't applicable
        ' and hCryptProv is optional.
        hCryptProv As LongPtr 'HCRYPTPROV_LEGACY
        dwKeySpec As CRYPT_AT_FLAGS
        dwKeyChoice As CryptCMsgKeyAgreeRecipientEncInfoKeyChoice
        '   union {
        ' CMSG_KEY_AGREE_EPHEMERAL_KEY_CHOICE
        ' The ephemeral public key algorithm and parameters.
        '        PCRYPT_ALGORITHM_IDENTIFIER pEphemeralAlgorithm;
        ' CMSG_KEY_AGREE_STATIC_KEY_CHOICE
        ' The CertId of the sender's certificate
        '        PCERT_ID                    pSenderId;
        '    } DUMMYUNIONNAME;
        pSenderIdOrEphemeralAlg As LongPtr
        UserKeyingMaterial As CRYPT_DATA_BLOB ' OPTIONAL
        cRecipientEncryptedKeys As Long
        rgpRecipientEncryptedKeys As LongPtr 'PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO
    End Type

    Public Enum CryptCMsgMailListRecipientEncInfoKeyChoice
        CMSG_MAIL_LIST_HANDLE_KEY_CHOICE = 1
    End Enum
    Public Type CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO
        cbSize As Long
        KeyEncryptionAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        pvKeyEncryptionAuxInfo As LongPtr 'void*
        hCryptProv As LongPtr 'HCRYPTPROV
        dwKeyChoice As CryptCMsgMailListRecipientEncInfoKeyChoice
        '   union {
        ' CMSG_MAIL_LIST_HANDLE_KEY_CHOICE
        '        HCRYPTKEY                   hKeyEncryptionKey;
        ' Reserve space for a potential pointer choice
        '        void                        *pvKeyEncryptionKey;
        '    } DUMMYUNIONNAME;
        hKeyEncryptionKey As LongPtr
        KeyId As CRYPT_DATA_BLOB
        ' Following fields are optional.
        Date As FILETIME
        pOtherAttr As LongPtr 'PCRYPT_ATTRIBUTE_TYPE_VALUE
    End Type

    Public Enum CryptCMsgRecipientChoice
        CMSG_KEY_TRANS_RECIPIENT = 1
        CMSG_KEY_AGREE_RECIPIENT = 2
        CMSG_MAIL_LIST_RECIPIENT = 3
    End Enum
    Public Type CMSG_RECIPIENT_ENCODE_INFO
        dwRecipientChoice As CryptCMsgRecipientChoice
        '   union {
        ' CMSG_KEY_TRANS_RECIPIENT
        '        PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO   pKeyTrans;
        ' CMSG_KEY_AGREE_RECIPIENT
        '        PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO   pKeyAgree;
        ' CMSG_MAIL_LIST_RECIPIENT
        '        PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO   pMailList;
        '    } DUMMYUNIONNAME;
        pRecipient As LongPtr
    End Type

    Public Type CMSG_RC2_AUX_INFO
        cbSize As Long
        dwBitLen As Long
    End Type

    Public Enum CryptCMsgSp3CompatAuxInfoFlags
        CMSG_SP3_COMPATIBLE_ENCRYPT_FLAG = &H80000000
    End Enum
    Public Type CMSG_SP3_COMPATIBLE_AUX_INFO
        cbSize As Long
        dwFlags As CryptCMsgSp3CompatAuxInfoFlags
    End Type

    Public Enum CryptCMsgRC4CompatAuxInfoFlags
        CMSG_RC4_NO_SALT_FLAG = &H40000000
    End Enum
    Public Type CMSG_RC4_AUX_INFO
        cbSize As Long
        /* [ TypeHint(CryptCMsgRC4CompatAuxInfoFlags) ] */ dwBitLen As Long
    End Type

    Public Type CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO
        cbSize As Long
        SignedInfo As CMSG_SIGNED_ENCODE_INFO
        EnvelopedInfo As CMSG_ENVELOPED_ENCODE_INFO
    End Type

    Public Type CMSG_HASHED_ENCODE_INFO
        cbSize As Long
        hCryptProv As LongPtr 'HCRYPTPROV_LEGACY
        HashAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        pvHashAuxInfo As LongPtr 'void*
    End Type

    Public Type CMSG_ENCRYPTED_ENCODE_INFO
        cbSize As Long
        ContentEncryptionAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        pvEncryptionAuxInfo As LongPtr 'void*
    End Type

    Public Const CMSG_INDEFINITE_LENGTH = &HFFFFFFFF
    Public Type CMSG_STREAM_INFO
        cbContent As Long
        pfnStreamOutput As LongPtr 'PFN_CMSG_STREAM_OUTPUT
        pvArg As LongPtr 'void*
    End Type

    Public Type CMSG_SIGNER_INFO
        dwVersion As Long
        Issuer As CERT_NAME_BLOB
        SerialNumber As CRYPT_INTEGER_BLOB
        HashAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        ' This is also referred to as the SignatureAlgorithm
        HashEncryptionAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        EncryptedHash As CRYPT_DATA_BLOB
        AuthAttrs As CRYPT_ATTRIBUTES
        UnauthAttrs As CRYPT_ATTRIBUTES
    End Type

    Public Type CMSG_CMS_SIGNER_INFO
        dwVersion As Long
        SignerId As CERT_ID
        HashAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        HashEncryptionAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        EncryptedHash As CRYPT_DATA_BLOB
        AuthAttrs As CRYPT_ATTRIBUTES
        UnauthAttrs As CRYPT_ATTRIBUTES
    End Type

    Public Enum CryptCMsgVersionParamValues
        CMSG_SIGNED_DATA_V1 = 1
        CMSG_SIGNED_DATA_V3 = 3
        CMSG_SIGNED_DATA_PKCS_1_5_VERSION = CMSG_SIGNED_DATA_V1
        CMSG_SIGNED_DATA_CMS_VERSION = CMSG_SIGNED_DATA_V3
        CMSG_SIGNER_INFO_V1 = 1
        CMSG_SIGNER_INFO_V3 = 3
        CMSG_SIGNER_INFO_PKCS_1_5_VERSION = CMSG_SIGNER_INFO_V1
        CMSG_SIGNER_INFO_CMS_VERSION = CMSG_SIGNER_INFO_V3
        CMSG_HASHED_DATA_V0 = 0
        CMSG_HASHED_DATA_V2 = 2
        CMSG_HASHED_DATA_PKCS_1_5_VERSION = CMSG_HASHED_DATA_V0
        CMSG_HASHED_DATA_CMS_VERSION = CMSG_HASHED_DATA_V2
        CMSG_ENVELOPED_DATA_V0 = 0
        CMSG_ENVELOPED_DATA_V2 = 2
        CMSG_ENVELOPED_DATA_PKCS_1_5_VERSION = CMSG_ENVELOPED_DATA_V0
        CMSG_ENVELOPED_DATA_CMS_VERSION = CMSG_ENVELOPED_DATA_V2
    End Enum

    Public Type CMSG_KEY_TRANS_RECIPIENT_INFO
        dwVersion As CryptCMsgKeyVersions
        ' Currently, only ISSUER_SERIAL_NUMBER or KEYID choices
        RecipientId As CERT_ID
        KeyEncryptionAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        EncryptedKey As CRYPT_DATA_BLOB
    End Type

    Public Type CMSG_RECIPIENT_ENCRYPTED_KEY_INFO
        ' Currently, only ISSUER_SERIAL_NUMBER or KEYID choices
        RecipientId As CERT_ID
        EncryptedKey As CRYPT_DATA_BLOB
        ' The following optional fields are only applicable to KEYID choice
        Date As FILETIME
        pOtherAttr As LongPtr 'PCRYPT_ATTRIBUTE_TYPE_VALUE
    End Type

    Public Enum CryptCMsgKeyAgreeOriginatorChoice
        CMSG_KEY_AGREE_ORIGINATOR_CERT = 1
        CMSG_KEY_AGREE_ORIGINATOR_PUBLIC_KEY = 2
    End Enum

    Public Type CMSG_KEY_AGREE_RECIPIENT_INFO
        dwVersion As CryptCMsgKeyVersions
        dwOriginatorChoice As CryptCMsgKeyAgreeOriginatorChoice
        '    union {
        ' CMSG_KEY_AGREE_ORIGINATOR_CERT
        '        CERT_ID                     OriginatorCertId;
        ' CMSG_KEY_AGREE_ORIGINATOR_PUBLIC_KEY
        '        CERT_PUBLIC_KEY_INFO        OriginatorPublicKeyInfo;
        '    } DUMMYUNIONNAME;
        #If Win64 Then
        OrigCertIdOrPubKeyInfo(47) As Byte
        #Else
        OrigCertIdOrPubKeyInfo(23) As Byte
        #End If
        UserKeyingMaterial As CRYPT_DATA_BLOB
        KeyEncryptionAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        cRecipientEncryptedKeys As Long
        rgpRecipientEncryptedKeys As LongPtr 'PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO
    End Type

    Public Type CMSG_MAIL_LIST_RECIPIENT_INFO
        dwVersion As CryptCMsgKeyVersions
        KeyId As CRYPT_DATA_BLOB
        KeyEncryptionAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        EncryptedKey As CRYPT_DATA_BLOB
        ' The following fields are optional
        Date As FILETIME
        pOtherAttr As LongPtr 'PCRYPT_ATTRIBUTE_TYPE_VALUE
    End Type

    Public Type CMSG_CMS_RECIPIENT_INFO
        dwRecipientChoice As CryptCMsgRecipientChoice
        '    union {
        ' CMSG_KEY_TRANS_RECIPIENT
        '        PCMSG_KEY_TRANS_RECIPIENT_INFO   pKeyTrans;
        ' CMSG_KEY_AGREE_RECIPIENT
        '        PCMSG_KEY_AGREE_RECIPIENT_INFO  pKeyAgree;
        ' CMSG_MAIL_LIST_RECIPIENT
        '       PCMSG_MAIL_LIST_RECIPIENT_INFO   pMailList;
        '    } DUMMYUNIONNAME;
        pKeyOrMailList As LongPtr
    End Type

    Public Enum CryptCMsgKeyVersions
        CMSG_ENVELOPED_RECIPIENT_V0 = 0
        CMSG_ENVELOPED_RECIPIENT_V2 = 2
        CMSG_ENVELOPED_RECIPIENT_V3 = 3
        CMSG_ENVELOPED_RECIPIENT_V4 = 4
        CMSG_KEY_TRANS_PKCS_1_5_VERSION = CMSG_ENVELOPED_RECIPIENT_V0
        CMSG_KEY_TRANS_CMS_VERSION = CMSG_ENVELOPED_RECIPIENT_V2
        CMSG_KEY_AGREE_VERSION = CMSG_ENVELOPED_RECIPIENT_V3
        CMSG_MAIL_LIST_VERSION = CMSG_ENVELOPED_RECIPIENT_V4
    End Enum

    Public Enum CryptCMsgControlTypes
        CMSG_CTRL_VERIFY_SIGNATURE = 1
        CMSG_CTRL_DECRYPT = 2
        CMSG_CTRL_VERIFY_HASH = 5
        CMSG_CTRL_ADD_SIGNER = 6
        CMSG_CTRL_DEL_SIGNER = 7
        CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR = 8
        CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR = 9
        CMSG_CTRL_ADD_CERT = 10
        CMSG_CTRL_DEL_CERT = 11
        CMSG_CTRL_ADD_CRL = 12
        CMSG_CTRL_DEL_CRL = 13
        CMSG_CTRL_ADD_ATTR_CERT = 14
        CMSG_CTRL_DEL_ATTR_CERT = 15
        CMSG_CTRL_KEY_TRANS_DECRYPT = 16
        CMSG_CTRL_KEY_AGREE_DECRYPT = 17
        CMSG_CTRL_MAIL_LIST_DECRYPT = 18
        CMSG_CTRL_VERIFY_SIGNATURE_EX = 19
        CMSG_CTRL_ADD_CMS_SIGNER_INFO = 20
        CMSG_CTRL_ENABLE_STRONG_SIGNATURE = 21
    End Enum

    Public Enum CryptCMsgControlSignerTypes
        CMSG_VERIFY_SIGNER_PUBKEY = 1
    '  pvSigner :: PCERT_PUBLIC_KEY_INFO
        CMSG_VERIFY_SIGNER_CERT = 2
    '  pvSigner :: PCCERT_CONTEXT
        CMSG_VERIFY_SIGNER_CHAIN = 3
    '  pvSigner :: PCCERT_CHAIN_CONTEXT
        CMSG_VERIFY_SIGNER_NULL = 4
    End Enum
    Public Type CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA
        cbSize As Long
        hCryptProv As LongPtr 'HCRYPTPROV_LEGACY
        dwSignerIndex As Long
        dwSignerType As CryptCMsgControlSignerTypes
        pvSigner As LongPtr 'void*
    End Type

    Public Type CMSG_CTRL_DECRYPT_PARA
        cbSize As Long
        ' NCryptIsKeyHandle() is called to determine the union choice.
        '    union {
        '        HCRYPTPROV                  hCryptProv;
        '        NCRYPT_KEY_HANDLE           hNCryptKey;
        '    } DUMMYUNIONNAME;
        hCryptProvOrKey As LongPtr
        ' not applicable for hNCryptKey choice
        dwKeySpec As CRYPT_AT_FLAGS
        dwRecipientIndex As Long
    End Type

    Public Type CMSG_CTRL_KEY_TRANS_DECRYPT_PARA
        cbSize As Long
        ' NCryptIsKeyHandle() is called to determine the union choice.
        '    union {
        '        HCRYPTPROV                  hCryptProv;
        '        NCRYPT_KEY_HANDLE           hNCryptKey;
        '    } DUMMYUNIONNAME;
        ' not applicable for hNCryptKey choice
        hCryptProvOrKey As LongPtr
        dwKeySpec As CRYPT_AT_FLAGS
        pKeyTrans As LongPtr 'PCMSG_KEY_TRANS_RECIPIENT_INFO
        dwRecipientIndex As Long
    End Type

    Public Type CMSG_CTRL_KEY_AGREE_DECRYPT_PARA
        cbSize As Long
        ' NCryptIsKeyHandle() is called to determine the union choice.
        '    union {
        '        HCRYPTPROV                  hCryptProv;
        '       NCRYPT_KEY_HANDLE           hNCryptKey;
        '    } DUMMYUNIONNAME;
        hCryptProvOrKey As LongPtr
        ' not applicable for hNCryptKey choice
        dwKeySpec As CRYPT_AT_FLAGS
        pKeyAgree As LongPtr 'PCMSG_KEY_AGREE_RECIPIENT_INFO
        dwRecipientIndex As Long
        dwRecipientEncryptedKeyIndex As Long
        OriginatorPublicKey As CRYPT_BIT_BLOB
    End Type

    Public Type CMSG_CTRL_MAIL_LIST_DECRYPT_PARA
        cbSize As Long
        hCryptProv As LongPtr 'HCRYPTPROV
        pMailList As LongPtr 'PCMSG_MAIL_LIST_RECIPIENT_INFO
        dwRecipientIndex As Long
        dwKeyChoice As CryptCMsgMailListRecipientEncInfoKeyChoice
        '   union {
        ' CMSG_MAIL_LIST_HANDLE_KEY_CHOICE
        '       HCRYPTKEY                       hKeyEncryptionKey;
        ' Reserve space for a potential pointer choice
        '        void                            *pvKeyEncryptionKey;
        '    } DUMMYUNIONNAME;
        hKeyEncryptionKey As LongPtr
    End Type

    Public Type CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA
        cbSize As Long
        dwSignerIndex As Long
        blob As CRYPT_DATA_BLOB
    End Type

    Public Type CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA
        cbSize As Long
        dwSignerIndex As Long
        dwUnauthAttrIndex As Long
    End Type





    Public Enum CERT_NAME_TYPES
        CERT_NAME_EMAIL_TYPE = 1
        CERT_NAME_RDN_TYPE = 2
        CERT_NAME_ATTR_TYPE = 3
        CERT_NAME_SIMPLE_DISPLAY_TYPE = 4
        CERT_NAME_FRIENDLY_DISPLAY_TYPE = 5
        CERT_NAME_DNS_TYPE = 6
        CERT_NAME_URL_TYPE = 7
        CERT_NAME_UPN_TYPE = 8
    End Enum

    Public Enum CERT_NAME_FLAGS
        CERT_NAME_ISSUER_FLAG = &H1
        CERT_NAME_DISABLE_IE4_UTF8_FLAG = &H00010000
    '  Following is only applicable to CERT_NAME_DNS_TYPE. When set returns
    '  all names not just the first one. Returns a multi-string. Each string
    '  will be null terminated. The last string will be double null terminated.
        CERT_NAME_SEARCH_ALL_NAMES_FLAG = &H2
    End Enum

    Public Enum CryptCertFindFlags
        CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG = &H1
        CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG = &H2
        CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG = &H4
        CERT_FIND_NO_ENHKEY_USAGE_FLAG = &H8
        CERT_FIND_OR_ENHKEY_USAGE_FLAG = &H10
        CERT_FIND_VALID_ENHKEY_USAGE_FLAG = &H20
        CERT_FIND_OPTIONAL_CTL_USAGE_FLAG = CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG
        CERT_FIND_EXT_ONLY_CTL_USAGE_FLAG = CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG
        CERT_FIND_PROP_ONLY_CTL_USAGE_FLAG = CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG
        CERT_FIND_NO_CTL_USAGE_FLAG = CERT_FIND_NO_ENHKEY_USAGE_FLAG
        CERT_FIND_OR_CTL_USAGE_FLAG = CERT_FIND_OR_ENHKEY_USAGE_FLAG
        CERT_FIND_VALID_CTL_USAGE_FLAG = CERT_FIND_VALID_ENHKEY_USAGE_FLAG
    End Enum
    Public Enum CryptCertCompareFunctions
        CERT_COMPARE_MASK = &HFFFF&
        CERT_COMPARE_SHIFT = 16
        CERT_COMPARE_ANY = 0
        CERT_COMPARE_SHA1_HASH = 1
        CERT_COMPARE_NAME = 2
        CERT_COMPARE_ATTR = 3
        CERT_COMPARE_MD5_HASH = 4
        CERT_COMPARE_PROPERTY = 5
        CERT_COMPARE_PUBLIC_KEY = 6
        CERT_COMPARE_HASH = CERT_COMPARE_SHA1_HASH
        CERT_COMPARE_NAME_STR_A = 7
        CERT_COMPARE_NAME_STR_W = 8
        CERT_COMPARE_KEY_SPEC = 9
        CERT_COMPARE_ENHKEY_USAGE = 10
        CERT_COMPARE_CTL_USAGE = CERT_COMPARE_ENHKEY_USAGE
        CERT_COMPARE_SUBJECT_CERT = 11
        CERT_COMPARE_ISSUER_OF = 12
        CERT_COMPARE_EXISTING = 13
        CERT_COMPARE_SIGNATURE_HASH = 14
        CERT_COMPARE_KEY_IDENTIFIER = 15
        CERT_COMPARE_CERT_ID = 16
        CERT_COMPARE_CROSS_CERT_DIST_POINTS = 17
        CERT_COMPARE_PUBKEY_MD5_HASH = 18
        CERT_COMPARE_SUBJECT_INFO_ACCESS = 19
        CERT_COMPARE_HASH_STR = 20
        CERT_COMPARE_HAS_PRIVATE_KEY = 21
        CERT_COMPARE_SHA256_HASH = 22
        CERT_COMPARE_SHA1_SHA256_HASH = 23
    End Enum
    Public Enum CryptCertInfoFlags
        CERT_INFO_VERSION_FLAG = 1
        CERT_INFO_SERIAL_NUMBER_FLAG = 2
        CERT_INFO_SIGNATURE_ALGORITHM_FLAG = 3
        CERT_INFO_ISSUER_FLAG = 4
        CERT_INFO_NOT_BEFORE_FLAG = 5
        CERT_INFO_NOT_AFTER_FLAG = 6
        CERT_INFO_SUBJECT_FLAG = 7
        CERT_INFO_SUBJECT_PUBLIC_KEY_INFO_FLAG = 8
        CERT_INFO_ISSUER_UNIQUE_ID_FLAG = 9
        CERT_INFO_SUBJECT_UNIQUE_ID_FLAG = 10
        CERT_INFO_EXTENSION_FLAG = 11
    End Enum
    Public Enum CryptCertFindType
        CERT_FIND_ANY = (CERT_COMPARE_ANY << CERT_COMPARE_SHIFT)
        CERT_FIND_SHA1_HASH = (CERT_COMPARE_SHA1_HASH << CERT_COMPARE_SHIFT)
        CERT_FIND_SHA256_HASH = (CERT_COMPARE_SHA256_HASH << CERT_COMPARE_SHIFT)
        CERT_FIND_SHA1_SHA256_HASH = (CERT_COMPARE_SHA1_SHA256_HASH << CERT_COMPARE_SHIFT)
        CERT_FIND_MD5_HASH = (CERT_COMPARE_MD5_HASH << CERT_COMPARE_SHIFT)
        CERT_FIND_SIGNATURE_HASH = (CERT_COMPARE_SIGNATURE_HASH << CERT_COMPARE_SHIFT)
        CERT_FIND_KEY_IDENTIFIER = (CERT_COMPARE_KEY_IDENTIFIER << CERT_COMPARE_SHIFT)
        CERT_FIND_HASH = CERT_FIND_SHA1_HASH
        CERT_FIND_PROPERTY = (CERT_COMPARE_PROPERTY << CERT_COMPARE_SHIFT)
        CERT_FIND_PUBLIC_KEY = (CERT_COMPARE_PUBLIC_KEY << CERT_COMPARE_SHIFT)
        CERT_FIND_SUBJECT_NAME = (CERT_COMPARE_NAME << CERT_COMPARE_SHIFT Or CERT_INFO_SUBJECT_FLAG)
        CERT_FIND_SUBJECT_ATTR = (CERT_COMPARE_ATTR << CERT_COMPARE_SHIFT Or CERT_INFO_SUBJECT_FLAG)
        CERT_FIND_ISSUER_NAME = (CERT_COMPARE_NAME << CERT_COMPARE_SHIFT Or CERT_INFO_ISSUER_FLAG)
        CERT_FIND_ISSUER_ATTR = (CERT_COMPARE_ATTR << CERT_COMPARE_SHIFT Or CERT_INFO_ISSUER_FLAG)
        CERT_FIND_SUBJECT_STR_A = (CERT_COMPARE_NAME_STR_A << CERT_COMPARE_SHIFT Or CERT_INFO_SUBJECT_FLAG)
        CERT_FIND_SUBJECT_STR_W = (CERT_COMPARE_NAME_STR_W << CERT_COMPARE_SHIFT Or CERT_INFO_SUBJECT_FLAG)
        CERT_FIND_SUBJECT_STR = CERT_FIND_SUBJECT_STR_W
        CERT_FIND_ISSUER_STR_A = (CERT_COMPARE_NAME_STR_A << CERT_COMPARE_SHIFT Or CERT_INFO_ISSUER_FLAG)
        CERT_FIND_ISSUER_STR_W = (CERT_COMPARE_NAME_STR_W << CERT_COMPARE_SHIFT Or CERT_INFO_ISSUER_FLAG)
        CERT_FIND_ISSUER_STR = CERT_FIND_ISSUER_STR_W
        CERT_FIND_KEY_SPEC = (CERT_COMPARE_KEY_SPEC << CERT_COMPARE_SHIFT)
        CERT_FIND_ENHKEY_USAGE = (CERT_COMPARE_ENHKEY_USAGE << CERT_COMPARE_SHIFT)
        CERT_FIND_CTL_USAGE = CERT_FIND_ENHKEY_USAGE
        CERT_FIND_SUBJECT_CERT = (CERT_COMPARE_SUBJECT_CERT << CERT_COMPARE_SHIFT)
        CERT_FIND_ISSUER_OF = (CERT_COMPARE_ISSUER_OF << CERT_COMPARE_SHIFT)
        CERT_FIND_EXISTING = (CERT_COMPARE_EXISTING << CERT_COMPARE_SHIFT)
        CERT_FIND_CERT_ID = (CERT_COMPARE_CERT_ID << CERT_COMPARE_SHIFT)
        CERT_FIND_CROSS_CERT_DIST_POINTS = (CERT_COMPARE_CROSS_CERT_DIST_POINTS << CERT_COMPARE_SHIFT)
        CERT_FIND_PUBKEY_MD5_HASH = (CERT_COMPARE_PUBKEY_MD5_HASH << CERT_COMPARE_SHIFT)
        CERT_FIND_SUBJECT_INFO_ACCESS = (CERT_COMPARE_SUBJECT_INFO_ACCESS << CERT_COMPARE_SHIFT)
        CERT_FIND_HASH_STR = (CERT_COMPARE_HASH_STR << CERT_COMPARE_SHIFT)
        CERT_FIND_HAS_PRIVATE_KEY = (CERT_COMPARE_HAS_PRIVATE_KEY << CERT_COMPARE_SHIFT)
    End Enum

    Public Enum CRYPT_STORE_SAVEAS_FLAGS
        CERT_STORE_SAVE_AS_STORE = 1
        CERT_STORE_SAVE_AS_PKCS7 = 2
        CERT_STORE_SAVE_AS_PKCS12 = 3
    End Enum
    Public Enum CRYPT_STORE_SAVETO_FLAGS
        CERT_STORE_SAVE_TO_FILE = 1
        CERT_STORE_SAVE_TO_MEMORY = 2
        CERT_STORE_SAVE_TO_FILENAME_A = 3
        CERT_STORE_SAVE_TO_FILENAME_W = 4
        CERT_STORE_SAVE_TO_FILENAME = CERT_STORE_SAVE_TO_FILENAME_W
    End Enum

    Public Const CERT_STORE_PROV_MSG  = (1)
    Public Const CERT_STORE_PROV_MEMORY  = (2)
    Public Const CERT_STORE_PROV_FILE  = (3)
    Public Const CERT_STORE_PROV_REG  = (4)
    Public Const CERT_STORE_PROV_PKCS7  = (5)
    Public Const CERT_STORE_PROV_SERIALIZED  = (6)
    Public Const CERT_STORE_PROV_FILENAME_A  = (7)
    Public Const CERT_STORE_PROV_FILENAME_W  = (8)
    Public Const CERT_STORE_PROV_FILENAME  = CERT_STORE_PROV_FILENAME_W
    Public Const CERT_STORE_PROV_SYSTEM_A  = (9)
    Public Const CERT_STORE_PROV_SYSTEM_W  = (10)
    Public Const CERT_STORE_PROV_SYSTEM  = CERT_STORE_PROV_SYSTEM_W
    Public Const CERT_STORE_PROV_COLLECTION  = (11)
    Public Const CERT_STORE_PROV_SYSTEM_REGISTRY_A  = (12)
    Public Const CERT_STORE_PROV_SYSTEM_REGISTRY_W  = (13)
    Public Const CERT_STORE_PROV_SYSTEM_REGISTRY  = CERT_STORE_PROV_SYSTEM_REGISTRY_W
    Public Const CERT_STORE_PROV_PHYSICAL_W  = (14)
    Public Const CERT_STORE_PROV_PHYSICAL  = CERT_STORE_PROV_PHYSICAL_W
    '  SmartCard Store Provider isn't supported
    Public Const CERT_STORE_PROV_SMART_CARD_W  = (15)
    Public Const CERT_STORE_PROV_SMART_CARD  = CERT_STORE_PROV_SMART_CARD_W
    Public Const CERT_STORE_PROV_LDAP_W  = (16)
    Public Const CERT_STORE_PROV_LDAP  = CERT_STORE_PROV_LDAP_W
    Public Const CERT_STORE_PROV_PKCS12  = (17)
    Public Const sz_CERT_STORE_PROV_MEMORY  = "Memory"
    Public Const sz_CERT_STORE_PROV_FILENAME_W  = "File"
    Public Const sz_CERT_STORE_PROV_FILENAME  = sz_CERT_STORE_PROV_FILENAME_W
    Public Const sz_CERT_STORE_PROV_SYSTEM_W  = "System"
    Public Const sz_CERT_STORE_PROV_SYSTEM  = sz_CERT_STORE_PROV_SYSTEM_W
    Public Const sz_CERT_STORE_PROV_PKCS7  = "PKCS7"
    Public Const sz_CERT_STORE_PROV_PKCS12  = "PKCS12"
    Public Const sz_CERT_STORE_PROV_SERIALIZED  = "Serialized"
    Public Const sz_CERT_STORE_PROV_COLLECTION  = "Collection"
    Public Const sz_CERT_STORE_PROV_SYSTEM_REGISTRY_W  = "SystemRegistry"
    Public Const sz_CERT_STORE_PROV_SYSTEM_REGISTRY  = sz_CERT_STORE_PROV_SYSTEM_REGISTRY_W
    Public Const sz_CERT_STORE_PROV_PHYSICAL_W  = "Physical"
    Public Const sz_CERT_STORE_PROV_PHYSICAL  = sz_CERT_STORE_PROV_PHYSICAL_W
    '  SmartCard Store Provider isn't supported
    Public Const sz_CERT_STORE_PROV_SMART_CARD_W  = "SmartCard"
    Public Const sz_CERT_STORE_PROV_SMART_CARD  = sz_CERT_STORE_PROV_SMART_CARD_W
    Public Const sz_CERT_STORE_PROV_LDAP_W  = "Ldap"
    Public Const sz_CERT_STORE_PROV_LDAP  = sz_CERT_STORE_PROV_LDAP_W

    Public Enum CertStoreOpenFlags
        CERT_STORE_NO_CRYPT_RELEASE_FLAG = &H00000001
        CERT_STORE_SET_LOCALIZED_NAME_FLAG = &H00000002
        CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG = &H00000004
        CERT_STORE_DELETE_FLAG = &H00000010
        CERT_STORE_UNSAFE_PHYSICAL_FLAG = &H00000020
        CERT_STORE_SHARE_STORE_FLAG = &H00000040
        CERT_STORE_SHARE_CONTEXT_FLAG = &H00000080
        CERT_STORE_MANIFOLD_FLAG = &H00000100
        CERT_STORE_ENUM_ARCHIVED_FLAG = &H00000200
        CERT_STORE_UPDATE_KEYID_FLAG = &H00000400
        CERT_STORE_BACKUP_RESTORE_FLAG = &H00000800
        CERT_STORE_READONLY_FLAG = &H00008000&
        CERT_STORE_OPEN_EXISTING_FLAG = &H00004000
        CERT_STORE_CREATE_NEW_FLAG = &H00002000
        CERT_STORE_MAXIMUM_ALLOWED_FLAG = &H00001000
    '  Set if pvPara points to a CERT_SYSTEM_STORE_RELOCATE_PARA structure
        CERT_SYSTEM_STORE_RELOCATE_FLAG = &H80000000
    End Enum

    Public Enum CertStoreVerifyFlags
        CERT_STORE_SIGNATURE_FLAG = &H00000001
        CERT_STORE_TIME_VALIDITY_FLAG = &H00000002
        CERT_STORE_REVOCATION_FLAG = &H00000004
        CERT_STORE_NO_CRL_FLAG = &H00010000
        CERT_STORE_NO_ISSUER_FLAG = &H00020000
        CERT_STORE_BASE_CRL_FLAG = &H00000100
        CERT_STORE_DELTA_CRL_FLAG = &H00000200
    End Enum

    Public Const CERT_SYSTEM_STORE_MASK  = &HFFFF0000



    Public Enum CertStoreRegistryLocValues
        CERT_SYSTEM_STORE_UNPROTECTED_FLAG = &H40000000
        CERT_SYSTEM_STORE_DEFER_READ_FLAG = &H20000000
    '  Location of the system store:
        CERT_SYSTEM_STORE_LOCATION_MASK = &H00FF0000
        CERT_SYSTEM_STORE_LOCATION_SHIFT = 16
    '   Registry: HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE
        CERT_SYSTEM_STORE_CURRENT_USER_ID = 1
        CERT_SYSTEM_STORE_LOCAL_MACHINE_ID = 2
    '   Registry: HKEY_LOCAL_MACHINE\Software\Microsoft\Cryptography\Services
        CERT_SYSTEM_STORE_CURRENT_SERVICE_ID = 4
        CERT_SYSTEM_STORE_SERVICES_ID = 5
    '   Registry: HKEY_USERS
        CERT_SYSTEM_STORE_USERS_ID = 6
    '   Registry: HKEY_CURRENT_USER\Software\Policies\Microsoft\SystemCertificates
        CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY_ID = 7
    '   Registry: HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\SystemCertificates
        CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY_ID = 8
    '   Registry: HKEY_LOCAL_MACHINE\Software\Microsoft\EnterpriseCertificates
        CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE_ID = 9
    '   Registry: HKEY_LOCAL_MACHINE\OSDATA\Software\Microsoft\WCOSCertificates
        CERT_SYSTEM_STORE_LOCAL_MACHINE_WCOS_ID = 10
        CERT_SYSTEM_STORE_CURRENT_USER = (CERT_SYSTEM_STORE_CURRENT_USER_ID << CERT_SYSTEM_STORE_LOCATION_SHIFT)
        CERT_SYSTEM_STORE_LOCAL_MACHINE = (CERT_SYSTEM_STORE_LOCAL_MACHINE_ID << CERT_SYSTEM_STORE_LOCATION_SHIFT)
        CERT_SYSTEM_STORE_CURRENT_SERVICE = (CERT_SYSTEM_STORE_CURRENT_SERVICE_ID << CERT_SYSTEM_STORE_LOCATION_SHIFT)
        CERT_SYSTEM_STORE_SERVICES = (CERT_SYSTEM_STORE_SERVICES_ID << CERT_SYSTEM_STORE_LOCATION_SHIFT)
        CERT_SYSTEM_STORE_USERS = (CERT_SYSTEM_STORE_USERS_ID << CERT_SYSTEM_STORE_LOCATION_SHIFT)
        CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY = (CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY_ID << CERT_SYSTEM_STORE_LOCATION_SHIFT)
        CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY = (CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY_ID << CERT_SYSTEM_STORE_LOCATION_SHIFT)
        CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE = (CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE_ID << CERT_SYSTEM_STORE_LOCATION_SHIFT)
        CERT_SYSTEM_STORE_LOCAL_MACHINE_WCOS = (CERT_SYSTEM_STORE_LOCAL_MACHINE_WCOS_ID << CERT_SYSTEM_STORE_LOCATION_SHIFT)
    End Enum
    Public Type CERT_SYSTEM_STORE_RELOCATE_PARA
        '    union {
        '        HKEY                hKeyBase;
        '        void                *pvBase;
        '    } DUMMYUNIONNAME;
        hKeyBase As LongPtr
        '    union {
        '        void                *pvSystemStore;
        '        LPCSTR              pszSystemStore;
        '        LPCWSTR             pwszSystemStore;
        '    } DUMMYUNIONNAME2;
        pSystemStore As LongPtr
    End Type

    Public Const CERT_GROUP_POLICY_SYSTEM_STORE_REGPATH  = "Software\Policies\Microsoft\SystemCertificates"
    ' +-------------------------------------------------------------------------
    '   EFS Defines
    ' --------------------------------------------------------------------------
    '  Registry path to the EFS EFSBlob SubKey - Value type is REG_BINARY
    Public Const CERT_EFSBLOB_REGPATH  = CERT_GROUP_POLICY_SYSTEM_STORE_REGPATH & "\EFS"
    Public Const CERT_EFSBLOB_VALUE_NAME  = "EFSBlob"
    ' +-------------------------------------------------------------------------
    '   Protected Root Defines
    ' --------------------------------------------------------------------------
    '  Registry path to the Protected Roots Flags SubKey
    Public Const CERT_PROT_ROOT_FLAGS_REGPATH = CERT_GROUP_POLICY_SYSTEM_STORE_REGPATH & "\Root\ProtectedRoots"
    '  The following is a REG_DWORD. The bit definitions follow.
    Public Const CERT_PROT_ROOT_FLAGS_VALUE_NAME  = "Flags"

    Public Enum CertStoreRegistryStoreFlags
        CERT_REGISTRY_STORE_REMOTE_FLAG = &H10000
    '  Set this flag if the contexts are to be persisted as a single serialized
    '  store in the registry. Mainly used for stores downloaded from the GPT.
    '  Such as the CurrentUserGroupPolicy or LocalMachineGroupPolicy stores.
        CERT_REGISTRY_STORE_SERIALIZED_FLAG = &H20000
    '  The following flags are for internal use. When set, the
    '  pvPara parameter passed to CertOpenStore is a pointer to the following
    '  data structure and not the HKEY. The above CERT_REGISTRY_STORE_REMOTE_FLAG
    '  is also set if hKeyBase was obtained via RegConnectRegistry().
        CERT_REGISTRY_STORE_CLIENT_GPT_FLAG = &H80000000
        CERT_REGISTRY_STORE_LM_GPT_FLAG = &H01000000
        CERT_REGISTRY_STORE_ROAMING_FLAG = &H40000
        CERT_REGISTRY_STORE_MY_IE_DIRTY_FLAG = &H80000
        CERT_REGISTRY_STORE_EXTERNAL_FLAG = &H100000
    End Enum

    Public Enum CertProtRootFlags
        CERT_PROT_ROOT_DISABLE_CURRENT_USER_FLAG = &H1
    '  Set the following flag to inhibit the adding of roots from the
    '  CurrentUser SystemRegistry "Root" store to the protected root list
    '  when the "Root" store is initially protected.
        CERT_PROT_ROOT_INHIBIT_ADD_AT_INIT_FLAG = &H2
    '  Set the following flag to inhibit the purging of protected roots from the
    '  CurrentUser SystemRegistry "Root" store that are
    '  also in the LocalMachine SystemRegistry "Root" store. Note, when not
    '  disabled, the purging is done silently without UI.
        CERT_PROT_ROOT_INHIBIT_PURGE_LM_FLAG = &H4
    '  Set the following flag to inhibit the opening of the LocalMachine's
    '  .AuthRoot physical store when opening the LocalMachine's "Root" system store.
    '  The .AuthRoot physical store open's the LocalMachine SystemRegistry
    '  "AuthRoot" store. The "AuthRoot" store contains the pre-installed
    '  SSL ServerAuth and the ActiveX Authenticode "root" certificates.
        CERT_PROT_ROOT_DISABLE_LM_AUTH_FLAG = &H8
    '  The semantics for the following legacy definition has been changed to be
    '  the same as for the CERT_PROT_ROOT_DISABLE_LM_AUTH_FLAG.
        CERT_PROT_ROOT_ONLY_LM_GPT_FLAG = &H8
    '  Set the following flag to disable the requiring of the issuing CA
    '  certificate being in the "NTAuth" system registry store found in the
    '  CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE store location.
    '  When set, CertVerifyCertificateChainPolicy(CERT_CHAIN_POLICY_NT_AUTH)
    '  will check that the chain has a valid name constraint for all name
    '  spaces, including UPN if the issuing CA isn't in the "NTAuth" store.
        CERT_PROT_ROOT_DISABLE_NT_AUTH_REQUIRED_FLAG = &H10
    '  Set the following flag to disable checking for not defined name
    '  constraints.
    '  When set, CertGetCertificateChain won't check for or set the following
    '  dwErrorStatus: CERT_TRUST_HAS_NOT_DEFINED_NAME_CONSTRAINT.
    '  In LH, checking for not defined name constraints is always disabled.
        CERT_PROT_ROOT_DISABLE_NOT_DEFINED_NAME_CONSTRAINT_FLAG = &H20
    '  Set the following flag to disallow the users to trust peer-trust
        CERT_PROT_ROOT_DISABLE_PEER_TRUST = &H10000
    End Enum

    Public Const CERT_PROT_ROOT_PEER_USAGES_VALUE_NAME  = "PeerUsages"
    Public Const CERT_PROT_ROOT_PEER_USAGES_VALUE_NAME_A  = "PeerUsages"

    Public Const CERT_PROT_ROOT_PEER_USAGES_DEFAULT_A = szOID_PKIX_KP_CLIENT_AUTH & vbNullChar & szOID_PKIX_KP_EMAIL_PROTECTION & vbNullChar & szOID_KP_EFS & vbNullChar

    Public Const CERT_TRUST_PUB_SAFER_GROUP_POLICY_REGPATH  = CERT_GROUP_POLICY_SYSTEM_STORE_REGPATH & "\TrustedPublisher\Safer"
    '  Registry path to the Local Machine system stores
    Public Const CERT_LOCAL_MACHINE_SYSTEM_STORE_REGPATH  = "Software\Microsoft\SystemCertificates"
    '  Registry path to the trusted publisher "Safer" local machine subkey
    Public Const CERT_TRUST_PUB_SAFER_LOCAL_MACHINE_REGPATH  = CERT_LOCAL_MACHINE_SYSTEM_STORE_REGPATH & "\TrustedPublisher\Safer"
    '  "Safer" subkey value names. All values are DWORDs.
    Public Const CERT_TRUST_PUB_AUTHENTICODE_FLAGS_VALUE_NAME  = "AuthenticodeFlags"

    Public Enum CertTrustPubFlags
        CERT_TRUST_PUB_ALLOW_TRUST_MASK = &H00000003
        CERT_TRUST_PUB_ALLOW_END_USER_TRUST = &H00000000
        CERT_TRUST_PUB_ALLOW_MACHINE_ADMIN_TRUST = &H00000001
        CERT_TRUST_PUB_ALLOW_ENTERPRISE_ADMIN_TRUST = &H00000002
    '  Set the following flag to enable revocation checking of the publisher
    '  chain.
        CERT_TRUST_PUB_CHECK_PUBLISHER_REV_FLAG = &H00000100
    '  Set the following flag to enable revocation checking of the time stamp
    '  chain.
        CERT_TRUST_PUB_CHECK_TIMESTAMP_REV_FLAG = &H00000200
    End Enum

    Public Const CERT_OCM_SUBCOMPONENTS_LOCAL_MACHINE_REGPATH  = "SOFTWARE\Microsoft\Windows\CurrentVersion\Setup\OC Manager\Subcomponents"
    '  REG_DWORD, 1 is installed, 0 is NOT installed
    Public Const CERT_OCM_SUBCOMPONENTS_ROOT_AUTO_UPDATE_VALUE_NAME  = "RootAutoUpdate"
    ' +-------------------------------------------------------------------------
    '   Root, Disallowed Certificate and Pin Rules AutoUpdate Defines
    ' --------------------------------------------------------------------------
    '  Registry path to the DisableRootAutoUpdate SubKey
    Public Const CERT_DISABLE_ROOT_AUTO_UPDATE_REGPATH  = CERT_GROUP_POLICY_SYSTEM_STORE_REGPATH & "\AuthRoot"
    '  The following disables Root, Disallowed Certificate and Pin Rules AutoUpdate
    '  REG_DWORD Value Name, 1 - disables, 0 - enables
    Public Const CERT_DISABLE_ROOT_AUTO_UPDATE_VALUE_NAME  = "DisableRootAutoUpdate"
    '  The following enables Disallowed Certificate and Pin Rules AutoUpdate.
    '  It takes precedence over the above registry setting.
    '  REG_DWORD Value Name, 1 - enables
    Public Const CERT_ENABLE_DISALLOWED_CERT_AUTO_UPDATE_VALUE_NAME  = "EnableDisallowedCertAutoUpdate"
    '  The following disables Pin Rules AutoUpdate.
    '  It takes precedence over the above registry setting.
    '  REG_DWORD Value Name, 1 - disables
    Public Const CERT_DISABLE_PIN_RULES_AUTO_UPDATE_VALUE_NAME  = "DisablePinRulesAutoUpdate"
    ' +-------------------------------------------------------------------------
    '   Auto Update Definitions
    ' --------------------------------------------------------------------------
    '  Registry path to the "Auto Update" local machine subkey
    Public Const CERT_AUTO_UPDATE_LOCAL_MACHINE_REGPATH  = CERT_LOCAL_MACHINE_SYSTEM_STORE_REGPATH & "\AuthRoot\AutoUpdate"
    '  Auto Update subkey value names.
    '  REG_SZ, URL to the directory containing the AutoUpdate files
    Public Const CERT_AUTO_UPDATE_ROOT_DIR_URL_VALUE_NAME  = "RootDirUrl"
    '  REG_SZ, URL to the AutoUpdate test staging directory containing the
    '  AutoUpdate files. certutil.exe will use for its -syncWithWU and
    '  -generateSSTFromWU verbs to override the default Windows Update URL.
    Public Const CERT_AUTO_UPDATE_SYNC_FROM_DIR_URL_VALUE_NAME  = "SyncFromDirUrl"
    ' +-------------------------------------------------------------------------
    '   AuthRoot Auto Update Definitions
    ' --------------------------------------------------------------------------
    '  Registry path to the AuthRoot "Auto Update" local machine subkey
    Public Const CERT_AUTH_ROOT_AUTO_UPDATE_LOCAL_MACHINE_REGPATH = CERT_AUTO_UPDATE_LOCAL_MACHINE_REGPATH
    '  AuthRoot Auto Update subkey value names.
    '  REG_SZ, URL to the directory containing the AuthRoots, CTL and Seq files
    Public Const CERT_AUTH_ROOT_AUTO_UPDATE_ROOT_DIR_URL_VALUE_NAME  = CERT_AUTO_UPDATE_ROOT_DIR_URL_VALUE_NAME
    '  REG_DWORD, seconds between syncs. 0 implies use default.
    Public Const CERT_AUTH_ROOT_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME  = "SyncDeltaTime"
    '  REG_DWORD, misc flags
    Public Const CERT_AUTH_ROOT_AUTO_UPDATE_FLAGS_VALUE_NAME  = "Flags"


    Public Enum CertRootAutoupdateFlags
        CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_UNTRUSTED_ROOT_LOGGING_FLAG = &H1
        CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_PARTIAL_CHAIN_LOGGING_FLAG = &H2
    '  By default a random query string is appended to the Auto Update URLs
    '  passed to CryptRetrieveObjectByUrlW. See the
    '  CRYPT_RANDOM_QUERY_STRING_RETRIEVAL flag for more details. Set
    '  this flag to not set this random query string. This might be the
    '  case when setting CERT_AUTO_UPDATE_ROOT_DIR_URL_VALUE_NAME where the
    '  server doesn't strip off the query string.
        CERT_AUTO_UPDATE_DISABLE_RANDOM_QUERY_STRING_FLAG = &H4
    End Enum

    Public Const CERT_AUTH_ROOT_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME  = "LastSyncTime"
    '  REG_BINARY, updated with last retrieved and verified authroot ctl
    Public Const CERT_AUTH_ROOT_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME  = "EncodedCtl"
    '  AuthRoot Auto Update filenames
    '  CTL containing the list of certs in the AuthRoot store
    Public Const CERT_AUTH_ROOT_CTL_FILENAME  = "authroot.stl"
    Public Const CERT_AUTH_ROOT_CTL_FILENAME_A  = "authroot.stl"
    '  Cab containing the above CTL
    Public Const CERT_AUTH_ROOT_CAB_FILENAME  = "authrootstl.cab"
    '  SequenceNumber (Formatted as big endian ascii hex)
    Public Const CERT_AUTH_ROOT_SEQ_FILENAME  = "authrootseq.txt"
    '  Root certs extension
    Public Const CERT_AUTH_ROOT_CERT_EXT  = ".crt"
    ' +-------------------------------------------------------------------------
    '   DisallowedCert Auto Update Definitions
    ' --------------------------------------------------------------------------
    '  DisallowedCert Auto Update subkey value names.
    '  REG_DWORD, seconds between syncs. 0 implies use default.
    Public Const CERT_DISALLOWED_CERT_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME  = "DisallowedCertSyncDeltaTime"
    '  REG_BINARY, updated with FILETIME of last wire retrieval of disallowed cert
    '  CTL
    Public Const CERT_DISALLOWED_CERT_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME  = "DisallowedCertLastSyncTime"
    '  REG_BINARY, updated with last retrieved and verified disallowed cert ctl
    Public Const CERT_DISALLOWED_CERT_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME  = "DisallowedCertEncodedCtl"
    '  DisallowedCert Auto Update filenames
    '  CTL containing the list of disallowed certs
    Public Const CERT_DISALLOWED_CERT_CTL_FILENAME  = "disallowedcert.stl"
    Public Const CERT_DISALLOWED_CERT_CTL_FILENAME_A  = "disallowedcert.stl"
    '  Cab containing disallowed certs  CTL
    Public Const CERT_DISALLOWED_CERT_CAB_FILENAME  = "disallowedcertstl.cab"
    '  DisallowedCert Auto Update CTL List Identifiers
    '  Disallowed Cert CTL List Identifier
    Public Const CERT_DISALLOWED_CERT_AUTO_UPDATE_LIST_IDENTIFIER  = "DisallowedCert_AutoUpdate_1"
    ' +-------------------------------------------------------------------------
    '   PinRules Auto Update Definitions
    ' --------------------------------------------------------------------------
    '  PinRules Auto Update subkey value names.
    '  REG_DWORD, seconds between syncs. 0 implies use default.
    Public Const CERT_PIN_RULES_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME  = "PinRulesSyncDeltaTime"
    '  REG_BINARY, updated with FILETIME of last wire retrieval of pin rules
    '  CTL
    Public Const CERT_PIN_RULES_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME  = "PinRulesLastSyncTime"
    '  REG_BINARY, updated with last retrieved and verified pin rules ctl
    Public Const CERT_PIN_RULES_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME  = "PinRulesEncodedCtl"
    '  PinRules Auto Update filenames
    '  CTL containing the list of pin rules
    Public Const CERT_PIN_RULES_CTL_FILENAME  = "pinrules.stl"
    Public Const CERT_PIN_RULES_CTL_FILENAME_A  = "pinrules.stl"
    '  Cab containing pin rules  CTL
    Public Const CERT_PIN_RULES_CAB_FILENAME  = "pinrulesstl.cab"
    '  Pin Rules Auto Update CTL List Identifiers
    '  Pin Rules CTL List Identifier
    Public Const CERT_PIN_RULES_AUTO_UPDATE_LIST_IDENTIFIER  = "PinRules_AutoUpdate_1"




    Public Const CERT_FILE_STORE_COMMIT_ENABLE_FLAG = &H10000

    Public Enum CertStoreLDAPFlags
        CERT_LDAP_STORE_SIGN_FLAG = &H10000
    '  Performs an A-Record only DNS lookup on the supplied host string.
    '  This prevents bogus DNS queries from being generated when resolving host
    '  names. Use this flag whenever passing a hostname as opposed to a
    '  domain name for the hostname parameter.
    '  See LDAP_OPT_AREC_EXCLUSIVE defined in winldap.h for more details.
        CERT_LDAP_STORE_AREC_EXCLUSIVE_FLAG = &H20000
    '  Set this flag if the LDAP session handle has already been opened. When
    '  set, pvPara points to the following CERT_LDAP_STORE_OPENED_PARA structure.
        CERT_LDAP_STORE_OPENED_FLAG = &H40000
        CERT_LDAP_STORE_UNBIND_FLAG = &H80000
    End Enum
    Public Type CERT_LDAP_STORE_OPENED_PARA
        pvLdapSessionHandle As LongPtr 'void ' The (LDAP *) handle returned by ldap_init
        pwszLdapUrl As LongPtr
    End Type

    Public Const CERT_IE_DIRTY_FLAGS_REGPATH = "Software\Microsoft\Cryptography\IEDirtyFlags"

    Public Type CERT_REGISTRY_STORE_ROAMING_PARA
        hKey As LongPtr
        pwszStoreDirectory As LongPtr
    End Type

    Public Type CERT_REGISTRY_STORE_CLIENT_GPT_PARA
        hKeyBase As LongPtr
        pwszRegPath As LongPtr
    End Type

    Public Const CRYPT_OID_OPEN_STORE_PROV_FUNC = "CertDllOpenStoreProv"

    Public Enum CertPropertyIDs
        CERT_KEY_PROV_HANDLE_PROP_ID = 1
        CERT_KEY_PROV_INFO_PROP_ID = 2  ' CRYPT_KEY_PROV_INFO
        CERT_SHA1_HASH_PROP_ID = 3
        CERT_MD5_HASH_PROP_ID = 4
        CERT_HASH_PROP_ID = CERT_SHA1_HASH_PROP_ID
        CERT_KEY_CONTEXT_PROP_ID = 5  ' CERT_KEY_CONTEXT
        CERT_KEY_SPEC_PROP_ID = 6
        CERT_IE30_RESERVED_PROP_ID = 7
        CERT_PUBKEY_HASH_RESERVED_PROP_ID = 8
        CERT_ENHKEY_USAGE_PROP_ID = 9
        CERT_CTL_USAGE_PROP_ID = CERT_ENHKEY_USAGE_PROP_ID
        CERT_NEXT_UPDATE_LOCATION_PROP_ID = 10
        CERT_FRIENDLY_NAME_PROP_ID = 11  ' string
        CERT_PVK_FILE_PROP_ID = 12
        CERT_DESCRIPTION_PROP_ID = 13  ' string
        CERT_ACCESS_STATE_PROP_ID = 14
        CERT_SIGNATURE_HASH_PROP_ID = 15
        CERT_SMART_CARD_DATA_PROP_ID = 16
        CERT_EFS_PROP_ID = 17
        CERT_FORTEZZA_DATA_PROP_ID = 18
        CERT_ARCHIVED_PROP_ID = 19
        CERT_KEY_IDENTIFIER_PROP_ID = 20
        CERT_AUTO_ENROLL_PROP_ID = 21  ' string:Template name
        CERT_PUBKEY_ALG_PARA_PROP_ID = 22
        CERT_CROSS_CERT_DIST_POINTS_PROP_ID = 23
        CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID = 24
        CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID = 25
        CERT_ENROLLMENT_PROP_ID = 26  ' RequestId+CADNS+CACN+Friendly Name
        CERT_DATE_STAMP_PROP_ID = 27  ' FILETIME
        CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = 28
        CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = 29
        CERT_EXTENDED_ERROR_INFO_PROP_ID = 30  ' string
    '  Note, 32 - 35 are reserved for the CERT, CRL, CTL and KeyId file element IDs.
    '        36 - 62 are reserved for future element IDs.
        CERT_RENEWAL_PROP_ID = 64
        CERT_ARCHIVED_KEY_HASH_PROP_ID = 65  ' Encrypted key hash
        CERT_AUTO_ENROLL_RETRY_PROP_ID = 66  ' AE_RETRY_INFO:cb+cRetry+FILETIME
        CERT_AIA_URL_RETRIEVED_PROP_ID = 67
        CERT_AUTHORITY_INFO_ACCESS_PROP_ID = 68
        CERT_BACKED_UP_PROP_ID = 69  ' VARIANT_BOOL+FILETIME
        CERT_OCSP_RESPONSE_PROP_ID = 70
        CERT_REQUEST_ORIGINATOR_PROP_ID = 71  ' string:machine DNS name
        CERT_SOURCE_LOCATION_PROP_ID = 72  ' string
        CERT_SOURCE_URL_PROP_ID = 73  ' string
        CERT_NEW_KEY_PROP_ID = 74
        CERT_OCSP_CACHE_PREFIX_PROP_ID = 75  ' string
        CERT_SMART_CARD_ROOT_INFO_PROP_ID = 76  ' CRYPT_SMART_CARD_ROOT_INFO
        CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID = 77
        CERT_NCRYPT_KEY_HANDLE_PROP_ID = 78
        CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID = 79
        CERT_SUBJECT_INFO_ACCESS_PROP_ID = 80
        CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 81
        CERT_CA_DISABLE_CRL_PROP_ID = 82
        CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID = 83
        CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID = 84
        CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 85
        CERT_SUBJECT_DISABLE_CRL_PROP_ID = 86
        CERT_CEP_PROP_ID = 87  ' Version+PropFlags+AuthType+UrlFlags+CESAuthType+Url+Id+CESUrl+ReqId
    '  88 reserved, originally used for CERT_CEP_PROP_ID
        CERT_SIGN_HASH_CNG_ALG_PROP_ID = 89  ' eg: "RSA/SHA1"
        CERT_SCARD_PIN_ID_PROP_ID = 90
        CERT_SCARD_PIN_INFO_PROP_ID = 91
        CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID = 92
        CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 93
        CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID = 94
        CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID = 95
        CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 96
        CERT_NO_EXPIRE_NOTIFICATION_PROP_ID = 97
    '  Following property isn't implicitly created via a GetProperty.
        CERT_AUTH_ROOT_SHA256_HASH_PROP_ID = 98
        CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID = 99
        CERT_HCRYPTPROV_TRANSFER_PROP_ID = 100
    '  Smart card reader image path
        CERT_SMART_CARD_READER_PROP_ID = 101  'string
    '  Send as trusted issuer
        CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID = 102  'boolean
        CERT_KEY_REPAIR_ATTEMPTED_PROP_ID = 103  ' FILETME
        CERT_DISALLOWED_FILETIME_PROP_ID = 104
        CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID = 105
    '  Smart card reader removable capabilities
        CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID = 106  ' boolean
        CERT_SHA256_HASH_PROP_ID = 107
        CERT_SCEP_SERVER_CERTS_PROP_ID = 108  ' Pkcs7
        CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID = 109  ' sha1 Thumbprint
        CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID = 110  ' sha1 Thumbprint
        CERT_SCEP_CA_CERT_PROP_ID = 111  ' sha1 Thumbprint
        CERT_SCEP_SIGNER_CERT_PROP_ID = 112  ' sha1 Thumbprint
        CERT_SCEP_NONCE_PROP_ID = 113  ' blob
    '  string: "CNGEncryptAlgId/CNGHashAlgId"  example: "3DES/SHA1"
        CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID = 114
        CERT_SCEP_FLAGS_PROP_ID = 115  ' DWORD
        CERT_SCEP_GUID_PROP_ID = 116  ' string
        CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID = 117  ' CERT_KEY_CONTEXT
    '  Binary: isolated
        CERT_ISOLATED_KEY_PROP_ID = 118  ' blob
        CERT_SERIAL_CHAIN_PROP_ID = 119
        CERT_KEY_CLASSIFICATION_PROP_ID = 120  ' DWORD CertKeyType
    '  1 byte value. Set to 1 if the certificate has the
    '  szOID_TLS_FEATURES_EXT extension and an integer set to 5
    '  correpsonding to the OCSP status_request TLS extension.
        CERT_OCSP_MUST_STAPLE_PROP_ID = 121
        CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID = 122
        CERT_NONCOMPLIANT_ROOT_URL_PROP_ID = 123  ' NULL terminated UNICODE string
        CERT_PIN_SHA256_HASH_PROP_ID = 124
        CERT_CLR_DELETE_KEY_PROP_ID = 125
        CERT_NOT_BEFORE_FILETIME_PROP_ID = 126
        CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID = 127
        CERT_DISALLOWED_CA_FILETIME_PROP_ID = 128
        CERT_SHA1_SHA256_HASH_PROP_ID = 129
        CERT_FIRST_RESERVED_PROP_ID = 130
        CERT_LAST_RESERVED_PROP_ID = &H00007FFF
        CERT_FIRST_USER_PROP_ID = &H00008000&
        CERT_LAST_USER_PROP_ID = &H0000FFFF&
    End Enum
    Public Enum CertKeyType
        KeyTypeOther = 0 ' Unknown
        KeyTypeVirtualSmartCard = 1
        KeyTypePhysicalSmartCard = 2
        KeyTypePassport = 3
        KeyTypePassportRemote = 4
        KeyTypePassportSmartCard = 5
        KeyTypeHardware = 6
        KeyTypeSoftware = 7
        KeyTypeSelfSigned = 8
    End Enum

    Public Const szOID_CERT_PROP_ID_PREFIX  = "1.3.6.1.4.1.311.10.11."
    '  Use szOID_CERT_PROP_ID(CERT_KEY_IDENTIFIER_PROP_ID) instead:
    Public Const szOID_CERT_KEY_IDENTIFIER_PROP_ID  = "1.3.6.1.4.1.311.10.11.20"
    '  Use szOID_CERT_PROP_ID(CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID) instead:
    Public Const szOID_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID  = "1.3.6.1.4.1.311.10.11.28"
    '  Use szOID_CERT_PROP_ID(CERT_SUBJECT_NAME_MD5_HASH_PROP_ID) instead:
    Public Const szOID_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID  = "1.3.6.1.4.1.311.10.11.29"
    '  Use szOID_CERT_PROP_ID(CERT_MD5_HASH_PROP_ID) instead:
    Public Const szOID_CERT_MD5_HASH_PROP_ID  = "1.3.6.1.4.1.311.10.11.4"
    '  Use szOID_CERT_PROP_ID(CERT_SHA256_HASH_PROP_ID) instead:
    Public Const szOID_CERT_SHA256_HASH_PROP_ID  = "1.3.6.1.4.1.311.10.11.107"
    '  Use szOID_CERT_PROP_ID(CERT_SIGNATURE_HASH_PROP_ID) instead:
    Public Const szOID_CERT_SIGNATURE_HASH_PROP_ID  = "1.3.6.1.4.1.311.10.11.15"
    '  The CERT_SIGNATURE_HASH_PROP_ID and CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID
    '  properties are used for disallowed hashes.
    Public Const szOID_DISALLOWED_HASH  = szOID_CERT_SIGNATURE_HASH_PROP_ID
    '  Use szOID_CERT_PROP_ID(CERT_DISALLOWED_FILETIME_PROP_ID) instead:
    Public Const szOID_CERT_DISALLOWED_FILETIME_PROP_ID  = "1.3.6.1.4.1.311.10.11.104"
    '  Use szOID_CERT_PROP_ID(CERT_DISALLOWED_CA_FILETIME_PROP_ID) instead:
    Public Const szOID_CERT_DISALLOWED_CA_FILETIME_PROP_ID  = "1.3.6.1.4.1.311.10.11.128"

    'Not sure how to convert these:
    ' // Ansi OID string from Property Id:
    ' #define szOID_CERT_PROP_ID(PropId) szOID_CERT_PROP_ID_PREFIX _szPROP_ID(PropId)

    ' // Unicode OID string from Property Id:
    ' #define __CRYPT32WTEXT(quote)           L##quote
    ' #define _CRYPT32WTEXT(quote)            __CRYPT32WTEXT(quote)
    ' #define wszOID_CERT_PROP_ID(PropId) \
            ' _CRYPT32WTEXT(szOID_CERT_PROP_ID_PREFIX) _CRYPT32WTEXT(_szPROP_ID(PropId))

    Public Enum CertAccessStateFlags
        CERT_ACCESS_STATE_WRITE_PERSIST_FLAG = &H1
    '  Set if context resides in a SYSTEM or SYSTEM_REGISTRY store.
        CERT_ACCESS_STATE_SYSTEM_STORE_FLAG = &H2
    '  Set if context resides in a LocalMachine SYSTEM or SYSTEM_REGISTRY store.
        CERT_ACCESS_STATE_LM_SYSTEM_STORE_FLAG = &H4
    '  Set if context resides in a GroupPolicy SYSTEM or SYSTEM_REGISTRY store.
        CERT_ACCESS_STATE_GP_SYSTEM_STORE_FLAG = &H8
    '  Set if context resides in a SHARED_USER physical store.
        CERT_ACCESS_STATE_SHARED_USER_FLAG = &H10
    End Enum
        
    Public Const szOID_ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION  = "1.3.6.1.4.1.311.60.3.1"
    Public Const szOID_ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION  = "1.3.6.1.4.1.311.60.3.2"
    Public Const szOID_ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL  = "1.3.6.1.4.1.311.60.3.3"



        

    Public Enum CertSetPropFlags
        CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG = &H80000000
    '  Set this flag to inhibit the persisting of this property
        CERT_SET_PROPERTY_INHIBIT_PERSIST_FLAG = &H40000000
    End Enum

    Public Enum CertStorePropIds
        CERT_STORE_LOCALIZED_NAME_PROP_ID = &H1000
    End Enum

    Public Type CERT_CREATE_CONTEXT_PARA
        cbSize As Long
        pfnFree As LongPtr 'PFN_CRYPT_FREE ' OPTIONAL
        pvFree As LongPtr 'void* ' OPTIONAL
        ' Only applicable to CERT_STORE_CTL_CONTEXT when
        ' CERT_CREATE_CONTEXT_SORTED_FLAG is set in dwFlags.
        pfnSort As LongPtr 'PFN_CERT_CREATE_CONTEXT_SORT_FUNC ' OPTIONAL
        pvSort As LongPtr 'void* ' OPTIONAL
    End Type



    Public Type CERT_REVOCATION_CRL_INFO
        cbSize As Long
        pBaseCrlContext As LongPtr 'PCCRL_CONTEXT
        pDeltaCrlContext As LongPtr 'PCCRL_CONTEXT
        ' When revoked, points to entry in either of the above CRL contexts.
        ' Don't free.
        pCrlEntry As LongPtr 'PCRL_ENTRY
        fDeltaCrlEntry As BOOL ' TRUE if in pDeltaCrlContext
    End Type

    Public Type CRL_ENTRY
        SerialNumber As CRYPT_INTEGER_BLOB
        RevocationDate As FILETIME
        cExtension As Long
        rgExtension As LongPtr 'PCERT_EXTENSION
    End Type

    Public Type CERT_REVOCATION_PARA
        cbSize As Long
        pIssuerCert As LongPtr 'PCCERT_CONTEXT
        cCertStore As Long
        rgCertStore As LongPtr 'HCERTSTORE
        hCrlStore As LongPtr 'HCERTSTORE
        pftTimeToUse As LongPtr 'LPFILETIME
        '#ifdef CERT_REVOCATION_PARA_HAS_EXTRA_FIELDS
        ' Note, if you #define CERT_REVOCATION_PARA_HAS_EXTRA_FIELDS, then, you
        ' must zero all unused fields in this data structure.
        ' More fields could be added in a future release.
        ' 0 uses revocation handler's default timeout.
        dwUrlRetrievalTimeout As Long ' milliseconds
        ' When set, checks and attempts to retrieve a CRL where
        ' ThisUpdate >= (CurrentTime - dwFreshnessTime). Otherwise, defaults
        ' to using the CRL's NextUpdate.
        fCheckFreshnessTime As BOOL
        dwFreshnessTime As Long ' seconds
        ' If NULL, revocation handler gets the current time
        pftCurrentTime As LongPtr 'LPFILETIME
        ' If nonNULL, a CRL revocation type handler updates with the base and
        ' possibly the delta CRL used. Note, *pCrlInfo must be initialized
        ' by the caller. Any nonNULL CRL contexts are freed. Any updated
        ' CRL contexts must be freed by the caller.
        ' The CRL info is only applicable to the last context checked. If
        ' interested in this information, then, CertVerifyRevocation should be
        ' called with cContext = 1.
        pCrlInfo As LongPtr 'PCERT_REVOCATION_CRL_INFO
        ' If nonNULL, any cached information before this time is considered
        ' time invalid and forces a wire retrieval.
        pftCacheResync As LongPtr 'LPFILETIME
        ' If nonNULL, CertGetCertificateChain() parameters used by the caller.
        ' Enables independent OCSP signer certificate chain verification.
        pChainPara As LongPtr 'PCERT_REVOCATION_CHAIN_PARA
        '#endif
    End Type
    Public Enum CertCRLReason
        CRL_REASON_UNSPECIFIED = 0
        CRL_REASON_KEY_COMPROMISE = 1
        CRL_REASON_CA_COMPROMISE = 2
        CRL_REASON_AFFILIATION_CHANGED = 3
        CRL_REASON_SUPERSEDED = 4
        CRL_REASON_CESSATION_OF_OPERATION = 5
        CRL_REASON_CERTIFICATE_HOLD = 6
        CRL_REASON_REMOVE_FROM_CRL = 8
        CRL_REASON_PRIVILEGE_WITHDRAWN = 9
        CRL_REASON_AA_COMPROMISE = 10
    End Enum

    Public Enum CertCRLDistPointChoices
        CRL_DIST_POINT_NO_NAME = 0
        CRL_DIST_POINT_FULL_NAME = 1
        CRL_DIST_POINT_ISSUER_RDN_NAME = 2
    End Enum
    Public Type CRL_DIST_POINT_NAME
        dwDistPointNameChoice As CertCRLDistPointChoices
        '    union {
        FullName As CERT_ALT_NAME_INFO ' 1
        ' Not implemented      IssuerRDN;      // 2
        '    } DUMMYUNIONNAME;
    End Type
    Public Type CRL_DIST_POINT
        DistPointName As CRL_DIST_POINT_NAME ' OPTIONAL
        ReasonFlags As CRYPT_BIT_BLOB ' OPTIONAL
        CRLIssuer As CERT_ALT_NAME_INFO ' OPTIONAL
    End Type

    Public Enum CertCRLReasonFlags
        CRL_REASON_UNUSED_FLAG = &H80
        CRL_REASON_KEY_COMPROMISE_FLAG = &H40
        CRL_REASON_CA_COMPROMISE_FLAG = &H20
        CRL_REASON_AFFILIATION_CHANGED_FLAG = &H10
        CRL_REASON_SUPERSEDED_FLAG = &H08
        CRL_REASON_CESSATION_OF_OPERATION_FLAG = &H04
        CRL_REASON_CERTIFICATE_HOLD_FLAG = &H02
        CRL_REASON_PRIVILEGE_WITHDRAWN_FLAG = &H01
    '  Byte[1]
        CRL_REASON_AA_COMPROMISE_FLAG = &H80
    End Enum


    Public Type CRL_DIST_POINTS_INFO
        cDistPoint As Long
        rgDistPoint As LongPtr 'PCRL_DIST_POINT
    End Type

    Public Type CROSS_CERT_DIST_POINTS_INFO
        ' Seconds between syncs. 0 implies use client default.
        dwSyncDeltaTime As Long
        cDistPoint As Long
        rgDistPoint As LongPtr 'PCERT_ALT_NAME_INFO
    End Type

    Public Type CERT_PAIR
        Forward As CERT_BLOB ' OPTIONAL, if Forward.cbData == 0, omitted
        Reverse As CERT_BLOB ' OPTIONAL, if Reverse.cbData == 0, omitted
    End Type

    Public Type CRL_ISSUING_DIST_POINT
        DistPointName As CRL_DIST_POINT_NAME ' OPTIONAL
        fOnlyContainsUserCerts As BOOL
        fOnlyContainsCACerts As BOOL
        OnlySomeReasonFlags As CRYPT_BIT_BLOB ' OPTIONAL
        fIndirectCRL As BOOL
    End Type

    Public Type CERT_GENERAL_SUBTREE
        Base As CERT_ALT_NAME_ENTRY
        dwMinimum As Long
        fMaximum As BOOL
        dwMaximum As Long
    End Type

    Public Type CERT_NAME_CONSTRAINTS_INFO
        cPermittedSubtree As Long
        rgPermittedSubtree As LongPtr 'PCERT_GENERAL_SUBTREE
        cExcludedSubtree As Long
        rgExcludedSubtree As LongPtr 'PCERT_GENERAL_SUBTREE
    End Type

    Public Enum CertSortedCRLExtFlags
        SORTED_CTL_EXT_FLAGS_OFFSET = (0 * 4)
        SORTED_CTL_EXT_COUNT_OFFSET = (1 * 4)
        SORTED_CTL_EXT_MAX_COLLISION_OFFSET = (2 * 4)
        SORTED_CTL_EXT_HASH_BUCKET_OFFSET = (3 * 4)
    '  If the SubjectIdentifiers are a MD5 or SHA1 hash, the following flag is
    '  set. When set, the first 4 bytes of the SubjectIdentifier are used as
    '  the dwhash. Otherwise, the SubjectIdentifier bytes are hashed into dwHash.
    '  In either case the HashBucket index = dwHash % cHashBucket.
        SORTED_CTL_EXT_HASHED_SUBJECT_IDENTIFIER_FLAG = &H1
    End Enum

    Public Type CERT_DSS_PARAMETERS
        p As CRYPT_UINT_BLOB
        q As CRYPT_UINT_BLOB
        g As CRYPT_UINT_BLOB
    End Type

    Public Const CERT_DSS_R_LEN  = 20
    Public Const CERT_DSS_S_LEN  = 20
    Public Const CERT_DSS_SIGNATURE_LEN  = (CERT_DSS_R_LEN + CERT_DSS_S_LEN)
    '  Sequence of 2 unsigned integers (the extra +1 is for a potential leading
    '  0x00 to make the integer unsigned)
    Public Const CERT_MAX_ASN_ENCODED_DSS_SIGNATURE_LEN  = (2 + 2 * (2 + 20 + 1))

    Public Type CERT_DH_PARAMETERS
        p As CRYPT_UINT_BLOB
        g As CRYPT_UINT_BLOB
    End Type

    Public Type CERT_ECC_SIGNATURE
        r As CRYPT_UINT_BLOB
        s As CRYPT_UINT_BLOB
    End Type

    Public Type CERT_X942_DH_VALIDATION_PARAMS
        seed As CRYPT_BIT_BLOB
        pgenCounter As Long
    End Type
    Public Type CERT_X942_DH_PARAMETERS
        p As CRYPT_UINT_BLOB ' odd prime, p = jq + 1
        g As CRYPT_UINT_BLOB ' generator, g
        q As CRYPT_UINT_BLOB ' factor of p - 1, OPTIONAL
        j As CRYPT_UINT_BLOB ' subgroup factor, OPTIONAL
        pValidationParams As LongPtr 'PCERT_X942_DH_VALIDATION_PARAMS ' OPTIONAL
    End Type

    Public Const CRYPT_X942_COUNTER_BYTE_LENGTH  = 4
    Public Const CRYPT_X942_KEY_LENGTH_BYTE_LENGTH  = 4
    Public Const CRYPT_X942_PUB_INFO_BYTE_LENGTH  = (512 / 8)
    Public Type CRYPT_X942_OTHER_INFO
        pszContentEncryptionObjId As String 'ANSI
        rgbCounter(0 To (CRYPT_X942_COUNTER_BYTE_LENGTH - 1)) As Byte
        rgbKeyLength(0 To (CRYPT_X942_KEY_LENGTH_BYTE_LENGTH - 1)) As Byte
        PubInfo As CRYPT_DATA_BLOB ' OPTIONAL
    End Type

    Public Const CRYPT_ECC_CMS_SHARED_INFO_SUPPPUBINFO_BYTE_LENGTH = 4
    Public Type CRYPT_ECC_CMS_SHARED_INFO
        Algorithm As CRYPT_ALGORITHM_IDENTIFIER
        EntityUInfo As CRYPT_DATA_BLOB ' OPTIONAL
        rgbSuppPubInfo(0 To (CRYPT_ECC_CMS_SHARED_INFO_SUPPPUBINFO_BYTE_LENGTH - 1)) As Byte
    End Type

    Public Enum CryptRC2Versions
        CRYPT_RC2_40BIT_VERSION = 160
        CRYPT_RC2_56BIT_VERSION = 52
        CRYPT_RC2_64BIT_VERSION = 120
        CRYPT_RC2_128BIT_VERSION = 58
    End Enum
    Public Type CRYPT_RC2_CBC_PARAMETERS
        dwVersion As CryptRC2Versions
        fIV As BOOL ' set if has following IV
        rgbIV(0 To 7) As Byte
    End Type

    Public Type CRYPT_SMIME_CAPABILITY
        pszObjId As String 'ANSI
        Parameters As CRYPT_OBJID_BLOB
    End Type
    Public Type CRYPT_SMIME_CAPABILITIES
        cCapability As Long
        rgCapability As LongPtr 'PCRYPT_SMIME_CAPABILITY
    End Type

    Public Type CERT_QC_STATEMENT
        pszStatementId As String ' pszObjId 'ANSI
        StatementInfo As CRYPT_OBJID_BLOB ' OPTIONAL
    End Type
    Public Type CERT_QC_STATEMENTS_EXT_INFO
        cStatement As Long
        rgStatement As LongPtr 'PCERT_QC_STATEMENT
    End Type

    '// European Union
    Public Const szOID_QC_EU_COMPLIANCE  = "0.4.0.1862.1.1"
    '  Secure Signature Creation Device
    Public Const szOID_QC_SSCD  = "0.4.0.1862.1.4"


    Public Const PKCS_RSA_SSA_PSS_TRAILER_FIELD_BC = 1

    Public Type CRYPT_MASK_GEN_ALGORITHM
        pszObjId As String 'ANSI
        HashAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
    End Type
    Public Type CRYPT_RSA_SSA_PSS_PARAMETERS
        HashAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        MaskGenAlgorithm As CRYPT_MASK_GEN_ALGORITHM
        dwSaltLength As Long
        dwTrailerField As Long
    End Type

    Public Type CRYPT_PSOURCE_ALGORITHM
        pszObjId As String 'ANSI
        EncodingParameters As CRYPT_DATA_BLOB
    End Type

    Public Type CRYPT_RSAES_OAEP_PARAMETERS
        HashAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        MaskGenAlgorithm As CRYPT_MASK_GEN_ALGORITHM
        PSourceAlgorithm As CRYPT_PSOURCE_ALGORITHM
    End Type

    Public Const szOID_VERISIGN_PRIVATE_6_9  = "2.16.840.1.113733.1.6.9"
    '  Octet String containing IA5 string: lower case 32 char hex string
    Public Const szOID_VERISIGN_ONSITE_JURISDICTION_HASH  = "2.16.840.1.113733.1.6.11"
    '  Octet String containing Bit string
    Public Const szOID_VERISIGN_BITSTRING_6_13  = "2.16.840.1.113733.1.6.13"
    '  EKU
    Public Const szOID_VERISIGN_ISS_STRONG_CRYPTO  = "2.16.840.1.113733.1.8.1"
    ' +-------------------------------------------------------------------------
    '   Verisign SCEP Signed Pkcs7 authenticated attribute Object Identifiers
    ' --------------------------------------------------------------------------
    '  Signed decimal strings encoded as Printable String
    Public Const szOIDVerisign_MessageType  = "2.16.840.1.113733.1.9.2"
    Public Const szOIDVerisign_PkiStatus  = "2.16.840.1.113733.1.9.3"
    Public Const szOIDVerisign_FailInfo  = "2.16.840.1.113733.1.9.4"
    '  Binary data encoded as Octet String
    Public Const szOIDVerisign_SenderNonce  = "2.16.840.1.113733.1.9.5"
    Public Const szOIDVerisign_RecipientNonce  = "2.16.840.1.113733.1.9.6"
    '  Binary data converted to hexadecimal string and encoded as Printable String
    Public Const szOIDVerisign_TransactionID  = "2.16.840.1.113733.1.9.7"
    ' +-------------------------------------------------------------------------
    '   Netscape Certificate Extension Object Identifiers
    ' --------------------------------------------------------------------------
    Public Const szOID_NETSCAPE  = "2.16.840.1.113730"
    Public Const szOID_NETSCAPE_CERT_EXTENSION  = "2.16.840.1.113730.1"
    Public Const szOID_NETSCAPE_CERT_TYPE  = "2.16.840.1.113730.1.1"
    Public Const szOID_NETSCAPE_BASE_URL  = "2.16.840.1.113730.1.2"
    Public Const szOID_NETSCAPE_REVOCATION_URL  = "2.16.840.1.113730.1.3"
    Public Const szOID_NETSCAPE_CA_REVOCATION_URL  = "2.16.840.1.113730.1.4"
    Public Const szOID_NETSCAPE_CERT_RENEWAL_URL  = "2.16.840.1.113730.1.7"
    Public Const szOID_NETSCAPE_CA_POLICY_URL  = "2.16.840.1.113730.1.8"
    Public Const szOID_NETSCAPE_SSL_SERVER_NAME  = "2.16.840.1.113730.1.12"
    Public Const szOID_NETSCAPE_COMMENT  = "2.16.840.1.113730.1.13"
    ' +-------------------------------------------------------------------------
    '   Netscape Certificate Data Type Object Identifiers
    ' --------------------------------------------------------------------------
    Public Const szOID_NETSCAPE_DATA_TYPE  = "2.16.840.1.113730.2"
    Public Const szOID_NETSCAPE_CERT_SEQUENCE  = "2.16.840.1.113730.2.5"

    Public Enum CryptNetscapeCertType
        NETSCAPE_SSL_CLIENT_AUTH_CERT_TYPE = &H80
        NETSCAPE_SSL_SERVER_AUTH_CERT_TYPE = &H40
        NETSCAPE_SMIME_CERT_TYPE = &H20
        NETSCAPE_SIGN_CERT_TYPE = &H10
        NETSCAPE_SSL_CA_CERT_TYPE = &H04
        NETSCAPE_SMIME_CA_CERT_TYPE = &H02
        NETSCAPE_SIGN_CA_CERT_TYPE = &H01
    End Enum

    Public Const szOID_CT_PKI_DATA  = "1.3.6.1.5.5.7.12.2"
    '  Content Type (response)
    Public Const szOID_CT_PKI_RESPONSE  = "1.3.6.1.5.5.7.12.3"
    '  Signature value that only contains the hash octets. The parameters for
    '  this algorithm must be present and must be encoded as NULL.
    Public Const szOID_PKIX_NO_SIGNATURE  = "1.3.6.1.5.5.7.6.2"
    Public Const szOID_CMC  = "1.3.6.1.5.5.7.7"
    Public Const szOID_CMC_STATUS_INFO  = "1.3.6.1.5.5.7.7.1"
    Public Const szOID_CMC_IDENTIFICATION  = "1.3.6.1.5.5.7.7.2"
    Public Const szOID_CMC_IDENTITY_PROOF  = "1.3.6.1.5.5.7.7.3"
    Public Const szOID_CMC_DATA_RETURN  = "1.3.6.1.5.5.7.7.4"
    '  Transaction Id (integer)
    Public Const szOID_CMC_TRANSACTION_ID  = "1.3.6.1.5.5.7.7.5"
    '  Sender Nonce (octet string)
    Public Const szOID_CMC_SENDER_NONCE  = "1.3.6.1.5.5.7.7.6"
    '  Recipient Nonce (octet string)
    Public Const szOID_CMC_RECIPIENT_NONCE  = "1.3.6.1.5.5.7.7.7"
    Public Const szOID_CMC_ADD_EXTENSIONS  = "1.3.6.1.5.5.7.7.8"
    Public Const szOID_CMC_ENCRYPTED_POP  = "1.3.6.1.5.5.7.7.9"
    Public Const szOID_CMC_DECRYPTED_POP  = "1.3.6.1.5.5.7.7.10"
    Public Const szOID_CMC_LRA_POP_WITNESS  = "1.3.6.1.5.5.7.7.11"
    '  Issuer Name + Serial
    Public Const szOID_CMC_GET_CERT  = "1.3.6.1.5.5.7.7.15"
    '  Issuer Name [+ CRL Name] + Time [+ Reasons]
    Public Const szOID_CMC_GET_CRL  = "1.3.6.1.5.5.7.7.16"
    '  Issuer Name + Serial [+ Reason] [+ Effective Time] [+ Secret] [+ Comment]
    Public Const szOID_CMC_REVOKE_REQUEST  = "1.3.6.1.5.5.7.7.17"
    '  (octet string) URL-style parameter list (IA5?)
    Public Const szOID_CMC_REG_INFO  = "1.3.6.1.5.5.7.7.18"
    Public Const szOID_CMC_RESPONSE_INFO  = "1.3.6.1.5.5.7.7.19"
    '  (octet string)
    Public Const szOID_CMC_QUERY_PENDING  = "1.3.6.1.5.5.7.7.21"
    Public Const szOID_CMC_ID_POP_LINK_RANDOM  = "1.3.6.1.5.5.7.7.22"
    Public Const szOID_CMC_ID_POP_LINK_WITNESS  = "1.3.6.1.5.5.7.7.23"
    '  optional Name + Integer
    Public Const szOID_CMC_ID_CONFIRM_CERT_ACCEPTANCE  = "1.3.6.1.5.5.7.7.24"
    Public Const szOID_CMC_ADD_ATTRIBUTES  = "1.3.6.1.4.1.311.10.10.1"

    Public Type CMC_TAGGED_ATTRIBUTE
        dwBodyPartID As Long
        Attribute As CRYPT_ATTRIBUTE
    End Type
    Public Type CMC_TAGGED_CERT_REQUEST
        dwBodyPartID As Long
        SignedCertRequest As CRYPT_DER_BLOB
    End Type
    Public Enum CmcTaggedCertRequestUnionChoice
        CMC_TAGGED_CERT_REQUEST_CHOICE = 1
    End Enum
    Public Type CMC_TAGGED_REQUEST
        dwTaggedRequestChoice As CmcTaggedCertRequestUnionChoice
        '    union {
        ' CMC_TAGGED_CERT_REQUEST_CHOICE
        pTaggedCertRequest As LongPtr 'PCMC_TAGGED_CERT_REQUEST
        '    } DUMMYUNIONNAME;
    End Type
    Public Type CMC_TAGGED_OTHER_MSG
        dwBodyPartID As Long
        pszObjId As String 'ANSI
        Value As CRYPT_OBJID_BLOB
    End Type

    Public Type CMC_DATA_INFO
        cTaggedAttribute As Long
        rgTaggedAttribute As LongPtr 'PCMC_TAGGED_ATTRIBUTE
        cTaggedRequest As Long
        rgTaggedRequest As LongPtr 'PCMC_TAGGED_REQUEST
        cTaggedContentInfo As Long
        rgTaggedContentInfo As LongPtr 'PCMC_TAGGED_CONTENT_INFO
        cTaggedOtherMsg As Long
        rgTaggedOtherMsg As LongPtr 'PCMC_TAGGED_OTHER_MSG
    End Type
    Public Type CMC_RESPONSE_INFO
        cTaggedAttribute As Long
        rgTaggedAttribute As LongPtr 'PCMC_TAGGED_ATTRIBUTE
        cTaggedContentInfo As Long
        rgTaggedContentInfo As LongPtr 'PCMC_TAGGED_CONTENT_INFO
        cTaggedOtherMsg As Long
        rgTaggedOtherMsg As LongPtr 'PCMC_TAGGED_OTHER_MSG
    End Type
    Public Type CMC_PEND_INFO
        PendToken As CRYPT_DATA_BLOB
        PendTime As FILETIME
    End Type

    Public Enum CryptCmcOtherInfoChoice
        CMC_OTHER_INFO_NO_CHOICE = 0
        CMC_OTHER_INFO_FAIL_CHOICE = 1
        CMC_OTHER_INFO_PEND_CHOICE = 2
    End Enum
    Public Enum CryptCmcStatus
        CMC_STATUS_SUCCESS = 0
    '  Request failed, more information elsewhere in the message
        CMC_STATUS_FAILED = 2
    '  The request body part has not yet been processed. Requester is responsible
    '  to poll back. May only be returned for certificate request operations.
        CMC_STATUS_PENDING = 3
    '  The requested operation is not supported
        CMC_STATUS_NO_SUPPORT = 4
    '  Confirmation using the idConfirmCertAcceptance control is required
    '  before use of certificate
        CMC_STATUS_CONFIRM_REQUIRED = 5
    End Enum
    Public Enum CryptCmcFailInfoValues
    '  dwFailInfo values
    '  Unrecognized or unsupported algorithm
        CMC_FAIL_BAD_ALG = 0
    '  Integrity check failed
        CMC_FAIL_BAD_MESSAGE_CHECK = 1
    '  Transaction not permitted or supported
        CMC_FAIL_BAD_REQUEST = 2
    '  Message time field was not sufficiently close to the system time
        CMC_FAIL_BAD_TIME = 3
    '  No certificate could be identified matching the provided criteria
        CMC_FAIL_BAD_CERT_ID = 4
    '  A requested X.509 extension is not supported by the recipient CA.
        CMC_FAIL_UNSUPORTED_EXT = 5
    '  Private key material must be supplied
        CMC_FAIL_MUST_ARCHIVE_KEYS = 6
    '  Identification Attribute failed to verify
        CMC_FAIL_BAD_IDENTITY = 7
    '  Server requires a POP proof before issuing certificate
        CMC_FAIL_POP_REQUIRED = 8
    '  POP processing failed
        CMC_FAIL_POP_FAILED = 9
    '  Server policy does not allow key re-use
        CMC_FAIL_NO_KEY_REUSE = 10
        CMC_FAIL_INTERNAL_CA_ERROR = 11
        CMC_FAIL_TRY_LATER = 12
    End Enum

    Public Type CMC_STATUS_INFO
        dwStatus As CryptCmcStatus
        cBodyList As Long
        rgdwBodyList As Long
        pwszStatusString As LongPtr ' OPTIONAL
        dwOtherInfoChoice As CryptCmcOtherInfoChoice
        ' union  {
            ' // CMC_OTHER_INFO_NO_CHOICE
            ' //  none
            ' // CMC_OTHER_INFO_FAIL_CHOICE
            ' DWORD                       dwFailInfo;
            ' // CMC_OTHER_INFO_PEND_CHOICE
            ' PCMC_PEND_INFO              pPendInfo;
        ' } DUMMYUNIONNAME;
        /*[ TypeHint(CryptCmcFailInfoValues) ] */ PendOrFailInfo As LongPtr
    End Type

    Public Type CMC_ADD_EXTENSIONS_INFO
        dwCmcDataReference As Long
        cCertReference As Long
        rgdwCertReference As LongPtr 'DWORD*
        cExtension As Long
        rgExtension As LongPtr 'PCERT_EXTENSION
    End Type
    Public Type CMC_ADD_ATTRIBUTES_INFO
        dwCmcDataReference As Long
        cCertReference As Long
        rgdwCertReference As LongPtr 'DWORD*
        cAttribute As Long
        rgAttribute As LongPtr 'PCRYPT_ATTRIBUTE
    End Type
    Public Type CERT_TEMPLATE_EXT
        pszObjId As String 'ANSI
        dwMajorVersion As Long
        fMinorVersion As BOOL ' TRUE for a minor version
        dwMinorVersion As Long
    End Type

    Public Type CERT_HASHED_URL
        HashAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        Hash As CRYPT_HASH_BLOB
        pwszUrl As LongPtr ' Encoded as IA5, Optional for
        ' biometric data
    End Type
    Public Type CERT_LOGOTYPE_DETAILS
        pwszMimeType As LongPtr ' Encoded as IA5
        cHashedUrl As Long
        rgHashedUrl As LongPtr 'PCERT_HASHED_URL
    End Type
    Public Type CERT_LOGOTYPE_REFERENCE
        cHashedUrl As Long
        rgHashedUrl As LongPtr 'PCERT_HASHED_URL
    End Type

    Public Enum CertLogoTypeImageInfoChoice
        CERT_LOGOTYPE_GRAY_SCALE_IMAGE_INFO_CHOICE = 1
        CERT_LOGOTYPE_COLOR_IMAGE_INFO_CHOICE = 2
    End Enum
    Public Enum CertLogoTypeImageResChoice
        CERT_LOGOTYPE_NO_IMAGE_RESOLUTION_CHOICE = 0
        CERT_LOGOTYPE_BITS_IMAGE_RESOLUTION_CHOICE = 1
        CERT_LOGOTYPE_TABLE_SIZE_IMAGE_RESOLUTION_CHOICE = 2
    End Enum
    Public Type CERT_LOGOTYPE_IMAGE_INFO
        ' CERT_LOGOTYPE_GRAY_SCALE_IMAGE_INFO_CHOICE or
        ' CERT_LOGOTYPE_COLOR_IMAGE_INFO_CHOICE
        dwLogotypeImageInfoChoice As CertLogoTypeImageInfoChoice
        dwFileSize As Long ' In octets
        dwXSize As Long ' Horizontal size in pixels
        dwYSize As Long ' Vertical size in pixels
        dwLogotypeImageResolutionChoice As CertLogoTypeImageResChoice
        '    union {
        ' CERT_LOGOTYPE_NO_IMAGE_RESOLUTION_CHOICE
        ' No resolution value
        ' CERT_LOGOTYPE_BITS_IMAGE_RESOLUTION_CHOICE
        '        DWORD                       dwNumBits;      // Resolution in bits
        ' CERT_LOGOTYPE_TABLE_SIZE_IMAGE_RESOLUTION_CHOICE
        '       DWORD                       dwTableSize;    // Number of color or grey tones
        '    } DUMMYUNIONNAME;
        dwNumBitsOrTableSize As Long
        pwszLanguage As LongPtr ' Optional. Encoded as IA5.
                                ' RFC 3066 Language Tag
    End Type
    Public Type CERT_LOGOTYPE_IMAGE
        LogotypeDetails As CERT_LOGOTYPE_DETAILS
        pLogotypeImageInfo As LongPtr 'PCERT_LOGOTYPE_IMAGE_INFO ' Optional
    End Type
    Public Type CERT_LOGOTYPE_AUDIO_INFO
        dwFileSize As Long ' In octets
        dwPlayTime As Long ' In milliseconds
        dwChannels As Long ' 1=mono, 2=stereo, 4=quad
        dwSampleRate As Long ' Optional. 0 => not present.
        ' Samples per second
        pwszLanguage As LongPtr ' Optional. Encoded as IA5.
        ' RFC 3066 Language Tag
    End Type
    Public Type CERT_LOGOTYPE_AUDIO
        LogotypeDetails As CERT_LOGOTYPE_DETAILS
        pLogotypeAudioInfo As LongPtr 'PCERT_LOGOTYPE_AUDIO_INFO ' Optional
    End Type
    Public Type CERT_LOGOTYPE_DATA
        cLogotypeImage As Long
        rgLogotypeImage As LongPtr 'PCERT_LOGOTYPE_IMAGE
        cLogotypeAudio As Long
        rgLogotypeAudio As LongPtr 'PCERT_LOGOTYPE_AUDIO
    End Type
    Public Enum CertLogoTypeImageTypeInfoChoice
        CERT_LOGOTYPE_DIRECT_INFO_CHOICE = 1
        CERT_LOGOTYPE_INDIRECT_INFO_CHOICE = 2
    End Enum
    Public Type CERT_LOGOTYPE_INFO
        dwLogotypeInfoChoice As CertLogoTypeImageTypeInfoChoice
        '    union {
        ' CERT_LOGOTYPE_DIRECT_INFO_CHOICE
        '        PCERT_LOGOTYPE_DATA         pLogotypeDirectInfo;
        ' CERT_LOGOTYPE_INDIRECT_INFO_CHOICE
        '        PCERT_LOGOTYPE_REFERENCE    pLogotypeIndirectInfo;
        '    } DUMMYUNIONNAME;
        pLogoTypeDirectOrIndirect As LongPtr
    End Type
    Public Type CERT_OTHER_LOGOTYPE_INFO
        pszObjId As String 'ANSI
        LogotypeInfo As CERT_LOGOTYPE_INFO
    End Type
    Public Const szOID_LOYALTY_OTHER_LOGOTYPE  = "1.3.6.1.5.5.7.20.1"
    Public Const szOID_BACKGROUND_OTHER_LOGOTYPE  = "1.3.6.1.5.5.7.20.2"
    Public Type CERT_LOGOTYPE_EXT_INFO
        cCommunityLogo As Long
        rgCommunityLogo As LongPtr 'PCERT_LOGOTYPE_INFO
        pIssuerLogo As LongPtr 'PCERT_LOGOTYPE_INFO ' Optional
        pSubjectLogo As LongPtr 'PCERT_LOGOTYPE_INFO ' Optional
        cOtherLogo As Long
        rgOtherLogo As LongPtr 'PCERT_OTHER_LOGOTYPE_INFO
    End Type

    Public Enum CertTypeOfBiometricDataChoice
        CERT_BIOMETRIC_PREDEFINED_DATA_CHOICE = 1
        CERT_BIOMETRIC_OID_DATA_CHOICE = 2
    End Enum
    Public Const CERT_BIOMETRIC_PICTURE_TYPE  = 0
    Public Const CERT_BIOMETRIC_SIGNATURE_TYPE  = 1
    Public Type CERT_BIOMETRIC_DATA
        dwTypeOfBiometricDataChoice As CertTypeOfBiometricDataChoice
        '    union {
        ' CERT_BIOMETRIC_PREDEFINED_DATA_CHOICE
        '        DWORD                       dwPredefined;
        ' CERT_BIOMETRIC_OID_DATA_CHOICE
        '        LPSTR                       pszObjId;
        '    } DUMMYUNIONNAME;
        dwDefinedOrPszObjId As LongPtr
        HashedUrl As CERT_HASHED_URL ' pwszUrl is Optional.
    End Type
    Public Type CERT_BIOMETRIC_EXT_INFO
        cBiometricData As Long
        rgBiometricData As LongPtr 'PCERT_BIOMETRIC_DATA
    End Type


    Public Type CERT_REVOCATION_STATUS
        cbSize As Long
        dwIndex As Long
        dwError As Long
        dwReason As CertCRLReason
        ' Depending on cbSize, the following fields may optionally be returned.
        ' The Freshness time is only applicable to the last context checked. If
        ' interested in this information, then, CertVerifyRevocation should be
        ' called with cContext = 1.
        ' fHasFreshnessTime is only set if we are able to retrieve revocation
        ' information. For a CRL its CurrentTime - ThisUpdate.
        fHasFreshnessTime As BOOL
        dwFreshnessTime As Long ' seconds
    End Type

    Public Enum CertRevocationTypes
        CERT_CONTEXT_REVOCATION_TYPE = 1
    End Enum
    Public Enum CertVerifyRevFlags
        CERT_VERIFY_REV_CHAIN_FLAG = &H00000001
    ' +-------------------------------------------------------------------------
    '  CERT_VERIFY_CACHE_ONLY_BASED_REVOCATION prevents the revocation handler from
    '  accessing any network based resources for revocation checking
    ' --------------------------------------------------------------------------
        CERT_VERIFY_CACHE_ONLY_BASED_REVOCATION = &H00000002
    ' +-------------------------------------------------------------------------
    '   By default, the dwUrlRetrievalTimeout in pRevPara is the timeout used
    '   for each URL wire retrieval. When the following flag is set,
    '   dwUrlRetrievalTimeout is the accumulative timeout across all URL wire
    '   retrievals.
    ' --------------------------------------------------------------------------
        CERT_VERIFY_REV_ACCUMULATIVE_TIMEOUT_FLAG = &H00000004
    ' +-------------------------------------------------------------------------
    '   When the following flag is set, only OCSP responses are used for
    '   doing revocation checking. If the certificate doesn't have any
    '   OCSP AIA URLs, dwError is set to CRYPT_E_NOT_IN_REVOCATION_DATABASE.
    ' --------------------------------------------------------------------------
        CERT_VERIFY_REV_SERVER_OCSP_FLAG = &H00000008
    ' +-------------------------------------------------------------------------
    '   When the following flag is set, only the OCSP AIA URL is used if
    '   present in the subject. If the subject doesn't have an OCSP AIA URL, then,
    '   the CDP URLs are used.
    ' --------------------------------------------------------------------------
        CERT_VERIFY_REV_NO_OCSP_FAILOVER_TO_CRL_FLAG = &H00000010
    ' +-------------------------------------------------------------------------
    '   When the following flag is set, only wire retrieval for OCSP responses.
    ' --------------------------------------------------------------------------
        CERT_VERIFY_REV_SERVER_OCSP_WIRE_ONLY_FLAG = &H00000020
    End Enum

    Public Enum CryptAcquireFlags
        CRYPT_ACQUIRE_CACHE_FLAG = &H00000001
        CRYPT_ACQUIRE_USE_PROV_INFO_FLAG = &H00000002
        CRYPT_ACQUIRE_COMPARE_KEY_FLAG = &H00000004
        CRYPT_ACQUIRE_NO_HEALING = &H00000008
        CRYPT_ACQUIRE_SILENT_FLAG = &H00000040
        CRYPT_ACQUIRE_WINDOW_HANDLE_FLAG = &H00000080
        CRYPT_ACQUIRE_NCRYPT_KEY_FLAGS_MASK = &H00070000
        CRYPT_ACQUIRE_ALLOW_NCRYPT_KEY_FLAG = &H00010000
        CRYPT_ACQUIRE_PREFER_NCRYPT_KEY_FLAG = &H00020000
        CRYPT_ACQUIRE_ONLY_NCRYPT_KEY_FLAG = &H00040000
    End Enum

    Public Enum CryptExportCertStoreFlags
        REPORT_NO_PRIVATE_KEY = &H0001
        REPORT_NOT_ABLE_TO_EXPORT_PRIVATE_KEY = &H0002
        EXPORT_PRIVATE_KEYS = &H0004
        PKCS12_INCLUDE_EXTENDED_PROPERTIES = &H0010
        PKCS12_PROTECT_TO_DOMAIN_SIDS = &H0020
        PKCS12_EXPORT_SILENT = &H0040
        PKCS12_EXPORT_PBES2_PARAMS = &H0080
        PKCS12_DISABLE_ENCRYPT_CERTIFICATES = &H0100
        PKCS12_ENCRYPT_CERTIFICATES = &H0200
        PKCS12_EXPORT_ECC_CURVE_PARAMETERS = &H1000
        PKCS12_EXPORT_ECC_CURVE_OID = &H2000
        PKCS12_EXPORT_RESERVED_MASK = &Hffff0000
    End Enum

    Public Enum CryptImportCertStoreFlags
        PKCS12_IMPORT_SILENT = &H00000040
        CRYPT_USER_KEYSET = &H00001000
        PKCS12_PREFER_CNG_KSP = &H00000100  ' prefer using CNG KSP
        PKCS12_ALWAYS_CNG_KSP = &H00000200  ' always use CNG KSP
        PKCS12_ONLY_CERTIFICATES = &H00000400
        PKCS12_ONLY_NOT_ENCRYPTED_CERTIFICATES = &H00000800
        PKCS12_ALLOW_OVERWRITE_KEY = &H00004000  ' allow overwrite existing key
        PKCS12_NO_PERSIST_KEY = &H00008000&  ' key will not be persisted
        PKCS12_VIRTUAL_ISOLATION_KEY = &H00010000  ' key will be saved into VSM
        PKCS12_IMPORT_RESERVED_MASK = &Hffff0000
        PKCS12_OBJECT_LOCATOR_ALL_IMPORT_FLAGS = (PKCS12_ALWAYS_CNG_KSP Or PKCS12_NO_PERSIST_KEY Or PKCS12_IMPORT_SILENT Or PKCS12_INCLUDE_EXTENDED_PROPERTIES)
    End Enum

    Public Const PKCS12_PBKDF2_ID_HMAC_SHA1  = "1.2.840.113549.2.7"
    Public Const PKCS12_PBKDF2_ID_HMAC_SHA256  = "1.2.840.113549.2.9"
    Public Const PKCS12_PBKDF2_ID_HMAC_SHA384  = "1.2.840.113549.2.10"
    Public Const PKCS12_PBKDF2_ID_HMAC_SHA512  = "1.2.840.113549.2.11"

    Public Const PKCS12_ONLY_CERTIFICATES_PROVIDER_TYPE  = 0
    Public Const PKCS12_ONLY_CERTIFICATES_PROVIDER_NAME  = "PfxProvider"
    Public Const PKCS12_ONLY_CERTIFICATES_CONTAINER_NAME  = "PfxContainer"

    Public Enum CrypFindCertFlags
        CRYPT_FIND_USER_KEYSET_FLAG = &H00000001
        CRYPT_FIND_MACHINE_KEYSET_FLAG = &H00000002
        CRYPT_FIND_SILENT_KEYSET_FLAG = &H00000040
    End Enum

    Public Enum CryptCertRdn
        CERT_RDN_ANY_TYPE = 0
        CERT_RDN_ENCODED_BLOB = 1
        CERT_RDN_OCTET_STRING = 2
        CERT_RDN_NUMERIC_STRING = 3
        CERT_RDN_PRINTABLE_STRING = 4
        CERT_RDN_TELETEX_STRING = 5
        CERT_RDN_T61_STRING = 5
        CERT_RDN_VIDEOTEX_STRING = 6
        CERT_RDN_IA5_STRING = 7
        CERT_RDN_GRAPHIC_STRING = 8
        CERT_RDN_VISIBLE_STRING = 9
        CERT_RDN_ISO646_STRING = 9
        CERT_RDN_GENERAL_STRING = 10
        CERT_RDN_UNIVERSAL_STRING = 11
        CERT_RDN_INT4_STRING = 11
        CERT_RDN_BMP_STRING = 12
        CERT_RDN_UNICODE_STRING = 12
        CERT_RDN_UTF8_STRING = 13
        CERT_RDN_TYPE_MASK = &H000000FF
        CERT_RDN_FLAGS_MASK = &HFF000000
    ' +-------------------------------------------------------------------------
    '   Flags that can be or'ed with the above Value Type when encoding/decoding
    ' --------------------------------------------------------------------------
    '  For encoding: when set, CERT_RDN_T61_STRING is selected instead of
    '  CERT_RDN_UNICODE_STRING if all the unicode characters are <= 0xFF
        CERT_RDN_ENABLE_T61_UNICODE_FLAG = &H80000000
    '  For encoding: when set, CERT_RDN_UTF8_STRING is selected instead of
    '  CERT_RDN_UNICODE_STRING.
        CERT_RDN_ENABLE_UTF8_UNICODE_FLAG = &H20000000
    '  For encoding: when set, CERT_RDN_UTF8_STRING is selected instead of
    '  CERT_RDN_PRINTABLE_STRING for DirectoryString types. Also,
    '  enables CERT_RDN_ENABLE_UTF8_UNICODE_FLAG.
        CERT_RDN_FORCE_UTF8_UNICODE_FLAG = &H10000000
    '  For encoding: when set, the characters aren't checked to see if they
    '  are valid for the Value Type.
        CERT_RDN_DISABLE_CHECK_TYPE_FLAG = &H40000000
    '  For decoding: by default, CERT_RDN_T61_STRING values are initially decoded
    '  as UTF8. If the UTF8 decoding fails, then, decoded as 8 bit characters.
    '  Setting this flag skips the initial attempt to decode as UTF8.
        CERT_RDN_DISABLE_IE4_UTF8_FLAG = &H01000000
    '  For encoding: If the string contains E/Email RDN, and the email-address
    '  (in RDN value) contains unicode characters outside of ASCII character set,
    '  the localpart and the hostname portion of the email-address would be first
    '  encoded in punycode and then the resultant Email-Address would be attempted
    '  to be encoded as IA5String. Punycode encoding of hostname is done on
    '  label-by-label basis.
    '  For decoding: If the name contains E/Email RDN, and local part or hostname
    '  portion of the email-address contains punycode encoded IA5String,
    '  The RDN string value is converted to its unicode equivalent.
        CERT_RDN_ENABLE_PUNYCODE_FLAG = &H02000000
    End Enum

    Public Enum CryptDecodeFlags
        CRYPT_DECODE_NOCOPY_FLAG = &H1
    '  For CryptDecodeObject(), by default the pbEncoded is the "to be signed"
    '  plus its signature. Set the following flag, if pbEncoded points to only
    '  the "to be signed".
    '  This flag is applicable to
    '       X509_CERT_TO_BE_SIGNED
    '       X509_CERT_CRL_TO_BE_SIGNED
    '       X509_CERT_REQUEST_TO_BE_SIGNED
    '       X509_KEYGEN_REQUEST_TO_BE_SIGNED
        CRYPT_DECODE_TO_BE_SIGNED_FLAG = &H2
    '  When the following flag is set, the OID strings are allocated in
    '  crypt32.dll and shared instead of being copied into the returned
    '  data structure. This flag may be set if crypt32.dll isn't unloaded
    '  before the caller is unloaded.
        CRYPT_DECODE_SHARE_OID_STRING_FLAG = &H4
    '  By default the signature bytes are reversed. The following flag can
    '  be set to inhibit the byte reversal.
    '  This flag is applicable to
    '       X509_CERT_TO_BE_SIGNED
        CRYPT_DECODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG = &H8
    '  When the following flag is set the called decode function allocates
    '  memory for the decoded structure. A pointer to the allocated structure
    '  is returned in pvStructInfo. If pDecodePara or pDecodePara->pfnAlloc is
    '  NULL, then, LocalAlloc is called for the allocation and LocalFree must
    '  be called to do the free. Otherwise, pDecodePara->pfnAlloc is called
    '  for the allocation.
    '  *pcbStructInfo is ignored on input and updated with the length of the
    '  allocated, decoded structure.
    '  This flag may also be set in the CryptDecodeObject API. Since
    '  CryptDecodeObject doesn't take a pDecodePara, LocalAlloc is always
    '  called for the allocation which must be freed by calling LocalFree.
        CRYPT_DECODE_ALLOC_FLAG = &H8000&
    '  The following flag is applicable when decoding X509_UNICODE_NAME,
    '  X509_UNICODE_NAME_VALUE or X509_UNICODE_ANY_STRING.
    '  By default, CERT_RDN_T61_STRING values are initially decoded
    '  as UTF8. If the UTF8 decoding fails, then, decoded as 8 bit characters.
    '  Setting this flag skips the initial attempt to decode as UTF8.
        CRYPT_UNICODE_NAME_DECODE_DISABLE_IE4_UTF8_FLAG = CERT_RDN_DISABLE_IE4_UTF8_FLAG
    '  The following flag is applicable when decoding structures that contain
    '  IA5String encoding of punycode encoded host name (in DNS Name/ URL/
    '  EmailAddress). Decoded value contains the the unicode equivalent of
    '  punycode encoded data.
        CRYPT_DECODE_ENABLE_PUNYCODE_FLAG = &H02000000
    '  The following flag is applicable when decoding structures that contain
    '  IA5String that is UTF8 percent encoded in the path part of a url.
        CRYPT_DECODE_ENABLE_UTF8PERCENT_FLAG = &H04000000
    '  The following flag is applicable when decoding structures that contain
    '  an IA5String that is a punycode and UTF8-percent encoded host name and path (URL). The decoded
    '  value contains the Unicode equivalent of the punycode encoded host name and UTF8 percent
    '  encoded path.
        CRYPT_DECODE_ENABLE_IA5CONVERSION_FLAG = (CRYPT_DECODE_ENABLE_PUNYCODE_FLAG Or CRYPT_DECODE_ENABLE_UTF8PERCENT_FLAG)
    End Enum

    Public Type CRYPT_DECODE_PARA
        cbSize As Long
        pfnAlloc As LongPtr 'PFN_CRYPT_ALLOC ' OPTIONAL
        pfnFree As LongPtr 'PFN_CRYPT_FREE ' OPTIONAL
    End Type
    Public Type CRYPT_ENCODE_PARA
        cbSize As Long
        pfnAlloc As LongPtr 'PFN_CRYPT_ALLOC
        pfnFree As LongPtr 'PFN_CRYPT_FREE
    End Type

    Public Enum CryptFormatObjStrFlags
        CRYPT_FORMAT_STR_MULTI_LINE = &H0001
        CRYPT_FORMAT_STR_NO_HEX = &H0010
    End Enum
    Public Enum CryptFormatObjFlags
        CRYPT_FORMAT_SIMPLE = &H0001
        CRYPT_FORMAT_X509 = &H0002
        CRYPT_FORMAT_OID = &H0004
        CRYPT_FORMAT_RDN_SEMICOLON = &H0100
        CRYPT_FORMAT_RDN_CRLF = &H0200
        CRYPT_FORMAT_RDN_UNQUOTE = &H0400
        CRYPT_FORMAT_RDN_REVERSE = &H0800
        CRYPT_FORMAT_COMMA = &H1000
        CRYPT_FORMAT_SEMICOLON = CRYPT_FORMAT_RDN_SEMICOLON
        CRYPT_FORMAT_CRLF = CRYPT_FORMAT_RDN_CRLF
    End Enum

    Public Enum CryptOidFlags
        CRYPT_OID_INFO_OID_KEY = 1
        CRYPT_OID_INFO_NAME_KEY = 2
        CRYPT_OID_INFO_ALGID_KEY = 3
        CRYPT_OID_INFO_SIGN_KEY = 4
        CRYPT_OID_INFO_CNG_ALGID_KEY = 5
        CRYPT_OID_INFO_CNG_SIGN_KEY = 6
    '  Set the following in the above dwKeyType parameter to restrict public keys
    '  valid for signing or encrypting
    '  certenrolld_begin -- CRYPT_*_KEY_FLAG
        CRYPT_OID_INFO_OID_KEY_FLAGS_MASK = &HFFFF0000
        CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG = &H80000000
        CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG = &H40000000
    '  The following flag can be set in above dwGroupId parameter to disable
    '  searching the directory server
        CRYPT_OID_DISABLE_SEARCH_DS_FLAG = &H80000000
    End Enum
    Public Enum CryptyOidGroupIdFlags
        CRYPT_OID_PREFER_CNG_ALGID_FLAG = &H40000000
    End Enum

    Public Const CRYPT_OID_INFO_OID_GROUP_BIT_LEN_MASK  = &H0FFF0000
    Public Const CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT  = 16



    Public Enum CryptOidGroupIds
        CRYPT_HASH_ALG_OID_GROUP_ID = 1
        CRYPT_ENCRYPT_ALG_OID_GROUP_ID = 2
        CRYPT_PUBKEY_ALG_OID_GROUP_ID = 3
        CRYPT_SIGN_ALG_OID_GROUP_ID = 4
        CRYPT_RDN_ATTR_OID_GROUP_ID = 5
        CRYPT_EXT_OR_ATTR_OID_GROUP_ID = 6
        CRYPT_ENHKEY_USAGE_OID_GROUP_ID = 7
        CRYPT_POLICY_OID_GROUP_ID = 8
        CRYPT_TEMPLATE_OID_GROUP_ID = 9
        CRYPT_KDF_OID_GROUP_ID = 10
        CRYPT_LAST_OID_GROUP_ID = 10
        CRYPT_FIRST_ALG_OID_GROUP_ID = CRYPT_HASH_ALG_OID_GROUP_ID
        CRYPT_LAST_ALG_OID_GROUP_ID = CRYPT_SIGN_ALG_OID_GROUP_ID
    End Enum

    Public Enum CryptOidParamFlags
        CRYPT_OID_INHIBIT_SIGNATURE_FORMAT_FLAG = &H00000001
        CRYPT_OID_USE_PUBKEY_PARA_FOR_PKCS7_FLAG = &H00000002
        CRYPT_OID_NO_NULL_ALGORITHM_PARA_FLAG = &H00000004
        CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG = &H80000000
        CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG = &H40000000
        CRYPT_OID_USE_CURVE_NAME_FOR_ENCODE_FLAG = &H20000000
        CRYPT_OID_USE_CURVE_PARAMETERS_FOR_ENCODE_FLAG = &H10000000
    End Enum

    Public Const CALG_OID_INFO_CNG_ONLY  = &HFFFFFFFF
    '  Algorithm is defined in the encoded parameters. Only supported
    '  using CNG.
    Public Const CALG_OID_INFO_PARAMETERS  = &HFFFFFFFE

    Public Type CRYPT_OID_INFO
        cbSize As Long
        pszOID As LongPtr
        pwszName As LongPtr
        dwGroupId As CryptOidGroupIds
        '    union {
        '        DWORD       dwValue;
        AlgidValueOrLength As ALG_ID
        '        DWORD       dwLength;
        '    } DUMMYUNIONNAME;
        ExtraInfo As CRYPT_DATA_BLOB
        pwszCNGAlgid As LongPtr
        pwszCNGExtraAlgid As LongPtr
    End Type

    Public Const CRYPT_OID_INFO_HASH_PARAMETERS_ALGORITHM  = "CryptOIDInfoHashParameters"
    Public Const CRYPT_OID_INFO_ECC_PARAMETERS_ALGORITHM  = "CryptOIDInfoECCParameters"
    Public Const CRYPT_OID_INFO_MGF1_PARAMETERS_ALGORITHM  = "CryptOIDInfoMgf1Parameters"
    Public Const CRYPT_OID_INFO_NO_SIGN_ALGORITHM  = "CryptOIDInfoNoSign"
    Public Const CRYPT_OID_INFO_OAEP_PARAMETERS_ALGORITHM  = "CryptOIDInfoOAEPParameters"
    Public Const CRYPT_OID_INFO_ECC_WRAP_PARAMETERS_ALGORITHM  = "CryptOIDInfoECCWrapParameters"
    Public Const CRYPT_OID_INFO_NO_PARAMETERS_ALGORITHM  = "CryptOIDInfoNoParameters"

    Public Enum CryptRegOidFlags
        CRYPT_INSTALL_OID_INFO_BEFORE_FLAG = 1
    End Enum

    Public Const CRYPT_LOCALIZED_NAME_ENCODING_TYPE  = 0
    Public Const CRYPT_LOCALIZED_NAME_OID  = "LocalizedNames"

    Public Type CRYPT_HASH_MESSAGE_PARA
        cbSize As Long
        dwMsgEncodingType As CRYPT_CERT_ENCODING_TYPE
        hCryptProv As LongPtr 'HCRYPTPROV_LEGACY
        HashAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        pvHashAuxInfo As LongPtr '*void
    End Type

    Public Enum CryptVerifyCertSubjects
        CRYPT_VERIFY_CERT_SIGN_SUBJECT_BLOB = 1
    '  pvSubject :: PCRYPT_DATA_BLOB
        CRYPT_VERIFY_CERT_SIGN_SUBJECT_CERT = 2
    '  pvSubject :: PCCERT_CONTEXT
        CRYPT_VERIFY_CERT_SIGN_SUBJECT_CRL = 3
    '  pvSubject :: PCCRL_CONTEXT
        CRYPT_VERIFY_CERT_SIGN_SUBJECT_OCSP_BASIC_SIGNED_RESPONSE = 4
    End Enum
    Public Enum CryptVerifyCertIssuer
        CRYPT_VERIFY_CERT_SIGN_ISSUER_PUBKEY = 1
    '  pvIssuer :: PCERT_PUBLIC_KEY_INFO
        CRYPT_VERIFY_CERT_SIGN_ISSUER_CERT = 2
    '  pvIssuer :: PCCERT_CONTEXT
        CRYPT_VERIFY_CERT_SIGN_ISSUER_CHAIN = 3
    '  pvIssuer :: PCCERT_CHAIN_CONTEXT
        CRYPT_VERIFY_CERT_SIGN_ISSUER_NULL = 4
    End Enum

    Public Enum CryptVerifyCertFlags
        CRYPT_VERIFY_CERT_SIGN_DISABLE_MD2_MD4_FLAG = &H00000001
        CRYPT_VERIFY_CERT_SIGN_SET_STRONG_PROPERTIES_FLAG = &H00000002
        CRYPT_VERIFY_CERT_SIGN_RETURN_STRONG_PROPERTIES_FLAG = &H00000004
    End Enum

    Public Type CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO
        CertSignHashCNGAlgPropData As CRYPT_DATA_BLOB
        CertIssuerPubKeyBitLengthPropData As CRYPT_DATA_BLOB
    End Type

    Public Const CRYPT_VERIFY_CERT_SIGN_CHECK_WEAK_HASH_FLAG = &H00000008

    Public Type CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO
        cCNGHashAlgid As Long
        rgpwszCNGHashAlgid As LongPtr '*PCWSTR
        dwWeakIndex As Long
    End Type

    Public Enum CryptCRLVersions
        CRL_V1 = 0
        CRL_V2 = 1
    End Enum
    Public Type CRL_INFO
        dwVersion As CryptCRLVersions
        SignatureAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        Issuer As CERT_NAME_BLOB
        ThisUpdate As FILETIME
        NextUpdate As FILETIME
        cCRLEntry As Long
        rgCRLEntry As LongPtr 'PCRL_ENTRY
        cExtension As Long
        rgExtension As LongPtr 'PCERT_EXTENSION
    End Type

    Public Type OCSP_SIGNATURE_INFO
        SignatureAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        Signature As CRYPT_BIT_BLOB
        cCertEncoded As Long
        rgCertEncoded As LongPtr 'PCERT_BLOB
    End Type
    Public Type OCSP_SIGNED_REQUEST_INFO
        ToBeSigned As CRYPT_DER_BLOB ' Encoded OCSP_REQUEST
        pOptionalSignatureInfo As LongPtr 'POCSP_SIGNATURE_INFO ' NULL, no signature
    End Type
    Public Type OCSP_CERT_ID
        HashAlgorithm As CRYPT_ALGORITHM_IDENTIFIER ' Normally SHA1
        IssuerNameHash As CRYPT_HASH_BLOB ' Hash of encoded name
        IssuerKeyHash As CRYPT_HASH_BLOB ' Hash of PublicKey bits
        SerialNumber As CRYPT_INTEGER_BLOB
    End Type
    Public Type OCSP_REQUEST_ENTRY
        CertId As OCSP_CERT_ID
        cExtension As Long
        rgExtension As LongPtr 'PCERT_EXTENSION
    End Type
    Public Type OCSP_REQUEST_INFO
        dwVersion As Long
        pRequestorName As LongPtr 'PCERT_ALT_NAME_ENTRY ' OPTIONAL
        cRequestEntry As Long
        rgRequestEntry As LongPtr 'POCSP_REQUEST_ENTRY
        cExtension As Long
        rgExtension As LongPtr 'PCERT_EXTENSION
    End Type
    Public Const OCSP_REQUEST_V1 = 0
    Public Enum CertOCSPResponseStatus
        OCSP_SUCCESSFUL_RESPONSE = 0
        OCSP_MALFORMED_REQUEST_RESPONSE = 1
        OCSP_INTERNAL_ERROR_RESPONSE = 2
        OCSP_TRY_LATER_RESPONSE = 3
    '  4 is not used
        OCSP_SIG_REQUIRED_RESPONSE = 5
        OCSP_UNAUTHORIZED_RESPONSE = 6
    End Enum
    Public Type OCSP_RESPONSE_INFO
        dwStatus As CertOCSPResponseStatus
        pszObjId As String 'ANSI ' OPTIONAL, may be NULL
        Value As CRYPT_OBJID_BLOB ' OPTIONAL
    End Type
    Public Const szOID_PKIX_OCSP_BASIC_SIGNED_RESPONSE = "1.3.6.1.5.5.7.48.1.1"
    Public Type OCSP_BASIC_SIGNED_RESPONSE_INFO
        ToBeSigned As CRYPT_DER_BLOB ' Encoded OCSP_BASIC_RESPONSE
        SignatureInfo As OCSP_SIGNATURE_INFO
    End Type
    Public Type OCSP_BASIC_REVOKED_INFO
        RevocationDate As FILETIME
        ' See X509_CRL_REASON_CODE for list of reason codes
        dwCrlReasonCode As Long
    End Type
    Public Enum CertOCSPBasicStatus
        OCSP_BASIC_GOOD_CERT_STATUS = 0
        OCSP_BASIC_REVOKED_CERT_STATUS = 1
        OCSP_BASIC_UNKNOWN_CERT_STATUS = 2
    End Enum
    Public Type OCSP_BASIC_RESPONSE_ENTRY
        CertId As OCSP_CERT_ID
        dwCertStatus As CertOCSPBasicStatus
        '    union {
        ' OCSP_BASIC_GOOD_CERT_STATUS
        ' OCSP_BASIC_UNKNOWN_CERT_STATUS
        '  No additional information
        ' OCSP_BASIC_REVOKED_CERT_STATUS
        pRevokedInfo As LongPtr 'POCSP_BASIC_REVOKED_INFO
        '    } DUMMYUNIONNAME;
        ThisUpdate As FILETIME
        NextUpdate As FILETIME ' Optional, zero filetime implies
        ' never expires
        cExtension As Long
        rgExtension As LongPtr 'PCERT_EXTENSION
    End Type
    Public Enum CertOCSPResponderIdChoice
        OCSP_BASIC_BY_NAME_RESPONDER_ID = 1
        OCSP_BASIC_BY_KEY_RESPONDER_ID = 2
    End Enum
    Public Enum CertOCSPBasicResponseVerions
    OCSP_BASIC_RESPONSE_V1
    End Enum
    [Description("Note: Both union options are aliases for the same blob struct.")]
    Public Type OCSP_BASIC_RESPONSE_INFO
        dwVersion As CertOCSPBasicResponseVerions
        dwResponderIdChoice As CertOCSPResponderIdChoice
        '    union {
        '        // OCSP_BASIC_BY_NAME_RESPONDER_ID
        '        CERT_NAME_BLOB              ByNameResponderId;
        ' OCSP_BASIC_BY_KEY_RESPONDER_ID
        '        CRYPT_HASH_BLOB              ByKeyResponderId;
        '    } DUMMYUNIONNAME;
        [Description("Note: Both union options are aliases for the same blob struct.")]
        ResponderId As CRYPTOAPI_BLOB
        ProducedAt As FILETIME
        cResponseEntry As Long
        rgResponseEntry As LongPtr 'POCSP_BASIC_RESPONSE_ENTRY
        cExtension As Long
        rgExtension As LongPtr 'PCERT_EXTENSION
    End Type

    Public Type CERT_SUPPORTED_ALGORITHM_INFO
        Algorithm As CRYPT_ALGORITHM_IDENTIFIER
        IntendedKeyUsage As CRYPT_BIT_BLOB ' OPTIONAL
        IntendedCertPolicies As CERT_POLICIES_INFO ' OPTIONAL
    End Type
    Public Type CERT_TPM_SPECIFICATION_INFO
        pwszFamily As LongPtr ' Encoded as UTF8
        dwLevel As Long
        dwRevision As Long
    End Type



    Public Enum CryptCertTrustErrorStatusFlags
        CERT_TRUST_NO_ERROR = &H00000000
        CERT_TRUST_IS_NOT_TIME_VALID = &H00000001
        CERT_TRUST_IS_NOT_TIME_NESTED = &H00000002
        CERT_TRUST_IS_REVOKED = &H00000004
        CERT_TRUST_IS_NOT_SIGNATURE_VALID = &H00000008
        CERT_TRUST_IS_NOT_VALID_FOR_USAGE = &H00000010
        CERT_TRUST_IS_UNTRUSTED_ROOT = &H00000020
        CERT_TRUST_REVOCATION_STATUS_UNKNOWN = &H00000040
        CERT_TRUST_IS_CYCLIC = &H00000080
        CERT_TRUST_INVALID_EXTENSION = &H00000100
        CERT_TRUST_INVALID_POLICY_CONSTRAINTS = &H00000200
        CERT_TRUST_INVALID_BASIC_CONSTRAINTS = &H00000400
        CERT_TRUST_INVALID_NAME_CONSTRAINTS = &H00000800
        CERT_TRUST_HAS_NOT_SUPPORTED_NAME_CONSTRAINT = &H00001000
    '  In LH, this error will never be set.
        CERT_TRUST_HAS_NOT_DEFINED_NAME_CONSTRAINT = &H00002000
        CERT_TRUST_HAS_NOT_PERMITTED_NAME_CONSTRAINT = &H00004000
        CERT_TRUST_HAS_EXCLUDED_NAME_CONSTRAINT = &H00008000&
        CERT_TRUST_IS_OFFLINE_REVOCATION = &H01000000
        CERT_TRUST_NO_ISSUANCE_CHAIN_POLICY = &H02000000
        CERT_TRUST_IS_EXPLICIT_DISTRUST = &H04000000
        CERT_TRUST_HAS_NOT_SUPPORTED_CRITICAL_EXT = &H08000000
        CERT_TRUST_HAS_WEAK_SIGNATURE = &H00100000
        CERT_TRUST_HAS_WEAK_HYGIENE = &H00200000
        CERT_TRUST_HAS_MIN_TELEMETRY_RSA = &H00400000
    '  These can be applied to chains only
        CERT_TRUST_IS_PARTIAL_CHAIN = &H00010000
        CERT_TRUST_CTL_IS_NOT_TIME_VALID = &H00020000
        CERT_TRUST_CTL_IS_NOT_SIGNATURE_VALID = &H00040000
        CERT_TRUST_CTL_IS_NOT_VALID_FOR_USAGE = &H00080000
    End Enum
    Public Enum CryptCertTrustInfoStatusFlags
        CERT_TRUST_HAS_EXACT_MATCH_ISSUER = &H00000001
        CERT_TRUST_HAS_KEY_MATCH_ISSUER = &H00000002
        CERT_TRUST_HAS_NAME_MATCH_ISSUER = &H00000004
        CERT_TRUST_IS_SELF_SIGNED = &H00000008
        CERT_TRUST_AUTO_UPDATE_CA_REVOCATION = &H00000010
        CERT_TRUST_AUTO_UPDATE_END_REVOCATION = &H00000020
        CERT_TRUST_NO_OCSP_FAILOVER_TO_CRL = &H00000040
        CERT_TRUST_IS_KEY_ROLLOVER = &H00000080
        CERT_TRUST_SSL_HANDSHAKE_OCSP = &H00040000
        CERT_TRUST_SSL_TIME_VALID_OCSP = &H00080000
        CERT_TRUST_SSL_RECONNECT_OCSP = &H00100000
    '  These can be applied to certificates and chains
        CERT_TRUST_HAS_PREFERRED_ISSUER = &H00000100
        CERT_TRUST_HAS_ISSUANCE_CHAIN_POLICY = &H00000200
        CERT_TRUST_HAS_VALID_NAME_CONSTRAINTS = &H00000400
        CERT_TRUST_IS_PEER_TRUSTED = &H00000800
        CERT_TRUST_HAS_CRL_VALIDITY_EXTENDED = &H00001000
    '  Indicates that the certificate was found in
    '  a store specified by hExclusiveRoot or hExclusiveTrustedPeople
        CERT_TRUST_IS_FROM_EXCLUSIVE_TRUST_STORE = &H00002000
    ' #if (NTDDI_VERSION >= NTDDI_WIN8)
        CERT_TRUST_IS_CA_TRUSTED = &H00004000
        CERT_TRUST_HAS_AUTO_UPDATE_WEAK_SIGNATURE = &H00008000&
        CERT_TRUST_HAS_ALLOW_WEAK_SIGNATURE = &H00020000
    '  Following is set if the input time is before the
    '  DISALLOWED_CA_FILETIME.
        CERT_TRUST_BEFORE_DISALLOWED_CA_FILETIME = &H00200000
    ' #endif
    '  These can be applied to chains only
        CERT_TRUST_IS_COMPLEX_CHAIN = &H00010000
        CERT_TRUST_SSL_TIME_VALID = &H01000000
        CERT_TRUST_NO_TIME_CHECK = &H02000000
    End Enum
    Public Type CERT_TRUST_STATUS
        dwErrorStatus As CryptCertTrustErrorStatusFlags
        dwInfoStatus As CryptCertTrustInfoStatusFlags
    End Type

    Public Type CTL_ENTRY
        SubjectIdentifier As CRYPT_DATA_BLOB ' For example, its hash
        cAttribute As Long
        rgAttribute As LongPtr 'PCRYPT_ATTRIBUTE ' OPTIONAL
    End Type

    Public Enum CryptCTLInfoVersions
        CTL_V1 = 0
    End Enum
    Public Type CTL_USAGE
        cUsageIdentifier As Long
        rgpszUsageIdentifier As LongPtr ' array of pszObjId
    End Type
    'Alias CERT_ENHKEY_USAGE As CTL_USAGE
    Public Type CERT_ENHKEY_USAGE
        cUsageIdentifier As Long
        rgpszUsageIdentifier As LongPtr ' array of pszObjId
    End Type
    Public Type CTL_INFO
        dwVersion As CryptCTLInfoVersions
        SubjectUsage As CTL_USAGE
        ListIdentifier As CRYPT_DATA_BLOB ' OPTIONAL
        SequenceNumber As CRYPT_INTEGER_BLOB ' OPTIONAL
        ThisUpdate As FILETIME
        NextUpdate As FILETIME ' OPTIONAL
        SubjectAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        cCTLEntry As Long
        rgCTLEntry As LongPtr 'PCTL_ENTRY ' OPTIONAL
        cExtension As Long
        rgExtension As LongPtr 'PCERT_EXTENSION ' OPTIONAL
    End Type

    Public Type CRL_CONTEXT
        dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE
        pbCrlEncoded As LongPtr '*BYTE
        cbCrlEncoded As Long
        pCrlInfo As LongPtr 'PCRL_INFO
        hCertStore As LongPtr 'HCERTSTORE
    End Type

    Public Type CTL_CONTEXT
        dwMsgAndCertEncodingType As CRYPT_CERT_ENCODING_TYPE
        pbCtlEncoded As LongPtr '*BYTE
        cbCtlEncoded As Long
        pCtlInfo As LongPtr 'PCTL_INFO
        hCertStore As LongPtr 'HCERTSTORE
        hCryptMsg As LongPtr 'HCRYPTMSG
        pbCtlContent As LongPtr 'BYTE*
        cbCtlContent As Long
    End Type



    Public Type CERT_REVOCATION_INFO
        cbSize As Long
        dwRevocationResult As CryptCertTrustErrorStatusFlags
        pszRevocationOid As LongPtr 'LPCSTR
        pvOidSpecificInfo As LongPtr
        ' fHasFreshnessTime is only set if we are able to retrieve revocation
        ' information. For a CRL its CurrentTime - ThisUpdate.
        fHasFreshnessTime As BOOL
        dwFreshnessTime As Long ' seconds
        ' NonNULL for CRL base revocation checking
        pCrlInfo As LongPtr 'PCERT_REVOCATION_CRL_INFO
    End Type
    Public Type CERT_CHAIN_ELEMENT
        cbSize As Long
        pCertContext As LongPtr 'PCCERT_CONTEXT
        TrustStatus As CERT_TRUST_STATUS
        pRevocationInfo As LongPtr 'PCERT_REVOCATION_INFO
        pIssuanceUsage As LongPtr 'PCERT_ENHKEY_USAGE ' If NULL, any
        pApplicationUsage As LongPtr 'PCERT_ENHKEY_USAGE ' If NULL, any
        pwszExtendedErrorInfo As LongPtr ' If NULL, none
    End Type
    Public Type CERT_TRUST_LIST_INFO
        cbSize As Long
        pCtlEntry As LongPtr 'PCTL_ENTRY
        pCtlContext As LongPtr 'PCCTL_CONTEXT
    End Type
    Public Type CERT_SIMPLE_CHAIN
        cbSize As Long
        TrustStatus As CERT_TRUST_STATUS
        cElement As Long
        rgpElement As LongPtr 'PCERT_CHAIN_ELEMENT
        pTrustListInfo As LongPtr 'PCERT_TRUST_LIST_INFO
        ' fHasRevocationFreshnessTime is only set if we are able to retrieve
        ' revocation information for all elements checked for revocation.
        ' For a CRL its CurrentTime - ThisUpdate.
        ' dwRevocationFreshnessTime is the largest time across all elements
        ' checked.
        fHasRevocationFreshnessTime As BOOL
        dwRevocationFreshnessTime As Long ' seconds
    End Type
    Public Type CERT_CHAIN_CONTEXT
        cbSize As Long
        TrustStatus As CERT_TRUST_STATUS
        cChain As Long
        rgpChain As LongPtr 'PCERT_SIMPLE_CHAIN
        ' Following is returned when CERT_CHAIN_RETURN_LOWER_QUALITY_CONTEXTS
        ' is set in dwFlags
        cLowerQualityChainContext As Long
        rgpLowerQualityChainContext As LongPtr 'PCCERT_CHAIN_CONTEXT
        ' fHasRevocationFreshnessTime is only set if we are able to retrieve
        ' revocation information for all elements checked for revocation.
        ' For a CRL its CurrentTime - ThisUpdate.
        ' dwRevocationFreshnessTime is the largest time across all elements
        ' checked.
        fHasRevocationFreshnessTime As BOOL
        dwRevocationFreshnessTime As Long ' seconds
        ' Flags passed when created via CertGetCertificateChain
        dwCreateFlags As CryptCertChainFlags
        ' Following is updated with unique Id when the chain context is logged.
        ChainId As UUID
    End Type

    Public Enum CryptCertChainFlags
        CERT_CHAIN_REVOCATION_CHECK_END_CERT = &H10000000
        CERT_CHAIN_REVOCATION_CHECK_CHAIN = &H20000000
        CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = &H40000000
        CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY = &H80000000
        CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT = &H08000000
        CERT_CHAIN_REVOCATION_CHECK_OCSP_CERT = &H04000000
        CERT_CHAIN_DISABLE_PASS1_QUALITY_FILTERING = &H00000040
        CERT_CHAIN_RETURN_LOWER_QUALITY_CONTEXTS = &H00000080
        CERT_CHAIN_DISABLE_AUTH_ROOT_AUTO_UPDATE = &H00000100
        CERT_CHAIN_TIMESTAMP_TIME = &H00000200
        CERT_CHAIN_ENABLE_PEER_TRUST = &H00000400
        CERT_CHAIN_DISABLE_MY_PEER_TRUST = &H00000800
        CERT_CHAIN_DISABLE_MD2_MD4 = &H00001000
        CERT_CHAIN_DISABLE_AIA = &H00002000
        CERT_CHAIN_HAS_MOTW = &H00004000
        CERT_CHAIN_ONLY_ADDITIONAL_AND_AUTH_ROOT = &H00008000&
        CERT_CHAIN_OPT_IN_WEAK_SIGNATURE = &H00010000
        CERT_CHAIN_ENABLE_DISALLOWED_CA = &H00020000
    End Enum
    Public Type CERT_REVOCATION_CHAIN_PARA
        cbSize As Long
        hChainEngine As LongPtr 'HCERTCHAINENGINE
        hAdditionalStore As LongPtr 'HCERTSTORE
        dwChainFlags As CryptCertChainFlags
        dwUrlRetrievalTimeout As Long
        pftCurrentTime As LongPtr 'LPFILETIME
        pftCacheResync As LongPtr 'LPFILETIME
        cbMaxUrlRetrievalByteCount As Long
    End Type
    Public Type CRL_REVOCATION_INFO
        pCrlEntry As LongPtr 'PCRL_ENTRY
        pCrlContext As LongPtr 'PCCRL_CONTEXT
        pCrlIssuerChain As LongPtr 'PCCERT_CHAIN_CONTEXT
    End Type

    Public Enum CryptCertUsageMatchType
        USAGE_MATCH_TYPE_AND = &H00000000
        USAGE_MATCH_TYPE_OR = &H00000001
    End Enum
    Public Type CERT_USAGE_MATCH
        dwType As CryptCertUsageMatchType
        Usage As CERT_ENHKEY_USAGE
    End Type
    Public Type CTL_USAGE_MATCH
        dwType As CryptCertUsageMatchType
        Usage As CTL_USAGE
    End Type

    Public Enum CryptCertStrongSignFlags
        CERT_STRONG_SIGN_ENABLE_CRL_CHECK = &H1
        CERT_STRONG_SIGN_ENABLE_OCSP_CHECK = &H2
    End Enum
    Public Type CERT_STRONG_SIGN_SERIALIZED_INFO
        dwFlags As CryptCertStrongSignFlags
        pwszCNGSignHashAlgids As LongPtr
        pwszCNGPubKeyMinBitLengths As LongPtr
    End Type
    Public Enum CryptCertStrongSignChoice
        CERT_STRONG_SIGN_SERIALIZED_INFO_CHOICE = 1
        CERT_STRONG_SIGN_OID_INFO_CHOICE = 2
    End Enum
    Public Const szOID_CERT_STRONG_SIGN_OS_PREFIX  = "1.3.6.1.4.1.311.72.1."
    Public Const szOID_CERT_STRONG_SIGN_OS_1  = "1.3.6.1.4.1.311.72.1.1"
    Public Const szOID_CERT_STRONG_SIGN_OS_CURRENT  = szOID_CERT_STRONG_SIGN_OS_1
    Public Const szOID_CERT_STRONG_KEY_OS_PREFIX  = "1.3.6.1.4.1.311.72.2."
    Public Const szOID_CERT_STRONG_KEY_OS_1  = "1.3.6.1.4.1.311.72.2.1"
    Public Const szOID_CERT_STRONG_KEY_OS_CURRENT  = szOID_CERT_STRONG_KEY_OS_1
    Public Const CERT_STRONG_SIGN_ECDSA_ALGORITHM  = "ECDSA"
    Public Type CERT_STRONG_SIGN_PARA
        cbSize As Long
        dwInfoChoice As CryptCertStrongSignChoice
        ' union  {
            ' void                                *pvInfo;

            ' // CERT_STRONG_SIGN_SERIALIZED_INFO_CHOICE
            ' PCERT_STRONG_SIGN_SERIALIZED_INFO   pSerializedInfo;

            ' // CERT_STRONG_SIGN_OID_INFO_CHOICE
            ' LPSTR                               pszOID;
        
        ' } DUMMYUNIONNAME;
        SerializedInfoOrOID As LongPtr
    End Type

    Public Const szOID_PKCS_7_DATA  = "1.2.840.113549.1.7.1"
    Public Const szOID_PKCS_7_SIGNED  = "1.2.840.113549.1.7.2"
    Public Const szOID_PKCS_7_ENVELOPED  = "1.2.840.113549.1.7.3"
    Public Const szOID_PKCS_7_SIGNEDANDENVELOPED  = "1.2.840.113549.1.7.4"
    Public Const szOID_PKCS_7_DIGESTED  = "1.2.840.113549.1.7.5"
    Public Const szOID_PKCS_7_ENCRYPTED  = "1.2.840.113549.1.7.6"
    Public Const szOID_PKCS_9_CONTENT_TYPE  = "1.2.840.113549.1.9.3"
    Public Const szOID_PKCS_9_MESSAGE_DIGEST  = "1.2.840.113549.1.9.4"

    Public Enum CryptMessageTypes
        CMSG_DATA = 1
        CMSG_SIGNED = 2
        CMSG_ENVELOPED = 3
        CMSG_SIGNED_AND_ENVELOPED = 4
        CMSG_HASHED = 5
        CMSG_ENCRYPTED = 6
    End Enum
    Public Enum CryptMessageTypeFlags
        CMSG_ALL_FLAGS = (-1)
        CMSG_DATA_FLAG = (1 << CMSG_DATA)
        CMSG_SIGNED_FLAG = (1 << CMSG_SIGNED)
        CMSG_ENVELOPED_FLAG = (1 << CMSG_ENVELOPED)
        CMSG_SIGNED_AND_ENVELOPED_FLAG = (1 << CMSG_SIGNED_AND_ENVELOPED)
        CMSG_HASHED_FLAG = (1 << CMSG_HASHED)
        CMSG_ENCRYPTED_FLAG = (1 << CMSG_ENCRYPTED)
    End Enum


    Public Enum CryptCertStrongSignParaFlags
        CERT_CHAIN_STRONG_SIGN_DISABLE_END_CHECK_FLAG = &H00000001
    End Enum
    Public Type CERT_CHAIN_PARA
        cbSize As Long
        RequestedUsage As CERT_USAGE_MATCH
        '#ifdef CERT_CHAIN_PARA_HAS_EXTRA_FIELDS
        ' Note, if you #define CERT_CHAIN_PARA_HAS_EXTRA_FIELDS, then, you
        ' must zero all unused fields in this data structure.
        ' More fields could be added in a future release.
        RequestedIssuancePolicy As CERT_USAGE_MATCH
        dwUrlRetrievalTimeout As Long ' milliseconds
        fCheckRevocationFreshnessTime As BOOL
        dwRevocationFreshnessTime As Long ' seconds
        ' If nonNULL, any cached information before this time is considered
        ' time invalid and forces a wire retrieval. When set overrides
        ' the registry configuration CacheResync time.
        pftCacheResync As LongPtr 'LPFILETIME
        ' The following is set to check for Strong Signatures
        pStrongSignPara As LongPtr 'PCCERT_STRONG_SIGN_PARA
        ' By default the public key in the end certificate is checked.
        ' CERT_CHAIN_STRONG_SIGN_DISABLE_END_CHECK_FLAG can be
        ' set in the following flags to not check if the end certificate's public
        ' key length is strong.
        dwStrongSignFlags As CryptCertStrongSignParaFlags
        '#endif
    End Type
    Public Enum CryptCertGetChainFlags
        CERT_CHAIN_CACHE_END_CERT = &H00000001
        CERT_CHAIN_THREAD_STORE_SYNC = &H00000002
        CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL = &H00000004
        CERT_CHAIN_USE_LOCAL_MACHINE_STORE = &H00000008
        CERT_CHAIN_ENABLE_CACHE_AUTO_UPDATE = &H00000010
        CERT_CHAIN_ENABLE_SHARE_STORE = &H00000020
    End Enum

    Public Const HCCE_CURRENT_USER As LongPtr = 0
    Public Const HCCE_LOCAL_MACHINE As LongPtr = 1
    Public Const HCCE_SERIAL_LOCAL_MACHINE As LongPtr = 2
    Public Const CERT_CHAIN_CONFIG_REGPATH  = "Software\Microsoft\Cryptography\OID\EncodingType 0\CertDllCreateCertificateChainEngine\Config"
    '  max size of the cryptographic object to download, in bytes
    '  NOTE: AIA has different configuration
    Public Const CERT_CHAIN_MAX_URL_RETRIEVAL_BYTE_COUNT_VALUE_NAME  = "MaxUrlRetrievalByteCount"
    Public Const CERT_CHAIN_MAX_URL_RETRIEVAL_BYTE_COUNT_DEFAULT  = (100 * 1024 * 1024)
    '  The following is a REG_BINARY. It contains the cache resync FILETIME.
    '  Any cached information before this time is considered time invalid
    '  and forces a wire retrieval. By default this is disabled.
    Public Const CERT_CHAIN_CACHE_RESYNC_FILETIME_VALUE_NAME  = "ChainCacheResyncFiletime"
    '  The following are REG_DWORD's. These configuration parameters are used
    '  to disable different chain building semantics enabled by default. Set
    '  the appropriate registry value to nonzero to disable.
    Public Const CERT_CHAIN_DISABLE_MANDATORY_BASIC_CONSTRAINTS_VALUE_NAME  = "DisableMandatoryBasicConstraints"
    '  By default the BasicConstraints extension must be present with CA enabled
    '  for non-Root intermediate CA certificates.
    Public Const CERT_CHAIN_DISABLE_CA_NAME_CONSTRAINTS_VALUE_NAME  = "DisableCANameConstraints"
    '  By default the NameConstraints extension is applied to the intermediate
    '  CA certificates in addition to the end entity certificate.
    Public Const CERT_CHAIN_DISABLE_UNSUPPORTED_CRITICAL_EXTENSIONS_VALUE_NAME  = "DisableUnsupportedCriticalExtensions"
    '  By default any unsupported extension marked critical sets the following
    '  dwErrorStatus bit: CERT_TRUST_HAS_NOT_SUPPORTED_CRITICAL_EXT.
    '  The following are REG_DWORD's. These configuration parameters are used
    '  to restrict Authority Info Access (AIA) URL retrieval.
    Public Const CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_VALUE_NAME  = "MaxAIAUrlCountInCert"
    Public Const CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_DEFAULT  = 5
    Public Const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_VALUE_NAME  = "MaxAIAUrlRetrievalCountPerChain"
    Public Const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_DEFAULT  = 3
    '  max size of the object to download, specified by a URL in AIA extention, in bytes
    Public Const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_VALUE_NAME  = "MaxAIAUrlRetrievalByteCount"
    Public Const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_DEFAULT  = 100000
    Public Const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_VALUE_NAME  = "MaxAIAUrlRetrievalCertCount"
    Public Const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_DEFAULT  = 10
    '  The following is a REG_DWORD. If the OCSP response NextUpdate is zero,
    '  this value is added to the ThisUpdate to get a nonzero NextUpdate.
    Public Const CERT_CHAIN_OCSP_VALIDITY_SECONDS_VALUE_NAME  = "OcspValiditySeconds"
    '  12 hours
    Public Const CERT_CHAIN_OCSP_VALIDITY_SECONDS_DEFAULT  = (12 * 60 * 60)
    '  The following is a REG_DWORD. It can be set to a nonzero value to disable
    '  the use of the Serial Chain optimization for SSL ServerAuth chains. This
    '  value is queried in each process on the first CertGetCertificateChain call
    '  where the CERT_SERIAL_CHAIN_PROP_ID property is set.
    Public Const CERT_CHAIN_DISABLE_SERIAL_CHAIN_VALUE_NAME  = "DisableSerialChain"
    '  The following is a REG_SZ containing the name of the file to log
    '  Serial Chain errors.
    '  The file's directory must already exist. If the file already
    '  exists, events are appended. Otherwise, the file is created.
    '  The directory/file should be ACL'ed so all processes and users have
    '  write access.
    Public Const CERT_CHAIN_SERIAL_CHAIN_LOG_FILE_NAME_VALUE_NAME  = "SerialChainLogFileName"
    '  The following is a REG_DWORD. It can be set to a nonzero value to disable
    '  using SSL handshakes as a source of time. Will also disable the above
    '  Serial Chain optimization. Value is queried once on the first SSL
    '  handshake in the lsass.exe process.
    Public Const CERT_CHAIN_DISABLE_SYNC_WITH_SSL_TIME_VALUE_NAME  = "DisableSyncWithSslTime"
    '  The following is a REG_DWORD that specifies the maximum number of
    '  "SslTimeUpdated" events to be uploaded after boot or when the
    '  current time is synch'ed with SSL time. If not defined or a value of
    '  0, uses the default value.
    Public Const CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_VALUE_NAME  = "MaxSslTimeUpdatedEventCount"
    Public Const CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_DEFAULT  = 5
    '  The following value disables uploading "SslTimeUpdated" events
    Public Const CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_DISABLE  = &HFFFFFFFF
    '  The following is a REG_SZ containing the name of the file to log
    '  SSL handshakes that were processed.
    '  The file's directory must already exist. If the file already
    '  exists, events are appended. Otherwise, the file is created.
    Public Const CERT_CHAIN_SSL_HANDSHAKE_LOG_FILE_NAME_VALUE_NAME  = "SslHandshakeLogFileName"
    '  The following is a REG_DWORD. Flags can be set to enable weak
    '  signature hash algorithms and/or weak public key lengths that
    '  are disabled by default. Also, has flags to enable logging of weak
    '  certificates.
    Public Const CERT_CHAIN_ENABLE_WEAK_SIGNATURE_FLAGS_VALUE_NAME  = "EnableWeakSignatureFlags"

    Public Enum CryptCertChainLoggingFlags
        CERT_CHAIN_ENABLE_MD2_MD4_FLAG = &H00000001
    '  The following flag is set to enable weak RSA public key lengths
    '  for trusted roots that are disabled by default.
        CERT_CHAIN_ENABLE_WEAK_RSA_ROOT_FLAG = &H00000002
    '  The following flag is set to enable the logging of weak certificates
    '  to the directory identified by CERT_CHAIN_WEAK_SIGNATURE_LOG_DIR_VALUE_NAME.
    '  Not applicable to MD2 or MD4 certificates.
        CERT_CHAIN_ENABLE_WEAK_LOGGING_FLAG = &H00000004
    '  The following flag is set to only log weak certificates. Disables
    '  weak signature errors from being returned. Not applicable
    '  to MD2 or MD4 certificates.
        CERT_CHAIN_ENABLE_ONLY_WEAK_LOGGING_FLAG = &H00000008
    End Enum

    Public Const CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_VALUE_NAME  = "MinRsaPubKeyBitLength"
    Public Const CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DEFAULT  = 1023
    '  The following value disables checking for weak RSA public key lengths.
    Public Const CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DISABLE  = &HFFFFFFFF
    '  The following is a REG_DWORD that specifies the minimum RSA public
    '  key length in bits needed to trigger telemetry.
    Public Const CERT_CHAIN_MIN_TELEMETRY_RSA_PUB_KEY_BIT_LENGTH_VALUE_NAME  = "MinTelemetryRsaPubKeyBitLength"
    Public Const CERT_CHAIN_MIN_TELEMETRY_RSA_PUB_KEY_BIT_LENGTH_DEFAULT  = 2047
    '  The following value disables telemetry for weak RSA public key lengths.
    Public Const CERT_CHAIN_MIN_TELEMETRY_RSA_PUB_KEY_BIT_LENGTH_DISABLE  = &HFFFFFFFF
    '  The following is a REG_BINARY containing the 8 byte FILETIME. The weak
    '  RSA public key length check is disabled for timestamped files before
    '  this time. If not defined or a zero FILETIME, uses the default value.
    Public Const CERT_CHAIN_WEAK_RSA_PUB_KEY_TIME_VALUE_NAME  = "WeakRsaPubKeyTime"
    '  The default time: UTC: Fri Jan 01 00:00:00 2010
    Public Const CERT_CHAIN_WEAK_RSA_PUB_KEY_TIME_DEFAULT As LongLong = &H01CA8A755C6E0000
    '  The following is a REG_SZ. When defined, weak certificates are
    '  written to this directory. This directory should be ACL'ed to allow
    '  modify access by Authenticated Users and All Application Packages.
    Public Const CERT_CHAIN_WEAK_SIGNATURE_LOG_DIR_VALUE_NAME  = "WeakSignatureLogDir"
    ' +=========================================================================
    '  Weak Signature Registry Configuration
    ' ==========================================================================
    '  The administrator will continue to place the weak crypto settings under:
    '  CERT_CHAIN_CONFIG_REGPATH defined above.
    '  The OS and Windows Update will configure the same settings in the
    '  "Default" subkey under CERT_CHAIN_CONFIG_REGPATH.
    Public Const CERT_CHAIN_DEFAULT_CONFIG_SUBDIR  = "Default"
    Public Const CERT_CHAIN_WEAK_PREFIX_NAME  = "Weak"
    Public Const CERT_CHAIN_WEAK_THIRD_PARTY_CONFIG_NAME  = "ThirdParty"
    Public Const CERT_CHAIN_WEAK_ALL_CONFIG_NAME  = "All"
    Public Const CERT_CHAIN_WEAK_FLAGS_NAME  = "Flags"
    Public Const CERT_CHAIN_WEAK_HYGIENE_NAME  = "Hygiene"
    Public Const CERT_CHAIN_WEAK_AFTER_TIME_NAME  = "AfterTime"
    Public Const CERT_CHAIN_WEAK_FILE_HASH_AFTER_TIME_NAME  = "FileHashAfterTime"
    Public Const CERT_CHAIN_WEAK_TIMESTAMP_HASH_AFTER_TIME_NAME  = "TimestampHashAfterTime"
    Public Const CERT_CHAIN_WEAK_MIN_BIT_LENGTH_NAME  = "MinBitLength"
    Public Const CERT_CHAIN_WEAK_SHA256_ALLOW_NAME  = "Sha256Allow"

    Public Enum CryptCertChainSettingsFlags
        CERT_CHAIN_MIN_PUB_KEY_BIT_LENGTH_DISABLE = &HFFFFFFFF
    '  The following flags can be set in the above
    '  "Weak"<CryptoAlg><ConfigType>"Flags"
    '  If the following flag isn't set, then all other flags and registry values
    '  are ignored for this "Weak"<CryptoAlg><ConfigType>.
    '  If the administrator sets this flag for its "Weak"<CryptoAlg><ConfigType>,
    '  then, the corresponding Default OS/Windows Update settings are ignored.
    '  If this flag is set in "Weak"<CryptoAlg>"AllFlags":
    '   - Resultant "Weak"<CryptoAlg>"ThirdPartyFlags" will or with
    '     "Weak"<CryptoAlg>"AllFlags".  However, "Weak"<CryptoAlg>"ThirdPartyFlags"
    '     logging flags won't be updated.
    '     ThirdPartyFlags |= AllFlags &
    '                            ~(CERT_CHAIN_ENABLE_WEAK_LOGGING_FLAG |
    '                              CERT_CHAIN_ENABLE_ONLY_WEAK_LOGGING_FLAG);
    '   - Resultant "Weak"<HashCryptoAlg>"ThirdPartyHygine" will or with
    '     "Weak"<HashCryptoAlg>AllHygiene"
    '   - Resultant "Weak<CryptoAlg>"ThirdPartyAfterTime" will be earliest
    '     ("Weak"<CryptoAlg>"AllAfterTime", "Weak"<CryptoAlg>"ThirdPartyAfterTime").
    '     Only applicable if "Weak"<CryptoAlg>"AllAfterTime" is defined and nonzero.
    '   - Resultant "Weak"<KeyCryptoAlg>"ThirdPartyMinBitLength" will be largest
    '     ("Weak"<KeyCryptoAlg>"AllMinBitLength",
    '      "Weak"<KeyCryptoAlg>"ThirdPartyMinBitLength"
        CERT_CHAIN_ENABLE_WEAK_SETTINGS_FLAG = &H80000000
    '  The following flag is set to enable the logging of weak certificates to the
    '  directory identified by CERT_CHAIN_WEAK_SIGNATURE_LOG_DIR_VALUE_NAME.
        CERT_CHAIN_ENABLE_WEAK_LOGGING_FLAG = &H00000004
    '  The following flag is set to only log weak certificates to the directory
    '  identified by CERT_CHAIN_WEAK_SIGNATURE_LOG_DIR_VALUE_NAME. Weak signature
    '  errors aren't returned.
        CERT_CHAIN_ENABLE_ONLY_WEAK_LOGGING_FLAG = &H00000008
    '  The following flag is set to disable ECC certificates using
    '  key parameters instead of normal key curve name OID.
        CERT_CHAIN_DISABLE_ECC_PARA_FLAG = &H00000010
    '  In addition to setting the above CERT_CHAIN_ENABLE_WEAK_SETTINGS_FLAG flag,
    '  the following flags corresponding to the EKU must be set to disable weak
    '  signature or enable weak hash hygiene checks:
    '  This flag disables for all EKUs.
        CERT_CHAIN_DISABLE_ALL_EKU_WEAK_FLAG = &H00010000
    '  This flag enables hygiene for all EKUs not disabling.
        CERT_CHAIN_ENABLE_ALL_EKU_HYGIENE_FLAG = &H00020000
    '  This flag disables for ServerAuth EKUs only when CertGetCertificateChain
    '  is called with CERT_CHAIN_OPT_IN_WEAK_SIGNATURE.
        CERT_CHAIN_DISABLE_OPT_IN_SERVER_AUTH_WEAK_FLAG = &H00040000
    '  This flag disables for ServerAuth EKUs.
        CERT_CHAIN_DISABLE_SERVER_AUTH_WEAK_FLAG = &H00100000
    '  This flag enables hygiene for ServerAuth EKUs.
        CERT_CHAIN_ENABLE_SERVER_AUTH_HYGIENE_FLAG = &H00200000
    '  This flag disables for code signing EKUs
        CERT_CHAIN_DISABLE_CODE_SIGNING_WEAK_FLAG = &H00400000
    '  This flag disables for code signing EKUs only when CertGetCertificateChain
    '  is called with the Mark-Of-The-Web (CERT_CHAIN_HAS_MOTW)
        CERT_CHAIN_DISABLE_MOTW_CODE_SIGNING_WEAK_FLAG = &H00800000
    '  This flag enables hygiene for code signing EKUs
        CERT_CHAIN_ENABLE_CODE_SIGNING_HYGIENE_FLAG = &H01000000
    '  This flag enables hygiene for code signing EKUs only when
    '  CertGetCertificateChain is called with the
    '  Mark-Of-The-Web (CERT_CHAIN_HAS_MOTW)
        CERT_CHAIN_ENABLE_MOTW_CODE_SIGNING_HYGIENE_FLAG = &H02000000
    '  This flag disables for timestamp EKUs.
        CERT_CHAIN_DISABLE_TIMESTAMP_WEAK_FLAG = &H04000000
    '  This flag disables for timestamp EKUs only when CertGetCertificateChain is
    '  called with the Mark-Of-The-Web (CERT_CHAIN_HAS_MOTW)
        CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_WEAK_FLAG = &H08000000
    '  This flag enables hygiene for timestamp EKUs
        CERT_CHAIN_ENABLE_TIMESTAMP_HYGIENE_FLAG = &H10000000
    '  This flag enables hygiene for timestamp EKUs only when
    '  CertGetCertificateChain is called with the
    '  Mark-Of-The-Web (CERT_CHAIN_HAS_MOTW)
        CERT_CHAIN_ENABLE_MOTW_TIMESTAMP_HYGIENE_FLAG = &H20000000
    '  This flag ignores the "Weak"<CryptoAlg><ConfigType>"AfterTime" value
    '  when CertGetCertificateChain is called with the
    '  Mark-Of-The-Web (CERT_CHAIN_HAS_MOTW)
        CERT_CHAIN_MOTW_IGNORE_AFTER_TIME_WEAK_FLAG = &H40000000
    '  If the hash algorithm is disabled, then, the hygiene check will be skipped.
    '  The hygiene flags are only applicable to hash algorithms.
    '  If no EKU flags are set, then, weak crypto isn't enforced for the
    '  "Weak"<CryptoAlg><ConfigType>. This allows the administrator to always
    '  ignore the Default OS/Windows Update settings.
    '  This flag disables for file hashes. Only applicable to CertIsWeakHash()
    '  API.
        CERT_CHAIN_DISABLE_FILE_HASH_WEAK_FLAG = &H00001000
    '  This flag disables for file hashes. Only applicable when CertIsWeakHash()
    '  API is called with the Mark-Of-The-Web (CERT_CHAIN_HAS_MOTW)
        CERT_CHAIN_DISABLE_MOTW_FILE_HASH_WEAK_FLAG = &H00002000
    '  This flag disables for timestamp hashes. Only applicable to CertIsWeakHash()
    '  API.
        CERT_CHAIN_DISABLE_TIMESTAMP_HASH_WEAK_FLAG = &H00004000
    '  This flag disables for timestamp hashes. Only applicable when CertIsWeakHash()
    '  API is called with the Mark-Of-The-Web (CERT_CHAIN_HAS_MOTW)
        CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_HASH_WEAK_FLAG = &H00008000&
        CERT_CHAIN_DISABLE_WEAK_FLAGS = (CERT_CHAIN_DISABLE_ECC_PARA_FLAG Or CERT_CHAIN_DISABLE_ALL_EKU_WEAK_FLAG Or CERT_CHAIN_DISABLE_SERVER_AUTH_WEAK_FLAG Or CERT_CHAIN_DISABLE_OPT_IN_SERVER_AUTH_WEAK_FLAG Or CERT_CHAIN_DISABLE_CODE_SIGNING_WEAK_FLAG Or CERT_CHAIN_DISABLE_MOTW_CODE_SIGNING_WEAK_FLAG Or CERT_CHAIN_DISABLE_TIMESTAMP_WEAK_FLAG Or CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_WEAK_FLAG)
        CERT_CHAIN_DISABLE_FILE_HASH_WEAK_FLAGS = (CERT_CHAIN_DISABLE_FILE_HASH_WEAK_FLAG Or CERT_CHAIN_DISABLE_MOTW_FILE_HASH_WEAK_FLAG)
        CERT_CHAIN_DISABLE_TIMESTAMP_HASH_WEAK_FLAGS = (CERT_CHAIN_DISABLE_TIMESTAMP_HASH_WEAK_FLAG Or CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_HASH_WEAK_FLAG)
        CERT_CHAIN_ENABLE_HYGIENE_FLAGS = (CERT_CHAIN_ENABLE_ALL_EKU_HYGIENE_FLAG Or CERT_CHAIN_ENABLE_SERVER_AUTH_HYGIENE_FLAG Or CERT_CHAIN_ENABLE_CODE_SIGNING_HYGIENE_FLAG Or CERT_CHAIN_ENABLE_MOTW_CODE_SIGNING_HYGIENE_FLAG Or CERT_CHAIN_ENABLE_TIMESTAMP_HYGIENE_FLAG Or CERT_CHAIN_ENABLE_MOTW_TIMESTAMP_HYGIENE_FLAG)
        CERT_CHAIN_MOTW_WEAK_FLAGS = (CERT_CHAIN_DISABLE_MOTW_CODE_SIGNING_WEAK_FLAG Or CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_WEAK_FLAG Or CERT_CHAIN_ENABLE_MOTW_CODE_SIGNING_HYGIENE_FLAG Or CERT_CHAIN_ENABLE_MOTW_TIMESTAMP_HYGIENE_FLAG Or CERT_CHAIN_MOTW_IGNORE_AFTER_TIME_WEAK_FLAG)
        CERT_CHAIN_OPT_IN_WEAK_FLAGS = (CERT_CHAIN_DISABLE_OPT_IN_SERVER_AUTH_WEAK_FLAG)
    End Enum

    Public Enum CryptCertChainEngineAutoEvents
        CERT_CHAIN_AUTO_CURRENT_USER = 1
        CERT_CHAIN_AUTO_LOCAL_MACHINE = 2
        CERT_CHAIN_AUTO_IMPERSONATED = 3
        CERT_CHAIN_AUTO_PROCESS_INFO = 4
        CERT_CHAIN_AUTO_PINRULE_INFO = 5
        CERT_CHAIN_AUTO_NETWORK_INFO = 6
        CERT_CHAIN_AUTO_SERIAL_LOCAL_MACHINE = 7
        CERT_CHAIN_AUTO_HPKP_RULE_INFO = 8
    End Enum

    Public Const CERT_CHAIN_AUTO_FLAGS_VALUE_NAME = "AutoFlags"

    Public Enum CryptCertChainEngineAutoFlags
        CERT_CHAIN_AUTO_FLUSH_DISABLE_FLAG = &H00000001
        CERT_CHAIN_AUTO_LOG_CREATE_FLAG = &H00000002
        CERT_CHAIN_AUTO_LOG_FREE_FLAG = &H00000004
        CERT_CHAIN_AUTO_LOG_FLUSH_FLAG = &H00000008
        CERT_CHAIN_AUTO_LOG_FLAGS = (CERT_CHAIN_AUTO_LOG_CREATE_FLAG Or CERT_CHAIN_AUTO_LOG_FREE_FLAG Or CERT_CHAIN_AUTO_LOG_FLUSH_FLAG)
    End Enum

    Public Const CERT_CHAIN_AUTO_FLUSH_FIRST_DELTA_SECONDS_VALUE_NAME  = "AutoFlushFirstDeltaSeconds"
    Public Const CERT_CHAIN_AUTO_FLUSH_FIRST_DELTA_SECONDS_DEFAULT  = (5 * 60)
    Public Const CERT_CHAIN_AUTO_FLUSH_NEXT_DELTA_SECONDS_VALUE_NAME  = "AutoFlushNextDeltaSeconds"
    Public Const CERT_CHAIN_AUTO_FLUSH_NEXT_DELTA_SECONDS_DEFAULT  = (30 * 60)
    Public Const CERT_CHAIN_AUTO_LOG_FILE_NAME_VALUE_NAME  = "AutoLogFileName"
    Public Const CERT_CHAIN_DISABLE_AUTO_FLUSH_PROCESS_NAME_LIST_VALUE_NAME  = "DisableAutoFlushProcessNameList"
    Public Const CERT_SRV_OCSP_RESP_MIN_VALIDITY_SECONDS_VALUE_NAME  = "SrvOcspRespMinValiditySeconds"
    Public Const CERT_SRV_OCSP_RESP_MIN_VALIDITY_SECONDS_DEFAULT  = (10 * 60)
    Public Const CERT_SRV_OCSP_RESP_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME  = "SrvOcspRespUrlRetrievalTimeoutMilliseconds"
    Public Const CERT_SRV_OCSP_RESP_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_DEFAULT  = (15 * 1000)
    Public Const CERT_SRV_OCSP_RESP_MAX_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME  = "SrvOcspRespMaxBeforeNextUpdateSeconds"
    Public Const CERT_SRV_OCSP_RESP_MAX_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT  = (4 * 60 * 60)
    Public Const CERT_SRV_OCSP_RESP_MIN_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME  = "SrvOcspRespMinBeforeNextUpdateSeconds"
    Public Const CERT_SRV_OCSP_RESP_MIN_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT  = (2 * 60)
    Public Const CERT_SRV_OCSP_RESP_MIN_AFTER_NEXT_UPDATE_SECONDS_VALUE_NAME  = "SrvOcspRespMinAfterNextUpdateSeconds"
    Public Const CERT_SRV_OCSP_RESP_MIN_AFTER_NEXT_UPDATE_SECONDS_DEFAULT  = (1 * 60)
    Public Const CERT_SRV_OCSP_RESP_MIN_SYNC_CERT_FILE_SECONDS_VALUE_NAME  = "SrvOcspRespMinSyncCertFileSeconds"
    Public Const CERT_SRV_OCSP_RESP_MIN_SYNC_CERT_FILE_SECONDS_DEFAULT  = 5
    Public Const CERT_SRV_OCSP_RESP_MAX_SYNC_CERT_FILE_SECONDS_VALUE_NAME  = "SrvOcspRespMaxSyncCertFileSeconds"
    Public Const CERT_SRV_OCSP_RESP_MAX_SYNC_CERT_FILE_SECONDS_DEFAULT  = (1 * 60 * 60)
    Public Const CRYPTNET_MAX_CACHED_OCSP_PER_CRL_COUNT_VALUE_NAME  = "CryptnetMaxCachedOcspPerCrlCount"
    Public Const CRYPTNET_MAX_CACHED_OCSP_PER_CRL_COUNT_DEFAULT  = 500
    Public Const CRYPTNET_OCSP_AFTER_CRL_DISABLE  = &HFFFFFFFF
    Public Const CRYPTNET_URL_CACHE_DEFAULT_FLUSH_EXEMPT_SECONDS_VALUE_NAME  = "CryptnetDefaultFlushExemptSeconds"
    Public Const CRYPTNET_URL_CACHE_DEFAULT_FLUSH_EXEMPT_SECONDS_DEFAULT  = (28 * 24 * 60 * 60)
    Public Const CRYPTNET_PRE_FETCH_MIN_MAX_AGE_SECONDS_VALUE_NAME  = "CryptnetPreFetchMinMaxAgeSeconds"
    Public Const CRYPTNET_PRE_FETCH_MIN_MAX_AGE_SECONDS_DEFAULT  = (1 * 60 * 60)
    Public Const CRYPTNET_PRE_FETCH_MAX_MAX_AGE_SECONDS_VALUE_NAME  = "CryptnetPreFetchMaxMaxAgeSeconds"
    Public Const CRYPTNET_PRE_FETCH_MAX_MAX_AGE_SECONDS_DEFAULT  = (14 * 24 * 60 * 60)
    Public Const CRYPTNET_PRE_FETCH_MIN_OCSP_VALIDITY_PERIOD_SECONDS_VALUE_NAME  = "CryptnetPreFetchMinOcspValidityPeriodSeconds"
    Public Const CRYPTNET_PRE_FETCH_MIN_OCSP_VALIDITY_PERIOD_SECONDS_DEFAULT  = (14 * 24 * 60 * 60)
    Public Const CRYPTNET_PRE_FETCH_AFTER_PUBLISH_PRE_FETCH_DIVISOR_VALUE_NAME  = "CryptnetPreFetchAfterPublishPreFetchDivisor"
    Public Const CRYPTNET_PRE_FETCH_AFTER_PUBLISH_PRE_FETCH_DIVISOR_DEFAULT  = 10
    Public Const CRYPTNET_PRE_FETCH_BEFORE_NEXT_UPDATE_PRE_FETCH_DIVISOR_VALUE_NAME  = "CryptnetPreFetchBeforeNextUpdatePreFetchDivisor"
    Public Const CRYPTNET_PRE_FETCH_BEFORE_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT  = 20
    Public Const CRYPTNET_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME  = "CryptnetPreFetchMinBeforeNextUpdatePreFetchSeconds"
    Public Const CRYPTNET_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_DEFAULT  = (1 * 60 * 60)
    Public Const CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_UPDATE_PRE_FETCH_DIVISOR_VALUE_NAME  = "CryptnetPreFetchValidityPeriodAfterNextUpdatePreFetchDivisor"
    Public Const CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT  = 10
    Public Const CRYPTNET_PRE_FETCH_MAX_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME  = "CryptnetPreFetchMaxAfterNextUpdatePreFetchPeriodSeconds"
    Public Const CRYPTNET_PRE_FETCH_MAX_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_DEFAULT  = (4 * 60 * 60)
    Public Const CRYPTNET_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME  = "CryptnetPreFetchMinAfterNextUpdatePreFetchPeriodSeconds"
    Public Const CRYPTNET_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_DEFAULT  = (30 * 60)
    Public Const CRYPTNET_PRE_FETCH_AFTER_CURRENT_TIME_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME  = "CryptnetPreFetchAfterCurrentTimePreFetchPeriodSeconds"
    Public Const CRYPTNET_PRE_FETCH_AFTER_CURRENT_TIME_PRE_FETCH_PERIOD_SECONDS_DEFAULT  = (30 * 60)
    Public Const CRYPTNET_PRE_FETCH_TRIGGER_PERIOD_SECONDS_VALUE_NAME  = "CryptnetPreFetchTriggerPeriodSeconds"
    Public Const CRYPTNET_PRE_FETCH_TRIGGER_PERIOD_SECONDS_DEFAULT  = (10 * 60)
    Public Const CRYPTNET_PRE_FETCH_TRIGGER_DISABLE  = &HFFFFFFFF
    Public Const CRYPTNET_PRE_FETCH_SCAN_AFTER_TRIGGER_DELAY_SECONDS_VALUE_NAME  = "CryptnetPreFetchScanAfterTriggerDelaySeconds"
    Public Const CRYPTNET_PRE_FETCH_SCAN_AFTER_TRIGGER_DELAY_SECONDS_DEFAULT  = 60
    Public Const CRYPTNET_PRE_FETCH_RETRIEVAL_TIMEOUT_SECONDS_VALUE_NAME  = "CryptnetPreFetchRetrievalTimeoutSeconds"
    Public Const CRYPTNET_PRE_FETCH_RETRIEVAL_TIMEOUT_SECONDS_DEFAULT  = (5 * 60)
    Public Const CRYPTNET_CRL_PRE_FETCH_CONFIG_REGPATH  = "\\CrlPreFetch"
    Public Const CRYPTNET_CRL_PRE_FETCH_PROCESS_NAME_LIST_VALUE_NAME  = "ProcessNameList"
    Public Const CRYPTNET_CRL_PRE_FETCH_URL_LIST_VALUE_NAME  = "PreFetchUrlList"
    Public Const CRYPTNET_CRL_PRE_FETCH_DISABLE_INFORMATION_EVENTS_VALUE_NAME  = "DisableInformationEvents"
    Public Const CRYPTNET_CRL_PRE_FETCH_LOG_FILE_NAME_VALUE_NAME  = "LogFileName"
    Public Const CRYPTNET_CRL_PRE_FETCH_TIMEOUT_SECONDS_VALUE_NAME  = "TimeoutSeconds"
    Public Const CRYPTNET_CRL_PRE_FETCH_TIMEOUT_SECONDS_DEFAULT  = (5 * 60)
    Public Const CRYPTNET_CRL_PRE_FETCH_MAX_AGE_SECONDS_VALUE_NAME  = "MaxAgeSeconds"
    Public Const CRYPTNET_CRL_PRE_FETCH_MAX_AGE_SECONDS_DEFAULT  = (2 * 60 * 60)
    Public Const CRYPTNET_CRL_PRE_FETCH_MAX_AGE_SECONDS_MIN  = (5 * 60)
    Public Const CRYPTNET_CRL_PRE_FETCH_PUBLISH_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME  = "PublishBeforeNextUpdateSeconds"
    Public Const CRYPTNET_CRL_PRE_FETCH_PUBLISH_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT  = (1 * 60 * 60)
    Public Const CRYPTNET_CRL_PRE_FETCH_PUBLISH_RANDOM_INTERVAL_SECONDS_VALUE_NAME  = "PublishRandomIntervalSeconds"
    Public Const CRYPTNET_CRL_PRE_FETCH_PUBLISH_RANDOM_INTERVAL_SECONDS_DEFAULT  = (5 * 60)
    Public Const CRYPTNET_CRL_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME  = "MinBeforeNextUpdateSeconds"
    Public Const CRYPTNET_CRL_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT  = (5 * 60)
    Public Const CRYPTNET_CRL_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_SECONDS_VALUE_NAME  = "MinAfterNextUpdateSeconds"
    Public Const CRYPTNET_CRL_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_SECONDS_DEFAULT  = (5 * 60)
    Public Const CERT_GROUP_POLICY_CHAIN_CONFIG_REGPATH = CERT_GROUP_POLICY_SYSTEM_STORE_REGPATH & "\ChainEngine\Config"
    Public Const CERT_CHAIN_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME  = "ChainUrlRetrievalTimeoutMilliseconds"
    Public Const CERT_CHAIN_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_DEFAULT  = (15 * 1000)
    Public Const CERT_CHAIN_REV_ACCUMULATIVE_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME  = "ChainRevAccumulativeUrlRetrievalTimeoutMilliseconds"
    Public Const CERT_CHAIN_REV_ACCUMULATIVE_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_DEFAULT  = (20 * 1000)
    Public Const CERT_RETR_BEHAVIOR_INET_AUTH_VALUE_NAME  = "EnableInetUnknownAuth"
    Public Const CERT_RETR_BEHAVIOR_INET_STATUS_VALUE_NAME  = "EnableInetLocal"
    Public Const CERT_RETR_BEHAVIOR_FILE_VALUE_NAME  = "AllowFileUrlScheme"
    Public Const CERT_RETR_BEHAVIOR_LDAP_VALUE_NAME  = "DisableLDAPSignAndEncrypt"
    Public Const CRYPTNET_CACHED_OCSP_SWITCH_TO_CRL_COUNT_VALUE_NAME  = "CryptnetCachedOcspSwitchToCrlCount"
    Public Const CRYPTNET_CACHED_OCSP_SWITCH_TO_CRL_COUNT_DEFAULT  = 50
    Public Const CRYPTNET_CRL_BEFORE_OCSP_ENABLE  = &HFFFFFFFF
    Public Const CERT_CHAIN_DISABLE_AIA_URL_RETRIEVAL_VALUE_NAME  = "DisableAIAUrlRetrieval"
    Public Const CERT_CHAIN_OPTIONS_VALUE_NAME  = "Options"
    Public Const CERT_CHAIN_OPTION_DISABLE_AIA_URL_RETRIEVAL  = &H2
    Public Const CERT_CHAIN_OPTION_ENABLE_SIA_URL_RETRIEVAL  = &H4
    Public Const CERT_CHAIN_CROSS_CERT_DOWNLOAD_INTERVAL_HOURS_VALUE_NAME  = "CrossCertDownloadIntervalHours"
    Public Const CERT_CHAIN_CROSS_CERT_DOWNLOAD_INTERVAL_HOURS_DEFAULT  = (24 * 7)
    Public Const CERT_CHAIN_CRL_VALIDITY_EXT_PERIOD_HOURS_VALUE_NAME  = "CRLValidityExtensionPeriod"
    Public Const CERT_CHAIN_CRL_VALIDITY_EXT_PERIOD_HOURS_DEFAULT  = 12



    Public Enum CryptCertChainEngineExclusiveFlags
        CERT_CHAIN_EXCLUSIVE_ENABLE_CA_FLAG = &H1
    End Enum
    Public Type CERT_CHAIN_ENGINE_CONFIG
        cbSize As Long
        hRestrictedRoot As LongPtr 'HCERTSTORE
        hRestrictedTrust As LongPtr 'HCERTSTORE
        hRestrictedOther As LongPtr 'HCERTSTORE
        cAdditionalStore As Long
        rghAdditionalStore As LongPtr 'HCERTSTORE
        dwFlags As CryptCertGetChainFlags
        dwUrlRetrievalTimeout As Long
        MaximumCachedCertificates As Long
        CycleDetectionModulus As Long
        hExclusiveRoot As LongPtr 'HCERTSTORE
        hExclusiveTrustedPeople As LongPtr 'HCERTSTORE
        dwExclusiveFlags As CryptCertChainEngineExclusiveFlags
    End Type

    Public Enum CryptCertChainFindType
        CERT_CHAIN_FIND_BY_ISSUER = 1
    End Enum
    Public Enum CryptCertFindChainFlags
        CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG = &H0001
        CERT_CHAIN_FIND_BY_ISSUER_COMPLEX_CHAIN_FLAG = &H0002
        CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_URL_FLAG = &H0004
        CERT_CHAIN_FIND_BY_ISSUER_LOCAL_MACHINE_FLAG = &H0008
        CERT_CHAIN_FIND_BY_ISSUER_NO_KEY_FLAG = &H4000
        CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_FLAG = &H8000&
    End Enum

    Public Enum CertPredefChainVerifyPolicies
        CERT_CHAIN_POLICY_BASE = (1)
        CERT_CHAIN_POLICY_AUTHENTICODE = (2)
        CERT_CHAIN_POLICY_AUTHENTICODE_TS = (3)
        CERT_CHAIN_POLICY_SSL = (4)
        CERT_CHAIN_POLICY_BASIC_CONSTRAINTS = (5)
        CERT_CHAIN_POLICY_NT_AUTH = (6)
        CERT_CHAIN_POLICY_MICROSOFT_ROOT = (7)
        CERT_CHAIN_POLICY_EV = (8)
        CERT_CHAIN_POLICY_SSL_F12 = (9)
        CERT_CHAIN_POLICY_SSL_HPKP_HEADER = (10)
        CERT_CHAIN_POLICY_THIRD_PARTY_ROOT = (11)
        CERT_CHAIN_POLICY_SSL_KEY_PIN = (12)
    End Enum
    Public Type CERT_CHAIN_POLICY_PARA
        cbSize As Long
        dwFlags As CertPredefChainVerifyPolicies
        pvExtraPolicyPara As LongPtr 'void*
    End Type

    Public Type CERT_CHAIN_POLICY_STATUS
        cbSize As Long
        dwError As Long
        lChainIndex As Long
        lElementIndex As Long
        pvExtraPolicyStatus As LongPtr 'void* ' pszPolicyOID specific
    End Type

    Public Enum CertChainPolicyIgnoreFlags
        CERT_CHAIN_POLICY_IGNORE_NOT_TIME_VALID_FLAG = &H00000001
        CERT_CHAIN_POLICY_IGNORE_CTL_NOT_TIME_VALID_FLAG = &H00000002
        CERT_CHAIN_POLICY_IGNORE_NOT_TIME_NESTED_FLAG = &H00000004
        CERT_CHAIN_POLICY_IGNORE_INVALID_BASIC_CONSTRAINTS_FLAG = &H00000008
        CERT_CHAIN_POLICY_IGNORE_ALL_NOT_TIME_VALID_FLAGS = (CERT_CHAIN_POLICY_IGNORE_NOT_TIME_VALID_FLAG Or CERT_CHAIN_POLICY_IGNORE_CTL_NOT_TIME_VALID_FLAG Or CERT_CHAIN_POLICY_IGNORE_NOT_TIME_NESTED_FLAG)
        CERT_CHAIN_POLICY_ALLOW_UNKNOWN_CA_FLAG = &H00000010
        CERT_CHAIN_POLICY_IGNORE_WRONG_USAGE_FLAG = &H00000020
        CERT_CHAIN_POLICY_IGNORE_INVALID_NAME_FLAG = &H00000040
        CERT_CHAIN_POLICY_IGNORE_INVALID_POLICY_FLAG = &H00000080
        CERT_CHAIN_POLICY_IGNORE_END_REV_UNKNOWN_FLAG = &H00000100
        CERT_CHAIN_POLICY_IGNORE_CTL_SIGNER_REV_UNKNOWN_FLAG = &H00000200
        CERT_CHAIN_POLICY_IGNORE_CA_REV_UNKNOWN_FLAG = &H00000400
        CERT_CHAIN_POLICY_IGNORE_ROOT_REV_UNKNOWN_FLAG = &H00000800
        CERT_CHAIN_POLICY_IGNORE_ALL_REV_UNKNOWN_FLAGS = (CERT_CHAIN_POLICY_IGNORE_END_REV_UNKNOWN_FLAG Or CERT_CHAIN_POLICY_IGNORE_CTL_SIGNER_REV_UNKNOWN_FLAG Or CERT_CHAIN_POLICY_IGNORE_CA_REV_UNKNOWN_FLAG Or CERT_CHAIN_POLICY_IGNORE_ROOT_REV_UNKNOWN_FLAG)
        CERT_CHAIN_POLICY_ALLOW_TESTROOT_FLAG = &H00008000&
        CERT_CHAIN_POLICY_TRUST_TESTROOT_FLAG = &H00004000
        CERT_CHAIN_POLICY_IGNORE_NOT_SUPPORTED_CRITICAL_EXT_FLAG = &H00002000
        CERT_CHAIN_POLICY_IGNORE_PEER_TRUST_FLAG = &H00001000
        CERT_CHAIN_POLICY_IGNORE_WEAK_SIGNATURE_FLAG = &H08000000
    End Enum



    [Description("This definition assumes CERT_CHAIN_FIND_BY_ISSUER_PARA_HAS_EXTRA_FIELDS is set; for it to behave as if it's not, exclude the last two fields from cbSize.")]
    Public Type CERT_CHAIN_FIND_BY_ISSUER_PARA
        cbSize As Long
        ' If pszUsageIdentifier == NULL, matches any usage.
        pszUsageIdentifier As LongPtr 'LPCSTR
        ' If dwKeySpec == 0, matches any KeySpec
        dwKeySpec As CRYPT_AT_FLAGS
        ' When CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG is set in dwFindFlags,
        ' CryptAcquireCertificatePrivateKey is called to do the public key
        ' comparison. The following flags can be set to enable caching
        ' of the acquired private key or suppress CSP UI. See the API for more
        ' details on these flags.
        dwAcquirePrivateKeyFlags As CryptAcquireFlags
        ' Pointer to an array of X509, ASN.1 encoded issuer name blobs. If
        ' cIssuer == 0, matches any issuer
        cIssuer As Long
        rgIssuer As CERT_NAME_BLOB
        ' If NULL or Callback returns TRUE, builds the chain for the end
        ' certificate having a private key with the specified KeySpec and
        ' enhanced key usage.
        pfnFindCallback As LongPtr 'PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK
        pvFindArg As LongPtr 'void*
        '#ifdef CERT_CHAIN_FIND_BY_ISSUER_PARA_HAS_EXTRA_FIELDS
        ' Note, if you #define CERT_CHAIN_FIND_BY_ISSUER_PARA_HAS_EXTRA_FIELDS,
        ' then, you must zero all unused fields in this data structure.
        ' More fields could be added in a future release.
        ' If the following pointers are nonNull, returns the index of the
        ' matching issuer certificate, which is at:
        ' pChainContext->
        '      rgpChain[*pdwIssuerChainIndex]->rgpElement[*pdwIssuerElementIndex].
        ' The issuer name blob is compared against the Issuer field in the
        ' certificate. The *pdwIssuerElementIndex is set to the index of this
        ' subject certificate + 1. Therefore, its possible for a partial chain or
        ' a self signed certificate matching the name blob, where
        ' *pdwIssuerElementIndex points past the last certificate in the chain.
        ' Note, not updated if the above cIssuer == 0.
        pdwIssuerChainIndex As LongPtr 'DWORD*
        pdwIssuerElementIndex As LongPtr 'DWORD*
        '#endif
    End Type


    Public Enum CryptEncodeObjFlags
        CRYPT_ENCODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG = &H8
        CRYPT_ENCODE_ALLOC_FLAG = &H8000&
        CRYPT_UNICODE_NAME_ENCODE_ENABLE_T61_UNICODE_FLAG = CERT_RDN_ENABLE_T61_UNICODE_FLAG
        CRYPT_UNICODE_NAME_ENCODE_ENABLE_UTF8_UNICODE_FLAG = CERT_RDN_ENABLE_UTF8_UNICODE_FLAG
        CRYPT_UNICODE_NAME_ENCODE_FORCE_UTF8_UNICODE_FLAG = CERT_RDN_FORCE_UTF8_UNICODE_FLAG
        CRYPT_UNICODE_NAME_ENCODE_DISABLE_CHECK_TYPE_FLAG = CERT_RDN_DISABLE_CHECK_TYPE_FLAG
        CRYPT_SORTED_CTL_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG = &H10000
        CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG = &H20000
        CRYPT_ENCODE_ENABLE_UTF8PERCENT_FLAG = &H40000
        CRYPT_ENCODE_ENABLE_IA5CONVERSION_FLAG = (CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG Or CRYPT_ENCODE_ENABLE_UTF8PERCENT_FLAG)
    End Enum

    Public Type CERT_RDN_ATTR
        pszObjId As LongPtr 'LPSTR
        dwValueType As Long
        Value As CERT_RDN_VALUE_BLOB
    End Type
    Public Type CERT_RDN
        cRDNAttr As Long
        rgRDNAttr As LongPtr 'PCERT_RDN_ATTR
    End Type
    Public Type CERT_NAME_INFO
        cRDN As Long
        rgRDN As LongPtr 'PCERT_RDN
    End Type
    Public Type CERT_NAME_VALUE
        dwValueType As Long
        Value As CERT_RDN_VALUE_BLOB
    End Type



    Public Const szOID_COMMON_NAME  = "2.5.4.3"  ' case-ignore string
    Public Const szOID_SUR_NAME  = "2.5.4.4"  ' case-ignore string
    Public Const szOID_DEVICE_SERIAL_NUMBER  = "2.5.4.5"  ' printable string
    '  Geographic attribute types:
    Public Const szOID_COUNTRY_NAME  = "2.5.4.6"  ' printable 2char string
    Public Const szOID_LOCALITY_NAME  = "2.5.4.7"  ' case-ignore string
    Public Const szOID_STATE_OR_PROVINCE_NAME  = "2.5.4.8"  ' case-ignore string
    Public Const szOID_STREET_ADDRESS  = "2.5.4.9"  ' case-ignore string
    '  Organizational attribute types:
    Public Const szOID_ORGANIZATION_NAME  = "2.5.4.10"  ' case-ignore string
    Public Const szOID_ORGANIZATIONAL_UNIT_NAME  = "2.5.4.11"  ' case-ignore string
    Public Const szOID_TITLE  = "2.5.4.12"  ' case-ignore string
    '  Explanatory attribute types:
    Public Const szOID_DESCRIPTION  = "2.5.4.13"  ' case-ignore string
    Public Const szOID_SEARCH_GUIDE  = "2.5.4.14"
    Public Const szOID_BUSINESS_CATEGORY  = "2.5.4.15"  ' case-ignore string
    '  Postal addressing attribute types:
    Public Const szOID_POSTAL_ADDRESS  = "2.5.4.16"
    Public Const szOID_POSTAL_CODE  = "2.5.4.17"  ' case-ignore string
    Public Const szOID_POST_OFFICE_BOX  = "2.5.4.18"  ' case-ignore string
    Public Const szOID_PHYSICAL_DELIVERY_OFFICE_NAME  = "2.5.4.19"  ' case-ignore string
    '  Telecommunications addressing attribute types:
    Public Const szOID_TELEPHONE_NUMBER  = "2.5.4.20"  ' telephone number
    Public Const szOID_TELEX_NUMBER  = "2.5.4.21"
    Public Const szOID_TELETEXT_TERMINAL_IDENTIFIER  = "2.5.4.22"
    Public Const szOID_FACSIMILE_TELEPHONE_NUMBER  = "2.5.4.23"
    Public Const szOID_X21_ADDRESS  = "2.5.4.24"  ' numeric string
    Public Const szOID_INTERNATIONAL_ISDN_NUMBER  = "2.5.4.25"  ' numeric string
    Public Const szOID_REGISTERED_ADDRESS  = "2.5.4.26"
    Public Const szOID_DESTINATION_INDICATOR  = "2.5.4.27"  ' printable string
    '  Preference attribute types:
    Public Const szOID_PREFERRED_DELIVERY_METHOD  = "2.5.4.28"
    '  OSI application attribute types:
    Public Const szOID_PRESENTATION_ADDRESS  = "2.5.4.29"
    Public Const szOID_SUPPORTED_APPLICATION_CONTEXT  = "2.5.4.30"
    '  Relational application attribute types:
    Public Const szOID_MEMBER  = "2.5.4.31"
    Public Const szOID_OWNER  = "2.5.4.32"
    Public Const szOID_ROLE_OCCUPANT  = "2.5.4.33"
    Public Const szOID_SEE_ALSO  = "2.5.4.34"
    '  Security attribute types:
    Public Const szOID_USER_PASSWORD  = "2.5.4.35"
    Public Const szOID_USER_CERTIFICATE  = "2.5.4.36"
    Public Const szOID_CA_CERTIFICATE  = "2.5.4.37"
    Public Const szOID_AUTHORITY_REVOCATION_LIST  = "2.5.4.38"
    Public Const szOID_CERTIFICATE_REVOCATION_LIST  = "2.5.4.39"
    Public Const szOID_CROSS_CERTIFICATE_PAIR  = "2.5.4.40"
    '  Undocumented attribute types???
    ' #define szOID_???                         "2.5.4.41"
    Public Const szOID_GIVEN_NAME  = "2.5.4.42"  ' case-ignore string
    Public Const szOID_INITIALS  = "2.5.4.43"  ' case-ignore string
    '  The DN Qualifier attribute type specifies disambiguating information to add
    '  to the relative distinguished name of an entry. It is intended to be used
    '  for entries held in multiple DSAs which would otherwise have the same name,
    '  and that its value be the same in a given DSA for all entries to which
    '  the information has been added.
    Public Const szOID_DN_QUALIFIER  = "2.5.4.46"
    '  Pilot user attribute types:
    Public Const szOID_DOMAIN_COMPONENT  = "0.9.2342.19200300.100.1.25"  ' IA5, UTF8 string
    '  used for PKCS 12 attributes
    Public Const szOID_PKCS_12_FRIENDLY_NAME_ATTR  = "1.2.840.113549.1.9.20"
    Public Const szOID_PKCS_12_LOCAL_KEY_ID  = "1.2.840.113549.1.9.21"
    Public Const szOID_PKCS_12_KEY_PROVIDER_NAME_ATTR  = "1.3.6.1.4.1.311.17.1"
    Public Const szOID_LOCAL_MACHINE_KEYSET  = "1.3.6.1.4.1.311.17.2"
    Public Const szOID_PKCS_12_EXTENDED_ATTRIBUTES  = "1.3.6.1.4.1.311.17.3"
    Public Const szOID_PKCS_12_PROTECTED_PASSWORD_SECRET_BAG_TYPE_ID  = "1.3.6.1.4.1.311.17.4"
    ' +-------------------------------------------------------------------------
    '   Microsoft CERT_RDN attribute Object Identifiers
    ' --------------------------------------------------------------------------
    '  Special RDN containing the KEY_ID. Its value type is CERT_RDN_OCTET_STRING.
    Public Const szOID_KEYID_RDN  = "1.3.6.1.4.1.311.10.7.1"
    ' +-------------------------------------------------------------------------
    '   EV RDN OIDs
    ' --------------------------------------------------------------------------
    Public Const szOID_EV_RDN_LOCALE  = "1.3.6.1.4.1.311.60.2.1.1"
    Public Const szOID_EV_RDN_STATE_OR_PROVINCE  = "1.3.6.1.4.1.311.60.2.1.2"
    Public Const szOID_EV_RDN_COUNTRY  = "1.3.6.1.4.1.311.60.2.1.3"

    Public Enum CryptCertBundleChoice
        CERT_BUNDLE_CERTIFICATE = 0
        CERT_BUNDLE_CRL = 1
    End Enum
    Public Type CERT_OR_CRL_BLOB
        dwChoice As CryptCertBundleChoice
        cbEncoded As Long
        pbEncoded As LongPtr
    End Type
    Public Type CERT_OR_CRL_BUNDLE
        cItem As Long
        rgItem As LongPtr 'PCERT_OR_CRL_BLOB
    End Type
    Public Enum CertReqInfoVersion
        CERT_REQUEST_V1 = 0
    End Enum
    Public Type CERT_REQUEST_INFO
        dwVersion As CertReqInfoVersion
        Subject As CERT_NAME_BLOB
        SubjectPublicKeyInfo As CERT_PUBLIC_KEY_INFO
        cAttribute As Long
        rgAttribute As LongPtr 'PCRYPT_ATTRIBUTE
    End Type
    Public Enum CertKeygenReqInfoVersion
        CERT_KEYGEN_REQUEST_V1 = 0
    End Enum
    Public Type CERT_KEYGEN_REQUEST_INFO
        dwVersion As CertKeygenReqInfoVersion
        SubjectPublicKeyInfo As CERT_PUBLIC_KEY_INFO
        pwszChallengeString As LongPtr ' encoded as IA5
    End Type
    Public Type CERT_SIGNED_CONTENT_INFO
        ToBeSigned As CRYPT_DER_BLOB
        SignatureAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        Signature As CRYPT_BIT_BLOB
    End Type
    Public Type CRYPT_TIME_STAMP_REQUEST_INFO
        pszTimeStampAlgorithm As LongPtr ' pszObjId
        pszContentType As LongPtr ' pszObjId
        Content As CRYPT_OBJID_BLOB
        cAttribute As Long
        rgAttribute As LongPtr 'PCRYPT_ATTRIBUTE
    End Type

    Public Type CRYPT_ENROLLMENT_NAME_VALUE_PAIR
        pwszName As LongPtr
        pwszValue As LongPtr
    End Type

    Public Type CRYPT_CSP_PROVIDER
        dwKeySpec As CRYPT_AT_FLAGS
        pwszProviderName As LongPtr
        Signature As CRYPT_BIT_BLOB
    End Type



    Public Const CRYPT_ENCODE_DECODE_NONE As LongPtr = 0
    Public Const X509_CERT As LongPtr = (1)
    Public Const X509_CERT_TO_BE_SIGNED As LongPtr = (2)
    Public Const X509_CERT_CRL_TO_BE_SIGNED As LongPtr = (3)
    Public Const X509_CERT_REQUEST_TO_BE_SIGNED As LongPtr = (4)
    Public Const X509_NAME_VALUE As LongPtr = (6)
    Public Const X509_PUBLIC_KEY_INFO As LongPtr = (8)
    '  WINCRYPT_USE_SYMBOL_PREFIX defined to avoid symbol collision with OpenSSL
    '  Only used for specific symbols which have collisions today (Apr 2022) to avoid excessive duplication
    ' #ifndef WINCRYPT_USE_SYMBOL_PREFIX
    Public Const X509_EXTENSIONS As LongPtr = (5)
    Public Const X509_NAME As LongPtr = (7)
    Public Const WINCRYPT_X509_EXTENSIONS As LongPtr = (5)
    Public Const WINCRYPT_X509_NAME As LongPtr = (7)
    ' #endif
    ' +-------------------------------------------------------------------------
    '   Predefined X509 certificate extension data structures that can be
    '   encoded / decoded.
    ' --------------------------------------------------------------------------
    Public Const X509_AUTHORITY_KEY_ID As LongPtr = (9)
    Public Const X509_KEY_ATTRIBUTES As LongPtr = (10)
    Public Const X509_KEY_USAGE_RESTRICTION As LongPtr = (11)
    Public Const X509_ALTERNATE_NAME As LongPtr = (12)
    Public Const X509_BASIC_CONSTRAINTS As LongPtr = (13)
    Public Const X509_KEY_USAGE As LongPtr = (14)
    Public Const X509_BASIC_CONSTRAINTS2 As LongPtr = (15)
    Public Const X509_CERT_POLICIES As LongPtr = (16)
    ' +-------------------------------------------------------------------------
    '   Additional predefined data structures that can be encoded / decoded.
    ' --------------------------------------------------------------------------
    Public Const PKCS_UTC_TIME As LongPtr = (17)
    Public Const PKCS_TIME_REQUEST As LongPtr = (18)
    Public Const RSA_CSP_PUBLICKEYBLOB As LongPtr = (19)
    Public Const X509_UNICODE_NAME As LongPtr = (20)
    Public Const X509_KEYGEN_REQUEST_TO_BE_SIGNED As LongPtr = (21)
    Public Const PKCS_ATTRIBUTE As LongPtr = (22)
    Public Const PKCS_CONTENT_INFO_SEQUENCE_OF_ANY As LongPtr = (23)
    ' +-------------------------------------------------------------------------
    '   Predefined primitive data structures that can be encoded / decoded.
    ' --------------------------------------------------------------------------
    Public Const X509_UNICODE_NAME_VALUE As LongPtr = (24)
    Public Const X509_ANY_STRING As LongPtr = X509_NAME_VALUE
    Public Const X509_UNICODE_ANY_STRING As LongPtr = X509_UNICODE_NAME_VALUE
    Public Const X509_OCTET_STRING As LongPtr = (25)
    Public Const X509_BITS As LongPtr = (26)
    Public Const X509_INTEGER As LongPtr = (27)
    Public Const X509_MULTI_BYTE_INTEGER As LongPtr = (28)
    Public Const X509_ENUMERATED As LongPtr = (29)
    Public Const X509_CHOICE_OF_TIME As LongPtr = (30)
    ' +-------------------------------------------------------------------------
    '   More predefined X509 certificate extension data structures that can be
    '   encoded / decoded.
    ' --------------------------------------------------------------------------
    Public Const X509_AUTHORITY_KEY_ID2 As LongPtr = (31)
    Public Const X509_AUTHORITY_INFO_ACCESS As LongPtr = (32)
    Public Const X509_SUBJECT_INFO_ACCESS As LongPtr = X509_AUTHORITY_INFO_ACCESS
    Public Const X509_CRL_REASON_CODE As LongPtr = X509_ENUMERATED
    Public Const PKCS_CONTENT_INFO As LongPtr = (33)
    Public Const X509_SEQUENCE_OF_ANY As LongPtr = (34)
    Public Const X509_CRL_DIST_POINTS As LongPtr = (35)
    Public Const X509_ENHANCED_KEY_USAGE As LongPtr = (36)
    Public Const PKCS_CTL As LongPtr = (37)
    Public Const X509_MULTI_BYTE_UINT As LongPtr = (38)
    Public Const X509_DSS_PUBLICKEY As LongPtr = X509_MULTI_BYTE_UINT
    Public Const X509_DSS_PARAMETERS As LongPtr = (39)
    Public Const X509_DSS_SIGNATURE As LongPtr = (40)
    Public Const PKCS_RC2_CBC_PARAMETERS As LongPtr = (41)
    Public Const PKCS_SMIME_CAPABILITIES As LongPtr = (42)
    '  Qualified Certificate Statements Extension uses the same encode/decode
    '  function as PKCS_SMIME_CAPABILITIES. Its data structures are identical
    '  except for the names of the fields.
    Public Const X509_QC_STATEMENTS_EXT As LongPtr = (42)
    ' +-------------------------------------------------------------------------
    '   data structures for private keys
    ' --------------------------------------------------------------------------
    Public Const PKCS_RSA_PRIVATE_KEY As LongPtr = (43)
    Public Const PKCS_PRIVATE_KEY_INFO As LongPtr = (44)
    Public Const PKCS_ENCRYPTED_PRIVATE_KEY_INFO As LongPtr = (45)
    ' +-------------------------------------------------------------------------
    '   certificate policy qualifier
    ' --------------------------------------------------------------------------
    Public Const X509_PKIX_POLICY_QUALIFIER_USERNOTICE As LongPtr = (46)
    ' +-------------------------------------------------------------------------
    '   Diffie-Hellman Key Exchange
    ' --------------------------------------------------------------------------
    Public Const X509_DH_PUBLICKEY As LongPtr = X509_MULTI_BYTE_UINT
    Public Const X509_DH_PARAMETERS As LongPtr = (47)
    Public Const PKCS_ATTRIBUTES As LongPtr = (48)
    Public Const PKCS_SORTED_CTL As LongPtr = (49)
    ' +-------------------------------------------------------------------------
    '   ECC Signature
    ' --------------------------------------------------------------------------
    '  Uses the same encode/decode function as X509_DH_PARAMETERS. Its data
    '  structure is identical except for the names of the fields.
    Public Const X509_ECC_SIGNATURE As LongPtr = (47)
    ' +-------------------------------------------------------------------------
    '   X942 Diffie-Hellman
    ' --------------------------------------------------------------------------
    Public Const X942_DH_PARAMETERS As LongPtr = (50)
    ' +-------------------------------------------------------------------------
    '   The following is the same as X509_BITS, except before encoding,
    '   the bit length is decremented to exclude trailing zero bits.
    ' --------------------------------------------------------------------------
    Public Const X509_BITS_WITHOUT_TRAILING_ZEROES As LongPtr = (51)
    ' +-------------------------------------------------------------------------
    '   X942 Diffie-Hellman Other Info
    ' --------------------------------------------------------------------------
    Public Const X942_OTHER_INFO As LongPtr = (52)
    Public Const X509_CERT_PAIR As LongPtr = (53)
    Public Const X509_ISSUING_DIST_POINT As LongPtr = (54)
    Public Const X509_NAME_CONSTRAINTS As LongPtr = (55)
    Public Const X509_POLICY_MAPPINGS As LongPtr = (56)
    Public Const X509_POLICY_CONSTRAINTS As LongPtr = (57)
    Public Const X509_CROSS_CERT_DIST_POINTS As LongPtr = (58)
    ' +-------------------------------------------------------------------------
    '   Certificate Management Messages over CMS (CMC) Data Structures
    ' --------------------------------------------------------------------------
    Public Const CMC_DATA As LongPtr = (59)
    Public Const CMC_RESPONSE As LongPtr = (60)
    Public Const CMC_STATUS As LongPtr = (61)
    Public Const CMC_ADD_EXTENSIONS As LongPtr = (62)
    Public Const CMC_ADD_ATTRIBUTES As LongPtr = (63)
    ' +-------------------------------------------------------------------------
    '   Certificate Template
    ' --------------------------------------------------------------------------
    Public Const X509_CERTIFICATE_TEMPLATE As LongPtr = (64)
    ' +-------------------------------------------------------------------------
    '   Online Certificate Status Protocol (OCSP) Data Structures
    ' --------------------------------------------------------------------------
    Public Const OCSP_SIGNED_REQUEST As LongPtr = (65)
    Public Const OCSP_BASIC_SIGNED_RESPONSE As LongPtr = (68)
    Public Const OCSP_BASIC_RESPONSE As LongPtr = (69)
    '  WINCRYPT_USE_SYMBOL_PREFIX defined to avoid symbol collision with OpenSSL
    '  Only used for specific symbols which have collisions today (Apr 2022) to avoid excessive duplication
    ' #ifndef WINCRYPT_USE_SYMBOL_PREFIX
    Public Const OCSP_REQUEST As LongPtr = (66)
    Public Const OCSP_RESPONSE As LongPtr = (67)
    ' #else
    Public Const WINCRYPT_OCSP_REQUEST As LongPtr = (66)
    Public Const WINCRYPT_OCSP_RESPONSE As LongPtr = (67)
    ' #endif
    ' +-------------------------------------------------------------------------
    '   Logotype and Biometric Extensions
    ' --------------------------------------------------------------------------
    Public Const X509_LOGOTYPE_EXT As LongPtr = (70)
    Public Const X509_BIOMETRIC_EXT As LongPtr = (71)
    Public Const CNG_RSA_PUBLIC_KEY_BLOB As LongPtr = (72)
    Public Const X509_OBJECT_IDENTIFIER As LongPtr = (73)
    Public Const X509_ALGORITHM_IDENTIFIER As LongPtr = (74)
    Public Const PKCS_RSA_SSA_PSS_PARAMETERS As LongPtr = (75)
    Public Const PKCS_RSAES_OAEP_PARAMETERS As LongPtr = (76)
    Public Const ECC_CMS_SHARED_INFO As LongPtr = (77)
    ' +-------------------------------------------------------------------------
    '   TIMESTAMP
    ' --------------------------------------------------------------------------
    Public Const TIMESTAMP_REQUEST As LongPtr = (78)
    Public Const TIMESTAMP_RESPONSE As LongPtr = (79)
    Public Const TIMESTAMP_INFO As LongPtr = (80)
    ' +-------------------------------------------------------------------------
    '   CertificateBundle
    ' --------------------------------------------------------------------------
    Public Const X509_CERT_BUNDLE As LongPtr = (81)
    ' +-------------------------------------------------------------------------
    '   ECC Keys
    ' --------------------------------------------------------------------------
    Public Const X509_ECC_PRIVATE_KEY As LongPtr = (82)  ' CRYPT_ECC_PRIVATE_KEY_INFO
    Public Const CNG_RSA_PRIVATE_KEY_BLOB As LongPtr = (83)  ' BCRYPT_RSAKEY_BLOB
    ' +-------------------------------------------------------------------------
    '   Subject Directory Attributes extension
    ' --------------------------------------------------------------------------
    Public Const X509_SUBJECT_DIR_ATTRS As LongPtr = (84)
    ' +-------------------------------------------------------------------------
    '   Generic ECC Parameters
    ' --------------------------------------------------------------------------
    Public Const X509_ECC_PARAMETERS As LongPtr = (85)
    ' +-------------------------------------------------------------------------
    '   Predefined PKCS #7 data structures that can be encoded / decoded.
    ' --------------------------------------------------------------------------
    '  WINCRYPT_USE_SYMBOL_PREFIX defined to avoid symbol collision with OpenSSL
    '  Only used for specific symbols which have collisions today (Apr 2022) to avoid excessive duplication
    ' #ifndef WINCRYPT_USE_SYMBOL_PREFIX
    Public Const PKCS7_SIGNER_INFO As LongPtr = (500)
    '#else
    Public Const WINCRYPT_PKCS7_SIGNER_INFO As LongPtr = (500)
    ' #endif
    ' +-------------------------------------------------------------------------
    '   Predefined PKCS #7 data structures that can be encoded / decoded.
    ' --------------------------------------------------------------------------
    Public Const CMS_SIGNER_INFO As LongPtr = (501)

    Public Const szOID_AUTHORITY_KEY_IDENTIFIER  = "2.5.29.1"
    Public Const szOID_KEY_ATTRIBUTES  = "2.5.29.2"
    Public Const szOID_CERT_POLICIES_95  = "2.5.29.3"
    Public Const szOID_KEY_USAGE_RESTRICTION  = "2.5.29.4"
    Public Const szOID_SUBJECT_ALT_NAME  = "2.5.29.7"
    Public Const szOID_ISSUER_ALT_NAME  = "2.5.29.8"
    Public Const szOID_BASIC_CONSTRAINTS  = "2.5.29.10"
    Public Const szOID_KEY_USAGE  = "2.5.29.15"
    Public Const szOID_PRIVATEKEY_USAGE_PERIOD  = "2.5.29.16"
    Public Const szOID_BASIC_CONSTRAINTS2  = "2.5.29.19"
    Public Const szOID_CERT_POLICIES  = "2.5.29.32"
    Public Const szOID_ANY_CERT_POLICY  = "2.5.29.32.0"
    Public Const szOID_INHIBIT_ANY_POLICY  = "2.5.29.54"
    Public Const szOID_AUTHORITY_KEY_IDENTIFIER2  = "2.5.29.35"
    Public Const szOID_SUBJECT_KEY_IDENTIFIER  = "2.5.29.14"
    Public Const szOID_SUBJECT_ALT_NAME2  = "2.5.29.17"
    Public Const szOID_ISSUER_ALT_NAME2  = "2.5.29.18"
    Public Const szOID_CRL_REASON_CODE  = "2.5.29.21"
    Public Const szOID_REASON_CODE_HOLD  = "2.5.29.23"
    Public Const szOID_CRL_DIST_POINTS  = "2.5.29.31"
    Public Const szOID_ENHANCED_KEY_USAGE  = "2.5.29.37"
    Public Const szOID_ANY_ENHANCED_KEY_USAGE  = "2.5.29.37.0"
    '  szOID_CRL_NUMBER -- Base CRLs only.  Monotonically increasing sequence
    '  number for each CRL issued by a CA.
    Public Const szOID_CRL_NUMBER  = "2.5.29.20"
    '  szOID_DELTA_CRL_INDICATOR -- Delta CRLs only.  Marked critical.
    '  Contains the minimum base CRL Number that can be used with a delta CRL.
    Public Const szOID_DELTA_CRL_INDICATOR  = "2.5.29.27"
    Public Const szOID_ISSUING_DIST_POINT  = "2.5.29.28"
    '  szOID_FRESHEST_CRL -- Base CRLs only.  Formatted identically to a CDP
    '  extension that holds URLs to fetch the delta CRL.
    Public Const szOID_FRESHEST_CRL  = "2.5.29.46"
    Public Const szOID_NAME_CONSTRAINTS  = "2.5.29.30"
    '  Note on 1/1/2000 szOID_POLICY_MAPPINGS was changed from "2.5.29.5"
    Public Const szOID_POLICY_MAPPINGS  = "2.5.29.33"
    Public Const szOID_LEGACY_POLICY_MAPPINGS  = "2.5.29.5"
    Public Const szOID_POLICY_CONSTRAINTS  = "2.5.29.36"
    '  Microsoft PKCS10 Attributes
    Public Const szOID_RENEWAL_CERTIFICATE  = "1.3.6.1.4.1.311.13.1"
    Public Const szOID_ENROLLMENT_NAME_VALUE_PAIR  = "1.3.6.1.4.1.311.13.2.1"
    Public Const szOID_ENROLLMENT_CSP_PROVIDER  = "1.3.6.1.4.1.311.13.2.2"
    Public Const szOID_OS_VERSION  = "1.3.6.1.4.1.311.13.2.3"
    '  Extension contain certificate type
    Public Const szOID_ENROLLMENT_AGENT  = "1.3.6.1.4.1.311.20.2.1"
    '  Internet Public Key Infrastructure (PKIX)
    Public Const szOID_PKIX  = "1.3.6.1.5.5.7"
    Public Const szOID_PKIX_PE  = "1.3.6.1.5.5.7.1"
    Public Const szOID_AUTHORITY_INFO_ACCESS  = "1.3.6.1.5.5.7.1.1"
    Public Const szOID_SUBJECT_INFO_ACCESS  = "1.3.6.1.5.5.7.1.11"
    Public Const szOID_BIOMETRIC_EXT  = "1.3.6.1.5.5.7.1.2"
    Public Const szOID_QC_STATEMENTS_EXT  = "1.3.6.1.5.5.7.1.3"
    Public Const szOID_LOGOTYPE_EXT  = "1.3.6.1.5.5.7.1.12"
    '  Following is encoded as a SEQUENCE OF INTEGER.
    '  For OCSP Must-Staple, one of the integers will be set to 5
    '  which corresponds to the OCSP status_request TLS extension,
    '  See RFC 7633 for more details.
    Public Const szOID_TLS_FEATURES_EXT  = "1.3.6.1.5.5.7.1.24"
    '  Microsoft extensions or attributes
    Public Const szOID_CERT_EXTENSIONS  = "1.3.6.1.4.1.311.2.1.14"
    Public Const szOID_NEXT_UPDATE_LOCATION  = "1.3.6.1.4.1.311.10.2"
    Public Const szOID_REMOVE_CERTIFICATE  = "1.3.6.1.4.1.311.10.8.1"
    Public Const szOID_CROSS_CERT_DIST_POINTS  = "1.3.6.1.4.1.311.10.9.1"
    '   Microsoft PKCS #7 ContentType Object Identifiers
    Public Const szOID_CTL  = "1.3.6.1.4.1.311.10.1"
    '   Microsoft Sorted CTL Extension Object Identifier
    Public Const szOID_SORTED_CTL  = "1.3.6.1.4.1.311.10.1.1"
    '  serialized serial numbers for PRS
    ' #ifndef szOID_SERIALIZED
    Public Const szOID_SERIALIZED  = "1.3.6.1.4.1.311.10.3.3.1"
    ' #endif
    '  UPN principal name in SubjectAltName
    ' #ifndef szOID_NT_PRINCIPAL_NAME
    Public Const szOID_NT_PRINCIPAL_NAME  = "1.3.6.1.4.1.311.20.2.3"
    ' #endif
    '  Internationalized Email Address in SubjectAltName (OtherName:UTF8)
    ' #ifndef szOID_INTERNATIONALIZED_EMAIL_ADDRESS
    Public Const szOID_INTERNATIONALIZED_EMAIL_ADDRESS  = "1.3.6.1.4.1.311.20.2.4"
    ' #endif
    '  Windows product update unauthenticated attribute
    ' #ifndef szOID_PRODUCT_UPDATE
    Public Const szOID_PRODUCT_UPDATE  = "1.3.6.1.4.1.311.31.1"
    ' #endif
    '  CryptUI
    Public Const szOID_ANY_APPLICATION_POLICY  = "1.3.6.1.4.1.311.10.12.1"
    ' +-------------------------------------------------------------------------
    '   Object Identifiers for use with Auto Enrollment
    ' --------------------------------------------------------------------------
    Public Const szOID_AUTO_ENROLL_CTL_USAGE  = "1.3.6.1.4.1.311.20.1"
    '  Extension contain certificate type
    '  AKA Certificate template extension (v1)
    Public Const szOID_ENROLL_CERTTYPE_EXTENSION  = "1.3.6.1.4.1.311.20.2"
    Public Const szOID_CERT_MANIFOLD  = "1.3.6.1.4.1.311.20.3"
    ' +-------------------------------------------------------------------------
    '   Object Identifiers for use with the MS Certificate Server
    ' --------------------------------------------------------------------------
    ' #ifndef szOID_CERTSRV_CA_VERSION
    Public Const szOID_CERTSRV_CA_VERSION  = "1.3.6.1.4.1.311.21.1"
    ' #endif
    '  szOID_CERTSRV_PREVIOUS_CERT_HASH -- Contains the sha1 hash of the previous
    '  version of the CA certificate.
    Public Const szOID_CERTSRV_PREVIOUS_CERT_HASH  = "1.3.6.1.4.1.311.21.2"
    '  szOID_CRL_VIRTUAL_BASE -- Delta CRLs only.  Contains the base CRL Number
    '  of the corresponding base CRL.
    Public Const szOID_CRL_VIRTUAL_BASE  = "1.3.6.1.4.1.311.21.3"
    '  szOID_CRL_NEXT_PUBLISH -- Contains the time when the next CRL is expected
    '  to be published.  This may be sooner than the CRL's NextUpdate field.
    Public Const szOID_CRL_NEXT_PUBLISH  = "1.3.6.1.4.1.311.21.4"
    '  Enhanced Key Usage for CA encryption certificate
    Public Const szOID_KP_CA_EXCHANGE  = "1.3.6.1.4.1.311.21.5"
    '  Enhanced Key Usage for Privacy CA encryption certificate
    Public Const szOID_KP_PRIVACY_CA  = "1.3.6.1.4.1.311.21.36"
    '  Enhanced Key Usage for key recovery agent certificate
    Public Const szOID_KP_KEY_RECOVERY_AGENT  = "1.3.6.1.4.1.311.21.6"
    '  Certificate template extension (v2)
    Public Const szOID_CERTIFICATE_TEMPLATE  = "1.3.6.1.4.1.311.21.7"
    '  The root oid for all enterprise specific oids
    Public Const szOID_ENTERPRISE_OID_ROOT  = "1.3.6.1.4.1.311.21.8"
    '  Dummy signing Subject RDN
    Public Const szOID_RDN_DUMMY_SIGNER  = "1.3.6.1.4.1.311.21.9"
    '  Application Policies extension -- same encoding as szOID_CERT_POLICIES
    Public Const szOID_APPLICATION_CERT_POLICIES  = "1.3.6.1.4.1.311.21.10"
    '  Application Policy Mappings -- same encoding as szOID_POLICY_MAPPINGS
    Public Const szOID_APPLICATION_POLICY_MAPPINGS  = "1.3.6.1.4.1.311.21.11"
    '  Application Policy Constraints -- same encoding as szOID_POLICY_CONSTRAINTS
    Public Const szOID_APPLICATION_POLICY_CONSTRAINTS  = "1.3.6.1.4.1.311.21.12"
    Public Const szOID_ARCHIVED_KEY_ATTR  = "1.3.6.1.4.1.311.21.13"
    Public Const szOID_CRL_SELF_CDP  = "1.3.6.1.4.1.311.21.14"
    '  Requires all certificates below the root to have a non-empty intersecting
    '  issuance certificate policy usage.
    Public Const szOID_REQUIRE_CERT_CHAIN_POLICY  = "1.3.6.1.4.1.311.21.15"
    Public Const szOID_ARCHIVED_KEY_CERT_HASH  = "1.3.6.1.4.1.311.21.16"
    Public Const szOID_ISSUED_CERT_HASH  = "1.3.6.1.4.1.311.21.17"
    '  Enhanced key usage for DS email replication
    Public Const szOID_DS_EMAIL_REPLICATION  = "1.3.6.1.4.1.311.21.19"
    Public Const szOID_REQUEST_CLIENT_INFO  = "1.3.6.1.4.1.311.21.20"
    Public Const szOID_ENCRYPTED_KEY_HASH  = "1.3.6.1.4.1.311.21.21"
    Public Const szOID_CERTSRV_CROSSCA_VERSION  = "1.3.6.1.4.1.311.21.22"
    ' +-------------------------------------------------------------------------
    '   Object Identifiers for use with the MS Directory Service
    ' --------------------------------------------------------------------------
    Public Const szOID_NTDS_REPLICATION  = "1.3.6.1.4.1.311.25.1"
    Public Const szOID_NTDS_CA_SECURITY_EXT  = "1.3.6.1.4.1.311.25.2"  ' OID arc for Microsoft CA custom security extension
    Public Const szOID_NTDS_OBJECTSID  = "1.3.6.1.4.1.311.25.2.1"  ' OID for objectSid info
    ' +-------------------------------------------------------------------------
    '   URI Prefixes for use with the MS Directory Service
    ' --------------------------------------------------------------------------
    Public Const wszURI_NTDS_OBJECTSID_PREFIX  = "tag:microsoft.com,2022-09-14:sid:"  ' URI for objectSid info in the SAN, to be followed by a string SID
    ' +-------------------------------------------------------------------------
    '   Extension Object Identifiers
    ' --------------------------------------------------------------------------
    Public Const szOID_SUBJECT_DIR_ATTRS  = "2.5.29.9"
    ' +-------------------------------------------------------------------------
    '   Enhanced Key Usage (Purpose) Object Identifiers
    ' --------------------------------------------------------------------------
    Public Const szOID_PKIX_KP  = "1.3.6.1.5.5.7.3"
    '  Consistent key usage bits: DIGITAL_SIGNATURE, KEY_ENCIPHERMENT
    '  or KEY_AGREEMENT
    Public Const szOID_PKIX_KP_SERVER_AUTH  = "1.3.6.1.5.5.7.3.1"
    '  Consistent key usage bits: DIGITAL_SIGNATURE
    Public Const szOID_PKIX_KP_CLIENT_AUTH  = "1.3.6.1.5.5.7.3.2"
    '  Consistent key usage bits: DIGITAL_SIGNATURE
    Public Const szOID_PKIX_KP_CODE_SIGNING  = "1.3.6.1.5.5.7.3.3"
    '  Consistent key usage bits: DIGITAL_SIGNATURE, NON_REPUDIATION and/or
    '  (KEY_ENCIPHERMENT or KEY_AGREEMENT)
    Public Const szOID_PKIX_KP_EMAIL_PROTECTION  = "1.3.6.1.5.5.7.3.4"
    '  Consistent key usage bits: DIGITAL_SIGNATURE and/or
    '  (KEY_ENCIPHERMENT or KEY_AGREEMENT)
    Public Const szOID_PKIX_KP_IPSEC_END_SYSTEM  = "1.3.6.1.5.5.7.3.5"
    '  Consistent key usage bits: DIGITAL_SIGNATURE and/or
    '  (KEY_ENCIPHERMENT or KEY_AGREEMENT)
    Public Const szOID_PKIX_KP_IPSEC_TUNNEL  = "1.3.6.1.5.5.7.3.6"
    '  Consistent key usage bits: DIGITAL_SIGNATURE and/or
    '  (KEY_ENCIPHERMENT or KEY_AGREEMENT)
    Public Const szOID_PKIX_KP_IPSEC_USER  = "1.3.6.1.5.5.7.3.7"
    '  Consistent key usage bits: DIGITAL_SIGNATURE or NON_REPUDIATION
    Public Const szOID_PKIX_KP_TIMESTAMP_SIGNING  = "1.3.6.1.5.5.7.3.8"
    '  OCSP response signer
    Public Const szOID_PKIX_KP_OCSP_SIGNING  = "1.3.6.1.5.5.7.3.9"
    '  Following extension is present to indicate no revocation checking
    '  for the OCSP signer certificate
    Public Const szOID_PKIX_OCSP_NOCHECK  = "1.3.6.1.5.5.7.48.1.5"
    '  OCSP Nonce
    Public Const szOID_PKIX_OCSP_NONCE  = "1.3.6.1.5.5.7.48.1.2"
    '  IKE (Internet Key Exchange) Intermediate KP for an IPsec end entity.
    '  Defined in draft-ietf-ipsec-pki-req-04.txt, December 14, 1999.
    Public Const szOID_IPSEC_KP_IKE_INTERMEDIATE  = "1.3.6.1.5.5.8.2.2"
    '  iso (1) org (3) dod (6) internet (1) security (5) kerberosv5 (2) pkinit (3) 5
    Public Const szOID_PKINIT_KP_KDC  = "1.3.6.1.5.2.3.5"
    ' +-------------------------------------------------------------------------
    '   Microsoft Enhanced Key Usage (Purpose) Object Identifiers
    ' +-------------------------------------------------------------------------
    '   Signer of CTLs
    Public Const szOID_KP_CTL_USAGE_SIGNING  = "1.3.6.1.4.1.311.10.3.1"
    '   Signer of TimeStamps
    Public Const szOID_KP_TIME_STAMP_SIGNING  = "1.3.6.1.4.1.311.10.3.2"
    ' #ifndef szOID_SERVER_GATED_CRYPTO
    Public Const szOID_SERVER_GATED_CRYPTO  = "1.3.6.1.4.1.311.10.3.3"
    ' #endif
    ' #ifndef szOID_SGC_NETSCAPE
    Public Const szOID_SGC_NETSCAPE  = "2.16.840.1.113730.4.1"
    ' #endif
    Public Const szOID_KP_EFS  = "1.3.6.1.4.1.311.10.3.4"
    Public Const szOID_EFS_RECOVERY  = "1.3.6.1.4.1.311.10.3.4.1"
    '  Signed by Microsoft through hardware certification (WHQL)
    Public Const szOID_WHQL_CRYPTO  = "1.3.6.1.4.1.311.10.3.5"
    '  Signed by Microsoft after the developer attests it is valid (Attested WHQL)
    Public Const szOID_ATTEST_WHQL_CRYPTO  = "1.3.6.1.4.1.311.10.3.5.1"
    '  Signed by the NT5 build lab
    Public Const szOID_NT5_CRYPTO  = "1.3.6.1.4.1.311.10.3.6"
    '  Signed by and OEM of WHQL
    Public Const szOID_OEM_WHQL_CRYPTO  = "1.3.6.1.4.1.311.10.3.7"
    '  Signed by the Embedded NT
    Public Const szOID_EMBEDDED_NT_CRYPTO  = "1.3.6.1.4.1.311.10.3.8"
    '  Signer of a CTL containing trusted roots
    Public Const szOID_ROOT_LIST_SIGNER  = "1.3.6.1.4.1.311.10.3.9"
    '  Can sign cross-cert and subordinate CA requests with qualified
    '  subordination (name constraints, policy mapping, etc.)
    Public Const szOID_KP_QUALIFIED_SUBORDINATION  = "1.3.6.1.4.1.311.10.3.10"
    '  Can be used to encrypt/recover escrowed keys
    Public Const szOID_KP_KEY_RECOVERY  = "1.3.6.1.4.1.311.10.3.11"
    '  Signer of documents
    Public Const szOID_KP_DOCUMENT_SIGNING  = "1.3.6.1.4.1.311.10.3.12"
    '  The default WinVerifyTrust Authenticode policy is to treat all time stamped
    '  signatures as being valid forever. This OID limits the valid lifetime of the
    '  signature to the lifetime of the certificate. This allows timestamped
    '  signatures to expire. Normally this OID will be used in conjunction with
    '  szOID_PKIX_KP_CODE_SIGNING to indicate new time stamp semantics should be
    '  used. Support for this OID was added in WXP.
    Public Const szOID_KP_LIFETIME_SIGNING  = "1.3.6.1.4.1.311.10.3.13"
    Public Const szOID_KP_MOBILE_DEVICE_SOFTWARE  = "1.3.6.1.4.1.311.10.3.14"
    Public Const szOID_KP_SMART_DISPLAY  = "1.3.6.1.4.1.311.10.3.15"
    Public Const szOID_KP_CSP_SIGNATURE  = "1.3.6.1.4.1.311.10.3.16"
    Public Const szOID_KP_FLIGHT_SIGNING  = "1.3.6.1.4.1.311.10.3.27"
    Public Const szOID_PLATFORM_MANIFEST_BINARY_ID  = "1.3.6.1.4.1.311.10.3.28"
    ' #ifndef szOID_DRM
    Public Const szOID_DRM  = "1.3.6.1.4.1.311.10.5.1"
    ' #endif
    '  Microsoft DRM EKU
    ' #ifndef szOID_DRM_INDIVIDUALIZATION
    Public Const szOID_DRM_INDIVIDUALIZATION  = "1.3.6.1.4.1.311.10.5.2"
    ' #endif
    ' #ifndef szOID_LICENSES
    Public Const szOID_LICENSES  = "1.3.6.1.4.1.311.10.6.1"
    ' #endif
    ' #ifndef szOID_LICENSE_SERVER
    Public Const szOID_LICENSE_SERVER  = "1.3.6.1.4.1.311.10.6.2"
    ' #endif
    ' #ifndef szOID_KP_SMARTCARD_LOGON
    Public Const szOID_KP_SMARTCARD_LOGON  = "1.3.6.1.4.1.311.20.2.2"
    ' #endif
    Public Const szOID_KP_KERNEL_MODE_CODE_SIGNING  = "1.3.6.1.4.1.311.61.1.1"
    Public Const szOID_KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING  = "1.3.6.1.4.1.311.61.4.1"
    '  Signer of CRL
    Public Const szOID_REVOKED_LIST_SIGNER  = "1.3.6.1.4.1.311.10.3.19"
    '  Signer of Kits-built code
    Public Const szOID_WINDOWS_KITS_SIGNER  = "1.3.6.1.4.1.311.10.3.20"
    '  Signer of Windows RT code
    Public Const szOID_WINDOWS_RT_SIGNER  = "1.3.6.1.4.1.311.10.3.21"
    '  Signer of Protected Process Light code
    Public Const szOID_PROTECTED_PROCESS_LIGHT_SIGNER  = "1.3.6.1.4.1.311.10.3.22"
    '  Signer of Windows TCB code
    Public Const szOID_WINDOWS_TCB_SIGNER  = "1.3.6.1.4.1.311.10.3.23"
    '  Signer of Protected Process code
    Public Const szOID_PROTECTED_PROCESS_SIGNER  = "1.3.6.1.4.1.311.10.3.24"
    '  Signer of third-party components that are Windows in box
    Public Const szOID_WINDOWS_THIRD_PARTY_COMPONENT_SIGNER  = "1.3.6.1.4.1.311.10.3.25"
    '  Signed by the Windows Software Portal
    Public Const szOID_WINDOWS_SOFTWARE_EXTENSION_SIGNER  = "1.3.6.1.4.1.311.10.3.26"
    '  CTL containing disallowed entries
    Public Const szOID_DISALLOWED_LIST  = "1.3.6.1.4.1.311.10.3.30"
    '  Signer of a CTL containing Pin Rules.
    '  The szOID_ROOT_LIST_SIGNER OID can also be used
    Public Const szOID_PIN_RULES_SIGNER  = "1.3.6.1.4.1.311.10.3.31"
    '  CTL containing Site Pin Rules
    Public Const szOID_PIN_RULES_CTL  = "1.3.6.1.4.1.311.10.3.32"
    '  Pin Rules CTL extension
    Public Const szOID_PIN_RULES_EXT  = "1.3.6.1.4.1.311.10.3.33"
    '  SubjectAlgorithm for Pin Rules CTL entries
    Public Const szOID_PIN_RULES_DOMAIN_NAME  = "1.3.6.1.4.1.311.10.3.34"
    '  Pin Rules Log End Date CTL extension
    Public Const szOID_PIN_RULES_LOG_END_DATE_EXT  = "1.3.6.1.4.1.311.10.3.35"
    '  Image can be executed in Isolated User Mode (IUM)
    Public Const szOID_IUM_SIGNING  = "1.3.6.1.4.1.311.10.3.37"
    '  Signed by Microsoft through EV hardware certification (EV WHQL)
    Public Const szOID_EV_WHQL_CRYPTO  = "1.3.6.1.4.1.311.10.3.39"
    '  Signer of Biometric code
    Public Const szOID_BIOMETRIC_SIGNING  = "1.3.6.1.4.1.311.10.3.41"
    '  Image can be executed in a VSM Enclave
    Public Const szOID_ENCLAVE_SIGNING  = "1.3.6.1.4.1.311.10.3.42"
    '  The following extension is set in the disallowed CTL to trigger
    '  a quicker sync of the autorootupdate CTL
    Public Const szOID_SYNC_ROOT_CTL_EXT  = "1.3.6.1.4.1.311.10.3.50"
    '  The following extension is set to identify flighted CTLs
    Public Const szOID_FLIGHT_CTL_EXT  = "1.3.6.1.4.1.311.10.3.51"
    '  CTL containing HPKP Domain Names
    Public Const szOID_HPKP_DOMAIN_NAME_CTL  = "1.3.6.1.4.1.311.10.3.60"
    '  SubjectAlgorithm for HPKP Domain CTL entries: szOID_PIN_RULES_DOMAIN_NAME
    '  CTL containing HPKP Header Values. Stored as an extension in the
    '  Hpkp Domain Name CTL. This OID is also used to identify
    '  the extension.
    Public Const szOID_HPKP_HEADER_VALUE_CTL  = "1.3.6.1.4.1.311.10.3.61"
    '  SubjectAlgorithm for HPKP Header Value CTL entries: szOID_NIST_sha256
    '  Only the first 16 bytes of the SHA256 hash are used
    '  HAL Extensions
    Public Const szOID_KP_KERNEL_MODE_HAL_EXTENSION_SIGNING  = "1.3.6.1.4.1.311.61.5.1"
    '  Signer of Windows Store applications
    Public Const szOID_WINDOWS_STORE_SIGNER  = "1.3.6.1.4.1.311.76.3.1"
    '  Signer of dynamic code generators
    Public Const szOID_DYNAMIC_CODE_GEN_SIGNER  = "1.3.6.1.4.1.311.76.5.1"
    '  Signer of Microsoft code
    Public Const szOID_MICROSOFT_PUBLISHER_SIGNER  = "1.3.6.1.4.1.311.76.8.1"
    ' +-------------------------------------------------------------------------
    '   Microsoft Attribute Object Identifiers
    ' +-------------------------------------------------------------------------
    Public Const szOID_YESNO_TRUST_ATTR  = "1.3.6.1.4.1.311.10.4.1"
    Public Const szOID_SITE_PIN_RULES_INDEX_ATTR  = "1.3.6.1.4.1.311.10.4.2"
    Public Const szOID_SITE_PIN_RULES_FLAGS_ATTR  = "1.3.6.1.4.1.311.10.4.3"
    Public Const SITE_PIN_RULES_ALL_SUBDOMAINS_FLAG  = &H1
    ' +-------------------------------------------------------------------------
    '   Qualifiers that may be part of the szOID_CERT_POLICIES and
    '   szOID_CERT_POLICIES95 extensions
    ' +-------------------------------------------------------------------------
    Public Const szOID_PKIX_POLICY_QUALIFIER_CPS  = "1.3.6.1.5.5.7.2.1"
    Public Const szOID_PKIX_POLICY_QUALIFIER_USERNOTICE  = "1.3.6.1.5.5.7.2.2"
    Public Const szOID_ROOT_PROGRAM_FLAGS  = "1.3.6.1.4.1.311.60.1.1"

    Public Enum CryptCertRootProgramFlags
        CERT_ROOT_PROGRAM_FLAG_ORG = &H80
    '  Validation of the Locale (L), State (S), and Country (C) fields in
    '  the subject name meets Program Requirements for display.
        CERT_ROOT_PROGRAM_FLAG_LSC = &H40
    '  Subject logotype
        CERT_ROOT_PROGRAM_FLAG_SUBJECT_LOGO = &H20
    '  Validation of the OrganizationalUnit (OU) field in the subject name
    '  meets Root Program Requirements for display.
        CERT_ROOT_PROGRAM_FLAG_OU = &H10
    '  Validation of the address field in the subject name meets Root
    '  Program Requirements for display.
        CERT_ROOT_PROGRAM_FLAG_ADDRESS = &H08
    End Enum

    Public Const szOID_CERT_POLICIES_95_QUALIFIER1  = "2.16.840.1.113733.1.7.1.1"
    ' +=========================================================================
    '   TPM Object Identifiers
    ' -=========================================================================
    '  Subject Alt Name Directory Name RDNs
    Public Const szOID_RDN_TPM_MANUFACTURER  = "2.23.133.2.1"
    Public Const szOID_RDN_TPM_MODEL  = "2.23.133.2.2"
    Public Const szOID_RDN_TPM_VERSION  = "2.23.133.2.3"
    Public Const szOID_RDN_TCG_PLATFORM_MANUFACTURER  = "2.23.133.2.4"
    Public Const szOID_RDN_TCG_PLATFORM_MODEL  = "2.23.133.2.5"
    Public Const szOID_RDN_TCG_PLATFORM_VERSION  = "2.23.133.2.6"
    '  TPM Manufacturer ASCII Hex Strings
    '   AMD                     "AMD"   0x41 0x4D 0x44 0x00
    '   Atmel                   "ATML"  0x41 0x54 0x4D 0x4C
    '   Broadcom                "BRCM"  0x42 0x52 0x43 0x4D
    '   Cisco                   "CSCO"  0x43 0x53 0x43 0x4F
    '   Flyslice Technologies   "FLYS"  0x46 0x4C 0x59 0x53
    '   HPE                     "HPE"   0x48 0x50 0x45 0x00
    '   IBM                     "IBM"   0x49 0x42 0x4d 0x00
    '   Infineon                "IFX"   0x49 0x46 0x58 0x00
    '   Intel                   "INTC"  0x49 0x4E 0x54 0x43
    '   Lenovo                  "LEN"   0x4C 0x45 0x4E 0x00
    '   Microsoft               "MSFT"  0x4D 0x53 0x46 0x54
    '   National Semiconductor  "NSM "  0x4E 0x53 0x4D 0x20
    '   Nationz                 "NTZ"   0x4E 0x54 0x5A 0x00
    '   Nuvoton Technology      "NTC"   0x4E 0x54 0x43 0x00
    '   Qualcomm                "QCOM"  0x51 0x43 0x4F 0x4D
    '   SMSC                    "SMSC"  0x53 0x4D 0x53 0x43
    '   ST Microelectronics     "STM "  0x53 0x54 0x4D 0x20
    '   Samsung                 "SMSN"  0x53 0x4D 0x53 0x4E
    '   Sinosun                 "SNS"   0x53 0x4E 0x53 0x00
    '   Texas Instruments       "TXN"   0x54 0x58 0x4E 0x00
    '   Winbond                 "WEC"   0x57 0x45 0x43 0x00
    '   Fuzhou Rockchip         "ROCC"  0x52 0x4F 0x43 0x43
    '   Google                  "GOOG"  0x47 0x4F 0x4F 0x47
    '   VMWare                  "VMW"   0x56 0x4D 0x57 0x00
    '  Obtained from: https://trustedcomputinggroup.org/wp-content/uploads/TCG-TPM-Vendor-ID-Registry-Version-1.02-Revision-1.00.pdf
    Public Const szOID_CT_CERT_SCTLIST  = "1.3.6.1.4.1.11129.2.4.2"  ' OCTET string
    '  pkcs10 attributes
    Public Const szOID_ENROLL_EK_INFO  = "1.3.6.1.4.1.311.21.23"  ' EKInfo
    Public Const szOID_ENROLL_AIK_INFO  = "1.3.6.1.4.1.311.21.39"  ' EKInfo
    Public Const szOID_ENROLL_ATTESTATION_STATEMENT  = "1.3.6.1.4.1.311.21.24"
    '  pkcs10 and CMC Full Response Tagged Attribute containing the KSP name.
    '  Encoded as a unicode string, which must be null terminated.
    '  See CERT_RDN_UNICODE_STRING in the CERT_NAME_VALUE structure.
    Public Const szOID_ENROLL_KSP_NAME  = "1.3.6.1.4.1.311.21.25"
    '  CMC Full Response Tagged Attributes
    Public Const szOID_ENROLL_EKPUB_CHALLENGE  = "1.3.6.1.4.1.311.21.26"
    Public Const szOID_ENROLL_CAXCHGCERT_HASH  = "1.3.6.1.4.1.311.21.27"
    Public Const szOID_ENROLL_ATTESTATION_CHALLENGE  = "1.3.6.1.4.1.311.21.28"
    Public Const szOID_ENROLL_ENCRYPTION_ALGORITHM  = "1.3.6.1.4.1.311.21.29"  ' algorithm oid
    '  TPM certificate EKU OIDs
    Public Const szOID_KP_TPM_EK_CERTIFICATE  = "2.23.133.8.1"
    Public Const szOID_KP_TPM_PLATFORM_CERTIFICATE  = "2.23.133.8.2"
    Public Const szOID_KP_TPM_AIK_CERTIFICATE  = "2.23.133.8.3"
    '  EK validation Issuance Policy OIDs
    Public Const szOID_ENROLL_EKVERIFYKEY  = "1.3.6.1.4.1.311.21.30"
    Public Const szOID_ENROLL_EKVERIFYCERT  = "1.3.6.1.4.1.311.21.31"
    Public Const szOID_ENROLL_EKVERIFYCREDS  = "1.3.6.1.4.1.311.21.32"
    '  Signed decimal string encoded as a Printable String
    Public Const szOID_ENROLL_SCEP_ERROR  = "1.3.6.1.4.1.311.21.33"  ' HRESULT
    '  SCEP attestation attributes
    Public Const szOID_ENROLL_SCEP_SERVER_STATE  = "1.3.6.1.4.1.311.21.34"  ' blob
    Public Const szOID_ENROLL_SCEP_CHALLENGE_ANSWER  = "1.3.6.1.4.1.311.21.35"  ' blob
    Public Const szOID_ENROLL_SCEP_CLIENT_REQUEST  = "1.3.6.1.4.1.311.21.37"  ' Pkcs10
    Public Const szOID_ENROLL_SCEP_SERVER_MESSAGE  = "1.3.6.1.4.1.311.21.38"  ' String
    Public Const szOID_ENROLL_SCEP_SERVER_SECRET  = "1.3.6.1.4.1.311.21.40"  ' blob
    '  key affinity extension: ASN NULL in requests, SEQUENCE of ANY containing
    '  two OCTET strings in issued certs: a salt blob and a hash value.
    Public Const szOID_ENROLL_KEY_AFFINITY  = "1.3.6.1.4.1.311.21.41"
    '  SCEP pkcs10 attribute: signer cert thumbprint
    Public Const szOID_ENROLL_SCEP_SIGNER_HASH  = "1.3.6.1.4.1.311.21.42"  ' blob
    '  TPM line specific EK CA KeyId
    Public Const szOID_ENROLL_EK_CA_KEYID  = "1.3.6.1.4.1.311.21.43"  ' blob
    '  Subject Directory Attributes
    Public Const szOID_ATTR_SUPPORTED_ALGORITHMS  = "2.5.4.52"
    Public Const szOID_ATTR_TPM_SPECIFICATION  = "2.23.133.2.16"
    Public Const szOID_ATTR_PLATFORM_SPECIFICATION  = "2.23.133.2.17"
    Public Const szOID_ATTR_TPM_SECURITY_ASSERTIONS  = "2.23.133.2.18"

    Public Type CERT_EXTENSIONS
        cExtension As Long
        rgExtension As LongPtr 'PCERT_EXTENSION
    End Type




    Public Const CERT_UNICODE_RDN_ERR_INDEX_MASK  = &H3FF
    Public Const CERT_UNICODE_RDN_ERR_INDEX_SHIFT  = 22
    Public Const CERT_UNICODE_ATTR_ERR_INDEX_MASK  = &H003F
    Public Const CERT_UNICODE_ATTR_ERR_INDEX_SHIFT  = 16
    Public Const CERT_UNICODE_VALUE_ERR_INDEX_MASK  = &H0000FFFF
    Public Const CERT_UNICODE_VALUE_ERR_INDEX_SHIFT  = 0

    Public Type CERT_AUTHORITY_KEY_ID_INFO
        KeyId As CRYPT_DATA_BLOB
        CertIssuer As CERT_NAME_BLOB
        CertSerialNumber As CRYPT_INTEGER_BLOB
    End Type

    Public Type CERT_PRIVATE_KEY_VALIDITY
        NotBefore As FILETIME
        NotAfter As FILETIME
    End Type

    Public Type CERT_KEY_ATTRIBUTES_INFO
        KeyId As CRYPT_DATA_BLOB
        IntendedKeyUsage As CRYPT_BIT_BLOB
        pPrivateKeyUsagePeriod As LongPtr 'PCERT_PRIVATE_KEY_VALIDITY ' OPTIONAL
    End Type

    Public Enum CertKeyTypeUsage
        CERT_DIGITAL_SIGNATURE_KEY_USAGE = &H80
        CERT_NON_REPUDIATION_KEY_USAGE = &H40
        CERT_KEY_ENCIPHERMENT_KEY_USAGE = &H20
        CERT_DATA_ENCIPHERMENT_KEY_USAGE = &H10
        CERT_KEY_AGREEMENT_KEY_USAGE = &H08
        CERT_KEY_CERT_SIGN_KEY_USAGE = &H04
        CERT_OFFLINE_CRL_SIGN_KEY_USAGE = &H02
        CERT_CRL_SIGN_KEY_USAGE = &H02
        CERT_ENCIPHER_ONLY_KEY_USAGE = &H01
    '  Byte[1]
        CERT_DECIPHER_ONLY_KEY_USAGE = &H80
    End Enum

    Public Type CERT_POLICY_ID
        cCertPolicyElementId As Long
        rgpszCertPolicyElementId As LongPtr ' pszObjId  'ANSI (LPSTR)
    End Type

    Public Type CERT_KEY_USAGE_RESTRICTION_INFO
        cCertPolicyId As Long
        rgCertPolicyId As LongPtr 'PCERT_POLICY_ID
        RestrictedKeyUsage As CRYPT_BIT_BLOB
    End Type

    Public Type CERT_OTHER_NAME
        pszObjId As String 'ANSI
        Value As CRYPT_OBJID_BLOB
    End Type

    Public Enum CertAltNameChoice
        CERT_ALT_NAME_OTHER_NAME = 1
        CERT_ALT_NAME_RFC822_NAME = 2
        CERT_ALT_NAME_DNS_NAME = 3
        CERT_ALT_NAME_X400_ADDRESS = 4
        CERT_ALT_NAME_DIRECTORY_NAME = 5
        CERT_ALT_NAME_EDI_PARTY_NAME = 6
        CERT_ALT_NAME_URL = 7
        CERT_ALT_NAME_IP_ADDRESS = 8
        CERT_ALT_NAME_REGISTERED_ID = 9
    End Enum
    Public Type CERT_ALT_NAME_ENTRY
        dwAltNameChoice As CertAltNameChoice
        ' union {                                             // certenrolls_skip
            ' PCERT_OTHER_NAME            pOtherName;         // 1
            ' LPWSTR                      pwszRfc822Name;     // 2  (encoded IA5)
            ' LPWSTR                      pwszDNSName;        // 3  (encoded IA5)
            ' // Not implemented          x400Address;        // 4
            ' CERT_NAME_BLOB              DirectoryName;      // 5
            ' // Not implemented          pEdiPartyName;      // 6
            ' LPWSTR                      pwszURL;            // 7  (encoded IA5)
            ' CRYPT_DATA_BLOB             IPAddress;          // 8  (Octet String)
            ' LPSTR                       pszRegisteredID;    // 9  (Object Identifer)
        ' } DUMMYUNIONNAME;                                   // certenrolls_skip
        #If Win64 Then
        u(15) As Byte
        #Else
        u(7) As Byte
        #End If
    End Type
    Public Type CERT_ALT_NAME_INFO
        cAltEntry As Long
        rgAltEntry As LongPtr 'PCERT_ALT_NAME_ENTRY
    End Type

    Public Enum CertSubjectFlags
        CERT_CA_SUBJECT_FLAG = &H80
        CERT_END_ENTITY_SUBJECT_FLAG = &H40
    End Enum

    Public Type CERT_BASIC_CONSTRAINTS_INFO
        SubjectType As CRYPT_BIT_BLOB
        fPathLenConstraint As BOOL
        dwPathLenConstraint As Long
        cSubtreesConstraint As Long
        rgSubtreesConstraint As LongPtr 'CERT_NAME_BLOB*
    End Type
    Public Type CERT_BASIC_CONSTRAINTS2_INFO
        fCA As BOOL
        fPathLenConstraint As BOOL
        dwPathLenConstraint As Long
    End Type

    Public Type CERT_POLICY_QUALIFIER_INFO
        pszPolicyQualifierId As String ' pszObjId  'ANSI
        Qualifier As CRYPT_OBJID_BLOB ' optional
    End Type
    Public Type CERT_POLICY_INFO
        pszPolicyIdentifier As String ' pszObjId 'ANSI
        cPolicyQualifier As Long ' optional
        rgPolicyQualifier As LongPtr 'CERT_POLICY_QUALIFIER_INFO*
    End Type
    Public Type CERT_POLICIES_INFO
        cPolicyInfo As Long
        rgPolicyInfo As LongPtr 'CERT_POLICY_INFO*
    End Type
    Public Type CERT_POLICY_QUALIFIER_NOTICE_REFERENCE
        pszOrganization As String 'ANSI
        cNoticeNumbers As Long
        rgNoticeNumbers As Long
    End Type

    Public Type CERT_POLICY_QUALIFIER_USER_NOTICE
        pNoticeReference As CERT_POLICY_QUALIFIER_NOTICE_REFERENCE ' optional
        pszDisplayText As LongPtr ' optional
    End Type

    Public Type CPS_URLS
        pszURL As LongPtr
        pAlgorithm As CRYPT_ALGORITHM_IDENTIFIER ' optional
        pDigest As CRYPT_DATA_BLOB ' optional
    End Type

    Public Type CERT_POLICY95_QUALIFIER1
        pszPracticesReference As LongPtr ' optional 
        pszNoticeIdentifier As String ' optional 'ANSI
        pszNSINoticeIdentifier As String ' optional 'ANSI
        cCPSURLs As Long
        rgCPSURLs As CPS_URLS ' optional
    End Type

    Public Type CERT_POLICY_MAPPING
        pszIssuerDomainPolicy As String ' pszObjId 'ANSI
        pszSubjectDomainPolicy As String ' pszObjId 'ANSI
    End Type

    Public Type CERT_POLICY_MAPPINGS_INFO
        cPolicyMapping As Long
        rgPolicyMapping As LongPtr 'PCERT_POLICY_MAPPING
    End Type

    Public Type CERT_POLICY_CONSTRAINTS_INFO
        fRequireExplicitPolicy As BOOL
        dwRequireExplicitPolicySkipCerts As Long
        fInhibitPolicyMapping As BOOL
        dwInhibitPolicyMappingSkipCerts As Long
    End Type

    Public Type CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY
        pszObjId As String 'ANSI
        cValue As Long
        rgValue As LongPtr 'PCRYPT_DER_BLOB
    End Type
    Public Type CRYPT_CONTENT_INFO
        pszObjId As String 'ANSI
        Content As CRYPT_DER_BLOB
    End Type

    Public Type CRYPT_SEQUENCE_OF_ANY
        cValue As Long
        rgValue As LongPtr 'PCRYPT_DER_BLOB
    End Type

    Public Type CERT_AUTHORITY_KEY_ID2_INFO
        KeyId As CRYPT_DATA_BLOB
        AuthorityCertIssuer As CERT_ALT_NAME_INFO ' Optional, set cAltEntry
        ' to 0 to omit.
        AuthorityCertSerialNumber As CRYPT_INTEGER_BLOB
    End Type

    Public Type CERT_ACCESS_DESCRIPTION
        pszAccessMethod As String ' pszObjId 'ANSI
        AccessLocation As CERT_ALT_NAME_ENTRY
    End Type

    Public Type CERT_AUTHORITY_INFO_ACCESS
        cAccDescr As Long
        rgAccDescr As LongPtr 'PCERT_ACCESS_DESCRIPTION
    End Type
    'Alias CERT_SUBJECT_INFO_ACCESS As CERT_AUTHORITY_INFO_ACCESS
    Public Type CERT_SUBJECT_INFO_ACCESS
        cAccDescr As Long
        rgAccDescr As LongPtr 'PCERT_ACCESS_DESCRIPTION
    End Type

    Public Const szOID_PKIX_ACC_DESCR  = "1.3.6.1.5.5.7.48"
    '  For szOID_AUTHORITY_INFO_ACCESS
    Public Const szOID_PKIX_OCSP  = "1.3.6.1.5.5.7.48.1"
    Public Const szOID_PKIX_CA_ISSUERS  = "1.3.6.1.5.5.7.48.2"
    '  For szOID_SUBJECT_INFO_ACCESS
    Public Const szOID_PKIX_TIME_STAMPING  = "1.3.6.1.5.5.7.48.3"
    Public Const szOID_PKIX_CA_REPOSITORY  = "1.3.6.1.5.5.7.48.5"




    Public Const szPRIV_KEY_CACHE_MAX_ITEMS  = "PrivKeyCacheMaxItems"
    Public Const cPRIV_KEY_CACHE_MAX_ITEMS_DEFAULT  = 20
    '  Registry value for controlling the interval at which the private key
    '  cache is proactively purged of outdated keys.
    Public Const szPRIV_KEY_CACHE_PURGE_INTERVAL_SECONDS  = "PrivKeyCachePurgeIntervalSeconds"
    Public Const cPRIV_KEY_CACHE_PURGE_INTERVAL_SECONDS_DEFAULT  = 86400  ' 1 day
    Public Const szKEY_CACHE_ENABLED  = "CachePrivateKeys"
    Public Const szKEY_CACHE_SECONDS  = "PrivateKeyLifetimeSeconds"
    Public Const szKEY_CRYPTOAPI_PRIVATE_KEY_OPTIONS  = "Software\Policies\Microsoft\Cryptography"
    Public Const EXPO_OFFLOAD_REG_VALUE  = "ExpoOffload"
    Public Const EXPO_OFFLOAD_FUNC_NAME  = "OffloadModExpo"
    Public Const MAXUIDLEN  = 64
    Public Const MS_DEF_PROV_A  = "Microsoft Base Cryptographic Provider v1.0"
    Public Const MS_DEF_PROV_W  = "Microsoft Base Cryptographic Provider v1.0"
    ' #ifdef UNICODE
    Public Const MS_DEF_PROV  = MS_DEF_PROV_W
    Public Const MS_ENHANCED_PROV_A  = "Microsoft Enhanced Cryptographic Provider v1.0"
    Public Const MS_ENHANCED_PROV_W  = "Microsoft Enhanced Cryptographic Provider v1.0"
    ' #ifdef UNICODE
    Public Const MS_ENHANCED_PROV  = MS_ENHANCED_PROV_W
    Public Const MS_STRONG_PROV_A  = "Microsoft Strong Cryptographic Provider"
    Public Const MS_STRONG_PROV_W  = "Microsoft Strong Cryptographic Provider"
    ' #ifdef UNICODE
    Public Const MS_STRONG_PROV  = MS_STRONG_PROV_W
    Public Const MS_DEF_RSA_SIG_PROV_A  = "Microsoft RSA Signature Cryptographic Provider"
    Public Const MS_DEF_RSA_SIG_PROV_W  = "Microsoft RSA Signature Cryptographic Provider"
    ' #ifdef UNICODE
    Public Const MS_DEF_RSA_SIG_PROV  = MS_DEF_RSA_SIG_PROV_W
    Public Const MS_DEF_RSA_SCHANNEL_PROV_A  = "Microsoft RSA SChannel Cryptographic Provider"
    Public Const MS_DEF_RSA_SCHANNEL_PROV_W  = "Microsoft RSA SChannel Cryptographic Provider"
    ' #ifdef UNICODE
    Public Const MS_DEF_RSA_SCHANNEL_PROV  = MS_DEF_RSA_SCHANNEL_PROV_W
    Public Const MS_DEF_DSS_PROV_A  = "Microsoft Base DSS Cryptographic Provider"
    Public Const MS_DEF_DSS_PROV_W  = "Microsoft Base DSS Cryptographic Provider"
    ' #ifdef UNICODE
    Public Const MS_DEF_DSS_PROV  = MS_DEF_DSS_PROV_W
    Public Const MS_DEF_DSS_DH_PROV_A  = "Microsoft Base DSS and Diffie-Hellman Cryptographic Provider"
    Public Const MS_DEF_DSS_DH_PROV_W  = "Microsoft Base DSS and Diffie-Hellman Cryptographic Provider"
    ' #ifdef UNICODE
    Public Const MS_DEF_DSS_DH_PROV  = MS_DEF_DSS_DH_PROV_W
    Public Const MS_ENH_DSS_DH_PROV_A  = "Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider"
    Public Const MS_ENH_DSS_DH_PROV_W  = "Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider"
    ' ifdef UNICODE
    Public Const MS_ENH_DSS_DH_PROV  = MS_ENH_DSS_DH_PROV_W
    Public Const MS_DEF_DH_SCHANNEL_PROV_A  = "Microsoft DH SChannel Cryptographic Provider"
    Public Const MS_DEF_DH_SCHANNEL_PROV_W  = "Microsoft DH SChannel Cryptographic Provider"
    ' #ifdef UNICODE
    Public Const MS_DEF_DH_SCHANNEL_PROV  = MS_DEF_DH_SCHANNEL_PROV_W
    Public Const MS_SCARD_PROV_A  = "Microsoft Base Smart Card Crypto Provider"
    Public Const MS_SCARD_PROV_W  = "Microsoft Base Smart Card Crypto Provider"
    Public Const MS_SCARD_PROV  = MS_SCARD_PROV_W
    Public Const MS_ENH_RSA_AES_PROV_A  = "Microsoft Enhanced RSA and AES Cryptographic Provider"
    Public Const MS_ENH_RSA_AES_PROV_W  = "Microsoft Enhanced RSA and AES Cryptographic Provider"
    Public Const MS_ENH_RSA_AES_PROV_XP_A  = "Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)"
    Public Const MS_ENH_RSA_AES_PROV_XP_W  = "Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)"
    Public Const MS_ENH_RSA_AES_PROV_XP  = MS_ENH_RSA_AES_PROV_XP_W
    Public Const MS_ENH_RSA_AES_PROV  = MS_ENH_RSA_AES_PROV_W



    Public Const CUR_BLOB_VERSION = 2

    Public Type CMS_KEY_INFO
        dwVersion As Long ' sizeof(CMS_KEY_INFO)
        Algid As ALG_ID ' algorithmm id for the key to be converted
        pbOID As LongPtr ' pointer to OID to hash in with Z
        cbOID As Long ' length of OID to hash in with Z
    End Type

    Public Type HMAC_INFO
        HashAlgid As ALG_ID
        pbInnerString As LongPtr
        cbInnerString As Long
        pbOuterString As LongPtr
        cbOuterString As Long
    End Type


    Public Enum CryptSChannelUses
        SCHANNEL_MAC_KEY = &H00000000
        SCHANNEL_ENC_KEY = &H00000001
    End Enum
    Public Enum CryptSChannelFlags
        INTERNATIONAL_USAGE = &H00000001
    End Enum
    Public Type SCHANNEL_ALG
        dwUse As CryptSChannelUses
        Algid As ALG_ID
        cBits As Long
        dwFlags As CryptSChannelFlags
        dwReserved As Long
    End Type


    Public Type PROV_ENUMALGS
        aiAlgid As ALG_ID
        dwBitLen As Long
        dwNameLen As Long
        szName(0 To 19) As Byte
    End Type

    Public Type PROV_ENUMALGS_EX
        aiAlgid As ALG_ID
        dwDefaultLen As Long
        dwMinLen As Long
        dwMaxLen As Long
        dwProtocols As Long
        dwNameLen As Long
        szName(0 To 19) As Byte
        dwLongNameLen As Long
        szLongName(0 To 39) As Byte
    End Type

    Public Type PUBLICKEYSTRUC
        bType As Byte
        bVersion As Byte
        reserved As Integer
        aiKeyAlg As ALG_ID
    End Type
    'Alias BLOBHEADER As PUBLICKEYSTRUC
    Public Type BLOBHEADER
        bType As Byte
        bVersion As Byte
        reserved As Integer
        aiKeyAlg As ALG_ID
    End Type

    Public Type RSAPUBKEY
        magic As Long ' Has to be RSA1
        bitlen As Long ' # of bits in modulus
        pubexp As Long ' public exponent
        ' Modulus data follows
    End Type

    Public Type CRYPT_KEY_PROV_PARAM
        dwParam As CryptProvParams
        pbData As LongPtr 'BYTE*
        cbData As Long
        dwFlags As Long
    End Type

    Public Enum CertKeyProvInfoFlags
        CERT_SET_KEY_PROV_HANDLE_PROP_ID = &H00000001
        CERT_SET_KEY_CONTEXT_PROP_ID = &H00000001
    End Enum
    Public Type CRYPT_KEY_PROV_INFO
        pwszContainerName As LongPtr
        pwszProvName As LongPtr
        dwProvType As CryptProviders
        /* [ TypeHint(Crypt_AC_Flags, CertKeyProvInfoFlags) ] */ dwFlags As CertKeyProvInfoFlags
        cProvParam As Long
        rgProvParam As LongPtr 'PCRYPT_KEY_PROV_PARAM
        dwKeySpec As CRYPT_AT_FLAGS
    End Type

    Public Type CERT_KEY_CONTEXT
        cbSize As Long ' sizeof(CERT_KEY_CONTEXT)
        '   union {
        '        HCRYPTPROV          hCryptProv;
        ' dwKeySpec == CERT_NCRYPT_KEY_SPEC
        '        NCRYPT_KEY_HANDLE   hNCryptKey;
        '    } DUMMYUNIONNAME;
        hKeyOrProv As LongPtr
        dwKeySpec As CRYPT_AT_FLAGS
    End Type

    Public Type ROOT_INFO_LUID
        LowPart As Long
        HighPart As Long
    End Type
    Public Type CRYPT_SMART_CARD_ROOT_INFO
        rgbCardID(0 To 15) As Byte
        luid As ROOT_INFO_LUID
    End Type

    Public Enum CertStoreProvFlags
        CERT_STORE_PROV_EXTERNAL_FLAG = &H1
    '  The open callback sets the following flag for a successful delete.
    '  When set, the close callback isn't called.
        CERT_STORE_PROV_DELETED_FLAG = &H2
    '  The open callback sets the following flag if it doesn't persist store
    '  changes.
        CERT_STORE_PROV_NO_PERSIST_FLAG = &H4
    '  The open callback sets the following flag if the contexts are persisted
    '  to a system store.
        CERT_STORE_PROV_SYSTEM_STORE_FLAG = &H8
    '  The open callback sets the following flag if the contexts are persisted
    '  to a LocalMachine system store.
        CERT_STORE_PROV_LM_SYSTEM_STORE_FLAG = &H10
    '  The open callback sets the following flag if the contexts are persisted
    '  to a GroupPolicy system store.
        CERT_STORE_PROV_GP_SYSTEM_STORE_FLAG = &H20
    '  The open callback sets the following flag if the contexts are from
    '  a Shared User physical store.
        CERT_STORE_PROV_SHARED_USER_FLAG = &H40
    End Enum
    Public Type CERT_STORE_PROV_INFO
        cbSize As Long
        cStoreProvFunc As Long
        rgpvStoreProvFunc As LongPtr 'void**
        hStoreProv As LongPtr 'HCERTSTOREPROV
        dwStoreProvFlags As CertStoreProvFlags
        hStoreProvFuncAddr2 As LongPtr 'HCRYPTOIDFUNCADDR
    End Type

    Public Enum CertStoreProvFunction
        CERT_STORE_PROV_CLOSE_FUNC = 0
        CERT_STORE_PROV_READ_CERT_FUNC = 1
        CERT_STORE_PROV_WRITE_CERT_FUNC = 2
        CERT_STORE_PROV_DELETE_CERT_FUNC = 3
        CERT_STORE_PROV_SET_CERT_PROPERTY_FUNC = 4
        CERT_STORE_PROV_READ_CRL_FUNC = 5
        CERT_STORE_PROV_WRITE_CRL_FUNC = 6
        CERT_STORE_PROV_DELETE_CRL_FUNC = 7
        CERT_STORE_PROV_SET_CRL_PROPERTY_FUNC = 8
        CERT_STORE_PROV_READ_CTL_FUNC = 9
        CERT_STORE_PROV_WRITE_CTL_FUNC = 10
        CERT_STORE_PROV_DELETE_CTL_FUNC = 11
        CERT_STORE_PROV_SET_CTL_PROPERTY_FUNC = 12
        CERT_STORE_PROV_CONTROL_FUNC = 13
        CERT_STORE_PROV_FIND_CERT_FUNC = 14
        CERT_STORE_PROV_FREE_FIND_CERT_FUNC = 15
        CERT_STORE_PROV_GET_CERT_PROPERTY_FUNC = 16
        CERT_STORE_PROV_FIND_CRL_FUNC = 17
        CERT_STORE_PROV_FREE_FIND_CRL_FUNC = 18
        CERT_STORE_PROV_GET_CRL_PROPERTY_FUNC = 19
        CERT_STORE_PROV_FIND_CTL_FUNC = 20
        CERT_STORE_PROV_FREE_FIND_CTL_FUNC = 21
        CERT_STORE_PROV_GET_CTL_PROPERTY_FUNC = 22
    End Enum

    Public Const CERT_STORE_PROV_WRITE_ADD_FLAG = &H1

    Public Type CERT_STORE_PROV_FIND_INFO
        cbSize As Long
        dwMsgAndCertEncodingType As CRYPT_CERT_ENCODING_TYPE
        dwFindFlags As CryptCertFindFlags
        dwFindType As CryptCertFindType
        pvFindPara As LongPtr 'void*
    End Type



    Public Enum CryptMsgOpenFlags
        CMSG_BARE_CONTENT_FLAG = &H00000001
        CMSG_LENGTH_ONLY_FLAG = &H00000002
        CMSG_DETACHED_FLAG = &H00000004
        CMSG_AUTHENTICATED_ATTRIBUTES_FLAG = &H00000008
        CMSG_CONTENTS_OCTETS_FLAG = &H00000010
        CMSG_MAX_LENGTH_FLAG = &H00000020
    '  When set, nonData type inner content is encapsulated within an
    '  OCTET STRING. Applicable to both Signed and Enveloped messages.
        CMSG_CMS_ENCAPSULATED_CONTENT_FLAG = &H00000040
    '  If set then the message will not have a signature in the final PKCS7
    '  of SignedData type. Instead the signature will contain plain text of
    '  the to-be-signed hash. It is used with digest signing.
        CMSG_SIGNED_DATA_NO_SIGN_FLAG = &H00000080
    '  If set, then, the hCryptProv passed to CryptMsgOpenToEncode or
    '  CryptMsgOpenToDecode is released on the final CryptMsgClose.
    '  Not released if CryptMsgOpenToEncode or CryptMsgOpenToDecode fails.
    '  Also applies to hNCryptKey where applicable.
    '  Note, the envelope recipient hCryptProv's aren't released.
        CMSG_CRYPT_RELEASE_CONTEXT_FLAG = &H00008000&
    End Enum

    Public Const CRYPT_OID_EXPORT_PRIVATE_KEY_INFO_FUNC  = "CryptDllExportPrivateKeyInfoEx"
    Public Const CRYPT_DELETE_KEYSET  = CRYPT_DELETEKEYSET
    Public Const CRYPT_OID_IMPORT_PRIVATE_KEY_INFO_FUNC  = "CryptDllImportPrivateKeyInfoEx"

    Public Enum CryptRegisterOIDIndexes
        CRYPT_REGISTER_FIRST_INDEX = 0
        CRYPT_REGISTER_LAST_INDEX = &HFFFFFFFF
    End Enum

    Public Const CRYPT_OID_ENCODE_OBJECT_FUNC  = "CryptDllEncodeObject"
    Public Const CRYPT_OID_DECODE_OBJECT_FUNC  = "CryptDllDecodeObject"
    Public Const CRYPT_OID_ENCODE_OBJECT_EX_FUNC  = "CryptDllEncodeObjectEx"
    Public Const CRYPT_OID_DECODE_OBJECT_EX_FUNC  = "CryptDllDecodeObjectEx"
    Public Const CRYPT_OID_CREATE_COM_OBJECT_FUNC  = "CryptDllCreateCOMObject"
    Public Const CRYPT_OID_VERIFY_REVOCATION_FUNC  = "CertDllVerifyRevocation"
    Public Const CRYPT_OID_VERIFY_CTL_USAGE_FUNC  = "CertDllVerifyCTLUsage"
    Public Const CRYPT_OID_FORMAT_OBJECT_FUNC  = "CryptDllFormatObject"
    Public Const CRYPT_OID_FIND_OID_INFO_FUNC  = "CryptDllFindOIDInfo"
    Public Const CRYPT_OID_FIND_LOCALIZED_NAME_FUNC  = "CryptDllFindLocalizedName"
    Public Const CRYPT_OID_REGPATH  = "Software\Microsoft\Cryptography\OID"
    Public Const CRYPT_OID_REG_ENCODING_TYPE_PREFIX  = "EncodingType "
    Public Const CRYPT_OID_REG_DLL_VALUE_NAME  = "Dll"
    Public Const CRYPT_OID_REG_FUNC_NAME_VALUE_NAME  = "FuncName"
    Public Const CRYPT_OID_REG_FUNC_NAME_VALUE_NAME_A  = "FuncName"
    '  CRYPT_INSTALL_OID_FUNC_BEFORE_FLAG can be set in the key's L"CryptFlags"
    '  value to register the functions before the installed functions.
    '  CryptSetOIDFunctionValue must be called to set this value. L"CryptFlags"
    '  must be set using a dwValueType of REG_DWORD.
    Public Const CRYPT_OID_REG_FLAGS_VALUE_NAME  = "CryptFlags"
    '  OID used for Default OID functions
    Public Const CRYPT_DEFAULT_OID  = "DEFAULT"

    Public Type CRYPT_OID_FUNC_ENTRY
        pszOID As LongPtr
        pvFuncAddr As LongPtr
    End Type

    Public Enum CryptInstallOIDFlags
        CRYPT_INSTALL_OID_FUNC_BEFORE_FLAG = 1
    End Enum
    Public Enum CryptGetOIDFuncFlags
        CRYPT_GET_INSTALLED_OID_FUNC_FLAG = &H1
    End Enum

    Public Enum CryptMsgVerifyCountersignFlags
        CMSG_VERIFY_COUNTER_SIGN_ENABLE_STRONG_FLAG = &H00000001
    End Enum

    Public Const CMSG_OID_GEN_ENCRYPT_KEY_FUNC  = "CryptMsgDllGenEncryptKey"
    Public Const CMSG_OID_EXPORT_ENCRYPT_KEY_FUNC  = "CryptMsgDllExportEncryptKey"
    Public Const CMSG_OID_IMPORT_ENCRYPT_KEY_FUNC  = "CryptMsgDllImportEncryptKey"

    Public Const CMSG_DEFAULT_INSTALLABLE_FUNC_OID As LongPtr = 1

    Public Enum CryptCMsgEncryptFlags
        CMSG_CONTENT_ENCRYPT_PAD_ENCODED_LEN_FLAG = &H00000001
    End Enum
    Public Enum CryptCMsgContentFlags
        CMSG_CONTENT_ENCRYPT_FREE_PARA_FLAG = &H00000001
        CMSG_CONTENT_ENCRYPT_FREE_OBJID_FLAG = &H00000002
        CMSG_CONTENT_ENCRYPT_RELEASE_CONTEXT_FLAG = &H00008000&
    End Enum
    Public Type CMSG_CONTENT_ENCRYPT_INFO
        cbSize As Long
        hCryptProv As LongPtr 'HCRYPTPROV_LEGACY
        ContentEncryptionAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        pvEncryptionAuxInfo As LongPtr '*void
        cRecipients As Long
        rgCmsRecipients As LongPtr 'PCMSG_RECIPIENT_ENCODE_INFO
        pfnAlloc As LongPtr 'PFN_CMSG_ALLOC
        pfnFree As LongPtr 'PFN_CMSG_FREE
        dwEncryptFlags As CryptCMsgEncryptFlags
        '    union {
        ' fCNG == FALSE
        '       HCRYPTKEY                   hContentEncryptKey;
        ' fCNG == TRUE
        '        BCRYPT_KEY_HANDLE           hCNGContentEncryptKey;
        '    } DUMMYUNIONNAME;
        hEncryptKey As LongPtr
        dwFlags As Long
        fCNG As BOOL
        ' When fCNG == TRUE, pfnAlloc'ed
        pbCNGContentEncryptKeyObject As LongPtr 'BYTE*
        pbContentEncryptKey As LongPtr 'BYTE*
        cbContentEncryptKey As Long
    End Type

    Public Const CMSG_OID_GEN_CONTENT_ENCRYPT_KEY_FUNC  = "CryptMsgDllGenContentEncryptKey"
    Public Const CMSG_OID_CAPI1_GEN_CONTENT_ENCRYPT_KEY_FUNC  = CMSG_OID_GEN_CONTENT_ENCRYPT_KEY_FUNC
    Public Const CMSG_OID_CNG_GEN_CONTENT_ENCRYPT_KEY_FUNC = "CryptMsgDllCNGGenContentEncryptKey"

    Public Enum CryptCMsgKeyTransEncryptFlags
        CMSG_KEY_TRANS_ENCRYPT_FREE_PARA_FLAG = &H00000001
        CMSG_KEY_TRANS_ENCRYPT_FREE_OBJID_FLAG = &H00000002
    End Enum
    Public Type CMSG_KEY_TRANS_ENCRYPT_INFO
        cbSize As Long
        dwRecipientIndex As Long
        KeyEncryptionAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        EncryptedKey As CRYPT_DATA_BLOB
        dwFlags As CryptCMsgKeyTransEncryptFlags
    End Type

    Public Const CMSG_OID_EXPORT_KEY_TRANS_FUNC  = "CryptMsgDllExportKeyTrans"
    Public Const CMSG_OID_CAPI1_EXPORT_KEY_TRANS_FUNC  = CMSG_OID_EXPORT_KEY_TRANS_FUNC
    Public Const CMSG_OID_CNG_EXPORT_KEY_TRANS_FUNC  = "CryptMsgDllCNGExportKeyTrans"

    Public Type CMSG_KEY_AGREE_KEY_ENCRYPT_INFO
        cbSize As Long
        EncryptedKey As CRYPT_DATA_BLOB
    End Type

    Public Enum CryptCMsgKeyAgreeEncryptFlags
        CMSG_KEY_AGREE_ENCRYPT_FREE_PARA_FLAG = &H00000001
        CMSG_KEY_AGREE_ENCRYPT_FREE_MATERIAL_FLAG = &H00000002
        CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_ALG_FLAG = &H00000004
        CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_PARA_FLAG = &H00000008
        CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_BITS_FLAG = &H00000010
        CMSG_KEY_AGREE_ENCRYPT_FREE_OBJID_FLAG = &H00000020
    End Enum
    Public Type CMSG_KEY_AGREE_ENCRYPT_INFO
        cbSize As Long
        dwRecipientIndex As Long
        KeyEncryptionAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        UserKeyingMaterial As CRYPT_DATA_BLOB
        dwOriginatorChoice As CryptCMsgKeyAgreeOriginatorChoice
        '    union {
        ' CMSG_KEY_AGREE_ORIGINATOR_CERT
        '        CERT_ID                     OriginatorCertId;
        ' CMSG_KEY_AGREE_ORIGINATOR_PUBLIC_KEY
        '        CERT_PUBLIC_KEY_INFO        OriginatorPublicKeyInfo;
        '    } DUMMYUNIONNAME;
        #If Win64 Then
        OrigCertIdOrPubKeyInfo(47) As Byte
        #Else
        OrigCertIdOrPubKeyInfo(23) As Byte
        #End If
        cKeyAgreeKeyEncryptInfo As Long
        rgpKeyAgreeKeyEncryptInfo As LongPtr 'PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO
        dwFlags As Long
    End Type

    Public Const CMSG_OID_EXPORT_KEY_AGREE_FUNC  = "CryptMsgDllExportKeyAgree"
    Public Const CMSG_OID_CAPI1_EXPORT_KEY_AGREE_FUNC  = CMSG_OID_EXPORT_KEY_AGREE_FUNC
    Public Const CMSG_OID_CNG_EXPORT_KEY_AGREE_FUNC  = "CryptMsgDllCNGExportKeyAgree"

    Public Enum CryptCMsgMailListEncryptFreeFlags
        CMSG_MAIL_LIST_ENCRYPT_FREE_PARA_FLAG = &H00000001
        CMSG_MAIL_LIST_ENCRYPT_FREE_OBJID_FLAG = &H00000002
    End Enum
    Public Type CMSG_MAIL_LIST_ENCRYPT_INFO
        cbSize As Long
        dwRecipientIndex As Long
        KeyEncryptionAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        EncryptedKey As CRYPT_DATA_BLOB
        dwFlags As CryptCMsgMailListEncryptFreeFlags
    End Type

    Public Const CMSG_OID_EXPORT_MAIL_LIST_FUNC  = "CryptMsgDllExportMailList"
    Public Const CMSG_OID_CAPI1_EXPORT_MAIL_LIST_FUNC  = CMSG_OID_EXPORT_MAIL_LIST_FUNC

    Public Const CMSG_OID_IMPORT_KEY_TRANS_FUNC  = "CryptMsgDllImportKeyTrans"
    Public Const CMSG_OID_CAPI1_IMPORT_KEY_TRANS_FUNC  = CMSG_OID_IMPORT_KEY_TRANS_FUNC
    Public Const CMSG_OID_IMPORT_KEY_AGREE_FUNC  = "CryptMsgDllImportKeyAgree"
    Public Const CMSG_OID_CAPI1_IMPORT_KEY_AGREE_FUNC  = CMSG_OID_IMPORT_KEY_AGREE_FUNC
    Public Const CMSG_OID_IMPORT_MAIL_LIST_FUNC  = "CryptMsgDllImportMailList"
    Public Const CMSG_OID_CAPI1_IMPORT_MAIL_LIST_FUNC  = CMSG_OID_IMPORT_MAIL_LIST_FUNC

    Public Type CMSG_CNG_CONTENT_DECRYPT_INFO
        cbSize As Long
        ContentEncryptionAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        pfnAlloc As LongPtr 'PFN_CMSG_ALLOC
        pfnFree As LongPtr 'PFN_CMSG_FREE
        ' This key must be used over the one in the DecryptPara. An
        ' HCRYPTPROV in the DecryptPara may have been converted to a
        ' NCRYPT_KEY_HANDLE.
        hNCryptKey As LongPtr 'NCRYPT_KEY_HANDLE
        pbContentEncryptKey As LongPtr 'BYTE*
        cbContentEncryptKey As Long
        hCNGContentEncryptKey As LongPtr 'BCRYPT_KEY_HANDLE
        pbCNGContentEncryptKeyObject As LongPtr 'NCRYPT_KEY_HANDLE
    End Type

    Public Const CMSG_OID_CNG_IMPORT_KEY_AGREE_FUNC  = "CryptMsgDllCNGImportKeyAgree"
    Public Const CMSG_OID_CNG_IMPORT_CONTENT_ENCRYPT_KEY_FUNC  = "CryptMsgDllCNGImportContentEncryptKey"

    Public Enum CertCreateCtlFromCertCtxFlags
        CTL_ENTRY_FROM_PROP_CHAIN_FLAG = &H1
    End Enum

    Public Enum CertCrlFindType
        CRL_FIND_ANY = 0
        CRL_FIND_ISSUED_BY = 1
        CRL_FIND_EXISTING = 2
        CRL_FIND_ISSUED_FOR = 3
    End Enum
    Public Enum CertCrlFindFlags
        CRL_FIND_ISSUED_BY_AKI_FLAG = &H1
        CRL_FIND_ISSUED_BY_SIGNATURE_FLAG = &H2
        CRL_FIND_ISSUED_BY_DELTA_FLAG = &H4
        CRL_FIND_ISSUED_BY_BASE_FLAG = &H8
    End Enum

    Public Type CRL_FIND_ISSUED_FOR_PARA
        pSubjectCert As LongPtr 'PCCERT_CONTEXT
        pIssuerCert As LongPtr 'PCCERT_CONTEXT
    End Type

    Public Const CRL_FIND_ISSUED_FOR_SET_STRONG_PROPERTIES_FLAG = &H10

    Public Enum CertStoreAddDisposition
        CERT_STORE_ADD_NEW = 1
        CERT_STORE_ADD_USE_EXISTING = 2
        CERT_STORE_ADD_REPLACE_EXISTING = 3
        CERT_STORE_ADD_ALWAYS = 4
        CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES = 5
        CERT_STORE_ADD_NEWER = 6
        CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES = 7
    End Enum

    Public Enum CertContextTypes
        CERT_STORE_CERTIFICATE_CONTEXT = 1
        CERT_STORE_CRL_CONTEXT = 2
        CERT_STORE_CTL_CONTEXT = 3
    End Enum

    Public Enum CertStoreContextFlags
        CERT_STORE_ALL_CONTEXT_FLAG = (-1)
        CERT_STORE_CERTIFICATE_CONTEXT_FLAG = (1 << CERT_STORE_CERTIFICATE_CONTEXT)
        CERT_STORE_CRL_CONTEXT_FLAG = (1 << CERT_STORE_CRL_CONTEXT)
        CERT_STORE_CTL_CONTEXT_FLAG = (1 << CERT_STORE_CTL_CONTEXT)
    End Enum

    Public Enum CertCtlSubjectTypes
        CTL_ANY_SUBJECT_TYPE = 1
        CTL_CERT_SUBJECT_TYPE = 2
    End Enum
    Public Type CTL_ANY_SUBJECT_INFO
        SubjectAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        SubjectIdentifier As CRYPT_DATA_BLOB
    End Type

    Public Const CTL_FIND_NO_LIST_ID_CBDATA  = &HFFFFFFFF
    Public Const CTL_FIND_NO_SIGNER_PTR  = (-1)

    Public Enum CertCtlFindInStoreFlags
        CTL_FIND_SAME_USAGE_FLAG = &H1
    End Enum

    Public Type CTL_FIND_SUBJECT_PARA
        cbSize As Long
        pUsagePara As LongPtr 'PCTL_FIND_USAGE_PARA ' optional
        dwSubjectType As CertCtlSubjectTypes
        pvSubject As LongPtr 'void*
    End Type


    Public Enum CertCtFindType
        CTL_FIND_ANY = 0
        CTL_FIND_SHA1_HASH = 1
        CTL_FIND_MD5_HASH = 2
        CTL_FIND_USAGE = 3
        CTL_FIND_SUBJECT = 4
        CTL_FIND_EXISTING = 5
    End Enum

    Public Type CTL_FIND_USAGE_PARA
        cbSize As Long
        SubjectUsage As CTL_USAGE ' optional
        ListIdentifier As CRYPT_DATA_BLOB ' optional
        pSigner As LongPtr 'PCERT_INFO ' optional
    End Type

    Public Enum CertPhysicalStoreFlags
        CERT_PHYSICAL_STORE_ADD_ENABLE_FLAG = &H1
        CERT_PHYSICAL_STORE_OPEN_DISABLE_FLAG = &H2
        CERT_PHYSICAL_STORE_REMOTE_OPEN_DISABLE_FLAG = &H4
        CERT_PHYSICAL_STORE_INSERT_COMPUTER_NAME_ENABLE_FLAG = &H8
    End Enum

    Public Enum CertStoreControlTypes
        CERT_STORE_CTRL_RESYNC = 1
        CERT_STORE_CTRL_NOTIFY_CHANGE = 2
        CERT_STORE_CTRL_COMMIT = 3
        CERT_STORE_CTRL_AUTO_RESYNC = 4
        CERT_STORE_CTRL_CANCEL_NOTIFY = 5
    End Enum
    Public Enum CertStoreControlFlags
        CERT_STORE_CTRL_INHIBIT_DUPLICATE_HANDLE_FLAG = &H1
    End Enum

    Public Enum CertPhysicalStoreControlCommitFlags
        CERT_STORE_CTRL_COMMIT_FORCE_FLAG = &H1
        CERT_STORE_CTRL_COMMIT_CLEAR_FLAG = &H2
    End Enum

    Public Enum CertCreateContexttFlags
        CERT_CREATE_CONTEXT_NOCOPY_FLAG = &H1
    '  When the following flag is set, a context with sorted entries is created.
    '  Currently only applicable to a CTL context.
    '  For CTLs: the cCTLEntry in the returned CTL_INFO is always
    '  0. CertFindSubjectInSortedCTL and CertEnumSubjectInSortedCTL must be called
    '  to find or enumerate the CTL entries.
    '  The Sorted CTL TrustedSubjects extension isn't returned in the created
    '  context's CTL_INFO.
    '  pfnSort and pvSort can be set in the pCreatePara parameter to be called for
    '  each sorted entry. pfnSort can return FALSE to stop the sorting.
        CERT_CREATE_CONTEXT_SORTED_FLAG = &H2
    '  By default when a CTL context is created, a HCRYPTMSG handle to its
    '  SignedData message is created. This flag can be set to improve performance
    '  by not creating the HCRYPTMSG handle.
    '  This flag is only applicable to a CTL context.
        CERT_CREATE_CONTEXT_NO_HCRYPTMSG_FLAG = &H4
    '  By default when a CTL context is created, its entries are decoded.
    '  This flag can be set to improve performance by not decoding the
    '  entries.
    '  This flag is only applicable to a CTL context.
        CERT_CREATE_CONTEXT_NO_ENTRY_FLAG = &H8
    End Enum

    Public Type CERT_SYSTEM_STORE_INFO
        cbSize As Long
    End Type

    Public Type CERT_PHYSICAL_STORE_INFO
        cbSize As Long
        pszOpenStoreProvider As String ' REG_SZ  'ANSI
        dwOpenEncodingType As CRYPT_CERT_ENCODING_TYPE ' REG_DWORD
        dwOpenFlags As CertStoreRegistryLocValues ' REG_DWORD
        OpenParameters As CRYPT_DATA_BLOB ' REG_BINARY
        dwFlags As CertPhysicalStoreFlags ' REG_DWORD
        dwPriority As Long ' REG_DWORD
    End Type

    Public Enum CertPhysicalStorePredefEnumFlag
        CERT_PHYSICAL_STORE_PREDEFINED_ENUM_FLAG = &H1
    End Enum
    Public Const CERT_PHYSICAL_STORE_DEFAULT_NAME  = ".Default"
    Public Const CERT_PHYSICAL_STORE_GROUP_POLICY_NAME  = ".GroupPolicy"
    Public Const CERT_PHYSICAL_STORE_LOCAL_MACHINE_NAME  = ".LocalMachine"
    Public Const CERT_PHYSICAL_STORE_DS_USER_CERTIFICATE_NAME  = ".UserCertificate"
    Public Const CERT_PHYSICAL_STORE_LOCAL_MACHINE_GROUP_POLICY_NAME  = ".LocalMachineGroupPolicy"
    Public Const CERT_PHYSICAL_STORE_ENTERPRISE_NAME  = ".Enterprise"
    Public Const CERT_PHYSICAL_STORE_AUTH_ROOT_NAME  = ".AuthRoot"
    Public Const CERT_PHYSICAL_STORE_SMART_CARD_NAME  = ".SmartCard"

    Public Const CRYPT_OID_OPEN_SYSTEM_STORE_PROV_FUNC  = "CertDllOpenSystemStoreProv"
    Public Const CRYPT_OID_REGISTER_SYSTEM_STORE_FUNC  = "CertDllRegisterSystemStore"
    Public Const CRYPT_OID_UNREGISTER_SYSTEM_STORE_FUNC  = "CertDllUnregisterSystemStore"
    Public Const CRYPT_OID_ENUM_SYSTEM_STORE_FUNC  = "CertDllEnumSystemStore"
    Public Const CRYPT_OID_REGISTER_PHYSICAL_STORE_FUNC  = "CertDllRegisterPhysicalStore"
    Public Const CRYPT_OID_UNREGISTER_PHYSICAL_STORE_FUNC  = "CertDllUnregisterPhysicalStore"
    Public Const CRYPT_OID_ENUM_PHYSICAL_STORE_FUNC  = "CertDllEnumPhysicalStore"
    '  CertDllOpenSystemStoreProv has the same function signature as the
    '  installable "CertDllOpenStoreProv" function. See CertOpenStore for
    '  more details.
    '  CertDllRegisterSystemStore has the same function signature as
    '  CertRegisterSystemStore.
    '  The "SystemStoreLocation" REG_SZ value must also be set for registered
    '  CertDllEnumSystemStore OID functions.
    Public Const CRYPT_OID_SYSTEM_STORE_LOCATION_VALUE_NAME  = "SystemStoreLocation"

    Public Enum CryptCMsgSignerFlags
        CMSG_TRUSTED_SIGNER_FLAG = &H1
        CMSG_SIGNER_ONLY_FLAG = &H2
        CMSG_USE_SIGNER_INDEX_FLAG = &H4
    End Enum

    Public Enum CryptMsgSignCtlFlags
        CMSG_CMS_ENCAPSULATED_CTL_FLAG = &H00008000&
    End Enum
    Public Enum CryptCMsgEncodeFlags
        CMSG_ENCODE_SORTED_CTL_FLAG = &H1
    '   If the above sorted flag is set, then, the following flag should also
    '   be set if the identifier for the TrustedSubjects is a hash,
    '   such as, MD5 or SHA1.
        CMSG_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG = &H2
    End Enum

    Public Type CTL_VERIFY_USAGE_PARA
        cbSize As Long
        ListIdentifier As CRYPT_DATA_BLOB ' OPTIONAL
        cCtlStore As Long
        rghCtlStore As LongPtr 'HCERTSTORE ' OPTIONAL
        cSignerStore As Long
        rghSignerStore As LongPtr 'HCERTSTORE ' OPTIONAL
    End Type

    Public Enum CertVerifyUsageStatusFlags
        CERT_VERIFY_UPDATED_CTL_FLAG = &H1
    End Enum
    Public Enum CertVerifyUsageFlags
        CERT_VERIFY_INHIBIT_CTL_UPDATE_FLAG = &H1
        CERT_VERIFY_TRUSTED_SIGNERS_FLAG = &H2
        CERT_VERIFY_NO_TIME_CHECK_FLAG = &H4
        CERT_VERIFY_ALLOW_MORE_USAGE_FLAG = &H8
    End Enum

    Public Type CTL_VERIFY_USAGE_STATUS
        cbSize As Long
        dwError As Long
        dwFlags As CertVerifyUsageStatusFlags
        ppCtl As LongPtr 'PCCTL_CONTEXT ' IN OUT OPTIONAL
        dwCtlEntryIndex As Long
        ppSigner As LongPtr 'PCCERT_CONTEXT ' IN OUT OPTIONAL
        dwSignerIndex As Long
    End Type

    Public Enum CertRDNAttrFlags
        CERT_UNICODE_IS_RDN_ATTRS_FLAG = &H1
        CERT_CASE_INSENSITIVE_IS_RDN_ATTRS_FLAG = &H2
    End Enum

    Public Const CRYPT_OID_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC  = "CryptDllExtractEncodedSignatureParameters"
    Public Const CRYPT_OID_SIGN_AND_ENCODE_HASH_FUNC  = "CryptDllSignAndEncodeHash"
    Public Const CRYPT_OID_VERIFY_ENCODED_SIGNATURE_FUNC  = "CryptDllVerifyEncodedSignature"

    Public Enum CryptDefaultContextFlags
        CRYPT_DEFAULT_CONTEXT_AUTO_RELEASE_FLAG = &H00000001
        CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG = &H00000002
    End Enum
    Public Enum CryptDefaultContextTypes
        CRYPT_DEFAULT_CONTEXT_CERT_SIGN_OID = 1
        CRYPT_DEFAULT_CONTEXT_MULTI_CERT_SIGN_OID = 2
    End Enum

    Public Type CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA
        cOID As Long
        rgpszOID As LongPtr 'LPSTR *
    End Type

    Public Const CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_FUNC  = "CryptDllExportPublicKeyInfoEx"
    Public Const CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC  = "CryptDllExportPublicKeyInfoEx2"
    Public Const CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC = "CryptDllExportPublicKeyInfoFromBCryptKeyHandle"
    Public Const CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_FUNC = "CryptDllImportPublicKeyInfoEx"
    Public Const CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC = "CryptDllImportPublicKeyInfoEx2"

    Public Enum CertNameStringTypes
        CERT_SIMPLE_NAME_STR = 1
        CERT_OID_NAME_STR = 2
        CERT_X500_NAME_STR = 3
        CERT_XML_NAME_STR = 4
    ' +-------------------------------------------------------------------------
    '   Certificate name string type flags OR'ed with the above types
    ' --------------------------------------------------------------------------
        CERT_NAME_STR_SEMICOLON_FLAG = &H40000000
        CERT_NAME_STR_NO_PLUS_FLAG = &H20000000
        CERT_NAME_STR_NO_QUOTING_FLAG = &H10000000
        CERT_NAME_STR_CRLF_FLAG = &H08000000
        CERT_NAME_STR_COMMA_FLAG = &H04000000
        CERT_NAME_STR_REVERSE_FLAG = &H02000000
        CERT_NAME_STR_FORWARD_FLAG = &H01000000
        CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG = &H00010000
        CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG = &H00020000
        CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG = &H00040000
        CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG = &H00080000
        CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG = &H00100000
        CERT_NAME_STR_ENABLE_PUNYCODE_FLAG = &H00200000
    End Enum

    Public Enum CryptSignMessageParaFlags
        CRYPT_MESSAGE_BARE_CONTENT_OUT_FLAG = &H00000001
    '  When set, nonData type inner content is encapsulated within an
    '  OCTET STRING
        CRYPT_MESSAGE_ENCAPSULATED_CONTENT_OUT_FLAG = &H00000002
    '  When set, signers are identified by their Key Identifier and not
    '  their Issuer and Serial Number.
        CRYPT_MESSAGE_KEYID_SIGNER_FLAG = &H00000004
    '  When set, suppresses any UI by the CSP.
    '  See CryptAcquireContext's CRYPT_SILENT flag for more details.
        CRYPT_MESSAGE_SILENT_KEYSET_FLAG = &H00000040
    
        CRYPT_MESSAGE_KEYID_RECIPIENT_FLAG = &H00000004
    End Enum

    [Description("Note: The last two arguments are only supposed to appear if CRYPT_SIGN_MESSAGE_PARA_HAS_CMS_FIELDS; exclude them from cbSize calculation if you wish to have it behave as if that flag was off.")]
    Public Type CRYPT_SIGN_MESSAGE_PARA
        cbSize As Long
        dwMsgEncodingType As CRYPT_CERT_ENCODING_TYPE
        pSigningCert As LongPtr 'PCCERT_CONTEXT
        HashAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        pvHashAuxInfo As LongPtr 'void*
        cMsgCert As Long
        rgpMsgCert As LongPtr 'PCCERT_CONTEXT
        cMsgCrl As Long
        rgpMsgCrl As LongPtr 'PCCRL_CONTEXT
        cAuthAttr As Long
        rgAuthAttr As LongPtr 'PCRYPT_ATTRIBUTE
        cUnauthAttr As Long
        rgUnauthAttr As LongPtr 'PCRYPT_ATTRIBUTE
        dwFlags As CryptSignMessageParaFlags
        dwInnerContentType As CRYPT_CERT_ENCODING_TYPE
        '#ifdef CRYPT_SIGN_MESSAGE_PARA_HAS_CMS_FIELDS
        ' This is also referred to as the SignatureAlgorithm
        HashEncryptionAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        pvHashEncryptionAuxInfo As LongPtr 'void*
        '#endif
    End Type

    [Description("Note: The last argument is only supposed to appear if CRYPT_VERIFY_MESSAGE_PARA_HAS_EXTRA_FIELDS; exclude it from cbSize calculation if you wish to have it behave as if that flag was off.")]
    Public Type CRYPT_VERIFY_MESSAGE_PARA
        cbSize As Long
        dwMsgAndCertEncodingType As CRYPT_CERT_ENCODING_TYPE
        hCryptProv As LongPtr 'HCRYPTPROV_LEGACY
        pfnGetSignerCertificate As LongPtr 'PFN_CRYPT_GET_SIGNER_CERTIFICATE
        pvGetArg As LongPtr 'void*
        '#ifdef CRYPT_VERIFY_MESSAGE_PARA_HAS_EXTRA_FIELDS
        ' Note, if you #define CRYPT_VERIFY_MESSAGE_PARA_HAS_EXTRA_FIELDS,
        ' then, you must zero all unused fields in this data structure.
        ' More fields could be added in a future release.
        ' The following is set to check for Strong and Restricted Signatures
        pStrongSignPara As LongPtr 'PCCERT_STRONG_SIGN_PARA
        '#endif
    End Type

    Public Type CRYPT_ENCRYPT_MESSAGE_PARA
        cbSize As Long
        dwMsgEncodingType As CRYPT_CERT_ENCODING_TYPE
        hCryptProv As LongPtr 'HCRYPTPROV_LEGACY
        ContentEncryptionAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        pvEncryptionAuxInfo As LongPtr 'void*
        dwFlags As CryptSignMessageParaFlags
        dwInnerContentType As CRYPT_CERT_ENCODING_TYPE
    End Type

    Public Type CRYPT_DECRYPT_MESSAGE_PARA
        cbSize As Long
        dwMsgAndCertEncodingType As CRYPT_CERT_ENCODING_TYPE
        cCertStore As Long
        rghCertStore As LongPtr 'HCERTSTORE
        '#ifdef CRYPT_DECRYPT_MESSAGE_PARA_HAS_EXTRA_FIELDS
        ' The above defined, CRYPT_MESSAGE_SILENT_KEYSET_FLAG, can be set to
        ' suppress UI by the CSP.  See CryptAcquireContext's CRYPT_SILENT
        ' flag for more details.
        dwFlags As CryptSignMessageParaFlags
        '#endif
    End Type

    Public Type CRYPT_KEY_SIGN_MESSAGE_PARA
        cbSize As Long
        dwMsgAndCertEncodingType As CRYPT_CERT_ENCODING_TYPE
        ' NCryptIsKeyHandle() is called to determine the union choice.
        '    union {
        '       HCRYPTPROV                  hCryptProv;
        '        NCRYPT_KEY_HANDLE           hNCryptKey;
        '    } DUMMYUNIONNAME;
        ' not applicable for hNCryptKey choice
        hCryptKeyOrProv As LongPtr
        dwKeySpec As CRYPT_AT_FLAGS
        HashAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        pvHashAuxInfo As LongPtr 'void*
        ' This is also referred to as the SignatureAlgorithm
        PubKeyAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
    End Type

    Public Type CRYPT_KEY_VERIFY_MESSAGE_PARA
        cbSize As Long
        dwMsgEncodingType As CRYPT_CERT_ENCODING_TYPE
        hCryptProv As LongPtr 'HCRYPTPROV_LEGACY
    End Type

    Public Type CERT_CHAIN
        cCerts As Long ' number of certs in chain
        certs As LongPtr 'PCERT_BLOB ' pointer to array of cert chain blobs
        ' representing the certs
        keyLocatorInfo As CRYPT_KEY_PROV_INFO ' key locator for cert
    End Type

    Public Type CRYPT_BLOB_ARRAY
        cBlob As Long
        rgBlob As LongPtr 'PCRYPT_DATA_BLOB
    End Type

    Public Type CRYPT_CREDENTIALS
        cbSize As Long
        pszCredentialsOid As LongPtr 'LPCSTR
        pvCredentials As LongPtr
    End Type

    Public Const CREDENTIAL_OID_PASSWORD_CREDENTIALS_A  As LongPtr = (1)
    Public Const CREDENTIAL_OID_PASSWORD_CREDENTIALS_W  As LongPtr = (2)
    Public Const CREDENTIAL_OID_PASSWORD_CREDENTIALS  = CREDENTIAL_OID_PASSWORD_CREDENTIALS_W

    Public Type CRYPT_PASSWORD_CREDENTIALSA
        cbSize As Long
        pszUsername As String
        pszPassword As String
    End Type
    Public Type CRYPT_PASSWORD_CREDENTIALSW
        cbSize As Long
        pszUsername As LongPtr
        pszPassword As LongPtr
    End Type
    'Alias CRYPT_PASSWORD_CREDENTIALS As CRYPT_PASSWORD_CREDENTIALSW
    Public Type CRYPT_PASSWORD_CREDENTIALS
        cbSize As Long
        pszUsername As LongPtr
        pszPassword As LongPtr
    End Type

    Public Const SCHEME_OID_RETRIEVE_ENCODED_OBJECT_FUNC  = "SchemeDllRetrieveEncodedObject"
    '  2-8-02 Server 2003 changed to use UNICODE Url strings instead of multibyte
    Public Const SCHEME_OID_RETRIEVE_ENCODED_OBJECTW_FUNC  = "SchemeDllRetrieveEncodedObjectW"
    Public Const CONTEXT_OID_CREATE_OBJECT_CONTEXT_FUNC  = "ContextDllCreateObjectContext"
    Public Const CONTEXT_OID_CERTIFICATE  As LongPtr = (1)
    Public Const CONTEXT_OID_CRL  As LongPtr = (2)
    Public Const CONTEXT_OID_CTL  As LongPtr = (3)
    Public Const CONTEXT_OID_PKCS7  As LongPtr = (4)
    Public Const CONTEXT_OID_CAPI2_ANY  As LongPtr = (5)
    Public Const CONTEXT_OID_OCSP_RESP  As LongPtr = (6)

    Public Enum CryptRemoteObjectRetrievalFlags
        CRYPT_RETRIEVE_MULTIPLE_OBJECTS = &H00000001
        CRYPT_CACHE_ONLY_RETRIEVAL = &H00000002
        CRYPT_WIRE_ONLY_RETRIEVAL = &H00000004
        CRYPT_DONT_CACHE_RESULT = &H00000008
        CRYPT_ASYNC_RETRIEVAL = &H00000010
        CRYPT_STICKY_CACHE_RETRIEVAL = &H00001000
        CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL = &H00002000
        CRYPT_OFFLINE_CHECK_RETRIEVAL = &H00004000
    '  When the following flag is set, the following 2 NULL terminated ascii
    '  strings are inserted at the beginning of each returned blob:
    '   "%d\0%s\0", dwEntryIndex, pszAttribute
    '   The first dwEntryIndex is 0, "0\0".
    '  When set, pszObjectOid must be NULL, so that a PCRYPT_BLOB_ARRAY is returned.
        CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE = &H00008000&
    '  Set this flag to digitally sign all of the ldap traffic to and from a
    '  Windows 2000 LDAP server using the Kerberos authentication protocol.
    '  This feature provides integrity required by some applications.
        CRYPT_LDAP_SIGN_RETRIEVAL = &H00010000
    '  Set this flag to inhibit automatic authentication handling. See the
    '  wininet flag, INTERNET_FLAG_NO_AUTH, for more details.
        CRYPT_NO_AUTH_RETRIEVAL = &H00020000
    '  Performs an A-Record only DNS lookup on the supplied host string.
    '  This prevents bogus DNS queries from being generated when resolving host
    '  names. Use this flag whenever passing a hostname as opposed to a
    '  domain name for the hostname parameter.
    '  See LDAP_OPT_AREC_EXCLUSIVE defined in winldap.h for more details.
        CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL = &H00040000
    '  Apply AIA URL restrictions, such as, validate retrieved content before
    '  writing to cache.
        CRYPT_AIA_RETRIEVAL = &H00080000
    '  For HTTP: use POST instead of the default GET
    '  The POST additional binary data and header strings are appended to
    '  the host name and path URL as follows:
    '   + L'/'<Optional url escaped and base64 encoded additional data>
    '   + L'?'<Optional additional headers>
    '  Here's an example of an OCSP POST URL:
    '   http://ocsp.openvalidation.org/MEIwQDA%2BMDwwOjAJBgUrDgMCGgUABBQdKNE
    '       wjytjKBQADcgM61jfflNpyQQUv1NDgnjQnsOA5RtnygUA37lIg6UCA
    '       QI%3D?Content-Type: application/ocsp-request
    '  When this flag is set, CryptRetrieveObjectByUrl, searches for the
    '  last L'/' and L'?' POST marker characters in the URL string.
    '  These are removed from the URL before it is passed to the WinHttp
    '  APIs. The L'?' string is passed as the AdditionHeaders to
    '  WinHttpSendRequest. The L'/' string is url unescaped (%xx converted
    '  to appropriate character) and base64 decoded into binary. This
    '  decoded binary is passed as the additional data to WinHttpSendRequest.
        CRYPT_HTTP_POST_RETRIEVAL = &H00100000
    '  When this flag is set we won't attempt to bypass any potential proxy caches.
    '  If a proxy cache wasn't explicitly bypassed, fProxyCacheRetrieval will be
    '  set in pAuxInfo. Only applicable to http URL retrievals.
        CRYPT_PROXY_CACHE_RETRIEVAL = &H00200000
    '  When this flag is set, for a conditional retrieval returning not modified,
    '  TRUE is returned and *ppvObject is set to NULL. For a nonNULL pAuxInfo,
    '  dwHttpStatusCode is set to winhttp.h's HTTP_STATUS_NOT_MODIFIED. Otherwise,
    '  *ppvObject is updated for a successful retrieval. Only applicable to
    '  http URL retrievals.
        CRYPT_NOT_MODIFIED_RETRIEVAL = &H00400000
    '  When this flag is set, revocation checking is enabled for https URLs.
    '  If the server's certificate is revoked, then, LastError is set to
    '  CRYPT_E_REVOKED. For no other errors, LastError is set to
    '  CRYPT_E_REVOCATION_OFFLINE for any offline revocation error.
    '  To ignore offline revocation errors, this API can be called again without
    '  setting this flag.
        CRYPT_ENABLE_SSL_REVOCATION_RETRIEVAL = &H00800000
    '  Set this flag to append a random query string to the URL passed to
    '  WinHttpOpenRequest. This should only be set on URL's accessing Windows
    '  Update content. The random query string ensures that cached proxy content
    '  isn't used and the HTTP request will always reach the Content Delivery
    '  Network (CDN) used by Windows Update which removes a query string
    '  before doing a cache lookup.
        CRYPT_RANDOM_QUERY_STRING_RETRIEVAL = &H04000000
    '  File scheme retrieval's are disabled by default. This flag can be set to
    '  allow file retrievals.
        CRYPT_ENABLE_FILE_RETRIEVAL = &H08000000
    '  Set this flag to check if a cache flush entry already exists for this URL.
    '  If it already exists, this API will fail and set LastError to
    '  ERROR_FILE_EXISTS. Otherwise, the pvVerify parameter will be used.
    '  If NULL, we only check if the cache entry exists. If nonNULL, then,
    '  pvVerify should be a PCRYPTNET_URL_CACHE_FLUSH_INFO containing the
    '  flush information to be written.
        CRYPT_CREATE_NEW_FLUSH_ENTRY = &H10000000
    '  Data verification retrieval flags
    '  CRYPT_VERIFY_CONTEXT_SIGNATURE is used to get signature verification
    '  on the context created.  In this case pszObjectOid must be non-NULL and
    '  pvVerify points to the signer certificate context
    '  CRYPT_VERIFY_DATA_HASH is used to get verification of the blob data
    '  retrieved by the protocol.  The pvVerify points to an URL_DATA_HASH
    '  structure (TBD)
        CRYPT_VERIFY_CONTEXT_SIGNATURE = &H00000020
        CRYPT_VERIFY_DATA_HASH = &H00000040
    '  Time Valid Object flags
        CRYPT_KEEP_TIME_VALID = &H00000080
        CRYPT_DONT_VERIFY_SIGNATURE = &H00000100
        CRYPT_DONT_CHECK_TIME_VALIDITY = &H00000200
    '  The default checks if ftNextUpdate >= ftValidFor. Set this flag to
    '  check if ftThisUpdate >= ftValidFor.
        CRYPT_CHECK_FRESHNESS_TIME_VALIDITY = &H00000400
        CRYPT_ACCUMULATIVE_TIMEOUT = &H00000800
    '  Set this flag to only use OCSP AIA URLs.
        CRYPT_OCSP_ONLY_RETRIEVAL = &H01000000
    '  Set this flag to only use the OCSP AIA URL if present. If the subject
    '  doesn't have an OCSP AIA URL, then, the CDP URLs are used.
        CRYPT_NO_OCSP_FAILOVER_TO_CRL_RETRIEVAL = &H02000000
    End Enum

    Public Enum CryptPrefetchObjectTypes
        CRYPTNET_URL_CACHE_PRE_FETCH_NONE = 0
        CRYPTNET_URL_CACHE_PRE_FETCH_BLOB = 1
        CRYPTNET_URL_CACHE_PRE_FETCH_CRL = 2
        CRYPTNET_URL_CACHE_PRE_FETCH_OCSP = 3
        CRYPTNET_URL_CACHE_PRE_FETCH_AUTOROOT_CAB = 5
        CRYPTNET_URL_CACHE_PRE_FETCH_DISALLOWED_CERT_CAB = 6
        CRYPTNET_URL_CACHE_PRE_FETCH_PIN_RULES_CAB = 7
    End Enum
    Public Type CRYPTNET_URL_CACHE_PRE_FETCH_INFO
        cbSize As Long
        dwObjectType As CryptPrefetchObjectTypes
        ' Possible errors:
        '  S_OK                - Pending
        '  ERROR_MEDIA_OFFLINE - CRL pre-fetch disabled due to OCSP offline.
        '  ERROR_FILE_OFFLINE  - Unchanged pre-fetch content
        '  ERROR_INVALID_DATA  - Invalid pre-fetch content
        '  Other errors        - Unable to retrieve pre-fetch content
        dwError As Long
        dwReserved As Long
        ThisUpdateTime As FILETIME
        NextUpdateTime As FILETIME
        PublishTime As FILETIME ' May be zero
    End Type

    Public Const CRYPTNET_URL_CACHE_DEFAULT_FLUSH  = 0
    Public Const CRYPTNET_URL_CACHE_DISABLE_FLUSH  = &HFFFFFFFF
    Public Type CRYPTNET_URL_CACHE_FLUSH_INFO
        cbSize As Long
        ' If pre-fetching is enabled, following is ignored
        ' 0          - use default flush exempt seconds (2 weeks)
        ' 0xFFFFFFFF - disable flushing
        dwExemptSeconds As Long
        ' Time the object expires. The above dwExemptSeconds is added to
        ' to determine the flush time. The LastSyncTime is used if
        ' after this time.
        ExpireTime As FILETIME
    End Type

    Public Enum CryptUrlCacheResponseTypes
        CRYPTNET_URL_CACHE_RESPONSE_NONE = 0
        CRYPTNET_URL_CACHE_RESPONSE_HTTP = 1
    End Enum
    Public Enum CryptUrlCacheResponseFlags
        CRYPTNET_URL_CACHE_RESPONSE_VALIDATED = &H8000&
    End Enum
    Public Type CRYPTNET_URL_CACHE_RESPONSE_INFO
        cbSize As Long
        /* [ TypeHint(CryptUrlCacheResponseTypes) ] */ wResponseType As Integer
        /* [ TypeHint(CryptUrlCacheResponseFlags) ] */ wResponseFlags As Integer
        ' The following are zero if not present
        LastModifiedTime As FILETIME
        dwMaxAge As Long
        pwszETag As LongPtr
        dwProxyId As Long
    End Type


    Public Type CRYPT_RETRIEVE_AUX_INFO
        cbSize As Long
        pLastSyncTime As FILETIME
        ' 0 => implies no limit
        dwMaxUrlRetrievalByteCount As Long
        ' To get any PreFetchInfo, set the following pointer to a
        ' CRYPTNET_URL_CACHE_PRE_FETCH_INFO structure with its cbSize set
        ' upon input. For no PreFetchInfo, except for cbSize, the data
        ' structure is zeroed upon return.
        pPreFetchInfo As LongPtr 'PCRYPTNET_URL_CACHE_PRE_FETCH_INFO
        ' To get any FlushInfo, set the following pointer to a
        ' CRYPTNET_URL_CACHE_FLUSH_INFO structure with its cbSize set
        ' upon input. For no FlushInfo, except for cbSize, the data structure
        ' is zeroed upon return.
        pFlushInfo As LongPtr 'PCRYPTNET_URL_CACHE_FLUSH_INFO
        ' To get any ResponseInfo, set the following pointer to the address
        ' of a PCRYPTNET_URL_CACHE_RESPONSE_INFO pointer updated with
        ' the allocated structure. For no ResponseInfo, *ppResponseInfo is set
        ' to NULL. Otherwise, *ppResponseInfo must be free via CryptMemFree().
        ppResponseInfo As LongPtr 'PCRYPTNET_URL_CACHE_RESPONSE_INFO
        ' If nonNULL, the specified prefix string is prepended to the
        ' cached filename.
        pwszCacheFileNamePrefix As LongPtr
        ' If nonNULL, any cached information before this time is considered
        ' time invalid. For CRYPT_CACHE_ONLY_RETRIEVAL, if there is a
        ' cached entry before this time, LastError is set to ERROR_INVALID_TIME.
        ' Also used to set max-age for http retrievals.
        pftCacheResync As LongPtr 'LPFILETIME
        ' The following flag is set upon return if CRYPT_PROXY_CACHE_RETRIEVAL
        ' was set in dwRetrievalFlags and the proxy cache wasn't explicitly
        ' bypassed for the retrieval. This flag won't be explicitly cleared.
        ' This flag will only be set for http URL retrievals.
        fProxyCacheRetrieval As BOOL
        ' This value is only updated upon return for a nonSuccessful status code
        ' returned in a HTTP response header. This value won't be explicitly
        ' cleared. This value will only be updated for http or https URL
        ' retrievals.
        ' If CRYPT_NOT_MODIFIED_RETRIEVAL was set in dwFlags, set to winhttp.h's
        ' HTTP_STATUS_NOT_MODIFIED if the retrieval returned not modified. In
        ' this case TRUE is returned with *ppvObject set to NULL.
        dwHttpStatusCode As Long
        ' To get the HTTP response headers for a retrieval error, set the following
        ' pointer to the address of a LPWSTR to receive the list of
        ' headers. L'|' is used as the separator between headers.
        ' The *ppwszErrorResponseHeaders must be freed via CryptMemFree().
        ppwszErrorResponseHeaders As LongPtr
        ' To get the content for a retrieval decode error, set the following
        ' pointer to the address of a PCRYPT_DATA_BLOB.
        ' The *ppErrorContentBlob must be freed via CryptMemFree().
        ppErrorContentBlob As LongPtr 'PCRYPT_DATA_BLOB
    End Type

    Public Const CRYPT_RETRIEVE_MAX_ERROR_CONTENT_LENGTH = &H1000

    Public Const CRYPT_PARAM_ASYNC_RETRIEVAL_COMPLETION As LongPtr = 1

    Public Enum CryptLocatorCAPIFlags
        CRYPT_GET_URL_FROM_PROPERTY = &H00000001
        CRYPT_GET_URL_FROM_EXTENSION = &H00000002
        CRYPT_GET_URL_FROM_UNAUTH_ATTRIBUTE = &H00000004
        CRYPT_GET_URL_FROM_AUTH_ATTRIBUTE = &H00000008
    End Enum

    Public Type CRYPT_URL_ARRAY
        cUrl As Long
        rgwszUrl As LongPtr
    End Type
    Public Type CRYPT_URL_INFO
        cbSize As Long
        ' Seconds between syncs
        dwSyncDeltaTime As Long
        ' Returned URLs may be grouped. For instance, groups of cross cert
        ' distribution points. Each distribution point may have multiple
        ' URLs, (LDAP and HTTP scheme).
        cGroup As Long
        rgcGroupEntry As LongPtr 'DWORD*
    End Type

    Public Const URL_OID_GET_OBJECT_URL_FUNC = "UrlDllGetObjectUrl"


    Public Enum CryptUrlOids
        URL_OID_CERTIFICATE_ISSUER = (1)
        URL_OID_CERTIFICATE_CRL_DIST_POINT = (2)
        URL_OID_CTL_ISSUER = (3)
        URL_OID_CTL_NEXT_UPDATE = (4)
        URL_OID_CRL_ISSUER = (5)
        URL_OID_CERTIFICATE_FRESHEST_CRL = (6)
        URL_OID_CRL_FRESHEST_CRL = (7)
        URL_OID_CROSS_CERT_DIST_POINT = (8)
        URL_OID_CERTIFICATE_OCSP = (9)
        URL_OID_CERTIFICATE_OCSP_AND_CRL_DIST_POINT = (10)
        URL_OID_CERTIFICATE_CRL_DIST_POINT_AND_OCSP = (11)
        URL_OID_CROSS_CERT_SUBJECT_INFO_ACCESS = (12)
        URL_OID_CERTIFICATE_ONLY_OCSP = (13)
    End Enum

    Public Type CERT_CRL_CONTEXT_PAIR
        pCertContext As LongPtr 'PCCERT_CONTEXT
        pCrlContext As LongPtr 'PCCRL_CONTEXT
    End Type

    Public Type CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO
        cbSize As Long
        ' If > 0, check that the CRL's number is >=
        ' Should be 0x7fffffff if pDeltaCrlIndicator is nonNull
        iDeltaCrlIndicator As Long
        ' If nonNULL, any cached information before this time is considered
        ' time invalid and forces a wire retrieval.
        pftCacheResync As LongPtr 'LPFILETIME
        ' If nonNull, returns the cache's LastSyncTime
        pLastSyncTime As LongPtr 'LPFILETIME
        ' If nonNull, returns the internal MaxAge expiration time
        ' for the object. If the object doesn't have a MaxAge expiration, set
        ' to zero.
        pMaxAgeTime As LongPtr 'LPFILETIME
        ' If nonNULL, CertGetCertificateChain() parameters used by the caller.
        ' Enables independent OCSP signer certificate chain verification.
        pChainPara As LongPtr 'PCERT_REVOCATION_CHAIN_PARA
        ' Should be used if the DeltaCrlIndicator value is more than 4 bytes
        ' If nonNull and iDeltaCrlIndicator == MAXLONG, check that the CRL's number is >=
        pDeltaCrlIndicator As LongPtr 'PCRYPT_INTEGER_BLOB
    End Type

    Public Const TIME_VALID_OID_GET_OBJECT_FUNC = "TimeValidDllGetObject"

    Public Enum CryptTimeValidOids
        TIME_VALID_OID_GET_CTL = (1)
        TIME_VALID_OID_GET_CRL = (2)
        TIME_VALID_OID_GET_CRL_FROM_CERT = (3)
        TIME_VALID_OID_GET_FRESHEST_CRL_FROM_CERT = (4)
        TIME_VALID_OID_GET_FRESHEST_CRL_FROM_CRL = (5)
    End Enum

    Public Const TIME_VALID_OID_FLUSH_OBJECT_FUNC = "TimeValidDllFlushObject"
    Public Enum CryptTimeValidFlushOids
        TIME_VALID_OID_FLUSH_CTL = (1)
        TIME_VALID_OID_FLUSH_CRL = (2)
        TIME_VALID_OID_FLUSH_CRL_FROM_CERT = (3)
        TIME_VALID_OID_FLUSH_FRESHEST_CRL_FROM_CERT = (4)
        TIME_VALID_OID_FLUSH_FRESHEST_CRL_FROM_CRL = (5)
    End Enum

    Public Enum CertCreateSelfSignFlags
        CERT_CREATE_SELFSIGN_NO_SIGN = 1
        CERT_CREATE_SELFSIGN_NO_KEY_INFO = 2
    End Enum

    Public Enum CryptKeyIdentifierPropFlags
        CRYPT_KEYID_DELETE_FLAG = &H00000010
    '  When the following flag is set, the set fails if the property already
    '  exists.
        CRYPT_KEYID_SET_NEW_FLAG = &H00002000
    '  When the following flag is set, searches the LocalMachine instead of the
    '  CurrentUser. This flag is applicable to all the KeyIdentifierProperty APIs.
        CRYPT_KEYID_MACHINE_FLAG = &H00000020
    '  When the following flag is set, *pvData is updated with a pointer to
    '  allocated memory. LocalFree() must be called to free the allocated memory.
        CRYPT_KEYID_ALLOC_FLAG = &H00008000&
    End Enum

    Public Const CRYPT_OID_VERIFY_CERTIFICATE_CHAIN_POLICY_FUNC = "CertDllVerifyCertificateChainPolicy"

    Public Type AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA
        cbSize As Long
        dwRegPolicySettings As WinTrustRegPolicyFlags
        pSignerInfo As LongPtr 'PCMSG_SIGNER_INFO ' optional
    End Type
    Public Type AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS
        cbSize As Long
        fCommercial As BOOL ' obtained from signer statement
    End Type
    Public Type AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA
        cbSize As Long
        dwRegPolicySettings As WinTrustRegPolicyFlags
        fCommercial As BOOL
    End Type


    Public Enum CryptHttpsCallbackAuthType
        AUTHTYPE_CLIENT = 1
        AUTHTYPE_SERVER = 2
    End Enum
    Public Type HTTPSPolicyCallbackData
        '    union {
        '        DWORD           cbStruct;       // sizeof(HTTPSPolicyCallbackData);
        cbSize As Long ' sizeof(HTTPSPolicyCallbackData);
        '    } DUMMYUNIONNAME;
        dwAuthType As CryptHttpsCallbackAuthType
        fdwChecks As INET_SECURITY_FLAGS
        pwszServerName As LongPtr ' used to check against CN=xxxx
    End Type
    'Alias SSL_EXTRA_CERT_CHAIN_POLICY_PARA As HTTPSPolicyCallbackData 
    Public Type SSL_EXTRA_CERT_CHAIN_POLICY_PARA
        '    union {
        '        DWORD           cbStruct;       // sizeof(HTTPSPolicyCallbackData);
        cbSize As Long ' sizeof(HTTPSPolicyCallbackData);
        '    } DUMMYUNIONNAME;
        dwAuthType As CryptHttpsCallbackAuthType
        fdwChecks As INET_SECURITY_FLAGS
        pwszServerName As LongPtr ' used to check against CN=xxxx
    End Type

    Public Enum CertChainPolicyFlags
        BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_CA_FLAG = &H80000000
        BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_END_ENTITY_FLAG = &H40000000
        MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG = &H00010000
        MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG = &H00020000
        MICROSOFT_ROOT_CERT_CHAIN_POLICY_DISABLE_FLIGHT_ROOT_FLAG = &H00040000
    End Enum

    Public Type EV_EXTRA_CERT_CHAIN_POLICY_PARA
        cbSize As Long
        dwRootProgramQualifierFlags As CryptCertRootProgramFlags
    End Type
    Public Type EV_EXTRA_CERT_CHAIN_POLICY_STATUS
        cbSize As Long
        dwQualifiers As Long
        dwIssuanceUsageIndex As Long
    End Type

    Public Enum CertSslF12ErrorLevel
        CERT_CHAIN_POLICY_SSL_F12_SUCCESS_LEVEL = 0
        CERT_CHAIN_POLICY_SSL_F12_WARNING_LEVEL = 1
        CERT_CHAIN_POLICY_SSL_F12_ERROR_LEVEL = 2
    End Enum
    Public Enum CertSslF12ErrorCategory
        CERT_CHAIN_POLICY_SSL_F12_NONE_CATEGORY = 0
        CERT_CHAIN_POLICY_SSL_F12_WEAK_CRYPTO_CATEGORY = 1
        CERT_CHAIN_POLICY_SSL_F12_ROOT_PROGRAM_CATEGORY = 2
    End Enum

    Public Enum CertSsHPKPIndex
        SSL_HPKP_PKP_HEADER_INDEX = 0
        SSL_HPKP_PKP_RO_HEADER_INDEX = 1
        SSL_HPKP_HEADER_COUNT = 2
    End Enum

    Public Const SSL_F12_ERROR_TEXT_LENGTH = 256
    Public Type SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS
        cbSize As Long
        dwErrorLevel As CertSslF12ErrorLevel
        dwErrorCategory As CertSslF12ErrorCategory
        dwReserved As Long
        wszErrorText(0 To (SSL_F12_ERROR_TEXT_LENGTH - 1)) As Integer ' Localized
    End Type

    Public Type SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA
        cbSize As Long
        dwReserved As Long
        pwszServerName As LongPtr
        ' One or both of the following must be nonNULL.
        rgpszHpkpValue(0 To (SSL_HPKP_HEADER_COUNT - 1)) As String
    End Type

    Public Type SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA
        cbSize As Long
        dwReserved As Long
        pwszServerName As LongPtr 'PCWSTR
    End Type

    Public Enum CertSslKeyPinErrors
        CERT_CHAIN_POLICY_SSL_KEY_PIN_MISMATCH_ERROR = -2
        CERT_CHAIN_POLICY_SSL_KEY_PIN_MITM_ERROR = -1
        CERT_CHAIN_POLICY_SSL_KEY_PIN_SUCCESS = 0
        CERT_CHAIN_POLICY_SSL_KEY_PIN_MITM_WARNING = 1
        CERT_CHAIN_POLICY_SSL_KEY_PIN_MISMATCH_WARNING = 2
    End Enum
    Public Const SSL_KEY_PIN_ERROR_TEXT_LENGTH = 512
    Public Type SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS
        cbSize As Long
        lError As CertSslKeyPinErrors
        wszErrorText(0 To (SSL_KEY_PIN_ERROR_TEXT_LENGTH - 1)) As Integer ' Localized
    End Type

    Public Const szOID_PKCS_12_PbeIds  = "1.2.840.113549.1.12.1"
    Public Const szOID_PKCS_12_pbeWithSHA1And128BitRC4  = "1.2.840.113549.1.12.1.1"
    Public Const szOID_PKCS_12_pbeWithSHA1And40BitRC4  = "1.2.840.113549.1.12.1.2"
    Public Const szOID_PKCS_12_pbeWithSHA1And3KeyTripleDES  = "1.2.840.113549.1.12.1.3"
    Public Const szOID_PKCS_12_pbeWithSHA1And2KeyTripleDES  = "1.2.840.113549.1.12.1.4"
    Public Const szOID_PKCS_12_pbeWithSHA1And128BitRC2  = "1.2.840.113549.1.12.1.5"
    Public Const szOID_PKCS_12_pbeWithSHA1And40BitRC2  = "1.2.840.113549.1.12.1.6"
    Public Const szOID_PKCS_5_PBKDF2  = "1.2.840.113549.1.5.12"
    Public Const szOID_PKCS_5_PBES2  = "1.2.840.113549.1.5.13"

    Public Type CRYPT_PKCS12_PBE_PARAMS
        iIterations As Long /* iteration count              */
        cbSalt As Long /* byte size of the salt        */
    End Type

    Public Type PKCS12_PBES2_EXPORT_PARAMS
        dwSize As Long ' structure size of _PKCS12_PBES2_EXPORT_PARAMS    
        hNcryptDescriptor As LongPtr
        pwszPbes2Alg As LongPtr
    End Type

    Public Const PKCS12_PBES2_ALG_AES256_SHA256  = "AES256-SHA256"
    '  Registry path to the PFX configuration local machine subkey
    Public Const PKCS12_CONFIG_REGPATH  = "Software\Microsoft\Windows\CurrentVersion\PFX"
    '  The default is not to encrypt the certificates included in the PFX.
    '  The following is a REG_DWORD. It should be set to a nonzero value
    '  to change the default to enable encrypting the certificates.
    Public Const PKCS12_ENCRYPT_CERTIFICATES_VALUE_NAME  = "EncryptCertificates"

    Public Type CERT_SERVER_OCSP_RESPONSE_CONTEXT
        cbSize As Long
        pbEncodedOcspResponse As LongPtr
        cbEncodedOcspResponse As Long
    End Type

    Public Enum CertServerOcspOpenFlags
        CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_READ_FLAG = &H00000001
        CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_WRITE_FLAG = &H00000002
    End Enum
    Public Type CERT_SERVER_OCSP_RESPONSE_OPEN_PARA
        cbSize As Long
        dwFlags As CertServerOcspOpenFlags
        ' If nonNULL, *pcbUsedSize is updated with subset of cbSize that was
        ' used. If OPEN_PARA isn't supported, then, *pcbUsedSize won't be
        ' updated.
        pcbUsedSize As LongPtr 'DWORD*
        ' If nonNULL, the OCSP response is either read from or written to
        ' this directory. The CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_READ_FLAG
        ' dwFlags must be set to read.
        ' The CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_WRITE_FLAG dwFlags must be
        ' set to write. Its an ERROR_INVALID_PARAMETER error to set both dwFlags.
        ' The format of the OCSP response file name:
        ' <ASCII HEX ServerCert SHA1 Thumbprint>".ocsp"
        pwszOcspDirectory As LongPtr
        ' If nonNULL, the callback is called whenever the OCSP response is
        ' updated. Note, the updated OCSP response might not be time valid.
        pfnUpdateCallback As LongPtr 'PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK
        pvUpdateCallbackArg As LongPtr
    End Type

    Public Enum CertOpenServerOcspFlags
        CERT_SERVER_OCSP_RESPONSE_ASYNC_FLAG = &H00000001
    End Enum


    Public Enum CertPredefLogoAndBiometricTypes
        CERT_RETRIEVE_ISSUER_LOGO = (1)
        CERT_RETRIEVE_SUBJECT_LOGO = (2)
        CERT_RETRIEVE_COMMUNITY_LOGO = (3)
    '  Predefined Biometric types
        CERT_RETRIEVE_BIOMETRIC_PREDEFINED_BASE_TYPE = (1000)
    
        CERT_RETRIEVE_BIOMETRIC_PICTURE_TYPE = (CERT_RETRIEVE_BIOMETRIC_PREDEFINED_BASE_TYPE + CERT_BIOMETRIC_PICTURE_TYPE)
        CERT_RETRIEVE_BIOMETRIC_SIGNATURE_TYPE = (CERT_RETRIEVE_BIOMETRIC_PREDEFINED_BASE_TYPE + CERT_BIOMETRIC_SIGNATURE_TYPE)
    End Enum

    Public Type CERT_SELECT_CHAIN_PARA
        hChainEngine As LongPtr 'HCERTCHAINENGINE
        pTime As LongPtr 'PFILETIME
        hAdditionalStore As LongPtr 'HCERTSTORE
        pChainPara As LongPtr 'PCERT_CHAIN_PARA
        dwFlags As CryptCertChainFlags
    End Type

    Public Const CERT_SELECT_MAX_PARA = 500
    Public Enum CertSelectByTypes
        CERT_SELECT_BY_ENHKEY_USAGE = 1
        CERT_SELECT_BY_KEY_USAGE = 2
        CERT_SELECT_BY_POLICY_OID = 3
        CERT_SELECT_BY_PROV_NAME = 4
        CERT_SELECT_BY_EXTENSION = 5
        CERT_SELECT_BY_SUBJECT_HOST_NAME = 6
        CERT_SELECT_BY_ISSUER_ATTR = 7
        CERT_SELECT_BY_SUBJECT_ATTR = 8
        CERT_SELECT_BY_ISSUER_NAME = 9
        CERT_SELECT_BY_PUBLIC_KEY = 10
        CERT_SELECT_BY_TLS_SIGNATURES = 11
    ' add for WinRT
        CERT_SELECT_BY_ISSUER_DISPLAYNAME = 12
        CERT_SELECT_BY_FRIENDLYNAME = 13
        CERT_SELECT_BY_THUMBPRINT = 14
        CERT_SELECT_LAST = CERT_SELECT_BY_TLS_SIGNATURES
        CERT_SELECT_MAX = (CERT_SELECT_LAST * 3)
    End Enum

    Public Enum CertSelectionFlags
        CERT_SELECT_ALLOW_EXPIRED = &H00000001
        CERT_SELECT_TRUSTED_ROOT = &H00000002
        CERT_SELECT_DISALLOW_SELFSIGNED = &H00000004
        CERT_SELECT_HAS_PRIVATE_KEY = &H00000008
        CERT_SELECT_HAS_KEY_FOR_SIGNATURE = &H00000010
        CERT_SELECT_HAS_KEY_FOR_KEY_EXCHANGE = &H00000020
        CERT_SELECT_HARDWARE_ONLY = &H00000040
        CERT_SELECT_ALLOW_DUPLICATES = &H00000080
        CERT_SELECT_IGNORE_AUTOSELECT = &H00000100
    End Enum

    Public Type CERT_SELECT_CRITERIA
        dwType As CertSelectByTypes
        cPara As Long
        ppPara As LongPtr 'void**
    End Type

    Public Enum CryptTimestampStatus
        TIMESTAMP_STATUS_GRANTED = 0
        TIMESTAMP_STATUS_GRANTED_WITH_MODS = 1
        TIMESTAMP_STATUS_REJECTED = 2
        TIMESTAMP_STATUS_WAITING = 3
        TIMESTAMP_STATUS_REVOCATION_WARNING = 4
        TIMESTAMP_STATUS_REVOKED = 5
    End Enum
    Public Enum CryptTimestampFailure
        TIMESTAMP_FAILURE_BAD_ALG = 0
        TIMESTAMP_FAILURE_BAD_REQUEST = 2
        TIMESTAMP_FAILURE_BAD_FORMAT = 5
        TIMESTAMP_FAILURE_TIME_NOT_AVAILABLE = 14
        TIMESTAMP_FAILURE_POLICY_NOT_SUPPORTED = 15
        TIMESTAMP_FAILURE_EXTENSION_NOT_SUPPORTED = 16
        TIMESTAMP_FAILURE_INFO_NOT_AVAILABLE = 17
        TIMESTAMP_FAILURE_SYSTEM_FAILURE = 25
    End Enum
    Public Const TIMESTAMP_VERSION = 1
    Public Type CRYPT_TIMESTAMP_REQUEST
        dwVersion As Long ' v1
        HashAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        HashedMessage As CRYPT_DER_BLOB
        pszTSAPolicyId As String ' OPTIONAL
        Nonce As CRYPT_INTEGER_BLOB ' OPTIONAL
        fCertReq As BOOL ' DEFAULT FALSE
        cExtension As Long
        rgExtension As LongPtr 'PCERT_EXTENSION ' OPTIONAL
    End Type
    Public Type CRYPT_TIMESTAMP_RESPONSE
        dwStatus As CryptTimestampStatus
        cFreeText As Long ' OPTIONAL
        rgFreeText As LongPtr
        FailureInfo As CRYPT_BIT_BLOB ' OPTIONAL
        ContentInfo As CRYPT_DER_BLOB ' OPTIONAL
    End Type
    Public Type CRYPT_TIMESTAMP_ACCURACY
        dwSeconds As Long ' OPTIONAL
        dwMillis As Long ' OPTIONAL
        dwMicros As Long ' OPTIONAL
    End Type
    Public Type CRYPT_TIMESTAMP_INFO
        dwVersion As Long ' v1
        pszTSAPolicyId As String
        HashAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        HashedMessage As CRYPT_DER_BLOB
        SerialNumber As CRYPT_INTEGER_BLOB
        ftTime As FILETIME
        pvAccuracy As LongPtr 'PCRYPT_TIMESTAMP_ACCURACY ' OPTIONAL
        fOrdering As BOOL ' OPTIONAL
        Nonce As CRYPT_DER_BLOB ' OPTIONAL
        Tsa As CRYPT_DER_BLOB ' OPTIONAL
        cExtension As Long
        rgExtension As LongPtr 'PCERT_EXTENSION ' OPTIONAL
    End Type
    Public Type CRYPT_TIMESTAMP_CONTEXT
        cbEncoded As Long
        pbEncoded As LongPtr
        pTimeStamp As LongPtr 'PCRYPT_TIMESTAMP_INFO
    End Type
    Public Type CRYPT_TIMESTAMP_PARA
        pszTSAPolicyId As LongPtr 'LPCSTR ' OPTIONAL
        fRequestCerts As BOOL ' Default is TRUE
        Nonce As CRYPT_INTEGER_BLOB ' OPTIONAL
        cExtension As Long
        rgExtension As LongPtr 'PCERT_EXTENSION ' OPTIONAL
    End Type

    Public Enum CryptTimestampRetrievalFlags
        TIMESTAMP_DONT_HASH_DATA = &H00000001
    '  Set this flag to enforce signature validation on retrieved time stamp.
        TIMESTAMP_VERIFY_CONTEXT_SIGNATURE = &H00000020  ' CRYPT_VERIFY_CONTEXT_SIGNATURE
    '  Set this flag to inhibit automatic authentication handling. See the
    '  wininet flag, INTERNET_FLAG_NO_AUTH, for more details.
        TIMESTAMP_NO_AUTH_RETRIEVAL = &H00020000  '  CRYPT_NO_AUTH_RETRIEVAL
    End Enum

    Public Const CRYPT_OBJECT_LOCATOR_SPN_NAME_TYPE  = 1  'ex. "HTTP/www.contoso.com"
    Public Const CRYPT_OBJECT_LOCATOR_LAST_RESERVED_NAME_TYPE  = 32
    Public Const CRYPT_OBJECT_LOCATOR_FIRST_RESERVED_USER_NAME_TYPE  = 33
    Public Const CRYPT_OBJECT_LOCATOR_LAST_RESERVED_USER_NAME_TYPE  = &H0000FFFF
    Public Const SSL_OBJECT_LOCATOR_PFX_FUNC  = "SslObjectLocatorInitializePfx"
    Public Const SSL_OBJECT_LOCATOR_ISSUER_LIST_FUNC  = "SslObjectLocatorInitializeIssuerList"
    Public Const SSL_OBJECT_LOCATOR_CERT_VALIDATION_CONFIG_FUNC  = "SslObjectLocatorInitializeCertValidationConfig"
    ' --------------------------------------------------------------------------
    '  Releasing the locator can be done with the following reasons
    '  On system shutdown and process exit, the provider is not expected to
    '  release all memory. However, on service stop and dll unload the provider
    '  should clean itself up.
    ' --------------------------------------------------------------------------
    Public Const CRYPT_OBJECT_LOCATOR_RELEASE_SYSTEM_SHUTDOWN  = 1
    Public Const CRYPT_OBJECT_LOCATOR_RELEASE_SERVICE_STOP  = 2
    Public Const CRYPT_OBJECT_LOCATOR_RELEASE_PROCESS_EXIT  = 3
    Public Const CRYPT_OBJECT_LOCATOR_RELEASE_DLL_UNLOAD  = 4

    Public Type CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE
        cbSize As Long
        pfnGet As LongPtr 'PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET
        pfnRelease As LongPtr 'PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE
        pfnFreePassword As LongPtr 'PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSInteger
        pfnFree As LongPtr 'PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE
        pfnFreeIdentifier As LongPtr 'PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER
    End Type


    Public Enum CertHashUseTypes
        CERT_FILE_HASH_USE_TYPE = 1
        CERT_TIMESTAMP_HASH_USE_TYPE = 2
    End Enum



    'dpapi.h 100% coverage
    Public Const szFORCE_KEY_PROTECTION = "ForceKeyProtection"

    Public Enum CryptDPForceKeyFlags
        dwFORCE_KEY_PROTECTION_DISABLED = &H0
        dwFORCE_KEY_PROTECTION_USER_SELECT = &H1
        dwFORCE_KEY_PROTECTION_HIGH = &H2
    End Enum

    Public Enum CryptPromptFlags
        CRYPTPROTECT_PROMPT_ON_UNPROTECT = &H1  ' 1<<0
    '  prompt on protect
        CRYPTPROTECT_PROMPT_ON_PROTECT = &H2  ' 1<<1
        CRYPTPROTECT_PROMPT_RESERVED = &H04  ' reserved, do not use.
    '  default to strong variant UI protection (user supplied password currently).
        CRYPTPROTECT_PROMPT_STRONG = &H08  ' 1<<3
    '  require strong variant UI protection (user supplied password currently).
        CRYPTPROTECT_PROMPT_REQUIRE_STRONG = &H10  ' 1<<4
    End Enum
    Public Type CRYPTPROTECT_PROMPTSTRUCT
        cbSize As Long
        dwPromptFlags As CryptPromptFlags
        hwndApp As LongPtr
        szPrompt As LongPtr
    End Type

    Public Enum CryptProtectFlags
        CRYPTPROTECT_UI_FORBIDDEN = &H1
    '  per machine protected data -- any user on machine where CryptProtectData
    '  took place may CryptUnprotectData
        CRYPTPROTECT_LOCAL_MACHINE = &H4
    '  force credential synchronize during CryptProtectData()
    '  Synchronize is only operation that occurs during this operation
        CRYPTPROTECT_CRED_SYNC = &H8
    '  Generate an Audit on protect and unprotect operations
        CRYPTPROTECT_AUDIT = &H10
    '  Protect data with a non-recoverable key
        CRYPTPROTECT_NO_RECOVERY = &H20
    '  Verify the protection of a protected blob
        CRYPTPROTECT_VERIFY_PROTECTION = &H40
    '  Regenerate the local machine protection
        CRYPTPROTECT_CRED_REGENERATE = &H80
        CRYPTPROTECT_FIRST_RESERVED_FLAGVAL = &H0FFFFFFF
        CRYPTPROTECT_LAST_RESERVED_FLAGVAL = &HFFFFFFFF
    End Enum

    Public Enum CryptMemProtectFlags
        CRYPTPROTECTMEMORY_SAME_PROCESS = &H00
    '  Encrypt/Decrypt across process boundaries.
    '  eg: encrypted buffer passed across LPC to another process which calls CryptUnprotectMemory.
        CRYPTPROTECTMEMORY_CROSS_PROCESS = &H01
    '  Encrypt/Decrypt across callers with same LogonId.
    '  eg: encrypted buffer passed across LPC to another process which calls CryptUnprotectMemory whilst impersonating.
        CRYPTPROTECTMEMORY_SAME_LOGON = &H02
    End Enum

    Public Const CRYPTPROTECTMEMORY_BLOCK_SIZE  = 16

    Public DeclareWide PtrSafe Function CryptProtectData Lib "crypt32" (pDataIn As DATA_BLOB, ByVal szDataDescr As String, pOptionalEntropy As DATA_BLOB, ByVal pvReserved As LongPtr, pPromptStruct As CRYPTPROTECT_PROMPTSTRUCT, ByVal dwFlags As CryptProtectFlags, pDataOut As DATA_BLOB) As BOOL
    Public Declare PtrSafe Function CryptUnprotectData Lib "crypt32" (pDataIn As DATA_BLOB, ppszDataDescr As LongPtr, pOptionalEntropy As DATA_BLOB, ByVal pvReserved As LongPtr, pPromptStruct As CRYPTPROTECT_PROMPTSTRUCT, ByVal dwFlags As CryptProtectFlags, pDataOut As DATA_BLOB) As BOOL
    Public DeclareWide PtrSafe Function CryptProtectMemory Lib "crypt32" (pDataIn As Any, ByVal cbDataIn As Long, ByVal dwFlags As CryptMemProtectFlags) As BOOL
    Public DeclareWide PtrSafe Function CryptUnprotectMemory Lib "crypt32" (pDataIn As Any, ByVal cbDataIn As Long, ByVal dwFlags As CryptMemProtectFlags) As BOOL
    Public DeclareWide PtrSafe Function CryptProtectDataNoUI Lib "dpapi" (pDataIn As DATA_BLOB, ByVal szDataDescr As String, pOptionalEntropy As DATA_BLOB, ByVal pvReserved As LongPtr, pPromptStruct As CRYPTPROTECT_PROMPTSTRUCT, ByVal dwFlags As CryptProtectFlags, pbOptionalPassword As Any, ByVal cbOptionalPassword As Long, pDataOut As DATA_BLOB) As BOOL
    Public DeclareWide PtrSafe Function CryptUnprotectDataNoUI Lib "dpapi" (pDataIn As DATA_BLOB, ppszDataDescr As LongPtr, pOptionalEntropy As DATA_BLOB, ByVal pvReserved As LongPtr, pPromptStruct As CRYPTPROTECT_PROMPTSTRUCT, ByVal dwFlags As CryptProtectFlags, pbOptionalPassword As Any, ByVal cbOptionalPassword As Long, pDataOut As DATA_BLOB) As BOOL
    Public DeclareWide PtrSafe Function CryptUpdateProtectedState Lib "crypt32" (ByVal pOldSid As LongPtr, ByVal pwszOldPassword As String, ByVal dwFlags As Long, Optional pdwSuccessCount As Long, Optional pdwFailureCount As Long) As BOOL


    Public Declare PtrSafe Sub CryptMemFree Lib "crypt32" (ByVal pv As LongPtr)
    Public Declare PtrSafe Function CryptMemAlloc Lib "crypt32" (ByVal cbSize As Long) As LongPtr
    Public Declare PtrSafe Function CryptMemRealloc Lib "crypt32" (ByVal pv As LongPtr, ByVal cbSize As Long) As LongPtr
    Public Declare PtrSafe Function CryptStringToBinaryA Lib "crypt32" (ByVal pszString As String, ByVal cchString As Long, ByVal dwFlags As CRYPT_STRING_OPTIONS, pbBinary As Any, pcbBinary As Long, Optional pdwSkip As Long, Optional pdwFlags As CRYPT_STRING_OPTIONS) As BOOL
    Public DeclareWide PtrSafe Function CryptStringToBinaryW Lib "crypt32" (ByVal pszString As LongPtr, ByVal cchString As Long, ByVal dwFlags As CRYPT_STRING_OPTIONS, pbBinary As Any, pcbBinary As Long, Optional pdwSkip As Long, Optional pdwFlags As CRYPT_STRING_OPTIONS) As BOOL
    Public DeclareWide PtrSafe Function CryptStringToBinary Lib "crypt32" Alias "CryptStringToBinaryW" (ByVal pszString As String, ByVal cchString As Long, ByVal dwFlags As CRYPT_STRING_OPTIONS, pbBinary As Any, pcbBinary As Long, Optional pdwSkip As Long, Optional pdwFlags As CRYPT_STRING_OPTIONS) As BOOL
    Public Declare PtrSafe Function CryptBinaryToStringA Lib "crypt32" (pbBinary As Any, ByVal cbBinary As Long, ByVal dwFlags As CRYPT_STRING_OPTIONS, ByVal pszString As String, pcchString As Long) As BOOL
    Public DeclareWide PtrSafe Function CryptBinaryToStringW Lib "crypt32" (pbBinary As Any, ByVal cbBinary As Long, ByVal dwFlags As CRYPT_STRING_OPTIONS, ByVal pszString As LongPtr, pcchString As Long) As BOOL
    Public DeclareWide PtrSafe Function CryptBinaryToString Lib "crypt32" Alias "CryptBinaryToStringW" (pbBinary As Any, ByVal cbBinary As Long, ByVal dwFlags As CRYPT_STRING_OPTIONS, ByVal pszString As String, pcchString As Long) As BOOL
    Public Declare PtrSafe Function CryptQueryObject Lib "crypt32" (ByVal dwObjectType As CRYPT_QUERY_OBJ_TYPE, pvObject As Any, ByVal dwExpectedContentTypeFlags As CRYPT_QUERY_CONTENT_FLAGS, ByVal dwExpectedFormatTypeFlags As CRYPT_QUERY_FORMAT_TYPE_FLAGS, ByVal dwFlags As Long, pdwMsgAndCertEncodingType As CRYPT_CERT_ENCODING_TYPE, pdwContentType As CRYPT_QUERY_CONTENT_TYPE, pdwFormatType As CRYPT_QUERY_FORMAT, phCertStore As LongPtr, phMsg As LongPtr, ppvContext As Any) As BOOL
    Public Declare PtrSafe Function CryptAcquireCertificatePrivateKey Lib "crypt32" (ByVal pCert As LongPtr, ByVal dwFlags As CryptAcquireFlags, pvParameters As Any, phCryptProvOrNCryptKey As LongPtr, pdwKeySpec As CRYPT_AT_FLAGS, pfCallerFreeProvOrNCryptKey As BOOL) As BOOL
    Public Declare PtrSafe Function CryptExportPublicKeyInfo Lib "crypt32" (ByVal hCryptProvOrNCryptKey As LongPtr, ByVal dwKeySpec As CRYPT_AT_FLAGS, ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, pInfo As CERT_PUBLIC_KEY_INFO, pcbInfo As Long) As BOOL
    Public Declare PtrSafe Function CryptExportPublicKeyInfoEx Lib "crypt32" (ByVal hCryptProvOrNCryptKey As LongPtr, ByVal dwKeySpec As CRYPT_AT_FLAGS, ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal pszPublicKeyObjId As LongPtr, ByVal dwFlags As CryptOidFlags, ByVal pvAuxInfo As LongPtr, pInfo As CERT_PUBLIC_KEY_INFO, pcbInfo As Long) As BOOL
    Public Declare PtrSafe Function CryptExportPublicKeyInfoFromBCryptKeyHandle Lib "crypt32" (ByVal hBCryptKey As LongPtr, ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal pszPublicKeyObjId As LongPtr, ByVal dwFlags As CryptOidFlags, pvAuxInfo As Any, pInfo As CERT_PUBLIC_KEY_INFO, pcbInfo As Long) As BOOL
    Public Declare PtrSafe Function CryptImportPublicKeyInfo Lib "crypt32" (ByVal hCryptProv As LongPtr, ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, pInfo As CERT_PUBLIC_KEY_INFO, phkey As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptImportPublicKeyInfoEx Lib "crypt32" (ByVal hCryptProv As LongPtr, ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, pInfo As CERT_PUBLIC_KEY_INFO, ByVal aiKeyAlg As ALG_ID, ByVal dwFlags As Long, ByVal pvAuxInfo As LongPtr, phkey As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptImportPublicKeyInfoEx2 Lib "crypt32" (ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, pInfo As CERT_PUBLIC_KEY_INFO, ByVal dwFlags As CryptOidFlags, ByVal pvAuxInfo As LongPtr, phkey As LongPtr) As BOOL
    #If Win64 Then
    Public DeclareWide PtrSafe Function CryptImportPKCS8 Lib "crypt32" (sPrivateKeyAndParams As CRYPT_PKCS8_IMPORT_PARAMS, ByVal dwFlags As CryptKeyFlags, phCryptProv As LongPtr, pvAuxInfo As Any) As BOOL
    #Else
    [Description("Yes, this really expects it ByVal. CryptImportPKCS8@36== 36 bytes on the stack.")]
    Public DeclareWide PtrSafe Function CryptImportPKCS8 Lib "crypt32" (ByVal sPrivateKeyAndParams_PrivateKey_cbData As Long, ByVal sPrivateKeyAndParams_PrivateKey_pbData As LongPtr, ByVal sPrivateKeyAndParams_pResolvehCryptProvFunc As LongPtr, ByVal sPrivateKeyAndParams_pVoidResolveFunc As LongPtr, ByVal sPrivateKeyAndParams_pDecryptPrivateKeyFunc As LongPtr, ByVal sPrivateKeyAndParams_pVoidDecryptFunc As LongPtr, ByVal dwFlags As CryptKeyFlags, phCryptProv As LongPtr, pvAuxInfo As Any) As BOOL
    #End If
    [Description("⛔ The CryptExportPKCS8 function is no longer available for use as of Windows Server 2008 and Windows Vista. Instead, use the PFXExportCertStoreEx function.")]
    Public Declare PtrSafe Function CryptExportPKCS8 Lib "crypt32" (ByVal hCryptProv As LongPtr, ByVal dwKeySpec As CRYPT_AT_FLAGS, ByVal pszPrivateKeyObjId As String, ByVal dwFlags As Long, pvAuxInfo As Any, pbPrivateKeyBlob As Any, pcbPrivateKeyBlob As Long) As BOOL
    [Description("⛔ The CryptExportPKCS8Ex function is no longer available for use as of Windows Server 2008 and Windows Vista. Instead, use the PFXExportCertStoreEx function.")]
    Public Declare PtrSafe Function CryptExportPKCS8Ex Lib "crypt32" (psExportParams As CRYPT_PKCS8_EXPORT_PARAMS, ByVal dwFlags As Long, pvAuxInfo As Any, pbPrivateKeyBlob As Any, pcbPrivateKeyBlob As Long) As BOOL
    Public Declare PtrSafe Function CryptSignAndEncodeCertificate Lib "crypt32" (ByVal hBCryptKey As LongPtr, ByVal dwKeySpec As CRYPT_AT_FLAGS, ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal lpszStructType As LongPtr, pvStructInfo As Any, pSignatureAlgorithm As CRYPT_ALGORITHM_IDENTIFIER, pvHashAuxInfo As Any, pbEncoded As Any, pcbEncoded As Long) As BOOL
    Public Declare PtrSafe Function CryptSignCertificate Lib "crypt32" (ByVal hBCryptKey As LongPtr, ByVal dwKeySpec As CRYPT_AT_FLAGS, ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, pbEncodedToBeSigned As Any, ByVal cbEncodedToBeSigned As Long, pSignatureAlgorithm As CRYPT_ALGORITHM_IDENTIFIER, pvHashAuxInfo As Any, pbSignature As Any, pcbSignature As Long) As BOOL
    Public Declare PtrSafe Function CryptHashCertificate Lib "crypt32" (ByVal hCryptProv As LongPtr, ByVal Algid As ALG_ID, ByVal dwFlags As CryptCreateHashFlags, pbEncoded As Any, ByVal cbEncoded As Long, pbComputedHash As Any, pcbComputedHash As Long) As BOOL
    Public Declare PtrSafe Function CryptHashCertificate2 Lib "crypt32" (ByVal pwszCNGHashAlgid As String, ByVal dwFlags As CryptCreateHashFlags, ByVal pvReserved As LongPtr, pbEncoded As Any, ByVal cbEncoded As Long, pbComputedHash As Any, pcbComputedHash As Long) As BOOL
    Public Declare PtrSafe Function CryptEncodeObject Lib "crypt32" (ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal lpszStructType As LongPtr, pvStructInfo As Any, pbEncoded As Any, pcbEncoded As Long) As BOOL
    Public Declare PtrSafe Function CryptEncodeObjectEx Lib "crypt32" (ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal lpszStructType As LongPtr, pvStructInfo As Any, ByVal dwFlags As CryptEncodeObjFlags, pEncodePara As CRYPT_ENCODE_PARA, pvEncoded As Any, pcbEncoded As Long) As BOOL
    Public Declare PtrSafe Function CryptDecodeObject Lib "crypt32" (ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal lpszStructType As LongPtr, pbEncoded As Any, ByVal cbEncoded As Long, ByVal dwFlags As CryptDecodeFlags, pvStructInfo As Any, pcbStructInfo As Long) As BOOL
    Public Declare PtrSafe Function CryptDecodeObjectEx Lib "crypt32" (ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal lpszStructType As LongPtr, pbEncoded As Any, ByVal cbEncoded As Long, ByVal dwFlags As CryptDecodeFlags, pDecodePara As CRYPT_DECODE_PARA, pvStructInfo As Any, pcbStructInfo As Long) As BOOL
    Public Declare PtrSafe Function CryptFormatObject Lib "crypt32" (ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal dwFormatType As CryptFormatObjFlags, ByVal dwFormatStrType As CryptFormatObjStrFlags, pFormatStruct As Any, ByVal lpszStructType As LongPtr, pbEncoded As Any, ByVal cbEncoded As Long, pbFormat As Any, pcbFormat As Long) As BOOL
    Public Declare PtrSafe Function CryptFindCertificateKeyProvInfo Lib "crypt32" (pCertContext As CERT_CONTEXT, [TypeHint(CrypFindCertFlags)] ByVal dwFlags As Long, pvReserved As Any) As BOOL
    Public Declare PtrSafe Function CryptRegisterOIDInfo Lib "crypt32" (pInfo As CRYPT_OID_INFO, ByVal dwFlags As CryptRegOidFlags) As BOOL
    Public Declare PtrSafe Function CryptUnregisterOIDInfo Lib "crypt32" (pInfo As CRYPT_OID_INFO) As BOOL
    Public Declare PtrSafe Function CryptEnumOIDInfo Lib "crypt32" (ByVal dwGroupId As CryptOidGroupIds, ByVal dwFlags As Long, pvArg As Any, ByVal pfnEnumOIDInfo As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptFindOIDInfo Lib "crypt32" (ByVal dwKeyType As CryptOidFlags, pvKey As Any, ByVal dwGroupId As CryptOidGroupIds) As BOOL
    Public Declare PtrSafe Function CryptFindLocalizedName Lib "crypt32" (ByVal pwszCryptName As LongPtr) As LongPtr
    Public Declare PtrSafe Function CryptVerifyCertificateSignature Lib "crypt32" (ByVal hCryptProv As LongPtr, ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, pbEncoded As Any, ByVal cbEncoded As Long, pPublicKey As CERT_PUBLIC_KEY_INFO) As BOOL
    Public Declare PtrSafe Function CryptVerifyCertificateSignatureEx Lib "crypt32" (ByVal hCryptProv As LongPtr, ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal dwSubjectType As CryptVerifyCertSubjects, pvSubject As Any, ByVal dwIssuerType As CryptVerifyCertIssuer, pvIssuer As Any, ByVal dwFlags As CryptVerifyCertFlags, pvExtra As Any) As BOOL
    Public Declare PtrSafe Function CryptInstallOIDFunctionAddress Lib "crypt32" (ByVal hModule As LongPtr, ByVal dwEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal pszFuncName As LongPtr, ByVal cFuncEntry As Long, rgFuncEntry As CRYPT_OID_FUNC_ENTRY, ByVal dwFlags As CryptInstallOIDFlags) As BOOL
    Public Declare PtrSafe Function CryptInitOIDFunctionSet Lib "crypt32" (ByVal pszFuncName As LongPtr, ByVal dwFlags As Long) As LongPtr
    Public Declare PtrSafe Function CryptGetOIDFunctionAddress Lib "crypt32" (ByVal hFuncSet As LongPtr, ByVal dwEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal pszOID As LongPtr, ByVal dwFlags As CryptGetOIDFuncFlags, ppvFuncAddr As LongPtr, phFuncAddr As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptGetDefaultOIDDllList Lib "crypt32" (ByVal hFuncSet As LongPtr, ByVal dwEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal pwszDllList As LongPtr, pcchDllList As Long) As BOOL
    Public Declare PtrSafe Function CryptGetDefaultOIDFunctionAddress Lib "crypt32" (ByVal hFuncSet As LongPtr, ByVal dwEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal pwszDll As LongPtr, ByVal dwFlags As Long, ppvFuncAddr As LongPtr, phFuncAddr As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptFreeOIDFunctionAddress Lib "crypt32" (ByVal hFuncAddr As LongPtr, ByVal dwFlags As Long) As BOOL
    Public Declare PtrSafe Function CryptRegisterOIDFunction Lib "crypt32" (ByVal dwEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal pszFuncName As LongPtr, ByVal pszOID As LongPtr, Optional ByVal pwszDll As LongPtr, Optional ByVal pszOverrideFuncName As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptUnregisterOIDFunction Lib "crypt32" (ByVal dwEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal pszFuncName As LongPtr, ByVal pszOID As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptRegisterDefaultOIDFunction Lib "crypt32" (ByVal dwEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal pszFuncName As LongPtr, ByVal dwIndex As CryptRegisterOIDIndexes, ByVal pwszDll As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptUnregisterDefaultOIDFunction Lib "crypt32" (ByVal dwEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal pszFuncName As LongPtr, ByVal pwszDll As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptSetOIDFunctionValue Lib "crypt32" (ByVal dwEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal pszFuncName As LongPtr, ByVal pszOID As LongPtr, ByVal pwszValueName As LongPtr, ByVal dwValueType As REGTYPES, pbValueData As Any, ByVal cbValueData As Long) As BOOL
    Public Declare PtrSafe Function CryptGetOIDFunctionValue Lib "crypt32" (ByVal dwEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal pszFuncName As LongPtr, ByVal pszOID As LongPtr, ByVal pwszValueName As LongPtr, pdwValueType As REGTYPES, pbValueData As Any, pcbValueData As Long) As BOOL
    Public Declare PtrSafe Function CryptEnumOIDFunction Lib "crypt32" (ByVal dwEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal pszFuncName As LongPtr, ByVal pszOID As LongPtr, ByVal dwFlags As Long, pvArg As Any, ByVal pfnEnumOIDFunc As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptHashToBeSigned Lib "crypt32" (ByVal hCryptProv As LongPtr, ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, pbEncoded As Any, ByVal cbEncoded As Long, pbComputedHash As Any, pcbComputedHash As Long) As BOOL
    Public Declare PtrSafe Function CryptInstallDefaultContext Lib "crypt32" (ByVal hCryptProv As LongPtr, ByVal dwDefaultType As CryptDefaultContextTypes, pvDefaultPara As Any, ByVal dwFlags As CryptDefaultContextFlags, ByVal pvReserved As LongPtr, phDefaultContext As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptUninstallDefaultContext Lib "crypt32" (ByVal hDefaultContext As LongPtr, ByVal dwFlags As Long, ByVal pvReserved As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptHashPublicKeyInfo Lib "crypt32" (ByVal hCryptProv As LongPtr, ByVal Algid As ALG_ID, ByVal dwFlags As CryptCreateHashFlags, ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, pInfo As CERT_PUBLIC_KEY_INFO, pbComputedHash As Any, pcbComputedHash As Long) As BOOL
    Public Declare PtrSafe Function CryptRetrieveObjectByUrlA Lib "cryptnet" (ByVal pszUrl As String, ByVal pszObjectOid As String, ByVal dwRetrievalFlags As CryptRemoteObjectRetrievalFlags, ByVal dwTimeout As Long, ppvObject As Any, ByVal hAsyncRetrieve As LongPtr, pCredentials As CRYPT_CREDENTIALS, pvVerify As Any, pAuxInfo As CRYPT_RETRIEVE_AUX_INFO) As BOOL
    Public Declare PtrSafe Function CryptRetrieveObjectByUrlW Lib "cryptnet" (ByVal pszUrl As LongPtr, ByVal pszObjectOid As LongPtr, ByVal dwRetrievalFlags As CryptRemoteObjectRetrievalFlags, ByVal dwTimeout As Long, ppvObject As Any, ByVal hAsyncRetrieve As LongPtr, pCredentials As CRYPT_CREDENTIALS, pvVerify As Any, pAuxInfo As CRYPT_RETRIEVE_AUX_INFO) As BOOL
    Public DeclareWide PtrSafe Function CryptRetrieveObjectByUrl Lib "cryptnet" Alias "CryptRetrieveObjectByUrlW" (ByVal pszUrl As String, ByVal pszObjectOid As String, ByVal dwRetrievalFlags As CryptRemoteObjectRetrievalFlags, ByVal dwTimeout As Long, ppvObject As Any, ByVal hAsyncRetrieve As LongPtr, pCredentials As CRYPT_CREDENTIALS, pvVerify As Any, pAuxInfo As CRYPT_RETRIEVE_AUX_INFO) As BOOL
    Public Declare PtrSafe Function CryptInstallCancelRetrieval Lib "cryptnet" (ByVal pfnCancel As LongPtr, ByVal pvArg As LongPtr, ByVal dwFlags As Long, ByVal pvReserved As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptUninstallCancelRetrieval Lib "cryptnet" (ByVal dwFlags As Long, ByVal pvReserved As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptCancelAsyncRetrieval Lib "cryptnet" (ByVal hAsyncRetrieval As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptGetObjectUrl Lib "cryptnet" ([TypeHint(CryptUrlOids)] ByVal pszUrlOid As LongPtr, pvPara As Any, ByVal dwFlags As CryptLocatorCAPIFlags, pUrlArray As CRYPT_URL_ARRAY, pcbUrlArray As Long, pUrlInfo As CRYPT_URL_INFO, pcbUrlInfo As Long, ByVal pvReserved As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptGetTimeValidObject Lib "cryptnet" ([TypeHint(CryptTimeValidOids)] ByVal pszTimeValidOid As LongPtr, pvPara As Any, pIssuer As CERT_CONTEXT, pftValidFor As FILETIME, ByVal dwFlags As CryptRemoteObjectRetrievalFlags, ByVal dwTimeout As Long, ppvObject As Any, pCredentials As CRYPT_CREDENTIALS, pExtraInfo As CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO) As BOOL
    Public Declare PtrSafe Function CryptFlushTimeValidObject Lib "cryptnet" ([TypeHint(CryptTimeValidFlushOids)] ByVal pszFlushTimeValidOid As LongPtr, pvPara As Any, pIssuer As CERT_CONTEXT, ByVal dwFlags As Long, ByVal pvReserved As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptGetKeyIdentifierProperty Lib "crypt32" (pKeyIdentifier As CRYPT_HASH_BLOB, ByVal dwPropId As CertPropertyIDs, ByVal dwFlags As CryptKeyIdentifierPropFlags, ByVal pwszComputerName As LongPtr, ByVal pvReserved As LongPtr, pvData As Any, pcbData As Long) As BOOL
    Public Declare PtrSafe Function CryptSetKeyIdentifierProperty Lib "crypt32" (pKeyIdentifier As CRYPT_HASH_BLOB, ByVal dwPropId As CertPropertyIDs, ByVal dwFlags As CryptKeyIdentifierPropFlags, ByVal pwszComputerName As LongPtr, ByVal pvReserved As LongPtr, pvData As Any) As BOOL
    Public Declare PtrSafe Function CryptEnumKeyIdentifierProperties Lib "crypt32" (pKeyIdentifier As CRYPT_HASH_BLOB, ByVal dwPropId As CertPropertyIDs, ByVal dwFlags As CryptKeyIdentifierPropFlags, ByVal pwszComputerName As LongPtr, ByVal pvReserved As LongPtr, pvArg As Any, ByVal pfnEnum As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptCreateKeyIdentifierFromCSP Lib "crypt32" (ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal pszPubKeyOID As LongPtr, pPubKeyStruc As PUBLICKEYSTRUC, ByVal cbPubKeyStruc As Long, ByVal dwFlags As Long, ByVal pvReserved As LongPtr, pbHash As Any, pcbHash As Long) As BOOL
    Public Declare PtrSafe Function CryptRetrieveTimeStamp Lib "crypt32" (ByVal wszUrl As LongPtr, ByVal dwRetrievalFlags As CryptTimestampRetrievalFlags, ByVal dwTimeout As Long, ByVal pszHashId As LongPtr, pPara As CRYPT_TIMESTAMP_PARA, pbData As Any, ByVal cbData As Long, ppTsContext As LongPtr, ppTsSigner As LongPtr, Optional phStore As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptVerifyTimeStampSignature Lib "crypt32" (pbTSContentInfo As Any, ByVal cbTSContentInfo As Long, pbData As Any, ByVal cbData As Long, ByVal hAdditionalStore As LongPtr, ppTsContext As LongPtr, ppTsSigner As LongPtr, Optional phStore As LongPtr) As BOOL

    [Unimplemented]
    [Description("This function is not implemented on any Windows version as per the time of writing.")]
    Public Declare PtrSafe Function CryptCreateAsyncHandle Lib "crypt32" (ByVal dwFlags As Long, phAsync As LongPtr) As BOOL
    [Unimplemented]
    [Description("This function is not implemented on any Windows version as per the time of writing.")]
    Public Declare PtrSafe Function CryptSetAsyncParam Lib "crypt32" (ByVal hAsync As LongPtr, pszParamOid As String, pvParam As Any, ByVal pfnFree As LongPtr) As BOOL
    [Unimplemented]
    [Description("This function is not implemented on any Windows version as per the time of writing.")]
    Public Declare PtrSafe Function CryptGetAsyncParam Lib "crypt32" (ByVal hAsync As LongPtr, pszParamOid As String, ppvParam As LongPtr, ppfnFree As LongPtr) As BOOL
    [Unimplemented]
    [Description("This function is not implemented on any Windows version as per the time of writing.")]
    Public Declare PtrSafe Function CryptCloseAsyncHandle Lib "crypt32" (Optional ByVal hAsync As LongPtr) As BOOL


    Public Declare PtrSafe Function CryptSignMessage Lib "crypt32" (pSignPara As CRYPT_SIGN_MESSAGE_PARA, ByVal fDetachedSignature As BOOL, ByVal cToBeSigned As Long, rgpbToBeSigned As Any, pbSignedBlob As Any, pcbSignedBlob As Long) As BOOL
    Public Declare PtrSafe Function CryptVerifyMessageSignature Lib "crypt32" (pVerifyPara As CRYPT_VERIFY_MESSAGE_PARA, ByVal dwSignerIndex As Long, pbSignedBlob As Any, ByVal cbSignedBlob As Long, pbDecoded As Any, pcbDecoded As Long, ppSignerCert As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptGetMessageSignerCount Lib "crypt32" (ByVal dwMsgEncodingType As CRYPT_CERT_ENCODING_TYPE, pbSignedBlob As Any, ByVal cbSignedBlob As Long) As Long
    Public Declare PtrSafe Function CryptGetMessageCertificates Lib "crypt32" (ByVal dwMsgAndCertEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal hCryptProv As LongPtr, [TypeHint(CertStoreOpenFlags, CertStoreLDAPFlags , CertStoreRegistryStoreFlags , CertStoreRegistryLocValues)] ByVal dwFlags As Long, pbSignedBlob As Any, ByVal cbSignedBlob As Long) As LongPtr
    Public Declare PtrSafe Function CryptVerifyDetachedMessageSignature Lib "crypt32" (pVerifyPara As CRYPT_VERIFY_MESSAGE_PARA, ByVal dwSignerIndex As Long, pbDetachedSignBlob As Any, ByVal cbDetachedSignBlob As Long, ByVal cToBeSigned As Long, rgpbToBeSigned As Any, rgcbToBeSigned As Long, ppSignerCert As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptEncryptMessage Lib "crypt32" (pEncryptPara As CRYPT_ENCRYPT_MESSAGE_PARA, ByVal cRecipientCert As Long, rgpRecipientCert As LongPtr, pbToBeEncrypted As Any, ByVal cbToBeEncrypted As Long, pbEncryptedBlob As Any, pcbEncryptedBlob As Long) As BOOL
    Public Declare PtrSafe Function CryptDecryptMessage Lib "crypt32" (pDecryptPara As CRYPT_DECRYPT_MESSAGE_PARA, pbEncryptedBlob As Any, ByVal cbEncryptedBlob As Long, pbDecrypted As Any, pcbDecrypted As Long, ppXchgCert As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptSignAndEncryptMessage Lib "crypt32" (pSignPara As CRYPT_SIGN_MESSAGE_PARA, pEncryptPara As CRYPT_ENCRYPT_MESSAGE_PARA, ByVal cRecipientCert As Long, rgpRecipientCert As LongPtr, pbToBeSignedAndEncrypted As Any, ByVal cbToBeSignedAndEncrypted As Long, pbSignedAndEncryptedBlob As Any, pcbSignedAndEncryptedBlob As Long) As BOOL
    Public Declare PtrSafe Function CryptDecryptAndVerifyMessageSignature Lib "crypt32" (pDecryptPara As CRYPT_DECRYPT_MESSAGE_PARA, pVerifyPara As CRYPT_VERIFY_MESSAGE_PARA, ByVal dwSignerIndex As Long, pbEncryptedBlob As Any, ByVal cbEncryptedBlob As Long, pbDecrypted As Any, pcbDecrypted As Long, ppXchgCert As LongPtr, ppSignerCert As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptDecodeMessage Lib "crypt32" (ByVal dwMsgTypeFlag As CryptMessageTypeFlags, pDecryptPara As CRYPT_DECRYPT_MESSAGE_PARA, pVerifyPara As CRYPT_VERIFY_MESSAGE_PARA, ByVal dwSignerIndex As Long, pbEncodedBlob As Any, ByVal cbEncodedBlob As Long, ByVal dwPrevInnerContentType As CryptMessageTypes, pdwMsgType As CryptMessageTypes, pdwInnerContentType As CryptMessageTypes, pbDecoded As Any, pcbDecoded As Long, Optional ppXchgCert As LongPtr, Optional ppSignerCert As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptHashMessage Lib "crypt32" (pHashPara As CRYPT_HASH_MESSAGE_PARA, ByVal fDetachedHash As BOOL, ByVal cToBeHashed As Long, rgpbToBeHashed As Any, rgcbToBeHashed As Long, pbHashedBlob As Any, pcbHashedBlob As Long, pbComputedHash As Any, pcbComputedHash As Long) As BOOL
    Public Declare PtrSafe Function CryptVerifyMessageHash Lib "crypt32" (pHashPara As CRYPT_HASH_MESSAGE_PARA, pbHashedBlob As Any, ByVal cbHashedBlob As Long, pbToBeHashed As Any, pcbToBeHashed As Long, pbComputedHash As Any, Optional pcbComputedHash As Long) As BOOL
    Public Declare PtrSafe Function CryptVerifyDetachedMessageHash Lib "crypt32" (pHashPara As CRYPT_HASH_MESSAGE_PARA, pbDetachedHashedBlob As Any, ByVal cbDetachedHashedBlob As Long, ByVal cToBeHashed As Long, rgpbToBeHashed As Any, rgcbToBeHashed As Long, pbComputedHash As Any, Optional pcbComputedHash As Long) As BOOL
    Public Declare PtrSafe Function CryptSignMessageWithKey Lib "crypt32" (pSignPara As CRYPT_KEY_SIGN_MESSAGE_PARA, pbToBeSigned As Any, ByVal cbToBeSigned As Long, pbSignedBlob As Any, pcbSignedBlob As Long) As BOOL
    Public Declare PtrSafe Function CryptVerifyMessageSignatureWithKey Lib "crypt32" (pVerifyPara As CRYPT_KEY_VERIFY_MESSAGE_PARA, pPublicKeyInfo As CERT_PUBLIC_KEY_INFO, pbSignedBlob As Any, ByVal cbSignedBlob As Long, pbDecoded As Any, Optional pcbDecoded As Long) As BOOL

    Public Declare PtrSafe Function CryptMsgOpenToEncode Lib "crypt32" (ByVal dwMsgEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal dwFlags As CryptMsgOpenFlags, ByVal dwMsgType As CryptMessageTypes, pvMsgEncodeInfo As Any, ByVal pszInnerContentObjId As String, pStreamInfo As CMSG_STREAM_INFO) As LongPtr
    Public Declare PtrSafe Function CryptMsgCalculateEncodedLength Lib "crypt32" (ByVal dwMsgEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal dwFlags As CryptMsgOpenFlags, ByVal dwMsgType As CryptMessageTypes, pvMsgEncodeInfo As Any, ByVal pszInnerContentObjId As String, ByVal cbData As Long) As Long
    Public Declare PtrSafe Function CryptMsgOpenToDecode Lib "crypt32" (ByVal dwMsgEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal dwFlags As CryptMsgOpenFlags, ByVal dwMsgType As CryptMessageTypes, ByVal hCryptProv As LongPtr, pRecipientInfo As CERT_INFO, pStreamInfo As CMSG_STREAM_INFO) As LongPtr
    Public Declare PtrSafe Function CryptMsgDuplicate Lib "crypt32" (ByVal hCryptMsg As LongPtr) As LongPtr
    Public Declare PtrSafe Function CryptMsgClose Lib "crypt32" (ByVal hCryptMsg As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptMsgUpdate Lib "crypt32" (ByVal hCryptMsg As LongPtr, pbData As Any, ByVal cbData As Long, ByVal fFinal As BOOL) As BOOL
    Public Declare PtrSafe Function CryptMsgGetParam Lib "crypt32" (ByVal hCryptMsg As LongPtr, ByVal dwParamType As CRYPT_CMSG_PARAM_TYPE, ByVal dwIndex As Long, pvData As Any, pcbData As Long) As BOOL
    Public Declare PtrSafe Function CryptMsgControl Lib "crypt32" (ByVal hCryptMsg As LongPtr, ByVal dwFlags As CryptMsgOpenFlags, ByVal dwCtrlType As CryptCMsgControlTypes, pvCtrlParam As Any) As BOOL
    Public Declare PtrSafe Function CryptMsgVerifyCountersignatureEncoded Lib "crypt32" (ByVal hCryptProv As LongPtr, ByVal dwEncodingType As CRYPT_CERT_ENCODING_TYPE, pbSignerInfo As Any, ByVal cbSignerInfo As Long, pbSignerInfoCountersignature As Any, ByVal cbSignerInfoCountersignature As Long, pciCountersigner As CERT_INFO) As BOOL
    Public Declare PtrSafe Function CryptMsgVerifyCountersignatureEncodedEx Lib "crypt32" (ByVal hCryptProv As LongPtr, ByVal dwEncodingType As CRYPT_CERT_ENCODING_TYPE, pbSignerInfo As Any, ByVal cbSignerInfo As Long, pbSignerInfoCountersignature As Any, ByVal cbSignerInfoCountersignature As Long, ByVal dwSignerType As CryptCMsgControlSignerTypes, pvSigner As Any, ByVal dwFlags As CryptMsgVerifyCountersignFlags, pvExtra As Any) As BOOL
    Public Declare PtrSafe Function CryptMsgCountersign Lib "crypt32" (ByVal dwEncodingType As CRYPT_CERT_ENCODING_TYPE, pbSignerInfo As Any, ByVal cbSignerInfo As Long, ByVal cCountersigners As Long, rgCounterSigners As CMSG_SIGNER_ENCODE_INFO, pbCountersignature As Any, pcbCountersignature As Long) As BOOL
    Public Declare PtrSafe Function CryptMsgGetAndVerifySigner Lib "crypt32" (ByVal hCryptMsg As LongPtr, ByVal cSignerStore As Long, rghSignerStore As LongPtr, ByVal dwFlags As CryptCMsgSignerFlags, ppSigner As LongPtr, Optional pdwSignerIndex As Long) As BOOL
    Public Declare PtrSafe Function CryptMsgSignCTL Lib "crypt32" (ByVal dwMsgEncodingType As CRYPT_CERT_ENCODING_TYPE, pbCtlContent As Any, ByVal cbCtlContent As Long, pSignInfo As CMSG_SIGNED_ENCODE_INFO, [TypeHint(CryptMsgSignCtlFlags)] ByVal dwFlags As Long, pbEncoded As Any, pcbEncoded As Long) As BOOL
    Public Declare PtrSafe Function CryptMsgEncodeAndSignCTL Lib "crypt32" (ByVal dwMsgEncodingType As CRYPT_CERT_ENCODING_TYPE, pCtlInfo As CTL_INFO, pSignInfo As CMSG_SIGNED_ENCODE_INFO, [TypeHint(CryptCMsgEncodeFlags, CryptMsgSignCtlFlags)] ByVal dwFlags As Long, pbEncoded As Any, pcbEncoded As Long) As BOOL



    [Description("This is an old function kept for compatibility with Internet Explorer 4.0 clients. New applications should use the PfxExportCertStoreEx function that provides enhanced private key security.")]
    Public Declare PtrSafe Function PFXExportCertStore Lib "crypt32" (ByVal hStore As LongPtr, pPFX As CRYPT_DATA_BLOB, ByVal szPassword As LongPtr, ByVal dwFlags As CryptExportCertStoreFlags) As BOOL
    Public DeclareWide PtrSafe Function PFXExportCertStoreEx Lib "crypt32" (ByVal hStore As LongPtr, pPFX As CRYPT_DATA_BLOB, ByVal szPassword As LongPtr, pvPara As Any, ByVal dwFlags As CryptExportCertStoreFlags) As BOOL
    Public Declare PtrSafe Function PFXImportCertStore Lib "crypt32" (pPFX As CRYPT_DATA_BLOB, ByVal szPassword As LongPtr, [TypeHint(CryptImportCertStoreFlags, Crypt_AC_Flags , CryptKeyFlags)] ByVal dwFlags As Long) As LongPtr
    Public Declare PtrSafe Function PFXIsPFXBlob Lib "crypt32" (pPFX As CRYPT_DATA_BLOB) As BOOL
    Public Declare PtrSafe Function PFXVerifyPassword Lib "crypt32" (pPFX As CRYPT_DATA_BLOB, ByVal szPassword As LongPtr, ByVal dwFlags As Long) As BOOL

    Public Declare PtrSafe Function CertGetNameStringA Lib "crypt32" (pCertContext As CERT_CONTEXT, ByVal dwType As CERT_NAME_TYPES, ByVal dwFlags As CERT_NAME_FLAGS, pvTypePara As Any, ByVal pszNameString As String, ByVal cchNameString As Long) As Long
    Public Declare PtrSafe Function CertGetNameStringW Lib "crypt32" (pCertContext As CERT_CONTEXT, ByVal dwType As CERT_NAME_TYPES, ByVal dwFlags As CERT_NAME_FLAGS, pvTypePara As Any, ByVal pszNameString As LongPtr, ByVal cchNameString As Long) As Long
    Public DeclareWide PtrSafe Function CertGetNameString Lib "crypt32" Alias "CertGetNameStringW" (pCertContext As CERT_CONTEXT, ByVal dwType As CERT_NAME_TYPES, ByVal dwFlags As CERT_NAME_FLAGS, pvTypePara As Any, ByVal pszNameString As String, ByVal cchNameString As Long) As Long
    Public Declare PtrSafe Function CertFindCertificateInStore Lib "crypt32" (ByVal hCertStore As LongPtr, ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal dwFindFlags As CryptCertFindFlags, ByVal dwFindType As CryptCertFindType, pvFindPara As Any, pPrevCertContext As CERT_CONTEXT) As LongPtr
    Public Declare PtrSafe Function CertFreeCertificateContext Lib "Crypt32" (ByVal pCertContext As LongPtr) As BOOL
    Public Declare PtrSafe Function CertOpenSystemStoreA Lib "crypt32" (ByVal hProv As LongPtr, ByVal szSubsystemProtocol As String) As LongPtr
    Public Declare PtrSafe Function CertOpenSystemStoreW Lib "crypt32" (ByVal hProv As LongPtr, ByVal szSubsystemProtocol As LongPtr) As LongPtr
    Public DeclareWide PtrSafe Function CertOpenSystemStore Lib "crypt32" Alias "CertOpenSystemStoreW" (ByVal hProv As LongPtr, ByVal szSubsystemProtocol As String) As LongPtr
    Public Declare PtrSafe Function CertRegisterSystemStore Lib "crypt32" (pvSystemStore As Any, [TypeHint(CertStoreRegistryLocValues)] ByVal dwFlags As Long, pStoreInfo As CERT_SYSTEM_STORE_INFO, ByVal pvReserved As LongPtr) As BOOL
    Public Declare PtrSafe Function CertAddEncodedCertificateToSystemStoreA Lib "crypt32" (ByVal szCertStoreName As String, pbCertEncoded As Any, ByVal cbCertEncoded As Long) As BOOL
    Public Declare PtrSafe Function CertAddEncodedCertificateToSystemStoreW Lib "crypt32" (ByVal szCertStoreName As LongPtr, pbCertEncoded As Any, ByVal cbCertEncoded As Long) As BOOL
    Public DeclareWide PtrSafe Function CertAddEncodedCertificateToSystemStore Lib "crypt32" Alias "CertAddEncodedCertificateToSystemStoreW" (ByVal szCertStoreName As String, pbCertEncoded As Any, ByVal cbCertEncoded As Long) As BOOL
    Public Declare PtrSafe Function CertCloseStore Lib "crypt32" (ByVal hCertStore As LongPtr, ByVal dwFlags As CERT_STORE_CLOSE_FLAGS) As BOOL
    Public Declare PtrSafe Function CertSaveStore Lib "crypt32" (ByVal hCertStore As LongPtr, ByVal dwEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal dwSaveAs As CRYPT_STORE_SAVEAS_FLAGS, ByVal dwSaveTo As CRYPT_STORE_SAVETO_FLAGS, pvSaveToPara As Any, ByVal dwFlags As Long) As BOOL
    Public Declare PtrSafe Function CertEnumCertificatesInStore Lib "crypt32" (ByVal hCertStore As LongPtr, pPrevCertContext As CERT_CONTEXT) As LongPtr
    Public Declare PtrSafe Function CertOpenStore Lib "crypt32" (ByVal lpszStoreProvider As LongPtr, ByVal dwEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal hCryptProv As LongPtr, [TypeHint(CertStoreOpenFlags, CertStoreLDAPFlags , CertStoreRegistryStoreFlags , CertStoreRegistryLocValues)] ByVal dwFlags As Long, pvPara As Any) As LongPtr
    Public Declare PtrSafe Function CertDuplicateStore Lib "crypt32" (ByVal hCertStore As LongPtr) As LongPtr
    Public Declare PtrSafe Function CertEnumCertificateContextProperties Lib "crypt32" (pCertContext As CERT_CONTEXT, ByVal dwPropId As CertPropertyIDs) As Long
    Public DeclareWide PtrSafe Function CertGetCertificateContextProperty Lib "crypt32" (pCertContext As CERT_CONTEXT, ByVal dwPropId As CertPropertyIDs, pvData As Any, pcbData As Long) As BOOL
    Public DeclareWide PtrSafe Function CertSetCertificateContextProperty Lib "crypt32" (pCertContext As CERT_CONTEXT, ByVal dwPropId As CertPropertyIDs, [TypeHint(CertSetPropFlags, CertStoreOpenFlags)] ByVal dwFlags As Long, pvData As Any, pcbData As Long) As BOOL
    Public Declare PtrSafe Function CertVerifyTimeValidity Lib "crypt32" (pTimeToVerify As FILETIME, pCertInfo As CERT_INFO) As Long
    Public Declare PtrSafe Function CertVerifyCRLTimeValidity Lib "crypt32" (pTimeToVerify As FILETIME, pCrlInfo As CRL_INFO) As Long
    Public Declare PtrSafe Function CertVerifyValidityNesting Lib "crypt32" (pSubjectInfo As CERT_INFO, pIssuerInfo As CERT_INFO) As BOOL
    [Description("Note: Do not use ByVal for last arg; pass VarPtr(crlInfoArray(0))")]
    Public Declare PtrSafe Function CertVerifyCRLRevocation Lib "crypt32" (ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, pCertId As CERT_INFO, ByVal cCrlInfo As Long, rgpCrlInfo As LongPtr) As BOOL
    Public Declare PtrSafe Function CertGetValidUsages Lib "crypt32" (ByVal cCerts As Long, rghCerts As LongPtr, cNumOIDs As Long, rghOIDs As LongPtr, pcbOIDs As Long) As BOOL
    Public Declare PtrSafe Function CertGetStoreProperty Lib "crypt32" (ByVal hCertStore As LongPtr, ByVal dwPropId As CertStorePropIds, pvData As Any, pcbData As Long) As BOOL
    Public Declare PtrSafe Function CertSetStoreProperty Lib "crypt32" (ByVal hCertStore As LongPtr, ByVal dwPropId As CertStorePropIds, ByVal dwFlags As Long, pvData As Any) As BOOL
    Public Declare PtrSafe Function CertVerifyRevocation Lib "crypt32" (ByVal dwEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal dwRevType As CertRevocationTypes, rgpvContext As Any, ByVal dwFlags As CertVerifyRevFlags, pRevPara As CERT_REVOCATION_PARA, pRevStatus As CERT_REVOCATION_STATUS) As BOOL
    Public Declare PtrSafe Function CertCreateCertificateChainEngine Lib "crypt32" (pConfig As CERT_CHAIN_ENGINE_CONFIG, phChainEngine As LongPtr) As BOOL
    Public Declare PtrSafe Sub CertFreeCertificateChainEngine Lib "crypt32" (ByVal hChainEngine As LongPtr)
    Public Declare PtrSafe Function CertResyncCertificateChainEngine Lib "crypt32" (ByVal hChainEngine As LongPtr) As BOOL
    Public Declare PtrSafe Function CertGetCertificateChain Lib "crypt32" (ByVal hChainEngine As LongPtr, pCertContext As CERT_CONTEXT, pTime As FILETIME, ByVal hAdditionalStore As LongPtr, pChainPara As CERT_CHAIN_PARA, ByVal pvReserved As LongPtr, ppChainContext As LongPtr) As BOOL
    Public Declare PtrSafe Sub CertFreeCertificateChain Lib "crypt32" (ByVal pChainContext As LongPtr)
    Public Declare PtrSafe Function CertDuplicateCertificateChain Lib "crypt32" (pChainContext As CERT_CHAIN_CONTEXT) As LongPtr
    Public Declare PtrSafe Function CertFindChainInStore Lib "crypt32" (ByVal hCertStore As LongPtr, ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal dwFindFlags As CryptCertFindChainFlags, ByVal dwFindType As CryptCertChainFindType, pvFindPara As Any, pPrevChainContext As CERT_CHAIN_CONTEXT) As LongPtr
    Public Declare PtrSafe Function CertCreateCertificateContext Lib "crypt32" (ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, pbCertEncoded As Any, ByVal cbCertEncoded As Long) As LongPtr
    Public Declare PtrSafe Function CertDuplicateCertificateContext Lib "crypt32" (pCertContext As CERT_CONTEXT) As LongPtr
    Public Declare PtrSafe Function CertOIDToAlgId Lib "crypt32" (ByVal pszOid As String) As ALG_ID
    Public Declare PtrSafe Function CertAlgIdToOID Lib "crypt32" (ByVal dwAldId As ALG_ID) As LongPtr
    Public Declare PtrSafe Function CertCompareIntegerBlob Lib "crypt32" (pInt1 As CRYPT_INTEGER_BLOB, pInt2 As CRYPT_INTEGER_BLOB) As BOOL
    Public Declare PtrSafe Function CertComparePublicKeyInfo Lib "crypt32" (ByVal dwEncodingType As CRYPT_CERT_ENCODING_TYPE, pPublicKey1 As CERT_PUBLIC_KEY_INFO, pPublicKey2 As CERT_PUBLIC_KEY_INFO) As BOOL
    Public Declare PtrSafe Function CertGetPublicKeyLength Lib "crypt32" (ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, pPublicKey As CERT_PUBLIC_KEY_INFO) As Long
    Public Declare PtrSafe Function CertCompareCertificateName Lib "crypt32" (ByVal dwEncodingType As CRYPT_CERT_ENCODING_TYPE, pCertName1 As CERT_NAME_BLOB, pCertName2 As CERT_NAME_BLOB) As BOOL
    Public Declare PtrSafe Function CertCompareCertificate Lib "crypt32" (ByVal dwEncodingType As CRYPT_CERT_ENCODING_TYPE, pCertId1 As CERT_INFO, pCertId2 As CERT_INFO) As BOOL
    Public Declare PtrSafe Function CertGetSubjectCertificateFromStore Lib "crypt32" (ByVal hCertStore As LongPtr, ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, pCertId As CERT_INFO) As LongPtr
    Public Declare PtrSafe Function CertGetIssuerCertificateFromStore Lib "crypt32" (ByVal hCertStore As LongPtr, pSubjectContext As CERT_CONTEXT, pPrevIssuerContext As CERT_CONTEXT, pdwFlags As CertStoreVerifyFlags) As LongPtr
    Public Declare PtrSafe Function CertVerifySubjectCertificateContext Lib "crypt32" (pSubject As CERT_CONTEXT, pIssuer As CERT_CONTEXT, pdwFlags As CertStoreVerifyFlags) As BOOL
    Public Declare PtrSafe Function CertCreateCTLEntryFromCertificateContextProperties Lib "crypt32" (pCertContext As CERT_CONTEXT, ByVal cOptAttr As Long, rgOptAttr As CRYPT_ATTRIBUTE, ByVal dwFlags As CertCreateCtlFromCertCtxFlags, ByVal pvReserved As LongPtr, pCtlEntry As CTL_ENTRY, pcbCtlEntry As Long) As BOOL
    Public Declare PtrSafe Function CertSetCertificateContextPropertiesFromCTLEntry Lib "crypt32" (pCertContext As CERT_CONTEXT, pCtlEntry As CTL_ENTRY, ByVal dwFlags As CertSetPropFlags) As BOOL
    Public Declare PtrSafe Function CertGetCRLFromStore Lib "crypt32" (ByVal hCertStore As LongPtr, pIssuerContext As CERT_CONTEXT, pPrevCrlContext As CRL_CONTEXT, pdwFlags As CertStoreVerifyFlags) As LongPtr
    Public Declare PtrSafe Function CertEnumCRLsInStore Lib "crypt32" (ByVal hCertStore As LongPtr, pPrevCrlContext As CRL_CONTEXT) As LongPtr
    Public Declare PtrSafe Function CertFindCRLInStore Lib "crypt32" (ByVal hCertStore As LongPtr, ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal dwFindFlags As CertCrlFindFlags, ByVal dwFindType As CertCrlFindType, pvFindPara As Any, pPrevCrlContext As CRL_CONTEXT) As LongPtr
    Public Declare PtrSafe Function CertDuplicateCRLContext Lib "crypt32" (pCrlContext As CRL_CONTEXT) As LongPtr
    Public Declare PtrSafe Function CertCreateCRLContext Lib "crypt32" (ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, pbCrlEncoded As Any, ByVal cbCrlEncoded As Long) As LongPtr
    Public Declare PtrSafe Function CertFreeCRLContext Lib "crypt32" (pCrlContext As CRL_CONTEXT) As BOOL
    Public Declare PtrSafe Function CertSetCRLContextProperty Lib "crypt32" (pCrlContext As CRL_CONTEXT, ByVal dwPropId As CertPropertyIDs, [TypeHint(CertStoreOpenFlags, CertSetPropFlags)] ByVal dwFlags As Long, pvData As Any) As BOOL
    Public Declare PtrSafe Function CertGetCRLContextProperty Lib "crypt32" (pCrlContext As CRL_CONTEXT, ByVal dwPropId As CertPropertyIDs, pvData As Any, pcbData As Long) As BOOL
    Public Declare PtrSafe Function CertEnumCRLContextProperties Lib "crypt32" (pCrlContext As CRL_CONTEXT, ByVal dwPropId As CertPropertyIDs) As Long
    Public Declare PtrSafe Function CertFindCertificateInCRL Lib "crypt32" (pCert As CERT_CONTEXT, pCrlContext As CRL_CONTEXT, ByVal dwFlags As Long, ByVal pvReserved As LongPtr, ppCrlEntry As LongPtr) As BOOL
    Public Declare PtrSafe Function CertIsValidCRLForCertificate Lib "crypt32" (pCert As CERT_CONTEXT, pCrlContext As CRL_CONTEXT, ByVal dwFlags As Long, ByVal pvReserved As LongPtr) As BOOL
    Public Declare PtrSafe Function CertAddEncodedCertificateToStore Lib "crypt32" (ByVal hCertStore As LongPtr, ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, pbCertEncoded As Any, ByVal cbCertEncoded As Long, ByVal dwAddDisposition As CertStoreAddDisposition, ppCertContext As LongPtr) As BOOL
    Public Declare PtrSafe Function CertAddCertificateContextToStore Lib "crypt32" (ByVal hCertStore As LongPtr, pCertContext As CERT_CONTEXT, ByVal dwAddDisposition As CertStoreAddDisposition, ppStoreContext As LongPtr) As BOOL
    Public Declare PtrSafe Function CertAddSerializedElementToStore Lib "crypt32" (ByVal hCertStore As LongPtr, pbElement As Any, ByVal cbElement As Long, ByVal dwAddDisposition As CertStoreAddDisposition, ByVal dwFlags As Long, ByVal dwContextTypeFlags As CertStoreContextFlags, pdwContextType As CertContextTypes, ppvContext As LongPtr) As BOOL
    Public Declare PtrSafe Function CertDeleteCertificateFromStore Lib "crypt32" (pCertContext As CERT_CONTEXT) As BOOL
    Public Declare PtrSafe Function CertAddEncodedCRLToStore Lib "crypt32" (ByVal hCertStore As LongPtr, ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, pbCrlEncoded As Any, ByVal cbCrlEncoded As Long, ByVal dwAddDisposition As CertStoreAddDisposition, ppCrlContext As LongPtr) As BOOL
    Public Declare PtrSafe Function CertAddCRLContextToStore Lib "crypt32" (ByVal hCertStore As LongPtr, pCrlContext As CRL_CONTEXT, ByVal dwAddDisposition As CertStoreAddDisposition, ppStoreContext As LongPtr) As BOOL
    Public Declare PtrSafe Function CertDeleteCRLFromStore Lib "crypt32" (pCrlContext As CRL_CONTEXT) As BOOL
    Public Declare PtrSafe Function CertSerializeCertificateStoreElement Lib "crypt32" (pCertContext As CERT_CONTEXT, ByVal dwFlags As Long, pbElement As Any, pcbElement As Long) As BOOL
    Public Declare PtrSafe Function CertSerializeCRLStoreElement Lib "crypt32" (pCrlContext As CRL_CONTEXT, ByVal dwFlags As Long, pbElement As Any, pcbElement As Long) As BOOL
    Public Declare PtrSafe Function CertDuplicateCTLContext Lib "crypt32" (pCtlContext As CTL_CONTEXT) As LongPtr
    Public Declare PtrSafe Function CertCreateCTLContext Lib "crypt32" (ByVal dwMsgAndCertEncodingType As CRYPT_CERT_ENCODING_TYPE, pbCtlEncoded As Any, ByVal cbCtlEncoded As Long) As LongPtr
    Public Declare PtrSafe Function CertFreeCTLContext Lib "crypt32" (pCtlContext As CTL_CONTEXT) As BOOL
    Public Declare PtrSafe Function CertSetCTLContextProperty Lib "crypt32" (pCtlContext As CTL_CONTEXT, ByVal dwPropId As CertPropertyIDs, [TypeHint(CertStoreOpenFlags, CertSetPropFlags)] ByVal dwFlags As Long, pvData As Any) As BOOL
    Public Declare PtrSafe Function CertGetCTLContextProperty Lib "crypt32" (pCtlContext As CTL_CONTEXT, ByVal dwPropId As CertPropertyIDs, pvData As Any, pcbData As Long) As BOOL
    Public Declare PtrSafe Function CertEnumCTLContextProperties Lib "crypt32" (pCtlContext As CTL_CONTEXT, ByVal dwPropId As CertPropertyIDs) As Long
    Public Declare PtrSafe Function CertEnumCTLsInStore Lib "crypt32" (ByVal hCertStore As LongPtr, pPrevCtlContext As CTL_CONTEXT) As LongPtr
    Public Declare PtrSafe Function CertFindSubjectInCTL Lib "crypt32" (ByVal dwEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal dwSubjectType As CertCtlSubjectTypes, pvSubject As Any, pCtlContext As CTL_CONTEXT, ByVal dwFlags As Long) As LongPtr
    Public Declare PtrSafe Function CertFindCTLInStore Lib "crypt32" (ByVal hCertStore As LongPtr, ByVal dwMsgAndCertEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal dwFindFlags As CertCtlFindInStoreFlags, ByVal dwFindType As CertCtFindType, pvFindPara As Any, pPrevCtlContext As CTL_CONTEXT) As LongPtr
    Public Declare PtrSafe Function CertAddEncodedCTLToStore Lib "crypt32" (ByVal hCertStore As LongPtr, ByVal dwMsgAndCertEncodingType As CRYPT_CERT_ENCODING_TYPE, pbCtlEncoded As Any, ByVal cbCtlEncoded As Long, ByVal dwAddDisposition As CertStoreAddDisposition, ppCtlContext As LongPtr) As BOOL
    Public Declare PtrSafe Function CertAddCTLContextToStore Lib "crypt32" (ByVal hCertStore As LongPtr, pCtlContext As CTL_CONTEXT, ByVal dwAddDisposition As CertStoreAddDisposition, ppStoreContext As LongPtr) As BOOL
    Public Declare PtrSafe Function CertSerializeCTLStoreElement Lib "crypt32" (pCtlContext As CTL_CONTEXT, ByVal dwFlags As Long, pbElement As Any, pcbElement As Long) As BOOL
    Public Declare PtrSafe Function CertDeleteCTLFromStore Lib "crypt32" (pCtlContext As CTL_CONTEXT) As BOOL
    Public Declare PtrSafe Function CertAddCertificateLinkToStore Lib "crypt32" (ByVal hCertStore As LongPtr, pCertContext As CERT_CONTEXT, ByVal dwAddDisposition As CertStoreAddDisposition, ppStoreContext As LongPtr) As BOOL
    Public Declare PtrSafe Function CertAddCRLLinkToStore Lib "crypt32" (ByVal hCertStore As LongPtr, pCrlContext As CRL_CONTEXT, ByVal dwAddDisposition As CertStoreAddDisposition, ppStoreContext As LongPtr) As BOOL
    Public Declare PtrSafe Function CertAddCTLLinkToStore Lib "crypt32" (ByVal hCertStore As LongPtr, pCtlContext As CTL_CONTEXT, ByVal dwAddDisposition As CertStoreAddDisposition, ppStoreContext As LongPtr) As BOOL
    Public Declare PtrSafe Function CertAddStoreToCollection Lib "crypt32" (ByVal hCollectionStore As LongPtr, ByVal hSiblingStore As LongPtr, [TypeHint(CertPhysicalStoreFlags)] ByVal dwUpdateFlags As Long, ByVal dwPriority As Long) As BOOL
    Public Declare PtrSafe Sub CertRemoveStoreFromCollection Lib "crypt32" (ByVal hCollectionStore As LongPtr, ByVal hSiblingStore As LongPtr)
    Public Declare PtrSafe Function CertControlStore Lib "crypt32" (ByVal hCertStore As LongPtr, [TypeHint(CertStoreControlFlags)] ByVal dwFlags As Long, [TypeHint(CertStoreControlTypes)] ByVal dwCtrlType As Long, pvCtrlPara As Any) As BOOL
    Public Declare PtrSafe Function CertCreateContext Lib "crypt32" (ByVal dwContextType As CertContextTypes, ByVal dwEncodingType As CRYPT_CERT_ENCODING_TYPE, pbEncoded As Any, ByVal cbEncoded As Long, ByVal dwFlags As CertCreateContexttFlags, pCreatePara As CERT_CREATE_CONTEXT_PARA) As LongPtr
    Public Declare PtrSafe Function CertRegisterPhysicalStore Lib "crypt32" (pvSystemStore As Any, [TypeHint(CertStoreOpenFlags)] ByVal dwFlags As Long, ByVal pwszStoreName As LongPtr, pStoreInfo As CERT_SYSTEM_STORE_INFO, ByVal pvReserved As LongPtr) As BOOL
    Public Declare PtrSafe Function CertUnregisterSystemStore Lib "crypt32" (pvSystemStore As Any, [TypeHint(CertStoreOpenFlags)] ByVal dwFlags As Long) As BOOL
    Public Declare PtrSafe Function CertUnregisterPhysicalStore Lib "crypt32" (pvSystemStore As Any, [TypeHint(CertStoreOpenFlags)] ByVal dwFlags As Long, ByVal pwszStoreName As LongPtr) As BOOL
    Public Declare PtrSafe Function CertEnumSystemStoreLocation Lib "crypt32" (ByVal dwFlags As Long, pvArg As Any, ByVal pfnEnum As LongPtr) As BOOL
    Public Declare PtrSafe Function CertEnumSystemStore Lib "crypt32" ([TypeHint(CertStoreRegistryLocValues)] ByVal dwFlags As Long, pvSystemStoreLocationPara As Any, pvArg As Any, ByVal pfnEnum As LongPtr) As BOOL
    Public Declare PtrSafe Function CertEnumPhysicalStore Lib "crypt32" (pvSystemStore As Any, [TypeHint(CertStoreRegistryLocValues)] ByVal dwFlags As Long, pvArg As Any, ByVal pfnEnum As LongPtr) As BOOL
    Public Declare PtrSafe Function CertGetEnhancedKeyUsage Lib "crypt32" (pCertContext As CERT_CONTEXT, [TypeHint(CryptCertFindFlags)] ByVal dwFlags As Long, pUsage As CERT_ENHKEY_USAGE, pcbUsage As Long) As BOOL
    Public Declare PtrSafe Function CertSetEnhancedKeyUsage Lib "crypt32" (pCertContext As CERT_CONTEXT, pUsage As CERT_ENHKEY_USAGE) As BOOL
    Public Declare PtrSafe Function CertAddEnhancedKeyUsageIdentifier Lib "crypt32" (pCertContext As CERT_CONTEXT, ByVal pszUsageIdentifier As LongPtr) As BOOL
    Public Declare PtrSafe Function CertRemoveEnhancedKeyUsageIdentifier Lib "crypt32" (pCertContext As CERT_CONTEXT, ByVal pszUsageIdentifier As LongPtr) As BOOL
    Public Declare PtrSafe Function CertFindSubjectInSortedCTL Lib "crypt32" (pSubjectIdentifier As CRYPT_DATA_BLOB, pCtlContext As CTL_CONTEXT, ByVal dwFlags As Long, ByVal pvReserved As LongPtr, pEncodedAttributes As CRYPT_DER_BLOB) As BOOL
    Public Declare PtrSafe Function CertEnumSubjectInSortedCTL Lib "crypt32" (pCtlContext As CTL_CONTEXT, ppvNextSubject As LongPtr, pSubjectIdentifier As CRYPT_DER_BLOB, pEncodedAttributes As CRYPT_DER_BLOB) As BOOL
    Public Declare PtrSafe Function CertVerifyCTLUsage Lib "crypt32" (ByVal dwEncodingType As CRYPT_CERT_ENCODING_TYPE, dwSubjectType As CertCtlSubjectTypes, pvSubject As Any, pSubjectUsage As CTL_USAGE, [TypeHint(CertVerifyUsageFlags)] ByVal dwFlags As Long, pVerifyUsagePara As CTL_VERIFY_USAGE_PARA, pVerifyUsageStatus As CTL_VERIFY_USAGE_STATUS) As BOOL
    Public Declare PtrSafe Function CertIsRDNAttrsInCertificateName Lib "crypt32" (ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal dwFlags As CertRDNAttrFlags, pCertName As CERT_NAME_BLOB, pRDN As CERT_RDN) As BOOL
    Public DeclareWide PtrSafe Function CertIsStrongHashToSign Lib "crypt32" (pStrongSignPara As CERT_STRONG_SIGN_PARA, ByVal pwszCNGHashAlgid As String, pSigningCert As CERT_CONTEXT) As BOOL
    Public Declare PtrSafe Function CertFindExtension Lib "crypt32" (ByVal pszObjId As LongPtr, ByVal cExtensions As Long, rgExtensions As CERT_EXTENSION) As LongPtr
    Public Declare PtrSafe Function CertFindAttribute Lib "crypt32" (ByVal pszObjId As LongPtr, ByVal cAttr As Long, rgAttr As CRYPT_ATTRIBUTE) As LongPtr
    Public Declare PtrSafe Function CertFindRDNAttr Lib "crypt32" (ByVal pszObjId As LongPtr, pName As CERT_NAME_INFO) As LongPtr
    Public Declare PtrSafe Function CertGetIntendedKeyUsage Lib "crypt32" (ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, pCertInfo As CERT_INFO, pbKeyUsage As Any, ByVal cbKeyUsage As Long) As BOOL
    Public Declare PtrSafe Function CertRDNValueToStrA Lib "crypt32" (ByVal dwValueType As CryptCertRdn, pValue As CERT_RDN_VALUE_BLOB, ByVal psz As String, ByVal csz As Long) As Long
    Public Declare PtrSafe Function CertRDNValueToStrW Lib "crypt32" (ByVal dwValueType As CryptCertRdn, pValue As CERT_RDN_VALUE_BLOB, ByVal psz As LongPtr, ByVal csz As Long) As Long
    Public DeclareWide PtrSafe Function CertRDNValueToStr Lib "crypt32" Alias "CertRDNValueToStrW" (ByVal dwValueType As CryptCertRdn, pValue As CERT_RDN_VALUE_BLOB, ByVal psz As String, ByVal csz As Long) As Long
    Public Declare PtrSafe Function CertNameToStrA Lib "crypt32" (ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, pName As CERT_NAME_BLOB, ByVal dwStrType As CertNameStringTypes, ByVal psz As String, ByVal csz As Long) As Long
    Public Declare PtrSafe Function CertNameToStrW Lib "crypt32" (ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, pName As CERT_NAME_BLOB, ByVal dwStrType As CertNameStringTypes, ByVal psz As LongPtr, ByVal csz As Long) As Long
    Public DeclareWide PtrSafe Function CertNameToStr Lib "crypt32" Alias "CertNameToStrW" (ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, pName As CERT_NAME_BLOB, ByVal dwStrType As CertNameStringTypes, ByVal psz As String, ByVal csz As Long) As Long
    Public Declare PtrSafe Function CertStrToNameA Lib "crypt32" (ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal pszX500 As String, ByVal dwStrType As CertNameStringTypes, ByVal pvReserved As LongPtr, pbEncoded As Any, pcbEncoded As Long, ppszError As LongPtr) As BOOL
    Public Declare PtrSafe Function CertStrToNameW Lib "crypt32" (ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal pszX500 As LongPtr, ByVal dwStrType As CertNameStringTypes, ByVal pvReserved As LongPtr, pbEncoded As Any, pcbEncoded As Long, ppszError As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function CertStrToName Lib "crypt32" Alias "CertStrToNameW" (ByVal dwCertEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal pszX500 As String, ByVal dwStrType As CertNameStringTypes, ByVal pvReserved As LongPtr, pbEncoded As Any, pcbEncoded As Long, ppszError As LongPtr) As BOOL
    Public Declare PtrSafe Function CertCreateSelfSignCertificate Lib "crypt32" (ByVal hCryptProvOrNCryptKey As LongPtr, pSubjectIssuerBlob As CERT_NAME_BLOB, ByVal dwFlags As CertCreateSelfSignFlags, pKeyProvInfo As CRYPT_KEY_PROV_INFO, pSignatureAlgorithm As CRYPT_ALGORITHM_IDENTIFIER, pStartTime As SYSTEMTIME, pEndTime As SYSTEMTIME, pExtensions As CERT_EXTENSIONS) As LongPtr 'PCCERT_CONTEXT
    Public Declare PtrSafe Function CertVerifyCertificateChainPolicy Lib "crypt32" ([TypeHint(CertPredefChainVerifyPolicies)] ByVal pszPolicyOID As LongPtr, pChainContext As CERT_CHAIN_CONTEXT, pPolicyPara As CERT_CHAIN_POLICY_PARA, pPolicyStatus As CERT_CHAIN_POLICY_STATUS) As BOOL
    Public Declare PtrSafe Function CertOpenServerOcspResponse Lib "crypt32" (pChainContext As CERT_CHAIN_CONTEXT, ByVal dwFlags As CertOpenServerOcspFlags, pOpenPara As CERT_SERVER_OCSP_RESPONSE_OPEN_PARA) As LongPtr
    Public Declare PtrSafe Sub CertAddRefServerOcspResponse Lib "crypt32" (ByVal hServerOcspResponse As LongPtr)
    Public Declare PtrSafe Sub CertCloseServerOcspResponse Lib "crypt32" (ByVal hServerOcspResponse As LongPtr, ByVal dwFlags As Long)
    Public Declare PtrSafe Function CertGetServerOcspResponseContext Lib "crypt32" (ByVal hServerOcspResponse As LongPtr, ByVal dwFlags As Long, ByVal pvReserved As LongPtr) As LongPtr
    Public Declare PtrSafe Sub CertAddRefServerOcspResponseContext Lib "crypt32" (pServerOcspResponseContext As CERT_SERVER_OCSP_RESPONSE_CONTEXT)
    Public Declare PtrSafe Sub CertFreeServerOcspResponseContext Lib "crypt32" (pServerOcspResponseContext As CERT_SERVER_OCSP_RESPONSE_CONTEXT)
    Public Declare PtrSafe Function CertRetrieveLogoOrBiometricInfo Lib "crypt32" (pCertContext As CERT_CONTEXT, [TypeHint(CertPredefLogoAndBiometricTypes)] ByVal lpszLogoOrBiometricType As LongPtr, ByVal dwRetrievalFlags As CryptRemoteObjectRetrievalFlags, ByVal dwFlags As Long, ByVal pvReserved As LongPtr, ppbData As LongPtr, pcbData As Long, ppwszMimeType As LongPtr) As BOOL
    Public Declare PtrSafe Function CertSelectCertificateChains Lib "crypt32" (pSelectionContext As UUID, ByVal dwFlags As CertSelectionFlags, pChainParameters As CERT_SELECT_CHAIN_PARA, ByVal cCriteria As Long, rgpCriteria As CERT_SELECT_CRITERIA, ByVal hStore As LongPtr, pcSelection As Long, pprgpSelection As LongPtr) As BOOL
    Public Declare PtrSafe Sub CertFreeCertificateChainList Lib "crypt32" (prgpSelection As LongPtr)
    Public Declare PtrSafe Function CertIsWeakHash Lib "crypt32" (ByVal dwHashUseType As CertHashUseTypes, ByVal pwszCNGHashAlgid As LongPtr, ByVal dwChainFlags As CryptCertChainFlags, pSignerChainContext As CERT_CHAIN_CONTEXT, pTimeStamp As FILETIME, ByVal pwszFileName As LongPtr) As BOOL



    'below included here because it's in wincrypt.h, not wintrust.h
    Public Declare PtrSafe Function FindCertsByIssuer Lib "wintrust" (pCertChains As CERT_CHAIN, pcbCertChains As Long, pcCertChains As Long, pbEncodedIssuerName As Any, ByVal cbEncodedIssuerName As Long, ByVal pwszPurpose As LongPtr, ByVal dwKeySpec As CRYPT_AT_FLAGS) As Long




    Public Const CERT_ENCODING_TYPE_MASK  = &H0000FFFF
    Public Const CMSG_ENCODING_TYPE_MASK  = &HFFFF0000
    [IgnoreWarnings(TB0021)]
    Public Function GET_CERT_ENCODING_TYPE(ByVal x As Long) As CRYPT_CERT_ENCODING_TYPE: Return (x And CERT_ENCODING_TYPE_MASK): End Function
    [IgnoreWarnings(TB0021)]
    Public Function GET_CMSG_ENCODING_TYPE(ByVal x As Long) As CRYPT_CERT_ENCODING_TYPE: Return (x And CMSG_ENCODING_TYPE_MASK): End Function
    Public Function IS_CERT_RDN_CHAR_STRING(ByVal x As Long) As Boolean: Return (((x) And CERT_RDN_TYPE_MASK) > = CERT_RDN_NUMERIC_STRING): End Function
    Public Function GET_CERT_UNICODE_RDN_ERR_INDEX(ByVal x As Long) As Long: Return ((x >> CERT_UNICODE_RDN_ERR_INDEX_SHIFT) And CERT_UNICODE_RDN_ERR_INDEX_MASK): End Function
    Public Function GET_CERT_UNICODE_ATTR_ERR_INDEX(ByVal x As Long) As Long: Return ((x >> CERT_UNICODE_ATTR_ERR_INDEX_SHIFT) And CERT_UNICODE_ATTR_ERR_INDEX_MASK): End Function
    Public Function GET_CERT_UNICODE_VALUE_ERR_INDEX(ByVal x As Long) As Long: Return (x And CERT_UNICODE_VALUE_ERR_INDEX_MASK): End Function
    Public Const CERT_ALT_NAME_ENTRY_ERR_INDEX_MASK  = &HFF
    Public Const CERT_ALT_NAME_ENTRY_ERR_INDEX_SHIFT  = 16
    Public Const CERT_ALT_NAME_VALUE_ERR_INDEX_MASK  = &H0000FFFF
    Public Const CERT_ALT_NAME_VALUE_ERR_INDEX_SHIFT  = 0
    Public Function GET_CERT_ALT_NAME_ENTRY_ERR_INDEX(ByVal x As Long) As Long: Return ((x >> CERT_ALT_NAME_ENTRY_ERR_INDEX_SHIFT) And CERT_ALT_NAME_ENTRY_ERR_INDEX_MASK): End Function
    Public Function GET_CERT_ALT_NAME_VALUE_ERR_INDEX(ByVal x As Long) As Long: Return (x And CERT_ALT_NAME_VALUE_ERR_INDEX_MASK): End Function
    Public Const CRL_DIST_POINT_ERR_INDEX_MASK  = &H7F
    Public Const CRL_DIST_POINT_ERR_INDEX_SHIFT  = 24
    Public Const CRL_DIST_POINT_ERR_CRL_ISSUER_BIT  = &H80000000
    Public Function GET_CRL_DIST_POINT_ERR_INDEX(ByVal x As Long) As Long: Return ((x >> CRL_DIST_POINT_ERR_INDEX_SHIFT) And CRL_DIST_POINT_ERR_INDEX_MASK): End Function
    Public Function IS_CRL_DIST_POINT_ERR_CRL_ISSUER(ByVal x As Long) As Boolean: Return (0 <> (x And CRL_DIST_POINT_ERR_CRL_ISSUER_BIT)): End Function
    Public Const CROSS_CERT_DIST_POINT_ERR_INDEX_MASK  = &HFF
    Public Const CROSS_CERT_DIST_POINT_ERR_INDEX_SHIFT  = 24
    Public Function GET_CROSS_CERT_DIST_POINT_ERR_INDEX(ByVal x As Long) As Long: Return ((x >> CROSS_CERT_DIST_POINT_ERR_INDEX_SHIFT) And CROSS_CERT_DIST_POINT_ERR_INDEX_MASK): End Function
    Public Const CERT_EXCLUDED_SUBTREE_BIT = &H80000000
    Public Function IS_CERT_EXCLUDED_SUBTREE(ByVal x As Long) As Boolean: Return (0 <> (x And CERT_EXCLUDED_SUBTREE_BIT)): End Function
    Public Function IS_SPECIAL_OID_INFO_ALGID(ByVal Algid As ALG_ID) As Boolean: Return (Algid >= CALG_OID_INFO_PARAMETERS): End Function
    Public Function IS_CERT_HASH_PROP_ID(ByVal x As Long) As Boolean: Return (CERT_SHA1_HASH_PROP_ID = (x) Or CERT_MD5_HASH_PROP_ID = (x) Or CERT_SHA256_HASH_PROP_ID = (x) Or CERT_SHA1_SHA256_HASH_PROP_ID = (x) Or CERT_SIGNATURE_HASH_PROP_ID = (x)): End Function
    Public Function IS_PUBKEY_HASH_PROP_ID(ByVal x As Long) As Boolean: Return (CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID = (x) Or CERT_PIN_SHA256_HASH_PROP_ID = (x) Or CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID = (x)): End Function
    Public Function IS_CHAIN_HASH_PROP_ID(ByVal x As Long) As Boolean: Return (CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID = (x) Or CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID = (x) Or CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = (x) Or CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = (x)): End Function
    Public Function IS_STRONG_SIGN_PROP_ID(ByVal x As Long) As Boolean: Return (CERT_SIGN_HASH_CNG_ALG_PROP_ID = (x) Or CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID = (x) Or CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = (x)): End Function
    Public Function CRYPTPROTECT_DEFAULT_PROVIDER() As UUID
    '{df9d8cd0-1501-11d1-8c7a-00c04fc297eb}
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hdf9d8cd0, CInt(&H1501), CInt(&H11d1), &H8c, &H7a, &H00, &Hc0, &H4f, &Hc2, &H97, &Heb)
     CRYPTPROTECT_DEFAULT_PROVIDER = iid
    End Function


    'mssip.h


    Public Enum CryptSIPSubjectUnionChoice
        MSSIP_ADDINFO_NONE = 0
        MSSIP_ADDINFO_FLAT = 1
        MSSIP_ADDINFO_CATMEMBER = 2
        MSSIP_ADDINFO_BLOB = 3
        MSSIP_ADDINFO_DETACHEDSIG = 4
        MSSIP_ADDINFO_NONMSSIP = 500  ' everything < is reserved by MS.
    End Enum
    Public Enum CryptSipSubjectInfoFlags
        MSSIP_FLAGS_PROHIBIT_RESIZE_ON_CREATE = &H00010000
        MSSIP_FLAGS_USE_CATALOG = &H00020000
        MSSIP_FLAGS_MULTI_HASH = &H00040000
        SPC_INC_PE_RESOURCES_FLAG = &H80
        SPC_INC_PE_DEBUG_INFO_FLAG = &H40
        SPC_INC_PE_IMPORT_ADDR_TABLE_FLAG = &H20
        SPC_EXC_PE_PAGE_HASHES_FLAG = &H10
    '  The above SPC_EXC_PE_PAGE_HASHES_FLAG takes precedence if also set.
        SPC_INC_PE_PAGE_HASHES_FLAG = &H100
        SPC_DIGEST_GENERATE_FLAG = &H200
        SPC_DIGEST_SIGN_FLAG = &H400
    '  0x1000 and 0x2000 are used by SIG_APPEND and SIG_SEAL defined in signer.w
        SPC_DIGEST_SIGN_EX_FLAG = &H4000
    '  Define relaxed PE marker check semantic.
        SPC_RELAXED_PE_MARKER_CHECK = &H800
    '  Relaxed marker check flags, encoded as authenticated attribute
    '  SPC_RELAXED_PE_MARKER_CHECK_OBJID(1.3.6.1.4.1.311.2.6.1) of
    '  integer type.
    '  If this flag is set, SIP_INDIRECT_DATA will be skipped for marker check.
        SPC_MARKER_CHECK_SKIP_SIP_INDIRECT_DATA_FLAG = &H00000001
    '  Currently supported skip marker check flags.
        SPC_MARKER_CHECK_CURRENTLY_SUPPORTED_FLAGS = SPC_MARKER_CHECK_SKIP_SIP_INDIRECT_DATA_FLAG
    End Enum
    Public Type SIP_SUBJECTINFO
        cbSize As Long ' set to sizeof(SIP_SUBJECTINFO)
        pgSubjectType As UUID ' subject type
        hFile As LongPtr ' set to File handle that represents the subject
        ' set to INVALID_HANDLE VALUE to allow
        ' SIP to use pwsFileName for persistent
        ' storage types (will handle open/close)
        pwsFileName As LongPtr ' set to file name
        pwsDisplayName As LongPtr ' optional: set to display name of
        ' subject.
        dwReserved1 As Long ' do not use!
        dwIntVersion As Long ' DO NOT SET OR CLEAR THIS.
        ' This member is used by the sip for
        ' passing the internal version number
        ' between the ..get and verify... functions.
        hProv As LongPtr 'HCRYPTPROV
        DigestAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        dwFlags As CryptSipSubjectInfoFlags
        dwEncodingType As Long
        dwReserved2 As Long ' do not use!
        fdwCAPISettings As Long ' setreg settings
        fdwSecuritySettings As Long ' IE security settings
        dwIndex As Long ' message index of last "Get"
        dwUnionChoice As CryptSIPSubjectUnionChoice
        '    union
        '    {
        '        struct MS_ADDINFO_FLAT_             *psFlat;
        '        struct MS_ADDINFO_CATALOGMEMBER_    *psCatMember;
        '       struct MS_ADDINFO_BLOB_             *psBlob;
        '        struct MS_ADDINFO_DETACHEDSIG_      *psDetachedSig;
        '    };
        pUnionStruct As LongPtr
        pClientData As LongPtr ' data pased in from client to SIP
    End Type


    Public Type MS_ADDINFO_FLAT
        cbStruct As Long
        pIndirectData As LongPtr 'struct SIP_INDIRECT_DATA_
    End Type

    Public Type MS_ADDINFO_CATALOGMEMBER
        cbStruct As Long ' = sizeof(MS_ADDINFO_CATALOGMEMBER)
        pStore As LongPtr 'struct CRYPTCATSTORE_ ' defined in mscat.h
        pMember As LongPtr 'struct CRYPTCATMEMBER_ ' defined in mscat.h
    End Type

    Public Type MS_ADDINFO_BLOB
        cbStruct As Long
        cbMemObject As Long
        pbMemObject As LongPtr 'BYTE
        cbMemSignedMsg As Long
        pbMemSignedMsg As LongPtr 'BYTE
    End Type

    Public Type MS_ADDINFO_DETACHEDSIG
        cbStruct As Long
        hSignatureFile As LongPtr
        cbSignatureObject As Long
        pbSignatureObject As LongPtr 'BYTE
    End Type

    Public Type SIP_CAP_SET_V2
        cbSize As Long 'Size of this struct
        dwVersion As Long 'The SIP API version being used, default to 2.
        isMultiSign As BOOL 'Set to 1 to indicate support for multiple sigs
        dwReserved As Long 'Reserved, must be 0
    End Type

    Public Enum CryptSipCapSetVersions
        SIP_CAP_SET_VERSION_2 = 2
        SIP_CAP_SET_VERSION_3 = 3
        SIP_CAP_SET_CUR_VER = 3
    End Enum
    Public Enum CryptSipCapSetFlags
        SIP_CAP_FLAG_SEALING = &H1
    End Enum
    Public Type SIP_CAP_SET_V3
        cbSize As Long 'Size of this struct
        dwVersion As CryptSipCapSetVersions 'The SIP API version being used, default to 2.
        isMultiSign As BOOL 'Set to 1 to indicate support for multiple sigs
        ' union
        ' {
            ' DWORD dwFlags;
            ' DWORD dwReserved;       //Reserved, must be 0
        ' };
        dwFlags As CryptSipCapSetFlags
    End Type

    [Description("WINDOWS 8.1 VERSION")]
    Public Type SIP_CAP_SET
        cbSize As Long 'Size of this struct
        dwVersion As CryptSipCapSetVersions 'The SIP API version being used, default to 2.
        isMultiSign As BOOL 'Set to 1 to indicate support for multiple sigs
        ' union
        ' {
            ' DWORD dwFlags;
            ' DWORD dwReserved;       //Reserved, must be 0
        ' };
        dwFlags As CryptSipCapSetFlags
    End Type

    Public Type SIP_INDIRECT_DATA
        Data As CRYPT_ATTRIBUTE_TYPE_VALUE ' Encoded attribute
        DigestAlgorithm As CRYPT_ALGORITHM_IDENTIFIER ' Digest algorithm used to hash
        Digest As CRYPT_HASH_BLOB ' Hash of subject
    End Type

    Public Type SIP_DISPATCH_INFO
        cbSize As Long ' = sizeof(SIP_DISPATCH_INFO)
        hSIP As LongPtr ' used internal
        pfGet As LongPtr 'pCryptSIPGetSignedDataMsg
        pfPut As LongPtr 'pCryptSIPPutSignedDataMsg
        pfCreate As LongPtr 'pCryptSIPCreateIndirectData
        pfVerify As LongPtr 'pCryptSIPVerifyIndirectData
        pfRemove As LongPtr 'pCryptSIPRemoveSignedDataMsg
    End Type

    Public Type SIP_ADD_NEWPROVIDER
        cbStruct As Long
        pgSubject As UUID
        pwszDLLFileName As LongPtr
        pwszMagicNumber As LongPtr ' optional
        pwszIsFunctionName As LongPtr ' optiona: pfnIsFileSupported
        pwszGetFuncName As LongPtr
        pwszPutFuncName As LongPtr
        pwszCreateFuncName As LongPtr
        pwszVerifyFuncName As LongPtr
        pwszRemoveFuncName As LongPtr
        pwszIsFunctionNameFmt2 As LongPtr ' optiona: pfnIsFileSupported
        '#if (NTDDI_VERSION >= NTDDI_WIN8)
        pwszGetCapFuncName As LongPtr ' optional: CryptSIPGetCaps
        '#endif //#if (NTDDI_VERSION >= NTDDI_WIN8)
    End Type

    Public Const SIP_MAX_MAGIC_NUMBER = 4



    Public Declare PtrSafe Function CryptSIPGetSignedDataMsg Lib "crypt32" (pSubjectInfo As SIP_SUBJECTINFO, pdwEncodingType As CRYPT_CERT_ENCODING_TYPE, ByVal dwIndex As Long, pcbSignedDataMsg As Long, pbSignedDataMsg As Any) As BOOL
    Public Declare PtrSafe Function CryptSIPPutSignedDataMsg Lib "crypt32" (pSubjectInfo As SIP_SUBJECTINFO, ByVal dwEncodingType As CRYPT_CERT_ENCODING_TYPE, pdwIndex As Long, ByVal cbSignedDataMsg As Long, pbSignedDataMsg As Any) As BOOL
    Public Declare PtrSafe Function CryptSIPCreateIndirectData Lib "crypt32" (pSubjectInfo As SIP_SUBJECTINFO, pcbIndirectData As Long, pIndirectData As SIP_INDIRECT_DATA) As BOOL
    Public Declare PtrSafe Function CryptSIPVerifyIndirectData Lib "crypt32" (pSubjectInfo As SIP_SUBJECTINFO, pIndirectData As SIP_INDIRECT_DATA) As BOOL
    Public Declare PtrSafe Function CryptSIPRemoveSignedDataMsg Lib "crypt32" (pSubjectInfo As SIP_SUBJECTINFO, ByVal dwIndex As Long) As BOOL
    Public Declare PtrSafe Function CryptSIPLoad Lib "crypt32" (pgSubjectInfo As UUID, ByVal dwFlags As Long, pSipDispatch As SIP_DISPATCH_INFO) As BOOL
    Public Declare PtrSafe Function CryptSIPRetrieveSubjectGuid Lib "crypt32" (ByVal FileName As LongPtr, ByVal hFileIn As LongPtr, pgSubject As UUID) As BOOL
    Public Declare PtrSafe Function CryptSIPRetrieveSubjectGuidForCatalogFile Lib "crypt32" (ByVal FileName As LongPtr, ByVal hFileIn As LongPtr, pgSubject As UUID) As BOOL
    Public Declare PtrSafe Function CryptSIPAddProvider Lib "crypt32" (psNewProv As SIP_ADD_NEWPROVIDER) As BOOL
    Public Declare PtrSafe Function CryptSIPRemoveProvider Lib "crypt32" (pgProv As UUID) As BOOL
    Public Declare PtrSafe Function CryptSIPGetCaps Lib "crypt32" (pSubjInfo As SIP_SUBJECTINFO, pCaps As SIP_CAP_SET) As BOOL
    Public Declare PtrSafe Function CryptSIPGetSealedDigest Lib "crypt32" (pSubjectInfo As SIP_SUBJECTINFO, pSig As Any, ByVal dwSig As Long, pbDigest As Any, pcbDigest As Long) As BOOL








    #End Region

    #Region "wintrust"
    'wintrust.h


    Public Const WINTRUST_CONFIG_REGPATH  = "Software\Microsoft\Cryptography\Wintrust\Config"
    '  The following are REG_DWORD's. These configuration parameters are used
    '  to limit the number of file bytes mapped at a time. Should be a multiple of
    '  dwAllocationGranularity returned by GetSystemInfo(). This allows
    '  very large files, > 2Gig bytes, to be authenticated signed and verified
    '  using a much smaller virtual memory address range.
    '  The length of the header bytes for a PE, CAB or any file that is
    '  authenticode signed must be less than the following value.
    Public Const WINTRUST_MAX_HEADER_BYTES_TO_MAP_VALUE_NAME  = "MaxHeaderBytesToMap"
    '  0x00A0'0000 (10,485,760) Bytes
    Public Const WINTRUST_MAX_HEADER_BYTES_TO_MAP_DEFAULT  = &H00A00000
    '  If the file size doesn't fit within the above header length, the following
    '  value is used to set the maximum number of remaining file bytes that are
    '  mapped/hashed/unmapped at time.
    Public Const WINTRUST_MAX_HASH_BYTES_TO_MAP_VALUE_NAME  = "MaxHashBytesToMap"
    '  0x0010'0000 (1,048,576) Bytes
    Public Const WINTRUST_MAX_HASH_BYTES_TO_MAP_DEFAULT  = &H00100000



    Public Type WINTRUST_FILE_INFO
        cbStruct As Long ' = sizeof(WINTRUST_FILE_INFO)
        pcwszFilePath As LongPtr ' required, file name to be verified
        hFile As LongPtr ' optional, open handle to pcwszFilePath
        pgKnownSubject As LongPtr 'UUID* ' optional: fill if the subject type is known.
    End Type
    Public Type WINTRUST_DETACHED_SIG_HANDLES
        hContentFile As LongPtr
        hSignatureFile As LongPtr
    End Type
    Public Type WINTRUST_DETACHED_SIG_BLOBS
        cbContentObject As LARGE_INTEGER
        pbContentObject As LongPtr
        cbSignatureObject As Long
        pbSignatureObject As LongPtr
    End Type
    Public Enum WINTRUST_DTSIG_CHOICE
        WINTRUST_DETACHED_SIG_CHOICE_HANDLE = 1
        WINTRUST_DETACHED_SIG_CHOICE_BLOB = 2
    End Enum
    Public Type WINTRUST_DETACHED_SIG_INFO
        cbStruct As Long ' = sizeof(WINTRUST_DETACHEDSIG_INFO)
        dwUnionChoice As WINTRUST_DTSIG_CHOICE
        pDetachedSigStruct As LongPtr
    End Type
    Public Enum WINTRUST_DATA_UICHOICE
        WTD_UI_ALL = 1
        WTD_UI_NONE = 2
        WTD_UI_NOBAD = 3
        WTD_UI_NOGOOD = 4
    End Enum
    Public Enum WINTRUST_DATA_REVCHECK
        WTD_REVOKE_NONE = &H00000000
        WTD_REVOKE_WHOLECHAIN = &H00000001
    End Enum
    Public Enum WINTRUST_DATA_UNIONCHOICE
        WTD_CHOICE_FILE = 1
        WTD_CHOICE_CATALOG = 2
        WTD_CHOICE_BLOB = 3
        WTD_CHOICE_SIGNER = 4
        WTD_CHOICE_CERT = 5
        WTD_CHOICE_DETACHED_SIG = 6
    End Enum
    Public Enum WINTRUST_DATA_STATEACTION
        WTD_STATEACTION_IGNORE = &H00000000
        WTD_STATEACTION_VERIFY = &H00000001
        WTD_STATEACTION_CLOSE = &H00000002
        WTD_STATEACTION_AUTO_CACHE = &H00000003
        WTD_STATEACTION_AUTO_CACHE_FLUSH = &H00000004
    End Enum
    Public Enum WINTRUST_DATA_PROVFLAGS
        WTD_PROV_FLAGS_MASK = &H0000FFFF&
        WTD_USE_IE4_TRUST_FLAG = &H00000001
        WTD_NO_IE4_CHAIN_FLAG = &H00000002
        WTD_NO_POLICY_USAGE_FLAG = &H00000004
        WTD_USE_LOCAL_MACHINE_CERTS = &H00000008
        WTD_REVOCATION_CHECK_NONE = &H00000010
        WTD_REVOCATION_CHECK_END_CERT = &H00000020
        WTD_REVOCATION_CHECK_CHAIN = &H00000040
        WTD_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = &H00000080
        WTD_SAFER_FLAG = &H00000100
        WTD_HASH_ONLY_FLAG = &H00000200
        WTD_USE_DEFAULT_OSVER_CHECK = &H00000400
        WTD_LIFETIME_SIGNING_FLAG = &H00000800
        WTD_CACHE_ONLY_URL_RETRIEVAL = &H00001000  ' affects CRL retrieval and AIA retrieval
        WTD_DISABLE_MD2_MD4 = &H00002000
        WTD_MOTW = &H00004000  ' Mark-Of-The-Web
        WTD_CODE_INTEGRITY_DRIVER_MODE = &H00008000&  ' Code Integrity driver mode
    End Enum
    Public Enum WINTRUST_DATA_UICONTEXT
        WTD_UICONTEXT_EXECUTE = 0
        WTD_UICONTEXT_INSTALL = 1
    End Enum
    [Description("Windows 8+. On Windows 7, set sizeof to exclude LenB(Of LongPtr")]
    Public Type WINTRUST_CATALOG_INFO
        cbStruct As Long ' = sizeof(WINTRUST_CATALOG_INFO)
        dwCatalogVersion As Long ' optional: Catalog version number
        pcwszCatalogFilePath As LongPtr ' required: path/name to Catalog file
        pcwszMemberTag As LongPtr ' optional: tag to member in Catalog
        pcwszMemberFilePath As LongPtr ' required: path/name to member file
        hMemberFile As LongPtr ' optional: open handle to pcwszMemberFilePath
        pbCalculatedFileHash As LongPtr '_Field_size_(cbCalculatedFileHash) BYTE ' optional: pass in the calculated hash
        cbCalculatedFileHash As Long ' optional: pass in the count bytes of the calc hash
        pcCatalogContext As LongPtr 'PCCTL_CONTEXT ' optional: pass in to use instead of CatalogFilePath.
        '#if (NTDDI_VERSION >= NTDDI_WIN8)
        hCatAdmin As LongPtr 'HCATADMIN ' optional for SHA-1 hashes, required for all other hash types.
        '#endif // #if (NTDDI_VERSION >= NTDDI_WIN8)
    End Type
    Public Type WINTRUST_BLOB_INFO
        cbStruct As Long ' = sizeof(WINTRUST_BLOB_INFO)
        gSubject As UUID ' SIP to load
        pcwszDisplayName As LongPtr ' display name of object
        cbMemObject As Long
        pbMemObject As LongPtr
        cbMemSignedMsg As Long
        pbMemSignedMsg As LongPtr
    End Type
    Public Type WINTRUST_SGNR_INFO
        cbStruct As Long ' = sizeof(WINTRUST_SGNR_INFO)
        pcwszDisplayName As LongPtr ' name of the "thing" the pbMem is pointing to.
        psSignerInfo As LongPtr ' CMSG_SIGNER_INFO
        chStores As Long ' number of stores in pahStores
        pahStores As LongPtr 'HCERTSTORE ' array of stores to add to internal list
    End Type
    Public Enum WINTRUST_CERTINFO_FLAGS
        WTCI_DONT_OPEN_STORES = &H00000001  ' only open dummy "root" all other are in pahStores.
        WTCI_OPEN_ONLY_ROOT = &H00000002
        WTCI_USE_LOCAL_MACHINE = &H00000004  ' Local machine context
    End Enum
    Public Type WINTRUST_CERT_INFO
        cbStruct As Long ' = sizeof(WINTRUST_CERT_INFO)
        pcwszDisplayName As LongPtr ' display name
        psCertContext As CERT_CONTEXT
        chStores As Long ' number of stores in pahStores
        pahStores As LongPtr 'HCERTSTORE ' array of stores to add to internal list
        dwFlags As WINTRUST_CERTINFO_FLAGS
        psftVerifyAsOf As LongPtr '*FILETIME ' if not null, each cert will be validated as of this time.
    End Type
    Public Enum WINTRUST_SIG_SETTINGS_FLAGS
        'Verifies the signature specified in WINTRUST_SIGNATURE_SETTINGS.dwIndex
        WSS_VERIFY_SPECIFIC = &H00000001
        'Puts count of secondary signatures in WINTRUST_SIGNATURE_SETTINGS.cSecondarySigs
        WSS_GET_SECONDARY_SIG_COUNT = &H00000002

        '#if (NTDDI_VERSION >= NTDDI_WINBLUE)

        ' Verifies the sealing signature and puts the sealing signer index in
        ' WINTRUST_SIGNATURE_SETTINGS::dwVerifiedSigIndex
        WSS_VERIFY_SEALING = &H00000004

        ' Mask for input flags
        WSS_INPUT_FLAG_MASK = &H00000007

        ' Returns with flag set if the sealing status flags have been set i.e.
        ' if their truth state is valid
        WSS_OUT_SEALING_STATUS_VERIFIED = &H80000000

        ' Returns with flag set if the file has intent-to-seal
        WSS_OUT_HAS_SEALING_INTENT = &H40000000

        ' Returns with flag set if the file format supports sealing
        WSS_OUT_FILE_SUPPORTS_SEAL = &H20000000

        ' Mask for output flags
        WSS_OUTPUT_FLAG_MASK = &He0000000
    End Enum
    Public Type WINTRUST_SIGNATURE_SETTINGS
        cbStruct As Long 'sizeof(WINTRUST_SIGNATURE_SETTINGS)
        dwIndex As Long 'Index of the signature to validate
        dwFlags As WINTRUST_SIG_SETTINGS_FLAGS
        cSecondarySigs As Long 'A count of the secondary signatures
        dwVerifiedSigIndex As Long 'The index of the signature that was verified
        pCryptoPolicy As LongPtr 'PCERT_STRONG_SIGN_PARA 'Crypto policy the signature must pass
    End Type

    Public Type WINTRUST_DATA
        cbStruct As Long
        [Description("optional: used to pass data between the app and policy")]
        pPolicyCallbackData As LongPtr
        [Description(" optional: used to pass data between the app and SIP.")]
        pSIPClientData As LongPtr
        dwUIChoice As WINTRUST_DATA_UICHOICE
        fdwRevocationChecks As WINTRUST_DATA_REVCHECK
        [Description("Struct pointed to by pStruct")]
        dwUnionChoice As WINTRUST_DATA_UNIONCHOICE
        pStruct As LongPtr
    /*
    union
    {
        struct WINTRUST_FILE_INFO_      *pFile;         // individual file
        struct WINTRUST_CATALOG_INFO_   *pCatalog;      // member of a Catalog File
        struct WINTRUST_BLOB_INFO_      *pBlob;         // memory blob
        struct WINTRUST_SGNR_INFO_      *pSgnr;         // signer structure only
        struct WINTRUST_CERT_INFO_      *pCert;
        struct WINTRUST_DETACHED_SIG_INFO_ *pDetachedSig;
    };
    */
        [Description("optional (Catalog File Processing)")]
        dwStateAction As WINTRUST_DATA_STATEACTION
        hWVTStateData As LongPtr
        pwszURLReference As LongPtr
        dwProvFlags As WINTRUST_DATA_PROVFLAGS
        dwUIContext As WINTRUST_DATA_UICONTEXT
        [Description("WINTRUST_SIGNATURE_SETTINGS")]
        pSignatureSettings As LongPtr
    End Type

    Public Const SP_POLICY_PROVIDER_DLL_NAME = "WINTRUST.DLL"
    Public Const SP_INIT_FUNCTION  = "SoftpubInitialize"
    Public Const SP_OBJTRUST_FUNCTION  = "SoftpubLoadMessage"
    Public Const SP_SIGTRUST_FUNCTION  = "SoftpubLoadSignature"
    Public Const SP_CHKCERT_FUNCTION  = "SoftpubCheckCert"
    Public Const SP_FINALPOLICY_FUNCTION  = "SoftpubAuthenticode"
    Public Const SP_CLEANUPPOLICY_FUNCTION  = "SoftpubCleanup"
    Public Const SP_GENERIC_CERT_INIT_FUNCTION = "SoftpubDefCertInit"
    Public Const GENERIC_CHAIN_FINALPOLICY_FUNCTION  = "GenericChainFinalProv"
    Public Const GENERIC_CHAIN_CERTTRUST_FUNCTION  = "GenericChainCertificateTrust"
    Public Const HTTPS_FINALPOLICY_FUNCTION  = "HTTPSFinalProv"
    Public Const HTTPS_CHKCERT_FUNCTION  = "HTTPSCheckCertProv"
    Public Const HTTPS_CERTTRUST_FUNCTION  = "HTTPSCertificateTrust"
    Public Const OFFICE_POLICY_PROVIDER_DLL_NAME  = SP_POLICY_PROVIDER_DLL_NAME
    Public Const OFFICE_INITPROV_FUNCTION  = "OfficeInitializePolicy"
    Public Const OFFICE_CLEANUPPOLICY_FUNCTION  = "OfficeCleanupPolicy"
    Public Const DRIVER_INITPROV_FUNCTION  = "DriverInitializePolicy"
    Public Const DRIVER_FINALPOLPROV_FUNCTION  = "DriverFinalPolicy"
    Public Const DRIVER_CLEANUPPOLICY_FUNCTION  = "DriverCleanupPolicy"

    Public Enum WinTrustRegPolicyFlags
        WTPF_TRUSTTEST = &H00000020  ' trust any "TEST" certificate
        WTPF_TESTCANBEVALID = &H00000080
        WTPF_IGNOREEXPIRATION = &H00000100  ' Use expiration date
        WTPF_IGNOREREVOKATION = &H00000200  ' Do revocation check
        WTPF_OFFLINEOK_IND = &H00000400  ' off-line is ok individual certs
        WTPF_OFFLINEOK_COM = &H00000800  ' off-line is ok commercial certs
        WTPF_OFFLINEOKNBU_IND = &H00001000  ' off-line is ok individual certs, no bad ui
        WTPF_OFFLINEOKNBU_COM = &H00002000  ' off-line is ok commercial certs, no bad ui
        WTPF_VERIFY_V1_OFF = &H00010000  ' turn verify of v1 certs off
        WTPF_IGNOREREVOCATIONONTS = &H00020000  ' ignore TimeStamp revocation checks
        WTPF_ALLOWONLYPERTRUST = &H00040000  ' allow only items in personal trust db.
    End Enum

    Public Enum WinTrustErrorSteps
        TRUSTERROR_STEP_WVTPARAMS = 0
        TRUSTERROR_STEP_FILEIO = 2
        TRUSTERROR_STEP_SIP = 3
        TRUSTERROR_STEP_SIPSUBJINFO = 5
        TRUSTERROR_STEP_CATALOGFILE = 6
        TRUSTERROR_STEP_CERTSTORE = 7
        TRUSTERROR_STEP_MESSAGE = 8
        TRUSTERROR_STEP_MSG_SIGNERCOUNT = 9
        TRUSTERROR_STEP_MSG_INNERCNTTYPE = 10
        TRUSTERROR_STEP_MSG_INNERCNT = 11
        TRUSTERROR_STEP_MSG_STORE = 12
        TRUSTERROR_STEP_MSG_SIGNERINFO = 13
        TRUSTERROR_STEP_MSG_SIGNERCERT = 14
        TRUSTERROR_STEP_MSG_CERTCHAIN = 15
        TRUSTERROR_STEP_MSG_COUNTERSIGINFO = 16
        TRUSTERROR_STEP_MSG_COUNTERSIGCERT = 17
        TRUSTERROR_STEP_VERIFY_MSGHASH = 18
        TRUSTERROR_STEP_VERIFY_MSGINDIRECTDATA = 19
    '   step errors 30 through 37 are reserved for the ending error code for each
    '   entry point in the Trust Model.
        TRUSTERROR_STEP_FINAL_WVTINIT = 30
        TRUSTERROR_STEP_FINAL_INITPROV = 31
        TRUSTERROR_STEP_FINAL_OBJPROV = 32
        TRUSTERROR_STEP_FINAL_SIGPROV = 33
        TRUSTERROR_STEP_FINAL_CERTPROV = 34
        TRUSTERROR_STEP_FINAL_CERTCHKPROV = 35
        TRUSTERROR_STEP_FINAL_POLICYPROV = 36
        TRUSTERROR_STEP_FINAL_UIPROV = 37
        TRUSTERROR_MAX_STEPS = 38
    End Enum

    Public Enum WinTrustProvFlags
        CPD_USE_NT5_CHAIN_FLAG = &H80000000
        CPD_REVOCATION_CHECK_NONE = &H00010000
        CPD_REVOCATION_CHECK_END_CERT = &H00020000
        CPD_REVOCATION_CHECK_CHAIN = &H00040000
        CPD_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = &H00080000
        CPD_RETURN_LOWER_QUALITY_CHAINS = &H00100000
        CPD_RFC3161v21 = &H00200000
    End Enum
    Public Enum WinTrustUIStateFlags
        CPD_UISTATE_MODE_PROMPT = &H00000000
        CPD_UISTATE_MODE_BLOCK = &H00000001
        CPD_UISTATE_MODE_ALLOW = &H00000002
        CPD_UISTATE_MODE_MASK = &H00000003
    End Enum
    Public Enum WincryptProvDataSubjectChoice
        CPD_CHOICE_SIP = 1
    End Enum
    Public Type CRYPT_PROVIDER_DATA
        cbStruct As Long ' = sizeof(TRUST_PROVIDER_DATA) (set in WVT)
        pWintrustData As LongPtr '*WINTRUST_DATA ' NOT verified (set in WVT)
        fOpenedFile As BOOL ' the provider opened the file handle (if applicable)
        hWndParent As LongPtr ' if passed in, else, Desktop hWnd (set in WVT).
        pgActionID As LongPtr '*UUID ' represents the Provider combination (set in WVT).
        hProv As LongPtr 'HCRYPTPROV ' set to NULL to let CryptoAPI to assign.
        dwError As Long ' error if a low-level, system error was encountered
        dwRegSecuritySettings As Long ' ie security settings (set in WVT)
        dwRegPolicySettings As Long ' setreg settings (set in WVT)
        psPfns As LongPtr 'struct _CRYPT_PROVIDER_FUNCTIONS ' set in WVT.
        cdwTrustStepErrors As Long ' set in WVT.
        padwTrustStepErrors As Long ' allocated in WVT.  filled in WVT & Trust Provider
        chStores As Long ' number of stores in pahStores (root set in WVT)
        pahStores As LongPtr 'HCERTSTORE ' array of known stores (root set in WVT) root is ALWAYS #0!!!
        dwEncoding As Long ' message encoding type (set in WVT and Signature Prov)
        hMsg As LongPtr 'HCRYPTMSG ' set in Signature Prov.
        csSigners As Long ' use Add2 and Get functions!
        pasSigners As LongPtr 'struct _CRYPT_PROVIDER_SGNR ' use Add2 and Get functions!
        csProvPrivData As Long ' use Add2 and Get functions!
        pasProvPrivData As LongPtr 'struct _CRYPT_PROVIDER_PRIVDATA ' use Add2 and Get functions!
        dwSubjectChoice As WincryptProvDataSubjectChoice
        pPDSip As LongPtr 'struct _PROVDATA_SIP
        pszUsageOID As LongPtr ' set in Init Provider
        fRecallWithState As BOOL ' state was maintained for Catalog Files.
        sftSystemTime As FILETIME
        pszCTLSignerUsageOID As LongPtr ' char
        ' LOWORD intialized from WINTRUST_DATA's dwProvFlags.
        dwProvFlags As WinTrustProvFlags
        dwFinalError As Long
        pRequestUsage As LongPtr 'PCERT_USAGE_MATCH
        dwTrustPubSettings As Long
        dwUIStateFlags As Long
        '#if (NTDDI_VERSION >= NTDDI_WIN8)
        pSigState As LongPtr 'struct _CRYPT_PROVIDER_SIGSTATE
        pSigSettings As LongPtr 'struct WINTRUST_SIGNATURE_SETTINGS_
        '#endif // (NTDDI_VERSION >= NTDDI_WIN8)
    End Type

    Public Enum WinTrustCryptoPolicySupport
        WSS_OBJTRUST_SUPPORT = &H00000001
        WSS_SIGTRUST_SUPPORT = &H00000002
        WSS_CERTTRUST_SUPPORT = &H00000004
    End Enum
    Public Type CRYPT_PROVIDER_SIGSTATE
        cbStruct As Long
        rhSecondarySigs As LongPtr 'HCRYPTMSG 'Array of handles for secondary signatures
        hPrimarySig As LongPtr 'HCRYPTMSG 'Handle of the primary signature
        fFirstAttemptMade As BOOL 'Has the first attempt to verify a signature been made
        fNoMoreSigs As BOOL 'Are there any more signatures pending verification
        cSecondarySigs As Long 'Count of secondary signatues
        dwCurrentIndex As Long 'Index of current signature being verified
        fSupportMultiSig As BOOL 'Does the policy provider support multiple signatures
        dwCryptoPolicySupport As WinTrustCryptoPolicySupport 'Indicates what porition of a policy provider supports crypto policy
        '#if (NTDDI_VERSION >= NTDDI_WINBLUE)
        iAttemptCount As Long 'Indicates how many times through WVT loop we've gone
        fCheckedSealing As BOOL 'Indicates if the first signature attempted was for a sealing signature
        pSealingSignature As LongPtr 'struct _SEALING_SIGNATURE_ATTRIBUTE ' Contains the sealing signature attribute from the primary signature
        '#endif // (NTDDI_VERSION >= NTDDI_WINBLUE)
    End Type

    Public Type CRYPT_PROVIDER_FUNCTIONS
        cbStruct As Long
        pfnAlloc As LongPtr 'PFN_CPD_MEM_ALLOC ' set in WVT
        pfnFree As LongPtr 'PFN_CPD_MEM_FREE ' set in WVT
        pfnAddStore2Chain As LongPtr 'PFN_CPD_ADD_STORE ' call to add a store to the chain.
        pfnAddSgnr2Chain As LongPtr 'PFN_CPD_ADD_SGNR ' call to add a sgnr struct to a msg struct sgnr chain
        pfnAddCert2Chain As LongPtr 'PFN_CPD_ADD_CERT ' call to add a cert struct to a sgnr struct cert chain
        pfnAddPrivData2Chain As LongPtr 'PFN_CPD_ADD_PRIVDATA ' call to add provider private data to struct.
        pfnInitialize As LongPtr 'PFN_PROVIDER_INIT_CALL ' initialize Policy data.
        pfnObjectTrust As LongPtr 'PFN_PROVIDER_OBJTRUST_CALL ' build info up to the signer info(s).
        pfnSignatureTrust As LongPtr 'PFN_PROVIDER_SIGTRUST_CALL ' build info to the signing cert
        pfnCertificateTrust As LongPtr 'PFN_PROVIDER_CERTTRUST_CALL ' build the chain
        pfnFinalPolicy As LongPtr 'PFN_PROVIDER_FINALPOLICY_CALL ' final call to policy
        pfnCertCheckPolicy As LongPtr 'PFN_PROVIDER_CERTCHKPOLICY_CALL ' check each cert will building chain
        pfnTestFinalPolicy As LongPtr 'PFN_PROVIDER_TESTFINALPOLICY_CALL ' dump structures to a file (or whatever the policy chooses)
        psUIpfns As LongPtr 'struct _CRYPT_PROVUI_FUNCS
        pfnCleanupPolicy As LongPtr 'PFN_PROVIDER_CLEANUP_CALL ' PRIVDATA cleanup routine.
    End Type
    Public Type CRYPT_PROVUI_FUNCS
        cbStruct As Long
        psUIData As LongPtr 'struct _CRYPT_PROVUI_DATA
        pfnOnMoreInfoClick As LongPtr 'PFN_PROVUI_CALL
        pfnOnMoreInfoClickDefault As LongPtr 'PFN_PROVUI_CALL
        pfnOnAdvancedClick As LongPtr 'PFN_PROVUI_CALL
        pfnOnAdvancedClickDefault As LongPtr 'PFN_PROVUI_CALL
    End Type
    Public Type CRYPT_PROVUI_DATA
        cbStruct As Long
        dwFinalError As Long
        pYesButtonText As LongPtr ' default: "&Yes"
        pNoButtonText As LongPtr ' default: "&No"
        pMoreInfoButtonText As LongPtr ' default: "&More Info"
        pAdvancedLinkText As LongPtr ' default: <none>
        ' good: default:
        ' "Do you want to install and run ""%1"" signed on %2 and distributed by:"
        pCopyActionText As LongPtr
        ' good no time stamp: default:
        ' "Do you want to install and run ""%1"" signed on an unknown date/time and distributed by:"
        pCopyActionTextNoTS As LongPtr
        ' bad: default:
        ' "Do you want to install and run ""%1""?"
        pCopyActionTextNotSigned As LongPtr
    End Type

    Public Enum CryptProviderSignerType
        SGNR_TYPE_TIMESTAMP = &H00000010
    End Enum
    Public Type CRYPT_PROVIDER_SGNR
        cbStruct As Long
        sftVerifyAsOf As FILETIME ' either today's filetime or the timestamps
        csCertChain As Long ' use Add2 and Get functions!
        pasCertChain As LongPtr 'struct _CRYPT_PROVIDER_CERT ' use Add2 and Get functions!
        dwSignerType As CryptProviderSignerType ' set if known by policy
        psSigner As LongPtr 'CMSG_SIGNER_INFO* ' must use the pfnAlloc allocator!
        dwError As Long ' error encounted while building/verifying the signer.
        csCounterSigners As Long ' use Add2 and Get functions!
        pasCounterSigners As LongPtr 'struct _CRYPT_PROVIDER_SGNR ' use Add2 and Get functions!
        pChainContext As LongPtr 'PCCERT_CHAIN_CONTEXT
    End Type

    Public Enum WinTrustCertConfidence
        CERT_CONFIDENCE_SIG = &H10000000  ' this cert
        CERT_CONFIDENCE_TIME = &H01000000  ' issuer cert
        CERT_CONFIDENCE_TIMENEST = &H00100000  ' this cert
        CERT_CONFIDENCE_AUTHIDEXT = &H00010000  ' this cert
        CERT_CONFIDENCE_HYGIENE = &H00001000  ' this cert
        CERT_CONFIDENCE_HIGHEST = &H11111000
    End Enum
    Public Type CRYPT_PROVIDER_CERT
        cbStruct As Long
        pCert As LongPtr 'PCCERT_CONTEXT ' must have its own ref-count!
        fCommercial As BOOL
        fTrustedRoot As BOOL ' certchk policy should set this.
        fSelfSigned As BOOL ' set in cert provider
        fTestCert As BOOL ' certchk policy will set
        dwRevokedReason As Long
        dwConfidence As WinTrustCertConfidence ' set in the Certificate Provider
        dwError As Long
        pTrustListContext As LongPtr 'CTL_CONTEXT*
        fTrustListSignerCert As BOOL
        ' The following two are only applicable to Self Signed certificates
        ' residing in a CTL.
        pCtlContext As LongPtr 'PCCTL_CONTEXT
        dwCtlError As Long
        fIsCyclic As BOOL
        pChainElement As LongPtr 'PCERT_CHAIN_ELEMENT
    End Type

    Public Type CRYPT_PROVIDER_PRIVDATA
        cbStruct As Long
        gProviderID As UUID
        cbProvData As Long
        pvProvData As LongPtr
    End Type

    Public Type PROVDATA_SIP
        cbStruct As Long ' = sizeof(PROVDATA_SIP)
        gSubject As UUID ' subject guid of file/member file. (set in Sig Prov)
        pSip As LongPtr 'struct SIP_DISPATCH_INFO_ ' set in Sig Prov - defined in sipbase.h
        pCATSip As LongPtr 'struct SIP_DISPATCH_INFO_ ' set in Sig Prov - defined in sipbase.h
        psSipSubjectInfo As LongPtr 'struct SIP_SUBJECTINFO_ ' set in Sig Prov - defined in sipbase.h
        psSipCATSubjectInfo As LongPtr 'struct SIP_SUBJECTINFO_ ' set in Sig Prov - defined in sipbase.h
        psIndirectData As LongPtr 'struct SIP_INDIRECT_DATA_ ' set in Sig Prov - defined in sipbase.h
    End Type

    Public Const WT_CURRENT_VERSION = &H00000200

    Public Type CRYPT_TRUST_REG_ENTRY
        cbStruct As Long
        pwszDLLName As LongPtr
        pwszFunctionName As LongPtr ' no more than WT_MAX_FUNC_NAME!
    End Type
    Public Type CRYPT_REGISTER_ACTIONID
        cbStruct As Long
        sInitProvider As CRYPT_TRUST_REG_ENTRY
        sObjectProvider As CRYPT_TRUST_REG_ENTRY
        sSignatureProvider As CRYPT_TRUST_REG_ENTRY
        sCertificateProvider As CRYPT_TRUST_REG_ENTRY
        sCertificatePolicyProvider As CRYPT_TRUST_REG_ENTRY
        sFinalPolicyProvider As CRYPT_TRUST_REG_ENTRY
        sTestPolicyProvider As CRYPT_TRUST_REG_ENTRY
        sCleanupProvider As CRYPT_TRUST_REG_ENTRY
    End Type

    Public Type CRYPT_PROVIDER_REGDEFUSAGE
        cbStruct As Long ' = sizeof CRYPT_PROVIDER_REGDEFUSAGE
        pgActionID As LongPtr 'GUID*
        pwszDllName As LongPtr
        pwszLoadCallbackDataFunctionName As LongPtr
        pwszFreeCallbackDataFunctionName As LongPtr
    End Type

    Public Type CRYPT_PROVIDER_DEFUSAGE
        cbStruct As Long ' = sizeof CRYPT_PROVIDER_DEFUSAGE
        gActionID As UUID ' ActionID of provider
        pDefPolicyCallbackData As LongPtr ' normally filled in WINTRUST_DATA
        pDefSIPClientData As LongPtr ' normally filled in WINTRUST_DATA
    End Type

    Public Const WT_PROVIDER_DLL_NAME  = "WINTRUST.DLL"
    Public Const WT_PROVIDER_CERTTRUST_FUNCTION  = "WintrustCertificateTrust"

    Public Enum WinTrustAddActionResultFlags
        WT_ADD_ACTION_ID_RET_RESULT_FLAG = &H1
    End Enum

    Public Enum WinTrustDefUsageAction
        DWACTION_ALLOCANDFILL = 1
        DWACTION_FREE = 2
    End Enum

    Public Const szOID_TRUSTED_CODESIGNING_CA_LIST  = "1.3.6.1.4.1.311.2.2.1"
    Public Const szOID_TRUSTED_CLIENT_AUTH_CA_LIST  = "1.3.6.1.4.1.311.2.2.2"
    Public Const szOID_TRUSTED_SERVER_AUTH_CA_LIST  = "1.3.6.1.4.1.311.2.2.3"
    '   encode/decode OID defines
    Public Const SPC_COMMON_NAME_OBJID  = szOID_COMMON_NAME
    Public Const SPC_TIME_STAMP_REQUEST_OBJID  = "1.3.6.1.4.1.311.3.2.1"
    Public Const SPC_INDIRECT_DATA_OBJID  = "1.3.6.1.4.1.311.2.1.4"
    Public Const SPC_SP_AGENCY_INFO_OBJID  = "1.3.6.1.4.1.311.2.1.10"
    Public Const SPC_STATEMENT_TYPE_OBJID  = "1.3.6.1.4.1.311.2.1.11"
    Public Const SPC_SP_OPUS_INFO_OBJID  = "1.3.6.1.4.1.311.2.1.12"
    Public Const SPC_CERT_EXTENSIONS_OBJID  = "1.3.6.1.4.1.311.2.1.14"
    Public Const SPC_PE_IMAGE_DATA_OBJID  = "1.3.6.1.4.1.311.2.1.15"
    Public Const SPC_RAW_FILE_DATA_OBJID  = "1.3.6.1.4.1.311.2.1.18"
    Public Const SPC_STRUCTURED_STORAGE_DATA_OBJID  = "1.3.6.1.4.1.311.2.1.19"
    Public Const SPC_JAVA_CLASS_DATA_OBJID  = "1.3.6.1.4.1.311.2.1.20"
    Public Const SPC_INDIVIDUAL_SP_KEY_PURPOSE_OBJID  = "1.3.6.1.4.1.311.2.1.21"
    Public Const SPC_COMMERCIAL_SP_KEY_PURPOSE_OBJID  = "1.3.6.1.4.1.311.2.1.22"
    Public Const SPC_CAB_DATA_OBJID  = "1.3.6.1.4.1.311.2.1.25"
    Public Const SPC_GLUE_RDN_OBJID  = "1.3.6.1.4.1.311.2.1.25"  ' obsolete!
    Public Const SPC_MINIMAL_CRITERIA_OBJID  = "1.3.6.1.4.1.311.2.1.26"
    Public Const SPC_FINANCIAL_CRITERIA_OBJID  = "1.3.6.1.4.1.311.2.1.27"
    Public Const SPC_LINK_OBJID  = "1.3.6.1.4.1.311.2.1.28"
    Public Const SPC_SIGINFO_OBJID  = "1.3.6.1.4.1.311.2.1.30"
    '   Page hash versions
    Public Const SPC_PE_IMAGE_PAGE_HASHES_V1_OBJID  = "1.3.6.1.4.1.311.2.3.1"  ' V1
    Public Const SPC_PE_IMAGE_PAGE_HASHES_V2_OBJID  = "1.3.6.1.4.1.311.2.3.2"  ' V2
    ' Indicates the attribute is an octet encoded PKCS7
    Public Const szOID_NESTED_SIGNATURE  = "1.3.6.1.4.1.311.2.4.1"
    Public Const szOID_INTENT_TO_SEAL  = "1.3.6.1.4.1.311.2.4.2"
    Public Const szOID_SEALING_SIGNATURE  = "1.3.6.1.4.1.311.2.4.3"
    Public Const szOID_SEALING_TIMESTAMP  = "1.3.6.1.4.1.311.2.4.4"
    ' Indicates an enhanced hash for a SIP Indirect Data
    Public Const szOID_ENHANCED_HASH  = "1.3.6.1.4.1.311.2.5.1"
    '  For PE Marker uses.
    '  Indicates the PE is subjected to relaxed marker check semantic.
    Public Const SPC_RELAXED_PE_MARKER_CHECK_OBJID  = "1.3.6.1.4.1.311.2.6.1"
    '  Used to ensure marker free encrypted digest can be created.
    Public Const SPC_ENCRYPTED_DIGEST_RETRY_COUNT_OBJID  = "1.3.6.1.4.1.311.2.6.2"
    '  Signed attributes used for adding metadata to signed files
    Public Const szOID_SIGNED_ATTRIBUTE_INTERNAL_NAME  = "1.3.6.1.4.1.311.2.7.1"
    Public Const szOID_SIGNED_ATTRIBUTE_FILE_VERSION  = "1.3.6.1.4.1.311.2.7.2"
    Public Const szOID_SIGNED_ATTRIBUTE_FILE_DESCRIPTION  = "1.3.6.1.4.1.311.2.7.3"
    Public Const szOID_SIGNED_ATTRIBUTE_PRODUCT  = "1.3.6.1.4.1.311.2.7.4"
    Public Const szOID_SIGNED_ATTRIBUTE_PRODUCT_VERSION  = "1.3.6.1.4.1.311.2.7.5"
    Public Const szOID_SIGNED_ATTRIBUTE_ORIGINAL_FILENAME  = "1.3.6.1.4.1.311.2.7.6"
    Public Const szOID_SIGNED_ATTRIBUTE_LANGUAGE  = "1.3.6.1.4.1.311.2.7.7"
    Public Const szOID_SIGNED_ATTRIBUTE_AUTHOR  = "1.3.6.1.4.1.311.2.7.8"
    Public Const szOID_SIGNED_ATTRIBUTE_PUBLISH_TIME  = "1.3.6.1.4.1.311.2.7.9"
    Public Const szOID_SIGNED_ATTRIBUTE_SOURCE_URL  = "1.3.6.1.4.1.311.2.7.10"
    ' Indicates a PKCS9 sequence number as an attribute
    Public Const szOID_PKCS_9_SEQUENCE_NUMBER  = "1.2.840.113549.1.9.25.4"
    '   Catalog entries
    Public Const CAT_NAMEVALUE_OBJID  = "1.3.6.1.4.1.311.12.2.1"
    Public Const CAT_MEMBERINFO_OBJID  = "1.3.6.1.4.1.311.12.2.2"
    Public Const CAT_MEMBERINFO2_OBJID  = "1.3.6.1.4.1.311.12.2.3"
    '  Biometric entries
    Public Const SPC_WINDOWS_HELLO_COMPATIBILITY_OBJID  = "1.3.6.1.4.1.311.10.41.1"
    '  Natural Auth entries
    Public Const SPC_NATURAL_AUTH_PLUGIN_OBJID  = "1.3.6.1.4.1.311.96.1.1"
    '   encode/decode internal defines
    Public Const SPC_SP_AGENCY_INFO_STRUCT  = (2000)
    Public Const SPC_MINIMAL_CRITERIA_STRUCT  = (2001)
    Public Const SPC_FINANCIAL_CRITERIA_STRUCT  = (2002)
    Public Const SPC_INDIRECT_DATA_CONTENT_STRUCT  = (2003)
    Public Const SPC_PE_IMAGE_DATA_STRUCT  = (2004)
    Public Const SPC_LINK_STRUCT  = (2005)
    Public Const SPC_STATEMENT_TYPE_STRUCT  = (2006)
    Public Const SPC_SP_OPUS_INFO_STRUCT  = (2007)
    Public Const SPC_CAB_DATA_STRUCT  = (2008)
    Public Const SPC_JAVA_CLASS_DATA_STRUCT  = (2009)
    Public Const INTENT_TO_SEAL_ATTRIBUTE_STRUCT  = (2010)
    Public Const SEALING_SIGNATURE_ATTRIBUTE_STRUCT  = (2011)
    Public Const SEALING_TIMESTAMP_ATTRIBUTE_STRUCT  = (2012)
    Public Const SPC_SIGINFO_STRUCT  = (2130)
    Public Const CAT_NAMEVALUE_STRUCT  = (2221)
    Public Const CAT_MEMBERINFO_STRUCT  = (2222)
    Public Const CAT_MEMBERINFO2_STRUCT  = (2223)

    'todo: not sure about byte order going into UUID
    ' #define SpcSerializedObjectAttributesClassId    {0xA6, 0xB5, 0x86, 0xD5, \
    ' 0xB4, 0xA1, 0x24, 0x66, \
    ' 0xAE, 0x05, 0xA2, 0x17, \
    ' 0xDA, 0x8E, 0x60, 0xD6}
    Public Type SPC_SERIALIZED_OBJECT
        ClassId(15) As Byte 'SPC_UUID
        SerializedData As CRYPT_DATA_BLOB
    End Type

    Public Type SPC_SIGINFO_
        dwSipVersion As Long
        gSIPGuid As UUID
        dwReserved1 As Long
        dwReserved2 As Long
        dwReserved3 As Long
        dwReserved4 As Long
        dwReserved5 As Long
    End Type

    Public Enum WinTrustSpcLinkChoice
        SPC_URL_LINK_CHOICE = 1
        SPC_MONIKER_LINK_CHOICE = 2
        SPC_FILE_LINK_CHOICE = 3
    End Enum
    Public Type SPC_LINK_
        dwLinkChoice As WinTrustSpcLinkChoice
        '    union
        '    {
        '        LPWSTR                  pwszUrl;
        '        SPC_SERIALIZED_OBJECT   Moniker;
        '        LPWSTR                  pwszFile;
        '    };
        #If Win64 Then
            u(31) As Byte
        #Else
            u(23) As Byte
        #End If
    End Type

    Public Type SPC_PE_IMAGE_DATA
        Flags As CRYPT_BIT_BLOB
        pFile As LongPtr 'PSPC_LINK
    End Type

    Public Type SPC_INDIRECT_DATA_CONTENT
        Data As CRYPT_ATTRIBUTE_TYPE_VALUE
        DigestAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        Digest As CRYPT_HASH_BLOB
    End Type

    Public Type SPC_FINANCIAL_CRITERIA
        fFinancialInfoAvailable As BOOL
        fMeetsCriteria As BOOL
    End Type

    Public Type SPC_IMAGE
        pImageLink As LongPtr 'struct SPC_LINK_
        Bitmap As CRYPT_DATA_BLOB
        Metafile As CRYPT_DATA_BLOB
        EnhancedMetafile As CRYPT_DATA_BLOB
        GifFile As CRYPT_DATA_BLOB
    End Type

    Public Type SPC_SP_AGENCY_INFO
        pPolicyInformation As LongPtr 'struct SPC_LINK_
        pwszPolicyDisplayText As LongPtr
        pLogoImage As LongPtr 'PSPC_IMAGE
        pLogoLink As LongPtr 'struct SPC_LINK_
    End Type

    Public Type SPC_STATEMENT_TYPE
        cKeyPurposeId As Long
        rgpszKeyPurposeId As LongPtr 'LPSTR* ' pszObjId
    End Type

    Public Type SPC_SP_OPUS_INFO
        pwszProgramName As LongPtr
        pMoreInfo As LongPtr 'struct SPC_LINK_
        pPublisherInfo As LongPtr 'struct SPC_LINK_
    End Type

    Public Type CAT_NAMEVALUE
        pwszTag As LongPtr
        fdwFlags As Long
        Value As CRYPT_DATA_BLOB
    End Type

    Public Type CAT_MEMBERINFO
        pwszSubjGuid As LongPtr
        dwCertVersion As Long
    End Type

    Public Type CAT_MEMBERINFO2
        SubjectGuid As UUID
        dwCertVersion As Long
    End Type

    Public Type INTENT_TO_SEAL_ATTRIBUTE
        version As Long
        seal As Byte
    End Type

    Public Type SEALING_SIGNATURE_ATTRIBUTE
        version As Long
        signerIndex As Long
        signatureAlgorithm As CRYPT_ALGORITHM_IDENTIFIER
        encryptedDigest As CRYPT_DIGEST_BLOB
    End Type

    Public Type SEALING_TIMESTAMP_ATTRIBUTE
        version As Long
        signerIndex As Long
        sealTimeStampToken As CRYPT_DATA_BLOB
    End Type

    Public Enum CERT_SECTION_TYPE
        CERT_PE_IMAGE_DIGEST_DEBUG_INFO = &H01
        CERT_PE_IMAGE_DIGEST_RESOURCES = &H02
        CERT_PE_IMAGE_DIGEST_ALL_IMPORT_INFO = &H04
        CERT_PE_IMAGE_DIGEST_NON_PE_INFO = &H08  ' include data outside the PE image
        CERT_SECTION_TYPE_ANY = &HFF  ' Any Certificate type
    End Enum

    Public Enum WIN_CERT_REVISION
        WIN_CERT_REVISION_1_0 = (&H0100)
        WIN_CERT_REVISION_2_0 = (&H0200)
    End Enum
    Public Enum WIN_CERT_TYPE
        WIN_CERT_TYPE_X509 = (&H0001)  ' bCertificate contains an X.509 Certificate
        WIN_CERT_TYPE_PKCS_SIGNED_DATA = (&H0002)  ' bCertificate contains a PKCS SignedData structure
        WIN_CERT_TYPE_RESERVED_1 = (&H0003)  ' Reserved
        WIN_CERT_TYPE_TS_STACK_SIGNED = (&H0004)  ' Terminal Server Protocol Stack Certificate signing
    End Enum

    [Description("THIS IS A HEADER ONLY: THIS MUST BE FOLLOWED IN MEMORY BY THE CERT DATA. THE ACTUAL DEFINITION HAS AN UNSUPPORT C-STYLE ARRAY FOR THIS.")]
    Public Type WIN_CERTIFICATE
        dwLength As Long
        wRevision As Integer
        wCertificateType As Integer ' WIN_CERT_TYPE_xxx
    End Type


    Public Type WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT
        hClientToken As LongPtr
        SubjectType As LongPtr 'UUID*
        Subject As LongPtr 'WIN_TRUST_SUBJECT
    End Type
    Public Type WIN_TRUST_ACTDATA_SUBJECT_ONLY
        SubjectType As LongPtr 'UUID*
        Subject As LongPtr 'WIN_TRUST_SUBJECT
    End Type

    Public Type WIN_TRUST_SUBJECT_FILE
        hFile As LongPtr
        lpPath As LongPtr
    End Type

    Public Type WIN_TRUST_SUBJECT_FILE_AND_DISPLAY
        hFile As LongPtr ' handle to the open file if you got it
        lpPath As LongPtr ' the path to open if you don't
        lpDisplayName As LongPtr ' (optional) display name to show to user
    End Type

    Public Type WIN_SPUB_TRUSTED_PUBLISHER_DATA
        hClientToken As LongPtr
        lpCertificate As LongPtr 'LPWIN_CERTIFICATE
    End Type

    Public Enum WinTrustD8DialogFlags
        WT_TRUSTDBDIALOG_NO_UI_FLAG = &H00000001
        WT_TRUSTDBDIALOG_ONLY_PUB_TAB_FLAG = &H00000002
        WT_TRUSTDBDIALOG_WRITE_LEGACY_REG_FLAG = &H00000100
        WT_TRUSTDBDIALOG_WRITE_IEAK_STORE_FLAG = &H00000200
    End Enum


    Public DeclareWide PtrSafe Function WinVerifyTrust Lib "wintrust" (ByVal hwnd As LongPtr, pgActionId As UUID, pWVTData As Any) As Long
    Public Declare PtrSafe Function WinVerifyTrustEx Lib "wintrust" (ByVal hwnd As LongPtr, pgActionId As UUID, pWVTData As WINTRUST_DATA) As Long
    Public Declare PtrSafe Sub WintrustGetRegPolicyFlags Lib "wintrust" (pdwPolicyFlags As WinTrustRegPolicyFlags)
    Public Declare PtrSafe Function WintrustSetRegPolicyFlags Lib "wintrust" (ByVal dwPolicyFlags As WinTrustRegPolicyFlags) As BOOL
    Public Declare PtrSafe Function WintrustAddActionID Lib "wintrust" (pgActionID As UUID, fdwFlags As WinTrustAddActionResultFlags, psProvInfo As CRYPT_REGISTER_ACTIONID) As BOOL
    Public Declare PtrSafe Function WintrustRemoveActionID Lib "wintrust" (pgActionID As UUID) As BOOL
    Public Declare PtrSafe Function WintrustLoadFunctionPointers Lib "wintrust" (pgActionID As UUID, pPfns As CRYPT_PROVIDER_FUNCTIONS) As BOOL
    Public Declare PtrSafe Function WintrustAddDefaultForUsage Lib "wintrust" (ByVal pszUsageOID As LongPtr, psDefUsage As CRYPT_PROVIDER_REGDEFUSAGE) As BOOL
    Public Declare PtrSafe Function WintrustGetDefaultForUsage Lib "wintrust" (ByVal dwAction As WinTrustDefUsageAction, ByVal pszUsageOID As LongPtr, psUsage As CRYPT_PROVIDER_DEFUSAGE) As LongPtr
    Public Declare PtrSafe Function WTHelperGetProvSignerFromChain Lib "wintrust" (pProvData As CRYPT_PROVIDER_DATA, ByVal idxSigner As Long, ByVal fCounterSigner As BOOL, ByVal idxCounterSigner As Long) As LongPtr
    Public Declare PtrSafe Function WTHelperGetProvCertFromChain Lib "wintrust" (pSgnr As CRYPT_PROVIDER_SGNR, ByVal idxCert As Long) As LongPtr
    Public Declare PtrSafe Function WTHelperProvDataFromStateData Lib "wintrust" (ByVal hStateData As LongPtr) As LongPtr
    Public Declare PtrSafe Function WTHelperGetProvPrivateDataFromChain Lib "wintrust" (pProvData As CRYPT_PROVIDER_DATA, pgProviderID As UUID) As LongPtr
    Public Declare PtrSafe Function WTHelperCertIsSelfSigned Lib "wintrust" (ByVal dwEncoding As CRYPT_CERT_ENCODING_TYPE, pCert As CERT_INFO) As BOOL
    Public Declare PtrSafe Function WTHelperCertCheckValidSignature Lib "wintrust" (pProvData As CRYPT_PROVIDER_DATA) As Long
    Public Declare PtrSafe Function OpenPersonalTrustDBDialogEx Lib "wintrust" (ByVal hwndParent As LongPtr, ByVal dwFlags As WinTrustD8DialogFlags, Optional ByVal pvReserved As LongPtr) As BOOL
    Public Declare PtrSafe Function OpenPersonalTrustDBDialog Lib "wintrust" (ByVal hwndParent As LongPtr) As BOOL
    Public Declare PtrSafe Sub WintrustSetDefaultIncludePEPageHashes Lib "wintrust" (ByVal fIncludePEPageHashes As BOOL)

    Public Function WIN_TRUST_SUBJTYPE_RAW_FILE() As UUID
    '{959dc450-8d9e-11cf-8736-00aa00a485eb}
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H959dc450, CInt(&H8d9e), CInt(&H11cf), &H87, &H36, &H00, &Haa, &H00, &Ha4, &H85, &Heb)
     WIN_TRUST_SUBJTYPE_RAW_FILE = iid
    End Function
    Public Function WIN_TRUST_SUBJTYPE_PE_IMAGE() As UUID
    '{43c9a1e0-8da0-11cf-8736-00aa00a485eb}
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H43c9a1e0, CInt(&H8da0), CInt(&H11cf), &H87, &H36, &H00, &Haa, &H00, &Ha4, &H85, &Heb)
     WIN_TRUST_SUBJTYPE_PE_IMAGE = iid
    End Function
    Public Function WIN_TRUST_SUBJTYPE_JAVA_CLASS() As UUID
    '{08ad3990-8da1-11cf-8736-00aa00a485eb}
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H08ad3990, CInt(&H8da1), CInt(&H11cf), &H87, &H36, &H00, &Haa, &H00, &Ha4, &H85, &Heb)
     WIN_TRUST_SUBJTYPE_JAVA_CLASS = iid
    End Function
    Public Function WIN_TRUST_SUBJTYPE_CABINET() As UUID
    '{d17c5374-a392-11cf-9df5-00aa00c184e0}
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hd17c5374, CInt(&Ha392), CInt(&H11cf), &H9d, &Hf5, &H00, &Haa, &H00, &Hc1, &H84, &He0)
     WIN_TRUST_SUBJTYPE_CABINET = iid
    End Function

    Public Function WIN_TRUST_SUBJTYPE_RAW_FILEEX() As UUID
    '{6f458110-c2f1-11cf-8a69-00aa006c3706}
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6f458110, CInt(&Hc2f1), CInt(&H11cf), &H8a, &H69, &H00, &Haa, &H00, &H6c, &H37, &H06)
     WIN_TRUST_SUBJTYPE_RAW_FILEEX = iid
    End Function
    Public Function WIN_TRUST_SUBJTYPE_PE_IMAGEEX() As UUID
    '{6f458111-c2f1-11cf-8a69-00aa006c3706}
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6f458111, CInt(&Hc2f1), CInt(&H11cf), &H8a, &H69, &H00, &Haa, &H00, &H6c, &H37, &H06)
     WIN_TRUST_SUBJTYPE_PE_IMAGEEX = iid
    End Function
    Public Function WIN_TRUST_SUBJTYPE_JAVA_CLASSEX() As UUID
    '{6f458113-c2f1-11cf-8a69-00aa006c3706}
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6f458113, CInt(&Hc2f1), CInt(&H11cf), &H8a, &H69, &H00, &Haa, &H00, &H6c, &H37, &H06)
     WIN_TRUST_SUBJTYPE_JAVA_CLASSEX = iid
    End Function
    Public Function WIN_TRUST_SUBJTYPE_CABINETEX() As UUID
    '{6f458114-c2f1-11cf-8a69-00aa006c3706}
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6f458114, CInt(&Hc2f1), CInt(&H11cf), &H8a, &H69, &H00, &Haa, &H00, &H6c, &H37, &H06)
     WIN_TRUST_SUBJTYPE_CABINETEX = iid
    End Function

    Public Function WIN_TRUST_SUBJTYPE_OLE_STORAGE() As UUID
    '{c257e740-8da0-11cf-8736-00aa00a485eb}
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc257e740, CInt(&H8da0), CInt(&H11cf), &H87, &H36, &H00, &Haa, &H00, &Ha4, &H85, &Heb)
     WIN_TRUST_SUBJTYPE_OLE_STORAGE = iid
    End Function
    Public Function WIN_SPUB_ACTION_TRUSTED_PUBLISHER() As UUID
    '{66426730-8da1-11cf-8736-00aa00a485eb}
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H66426730, CInt(&H8da1), CInt(&H11cf), &H87, &H36, &H00, &Haa, &H00, &Ha4, &H85, &Heb)
     WIN_SPUB_ACTION_TRUSTED_PUBLISHER = iid
    End Function
    Public Function WIN_SPUB_ACTION_NT_ACTIVATE_IMAGE() As UUID
    '{8bc96b00-8da1-11cf-8736-00aa00a485eb}
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8bc96b00, CInt(&H8da1), CInt(&H11cf), &H87, &H36, &H00, &Haa, &H00, &Ha4, &H85, &Heb)
     WIN_SPUB_ACTION_NT_ACTIVATE_IMAGE = iid
    End Function
    Public Function WIN_SPUB_ACTION_PUBLISHED_SOFTWARE() As UUID
    '{64b9d180-8da2-11cf-8736-00aa00a485eb}
    Static iid As UUID
     If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H64b9d180, CInt(&H8da2), CInt(&H11cf), &H87, &H36, &H00, &Haa, &H00, &Ha4, &H85, &Heb)
     WIN_SPUB_ACTION_PUBLISHED_SOFTWARE = iid
    End Function

    
    'mscat.h
    
    Public Const szOID_CATALOG_LIST  = "1.3.6.1.4.1.311.12.1.1"
    Public Const szOID_CATALOG_LIST_MEMBER  = "1.3.6.1.4.1.311.12.1.2"
    Public Const szOID_CATALOG_LIST_MEMBER2  = "1.3.6.1.4.1.311.12.1.3"
    Public Const CRYPTCAT_FILEEXT  = "CAT"
    
    
    [Description("IMPORTANT! For Windows 10 Redstone 1 and newer only. For earlier, use CRYPTCAT_MAX_MEMBERTAG_OLD")]
    Public Const CRYPTCAT_MAX_MEMBERTAG = 128
    [Description("IMPORTANT! For Windows 10 Redstone 1 and newer, use CRYPTCAT_MAX_MEMBERTAG instead!")]
    Public Const CRYPTCAT_MAX_MEMBERTAG_OLD = 64
    
    
    Public Enum CryptCatVersions
        CRYPTCAT_VERSION_1 = &H100
        CRYPTCAT_VERSION_2 = &H200
    End Enum
    
    Public Enum CryptCatOpenFlags
        CRYPTCAT_OPEN_CREATENEW = &H00000001  ' creates/overwrites
        CRYPTCAT_OPEN_ALWAYS = &H00000002  ' opens/creates
        CRYPTCAT_OPEN_EXISTING = &H00000004  ' opens only
        CRYPTCAT_OPEN_EXCLUDE_PAGE_HASHES = &H00010000  ' Exclude page hashes in SPC_INDIRECT_DATA
    '  The above CRYPTCAT_OPEN_EXCLUDE_PAGE_HASHES takes precedence if also set.
        CRYPTCAT_OPEN_INCLUDE_PAGE_HASHES = &H00020000  ' Include page hashes in SPC_INDIRECT_DATA
        CRYPTCAT_OPEN_VERIFYSIGHASH = &H10000000  ' verifies the signature (not the certs!)
        CRYPTCAT_OPEN_NO_CONTENT_HCRYPTMSG = &H20000000  ' does CryptMsgDecode without content
        CRYPTCAT_OPEN_SORTED = &H40000000  ' does CertCreateContext(CERT_CREATE_CONTEXT_SORTED_FLAG)
        CRYPTCAT_OPEN_FLAGS_MASK = &Hffff0000  ' mask for upper word
    End Enum
    
    Public Enum CryptCatMemberFlags
        CRYPTCAT_MEMBER_SORTED = &H40000000
     End Enum

     Public Enum CryptCatAttrTypeAndAction
         CRYPTCAT_ATTR_AUTHENTICATED = &H10000000
         CRYPTCAT_ATTR_UNAUTHENTICATED = &H20000000
         CRYPTCAT_ATTR_NAMEASCII = &H00000001  ' ascii string
         CRYPTCAT_ATTR_NAMEOBJID = &H00000002  ' crypt obj id
         CRYPTCAT_ATTR_DATAASCII = &H00010000  ' do not decode simple ascii chars
         CRYPTCAT_ATTR_DATABASE64 = &H00020000  ' base 64
         CRYPTCAT_ATTR_DATAREPLACE = &H00040000  ' this data is a replacment for an existing attr
     ' #if (NTDDI_VERSION >= NTDDI_WIN10_RS1)
         CRYPTCAT_ATTR_NO_AUTO_COMPAT_ENTRY = &H01000000
     End Enum
     
     Public Enum CryptCatLocalErrors
         CRYPTCAT_E_AREA_HEADER = &H00000000
         CRYPTCAT_E_AREA_MEMBER = &H00010000
         CRYPTCAT_E_AREA_ATTRIBUTE = &H00020000
         CRYPTCAT_E_CDF_UNSUPPORTED = &H00000001
         CRYPTCAT_E_CDF_DUPLICATE = &H00000002
         CRYPTCAT_E_CDF_TAGNOTFOUND = &H00000004
         CRYPTCAT_E_CDF_MEMBER_FILE_PATH = &H00010001
         CRYPTCAT_E_CDF_MEMBER_INDIRECTDATA = &H00010002
         CRYPTCAT_E_CDF_MEMBER_FILENOTFOUND = &H00010004
         CRYPTCAT_E_CDF_BAD_GUID_CONV = &H00020001
         CRYPTCAT_E_CDF_ATTR_TOOFEWVALUES = &H00020002
         CRYPTCAT_E_CDF_ATTR_TYPECOMBO = &H00020004
     End Enum
     
     Public Enum CryptCatAddCatFlags
         CRYPTCAT_ADDCATALOG_NONE = &H00000000
         CRYPTCAT_ADDCATALOG_HARDLINK = &H00000001
     End Enum
     
     Public Type CRYPTCATSTORE
         cbStruct As Long ' = sizeof(CRYPTCATSTORE)
         dwPublicVersion As CryptCatVersions
         pwszP7File As LongPtr
         hProv As LongPtr 'HCRYPTPROV
         dwEncodingType As CRYPT_CERT_ENCODING_TYPE
         fdwStoreFlags As CryptCatOpenFlags
         hReserved As LongPtr ' pStack(members) (null if init/pbData) INTERNAL!
         hAttrs As LongPtr ' pStack(Catalog attrs) INTERNAL!
         ' Following is only set if opened with CRYPTCAT_OPEN_NO_CONTENT_HCRYPTMSG
         hCryptMsg As LongPtr 'HCRYPTMSG
         ' Following is only set if opened with CRYPTCAT_OPEN_SORTED
         hSorted As LongPtr ' INTERNAL ONLY!
     End Type
     
     Public Type CRYPTCATMEMBER
         cbStruct As Long ' = sizeof(CRYPTCATMEMBER)
         pwszReferenceTag As LongPtr
         pwszFileName As LongPtr ' used only by the CDF APIs
         gSubjectType As UUID ' may be zeros -- see sEncodedMemberInfo
         fdwMemberFlags As CryptCatMemberFlags
         pIndirectData As LongPtr 'struct SIP_INDIRECT_DATA_ ' may be null -- see sEncodedIndirectData
         dwCertVersion As Long ' may be zero -- see sEncodedMemberInfo
         dwReserved As Long ' used by enum -- DO NOT USE!
         hReserved As LongPtr ' pStack(attrs) (null if init) INTERNAL!
         sEncodedIndirectData As CRYPT_ATTR_BLOB ' lazy decode
         sEncodedMemberInfo As CRYPT_ATTR_BLOB ' lazy decode
     End Type
     
     
     Public Type CRYPTCATATTRIBUTE
         cbStruct As Long ' = sizeof(CRYPTCATATTRIBUTE)
         pwszReferenceTag As LongPtr
         dwAttrTypeAndAction As CryptCatAttrTypeAndAction
         cbValue As Long
         pbValue As LongPtr 'PBYTE ' encoded CAT_NAMEVALUE struct
         dwReserved As Long ' used by enum -- DO NOT USE!
     End Type
     
     Public Type CRYPTCATCDF
         cbStruct As Long ' = sizeof(CRYPTCATCDF)
         hFile As LongPtr
         dwCurFilePos As Long
         dwLastMemberOffset As Long
         fEOF As BOOL
         pwszResultDir As LongPtr
         hCATStore As LongPtr
     End Type
     
     Public Type CATALOG_INFO
         cbStruct As Long ' set to sizeof(CATALOG_INFO)
         wszCatalogFile(0 To (MAX_PATH - 1)) As Integer
     End Type
     
     Public DeclareWide PtrSafe Function CryptCATOpen Lib "wintrust" (ByVal pwszFileName As String, ByVal fdwOpenFlags As CryptCatOpenFlags, Optional ByVal hProv As LongPtr, Optional ByVal dwPublicVersion As CryptCatVersions, Optional ByVal dwEncodingType As CRYPT_CERT_ENCODING_TYPE) As LongPtr
     Public Declare PtrSafe Sub CryptCATSetCreatePageHashesFlag Lib "wintrust" (ByVal hCatalog As LongPtr, ByVal newCreatePageHashesFlag As BOOL)
     Public Declare PtrSafe Function CryptCATClose Lib "wintrust" (ByVal hCatalog As LongPtr) As BOOL
     Public Declare PtrSafe Function CryptCATStoreFromHandle Lib "wintrust" (ByVal hCatalog As LongPtr) As LongPtr
     Public Declare PtrSafe Function CryptCATHandleFromStore Lib "wintrust" (pCatStore As CRYPTCATSTORE) As LongPtr
     Public Declare PtrSafe Function CryptCATPersistStore Lib "wintrust" (ByVal hCatalog As LongPtr) As BOOL
     Public DeclareWide PtrSafe Function CryptCATGetCatAttrInfo Lib "wintrust" (ByVal hCatalog As LongPtr, ByVal pwszReferenceTag As String) As LongPtr
     Public DeclareWide PtrSafe Function CryptCATPutCatAttrInfo Lib "wintrust" (ByVal hCatalog As LongPtr, ByVal pwszReferenceTag As String, ByVal cbData As Long, pData As Any) As LongPtr
     Public Declare PtrSafe Function CryptCATEnumerateCatAttr Lib "wintrust" (ByVal hCatalog As LongPtr, pPrevAttr As CRYPTCATATTRIBUTE) As LongPtr
     Public DeclareWide PtrSafe Function CryptCATGetMemberInfo Lib "wintrust" (ByVal hCatalog As LongPtr, ByVal pwszReferenceTag As String) As LongPtr
     Public DeclareWide PtrSafe Function CryptCATAllocSortedMemberInfo Lib "wintrust" (ByVal hCatalog As LongPtr, ByVal pwszReferenceTag As String) As LongPtr
     Public Declare PtrSafe Sub CryptCATFreeSortedMemberInfo Lib "wintrust" (ByVal hCatalog As LongPtr, pCatMember As CRYPTCATMEMBER)
     Public DeclareWide PtrSafe Function CryptCATGetAttrInfo Lib "wintrust" (ByVal hCatalog As LongPtr, pCatMember As CRYPTCATMEMBER, ByVal pwszReferenceTag As String) As LongPtr
     Public DeclareWide PtrSafe Function CryptCATPutMemberInfo Lib "wintrust" (ByVal hCatalog As LongPtr, ByVal pwszFileName As String, ByVal pwszReferenceTag As String, pgSubjectType As UUID, ByVal dwCertVersion As Long, ByVal cbSIPIndirectData As Long, pbSIPIndirectData As Any) As LongPtr
     Public DeclareWide PtrSafe Function CryptCATPutAttrInfo Lib "wintrust" (ByVal hCatalog As LongPtr, pCatMember As CRYPTCATMEMBER, ByVal pwszReferenceTag As String, ByVal dwAttrTypeAndAction As CryptCatAttrTypeAndAction, ByVal cbData As Long, pbData As Any) As LongPtr
     Public Declare PtrSafe Function CryptCATEnumerateMember Lib "wintrust" (ByVal hCatalog As LongPtr, pPrevMember As CRYPTCATMEMBER) As LongPtr
     Public Declare PtrSafe Function CryptCATEnumerateAttr Lib "wintrust" (ByVal hCatalog As LongPtr, pCatMember As CRYPTCATMEMBER, pPrevAttr As CRYPTCATATTRIBUTE) As LongPtr
     Public DeclareWide PtrSafe Function CryptCATCDFOpen Lib "wintrust" (ByVal pwszFilePath As String, Optional ByVal pfnParseError As LongPtr) As LongPtr
     Public Declare PtrSafe Function CryptCATCDFClose Lib "wintrust" (pCDF As CRYPTCATCDF) As BOOL
     Public Declare PtrSafe Function CryptCATCDFEnumCatAttributes Lib "wintrust" (pCDF As CRYPTCATCDF, pPrevAttr As CRYPTCATATTRIBUTE, ByVal pfnParseError As LongPtr) As LongPtr
     Public Declare PtrSafe Function CryptCATCDFEnumMembers Lib "wintrust" (pCDF As CRYPTCATCDF, pPrevMember As CRYPTCATMEMBER, Optional ByVal pfnParseError As LongPtr) As LongPtr
     Public Declare PtrSafe Function CryptCATCDFEnumAttributes Lib "wintrust" (pCDF As CRYPTCATCDF, pCatMember As CRYPTCATMEMBER, pPrevAttr As CRYPTCATATTRIBUTE, Optional ByVal pfnParseError As LongPtr) As LongPtr
     Public DeclareWide PtrSafe Function IsCatalogFile Lib "wintrust" (ByVal hFile As LongPtr, ByVal pwszFileName As String) As BOOL
     Public Declare PtrSafe Function CryptCATAdminAcquireContext Lib "wintrust" (phCatAdmin As LongPtr, pgSubsystem As UUID, ByVal dwFlags As Long) As BOOL
     Public DeclareWide PtrSafe Function CryptCATAdminAcquireContext2 Lib "wintrust" (phCatAdmin As LongPtr, pgSubsystem As UUID, ByVal pwszHashAlgorithm As String, pStrongHashPolicy As CERT_STRONG_SIGN_PARA, ByVal dwFlags As Long) As BOOL
     Public Declare PtrSafe Function CryptCATAdminReleaseContext Lib "wintrust" (ByVal hCatAdmin As LongPtr, ByVal dwFlags As Long) As BOOL
     Public Declare PtrSafe Function CryptCATAdminReleaseCatalogContext Lib "wintrust" (ByVal hCatAdmin As LongPtr, ByVal hCatInfo As LongPtr, ByVal dwFlags As Long) As BOOL
     Public Declare PtrSafe Function CryptCATAdminEnumCatalogFromHash Lib "wintrust" (ByVal hCatAdmin As LongPtr, pbHash As Any, ByVal cbHash As Long, ByVal dwFlags As Long, phPrevCatInfo As LongPtr) As LongPtr
     Public Declare PtrSafe Function CryptCATAdminCalcHashFromFileHandle Lib "wintrust" (ByVal hFile As LongPtr, pcbHash As Long, pbHash As Any, ByVal dwFlags As Long) As BOOL
     Public Declare PtrSafe Function CryptCATAdminCalcHashFromFileHandle2 Lib "wintrust" (ByVal hCatAdmin As LongPtr, ByVal hFile As LongPtr, pcbHash As Long, pbHash As Any, ByVal dwFlags As Long) As BOOL
     Public DeclareWide PtrSafe Function CryptCATAdminAddCatalog Lib "wintrust" (ByVal hCatAdmin As LongPtr, ByVal pwszCatalogFile As String, ByVal pwszSelectBaseName As String, ByVal dwFlags As CryptCatAddCatFlags) As LongPtr
     Public DeclareWide PtrSafe Function CryptCATAdminRemoveCatalog Lib "wintrust" (ByVal hCatAdmin As LongPtr, ByVal pwszCatalogFile As String, ByVal dwFlags As Long) As BOOL
     Public Declare PtrSafe Function CryptCATCatalogInfoFromContext Lib "wintrust" (ByVal hCatInfo As LongPtr, psCatInfo As CATALOG_INFO, ByVal dwFlags As Long) As BOOL
     Public DeclareWide PtrSafe Function CryptCATAdminResolveCatalogPath Lib "wintrust" (ByVal hCatAdmin As LongPtr, ByVal pwszCatalogFile As String, psCatInfo As CATALOG_INFO, ByVal dwFlags As Long) As BOOL
     Public Declare PtrSafe Function CryptCATAdminPauseServiceForBackup Lib "wintrust" (ByVal dwFlags As Long, ByVal fResume As BOOL) As BOOL
     
    #End Region


    #Region "cryptui"
    'cryptuiapi.h - 100% coverage

    Public Const CERT_CREDENTIAL_PROVIDER_ID = -509

    Public Enum CertDontUseColFlags
        CRYPTUI_SELECT_ISSUEDTO_COLUMN = &H000000001
        CRYPTUI_SELECT_ISSUEDBY_COLUMN = &H000000002
        CRYPTUI_SELECT_INTENDEDUSE_COLUMN = &H000000004
        CRYPTUI_SELECT_FRIENDLYNAME_COLUMN = &H000000008
        CRYPTUI_SELECT_LOCATION_COLUMN = &H000000010
        CRYPTUI_SELECT_EXPIRATION_COLUMN = &H000000020
    End Enum

    Public Type CERT_SELECTUI_INPUT
        hStore As LongPtr 'HCERTSTORE
        prgpChain As LongPtr 'PCCERT_CHAIN_CONTEXT 
        cChain As Long
    End Type

    Public Enum CryptUICertMgrFlags
        CRYPTUI_CERT_MGR_TAB_MASK = &H0000000F
        CRYPTUI_CERT_MGR_PUBLISHER_TAB = &H00000004
        CRYPTUI_CERT_MGR_SINGLE_TAB_FLAG = &H00008000&
    End Enum

    Public Type CRYPTUI_CERT_MGR_STRUCT
        dwSize As Long
        hwndParent As LongPtr
        dwFlags As CryptUICertMgrFlags
        pwszTitle As LongPtr
        pszInitUsageOID As LongPtr 'LPCSTR
    End Type

    Public Type CRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO
        dwSize As Long
        pGuidSubject As LongPtr '*UUID
        cbBlob As Long
        pbBlob As LongPtr
        pwszDisplayName As LongPtr
    End Type

    Public Type CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO
        dwSize As Long
        cCertStore As Long
        rghCertStore As LongPtr '*HCERTSTORE
        pFilterCallback As LongPtr 'PFNCFILTERPROC
        pvCallbackData As LongPtr 'void*
    End Type

    Public Enum CertPvkProvChoice
        CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE = &H01
        CRYPTUI_WIZ_DIGITAL_SIGN_PVK_PROV = &H02
    End Enum
    Public Type CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO
        dwSize As Long
        pwszPvkFileName As LongPtr
        pwszProvName As LongPtr
        dwProvType As CertPvkProvChoice
    End Type

    Public Type CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO
        dwSize As Long
        pwszSigningCertFileName As LongPtr
        dwPvkChoice As Long
        '    union
        '    {
        '        PCCRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO  pPvkFileInfo;
        '        PCRYPT_KEY_PROV_INFO                      pPvkProvInfo;
        '    };
        pPvkFileOrProvInfo As LongPtr
    End Type

    Public Enum CryptUIDigitalSignAttrs
        CRYPTUI_WIZ_DIGITAL_SIGN_COMMERCIAL = &H0001
        CRYPTUI_WIZ_DIGITAL_SIGN_INDIVIDUAL = &H0002
    End Enum
    Public Type CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO
        dwSize As Long
        dwAttrFlags As CryptUIDigitalSignAttrs
        pwszDescription As LongPtr
        pwszMoreInfoLocation As LongPtr
        pszHashAlg As LongPtr 'LPCSTR
        pwszSigningCertDisplayString As LongPtr
        hAdditionalCertStore As LongPtr 'HCERTSTORE
        psAuthenticated As LongPtr 'PCRYPT_ATTRIBUTES
        psUnauthenticated As LongPtr 'PCRYPT_ATTRIBUTES
    End Type

    Public Enum CryptUISignInfoSubject
        CRYPTUI_WIZ_DIGITAL_SIGN_SUBJECT_FILE = &H01
        CRYPTUI_WIZ_DIGITAL_SIGN_SUBJECT_BLOB = &H02
    End Enum
    Public Enum CryptUISignCertChoices
        CRYPTUI_WIZ_DIGITAL_SIGN_CERT = &H01
        CRYPTUI_WIZ_DIGITAL_SIGN_STORE = &H02
        CRYPTUI_WIZ_DIGITAL_SIGN_PVK = &H03
    End Enum
    Public Enum CryptUIAddCertChoices
        CRYPTUI_WIZ_DIGITAL_SIGN_ADD_CHAIN = &H00000001
        CRYPTUI_WIZ_DIGITAL_SIGN_ADD_CHAIN_NO_ROOT = &H00000002
    End Enum

    ' typedef struct _CRYPTUI_WIZ_DIGITAL_SIGN_INFO
    ' {
        ' DWORD                                           dwSize;            
        ' DWORD                                           dwSubjectChoice;    
        ' union
        ' {
            ' LPCWSTR                                     pwszFileName;    
            ' PCCRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO        pSignBlobInfo;    
        ' };
        ' DWORD                                           dwSigningCertChoice;
        ' union
        ' {
            ' PCCERT_CONTEXT                              pSigningCertContext;
            ' PCCRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO       pSigningCertStore;
            ' PCCRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO    pSigningCertPvkInfo;
        ' };
        ' LPCWSTR                                         pwszTimestampURL;
        ' DWORD                                           dwAdditionalCertChoice;
        ' PCCRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO        pSignExtInfo;
    ' } CRYPTUI_WIZ_DIGITAL_SIGN_INFO,
    Public Type CRYPTUI_WIZ_DIGITAL_SIGN_INFO
        dwSize As Long
        dwSubjectChoice As CryptUISignInfoSubject
        FilenameOrSignBlobInfo As LongPtr
        dwSigningCertChoice As CryptUISignCertChoices
        pSigningCertContextStorePvkInfo As LongPtr
        pwszTimestampURL As LongPtr
        dwAdditionalCertChoice As CryptUIAddCertChoices
        pSignExtInfo As LongPtr 'PCCRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO
    End Type

    Public Type CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT
        dwSize As Long
        cbBlob As Long
        pbBlob As LongPtr
    End Type

    Public Enum CryptUIWizDigitialSignFlags
        CRYPTUI_WIZ_NO_UI = &H0001
        CRYPTUI_WIZ_DIGITAL_SIGN_EXCLUDE_PAGE_HASHES = &H0002
    '  The above CRYPTUI_WIZ_DIGITAL_SIGN_EXCLUDE_PAGE_HASHES takes precedence if
    '  also set.
        CRYPTUI_WIZ_DIGITAL_SIGN_INCLUDE_PAGE_HASHES = &H0004
    End Enum

    Public Enum CryptUIViewCertFlags
        CRYPTUI_HIDE_HIERARCHYPAGE = &H00000001
        CRYPTUI_HIDE_DETAILPAGE = &H00000002
        CRYPTUI_DISABLE_EDITPROPERTIES = &H00000004
        CRYPTUI_ENABLE_EDITPROPERTIES = &H00000008
        CRYPTUI_DISABLE_ADDTOSTORE = &H00000010
        CRYPTUI_ENABLE_ADDTOSTORE = &H00000020
        CRYPTUI_ACCEPT_DECLINE_STYLE = &H00000040
        CRYPTUI_IGNORE_UNTRUSTED_ROOT = &H00000080
        CRYPTUI_DONT_OPEN_STORES = &H00000100
        CRYPTUI_ONLY_OPEN_ROOT_STORE = &H00000200
        CRYPTUI_WARN_UNTRUSTED_ROOT = &H00000400  ' For use with viewing of certificates on remote
    '  machines only.  If this flag is used rghStores[0]
    '  must be the handle of the root store on the remote machine.
        CRYPTUI_ENABLE_REVOCATION_CHECKING = &H00000800  ' This flag is only valid if pCryptProviderData/hWVTStateData
    '  is not passed in.
        CRYPTUI_WARN_REMOTE_TRUST = &H00001000
        CRYPTUI_DISABLE_EXPORT = &H00002000  ' If this flag is set, then the "Copy to file" button will be
    '  disabled on the Detail page.
    '  Revocation flags is only valid if pCryptProviderData/hWVTStateData is not passed in.
        CRYPTUI_ENABLE_REVOCATION_CHECK_END_CERT = &H00004000
        CRYPTUI_ENABLE_REVOCATION_CHECK_CHAIN = &H00008000&
        CRYPTUI_ENABLE_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = CRYPTUI_ENABLE_REVOCATION_CHECKING  ' Changed the default behavior
    '  to not check root.
        CRYPTUI_DISABLE_HTMLLINK = &H00010000  ' to disable helplink in viewing certificate
        CRYPTUI_DISABLE_ISSUERSTATEMENT = &H00020000  ' to disable issuer statement button
        CRYPTUI_CACHE_ONLY_URL_RETRIEVAL = &H00040000  ' to disable online revocation checking
    End Enum

    Public Type CRYPTUI_INITDIALOG_STRUCT
        lParam As LongPtr
        pCertContext As LongPtr 'PCCERT_CONTEXT
    End Type
    Public Type CRYPTUI_VIEWCERTIFICATE_STRUCTW
        dwSize As Long
        hwndParent As LongPtr ' OPTIONAL
        dwFlags As CryptUIViewCertFlags ' OPTIONAL
        szTitle As LongPtr ' OPTIONAL
        pCertContext As LongPtr 'PCCERT_CONTEXT
        rgszPurposes As LongPtr 'LPCSTR*  ' OPTIONAL
        cPurposes As Long ' OPTIONAL
        ' union
        ' {
            ' CRYPT_PROVIDER_DATA const * pCryptProviderData;         // OPTIONAL
            ' HANDLE                      hWVTStateData;              // OPTIONAL
        ' };
        CryptProvOrWVTStateData As LongPtr
        fpCryptProviderDataTrustedUsage As BOOL ' OPTIONAL
        idxSigner As Long ' OPTIONAL
        idxCert As Long ' OPTIONAL
        fCounterSigner As BOOL ' OPTIONAL
        idxCounterSigner As Long ' OPTIONAL
        cStores As Long ' OPTIONAL
        rghStores As LongPtr 'HCERTSTORE*  ' OPTIONAL
        cPropSheetPages As Long ' OPTIONAL
        rgPropSheetPages As LongPtr 'LPCPROPSHEETPAGEW ' OPTIONAL
        nStartPage As Long
    End Type
    Public Type CRYPTUI_VIEWCERTIFICATE_STRUCTA
        dwSize As Long
        hwndParent As LongPtr ' OPTIONAL
        dwFlags As CryptUIViewCertFlags ' OPTIONAL
        szTitle As LongPtr ' OPTIONAL
        pCertContext As LongPtr 'PCCERT_CONTEXT
        rgszPurposes As LongPtr 'LPCSTR*  ' OPTIONAL
        cPurposes As Long ' OPTIONAL
        ' union
        ' {
            ' CRYPT_PROVIDER_DATA const * pCryptProviderData;         // OPTIONAL
            ' HANDLE                      hWVTStateData;              // OPTIONAL
        ' };
        CryptProvOrWVTStateData As LongPtr
        fpCryptProviderDataTrustedUsage As BOOL ' OPTIONAL
        idxSigner As Long ' OPTIONAL
        idxCert As Long ' OPTIONAL
        fCounterSigner As BOOL ' OPTIONAL
        idxCounterSigner As Long ' OPTIONAL
        cStores As Long ' OPTIONAL
        rghStores As LongPtr 'HCERTSTORE*  ' OPTIONAL
        cPropSheetPages As Long ' OPTIONAL
        rgPropSheetPages As LongPtr 'LPCPROPSHEETPAGEA ' OPTIONAL
        nStartPage As Long
    End Type
    Public Type CRYPTUI_VIEWCERTIFICATE_STRUCT
        dwSize As Long
        hwndParent As LongPtr ' OPTIONAL
        dwFlags As CryptUIViewCertFlags ' OPTIONAL
        szTitle As LongPtr ' OPTIONAL
        pCertContext As LongPtr 'PCCERT_CONTEXT
        rgszPurposes As LongPtr 'LPCSTR*  ' OPTIONAL
        cPurposes As Long ' OPTIONAL
        ' union
        ' {
            ' CRYPT_PROVIDER_DATA const * pCryptProviderData;         // OPTIONAL
            ' HANDLE                      hWVTStateData;              // OPTIONAL
        ' };
        CryptProvOrWVTStateData As LongPtr
        fpCryptProviderDataTrustedUsage As BOOL ' OPTIONAL
        idxSigner As Long ' OPTIONAL
        idxCert As Long ' OPTIONAL
        fCounterSigner As BOOL ' OPTIONAL
        idxCounterSigner As Long ' OPTIONAL
        cStores As Long ' OPTIONAL
        rghStores As LongPtr 'HCERTSTORE*  ' OPTIONAL
        cPropSheetPages As Long ' OPTIONAL
        rgPropSheetPages As LongPtr 'LPCPROPSHEETPAGEW ' OPTIONAL
        nStartPage As Long
    End Type

    Public Enum CryptUIWizExportSubject
        CRYPTUI_WIZ_EXPORT_CERT_CONTEXT = 1
        CRYPTUI_WIZ_EXPORT_CTL_CONTEXT = 2
        CRYPTUI_WIZ_EXPORT_CRL_CONTEXT = 3
        CRYPTUI_WIZ_EXPORT_CERT_STORE = 4
        CRYPTUI_WIZ_EXPORT_CERT_STORE_CERTIFICATES_ONLY = 5
        CRYPTUI_WIZ_EXPORT_FORMAT_CRL = 6
        CRYPTUI_WIZ_EXPORT_FORMAT_CTL = 7
    End Enum
    Public Type CRYPTUI_WIZ_EXPORT_INFO
        dwSize As Long 'Required: should be set to sizeof(CRYPTUI_WIZ_EXPORT_INFO)
        pwszExportFileName As LongPtr 'Required if the CRYPTUI_WIZ_NO_UI flag is set, Optional otherwise.
                                        'The fully qualified file name to export to, if this is
                                        'non-NULL and the CRYPTUI_WIZ_NO_UI flag is NOT set, then it is
                                        'displayed to the user as the default file name
        dwSubjectChoice As CryptUIWizExportSubject 'Required:    indicate the type of the subject:
                                        '          If can one of the following:
                                        '          CRYPTUI_WIZ_EXPORT_CERT_CONTEXT
                                        '          CRYPTUI_WIZ_EXPORT_CTL_CONTEXT
                                        '          CRYPTUI_WIZ_EXPORT_CRL_CONTEXT
                                        '          CRYPTUI_WIZ_EXPORT_CERT_STORE
                                        '            CRYPTUI_WIZ_EXPORT_CERT_STORE_CERTIFICATES_ONLY
        '    union
        '    {
        '    PCCERT_CONTEXT      pCertContext;
        '        PCCTL_CONTEXT       pCTLContext;
        '        PCCRL_CONTEXT       pCRLContext;
        '        HCERTSTORE          hCertStore;
        '    };
        ContextOrCertStore As LongPtr
        cStores As Long ' Optional: count of extra stores to search for the certs in the
            '           trust chain if the chain is being exported with a cert.
            '           this is ignored if dwSubjectChoice is anything other
            '           than CRYPTUI_WIZ_EXPORT_CERT_CONTEXT
        rghStores As LongPtr 'HCERTSTORE*  ' Optional: array of extra stores to search for the certs in the
                                '           trust chain if the chain is being exported with a cert.
                                '           this is ignored if dwSubjectChoice is anything other
                                '           than CRYPTUI_WIZ_EXPORT_CERT_CONTEXT
    End Type

    Public Enum CryptUIWizExportFormat
        CRYPTUI_WIZ_EXPORT_FORMAT_DER = 1
        CRYPTUI_WIZ_EXPORT_FORMAT_PFX = 2
        CRYPTUI_WIZ_EXPORT_FORMAT_PKCS7 = 3
        CRYPTUI_WIZ_EXPORT_FORMAT_BASE64 = 4
        CRYPTUI_WIZ_EXPORT_FORMAT_SERIALIZED_CERT_STORE = 5  ' NOTE: not currently supported!!
    End Enum
    Public Type CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO
        dwSize As Long 'Required: should be set to sizeof(CRYPTUI_WIZ_EXPORT_NOUI_INFO)
        dwExportFormat As CryptUIWizExportFormat 'Required:
        fExportChain As BOOL 'Required
        fExportPrivateKeys As BOOL 'Required
        pwszPassword As LongPtr 'Required if the fExportPrivateKeys boolean is TRUE, otherwise, it is ignored
        fStrongEncryption As BOOL 'Required if dwExportFormat is CRYPTUI_WIZ_EXPORT_FORMAT_PFX
                                  'Note that if this flag is TRUE then the PFX blob produced is NOT compatible with IE4.
    End Type

    Public Enum CryptUIExtraExportFlags
        CRYPTUI_WIZ_IGNORE_NO_UI_FLAG_FOR_CSPS = &H0002
        CRYPTUI_WIZ_NO_UI_EXCEPT_CSP = &H0003
        CRYPTUI_WIZ_EXPORT_PRIVATE_KEY = &H0100
        CRYPTUI_WIZ_EXPORT_NO_DELETE_PRIVATE_KEY = &H0200
    End Enum

    Public Enum CryptUIWizImportSubject
        CRYPTUI_WIZ_IMPORT_SUBJECT_FILE = 1
        CRYPTUI_WIZ_IMPORT_SUBJECT_CERT_CONTEXT = 2
        CRYPTUI_WIZ_IMPORT_SUBJECT_CTL_CONTEXT = 3
        CRYPTUI_WIZ_IMPORT_SUBJECT_CRL_CONTEXT = 4
        CRYPTUI_WIZ_IMPORT_SUBJECT_CERT_STORE = 5
    End Enum
    Public Type CRYPTUI_WIZ_IMPORT_SRC_INFO
        dwSize As Long 'Required: should be set to sizeof(IMPORT_SUBJECT_INFO)
        dwSubjectChoice As CryptUIWizImportSubject 'Required:    indicate the type of the subject:
        '    union
        '    {
        '        LPCWSTR              pwszFileName;
        '        PCCERT_CONTEXT      pCertContext;
        '        PCCTL_CONTEXT       pCTLContext;
        '        PCCRL_CONTEXT       pCRLContext;
        '        HCERTSTORE          hCertStore;
        '    };
        FilenameContextOrCertstore As LongPtr
        /* [ TypeHint(Crypt_AC_Flags, CryptKeyFlags) ] */ dwFlags As Crypt_AC_Flags 'Required if pwszFileName contains a PFX BLOB.
        'Ignored otherwise
        'This is the same flag for PFXImportCertStore
        pwszPassword As LongPtr 'Required if pwszFileName contains a PFX BLOB.
        'ignored otherwise
    End Type

    Public Enum CryptUIWizImportFlags
        CRYPTUI_WIZ_IMPORT_NO_CHANGE_DEST_STORE = &H00010000
    ' Allow importing certificate
        CRYPTUI_WIZ_IMPORT_ALLOW_CERT = &H00020000
    ' Allow importing certificate revocation list
        CRYPTUI_WIZ_IMPORT_ALLOW_CRL = &H00040000
    ' Allow importing certificate trust list
        CRYPTUI_WIZ_IMPORT_ALLOW_CTL = &H00080000
    ' import contents to local machine (currently only applicable for PFX imports)
        CRYPTUI_WIZ_IMPORT_TO_LOCALMACHINE = &H00100000
    ' import contents to current user (currently only applicable for PFX imports)
        CRYPTUI_WIZ_IMPORT_TO_CURRENTUSER = &H00200000
    ' if the hDesCertStore is a remote store handle, this flag should be set
        CRYPTUI_WIZ_IMPORT_REMOTE_DEST_STORE = &H00400000
    End Enum


    Public DeclareWide PtrSafe Function CryptUIDlgViewContext Lib "cryptui" (ByVal dwContextType As CertContextTypes, pvContext As CERT_CONTEXT, ByVal hwnd As LongPtr, ByVal pwszTitle As String, ByVal dwFlags As Long, ByVal pvReserved As LongPtr) As BOOL
    Public DeclareWide PtrSafe Function CryptUIDlgSelectCertificateFromStore Lib "cryptui" (ByVal hCertStore As LongPtr, ByVal hwnd As LongPtr, ByVal pwszTitle As String, ByVal pwszDisplayString As String, ByVal dwDontUseColumn As CertDontUseColFlags, ByVal dwFlags As Long, ByVal pvReserved As LongPtr) As LongPtr
    Public Declare PtrSafe Function CertSelectionGetSerializedBlob Lib "cryptui" (pcsi As CERT_SELECTUI_INPUT, ppOutBuffer As LongPtr, pulOutBufferSize As Long) As Long
    Public Declare PtrSafe Function CryptUIDlgCertMgr Lib "cryptui" (pCryptUICertMgr As CRYPTUI_CERT_MGR_STRUCT) As BOOL
    Public DeclareWide PtrSafe Function CryptUIWizDigitalSign Lib "cryptui" (ByVal dwFlags As CryptUIWizDigitialSignFlags, ByVal hwndParent As LongPtr, ByVal pwszWizardTitle As String, pDigitalSignInfo As CRYPTUI_WIZ_DIGITAL_SIGN_INFO, ppSignContext As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptUIWizFreeDigitalSignContext Lib "cryptui" (ByVal pSignContext As LongPtr) As BOOL
    Public Declare PtrSafe Function CryptUIDlgViewCertificateA Lib "cryptui" (pCertViewInfo As CRYPTUI_VIEWCERTIFICATE_STRUCTA, pfPropertiesChanged As BOOL) As BOOL
    Public Declare PtrSafe Function CryptUIDlgViewCertificateW Lib "cryptui" (pCertViewInfo As CRYPTUI_VIEWCERTIFICATE_STRUCTW, pfPropertiesChanged As BOOL) As BOOL
    Public DeclareWide PtrSafe Function CryptUIDlgViewCertificate Lib "cryptui" Alias "CryptUIDlgViewCertificateW" (pCertViewInfo As CRYPTUI_VIEWCERTIFICATE_STRUCT, pfPropertiesChanged As BOOL) As BOOL
    Public DeclareWide PtrSafe Function CryptUIWizExport Lib "cryptui" ([TypeHint(CryptUIWizDigitialSignFlags, CryptUIExtraExportFlags)] ByVal dwFlags As Long, ByVal hwndParent As LongPtr, ByVal pwszWizardTitle As String, pExportInfo As CRYPTUI_WIZ_EXPORT_INFO, pvoid As Any) As BOOL
    Public DeclareWide PtrSafe Function CryptUIWizImport Lib "cryptui" ([TypeHint(CryptUIWizDigitialSignFlags, CryptUIWizImportFlags)] ByVal dwFlags As Long, ByVal hwndParent As LongPtr, ByVal pwszWizardTitle As String, pImportSource As CRYPTUI_WIZ_IMPORT_SRC_INFO, Optional ByVal hDestCertStore As LongPtr) As BOOL




    #End Region

    #Region "bcrypt"
    'bcrypt.h, 100% coverage

    Public Const BCRYPT_OBJECT_ALIGNMENT = 16

    Public Const BCRYPT_KDF_HASH  = "HASH"
    Public Const BCRYPT_KDF_HMAC  = "HMAC"
    Public Const BCRYPT_KDF_TLS_PRF  = "TLS_PRF"
    ' #if (NTDDI_VERSION >= NTDDI_WIN7)
    Public Const BCRYPT_KDF_SP80056A_CONCAT  = "SP800_56A_CONCAT"
    ' #endif
    ' #if (NTDDI_VERSION >= NTDDI_WINBLUE)
    Public Const BCRYPT_KDF_RAW_SECRET  = "TRUNCATE"
    ' #endif
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_RS4)
    Public Const BCRYPT_KDF_HKDF  = "HKDF"

    Public Enum BCryptKdfBufferTypes
        KDF_HASH_ALGORITHM = &H0
        KDF_SECRET_PREPEND = &H1
        KDF_SECRET_APPEND = &H2
        KDF_HMAC_KEY = &H3
        KDF_TLS_PRF_LABEL = &H4
        KDF_TLS_PRF_SEED = &H5
        KDF_SECRET_HANDLE = &H6
    ' #if (NTDDI_VERSION >= NTDDI_WIN7)
        KDF_TLS_PRF_PROTOCOL = &H7
        KDF_ALGORITHMID = &H8
        KDF_PARTYUINFO = &H9
        KDF_PARTYVINFO = &HA
        KDF_SUPPPUBINFO = &HB
        KDF_SUPPPRIVINFO = &HC
    ' #endif
    ' #if (NTDDI_VERSION >= NTDDI_WIN8)
        KDF_LABEL = &HD
        KDF_CONTEXT = &HE
        KDF_SALT = &HF
        KDF_ITERATION_COUNT = &H10
        KDF_GENERIC_PARAMETER = &H11
        KDF_KEYBITLENGTH = &H12
        KDF_HKDF_SALT = &H13  ' This is used only for testing purposes
        KDF_HKDF_INFO = &H14
    End Enum


    Public Enum BCryptDeriveKeyFlags
        KDF_USE_SECRET_AS_HMAC_KEY_FLAG = &H1
    End Enum

    Public Type BCRYPT_KEY_LENGTHS_STRUCT
        dwMinLength As Long
        dwMaxLength As Long
        dwIncrement As Long
    End Type
    'Alias BCRYPT_AUTH_TAG_LENGTHS_STRUCT As BCRYPT_KEY_LENGTHS_STRUCT
    Public Type BCRYPT_AUTH_TAG_LENGTHS_STRUCT
        dwMinLength As Long
        dwMaxLength As Long
        dwIncrement As Long
    End Type

    Public Type BCRYPT_OID
        cbOID As Long
        pbOID As LongPtr 'PUCHAR
    End Type
    Public Type BCRYPT_OID_LIST
        dwOIDCount As Long
        pOIDs As LongPtr '*BCRYPT_OID
    End Type

    Public Type BCRYPT_PKCS1_PADDING_INFO
        pszAlgId As LongPtr
    End Type
    Public Type BCRYPT_PSS_PADDING_INFO
        pszAlgId As LongPtr
        cbSalt As Long
    End Type
    Public Type BCRYPT_OAEP_PADDING_INFO
        pszAlgId As LongPtr
        pbLabel As LongPtr 'PUCHAR
        cbLabel As Long
    End Type

    Public Enum BCryptAuthCipherModeVers
        BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_VERSION = 1
    End Enum
    Public Enum BCRYPT_AUTH_CIPHER_MODE_FLAGS
        BCRYPT_AUTH_MODE_CHAIN_CALLS_FLAG = &H00000001
        BCRYPT_AUTH_MODE_IN_PROGRESS_FLAG = &H00000002
    End Enum
    Public Type BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO
        cbSize As Long
        dwInfoVersion As Long
        pbNonce As LongPtr
        cbNonce As Long
        pbAuthData As LongPtr
        cbAuthData As Long
        pbTag As LongPtr
        cbTag As Long
        pbMacContext As LongPtr
        cbMacContext As Long
        cbAAD As Long
        cbData As LongLong
        dwFlags As BCRYPT_AUTH_CIPHER_MODE_FLAGS
    End Type

    Public Const BCRYPT_OPAQUE_KEY_BLOB = "OpaqueKeyBlob"
    Public Const BCRYPT_KEY_DATA_BLOB = "KeyDataBlob"
    Public Const BCRYPT_AES_WRAP_KEY_BLOB = "Rfc3565KeyWrapBlob"
    Public Const BCRYPT_OBJECT_LENGTH = "ObjectLength"
    Public Const BCRYPT_ALGORITHM_NAME = "AlgorithmName"
    Public Const BCRYPT_PROVIDER_HANDLE = "ProviderHandle"
    Public Const BCRYPT_CHAINING_MODE = "ChainingMode"
    Public Const BCRYPT_BLOCK_LENGTH = "BlockLength"
    Public Const BCRYPT_KEY_LENGTH = "KeyLength"
    Public Const BCRYPT_KEY_OBJECT_LENGTH = "KeyObjectLength"
    Public Const BCRYPT_KEY_STRENGTH = "KeyStrength"
    Public Const BCRYPT_KEY_LENGTHS = "KeyLengths"
    Public Const BCRYPT_BLOCK_SIZE_LIST = "BlockSizeList"
    Public Const BCRYPT_EFFECTIVE_KEY_LENGTH = "EffectiveKeyLength"
    Public Const BCRYPT_HASH_LENGTH = "HashDigestLength"
    Public Const BCRYPT_HASH_OID_LIST = "HashOIDList"
    Public Const BCRYPT_PADDING_SCHEMES = "PaddingSchemes"
    Public Const BCRYPT_SIGNATURE_LENGTH = "SignatureLength"
    Public Const BCRYPT_HASH_BLOCK_LENGTH = "HashBlockLength"
    Public Const BCRYPT_AUTH_TAG_LENGTH = "AuthTagLength"
    ' #if (NTDDI_VERSION >= NTDDI_WIN7)
    Public Const BCRYPT_PRIMITIVE_TYPE = "PrimitiveType"
    Public Const BCRYPT_IS_KEYED_HASH = "IsKeyedHash"
    ' #if (NTDDI_VERSION >= NTDDI_WIN8)
    Public Const BCRYPT_IS_REUSABLE_HASH = "IsReusableHash"
    Public Const BCRYPT_MESSAGE_BLOCK_LENGTH = "MessageBlockLength"
    Public Const BCRYPT_PUBLIC_KEY_LENGTH = "PublicKeyLength"
    Public Const BCRYPT_PCP_PLATFORM_TYPE_PROPERTY = "PCP_PLATFORM_TYPE"
    Public Const BCRYPT_PCP_PROVIDER_VERSION_PROPERTY = "PCP_PROVIDER_VERSION"
    Public Const BCRYPT_MULTI_OBJECT_LENGTH = "MultiObjectLength"
    Public Const BCRYPT_IS_IFX_TPM_WEAK_KEY = "IsIfxTpmWeakKey"
    Public Const BCRYPT_HKDF_HASH_ALGORITHM = "HkdfHashAlgorithm"
    Public Const BCRYPT_HKDF_SALT_AND_FINALIZE = "HkdfSaltAndFinalize"
    Public Const BCRYPT_HKDF_PRK_AND_FINALIZE = "HkdfPrkAndFinalize"
    ' BCryptSetProperty strings
    Public Const BCRYPT_INITIALIZATION_VECTOR = "IV"
    ' Property Strings
    Public Const BCRYPT_CHAIN_MODE_NA = "ChainingModeN/A"
    Public Const BCRYPT_CHAIN_MODE_CBC = "ChainingModeCBC"
    Public Const BCRYPT_CHAIN_MODE_ECB = "ChainingModeECB"
    Public Const BCRYPT_CHAIN_MODE_CFB = "ChainingModeCFB"
    Public Const BCRYPT_CHAIN_MODE_CCM = "ChainingModeCCM"
    Public Const BCRYPT_CHAIN_MODE_GCM = "ChainingModeGCM"

    Public Enum BCRYPT_PADDING_TYPES
        BCRYPT_SUPPORTED_PAD_ROUTER = &H00000001
        BCRYPT_SUPPORTED_PAD_PKCS1_ENC = &H00000002
        BCRYPT_SUPPORTED_PAD_PKCS1_SIG = &H00000004
        BCRYPT_SUPPORTED_PAD_OAEP = &H00000008
        BCRYPT_SUPPORTED_PAD_PSS = &H00000010
    End Enum



    Public Enum BCryptBufferVersions
        BCRYPTBUFFER_VERSION = 0
    End Enum
    Public Type BCryptBuffer
        cbBuffer As Long ' Length of buffer, in bytes
        BufferType As BCryptKdfBufferTypes ' Buffer type
        pvBuffer As LongPtr ' Pointer to buffer
    End Type
    Public Type BCryptBufferDesc
        ulVersion As Long ' Version number
        cBuffers As Long ' Number of buffers
        pBuffers As LongPtr 'PBCryptBuffer ' Pointer to array of buffers
    End Type


    Public Enum BCRYPT_GR_FLAGS
        BCRYPT_RNG_USE_ENTROPY_IN_BUFFER = &H00000001
        BCRYPT_USE_SYSTEM_PREFERRED_RNG = &H00000002
    End Enum




    Public Enum BCRYPT_OA_FLAGS
        BCRYPT_PROV_DISPATCH = &H00000001  ' BCryptOpenAlgorithmProvider
        BCRYPT_ALG_HANDLE_HMAC_FLAG = &H00000008
        BCRYPT_HASH_REUSABLE_FLAG = &H00000020
    End Enum




    Public Enum BCryptGenSymFlags
        BCRYPT_TLS_CBC_HMAC_VERIFY_FLAG = &H00000004
        BCRYPT_BUFFERS_LOCKED_FLAG = &H00000040
        BCRYPT_EXTENDED_KEYSIZE = &H00000080
        BCRYPT_ENABLE_INCOMPATIBLE_FIPS_CHECKS = &H00000100
    End Enum




    Public Enum BCRYPT_RSA_PADDING
        BCRYPT_PAD_NONE = &H00000001
        BCRYPT_PAD_PKCS1 = &H00000002  ' BCryptEncrypt/Decrypt BCryptSignHash/VerifySignature
        BCRYPT_PAD_OAEP = &H00000004  ' BCryptEncrypt/Decrypt
        BCRYPT_PAD_PSS = &H00000008  ' BCryptSignHash/VerifySignature
    ' #if (NTDDI_VERSION >= NTDDI_WINBLUE)
        BCRYPT_PAD_PKCS1_OPTIONAL_HASH_OID = &H00000010  'BCryptVerifySignature
    End Enum

    Public Enum BCRYPT_FLAGS
        BCRYPT_BLOCK_PADDING = &H00000001
        BCRYPT_GENERATE_IV = &H00000020
    End Enum

    Public Enum BCRYPT_ENUM_ALG_OPS
        BCRYPT_CIPHER_OPERATION = &H00000001
        BCRYPT_HASH_OPERATION = &H00000002
        BCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = &H00000004
        BCRYPT_SECRET_AGREEMENT_OPERATION = &H00000008
        BCRYPT_SIGNATURE_OPERATION = &H00000010
        BCRYPT_RNG_OPERATION = &H00000020
    ' #if (NTDDI_VERSION >= NTDDI_WIN8)
        BCRYPT_KEY_DERIVATION_OPERATION = &H00000040
    End Enum

    Public Type BCRYPT_PROVIDER_NAME
        pszProviderName As LongPtr
    End Type

    Public Type BCRYPT_ALGORITHM_IDENTIFIER
        pszName As LongPtr
        dwClass As BCRYPT_CNG_INTERFACES
        dwFlags As Long
    End Type

    Public Const BCRYPT_PUBLIC_KEY_BLOB  = "PUBLICBLOB"
    Public Const BCRYPT_PRIVATE_KEY_BLOB  = "PRIVATEBLOB"

    Public Type BCRYPT_KEY_BLOB
        Magic As Long
    End Type

    Public Const BCRYPT_RSAPUBLIC_BLOB = "RSAPUBLICBLOB"
    Public Const BCRYPT_RSAPRIVATE_BLOB = "RSAPRIVATEBLOB"
    Public Const LEGACY_RSAPUBLIC_BLOB = "CAPIPUBLICBLOB"
    Public Const LEGACY_RSAPRIVATE_BLOB = "CAPIPRIVATEBLOB"
    Public Const BCRYPT_RSAPUBLIC_MAGIC  = &H31415352  ' RSA1
    Public Const BCRYPT_RSAPRIVATE_MAGIC  = &H32415352  ' RSA2

    Public Type BCRYPT_RSAKEY_BLOB
        Magic As Long
        BitLength As Long
        cbPublicExp As Long
        cbModulus As Long
        cbPrime1 As Long
        cbPrime2 As Long
    End Type

    Public Const BCRYPT_RSAFULLPRIVATE_BLOB = "RSAFULLPRIVATEBLOB"
    Public Const BCRYPT_RSAFULLPRIVATE_MAGIC  = &H33415352  ' RSA3
    ' Properties of secret agreement algorithms
    ' #if (NTDDI_VERSION >= NTDDI_WIN8)
    Public Const BCRYPT_GLOBAL_PARAMETERS = "SecretAgreementParam"
    Public Const BCRYPT_PRIVATE_KEY  = "PrivKeyVal"
    ' #endif
    '  The BCRYPT_ECCPUBLIC_BLOB and BCRYPT_ECCPRIVATE_BLOB blob types are used
    '  to transport plaintext ECC keys. These blob types will be supported by
    '  all ECC primitive providers.
    Public Const BCRYPT_ECCPUBLIC_BLOB = "ECCPUBLICBLOB"
    Public Const BCRYPT_ECCPRIVATE_BLOB = "ECCPRIVATEBLOB"
    ' #if (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)
    Public Const BCRYPT_ECCFULLPUBLIC_BLOB = "ECCFULLPUBLICBLOB"
    Public Const BCRYPT_ECCFULLPRIVATE_BLOB = "ECCFULLPRIVATEBLOB"
    Public Const SSL_ECCPUBLIC_BLOB = "SSLECCPUBLICBLOB"
    ' #endif
    Public Const BCRYPT_ECDH_PUBLIC_P256_MAGIC  = &H314B4345  ' ECK1
    Public Const BCRYPT_ECDH_PRIVATE_P256_MAGIC  = &H324B4345  ' ECK2
    Public Const BCRYPT_ECDH_PUBLIC_P384_MAGIC  = &H334B4345  ' ECK3
    Public Const BCRYPT_ECDH_PRIVATE_P384_MAGIC  = &H344B4345  ' ECK4
    Public Const BCRYPT_ECDH_PUBLIC_P521_MAGIC  = &H354B4345  ' ECK5
    Public Const BCRYPT_ECDH_PRIVATE_P521_MAGIC  = &H364B4345  ' ECK6
    ' #if (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)
    Public Const BCRYPT_ECDH_PUBLIC_GENERIC_MAGIC  = &H504B4345  ' ECKP
    Public Const BCRYPT_ECDH_PRIVATE_GENERIC_MAGIC  = &H564B4345  ' ECKV
    ' #endif
    Public Const BCRYPT_ECDSA_PUBLIC_P256_MAGIC  = &H31534345  ' ECS1
    Public Const BCRYPT_ECDSA_PRIVATE_P256_MAGIC  = &H32534345  ' ECS2
    Public Const BCRYPT_ECDSA_PUBLIC_P384_MAGIC  = &H33534345  ' ECS3
    Public Const BCRYPT_ECDSA_PRIVATE_P384_MAGIC  = &H34534345  ' ECS4
    Public Const BCRYPT_ECDSA_PUBLIC_P521_MAGIC  = &H35534345  ' ECS5
    Public Const BCRYPT_ECDSA_PRIVATE_P521_MAGIC  = &H36534345  ' ECS6
    ' #if (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)
    Public Const BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC  = &H50444345  ' ECDP
    Public Const BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC  = &H56444345  ' ECDV

    Public Type BCRYPT_ECCKEY_BLOB
        dwMagic As Long
        cbKey As Long
    End Type
    Public Type SSL_ECCKEY_BLOB
        dwCurveType As Long
        cbKey As Long
    End Type

    Public Const BCRYPT_ECC_FULLKEY_BLOB_V1 = &H1

    Public Enum ECC_CURVE_TYPE_ENUM
        BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE = &H1
        BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE = &H2
        BCRYPT_ECC_PRIME_MONTGOMERY_CURVE = &H3
    End Enum
    Public Enum ECC_CURVE_ALG_ID_ENUM
        BCRYPT_NO_CURVE_GENERATION_ALG_ID = &H0
    End Enum

    Public Type BCRYPT_ECCFULLKEY_BLOB
        dwMagic As Long
        dwVersion As Long 'Version of the structure
        dwCurveType As ECC_CURVE_TYPE_ENUM 'Supported curve types.
        dwCurveGenerationAlgId As ECC_CURVE_ALG_ID_ENUM 'For X.592 verification purposes, if we include Seed we will need to include the algorithm ID.
        cbFieldLength As Long 'Byte length of the fields P, A, B, X, Y.
        cbSubgroupOrder As Long 'Byte length of the subgroup.
        cbCofactor As Long 'Byte length of cofactor of G in E.
        cbSeed As Long 'Byte length of the seed used to generate the curve.
        'P[cbFieldLength]              Prime specifying the base field.
        'A[cbFieldLength]              Coefficient A of the equation y^2 = x^3 + A*x + B mod p
        'B[cbFieldLength]              Coefficient B of the equation y^2 = x^3 + A*x + B mod p
        'Gx[cbFieldLength]             X-coordinate of the base point.
        'Gy[cbFieldLength]             Y-coordinate of the base point.
        'n[cbSubgroupOrder]            Order of the group generated by G = (x,y)
        'h[cbCofactor]                 Cofactor of G in E.
        'S[cbSeed]                     Seed of the curve.
        'Qx[cbFieldLength]             X-coordinate of the public point.
        'Qy[cbFieldLength]             Y-coordinate of the public point.
        'd[cbSubgroupOrder]            Private key.  Not always present.
    End Type

    Public Const BCRYPT_DH_PUBLIC_BLOB = "DHPUBLICBLOB"
    Public Const BCRYPT_DH_PRIVATE_BLOB = "DHPRIVATEBLOB"
    Public Const LEGACY_DH_PUBLIC_BLOB = "CAPIDHPUBLICBLOB"
    Public Const LEGACY_DH_PRIVATE_BLOB = "CAPIDHPRIVATEBLOB"
    Public Const BCRYPT_DH_PUBLIC_MAGIC  = &H42504844  ' DHPB
    Public Const BCRYPT_DH_PRIVATE_MAGIC  = &H56504844  ' DHPV

    Public Type BCRYPT_DH_KEY_BLOB
        dwMagic As Long
        cbKey As Long
    End Type

    Public Const BCRYPT_DH_PARAMETERS = "DHParameters"
    Public Const BCRYPT_DH_PARAMETERS_MAGIC  = &H4d504844  ' DHPM

    Public Type BCRYPT_DH_PARAMETER_HEADER
        cbLength As Long
        dwMagic As Long
        cbKeyLength As Long
    End Type

    Public Const BCRYPT_DSA_PUBLIC_BLOB = "DSAPUBLICBLOB"
    Public Const BCRYPT_DSA_PRIVATE_BLOB = "DSAPRIVATEBLOB"
    Public Const LEGACY_DSA_PUBLIC_BLOB = "CAPIDSAPUBLICBLOB"
    Public Const LEGACY_DSA_PRIVATE_BLOB = "CAPIDSAPRIVATEBLOB"
    Public Const LEGACY_DSA_V2_PUBLIC_BLOB = "V2CAPIDSAPUBLICBLOB"
    Public Const LEGACY_DSA_V2_PRIVATE_BLOB = "V2CAPIDSAPRIVATEBLOB"
    Public Const BCRYPT_DSA_PUBLIC_MAGIC  = &H42505344  ' DSPB
    Public Const BCRYPT_DSA_PRIVATE_MAGIC  = &H56505344  ' DSPV
    '(NTDDI_VERSION  = >= NTDDI_WIN8)
    Public Const BCRYPT_DSA_PUBLIC_MAGIC_V2  = &H32425044  ' DPB2
    Public Const BCRYPT_DSA_PRIVATE_MAGIC_V2  = &H32565044  ' DPV2

    Public Type BCRYPT_DSA_KEY_BLOB
        dwMagic As Long
        cbKey As Long
        Count(0 To 3) As Byte
        Seed(0 To 19) As Byte
        q(0 To 19) As Byte
    End Type

    Public Enum HASHALGORITHM_ENUM
        DSA_HASH_ALGORITHM_SHA1
        DSA_HASH_ALGORITHM_SHA256
        DSA_HASH_ALGORITHM_SHA512
    End Enum
    Public Enum DSAFIPSVERSION_ENUM
        DSA_FIPS186_2
        DSA_FIPS186_3
    End Enum
    Public Type BCRYPT_DSA_KEY_BLOB_V2
        dwMagic As Long
        cbKey As Long
        hashAlgorithm As HASHALGORITHM_ENUM
        standardVersion As DSAFIPSVERSION_ENUM
        cbSeedLength As Long
        cbGroupSize As Long
        Count(0 To 3) As Byte
    End Type

    Public Type BCRYPT_KEY_DATA_BLOB_HEADER
        dwMagic As Long
        dwVersion As Long
        cbKeyData As Long
    End Type

    Public Const BCRYPT_KEY_DATA_BLOB_MAGIC  = &H4d42444b  'Key Data Blob Magic (KDBM)
    Public Enum BCryptDataBlobVersions
        BCRYPT_KEY_DATA_BLOB_VERSION1 = &H1
    End Enum
    '  Property Strings for DSA
    Public Const BCRYPT_DSA_PARAMETERS  = "DSAParameters"
    Public Enum BCryptDSAParamMagic
        BCRYPT_DSA_PARAMETERS_MAGIC = &H4d505344  ' DSPM    
    '(NTDDI_VERSION  = >= NTDDI_WIN8)
        BCRYPT_DSA_PARAMETERS_MAGIC_V2 = &H324d5044  ' DPM2
    End Enum
    Public Type BCRYPT_DSA_PARAMETER_HEADER
        cbLength As Long
        dwMagic As BCryptDSAParamMagic
        cbKeyLength As Long
        Count(0 To 3) As Byte
        Seed(0 To 19) As Byte
        q(0 To 19) As Byte
    End Type
    Public Type BCRYPT_DSA_PARAMETER_HEADER_V2
        cbLength As Long
        dwMagic As BCryptDSAParamMagic
        cbKeyLength As Long
        hashAlgorithm As HASHALGORITHM_ENUM
        standardVersion As DSAFIPSVERSION_ENUM
        cbSeedLength As Long
        cbGroupSize As Long
        Count(0 To 3) As Byte
    End Type

    Public Const BCRYPT_ECC_PARAMETERS  = "ECCParameters"
    Public Const BCRYPT_ECC_CURVE_NAME  = "ECCCurveName"
    Public Const BCRYPT_ECC_CURVE_NAME_LIST  = "ECCCurveNameList"
    Public Const BCRYPT_ECC_PARAMETERS_MAGIC  = &H50434345  ' ECCP

    Public Type BCRYPT_ECC_CURVE_NAMES
        dwEccCurveNames As Long
        pEccCurveNames As LongPtr 'LPWSTR*  !! take note
    End Type

    Public Const BCRYPT_ECC_CURVE_BRAINPOOLP160R1  = "brainpoolP160r1"
    Public Const BCRYPT_ECC_CURVE_BRAINPOOLP160T1  = "brainpoolP160t1"
    Public Const BCRYPT_ECC_CURVE_BRAINPOOLP192R1  = "brainpoolP192r1"
    Public Const BCRYPT_ECC_CURVE_BRAINPOOLP192T1  = "brainpoolP192t1"
    Public Const BCRYPT_ECC_CURVE_BRAINPOOLP224R1  = "brainpoolP224r1"
    Public Const BCRYPT_ECC_CURVE_BRAINPOOLP224T1  = "brainpoolP224t1"
    Public Const BCRYPT_ECC_CURVE_BRAINPOOLP256R1  = "brainpoolP256r1"
    Public Const BCRYPT_ECC_CURVE_BRAINPOOLP256T1  = "brainpoolP256t1"
    Public Const BCRYPT_ECC_CURVE_BRAINPOOLP320R1  = "brainpoolP320r1"
    Public Const BCRYPT_ECC_CURVE_BRAINPOOLP320T1  = "brainpoolP320t1"
    Public Const BCRYPT_ECC_CURVE_BRAINPOOLP384R1  = "brainpoolP384r1"
    Public Const BCRYPT_ECC_CURVE_BRAINPOOLP384T1  = "brainpoolP384t1"
    Public Const BCRYPT_ECC_CURVE_BRAINPOOLP512R1  = "brainpoolP512r1"
    Public Const BCRYPT_ECC_CURVE_BRAINPOOLP512T1  = "brainpoolP512t1"
    Public Const BCRYPT_ECC_CURVE_25519  = "curve25519"
    Public Const BCRYPT_ECC_CURVE_EC192WAPI  = "ec192wapi"
    Public Const BCRYPT_ECC_CURVE_NISTP192  = "nistP192"
    Public Const BCRYPT_ECC_CURVE_NISTP224  = "nistP224"
    Public Const BCRYPT_ECC_CURVE_NISTP256  = "nistP256"
    Public Const BCRYPT_ECC_CURVE_NISTP384  = "nistP384"
    Public Const BCRYPT_ECC_CURVE_NISTP521  = "nistP521"
    Public Const BCRYPT_ECC_CURVE_NUMSP256T1  = "numsP256t1"
    Public Const BCRYPT_ECC_CURVE_NUMSP384T1  = "numsP384t1"
    Public Const BCRYPT_ECC_CURVE_NUMSP512T1  = "numsP512t1"
    Public Const BCRYPT_ECC_CURVE_SECP160K1  = "secP160k1"
    Public Const BCRYPT_ECC_CURVE_SECP160R1  = "secP160r1"
    Public Const BCRYPT_ECC_CURVE_SECP160R2  = "secP160r2"
    Public Const BCRYPT_ECC_CURVE_SECP192K1  = "secP192k1"
    Public Const BCRYPT_ECC_CURVE_SECP192R1  = "secP192r1"
    Public Const BCRYPT_ECC_CURVE_SECP224K1  = "secP224k1"
    Public Const BCRYPT_ECC_CURVE_SECP224R1  = "secP224r1"
    Public Const BCRYPT_ECC_CURVE_SECP256K1  = "secP256k1"
    Public Const BCRYPT_ECC_CURVE_SECP256R1  = "secP256r1"
    Public Const BCRYPT_ECC_CURVE_SECP384R1  = "secP384r1"
    Public Const BCRYPT_ECC_CURVE_SECP521R1  = "secP521r1"
    Public Const BCRYPT_ECC_CURVE_WTLS7  = "wtls7"
    Public Const BCRYPT_ECC_CURVE_WTLS9  = "wtls9"
    Public Const BCRYPT_ECC_CURVE_WTLS12  = "wtls12"
    Public Const BCRYPT_ECC_CURVE_X962P192V1  = "x962P192v1"
    Public Const BCRYPT_ECC_CURVE_X962P192V2  = "x962P192v2"
    Public Const BCRYPT_ECC_CURVE_X962P192V3  = "x962P192v3"
    Public Const BCRYPT_ECC_CURVE_X962P239V1  = "x962P239v1"
    Public Const BCRYPT_ECC_CURVE_X962P239V2  = "x962P239v2"
    Public Const BCRYPT_ECC_CURVE_X962P239V3  = "x962P239v3"
    Public Const BCRYPT_ECC_CURVE_X962P256V1  = "x962P256v1"

    Public Enum BCRYPT_HASH_OPERATION_TYPE
        BCRYPT_HASH_OPERATION_HASH_DATA = 1
        BCRYPT_HASH_OPERATION_FINISH_HASH = 2
    End Enum
    Public Type BCRYPT_MULTI_HASH_OPERATION
        iHash As Long ' index of hash object
        hashOperation As BCRYPT_HASH_OPERATION_TYPE ' operation to be performed
        pbBuffer As LongPtr 'PUCHAR ' data to be hashed, or result buffer
        cbBuffer As Long
    End Type

    Public Enum BCRYPT_MULTI_OPERATION_TYPE
        BCRYPT_OPERATION_TYPE_HASH = 1 ' structure type is BCRYPT_MULTI_HASH_OPERATION
    End Enum

    Public Type BCRYPT_MULTI_OBJECT_LENGTH_STRUCT
        cbPerObject As Long
        cbPerElement As Long ' required size for N elements is (cbPerObject + N * cbPerElement)
    End Type

    Public Const MS_PRIMITIVE_PROVIDER  = "Microsoft Primitive Provider"
    Public Const MS_PLATFORM_CRYPTO_PROVIDER  = "Microsoft Platform Crypto Provider"

    Public Const BCRYPT_RSA_ALGORITHM  = "RSA"
    Public Const BCRYPT_RSA_SIGN_ALGORITHM  = "RSA_SIGN"
    Public Const BCRYPT_DH_ALGORITHM  = "DH"
    Public Const BCRYPT_DSA_ALGORITHM  = "DSA"
    Public Const BCRYPT_RC2_ALGORITHM  = "RC2"
    Public Const BCRYPT_RC4_ALGORITHM  = "RC4"
    Public Const BCRYPT_AES_ALGORITHM  = "AES"
    Public Const BCRYPT_DES_ALGORITHM  = "DES"
    Public Const BCRYPT_DESX_ALGORITHM  = "DESX"
    Public Const BCRYPT_3DES_ALGORITHM  = "3DES"
    Public Const BCRYPT_3DES_112_ALGORITHM  = "3DES_112"
    Public Const BCRYPT_MD2_ALGORITHM  = "MD2"
    Public Const BCRYPT_MD4_ALGORITHM  = "MD4"
    Public Const BCRYPT_MD5_ALGORITHM  = "MD5"
    Public Const BCRYPT_SHA1_ALGORITHM  = "SHA1"
    Public Const BCRYPT_SHA256_ALGORITHM  = "SHA256"
    Public Const BCRYPT_SHA384_ALGORITHM  = "SHA384"
    Public Const BCRYPT_SHA512_ALGORITHM  = "SHA512"
    Public Const BCRYPT_AES_GMAC_ALGORITHM  = "AES-GMAC"
    Public Const BCRYPT_AES_CMAC_ALGORITHM  = "AES-CMAC"
    Public Const BCRYPT_ECDSA_P256_ALGORITHM  = "ECDSA_P256"
    Public Const BCRYPT_ECDSA_P384_ALGORITHM  = "ECDSA_P384"
    Public Const BCRYPT_ECDSA_P521_ALGORITHM  = "ECDSA_P521"
    Public Const BCRYPT_ECDH_P256_ALGORITHM  = "ECDH_P256"
    Public Const BCRYPT_ECDH_P384_ALGORITHM  = "ECDH_P384"
    Public Const BCRYPT_ECDH_P521_ALGORITHM  = "ECDH_P521"
    Public Const BCRYPT_RNG_ALGORITHM  = "RNG"
    Public Const BCRYPT_RNG_FIPS186_DSA_ALGORITHM  = "FIPS186DSARNG"
    Public Const BCRYPT_RNG_DUAL_EC_ALGORITHM  = "DUALECRNG"
    ' #if (NTDDI_VERSION >= NTDDI_WIN8)
    Public Const BCRYPT_SP800108_CTR_HMAC_ALGORITHM  = "SP800_108_CTR_HMAC"
    Public Const BCRYPT_SP80056A_CONCAT_ALGORITHM  = "SP800_56A_CONCAT"
    Public Const BCRYPT_PBKDF2_ALGORITHM  = "PBKDF2"
    Public Const BCRYPT_CAPI_KDF_ALGORITHM  = "CAPI_KDF"
    Public Const BCRYPT_TLS1_1_KDF_ALGORITHM  = "TLS1_1_KDF"
    Public Const BCRYPT_TLS1_2_KDF_ALGORITHM  = "TLS1_2_KDF"
    ' #endif
    ' #if (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)
    Public Const BCRYPT_ECDSA_ALGORITHM  = "ECDSA"
    Public Const BCRYPT_ECDH_ALGORITHM  = "ECDH"
    Public Const BCRYPT_XTS_AES_ALGORITHM  = "XTS-AES"
    ' #endif
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_RS4)
    Public Const BCRYPT_HKDF_ALGORITHM  = "HKDF"
    ' #endif
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_FE)
    Public Const BCRYPT_CHACHA20_POLY1305_ALGORITHM  = "CHACHA20_POLY1305"
    ' #endif

    Public Enum BCRYPT_CNG_INTERFACES
        BCRYPT_CIPHER_INTERFACE = &H00000001
        BCRYPT_HASH_INTERFACE = &H00000002
        BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = &H00000003
        BCRYPT_SECRET_AGREEMENT_INTERFACE = &H00000004
        BCRYPT_SIGNATURE_INTERFACE = &H00000005
        BCRYPT_RNG_INTERFACE = &H00000006
    ' #if (NTDDI_VERSION >= NTDDI_WIN8)
        BCRYPT_KEY_DERIVATION_INTERFACE = &H00000007
    End Enum
    Public Enum NCRYPT_CNG_INTERFACES
        NCRYPT_CIPHER_INTERFACE = BCRYPT_CIPHER_INTERFACE
        NCRYPT_HASH_INTERFACE = BCRYPT_HASH_INTERFACE
        NCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE
        NCRYPT_SECRET_AGREEMENT_INTERFACE = BCRYPT_SECRET_AGREEMENT_INTERFACE
        NCRYPT_SIGNATURE_INTERFACE = BCRYPT_SIGNATURE_INTERFACE
    ' #if (NTDDI_VERSION >= NTDDI_WIN8)
        NCRYPT_KEY_DERIVATION_INTERFACE = BCRYPT_KEY_DERIVATION_INTERFACE
    
        NCRYPT_KEY_STORAGE_INTERFACE = &H00010001
        NCRYPT_SCHANNEL_INTERFACE = &H00010002
        NCRYPT_SCHANNEL_SIGNATURE_INTERFACE = &H00010003
    End Enum


    Public Const BCRYPT_MD2_ALG_HANDLE                As LongPtr = (&H00000001)
    Public Const BCRYPT_MD4_ALG_HANDLE                As LongPtr = (&H00000011)
    Public Const BCRYPT_MD5_ALG_HANDLE                As LongPtr = (&H00000021)
    Public Const BCRYPT_SHA1_ALG_HANDLE               As LongPtr = (&H00000031)
    Public Const BCRYPT_SHA256_ALG_HANDLE             As LongPtr = (&H00000041)
    Public Const BCRYPT_SHA384_ALG_HANDLE             As LongPtr = (&H00000051)
    Public Const BCRYPT_SHA512_ALG_HANDLE             As LongPtr = (&H00000061)
    Public Const BCRYPT_RC4_ALG_HANDLE                As LongPtr = (&H00000071)
    Public Const BCRYPT_RNG_ALG_HANDLE                As LongPtr = (&H00000081)
    Public Const BCRYPT_HMAC_MD5_ALG_HANDLE           As LongPtr = (&H00000091)
    Public Const BCRYPT_HMAC_SHA1_ALG_HANDLE          As LongPtr = (&H000000a1)
    Public Const BCRYPT_HMAC_SHA256_ALG_HANDLE        As LongPtr = (&H000000b1)
    Public Const BCRYPT_HMAC_SHA384_ALG_HANDLE        As LongPtr = (&H000000c1)
    Public Const BCRYPT_HMAC_SHA512_ALG_HANDLE        As LongPtr = (&H000000d1)
    Public Const BCRYPT_RSA_ALG_HANDLE                As LongPtr = (&H000000e1)
    Public Const BCRYPT_ECDSA_ALG_HANDLE              As LongPtr = (&H000000f1)
    Public Const BCRYPT_AES_CMAC_ALG_HANDLE           As LongPtr = (&H00000101)
    Public Const BCRYPT_AES_GMAC_ALG_HANDLE           As LongPtr = (&H00000111)
    Public Const BCRYPT_HMAC_MD2_ALG_HANDLE           As LongPtr = (&H00000121)
    Public Const BCRYPT_HMAC_MD4_ALG_HANDLE           As LongPtr = (&H00000131)
    Public Const BCRYPT_3DES_CBC_ALG_HANDLE           As LongPtr = (&H00000141)
    Public Const BCRYPT_3DES_ECB_ALG_HANDLE           As LongPtr = (&H00000151)
    Public Const BCRYPT_3DES_CFB_ALG_HANDLE           As LongPtr = (&H00000161)
    Public Const BCRYPT_3DES_112_CBC_ALG_HANDLE       As LongPtr = (&H00000171)
    Public Const BCRYPT_3DES_112_ECB_ALG_HANDLE       As LongPtr = (&H00000181)
    Public Const BCRYPT_3DES_112_CFB_ALG_HANDLE       As LongPtr = (&H00000191)
    Public Const BCRYPT_AES_CBC_ALG_HANDLE            As LongPtr = (&H000001a1)
    Public Const BCRYPT_AES_ECB_ALG_HANDLE            As LongPtr = (&H000001b1)
    Public Const BCRYPT_AES_CFB_ALG_HANDLE            As LongPtr = (&H000001c1)
    Public Const BCRYPT_AES_CCM_ALG_HANDLE            As LongPtr = (&H000001d1)
    Public Const BCRYPT_AES_GCM_ALG_HANDLE            As LongPtr = (&H000001e1)
    Public Const BCRYPT_DES_CBC_ALG_HANDLE            As LongPtr = (&H000001f1)
    Public Const BCRYPT_DES_ECB_ALG_HANDLE            As LongPtr = (&H00000201)
    Public Const BCRYPT_DES_CFB_ALG_HANDLE            As LongPtr = (&H00000211)
    Public Const BCRYPT_DESX_CBC_ALG_HANDLE           As LongPtr = (&H00000221)
    Public Const BCRYPT_DESX_ECB_ALG_HANDLE           As LongPtr = (&H00000231)
    Public Const BCRYPT_DESX_CFB_ALG_HANDLE           As LongPtr = (&H00000241)
    Public Const BCRYPT_RC2_CBC_ALG_HANDLE            As LongPtr = (&H00000251)
    Public Const BCRYPT_RC2_ECB_ALG_HANDLE            As LongPtr = (&H00000261)
    Public Const BCRYPT_RC2_CFB_ALG_HANDLE            As LongPtr = (&H00000271)
    Public Const BCRYPT_DH_ALG_HANDLE                 As LongPtr = (&H00000281)
    Public Const BCRYPT_ECDH_ALG_HANDLE               As LongPtr = (&H00000291)
    Public Const BCRYPT_ECDH_P256_ALG_HANDLE          As LongPtr = (&H000002a1)
    Public Const BCRYPT_ECDH_P384_ALG_HANDLE          As LongPtr = (&H000002b1)
    Public Const BCRYPT_ECDH_P521_ALG_HANDLE          As LongPtr = (&H000002c1)
    Public Const BCRYPT_DSA_ALG_HANDLE                As LongPtr = (&H000002d1)
    Public Const BCRYPT_ECDSA_P256_ALG_HANDLE         As LongPtr = (&H000002e1)
    Public Const BCRYPT_ECDSA_P384_ALG_HANDLE         As LongPtr = (&H000002f1)
    Public Const BCRYPT_ECDSA_P521_ALG_HANDLE         As LongPtr = (&H00000301)
    Public Const BCRYPT_RSA_SIGN_ALG_HANDLE           As LongPtr = (&H00000311)
    Public Const BCRYPT_CAPI_KDF_ALG_HANDLE           As LongPtr = (&H00000321)
    Public Const BCRYPT_PBKDF2_ALG_HANDLE             As LongPtr = (&H00000331)
    Public Const BCRYPT_SP800108_CTR_HMAC_ALG_HANDLE  As LongPtr = (&H00000341)
    Public Const BCRYPT_SP80056A_CONCAT_ALG_HANDLE    As LongPtr = (&H00000351)
    Public Const BCRYPT_TLS1_1_KDF_ALG_HANDLE         As LongPtr = (&H00000361)
    Public Const BCRYPT_TLS1_2_KDF_ALG_HANDLE         As LongPtr = (&H00000371)
    Public Const BCRYPT_XTS_AES_ALG_HANDLE            As LongPtr = (&H00000381)
    Public Const BCRYPT_HKDF_ALG_HANDLE               As LongPtr = (&H00000391)

    Public Const BCRYPT_CHACHA20_POLY1305_ALG_HANDLE  As LongPtr = (&H000003A1)

    Public Enum BCRYPT_KEYPAIR_IMPORT_FLAGS
        BCRYPT_NO_KEY_VALIDATION = &H00000008
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_CO)
        BCRYPT_KEY_VALIDATION_RANGE = &H00000010  ' BCryptImportKeyPair
        BCRYPT_KEY_VALIDATION_RANGE_AND_ORDER = &H00000018  ' BCryptImportKeyPair & BCryptFinalizeKeyPair
        BCRYPT_KEY_VALIDATION_REGENERATE = &H00000020  ' BCryptImportKeyPair
    End Enum

    Public Const BCRYPT_CAPI_AES_FLAG  = &H00000010
    Public Const BCRYPT_MULTI_FLAG  = &H00000040

    Public Enum BCryptPropertyFlags
        BCRYPT_PUBLIC_KEY_FLAG = &H00000001
        BCRYPT_PRIVATE_KEY_FLAG = &H00000002
    End Enum

    Public Type BCRYPT_INTERFACE_VERSION
        MajorVersion As Integer
        MinorVersion As Integer
    End Type



    Public DeclareWide PtrSafe Function BCryptOpenAlgorithmProvider Lib "bcrypt" (phAlgorithm As LongPtr, ByVal pszAlgId As String, ByVal pszImplementation As String, ByVal dwFlags As BCRYPT_OA_FLAGS) As NTSTATUS
    Public Declare PtrSafe Function BCryptCloseAlgorithmProvider Lib "bcrypt" (ByVal hAlgorithm As LongPtr, ByVal dwFlags As Long) As NTSTATUS
    Public DeclareWide PtrSafe Function BCryptGenRandom Lib "bcrypt" (ByVal hAlgorithm As LongPtr, pbBuffer As Any, ByVal cbBuffer As Long, ByVal dwFlags As BCRYPT_GR_FLAGS) As NTSTATUS
    Public Declare PtrSafe Function BCryptGetProperty Lib "bcrypt" (ByVal hObject As LongPtr, ByVal pszProperty As LongPtr, pbOutput As Any, ByVal cbOutput As Long, cbResult As Long, ByVal dwFlags As Long) As NTSTATUS
    Public Declare PtrSafe Function BCryptSetProperty Lib "bcrypt" (ByVal hObject As LongPtr, ByVal pszProperty As LongPtr, ByVal pbInput As LongPtr, ByVal cbInput As Long, ByVal dwFlags As Long) As NTSTATUS
    Public Declare PtrSafe Function BCryptGenerateSymmetricKey Lib "bcrypt" (ByVal hAlgorithm As LongPtr, phKey As LongPtr, pbKeyObject As Any, ByVal cbKeyObject As Long, pbSecret As Any, ByVal cbSecret As Long, ByVal dwFlags As Long) As NTSTATUS
    Public Declare PtrSafe Function BCryptDestroyKey Lib "bcrypt" (ByVal hKey As LongPtr) As NTSTATUS
    Public Declare PtrSafe Function BCryptEncrypt Lib "bcrypt" (ByVal hKey As LongPtr, pbInput As Any, ByVal cbInput As Long, ByVal pPaddingInfo As LongPtr, ByVal pbIV As LongPtr, ByVal cbIV As Long, pbOutput As Any, ByVal cbOutput As Long, pcbResult As Long, [TypeHint(BCRYPT_FLAGS, BCRYPT_RSA_PADDING)] ByVal dwFlags As Long) As NTSTATUS
    Public Declare PtrSafe Function BCryptDecrypt Lib "bcrypt" (ByVal hKey As LongPtr, pbInput As Any, ByVal cbInput As Long, ByVal pPaddingInfo As LongPtr, ByVal pbIV As LongPtr, ByVal cbIV As Long, pbOutput As Any, ByVal cbOutput As Long, pcbResult As Long, [TypeHint(BCRYPT_FLAGS, BCRYPT_RSA_PADDING)] ByVal dwFlags As Long) As NTSTATUS
    Public DeclareWide PtrSafe Function BCryptDeriveKey Lib "bcrypt" (ByVal hSharedSecret As LongPtr, ByVal pwszKDF As String, pParametersList As BCryptBufferDesc, pbDerivedKey As Any, ByVal cbDerivedKey As Long, pcbResult As Long, ByVal dwFlags As BCryptDeriveKeyFlags) As NTSTATUS
    Public DeclareWide PtrSafe Function BCryptDeriveKeyCapi Lib "bcrypt" (ByVal hHash As LongPtr, ByVal hTargetAlg As LongPtr, pbDerivedKey As Any, ByVal cbDerivedKey As Long, ByVal dwFlags As Long) As NTSTATUS
    Public Declare PtrSafe Function BCryptDeriveKeyPBKDF2 Lib "bcrypt" (ByVal hPrf As LongPtr, pbPassword As Any, ByVal cbPassword As Long, pbSalt As Any, ByVal cbSalt As Long, ByVal cIterations As LongLong, pbDerivedKey As Any, ByVal cbDerivedKey As Long, ByVal dwFlags As Long) As NTSTATUS
    Public Declare PtrSafe Function BCryptCreateHash Lib "bcrypt" (ByVal hAlgorithm As LongPtr, phHash As LongPtr, ByVal pbHashObject As LongPtr, ByVal cbHashObject As Long, pbSecret As Any, ByVal cbSecret As Long, [TypeHint(BCRYPT_OA_FLAGS)] ByVal dwFlags As Long) As NTSTATUS
    Public Declare PtrSafe Function BCryptDestroyHash Lib "bcrypt" (ByVal hHash As LongPtr) As NTSTATUS
    Public Declare PtrSafe Function BCryptHashData Lib "bcrypt" (ByVal hHash As LongPtr, pbInput As Any, ByVal cbInput As Long, ByVal dwFlags As Long) As NTSTATUS
    Public Declare PtrSafe Function BCryptHash Lib "bcrypt" (ByVal hAlgorithm As LongPtr, pbSecret As Any, ByVal cbSecret As Long, pbInput As Any, ByVal cbInput As Long, pbOutput As Any, ByVal cbOutput As Long) As NTSTATUS
    Public Declare PtrSafe Function BCryptFinishHash Lib "bcrypt" (ByVal hHash As LongPtr, pbOutput As Any, ByVal cbOutput As Long, ByVal dwFlags As Long) As NTSTATUS
    Public Declare PtrSafe Function BCryptCreateMultiHash Lib "bcrypt" (ByVal hAlgorithm As LongPtr, phHash As LongPtr, ByVal pbHashObject As LongPtr, ByVal cbHashObject As Long, pbSecret As Any, ByVal cbSecret As Long, [TypeHint(BCRYPT_OA_FLAGS)] ByVal dwFlags As Long) As NTSTATUS
    Public Declare PtrSafe Function BCryptDuplicateHash Lib "bcrypt" (ByVal hHash As LongPtr, phNewHash As LongPtr, pbHashObject As Any, ByVal cbHashObject As Long, ByVal dwFlags As Long) As NTSTATUS
    Public DeclareWide PtrSafe Function BCryptProcessMultiOperations Lib "bcrypt" (ByVal hObject As LongPtr, ByVal operationType As BCRYPT_MULTI_OPERATION_TYPE, pOperations As Any, ByVal cbOperations As Long, ByVal dwFlags As Long) As NTSTATUS
    Public Declare PtrSafe Function BCryptEnumAlgorithms Lib "bcrypt" (ByVal dwAlgOperations As BCRYPT_ENUM_ALG_OPS, pAlgCount As Long, ppAlgList As LongPtr, ByVal dwFlags As Long) As NTSTATUS
    Public Declare PtrSafe Sub BCryptFreeBuffer Lib "bcrypt" (ByVal pvBuffer As LongPtr)
    Public DeclareWide PtrSafe Function BCryptImportKey Lib "bcrypt" (ByVal hAlgorithm As LongPtr, ByVal hImportKey As LongPtr, ByVal pszBlobType As String, phKey As LongPtr, pbKeyObject As Any, ByVal cbKeyObject As Long, pbInput As Any, ByVal cbInput As Long, ByVal dwFlags As Long) As NTSTATUS
    Public DeclareWide PtrSafe Function BCryptImportKeyPair Lib "bcrypt" (ByVal hAlgorithm As LongPtr, ByVal hImportKey As LongPtr, ByVal pszBlobType As String, phKey As LongPtr, pbInput As Any, ByVal cbInput As Long, ByVal dwFlags As BCRYPT_KEYPAIR_IMPORT_FLAGS) As NTSTATUS
    Public DeclareWide PtrSafe Function BCryptDuplicateKey Lib "bcrypt" (ByVal hKey As LongPtr, phNewKey As LongPtr, pbKeyObject As Any, ByVal cbKeyObject As Long, ByVal dwFlags As Long) As NTSTATUS
    Public DeclareWide PtrSafe Function BCryptExportKey Lib "bcrypt" (ByVal hKey As LongPtr, ByVal hExportKey As LongPtr, ByVal pszBlobType As String, pbOutput As Any, ByVal cbOutput As Long, pcbResult As Long, ByVal dwFlags As Long) As NTSTATUS
    Public Declare PtrSafe Function BCryptSecretAgreement Lib "bcrypt" (ByVal hPrivKey As LongPtr, ByVal hPubKey As LongPtr, phAgreedSecret As LongPtr, ByVal dwFlags As Long) As NTSTATUS
    Public Declare PtrSafe Function BCryptDestroySecret Lib "bcrypt" (ByVal hSecret As LongPtr) As NTSTATUS
    Public Declare PtrSafe Function BCryptFinalizeKeyPair Lib "bcrypt" (ByVal hKey As LongPtr, ByVal dwFlags As Long) As NTSTATUS
    Public Declare PtrSafe Function BCryptGenerateKeyPair Lib "bcrypt" (ByVal hAlgorithm As LongPtr, ByRef hKey As LongPtr, ByVal dwLength As Long, ByVal dwFlags As Long) As NTSTATUS
    Public DeclareWide PtrSafe Function BCryptEnumProviders Lib "bcrypt" (ByVal pszAlgId As String, pImplCount As Long, ppImpList As LongPtr, ByVal dwFlags As Long) As NTSTATUS
    Public DeclareWide PtrSafe Function BCryptSignHash Lib "bcrypt" (ByVal hKey As LongPtr, pPaddingInfo As Any, pbInput As Any, ByVal cbInput As Long, pbOutput As Any, ByVal cbOutput As Long, pcbResult As Long, ByVal dwFlags As BCRYPT_RSA_PADDING) As NTSTATUS
    Public DeclareWide PtrSafe Function BCryptVerifySignature Lib "bcrypt" (ByVal hKey As LongPtr, pPaddingInfo As Any, pbHash As Any, ByVal cbHash As Long, pbSignature As Any, ByVal cbSignature As Long, ByVal dwFlags As BCRYPT_RSA_PADDING) As NTSTATUS
    Public DeclareWide PtrSafe Function BCryptKeyDerivation Lib "bcrypt" (ByVal hKey As LongPtr, pParameterList As BCryptBufferDesc, pbDerivedKey As Any, ByVal cbDerivedKey As Long, pcbResult As Long, ByVal dwFlags As Long) As NTSTATUS

    [ConstantFoldable]
    Public Function BCRYPT_MAKE_INTERFACE_VERSION(ByVal major As Integer, ByVal minor As Integer) As BCRYPT_INTERFACE_VERSION
    BCRYPT_MAKE_INTERFACE_VERSION.MajorVersion = major
    BCRYPT_MAKE_INTERFACE_VERSION.MinorVersion = minor
    End Function
    Public Function BCRYPT_IS_INTERFACE_VERSION_COMPATIBLE(loader As BCRYPT_INTERFACE_VERSION, provider As BCRYPT_INTERFACE_VERSION) As Boolean: Return (loader.MajorVersion <= provider.MajorVersion): End Function

    ' Public Const BCRYPT_CIPHER_INTERFACE_VERSION_1 = BCRYPT_MAKE_INTERFACE_VERSION(1, 0)
    ' #define BCRYPT_HASH_INTERFACE_VERSION_1         BCRYPT_MAKE_INTERFACE_VERSION(1,0)

    ' #if (NTDDI_VERSION > NTDDI_WINBLUE || (NTDDI_VERSION == NTDDI_WINBLUE && defined(WINBLUE_KBSPRING14)))
    ' #define BCRYPT_HASH_INTERFACE_MAJORVERSION_2    2
    ' #define BCRYPT_HASH_INTERFACE_VERSION_2         BCRYPT_MAKE_INTERFACE_VERSION(BCRYPT_HASH_INTERFACE_MAJORVERSION_2,0)
    ' #endif


    ' #define BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE_VERSION_1    BCRYPT_MAKE_INTERFACE_VERSION(1,0)


    ' #define BCRYPT_SECRET_AGREEMENT_INTERFACE_VERSION_1    BCRYPT_MAKE_INTERFACE_VERSION(1,0)


    ' #define BCRYPT_SIGNATURE_INTERFACE_VERSION_1    BCRYPT_MAKE_INTERFACE_VERSION(1,0)


    ' #define BCRYPT_RNG_INTERFACE_VERSION_1    BCRYPT_MAKE_INTERFACE_VERSION(1,0)
    Public Enum BCryptIFacrRegFlags
        CRYPT_MIN_DEPENDENCIES = (&H00000001)
        CRYPT_PROCESS_ISOLATE = (&H00010000)  ' User-mode only
    End Enum

    Public Enum BCryptProviderModeFlags
        CRYPT_UM = (&H00000001)  ' User mode only
        CRYPT_KM = (&H00000002)  ' Kernel mode only
        CRYPT_MM = (&H00000003)  ' Multi-mode: Must support BOTH UM and KM
    '  (Valid only for BCryptQueryProviderRegistration):
        CRYPT_ANY = (&H00000004)  ' Wildcard: Either UM, or KM, or both
    End Enum

    Public Enum BCryptWriteBehaviorFlags
        CRYPT_OVERWRITE = &H00000001
    End Enum

    Public Enum BCryptConfigTableFlags
        CRYPT_LOCAL = (&H00000001)
        CRYPT_DOMAIN = (&H00000002)
    End Enum

    Public Enum BCryptContextConfigFlags
        CRYPT_EXCLUSIVE = (&H00000001)
        CRYPT_OVERRIDE = (&H00010000)  ' Enterprise table only
    End Enum

    Public Enum BCryptResolutionFlags
        CRYPT_ALL_FUNCTIONS = (&H00000001)
        CRYPT_ALL_PROVIDERS = (&H00000002)
    End Enum

    Public Enum BCryptPriorityListnFlags
        CRYPT_PRIORITY_TOP = (&H00000000)
        CRYPT_PRIORITY_BOTTOM = (&HFFFFFFFF)
    End Enum

    Public Const CRYPT_DEFAULT_CONTEXT = "Default"

    Public Type CRYPT_INTERFACE_REG
        dwInterface As BCRYPT_CNG_INTERFACES
        dwFlags As BCryptConfigTableFlags
        cFunctions As Long
        rgpszFunctions As LongPtr
    End Type

    Public Type CRYPT_IMAGE_REG
        pszImage As LongPtr
        cInterfaces As Long
        rgpInterfaces As LongPtr 'PCRYPT_INTERFACE_REG
    End Type

    Public Type CRYPT_PROVIDERS
        cProviders As Long
        rgpszProviders As LongPtr
    End Type

    Public Type CRYPT_CONTEXT_CONFIG
        dwFlags As BCryptContextConfigFlags
        dwReserved As Long
    End Type
    Public Type CRYPT_CONTEXT_FUNCTION_CONFIG
        dwFlags As BCryptContextConfigFlags
        dwReserved As Long
    End Type

    Public Type CRYPT_CONTEXTS
        cContexts As Long
        rgpszContexts As LongPtr
    End Type

    Public Type CRYPT_CONTEXT_FUNCTIONS
        cFunctions As Long
        rgpszFunctions As LongPtr
    End Type

    Public Type CRYPT_CONTEXT_FUNCTION_PROVIDERS
        cProviders As Long
        rgpszProviders As LongPtr
    End Type

    Public Type CRYPT_PROPERTY_REF
        pszProperty As LongPtr
        cbValue As Long
        pbValue As LongPtr 'PUCHAR
    End Type

    Public Type CRYPT_IMAGE_REF
        pszImage As LongPtr
        dwFlags As BCryptIFacrRegFlags
    End Type

    Public Type CRYPT_PROVIDER_REF
        /*[ TypeHint(BCRYPT_CNG_INTERFACES, NCRYPT_CNG_INTERFACES) ] */ dwInterface As BCRYPT_CNG_INTERFACES
        pszFunction As LongPtr
        pszProvider As LongPtr
        cProperties As Long
        rgpProperties As LongPtr 'PCRYPT_PROPERTY_REF
        pUM As LongPtr 'PCRYPT_IMAGE_REF
        pKM As LongPtr 'PCRYPT_IMAGE_REF
    End Type
    Public Type CRYPT_PROVIDER_REFS
        cProviders As Long
        rgpProviders As LongPtr 'PCRYPT_PROVIDER_REF
    End Type

    Public DeclareWide PtrSafe Function BCryptQueryProviderRegistration Lib "bcrypt" (ByVal pszProvider As String, ByVal dwMode As BCryptProviderModeFlags, [TypeHint(BCRYPT_CNG_INTERFACES, NCRYPT_CNG_INTERFACES)] ByVal dwInterface As Long, pcbBuffer As Long, ppBuffer As LongPtr) As NTSTATUS
    Public Declare PtrSafe Function BCryptEnumRegisteredProviders Lib "bcrypt" (pcbBuffer As Long, ppBuffer As LongPtr) As NTSTATUS
    Public DeclareWide PtrSafe Function BCryptCreateContext Lib "bcrypt" (ByVal dwTable As BCryptConfigTableFlags, ByVal pszContext As String, pConfig As CRYPT_CONTEXT_CONFIG) As NTSTATUS
    Public DeclareWide PtrSafe Function BCryptDeleteContext Lib "bcrypt" (ByVal dwTable As BCryptConfigTableFlags, ByVal pszContext As String) As NTSTATUS
    Public Declare PtrSafe Function BCryptEnumContexts Lib "bcrypt" (ByVal dwTable As BCryptConfigTableFlags, pcbBuffer As Long, ppBuffer As LongPtr) As NTSTATUS
    Public DeclareWide PtrSafe Function BCryptConfigureContext Lib "bcrypt" (ByVal dwTable As BCryptConfigTableFlags, ByVal pszContext As String, pConfig As CRYPT_CONTEXT_CONFIG) As NTSTATUS
    Public DeclareWide PtrSafe Function BCryptQueryContextConfiguration Lib "bcrypt" (ByVal dwTable As BCryptConfigTableFlags, ByVal pszContext As String, pcbBuffer As Long, ppBuffer As LongPtr) As NTSTATUS
    Public DeclareWide PtrSafe Function BCryptAddContextFunction Lib "bcrypt" (ByVal dwTable As BCryptConfigTableFlags, ByVal pszContext As String, [TypeHint(BCRYPT_CNG_INTERFACES, NCRYPT_CNG_INTERFACES)] ByVal dwInterface As Long, ByVal pszFunction As String, [TypeHint(BCryptPriorityListnFlags)] ByVal dwPosition As Long) As NTSTATUS
    Public DeclareWide PtrSafe Function BCryptRemoveContextFunction Lib "bcrypt" (ByVal dwTable As BCryptConfigTableFlags, ByVal pszContext As String, [TypeHint(BCRYPT_CNG_INTERFACES, NCRYPT_CNG_INTERFACES)] ByVal dwInterface As Long, ByVal pszFunction As String) As NTSTATUS
    Public DeclareWide PtrSafe Function BCryptEnumContextFunctions Lib "bcrypt" (ByVal dwTable As BCryptConfigTableFlags, ByVal pszContext As String, [TypeHint(BCRYPT_CNG_INTERFACES, NCRYPT_CNG_INTERFACES)] ByVal dwInterface As Long, pcbBuffer As Long, ppBuffer As LongPtr) As NTSTATUS
    Public DeclareWide PtrSafe Function BCryptConfigureContextFunction Lib "bcrypt" (ByVal dwTable As BCryptConfigTableFlags, ByVal pszContext As String, [TypeHint(BCRYPT_CNG_INTERFACES, NCRYPT_CNG_INTERFACES)] ByVal dwInterface As Long, ByVal pszFunction As String, pConfig As CRYPT_CONTEXT_FUNCTION_CONFIG) As NTSTATUS
    Public DeclareWide PtrSafe Function BCryptQueryContextFunctionConfiguration Lib "bcrypt" (ByVal dwTable As BCryptConfigTableFlags, ByVal pszContext As String, [TypeHint(BCRYPT_CNG_INTERFACES, NCRYPT_CNG_INTERFACES)] ByVal dwInterface As Long, ByVal pszFunction As String, pcbBuffer As Long, ppBuffer As LongPtr) As NTSTATUS
    Public DeclareWide PtrSafe Function BCryptEnumContextFunctionProviders Lib "bcrypt" (ByVal dwTable As BCryptConfigTableFlags, ByVal pszContext As String, [TypeHint(BCRYPT_CNG_INTERFACES, NCRYPT_CNG_INTERFACES)] ByVal dwInterface As Long, ByVal pszFunction As String, pcbBuffer As Long, ppBuffer As LongPtr) As NTSTATUS
    Public DeclareWide PtrSafe Function BCryptSetContextFunctionProperty Lib "bcrypt" (ByVal dwTable As BCryptConfigTableFlags, ByVal pszContext As String, [TypeHint(BCRYPT_CNG_INTERFACES, NCRYPT_CNG_INTERFACES)] ByVal dwInterface As Long, ByVal pszFunction As String, ByVal pszProperty As String, ByVal cbValue As Long, pbValue As Any) As NTSTATUS
    Public DeclareWide PtrSafe Function BCryptQueryContextFunctionProperty Lib "bcrypt" (ByVal dwTable As BCryptConfigTableFlags, ByVal pszContext As String, [TypeHint(BCRYPT_CNG_INTERFACES, NCRYPT_CNG_INTERFACES)] ByVal dwInterface As Long, ByVal pszFunction As String, ByVal pszProperty As String, pcbValue As Long, pbValue As LongPtr) As NTSTATUS
    #If KERNEL_MODE_CNG Then
    Public Declare PtrSafe Function BCryptRegisterConfigChangeNotify Lib "bcrypt" (pEvent As KEVENT) As NTSTATUS
    #Else
    Public Declare PtrSafe Function BCryptRegisterConfigChangeNotify Lib "bcrypt" (phEvent As LongPtr) As NTSTATUS
    #End If
    #If KERNEL_MODE_CNG Then
    Public Declare PtrSafe Function BCryptUnregisterConfigChangeNotify Lib "bcrypt" (pEvent As KEVENT) As NTSTATUS
    #Else
    Public Declare PtrSafe Function BCryptUnregisterConfigChangeNotify Lib "bcrypt" (ByVal hEvent As LongPtr) As NTSTATUS
    #End If
    Public DeclareWide PtrSafe Function BCryptResolveProviders Lib "bcrypt" (ByVal pszContext As String, [TypeHint(BCRYPT_CNG_INTERFACES, NCRYPT_CNG_INTERFACES)] ByVal dwInterface As Long, ByVal pszFunction As String, ByVal pszProvider As String, ByVal dwMode As BCryptProviderModeFlags, ByVal dwFlags As BCryptResolutionFlags, pcbBuffer As Long, ppBuffer As LongPtr) As NTSTATUS
    Public Declare PtrSafe Function BCryptGetFipsAlgorithmMode Lib "bcrypt" (pfEnabled As Byte) As NTSTATUS
    Public Declare PtrSafe Function CngGetFipsAlgorithmMode Lib "bcrypt" () As Byte


    #End Region

    #Region "ncrypt"
    'ncrypt.h 100%
    'ncryptprotect.h 100%

    Public Const NCRYPT_MAX_KEY_NAME_LENGTH  = 512
    '  Maximum length of Algorithm name, in characters
    Public Const NCRYPT_MAX_ALG_ID_LENGTH  = 512

    Public Type NCRYPT_ALLOC_PARA
        cbSize As Long ' size of this structure
        pfnAlloc As LongPtr 'PFN_NCRYPT_ALLOC
        pfnFree As LongPtr 'PFN_NCRYPT_FREE
    End Type

    Public Const MS_KEY_STORAGE_PROVIDER  = "Microsoft Software Key Storage Provider"
    Public Const MS_SMART_CARD_KEY_STORAGE_PROVIDER  = "Microsoft Smart Card Key Storage Provider"
    Public Const MS_PLATFORM_KEY_STORAGE_PROVIDER  = "Microsoft Platform Crypto Provider"
    Public Const MS_NGC_KEY_STORAGE_PROVIDER  = "Microsoft Passport Key Storage Provider"
    '  Key name for sealing
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_RS1)
    Public Const TPM_RSA_SRK_SEAL_KEY  = "MICROSOFT_PCP_KSP_RSA_SEAL_KEY_3BD1C4BF-004E-4E2F-8A4D-0BF633DCB074"

    Public Const NCRYPT_RSA_ALGORITHM  = BCRYPT_RSA_ALGORITHM
    Public Const NCRYPT_RSA_SIGN_ALGORITHM  = BCRYPT_RSA_SIGN_ALGORITHM
    Public Const NCRYPT_DH_ALGORITHM  = BCRYPT_DH_ALGORITHM
    Public Const NCRYPT_DSA_ALGORITHM  = BCRYPT_DSA_ALGORITHM
    Public Const NCRYPT_MD2_ALGORITHM  = BCRYPT_MD2_ALGORITHM
    Public Const NCRYPT_MD4_ALGORITHM  = BCRYPT_MD4_ALGORITHM
    Public Const NCRYPT_MD5_ALGORITHM  = BCRYPT_MD5_ALGORITHM
    Public Const NCRYPT_SHA1_ALGORITHM  = BCRYPT_SHA1_ALGORITHM
    Public Const NCRYPT_SHA256_ALGORITHM  = BCRYPT_SHA256_ALGORITHM
    Public Const NCRYPT_SHA384_ALGORITHM  = BCRYPT_SHA384_ALGORITHM
    Public Const NCRYPT_SHA512_ALGORITHM  = BCRYPT_SHA512_ALGORITHM
    Public Const NCRYPT_ECDSA_P256_ALGORITHM  = BCRYPT_ECDSA_P256_ALGORITHM
    Public Const NCRYPT_ECDSA_P384_ALGORITHM  = BCRYPT_ECDSA_P384_ALGORITHM
    Public Const NCRYPT_ECDSA_P521_ALGORITHM  = BCRYPT_ECDSA_P521_ALGORITHM
    Public Const NCRYPT_ECDH_P256_ALGORITHM  = BCRYPT_ECDH_P256_ALGORITHM
    Public Const NCRYPT_ECDH_P384_ALGORITHM  = BCRYPT_ECDH_P384_ALGORITHM
    Public Const NCRYPT_ECDH_P521_ALGORITHM  = BCRYPT_ECDH_P521_ALGORITHM
    ' #if (NTDDI_VERSION >= NTDDI_WIN8)
    Public Const NCRYPT_AES_ALGORITHM  = BCRYPT_AES_ALGORITHM
    Public Const NCRYPT_RC2_ALGORITHM  = BCRYPT_RC2_ALGORITHM
    Public Const NCRYPT_3DES_ALGORITHM  = BCRYPT_3DES_ALGORITHM
    Public Const NCRYPT_DES_ALGORITHM  = BCRYPT_DES_ALGORITHM
    Public Const NCRYPT_DESX_ALGORITHM  = BCRYPT_DESX_ALGORITHM
    Public Const NCRYPT_3DES_112_ALGORITHM  = BCRYPT_3DES_112_ALGORITHM
    Public Const NCRYPT_SP800108_CTR_HMAC_ALGORITHM  = BCRYPT_SP800108_CTR_HMAC_ALGORITHM
    Public Const NCRYPT_SP80056A_CONCAT_ALGORITHM  = BCRYPT_SP80056A_CONCAT_ALGORITHM
    Public Const NCRYPT_PBKDF2_ALGORITHM  = BCRYPT_PBKDF2_ALGORITHM
    Public Const NCRYPT_CAPI_KDF_ALGORITHM  = BCRYPT_CAPI_KDF_ALGORITHM
    ' #endif // (NTDDI_VERSION >= NTDDI_WIN8)
    ' #if (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)
    Public Const NCRYPT_ECDSA_ALGORITHM  = BCRYPT_ECDSA_ALGORITHM
    Public Const NCRYPT_ECDH_ALGORITHM  = BCRYPT_ECDH_ALGORITHM
    ' #endif // (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)
    Public Const NCRYPT_KEY_STORAGE_ALGORITHM  = "KEY_STORAGE"
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_RS1)
    Public Const NCRYPT_HMAC_SHA256_ALGORITHM  = "HMAC-SHA256"

    Public Const NCRYPT_RSA_ALGORITHM_GROUP  = NCRYPT_RSA_ALGORITHM
    Public Const NCRYPT_DH_ALGORITHM_GROUP  = NCRYPT_DH_ALGORITHM
    Public Const NCRYPT_DSA_ALGORITHM_GROUP  = NCRYPT_DSA_ALGORITHM
    Public Const NCRYPT_ECDSA_ALGORITHM_GROUP  = "ECDSA"
    Public Const NCRYPT_ECDH_ALGORITHM_GROUP  = "ECDH"
    '#if (NTDDI_VERSION  = >= NTDDI_WIN8)
    Public Const NCRYPT_AES_ALGORITHM_GROUP  = NCRYPT_AES_ALGORITHM
    Public Const NCRYPT_RC2_ALGORITHM_GROUP  = NCRYPT_RC2_ALGORITHM
    Public Const NCRYPT_DES_ALGORITHM_GROUP  = "DES"
    Public Const NCRYPT_KEY_DERIVATION_GROUP  = "KEY_DERIVATION"

    Public Enum NCryptMemoryDescriptors
        NCRYPTBUFFER_VERSION = 0
        NCRYPTBUFFER_EMPTY = 0
        NCRYPTBUFFER_DATA = 1
    ' #if (NTDDI_VERSION >= NTDDI_WIN8)
        NCRYPTBUFFER_PROTECTION_DESCRIPTOR_STRING = 3  ' The buffer contains a null-terminated Unicode string that contains the Protection Descriptor.
        NCRYPTBUFFER_PROTECTION_FLAGS = 4  ' DWORD flags to be passed to NCryptCreateProtectionDescriptor function.
    ' #endif // (NTDDI_VERSION >= NTDDI_WIN8)
        NCRYPTBUFFER_SSL_CLIENT_RANDOM = 20
        NCRYPTBUFFER_SSL_SERVER_RANDOM = 21
        NCRYPTBUFFER_SSL_HIGHEST_VERSION = 22
        NCRYPTBUFFER_SSL_CLEAR_KEY = 23
        NCRYPTBUFFER_SSL_KEY_ARG_DATA = 24
    ' #if (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)
        NCRYPTBUFFER_SSL_SESSION_HASH = 25
    ' #endif // (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)
        NCRYPTBUFFER_PKCS_OID = 40
        NCRYPTBUFFER_PKCS_ALG_OID = 41
        NCRYPTBUFFER_PKCS_ALG_PARAM = 42
        NCRYPTBUFFER_PKCS_ALG_ID = 43
        NCRYPTBUFFER_PKCS_ATTRS = 44
        NCRYPTBUFFER_PKCS_KEY_NAME = 45
        NCRYPTBUFFER_PKCS_SECRET = 46
        NCRYPTBUFFER_CERT_BLOB = 47
    ' for threshold key attestation
        NCRYPTBUFFER_CLAIM_IDBINDING_NONCE = 48
        NCRYPTBUFFER_CLAIM_KEYATTESTATION_NONCE = 49
        NCRYPTBUFFER_KEY_PROPERTY_FLAGS = 50
        NCRYPTBUFFER_ATTESTATIONSTATEMENT_BLOB = 51
        NCRYPTBUFFER_ATTESTATION_CLAIM_TYPE = 52
        NCRYPTBUFFER_ATTESTATION_CLAIM_CHALLENGE_REQUIRED = 53
    ' #if (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)
    ' for generic ecc
        NCRYPTBUFFER_ECC_CURVE_NAME = 60
        NCRYPTBUFFER_ECC_PARAMETERS = 61
    ' #endif // (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_RS1)
    ' for TPM seal
        NCRYPTBUFFER_TPM_SEAL_PASSWORD = 70
        NCRYPTBUFFER_TPM_SEAL_POLICYINFO = 71
        NCRYPTBUFFER_TPM_SEAL_TICKET = 72
        NCRYPTBUFFER_TPM_SEAL_NO_DA_PROTECTION = 73
    ' #endif // (NTDDI_VERSION >= NTDDI_WIN10_RS1)
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_RS5)
    '  for TPM platform attestation statements
        NCRYPTBUFFER_TPM_PLATFORM_CLAIM_PCR_MASK = 80
        NCRYPTBUFFER_TPM_PLATFORM_CLAIM_NONCE = 81
        NCRYPTBUFFER_TPM_PLATFORM_CLAIM_STATIC_CREATE = 82
    ' #endif // (NTDDI_VERSION >= NTDDI_WIN10_RS5)
    ' #if (NTDDI_VERSION >= NTDDI_WIN11_SV3)
        NCRYPTBUFFER_ATTESTATION_STATEMENT_SIGNATURE_HASH = 90
        NCRYPTBUFFER_ATTESTATION_STATEMENT_SIGNATURE_PADDING_SCHEME = 91
        NCRYPTBUFFER_ATTESTATION_STATEMENT_SIGNATURE_PADDING_ALGO = 92
        NCRYPTBUFFER_ATTESTATION_STATEMENT_SIGNATURE_PADDING_SALT_SIZE = 93
        NCRYPTBUFFER_ATTESTATION_STATEMENT_SIGNATURE_PADDING_SALT = NCRYPTBUFFER_ATTESTATION_STATEMENT_SIGNATURE_PADDING_SALT_SIZE  ' Added to avoid failure for existing users
        NCRYPTBUFFER_ATTESTATION_STATEMENT_NONCE = NCRYPTBUFFER_CLAIM_KEYATTESTATION_NONCE
        NCRYPTBUFFER_VBS_ATTESTATION_STATEMENT_ROOT_DETAILS = 94
        NCRYPTBUFFER_VBS_ATTESTATION_STATEMENT_IDENTITY_DETAILS = 95
    End Enum


    ' // NCRYPT shares the same BCRYPT definitions
    'Alias BCryptBuffer     NCryptBuffer;
    ' typedef BCryptBuffer*    PNCryptBuffer;
    'Alias BCryptBufferDesc NCryptBufferDesc;
    ' typedef BCryptBufferDesc* PNCryptBufferDesc;

    Public Type NCryptBuffer
        cbBuffer As Long ' Length of buffer, in bytes
        BufferType As BCryptKdfBufferTypes ' Buffer type
        pvBuffer As LongPtr ' Pointer to buffer
    End Type
    Public Type NCryptBufferDesc
        ulVersion As Long ' Version number
        cBuffers As Long ' Number of buffers
        pBuffers As LongPtr 'PBCryptBuffer ' Pointer to array of buffers
    End Type

    Public Enum NCryptCipherPaddingFlags
        NCRYPT_CIPHER_NO_PADDING_FLAG = &H00000000
        NCRYPT_CIPHER_BLOCK_PADDING_FLAG = &H00000001
        NCRYPT_CIPHER_OTHER_PADDING_FLAG = &H00000002
    End Enum
    Public Type NCRYPT_CIPHER_PADDING_INFO
        ' size of this struct
        cbSize As Long
        ' See NCRYPT_CIPHER_ flag values
        dwFlags As NCryptCipherPaddingFlags
        ' [in, out, optional]
        ' The address of a buffer that contains the initialization vector (IV) to use during encryption.
        ' The cbIV parameter contains the size of this buffer. This function will modify the contents of this buffer.
        ' If you need to reuse the IV later, make sure you make a copy of this buffer before calling this function.
        '_Field_size_bytes_(cbIV)
        pbIV As LongPtr 'PUCHAR
        cbIV As Long
        ' [in, out, optional]
        ' The address of a buffer that contains the algorithm specific info to use during encryption.
        ' The cbOtherInfo parameter contains the size of this buffer. This function will modify the contents of this buffer.
        ' If you need to reuse the buffer later, make sure you make a copy of this buffer before calling this function.
        ' For Microsoft providers, when an authenticated encryption mode is used,
        ' this parameter must point to a serialized BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO structure.
        ' NOTE: All pointers inside a structure must be to a data allocated within pbOtherInfo buffer.
        '_Field_size_bytes_(cbOtherInfo)
        pbOtherInfo As LongPtr 'PUCHAR
        cbOtherInfo As Long
    End Type

    Public Const NCRYPT_PLATFORM_ATTEST_MAGIC  = &H44504150  ' 'PAPD'
    Public Type NCRYPT_PLATFORM_ATTEST_PADDING_INFO
        magic As Long ' 'PAPD'
        pcrMask As Long
    End Type

    Public Const NCRYPT_KEY_ATTEST_MAGIC  = &H4450414b  ' 'KAPD'
    Public Type NCRYPT_KEY_ATTEST_PADDING_INFO
        magic As Long ' 'KAPD'
        pbKeyBlob As LongPtr 'PUCHAR
        cbKeyBlob As Long
        pbKeyAuth As LongPtr 'PUCHAR
        cbKeyAuth As Long
    End Type

    Public Enum NCryptKeyAttestClaimTypes
        NCRYPT_CLAIM_AUTHORITY_ONLY = &H00000001
        NCRYPT_CLAIM_SUBJECT_ONLY = &H00000002
        NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT = &H00000003
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_RS3)
        NCRYPT_CLAIM_VBS_KEY_ATTESTATION_STATEMENT = &H00000004
    ' #endif // (NTDDI_VERSION >= NTDDI_WIN10_RS3)
    ' #if (NTDDI_VERSION >= NTDDI_WIN11_SV3)
        NCRYPT_CLAIM_VBS_ROOT = &H00000005
        NCRYPT_CLAIM_VBS_IDENTITY = &H00000006
    ' #endif // (NTDDI_VERSION >= NTDDI_WIN11_SV3)
        NCRYPT_CLAIM_WEB_AUTH_SUBJECT_ONLY = &H00000102
        NCRYPT_CLAIM_UNKNOWN = &H00001000
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_RS5)
        NCRYPT_CLAIM_PLATFORM = &H00010000
    ' #endif // (NTDDI_VERSION >= NTDDI_WIN10_RS5)
    ' #if (NTDDI_VERSION >= NTDDI_WIN11_SV3)
        NCRYPT_CLAIM_WEB_AUTH_SUBJECT_ONLY_V2 = &H00000103
    End Enum

    Public Enum NCryptCreateClaimFlags
        NCRYPT_ISOLATED_KEY_FLAG_CREATED_IN_ISOLATION = &H00000001  ' if set, this key was generated in isolation, not imported
        NCRYPT_ISOLATED_KEY_FLAG_IMPORT_ONLY = &H00000002  ' if set, this key can only be used for importing other keys
        '#if (NTDDI_VERSION  = >= NTDDI_WIN11_SV3)
        NCRYPT_ISOLATED_KEY_FLAG_PER_BOOT_KEY = &H00000004  ' Indicates renewed keys per boot
        NCRYPT_VBS_KEY_FLAG_CREATED_IN_ISOLATION = NCRYPT_ISOLATED_KEY_FLAG_CREATED_IN_ISOLATION
        NCRYPT_VBS_KEY_FLAG_IMPORT_ONLY = NCRYPT_ISOLATED_KEY_FLAG_IMPORT_ONLY
        NCRYPT_VBS_KEY_FLAG_PER_BOOT_KEY = NCRYPT_ISOLATED_KEY_FLAG_PER_BOOT_KEY
    End Enum

    Public Const NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_V0  = 0
    Public Const NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_CURRENT_VERSION  = NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_V0

    Public Type NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES
        Version As Long ' set to NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_V0
        Flags As NCryptCreateClaimFlags ' NCRYPT_VBS_KEY_FLAG_... flags
        cbPublicKeyBlob As Long
        ' pbPublicKeyBlob[cbPublicKeyBlob] - exported public key
    End Type
    'Alias NCRYPT_VBS_KEY_ATTESTED_ATTRIBUTES                 NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES
    Public Type NCRYPT_VBS_KEY_ATTESTED_ATTRIBUTES
        Version As Long ' set to NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_V0
        Flags As NCryptCreateClaimFlags ' NCRYPT_VBS_KEY_FLAG_... flags
        cbPublicKeyBlob As Long
        ' pbPublicKeyBlob[cbPublicKeyBlob] - exported public key
    End Type

    Public Const NCRYPT_VBS_KEY_ATTESTED_ATTRIBUTES_CURRENT_VERSION = NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_CURRENT_VERSION

    Public Const NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_V0  = 0
    Public Const NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_CURRENT_VERSION  = NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_V0

    Public Type NCRYPT_EXPORTED_ISOLATED_KEY_HEADER
        Version As Long ' Set to NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_V0
        KeyUsage As Long ' Set to NCRYPT_ALLOW_KEY_IMPORT_FLAG for import-only keys
        PerBootKey /*: 1*/ As Long  ' Set to TRUE if the key is to be valid in the current boot cycle only
        'Reserved :31 As Long ' Leave as 0
        cbAlgName As Long ' Number of bytes in Unicode algorithm name following header + terminating NULL
        cbNonce As Long ' Number of bytes in the nonce used to encrypt the isolated key
        cbAuthTag As Long ' Number of bytes in authentication tag resulting from encrypting the isolated key
        cbWrappingKey As Long ' Number of bytes in encrypted wrapping key blob
        cbIsolatedKey As Long ' Number of bytes in encrypted isolated key blob
    End Type

    Public Type NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE
        Header As NCRYPT_EXPORTED_ISOLATED_KEY_HEADER
        ' UCHAR AlgorithmName[Header.cbAlgName]       -- Unicode algorithm name including terminating NULL
        ' UCHAR Nonce[Header.cbNonce]                 -- Nonce buffer used when encrypting isolated key
        ' ---- data after this point is not integrity protected in transit
        ' UCHAR AesGcmAuthTag[Header.cbAuthTag]
        ' UCHAR WrappingKeyBlob[Header.cbWrappingKey] -- RSA-OAEP encrypted AES wrapping key
        ' UCHAR IsolatedKeyBlob[Header.cbIsolatedKey] -- AES-GCM encrypted key to import
    End Type

    Public Const NCRYPT_VBS_ROOT_ATTESTATION_HEADER_V0  = 0
    Public Const NCRYPT_VBS_ROOT_ATTESTATION_HEADER_CURRENT_VERSION  = NCRYPT_VBS_ROOT_ATTESTATION_HEADER_V0
    Public Const VBS_ROOT_ATTESTATION_HEADER_MAGIC  = &H48435256  ' 'VRCH' = 0x56, 0x52, 0x43, 0x48.
    Public Type NCRYPT_VBS_ROOT_ATTESTATION_HEADER
        Magic As Long ' {'H', 'C', 'R', 'V'} - 'VRCH' for VBS Root Claim Header
        Version As Long ' Set to NCRYPT_VBS_ROOT_ATTESTATION_HEADER_CURRENT_VERSION
        cbAttributes As Long ' Number of bytes in attributes of the isolated key (including public key blob )
        cbNonce As Long ' Number of bytes in the provided nonce, can be 0 if nonce doesn't exist
        cbReport As Long ' Number of bytes in key isolation report from the secure kernel
        cbSignature As Long ' Number of bytes in the secure kernel signature over the isolation report
        ' UCHAR Attributes[cbAttributes]  -- Trustlet-reported attributes of the key
        ' UCHAR Nonce[cbNonce]            -- Nonce value to be used when hashing Attributes
        ' UCHAR Report[cbReport]          -- Secure kernel report including hash of Attributes, dwFlags and nonce (if available)
        ' UCHAR Signature[cbSignature]    -- Secure kernel signature of the report
    End Type

    Public Const NCRYPT_VBS_IDENTITY_ATTESTATION_PADDING_V0  = 0
    Public Const NCRYPT_VBS_IDENTITY_ATTESTATION_PADDING_CURRENT_VERSION  = NCRYPT_VBS_IDENTITY_ATTESTATION_PADDING_V0
    Public Type NCRYPT_VBS_IDENTITY_ATTESTATION_PADDING
        Version As Long ' Set to NCRYPT_VBS_IDENTITY_ATTESTATION_PADDING_CURRENT_VERSION
        ulPaddingScheme As Long ' Padding scheme of the signing algorithm that was used through claim creation.
        cbHashAlg As Long ' Number of bytes in Unicode name that identifies the cryptographic padding algorithm. This algorithm must be a hashing algorithm.
        ulSalt As Long ' Number of bytes in of the random salt to use for the padding.
        ' UCHAR HashAlg[cbHashAlg]  -- Unicode name of hash algorithm used through attributes signing to create padding
    End Type

    Public Const NCRYPT_VBS_IDENTITY_ATTESTATION_HEADER_V0  = 0
    Public Const NCRYPT_VBS_IDENTITY_ATTESTATION_HEADER_CURRENT_VERSION  = NCRYPT_VBS_IDENTITY_ATTESTATION_HEADER_V0
    Public Const VBS_IDENTITY_ATTESTATION_HEADER_MAGIC  = &H48434956  ' 'VICH' = 0x56, 0x49, 0x43, 0x48.
    Public Type NCRYPT_VBS_IDENTITY_ATTESTATION_HEADER
        Magic As Long ' {'H', 'C', 'I', 'V'} - 'VICH' for VBS Identity Claim Header
        Version As Long ' Set to NCRYPT_VBS_IDENTITY_ATTESTATION_HEADER_CURRENT_VERSION
        cbAttributes As Long ' Number of bytes in attributes of the isolated key (including public key blob )
        cbNonce As Long ' Number of bytes in the provided nonce, can be 0 if nonce doesn't exist
        cbHashAlg As Long ' Number of bytes in Unicode name of hash algorithm used
        cbPadding As Long ' Padding info (scheme and more) of the signing algorithm that was used through claim creation
        cbSignatureAlg As Long ' Number of bytes in Unicode name of the signing hash algorithm used
        cbSignature As Long ' Number of bytes in the signature over the hash of Attributes, dwFlags and nonce (if available)
        ' UCHAR Attributes[cbAttributes]     -- Trustlet-reported attributes of the subject key blob
        ' UCHAR Nonce[cbNonce]               -- Nonce value to be used when hashing Attributes
        ' UCHAR HashAlg[cbHashAlg]           -- Unicode name of hash algorithm used through attributes signing
        ' UCHAR Padding[cbPadding]           -- Padding information that is set through identity hash signing
        ' UCHAR SignatureAlg[cbSignatureAlg] -- Unicode name of signing algorithm used
        ' UCHAR Signature[cbSignature]       -- Signature over the hash of Attributes and nonce (if available)
    End Type

    Public Const NCRYPT_VBS_KEY_ATTESTATION_STATEMENT_V1  = 1
    Public Const NCRYPT_VBS_KEY_ATTESTATION_STATEMENT_CURRENT_VERSION  = NCRYPT_VBS_KEY_ATTESTATION_STATEMENT_V1
    Public Const VBS_KEY_ATTESTATION_STATEMENT_MAGIC  = &H53414B56  ' 'VKAS' = 0x56, 0x4B, 0x41, 0x53.
    Public Type NCRYPT_VBS_KEY_ATTESTATION_STATEMENT
        Magic As Long ' {'S', 'A', 'K', 'V'} - 'VKAS' for VBS Key Attestation Statement
        Version As Long ' Set to NCRYPT_VBS_KEY_ATTESTATION_STATEMENT_CURRENT_VERSION
        ClaimType As NCryptKeyAttestClaimTypes ' The claim type in the memory that follows this structure
        ' Root binary data - NCRYPT_VBS_ROOT_ATTESTATION_HEADER
        ' UCHAR Attributes[cbAttributes]  -- Trustlet-reported attributes of the key
        ' UCHAR Nonce[cbNonce]            -- Nonce value to be used when hashing Attributes
        ' UCHAR Report[cbReport]          -- Secure kernel report including hash of Attributes, dwFlags and nonce (if available)
        ' UCHAR Signature[cbSignature]    -- Secure kernel signature of the report
        ' --------------------------------------------------------------------------------------
        ' Identity binary data - NCRYPT_VBS_IDENTITY_ATTESTATION_HEADER
        ' UCHAR Attributes[cbAttributes]      -- Trustlet-reported attributes of the subject key blob
        ' UCHAR Nonce[cbNonce]                -- Nonce value to be used when hashing Attributes
        ' UCHAR HashAlg[cbHashAlg]            -- Unicode name of hash algorithm used through attributes signing
        ' UCHAR Padding[cbPadding]            -- Padding information that is set through identity hash signing
        ' UCHAR SignatureAlg[cbSignatureAlg]  -- Unicode name of signing algorithm used
        ' UCHAR Signature[cbSignature]        -- Signature over the hash of Attributes and nonce (if available)
    End Type

    Public Type NCRYPT_VBS_ROOT_KEY_ATTESTATION_CLAIM_DETAILS
        ulKeyFlags As NCryptCreateClaimFlags ' NCRYPT_ISOLATED_KEY_ flags
        ullTrustletId As LongLong ' Trustlet ID
        ulTrustletSecurityVersion As Long ' Trustlet Security Version Number
        ulTrustletDebuggable As Long ' Indicates that the Trustlet can be debugged
    End Type

    Public Type NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT
        Magic As Long ' { 'A', 'W', 'A', 'K' } - 'KAWA'
        Version As Long ' 1 for the statement defined in this specification
        HeaderSize As Long ' 24
        cbCertifyInfo As Long
        cbSignature As Long
        cbTpmPublic As Long
        ' CertifyInfo[cbCertifyInfo];
        ' Signature[cbSignature];
        ' TpmPublic[cbTpmPublic];
    End Type

    Public Const NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_V0  = 0
    Public Const NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_CURRENT_VERSION  = NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_V0
    Public Type NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT
        Magic As Long ' {'A', 'L', 'P', 'T'} - 'TPLA' for TPM Platform
        Version As Long ' Set to NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_CURRENT_VERSION
        pcrAlg As Long ' The TPM hash algorithm ID
        cbSignature As Long ' TPMT_SIGNATURE structure signature over the quote
        cbQuote As Long ' TPMS_ATTEST structure that was generated and signed
        cbPcrs As Long ' Raw concatenation of all 24 PCRs
        ' UCHAR Signature[cbSignature]
        ' UCHAR Quote[cbQuote]
        ' UCHAR Pcrs[cbPcrs]
    End Type

    Public Enum NCryptEncryptFlags
        NCRYPT_NO_PADDING_FLAG = &H00000001  ' NCryptEncrypt/Decrypt
        NCRYPT_PAD_PKCS1_FLAG = &H00000002  ' NCryptEncrypt/Decrypt NCryptSignHash/VerifySignature
        NCRYPT_PAD_OAEP_FLAG = &H00000004  ' BCryptEncrypt/Decrypt
        NCRYPT_PAD_PSS_FLAG = &H00000008  ' BCryptSignHash/VerifySignature
    ' #if (NTDDI_VERSION >= NTDDI_WIN8)
        NCRYPT_PAD_CIPHER_FLAG = &H00000010  ' NCryptEncrypt/Decrypt
    ' #endif // (NTDDI_VERSION >= NTDDI_WIN8)
    ' #if (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)
        NCRYPT_ATTESTATION_FLAG = &H00000020  ' NCryptDecrypt for key attestation
    ' #endif // (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_RS1)
        NCRYPT_SEALING_FLAG = &H00000100  ' NCryptEncrypt/Decrypt for sealing
    End Enum

    Public Enum NCryptFlags
        NCRYPT_REGISTER_NOTIFY_FLAG = &H00000001  ' NCryptNotifyChangeKey
        NCRYPT_UNREGISTER_NOTIFY_FLAG = &H00000002  ' NCryptNotifyChangeKey
        NCRYPT_NO_KEY_VALIDATION = BCRYPT_NO_KEY_VALIDATION
        NCRYPT_MACHINE_KEY_FLAG = &H00000020  ' same as CAPI CRYPT_MACHINE_KEYSET
        'NCRYPT_SILENT_FLAG = &H00000040  ' same as CAPI CRYPT_SILENT
        NCRYPT_OVERWRITE_KEY_FLAG = &H00000080
        NCRYPT_WRITE_KEY_TO_LEGACY_STORE_FLAG = &H00000200
        NCRYPT_DO_NOT_FINALIZE_FLAG = &H00000400
        NCRYPT_EXPORT_LEGACY_FLAG = &H00000800
    ' #if (NTDDI_VERSION >= NTDDI_WINBLUE)
        'NCRYPT_IGNORE_DEVICE_STATE_FLAG  = &H00001000  ' NCryptOpenStorageProvider
    ' #endif // (NTDDI_VERSION >= NTDDI_WINBLUE)
    ' #if (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)
        NCRYPT_TREAT_NIST_AS_GENERIC_ECC_FLAG = &H00002000
        NCRYPT_NO_CACHED_PASSWORD = &H00004000
        NCRYPT_PROTECT_TO_LOCAL_SYSTEM = &H00008000&
    ' #endif // (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)
        NCRYPT_REQUIRE_KDS_LRPC_BIND_FLAG = &H20000000
        NCRYPT_PERSIST_ONLY_FLAG = &H40000000
        NCRYPT_PERSIST_FLAG = &H80000000
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_RS2)
        NCRYPT_PREFER_VIRTUAL_ISOLATION_FLAG = &H00010000  ' NCryptCreatePersistedKey NCryptImportKey
        NCRYPT_USE_VIRTUAL_ISOLATION_FLAG = &H00020000  ' NCryptCreatePersistedKey NCryptImportKey
        NCRYPT_USE_PER_BOOT_KEY_FLAG = &H00040000  ' NCryptCreatePersistedKey NCryptImportKey
    ' #endif // (NTDDI_VERSION >= NTDDI_WIN10_RS2)
    ' #if (NTDDI_VERSION >= NTDDI_WIN11_SV3)
        NCRYPT_PREFER_VBS_FLAG = NCRYPT_PREFER_VIRTUAL_ISOLATION_FLAG  ' NCryptCreatePersistedKey NCryptImportKey
        NCRYPT_REQUIRE_VBS_FLAG = NCRYPT_USE_VIRTUAL_ISOLATION_FLAG  ' NCryptCreatePersistedKey NCryptImportKey
        NCRYPT_USE_VBS_PER_BOOT_KEY_FLAG = NCRYPT_USE_PER_BOOT_KEY_FLAG  ' NCryptCreatePersistedKey NCryptImportKey
        NCRYPT_VBS_RETURN_CLAIM_DETAILS_FLAG = &H00100000  ' NCryptVerifyClaim
    End Enum

    Public Enum NCryptStorageProvFlags
        NCRYPT_SILENT_FLAG = &H00000040  ' same as CAPI CRYPT_SILENT
    ' #if (NTDDI_VERSION >= NTDDI_WINBLUE)
        NCRYPT_IGNORE_DEVICE_STATE_FLAG = &H00001000  ' NCryptOpenStorageProvider
    End Enum

    Public Enum SECURITY_STATUS
        [_]
    End Enum
 
    Public DeclareWide PtrSafe Function NCryptOpenStorageProvider Lib "ncrypt" (phProvider As LongPtr, ByVal pszProviderName As String, ByVal dwFlags As Long) As SECURITY_STATUS

    Public Enum NCryptEnumAlgFlags
        NCRYPT_CIPHER_OPERATION = BCRYPT_CIPHER_OPERATION
        NCRYPT_HASH_OPERATION = BCRYPT_HASH_OPERATION
        NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = BCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION
        NCRYPT_SECRET_AGREEMENT_OPERATION = BCRYPT_SECRET_AGREEMENT_OPERATION
        NCRYPT_SIGNATURE_OPERATION = BCRYPT_SIGNATURE_OPERATION
        NCRYPT_RNG_OPERATION = BCRYPT_RNG_OPERATION
    ' #if (NTDDI_VERSION >= NTDDI_WIN8)
        NCRYPT_KEY_DERIVATION_OPERATION = BCRYPT_KEY_DERIVATION_OPERATION
    End Enum

    Public Type NCryptAlgorithmName
        pszName As LongPtr
        dwClass As NCRYPT_CNG_INTERFACES ' the CNG interface that supports this algorithm
        dwAlgOperations As NCryptEnumAlgFlags ' the types of operations supported by this algorithm
        dwFlags As Long
    End Type

    Public Declare PtrSafe Function NCryptEnumAlgorithms Lib "ncrypt" (ByVal hProvider As LongPtr, ByVal dwAlgOperations As NCryptEnumAlgFlags, pdwAlgCount As Long, ppAlgList As LongPtr, [TypeHint(NCryptStorageProvFlags)] ByVal dwFlags As Long) As SECURITY_STATUS
    Public DeclareWide PtrSafe Function NCryptIsAlgSupported Lib "ncrypt" (ByVal hProvider As LongPtr, ByVal pszAlgId As String, [TypeHint(NCryptStorageProvFlags)] ByVal dwFlags As Long) As SECURITY_STATUS

    Public Type NCryptKeyName
        pszName As LongPtr
        pszAlgid As LongPtr
        dwLegacyKeySpec As CRYPT_AT_FLAGS
        dwFlags As NCryptFlags
    End Type

    Public DeclareWide PtrSafe Function NCryptEnumKeys Lib "ncrypt" (ByVal hProvider As LongPtr, ByVal pszScope As String, ppKeyName As LongPtr, ppEnumState As LongPtr, [TypeHint(NCryptFlags, NCryptStorageProvFlags)] ByVal dwFlags As Long) As SECURITY_STATUS

    Public Type NCryptProviderName
        pszName As LongPtr
        pszComment As LongPtr
    End Type

    Public Declare PtrSafe Function NCryptEnumStorageProviders Lib "ncrypt" (pdwProviderCount As Long, ppProviderList As LongPtr, [TypeHint(NCryptStorageProvFlags)] ByVal dwFlags As Long) As SECURITY_STATUS

    Public Declare PtrSafe Function NCryptFreeBuffer Lib "ncrypt" (ByVal pvInput As LongPtr) As SECURITY_STATUS

    Public Enum NCrypOpenKeyFlags
        NCRYPT_AUTHORITY_KEY_FLAG = &H00000100
        NCRYPT_EXTENDED_ERRORS_FLAG = &H10000000
    End Enum

    Public DeclareWide PtrSafe Function NCryptOpenKey Lib "ncrypt" (ByVal hProvider As LongPtr, phKey As LongPtr, ByVal pszKeyName As String, ByVal dwLegacyKeySpec As CRYPT_AT_FLAGS, [TypeHint(NCrypOpenKeyFlags, NCryptFlags , NCryptStorageProvFlags)] ByVal dwFlags As Long) As SECURITY_STATUS

    Public DeclareWide PtrSafe Function NCryptCreatePersistedKey Lib "ncrypt" (ByVal hProvider As LongPtr, phKey As LongPtr, ByVal pszAlgId As String, ByVal pszKeyName As String, ByVal dwLegacyKeySpec As CRYPT_AT_FLAGS, [TypeHint(NCryptFlags)] ByVal dwFlags As Long) As SECURITY_STATUS

    Public Const NCRYPT_NAME_PROPERTY  = "Name"
    Public Const NCRYPT_UNIQUE_NAME_PROPERTY  = "Unique Name"
    Public Const NCRYPT_ALGORITHM_PROPERTY  = "Algorithm Name"
    Public Const NCRYPT_LENGTH_PROPERTY  = "Length"
    Public Const NCRYPT_LENGTHS_PROPERTY  = "Lengths"
    Public Const NCRYPT_BLOCK_LENGTH_PROPERTY  = "Block Length"
    ' #if (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)
    Public Const NCRYPT_PUBLIC_LENGTH_PROPERTY  = BCRYPT_PUBLIC_KEY_LENGTH
    Public Const NCRYPT_SIGNATURE_LENGTH_PROPERTY  = BCRYPT_SIGNATURE_LENGTH
    ' #endif // (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)
    ' #if (NTDDI_VERSION >= NTDDI_WIN8)
    Public Const NCRYPT_CHAINING_MODE_PROPERTY  = "Chaining Mode"
    Public Const NCRYPT_AUTH_TAG_LENGTH  = "AuthTagLength"
    ' #endif // (NTDDI_VERSION >= NTDDI_WIN8)
    Public Const NCRYPT_UI_POLICY_PROPERTY  = "UI Policy"
    Public Const NCRYPT_EXPORT_POLICY_PROPERTY  = "Export Policy"
    Public Const NCRYPT_WINDOW_HANDLE_PROPERTY  = "HWND Handle"
    Public Const NCRYPT_USE_CONTEXT_PROPERTY  = "Use Context"
    Public Const NCRYPT_IMPL_TYPE_PROPERTY  = "Impl Type"
    Public Const NCRYPT_KEY_USAGE_PROPERTY  = "Key Usage"
    Public Const NCRYPT_KEY_TYPE_PROPERTY  = "Key Type"
    Public Const NCRYPT_VERSION_PROPERTY  = "Version"
    Public Const NCRYPT_SECURITY_DESCR_SUPPORT_PROPERTY  = "Security Descr Support"
    Public Const NCRYPT_SECURITY_DESCR_PROPERTY  = "Security Descr"
    Public Const NCRYPT_USE_COUNT_ENABLED_PROPERTY  = "Enabled Use Count"
    Public Const NCRYPT_USE_COUNT_PROPERTY  = "Use Count"
    Public Const NCRYPT_LAST_MODIFIED_PROPERTY  = "Modified"
    Public Const NCRYPT_MAX_NAME_LENGTH_PROPERTY  = "Max Name Length"
    Public Const NCRYPT_ALGORITHM_GROUP_PROPERTY  = "Algorithm Group"
    Public Const NCRYPT_DH_PARAMETERS_PROPERTY  = BCRYPT_DH_PARAMETERS
    ' #if (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)
    Public Const NCRYPT_ECC_PARAMETERS_PROPERTY  = BCRYPT_ECC_PARAMETERS
    Public Const NCRYPT_ECC_CURVE_NAME_PROPERTY  = BCRYPT_ECC_CURVE_NAME
    Public Const NCRYPT_ECC_CURVE_NAME_LIST_PROPERTY  = BCRYPT_ECC_CURVE_NAME_LIST
    ' #endif // (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_RS2)
    Public Const NCRYPT_USE_VIRTUAL_ISOLATION_PROPERTY  = "Virtual Iso"
    Public Const NCRYPT_USE_PER_BOOT_KEY_PROPERTY  = "Per Boot Key"
    ' #endif // (NTDDI_VERSION >= NTDDI_WIN10_RS2)
    Public Const NCRYPT_PROVIDER_HANDLE_PROPERTY  = "Provider Handle"
    Public Const NCRYPT_PIN_PROPERTY  = "SmartCardPin"
    Public Const NCRYPT_READER_PROPERTY  = "SmartCardReader"
    Public Const NCRYPT_SMARTCARD_GUID_PROPERTY  = "SmartCardGuid"
    Public Const NCRYPT_CERTIFICATE_PROPERTY  = "SmartCardKeyCertificate"
    Public Const NCRYPT_PIN_PROMPT_PROPERTY  = "SmartCardPinPrompt"
    Public Const NCRYPT_USER_CERTSTORE_PROPERTY  = "SmartCardUserCertStore"
    Public Const NCRYPT_ROOT_CERTSTORE_PROPERTY  = "SmartcardRootCertStore"
    Public Const NCRYPT_SECURE_PIN_PROPERTY  = "SmartCardSecurePin"
    ' #if (NTDDI_VERSION >= NTDDI_WIN7)
    Public Const NCRYPT_ASSOCIATED_ECDH_KEY  = "SmartCardAssociatedECDHKey"
    Public Const NCRYPT_SCARD_PIN_ID  = "SmartCardPinId"
    Public Const NCRYPT_SCARD_PIN_INFO  = "SmartCardPinInfo"
    ' #endif // (NTDDI_VERSION >= NTDDI_WIN7)
    ' #if (NTDDI_VERSION >= NTDDI_WIN8)
    Public Const NCRYPT_READER_ICON_PROPERTY  = "SmartCardReaderIcon"
    Public Const NCRYPT_KDF_SECRET_VALUE  = "KDFKeySecret"
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_RS5)
    Public Const NCRYPT_DISMISS_UI_TIMEOUT_SEC_PROPERTY  = "SmartCardDismissUITimeoutSeconds"
    ' #endif // (NTDDI_VERSION >= NTDDI_WIN10_RS5)
    ' #if (NTDDI_VERSION >= NTDDI_WIN11_SV3) // NTDDI_WIN11_SV3 is not final
    Public Const NCRYPT_VBS_ROOT_PUB_PROPERTY  = "VBS_ROOT_PUB"
    Public Const NCRYPT_CERTIFICATE_FROM_NVRAM_PROPERTY  = "KeyCertificateFromTpmNvram"
    ' #endif // (NTDDI_VERSION >= NTDDI_WIN11_SV3)
    '  Additional property strings specific for the Platform Crypto Provider
    Public Const NCRYPT_PCP_PLATFORM_TYPE_PROPERTY  = "PCP_PLATFORM_TYPE"
    Public Const NCRYPT_PCP_PROVIDER_VERSION_PROPERTY  = "PCP_PROVIDER_VERSION"
    Public Const NCRYPT_PCP_EKPUB_PROPERTY  = "PCP_EKPUB"
    Public Const NCRYPT_PCP_EKCERT_PROPERTY  = "PCP_EKCERT"
    Public Const NCRYPT_PCP_EKNVCERT_PROPERTY  = "PCP_EKNVCERT"
    Public Const NCRYPT_PCP_RSA_EKPUB_PROPERTY  = "PCP_RSA_EKPUB"
    Public Const NCRYPT_PCP_RSA_EKCERT_PROPERTY  = "PCP_RSA_EKCERT"
    Public Const NCRYPT_PCP_RSA_EKNVCERT_PROPERTY  = "PCP_RSA_EKNVCERT"
    Public Const NCRYPT_PCP_ECC_EKPUB_PROPERTY  = "PCP_ECC_EKPUB"
    Public Const NCRYPT_PCP_ECC_EKCERT_PROPERTY  = "PCP_ECC_EKCERT"
    Public Const NCRYPT_PCP_ECC_EKNVCERT_PROPERTY  = "PCP_ECC_EKNVCERT"
    Public Const NCRYPT_PCP_SRKPUB_PROPERTY  = "PCP_SRKPUB"
    Public Const NCRYPT_PCP_PCRTABLE_PROPERTY  = "PCP_PCRTABLE"
    Public Const NCRYPT_PCP_CHANGEPASSWORD_PROPERTY  = "PCP_CHANGEPASSWORD"
    Public Const NCRYPT_PCP_PASSWORD_REQUIRED_PROPERTY  = "PCP_PASSWORD_REQUIRED"
    Public Const NCRYPT_PCP_USAGEAUTH_PROPERTY  = "PCP_USAGEAUTH"
    Public Const NCRYPT_PCP_MIGRATIONPASSWORD_PROPERTY  = "PCP_MIGRATIONPASSWORD"
    Public Const NCRYPT_PCP_EXPORT_ALLOWED_PROPERTY  = "PCP_EXPORT_ALLOWED"
    Public Const NCRYPT_PCP_STORAGEPARENT_PROPERTY  = "PCP_STORAGEPARENT"
    Public Const NCRYPT_PCP_PROVIDERHANDLE_PROPERTY  = "PCP_PROVIDERMHANDLE"
    Public Const NCRYPT_PCP_PLATFORMHANDLE_PROPERTY  = "PCP_PLATFORMHANDLE"
    Public Const NCRYPT_PCP_PLATFORM_BINDING_PCRMASK_PROPERTY  = "PCP_PLATFORM_BINDING_PCRMASK"
    Public Const NCRYPT_PCP_PLATFORM_BINDING_PCRDIGESTLIST_PROPERTY = "PCP_PLATFORM_BINDING_PCRDIGESTLIST"
    Public Const NCRYPT_PCP_PLATFORM_BINDING_PCRDIGEST_PROPERTY  = "PCP_PLATFORM_BINDING_PCRDIGEST"
    Public Const NCRYPT_PCP_KEY_USAGE_POLICY_PROPERTY  = "PCP_KEY_USAGE_POLICY"
    Public Const NCRYPT_PCP_RSA_SCHEME_PROPERTY  = "PCP_RSA_SCHEME"
    Public Const NCRYPT_PCP_TPM12_IDBINDING_PROPERTY  = "PCP_TPM12_IDBINDING"
    Public Const NCRYPT_PCP_TPM12_IDBINDING_DYNAMIC_PROPERTY  = "PCP_TPM12_IDBINDING_DYNAMIC"
    Public Const NCRYPT_PCP_TPM12_IDACTIVATION_PROPERTY  = "PCP_TPM12_IDACTIVATION"
    Public Const NCRYPT_PCP_KEYATTESTATION_PROPERTY  = "PCP_TPM12_KEYATTESTATION"
    Public Const NCRYPT_PCP_ALTERNATE_KEY_STORAGE_LOCATION_PROPERTY = "PCP_ALTERNATE_KEY_STORAGE_LOCATION"
    ' #if (NTDDI_VERSION >= NTDDI_WIN10)
    Public Const NCRYPT_PCP_PLATFORM_BINDING_PCRALGID_PROPERTY  = "PCP_PLATFORM_BINDING_PCRALGID"
    ' #endif // (NTDDI_VERSION >= NTDDI_WIN10)
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_RS1)
    Public Const NCRYPT_PCP_HMAC_AUTH_POLICYREF  = "PCP_HMAC_AUTH_POLICYREF"
    Public Const NCRYPT_PCP_HMAC_AUTH_POLICYINFO  = "PCP_HMAC_AUTH_POLICYINFO"
    Public Const NCRYPT_PCP_HMAC_AUTH_NONCE  = "PCP_HMAC_AUTH_NONCE"
    Public Const NCRYPT_PCP_HMAC_AUTH_SIGNATURE  = "PCP_HMAC_AUTH_SIGNATURE"
    Public Const NCRYPT_PCP_HMAC_AUTH_TICKET  = "PCP_HMAC_AUTH_TICKET"
    Public Const NCRYPT_PCP_NO_DA_PROTECTION_PROPERTY  = "PCP_NO_DA_PROTECTION"
    ' #endif // (NTDDI_VERSION >= NTDDI_WIN10_RS1)
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_RS2)
    Public Const NCRYPT_PCP_TPM_MANUFACTURER_ID_PROPERTY  = "PCP_TPM_MANUFACTURER_ID"
    Public Const NCRYPT_PCP_TPM_FW_VERSION_PROPERTY  = "PCP_TPM_FW_VERSION"
    ' #endif // (NTDDI_VERSION >= NTDDI_WIN10_RS2)
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_RS3)
    Public Const NCRYPT_PCP_TPM2BNAME_PROPERTY  = "PCP_TPM2BNAME"
    Public Const NCRYPT_PCP_TPM_VERSION_PROPERTY  = "PCP_TPM_VERSION"
    ' #endif // (NTDDI_VERSION >= NTDDI_WIN10_RS3)
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_RS4)
    Public Const NCRYPT_PCP_RAW_POLICYDIGEST_PROPERTY  = "PCP_RAW_POLICYDIGEST"
    Public Const NCRYPT_PCP_KEY_CREATIONHASH_PROPERTY  = "PCP_KEY_CREATIONHASH"
    Public Const NCRYPT_PCP_KEY_CREATIONTICKET_PROPERTY  = "PCP_KEY_CREATIONTICKET"
    Public Const NCRYPT_PCP_RSA_SCHEME_HASH_ALG_PROPERTY  = "PCP_RSA_SCHEME_HASH_ALG"
    Public Const NCRYPT_PCP_TPM_IFX_RSA_KEYGEN_PROHIBITED_PROPERTY  = "PCP_TPM_IFX_RSA_KEYGEN_PROHIBITED"
    Public Const NCRYPT_PCP_TPM_IFX_RSA_KEYGEN_VULNERABILITY_PROPERTY  = "PCP_TPM_IFX_RSA_KEYGEN_VULNERABILITY"
    ' #endif // (NTDDI_VERSION >= NTDDI_WIN10_RS4)
    Public Enum NCrypRSAKeyGenVulnerabilityLevels
        IFX_RSA_KEYGEN_VUL_NOT_AFFECTED = 0
        IFX_RSA_KEYGEN_VUL_AFFECTED_LEVEL_1 = 1
        IFX_RSA_KEYGEN_VUL_AFFECTED_LEVEL_2 = 2
    End Enum
    Public Const NCRYPT_PCP_SESSIONID_PROPERTY  = "PCP_SESSIONID"
    Public Const NCRYPT_PCP_PSS_SALT_SIZE_PROPERTY  = "PSS Salt Size"
    Public Enum NCryptTPMPssSaltSize
        NCRYPT_TPM_PSS_SALT_SIZE_UNKNOWN = &H00000000
        NCRYPT_TPM_PSS_SALT_SIZE_MAXIMUM = &H00000001  ' Pre-TPM Spec-1.16: Max allowed salt size
        NCRYPT_TPM_PSS_SALT_SIZE_HASHSIZE = &H00000002  ' Post-1.16: PSS salt = hashLen
    End Enum
    Public Const NCRYPT_PCP_INTERMEDIATE_CA_EKCERT_PROPERTY  = "PCP_INTERMEDIATE_CA_EKCERT"
    ' #endif // (NTDDI_VERSION >= NTDDI_WIN10_MN)
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_FE)
    Public Const NCRYPT_PCP_PCRTABLE_ALGORITHM_PROPERTY  = "PCP_PCRTABLE_ALGORITHM"
    ' #endif // (NTDDI_VERSION >= NTDDI_WIN10_FE)
    '#if (NTDDI_VERSION  = >= NTDDI_WIN10_CO)
    Public Const NCRYPT_PCP_SYMMETRIC_KEYBITS_PROPERTY  = "PCP_SYMMETRIC_KEYBITS"

    Public Enum NCryptSignHashFlags
        NCRYPT_TPM_PAD_PSS_IGNORE_SALT = &H00000020
    End Enum

    Public Enum NCryptPcpKeyUsage
        NCRYPT_TPM12_PROVIDER = (&H00010000)
        NCRYPT_PCP_SIGNATURE_KEY = (&H00000001)
        NCRYPT_PCP_ENCRYPTION_KEY = (&H00000002)
        NCRYPT_PCP_GENERIC_KEY = (NCRYPT_PCP_SIGNATURE_KEY Or NCRYPT_PCP_ENCRYPTION_KEY)
        NCRYPT_PCP_STORAGE_KEY = (&H00000004)
        NCRYPT_PCP_IDENTITY_KEY = (&H00000008)
    ' #endif // (NTDDI_VERSION >= NTDDI_WIN8)
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_RS1)
        NCRYPT_PCP_HMACVERIFICATION_KEY = (&H00000010)
    End Enum

    Public Const NCRYPT_SCARD_NGC_KEY_NAME  = "SmartCardNgcKeyName"
    ' #endif // (NTDDI_VERSION >= NTDDI_WIN10)
    ' #if (NTDDI_VERSION >= NTDDI_WIN8)
    '  Used to set IV for block ciphers, before calling NCryptEncrypt/NCryptDecrypt
    Public Const NCRYPT_INITIALIZATION_VECTOR  = BCRYPT_INITIALIZATION_VECTOR
    ' #endif // (NTDDI_VERSION >= NTDDI_WIN8)
    ' #if (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)
    Public Const NCRYPT_CHANGEPASSWORD_PROPERTY  = NCRYPT_PCP_CHANGEPASSWORD_PROPERTY
    Public Const NCRYPT_ALTERNATE_KEY_STORAGE_LOCATION_PROPERTY  = NCRYPT_PCP_ALTERNATE_KEY_STORAGE_LOCATION_PROPERTY
    Public Const NCRYPT_KEY_ACCESS_POLICY_PROPERTY  = "Key Access Policy"
    ' #endif // (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)
    '  Maximum length of property name (in characters)
    Public Const NCRYPT_MAX_PROPERTY_NAME  = 64
    '  Maximum length of property data (in bytes)
    Public Const NCRYPT_MAX_PROPERTY_DATA  = &H100000

    Public Enum NCryptExportPolicyPropertyFlags
        NCRYPT_ALLOW_EXPORT_FLAG = &H00000001
        NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG = &H00000002
        NCRYPT_ALLOW_ARCHIVING_FLAG = &H00000004
        NCRYPT_ALLOW_PLAINTEXT_ARCHIVING_FLAG = &H00000008
    End Enum
    Public Enum NCryptImplTypePropertyFlags
        NCRYPT_IMPL_HARDWARE_FLAG = &H00000001
        NCRYPT_IMPL_SOFTWARE_FLAG = &H00000002
        NCRYPT_IMPL_REMOVABLE_FLAG = &H00000008
        NCRYPT_IMPL_HARDWARE_RNG_FLAG = &H00000010
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_RS4)
        NCRYPT_IMPL_VIRTUAL_ISOLATION_FLAG = &H00000020
    End Enum

    Public Enum NCryptKeyUsageFlags
        NCRYPT_ALLOW_DECRYPT_FLAG = &H00000001
        NCRYPT_ALLOW_SIGNING_FLAG = &H00000002
        NCRYPT_ALLOW_KEY_AGREEMENT_FLAG = &H00000004
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_RS3)
        NCRYPT_ALLOW_KEY_ENVELOPE_FLAG = &H00000008
        NCRYPT_ALLOW_KEY_IMPORT_FLAG = NCRYPT_ALLOW_KEY_ENVELOPE_FLAG
    ' #endif
    ' #if (NTDDI_VERSION >= NTDDI_WIN11_SV3)
        NCRYPT_ALLOW_KEY_ATTESTATION_FLAG = &H00000010
    ' #endif
        NCRYPT_ALLOW_ALL_USAGES = &H00ffffff
    End Enum

    Public Enum NCryptUIPolicyFlags
        NCRYPT_UI_PROTECT_KEY_FLAG = &H00000001
        NCRYPT_UI_FORCE_HIGH_PROTECTION_FLAG = &H00000002
    ' #if (NTDDI_VERSION >= NTDDI_WINBLUE)
        NCRYPT_UI_FINGERPRINT_PROTECTION_FLAG = &H00000004
        NCRYPT_UI_APPCONTAINER_ACCESS_MEDIUM_FLAG = &H00000008
    End Enum

    Public Const NCRYPT_PIN_CACHE_FREE_APPLICATION_TICKET_PROPERTY  = "PinCacheFreeApplicationTicket"
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_RS1)
    Public Const NCRYPT_PIN_CACHE_FLAGS_PROPERTY  = "PinCacheFlags"
    Public Const NCRYPT_PIN_CACHE_DISABLE_DPL_FLAG = &H00000001

    Public Const NCRYPT_PIN_CACHE_APPLICATION_TICKET_PROPERTY  = "PinCacheApplicationTicket"
    Public Const NCRYPT_PIN_CACHE_APPLICATION_IMAGE_PROPERTY  = "PinCacheApplicationImage"
    Public Const NCRYPT_PIN_CACHE_APPLICATION_STATUS_PROPERTY  = "PinCacheApplicationStatus"
    Public Const NCRYPT_PIN_CACHE_PIN_PROPERTY  = "PinCachePin"
    Public Const NCRYPT_PIN_CACHE_IS_GESTURE_REQUIRED_PROPERTY  = "PinCacheIsGestureRequired"

    Public Enum NCryptCacheRequireGestureFlags
        NCRYPT_PIN_CACHE_REQUIRE_GESTURE_FLAG = &H00000001
    End Enum

    Public Const NCRYPT_PIN_CACHE_PIN_BYTE_LENGTH  = 90
    Public Const NCRYPT_PIN_CACHE_APPLICATION_TICKET_BYTE_LENGTH  = 90
    ' #endif // (NTDDI_VERSION >= NTDDI_WINTHRESHOLD)
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_RS1)
    Public Const NCRYPT_PIN_CACHE_CLEAR_PROPERTY  = "PinCacheClear"
    '  The NCRYPT_PIN_CACHE_CLEAR_PROPERTY property is a DWORD value. The following option can be set:
    Public Const NCRYPT_PIN_CACHE_CLEAR_FOR_CALLING_PROCESS_OPTION  = &H00000001

    Public Type NCRYPT_UI_POLICY
        dwVersion As Long
        dwFlags As NCryptUIPolicyFlags
        pszCreationTitle As LongPtr
        pszFriendlyName As LongPtr
        pszDescription As LongPtr
    End Type

    Public Const NCRYPT_KEY_ACCESS_POLICY_VERSION = 1
    Public Enum NCryptKeyAccessPolicyFlags
        NCRYPT_ALLOW_SILENT_KEY_ACCESS = &H00000001
    End Enum
    Public Type NCRYPT_KEY_ACCESS_POLICY_BLOB
        dwVersion As Long
        dwPolicyFlags As NCryptKeyAccessPolicyFlags
        cbUserSid As Long
        cbApplicationSid As Long
        '  User Sid
        '  Application Sid
    End Type

    Public Type NCRYPT_SUPPORTED_LENGTHS
        dwMinLength As Long
        dwMaxLength As Long
        dwIncrement As Long
        dwDefaultLength As Long
    End Type

    Public Type NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO
        dwVersion As Long
        iExpiration As Long
        pabNonce(0 To 31) As Byte
        pabPolicyRef(0 To 31) As Byte
        pabHMAC(0 To 31) As Byte
    End Type

    Public Type NCRYPT_PCP_TPM_FW_VERSION_INFO
        major1 As Integer
        major2 As Integer
        minor1 As Integer
        minor2 As Integer
    End Type

    Public Type NCRYPT_PCP_RAW_POLICYDIGEST
        dwVersion As Long
        cbDigest As Long
    End Type

    Public DeclareWide PtrSafe Function NCryptGetProperty Lib "ncrypt" (ByVal hObject As LongPtr, ByVal pszProperty As String, pbOutput As Any, ByVal cbOutput As Long, pcbResult As Long, [TypeHint(NCryptFlags)] ByVal dwFlags As Long) As SECURITY_STATUS
    Public DeclareWide PtrSafe Function NCryptSetProperty Lib "ncrypt" (ByVal hObject As LongPtr, ByVal pszProperty As String, pbInput As Any, ByVal cbInput As Long, [TypeHint(NCryptFlags)] ByVal dwFlags As Long) As SECURITY_STATUS
    Public Declare PtrSafe Function NCryptFinalizeKey Lib "ncrypt" (ByVal hKey As LongPtr, [TypeHint(NCryptFlags)] ByVal dwFlags As Long) As SECURITY_STATUS
    Public DeclareWide PtrSafe Function NCryptEncrypt Lib "ncrypt" (ByVal hKey As LongPtr, pbInput As Any, ByVal cbInput As Long, pPaddingInfo As Any, pbOutput As Any, ByVal cbOutput As Long, pcbResult As Long, [TypeHint(NCryptFlags)] ByVal dwFlags As Long) As SECURITY_STATUS
    Public DeclareWide PtrSafe Function NCryptDecrypt Lib "ncrypt" (ByVal hKey As LongPtr, pbInput As Any, ByVal cbInput As Long, pPaddingInfo As Any, pbOutput As Any, ByVal cbOutput As Long, pcbResult As Long, [TypeHint(NCryptFlags)] ByVal dwFlags As Long) As SECURITY_STATUS

    Public Type NCRYPT_KEY_BLOB_HEADER
        cbSize As Long ' size of this structure
        dwMagic As Long
        cbAlgName As Long ' size of the algorithm, in bytes, including terminating 0
        cbKeyData As Long
    End Type

    Public Const NCRYPT_CIPHER_KEY_BLOB_MAGIC  = &H52485043  ' CPHR
    Public Const NCRYPT_KDF_KEY_BLOB_MAGIC  = &H3146444B  ' KDF1
    Public Const NCRYPT_PROTECTED_KEY_BLOB_MAGIC  = &H4B545250  ' PRTK

    Public Const NCRYPT_CIPHER_KEY_BLOB  = "CipherKeyBlob"
    Public Const NCRYPT_KDF_KEY_BLOB  = "KDFKeyBlob"
    Public Const NCRYPT_PROTECTED_KEY_BLOB  = "ProtectedKeyBlob"

    Public Type NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER
        magic As Long
        cbHeader As Long
        cbPublic As Long
        cbPrivate As Long
        cbName As Long
    End Type

    Public Const NCRYPT_TPM_LOADABLE_KEY_BLOB_MIN_SIZE  = 20 'sizeof(NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER)
    Public Const NCRYPT_TPM_LOADABLE_KEY_BLOB  = "PcpTpmProtectedKeyBlob"
    Public Const NCRYPT_TPM_LOADABLE_KEY_BLOB_MAGIC  = &H4D54504B  ''MTPK'

    Public Type NCRYPT_TPM_PERSISTENT_KEY_BLOB_HEADER
        magic As Long
        cbHeader As Long
        tpmHandle As Long
    End Type

    Public Const NCRYPT_PKCS7_ENVELOPE_BLOB  = "PKCS7_ENVELOPE"
    Public Const NCRYPT_PKCS8_PRIVATE_KEY_BLOB  = "PKCS8_PRIVATEKEY"
    Public Const NCRYPT_OPAQUETRANSPORT_BLOB  = "OpaqueTransport"
    ' #if (NTDDI_VERSION >= NTDDI_WIN10_RS3)
    Public Const NCRYPT_ISOLATED_KEY_ENVELOPE_BLOB  = "ISOLATED_KEY_ENVELOPE"

    Public DeclareWide PtrSafe Function NCryptImportKey Lib "ncrypt" (ByVal hProvider As LongPtr, ByVal hImportKey As LongPtr, ByVal pszBlobType As String, pParameterList As NCryptBufferDesc, phKey As LongPtr, pbData As Any, ByVal cbData As Long, [TypeHint(NCryptFlags)] ByVal dwFlags As Long) As SECURITY_STATUS
    Public DeclareWide PtrSafe Function NCryptExportKey Lib "ncrypt" (ByVal hKey As LongPtr, ByVal hExportKey As LongPtr, ByVal pszBlobType As String, pParameterList As NCryptBufferDesc, pbOutput As Any, ByVal cbOutput As Long, pcbResult As Long, [TypeHint(NCryptFlags)] ByVal dwFlags As Long) As SECURITY_STATUS
    Public DeclareWide PtrSafe Function NCryptSignHash Lib "ncrypt" (ByVal hKey As LongPtr, pPaddingInfo As Any, pbHashValue As Any, ByVal cbHashValue As Long, pbSignature As Any, ByVal cbSignature As Long, pcbResult As Long, [TypeHint(BCRYPT_RSA_PADDING, NCryptStorageProvFlags)] ByVal dwFlags As Long) As SECURITY_STATUS
    Public DeclareWide PtrSafe Function NCryptVerifySignature Lib "ncrypt" (ByVal hKey As LongPtr, pPaddingInfo As Any, pbHashValue As Any, ByVal cbHashValue As Long, pbSignature As Any, ByVal cbSignature As Long, [TypeHint(BCRYPT_RSA_PADDING, NCryptStorageProvFlags)] ByVal dwFlags As Long) As SECURITY_STATUS
    Public Declare PtrSafe Function NCryptDeleteKey Lib "ncrypt" (ByVal hKey As LongPtr, [TypeHint(NCryptStorageProvFlags)] ByVal dwFlags As Long) As SECURITY_STATUS
    Public Declare PtrSafe Function NCryptFreeObject Lib "ncrypt" (ByVal hObject As LongPtr) As SECURITY_STATUS
    Public Declare PtrSafe Function NCryptIsKeyHandle Lib "ncrypt" (ByVal hKey As LongPtr) As BOOL
    Public Declare PtrSafe Function NCryptTranslateHandle Lib "ncrypt" (phProvider As LongPtr, phKey As LongPtr, ByVal hLegacyProv As LongPtr, ByVal hLegacyKey As LongPtr, ByVal dwLegacyKeySpec As CRYPT_AT_FLAGS, ByVal dwFlags As Long) As SECURITY_STATUS
    Public Declare PtrSafe Function NCryptNotifyChangeKey Lib "ncrypt" (ByVal hProvider As LongPtr, phEvent As LongPtr, [TypeHint(NCryptFlags)] ByVal dwFlags As Long) As SECURITY_STATUS
    Public Declare PtrSafe Function NCryptSecretAgreement Lib "ncrypt" (ByVal hPrivKey As LongPtr, ByVal hPubKey As LongPtr, phAgreedSecret As LongPtr, [TypeHint(NCryptStorageProvFlags)] ByVal dwFlags As Long) As SECURITY_STATUS
    Public DeclareWide PtrSafe Function NCryptDeriveKey Lib "ncrypt" (ByVal hSharedSecret As LongPtr, ByVal pwszKDF As String, pParameterList As NCryptBufferDesc, pbDerivedKey As Any, ByVal cbDerivedKey As Long, pcbResult As Long, [TypeHint(BCryptDeriveKeyFlags)] ByVal dwFlags As Long) As SECURITY_STATUS
    Public DeclareWide PtrSafe Function NCryptKeyDerivation Lib "ncrypt" (ByVal hKey As LongPtr, pParameterList As NCryptBufferDesc, pbDerivedKey As Any, ByVal cbDerivedKey As Long, pcbResult As Long, [TypeHint(BCryptDeriveKeyFlags)] ByVal dwFlags As Long) As SECURITY_STATUS
    Public DeclareWide PtrSafe Function NCryptCreateClaim Lib "ncrypt" (ByVal hSubjectKey As LongPtr, ByVal hAuthorityKey As LongPtr, [TypeHint(NCryptKeyAttestClaimTypes)] ByVal dwClaimType As Long, pParameterList As NCryptBufferDesc, pbClaimBlob As Any, ByVal cbClaimBlob As Long, pcbResult As Long, ByVal dwFlags As Long) As SECURITY_STATUS
    Public DeclareWide PtrSafe Function NCryptVerifyClaim Lib "ncrypt" (ByVal hSubjectKey As LongPtr, ByVal hAuthorityKey As LongPtr, [TypeHint(NCryptKeyAttestClaimTypes)] ByVal dwClaimType As Long, pParameterList As NCryptBufferDesc, pbClaimBlob As Any, ByVal cbClaimBlob As Long, pOutput As NCryptBufferDesc, ByVal dwFlags As Long) As SECURITY_STATUS

    ' #define NCRYPT_KEY_STORAGE_INTERFACE_VERSION BCRYPT_MAKE_INTERFACE_VERSION(1,0)
    ' #define NCRYPT_KEY_STORAGE_INTERFACE_VERSION_2 BCRYPT_MAKE_INTERFACE_VERSION(2,0)
    ' #define NCRYPT_KEY_STORAGE_INTERFACE_VERSION_3 BCRYPT_MAKE_INTERFACE_VERSION(3,0)

    'END ncrypt.h

    'ncryptprotect.h

    Public Const NCRYPT_DESCR_DELIMITER_OR  = "OR"
    Public Const NCRYPT_DESCR_DELIMITER_AND  = "AND"
    Public Const NCRYPT_DESCR_EQUAL  = "="
    /****************************************************************************
    Examples of Protection Descriptor:


    "SID=S-1-5-21-4392301 AND SID=S-1-5-21-3101812"
    "SDDL=O:S-1-5-5-0-290724G:SYD:(A;;CCDC;;;S-1-5-5-0-290724)(A;;DC;;;WD)"
    "LOCAL=user"
    "LOCAL=machine"

    "WEBCREDENTIALS=MyPasswordName"
    "WEBCREDENTIALS=MyPasswordName,myweb.com"

    ****************************************************************************/


    /****************************************************************************
      Microsoft Key Protection Provider

    NCRYPT_KEY_PROTECTION_ALGORITHM_SID
    NCRYPT_KEY_PROTECTION_ALGORITHM_SDDL
    NCRYPT_KEY_PROTECTION_ALGORITHM_LOCAL
    ****************************************************************************/
    Public Const MS_KEY_PROTECTION_PROVIDER  = "Microsoft Key Protection Provider"
    '  Microsoft Key Protection Provider supports the following formats:
    Public Const NCRYPT_KEY_PROTECTION_ALGORITHM_SID  = "SID"
    '  SID=%SidString%
    '  %SidString% is a SID string that identifies the object's group or principal identity
    Public Const NCRYPT_KEY_PROTECTION_ALGORITHM_LOCAL  = "LOCAL"
    Public Const NCRYPT_KEY_PROTECTION_LOCAL_LOGON  = "logon"
    Public Const NCRYPT_KEY_PROTECTION_LOCAL_USER  = "user"
    Public Const NCRYPT_KEY_PROTECTION_LOCAL_MACHINE  = "machine"
    '  Cases for LOCAL protector
    '  Local=logon        : protects to the current logon session,
    '                     - user will not be able to unprotect after logoff or reboot;
    '  Local=user         : protects to the user on local machine,
    '                     - only this caller on the local machine will be able to unprotect;
    '  Local=machine      : protects to Local Machine,
    '                     - all users on the local machine will be able to unprotect;
    Public Const NCRYPT_KEY_PROTECTION_ALGORITHM_SDDL  = "SDDL"
    '  SDDL=%SecurityDescriptor%
    '  %SecurityDescriptor% is a SDDL string that identifies the Security Descriptor
    Public Const NCRYPT_KEY_PROTECTION_ALGORITHM_WEBCREDENTIALS  = "WEBCREDENTIALS"
    '  WEBCREDENTIALS=%Identity%[,%Source%]
    '  Credential Vault stores web passwords by Source:Identity name
    '  If %Source% is not specified, then the default value will be used
    Public Const NCRYPT_KEY_PROTECTION_ALGORITHM_LOCKEDCREDENTIALS  = "LOCKEDCREDENTIALS"
    '  LOCKEDCREDENTIALS=%ProtectionDomain%[,%EnterpriseID%]
    ' #if (NTDDI_VERSION >= NTDDI_WINBLUE)
    Public Const NCRYPT_KEY_PROTECTION_ALGORITHM_CERTIFICATE  = "CERTIFICATE"
    Public Const NCRYPT_KEY_PROTECTION_CERT_HASHID  = "HashId"
    '  CERTIFICATE=HashId:%HexValue%
    '     %HexValue% is hex-encoded SHA1 thumbprint of the certificate
    Public Const NCRYPT_KEY_PROTECTION_CERT_CERTBLOB  = "CertBlob"


    Public DeclareWide PtrSafe Function NCryptRegisterProtectionDescriptorName Lib "ncrypt" (ByVal pwszName As String, ByVal pwszDescriptorString As String, [TypeHint(NCryptFlags)] ByVal dwFlags As Long) As SECURITY_STATUS
    Public DeclareWide PtrSafe Function NCryptQueryProtectionDescriptorName Lib "ncrypt" (ByVal pwszName As String, ByVal pwszDescriptorString As String, pcDescriptorString As LongPtr, [TypeHint(NCryptFlags)] ByVal dwFlags As Long) As SECURITY_STATUS

    Public Enum NCryptNamedDescriptorFlag
        NCRYPT_NAMED_DESCRIPTOR_FLAG = &H00000001
    End Enum
    Public DeclareWide PtrSafe Function NCryptCreateProtectionDescriptor Lib "ncrypt" (ByVal pwszDescriptorString As String, [TypeHint(NCryptFlags, NCryptNamedDescriptorFlag)] ByVal dwFlags As Long, phDescriptor As LongPtr) As SECURITY_STATUS
    Public Declare PtrSafe Function NCryptCloseProtectionDescriptor Lib "ncrypt" (ByVal hDescriptor As LongPtr) As SECURITY_STATUS

    Public Enum NCryptProtectionDescriptorInfoTypes
        NCRYPT_PROTECTION_INFO_TYPE_DESCRIPTOR_STRING = &H00000001
    End Enum
    Public Declare PtrSafe Function NCryptGetProtectionDescriptorInfo Lib "ncrypt" (ByVal hDescriptor As LongPtr, pMemPara As NCRYPT_ALLOC_PARA, [TypeHint(NCryptProtectionDescriptorInfoTypes)] ByVal dwInfoType As Long, ppvInfo As LongPtr) As SECURITY_STATUS

    Public DeclareWide PtrSafe Function NCryptProtectSecret Lib "ncrypt" (ByVal hDescriptor As LongPtr, [TypeHint(NCryptStorageProvFlags)] ByVal dwFlags As Long, pbData As Any, ByVal cbData As Long, pMemPara As NCRYPT_ALLOC_PARA, ByVal hwnd As LongPtr, ppbProtectedBlob As LongPtr, pcbProtectedBlob As Long) As SECURITY_STATUS

    Public Enum NCryptUnprotectFlags
        NCRYPT_UNPROTECT_NO_DECRYPT = &H00000001
    End Enum

    Public DeclareWide PtrSafe Function NCryptUnprotectSecret Lib "ncrypt" (ByVal hDescriptor As LongPtr, [TypeHint(NCryptUnprotectFlags, NCryptStorageProvFlags)] ByVal dwFlags As Long, pbProtectedBlob As Any, ByVal cbProtectedBlob As Long, pMemPara As NCRYPT_ALLOC_PARA, ByVal hwnd As LongPtr, ppbData As LongPtr, pcbData As Long) As SECURITY_STATUS

    ' typedef 
    ' SECURITY_STATUS
    ' (WINAPI *PFNCryptStreamOutputCallback)(
        ' _In_            void                                *pvCallbackCtxt,
        ' _In_reads_bytes_(cbData)
                        ' const BYTE                          *pbData,
                        ' SIZE_T                              cbData,
                        ' BOOL                                fFinal
        ' );
    
    Public Type NCRYPT_PROTECT_STREAM_INFO
        pfnStreamOutput As LongPtr 'PFNCryptStreamOutputCallback
        pvCallbackCtxt As LongPtr 'void*
    End Type

    Public Declare PtrSafe Function NCryptStreamOpenToProtect Lib "ncrypt" (ByVal hDescriptor As LongPtr, [TypeHint(NCryptStorageProvFlags)] ByVal dwFlags As Long, ByVal hWnd As LongPtr, pStreamInfo As NCRYPT_PROTECT_STREAM_INFO, phStream As LongPtr) As SECURITY_STATUS
    Public Declare PtrSafe Function NCryptStreamOpenToUnprotect Lib "ncrypt" (pStreamInfo As NCRYPT_PROTECT_STREAM_INFO, [TypeHint(NCryptStorageProvFlags)] ByVal dwFlags As Long, ByVal hWnd As LongPtr, phStream As LongPtr) As SECURITY_STATUS

    ' typedef
    ' SECURITY_STATUS
    ' (WINAPI *PFNCryptStreamOutputCallbackEx)(
        ' _In_            void                                *pvCallbackCtxt,
        ' _In_reads_bytes_opt_(cbData)
                        ' const BYTE                          *pbData,
                        ' SIZE_T                              cbData,
        ' _In_            NCRYPT_DESCRIPTOR_HANDLE            hDescriptor,
                        ' BOOL                                fFinal
    ' );

    Public Type NCRYPT_PROTECT_STREAM_INFO_EX
        pfnStreamOutput As LongPtr 'PFNCryptStreamOutputCallbackEx
        pvCallbackCtxt As LongPtr 'void*
    End Type

    Public Declare PtrSafe Function NCryptStreamOpenToUnprotectEx Lib "ncrypt" (pStreamInfo As NCRYPT_PROTECT_STREAM_INFO_EX, [TypeHint(NCryptStorageProvFlags)] ByVal dwFlags As Long, ByVal hWnd As LongPtr, phStream As LongPtr) As SECURITY_STATUS
    Public DeclareWide PtrSafe Function NCryptStreamUpdate Lib "ncrypt" (ByVal hStream As LongPtr, pbData As Any, ByVal cbData As LongPtr, ByVal fFinal As BOOL) As SECURITY_STATUS
    Public Declare PtrSafe Function NCryptStreamClose Lib "ncrypt" (ByVal hStream As LongPtr) As SECURITY_STATUS


    #End Region

    #Region "mssign32"
    
    Public Enum SignerSubjectChoice
        SIGNER_SUBJECT_FILE = &H01
        SIGNER_SUBJECT_BLOB = &H02
    End Enum
    
    Public Enum SignerAttrib
        SIGNER_NO_ATTR = &H00
        SIGNER_AUTHCODE_ATTR = &H01
    End Enum
    
    Public Enum SignerPvkTypes
        PVK_TYPE_FILE_NAME = &H01
        PVK_TYPE_KEYCONTAINER = &H02
    End Enum
    
    Public Enum SignerCertPolicy
        SIGNER_CERT_POLICY_STORE = &H01
        SIGNER_CERT_POLICY_CHAIN = &H02
        SIGNER_CERT_POLICY_SPC = &H04
        SIGNER_CERT_POLICY_CHAIN_NO_ROOT = &H08
    End Enum
    
    Public Enum SignerCertSource
        SIGNER_CERT_SPC_FILE = &H01
        SIGNER_CERT_STORE = &H02
        SIGNER_CERT_SPC_CHAIN = &H03
    End Enum
    
    Public Enum SignerTimestampFlags
        SIGNER_TIMESTAMP_AUTHENTICODE = 1
        SIGNER_TIMESTAMP_RFC3161 = 2
    End Enum
    
    Public Const SIG_APPEND  = &H1000
    
    ' typedef HRESULT (WINAPI *PFN_AUTHENTICODE_DIGEST_SIGN)(
    ' _In_ PCCERT_CONTEXT pSigningCert,                        
    ' _In_opt_ PCRYPT_DATA_BLOB pMetadataBlob,                 
    ' _In_ ALG_ID digestAlgId,                                 
    ' _In_ PBYTE pbToBeSignedDigest, 
    ' _In_ DWORD cbToBeSignedDigest,                           
    ' _Out_ PCRYPT_DATA_BLOB pSignedDigest      
    ' );

' typedef HRESULT (WINAPI *PFN_AUTHENTICODE_DIGEST_SIGN_EX)(
    ' _In_opt_ PCRYPT_DATA_BLOB pMetadataBlob,         
    ' _In_ ALG_ID digestAlgId,                                 
    ' _In_ PBYTE pbToBeSignedDigest, 
    ' _In_ DWORD cbToBeSignedDigest,                           
    ' _Out_ PCRYPT_DATA_BLOB pSignedDigest,                    
    ' _Out_ PCCERT_CONTEXT* ppSignerCert,                      
    ' _Inout_ HCERTSTORE hCertChainStore  
    ' );

' typedef HRESULT (WINAPI *PFN_AUTHENTICODE_DIGEST_SIGN_EX_WITHFILEHANDLE)(
    ' _In_opt_ PCRYPT_DATA_BLOB pMetadataBlob,                 
    ' _In_ ALG_ID digestAlgId,                                 
    ' _In_ PBYTE pbToBeSignedDigest, 
    ' _In_ DWORD cbToBeSignedDigest,                           
    ' _In_ HANDLE hFile,
    ' _Out_ PCRYPT_DATA_BLOB pSignedDigest,                  
    ' _Out_ PCCERT_CONTEXT* ppSignerCert,                      
    ' _Inout_ HCERTSTORE hCertChainStore   
    ' );

' typedef HRESULT (WINAPI *PFN_AUTHENTICODE_DIGEST_SIGN_WITHFILEHANDLE)(
    ' _In_ PCCERT_CONTEXT pSigningCert,                        
    ' _In_opt_ PCRYPT_DATA_BLOB pMetadataBlob,                 
    ' _In_ ALG_ID digestAlgId,                                 
    ' _In_ PBYTE pbToBeSignedDigest, 
    ' _In_ DWORD cbToBeSignedDigest,    
    ' _In_ HANDLE hFile,                   
    ' _Out_ PCRYPT_DATA_BLOB pSignedDigest 
    ' );
    
    Public Type SIGNER_ATTR_AUTHCODE
        cbSize As Long
        fCommercial As BOOL
        fIndividual As BOOL
        pwszName As LongPtr
        pwszInfo As LongPtr
    End Type
    
    Public Type SIGNER_BLOB_INFO
        cbSize As Long
        pGuidSubject As LongPtr 'GUID*
        cbBlob As Long
        pbBlob As LongPtr 'BYTE*
        pwszDisplayName As LongPtr
    End Type
    
    Public Type SIGNER_CERT_STORE_INFO
        cbSize As Long
        pSigningCert As LongPtr 'PCCERT_CONTEXT
        dwCertPolicy As SignerCertPolicy
        hCertStore As LongPtr 'HCERTSTORE
    End Type
    
    Public Type SIGNER_SPC_CHAIN_INFO
        cbSize As Long
        pwszSpcFile As LongPtr
        dwCertPolicy As SignerCertPolicy
        hCertStore As LongPtr 'HCERTSTORE
    End Type
    
    Public Type SIGNER_CERT
        cbSize As Long
        dwCertChoice As SignerCertPolicy
        '    union {
        '       LPCWSTR                pwszSpcFile;
        '       SIGNER_CERT_STORE_INFO *pCertStoreInfo;
        '        SIGNER_SPC_CHAIN_INFO  *pSpcChainInfo;
        '    };
        u As LongPtr
        hwnd As LongPtr
    End Type
    
    Public Type SIGNER_CONTEXT
        cbSize As Long
        cbBlob As Long
        pbBlob As LongPtr 'BYTE*
    End Type
    
    Public Enum SignerDigestSignChoice
        DIGEST_SIGN = &H0001
        DIGEST_SIGN_WITHFILEHANDLE = &H0002
        DIGEST_SIGN_EX = &H0004
        DIGEST_SIGN_EX_WITHFILEHANDLE = &H0008
    End Enum
        
        
    Public Type SIGNER_DIGEST_SIGN_INFO
        cbSize As Long
        dwDigestSignChoice As SignerDigestSignChoice
        '    union {
        '        PFN_AUTHENTICODE_DIGEST_SIGN pfnAuthenticodeDigestSign;
        '        PFN_AUTHENTICODE_DIGEST_SIGN_WITHFILEHANDLE pfnAuthenticodeDigestSignWithFileHandle;
        '       PFN_AUTHENTICODE_DIGEST_SIGN_EX pfnAuthenticodeDigestSignEx;
        '        PFN_AUTHENTICODE_DIGEST_SIGN_EX_WITHFILEHANDLE pfnAuthenticodeDigestSignExWithFileHandle;
        '    };
        pfn As LongPtr
        pMetadataBlob As LongPtr 'PCRYPT_DATA_BLOB
        dwReserved As Long
        dwReserved2 As Long
        dwReserved3 As Long
    End Type
    
    Public Type SIGNER_DIGEST_SIGN_INFO_V1
        cbSize As Long
        pfnAuthenticodeDigestSign As LongPtr 'PFN_AUTHENTICODE_DIGEST_SIGN
        pMetadataBlob As LongPtr 'PCRYPT_DATA_BLOB
    End Type
    Public Type SIGNER_DIGEST_SIGN_INFO_V2
        cbSize As Long
        pfnAuthenticodeDigestSign As LongPtr 'PFN_AUTHENTICODE_DIGEST_SIGN
        pfnAuthenticodeDigestSignEx As LongPtr 'PFN_AUTHENTICODE_DIGEST_SIGN_EX
        pMetadataBlob As LongPtr 'PCRYPT_DATA_BLOB
    End Type
    
    Public Type SIGNER_FILE_INFO
        cbSize As Long
        pwszFileName As LongPtr
        hFile As LongPtr
    End Type
    
    Public Type SIGNER_PROVIDER_INFO
        cbSize As Long
        pwszProviderName As LongPtr
        dwProviderType As Long
        dwKeySpec As CRYPT_AT_FLAGS
        dwPvkChoice As SignerPvkTypes
        '    union {
        '        LPWSTR pwszPvkFileName;
        '        LPWSTR pwszKeyContainer;
        '    };
        pwsz As LongPtr
    End Type
    
    Public Type SIGNER_SIGNATURE_INFO
        cbSize As Long
        algidHash As ALG_ID
        dwAttrChoice As SignerAttrib
        '    union {
        pAttrAuthcode As SIGNER_ATTR_AUTHCODE
        '    };
        psAuthenticated As LongPtr 'PCRYPT_ATTRIBUTES
        psUnauthenticated As LongPtr 'PCRYPT_ATTRIBUTES
    End Type
    
    Public Type SIGNER_SUBJECT_INFO
        cbSize As Long
        pdwIndex As LongPtr 'DWORD*
        dwSubjectChoice As SignerSubjectChoice
        '    union {
        '       SIGNER_FILE_INFO *pSignerFileInfo;
        '        SIGNER_BLOB_INFO *pSignerBlobInfo;
        '    };
        pFileOrBlob As LongPtr
    End Type
    
    
    Public Declare PtrSafe Function SignError Lib "Mssign32.dll" () As Long
    Public Declare PtrSafe Function SignerFreeSignerContext Lib "Mssign32.dll" (ByVal pSignerContext As LongPtr) As Long
    Public Declare PtrSafe Function SignerSign Lib "Mssign32.dll" (pSubjectInfo As SIGNER_SUBJECT_INFO, pSignerCert As SIGNER_CERT, pSignatureInfo As SIGNER_SIGNATURE_INFO, pProviderInfo As SIGNER_PROVIDER_INFO, ByVal pwszHttpTimeStamp As LongPtr, psRequest As CRYPT_ATTRIBUTES, pSipData As Any) As Long
    Public Declare PtrSafe Function SignerSignEx Lib "Mssign32.dll" (ByVal dwFlags As CryptSipSubjectInfoFlags, pSubjectInfo As SIGNER_SUBJECT_INFO, pSignerCert As SIGNER_CERT, pSignatureInfo As SIGNER_SIGNATURE_INFO, pProviderInfo As SIGNER_PROVIDER_INFO, ByVal pwszHttpTimeStamp As LongPtr, psRequest As CRYPT_ATTRIBUTES, pSipData As Any, ppSignerContext As LongPtr) As Long
    Public Declare PtrSafe Function SignerSignEx2 Lib "Mssign32.dll" (ByVal dwFlags As CryptSipSubjectInfoFlags, pSubjectInfo As SIGNER_SUBJECT_INFO, pSignerCert As SIGNER_CERT, pSignatureInfo As SIGNER_SIGNATURE_INFO, pProviderInfo As SIGNER_PROVIDER_INFO, ByVal dwTimestampFlags As SignerTimestampFlags, ByVal pszTimestampAlgorithmOid As LongPtr, ByVal pwszHttpTimeStamp As LongPtr, psRequest As CRYPT_ATTRIBUTES, pSipData As Any, ppSignerContext As LongPtr, pCryptoPolicy As CERT_STRONG_SIGN_PARA, ByVal pReserved As LongPtr) As Long
    Public Declare PtrSafe Function SignerSignEx3 Lib "Mssign32.dll" (ByVal dwFlags As CryptSipSubjectInfoFlags, pSubjectInfo As SIGNER_SUBJECT_INFO, pSignerCert As SIGNER_CERT, pSignatureInfo As SIGNER_SIGNATURE_INFO, pProviderInfo As SIGNER_PROVIDER_INFO, ByVal dwTimestampFlags As SignerTimestampFlags, ByVal pszTimestampAlgorithmOid As LongPtr, ByVal pwszHttpTimeStamp As LongPtr, psRequest As CRYPT_ATTRIBUTES, pSipData As Any, ppSignerContext As LongPtr, pCryptoPolicy As CERT_STRONG_SIGN_PARA, pDigestSignInfo As SIGNER_DIGEST_SIGN_INFO, ByVal pReserved As LongPtr) As Long
    Public Declare PtrSafe Function SignerTimeStamp Lib "Mssign32.dll" (pSubjectInfo As SIGNER_SUBJECT_INFO, ByVal pwszHttpTimeStamp As LongPtr, psRequest As CRYPT_ATTRIBUTES, pSipData As Any) As Long
    Public Declare PtrSafe Function SignerTimeStampEx Lib "Mssign32.dll" (ByVal dwFlags As Long, pSubjectInfo As SIGNER_SUBJECT_INFO, ByVal pwszHttpTimeStamp As LongPtr, psRequest As CRYPT_ATTRIBUTES, pSipData As Any, ppSignerContext As LongPtr) As Long
    Public Declare PtrSafe Function SignerTimeStampEx2 Lib "Mssign32.dll" (ByVal dwFlags As SignerTimestampFlags, pSubjectInfo As SIGNER_SUBJECT_INFO, ByVal pwszHttpTimeStamp As LongPtr, ByVal dwAlgId As ALG_ID, psRequest As CRYPT_ATTRIBUTES, pSipData As Any, ppSignerContext As LongPtr) As Long
    Public Declare PtrSafe Function SignerTimeStampEx3 Lib "Mssign32.dll" (ByVal dwFlags As SignerTimestampFlags, ByVal dwIndex As Long, pSubjectInfo As SIGNER_SUBJECT_INFO, ByVal pwszHttpTimeStamp As LongPtr, ByVal pszAlgorithmOid As LongPtr, psRequest As CRYPT_ATTRIBUTES, pSipData As Any, ppSignerContext As LongPtr, pCryptoPolicy As CERT_STRONG_SIGN_PARA, ByVal pReserved As LongPtr) As Long
                
    #End Region

End Module
#End If